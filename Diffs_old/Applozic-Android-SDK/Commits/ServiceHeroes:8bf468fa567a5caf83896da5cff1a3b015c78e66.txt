diff --git a/README.md b/README.md
index 1fbdfa48..f6e9db29 100644
--- a/README.md
+++ b/README.md
@@ -24,7 +24,7 @@ Documentation: [Applozic Android Chat & Messaging SDK Documentation](https://www
 
 #### Step 1: Add the following in your build.gradle dependency:      
 
-`compile 'com.applozic.communication.uiwidget:mobicomkitui:5.8.8' `
+`implementation 'com.applozic.communication.uiwidget:mobicomkitui:5.11' `
 
 
 Add the following in gradle android target:      
@@ -282,18 +282,6 @@ Replace APP_PARENT_ACTIVITY with your app's parent activity.
 
      
 ```
-UserLoginTask.TaskListener listener = new UserLoginTask.TaskListener() {                  
-
-@Override          
-public void onSuccess(RegistrationResponse registrationResponse, Context context) {           
-   // After successful registration with Applozic server the callback will come here 
-}                       
-
-@Override             
-public void onFailure(RegistrationResponse registrationResponse, Exception exception) {  
-    // If any failure in registration the callback  will come here 
-}};                      
-
 User user = new User();          
 user.setUserId(userId); //userId it can be any unique user identifier
 user.setDisplayName(displayName); //displayName is the name of the user which will be shown in chat messages
@@ -301,11 +289,22 @@ user.setEmail(email); //optional
 user.setAuthenticationTypeId(User.AuthenticationType.APPLOZIC.getValue());  //User.AuthenticationType.APPLOZIC.getValue() for password verification from Applozic server and User.AuthenticationType.CLIENT.getValue() for access Token verification from your server set access token as password
 user.setPassword(""); //optional, leave it blank for testing purpose, read this if you want to add additional security by verifying password from your server https://www.applozic.com/docs/configuration.html#access-token-url
 user.setImageLink("");//optional,pass your image link
-new UserLoginTask(user, listener, this).execute((Void) null);                                       
+
+ Applozic.connectUser(context, user, new AlLoginHandler() {
+                @Override
+                public void onSuccess(RegistrationResponse registrationResponse, Context context) {
+                    // After successful registration with Applozic server the callback will come here 
+                }
+
+                @Override
+                public void onFailure(RegistrationResponse registrationResponse, Exception exception) {
+                    // If any failure in registration the callback  will come here 
+             }
+   });                                      
 ```
 
 If it is a new user, new user account will get created else existing user will be logged in to the application.
-You can check if user is logged in to applozic or not by using ``` MobiComUserPreference.getInstance(this).isLoggedIn() ```
+You can check if user is logged in to applozic or not by using ``` Applozic.isConnected(context) ```
 
 
 
@@ -322,22 +321,17 @@ You can check if user is logged in to applozic or not by using ``` MobiComUserPr
 
 ```
 if(MobiComUserPreference.getInstance(context).isRegistered()) {
+  Applozic.registerForPushNotification(context, registrationToken, new AlPushNotificationHandler() {
+                @Override
+                public void onSuccess(RegistrationResponse registrationResponse) {
+                   
+                }
 
-PushNotificationTask pushNotificationTask = null;         
-PushNotificationTask.TaskListener listener = new PushNotificationTask.TaskListener() {                  
-@Override           
-public void onSuccess(RegistrationResponse registrationResponse) {   
-
-}            
-@Override          
-public void onFailure(RegistrationResponse registrationResponse, Exception exception) {
-
-} 
-
-};                    
+                @Override
+                public void onFailure(RegistrationResponse registrationResponse, Exception exception) {
 
-pushNotificationTask = new PushNotificationTask(registrationToken, listener, mActivity);            
-pushNotificationTask.execute((Void) null);  
+                }
+    });
 }
 ```
 
@@ -371,22 +365,17 @@ If you already have GCM enabled in your app, add the below code and pass the GCM
 
 ```
 if(MobiComUserPreference.getInstance(context).isRegistered()) {
+  Applozic.registerForPushNotification(context, registrationToken, new AlPushNotificationHandler() {
+                @Override
+                public void onSuccess(RegistrationResponse registrationResponse) {
+                   
+                }
 
-PushNotificationTask pushNotificationTask = null;         
-PushNotificationTask.TaskListener listener = new PushNotificationTask.TaskListener() {                  
-@Override           
-public void onSuccess(RegistrationResponse registrationResponse) {   
-
-}            
-@Override          
-public void onFailure(RegistrationResponse registrationResponse, Exception exception) {
-
-} 
-
-};                    
+                @Override
+                public void onFailure(RegistrationResponse registrationResponse, Exception exception) {
 
-pushNotificationTask = new PushNotificationTask(registrationToken, listener, mActivity);            
-pushNotificationTask.execute((Void) null);  
+                }
+     });
 }
 ```
 
@@ -444,20 +433,17 @@ android:stopWithTask="false">
 #### Setup PushNotificationTask in UserLoginTask "onSuccess" (refer Step 3).
 
 ```
- PushNotificationTask pushNotificationTask = null;
- PushNotificationTask.TaskListener listener=  new PushNotificationTask.TaskListener() {
- @Override
- public void onSuccess(RegistrationResponse registrationResponse) {
+Applozic.registerForPushNotification(context, Applozic.getInstance(context).getDeviceRegistrationId(), new   AlPushNotificationHandler() {
+                @Override
+                public void onSuccess(RegistrationResponse registrationResponse) {
+                   
+                }
 
- }
- @Override
- public void onFailure(RegistrationResponse registrationResponse, Exception exception) {
+                @Override
+                public void onFailure(RegistrationResponse registrationResponse, Exception exception) {
 
- }
-  
- };
- pushNotificationTask = new PushNotificationTask(Applozic.getInstance(context).getDeviceRegistrationId(),listener,context);
- pushNotificationTask.execute((Void)null);
+                }
+    });
 ```
 
 
@@ -487,32 +473,17 @@ startActivity(intent);
 
 
 ```
-1)Async task call for logout:
-
- UserLogoutTask.TaskListener userLogoutTaskListener = new UserLogoutTask.TaskListener() {
- @Override
- public void onSuccess(Context context) {
-   //Logout success
- } 
-  @Override
- public void onFailure(Exception exception) {
-  //Logout failure
- }
- };
+Applozic.logoutUser(context, new AlLogoutHandler() {
+                @Override
+                public void onSuccess(Context context) {
+                    
+                }
 
- UserLogoutTask userLogoutTask = new UserLogoutTask(userLogoutTaskListener, context);
- userLogoutTask.execute((Void) null);     
- 
- 2)Logout Method call  
- 
- ApiResponse apiResponse =  new UserClientService(this).logout();
- 
- if(apiResponse != null && apiResponse.isSuccess()){
-      //Logout success
-    }else {
-       //Logout failure 
-  }
-Note :Use async task or thread to call this logout method       
+                @Override
+                public void onFailure(Exception exception) {
+
+                }
+        });     
  ```
  
  
diff --git a/app/build.gradle b/app/build.gradle
index d8760e87..868c28f7 100755
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -11,6 +11,7 @@ buildscript {
     }
 }
 repositories {
+    jcenter()
     maven { url 'https://maven.fabric.io/public' }
 }
 android {
@@ -25,7 +26,13 @@ android {
         versionCode 1
         versionName "1.0"
         multiDexEnabled true
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
     }
+
+    testOptions {
+        unitTests.includeAndroidResources true
+    }
+
     buildTypes {
         release {
             minifyEnabled false
@@ -61,16 +68,28 @@ dependencies {
     implementation fileTree(include: ['*.jar'], dir: 'libs')
     implementation project(':mobicomkitui')
     //Note: use this for customization
-    //implementation 'com.applozic.communication.uiwidget:mobicomkitui:5.8.8'
+    //implementation 'com.applozic.communication.uiwidget:mobicomkitui:5.11'
     implementation 'com.android.support:support-v4:27.1.1'
     implementation 'com.android.support:appcompat-v7:27.1.1'
-    //implementation 'com.facebook.android:facebook-android-sdk:4.1.0'
     implementation 'com.android.support:design:27.1.1'
     implementation 'com.android.support:multidex:1.0.3'
-    //implementation 'com.android.support:cardview-v7:22.0'
-    //implementation 'com.android.support:recyclerview-v7:22.0'
     implementation('com.crashlytics.sdk.android:crashlytics:2.5.7@aar') {
         transitive = true;
     }
-}
+
+
+    androidTestImplementation 'com.android.support:support-annotations:27.1.1'
+    androidTestImplementation 'com.android.support.test:runner:1.0.2'
+    androidTestImplementation 'com.android.support.test:rules:1.0.2'
+    androidTestImplementation ('org.mockito:mockito-android:2.6.3'){
+        exclude group: 'org.hamcrest', module:'hamcrest-core'
+    }
+    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
+    androidTestImplementation  'com.google.dagger:dagger:2.13'
+    annotationProcessor 'com.google.dagger:dagger-compiler:2.13'
+    androidTestImplementation('org.droidparts.dexmaker:dexmaker:1.5') {
+        exclude module: 'objenesis'
+    }
+    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
+    }
 apply plugin: 'com.google.gms.google-services'
diff --git a/app/src/androidTest/java/com/applozic/mobicomkit/sample/channel/ChannelServiceTest.java b/app/src/androidTest/java/com/applozic/mobicomkit/sample/channel/ChannelServiceTest.java
new file mode 100644
index 00000000..41fd9635
--- /dev/null
+++ b/app/src/androidTest/java/com/applozic/mobicomkit/sample/channel/ChannelServiceTest.java
@@ -0,0 +1,166 @@
+package com.applozic.mobicomkit.sample.channel;
+
+import android.content.Context;
+import android.support.test.runner.AndroidJUnit4;
+
+import com.applozic.mobicomkit.api.account.user.UserService;
+import com.applozic.mobicomkit.api.people.ChannelInfo;
+import com.applozic.mobicomkit.channel.database.ChannelDatabaseService;
+import com.applozic.mobicomkit.channel.service.ChannelClientService;
+import com.applozic.mobicomkit.channel.service.ChannelService;
+import com.applozic.mobicomkit.contact.AppContactService;
+import com.applozic.mobicomkit.feed.AlResponse;
+import com.applozic.mobicomkit.feed.ApiResponse;
+import com.applozic.mobicomkit.feed.ChannelFeedApiResponse;
+import com.applozic.mobicommons.json.GsonUtils;
+import com.applozic.mobicommons.people.channel.Channel;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import static android.support.test.InstrumentationRegistry.getTargetContext;
+import static junit.framework.Assert.assertEquals;
+import static junit.framework.Assert.assertFalse;
+import static junit.framework.Assert.assertTrue;
+import static org.mockito.Mockito.when;
+
+@RunWith(AndroidJUnit4.class)
+public class ChannelServiceTest {
+
+    private Context context;
+    private ChannelService channelService;
+
+    @Mock
+    private ChannelClientService channelClientService;
+    @Mock
+    private ChannelDatabaseService channelDatabaseService;
+    @Mock
+    private UserService userService;
+    @Mock
+    private AppContactService appContactService;
+
+    public ChannelServiceTest() {
+    }
+
+
+    @Before
+    public void setUp() {
+        context = getTargetContext();
+        MockitoAnnotations.initMocks(this);
+        channelService = ChannelService.getInstance(context);
+
+        channelService.setChannelClientService(channelClientService);
+        channelService.setChannelDatabaseService(channelDatabaseService);
+        channelService.setUserService(userService);
+        channelService.setContactService(appContactService);
+    }
+
+    @Test
+    public void createChannel_withNullInfo() {
+        assertTrue(channelService.createChannel(null) == null);
+    }
+
+    @Test
+    public void createChannel_withSuccess() {
+        ChannelInfo channelInfo = new ChannelInfo();
+
+        try {
+            ChannelFeedApiResponse apiResponse = (ChannelFeedApiResponse) GsonUtils
+                    .getObjectFromJson(MockConstants
+                            .channelSuccessResponse, ChannelFeedApiResponse.class);
+
+            when(channelClientService.createChannelWithResponse(channelInfo)).thenReturn(apiResponse);
+
+            AlResponse response = channelService.createChannel(channelInfo);
+
+            assertTrue(response.isSuccess() && (response.getResponse() instanceof Channel));
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Test
+    public void createChannel_withError() {
+        ChannelInfo channelInfo = new ChannelInfo();
+
+        try {
+            ChannelFeedApiResponse apiResponse = (ChannelFeedApiResponse) GsonUtils
+                    .getObjectFromJson(MockConstants
+                            .channelErrorResponse, ChannelFeedApiResponse.class);
+
+            when(channelClientService.createChannelWithResponse(channelInfo)).thenReturn(apiResponse);
+
+            AlResponse response = channelService.createChannel(channelInfo);
+
+            assertFalse(response.isSuccess());
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Test
+    public void removeMemberFromChannel_withEmptyArgs() {
+        assertEquals(null, channelService.removeMemberFromChannelProcess(0, ""));
+    }
+
+    @Test
+    public void removeMemberFromChannel_withNullArgs() {
+        assertEquals("", channelService.removeMemberFromChannelProcess((Integer) null, null));
+    }
+
+    @Test
+    public void removeMemberFromChannel_withSuccess() {
+        ApiResponse response = (ApiResponse) GsonUtils.getObjectFromJson(MockConstants
+                .removeMemberSuccessResponse, ApiResponse.class);
+        when(channelClientService.removeMemberFromChannel(8905836, "reytum7")).thenReturn
+                (response);
+        String status = channelService.removeMemberFromChannelProcess(8905836, "reytum7");
+        assertEquals(AlResponse.SUCCESS, status);
+    }
+
+    @Test
+    public void removeMemberFromChannel_withError() {
+        ApiResponse response = (ApiResponse) GsonUtils.getObjectFromJson(MockConstants
+                .removeMemberErrorResponse, ApiResponse.class);
+        when(channelClientService.removeMemberFromChannel(8905836, "reytum700")).thenReturn
+                (response);
+        assertEquals(AlResponse.ERROR, channelService.removeMemberFromChannelProcess(8905836,
+                "reytum700"));
+    }
+
+    @Test
+    public void addMemberToChannel_withNullArgs() {
+        assertEquals("", channelService.addMemberToChannelProcess((Integer) null, null));
+    }
+
+    @Test
+    public void addMemberToChannel_withEmptyArgs() {
+        assertEquals(null, channelService.addMemberToChannelProcess(0, ""));
+    }
+
+    @Test
+    public void addMemberToChannel_withSuccess() {
+        ApiResponse response = (ApiResponse) GsonUtils.getObjectFromJson(MockConstants
+                .addMemberSuccessResponse, ApiResponse.class);
+        when(channelClientService.addMemberToChannel(8905836, "reytum6")).thenReturn(response);
+        assertEquals(AlResponse.SUCCESS, channelService.addMemberToChannelProcess(8905836,
+                "reytum6"));
+    }
+
+    @Test
+    public void addMemberToChannel_withError() {
+        ApiResponse response = (ApiResponse) GsonUtils.getObjectFromJson(MockConstants
+                .addMemberErrorResponse, ApiResponse.class);
+        when(channelClientService.addMemberToChannel(8905836, "reytum6")).thenReturn(response);
+        assertEquals(AlResponse.ERROR, channelService.addMemberToChannelProcess(8905836,
+                "reytum6"));
+    }
+
+    @Test
+    public void createGroupOfTwo_withNullArgs() {
+        assertEquals(null, channelService.createGroupOfTwoWithResponse(null));
+    }
+}
\ No newline at end of file
diff --git a/app/src/androidTest/java/com/applozic/mobicomkit/sample/channel/MockConstants.java b/app/src/androidTest/java/com/applozic/mobicomkit/sample/channel/MockConstants.java
new file mode 100644
index 00000000..d157eb3b
--- /dev/null
+++ b/app/src/androidTest/java/com/applozic/mobicomkit/sample/channel/MockConstants.java
@@ -0,0 +1,47 @@
+package com.applozic.mobicomkit.sample.channel;
+
+public class MockConstants {
+
+    public static final String channelSuccessResponse = "{\\r\\n   \\\"status\\\": \\\"success\\\",\\r\\n   \\\"generatedAt\\\": 1535113788401,\\r\\n   \\\"response\\\": {\\r\\n      \\\"id\\\": 11320550,\\r\\n      \\\"clientGroupId\\\": \\\"11320550\\\",\\r\\n      \\\"name\\\": \\\"response success group\\\",\\r\\n      \\\"adminName\\\": \\\"reytum6\\\",\\r\\n      \\\"adminId\\\": \\\"reytum6\\\",\\r\\n      \\\"memberUserKeys\\\": [],\\r\\n      \\\"membersName\\\": [\\r\\n         \\\"reytum\\\",\\r\\n         \\\"reytum7\\\",\\r\\n         \\\"reytum6\\\"\\r\\n      ],\\r\\n      \\\"membersId\\\": [\\r\\n         \\\"reytum\\\",\\r\\n         \\\"reytum7\\\",\\r\\n         \\\"reytum6\\\"\\r\\n      ],\\r\\n      \\\"removedMembersId\\\": [],\\r\\n      \\\"users\\\": [\\r\\n         {\\r\\n            \\\"userId\\\": \\\"reytum6\\\",\\r\\n            \\\"userName\\\": \\\"Rey-TUM\\\",\\r\\n            \\\"connected\\\": true,\\r\\n            \\\"status\\\": 0,\\r\\n            \\\"lastSeenAt\\\": \\\"Aug 24, 2018 12:20:46 PM\\\",\\r\\n            \\\"lastSeenAtTime\\\": 1535113246000,\\r\\n            \\\"createdAt\\\": \\\"Jun 22, 2017 8:25:18 AM\\\",\\r\\n            \\\"createdAtTime\\\": 1498119918683,\\r\\n            \\\"unreadCount\\\": 0,\\r\\n            \\\"displayName\\\": \\\"Rey-TUM\\\",\\r\\n            \\\"imageLink\\\": \\\"https:\\/\\/applozicbucket.s3.amazonaws.com\\/APPLOZIC\\/APP\\/prod_apps\\/applozic-sample-app\\/reytum6\\/1503509281316\\/JPEG_20170823_225800_.jpeg\\\",\\r\\n            \\\"email\\\": \\\"\\\",\\r\\n            \\\"phoneNumber\\\": \\\"9035116864\\\",\\r\\n            \\\"deactivated\\\": false,\\r\\n            \\\"connectedClientCount\\\": 0,\\r\\n            \\\"statusMessage\\\": \\\"There's no truth we've been chasing all our life, time is marching on and we are still in disguise..\\\",\\r\\n            \\\"userTypeId\\\": 0,\\r\\n            \\\"lastMessageAt\\\": \\\"Aug 24, 2018 10:58:51 AM\\\",\\r\\n            \\\"activeStatus\\\": 0,\\r\\n            \\\"active\\\": true,\\r\\n            \\\"lastLoggedInAt\\\": \\\"Aug 24, 2018 10:47:46 AM\\\",\\r\\n            \\\"lastLoggedInAtTime\\\": 1535107666990,\\r\\n            \\\"lastMessageAtTime\\\": 1535108331773,\\r\\n            \\\"roleKey\\\": \\\"09a9238c-1fe9-40d9-b90c-4efd090ba4a3\\\",\\r\\n            \\\"metadata\\\": {},\\r\\n            \\\"roleType\\\": 3\\r\\n         },\\r\\n         {\\r\\n            \\\"userId\\\": \\\"reytum\\\",\\r\\n            \\\"connected\\\": false,\\r\\n            \\\"status\\\": 0,\\r\\n            \\\"statusByte\\\": 0,\\r\\n            \\\"lastSeenAt\\\": \\\"May 25, 2016 4:46:03 PM\\\",\\r\\n            \\\"lastSeenAtTime\\\": 1464194763000,\\r\\n            \\\"createdAt\\\": \\\"Apr 9, 2016 10:39:56 AM\\\",\\r\\n            \\\"createdAtTime\\\": 1460198396745,\\r\\n            \\\"unreadCount\\\": 0,\\r\\n            \\\"imageLink\\\": \\\"http:\\/\\/cdn.arstechnica.net\\/wp-content\\/uploads\\/2016\\/02\\/5718897981_10faa45ac3_b-640x624.jpg\\\",\\r\\n            \\\"phoneNumber\\\": \\\"+919035116864\\\",\\r\\n            \\\"deactivated\\\": false,\\r\\n            \\\"connectedClientCount\\\": 0,\\r\\n            \\\"lastMessageAt\\\": \\\"Jul 20, 2018 7:49:52 AM\\\",\\r\\n            \\\"connectedStatus\\\": 0,\\r\\n            \\\"activeStatus\\\": 0,\\r\\n            \\\"active\\\": false,\\r\\n            \\\"lastLoggedInAt\\\": \\\"May 24, 2016 4:21:24 PM\\\",\\r\\n            \\\"lastLoggedInAtTime\\\": 1464106884427,\\r\\n            \\\"lastMessageAtTime\\\": 1532072992561,\\r\\n            \\\"roleKey\\\": \\\"09a9238c-1fe9-40d9-b90c-4efd090ba4a3\\\",\\r\\n            \\\"metadata\\\": {},\\r\\n            \\\"roleType\\\": 3\\r\\n         },\\r\\n         {\\r\\n            \\\"userId\\\": \\\"reytum7\\\",\\r\\n            \\\"userName\\\": \\\"Rey-TUM\\\",\\r\\n            \\\"connected\\\": true,\\r\\n            \\\"status\\\": 0,\\r\\n            \\\"statusByte\\\": 0,\\r\\n            \\\"lastSeenAt\\\": \\\"Aug 23, 2018 2:54:04 PM\\\",\\r\\n            \\\"lastSeenAtTime\\\": 1535036044000,\\r\\n            \\\"createdAt\\\": \\\"Jun 28, 2017 7:33:31 AM\\\",\\r\\n            \\\"createdAtTime\\\": 1498635211611,\\r\\n            \\\"unreadCount\\\": 0,\\r\\n            \\\"displayName\\\": \\\"Rey-TUM\\\",\\r\\n            \\\"imageLink\\\": \\\"http:\\/\\/images.bigcartel.com\\/product_images\\/158222326\\/ducklings.jpg?auto=format&fit=max&h=1000&w=1000\\\",\\r\\n            \\\"email\\\": \\\"hsgs@hshhd\\\",\\r\\n            \\\"phoneNumber\\\": \\\"+919035116864\\\",\\r\\n            \\\"deactivated\\\": false,\\r\\n            \\\"connectedClientCount\\\": 0,\\r\\n            \\\"statusMessage\\\": \\\"wer\\\",\\r\\n            \\\"userTypeId\\\": 0,\\r\\n            \\\"userTypeIdByte\\\": 0,\\r\\n            \\\"lastMessageAt\\\": \\\"Aug 24, 2018 12:23:35 PM\\\",\\r\\n            \\\"connectedStatus\\\": 1,\\r\\n            \\\"activeStatus\\\": 3,\\r\\n            \\\"active\\\": true,\\r\\n            \\\"lastLoggedInAt\\\": \\\"Aug 24, 2018 7:29:49 AM\\\",\\r\\n            \\\"lastLoggedInAtTime\\\": 1535095789651,\\r\\n            \\\"lastMessageAtTime\\\": 1535113415322,\\r\\n            \\\"roleKey\\\": \\\"09a9238c-1fe9-40d9-b90c-4efd090ba4a3\\\",\\r\\n            \\\"metadata\\\": {\\r\\n               \\\"Test\\\": \\\"Hello Test\\\",\\r\\n               \\\"Key\\\": \\\"TestKey\\\"\\r\\n            },\\r\\n            \\\"publicKey\\\": \\\"mI0EWiT7HgMEAJqQikvW9n4vZRwo8WvuwxM9p1QloxJugNMz3qWqfHW\\/tW0EQe89kIjrtxpOFd9DYvPnMw3z5n4MSvM6DANmGgyCBHmUgA92iMFvdsUjvYex1X2\\/8+5iaznyJI+e6PUm47YlEutovH9fhV0\\/a9nRNBkqqqIO37rjxvIMtUzvL+iFABEBAAG0B3JleXR1bTeIrgQTAwIAFQUCWiT7HgIbAwQLCQgHBhUIAgkKCwANCRAYFoGOWRc\\/QgIbDMP+A\\/9h2xniqjVZsjTkf6oYI\\/m4eNumv3pf8b60L7JdyDfOPQtmWNcK8vPuhNueJfvX1tZ9kqrDuXVZ2OusWn90KLxZZce\\/3col7BzV41JUQEONw5mhHSD6RgRzt8G2gkgFBJHdmzXSiNYutdMsyuh0hHQl5sE90XrTmGd89szPTK6zw7iNBFok+x4CBACakIpL1vZ+L2UcKPFr7sMTPadUJaMSboDTM96lqnx1v7VtBEHvPZCI67caThXfQ2Lz5zMN8+Z+DErzOgwDZhoMggR5lIAPdojBb3bFI72HsdV9v\\/PuYms58iSPnuj1JuO2JRLraLx\\/X4VdP2vZ0TQZKqqiDt+648byDLVM7y\\/ohQARAQABiK4EGAMCABUFAlok+x8CGwMECwkIBwYVCAIJCgsADQkQGBaBjlkXP0ICGwycqgP9FBePIRYlyyMlp+fJzS2n3ePKd1CGLK+savwSw+7gTieSy07oyvb33hoc0KAQ5sm6usi6LkTJ8hUryH65\\/oTsr6f8OY+9ZC6n+tjVy5n07laq8i7gt7bymX2gwQgRd3YG\\/NvNBSf1hnXFB1jxoAqV4oPVj+GXK5Y7tNHn+MTTHB0=\\\",\\r\\n            \\\"roleType\\\": 3\\r\\n         }\\r\\n      ],\\r\\n      \\\"unreadCount\\\": 0,\\r\\n      \\\"type\\\": 2,\\r\\n      \\\"createdAtTime\\\": 1535113788297,\\r\\n      \\\"groupUsers\\\": [\\r\\n         {\\r\\n            \\\"userId\\\": \\\"reytum7\\\",\\r\\n            \\\"status\\\": 0,\\r\\n            \\\"unreadCount\\\": 0,\\r\\n            \\\"role\\\": 3,\\r\\n            \\\"deleted\\\": false\\r\\n         },\\r\\n         {\\r\\n            \\\"userId\\\": \\\"reytum6\\\",\\r\\n            \\\"status\\\": 0,\\r\\n            \\\"unreadCount\\\": 0,\\r\\n            \\\"role\\\": 1,\\r\\n            \\\"deleted\\\": false\\r\\n         },\\r\\n         {\\r\\n            \\\"userId\\\": \\\"reytum\\\",\\r\\n            \\\"status\\\": 0,\\r\\n            \\\"unreadCount\\\": 0,\\r\\n            \\\"role\\\": 3,\\r\\n            \\\"deleted\\\": false\\r\\n         }\\r\\n      ],\\r\\n      \\\"childKeys\\\": [],\\r\\n      \\\"childClientGroupIds\\\": [],\\r\\n      \\\"metadata\\\": {}\\r\\n   }\\r\\n}";
+
+    public static final String channelErrorResponse = "{\\\"status\\\":\\\"error\\\",\\\"errorResponse\\\":[{\\\"errorCode\\\":\\\"AL-G-02\\\",\\\"description\\\":\\\"group already exists\\\",\\\"displayMessage\\\":\\\"unable to process\\\"}],\\\"generatedAt\\\":1536045171025}";
+
+    public static final String removeMemberSuccessResponse = "{\"status\":\"success\"," +
+            "\"generatedAt\":1536076407406,\"response\":[{\"id\":9229677," +
+            "\"clientGroupId\":\"9229677\",\"name\":\"Hey Group\",\"adminId\":\"reytum6\"," +
+            "\"memberUserKeys\":[\"059bc953-2689-465a-b9b4-cc27c197a739\"," +
+            "\"5319d80e-a269-4582-b86b-63f81d2145b0\"],\"membersId\":[\"reytum7\",\"reytum6\"]," +
+            "\"removedMembersId\":[\"reytum9\"],\"unreadCount\":0,\"type\":2," +
+            "\"imageUrl\":\"https://www.applozic.com/favicon.ico\"," +
+            "\"createdAtTime\":1527612484476,\"userCount\":2," +
+            "\"groupUsers\":[{\"userId\":\"reytum6\",\"status\":0,\"unreadCount\":0,\"role\":1," +
+            "\"deleted\":false},{\"userId\":\"reytum7\",\"status\":0,\"unreadCount\":0," +
+            "\"role\":3,\"deleted\":false}],\"childKeys\":[],\"childClientGroupIds\":[]," +
+            "\"metadata\":{\"key1\":\"value1\",\"key2\":\"value2\"}}]}";
+
+    public static final String removeMemberErrorResponse = "{\"status\":\"error\"," +
+            "\"errorResponse\":[{\"errorCode\":\"AL-U-01\",\"description\":\"user not found\"," +
+            "\"displayMessage\":\"unable to process\"}],\"generatedAt\":1536751867110}";
+
+    public static final String addMemberSuccessResponse = "{\"status\":\"success\"," +
+            "\"generatedAt\":1536758462405,\"response\":[{\"id\":11831454," +
+            "\"clientGroupId\":\"11831454\",\"name\":\"TestGroup\",\"adminId\":\"reytum6\"," +
+            "\"memberUserKeys\":[\"059bc953-2689-465a-b9b4-cc27c197a739\"," +
+            "\"f59777d5-b11b-4cc8-a552-91a96529c26f\",\"16c75d6f-3513-46c6-acf2-7412e63d3ce7\"," +
+            "\"21fd6f50-cd89-4065-91ef-3708551d0cc4\",\"c91d4ff2-b421-463f-aa5e-c7275290f59d\"]," +
+            "\"membersId\":[\"reytum6\",\"reytum2\",\"reytum8\",\"reytum9\",\"reytum23\"]," +
+            "\"removedMembersId\":[\"reytum16\"],\"unreadCount\":0,\"type\":2," +
+            "\"createdAtTime\":1536737177301,\"userCount\":5," +
+            "\"groupUsers\":[{\"userId\":\"reytum6\",\"status\":0,\"unreadCount\":0,\"role\":1," +
+            "\"deleted\":false},{\"userId\":\"reytum2\",\"status\":0,\"unreadCount\":0," +
+            "\"role\":3,\"deleted\":false},{\"userId\":\"reytum23\",\"status\":0," +
+            "\"unreadCount\":0,\"role\":3,\"deleted\":false},{\"userId\":\"reytum8\"," +
+            "\"status\":0,\"unreadCount\":0,\"role\":3,\"deleted\":false}," +
+            "{\"userId\":\"reytum9\",\"status\":0,\"unreadCount\":0,\"role\":3," +
+            "\"deleted\":false}],\"childKeys\":[],\"childClientGroupIds\":[],\"metadata\":{}}]}";
+
+    public static final String addMemberErrorResponse = "{\"status\":\"error\"," +
+            "\"errorResponse\":[{\"errorCode\":\"AL-U-01\",\"description\":\"user already " +
+            "exist\",\"displayMessage\":\"unable to process\"}],\"generatedAt\":1536759151819}";
+
+}
diff --git a/app/src/main/assets/applozic-settings.json b/app/src/main/assets/applozic-settings.json
index c7f78fca..ab182497 100644
--- a/app/src/main/assets/applozic-settings.json
+++ b/app/src/main/assets/applozic-settings.json
@@ -33,8 +33,8 @@
   "audioPermissionNotFoundMsg": "",
   "noConversationLabel": "You have no conversations",
   "noSearchFoundForChatMessages": "No conversation found",
-  "disableGlobalStoragePermission" : false,
-  "enableMessageFastScroll" : false,
+  "disableGlobalStoragePermission": false,
+  "enableMessageFastScroll": false,
   "totalRegisteredUserToFetch": 100,
   "maxAttachmentAllowed": 10,
   "maxAttachmentSizeAllowed": 30,
@@ -53,7 +53,6 @@
   "showActionDialWithOutCalling": false,
   "profileLogoutButton": false,
   "userProfileFragment": true,
-  "messageSearchOption": false,
   "hideGroupAddMembersButton": false,
   "hideGroupNameUpdateButton": false,
   "hideGroupExitButton": false,
@@ -76,6 +75,11 @@
   "logoutPackageName": "",
   "groupDeletePackageName": "",
   "enableImageCompression": false,
+  "isContactSearchFromServer": false,
+  "messageSearchTextColor": "#ff0000",
+  "notificationDisableThreshold": 10,
+  "hideGroupDeleteButton": false,
+  "showImageOnToolbar":false,
   "attachmentOptions": {
     ":location": true,
     ":camera": true,
diff --git a/app/src/main/java/com/applozic/mobicomkit/sample/LoginActivity.java b/app/src/main/java/com/applozic/mobicomkit/sample/LoginActivity.java
index af3af3e8..2c937901 100755
--- a/app/src/main/java/com/applozic/mobicomkit/sample/LoginActivity.java
+++ b/app/src/main/java/com/applozic/mobicomkit/sample/LoginActivity.java
@@ -336,7 +336,7 @@ public void onFailure(RegistrationResponse registrationResponse, Exception excep
                     mEmailSignInButton.setVisibility(View.VISIBLE);
                     AlertDialog alertDialog = new AlertDialog.Builder(LoginActivity.this).create();
                     alertDialog.setTitle(getString(R.string.text_alert));
-                    alertDialog.setMessage(exception.toString());
+                    alertDialog.setMessage(exception == null ? registrationResponse.getMessage() : exception.getMessage());
                     alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, getString(R.string.ok_alert),
                             new DialogInterface.OnClickListener() {
                                 public void onClick(DialogInterface dialog, int which) {
diff --git a/build.gradle b/build.gradle
index b9d3266d..c2bdf03b 100755
--- a/build.gradle
+++ b/build.gradle
@@ -12,7 +12,7 @@ buildscript {
         classpath 'com.android.tools.build:gradle:3.1.3'
         classpath 'com.google.gms:google-services:4.0.1'
 
-     /* classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
+      /*classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
         classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'
         classpath 'com.github.dcendents:android-maven-plugin:1.2'
         classpath 'com.novoda:bintray-release:0.3.4'*/
@@ -36,6 +36,5 @@ task clean(type: Delete) {
     delete rootProject.buildDir
 }
 subprojects {
-    //tasks.withType(Javadoc).all { enabled = false }
+    tasks.withType(Javadoc).all { enabled = false }
 }
-
diff --git a/mobicomkit/build.gradle b/mobicomkit/build.gradle
index 6d06a154..ee691290 100755
--- a/mobicomkit/build.gradle
+++ b/mobicomkit/build.gradle
@@ -8,7 +8,7 @@ android {
         minSdkVersion 14
         targetSdkVersion 27
         versionCode 1
-        versionName "5.8.8"
+        versionName "5.11"
     }
     useLibrary 'org.apache.http.legacy'
     buildTypes {
@@ -49,10 +49,9 @@ dependencies {
     implementation 'com.google.code.gson:gson:2.8.5'
     api project(':mobicommons')
     //Note: use this for customization
-    //implementation 'com.applozic.mobiframework:mobicommons:5.8.7' //Note: use this in case customization is not required
+    //implementation 'com.applozic.mobiframework:mobicommons:5.11' //Note: use this in case customization is not required
 }
 
-
 /*ext {
     // Where you will see your artifact in Bintray's web interface
     // The "bintrayName" should match the name of the Bintray repro.
@@ -67,7 +66,7 @@ dependencies {
     artifact = 'mobicomkit'
 
     libraryDescription = 'Applozic Communication Chat/Messaging library'
-    libraryVersion = '5.8.8'
+    libraryVersion = '5.11'
 
     developerId = 'devashish'
     developerName = 'Applozic'
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/Applozic.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/Applozic.java
index c4b7b88c..c7cc9539 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/Applozic.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/Applozic.java
@@ -1,5 +1,6 @@
 package com.applozic.mobicomkit;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
@@ -13,6 +14,8 @@
 import com.applozic.mobicomkit.api.account.user.UserLoginTask;
 import com.applozic.mobicomkit.api.account.user.UserLogoutTask;
 import com.applozic.mobicomkit.api.conversation.ApplozicMqttIntentService;
+import com.applozic.mobicomkit.api.notification.MobiComPushReceiver;
+import com.applozic.mobicomkit.api.notification.NotificationChannels;
 import com.applozic.mobicomkit.broadcast.ApplozicBroadcastReceiver;
 import com.applozic.mobicomkit.broadcast.BroadcastService;
 import com.applozic.mobicomkit.listners.AlLoginHandler;
@@ -22,6 +25,8 @@
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.contact.Contact;
 
+import java.util.Map;
+
 /**
  * Created by sunil on 29/8/16.
  */
@@ -31,14 +36,16 @@
     private static final String DEVICE_REGISTRATION_ID = "DEVICE_REGISTRATION_ID";
     private static final String MY_PREFERENCE = "applozic_preference_key";
     private static final String ENABLE_DEVICE_CONTACT_SYNC = "ENABLE_DEVICE_CONTACT_SYNC";
+    private static final String NOTIFICATION_CHANNEL_VERSION_STATE = "NOTIFICATION_CHANNEL_VERSION_STATE";
+    private static final String CUSTOM_NOTIFICATION_SOUND = "CUSTOM_NOTIFICATION_SOUND";
     public static Applozic applozic;
-    public SharedPreferences sharedPreferences;
+    private SharedPreferences sharedPreferences;
     private Context context;
     private ApplozicBroadcastReceiver applozicBroadcastReceiver;
 
     private Applozic(Context context) {
         this.context = context;
-        this.sharedPreferences = context.getSharedPreferences(MY_PREFERENCE, context.MODE_PRIVATE);
+        this.sharedPreferences = context.getSharedPreferences(MY_PREFERENCE, Context.MODE_PRIVATE);
     }
 
     public static Applozic init(Context context, String applicationKey) {
@@ -76,11 +83,29 @@ public String getDeviceRegistrationId() {
         return sharedPreferences.getString(DEVICE_REGISTRATION_ID, null);
     }
 
+    @SuppressLint("NewApi")
+    public int getNotificationChannelVersion() {
+        return sharedPreferences.getInt(NOTIFICATION_CHANNEL_VERSION_STATE, NotificationChannels.NOTIFICATION_CHANNEL_VERSION - 1);
+    }
+
+    public void setNotificationChannelVersion(int version) {
+        sharedPreferences.edit().putInt(NOTIFICATION_CHANNEL_VERSION_STATE, version).commit();
+    }
+
     public Applozic setDeviceRegistrationId(String registrationId) {
         sharedPreferences.edit().putString(DEVICE_REGISTRATION_ID, registrationId).commit();
         return this;
     }
 
+    public Applozic setCustomNotificationSound(String filePath) {
+        sharedPreferences.edit().putString(CUSTOM_NOTIFICATION_SOUND, filePath).commit();
+        return this;
+    }
+
+    public String getCustomNotificationSound() {
+        return sharedPreferences.getString(CUSTOM_NOTIFICATION_SOUND, null);
+    }
+
     public static void disconnectPublish(Context context, String deviceKeyString, String userKeyString) {
         if (!TextUtils.isEmpty(userKeyString) && !TextUtils.isEmpty(deviceKeyString)) {
             Intent intent = new Intent(context, ApplozicMqttIntentService.class);
@@ -90,6 +115,7 @@ public static void disconnectPublish(Context context, String deviceKeyString, St
         }
     }
 
+    @Deprecated
     public static boolean isLoggedIn(Context context) {
         return MobiComUserPreference.getInstance(context).isLoggedIn();
     }
@@ -140,6 +166,7 @@ public static void publishTypingStatus(Context context, Channel channel, Contact
         ApplozicMqttIntentService.enqueueWork(context, intent);
     }
 
+    @Deprecated
     public static void loginUser(Context context, User user, AlLoginHandler loginHandler) {
         if (MobiComUserPreference.getInstance(context).isLoggedIn()) {
             RegistrationResponse registrationResponse = new RegistrationResponse();
@@ -150,6 +177,37 @@ public static void loginUser(Context context, User user, AlLoginHandler loginHan
         }
     }
 
+    public static void connectUser(Context context, User user, AlLoginHandler loginHandler) {
+        new UserLoginTask(user, loginHandler, context).execute();
+    }
+
+    public static void connectUserWithCheck(Context context, User user, AlLoginHandler loginHandler) {
+        if (isConnected(context)) {
+            RegistrationResponse registrationResponse = new RegistrationResponse();
+            registrationResponse.setMessage("User already Logged in");
+            loginHandler.onSuccess(registrationResponse, context);
+        } else {
+            new UserLoginTask(user, loginHandler, context).execute();
+        }
+    }
+
+    public static boolean isConnected(Context context) {
+        return MobiComUserPreference.getInstance(context).isLoggedIn();
+    }
+
+    public static boolean isRegistered(Context context) {
+        return MobiComUserPreference.getInstance(context).isRegistered();
+    }
+
+    public static boolean isApplozicNotification(Context context, Map<String, String> data) {
+        if (MobiComPushReceiver.isMobiComPushNotification(data)) {
+            MobiComPushReceiver.processMessageAsync(context, data);
+            return true;
+        }
+        return false;
+    }
+
+    @Deprecated
     public static void loginUser(Context context, User user, boolean withLoggedInCheck, AlLoginHandler loginHandler) {
         if (withLoggedInCheck && MobiComUserPreference.getInstance(context).isLoggedIn()) {
             RegistrationResponse registrationResponse = new RegistrationResponse();
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/ApplozicClient.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/ApplozicClient.java
index 7f5985ce..9f36ff1d 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/ApplozicClient.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/ApplozicClient.java
@@ -42,6 +42,8 @@
     private static final String GOOGLE_CLOUD_SERVICE_ENABLE = "GOOGLE_CLOUD_SERVICE_ENABLE";
     private static final String CUSTOM_MESSAGE_TEMPLATE = "CUSTOM_MESSAGE_TEMPLATE";
     private static final String AL_SUBGROUP_SUPPORT = "AL_SUBGROUP_SUPPORT";
+    private static final String HIDE_ACTION_MESSAGES = "HIDE_ACTION_MESSAGES";
+    private static final String NOTIFICATION_MUTE_THRESHOLD = "NOTIFICATION_MUTE_THRESHOLD";
 
     public static ApplozicClient applozicClient;
     public SharedPreferences sharedPreferences;
@@ -49,7 +51,7 @@
 
     private ApplozicClient(Context context) {
         this.context = context;
-        sharedPreferences = context.getSharedPreferences(MobiComKitClientService.getApplicationKey(context), context.MODE_PRIVATE);
+        sharedPreferences = context.getSharedPreferences(MobiComKitClientService.getApplicationKey(context), Context.MODE_PRIVATE);
     }
 
     public static ApplozicClient getInstance(Context context) {
@@ -311,4 +313,22 @@ public ApplozicClient setSubGroupSupport(boolean subgroup) {
         return this;
     }
 
+    public boolean isActionMessagesHidden() {
+        return sharedPreferences.getBoolean(HIDE_ACTION_MESSAGES, false);
+    }
+
+    public ApplozicClient hideActionMessages(boolean hide) {
+        sharedPreferences.edit().putBoolean(HIDE_ACTION_MESSAGES, hide).commit();
+        return this;
+    }
+
+    public ApplozicClient setNotificationMuteThreashold(int threshold) {
+        sharedPreferences.edit().putInt(NOTIFICATION_MUTE_THRESHOLD, threshold).commit();
+        return this;
+    }
+
+    public int getNotificationMuteThreshold() {
+        return sharedPreferences.getInt(NOTIFICATION_MUTE_THRESHOLD, 0);
+    }
+
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/ConversationRunnables.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/ConversationRunnables.java
index 32727053..a53aa2b8 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/ConversationRunnables.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/ConversationRunnables.java
@@ -1,6 +1,7 @@
 package com.applozic.mobicomkit;
 
 import android.content.Context;
+import android.os.Process;
 import android.text.TextUtils;
 
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
@@ -46,13 +47,16 @@ public ConversationRunnables(Context context, Message message, boolean isMutedLi
     }
 
     public void startSync() {
-
-        new Thread(new Runnable() {
+        Thread syncThread = new Thread(new Runnable() {
             @Override
             public void run() {
                 if (isMutedList) {
                     Utils.printLog(context, TAG, "Muted user list sync started from thread..");
-                    new Thread(new MutedUserListSync()).start();
+                    try {
+                        UserService.getInstance(context).getMutedUserList();
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                    }
                     return;
                 }
 
@@ -70,68 +74,52 @@ public void run() {
                     if (isSync) {
                         mobiComMessageService.syncMessages();
                     } else {
-                        Thread thread = new Thread(new ConversationSync());
-                        thread.start();
+                        syncConversation();
                     }
                 }
             }
-        }).start();
-    }
-
-    public class ConversationSync implements Runnable {
+        });
 
-        public ConversationSync() {
-        }
-
-        @Override
-        public void run() {
-            try {
-                MobiComConversationService mobiComConversationService = new MobiComConversationService(context);
-                List<Message> messages = mobiComConversationService.getLatestMessagesGroupByPeople();
-                UserService.getInstance(context).processSyncUserBlock();
-
-                if (Applozic.getInstance(context).isDeviceContactSync()) {
-                    Set<String> contactNoSet = new HashSet<String>();
-                    List<Contact> contacts = new AppContactService(context).getContacts(Contact.ContactType.DEVICE);
-                    for (Contact contact : contacts) {
-                        if (!TextUtils.isEmpty(contact.getFormattedContactNumber())) {
-                            contactNoSet.add(contact.getFormattedContactNumber());
-                        }
-                    }
+        syncThread.setPriority(Process.THREAD_PRIORITY_BACKGROUND);
+        syncThread.start();
+    }
 
-                    if (!contactNoSet.isEmpty()) {
-                        UserService userService = UserService.getInstance(context.getApplicationContext());
-                        userService.processUserDetailsByContactNos(contactNoSet);
+    private void syncConversation() {
+        try {
+            MobiComConversationService mobiComConversationService = new MobiComConversationService(context);
+            List<Message> messages = mobiComConversationService.getLatestMessagesGroupByPeople();
+            UserService.getInstance(context).processSyncUserBlock();
+
+            if (Applozic.getInstance(context).isDeviceContactSync()) {
+                Set<String> contactNoSet = new HashSet<String>();
+                List<Contact> contacts = new AppContactService(context).getContacts(Contact.ContactType.DEVICE);
+                for (Contact contact : contacts) {
+                    if (!TextUtils.isEmpty(contact.getFormattedContactNumber())) {
+                        contactNoSet.add(contact.getFormattedContactNumber());
                     }
-                    MobiComUserPreference.getInstance(context).setDeviceContactSyncTime(new Date().getTime());
                 }
 
-                for (Message message : messages.subList(0, Math.min(PRE_FETCH_MESSAGES_FOR, messages.size()))) {
-                    Contact contact = null;
-                    Channel channel = null;
+                if (!contactNoSet.isEmpty()) {
+                    UserService userService = UserService.getInstance(context.getApplicationContext());
+                    userService.processUserDetailsByContactNos(contactNoSet);
+                }
+                MobiComUserPreference.getInstance(context).setDeviceContactSyncTime(new Date().getTime());
+            }
 
-                    if (message.getGroupId() != null) {
-                        channel = new Channel(message.getGroupId());
-                    } else {
-                        contact = new Contact(message.getContactIds());
-                    }
+            for (Message message : messages.subList(0, Math.min(PRE_FETCH_MESSAGES_FOR, messages.size()))) {
+                Contact contact = null;
+                Channel channel = null;
 
-                    mobiComConversationService.getMessages(1L, null, contact, channel, null, true);
+                if (message.getGroupId() != null) {
+                    channel = new Channel(message.getGroupId());
+                } else {
+                    contact = new Contact(message.getContactIds());
                 }
-            } catch (Exception e) {
-                e.printStackTrace();
-            }
-        }
-    }
 
-    public class MutedUserListSync implements Runnable {
-        @Override
-        public void run() {
-            try {
-                UserService.getInstance(context).getMutedUserList();
-            } catch (Exception e) {
-                e.printStackTrace();
+                mobiComConversationService.getMessages(1L, null, contact, channel, null, true);
             }
+        } catch (Exception e) {
+            e.printStackTrace();
         }
     }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/ApplozicMqttService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/ApplozicMqttService.java
index 6d12087d..085b6650 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/ApplozicMqttService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/ApplozicMqttService.java
@@ -252,12 +252,6 @@ public void run() {
                                     }
                                     Message message = messageResponse.getMessage();
                                     if (message.getGroupId() != null) {
-                                        try {
-                                            if (message.isGroupMetaDataUpdated()) {
-                                                ChannelService.getInstance(context).syncChannels(true);
-                                            }
-                                        } catch (Exception e) {
-                                        }
                                         Channel channel = ChannelService.getInstance(context).getChannelByChannelKey(message.getGroupId());
                                         if (channel != null && Channel.GroupType.OPEN.getValue().equals(channel.getType())) {
                                             if (!MobiComUserPreference.getInstance(context).getDeviceKeyString().equals(message.getDeviceKeyString())) {
@@ -405,6 +399,7 @@ public void run() {
 
                     }
                 });
+                thread.setPriority(Process.THREAD_PRIORITY_BACKGROUND);
                 thread.start();
             }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/HttpRequestUtils.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/HttpRequestUtils.java
index 7525243f..536adc25 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/HttpRequestUtils.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/HttpRequestUtils.java
@@ -39,7 +39,7 @@
 
 
     public HttpRequestUtils(Context context) {
-        this.context = context.getApplicationContext();
+            this.context = context.getApplicationContext();
     }
 
     private void log(String message) {
@@ -96,6 +96,10 @@ public String postData(String urlString, String contentType, String accept, Stri
                 e.printStackTrace();
             } catch (Exception e) {
                 e.printStackTrace();
+            } finally {
+                if (br != null) {
+                    br.close();
+                }
             }
             Utils.printLog(context, TAG, "Response : " + sb.toString());
             if (!TextUtils.isEmpty(sb.toString())) {
@@ -151,6 +155,10 @@ public String postJsonToServer(String StringUrl, String data) throws Exception {
             e.printStackTrace();
         } catch (Throwable e) {
 
+        } finally {
+            if (br != null) {
+                br.close();
+            }
         }
         Utils.printLog(context, TAG, "Response: " + sb.toString());
         return sb.toString();
@@ -204,6 +212,10 @@ public String getResponse(String urlString, String contentType, String accept, b
                 }
             } catch (Exception e) {
                 e.printStackTrace();
+            } finally {
+                if (br != null) {
+                    br.close();
+                }
             }
 
             Utils.printLog(context, TAG, "Response :" + sb.toString());
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitClientService.java
index 36d6db26..5aa4a457 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitClientService.java
@@ -6,6 +6,7 @@
 import com.applozic.mobicomkit.Applozic;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 
+import com.applozic.mobicommons.ALSpecificSettings;
 import com.applozic.mobicommons.commons.core.utils.Utils;
 
 
@@ -21,6 +22,7 @@
 public class MobiComKitClientService {
 
     public static final String BASE_URL_METADATA = "com.applozic.server.url";
+    public static final String KM_BASE_URL_METADATA = "io.kommunicate.server.url";
     public static final String MQTT_BASE_URL_METADATA = "com.applozic.mqtt.server.url";
     public static final String FILE_URL = "/rest/ws/aws/file/";
     public static String APPLICATION_KEY_HEADER = "Application-Key";
@@ -64,7 +66,13 @@ public String getBaseUrl() {
 
         if (!TextUtils.isEmpty(SELECTED_BASE_URL)) {
             return SELECTED_BASE_URL;
+        } else {
+            String alCustomUrl = ALSpecificSettings.getInstance(context).getAlBaseUrl();
+            if (!TextUtils.isEmpty(alCustomUrl)) {
+                return alCustomUrl;
+            }
         }
+
         String BASE_URL = Utils.getMetaDataValue(context.getApplicationContext(), BASE_URL_METADATA);
         if (!TextUtils.isEmpty(BASE_URL)) {
             return BASE_URL;
@@ -74,9 +82,17 @@ public String getBaseUrl() {
     }
 
     public String getKmBaseUrl() {
-        if (getBaseUrl().contains("apps-test")) {
-            return KM_TEST_BASE_URL;
+        String kmCustomUrl = ALSpecificSettings.getInstance(context).getKmBaseUrl();
+
+        if (!TextUtils.isEmpty(kmCustomUrl)) {
+            return kmCustomUrl;
+        }
+
+        String KM_BASE_URL = Utils.getMetaDataValue(context.getApplicationContext(), KM_BASE_URL_METADATA);
+        if (!TextUtils.isEmpty(KM_BASE_URL)) {
+            return KM_BASE_URL;
         }
+
         return KM_PROD_BASE_URL;
     }
 
@@ -114,24 +130,7 @@ public HttpURLConnection openHttpConnection(String urlString) throws IOException
             httpConn.setAllowUserInteraction(false);
             httpConn.setInstanceFollowRedirects(true);
             httpConn.setRequestMethod("GET");
-            /*String userCredentials = getCredentials().getUserName() + ":" + String.valueOf(getCredentials().getPassword());
-            String basicAuth = "Basic " + Base64.encodeToString(userCredentials.getBytes(), Base64.NO_WRAP);
-            httpConn.setRequestProperty("Authorization", basicAuth);
-            httpConn.setRequestProperty(APPLICATION_KEY_HEADER, getApplicationKey(context));
-
-            if( getAppModuleName(context)!=null ){
-                httpConn.setRequestProperty(APP_MOUDLE_NAME_KEY_HEADER, getApplicationKey(context));
-            }
-
-            httpConn.setRequestProperty(HttpRequestUtils.USERID_HEADER, HttpRequestUtils.USERID_HEADER_VALUE);*/
             httpConn.connect();
-            //Shifting this Code to individual class..this is needed so that caller can decide ..what should be done with the error
-//            response = httpConn.getResponseCode();
-//            if (response == HttpURLConnection.HTTP_OK) {
-//                in = httpConn.getInputStream();
-//
-//            }
-
         } catch (Exception ex) {
             throw new IOException("Error connecting");
         }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitConstants.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitConstants.java
index 9016b26f..c66988e0 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitConstants.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/MobiComKitConstants.java
@@ -3,7 +3,7 @@
 /**
  * Created by devashish on 12/3/15.
  */
-public class MobiComKitConstants {
+public final class MobiComKitConstants {
 
     public static final String MESSAGE_JSON_INTENT = "message_json";
     public static final String CONTACT_ID = "contactId";
@@ -15,6 +15,8 @@
     public static final String HIDDEN = "HIDDEN";
     public static final String PUSH_NOTIFICATION = "PUSH_NOTIFICATION";
     public static final String AL_PUSH_NOTIFICATION = "AL_PUSH_NOTIFICATION";
+    public static final String AL_SILENT_NOTIFICATION = "AL_SILENT_NOTIFICATION";
+    public static final String AL_APP_NOTIFICATION = "AL_APP_NOTIFICATION";
 
     public static final String ACTIVITY_TO_OPEN = "ACTIVITY_TO_OPEN";
     public static final String LOCATION = "Location";
@@ -26,15 +28,19 @@
     public static final String APPLOZIC_VIDEO_DIALED = "applozic.video.call.dialed";
     public static final String PACKAGE_NAME = "com.package.name";
     public static final String AL_MESSAGE = "AL_MESSAGE";
-    public static String APPLICATION_KEY_META_DATA = "com.applozic.application.key";
-    public static String APPLICATION_ACTIVITY_TO_OPEN_ON_CHAT_TOOLBAR_TAP = "com.applozic.mobicomkit.uiwidgets.toolbar.tap.activity";
-    public static String APPLICATION_LOGIN_ACTIVITY = "com.applozic.loginActivity";
-    public static String GROUP_USER_LIMIT_EXCEED = "GROUP_USER_LIMIT_EXCEED";
+    public static final String APPLICATION_KEY_META_DATA = "com.applozic.application.key";
+    public static final String APPLICATION_ACTIVITY_TO_OPEN_ON_CHAT_TOOLBAR_TAP = "com.applozic.mobicomkit.uiwidgets.toolbar.tap.activity";
+    public static final String APPLICATION_LOGIN_ACTIVITY = "com.applozic.loginActivity";
+    public static final String GROUP_USER_LIMIT_EXCEED = "GROUP_USER_LIMIT_EXCEED";
     public static final String TEMPLATE_MESSAGE_LIST = "alMessageTemplates";
-    public static final String APPLICATION_INFO_RESPONSE  = "\"success\"";
+    public static final String APPLICATION_INFO_RESPONSE = "\"success\"";
     public static final String AL_MESSAGE_KEY = "AL_MESSAGE_KEY";
     public static final String PUSH_NOTIFICATION_DISPATCHER = "PUSH_NOTIFICATION_DISPATCHER";
     public static final String PUSH_NOTIFICATION_NAME = "Push Notification";
+    public static final String APP_NOTIFICATION_NAME = "App Notification";
+    public static final String SILENT_PUSH_NOTIFICATION = "Silent Notification";
 
-
+    public static final String MESSAGE_JSON_INTENT_EXTRA = "messageJson";
+    public static final String MESSAGE_INTENT_EXTRA = "message";
+    public static final String OLD_MESSAGE_KEY_INTENT_EXTRA = "oldMessageKey";
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegisterUserClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegisterUserClientService.java
index 7e5d3c11..b63f7447 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegisterUserClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegisterUserClientService.java
@@ -1,30 +1,21 @@
 package com.applozic.mobicomkit.api.account.register;
 
-import android.app.NotificationChannel;
-import android.app.NotificationManager;
 import android.content.Context;
 import android.content.Intent;
-import android.graphics.Color;
-import android.media.AudioAttributes;
-import android.media.RingtoneManager;
-import android.net.Uri;
 import android.os.Build;
-import android.support.annotation.RequiresApi;
 import android.text.TextUtils;
 
-import com.applozic.mobicomkit.ApplozicClient;
+import com.applozic.mobicomkit.Applozic;
 import com.applozic.mobicomkit.api.HttpRequestUtils;
 import com.applozic.mobicomkit.api.MobiComKitClientService;
-import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.account.user.User;
 import com.applozic.mobicomkit.api.conversation.ApplozicMqttIntentService;
 import com.applozic.mobicomkit.api.conversation.ConversationIntentService;
-import com.applozic.mobicomkit.api.conversation.SyncCallService;
+import com.applozic.mobicomkit.api.notification.NotificationChannels;
 import com.applozic.mobicomkit.contact.AppContactService;
-import com.applozic.mobicomkit.exception.InvalidApplicationException;
-import com.applozic.mobicomkit.exception.UnAuthoriseException;
 import com.applozic.mobicomkit.feed.ApiResponse;
+import com.applozic.mobicommons.ALSpecificSettings;
 import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.json.GsonUtils;
 import com.applozic.mobicommons.people.contact.Contact;
@@ -63,21 +54,19 @@ public String getUpdateAccountUrl() {
         return getBaseUrl() + UPDATE_ACCOUNT_URL;
     }
 
-
-//    final RegistrationResponse registrationResponse = createAccount(user);
-//    Intent intent = new Intent(context, ApplozicMqttIntentService.class);
-//    intent.putExtra(ApplozicMqttIntentService.CONNECTED_PUBLISH,true);
-//    ApplozicMqttIntentService.enqueueWork(context, intent);
-//    return registrationResponse;
-
-
     public RegistrationResponse createAccount(User user) throws Exception {
-
         user.setDeviceType(Short.valueOf("1"));
         user.setPrefContactAPI(Short.valueOf("2"));
         user.setTimezone(TimeZone.getDefault().getID());
         user.setEnableEncryption(user.isEnableEncryption());
 
+        if (!TextUtils.isEmpty(user.getAlBaseUrl())) {
+            ALSpecificSettings.getInstance(context).setAlBaseUrl(user.getAlBaseUrl());
+        }
+
+        if (!TextUtils.isEmpty(user.getKmBaseUrl())) {
+            ALSpecificSettings.getInstance(context).setKmBaseUrl(user.getKmBaseUrl());
+        }
 
         MobiComUserPreference mobiComUserPreference = MobiComUserPreference.getInstance(context);
 
@@ -96,7 +85,6 @@ public RegistrationResponse createAccount(User user) throws Exception {
             throw new ConnectException("No Internet Connection");
         }
 
-//        Log.i(TAG, "App Id is: " + getApplicationKey(context));
         Utils.printLog(context, TAG, "Registration json " + gson.toJson(user));
         String response = httpRequestUtils.postJsonToServer(getCreateAccountUrl(), gson.toJson(user));
 
@@ -104,17 +92,10 @@ public RegistrationResponse createAccount(User user) throws Exception {
 
         if (TextUtils.isEmpty(response) || response.contains("<html")) {
             throw new Exception("503 Service Unavailable");
-//            return null;
-        }
-        if (response.contains(INVALID_APP_ID)) {
-            throw new InvalidApplicationException("Invalid Application Id");
         }
-        final RegistrationResponse registrationResponse = gson.fromJson(response, RegistrationResponse.class);
 
-        if (registrationResponse.isPasswordInvalid()) {
-            throw new UnAuthoriseException("Invalid uername/password");
+        final RegistrationResponse registrationResponse = gson.fromJson(response, RegistrationResponse.class);
 
-        }
         Utils.printLog(context, "Registration response ", "is " + registrationResponse);
         if (registrationResponse.getNotificationResponse() != null) {
             Utils.printLog(context, "Registration response ", "" + registrationResponse.getNotificationResponse());
@@ -136,7 +117,7 @@ public RegistrationResponse createAccount(User user) throws Exception {
         mobiComUserPreference.setLastSeenAtSyncTime(String.valueOf(registrationResponse.getCurrentTimeStamp()));
         mobiComUserPreference.setChannelSyncTime(String.valueOf(registrationResponse.getCurrentTimeStamp()));
         mobiComUserPreference.setUserBlockSyncTime("10000");
-        if(!TextUtils.isEmpty(registrationResponse.getUserEncryptionKey())){
+        if (!TextUtils.isEmpty(registrationResponse.getUserEncryptionKey())) {
             mobiComUserPreference.setUserEncryptionKey(registrationResponse.getUserEncryptionKey());
         }
         mobiComUserPreference.setPassword(user.getPassword());
@@ -147,7 +128,7 @@ public RegistrationResponse createAccount(User user) throws Exception {
             mobiComUserPreference.setUserTypeId(String.valueOf(user.getUserTypeId()));
         }
         if (!TextUtils.isEmpty(user.getNotificationSoundFilePath())) {
-            mobiComUserPreference.setNotificationSoundFilePath(user.getNotificationSoundFilePath());
+            Applozic.getInstance(context).setCustomNotificationSound(user.getNotificationSoundFilePath());
         }
         Contact contact = new Contact();
         contact.setUserId(user.getUserId());
@@ -161,7 +142,8 @@ public RegistrationResponse createAccount(User user) throws Exception {
         contact.setMetadata(user.getMetadata());
         contact.setStatus(registrationResponse.getStatusMessage());
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            createNotificationChannel(context);
+            Applozic.getInstance(context).setNotificationChannelVersion(NotificationChannels.NOTIFICATION_CHANNEL_VERSION - 1);
+            new NotificationChannels(context, Applozic.getInstance(context).getCustomNotificationSound()).prepareNotificationChannels();
         }
         contact.processContactNumbers(context);
         new AppContactService(context).upsert(contact);
@@ -179,7 +161,6 @@ public RegistrationResponse createAccount(User user) throws Exception {
         Intent intent = new Intent(context, ApplozicMqttIntentService.class);
         intent.putExtra(ApplozicMqttIntentService.CONNECTED_PUBLISH, true);
         ApplozicMqttIntentService.enqueueWork(context, intent);
-
         return registrationResponse;
     }
 
@@ -202,18 +183,6 @@ private RegistrationResponse updateAccount(String email, String userId, String p
         user.setImageLink(imageLink);
         user.setRegistrationId(pushNotificationId);
         user.setDisplayName(displayName);
-
-        //user.setCountryCode(mobiComUserPreference.getCountryCode());
-       /*if (!TextUtils.isEmpty(phoneNumber)) {
-            try {
-
-                    user.setCountryCode(PhoneNumberUtil.getInstance().getRegionCodeForNumber(PhoneNumberUtil.getInstance().parse(phoneNumber, "")));
-                    mobiComUserPreference.setCountryCode(user.getCountryCode());
-
-            } catch (NumberParseException e) {
-                e.printStackTrace();
-            }
-        }*/
         user.setContactNumber(phoneNumber);
 
         final RegistrationResponse registrationResponse = createAccount(user);
@@ -248,6 +217,14 @@ public RegistrationResponse updateRegisteredAccount(User user) throws Exception
         user.setPrefContactAPI(Short.valueOf("2"));
         user.setTimezone(TimeZone.getDefault().getID());
 
+        if (!TextUtils.isEmpty(user.getAlBaseUrl())) {
+            ALSpecificSettings.getInstance(context).setAlBaseUrl(user.getAlBaseUrl());
+        }
+
+        if (!TextUtils.isEmpty(user.getKmBaseUrl())) {
+            ALSpecificSettings.getInstance(context).setKmBaseUrl(user.getKmBaseUrl());
+        }
+
         MobiComUserPreference mobiComUserPreference = MobiComUserPreference.getInstance(context);
 
         Gson gson = new Gson();
@@ -270,16 +247,9 @@ public RegistrationResponse updateRegisteredAccount(User user) throws Exception
         if (TextUtils.isEmpty(response) || response.contains("<html")) {
             throw null;
         }
-        if (response.contains(INVALID_APP_ID)) {
-            throw new InvalidApplicationException("Invalid Application Id");
-        }
 
         registrationResponse = gson.fromJson(response, RegistrationResponse.class);
 
-        if (registrationResponse.isPasswordInvalid()) {
-            throw new UnAuthoriseException("Invalid uername/password");
-        }
-
         Utils.printLog(context, TAG, "Registration update response: " + registrationResponse);
         mobiComUserPreference.setPricingPackage(registrationResponse.getPricingPackage());
         if (registrationResponse.getNotificationResponse() != null) {
@@ -317,34 +287,4 @@ public void syncAccountStatus() {
             Utils.printLog(context, TAG, "Account status sync call failed");
         }
     }
-
-
-    @RequiresApi(api = Build.VERSION_CODES.O)
-    void createNotificationChannel(Context context) {
-        NotificationManager mNotificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
-        CharSequence name = MobiComKitConstants.PUSH_NOTIFICATION_NAME;
-        int importance = NotificationManager.IMPORTANCE_HIGH;
-        if (mNotificationManager.getNotificationChannel(MobiComKitConstants.AL_PUSH_NOTIFICATION) == null) {
-            NotificationChannel mChannel = new NotificationChannel(MobiComKitConstants.AL_PUSH_NOTIFICATION, name, importance);
-            mChannel.enableLights(true);
-            mChannel.setLightColor(Color.GREEN);
-            if (ApplozicClient.getInstance(context).isUnreadCountBadgeEnabled()) {
-                mChannel.setShowBadge(true);
-            } else {
-                mChannel.setShowBadge(false);
-            }
-            if (ApplozicClient.getInstance(context).getVibrationOnNotification()) {
-                mChannel.enableVibration(true);
-                mChannel.setVibrationPattern(new long[]{100, 200, 300, 400, 500, 400, 300, 200, 400});
-            }
-            AudioAttributes audioAttributes = new AudioAttributes.Builder()
-                    .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
-                    .setUsage(AudioAttributes.USAGE_NOTIFICATION_RINGTONE).build();
-            mChannel.setSound(TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getNotificationSoundFilePath()) ? RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION) : Uri.parse(MobiComUserPreference.getInstance(context).getNotificationSoundFilePath()), audioAttributes);
-            mNotificationManager.createNotificationChannel(mChannel);
-
-        }
-
-    }
-
 }
\ No newline at end of file
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegistrationResponse.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegistrationResponse.java
index abc453dd..ffa351c3 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegistrationResponse.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/register/RegistrationResponse.java
@@ -166,11 +166,11 @@ public String getUserEncryptionKey() {
     public void setUserEncryptionKey(String userEncryptionKey) {
         this.userEncryptionKey = userEncryptionKey;
     }
-  
+
     public static enum PricingType {
 
         CLOSED(Short.valueOf("-1")), BETA(Short.valueOf("0")), STARTER(Short.valueOf("1")), LAUNCH(Short.valueOf("2")), GROWTH(Short.valueOf("3")), ENTERPRISE(
-                Short.valueOf("4")),UNSUBSCRIBED(Short.valueOf("6"));
+                Short.valueOf("4")), UNSUBSCRIBED(Short.valueOf("6"));
         private final Short value;
 
         private PricingType(Short c) {
@@ -182,6 +182,23 @@ public Short getValue() {
         }
     }
 
+    public boolean isRegistrationSuccess() {
+        return (!TextUtils.isEmpty(message) && (SuccessResponse.UPDATED.getValue().equals(message) || SuccessResponse.REGISTERED.getValue().equals(message) || SuccessResponse.REGISTERED_WITHOUTREGISTRATIONID.getValue().equals(message)));
+    }
+
+    public static enum SuccessResponse {
+        UPDATED("UPDATED"), REGISTERED("REGISTERED"), REGISTERED_WITHOUTREGISTRATIONID("REGISTERED.WITHOUTREGISTRATIONID");
+        private final String value;
+
+        private SuccessResponse(String c) {
+            value = c;
+        }
+
+        public String getValue() {
+            return value;
+        }
+    }
+
     @Override
     public String toString() {
         return "RegistrationResponse{" +
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/AlUserSearchTask.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/AlUserSearchTask.java
new file mode 100644
index 00000000..33b03e6e
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/AlUserSearchTask.java
@@ -0,0 +1,60 @@
+package com.applozic.mobicomkit.api.account.user;
+
+import android.content.Context;
+import android.os.AsyncTask;
+
+import com.applozic.mobicomkit.exception.ApplozicException;
+import com.applozic.mobicommons.people.contact.Contact;
+
+import java.lang.ref.WeakReference;
+import java.util.List;
+
+public class AlUserSearchTask extends AsyncTask<Void, Void, List<Contact>> {
+
+    private WeakReference<Context> context;
+    private String searchString;
+    private Exception exception;
+    private UserService userService;
+    private AlUserSearchHandler listener;
+
+    public AlUserSearchTask(Context context, String searchString, AlUserSearchHandler listener) {
+        this.context = new WeakReference<>(context);
+        this.searchString = searchString;
+        this.listener = listener;
+        userService = UserService.getInstance(context);
+    }
+
+    @Override
+    protected List<Contact> doInBackground(Void[] objects) {
+        if (searchString == null) {
+            exception = new ApplozicException("Empty search string");
+            return null;
+        }
+
+        try {
+            return userService.getUserListBySearch(searchString);
+        } catch (Exception e) {
+            exception = e;
+        }
+        return null;
+    }
+
+    @Override
+    protected void onPostExecute(List<Contact> contactList) {
+        super.onPostExecute(contactList);
+
+        if (listener != null) {
+            if (contactList != null) {
+                listener.onSuccess(contactList, context.get());
+            } else {
+                listener.onFailure(exception, context.get());
+            }
+        }
+    }
+
+    public interface AlUserSearchHandler {
+        void onSuccess(List<Contact> contacts, Context context);
+
+        void onFailure(Exception e, Context context);
+    }
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/MobiComUserPreference.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/MobiComUserPreference.java
index 2f092ab6..11884524 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/MobiComUserPreference.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/MobiComUserPreference.java
@@ -61,7 +61,6 @@
     private static String video_call_token = "video_call_token";
     private static String user_type_id = "user_type_id";
     private static String application_info_call_done = "application_info_call_done";
-    private static String notification_sound_fileName = "notificationSoundFileName";
     private static String CONTACTS_GROUP_ID = "CONTACTS_GROUP_ID";
     private static String CONTACT_GROUP_ID_LISTS = "contactGroupIdLists";
     private static String IS_CONTACT_GROUP_NAME_LIST = "isContactGroupNameList";
@@ -73,7 +72,7 @@
     private static String device_contact_sync_time = "device_contact_sync_time";
     private static String PARENT_GROUP_KEY = "PARENT_GROUP_KEY";
     private static String user_encryption_Key = "user_encryption_Key";
-    private static String CATEGORY_NAME_KEY =  "CATEGORY_KEY";
+    private static String CATEGORY_NAME_KEY = "CATEGORY_KEY";
 
     private static SharedPreferences sharedPreferences;
     private Context context;
@@ -714,14 +713,6 @@ public void setApplicationInfoCallDone(boolean customerResponse) {
         sharedPreferences.edit().putBoolean(application_info_call_done, customerResponse).commit();
     }
 
-    public String getNotificationSoundFilePath() {
-        return sharedPreferences.getString(notification_sound_fileName, null);
-    }
-
-    public void setNotificationSoundFilePath(String soundUri) {
-        sharedPreferences.edit().putString(notification_sound_fileName, soundUri).commit();
-    }
-
     public String getContactsGroupId() {
         return sharedPreferences.getString(CONTACTS_GROUP_ID, null);
     }
@@ -833,10 +824,10 @@ public void setUserEncryptionKey(String userEncryptionKey) {
     }
 
     public String getCategoryName() {
-        return sharedPreferences.getString(CATEGORY_NAME_KEY,null);
+        return sharedPreferences.getString(CATEGORY_NAME_KEY, null);
     }
 
-    public void setCategoryName(String category ) {
+    public void setCategoryName(String category) {
         sharedPreferences.edit().putString(CATEGORY_NAME_KEY, category).commit();
     }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/PushNotificationTask.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/PushNotificationTask.java
index 06c80416..03cb509f 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/PushNotificationTask.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/PushNotificationTask.java
@@ -48,14 +48,28 @@ protected Boolean doInBackground(Void... params) {
     @Override
     protected void onPostExecute(final Boolean result) {
         // And if it is we call the callback function on it.
-        if (result && this.taskListener != null) {
-            this.taskListener.onSuccess(registrationResponse);
-        } else if (mException != null && this.taskListener != null) {
-            this.taskListener.onFailure(registrationResponse, mException);
-        } else if (result && this.pushNotificationHandler != null) {
-            this.pushNotificationHandler.onSuccess(registrationResponse);
-        } else if (mException != null && this.pushNotificationHandler != null) {
-            this.pushNotificationHandler.onFailure(registrationResponse, mException);
+        if (taskListener != null) {
+            if (registrationResponse != null) {
+                if (registrationResponse.isRegistrationSuccess()) {
+                    taskListener.onSuccess(registrationResponse);
+                } else {
+                    taskListener.onFailure(registrationResponse, mException);
+                }
+            } else {
+                taskListener.onFailure(null, mException);
+            }
+        }
+
+        if (pushNotificationHandler != null) {
+            if (registrationResponse != null) {
+                if (registrationResponse.isRegistrationSuccess()) {
+                    pushNotificationHandler.onSuccess(registrationResponse);
+                } else {
+                    pushNotificationHandler.onFailure(registrationResponse, mException);
+                }
+            } else {
+                pushNotificationHandler.onFailure(null, mException);
+            }
         }
     }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/User.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/User.java
index af58025f..e877f2b4 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/User.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/User.java
@@ -34,6 +34,8 @@
     private String notificationSoundFilePath;
     private Long lastMessageAtTime;
     private Map<String, String> metadata;
+    private String alBaseUrl;
+    private String kmBaseUrl;
     private Short roleType = RoleType.USER_ROLE.getValue();
 
     public List<String> getFeatures() {
@@ -236,6 +238,22 @@ public Short getRoleType() {
         return roleType;
     }
 
+    public String getAlBaseUrl() {
+        return alBaseUrl;
+    }
+
+    public void setAlBaseUrl(String alBaseUrl) {
+        this.alBaseUrl = alBaseUrl;
+    }
+
+    public String getKmBaseUrl() {
+        return kmBaseUrl;
+    }
+
+    public void setKmBaseUrl(String kmBaseUrl) {
+        this.kmBaseUrl = kmBaseUrl;
+    }
+
     public enum AuthenticationType {
 
         CLIENT(Short.valueOf("0")), APPLOZIC(Short.valueOf("1")), FACEBOOK(Short.valueOf("2"));
@@ -285,6 +303,24 @@ public Short getValue() {
         }
     }
 
+    public enum PushNotificationFormat {
+        NATIVE(Short.valueOf("0")),
+        PHONEGAP(Short.valueOf("1")),
+        IONIC(Short.valueOf("2")),
+        NATIVESCRIPT(Short.valueOf("3")),
+        PUSHY_ME(Short.valueOf("4"));
+
+        private Short value;
+
+        PushNotificationFormat(Short p) {
+            value = p;
+        }
+
+        public Short getValue() {
+            return value;
+        }
+    }
+
     public enum RoleName {
         BOT("BOT"),
         APPLICATION_ADMIN("APPLICATION_ADMIN"),
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserClientService.java
index 10faf87c..b0574178 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserClientService.java
@@ -3,9 +3,13 @@
 import android.app.NotificationManager;
 import android.content.Context;
 import android.content.Intent;
+import android.os.Build;
 import android.text.TextUtils;
 import android.util.Log;
 
+import com.applozic.mobicomkit.Applozic;
+import com.applozic.mobicomkit.api.notification.NotificationChannels;
+import com.applozic.mobicomkit.exception.ApplozicException;
 import com.applozic.mobicommons.ALSpecificSettings;
 import com.applozic.mobicomkit.api.HttpRequestUtils;
 import com.applozic.mobicomkit.api.MobiComKitClientService;
@@ -61,6 +65,7 @@
     public static final String USER_LOGOUT = "/rest/ws/device/logout";
     public static final String APPLICATION_INFO_UPDATE_URL = "/apps/customer/application/info/update";
     private static final String MUTE_USER_URL = "/rest/ws/user/chat/mute";
+    private static final String USER_SEARCH_URL = "/rest/ws/user/search/contact";
     private static final String GET_MUTED_USER_LIST = "/rest/ws/user/chat/mute/list";
     public static final int BATCH_SIZE = 60;
     private static final String TAG = "UserClientService";
@@ -163,6 +168,10 @@ private String getMutedUserListUrl() {
         return getBaseUrl() + GET_MUTED_USER_LIST;
     }
 
+    private String getUserSearchUrl() {
+        return getBaseUrl() + USER_SEARCH_URL;
+    }
+
     public ApiResponse logout() {
         return logout(false);
     }
@@ -192,6 +201,10 @@ public ApiResponse logout(boolean fromLogin) {
             final String deviceKeyString = mobiComUserPreference.getDeviceKeyString();
             final String userKeyString = mobiComUserPreference.getSuUserKeyString();
             String url = mobiComUserPreference.getUrl();
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+                Applozic.getInstance(context).setCustomNotificationSound(null);
+                new NotificationChannels(context, null).deleteAllChannels();
+            }
             NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
             notificationManager.cancelAll();
             mobiComUserPreference.clearAll();
@@ -580,6 +593,27 @@ public String updateUserPassword(String oldPassword, String newPassword) {
         return null;
     }
 
+    public ApiResponse getUsersBySearchString(String searchString) throws ApplozicException {
+        if (TextUtils.isEmpty(searchString)) {
+            return null;
+        }
+        String response;
+        ApiResponse apiResponse;
+
+        try {
+            response = httpRequestUtils.getResponse(getUserSearchUrl() + "?name=" + URLEncoder.encode(searchString, "UTF-8"), "application/json", "application/json");
+            if (TextUtils.isEmpty(response)) {
+                return null;
+            }
+            Utils.printLog(context, TAG, "Search user response : " + response);
+            apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+        } catch (Exception e) {
+            throw new ApplozicException(e.getMessage());
+        }
+
+        return apiResponse;
+    }
+
     public String packageDetail(CustomerPackageDetail customerPackageDetail) {
         String response;
         String jsonFromObject = GsonUtils.getJsonFromObject(customerPackageDetail, CustomerPackageDetail.class);
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserLoginTask.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserLoginTask.java
index b1609922..901a057d 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserLoginTask.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserLoginTask.java
@@ -64,14 +64,28 @@ protected Boolean doInBackground(Void... params) {
     @Override
     protected void onPostExecute(final Boolean result) {
         // And if it is we call the callback function on it.
-        if (result && this.taskListener != null) {
-            this.taskListener.onSuccess(registrationResponse, context.get());
-        } else if (mException != null && this.taskListener != null) {
-            this.taskListener.onFailure(registrationResponse, mException);
-        } else if (result && this.loginHandler != null) {
-            this.loginHandler.onSuccess(registrationResponse, context.get());
-        } else if (mException != null && this.loginHandler != null) {
-            this.loginHandler.onFailure(registrationResponse, mException);
+        if (taskListener != null) {
+            if (registrationResponse != null) {
+                if (registrationResponse.isRegistrationSuccess()) {
+                    taskListener.onSuccess(registrationResponse, context.get());
+                } else {
+                    taskListener.onFailure(registrationResponse, mException);
+                }
+            } else {
+                taskListener.onFailure(null, mException);
+            }
+        }
+
+        if (loginHandler != null) {
+            if (registrationResponse != null) {
+                if (registrationResponse.isRegistrationSuccess()) {
+                    loginHandler.onSuccess(registrationResponse, context.get());
+                } else {
+                    loginHandler.onFailure(registrationResponse, mException);
+                }
+            } else {
+                loginHandler.onFailure(null, mException);
+            }
         }
     }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserService.java
index 01b84ecb..8e18afda 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/account/user/UserService.java
@@ -12,6 +12,7 @@
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.BaseContactService;
 import com.applozic.mobicomkit.contact.database.ContactDatabase;
+import com.applozic.mobicomkit.exception.ApplozicException;
 import com.applozic.mobicomkit.feed.ApiResponse;
 import com.applozic.mobicomkit.feed.RegisteredUsersApiResponse;
 import com.applozic.mobicomkit.feed.SyncApiResponse;
@@ -24,6 +25,7 @@
 import com.applozic.mobicommons.people.contact.Contact;
 import com.google.gson.reflect.TypeToken;
 
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.List;
@@ -152,6 +154,37 @@ public synchronized void processUser(UserDetail userDetail) {
         processUser(userDetail, Contact.ContactType.APPLOZIC);
     }
 
+    public synchronized Contact getContactFromUserDetail(UserDetail userDetail) {
+        return getContactFromUserDetail(userDetail, Contact.ContactType.APPLOZIC);
+    }
+
+    public synchronized Contact getContactFromUserDetail(UserDetail userDetail, Contact.ContactType contactType) {
+        Contact contact = new Contact();
+        contact.setUserId(userDetail.getUserId());
+        contact.setContactNumber(userDetail.getPhoneNumber());
+        contact.setConnected(userDetail.isConnected());
+        contact.setStatus(userDetail.getStatusMessage());
+        if (!TextUtils.isEmpty(userDetail.getDisplayName())) {
+            contact.setFullName(userDetail.getDisplayName());
+        }
+        contact.setLastSeenAt(userDetail.getLastSeenAtTime());
+        contact.setUserTypeId(userDetail.getUserTypeId());
+        contact.setUnreadCount(0);
+        contact.setLastMessageAtTime(userDetail.getLastMessageAtTime());
+        contact.setMetadata(userDetail.getMetadata());
+        contact.setRoleType(userDetail.getRoleType());
+        contact.setDeletedAtTime(userDetail.getDeletedAtTime());
+        if (!TextUtils.isEmpty(userDetail.getImageLink())) {
+            contact.setImageURL(userDetail.getImageLink());
+        }
+        if (Applozic.getInstance(context).isDeviceContactSync()) {
+            contact.setDeviceContactType(contactType.getValue());
+        } else {
+            contact.setContactType(contactType.getValue());
+        }
+        baseContactService.upsert(contact);
+        return contact;
+    }
 
     public synchronized void processUser(UserDetail userDetail, Contact.ContactType contactType) {
         Contact contact = new Contact();
@@ -260,7 +293,7 @@ public ApiResponse muteUserNotifications(String userId, Long notificationAfterTi
     }
 
     public String updateDisplayNameORImageLink(String displayName, String profileImageLink, String localURL, String status) {
-        return updateDisplayNameORImageLink(displayName, profileImageLink, localURL, status,null);
+        return updateDisplayNameORImageLink(displayName, profileImageLink, localURL, status, null);
     }
 
     public String updateDisplayNameORImageLink(String displayName, String profileImageLink, String localURL, String status, String contactNumber) {
@@ -322,6 +355,33 @@ public String processUpdateUserPassword(String oldPassword, String newPassword)
         return response;
     }
 
+    public List<Contact> getUserListBySearch(String searchString) throws ApplozicException {
+        try {
+            ApiResponse response = userClientService.getUsersBySearchString(searchString);
+
+            if (response == null) {
+                return null;
+            }
+
+            if (response.isSuccess()) {
+                UserDetail[] userDetails = (UserDetail[]) GsonUtils.getObjectFromJson(GsonUtils.getJsonFromObject(response.getResponse(), List.class), UserDetail[].class);
+                List<Contact> contactList = new ArrayList<>();
+
+                for (UserDetail userDetail : userDetails) {
+                    contactList.add(getContactFromUserDetail(userDetail));
+                }
+                return contactList;
+            } else {
+                if (response.getErrorResponse() != null && !response.getErrorResponse().isEmpty()) {
+                    throw new ApplozicException(GsonUtils.getJsonFromObject(response.getErrorResponse(), List.class));
+                }
+            }
+        } catch (Exception e) {
+            throw new ApplozicException(e.getMessage());
+        }
+        return null;
+    }
+
 
     public void processPackageDetail() {
         CustomerPackageDetail customerPackageDetail = new CustomerPackageDetail();
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/ApplozicMultipartUtility.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/ApplozicMultipartUtility.java
index 00e0d527..720b0b57 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/ApplozicMultipartUtility.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/ApplozicMultipartUtility.java
@@ -4,6 +4,7 @@
 import android.os.Handler;
 
 import com.applozic.mobicomkit.api.HttpRequestUtils;
+import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.conversation.MobiComConversationService;
 
 import java.io.BufferedReader;
@@ -46,7 +47,7 @@ public ApplozicMultipartUtility(String requestURL, String charset, Context conte
     }
 
 
-    public void addFilePart(String fieldName, File uploadFile, Handler handler)
+    public void addFilePart(String fieldName, File uploadFile, Handler handler, String oldMessageKey)
             throws IOException, InterruptedException {
         String fileName = uploadFile.getName();
         writer.append("--" + boundary).append(LINE_FEED);
@@ -71,6 +72,7 @@ public void addFilePart(String fieldName, File uploadFile, Handler handler)
         if (handler != null) {
             android.os.Message msg = handler.obtainMessage();
             msg.what = MobiComConversationService.UPLOAD_STARTED;
+            msg.getData().putString(MobiComKitConstants.OLD_MESSAGE_KEY_INTENT_EXTRA, oldMessageKey);
             msg.getData().putString("error", null);
             msg.sendToTarget();
             //handler.onUploadStarted(null);
@@ -88,6 +90,7 @@ public void addFilePart(String fieldName, File uploadFile, Handler handler)
                     if (handler != null) {
                         android.os.Message msg = handler.obtainMessage();
                         msg.what = MobiComConversationService.UPLOAD_PROGRESS;
+                        msg.getData().putString(MobiComKitConstants.OLD_MESSAGE_KEY_INTENT_EXTRA, oldMessageKey);
                         msg.arg1 = percentage;
                         msg.sendToTarget();
                         //handler.onProgressUpdate(percentage, null);
@@ -98,6 +101,7 @@ public void addFilePart(String fieldName, File uploadFile, Handler handler)
                 if (handler != null) {
                     android.os.Message msg = handler.obtainMessage();
                     msg.what = MobiComConversationService.UPLOAD_COMPLETED;
+                    msg.getData().putString(MobiComKitConstants.OLD_MESSAGE_KEY_INTENT_EXTRA, oldMessageKey);
                     msg.getData().putString("error", e.getMessage());
                     msg.sendToTarget();
                     //handler.onCompleted(new ApplozicException(e.getMessage()));
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentDownloader.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentDownloader.java
index bd7f74be..9bc3dafc 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentDownloader.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentDownloader.java
@@ -151,11 +151,11 @@ public void run() {
 
     public void loadAttachmentImage(Message message, Context context) {
         File file = null;
+        HttpURLConnection connection = null;
         try {
             InputStream inputStream = null;
             FileMeta fileMeta = message.getFileMetas();
             String contentType = fileMeta.getContentType();
-            HttpURLConnection connection = null;
             String fileName = null;
             if (message.getContentType() == Message.ContentType.AUDIO_MSG.getValue()) {
                 fileName = fileMeta.getName();
@@ -237,6 +237,10 @@ public void onScanCompleted(String path, Uri uri) {
             }
             ex.printStackTrace();
             Utils.printLog(context, TAG, "Exception fetching file from server");
+        } finally {
+            if (connection != null) {
+                connection.disconnect();
+            }
         }
     }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentManager.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentManager.java
index 3e86cecb..3327a855 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentManager.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentManager.java
@@ -309,9 +309,15 @@ public void handleMessage(Message inputMessage) {
                         // The download failed, sets the background color to dark red
                         case DOWNLOAD_FAILED:
                             //localView.setStatusResource(R.drawable.imagedownloadfailed);
-                            localView.getProressBar().setProgress(0);
-                            localView.getMessage().setAttDownloadInProgress(false);
-                            localView.getDownloadProgressLayout().setVisibility(View.GONE);
+                            if (localView.getProressBar() != null) {
+                                localView.getProressBar().setProgress(0);
+                            }
+                            if(localView.getMessage() != null){
+                                localView.getMessage().setAttDownloadInProgress(false);
+                            }
+                            if(localView.getDownloadProgressLayout() != null){
+                                localView.getDownloadProgressLayout().setVisibility(View.GONE);
+                            }
                             localView.setVisibility(View.INVISIBLE);
                             localView.cancelDownload();
                             BroadcastService.sendMessageUpdateBroadcast(localView.getContext(), BroadcastService.INTENT_ACTIONS.MESSAGE_ATTACHMENT_DOWNLOAD_FAILD.toString(), localView.getMessage());
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentView.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentView.java
index 5e74dde9..87302f17 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentView.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/AttachmentView.java
@@ -81,6 +81,7 @@ public AttachmentView(Context context) {
      */
     public AttachmentView(Context context, AttributeSet attributeSet) {
         super(context, attributeSet);
+        this.context = context;
 
         // Gets attributes associated with the attribute set
         //getAttributes(attributeSet);
@@ -95,6 +96,7 @@ public AttachmentView(Context context, AttributeSet attributeSet) {
      */
     public AttachmentView(Context context, AttributeSet attributeSet, int defaultStyle) {
         super(context, attributeSet, defaultStyle);
+        this.context = context;
 
     }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileClientService.java
index 8bf6cc1f..d2483a80 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/FileClientService.java
@@ -52,7 +52,7 @@
     public static final String IMAGE_DIR = "image";
     public static final String AL_UPLOAD_FILE_URL = "/rest/ws/upload/file";
     public static final String CUSTOM_STORAGE_SERVICE_END_POINT = "/rest/ws/upload/image";
-//    public static final String S3_SIGNED_URL_END_POINT = "/rest/ws/upload/file";
+    //    public static final String S3_SIGNED_URL_END_POINT = "/rest/ws/upload/file";
     public static final String S3_SIGNED_URL_END_POINT = "/rest/ws/upload/image";
     public static final String S3_SIGNED_URL_PARAM = "aclsPrivate";
     public static final String THUMBNAIL_URL = "/files/";
@@ -236,14 +236,14 @@ public Bitmap loadMessageImage(Context context, String url) {
         return null;
     }
 
-    public String uploadBlobImage(String path, Handler handler) throws UnsupportedEncodingException {
+    public String uploadBlobImage(String path, Handler handler, String oldMessageKey) throws UnsupportedEncodingException {
         try {
 
             ApplozicMultipartUtility multipart = new ApplozicMultipartUtility(getUploadURL(), "UTF-8", context);
-            if ( ApplozicClient.getInstance(context).isS3StorageServiceEnabled() ) {
-                multipart.addFilePart("file", new File(path), handler);
+            if (ApplozicClient.getInstance(context).isS3StorageServiceEnabled()) {
+                multipart.addFilePart("file", new File(path), handler, oldMessageKey);
             } else {
-                multipart.addFilePart("files[]", new File(path), handler);
+                multipart.addFilePart("files[]", new File(path), handler, oldMessageKey);
             }
             return multipart.getResponse();
 //            return new URLServiceProvider(context).getMultipartFile(path, handler).getResponse();
@@ -349,7 +349,7 @@ public Bitmap createAndSaveVideoThumbnail(String filePath) {
     public String uploadProfileImage(String path) throws UnsupportedEncodingException {
         try {
             ApplozicMultipartUtility multipart = new ApplozicMultipartUtility(profileImageUploadURL(), "UTF-8", context);
-            multipart.addFilePart("file", new File(path), null);
+            multipart.addFilePart("file", new File(path), null, null);
             return multipart.getResponse();
         } catch (Exception e) {
             e.printStackTrace();
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/urlservice/GoogleCloudURLService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/urlservice/GoogleCloudURLService.java
index 9fc90436..faa6be0f 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/urlservice/GoogleCloudURLService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/urlservice/GoogleCloudURLService.java
@@ -29,7 +29,7 @@ public GoogleCloudURLService(Context context) {
     @Override
     public HttpURLConnection getAttachmentConnection(Message message) throws IOException {
 
-        String response = httpRequestUtils.getResponse(mobiComKitClientService.getFileBaseUrl() + GET_SIGNED_URL + message.getFileMetas().getBlobKeyString(), "application/json", "application/json");
+        String response = httpRequestUtils.getResponse(mobiComKitClientService.getFileBaseUrl() + GET_SIGNED_URL + message.getFileMetas().getBlobKeyString(), "application/json", "application/json",true);
         if (TextUtils.isEmpty(response)) {
             return null;
         } else {
@@ -39,7 +39,7 @@ public HttpURLConnection getAttachmentConnection(Message message) throws IOExcep
 
     @Override
     public String getThumbnailURL(Message message) throws IOException {
-        return httpRequestUtils.getResponse(mobiComKitClientService.getFileBaseUrl() + GET_SIGNED_URL + message.getFileMetas().getThumbnailBlobKey(), "application/json", "application/json");
+        return httpRequestUtils.getResponse(mobiComKitClientService.getFileBaseUrl() + GET_SIGNED_URL + message.getFileMetas().getThumbnailBlobKey(), "application/json", "application/json",true);
     }
 
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/urlservice/S3URLService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/urlservice/S3URLService.java
index 72149276..8afcd651 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/urlservice/S3URLService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/attachment/urlservice/S3URLService.java
@@ -30,7 +30,7 @@
     @Override
     public HttpURLConnection getAttachmentConnection(Message message) throws IOException {
 
-        String response = httpRequestUtils.getResponse(mobiComKitClientService.getBaseUrl() + GET_SIGNED_URL + message.getFileMetas().getBlobKeyString(), "application/json", "application/json");
+        String response = httpRequestUtils.getResponse(mobiComKitClientService.getBaseUrl() + GET_SIGNED_URL + message.getFileMetas().getBlobKeyString(), "application/json", "application/json",true);
         if (TextUtils.isEmpty(response)) {
             return null;
         } else {
@@ -40,7 +40,7 @@ public HttpURLConnection getAttachmentConnection(Message message) throws IOExcep
 
     @Override
     public String getThumbnailURL(Message message) throws IOException {
-        return httpRequestUtils.getResponse(mobiComKitClientService.getBaseUrl() + GET_SIGNED_URL + message.getFileMetas().getThumbnailBlobKey(), "application/json", "application/json");
+        return httpRequestUtils.getResponse(mobiComKitClientService.getBaseUrl() + GET_SIGNED_URL + message.getFileMetas().getThumbnailBlobKey(), "application/json", "application/json",true);
 
     }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/AlConversation.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/AlConversation.java
new file mode 100644
index 00000000..449e5478
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/AlConversation.java
@@ -0,0 +1,43 @@
+package com.applozic.mobicomkit.api.conversation;
+
+import com.applozic.mobicommons.people.channel.Channel;
+import com.applozic.mobicommons.people.contact.Contact;
+
+public class AlConversation {
+    private Channel channel;
+    private Contact contact;
+    private Message message;
+    private int unreadCount;
+
+    public Channel getChannel() {
+        return channel;
+    }
+
+    public void setChannel(Channel channel) {
+        this.channel = channel;
+    }
+
+    public Contact getContact() {
+        return contact;
+    }
+
+    public void setContact(Contact contact) {
+        this.contact = contact;
+    }
+
+    public Message getMessage() {
+        return message;
+    }
+
+    public void setMessage(Message message) {
+        this.message = message;
+    }
+
+    public int getUnreadCount() {
+        return unreadCount;
+    }
+
+    public void setUnreadCount(int unreadCount) {
+        this.unreadCount = unreadCount;
+    }
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ApplozicConversation.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ApplozicConversation.java
index f5fc1a89..7df51b99 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ApplozicConversation.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ApplozicConversation.java
@@ -1,13 +1,18 @@
 package com.applozic.mobicomkit.api.conversation;
 
 import android.content.Context;
+import android.content.Intent;
 
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.attachment.AttachmentManager;
 import com.applozic.mobicomkit.api.attachment.AttachmentTask;
+import com.applozic.mobicomkit.api.conversation.database.MessageDatabaseService;
+import com.applozic.mobicomkit.api.people.UserIntentService;
+import com.applozic.mobicomkit.channel.database.ChannelDatabaseService;
 import com.applozic.mobicomkit.channel.service.ChannelService;
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.exception.ApplozicException;
+import com.applozic.mobicomkit.listners.ConversationListHandler;
 import com.applozic.mobicomkit.listners.MediaDownloadProgressHandler;
 import com.applozic.mobicomkit.listners.MessageListHandler;
 import com.applozic.mobicommons.people.channel.Channel;
@@ -38,6 +43,17 @@ public static void getLatestMessageList(Context context, String searchString, Lo
         new MessageListTask(context, searchString, null, null, startTime, null, handler, true).execute();
     }
 
+    public static void getConversationList(Context context, String searchString, boolean isScroll, ConversationListHandler handler) {
+        new ConversationListTask(context,
+                searchString,
+                null,
+                null,
+                (isScroll ? MobiComUserPreference.getInstance(context).getStartTimeForPagination() : null),
+                null,
+                handler,
+                true).execute();
+    }
+
     public static void getMessageListForContact(Context context, Contact contact, Long endTime, MessageListHandler handler) {
         new MessageListTask(context, null, contact, null, null, endTime, handler, false).execute();
     }
@@ -114,6 +130,72 @@ public static synchronized void addLatestMessage(Message message, List<Message>
         }
     }
 
+    public static synchronized void addLatestConversation(Context context, Message message, List<AlConversation> conversationList) {
+        Iterator<AlConversation> iterator = conversationList.iterator();
+        boolean shouldAdd = false;
+
+        while (iterator.hasNext()) {
+            AlConversation currentMessage = iterator.next();
+
+            if ((message.getGroupId() != null && currentMessage.getMessage().getGroupId() != null && message.getGroupId().equals(currentMessage.getMessage().getGroupId())) ||
+                    (message.getGroupId() == null && currentMessage.getMessage().getGroupId() == null && message.getContactIds() != null && currentMessage.getMessage().getContactIds() != null &&
+                            message.getContactIds().equals(currentMessage.getMessage().getContactIds()))) {
+                //do nothing
+            } else {
+                currentMessage = null;
+            }
+
+            if (currentMessage != null) {
+                if (message.getCreatedAtTime() >= currentMessage.getMessage().getCreatedAtTime()) {
+                    iterator.remove();
+                } else {
+                    return;
+                }
+            }
+
+            shouldAdd = true;
+        }
+
+        if (shouldAdd) {
+            conversationList.add(0, getConversationFromMessage(context, message));
+        }
+    }
+
+    public static synchronized void removeLatestConversation(String userId, Integer groupId, List<AlConversation> conversationList) {
+        int index = -1;
+
+        for (AlConversation message : conversationList) {
+            if (message.getMessage().getGroupId() != null) {
+                if (message.getMessage().getGroupId() != 0 && message.getMessage().getGroupId().equals(groupId)) {
+                    index = conversationList.indexOf(message);
+                }
+            } else if (message.getMessage().getContactIds() != null && message.getMessage().getContactIds().equals(userId)) {
+                index = conversationList.indexOf(message);
+            }
+        }
+        if (index != -1) {
+            conversationList.remove(index);
+        }
+    }
+
+    public static AlConversation getConversationFromMessage(Context context, Message message) {
+        AlConversation conversation = new AlConversation();
+
+        conversation.setMessage(message);
+
+        if (message.getGroupId() == null || message.getGroupId() == 0) {
+            conversation.setContact(new AppContactService(context).getContactById(message.getContactIds()));
+            conversation.setChannel(null);
+            conversation.setUnreadCount(new MessageDatabaseService(context).getUnreadMessageCountForContact(message.getContactIds()));
+        } else {
+            conversation.setChannel(ChannelDatabaseService.getInstance(context).getChannelByChannelKey(message.getGroupId()));
+            conversation.setContact(null);
+            conversation.setUnreadCount(new MessageDatabaseService(context).getUnreadMessageCountForChannel(message.getGroupId()));
+        }
+
+        return conversation;
+    }
+
     public static synchronized void removeLatestMessage(String userId, Integer groupId, List<Message> messageList) {
         Message tempMessage = null;
 
@@ -131,4 +213,27 @@ public static synchronized void removeLatestMessage(String userId, Integer group
         }
     }
 
+    public static void markAsRead(Context context, String userId, Integer groupId) {
+        try {
+            int unreadCount = 0;
+            Contact contact = null;
+            Channel channel = null;
+            if (userId != null) {
+                contact = new AppContactService(context).getContactById(userId);
+                unreadCount = contact.getUnreadCount();
+                new MessageDatabaseService(context).updateReadStatusForContact(userId);
+            } else if (groupId != null && groupId != 0) {
+                channel = ChannelService.getInstance(context).getChannelByChannelKey(groupId);
+                unreadCount = channel.getUnreadCount();
+                new MessageDatabaseService(context).updateReadStatusForChannel(String.valueOf(groupId));
+            }
+
+            Intent intent = new Intent(context, UserIntentService.class);
+            intent.putExtra(UserIntentService.CONTACT, contact);
+            intent.putExtra(UserIntentService.CHANNEL, channel);
+            intent.putExtra(UserIntentService.UNREAD_COUNT, unreadCount);
+            UserIntentService.enqueueWork(context, intent);
+        } catch (Exception e) {
+        }
+    }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationIntentService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationIntentService.java
index 4eb76bf1..25eb450c 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationIntentService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationIntentService.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.content.Intent;
+import android.os.Process;
 import android.support.annotation.NonNull;
 import android.support.v4.app.JobIntentService;
 import android.text.TextUtils;
@@ -63,7 +64,13 @@ protected void onHandleWork(@NonNull Intent intent) {
 
         if (mutedUserListSync) {
             Utils.printLog(ConversationIntentService.this, TAG, "Muted user list sync started..");
-            new Thread(new MutedUserListSync()).start();
+            try {
+                Thread thread = new Thread(new MutedUserListSync());
+                thread.setPriority(Process.THREAD_PRIORITY_BACKGROUND);
+                thread.start();
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
             return;
         }
 
@@ -82,6 +89,7 @@ protected void onHandleWork(@NonNull Intent intent) {
                 mobiComMessageService.syncMessages();
             } else {
                 Thread thread = new Thread(new ConversationSync());
+                thread.setPriority(Process.THREAD_PRIORITY_BACKGROUND);
                 thread.start();
             }
         }
@@ -143,5 +151,5 @@ public void run() {
             }
         }
     }
-
 }
+
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationListTask.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationListTask.java
new file mode 100644
index 00000000..a8dd348b
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/ConversationListTask.java
@@ -0,0 +1,108 @@
+package com.applozic.mobicomkit.api.conversation;
+
+import android.content.Context;
+import android.os.AsyncTask;
+import android.text.TextUtils;
+
+import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
+import com.applozic.mobicomkit.api.conversation.database.MessageDatabaseService;
+import com.applozic.mobicomkit.channel.service.ChannelService;
+import com.applozic.mobicomkit.contact.AppContactService;
+import com.applozic.mobicomkit.exception.ApplozicException;
+import com.applozic.mobicomkit.listners.ConversationListHandler;
+import com.applozic.mobicommons.people.channel.Channel;
+import com.applozic.mobicommons.people.contact.Contact;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.List;
+
+public class ConversationListTask extends AsyncTask<Void, Void, List<AlConversation>> {
+
+    private WeakReference<Context> context;
+    private String searchString;
+    private Contact contact;
+    private Channel channel;
+    private Long startTime;
+    private Long endTime;
+    private boolean isForMessageList;
+    private ConversationListHandler handler;
+    private ApplozicException exception;
+    private AppContactService appContactService;
+    private ChannelService channelService;
+    private MessageDatabaseService messageDatabaseService;
+
+    public ConversationListTask(Context context, String searchString, Contact contact, Channel channel, Long startTime, Long endTime, ConversationListHandler handler, boolean isForMessageList) {
+        this.context = new WeakReference<Context>(context);
+        this.searchString = searchString;
+        this.contact = contact;
+        this.channel = channel;
+        this.startTime = startTime;
+        this.endTime = endTime;
+        this.handler = handler;
+        this.isForMessageList = isForMessageList;
+        channelService = ChannelService.getInstance(this.context.get());
+        appContactService = new AppContactService(this.context.get());
+        messageDatabaseService = new MessageDatabaseService(this.context.get());
+    }
+
+    @Override
+    protected List<AlConversation> doInBackground(Void... voids) {
+        List<Message> messageList = null;
+
+        try {
+            if (isForMessageList) {
+                messageList = new MobiComConversationService(context.get()).getLatestMessagesGroupByPeople(startTime, TextUtils.isEmpty(searchString) ? null : searchString);
+            } else {
+                messageList = new MobiComConversationService(context.get()).getMessages(startTime, endTime, contact, channel, null);
+            }
+
+            if (messageList == null && exception == null) {
+                exception = new ApplozicException("Some internal error occurred");
+            }
+
+            List<String> recList = new ArrayList<String>();
+            List<AlConversation> conversationList = new ArrayList<AlConversation>();
+
+            if (isForMessageList) {
+                if (messageList != null) {
+                    for (Message message : messageList) {
+                        AlConversation conversation = new AlConversation();
+
+                        if ((message.getGroupId() == null || message.getGroupId() == 0) && !recList.contains(message.getContactIds())) {
+                            recList.add(message.getContactIds());
+
+                            conversation.setMessage(message);
+                            conversation.setContact(appContactService.getContactById(message.getContactIds()));
+                            conversation.setChannel(null);
+                            conversation.setUnreadCount(messageDatabaseService.getUnreadMessageCountForContact(message.getContactIds()));
+                            conversationList.add(conversation);
+                        } else if (message.getGroupId() != null && !recList.contains("group" + message.getGroupId())) {
+                            recList.add("group" + message.getGroupId());
+
+                            conversation.setMessage(message);
+                            conversation.setContact(null);
+                            conversation.setChannel(channelService.getChannel(message.getGroupId()));
+                            conversation.setUnreadCount(messageDatabaseService.getUnreadMessageCountForChannel(message.getGroupId()));
+                            conversationList.add(conversation);
+                        }
+                    }
+                    if (!messageList.isEmpty()) {
+                        MobiComUserPreference.getInstance(context.get()).setStartTimeForPagination(messageList.get(messageList.size() - 1).getCreatedAtTime());
+                    }
+                    return conversationList;
+                }
+            }
+        } catch (Exception e) {
+            exception = new ApplozicException(e.getMessage());
+        }
+        return null;
+    }
+
+    @Override
+    protected void onPostExecute(List<AlConversation> conversationList) {
+        super.onPostExecute(conversationList);
+
+        handler.onResult(context.get(), conversationList, exception);
+    }
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/Message.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/Message.java
index fd576ab1..4ac4b1f3 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/Message.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/Message.java
@@ -67,6 +67,8 @@
     public static final String CONTACT = "contact";
     public static final String LOCATION = "location";
     public static final String OTHER = "other";
+    public static final String KM_ASSIGN = "KM_ASSIGN";
+    public static final String KM_STATUS = "KM_STATUS";
 
     public Message() {
 
@@ -105,6 +107,7 @@ public Message(Message message) {
         this.setConversationId(message.getConversationId());
         this.setTopicId(message.getTopicId());
         this.setMetadata(message.getMetadata());
+        this.setHidden(message.isHidden());
     }
 
     public long getSentMessageTimeAtServer() {
@@ -670,7 +673,7 @@ public boolean isGroupMetaDataUpdated() {
     }
 
     public void setHidden(boolean hidden) {
-        hidden = hidden;
+        this.hidden = hidden;
     }
 
     public int isReplyMessage() {
@@ -681,15 +684,19 @@ public void setReplyMessage(int replyMessage) {
         this.replyMessage = replyMessage;
     }
 
+    public boolean isActionMessage() {
+        return getMetadata() != null && (getMetadata().containsKey(KM_ASSIGN) || getMetadata().containsKey(KM_STATUS));
+    }
+
 
     public boolean isIgnoreMessageAdding(Context context) {
-        if(ApplozicClient.getInstance(context).isSubGroupEnabled() && MobiComUserPreference.getInstance(context).getParentGroupKey() != null  || !TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getCategoryName())){
+        if (ApplozicClient.getInstance(context).isSubGroupEnabled() && MobiComUserPreference.getInstance(context).getParentGroupKey() != null || !TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getCategoryName())) {
             Channel channel = ChannelService.getInstance(context).getChannelByChannelKey(getGroupId());
             boolean subGroupFlag = channel != null && channel.getParentKey() != null && MobiComUserPreference.getInstance(context).getParentGroupKey().equals(channel.getParentKey());
-            boolean categoryFlag = channel != null  && channel.isPartOfCategory(MobiComUserPreference.getInstance(context).getCategoryName());
-            return  (subGroupFlag || categoryFlag ||  ApplozicClient.getInstance(context).isSubGroupEnabled() || !TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getCategoryName()));
+            boolean categoryFlag = channel != null && channel.isPartOfCategory(MobiComUserPreference.getInstance(context).getCategoryName());
+            return (subGroupFlag || categoryFlag || ApplozicClient.getInstance(context).isSubGroupEnabled() || !TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getCategoryName()) || hidden);
         }
-        return false;
+        return ((ApplozicClient.getInstance(context).isActionMessagesHidden() && isActionMessage()) || isHidden());
     }
 
     @Override
@@ -865,4 +872,4 @@ public Short getValue() {
         }
     }
 
-}
\ No newline at end of file
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageClientService.java
index 8c44a95b..684bb5d0 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageClientService.java
@@ -7,6 +7,7 @@
 import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.HttpRequestUtils;
 import com.applozic.mobicomkit.api.MobiComKitClientService;
+import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.account.user.UserDetail;
 import com.applozic.mobicomkit.api.attachment.FileClientService;
@@ -274,8 +275,9 @@ public void sendPendingMessageToServer(Message message, boolean broadcast) {
             String createdAt = messageResponse.getCreatedAtTime();
             message.setSentMessageTimeAtServer(Long.parseLong(createdAt));
             message.setKeyString(keyString);
+            message.setSentToServer(true);
 
-        /*recentMessageSentToServer.add(message);*/
+            /*recentMessageSentToServer.add(message);*/
 
             if (broadcast) {
                 BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.MESSAGE_SYNC_ACK_FROM_SERVER.toString(), message);
@@ -300,7 +302,6 @@ public void sendMessageToServer(Message message, Handler handler, Class intentCl
     }
 
     public void processMessage(Message message, Handler handler) throws Exception {
-
         boolean isBroadcast = (message.getMessageId() == null);
 
         MobiComUserPreference userPreferences = MobiComUserPreference.getInstance(context);
@@ -324,8 +325,10 @@ public void processMessage(Message message, Handler handler) throws Exception {
 
         List<String> fileKeys = new ArrayList<String>();
         String keyString = null;
+        String oldMessageKey = null;
         if (!isBroadcastOneByOneGroupType) {
             keyString = UUID.randomUUID().toString();
+            oldMessageKey = keyString;
             message.setKeyString(keyString);
             message.setSentToServer(false);
         } else {
@@ -346,7 +349,7 @@ public void processMessage(Message message, Handler handler) throws Exception {
         if (!isBroadcastOneByOneGroupType && message.isUploadRequired() && !isOpenGroup) {
             for (String filePath : message.getFilePaths()) {
                 try {
-                    String fileMetaResponse = new FileClientService(context).uploadBlobImage(filePath, handler);
+                    String fileMetaResponse = new FileClientService(context).uploadBlobImage(filePath, handler, oldMessageKey);
                     if (fileMetaResponse == null) {
                         if (skipMessage) {
                             return;
@@ -355,6 +358,7 @@ public void processMessage(Message message, Handler handler) throws Exception {
                             android.os.Message msg = handler.obtainMessage();
                             msg.what = MobiComConversationService.UPLOAD_COMPLETED;
                             msg.getData().putString("error", "Error while uploading");
+                            msg.getData().putString(MobiComKitConstants.OLD_MESSAGE_KEY_INTENT_EXTRA, oldMessageKey);
                             msg.sendToTarget();
                         }
                         if (!message.isContactMessage()) {
@@ -369,6 +373,7 @@ public void processMessage(Message message, Handler handler) throws Exception {
                             if (handler != null) {
                                 android.os.Message msg = handler.obtainMessage();
                                 msg.what = MobiComConversationService.UPLOAD_COMPLETED;
+                                msg.getData().putString(MobiComKitConstants.OLD_MESSAGE_KEY_INTENT_EXTRA, oldMessageKey);
                                 msg.getData().putString("error", null);
                                 msg.sendToTarget();
                             }
@@ -382,6 +387,7 @@ public void processMessage(Message message, Handler handler) throws Exception {
                             if (handler != null) {
                                 android.os.Message msg = handler.obtainMessage();
                                 msg.what = MobiComConversationService.UPLOAD_COMPLETED;
+                                msg.getData().putString(MobiComKitConstants.OLD_MESSAGE_KEY_INTENT_EXTRA, oldMessageKey);
                                 msg.getData().putString("error", null);
                                 msg.sendToTarget();
                             }
@@ -392,10 +398,11 @@ public void processMessage(Message message, Handler handler) throws Exception {
                     if (handler != null) {
                         android.os.Message msg = handler.obtainMessage();
                         msg.what = MobiComConversationService.UPLOAD_COMPLETED;
+                        msg.getData().putString(MobiComKitConstants.OLD_MESSAGE_KEY_INTENT_EXTRA, oldMessageKey);
                         msg.getData().putString("error", "Error uploading file to server: " + filePath);
                         msg.sendToTarget();
                     }
-                  /*  recentMessageSentToServer.remove(message);*/
+                    /*  recentMessageSentToServer.remove(message);*/
                     if (!message.isContactMessage() && !skipMessage) {
                         messageDatabaseService.updateCanceledFlag(messageId, 1);
                     }
@@ -456,6 +463,7 @@ public void processMessage(Message message, Handler handler) throws Exception {
                         android.os.Message msg = handler.obtainMessage();
                         msg.what = MobiComConversationService.UPLOAD_COMPLETED;
                         msg.getData().putString("error", "Error uploading file to server");
+                        msg.getData().putString(MobiComKitConstants.OLD_MESSAGE_KEY_INTENT_EXTRA, oldMessageKey);
                         msg.sendToTarget();
                     }
                     BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.UPLOAD_ATTACHMENT_FAILED.toString(), message);
@@ -480,7 +488,10 @@ public void processMessage(Message message, Handler handler) throws Exception {
                 if (handler != null) {
                     android.os.Message msg = handler.obtainMessage();
                     msg.what = MobiComConversationService.MESSAGE_SENT;
-                    msg.getData().putString("message", message.getKeyString());
+                    msg.getData().putString(MobiComKitConstants.MESSAGE_INTENT_EXTRA, message.getKeyString());
+                    String messageJson = GsonUtils.getJsonFromObject(message, Message.class);
+                    msg.getData().putString(MobiComKitConstants.MESSAGE_JSON_INTENT_EXTRA, messageJson);
+                    msg.getData().putString(MobiComKitConstants.OLD_MESSAGE_KEY_INTENT_EXTRA, oldMessageKey);
                     msg.sendToTarget();
                 }
             }
@@ -498,6 +509,7 @@ public void processMessage(Message message, Handler handler) throws Exception {
             if (handler != null) {
                 android.os.Message msg = handler.obtainMessage();
                 msg.what = MobiComConversationService.UPLOAD_COMPLETED;
+                msg.getData().putString(MobiComKitConstants.OLD_MESSAGE_KEY_INTENT_EXTRA, oldMessageKey);
                 msg.getData().putString("error", "Error uploading file");
                 msg.sendToTarget();
                 //handler.onCompleted(new ApplozicException("Error uploading file"));
@@ -638,10 +650,10 @@ public void updateReadStatusForSingleMessage(String pairedmessagekey) {
     }
 
     public String getMessages(Contact contact, Channel channel, Long startTime, Long endTime, Integer conversationId) throws UnsupportedEncodingException {
-        return getMessages(contact, channel, startTime, endTime, conversationId,false);
+        return getMessages(contact, channel, startTime, endTime, conversationId, false);
     }
 
-     public String getMessages(Contact contact, Channel channel, Long startTime, Long endTime, Integer conversationId, boolean isSkipRead) throws UnsupportedEncodingException {
+    public String getMessages(Contact contact, Channel channel, Long startTime, Long endTime, Integer conversationId, boolean isSkipRead) throws UnsupportedEncodingException {
         String params = "";
         if (contact != null || channel != null) {
             params = isSkipRead ? "skipRead=" + isSkipRead + "&startIndex=0&pageSize=50" + "&" : "startIndex=0&pageSize=50&";
@@ -666,7 +678,7 @@ public String getMessages(Contact contact, Channel channel, Long startTime, Long
         }
         params = params + "&" + "deletedGroupIncluded=true";
 
-        if(!TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getCategoryName())){
+        if (!TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getCategoryName())) {
             params = params + "&category=" + MobiComUserPreference.getInstance(context).getCategoryName();
         }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageIntentService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageIntentService.java
index 7d512bea..c5761ebd 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageIntentService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageIntentService.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Handler;
+import android.os.Process;
 import android.support.annotation.NonNull;
 import android.support.v4.app.JobIntentService;
 
@@ -44,10 +45,15 @@ static public void enqueueWork(Context context, Intent work, Handler handler) {
     protected void onHandleWork(@NonNull Intent intent) {
         messageClientService = new MessageClientService(MessageIntentService.this);
         final Message message = (Message) GsonUtils.getObjectFromJson(intent.getStringExtra(MobiComKitConstants.MESSAGE_JSON_INTENT), Message.class);
-        Thread thread = new Thread(new MessageSender(message, uploadQueueMap.get(message.getCreatedAtTime())));
-        thread.start();
-    }
 
+        try {
+            Thread thread = new Thread(new MessageSender(message, uploadQueueMap.get(message.getCreatedAtTime())));
+            thread.setPriority(Process.THREAD_PRIORITY_BACKGROUND);
+            thread.start();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
 
     private class MessageSender implements Runnable {
         private Message message;
@@ -69,5 +75,4 @@ public void run() {
             }
         }
     }
-
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageListTask.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageListTask.java
index 0601f8e3..e12127d1 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageListTask.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MessageListTask.java
@@ -7,11 +7,13 @@
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.exception.ApplozicException;
 import com.applozic.mobicomkit.listners.MessageListHandler;
+import com.applozic.mobicommons.commons.core.utils.DateUtils;
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.contact.Contact;
 
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
+import java.util.Date;
 import java.util.List;
 
 /**
@@ -50,6 +52,60 @@ public MessageListTask(Context context, String searchString, Contact contact, Ch
             } else {
                 messageList = new MobiComConversationService(context.get()).getMessages(startTime, endTime, contact, channel, null);
             }
+
+            if (messageList == null && exception == null) {
+                exception = new ApplozicException("Some internal error occurred");
+            }
+
+            if (isForMessageList) {
+                List<String> recList = new ArrayList<String>();
+                List<Message> messages = new ArrayList<Message>();
+
+                if (messageList != null) {
+                    for (Message message : messageList) {
+                        if ((message.getGroupId() == null || message.getGroupId() == 0) && !recList.contains(message.getContactIds())) {
+                            recList.add(message.getContactIds());
+                            messages.add(message);
+                        } else if (message.getGroupId() != null && !recList.contains("group" + message.getGroupId())) {
+                            recList.add("group" + message.getGroupId());
+                            messages.add(message);
+                        }
+                    }
+                    if (!messageList.isEmpty()) {
+                        MobiComUserPreference.getInstance(context.get()).setStartTimeForPagination(messageList.get(messageList.size() - 1).getCreatedAtTime());
+                    }
+                    return messages;
+                }
+            } else {
+                List<Message> mergedList = new ArrayList<>();
+
+                if (messageList != null && !messageList.isEmpty()) {
+
+                    mergedList.add(getDateMessage(messageList.get(0)));
+
+                    for (int i = 0; i < messageList.size(); i++) {
+                        if (i == 0) {
+                            mergedList.add(messageList.get(0));
+                            continue;
+                        }
+
+                        long dayDifference = DateUtils.daysBetween(new Date(messageList.get(i - 1).getCreatedAtTime()), new Date(messageList.get(i).getCreatedAtTime()));
+
+                        if (dayDifference >= 1) {
+                            Message message = getDateMessage(messageList.get(i));
+
+                            if (!mergedList.contains(message)) {
+                                mergedList.add(message);
+                            }
+                        }
+
+                        if (!mergedList.contains(messageList.get(i))) {
+                            mergedList.add(messageList.get(i));
+                        }
+                    }
+                    return mergedList;
+                }
+            }
         } catch (Exception e) {
             exception = new ApplozicException(e.getMessage());
         }
@@ -59,34 +115,16 @@ public MessageListTask(Context context, String searchString, Contact contact, Ch
     @Override
     protected void onPostExecute(List<Message> messageList) {
         super.onPostExecute(messageList);
-        if (messageList == null && exception == null) {
-            exception = new ApplozicException("Some internal error occurred");
-        }
-        List<String> recList = new ArrayList<String>();
-        List<Message> messages = new ArrayList<Message>();
-
-        if (isForMessageList) {
-            if (messageList != null) {
-                for (Message message : messageList) {
-                    if ((message.getGroupId() == null || message.getGroupId() == 0) && !recList.contains(message.getContactIds())) {
-                        recList.add(message.getContactIds());
-                        messages.add(message);
-                    } else if (message.getGroupId() != null && !recList.contains("group" + message.getGroupId())) {
-                        recList.add("group" + message.getGroupId());
-                        messages.add(message);
-                    }
-                }
-                if (!messageList.isEmpty()) {
-                    MobiComUserPreference.getInstance(context.get()).setStartTimeForPagination(messageList.get(messageList.size() - 1).getCreatedAtTime());
-                }
-            }
-        }
+
         if (handler != null) {
-            if (isForMessageList) {
-                handler.onResult(messages, exception);
-            } else {
-                handler.onResult(messageList, exception);
-            }
+            handler.onResult(messageList, exception);
         }
     }
+
+    private Message getDateMessage(Message message) {
+        Message firstDateMessage = new Message();
+        firstDateMessage.setTempDateType(Short.valueOf("100"));
+        firstDateMessage.setCreatedAtTime(message.getCreatedAtTime());
+        return firstDateMessage;
+    }
 }
\ No newline at end of file
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComConversationService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComConversationService.java
index a17130a4..009d8c06 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComConversationService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComConversationService.java
@@ -9,6 +9,7 @@
 import android.support.v4.content.LocalBroadcastManager;
 import android.text.TextUtils;
 
+import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.MobiComKitClientService;
 import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
@@ -63,6 +64,7 @@
     public static final int UPLOAD_CANCELLED = 3;
     public static final int UPLOAD_COMPLETED = 4;
     public static final int MESSAGE_SENT = 5;
+    private boolean isHideActionMessage = false;
 
 
     public MobiComConversationService(Context context) {
@@ -72,6 +74,7 @@ public MobiComConversationService(Context context) {
         this.baseContactService = new AppContactService(context);
         this.conversationService = ConversationService.getInstance(context);
         this.channelService = ChannelService.getInstance(context);
+        this.isHideActionMessage = ApplozicClient.getInstance(context).isActionMessagesHidden();
         this.sharedPreferences = context.getSharedPreferences(MobiComKitClientService.getApplicationKey(context), context.MODE_PRIVATE);
     }
 
@@ -110,9 +113,9 @@ public void sendMessage(Message message, MediaUploadProgressHandler handler) {
         if (!message.hasAttachment()) {
             e = new ApplozicException("Message does not have any attachment");
             if (handler != null) {
-                handler.onUploadStarted(e);
-                handler.onProgressUpdate(0, e);
-                handler.onCancelled(e);
+                handler.onUploadStarted(e, null);
+                handler.onProgressUpdate(0, e, null);
+                handler.onCancelled(e, null);
             }
         }
         sendMessage(message, handler, MessageIntentService.class);
@@ -241,6 +244,9 @@ public void sendMessage(Message message, MediaUploadProgressHandler handler) {
                     if (Message.MetaDataType.HIDDEN.getValue().equals(message.getMetaDataValueForKey(Message.MetaDataType.KEY.getValue())) || Message.MetaDataType.PUSHNOTIFICATION.getValue().equals(message.getMetaDataValueForKey(Message.MetaDataType.KEY.getValue()))) {
                         continue;
                     }
+                    if (isHideActionMessage && message.isActionMessage()) {
+                        message.setHidden(true);
+                    }
                     if (messageDatabaseService.isMessagePresent(message.getKeyString(), Message.ReplyMessage.HIDE_MESSAGE.getValue())) {
                         messageDatabaseService.updateMessageReplyType(message.getKeyString(), Message.ReplyMessage.NON_HIDDEN.getValue());
                     } else {
@@ -561,40 +567,48 @@ public void read(Contact contact, Channel channel) {
 
     private void handleState(android.os.Message message, MediaUploadProgressHandler progressHandler) {
         if (message != null) {
-            Bundle b = message.getData();
+            Bundle bundle = message.getData();
             String e = null;
-            if (b != null) {
-                e = b.getString("error");
+            String oldMessageKey = null;
+            if (bundle != null) {
+                e = bundle.getString("error");
+                oldMessageKey = bundle.getString(MobiComKitConstants.OLD_MESSAGE_KEY_INTENT_EXTRA);
             }
+
             switch (message.what) {
                 case UPLOAD_STARTED:
                     if (progressHandler != null) {
-                        progressHandler.onUploadStarted(e != null ? new ApplozicException(e) : null);
+                        progressHandler.onUploadStarted(e != null ? new ApplozicException(e) : null, oldMessageKey);
                     }
                     break;
 
                 case UPLOAD_PROGRESS:
                     if (progressHandler != null) {
-                        progressHandler.onProgressUpdate(message.arg1, e != null ? new ApplozicException(e) : null);
+                        progressHandler.onProgressUpdate(message.arg1, e != null ? new ApplozicException(e) : null, oldMessageKey);
                     }
                     break;
 
                 case UPLOAD_COMPLETED:
                     if (progressHandler != null) {
-                        progressHandler.onCompleted(e != null ? new ApplozicException(e) : null);
+                        progressHandler.onCompleted(e != null ? new ApplozicException(e) : null, oldMessageKey);
                     }
                     break;
 
                 case UPLOAD_CANCELLED:
                     if (progressHandler != null) {
-                        progressHandler.onCancelled(e != null ? new ApplozicException(e) : null);
+                        progressHandler.onCancelled(e != null ? new ApplozicException(e) : null, oldMessageKey);
                     }
                     break;
 
                 case MESSAGE_SENT:
-                    if (b != null) {
+                    if (bundle != null) {
                         if (progressHandler != null) {
-                            progressHandler.onSent(messageDatabaseService.getMessage(b.getString("message")));
+                            Message messageObject = messageDatabaseService.getMessage(bundle.getString(MobiComKitConstants.MESSAGE_INTENT_EXTRA));
+                            String messageJson = bundle.getString(MobiComKitConstants.MESSAGE_JSON_INTENT_EXTRA);
+                            if (messageObject == null) {
+                                messageObject = (Message) GsonUtils.getObjectFromJson(messageJson, Message.class);
+                            }
+                            progressHandler.onSent(messageObject, oldMessageKey);
                         }
                     }
                     break;
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComMessageService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComMessageService.java
index 47cc411c..59566a36 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComMessageService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/MobiComMessageService.java
@@ -60,6 +60,7 @@
     protected BaseContactService baseContactService;
     protected UserService userService;
     protected FileClientService fileClientService;
+    private boolean isHideActionMessage;
 
     public MobiComMessageService(Context context, Class messageIntentServiceClass) {
         this.context = context;
@@ -71,9 +72,10 @@ public MobiComMessageService(Context context, Class messageIntentServiceClass) {
         this.baseContactService = new AppContactService(context);
         fileClientService = new FileClientService(context);
         this.userService = UserService.getInstance(context);
+        isHideActionMessage = ApplozicClient.getInstance(context).isActionMessagesHidden();
     }
 
-    public Message processMessage(final Message messageToProcess, String tofield) {
+    public Message processMessage(final Message messageToProcess, String tofield, int index) {
         try {
             if (!TextUtils.isEmpty(ApplozicClient.getInstance(context).getMessageMetaDataServiceName())) {
                 Class serviceName = Class.forName(ApplozicClient.getInstance(context).getMessageMetaDataServiceName());
@@ -84,7 +86,7 @@ public Message processMessage(final Message messageToProcess, String tofield) {
                     MessageIntentService.enqueueWork(context, intentService, null);
                     return null;
                 } else if (Message.MetaDataType.PUSHNOTIFICATION.getValue().equals(messageToProcess.getMetaDataValueForKey(Message.MetaDataType.KEY.getValue()))) {
-                    BroadcastService.sendNotificationBroadcast(context, messageToProcess);
+                    BroadcastService.sendNotificationBroadcast(context, messageToProcess, index);
                     intentService.putExtra(MobiComKitConstants.MESSAGE, messageToProcess);
                     intentService.putExtra(MobiComKitConstants.PUSH_NOTIFICATION, true);
                     MessageIntentService.enqueueWork(context, intentService, null);
@@ -131,7 +133,7 @@ public Message processMessage(final Message messageToProcess, String tofield) {
         }
 
         if (message.getType().equals(Message.MessageType.MT_INBOX.getValue())) {
-            addMTMessage(message);
+            addMTMessage(message, index);
         } else if (message.getType().equals(Message.MessageType.MT_OUTBOX.getValue())) {
             BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.SYNC_MESSAGE.toString(), message);
             messageDatabaseService.createMessage(message);
@@ -142,7 +144,6 @@ public Message processMessage(final Message messageToProcess, String tofield) {
                 Utils.printLog(context, TAG, "Got notifications for Video call...");
                 VideoCallNotificationHelper helper = new VideoCallNotificationHelper(context);
                 helper.handleVideoCallNotificationMessages(message);
-
             }
         }
         Utils.printLog(context, TAG, "processing message: " + message);
@@ -167,7 +168,7 @@ public Message prepareMessage(Message messageToProcess, String tofield) {
         return message;
     }
 
-    public Contact addMTMessage(Message message) {
+    public Contact addMTMessage(Message message, int index) {
         MobiComUserPreference userPreferences = MobiComUserPreference.getInstance(context);
         Contact receiverContact = null;
         message.processContactIds(context);
@@ -181,6 +182,10 @@ public Contact addMTMessage(Message message) {
             message.setMessage(PersonalizedMessage.prepareMessageFromTemplate(message.getMessage(), receiverContact));
         }
 
+        if (isHideActionMessage && message.isActionMessage()) {
+            message.setHidden(true);
+        }
+
         messageDatabaseService.createMessage(message);
 
         //Check if we are........container is already opened...don't send broadcast
@@ -202,25 +207,25 @@ public Contact addMTMessage(Message message) {
 
         } else if (message.isVideoCallMessage()) {
             BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.SYNC_MESSAGE.toString(), message);
-            VideoCallNotificationHelper.buildVideoCallNotification(context, message);
+            VideoCallNotificationHelper.buildVideoCallNotification(context, message, index);
         } else if (!isContainerOpened) {
-            if (message.isConsideredForCount()) {
-                if (message.getTo() != null && message.getGroupId() == null) {
+            if (message.isConsideredForCount() && !message.isHidden()) {
+                if (message.getTo() != null && message.getGroupId() == null && !(isHideActionMessage && message.isActionMessage())) {
                     messageDatabaseService.updateContactUnreadCount(message.getTo());
                     BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.SYNC_MESSAGE.toString(), message);
                     Contact contact = new ContactDatabase(context).getContactById(message.getTo());
                     if (contact != null && !contact.isNotificationMuted()) {
-                        sendNotification(message);
+                        sendNotification(message, index);
                     }
                 }
                 if (message.getGroupId() != null && !Message.GroupMessageMetaData.FALSE.getValue().equals(message.getMetaDataValueForKey(Message.GroupMessageMetaData.KEY.getValue()))) {
-                    if (!Message.ContentType.CHANNEL_CUSTOM_MESSAGE.getValue().equals(message.getContentType())) {
+                    if (!Message.ContentType.CHANNEL_CUSTOM_MESSAGE.getValue().equals(message.getContentType()) && !(isHideActionMessage && message.isActionMessage())) {
                         messageDatabaseService.updateChannelUnreadCount(message.getGroupId());
                     }
                     BroadcastService.sendMessageUpdateBroadcast(context, BroadcastService.INTENT_ACTIONS.SYNC_MESSAGE.toString(), message);
                     Channel currentChannel = ChannelService.getInstance(context).getChannelInfo(message.getGroupId());
                     if (currentChannel != null && !currentChannel.isNotificationMuted()) {
-                        sendNotification(message);
+                        sendNotification(message, index);
                     }
                 }
                 MobiComUserPreference.getInstance(context).setNewMessageFlag(true);
@@ -236,14 +241,20 @@ public Contact addMTMessage(Message message) {
         return receiverContact;
     }
 
-    public void sendNotification(Message message) {
-        BroadcastService.sendNotificationBroadcast(context, message);
+    public void sendNotification(Message message, int index) {
+        if (isHideActionMessage && message.isActionMessage()) {
+            return;
+        }
+
+        BroadcastService.sendNotificationBroadcast(context, message, index);
         Intent intent = new Intent(MobiComKitConstants.APPLOZIC_UNREAD_COUNT);
         LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
     }
 
     public synchronized void syncMessages() {
         final MobiComUserPreference userpref = MobiComUserPreference.getInstance(context);
+        boolean syncChannel = false;
+        boolean syncChannelForMetadata = false;
         Utils.printLog(context, TAG, "Starting syncMessages for lastSyncTime: " + userpref.getLastSyncTime());
         SyncMessageFeed syncMessageFeed = messageClientService.getMessageFeed(userpref.getLastSyncTime(), false);
         if (syncMessageFeed == null) {
@@ -266,14 +277,24 @@ public synchronized void syncMessages() {
 
             for (final Message message : messageList) {
                 if (Message.ContentType.CHANNEL_CUSTOM_MESSAGE.getValue().equals(message.getContentType())) {
-                    ChannelService.getInstance(context).syncChannels();
+                    if (message.isGroupMetaDataUpdated()) {
+                        syncChannelForMetadata = true;
+                    } else {
+                        syncChannel = true;
+                    }
                     //Todo: fix this, what if there are mulitple messages.
                     ChannelService.isUpdateTitle = true;
                 }
-                processMessage(message, message.getTo());
+                processMessage(message, message.getTo(), messageList.indexOf(message));
                 MobiComUserPreference.getInstance(context).setLastInboxSyncTime(message.getCreatedAtTime());
             }
 
+            if (syncChannel) {
+                ChannelService.getInstance(context).syncChannels(false);
+            }
+            if (syncChannelForMetadata) {
+                ChannelService.getInstance(context).syncChannels(true);
+            }
             updateDeliveredStatus(syncMessageFeed.getDeliveredMessageKeys());
             userpref.setLastSyncTime(String.valueOf(syncMessageFeed.getLastSyncTime()));
         }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/SyncCallService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/SyncCallService.java
index 647d317f..dd4e8567 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/SyncCallService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/SyncCallService.java
@@ -48,7 +48,7 @@ private SyncCallService(Context context) {
         this.messageDatabaseService = new MessageDatabaseService(context);
     }
 
-    public synchronized static SyncCallService getInstance(Context context) {
+    public static SyncCallService getInstance(Context context) {
         if (syncCallService == null) {
             syncCallService = new SyncCallService(context.getApplicationContext());
         }
@@ -63,7 +63,6 @@ public synchronized void updateDeliveryStatus(String key) {
     public synchronized void updateReadStatus(String key) {
         mobiComMessageService.updateDeliveryStatus(key, true);
         refreshView = true;
-
     }
 
     public synchronized List<Message> getLatestMessagesGroupByPeople(String searchString) {
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/database/MessageDatabaseService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/database/MessageDatabaseService.java
index 1d066f15..7da9a8ff 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/database/MessageDatabaseService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/database/MessageDatabaseService.java
@@ -9,6 +9,7 @@
 import android.text.TextUtils;
 import android.util.Log;
 
+import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.MobiComKitClientService;
 import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
@@ -45,11 +46,13 @@
     Context context = null;
     private MobiComUserPreference userPreferences;
     private MobiComDatabaseHelper dbHelper;
+    private boolean hideActionMessages = false;
 
     public MessageDatabaseService(Context context) {
         this.context = context.getApplicationContext();
         this.userPreferences = MobiComUserPreference.getInstance(context);
         this.dbHelper = MobiComDatabaseHelper.getInstance(context);
+        hideActionMessages = ApplozicClient.getInstance(context).isActionMessagesHidden();
     }
 
     public static Message getMessage(Cursor cursor) {
@@ -565,6 +568,8 @@ public synchronized long createSingleMessage(final Message message) {
             values.put(MobiComDatabaseHelper.CONVERSATION_ID, message.getConversationId());
             values.put(MobiComDatabaseHelper.TOPIC_ID, message.getTopicId());
             values.put(MobiComDatabaseHelper.HIDDEN, message.isHidden());
+            boolean hidden = (hideActionMessages && message.isActionMessage()) || message.isHidden();
+            values.put(MobiComDatabaseHelper.HIDDEN, hidden);
             if (message.getGroupId() != null) {
                 values.put(MobiComDatabaseHelper.CHANNEL_KEY, message.getGroupId());
             }
@@ -613,38 +618,47 @@ public void updateSmsType(String smsKeyString, Message.MessageType messageType)
     }
 
     public int updateMessageDeliveryReportForContact(String contactId, boolean markRead) {
-        SQLiteDatabase database = dbHelper.getWritableDatabase();
-        ContentValues values = new ContentValues();
-        String whereClause = "contactNumbers= '" + contactId + "' and ";
-        values.put("delivered", "1");
-        if (markRead) {
-            whereClause = whereClause + "status not in (5)";
-            values.put("status", String.valueOf(Message.Status.DELIVERED_AND_READ.getValue()));
-        } else {
-            whereClause = whereClause + "status not in (4,5)";
-            values.put("status", String.valueOf(Message.Status.DELIVERED.getValue()));
+        try {
+            SQLiteDatabase database = dbHelper.getWritableDatabase();
+            ContentValues values = new ContentValues();
+            String whereClause = "contactNumbers= '" + contactId + "' and ";
+            values.put("delivered", "1");
+            if (markRead) {
+                whereClause = whereClause + "status not in (5)";
+                values.put("status", String.valueOf(Message.Status.DELIVERED_AND_READ.getValue()));
+            } else {
+                whereClause = whereClause + "status not in (4,5)";
+                values.put("status", String.valueOf(Message.Status.DELIVERED.getValue()));
+            }
+            whereClause = whereClause + " and type=5 ";
+            int rows = database.update("sms", values, whereClause, null);
+            dbHelper.close();
+            return rows;
+        } catch (Throwable t) {
+
         }
-        whereClause = whereClause + " and type=5 ";
-        int rows = database.update("sms", values, whereClause, null);
-        dbHelper.close();
-        return rows;
+        return 0;
     }
 
     public void updateMessageDeliveryReportForContact(String messageKeyString, String contactNumber, boolean markRead) {
-        SQLiteDatabase database = dbHelper.getWritableDatabase();
-        ContentValues values = new ContentValues();
-        if (markRead) {
-            values.put("status", String.valueOf(Message.Status.DELIVERED_AND_READ.getValue()));
-        } else {
-            values.put("status", String.valueOf(Message.Status.DELIVERED.getValue()));
-        }
-        values.put("delivered", "1");
-        if (TextUtils.isEmpty(contactNumber)) {
-            database.update("sms", values, "keyString='" + messageKeyString + "' and type = 5", null);
-        } else {
-            database.update("sms", values, "keyString='" + messageKeyString + "' and contactNumbers='" + contactNumber + "' and type = 5", null);
+        try {
+            SQLiteDatabase database = dbHelper.getWritableDatabase();
+            ContentValues values = new ContentValues();
+            if (markRead) {
+                values.put("status", String.valueOf(Message.Status.DELIVERED_AND_READ.getValue()));
+            } else {
+                values.put("status", String.valueOf(Message.Status.DELIVERED.getValue()));
+            }
+            values.put("delivered", "1");
+            if (TextUtils.isEmpty(contactNumber)) {
+                database.update("sms", values, "keyString='" + messageKeyString + "' and type = 5", null);
+            } else {
+                database.update("sms", values, "keyString='" + messageKeyString + "' and contactNumbers='" + contactNumber + "' and type = 5", null);
+            }
+            dbHelper.close();
+        } catch (Throwable t) {
+
         }
-        dbHelper.close();
     }
 
     public void updateMessageSyncStatus(Message message, String keyString) {
@@ -976,54 +990,59 @@ public int updateReadStatusForChannel(String channelKey) {
         if (parentGroupKey != null && parentGroupKey != 0) {
             return getLatestGroupMessages(createdAt, searchText, parentGroupKey);
         } else {
-            String createdAtClause = "";
-            if (createdAt != null && createdAt > 0) {
-                createdAtClause = " and m1.createdAt < " + createdAt;
-            }
-            createdAtClause += " and m1.deleted = 0 ";
+            Cursor cursor = null;
+            SQLiteDatabase db = dbHelper.getWritableDatabase();
 
-            String messageTypeClause = "";
-            String messageTypeJoinClause = "";
-            String searchCaluse = "";
-            String categoryClause = " left join channel ch on ch.channelKey = m1.channelKey ";
+            if (!TextUtils.isEmpty(searchText)) {
+                String searchQuery = "select * from sms where deleted = 0 and messageContentType not in (10,11,102,103) and replyMessage not in (2) and type not in (6,7) and hidden = 0 and message like +'%" + searchText.replaceAll("'", "''") + "%' order by createdAt DESC";
+                cursor = db.rawQuery(searchQuery, null);
+            } else {
+                String createdAtClause = "";
+                if (createdAt != null && createdAt > 0) {
+                    createdAtClause = " and m1.createdAt < " + createdAt;
+                }
+                createdAtClause += " and m1.deleted = 0 ";
 
-            MobiComUserPreference userPreferences = MobiComUserPreference.getInstance(context);
-            String categoryName = userPreferences.getCategoryName();
+                String messageTypeClause = "";
+                String messageTypeJoinClause = "";
+                String searchCaluse = "";
+                String categoryClause = " left join channel ch on ch.channelKey = m1.channelKey ";
 
-            if (!userPreferences.isDisplayCallRecordEnable()) {
-                messageTypeClause = " and m1.type != " + Message.MessageType.CALL_INCOMING.getValue() + " and m1.type != " + Message.MessageType.CALL_OUTGOING.getValue();
-                messageTypeJoinClause = " and m1.type = m2.type";
-            }
+                MobiComUserPreference userPreferences = MobiComUserPreference.getInstance(context);
+                String categoryName = userPreferences.getCategoryName();
 
-            if (!TextUtils.isEmpty(searchText)) {
-                searchCaluse += " and m1.message like '%" + searchText.replaceAll("'", "''") + "%' ";
-            }
+                if (!userPreferences.isDisplayCallRecordEnable()) {
+                    messageTypeClause = " and m1.type != " + Message.MessageType.CALL_INCOMING.getValue() + " and m1.type != " + Message.MessageType.CALL_OUTGOING.getValue();
+                    messageTypeJoinClause = " and m1.type = m2.type";
+                }
 
-            String hiddenType = " and m1.messageContentType not in (" + Message.ContentType.HIDDEN.getValue()
-                    + "," + Message.ContentType.VIDEO_CALL_NOTIFICATION_MSG.getValue() + ") AND m1.hidden = 0 AND m1.replyMessage not in (" + Message.ReplyMessage.HIDE_MESSAGE.getValue() + ")";
+                if (!TextUtils.isEmpty(searchText)) {
+                    searchCaluse += " and m1.message like '%" + searchText.replaceAll("'", "''") + "%' ";
+                }
 
-            SQLiteDatabase db = dbHelper.getWritableDatabase();
-            String rowQuery = "select m1.* from sms m1 left outer join sms m2 on (m1.createdAt < m2.createdAt"
-                    + " and m1.channelKey = m2.channelKey and m1.contactNumbers = m2.contactNumbers and m1.deleted = m2.deleted and  m1.messageContentType = m2.messageContentType" + messageTypeJoinClause + " ) ";
+                String hiddenType = " and m1.messageContentType not in (" + Message.ContentType.HIDDEN.getValue()
+                        + "," + Message.ContentType.VIDEO_CALL_NOTIFICATION_MSG.getValue() + ") AND m1.hidden = 0 AND m1.replyMessage not in (" + Message.ReplyMessage.HIDE_MESSAGE.getValue() + ")";
 
-            if (!TextUtils.isEmpty(categoryName)) {
+                String rowQuery = "select m1.* from sms m1 left outer join sms m2 on (m1.createdAt < m2.createdAt"
+                        + " and m1.channelKey = m2.channelKey and m1.contactNumbers = m2.contactNumbers and m1.deleted = m2.deleted and  m1.messageContentType = m2.messageContentType and m1.hidden = m2.hidden " + messageTypeJoinClause + " ) ";
 
-                rowQuery = rowQuery + categoryClause;
-            }
+                if (!TextUtils.isEmpty(categoryName)) {
+                    rowQuery = rowQuery + categoryClause;
+                }
 
-            rowQuery = rowQuery + "where m2.createdAt is null  ";
+                rowQuery = rowQuery + "where m2.createdAt is null  ";
 
-            if (!TextUtils.isEmpty(categoryName)) {
+                if (!TextUtils.isEmpty(categoryName)) {
 
-                rowQuery = rowQuery + "and ch.AL_CATEGORY = '" + categoryName + "'";
+                    rowQuery = rowQuery + "and ch.AL_CATEGORY = '" + categoryName + "'";
 
-            }
+                }
 
-            rowQuery = rowQuery + createdAtClause + searchCaluse + hiddenType + messageTypeClause + " order by m1.createdAt desc";
+                rowQuery = rowQuery + createdAtClause + searchCaluse + hiddenType + messageTypeClause + " order by m1.createdAt desc";
+                cursor = db.rawQuery(rowQuery, null);
+            }
 
-            final Cursor cursor = db.rawQuery(rowQuery, null);
             List<Message> messageList = getLatestMessageList(cursor);
-
             dbHelper.close();
             return messageList;
         }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/schedule/MessageSenderTimerTask.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/schedule/MessageSenderTimerTask.java
index 0359e25b..64655572 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/schedule/MessageSenderTimerTask.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/conversation/schedule/MessageSenderTimerTask.java
@@ -27,6 +27,6 @@ public MessageSenderTimerTask(MobiComMessageService mobiComMessageService, Messa
     @Override
     public void run() {
         Log.i(TAG, "Sending message to: " + to + " from MessageSenderTimerTask");
-        mobiComMessageService.processMessage(message, to);
+        mobiComMessageService.processMessage(message, to, 0);
     }
 }
\ No newline at end of file
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MobiComPushReceiver.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MobiComPushReceiver.java
index 19e08524..b6850e62 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MobiComPushReceiver.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/MobiComPushReceiver.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
+import android.os.Process;
 import android.text.TextUtils;
 import android.util.Log;
 
@@ -307,13 +308,6 @@ public static void processMessage(Context context, Bundle bundle, Map<String, St
                 addPushNotificationId(syncMessageResponse.getId());
                 Message messageObj = syncMessageResponse.getMessage();
 
-                try {
-                    if (messageObj.isGroupMetaDataUpdated()) {
-                        ChannelService.getInstance(context).syncChannels(true);
-                    }
-                } catch (Exception e) {
-                }
-
                 if (!TextUtils.isEmpty(messageObj.getKeyString())) {
                     syncCallService.syncMessages(messageObj.getKeyString());
                 } else {
@@ -460,12 +454,14 @@ public static void processMessage(Context context, Bundle bundle, Map<String, St
     public static void processMessageAsync(final Context context, final Bundle bundle) {
         if (MobiComUserPreference.getInstance(context).isLoggedIn()) {
 
-            new Thread(new Runnable() {
+            Thread t = new Thread(new Runnable() {
                 @Override
                 public void run() {
                     processMessage(context, bundle);
                 }
-            }).start();
+            });
+            t.setPriority(Process.THREAD_PRIORITY_BACKGROUND);
+            t.start();
         }
     }
 
@@ -476,12 +472,14 @@ public static void processMessageAsync(final Context context, final Intent inten
     public static void processMessageAsync(final Context context, final Map<String, String> data) {
         if (MobiComUserPreference.getInstance(context).isLoggedIn()) {
 
-            new Thread(new Runnable() {
+            Thread t = new Thread(new Runnable() {
                 @Override
                 public void run() {
                     processMessage(context, data);
                 }
-            }).start();
+            });
+            t.setPriority(Process.THREAD_PRIORITY_BACKGROUND);
+            t.start();
         }
     }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/NotificationChannels.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/NotificationChannels.java
new file mode 100644
index 00000000..8474593f
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/NotificationChannels.java
@@ -0,0 +1,208 @@
+package com.applozic.mobicomkit.api.notification;
+
+import android.app.NotificationChannel;
+import android.app.NotificationManager;
+import android.content.Context;
+import android.graphics.Color;
+import android.media.AudioAttributes;
+import android.media.RingtoneManager;
+import android.net.Uri;
+import android.os.Build;
+import android.support.annotation.RequiresApi;
+import android.text.TextUtils;
+
+import com.applozic.mobicomkit.Applozic;
+import com.applozic.mobicomkit.ApplozicClient;
+import com.applozic.mobicomkit.api.MobiComKitConstants;
+import com.applozic.mobicomkit.exception.ApplozicException;
+import com.applozic.mobicommons.commons.core.utils.Utils;
+
+/**
+ * Please remember to increment the NOTIFICATION_CHANNEL_VERSION if any change is made in this class.
+ * It is mandatory to increment the version or the update in the Notification channels will fail.
+ */
+
+public class NotificationChannels {
+
+    //increment this version if changes in notification channel is made
+    public static int NOTIFICATION_CHANNEL_VERSION = 1;
+
+    private Context context;
+    private NotificationManager mNotificationManager;
+    private String soundFilePath;
+    private String TAG = getClass().getSimpleName();
+
+    public NotificationChannels(Context context, String soundFilePath) {
+        this.context = context;
+        this.soundFilePath = soundFilePath;
+        this.mNotificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
+    }
+
+    @RequiresApi(api = Build.VERSION_CODES.O)
+    public void prepareNotificationChannels() {
+        if (Applozic.getInstance(context).getNotificationChannelVersion() < NOTIFICATION_CHANNEL_VERSION) {
+            if (isNotificationChannelCreated()) {
+                deleteNotificationChannel();
+            }
+            if (isSilentChannelCreated()) {
+                deleteSilentNotificationChannel();
+            }
+            if (isAppChannelCreated()) {
+                Applozic.getInstance(context).setCustomNotificationSound(null);
+                soundFilePath = null;
+                deleteAppNotificationChannel();
+            }
+            if (TextUtils.isEmpty(soundFilePath)) {
+                createNotificationChannel();
+            } else {
+                try {
+                    createAppNotificationChannel();
+                } catch (ApplozicException e) {
+                    e.printStackTrace();
+                }
+            }
+            createSilentNotificationChannel();
+
+            Applozic.getInstance(context).setNotificationChannelVersion(NOTIFICATION_CHANNEL_VERSION);
+        }
+    }
+
+    @RequiresApi(api = Build.VERSION_CODES.O)
+    public void deleteAllChannels() {
+        if (isSilentChannelCreated()) {
+            deleteSilentNotificationChannel();
+        }
+
+        if (isNotificationChannelCreated()) {
+            deleteNotificationChannel();
+        }
+
+        if (isAppChannelCreated()) {
+            deleteAppNotificationChannel();
+        }
+    }
+
+    public String getDefaultChannelId(boolean mute) {
+        if (mute) {
+            return MobiComKitConstants.AL_SILENT_NOTIFICATION;
+        } else {
+            if (TextUtils.isEmpty(soundFilePath)) {
+                return MobiComKitConstants.AL_PUSH_NOTIFICATION;
+            }
+        }
+        return MobiComKitConstants.AL_APP_NOTIFICATION;
+    }
+
+    @RequiresApi(api = Build.VERSION_CODES.O)
+    private synchronized void createNotificationChannel() {
+        CharSequence name = MobiComKitConstants.PUSH_NOTIFICATION_NAME;
+        int importance = NotificationManager.IMPORTANCE_HIGH;
+
+        if (mNotificationManager != null && mNotificationManager.getNotificationChannel(MobiComKitConstants.AL_PUSH_NOTIFICATION) == null) {
+            NotificationChannel mChannel = new NotificationChannel(MobiComKitConstants.AL_PUSH_NOTIFICATION, name, importance);
+            mChannel.enableLights(true);
+            mChannel.setLightColor(Color.GREEN);
+            mChannel.setShowBadge(ApplozicClient.getInstance(context).isUnreadCountBadgeEnabled());
+
+            if (ApplozicClient.getInstance(context).getVibrationOnNotification()) {
+                mChannel.enableVibration(true);
+                mChannel.setVibrationPattern(new long[]{100, 200, 300, 400, 500, 400, 300, 200, 400});
+            }
+
+            AudioAttributes audioAttributes = new AudioAttributes.Builder()
+                    .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
+                    .setUsage(AudioAttributes.USAGE_NOTIFICATION).build();
+            mChannel.setSound(TextUtils.isEmpty(soundFilePath) ? RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION) : Uri.parse(soundFilePath), audioAttributes);
+            mNotificationManager.createNotificationChannel(mChannel);
+            Utils.printLog(context, TAG, "Created notification channel");
+        }
+    }
+
+    @RequiresApi(api = Build.VERSION_CODES.O)
+    private synchronized void createAppNotificationChannel() throws ApplozicException {
+        CharSequence name = MobiComKitConstants.APP_NOTIFICATION_NAME;
+        int importance = NotificationManager.IMPORTANCE_HIGH;
+
+        if (mNotificationManager != null && mNotificationManager.getNotificationChannel(MobiComKitConstants.AL_APP_NOTIFICATION) == null) {
+            NotificationChannel mChannel = new NotificationChannel(MobiComKitConstants.AL_APP_NOTIFICATION, name, importance);
+            mChannel.enableLights(true);
+            mChannel.setLightColor(Color.GREEN);
+            mChannel.setShowBadge(ApplozicClient.getInstance(context).isUnreadCountBadgeEnabled());
+
+            if (ApplozicClient.getInstance(context).getVibrationOnNotification()) {
+                mChannel.enableVibration(true);
+                mChannel.setVibrationPattern(new long[]{100, 200, 300, 400, 500, 400, 300, 200, 400});
+            }
+
+            AudioAttributes audioAttributes = new AudioAttributes.Builder()
+                    .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
+                    .setUsage(AudioAttributes.USAGE_NOTIFICATION).build();
+
+            if (TextUtils.isEmpty(soundFilePath)) {
+                throw new ApplozicException("Custom sound path is required to create App notification channel. " +
+                        "Please set a sound path using Applozic.getInstance(context).setCustomNotificationSound(your-sound-file-path)");
+            }
+            mChannel.setSound(Uri.parse(soundFilePath), audioAttributes);
+            mNotificationManager.createNotificationChannel(mChannel);
+            Utils.printLog(context, TAG, "Created app notification channel");
+        }
+    }
+
+    @RequiresApi(api = Build.VERSION_CODES.O)
+    private synchronized void createSilentNotificationChannel() {
+        CharSequence name = MobiComKitConstants.SILENT_PUSH_NOTIFICATION;
+        int importance = NotificationManager.IMPORTANCE_LOW;
+        if (mNotificationManager != null && mNotificationManager.getNotificationChannel(MobiComKitConstants.AL_SILENT_NOTIFICATION) == null) {
+            NotificationChannel mChannel = new NotificationChannel(MobiComKitConstants.AL_SILENT_NOTIFICATION, name, importance);
+            mChannel.enableLights(true);
+            mChannel.setLightColor(Color.GREEN);
+            if (ApplozicClient.getInstance(context).isUnreadCountBadgeEnabled()) {
+                mChannel.setShowBadge(true);
+            } else {
+                mChannel.setShowBadge(false);
+            }
+
+            mNotificationManager.createNotificationChannel(mChannel);
+            Utils.printLog(context, TAG, "Created silent notification channel");
+        }
+    }
+
+    @RequiresApi(api = Build.VERSION_CODES.O)
+    private synchronized void deleteNotificationChannel() {
+        if (mNotificationManager != null) {
+            mNotificationManager.deleteNotificationChannel(MobiComKitConstants.AL_PUSH_NOTIFICATION);
+            Utils.printLog(context, TAG, "Deleted notification channel");
+        }
+    }
+
+    @RequiresApi(api = Build.VERSION_CODES.O)
+    private synchronized void deleteSilentNotificationChannel() {
+        if (mNotificationManager != null) {
+            mNotificationManager.deleteNotificationChannel(MobiComKitConstants.AL_SILENT_NOTIFICATION);
+            Utils.printLog(context, TAG, "Deleted silent notification channel");
+        }
+    }
+
+    @RequiresApi(api = Build.VERSION_CODES.O)
+    private synchronized void deleteAppNotificationChannel() {
+        if (mNotificationManager != null) {
+            mNotificationManager.deleteNotificationChannel(MobiComKitConstants.AL_APP_NOTIFICATION);
+            Utils.printLog(context, TAG, "Deleted app notification channel");
+        }
+    }
+
+    @RequiresApi(api = Build.VERSION_CODES.O)
+    private boolean isNotificationChannelCreated() {
+        return mNotificationManager != null && mNotificationManager.getNotificationChannel(MobiComKitConstants.AL_PUSH_NOTIFICATION) != null;
+    }
+
+    @RequiresApi(api = Build.VERSION_CODES.O)
+    private boolean isAppChannelCreated() {
+        return mNotificationManager != null && mNotificationManager.getNotificationChannel(MobiComKitConstants.AL_APP_NOTIFICATION) != null;
+    }
+
+    @RequiresApi(api = Build.VERSION_CODES.O)
+    private boolean isSilentChannelCreated() {
+        return mNotificationManager != null && mNotificationManager.getNotificationChannel(MobiComKitConstants.AL_SILENT_NOTIFICATION) != null;
+    }
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/NotificationService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/NotificationService.java
index 2c86b237..22c1ec42 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/NotificationService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/NotificationService.java
@@ -11,8 +11,8 @@
 import android.support.v4.app.NotificationCompat;
 import android.text.TextUtils;
 
+import com.applozic.mobicomkit.Applozic;
 import com.applozic.mobicomkit.ApplozicClient;
-import com.applozic.mobicomkit.api.MobiComKitClientService;
 import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.attachment.FileClientService;
@@ -21,15 +21,13 @@
 import com.applozic.mobicomkit.api.conversation.database.MessageDatabaseService;
 import com.applozic.mobicomkit.channel.service.ChannelService;
 import com.applozic.mobicomkit.contact.AppContactService;
+import com.applozic.mobicomkit.listners.AlConstantsHandler;
 import com.applozic.mobicommons.commons.core.utils.Utils;
-import com.applozic.mobicommons.commons.image.ImageUtils;
-import com.applozic.mobicommons.file.FileUtils;
 import com.applozic.mobicommons.json.GsonUtils;
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.channel.ChannelUtils;
 import com.applozic.mobicommons.people.contact.Contact;
 
-import java.io.File;
 import java.io.InputStream;
 import java.net.HttpURLConnection;
 import java.util.ArrayList;
@@ -57,6 +55,10 @@
     private AppContactService appContactService;
     private ApplozicClient applozicClient;
     private String activityToOpen;
+    private int notificationDisableThreshold = 0;
+    private NotificationChannels notificationChannels;
+    private String[] constArray = {MobiComKitConstants.LOCATION, MobiComKitConstants.AUDIO, MobiComKitConstants.VIDEO, MobiComKitConstants.ATTACHMENT};
+    private String notificationFilePath;
 
     public NotificationService(int iconResourceID, Context context, int wearable_action_label, int wearable_action_title, int wearable_send_icon) {
         this.context = context;
@@ -68,9 +70,17 @@ public NotificationService(int iconResourceID, Context context, int wearable_act
         this.appContactService = new AppContactService(context);
         this.activityToOpen = Utils.getMetaDataValue(context, "activity.open.on.notification");
         this.messageDatabaseService = new MessageDatabaseService(context);
+        this.notificationDisableThreshold = applozicClient.getNotificationMuteThreshold();
+        this.notificationFilePath = Applozic.getInstance(context).getCustomNotificationSound();
+
+        notificationChannels = new NotificationChannels(context, notificationFilePath);
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            notificationChannels.prepareNotificationChannels();
+        }
     }
 
-    public void notifyUser(Contact contact, Channel channel, Message message) {
+    public void notifyUser(Contact contact, Channel channel, Message message, int index) {
         if (ApplozicClient.getInstance(context).isNotificationDisabled()) {
             Utils.printLog(context, TAG, "Notification is disabled !!");
             return;
@@ -127,13 +137,13 @@ public void notifyUser(Contact contact, Channel channel, Message message) {
         PendingIntent pendingIntent = PendingIntent.getActivity(context, (int) (System.currentTimeMillis() & 0xfffffff),
                 intent, PendingIntent.FLAG_UPDATE_CURRENT);
 
+
         NotificationCompat.Builder mBuilder =
-                new NotificationCompat.Builder(context, MobiComKitConstants.AL_PUSH_NOTIFICATION)
+                new NotificationCompat.Builder(context, notificationChannels.getDefaultChannelId(muteNotifications(index)))
                         .setSmallIcon(smallIconResourceId)
                         .setCategory(NotificationCompat.CATEGORY_MESSAGE)
-                        .setPriority(NotificationCompat.PRIORITY_MAX)
+                        .setPriority(muteNotifications(index) ? NotificationCompat.PRIORITY_LOW : NotificationCompat.PRIORITY_HIGH)
                         .setWhen(System.currentTimeMillis());
-        mBuilder.setSound(TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getNotificationSoundFilePath()) ? RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION) : Uri.parse(MobiComUserPreference.getInstance(context).getNotificationSoundFilePath()));
         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
             mBuilder.setGroup(GROUP_KEY);
             mBuilder.setGroupSummary(true);
@@ -145,9 +155,12 @@ public void notifyUser(Contact contact, Channel channel, Message message) {
 
         mBuilder.setContentIntent(pendingIntent);
         mBuilder.setAutoCancel(true);
-        if (ApplozicClient.getInstance(context).getVibrationOnNotification()) {
+        if (ApplozicClient.getInstance(context).getVibrationOnNotification() && !muteNotifications(index)) {
             mBuilder.setVibrate(pattern);
         }
+        if (!muteNotifications(index)) {
+            mBuilder.setSound(TextUtils.isEmpty(notificationFilePath) ? RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION) : Uri.parse(notificationFilePath));
+        }
 
         NotificationCompat.InboxStyle inboxStyle =
                 new NotificationCompat.InboxStyle();
@@ -263,13 +276,13 @@ public CharSequence getNotificationTitle(int conversationCount, Contact contact,
     public CharSequence getMessageBody(Message message, int count, Channel channel, Contact contact) {
         String notificationText;
         if (message.getContentType() == Message.ContentType.LOCATION.getValue()) {
-            notificationText = MobiComKitConstants.LOCATION;
+            notificationText = getText(0);
         } else if (message.getContentType() == Message.ContentType.AUDIO_MSG.getValue()) {
-            notificationText = MobiComKitConstants.AUDIO;
+            notificationText = getText(1);
         } else if (message.getContentType() == Message.ContentType.VIDEO_MSG.getValue()) {
-            notificationText = MobiComKitConstants.VIDEO;
+            notificationText = getText(2);
         } else if (message.hasAttachment() && TextUtils.isEmpty(message.getMessage())) {
-            notificationText = MobiComKitConstants.ATTACHMENT;
+            notificationText = getText(3);
         } else {
             notificationText = message.getMessage();
         }
@@ -292,7 +305,7 @@ public CharSequence getMessageBody(Message message, int count, Channel channel,
     }
 
 
-    public void notifyUserForNormalMessage(Contact contact, Channel channel, Message message) {
+    public void notifyUserForNormalMessage(Contact contact, Channel channel, Message message, int index) {
         if (ApplozicClient.getInstance(context).isNotificationDisabled()) {
             Utils.printLog(context, TAG, "Notification is disabled");
             return;
@@ -330,13 +343,13 @@ public void notifyUserForNormalMessage(Contact contact, Channel channel, Message
         }
 
         if (message.getContentType() == Message.ContentType.LOCATION.getValue()) {
-            notificationText = MobiComKitConstants.LOCATION;
+            notificationText = getText(0);
         } else if (message.getContentType() == Message.ContentType.AUDIO_MSG.getValue()) {
-            notificationText = MobiComKitConstants.AUDIO;
+            notificationText = getText(1);
         } else if (message.getContentType() == Message.ContentType.VIDEO_MSG.getValue()) {
-            notificationText = MobiComKitConstants.VIDEO;
+            notificationText = getText(2);
         } else if (message.hasAttachment() && TextUtils.isEmpty(message.getMessage())) {
-            notificationText = MobiComKitConstants.ATTACHMENT;
+            notificationText = getText(3);
         } else {
             notificationText = message.getMessage();
         }
@@ -363,16 +376,15 @@ public void notifyUserForNormalMessage(Contact contact, Channel channel, Message
         PendingIntent pendingIntent = PendingIntent.getActivity(context, (int) (System.currentTimeMillis() & 0xfffffff),
                 intent, PendingIntent.FLAG_UPDATE_CURRENT);
 
-        NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(context, MobiComKitConstants.AL_PUSH_NOTIFICATION);
+        NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(context, notificationChannels.getDefaultChannelId(muteNotifications(index)));
 
         mBuilder.setSmallIcon(smallIconResourceId)
                 .setLargeIcon(ApplozicClient.getInstance(context).isShowAppIconInNotification() ? BitmapFactory.decodeResource(context.getResources(), iconResourceId) : notificationIconBitmap != null ? notificationIconBitmap : BitmapFactory.decodeResource(context.getResources(), context.getResources().getIdentifier(channel != null && !(Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType()) || Channel.GroupType.SUPPORT_GROUP.getValue().equals(channel.getType())) ? applozicClient.getDefaultChannelImage() : applozicClient.getDefaultContactImage(), "drawable", context.getPackageName())))
                 .setCategory(NotificationCompat.CATEGORY_MESSAGE)
-                .setPriority(NotificationCompat.PRIORITY_MAX)
+                .setPriority(muteNotifications(index) ? NotificationCompat.PRIORITY_LOW : NotificationCompat.PRIORITY_MAX)
                 .setWhen(System.currentTimeMillis())
                 .setContentTitle(title)
-                .setContentText(channel != null && !(Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType()) || Channel.GroupType.SUPPORT_GROUP.getValue().equals(channel.getType())) ? displayNameContact.getDisplayName() + ": " + notificationText : notificationText)
-                .setSound(TextUtils.isEmpty(MobiComUserPreference.getInstance(context).getNotificationSoundFilePath()) ? RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION) : Uri.parse(MobiComUserPreference.getInstance(context).getNotificationSoundFilePath()));
+                .setContentText(channel != null && !(Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType()) || Channel.GroupType.SUPPORT_GROUP.getValue().equals(channel.getType())) ? displayNameContact.getDisplayName() + ": " + notificationText : notificationText);
         mBuilder.setContentIntent(pendingIntent);
         mBuilder.setAutoCancel(true);
         if (ApplozicClient.getInstance(context).isUnreadCountBadgeEnabled()) {
@@ -381,6 +393,9 @@ public void notifyUserForNormalMessage(Contact contact, Channel channel, Message
                 mBuilder.setNumber(totalCount);
             }
         }
+        if (!muteNotifications(index)) {
+            mBuilder.setSound(TextUtils.isEmpty(notificationFilePath) ? RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION) : Uri.parse(notificationFilePath));
+        }
         if (message.hasAttachment()) {
             try {
                 FileMeta fileMeta = message.getFileMetas();
@@ -406,4 +421,23 @@ public void notifyUserForNormalMessage(Contact contact, Channel channel, Message
         }
     }
 
+    public String getText(int index) {
+        if (context.getApplicationContext() instanceof AlConstantsHandler) {
+            return getTextFromIndex(((AlConstantsHandler) context.getApplicationContext()).getNotificationTexts(), index);
+        }
+
+        return constArray[index];
+    }
+
+    public String getTextFromIndex(String[] texts, int index) {
+        if (texts != null && texts.length == 4) {
+            return texts[index];
+        }
+        return null;
+    }
+
+    public boolean muteNotifications(int index) {
+        return !(notificationDisableThreshold == 0 || (notificationDisableThreshold > 0 && index < notificationDisableThreshold));
+    }
+
 }
\ No newline at end of file
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/VideoCallNotificationHelper.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/VideoCallNotificationHelper.java
index e6b7231c..a90e842b 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/VideoCallNotificationHelper.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/notification/VideoCallNotificationHelper.java
@@ -85,14 +85,14 @@ public static boolean isAudioCall(Message message) {
         return Boolean.parseBoolean(message.getMetaDataValueForKey(CALL_AUDIO_ONLY));
     }
 
-    public static void buildVideoCallNotification(Context context, Message message) {
+    public static void buildVideoCallNotification(Context context, Message message, int index) {
         Map<String, String> metaDataMap = message.getMetadata();
         Contact contact = new AppContactService(context).getContactById(message.getContactIds());
         String audioORVideoCallPrefix = Boolean.valueOf(metaDataMap.get(CALL_AUDIO_ONLY)) ? "audio call " : "video call ";
         if (metaDataMap.get(VideoCallNotificationHelper.MSG_TYPE).equals(VideoCallNotificationHelper.CALL_MISSED)) {
             Message message1 = new Message(message);
             message1.setMessage("You missed " + audioORVideoCallPrefix + " from " + contact.getDisplayName());
-            BroadcastService.sendNotificationBroadcast(context, message1);
+            BroadcastService.sendNotificationBroadcast(context, message1, index);
         }
     }
 
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/ChannelInfo.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/ChannelInfo.java
index 36a6f3c1..4d255bcd 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/ChannelInfo.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/api/people/ChannelInfo.java
@@ -26,14 +26,18 @@
     private String parentClientGroupId;
     private ChannelMetadata channelMetadata;
 
+    public ChannelInfo() {
+        this.metadata = new HashMap<>();
+    }
+
     public ChannelInfo(String groupName, List<String> groupMemberList) {
+        this();
         this.groupName = groupName;
         this.groupMemberList = groupMemberList;
     }
 
     public ChannelInfo(String groupName, List<String> groupMemberList, String imageLink) {
-        this.groupName = groupName;
-        this.groupMemberList = groupMemberList;
+        this(groupName, groupMemberList);
         this.imageUrl = imageLink;
     }
 
@@ -113,23 +117,9 @@ public void setParentClientGroupId(String parentClientGroupId) {
         this.parentClientGroupId = parentClientGroupId;
     }
 
-    public void setChannelMetadata(ChannelMetadata channelMetadata) {
+    public void setChannelMetadata(ChannelMetadata channelMetadata){
         this.channelMetadata = channelMetadata;
-        if (channelMetadata != null) {
-            if (metadata == null) {
-                metadata = new HashMap<String, String>();
-            }
-            metadata.put(ChannelMetadata.CREATE_GROUP_MESSAGE, channelMetadata.getCreateGroupMessage());
-            metadata.put(ChannelMetadata.ADD_MEMBER_MESSAGE, channelMetadata.getAddMemberMessage());
-            metadata.put(ChannelMetadata.GROUP_NAME_CHANGE_MESSAGE, channelMetadata.getGroupNameChangeMessage());
-            metadata.put(ChannelMetadata.GROUP_ICON_CHANGE_MESSAGE, channelMetadata.getGroupIconChangeMessage());
-            metadata.put(ChannelMetadata.GROUP_LEFT_MESSAGE, channelMetadata.getGroupLeftMessage());
-            metadata.put(ChannelMetadata.JOIN_MEMBER_MESSAGE, channelMetadata.getJoinMemberMessage());
-            metadata.put(ChannelMetadata.DELETED_GROUP_MESSAGE, channelMetadata.getDeletedGroupMessage());
-            metadata.put(ChannelMetadata.REMOVE_MEMBER_MESSAGE, channelMetadata.getRemoveMemberMessage());
-            metadata.put(ChannelMetadata.HIDE_METADATA_NOTIFICATION, channelMetadata.getHideMetaDataNotification() + "");
-            metadata.put(ChannelMetadata.MUTE, channelMetadata.isDefaultMute() + "");
-        }
+        this.metadata = channelMetadata.getMetadata();
     }
 
     public Map<String, String> getMetadata() {
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/BroadcastService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/BroadcastService.java
index bcdfdd81..febe1b4a 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/BroadcastService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/BroadcastService.java
@@ -90,6 +90,10 @@ public static void sendDeliveryReportForContactBroadcast(Context context, String
     }
 
     public static void sendMessageUpdateBroadcast(Context context, String action, Message message) {
+        if (message.isActionMessage() && INTENT_ACTIONS.SYNC_MESSAGE.toString().equals(action) && ApplozicClient.getInstance(context).isActionMessagesHidden()) {
+            return;
+        }
+
         Utils.printLog(context, TAG, "Sending message update broadcast for " + action + ", " + message.getKeyString());
         Intent intentUpdate = new Intent();
         intentUpdate.setAction(action);
@@ -120,7 +124,7 @@ public static void sendConversationDeleteBroadcast(Context context, String actio
     }
 
 
-    public static void sendNotificationBroadcast(Context context, Message message) {
+    public static void sendNotificationBroadcast(Context context, Message message, int index) {
         if (message != null) {
 
             if (message.getMetadata() != null && message.getMetadata().containsKey("NO_ALERT") && "true".equals(message.getMetadata().get("NO_ALERT"))) {
@@ -141,9 +145,9 @@ public static void sendNotificationBroadcast(Context context, Message message) {
                     contact = new AppContactService(context).getContactById(message.getContactIds());
                 }
                 if (ApplozicClient.getInstance(context).isNotificationStacking()) {
-                    notificationService.notifyUser(contact, channel, message);
+                    notificationService.notifyUser(contact, channel, message, index);
                 } else {
-                    notificationService.notifyUserForNormalMessage(contact, channel, message);
+                    notificationService.notifyUserForNormalMessage(contact, channel, message, index);
                 }
             }
         }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/TimeChangeBroadcastReceiver.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/TimeChangeBroadcastReceiver.java
index 14216a3b..d8a5843a 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/TimeChangeBroadcastReceiver.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/broadcast/TimeChangeBroadcastReceiver.java
@@ -3,6 +3,7 @@
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
+import android.os.Process;
 
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.conversation.ApplozicIntentService;
@@ -17,19 +18,25 @@
     @Override
     public void onReceive(final Context context, Intent intent) {
 
-        if (Utils.isDeviceInIdleState(context)) {
-            new Thread(new Runnable() {
-                @Override
-                public void run() {
-                    Utils.printLog(context, "TimeChange", "This thread has been called on date change");
-                    long diff = DateUtils.getTimeDiffFromUtc();
-                    MobiComUserPreference.getInstance(context).setDeviceTimeOffset(diff);
+        if ("android.intent.action.TIME_SET".equals(intent.getAction()) || "android.intent.action.TIMEZONE_CHANGED".equals(intent.getAction())) {
+            if (!Utils.isAutomaticTimeEnabled(context, "android.intent.action.TIMEZONE_CHANGED".equals(intent.getAction()))) {
+                if (Utils.isDeviceInIdleState(context)) {
+                    Thread timeChangeThread = new Thread(new Runnable() {
+                        @Override
+                        public void run() {
+                            Utils.printLog(context, "TimeChange", "This thread has been called on date change");
+                            long diff = DateUtils.getTimeDiffFromUtc();
+                            MobiComUserPreference.getInstance(context).setDeviceTimeOffset(diff);
+                        }
+                    });
+                    timeChangeThread.setPriority(Process.THREAD_PRIORITY_BACKGROUND);
+                    timeChangeThread.start();
+                } else {
+                    Intent applozicIntent = new Intent(context, ApplozicIntentService.class);
+                    applozicIntent.putExtra(ApplozicIntentService.AL_TIME_CHANGE_RECEIVER, true);
+                    ApplozicIntentService.enqueueWork(context, applozicIntent);
                 }
-            }).start();
-        } else {
-            Intent applozicIntent = new Intent(context, ApplozicIntentService.class);
-            applozicIntent.putExtra(ApplozicIntentService.AL_TIME_CHANGE_RECEIVER, true);
-            ApplozicIntentService.enqueueWork(context, applozicIntent);
+            }
         }
     }
 }
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelClientService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelClientService.java
index 674d4f4e..ffa87276 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelClientService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelClientService.java
@@ -45,9 +45,11 @@
     private static final String ADD_MEMBERS_TO_CONTACT_GROUP_URL = "/rest/ws/group/%s/add";
     private static final String GET_MEMBERS_FROM_CONTACT_GROUP_URL = "/rest/ws/group/%s/get";
     private static final String GET_GROUP_INFO_FROM_GROUP_IDS_URL = "/rest/ws/group/details";
-    private static final String ADD_MEMBERS_TO_CONTACT_GROUP_OF_TYPE_URL = "/rest/ws/group/%s/add/members";
+    private static final String ADD_MEMBERS_TO_CONTACT_GROUP_OF_TYPE_URL =
+            "/rest/ws/group/%s/add/members";
     private static final String GET_MEMBERS_TO_CONTACT_GROUP_OF_TYPE_URL = "/rest/ws/group/%s/get";
-    private static final String GET_MEMBERS_FROM_CONTACT_GROUP_LIST_URL = "/rest/ws/group/favourite/list/get";
+    private static final String GET_MEMBERS_FROM_CONTACT_GROUP_LIST_URL =
+            "/rest/ws/group/favourite/list/get";
     private static final String CREATE_CONVERSATION_URL = "/conversations";
     private static final String UPDATED_AT = "updatedAt";
     private static final String USER_ID = "userId";
@@ -59,10 +61,10 @@
     private static final String GROUPTYPE = "groupType";
     private static final String TAG = "ChannelClientService";
     private static ChannelClientService channelClientService;
-    private static final String REMOVE_MEMBERS_FROM_CONTACT_GROUP_OF_TYPE_URL = "/rest/ws/group/%s/remove";
+    private static final String REMOVE_MEMBERS_FROM_CONTACT_GROUP_OF_TYPE_URL =
+            "/rest/ws/group/%s/remove";
     private HttpRequestUtils httpRequestUtils;
 
-
     private ChannelClientService(Context context) {
         super(context);
         this.context = context;
@@ -161,8 +163,10 @@ private String getCreateConversationUrl() {
     public ChannelFeed getChannelInfoByParameters(String parameters) {
         String response = "";
         try {
-            response = httpRequestUtils.getResponse(getChannelInfoUrl() + "?" + parameters, "application/json", "application/json");
-            ChannelFeedApiResponse channelFeedApiResponse = (ChannelFeedApiResponse) GsonUtils.getObjectFromJson(response, ChannelFeedApiResponse.class);
+            response = httpRequestUtils.getResponse(getChannelInfoUrl() + "?" + parameters,
+                    "application/json", "application/json");
+            ChannelFeedApiResponse channelFeedApiResponse = (ChannelFeedApiResponse) GsonUtils
+                    .getObjectFromJson(response, ChannelFeedApiResponse.class);
             Utils.printLog(context, TAG, "Channel info response  is :" + response);
 
             if (channelFeedApiResponse != null && channelFeedApiResponse.isSuccess()) {
@@ -190,12 +194,16 @@ public ApiResponse muteNotification(MuteNotificationRequest muteNotificationRequ
 
         try {
             if (muteNotificationRequest.isRequestValid()) {
-                String requestJson = GsonUtils.getJsonFromObject(muteNotificationRequest, MuteNotificationRequest.class);
-                String response = httpRequestUtils.postData(getMuteChannelUrl(), "application/json", "application/json", requestJson);
-                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+                String requestJson = GsonUtils.getJsonFromObject(muteNotificationRequest,
+                        MuteNotificationRequest.class);
+                String response = httpRequestUtils.postData(getMuteChannelUrl(),
+                        "application/json", "application/json", requestJson);
+                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse
+                        .class);
 
                 if (apiResponse != null) {
-                    Utils.printLog(context, TAG, "Mute notification response: " + apiResponse.getStatus());
+                    Utils.printLog(context, TAG, "Mute notification response: " + apiResponse
+                            .getStatus());
                 }
             }
 
@@ -211,7 +219,8 @@ public SyncChannelFeed getChannelFeed(String lastChannelSyncTime) {
                 UPDATED_AT
                 + "=" + lastChannelSyncTime;
         try {
-            String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
+            String response = httpRequestUtils.getResponse(url, "application/json",
+                    "application/json");
             Utils.printLog(context, TAG, "Channel sync call response: " + response);
             return (SyncChannelFeed) GsonUtils.getObjectFromJson(response, SyncChannelFeed.class);
         } catch (Exception e) {
@@ -219,13 +228,17 @@ public SyncChannelFeed getChannelFeed(String lastChannelSyncTime) {
         }
     }
 
+    @Deprecated
     public ChannelFeed createChannel(ChannelInfo channelInfo) {
         ChannelFeed channelFeed = null;
         try {
-            String jsonFromObject = GsonUtils.getJsonFromObject(channelInfo, channelInfo.getClass());
-            String createChannelResponse = httpRequestUtils.postData(getCreateChannelUrl(), "application/json", "application/json", jsonFromObject);
+            String jsonFromObject = GsonUtils.getJsonFromObject(channelInfo, channelInfo.getClass
+                    ());
+            String createChannelResponse = httpRequestUtils.postData(getCreateChannelUrl(),
+                    "application/json", "application/json", jsonFromObject);
             Utils.printLog(context, TAG, "Create channel Response :" + createChannelResponse);
-            ChannelFeedApiResponse channelFeedApiResponse = (ChannelFeedApiResponse) GsonUtils.getObjectFromJson(createChannelResponse, ChannelFeedApiResponse.class);
+            ChannelFeedApiResponse channelFeedApiResponse = (ChannelFeedApiResponse) GsonUtils
+                    .getObjectFromJson(createChannelResponse, ChannelFeedApiResponse.class);
 
             if (channelFeedApiResponse != null && channelFeedApiResponse.isSuccess()) {
                 channelFeed = channelFeedApiResponse.getResponse();
@@ -238,14 +251,28 @@ public ChannelFeed createChannel(ChannelInfo channelInfo) {
         return channelFeed;
     }
 
+    public ChannelFeedApiResponse createChannelWithReponse(ChannelInfo channelInfo) throws Exception {
+        String jsonFromObject = GsonUtils.getJsonFromObject(channelInfo, channelInfo.getClass());
+        String createChannelResponse = httpRequestUtils.postData(getCreateChannelUrl(),
+                "application/json", "application/json", jsonFromObject);
+        Utils.printLog(context, TAG, "Create channel Response :" + createChannelResponse);
+        return (ChannelFeedApiResponse) GsonUtils.getObjectFromJson(createChannelResponse,
+                ChannelFeedApiResponse.class);
+    }
+
     public List<ChannelFeed> createMultipleChannels(List<ChannelInfo> channels) {
         List<ChannelFeed> channelFeeds = null;
         try {
-            String jsonFromObject = GsonUtils.getJsonFromObject(channels, new TypeToken<List<ChannelInfo>>() {
-            }.getType());
-            String createChannelResponse = httpRequestUtils.postData(getCreateMultipleChannelUrl(), "application/json", "application/json", jsonFromObject);
-            Utils.printLog(context, TAG, "Create Multiple channel Response :" + createChannelResponse);
-            MultipleChannelFeedApiResponse channelFeedApiResponse = (MultipleChannelFeedApiResponse) GsonUtils.getObjectFromJson(createChannelResponse, MultipleChannelFeedApiResponse.class);
+            String jsonFromObject = GsonUtils.getJsonFromObject(channels, new
+                    TypeToken<List<ChannelInfo>>() {
+                    }.getType());
+            String createChannelResponse = httpRequestUtils.postData(getCreateMultipleChannelUrl
+                    (), "application/json", "application/json", jsonFromObject);
+            Utils.printLog(context, TAG, "Create Multiple channel Response :" +
+                    createChannelResponse);
+            MultipleChannelFeedApiResponse channelFeedApiResponse =
+                    (MultipleChannelFeedApiResponse) GsonUtils.getObjectFromJson
+                            (createChannelResponse, MultipleChannelFeedApiResponse.class);
 
             if (channelFeedApiResponse != null && channelFeedApiResponse.isSuccess()) {
                 channelFeeds = channelFeedApiResponse.getResponse();
@@ -258,22 +285,28 @@ public ChannelFeed createChannel(ChannelInfo channelInfo) {
         return channelFeeds;
     }
 
-    public ApiResponse removeMembersFromMultipleChannelsByChannelKeys(Set<Integer> channelKeys, Set<String> userIds) {
+    public ApiResponse removeMembersFromMultipleChannelsByChannelKeys(Set<Integer> channelKeys,
+                                                                      Set<String> userIds) {
         return removeMembersFromMultipleChannels(null, channelKeys, userIds);
     }
 
-    public ApiResponse removeMembersFromMultipleChannelsByClientGroupIds(Set<String> clientGroupIds, Set<String> userIds) {
+    public ApiResponse removeMembersFromMultipleChannelsByClientGroupIds(Set<String>
+                                                                                 clientGroupIds,
+                                                                         Set<String> userIds) {
         return removeMembersFromMultipleChannels(clientGroupIds, null, userIds);
     }
 
-    private ApiResponse removeMembersFromMultipleChannels(Set<String> clientGroupIds, Set<Integer> channelKeys, Set<String> userIds) {
+    private ApiResponse removeMembersFromMultipleChannels(Set<String> clientGroupIds,
+                                                          Set<Integer> channelKeys, Set<String>
+                                                                  userIds) {
         ApiResponse apiResponse = null;
         try {
             if (userIds != null && userIds.size() > 0) {
                 String parameters = "";
                 if (clientGroupIds != null && clientGroupIds.size() > 0) {
                     for (String clientGroupId : clientGroupIds) {
-                        parameters += CLIENT_GROUPIDs + "=" + URLEncoder.encode(clientGroupId, "UTF-8") + "&";
+                        parameters += CLIENT_GROUPIDs + "=" + URLEncoder.encode(clientGroupId,
+                                "UTF-8") + "&";
                     }
                 } else if (channelKeys != null && channelKeys.size() > 0) {
                     for (Integer channelKey : channelKeys) {
@@ -284,10 +317,13 @@ private ApiResponse removeMembersFromMultipleChannels(Set<String> clientGroupIds
                     parameters += USER_ID + "=" + URLEncoder.encode(userId, "UTF-8") + "&";
                 }
                 String url = getRemoveMembersFromMultipChannels() + "?" + parameters;
-                String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
-                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+                String response = httpRequestUtils.getResponse(url, "application/json",
+                        "application/json");
+                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse
+                        .class);
                 if (apiResponse != null) {
-                    Utils.printLog(context, TAG, "Channel remove members from channels response: " + apiResponse.getStatus());
+                    Utils.printLog(context, TAG, "Channel remove members from channels response: " +
+                            "" + apiResponse.getStatus());
                 }
             }
         } catch (Exception e) {
@@ -297,25 +333,32 @@ private ApiResponse removeMembersFromMultipleChannels(Set<String> clientGroupIds
     }
 
 
-    public synchronized ApiResponse addMemberToMultipleChannels(Set<String> clientGroupIds, Set<Integer> channelKeys, String userId) {
+    public synchronized ApiResponse addMemberToMultipleChannels(Set<String> clientGroupIds,
+                                                                Set<Integer> channelKeys, String
+                                                                        userId) {
         ApiResponse apiResponse = null;
         try {
             if (!TextUtils.isEmpty(userId)) {
                 String parameters = "";
                 if (clientGroupIds != null && clientGroupIds.size() > 0) {
                     for (String clientGroupId : clientGroupIds) {
-                        parameters += CLIENT_GROUPIDs + "=" + URLEncoder.encode(clientGroupId, "UTF-8") + "&";
+                        parameters += CLIENT_GROUPIDs + "=" + URLEncoder.encode(clientGroupId,
+                                "UTF-8") + "&";
                     }
                 } else {
                     for (Integer channelKey : channelKeys) {
                         parameters += GROUPIDS + "=" + channelKey + "&";
                     }
                 }
-                String url = getAddMemberToMultipleChannelsUrl() + "?" + parameters + USER_ID + "=" + URLEncoder.encode(userId, "UTF-8");
-                String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
-                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+                String url = getAddMemberToMultipleChannelsUrl() + "?" + parameters + USER_ID +
+                        "=" + URLEncoder.encode(userId, "UTF-8");
+                String response = httpRequestUtils.getResponse(url, "application/json",
+                        "application/json");
+                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse
+                        .class);
                 if (apiResponse != null) {
-                    Utils.printLog(context, TAG, "Channel add member call response: " + apiResponse.getStatus());
+                    Utils.printLog(context, TAG, "Channel add member call response: " +
+                            apiResponse.getStatus());
                 }
             }
         } catch (Exception e) {
@@ -324,15 +367,18 @@ public synchronized ApiResponse addMemberToMultipleChannels(Set<String> clientGr
         return apiResponse;
     }
 
-    public ApiResponse addMemberToMultipleChannelsByChannelKey(Set<Integer> channelKeys, String userId) {
+    public ApiResponse addMemberToMultipleChannelsByChannelKey(Set<Integer> channelKeys, String
+            userId) {
         return addMemberToMultipleChannels(null, channelKeys, userId);
     }
 
-    public ApiResponse addMemberToMultipleChannelsByClientGroupIds(Set<String> clientGroupIds, String userId) {
+    public ApiResponse addMemberToMultipleChannelsByClientGroupIds(Set<String> clientGroupIds,
+                                                                   String userId) {
         return addMemberToMultipleChannels(clientGroupIds, null, userId);
     }
 
-    public synchronized ApiResponse addMemberToChannel(String clientGroupId, Integer channelKey, String userId) {
+    public synchronized ApiResponse addMemberToChannel(String clientGroupId, Integer channelKey,
+                                                       String userId) {
         try {
             String parameters = "";
             if (!TextUtils.isEmpty(clientGroupId)) {
@@ -343,10 +389,13 @@ public synchronized ApiResponse addMemberToChannel(String clientGroupId, Integer
             if (!TextUtils.isEmpty(parameters) && !TextUtils.isEmpty(userId)) {
                 String url = getAddMemberToGroup() + "?" +
                         parameters + "&" + USER_ID + "=" + URLEncoder.encode(userId, "UTF-8");
-                String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
-                ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+                String response = httpRequestUtils.getResponse(url, "application/json",
+                        "application/json");
+                ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response,
+                        ApiResponse.class);
                 if (apiResponse != null) {
-                    Utils.printLog(context, TAG, "Channel add member call response: " + apiResponse.getStatus());
+                    Utils.printLog(context, TAG, "Channel add member call response: " +
+                            apiResponse.getStatus());
                 }
                 return apiResponse;
             }
@@ -364,7 +413,8 @@ public synchronized ApiResponse addMemberToChannel(String clientGroupId, String
         return addMemberToChannel(clientGroupId, null, userId);
     }
 
-    public synchronized ApiResponse removeMemberFromChannel(String clientGroupId, Integer channelKey, String userId) {
+    public synchronized ApiResponse removeMemberFromChannel(String clientGroupId, Integer
+            channelKey, String userId) {
         ApiResponse apiResponse = null;
         try {
             String parameters = "";
@@ -376,10 +426,13 @@ public synchronized ApiResponse removeMemberFromChannel(String clientGroupId, In
             if (!TextUtils.isEmpty(parameters) && !TextUtils.isEmpty(userId)) {
                 String url = getRemoveMemberUrl() + "?" +
                         parameters + "&" + USER_ID + "=" + URLEncoder.encode(userId, "UTF-8");
-                String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
-                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+                String response = httpRequestUtils.getResponse(url, "application/json",
+                        "application/json");
+                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse
+                        .class);
                 if (apiResponse != null) {
-                    Utils.printLog(context, TAG, "Channel remove member response: " + apiResponse.getStatus());
+                    Utils.printLog(context, TAG, "Channel remove member response: " + apiResponse
+                            .getStatus());
                 }
             }
         } catch (Exception e) {
@@ -400,11 +453,15 @@ public synchronized ApiResponse updateChannel(GroupInfoUpdate groupInfoUpdate) {
         ApiResponse apiResponse = null;
         try {
             if (groupInfoUpdate != null) {
-                String channelNameUpdateJson = GsonUtils.getJsonFromObject(groupInfoUpdate, GroupInfoUpdate.class);
-                String response = httpRequestUtils.postData(getChannelUpdateUrl(), "application/json", "application/json", channelNameUpdateJson);
-                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+                String channelNameUpdateJson = GsonUtils.getJsonFromObject(groupInfoUpdate,
+                        GroupInfoUpdate.class);
+                String response = httpRequestUtils.postData(getChannelUpdateUrl(),
+                        "application/json", "application/json", channelNameUpdateJson);
+                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse
+                        .class);
                 if (apiResponse != null) {
-                    Utils.printLog(context, TAG, "Update Channel response: " + apiResponse.getStatus());
+                    Utils.printLog(context, TAG, "Update Channel response: " + apiResponse
+                            .getStatus());
                 }
             }
         } catch (Exception e) {
@@ -421,7 +478,8 @@ public ApiResponse leaveMemberFromChannel(String clientGroupId) {
         return leaveMemberFromChannel(clientGroupId, null);
     }
 
-    public synchronized ApiResponse leaveMemberFromChannel(String clientGroupId, Integer channelKey) {
+    public synchronized ApiResponse leaveMemberFromChannel(String clientGroupId, Integer
+            channelKey) {
         ApiResponse apiResponse = null;
         try {
             String parameters = "";
@@ -433,10 +491,13 @@ public synchronized ApiResponse leaveMemberFromChannel(String clientGroupId, Int
 
             if (!TextUtils.isEmpty(clientGroupId) || (channelKey != null && channelKey != 0)) {
                 String url = getChannelLeftUrl() + "?" + parameters;
-                String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
-                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+                String response = httpRequestUtils.getResponse(url, "application/json",
+                        "application/json");
+                apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse
+                        .class);
                 if (apiResponse != null) {
-                    Utils.printLog(context, TAG, "Channel leave member call response: " + apiResponse.getStatus());
+                    Utils.printLog(context, TAG, "Channel leave member call response: " +
+                            apiResponse.getStatus());
                 }
             }
         } catch (Exception e) {
@@ -451,10 +512,13 @@ public synchronized ApiResponse deleteChannel(Integer channelKey) {
                 String url = getChannelDeleteUrl() + "?" +
                         GROUP_ID
                         + "=" + URLEncoder.encode(String.valueOf(channelKey), "UTF-8");
-                String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
-                ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+                String response = httpRequestUtils.getResponse(url, "application/json",
+                        "application/json");
+                ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response,
+                        ApiResponse.class);
                 if (apiResponse != null) {
-                    Utils.printLog(context, TAG, "Channel delete call response: " + apiResponse.getStatus());
+                    Utils.printLog(context, TAG, "Channel delete call response: " + apiResponse
+                            .getStatus());
                 }
                 return apiResponse;
             }
@@ -467,20 +531,24 @@ public synchronized ApiResponse deleteChannel(Integer channelKey) {
 
     public ChannelFeedApiResponse createChannelWithResponse(ChannelInfo channelInfo) {
         try {
-            String jsonFromObject = GsonUtils.getJsonFromObject(channelInfo, channelInfo.getClass());
-            String createChannelResponse = httpRequestUtils.postData(getCreateChannelUrl(), "application/json", "application/json", jsonFromObject);
+            String jsonFromObject = GsonUtils.getJsonFromObject(channelInfo, channelInfo.getClass
+                    ());
+            String createChannelResponse = httpRequestUtils.postData(getCreateChannelUrl(),
+                    "application/json", "application/json", jsonFromObject);
             Utils.printLog(context, TAG, "Create channel Response :" + createChannelResponse);
             if (TextUtils.isEmpty(createChannelResponse)) {
                 return null;
             }
-            return (ChannelFeedApiResponse) GsonUtils.getObjectFromJson(createChannelResponse, ChannelFeedApiResponse.class);
+            return (ChannelFeedApiResponse) GsonUtils.getObjectFromJson(createChannelResponse,
+                    ChannelFeedApiResponse.class);
         } catch (Exception e) {
             e.printStackTrace();
         }
         return null;
     }
 
-    public ApiResponse addMemberToContactGroup(String contactGroupId, List<String> contactGroupMemberList) {
+    public ApiResponse addMemberToContactGroup(String contactGroupId, List<String>
+            contactGroupMemberList) {
         String response;
         if (!TextUtils.isEmpty(contactGroupId) && contactGroupMemberList != null) {
             String url = String.format(addMembersToContactGroupUrl(), contactGroupId);
@@ -488,11 +556,14 @@ public ApiResponse addMemberToContactGroup(String contactGroupId, List<String> c
             String jsonFromObject = GsonUtils.getJsonFromObject(contactGroupMemberList, List.class);
             Utils.printLog(context, TAG, "Sending json:" + jsonFromObject);
             try {
-                response = httpRequestUtils.postData(url, "application/json", "application/json", jsonFromObject);
-                ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+                response = httpRequestUtils.postData(url, "application/json", "application/json",
+                        jsonFromObject);
+                ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response,
+                        ApiResponse.class);
 
                 if (apiResponse != null) {
-                    Utils.printLog(context, TAG, "Add Member To Contact Group Response: " + apiResponse.getStatus());
+                    Utils.printLog(context, TAG, "Add Member To Contact Group Response: " +
+                            apiResponse.getStatus());
                     return apiResponse;
                 }
             } catch (Exception e) {
@@ -502,21 +573,28 @@ public ApiResponse addMemberToContactGroup(String contactGroupId, List<String> c
         return null;
     }
 
-    public ApiResponse addMemberToContactGroupOfType(String contactGroupId, String groupType, List<String> contactGroupMemberList) {
+    public ApiResponse addMemberToContactGroupOfType(String contactGroupId, String groupType,
+                                                     List<String> contactGroupMemberList) {
         String response;
-        if (!TextUtils.isEmpty(contactGroupId) && !TextUtils.isEmpty(groupType) && contactGroupMemberList != null) {
+        if (!TextUtils.isEmpty(contactGroupId) && !TextUtils.isEmpty(groupType) &&
+                contactGroupMemberList != null) {
             String url = String.format(addMembersToContactGroupOfTypeUrl(), contactGroupId);
-            ApplozicAddMemberOfGroupType applozicAddMemberOfGroupType = new ApplozicAddMemberOfGroupType();
+            ApplozicAddMemberOfGroupType applozicAddMemberOfGroupType = new
+                    ApplozicAddMemberOfGroupType();
             applozicAddMemberOfGroupType.setGroupMemberList(contactGroupMemberList);
             applozicAddMemberOfGroupType.setType(groupType);
-            String jsonFromObject = GsonUtils.getJsonFromObject(applozicAddMemberOfGroupType, ApplozicAddMemberOfGroupType.class);
+            String jsonFromObject = GsonUtils.getJsonFromObject(applozicAddMemberOfGroupType,
+                    ApplozicAddMemberOfGroupType.class);
             Utils.printLog(context, TAG, "Sending json:" + jsonFromObject);
             try {
-                response = httpRequestUtils.postData(url, "application/json", "application/json", jsonFromObject);
-                ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+                response = httpRequestUtils.postData(url, "application/json", "application/json",
+                        jsonFromObject);
+                ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response,
+                        ApiResponse.class);
 
                 if (apiResponse != null) {
-                    Utils.printLog(context, TAG, "Add Member To Contact Group Response: " + apiResponse.getStatus());
+                    Utils.printLog(context, TAG, "Add Member To Contact Group Response: " +
+                            apiResponse.getStatus());
                     return apiResponse;
                 }
             } catch (Exception e) {
@@ -531,7 +609,8 @@ public ChannelFeed getMembersFromContactGroup(String contactGroupId) {
         if (!TextUtils.isEmpty(contactGroupId)) {
             String url = String.format(getMembersFromContactGroupUrl(), contactGroupId);
             response = httpRequestUtils.getResponse(url, "application/json", "application/json");
-            ChannelFeedApiResponse channelFeedApiResponse = (ChannelFeedApiResponse) GsonUtils.getObjectFromJson(response, ChannelFeedApiResponse.class);
+            ChannelFeedApiResponse channelFeedApiResponse = (ChannelFeedApiResponse) GsonUtils
+                    .getObjectFromJson(response, ChannelFeedApiResponse.class);
             if (channelFeedApiResponse != null && channelFeedApiResponse.isSuccess()) {
                 ChannelFeed channelFeed = channelFeedApiResponse.getResponse();
                 return channelFeed;
@@ -543,9 +622,11 @@ public ChannelFeed getMembersFromContactGroup(String contactGroupId) {
     public ChannelFeed getMembersFromContactGroupOfType(String contactGroupId, String groupType) {
         String response;
         if (!TextUtils.isEmpty(contactGroupId) && !TextUtils.isEmpty(groupType)) {
-            String url = String.format(getMembersFromContactGroupOfTypeUrl() + "?" + GROUPTYPE + "=" + groupType, contactGroupId);
+            String url = String.format(getMembersFromContactGroupOfTypeUrl() + "?" + GROUPTYPE +
+                    "=" + groupType, contactGroupId);
             response = httpRequestUtils.getResponse(url, "application/json", "application/json");
-            ChannelFeedApiResponse channelFeedApiResponse = (ChannelFeedApiResponse) GsonUtils.getObjectFromJson(response, ChannelFeedApiResponse.class);
+            ChannelFeedApiResponse channelFeedApiResponse = (ChannelFeedApiResponse) GsonUtils
+                    .getObjectFromJson(response, ChannelFeedApiResponse.class);
             if (channelFeedApiResponse != null && channelFeedApiResponse.isSuccess()) {
                 ChannelFeed channelFeed = channelFeedApiResponse.getResponse();
                 return channelFeed;
@@ -554,7 +635,8 @@ public ChannelFeed getMembersFromContactGroupOfType(String contactGroupId, Strin
         return null;
     }
 
-    public ChannelFeedListResponse getGroupInfoFromGroupIds(List<String> groupIds, List<String> clientGroupIds) {
+    public ChannelFeedListResponse getGroupInfoFromGroupIds(List<String> groupIds, List<String>
+            clientGroupIds) {
         ChannelFeedListResponse apiResponse = null;
 
         try {
@@ -581,11 +663,14 @@ public ChannelFeedListResponse getGroupInfoFromGroupIds(List<String> groupIds, L
             }
 
             String url = getGroupInfoFromGroupIdsUrl() + parameters;
-            String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
-            apiResponse = (ChannelFeedListResponse) GsonUtils.getObjectFromJson(response, ChannelFeedListResponse.class);
+            String response = httpRequestUtils.getResponse(url, "application/json",
+                    "application/json");
+            apiResponse = (ChannelFeedListResponse) GsonUtils.getObjectFromJson(response,
+                    ChannelFeedListResponse.class);
 
             if (apiResponse != null) {
-                Utils.printLog(context, TAG, "Group Info from groupIds/clientGroupIds response : " + apiResponse.getStatus());
+                Utils.printLog(context, TAG, "Group Info from groupIds/clientGroupIds response : " +
+                        "" + apiResponse.getStatus());
             }
         } catch (Exception e) {
             Utils.printLog(context, TAG, e.getMessage());
@@ -593,7 +678,9 @@ public ChannelFeedListResponse getGroupInfoFromGroupIds(List<String> groupIds, L
         return apiResponse;
     }
 
-    public ChannelFeedListResponse getMemebersFromContactGroupIds(List<String> groupIds, List<String> groupNames, String groupType) {
+    public ChannelFeedListResponse getMemebersFromContactGroupIds(List<String> groupIds,
+                                                                  List<String> groupNames, String
+                                                                          groupType) {
         ChannelFeedListResponse channelFeedListResponse = null;
 
         try {
@@ -622,11 +709,14 @@ public ChannelFeedListResponse getMemebersFromContactGroupIds(List<String> group
 
             String url = getMembersFromContactGroupListUrl() + parameters;
 
-            String response = httpRequestUtils.getResponse(url, "application/json", "application/json");
-            channelFeedListResponse = (ChannelFeedListResponse) GsonUtils.getObjectFromJson(response, ChannelFeedListResponse.class);
+            String response = httpRequestUtils.getResponse(url, "application/json",
+                    "application/json");
+            channelFeedListResponse = (ChannelFeedListResponse) GsonUtils.getObjectFromJson
+                    (response, ChannelFeedListResponse.class);
 
             if (channelFeedListResponse != null) {
-                Utils.printLog(context, TAG, "Get Memebers from Contact Group List of Type Response : " + channelFeedListResponse.getStatus());
+                Utils.printLog(context, TAG, "Get Memebers from Contact Group List of Type " +
+                        "Response : " + channelFeedListResponse.getStatus());
             }
         } catch (Exception e) {
             e.printStackTrace();
@@ -634,7 +724,8 @@ public ChannelFeedListResponse getMemebersFromContactGroupIds(List<String> group
         return channelFeedListResponse;
     }
 
-    public String createConversation(Integer groupId, String userId, String agentId, String applicationId) {
+    public String createConversation(Integer groupId, String userId, String agentId, String
+            applicationId) {
 
         JSONObject jsonObject = new JSONObject();
 
@@ -649,7 +740,8 @@ public String createConversation(Integer groupId, String userId, String agentId,
         }
 
         try {
-            String response = httpRequestUtils.postData(getCreateConversationUrl(), "application/json", "application/json", jsonObject.toString());
+            String response = httpRequestUtils.postData(getCreateConversationUrl(),
+                    "application/json", "application/json", jsonObject.toString());
             Utils.printLog(context, TAG, "Response : " + response);
             return response;
         } catch (Exception e) {
@@ -658,7 +750,8 @@ public String createConversation(Integer groupId, String userId, String agentId,
         return null;
     }
 
-    public ApiResponse removeMemberFromContactGroupOfType(String groupName, String groupType, String userId) {
+    public ApiResponse removeMemberFromContactGroupOfType(String groupName, String groupType,
+                                                          String userId) {
         String response;
         String parameters;
         String url;
@@ -670,10 +763,13 @@ public ApiResponse removeMemberFromContactGroupOfType(String groupName, String g
             }
             url = String.format(getRemoveMemberFromGroupTypeUrl() + parameters, groupName);
             try {
-                response = httpRequestUtils.getResponse(url, "application/json", "application/json");
-                ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response, ApiResponse.class);
+                response = httpRequestUtils.getResponse(url, "application/json",
+                        "application/json");
+                ApiResponse apiResponse = (ApiResponse) GsonUtils.getObjectFromJson(response,
+                        ApiResponse.class);
                 if (apiResponse != null) {
-                    Utils.printLog(context, TAG, "Remove memeber from Group of Type Response: " + apiResponse.getStatus());
+                    Utils.printLog(context, TAG, "Remove memeber from Group of Type Response: " +
+                            apiResponse.getStatus());
                     return apiResponse;
                 }
             } catch (Exception e) {
@@ -682,4 +778,4 @@ public ApiResponse removeMemberFromContactGroupOfType(String groupName, String g
         }
         return null;
     }
-}
+}
\ No newline at end of file
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelService.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelService.java
index 5555d470..297eaf7d 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelService.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/channel/service/ChannelService.java
@@ -1,6 +1,7 @@
 package com.applozic.mobicomkit.channel.service;
 
 import android.content.Context;
+import android.support.annotation.VisibleForTesting;
 import android.text.TextUtils;
 
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
@@ -13,6 +14,7 @@
 import com.applozic.mobicomkit.channel.database.ChannelDatabaseService;
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.BaseContactService;
+import com.applozic.mobicomkit.feed.AlResponse;
 import com.applozic.mobicomkit.feed.ApiResponse;
 import com.applozic.mobicomkit.feed.ChannelFeed;
 import com.applozic.mobicomkit.feed.ChannelFeedApiResponse;
@@ -55,6 +57,26 @@ public synchronized static ChannelService getInstance(Context context) {
         return channelService;
     }
 
+    @VisibleForTesting
+    public void setChannelClientService(ChannelClientService channelClientService) {
+        this.channelClientService = channelClientService;
+    }
+
+    @VisibleForTesting
+    public void setChannelDatabaseService(ChannelDatabaseService channelDatabaseService) {
+        this.channelDatabaseService = channelDatabaseService;
+    }
+
+    @VisibleForTesting
+    public void setUserService(UserService userService) {
+        this.userService = userService;
+    }
+
+    @VisibleForTesting
+    public void setContactService(AppContactService appContactService) {
+        this.baseContactService = appContactService;
+    }
+
     public Channel getChannelInfoFromLocalDb(Integer key) {
         return channelDatabaseService.getChannelByChannelKey(key);
     }
@@ -71,7 +93,6 @@ public Channel getChannelInfo(Integer key) {
                 ChannelFeed[] channelFeeds = new ChannelFeed[1];
                 channelFeeds[0] = channelFeed;
                 processChannelFeedList(channelFeeds, false);
-                //BroadcastService.sendUpdate(context, BroadcastService.INTENT_ACTIONS.UPDATE_CHANNEL_NAME.toString());
                 channel = getChannel(channelFeed);
                 return channel;
             }
@@ -131,11 +152,13 @@ public void processChannelFeed(ChannelFeed channelFeed, boolean isUserDetails) {
             }
             if (channelFeed.getConversationPxy() != null) {
                 channelFeed.getConversationPxy().setGroupId(channelFeed.getId());
-                ConversationService.getInstance(context).addConversation(channelFeed.getConversationPxy());
+                ConversationService.getInstance(context).addConversation(channelFeed
+                        .getConversationPxy());
             }
             if (memberUserIds != null && memberUserIds.size() > 0) {
                 for (String userId : memberUserIds) {
-                    ChannelUserMapper channelUserMapper = new ChannelUserMapper(channelFeed.getId(), userId);
+                    ChannelUserMapper channelUserMapper = new ChannelUserMapper(channelFeed.getId
+                            (), userId);
                     channelUserMapper.setParentKey(channelFeed.getParentKey());
                     if (channelDatabaseService.isChannelUserPresent(channelFeed.getId(), userId)) {
                         channelDatabaseService.updateChannelUserMapper(channelUserMapper);
@@ -152,7 +175,8 @@ public void processChannelFeed(ChannelFeed channelFeed, boolean isUserDetails) {
             if (channelFeed.getGroupUsers() != null && channelFeed.getGroupUsers().size() > 0) {
                 for (ChannelUsersFeed channelUsers : channelFeed.getGroupUsers()) {
                     if (channelUsers.getRole() != null) {
-                        channelDatabaseService.updateRoleInChannelUserMapper(channelFeed.getId(), channelUsers.getUserId(), channelUsers.getRole());
+                        channelDatabaseService.updateRoleInChannelUserMapper(channelFeed.getId(),
+                                channelUsers.getUserId(), channelUsers.getRole());
                     }
                 }
             }
@@ -197,14 +221,16 @@ public void updateChannel(Channel channel) {
 
     public synchronized void syncChannels(boolean isMetadataUpdate) {
         final MobiComUserPreference userpref = MobiComUserPreference.getInstance(context);
-        SyncChannelFeed syncChannelFeed = channelClientService.getChannelFeed(userpref.getChannelSyncTime());
+        SyncChannelFeed syncChannelFeed = channelClientService.getChannelFeed(userpref
+                .getChannelSyncTime());
         if (syncChannelFeed == null) {
             return;
         }
         if (syncChannelFeed.isSuccess()) {
             processChannelList(syncChannelFeed.getResponse());
 
-            BroadcastService.sendUpdate(context, isMetadataUpdate, BroadcastService.INTENT_ACTIONS.CHANNEL_SYNC.toString());
+            BroadcastService.sendUpdate(context, isMetadataUpdate, BroadcastService
+                    .INTENT_ACTIONS.CHANNEL_SYNC.toString());
         }
         userpref.setChannelSyncTime(syncChannelFeed.getGeneratedAt());
 
@@ -214,20 +240,48 @@ public synchronized void syncChannels() {
         syncChannels(false);
     }
 
-    public synchronized Channel createChannel(final ChannelInfo channelInfo) {
-        Channel channel = null;
-        ChannelFeed channelFeed = channelClientService.createChannel(channelInfo);
-        if (channelFeed != null) {
-            ChannelFeed[] channelFeeds = new ChannelFeed[1];
-            channelFeeds[0] = channelFeed;
-            processChannelFeedList(channelFeeds, true);
-            channel = getChannel(channelFeed);
+    public synchronized AlResponse createChannel(final ChannelInfo channelInfo) {
+
+        if (channelInfo == null) {
+            return null;
         }
-        return channel;
+
+        AlResponse alResponse = new AlResponse();
+        ChannelFeedApiResponse channelFeedResponse = null;
+
+        try {
+            channelFeedResponse = channelClientService.createChannelWithResponse(channelInfo);
+
+            if (channelFeedResponse == null) {
+                return null;
+            }
+
+            if (channelFeedResponse.isSuccess()) {
+                alResponse.setStatus(AlResponse.SUCCESS);
+                ChannelFeed channelFeed = channelFeedResponse.getResponse();
+
+                if (channelFeed != null) {
+                    ChannelFeed[] channelFeeds = new ChannelFeed[1];
+                    channelFeeds[0] = channelFeed;
+                    processChannelFeedList(channelFeeds, true);
+                    alResponse.setResponse(getChannel(channelFeed));
+                }
+            } else {
+                alResponse.setStatus(AlResponse.ERROR);
+                alResponse.setResponse(channelFeedResponse.getErrorResponse());
+            }
+        } catch (Exception e) {
+            alResponse.setStatus(AlResponse.ERROR);
+            alResponse.setException(e);
+        }
+
+        return alResponse;
     }
 
     public Channel getChannel(ChannelFeed channelFeed) {
-        Channel channel = new Channel(channelFeed.getId(), channelFeed.getName(), channelFeed.getAdminName(), channelFeed.getType(), channelFeed.getUnreadCount(), channelFeed.getImageUrl());
+        Channel channel = new Channel(channelFeed.getId(), channelFeed.getName(), channelFeed
+                .getAdminName(), channelFeed.getType(), channelFeed.getUnreadCount(), channelFeed
+                .getImageUrl());
         channel.setClientGroupId(channelFeed.getClientGroupId());
         channel.setNotificationAfterTime(channelFeed.getNotificationAfterTime());
         channel.setDeletedAtTime(channelFeed.getDeletedAtTime());
@@ -256,7 +310,8 @@ public String removeMemberFromChannelProcess(String clientGroupId, String userId
         if (clientGroupId == null && TextUtils.isEmpty(userId)) {
             return "";
         }
-        ApiResponse apiResponse = channelClientService.removeMemberFromChannel(clientGroupId, userId);
+        ApiResponse apiResponse = channelClientService.removeMemberFromChannel(clientGroupId,
+                userId);
         if (apiResponse == null) {
             return null;
         }
@@ -267,6 +322,7 @@ public String removeMemberFromChannelProcess(String clientGroupId, String userId
 
     }
 
+    @Deprecated
     public String addMemberToChannelProcess(Integer channelKey, String userId) {
         if (channelKey == null && TextUtils.isEmpty(userId)) {
             return "";
@@ -282,6 +338,7 @@ public String addMemberToChannelProcess(Integer channelKey, String userId) {
         return apiResponse.getStatus();
     }
 
+    @Deprecated
     public String addMemberToChannelProcess(String clientGroupId, String userId) {
         if (TextUtils.isEmpty(clientGroupId) && TextUtils.isEmpty(userId)) {
             return "";
@@ -323,18 +380,21 @@ public String addMemberToMultipleChannelsProcess(Set<String> clientGroupIds, Str
         if (clientGroupIds == null && TextUtils.isEmpty(userId)) {
             return "";
         }
-        ApiResponse apiResponse = channelClientService.addMemberToMultipleChannelsByClientGroupIds(clientGroupIds, userId);
+        ApiResponse apiResponse = channelClientService
+                .addMemberToMultipleChannelsByClientGroupIds(clientGroupIds, userId);
         if (apiResponse == null) {
             return null;
         }
         return apiResponse.getStatus();
     }
 
-    public String addMemberToMultipleChannelsProcessByChannelKeys(Set<Integer> channelKeys, String userId) {
+    public String addMemberToMultipleChannelsProcessByChannelKeys(Set<Integer> channelKeys,
+                                                                  String userId) {
         if (channelKeys == null && TextUtils.isEmpty(userId)) {
             return "";
         }
-        ApiResponse apiResponse = channelClientService.addMemberToMultipleChannelsByChannelKey(channelKeys, userId);
+        ApiResponse apiResponse = channelClientService.addMemberToMultipleChannelsByChannelKey
+                (channelKeys, userId);
         if (apiResponse == null) {
             return null;
         }
@@ -383,7 +443,8 @@ public String updateChannel(GroupInfoUpdate groupInfoUpdate) {
         return apiResponse.getStatus();
     }
 
-    public synchronized String createConversation(Integer groupId, String userId, String agentId, String applicationId) {
+    public synchronized String createConversation(Integer groupId, String userId, String agentId,
+                                                  String applicationId) {
         return channelClientService.createConversation(groupId, userId, agentId, applicationId);
     }
 
@@ -409,7 +470,8 @@ public ChannelUserMapper getChannelUserMapperByUserId(Integer channelKey, String
     }
 
     public synchronized boolean processIsUserPresentInChannel(Integer channelKey) {
-        return channelDatabaseService.isChannelUserPresent(channelKey, MobiComUserPreference.getInstance(context).getUserId());
+        return channelDatabaseService.isChannelUserPresent(channelKey, MobiComUserPreference
+                .getInstance(context).getUserId());
     }
 
     public synchronized boolean isUserAlreadyPresentInChannel(Integer channelKey, String userId) {
@@ -418,7 +480,8 @@ public synchronized boolean isUserAlreadyPresentInChannel(Integer channelKey, St
 
     public synchronized boolean processIsUserPresentInChannel(String clientGroupId) {
         Channel channel = channelDatabaseService.getChannelByClientGroupId(clientGroupId);
-        return channelDatabaseService.isChannelUserPresent(channel.getKey(), MobiComUserPreference.getInstance(context).getUserId());
+        return channelDatabaseService.isChannelUserPresent(channel.getKey(),
+                MobiComUserPreference.getInstance(context).getUserId());
     }
 
     public synchronized boolean isUserAlreadyPresentInChannel(String clientGroupId, String userId) {
@@ -448,7 +511,8 @@ public ApiResponse muteNotifications(MuteNotificationRequest muteNotificationReq
             return null;
         }
         if (apiResponse.isSuccess()) {
-            channelDatabaseService.updateNotificationAfterTime(muteNotificationRequest.getId(), muteNotificationRequest.getNotificationAfterTime());
+            channelDatabaseService.updateNotificationAfterTime(muteNotificationRequest.getId(),
+                    muteNotificationRequest.getNotificationAfterTime());
         }
         return apiResponse;
     }
@@ -461,7 +525,8 @@ public Channel getChannelByClientGroupId(String clientGroupId) {
     }
 
     public ChannelFeedApiResponse createChannelWithResponse(ChannelInfo channelInfo) {
-        ChannelFeedApiResponse channelFeedApiResponse = channelClientService.createChannelWithResponse(channelInfo);
+        ChannelFeedApiResponse channelFeedApiResponse = channelClientService
+                .createChannelWithResponse(channelInfo);
         if (channelFeedApiResponse == null) {
             return null;
         }
@@ -495,16 +560,19 @@ public String getGroupOfTwoReceiverUserId(Integer channelKey) {
         return channelDatabaseService.getGroupOfTwoReceiverId(channelKey);
     }
 
+    @Deprecated
     public Channel createGroupOfTwo(ChannelInfo channelInfo) {
         if (channelInfo == null) {
             return null;
         }
         if (!TextUtils.isEmpty(channelInfo.getClientGroupId())) {
-            Channel channel = channelDatabaseService.getChannelByClientGroupId(channelInfo.getClientGroupId());
+            Channel channel = channelDatabaseService.getChannelByClientGroupId(channelInfo
+                    .getClientGroupId());
             if (channel != null) {
                 return channel;
             } else {
-                ChannelFeedApiResponse channelFeedApiResponse = channelClientService.createChannelWithResponse(channelInfo);
+                ChannelFeedApiResponse channelFeedApiResponse = channelClientService
+                        .createChannelWithResponse(channelInfo);
                 if (channelFeedApiResponse == null) {
                     return null;
                 }
@@ -517,7 +585,8 @@ public Channel createGroupOfTwo(ChannelInfo channelInfo) {
                         return getChannel(channelFeed);
                     }
                 } else {
-                    ChannelFeed channelFeed = channelClientService.getChannelInfo(channelInfo.getClientGroupId());
+                    ChannelFeed channelFeed = channelClientService.getChannelInfo(channelInfo
+                            .getClientGroupId());
                     if (channelFeed != null) {
                         ChannelFeed[] channelFeeds = new ChannelFeed[1];
                         channelFeeds[0] = channelFeed;
@@ -530,6 +599,51 @@ public Channel createGroupOfTwo(ChannelInfo channelInfo) {
         return null;
     }
 
+    public AlResponse createGroupOfTwoWithResponse(ChannelInfo channelInfo) {
+        if (channelInfo == null) {
+            return null;
+        }
+
+        AlResponse alResponse = new AlResponse();
+
+        if (!TextUtils.isEmpty(channelInfo.getClientGroupId())) {
+            Channel channel = channelDatabaseService.getChannelByClientGroupId(channelInfo
+                    .getClientGroupId());
+            if (channel != null) {
+                alResponse.setStatus(AlResponse.SUCCESS);
+                alResponse.setResponse(channel);
+            } else {
+                ChannelFeedApiResponse channelFeedApiResponse = channelClientService
+                        .createChannelWithResponse(channelInfo);
+                if (channelFeedApiResponse == null) {
+                    alResponse.setStatus(AlResponse.ERROR);
+                } else {
+                    if (channelFeedApiResponse.isSuccess()) {
+                        ChannelFeed channelFeed = channelFeedApiResponse.getResponse();
+                        if (channelFeed != null) {
+                            ChannelFeed[] channelFeeds = new ChannelFeed[1];
+                            channelFeeds[0] = channelFeed;
+                            processChannelFeedList(channelFeeds, true);
+                            alResponse.setStatus(AlResponse.SUCCESS);
+                            alResponse.setResponse(getChannel(channelFeed));
+                        }
+                    } else {
+                        ChannelFeed channelFeed = channelClientService.getChannelInfo(channelInfo
+                                .getClientGroupId());
+                        if (channelFeed != null) {
+                            ChannelFeed[] channelFeeds = new ChannelFeed[1];
+                            channelFeeds[0] = channelFeed;
+                            processChannelFeedList(channelFeeds, false);
+                            alResponse.setStatus(AlResponse.SUCCESS);
+                            alResponse.setResponse(getChannel(channelFeed));
+                        }
+                    }
+                }
+            }
+        }
+        return alResponse;
+    }
+
     public List<ChannelFeed> getGroupInfoFromGroupIds(List<String> groupIds) {
         return getGroupInfoFromGroupIds(groupIds, null);
     }
@@ -542,30 +656,37 @@ public Channel createGroupOfTwo(ChannelInfo channelInfo) {
         return channelDatabaseService.getChildGroupIds(parentGroupKey);
     }
 
-    public List<ChannelFeed> getGroupInfoFromGroupIds(List<String> groupIds, List<String> clientGroupIds) {
+    public List<ChannelFeed> getGroupInfoFromGroupIds(List<String> groupIds, List<String>
+            clientGroupIds) {
 
-        ChannelFeedListResponse channelFeedList = channelClientService.getGroupInfoFromGroupIds(groupIds, clientGroupIds);
+        ChannelFeedListResponse channelFeedList = channelClientService.getGroupInfoFromGroupIds
+                (groupIds, clientGroupIds);
 
         if (channelFeedList == null) {
             return null;
         }
 
-        if (channelFeedList != null && ChannelFeedListResponse.SUCCESS.equals(channelFeedList.getStatus())) {
-            processChannelFeedList(channelFeedList.getResponse().toArray(new ChannelFeed[channelFeedList.getResponse().size()]), false);
+        if (channelFeedList != null && ChannelFeedListResponse.SUCCESS.equals(channelFeedList
+                .getStatus())) {
+            processChannelFeedList(channelFeedList.getResponse().toArray(new
+                    ChannelFeed[channelFeedList.getResponse().size()]), false);
         }
 
         return channelFeedList.getResponse();
     }
 
-    public boolean addMemberToContactGroup(String contactGroupId, String groupType, List<String> contactGroupMemberList) {
+    public boolean addMemberToContactGroup(String contactGroupId, String groupType, List<String>
+            contactGroupMemberList) {
 
         ApiResponse apiResponse = null;
         if (!TextUtils.isEmpty(contactGroupId) && contactGroupMemberList != null) {
             if (!TextUtils.isEmpty(groupType)) {
-                apiResponse = channelClientService.addMemberToContactGroupOfType(contactGroupId, groupType, contactGroupMemberList);
+                apiResponse = channelClientService.addMemberToContactGroupOfType(contactGroupId,
+                        groupType, contactGroupMemberList);
 
             } else {
-                apiResponse = channelClientService.addMemberToContactGroup(contactGroupId, contactGroupMemberList);
+                apiResponse = channelClientService.addMemberToContactGroup(contactGroupId,
+                        contactGroupMemberList);
             }
         }
 
@@ -579,7 +700,8 @@ public ChannelFeed getMembersFromContactGroup(String contactGroupId, String grou
         ChannelFeed channelFeed = null;
         if (!TextUtils.isEmpty(contactGroupId)) {
             if (!TextUtils.isEmpty(groupType)) {
-                channelFeed = channelClientService.getMembersFromContactGroupOfType(contactGroupId, groupType);
+                channelFeed = channelClientService.getMembersFromContactGroupOfType
+                        (contactGroupId, groupType);
             } else {
                 channelFeed = channelClientService.getMembersFromContactGroup(contactGroupId);
             }
@@ -588,29 +710,36 @@ public ChannelFeed getMembersFromContactGroup(String contactGroupId, String grou
             ChannelFeed[] channelFeeds = new ChannelFeed[1];
             channelFeeds[0] = channelFeed;
             processChannelFeedList(channelFeeds, false);
-            UserService.getInstance(context).processUserDetails(channelFeed.getContactGroupMembersId());
+            UserService.getInstance(context).processUserDetails(channelFeed
+                    .getContactGroupMembersId());
             return channelFeed;
         }
         return null;
     }
 
-    public ChannelFeed[] getMembersFromContactGroupList(List<String> groupIdList, List<String> groupNames, String groupType) {
+    public ChannelFeed[] getMembersFromContactGroupList(List<String> groupIdList, List<String>
+            groupNames, String groupType) {
         List<ChannelFeed> channelFeedList;
 
-        ChannelFeedListResponse channelFeedListResponse = channelClientService.getMemebersFromContactGroupIds(groupIdList, groupNames, groupType);
-        if (channelFeedListResponse != null && channelFeedListResponse.getStatus().equals(ChannelFeedListResponse.SUCCESS)) {
+        ChannelFeedListResponse channelFeedListResponse = channelClientService
+                .getMemebersFromContactGroupIds(groupIdList, groupNames, groupType);
+        if (channelFeedListResponse != null && channelFeedListResponse.getStatus().equals
+                (ChannelFeedListResponse.SUCCESS)) {
             channelFeedList = channelFeedListResponse.getResponse();
-            processChannelFeedList(channelFeedList.toArray(new ChannelFeed[channelFeedList.size()]), false);
+            processChannelFeedList(channelFeedList.toArray(new ChannelFeed[channelFeedList.size()
+                    ]), false);
             return channelFeedList.toArray(new ChannelFeed[channelFeedList.size()]);
         }
 
         return null;
     }
 
-    public ApiResponse removeMemberFromContactGroup(String contactGroupId, String groupType, String userId) {
+    public ApiResponse removeMemberFromContactGroup(String contactGroupId, String groupType,
+                                                    String userId) {
         ApiResponse apiResponse;
         if (!TextUtils.isEmpty(contactGroupId) && !TextUtils.isEmpty(userId)) {
-            apiResponse = channelClientService.removeMemberFromContactGroupOfType(contactGroupId, groupType, userId);
+            apiResponse = channelClientService.removeMemberFromContactGroupOfType(contactGroupId,
+                    groupType, userId);
             return apiResponse;
         }
         return null;
@@ -630,7 +759,8 @@ public void processChannelFeedForSync(ChannelFeed channelFeed) {
             }
             if (memberUserIds != null && memberUserIds.size() > 0) {
                 for (String userId : memberUserIds) {
-                    ChannelUserMapper channelUserMapper = new ChannelUserMapper(channelFeed.getId(), userId);
+                    ChannelUserMapper channelUserMapper = new ChannelUserMapper(channelFeed.getId
+                            (), userId);
                     channelUserMapper.setParentKey(channelFeed.getParentKey());
                     channelDatabaseService.addChannelUserMapper(channelUserMapper);
                     if (!baseContactService.isContactExists(userId)) {
@@ -645,7 +775,8 @@ public void processChannelFeedForSync(ChannelFeed channelFeed) {
             if (channelFeed.getGroupUsers() != null && channelFeed.getGroupUsers().size() > 0) {
                 for (ChannelUsersFeed channelUsers : channelFeed.getGroupUsers()) {
                     if (channelUsers.getRole() != null) {
-                        channelDatabaseService.updateRoleInChannelUserMapper(channelFeed.getId(), channelUsers.getUserId(), channelUsers.getRole());
+                        channelDatabaseService.updateRoleInChannelUserMapper(channelFeed.getId(),
+                                channelUsers.getUserId(), channelUsers.getRole());
                     }
                 }
             }
@@ -686,5 +817,4 @@ private void processChildGroupKeysForChannelSync(Set<Integer> childGroupKeys) {
     public Integer getParentGroupKeyByClientGroupKey(String parentClientGroupKey) {
         return channelDatabaseService.getParentGroupKey(parentClientGroupKey);
     }
-
-}
+}
\ No newline at end of file
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/database/ContactDatabase.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/database/ContactDatabase.java
index d52023e2..7108f9fd 100755
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/database/ContactDatabase.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/contact/database/ContactDatabase.java
@@ -152,23 +152,27 @@ private String getContactName(String contactNumber) {
     }
 
     public Contact getContactById(String id) {
-        if (TextUtils.isEmpty(id)) {
-            return null;
-        }
-        String structuredNameWhere = MobiComDatabaseHelper.USERID + " =?";
-        SQLiteDatabase db = dbHelper.getWritableDatabase();
-        Cursor cursor = db.query(CONTACT, null, structuredNameWhere, new String[]{id}, null, null, null);
-        Contact contact = null;
-        if (cursor != null) {
-            if (cursor.getCount() > 0) {
-                cursor.moveToFirst();
-                contact = getContact(cursor);
+        try {
+            if (TextUtils.isEmpty(id)) {
+                return null;
             }
-            cursor.close();
-        }
-        dbHelper.close();
-        return contact;
+            String structuredNameWhere = MobiComDatabaseHelper.USERID + " =?";
+            SQLiteDatabase db = dbHelper.getWritableDatabase();
+            Cursor cursor = db.query(CONTACT, null, structuredNameWhere, new String[]{id}, null, null, null);
+            Contact contact = null;
+            if (cursor != null) {
+                if (cursor.getCount() > 0) {
+                    cursor.moveToFirst();
+                    contact = getContact(cursor);
+                }
+                cursor.close();
+            }
+            dbHelper.close();
+            return contact;
+        } catch (Exception e) {
 
+        }
+        return null;
     }
 
     public void updateContact(Contact contact) {
@@ -648,7 +652,7 @@ public void saveOrUpdate(Contact contact) {
         } else {
             if (Contact.ContactType.DEVICE_AND_APPLOZIC.getValue().equals(existingContact.getDeviceContactType())) {
                 contact.setDeviceContactType(existingContact.getDeviceContactType());
-            }else if(Contact.ContactType.DEVICE_AND_APPLOZIC.getValue().equals(contact.getDeviceContactType())){
+            } else if (Contact.ContactType.DEVICE_AND_APPLOZIC.getValue().equals(contact.getDeviceContactType())) {
                 contact.setDeviceContactType(existingContact.getDeviceContactType());
             }
             updateContact(contact);
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/AlResponse.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/AlResponse.java
new file mode 100644
index 00000000..85be70a5
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/feed/AlResponse.java
@@ -0,0 +1,38 @@
+package com.applozic.mobicomkit.feed;
+
+public class AlResponse {
+
+    public static final String SUCCESS = "success";
+    public static final String ERROR = "error";
+    private String status;
+    private Object response;
+    private Exception exception;
+
+    public String getStatus() {
+        return status;
+    }
+
+    public void setStatus(String status) {
+        this.status = status;
+    }
+
+    public Object getResponse() {
+        return response;
+    }
+
+    public void setResponse(Object response) {
+        this.response = response;
+    }
+
+    public boolean isSuccess() {
+        return SUCCESS.equals(status);
+    }
+
+    public Exception getException() {
+        return exception;
+    }
+
+    public void setException(Exception exception) {
+        this.exception = exception;
+    }
+}
\ No newline at end of file
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/listners/AlConstantsHandler.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/listners/AlConstantsHandler.java
new file mode 100644
index 00000000..5fc92ebb
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/listners/AlConstantsHandler.java
@@ -0,0 +1,5 @@
+package com.applozic.mobicomkit.listners;
+
+public interface AlConstantsHandler {
+    String[] getNotificationTexts();
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/listners/ConversationListHandler.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/listners/ConversationListHandler.java
new file mode 100644
index 00000000..cc4d2cdb
--- /dev/null
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/listners/ConversationListHandler.java
@@ -0,0 +1,12 @@
+package com.applozic.mobicomkit.listners;
+
+import android.content.Context;
+
+import com.applozic.mobicomkit.api.conversation.AlConversation;
+import com.applozic.mobicomkit.exception.ApplozicException;
+
+import java.util.List;
+
+public interface ConversationListHandler {
+    void onResult(Context context, List<AlConversation> conversationList, ApplozicException e);
+}
diff --git a/mobicomkit/src/main/java/com/applozic/mobicomkit/listners/MediaUploadProgressHandler.java b/mobicomkit/src/main/java/com/applozic/mobicomkit/listners/MediaUploadProgressHandler.java
index e4a6118b..138e471b 100644
--- a/mobicomkit/src/main/java/com/applozic/mobicomkit/listners/MediaUploadProgressHandler.java
+++ b/mobicomkit/src/main/java/com/applozic/mobicomkit/listners/MediaUploadProgressHandler.java
@@ -8,13 +8,13 @@
  */
 
 public interface MediaUploadProgressHandler {
-    void onUploadStarted(ApplozicException e);
+    void onUploadStarted(ApplozicException e, String oldMessageKey);
 
-    void onProgressUpdate(int percentage, ApplozicException e);
+    void onProgressUpdate(int percentage, ApplozicException e, String oldMessageKey);
 
-    void onCancelled(ApplozicException e);
+    void onCancelled(ApplozicException e, String oldMessageKey);
 
-    void onCompleted(ApplozicException e);
+    void onCompleted(ApplozicException e, String oldMessageKey);
 
-    void onSent(Message message);
+    void onSent(Message message, String oldMessageKey);
 }
diff --git a/mobicomkitui/build.gradle b/mobicomkitui/build.gradle
index 64173a2f..993e3138 100755
--- a/mobicomkitui/build.gradle
+++ b/mobicomkitui/build.gradle
@@ -8,7 +8,7 @@ android {
         minSdkVersion 14
         targetSdkVersion 27
         versionCode 1
-        versionName "5.8.8"
+        versionName "5.11"
     }
     buildTypes {
         release {
@@ -28,18 +28,18 @@ dependencies {
     implementation 'com.android.support:support-v4:27.1.1'
     implementation 'com.android.support:appcompat-v7:27.1.1'
     api 'com.google.code.gson:gson:2.8.5'
-    api 'com.google.firebase:firebase-messaging:17.0.0'
+    api 'com.google.firebase:firebase-messaging:17.3.0'
     api 'com.google.android.gms:play-services-maps:15.0.1'
     api 'com.google.android.gms:play-services-location:15.0.1'
-    implementation 'de.hdodenhof:circleimageview:2.0.0'
-    api 'com.android.support:design:27.1.1'
+    implementation 'de.hdodenhof:circleimageview:2.2.0'
+    implementation 'com.android.support:design:27.1.1'
     implementation 'com.theartofdev.edmodo:android-image-cropper:2.7.0'
     implementation 'com.github.bumptech.glide:glide:4.7.1'
     implementation 'com.android.support:cardview-v7:27.1.1'
     implementation 'com.android.support.constraint:constraint-layout:1.1.2'
     api project(':mobicomkit')
     //Note: use this for customization
-    //api 'com.applozic.communication.message:mobicomkit:5.8.7' //Note: use this in case customization is not required
+    //api 'com.applozic.communication.message:mobicomkit:5.11' //Note: use this in case customization is not required
 }
 
 /* ext {
@@ -56,7 +56,7 @@ dependencies {
     artifact = 'mobicomkitui'
 
     libraryDescription = 'Applozic Communication UI Widget'
-    libraryVersion = '5.8.8'
+    libraryVersion = '5.11'
 
     developerId = 'devashish'
     developerName = 'Applozic'
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/AlCustomizationSettings.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/AlCustomizationSettings.java
index 45784674..79b376f9 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/AlCustomizationSettings.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/AlCustomizationSettings.java
@@ -106,8 +106,14 @@
     private boolean enableImageCompression = false;
     private boolean disableGlobalStoragePermission = false;
     private boolean enableMessageFastScroll = false;
+    private boolean isContactSearchFromServer = false;
+    private String messageSearchTextColor = "#5fba7d";
+    private int notificationDisableThreshold = 0;
+    private boolean hideGroupDeleteButton = false;
 
-    private boolean launchChatFromProfilePicOrName;
+    private boolean launchChatFromProfilePicOrName = false;
+
+    private boolean showImageOnToolbar = false;
 
     private Map<String, Boolean> attachmentOptions;
 
@@ -554,6 +560,26 @@ public boolean isMessageFastScrollEnabled() {
         return enableMessageFastScroll;
     }
 
+    public boolean isContactSearchFromServer() {
+        return isContactSearchFromServer;
+    }
+
+    public String getMessageSearchTextColor() {
+        return messageSearchTextColor;
+    }
+
+    public int getNotificationDisableThreshold() {
+        return notificationDisableThreshold;
+    }
+
+    public boolean isHideGroupDeleteButton() {
+        return hideGroupDeleteButton;
+    }
+
+    public boolean isShowImageOnToolbar() {
+        return showImageOnToolbar;
+    }
+
     @Override
     public String toString() {
         return "AlCustomizationSettings{" +
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/ApplozicSetting.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/ApplozicSetting.java
index 61c52596..3185cef2 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/ApplozicSetting.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/ApplozicSetting.java
@@ -67,10 +67,13 @@
     private static final String USER_PROFILE_FRAGMENT = "PROFILE_LOGOUT_BUTTON";
     private static final String MESSAGE_SEARCH_OPTION = "MESSAGE_SEARCH_OPTION";
     private static final String ACTIVITY_CALLBACK = "ACTIVITY_CALLBACK_";
+    private static final String DELETE_CONVERSATION_OPTION = "DELETE_CONVERSATION_OPTION";
     public static ApplozicSetting applozicSetting;
     public SharedPreferences sharedPreferences;
     private Context context;
 
+    private static final String SHOW_IMAGE_ON_TOOLBAR = "SHOW_IMAGE_ON_TOOLBAR";
+
     private ApplozicSetting(Context context) {
         this.context = context;
         sharedPreferences = context.getSharedPreferences(MobiComKitClientService.getApplicationKey(context), context.MODE_PRIVATE);
@@ -659,6 +662,28 @@ public boolean isMessageSearchEnabled() {
         return sharedPreferences.getBoolean(MESSAGE_SEARCH_OPTION, false);
     }
 
+    public ApplozicSetting enableShowImageOnToolbar() {
+        sharedPreferences.edit().putBoolean(SHOW_IMAGE_ON_TOOLBAR, true).commit();
+        return this;
+    }
+
+    public ApplozicSetting disableShowImageOnToolbar() {
+        sharedPreferences.edit().putBoolean(SHOW_IMAGE_ON_TOOLBAR, false).commit();
+        return this;
+    }
+
+    public boolean isShowImageOnToolbar() {
+        return sharedPreferences.getBoolean(SHOW_IMAGE_ON_TOOLBAR, false);
+    }
+
+    public boolean isDeleteConversationOption() {
+        return sharedPreferences.getBoolean(DELETE_CONVERSATION_OPTION, false);
+    }
+
+    public void setDeleteConversationOption(boolean enable) {
+        sharedPreferences.edit().putBoolean(DELETE_CONVERSATION_OPTION, enable).commit();
+    }
+
     public boolean clearAll() {
         return sharedPreferences.edit().clear().commit();
     }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelCreateTask.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelCreateTask.java
index 49c93833..175cb143 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelCreateTask.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelCreateTask.java
@@ -6,6 +6,7 @@
 
 import com.applozic.mobicomkit.api.people.ChannelInfo;
 import com.applozic.mobicomkit.channel.service.ChannelService;
+import com.applozic.mobicomkit.feed.AlResponse;
 import com.applozic.mobicommons.people.channel.Channel;
 
 import java.util.List;
@@ -61,7 +62,9 @@ protected Boolean doInBackground(Void... params) {
                     channelInfo.setClientGroupId(clientGroupId);
                 }
                 channelInfo.setType(type);
-                channel = channelService.createChannel(channelInfo);
+
+                AlResponse alResponse = channelService.createChannel(channelInfo);
+                channel = (Channel) channelService.createChannel(channelInfo).getResponse();
                 return channel != null;
             }
             return false;
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelMetaDataUpdateTask.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelMetaDataUpdateTask.java
index bd19ab00..ffdcc49b 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelMetaDataUpdateTask.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/async/ApplozicChannelMetaDataUpdateTask.java
@@ -36,6 +36,14 @@ public ApplozicChannelMetaDataUpdateTask(Context context, Integer channelKey, Ma
         this.channelService = ChannelService.getInstance(context);
     }
 
+    public ApplozicChannelMetaDataUpdateTask(Context context, String clientGroupId, Map<String, String> metadata, ChannelMetaDataUpdateListener channelMetaDataUpdateListener) {
+        this.clientGroupId = clientGroupId;
+        this.metadata = metadata;
+        this.channelMetaDataUpdateListener = channelMetaDataUpdateListener;
+        this.context = context;
+        this.channelService = ChannelService.getInstance(context);
+    }
+
     @Override
     protected Boolean doInBackground(Void... params) {
         try {
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/ConversationUIService.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/ConversationUIService.java
index dfdae832..02301c3d 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/ConversationUIService.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/ConversationUIService.java
@@ -218,7 +218,9 @@ public void onActivityResult(int requestCode, int resultCode, Intent intent) {
                             public void onScanCompleted(String path, Uri uri) {
                             }
                         });
-                getConversationFragment().loadFile(selectedFileUri, file);
+                if (getConversationFragment() != null) {
+                    getConversationFragment().loadFile(selectedFileUri, file);
+                }
                 Utils.printLog(fragmentActivity, TAG, "File uri: " + selectedFileUri);
             }
 
@@ -235,7 +237,7 @@ public void onScanCompleted(String path, Uri uri) {
                     FileUtils.getLastModifiedFile(Environment.getExternalStorageDirectory().getAbsolutePath() + "/DCIM/Camera/").renameTo(file);
                 }
 
-                if (selectedFilePath != null) {
+                if (selectedFilePath != null && getConversationFragment() != null) {
                     getConversationFragment().loadFile(selectedFilePath, file);
                     getConversationFragment().sendMessage("", Message.ContentType.VIDEO_MSG.getValue());
                 }
@@ -246,7 +248,7 @@ public void onScanCompleted(String path, Uri uri) {
                 try {
                     File vCradFile = new ContactService(fragmentActivity).vCard(intent.getData());
 
-                    if (vCradFile != null) {
+                    if (vCradFile != null && getConversationFragment() != null) {
                         getConversationFragment().sendMessage(Message.ContentType.CONTACT_MSG.getValue(), vCradFile.getAbsolutePath());
                     }
 
@@ -262,8 +264,10 @@ public void onScanCompleted(String path, Uri uri) {
 
                 //TODO: check performance, we might need to put in each posting in separate thread.
 
-                for (Uri info : attachmentList) {
-                    getConversationFragment().sendMessage(messageText, Message.ContentType.ATTACHMENT.getValue(), info.toString());
+                if (getConversationFragment() != null) {
+                    for (Uri info : attachmentList) {
+                        getConversationFragment().sendMessage(messageText, Message.ContentType.ATTACHMENT.getValue(), info.toString());
+                    }
                 }
 
             }
@@ -403,14 +407,18 @@ public void updateLatestMessage(Message message, String formattedContactNumber)
         if (!BroadcastService.isQuick()) {
             return;
         }
-        getQuickConversationFragment().updateLatestMessage(message, formattedContactNumber);
+        if (getQuickConversationFragment() != null) {
+            getQuickConversationFragment().updateLatestMessage(message, formattedContactNumber);
+        }
     }
 
     public void removeConversation(Message message, String formattedContactNumber) {
         if (!BroadcastService.isQuick()) {
             return;
         }
-        getQuickConversationFragment().removeConversation(message, formattedContactNumber);
+        if (getQuickConversationFragment() != null) {
+            getQuickConversationFragment().removeConversation(message, formattedContactNumber);
+        }
     }
 
     public void addMessage(Message message) {
@@ -434,14 +442,19 @@ public void updateLastMessage(String keyString, String userId) {
         if (!BroadcastService.isQuick()) {
             return;
         }
-        getQuickConversationFragment().updateLastMessage(keyString, userId);
+        if (getQuickConversationFragment() != null) {
+            getQuickConversationFragment().updateLastMessage(keyString, userId);
+        }
     }
 
     public boolean isBroadcastedToGroup(Integer channelKey) {
         if (!BroadcastService.isIndividual()) {
             return false;
         }
-        return getConversationFragment().isBroadcastedToChannel(channelKey);
+        if (getConversationFragment() != null) {
+            return getConversationFragment().isBroadcastedToChannel(channelKey);
+        }
+        return false;
     }
 
     public void syncMessages(Message message, String keyString) {
@@ -449,7 +462,7 @@ public void syncMessages(Message message, String keyString) {
 
             if (BroadcastService.isIndividual()) {
                 ConversationFragment conversationFragment = getConversationFragment();
-                if (conversationFragment.isMsgForConversation(message) && !Message.GroupMessageMetaData.TRUE.getValue().equals(message.getMetaDataValueForKey(Message.GroupMessageMetaData.HIDE_KEY.getValue()))) {
+                if (conversationFragment != null && conversationFragment.isMsgForConversation(message) && !Message.GroupMessageMetaData.TRUE.getValue().equals(message.getMetaDataValueForKey(Message.GroupMessageMetaData.HIDE_KEY.getValue()))) {
                     conversationFragment.addMessage(message);
                 }
             }
@@ -464,21 +477,27 @@ public void updateLastMessage(Message message) {
         if (!BroadcastService.isQuick()) {
             return;
         }
-        getQuickConversationFragment().updateLastMessage(message);
+        if (getQuickConversationFragment() != null) {
+            getQuickConversationFragment().updateLastMessage(message);
+        }
     }
 
     public void downloadConversations(boolean showInstruction) {
         if (!BroadcastService.isQuick()) {
             return;
         }
-        getQuickConversationFragment().downloadConversations(showInstruction, null);
+        if (getQuickConversationFragment() != null) {
+            getQuickConversationFragment().downloadConversations(showInstruction, null);
+        }
     }
 
     public void setLoadMore(boolean loadMore) {
         if (!BroadcastService.isQuick()) {
             return;
         }
-        getQuickConversationFragment().setLoadMore(loadMore);
+        if (getQuickConversationFragment() != null) {
+            getQuickConversationFragment().setLoadMore(loadMore);
+        }
     }
 
     public void updateMessageKeyString(Message message) {
@@ -487,7 +506,7 @@ public void updateMessageKeyString(Message message) {
         }
         String userId = message.getContactIds();
         ConversationFragment conversationFragment = getConversationFragment();
-        if (!TextUtils.isEmpty(userId) && conversationFragment.getContact() != null && userId.equals(conversationFragment.getContact().getUserId()) ||
+        if (conversationFragment != null && !TextUtils.isEmpty(userId) && conversationFragment.getContact() != null && userId.equals(conversationFragment.getContact().getUserId()) ||
                 conversationFragment.getCurrentChannelKey(message.getGroupId())) {
             conversationFragment.updateMessageKeyString(message);
         }
@@ -495,19 +514,19 @@ public void updateMessageKeyString(Message message) {
 
     public void deleteMessage(String keyString, String userId) {
         updateLastMessage(keyString, userId);
-        if (BroadcastService.isIndividual()) {
+        if (BroadcastService.isIndividual() && getConversationFragment() != null) {
             getConversationFragment().deleteMessageFromDeviceList(keyString);
         }
     }
 
     public void updateLastSeenStatus(String contactId) {
-        if (BroadcastService.isQuick()) {
+        if (BroadcastService.isQuick() && getQuickConversationFragment() != null) {
             getQuickConversationFragment().updateLastSeenStatus(contactId);
             return;
         }
         if (BroadcastService.isIndividual()) {
             ConversationFragment conversationFragment = getConversationFragment();
-            if (conversationFragment.getContact() != null && contactId.equals(conversationFragment.getContact().getContactIds()) || conversationFragment.getChannel() != null) {
+            if (conversationFragment != null && conversationFragment.getContact() != null && contactId.equals(conversationFragment.getContact().getContactIds()) || conversationFragment.getChannel() != null) {
                 conversationFragment.updateLastSeenStatus();
             }
         }
@@ -526,7 +545,7 @@ private void updateStatus(String contactId, boolean markRead) {
             return;
         }
         ConversationFragment conversationFragment = getConversationFragment();
-        if (!TextUtils.isEmpty(contactId) && conversationFragment.getContact() != null && contactId.equals(conversationFragment.getContact().getContactIds())) {
+        if (conversationFragment != null && !TextUtils.isEmpty(contactId) && conversationFragment.getContact() != null && contactId.equals(conversationFragment.getContact().getContactIds())) {
             conversationFragment.updateDeliveryStatusForAllMessages(markRead);
         }
     }
@@ -536,14 +555,14 @@ public void updateDeliveryStatus(Message message, String formattedContactNumber)
             return;
         }
         ConversationFragment conversationFragment = getConversationFragment();
-        if (conversationFragment.isMessageForCurrentConversation(message)) {
+        if (conversationFragment != null && conversationFragment.isMessageForCurrentConversation(message)) {
             conversationFragment.updateDeliveryStatus(message);
         }
     }
 
     public void deleteConversation(Contact contact, Integer channelKey, String response) {
         if (BroadcastService.isIndividual()) {
-            if ("success".equals(response)) {
+            if ("success".equals(response) && getConversationFragment() != null) {
                 getConversationFragment().clearList();
             } else {
                 if (!Utils.isInternetAvailable(fragmentActivity)) {
@@ -554,7 +573,7 @@ public void deleteConversation(Contact contact, Integer channelKey, String respo
             }
 
         }
-        if (BroadcastService.isQuick()) {
+        if (BroadcastService.isQuick() && getQuickConversationFragment() != null) {
             getQuickConversationFragment().removeConversation(contact, channelKey, response);
         }
     }
@@ -563,25 +582,31 @@ public void updateUploadFailedStatus(Message message) {
         if (!BroadcastService.isIndividual()) {
             return;
         }
-        getConversationFragment().updateUploadFailedStatus(message);
+        if (getConversationFragment() != null) {
+            getConversationFragment().updateUploadFailedStatus(message);
+        }
     }
 
     public void updateDownloadFailed(Message message) {
         if (!BroadcastService.isIndividual()) {
             return;
         }
-        getConversationFragment().downloadFailed(message);
+        if (getConversationFragment() != null) {
+            getConversationFragment().downloadFailed(message);
+        }
     }
 
     public void updateDownloadStatus(Message message) {
         if (!BroadcastService.isIndividual()) {
             return;
         }
-        getConversationFragment().updateDownloadStatus(message);
+        if (getConversationFragment() != null) {
+            getConversationFragment().updateDownloadStatus(message);
+        }
     }
 
     public void updateChannelName() {
-        if (BroadcastService.isQuick()) {
+        if (BroadcastService.isQuick() && getQuickConversationFragment() != null) {
             getQuickConversationFragment().updateChannelName();
         }
     }
@@ -592,7 +617,7 @@ public void updateTypingStatus(String userId, String isTypingStatus) {
         }
         ConversationFragment conversationFragment = getConversationFragment();
         Utils.printLog(fragmentActivity, TAG, "Received typing status for: " + userId);
-        if (conversationFragment.getContact() != null && userId.equals(conversationFragment.getContact().getContactIds()) || conversationFragment.getChannel() != null) {
+        if (conversationFragment != null && conversationFragment.getContact() != null && userId.equals(conversationFragment.getContact().getContactIds()) || conversationFragment.getChannel() != null) {
             conversationFragment.updateUserTypingStatus(userId, isTypingStatus);
         }
 
@@ -602,7 +627,7 @@ public void updateChannelSync(boolean isMetaDataUpdate) {
         if (BroadcastService.isChannelInfo()) {
             BroadcastService.sendUpdateGroupInfoBroadcast(fragmentActivity, BroadcastService.INTENT_ACTIONS.UPDATE_GROUP_INFO.toString());
         }
-        if (BroadcastService.isIndividual()) {
+        if (BroadcastService.isIndividual() && getConversationFragment() != null) {
             if (!isMetaDataUpdate) {
                 getConversationFragment().updateChannelTitleAndSubTitle();
             } else {
@@ -619,7 +644,7 @@ public void updateTitleAndSubtitle() {
         if (!BroadcastService.isIndividual()) {
             return;
         }
-        if (BroadcastService.isIndividual()) {
+        if (BroadcastService.isIndividual() && getConversationFragment() != null) {
             getConversationFragment().updateTitleForOpenGroup();
         }
     }
@@ -629,7 +654,7 @@ public void updateUserInfo(String userId) {
             return;
         }
 
-        if (BroadcastService.isQuick()) {
+        if (BroadcastService.isQuick() && getQuickConversationFragment() != null) {
             getQuickConversationFragment().updateUserInfo(userId);
             return;
         }
@@ -641,7 +666,7 @@ public void updateUserInfo(String userId) {
         }
         if (BroadcastService.isIndividual()) {
             ConversationFragment conversationFragment = getConversationFragment();
-            if (conversationFragment.getContact() != null && userId.equals(conversationFragment.getContact().getContactIds()) || conversationFragment.getChannel() != null) {
+            if (conversationFragment != null && conversationFragment.getContact() != null && userId.equals(conversationFragment.getContact().getContactIds()) || conversationFragment.getChannel() != null) {
                 conversationFragment.reload();
             }
         }
@@ -656,7 +681,7 @@ public void updateConversationRead(String currentId, boolean isGroup) {
         if (!BroadcastService.isIndividual()) {
             notificationManager.cancel(currentId.hashCode());
         }
-        if (BroadcastService.isQuick()) {
+        if (BroadcastService.isQuick() && getQuickConversationFragment() != null) {
             getQuickConversationFragment().updateConversationRead(currentId, isGroup);
         }
     }
@@ -717,7 +742,7 @@ public void sendPriceMessage() {
             alertDialog.setPositiveButton(fragmentActivity.getString(R.string.send_text),
                     new DialogInterface.OnClickListener() {
                         public void onClick(DialogInterface dialog, int which) {
-                            if (!TextUtils.isEmpty(inputText.getText().toString())) {
+                            if (!TextUtils.isEmpty(inputText.getText().toString()) && getConversationFragment() != null) {
                                 getConversationFragment().sendMessage(inputText.getText().toString(), Message.ContentType.PRICE.getValue());
                             }
                         }
@@ -743,12 +768,16 @@ public void sendAudioMessage(String selectedFilePath) {
 
         Utils.printLog(fragmentActivity, "ConversationUIService:", "Send audio message ...");
 
-        getConversationFragment().sendMessage(Message.ContentType.AUDIO_MSG.getValue(), selectedFilePath);
+        if (getConversationFragment() != null) {
+            getConversationFragment().sendMessage(Message.ContentType.AUDIO_MSG.getValue(), selectedFilePath);
+        }
 
     }
 
     public void updateMessageMetadata(String keyString) {
-        getConversationFragment().updateMessageMetadata(keyString);
+        if (getConversationFragment() != null) {
+            getConversationFragment().updateMessageMetadata(keyString);
+        }
     }
 
     public void muteUserChat(boolean mute, String userId) {
@@ -821,7 +850,7 @@ public void checkForStartNewConversation(Intent intent) {
         boolean firstTimeMTexterFriend = intent.getBooleanExtra(FIRST_TIME_MTEXTER_FRIEND, false);
         if (!TextUtils.isEmpty(contactNumber)) {
             contact = baseContactService.getContactById(contactNumber);
-            if (BroadcastService.isIndividual()) {
+            if (BroadcastService.isIndividual() && getConversationFragment() != null) {
                 getConversationFragment().setFirstTimeMTexterFriend(firstTimeMTexterFriend);
             }
         }
@@ -863,7 +892,7 @@ public void checkForStartNewConversation(Intent intent) {
         if (conversationId == null) {
             conversationId = intent.getIntExtra(CONVERSATION_ID, 0);
         }
-        if (conversationId != 0 && conversationId != null) {
+        if (conversationId != 0 && conversationId != null && getConversationFragment() != null) {
             getConversationFragment().setConversationId(conversationId);
         } else {
             conversationId = null;
@@ -875,14 +904,16 @@ public void checkForStartNewConversation(Intent intent) {
         }
 
         String defaultText = intent.getStringExtra(ConversationUIService.DEFAULT_TEXT);
-        if (!TextUtils.isEmpty(defaultText)) {
+        if (!TextUtils.isEmpty(defaultText) && getConversationFragment() != null) {
             getConversationFragment().setDefaultText(defaultText);
         }
 
         String forwardMessage = intent.getStringExtra(MobiComKitPeopleActivity.FORWARD_MESSAGE);
         if (!TextUtils.isEmpty(forwardMessage)) {
             Message messageToForward = (Message) GsonUtils.getObjectFromJson(forwardMessage, Message.class);
-            getConversationFragment().forwardMessage(messageToForward, contact, channel);
+            if (getConversationFragment() != null) {
+                getConversationFragment().forwardMessage(messageToForward, contact, channel);
+            }
         }
 
         if (contact != null) {
@@ -899,13 +930,15 @@ public void checkForStartNewConversation(Intent intent) {
                 FileMeta fileMeta = new FileMeta();
                 fileMeta.setContentType("image");
                 fileMeta.setBlobKeyString(productImageUrl);
-                getConversationFragment().sendProductMessage(productTopicId, fileMeta, contact, Message.ContentType.TEXT_URL.getValue());
+                if (getConversationFragment() != null) {
+                    getConversationFragment().sendProductMessage(productTopicId, fileMeta, contact, Message.ContentType.TEXT_URL.getValue());
+                }
             } catch (Exception e) {
             }
         }
 
         String sharedText = intent.getStringExtra(MobiComKitPeopleActivity.SHARED_TEXT);
-        if (!TextUtils.isEmpty(sharedText)) {
+        if (!TextUtils.isEmpty(sharedText) && getConversationFragment() != null) {
             getConversationFragment().sendMessage(sharedText);
         }
 
@@ -935,7 +968,9 @@ public void reconnectMQTT() {
     }
 
     public void sendLocation(String position) {
-        getConversationFragment().sendMessage(position, Message.ContentType.LOCATION.getValue());
+        if (getConversationFragment() != null) {
+            getConversationFragment().sendMessage(position, Message.ContentType.LOCATION.getValue());
+        }
     }
 
     public void processLoadUsers(boolean isRegisteredUserCall, final Message message, final String messageContent, int totalRegisteredUsers, int totalOnlineUser) {
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/MobiComKitBroadcastReceiver.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/MobiComKitBroadcastReceiver.java
index 07dd88bb..7bd0b648 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/MobiComKitBroadcastReceiver.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/MobiComKitBroadcastReceiver.java
@@ -6,6 +6,7 @@
 import android.support.v4.app.FragmentActivity;
 import android.text.TextUtils;
 
+import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.conversation.Message;
 import com.applozic.mobicomkit.broadcast.BroadcastService;
@@ -26,10 +27,12 @@
 
     private ConversationUIService conversationUIService;
     private BaseContactService baseContactService;
+    private boolean hideActionMessages;
 
     public MobiComKitBroadcastReceiver(FragmentActivity fragmentActivity) {
         this.conversationUIService = new ConversationUIService(fragmentActivity);
         this.baseContactService = new AppContactService(fragmentActivity);
+        this.hideActionMessages = ApplozicClient.getInstance(fragmentActivity).isActionMessagesHidden();
     }
 
     @Override
@@ -39,7 +42,14 @@ public void onReceive(Context context, Intent intent) {
         String messageJson = intent.getStringExtra(MobiComKitConstants.MESSAGE_JSON_INTENT);
         if (!TextUtils.isEmpty(messageJson)) {
             message = (Message) GsonUtils.getObjectFromJson(messageJson, Message.class);
+
+            if (message != null) {
+                if (hideActionMessages && message.isActionMessage()) {
+                    message.setHidden(true);
+                }
+            }
         }
+
         Utils.printLog(context, TAG, "Received broadcast, action: " + action + ", message: " + message);
 
         if (message != null && !message.isSentToMany()) {
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelInfoActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelInfoActivity.java
index 858efe9b..f7ea88ed 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelInfoActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ChannelInfoActivity.java
@@ -170,6 +170,10 @@ public void run() {
         if (alCustomizationSettings.isHideGroupExitButton()) {
             channelExitRelativeLayout.setVisibility(View.GONE);
         }
+        if (alCustomizationSettings.isHideGroupDeleteButton()) {
+            channelDeleteRelativeLayout.setVisibility(View.GONE);
+        }
+
         if (getIntent().getExtras() != null) {
             channelKey = getIntent().getIntExtra(CHANNEL_KEY, 0);
             channel = ChannelService.getInstance(this).getChannelByChannelKey(channelKey);
@@ -196,6 +200,8 @@ public void run() {
             if (Channel.GroupType.BROADCAST.getValue().equals(channel.getType())) {
                 deleteChannelButton.setText(R.string.broadcast_delete_button);
                 exitChannelButton.setText(R.string.broadcast_exit_button);
+                channelExitRelativeLayout.setVisibility(View.GONE);
+                channelDeleteRelativeLayout.setVisibility(View.VISIBLE);
             } else {
                 deleteChannelButton.setText(R.string.channel_delete_group_button);
                 exitChannelButton.setText(R.string.channel_exit_button);
@@ -406,7 +412,7 @@ public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMen
             if (menuItems[i].equals(getString(R.string.remove_member)) && (isHideRemove || !isUserPresent || !ChannelUtils.isAdminUserId(userPreference.getUserId(), channel) && loggedInUserMapper != null && Integer.valueOf(0).equals(loggedInUserMapper.getRole()) || loggedInUserMapper != null && ChannelUserMapper.UserRole.MEMBER.getValue().equals(loggedInUserMapper.getRole()))) {
                 continue;
             }
-            if (menuItems[i].equals(getString(R.string.make_admin_text_info)) && (!isUserPresent || ChannelUserMapper.UserRole.ADMIN.getValue().equals(channelUserMapper.getRole()))) {
+            if (menuItems[i].equals(getString(R.string.make_admin_text_info)) && (!isUserPresent || ChannelUserMapper.UserRole.ADMIN.getValue().equals(channelUserMapper.getRole()) || (channel != null && Channel.GroupType.BROADCAST.getValue().equals(channel.getType())))) {
                 continue;
             }
             if (menuItems[i].equals(getString(R.string.make_admin_text_info))) {
@@ -652,6 +658,8 @@ public View getView(int position, View convertView, ViewGroup parent) {
                 holder.circleImageView = (CircleImageView) convertView.findViewById(R.id.contactImage);
                 holder.adminTextView = (TextView) convertView.findViewById(R.id.adminTextView);
                 holder.lastSeenAtTextView = (TextView) convertView.findViewById(R.id.lastSeenAtTextView);
+                holder.displayName.setSelected(true);
+                holder.displayName.requestFocus();
                 convertView.setTag(holder);
             } else {
                 holder = (ContactViewHolder) convertView.getTag();
@@ -678,7 +686,7 @@ public View getView(int position, View convertView, ViewGroup parent) {
                     holder.lastSeenAtTextView.setText(getString(R.string.user_online));
                 } else if (contact.getLastSeenAt() != 0) {
                     holder.lastSeenAtTextView.setVisibility(View.VISIBLE);
-                    holder.lastSeenAtTextView.setText(getString(R.string.subtitle_last_seen_at_time) + " " + String.valueOf(DateUtils.getDateAndTimeForLastSeen(contact.getLastSeenAt())));
+                    holder.lastSeenAtTextView.setText(getString(R.string.subtitle_last_seen_at_time) + " " + String.valueOf(DateUtils.getDateAndTimeForLastSeen(ChannelInfoActivity.this, contact.getLastSeenAt(), R.string.JUST_NOW, R.plurals.MINUTES_AGO, R.plurals.HOURS_AGO, R.string.YESTERDAY)));
                 } else {
                     holder.lastSeenAtTextView.setVisibility(View.GONE);
                     holder.lastSeenAtTextView.setText("");
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ContactSelectionActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ContactSelectionActivity.java
index f8f4888a..61db65b5 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ContactSelectionActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ContactSelectionActivity.java
@@ -1,5 +1,7 @@
 package com.applozic.mobicomkit.uiwidgets.conversation.activity;
 
+import android.app.ProgressDialog;
+import android.content.Context;
 import android.content.IntentFilter;
 import android.graphics.Color;
 import android.graphics.drawable.ColorDrawable;
@@ -18,7 +20,9 @@
 import android.text.TextUtils;
 import android.view.Menu;
 import android.view.MenuItem;
+import android.widget.Toast;
 
+import com.applozic.mobicomkit.api.account.user.AlUserSearchTask;
 import com.applozic.mobicomkit.broadcast.ConnectivityReceiver;
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.database.ContactDatabase;
@@ -30,11 +34,15 @@
 import com.applozic.mobicommons.json.GsonUtils;
 import com.applozic.mobicommons.people.SearchListFragment;
 import com.applozic.mobicommons.people.channel.Channel;
+import com.applozic.mobicommons.people.contact.Contact;
+
+import java.util.List;
 
 /**
  * Created by sunil on 6/2/16.
  */
-public class ContactSelectionActivity extends AppCompatActivity implements SearchView.OnQueryTextListener {
+public class ContactSelectionActivity extends AppCompatActivity implements SearchView
+        .OnQueryTextListener {
     public static final String CHANNEL = "CHANNEL_NAME";
     public static final String CHANNEL_OBJECT = "CHANNEL";
     public static final String CHECK_BOX = "CHECK_BOX";
@@ -57,7 +65,8 @@
     private AppContactService contactService;
     private ConnectivityReceiver connectivityReceiver;
 
-    public static void addFragment(FragmentActivity fragmentActivity, Fragment fragmentToAdd, String fragmentTag) {
+    public static void addFragment(FragmentActivity fragmentActivity, Fragment fragmentToAdd,
+                                   String fragmentTag) {
         FragmentManager supportFragmentManager = fragmentActivity.getSupportFragmentManager();
 
         FragmentTransaction fragmentTransaction = supportFragmentManager
@@ -86,14 +95,18 @@ protected void onCreate(Bundle savedInstanceState) {
         mActionBar = getSupportActionBar();
         String jsonString = FileUtils.loadSettingsJsonFile(getApplicationContext());
         if (!TextUtils.isEmpty(jsonString)) {
-            alCustomizationSettings = (AlCustomizationSettings) GsonUtils.getObjectFromJson(jsonString, AlCustomizationSettings.class);
+            alCustomizationSettings = (AlCustomizationSettings) GsonUtils.getObjectFromJson
+                    (jsonString, AlCustomizationSettings.class);
         } else {
             alCustomizationSettings = new AlCustomizationSettings();
         }
-        if (!TextUtils.isEmpty(alCustomizationSettings.getThemeColorPrimary()) && !TextUtils.isEmpty(alCustomizationSettings.getThemeColorPrimaryDark())) {
-            mActionBar.setBackgroundDrawable(new ColorDrawable(Color.parseColor(alCustomizationSettings.getThemeColorPrimary())));
+        if (!TextUtils.isEmpty(alCustomizationSettings.getThemeColorPrimary()) && !TextUtils
+                .isEmpty(alCustomizationSettings.getThemeColorPrimaryDark())) {
+            mActionBar.setBackgroundDrawable(new ColorDrawable(Color.parseColor
+                    (alCustomizationSettings.getThemeColorPrimary())));
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-                getWindow().setStatusBarColor(Color.parseColor(alCustomizationSettings.getThemeColorPrimaryDark()));
+                getWindow().setStatusBarColor(Color.parseColor(alCustomizationSettings
+                        .getThemeColorPrimaryDark()));
             }
         }
         mActionBar.setDisplayShowHomeEnabled(true);
@@ -104,7 +117,8 @@ protected void onCreate(Bundle savedInstanceState) {
             mActionBar.setTitle(R.string.channel_member_title);
             name = getIntent().getStringExtra(CHANNEL);
             imageUrl = getIntent().getStringExtra(IMAGE_LINK);
-            groupType = getIntent().getIntExtra(GROUP_TYPE, Channel.GroupType.PUBLIC.getValue().intValue());
+            groupType = getIntent().getIntExtra(GROUP_TYPE, Channel.GroupType.PUBLIC.getValue()
+                    .intValue());
         } else {
             mActionBar.setTitle(R.string.channel_members_title);
         }
@@ -117,7 +131,8 @@ protected void onCreate(Bundle savedInstanceState) {
         contactSelectionFragment.setArguments(bundle);
         addFragment(this, contactSelectionFragment, "ContactSelectionFragment");
         connectivityReceiver = new ConnectivityReceiver();
-        registerReceiver(connectivityReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
+        registerReceiver(connectivityReceiver, new IntentFilter(ConnectivityManager
+                .CONNECTIVITY_ACTION));
     }
 
     @Override
@@ -162,17 +177,49 @@ public boolean onSearchRequested() {
 
     @Override
     public boolean onSupportNavigateUp() {
-        this.finish();
-        return super.onSupportNavigateUp();
+        onBackPressed();
+        return true;
     }
 
     @Override
     public boolean onQueryTextSubmit(String query) {
         this.mSearchTerm = query;
         isSearching = false;
+
+        if (alCustomizationSettings.isContactSearchFromServer()) {
+            processSearchCall(query);
+        }
+
         return false;
     }
 
+    public void processSearchCall(String query) {
+        final ProgressDialog dialog = new ProgressDialog(this);
+        dialog.setCancelable(false);
+        dialog.setMessage(getResources().getString(R.string.applozic_contacts_loading_info));
+        dialog.show();
+
+        new AlUserSearchTask(this, query, new AlUserSearchTask.AlUserSearchHandler() {
+            @Override
+            public void onSuccess(List<Contact> contacts, Context context) {
+                if (dialog != null) {
+                    dialog.dismiss();
+                }
+                if (!contacts.isEmpty() && contactSelectionFragment != null) {
+                    contactSelectionFragment.restartLoader();
+                }
+            }
+
+            @Override
+            public void onFailure(Exception e, Context context) {
+                if (dialog != null) {
+                    dialog.dismiss();
+                }
+                Toast.makeText(context, R.string.applozic_server_error, Toast.LENGTH_SHORT).show();
+            }
+        }).execute();
+    }
+
     @Override
     public boolean onQueryTextChange(String query) {
         this.mSearchTerm = query;
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ConversationActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ConversationActivity.java
index 5715dace..372b144e 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ConversationActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/ConversationActivity.java
@@ -1,5 +1,7 @@
 package com.applozic.mobicomkit.uiwidgets.conversation.activity;
 
+import android.animation.ObjectAnimator;
+import android.animation.ValueAnimator;
 import android.annotation.SuppressLint;
 import android.app.AlertDialog;
 import android.content.ClipData;
@@ -44,6 +46,7 @@
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
@@ -53,12 +56,10 @@
 import com.applozic.mobicomkit.ApplozicClient;
 import com.applozic.mobicomkit.api.MobiComKitConstants;
 import com.applozic.mobicomkit.api.account.register.RegisterUserClientService;
-import com.applozic.mobicomkit.api.account.register.RegistrationResponse;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.account.user.User;
 import com.applozic.mobicomkit.api.account.user.UserClientService;
 import com.applozic.mobicomkit.api.attachment.FileClientService;
-import com.applozic.mobicomkit.api.conversation.ApplozicMqttIntentService;
 import com.applozic.mobicomkit.api.conversation.Message;
 import com.applozic.mobicomkit.api.conversation.MessageIntentService;
 import com.applozic.mobicomkit.api.conversation.MobiComMessageService;
@@ -87,6 +88,7 @@
 import com.applozic.mobicomkit.uiwidgets.people.fragment.ProfileFragment;
 import com.applozic.mobicomkit.uiwidgets.uilistener.ALStoragePermission;
 import com.applozic.mobicomkit.uiwidgets.uilistener.ALStoragePermissionListener;
+import com.applozic.mobicomkit.uiwidgets.uilistener.CustomToolbarListener;
 import com.applozic.mobicomkit.uiwidgets.uilistener.MobicomkitUriListener;
 import com.applozic.mobicommons.commons.core.utils.PermissionsUtils;
 import com.applozic.mobicommons.commons.core.utils.Utils;
@@ -96,6 +98,8 @@
 import com.applozic.mobicommons.people.channel.Channel;
 import com.applozic.mobicommons.people.channel.Conversation;
 import com.applozic.mobicommons.people.contact.Contact;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.request.RequestOptions;
 import com.google.android.gms.common.ConnectionResult;
 import com.google.android.gms.common.GooglePlayServicesUtil;
 import com.google.android.gms.common.api.GoogleApiClient;
@@ -117,7 +121,7 @@
 /**
  * Created by devashish on 6/25/2015.
  */
-public class ConversationActivity extends AppCompatActivity implements MessageCommunicator, MobiComKitActivityInterface, GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, LocationListener, ActivityCompat.OnRequestPermissionsResultCallback, MobicomkitUriListener, SearchView.OnQueryTextListener, OnClickReplyInterface, ALStoragePermissionListener {
+public class ConversationActivity extends AppCompatActivity implements MessageCommunicator, MobiComKitActivityInterface, GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, LocationListener, ActivityCompat.OnRequestPermissionsResultCallback, MobicomkitUriListener, SearchView.OnQueryTextListener, OnClickReplyInterface, ALStoragePermissionListener, CustomToolbarListener {
 
     public static final int LOCATION_SERVICE_ENABLE = 1001;
     public static final String TAKE_ORDER = "takeOrder";
@@ -177,6 +181,10 @@
     private LinearLayout serviceDisconnectionLayout;
     private ALStoragePermission alStoragePermission;
 
+    private ImageView conversationContactPhoto;
+    private TextView toolbarTitle;
+    private TextView toolbarSubtitle;
+
     public ConversationActivity() {
 
     }
@@ -260,7 +268,6 @@ protected void onStop() {
     protected void onResume() {
         super.onResume();
         Applozic.connectPublish(this);
-
         if (!Utils.isInternetAvailable(getApplicationContext())) {
             String errorMessage = getResources().getString(R.string.internet_connection_not_available);
             showErrorMessageView(errorMessage);
@@ -296,6 +303,10 @@ protected void onSaveInstanceState(Bundle savedInstanceState) {
 
     @Override
     public boolean onSupportNavigateUp() {
+        if (isFromSearch()) {
+            return true;
+        }
+
         if (getSupportFragmentManager().getBackStackEntryCount() > 0) {
             if (getSupportFragmentManager().getBackStackEntryCount() == 1) {
                 Intent upIntent = NavUtils.getParentActivityIntent(this);
@@ -306,7 +317,7 @@ public boolean onSupportNavigateUp() {
                 return true;
             }
             Boolean takeOrder = getIntent().getBooleanExtra(TAKE_ORDER, false);
-            if (takeOrder) {
+            if (takeOrder && getSupportFragmentManager().getBackStackEntryCount() == 2) {
                 Intent upIntent = NavUtils.getParentActivityIntent(this);
                 if (upIntent != null && isTaskRoot()) {
                     TaskStackBuilder.create(this).addNextIntentWithParentStack(upIntent).startActivities();
@@ -341,6 +352,9 @@ protected void onCreate(Bundle savedInstanceState) {
         }
         setContentView(R.layout.quickconversion_activity);
         Toolbar myToolbar = (Toolbar) findViewById(R.id.my_toolbar);
+        conversationContactPhoto = myToolbar.findViewById(R.id.conversation_contact_photo);
+        toolbarTitle = myToolbar.findViewById(R.id.toolbar_title);
+        toolbarSubtitle = myToolbar.findViewById(R.id.toolbar_subtitle);
         setSupportActionBar(myToolbar);
         baseContactService = new AppContactService(this);
         conversationUIService = new ConversationUIService(this);
@@ -411,7 +425,7 @@ protected void onCreate(Bundle savedInstanceState) {
         mobiComKitBroadcastReceiver = new MobiComKitBroadcastReceiver(this);
         InstructionUtil.showInfo(this, R.string.info_message_sync, BroadcastService.INTENT_ACTIONS.INSTRUCTION.toString());
 
-        mActionBar.setTitle(R.string.conversations);
+        setToolbarTitle(getString(R.string.conversations));
         mActionBar.setDisplayHomeAsUpEnabled(true);
         mActionBar.setHomeButtonEnabled(true);
 
@@ -488,6 +502,48 @@ protected void onNewIntent(Intent intent) {
         }
     }
 
+    @Override
+    public void setToolbarTitle(String title){
+        toolbarSubtitle.setVisibility(View.GONE);
+        conversationContactPhoto.setVisibility(View.GONE);
+        toolbarTitle.setText(title);
+        ObjectAnimator animation = ObjectAnimator.ofFloat(toolbarTitle, "translationY", 0f);
+        animation.setDuration(0);
+        animation.start();
+    }
+
+    @Override
+    public void setToolbarSubtitle(String subtitle){
+        toolbarSubtitle.setVisibility(View.VISIBLE);
+        toolbarSubtitle.setText(subtitle);
+        ObjectAnimator animation = ObjectAnimator.ofFloat(toolbarTitle, "translationY", -20f);
+        animation.setDuration(0);
+        animation.start();
+        ObjectAnimator animationSub = ObjectAnimator.ofFloat(toolbarSubtitle, "translationY", -20f);
+        animationSub.setDuration(0);
+        animationSub.start();
+    }
+
+    @Override
+    public void setToolbarImage(Contact contact, Channel channel){
+        if(ApplozicSetting.getInstance(this).isShowImageOnToolbar() || alCustomizationSettings.isShowImageOnToolbar()) {
+            conversationContactPhoto.setVisibility(View.VISIBLE);
+            if (contact != null) {
+                Glide.with(this)
+                        .load(contact.getImageURL())
+                        .apply(new RequestOptions().placeholder(R.drawable.applozic_ic_contact_picture_holo_light))
+                        .into(conversationContactPhoto);
+            } else if (channel != null) {
+                Glide.with(this)
+                        .load(channel.getImageUrl())
+                        .apply(new RequestOptions().placeholder(R.drawable.applozic_group_icon))
+                        .into(conversationContactPhoto);
+            } else {
+                conversationContactPhoto.setImageResource(R.drawable.applozic_ic_contact_picture_holo_light);
+            }
+        }
+    }
+
     private void showActionBar() {
         mActionBar.setDisplayShowTitleEnabled(true);
     }
@@ -507,7 +563,12 @@ public boolean onCreateOptionsMenu(Menu menu) {
         }
         searchView.setOnQueryTextListener(this);
         searchView.setSubmitButtonEnabled(true);
-        searchView.setIconified(true);
+        searchView.setIconifiedByDefault(true);
+
+        if (quickConversationFragment != null && !TextUtils.isEmpty(quickConversationFragment.getSearchString())) {
+            searchView.setIconified(false);
+            searchView.setQuery(quickConversationFragment.getSearchString(), false);
+        }
 
         return super.onCreateOptionsMenu(menu);
     }
@@ -804,6 +865,10 @@ public void addFragment(ConversationFragment conversationFragment) {
 
     @Override
     public void onBackPressed() {
+        if (isFromSearch()) {
+            return;
+        }
+
         if (getSupportFragmentManager().getBackStackEntryCount() == 1) {
             try {
                 Intent upIntent = NavUtils.getParentActivityIntent(this);
@@ -816,24 +881,37 @@ public void onBackPressed() {
             this.finish();
             return;
         }
+
         Boolean takeOrder = getIntent().getBooleanExtra(TAKE_ORDER, false);
         ConversationFragment conversationFragment = (ConversationFragment) getSupportFragmentManager().findFragmentByTag(ConversationUIService.CONVERSATION_FRAGMENT);
         if (conversationFragment != null && conversationFragment.isVisible() && (conversationFragment.multimediaPopupGrid.getVisibility() == View.VISIBLE)) {
             conversationFragment.hideMultimediaOptionGrid();
             return;
         }
-        if (takeOrder) {
+
+        if (takeOrder && getSupportFragmentManager().getBackStackEntryCount() == 2) {
             Intent upIntent = NavUtils.getParentActivityIntent(this);
             if (upIntent != null && isTaskRoot()) {
                 TaskStackBuilder.create(this).addNextIntentWithParentStack(upIntent).startActivities();
             }
             ConversationActivity.this.finish();
+        } else if (getSupportFragmentManager().getBackStackEntryCount() > 1) {
+            getSupportFragmentManager().popBackStack();
         } else {
             super.onBackPressed();
         }
 
     }
 
+    public boolean isFromSearch() {
+        if (!searchView.isIconified() && quickConversationFragment != null && quickConversationFragment.isVisible()) {
+            quickConversationFragment.stopSearching();
+            searchView.onActionViewCollapsed();
+            return true;
+        }
+        return false;
+    }
+
     @Override
     public void updateLatestMessage(Message message, String formattedContactNumber) {
         conversationUIService.updateLatestMessage(message, formattedContactNumber);
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/MobiComAttachmentSelectorActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/MobiComAttachmentSelectorActivity.java
index 9d362b0c..d857e425 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/MobiComAttachmentSelectorActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/activity/MobiComAttachmentSelectorActivity.java
@@ -245,10 +245,17 @@ protected void onActivityResult(int requestCode, int resultCode, Intent intent)
                     String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
                     fileName = FileUtils.getFileName(this, selectedFileUri);
                     String fileFormat = FileUtils.getFileFormat(fileName);
+                    String fileNameToWrite;
                     if (TextUtils.isEmpty(fileFormat)) {
-                        return;
+                        String format = FileUtils.getFileFormat(FileUtils.getFile(this, selectedFileUri).getAbsolutePath());
+                        if (TextUtils.isEmpty(format)) {
+                            return;
+                        }
+                        fileNameToWrite = timeStamp + "." + format;
+                    } else {
+                        fileNameToWrite = timeStamp + "." + fileFormat;
                     }
-                    String fileNameToWrite = timeStamp + "." + fileFormat;
+
                     File mediaFile = FileClientService.getFilePath(fileNameToWrite, getApplicationContext(), mimeType);
                     new FileTaskAsync(mediaFile, selectedFileUri, this).execute((Void) null);
                 } catch (Exception e) {
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/DetailedConversationAdapter.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/DetailedConversationAdapter.java
index 64fa86d4..2ef90ee1 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/DetailedConversationAdapter.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/DetailedConversationAdapter.java
@@ -14,7 +14,9 @@
 import android.support.v4.content.FileProvider;
 import android.support.v7.widget.RecyclerView;
 import android.text.SpannableString;
+import android.text.Spanned;
 import android.text.TextUtils;
+import android.text.style.ForegroundColorSpan;
 import android.text.style.TextAppearanceSpan;
 import android.util.DisplayMetrics;
 import android.util.TypedValue;
@@ -120,7 +122,6 @@
     private FileClientService fileClientService;
     private MessageDatabaseService messageDatabaseService;
     private BaseContactService contactService;
-    private Contact senderContact;
     private long deviceTimeOffset = 0;
     private Class<?> messageIntentClass;
     private List<Message> messageList;
@@ -171,7 +172,6 @@ public DetailedConversationAdapter(final Context context, int textViewResourceId
         this.conversationService = new MobiComConversationService(context);
         this.contactService = new AppContactService(context);
         this.imageCache = ImageCache.getInstance(((FragmentActivity) context).getSupportFragmentManager(), 0.1f);
-        this.senderContact = contactService.getContactById(MobiComUserPreference.getInstance(context).getUserId());
         this.messageList = messageList;
         contactImageLoader = new ImageLoader(context, ImageUtils.getLargestScreenDimension((Activity) context)) {
             @Override
@@ -337,7 +337,17 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                     }
                     Configuration config = context.getResources().getConfiguration();
                     if (message.getMetadata() != null && !message.getMetadata().isEmpty() && message.getMetadata().containsKey(Message.MetaDataType.AL_REPLY.getValue())) {
-                        final Message msg = messageDatabaseService.getMessage(message.getMetaDataValueForKey(Message.MetaDataType.AL_REPLY.getValue()));
+                        String keyString = message.getMetaDataValueForKey(Message.MetaDataType.AL_REPLY.getValue());
+
+                        Message messageToBeReplied = new Message();
+                        messageToBeReplied.setKeyString(keyString);
+                        int indexOfObject = messageList.indexOf(messageToBeReplied);
+                        if (indexOfObject != -1) {
+                            messageToBeReplied = messageList.get(indexOfObject);
+                        } else {
+                            messageToBeReplied = messageDatabaseService.getMessage(message.getMetaDataValueForKey(Message.MetaDataType.AL_REPLY.getValue()));
+                        }
+                        final Message msg = messageToBeReplied;
                         if (msg != null) {
                             String displayName;
 
@@ -604,9 +614,7 @@ public void onClick(View view) {
                         });
                     }
 
-                    if (message.isTypeOutbox()) {
-                        loadContactImage(senderContact, contactDisplayName, message, myHolder.contactImage, myHolder.alphabeticTextView, myHolder.onlineTextView);
-                    } else {
+                    if (!message.isTypeOutbox()) {
                         loadContactImage(receiverContact, contactDisplayName, message, myHolder.contactImage, myHolder.alphabeticTextView, myHolder.onlineTextView);
                     }
 
@@ -737,6 +745,8 @@ public void onClick(View view) {
                     }
                     if (message.isCanceled()) {
                         myHolder.attachmentRetry.setVisibility(View.VISIBLE);
+                    } else {
+                        myHolder.attachmentRetry.setVisibility(View.GONE);
                     }
                     myHolder.attachmentRetry.setOnClickListener(new View.OnClickListener() {
                         @Override
@@ -987,8 +997,8 @@ public void onClick(View v) {
 
                         // Sets the span to start at the starting point of the match and end at "length"
                         // characters beyond the starting point
-                        highlightedName.setSpan(highlightTextSpan, startIndex,
-                                startIndex + searchString.toString().length(), 0);
+                        highlightedName.setSpan(new ForegroundColorSpan(Color.parseColor(alCustomizationSettings.getMessageSearchTextColor())), startIndex,
+                                startIndex + searchString.toString().length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
 
                         myHolder.messageTextView.setText(highlightedName);
                     }
@@ -1513,7 +1523,7 @@ public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMen
                     continue;
                 }
 
-                if (menuItems[i].equals(context.getResources().getString(R.string.reply)) && (!alCustomizationSettings.isReplyOption() || message.isAttachmentUploadInProgress() || TextUtils.isEmpty(message.getKeyString()) || !message.isSentToServer() || (channel != null && Channel.GroupType.OPEN.getValue().equals(channel.getType())) || (message.hasAttachment() && !message.isAttachmentDownloaded()) || channel != null && !ChannelService.getInstance(context).processIsUserPresentInChannel(channel.getKey()) || message.isVideoOrAudioCallMessage() || contact != null && contact.isDeleted() || channel != null && Channel.GroupType.OPEN.getValue().equals(channel.getType()))) {
+                if (menuItems[i].equals(context.getResources().getString(R.string.reply)) && (!alCustomizationSettings.isReplyOption() || message.isAttachmentUploadInProgress() || TextUtils.isEmpty(message.getKeyString()) || !message.isSentToServer() || (message.hasAttachment() && !message.isAttachmentDownloaded()) || (channel != null && !Channel.GroupType.OPEN.getValue().equals(channel.getType()) && !ChannelService.getInstance(context).processIsUserPresentInChannel(channel.getKey())) || message.isVideoOrAudioCallMessage() || contact != null && contact.isDeleted())) {
                     continue;
                 }
 
@@ -1535,7 +1545,11 @@ public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMen
         private final MenuItem.OnMenuItemClickListener onEditMenu = new MenuItem.OnMenuItemClickListener() {
             @Override
             public boolean onMenuItemClick(MenuItem item) {
-                return contextMenuClickListener == null || contextMenuClickListener.onItemClick(getLayoutPosition(), item);
+                int position = getLayoutPosition();
+                if (position < 0 || messageList.isEmpty()) {
+                    return true;
+                }
+                return contextMenuClickListener == null || contextMenuClickListener.onItemClick(position, item);
             }
         };
     }
@@ -1588,7 +1602,7 @@ public void sendCallback(List<Message> messageList, int pos) {
         Message message = messageList.get(pos);
         if (message != null) {
             if (context.getApplicationContext() instanceof ALProfileClickListener) {
-                ((ALProfileClickListener) context.getApplicationContext()).onClick(context, contactService.getContactById(message.getTo()), channel, false);
+                ((ALProfileClickListener) context.getApplicationContext()).onClick(context, message.getTo(), channel, false);
             }
         }
     }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/QuickConversationAdapter.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/QuickConversationAdapter.java
index 9cba00da..93849067 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/QuickConversationAdapter.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/adapter/QuickConversationAdapter.java
@@ -33,6 +33,7 @@
 import com.applozic.mobicomkit.contact.BaseContactService;
 import com.applozic.mobicomkit.contact.database.ContactDatabase;
 import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
+import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.alphanumbericcolor.AlphaNumberColorUtil;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
@@ -256,7 +257,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                     }
                 }
                 if (myholder.createdAtTime != null) {
-                    myholder.createdAtTime.setText(DateUtils.getFormattedDateAndTime(message.getCreatedAtTime()));
+                    myholder.createdAtTime.setText(DateUtils.getFormattedDateAndTime(context, message.getCreatedAtTime(), R.string.JUST_NOW, R.plurals.MINUTES, R.plurals.HOURS));
                 }
                 int messageUnReadCount = 0;
                 if (message.getGroupId() == null && contactReceiver != null && !TextUtils.isEmpty(contactReceiver.getContactIds())) {
@@ -488,14 +489,14 @@ public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMen
                     continue;
                 }
 
-                if (menuItems[i].equals(context.getResources().getString(R.string.exit_group)) && (isChannelDeleted || !isUserPresentInGroup)) {
+                if (menuItems[i].equals(context.getResources().getString(R.string.exit_group)) && (isChannelDeleted || !isUserPresentInGroup || (channel != null && Channel.GroupType.BROADCAST.getValue().equals(channel.getType())))) {
                     continue;
                 }
 
                 if (menuItems[i].equals(context.getResources().getString(R.string.delete_group)) && (isUserPresentInGroup || !isChannelDeleted)) {
                     continue;
                 }
-                if (menuItems[i].equals(context.getResources().getString(R.string.delete_conversation)) && !alCustomizationSettings.isDeleteOption()) {
+                if (menuItems[i].equals(context.getResources().getString(R.string.delete_conversation)) && !(alCustomizationSettings.isDeleteOption() || ApplozicSetting.getInstance(context).isDeleteConversationOption())) {
                     continue;
                 }
 
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MessageInfoFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MessageInfoFragment.java
index 24b5c7e7..7ff20a5b 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MessageInfoFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MessageInfoFragment.java
@@ -64,6 +64,8 @@
     private ImageLoader contactImageLoader, locationImageLoader;
     private RecyclerView readListView;
     private RecyclerView deliveredListView;
+    private BaseContactService contactService;
+    private FileClientService fileClientService;
 
     public MessageInfoFragment() {
     }
@@ -72,13 +74,12 @@ public MessageInfoFragment() {
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setHasOptionsMenu(true);
+        contactService = new AppContactService(getContext());
+        fileClientService = new FileClientService(getContext());
     }
 
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
-
-        init();
-
         View view = inflater.inflate(R.layout.applozic_message_info, container, false);
         Bundle bundle = getArguments();
         String messageJson = bundle.getString(MESSAGE_ARGUMENT_KEY);
@@ -104,6 +105,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
         deliveredListView.setLayoutManager(mLayoutManagerForDev);
         deliveredListView.setClickable(true);
 
+        init();
 
         ImageView locationImageView = (ImageView) view.findViewById(R.id.static_mapview);
         final LinearLayout mainContactShareLayout = (LinearLayout) view.findViewById(R.id.contact_share_layout);
@@ -157,8 +159,10 @@ private void init() {
             contactImageLoader = new ImageLoader(getContext(), getListPreferredItemHeight()) {
                 @Override
                 protected Bitmap processBitmap(Object data) {
-                    BaseContactService contactService = new AppContactService(getContext());
-                    return contactService.downloadContactImage(getContext(), (Contact) data);
+                    if(getContext() != null) {
+                        return contactService.downloadContactImage(getContext(), (Contact) data);
+                    }
+                    return null;
                 }
             };
             contactImageLoader.setLoadingImage(R.drawable.applozic_ic_contact_picture_holo_light);
@@ -169,8 +173,10 @@ protected Bitmap processBitmap(Object data) {
             locationImageLoader = new ImageLoader(getContext(), ImageUtils.getLargestScreenDimension((Activity) getContext())) {
                 @Override
                 protected Bitmap processBitmap(Object data) {
-                    FileClientService fileClientService = new FileClientService(getContext());
-                    return fileClientService.loadMessageImage(getContext(), (String) data);
+                    if(getContext() != null) {
+                        return fileClientService.loadMessageImage(getContext(), (String) data);
+                    }
+                    return null;
                 }
             };
             locationImageLoader.setImageFadeIn(false);
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComConversationFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComConversationFragment.java
old mode 100644
new mode 100755
index 33508aa1..cd078cab
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComConversationFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComConversationFragment.java
@@ -13,7 +13,11 @@
 import android.content.res.Configuration;
 import android.database.Cursor;
 import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
 import android.graphics.Color;
+import android.graphics.ColorFilter;
+import android.graphics.PixelFormat;
 import android.graphics.PorterDuff;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.GradientDrawable;
@@ -42,6 +46,7 @@
 import android.text.TextUtils;
 import android.text.TextWatcher;
 import android.util.DisplayMetrics;
+import android.util.Log;
 import android.util.TypedValue;
 import android.view.ContextMenu;
 import android.view.GestureDetector;
@@ -82,6 +87,7 @@
 import com.applozic.mobicomkit.api.attachment.FileMeta;
 import com.applozic.mobicomkit.api.conversation.ApplozicMqttIntentService;
 import com.applozic.mobicomkit.api.conversation.Message;
+import com.applozic.mobicomkit.api.conversation.MessageBuilder;
 import com.applozic.mobicomkit.api.conversation.MessageClientService;
 import com.applozic.mobicomkit.api.conversation.MessageIntentService;
 import com.applozic.mobicomkit.api.conversation.MobiComConversationService;
@@ -99,9 +105,12 @@
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.contact.MobiComVCFParser;
 import com.applozic.mobicomkit.contact.VCFContactData;
+import com.applozic.mobicomkit.exception.ApplozicException;
 import com.applozic.mobicomkit.feed.ApiResponse;
 import com.applozic.mobicomkit.feed.TopicDetail;
+import com.applozic.mobicomkit.listners.MediaUploadProgressHandler;
 import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
+import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.async.AlMessageMetadataUpdateTask;
 import com.applozic.mobicomkit.uiwidgets.attachmentview.AlBitmapUtils;
@@ -134,6 +143,7 @@
 import com.applozic.mobicomkit.uiwidgets.uilistener.ALStoragePermission;
 import com.applozic.mobicomkit.uiwidgets.uilistener.ALStoragePermissionListener;
 import com.applozic.mobicomkit.uiwidgets.uilistener.ContextMenuClickListener;
+import com.applozic.mobicomkit.uiwidgets.uilistener.CustomToolbarListener;
 import com.applozic.mobicommons.commons.core.utils.DateUtils;
 import com.applozic.mobicommons.commons.core.utils.LocationUtils;
 import com.applozic.mobicommons.commons.core.utils.Support;
@@ -828,7 +838,7 @@ public void run() {
             public void onClick(View v) {
 
                 if (getContext() != null && getContext().getApplicationContext() instanceof ALProfileClickListener) {
-                    ((ALProfileClickListener) getContext().getApplicationContext()).onClick(getActivity(), contact, channel, true);
+                    ((ALProfileClickListener) getContext().getApplicationContext()).onClick(getActivity(), (contact != null ? contact.getUserId() : null), channel, true);
                 }
 
                 if (channel != null) {
@@ -938,6 +948,18 @@ public void onFailure(Context context, String error) {
 
         return list;
     }
+    
+    private void setToolbarTitle(String title){
+        ((CustomToolbarListener)getActivity()).setToolbarTitle(title);
+    }
+    
+    private void setToolbarSubtitle(String subtitle){
+        ((CustomToolbarListener)getActivity()).setToolbarSubtitle(subtitle);
+    }
+    
+    private void setToolbarImage(Contact contact, Channel channel){
+        ((CustomToolbarListener)getActivity()).setToolbarImage(contact, channel);
+    }
 
     public void handleSendAndRecordButtonView(boolean isSendButtonVisible) {
         sendButton.setVisibility(alCustomizationSettings.isRecordButton() && (contact != null || channel != null && !Channel.GroupType.OPEN.getValue().equals(channel.getType())) ? isSendButtonVisible ? View.VISIBLE : View.GONE : View.VISIBLE);
@@ -1070,6 +1092,55 @@ protected void sendMessage() {
         }
     }
 
+    public void sendOpenGroupMessage(String messageText) {
+
+        attachReplyCancelLayout.setVisibility(View.GONE);
+        replayRelativeLayout.setVisibility(View.GONE);
+
+        Map<String, String> messageMetaData = new HashMap<>();
+        if (this.messageMetaData != null && !this.messageMetaData.isEmpty()) {
+            messageMetaData.putAll(this.messageMetaData);
+        }
+
+
+        new MessageBuilder(getActivity()).setMessage(messageText).setMetadata(messageMetaData).setGroupId(channel.getKey()).send(new MediaUploadProgressHandler() {
+
+            @Override
+            public void onUploadStarted(ApplozicException e, String oldMessageKey) {
+
+            }
+
+            @Override
+            public void onProgressUpdate(int percentage, ApplozicException e, String oldMessageKey) {
+
+            }
+
+            @Override
+            public void onCancelled(ApplozicException e, String oldMessageKey) {
+
+            }
+
+            @Override
+            public void onCompleted(ApplozicException e, String oldMessageKey) {
+
+            }
+
+            @Override
+            public void onSent(Message message, String oldMessageKey) {
+                Message messageToBeReplied = new Message();
+                messageToBeReplied.setKeyString(oldMessageKey);
+                int indexOfObject = messageList.indexOf(messageToBeReplied);
+                if (indexOfObject != -1) {
+                    messageList.set(indexOfObject, message);
+                    recyclerDetailConversationAdapter.notifyDataSetChanged();
+                }
+            }
+        });
+
+        this.messageMetaData = null;
+    }
+
+
     protected void processSendMessage() {
         if (!TextUtils.isEmpty(messageEditText.getText().toString().trim()) || !TextUtils.isEmpty(filePath)) {
             String inputMessage = messageEditText.getText().toString();
@@ -1080,7 +1151,11 @@ protected void processSendMessage() {
 
             if (disjointResult) {
 
-                sendMessage(messageEditText.getText().toString().trim());
+                if (channel != null && Channel.GroupType.OPEN.getValue().equals(channel.getType())) {
+                    sendOpenGroupMessage(messageEditText.getText().toString().trim());
+                } else {
+                    sendMessage(messageEditText.getText().toString().trim());
+                }
                 messageEditText.setText("");
                 scheduleOption.setText(R.string.ScheduleText);
                 if (scheduledTimeHolder.getTimestamp() != null) {
@@ -1404,7 +1479,7 @@ public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
             if (channel != null && Channel.GroupType.OPEN.getValue().equals(channel.getType())) {
                 menu.findItem(R.id.deleteConversation).setVisible(false);
             } else {
-                menu.findItem(R.id.deleteConversation).setVisible(alCustomizationSettings.isDeleteOption());
+                menu.findItem(R.id.deleteConversation).setVisible(alCustomizationSettings.isDeleteOption() || ApplozicSetting.getInstance(getContext()).isDeleteConversationOption());
             }
         }
 
@@ -1648,7 +1723,7 @@ public boolean onItemClick(int position, MenuItem item) {
                     messageMetaData.put(Message.MetaDataType.AL_REPLY.getValue(), message.getKeyString());
                     if (messageMetaData != null && !messageMetaData.isEmpty()) {
                         String replyMessageKey = messageMetaData.get(Message.MetaDataType.AL_REPLY.getValue());
-                        if (!TextUtils.isEmpty(replyMessageKey)) {
+                        if (!TextUtils.isEmpty(replyMessageKey) && (contact != null || (channel != null && !Channel.GroupType.OPEN.getValue().equals(channel.getType())))) {
                             messageDatabaseService.updateMessageReplyType(replyMessageKey, Message.ReplyMessage.REPLY_MESSAGE.getValue());
                         }
                     }
@@ -1683,7 +1758,10 @@ public void loadConversation(final Contact contact, final Channel channel, final
         }
 
         if (contact != null && this.channel != null) {
-            ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
+            if (getActivity() != null) {
+                    setToolbarSubtitle("");
+                    setToolbarImage(contact, channel);
+            }
             if (menu != null) {
                 menu.findItem(R.id.unmuteGroup).setVisible(false);
                 menu.findItem(R.id.muteGroup).setVisible(false);
@@ -1860,39 +1938,47 @@ protected void processUpdateLastSeenStatus(final Contact withUserContact) {
             return;
         }
 
-        if (userNotAbleToChatLayout != null && individualMessageSendLayout != null) {
-            userNotAbleToChatLayout.setVisibility(withUserContact.isDeleted() ? VISIBLE : View.GONE);
-            individualMessageSendLayout.setVisibility(withUserContact.isDeleted() ? View.GONE : VISIBLE);
-            bottomlayoutTextView.setText(R.string.user_has_been_deleted_text);
-        }
-
-        if (menu != null) {
-            menu.findItem(R.id.userBlock).setVisible(alCustomizationSettings.isBlockOption() ? !withUserContact.isDeleted() && !withUserContact.isBlocked() : alCustomizationSettings.isBlockOption());
-            menu.findItem(R.id.userUnBlock).setVisible(alCustomizationSettings.isBlockOption() ? !withUserContact.isDeleted() && withUserContact.isBlocked() : alCustomizationSettings.isBlockOption());
-            menu.findItem(R.id.refresh).setVisible(alCustomizationSettings.isRefreshOption() ? !withUserContact.isDeleted() : alCustomizationSettings.isRefreshOption());
-
-        }
-
-        if (withUserContact.isBlocked() || withUserContact.isBlockedBy() || withUserContact.isDeleted()) {
-            ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
-            return;
-        }
-
         if (this.getActivity() == null) {
             return;
         }
-
         this.getActivity().runOnUiThread(new Runnable() {
             @Override
             public void run() {
+                if (userNotAbleToChatLayout != null && individualMessageSendLayout != null) {
+                    userNotAbleToChatLayout.setVisibility(withUserContact.isDeleted() ? VISIBLE : View.GONE);
+                    individualMessageSendLayout.setVisibility(withUserContact.isDeleted() ? View.GONE : VISIBLE);
+                    bottomlayoutTextView.setText(R.string.user_has_been_deleted_text);
+                }
+
+                if (menu != null) {
+                    menu.findItem(R.id.userBlock).setVisible(alCustomizationSettings.isBlockOption() ? !withUserContact.isDeleted() && !withUserContact.isBlocked() : alCustomizationSettings.isBlockOption());
+                    menu.findItem(R.id.userUnBlock).setVisible(alCustomizationSettings.isBlockOption() ? !withUserContact.isDeleted() && withUserContact.isBlocked() : alCustomizationSettings.isBlockOption());
+                    menu.findItem(R.id.refresh).setVisible(alCustomizationSettings.isRefreshOption() ? !withUserContact.isDeleted() : alCustomizationSettings.isRefreshOption());
+                }
+
+                if (withUserContact.isBlocked() || withUserContact.isBlockedBy() || withUserContact.isDeleted()) {
+                    if (getActivity() != null) {
+                        setToolbarSubtitle("");
+                    }
+                    return;
+                }
                 if (withUserContact != null) {
                     if (withUserContact.isConnected()) {
                         typingStarted = false;
-                        ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(getActivity().getString(R.string.user_online));
+                        if (getActivity() != null) {
+                            setToolbarSubtitle(getActivity().getString(R.string.user_online));
+                            setToolbarImage(withUserContact, null);
+                        }
                     } else if (withUserContact.getLastSeenAt() != 0) {
-                        ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(getActivity().getString(R.string.subtitle_last_seen_at_time) + " " + DateUtils.getDateAndTimeForLastSeen(withUserContact.getLastSeenAt()));
+                        if (getActivity() != null) {
+                            setToolbarSubtitle(getActivity().getString(R.string.subtitle_last_seen_at_time) + " " + DateUtils.getDateAndTimeForLastSeen(getContext(), withUserContact.getLastSeenAt(), R.string.JUST_NOW, R.plurals.MINUTES_AGO, R.plurals.HOURS_AGO, R.string.YESTERDAY));
+                            setToolbarImage(withUserContact, null);
+                        }
                     } else {
-                        ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
+                        if (getActivity() != null) {
+                            setToolbarSubtitle("");
+                            setToolbarImage(withUserContact, null);
+                        }
                     }
                 }
             }
@@ -1909,14 +1995,19 @@ public void updateChannelSubTitle() {
                     Contact withUserContact = appContactService.getContactById(userId);
                     if (withUserContact != null) {
                         if (withUserContact.isBlocked()) {
-                            ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
+                            if (getActivity() != null) {
+                                setToolbarSubtitle("");
+                            }
                         } else {
-                            if (withUserContact.isConnected()) {
-                                ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(getActivity().getString(R.string.user_online));
-                            } else if (withUserContact.getLastSeenAt() != 0) {
-                                ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(getActivity().getString(R.string.subtitle_last_seen_at_time) + " " + DateUtils.getDateAndTimeForLastSeen(withUserContact.getLastSeenAt()));
-                            } else {
-                                ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
+                            if (withUserContact.isConnected() && getActivity() != null) {
+                                setToolbarSubtitle(getActivity().getString(R.string.user_online));
+                                setToolbarImage(null, channel);
+                            } else if (withUserContact.getLastSeenAt() != 0 && getActivity() != null) {
+                                setToolbarSubtitle(getActivity().getString(R.string.subtitle_last_seen_at_time) + " " + DateUtils.getDateAndTimeForLastSeen(getContext(), withUserContact.getLastSeenAt(), R.string.JUST_NOW, R.plurals.MINUTES_AGO, R.plurals.HOURS_AGO, R.string.YESTERDAY));
+                                setToolbarImage(null, channel);
+                            } else if (getActivity() != null) {
+                                setToolbarSubtitle("");
+                                setToolbarImage(null, channel);
                             }
                         }
                     }
@@ -1947,12 +2038,21 @@ public void updateChannelSubTitle() {
                         }
                         int lastIndex = stringBuffer.lastIndexOf(",");
                         String userIds = stringBuffer.replace(lastIndex, lastIndex + 1, "").toString();
-                        ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(userIds);
+                        if (getActivity() != null) {
+                                setToolbarSubtitle(userIds);
+                                setToolbarImage(null, channel);
+                        }
                     } else {
-                        ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(stringBuffer.toString());
+                        if (getActivity() != null) {
+                                setToolbarSubtitle(stringBuffer.toString());
+                                setToolbarImage(null, channel);
+                        }
                     }
                 } else {
-                    ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(youString);
+                    if (getActivity() != null) {
+                            setToolbarSubtitle(youString);
+                            setToolbarImage(null, channel);
+                    }
                 }
             }
 
@@ -2584,7 +2684,8 @@ public void run() {
                             }
                         }
                         TextView createdAtTime = (TextView) view.findViewById(R.id.createdAtTime);
-                        if (createdAtTime != null && messageListItem.getKeyString() != null && messageListItem.isTypeOutbox() && !messageListItem.isCall() && !messageListItem.getDelivered() && !messageListItem.isCustom() && !messageListItem.isChannelCustomMessage() && messageListItem.getScheduledAt() == null) {
+                        if (createdAtTime != null && messageListItem.getKeyString() != null && messageListItem.isTypeOutbox() && !messageListItem.isCall() && !messageListItem.getDelivered() && !messageListItem.isCustom() && !messageListItem.isChannelCustomMessage() && messageListItem.getScheduledAt() == null
+                                && (!(channel != null && Channel.GroupType.OPEN.getValue().equals(channel.getType())) || contact != null)) {
                             createdAtTime.setCompoundDrawablesWithIntrinsicBounds(null, null, support.isSupportNumber(getCurrentUserId()) ? deliveredIcon : sentIcon, null);
                         }
                     }
@@ -2700,13 +2801,22 @@ public void run() {
                                 return;
                             }
                             if (Channel.GroupType.GROUPOFTWO.getValue().equals(channel.getType())) {
-                                ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(getActivity().getString(R.string.is_typing));
+                                if (getActivity() != null) {
+                                        setToolbarSubtitle(getActivity().getString(R.string.is_typing));
+                                        setToolbarImage(null, channel);
+                                }
                             } else {
-                                ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(displayNameContact.getDisplayName() + " " + getActivity().getString(R.string.is_typing));
+                                if (getActivity() != null) {
+                                        setToolbarSubtitle(displayNameContact.getDisplayName() + " " + getActivity().getString(R.string.is_typing));
+                                        setToolbarImage(null, channel);
+                                }
                             }
                         }
                     } else {
-                        ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle(getActivity().getString(R.string.is_typing));
+                        if (getActivity() != null) {
+                                setToolbarSubtitle(getActivity().getString(R.string.is_typing));
+                                setToolbarImage(null, channel);
+                        }
                     }
                 } else {
                     if (channel != null) {
@@ -2801,8 +2911,8 @@ public void updateTitle() {
                 stringBufferTitle.append(ChannelUtils.getChannelTitleName(channel, MobiComUserPreference.getInstance(getActivity()).getUserId()));
             }
         }
-        if (stringBufferTitle != null) {
-            ((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(stringBufferTitle.toString());
+        if (stringBufferTitle != null && getActivity() != null) {
+                setToolbarTitle(stringBufferTitle.toString());
         }
 
     }
@@ -3068,20 +3178,20 @@ public void onResume() {
                 downloadConversation.cancel(true);
             }
 
-            if (contact != null) {
-                if (contact.isDeleted()) {
-                    individualMessageSendLayout.setVisibility(View.GONE);
-                    userNotAbleToChatLayout.setVisibility(VISIBLE);
-                } else {
-                    userNotAbleToChatLayout.setVisibility(View.GONE);
-                }
-                contact = appContactService.getContactById(contact.getContactIds());
-                if (contact.isBlocked() || contact.isBlockedBy()) {
-                    ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
-                } else {
-                    updateLastSeenStatus();
+            Thread thread = new Thread(new Runnable() {
+                @Override
+                public void run() {
+                    try {
+                        if (appContactService != null && contact != null) {
+                            updateLastSeenStatus();
+                        }
+                    } catch (Exception e) {
+
+                    }
                 }
-            }
+            });
+            thread.setPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
+            thread.start();
 
             if (SyncCallService.refreshView) {
                 SyncCallService.refreshView = false;
@@ -3177,7 +3287,7 @@ public void updateContextBasedGroup() {
         if (channel != null) {
             Channel channelInfo = ChannelService.getInstance(getActivity()).getChannelInfo(channel.getKey());
 
-            if ((Channel.GroupType.GROUPOFTWO.getValue().equals(channelInfo.getType())) && (channelInfo.getMetadata().containsKey(Channel.GroupMetaDataType.TITLE.getValue()))) {
+            if ((Channel.GroupType.GROUPOFTWO.getValue().equals(channelInfo.getType())) && channel.isContextBasedChat()) {
                 Conversation conversation = new Conversation();
                 TopicDetail topic = new TopicDetail();
                 topic.setTitle(channelInfo.getMetadata().get(Channel.GroupMetaDataType.TITLE.getValue()));
@@ -3196,7 +3306,9 @@ public void updateChannelTitle() {
             if (newChannel != null && !TextUtils.isEmpty(channel.getName()) && !channel.getName().equals(newChannel.getName())) {
                 title = ChannelUtils.getChannelTitleName(newChannel, MobiComUserPreference.getInstance(getActivity()).getUserId());
                 channel = newChannel;
-                ((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(title);
+                if (getActivity() != null) {
+                        setToolbarTitle(title);
+                }
             }
         }
     }
@@ -3205,7 +3317,9 @@ public void updateTitleForOpenGroup() {
         try {
             if (channel != null) {
                 Channel newChannel = ChannelService.getInstance(getActivity()).getChannelByChannelKey(channel.getKey());
-                ((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(newChannel.getName());
+                if (getActivity() != null) {
+                        setToolbarTitle(newChannel.getName());
+                }
             }
             updateChannelSubTitle();
         } catch (Exception e) {
@@ -3225,11 +3339,10 @@ public void loadnewMessageOnResume(Contact contact, Channel channel, Integer con
         downloadConversation.execute();
     }
 
-    public int ScrollToFirstSearchIndex() {
+    public int scrollToFirstSearchIndex() {
 
         int position = 0;
         if (searchString != null) {
-
             for (position = messageList.size() - 1; position >= 0; position--) {
                 Message message = messageList.get(position);
                 if (!TextUtils.isEmpty(message.getMessage()) && message.getMessage().toLowerCase(Locale.getDefault()).indexOf(
@@ -3253,7 +3366,9 @@ public void blockUserProcess(final String userId, final boolean block, final boo
             @Override
             public void onSuccess(ApiResponse apiResponse) {
                 if (block && typingStarted) {
-                    ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
+                        if(getActivity() != null) {
+                            setToolbarSubtitle("");
+                        }
                     Intent intent = new Intent(getActivity(), ApplozicMqttIntentService.class);
                     intent.putExtra(ApplozicMqttIntentService.CONTACT, contact);
                     intent.putExtra(ApplozicMqttIntentService.STOP_TYPING, true);
@@ -3789,10 +3904,7 @@ public void run() {
                         @Override
                         public void run() {
                             if (!TextUtils.isEmpty(searchString)) {
-                                int height = recyclerView.getHeight();
-                                int itemHeight = recyclerView.getChildAt(0).getHeight();
-                                recyclerView.requestFocusFromTouch();
-                                recyclerView.scrollTo(ScrollToFirstSearchIndex() + 1, height / 2 - itemHeight / 2);
+                                linearLayoutManager.scrollToPositionWithOffset(scrollToFirstSearchIndex(), 0);
                             } else {
                                 linearLayoutManager.scrollToPositionWithOffset(messageList.size() - 1, 0);
                             }
@@ -3802,7 +3914,7 @@ public void run() {
             } else if (!nextMessageList.isEmpty()) {
                 linearLayoutManager.setStackFromEnd(true);
                 messageList.addAll(0, nextMessageList);
-                linearLayoutManager.scrollToPositionWithOffset(nextMessageList.size() - 1, 0);
+                linearLayoutManager.scrollToPosition(nextMessageList.size() - 1);
             }
 
             conversationService.read(contact, channel);
@@ -3825,7 +3937,7 @@ public void run() {
                 conversationList = conversations;
             }
             if (channel != null && channel.getMetadata() != null && !channel.getMetadata().isEmpty()) {
-                if (channel.getMetadata().containsKey(Channel.GroupMetaDataType.TITLE.getValue())) {
+                if (channel.isContextBasedChat()) {
                     Conversation conversation = new Conversation();
                     TopicDetail topic = new TopicDetail();
                     topic.setTitle(channel.getMetadata().get(Channel.GroupMetaDataType.TITLE.getValue()));
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComQuickConversationFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComQuickConversationFragment.java
old mode 100644
new mode 100755
index 24e27a62..61c5868e
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComQuickConversationFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/fragment/MobiComQuickConversationFragment.java
@@ -39,10 +39,12 @@
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.conversation.AlLinearLayoutManager;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
+import com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity;
 import com.applozic.mobicomkit.uiwidgets.conversation.activity.DividerItemDecoration;
 import com.applozic.mobicomkit.uiwidgets.conversation.activity.MobiComKitActivityInterface;
 import com.applozic.mobicomkit.uiwidgets.conversation.activity.RecyclerViewPositionHelper;
 import com.applozic.mobicomkit.uiwidgets.conversation.adapter.QuickConversationAdapter;
+import com.applozic.mobicomkit.uiwidgets.uilistener.CustomToolbarListener;
 import com.applozic.mobicommons.commons.core.utils.DateUtils;
 import com.applozic.mobicommons.commons.core.utils.Utils;
 import com.applozic.mobicommons.file.FileUtils;
@@ -185,6 +187,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 
         recyclerView.setLongClickable(true);
         registerForContextMenu(recyclerView);
+            ((CustomToolbarListener)getActivity()).setToolbarTitle(getString(R.string.conversation));
 
         return list;
     }
@@ -231,7 +234,7 @@ public void addMessage(final Message message) {
             return;
         }
 
-        if(message.isIgnoreMessageAdding(getActivity())){
+        if (message.isIgnoreMessageAdding(getActivity()) || !TextUtils.isEmpty(searchString)) {
             return;
         }
 
@@ -564,7 +567,8 @@ public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
             public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                 super.onScrolled(recyclerView, dx, dy);
 
-                if (dy > 0) {
+
+                if (dy > 0 && TextUtils.isEmpty(searchString)) {
                     visibleItemCount = linearLayoutManager.getChildCount();
                     totalItemCount = linearLayoutManager.getItemCount();
                     pastVisiblesItems = linearLayoutManager.findFirstVisibleItemPosition();
@@ -680,14 +684,23 @@ public void run() {
     @Override
     public boolean onQueryTextChange(String newText) {
         this.searchString = newText;
-        if (TextUtils.isEmpty(newText)) {
-            downloadConversations(false, null);
-        } else {
-            downloadConversations(false, newText);
-        }
+        downloadConversations(false, newText);
         return true;
     }
 
+    public String getSearchString() {
+        return searchString;
+    }
+
+    public void stopSearching() {
+        searchString = null;
+        if (!isAlreadyLoading) {
+            latestMessageForEachContact.clear();
+            messageList.clear();
+            downloadConversations(false, searchString);
+        }
+    }
+
     public class DownloadConversation extends AsyncTask<Void, Integer, Long> {
 
         private RecyclerView view;
@@ -799,43 +812,47 @@ public void run() {
                 }
             }
 
-            if (!TextUtils.isEmpty(searchString)) {
+            if (!loadMoreMessages) {
                 messageList.clear();
                 latestMessageForEachContact.clear();
-
             }
 
-            for (Message currentMessage : nextMessageList) {
-                if (currentMessage.isSentToMany()) {
-                    continue;
-                }
-                Message recentSms;
-                if (currentMessage.getGroupId() != null) {
-                    recentSms = latestMessageForEachContact.get(ConversationUIService.GROUP + currentMessage.getGroupId());
-                } else {
-                    recentSms = latestMessageForEachContact.get(currentMessage.getContactIds());
-                }
+            if (!TextUtils.isEmpty(searchString)) {
+                messageList.addAll(nextMessageList);
+            } else {
+                for (Message currentMessage : nextMessageList) {
+                    if (currentMessage.isSentToMany()) {
+                        continue;
+                    }
+                    Message recentSms;
+                    if (currentMessage.getGroupId() != null) {
+                        recentSms = latestMessageForEachContact.get(ConversationUIService.GROUP + currentMessage.getGroupId());
+                    } else {
+                        recentSms = latestMessageForEachContact.get(currentMessage.getContactIds());
+                    }
 
-                if (recentSms != null) {
-                    if (currentMessage.getCreatedAtTime() >= recentSms.getCreatedAtTime()) {
+                    if (recentSms != null) {
+                        if (currentMessage.getCreatedAtTime() >= recentSms.getCreatedAtTime()) {
+                            if (currentMessage.getGroupId() != null) {
+                                latestMessageForEachContact.put(ConversationUIService.GROUP + currentMessage.getGroupId(), currentMessage);
+                            } else {
+                                latestMessageForEachContact.put(currentMessage.getContactIds(), currentMessage);
+                            }
+                            messageList.remove(recentSms);
+                            messageList.add(currentMessage);
+                        }
+                    } else {
                         if (currentMessage.getGroupId() != null) {
                             latestMessageForEachContact.put(ConversationUIService.GROUP + currentMessage.getGroupId(), currentMessage);
                         } else {
                             latestMessageForEachContact.put(currentMessage.getContactIds(), currentMessage);
                         }
-                        messageList.remove(recentSms);
+
                         messageList.add(currentMessage);
                     }
-                } else {
-                    if (currentMessage.getGroupId() != null) {
-                        latestMessageForEachContact.put(ConversationUIService.GROUP + currentMessage.getGroupId(), currentMessage);
-                    } else {
-                        latestMessageForEachContact.put(currentMessage.getContactIds(), currentMessage);
-                    }
-
-                    messageList.add(currentMessage);
                 }
             }
+
             if (loadMoreMessages) {
                 if (messageList.contains(null)) {
                     messageList.remove(null);
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/richmessaging/ALRichMessageAdapter.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/richmessaging/ALRichMessageAdapter.java
index 470106d2..2efee34a 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/richmessaging/ALRichMessageAdapter.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/conversation/richmessaging/ALRichMessageAdapter.java
@@ -536,12 +536,20 @@ public void onClick(View v) {
 
     private void bindSingleTextItem(SingleTextViewHolder holder, final int position) {
         if (model.getTemplateId() == 3) {
-            holder.singleTextItem.setText(payloadList.get(position).getName().trim());
+            if (payloadList.get(position).getName() != null) {
+                holder.singleTextItem.setText(payloadList.get(position).getName().trim());
+            }else{
+                holder.singleTextItem.setText("");
+            }
            /* ViewGroup.LayoutParams params = holder.rootLayout.getLayoutParams();
             params.width = LinearLayout.LayoutParams.MATCH_PARENT;
             holder.rootLayout.setLayoutParams(params);*/
         } else {
-            holder.singleTextItem.setText(payloadList.get(position).getTitle().trim());
+            if (payloadList.get(position).getTitle() != null) {
+                holder.singleTextItem.setText(payloadList.get(position).getTitle().trim());
+            }else{
+                holder.singleTextItem.setText("");
+            }
         }
     }
 
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/activity/MobiComKitPeopleActivity.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/activity/MobiComKitPeopleActivity.java
index 393fbf29..209f741b 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/activity/MobiComKitPeopleActivity.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/activity/MobiComKitPeopleActivity.java
@@ -33,12 +33,14 @@
 
 import com.applozic.mobicomkit.Applozic;
 import com.applozic.mobicomkit.ApplozicClient;
+import com.applozic.mobicomkit.api.account.user.AlUserSearchTask;
 import com.applozic.mobicomkit.api.account.user.MobiComUserPreference;
 import com.applozic.mobicomkit.api.attachment.FileClientService;
 import com.applozic.mobicomkit.api.people.ChannelInfo;
 import com.applozic.mobicomkit.channel.service.ChannelService;
 import com.applozic.mobicomkit.contact.AppContactService;
 import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
+import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
 import com.applozic.mobicomkit.uiwidgets.ContactsChangeObserver;
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
@@ -155,7 +157,7 @@ protected void onCreate(Bundle savedInstanceState) {
         appContactFragment.setAlCustomizationSettings(alCustomizationSettings);
         channelFragment = new ChannelFragment();
         setSearchListFragment(appContactFragment);
-        if (alCustomizationSettings.isStartNewGroup()) {
+        if (alCustomizationSettings.isStartNewGroup() || ApplozicSetting.getInstance(this).isStartNewGroupButtonVisible()) {
             viewPager = (ViewPager) findViewById(R.id.viewPager);
             viewPager.setVisibility(View.VISIBLE);
             setupViewPager(viewPager);
@@ -261,9 +263,9 @@ public void onGroupSelected(Channel channel) {
                     if (FileUtils.isContentScheme(fileUri)) {
                         String mimeType = FileUtils.getMimeTypeByContentUriOrOther(this, fileUri);
                         if (TextUtils.isEmpty(mimeType)) {
-                             this.finish();
-                        }else{
-                            new ShareAsyncTask(this, fileUri, null, channel,mimeType).execute();
+                            this.finish();
+                        } else {
+                            new ShareAsyncTask(this, fileUri, null, channel, mimeType).execute();
                         }
                     } else {
                         Intent intentImage = new Intent(this, MobiComAttachmentSelectorActivity.class);
@@ -311,8 +313,8 @@ public void onCustomContactSelected(Contact contact) {
                     String mimeType = FileUtils.getMimeTypeByContentUriOrOther(this, fileUri);
                     if (TextUtils.isEmpty(mimeType)) {
                         this.finish();
-                    }else{
-                        new ShareAsyncTask(this, fileUri, contact, null,mimeType).execute();
+                    } else {
+                        new ShareAsyncTask(this, fileUri, contact, null, mimeType).execute();
                     }
 
                 } else {
@@ -392,6 +394,11 @@ public boolean onQueryTextSubmit(String query) {
             startNewConversation(query);
             isSearching = false;
         }
+
+        if (alCustomizationSettings.isContactSearchFromServer()) {
+            processSearchCall(query);
+        }
+
         return false;
     }
 
@@ -409,6 +416,33 @@ public boolean onQueryTextChange(String query) {
         return true;
     }
 
+    public void processSearchCall(String query) {
+        final ProgressDialog dialog = new ProgressDialog(this);
+        dialog.setCancelable(false);
+        dialog.setMessage(getResources().getString(R.string.applozic_contacts_loading_info));
+        dialog.show();
+
+        new AlUserSearchTask(this, query, new AlUserSearchTask.AlUserSearchHandler() {
+            @Override
+            public void onSuccess(List<Contact> contacts, Context context) {
+                if (dialog != null) {
+                    dialog.dismiss();
+                }
+                if (!contacts.isEmpty() && appContactFragment != null) {
+                    appContactFragment.restartLoader();
+                }
+            }
+
+            @Override
+            public void onFailure(Exception e, Context context) {
+                if (dialog != null) {
+                    dialog.dismiss();
+                }
+                Toast.makeText(context, R.string.applozic_server_error, Toast.LENGTH_SHORT).show();
+            }
+        }).execute();
+    }
+
     public SearchListFragment getSearchListFragment() {
         return searchListFragment;
     }
@@ -504,7 +538,7 @@ public CharSequence getPageTitle(int position) {
         Channel channel;
         String mimeType;
 
-        public ShareAsyncTask(Context context, Uri uri, Contact contact, Channel channel,String mimType) {
+        public ShareAsyncTask(Context context, Uri uri, Contact contact, Channel channel, String mimType) {
             this.contextWeakReference = new WeakReference<Context>(context);
             this.uri = uri;
             this.contact = contact;
@@ -520,20 +554,20 @@ protected File doInBackground(Void... voids) {
                 Context context = contextWeakReference.get();
                 if (context != null && !TextUtils.isEmpty(mimeType)) {
                     String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
-                    String array[]= mimeType.split("/");
+                    String array[] = mimeType.split("/");
                     String fileFormat = null;
-                        if(array.length>1){
-                            fileFormat =  array[1];
-                        }
+                    if (array.length > 1) {
+                        fileFormat = array[1];
+                    }
 
-                        if (TextUtils.isEmpty(fileFormat)) {
-                            return null;
-                        }
+                    if (TextUtils.isEmpty(fileFormat)) {
+                        return null;
+                    }
 
-                        String fileNameToWrite = timeStamp + "." + fileFormat;
-                        File mediaFile = FileClientService.getFilePath(fileNameToWrite, context, mimeType);
-                        fileClientService.writeFile(uri, mediaFile);
-                        return mediaFile;
+                    String fileNameToWrite = timeStamp + "." + fileFormat;
+                    File mediaFile = FileClientService.getFilePath(fileNameToWrite, context, mimeType);
+                    fileClientService.writeFile(uri, mediaFile);
+                    return mediaFile;
                 }
             }
             return null;
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/AppContactFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/AppContactFragment.java
index 49a4f532..dbfecfa8 100755
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/AppContactFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/AppContactFragment.java
@@ -108,6 +108,7 @@
     private MobiComUserPreference userPreference;
     private ContactDatabase contactDatabase;
     private boolean isDeviceContactSync;
+    View footerView;
     static int CONSTANT_TIME = 60 * 1000;
 
     /**
@@ -197,7 +198,7 @@ public void onSuccess(Context context, String response, String[] contactList) {
                 @Override
                 public void onFailure(Context context, String response, Exception e) {
                     progressBar.dismiss();
-                    Toast.makeText(getContext(), "Failed to load contacts : Response : " + response + "\nException : " + e, Toast.LENGTH_SHORT).show();
+                    Toast.makeText(getContext(), R.string.failed_to_load_contact + response + "\nException : " + e, Toast.LENGTH_SHORT).show();
                 }
             };
 
@@ -218,6 +219,10 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
         shareButton = (Button) view.findViewById(R.id.actionButton);
         shareButton.setVisibility(alCustomizationSettings.isInviteFriendsInContactActivity() ? View.VISIBLE : View.GONE);
         resultTextView = (TextView) view.findViewById(R.id.result);
+        footerView = inflater.inflate(R.layout.mobicom_message_list_header_footer, null, false);
+        if(footerView != null){
+            footerView.setVisibility(View.GONE);
+        }
         return view;
     }
 
@@ -254,10 +259,12 @@ public void onClick(View v) {
                 openInvite();
             }
         });
-
         setListAdapter(mAdapter);
         getListView().setOnItemClickListener(this);
         getListView().setFastScrollEnabled(true);
+        if (footerView != null) {
+            getListView().addFooterView(footerView);
+        }
         getListView().setOnScrollListener(new EndlessScrollListener());
 
         // If there's a previously selected search item from a saved state then don't bother
@@ -430,7 +437,7 @@ private int getListPreferredItemHeight() {
         if (isDeviceContactSync) {
             return contactDatabase.getPhoneContactCursorLoader(mSearchTerm, userIdArray, alCustomizationSettings != null && alCustomizationSettings.isShowAllDeviceContacts());
         } else {
-            return contactDatabase.getSearchCursorLoader(mSearchTerm, userIdArray,MobiComUserPreference.getInstance(getActivity()).getParentGroupKey());
+            return contactDatabase.getSearchCursorLoader(mSearchTerm, userIdArray, MobiComUserPreference.getInstance(getActivity()).getParentGroupKey());
         }
     }
 
@@ -453,15 +460,14 @@ public void onLoaderReset(Loader<Cursor> loader) {
     }
 
     public void processLoadRegisteredUsers() {
-
-        final ProgressDialog progressDialog = ProgressDialog.show(getActivity(), "",
-                getActivity().getString(R.string.applozic_contacts_loading_info), true);
-
+        if (footerView != null) {
+            footerView.setVisibility(View.VISIBLE);
+        }
         RegisteredUsersAsyncTask.TaskListener usersAsyncTaskTaskListener = new RegisteredUsersAsyncTask.TaskListener() {
             @Override
             public void onSuccess(RegisteredUsersApiResponse registeredUsersApiResponse, String[] userIdArray) {
-                if (progressDialog != null && progressDialog.isShowing()) {
-                    progressDialog.dismiss();
+                if (footerView != null) {
+                    footerView.setVisibility(View.GONE);
                 }
                 try {
                     if (registeredUsersApiResponse != null) {
@@ -476,8 +482,8 @@ public void onSuccess(RegisteredUsersApiResponse registeredUsersApiResponse, Str
 
             @Override
             public void onFailure(RegisteredUsersApiResponse registeredUsersApiResponse, String[] userIdArray, Exception exception) {
-                if (progressDialog != null && progressDialog.isShowing()) {
-                    progressDialog.dismiss();
+                if (footerView != null) {
+                    footerView.setVisibility(View.GONE);
                 }
                 String error = getString(Utils.isInternetAvailable(getActivity()) ? R.string.applozic_server_error : R.string.you_need_network_access_for_block_or_unblock);
                 Toast toast = Toast.makeText(getActivity(), error, Toast.LENGTH_LONG);
@@ -804,6 +810,13 @@ public void onReceive(Context context, Intent intent) {
         }
     }
 
+    public void restartLoader() {
+        if (getLoaderManager() != null) {
+            getLoaderManager().restartLoader(
+                    ContactsQuery.QUERY_ID, null, AppContactFragment.this);
+        }
+    }
+
     public void blockUserProcess(final Contact contact, final boolean block) {
         final ProgressDialog progressDialog = ProgressDialog.show(getActivity(), "",
                 getActivity().getString(R.string.please_wait_info), true);
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/ContactSelectionFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/ContactSelectionFragment.java
index 99c246bc..4a3bc7e7 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/ContactSelectionFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/contact/ContactSelectionFragment.java
@@ -118,6 +118,7 @@
     private String[] groupContacts;
     private Bundle bundle;
     private List<String> userIdList;
+    private View footerView;
     RefreshContactsScreenBroadcast refreshContactsScreenBroadcast;
 
     @Override
@@ -231,6 +232,14 @@ public void onItemClick(AdapterView<?> adapterView, View view, int position, lon
                 getActivity().setResult(getActivity().RESULT_OK, intent);
                 getActivity().finish();
             }
+        } else {
+            AppCompatCheckBox checkBox = (AppCompatCheckBox) view.findViewById(R.id.checkbox);
+            checkBox.toggle();
+            if (checkBox.isChecked()) {
+                userIdList.add(contact.getContactIds());
+            } else if (!checkBox.isChecked()) {
+                userIdList.remove(contact.getContactIds());
+            }
         }
     }
 
@@ -240,7 +249,11 @@ public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
         setListAdapter(mAdapter);
         getListView().setOnItemClickListener(this);
+        getListView().setFastScrollEnabled(true);
         getListView().setOnScrollListener(new EndlessScrollListener());
+        if (footerView != null) {
+            getListView().addFooterView(footerView);
+        }
 
         // If there's a previously selected search item from a saved state then don't bother
         // initializing the loader as it will be restarted later when the query is populated into
@@ -299,14 +312,15 @@ public void onPause() {
 
     public void processDownloadRegisteredUsers() {
 
-        final ProgressDialog progressDialog = ProgressDialog.show(getActivity(), "",
-                getActivity().getString(R.string.applozic_contacts_loading_info), true);
+        if (footerView != null) {
+            footerView.setVisibility(View.VISIBLE);
+        }
 
         RegisteredUsersAsyncTask.TaskListener usersAsyncTaskTaskListener = new RegisteredUsersAsyncTask.TaskListener() {
             @Override
             public void onSuccess(RegisteredUsersApiResponse registeredUsersApiResponse, String[] userIdArray) {
-                if (progressDialog != null && progressDialog.isShowing()) {
-                    progressDialog.dismiss();
+                if (footerView != null) {
+                    footerView.setVisibility(View.GONE);
                 }
                 if (registeredUsersApiResponse != null) {
                     try {
@@ -329,8 +343,8 @@ public void onSuccess(RegisteredUsersApiResponse registeredUsersApiResponse, Str
 
             @Override
             public void onFailure(RegisteredUsersApiResponse registeredUsersApiResponse, String[] userIdArray, Exception exception) {
-                if (progressDialog != null && progressDialog.isShowing()) {
-                    progressDialog.dismiss();
+                if (footerView != null) {
+                    footerView.setVisibility(View.GONE);
                 }
                 String error = getString(Utils.isInternetAvailable(getActivity()) ? R.string.applozic_server_error : R.string.you_need_network_access_for_block_or_unblock);
                 Toast toast = Toast.makeText(getActivity(), error, Toast.LENGTH_LONG);
@@ -374,6 +388,10 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
         Button shareButton = (Button) view.findViewById(R.id.actionButton);
         shareButton.setVisibility(alCustomizationSettings.isInviteFriendsInContactActivity() ? View.VISIBLE : View.GONE);
         TextView resultTextView = (TextView) view.findViewById(R.id.result);
+        footerView = inflater.inflate(R.layout.mobicom_message_list_header_footer, null, false);
+        if (footerView != null) {
+            footerView.setVisibility(View.GONE);
+        }
         return view;
     }
 
@@ -487,7 +505,7 @@ public void onFailure(ChannelFeedApiResponse channelFeedApiResponse, Context con
         if (Applozic.getInstance(getContext()).isDeviceContactSync()) {
             return contactDatabase.getPhoneContactCursorLoader(mSearchTerm, groupContacts, false);
         } else {
-            return contactDatabase.getSearchCursorLoader(mSearchTerm, groupContacts,MobiComUserPreference.getInstance(getActivity()).getParentGroupKey());
+            return contactDatabase.getSearchCursorLoader(mSearchTerm, groupContacts, MobiComUserPreference.getInstance(getActivity()).getParentGroupKey());
         }
     }
 
@@ -665,9 +683,14 @@ public void bindView(View view, Context context, Cursor cursor) {
             } else {
                 holder.contactNumberTextView.setText("");
             }
+
+            // If the selected items contains the current item, set the checkbox to be checked
+
             holder.checkBox.setOnClickListener(new View.OnClickListener() {
+                @Override
                 public void onClick(View v) {
                     AppCompatCheckBox checkBox = (AppCompatCheckBox) v;
+
                     if (checkBox.isChecked()) {
                         userIdList.add(contact.getContactIds());
                     } else if (!checkBox.isChecked()) {
@@ -676,8 +699,6 @@ public void onClick(View v) {
                 }
             });
 
-            // If the selected items contains the current item, set the checkbox to be checked
-
             holder.checkBox.setChecked(userIdList.contains(contact.getContactIds()));
 
 
@@ -762,6 +783,13 @@ public int getSectionForPosition(int i) {
 
     }
 
+    public void restartLoader() {
+        if (getLoaderManager() != null) {
+            getLoaderManager().restartLoader(
+                    ContactSelectionFragment.ContactsQuery.QUERY_ID, null, ContactSelectionFragment.this);
+        }
+    }
+
     private class ContactViewHolder {
         AppCompatCheckBox checkBox;
         TextView textView1, contactNumberTextView;
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/fragment/ProfileFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/fragment/ProfileFragment.java
old mode 100644
new mode 100755
index ab293d72..4c987716
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/fragment/ProfileFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/fragment/ProfileFragment.java
@@ -1,5 +1,6 @@
 package com.applozic.mobicomkit.uiwidgets.people.fragment;
 
+import android.animation.ObjectAnimator;
 import android.app.Activity;
 import android.app.ProgressDialog;
 import android.content.Context;
@@ -41,6 +42,7 @@
 import com.applozic.mobicomkit.uiwidgets.AlCustomizationSettings;
 import com.applozic.mobicomkit.uiwidgets.ApplozicSetting;
 import com.applozic.mobicomkit.uiwidgets.R;
+import com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity;
 import com.applozic.mobicomkit.uiwidgets.conversation.fragment.PictureUploadPopUpFragment;
 import com.applozic.mobicomkit.uiwidgets.instruction.ApplozicPermissions;
 import com.applozic.mobicommons.commons.core.utils.PermissionsUtils;
@@ -80,6 +82,8 @@
     private ApplozicPermissions applozicPermissions;
     private RelativeLayout applozicProfileContactLayout;
 
+    private TextView toolbarTitle;
+
     public void setApplozicPermissions(ApplozicPermissions applozicPermissions) {
         this.applozicPermissions = applozicPermissions;
     }
@@ -109,9 +113,16 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
         setupDeviderView(view, R.id.applozic_notification_section_rl, R.id.applozic_notification_verticalline_rl);
 
         Toolbar toolbar = (Toolbar) getActivity().findViewById(R.id.my_toolbar);
+
+            toolbarTitle = toolbar.findViewById(R.id.toolbar_title);
+            toolbarTitle.setText(R.string.applozic_user_profile_heading);
+            ObjectAnimator animation = ObjectAnimator.ofFloat(toolbarTitle, "translationY", 0f);
+            animation.setDuration(10);
+            animation.start();
+
         toolbar.setClickable(false);
-        toolbar.setTitle(getString(R.string.applozic_user_profile_heading));
-        toolbar.setSubtitle("");
+//        toolbar.setTitle(getString(R.string.applozic_user_profile_heading));
+//        toolbar.setSubtitle("");
         setHasOptionsMenu(true);
 
         contactService = new AppContactService(getActivity());
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/fragment/UserProfileFragment.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/fragment/UserProfileFragment.java
old mode 100644
new mode 100755
index 336f0d0b..3d8b803c
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/fragment/UserProfileFragment.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/people/fragment/UserProfileFragment.java
@@ -20,6 +20,8 @@
 import com.applozic.mobicomkit.uiwidgets.R;
 import com.applozic.mobicomkit.uiwidgets.alphanumbericcolor.AlphaNumberColorUtil;
 import com.applozic.mobicomkit.uiwidgets.conversation.ConversationUIService;
+import com.applozic.mobicomkit.uiwidgets.conversation.activity.ConversationActivity;
+import com.applozic.mobicomkit.uiwidgets.uilistener.CustomToolbarListener;
 import com.applozic.mobicommons.commons.image.ImageLoader;
 import com.applozic.mobicommons.commons.image.ImageUtils;
 import com.applozic.mobicommons.people.contact.Contact;
@@ -74,8 +76,9 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         if (bundle != null) {
             contact = (Contact) bundle.getSerializable(ConversationUIService.CONTACT);
             contact = baseContactService.getContactById(contact.getContactIds());
-            ((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(contact.getDisplayName());
-            ((AppCompatActivity) getActivity()).getSupportActionBar().setSubtitle("");
+
+            ((CustomToolbarListener)getActivity()).setToolbarTitle(contact.getDisplayName());
+
             name.setText(contact.getDisplayName());
             char firstLetter = contact.getDisplayName().toUpperCase().charAt(0);
             String contactNumber = contact.getDisplayName().toUpperCase();
@@ -164,7 +167,8 @@ void reload() {
             }
         }
         if (stringBufferTitle != null) {
-            ((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(stringBufferTitle.toString());
+                ((CustomToolbarListener)getActivity()).setToolbarTitle(contact.getDisplayName());
+
         }
     }
 
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/uikit/AlMessageProperties.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/uikit/AlMessageProperties.java
index 7b3b17a7..76a2912e 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/uikit/AlMessageProperties.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/uikit/AlMessageProperties.java
@@ -169,7 +169,7 @@ public void setUnreadCount(TextView textView) {
      * @return Formatted time as String.
      */
     public String getCreatedAtTime() {
-        return DateUtils.getFormattedDateAndTime(message.getCreatedAtTime());
+        return DateUtils.getFormattedDateAndTime(context, message.getCreatedAtTime(), R.string.JUST_NOW, R.plurals.MINUTES, R.plurals.HOURS);
     }
 
     /**
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/uilistener/ALProfileClickListener.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/uilistener/ALProfileClickListener.java
index a1e8dba7..4d2c147a 100644
--- a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/uilistener/ALProfileClickListener.java
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/uilistener/ALProfileClickListener.java
@@ -11,5 +11,5 @@
 
 public interface ALProfileClickListener {
 
-    void onClick(Context context, Contact contact, Channel channel, boolean isToolbar);
+    void onClick(Context context, String userId, Channel channel, boolean isToolbar);
 }
diff --git a/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/uilistener/CustomToolbarListener.java b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/uilistener/CustomToolbarListener.java
new file mode 100644
index 00000000..2ea0f120
--- /dev/null
+++ b/mobicomkitui/src/main/java/com/applozic/mobicomkit/uiwidgets/uilistener/CustomToolbarListener.java
@@ -0,0 +1,14 @@
+package com.applozic.mobicomkit.uiwidgets.uilistener;
+
+import com.applozic.mobicommons.people.channel.Channel;
+import com.applozic.mobicommons.people.contact.Contact;
+
+public interface CustomToolbarListener {
+
+    void setToolbarTitle(String title);
+
+    void setToolbarSubtitle(String subtitle);
+
+    void setToolbarImage(Contact contact, Channel channel);
+
+}
diff --git a/mobicomkitui/src/main/res/layout/al_conversation_item_layout.xml b/mobicomkitui/src/main/res/layout/al_conversation_item_layout.xml
index 526d75fa..f8f62671 100644
--- a/mobicomkitui/src/main/res/layout/al_conversation_item_layout.xml
+++ b/mobicomkitui/src/main/res/layout/al_conversation_item_layout.xml
@@ -57,8 +57,8 @@
         android:textDirection="locale"
         android:textIsSelectable="false"
         android:textSize="18sp"
-        app:layout_constraintEnd_toStartOf="@id/createdAtTime"
-        app:layout_constraintStart_toStartOf="@id/profileImageBarrier"
+        app:layout_constraintEnd_toStartOf="@+id/createdAtTime"
+        app:layout_constraintStart_toStartOf="@+id/profileImageBarrier"
         app:layout_constraintTop_toTopOf="parent" />
 
     <TextView
@@ -73,9 +73,9 @@
         android:text="Now"
         android:textColor="@color/message_details_text_color"
         android:textSize="10sp"
-        app:layout_constraintBottom_toBottomOf="@id/smReceivers"
+        app:layout_constraintBottom_toBottomOf="@+id/smReceivers"
         app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintTop_toTopOf="@id/smReceivers" />
+        app:layout_constraintTop_toTopOf="@+id/smReceivers" />
 
 
     <ImageView
@@ -88,8 +88,8 @@
         android:layout_marginStart="12dp"
         android:src="@drawable/applozic_ic_action_attachment"
         android:visibility="gone"
-        app:layout_constraintStart_toEndOf="@id/profileImageBarrier"
-        app:layout_constraintTop_toBottomOf="@id/smReceivers" />
+        app:layout_constraintStart_toEndOf="@+id/profileImageBarrier"
+        app:layout_constraintTop_toBottomOf="@+id/smReceivers" />
 
     <TextView
         android:id="@+id/message"
@@ -107,9 +107,9 @@
         android:textColor="#999"
         android:textDirection="locale"
         android:textSize="14sp"
-        app:layout_constraintEnd_toStartOf="@id/unreadSmsCount"
+        app:layout_constraintEnd_toStartOf="@+id/unreadSmsCount"
         app:layout_constraintStart_toEndOf="@+id/attachmentIcon"
-        app:layout_constraintTop_toBottomOf="@id/smReceivers" />
+        app:layout_constraintTop_toBottomOf="@+id/smReceivers" />
 
     <TextView
         android:id="@+id/unreadSmsCount"
@@ -127,8 +127,8 @@
         android:textSize="9sp"
         android:textStyle="bold"
         android:visibility="gone"
-        app:layout_constraintBottom_toBottomOf="@id/message"
+        app:layout_constraintBottom_toBottomOf="@+id/message"
         app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toEndOf="@id/message"
-        app:layout_constraintTop_toTopOf="@id/message" />
+        app:layout_constraintStart_toEndOf="@+id/message"
+        app:layout_constraintTop_toTopOf="@+id/message" />
 </android.support.constraint.ConstraintLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/contact_select_list_item.xml b/mobicomkitui/src/main/res/layout/contact_select_list_item.xml
index 730f91c4..0e6c85d1 100755
--- a/mobicomkitui/src/main/res/layout/contact_select_list_item.xml
+++ b/mobicomkitui/src/main/res/layout/contact_select_list_item.xml
@@ -13,10 +13,10 @@
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:paddingBottom="6dp"
+        android:paddingEnd="0dp"
         android:paddingLeft="@dimen/listview_item_padding"
-        android:paddingStart="@dimen/listview_item_padding"
         android:paddingRight="0dp"
-        android:paddingEnd="0dp"
+        android:paddingStart="@dimen/listview_item_padding"
         android:paddingTop="8dp">
 
         <TextView
@@ -37,10 +37,10 @@
             android:layout_width="48dp"
             android:layout_height="48dp"
             android:layout_gravity="center"
+            android:layout_toEndOf="@+id/alphabeticImage"
             android:layout_toRightOf="@+id/alphabeticImage"
             android:src="@drawable/applozic_ic_contact_picture_holo_light"
-            android:visibility="visible"
-            android:layout_toEndOf="@+id/alphabeticImage" />
+            android:visibility="visible" />
 
     </RelativeLayout>
 
@@ -66,16 +66,16 @@
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:layout_alignParentBottom="true"
+        android:layout_alignParentEnd="true"
         android:layout_alignParentRight="true"
+        android:layout_marginEnd="5dp"
         android:layout_marginRight="5dp"
+        android:layout_toEndOf="@+id/profile_image_relative_layout"
         android:layout_toRightOf="@+id/profile_image_relative_layout"
+        android:paddingEnd="@dimen/listview_item_padding"
         android:paddingLeft="@dimen/listview_item_padding"
-        android:paddingStart="@dimen/listview_item_padding"
         android:paddingRight="@dimen/listview_item_padding"
-        android:paddingEnd="@dimen/listview_item_padding"
-        android:layout_toEndOf="@+id/profile_image_relative_layout"
-        android:layout_alignParentEnd="true"
-        android:layout_marginEnd="5dp">
+        android:paddingStart="@dimen/listview_item_padding">
 
         <TextView
             android:id="@+id/applozic_group_member_info"
@@ -95,7 +95,6 @@
             android:id="@+id/contactNumberTextView"
             android:layout_width="match_parent"
             android:layout_height="26dp"
-            android:layout_marginTop="2dp"
             android:ellipsize="end"
             android:singleLine="true"
             android:text=""
@@ -105,6 +104,21 @@
 
     </RelativeLayout>
 
+    <android.support.v7.widget.AppCompatCheckBox
+        android:id="@+id/checkbox"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentEnd="true"
+        android:layout_alignParentRight="true"
+        android:layout_centerVertical="true"
+        android:layout_marginEnd="5dp"
+        android:layout_marginLeft="5dp"
+        android:layout_marginRight="5dp"
+        android:layout_marginStart="5dp"
+        android:focusable="false"
+        android:padding="10dp"
+        app:buttonTint="#b2b2b2" />
+
     <TextView
         android:id="@+id/displayName"
         android:layout_width="match_parent"
@@ -112,34 +126,18 @@
         android:layout_above="@id/displayNameLayout"
         android:layout_alignParentTop="true"
         android:layout_alignWithParentIfMissing="true"
-        android:layout_marginRight="30dp"
+        android:layout_toEndOf="@id/profile_image_relative_layout"
+        android:layout_toLeftOf="@+id/checkbox"
         android:layout_toRightOf="@id/profile_image_relative_layout"
+        android:layout_toStartOf="@+id/checkbox"
         android:ellipsize="end"
         android:gravity="center_vertical"
-        android:textDirection="locale"
         android:paddingLeft="@dimen/listview_item_padding"
         android:paddingStart="@dimen/listview_item_padding"
         android:singleLine="true"
+        android:text=""
         android:textColor="@color/message_details_text_color"
-        android:textSize="18sp"
-        android:layout_marginEnd="30dp"
-        android:layout_toEndOf="@id/profile_image_relative_layout" />
-
-
-    <android.support.v7.widget.AppCompatCheckBox
-        android:id="@+id/checkbox"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_alignEnd="@+id/displayName"
-        android:layout_alignParentRight="true"
-        android:layout_alignRight="@+id/displayName"
-        android:layout_centerVertical="true"
-        android:layout_marginLeft="5dp"
-        android:layout_marginRight="5dp"
-        android:padding="10dp"
-        app:buttonTint="#b2b2b2"
-        android:layout_alignParentEnd="true"
-        android:layout_marginEnd="5dp"
-        android:layout_marginStart="5dp" />
+        android:textDirection="locale"
+        android:textSize="18sp" />
 
 </RelativeLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/contact_users_layout.xml b/mobicomkitui/src/main/res/layout/contact_users_layout.xml
index 0cbd92a9..b386e2e8 100755
--- a/mobicomkitui/src/main/res/layout/contact_users_layout.xml
+++ b/mobicomkitui/src/main/res/layout/contact_users_layout.xml
@@ -44,7 +44,7 @@
         android:layout_height="wrap_content"
         android:layout_alignParentRight="true"
         android:layout_below="@+id/displayName"
-        android:layout_toRightOf="@id/profile_image_relative_layout"
+        android:layout_toRightOf="@+id/profile_image_relative_layout"
         android:ellipsize="marquee"
         android:paddingLeft="@dimen/listview_item_padding"
         android:paddingStart="@dimen/listview_item_padding"
@@ -55,7 +55,7 @@
         android:singleLine="true"
         android:textColor="#757575"
         android:textSize="14sp"
-        android:layout_toEndOf="@id/profile_image_relative_layout"
+        android:layout_toEndOf="@+id/profile_image_relative_layout"
         android:layout_alignParentEnd="true" />
 
     <!-- Use standard android.R class text1 id instead of app specific id. This is just useful for
@@ -66,14 +66,15 @@
         android:id="@+id/displayName"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_alignParentRight="true"
         android:layout_alignParentTop="true"
         android:layout_alignWithParentIfMissing="true"
         android:layout_marginTop="6dp"
         android:textDirection="locale"
         android:textAlignment="gravity"
-        android:layout_toRightOf="@id/profile_image_relative_layout"
+        android:layout_toRightOf="@+id/profile_image_relative_layout"
         android:ellipsize="marquee"
+        android:scrollHorizontally="true"
+        android:marqueeRepeatLimit="marquee_forever"
         android:fontFamily="sans-serif-light"
         android:gravity="center_vertical"
         android:paddingLeft="@dimen/listview_item_padding"
@@ -83,8 +84,9 @@
         android:singleLine="true"
         android:textColor="#616161"
         android:textSize="15sp"
-        android:layout_alignParentEnd="true"
-        android:layout_toEndOf="@id/profile_image_relative_layout" />
+        android:layout_toLeftOf="@+id/adminTextView"
+        android:layout_toStartOf="@+id/adminTextView"
+        android:layout_toEndOf="@+id/profile_image_relative_layout" />
 
 
     <!--Originally, @string/admin_text at android:text="Group Admin"-->
diff --git a/mobicomkitui/src/main/res/layout/conversation_app_bar.xml b/mobicomkitui/src/main/res/layout/conversation_app_bar.xml
new file mode 100644
index 00000000..edf022bc
--- /dev/null
+++ b/mobicomkitui/src/main/res/layout/conversation_app_bar.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="fill_parent"
+    android:layout_height="?actionBarSize"
+    android:background="?attr/selectableItemBackgroundBorderless">
+    <!-- android:background="?attr/selectableItemBackgroundBorderless" will cause this Custom View to make ripple effect -->
+
+    <de.hdodenhof.circleimageview.CircleImageView
+        android:id="@+id/conversation_contact_photo"
+        android:layout_width="35.0dip"
+        android:layout_height="35.0dip"
+        android:visibility="gone"
+        android:layout_marginTop="8dp"
+        android:layout_marginBottom="8dp"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintBottom_toBottomOf="parent" />
+
+    <TextView
+        android:id="@+id/toolbar_title"
+        style="@style/ToolbarTitle"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_vertical"
+        android:layout_marginStart="6dp"
+        android:layout_marginLeft="6dp"
+        android:ellipsize="end"
+        android:gravity="center_vertical"
+        android:maxLines="1"
+        android:text="text"
+        app:layout_constraintStart_toEndOf="@id/conversation_contact_photo"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintBottom_toBottomOf="parent"/>
+
+    <TextView
+        android:id="@+id/toolbar_subtitle"
+        style="@style/ToolbarSubtitle"
+        android:layout_width="wrap_content"
+        android:layout_height="0dp"
+        android:ellipsize="end"
+        android:layout_marginStart="6dp"
+        android:layout_marginLeft="6dp"
+        android:maxLines="1"
+        android:text="text"
+        android:visibility="gone"
+        app:layout_constraintTop_toBottomOf="@id/toolbar_title"
+        app:layout_constraintStart_toEndOf="@id/conversation_contact_photo" />
+
+</android.support.constraint.ConstraintLayout>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/layout/quickconversion_activity.xml b/mobicomkitui/src/main/res/layout/quickconversion_activity.xml
old mode 100644
new mode 100755
index e5527b04..8b546bac
--- a/mobicomkitui/src/main/res/layout/quickconversion_activity.xml
+++ b/mobicomkitui/src/main/res/layout/quickconversion_activity.xml
@@ -5,16 +5,35 @@
     android:layout_height="match_parent"
     android:orientation="vertical">
 
-    <android.support.v7.widget.Toolbar
-        android:id="@+id/my_toolbar"
+    <android.support.design.widget.AppBarLayout
         android:layout_width="match_parent"
-        android:layout_height="?attr/actionBarSize"
-        android:background="?attr/colorPrimary"
-        android:elevation="4dp"
-        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
-        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
-        app:subtitleTextAppearance="@style/ToolbarSubtitle"
-        app:titleTextAppearance="@style/ToolbarTitle"/>
+        android:layout_height="wrap_content">
+
+        <android.support.v7.widget.Toolbar
+            android:id="@+id/my_toolbar"
+            android:layout_width="match_parent"
+            android:layout_height="?attr/actionBarSize"
+            android:background="?attr/colorPrimary"
+            android:elevation="4dp"
+            android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
+            app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
+            app:subtitleTextAppearance="@style/ToolbarSubtitle"
+            app:titleTextAppearance="@style/ToolbarTitle"
+            android:contentInsetLeft="0dp"
+            android:contentInsetStart="0dp"
+            app:contentInsetLeft="0dp"
+            app:contentInsetStart="0dp"
+            android:contentInsetRight="0dp"
+            android:contentInsetEnd="0dp"
+            app:contentInsetRight="0dp"
+            app:contentInsetEnd="0dp"
+            app:contentInsetStartWithNavigation="0dp">
+
+            <include layout="@layout/conversation_app_bar"/>
+
+        </android.support.v7.widget.Toolbar>
+
+    </android.support.design.widget.AppBarLayout>
 
     <include layout="@layout/al_service_disconnection_layout"/>
 
diff --git a/mobicomkitui/src/main/res/menu/mobicom_basic_menu_for_normal_message.xml b/mobicomkitui/src/main/res/menu/mobicom_basic_menu_for_normal_message.xml
index 3c8762d1..8ef9201b 100755
--- a/mobicomkitui/src/main/res/menu/mobicom_basic_menu_for_normal_message.xml
+++ b/mobicomkitui/src/main/res/menu/mobicom_basic_menu_for_normal_message.xml
@@ -23,7 +23,7 @@
         android:showAsAction="ifRoom"
         android:title="@string/conversation"
         android:visible="false"
-        mobicomkit:showAsAction="ifRoom" />
+        mobicomkit:showAsAction="always" />
 
     <item
         android:id="@+id/start_new"
@@ -32,7 +32,7 @@
         android:showAsAction="ifRoom|collapseActionView"
         android:title="@string/start_New"
         android:visible="false"
-        mobicomkit:showAsAction="ifRoom|collapseActionView" />
+        mobicomkit:showAsAction="always" />
 
     <item
         android:id="@+id/dial"
diff --git a/mobicomkitui/src/main/res/values/mobicom_array.xml b/mobicomkitui/src/main/res/values/mobicom_array.xml
index 25894c3c..4acb13ae 100755
--- a/mobicomkitui/src/main/res/values/mobicom_array.xml
+++ b/mobicomkitui/src/main/res/values/mobicom_array.xml
@@ -108,4 +108,11 @@
         <item>&#xf007;</item>
     </string-array>
 
+    <string-array name="notification_texts">
+        <item>Location</item>
+        <item>Audio</item>
+        <item>Video</item>
+        <item>Attachment</item>
+    </string-array>
+
 </resources>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/values/mobicom_colors.xml b/mobicomkitui/src/main/res/values/mobicom_colors.xml
index 15b04ea3..22b98403 100755
--- a/mobicomkitui/src/main/res/values/mobicom_colors.xml
+++ b/mobicomkitui/src/main/res/values/mobicom_colors.xml
@@ -71,5 +71,4 @@
     <color name="apploizc_custom_channel_message_text_color">#cccccc</color>
     <color name="apploizc_reply_sent_message_bg_color">#C0C0C0</color>
     <color name="apploizc_reply_received_message_bg_color">#F5F5F5</color>
-
 </resources>
\ No newline at end of file
diff --git a/mobicomkitui/src/main/res/values/mobicom_strings.xml b/mobicomkitui/src/main/res/values/mobicom_strings.xml
index bf1d3177..01e9e124 100755
--- a/mobicomkitui/src/main/res/values/mobicom_strings.xml
+++ b/mobicomkitui/src/main/res/values/mobicom_strings.xml
@@ -67,7 +67,7 @@
 
     <string name="verification_success">Your phone number got verified successfully</string>
     <string name="launch_mobitexter_app">LAUNCH_MOBITEXTER</string>
-    <string name="delete_conversation">Delete</string>
+    <string name="delete_conversation">Delete conversation</string>
     <string name="sync_messages_from_server">Syncing with the server…</string>
 
     <string name="incoming_call">Received call</string>
@@ -192,4 +192,27 @@
     <string name="al_location_string">Location</string>
     <string name="restricted_words_are_not_allowed">Restricted words are not allowed</string>
     <string name="ok_alert">OK</string>
+
+    <string name="JUST_NOW">Just now</string>
+    <string name="YESTERDAY">Yesterday</string>
+
+    <plurals name="HOURS">
+        <item quantity="one">%d hr</item>
+        <item quantity="other">%d hrs</item>
+    </plurals>
+
+    <plurals name="MINUTES">
+        <item quantity="one">%d min</item>
+        <item quantity="other">%d mins</item>
+    </plurals>
+
+    <plurals name="MINUTES_AGO">
+        <item quantity="one">%d min ago</item>
+        <item quantity="other">%d mins ago</item>
+    </plurals>
+
+    <plurals name="HOURS_AGO">
+        <item quantity="one">%d hr ago</item>
+        <item quantity="other">%d hrs ago</item>
+    </plurals>
 </resources>
diff --git a/mobicomkitui/src/main/res/values/strings.xml b/mobicomkitui/src/main/res/values/strings.xml
index 723388ff..220319b1 100755
--- a/mobicomkitui/src/main/res/values/strings.xml
+++ b/mobicomkitui/src/main/res/values/strings.xml
@@ -37,6 +37,7 @@
     <string name="snap_text">Oh Snap!</string>
     <string name="account_disconnection_message">We’re sorry but messaging is not \navailable at the moment.\nPlease contact support for more details</string>
     <string name="powered_by_applozic_message">We are powered by Applozic</string>
+    <string name="failed_to_load_contact">Failed to load contacts : Response : </string>
     <string name="rupee_symbol">\u20B9</string>
 
 
diff --git a/mobicommons/build.gradle b/mobicommons/build.gradle
index ff49ff6f..5b948acf 100755
--- a/mobicommons/build.gradle
+++ b/mobicommons/build.gradle
@@ -8,7 +8,7 @@ android {
         minSdkVersion 14
         targetSdkVersion 27
         versionCode 1
-        versionName "5.8.8"
+        versionName "5.11"
     }
     buildTypes {
         release {
@@ -44,7 +44,7 @@ dependencies {
     artifact = 'mobicommons'
 
     libraryDescription = 'Applozic MobiFramekwork mobicommons library for utilities'
-    libraryVersion = '5.8.8'
+    libraryVersion = '5.11'
     developerId = 'devashish'
     developerName = 'Applozic'
     developerEmail = 'devashish.mamgain@gmail.com'
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/ALSpecificSettings.java b/mobicommons/src/main/java/com/applozic/mobicommons/ALSpecificSettings.java
index 425a6d98..1af0b435 100644
--- a/mobicommons/src/main/java/com/applozic/mobicommons/ALSpecificSettings.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/ALSpecificSettings.java
@@ -12,13 +12,15 @@
 public class ALSpecificSettings {
     private static final String MY_PREFERENCE = "applozic_internal_preference_key";
     private SharedPreferences sharedPreferences;
-    public static ALSpecificSettings applozicSettings;
+    private static ALSpecificSettings applozicSettings;
     private static final String DATABASE_NAME = "DATABASE_NAME";
     private static final String ENABLE_TEXT_LOGGING = "ENABLE_TEXT_LOGGING";
     private static final String TEXT_LOG_FILE_NAME = "TEXT_LOG_FILE_NAME";
+    private static final String AL_BASE_URL = "AL_BASE_URL";
+    private static final String KM_BASE_URL = "KM_BASE_URL";
 
     private ALSpecificSettings(Context context) {
-        this.sharedPreferences = context.getSharedPreferences(MY_PREFERENCE, context.MODE_PRIVATE);
+        this.sharedPreferences = context.getSharedPreferences(MY_PREFERENCE, Context.MODE_PRIVATE);
     }
 
     public static ALSpecificSettings getInstance(Context context) {
@@ -55,6 +57,24 @@ public String getTextLogFileName() {
         return sharedPreferences.getString(TEXT_LOG_FILE_NAME, "applozic_text_logs");
     }
 
+    public String getAlBaseUrl() {
+        return sharedPreferences.getString(AL_BASE_URL, null);
+    }
+
+    public ALSpecificSettings setAlBaseUrl(String url) {
+        sharedPreferences.edit().putString(AL_BASE_URL, url).commit();
+        return this;
+    }
+
+    public String getKmBaseUrl() {
+        return sharedPreferences.getString(KM_BASE_URL, null);
+    }
+
+    public ALSpecificSettings setKmBaseUrl(String url) {
+        sharedPreferences.edit().putString(KM_BASE_URL, url).commit();
+        return this;
+    }
+
     public boolean clearAll() {
         if (sharedPreferences != null) {
             return sharedPreferences.edit().clear().commit();
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/DateUtils.java b/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/DateUtils.java
index 8da1cd66..818b8942 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/DateUtils.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/DateUtils.java
@@ -1,5 +1,6 @@
 package com.applozic.mobicommons.commons.core.utils;
 
+import android.content.Context;
 import android.os.SystemClock;
 
 import java.text.SimpleDateFormat;
@@ -12,13 +13,6 @@
  */
 public class DateUtils {
 
-    private static final String JUST_NOW = "Just now";
-    private static final String MINUTES = " mins";
-    private static final String HOURS = " hrs";
-    private static final String H = "h";
-    private static final String AGO = " ago";
-    private static final String YESTERDAY = "Yesterday";
-
     public static boolean isSameDay(Long timestamp) {
         Calendar calendarForCurrent = Calendar.getInstance();
         Calendar calendarForScheduled = Calendar.getInstance();
@@ -54,7 +48,7 @@ public static long getTimeDiffFromUtc() {
         return diff;
     }
 
-    public static String getFormattedDateAndTime(Long timestamp) {
+    public static String getFormattedDateAndTime(Context context, Long timestamp, int justNow, int min, int hr) {
         boolean sameDay = isSameDay(timestamp);
         Date date = new Date(timestamp);
         SimpleDateFormat simpleDateFormat = new SimpleDateFormat("hh:mm aa");
@@ -67,13 +61,14 @@ public static String getFormattedDateAndTime(Long timestamp) {
                 long diffMinutes = TimeUnit.MILLISECONDS.toMinutes(currentTime);
                 long diffHours = TimeUnit.MILLISECONDS.toHours(currentTime);
                 if (diffMinutes <= 1 && diffHours == 0) {
-                    return JUST_NOW;
+                    return context.getString(justNow);
                 }
                 if (diffMinutes <= 59 && diffHours == 0) {
-                    return String.valueOf(diffMinutes) + MINUTES;
+                    return context.getResources().getQuantityString(min, (int) diffMinutes, diffMinutes);
                 }
-                if (diffHours <= 2) {
-                    return String.valueOf(diffHours) + H;
+
+                if (diffMinutes > 59 && diffHours <= 2) {
+                    return context.getResources().getQuantityString(hr, (int) diffHours, diffHours);
                 }
                 return simpleDateFormat.format(date);
             }
@@ -85,7 +80,7 @@ public static String getFormattedDateAndTime(Long timestamp) {
         return null;
     }
 
-    public static String getDateAndTimeForLastSeen(Long timestamp) {
+    public static String getDateAndTimeForLastSeen(Context context, Long timestamp, int justNow, int minAgo, int hrAgo, int yesterday) {
         boolean sameDay = isSameDay(timestamp);
         Date date = new Date(timestamp);
         SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE, MMM dd, yyyy");
@@ -97,17 +92,17 @@ public static String getDateAndTimeForLastSeen(Long timestamp) {
                 long diffMinutes = TimeUnit.MILLISECONDS.toMinutes(currentTime);
                 long diffHours = TimeUnit.MILLISECONDS.toHours(currentTime);
                 if (diffMinutes <= 1 && diffHours == 0) {
-                    return JUST_NOW;
+                    return context.getString(justNow);
                 }
                 if (diffMinutes <= 59 && diffHours == 0) {
-                    return String.valueOf(diffMinutes) + MINUTES + AGO;
+                    return context.getResources().getQuantityString(minAgo, (int) diffMinutes, diffMinutes);
                 }
-                if (diffHours < 24) {
-                    return String.valueOf(diffHours) + HOURS + AGO;
+                if (diffMinutes > 59 && diffHours < 24) {
+                    return context.getResources().getQuantityString(hrAgo, (int) diffHours, diffHours);
                 }
             }
             if (isYesterday(timestamp)) {
-                return YESTERDAY;
+                return context.getString(yesterday);
             }
             return simpleDateFormat.format(date);
         } catch (Exception e) {
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/Utils.java b/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/Utils.java
index 0517f475..c1d96019 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/Utils.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/commons/core/utils/Utils.java
@@ -18,6 +18,7 @@
 import android.os.PowerManager;
 import android.os.StrictMode;
 import android.provider.ContactsContract;
+import android.provider.Settings;
 import android.text.SpannableStringBuilder;
 import android.text.TextUtils;
 import android.util.Log;
@@ -268,6 +269,14 @@ public static String getMetaDataValue(Context context, String metaDataName) {
         return null;
     }
 
+    public static boolean isAutomaticTimeEnabled(Context context, boolean isTimeZone) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            return Settings.Global.getInt(context.getContentResolver(), (isTimeZone ? Settings.Global.AUTO_TIME_ZONE : Settings.Global.AUTO_TIME), 0) == 1;
+        } else {
+            return android.provider.Settings.System.getInt(context.getContentResolver(), (isTimeZone ? Settings.System.AUTO_TIME_ZONE : Settings.System.AUTO_TIME), 0) == 1;
+        }
+    }
+
     public static int getLauncherIcon(Context context) {
         try {
             ApplicationInfo ai = context.getPackageManager().getApplicationInfo(context.getPackageName(), PackageManager.GET_META_DATA);
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/Channel.java b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/Channel.java
index 52dabf9b..a9e1ad05 100755
--- a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/Channel.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/Channel.java
@@ -223,6 +223,10 @@ public boolean isPartOfCategory(String category){
 
     }
 
+    public boolean isContextBasedChat(){
+        return (this.metadata != null && "true".equals(this.metadata.get(ChannelMetadata.AL_CONTEXT_BASED_CHAT)));
+    }
+
     public enum GroupType {
 
         VIRTUAL(0),
diff --git a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelMetadata.java b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelMetadata.java
index d6dfd59c..5d953a1d 100644
--- a/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelMetadata.java
+++ b/mobicommons/src/main/java/com/applozic/mobicommons/people/channel/ChannelMetadata.java
@@ -2,6 +2,9 @@
 
 import com.applozic.mobicommons.json.JsonMarker;
 
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * Created by sunil on 3/9/16.
  */
@@ -16,7 +19,9 @@
     public final static String GROUP_LEFT_MESSAGE = "GROUP_LEFT_MESSAGE";
     public final static String DELETED_GROUP_MESSAGE = "DELETED_GROUP_MESSAGE";
     public final static String HIDE_METADATA_NOTIFICATION = "HIDE";
+    public final static String ALERT_METADATA_NOTIFICATION = "ALERT";
     public final static String MUTE = "MUTE";
+    public final static String AL_CONTEXT_BASED_CHAT = "AL_CONTEXT_BASED_CHAT";
 
     public static final String ADMIN_NAME = ":adminName";
     public static final String GROUP_NAME = ":groupName";
@@ -31,8 +36,9 @@
     private String groupLeftMessage;
     private String deletedGroupMessage;
     private boolean hideMetaDataNotification;
+    private boolean alertMetaDataNotfication;
     private boolean defaultMute;
-
+    private boolean contextBasedChat;
 
     public String getCreateGroupMessage() {
         return createGroupMessage;
@@ -98,7 +104,7 @@ public void setDeletedGroupMessage(String deletedGroupMessage) {
         this.deletedGroupMessage = deletedGroupMessage;
     }
 
-    public boolean getHideMetaDataNotification() {
+    public boolean isHideMetaDataNotification() {
         return hideMetaDataNotification;
     }
 
@@ -106,6 +112,34 @@ public void setHideMetaDataNotification(boolean hideMetaDataNotification) {
         this.hideMetaDataNotification = hideMetaDataNotification;
     }
 
+    private void buildEmptyMetadata(){
+        this.createGroupMessage = "";
+        this.removeMemberMessage = "";
+        this.addMemberMessage = "";
+        this.JoinMemberMessage = "";
+        this.groupIconChangeMessage = "";
+        this.groupNameChangeMessage = "";
+        this.groupLeftMessage = "";
+        this.deletedGroupMessage = "";
+    }
+
+    public void hideAllMetadataMessages(){
+        buildEmptyMetadata();
+        this.hideMetaDataNotification = true;
+        this.alertMetaDataNotfication = false;
+    }
+
+    public boolean isAlertMetaDataNotfication() {
+        return alertMetaDataNotfication;
+    }
+
+    public void setAlertMetaDataNotfication(boolean alertMetaDataNotfication) {
+        if(!alertMetaDataNotfication) {
+            buildEmptyMetadata();
+        }
+        this.alertMetaDataNotfication = alertMetaDataNotfication;
+    }
+
     public boolean isDefaultMute() {
         return defaultMute;
     }
@@ -113,4 +147,28 @@ public boolean isDefaultMute() {
     public void setDefaultMute(boolean defaultMute) {
         this.defaultMute = defaultMute;
     }
+
+    public Map<String,String> getMetadata() {
+        Map<String, String> metadata = new HashMap<>();
+        metadata.put(ChannelMetadata.CREATE_GROUP_MESSAGE, this.getCreateGroupMessage());
+        metadata.put(ChannelMetadata.ADD_MEMBER_MESSAGE, this.getAddMemberMessage());
+        metadata.put(ChannelMetadata.GROUP_NAME_CHANGE_MESSAGE, this.getGroupNameChangeMessage());
+        metadata.put(ChannelMetadata.GROUP_ICON_CHANGE_MESSAGE, this.getGroupIconChangeMessage());
+        metadata.put(ChannelMetadata.GROUP_LEFT_MESSAGE, this.getGroupLeftMessage());
+        metadata.put(ChannelMetadata.JOIN_MEMBER_MESSAGE, this.getJoinMemberMessage());
+        metadata.put(ChannelMetadata.DELETED_GROUP_MESSAGE, this.getDeletedGroupMessage());
+        metadata.put(ChannelMetadata.REMOVE_MEMBER_MESSAGE, this.getRemoveMemberMessage());
+        metadata.put(ChannelMetadata.HIDE_METADATA_NOTIFICATION, this.isHideMetaDataNotification() + "");
+        metadata.put(ChannelMetadata.ALERT_METADATA_NOTIFICATION, this.isAlertMetaDataNotfication()+"");
+        metadata.put(ChannelMetadata.MUTE, this.isDefaultMute()+"");
+        return metadata;
+    }
+  
+    public boolean isContextBasedChat() {
+        return contextBasedChat;
+    }
+
+    public void setContextBasedChat(boolean contextBasedChat) {
+        this.contextBasedChat = contextBasedChat;
+    }
 }
