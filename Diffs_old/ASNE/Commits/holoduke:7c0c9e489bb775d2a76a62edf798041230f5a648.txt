diff --git a/googleplus/build.gradle b/googleplus/build.gradle
index 8062531..49774b5 100755
--- a/googleplus/build.gradle
+++ b/googleplus/build.gradle
@@ -1,40 +1,20 @@
 apply plugin: 'com.android.library'
 
 android {
-<<<<<<< HEAD
-    compileSdkVersion 21
-    buildToolsVersion '23.0.2'
+    compileSdkVersion 24
+    buildToolsVersion '23.0.3'
 
     defaultConfig {
         minSdkVersion 11
         targetSdkVersion 21
-=======
-    compileSdkVersion 23
-    buildToolsVersion "21.1.1"
-
-    defaultConfig {
-        //applicationId "com.github.gorbin.asne.googleplus"
-        minSdkVersion 15
-        targetSdkVersion 23
-        versionCode 1
-        versionName "1.0"
     }
-    buildTypes {
-        release {
-            minifyEnabled true
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
->>>>>>> 91bf48d9fc2560400bc6210eb95a8eb68a76920f
+    dexOptions {
+        incremental true
     }
 }
 
 dependencies {
-<<<<<<< HEAD
-=======
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    compile 'com.android.support:appcompat-v7:23.1.1'
-    compile('com.google.android.gms:play-services:6.5.+@aar') { exclude module: 'support-v4' }
->>>>>>> 91bf48d9fc2560400bc6210eb95a8eb68a76920f
     compile project(':ASNECore')
-    compile 'com.google.android.gms:play-services-plus:8.4.0'
+    compile 'com.google.android.gms:play-services-plus:9.6.1'
+    //compile 'com.google.android.gms:play-services-auth:9.2.0'
 }
diff --git a/googleplus/gradle.properties b/googleplus/gradle.properties
index 4dadf2c..8e8770e 100755
--- a/googleplus/gradle.properties
+++ b/googleplus/gradle.properties
@@ -1,6 +1,3 @@
 POM_NAME=ASNE GooglePlus
 POM_ARTIFACT_ID=asne-googleplus
-POM_PACKAGING=aar
-
-include ':ASNECore'
-project(':ASNECore').projectDir = new File(settingsDir, '../ASNEcore/')
+POM_PACKAGING=aar
\ No newline at end of file
diff --git a/googleplus/src/main/AndroidManifest.xml b/googleplus/src/main/AndroidManifest.xml
index bfae956..fdca216 100755
--- a/googleplus/src/main/AndroidManifest.xml
+++ b/googleplus/src/main/AndroidManifest.xml
@@ -1,9 +1,9 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.github.gorbin.asne.googleplus"
     xmlns:tools="http://schemas.android.com/tools">
-    <!--<uses-sdk tools:node="merge" />-->
+    <!--<uses-sdk tools:node="replace" />-->
     <uses-permission android:name="android.permission.INTERNET"/>
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
-    <application android:allowBackup="true"></application>
+    <application></application>
 
 </manifest>
diff --git a/googleplus/src/main/java/com/github/gorbin/asne/googleplus/GooglePlusPerson.java b/googleplus/src/main/java/com/github/gorbin/asne/googleplus/GooglePlusPerson.java
index 0b3ed6f..8b7806a 100755
--- a/googleplus/src/main/java/com/github/gorbin/asne/googleplus/GooglePlusPerson.java
+++ b/googleplus/src/main/java/com/github/gorbin/asne/googleplus/GooglePlusPerson.java
@@ -45,35 +45,35 @@ public GooglePlusPerson createFromParcel(Parcel in) {
     };
 
     /*** About me string in google plus user profile*/
-    public String aboutMe;
+	public String aboutMe;
     /*** The person's date of birth, represented as YYYY-MM-DD.*/
-    public String birthday;
+	public String birthday;
     /*** The "bragging rights" line of this person.*/
-    public String braggingRights;
+	public String braggingRights;
     /*** The cover photo content.*/
-    public String coverURL;
+	public String coverURL;
     /*** If a Google+ Page and for followers who are visible, the number of people who have added this page to a circle.*/
-    public int friendsCount;
+	public int friendsCount;
     /*** The current location for this person.*/
-    public String currentLocation;
+	public String currentLocation;
     /*** The person's gender. Possible values include, but are not limited to, the following values: - "male" - Male gender. - "female" - Female gender. - "other" - Other.*/
-    public int gender;
+	public int gender;
     /*** The user's preferred language for rendering.*/
-    public String lang;
+	public String lang;
     /*** The nickname of this person.*/
-    public String nickname;
+	public String nickname;
     /*** Type of person within Google+. Possible values include, but are not limited to, the following values: - "person" - represents an actual person. - "page" - represents a page.*/
-    public int objectType;
+	public int objectType;
     /*** Current organization with which this person is associated.*/
-    public String company;
+	public String company;
     /*** The person's job title or role within the organization.*/
-    public String position;
+	public String position;
     /*** Last place where this person has lived.*/
-    public String placeLivedValue;
+	public String placeLivedValue;
     /*** The person's relationship status. Possible values include, but are not limited to, the following values: - "single" - Person is single. - "in_a_relationship" - Person is in a relationship. - "engaged" - Person is engaged. - "married" - Person is married. - "its_complicated" - The relationship is complicated. - "open_relationship" - Person is in an open relationship. - "widowed" - Person is widowed. - "in_domestic_partnership" - Person is in a domestic partnership. - "in_civil_union" - Person is in a civil union.*/
-    public int relationshipStatus;
+	public int relationshipStatus;
     /*** The brief description (tagline) of this person.*/
-    public String tagline;
+	public String tagline;
 
     public GooglePlusPerson() {
 
diff --git a/googleplus/src/main/java/com/github/gorbin/asne/googleplus/GooglePlusSocialNetwork.java b/googleplus/src/main/java/com/github/gorbin/asne/googleplus/GooglePlusSocialNetwork.java
index 2b106c7..11ba2bb 100755
--- a/googleplus/src/main/java/com/github/gorbin/asne/googleplus/GooglePlusSocialNetwork.java
+++ b/googleplus/src/main/java/com/github/gorbin/asne/googleplus/GooglePlusSocialNetwork.java
@@ -21,7 +21,6 @@
  *******************************************************************************/
 package com.github.gorbin.asne.googleplus;
 
-import android.content.Context;
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
@@ -29,7 +28,9 @@
 import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.Handler;
+import android.support.v4.app.ActivityCompat;
 import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentActivity;
 import android.util.Log;
 
 import com.github.gorbin.asne.core.AccessToken;
@@ -46,13 +47,14 @@
 import com.github.gorbin.asne.core.listener.OnRequestSocialPersonCompleteListener;
 import com.github.gorbin.asne.core.listener.OnRequestSocialPersonsCompleteListener;
 import com.github.gorbin.asne.core.persons.SocialPerson;
-import com.google.android.gms.auth.GoogleAuthUtil;
+import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
 import com.google.android.gms.common.ConnectionResult;
 import com.google.android.gms.common.api.GoogleApiClient;
 import com.google.android.gms.common.Scopes;
 import com.google.android.gms.common.api.CommonStatusCodes;
 import com.google.android.gms.common.api.GoogleApiClient;
 import com.google.android.gms.common.api.ResultCallback;
+import com.google.android.gms.common.api.Status;
 import com.google.android.gms.plus.People;
 import com.google.android.gms.plus.Plus;
 import com.google.android.gms.plus.PlusShare;
@@ -88,13 +90,11 @@
     private ConnectionResult mConnectionResult;
     private boolean mConnectRequested;
     private Handler mHandler = new Handler();
+    private FragmentActivity mContext;
 
     public GooglePlusSocialNetwork(Fragment fragment, Context context) {
         super(fragment, context);
-    }
-
-    public GooglePlusSocialNetwork(Fragment fragment, Context context) {
-        super(fragment, context);
+        mContext = (FragmentActivity)context;
     }
 
     /**
@@ -103,8 +103,8 @@ public GooglePlusSocialNetwork(Fragment fragment, Context context) {
      */
     @Override
     public boolean isConnected() {
-//        return googleApiClient.isConnecting() || googleApiClient.isConnected();
-        return mSharedPreferences.getBoolean(SAVE_STATE_KEY_IS_CONNECTED, false);
+        return googleApiClient.isConnecting() || googleApiClient.isConnected();
+//        return mSharedPreferences.getBoolean(SAVE_STATE_KEY_IS_CONNECTED, false);
     }
 
     /**
@@ -114,6 +114,7 @@ public boolean isConnected() {
     @Override
     public void requestLogin(OnLoginCompleteListener onLoginCompleteListener) {
         super.requestLogin(onLoginCompleteListener);
+
         mConnectRequested = true;
         try {
             mConnectionResult.startResolutionForResult(mActivity, REQUEST_AUTH);
@@ -131,11 +132,9 @@ public void requestLogin(OnLoginCompleteListener onLoginCompleteListener) {
     public void logout() {
         mConnectRequested = false;
 
-        if (googleApiClient.isConnected()) {
+        if (googleApiClient != null && googleApiClient.isConnected()) {
             mSharedPreferences.edit().remove(SAVE_STATE_KEY_IS_CONNECTED).commit();
-            Plus.AccountApi.clearDefaultAccount(googleApiClient);
             googleApiClient.disconnect();
-            googleApiClient.connect();
         }
     }
 
@@ -165,17 +164,57 @@ public void requestAccessToken(OnRequestAccessTokenCompleteListener onRequestAcc
         super.requestAccessToken(onRequestAccessTokenCompleteListener);
 
         AsyncTask<Activity, Void, String> task = new AsyncTask<Activity, Void, String>() {
+            Exception mException;
+
             @Override
             protected String doInBackground(Activity... params) {
-                String scope = "oauth2:" + Scopes.PLUS_LOGIN;
-                String token;
-                try {
-                    token = GoogleAuthUtil.getToken(params[0],
-                            Plus.AccountApi.getAccountName(googleApiClient), scope);
-                } catch (Exception e) {
-                    e.printStackTrace();
-                    return e.getMessage();
-                }
+
+                String token = "1234";
+//                googleApiClient.
+//
+//                Plus
+//
+//                googleApiClient = new GoogleApiClient.Builder(this)
+//                        .enableAutoManage(this /* FragmentActivity */,
+//                                this /* OnConnectionFailedListener */)
+//                        .addApi(Plus.API)
+//                        .addScope(Scopes.PLUS_LOGIN)
+//                        .addScope(Scopes.PROFILE)
+//                        .addScope(Scopes.PLUS_ME)
+//                        .build();
+//
+//
+//                GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
+//                        .requestIdToken("XXXX") //fill this with reference to string value of web client OAuth 2.0 client IDs on https://console.developers.google.com/apis/
+//                        .requestEmail() //Remove these below according to your needs
+//                        .requestProfile()
+//                        .requestScopes(new Scope(Scopes.PROFILE))
+//                        .requestScopes(new Scope(Scopes.PLUS_ME))
+//                        .requestScopes(new Scope(Scopes.PLUS_LOGIN))
+//                        .build();
+//
+//                mGoogleApiClient = new GoogleApiClient.Builder(this)
+//                        .enableAutoManage(this, this)
+//                        .addApi(Auth.GOOGLE_SIGN_IN_API, gso)
+//                        .addApi(Plus.API)
+//                        .build();
+//
+//
+//
+//
+//                String scope = "oauth2:profile email";
+//                String account = Plus.AccountApi.getAccountName(googleApiClient);
+//                String token = null;
+//                try {
+//                    token = GoogleAuthUtil.getToken(params[0],
+//                            account, scope);
+//                } catch (UserRecoverableAuthException e) {
+//                    mConnectRequested = true;
+//                    mActivity.startActivityForResult(e.getIntent(), REQUEST_AUTH);
+//                } catch (Exception e) {
+//                    e.printStackTrace();
+//                    mException = e;
+//                }
                 return token;
             }
 
@@ -184,8 +223,9 @@ protected void onPostExecute(String token) {
                 if(token != null) {
                     ((OnRequestAccessTokenCompleteListener) mLocalListeners.get(REQUEST_ACCESS_TOKEN))
                             .onRequestAccessTokenComplete(getID(), new AccessToken(token, null));
-                } else {
-                    mLocalListeners.get(REQUEST_ACCESS_TOKEN).onError(getID(), REQUEST_ACCESS_TOKEN, token, null);
+                }
+                else if(mException != null) {
+                    mLocalListeners.get(REQUEST_ACCESS_TOKEN).onError(getID(), REQUEST_ACCESS_TOKEN, mException.getMessage(), mException);
                 }
             }
         };
@@ -349,7 +389,7 @@ private SocialPerson getSocialPerson(SocialPerson socialPerson, Person person, S
         }
         socialPerson.profileURL = person.getUrl();
         if(userId.equals("me")) {
-            socialPerson.email = Plus.AccountApi.getAccountName(googleApiClient);
+            //socialPerson.email = Plus.AccountApi.getAccountName(googleApiClient);
         }
         return socialPerson;
     }
@@ -496,9 +536,9 @@ public void onResult(final People.LoadPeopleResult loadPeopleResult) {
                         } else {
                             if (mLocalListeners.get(REQUEST_GET_FRIENDS) != null) {
                                 ((OnRequestGetFriendsCompleteListener) mLocalListeners.get(REQUEST_GET_FRIENDS))
-                                        .onGetFriendsIdComplete(getID(), ids.toArray(new String[ids.size()]));
+                                        .OnGetFriendsIdComplete(getID(), ids.toArray(new String[ids.size()]));
                                 ((OnRequestGetFriendsCompleteListener) mLocalListeners.get(REQUEST_GET_FRIENDS))
-                                        .onGetFriendsComplete(getID(), socialPersons);
+                                        .OnGetFriendsComplete(getID(), socialPersons);
                                 mLocalListeners.remove(REQUEST_GET_FRIENDS);
                             }
                         }
@@ -545,6 +585,19 @@ public void requestRemoveFriend(String userID, OnRequestRemoveFriendCompleteList
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+
+        mActivity = mSocialNetworkManager.getActivity();
+
+//        googleApiClient = new GoogleApiClient.Builder(mActivity)
+//                .enableAutoManage(mContext /* FragmentActivity */,
+//                        this /* OnConnectionFailedListener */)
+//                .addApi(Plus.API)
+//                .addConnectionCallbacks(this)
+//                .addOnConnectionFailedListener(this)
+//                .addScope(Plus.SCOPE_PLUS_LOGIN)
+//                .addScope(Plus.SCOPE_PLUS_PROFILE)
+//                .build();
+
         mActivity = mSocialNetworkManager.getActivity();
         Plus.PlusOptions plusOptions = new Plus.PlusOptions.Builder()
                 .addActivityTypes(MomentUtil.ACTIONS)
@@ -584,8 +637,9 @@ public void onStop() {
      */
     @Override
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        Log.d(TAG,"on activity result "+requestCode+" "+requestCode);
         super.onActivityResult(requestCode, resultCode, data);
-        int sanitizedRequestCode = requestCode & 0xFFFF;
+        int sanitizedRequestCode = requestCode % 0x10000;
         if (sanitizedRequestCode == REQUEST_AUTH) {
             if (resultCode == Activity.RESULT_OK && !googleApiClient.isConnected() && !googleApiClient.isConnecting()) {
                 // This time, connect should succeed.
@@ -605,23 +659,18 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
      */
     @Override
     public void onConnected(Bundle bundle) {
-        try {
-            if (mConnectRequested) {
-                if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                    mSharedPreferences.edit().putBoolean(SAVE_STATE_KEY_IS_CONNECTED, true).commit();
-                    ((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
-                    return;
-                }
-                if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                    mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN,
-                            "get person == null", null);
-                }
+        if (mConnectRequested) {
+            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
+                mSharedPreferences.edit().putBoolean(SAVE_STATE_KEY_IS_CONNECTED, true).commit();
+                ((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
+                return;
+            }
+            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
+                mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN,
+                        "get person == null", null);
             }
-            mConnectRequested = false;
-        }
-        catch(Exception e){
-            Log.e(TAG, "error"+e);
         }
+        mConnectRequested = false;
     }
 
     /**
@@ -637,13 +686,12 @@ public void onConnectionSuspended(int i) {
         mConnectRequested = false;
     }
 
-//    /**
-//     * Called when the client is disconnected.
-//     */
-//    @Override
-//    public void onDisconnected() {
-//        mConnectRequested = false;
-//    }
+    /**
+     * Called when the client is disconnected.
+     */
+    public void onDisconnected() {
+        mConnectRequested = false;
+    }
 
     /**
      * Called when there was an error connecting the client to the service.
@@ -659,4 +707,4 @@ public void onConnectionFailed(ConnectionResult connectionResult) {
 
         mConnectRequested = false;
     }
-}
+}
\ No newline at end of file
diff --git a/googleplus/src/main/java/com/github/gorbin/asne/googleplus/MomentUtil.java b/googleplus/src/main/java/com/github/gorbin/asne/googleplus/MomentUtil.java
index d1aa98c..9f05315 100755
--- a/googleplus/src/main/java/com/github/gorbin/asne/googleplus/MomentUtil.java
+++ b/googleplus/src/main/java/com/github/gorbin/asne/googleplus/MomentUtil.java
@@ -16,7 +16,7 @@
 
 package com.github.gorbin.asne.googleplus;
 
-import com.google.android.gms.plus.model.moments.ItemScope;
+//import com.google.android.gms.plus.model.people..moments.ItemScope;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -68,64 +68,64 @@
         }
     }
 
-    /**
-     * Generates the "result" JSON object for select moments.
-     *
-     * @param momentType The type of the moment.
-     */
-    public static ItemScope getResultFor(String momentType) {
-        if (momentType.equals("CommentActivity")) {
-            return getCommentActivityResult();
-        }
-        if (momentType.equals("ReserveActivity")) {
-            return getReserveActivityResult();
-        }
-        if (momentType.equals("ReviewActivity")) {
-            return getReviewActivityResult();
-        }
-        return null;
-    }
-
-    /**
-     * Generates the "result" JSON object for CommentActivity moment.
-     */
-    private static ItemScope getCommentActivityResult() {
-        return new ItemScope.Builder()
-                .setType("http://schema.org/Comment")
-                .setUrl("https://developers.google.com/+/plugins/snippet/examples/blog-entry#comment-1")
-                .setName("This is amazing!")
-                .setText("I can't wait to use it on my site!")
-                .build();
-    }
-
-    /**
-     * Generates the "result" JSON object for ReserveActivity moment.
-     */
-    private static ItemScope getReserveActivityResult() {
-        return new ItemScope.Builder()
-                .setType("http://schemas.google.com/Reservation")
-                .setStartDate("2012-06-28T19:00:00-08:00")
-                .setAttendeeCount(3)
-                .build();
-    }
-
-    /**
-     * Generates the "result" JSON object for ReviewActivity moment.
-     */
-    private static ItemScope getReviewActivityResult() {
-        ItemScope rating = new ItemScope.Builder()
-                .setType("http://schema.org/Rating")
-                .setRatingValue("100")
-                .setBestRating("100")
-                .setWorstRating("0")
-                .build();
-
-        return new ItemScope.Builder()
-                .setType("http://schema.org/Review")
-                .setName("A Humble Review of Widget")
-                .setUrl("https://developers.google.com/+/plugins/snippet/examples/review")
-                .setText("It is amazingly effective")
-                .setReviewRating(rating)
-                .build();
-    }
+////    /**
+////     * Generates the "result" JSON object for select moments.
+////     *
+////     * @param momentType The type of the moment.
+////     */
+////    public static ItemScope getResultFor(String momentType) {
+////        if (momentType.equals("CommentActivity")) {
+////            return getCommentActivityResult();
+////        }
+////        if (momentType.equals("ReserveActivity")) {
+////            return getReserveActivityResult();
+////        }
+////        if (momentType.equals("ReviewActivity")) {
+////            return getReviewActivityResult();
+////        }
+////        return null;
+////    }
+//
+//    /**
+//     * Generates the "result" JSON object for CommentActivity moment.
+//     */
+//    private static ItemScope getCommentActivityResult() {
+//        return new ItemScope.Builder()
+//                .setType("http://schema.org/Comment")
+//                .setUrl("https://developers.google.com/+/plugins/snippet/examples/blog-entry#comment-1")
+//                .setName("This is amazing!")
+//                .setText("I can't wait to use it on my site!")
+//                .build();
+//    }
+//
+//    /**
+//     * Generates the "result" JSON object for ReserveActivity moment.
+//     */
+//    private static ItemScope getReserveActivityResult() {
+//        return new ItemScope.Builder()
+//                .setType("http://schemas.google.com/Reservation")
+//                .setStartDate("2012-06-28T19:00:00-08:00")
+//                .setAttendeeCount(3)
+//                .build();
+//    }
+//
+//    /**
+//     * Generates the "result" JSON object for ReviewActivity moment.
+//     */
+//    private static ItemScope getReviewActivityResult() {
+//        ItemScope rating = new ItemScope.Builder()
+//                .setType("http://schema.org/Rating")
+//                .setRatingValue("100")
+//                .setBestRating("100")
+//                .setWorstRating("0")
+//                .build();
+//
+//        return new ItemScope.Builder()
+//                .setType("http://schema.org/Review")
+//                .setName("A Humble Review of Widget")
+//                .setUrl("https://developers.google.com/+/plugins/snippet/examples/review")
+//                .setText("It is amazingly effective")
+//                .setReviewRating(rating)
+//                .build();
+//    }
 }
diff --git a/vk/build.gradle b/vk/build.gradle
index f0555e0..fddb885 100755
--- a/vk/build.gradle
+++ b/vk/build.gradle
@@ -1,39 +1,20 @@
 apply plugin: 'com.android.library'
 
 android {
-<<<<<<< HEAD
     compileSdkVersion 21
-    buildToolsVersion '22.0.1'
+    buildToolsVersion '23.0.2'
 
     defaultConfig {
         minSdkVersion 11
         targetSdkVersion 21
-=======
-    compileSdkVersion 23
-    buildToolsVersion "21.1.1"
-
-    defaultConfig {
-        //applicationId "com.github.gorbin.asne.vk"
-        minSdkVersion 15
-        targetSdkVersion 23
-        versionCode 1
-        versionName "1.0"
     }
-    buildTypes {
-        release {
-            minifyEnabled true
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
->>>>>>> 91bf48d9fc2560400bc6210eb95a8eb68a76920f
+    dexOptions {
+        incremental true
     }
 }
 
 dependencies {
-<<<<<<< HEAD
-=======
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    compile 'com.android.support:appcompat-v7:23.1.1'
->>>>>>> 91bf48d9fc2560400bc6210eb95a8eb68a76920f
     compile project(':ASNECore')
-    compile('com.vk:androidsdk:1.3.6@aar') { exclude module: 'support-v4' }
+    //compile('com.vk:androidsdk:1.3.3@aar') { exclude module: 'support-v4' }
+    compile project(':vkontakte_lib')
 }
diff --git a/vk/src/main/AndroidManifest.xml b/vk/src/main/AndroidManifest.xml
index 1534b32..a0d451f 100755
--- a/vk/src/main/AndroidManifest.xml
+++ b/vk/src/main/AndroidManifest.xml
@@ -1,9 +1,9 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.github.gorbin.asne.vk"
     xmlns:tools="http://schemas.android.com/tools">
-    <!--<uses-sdk tools:node="merge" />-->
+    <!--<uses-sdk tools:node="replace" />-->
     <uses-permission android:name="android.permission.INTERNET"/>
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
-    <application android:allowBackup="true"></application>
+    <application></application>
 
 </manifest>
diff --git a/vk/src/main/java/com/github/gorbin/asne/vk/VkSocialNetwork.java b/vk/src/main/java/com/github/gorbin/asne/vk/VkSocialNetwork.java
index 1999921..41576d6 100755
--- a/vk/src/main/java/com/github/gorbin/asne/vk/VkSocialNetwork.java
+++ b/vk/src/main/java/com/github/gorbin/asne/vk/VkSocialNetwork.java
@@ -21,19 +21,17 @@
  *******************************************************************************/
 package com.github.gorbin.asne.vk;
 
-import android.content.Context;
 import android.app.Activity;
-<<<<<<< HEAD
 import android.app.AlertDialog;
+import android.app.Application;
 import android.content.Context;
-=======
->>>>>>> 91bf48d9fc2560400bc6210eb95a8eb68a76920f
 import android.content.Intent;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
 import android.text.TextUtils;
+import android.util.Log;
 
 import com.github.gorbin.asne.core.AccessToken;
 import com.github.gorbin.asne.core.SocialNetwork;
@@ -50,8 +48,9 @@
 import com.github.gorbin.asne.core.listener.OnRequestSocialPersonsCompleteListener;
 import com.github.gorbin.asne.core.persons.SocialPerson;
 import com.vk.sdk.VKAccessToken;
+import com.vk.sdk.VKAccessTokenTracker;
 import com.vk.sdk.VKSdk;
-import com.vk.sdk.VKSdkListener;
+//import com.vk.sdk.VKSdkListener;
 import com.vk.sdk.VKUIHelper;
 import com.vk.sdk.api.VKApi;
 import com.vk.sdk.api.VKApiConst;
@@ -68,6 +67,7 @@
 import com.vk.sdk.api.photo.VKUploadImage;
 import com.vk.sdk.dialogs.VKCaptchaDialog;
 
+
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -84,80 +84,109 @@
  */
 public class VkSocialNetwork extends SocialNetwork {
     /*** Social network ID in asne modules, should be unique*/
+    private static String TAG = "vksocialnetwork";
     public static final int ID = 5;
     private static final String SAVE_STATE_KEY_OAUTH_TOKEN = "VkSocialNetwork.SAVE_STATE_KEY_OAUTH_TOKEN";
     private static final String SAVE_STATE_KEY_OAUTH_SECRET = "VkSocialNetwork.SAVE_STATE_KEY_OAUTH_SECRET";
     private static final String SAVE_STATE_KEY_USER_ID = "VkSocialNetwork.SAVE_STATE_KEY_USER_ID";
     /*** Developer activity*/
-    private Activity mActivity;
+    private Activity activity;
     /*** VK app id*/
-    private String mKey;
+    private String key;
     /*** VK access token*/
-    private VKAccessToken mAccessToken;
+    private VKAccessToken accessToken;
     /*** Id of current user*/
-    private String mUserId;
+    private String userId;
     /*** Permissions array*/
-    private String[] mPermissions;
+    private String[] permissions;
     /*** VK SDK listener to catch authorization @see <a href="http://vkcom.github.io/vk-android-sdk/com/vk/sdk/VKSdkListener.html">VKSdkListener</a>*/
-    private final VKSdkListener mVkSdkListener = new VKSdkListener() {
-        @Override
-        public void onCaptchaError(VKError captchaError) {
-            new VKCaptchaDialog(captchaError).show();
-        }
 
-        @Override
-        public void onTokenExpired(VKAccessToken expiredToken) {
-            VKSdk.authorize(mPermissions, true, false);
-        }
 
+    VKAccessTokenTracker vkAccessTokenTracker = new VKAccessTokenTracker() {
         @Override
-        public void onAccessDenied(VKError authorizationError) {
-            mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN,
-                    authorizationError.toString(), null);
-        }
-
-        @Override
-        public void onReceiveNewToken(VKAccessToken accessToken) {
-            mAccessToken = accessToken;
-            mSharedPreferences.edit()
-                    .putString(SAVE_STATE_KEY_OAUTH_TOKEN, accessToken.accessToken)
-                    .putString(SAVE_STATE_KEY_OAUTH_SECRET, accessToken.secret)
-                    .putString(SAVE_STATE_KEY_USER_ID, accessToken.userId)
-                    .apply();
-            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                ((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
-                mLocalListeners.remove(REQUEST_LOGIN);
+        public void onVKAccessTokenChanged(VKAccessToken oldToken, VKAccessToken newToken) {
+            Log.d(TAG,"token changed "+oldToken+" new "+newToken);
+
+            try {
+                if (newToken == null) {
+
+                    accessToken = newToken;
+                    mSharedPreferences.edit()
+                            .putString(SAVE_STATE_KEY_OAUTH_TOKEN, accessToken.accessToken)
+                            .putString(SAVE_STATE_KEY_OAUTH_SECRET, accessToken.secret)
+                            .putString(SAVE_STATE_KEY_USER_ID, accessToken.userId)
+                            .apply();
+                    if (mLocalListeners.get(REQUEST_LOGIN) != null) {
+                        ((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
+                        mLocalListeners.remove(REQUEST_LOGIN);
+                    }
+                    userId = accessToken.userId;
+                }
+            }
+            catch (Exception e){
+                Log.e(TAG,"error "+e);
             }
-            mUserId = accessToken.userId;
         }
 
-        @Override
-        public void onAcceptUserToken(VKAccessToken accessToken) {
-            mAccessToken = accessToken;
-            mSharedPreferences.edit()
-                    .putString(SAVE_STATE_KEY_OAUTH_TOKEN, accessToken.accessToken)
-                    .putString(SAVE_STATE_KEY_OAUTH_SECRET, accessToken.secret)
-                    .putString(SAVE_STATE_KEY_USER_ID, accessToken.userId)
-                    .apply();
-            mUserId = accessToken.userId;
-        }
+
     };
 
-<<<<<<< HEAD
-    public VkSocialNetwork(Fragment fragment, Context context, String key, String[] permissions) {
-        super(fragment,context);
-=======
-    public VkSocialNetwork(Fragment fragment, String key, String[] permissions) {
-        super(fragment);
-        this.mKey = key;
-        this.mPermissions = permissions;
-    }
 
-    public VkSocialNetwork(Fragment fragment, Context context, String key, String[] permissions) {
-        super(fragment, context);
->>>>>>> 91bf48d9fc2560400bc6210eb95a8eb68a76920f
+//    private final VKSdkListener vkSdkListener = new VKSdkListener() {
+//        @Override
+//        public void onCaptchaError(VKError captchaError) {
+//            new VKCaptchaDialog(captchaError).show();
+//        }
+//
+//        @Override
+//        public void onTokenExpired(VKAccessToken expiredToken) {
+//            VKSdk.authorize(permissions, true, false);
+//        }
+//
+//        @Override
+//        public void onAccessDenied(VKError authorizationError) {
+//            try {
+//                mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN,
+//                        authorizationError.toString(), null);
+//            }
+//            catch(Exception e){
+//
+//            }
+//        }
+//
+//        @Override
+//        public void onReceiveNewToken(VKAccessToken newToken) {
+//            accessToken = newToken;
+//            mSharedPreferences.edit()
+//                    .putString(SAVE_STATE_KEY_OAUTH_TOKEN, accessToken.accessToken)
+//                    .putString(SAVE_STATE_KEY_OAUTH_SECRET, accessToken.secret)
+//                    .putString(SAVE_STATE_KEY_USER_ID, accessToken.userId)
+//                    .apply();
+//            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
+//                ((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
+//                mLocalListeners.remove(REQUEST_LOGIN);
+//            }
+//            userId = accessToken.userId;
+//        }
+//
+//        @Override
+//        public void onAcceptUserToken(VKAccessToken token) {
+//            accessToken = token;
+//            mSharedPreferences.edit()
+//                    .putString(SAVE_STATE_KEY_OAUTH_TOKEN, accessToken.accessToken)
+//                    .putString(SAVE_STATE_KEY_OAUTH_SECRET, accessToken.secret)
+//                    .putString(SAVE_STATE_KEY_USER_ID, accessToken.userId)
+//                    .apply();
+//            userId = accessToken.userId;
+//        }
+//    };
+
+    public VkSocialNetwork(Fragment fragment, Context context, String key, String[] permissions, Application application) {
+        super(fragment,context);
         this.key = key;
         this.permissions = permissions;
+        vkAccessTokenTracker.startTracking();
+        VKSdk.initialize(application);
     }
 
     private static boolean stringToBool(String s) {
@@ -176,15 +205,17 @@ private void requestIdPerson() {
             @Override
             public void onComplete(VKResponse response) {
                 try {
+                    Log.d(TAG,response.json.toString());
                     JSONObject jsonResponse = response.json.getJSONArray("response").getJSONObject(0);
-                    mUserId = jsonResponse.getString("id");
+                    userId = jsonResponse.getString("id");
                 } catch (JSONException e) {
                     e.printStackTrace();
                 }
             }
             @Override
             public void onError(VKError error) {
-                throw new SocialNetworkException("Error in id request! " + error);
+                Log.e(TAG,"error vk fail in id request");
+               // throw new SocialNetworkException("Error in id request! " + error);
 
             }
             @Override
@@ -194,7 +225,8 @@ public void onProgress(VKRequest.VKProgressType progressType,
             }
             @Override
             public void attemptFailed(VKRequest request, int attemptNumber, int totalAttempts) {
-                throw new SocialNetworkException("Fail in id request!");
+                Log.e(TAG,"error vk attempt fail in id request");
+                //throw new SocialNetworkException("Fail in id request!");
             }
         });
     }
@@ -215,7 +247,7 @@ public boolean isConnected() {
     @Override
     public void requestLogin(OnLoginCompleteListener onLoginCompleteListener) {
         super.requestLogin(onLoginCompleteListener);
-        VKSdk.authorize(mPermissions);
+        VKSdk.login(mSocialNetworkManager.getActivity(),permissions);
     }
 
     /**
@@ -349,8 +381,7 @@ public void onComplete(VKResponse response) {
                 try {
 
                     JSONArray jsonArray = response.json.getJSONArray("response");
-                    int length = jsonArray.length();
-                    for (int i = 0; i < length; i++) {
+                    for (int i = 0; i < jsonArray.length(); i++) {
                         getSocialPerson(socialPerson, jsonArray.getJSONObject(i));
                         socialPersons.add(socialPerson);
                         socialPerson = new SocialPerson();
@@ -423,8 +454,13 @@ public void onComplete(VKResponse response) {
 
             @Override
             public void onError(VKError error) {
-                mLocalListeners.get(REQUEST_GET_DETAIL_PERSON).onError(getID(), REQUEST_GET_DETAIL_PERSON,
-                        error.toString(), null);
+                try {
+                    mLocalListeners.get(REQUEST_GET_DETAIL_PERSON).onError(getID(), REQUEST_GET_DETAIL_PERSON,
+                            error.toString(), null);
+                }
+                catch(NullPointerException e){
+                    e.printStackTrace();
+                }
             }
 
             @Override
@@ -557,7 +593,7 @@ public void requestPostMessage(String message, OnPostingCompleteListener onPosti
     public void requestPostPhoto(File photo, final String message, OnPostingCompleteListener onPostingCompleteListener) {
         super.requestPostPhoto(photo, message, onPostingCompleteListener);
         final Bitmap vkPhoto = getPhoto(photo);
-        VKRequest request = VKApi.uploadWallPhotoRequest(new VKUploadImage(vkPhoto, VKImageParameters.pngImage()), 0, Integer.parseInt(mUserId));
+        VKRequest request = VKApi.uploadWallPhotoRequest(new VKUploadImage(vkPhoto, VKImageParameters.pngImage()), 0, Integer.parseInt(userId));
         request.executeWithListener(new VKRequest.VKRequestListener() {
             @Override
             public void onComplete(VKResponse response) {
@@ -572,7 +608,7 @@ public void onError(VKError error) {
             }
         });
     }
-    
+
 	private Bitmap getPhoto(File photo) {
         Bitmap b = null;
         try {
@@ -617,7 +653,7 @@ public void requestPostLink(Bundle bundle, String message, OnPostingCompleteList
     public void requestPostDialog(Bundle bundle, OnPostingCompleteListener onPostingCompleteListener) {
         throw new SocialNetworkException("requestPostDialog isn't allowed for VKSocialNetwork");
     }
-   
+
 	private void makePost(VKAttachments attachments, final String message, final String requestID) {
         VKRequest post = VKApi.wall().post(VKParameters.from(VKApiConst.ATTACHMENTS, attachments, VKApiConst.MESSAGE, message));
         post.setModelClass(VKWallPostResult.class);
@@ -707,8 +743,7 @@ public void onComplete(VKResponse response) {
                     jsonResponse = response.json.getJSONObject("response");
                     JSONArray jsonArray = jsonResponse.getJSONArray("items");
                     ids = new String[jsonArray.length()];
-                    int length = jsonArray.length();
-                    for (int i = 0; i < length; i++) {
+                    for (int i = 0; i < jsonArray.length(); i++) {
                         ids[i] = jsonArray.getJSONObject(i).getString("id");
                         getSocialPerson(socialPerson, jsonArray.getJSONObject(i));
                         socialPersons.add(socialPerson);
@@ -718,9 +753,9 @@ public void onComplete(VKResponse response) {
                     e.printStackTrace();
                 }
                 ((OnRequestGetFriendsCompleteListener) mLocalListeners.get(REQUEST_GET_FRIENDS))
-                    .onGetFriendsIdComplete(getID(), ids);
+                    .OnGetFriendsIdComplete(getID(), ids);
                 ((OnRequestGetFriendsCompleteListener) mLocalListeners.get(REQUEST_GET_FRIENDS))
-                        .onGetFriendsComplete(getID(), socialPersons);
+                        .OnGetFriendsComplete(getID(), socialPersons);
                 mLocalListeners.remove(REQUEST_GET_FRIENDS);
             }
             @Override
@@ -792,13 +827,13 @@ public void onError(VKError error) {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        this.mActivity = mSocialNetworkManager.getActivity();
-        VKUIHelper.onCreate(mActivity);
-        VKSdk.initialize(mVkSdkListener, mKey);
-        VKSdk.wakeUpSession();
+        activity = mSocialNetworkManager.getActivity();
+        //VKUIHelper.onCreate(activity);
+        //VKSdk.initialize(vkSdkListener, key);
+        //VKSdk.wakeUpSession();
         if(isConnected()) {
-            mUserId = mSharedPreferences.getString(SAVE_STATE_KEY_USER_ID, null);
-            if (mUserId == null){
+            userId = mSharedPreferences.getString(SAVE_STATE_KEY_USER_ID, null);
+            if(userId == null){
                 requestIdPerson();
             }
         }
@@ -810,7 +845,7 @@ public void onCreate(Bundle savedInstanceState) {
     @Override
     public void onResume() {
         super.onResume();
-        VKUIHelper.onResume(mActivity);
+        //VKUIHelper.onResume(activity);
     }
 
     /**
@@ -819,7 +854,7 @@ public void onResume() {
     @Override
     public void onDestroy() {
         super.onDestroy();
-        VKUIHelper.onDestroy(mActivity);
+       // VKUIHelper.onDestroy(activity);
     }
 
     /**
@@ -831,12 +866,15 @@ public void onDestroy() {
     @Override
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
-<<<<<<< HEAD
         int sanitizedRequestCode = requestCode % 0x10000;
-        VKUIHelper.onActivityResult(activity,sanitizedRequestCode, resultCode, data);
-=======
-        int sanitizedRequestCode = requestCode & 0xFFFF;
-        VKUIHelper.onActivityResult(sanitizedRequestCode, resultCode, data);
->>>>>>> 91bf48d9fc2560400bc6210eb95a8eb68a76920f
+        Log.d(TAG,"on activity result");
+        if (mLocalListeners.get(REQUEST_LOGIN) != null) {
+            Log.d(TAG,"call listener");
+            ((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
+            mLocalListeners.remove(REQUEST_LOGIN);
+        }
+
+        //VKSdk.onActivityResult(requestCode,resultCode,data);
+       // VKUIHelper.onActivityResult(activity,sanitizedRequestCode, resultCode, data);
     }
 }
