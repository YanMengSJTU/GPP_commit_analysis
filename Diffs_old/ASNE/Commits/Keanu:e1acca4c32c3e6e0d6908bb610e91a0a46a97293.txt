diff --git a/ASNE/build.gradle b/ASNE/build.gradle
index f93c920..5e7997c 100644
--- a/ASNE/build.gradle
+++ b/ASNE/build.gradle
@@ -15,7 +15,7 @@ android {
     }
     buildTypes {
         release {
-            runProguard false
+            //runProguard false
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
         }
     }
@@ -29,11 +29,7 @@ dependencies {
     compile 'com.android.support:support-v4:21.0.2'
     compile project(':ASNECore')
     compile project(':twitter')
-    compile project(':linkedin')
     compile project(':googleplus')
-    compile project(':vk')
-    compile project(':odnoklassniki')
     compile project(':facebook')
-    compile project(':instagram')
 }
 
diff --git a/ASNECore/build.gradle b/ASNECore/build.gradle
index 6d98310..dc9230b 100644
--- a/ASNECore/build.gradle
+++ b/ASNECore/build.gradle
@@ -6,7 +6,7 @@ android {
     buildToolsVersion '21.1.1'
 
     defaultConfig {
-        applicationId "com.github.gorbin.asne.core"
+        //applicationId "com.github.gorbin.asne.core"
         minSdkVersion 10
         targetSdkVersion 21
         versionCode 1
@@ -14,7 +14,7 @@ android {
     }
     buildTypes {
         release {
-            runProguard false
+            //runProguard false
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
     }
diff --git a/build.gradle b/build.gradle
index e0285cf..f318878 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,7 +4,7 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:0.13.+'
+        classpath 'com.android.tools.build:gradle:1.1.+'
     }
 }
 
diff --git a/facebook/build.gradle b/facebook/build.gradle
index 9180eb3..0447dc0 100644
--- a/facebook/build.gradle
+++ b/facebook/build.gradle
@@ -6,7 +6,7 @@ android {
     buildToolsVersion '21.1.1'
 
     defaultConfig {
-        applicationId "com.github.gorbin.asne.facebook"
+        //applicationId "com.github.gorbin.asne.facebook"
         minSdkVersion 10
         targetSdkVersion 21
         versionCode 1
@@ -14,7 +14,7 @@ android {
     }
     buildTypes {
         release {
-            runProguard false
+            //runProguard false
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
     }
diff --git a/googleplus/build.gradle b/googleplus/build.gradle
index 60df4f9..1306758 100644
--- a/googleplus/build.gradle
+++ b/googleplus/build.gradle
@@ -6,7 +6,7 @@ android {
     buildToolsVersion "21.1.1"
 
     defaultConfig {
-        applicationId "com.github.gorbin.asne.googleplus"
+        //applicationId "com.github.gorbin.asne.googleplus"
         minSdkVersion 10
         targetSdkVersion 21
         versionCode 1
@@ -14,7 +14,7 @@ android {
     }
     buildTypes {
         release {
-            runProguard false
+            //runProguard false
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
     }
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 9f020b5..0c71e76 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Nov 19 17:27:01 NOVT 2014
+#Wed Apr 10 15:27:10 PDT 2013
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
diff --git a/instagram/.gitignore b/instagram/.gitignore
deleted file mode 100644
index 796b96d..0000000
--- a/instagram/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/build
diff --git a/instagram/build.gradle b/instagram/build.gradle
deleted file mode 100644
index 441cf65..0000000
--- a/instagram/build.gradle
+++ /dev/null
@@ -1,27 +0,0 @@
-apply plugin: 'com.android.library'
-apply from: '../maven_push.gradle'
-
-android {
-    compileSdkVersion 21
-    buildToolsVersion "21.1.1"
-
-    defaultConfig {
-        applicationId "com.github.gorbin.asne.instagram"
-        minSdkVersion 10
-        targetSdkVersion 21
-        versionCode 1
-        versionName "1.0"
-    }
-    buildTypes {
-        release {
-            runProguard false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-}
-
-dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    compile 'com.android.support:appcompat-v7:21.0.2'
-    compile project(':ASNECore')
-}
diff --git a/instagram/gradle.properties b/instagram/gradle.properties
deleted file mode 100644
index 0ec6d99..0000000
--- a/instagram/gradle.properties
+++ /dev/null
@@ -1,3 +0,0 @@
-POM_NAME=ASNE Instagram
-POM_ARTIFACT_ID=asne-instagram
-POM_PACKAGING=aar
\ No newline at end of file
diff --git a/instagram/proguard-rules.pro b/instagram/proguard-rules.pro
deleted file mode 100644
index 92ddeef..0000000
--- a/instagram/proguard-rules.pro
+++ /dev/null
@@ -1,17 +0,0 @@
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in D:/programs/AndroidStudio/sdk/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the proguardFiles
-# directive in build.gradle.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/instagram/src/main/AndroidManifest.xml b/instagram/src/main/AndroidManifest.xml
deleted file mode 100644
index c68d338..0000000
--- a/instagram/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.github.gorbin.asne.instagram"
-    xmlns:tools="http://schemas.android.com/tools">
-    <!--<uses-sdk tools:node="replace" />-->
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
-    <application android:allowBackup="true"></application>
-</manifest>
diff --git a/instagram/src/main/java/com/github/gorbin/asne/instagram/InstagramPerson.java b/instagram/src/main/java/com/github/gorbin/asne/instagram/InstagramPerson.java
deleted file mode 100644
index 00cc61e..0000000
--- a/instagram/src/main/java/com/github/gorbin/asne/instagram/InstagramPerson.java
+++ /dev/null
@@ -1,134 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2014 Evgeny Gorbin
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- *******************************************************************************/
-package com.github.gorbin.asne.instagram;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.github.gorbin.asne.core.persons.SocialPerson;
-
-/**
- * Class for detailed Instagram social person
- *
- * @author Evgeny Gorbin (gorbin.e.o@gmail.com)
- */
-public class InstagramPerson extends SocialPerson implements Parcelable {
-
-    public static final Parcelable.Creator<InstagramPerson> CREATOR
-            = new Parcelable.Creator<InstagramPerson>() {
-        public InstagramPerson createFromParcel(Parcel in) {
-            return new InstagramPerson(in);
-        }
-
-        public InstagramPerson[] newArray(int size) {
-            return new InstagramPerson[size];
-        }
-    };
-    /*** Bio of social person*/
-    public String bio;
-    /*** Website of social person from user contacts*/
-    public String website;
-    /*** Full name of social person*/
-    public String fullName;
-    /*** Count of social person's media*/
-    public int media;
-    /*** Count of social person's followers*/
-    public int followedBy;
-    /*** Count of social person's follows*/
-    public int follows;
-
-    public InstagramPerson() {
-
-    }
-
-    protected InstagramPerson(Parcel in) {
-        bio = in.readString();
-        website = in.readString();
-        fullName = in.readString();
-        media = in.readInt();
-        followedBy = in.readInt();
-        follows = in.readInt();
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        dest.writeString(bio);
-        dest.writeString(website);
-        dest.writeString(fullName);
-        dest.writeInt(media);
-        dest.writeInt(followedBy);
-        dest.writeInt(follows);
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (!(o instanceof InstagramPerson)) return false;
-        if (!super.equals(o)) return false;
-
-        InstagramPerson that = (InstagramPerson) o;
-
-        if (followedBy != that.followedBy) return false;
-        if (follows != that.follows) return false;
-        if (media != that.media) return false;
-        if (bio != null ? !bio.equals(that.bio) : that.bio != null) return false;
-        if (fullName != null ? !fullName.equals(that.fullName) : that.fullName != null)
-            return false;
-        if (website != null ? !website.equals(that.website) : that.website != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = super.hashCode();
-        result = 31 * result + (bio != null ? bio.hashCode() : 0);
-        result = 31 * result + (website != null ? website.hashCode() : 0);
-        result = 31 * result + (fullName != null ? fullName.hashCode() : 0);
-        result = 31 * result + media;
-        result = 31 * result + followedBy;
-        result = 31 * result + follows;
-        return result;
-    }
-
-    @Override
-    public String toString() {
-        return "InstagramPerson{" +
-                "id='" + id + '\'' +
-                ", name='" + name + '\'' +
-                ", avatarURL='" + avatarURL + '\'' +
-                ", profileURL='" + profileURL + '\'' +
-                ", email='" + email + '\'' +
-                ", bio='" + bio + '\'' +
-                ", website='" + website + '\'' +
-                ", fullName='" + fullName + '\'' +
-                ", media=" + media +
-                ", followedBy=" + followedBy +
-                ", follows=" + follows +
-                '}';
-    }
-}
diff --git a/instagram/src/main/java/com/github/gorbin/asne/instagram/InstagramSocialNetwork.java b/instagram/src/main/java/com/github/gorbin/asne/instagram/InstagramSocialNetwork.java
deleted file mode 100644
index 5a32080..0000000
--- a/instagram/src/main/java/com/github/gorbin/asne/instagram/InstagramSocialNetwork.java
+++ /dev/null
@@ -1,984 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2014 Evgeny Gorbin
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- *******************************************************************************/
-package com.github.gorbin.asne.instagram;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.net.Uri;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.text.TextUtils;
-
-import com.github.gorbin.asne.core.AccessToken;
-import com.github.gorbin.asne.core.OAuthActivity;
-import com.github.gorbin.asne.core.OAuthSocialNetwork;
-import com.github.gorbin.asne.core.SocialNetworkAsyncTask;
-import com.github.gorbin.asne.core.SocialNetworkException;
-import com.github.gorbin.asne.core.listener.OnCheckIsFriendCompleteListener;
-import com.github.gorbin.asne.core.listener.OnLoginCompleteListener;
-import com.github.gorbin.asne.core.listener.OnPostingCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestAccessTokenCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestAddFriendCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestDetailedSocialPersonCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestGetFriendsCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestRemoveFriendCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestSocialPersonCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestSocialPersonsCompleteListener;
-import com.github.gorbin.asne.core.persons.SocialPerson;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.json.JSONTokener;
-
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStreamWriter;
-import java.net.HttpURLConnection;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.UUID;
-
-import javax.net.ssl.HttpsURLConnection;
-
-/**
- * Class for Instagram social network integration
- *
- * @author Evgeny Gorbin (gorbin.e.o@gmail.com)
- */
-public class InstagramSocialNetwork extends OAuthSocialNetwork {
-    /*** Social network ID in asne modules, should be unique*/
-    public static final int ID = 7;
-    private static final String SAVE_STATE_KEY_OAUTH_TOKEN = "InstagramSocialNetwork.SAVE_STATE_KEY_OAUTH_TOKEN";
-    private static final String SAVE_STATE_KEY_OAUTH_REQUEST_TOKEN = "InstagramSocialNetwork.SAVE_STATE_KEY_OAUTH_SECRET";
-    // max 16 bit to use in startActivityForResult
-    private static final int REQUEST_AUTH = UUID.randomUUID().hashCode() & 0xFFFF;
-    private static final String INSTAGRAM_TOKENURL ="https://api.instagram.com/oauth/access_token";
-    private static final String INSTAGRAM_APIURL = "https://api.instagram.com/v1";
-    private static final String ERROR_CODE = "InstagramSocialNetwork.ERROR_CODE";
-//    private final String INSTAGRAM_CALLBACK_URL = "oauth://ASNE";
-    private final String authURLString;
-    private final String tokenURLString;
-    private final String clientId;
-    private final String clientSecret;
-    private final String redirectURL;
-    private boolean restart = false;
-    private Bundle requestBundle;
-
-    //TODO: refactor to use an init that is shared by constructors
-    public InstagramSocialNetwork(Fragment fragment, String clientId, String clientSecret, String redirectURL, String scope) {
-        super(fragment);
-
-        this.clientId = clientId;
-        this.clientSecret = clientSecret;
-        this.redirectURL = redirectURL;
-
-        if (TextUtils.isEmpty(clientId) || TextUtils.isEmpty(clientSecret)) {
-            throw new IllegalArgumentException("clientId and clientSecret are invalid");
-        }
-        if(scope == null) {
-            scope = "basic";
-        }
-        String INSTAGRAM_AUTHURL = "https://api.instagram.com/oauth/authorize/";
-        authURLString = INSTAGRAM_AUTHURL + "?client_id=" + clientId + "&redirect_uri="
-                + redirectURL + "&response_type=code&display=touch&scope=" + scope;
-
-        tokenURLString = INSTAGRAM_TOKENURL + "?client_id=" + clientId + "&client_secret="
-                + clientSecret + "&redirect_uri=" + redirectURL + "&grant_type=authorization_code";
-    }
-
-    public InstagramSocialNetwork(Fragment fragment, Context context, String clientId, String clientSecret, String redirectURL, String scope) {
-        super(fragment, context);
-
-        this.clientId = clientId;
-        this.clientSecret = clientSecret;
-        this.redirectURL = redirectURL;
-
-        if (TextUtils.isEmpty(clientId) || TextUtils.isEmpty(clientSecret)) {
-            throw new IllegalArgumentException("clientId and clientSecret are invalid");
-        }
-        if(scope == null) {
-            scope = "basic";
-        }
-        String INSTAGRAM_AUTHURL = "https://api.instagram.com/oauth/authorize/";
-        authURLString = INSTAGRAM_AUTHURL + "?client_id=" + clientId + "&redirect_uri="
-                + redirectURL + "&response_type=code&display=touch&scope=" + scope;
-
-        tokenURLString = INSTAGRAM_TOKENURL + "?client_id=" + clientId + "&client_secret="
-                + clientSecret + "&redirect_uri=" + redirectURL + "&grant_type=authorization_code";
-    }
-
-    /**
-     * Check is social network connected
-     * @return true if connected to Instagram and false if not
-     */
-    @Override
-    public boolean isConnected() {
-        String accessToken = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-        String requestToken = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_REQUEST_TOKEN, null);
-        return accessToken != null && requestToken != null;
-    }
-
-    /**
-     * Make login request - authorize in Instagram social network
-     * @param onLoginCompleteListener listener to trigger when Login complete
-     */
-    @Override
-    public void requestLogin(OnLoginCompleteListener onLoginCompleteListener) {
-        super.requestLogin(onLoginCompleteListener);
-        initInstagramLogin();
-    }
-
-    private void initInstagramLogin(){
-        Intent intent = new Intent(mSocialNetworkManager.getActivity(), OAuthActivity.class)
-                .putExtra(OAuthActivity.PARAM_CALLBACK, redirectURL)
-                .putExtra(OAuthActivity.PARAM_URL_TO_LOAD, authURLString);
-        mSocialNetworkManager.getActivity().startActivityForResult(intent, REQUEST_AUTH);
-    }
-
-    /**
-     * Logout from Instagram social network
-     */
-    @Override
-    public void logout() {
-        mSharedPreferences.edit()
-                .remove(SAVE_STATE_KEY_OAUTH_TOKEN)
-                .remove(SAVE_STATE_KEY_OAUTH_REQUEST_TOKEN)
-                .apply();
-    }
-
-    /**
-     * Get id of Instagram social network
-     * @return Social network id for Instagram = 7
-     */
-    @Override
-    public int getID() {
-        return ID;
-    }
-
-    /**
-     * Method to get AccessToken of Instagram social network
-     * @return {@link com.github.gorbin.asne.core.AccessToken}
-     */
-    @Override
-    public AccessToken getAccessToken() {
-        return new com.github.gorbin.asne.core.AccessToken(
-                mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null),
-                null
-        );
-    }
-
-    /**
-     * Request {@link com.github.gorbin.asne.core.AccessToken} of Instagram social network that you can get from onRequestAccessTokenCompleteListener
-     * @param onRequestAccessTokenCompleteListener listener for {@link com.github.gorbin.asne.core.AccessToken} request
-     */
-    @Override
-    public void requestAccessToken(OnRequestAccessTokenCompleteListener onRequestAccessTokenCompleteListener) {
-        super.requestAccessToken(onRequestAccessTokenCompleteListener);
-        ((OnRequestAccessTokenCompleteListener) mLocalListeners.get(REQUEST_ACCESS_TOKEN))
-                .onRequestAccessTokenComplete(getID(), new com.github.gorbin.asne.core.AccessToken(
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null),
-                        null
-                ));
-    }
-
-    /**
-     * Request current user {@link com.github.gorbin.asne.core.persons.SocialPerson}
-     * @param onRequestSocialPersonCompleteListener listener for {@link com.github.gorbin.asne.core.persons.SocialPerson} request
-     */
-    @Override
-    public void requestCurrentPerson(OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        super.requestCurrentPerson(onRequestSocialPersonCompleteListener);
-        executeRequest(new RequestGetSocialPersonAsyncTask(), null, REQUEST_GET_CURRENT_PERSON);
-    }
-
-    /**
-     * Request {@link com.github.gorbin.asne.core.persons.SocialPerson} by user id
-     * @param userID id of Instagram user
-     * @param onRequestSocialPersonCompleteListener listener for {@link com.github.gorbin.asne.core.persons.SocialPerson} request
-     */
-    @Override
-    public void requestSocialPerson(String userID, OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        super.requestSocialPerson(userID, onRequestSocialPersonCompleteListener);
-        if (TextUtils.isEmpty(userID)) {
-            throw new SocialNetworkException("userID can't be null or empty");
-        }
-        Bundle args = new Bundle();
-        args.putString(RequestGetSocialPersonAsyncTask.PARAM_USER_ID, userID);
-        executeRequest(new RequestGetSocialPersonAsyncTask(), args, REQUEST_GET_PERSON);
-    }
-
-    /**
-     * Request ArrayList of {@link com.github.gorbin.asne.core.persons.SocialPerson} by array of userIds
-     * @param userID array of Instagram users id
-     * @param onRequestSocialPersonsCompleteListener listener for array of {@link com.github.gorbin.asne.core.persons.SocialPerson} request
-     */
-    @Override
-    public void requestSocialPersons(String[] userID, OnRequestSocialPersonsCompleteListener onRequestSocialPersonsCompleteListener) {
-        super.requestSocialPersons(userID, onRequestSocialPersonsCompleteListener);
-        Bundle args = new Bundle();
-        args.putStringArray(RequestSocialPersonsAsyncTask.PARAM_USER_ID, userID);
-        executeRequest(new RequestSocialPersonsAsyncTask(), args, REQUEST_GET_PERSONS);
-    }
-
-    /**
-     * Request user {@link com.github.gorbin.asne.instagram.InstagramPerson} by userId - detailed user data
-     * @param userId id of Instagram user
-     * @param onRequestDetailedSocialPersonCompleteListener listener for {@link com.github.gorbin.asne.instagram.InstagramPerson} request
-     */
-    @Override
-    public void requestDetailedSocialPerson(String userId, OnRequestDetailedSocialPersonCompleteListener onRequestDetailedSocialPersonCompleteListener) {
-        super.requestDetailedSocialPerson(userId, onRequestDetailedSocialPersonCompleteListener);
-        Bundle args = new Bundle();
-        if(userId != null) {
-            args.putString(RequestGetDetailedPersonAsyncTask.PARAM_USER_ID, userId);
-        } else {
-            args.putString(RequestGetDetailedPersonAsyncTask.PARAM_USER_ID, "self");
-        }
-        executeRequest(new RequestGetDetailedPersonAsyncTask(), args, REQUEST_GET_DETAIL_PERSON);
-    }
-
-    private SocialPerson getSocialPerson(SocialPerson socialPerson, JSONObject jsonResponse) throws JSONException {
-        if(jsonResponse.has("id")) {
-            socialPerson.id = jsonResponse.getString("id");
-        }
-        if(jsonResponse.has("username")) {
-            socialPerson.name = jsonResponse.getString("username");
-            socialPerson.profileURL = "http://www.instagram.com/" + jsonResponse.getString("username");
-        }
-        if(jsonResponse.has("profile_picture")) {
-            socialPerson.avatarURL = jsonResponse.getString("profile_picture");
-        }
-        return socialPerson;
-    }
-
-    private InstagramPerson getDetailedSocialPerson(InstagramPerson instagramPerson, JSONObject jsonResponse) throws JSONException {
-        getSocialPerson(instagramPerson, jsonResponse);
-        if(jsonResponse.has("bio")) {
-            instagramPerson.bio = jsonResponse.getString("bio");
-        }
-        if(jsonResponse.has("website")) {
-            instagramPerson.website = jsonResponse.getString("website");
-        }
-        if(jsonResponse.has("full_name")) {
-            instagramPerson.fullName = jsonResponse.getString("full_name");
-        }
-        if(jsonResponse.has("counts")){
-            if(jsonResponse.getJSONObject("counts").has("media")){
-                instagramPerson.media = jsonResponse.getJSONObject("counts").getInt("media");
-            }
-            if(jsonResponse.getJSONObject("counts").has("followed_by")) {
-                instagramPerson.followedBy = jsonResponse.getJSONObject("counts").getInt("followed_by");
-            }
-            if(jsonResponse.getJSONObject("counts").has("follows")) {
-                instagramPerson.follows = jsonResponse.getJSONObject("counts").getInt("follows");
-            }
-        }
-        return instagramPerson;
-    }
-
-    /**
-     * Post message to social network
-     * @param message  message that should be shared
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostMessage(String message, OnPostingCompleteListener onPostingCompleteListener) {
-        super.requestPostMessage(message, onPostingCompleteListener);
-        throw new SocialNetworkException("requestPostMessage isn't allowed for InstagramSocialNetwork");
-    }
-
-    /**
-     * Post photo to social network
-     * @param photo photo that should be shared
-     * @param message message that should be shared with photo
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostPhoto(File photo, String message, OnPostingCompleteListener onPostingCompleteListener) {
-        super.requestPostPhoto(photo, message, onPostingCompleteListener);
-        String instagramPackage = "com.instagram.android";
-        String errorMessage = "You should install Instagram app first";
-        if(isPackageInstalled(instagramPackage, mSocialNetworkManager.getActivity())){
-            Intent normalIntent = new Intent(Intent.ACTION_SEND);
-            normalIntent.setType("image/*");
-            normalIntent.setPackage(instagramPackage);
-            File media = new File(photo.getAbsolutePath());
-            Uri uri = Uri.fromFile(media);
-            normalIntent.putExtra(Intent.EXTRA_STREAM, uri);
-            normalIntent.putExtra(Intent.EXTRA_TEXT, message);
-            mSocialNetworkManager.getActivity().startActivity(normalIntent);
-        } else {
-            mLocalListeners.get(REQUEST_POST_PHOTO).onError(getID(), REQUEST_POST_PHOTO, errorMessage, null);
-        }
-        mLocalListeners.remove(REQUEST_POST_PHOTO);
-    }
-
-    /**
-     * Not supported via Instagram api.
-     * @throws com.github.gorbin.asne.core.SocialNetworkException
-     * @param bundle bundle containing information that should be shared(Bundle constants in {@link com.github.gorbin.asne.core.SocialNetwork})
-     * @param message message that should be shared with bundle
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostLink(Bundle bundle, String message, OnPostingCompleteListener onPostingCompleteListener) {
-        throw new SocialNetworkException("requestPostLink isn't allowed for InstagramSocialNetwork");
-    }
-
-    /**
-     * Not supported via Instagram api.
-     * @throws com.github.gorbin.asne.core.SocialNetworkException
-     * @param bundle bundle containing information that should be shared(Bundle constants in {@link com.github.gorbin.asne.core.SocialNetwork})
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostDialog(Bundle bundle, OnPostingCompleteListener onPostingCompleteListener) {
-        throw new SocialNetworkException("requestPostDialog isn't allowed for InstagramSocialNetwork");
-    }
-
-    /**
-     * Check if user by id is friend of current user
-     * @param userID user id that should be checked as friend of current user
-     * @param onCheckIsFriendCompleteListener listener for checking friend request
-     */
-    @Override
-    public void requestCheckIsFriend(String userID, OnCheckIsFriendCompleteListener onCheckIsFriendCompleteListener) {
-        super.requestCheckIsFriend(userID, onCheckIsFriendCompleteListener);
-        Bundle args = new Bundle();
-        args.putString(RequestCheckIsFriendAsyncTask.PARAM_USER_ID, userID);
-        executeRequest(new RequestCheckIsFriendAsyncTask(), args, REQUEST_CHECK_IS_FRIEND);
-    }
-
-    /**
-     * Get current user friends list
-     * @param onRequestGetFriendsCompleteListener listener for getting list of current user friends
-     */
-    @Override
-    public void requestGetFriends(OnRequestGetFriendsCompleteListener onRequestGetFriendsCompleteListener) {
-        super.requestGetFriends(onRequestGetFriendsCompleteListener);
-        executeRequest(new RequestGetFriendsAsyncTask(), null, REQUEST_GET_FRIENDS);
-    }
-
-    /**
-     * Invite friend by id to current user
-     * @param userID id of user that should be invited
-     * @param onRequestAddFriendCompleteListener listener for invite result
-     */
-    @Override
-    public void requestAddFriend(String userID, OnRequestAddFriendCompleteListener onRequestAddFriendCompleteListener) {
-        super.requestAddFriend(userID, onRequestAddFriendCompleteListener);
-        Bundle args = new Bundle();
-        args.putString(RequestAddFriendAsyncTask.PARAM_USER_ID, userID);
-        executeRequest(new RequestAddFriendAsyncTask(), args, REQUEST_ADD_FRIEND);
-    }
-
-    /**
-     * Remove friend by id from current user friends
-     * @param userID user id that should be removed from friends
-     * @param onRequestRemoveFriendCompleteListener listener to remove friend request response
-     */
-    @Override
-    public void requestRemoveFriend(String userID, OnRequestRemoveFriendCompleteListener onRequestRemoveFriendCompleteListener) {
-        super.requestRemoveFriend(userID, onRequestRemoveFriendCompleteListener);
-        Bundle args = new Bundle();
-        args.putString(RequestAddFriendAsyncTask.PARAM_USER_ID, userID);
-        executeRequest(new RequestRemoveFriendAsyncTask(), args, REQUEST_REMOVE_FRIEND);
-    }
-
-    /**
-     * Overrided for Instagram support
-     * @param requestCode The integer request code originally supplied to startActivityForResult(), allowing you to identify who this result came from.
-     * @param resultCode The integer result code returned by the child activity through its setResult().
-     * @param data An Intent, which can return result data to the caller (various data can be attached to Intent "extras").
-     */
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        int sanitizedRequestCode = requestCode % 0x10000;
-        if (sanitizedRequestCode != REQUEST_AUTH) return;
-        super.onActivityResult(requestCode, resultCode, data);
-
-        Uri uri = data != null ? data.getData() : null;
-
-        if (uri != null && uri.toString().startsWith(redirectURL)) {
-            String parts[] = uri.toString().split("=");
-            String verifier = parts[1];
-            RequestLogin2AsyncTask requestLogin2AsyncTask = new RequestLogin2AsyncTask();
-            mRequests.put(REQUEST_LOGIN2, requestLogin2AsyncTask);
-            Bundle args = new Bundle();
-            args.putString(RequestLogin2AsyncTask.PARAM_VERIFIER, verifier);
-            requestLogin2AsyncTask.execute(args);
-        } else {
-            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN, "incorrect URI returned: " + uri, null);
-                mLocalListeners.remove(REQUEST_LOGIN);
-            }
-        }
-    }
-
-    /**
-     * Cancel login request
-     */
-    @Override
-    public void cancelLoginRequest() {
-        super.cancelLoginRequest();
-    }
-
-    private String streamToString(InputStream p_is) {
-        try {
-            BufferedReader m_br;
-            StringBuilder m_outString = new StringBuilder();
-            m_br = new BufferedReader(new InputStreamReader(p_is));
-            String m_read = m_br.readLine();
-            while(m_read != null) {
-                m_outString.append(m_read);
-                m_read =m_br.readLine();
-            }
-            return m_outString.toString();
-        }
-        catch (Exception p_ex) {
-            p_ex.printStackTrace();
-            return null;
-        }
-    }
-
-    private String checkInputStream(HttpURLConnection connection){
-        String errorType = null, code = null, errorMessage = null;
-        InputStream inputStream = connection.getErrorStream();
-        String response = streamToString(inputStream);
-        try {
-            JSONObject jsonObject = (JSONObject) new JSONTokener(response).nextValue();
-            JSONObject jsonResponse = jsonObject.getJSONObject("meta");
-            if(jsonResponse.has("error_type")) {
-                errorType = jsonResponse.getString("error_type");
-            }
-            if(jsonResponse.has("code")) {
-                code = jsonResponse.getString("code");
-            }
-            if(jsonResponse.has("error_message")) {
-                errorMessage = jsonResponse.getString("error_message");
-            }
-            return "ERROR TYPE: " + errorType + " ERROR CODE: " + code + " ERROR MESSAGE: " + errorMessage;
-        } catch (JSONException e) {
-            return e.getMessage();
-        }
-    }
-    
-    private void checkConnectionErrors(HttpURLConnection connection) throws Exception {
-            if(connection.getResponseCode() >= 400){
-                throw new Exception(checkInputStream(connection));
-            }
-    }
-
-    private boolean checkTokenError(Bundle result) {
-        if(result != null && result.containsKey(ERROR_CODE) && result.getString(ERROR_CODE).contains("400") && result.getString(ERROR_CODE).contains("OAuth")) {
-            restart = true;
-            requestBundle = result;
-            requestBundle.remove(ERROR_CODE);
-            requestBundle.remove(SocialNetworkAsyncTask.RESULT_ERROR);
-            initInstagramLogin();
-            return true;
-        }
-        return false;
-    }
-
-    private boolean checkRequests(){
-        boolean queryRequests = false;
-        for(String request: mRequests.keySet()){
-            if(request.equals(REQUEST_LOGIN)){
-                break;
-            }
-            queryRequests = true;
-        }
-        return queryRequests;
-    }
-
-    private void checkExeption(Exception e, Bundle result){
-        if(e.getMessage().contains("ERROR CODE") && e.getMessage().contains("OAuth")){
-            result.putString(ERROR_CODE, e.getMessage());
-        } else {
-            result.putString(SocialNetworkAsyncTask.RESULT_ERROR, e.getMessage());
-        }
-    }
-
-    private void restartRequests(){
-        restart = false;
-        if(mLocalListeners.containsKey(REQUEST_GET_CURRENT_PERSON)){
-            mRequests.remove(REQUEST_GET_CURRENT_PERSON);
-            executeRequest(new RequestGetSocialPersonAsyncTask(), requestBundle, REQUEST_GET_CURRENT_PERSON);
-        } else if (mLocalListeners.containsKey(REQUEST_GET_PERSON)) {
-            mRequests.remove(REQUEST_GET_PERSON);
-            executeRequest(new RequestGetSocialPersonAsyncTask(), requestBundle, REQUEST_GET_PERSON);
-        } else if (mLocalListeners.containsKey(REQUEST_GET_DETAIL_PERSON)) {
-            mRequests.remove(REQUEST_GET_DETAIL_PERSON);
-            executeRequest(new RequestGetDetailedPersonAsyncTask(), requestBundle, REQUEST_GET_DETAIL_PERSON);
-        } else if(mLocalListeners.containsKey(REQUEST_GET_PERSONS)){
-            mRequests.remove(REQUEST_GET_PERSONS);
-            executeRequest(new RequestSocialPersonsAsyncTask(), requestBundle, REQUEST_GET_PERSONS);
-        } else if(mRequests.containsKey(REQUEST_CHECK_IS_FRIEND)) {
-            mRequests.remove(REQUEST_CHECK_IS_FRIEND);
-            executeRequest(new RequestCheckIsFriendAsyncTask(), requestBundle, REQUEST_CHECK_IS_FRIEND);
-        } else if(mRequests.containsKey(REQUEST_GET_FRIENDS)) {
-            mRequests.remove(REQUEST_GET_FRIENDS);
-            executeRequest(new RequestGetFriendsAsyncTask(), requestBundle, REQUEST_GET_FRIENDS);
-        } else if(mRequests.containsKey(REQUEST_ADD_FRIEND)) {
-            mRequests.remove(REQUEST_ADD_FRIEND);
-            executeRequest(new RequestAddFriendAsyncTask(), requestBundle, REQUEST_ADD_FRIEND);
-        } else if(mRequests.containsKey(REQUEST_REMOVE_FRIEND)) {
-            mRequests.remove(REQUEST_REMOVE_FRIEND);
-            executeRequest(new RequestGetFriendsAsyncTask(), requestBundle, REQUEST_REMOVE_FRIEND);
-        }
-    }
-
-    private boolean isPackageInstalled(String packagename, Context context) {
-        PackageManager pm = context.getPackageManager();
-        try {
-            pm.getPackageInfo(packagename, PackageManager.GET_ACTIVITIES);
-            return true;
-        } catch (PackageManager.NameNotFoundException e) {
-            return false;
-        }
-    }
-    
-    private class RequestLogin2AsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_VERIFIER = "Login2AsyncTask.PARAM_VERIFIER";
-
-        private static final String RESULT_ACCESS_TOKEN = "Login2AsyncTask.RESULT_TOKEN";
-        private static final String RESULT_REQUEST_TOKEN = "Login2AsyncTask.RESULT_SECRET";
-        private static final String RESULT_USER_ID = "Login2AsyncTask.RESULT_USER_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            String verifier = params[0].getString(PARAM_VERIFIER);
-
-            Bundle result = new Bundle();
-            try
-            {
-                URL url = new URL(tokenURLString);
-                HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();
-                httpsURLConnection.setRequestMethod("POST");
-                httpsURLConnection.setDoInput(true);
-                httpsURLConnection.setDoOutput(true);
-                OutputStreamWriter outputStreamWriter = new OutputStreamWriter(httpsURLConnection.getOutputStream());
-                outputStreamWriter.write("client_id="+clientId+
-                        "&client_secret=" + clientSecret +
-                        "&grant_type=authorization_code" +
-                        "&redirect_uri=" + redirectURL +
-                        "&code=" + verifier);
-                outputStreamWriter.flush();
-                String response = streamToString(httpsURLConnection.getInputStream());
-                JSONObject jsonObject = (JSONObject) new JSONTokener(response).nextValue();
-
-                String accessToken = jsonObject.getString("access_token");
-                String id = jsonObject.getJSONObject("user").getString("id");
-                result.putString(RESULT_ACCESS_TOKEN, accessToken);
-                result.putString(RESULT_REQUEST_TOKEN, verifier);
-                result.putString(RESULT_USER_ID, id);
-            } catch (Exception e) {
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_LOGIN)&&!checkRequests()) {
-                return;
-            }
-
-            mSharedPreferences.edit()
-                    .putString(SAVE_STATE_KEY_OAUTH_TOKEN, result.getString(RESULT_ACCESS_TOKEN))
-                    .putString(SAVE_STATE_KEY_OAUTH_REQUEST_TOKEN, result.getString(RESULT_REQUEST_TOKEN))
-                    .apply();
-            mRequests.remove(REQUEST_LOGIN2);
-            if (mLocalListeners.get(REQUEST_LOGIN) != null && !restart) {
-                ((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
-            }
-            restartRequests();
-        }
-
-
-    }
-
-    private class RequestGetSocialPersonAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "RequestGetPersonAsyncTask.PARAM_USER_ID";
-        public static final String CURRENT = "RequestGetPersonAsyncTask.CURRENT";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle(args);
-            String userID;
-            String token = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-            if (args.containsKey(PARAM_USER_ID)) {
-                userID = args.getString(PARAM_USER_ID);
-                result.putBoolean(CURRENT, false);
-            } else {
-                userID = "self";
-                result.putBoolean(CURRENT, true);
-            }
-            String urlString = INSTAGRAM_APIURL + "/users/"+ userID +"/?access_token=" + token;
-            try {
-                URL url = new URL(urlString);
-                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
-                checkConnectionErrors(connection);
-
-                InputStream inputStream = connection.getInputStream();
-                String response = streamToString(inputStream);
-                JSONObject jsonObject = (JSONObject) new JSONTokener(response).nextValue();
-                JSONObject jsonResponse = jsonObject.getJSONObject("data");
-
-                SocialPerson socialPerson = new SocialPerson();
-                getSocialPerson(socialPerson, jsonResponse);
-                result.putParcelable(REQUEST_GET_PERSON, socialPerson);
-            } catch (Exception e) {
-                checkExeption(e, result);
-            }
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (checkTokenError(result)){return;}
-            SocialPerson socialPerson = result.getParcelable(REQUEST_GET_PERSON);
-            if(result.containsKey(CURRENT) && result.getBoolean(CURRENT)){
-                if (!handleRequestResult(result, REQUEST_GET_CURRENT_PERSON)) return;
-                ((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_CURRENT_PERSON))
-                        .onRequestSocialPersonSuccess(getID(), socialPerson);
-            } else {
-                if (!handleRequestResult(result, REQUEST_GET_PERSON)) return;
-                ((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_PERSON))
-                        .onRequestSocialPersonSuccess(getID(), socialPerson);
-            }
-        }
-    }
-
-    private class RequestGetDetailedPersonAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "RequestGetPersonAsyncTask.PARAM_USER_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle(args);
-            String userID = args.getString(PARAM_USER_ID);
-            String token = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-
-            String urlString = INSTAGRAM_APIURL + "/users/"+ userID +"/?access_token=" + token;
-            
-            try {
-                URL url = new URL(urlString);
-                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
-                checkConnectionErrors(connection);
-                InputStream inputStream = connection.getInputStream();
-                String response = streamToString(inputStream);
-                JSONObject jsonObject = (JSONObject) new JSONTokener(response).nextValue();
-                JSONObject jsonResponse = jsonObject.getJSONObject("data");
-
-                InstagramPerson instagramPerson = new InstagramPerson();
-                getDetailedSocialPerson(instagramPerson, jsonResponse);
-                result.putParcelable(REQUEST_GET_DETAIL_PERSON, instagramPerson);
-            } catch (Exception e) {
-                checkExeption(e, result);
-            }
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (checkTokenError(result)){return;}
-            if (!handleRequestResult(result, REQUEST_GET_DETAIL_PERSON)) return;
-            InstagramPerson instagramPerson = result.getParcelable(REQUEST_GET_DETAIL_PERSON);
-            ((OnRequestDetailedSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_DETAIL_PERSON))
-                    .onRequestDetailedSocialPersonSuccess(getID(), instagramPerson);
-        }
-    }
-
-    private class RequestSocialPersonsAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "RequestGetPersonAsyncTask.PARAM_USER_ID";
-        private static final String RESULT_USERS_ARRAY = "RequestPersonAsyncTask.RESULT_USERS_ARRAY";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle(args);
-            String token = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-            String[] userIDs = args.getStringArray(PARAM_USER_ID);
-            ArrayList<SocialPerson> socialPersons = new ArrayList<SocialPerson>();
-
-            for (String userID : userIDs) {
-                String urlString = INSTAGRAM_APIURL + "/users/" + userID + "/?access_token=" + token;
-                try {
-                    URL url = new URL(urlString);
-                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
-                    checkConnectionErrors(connection);
-                    InputStream inputStream = connection.getInputStream();
-                    String response = streamToString(inputStream);
-                    JSONObject jsonObject = (JSONObject) new JSONTokener(response).nextValue();
-                    JSONObject jsonResponse = jsonObject.getJSONObject("data");
-                    SocialPerson socialPerson = new SocialPerson();
-                    getSocialPerson(socialPerson, jsonResponse);
-                    socialPersons.add(socialPerson);
-                } catch (Exception e) {
-                    checkExeption(e, result);
-                }
-            }
-            result.putParcelableArrayList(RESULT_USERS_ARRAY, socialPersons);
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (checkTokenError(result)){return;}
-            ArrayList<SocialPerson> arraylist = result.getParcelableArrayList(RESULT_USERS_ARRAY);
-            if (!handleRequestResult(result, REQUEST_GET_PERSONS)) return;
-            ((OnRequestSocialPersonsCompleteListener) mLocalListeners.get(REQUEST_GET_PERSONS))
-                    .onRequestSocialPersonsSuccess(getID(), arraylist);
-        }
-    }
-
-    private class RequestGetFriendsAsyncTask extends SocialNetworkAsyncTask {
-        public static final String RESULT_GET_FRIENDS = "RESULT_GET_FRIENDS";
-        public static final String RESULT_GET_FRIENDS_ID = "RESULT_GET_FRIENDS_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle result = new Bundle();
-            String token = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-            String urlString = INSTAGRAM_APIURL + "/users/self/follows/?access_token=" + token;
-            ArrayList<SocialPerson> socialPersons = new ArrayList<SocialPerson>();
-            ArrayList<String> ids = new ArrayList<String>();
-            try {
-                getAllFriends(urlString, socialPersons, ids);
-                result.putStringArray(RESULT_GET_FRIENDS_ID, ids.toArray(new String[ids.size()]));
-                result.putParcelableArrayList(RESULT_GET_FRIENDS, socialPersons);
-            } catch (Exception e) {
-                checkExeption(e, result);
-            }
-
-            return result;
-        }
-
-        private void getAllFriends(String urlString, final ArrayList<SocialPerson> socialPersons, final ArrayList<String> ids) throws Exception {
-            URL url = new URL(urlString);
-            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
-            checkConnectionErrors(connection);
-            InputStream inputStream = connection.getInputStream();
-            String response = streamToString(inputStream);
-            JSONObject jsonObject = (JSONObject) new JSONTokener(response).nextValue();
-
-            JSONObject jsonPagination;
-            String nextToken = null;
-            if(jsonObject.has("pagination")) {
-                jsonPagination = jsonObject.getJSONObject("pagination");
-                if(jsonPagination.has("next_url")) {
-                    nextToken = jsonPagination.getString("next_url");
-                }
-            }
-            JSONArray jsonResponse = jsonObject.getJSONArray("data");
-            for(int i = 0; i < jsonResponse.length(); i++){
-                SocialPerson socialPerson = new SocialPerson();
-                getSocialPerson(socialPerson, jsonResponse.getJSONObject(i));
-                socialPersons.add(socialPerson);
-                ids.add(jsonResponse.getJSONObject(i).getString("id"));
-            }
-
-            if((nextToken != null) && (!TextUtils.isEmpty(nextToken))){
-                getAllFriends(nextToken, socialPersons, ids);
-            }
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (checkTokenError(result)){return;}
-            if (!handleRequestResult(result, REQUEST_GET_FRIENDS,
-                    result.getStringArray(RESULT_GET_FRIENDS_ID))) return;
-
-            ((OnRequestGetFriendsCompleteListener) mLocalListeners.get(REQUEST_GET_FRIENDS))
-                    .OnGetFriendsIdComplete(getID(), result.getStringArray(RESULT_GET_FRIENDS_ID));
-            ArrayList<SocialPerson> socialPersons = result.getParcelableArrayList(RESULT_GET_FRIENDS);
-            ((OnRequestGetFriendsCompleteListener) mLocalListeners.get(REQUEST_GET_FRIENDS))
-                    .OnGetFriendsComplete(getID(), socialPersons);
-        }
-    }
-
-    private class RequestCheckIsFriendAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "PARAM_USER_ID";
-
-        public static final String RESULT_IS_FRIEND = "RESULT_IS_FRIEND";
-        public static final String RESULT_REQUESTED_ID = "RESULT_REQUESTED_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle(args);
-            String userID = args.getString(PARAM_USER_ID);
-            String token = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-            String urlString = INSTAGRAM_APIURL + "/users/" + userID + "/relationship/?access_token=" + token;
-            result.putString(RESULT_REQUESTED_ID, userID);
-            try {
-                URL url = new URL(urlString);
-                HttpURLConnection connection = (HttpURLConnection)url.openConnection();
-                checkConnectionErrors(connection);
-                InputStream inputStream = connection.getInputStream();
-                String response = streamToString(inputStream);
-                JSONObject jsonObject = (JSONObject) new JSONTokener(response).nextValue();
-
-                JSONObject jsonResponse = jsonObject.getJSONObject("data");
-                String outgoing_status = jsonResponse.getString("outgoing_status");
-                if(outgoing_status.equals("follows")){
-                    result.putBoolean(RESULT_IS_FRIEND, true);
-                } else {
-                    result.putBoolean(RESULT_IS_FRIEND, false);
-                }
-            } catch (Exception e) {
-                checkExeption(e, result);
-            }
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (checkTokenError(result)){return;}
-            if (!handleRequestResult(result, REQUEST_CHECK_IS_FRIEND,
-                    result.getString(RESULT_REQUESTED_ID))) return;
-
-            ((OnCheckIsFriendCompleteListener) mLocalListeners.get(REQUEST_CHECK_IS_FRIEND))
-                    .onCheckIsFriendComplete(getID(),
-                            "" + result.getString(RESULT_REQUESTED_ID),
-                            result.getBoolean(RESULT_IS_FRIEND)
-                    );
-        }
-    }
-
-    private class RequestAddFriendAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "PARAM_USER_ID";
-
-        public static final String RESULT_REQUESTED_ID = "RESULT_REQUESTED_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle(args);
-            String userID = args.getString(PARAM_USER_ID);
-            String token = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-            String urlString = INSTAGRAM_APIURL + "/users/" + userID + "/relationship/?access_token=" + token;
-            String parameters = "action=follow";
-            
-            try {
-                URL url = new URL(urlString);
-                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
-                connection.setDoOutput(true);
-                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
-                connection.setRequestMethod("POST");
-                OutputStreamWriter request = new OutputStreamWriter(connection.getOutputStream());
-                request.write(parameters);
-                request.flush();
-                request.close();
-                checkConnectionErrors(connection);
-                InputStream inputStream = connection.getInputStream();
-                String response = streamToString(inputStream);
-                JSONObject jsonObject = (JSONObject) new JSONTokener(response).nextValue();
-
-                JSONObject jsonResponse = jsonObject.getJSONObject("data");
-                String outgoing_status = jsonResponse.getString("outgoing_status");
-                if(outgoing_status.equals("follows")||outgoing_status.equals("requested")){
-                    result.putString(RESULT_REQUESTED_ID, userID);
-                } else {
-                    result.putString(RESULT_ERROR, "REQUEST_ADD_FRIEND Error");
-                }
-            } catch (Exception e) {
-                checkExeption(e, result);
-            }
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (checkTokenError(result)){return;}
-            if (!handleRequestResult(result, REQUEST_ADD_FRIEND,
-                    result.getString(RESULT_REQUESTED_ID))) return;
-
-            ((OnRequestAddFriendCompleteListener) mLocalListeners.get(REQUEST_ADD_FRIEND))
-                    .onRequestAddFriendComplete(getID(),
-                            "" + result.getString(RESULT_REQUESTED_ID)
-                    );
-        }
-    }
-
-    private class RequestRemoveFriendAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "PARAM_USER_ID";
-
-        public static final String RESULT_REQUESTED_ID = "RESULT_REQUESTED_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle(args);
-            String userID = args.getString(PARAM_USER_ID);
-            String token = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-            String urlString = INSTAGRAM_APIURL + "/users/" + userID + "/relationship/?access_token=" + token;
-            String parameters = "action=unfollow";
-            
-            try {
-                URL url = new URL(urlString);
-                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
-                connection.setDoOutput(true);
-                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
-                connection.setRequestMethod("POST");
-                OutputStreamWriter request = new OutputStreamWriter(connection.getOutputStream());
-                request.write(parameters);
-                request.flush();
-                request.close();
-                checkConnectionErrors(connection);
-                InputStream inputStream = connection.getInputStream();
-                String response = streamToString(inputStream);
-                JSONObject jsonObject = (JSONObject) new JSONTokener(response).nextValue();
-
-                JSONObject jsonResponse = jsonObject.getJSONObject("data");
-                String outgoing_status = jsonResponse.getString("outgoing_status");
-                if(outgoing_status.equals("none")){
-                    result.putString(RESULT_REQUESTED_ID, userID);
-                } else {
-                    result.putString(RESULT_ERROR, "REQUEST_ADD_FRIEND Error");
-                }
-            } catch (Exception e) {
-                checkExeption(e, result);
-            }
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (checkTokenError(result)){return;}
-            if (!handleRequestResult(result, REQUEST_REMOVE_FRIEND,
-                    result.getString(RESULT_REQUESTED_ID))) return;
-
-            ((OnRequestRemoveFriendCompleteListener) mLocalListeners.get(REQUEST_REMOVE_FRIEND))
-                    .onRequestRemoveFriendComplete(getID(),
-                            "" + result.getString(RESULT_REQUESTED_ID));
-        }
-    }
-}
diff --git a/linkedin/.gitignore b/linkedin/.gitignore
deleted file mode 100644
index 796b96d..0000000
--- a/linkedin/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/build
diff --git a/linkedin/build.gradle b/linkedin/build.gradle
deleted file mode 100644
index 67f61a1..0000000
--- a/linkedin/build.gradle
+++ /dev/null
@@ -1,27 +0,0 @@
-apply plugin: 'com.android.library'
-apply from: '../maven_push.gradle'
-
-android {
-    compileSdkVersion 21
-    buildToolsVersion "21.1.1"
-
-    defaultConfig {
-        applicationId "com.github.gorbin.asne.linkedin"
-        minSdkVersion 10
-        targetSdkVersion 21
-        versionCode 1
-        versionName "1.0"
-    }
-    buildTypes {
-        release {
-            runProguard false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-}
-
-dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    compile 'com.android.support:appcompat-v7:21.0.2'
-    compile project(':ASNECore')
-}
diff --git a/linkedin/gradle.properties b/linkedin/gradle.properties
deleted file mode 100644
index 5c210b7..0000000
--- a/linkedin/gradle.properties
+++ /dev/null
@@ -1,3 +0,0 @@
-POM_NAME=ASNE LinkedIn
-POM_ARTIFACT_ID=asne-linkedin
-POM_PACKAGING=aar
\ No newline at end of file
diff --git a/linkedin/libs/linkedin-j-android-1.0.jar b/linkedin/libs/linkedin-j-android-1.0.jar
deleted file mode 100644
index f3893d6..0000000
Binary files a/linkedin/libs/linkedin-j-android-1.0.jar and /dev/null differ
diff --git a/linkedin/proguard-rules.pro b/linkedin/proguard-rules.pro
deleted file mode 100644
index 92ddeef..0000000
--- a/linkedin/proguard-rules.pro
+++ /dev/null
@@ -1,17 +0,0 @@
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in D:/programs/AndroidStudio/sdk/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the proguardFiles
-# directive in build.gradle.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/linkedin/src/main/AndroidManifest.xml b/linkedin/src/main/AndroidManifest.xml
deleted file mode 100644
index 08affb9..0000000
--- a/linkedin/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.github.gorbin.asne.linkedin"
-    xmlns:tools="http://schemas.android.com/tools">
-    <!--<uses-sdk tools:node="replace" />-->
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
-    <application android:allowBackup="true">
-
-    </application>
-
-</manifest>
diff --git a/linkedin/src/main/java/com/github/gorbin/asne/linkedin/LinkedInJSocialNetwork.java b/linkedin/src/main/java/com/github/gorbin/asne/linkedin/LinkedInJSocialNetwork.java
deleted file mode 100644
index 3112b91..0000000
--- a/linkedin/src/main/java/com/github/gorbin/asne/linkedin/LinkedInJSocialNetwork.java
+++ /dev/null
@@ -1,847 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2014 Evgeny Gorbin
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- *******************************************************************************/
-package com.github.gorbin.asne.linkedin;
-
-import android.content.Context;
-import android.app.Activity;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.text.TextUtils;
-
-import com.github.gorbin.asne.core.AccessToken;
-import com.github.gorbin.asne.core.OAuthActivity;
-import com.github.gorbin.asne.core.OAuthSocialNetwork;
-import com.github.gorbin.asne.core.SocialNetworkAsyncTask;
-import com.github.gorbin.asne.core.SocialNetworkException;
-import com.github.gorbin.asne.core.listener.OnCheckIsFriendCompleteListener;
-import com.github.gorbin.asne.core.listener.OnLoginCompleteListener;
-import com.github.gorbin.asne.core.listener.OnPostingCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestAccessTokenCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestAddFriendCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestDetailedSocialPersonCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestGetFriendsCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestRemoveFriendCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestSocialPersonCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestSocialPersonsCompleteListener;
-import com.github.gorbin.asne.core.persons.SocialPerson;
-import com.google.code.linkedinapi.client.CommunicationsApiClient;
-import com.google.code.linkedinapi.client.LinkedInApiClient;
-import com.google.code.linkedinapi.client.LinkedInApiClientFactory;
-import com.google.code.linkedinapi.client.constant.ApplicationConstants;
-import com.google.code.linkedinapi.client.enumeration.ProfileField;
-import com.google.code.linkedinapi.client.oauth.LinkedInAccessToken;
-import com.google.code.linkedinapi.client.oauth.LinkedInOAuthService;
-import com.google.code.linkedinapi.client.oauth.LinkedInOAuthServiceFactory;
-import com.google.code.linkedinapi.client.oauth.LinkedInRequestToken;
-import com.google.code.linkedinapi.schema.Connections;
-import com.google.code.linkedinapi.schema.Headers;
-import com.google.code.linkedinapi.schema.HttpHeader;
-import com.google.code.linkedinapi.schema.Person;
-import com.google.code.linkedinapi.schema.Position;
-import com.google.code.linkedinapi.schema.VisibilityType;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.EnumSet;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
-
-import javax.naming.Context;
-
-/**
- * Class for LinkedIn social network integration using LinkedIn-j library
- *
- * @author Anton Krasov
- * @author Evgeny Gorbin (gorbin.e.o@gmail.com)
- */
-public class LinkedInJSocialNetwork extends OAuthSocialNetwork {
-    /*** Social network ID in asne modules, should be unique*/
-    public static final int ID = 2;
-
-    private static final String OAUTH_CALLBACK_SCHEME = "x-oauthflow-linkedin";
-    private static final String OAUTH_CALLBACK_HOST = "linkedinApiTestCallback";
-    private static final String OAUTH_CALLBACK_URL = String.format("%s://%s", OAUTH_CALLBACK_SCHEME, OAUTH_CALLBACK_HOST);
-    private static final String OAUTH_QUERY_TOKEN = "oauth_token";
-    private static final String OAUTH_QUERY_VERIFIER = "oauth_verifier";
-    private static final String OAUTH_QUERY_PROBLEM = "oauth_problem";
-    private static final String SAVE_STATE_KEY_OAUTH_TOKEN = "LinkedInSocialNetwork.SAVE_STATE_KEY_OAUTH_TOKEN";
-    private static final String SAVE_STATE_KEY_OAUTH_SECRET = "LinkedInSocialNetwork.SAVE_STATE_KEY_OAUTH_SECRET";
-    private static final EnumSet<ProfileField> PROFILE_PARAMETERS = EnumSet.of(
-            ProfileField.ID,
-            ProfileField.FIRST_NAME,
-            ProfileField.LAST_NAME,
-            ProfileField.POSITIONS,
-            ProfileField.CONNECTIONS,
-            ProfileField.LOCATION,
-            ProfileField.SUMMARY,
-            ProfileField.DATE_OF_BIRTH,
-            ProfileField.SPECIALTIES,
-            ProfileField.CURRENT_STATUS,
-            ProfileField.INTERESTS,
-            ProfileField.INDUSTRY,
-            ProfileField.MAIN_ADDRESS,
-            ProfileField.PHONE_NUMBERS,
-            ProfileField.CURRENT_SHARE,
-            ProfileField.API_STANDARD_PROFILE_REQUEST_HEADERS,
-            ProfileField.PICTURE_URL,
-            ProfileField.PUBLIC_PROFILE_URL
-    );
-    // max 16 bit to use in startActivityForResult
-    private static final int REQUEST_AUTH = UUID.randomUUID().hashCode() & 0xFFFF;
-    private final LinkedInOAuthService mOAuthService;
-    private final LinkedInApiClientFactory mLinkedInApiClientFactory;
-
-    private String mOAuthTokenSecret;
-
-    //TODO: refactor to use an init that is shared by constructors
-    public LinkedInJSocialNetwork(Fragment fragment, String consumerKey, String consumerSecret, String permissions) {
-        super(fragment);
-
-        if (TextUtils.isEmpty(consumerKey) || TextUtils.isEmpty(consumerSecret) || TextUtils.isEmpty(permissions)) {
-            throw new IllegalArgumentException("TextUtils.isEmpty(fConsumerKey) || TextUtils.isEmpty(fConsumerSecret) || TextUtils.isEmpty(fPermissions)");
-        }
-
-        mOAuthService = LinkedInOAuthServiceFactory.getInstance()
-                .createLinkedInOAuthService(consumerKey, consumerSecret, permissions);
-        mLinkedInApiClientFactory = LinkedInApiClientFactory.newInstance(consumerKey, consumerSecret);
-    }
-
-    public LinkedInJSocialNetwork(Fragment fragment, Context context, String consumerKey, String consumerSecret, String permissions) {
-        super(fragment, context);
-
-        if (TextUtils.isEmpty(consumerKey) || TextUtils.isEmpty(consumerSecret) || TextUtils.isEmpty(permissions)) {
-            throw new IllegalArgumentException("TextUtils.isEmpty(fConsumerKey) || TextUtils.isEmpty(fConsumerSecret) || TextUtils.isEmpty(fPermissions)");
-        }
-
-        mOAuthService = LinkedInOAuthServiceFactory.getInstance()
-                .createLinkedInOAuthService(consumerKey, consumerSecret, permissions);
-        mLinkedInApiClientFactory = LinkedInApiClientFactory.newInstance(consumerKey, consumerSecret);
-    }
-
-    /**
-     * Check is social network connected
-     * @return true if connected to LinkedIn social network and false if not
-     */
-    @Override
-    public boolean isConnected() {
-        String accessToken = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-        String accessTokenSecret = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, null);
-        return accessToken != null && accessTokenSecret != null;
-    }
-
-    /**
-     * Make login request - authorize in LinkedIn social network
-     * @param onLoginCompleteListener listener to trigger when Login complete
-     */
-    @Override
-    public void requestLogin(OnLoginCompleteListener onLoginCompleteListener) {
-        super.requestLogin(onLoginCompleteListener);
-        executeRequest(new RequestLoginAsyncTask(), null, REQUEST_LOGIN);
-    }
-
-    /**
-     * Logout from LinkedIn social network
-     */
-    @Override
-    public void logout() {
-        fatalError();
-    }
-
-    /**
-     * Get id of LinkedIn social network
-     * @return Social network id for LinkedIn = 2
-     */
-    @Override
-    public int getID() {
-        return ID;
-    }
-
-    /**
-     * Method to get AccessToken of LinkedIn social network
-     * @return {@link com.github.gorbin.asne.core.AccessToken}
-     */
-    @Override
-    public AccessToken getAccessToken() {
-        return new AccessToken(
-                mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null),
-                mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, null)
-        );
-    }
-
-    /**
-     * Request {@link com.github.gorbin.asne.core.AccessToken} of LinkedIn social network that you can get from onRequestAccessTokenCompleteListener
-     * @param onRequestAccessTokenCompleteListener listener for {@link com.github.gorbin.asne.core.AccessToken} request
-     */
-    @Override
-    public void requestAccessToken(OnRequestAccessTokenCompleteListener onRequestAccessTokenCompleteListener) {
-        super.requestAccessToken(onRequestAccessTokenCompleteListener);
-        ((OnRequestAccessTokenCompleteListener) mLocalListeners.get(REQUEST_ACCESS_TOKEN))
-                .onRequestAccessTokenComplete(getID(), new AccessToken(
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null),
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, null)
-                ));
-    }
-
-    /**
-     * Request current user {@link com.github.gorbin.asne.core.persons.SocialPerson}
-     * @param onRequestSocialPersonCompleteListener listener for {@link com.github.gorbin.asne.core.persons.SocialPerson} request
-     */
-    @Override
-    public void requestCurrentPerson(OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        super.requestCurrentPerson(onRequestSocialPersonCompleteListener);
-        executeRequest(new RequestSocialPersonAsyncTask(), null, REQUEST_GET_CURRENT_PERSON);
-    }
-
-    /**
-     * Request {@link com.github.gorbin.asne.core.persons.SocialPerson} by user id
-     * @param userID user id in social network
-     * @param onRequestSocialPersonCompleteListener listener for request {@link com.github.gorbin.asne.core.persons.SocialPerson}
-     */
-    @Override
-    public void requestSocialPerson(String userID, OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        super.requestSocialPerson(userID, onRequestSocialPersonCompleteListener);
-        if (TextUtils.isEmpty(userID)) {
-            throw new SocialNetworkException("userID can't be null or empty");
-        }
-        Bundle args = new Bundle();
-        args.putString(RequestSocialPersonAsyncTask.PARAM_USER_ID, userID);
-        executeRequest(new RequestSocialPersonAsyncTask(), args, REQUEST_GET_PERSON);
-    }
-
-    /**
-     * Not supported via LinkedIn api
-     * @throws com.github.gorbin.asne.core.SocialNetworkException
-     * @param userID array of user ids in social network
-     * @param onRequestSocialPersonsCompleteListener listener for request ArrayList of {@link com.github.gorbin.asne.core.persons.SocialPerson}
-     */
-    @Override
-    public void requestSocialPersons(String[] userID, OnRequestSocialPersonsCompleteListener onRequestSocialPersonsCompleteListener) {
-        throw new SocialNetworkException("requestSocialPersons isn't allowed for LinkedInSocialNetwork");
-    }
-
-    /**
-     * Request user {@link com.github.gorbin.asne.linkedin.LinkedInPerson} by userId - detailed user data
-     * @param userId id of LinkedIn user
-     * @param onRequestDetailedSocialPersonCompleteListener listener for request detailed social person
-     */
-    @Override
-    public void requestDetailedSocialPerson(String userId, OnRequestDetailedSocialPersonCompleteListener onRequestDetailedSocialPersonCompleteListener) {
-        super.requestDetailedSocialPerson(userId, onRequestDetailedSocialPersonCompleteListener);
-        Bundle args = new Bundle();
-        if(userId != null) {
-           args.putString(RequestGetDetailedPersonAsyncTask.PARAM_USER_ID, userId);
-        }
-        executeRequest(new RequestGetDetailedPersonAsyncTask(), args, REQUEST_GET_DETAIL_PERSON);
-    }
-
-    private SocialPerson getSocialPerson(SocialPerson socialPerson, Person person) {
-        socialPerson.id = person.getId();
-        socialPerson.name = person.getFirstName() + " " + person.getLastName();
-        socialPerson.avatarURL = person.getPictureUrl();
-        socialPerson.profileURL = person.getPublicProfileUrl();
-
-        return socialPerson;
-    }
-
-    private LinkedInPerson getDetailedSocialPerson(LinkedInPerson linkedinPerson, Person person) {
-        getSocialPerson(linkedinPerson, person);
-        List<Position> positions = person.getPositions().getPositionList();
-        if (positions.size() > 0) {
-            Position position = positions.get(positions.size() - 1);
-            linkedinPerson.company = position.getCompany().getName();
-            linkedinPerson.position =  position.getTitle();
-        }
-        linkedinPerson.firstName = person.getFirstName();
-        linkedinPerson.lastName = person.getLastName();
-        linkedinPerson.headLine = person.getHeadline();
-        if(person.getLocation() != null) {
-            if(person.getLocation().getPostalCode() != null) {
-                linkedinPerson.countryCode = person.getLocation().getPostalCode();
-            }
-            if(person.getLocation().getDescription() != null) {
-                linkedinPerson.locationDescription = person.getLocation().getDescription();
-            }
-        }
-        linkedinPerson.industry =  person.getIndustry();
-        linkedinPerson.summary =  person.getSummary();
-        if(person.getDateOfBirth() != null) {
-            linkedinPerson.birthday = person.getDateOfBirth().getDay() + "/"
-                    + person.getDateOfBirth().getMonth() + "/" + person.getDateOfBirth().getYear();
-        }
-        linkedinPerson.mainAddress = person.getMainAddress();
-        linkedinPerson.currentStatus = person.getCurrentStatus();
-        linkedinPerson.interests = person.getInterests();
-        linkedinPerson.specialties = person.getSpecialties();
-//        if(person.getPhoneNumbers() != null) {
-//            linkedinPerson.phone = person.getPhoneNumbers().getPhoneNumberList().get(0).getPhoneNumber();
-//        }
-        return  linkedinPerson;
-    }
-
-    /**
-     * Post message to social network
-     * @param message  message that should be shared
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostMessage(String message, OnPostingCompleteListener onPostingCompleteListener) {
-        super.requestPostMessage(message, onPostingCompleteListener);
-        Bundle args = new Bundle();
-        args.putString(RequestPostMessageAsyncTask.PARAM_MESSAGE, message);
-        executeRequest(new RequestPostMessageAsyncTask(), args, REQUEST_POST_MESSAGE);
-    }
-
-    /**
-     * Not supported via LinkedIn api
-     * @throws com.github.gorbin.asne.core.SocialNetworkException
-     * @param photo photo that should be shared
-     * @param message message that should be shared with photo
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostPhoto(File photo, String message, OnPostingCompleteListener onPostingCompleteListener) {
-        throw new SocialNetworkException("requestPostPhoto isn't allowed for LinkedInSocialNetwork");
-    }
-
-    /**
-     * Post link with comment to social network
-     * @param bundle bundle containing information that should be shared(Bundle constants in {@link com.github.gorbin.asne.core.SocialNetwork})
-     * @param message message that should be shared with bundle
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostLink(Bundle bundle, String message, OnPostingCompleteListener onPostingCompleteListener) {
-        super.requestPostLink(bundle, message, onPostingCompleteListener);
-        executeRequest(new RequestPostLinkAsyncTask(), bundle, REQUEST_POST_LINK);
-    }
-
-    /**
-     * Not supported via LinkedIn api
-     * @throws com.github.gorbin.asne.core.SocialNetworkException
-     * @param bundle bundle containing information that should be shared(Bundle constants in {@link com.github.gorbin.asne.core.SocialNetwork})
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostDialog(Bundle bundle, OnPostingCompleteListener onPostingCompleteListener) {
-        throw new SocialNetworkException("requestPostDialog isn't allowed for LinkedInSocialNetwork");
-    }
-
-    /**
-     * Check if user by id is friend of current user
-     * @param userID user id that should be checked as friend of current user
-     * @param onCheckIsFriendCompleteListener listener for checking friend request
-     */
-    @Override
-    public void requestCheckIsFriend(String userID, OnCheckIsFriendCompleteListener onCheckIsFriendCompleteListener) {
-        super.requestCheckIsFriend(userID, onCheckIsFriendCompleteListener);
-
-        Bundle args = new Bundle();
-        args.putString(RequestCheckIsFriendAsyncTask.PARAM_USER_ID, userID);
-        executeRequest(new RequestCheckIsFriendAsyncTask(), args, REQUEST_CHECK_IS_FRIEND);
-    }
-
-    /**
-     * Get current user friends list
-     * @param onRequestGetFriendsCompleteListener listener for getting list of current user friends
-     */
-    @Override
-    public void requestGetFriends(OnRequestGetFriendsCompleteListener onRequestGetFriendsCompleteListener) {
-        super.requestGetFriends(onRequestGetFriendsCompleteListener);
-        executeRequest(new RequestGetFriendsAsyncTask(), null, REQUEST_GET_FRIENDS);
-    }
-
-    /**
-     * Invite friend by id to current user
-     * @param userID id of user that should be invited
-     * @param onRequestAddFriendCompleteListener listener for invite result
-     */
-    @Override
-    public void requestAddFriend(String userID, OnRequestAddFriendCompleteListener onRequestAddFriendCompleteListener) {
-        super.requestAddFriend(userID, onRequestAddFriendCompleteListener);
-        Bundle args = new Bundle();
-        args.putString(RequestSendInviteAsyncTask.PARAM_USER_ID, userID);
-        executeRequest(new RequestSendInviteAsyncTask(), args, REQUEST_ADD_FRIEND);
-    }
-
-    /**
-     * Not supported via LinkedIn api
-     * @throws com.github.gorbin.asne.core.SocialNetworkException
-     * @param userID user id that should be removed from friends
-     * @param onRequestRemoveFriendCompleteListener listener to remove friend request response
-     */
-    @Override
-    public void requestRemoveFriend(String userID, OnRequestRemoveFriendCompleteListener onRequestRemoveFriendCompleteListener) {
-        throw new SocialNetworkException("requestRemoveFriend isn't allowed for LinkedInSocialNetwork");
-    }
-
-    /**
-     * Overrided for LinkedIn support
-     * @param requestCode The integer request code originally supplied to startActivityForResult(), allowing you to identify who this result came from.
-     * @param resultCode The integer result code returned by the child activity through its setResult().
-     * @param data An Intent, which can return result data to the caller (various data can be attached to Intent "extras").
-     */
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        int sanitizedRequestCode = requestCode % 0x10000;
-        if (sanitizedRequestCode != REQUEST_AUTH) return;
-
-        if (resultCode != Activity.RESULT_OK || data == null || data.getData() == null) {
-            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN, "Login canceled", null);
-            }
-            return;
-        }
-
-        Uri uri = data.getData();
-
-        final String problem = uri.getQueryParameter(OAUTH_QUERY_PROBLEM);
-        if (problem != null) {
-            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN, problem, null);
-            }
-
-            return;
-        }
-
-        Bundle args = new Bundle();
-        args.putString(RequestLogin2AsyncTask.PARAM_VERIFIER, uri.toString());
-        args.putString(RequestLogin2AsyncTask.PARAM_AUTH_REQUEST_TOKEN, mOAuthTokenSecret);
-        executeRequest(new RequestLogin2AsyncTask(), args, REQUEST_LOGIN2);
-    }
-
-    private void fatalError() {
-        mSharedPreferences.edit()
-                .remove(SAVE_STATE_KEY_OAUTH_TOKEN)
-                .remove(SAVE_STATE_KEY_OAUTH_SECRET)
-                .apply();
-    }
-
-    private class RequestLoginAsyncTask extends SocialNetworkAsyncTask {
-        private static final String RESULT_URL = "RequestLoginAsyncTask.RESULT_URL";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle result = new Bundle();
-
-            try {
-                final LinkedInRequestToken liToken = mOAuthService.getOAuthRequestToken(OAUTH_CALLBACK_URL);
-                mOAuthTokenSecret = liToken.getTokenSecret();
-                result.putString(RESULT_URL, liToken.getAuthorizationUrl());
-            } catch (Exception e) {
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_LOGIN)) return;
-
-            Intent intent = new Intent(mSocialNetworkManager.getActivity(), OAuthActivity.class)
-                    .putExtra(OAuthActivity.PARAM_CALLBACK, OAUTH_CALLBACK_URL)
-                    .putExtra(OAuthActivity.PARAM_URL_TO_LOAD, result.getString(RESULT_URL));
-
-            mSocialNetworkManager.getActivity().startActivityForResult(intent, REQUEST_AUTH);
-        }
-    }
-
-    private class RequestLogin2AsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_AUTH_REQUEST_TOKEN = "PARAM_AUTH_REQUEST_TOKEN";
-        public static final String PARAM_VERIFIER = "PARAM_VERIFIER";
-        private static final String RESULT_TOKEN = "RESULT_TOKEN";
-        private static final String RESULT_SECRET = "RESULT_SECRET";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            final String paramAuthRequestToken = args.getString(PARAM_AUTH_REQUEST_TOKEN);
-            final String paramVerifier = args.getString(PARAM_VERIFIER);
-
-            Uri uri = Uri.parse(paramVerifier);
-
-            Bundle result = new Bundle();
-
-            try {
-                final LinkedInAccessToken accessToken = mOAuthService.getOAuthAccessToken(
-                        new LinkedInRequestToken(
-                                uri.getQueryParameter(OAUTH_QUERY_TOKEN),
-                                paramAuthRequestToken
-                        ),
-                        uri.getQueryParameter(OAUTH_QUERY_VERIFIER)
-                );
-
-                result.putString(RESULT_TOKEN, accessToken.getToken());
-                result.putString(RESULT_SECRET, accessToken.getTokenSecret());
-            } catch (Exception e) {
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            mRequests.remove(REQUEST_LOGIN2);
-            if (!handleRequestResult(result, REQUEST_LOGIN)) return;
-
-            // Shared Preferences
-            mSharedPreferences.edit()
-                    .putString(SAVE_STATE_KEY_OAUTH_TOKEN, result.getString(RESULT_TOKEN))
-                    .putString(SAVE_STATE_KEY_OAUTH_SECRET, result.getString(RESULT_SECRET))
-                    .apply();
-
-            ((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
-            mLocalListeners.remove(REQUEST_LOGIN);
-        }
-    }
-
-    private class RequestSocialPersonAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "RequestGetPersonAsyncTask.PARAM_USER_ID";
-        public static final String CURRENT = "RequestGetPersonAsyncTask.CURRENT";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle result = new Bundle();
-            Bundle args = params[0];
-            String userID;
-
-            try {
-                LinkedInApiClient client = mLinkedInApiClientFactory.createLinkedInApiClient(
-                        new LinkedInAccessToken(
-                                mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null),
-                                mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, null)
-                        )
-                );
-                Person person;
-                if (args.containsKey(PARAM_USER_ID)) {
-                    userID = args.getString(PARAM_USER_ID);
-                    result.putBoolean(CURRENT, false);
-                    Set<ProfileField> scope = EnumSet.of(ProfileField.PICTURE_URL, ProfileField.ID,
-                        ProfileField.FIRST_NAME, ProfileField.LAST_NAME, ProfileField.PUBLIC_PROFILE_URL);
-                    person = client.getProfileById(userID, scope);
-                } else {
-                    result.putBoolean(CURRENT, true);
-                    person = client.getProfileForCurrentUser(PROFILE_PARAMETERS);
-                }
-                SocialPerson socialPerson = new SocialPerson();
-                getSocialPerson(socialPerson, person);
-                result.putParcelable(REQUEST_GET_PERSON, socialPerson);
-				
-            } catch (Exception e) {
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            SocialPerson socialPerson = result.getParcelable(REQUEST_GET_PERSON);
-            if(result.containsKey(CURRENT) && result.getBoolean(CURRENT)){
-                if (!handleRequestResult(result, REQUEST_GET_CURRENT_PERSON)) return;
-                ((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_CURRENT_PERSON))
-                        .onRequestSocialPersonSuccess(getID(), socialPerson);
-            } else {
-                if (!handleRequestResult(result, REQUEST_GET_PERSON)) return;
-                ((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_PERSON))
-                        .onRequestSocialPersonSuccess(getID(), socialPerson);
-            }
-        }
-    }
-
-	private class RequestGetDetailedPersonAsyncTask extends SocialNetworkAsyncTask {
-		public static final String PARAM_USER_ID = "PARAM_USER_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle result = new Bundle();
-            Bundle args = params[0];
-            String userID;
-			
-            try {
-                LinkedInApiClient client = mLinkedInApiClientFactory.createLinkedInApiClient(
-                        new LinkedInAccessToken(
-                                mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null),
-                                mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, null)
-                        )
-                );
-                Person person;
-                if (args.containsKey(PARAM_USER_ID)) {
-                    userID = args.getString(PARAM_USER_ID);
-
-                    person = client.getProfileById(userID, EnumSet.allOf(ProfileField.class));
-                } else {
-                    person = client.getProfileForCurrentUser(PROFILE_PARAMETERS);
-                }
-                LinkedInPerson linkedInPerson = new LinkedInPerson();
-                getDetailedSocialPerson(linkedInPerson, person);
-                result.putParcelable(REQUEST_GET_DETAIL_PERSON, linkedInPerson);
-            } catch (Exception e) {
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-			if (!handleRequestResult(result, REQUEST_GET_DETAIL_PERSON)) return;
-			LinkedInPerson linkedInPerson = result.getParcelable(REQUEST_GET_DETAIL_PERSON);
-			((OnRequestDetailedSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_DETAIL_PERSON))
-    			.onRequestDetailedSocialPersonSuccess(getID(), linkedInPerson);
-            mLocalListeners.remove(REQUEST_GET_DETAIL_PERSON);
-        }
-    }
-
-    private class RequestPostMessageAsyncTask extends SocialNetworkAsyncTask {
-        private static final String PARAM_MESSAGE = "PARAM_MESSAGE";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            String message = params[0].getString(PARAM_MESSAGE);
-
-            Bundle result = new Bundle();
-
-            try {
-                LinkedInApiClient apiClient = mLinkedInApiClientFactory.createLinkedInApiClient(
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, ""),
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, "")
-                );
-
-                apiClient.updateCurrentStatus(message);
-            } catch (Exception e) {
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_POST_MESSAGE)) return;
-
-            ((OnPostingCompleteListener) mLocalListeners.get(REQUEST_POST_MESSAGE))
-                    .onPostSuccessfully(getID());
-        }
-    }
-
-    private class RequestPostLinkAsyncTask extends SocialNetworkAsyncTask {
-        private static final String PARAM_MESSAGE = "PARAM_MESSAGE";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            String commentText = params[0].getString(PARAM_MESSAGE);
-            String url = params[0].getString(BUNDLE_LINK);
-            String title = params[0].getString(BUNDLE_NAME);
-            String description = params[0].getString(BUNDLE_MESSAGE);
-            String imageUrl = params[0].getString(BUNDLE_PICTURE);
-            VisibilityType visibilityType = VisibilityType.ANYONE;
-            Bundle result = new Bundle();
-
-            try {
-                LinkedInApiClient apiClient = mLinkedInApiClientFactory.createLinkedInApiClient(
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, ""),
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, "")
-                );
-
-                apiClient.postShare(commentText, title, description, url, imageUrl, visibilityType);
-            } catch (Exception e) {
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_POST_LINK)) return;
-
-            ((OnPostingCompleteListener) mLocalListeners.get(REQUEST_POST_LINK))
-                    .onPostSuccessfully(getID());
-        }
-    }
-
-    private class RequestCheckIsFriendAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "PARAM_USER_ID";
-        private static final String RESULT_IS_FRIEND = "RESULT_IS_FRIEND";
-        private static final String RESULT_REQUESTED_ID = "RESULT_REQUESTED_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            String userID = params[0].getString(PARAM_USER_ID);
-
-            Bundle result = new Bundle();
-            result.putString(RESULT_REQUESTED_ID, userID);
-
-            try {
-                LinkedInApiClient apiClient = mLinkedInApiClientFactory.createLinkedInApiClient(
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, ""),
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, "")
-                );
-
-                Person person = apiClient.getProfileForCurrentUser(PROFILE_PARAMETERS);
-
-                List<Person> list = person.getConnections().getPersonList();
-                if (list != null) {
-                    for (Person p : list) {
-                        if (p.getId().equals(userID)) {
-                            result.putBoolean(RESULT_IS_FRIEND, true);
-                            return result;
-                        }
-                    }
-                }
-
-                result.putBoolean(RESULT_IS_FRIEND, false);
-            } catch (Exception e) {
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_CHECK_IS_FRIEND,
-                    result.getString(RESULT_REQUESTED_ID))) return;
-
-            ((OnCheckIsFriendCompleteListener) mLocalListeners.get(REQUEST_CHECK_IS_FRIEND))
-                    .onCheckIsFriendComplete(
-                            getID(),
-                            result.getString(RESULT_REQUESTED_ID),
-                            result.getBoolean(RESULT_IS_FRIEND)
-                    );
-            mLocalListeners.remove(REQUEST_CHECK_IS_FRIEND);
-        }
-    }
-
-    private class RequestGetFriendsAsyncTask extends SocialNetworkAsyncTask {
-        public static final String RESULT_GET_FRIENDS = "RESULT_GET_FRIENDS";
-        public static final String RESULT_GET_FRIENDS_ID = "RESULT_GET_FRIENDS_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle result = new Bundle();
-            try {
-                LinkedInApiClient apiClient = mLinkedInApiClientFactory.createLinkedInApiClient(
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, ""),
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, "")
-                );
-                ArrayList<String> friendIds = new ArrayList<String>();
-                ArrayList<SocialPerson> socialPersons = new ArrayList<SocialPerson>();
-                SocialPerson socialPerson = new SocialPerson();
-                Connections connections = apiClient.getConnectionsForCurrentUser();
-                if(connections.getPersonList() != null)
-                    for (Person person : connections.getPersonList()) {
-                        if(person.getId() != null) {
-                            friendIds.add(person.getId());
-                        }
-                        getSocialPerson(socialPerson, person);
-                        socialPersons.add(socialPerson);
-                        socialPerson = new SocialPerson();
-                    }
-                result.putStringArray(RESULT_GET_FRIENDS_ID, friendIds.toArray(new String[friendIds.size()]));
-                result.putParcelableArrayList(RESULT_GET_FRIENDS, socialPersons);
-            } catch (Exception e) {
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_GET_FRIENDS,
-                    result.getStringArray(RESULT_GET_FRIENDS_ID))) return;
-
-            ((OnRequestGetFriendsCompleteListener) mLocalListeners.get(REQUEST_GET_FRIENDS))
-                    .OnGetFriendsIdComplete(getID(), result.getStringArray(RESULT_GET_FRIENDS_ID));
-            ArrayList<SocialPerson> socialPersons = result.getParcelableArrayList(RESULT_GET_FRIENDS);
-            ((OnRequestGetFriendsCompleteListener) mLocalListeners.get(REQUEST_GET_FRIENDS))
-                    .OnGetFriendsComplete(getID(), socialPersons);
-            mLocalListeners.remove(RESULT_GET_FRIENDS);
-        }
-    }
-
-    private class RequestSendInviteAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "PARAM_USER_ID";
-        private static final String RESULT_REQUESTED_ID = "RESULT_REQUESTED_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            String userID = params[0].getString(PARAM_USER_ID);
-
-            Bundle result = new Bundle();
-
-            try {
-                result.putString(RESULT_REQUESTED_ID, userID);
-
-                LinkedInApiClient apiClient = mLinkedInApiClientFactory.createLinkedInApiClient(
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, ""),
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, "")
-                );
-
-                Set<ProfileField> fields = new HashSet<ProfileField>();
-                fields.add(ProfileField.API_STANDARD_PROFILE_REQUEST);
-
-                Person person = apiClient.getProfileById(userID, fields);
-
-                String authHeader = "";
-                Headers headers = person.getApiStandardProfileRequest().getHeaders();
-                List<HttpHeader> httpHeaders = headers.getHttpHeaderList();
-                for (HttpHeader httpHeader : httpHeaders) {
-                    if (httpHeader.getName().equals(ApplicationConstants.AUTH_HEADER_NAME)) {
-                        authHeader = httpHeader.getValue();
-                        break;
-                    }
-                }
-
-                CommunicationsApiClient communicationsApiClient = mLinkedInApiClientFactory.createCommunicationsApiClient(
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, ""),
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, "")
-                );
-                communicationsApiClient.sendInviteById(userID, "Join my network on LinkedIn",
-                        "Since you are a person I trust, I wanted to invite you to join my network on LinkedIn.", authHeader);
-            } catch (Exception e) {
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_ADD_FRIEND,
-                    result.getString(RESULT_REQUESTED_ID))) return;
-
-            ((OnRequestAddFriendCompleteListener) mLocalListeners.get(REQUEST_ADD_FRIEND))
-                    .onRequestAddFriendComplete(
-                            getID(),
-                            result.getString(RESULT_REQUESTED_ID)
-                    );
-            mLocalListeners.remove(REQUEST_CHECK_IS_FRIEND);
-        }
-    }
-}
diff --git a/linkedin/src/main/java/com/github/gorbin/asne/linkedin/LinkedInPerson.java b/linkedin/src/main/java/com/github/gorbin/asne/linkedin/LinkedInPerson.java
deleted file mode 100644
index 1395a37..0000000
--- a/linkedin/src/main/java/com/github/gorbin/asne/linkedin/LinkedInPerson.java
+++ /dev/null
@@ -1,207 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2014 Evgeny Gorbin
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- *******************************************************************************/
-package com.github.gorbin.asne.linkedin;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.github.gorbin.asne.core.persons.SocialPerson;
-
-/**
- * Class for detailed LinkedIn social person
- *
- * @author Evgeny Gorbin (gorbin.e.o@gmail.com)
- */
-public class LinkedInPerson extends SocialPerson implements Parcelable {
-
-    public static final Creator<LinkedInPerson> CREATOR
-            = new Creator<LinkedInPerson>() {
-        public LinkedInPerson createFromParcel(Parcel in) {
-            return new LinkedInPerson(in);
-        }
-
-        public LinkedInPerson[] newArray(int size) {
-            return new LinkedInPerson[size];
-        }
-    };
-
-    /*** Current organization with which this person is associated.*/
-    public String company;
-    /*** The person's job title or role within the organization.*/
-    public String position;
-    /*** First name of social person*/
-    public String firstName;
-    /*** Last name of social person*/
-	public String lastName;
-    /*** Headline of social person*/
-	public String headLine;
-    /*** Country code of social person*/
-	public String countryCode;
-    /*** Location description of social person*/
-	public String locationDescription;
-    /*** The person's job industry within the organization.*/
-	public String industry;
-    /*** Summary of social person*/
-	public String summary;
-    /*** Birthday of social person in the format DD/MM/YYYY or DD/MM*/
-	public String birthday;
-    /*** Main address of social person from contacts*/
-	public String mainAddress;
-    /*** Current status of social person*/
-	public String currentStatus;
-    /*** Interests of social person*/
-	public String interests;
-    /*** Specialties of social person*/
-	public String specialties;
-    /*** Phone of social person from contacts*/
-    public String phone;
-	
-    public LinkedInPerson() {
-
-    }
-    protected LinkedInPerson(Parcel in) {
-        company = in.readString();
-        position = in.readString();
-        firstName = in.readString();
-        lastName = in.readString();
-        headLine = in.readString();
-        countryCode = in.readString();
-        locationDescription = in.readString();
-        industry = in.readString();
-        summary = in.readString();
-        birthday = in.readString();
-        mainAddress = in.readString();
-        currentStatus = in.readString();
-        interests = in.readString();
-        specialties = in.readString();
-        phone = in.readString();
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        dest.writeString(company);
-        dest.writeString(position);
-        dest.writeString(firstName);
-        dest.writeString(lastName);
-        dest.writeString(headLine);
-        dest.writeString(countryCode);
-        dest.writeString(locationDescription);
-        dest.writeString(industry);
-        dest.writeString(summary);
-        dest.writeString(birthday);
-        dest.writeString(mainAddress);
-        dest.writeString(currentStatus);
-        dest.writeString(interests);
-        dest.writeString(specialties);
-        dest.writeString(phone);
-    }
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (!(o instanceof LinkedInPerson)) return false;
-        if (!super.equals(o)) return false;
-
-        LinkedInPerson that = (LinkedInPerson) o;
-
-        if (birthday != null ? !birthday.equals(that.birthday) : that.birthday != null)
-            return false;
-        if (company != null ? !company.equals(that.company) : that.company != null) return false;
-        if (currentStatus != null ? !currentStatus.equals(that.currentStatus) : that.currentStatus != null)
-            return false;
-        if (firstName != null ? !firstName.equals(that.firstName) : that.firstName != null)
-            return false;
-        if (headLine != null ? !headLine.equals(that.headLine) : that.headLine != null)
-            return false;
-        if (industry != null ? !industry.equals(that.industry) : that.industry != null)
-            return false;
-        if (interests != null ? !interests.equals(that.interests) : that.interests != null)
-            return false;
-        if (lastName != null ? !lastName.equals(that.lastName) : that.lastName != null)
-            return false;
-        if (locationDescription != null ? !locationDescription.equals(that.locationDescription) : that.locationDescription != null)
-            return false;
-        if (mainAddress != null ? !mainAddress.equals(that.mainAddress) : that.mainAddress != null)
-            return false;
-        if (position != null ? !position.equals(that.position) : that.position != null)
-            return false;
-        if (countryCode != null ? !countryCode.equals(that.countryCode) : that.countryCode != null)
-            return false;
-        if (specialties != null ? !specialties.equals(that.specialties) : that.specialties != null)
-            return false;
-        if (summary != null ? !summary.equals(that.summary) : that.summary != null) return false;
-        if (phone != null ? !phone.equals(that.phone) : that.phone != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = super.hashCode();
-        result = 31 * result + (company != null ? company.hashCode() : 0);
-        result = 31 * result + (position != null ? position.hashCode() : 0);
-        result = 31 * result + (firstName != null ? firstName.hashCode() : 0);
-        result = 31 * result + (lastName != null ? lastName.hashCode() : 0);
-        result = 31 * result + (headLine != null ? headLine.hashCode() : 0);
-        result = 31 * result + (countryCode != null ? countryCode.hashCode() : 0);
-        result = 31 * result + (locationDescription != null ? locationDescription.hashCode() : 0);
-        result = 31 * result + (industry != null ? industry.hashCode() : 0);
-        result = 31 * result + (summary != null ? summary.hashCode() : 0);
-        result = 31 * result + (birthday != null ? birthday.hashCode() : 0);
-        result = 31 * result + (mainAddress != null ? mainAddress.hashCode() : 0);
-        result = 31 * result + (currentStatus != null ? currentStatus.hashCode() : 0);
-        result = 31 * result + (interests != null ? interests.hashCode() : 0);
-        result = 31 * result + (specialties != null ? specialties.hashCode() : 0);
-        result = 31 * result + (phone != null ? phone.hashCode() : 0);
-        return result;
-    }
-
-    @Override
-    public String toString() {
-        return "LinkedInPerson{" +
-                "id='" + id + '\'' +
-                ", name='" + name + '\'' +
-                ", avatarURL='" + avatarURL + '\'' +
-                ", profileURL='" + profileURL + '\'' +
-                ", email='" + email + '\'' +
-                ", company='" + company + '\'' +
-                ", position='" + position + '\'' +
-                ", firstName='" + firstName + '\'' +
-                ", lastName='" + lastName + '\'' +
-                ", headLine='" + headLine + '\'' +
-                ", postalCode='" + countryCode + '\'' +
-                ", locationDescription='" + locationDescription + '\'' +
-                ", industry='" + industry + '\'' +
-                ", summary='" + summary + '\'' +
-                ", birthday='" + birthday + '\'' +
-                ", mainAddress='" + mainAddress + '\'' +
-                ", currentStatus='" + currentStatus + '\'' +
-                ", interests='" + interests + '\'' +
-                ", specialties='" + specialties + '\'' +
-                ", phone='" + phone + '\'' +
-                '}';
-    }
-}
diff --git a/linkedin/src/main/java/com/github/gorbin/asne/linkedin/LinkedInSocialNetwork.java b/linkedin/src/main/java/com/github/gorbin/asne/linkedin/LinkedInSocialNetwork.java
deleted file mode 100644
index 2d21474..0000000
--- a/linkedin/src/main/java/com/github/gorbin/asne/linkedin/LinkedInSocialNetwork.java
+++ /dev/null
@@ -1,913 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2014 Evgeny Gorbin
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- *******************************************************************************/
-package com.github.gorbin.asne.linkedin;
-
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.text.TextUtils;
-
-import com.github.gorbin.asne.core.AccessToken;
-import com.github.gorbin.asne.core.OAuthActivity;
-import com.github.gorbin.asne.core.OAuthSocialNetwork;
-import com.github.gorbin.asne.core.SocialNetworkAsyncTask;
-import com.github.gorbin.asne.core.SocialNetworkException;
-import com.github.gorbin.asne.core.listener.OnCheckIsFriendCompleteListener;
-import com.github.gorbin.asne.core.listener.OnLoginCompleteListener;
-import com.github.gorbin.asne.core.listener.OnPostingCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestAccessTokenCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestAddFriendCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestDetailedSocialPersonCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestGetFriendsCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestRemoveFriendCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestSocialPersonCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestSocialPersonsCompleteListener;
-import com.github.gorbin.asne.core.persons.SocialPerson;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.json.JSONTokener;
-
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStreamWriter;
-import java.net.HttpURLConnection;
-import java.net.URL;
-import java.text.MessageFormat;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.UUID;
-
-import javax.net.ssl.HttpsURLConnection;
-
-/**
- * Class for LinkedIn social network integration using OAuth2
- *
- * @author Evgeny Gorbin (gorbin.e.o@gmail.com)
- */
-public class LinkedInSocialNetwork extends OAuthSocialNetwork {
-    /*** Social network ID in asne modules, should be unique*/
-    public static final int ID = 2;
-    private static final int REQUEST_AUTH = UUID.randomUUID().hashCode() & 0xFFFF;
-    private static final String SAVE_STATE_KEY_OAUTH_TOKEN = "LinkedInSocialNetwork.SAVE_STATE_KEY_OAUTH_TOKEN";
-    private static final String SAVE_STATE_KEY_OAUTH_REQUEST_TOKEN = "LinkedInSocialNetwork.SAVE_STATE_KEY_OAUTH_SECRET";
-    private static final String SAVE_STATE_KEY_EXPIRES_DATE = "LinkedInSocialNetwork.SAVE_STATE_KEY_EXPIRES_DATE";
-//    private final String LINKEDIN_OAUTH2_CALLBACK_URL = "https://asne";
-    private final String authURLString;
-    private String LINKEDIN_API = "https://www.linkedin.com/uas/oauth2/authorization?response_type=code";
-    private String LINKEDIN_TOKEN = "https://www.linkedin.com/uas/oauth2/accessToken?grant_type=authorization_code";
-    private String LINKEDIN_V1_API = "https://api.linkedin.com/v1";
-    private String FORMAT_JSON = "&format=json";
-    private String SHARE = "<share>{0}<visibility><code>anyone</code></visibility></share>";
-    private String COMMENT = "<comment>{0}</comment>";
-    private String CONTENT = "<content><title>{0}</title><description>{1}</description>" +
-            "<submitted-url>{2}</submitted-url><submitted-image-url>{3}</submitted-image-url></content>";
-    private String consumerKey;
-    private String consumerSecret;
-    private String redirectURL;
-
-    public LinkedInSocialNetwork(Fragment fragment, String consumerKey, String consumerSecret, String redirectURL, String permissions) {
-        super(fragment);
-        if (TextUtils.isEmpty(consumerKey) || TextUtils.isEmpty(consumerSecret) || TextUtils.isEmpty(permissions)) {
-            throw new IllegalArgumentException("TextUtils.isEmpty(ConsumerKey) || TextUtils.isEmpty(ConsumerSecret) || TextUtils.isEmpty(Permissions)");
-        }
-        this.consumerKey = consumerKey;
-        this.consumerSecret = consumerSecret;
-        this.redirectURL = redirectURL;
-        authURLString = LINKEDIN_API + "&client_id=" + consumerKey + "&scope=" + permissions +
-                         "&state=" + REQUEST_AUTH + "&redirect_uri=" + redirectURL;
-    }
-    /**
-     * Check is social network connected
-     * @return true if connected to LinkedIn social network and false if not
-     */
-    @Override
-    public boolean isConnected() {
-        String accessToken = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-        String requestToken = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_REQUEST_TOKEN, null);
-        Long expiresDate = mSharedPreferences.getLong(SAVE_STATE_KEY_EXPIRES_DATE, 0);
-        Boolean notExpired = expiresDate > 0 && Calendar.getInstance().getTimeInMillis() - 86400000 < expiresDate;
-        return accessToken != null && requestToken != null && notExpired;
-    }
-
-    /**
-     * Make login request - authorize in LinkedIn social network
-     * @param onLoginCompleteListener listener to trigger when Login complete
-     */
-    @Override
-    public void requestLogin(OnLoginCompleteListener onLoginCompleteListener) {
-        super.requestLogin(onLoginCompleteListener);
-        Intent intent = new Intent(mSocialNetworkManager.getActivity(), OAuthActivity.class)
-                .putExtra(OAuthActivity.PARAM_CALLBACK, redirectURL)
-                .putExtra(OAuthActivity.PARAM_URL_TO_LOAD, authURLString);
-        mSocialNetworkManager.getActivity().startActivityForResult(intent, REQUEST_AUTH);
-    }
-
-    /**
-     * Logout from LinkedIn social network
-     */
-    @Override
-    public void logout() {
-        mSharedPreferences.edit()
-                .remove(SAVE_STATE_KEY_OAUTH_TOKEN)
-                .remove(SAVE_STATE_KEY_OAUTH_REQUEST_TOKEN)
-                .remove(SAVE_STATE_KEY_EXPIRES_DATE)
-                .apply();
-    }
-
-    /**
-     * Get id of LinkedIn social network
-     * @return Social network id for LinkedIn = 2
-     */
-    @Override
-    public int getID() {
-        return ID;
-    }
-
-    /**
-     * Method to get AccessToken of LinkedIn social network
-     * @return {@link com.github.gorbin.asne.core.AccessToken}
-     */
-    @Override
-    public AccessToken getAccessToken() {
-        return new com.github.gorbin.asne.core.AccessToken(
-                mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null),
-                null
-        );
-    }
-
-    /**
-     * Request {@link com.github.gorbin.asne.core.AccessToken} of LinkedIn social network that you can get from onRequestAccessTokenCompleteListener
-     * @param onRequestAccessTokenCompleteListener listener for {@link com.github.gorbin.asne.core.AccessToken} request
-     */
-    @Override
-    public void requestAccessToken(OnRequestAccessTokenCompleteListener onRequestAccessTokenCompleteListener) {
-        super.requestAccessToken(onRequestAccessTokenCompleteListener);
-        ((OnRequestAccessTokenCompleteListener) mLocalListeners.get(REQUEST_ACCESS_TOKEN))
-                .onRequestAccessTokenComplete(getID(), new com.github.gorbin.asne.core.AccessToken(
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null),
-                        null
-                ));
-    }
-
-    /**
-     * Request current user {@link com.github.gorbin.asne.core.persons.SocialPerson}
-     * @param onRequestSocialPersonCompleteListener listener for {@link com.github.gorbin.asne.core.persons.SocialPerson} request
-     */
-    @Override
-    public void requestCurrentPerson(OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        super.requestCurrentPerson(onRequestSocialPersonCompleteListener);
-        executeRequest(new RequestGetSocialPersonAsyncTask(), null, REQUEST_GET_CURRENT_PERSON);
-    }
-
-    /**
-     * Request {@link com.github.gorbin.asne.core.persons.SocialPerson} by user id
-     * @param userID id of LinkedIn user
-     * @param onRequestSocialPersonCompleteListener listener for {@link com.github.gorbin.asne.core.persons.SocialPerson} request
-     */
-    @Override
-    public void requestSocialPerson(String userID, OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        super.requestSocialPerson(userID, onRequestSocialPersonCompleteListener);
-        if (TextUtils.isEmpty(userID)) {
-            throw new SocialNetworkException("userID can't be null or empty");
-        }
-        Bundle args = new Bundle();
-        args.putString(RequestGetSocialPersonAsyncTask.PARAM_USER_ID, userID);
-        executeRequest(new RequestGetSocialPersonAsyncTask(), args, REQUEST_GET_PERSON);
-    }
-
-    /**
-     * Not supported via LinkedIn api
-     * @throws com.github.gorbin.asne.core.SocialNetworkException
-     * @param userID array of user ids in social network
-     * @param onRequestSocialPersonsCompleteListener listener for request ArrayList of {@link com.github.gorbin.asne.core.persons.SocialPerson}
-     */
-    @Override
-    public void requestSocialPersons(String[] userID, OnRequestSocialPersonsCompleteListener onRequestSocialPersonsCompleteListener) {
-        throw new SocialNetworkException("requestSocialPersons isn't allowed for LinkedInSocialNetwork");
-    }
-
-    /**
-     * Request user {@link com.github.gorbin.asne.linkedin.LinkedInPerson} by userId - detailed user data
-     * @param userId id of LinkedIn user
-     * @param onRequestDetailedSocialPersonCompleteListener listener for {@link com.github.gorbin.asne.linkedin.LinkedInPerson} request
-     */
-    @Override
-    public void requestDetailedSocialPerson(String userId, OnRequestDetailedSocialPersonCompleteListener onRequestDetailedSocialPersonCompleteListener) {
-        super.requestDetailedSocialPerson(userId, onRequestDetailedSocialPersonCompleteListener);
-        Bundle args = new Bundle();
-        if(userId != null) {
-            args.putString(RequestGetDetailedPersonAsyncTask.PARAM_USER_ID, userId);
-        } else {
-            args.putString(RequestGetDetailedPersonAsyncTask.PARAM_USER_ID, "~");
-        }
-        executeRequest(new RequestGetDetailedPersonAsyncTask(), args, REQUEST_GET_DETAIL_PERSON);
-    }
-
-    private SocialPerson getSocialPerson(SocialPerson socialPerson, JSONObject jsonResponse) throws JSONException {
-        String firstName = null;
-        String lastName = null;
-        if(jsonResponse.has("id")) {
-            socialPerson.id = jsonResponse.getString("id");
-        }
-        if(jsonResponse.has("firstName")) {
-            firstName = jsonResponse.getString("firstName");
-        }
-        if(jsonResponse.has("lastName")) {
-            lastName = jsonResponse.getString("lastName");
-        }
-        socialPerson.name =  firstName + " " + lastName;
-        if(jsonResponse.has("pictureUrl")) {
-            socialPerson.avatarURL = jsonResponse.getString("pictureUrl");
-        }
-        if(jsonResponse.has("publicProfileUrl")) {
-            socialPerson.profileURL = jsonResponse.getString("publicProfileUrl");
-        }
-        if(jsonResponse.has("emailAddress")) {
-            socialPerson.email = jsonResponse.getString("emailAddress");
-        }
-        return socialPerson;
-    }
-
-    private LinkedInPerson getDetailedSocialPerson(LinkedInPerson linkedinPerson, JSONObject jsonResponse) throws JSONException {
-        getSocialPerson(linkedinPerson, jsonResponse);
-        if(jsonResponse.has("firstName")) {
-            linkedinPerson.firstName = jsonResponse.getString("firstName");
-        }
-        if(jsonResponse.has("lastName")) {
-            linkedinPerson.lastName = jsonResponse.getString("lastName");
-        }
-        if(jsonResponse.has("positions")) {
-            if(jsonResponse.getJSONObject("positions").has("values")){
-                if(jsonResponse.getJSONObject("positions").getJSONArray("values").getJSONObject(0).has("title")) {
-                    linkedinPerson.position = jsonResponse.getJSONObject("positions").getJSONArray("values").getJSONObject(0).getString("title");
-                }
-                if(jsonResponse.getJSONObject("positions").getJSONArray("values").getJSONObject(0).has("company")) {
-                    linkedinPerson.company = jsonResponse.getJSONObject("positions").getJSONArray("values").getJSONObject(0).getJSONObject("company").getString("name");
-                }
-            }
-        }
-        if(jsonResponse.has("headline")) {
-            linkedinPerson.headLine = jsonResponse.getString("headline");
-        }
-        if(jsonResponse.has("location")) {
-            if(jsonResponse.getJSONObject("location").has("name")){
-                linkedinPerson.locationDescription = jsonResponse.getJSONObject("location").getString("name");
-            }
-            if(jsonResponse.getJSONObject("location").has("country")){
-                linkedinPerson.countryCode = jsonResponse.getJSONObject("location").getJSONObject("country").getString("code");
-            }
-        }
-        if(jsonResponse.has("industry")) {
-            linkedinPerson.industry = jsonResponse.getString("industry");
-        }
-        if(jsonResponse.has("summary")) {
-            linkedinPerson.summary = jsonResponse.getString("summary");
-        }
-        String birthday = null;
-        if(jsonResponse.has("dateOfBirth")) {
-            if(jsonResponse.getJSONObject("dateOfBirth").has("day")){
-                birthday = jsonResponse.getJSONObject("dateOfBirth").getString("day");
-            }
-            if(jsonResponse.getJSONObject("dateOfBirth").has("month")){
-                birthday = birthday + "/" + jsonResponse.getJSONObject("dateOfBirth").getString("month");
-            }
-            if(jsonResponse.getJSONObject("dateOfBirth").has("year")){
-                birthday = birthday + "/" + jsonResponse.getJSONObject("dateOfBirth").getString("year");
-            }
-            linkedinPerson.birthday = birthday;
-        }
-        if(jsonResponse.has("mainAddress")) {
-            linkedinPerson.mainAddress = jsonResponse.getString("mainAddress");
-        }
-        if(jsonResponse.has("currentShare")) {
-            if(jsonResponse.getJSONObject("currentShare").has("content")){
-                if(jsonResponse.getJSONObject("currentShare").getJSONObject("content").has("description")){
-                    linkedinPerson.currentStatus = jsonResponse.getJSONObject("currentShare").getJSONObject("content").getString("description");
-                }
-            }
-        }
-        if(jsonResponse.has("interests")) {
-            linkedinPerson.interests = jsonResponse.getString("interests");
-        }
-        if(jsonResponse.has("specialties")) {
-            linkedinPerson.specialties = jsonResponse.getString("specialties");
-        }
-        if(jsonResponse.has("phoneNumbers")) {
-            if(jsonResponse.getJSONObject("phoneNumbers").has("values")){
-                if(jsonResponse.getJSONObject("phoneNumbers").getJSONArray("values").getJSONObject(0).has("phoneNumber")){
-                    linkedinPerson.phone = jsonResponse.getJSONObject("phoneNumbers").getJSONArray("values").getJSONObject(0).getString("phoneNumber");
-                }
-            }
-        }
-        return linkedinPerson;
-    }
-
-    /**
-     * Post message to social network
-     * @param message  message that should be shared
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostMessage(String message, OnPostingCompleteListener onPostingCompleteListener) {
-        super.requestPostMessage(message, onPostingCompleteListener);
-        Bundle args = new Bundle();
-        args.putString(RequestPostMessageAsyncTask.PARAM_MESSAGE, message);
-        executeRequest(new RequestPostMessageAsyncTask(), args, REQUEST_POST_MESSAGE);
-    }
-
-    /**
-     * Not supported via LinkedIn api
-     * @throws com.github.gorbin.asne.core.SocialNetworkException
-     * @param photo photo that should be shared
-     * @param message message that should be shared with photo
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostPhoto(File photo, String message, OnPostingCompleteListener onPostingCompleteListener) {
-        throw new SocialNetworkException("requestPostPhoto isn't allowed for LinkedInSocialNetwork");
-    }
-
-    /**
-     * Post link with comment to social network
-     * @param bundle bundle containing information that should be shared(Bundle constants in {@link com.github.gorbin.asne.core.SocialNetwork})
-     * @param message message that should be shared with bundle
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostLink(Bundle bundle, String message, OnPostingCompleteListener onPostingCompleteListener) {
-        super.requestPostLink(bundle, message, onPostingCompleteListener);
-        bundle.putString(RequestPostLinkAsyncTask.PARAM_MESSAGE, message);
-        executeRequest(new RequestPostLinkAsyncTask(), bundle, REQUEST_POST_LINK);
-    }
-
-    /**
-     * Not supported via LinkedIn api
-     * @throws com.github.gorbin.asne.core.SocialNetworkException
-     * @param bundle bundle containing information that should be shared(Bundle constants in {@link com.github.gorbin.asne.core.SocialNetwork})
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostDialog(Bundle bundle, OnPostingCompleteListener onPostingCompleteListener) {
-        throw new SocialNetworkException("requestPostDialog isn't allowed for LinkedInSocialNetwork");
-    }
-
-    /**
-     * Check if user by id is friend of current user
-     * @param userID user id that should be checked as friend of current user
-     * @param onCheckIsFriendCompleteListener listener for checking friend request
-     */
-    @Override
-    public void requestCheckIsFriend(String userID, OnCheckIsFriendCompleteListener onCheckIsFriendCompleteListener) {
-        super.requestCheckIsFriend(userID, onCheckIsFriendCompleteListener);
-        Bundle args = new Bundle();
-        args.putString(RequestCheckIsFriendAsyncTask.PARAM_USER_ID, userID);
-        executeRequest(new RequestCheckIsFriendAsyncTask(), args, REQUEST_CHECK_IS_FRIEND);
-    }
-
-    /**
-     * Get current user friends list
-     * @param onRequestGetFriendsCompleteListener listener for getting list of current user friends
-     */
-    @Override
-    public void requestGetFriends(OnRequestGetFriendsCompleteListener onRequestGetFriendsCompleteListener) {
-        super.requestGetFriends(onRequestGetFriendsCompleteListener);
-        executeRequest(new RequestGetFriendsAsyncTask(), null, REQUEST_GET_FRIENDS);
-    }
-
-    private void getAllFriends(String urlString, final ArrayList<SocialPerson> socialPersons, final ArrayList<String> ids, String token) throws Exception {
-        URL url = new URL(urlString);
-        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
-        checkConnectionErrors(connection);
-        InputStream inputStream = connection.getInputStream();
-        String response = streamToString(inputStream);
-        JSONObject jsonObject = (JSONObject) new JSONTokener(response).nextValue();
-
-        int jsonStart = 0, jsonCount = 0, jsonTotal = 0;
-        String nextToken = null;
-        if(jsonObject.has("_start")) {
-            jsonStart = jsonObject.getInt("_start");
-        }
-        if(jsonObject.has("_count")) {
-            jsonCount = jsonObject.getInt("_count");
-        }
-        if(jsonObject.has("_total")) {
-            jsonTotal = jsonObject.getInt("_total");
-        }
-        int start = jsonStart + jsonCount;
-        if(jsonTotal > 0 && start > 0 && jsonCount > 0 && jsonTotal > start) {
-            nextToken = LINKEDIN_V1_API + "/people/~/connections"+ RequestGetFriendsAsyncTask.fields
-                    + "?oauth2_access_token=" + token + FORMAT_JSON + "&start=" + start
-                    + "&count=" + RequestGetFriendsAsyncTask.count;
-        }
-        JSONArray jsonResponse = jsonObject.getJSONArray("values");
-        for(int i = 0; i < jsonResponse.length(); i++){
-            SocialPerson socialPerson = new SocialPerson();
-            getSocialPerson(socialPerson, jsonResponse.getJSONObject(i));
-            socialPersons.add(socialPerson);
-            ids.add(jsonResponse.getJSONObject(i).getString("id"));
-        }
-
-        if((nextToken != null) && (!TextUtils.isEmpty(nextToken))){
-            getAllFriends(nextToken, socialPersons, ids, token);
-        }
-    }
-
-    /**
-     * Not supported via LinkedIn api
-     * @param userID id of user that should be invited
-     * @param onRequestAddFriendCompleteListener listener for invite result
-     */
-    @Override
-    public void requestAddFriend(String userID, OnRequestAddFriendCompleteListener onRequestAddFriendCompleteListener) {
-        throw new SocialNetworkException("requestAddFriend isn't allowed for LinkedInSocialNetwork");
-    }
-
-    /**
-     * Not supported via LinkedIn api
-     * @param userID user id that should be removed from friends
-     * @param onRequestRemoveFriendCompleteListener listener to remove friend request response
-     */
-    @Override
-    public void requestRemoveFriend(String userID, OnRequestRemoveFriendCompleteListener onRequestRemoveFriendCompleteListener) {
-        throw new SocialNetworkException("requestRemoveFriend isn't allowed for LinkedInSocialNetwork");
-    }
-
-    /**
-     * Overrided for LinkedIn support
-     * @param requestCode The integer request code originally supplied to startActivityForResult(), allowing you to identify who this result came from.
-     * @param resultCode The integer result code returned by the child activity through its setResult().
-     * @param data An Intent, which can return result data to the caller (various data can be attached to Intent "extras").
-     */
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        int sanitizedRequestCode = requestCode % 0x10000;
-        if (sanitizedRequestCode != REQUEST_AUTH) return;
-        super.onActivityResult(requestCode, resultCode, data);
-
-        Uri uri = data != null ? data.getData() : null;
-
-        if (uri != null && uri.toString().startsWith(redirectURL.toLowerCase())) {
-            String parts[] = uri.toString().split("=");
-            String verifier = parts[1];
-            verifier = verifier.substring(0, verifier.indexOf("&"));
-            RequestLogin2AsyncTask requestLogin2AsyncTask = new RequestLogin2AsyncTask();
-            mRequests.put(REQUEST_LOGIN2, requestLogin2AsyncTask);
-            Bundle args = new Bundle();
-            args.putString(RequestLogin2AsyncTask.PARAM_VERIFIER, verifier);
-            requestLogin2AsyncTask.execute(args);
-        } else {
-            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN, "incorrect URI returned: " + uri, null);
-                mLocalListeners.remove(REQUEST_LOGIN);
-            }
-        }
-    }
-
-    /**
-     * Cancel login request
-     */
-    @Override
-    public void cancelLoginRequest() {
-        super.cancelLoginRequest();
-    }
-
-    private String streamToString(InputStream p_is) {
-        try {
-            BufferedReader m_br;
-            StringBuilder m_outString = new StringBuilder();
-            m_br = new BufferedReader(new InputStreamReader(p_is));
-            String m_read = m_br.readLine();
-            while(m_read != null) {
-                m_outString.append(m_read);
-                m_read =m_br.readLine();
-            }
-            return m_outString.toString();
-        }
-        catch (Exception p_ex) {
-            p_ex.printStackTrace();
-            return null;
-        }
-    }
-
-    private String checkInputStream(HttpURLConnection connection){
-        String code = null, errorMessage = null;
-        InputStream inputStream = connection.getErrorStream();
-        String response = streamToString(inputStream);
-        try {
-            JSONObject jsonResponse = (JSONObject) new JSONTokener(response).nextValue();
-            if(jsonResponse.has("status")) {
-                code = jsonResponse.getString("status");
-            }
-            if(jsonResponse.has("message")) {
-                errorMessage = jsonResponse.getString("message");
-            }
-            return "ERROR CODE: " + code + " ERROR MESSAGE: " + errorMessage;
-        } catch (JSONException e) {
-            return e.getMessage();
-        }
-    }
-
-    private void checkConnectionErrors(HttpsURLConnection connection) throws Exception {
-        int responseCode;
-        try {
-            responseCode = connection.getResponseCode();
-        } catch (IOException e) {
-            responseCode = connection.getResponseCode();
-        }
-        if(responseCode >= 400){
-            if(responseCode == 401) {
-                mSharedPreferences.edit()
-                        .remove(SAVE_STATE_KEY_OAUTH_TOKEN)
-                        .remove(SAVE_STATE_KEY_OAUTH_REQUEST_TOKEN)
-                        .remove(SAVE_STATE_KEY_EXPIRES_DATE)
-                        .apply();
-            }
-            throw new Exception(checkInputStream(connection));
-        }
-    }
-
-    private void checkExeption(Exception e, Bundle result){
-        result.putString(SocialNetworkAsyncTask.RESULT_ERROR, e.getMessage());
-    }
-
-    private class RequestLogin2AsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_VERIFIER = "Login2AsyncTask.PARAM_VERIFIER";
-
-        private static final String RESULT_ACCESS_TOKEN = "Login2AsyncTask.RESULT_TOKEN";
-        private static final String RESULT_REQUEST_TOKEN = "Login2AsyncTask.RESULT_SECRET";
-        private static final String RESULT_EXPIRES_DATE = "Login2AsyncTask.RESULT_EXPIRES_DATE";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            String verifier = params[0].getString(PARAM_VERIFIER);
-
-            Bundle result = new Bundle();
-            HttpsURLConnection httpsURLConnection = null;
-            try
-            {
-                String tokenURLString = LINKEDIN_TOKEN + "&code=" + verifier + "&redirect_uri=" + redirectURL +
-                        "&client_id=" + consumerKey + "&client_secret=" + consumerSecret;
-
-                URL url = new URL(tokenURLString);
-                httpsURLConnection = (HttpsURLConnection) url.openConnection();
-                httpsURLConnection.setRequestMethod("POST");
-
-                String response = streamToString(httpsURLConnection.getInputStream());
-                JSONObject jsonObject = (JSONObject) new JSONTokener(response).nextValue();
-
-                String accessToken = jsonObject.getString("access_token");
-                int expiresIn = jsonObject.getInt("expires_in");
-                Calendar calendar = Calendar.getInstance();
-                calendar.add(Calendar.SECOND, expiresIn);
-                long expireDate = calendar.getTimeInMillis();
-                result.putString(RESULT_ACCESS_TOKEN, accessToken);
-                result.putString(RESULT_REQUEST_TOKEN, verifier);
-                result.putLong(RESULT_EXPIRES_DATE, expireDate);
-
-            } catch (Exception e) {
-                String error;
-                if(e == null){
-                    InputStream inputStream = httpsURLConnection.getErrorStream();
-                    error = streamToString(inputStream);
-                } else {
-                    error = e.getMessage();
-                }
-                result.putString(RESULT_ERROR, error);
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_LOGIN)){//&&!checkRequests()) {
-                return;
-            }
-
-            mSharedPreferences.edit()
-                    .putString(SAVE_STATE_KEY_OAUTH_TOKEN, result.getString(RESULT_ACCESS_TOKEN))
-                    .putString(SAVE_STATE_KEY_OAUTH_REQUEST_TOKEN, result.getString(RESULT_REQUEST_TOKEN))
-                    .putLong(SAVE_STATE_KEY_EXPIRES_DATE, result.getLong(RESULT_EXPIRES_DATE))
-                    .apply();
-            mRequests.remove(REQUEST_LOGIN2);
-            if (mLocalListeners.get(REQUEST_LOGIN) != null){// && !restart) {
-                ((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
-            }
-        }
-    }
-
-    private class RequestGetSocialPersonAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "RequestGetPersonAsyncTask.PARAM_USER_ID";
-        public static final String CURRENT = "RequestGetPersonAsyncTask.CURRENT";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle(args);
-            String userID;
-            String fields = ":(id,first-name,last-name,picture-url,email-address,public-profile-url)";
-            String token = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-            if (args.containsKey(PARAM_USER_ID)) {
-                userID = args.getString(PARAM_USER_ID);
-                result.putBoolean(CURRENT, false);
-            } else {
-                userID = "~";
-                result.putBoolean(CURRENT, true);
-            }
-            String urlString = LINKEDIN_V1_API + "/people/"+ userID + fields
-                    +"?oauth2_access_token=" + token + FORMAT_JSON;
-            try {
-                URL url = new URL(urlString);
-                HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
-                connection.setInstanceFollowRedirects(true);
-                checkConnectionErrors(connection);
-
-                InputStream inputStream = connection.getInputStream();
-
-                String response = streamToString(inputStream);
-                JSONObject jsonObject = (JSONObject) new JSONTokener(response).nextValue();
-
-                SocialPerson socialPerson = new SocialPerson();
-                getSocialPerson(socialPerson, jsonObject);
-                result.putParcelable(REQUEST_GET_PERSON, socialPerson);
-            } catch (Exception e) {
-                checkExeption(e, result);
-            }
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            SocialPerson socialPerson = result.getParcelable(REQUEST_GET_PERSON);
-            if(result.containsKey(CURRENT) && result.getBoolean(CURRENT)){
-                if (!handleRequestResult(result, REQUEST_GET_CURRENT_PERSON)) return;
-                ((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_CURRENT_PERSON))
-                        .onRequestSocialPersonSuccess(getID(), socialPerson);
-            } else {
-                if (!handleRequestResult(result, REQUEST_GET_PERSON)) return;
-                ((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_PERSON))
-                        .onRequestSocialPersonSuccess(getID(), socialPerson);
-            }
-        }
-    }
-
-    private class RequestGetDetailedPersonAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "RequestGetPersonAsyncTask.PARAM_USER_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle(args);
-            String userID = args.getString(PARAM_USER_ID);
-            String token = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-            String fields = ":(id,first-name,last-name,headline,industry,date-of-birth,summary," +
-                    "picture-url,email-address,public-profile-url,positions,location,main-address," +
-                    "current-share,interests,specialties,phone-numbers,skills)";
-
-            String urlString = LINKEDIN_V1_API + "/people/"+ userID + fields
-                    +"?oauth2_access_token=" + token + FORMAT_JSON;
-            try {
-                URL url = new URL(urlString);
-                HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
-                checkConnectionErrors(connection);
-
-                InputStream inputStream = connection.getInputStream();
-                String response = streamToString(inputStream);
-                JSONObject jsonObject = (JSONObject) new JSONTokener(response).nextValue();
-
-                LinkedInPerson linkedinPerson = new LinkedInPerson();
-                getDetailedSocialPerson(linkedinPerson, jsonObject);
-                result.putParcelable(REQUEST_GET_DETAIL_PERSON, linkedinPerson);
-            } catch (Exception e) {
-                checkExeption(e, result);
-            }
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_GET_DETAIL_PERSON)) return;
-            LinkedInPerson linkedinPerson = result.getParcelable(REQUEST_GET_DETAIL_PERSON);
-            ((OnRequestDetailedSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_DETAIL_PERSON))
-                    .onRequestDetailedSocialPersonSuccess(getID(), linkedinPerson);
-        }
-    }
-
-
-    private class RequestPostMessageAsyncTask extends SocialNetworkAsyncTask {
-        private static final String PARAM_MESSAGE = "PARAM_MESSAGE";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            String message = params[0].getString(PARAM_MESSAGE);
-            Bundle result = new Bundle();
-            String token = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-            String urlString = LINKEDIN_V1_API + "/people/~/shares?oauth2_access_token=" + token;
-            String xml;
-            if(message != null && message.length()>0) {
-                xml = MessageFormat.format(SHARE, MessageFormat.format(COMMENT, message));
-            } else {
-                result.putString(RESULT_ERROR, "Message can't be null");
-                return result;
-            }
-
-            try {
-                URL url = new URL(urlString);
-                HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
-                connection.setInstanceFollowRedirects(true);
-                connection.setRequestMethod("POST");
-                connection.setDoInput(true);
-                connection.setDoOutput(true);
-                connection.setRequestProperty("Content-Type", "application/xml");
-                OutputStreamWriter outputStreamWriter = new OutputStreamWriter(connection.getOutputStream());
-                outputStreamWriter.write(xml);
-                outputStreamWriter.flush();
-                checkConnectionErrors(connection);
-            } catch (Exception e) {
-                checkExeption(e, result);
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_POST_MESSAGE)) return;
-
-            ((OnPostingCompleteListener) mLocalListeners.get(REQUEST_POST_MESSAGE))
-                    .onPostSuccessfully(getID());
-        }
-    }
-
-    private class RequestPostLinkAsyncTask extends SocialNetworkAsyncTask {
-        private static final String PARAM_MESSAGE = "PARAM_MESSAGE";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            String message = params[0].getString(PARAM_MESSAGE);
-            if(message == null) {message = "";}
-            String link = params[0].getString(BUNDLE_LINK);
-            String title = params[0].getString(BUNDLE_NAME);
-            String description = params[0].getString(BUNDLE_MESSAGE);
-            if(description == null) {description = "";}
-            String imageUrl = params[0].getString(BUNDLE_PICTURE);
-            if(imageUrl == null) {imageUrl = "";}
-            Bundle result = new Bundle();
-
-            String token = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-            String urlString = LINKEDIN_V1_API + "/people/~/shares?oauth2_access_token=" + token;
-            String comment = MessageFormat.format(COMMENT, message);
-            String content;
-            if(link != null && link.length()>0 && title != null && title.length()>0) {
-                content = MessageFormat.format(CONTENT, title, description, link, imageUrl);
-            } else {
-                result.putString(RESULT_ERROR, "Message can't be null");
-                return result;
-            }
-            String xml =  MessageFormat.format(SHARE, comment + content);
-
-            try {
-                URL url = new URL(urlString);
-                HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
-                connection.setInstanceFollowRedirects(true);
-                connection.setRequestMethod("POST");
-                connection.setDoInput(true);
-                connection.setDoOutput(true);
-                connection.setRequestProperty("Content-Type", "application/xml");
-                OutputStreamWriter outputStreamWriter = new OutputStreamWriter(connection.getOutputStream());
-                outputStreamWriter.write(xml);
-                outputStreamWriter.flush();
-                checkConnectionErrors(connection);
-            } catch (Exception e) {
-                checkExeption(e, result);
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_POST_LINK)) return;
-
-            ((OnPostingCompleteListener) mLocalListeners.get(REQUEST_POST_LINK))
-                    .onPostSuccessfully(getID());
-        }
-    }
-
-    private class RequestCheckIsFriendAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "PARAM_USER_ID";
-        private static final String RESULT_IS_FRIEND = "RESULT_IS_FRIEND";
-        private static final String RESULT_REQUESTED_ID = "RESULT_REQUESTED_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            String userID = params[0].getString(PARAM_USER_ID);
-
-            Bundle result = new Bundle();
-            result.putString(RESULT_REQUESTED_ID, userID);
-
-            String token = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-            String urlString = LINKEDIN_V1_API + "/people/~/connections"+ RequestGetFriendsAsyncTask.fields
-                    +"?oauth2_access_token=" + token + FORMAT_JSON+ "&start=0"
-                    + "&count=" + RequestGetFriendsAsyncTask.count;
-            ArrayList<SocialPerson> socialPersons = new ArrayList<SocialPerson>();
-            ArrayList<String> ids = new ArrayList<String>();
-            try {
-                getAllFriends(urlString, socialPersons, ids, token);
-
-                if (socialPersons != null && socialPersons.size() > 0) {
-                    for (SocialPerson socialPerson : socialPersons) {
-                        if (socialPerson.id.equals(userID)) {
-                            result.putBoolean(RESULT_IS_FRIEND, true);
-                            return result;
-                        }
-                    }
-                }
-
-                result.putBoolean(RESULT_IS_FRIEND, false);
-            } catch (Exception e) {
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_CHECK_IS_FRIEND,
-                    result.getString(RESULT_REQUESTED_ID))) return;
-
-            ((OnCheckIsFriendCompleteListener) mLocalListeners.get(REQUEST_CHECK_IS_FRIEND))
-                    .onCheckIsFriendComplete(
-                            getID(),
-                            result.getString(RESULT_REQUESTED_ID),
-                            result.getBoolean(RESULT_IS_FRIEND)
-                    );
-            mLocalListeners.remove(REQUEST_CHECK_IS_FRIEND);
-        }
-    }
-
-    private class RequestGetFriendsAsyncTask extends SocialNetworkAsyncTask {
-        public static final String RESULT_GET_FRIENDS = "RESULT_GET_FRIENDS";
-        public static final String RESULT_GET_FRIENDS_ID = "RESULT_GET_FRIENDS_ID";
-        private static final String fields = ":(id,first-name,last-name,picture-url,email-address,public-profile-url)";
-        private static final int count = 500;
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle result = new Bundle();
-            String token = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-            String urlString = LINKEDIN_V1_API + "/people/~/connections"+ fields
-                    +"?oauth2_access_token=" + token + FORMAT_JSON+ "&start=0"
-                    + "&count=" + count;
-            ArrayList<SocialPerson> socialPersons = new ArrayList<SocialPerson>();
-            ArrayList<String> ids = new ArrayList<String>();
-            try {
-                getAllFriends(urlString, socialPersons, ids, token);
-                result.putStringArray(RESULT_GET_FRIENDS_ID, ids.toArray(new String[ids.size()]));
-                result.putParcelableArrayList(RESULT_GET_FRIENDS, socialPersons);
-            } catch (Exception e) {
-                checkExeption(e, result);
-            }
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_GET_FRIENDS,
-                    result.getStringArray(RESULT_GET_FRIENDS_ID))) return;
-
-            ((OnRequestGetFriendsCompleteListener) mLocalListeners.get(REQUEST_GET_FRIENDS))
-                    .OnGetFriendsIdComplete(getID(), result.getStringArray(RESULT_GET_FRIENDS_ID));
-            ArrayList<SocialPerson> socialPersons = result.getParcelableArrayList(RESULT_GET_FRIENDS);
-            ((OnRequestGetFriendsCompleteListener) mLocalListeners.get(REQUEST_GET_FRIENDS))
-                    .OnGetFriendsComplete(getID(), socialPersons);
-        }
-    }
-
-}
diff --git a/odnoklassniki/.gitignore b/odnoklassniki/.gitignore
deleted file mode 100644
index 796b96d..0000000
--- a/odnoklassniki/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/build
diff --git a/odnoklassniki/build.gradle b/odnoklassniki/build.gradle
deleted file mode 100644
index c3b58cf..0000000
--- a/odnoklassniki/build.gradle
+++ /dev/null
@@ -1,27 +0,0 @@
-apply plugin: 'com.android.library'
-apply from: '../maven_push.gradle'
-
-android {
-    compileSdkVersion 21
-    buildToolsVersion "21.1.1"
-
-    defaultConfig {
-        applicationId "com.github.gorbin.asne.odnoklassniki"
-        minSdkVersion 10
-        targetSdkVersion 21
-        versionCode 1
-        versionName "1.0"
-    }
-    buildTypes {
-        release {
-            runProguard false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-}
-
-dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    compile 'com.android.support:appcompat-v7:21.0.2'
-    compile project(':ASNECore')
-}
diff --git a/odnoklassniki/gradle.properties b/odnoklassniki/gradle.properties
deleted file mode 100644
index 76cfd32..0000000
--- a/odnoklassniki/gradle.properties
+++ /dev/null
@@ -1,3 +0,0 @@
-POM_NAME=ASNE Odnoklassniki
-POM_ARTIFACT_ID=asne-odnoklassniki
-POM_PACKAGING=aar
\ No newline at end of file
diff --git a/odnoklassniki/libs/odnoklassniki-android-sdk.jar b/odnoklassniki/libs/odnoklassniki-android-sdk.jar
deleted file mode 100644
index 94c3860..0000000
Binary files a/odnoklassniki/libs/odnoklassniki-android-sdk.jar and /dev/null differ
diff --git a/odnoklassniki/proguard-rules.pro b/odnoklassniki/proguard-rules.pro
deleted file mode 100644
index 92ddeef..0000000
--- a/odnoklassniki/proguard-rules.pro
+++ /dev/null
@@ -1,17 +0,0 @@
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in D:/programs/AndroidStudio/sdk/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the proguardFiles
-# directive in build.gradle.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/odnoklassniki/src/main/AndroidManifest.xml b/odnoklassniki/src/main/AndroidManifest.xml
deleted file mode 100644
index b469958..0000000
--- a/odnoklassniki/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.github.gorbin.asne.odnoklassniki"
-    xmlns:tools="http://schemas.android.com/tools">
-    <!--<uses-sdk tools:node="replace" />-->
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
-    <application android:allowBackup="true">
-
-    </application>
-
-</manifest>
diff --git a/odnoklassniki/src/main/java/com/github/gorbin/asne/odnoklassniki/OkPerson.java b/odnoklassniki/src/main/java/com/github/gorbin/asne/odnoklassniki/OkPerson.java
deleted file mode 100644
index 1e2b195..0000000
--- a/odnoklassniki/src/main/java/com/github/gorbin/asne/odnoklassniki/OkPerson.java
+++ /dev/null
@@ -1,178 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2014 Evgeny Gorbin
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- *******************************************************************************/
-package com.github.gorbin.asne.odnoklassniki;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.github.gorbin.asne.core.persons.SocialPerson;
-
-/**
- * Class for detailed Odnoklassniki social person
- *
- * @author Evgeny Gorbin (gorbin.e.o@gmail.com)
- */
-public class OkPerson extends SocialPerson implements Parcelable {
-
-    public static final Creator<OkPerson> CREATOR
-            = new Creator<OkPerson>() {
-        public OkPerson createFromParcel(Parcel in) {
-            return new OkPerson(in);
-        }
-
-        public OkPerson[] newArray(int size) {
-            return new OkPerson[size];
-        }
-    };
-
-    /*** First name of social person*/
-	public String firstName;
-    /*** Last name of social person*/
-	public String lastName;
-    /*** Sex of social person. female, male, not presented. */
-	public String gender;
-    /*** Birthday of social person*/
-	public String birthday;
-    /*** Age of social person*/
-	public String age;
-    /*** Locale of social person*/
-	public String locale;
-    /*** Check if there is email*/
-	public boolean has_email;
-    /*** Current status of social person*/
-	public String current_status;
-    /*** Check online status of social person*/
-	public String online;
-    /*** City of social person from contacts*/
-	public String city;
-    /*** Country of social person from contacts*/
-	public String country; 
-	
-    public OkPerson() {
-
-    }
-
-    private OkPerson(Parcel in) {
-
-        firstName = in.readString();
-        lastName = in.readString();
-        gender = in.readString();
-        birthday = in.readString();
-        age = in.readString();
-        locale = in.readString();
-        has_email = in.readByte() != 0x00;
-        current_status = in.readString();
-        online = in.readString();
-        city = in.readString();
-        country = in.readString();
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        dest.writeString(firstName);
-        dest.writeString(lastName);
-        dest.writeString(gender);
-        dest.writeString(birthday);
-        dest.writeString(age);
-        dest.writeString(locale);
-        dest.writeByte((byte) (has_email ? 0x01 : 0x00));
-        dest.writeString(current_status);
-        dest.writeString(online);
-        dest.writeString(city);
-        dest.writeString(country);
-    }
-
-    @Override
-    public boolean equals(Object object) {
-        if (this == object) return true;
-        if (object == null || getClass() != object.getClass()) return false;
-        if (!super.equals(object)) return false;
-
-        OkPerson okPerson = (OkPerson) object;
-
-        if (has_email != okPerson.has_email) return false;
-        if (online != null ? !online.equals(okPerson.online) : okPerson.online != null)
-            return false;
-        if (age != null ? !age.equals(okPerson.age) : okPerson.age != null) return false;
-        if (birthday != null ? !birthday.equals(okPerson.birthday) : okPerson.birthday != null)
-            return false;
-        if (city != null ? !city.equals(okPerson.city) : okPerson.city != null) return false;
-        if (country != null ? !country.equals(okPerson.country) : okPerson.country != null)
-            return false;
-        if (current_status != null ? !current_status.equals(okPerson.current_status) : okPerson.current_status != null)
-            return false;
-        if (firstName != null ? !firstName.equals(okPerson.firstName) : okPerson.firstName != null)
-            return false;
-        if (gender != null ? !gender.equals(okPerson.gender) : okPerson.gender != null)
-            return false;
-        if (lastName != null ? !lastName.equals(okPerson.lastName) : okPerson.lastName != null)
-            return false;
-        if (locale != null ? !locale.equals(okPerson.locale) : okPerson.locale != null)
-            return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = super.hashCode();
-        result = 31 * result + (firstName != null ? firstName.hashCode() : 0);
-        result = 31 * result + (lastName != null ? lastName.hashCode() : 0);
-        result = 31 * result + (gender != null ? gender.hashCode() : 0);
-        result = 31 * result + (birthday != null ? birthday.hashCode() : 0);
-        result = 31 * result + (age != null ? age.hashCode() : 0);
-        result = 31 * result + (locale != null ? locale.hashCode() : 0);
-        result = 31 * result + (has_email ? 1 : 0);
-        result = 31 * result + (current_status != null ? current_status.hashCode() : 0);
-        result = 31 * result + (online != null ? online.hashCode() : 0);
-        result = 31 * result + (city != null ? city.hashCode() : 0);
-        result = 31 * result + (country != null ? country.hashCode() : 0);
-        return result;
-    }
-
-    @Override
-    public String toString() {
-        return "OkPerson{" +
-				"id='" + id + '\'' +
-                ", name='" + name + '\'' +
-                ", avatarURL='" + avatarURL + '\'' +
-                ", profileURL='" + profileURL + '\'' +
-                ", email='" + email + '\'' +
-                ", firstName='" + firstName + '\'' +
-                ", lastName='" + lastName + '\'' +
-                ", gender='" + gender + '\'' +
-                ", birthday='" + birthday + '\'' +
-                ", age='" + age + '\'' +
-                ", locale='" + locale + '\'' +
-                ", has_email=" + has_email +
-                ", current_status='" + current_status + '\'' +
-                ", online=" + online +
-                ", city='" + city + '\'' +
-                ", country='" + country + '\'' +
-                '}';
-    }
-}
diff --git a/odnoklassniki/src/main/java/com/github/gorbin/asne/odnoklassniki/OkSocialNetwork.java b/odnoklassniki/src/main/java/com/github/gorbin/asne/odnoklassniki/OkSocialNetwork.java
deleted file mode 100644
index ad39a78..0000000
--- a/odnoklassniki/src/main/java/com/github/gorbin/asne/odnoklassniki/OkSocialNetwork.java
+++ /dev/null
@@ -1,795 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2014 Evgeny Gorbin
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- *******************************************************************************/
-package com.github.gorbin.asne.odnoklassniki;
-
-import android.content.Context;
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.text.TextUtils;
-
-import com.github.gorbin.asne.core.AccessToken;
-import com.github.gorbin.asne.core.OAuthSocialNetwork;
-import com.github.gorbin.asne.core.SocialNetworkAsyncTask;
-import com.github.gorbin.asne.core.SocialNetworkException;
-import com.github.gorbin.asne.core.listener.OnCheckIsFriendCompleteListener;
-import com.github.gorbin.asne.core.listener.OnLoginCompleteListener;
-import com.github.gorbin.asne.core.listener.OnPostingCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestAccessTokenCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestAddFriendCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestDetailedSocialPersonCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestGetFriendsCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestRemoveFriendCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestSocialPersonCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestSocialPersonsCompleteListener;
-import com.github.gorbin.asne.core.persons.SocialPerson;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.json.JSONTokener;
-
-import java.io.File;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Map;
-
-import ru.ok.android.sdk.Odnoklassniki;
-import ru.ok.android.sdk.OkTokenRequestListener;
-
-/**
- * Class for OK social network integration
- *
- * @author Evgeny Gorbin (gorbin.e.o@gmail.com)
- */
-public class OkSocialNetwork extends OAuthSocialNetwork implements OkTokenRequestListener {
-    /*** Social network ID in asne modules, should be unique*/
-    public static final int ID = 6;
-    private static final String FRIENDS = "OkSocialNetwork.FRIENDS";
-    private static final String USERID = "OkSocialNetwork.USERID";
-    private static final String TOKEN = "OkSocialNetwork.TOKEN";
-    private static final String ERROR_CODE = "OkSocialNetwork.ERROR_CODE";
-    private Activity activity;
-    private String userId;
-    private Bundle requestBundle;
-	private Odnoklassniki mOdnoklassniki;
-    private  String[] permissions;
-    private String appId;
-    private String appPublicKey;
-    private String appSecretKey;
-
-    //TODO: refactor to use an init that is shared by constructors
-    public OkSocialNetwork(Fragment fragment, String appId, String appPublicKey, String appSecretKey, String[] permissions) {
-        super(fragment);
-        if (TextUtils.isEmpty(appId) || TextUtils.isEmpty(appPublicKey) || TextUtils.isEmpty(appSecretKey)) {
-            throw new IllegalArgumentException("TextUtils.isEmpty(appId) || TextUtils.isEmpty(appPublicKey) || TextUtils.isEmpty(appSecretKey)");
-        }
-        this.appId = appId;
-        this.appPublicKey = appPublicKey;
-        this.appSecretKey = appSecretKey;
-        this.permissions = permissions;
-        activity = mSocialNetworkManager.getActivity();
-        mOdnoklassniki = Odnoklassniki.createInstance(activity, appId, appSecretKey, appPublicKey);
-        mOdnoklassniki.setTokenRequestListener(this);
-    }
-
-    public OkSocialNetwork(Fragment fragment, Context context, String appId, String appPublicKey, String appSecretKey, String[] permissions) {
-        super(fragment, context);
-        if (TextUtils.isEmpty(appId) || TextUtils.isEmpty(appPublicKey) || TextUtils.isEmpty(appSecretKey)) {
-            throw new IllegalArgumentException("TextUtils.isEmpty(appId) || TextUtils.isEmpty(appPublicKey) || TextUtils.isEmpty(appSecretKey)");
-        }
-        this.appId = appId;
-        this.appPublicKey = appPublicKey;
-        this.appSecretKey = appSecretKey;
-        this.permissions = permissions;
-        activity = mSocialNetworkManager.getActivity();
-        mOdnoklassniki = Odnoklassniki.createInstance(activity, appId, appSecretKey, appPublicKey);
-        mOdnoklassniki.setTokenRequestListener(this);
-    }
-
-    /**
-     * Called after successful authorization
-     * @param token token string of OK social network
-     */
-    @Override
-    public void onSuccess(String token) {
-        mSharedPreferences.edit()
-                .putString(TOKEN, token)
-                .apply();
-        if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-            ((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
-            mLocalListeners.remove(REQUEST_LOGIN);
-            return;
-        }
-
-        if (mLocalListeners.containsKey(REQUEST_GET_DETAIL_PERSON)) {
-            mRequests.remove(REQUEST_GET_DETAIL_PERSON);
-            executeRequest(new RequestGetDetailedPersonAsyncTask(), requestBundle, REQUEST_GET_DETAIL_PERSON);
-        } else if (mLocalListeners.containsKey(REQUEST_GET_PERSON)) {
-            mRequests.remove(REQUEST_GET_PERSON);
-            executeRequest(new RequestGetSocialPersonAsyncTask(), requestBundle, REQUEST_GET_PERSON);
-        } else if(mLocalListeners.containsKey(REQUEST_GET_CURRENT_PERSON)){
-            mRequests.remove(REQUEST_GET_CURRENT_PERSON);
-            executeRequest(new RequestGetSocialPersonAsyncTask(), requestBundle, REQUEST_GET_CURRENT_PERSON);
-        } else if(mLocalListeners.containsKey(REQUEST_GET_PERSONS)){
-            mRequests.remove(REQUEST_GET_PERSONS);
-            executeRequest(new RequestSocialPersonsAsyncTask(), requestBundle, REQUEST_GET_PERSONS);
-        } else if (mLocalListeners.containsKey(REQUEST_POST_LINK)) {
-            mRequests.remove(REQUEST_POST_LINK);
-            executeRequest(new RequestPostLinkAsyncTask(), requestBundle, REQUEST_POST_LINK);
-        } else if(mLocalListeners.containsKey(REQUEST_CHECK_IS_FRIEND)){
-            mRequests.remove(REQUEST_CHECK_IS_FRIEND);
-            executeRequest(new RequestCheckIsFriendAsyncTask(), requestBundle, REQUEST_CHECK_IS_FRIEND);
-        } else if(mLocalListeners.containsKey(REQUEST_GET_FRIENDS)){
-            mRequests.remove(REQUEST_GET_FRIENDS);
-            executeRequest(new RequestGetFriendsAsyncTask(), requestBundle, REQUEST_GET_FRIENDS);
-        } else if (mLocalListeners.containsKey(REQUEST_ACCESS_TOKEN)) {
-            mRequests.remove(REQUEST_ACCESS_TOKEN);
-            String accessToken = mSharedPreferences.getString(TOKEN, null);
-            ((OnRequestAccessTokenCompleteListener) mLocalListeners.get(REQUEST_ACCESS_TOKEN))
-                    .onRequestAccessTokenComplete(getID(), new AccessToken(accessToken, null));
-        }
-    }
-
-    /**
-     * Called after error authorization
-     */
-    @Override
-    public void onError() {
-        mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN, "OK Login Error!", null);
-    }
-
-    /**
-     * Called after cancel authorization
-     */
-    @Override
-    public void onCancel() {
-        mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN, "ОK Login cancaled!", null);
-    }
-
-    /**
-     * Overrided for OK support
-     * @param requestCode The integer request code originally supplied to startActivityForResult(), allowing you to identify who this result came from.
-     * @param resultCode The integer result code returned by the child activity through its setResult().
-     * @param data An Intent, which can return result data to the caller (various data can be attached to Intent "extras").
-     */
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-    }
-
-    /**
-     * Check is social network connected
-     * @return true if connected to OK social network and false if not
-     */
-    @Override
-    public boolean isConnected() {
-        String accessToken = mSharedPreferences.getString(TOKEN, null);
-        return accessToken != null;
-    }
-
-    /**
-     * Make login request - authorize in OK social network
-     * @param onLoginCompleteListener listener to trigger when Login complete
-     */
-    @Override
-    public void requestLogin(OnLoginCompleteListener onLoginCompleteListener) {
-        super.requestLogin(onLoginCompleteListener);
-		mOdnoklassniki.requestAuthorization(activity, false, permissions);
-    }
-
-    /**
-     * Logout from OK social network
-     */
-    @Override
-    public void logout() {
-        mSharedPreferences.edit()
-                .remove(TOKEN)
-                .apply();
-        mOdnoklassniki.clearTokens(activity);
-//        mOdnoklassniki.removeTokenRequestListener();
-    }
-
-    /**
-     * Get id of VK social network
-     * @return Social network id for VK = 6
-     */
-    @Override
-    public int getID() {
-        return ID;
-    }
-
-    /**
-     * Method to get AccessToken of OK social network
-     * @return {@link com.github.gorbin.asne.core.AccessToken}
-     */
-    @Override
-    public AccessToken getAccessToken() {
-        String accessToken = mSharedPreferences.getString(TOKEN, null);
-        return new AccessToken(accessToken, null);
-    }
-
-    /**
-     * Request {@link com.github.gorbin.asne.core.AccessToken} of OK social network that you can get from onRequestAccessTokenCompleteListener
-     * @param onRequestAccessTokenCompleteListener listener for {@link com.github.gorbin.asne.core.AccessToken} request
-     */
-    @Override
-    public void requestAccessToken(OnRequestAccessTokenCompleteListener onRequestAccessTokenCompleteListener) {
-        super.requestAccessToken(onRequestAccessTokenCompleteListener);
-        String accessToken = mSharedPreferences.getString(TOKEN, null);
-        ((OnRequestAccessTokenCompleteListener) mLocalListeners.get(REQUEST_ACCESS_TOKEN))
-                .onRequestAccessTokenComplete(getID(), new AccessToken(accessToken, null));
-    }
-
-    private boolean checkTokenError(Bundle result){
-        if(result != null && result.containsKey(ERROR_CODE) && result.getString(ERROR_CODE).equals("102")) {
-            requestBundle = result;
-            requestBundle.remove(ERROR_CODE);
-            requestBundle.remove(SocialNetworkAsyncTask.RESULT_ERROR);
-            mOdnoklassniki.refreshToken(activity);
-            return true;
-        }
-        return false;
-    }
-
-    private String requestIdPerson(Bundle result) throws IOException, JSONException {
-        Map<String, String> idRequestParams = new HashMap<String, String>();
-        idRequestParams.put("fields", "uid");
-        String idResponse = mOdnoklassniki.request("users.getCurrentUser", idRequestParams, "get");
-        JSONObject jsonObject = new JSONObject(idResponse);
-        String id = jsonObject.getString("uid");
-        result.putString(USERID, userId);
-        return id;
-    }
-
-    /**
-     * Request current user {@link com.github.gorbin.asne.core.persons.SocialPerson}
-     * @param onRequestSocialPersonCompleteListener listener for {@link com.github.gorbin.asne.core.persons.SocialPerson} request
-     */
-    @Override
-    public void requestCurrentPerson(OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        super.requestCurrentPerson(onRequestSocialPersonCompleteListener);
-        executeRequest(new RequestGetSocialPersonAsyncTask(), null, REQUEST_GET_CURRENT_PERSON);
-    }
-
-    /**
-     * Request {@link com.github.gorbin.asne.core.persons.SocialPerson} by user id
-     * @param userID id of OK user
-     * @param onRequestSocialPersonCompleteListener listener for {@link com.github.gorbin.asne.core.persons.SocialPerson} request
-     */
-    @Override
-    public void requestSocialPerson(String userID, OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        super.requestSocialPerson(userID, onRequestSocialPersonCompleteListener);
-        if (TextUtils.isEmpty(userID)) {
-            throw new SocialNetworkException("userID can't be null or empty");
-        }
-        Bundle args = new Bundle();
-        args.putString(RequestGetSocialPersonAsyncTask.PARAM_USER_ID, userID);
-        executeRequest(new RequestGetSocialPersonAsyncTask(), args, REQUEST_GET_PERSON);
-    }
-
-    /**
-     * Request ArrayList of {@link com.github.gorbin.asne.core.persons.SocialPerson} by array of userIds
-     * @param userID array of user ids in social network
-     * @param onRequestSocialPersonsCompleteListener listener for request ArrayList of {@link com.github.gorbin.asne.core.persons.SocialPerson}
-     */
-    @Override
-    public void requestSocialPersons(String[] userID, OnRequestSocialPersonsCompleteListener onRequestSocialPersonsCompleteListener) {
-        super.requestSocialPersons(userID, onRequestSocialPersonsCompleteListener);
-        Bundle args = new Bundle();
-        args.putStringArray(RequestSocialPersonsAsyncTask.PARAM_USER_ID, userID);
-        executeRequest(new RequestSocialPersonsAsyncTask(), args, REQUEST_GET_PERSONS);
-    }
-
-    /**
-     * Request user {@link com.github.gorbin.asne.odnoklassniki.OkPerson} by userId - detailed user data
-     * @param userId id of OK user
-     * @param onRequestDetailedSocialPersonCompleteListener listener for request detailed social person
-     */
-    @Override
-    public void requestDetailedSocialPerson(String userId, OnRequestDetailedSocialPersonCompleteListener onRequestDetailedSocialPersonCompleteListener) {
-        super.requestDetailedSocialPerson(userId, onRequestDetailedSocialPersonCompleteListener);
-        Bundle args = new Bundle();
-        if(userId != null) {
-            args.putString(RequestGetDetailedPersonAsyncTask.PARAM_USER_ID, userId);
-        }
-        executeRequest(new RequestGetDetailedPersonAsyncTask(), args, REQUEST_GET_DETAIL_PERSON);
-    }
-
-    private SocialPerson getSocialPerson(SocialPerson socialPerson, JSONObject jsonResponse) throws JSONException {
-        if(jsonResponse.has("uid")) {
-            socialPerson.id = jsonResponse.getString("uid");
-            socialPerson.profileURL = "http://www.odnoklassniki.ru/profile/" + jsonResponse.getString("uid");
-        }
-        if(jsonResponse.has("name")) {
-            socialPerson.name = jsonResponse.getString("name");
-        }
-        if(jsonResponse.has("pic190x190")) {
-            socialPerson.avatarURL = jsonResponse.getString("pic190x190");
-        }
-        return socialPerson;
-    }
-
-    private OkPerson getDetailedSocialPerson(OkPerson okPerson, JSONObject jsonResponse) throws JSONException {
-        getSocialPerson(okPerson, jsonResponse);
-        if(jsonResponse.has("first_name")) {
-            okPerson.firstName = jsonResponse.getString("first_name");
-        }
-        if(jsonResponse.has("last_name")) {
-            okPerson.lastName = jsonResponse.getString("last_name");
-        }
-        if(jsonResponse.has("gender")) {
-            okPerson.gender = jsonResponse.getString("gender");
-        }
-        if(jsonResponse.has("birthday")) {
-            okPerson.birthday = jsonResponse.getString("birthday");
-        }
-        if(jsonResponse.has("age")) {
-            okPerson.age = jsonResponse.getString("age");
-        }
-        if(jsonResponse.has("locale")) {
-            okPerson.locale = jsonResponse.getString("locale");
-        }
-        if(jsonResponse.has("has_email")) {
-            okPerson.has_email = jsonResponse.getBoolean("has_email");
-        }
-        if(jsonResponse.has("current_status")) {
-            okPerson.current_status = jsonResponse.getString("current_status");
-        }
-        if(jsonResponse.has("online")) {
-            okPerson.online = jsonResponse.getString("online");
-        }
-        if(jsonResponse.has("location")){
-            if(jsonResponse.getJSONObject("location").has("city")){
-                okPerson.city = jsonResponse.getJSONObject("location").getString("city");
-            }
-            if(jsonResponse.getJSONObject("location").has("countryName")){
-                okPerson.country = jsonResponse.getJSONObject("location").getString("countryName");
-            }
-        }
-        return okPerson;
-    }
-
-    /**
-     * Not supported via OK sdk.
-     * @throws com.github.gorbin.asne.core.SocialNetworkException
-     * @param message  message that should be shared
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostMessage(String message, OnPostingCompleteListener onPostingCompleteListener) {
-        throw new SocialNetworkException("requestPostMessage isn't allowed for OkSocialNetwork");
-    }
-
-    /**
-     * Not supported via OK sdk.
-     * @throws com.github.gorbin.asne.core.SocialNetworkException
-     * @param photo photo that should be shared
-     * @param message message that should be shared with photo
-     * @param onPostingCompleteListener listener for posting request
-     */
-	@Override
-    public void requestPostPhoto(File photo, final String message, OnPostingCompleteListener onPostingCompleteListener) {
-        throw new SocialNetworkException("requestPostPhoto isn't allowed for OkSocialNetwork");
-    }
-
-    /**
-     * Post link with comment to social network
-     * @param bundle bundle containing information that should be shared(Bundle constants in {@link com.github.gorbin.asne.core.SocialNetwork})
-     * @param message message that should be shared with bundle
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostLink(Bundle bundle, String message, OnPostingCompleteListener onPostingCompleteListener) {
-        super.requestPostLink(bundle, message, onPostingCompleteListener);
-        bundle.putString("message", message);
-        executeRequest(new RequestPostLinkAsyncTask(), bundle, REQUEST_POST_LINK);
-    }
-
-    /**
-     * Not supported via OK sdk.
-     * @throws com.github.gorbin.asne.core.SocialNetworkException
-     * @param bundle bundle containing information that should be shared(Bundle constants in {@link com.github.gorbin.asne.core.SocialNetwork})
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostDialog(Bundle bundle, OnPostingCompleteListener onPostingCompleteListener) {
-        throw new SocialNetworkException("requestPostDialog isn't allowed for OkSocialNetwork");
-    }
-
-    /**
-     * Check if user by id is friend of current user
-     * @param userID user id that should be checked as friend of current user
-     * @param onCheckIsFriendCompleteListener listener for checking friend request
-     */
-    @Override
-    public void requestCheckIsFriend(final String userID, OnCheckIsFriendCompleteListener onCheckIsFriendCompleteListener) {
-        super.requestCheckIsFriend(userID, onCheckIsFriendCompleteListener);
-        if (TextUtils.isEmpty(userID)) {
-            throw new SocialNetworkException("userID can't be null or empty");
-        }
-        Bundle args = new Bundle();
-        args.putString(RequestCheckIsFriendAsyncTask.PARAM_USER_ID, userID);         args.putString(USERID, userId);
-        executeRequest(new RequestCheckIsFriendAsyncTask(), args, REQUEST_CHECK_IS_FRIEND);
-    }
-
-    /**
-     * Get current user friends list
-     * @param onRequestGetFriendsCompleteListener listener for getting list of current user friends
-     */
-	@Override
-    public void requestGetFriends(OnRequestGetFriendsCompleteListener onRequestGetFriendsCompleteListener) {
-        super.requestGetFriends(onRequestGetFriendsCompleteListener);
-        executeRequest(new RequestGetFriendsAsyncTask(), null, REQUEST_GET_FRIENDS);
-    }
-
-    /**
-     * Not supported via OK sdk.
-     * @throws com.github.gorbin.asne.core.SocialNetworkException
-     * @param userID id of user that should be invited
-     * @param onRequestAddFriendCompleteListener listener for invite result
-     */
-    @Override
-    public void requestAddFriend(final String userID, OnRequestAddFriendCompleteListener onRequestAddFriendCompleteListener) {
-        throw new SocialNetworkException("requestAddFriend isn't allowed for OkSocialNetwork");
-    }
-
-    /**
-     * Not supported via OK sdk.
-     * @throws com.github.gorbin.asne.core.SocialNetworkException
-     * @param userID user id that should be removed from friends
-     * @param onRequestRemoveFriendCompleteListener listener to remove friend request response
-     */
-    @Override
-    public void requestRemoveFriend(String userID, OnRequestRemoveFriendCompleteListener onRequestRemoveFriendCompleteListener) {
-        throw new SocialNetworkException("requestRemoveFriend isn't allowed for OkSocialNetwork");
-    }
-
-    private class RequestGetSocialPersonAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "RequestGetPersonAsyncTask.PARAM_USER_ID";
-        public static final String CURRENT = "RequestGetPersonAsyncTask.CURRENT";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle(args);
-            String userID;
-            Map<String, String> requestParams = new HashMap<String, String>();
-            requestParams.put("fields", "uid, name, pic190x190");
-            String response;
-            if (args.containsKey(PARAM_USER_ID)) {
-                userID = args.getString(PARAM_USER_ID);
-                requestParams.put("uids", userID);
-            }
-
-            try {
-                JSONObject jsonObject = null;
-                if (args.containsKey(PARAM_USER_ID)) {
-                    response = mOdnoklassniki.request("users.getInfo", requestParams, "get");
-                    result.putBoolean(CURRENT, false);
-                } else {
-                    response = mOdnoklassniki.request("users.getCurrentUser", requestParams, "get");
-                    result.putBoolean(CURRENT, true);
-                }
-                Object json = new JSONTokener(response).nextValue();
-                if(json instanceof JSONObject){
-                    jsonObject = new JSONObject(response);
-                    if(jsonObject.has("error_code")) {
-                        result.putString(RESULT_ERROR, jsonObject.toString());
-                        result.putString(ERROR_CODE, jsonObject.getString("error_code"));
-                        return result;
-                    }
-                } else if (json instanceof JSONArray){
-                    JSONArray jsonArray = new JSONArray(response);
-                    jsonObject = jsonArray.getJSONObject(0);
-                }
-                if (jsonObject != null) {
-                    result.putString(USERID, jsonObject.getString("uid"));
-                }
-                SocialPerson socialPerson = new SocialPerson();
-                getSocialPerson(socialPerson, jsonObject);
-                result.putParcelable(REQUEST_GET_PERSON, socialPerson);
-            } catch (Exception e) {
-                e.printStackTrace();
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            userId = result.getString(USERID);
-            if(checkTokenError(result)) return;
-            SocialPerson socialPerson = result.getParcelable(REQUEST_GET_PERSON);
-            if(result.containsKey(CURRENT) && result.getBoolean(CURRENT)){
-                if (!handleRequestResult(result, REQUEST_GET_CURRENT_PERSON)) return;
-                ((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_CURRENT_PERSON))
-                        .onRequestSocialPersonSuccess(getID(), socialPerson);
-            } else {
-                if (!handleRequestResult(result, REQUEST_GET_PERSON)) return;
-                ((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_PERSON))
-                        .onRequestSocialPersonSuccess(getID(), socialPerson);
-            }
-        }
-    }
-
-    private class RequestGetDetailedPersonAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "RequestGetPersonAsyncTask.PARAM_USER_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle(args);
-            String userID;
-            Map<String, String> requestParams = new HashMap<String, String>();
-            requestParams.put("fields", "uid, name, pic190x190, last_name, first_name, gender, birthday, age, locale, " +
-                    "has_email, current_status, online, location");
-            String response;
-            if (args.containsKey(PARAM_USER_ID)) {
-                userID = args.getString(PARAM_USER_ID);
-                requestParams.put("uids", userID);
-            }
-
-            try {
-                JSONObject jsonObject = null;
-                if (args.containsKey(PARAM_USER_ID)) {
-                    response = mOdnoklassniki.request("users.getInfo", requestParams, "get");
-                } else {
-                    response = mOdnoklassniki.request("users.getCurrentUser", requestParams, "get");
-                }
-                Object json = new JSONTokener(response).nextValue();
-                if(json instanceof JSONObject){
-                    jsonObject = new JSONObject(response);
-                    if(jsonObject.has("error_code")) {
-                        result.putString(RESULT_ERROR, jsonObject.toString());
-                        result.putString(ERROR_CODE, jsonObject.getString("error_code"));
-                        return result;
-                    }
-                } else if (json instanceof JSONArray){
-                    JSONArray jsonArray = new JSONArray(response);
-                    jsonObject = jsonArray.getJSONObject(0);
-                }
-                OkPerson okPerson = new OkPerson();
-                getDetailedSocialPerson(okPerson, jsonObject);
-                result.putParcelable(REQUEST_GET_DETAIL_PERSON, okPerson);
-            } catch (Exception e) {
-                e.printStackTrace();
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if(checkTokenError(result)) return;
-            if (!handleRequestResult(result, REQUEST_GET_DETAIL_PERSON)) return;
-            OkPerson okPerson = result.getParcelable(REQUEST_GET_DETAIL_PERSON);
-            ((OnRequestDetailedSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_DETAIL_PERSON))
-                    .onRequestDetailedSocialPersonSuccess(getID(), okPerson);
-        }
-    }
-
-    private class RequestSocialPersonsAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "RequestGetPersonAsyncTask.PARAM_USER_ID";
-        private static final String RESULT_USERS_ARRAY = "RequestPersonAsyncTask.RESULT_USERS_ARRAY";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle(args);
-            String[] userIDs = args.getStringArray(PARAM_USER_ID);
-            String ids = null;
-            if (userIDs != null) {
-                ids = TextUtils.join(",", userIDs);
-            }
-            Map<String, String> requestParams = new HashMap<String, String>();
-            requestParams.put("uids", ids);
-            requestParams.put("fields", "uid, name, pic190x190");
-            String response;
-            if (args.containsKey(FRIENDS)) {
-                result.putBoolean(FRIENDS, true);
-            }
-            SocialPerson socialPerson = new SocialPerson();
-            ArrayList<SocialPerson> socialPersons = new ArrayList<SocialPerson>();
-            try {
-                response = mOdnoklassniki.request("users.getInfo", requestParams, "get");
-                Object json = new JSONTokener(response).nextValue();
-                if(json instanceof JSONObject){
-                    JSONObject jsonObject = new JSONObject(response);
-                    if(jsonObject.has("error_code")) {
-                        result.putString(RESULT_ERROR, jsonObject.toString());
-                        result.putString(ERROR_CODE, jsonObject.getString("error_code"));
-                        return result;
-                    }
-                } else if (json instanceof JSONArray){
-                    JSONArray jsonArray = new JSONArray(response);
-                    for (int i = 0; i < jsonArray.length(); i++) {
-                        getSocialPerson(socialPerson, jsonArray.getJSONObject(i));
-                        socialPersons.add(socialPerson);
-                        socialPerson = new SocialPerson();
-                    }
-                    result.putParcelableArrayList(RESULT_USERS_ARRAY, socialPersons);
-                }
-            } catch (Exception e) {
-                e.printStackTrace();
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if(checkTokenError(result)) return;
-            ArrayList<SocialPerson> socialPersons = result.getParcelableArrayList(RESULT_USERS_ARRAY);
-            if (result.containsKey(FRIENDS)) {
-                if (!handleRequestResult(result, REQUEST_GET_FRIENDS)) return;
-                ((OnRequestGetFriendsCompleteListener) mLocalListeners.get(REQUEST_GET_FRIENDS))
-                        .OnGetFriendsComplete(getID(), socialPersons);
-            } else {
-                if (!handleRequestResult(result, REQUEST_GET_PERSONS)) return;
-                ((OnRequestSocialPersonsCompleteListener) mLocalListeners.get(REQUEST_GET_PERSONS))
-                    .onRequestSocialPersonsSuccess(getID(), socialPersons);
-                mLocalListeners.remove(REQUEST_GET_PERSONS);
-            }
-        }
-    }
-
-    private class RequestPostLinkAsyncTask extends SocialNetworkAsyncTask {
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle(args);
-            String link = args.getString("link");
-            String comment = args.getString("message");
-            try {
-                Map<String, String> requestParams = new HashMap<String, String>();
-                requestParams.put("linkUrl", link);
-                if(comment != null) {
-                    requestParams.put("comment", comment);
-                }
-                String response = mOdnoklassniki.request("share.addLink", requestParams, "get");
-                JSONObject jsonObject = new JSONObject(response);
-                if(jsonObject.has("error_code")) {
-                    result.putString(RESULT_ERROR, jsonObject.toString());
-                    result.putString(ERROR_CODE, jsonObject.getString("error_code"));
-                    return result;
-                }
-            }  catch (Exception e) {
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if(checkTokenError(result)) return;
-            if (!handleRequestResult(result, REQUEST_POST_LINK)) return;
-            ((OnPostingCompleteListener) mLocalListeners.get(REQUEST_POST_LINK))
-                    .onPostSuccessfully(getID());
-        }
-    }
-
-    private class RequestGetFriendsAsyncTask extends SocialNetworkAsyncTask {
-        public static final String RESULT_GET_FRIENDS_ID = "RESULT_GET_FRIENDS_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle result = new Bundle(params[0]);
-            ArrayList<String> friendIds = new ArrayList<String>();
-            String response;
-            try {
-                response = mOdnoklassniki.request("friends.get", null, "get");
-                Object json = new JSONTokener(response).nextValue();
-                if(json instanceof JSONObject){
-                    JSONObject jsonObject = new JSONObject(response);
-                    if(jsonObject.has("error_code")) {
-                        result.putString(RESULT_ERROR, jsonObject.toString());
-                        result.putString(ERROR_CODE, jsonObject.getString("error_code"));
-                        return result;
-                    }
-                } else if (json instanceof JSONArray){
-                    JSONArray jsonArray = new JSONArray(response);
-                    for (int i = 0; i < jsonArray.length(); i++) {
-                        friendIds.add(jsonArray.getString(i));
-                    }
-                    result.putStringArray(RESULT_GET_FRIENDS_ID, friendIds.toArray(new String[friendIds.size()]));
-                }
-            } catch (Exception e) {
-                e.printStackTrace();
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if(checkTokenError(result)) return;
-            if (!handleRequestResult(result, REQUEST_GET_FRIENDS,
-                    result.getStringArray(RESULT_GET_FRIENDS_ID))) return;
-            String[] friendsIds = result.getStringArray(RESULT_GET_FRIENDS_ID);
-
-            ((OnRequestGetFriendsCompleteListener) mLocalListeners.get(REQUEST_GET_FRIENDS))
-                        .OnGetFriendsIdComplete(getID(), friendsIds);
-            Bundle args = new Bundle();
-            args.putStringArray(RequestSocialPersonsAsyncTask.PARAM_USER_ID, friendsIds);
-            args.putBoolean(FRIENDS, true);
-            executeRequest(new RequestSocialPersonsAsyncTask(), args, REQUEST_GET_FRIENDS);
-        }
-    }
-
-    private class RequestCheckIsFriendAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "PARAM_USER_ID";
-        public static final String RESULT_IS_FRIEND = "RESULT_IS_FRIEND";
-        public static final String RESULT_REQUESTED_ID = "RESULT_REQUESTED_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle(args);
-            String requestedId = args.getString(PARAM_USER_ID);
-            result.putString(RESULT_REQUESTED_ID, requestedId);
-            String userId = args.getString(USERID);
-            String response;
-            try {
-                if(userId == null) {
-                    userId = requestIdPerson(result);
-                }
-                Map<String, String> requestParams = new HashMap<String, String>();
-                requestParams.put("uids1", userId);
-                requestParams.put("uids2", requestedId);
-                response = mOdnoklassniki.request("friends.areFriends", requestParams, "get");
-                Object json = new JSONTokener(response).nextValue();
-                if(json instanceof JSONObject){
-                    JSONObject jsonObject = new JSONObject(response);
-                    if(jsonObject.has("error_code")) {
-                        result.putString(RESULT_ERROR, jsonObject.toString());
-                        result.putString(ERROR_CODE, jsonObject.getString("error_code"));
-                        return result;
-                    }
-                } else if (json instanceof JSONArray){
-                    JSONArray jsonResponseArray = new JSONArray(response);
-                    result.putBoolean(RESULT_IS_FRIEND, jsonResponseArray.getJSONObject(0).getBoolean("are_friends"));
-                }
-            } catch (Exception e) {
-                e.printStackTrace();
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            userId = result.getString(USERID);
-            if(checkTokenError(result)) return;
-            if (!handleRequestResult(result, REQUEST_CHECK_IS_FRIEND,
-                    result.getString(RESULT_REQUESTED_ID))) return;
-            ((OnCheckIsFriendCompleteListener) mLocalListeners.get(REQUEST_CHECK_IS_FRIEND))
-                    .onCheckIsFriendComplete(getID(), result.getString(RESULT_REQUESTED_ID),
-                            result.getBoolean(RESULT_IS_FRIEND));
-        }
-    }
-}
-
-
diff --git a/settings.gradle b/settings.gradle
index 589d42c..d6b6b5b 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +1 @@
-include ':ASNE', ':ASNECore', ':googleplus', ':linkedin', ':odnoklassniki', ':twitter', ':vk', ':facebook', ':instagram'
\ No newline at end of file
+include ':ASNE', ':ASNECore', ':googleplus', ':twitter', ':facebook'
diff --git a/twitter/build.gradle b/twitter/build.gradle
index 5e1584c..4178f21 100644
--- a/twitter/build.gradle
+++ b/twitter/build.gradle
@@ -6,7 +6,7 @@ android {
     buildToolsVersion "21.1.1"
 
     defaultConfig {
-        applicationId "com.github.gorbin.asne.twitter"
+        //applicationId "com.github.gorbin.asne.twitter"
         minSdkVersion 10
         targetSdkVersion 21
         versionCode 1
@@ -14,7 +14,7 @@ android {
     }
     buildTypes {
         release {
-            runProguard false
+            //runProguard false
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
     }
diff --git a/vk/.gitignore b/vk/.gitignore
deleted file mode 100644
index 796b96d..0000000
--- a/vk/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/build
diff --git a/vk/build.gradle b/vk/build.gradle
deleted file mode 100644
index 881f3b1..0000000
--- a/vk/build.gradle
+++ /dev/null
@@ -1,28 +0,0 @@
-apply plugin: 'com.android.library'
-apply from: '../maven_push.gradle'
-
-android {
-    compileSdkVersion 21
-    buildToolsVersion "21.1.1"
-
-    defaultConfig {
-        applicationId "com.github.gorbin.asne.vk"
-        minSdkVersion 10
-        targetSdkVersion 21
-        versionCode 1
-        versionName "1.0"
-    }
-    buildTypes {
-        release {
-            runProguard false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-}
-
-dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    compile 'com.android.support:appcompat-v7:21.0.2'
-    compile project(':ASNECore')
-    compile('com.vk:androidsdk:1.3.3@aar') { exclude module: 'support-v4' }
-}
diff --git a/vk/gradle.properties b/vk/gradle.properties
deleted file mode 100644
index a5548aa..0000000
--- a/vk/gradle.properties
+++ /dev/null
@@ -1,3 +0,0 @@
-POM_NAME=ASNE Vk
-POM_ARTIFACT_ID=asne-vk
-POM_PACKAGING=aar
\ No newline at end of file
diff --git a/vk/proguard-rules.pro b/vk/proguard-rules.pro
deleted file mode 100644
index 92ddeef..0000000
--- a/vk/proguard-rules.pro
+++ /dev/null
@@ -1,17 +0,0 @@
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in D:/programs/AndroidStudio/sdk/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the proguardFiles
-# directive in build.gradle.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/vk/src/main/AndroidManifest.xml b/vk/src/main/AndroidManifest.xml
deleted file mode 100644
index 226b2eb..0000000
--- a/vk/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,14 +0,0 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.github.gorbin.asne.vkontakte"
-    xmlns:tools="http://schemas.android.com/tools">
-    <!--<uses-sdk tools:node="replace" />-->
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
-
-    <application android:allowBackup="true">
-        <activity
-            android:name="com.vk.sdk.VKOpenAuthActivity"
-            />
-    </application>
-
-</manifest>
diff --git a/vk/src/main/java/com/github/gorbin/asne/vk/VKPerson.java b/vk/src/main/java/com/github/gorbin/asne/vk/VKPerson.java
deleted file mode 100644
index 9f20c33..0000000
--- a/vk/src/main/java/com/github/gorbin/asne/vk/VKPerson.java
+++ /dev/null
@@ -1,237 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2014 Evgeny Gorbin
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- *******************************************************************************/
-package com.github.gorbin.asne.vk;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.github.gorbin.asne.core.persons.SocialPerson;
-
-/**
- * Class for detailed VK social person
- *
- * @author Evgeny Gorbin (gorbin.e.o@gmail.com)
- */
-public class VKPerson extends SocialPerson implements Parcelable {
-
-    public static final Creator<VKPerson> CREATOR
-            = new Creator<VKPerson>() {
-        public VKPerson createFromParcel(Parcel in) {
-            return new VKPerson(in);
-        }
-
-        public VKPerson[] newArray(int size) {
-            return new VKPerson[size];
-        }
-    };
-
-    /*** First name of social person*/
-    public String firstName;
-    /*** Last name of social person*/
-    public String lastName;
-    /*** Sex of social person.  1 - female, 2 - male, 0 - not presented. */
-    public int sex;
-    /*** Birthday of social person like dd.MM.yyyy or dd.mm if year not permitted*/
-    public String birthday;
-    /*** City of social person from user contacts*/
-    public String city;
-    /*** Country of social person from user contacts*/
-    public String country;
-    /*** Max sized image url of social person avatar*/
-    public String photoMaxOrig;
-    /*** Is social person online now. 1 - true, 0 - false*/
-    public boolean online;
-    /*** Username of social person*/
-    public String username;
-    /*** If social person has mobile. 1 - true, 0 - false*/
-    public boolean hasMobile;
-    /*** Mobile phone of social person from contacts*/
-    public String mobilePhone;
-    /*** Home phone of social person from contacts*/
-    public String homePhone;
-    /*** University name of social person*/
-    public String universityName;
-    /*** Faculty name of social person*/
-    public String facultyName;
-    /*** Year when social person was\will graduate*/
-    public String graduationYear;
-    /*** Current social person status*/
-    public String status;
-    /*** Is it permitted to post on social person wall*/
-    public boolean canPost;
-    /*** Is it permitted to see all posts from social person wall*/
-    public boolean canSeeAllPosts;
-    /*** Is it permitted to write private messages to social person*/
-    public boolean canWritePrivateMessage;
-
-
-    public VKPerson() {
-    }
-
-    private VKPerson(Parcel in) {
-        lastName = in.readString();
-        firstName = in.readString();
-        sex = in.readInt();
-        birthday = in.readString();
-        city = in.readString();
-        country = in.readString();
-        photoMaxOrig = in.readString();
-        online = in.readByte() != 0x00;
-        username = in.readString();
-        hasMobile = in.readByte() != 0x00;
-        mobilePhone = in.readString();
-        homePhone = in.readString();
-        universityName = in.readString();
-        facultyName = in.readString();
-        graduationYear = in.readString();
-        status = in.readString();
-        canPost = in.readByte() != 0x00;
-        canSeeAllPosts = in.readByte() != 0x00;
-        canWritePrivateMessage = in.readByte() != 0x00;
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        dest.writeString(firstName);
-        dest.writeString(lastName);
-        dest.writeInt(sex);
-        dest.writeString(birthday);
-        dest.writeString(city);
-        dest.writeString(country);
-        dest.writeString(photoMaxOrig);
-        dest.writeByte((byte) (online ? 0x01 : 0x00));
-        dest.writeString(username);
-        dest.writeByte((byte) (hasMobile ? 0x01 : 0x00));
-        dest.writeString(mobilePhone);
-        dest.writeString(homePhone);
-        dest.writeString(universityName);
-        dest.writeString(facultyName);
-        dest.writeString(graduationYear);
-        dest.writeString(status);
-        dest.writeByte((byte) (canPost ? 0x01 : 0x00));
-        dest.writeByte((byte) (canSeeAllPosts ? 0x01 : 0x00));
-        dest.writeByte((byte) (canWritePrivateMessage ? 0x01 : 0x00));
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (!(o instanceof VKPerson)) return false;
-        if (!super.equals(o)) return false;
-
-        VKPerson vkPerson = (VKPerson) o;
-
-        if (canPost != vkPerson.canPost) return false;
-        if (canSeeAllPosts != vkPerson.canSeeAllPosts) return false;
-        if (canWritePrivateMessage != vkPerson.canWritePrivateMessage) return false;
-        if (hasMobile != vkPerson.hasMobile) return false;
-        if (online != vkPerson.online) return false;
-        if (sex != vkPerson.sex) return false;
-        if (firstName != null ? !firstName.equals(vkPerson.firstName) : vkPerson.firstName != null)
-            return false;
-        if (lastName != null ? !lastName.equals(vkPerson.lastName) : vkPerson.lastName != null)
-            return false;
-        if (birthday != null ? !birthday.equals(vkPerson.birthday) : vkPerson.birthday != null)
-            return false;
-        if (city != null ? !city.equals(vkPerson.city) : vkPerson.city != null) return false;
-        if (country != null ? !country.equals(vkPerson.country) : vkPerson.country != null)
-            return false;
-        if (facultyName != null ? !facultyName.equals(vkPerson.facultyName) : vkPerson.facultyName != null)
-            return false;
-        if (graduationYear != null ? !graduationYear.equals(vkPerson.graduationYear) : vkPerson.graduationYear != null)
-            return false;
-        if (homePhone != null ? !homePhone.equals(vkPerson.homePhone) : vkPerson.homePhone != null)
-            return false;
-        if (mobilePhone != null ? !mobilePhone.equals(vkPerson.mobilePhone) : vkPerson.mobilePhone != null)
-            return false;
-        if (photoMaxOrig != null ? !photoMaxOrig.equals(vkPerson.photoMaxOrig) : vkPerson.photoMaxOrig != null)
-            return false;
-        if (status != null ? !status.equals(vkPerson.status) : vkPerson.status != null)
-            return false;
-        if (universityName != null ? !universityName.equals(vkPerson.universityName) : vkPerson.universityName != null)
-            return false;
-        if (username != null ? !username.equals(vkPerson.username) : vkPerson.username != null)
-            return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = super.hashCode();
-        result = 31 * result + sex;
-        result = 31 * result + (firstName != null ? firstName.hashCode() : 0);
-        result = 31 * result + (lastName != null ? lastName.hashCode() : 0);
-        result = 31 * result + (birthday != null ? birthday.hashCode() : 0);
-        result = 31 * result + (city != null ? city.hashCode() : 0);
-        result = 31 * result + (country != null ? country.hashCode() : 0);
-        result = 31 * result + (photoMaxOrig != null ? photoMaxOrig.hashCode() : 0);
-        result = 31 * result + (online ? 1 : 0);
-        result = 31 * result + (username != null ? username.hashCode() : 0);
-        result = 31 * result + (hasMobile ? 1 : 0);
-        result = 31 * result + (mobilePhone != null ? mobilePhone.hashCode() : 0);
-        result = 31 * result + (homePhone != null ? homePhone.hashCode() : 0);
-        result = 31 * result + (universityName != null ? universityName.hashCode() : 0);
-        result = 31 * result + (facultyName != null ? facultyName.hashCode() : 0);
-        result = 31 * result + (graduationYear != null ? graduationYear.hashCode() : 0);
-        result = 31 * result + (status != null ? status.hashCode() : 0);
-        result = 31 * result + (canPost ? 1 : 0);
-        result = 31 * result + (canSeeAllPosts ? 1 : 0);
-        result = 31 * result + (canWritePrivateMessage ? 1 : 0);
-        return result;
-    }
-
-    @Override
-    public String toString() {
-        return "VKPerson{" +
-                "id='" + id + '\'' +
-                ", name='" + name + '\'' +
-                ", avatarURL='" + avatarURL + '\'' +
-                ", profileURL='" + profileURL + '\'' +
-                ", email='" + email + '\'' +
-                ", firstName='" + firstName + '\'' +
-                ", lastName='" + lastName + '\'' +
-                ", sex='" + sex + '\'' +
-                ", birthday='" + birthday + '\'' +
-                ", city='" + city + '\'' +
-                ", country='" + country + '\'' +
-                ", photoMaxOrig='" + photoMaxOrig + '\'' +
-                ", online=" + online +
-                ", gender='" + username + '\'' +
-                ", hasMobile=" + hasMobile +
-                ", mobilePhone='" + mobilePhone + '\'' +
-                ", homePhone='" + homePhone + '\'' +
-                ", universityName='" + universityName + '\'' +
-                ", facultyName='" + facultyName + '\'' +
-                ", graduationYear='" + graduationYear + '\'' +
-                ", status='" + status + '\'' +
-                ", canPost=" + canPost +
-                ", canSeeAllPosts=" + canSeeAllPosts +
-                ", canWritePrivateMessage=" + canWritePrivateMessage +
-                '}';
-    }
-}
diff --git a/vk/src/main/java/com/github/gorbin/asne/vk/VkSocialNetwork.java b/vk/src/main/java/com/github/gorbin/asne/vk/VkSocialNetwork.java
deleted file mode 100644
index e07a866..0000000
--- a/vk/src/main/java/com/github/gorbin/asne/vk/VkSocialNetwork.java
+++ /dev/null
@@ -1,820 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2014 Evgeny Gorbin
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- *******************************************************************************/
-package com.github.gorbin.asne.vk;
-
-import android.content.Context;
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.text.TextUtils;
-
-import com.github.gorbin.asne.core.AccessToken;
-import com.github.gorbin.asne.core.SocialNetwork;
-import com.github.gorbin.asne.core.SocialNetworkException;
-import com.github.gorbin.asne.core.listener.OnCheckIsFriendCompleteListener;
-import com.github.gorbin.asne.core.listener.OnLoginCompleteListener;
-import com.github.gorbin.asne.core.listener.OnPostingCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestAccessTokenCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestAddFriendCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestDetailedSocialPersonCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestGetFriendsCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestRemoveFriendCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestSocialPersonCompleteListener;
-import com.github.gorbin.asne.core.listener.OnRequestSocialPersonsCompleteListener;
-import com.github.gorbin.asne.core.persons.SocialPerson;
-import com.vk.sdk.VKAccessToken;
-import com.vk.sdk.VKSdk;
-import com.vk.sdk.VKSdkListener;
-import com.vk.sdk.VKUIHelper;
-import com.vk.sdk.api.VKApi;
-import com.vk.sdk.api.VKApiConst;
-import com.vk.sdk.api.VKError;
-import com.vk.sdk.api.VKParameters;
-import com.vk.sdk.api.VKRequest;
-import com.vk.sdk.api.VKResponse;
-import com.vk.sdk.api.model.VKApiLink;
-import com.vk.sdk.api.model.VKApiPhoto;
-import com.vk.sdk.api.model.VKAttachments;
-import com.vk.sdk.api.model.VKPhotoArray;
-import com.vk.sdk.api.model.VKWallPostResult;
-import com.vk.sdk.api.photo.VKImageParameters;
-import com.vk.sdk.api.photo.VKUploadImage;
-import com.vk.sdk.dialogs.VKCaptchaDialog;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.util.ArrayList;
-
-/**
- * Class for VK social network integration
- *
- * @author Evgeny Gorbin (gorbin.e.o@gmail.com)
- */
-public class VkSocialNetwork extends SocialNetwork {
-    /*** Social network ID in asne modules, should be unique*/
-    public static final int ID = 5;
-    private static final String SAVE_STATE_KEY_OAUTH_TOKEN = "VkSocialNetwork.SAVE_STATE_KEY_OAUTH_TOKEN";
-    private static final String SAVE_STATE_KEY_OAUTH_SECRET = "VkSocialNetwork.SAVE_STATE_KEY_OAUTH_SECRET";
-    private static final String SAVE_STATE_KEY_USER_ID = "VkSocialNetwork.SAVE_STATE_KEY_USER_ID";
-    /*** Developer activity*/
-    private Activity activity;
-    /*** VK app id*/
-    private String key;
-    /*** VK access token*/
-    private VKAccessToken accessToken;
-    /*** Id of current user*/
-    private String userId;
-    /*** Permissions array*/
-    private String[] permissions;
-    /*** VK SDK listener to catch authorization @see <a href="http://vkcom.github.io/vk-android-sdk/com/vk/sdk/VKSdkListener.html">VKSdkListener</a>*/
-    private final VKSdkListener vkSdkListener = new VKSdkListener() {
-        @Override
-        public void onCaptchaError(VKError captchaError) {
-            new VKCaptchaDialog(captchaError).show();
-        }
-
-        @Override
-        public void onTokenExpired(VKAccessToken expiredToken) {
-            VKSdk.authorize(permissions, true, false);
-        }
-
-        @Override
-        public void onAccessDenied(VKError authorizationError) {
-            mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN,
-                    authorizationError.toString(), null);
-        }
-
-        @Override
-        public void onReceiveNewToken(VKAccessToken newToken) {
-            accessToken = newToken;
-            mSharedPreferences.edit()
-                    .putString(SAVE_STATE_KEY_OAUTH_TOKEN, accessToken.accessToken)
-                    .putString(SAVE_STATE_KEY_OAUTH_SECRET, accessToken.secret)
-                    .putString(SAVE_STATE_KEY_USER_ID, accessToken.userId)
-                    .apply();
-            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                ((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
-                mLocalListeners.remove(REQUEST_LOGIN);
-            }
-            userId = accessToken.userId;
-        }
-
-        @Override
-        public void onAcceptUserToken(VKAccessToken token) {
-            accessToken = token;
-            mSharedPreferences.edit()
-                    .putString(SAVE_STATE_KEY_OAUTH_TOKEN, accessToken.accessToken)
-                    .putString(SAVE_STATE_KEY_OAUTH_SECRET, accessToken.secret)
-                    .putString(SAVE_STATE_KEY_USER_ID, accessToken.userId)
-                    .apply();
-            userId = accessToken.userId;
-        }
-    };
-
-    public VkSocialNetwork(Fragment fragment, String key, String[] permissions) {
-        super(fragment);
-        this.key = key;
-        this.permissions = permissions;
-    }
-
-    public VkSocialNetwork(Fragment fragment, Context context, String key, String[] permissions) {
-        super(fragment, context);
-        this.key = key;
-        this.permissions = permissions;
-    }
-
-    private static boolean stringToBool(String s) {
-        if (s.equals("1"))
-            return true;
-        if (s.equals("0"))
-            return false;
-        throw new IllegalArgumentException(s+" is not a bool. Only 1 and 0 are.");
-    }
-
-    /*** Get current user id after authorization for inner use*/
-    private void requestIdPerson() {
-        VKRequest request = VKApi.users().get(VKParameters.from(VKApiConst.FIELDS,"id"));
-        request.secure = false;
-        request.executeWithListener(new VKRequest.VKRequestListener() {
-            @Override
-            public void onComplete(VKResponse response) {
-                try {
-                    JSONObject jsonResponse = response.json.getJSONArray("response").getJSONObject(0);
-                    userId = jsonResponse.getString("id");
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-            }
-            @Override
-            public void onError(VKError error) {
-                throw new SocialNetworkException("Error in id request! " + error);
-
-            }
-            @Override
-            public void onProgress(VKRequest.VKProgressType progressType,
-                                   long bytesLoaded,
-                                   long bytesTotal) {
-            }
-            @Override
-            public void attemptFailed(VKRequest request, int attemptNumber, int totalAttempts) {
-                throw new SocialNetworkException("Fail in id request!");
-            }
-        });
-    }
-
-    /**
-     * Check is social network connected
-     * @return true if connected to VK social network and false if not
-     */
-    @Override
-    public boolean isConnected() {
-        return VKSdk.isLoggedIn();
-    }
-
-    /**
-     * Make login request - authorize in VK social network
-     * @param onLoginCompleteListener listener to trigger when Login complete
-     */
-    @Override
-    public void requestLogin(OnLoginCompleteListener onLoginCompleteListener) {
-        super.requestLogin(onLoginCompleteListener);
-        VKSdk.authorize(permissions);
-    }
-
-    /**
-     * Logout from VK social network
-     */
-    @Override
-    public void logout() {
-        VKSdk.logout();
-    }
-
-    /**
-     * Get id of VK social network
-     * @return Social network id for VK = 5
-     */
-    @Override
-    public int getID() {
-        return ID;
-    }
-
-    /**
-     * Method to get AccessToken of VK social network
-     * @return {@link com.github.gorbin.asne.core.AccessToken}
-     */
-    @Override
-    public AccessToken getAccessToken() {
-        return new AccessToken(mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null),
-                mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, null));
-    }
-
-    /**
-     * Request {@link com.github.gorbin.asne.core.AccessToken} of VK social network that you can get from onRequestAccessTokenCompleteListener
-     * @param onRequestAccessTokenCompleteListener listener for {@link com.github.gorbin.asne.core.AccessToken} request
-     */
-    @Override
-    public void requestAccessToken(OnRequestAccessTokenCompleteListener onRequestAccessTokenCompleteListener) {
-        super.requestAccessToken(onRequestAccessTokenCompleteListener);
-        ((OnRequestAccessTokenCompleteListener) mLocalListeners.get(REQUEST_ACCESS_TOKEN))
-                .onRequestAccessTokenComplete(getID(),
-                        new AccessToken(mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null),
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, null)));
-    }
-
-    /**
-     * Request current user {@link com.github.gorbin.asne.core.persons.SocialPerson}
-     * @param onRequestSocialPersonCompleteListener listener for {@link com.github.gorbin.asne.core.persons.SocialPerson} request
-     */
-    @Override
-    public void requestCurrentPerson(OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        super.requestCurrentPerson(onRequestSocialPersonCompleteListener);
-        requestSocialPerson(null, onRequestSocialPersonCompleteListener);
-    }
-
-    /**
-     * Request {@link com.github.gorbin.asne.core.persons.SocialPerson} by user id
-     * @param userID id of VK user
-     * @param onRequestSocialPersonCompleteListener listener for {@link com.github.gorbin.asne.core.persons.SocialPerson} request
-     */
-    @Override
-    public void requestSocialPerson(String userID, OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        super.requestSocialPerson(userID, onRequestSocialPersonCompleteListener);
-        VKRequest request;
-        final boolean current;
-        if(userID == null){
-            request = VKApi.users().get(VKParameters.from(VKApiConst.FIELDS,
-                    "id,first_name,last_name,photo_max_orig"
-            ));
-            current = true;
-        } else {
-            request = VKApi.users().get(VKParameters.from(VKApiConst.USER_IDS, userID, VKApiConst.FIELDS,
-                    "id,first_name,last_name,photo_max_orig"
-            ));
-            current = false;
-        }
-        request.secure = false;
-        request.useSystemLanguage = true;
-        request.executeWithListener(new VKRequest.VKRequestListener() {
-            @Override
-            public void onComplete(VKResponse response) {
-                SocialPerson socialPerson = new SocialPerson();
-                try {
-                    JSONObject jsonResponse = response.json.getJSONArray("response").getJSONObject(0);
-                    getSocialPerson(socialPerson, jsonResponse);
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-                if(current){
-                    ((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_CURRENT_PERSON))
-                            .onRequestSocialPersonSuccess(getID(), socialPerson);
-                } else {
-                    ((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_PERSON))
-                        .onRequestSocialPersonSuccess(getID(), socialPerson);
-                }
-            }
-            @Override
-            public void onError(VKError error) {
-                if(current){
-                    mLocalListeners.get(REQUEST_GET_CURRENT_PERSON).onError(getID(), REQUEST_GET_CURRENT_PERSON,
-                            error.toString(), null);
-                } else {
-                    mLocalListeners.get(REQUEST_GET_PERSON).onError(getID(), REQUEST_GET_PERSON,
-                            error.toString(), null);
-                }
-            }
-
-            @Override
-            public void attemptFailed(VKRequest request, int attemptNumber, int totalAttempts) {
-                throw new SocialNetworkException("Fail in attempt person request!");
-            }
-        });
-    }
-
-    /**
-     * Request ArrayList of {@link com.github.gorbin.asne.core.persons.SocialPerson} by array of userIds
-     * @param userID array of VK users id
-     * @param onRequestSocialPersonsCompleteListener listener for array of {@link com.github.gorbin.asne.core.persons.SocialPerson} request
-     */
-    @Override
-    public void requestSocialPersons(String[] userID, OnRequestSocialPersonsCompleteListener onRequestSocialPersonsCompleteListener) {
-        super.requestSocialPersons(userID, onRequestSocialPersonsCompleteListener);
-        String userIds = TextUtils.join(",", userID);
-        VKRequest request = VKApi.users().get(VKParameters.from(VKApiConst.USER_IDS, userIds, VKApiConst.FIELDS,
-                "id,first_name,last_name,photo_max_orig"
-        ));
-        request.secure = false;
-        request.useSystemLanguage = true;
-        request.executeWithListener(new VKRequest.VKRequestListener() {
-            @Override
-            public void onComplete(VKResponse response) {
-                SocialPerson socialPerson = new SocialPerson();
-                ArrayList<SocialPerson> socialPersons = new ArrayList<SocialPerson>();
-                try {
-
-                    JSONArray jsonArray = response.json.getJSONArray("response");
-                    for (int i = 0; i < jsonArray.length(); i++) {
-                        getSocialPerson(socialPerson, jsonArray.getJSONObject(i));
-                        socialPersons.add(socialPerson);
-                        socialPerson = new SocialPerson();
-                    }
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-                ((OnRequestSocialPersonsCompleteListener) mLocalListeners.get(REQUEST_GET_PERSONS))
-                        .onRequestSocialPersonsSuccess(getID(), socialPersons);
-                mLocalListeners.remove(REQUEST_GET_PERSONS);
-            }
-            @Override
-            public void onError(VKError error) {
-                mLocalListeners.get(REQUEST_GET_PERSONS).onError(getID(), REQUEST_GET_PERSONS,
-                        error.toString(), null);
-                mLocalListeners.remove(REQUEST_GET_PERSONS);
-            }
-
-            @Override
-            public void attemptFailed(VKRequest request, int attemptNumber, int totalAttempts) {
-                mLocalListeners.remove(REQUEST_GET_PERSONS);
-                throw new SocialNetworkException("Fail in attempt person request!");
-            }
-        });
-    }
-
-    /**
-     * Request user {@link com.github.gorbin.asne.vk.VKPerson} by userId - detailed user data
-     * @param userId id of VK user
-     * @param onRequestDetailedSocialPersonCompleteListener listener for {@link com.github.gorbin.asne.vk.VKPerson} request
-     */
-    @Override
-    public void requestDetailedSocialPerson(String userId, OnRequestDetailedSocialPersonCompleteListener onRequestDetailedSocialPersonCompleteListener) {
-        super.requestDetailedSocialPerson(userId, onRequestDetailedSocialPersonCompleteListener);
-        VKRequest request;
-        if(userId == null){
-            request = VKApi.users().get(VKParameters.from(VKApiConst.FIELDS,
-                    "id,first_name,last_name,photo_max_orig,contacts,sex,bdate,city,country," +
-                            "photo_max_orig,online,screen_name,has_mobile,education,can_post," +
-                            "can_see_all_posts,can_write_private_message,status"
-            ));
-        } else {
-            request = VKApi.users().get(VKParameters.from(VKApiConst.USER_IDS, userId, VKApiConst.FIELDS,
-                "id,first_name,last_name,photo_max_orig,contacts,sex,bdate,city,country," +
-                "photo_max_orig,online,screen_name,has_mobile,education,can_post," +
-                "can_see_all_posts,can_write_private_message,status"
-        ));
-        }
-        request.secure = false;
-        request.useSystemLanguage = true;
-        request.executeWithListener(new VKRequest.VKRequestListener() {
-            @Override
-            public void onComplete(VKResponse response) {
-                VKPerson vkPerson = new VKPerson();
-                try {
-                    JSONObject jsonResponse = response.json.getJSONArray("response").getJSONObject(0);
-                    getDetailedSocialPerson(vkPerson, jsonResponse);
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-                ((OnRequestDetailedSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_DETAIL_PERSON))
-                        .onRequestDetailedSocialPersonSuccess(getID(), vkPerson);
-            }
-
-            @Override
-            public void onError(VKError error) {
-                mLocalListeners.get(REQUEST_GET_DETAIL_PERSON).onError(getID(), REQUEST_GET_DETAIL_PERSON,
-                        error.toString(), null);
-            }
-
-            @Override
-            public void onProgress(VKRequest.VKProgressType progressType,
-                                   long bytesLoaded,
-                                   long bytesTotal) {
-            }
-
-            @Override
-            public void attemptFailed(VKRequest request, int attemptNumber, int totalAttempts) {
-                throw new SocialNetworkException("Fail detailed person request!");
-            }
-        });
-    }
-
-    /**
-     * Get {@link com.github.gorbin.asne.core.persons.SocialPerson} from JSON response of VK
-     * @param socialPerson object that would be filled
-     * @param jsonResponse VK response
-     * @return filled {@link com.github.gorbin.asne.core.persons.SocialPerson}
-     * @throws JSONException
-     */
-    private SocialPerson getSocialPerson(SocialPerson socialPerson, JSONObject jsonResponse) throws JSONException {
-        String firstName = null;
-        String lastName = null;
-        if(jsonResponse.has("id")) {
-            socialPerson.id = jsonResponse.getString("id");
-            socialPerson.profileURL = "http://vk.com/id" + jsonResponse.getString("id");
-        }
-        if(jsonResponse.has("first_name")) {
-            firstName = jsonResponse.getString("first_name");
-        }
-        if(jsonResponse.has("last_name")) {
-            lastName = jsonResponse.getString("last_name");
-        }
-        socialPerson.name = firstName + " " + lastName;
-        if (jsonResponse.has("photo_max_orig")) {
-            socialPerson.avatarURL = jsonResponse.getString("photo_max_orig");
-        }
-        return socialPerson;
-    }
-
-    /**
-     * Get {@link com.github.gorbin.asne.vk.VKPerson} from JSON response of VK
-     * @param vkPerson object that would be filled
-     * @param jsonResponse VK response
-     * @return filled {@link com.github.gorbin.asne.vk.VKPerson}
-     * @throws JSONException
-     */
-    private VKPerson getDetailedSocialPerson(VKPerson vkPerson, JSONObject jsonResponse) throws JSONException {
-        getSocialPerson(vkPerson, jsonResponse);
-        if(jsonResponse.has("first_name")) {
-            vkPerson.firstName = jsonResponse.getString("first_name");
-        }
-        if(jsonResponse.has("last_name")) {
-            vkPerson.lastName = jsonResponse.getString("last_name");
-        }
-        if(jsonResponse.has("sex")) {
-            vkPerson.sex = Integer.parseInt(jsonResponse.getString("sex"));
-        }
-        if(jsonResponse.has("bdate")) {
-            vkPerson.birthday = jsonResponse.getString("bdate");
-        }
-        if((jsonResponse.has("city"))&&(jsonResponse.getJSONObject("city").has("title"))) {
-            vkPerson.city = jsonResponse.getJSONObject("city").getString("title");
-        }
-        if((jsonResponse.has("country"))&&(jsonResponse.getJSONObject("country").has("title"))) {
-            vkPerson.country = jsonResponse.getJSONObject("country").getString("title");
-        }
-        if(jsonResponse.has("photo_max_orig")) {
-            vkPerson.photoMaxOrig = jsonResponse.getString("photo_max_orig");
-        }
-        if(jsonResponse.has("online")) {
-            vkPerson.online = stringToBool(jsonResponse.getString("online"));
-        }
-        if(jsonResponse.has("screen_name")) {
-            vkPerson.username = jsonResponse.getString("screen_name");
-        }
-        if(jsonResponse.has("has_mobile")) {
-            vkPerson.hasMobile = stringToBool(jsonResponse.getString("has_mobile"));
-        }
-        if(jsonResponse.has("mobile_phone")) {
-            vkPerson.mobilePhone = jsonResponse.getString("mobile_phone");
-        }
-        if(jsonResponse.has("home_phone")) {
-            vkPerson.homePhone = jsonResponse.getString("home_phone");
-        }
-        if(jsonResponse.has("university_name")) {
-            vkPerson.universityName = jsonResponse.getString("university_name");
-        }
-        if(jsonResponse.has("faculty_name")) {
-            vkPerson.facultyName = jsonResponse.getString("faculty_name");
-        }
-        if(jsonResponse.has("graduation")) {
-            vkPerson.graduationYear = jsonResponse.getString("graduation");
-        }
-        if(jsonResponse.has("status")) {
-            vkPerson.status = jsonResponse.getString("status");
-        }
-        if(jsonResponse.has("can_post")) {
-            vkPerson.canPost = stringToBool(jsonResponse.getString("can_post"));
-        }
-        if(jsonResponse.has("can_see_all_posts")) {
-            vkPerson.canSeeAllPosts = stringToBool(jsonResponse.getString("can_see_all_posts"));
-        }
-        if(jsonResponse.has("can_write_private_message")) {
-            vkPerson.canWritePrivateMessage = stringToBool(jsonResponse.getString("can_write_private_message"));
-        }
-        return vkPerson;
-    }
-
-    /**
-     * Post message to social network
-     * @param message message that should be shared
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostMessage(String message, OnPostingCompleteListener onPostingCompleteListener) {
-        super.requestPostMessage(message, onPostingCompleteListener);
-        makePost(null, message, REQUEST_POST_MESSAGE);
-    }
-
-    /**
-     * Post photo to social network
-     * @param photo photo that should be shared
-     * @param message message that should be shared with photo
-     * @param onPostingCompleteListener listener for posting request
-     */
-	@Override
-    public void requestPostPhoto(File photo, final String message, OnPostingCompleteListener onPostingCompleteListener) {
-        super.requestPostPhoto(photo, message, onPostingCompleteListener);
-        final Bitmap vkPhoto = getPhoto(photo);
-        VKRequest request = VKApi.uploadWallPhotoRequest(new VKUploadImage(vkPhoto, VKImageParameters.pngImage()), 0, Integer.parseInt(userId));
-        request.executeWithListener(new VKRequest.VKRequestListener() {
-            @Override
-            public void onComplete(VKResponse response) {
-                VKApiPhoto photoModel = ((VKPhotoArray) response.parsedModel).get(0);
-                makePost(new VKAttachments(photoModel), message, REQUEST_POST_PHOTO);
-                vkPhoto.recycle();
-            }
-            @Override
-            public void onError(VKError error) {
-                mLocalListeners.get(REQUEST_POST_PHOTO).onError(getID(), REQUEST_POST_PHOTO,
-                        error.toString(), null);
-            }
-        });
-    }
-    
-	private Bitmap getPhoto(File photo) {
-        Bitmap b = null;
-        try {
-            b = BitmapFactory.decodeStream(new FileInputStream(photo));
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-        return b;
-    }
-
-    /**
-     * Post link with comment to social network
-     * @param bundle bundle containing information that should be shared(Bundle constants in {@link com.github.gorbin.asne.core.SocialNetwork})
-     * @param message message that should be shared with bundle
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostLink(Bundle bundle, String message, OnPostingCompleteListener onPostingCompleteListener) {
-        super.requestPostLink(bundle, message, onPostingCompleteListener);
-        VKApiLink vkLink = new VKApiLink();
-        String link = bundle.getString(BUNDLE_LINK);
-        if((link != null) && (link.length() != 0)) vkLink.url = link;
-        String name = bundle.getString(BUNDLE_NAME);
-        if((name != null) && (name.length() != 0)) vkLink.title = name;
-        String description = bundle.getString(BUNDLE_MESSAGE);
-        if((description != null) && (description.length() != 0)) vkLink.description = description;
-        String picture = bundle.getString(BUNDLE_PICTURE);
-        if((picture != null) && (picture.length() != 0)) vkLink.image_src = picture;
-
-        VKAttachments attachments = new VKAttachments();
-        attachments.add(vkLink);
-        makePost(attachments, message, REQUEST_POST_LINK);
-    }
-
-    /**
-     * Not supported via vk sdk - in development
-     * @throws SocialNetworkException
-     * @param bundle bundle containing information that should be shared(Bundle constants in {@link com.github.gorbin.asne.core.SocialNetwork})
-     * @param onPostingCompleteListener listener for posting request
-     */
-    @Override
-    public void requestPostDialog(Bundle bundle, OnPostingCompleteListener onPostingCompleteListener) {
-        throw new SocialNetworkException("requestPostDialog isn't allowed for VKSocialNetwork");
-    }
-   
-	private void makePost(VKAttachments attachments, final String message, final String requestID) {
-        VKRequest post = VKApi.wall().post(VKParameters.from(VKApiConst.ATTACHMENTS, attachments, VKApiConst.MESSAGE, message));
-        post.setModelClass(VKWallPostResult.class);
-        post.executeWithListener(new VKRequest.VKRequestListener() {
-            @Override
-            public void onComplete(VKResponse response) {
-                super.onComplete(response);
-                ((OnPostingCompleteListener) mLocalListeners.get(requestID)).onPostSuccessfully(getID());
-            }
-
-            @Override
-            public void onError(VKError error) {
-                mLocalListeners.get(requestID).onError(getID(), requestID,
-                        error.toString(), null);
-            }
-        });
-    }
-
-    /**
-     * Check if user by id is friend of current user
-     * @param userID user id that should be checked as friend of current user
-     * @param onCheckIsFriendCompleteListener listener for checking friend request
-     */
-    @Override
-    public void requestCheckIsFriend(final String userID, OnCheckIsFriendCompleteListener onCheckIsFriendCompleteListener) {
-        super.requestCheckIsFriend(userID, onCheckIsFriendCompleteListener);
-        VKRequest request = VKApi.friends().areFriends(VKParameters.from(VKApiConst.USER_IDS, userID, VKApiConst.FIELDS,
-                "id"));
-        request.executeWithListener(new VKRequest.VKRequestListener() {
-            @Override
-            public void onComplete(VKResponse response) {
-                boolean isFriend = false;
-                JSONObject jsonResponse;
-                try {
-                    jsonResponse = response.json.getJSONArray("response").getJSONObject(0);
-                    int friendStatus2 = jsonResponse.getInt("friend_status");
-                    switch(friendStatus2) {
-                        case 0:
-                            isFriend = false;
-                            break;
-                        case 1:
-                            isFriend = false;
-                            break;
-                        case 2:
-                            isFriend = false;
-                            break;
-                        case 3:
-                            isFriend = true;
-                            break;
-                    }
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-                ((OnCheckIsFriendCompleteListener) mLocalListeners.get(REQUEST_CHECK_IS_FRIEND))
-                        .onCheckIsFriendComplete(
-                                getID(),
-                                userID,
-                                isFriend
-                        );
-                mLocalListeners.remove(REQUEST_CHECK_IS_FRIEND);
-            }
-            @Override
-            public void onError(VKError error) {
-                throw new SocialNetworkException("Error in getting friends! " + error);
-            }
-        });
-
-    }
-
-    /**
-     * Get current user friends list
-     * @param onRequestGetFriendsCompleteListener listener for getting list of current user friends
-     */
-	@Override
-    public void requestGetFriends(OnRequestGetFriendsCompleteListener onRequestGetFriendsCompleteListener) {
-        super.requestGetFriends(onRequestGetFriendsCompleteListener);
-        VKRequest request = VKApi.friends().get(VKParameters.from(VKApiConst.FIELDS,
-                "id,first_name,last_name,photo_max_orig"));
-        request.executeWithListener(new VKRequest.VKRequestListener() {
-            @Override
-            public void onComplete(VKResponse response) {
-                JSONObject jsonResponse;
-                String[] ids = new String[0];
-                SocialPerson socialPerson = new SocialPerson();
-                ArrayList<SocialPerson> socialPersons = new ArrayList<SocialPerson>();
-                try {
-                    jsonResponse = response.json.getJSONObject("response");
-                    JSONArray jsonArray = jsonResponse.getJSONArray("items");
-                    ids = new String[jsonArray.length()];
-                    for (int i = 0; i < jsonArray.length(); i++) {
-                        ids[i] = jsonArray.getJSONObject(i).getString("id");
-                        getSocialPerson(socialPerson, jsonArray.getJSONObject(i));
-                        socialPersons.add(socialPerson);
-                        socialPerson = new SocialPerson();
-                    }
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-                ((OnRequestGetFriendsCompleteListener) mLocalListeners.get(REQUEST_GET_FRIENDS))
-                    .OnGetFriendsIdComplete(getID(), ids);
-                ((OnRequestGetFriendsCompleteListener) mLocalListeners.get(REQUEST_GET_FRIENDS))
-                        .OnGetFriendsComplete(getID(), socialPersons);
-                mLocalListeners.remove(REQUEST_GET_FRIENDS);
-            }
-            @Override
-            public void onError(VKError error) {
-                mLocalListeners.get(REQUEST_GET_FRIENDS).onError(getID(), REQUEST_GET_FRIENDS,
-                        error.toString(), null);
-            }
-        });
-    }
-
-    /**
-     * Invite friend by id to current user
-     * @param userID id of user that should be invited
-     * @param onRequestAddFriendCompleteListener listener for invite result
-     */
-    @Override
-    public void requestAddFriend(final String userID, OnRequestAddFriendCompleteListener onRequestAddFriendCompleteListener) {
-        super.requestAddFriend(userID, onRequestAddFriendCompleteListener);
-        VKRequest request = VKApi.friends().add(VKParameters.from(VKApiConst.USER_ID, userID));
-        request.executeWithListener(new VKRequest.VKRequestListener() {
-            @Override
-            public void onComplete(VKResponse response) {
-                ((OnRequestAddFriendCompleteListener) mLocalListeners.get(REQUEST_ADD_FRIEND))
-                        .onRequestAddFriendComplete(
-                                getID(),
-                                userID
-                        );
-                mLocalListeners.remove(REQUEST_ADD_FRIEND);
-            }
-            @Override
-            public void onError(VKError error) {
-                mLocalListeners.get(REQUEST_ADD_FRIEND).onError(getID(), REQUEST_ADD_FRIEND,
-                        error.toString(), null);
-            }
-        });
-    }
-
-    /**
-     * Remove friend by id from current user friends
-     * @param userID user id that should be removed from friends
-     * @param onRequestRemoveFriendCompleteListener listener to remove friend request response
-     */
-    @Override
-    public void requestRemoveFriend(final String userID, OnRequestRemoveFriendCompleteListener onRequestRemoveFriendCompleteListener) {
-        super.requestRemoveFriend(userID, onRequestRemoveFriendCompleteListener);
-        VKRequest request = VKApi.friends().delete(VKParameters.from(VKApiConst.USER_ID, userID));
-        request.executeWithListener(new VKRequest.VKRequestListener() {
-            @Override
-            public void onComplete(VKResponse response) {
-                ((OnRequestRemoveFriendCompleteListener) mLocalListeners.get(REQUEST_REMOVE_FRIEND))
-                        .onRequestRemoveFriendComplete(
-                                getID(),
-                                userID
-                        );
-                mLocalListeners.remove(REQUEST_REMOVE_FRIEND);
-            }
-            @Override
-            public void onError(VKError error) {
-                mLocalListeners.get(REQUEST_REMOVE_FRIEND).onError(getID(), REQUEST_REMOVE_FRIEND,
-                        error.toString(), null);
-            }
-        });
-    }
-
-    /**
-     * Overrided for connect vk to activity
-     * @param savedInstanceState If the activity is being re-initialized after previously being shut down then this Bundle contains the data it most recently supplied in onSaveInstanceState(Bundle). Note: Otherwise it is null.
-     */
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        activity = mSocialNetworkManager.getActivity();
-        VKUIHelper.onCreate(activity);
-        VKSdk.initialize(vkSdkListener, key);
-        VKSdk.wakeUpSession();
-        if(isConnected()) {
-            userId = mSharedPreferences.getString(SAVE_STATE_KEY_USER_ID, null);
-            if(userId == null){
-                requestIdPerson();
-            }
-        }
-    }
-
-    /**
-     * Overrided for VK support
-     */
-    @Override
-    public void onResume() {
-        super.onResume();
-        VKUIHelper.onResume(activity);
-    }
-
-    /**
-     * Overrided for VK support
-     */
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        VKUIHelper.onDestroy(activity);
-    }
-
-    /**
-     * Overrided for VK support
-     * @param requestCode The integer request code originally supplied to startActivityForResult(), allowing you to identify who this result came from.
-     * @param resultCode The integer result code returned by the child activity through its setResult().
-     * @param data An Intent, which can return result data to the caller (various data can be attached to Intent "extras").
-     */
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        int sanitizedRequestCode = requestCode % 0x10000;
-        VKUIHelper.onActivityResult(sanitizedRequestCode, resultCode, data);
-    }
-}
