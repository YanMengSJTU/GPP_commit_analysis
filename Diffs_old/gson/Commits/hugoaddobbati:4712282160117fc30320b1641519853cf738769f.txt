diff --git a/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java b/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java
index 56696507c..6221894d1 100644
--- a/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java
+++ b/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java
@@ -358,7 +358,7 @@ private void rebalance(Node<K, V> unbalanced, boolean insert) {
 
 			int delta = leftHeight - rightHeight;
 			if (delta == -2) {
-				int rightDelta = deltaMinusTwo(right);
+				int rightDelta = deltaTwo(right);
 				if (rightDelta == -1 || (rightDelta == 0 && !insert)) {
 					rotateLeft(node); // AVL right right
 				} else {
@@ -371,7 +371,19 @@ private void rebalance(Node<K, V> unbalanced, boolean insert) {
 				}
 
 			} else if (delta == 2) {
-				deltaTwo(insert, node, left);
+				Node<K, V> leftLeft = left.left;
+				Node<K, V> leftRight = left.right;
+				int leftRightHeight = leftRight != null ? leftRight.height : 0;
+				int leftLeftHeight = leftLeft != null ? leftLeft.height : 0;
+
+				int leftDelta = leftLeftHeight - leftRightHeight;
+				if (leftDelta == 1 || (leftDelta == 0 && !insert)) {
+					rotateRight(node); // AVL left left
+				} else {
+					assert (leftDelta == -1);
+					rotateLeft(left); // AVL left right
+					rotateRight(node);
+				}
 				if (insert) {
 					break; // no further rotations will be necessary
 				}
@@ -392,23 +404,7 @@ private void rebalance(Node<K, V> unbalanced, boolean insert) {
 		}
 	}
 
-	private void deltaTwo(boolean insert, Node<K, V> node, Node<K, V> left) {
-		Node<K, V> leftLeft = left.left;
-		Node<K, V> leftRight = left.right;
-		int leftRightHeight = leftRight != null ? leftRight.height : 0;
-		int leftLeftHeight = leftLeft != null ? leftLeft.height : 0;
-
-		int leftDelta = leftLeftHeight - leftRightHeight;
-		if (leftDelta == 1 || (leftDelta == 0 && !insert)) {
-			rotateRight(node); // AVL left left
-		} else {
-			assert (leftDelta == -1);
-			rotateLeft(left); // AVL left right
-			rotateRight(node);
-		}
-	}
-
-	private int deltaMinusTwo(Node<K, V> right) {
+	private int deltaTwo(Node<K, V> right) {
 		Node<K, V> rightLeft = right.left;
 		Node<K, V> rightRight = right.right;
 		int rightRightHeight = rightRight != null ? rightRight.height : 0;
diff --git a/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java b/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
index 580d25a57..f92176a04 100644
--- a/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
+++ b/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
@@ -103,7 +103,9 @@ public void testLargeSetOfRandomKeys() throws Exception {
     LinkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();
     String[] keys = new String[1000];
     for (int i = 0; i < keys.length; i++) {
-      keys[i] = Integer.toString(Math.abs(random.nextInt()), 36) + "-" + i;
+      int n = random.nextInt();
+      if(n == Integer.MIN_VALUE) n++;
+      keys[i] = Integer.toString(Math.abs(n), 36) + "-" + i;
       map.put(keys[i], "" + i);
     }
 
