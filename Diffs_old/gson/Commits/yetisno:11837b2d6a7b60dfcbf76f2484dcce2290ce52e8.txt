diff --git a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
index aa253340a..51c05196e 100644
--- a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
@@ -39,6 +39,7 @@
   private final DateFormat enUsFormat;
   private final DateFormat localFormat;
   private final DateFormat iso8601Format;
+  private final DateFormat iso8601FormatMilli;
 
   DefaultDateTypeAdapter() {
     this(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US),
@@ -63,6 +64,8 @@ public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {
     this.localFormat = localFormat;
     this.iso8601Format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.US);
     this.iso8601Format.setTimeZone(TimeZone.getTimeZone("UTC"));
+    this.iso8601FormatMilli = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.US);
+    this.iso8601FormatMilli.setTimeZone(TimeZone.getTimeZone("UTC"));
   }
 
   // These methods need to be synchronized since JDK DateFormat classes are not thread-safe
@@ -101,6 +104,10 @@ private Date deserializeToDate(JsonElement json) {
         return enUsFormat.parse(json.getAsString());
       } catch (ParseException ignored) {
       }
+      try {
+        return iso8601FormatMilli.parse(json.getAsString());
+      } catch (ParseException ignored) {
+      }
       try {
         return iso8601Format.parse(json.getAsString());
       } catch (ParseException e) {
diff --git a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
index f25717246..536d13e6f 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
@@ -51,6 +51,7 @@
   private final DateFormat localFormat
       = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT);
   private final DateFormat iso8601Format = buildIso8601Format();
+  private final DateFormat iso8601FormatMilli = buildIso8601FormatMilli();
 
   private static DateFormat buildIso8601Format() {
     DateFormat iso8601Format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.US);
@@ -58,6 +59,12 @@ private static DateFormat buildIso8601Format() {
     return iso8601Format;
   }
 
+  private static DateFormat buildIso8601FormatMilli() {
+    DateFormat iso8601FormatMilli = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.US);
+    iso8601FormatMilli.setTimeZone(TimeZone.getTimeZone("UTC"));
+    return iso8601FormatMilli;
+  }
+
   @Override public Date read(JsonReader in) throws IOException {
     if (in.peek() == JsonToken.NULL) {
       in.nextNull();
@@ -75,6 +82,10 @@ private synchronized Date deserializeToDate(String json) {
       return enUsFormat.parse(json);
     } catch (ParseException ignored) {
     }
+    try {
+      return iso8601FormatMilli.parse(json);
+    } catch (ParseException ignored) {
+    }
     try {
       return iso8601Format.parse(json);
     } catch (ParseException e) {
