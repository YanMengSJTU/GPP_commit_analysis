diff --git a/gson/src/main/java/com/google/gson/DateFormatType.java b/gson/src/main/java/com/google/gson/DateFormatType.java
index fbf34b15d..e85f9fd1d 100644
--- a/gson/src/main/java/com/google/gson/DateFormatType.java
+++ b/gson/src/main/java/com/google/gson/DateFormatType.java
@@ -1,5 +1,5 @@
 package com.google.gson;
 
 public enum DateFormatType {
-	EN_US, LOCAL, ISO_8601, CUSTOM;
+	DEFAULT, EN_US, LOCAL, ISO_8601, CUSTOM;
 }
diff --git a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
index 020fa0cb3..ff79121a3 100644
--- a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
@@ -41,7 +41,8 @@
 
   // TODO: migrate to streaming adapter
 	
-	private final EnumMap<DateFormatType, DateFormatter> dateFormats;
+	private final EnumMap<DateFormatType, DateFormatter> dateFormatters;
+	private final EnumSet<DateFormatType> dateParsersToUse;
 	private final DateFormatType outputDateFormatType;
 
   DefaultDateTypeAdapter() {
@@ -67,7 +68,8 @@
   
   DefaultDateTypeAdapter(DateFormat dateFormat, DateFormatType outputFormatType) {
   	this(outputFormatType);
-    dateFormats.put(DateFormatType.CUSTOM, new SimpleDateFormatter(dateFormat));
+    dateFormatters.put(DateFormatType.CUSTOM, new SimpleDateFormatter(dateFormat));
+    dateParsersToUse.add(DateFormatType.CUSTOM);
   }
   
   DefaultDateTypeAdapter(DateFormat dateFormat) {
@@ -95,21 +97,26 @@ public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {
   DefaultDateTypeAdapter(DateFormat enUsFormat, DateFormat localFormat, DateFormatType outputFormat) {
   	
   	// Make sure every DateFormatType is present in dateFormats
-  	dateFormats = new EnumMap<DateFormatType, DateFormatter>(DateFormatType.class);
-  	SimpleDateFormatter usFormatter = new SimpleDateFormatter(enUsFormat);
-  	dateFormats.put(DateFormatType.EN_US, usFormatter);
+  	dateFormatters = new EnumMap<DateFormatType, DateFormatter>(DateFormatType.class);
+  	SimpleDateFormatter enUsFormatter = new SimpleDateFormatter(enUsFormat);
+  	dateFormatters.put(DateFormatType.EN_US, enUsFormatter);
   	
-  	// Set Custom to US to prevent null pointer
-  	dateFormats.put(DateFormatType.CUSTOM, usFormatter);
-  	dateFormats.put(DateFormatType.LOCAL, new SimpleDateFormatter(localFormat));
-  	dateFormats.put(DateFormatType.ISO_8601, ISO8601DateFormater.getInstance());
+  	// Set Custom and Default to EN-US to prevent null pointer
+  	dateFormatters.put(DateFormatType.CUSTOM, enUsFormatter);
+  	dateFormatters.put(DateFormatType.DEFAULT, enUsFormatter);
+  	
+  	dateFormatters.put(DateFormatType.LOCAL, new SimpleDateFormatter(localFormat));
+  	dateFormatters.put(DateFormatType.ISO_8601, ISO8601DateFormater.getInstance());
+  	
+  	// Date type formatters to use. Prevents repeating parsing when Default or Custom are set to EN-US.
+  	dateParsersToUse = EnumSet.of(DateFormatType.EN_US, DateFormatType.LOCAL, DateFormatType.ISO_8601);
   	
   	outputDateFormatType = outputFormat;
   }
 
   @Override
   public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {
-  	String dateFormatAsString = dateFormats.get(outputDateFormatType).format(src);
+  	String dateFormatAsString = dateFormatters.get(outputDateFormatType).format(src);
   	return new JsonPrimitive(dateFormatAsString);
   }
 
@@ -136,8 +143,9 @@ private Date deserializeToDate(JsonElement json) {
   	
   	ParseException parseExc = null; // Hopefully will not be used
   	
-  	for(DateFormatter dateFormatter : dateFormats.values() )
+  	for(DateFormatType dateFormatType : dateParsersToUse )
   	{
+  		DateFormatter dateFormatter = dateFormatters.get(dateFormatType);
   		try{
   			return dateFormatter.parse(jsonString);
   		} catch (ParseException e) {
@@ -152,7 +160,7 @@ private Date deserializeToDate(JsonElement json) {
   public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append(DefaultDateTypeAdapter.class.getSimpleName());
-    sb.append('(').append(dateFormats.get(DateFormatType.LOCAL).toString()).append(')');
+    sb.append('(').append(dateFormatters.get(DateFormatType.LOCAL).toString()).append(')');
     return sb.toString();
   }
 }
diff --git a/gson/src/main/java/com/google/gson/GsonBuilder.java b/gson/src/main/java/com/google/gson/GsonBuilder.java
index 7d2444aa0..651353717 100644
--- a/gson/src/main/java/com/google/gson/GsonBuilder.java
+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java
@@ -77,7 +77,7 @@
   private boolean serializeNulls;
   private String datePattern;
   private DateFormat customDateFormat;
-  private DateFormatType outputDateFormatType = DateFormatType.EN_US;
+  private DateFormatType outputDateFormatType = DateFormatType.DEFAULT;
   private int dateStyle = DateFormat.DEFAULT;
   private int timeStyle = DateFormat.DEFAULT;
   private boolean complexMapKeySerialization;
@@ -429,17 +429,15 @@ public GsonBuilder setDateFormat(int style) {
     return this;
   }
   
-  // TODO
   /**
    * Configures Gson to serialize {@code Date} objects according to the date format type value provided.
    *
    * <p>Note that this style value should be one of the predefined constants in the
    * {@code DateFormatType} class.</p>
    *
-   * @param outputDateFormatType the predefined date format type that date objects will be serialized
-   * to/from
+   * @param outputDateFormatType the predefined date format type that date objects will be serialized to
    * @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern
-   * @since 1.2
+   * @since 2.6
    */
   public GsonBuilder setDateFormatType(DateFormatType outputDateFormatType) {
     this.outputDateFormatType = outputDateFormatType;
@@ -599,6 +597,8 @@ private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeS
       dateTypeAdapter = new DefaultDateTypeAdapter(datePattern, outputDateFormatType);
     } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {
       dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle, timeStyle, outputDateFormatType);
+    } else if (outputDateFormatType != DateFormatType.DEFAULT) {
+    	dateTypeAdapter = new DefaultDateTypeAdapter(outputDateFormatType);
     } else {
       return;
     }
diff --git a/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java b/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
index 04cfc27d7..b5e3091fa 100644
--- a/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
+++ b/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
@@ -79,6 +79,23 @@ public void testOutputFormattedWithCustomDateFormatType()
     }
   }
   
+  public void testDefaultOutputFormatterIsEnUs()
+  {
+  	TimeZone defaultTimeZone = TimeZone.getDefault();
+    TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
+    Locale defaultLocale = Locale.getDefault();
+    Locale.setDefault(Locale.US);
+    
+    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
+  	DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(dateFormat, DateFormatType.DEFAULT);
+    try {
+    	assertFormatted("Jan 1, 1970 12:00:00 AM", dateTypeAdapter);
+    } finally {
+      TimeZone.setDefault(defaultTimeZone);
+      Locale.setDefault(defaultLocale);
+    }
+  }
+  
   public void testOutputNotFormattedWithCustomDateFormat()
   {
   	TimeZone defaultTimeZone = TimeZone.getDefault();
