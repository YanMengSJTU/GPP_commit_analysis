diff --git a/gson/src/main/java/com/google/gson/DateFormatType.java b/gson/src/main/java/com/google/gson/DateFormatType.java
index e85f9fd1d..ead789ef5 100644
--- a/gson/src/main/java/com/google/gson/DateFormatType.java
+++ b/gson/src/main/java/com/google/gson/DateFormatType.java
@@ -1,5 +1,5 @@
 package com.google.gson;
 
 public enum DateFormatType {
-	DEFAULT, EN_US, LOCAL, ISO_8601, CUSTOM;
+	CUSTOM, EN_US, LOCAL, ISO_8601, MILLIS, UNIX, DEFAULT;
 }
diff --git a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
index ff79121a3..038629d78 100644
--- a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
@@ -94,7 +94,7 @@ public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {
         DateFormatType.EN_US);
   }
 
-  DefaultDateTypeAdapter(DateFormat enUsFormat, DateFormat localFormat, DateFormatType outputFormat) {
+  DefaultDateTypeAdapter(DateFormat enUsFormat, DateFormat localFormat, DateFormatType outputDateFormatType) {
   	
   	// Make sure every DateFormatType is present in dateFormats
   	dateFormatters = new EnumMap<DateFormatType, DateFormatter>(DateFormatType.class);
@@ -106,12 +106,19 @@ public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {
   	dateFormatters.put(DateFormatType.DEFAULT, enUsFormatter);
   	
   	dateFormatters.put(DateFormatType.LOCAL, new SimpleDateFormatter(localFormat));
-  	dateFormatters.put(DateFormatType.ISO_8601, ISO8601DateFormater.getInstance());
+  	dateFormatters.put(DateFormatType.ISO_8601, ISO8601DateFormatter.getInstance());
+  	dateFormatters.put(DateFormatType.UNIX, UnixDateFormatter.getInstance());
+  	dateFormatters.put(DateFormatType.MILLIS, MillisDateFormatter.getInstance());
   	
   	// Date type formatters to use. Prevents repeating parsing when Default or Custom are set to EN-US.
   	dateParsersToUse = EnumSet.of(DateFormatType.EN_US, DateFormatType.LOCAL, DateFormatType.ISO_8601);
   	
-  	outputDateFormatType = outputFormat;
+  	// Add date formatter for millis or unix. Millis as default.
+  	DateFormatType formatForLong = outputDateFormatType == DateFormatType.UNIX ? outputDateFormatType : DateFormatType.MILLIS;
+  	dateParsersToUse.add(formatForLong);
+  	
+  	//
+  	this.outputDateFormatType = outputDateFormatType;
   }
 
   @Override
diff --git a/gson/src/main/java/com/google/gson/ISO8601DateFormatter.java b/gson/src/main/java/com/google/gson/ISO8601DateFormatter.java
index 4b0b7dfa1..193e28304 100644
--- a/gson/src/main/java/com/google/gson/ISO8601DateFormatter.java
+++ b/gson/src/main/java/com/google/gson/ISO8601DateFormatter.java
@@ -6,11 +6,11 @@
 
 import com.google.gson.internal.bind.util.ISO8601Utils;
 
-final class ISO8601DateFormater implements DateFormatter
+final class ISO8601DateFormatter implements DateFormatter
 {
-	private ISO8601DateFormater(){};
+	private ISO8601DateFormatter(){};
 	
-	private final static ISO8601DateFormater INSTANCE = new ISO8601DateFormater();
+	private final static ISO8601DateFormatter INSTANCE = new ISO8601DateFormatter();
 	
 	@Override
 	public String format(Date date) {
@@ -22,7 +22,7 @@ public Date parse(String dateAsString) throws ParseException {
 		return ISO8601Utils.parse(dateAsString, new ParsePosition(0));
 	}
 	
-	public static ISO8601DateFormater getInstance()
+	public static ISO8601DateFormatter getInstance()
 	{
 		return INSTANCE;
 	}
diff --git a/gson/src/main/java/com/google/gson/MillisDateFormatter.java b/gson/src/main/java/com/google/gson/MillisDateFormatter.java
new file mode 100644
index 000000000..10d1ae039
--- /dev/null
+++ b/gson/src/main/java/com/google/gson/MillisDateFormatter.java
@@ -0,0 +1,27 @@
+package com.google.gson;
+
+import java.util.Date;
+
+final class MillisDateFormatter implements DateFormatter
+{
+private MillisDateFormatter(){};
+	
+	private final static MillisDateFormatter INSTANCE = new MillisDateFormatter();
+
+	@Override
+	public String format(Date date) {
+		return Long.toString(date.getTime());
+	}
+
+	@Override
+	public Date parse(String dateAsString) {
+		Long seconds = Long.parseLong(dateAsString);
+		return new Date(seconds);
+	}
+	
+	public static MillisDateFormatter getInstance()
+	{
+		return INSTANCE;
+	}
+	
+}
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/UnixDateFormatter.java b/gson/src/main/java/com/google/gson/UnixDateFormatter.java
index b2c080c80..ab132a32e 100644
--- a/gson/src/main/java/com/google/gson/UnixDateFormatter.java
+++ b/gson/src/main/java/com/google/gson/UnixDateFormatter.java
@@ -2,8 +2,11 @@
 
 import java.util.Date;
 
-final class UnixDateFormat implements DateFormatter
+final class UnixDateFormatter implements DateFormatter
 {
+private UnixDateFormatter(){};
+	
+	private final static UnixDateFormatter INSTANCE = new UnixDateFormatter();
 
 	@Override
 	public String format(Date date) {
@@ -16,4 +19,9 @@ public Date parse(String dateAsString) {
 		return new Date(seconds * 1000);
 	}
 	
+	public static UnixDateFormatter getInstance()
+	{
+		return INSTANCE;
+	}
+	
 }
\ No newline at end of file
diff --git a/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java b/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
index b5e3091fa..89bdc0f04 100644
--- a/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
+++ b/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
@@ -96,6 +96,54 @@ public void testDefaultOutputFormatterIsEnUs()
     }
   }
   
+  public void testUnixDateFormatParsedAndFormatted()
+  {
+  	DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(DateFormatType.UNIX);
+  	assertParsed("0", dateTypeAdapter);
+    assertFormatted("0", dateTypeAdapter);
+  }
+  
+  public void testUnixDateFormatParsedAndFormattedAnotherDate()
+  {
+  	DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(DateFormatType.UNIX);
+    Long someMillis = 1448603783413L;
+    String someSecondsStr = "1448603783";
+    assertEquals(someSecondsStr, adapter.serialize(new Date(someMillis), Date.class, null).getAsString());
+    assertEquals(someSecondsStr,
+    		new Date(Long.parseLong(someSecondsStr) * 1000),
+    		adapter.deserialize(new JsonPrimitive(someSecondsStr), Date.class, null));
+  }
+  
+  public void testMillisecondsDateFormatParsedAndFormatted()
+  {
+  	DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(DateFormatType.MILLIS);
+    Long someMillis = 1448603783413L;
+    String someSecondsStr = "1448603783413";
+    assertEquals(someSecondsStr, adapter.serialize(new Date(someMillis), Date.class, null).getAsString());
+    assertEquals(someSecondsStr,
+    		new Date(Long.parseLong(someSecondsStr)),
+    		adapter.deserialize(new JsonPrimitive(someSecondsStr), Date.class, null));
+  }
+  
+  public void testMillisecondsDateFormatParsedWithDefaultConfig()
+  {
+		TimeZone defaultTimeZone = TimeZone.getDefault();
+		TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
+
+		try {
+			DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(DateFormatType.EN_US);
+			Long someMillis = 1448603783413L; // Fri Nov 27 2015 05:56:23 in UTC
+			String someSecondsStr = "1448603783413";
+			// assert formatted US
+			assertEquals("Nov 27, 2015 5:56:23 AM", adapter.serialize(new Date(someMillis), Date.class, null).getAsString());
+			// assert parsed millis
+			assertEquals(someSecondsStr, new Date(Long.parseLong(someSecondsStr)),
+					adapter.deserialize(new JsonPrimitive(someSecondsStr), Date.class, null));
+		} finally {
+			TimeZone.setDefault(defaultTimeZone);
+		}
+  }
+  
   public void testOutputNotFormattedWithCustomDateFormat()
   {
   	TimeZone defaultTimeZone = TimeZone.getDefault();
