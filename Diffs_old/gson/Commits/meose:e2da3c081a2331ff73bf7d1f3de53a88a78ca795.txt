diff --git a/gson/src/main/java/com/google/gson/annotations/JsonUseMethods.java b/gson/src/main/java/com/google/gson/annotations/JsonSpecialRules.java
similarity index 96%
rename from gson/src/main/java/com/google/gson/annotations/JsonUseMethods.java
rename to gson/src/main/java/com/google/gson/annotations/JsonSpecialRules.java
index 9404a8fe7..10ead5ad6 100644
--- a/gson/src/main/java/com/google/gson/annotations/JsonUseMethods.java
+++ b/gson/src/main/java/com/google/gson/annotations/JsonSpecialRules.java
@@ -25,6 +25,6 @@
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE})
-public @interface JsonUseMethods {
+public @interface JsonSpecialRules {
 
 }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
index ca36d1ba9..8e966ecf5 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -23,7 +23,7 @@
 import com.google.gson.TypeAdapterFactory;
 import com.google.gson.annotations.JsonAdapter;
 import com.google.gson.annotations.JsonConnectTo;
-import com.google.gson.annotations.JsonUseMethods;
+import com.google.gson.annotations.JsonSpecialRules;
 import com.google.gson.annotations.SerializedName;
 import com.google.gson.internal.$Gson$Types;
 import com.google.gson.internal.ConstructorConstructor;
@@ -138,11 +138,11 @@ private static boolean isSetter(Method method) {
     final TypeAdapter<?> typeAdapter = mapped;
 
     Class<?> aclass = field.getDeclaringClass();
-    JsonUseMethods jsonUseMethods = aclass.getAnnotation(JsonUseMethods.class);
+    JsonSpecialRules jsonSpecialRules = aclass.getAnnotation(JsonSpecialRules.class);
 
     List<Method> getters = new ArrayList<>();
     List<Method> setters = new ArrayList<>();
-    boolean isUsingMethods = jsonUseMethods != null;
+    boolean isUsingMethods = jsonSpecialRules != null;
 
     if (isUsingMethods) {
       for(Method m : field.getDeclaringClass().getMethods()) {
