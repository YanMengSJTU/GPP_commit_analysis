diff --git a/gson/src/main/java/com/google/gson/JsonObject.java b/gson/src/main/java/com/google/gson/JsonObject.java
index d4feb96e8..fa77d50f4 100644
--- a/gson/src/main/java/com/google/gson/JsonObject.java
+++ b/gson/src/main/java/com/google/gson/JsonObject.java
@@ -59,14 +59,43 @@ public void add(String property, JsonElement value) {
   }
 
   /**
-   * Removes the {@code property} from this {@link JsonObject}.
+   * Removes a list of {@code properties} from this {@link JsonObject}.
    *
-   * @param property name of the member that should be removed.
+   * @param properties list of members that should be removed.
    * @return the {@link JsonElement} object that is being removed.
-   * @since 1.3
    */
-  public JsonElement remove(String property) {
-    return members.remove(property);
+  public JsonElement remove(String... properties){
+    JsonElement result = this;
+    for (String property : properties) {
+      result = members.remove(property);
+    }
+    return result;
+  }
+
+  /**
+   * Replace the {@code value} for the corresponding key in the JsonObject
+   * @param key key
+   * @param value new value
+   */
+  public void replace(String key, JsonElement value){
+    members.replace(key, value);
+  }
+
+  /**
+   * Replace the {@code value} for the corresponding key in the JsonObject
+   * @param key key
+   * @param value new value
+   */
+  public void replace(String key, String value){
+    members.replace(key, value == null ? JsonNull.INSTANCE : new JsonPrimitive(value));
+  }
+
+  public void replaceKey(String oldKey, String newKey){
+    if(members.containsKey(oldKey)){
+      JsonElement temp = members.get(oldKey);
+      members.remove(oldKey);
+      members.put(newKey,temp);
+    }
   }
 
   /**
@@ -192,10 +221,28 @@ public JsonObject getAsJsonObject(String memberName) {
     return (JsonObject) members.get(memberName);
   }
 
+  /**
+   * Equals comparing each value regardless their order
+   * @param o object to compare
+   * @return result of the comparison
+   */
   @Override
   public boolean equals(Object o) {
-    return (o == this) || (o instanceof JsonObject
-        && ((JsonObject) o).members.equals(members));
+    if(o == this) return true;
+    if(o == null) return false;
+    if(o instanceof JsonObject){
+      JsonObject jsonObject = (JsonObject) o;
+      if(jsonObject.size() != this.size()) return false;
+      if(!members.isEmpty()){
+        for(Map.Entry<String,JsonElement> entry : members.entrySet()){
+          String key = entry.getKey();
+          JsonElement value = entry.getValue();
+          if(value == null || value.equals(jsonObject.get(key)))
+            return false;
+        }
+      }
+    }
+    return true;
   }
 
   @Override
