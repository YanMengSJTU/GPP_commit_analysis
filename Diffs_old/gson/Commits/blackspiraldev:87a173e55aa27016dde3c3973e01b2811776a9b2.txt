diff --git a/gson/src/main/java/com/google/stripped/gson/Gson.java b/gson/src/main/java/com/google/stripped/gson/Gson.java
index c4ec109e8..56d6ea5cb 100644
--- a/gson/src/main/java/com/google/stripped/gson/Gson.java
+++ b/gson/src/main/java/com/google/stripped/gson/Gson.java
@@ -196,6 +196,8 @@ public Gson() {
     // type adapters for basic platform types
     factories.add(TypeAdapters.STRING_FACTORY);
     factories.add(TypeAdapters.INTEGER_FACTORY);
+    TypeAdapter<Number> longAdapter = longAdapter(longSerializationPolicy);
+    factories.add(TypeAdapters.newFactory(long.class, Long.class, longAdapter));
     factories.add(TypeAdapters.BOOLEAN_FACTORY);
     factories.add(ArrayTypeAdapter.FACTORY);
     factories.add(TypeAdapters.CLASS_FACTORY);
@@ -210,6 +212,31 @@ public Gson() {
     this.factories = Collections.unmodifiableList(factories);
   }
 
+  private static TypeAdapter<Number> longAdapter(LongSerializationPolicy longSerializationPolicy) {
+    if (longSerializationPolicy == LongSerializationPolicy.DEFAULT) {
+      return TypeAdapters.LONG;
+    }
+    return new TypeAdapter<Number>() {
+      @Override
+      public Number read(JsonReader in) throws IOException {
+        if (in.peek() == JsonToken.NULL) {
+          in.nextNull();
+          return null;
+        }
+        return in.nextLong();
+      }
+
+      @Override
+      public void write(JsonWriter out, Number value) throws IOException {
+        if (value == null) {
+          out.nullValue();
+          return;
+        }
+        out.value(value.toString());
+      }
+    };
+  }
+
   /**
    * Returns the type adapter for {@code} type.
    *
diff --git a/gson/src/main/java/com/google/stripped/gson/internal/bind/TypeAdapters.java b/gson/src/main/java/com/google/stripped/gson/internal/bind/TypeAdapters.java
index 7f98b57b2..0b0936d8c 100644
--- a/gson/src/main/java/com/google/stripped/gson/internal/bind/TypeAdapters.java
+++ b/gson/src/main/java/com/google/stripped/gson/internal/bind/TypeAdapters.java
@@ -135,6 +135,25 @@ public void write(JsonWriter out, Number value) throws IOException {
       = newFactory(int.class, Integer.class, INTEGER);
 
 
+  public static final TypeAdapter<Number> LONG = new TypeAdapter<Number>() {
+    @Override
+    public Number read(JsonReader in) throws IOException {
+      if (in.peek() == JsonToken.NULL) {
+        in.nextNull();
+        return null;
+      }
+      try {
+        return in.nextLong();
+      } catch (NumberFormatException e) {
+        throw new JsonSyntaxException(e);
+      }
+    }
+    @Override
+    public void write(JsonWriter out, Number value) throws IOException {
+      out.value(value);
+    }
+  };
+
   public static final TypeAdapter<String> STRING = new TypeAdapter<String>() {
     @Override
     public String read(JsonReader in) throws IOException {
