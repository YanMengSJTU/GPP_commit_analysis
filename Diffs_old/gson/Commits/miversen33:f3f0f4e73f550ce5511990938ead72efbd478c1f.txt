diff --git a/gson/src/main/java/com/google/gson/GsonBuilder.java b/gson/src/main/java/com/google/gson/GsonBuilder.java
index b97be452b..fef4bbbbc 100644
--- a/gson/src/main/java/com/google/gson/GsonBuilder.java
+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java
@@ -286,6 +286,16 @@ public GsonBuilder disableInnerClassSerialization() {
     return this;
   }
 
+  /**
+   * Configures Gson to include local and/or anonymous classes for serialization
+   * @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern
+   * @since 2.1
+   */
+  public GsonBuilder enableLocalOrAnonClassSerialization(){
+    excluder = excluder.enableAnonOrLocalClassSerialization();
+    return this;
+  }
+
   /**
    * Configures Gson to apply a specific serialization policy for {@code Long} and {@code long}
    * objects.
diff --git a/gson/src/main/java/com/google/gson/internal/Excluder.java b/gson/src/main/java/com/google/gson/internal/Excluder.java
index 6b83757ed..1dd31a474 100644
--- a/gson/src/main/java/com/google/gson/internal/Excluder.java
+++ b/gson/src/main/java/com/google/gson/internal/Excluder.java
@@ -54,6 +54,7 @@
   private double version = IGNORE_VERSIONS;
   private int modifiers = Modifier.TRANSIENT | Modifier.STATIC;
   private boolean serializeInnerClasses = true;
+  private boolean serializeAnonOrLocalClasses = false;
   private boolean requireExpose;
   private List<ExclusionStrategy> serializationStrategies = Collections.emptyList();
   private List<ExclusionStrategy> deserializationStrategies = Collections.emptyList();
@@ -87,6 +88,12 @@ public Excluder disableInnerClassSerialization() {
     return result;
   }
 
+  public Excluder enableAnonOrLocalClassSerialization(){
+    Excluder result = clone();
+    result.serializeAnonOrLocalClasses = true;
+    return result;
+  }
+
   public Excluder excludeFieldsWithoutExposeAnnotation() {
     Excluder result = clone();
     result.requireExpose = true;
@@ -173,7 +180,7 @@ public boolean excludeField(Field field, boolean serialize) {
       return true;
     }
 
-    if (isAnonymousOrLocal(field.getType())) {
+    if (!serializeAnonOrLocalClasses && isAnonymousOrLocal(field.getType())) {
       return true;
     }
 
@@ -199,7 +206,7 @@ private boolean excludeClassChecks(Class<?> clazz) {
           return true;
       }
 
-      if (isAnonymousOrLocal(clazz)) {
+      if (!serializeAnonOrLocalClasses && isAnonymousOrLocal(clazz)) {
           return true;
       }
 
