diff --git a/.gitignore b/.gitignore
index b1bdb7f26..9ae30222e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -14,3 +14,4 @@ release.properties
 classes
 
 .DS_Store
+/bin/
diff --git a/cfg/Gson_toJson.ff3 b/cfg/Gson_toJson.ff3
new file mode 100644
index 000000000..41db59347
Binary files /dev/null and b/cfg/Gson_toJson.ff3 differ
diff --git a/cfg/JsonParser_parse.ff3 b/cfg/JsonParser_parse.ff3
new file mode 100644
index 000000000..c5d11a5a8
Binary files /dev/null and b/cfg/JsonParser_parse.ff3 differ
diff --git a/cfg/JsonTreeReader_peek.ff3 b/cfg/JsonTreeReader_peek.ff3
new file mode 100644
index 000000000..915a92714
Binary files /dev/null and b/cfg/JsonTreeReader_peek.ff3 differ
diff --git a/gson/src/test/java/com/google/gson/internal/bind/JsonTreeReaderTest.java b/gson/src/test/java/com/google/gson/internal/bind/JsonTreeReaderTest.java
index f6a5bf33e..0eb636204 100644
--- a/gson/src/test/java/com/google/gson/internal/bind/JsonTreeReaderTest.java
+++ b/gson/src/test/java/com/google/gson/internal/bind/JsonTreeReaderTest.java
@@ -18,8 +18,10 @@
 import com.google.gson.JsonArray;
 import com.google.gson.JsonNull;
 import com.google.gson.JsonObject;
+import com.google.gson.JsonPrimitive;
 import com.google.gson.stream.JsonToken;
 import java.io.IOException;
+
 import junit.framework.TestCase;
 
 @SuppressWarnings("resource")
@@ -47,4 +49,29 @@ public void testSkipValue_filledJsonObject() throws IOException {
     in.skipValue();
     assertEquals(JsonToken.END_DOCUMENT, in.peek());
   }
+  
+  /** Test cases by applying the basic path algorithm **/
+  public void testPeek_basicPath() throws IOException {
+    /* path 1: json null object */
+    JsonTreeReader nullInstance = new JsonTreeReader(JsonNull.INSTANCE);
+    assertEquals(JsonToken.NULL, nullInstance.peek());
+    
+    /* path 2: json primitive */
+    JsonTreeReader primitiveInstance = new JsonTreeReader(new JsonPrimitive(5));
+    assertEquals(JsonToken.NUMBER, primitiveInstance.peek());
+    
+    /* path 3: json object */
+    JsonTreeReader objectInstance = new JsonTreeReader(new JsonObject());
+    assertEquals(JsonToken.BEGIN_OBJECT, objectInstance.peek());
+    
+    /* path 4: iterator */
+    /* create an object */
+    JsonArray jsonArray = new JsonArray();
+    jsonArray.add(1);
+    jsonArray.add("2");
+    
+    JsonTreeReader iteratorInstance = new JsonTreeReader(jsonArray);
+    iteratorInstance.beginArray();
+    assertEquals(JsonToken.NUMBER, iteratorInstance.peek());
+  }
 }
diff --git a/gson/src/test/java/com/google/gson/mc626/ControlFlowGraphTest.java b/gson/src/test/java/com/google/gson/mc626/ControlFlowGraphTest.java
new file mode 100644
index 000000000..cadb0b5b0
--- /dev/null
+++ b/gson/src/test/java/com/google/gson/mc626/ControlFlowGraphTest.java
@@ -0,0 +1,5 @@
+package com.google.gson.mc626;
+
+public class ControlFlowGraphTest {
+
+}
