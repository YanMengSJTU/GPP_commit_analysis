diff --git a/gson/j2objc/process_notes.txt b/gson/j2objc/process_notes.txt
index caf442179..11c661139 100644
--- a/gson/j2objc/process_notes.txt
+++ b/gson/j2objc/process_notes.txt
@@ -9,19 +9,7 @@ compile java (just to make sure it works, extra step to get in habit)
 transpile to obj-c
 compile objc-c
 transpile/compile gson TESTS
-run the tests as OBJECTIVE MUTHA FUCKIN C
-
-http://j2objc.org/docs/Design-Overview.html
-1. rewriter rewrites stuff that doesn’t have java equivalent, it all started here, was bigger, stuff split out
-2. autoboxer
-3. iostypeconverter — foundation classes, object, number, string, throwable, class, etc
-4. iosmethodconverter - uses a mapping table to “fix” method names, no overloading allowed!
-5. initialization normalizer - static vars and static blocks and any init stuff moved into initializers
-6. anon class converter - makes anon classes into inner classes
-7. inner class converter - makes inner classes top level classes “in sample compilation unit” (runs after anon class step, so once this is done it’s all top level, yup)
-8. destructor converter - creates mem momt destructors as needed, tries to deal with finalize, depends on arc or not, etc
-9. complex expression extractor - breaks up complex expressions like chained method calls
-10. nil check resolver - ads nil_chk wherever an expression is dereferenced
+run the tests as OBJECTIVE MUTHA FLIPPING C
 
 https://groups.google.com/forum/#!topic/j2objc-discuss/iXdtl4KRP1k
 notes from tom:
@@ -39,31 +27,12 @@ The fourth step creates a list of ".m" files for each Java source, saving it to
 
 These steps generate the complete closure of all source files needed for the app. Now, translate them all ("j2objc -d /tmp/build flags $(cat sources.list)" will do it in one step), then compile them all ("j2objcc -o executable_name -I/tmp/build $(cat objc-files.list)"). Since sources.list has all the Java dependencies, objc-files.list will have all the dependent code, resolving any link errors from missing object files.
 
-Once these steps work, consider copying them into a script file such as build.sh, so future builds can be run using "bash build.sh".
-
-
 mvn test
 runs 1018 tests as java, all good, proceed
 
 mvn dependency:unpack-dependencies -Dclassifier=sources
 this puts all the stuff in target/dependency
 
-find ../src/main -name "*.java" > sources.txt 
-
-find ../src/test -name "*.java" > sources_test.txt 
-
-1. transpile regular source to objc source 0 j2objc
-
-mkdir build_java                  
-javac -d ./build_java @sources.txt
-
-2. j2objc that shit with same command to diff output dir
-
-j2objc -d ./build_objc @sources.txt
-
-3. j2objcc that shit into o binaries?
-
-
 
 find ../src -name "*.java" > sources_all.txt
 javac -d ./build_java @sources_all.txt
@@ -72,12 +41,11 @@ j2objc --no-package-directories -classpath ~/.m2/repository/junit/junit/4.12/jun
 j2objcc -Wno-deprecated -ObjC -o gsonobjc -ljre_emul -ljunit ./build_objc/*.m
 ./gsonobjc org.junit.runner.JUnitCore ComGoogleGsonCommentsTest
 
-holy shit it worked
+it worked
 JUnit version 4.11
 .
 Time: 0.004
 
 OK (1 test)
 
-get all the "tests"
-find ./build_objc -name "*Test.m" | sed 's/.m$//' | sed 's/^.\/build_objc\//ComGoogleGson/'
+see build.sh for more
