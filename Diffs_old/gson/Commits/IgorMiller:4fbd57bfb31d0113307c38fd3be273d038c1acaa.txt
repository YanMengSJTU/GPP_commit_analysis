diff --git a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
index 290ea4c5f..0a5269ff8 100644
--- a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
@@ -170,6 +170,6 @@ public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append(DefaultDateTypeAdapter.class.getSimpleName());
     sb.append('(').append(dateFormatters.get(DateFormatType.LOCAL).toString()).append(')');
-    return sb.toString();
-  }
+		return sb.toString();
+	}
 }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
index 561af1985..8756096b2 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
@@ -16,21 +16,27 @@
 
 package com.google.gson.internal.bind;
 
+import java.io.IOException;
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.util.Date;
+import java.util.EnumMap;
+import java.util.EnumSet;
+import java.util.Locale;
+
+import com.google.gson.DateFormatType;
 import com.google.gson.Gson;
 import com.google.gson.JsonSyntaxException;
 import com.google.gson.TypeAdapter;
 import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.bind.util.ISO8601Utils;
+import com.google.gson.internal.bind.dateformatter.DateFormatter;
+import com.google.gson.internal.bind.dateformatter.ISO8601DateFormatter;
+import com.google.gson.internal.bind.dateformatter.MillisDateFormatter;
+import com.google.gson.internal.bind.dateformatter.SimpleDateFormatter;
 import com.google.gson.reflect.TypeToken;
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonToken;
 import com.google.gson.stream.JsonWriter;
-import java.io.IOException;
-import java.text.DateFormat;
-import java.text.ParseException;
-import java.text.ParsePosition;
-import java.util.Date;
-import java.util.Locale;
 
 /**
  * Adapter for Date. Although this class appears stateless, it is not.
@@ -45,11 +51,28 @@
       return typeToken.getRawType() == Date.class ? (TypeAdapter<T>) new DateTypeAdapter() : null;
     }
   };
+  
+  private final EnumMap<DateFormatType, DateFormatter> dateFormatters;
+	private final EnumSet<DateFormatType> dateParsersToUse;
+  
+	public DateTypeAdapter() {
+		dateFormatters = new EnumMap<DateFormatType, DateFormatter>(DateFormatType.class);
+
+		DateFormat enUsFormat = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US);
+		SimpleDateFormatter enUsFormatter = new SimpleDateFormatter(enUsFormat);
+		dateFormatters.put(DateFormatType.EN_US, enUsFormatter);
 
-  private final DateFormat enUsFormat
-      = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US);
-  private final DateFormat localFormat
-      = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT);
+		DateFormat localFormat = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT);
+		dateFormatters.put(DateFormatType.LOCAL, new SimpleDateFormatter(localFormat));
+
+		dateFormatters.put(DateFormatType.ISO_8601, ISO8601DateFormatter.getInstance());
+		dateFormatters.put(DateFormatType.MILLIS, MillisDateFormatter.getInstance());
+
+		// Date type formatters to use. Prevents repeating parsing when Default or
+		// Custom are set to EN-US.
+		dateParsersToUse = EnumSet.of(DateFormatType.EN_US, DateFormatType.LOCAL, DateFormatType.ISO_8601,
+				DateFormatType.MILLIS);
+	}
 
   @Override public Date read(JsonReader in) throws IOException {
     if (in.peek() == JsonToken.NULL) {
@@ -59,28 +82,27 @@
     return deserializeToDate(in.nextString());
   }
 
-  private synchronized Date deserializeToDate(String json) {
-    try {
-      return localFormat.parse(json);
-    } catch (ParseException ignored) {
-    }
-    try {
-      return enUsFormat.parse(json);
-    } catch (ParseException ignored) {
-    }
-    try {
-    	return ISO8601Utils.parse(json, new ParsePosition(0));
-    } catch (ParseException e) {
-      throw new JsonSyntaxException(json, e);
-    }
-  }
+	private synchronized Date deserializeToDate(String json) {
+		ParseException parseExc = null; // Hopefully will not be used
+
+		for (DateFormatType dateFormatType : dateParsersToUse) {
+			DateFormatter dateFormatter = dateFormatters.get(dateFormatType);
+			try {
+				return dateFormatter.parse(json);
+			} catch (ParseException e) {
+				parseExc = e;
+			}
+		}
+
+		throw new JsonSyntaxException(json, parseExc);
+	}
 
   @Override public synchronized void write(JsonWriter out, Date value) throws IOException {
     if (value == null) {
       out.nullValue();
       return;
     }
-    String dateFormatAsString = enUsFormat.format(value);
+    String dateFormatAsString = dateFormatters.get(DateFormatType.EN_US).format(value);
     out.value(dateFormatAsString);
   }
   
diff --git a/gson/src/main/java/com/google/gson/internal/bind/dateformatter/DateFormatter.java b/gson/src/main/java/com/google/gson/internal/bind/dateformatter/DateFormatter.java
index 4f6ef5cd2..023bf2fec 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/dateformatter/DateFormatter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/dateformatter/DateFormatter.java
@@ -23,14 +23,18 @@
 
 	/**
 	 * Formats date during serialization.
-	 * @param date to format.
+	 * 
+	 * @param date
+	 *          to format.
 	 * @return Formatted date.
 	 */
 	String format(Date date);
-	
+
 	/**
 	 * Parses date during deserialization.
-	 * @param dateAsString to parse.
+	 * 
+	 * @param dateAsString
+	 *          to parse.
 	 * @return Parsed date.
 	 */
 	Date parse(String dateAsString) throws ParseException;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/dateformatter/ISO8601DateFormatter.java b/gson/src/main/java/com/google/gson/internal/bind/dateformatter/ISO8601DateFormatter.java
index caf6bc86f..e6e96b365 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/dateformatter/ISO8601DateFormatter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/dateformatter/ISO8601DateFormatter.java
@@ -22,12 +22,12 @@
 
 import com.google.gson.internal.bind.util.ISO8601Utils;
 
-public final class ISO8601DateFormatter implements DateFormatter
-{
-	private ISO8601DateFormatter(){};
-	
+public final class ISO8601DateFormatter implements DateFormatter {
+	private ISO8601DateFormatter() {
+	};
+
 	private final static ISO8601DateFormatter INSTANCE = new ISO8601DateFormatter();
-	
+
 	@Override
 	public String format(Date date) {
 		return ISO8601Utils.format(date, true);
@@ -37,10 +37,9 @@ public String format(Date date) {
 	public Date parse(String dateAsString) throws ParseException {
 		return ISO8601Utils.parse(dateAsString, new ParsePosition(0));
 	}
-	
-	public static ISO8601DateFormatter getInstance()
-	{
+
+	public static ISO8601DateFormatter getInstance() {
 		return INSTANCE;
 	}
-	
+
 }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/dateformatter/MillisDateFormatter.java b/gson/src/main/java/com/google/gson/internal/bind/dateformatter/MillisDateFormatter.java
index d55841869..014eef2bd 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/dateformatter/MillisDateFormatter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/dateformatter/MillisDateFormatter.java
@@ -18,10 +18,10 @@
 
 import java.util.Date;
 
-public final class MillisDateFormatter implements DateFormatter
-{
-private MillisDateFormatter(){};
-	
+public final class MillisDateFormatter implements DateFormatter {
+	private MillisDateFormatter() {
+	};
+
 	private final static MillisDateFormatter INSTANCE = new MillisDateFormatter();
 
 	@Override
@@ -34,10 +34,9 @@ public Date parse(String dateAsString) {
 		Long seconds = Long.parseLong(dateAsString);
 		return new Date(seconds);
 	}
-	
-	public static MillisDateFormatter getInstance()
-	{
+
+	public static MillisDateFormatter getInstance() {
 		return INSTANCE;
 	}
-	
+
 }
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/internal/bind/dateformatter/SimpleDateFormatter.java b/gson/src/main/java/com/google/gson/internal/bind/dateformatter/SimpleDateFormatter.java
index 5998d085c..0eaef46df 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/dateformatter/SimpleDateFormatter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/dateformatter/SimpleDateFormatter.java
@@ -20,22 +20,22 @@
 import java.text.ParseException;
 import java.util.Date;
 
-public final class SimpleDateFormatter implements DateFormatter
-{
+public final class SimpleDateFormatter implements DateFormatter {
 	private final DateFormat dateFormat;
-	
+
 	public SimpleDateFormatter(DateFormat dateFormat) {
 		// Clone to prevent object from change
-    this.dateFormat = (DateFormat) dateFormat.clone();
-  }
+		this.dateFormat = (DateFormat) dateFormat.clone();
+	}
 
-//These methods need to be synchronized since JDK DateFormat classes are not thread-safe
- // See issue 162
+	// These methods need to be synchronized since JDK DateFormat classes are not
+	// thread-safe
+	// See issue 162
 	@Override
 	public String format(Date date) {
 		synchronized (dateFormat) {
-      return dateFormat.format(date);
-    }
+			return dateFormat.format(date);
+		}
 	}
 
 	@Override
@@ -44,10 +44,9 @@ public Date parse(String dateAsString) throws ParseException {
 			return dateFormat.parse(dateAsString);
 		}
 	}
-	
+
 	@Override
-	public String toString()
-	{
+	public String toString() {
 		return dateFormat.getClass().getSimpleName();
 	}
 }
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/internal/bind/dateformatter/UnixDateFormatter.java b/gson/src/main/java/com/google/gson/internal/bind/dateformatter/UnixDateFormatter.java
index 02eadd1bc..050e68886 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/dateformatter/UnixDateFormatter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/dateformatter/UnixDateFormatter.java
@@ -18,10 +18,10 @@
 
 import java.util.Date;
 
-public final class UnixDateFormatter implements DateFormatter
-{
-private UnixDateFormatter(){};
-	
+public final class UnixDateFormatter implements DateFormatter {
+	private UnixDateFormatter() {
+	};
+
 	private final static UnixDateFormatter INSTANCE = new UnixDateFormatter();
 
 	@Override
@@ -34,10 +34,9 @@ public Date parse(String dateAsString) {
 		Long seconds = Long.parseLong(dateAsString);
 		return new Date(seconds * 1000);
 	}
-	
-	public static UnixDateFormatter getInstance()
-	{
+
+	public static UnixDateFormatter getInstance() {
 		return INSTANCE;
 	}
-	
+
 }
\ No newline at end of file
