diff --git a/gson/src/main/java/com/google/gson/stream/JsonReader.java b/gson/src/main/java/com/google/gson/stream/JsonReader.java
index 76d35ac00..a0c0ce7df 100644
--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java
+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java
@@ -955,17 +955,26 @@ public long nextLong() throws IOException {
       return peekedLong;
     }
 
-    Long result;
     updatePeekedStringAndPos(p);
-    result = consumeAndGetLong(p);
 
-    if (result != null) {
-      return result;
+    if (p == PEEKED_NUMBER) {
+    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {
+      try {
+        long result = Long.parseLong(peekedString);
+        peeked = PEEKED_NONE;
+        pathIndices[stackSize - 1]++;
+        return result;
+      } catch (NumberFormatException ignored) {
+        // Fall back to parse as a double below.
+      }
+    } else {
+      throw new IllegalStateException("Expected a long but was " + peek()
+              + " at line " + getLineNumber() + " column " + getColumnNumber() + " path " + getPath());
     }
 
     peeked = PEEKED_BUFFERED;
     double asDouble = Double.parseDouble(peekedString); // don't catch this NumberFormatException.
-    result = (long) asDouble;
+    long result = (long) asDouble;
     if (result != asDouble) { // Make sure no precision was lost casting to 'long'.
       throw new NumberFormatException("Expected a long but was " + peekedString
           + " at line " + getLineNumber() + " column " + getColumnNumber() + " path " + getPath());
@@ -985,24 +994,6 @@ private void updatePeekedStringAndPos(int p) throws IOException {
     }
   }
 
-  private Long consumeAndGetLong(int p) throws IOException {
-    Long result = null;
-    if (p == PEEKED_NUMBER) {
-    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {
-      try {
-        result = Long.parseLong(peekedString);
-        peeked = PEEKED_NONE;
-        pathIndices[stackSize - 1]++;
-      } catch (NumberFormatException ignored) {
-        // Fall back to parse as a double below.
-      }
-    } else {
-      throw new IllegalStateException("Expected a long but was " + peek()
-              + " at line " + getLineNumber() + " column " + getColumnNumber() + " path " + getPath());
-    }
-    return result;
-  }
-
   /**
    * Returns the string up to but not including {@code quote}, unescaping any
    * character escape sequences encountered along the way. The opening quote
