diff --git a/gson/j2objc/readme.md b/gson/j2objc/readme.md
index b93b2fcfd..788c70f66 100644
--- a/gson/j2objc/readme.md
+++ b/gson/j2objc/readme.md
@@ -58,28 +58,26 @@ Detailed Process: GSON java to objc with tests
    * clone this project, or get the source of gson and mirror this project
    * install j2objc and have $J2OBJC_HOME in the path. 
 
-1. run mvn tests, ensure all java works and tests pass (1018 tests)   
+2. run mvn tests, ensure all java works and tests pass (1018 tests)   
 ```mvn test```
 
-NOTE: if you NEED sources for other projects, such as for transitive dependencies, maven can help you get them for open source stuff.    
-```mvn dependency:unpack-dependencies -Dclassifier=sources```   
-(this will put source in target/dependency)
-
 3. get ALL the source together and make sure javac can compile it   
 ```find ../src -name "*.java" > sources_all.txt```   
 
 4. make sure javac works, and include deps in classpath (ONLY use deps that j2objc supports, else get SOURCE for those deps too)   
 ```javac -classpath ~/.m2/repository/junit/junit/4.12/junit-4.12.jar -d ./build_java @sources_all.txt```   
 
-5. transpile the JAVA source in OBJC source with j2objc (no pkg dirs makes the imports cleaner/easier)
+5. transpile the JAVA source into OBJ-C source with j2objc (no pkg dirs makes the imports cleaner/easier)   
 ```j2objc --no-package-directories -classpath ~/.m2/repository/junit/junit/4.12/junit-4.12.jar -d ./build_objc @sources_all.txt```   
 
-6. compile the OBJC into an executable   
+6. compile the OBJ-C into an executable   
 ```j2objcc -Wno-deprecated -ObjC -o gsonobjc -ljre_emul -ljunit ./build_objc/*.m```   
 (you now have an executable! and it can run all the interfaces defined within! (incl junit))
 
 7. run a SINGLE test   
-```./gsonobjc org.junit.runner.JUnitCore ComGoogleGsonCommentsTest```
+```./gsonobjc org.junit.runner.JUnitCore ComGoogleGsonCommentsTest```   
+(NOTE that you can refer to EITHER the full package name with dots OR the CamelCaseName)    
+(this also works: ./gsonobjc OrgJunitRunnerJUnitCore com.google.gson.CommentsTest)   
 
 8. get the NAMES of all the tests, while not using package directories, from the gened header files 
 ```find ./build_objc/*Test.h -exec grep -hw -m1 "$@interface" {} \; | sed 's/@interface//' | sed 's/ ().*/\/' | sed 's/ :.*//' > test_names.txt```
@@ -89,14 +87,15 @@ NOTE: if you NEED sources for other projects, such as for transitive dependencie
 
 
 
-other notes
+Other Notes
 ------------
 
-#try to determing number of tests match?
-grep "OK" test_results.txt | sed 's/OK (//' | sed 's/ test.*//'
+NOTE: if you NEED sources for other projects, such as for transitive dependencies, maven can help you get them for open source stuff.    
+```mvn dependency:unpack-dependencies -Dclassifier=sources```   
+(this will put source in target/dependency)
 
-#how many original java tests are there
-find ../src/test -name "*Test.java" | wc -l
+NOTE: how many original java tests are there and how many objc tests there are from the INTERFACE definitions   
+```find ../src/test -name "*Test.java" | wc -l```   
 
-#sum of tests that ran (it's 1018 in java)
-SUM=0; for i in `grep "OK" test_results.txt | sed 's/OK (//' | sed 's/ test.*//'`; do SUM=$(($SUM + $i)); done; echo $SUM
+NOTE: sum of tests that ran (it's 1018 in java)   
+```SUM=0; for i in `grep "OK" test_results.txt | sed 's/OK (//' | sed 's/ test.*//'`; do SUM=$(($SUM + $i)); done; echo $SUM```   
