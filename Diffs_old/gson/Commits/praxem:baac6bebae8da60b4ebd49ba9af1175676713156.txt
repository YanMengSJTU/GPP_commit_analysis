diff --git a/codegen/src/main/java/com/praxem/commons/utils/Amount.java b/codegen/src/main/java/com/praxem/commons/utils/Amount.java
deleted file mode 100644
index cc5b9792e..000000000
--- a/codegen/src/main/java/com/praxem/commons/utils/Amount.java
+++ /dev/null
@@ -1,242 +0,0 @@
-package com.praxem.commons.utils;
-
-import java.math.BigDecimal;
-import java.math.MathContext;
-import java.math.RoundingMode;
-
-public class Amount extends Number implements Comparable<IAmount>, IAmount
-{
-	private static final long serialVersionUID = 8157002248669941957L;
-
-	private BigDecimal bigDecimal;
-	
-	public Amount()
-	{
-		setBigDecimal(new BigDecimal(0, MathContext.DECIMAL128));
-		normalize();
-	}
-	
-	public Amount(BigDecimal amount)
-	{
-		setBigDecimal(new BigDecimal(amount.toString(), MathContext.DECIMAL128));
-		normalize();
-	}
-	
-	public Amount(String amount)
-	{
-		setBigDecimal(new BigDecimal(amount, MathContext.DECIMAL128));
-		normalize();
-	}
-	
-	private void normalize()
-	{
-		setBigDecimal(getBigDecimal().setScale(2, RoundingMode.HALF_UP));
-	}
-	
-	public static final Amount ZERO = new Amount("0");
-	
-	@Override
-   public double doubleValue()
-   {
-	   return getBigDecimal().doubleValue();
-   }
-
-	@Override
-   public float floatValue()
-   {
-	   return getBigDecimal().floatValue();
-   }
-
-	@Override
-   public int intValue()
-   {
-	   return getBigDecimal().intValue();
-   }
-
-	@Override
-   public long longValue()
-   {
-	   return getBigDecimal().longValue();
-   }
-
-	@Override
-   public byte byteValue()
-   {
-	   return getBigDecimal().byteValue();
-   }
-
-	@Override
-   public short shortValue()
-   {
-	   return getBigDecimal().shortValue();
-   }
-
-	@Override
-   public boolean equals(Object arg0)
-   {
-		IAmount a = (IAmount)arg0;
-		return getBigDecimal().equals(a.getBigDecimal());
-   }
-
-	@Override
-   public int hashCode()
-   {
-	   return getBigDecimal().hashCode();
-   }
-
-	@Override
-   public String toString()
-   {
-	   return getBigDecimal().toString();
-   }
-
-	@Override
-   public int compareTo(IAmount arg0)
-   {
-	   return getBigDecimal().compareTo(arg0.getBigDecimal());
-   }
-	
-	public static void main(String[] args)
-   {
-	   Amount amount = null; 
-	   
-	   try
-	   {
-	      amount = new Amount("123sewer");
-	   }
-	   catch (NumberFormatException e)
-	   {
-	   	System.out.println("test");
-	   }
-   }
-
-	@Override
-   public Amount add(IAmount amount)
-   {
-	   return new Amount(getBigDecimal().add(amount.getBigDecimal()));
-	   
-   }
-
-	@Override
-   public Amount multiply(IAmount amount)
-   {
-		return new Amount(getBigDecimal().multiply(amount.getBigDecimal()));
-	   
-   }
-
-	@Override
-   public Amount substract(IAmount amount)
-   {
-		return new Amount(getBigDecimal().subtract(amount.getBigDecimal()));
-	   
-   }
-
-	@Override
-   public Amount divide(IAmount amount)
-   {
-		return new Amount(getBigDecimal().divide(amount.getBigDecimal()));
-	   
-   }
-
-	@Override
-   public IAmount add(Integer integer)
-   {
-	   return new Amount(getBigDecimal().add(new BigDecimal(integer)));
-	   
-   }
-
-	@Override
-   public IAmount add(Double double_)
-   {
-	   return new Amount(getBigDecimal().add(new BigDecimal(double_)));
-	   
-   }
-
-	@Override
-   public IAmount add(BigDecimal bigDecimal)
-   {
-	   return new Amount(getBigDecimal().add(bigDecimal));
-	   
-   }
-
-	@Override
-   public IAmount multiply(Integer integer)
-   {
-		return new Amount(getBigDecimal().multiply(new BigDecimal(integer)));
-	   
-   }
-
-	@Override
-   public IAmount multiply(Double double_)
-   {
-		return new Amount(getBigDecimal().multiply(new BigDecimal(double_)));
-	   
-   }
-
-	@Override
-   public IAmount multiply(BigDecimal bigDecimal)
-   {
-		return new Amount(getBigDecimal().multiply(bigDecimal));
-	   
-   }
-
-	@Override
-   public IAmount substract(Integer integer)
-   {
-		return new Amount(getBigDecimal().subtract(new BigDecimal(integer)));
-	   
-   }
-
-	@Override
-   public IAmount substract(Double double_)
-   {
-		return new Amount(getBigDecimal().subtract(new BigDecimal(double_)));
-	   
-   }
-
-	@Override
-   public IAmount substract(BigDecimal bigDecimal)
-   {
-		return new Amount(getBigDecimal().subtract(bigDecimal));
-	   
-   }
-
-	@Override
-   public IAmount divide(Integer integer)
-   {
-		return new Amount(getBigDecimal().divide(new BigDecimal(integer)));
-	   
-   }
-
-	@Override
-   public IAmount divide(Double double_)
-   {
-		return new Amount(getBigDecimal().divide(new BigDecimal(double_)));
-	   
-   }
-
-	@Override
-   public IAmount divide(BigDecimal bigDecimal)
-   {
-		return new Amount(getBigDecimal().divide(bigDecimal));
-	   
-   }
-
-	public BigDecimal getBigDecimal()
-   {
-	   return bigDecimal;
-   }
-
-	public void setBigDecimal(BigDecimal bigDecimal)
-   {
-	   this.bigDecimal = bigDecimal;
-   }
-
-	@Override
-   public boolean equalsToZero()
-   {
-	   return this.bigDecimal.equals(BigDecimal.ZERO);
-   }
-	
-	
-}
diff --git a/codegen/src/main/java/com/praxem/commons/utils/IAmount.java b/codegen/src/main/java/com/praxem/commons/utils/IAmount.java
deleted file mode 100644
index 241489d5f..000000000
--- a/codegen/src/main/java/com/praxem/commons/utils/IAmount.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package com.praxem.commons.utils;
-
-import java.math.BigDecimal;
-
-public interface IAmount extends Comparable<IAmount>
-{
-   public IAmount add(IAmount amount);
-   
-   public IAmount add(Integer integer);
-   
-   public IAmount add(Double double_);
-   
-   public IAmount add(BigDecimal bigDecimal);
-   
-   
-   public IAmount multiply(IAmount amount);
-   
-   public IAmount multiply(Integer integer);
-   
-   public IAmount multiply(Double double_);
-   
-   public IAmount multiply(BigDecimal bigDecimal);
-   
-   
-   public IAmount substract(IAmount amount);
-   
-   public IAmount substract(Integer integer);
-   
-   public IAmount substract(Double double_);
-   
-   public IAmount substract(BigDecimal bigDecimal);
-   
-   
-   public IAmount divide(IAmount amount);
-   
-   public IAmount divide(Integer integer);
-   
-   public IAmount divide(Double double_);
-   
-   public IAmount divide(BigDecimal bigDecimal);
-   
-   public BigDecimal getBigDecimal();
-   
-   public boolean equalsToZero();
-}
diff --git a/gson/src/main/java/com/google/gson/Gson.java b/gson/src/main/java/com/google/gson/Gson.java
index e004e0aa3..e2e52c402 100644
--- a/gson/src/main/java/com/google/gson/Gson.java
+++ b/gson/src/main/java/com/google/gson/Gson.java
@@ -55,7 +55,7 @@
 import com.google.gson.stream.JsonToken;
 import com.google.gson.stream.JsonWriter;
 import com.google.gson.stream.MalformedJsonException;
-import com.praxem.commons.utils.Amount;
+//import com.praxem.accounting.objects.Amount;
 
 /**
  * This is the main class for using Gson. Gson is typically used by first constructing a
@@ -135,6 +135,7 @@
   private final boolean htmlSafe;
   private final boolean generateNonExecutableJson;
   private final boolean prettyPrinting;
+  private final boolean forDisplay;
   private final boolean lenient;
   private final JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;
   private final JsonGlobalContext globalContext;
@@ -178,7 +179,7 @@ public Gson() {
         Collections.<Type, InstanceCreator<?>>emptyMap(), DEFAULT_SERIALIZE_NULLS,
         DEFAULT_COMPLEX_MAP_KEYS, DEFAULT_JSON_NON_EXECUTABLE, DEFAULT_ESCAPE_HTML,
         DEFAULT_PRETTY_PRINT, DEFAULT_LENIENT, DEFAULT_SPECIALIZE_FLOAT_VALUES,
-        LongSerializationPolicy.DEFAULT, Collections.<TypeAdapterFactory>emptyList(), null);
+        LongSerializationPolicy.DEFAULT, Collections.<TypeAdapterFactory>emptyList(), null, false);
   }
 
   Gson(final Excluder excluder, final FieldNamingStrategy fieldNamingStrategy,
@@ -186,7 +187,7 @@ public Gson() {
       boolean complexMapKeySerialization, boolean generateNonExecutableGson, boolean htmlSafe,
       boolean prettyPrinting, boolean lenient, boolean serializeSpecialFloatingPointValues,
       LongSerializationPolicy longSerializationPolicy,
-      List<TypeAdapterFactory> typeAdapterFactories, JsonGlobalContext globalContext) {
+      List<TypeAdapterFactory> typeAdapterFactories, JsonGlobalContext globalContext, boolean forDisplay) {
     this.constructorConstructor = new ConstructorConstructor(instanceCreators);
     this.excluder = excluder;
     this.fieldNamingStrategy = fieldNamingStrategy;
@@ -196,6 +197,7 @@ public Gson() {
     this.prettyPrinting = prettyPrinting;
     this.lenient = lenient;
     this.globalContext = globalContext;
+    this.forDisplay = forDisplay;
 
     List<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>();
 
@@ -230,7 +232,7 @@ public Gson() {
     factories.add(TypeAdapters.CHARACTER_FACTORY);
     factories.add(TypeAdapters.STRING_BUILDER_FACTORY);
     factories.add(TypeAdapters.STRING_BUFFER_FACTORY);
-    factories.add(TypeAdapters.newFactory(Amount.class, TypeAdapters.AMOUNT));
+    //factories.add(TypeAdapters.newFactory(Amount.class, TypeAdapters.AMOUNT));
     factories.add(TypeAdapters.newFactory(BigDecimal.class, TypeAdapters.BIG_DECIMAL));
     factories.add(TypeAdapters.newFactory(BigInteger.class, TypeAdapters.BIG_INTEGER));
     factories.add(TypeAdapters.URL_FACTORY);
@@ -996,4 +998,9 @@ public String toString() {
         .append("}")
         .toString();
   }
+
+public boolean isForDisplay()
+{
+	return forDisplay;
+}
 }
diff --git a/gson/src/main/java/com/google/gson/GsonBuilder.java b/gson/src/main/java/com/google/gson/GsonBuilder.java
index 5273609d8..da631efb0 100644
--- a/gson/src/main/java/com/google/gson/GsonBuilder.java
+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java
@@ -96,6 +96,7 @@
   private boolean generateNonExecutableJson = DEFAULT_JSON_NON_EXECUTABLE;
   private boolean lenient = DEFAULT_LENIENT;
   private JsonGlobalContext globalContext = DEFAULT_JSON_GLOBAL_CONTEXT;
+  private boolean forDisplay = false;
   
   /**
    * Creates a GsonBuilder instance that can be used to build Gson with various configuration
@@ -364,6 +365,12 @@ public GsonBuilder setPrettyPrinting() {
     return this;
   }
   
+  public GsonBuilder forDisplay() {
+	    forDisplay = true;
+	    return this;
+	  }
+	  
+  
   public GsonBuilder setJsonGlobalContext(JsonGlobalContext globalContext) {
 	    this.globalContext = globalContext;
 	    return this;
@@ -576,7 +583,7 @@ public Gson create() {
     return new Gson(excluder, fieldNamingPolicy, instanceCreators,
         serializeNulls, complexMapKeySerialization,
         generateNonExecutableJson, escapeHtmlChars, prettyPrinting, lenient,
-        serializeSpecialFloatingPointValues, longSerializationPolicy, factories, globalContext);
+        serializeSpecialFloatingPointValues, longSerializationPolicy, factories, globalContext, forDisplay);
   }
 
   private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle,
@@ -594,4 +601,14 @@ private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeS
     factories.add(TreeTypeAdapter.newFactory(TypeToken.get(Timestamp.class), dateTypeAdapter));
     factories.add(TreeTypeAdapter.newFactory(TypeToken.get(java.sql.Date.class), dateTypeAdapter));
   }
+
+public boolean isForDisplay()
+{
+	return forDisplay;
+}
+
+public void setForDisplay(boolean forDisplay)
+{
+	this.forDisplay = forDisplay;
+}
 }
diff --git a/gson/src/main/java/com/google/gson/JsonArray.java b/gson/src/main/java/com/google/gson/JsonArray.java
index 5a5037e3c..eb272bc55 100644
--- a/gson/src/main/java/com/google/gson/JsonArray.java
+++ b/gson/src/main/java/com/google/gson/JsonArray.java
@@ -22,7 +22,7 @@
 import java.util.Iterator;
 import java.util.List;
 
-import com.praxem.commons.utils.Amount;
+//import com.praxem.accounting.objects.Amount;
 
 /**
  * A class representing an array type in Json. An array is a list of {@link JsonElement}s each of
@@ -259,14 +259,14 @@ public BigDecimal getAsBigDecimal() {
   
   
 
-  @Override
+  /*@Override
   public Amount getAsAmount()
   {
 	    if (elements.size() == 1) {
 	       return elements.get(0).getAsAmount();
 	     }
 	     throw new IllegalStateException();
-  }
+  }*/
 
 /**
    * convenience method to get this array as a {@link BigInteger} if it contains a single element.
diff --git a/gson/src/main/java/com/google/gson/JsonElement.java b/gson/src/main/java/com/google/gson/JsonElement.java
index b92fd332d..6d57c351a 100644
--- a/gson/src/main/java/com/google/gson/JsonElement.java
+++ b/gson/src/main/java/com/google/gson/JsonElement.java
@@ -18,7 +18,7 @@
 
 import com.google.gson.internal.Streams;
 import com.google.gson.stream.JsonWriter;
-import com.praxem.commons.utils.Amount;
+//import com.praxem.accounting.objects.Amount;
 
 import java.io.IOException;
 import java.io.StringWriter;
@@ -287,9 +287,9 @@ public BigDecimal getAsBigDecimal() {
     throw new UnsupportedOperationException(getClass().getSimpleName());
   }
 
-  public Amount getAsAmount() {
+  /*public Amount getAsAmount() {
 	    throw new UnsupportedOperationException(getClass().getSimpleName());
-	  }
+	  }*/
   
   /**
    * convenience method to get this element as a {@link BigInteger}.
diff --git a/gson/src/main/java/com/google/gson/JsonPrimitive.java b/gson/src/main/java/com/google/gson/JsonPrimitive.java
index 9748a7839..f1516d5a9 100644
--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java
+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java
@@ -21,7 +21,7 @@
 
 import com.google.gson.internal.$Gson$Preconditions;
 import com.google.gson.internal.LazilyParsedNumber;
-import com.praxem.commons.utils.Amount;
+//import com.praxem.accounting.objects.Amount;
 
 /**
  * A class representing a Json primitive value. A primitive value
@@ -206,12 +206,12 @@ public BigDecimal getAsBigDecimal() {
   }
   
   
-
+/*
   @Override
   public Amount getAsAmount()
   {	
 	  return value instanceof Amount ? (Amount) value : new Amount(value.toString());
-  }
+  }*/
 
 /**
    * convenience method to get this element as a {@link BigInteger}.
diff --git a/gson/src/main/java/com/google/gson/annotations/ExcludeWhenDisplay.java b/gson/src/main/java/com/google/gson/annotations/ExcludeWhenDisplay.java
new file mode 100644
index 000000000..c53430fa6
--- /dev/null
+++ b/gson/src/main/java/com/google/gson/annotations/ExcludeWhenDisplay.java
@@ -0,0 +1,12 @@
+package com.google.gson.annotations;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface ExcludeWhenDisplay
+{
+}
diff --git a/gson/src/main/java/com/google/gson/internal/Excluder.java b/gson/src/main/java/com/google/gson/internal/Excluder.java
index fac7a914f..67a4e594a 100644
--- a/gson/src/main/java/com/google/gson/internal/Excluder.java
+++ b/gson/src/main/java/com/google/gson/internal/Excluder.java
@@ -29,6 +29,7 @@
 import com.google.gson.TypeAdapter;
 import com.google.gson.TypeAdapterFactory;
 import com.google.gson.annotations.ExcludeWhenCleanSave;
+import com.google.gson.annotations.ExcludeWhenDisplay;
 import com.google.gson.annotations.Expose;
 import com.google.gson.annotations.Since;
 import com.google.gson.annotations.Until;
@@ -61,6 +62,7 @@
   private List<ExclusionStrategy> serializationStrategies = Collections.emptyList();
   private List<ExclusionStrategy> deserializationStrategies = Collections.emptyList();
   private SaveMethod saveMethod;
+  private boolean forDisplay;
 
   @Override protected Excluder clone() {
     try {
@@ -114,6 +116,7 @@ public Excluder withExclusionStrategy(ExclusionStrategy exclusionStrategy,
 
   public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> type) {
     this.saveMethod = gson.getGlobalContext().getSaveMethod();
+    this.forDisplay = gson.isForDisplay();
 	 
     Class<?> rawType = type.getRawType();
     final boolean skipSerialize = excludeClass(rawType, true);
@@ -137,7 +140,7 @@ public Excluder withExclusionStrategy(ExclusionStrategy exclusionStrategy,
 
       @Override public void write(JsonWriter out, T value) throws IOException {
         if (skipSerialize) {
-          out.nullValue();
+          out.nullValue(); 
           return;
         }
         delegate().write(out, value);
@@ -152,8 +155,13 @@ public Excluder withExclusionStrategy(ExclusionStrategy exclusionStrategy,
     };
   }
 
-  public boolean excludeField(Field field, boolean serialize) {
-	 ExcludeWhenCleanSave exAnnotation =  field.getAnnotation(ExcludeWhenCleanSave.class);
+  public boolean excludeField(Field field, boolean serialize) { 
+	 ExcludeWhenDisplay exExcludeWhenDisplay = field.getAnnotation(ExcludeWhenDisplay.class);
+	 if (serialize && forDisplay && exExcludeWhenDisplay != null) {
+	    return true; 
+	 }
+	 
+	 ExcludeWhenCleanSave exAnnotation = field.getAnnotation(ExcludeWhenCleanSave.class);
 	 if (serialize && saveMethod == SaveMethod.CLEAN && exAnnotation != null) {
 	    return true; 
 	 }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
index 6dc4b34a7..af4bfb692 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
@@ -56,7 +56,7 @@
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonToken;
 import com.google.gson.stream.JsonWriter;
-import com.praxem.commons.utils.Amount;
+//import com.praxem.accounting.objects.Amount;
 
 /**
  * Type adapters for basic types.
@@ -425,7 +425,7 @@ public void write(JsonWriter out, String value) throws IOException {
     }
   };
   
-  public static final TypeAdapter<Amount> AMOUNT = new TypeAdapter<Amount>() {
+  /*public static final TypeAdapter<Amount> AMOUNT = new TypeAdapter<Amount>() {
 	    @Override public Amount read(JsonReader in) throws IOException {
 	      if (in.peek() == JsonToken.NULL) {
 	        in.nextNull();
@@ -441,7 +441,7 @@ public void write(JsonWriter out, String value) throws IOException {
 	    @Override public void write(JsonWriter out, Amount value) throws IOException {
 	      out.value(value);
 	    }
-	  };
+	  };*/
   
   public static final TypeAdapter<BigInteger> BIG_INTEGER = new TypeAdapter<BigInteger>() {
     @Override public BigInteger read(JsonReader in) throws IOException {
