diff --git a/gson/pom.xml b/gson/pom.xml
index 99b17d32e..42c2afd70 100644
--- a/gson/pom.xml
+++ b/gson/pom.xml
@@ -54,7 +54,13 @@
     <dependency>
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>
-      <version>3.8.2</version>
+      <version>4.12</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>pl.pragmatists</groupId>
+      <artifactId>JUnitParams</artifactId>
+      <version>1.0.4</version>
       <scope>test</scope>
     </dependency>
   </dependencies>
diff --git a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java b/gson/src/main/java/com/google/gson/FieldNamingPolicy.java
index 3b325a4fd..02defc136 100644
--- a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java
+++ b/gson/src/main/java/com/google/gson/FieldNamingPolicy.java
@@ -56,6 +56,7 @@
     }
   },
 
+ 
   /**
    * Using this naming policy with Gson will ensure that the first "letter" of the Java
    * field name is capitalized when serialized to its JSON form and the words will be
@@ -149,10 +150,6 @@ static String upperCaseFirstLetter(String name) {
       firstCharacter = name.charAt(++index);
     }
 
-    if (index == name.length()) {
-      return fieldNameBuilder.toString();
-    }
-
     if (!Character.isUpperCase(firstCharacter)) {
       String modifiedTarget = modifyString(Character.toUpperCase(firstCharacter), name, ++index);
       return fieldNameBuilder.append(modifiedTarget).toString();
diff --git a/gson/src/test/java/com/google/gson/FieldNamingPolicyTest.java b/gson/src/test/java/com/google/gson/FieldNamingPolicyTest.java
new file mode 100644
index 000000000..8fbb6c89b
--- /dev/null
+++ b/gson/src/test/java/com/google/gson/FieldNamingPolicyTest.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2016 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.gson;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.assertEquals;
+
+import junitparams.JUnitParamsRunner;
+import junitparams.Parameters;
+
+/**
+ * Unit test for the {@link FieldNamingPolicy} class
+ * 
+ * @author David Betancourt
+ *
+ */
+@RunWith(JUnitParamsRunner.class)
+public class FieldNamingPolicyTest {
+
+  private Object[] getUpperCaseFirstLetterParams() {
+    return new Object[] { getUpperCaseFirstLetterParamArgs("someFieldName", "SomeFieldName"),
+        getUpperCaseFirstLetterParamArgs("SomeFieldName", "SomeFieldName"),
+        getUpperCaseFirstLetterParamArgs("_someFieldName", "_SomeFieldName"),
+        getUpperCaseFirstLetterParamArgs("_SomeFieldName", "_SomeFieldName"),
+        getUpperCaseFirstLetterParamArgs("_999someFieldName", "_999SomeFieldName"),
+        getUpperCaseFirstLetterParamArgs("_999SomeFieldName", "_999SomeFieldName"),
+        getUpperCaseFirstLetterParamArgs("x", "X"),
+        getUpperCaseFirstLetterParamArgs("X", "X"),
+        getUpperCaseFirstLetterParamArgs("555", "555"),
+        getUpperCaseFirstLetterParamArgs("_", "_") };
+
+  }
+
+  private Object[] getUpperCaseFirstLetterParamArgs(String fieldName, String expectedFieldName) {
+    return new Object[] { fieldName, expectedFieldName };
+  }
+
+  @Test
+  @Parameters(method = "getUpperCaseFirstLetterParams")
+  public void testUpperCaseFieldLetter(String fieldName, String expectedFieldName) {
+    String actualFieldName = FieldNamingPolicy.upperCaseFirstLetter(fieldName);
+    assertEquals("Verify '" + fieldName + "' was uppercased properly", expectedFieldName,
+        actualFieldName);
+  }
+}
