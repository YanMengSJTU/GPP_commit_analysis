diff --git a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java b/gson/src/main/java/com/google/gson/FieldNamingPolicy.java
index 02defc136..26fd92775 100644
--- a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java
+++ b/gson/src/main/java/com/google/gson/FieldNamingPolicy.java
@@ -20,10 +20,11 @@
 import java.util.Locale;
 
 /**
- * An enumeration that defines a few standard naming conventions for JSON field names.
- * This enumeration should be used in conjunction with {@link com.google.gson.GsonBuilder}
- * to configure a {@link com.google.gson.Gson} instance to properly translate Java field
- * names into the desired JSON field names.
+ * An enumeration that defines a few standard naming conventions for JSON field
+ * names. This enumeration should be used in conjunction with
+ * {@link com.google.gson.GsonBuilder} to configure a
+ * {@link com.google.gson.Gson} instance to properly translate Java field names
+ * into the desired JSON field names.
  *
  * @author Inderjeet Singh
  * @author Joel Leitch
@@ -35,84 +36,101 @@
    * unchanged.
    */
   IDENTITY() {
-    @Override public String translateName(Field f) {
+    @Override
+    public String translateName(Field f) {
       return f.getName();
     }
   },
 
   /**
-   * Using this naming policy with Gson will ensure that the first "letter" of the Java
-   * field name is capitalized when serialized to its JSON form.
+   * Using this naming policy with Gson will ensure that the first "letter" of
+   * the Java field name is capitalized when serialized to its JSON form.
    *
-   * <p>Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":</p>
+   * <p>
+   * Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":
+   * </p>
    * <ul>
-   *   <li>someFieldName ---> SomeFieldName</li>
-   *   <li>_someFieldName ---> _SomeFieldName</li>
+   * <li>someFieldName ---> SomeFieldName</li>
+   * <li>_someFieldName ---> _SomeFieldName</li>
    * </ul>
    */
   UPPER_CAMEL_CASE() {
-    @Override public String translateName(Field f) {
+    @Override
+    public String translateName(Field f) {
       return upperCaseFirstLetter(f.getName());
     }
   },
 
  
   /**
-   * Using this naming policy with Gson will ensure that the first "letter" of the Java
-   * field name is capitalized when serialized to its JSON form and the words will be
-   * separated by a space.
+   * Using this naming policy with Gson will ensure that the first "letter" of
+   * the Java field name is capitalized when serialized to its JSON form and the
+   * words will be separated by a space.
    *
-   * <p>Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":</p>
+   * <p>
+   * Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":
+   * </p>
    * <ul>
-   *   <li>someFieldName ---> Some Field Name</li>
-   *   <li>_someFieldName ---> _Some Field Name</li>
+   * <li>someFieldName ---> Some Field Name</li>
+   * <li>_someFieldName ---> _Some Field Name</li>
    * </ul>
    *
    * @since 1.4
    */
   UPPER_CAMEL_CASE_WITH_SPACES() {
-    @Override public String translateName(Field f) {
+    @Override
+    public String translateName(Field f) {
       return upperCaseFirstLetter(separateCamelCase(f.getName(), " "));
     }
   },
 
   /**
-   * Using this naming policy with Gson will modify the Java Field name from its camel cased
-   * form to a lower case field name where each word is separated by an underscore (_).
+   * Using this naming policy with Gson will modify the Java Field name from its
+   * camel cased form to a lower case field name where each word is separated by
+   * an underscore (_).
    *
-   * <p>Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":</p>
+   * <p>
+   * Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":
+   * </p>
    * <ul>
-   *   <li>someFieldName ---> some_field_name</li>
-   *   <li>_someFieldName ---> _some_field_name</li>
-   *   <li>aStringField ---> a_string_field</li>
-   *   <li>aURL ---> a_u_r_l</li>
+   * <li>someFieldName ---> some_field_name</li>
+   * <li>_someFieldName ---> _some_field_name</li>
+   * <li>aStringField ---> a_string_field</li>
+   * <li>aURL ---> a_u_r_l</li>
    * </ul>
    */
   LOWER_CASE_WITH_UNDERSCORES() {
-    @Override public String translateName(Field f) {
+    @Override
+    public String translateName(Field f) {
       return separateCamelCase(f.getName(), "_").toLowerCase(Locale.ENGLISH);
     }
   },
 
   /**
-   * Using this naming policy with Gson will modify the Java Field name from its camel cased
-   * form to a lower case field name where each word is separated by a dash (-).
+   * Using this naming policy with Gson will modify the Java Field name from its
+   * camel cased form to a lower case field name where each word is separated by
+   * a dash (-).
    *
-   * <p>Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":</p>
+   * <p>
+   * Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":
+   * </p>
    * <ul>
-   *   <li>someFieldName ---> some-field-name</li>
-   *   <li>_someFieldName ---> _some-field-name</li>
-   *   <li>aStringField ---> a-string-field</li>
-   *   <li>aURL ---> a-u-r-l</li>
+   * <li>someFieldName ---> some-field-name</li>
+   * <li>_someFieldName ---> _some-field-name</li>
+   * <li>aStringField ---> a-string-field</li>
+   * <li>aURL ---> a-u-r-l</li>
    * </ul>
-   * Using dashes in JavaScript is not recommended since dash is also used for a minus sign in
-   * expressions. This requires that a field named with dashes is always accessed as a quoted
-   * property like {@code myobject['my-field']}. Accessing it as an object field
-   * {@code myobject.my-field} will result in an unintended javascript expression.
+   * Using dashes in JavaScript is not recommended since dash is also used for a
+   * minus sign in expressions. This requires that a field named with dashes is
+   * always accessed as a quoted property like {@code myobject['my-field']}.
+   * Accessing it as an object field {@code myobject.my-field} will result in an
+   * unintended javascript expression.
+   * 
    * @since 1.4
    */
   LOWER_CASE_WITH_DASHES() {
-    @Override public String translateName(Field f) {
+    @Override
+    public String translateName(Field f) {
       return separateCamelCase(f.getName(), "-").toLowerCase(Locale.ENGLISH);
     }
   };
@@ -160,7 +178,6 @@ static String upperCaseFirstLetter(String name) {
 
   private static String modifyString(char firstCharacter, String srcString, int indexOfSubstring) {
     return (indexOfSubstring < srcString.length())
-        ? firstCharacter + srcString.substring(indexOfSubstring)
-        : String.valueOf(firstCharacter);
+        ? firstCharacter + srcString.substring(indexOfSubstring) : String.valueOf(firstCharacter);
   }
 }
