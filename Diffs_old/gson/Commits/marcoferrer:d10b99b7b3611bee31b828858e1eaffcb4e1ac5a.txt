diff --git a/proto/pom.xml b/proto/pom.xml
index 99f7791d5..9ac41566d 100644
--- a/proto/pom.xml
+++ b/proto/pom.xml
@@ -62,7 +62,7 @@
     <dependency>
       <groupId>com.google.protobuf</groupId>
       <artifactId>protobuf-java</artifactId>
-      <version>2.6.1</version>
+      <version>3.6.1</version>
       <scope>compile</scope>
     </dependency>
     
diff --git a/proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java b/proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java
index c378685c8..dde79908a 100644
--- a/proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java
+++ b/proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java
@@ -36,6 +36,7 @@
 import com.google.protobuf.Descriptors.FieldDescriptor;
 import com.google.protobuf.DynamicMessage;
 import com.google.protobuf.Extension;
+import com.google.protobuf.MapEntry;
 import com.google.protobuf.Message;
 
 import java.lang.reflect.Field;
@@ -240,7 +241,19 @@ public JsonElement serialize(Message src, Type typeOfSrc,
           ret.add(name, context.serialize(getEnumValue(enumDesc)));
         }
       } else {
-        ret.add(name, context.serialize(fieldPair.getValue()));
+        if(fieldPair.getKey().isMapField() && fieldPair.getValue() instanceof Collection){
+          JsonObject mapObject = new JsonObject();
+          @SuppressWarnings("unchecked")
+          Collection<MapEntry<Object,Object>> entries =
+                  (Collection<MapEntry<Object, Object>>) fieldPair.getValue();
+          for(MapEntry<Object,Object> entry : entries){
+            String key = context.serialize(entry.getKey()).getAsString();
+            mapObject.add(key, context.serialize(entry.getValue()));
+          }
+          ret.add(name, mapObject);
+        }else{
+          ret.add(name, context.serialize(fieldPair.getValue()));
+        }
       }
     }
     return ret;
diff --git a/proto/src/main/protobuf/bag.proto b/proto/src/main/protobuf/bag.proto
index 48cc96397..6b3102c46 100644
--- a/proto/src/main/protobuf/bag.proto
+++ b/proto/src/main/protobuf/bag.proto
@@ -35,6 +35,22 @@ message ProtoWithRepeatedFields {
   optional string name = 3;
 }
 
+message ProtoWithMapFields {
+
+  map<int32,SimpleProto> map_of_int32_message = 3;
+  map<int64,SimpleProto> map_of_int64_message = 4;
+  map<uint32,SimpleProto> map_of_uint32_message = 5;
+  map<uint64,SimpleProto> map_of_uint64_message = 6;
+  map<sint32,SimpleProto> map_of_sint32_message = 7;
+  map<sint64,SimpleProto> map_of_sint64_message = 8;
+  map<fixed32,SimpleProto> map_of_fixed32_message = 9;
+  map<fixed64,SimpleProto> map_of_fixed64_message = 10;
+  map<sfixed32,SimpleProto> map_of_sfixed32_message = 11;
+  map<sfixed64,SimpleProto> map_of_sfixed64_message = 12;
+  map<bool,SimpleProto> map_of_bool_message = 13;
+  map<string,SimpleProto> map_of_string_message = 14;
+}
+
 // -- A more complex message with annotations and nested protos
 
 message OuterMessage {
diff --git a/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithMapTypesTest.java b/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithMapTypesTest.java
new file mode 100644
index 000000000..6c46298fe
--- /dev/null
+++ b/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithMapTypesTest.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2010 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.gson.protobuf.functional;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.protobuf.ProtoTypeAdapter;
+import com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization;
+import com.google.gson.protobuf.generated.Bag;
+import com.google.gson.protobuf.generated.Bag.SimpleProto;
+import com.google.protobuf.Descriptors.Descriptor;
+import com.google.protobuf.GeneratedMessage;
+import junit.framework.TestCase;
+
+public class ProtosWithMapTypesTest extends TestCase {
+  private Gson gson;
+
+  @Override
+  protected void setUp() throws Exception {
+    super.setUp();
+    gson = new GsonBuilder().registerTypeHierarchyAdapter(
+      GeneratedMessage.class, ProtoTypeAdapter.newBuilder()
+          .setEnumSerialization(EnumSerialization.NUMBER)
+          .build())
+      .create();
+  }
+
+  //TODO
+}
