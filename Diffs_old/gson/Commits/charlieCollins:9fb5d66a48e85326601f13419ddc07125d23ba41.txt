diff --git a/gson/j2objc/readme.md b/gson/j2objc/readme.md
index b5ba7d4a3..3dbad3e33 100644
--- a/gson/j2objc/readme.md
+++ b/gson/j2objc/readme.md
@@ -9,10 +9,10 @@ Premises:
 * This example project is an attempt to understand how to share code across iOS and Android using j2objc... 
 * j2objc is intended to transpile (source -> source) java code to objective-C   
 * j2objc is one way to share code across iOS and Android, it is interesting because: 
-   * Focus on native code (webviews and frameworks that use them are nonstarters for performance and tweaks reasons)
-   * Focus on non UI code (the logic that should be shared and is not idiomatic and not lowest comment demonimator)
+   * Focus on native code (webviews and frameworks that use them are nonstarters)
+   * Focus on non UI code (logic that should be shared and is not idiomatic of UI)
    * Provides well written source that can be used to debug 
-   * Written with a testing focus in mind, tests can be run across platform (so you know semantics, not just syntax, are correct) 
+   * Written with a testing focus in mind, tests can be run across platform (ensures semantics, not just syntax, are correct) 
    * Written with performance and memory footprint in mind
    * Open source and maintained by very smart and capable people (tom et al at google) 
    * Out of the box it includes a JRE emulation library for core classes, and a useful and sensible set of 3rd party libs
@@ -23,7 +23,7 @@ There are several ways to share native code on iOS and Android, these include C,
 Why GSON
 --------
 
-This example project uses an existing Java library with a lot of source code and a lot of tests: GSON. 
+This example project uses an existing Java library with a lot of source code and a lot of tests: GSON.    
 This allows for a robust example that does not have any transitive dependencies not already supported by j2objc. 
 
 Process high level:
@@ -36,9 +36,9 @@ Process high level:
 j2objc internals
 -----------------
 http://j2objc.org/docs/Design-Overview.html
-1. rewriter rewrites stuff that doesn’t have java equivalent, it all started here, was bigger, stuff split out
+1. rewriter - rewrites stuff that doesn’t have java equivalent, it all started here, was bigger, stuff split out
 2. autoboxer
-3. iostypeconverter — foundation classes, object, number, string, throwable, class, etc
+3. iostypeconverter - foundation classes, object, number, string, throwable, class, etc
 4. iosmethodconverter - uses a mapping table to “fix” method names, no overloading allowed!
 5. initialization normalizer - static vars and static blocks and any init stuff moved into initializers
 6. anon class converter - makes anon classes into inner classes
@@ -58,12 +58,12 @@ Detailed Process: GSON java to objc with tests
    * clone this project, or get the source of gson and mirror this project
    * install j2objc and have $J2OBJC_HOME in the path. 
 
-1. run mvn tests, ensure all java works and tests pass (1018 tests)
+1. run mvn tests, ensure all java works and tests pass (1018 tests)   
 ```mvn test```
 
-#if you NEED sources, maven can help you get them for OS stuff
-#(this puts all the stuff in target/dependency)
-mvn dependency:unpack-dependencies -Dclassifier=sources
+NOTE: if you NEED sources for other projects, such as for transitive dependencies, maven can help you get them for open source stuff.    
+```mvn dependency:unpack-dependencies -Dclassifier=sources```   
+(this will put source in target/dependency)
 
 2. get ALL the source together and make sure javac can compile it
 find ../src -name "*.java" > sources_all.txt
