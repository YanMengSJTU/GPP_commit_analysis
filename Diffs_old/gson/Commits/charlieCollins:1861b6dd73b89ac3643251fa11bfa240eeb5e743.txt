diff --git a/gson/j2objc/gsonobjc b/gson/j2objc/gsonobjc
deleted file mode 100755
index 85b6f7a13..000000000
Binary files a/gson/j2objc/gsonobjc and /dev/null differ
diff --git a/gson/j2objc/process_notes.txt b/gson/j2objc/process_notes.txt
deleted file mode 100644
index ddc3948b4..000000000
--- a/gson/j2objc/process_notes.txt
+++ /dev/null
@@ -1,88 +0,0 @@
-
-PROCESS NOTES
-————————————
-
-start with json, no deps beyond simple java (cheating a little) 
-
-goal
-compile java (just to make sure it works, extra step to get in habit) 
-transpile to obj-c
-compile objc-c
-transpile/compile gson TESTS
-run the tests as OBJECTIVE MUTHA FUCKIN C
-
-http://j2objc.org/docs/Design-Overview.html
-1. rewriter rewrites stuff that doesn’t have java equivalent, it all started here, was bigger, stuff split out
-2. autoboxer
-3. iostypeconverter — foundation classes, object, number, string, throwable, class, etc
-4. iosmethodconverter - uses a mapping table to “fix” method names, no overloading allowed!
-5. initialization normalizer - static vars and static blocks and any init stuff moved into initializers
-6. anon class converter - makes anon classes into inner classes
-7. inner class converter - makes inner classes top level classes “in sample compilation unit” (runs after anon class step, so once this is done it’s all top level, yup)
-8. destructor converter - creates mem momt destructors as needed, tries to deal with finalize, depends on arc or not, etc
-9. complex expression extractor - breaks up complex expressions like chained method calls
-10. nil check resolver - ads nil_chk wherever an expression is dereferenced
-
-https://groups.google.com/forum/#!topic/j2objc-discuss/iXdtl4KRP1k
-notes from tom:
-Here are the basic steps:
-
-Run "rm -rf /tmp/build && mkdir /tmp/build"
-Run "javac -d /tmp/build BLSSMIBI.java" (or whatever that file is named that created BLSSMIBI.o)
-Run "find /tmp/build -name '*.class' | fgrep -v '$' | sed 's/class$/java/' | sed 's/\/tmp\/build\///' > sources.list
-Run "sed 's/java$/m/' sources.list > objc-files.list
-
-The first step creates a clean build environment. 
-The second step compiles the Java source; javac will also compile any dependent classes that are in the source path ("." by default). If the javac command fails, add a "-sourcepath path" argument to it and retry, adjusting the source path until javac completes without errors. DO NOT add a class path argument unless it's for an already translated library like libjunit.a -- all app dependencies should use Java sources (if you don't have source, then the code can't be translated).
-The third step: a) lists the class files javac generated, b) filters out any inner or anonymous classes from that list, c) converts the ".class" suffixes to ".java", d) removes the /tmp/javac from the file names, and e) saves the list to the sources.list file. 
-The fourth step creates a list of ".m" files for each Java source, saving it to objc-files.list.
-
-These steps generate the complete closure of all source files needed for the app. Now, translate them all ("j2objc -d /tmp/build flags $(cat sources.list)" will do it in one step), then compile them all ("j2objcc -o executable_name -I/tmp/build $(cat objc-files.list)"). Since sources.list has all the Java dependencies, objc-files.list will have all the dependent code, resolving any link errors from missing object files.
-
-Once these steps work, consider copying them into a script file such as build.sh, so future builds can be run using "bash build.sh".
-
-
-mvn test
-runs 1018 tests as java, all good, proceed
-
-mvn dependency:unpack-dependencies -Dclassifier=sources
-this puts all the stuff in target/dependency
-
-find ../src/main -name "*.java" > sources.txt 
-
-find ../src/test -name "*.java" > sources_test.txt 
-
-1. transpile regular source to objc source 0 j2objc
-
-mkdir build_java                  
-javac -d ./build_java @sources.txt
-
-2. j2objc that shit with same command to diff output dir
-
-j2objc -d ./build_objc @sources.txt
-
-3. j2objcc that shit into o binaries?
-
-
-
-find ../src -name "*.java" > sources_all.txt
-javac -d ./build_java @sources_all.txt
-javac -classpath ~/.m2/repository/junit/junit/4.12/junit-4.12.jar -d ./build_java @sources_all.txt
-j2objc --no-package-directories -classpath ~/.m2/repository/junit/junit/4.12/junit-4.12.jar -d ./build_objc @sources_all.txt
-j2objcc -Wno-deprecated -ObjC -o gsonobjc -ljre_emul -ljunit ./build_objc/*.m
-./gsonobjc org.junit.runner.JUnitCore ComGoogleGsonCommentsTest
-
-holy shit it worked
-JUnit version 4.11
-.
-Time: 0.004
-
-OK (1 test)
-
-get all the top level "tests" from the interface files...
-find ./build_objc/*Test.h -exec grep -hw -m1 "$@interface" {} \; | sed 's/@interface//' | sed 's/ ().*//' | sed 's/ :.*//' > test_names.txt
-
-run them
-for i in `cat test_names.txt`; do ./gsonobjc org.junit.runner.JUnitCore $i; done
-
-for i in `cat test_names.txt`; do echo RUNNING: $i; ./gsonobjc org.junit.runner.JUnitCore $i; done
diff --git a/gson/j2objc/readme.md b/gson/j2objc/readme.md
new file mode 100644
index 000000000..97f4d80df
--- /dev/null
+++ b/gson/j2objc/readme.md
@@ -0,0 +1,80 @@
+
+PROCESS NOTES
+=============
+
+Overview
+----------
+start with json, no deps beyond simple java (cheating a little) 
+
+goal
+compile java (just to make sure it works, extra step to get in habit) 
+transpile to obj-c
+compile objc-c
+transpile/compile gson TESTS
+run the tests as OBJECTIVE MUTHA FLIPPING C
+
+
+Steps for j2objc internally
+---------------------------
+http://j2objc.org/docs/Design-Overview.html
+1. rewriter rewrites stuff that doesn’t have java equivalent, it all started here, was bigger, stuff split out
+2. autoboxer
+3. iostypeconverter — foundation classes, object, number, string, throwable, class, etc
+4. iosmethodconverter - uses a mapping table to “fix” method names, no overloading allowed!
+5. initialization normalizer - static vars and static blocks and any init stuff moved into initializers
+6. anon class converter - makes anon classes into inner classes
+7. inner class converter - makes inner classes top level classes “in sample compilation unit” (runs after anon class step, so once this is done it’s all top level, yup)
+8. destructor converter - creates mem momt destructors as needed, tries to deal with finalize, depends on arc or not, etc
+9. complex expression extractor - breaks up complex expressions like chained method calls
+10. nil check resolver - ads nil_chk wherever an expression is dereferenced
+
+interesting notes from tom: 
+https://groups.google.com/forum/#!topic/j2objc-discuss/iXdtl4KRP1k
+
+
+take gson and convert it, as an example
+----------------------------------------
+
+1. run mvn tests, all good, 1018 passed
+mvn test
+
+#if you NEED sources, maven can help you get them for OS stuff
+#(this puts all the stuff in target/dependency)
+mvn dependency:unpack-dependencies -Dclassifier=sources
+
+2. get ALL the source together and make sure javac can compile it
+find ../src -name "*.java" > sources_all.txt
+
+3. make sure javac works, and include deps in classpath (ONLY use deps that j2objc supports, else get SOURCE for those deps too)
+javac -classpath ~/.m2/repository/junit/junit/4.12/junit-4.12.jar -d ./build_java @sources_all.txt
+
+4. transpile the JAVA source in OBJC source with j2objc (no pkg dirs makes the imports cleaner/easier)
+j2objc --no-package-directories -classpath ~/.m2/repository/junit/junit/4.12/junit-4.12.jar -d ./build_objc @sources_all.txt
+
+5. compile the OBJC into an executable 
+j2objcc -Wno-deprecated -ObjC -o gsonobjc -ljre_emul -ljunit ./build_objc/*.m
+
+#you now have an executable! and it can run all the interfaces defined within! (incl junit) 
+
+6. run a SINGLE test
+./gsonobjc org.junit.runner.JUnitCore ComGoogleGsonCommentsTest
+
+7. get the NAMES of all the tests, while not using package directories, from the gened header files 
+find ./build_objc/*Test.h -exec grep -hw -m1 "$@interface" {} \; | sed 's/@interface//' | sed 's/ ().*/\/' | sed 's/ :.*//' > test_names.txt
+
+8. RUN the tests 
+for i in `cat test_names.txt`; do echo RUNNING: $i; ./gsonobjc org.junit.runner.JUnitCore $i; done
+
+
+
+other notes
+------------
+
+#try to determing number of tests match?
+grep "OK" test_results.txt | sed 's/OK (//' | sed 's/ test.*//'
+
+#how many original java tests are there
+find ../src/test -name "*Test.java" | wc -l
+
+#sum of tests that ran (it's 1018 in java)
+SUM=0; for i in `grep "OK" test_results.txt | sed 's/OK (//' | sed 's/ test.*//'`; do SUM=$(($SUM + $i)); done; echo $SUM
diff --git a/gson/j2objc/sources_all.txt b/gson/j2objc/sources_all.txt
index db3c8d2b4..855d7011b 100644
--- a/gson/j2objc/sources_all.txt
+++ b/gson/j2objc/sources_all.txt
@@ -65,7 +65,6 @@
 ../src/main/java/com/google/gson/stream/MalformedJsonException.java
 ../src/main/java/com/google/gson/TypeAdapter.java
 ../src/main/java/com/google/gson/TypeAdapterFactory.java
-../src/test/java/com/google/gson/AllTests.java
 ../src/test/java/com/google/gson/CommentsTest.java
 ../src/test/java/com/google/gson/common/MoreAsserts.java
 ../src/test/java/com/google/gson/common/TestTypes.java
diff --git a/gson/j2objc/sources_compiled_tests.txt b/gson/j2objc/sources_compiled_tests.txt
deleted file mode 100644
index a604013e3..000000000
--- a/gson/j2objc/sources_compiled_tests.txt
+++ /dev/null
@@ -1,89 +0,0 @@
-ComGoogleGson/ArrayTest
-ComGoogleGson/CircularReferenceTest
-ComGoogleGson/CollectionTest
-ComGoogleGson/CommentsTest
-ComGoogleGson/ConcurrencyTest
-ComGoogleGson/CustomDeserializerTest
-ComGoogleGson/CustomSerializerTest
-ComGoogleGson/CustomTypeAdaptersTest
-ComGoogleGson/DefaultDateTypeAdapterTest
-ComGoogleGson/DefaultInetAddressTypeAdapterTest
-ComGoogleGson/DefaultMapJsonSerializerTest
-ComGoogleGson/DefaultTypeAdaptersTest
-ComGoogleGson/DelegateTypeAdapterTest
-ComGoogleGson/EnumTest
-ComGoogleGson/EscapingTest
-ComGoogleGson/ExclusionStrategyFunctionalTest
-ComGoogleGson/ExposeAnnotationExclusionStrategyTest
-ComGoogleGson/ExposeFieldsTest
-ComGoogleGson/FieldAttributesTest
-ComGoogleGson/FieldExclusionTest
-ComGoogleGson/FieldNamingTest
-ComGoogleGson/GenericArrayTypeTest
-ComGoogleGson/GsonBuilderTest
-ComGoogleGson/GsonTest
-ComGoogleGson/GsonTypeAdapterTest
-ComGoogleGson/GsonTypesTest
-ComGoogleGson/InheritanceTest
-ComGoogleGson/InnerClassExclusionStrategyTest
-ComGoogleGson/InstanceCreatorTest
-ComGoogleGson/InterfaceTest
-ComGoogleGson/InternationalizationTest
-ComGoogleGson/JavaSerializationTest
-ComGoogleGson/JavaUtilConcurrentAtomicTest
-ComGoogleGson/JavaUtilTest
-ComGoogleGson/JsonAdapterAnnotationOnClassesTest
-ComGoogleGson/JsonAdapterAnnotationOnFieldsTest
-ComGoogleGson/JsonAdapterNullSafeTest
-ComGoogleGson/JsonAdapterSerializerDeserializerTest
-ComGoogleGson/JsonArrayTest
-ComGoogleGson/JsonElementReaderTest
-ComGoogleGson/JsonNullTest
-ComGoogleGson/JsonObjectTest
-ComGoogleGson/JsonParserTest
-ComGoogleGson/JsonPrimitiveTest
-ComGoogleGson/JsonReaderPathTest
-ComGoogleGson/JsonReaderTest
-ComGoogleGson/JsonStreamParserTest
-ComGoogleGson/JsonTreeReaderTest
-ComGoogleGson/JsonTreeTest
-ComGoogleGson/JsonTreeWriterTest
-ComGoogleGson/JsonWriterTest
-ComGoogleGson/LazilyParsedNumberTest
-ComGoogleGson/LeniencyTest
-ComGoogleGson/LinkedHashTreeMapTest
-ComGoogleGson/LinkedTreeMapTest
-ComGoogleGson/LongSerializationPolicyTest
-ComGoogleGson/MapAsArrayTypeAdapterTest
-ComGoogleGson/MapTest
-ComGoogleGson/MixedStreamTest
-ComGoogleGson/MoreSpecificTypeSerializationTest
-ComGoogleGson/NamingPolicyTest
-ComGoogleGson/NullObjectAndFieldTest
-ComGoogleGson/ObjectTest
-ComGoogleGson/ObjectTypeAdapterTest
-ComGoogleGson/OverrideCoreTypeAdaptersTest
-ComGoogleGson/ParameterizedTypesTest
-ComGoogleGson/ParameterizedTypeTest
-ComGoogleGson/PerformanceTest
-ComGoogleGson/PrettyPrintingTest
-ComGoogleGson/PrimitiveCharacterTest
-ComGoogleGson/PrimitiveTest
-ComGoogleGson/PrintFormattingTest
-ComGoogleGson/RawSerializationTest
-ComGoogleGson/ReadersWritersTest
-ComGoogleGson/RuntimeTypeAdapterFactoryFunctionalTest
-ComGoogleGson/SecurityTest
-ComGoogleGson/SerializedNameTest
-ComGoogleGson/StreamingTypeAdaptersTest
-ComGoogleGson/StringTest
-ComGoogleGson/ThrowableFunctionalTest
-ComGoogleGson/TreeTypeAdaptersTest
-ComGoogleGson/TypeAdapterPrecedenceTest
-ComGoogleGson/TypeHierarchyAdapterTest
-ComGoogleGson/TypeTokenTest
-ComGoogleGson/TypeVariableTest
-ComGoogleGson/UncategorizedTest
-ComGoogleGson/UnsafeAllocatorInstantiationTest
-ComGoogleGson/VersionExclusionStrategyTest
-ComGoogleGson/VersioningTest
