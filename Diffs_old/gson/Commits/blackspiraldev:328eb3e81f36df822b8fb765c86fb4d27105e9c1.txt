diff --git a/gson/Gson 2.1 notes.txt b/gson/Gson 2.1 notes.txt
index def324ed8..27562ce95 100644
--- a/gson/Gson 2.1 notes.txt	
+++ b/gson/Gson 2.1 notes.txt	
@@ -3,4 +3,4 @@ Dropped support for GsonBuilder.registerTypeHierarchyAdapter+InstanceCreator
 Relax registerTypeHierarchyAdapter order
 Gson 2.0 failed if you registered Manager then Employee would fail
 Gson 2.1 it isn't a problem
-com.google.gson.functional.TypeHierarchyAdapterTest#testRegisterSubTypeFirstNotAllowed
\ No newline at end of file
+TypeHierarchyAdapterTest#testRegisterSubTypeFirstNotAllowed
\ No newline at end of file
diff --git a/gson/META-INF/MANIFEST.MF b/gson/META-INF/MANIFEST.MF
new file mode 100644
index 000000000..58630c02e
--- /dev/null
+++ b/gson/META-INF/MANIFEST.MF
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+
diff --git a/gson/gson-jsonwriter.java b/gson/gson-jsonwriter.java
new file mode 100644
index 000000000..2a62da0de
--- /dev/null
+++ b/gson/gson-jsonwriter.java
@@ -0,0 +1,660 @@
+/*
+ * Copyright (C) 2010 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.gson.stream;
+
+import java.io.Closeable;
+import java.io.Flushable;
+import java.io.IOException;
+import java.io.Writer;
+
+import static com.google.gson.stream.JsonScope.DANGLING_NAME;
+import static com.google.gson.stream.JsonScope.EMPTY_ARRAY;
+import static com.google.gson.stream.JsonScope.EMPTY_DOCUMENT;
+import static com.google.gson.stream.JsonScope.EMPTY_OBJECT;
+import static com.google.gson.stream.JsonScope.NONEMPTY_ARRAY;
+import static com.google.gson.stream.JsonScope.NONEMPTY_DOCUMENT;
+import static com.google.gson.stream.JsonScope.NONEMPTY_OBJECT;
+
+/**
+ * Writes a JSON (<a href="http://www.ietf.org/rfc/rfc7159.txt">RFC 7159</a>)
+ * encoded value to a stream, one token at a time. The stream includes both
+ * literal values (strings, numbers, booleans and nulls) as well as the begin
+ * and end delimiters of objects and arrays.
+ *
+ * <h3>Encoding JSON</h3>
+ * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON
+ * document must contain one top-level array or object. Call methods on the
+ * writer as you walk the structure's contents, nesting arrays and objects as
+ * necessary:
+ * <ul>
+ *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.
+ *       Write each of the array's elements with the appropriate {@link #value}
+ *       methods or by nesting other arrays and objects. Finally close the array
+ *       using {@link #endArray()}.
+ *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.
+ *       Write each of the object's properties by alternating calls to
+ *       {@link #name} with the property's value. Write property values with the
+ *       appropriate {@link #value} method or by nesting other objects or arrays.
+ *       Finally close the object using {@link #endObject()}.
+ * </ul>
+ *
+ * <h3>Example</h3>
+ * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code
+ * [
+ *   {
+ *     "id": 912345678901,
+ *     "text": "How do I stream JSON in Java?",
+ *     "geo": null,
+ *     "user": {
+ *       "name": "json_newb",
+ *       "followers_count": 41
+ *      }
+ *   },
+ *   {
+ *     "id": 912345678902,
+ *     "text": "@json_newb just use JsonWriter!",
+ *     "geo": [50.454722, -104.606667],
+ *     "user": {
+ *       "name": "jesse",
+ *       "followers_count": 2
+ *     }
+ *   }
+ * ]}</pre>
+ * This code encodes the above structure: <pre>   {@code
+ *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {
+ *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, "UTF-8"));
+ *     writer.setIndent("    ");
+ *     writeMessagesArray(writer, messages);
+ *     writer.close();
+ *   }
+ *
+ *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {
+ *     writer.beginArray();
+ *     for (Message message : messages) {
+ *       writeMessage(writer, message);
+ *     }
+ *     writer.endArray();
+ *   }
+ *
+ *   public void writeMessage(JsonWriter writer, Message message) throws IOException {
+ *     writer.beginObject();
+ *     writer.name("id").value(message.getId());
+ *     writer.name("text").value(message.getText());
+ *     if (message.getGeo() != null) {
+ *       writer.name("geo");
+ *       writeDoublesArray(writer, message.getGeo());
+ *     } else {
+ *       writer.name("geo").nullValue();
+ *     }
+ *     writer.name("user");
+ *     writeUser(writer, message.getUser());
+ *     writer.endObject();
+ *   }
+ *
+ *   public void writeUser(JsonWriter writer, User user) throws IOException {
+ *     writer.beginObject();
+ *     writer.name("name").value(user.getName());
+ *     writer.name("followers_count").value(user.getFollowersCount());
+ *     writer.endObject();
+ *   }
+ *
+ *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {
+ *     writer.beginArray();
+ *     for (Double value : doubles) {
+ *       writer.value(value);
+ *     }
+ *     writer.endArray();
+ *   }}</pre>
+ *
+ * <p>Each {@code JsonWriter} may be used to write a single JSON stream.
+ * Instances of this class are not thread safe. Calls that would result in a
+ * malformed JSON string will fail with an {@link IllegalStateException}.
+ *
+ * @author Jesse Wilson
+ * @since 1.6
+ */
+public class JsonWriter implements Closeable, Flushable {
+
+  /*
+   * From RFC 7159, "All Unicode characters may be placed within the
+   * quotation marks except for the characters that must be escaped:
+   * quotation mark, reverse solidus, and the control characters
+   * (U+0000 through U+001F)."
+   *
+   * We also escape '\u2028' and '\u2029', which JavaScript interprets as
+   * newline characters. This prevents eval() from failing with a syntax
+   * error. http://code.google.com/p/google-gson/issues/detail?id=341
+   */
+  private static final String[] REPLACEMENT_CHARS;
+  private static final String[] HTML_SAFE_REPLACEMENT_CHARS;
+  static {
+    REPLACEMENT_CHARS = new String[128];
+    for (int i = 0; i <= 0x1f; i++) {
+      REPLACEMENT_CHARS[i] = String.format("\\u%04x", (int) i);
+    }
+    REPLACEMENT_CHARS['"'] = "\\\"";
+    REPLACEMENT_CHARS['\\'] = "\\\\";
+    REPLACEMENT_CHARS['\t'] = "\\t";
+    REPLACEMENT_CHARS['\b'] = "\\b";
+    REPLACEMENT_CHARS['\n'] = "\\n";
+    REPLACEMENT_CHARS['\r'] = "\\r";
+    REPLACEMENT_CHARS['\f'] = "\\f";
+    HTML_SAFE_REPLACEMENT_CHARS = REPLACEMENT_CHARS.clone();
+    HTML_SAFE_REPLACEMENT_CHARS['<'] = "\\u003c";
+    HTML_SAFE_REPLACEMENT_CHARS['>'] = "\\u003e";
+    HTML_SAFE_REPLACEMENT_CHARS['&'] = "\\u0026";
+    HTML_SAFE_REPLACEMENT_CHARS['='] = "\\u003d";
+    HTML_SAFE_REPLACEMENT_CHARS['\''] = "\\u0027";
+  }
+
+  /** The output data, containing at most one top-level array or object. */
+  private final Writer out;
+
+  private int[] stack = new int[32];
+  private int stackSize = 0;
+  {
+    push(EMPTY_DOCUMENT);
+  }
+
+  /**
+   * A string containing a full set of spaces for a single level of
+   * indentation, or null for no pretty printing.
+   */
+  private String indent;
+
+  /**
+   * The name/value separator; either ":" or ": ".
+   */
+  private String separator = ":";
+
+  private boolean lenient;
+
+  private boolean htmlSafe;
+
+  private String deferredName;
+
+  private boolean serializeNulls = true;
+
+  /**
+   * Creates a new instance that writes a JSON-encoded stream to {@code out}.
+   * For best performance, ensure {@link Writer} is buffered; wrapping in
+   * {@link java.io.BufferedWriter BufferedWriter} if necessary.
+   */
+  public JsonWriter(Writer out) {
+    if (out == null) {
+      throw new NullPointerException("out == null");
+    }
+    this.out = out;
+  }
+
+  /**
+   * Sets the indentation string to be repeated for each level of indentation
+   * in the encoded document. If {@code indent.isEmpty()} the encoded document
+   * will be compact. Otherwise the encoded document will be more
+   * human-readable.
+   *
+   * @param indent a string containing only whitespace.
+   */
+  public final void setIndent(String indent) {
+    if (indent.length() == 0) {
+      this.indent = null;
+      this.separator = ":";
+    } else {
+      this.indent = indent;
+      this.separator = ": ";
+    }
+  }
+
+  /**
+   * Configure this writer to relax its syntax rules. By default, this writer
+   * only emits well-formed JSON as specified by <a
+   * href="http://www.ietf.org/rfc/rfc7159.txt">RFC 7159</a>. Setting the writer
+   * to lenient permits the following:
+   * <ul>
+   *   <li>Top-level values of any type. With strict writing, the top-level
+   *       value must be an object or an array.
+   *   <li>Numbers may be {@link Double#isNaN() NaNs} or {@link
+   *       Double#isInfinite() infinities}.
+   * </ul>
+   */
+  public final void setLenient(boolean lenient) {
+    this.lenient = lenient;
+  }
+
+  /**
+   * Returns true if this writer has relaxed syntax rules.
+   */
+  public boolean isLenient() {
+    return lenient;
+  }
+
+  /**
+   * Configure this writer to emit JSON that's safe for direct inclusion in HTML
+   * and XML documents. This escapes the HTML characters {@code <}, {@code >},
+   * {@code &} and {@code =} before writing them to the stream. Without this
+   * setting, your XML/HTML encoder should replace these characters with the
+   * corresponding escape sequences.
+   */
+  public final void setHtmlSafe(boolean htmlSafe) {
+    this.htmlSafe = htmlSafe;
+  }
+
+  /**
+   * Returns true if this writer writes JSON that's safe for inclusion in HTML
+   * and XML documents.
+   */
+  public final boolean isHtmlSafe() {
+    return htmlSafe;
+  }
+
+  /**
+   * Sets whether object members are serialized when their value is null.
+   * This has no impact on array elements. The default is true.
+   */
+  public final void setSerializeNulls(boolean serializeNulls) {
+    this.serializeNulls = serializeNulls;
+  }
+
+  /**
+   * Returns true if object members are serialized when their value is null.
+   * This has no impact on array elements. The default is true.
+   */
+  public final boolean getSerializeNulls() {
+    return serializeNulls;
+  }
+
+  /**
+   * Begins encoding a new array. Each call to this method must be paired with
+   * a call to {@link #endArray}.
+   *
+   * @return this writer.
+   */
+  public JsonWriter beginArray() throws IOException {
+    writeDeferredName();
+    return open(EMPTY_ARRAY, "[");
+  }
+
+  /**
+   * Ends encoding the current array.
+   *
+   * @return this writer.
+   */
+  public JsonWriter endArray() throws IOException {
+    return close(EMPTY_ARRAY, NONEMPTY_ARRAY, "]");
+  }
+
+  /**
+   * Begins encoding a new object. Each call to this method must be paired
+   * with a call to {@link #endObject}.
+   *
+   * @return this writer.
+   */
+  public JsonWriter beginObject() throws IOException {
+    writeDeferredName();
+    return open(EMPTY_OBJECT, "{");
+  }
+
+  /**
+   * Ends encoding the current object.
+   *
+   * @return this writer.
+   */
+  public JsonWriter endObject() throws IOException {
+    return close(EMPTY_OBJECT, NONEMPTY_OBJECT, "}");
+  }
+
+  /**
+   * Enters a new scope by appending any necessary whitespace and the given
+   * bracket.
+   */
+  private JsonWriter open(int empty, String openBracket) throws IOException {
+    beforeValue();
+    push(empty);
+    out.write(openBracket);
+    return this;
+  }
+
+  /**
+   * Closes the current scope by appending any necessary whitespace and the
+   * given bracket.
+   */
+  private JsonWriter close(int empty, int nonempty, String closeBracket)
+      throws IOException {
+    int context = peek();
+    if (context != nonempty && context != empty) {
+      throw new IllegalStateException("Nesting problem.");
+    }
+    if (deferredName != null) {
+      throw new IllegalStateException("Dangling name: " + deferredName);
+    }
+
+    stackSize--;
+    if (context == nonempty) {
+      newline();
+    }
+    out.write(closeBracket);
+    return this;
+  }
+
+  private void push(int newTop) {
+    if (stackSize == stack.length) {
+      int[] newStack = new int[stackSize * 2];
+      System.arraycopy(stack, 0, newStack, 0, stackSize);
+      stack = newStack;
+    }
+    stack[stackSize++] = newTop;
+  }
+
+  /**
+   * Returns the value on the top of the stack.
+   */
+  private int peek() {
+    if (stackSize == 0) {
+      throw new IllegalStateException("JsonWriter is closed.");
+    }
+    return stack[stackSize - 1];
+  }
+
+  /**
+   * Replace the value on the top of the stack with the given value.
+   */
+  private void replaceTop(int topOfStack) {
+    stack[stackSize - 1] = topOfStack;
+  }
+
+  /**
+   * Encodes the property name.
+   *
+   * @param name the name of the forthcoming value. May not be null.
+   * @return this writer.
+   */
+  public JsonWriter name(String name) throws IOException {
+    if (name == null) {
+      throw new NullPointerException("name == null");
+    }
+    if (deferredName != null) {
+      throw new IllegalStateException();
+    }
+    if (stackSize == 0) {
+      throw new IllegalStateException("JsonWriter is closed.");
+    }
+    deferredName = name;
+    return this;
+  }
+
+  private void writeDeferredName() throws IOException {
+    if (deferredName != null) {
+      beforeName();
+      string(deferredName);
+      deferredName = null;
+    }
+  }
+
+  /**
+   * Encodes {@code value}.
+   *
+   * @param value the literal string value, or null to encode a null literal.
+   * @return this writer.
+   */
+  public JsonWriter value(String value) throws IOException {
+    if (value == null) {
+      return nullValue();
+    }
+    writeDeferredName();
+    beforeValue();
+    string(value);
+    return this;
+  }
+
+  /**
+   * Writes {@code value} directly to the writer without quoting or
+   * escaping.
+   *
+   * @param value the literal string value, or null to encode a null literal.
+   * @return this writer.
+   */
+  public JsonWriter jsonValue(String value) throws IOException {
+    if (value == null) {
+      return nullValue();
+    }
+    writeDeferredName();
+    beforeValue();
+    out.append(value);
+    return this;
+  }
+
+  /**
+   * Encodes {@code null}.
+   *
+   * @return this writer.
+   */
+  public JsonWriter nullValue() throws IOException {
+    if (deferredName != null) {
+      if (serializeNulls) {
+        writeDeferredName();
+      } else {
+        deferredName = null;
+        return this; // skip the name and the value
+      }
+    }
+    beforeValue();
+    out.write("null");
+    return this;
+  }
+
+  /**
+   * Encodes {@code value}.
+   *
+   * @return this writer.
+   */
+  public JsonWriter value(boolean value) throws IOException {
+    writeDeferredName();
+    beforeValue();
+    out.write(value ? "true" : "false");
+    return this;
+  }
+
+  /**
+   * Encodes {@code value}.
+   *
+   * @return this writer.
+   */
+  public JsonWriter value(Boolean value) throws IOException {
+    if (value == null) {
+      return nullValue();
+    }
+    writeDeferredName();
+    beforeValue();
+    out.write(value ? "true" : "false");
+    return this;
+  }
+
+  /**
+   * Encodes {@code value}.
+   *
+   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or
+   *     {@link Double#isInfinite() infinities}.
+   * @return this writer.
+   */
+  public JsonWriter value(double value) throws IOException {
+    if (Double.isNaN(value) || Double.isInfinite(value)) {
+      throw new IllegalArgumentException("Numeric values must be finite, but was " + value);
+    }
+    writeDeferredName();
+    beforeValue();
+    out.append(Double.toString(value));
+    return this;
+  }
+
+  /**
+   * Encodes {@code value}.
+   *
+   * @return this writer.
+   */
+  public JsonWriter value(long value) throws IOException {
+    writeDeferredName();
+    beforeValue();
+    out.write(Long.toString(value));
+    return this;
+  }
+
+  /**
+   * Encodes {@code value}.
+   *
+   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or
+   *     {@link Double#isInfinite() infinities}.
+   * @return this writer.
+   */
+  public JsonWriter value(Number value) throws IOException {
+    if (value == null) {
+      return nullValue();
+    }
+
+    writeDeferredName();
+    String string = value.toString();
+    if (!lenient
+        && (string.equals("-Infinity") || string.equals("Infinity") || string.equals("NaN"))) {
+      throw new IllegalArgumentException("Numeric values must be finite, but was " + value);
+    }
+    beforeValue();
+    out.append(string);
+    return this;
+  }
+
+  /**
+   * Ensures all buffered data is written to the underlying {@link Writer}
+   * and flushes that writer.
+   */
+  public void flush() throws IOException {
+    if (stackSize == 0) {
+      throw new IllegalStateException("JsonWriter is closed.");
+    }
+    out.flush();
+  }
+
+  /**
+   * Flushes and closes this writer and the underlying {@link Writer}.
+   *
+   * @throws IOException if the JSON document is incomplete.
+   */
+  public void close() throws IOException {
+    out.close();
+
+    int size = stackSize;
+    if (size > 1 || size == 1 && stack[size - 1] != NONEMPTY_DOCUMENT) {
+      throw new IOException("Incomplete document");
+    }
+    stackSize = 0;
+  }
+
+  private void string(String value) throws IOException {
+    String[] replacements = htmlSafe ? HTML_SAFE_REPLACEMENT_CHARS : REPLACEMENT_CHARS;
+    out.write("\"");
+    int last = 0;
+    int length = value.length();
+    for (int i = 0; i < length; i++) {
+      char c = value.charAt(i);
+      String replacement;
+      if (c < 128) {
+        replacement = replacements[c];
+        if (replacement == null) {
+          continue;
+        }
+      } else if (c == '\u2028') {
+        replacement = "\\u2028";
+      } else if (c == '\u2029') {
+        replacement = "\\u2029";
+      } else {
+        continue;
+      }
+      if (last < i) {
+        out.write(value, last, i - last);
+      }
+      out.write(replacement);
+      last = i + 1;
+    }
+    if (last < length) {
+      out.write(value, last, length - last);
+    }
+    out.write("\"");
+  }
+
+  private void newline() throws IOException {
+    if (indent == null) {
+      return;
+    }
+
+    out.write("\n");
+    for (int i = 1, size = stackSize; i < size; i++) {
+      out.write(indent);
+    }
+  }
+
+  /**
+   * Inserts any necessary separators and whitespace before a name. Also
+   * adjusts the stack to expect the name's value.
+   */
+  private void beforeName() throws IOException {
+    int context = peek();
+    if (context == NONEMPTY_OBJECT) { // first in object
+      out.write(',');
+    } else if (context != EMPTY_OBJECT) { // not in an object!
+      throw new IllegalStateException("Nesting problem.");
+    }
+    newline();
+    replaceTop(DANGLING_NAME);
+  }
+
+  /**
+   * Inserts any necessary separators and whitespace before a literal value,
+   * inline array, or inline object. Also adjusts the stack to expect either a
+   * closing bracket or another element.
+   */
+  @SuppressWarnings("fallthrough")
+  private void beforeValue() throws IOException {
+    switch (peek()) {
+    case NONEMPTY_DOCUMENT:
+      if (!lenient) {
+        throw new IllegalStateException(
+            "JSON must have only one top-level value.");
+      }
+      // fall-through
+    case EMPTY_DOCUMENT: // first in document
+      replaceTop(NONEMPTY_DOCUMENT);
+      break;
+
+    case EMPTY_ARRAY: // first in array
+      replaceTop(NONEMPTY_ARRAY);
+      newline();
+      break;
+
+    case NONEMPTY_ARRAY: // another in array
+      out.append(',');
+      newline();
+      break;
+
+    case DANGLING_NAME: // value for name
+      out.append(separator);
+      replaceTop(NONEMPTY_OBJECT);
+      break;
+
+    default:
+      throw new IllegalStateException("Nesting problem.");
+    }
+  }
+}
+
diff --git a/gson/src/main/java/com/google/stripped/gson/Gson.java b/gson/src/main/java/com/google/stripped/gson/Gson.java
index 35343993e..c4ec109e8 100644
--- a/gson/src/main/java/com/google/stripped/gson/Gson.java
+++ b/gson/src/main/java/com/google/stripped/gson/Gson.java
@@ -16,28 +16,23 @@
 
 package com.google.stripped.gson;
 
-import java.io.EOFException;
-import java.io.IOException;
-import java.io.Reader;
-import java.io.StringReader;
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
+import com.google.stripped.gson.stream.JsonWriter;
+import com.google.stripped.gson.annotations.Expose;
+import com.google.stripped.gson.annotations.Since;
 import com.google.stripped.gson.internal.ConstructorConstructor;
 import com.google.stripped.gson.internal.Excluder;
 import com.google.stripped.gson.internal.Primitives;
-import com.google.stripped.gson.annotations.Expose;
-import com.google.stripped.gson.annotations.Since;
+import com.google.stripped.gson.internal.Streams;
 import com.google.stripped.gson.internal.bind.*;
 import com.google.stripped.gson.reflect.TypeToken;
 import com.google.stripped.gson.stream.JsonReader;
 import com.google.stripped.gson.stream.JsonToken;
 import com.google.stripped.gson.stream.MalformedJsonException;
 
+import java.io.*;
+import java.lang.reflect.Type;
+import java.util.*;
+
 /**
  * This is the main class for using Gson. Gson is typically used by first constructing a
  * Gson instance and then invoking {@link #toJson(Object)} or {@link #fromJson(String, Class)}
@@ -122,6 +117,14 @@
     }
   };
 
+  final JsonSerializationContext serializationContext = new JsonSerializationContext() {
+    @Override public JsonElement serialize(Object src) {
+      return toJsonTree(src);
+    }
+    @Override public JsonElement serialize(Object src, Type typeOfSrc) {
+      return toJsonTree(src, typeOfSrc);
+    }
+  };
 
   /**
    * Constructs a Gson object with default configuration. The default configuration has the
@@ -199,7 +202,6 @@ public Gson() {
 
     // type adapters for composite and user-defined types
     factories.add(new CollectionTypeAdapterFactory(constructorConstructor));
-    factories.add(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization));
     factories.add(new JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor));
     factories.add(TypeAdapters.ENUM_FACTORY);
     factories.add(new ReflectiveTypeAdapterFactory(
@@ -340,6 +342,205 @@ public Gson() {
     return getAdapter(TypeToken.get(type));
   }
 
+  /**
+   * This method serializes the specified object into its equivalent representation as a tree of
+   * {@link JsonElement}s. This method should be used when the specified object is not a generic
+   * type. This method uses {@link Class#getClass()} to get the type for the specified object, but
+   * the {@code getClass()} loses the generic type information because of the Type Erasure feature
+   * of Java. Note that this method works fine if the any of the object fields are of generic type,
+   * just the object itself should not be of a generic type. If the object is of generic type, use
+   * {@link #toJsonTree(Object, Type)} instead.
+   *
+   * @param src the object for which Json representation is to be created setting for Gson
+   * @return Json representation of {@code src}.
+   * @since 1.4
+   */
+  public JsonElement toJsonTree(Object src) {
+    if (src == null) {
+      return JsonNull.INSTANCE;
+    }
+    return toJsonTree(src, src.getClass());
+  }
+
+  /**
+   * This method serializes the specified object, including those of generic types, into its
+   * equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
+   * specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
+   * instead.
+   *
+   * @param src the object for which JSON representation is to be created
+   * @param typeOfSrc The specific genericized type of src. You can obtain
+   * this type by using the {@link com.google.stripped.gson.reflect.TypeToken} class. For example,
+   * to get the type for {@code Collection<Foo>}, you should use:
+   * <pre>
+   * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
+   * </pre>
+   * @return Json representation of {@code src}
+   * @since 1.4
+   */
+  public JsonElement toJsonTree(Object src, Type typeOfSrc) {
+    JsonTreeWriter writer = new JsonTreeWriter();
+    toJson(src, typeOfSrc, writer);
+    return writer.get();
+  }
+
+  /**
+   * This method serializes the specified object into its equivalent Json representation.
+   * This method should be used when the specified object is not a generic type. This method uses
+   * {@link Class#getClass()} to get the type for the specified object, but the
+   * {@code getClass()} loses the generic type information because of the Type Erasure feature
+   * of Java. Note that this method works fine if the any of the object fields are of generic type,
+   * just the object itself should not be of a generic type. If the object is of generic type, use
+   * {@link #toJson(Object, Type)} instead. If you want to write out the object to a
+   * {@link Writer}, use {@link #toJson(Object, Appendable)} instead.
+   *
+   * @param src the object for which Json representation is to be created setting for Gson
+   * @return Json representation of {@code src}.
+   */
+  public String toJson(Object src) {
+    if (src == null) {
+      return toJson(JsonNull.INSTANCE);
+    }
+    return toJson(src, src.getClass());
+  }
+
+  /**
+   * This method serializes the specified object, including those of generic types, into its
+   * equivalent Json representation. This method must be used if the specified object is a generic
+   * type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out
+   * the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.
+   *
+   * @param src the object for which JSON representation is to be created
+   * @param typeOfSrc The specific genericized type of src. You can obtain
+   * this type by using the {@link com.google.stripped.gson.reflect.TypeToken} class. For example,
+   * to get the type for {@code Collection<Foo>}, you should use:
+   * <pre>
+   * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
+   * </pre>
+   * @return Json representation of {@code src}
+   */
+  public String toJson(Object src, Type typeOfSrc) {
+    StringWriter writer = new StringWriter();
+    toJson(src, typeOfSrc, writer);
+    return writer.toString();
+  }
+
+  /**
+   * This method serializes the specified object into its equivalent Json representation.
+   * This method should be used when the specified object is not a generic type. This method uses
+   * {@link Class#getClass()} to get the type for the specified object, but the
+   * {@code getClass()} loses the generic type information because of the Type Erasure feature
+   * of Java. Note that this method works fine if the any of the object fields are of generic type,
+   * just the object itself should not be of a generic type. If the object is of generic type, use
+   * {@link #toJson(Object, Type, Appendable)} instead.
+   *
+   * @param src the object for which Json representation is to be created setting for Gson
+   * @param writer Writer to which the Json representation needs to be written
+   * @throws JsonIOException if there was a problem writing to the writer
+   * @since 1.2
+   */
+  public void toJson(Object src, Appendable writer) throws JsonIOException {
+    if (src != null) {
+      toJson(src, src.getClass(), writer);
+    } else {
+      toJson(JsonNull.INSTANCE, writer);
+    }
+  }
+
+  /**
+   * This method serializes the specified object, including those of generic types, into its
+   * equivalent Json representation. This method must be used if the specified object is a generic
+   * type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.
+   *
+   * @param src the object for which JSON representation is to be created
+   * @param typeOfSrc The specific genericized type of src. You can obtain
+   * this type by using the {@link com.google.stripped.gson.reflect.TypeToken} class. For example,
+   * to get the type for {@code Collection<Foo>}, you should use:
+   * <pre>
+   * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
+   * </pre>
+   * @param writer Writer to which the Json representation of src needs to be written.
+   * @throws JsonIOException if there was a problem writing to the writer
+   * @since 1.2
+   */
+  public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException {
+    try {
+      JsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));
+      toJson(src, typeOfSrc, jsonWriter);
+    } catch (IOException e) {
+      throw new JsonIOException(e);
+    }
+  }
+
+  /**
+   * Writes the JSON representation of {@code src} of type {@code typeOfSrc} to
+   * {@code writer}.
+   * @throws JsonIOException if there was a problem writing to the writer
+   */
+  @SuppressWarnings("unchecked")
+  public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {
+    TypeAdapter<?> adapter = getAdapter(TypeToken.get(typeOfSrc));
+    boolean oldLenient = writer.isLenient();
+    writer.setLenient(true);
+    boolean oldHtmlSafe = writer.isHtmlSafe();
+    writer.setHtmlSafe(htmlSafe);
+    boolean oldSerializeNulls = writer.getSerializeNulls();
+    writer.setSerializeNulls(serializeNulls);
+    try {
+      ((TypeAdapter<Object>) adapter).write(writer, src);
+    } catch (IOException e) {
+      throw new JsonIOException(e);
+    } finally {
+      writer.setLenient(oldLenient);
+      writer.setHtmlSafe(oldHtmlSafe);
+      writer.setSerializeNulls(oldSerializeNulls);
+    }
+  }
+
+  /**
+   * Converts a tree of {@link JsonElement}s into its equivalent JSON representation.
+   *
+   * @param jsonElement root of a tree of {@link JsonElement}s
+   * @return JSON String representation of the tree
+   * @since 1.4
+   */
+  public String toJson(JsonElement jsonElement) {
+    StringWriter writer = new StringWriter();
+    toJson(jsonElement, writer);
+    return writer.toString();
+  }
+
+  /**
+   * Writes out the equivalent JSON for a tree of {@link JsonElement}s.
+   *
+   * @param jsonElement root of a tree of {@link JsonElement}s
+   * @param writer Writer to which the Json representation needs to be written
+   * @throws JsonIOException if there was a problem writing to the writer
+   * @since 1.4
+   */
+  public void toJson(JsonElement jsonElement, Appendable writer) throws JsonIOException {
+    try {
+      JsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));
+      toJson(jsonElement, jsonWriter);
+    } catch (IOException e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  /**
+   * Returns a new JSON writer configured for the settings on this Gson instance.
+   */
+  public JsonWriter newJsonWriter(Writer writer) throws IOException {
+    if (generateNonExecutableJson) {
+      writer.write(JSON_NON_EXECUTABLE_PREFIX);
+    }
+    JsonWriter jsonWriter = new JsonWriter(writer);
+    if (prettyPrinting) {
+      jsonWriter.setIndent("  ");
+    }
+    jsonWriter.setSerializeNulls(serializeNulls);
+    return jsonWriter;
+  }
 
   /**
    * Returns a new JSON writer configured for the settings on this Gson instance.
@@ -350,6 +551,27 @@ public JsonReader newJsonReader(Reader reader) {
     return jsonReader;
   }
 
+  /**
+   * Writes the JSON for {@code jsonElement} to {@code writer}.
+   * @throws JsonIOException if there was a problem writing to the writer
+   */
+  public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOException {
+    boolean oldLenient = writer.isLenient();
+    writer.setLenient(true);
+    boolean oldHtmlSafe = writer.isHtmlSafe();
+    writer.setHtmlSafe(htmlSafe);
+    boolean oldSerializeNulls = writer.getSerializeNulls();
+    writer.setSerializeNulls(serializeNulls);
+    try {
+      Streams.write(jsonElement, writer);
+    } catch (IOException e) {
+      throw new JsonIOException(e);
+    } finally {
+      writer.setLenient(oldLenient);
+      writer.setHtmlSafe(oldHtmlSafe);
+      writer.setSerializeNulls(oldSerializeNulls);
+    }
+  }
 
   /**
    * This method deserializes the specified Json into an object of the specified class. It is not
@@ -568,6 +790,12 @@ public void setDelegate(TypeAdapter<T> typeAdapter) {
       return delegate.read(in);
     }
 
+    @Override public void write(JsonWriter out, T value) throws IOException {
+      if (delegate == null) {
+        throw new IllegalStateException();
+      }
+      delegate.write(out, value);
+    }
   }
 
   @Override
diff --git a/gson/src/main/java/com/google/stripped/gson/TreeTypeAdapter.java b/gson/src/main/java/com/google/stripped/gson/TreeTypeAdapter.java
index 2af760fec..ef7536e18 100644
--- a/gson/src/main/java/com/google/stripped/gson/TreeTypeAdapter.java
+++ b/gson/src/main/java/com/google/stripped/gson/TreeTypeAdapter.java
@@ -20,6 +20,7 @@
 import com.google.stripped.gson.internal.Streams;
 import com.google.stripped.gson.reflect.TypeToken;
 import com.google.stripped.gson.stream.JsonReader;
+import com.google.stripped.gson.stream.JsonWriter;
 
 import java.io.IOException;
 
@@ -58,6 +59,19 @@
     return deserializer.deserialize(value, typeToken.getType(), gson.deserializationContext);
   }
 
+  @Override public void write(JsonWriter out, T value) throws IOException {
+    if (serializer == null) {
+      delegate().write(out, value);
+      return;
+    }
+    if (value == null) {
+      out.nullValue();
+      return;
+    }
+    JsonElement tree = serializer.serialize(value, typeToken.getType(), gson.serializationContext);
+    Streams.write(tree, out);
+  }
+
   private TypeAdapter<T> delegate() {
     TypeAdapter<T> d = delegate;
     return d != null
diff --git a/gson/src/main/java/com/google/stripped/gson/TypeAdapter.java b/gson/src/main/java/com/google/stripped/gson/TypeAdapter.java
index 38d75d69f..77761c736 100644
--- a/gson/src/main/java/com/google/stripped/gson/TypeAdapter.java
+++ b/gson/src/main/java/com/google/stripped/gson/TypeAdapter.java
@@ -17,12 +17,12 @@
 package com.google.stripped.gson;
 
 import com.google.stripped.gson.internal.bind.JsonTreeReader;
+import com.google.stripped.gson.internal.bind.JsonTreeWriter;
 import com.google.stripped.gson.stream.JsonReader;
 import com.google.stripped.gson.stream.JsonToken;
+import com.google.stripped.gson.stream.JsonWriter;
 
-import java.io.IOException;
-import java.io.Reader;
-import java.io.StringReader;
+import java.io.*;
 
 /**
  * Converts Java objects to and from JSON.
@@ -115,6 +115,29 @@
 //
 public abstract class TypeAdapter<T> {
 
+  /**
+   * Writes one JSON value (an array, object, string, number, boolean or null)
+   * for {@code value}.
+   *
+   * @param value the Java object to write. May be null.
+   */
+  public abstract void write(JsonWriter out, T value) throws IOException;
+
+  /**
+   * Converts {@code value} to a JSON document and writes it to {@code out}.
+   * Unlike Gson's similar {@link Gson#toJson(JsonElement, Appendable) toJson}
+   * method, this write is strict. Create a {@link
+   * JsonWriter#setLenient(boolean) lenient} {@code JsonWriter} and call
+   * {@link #write(com.google.stripped.gson.stream.JsonWriter, Object)} for lenient
+   * writing.
+   *
+   * @param value the Java object to convert. May be null.
+   * @since 2.2
+   */
+  public final void toJson(Writer out, T value) throws IOException {
+    JsonWriter writer = new JsonWriter(out);
+    write(writer, value);
+  }
 
   /**
    * This wrapper method is used to make a type adapter null tolerant. In general, a
@@ -158,7 +181,13 @@
    */
   public final TypeAdapter<T> nullSafe() {
     return new TypeAdapter<T>() {
-
+      @Override public void write(JsonWriter out, T value) throws IOException {
+        if (value == null) {
+          out.nullValue();
+        } else {
+          TypeAdapter.this.write(out, value);
+        }
+      }
       @Override public T read(JsonReader reader) throws IOException {
         if (reader.peek() == JsonToken.NULL) {
           reader.nextNull();
@@ -169,6 +198,42 @@
     };
   }
 
+  /**
+   * Converts {@code value} to a JSON document. Unlike Gson's similar {@link
+   * Gson#toJson(Object) toJson} method, this write is strict. Create a {@link
+   * JsonWriter#setLenient(boolean) lenient} {@code JsonWriter} and call
+   * {@link #write(com.google.stripped.gson.stream.JsonWriter, Object)} for lenient
+   * writing.
+   *
+   * @param value the Java object to convert. May be null.
+   * @since 2.2
+   */
+  public final String toJson(T value) {
+    StringWriter stringWriter = new StringWriter();
+    try {
+      toJson(stringWriter, value);
+    } catch (IOException e) {
+      throw new AssertionError(e); // No I/O writing to a StringWriter.
+    }
+    return stringWriter.toString();
+  }
+
+  /**
+   * Converts {@code value} to a JSON tree.
+   *
+   * @param value the Java object to convert. May be null.
+   * @return the converted JSON tree. May be {@link JsonNull}.
+   * @since 2.2
+   */
+  public final JsonElement toJsonTree(T value) {
+    try {
+      JsonTreeWriter jsonWriter = new JsonTreeWriter();
+      write(jsonWriter, value);
+      return jsonWriter.get();
+    } catch (IOException e) {
+      throw new JsonIOException(e);
+    }
+  }
 
   /**
    * Reads one JSON value (an array, object, string, number, boolean or null)
diff --git a/gson/src/main/java/com/google/stripped/gson/internal/Excluder.java b/gson/src/main/java/com/google/stripped/gson/internal/Excluder.java
index 793fba8ad..7d0fc6a84 100644
--- a/gson/src/main/java/com/google/stripped/gson/internal/Excluder.java
+++ b/gson/src/main/java/com/google/stripped/gson/internal/Excluder.java
@@ -16,16 +16,13 @@
 
 package com.google.stripped.gson.internal;
 
-import com.google.stripped.gson.ExclusionStrategy;
-import com.google.stripped.gson.FieldAttributes;
-import com.google.stripped.gson.Gson;
-import com.google.stripped.gson.TypeAdapter;
-import com.google.stripped.gson.TypeAdapterFactory;
+import com.google.stripped.gson.*;
 import com.google.stripped.gson.annotations.Expose;
 import com.google.stripped.gson.annotations.Since;
 import com.google.stripped.gson.annotations.Until;
 import com.google.stripped.gson.reflect.TypeToken;
 import com.google.stripped.gson.stream.JsonReader;
+import com.google.stripped.gson.stream.JsonWriter;
 
 import java.io.IOException;
 import java.lang.reflect.Field;
@@ -129,6 +126,13 @@ public Excluder withExclusionStrategy(ExclusionStrategy exclusionStrategy,
         return delegate().read(in);
       }
 
+      @Override public void write(JsonWriter out, T value) throws IOException {
+        if (skipSerialize) {
+          out.nullValue();
+          return;
+        }
+        delegate().write(out, value);
+      }
 
       private TypeAdapter<T> delegate() {
         TypeAdapter<T> d = delegate;
diff --git a/gson/src/main/java/com/google/stripped/gson/internal/Streams.java b/gson/src/main/java/com/google/stripped/gson/internal/Streams.java
index a63209b89..3774b0d00 100644
--- a/gson/src/main/java/com/google/stripped/gson/internal/Streams.java
+++ b/gson/src/main/java/com/google/stripped/gson/internal/Streams.java
@@ -16,13 +16,10 @@
 
 package com.google.stripped.gson.internal;
 
-import com.google.stripped.gson.JsonElement;
-import com.google.stripped.gson.JsonIOException;
-import com.google.stripped.gson.JsonNull;
-import com.google.stripped.gson.JsonParseException;
-import com.google.stripped.gson.JsonSyntaxException;
+import com.google.stripped.gson.*;
 import com.google.stripped.gson.internal.bind.TypeAdapters;
 import com.google.stripped.gson.stream.JsonReader;
+import com.google.stripped.gson.stream.JsonWriter;
 import com.google.stripped.gson.stream.MalformedJsonException;
 
 import java.io.EOFException;
@@ -65,6 +62,13 @@ public static JsonElement parse(JsonReader reader) throws JsonParseException {
     }
   }
 
+  /**
+   * Writes the JSON element to the writer, recursively.
+   */
+  public static void write(JsonElement element, JsonWriter writer) throws IOException {
+    TypeAdapters.JSON_ELEMENT.write(writer, element);
+  }
+
   @SuppressWarnings("resource")
   public static Writer writerForAppendable(Appendable appendable) {
     return appendable instanceof Writer ? (Writer) appendable : new AppendableWriter(appendable);
diff --git a/gson/src/main/java/com/google/stripped/gson/internal/bind/ArrayTypeAdapter.java b/gson/src/main/java/com/google/stripped/gson/internal/bind/ArrayTypeAdapter.java
index 4e2e73994..ac0d94e3f 100644
--- a/gson/src/main/java/com/google/stripped/gson/internal/bind/ArrayTypeAdapter.java
+++ b/gson/src/main/java/com/google/stripped/gson/internal/bind/ArrayTypeAdapter.java
@@ -16,13 +16,6 @@
 
 package com.google.stripped.gson.internal.bind;
 
-import java.io.IOException;
-import java.lang.reflect.Array;
-import java.lang.reflect.GenericArrayType;
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.List;
-
 import com.google.stripped.gson.Gson;
 import com.google.stripped.gson.TypeAdapter;
 import com.google.stripped.gson.TypeAdapterFactory;
@@ -30,6 +23,14 @@
 import com.google.stripped.gson.reflect.TypeToken;
 import com.google.stripped.gson.stream.JsonReader;
 import com.google.stripped.gson.stream.JsonToken;
+import com.google.stripped.gson.stream.JsonWriter;
+
+import java.io.IOException;
+import java.lang.reflect.Array;
+import java.lang.reflect.GenericArrayType;
+import java.lang.reflect.Type;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Adapt an array of objects.
@@ -79,5 +80,18 @@ public ArrayTypeAdapter(Gson context, TypeAdapter<E> componentTypeAdapter, Class
     return array;
   }
 
+  @SuppressWarnings("unchecked")
+  @Override public void write(JsonWriter out, Object array) throws IOException {
+    if (array == null) {
+      out.nullValue();
+      return;
+    }
 
+    out.beginArray();
+    for (int i = 0, length = Array.getLength(array); i < length; i++) {
+      E value = (E) Array.get(array, i);
+      componentTypeAdapter.write(out, value);
+    }
+    out.endArray();
+  }
 }
diff --git a/gson/src/main/java/com/google/stripped/gson/internal/bind/CollectionTypeAdapterFactory.java b/gson/src/main/java/com/google/stripped/gson/internal/bind/CollectionTypeAdapterFactory.java
index 3415e048e..61ccead10 100644
--- a/gson/src/main/java/com/google/stripped/gson/internal/bind/CollectionTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/stripped/gson/internal/bind/CollectionTypeAdapterFactory.java
@@ -25,6 +25,7 @@
 import com.google.stripped.gson.reflect.TypeToken;
 import com.google.stripped.gson.stream.JsonReader;
 import com.google.stripped.gson.stream.JsonToken;
+import com.google.stripped.gson.stream.JsonWriter;
 
 import java.io.IOException;
 import java.lang.reflect.Type;
@@ -85,5 +86,18 @@ public Adapter(Gson context, Type elementType,
       in.endArray();
       return collection;
     }
+
+    @Override public void write(JsonWriter out, Collection<E> collection) throws IOException {
+      if (collection == null) {
+        out.nullValue();
+        return;
+      }
+
+      out.beginArray();
+      for (E element : collection) {
+        elementTypeAdapter.write(out, element);
+      }
+      out.endArray();
+    }
   }
 }
diff --git a/gson/src/main/java/com/google/stripped/gson/internal/bind/JsonTreeWriter.java b/gson/src/main/java/com/google/stripped/gson/internal/bind/JsonTreeWriter.java
new file mode 100644
index 000000000..9f553de26
--- /dev/null
+++ b/gson/src/main/java/com/google/stripped/gson/internal/bind/JsonTreeWriter.java
@@ -0,0 +1,197 @@
+/*
+ * Copyright (C) 2011 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.stripped.gson.internal.bind;
+
+import com.google.stripped.gson.*;
+import com.google.stripped.gson.stream.JsonWriter;
+
+import java.io.IOException;
+import java.io.Writer;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * This writer creates a JsonElement.
+ */
+public final class JsonTreeWriter extends JsonWriter {
+  private static final Writer UNWRITABLE_WRITER = new Writer() {
+    @Override public void write(char[] buffer, int offset, int counter) {
+      throw new AssertionError();
+    }
+    @Override public void flush() throws IOException {
+      throw new AssertionError();
+    }
+    @Override public void close() throws IOException {
+      throw new AssertionError();
+    }
+  };
+  /** Added to the top of the stack when this writer is closed to cause following ops to fail. */
+  private static final JsonPrimitive SENTINEL_CLOSED = new JsonPrimitive("closed");
+
+  /** The JsonElements and JsonArrays under modification, outermost to innermost. */
+  private final List<JsonElement> stack = new ArrayList<JsonElement>();
+
+  /** The name for the next JSON object value. If non-null, the top of the stack is a JsonObject. */
+  private String pendingName;
+
+  /** the JSON element constructed by this writer. */
+  private JsonElement product = JsonNull.INSTANCE; // TODO: is this really what we want?;
+
+  public JsonTreeWriter() {
+    super(UNWRITABLE_WRITER);
+  }
+
+  /**
+   * Returns the top level object produced by this writer.
+   */
+  public JsonElement get() {
+    if (!stack.isEmpty()) {
+      throw new IllegalStateException("Expected one JSON element but was " + stack);
+    }
+    return product;
+  }
+
+  private JsonElement peek() {
+    return stack.get(stack.size() - 1);
+  }
+
+  private void put(JsonElement value) {
+    if (pendingName != null) {
+      if (!value.isJsonNull() || getSerializeNulls()) {
+        JsonObject object = (JsonObject) peek();
+        object.add(pendingName, value);
+      }
+      pendingName = null;
+    } else if (stack.isEmpty()) {
+      product = value;
+    } else {
+      JsonElement element = peek();
+      if (element instanceof JsonArray) {
+        ((JsonArray) element).add(value);
+      } else {
+        throw new IllegalStateException();
+      }
+    }
+  }
+
+  @Override public JsonWriter beginArray() throws IOException {
+    JsonArray array = new JsonArray();
+    put(array);
+    stack.add(array);
+    return this;
+  }
+
+  @Override public JsonWriter endArray() throws IOException {
+    if (stack.isEmpty() || pendingName != null) {
+      throw new IllegalStateException();
+    }
+    JsonElement element = peek();
+    if (element instanceof JsonArray) {
+      stack.remove(stack.size() - 1);
+      return this;
+    }
+    throw new IllegalStateException();
+  }
+
+  @Override public JsonWriter beginObject() throws IOException {
+    JsonObject object = new JsonObject();
+    put(object);
+    stack.add(object);
+    return this;
+  }
+
+  @Override public JsonWriter endObject() throws IOException {
+    if (stack.isEmpty() || pendingName != null) {
+      throw new IllegalStateException();
+    }
+    JsonElement element = peek();
+    if (element instanceof JsonObject) {
+      stack.remove(stack.size() - 1);
+      return this;
+    }
+    throw new IllegalStateException();
+  }
+
+  @Override public JsonWriter name(String name) throws IOException {
+    if (stack.isEmpty() || pendingName != null) {
+      throw new IllegalStateException();
+    }
+    JsonElement element = peek();
+    if (element instanceof JsonObject) {
+      pendingName = name;
+      return this;
+    }
+    throw new IllegalStateException();
+  }
+
+  @Override public JsonWriter value(String value) throws IOException {
+    if (value == null) {
+      return nullValue();
+    }
+    put(new JsonPrimitive(value));
+    return this;
+  }
+
+  @Override public JsonWriter nullValue() throws IOException {
+    put(JsonNull.INSTANCE);
+    return this;
+  }
+
+  @Override public JsonWriter value(boolean value) throws IOException {
+    put(new JsonPrimitive(value));
+    return this;
+  }
+
+  @Override public JsonWriter value(double value) throws IOException {
+    if (!isLenient() && (Double.isNaN(value) || Double.isInfinite(value))) {
+      throw new IllegalArgumentException("JSON forbids NaN and infinities: " + value);
+    }
+    put(new JsonPrimitive(value));
+    return this;
+  }
+
+  @Override public JsonWriter value(long value) throws IOException {
+    put(new JsonPrimitive(value));
+    return this;
+  }
+
+  @Override public JsonWriter value(Number value) throws IOException {
+    if (value == null) {
+      return nullValue();
+    }
+
+    if (!isLenient()) {
+      double d = value.doubleValue();
+      if (Double.isNaN(d) || Double.isInfinite(d)) {
+        throw new IllegalArgumentException("JSON forbids NaN and infinities: " + value);
+      }
+    }
+
+    put(new JsonPrimitive(value));
+    return this;
+  }
+
+  @Override public void flush() throws IOException {
+  }
+
+  @Override public void close() throws IOException {
+    if (!stack.isEmpty()) {
+      throw new IOException("Incomplete document");
+    }
+    stack.add(SENTINEL_CLOSED);
+  }
+}
diff --git a/gson/src/main/java/com/google/stripped/gson/internal/bind/MapTypeAdapterFactory.java b/gson/src/main/java/com/google/stripped/gson/internal/bind/MapTypeAdapterFactory.java
deleted file mode 100644
index 51e5a7ecb..000000000
--- a/gson/src/main/java/com/google/stripped/gson/internal/bind/MapTypeAdapterFactory.java
+++ /dev/null
@@ -1,216 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.stripped.gson.internal.bind;
-
-import com.google.stripped.gson.Gson;
-import com.google.stripped.gson.JsonElement;
-import com.google.stripped.gson.JsonPrimitive;
-import com.google.stripped.gson.JsonSyntaxException;
-import com.google.stripped.gson.TypeAdapter;
-import com.google.stripped.gson.TypeAdapterFactory;
-import com.google.stripped.gson.internal.$Gson$Types;
-import com.google.stripped.gson.internal.ConstructorConstructor;
-import com.google.stripped.gson.internal.JsonReaderInternalAccess;
-import com.google.stripped.gson.internal.ObjectConstructor;
-import com.google.stripped.gson.reflect.TypeToken;
-import com.google.stripped.gson.stream.JsonReader;
-import com.google.stripped.gson.stream.JsonToken;
-
-import java.io.IOException;
-import java.lang.reflect.Type;
-import java.util.Map;
-
-/**
- * Adapts maps to either JSON objects or JSON arrays.
- *
- * <h3>Maps as JSON objects</h3>
- * For primitive keys or when complex map key serialization is not enabled, this
- * converts Java {@link Map Maps} to JSON Objects. This requires that map keys
- * can be serialized as strings; this is insufficient for some key types. For
- * example, consider a map whose keys are points on a grid. The default JSON
- * form encodes reasonably: <pre>   {@code
- *   Map<Point, String> original = new LinkedHashMap<Point, String>();
- *   original.put(new Point(5, 6), "a");
- *   original.put(new Point(8, 8), "b");
- *   System.out.println(gson.toJson(original, type));
- * }</pre>
- * The above code prints this JSON object:<pre>   {@code
- *   {
- *     "(5,6)": "a",
- *     "(8,8)": "b"
- *   }
- * }</pre>
- * But GSON is unable to deserialize this value because the JSON string name is
- * just the {@link Object#toString() toString()} of the map key. Attempting to
- * convert the above JSON to an object fails with a parse exception:
- * <pre>JsonParseException: Expecting object found: "(5,6)"
- *   at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler
- *   at com.google.gson.ObjectNavigator.navigateClassFields
- *   ...</pre>
- *
- * <h3>Maps as JSON arrays</h3>
- * An alternative approach taken by this type adapter when it is required and
- * complex map key serialization is enabled is to encode maps as arrays of map
- * entries. Each map entry is a two element array containing a key and a value.
- * This approach is more flexible because any type can be used as the map's key;
- * not just strings. But it's also less portable because the receiver of such
- * JSON must be aware of the map entry convention.
- *
- * <p>Register this adapter when you are creating your GSON instance.
- * <pre>   {@code
- *   Gson gson = new GsonBuilder()
- *     .registerTypeAdapter(Map.class, new MapAsArrayTypeAdapter())
- *     .create();
- * }</pre>
- * This will change the structure of the JSON emitted by the code above. Now we
- * get an array. In this case the arrays elements are map entries:
- * <pre>   {@code
- *   [
- *     [
- *       {
- *         "x": 5,
- *         "y": 6
- *       },
- *       "a",
- *     ],
- *     [
- *       {
- *         "x": 8,
- *         "y": 8
- *       },
- *       "b"
- *     ]
- *   ]
- * }</pre>
- * This format will serialize and deserialize just fine as long as this adapter
- * is registered.
- */
-public final class MapTypeAdapterFactory implements TypeAdapterFactory {
-  private final ConstructorConstructor constructorConstructor;
-  final boolean complexMapKeySerialization;
-
-  public MapTypeAdapterFactory(ConstructorConstructor constructorConstructor,
-      boolean complexMapKeySerialization) {
-    this.constructorConstructor = constructorConstructor;
-    this.complexMapKeySerialization = complexMapKeySerialization;
-  }
-
-  @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
-    Type type = typeToken.getType();
-
-    Class<? super T> rawType = typeToken.getRawType();
-    if (!Map.class.isAssignableFrom(rawType)) {
-      return null;
-    }
-
-    Class<?> rawTypeOfSrc = $Gson$Types.getRawType(type);
-    Type[] keyAndValueTypes = $Gson$Types.getMapKeyAndValueTypes(type, rawTypeOfSrc);
-    TypeAdapter<?> keyAdapter = getKeyAdapter(gson, keyAndValueTypes[0]);
-    TypeAdapter<?> valueAdapter = gson.getAdapter(TypeToken.get(keyAndValueTypes[1]));
-    ObjectConstructor<T> constructor = constructorConstructor.get(typeToken);
-
-    @SuppressWarnings({"unchecked", "rawtypes"})
-    // we don't define a type parameter for the key or value types
-    TypeAdapter<T> result = new Adapter(gson, keyAndValueTypes[0], keyAdapter,
-        keyAndValueTypes[1], valueAdapter, constructor);
-    return result;
-  }
-
-  /**
-   * Returns a type adapter that writes the value as a string.
-   */
-  private TypeAdapter<?> getKeyAdapter(Gson context, Type keyType) {
-    return (keyType == boolean.class || keyType == Boolean.class)
-        ? TypeAdapters.BOOLEAN_AS_STRING
-        : context.getAdapter(TypeToken.get(keyType));
-  }
-
-  private final class Adapter<K, V> extends TypeAdapter<Map<K, V>> {
-    private final TypeAdapter<K> keyTypeAdapter;
-    private final TypeAdapter<V> valueTypeAdapter;
-    private final ObjectConstructor<? extends Map<K, V>> constructor;
-
-    public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,
-        Type valueType, TypeAdapter<V> valueTypeAdapter,
-        ObjectConstructor<? extends Map<K, V>> constructor) {
-      this.keyTypeAdapter =
-        new TypeAdapterRuntimeTypeWrapper<K>(context, keyTypeAdapter, keyType);
-      this.valueTypeAdapter =
-        new TypeAdapterRuntimeTypeWrapper<V>(context, valueTypeAdapter, valueType);
-      this.constructor = constructor;
-    }
-
-    @Override public Map<K, V> read(JsonReader in) throws IOException {
-      JsonToken peek = in.peek();
-      if (peek == JsonToken.NULL) {
-        in.nextNull();
-        return null;
-      }
-
-      Map<K, V> map = constructor.construct();
-
-      if (peek == JsonToken.BEGIN_ARRAY) {
-        in.beginArray();
-        while (in.hasNext()) {
-          in.beginArray(); // entry array
-          K key = keyTypeAdapter.read(in);
-          V value = valueTypeAdapter.read(in);
-          V replaced = map.put(key, value);
-          if (replaced != null) {
-            throw new JsonSyntaxException("duplicate key: " + key);
-          }
-          in.endArray();
-        }
-        in.endArray();
-      } else {
-        in.beginObject();
-        while (in.hasNext()) {
-          JsonReaderInternalAccess.INSTANCE.promoteNameToValue(in);
-          K key = keyTypeAdapter.read(in);
-          V value = valueTypeAdapter.read(in);
-          V replaced = map.put(key, value);
-          if (replaced != null) {
-            throw new JsonSyntaxException("duplicate key: " + key);
-          }
-        }
-        in.endObject();
-      }
-      return map;
-    }
-
-
-
-    private String keyToString(JsonElement keyElement) {
-      if (keyElement.isJsonPrimitive()) {
-        JsonPrimitive primitive = keyElement.getAsJsonPrimitive();
-        if (primitive.isNumber()) {
-          return String.valueOf(primitive.getAsNumber());
-        } else if (primitive.isBoolean()) {
-          return Boolean.toString(primitive.getAsBoolean());
-        } else if (primitive.isString()) {
-          return primitive.getAsString();
-        } else {
-          throw new AssertionError();
-        }
-      } else if (keyElement.isJsonNull()) {
-        return "null";
-      } else {
-        throw new AssertionError();
-      }
-    }
-  }
-}
diff --git a/gson/src/main/java/com/google/stripped/gson/internal/bind/ObjectTypeAdapter.java b/gson/src/main/java/com/google/stripped/gson/internal/bind/ObjectTypeAdapter.java
index c9e7baff6..c61d0c0a0 100644
--- a/gson/src/main/java/com/google/stripped/gson/internal/bind/ObjectTypeAdapter.java
+++ b/gson/src/main/java/com/google/stripped/gson/internal/bind/ObjectTypeAdapter.java
@@ -23,6 +23,7 @@
 import com.google.stripped.gson.reflect.TypeToken;
 import com.google.stripped.gson.stream.JsonReader;
 import com.google.stripped.gson.stream.JsonToken;
+import com.google.stripped.gson.stream.JsonWriter;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -89,5 +90,20 @@
     }
   }
 
+  @SuppressWarnings("unchecked")
+  @Override public void write(JsonWriter out, Object value) throws IOException {
+    if (value == null) {
+      out.nullValue();
+      return;
+    }
+
+    TypeAdapter<Object> typeAdapter = (TypeAdapter<Object>) gson.getAdapter(value.getClass());
+    if (typeAdapter instanceof ObjectTypeAdapter) {
+      out.beginObject();
+      out.endObject();
+      return;
+    }
 
+    typeAdapter.write(out, value);
+  }
 }
diff --git a/gson/src/main/java/com/google/stripped/gson/internal/bind/ReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/google/stripped/gson/internal/bind/ReflectiveTypeAdapterFactory.java
index 5398c2a0f..85de41817 100644
--- a/gson/src/main/java/com/google/stripped/gson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/stripped/gson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -16,21 +16,14 @@
 
 package com.google.stripped.gson.internal.bind;
 
-import com.google.stripped.gson.FieldNamingStrategy;
-import com.google.stripped.gson.Gson;
-import com.google.stripped.gson.JsonSyntaxException;
-import com.google.stripped.gson.TypeAdapter;
-import com.google.stripped.gson.TypeAdapterFactory;
+import com.google.stripped.gson.*;
 import com.google.stripped.gson.annotations.JsonAdapter;
 import com.google.stripped.gson.annotations.SerializedName;
-import com.google.stripped.gson.internal.$Gson$Types;
-import com.google.stripped.gson.internal.ConstructorConstructor;
-import com.google.stripped.gson.internal.Excluder;
-import com.google.stripped.gson.internal.ObjectConstructor;
-import com.google.stripped.gson.internal.Primitives;
+import com.google.stripped.gson.internal.*;
 import com.google.stripped.gson.reflect.TypeToken;
 import com.google.stripped.gson.stream.JsonReader;
 import com.google.stripped.gson.stream.JsonToken;
+import com.google.stripped.gson.stream.JsonWriter;
 
 import java.io.IOException;
 import java.lang.reflect.Field;
@@ -104,7 +97,13 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       final TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
-
+      @Override void write(JsonWriter writer, Object value)
+          throws IOException, IllegalAccessException {
+        Object fieldValue = field.get(value);
+        TypeAdapter t =
+          new TypeAdapterRuntimeTypeWrapper(context, this.typeAdapter, fieldType.getType());
+        t.write(writer, fieldValue);
+      }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
@@ -178,7 +177,7 @@ protected BoundField(String name, boolean serialized, boolean deserialized) {
       this.deserialized = deserialized;
     }
     abstract boolean writeField(Object value) throws IOException, IllegalAccessException;
-
+    abstract void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException;
     abstract void read(JsonReader reader, Object value) throws IOException, IllegalAccessException;
   }
 
@@ -219,5 +218,24 @@ protected BoundField(String name, boolean serialized, boolean deserialized) {
       return instance;
     }
 
+    @Override public void write(JsonWriter out, T value) throws IOException {
+      if (value == null) {
+        out.nullValue();
+        return;
+      }
+
+      out.beginObject();
+      try {
+        for (BoundField boundField : boundFields.values()) {
+          if (boundField.writeField(value)) {
+            out.name(boundField.name);
+            boundField.write(out, value);
+          }
+        }
+      } catch (IllegalAccessException e) {
+        throw new AssertionError(e);
+      }
+      out.endObject();
+    }
   }
 }
diff --git a/gson/src/main/java/com/google/stripped/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java b/gson/src/main/java/com/google/stripped/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
index 7b4ac68c6..a96ef372f 100644
--- a/gson/src/main/java/com/google/stripped/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
+++ b/gson/src/main/java/com/google/stripped/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
@@ -17,7 +17,9 @@
 
 import com.google.stripped.gson.Gson;
 import com.google.stripped.gson.TypeAdapter;
+import com.google.stripped.gson.reflect.TypeToken;
 import com.google.stripped.gson.stream.JsonReader;
+import com.google.stripped.gson.stream.JsonWriter;
 
 import java.io.IOException;
 import java.lang.reflect.Type;
@@ -40,6 +42,32 @@ public T read(JsonReader in) throws IOException {
   }
 
   @SuppressWarnings({"rawtypes", "unchecked"})
+  @Override
+  public void write(JsonWriter out, T value) throws IOException {
+    // Order of preference for choosing type adapters
+    // First preference: a type adapter registered for the runtime type
+    // Second preference: a type adapter registered for the declared type
+    // Third preference: reflective type adapter for the runtime type (if it is a sub class of the declared type)
+    // Fourth preference: reflective type adapter for the declared type
+
+    TypeAdapter chosen = delegate;
+    Type runtimeType = getRuntimeTypeIfMoreSpecific(type, value);
+    if (runtimeType != type) {
+      TypeAdapter runtimeTypeAdapter = context.getAdapter(TypeToken.get(runtimeType));
+      if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter)) {
+        // The user registered a type adapter for the runtime type, so we will use that
+        chosen = runtimeTypeAdapter;
+      } else if (!(delegate instanceof ReflectiveTypeAdapterFactory.Adapter)) {
+        // The user registered a type adapter for Base class, so we prefer it over the
+        // reflective type adapter for the runtime type
+        chosen = delegate;
+      } else {
+        // Use the type adapter for runtime type
+        chosen = runtimeTypeAdapter;
+      }
+    }
+    chosen.write(out, value);
+  }
 
   /**
    * Finds a compatible runtime type if it is more specific
diff --git a/gson/src/main/java/com/google/stripped/gson/internal/bind/TypeAdapters.java b/gson/src/main/java/com/google/stripped/gson/internal/bind/TypeAdapters.java
index 65e506cd3..7f98b57b2 100644
--- a/gson/src/main/java/com/google/stripped/gson/internal/bind/TypeAdapters.java
+++ b/gson/src/main/java/com/google/stripped/gson/internal/bind/TypeAdapters.java
@@ -16,25 +16,17 @@
 
 package com.google.stripped.gson.internal.bind;
 
-import java.io.IOException;
-import java.util.HashMap;
-
-import java.util.Map;
-
-import com.google.stripped.gson.Gson;
-import com.google.stripped.gson.JsonArray;
-import com.google.stripped.gson.JsonElement;
-import com.google.stripped.gson.JsonNull;
-import com.google.stripped.gson.JsonObject;
-import com.google.stripped.gson.JsonPrimitive;
-import com.google.stripped.gson.JsonSyntaxException;
-import com.google.stripped.gson.TypeAdapter;
-import com.google.stripped.gson.TypeAdapterFactory;
+import com.google.stripped.gson.*;
 import com.google.stripped.gson.annotations.SerializedName;
 import com.google.stripped.gson.internal.LazilyParsedNumber;
 import com.google.stripped.gson.reflect.TypeToken;
 import com.google.stripped.gson.stream.JsonReader;
 import com.google.stripped.gson.stream.JsonToken;
+import com.google.stripped.gson.stream.JsonWriter;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
 
 /**
  * Type adapters for basic types.
@@ -47,6 +39,15 @@ private TypeAdapters() {
   @SuppressWarnings("rawtypes")
   public static final TypeAdapter<Class> CLASS         = new TypeAdapter<Class>()
   {
+    @Override
+    public void write(JsonWriter out, Class value) throws IOException {
+      if (value == null) {
+        out.nullValue();
+      } else {
+        throw new UnsupportedOperationException("Attempted to serialize java.lang.Class: "
+                + value.getName() + ". Forgot to register a type adapter?");
+      }
+    }
 
     @Override
     public Class read(JsonReader in) throws IOException
@@ -81,6 +82,14 @@ public Boolean read(JsonReader in) throws IOException {
       return in.nextBoolean();
     }
 
+    @Override
+    public void write(JsonWriter out, Boolean value) throws IOException {
+      if (value == null) {
+        out.nullValue();
+        return;
+      }
+      out.value(value);
+    }
   };
 
   /**
@@ -96,7 +105,9 @@ public Boolean read(JsonReader in) throws IOException {
       return Boolean.valueOf(in.nextString());
     }
 
-
+    @Override public void write(JsonWriter out, Boolean value) throws IOException {
+      out.value(value == null ? "null" : value.toString());
+    }
   };
 
   public static final TypeAdapterFactory BOOLEAN_FACTORY
@@ -115,7 +126,10 @@ public Number read(JsonReader in) throws IOException {
         throw new JsonSyntaxException(e);
       }
     }
-
+    @Override
+    public void write(JsonWriter out, Number value) throws IOException {
+      out.value(value);
+    }
   };
   public static final TypeAdapterFactory INTEGER_FACTORY
       = newFactory(int.class, Integer.class, INTEGER);
@@ -135,7 +149,10 @@ public String read(JsonReader in) throws IOException {
       }
       return in.nextString();
     }
-
+    @Override
+    public void write(JsonWriter out, String value) throws IOException {
+      out.value(value);
+    }
   };
 
   public static final TypeAdapterFactory STRING_FACTORY = newFactory(String.class, STRING);
@@ -177,7 +194,38 @@ public String read(JsonReader in) throws IOException {
         throw new IllegalArgumentException();
       }
     }
+    @Override public void write(JsonWriter out, JsonElement value) throws IOException {
+      if (value == null || value.isJsonNull()) {
+        out.nullValue();
+      } else if (value.isJsonPrimitive()) {
+        JsonPrimitive primitive = value.getAsJsonPrimitive();
+        if (primitive.isNumber()) {
+          out.value(primitive.getAsNumber());
+        } else if (primitive.isBoolean()) {
+          out.value(primitive.getAsBoolean());
+        } else {
+          out.value(primitive.getAsString());
+        }
+
+      } else if (value.isJsonArray()) {
+        out.beginArray();
+        for (JsonElement e : value.getAsJsonArray()) {
+          write(out, e);
+        }
+        out.endArray();
+
+      } else if (value.isJsonObject()) {
+        out.beginObject();
+        for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet()) {
+          out.name(e.getKey());
+          write(out, e.getValue());
+        }
+        out.endObject();
 
+      } else {
+        throw new IllegalArgumentException("Couldn't write " + value.getClass());
+      }
+    }
   };
 
   public static final TypeAdapterFactory JSON_ELEMENT_FACTORY
@@ -214,7 +262,9 @@ public EnumTypeAdapter(Class<T> classOfT) {
       }
       return nameToConstant.get(in.nextString());
     }
-
+    @Override public void write(JsonWriter out, T value) throws IOException {
+      out.value(value == null ? null : constantToName.get(value));
+    }
   }
 
   public static final TypeAdapterFactory ENUM_FACTORY = new TypeAdapterFactory() {
@@ -298,6 +348,9 @@ public EnumTypeAdapter(Class<T> classOfT) {
           return null;
         }
         return (TypeAdapter<T2>) new TypeAdapter<T1>() {
+          @Override public void write(JsonWriter out, T1 value) throws IOException {
+            typeAdapter.write(out, value);
+          }
 
           @Override public T1 read(JsonReader in) throws IOException {
             T1 result = typeAdapter.read(in);
diff --git a/gson/src/main/java/com/google/stripped/gson/stream/JsonWriter.java b/gson/src/main/java/com/google/stripped/gson/stream/JsonWriter.java
new file mode 100644
index 000000000..d25df266b
--- /dev/null
+++ b/gson/src/main/java/com/google/stripped/gson/stream/JsonWriter.java
@@ -0,0 +1,670 @@
+/*
+ * Copyright (C) 2010 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.stripped.gson.stream;
+
+import java.io.Closeable;
+import java.io.Flushable;
+import java.io.IOException;
+import java.io.Writer;
+
+import static com.google.stripped.gson.stream.JsonScope.*;
+
+/**
+ * Writes a JSON (<a href="http://www.ietf.org/rfc/rfc7159.txt">RFC 7159</a>)
+ * encoded value to a stream, one token at a time. The stream includes both
+ * literal values (strings, numbers, booleans and nulls) as well as the begin
+ * and end delimiters of objects and arrays.
+ *
+ * <h3>Encoding JSON</h3>
+ * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON
+ * document must contain one top-level array or object. Call methods on the
+ * writer as you walk the structure's contents, nesting arrays and objects as
+ * necessary:
+ * <ul>
+ *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.
+ *       Write each of the array's elements with the appropriate {@link #value}
+ *       methods or by nesting other arrays and objects. Finally close the array
+ *       using {@link #endArray()}.
+ *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.
+ *       Write each of the object's properties by alternating calls to
+ *       {@link #name} with the property's value. Write property values with the
+ *       appropriate {@link #value} method or by nesting other objects or arrays.
+ *       Finally close the object using {@link #endObject()}.
+ * </ul>
+ *
+ * <h3>Example</h3>
+ * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code
+ * [
+ *   {
+ *     "id": 912345678901,
+ *     "text": "How do I stream JSON in Java?",
+ *     "geo": null,
+ *     "user": {
+ *       "name": "json_newb",
+ *       "followers_count": 41
+ *      }
+ *   },
+ *   {
+ *     "id": 912345678902,
+ *     "text": "@json_newb just use JsonWriter!",
+ *     "geo": [50.454722, -104.606667],
+ *     "user": {
+ *       "name": "jesse",
+ *       "followers_count": 2
+ *     }
+ *   }
+ * ]}</pre>
+ * This code encodes the above structure: <pre>   {@code
+ *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {
+ *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, "UTF-8"));
+ *     writer.setIndent("    ");
+ *     writeMessagesArray(writer, messages);
+ *     writer.close();
+ *   }
+ *
+ *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {
+ *     writer.beginArray();
+ *     for (Message message : messages) {
+ *       writeMessage(writer, message);
+ *     }
+ *     writer.endArray();
+ *   }
+ *
+ *   public void writeMessage(JsonWriter writer, Message message) throws IOException {
+ *     writer.beginObject();
+ *     writer.name("id").value(message.getId());
+ *     writer.name("text").value(message.getText());
+ *     if (message.getGeo() != null) {
+ *       writer.name("geo");
+ *       writeDoublesArray(writer, message.getGeo());
+ *     } else {
+ *       writer.name("geo").nullValue();
+ *     }
+ *     writer.name("user");
+ *     writeUser(writer, message.getUser());
+ *     writer.endObject();
+ *   }
+ *
+ *   public void writeUser(JsonWriter writer, User user) throws IOException {
+ *     writer.beginObject();
+ *     writer.name("name").value(user.getName());
+ *     writer.name("followers_count").value(user.getFollowersCount());
+ *     writer.endObject();
+ *   }
+ *
+ *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {
+ *     writer.beginArray();
+ *     for (Double value : doubles) {
+ *       writer.value(value);
+ *     }
+ *     writer.endArray();
+ *   }}</pre>
+ *
+ * <p>Each {@code JsonWriter} may be used to write a single JSON stream.
+ * Instances of this class are not thread safe. Calls that would result in a
+ * malformed JSON string will fail with an {@link IllegalStateException}.
+ *
+ * @author Jesse Wilson
+ * @since 1.6
+ */
+public class JsonWriter implements Closeable, Flushable {
+
+  /*
+   * From RFC 7159, "All Unicode characters may be placed within the
+   * quotation marks except for the characters that must be escaped:
+   * quotation mark, reverse solidus, and the control characters
+   * (U+0000 through U+001F)."
+   *
+   * We also escape '\u2028' and '\u2029', which JavaScript interprets as
+   * newline characters. This prevents eval() from failing with a syntax
+   * error. http://code.google.com/p/google-gson/issues/detail?id=341
+   */
+  private static final String[] REPLACEMENT_CHARS;
+  private static final String[] HTML_SAFE_REPLACEMENT_CHARS;
+  static {
+    REPLACEMENT_CHARS = new String[128];
+    for (int i = 0; i <= 0x1f; i++) {
+      REPLACEMENT_CHARS[i] = "\\u" + hexValue(4, i);
+    }
+    REPLACEMENT_CHARS['"'] = "\\\"";
+    REPLACEMENT_CHARS['\\'] = "\\\\";
+    REPLACEMENT_CHARS['\t'] = "\\t";
+    REPLACEMENT_CHARS['\b'] = "\\b";
+    REPLACEMENT_CHARS['\n'] = "\\n";
+    REPLACEMENT_CHARS['\r'] = "\\r";
+    REPLACEMENT_CHARS['\f'] = "\\f";
+    HTML_SAFE_REPLACEMENT_CHARS = REPLACEMENT_CHARS.clone();
+    HTML_SAFE_REPLACEMENT_CHARS['<'] = "\\u003c";
+    HTML_SAFE_REPLACEMENT_CHARS['>'] = "\\u003e";
+    HTML_SAFE_REPLACEMENT_CHARS['&'] = "\\u0026";
+    HTML_SAFE_REPLACEMENT_CHARS['='] = "\\u003d";
+    HTML_SAFE_REPLACEMENT_CHARS['\''] = "\\u0027";
+  }
+
+  private static String hexValue(int n, int value) {
+    String simpleHex = Integer.toHexString(value);
+    StringBuilder stringBuilder = new StringBuilder();
+    for (int i = simpleHex.length(); i < n; i++) {
+      stringBuilder.append("0");
+    }
+    return stringBuilder.append(simpleHex).toString();
+  }
+
+  /** The output data, containing at most one top-level array or object. */
+  private final Writer out;
+
+  private int[] stack = new int[32];
+  private int stackSize = 0;
+  {
+    push(EMPTY_DOCUMENT);
+  }
+
+  /**
+   * A string containing a full set of spaces for a single level of
+   * indentation, or null for no pretty printing.
+   */
+  private String indent;
+
+  /**
+   * The name/value separator; either ":" or ": ".
+   */
+  private String separator = ":";
+
+  private boolean lenient;
+
+  private boolean htmlSafe;
+
+  private String deferredName;
+
+  private boolean serializeNulls = true;
+
+  /**
+   * Creates a new instance that writes a JSON-encoded stream to {@code out}.
+   * For best performance, ensure {@link Writer} is buffered; wrapping in
+   * {@link java.io.BufferedWriter BufferedWriter} if necessary.
+   */
+  public JsonWriter(Writer out) {
+    if (out == null) {
+      throw new NullPointerException("out == null");
+    }
+    this.out = out;
+  }
+
+  /**
+   * Sets the indentation string to be repeated for each level of indentation
+   * in the encoded document. If {@code indent.isEmpty()} the encoded document
+   * will be compact. Otherwise the encoded document will be more
+   * human-readable.
+   *
+   * @param indent a string containing only whitespace.
+   */
+  public final void setIndent(String indent) {
+    if (indent.length() == 0) {
+      this.indent = null;
+      this.separator = ":";
+    } else {
+      this.indent = indent;
+      this.separator = ": ";
+    }
+  }
+
+  /**
+   * Configure this writer to relax its syntax rules. By default, this writer
+   * only emits well-formed JSON as specified by <a
+   * href="http://www.ietf.org/rfc/rfc7159.txt">RFC 7159</a>. Setting the writer
+   * to lenient permits the following:
+   * <ul>
+   *   <li>Top-level values of any type. With strict writing, the top-level
+   *       value must be an object or an array.
+   *   <li>Numbers may be {@link Double#isNaN() NaNs} or {@link
+   *       Double#isInfinite() infinities}.
+   * </ul>
+   */
+  public final void setLenient(boolean lenient) {
+    this.lenient = lenient;
+  }
+
+  /**
+   * Returns true if this writer has relaxed syntax rules.
+   */
+  public boolean isLenient() {
+    return lenient;
+  }
+
+  /**
+   * Configure this writer to emit JSON that's safe for direct inclusion in HTML
+   * and XML documents. This escapes the HTML characters {@code <}, {@code >},
+   * {@code &} and {@code =} before writing them to the stream. Without this
+   * setting, your XML/HTML encoder should replace these characters with the
+   * corresponding escape sequences.
+   */
+  public final void setHtmlSafe(boolean htmlSafe) {
+    this.htmlSafe = htmlSafe;
+  }
+
+  /**
+   * Returns true if this writer writes JSON that's safe for inclusion in HTML
+   * and XML documents.
+   */
+  public final boolean isHtmlSafe() {
+    return htmlSafe;
+  }
+
+  /**
+   * Sets whether object members are serialized when their value is null.
+   * This has no impact on array elements. The default is true.
+   */
+  public final void setSerializeNulls(boolean serializeNulls) {
+    this.serializeNulls = serializeNulls;
+  }
+
+  /**
+   * Returns true if object members are serialized when their value is null.
+   * This has no impact on array elements. The default is true.
+   */
+  public final boolean getSerializeNulls() {
+    return serializeNulls;
+  }
+
+  /**
+   * Begins encoding a new array. Each call to this method must be paired with
+   * a call to {@link #endArray}.
+   *
+   * @return this writer.
+   */
+  public JsonWriter beginArray() throws IOException {
+    writeDeferredName();
+    return open(EMPTY_ARRAY, "[");
+  }
+
+  /**
+   * Ends encoding the current array.
+   *
+   * @return this writer.
+   */
+  public JsonWriter endArray() throws IOException {
+    return close(EMPTY_ARRAY, NONEMPTY_ARRAY, "]");
+  }
+
+  /**
+   * Begins encoding a new object. Each call to this method must be paired
+   * with a call to {@link #endObject}.
+   *
+   * @return this writer.
+   */
+  public JsonWriter beginObject() throws IOException {
+    writeDeferredName();
+    return open(EMPTY_OBJECT, "{");
+  }
+
+  /**
+   * Ends encoding the current object.
+   *
+   * @return this writer.
+   */
+  public JsonWriter endObject() throws IOException {
+    return close(EMPTY_OBJECT, NONEMPTY_OBJECT, "}");
+  }
+
+  /**
+   * Enters a new scope by appending any necessary whitespace and the given
+   * bracket.
+   */
+  private JsonWriter open(int empty, String openBracket) throws IOException {
+    beforeValue();
+    push(empty);
+    out.write(openBracket);
+    return this;
+  }
+
+  /**
+   * Closes the current scope by appending any necessary whitespace and the
+   * given bracket.
+   */
+  private JsonWriter close(int empty, int nonempty, String closeBracket)
+      throws IOException {
+    int context = peek();
+    if (context != nonempty && context != empty) {
+      throw new IllegalStateException("Nesting problem.");
+    }
+    if (deferredName != null) {
+      throw new IllegalStateException("Dangling name: " + deferredName);
+    }
+
+    stackSize--;
+    if (context == nonempty) {
+      newline();
+    }
+    out.write(closeBracket);
+    return this;
+  }
+
+  private void push(int newTop) {
+    if (stackSize == stack.length) {
+      int[] newStack = new int[stackSize * 2];
+      System.arraycopy(stack, 0, newStack, 0, stackSize);
+      stack = newStack;
+    }
+    stack[stackSize++] = newTop;
+  }
+
+  /**
+   * Returns the value on the top of the stack.
+   */
+  private int peek() {
+    if (stackSize == 0) {
+      throw new IllegalStateException("JsonWriter is closed.");
+    }
+    return stack[stackSize - 1];
+  }
+
+  /**
+   * Replace the value on the top of the stack with the given value.
+   */
+  private void replaceTop(int topOfStack) {
+    stack[stackSize - 1] = topOfStack;
+  }
+
+  /**
+   * Encodes the property name.
+   *
+   * @param name the name of the forthcoming value. May not be null.
+   * @return this writer.
+   */
+  public JsonWriter name(String name) throws IOException {
+    if (name == null) {
+      throw new NullPointerException("name == null");
+    }
+    if (deferredName != null) {
+      throw new IllegalStateException();
+    }
+    if (stackSize == 0) {
+      throw new IllegalStateException("JsonWriter is closed.");
+    }
+    deferredName = name;
+    return this;
+  }
+
+  private void writeDeferredName() throws IOException {
+    if (deferredName != null) {
+      beforeName();
+      string(deferredName);
+      deferredName = null;
+    }
+  }
+
+  /**
+   * Encodes {@code value}.
+   *
+   * @param value the literal string value, or null to encode a null literal.
+   * @return this writer.
+   */
+  public JsonWriter value(String value) throws IOException {
+    if (value == null) {
+      return nullValue();
+    }
+    writeDeferredName();
+    beforeValue();
+    string(value);
+    return this;
+  }
+
+  /**
+   * Writes {@code value} directly to the writer without quoting or
+   * escaping.
+   *
+   * @param value the literal string value, or null to encode a null literal.
+   * @return this writer.
+   */
+  public JsonWriter jsonValue(String value) throws IOException {
+    if (value == null) {
+      return nullValue();
+    }
+    writeDeferredName();
+    beforeValue();
+    if (value != null) {
+      out.write(value.toString());
+    } else {
+      out.write("null");
+    }
+    return this;
+  }
+
+  /**
+   * Encodes {@code null}.
+   *
+   * @return this writer.
+   */
+  public JsonWriter nullValue() throws IOException {
+    if (deferredName != null) {
+      if (serializeNulls) {
+        writeDeferredName();
+      } else {
+        deferredName = null;
+        return this; // skip the name and the value
+      }
+    }
+    beforeValue();
+    out.write("null");
+    return this;
+  }
+
+  /**
+   * Encodes {@code value}.
+   *
+   * @return this writer.
+   */
+  public JsonWriter value(boolean value) throws IOException {
+    writeDeferredName();
+    beforeValue();
+    out.write(value ? "true" : "false");
+    return this;
+  }
+
+  /**
+   * Encodes {@code value}.
+   *
+   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or
+   *     {@link Double#isInfinite() infinities}.
+   * @return this writer.
+   */
+  public JsonWriter value(double value) throws IOException {
+    if (Double.isNaN(value) || Double.isInfinite(value)) {
+      throw new IllegalArgumentException("Numeric values must be finite, but was " + value);
+    }
+    writeDeferredName();
+    beforeValue();
+    CharSequence sequence = Double.toString(value);
+    if (sequence != null) {
+      out.write(sequence.toString());
+    } else {
+      out.write("null");
+    }
+    return this;
+  }
+
+  /**
+   * Encodes {@code value}.
+   *
+   * @return this writer.
+   */
+  public JsonWriter value(long value) throws IOException {
+    writeDeferredName();
+    beforeValue();
+    out.write(Long.toString(value));
+    return this;
+  }
+
+  /**
+   * Encodes {@code value}.
+   *
+   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or
+   *     {@link Double#isInfinite() infinities}.
+   * @return this writer.
+   */
+  public JsonWriter value(Number value) throws IOException {
+    if (value == null) {
+      return nullValue();
+    }
+
+    writeDeferredName();
+    String string = value.toString();
+    if (!lenient
+        && (string.equals("-Infinity") || string.equals("Infinity") || string.equals("NaN"))) {
+      throw new IllegalArgumentException("Numeric values must be finite, but was " + value);
+    }
+    beforeValue();
+    if (string != null) {
+      out.write(string.toString());
+    } else {
+      out.write("null");
+    }
+    return this;
+  }
+
+  /**
+   * Ensures all buffered data is written to the underlying {@link Writer}
+   * and flushes that writer.
+   */
+  public void flush() throws IOException {
+    if (stackSize == 0) {
+      throw new IllegalStateException("JsonWriter is closed.");
+    }
+    out.flush();
+  }
+
+  /**
+   * Flushes and closes this writer and the underlying {@link Writer}.
+   *
+   * @throws IOException if the JSON document is incomplete.
+   */
+  public void close() throws IOException {
+    out.close();
+
+    int size = stackSize;
+    if (size > 1 || size == 1 && stack[size - 1] != NONEMPTY_DOCUMENT) {
+      throw new IOException("Incomplete document");
+    }
+    stackSize = 0;
+  }
+
+  private void string(String value) throws IOException {
+    String[] replacements = htmlSafe ? HTML_SAFE_REPLACEMENT_CHARS : REPLACEMENT_CHARS;
+    out.write("\"");
+    int last = 0;
+    int length = value.length();
+    for (int i = 0; i < length; i++) {
+      char c = value.charAt(i);
+      String replacement;
+      if (c < 128) {
+        replacement = replacements[c];
+        if (replacement == null) {
+          continue;
+        }
+      } else if (c == '\u2028') {
+        replacement = "\\u2028";
+      } else if (c == '\u2029') {
+        replacement = "\\u2029";
+      } else {
+        continue;
+      }
+      if (last < i) {
+        out.write(value, last, i - last);
+      }
+      out.write(replacement);
+      last = i + 1;
+    }
+    if (last < length) {
+      out.write(value, last, length - last);
+    }
+    out.write("\"");
+  }
+
+  private void newline() throws IOException {
+    if (indent == null) {
+      return;
+    }
+
+    out.write("\n");
+    for (int i = 1, size = stackSize; i < size; i++) {
+      out.write(indent);
+    }
+  }
+
+  /**
+   * Inserts any necessary separators and whitespace before a name. Also
+   * adjusts the stack to expect the name's value.
+   */
+  private void beforeName() throws IOException {
+    int context = peek();
+    if (context == NONEMPTY_OBJECT) { // first in object
+      out.write(',');
+    } else if (context != EMPTY_OBJECT) { // not in an object!
+      throw new IllegalStateException("Nesting problem.");
+    }
+    newline();
+    replaceTop(DANGLING_NAME);
+  }
+
+  /**
+   * Inserts any necessary separators and whitespace before a literal value,
+   * inline array, or inline object. Also adjusts the stack to expect either a
+   * closing bracket or another element.
+   */
+  @SuppressWarnings("fallthrough")
+  private void beforeValue() throws IOException {
+    switch (peek()) {
+    case NONEMPTY_DOCUMENT:
+      if (!lenient) {
+        throw new IllegalStateException(
+            "JSON must have only one top-level value.");
+      }
+      // fall-through
+    case EMPTY_DOCUMENT: // first in document
+      replaceTop(NONEMPTY_DOCUMENT);
+      break;
+
+    case EMPTY_ARRAY: // first in array
+      replaceTop(NONEMPTY_ARRAY);
+      newline();
+      break;
+
+    case NONEMPTY_ARRAY: // another in array
+      if ("," != null) {
+        out.write(",".toString());
+      } else {
+        out.write("null");
+      }
+      newline();
+      break;
+
+    case DANGLING_NAME: // value for name
+      CharSequence sequence = separator.toString();
+      if (sequence != null) {
+        out.write(sequence.toString());
+      } else {
+        out.write("null");
+      }
+
+      replaceTop(NONEMPTY_OBJECT);
+      break;
+
+    default:
+      throw new IllegalStateException("Nesting problem.");
+    }
+  }
+}
diff --git a/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java b/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
deleted file mode 100644
index 5ce65d748..000000000
--- a/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
+++ /dev/null
@@ -1,172 +0,0 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import java.text.DateFormat;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Locale;
-import java.util.TimeZone;
-import junit.framework.TestCase;
-
-/**
- * A simple unit test for the {@link DefaultDateTypeAdapter} class.
- *
- * @author Joel Leitch
- */
-public class DefaultDateTypeAdapterTest extends TestCase {
-
-  public void testFormattingInEnUs() {
-    assertFormattingAlwaysEmitsUsLocale(Locale.US);
-  }
-
-  public void testFormattingInFr() {
-    assertFormattingAlwaysEmitsUsLocale(Locale.FRANCE);
-  }
-
-  private void assertFormattingAlwaysEmitsUsLocale(Locale locale) {
-    TimeZone defaultTimeZone = TimeZone.getDefault();
-    TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
-    Locale defaultLocale = Locale.getDefault();
-    Locale.setDefault(locale);
-    try {
-      assertFormatted("Jan 1, 1970 12:00:00 AM", new DefaultDateTypeAdapter());
-      assertFormatted("1/1/70", new DefaultDateTypeAdapter(DateFormat.SHORT));
-      assertFormatted("Jan 1, 1970", new DefaultDateTypeAdapter(DateFormat.MEDIUM));
-      assertFormatted("January 1, 1970", new DefaultDateTypeAdapter(DateFormat.LONG));
-      assertFormatted("1/1/70 12:00 AM",
-          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
-      assertFormatted("Jan 1, 1970 12:00:00 AM",
-          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
-      assertFormatted("January 1, 1970 12:00:00 AM UTC",
-          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
-      assertFormatted("Thursday, January 1, 1970 12:00:00 AM UTC",
-          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
-    } finally {
-      TimeZone.setDefault(defaultTimeZone);
-      Locale.setDefault(defaultLocale);
-    }
-  }
-
-  public void testParsingDatesFormattedWithSystemLocale() {
-    TimeZone defaultTimeZone = TimeZone.getDefault();
-    TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
-    Locale defaultLocale = Locale.getDefault();
-    Locale.setDefault(Locale.FRANCE);
-    try {
-      assertParsed("1 janv. 1970 00:00:00", new DefaultDateTypeAdapter());
-      assertParsed("01/01/70", new DefaultDateTypeAdapter(DateFormat.SHORT));
-      assertParsed("1 janv. 1970", new DefaultDateTypeAdapter(DateFormat.MEDIUM));
-      assertParsed("1 janvier 1970", new DefaultDateTypeAdapter(DateFormat.LONG));
-      assertParsed("01/01/70 00:00",
-          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
-      assertParsed("1 janv. 1970 00:00:00",
-          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
-      assertParsed("1 janvier 1970 00:00:00 UTC",
-          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
-      assertParsed("jeudi 1 janvier 1970 00 h 00 UTC",
-          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
-    } finally {
-      TimeZone.setDefault(defaultTimeZone);
-      Locale.setDefault(defaultLocale);
-    }
-  }
-
-  public void testParsingDatesFormattedWithUsLocale() {
-    TimeZone defaultTimeZone = TimeZone.getDefault();
-    TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
-    Locale defaultLocale = Locale.getDefault();
-    Locale.setDefault(Locale.US);
-    try {
-      assertParsed("Jan 1, 1970 0:00:00 AM", new DefaultDateTypeAdapter());
-      assertParsed("1/1/70", new DefaultDateTypeAdapter(DateFormat.SHORT));
-      assertParsed("Jan 1, 1970", new DefaultDateTypeAdapter(DateFormat.MEDIUM));
-      assertParsed("January 1, 1970", new DefaultDateTypeAdapter(DateFormat.LONG));
-      assertParsed("1/1/70 0:00 AM",
-          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
-      assertParsed("Jan 1, 1970 0:00:00 AM",
-          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
-      assertParsed("January 1, 1970 0:00:00 AM UTC",
-          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
-      assertParsed("Thursday, January 1, 1970 0:00:00 AM UTC",
-          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
-    } finally {
-      TimeZone.setDefault(defaultTimeZone);
-      Locale.setDefault(defaultLocale);
-    }
-  }
-
-  public void testFormatUsesDefaultTimezone() {
-    TimeZone defaultTimeZone = TimeZone.getDefault();
-    TimeZone.setDefault(TimeZone.getTimeZone("America/Los_Angeles"));
-    Locale defaultLocale = Locale.getDefault();
-    Locale.setDefault(Locale.US);
-    try {
-      assertFormatted("Dec 31, 1969 4:00:00 PM", new DefaultDateTypeAdapter());
-      assertParsed("Dec 31, 1969 4:00:00 PM", new DefaultDateTypeAdapter());
-    } finally {
-      TimeZone.setDefault(defaultTimeZone);
-      Locale.setDefault(defaultLocale);
-    }
-  }
-
-  public void testDateDeserializationISO8601() throws Exception {
-  	DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter();
-    assertParsed("1970-01-01T00:00:00.000Z", adapter);
-    assertParsed("1970-01-01T00:00Z", adapter);
-    assertParsed("1970-01-01T00:00:00+00:00", adapter);
-    assertParsed("1970-01-01T01:00:00+01:00", adapter);
-    assertParsed("1970-01-01T01:00:00+01", adapter);
-  }
-  
-  public void testDateSerialization() throws Exception {
-    int dateStyle = DateFormat.LONG;
-    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle);
-    DateFormat formatter = DateFormat.getDateInstance(dateStyle, Locale.US);
-    Date currentDate = new Date();
-
-    String dateString = dateTypeAdapter.serialize(currentDate, Date.class, null).getAsString();
-    assertEquals(formatter.format(currentDate), dateString);
-  }
-
-  public void testDatePattern() throws Exception {
-    String pattern = "yyyy-MM-dd";
-    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(pattern);
-    DateFormat formatter = new SimpleDateFormat(pattern);
-    Date currentDate = new Date();
-
-    String dateString = dateTypeAdapter.serialize(currentDate, Date.class, null).getAsString();
-    assertEquals(formatter.format(currentDate), dateString);
-  }
-
-  public void testInvalidDatePattern() throws Exception {
-    try {
-      new DefaultDateTypeAdapter("I am a bad Date pattern....");
-      fail("Invalid date pattern should fail.");
-    } catch (IllegalArgumentException expected) { }
-  }
-
-  private void assertFormatted(String formatted, DefaultDateTypeAdapter adapter) {
-    assertEquals(formatted, adapter.serialize(new Date(0), Date.class, null).getAsString());
-  }
-
-  private void assertParsed(String date, DefaultDateTypeAdapter  adapter) {
-    assertEquals(date, new Date(0), adapter.deserialize(new JsonPrimitive(date), Date.class, null));
-    assertEquals("ISO 8601", new Date(0), adapter.deserialize(
-        new JsonPrimitive("1970-01-01T00:00:00Z"), Date.class, null));
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/CommentsTest.java b/gson/src/test/java/com/google/stripped/gson/CommentsTest.java
similarity index 53%
rename from gson/src/test/java/com/google/gson/CommentsTest.java
rename to gson/src/test/java/com/google/stripped/gson/CommentsTest.java
index 306e5aff3..237f363ab 100644
--- a/gson/src/test/java/com/google/gson/CommentsTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/CommentsTest.java
@@ -14,32 +14,35 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.reflect.TypeToken;
+import junit.framework.TestCase;
 
-import com.google.gson.reflect.TypeToken;
 import java.util.Arrays;
 import java.util.List;
-import junit.framework.TestCase;
 
 /**
  * @author Jesse Wilson
  */
 public final class CommentsTest extends TestCase {
 
-  /**
-   * Test for issue 212.
-   */
-  public void testParseComments() {
-    String json = "[\n"
-        + "  // this is a comment\n"
-        + "  \"a\",\n"
-        + "  /* this is another comment */\n"
-        + "  \"b\",\n"
-        + "  # this is yet another comment\n"
-        + "  \"c\"\n"
-        + "]";
+    /**
+     * Test for issue 212.
+     */
+    public void testParseComments() {
+        String json = "[\n"
+                + "  // this is a comment\n"
+                + "  \"a\",\n"
+                + "  /* this is another comment */\n"
+                + "  \"b\",\n"
+                + "  # this is yet another comment\n"
+                + "  \"c\"\n"
+                + "]";
 
-    List<String> abc = new Gson().fromJson(json, new TypeToken<List<String>>() {}.getType());
-    assertEquals(Arrays.asList("a", "b", "c"), abc);
-  }
+        List<String> abc = new Gson().fromJson(json, new TypeToken<List<String>>() {
+        }.getType());
+        assertEquals(Arrays.asList("a", "b", "c"), abc);
+    }
 }
diff --git a/gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java b/gson/src/test/java/com/google/stripped/gson/DefaultInetAddressTypeAdapterTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java
rename to gson/src/test/java/com/google/stripped/gson/DefaultInetAddressTypeAdapterTest.java
index 6b853f5de..10f6d3684 100644
--- a/gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/DefaultInetAddressTypeAdapterTest.java
@@ -14,10 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
 import java.net.InetAddress;
 
+import com.google.stripped.gson.Gson;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java b/gson/src/test/java/com/google/stripped/gson/DefaultMapJsonSerializerTest.java
similarity index 91%
rename from gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java
rename to gson/src/test/java/com/google/stripped/gson/DefaultMapJsonSerializerTest.java
index 5c0619535..67a7ad5f9 100644
--- a/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/DefaultMapJsonSerializerTest.java
@@ -14,12 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
-import com.google.gson.reflect.TypeToken;
 import java.lang.reflect.Type;
 import java.util.HashMap;
 import java.util.Map;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.JsonElement;
+import com.google.stripped.gson.JsonObject;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java b/gson/src/test/java/com/google/stripped/gson/ExposeAnnotationExclusionStrategyTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java
rename to gson/src/test/java/com/google/stripped/gson/ExposeAnnotationExclusionStrategyTest.java
index dd8a7a926..d3cc9bb7d 100644
--- a/gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/ExposeAnnotationExclusionStrategyTest.java
@@ -14,11 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
-import com.google.gson.annotations.Expose;
-
-import com.google.gson.internal.Excluder;
+import com.google.stripped.gson.annotations.Expose;
+import com.google.stripped.gson.internal.Excluder;
 import junit.framework.TestCase;
 
 import java.lang.reflect.Field;
diff --git a/gson/src/test/java/com/google/gson/FieldAttributesTest.java b/gson/src/test/java/com/google/stripped/gson/FieldAttributesTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/FieldAttributesTest.java
rename to gson/src/test/java/com/google/stripped/gson/FieldAttributesTest.java
index 8a9d95338..61b99f1a9 100644
--- a/gson/src/test/java/com/google/gson/FieldAttributesTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/FieldAttributesTest.java
@@ -14,10 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
-import com.google.gson.reflect.TypeToken;
 
+import com.google.stripped.gson.FieldAttributes;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 import java.lang.reflect.Modifier;
diff --git a/gson/src/test/java/com/google/gson/GenericArrayTypeTest.java b/gson/src/test/java/com/google/stripped/gson/GenericArrayTypeTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/GenericArrayTypeTest.java
rename to gson/src/test/java/com/google/stripped/gson/GenericArrayTypeTest.java
index 42acb8a2d..9416ba805 100644
--- a/gson/src/test/java/com/google/gson/GenericArrayTypeTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/GenericArrayTypeTest.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
 
+import com.google.stripped.gson.internal.$Gson$Types;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 import java.lang.reflect.GenericArrayType;
diff --git a/gson/src/test/java/com/google/gson/GsonBuilderTest.java b/gson/src/test/java/com/google/stripped/gson/GsonBuilderTest.java
similarity index 91%
rename from gson/src/test/java/com/google/gson/GsonBuilderTest.java
rename to gson/src/test/java/com/google/stripped/gson/GsonBuilderTest.java
index 73601c0e3..2774b28cc 100755
--- a/gson/src/test/java/com/google/gson/GsonBuilderTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/GsonBuilderTest.java
@@ -14,15 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson;
-
-import java.lang.reflect.Modifier;
-import java.lang.reflect.Type;
+package com.google.stripped.gson;
 
+import com.google.stripped.gson.stream.JsonReader;
+import com.google.stripped.gson.stream.JsonWriter;
 import junit.framework.TestCase;
 
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+import java.lang.reflect.Modifier;
+import java.lang.reflect.Type;
 
 /**
  * Unit tests for {@link GsonBuilder}.
diff --git a/gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java b/gson/src/test/java/com/google/stripped/gson/GsonTypeAdapterTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java
rename to gson/src/test/java/com/google/stripped/gson/GsonTypeAdapterTest.java
index decb93d83..b5386b898 100644
--- a/gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/GsonTypeAdapterTest.java
@@ -14,12 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
 import java.lang.reflect.Type;
 import java.math.BigInteger;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
+
+import com.google.stripped.gson.*;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java b/gson/src/test/java/com/google/stripped/gson/InnerClassExclusionStrategyTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java
rename to gson/src/test/java/com/google/stripped/gson/InnerClassExclusionStrategyTest.java
index 86f7a6224..8b02576ab 100644
--- a/gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/InnerClassExclusionStrategyTest.java
@@ -14,10 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
-import com.google.gson.internal.Excluder;
 import java.lang.reflect.Field;
+
+import com.google.stripped.gson.internal.Excluder;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/JavaSerializationTest.java b/gson/src/test/java/com/google/stripped/gson/JavaSerializationTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/JavaSerializationTest.java
rename to gson/src/test/java/com/google/stripped/gson/JavaSerializationTest.java
index fbaea19d4..7d160d16a 100644
--- a/gson/src/test/java/com/google/gson/JavaSerializationTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/JavaSerializationTest.java
@@ -14,9 +14,8 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
-import com.google.gson.reflect.TypeToken;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -27,6 +26,9 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/JsonArrayTest.java b/gson/src/test/java/com/google/stripped/gson/JsonArrayTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/JsonArrayTest.java
rename to gson/src/test/java/com/google/stripped/gson/JsonArrayTest.java
index b77d6f1b4..cf447091d 100644
--- a/gson/src/test/java/com/google/gson/JsonArrayTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/JsonArrayTest.java
@@ -14,12 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
+import com.google.stripped.gson.common.MoreAsserts;
 import junit.framework.TestCase;
 
-import com.google.gson.common.MoreAsserts;
-
 /**
  * @author Jesse Wilson
  */
diff --git a/gson/src/test/java/com/google/gson/JsonNullTest.java b/gson/src/test/java/com/google/stripped/gson/JsonNullTest.java
similarity index 93%
rename from gson/src/test/java/com/google/gson/JsonNullTest.java
rename to gson/src/test/java/com/google/stripped/gson/JsonNullTest.java
index 6157e3876..c195f1613 100644
--- a/gson/src/test/java/com/google/gson/JsonNullTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/JsonNullTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
-import com.google.gson.common.MoreAsserts;
+import com.google.stripped.gson.common.MoreAsserts;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/JsonObjectTest.java b/gson/src/test/java/com/google/stripped/gson/JsonObjectTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/JsonObjectTest.java
rename to gson/src/test/java/com/google/stripped/gson/JsonObjectTest.java
index 9423a24d2..09af66399 100644
--- a/gson/src/test/java/com/google/gson/JsonObjectTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/JsonObjectTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
-import com.google.gson.common.MoreAsserts;
+import com.google.stripped.gson.common.MoreAsserts;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/JsonParserTest.java b/gson/src/test/java/com/google/stripped/gson/JsonParserTest.java
similarity index 85%
rename from gson/src/test/java/com/google/gson/JsonParserTest.java
rename to gson/src/test/java/com/google/stripped/gson/JsonParserTest.java
index 7efa7fd2e..e70c2e5fa 100644
--- a/gson/src/test/java/com/google/gson/JsonParserTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/JsonParserTest.java
@@ -14,17 +14,20 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
 import java.io.CharArrayReader;
 import java.io.CharArrayWriter;
 import java.io.StringReader;
 
+
+import com.google.stripped.gson.common.TestTypes;
+import com.google.stripped.gson.internal.Streams;
+import com.google.stripped.gson.stream.JsonReader;
 import junit.framework.TestCase;
 
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.internal.Streams;
-import com.google.gson.stream.JsonReader;
+
+
 
 /**
  * Unit test for {@link JsonParser}
@@ -91,7 +94,7 @@ public void testParseMixedArray() {
     JsonElement e = parser.parse(json);
     assertTrue(e.isJsonArray());
 
-    JsonArray  array = e.getAsJsonArray();
+    JsonArray array = e.getAsJsonArray();
     assertEquals("{}", array.get(0).toString());
     assertEquals(13, array.get(1).getAsInt());
     assertEquals("stringValue", array.get(2).getAsString());
@@ -108,9 +111,9 @@ public void testParseReader() {
   public void testReadWriteTwoObjects() throws Exception {
     Gson gson = new Gson();
     CharArrayWriter writer = new CharArrayWriter();
-    BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one");
+    TestTypes.BagOfPrimitives expectedOne = new TestTypes.BagOfPrimitives(1, 1, true, "one");
     writer.write(gson.toJson(expectedOne).toCharArray());
-    BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two");
+    TestTypes.BagOfPrimitives expectedTwo = new TestTypes.BagOfPrimitives(2, 2, false, "two");
     writer.write(gson.toJson(expectedTwo).toCharArray());
     CharArrayReader reader = new CharArrayReader(writer.toCharArray());
 
@@ -118,9 +121,9 @@ public void testReadWriteTwoObjects() throws Exception {
     parser.setLenient(true);
     JsonElement element1 = Streams.parse(parser);
     JsonElement element2 = Streams.parse(parser);
-    BagOfPrimitives actualOne = gson.fromJson(element1, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives actualOne = gson.fromJson(element1, TestTypes.BagOfPrimitives.class);
     assertEquals("one", actualOne.stringValue);
-    BagOfPrimitives actualTwo = gson.fromJson(element2, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives actualTwo = gson.fromJson(element2, TestTypes.BagOfPrimitives.class);
     assertEquals("two", actualTwo.stringValue);
   }
 }
diff --git a/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java b/gson/src/test/java/com/google/stripped/gson/JsonPrimitiveTest.java
similarity index 99%
rename from gson/src/test/java/com/google/gson/JsonPrimitiveTest.java
rename to gson/src/test/java/com/google/stripped/gson/JsonPrimitiveTest.java
index fa3611c93..23f6c08f0 100644
--- a/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/JsonPrimitiveTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
-import com.google.gson.common.MoreAsserts;
+import com.google.stripped.gson.common.MoreAsserts;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/JsonStreamParserTest.java b/gson/src/test/java/com/google/stripped/gson/JsonStreamParserTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/JsonStreamParserTest.java
rename to gson/src/test/java/com/google/stripped/gson/JsonStreamParserTest.java
index 1b40b58b6..6b8eef4bd 100644
--- a/gson/src/test/java/com/google/gson/JsonStreamParserTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/JsonStreamParserTest.java
@@ -13,8 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson;
+package com.google.stripped.gson;
 
+import com.google.stripped.gson.JsonStreamParser;
 import junit.framework.TestCase;
 
 import java.util.NoSuchElementException;
diff --git a/gson/src/test/java/com/google/gson/LongSerializationPolicyTest.java b/gson/src/test/java/com/google/stripped/gson/LongSerializationPolicyTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/LongSerializationPolicyTest.java
rename to gson/src/test/java/com/google/stripped/gson/LongSerializationPolicyTest.java
index d0a063208..881f1eb9d 100644
--- a/gson/src/test/java/com/google/gson/LongSerializationPolicyTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/LongSerializationPolicyTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/MixedStreamTest.java b/gson/src/test/java/com/google/stripped/gson/MixedStreamTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/MixedStreamTest.java
rename to gson/src/test/java/com/google/stripped/gson/MixedStreamTest.java
index 00eb4bc8a..2bd12652b 100644
--- a/gson/src/test/java/com/google/gson/MixedStreamTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/MixedStreamTest.java
@@ -14,17 +14,23 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
+
 
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.io.StringReader;
 import java.io.StringWriter;
 import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.List;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.JsonParseException;
+import com.google.stripped.gson.JsonPrimitive;
+import com.google.stripped.gson.reflect.TypeToken;
+import com.google.stripped.gson.stream.JsonReader;
+import com.google.stripped.gson.stream.JsonWriter;
 import junit.framework.TestCase;
 
 public final class MixedStreamTest extends TestCase {
diff --git a/gson/src/test/java/com/google/gson/MockExclusionStrategy.java b/gson/src/test/java/com/google/stripped/gson/MockExclusionStrategy.java
similarity index 89%
rename from gson/src/test/java/com/google/gson/MockExclusionStrategy.java
rename to gson/src/test/java/com/google/stripped/gson/MockExclusionStrategy.java
index 7830d8a2f..46a8b9f93 100644
--- a/gson/src/test/java/com/google/gson/MockExclusionStrategy.java
+++ b/gson/src/test/java/com/google/stripped/gson/MockExclusionStrategy.java
@@ -14,7 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
+
+import com.google.stripped.gson.ExclusionStrategy;
+import com.google.stripped.gson.FieldAttributes;
 
 /**
  * This is a configurable {@link ExclusionStrategy} that can be used for
diff --git a/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java b/gson/src/test/java/com/google/stripped/gson/ObjectTypeAdapterTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java
rename to gson/src/test/java/com/google/stripped/gson/ObjectTypeAdapterTest.java
index 2891bffca..fdea96d6d 100644
--- a/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/ObjectTypeAdapterTest.java
@@ -14,12 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.LinkedHashMap;
 import java.util.Map;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.TypeAdapter;
 import junit.framework.TestCase;
 
 public final class ObjectTypeAdapterTest extends TestCase {
diff --git a/gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java b/gson/src/test/java/com/google/stripped/gson/OverrideCoreTypeAdaptersTest.java
similarity index 91%
rename from gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java
rename to gson/src/test/java/com/google/stripped/gson/OverrideCoreTypeAdaptersTest.java
index 79ae1698f..418ba0581 100644
--- a/gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/OverrideCoreTypeAdaptersTest.java
@@ -14,12 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.util.Locale;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.TypeAdapter;
+import com.google.stripped.gson.stream.JsonReader;
+import com.google.stripped.gson.stream.JsonWriter;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java b/gson/src/test/java/com/google/stripped/gson/ParameterizedTypeFixtures.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java
rename to gson/src/test/java/com/google/stripped/gson/ParameterizedTypeFixtures.java
index 0959ee429..4d0973177 100644
--- a/gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java
+++ b/gson/src/test/java/com/google/stripped/gson/ParameterizedTypeFixtures.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
-import com.google.gson.internal.$Gson$Types;
+import com.google.stripped.gson.internal.$Gson$Types;
+import com.google.stripped.gson.internal.Primitives;
 
-import com.google.gson.internal.Primitives;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.ParameterizedType;
@@ -105,7 +105,7 @@ public boolean equals(Object obj) {
   }
 
   public static class MyParameterizedTypeInstanceCreator<T>
-      implements InstanceCreator<MyParameterizedType<T>>{
+      implements InstanceCreator<MyParameterizedType<T>> {
     private final T instanceOfT;
     /**
      * Caution the specified instance is reused by the instance creator for each call.
@@ -143,7 +143,7 @@ public MyParameterizedTypeInstanceCreator(T instanceOfT) {
     }
 
     @Override public JsonElement serialize(MyParameterizedType<T> src, Type classOfSrc,
-        JsonSerializationContext context) {
+                                           JsonSerializationContext context) {
       JsonObject json = new JsonObject();
       T value = src.getValue();
       json.add(value.getClass().getSimpleName(), context.serialize(value));
diff --git a/gson/src/test/java/com/google/gson/ParameterizedTypeTest.java b/gson/src/test/java/com/google/stripped/gson/ParameterizedTypeTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/ParameterizedTypeTest.java
rename to gson/src/test/java/com/google/stripped/gson/ParameterizedTypeTest.java
index 24d78e89d..2a70ceb26 100644
--- a/gson/src/test/java/com/google/gson/ParameterizedTypeTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/ParameterizedTypeTest.java
@@ -14,11 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
 
+
+import com.google.stripped.gson.internal.$Gson$Types;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 import java.lang.reflect.ParameterizedType;
diff --git a/gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java b/gson/src/test/java/com/google/stripped/gson/PrimitiveTypeAdapter.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java
rename to gson/src/test/java/com/google/stripped/gson/PrimitiveTypeAdapter.java
index fb38687b5..2a41c5efc 100644
--- a/gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java
+++ b/gson/src/test/java/com/google/stripped/gson/PrimitiveTypeAdapter.java
@@ -14,9 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
+
+import com.google.stripped.gson.JsonParseException;
+import com.google.stripped.gson.internal.Primitives;
 
-import com.google.gson.internal.Primitives;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
diff --git a/gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java b/gson/src/test/java/com/google/stripped/gson/VersionExclusionStrategyTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java
rename to gson/src/test/java/com/google/stripped/gson/VersionExclusionStrategyTest.java
index d878850ec..32b9e832e 100644
--- a/gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/VersionExclusionStrategyTest.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.google.stripped.gson;
 
-import com.google.gson.annotations.Since;
-import com.google.gson.internal.Excluder;
+import com.google.stripped.gson.annotations.Since;
+import com.google.stripped.gson.internal.Excluder;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/common/MoreAsserts.java b/gson/src/test/java/com/google/stripped/gson/common/MoreAsserts.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/common/MoreAsserts.java
rename to gson/src/test/java/com/google/stripped/gson/common/MoreAsserts.java
index 5e05832a5..b1939b07b 100644
--- a/gson/src/test/java/com/google/gson/common/MoreAsserts.java
+++ b/gson/src/test/java/com/google/stripped/gson/common/MoreAsserts.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.common;
+package com.google.stripped.gson.common;
 
 import junit.framework.Assert;
 
diff --git a/gson/src/test/java/com/google/gson/common/TestTypes.java b/gson/src/test/java/com/google/stripped/gson/common/TestTypes.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/common/TestTypes.java
rename to gson/src/test/java/com/google/stripped/gson/common/TestTypes.java
index 11d3d0abe..a61d7c112 100644
--- a/gson/src/test/java/com/google/gson/common/TestTypes.java
+++ b/gson/src/test/java/com/google/stripped/gson/common/TestTypes.java
@@ -14,20 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.common;
+package com.google.stripped.gson.common;
+
+import com.google.stripped.gson.*;
+import com.google.stripped.gson.annotations.SerializedName;
 
 import java.lang.reflect.Type;
 import java.util.Collection;
 
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.annotations.SerializedName;
 
 /**
  * Types used for testing JSON serialization and deserialization
diff --git a/gson/src/test/java/com/google/gson/functional/ArrayTest.java b/gson/src/test/java/com/google/stripped/gson/functional/ArrayTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/functional/ArrayTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/ArrayTest.java
index 11388e90a..3aa3a46fc 100644
--- a/gson/src/test/java/com/google/gson/functional/ArrayTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/ArrayTest.java
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonParseException;
-import com.google.gson.common.MoreAsserts;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithObjects;
-import com.google.gson.reflect.TypeToken;
 
+import com.google.stripped.gson.common.MoreAsserts;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.JsonParseException;
+import com.google.stripped.gson.common.TestTypes;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 import java.lang.reflect.Type;
@@ -98,14 +98,14 @@ public void testNullsInArrayDeserialization() {
   }
 
   public void testSingleNullInArraySerialization() {
-    BagOfPrimitives[] array = new BagOfPrimitives[1];
+    TestTypes.BagOfPrimitives[] array = new TestTypes.BagOfPrimitives[1];
     array[0] = null;
     String json = gson.toJson(array);
     assertEquals("[null]", json);
   }
 
   public void testSingleNullInArrayDeserialization() {
-    BagOfPrimitives[] array = gson.fromJson("[null]", BagOfPrimitives[].class);
+    TestTypes.BagOfPrimitives[] array = gson.fromJson("[null]", TestTypes.BagOfPrimitives[].class);
     assertNull(array[0]);
   }
 
@@ -196,8 +196,8 @@ public void testArrayOfPrimitivesAsObjectsDeserialization() throws Exception {
   }
 
   public void testObjectArrayWithNonPrimitivesSerialization() throws Exception {
-    ClassWithObjects classWithObjects = new ClassWithObjects();
-    BagOfPrimitives bagOfPrimitives = new BagOfPrimitives();
+    TestTypes.ClassWithObjects classWithObjects = new TestTypes.ClassWithObjects();
+    TestTypes.BagOfPrimitives bagOfPrimitives = new TestTypes.BagOfPrimitives();
     String classWithObjectsJson = gson.toJson(classWithObjects);
     String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives);
 
diff --git a/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java b/gson/src/test/java/com/google/stripped/gson/functional/CircularReferenceTest.java
similarity index 91%
rename from gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/CircularReferenceTest.java
index d352e2418..2842ca16e 100644
--- a/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/CircularReferenceTest.java
@@ -13,21 +13,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Collection;
 
+import com.google.stripped.gson.*;
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.ClassOverridingEquals;
+
+import com.google.stripped.gson.common.TestTypes.ClassOverridingEquals;
 
 /**
  * Functional tests related to circular reference detection and error reporting.
@@ -80,7 +76,7 @@ public void testSelfReferenceCustomHandlerSerialization() throws Exception {
     obj.child = obj;
     Gson gson = new GsonBuilder().registerTypeAdapter(ClassWithSelfReference.class, new JsonSerializer<ClassWithSelfReference>() {
       public JsonElement serialize(ClassWithSelfReference src, Type typeOfSrc,
-          JsonSerializationContext context) {
+                                   JsonSerializationContext context) {
         JsonObject obj = new JsonObject();
         obj.addProperty("property", "value");
         obj.add("child", context.serialize(src.child));
diff --git a/gson/src/test/java/com/google/gson/functional/CollectionTest.java b/gson/src/test/java/com/google/stripped/gson/functional/CollectionTest.java
similarity index 90%
rename from gson/src/test/java/com/google/gson/functional/CollectionTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/CollectionTest.java
index 9a8f707b4..1373b69dd 100644
--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/CollectionTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
 import java.lang.reflect.Type;
 import java.util.ArrayList;
@@ -31,16 +31,12 @@
 import java.util.Stack;
 import java.util.Vector;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.MoreAsserts;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.reflect.TypeToken;
 
+import com.google.stripped.gson.common.MoreAsserts;
+
+import com.google.stripped.gson.*;
+import com.google.stripped.gson.common.TestTypes;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 /**
@@ -213,16 +209,16 @@ public void testCollectionOfStringsSerialization() {
   }
 
   public void testCollectionOfBagOfPrimitivesSerialization() {
-    List<BagOfPrimitives> target = new ArrayList<BagOfPrimitives>();
-    BagOfPrimitives objA = new BagOfPrimitives(3L, 1, true, "blah");
-    BagOfPrimitives objB = new BagOfPrimitives(2L, 6, false, "blahB");
+    List<TestTypes.BagOfPrimitives> target = new ArrayList<TestTypes.BagOfPrimitives>();
+    TestTypes.BagOfPrimitives objA = new TestTypes.BagOfPrimitives(3L, 1, true, "blah");
+    TestTypes.BagOfPrimitives objB = new TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
     target.add(objA);
     target.add(objB);
 
     String result = gson.toJson(target);
     assertTrue(result.startsWith("["));
     assertTrue(result.endsWith("]"));
-    for (BagOfPrimitives obj : target) {
+    for (TestTypes.BagOfPrimitives obj : target) {
       assertTrue(result.contains(obj.getExpectedJson()));
     }
   }
@@ -243,7 +239,7 @@ public void testRawCollectionOfIntegersSerialization() {
 
   @SuppressWarnings("rawtypes")
   public void testRawCollectionSerialization() {
-    BagOfPrimitives bag1 = new BagOfPrimitives();
+    TestTypes.BagOfPrimitives bag1 = new TestTypes.BagOfPrimitives();
     Collection target = Arrays.asList(bag1, bag1);
     String json = gson.toJson(target);
     assertTrue(json.contains(bag1.getExpectedJson()));
@@ -264,7 +260,7 @@ public void testRawCollectionDeserializationNotAlllowed() {
 
   @SuppressWarnings({"rawtypes", "unchecked"})
   public void testRawCollectionOfBagOfPrimitivesNotAllowed() {
-    BagOfPrimitives bag = new BagOfPrimitives(10, 20, false, "stringValue");
+    TestTypes.BagOfPrimitives bag = new TestTypes.BagOfPrimitives(10, 20, false, "stringValue");
     String json = '[' + bag.getExpectedJson() + ',' + bag.getExpectedJson() + ']';
     Collection target = gson.fromJson(json, Collection.class);
     assertEquals(2, target.size());
@@ -297,9 +293,9 @@ public void testWildcardPrimitiveCollectionDeserilaization() throws Exception {
   }
 
   public void testWildcardCollectionField() throws Exception {
-    Collection<BagOfPrimitives> collection = new ArrayList<BagOfPrimitives>();
-    BagOfPrimitives objA = new BagOfPrimitives(3L, 1, true, "blah");
-    BagOfPrimitives objB = new BagOfPrimitives(2L, 6, false, "blahB");
+    Collection<TestTypes.BagOfPrimitives> collection = new ArrayList<TestTypes.BagOfPrimitives>();
+    TestTypes.BagOfPrimitives objA = new TestTypes.BagOfPrimitives(3L, 1, true, "blah");
+    TestTypes.BagOfPrimitives objB = new TestTypes.BagOfPrimitives(2L, 6, false, "blahB");
     collection.add(objA);
     collection.add(objB);
 
@@ -309,7 +305,7 @@ public void testWildcardCollectionField() throws Exception {
     assertTrue(json.contains(objB.getExpectedJson()));
 
     target = gson.fromJson(json, ObjectWithWildcardCollection.class);
-    Collection<? extends BagOfPrimitives> deserializedCollection = target.getCollection();
+    Collection<? extends TestTypes.BagOfPrimitives> deserializedCollection = target.getCollection();
     assertEquals(2, deserializedCollection.size());
     assertTrue(deserializedCollection.contains(objA));
     assertTrue(deserializedCollection.contains(objB));
@@ -329,7 +325,7 @@ public void testUserCollectionTypeAdapter() {
     Type listOfString = new TypeToken<List<String>>() {}.getType();
     Object stringListSerializer = new JsonSerializer<List<String>>() {
       public JsonElement serialize(List<String> src, Type typeOfSrc,
-          JsonSerializationContext context) {
+                                   JsonSerializationContext context) {
         return new JsonPrimitive(src.get(0) + ";" + src.get(1));
       }
     };
@@ -359,13 +355,13 @@ public JsonElement serialize(List<String> src, Type typeOfSrc,
   }
 
   private static class ObjectWithWildcardCollection {
-    private final Collection<? extends BagOfPrimitives> collection;
+    private final Collection<? extends TestTypes.BagOfPrimitives> collection;
 
-    public ObjectWithWildcardCollection(Collection<? extends BagOfPrimitives> collection) {
+    public ObjectWithWildcardCollection(Collection<? extends TestTypes.BagOfPrimitives> collection) {
       this.collection = collection;
     }
 
-    public Collection<? extends BagOfPrimitives> getCollection() {
+    public Collection<? extends TestTypes.BagOfPrimitives> getCollection() {
       return collection;
     }
   }
diff --git a/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java b/gson/src/test/java/com/google/stripped/gson/functional/ConcurrencyTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/ConcurrencyTest.java
index 2dccf4b61..6c32babb8 100755
--- a/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/ConcurrencyTest.java
@@ -13,16 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import com.google.stripped.gson.Gson;
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
 
 /**
  * Tests for ensuring Gson thread-safety.
diff --git a/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java b/gson/src/test/java/com/google/stripped/gson/functional/CustomDeserializerTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/CustomDeserializerTest.java
index c53db7f23..7668b5679 100644
--- a/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/CustomDeserializerTest.java
@@ -14,18 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.common.TestTypes.Base;
-import com.google.gson.common.TestTypes.ClassWithBaseField;
+package com.google.stripped.gson.functional;
 
+
+import com.google.stripped.gson.common.TestTypes.Base;
+import com.google.stripped.gson.common.TestTypes.ClassWithBaseField;
+
+import com.google.stripped.gson.*;
 import junit.framework.TestCase;
 
 import java.lang.reflect.Type;
diff --git a/gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java b/gson/src/test/java/com/google/stripped/gson/functional/CustomSerializerTest.java
similarity index 85%
rename from gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/CustomSerializerTest.java
index c8095463a..1dcc70d06 100644
--- a/gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/CustomSerializerTest.java
@@ -14,22 +14,17 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.Base;
-import com.google.gson.common.TestTypes.BaseSerializer;
-import com.google.gson.common.TestTypes.ClassWithBaseArrayField;
-import com.google.gson.common.TestTypes.ClassWithBaseField;
-import com.google.gson.common.TestTypes.Sub;
-import com.google.gson.common.TestTypes.SubSerializer;
 
+import com.google.stripped.gson.common.TestTypes.Base;
+import com.google.stripped.gson.common.TestTypes.BaseSerializer;
+import com.google.stripped.gson.common.TestTypes.ClassWithBaseArrayField;
+import com.google.stripped.gson.common.TestTypes.ClassWithBaseField;
+import com.google.stripped.gson.common.TestTypes.Sub;
+import com.google.stripped.gson.common.TestTypes.SubSerializer;
+
+import com.google.stripped.gson.*;
 import junit.framework.TestCase;
 
 import java.lang.reflect.Type;
diff --git a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java b/gson/src/test/java/com/google/stripped/gson/functional/CustomTypeAdaptersTest.java
similarity index 88%
rename from gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/CustomTypeAdaptersTest.java
index b452849dd..2cae9ef46 100644
--- a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/CustomTypeAdaptersTest.java
@@ -13,24 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithCustomTypeConverter;
-import com.google.gson.reflect.TypeToken;
+package com.google.stripped.gson.functional;
+
+
 
 import java.util.Date;
+
+import com.google.stripped.gson.common.TestTypes;
+import com.google.stripped.gson.*;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 import java.lang.reflect.Type;
@@ -56,32 +47,32 @@ protected void setUp() throws Exception {
 
   public void testCustomSerializers() {
     Gson gson = builder.registerTypeAdapter(
-        ClassWithCustomTypeConverter.class, new JsonSerializer<ClassWithCustomTypeConverter>() {
-          @Override public JsonElement serialize(ClassWithCustomTypeConverter src, Type typeOfSrc,
-              JsonSerializationContext context) {
+        TestTypes.ClassWithCustomTypeConverter.class, new JsonSerializer<TestTypes.ClassWithCustomTypeConverter>() {
+          @Override public JsonElement serialize(TestTypes.ClassWithCustomTypeConverter src, Type typeOfSrc,
+                                                 JsonSerializationContext context) {
         JsonObject json = new JsonObject();
         json.addProperty("bag", 5);
         json.addProperty("value", 25);
         return json;
       }
     }).create();
-    ClassWithCustomTypeConverter target = new ClassWithCustomTypeConverter();
+    TestTypes.ClassWithCustomTypeConverter target = new TestTypes.ClassWithCustomTypeConverter();
     assertEquals("{\"bag\":5,\"value\":25}", gson.toJson(target));
   }
 
   public void testCustomDeserializers() {
     Gson gson = new GsonBuilder().registerTypeAdapter(
-        ClassWithCustomTypeConverter.class, new JsonDeserializer<ClassWithCustomTypeConverter>() {
-          @Override public ClassWithCustomTypeConverter deserialize(JsonElement json, Type typeOfT,
-              JsonDeserializationContext context) {
+        TestTypes.ClassWithCustomTypeConverter.class, new JsonDeserializer<TestTypes.ClassWithCustomTypeConverter>() {
+          @Override public TestTypes.ClassWithCustomTypeConverter deserialize(JsonElement json, Type typeOfT,
+                                                                              JsonDeserializationContext context) {
         JsonObject jsonObject = json.getAsJsonObject();
         int value = jsonObject.get("bag").getAsInt();
-        return new ClassWithCustomTypeConverter(new BagOfPrimitives(value,
+        return new TestTypes.ClassWithCustomTypeConverter(new TestTypes.BagOfPrimitives(value,
             value, false, ""), value);
       }
     }).create();
     String json = "{\"bag\":5,\"value\":25}";
-    ClassWithCustomTypeConverter target = gson.fromJson(json, ClassWithCustomTypeConverter.class);
+    TestTypes.ClassWithCustomTypeConverter target = gson.fromJson(json, TestTypes.ClassWithCustomTypeConverter.class);
     assertEquals(5, target.getBag().getIntValue());
   }
 
@@ -108,27 +99,27 @@ public void disable_testCustomDeserializersOfSelf() {
 
   public void testCustomNestedSerializers() {
     Gson gson = new GsonBuilder().registerTypeAdapter(
-        BagOfPrimitives.class, new JsonSerializer<BagOfPrimitives>() {
-          @Override public JsonElement serialize(BagOfPrimitives src, Type typeOfSrc,
-          JsonSerializationContext context) {
+        TestTypes.BagOfPrimitives.class, new JsonSerializer<TestTypes.BagOfPrimitives>() {
+          @Override public JsonElement serialize(TestTypes.BagOfPrimitives src, Type typeOfSrc,
+                                                 JsonSerializationContext context) {
         return new JsonPrimitive(6);
       }
     }).create();
-    ClassWithCustomTypeConverter target = new ClassWithCustomTypeConverter();
+    TestTypes.ClassWithCustomTypeConverter target = new TestTypes.ClassWithCustomTypeConverter();
     assertEquals("{\"bag\":6,\"value\":10}", gson.toJson(target));
   }
 
   public void testCustomNestedDeserializers() {
     Gson gson = new GsonBuilder().registerTypeAdapter(
-        BagOfPrimitives.class, new JsonDeserializer<BagOfPrimitives>() {
-          @Override public BagOfPrimitives deserialize(JsonElement json, Type typeOfT,
-          JsonDeserializationContext context) throws JsonParseException {
+        TestTypes.BagOfPrimitives.class, new JsonDeserializer<TestTypes.BagOfPrimitives>() {
+          @Override public TestTypes.BagOfPrimitives deserialize(JsonElement json, Type typeOfT,
+                                                                 JsonDeserializationContext context) throws JsonParseException {
         int value = json.getAsInt();
-        return new BagOfPrimitives(value, value, false, "");
+        return new TestTypes.BagOfPrimitives(value, value, false, "");
       }
     }).create();
     String json = "{\"bag\":7,\"value\":25}";
-    ClassWithCustomTypeConverter target = gson.fromJson(json, ClassWithCustomTypeConverter.class);
+    TestTypes.ClassWithCustomTypeConverter target = gson.fromJson(json, TestTypes.ClassWithCustomTypeConverter.class);
     assertEquals(7, target.getBag().getIntValue());
   }
 
diff --git a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java b/gson/src/test/java/com/google/stripped/gson/functional/DefaultTypeAdaptersTest.java
similarity index 97%
rename from gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/DefaultTypeAdaptersTest.java
index 198667162..6eea71822 100644
--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/DefaultTypeAdaptersTest.java
@@ -13,23 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+package com.google.stripped.gson.functional;
+
+
 import java.io.IOException;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Type;
@@ -55,6 +41,11 @@
 import java.util.TimeZone;
 import java.util.TreeSet;
 import java.util.UUID;
+
+import com.google.stripped.gson.*;
+import com.google.stripped.gson.reflect.TypeToken;
+import com.google.stripped.gson.stream.JsonReader;
+import com.google.stripped.gson.stream.JsonWriter;
 import junit.framework.TestCase;
 
 /**
@@ -479,7 +470,7 @@ public void testDateSerializationWithPatternNotOverridenByTypeAdapter() throws E
         .setDateFormat(pattern)
         .registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
           public Date deserialize(JsonElement json, Type typeOfT,
-              JsonDeserializationContext context)
+                                  JsonDeserializationContext context)
               throws JsonParseException {
             return new Date(1315806903103L);
           }
diff --git a/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java b/gson/src/test/java/com/google/stripped/gson/functional/DelegateTypeAdapterTest.java
similarity index 85%
rename from gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/DelegateTypeAdapterTest.java
index f89148e36..0023a0f28 100644
--- a/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/DelegateTypeAdapterTest.java
@@ -13,22 +13,22 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.TypeAdapter;
+import com.google.stripped.gson.TypeAdapterFactory;
+import com.google.stripped.gson.reflect.TypeToken;
+import com.google.stripped.gson.stream.JsonReader;
+import com.google.stripped.gson.stream.JsonWriter;
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+import com.google.stripped.gson.common.TestTypes.BagOfPrimitives;
 
 /**
  * Functional tests for {@link Gson#getDelegateAdapter(TypeAdapterFactory, TypeToken)} method.
diff --git a/gson/src/test/java/com/google/gson/functional/EnumTest.java b/gson/src/test/java/com/google/stripped/gson/functional/EnumTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/functional/EnumTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/EnumTest.java
index 4a9f05b59..8c73c047c 100644
--- a/gson/src/test/java/com/google/gson/functional/EnumTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/EnumTest.java
@@ -14,20 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.annotations.SerializedName;
-import com.google.gson.common.MoreAsserts;
-import com.google.gson.reflect.TypeToken;
+package com.google.stripped.gson.functional;
+
+
+import com.google.stripped.gson.*;
+import com.google.stripped.gson.annotations.SerializedName;
+import com.google.stripped.gson.common.MoreAsserts;
 
 
 import java.lang.reflect.Type;
@@ -36,6 +28,7 @@
 import java.util.EnumSet;
 import java.util.Set;
 
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 /**
  * Functional tests for Java 5.0 enums.
diff --git a/gson/src/test/java/com/google/gson/functional/EscapingTest.java b/gson/src/test/java/com/google/stripped/gson/functional/EscapingTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/EscapingTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/EscapingTest.java
index 1581f4518..65d18af5c 100644
--- a/gson/src/test/java/com/google/gson/functional/EscapingTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/EscapingTest.java
@@ -14,13 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
+import com.google.stripped.gson.common.TestTypes.BagOfPrimitives;
 import java.util.ArrayList;
 import java.util.List;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java b/gson/src/test/java/com/google/stripped/gson/functional/ExclusionStrategyFunctionalTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/ExclusionStrategyFunctionalTest.java
index 2eca8bb4f..3e26fdb4d 100644
--- a/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/ExclusionStrategyFunctionalTest.java
@@ -14,18 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.ExclusionStrategy;
-import com.google.gson.FieldAttributes;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
+package com.google.stripped.gson.functional;
+
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
+
+import com.google.stripped.gson.*;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java b/gson/src/test/java/com/google/stripped/gson/functional/ExposeFieldsTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/ExposeFieldsTest.java
index 0430ba49d..ed3d9ba89 100644
--- a/gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/ExposeFieldsTest.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
 import java.lang.reflect.Type;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.annotations.Expose;
 
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.InstanceCreator;
+import com.google.stripped.gson.annotations.Expose;
 import junit.framework.TestCase;
 
 /**
@@ -111,7 +111,8 @@ public void testExposedInterfaceFieldDeserialization() throws Exception {
   }
 
   private static class ClassWithExposedFields {
-    @Expose private final Integer a;
+    @Expose
+    private final Integer a;
     private final Integer b;
     @Expose(serialize = false) final long c;
     @Expose(deserialize = false) final double d;
diff --git a/gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java b/gson/src/test/java/com/google/stripped/gson/functional/FieldExclusionTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/FieldExclusionTest.java
index 080a8234f..463dd7a21 100644
--- a/gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/FieldExclusionTest.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
 
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/functional/FieldNamingTest.java b/gson/src/test/java/com/google/stripped/gson/functional/FieldNamingTest.java
similarity index 85%
rename from gson/src/test/java/com/google/gson/functional/FieldNamingTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/FieldNamingTest.java
index 5d326af8c..53e89c3e8 100644
--- a/gson/src/test/java/com/google/gson/functional/FieldNamingTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/FieldNamingTest.java
@@ -14,20 +14,17 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import static com.google.gson.FieldNamingPolicy.IDENTITY;
-import static com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
-import static com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;
-import static com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
-import static com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
 
-import com.google.gson.FieldNamingPolicy;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.annotations.SerializedName;
+import com.google.stripped.gson.FieldNamingPolicy;
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.annotations.SerializedName;
 import junit.framework.TestCase;
 
+import static com.google.stripped.gson.FieldNamingPolicy.*;
+
 public final class FieldNamingTest extends TestCase {
   public void testIdentity() {
     Gson gson = getGsonWithNamingPolicy(IDENTITY);
diff --git a/gson/src/test/java/com/google/gson/functional/InheritanceTest.java b/gson/src/test/java/com/google/stripped/gson/functional/InheritanceTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/functional/InheritanceTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/InheritanceTest.java
index b93ba0b59..1c7ea8982 100644
--- a/gson/src/test/java/com/google/gson/functional/InheritanceTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/InheritanceTest.java
@@ -13,20 +13,20 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.Base;
-import com.google.gson.common.TestTypes.ClassWithBaseArrayField;
-import com.google.gson.common.TestTypes.ClassWithBaseCollectionField;
-import com.google.gson.common.TestTypes.ClassWithBaseField;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.common.TestTypes.Sub;
+import com.google.stripped.gson.common.TestTypes.BagOfPrimitives;
+import com.google.stripped.gson.common.TestTypes.Base;
+import com.google.stripped.gson.common.TestTypes.ClassWithBaseArrayField;
+import com.google.stripped.gson.common.TestTypes.ClassWithBaseCollectionField;
+import com.google.stripped.gson.common.TestTypes.ClassWithBaseField;
+import com.google.stripped.gson.common.TestTypes.Nested;
+import com.google.stripped.gson.common.TestTypes.Sub;
 
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.JsonArray;
+import com.google.stripped.gson.JsonElement;
+import com.google.stripped.gson.JsonObject;
 import junit.framework.TestCase;
 
 import java.util.ArrayList;
diff --git a/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java b/gson/src/test/java/com/google/stripped/gson/functional/InstanceCreatorTest.java
similarity index 90%
rename from gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/InstanceCreatorTest.java
index aad55eeb2..ee01cda63 100644
--- a/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/InstanceCreatorTest.java
@@ -14,18 +14,21 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
+
+
+import com.google.stripped.gson.common.TestTypes.Base;
+import com.google.stripped.gson.common.TestTypes.ClassWithBaseField;
+import com.google.stripped.gson.common.TestTypes.Sub;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.common.TestTypes.Base;
-import com.google.gson.common.TestTypes.ClassWithBaseField;
-import com.google.gson.common.TestTypes.Sub;
 
-import com.google.gson.reflect.TypeToken;
 import java.util.ArrayList;
 import java.util.List;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.InstanceCreator;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 import java.lang.reflect.Type;
diff --git a/gson/src/test/java/com/google/gson/functional/InterfaceTest.java b/gson/src/test/java/com/google/stripped/gson/functional/InterfaceTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/InterfaceTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/InterfaceTest.java
index 6851f1e99..56b988f27 100644
--- a/gson/src/test/java/com/google/gson/functional/InterfaceTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/InterfaceTest.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
 
+import com.google.stripped.gson.Gson;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/functional/InternationalizationTest.java b/gson/src/test/java/com/google/stripped/gson/functional/InternationalizationTest.java
similarity index 93%
rename from gson/src/test/java/com/google/gson/functional/InternationalizationTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/InternationalizationTest.java
index 169c37a50..98bf2942b 100644
--- a/gson/src/test/java/com/google/gson/functional/InternationalizationTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/InternationalizationTest.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
 
+import com.google.stripped.gson.Gson;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java b/gson/src/test/java/com/google/stripped/gson/functional/JavaUtilConcurrentAtomicTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/JavaUtilConcurrentAtomicTest.java
index 464892a3a..a0e7396ea 100644
--- a/gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/JavaUtilConcurrentAtomicTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -22,10 +22,10 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicLongArray;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.LongSerializationPolicy;
 
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.LongSerializationPolicy;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/functional/JavaUtilTest.java b/gson/src/test/java/com/google/stripped/gson/functional/JavaUtilTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/JavaUtilTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/JavaUtilTest.java
index 052096533..4d7682f16 100644
--- a/gson/src/test/java/com/google/gson/functional/JavaUtilTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/JavaUtilTest.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
 import java.util.Currency;
 import java.util.Properties;
 
-import com.google.gson.Gson;
 
+import com.google.stripped.gson.Gson;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java b/gson/src/test/java/com/google/stripped/gson/functional/JsonAdapterAnnotationOnClassesTest.java
similarity index 91%
rename from gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/JsonAdapterAnnotationOnClassesTest.java
index b7b29a656..0f82b365a 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/JsonAdapterAnnotationOnClassesTest.java
@@ -14,26 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+package com.google.stripped.gson.functional;
+
+
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.util.Locale;
+
+import com.google.stripped.gson.*;
+import com.google.stripped.gson.annotations.JsonAdapter;
+import com.google.stripped.gson.reflect.TypeToken;
+import com.google.stripped.gson.stream.JsonReader;
+import com.google.stripped.gson.stream.JsonWriter;
 import junit.framework.TestCase;
 
 /**
@@ -89,7 +81,7 @@ public void testRegisteredAdapterOverridesJsonAdapter() {
   public void testRegisteredSerializerOverridesJsonAdapter() {
     JsonSerializer<A> serializer = new JsonSerializer<A>() {
       public JsonElement serialize(A src, Type typeOfSrc,
-          JsonSerializationContext context) {
+                                   JsonSerializationContext context) {
         return new JsonPrimitive("registeredSerializer");
       }
     };
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/google/stripped/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
index 4c745ec2a..296bd08ed 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
@@ -14,17 +14,19 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+package com.google.stripped.gson.functional;
+
+
 import java.io.IOException;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.TypeAdapter;
+import com.google.stripped.gson.TypeAdapterFactory;
+import com.google.stripped.gson.annotations.JsonAdapter;
+import com.google.stripped.gson.reflect.TypeToken;
+import com.google.stripped.gson.stream.JsonReader;
+import com.google.stripped.gson.stream.JsonWriter;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/functional/JsonArrayTest.java b/gson/src/test/java/com/google/stripped/gson/functional/JsonArrayTest.java
similarity index 97%
rename from gson/src/test/java/com/google/gson/functional/JsonArrayTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/JsonArrayTest.java
index 22a479b85..a419ea214 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonArrayTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/JsonArrayTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.JsonArray;
+import com.google.stripped.gson.JsonArray;
 import junit.framework.TestCase;
 
 import java.math.BigInteger;
diff --git a/gson/src/test/java/com/google/gson/functional/JsonParserTest.java b/gson/src/test/java/com/google/stripped/gson/functional/JsonParserTest.java
similarity index 84%
rename from gson/src/test/java/com/google/gson/functional/JsonParserTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/JsonParserTest.java
index 44f4477cb..846fa27e6 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonParserTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/JsonParserTest.java
@@ -14,19 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonParser;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.reflect.TypeToken;
+package com.google.stripped.gson.functional;
 
+
+import com.google.stripped.gson.*;
+import com.google.stripped.gson.common.TestTypes;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 import java.io.StringReader;
@@ -61,7 +54,7 @@ public void testDeserializingCustomTree() {
     JsonObject obj = new JsonObject();
     obj.addProperty("stringValue", "foo");
     obj.addProperty("intValue", 11);
-    BagOfPrimitives target = gson.fromJson(obj, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives target = gson.fromJson(obj, TestTypes.BagOfPrimitives.class);
     assertEquals(11, target.intValue);
     assertEquals("foo", target.stringValue);
   }
@@ -73,7 +66,7 @@ public void testBadTypeForDeserializingCustomTree() {
     JsonArray array = new JsonArray();
     array.add(obj);
     try {
-      gson.fromJson(array, BagOfPrimitives.class);
+      gson.fromJson(array, TestTypes.BagOfPrimitives.class);
       fail("BagOfPrimitives is not an array");
     } catch (JsonParseException expected) { }
   }
@@ -87,7 +80,7 @@ public void testBadFieldTypeForCustomDeserializerCustomTree() {
     obj.add("longValue", array);
 
     try {
-      gson.fromJson(obj, BagOfPrimitives.class);
+      gson.fromJson(obj, TestTypes.BagOfPrimitives.class);
       fail("BagOfPrimitives is not an array");
     } catch (JsonParseException expected) { }
   }
@@ -104,7 +97,7 @@ public void testBadFieldTypeForDeserializingCustomTree() {
     obj.add("primitive2", array);
 
     try {
-      gson.fromJson(obj, Nested.class);
+      gson.fromJson(obj, TestTypes.Nested.class);
       fail("Nested has field BagOfPrimitives which is not an array");
     } catch (JsonParseException expected) { }
   }
@@ -115,7 +108,7 @@ public void testChangingCustomTreeAndDeserializing() {
     JsonObject obj = (JsonObject) new JsonParser().parse(json);
     obj.remove("stringValue");
     obj.addProperty("stringValue", "fooBar");
-    BagOfPrimitives target = gson.fromJson(obj, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives target = gson.fromJson(obj, TestTypes.BagOfPrimitives.class);
     assertEquals(10, target.intValue);
     assertEquals(20, target.longValue);
     assertEquals("fooBar", target.stringValue);
diff --git a/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java b/gson/src/test/java/com/google/stripped/gson/functional/JsonTreeTest.java
similarity index 90%
rename from gson/src/test/java/com/google/gson/functional/JsonTreeTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/JsonTreeTest.java
index a64794030..42f972832 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/JsonTreeTest.java
@@ -1,13 +1,15 @@
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
+
+import com.google.stripped.gson.common.TestTypes.BagOfPrimitives;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.JsonElement;
+import com.google.stripped.gson.JsonObject;
+import com.google.stripped.gson.JsonPrimitive;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/functional/LeniencyTest.java b/gson/src/test/java/com/google/stripped/gson/functional/LeniencyTest.java
similarity index 87%
rename from gson/src/test/java/com/google/gson/functional/LeniencyTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/LeniencyTest.java
index 6b5375e4b..90b50a501 100644
--- a/gson/src/test/java/com/google/gson/functional/LeniencyTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/LeniencyTest.java
@@ -13,12 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
+
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.reflect.TypeToken;
 import java.util.List;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 import static java.util.Collections.singletonList;
diff --git a/gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java b/gson/src/test/java/com/google/stripped/gson/functional/MapAsArrayTypeAdapterTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/MapAsArrayTypeAdapterTest.java
index c7cfcdf9f..a6ce5f884 100644
--- a/gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/MapAsArrayTypeAdapterTest.java
@@ -14,16 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
+
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.reflect.TypeToken;
 import java.lang.reflect.Type;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.JsonSyntaxException;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 public class MapAsArrayTypeAdapterTest extends TestCase {
diff --git a/gson/src/test/java/com/google/gson/functional/MapTest.java b/gson/src/test/java/com/google/stripped/gson/functional/MapTest.java
similarity index 97%
rename from gson/src/test/java/com/google/gson/functional/MapTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/MapTest.java
index 590760cb5..65edbb6c2 100755
--- a/gson/src/test/java/com/google/gson/functional/MapTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/MapTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
 import java.lang.reflect.Type;
 import java.util.Collection;
@@ -28,21 +28,13 @@
 import java.util.concurrent.ConcurrentNavigableMap;
 import java.util.concurrent.ConcurrentSkipListMap;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonParser;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.common.TestTypes;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
 
+import com.google.stripped.gson.common.TestTypes;
+
+
+import com.google.stripped.gson.*;
+import com.google.stripped.gson.internal.$Gson$Types;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 /**
@@ -272,7 +264,7 @@ public void testCustomSerializerForSpecificMapType() {
     Gson gson = new GsonBuilder()
         .registerTypeAdapter(type, new JsonSerializer<Map<String, Long>>() {
           public JsonElement serialize(Map<String, Long> src, Type typeOfSrc,
-              JsonSerializationContext context) {
+                                       JsonSerializationContext context) {
             JsonArray array = new JsonArray();
             for (long value : src.values()) {
               array.add(new JsonPrimitive(value));
diff --git a/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java b/gson/src/test/java/com/google/stripped/gson/functional/MoreSpecificTypeSerializationTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/MoreSpecificTypeSerializationTest.java
index 7ecbffc84..e557b0006 100644
--- a/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/MoreSpecificTypeSerializationTest.java
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonObject;
 
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.JsonObject;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 import java.util.ArrayList;
diff --git a/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java b/gson/src/test/java/com/google/stripped/gson/functional/NamingPolicyTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/NamingPolicyTest.java
index c3c0be1de..3b4abadd5 100644
--- a/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/NamingPolicyTest.java
@@ -13,16 +13,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.FieldNamingPolicy;
-import com.google.gson.FieldNamingStrategy;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.annotations.SerializedName;
-import com.google.gson.common.TestTypes.ClassWithSerializedNameFields;
-import com.google.gson.common.TestTypes.StringWrapper;
 
+import com.google.stripped.gson.common.TestTypes.ClassWithSerializedNameFields;
+import com.google.stripped.gson.common.TestTypes.StringWrapper;
+
+import com.google.stripped.gson.FieldNamingPolicy;
+import com.google.stripped.gson.FieldNamingStrategy;
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.annotations.SerializedName;
 import junit.framework.TestCase;
 
 import java.lang.reflect.Field;
diff --git a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java b/gson/src/test/java/com/google/stripped/gson/functional/NullObjectAndFieldTest.java
similarity index 91%
rename from gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/NullObjectAndFieldTest.java
index 7939a8c85..b407f9670 100755
--- a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/NullObjectAndFieldTest.java
@@ -14,20 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithObjects;
+package com.google.stripped.gson.functional;
 
+
+import com.google.stripped.gson.common.TestTypes.BagOfPrimitives;
+import com.google.stripped.gson.common.TestTypes.ClassWithObjects;
+
+import com.google.stripped.gson.*;
 import junit.framework.TestCase;
 
 import java.lang.reflect.Type;
@@ -193,7 +186,7 @@ public ClassWithInitializedMembers() {
   
   private static class ClassWithObjectsSerializer implements JsonSerializer<ClassWithObjects> {
     @Override public JsonElement serialize(ClassWithObjects src, Type typeOfSrc,
-        JsonSerializationContext context) {
+                                           JsonSerializationContext context) {
       JsonObject obj = new JsonObject();
       obj.add("bag", JsonNull.INSTANCE);
       return obj;
diff --git a/gson/src/test/java/com/google/gson/functional/ObjectTest.java b/gson/src/test/java/com/google/stripped/gson/functional/ObjectTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/ObjectTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/ObjectTest.java
index de1219a6a..68009f6cd 100644
--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/ObjectTest.java
@@ -14,26 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.ArrayOfObjects;
-import com.google.gson.common.TestTypes.BagOfPrimitiveWrappers;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithArray;
-import com.google.gson.common.TestTypes.ClassWithNoFields;
-import com.google.gson.common.TestTypes.ClassWithObjects;
-import com.google.gson.common.TestTypes.ClassWithTransientFields;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.common.TestTypes.PrimitiveArray;
-import com.google.gson.reflect.TypeToken;
+package com.google.stripped.gson.functional;
+
+
+import com.google.stripped.gson.common.TestTypes.ArrayOfObjects;
+import com.google.stripped.gson.common.TestTypes.BagOfPrimitiveWrappers;
+import com.google.stripped.gson.common.TestTypes.BagOfPrimitives;
+import com.google.stripped.gson.common.TestTypes.ClassWithArray;
+import com.google.stripped.gson.common.TestTypes.ClassWithNoFields;
+import com.google.stripped.gson.common.TestTypes.ClassWithObjects;
+import com.google.stripped.gson.common.TestTypes.ClassWithTransientFields;
+import com.google.stripped.gson.common.TestTypes.Nested;
+import com.google.stripped.gson.common.TestTypes.PrimitiveArray;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -43,6 +35,9 @@
 import java.util.Locale;
 import java.util.Map;
 import java.util.TimeZone;
+
+import com.google.stripped.gson.*;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java b/gson/src/test/java/com/google/stripped/gson/functional/ParameterizedTypesTest.java
similarity index 88%
rename from gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/ParameterizedTypesTest.java
index 190603deb..b45528b6c 100644
--- a/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/ParameterizedTypesTest.java
@@ -14,16 +14,17 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.ParameterizedTypeFixtures.MyParameterizedType;
-import com.google.gson.ParameterizedTypeFixtures.MyParameterizedTypeAdapter;
-import com.google.gson.ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.reflect.TypeToken;
 
+import com.google.stripped.gson.ParameterizedTypeFixtures.MyParameterizedType;
+import com.google.stripped.gson.ParameterizedTypeFixtures.MyParameterizedTypeAdapter;
+import com.google.stripped.gson.ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.common.TestTypes;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 import java.io.Reader;
@@ -59,25 +60,25 @@ public void testParameterizedTypesSerialization() throws Exception {
   }
 
   public void testParameterizedTypeDeserialization() throws Exception {
-    BagOfPrimitives bag = new BagOfPrimitives();
-    MyParameterizedType<BagOfPrimitives> expected = new MyParameterizedType<BagOfPrimitives>(bag);
-    Type expectedType = new TypeToken<MyParameterizedType<BagOfPrimitives>>() {}.getType();
-    BagOfPrimitives bagDefaultInstance = new BagOfPrimitives();
+    TestTypes.BagOfPrimitives bag = new TestTypes.BagOfPrimitives();
+    MyParameterizedType<TestTypes.BagOfPrimitives> expected = new MyParameterizedType<TestTypes.BagOfPrimitives>(bag);
+    Type expectedType = new TypeToken<MyParameterizedType<TestTypes.BagOfPrimitives>>() {}.getType();
+    TestTypes.BagOfPrimitives bagDefaultInstance = new TestTypes.BagOfPrimitives();
     Gson gson = new GsonBuilder().registerTypeAdapter(
-        expectedType, new MyParameterizedTypeInstanceCreator<BagOfPrimitives>(bagDefaultInstance))
+        expectedType, new MyParameterizedTypeInstanceCreator<TestTypes.BagOfPrimitives>(bagDefaultInstance))
         .create();
 
     String json = expected.getExpectedJson();
-    MyParameterizedType<BagOfPrimitives> actual = gson.fromJson(json, expectedType);
+    MyParameterizedType<TestTypes.BagOfPrimitives> actual = gson.fromJson(json, expectedType);
     assertEquals(expected, actual);
   }
 
   public void testTypesWithMultipleParametersSerialization() throws Exception {
-    MultiParameters<Integer, Float, Double, String, BagOfPrimitives> src =
-        new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D,
-            "abc", new BagOfPrimitives());
+    MultiParameters<Integer, Float, Double, String, TestTypes.BagOfPrimitives> src =
+        new MultiParameters<Integer, Float, Double, String, TestTypes.BagOfPrimitives>(10, 1.0F, 2.1D,
+            "abc", new TestTypes.BagOfPrimitives());
     Type typeOfSrc = new TypeToken<MultiParameters<Integer, Float, Double, String,
-        BagOfPrimitives>>() {}.getType();
+            TestTypes.BagOfPrimitives>>() {}.getType();
     String json = gson.toJson(src, typeOfSrc);
     String expected = "{\"a\":10,\"b\":1.0,\"c\":2.1,\"d\":\"abc\","
         + "\"e\":{\"longValue\":0,\"intValue\":0,\"booleanValue\":false,\"stringValue\":\"\"}}";
@@ -86,14 +87,14 @@ public void testTypesWithMultipleParametersSerialization() throws Exception {
 
   public void testTypesWithMultipleParametersDeserialization() throws Exception {
     Type typeOfTarget = new TypeToken<MultiParameters<Integer, Float, Double, String,
-        BagOfPrimitives>>() {}.getType();
+            TestTypes.BagOfPrimitives>>() {}.getType();
     String json = "{\"a\":10,\"b\":1.0,\"c\":2.1,\"d\":\"abc\","
         + "\"e\":{\"longValue\":0,\"intValue\":0,\"booleanValue\":false,\"stringValue\":\"\"}}";
-    MultiParameters<Integer, Float, Double, String, BagOfPrimitives> target =
+    MultiParameters<Integer, Float, Double, String, TestTypes.BagOfPrimitives> target =
         gson.fromJson(json, typeOfTarget);
-    MultiParameters<Integer, Float, Double, String, BagOfPrimitives> expected =
-        new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D,
-            "abc", new BagOfPrimitives());
+    MultiParameters<Integer, Float, Double, String, TestTypes.BagOfPrimitives> expected =
+        new MultiParameters<Integer, Float, Double, String, TestTypes.BagOfPrimitives>(10, 1.0F, 2.1D,
+            "abc", new TestTypes.BagOfPrimitives());
     assertEquals(expected, target);
   }
 
@@ -144,12 +145,12 @@ public void testParameterizedTypesWithWriterSerialization() throws Exception {
   }
 
   public void testParameterizedTypeWithReaderDeserialization() throws Exception {
-    BagOfPrimitives bag = new BagOfPrimitives();
-    MyParameterizedType<BagOfPrimitives> expected = new MyParameterizedType<BagOfPrimitives>(bag);
-    Type expectedType = new TypeToken<MyParameterizedType<BagOfPrimitives>>() {}.getType();
-    BagOfPrimitives bagDefaultInstance = new BagOfPrimitives();
+    TestTypes.BagOfPrimitives bag = new TestTypes.BagOfPrimitives();
+    MyParameterizedType<TestTypes.BagOfPrimitives> expected = new MyParameterizedType<TestTypes.BagOfPrimitives>(bag);
+    Type expectedType = new TypeToken<MyParameterizedType<TestTypes.BagOfPrimitives>>() {}.getType();
+    TestTypes.BagOfPrimitives bagDefaultInstance = new TestTypes.BagOfPrimitives();
     Gson gson = new GsonBuilder().registerTypeAdapter(
-        expectedType, new MyParameterizedTypeInstanceCreator<BagOfPrimitives>(bagDefaultInstance))
+        expectedType, new MyParameterizedTypeInstanceCreator<TestTypes.BagOfPrimitives>(bagDefaultInstance))
         .create();
 
     Reader json = new StringReader(expected.getExpectedJson());
diff --git a/gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java b/gson/src/test/java/com/google/stripped/gson/functional/PrettyPrintingTest.java
similarity index 86%
rename from gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/PrettyPrintingTest.java
index 0aacc9e27..fe213431c 100644
--- a/gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/PrettyPrintingTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
 import java.lang.reflect.Type;
 import java.util.Arrays;
@@ -22,14 +22,12 @@
 import java.util.List;
 import java.util.Map;
 
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.common.TestTypes;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.common.TestTypes.ArrayOfObjects;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.reflect.TypeToken;
-
 /**
  * Functional tests for pretty printing option.
  *
@@ -49,18 +47,18 @@ protected void setUp() throws Exception {
   }
 
   public void testPrettyPrintList() {
-    BagOfPrimitives b = new BagOfPrimitives();
-    List<BagOfPrimitives> listOfB = new LinkedList<BagOfPrimitives>();
+    TestTypes.BagOfPrimitives b = new TestTypes.BagOfPrimitives();
+    List<TestTypes.BagOfPrimitives> listOfB = new LinkedList<TestTypes.BagOfPrimitives>();
     for (int i = 0; i < 15; ++i) {
       listOfB.add(b);
     }
-    Type typeOfSrc = new TypeToken<List<BagOfPrimitives>>() {}.getType();
+    Type typeOfSrc = new TypeToken<List<TestTypes.BagOfPrimitives>>() {}.getType();
     String json = gson.toJson(listOfB, typeOfSrc);
     print(json);
   }
 
   public void testPrettyPrintArrayOfObjects() {
-    ArrayOfObjects target = new ArrayOfObjects();
+    TestTypes.ArrayOfObjects target = new TestTypes.ArrayOfObjects();
     String json = gson.toJson(target);
     print(json);
   }
diff --git a/gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java b/gson/src/test/java/com/google/stripped/gson/functional/PrimitiveCharacterTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/PrimitiveCharacterTest.java
index 69ff1f3f2..ae39a3d15 100644
--- a/gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/PrimitiveCharacterTest.java
@@ -14,11 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
+import com.google.stripped.gson.Gson;
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
+
 
 /**
  * Functional tests for Java Character values.
diff --git a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java b/gson/src/test/java/com/google/stripped/gson/functional/PrimitiveTest.java
similarity index 99%
rename from gson/src/test/java/com/google/gson/functional/PrimitiveTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/PrimitiveTest.java
index bb28ed1ec..99fbb26a1 100644
--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/PrimitiveTest.java
@@ -14,20 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.LongSerializationPolicy;
-import com.google.gson.reflect.TypeToken;
+package com.google.stripped.gson.functional;
+
+
 import java.io.Serializable;
 import java.io.StringReader;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.Arrays;
 import java.util.List;
+
+import com.google.stripped.gson.*;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java b/gson/src/test/java/com/google/stripped/gson/functional/PrintFormattingTest.java
similarity index 83%
rename from gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/PrintFormattingTest.java
index 7dcbc23c3..0e17f42ab 100644
--- a/gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/PrintFormattingTest.java
@@ -14,16 +14,17 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonObject;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithTransientFields;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.common.TestTypes.PrimitiveArray;
 
+import com.google.stripped.gson.common.TestTypes.BagOfPrimitives;
+import com.google.stripped.gson.common.TestTypes.ClassWithTransientFields;
+import com.google.stripped.gson.common.TestTypes.Nested;
+import com.google.stripped.gson.common.TestTypes.PrimitiveArray;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.JsonObject;
 import junit.framework.TestCase;
 
 import java.util.ArrayList;
diff --git a/gson/src/test/java/com/google/gson/functional/RawSerializationTest.java b/gson/src/test/java/com/google/stripped/gson/functional/RawSerializationTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/RawSerializationTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/RawSerializationTest.java
index d5e8883e7..6f594423d 100644
--- a/gson/src/test/java/com/google/gson/functional/RawSerializationTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/RawSerializationTest.java
@@ -13,15 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
 import java.util.Arrays;
 import java.util.Collection;
 
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.reflect.TypeToken;
+
 
 /**
  * Unit tests to validate serialization of parameterized types without explicit types
diff --git a/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java b/gson/src/test/java/com/google/stripped/gson/functional/ReadersWritersTest.java
similarity index 80%
rename from gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/ReadersWritersTest.java
index e21fb903e..f12165ab0 100644
--- a/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/ReadersWritersTest.java
@@ -13,16 +13,18 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
+
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonStreamParser;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
 
-import com.google.gson.reflect.TypeToken;
 import java.util.Map;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.JsonStreamParser;
+import com.google.stripped.gson.JsonSyntaxException;
+import com.google.stripped.gson.common.TestTypes;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 import java.io.CharArrayReader;
@@ -50,15 +52,15 @@ protected void setUp() throws Exception {
 
   public void testWriterForSerialization() throws Exception {
     Writer writer = new StringWriter();
-    BagOfPrimitives src = new BagOfPrimitives();
+    TestTypes.BagOfPrimitives src = new TestTypes.BagOfPrimitives();
     gson.toJson(src, writer);
     assertEquals(src.getExpectedJson(), writer.toString());
   }
 
   public void testReaderForDeserialization() throws Exception {
-    BagOfPrimitives expected = new BagOfPrimitives();
+    TestTypes.BagOfPrimitives expected = new TestTypes.BagOfPrimitives();
     Reader json = new StringReader(expected.getExpectedJson());
-    BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives actual = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals(expected, actual);
   }
 
@@ -104,15 +106,15 @@ public void testReadWriteTwoStrings() throws IOException {
   public void testReadWriteTwoObjects() throws IOException {
     Gson gson= new Gson();
     CharArrayWriter writer= new CharArrayWriter();
-    BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one");
+    TestTypes.BagOfPrimitives expectedOne = new TestTypes.BagOfPrimitives(1, 1, true, "one");
     writer.write(gson.toJson(expectedOne).toCharArray());
-    BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two");
+    TestTypes.BagOfPrimitives expectedTwo = new TestTypes.BagOfPrimitives(2, 2, false, "two");
     writer.write(gson.toJson(expectedTwo).toCharArray());
     CharArrayReader reader = new CharArrayReader(writer.toCharArray());
     JsonStreamParser parser = new JsonStreamParser(reader);
-    BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), TestTypes.BagOfPrimitives.class);
     assertEquals("one", actualOne.stringValue);
-    BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), TestTypes.BagOfPrimitives.class);
     assertEquals("two", actualTwo.stringValue);
     assertFalse(parser.hasNext());
   }
diff --git a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java b/gson/src/test/java/com/google/stripped/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
similarity index 93%
rename from gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
index 7959fc860..3815da07c 100644
--- a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
@@ -13,26 +13,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
 import java.io.IOException;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
+import com.google.stripped.gson.*;
+import com.google.stripped.gson.annotations.JsonAdapter;
+import com.google.stripped.gson.internal.Streams;
+import com.google.stripped.gson.reflect.TypeToken;
+import com.google.stripped.gson.stream.JsonReader;
+import com.google.stripped.gson.stream.JsonWriter;
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.internal.Streams;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+
 
 /**
  * Functional tests for the RuntimeTypeAdapterFactory feature in extras.
diff --git a/gson/src/test/java/com/google/gson/functional/SecurityTest.java b/gson/src/test/java/com/google/stripped/gson/functional/SecurityTest.java
similarity index 83%
rename from gson/src/test/java/com/google/gson/functional/SecurityTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/SecurityTest.java
index aa1c2d451..d7adc1ed3 100644
--- a/gson/src/test/java/com/google/gson/functional/SecurityTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/SecurityTest.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
 
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.common.TestTypes;
 import junit.framework.TestCase;
 
 /**
@@ -43,14 +43,14 @@ protected void setUp() throws Exception {
 
   public void testNonExecutableJsonSerialization() {
     Gson gson = gsonBuilder.generateNonExecutableJson().create();
-    String json = gson.toJson(new BagOfPrimitives());
+    String json = gson.toJson(new TestTypes.BagOfPrimitives());
     assertTrue(json.startsWith(JSON_NON_EXECUTABLE_PREFIX));
   }
   
   public void testNonExecutableJsonDeserialization() {
     String json = JSON_NON_EXECUTABLE_PREFIX + "{longValue:1}";
     Gson gson = gsonBuilder.create();
-    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives target = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals(1, target.longValue);
   }
   
@@ -67,7 +67,7 @@ public void testJsonWithNonExectuableTokenSerialization() {
   public void testJsonWithNonExectuableTokenWithRegularGsonDeserialization() {
     Gson gson = gsonBuilder.create();
     String json = JSON_NON_EXECUTABLE_PREFIX + "{stringValue:')]}\\u0027\\n'}";
-    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives target = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals(")]}'\n", target.stringValue);
   }  
   
@@ -79,7 +79,7 @@ public void testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization() {
     // Gson should be able to deserialize a stream with non-exectuable token even if it is created 
     Gson gson = gsonBuilder.generateNonExecutableJson().create();
     String json = JSON_NON_EXECUTABLE_PREFIX + "{intValue:2,stringValue:')]}\\u0027\\n'}";
-    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives target = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals(")]}'\n", target.stringValue);
     assertEquals(2, target.intValue);
   }  
diff --git a/gson/src/test/java/com/google/gson/functional/SerializedNameTest.java b/gson/src/test/java/com/google/stripped/gson/functional/SerializedNameTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/functional/SerializedNameTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/SerializedNameTest.java
index 0314ae0af..1d7475f21 100644
--- a/gson/src/test/java/com/google/gson/functional/SerializedNameTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/SerializedNameTest.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.annotations.SerializedName;
 
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.annotations.SerializedName;
 import junit.framework.TestCase;
 
 public final class SerializedNameTest extends TestCase {
diff --git a/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java b/gson/src/test/java/com/google/stripped/gson/functional/StreamingTypeAdaptersTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/StreamingTypeAdaptersTest.java
index 551ceffc0..228480021 100644
--- a/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/StreamingTypeAdaptersTest.java
@@ -14,18 +14,8 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.io.StringReader;
 import java.io.StringWriter;
@@ -35,6 +25,11 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+
+import com.google.stripped.gson.*;
+import com.google.stripped.gson.reflect.TypeToken;
+import com.google.stripped.gson.stream.JsonReader;
+import com.google.stripped.gson.stream.JsonWriter;
 import junit.framework.TestCase;
 
 public final class StreamingTypeAdaptersTest extends TestCase {
diff --git a/gson/src/test/java/com/google/gson/functional/StringTest.java b/gson/src/test/java/com/google/stripped/gson/functional/StringTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/functional/StringTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/StringTest.java
index 7dcf6f0f5..f6ebc08b0 100644
--- a/gson/src/test/java/com/google/gson/functional/StringTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/StringTest.java
@@ -1,7 +1,8 @@
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
 
+
+import com.google.stripped.gson.Gson;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java b/gson/src/test/java/com/google/stripped/gson/functional/ThrowableFunctionalTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/ThrowableFunctionalTest.java
index f6ae748a5..90b6dab77 100644
--- a/gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/ThrowableFunctionalTest.java
@@ -1,12 +1,11 @@
 // Copyright (C) 2014 Trymph Inc.
-package com.google.gson.functional;
-
-import java.io.IOException;
+package com.google.stripped.gson.functional;
 
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.annotations.SerializedName;
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.annotations.SerializedName;
+import java.io.IOException;
 
 @SuppressWarnings("serial")
 public final class ThrowableFunctionalTest extends TestCase {
diff --git a/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java b/gson/src/test/java/com/google/stripped/gson/functional/TreeTypeAdaptersTest.java
similarity index 90%
rename from gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/TreeTypeAdaptersTest.java
index ad737ec51..5c4425fab 100644
--- a/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/TreeTypeAdaptersTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
@@ -22,18 +22,11 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.google.stripped.gson.*;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.reflect.TypeToken;
+
 
 /**
  * Collection of functional tests for DOM tree based type adapters.
@@ -44,7 +37,7 @@
   private static final Student STUDENT1 = new Student(STUDENT1_ID, "first");
   private static final Student STUDENT2 = new Student(STUDENT2_ID, "second");
   private static final Type TYPE_COURSE_HISTORY =
-    new TypeToken<Course<HistoryCourse>>(){}.getType(); 
+    new TypeToken<Course<HistoryCourse>>(){}.getType();
   private static final Id<Course<HistoryCourse>> COURSE_ID =
       new Id<Course<HistoryCourse>>("10", TYPE_COURSE_HISTORY);
 
@@ -91,7 +84,7 @@ public String getValue() {
   }
 
   private static final class IdTreeTypeAdapter implements JsonSerializer<Id<?>>,
-      JsonDeserializer<Id<?>> {
+          JsonDeserializer<Id<?>> {
 
     @SuppressWarnings("rawtypes")
     @Override
diff --git a/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java b/gson/src/test/java/com/google/stripped/gson/functional/TypeAdapterPrecedenceTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/TypeAdapterPrecedenceTest.java
index 5f881530d..7e859011c 100644
--- a/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/TypeAdapterPrecedenceTest.java
@@ -14,21 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.TypeAdapter;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+package com.google.stripped.gson.functional;
+
+
 import java.io.IOException;
 import java.lang.reflect.Type;
+
+import com.google.stripped.gson.*;
+import com.google.stripped.gson.stream.JsonReader;
+import com.google.stripped.gson.stream.JsonWriter;
 import junit.framework.TestCase;
 
 public final class TypeAdapterPrecedenceTest extends TestCase {
diff --git a/gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java b/gson/src/test/java/com/google/stripped/gson/functional/TypeHierarchyAdapterTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/TypeHierarchyAdapterTest.java
index 25b9c3436..9cf40006d 100644
--- a/gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/TypeHierarchyAdapterTest.java
@@ -14,19 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
+package com.google.stripped.gson.functional;
+
+
 import java.lang.reflect.Type;
+
+import com.google.stripped.gson.*;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java b/gson/src/test/java/com/google/stripped/gson/functional/TypeVariableTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/functional/TypeVariableTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/TypeVariableTest.java
index 2d7503eb3..5df92008c 100644
--- a/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/TypeVariableTest.java
@@ -13,13 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
 
-import com.google.gson.reflect.TypeToken;
 import java.lang.reflect.Type;
 import java.util.Arrays;
+
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 import java.util.ArrayList;
diff --git a/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java b/gson/src/test/java/com/google/stripped/gson/functional/UncategorizedTest.java
similarity index 81%
rename from gson/src/test/java/com/google/gson/functional/UncategorizedTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/UncategorizedTest.java
index 0ac038035..6aa88356e 100644
--- a/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/UncategorizedTest.java
@@ -13,20 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassOverridingEquals;
-
-import com.google.gson.reflect.TypeToken;
+package com.google.stripped.gson.functional;
+
+
 import java.util.Arrays;
 import java.util.List;
+
+import com.google.stripped.gson.*;
+import com.google.stripped.gson.common.TestTypes;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 import java.lang.reflect.Type;
@@ -49,33 +44,33 @@ protected void setUp() throws Exception {
 
   public void testInvalidJsonDeserializationFails() throws Exception {
     try {
-      gson.fromJson("adfasdf1112,,,\":", BagOfPrimitives.class);
+      gson.fromJson("adfasdf1112,,,\":", TestTypes.BagOfPrimitives.class);
       fail("Bad JSON should throw a ParseException");
     } catch (JsonParseException expected) { }
 
     try {
-      gson.fromJson("{adfasdf1112,,,\":}", BagOfPrimitives.class);
+      gson.fromJson("{adfasdf1112,,,\":}", TestTypes.BagOfPrimitives.class);
       fail("Bad JSON should throw a ParseException");
     } catch (JsonParseException expected) { }
   }
 
   public void testObjectEqualButNotSameSerialization() throws Exception {
-    ClassOverridingEquals objA = new ClassOverridingEquals();
-    ClassOverridingEquals objB = new ClassOverridingEquals();
+    TestTypes.ClassOverridingEquals objA = new TestTypes.ClassOverridingEquals();
+    TestTypes.ClassOverridingEquals objB = new TestTypes.ClassOverridingEquals();
     objB.ref = objA;
     String json = gson.toJson(objB);
     assertEquals(objB.getExpectedJson(), json);
   }
 
   public void testStaticFieldsAreNotSerialized() {
-    BagOfPrimitives target = new BagOfPrimitives();
+    TestTypes.BagOfPrimitives target = new TestTypes.BagOfPrimitives();
     assertFalse(gson.toJson(target).contains("DEFAULT_VALUE"));
   }
 
   public void testGsonInstanceReusableForSerializationAndDeserialization() {
-    BagOfPrimitives bag = new BagOfPrimitives();
+    TestTypes.BagOfPrimitives bag = new TestTypes.BagOfPrimitives();
     String json = gson.toJson(bag);
-    BagOfPrimitives deserialized = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives deserialized = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals(bag, deserialized);
   }
 
diff --git a/gson/src/test/java/com/google/gson/functional/VersioningTest.java b/gson/src/test/java/com/google/stripped/gson/functional/VersioningTest.java
similarity index 90%
rename from gson/src/test/java/com/google/gson/functional/VersioningTest.java
rename to gson/src/test/java/com/google/stripped/gson/functional/VersioningTest.java
index bc526de06..c4dc1c386 100644
--- a/gson/src/test/java/com/google/gson/functional/VersioningTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/functional/VersioningTest.java
@@ -13,14 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.google.stripped.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.annotations.Since;
-import com.google.gson.annotations.Until;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
 
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.GsonBuilder;
+import com.google.stripped.gson.annotations.Since;
+import com.google.stripped.gson.annotations.Until;
+import com.google.stripped.gson.common.TestTypes;
 import junit.framework.TestCase;
 
 /**
@@ -96,7 +96,7 @@ public void testIgnoreLaterVersionClassDeserialization() {
 
   public void testVersionedGsonWithUnversionedClassesSerialization() {
     Gson gson = builder.setVersion(1.0).create();
-    BagOfPrimitives target = new BagOfPrimitives(10, 20, false, "stringValue");
+    TestTypes.BagOfPrimitives target = new TestTypes.BagOfPrimitives(10, 20, false, "stringValue");
     assertEquals(target.getExpectedJson(), gson.toJson(target));
   }
 
@@ -104,11 +104,11 @@ public void testVersionedGsonWithUnversionedClassesDeserialization() {
     Gson gson = builder.setVersion(1.0).create();
     String json = "{\"longValue\":10,\"intValue\":20,\"booleanValue\":false}";
 
-    BagOfPrimitives expected = new BagOfPrimitives();
+    TestTypes.BagOfPrimitives expected = new TestTypes.BagOfPrimitives();
     expected.longValue = 10;
     expected.intValue = 20;
     expected.booleanValue = false;
-    BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives actual = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals(expected, actual);
   }
 
diff --git a/gson/src/test/java/com/google/gson/internal/GsonTypesTest.java b/gson/src/test/java/com/google/stripped/gson/internal/GsonTypesTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/internal/GsonTypesTest.java
rename to gson/src/test/java/com/google/stripped/gson/internal/GsonTypesTest.java
index c80700bde..5ed7d219b 100644
--- a/gson/src/test/java/com/google/gson/internal/GsonTypesTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/internal/GsonTypesTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.google.stripped.gson.internal;
 
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
diff --git a/gson/src/test/java/com/google/gson/internal/LazilyParsedNumberTest.java b/gson/src/test/java/com/google/stripped/gson/internal/LazilyParsedNumberTest.java
similarity index 93%
rename from gson/src/test/java/com/google/gson/internal/LazilyParsedNumberTest.java
rename to gson/src/test/java/com/google/stripped/gson/internal/LazilyParsedNumberTest.java
index f108fa0de..1fb897437 100644
--- a/gson/src/test/java/com/google/gson/internal/LazilyParsedNumberTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/internal/LazilyParsedNumberTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.internal;
+package com.google.stripped.gson.internal;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java b/gson/src/test/java/com/google/stripped/gson/internal/LinkedHashTreeMapTest.java
similarity index 97%
rename from gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java
rename to gson/src/test/java/com/google/stripped/gson/internal/LinkedHashTreeMapTest.java
index 2aeeeb764..0499dec6b 100644
--- a/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/internal/LinkedHashTreeMapTest.java
@@ -14,17 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.google.stripped.gson.internal;
 
-import com.google.gson.common.MoreAsserts;
-import com.google.gson.internal.LinkedHashTreeMap.AvlBuilder;
-import com.google.gson.internal.LinkedHashTreeMap.AvlIterator;
-import com.google.gson.internal.LinkedHashTreeMap.Node;
+import com.google.stripped.gson.common.MoreAsserts;
+import com.google.stripped.gson.internal.LinkedHashTreeMap.AvlIterator;
+import com.google.stripped.gson.internal.LinkedHashTreeMap.Node;
+import com.google.stripped.gson.internal.LinkedHashTreeMap.AvlBuilder;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Random;
+
 import junit.framework.TestCase;
 
 public final class LinkedHashTreeMapTest extends TestCase {
diff --git a/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java b/gson/src/test/java/com/google/stripped/gson/internal/LinkedTreeMapTest.java
similarity index 97%
rename from gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
rename to gson/src/test/java/com/google/stripped/gson/internal/LinkedTreeMapTest.java
index 580d25a57..fcc930e15 100644
--- a/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/internal/LinkedTreeMapTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.google.stripped.gson.internal;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -22,10 +22,9 @@
 import java.util.Map;
 import java.util.Random;
 
+import com.google.stripped.gson.common.MoreAsserts;
 import junit.framework.TestCase;
 
-import com.google.gson.common.MoreAsserts;
-
 public final class LinkedTreeMapTest extends TestCase {
 
   public void testIterationOrder() {
diff --git a/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java b/gson/src/test/java/com/google/stripped/gson/internal/bind/JsonElementReaderTest.java
similarity index 97%
rename from gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java
rename to gson/src/test/java/com/google/stripped/gson/internal/bind/JsonElementReaderTest.java
index 10624711c..50c8a56ca 100644
--- a/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/internal/bind/JsonElementReaderTest.java
@@ -14,12 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.google.stripped.gson.internal.bind;
+
 
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParser;
-import com.google.gson.stream.JsonToken;
 import java.io.IOException;
+
+import com.google.stripped.gson.JsonElement;
+import com.google.stripped.gson.JsonParser;
+import com.google.stripped.gson.internal.bind.JsonTreeReader;
+import com.google.stripped.gson.stream.JsonToken;
 import junit.framework.TestCase;
 
 @SuppressWarnings("resource")
diff --git a/gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java b/gson/src/test/java/com/google/stripped/gson/internal/bind/JsonTreeWriterTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java
rename to gson/src/test/java/com/google/stripped/gson/internal/bind/JsonTreeWriterTest.java
index e07014d3f..d1f72bbb8 100644
--- a/gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/internal/bind/JsonTreeWriterTest.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.google.stripped.gson.internal.bind;
 
-import com.google.gson.JsonNull;
 import java.io.IOException;
+
+import com.google.stripped.gson.JsonNull;
+import com.google.stripped.gson.internal.bind.JsonTreeWriter;
 import junit.framework.TestCase;
 
 @SuppressWarnings("resource")
diff --git a/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java b/gson/src/test/java/com/google/stripped/gson/metrics/PerformanceTest.java
similarity index 97%
rename from gson/src/test/java/com/google/gson/metrics/PerformanceTest.java
rename to gson/src/test/java/com/google/stripped/gson/metrics/PerformanceTest.java
index cf444eee7..89b0b89e3 100644
--- a/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/metrics/PerformanceTest.java
@@ -1,4 +1,4 @@
-/*
+package com.google.stripped.gson.metrics;/*
  * Copyright (C) 2008 Google Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -14,13 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.metrics;
-
-import com.google.gson.Gson;
-import com.google.gson.JsonParseException;
-import com.google.gson.annotations.Expose;
-import com.google.gson.reflect.TypeToken;
 
+import com.google.stripped.gson.Gson;
+import com.google.stripped.gson.JsonParseException;
+import com.google.stripped.gson.annotations.Expose;
+import com.google.stripped.gson.reflect.TypeToken;
 import junit.framework.TestCase;
 
 import java.io.StringWriter;
@@ -138,7 +136,7 @@ public void disabled_testLargeCollectionDeserialization() {
     }    
     sb.append(']');
     String json = sb.toString();
-    Type collectionType = new TypeToken<ArrayList<CollectionEntry>>(){}.getType();    
+    Type collectionType = new TypeToken<ArrayList<CollectionEntry>>(){}.getType();
     List<CollectionEntry> list = gson.fromJson(json, collectionType);       
     assertEquals(count, list.size());
   }
@@ -320,7 +318,7 @@ public ClassWithField(String field) {
 
   @SuppressWarnings("unused")
   private static final class ClassWithListOfObjects { 
-    @Expose 
+    @Expose
     final String field; 
     @Expose 
     final List<ClassWithExposedField> list = new ArrayList<ClassWithExposedField>(COLLECTION_SIZE);
diff --git a/gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java b/gson/src/test/java/com/google/stripped/gson/reflect/TypeTokenTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java
rename to gson/src/test/java/com/google/stripped/gson/reflect/TypeTokenTest.java
index 7dda9d47d..a1271f41b 100644
--- a/gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/reflect/TypeTokenTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.reflect;
+package com.google.stripped.gson.reflect;
 
 import java.lang.reflect.Type;
 import java.util.ArrayList;
diff --git a/gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java b/gson/src/test/java/com/google/stripped/gson/stream/JsonReaderPathTest.java
similarity index 99%
rename from gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java
rename to gson/src/test/java/com/google/stripped/gson/stream/JsonReaderPathTest.java
index 50661664c..1aa7d478e 100644
--- a/gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/stream/JsonReaderPathTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.google.stripped.gson.stream;
 
 import java.io.IOException;
 import java.io.StringReader;
diff --git a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java b/gson/src/test/java/com/google/stripped/gson/stream/JsonReaderTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
rename to gson/src/test/java/com/google/stripped/gson/stream/JsonReaderTest.java
index a192940f8..6c46645d6 100644
--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/stream/JsonReaderTest.java
@@ -14,24 +14,21 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.google.stripped.gson.stream;
 
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
 import java.util.Arrays;
+
+import com.google.stripped.gson.stream.JsonReader;
+import com.google.stripped.gson.stream.JsonToken;
+import com.google.stripped.gson.stream.MalformedJsonException;
 import junit.framework.TestCase;
 
-import static com.google.gson.stream.JsonToken.BEGIN_ARRAY;
-import static com.google.gson.stream.JsonToken.BEGIN_OBJECT;
-import static com.google.gson.stream.JsonToken.BOOLEAN;
-import static com.google.gson.stream.JsonToken.END_ARRAY;
-import static com.google.gson.stream.JsonToken.END_OBJECT;
-import static com.google.gson.stream.JsonToken.NAME;
-import static com.google.gson.stream.JsonToken.NULL;
-import static com.google.gson.stream.JsonToken.NUMBER;
-import static com.google.gson.stream.JsonToken.STRING;
+import static com.google.stripped.gson.stream.JsonToken.*;
+
 
 @SuppressWarnings("resource")
 public final class JsonReaderTest extends TestCase {
@@ -122,7 +119,7 @@ public void testSkipObjectAfterPeek() throws Exception {
     JsonReader reader = new JsonReader(reader(json));
     reader.beginObject();
     assertEquals("one", reader.nextName());
-    assertEquals(BEGIN_OBJECT, reader.peek());
+    assertEquals(JsonToken.BEGIN_OBJECT, reader.peek());
     reader.skipValue();
     assertEquals("two", reader.nextName());
     assertEquals(BEGIN_OBJECT, reader.peek());
diff --git a/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java b/gson/src/test/java/com/google/stripped/gson/stream/JsonWriterTest.java
similarity index 99%
rename from gson/src/test/java/com/google/gson/stream/JsonWriterTest.java
rename to gson/src/test/java/com/google/stripped/gson/stream/JsonWriterTest.java
index 91763d184..628e04b79 100644
--- a/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java
+++ b/gson/src/test/java/com/google/stripped/gson/stream/JsonWriterTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.google.stripped.gson.stream;
 
 import java.io.IOException;
 import java.io.StringWriter;
