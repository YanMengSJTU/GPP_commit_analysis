diff --git a/UserGuide.md b/UserGuide.md
index f5d2fff00..40e73afe9 100644
--- a/UserGuide.md
+++ b/UserGuide.md
@@ -248,7 +248,7 @@ gson.toJson(foo); // May not serialize foo.value correctly
 gson.fromJson(json, foo.getClass()); // Fails to deserialize foo.value as Bar
 ```
 
-The above code fails to interpret value as type Bar because Gson invokes `list.getClass()` to get its class information, but this method returns a raw class, `Foo.class`. This means that Gson has no way of knowing that this is an object of type `Foo<Bar>`, and not just plain `Foo`.
+The above code fails to interpret value as type Bar because Gson invokes `foo.getClass()` to get its class information, but this method returns a raw class, `Foo.class`. This means that Gson has no way of knowing that this is an object of type `Foo<Bar>`, and not just plain `Foo`.
 
 You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the [`TypeToken`](https://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/reflect/TypeToken.html) class.
 
diff --git a/gson/src/main/java/com/google/gson/stream/JsonWriter.java b/gson/src/main/java/com/google/gson/stream/JsonWriter.java
index 597bd569a..84eaa0a7c 100644
--- a/gson/src/main/java/com/google/gson/stream/JsonWriter.java
+++ b/gson/src/main/java/com/google/gson/stream/JsonWriter.java
@@ -286,7 +286,7 @@ public final boolean getSerializeNulls() {
    */
   public JsonWriter beginArray() throws IOException {
     writeDeferredName();
-    return open(EMPTY_ARRAY, "[");
+    return open(EMPTY_ARRAY, '[');
   }
 
   /**
@@ -295,7 +295,7 @@ public JsonWriter beginArray() throws IOException {
    * @return this writer.
    */
   public JsonWriter endArray() throws IOException {
-    return close(EMPTY_ARRAY, NONEMPTY_ARRAY, "]");
+    return close(EMPTY_ARRAY, NONEMPTY_ARRAY, ']');
   }
 
   /**
@@ -306,7 +306,7 @@ public JsonWriter endArray() throws IOException {
    */
   public JsonWriter beginObject() throws IOException {
     writeDeferredName();
-    return open(EMPTY_OBJECT, "{");
+    return open(EMPTY_OBJECT, '{');
   }
 
   /**
@@ -315,14 +315,14 @@ public JsonWriter beginObject() throws IOException {
    * @return this writer.
    */
   public JsonWriter endObject() throws IOException {
-    return close(EMPTY_OBJECT, NONEMPTY_OBJECT, "}");
+    return close(EMPTY_OBJECT, NONEMPTY_OBJECT, '}');
   }
 
   /**
    * Enters a new scope by appending any necessary whitespace and the given
    * bracket.
    */
-  private JsonWriter open(int empty, String openBracket) throws IOException {
+  private JsonWriter open(int empty, char openBracket) throws IOException {
     beforeValue();
     push(empty);
     out.write(openBracket);
@@ -333,7 +333,7 @@ private JsonWriter open(int empty, String openBracket) throws IOException {
    * Closes the current scope by appending any necessary whitespace and the
    * given bracket.
    */
-  private JsonWriter close(int empty, int nonempty, String closeBracket)
+  private JsonWriter close(int empty, int nonempty, char closeBracket)
       throws IOException {
     int context = peek();
     if (context != nonempty && context != empty) {
@@ -562,7 +562,7 @@ public void close() throws IOException {
 
   private void string(String value) throws IOException {
     String[] replacements = htmlSafe ? HTML_SAFE_REPLACEMENT_CHARS : REPLACEMENT_CHARS;
-    out.write("\"");
+    out.write('\"');
     int last = 0;
     int length = value.length();
     for (int i = 0; i < length; i++) {
@@ -589,7 +589,7 @@ private void string(String value) throws IOException {
     if (last < length) {
       out.write(value, last, length - last);
     }
-    out.write("\"");
+    out.write('\"');
   }
 
   private void newline() throws IOException {
@@ -597,7 +597,7 @@ private void newline() throws IOException {
       return;
     }
 
-    out.write("\n");
+    out.write('\n');
     for (int i = 1, size = stackSize; i < size; i++) {
       out.write(indent);
     }
