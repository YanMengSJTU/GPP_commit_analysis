diff --git a/gson/pom.xml b/gson/pom.xml
index 68fb547cb..ac260c064 100644
--- a/gson/pom.xml
+++ b/gson/pom.xml
@@ -4,7 +4,7 @@
   <parent>
     <groupId>com.google.code.gson</groupId>
     <artifactId>gson-parent</artifactId>
-    <version>2.7.1-SNAPSHOT</version>
+    <version>2.7.1-X1</version>
   </parent>
 
   <artifactId>gson</artifactId>
@@ -24,7 +24,6 @@
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-javadoc-plugin</artifactId>
         <configuration>
-          <includePackageNames>com.google.gson</includePackageNames>
           <excludePackageNames>com.google.gson.internal:com.google.gson.internal.bind</excludePackageNames>
           <links>
             <link>http://docs.oracle.com/javase/6/docs/api/</link>
diff --git a/gson/src/main/java/com/google/gson/Gson.java b/gson/src/main/java/com/google/gson/Gson.java
index e97b16279..651fcd3f7 100644
--- a/gson/src/main/java/com/google/gson/Gson.java
+++ b/gson/src/main/java/com/google/gson/Gson.java
@@ -25,11 +25,7 @@
 import java.lang.reflect.Type;
 import java.math.BigDecimal;
 import java.math.BigInteger;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicLongArray;
@@ -283,7 +279,7 @@ public boolean htmlSafe() {
         }
         return in.nextDouble();
       }
-      @Override public void write(JsonWriter out, Number value) throws IOException {
+      @Override public void write(JsonWriter out, Number value, Set<String> hashSet) throws IOException {
         if (value == null) {
           out.nullValue();
           return;
@@ -307,7 +303,7 @@ public boolean htmlSafe() {
         }
         return (float) in.nextDouble();
       }
-      @Override public void write(JsonWriter out, Number value) throws IOException {
+      @Override public void write(JsonWriter out, Number value, Set<String> hashSet) throws IOException {
         if (value == null) {
           out.nullValue();
           return;
@@ -339,7 +335,7 @@ static void checkValidFloatingPoint(double value) {
         }
         return in.nextLong();
       }
-      @Override public void write(JsonWriter out, Number value) throws IOException {
+      @Override public void write(JsonWriter out, Number value, Set<String> hashSet) throws IOException {
         if (value == null) {
           out.nullValue();
           return;
@@ -351,8 +347,8 @@ static void checkValidFloatingPoint(double value) {
 
   private static TypeAdapter<AtomicLong> atomicLongAdapter(final TypeAdapter<Number> longAdapter) {
     return new TypeAdapter<AtomicLong>() {
-      @Override public void write(JsonWriter out, AtomicLong value) throws IOException {
-        longAdapter.write(out, value.get());
+      @Override public void write(JsonWriter out, AtomicLong value, Set<String> hashSet) throws IOException {
+        longAdapter.write(out, value.get(), hashSet);
       }
       @Override public AtomicLong read(JsonReader in) throws IOException {
         Number value = longAdapter.read(in);
@@ -363,10 +359,10 @@ static void checkValidFloatingPoint(double value) {
 
   private static TypeAdapter<AtomicLongArray> atomicLongArrayAdapter(final TypeAdapter<Number> longAdapter) {
     return new TypeAdapter<AtomicLongArray>() {
-      @Override public void write(JsonWriter out, AtomicLongArray value) throws IOException {
+      @Override public void write(JsonWriter out, AtomicLongArray value, Set<String> hashSet) throws IOException {
         out.beginArray();
         for (int i = 0, length = value.length(); i < length; i++) {
-          longAdapter.write(out, value.get(i));
+          longAdapter.write(out, value.get(i), hashSet);
         }
         out.endArray();
       }
@@ -666,7 +662,8 @@ public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOE
     boolean oldSerializeNulls = writer.getSerializeNulls();
     writer.setSerializeNulls(serializeNulls);
     try {
-      ((TypeAdapter<Object>) adapter).write(writer, src);
+      Set<String> hashSet = new HashSet<String>();
+      ((TypeAdapter<Object>) adapter).write(writer, src, hashSet);
     } catch (IOException e) {
       throw new JsonIOException(e);
     } finally {
@@ -969,11 +966,11 @@ public void setDelegate(TypeAdapter<T> typeAdapter) {
       return delegate.read(in);
     }
 
-    @Override public void write(JsonWriter out, T value) throws IOException {
+    @Override public void write(JsonWriter out, T value, Set<String> hashSet) throws IOException {
       if (delegate == null) {
         throw new IllegalStateException();
       }
-      delegate.write(out, value);
+      delegate.write(out, value, hashSet);
     }
   }
 
diff --git a/gson/src/main/java/com/google/gson/TypeAdapter.java b/gson/src/main/java/com/google/gson/TypeAdapter.java
index 4646d271d..6a4990c1c 100644
--- a/gson/src/main/java/com/google/gson/TypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/TypeAdapter.java
@@ -26,6 +26,8 @@
 import java.io.StringReader;
 import java.io.StringWriter;
 import java.io.Writer;
+import java.util.HashSet;
+import java.util.Set;
 
 /**
  * Converts Java objects to and from JSON.
@@ -62,7 +64,7 @@
  * this case the type adapter binds a rich Java class to a compact JSON value.
  *
  * <p>The {@link #read(JsonReader) read()} method must read exactly one value
- * and {@link #write(JsonWriter,Object) write()} must write exactly one value.
+ * and {@link #write(JsonWriter, Object, Set) write()} must write exactly one value.
  * For primitive types this is means readers should make exactly one call to
  * {@code nextBoolean()}, {@code nextDouble()}, {@code nextInt()}, {@code
  * nextLong()}, {@code nextString()} or {@code nextNull()}. Writers should make
@@ -123,15 +125,16 @@
    * for {@code value}.
    *
    * @param value the Java object to write. May be null.
+   * @param hashSet
    */
-  public abstract void write(JsonWriter out, T value) throws IOException;
+  public abstract void write(JsonWriter out, T value, Set<String> hashSet) throws IOException;
 
   /**
    * Converts {@code value} to a JSON document and writes it to {@code out}.
    * Unlike Gson's similar {@link Gson#toJson(JsonElement, Appendable) toJson}
    * method, this write is strict. Create a {@link
    * JsonWriter#setLenient(boolean) lenient} {@code JsonWriter} and call
-   * {@link #write(com.google.gson.stream.JsonWriter, Object)} for lenient
+   * {@link #write(JsonWriter, Object, Set)} for lenient
    * writing.
    *
    * @param value the Java object to convert. May be null.
@@ -139,7 +142,8 @@
    */
   public final void toJson(Writer out, T value) throws IOException {
     JsonWriter writer = new JsonWriter(out);
-    write(writer, value);
+    Set<String> hashSet = new HashSet<String>();
+    write(writer, value, hashSet);
   }
 
   /**
@@ -184,11 +188,11 @@ public final void toJson(Writer out, T value) throws IOException {
    */
   public final TypeAdapter<T> nullSafe() {
     return new TypeAdapter<T>() {
-      @Override public void write(JsonWriter out, T value) throws IOException {
+      @Override public void write(JsonWriter out, T value, Set<String> hashSet) throws IOException {
         if (value == null) {
           out.nullValue();
         } else {
-          TypeAdapter.this.write(out, value);
+          TypeAdapter.this.write(out, value, hashSet);
         }
       }
       @Override public T read(JsonReader reader) throws IOException {
@@ -205,7 +209,7 @@ public final void toJson(Writer out, T value) throws IOException {
    * Converts {@code value} to a JSON document. Unlike Gson's similar {@link
    * Gson#toJson(Object) toJson} method, this write is strict. Create a {@link
    * JsonWriter#setLenient(boolean) lenient} {@code JsonWriter} and call
-   * {@link #write(com.google.gson.stream.JsonWriter, Object)} for lenient
+   * {@link #write(JsonWriter, Object, Set)} for lenient
    * writing.
    *
    * @param value the Java object to convert. May be null.
@@ -231,7 +235,8 @@ public final String toJson(T value) {
   public final JsonElement toJsonTree(T value) {
     try {
       JsonTreeWriter jsonWriter = new JsonTreeWriter();
-      write(jsonWriter, value);
+      Set<String> hashSet = new HashSet<String>();
+      write(jsonWriter, value,  hashSet);
       return jsonWriter.get();
     } catch (IOException e) {
       throw new JsonIOException(e);
diff --git a/gson/src/main/java/com/google/gson/internal/Excluder.java b/gson/src/main/java/com/google/gson/internal/Excluder.java
index bef790406..59d0f2c92 100644
--- a/gson/src/main/java/com/google/gson/internal/Excluder.java
+++ b/gson/src/main/java/com/google/gson/internal/Excluder.java
@@ -33,6 +33,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.Set;
 
 /**
  * This class selects which fields and types to omit. It is configurable,
@@ -129,12 +130,12 @@ public Excluder withExclusionStrategy(ExclusionStrategy exclusionStrategy,
         return delegate().read(in);
       }
 
-      @Override public void write(JsonWriter out, T value) throws IOException {
+      @Override public void write(JsonWriter out, T value, Set<String> hashSet) throws IOException {
         if (skipSerialize) {
           out.nullValue();
           return;
         }
-        delegate().write(out, value);
+        delegate().write(out, value, hashSet);
       }
 
       private TypeAdapter<T> delegate() {
diff --git a/gson/src/main/java/com/google/gson/internal/Streams.java b/gson/src/main/java/com/google/gson/internal/Streams.java
index ac99910a9..16750688f 100644
--- a/gson/src/main/java/com/google/gson/internal/Streams.java
+++ b/gson/src/main/java/com/google/gson/internal/Streams.java
@@ -28,6 +28,8 @@
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.Writer;
+import java.util.HashSet;
+import java.util.Set;
 
 /**
  * Reads and writes GSON parse trees over streams.
@@ -69,7 +71,8 @@ public static JsonElement parse(JsonReader reader) throws JsonParseException {
    * Writes the JSON element to the writer, recursively.
    */
   public static void write(JsonElement element, JsonWriter writer) throws IOException {
-    TypeAdapters.JSON_ELEMENT.write(writer, element);
+    Set<String> hashSet = new HashSet<String>();
+    TypeAdapters.JSON_ELEMENT.write(writer, element, hashSet);
   }
 
   public static Writer writerForAppendable(Appendable appendable) {
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
index 3fb7c0568..b5d25c66d 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
@@ -22,6 +22,7 @@
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Set;
 
 import com.google.gson.Gson;
 import com.google.gson.TypeAdapter;
@@ -81,7 +82,7 @@ public ArrayTypeAdapter(Gson context, TypeAdapter<E> componentTypeAdapter, Class
   }
 
   @SuppressWarnings("unchecked")
-  @Override public void write(JsonWriter out, Object array) throws IOException {
+  @Override public void write(JsonWriter out, Object array, Set<String> hashSet) throws IOException {
     if (array == null) {
       out.nullValue();
       return;
@@ -90,7 +91,7 @@ public ArrayTypeAdapter(Gson context, TypeAdapter<E> componentTypeAdapter, Class
     out.beginArray();
     for (int i = 0, length = Array.getLength(array); i < length; i++) {
       E value = (E) Array.get(array, i);
-      componentTypeAdapter.write(out, value);
+      componentTypeAdapter.write(out, value, hashSet );
     }
     out.endArray();
   }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
index 1d57844a4..3d172bee9 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
@@ -29,6 +29,7 @@
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.util.Collection;
+import java.util.Set;
 
 /**
  * Adapt a homogeneous collection of objects.
@@ -86,7 +87,7 @@ public Adapter(Gson context, Type elementType,
       return collection;
     }
 
-    @Override public void write(JsonWriter out, Collection<E> collection) throws IOException {
+    @Override public void write(JsonWriter out, Collection<E> collection, Set<String> hashSet) throws IOException {
       if (collection == null) {
         out.nullValue();
         return;
@@ -94,7 +95,7 @@ public Adapter(Gson context, Type elementType,
 
       out.beginArray();
       for (E element : collection) {
-        elementTypeAdapter.write(out, element);
+        elementTypeAdapter.write(out, element, hashSet);
       }
       out.endArray();
     }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
index 561af1985..072be4ce3 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
@@ -31,6 +31,7 @@
 import java.text.ParsePosition;
 import java.util.Date;
 import java.util.Locale;
+import java.util.Set;
 
 /**
  * Adapter for Date. Although this class appears stateless, it is not.
@@ -75,7 +76,7 @@ private synchronized Date deserializeToDate(String json) {
     }
   }
 
-  @Override public synchronized void write(JsonWriter out, Date value) throws IOException {
+  @Override public synchronized void write(JsonWriter out, Date value, Set<String> hashSet) throws IOException {
     if (value == null) {
       out.nullValue();
       return;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
index 1682aad04..439d3a05f 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
@@ -36,6 +36,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 /**
  * Adapts maps to either JSON objects or JSON arrays.
@@ -195,7 +196,7 @@ public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,
       return map;
     }
 
-    @Override public void write(JsonWriter out, Map<K, V> map) throws IOException {
+    @Override public void write(JsonWriter out, Map<K, V> map, Set<String> hashSet) throws IOException {
       if (map == null) {
         out.nullValue();
         return;
@@ -205,7 +206,7 @@ public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,
         out.beginObject();
         for (Map.Entry<K, V> entry : map.entrySet()) {
           out.name(String.valueOf(entry.getKey()));
-          valueTypeAdapter.write(out, entry.getValue());
+          valueTypeAdapter.write(out, entry.getValue(), hashSet);
         }
         out.endObject();
         return;
@@ -227,7 +228,7 @@ public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,
         for (int i = 0; i < keys.size(); i++) {
           out.beginArray(); // entry array
           Streams.write(keys.get(i), out);
-          valueTypeAdapter.write(out, values.get(i));
+          valueTypeAdapter.write(out, values.get(i), hashSet);
           out.endArray();
         }
         out.endArray();
@@ -236,7 +237,7 @@ public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,
         for (int i = 0; i < keys.size(); i++) {
           JsonElement keyElement = keys.get(i);
           out.name(keyToString(keyElement));
-          valueTypeAdapter.write(out, values.get(i));
+          valueTypeAdapter.write(out, values.get(i),hashSet );
         }
         out.endObject();
       }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
index ec42e0482..aab572be7 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
@@ -29,6 +29,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 /**
  * Adapts types whose static type is only 'Object'. Uses getClass() on
@@ -91,7 +92,7 @@
   }
 
   @SuppressWarnings("unchecked")
-  @Override public void write(JsonWriter out, Object value) throws IOException {
+  @Override public void write(JsonWriter out, Object value, Set<String> hashSet) throws IOException {
     if (value == null) {
       out.nullValue();
       return;
@@ -104,6 +105,6 @@
       return;
     }
 
-    typeAdapter.write(out, value);
+    typeAdapter.write(out, value, hashSet);
   }
 }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
index 34e97664e..aff0d3e40 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -35,11 +35,7 @@
 import java.io.IOException;
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
 /**
  * Type adapter that reflects over the fields and methods of a class.
@@ -117,12 +113,12 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
-      @Override void write(JsonWriter writer, Object value)
+      @Override void write(JsonWriter writer, Object value, Set hashSet)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
         TypeAdapter t = jsonAdapterPresent ? typeAdapter
             : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
-        t.write(writer, fieldValue);
+        t.write(writer, fieldValue, hashSet);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
@@ -188,7 +184,7 @@ protected BoundField(String name, boolean serialized, boolean deserialized) {
       this.deserialized = deserialized;
     }
     abstract boolean writeField(Object value) throws IOException, IllegalAccessException;
-    abstract void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException;
+    abstract void write(JsonWriter writer, Object value,  Set hashSet) throws IOException, IllegalAccessException;
     abstract void read(JsonReader reader, Object value) throws IOException, IllegalAccessException;
   }
 
@@ -229,18 +225,20 @@ protected BoundField(String name, boolean serialized, boolean deserialized) {
       return instance;
     }
 
-    @Override public void write(JsonWriter out, T value) throws IOException {
-      if (value == null) {
+    @Override public void write(JsonWriter out, T value, Set<String> hashSet) throws IOException {
+      if (value == null || hashSet.contains(value.toString())) {
         out.nullValue();
         return;
       }
 
+      hashSet.add(value.toString());
+
       out.beginObject();
       try {
         for (BoundField boundField : boundFields.values()) {
           if (boundField.writeField(value)) {
             out.name(boundField.name);
-            boundField.write(out, value);
+            boundField.write(out, value,hashSet);
           }
         }
       } catch (IllegalAccessException e) {
diff --git a/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java
index 5ec244f29..c852c76e9 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java
@@ -25,9 +25,11 @@
 import com.google.gson.stream.JsonToken;
 import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
+import java.sql.Date;
 import java.text.DateFormat;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
+import java.util.Set;
 
 /**
  * Adapter for java.sql.Date. Although this class appears stateless, it is not.
@@ -61,7 +63,7 @@
   }
 
   @Override
-  public synchronized void write(JsonWriter out, java.sql.Date value) throws IOException {
+  public synchronized void write(JsonWriter out, Date value, Set<String> hashSet) throws IOException {
     out.value(value == null ? null : format.format(value));
   }
 }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java
index 55d4b2f69..537d9d59d 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java
@@ -30,6 +30,7 @@
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.Set;
 
 /**
  * Adapter for Time. Although this class appears stateless, it is not.
@@ -60,7 +61,7 @@
     }
   }
 
-  @Override public synchronized void write(JsonWriter out, Time value) throws IOException {
+  @Override public synchronized void write(JsonWriter out, Time value, Set<String> hashSet) throws IOException {
     out.value(value == null ? null : format.format(value));
   }
 }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java
index e13e3489f..b3dbf195e 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java
@@ -32,6 +32,7 @@
 import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Type;
+import java.util.Set;
 
 /**
  * Adapts a Gson 1.x tree-style adapter as a streaming TypeAdapter. Since the
@@ -69,9 +70,9 @@ public TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deseria
     return deserializer.deserialize(value, typeToken.getType(), context);
   }
 
-  @Override public void write(JsonWriter out, T value) throws IOException {
+  @Override public void write(JsonWriter out, T value, Set<String> hashSet) throws IOException {
     if (serializer == null) {
-      delegate().write(out, value);
+      delegate().write(out, value, hashSet);
       return;
     }
     if (value == null) {
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
index 2bf37ad0a..e565a3ccd 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
@@ -18,6 +18,7 @@
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
+import java.util.Set;
 
 import com.google.gson.Gson;
 import com.google.gson.TypeAdapter;
@@ -43,7 +44,7 @@ public T read(JsonReader in) throws IOException {
 
   @SuppressWarnings({"rawtypes", "unchecked"})
   @Override
-  public void write(JsonWriter out, T value) throws IOException {
+  public void write(JsonWriter out, T value, Set<String> hashSet) throws IOException {
     // Order of preference for choosing type adapters
     // First preference: a type adapter registered for the runtime type
     // Second preference: a type adapter registered for the declared type
@@ -66,7 +67,7 @@ public void write(JsonWriter out, T value) throws IOException {
         chosen = runtimeTypeAdapter;
       }
     }
-    chosen.write(out, value);
+    chosen.write(out, value, hashSet);
   }
 
   /**
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
index 6a51c64e8..db03c2a1f 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
@@ -24,18 +24,7 @@
 import java.net.URISyntaxException;
 import java.net.URL;
 import java.sql.Timestamp;
-import java.util.ArrayList;
-import java.util.BitSet;
-import java.util.Calendar;
-import java.util.Currency;
-import java.util.Date;
-import java.util.GregorianCalendar;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.StringTokenizer;
-import java.util.UUID;
+import java.util.*;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicIntegerArray;
@@ -68,7 +57,7 @@ private TypeAdapters() {
   @SuppressWarnings("rawtypes")
   public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {
     @Override
-    public void write(JsonWriter out, Class value) throws IOException {
+    public void write(JsonWriter out, Class value, Set<String> hashSet) throws IOException {
       if (value == null) {
         out.nullValue();
       } else {
@@ -131,7 +120,7 @@ public Class read(JsonReader in) throws IOException {
       return bitset;
     }
 
-    @Override public void write(JsonWriter out, BitSet src) throws IOException {
+    @Override public void write(JsonWriter out, BitSet src, Set<String> hashSet) throws IOException {
       if (src == null) {
         out.nullValue();
         return;
@@ -161,7 +150,7 @@ public Boolean read(JsonReader in) throws IOException {
       return in.nextBoolean();
     }
     @Override
-    public void write(JsonWriter out, Boolean value) throws IOException {
+    public void write(JsonWriter out, Boolean value, Set<String> hashSet) throws IOException {
       out.value(value);
     }
   };
@@ -179,7 +168,7 @@ public void write(JsonWriter out, Boolean value) throws IOException {
       return Boolean.valueOf(in.nextString());
     }
 
-    @Override public void write(JsonWriter out, Boolean value) throws IOException {
+    @Override public void write(JsonWriter out, Boolean value, Set<String> hashSet) throws IOException {
       out.value(value == null ? "null" : value.toString());
     }
   };
@@ -202,7 +191,7 @@ public Number read(JsonReader in) throws IOException {
       }
     }
     @Override
-    public void write(JsonWriter out, Number value) throws IOException {
+    public void write(JsonWriter out, Number value, Set<String> hashSet) throws IOException {
       out.value(value);
     }
   };
@@ -224,7 +213,7 @@ public Number read(JsonReader in) throws IOException {
       }
     }
     @Override
-    public void write(JsonWriter out, Number value) throws IOException {
+    public void write(JsonWriter out, Number value, Set<String> hashSet) throws IOException {
       out.value(value);
     }
   };
@@ -246,7 +235,7 @@ public Number read(JsonReader in) throws IOException {
       }
     }
     @Override
-    public void write(JsonWriter out, Number value) throws IOException {
+    public void write(JsonWriter out, Number value, Set<String> hashSet) throws IOException {
       out.value(value);
     }
   };
@@ -261,7 +250,7 @@ public void write(JsonWriter out, Number value) throws IOException {
         throw new JsonSyntaxException(e);
       }
     }
-    @Override public void write(JsonWriter out, AtomicInteger value) throws IOException {
+    @Override public void write(JsonWriter out, AtomicInteger value, Set<String> hashSet) throws IOException {
       out.value(value.get());
     }
   }.nullSafe();
@@ -272,7 +261,7 @@ public void write(JsonWriter out, Number value) throws IOException {
     @Override public AtomicBoolean read(JsonReader in) throws IOException {
       return new AtomicBoolean(in.nextBoolean());
     }
-    @Override public void write(JsonWriter out, AtomicBoolean value) throws IOException {
+    @Override public void write(JsonWriter out, AtomicBoolean value, Set<String> hashSet) throws IOException {
       out.value(value.get());
     }
   }.nullSafe();
@@ -299,7 +288,7 @@ public void write(JsonWriter out, Number value) throws IOException {
         }
         return array;
     }
-    @Override public void write(JsonWriter out, AtomicIntegerArray value) throws IOException {
+    @Override public void write(JsonWriter out, AtomicIntegerArray value, Set<String> hashSet) throws IOException {
       out.beginArray();
       for (int i = 0, length = value.length(); i < length; i++) {
         out.value(value.get(i));
@@ -324,7 +313,7 @@ public Number read(JsonReader in) throws IOException {
       }
     }
     @Override
-    public void write(JsonWriter out, Number value) throws IOException {
+    public void write(JsonWriter out, Number value, Set<String> hashSet) throws IOException {
       out.value(value);
     }
   };
@@ -339,7 +328,7 @@ public Number read(JsonReader in) throws IOException {
       return (float) in.nextDouble();
     }
     @Override
-    public void write(JsonWriter out, Number value) throws IOException {
+    public void write(JsonWriter out, Number value, Set<String> hashSet) throws IOException {
       out.value(value);
     }
   };
@@ -354,7 +343,7 @@ public Number read(JsonReader in) throws IOException {
       return in.nextDouble();
     }
     @Override
-    public void write(JsonWriter out, Number value) throws IOException {
+    public void write(JsonWriter out, Number value, Set<String> hashSet) throws IOException {
       out.value(value);
     }
   };
@@ -374,7 +363,7 @@ public Number read(JsonReader in) throws IOException {
       }
     }
     @Override
-    public void write(JsonWriter out, Number value) throws IOException {
+    public void write(JsonWriter out, Number value, Set<String> hashSet) throws IOException {
       out.value(value);
     }
   };
@@ -395,7 +384,7 @@ public Character read(JsonReader in) throws IOException {
       return str.charAt(0);
     }
     @Override
-    public void write(JsonWriter out, Character value) throws IOException {
+    public void write(JsonWriter out, Character value, Set<String> hashSet) throws IOException {
       out.value(value == null ? null : String.valueOf(value));
     }
   };
@@ -418,7 +407,7 @@ public String read(JsonReader in) throws IOException {
       return in.nextString();
     }
     @Override
-    public void write(JsonWriter out, String value) throws IOException {
+    public void write(JsonWriter out, String value, Set<String> hashSet) throws IOException {
       out.value(value);
     }
   };
@@ -436,7 +425,7 @@ public void write(JsonWriter out, String value) throws IOException {
       }
     }
 
-    @Override public void write(JsonWriter out, BigDecimal value) throws IOException {
+    @Override public void write(JsonWriter out, BigDecimal value, Set<String> hashSet) throws IOException {
       out.value(value);
     }
   };
@@ -454,7 +443,7 @@ public void write(JsonWriter out, String value) throws IOException {
       }
     }
 
-    @Override public void write(JsonWriter out, BigInteger value) throws IOException {
+    @Override public void write(JsonWriter out, BigInteger value, Set<String> hashSet) throws IOException {
       out.value(value);
     }
   };
@@ -471,7 +460,7 @@ public StringBuilder read(JsonReader in) throws IOException {
       return new StringBuilder(in.nextString());
     }
     @Override
-    public void write(JsonWriter out, StringBuilder value) throws IOException {
+    public void write(JsonWriter out, StringBuilder value, Set<String> hashSet) throws IOException {
       out.value(value == null ? null : value.toString());
     }
   };
@@ -489,7 +478,7 @@ public StringBuffer read(JsonReader in) throws IOException {
       return new StringBuffer(in.nextString());
     }
     @Override
-    public void write(JsonWriter out, StringBuffer value) throws IOException {
+    public void write(JsonWriter out, StringBuffer value, Set<String> hashSet) throws IOException {
       out.value(value == null ? null : value.toString());
     }
   };
@@ -508,7 +497,7 @@ public URL read(JsonReader in) throws IOException {
       return "null".equals(nextString) ? null : new URL(nextString);
     }
     @Override
-    public void write(JsonWriter out, URL value) throws IOException {
+    public void write(JsonWriter out, URL value, Set<String> hashSet) throws IOException {
       out.value(value == null ? null : value.toExternalForm());
     }
   };
@@ -530,7 +519,7 @@ public URI read(JsonReader in) throws IOException {
       }
     }
     @Override
-    public void write(JsonWriter out, URI value) throws IOException {
+    public void write(JsonWriter out, URI value, Set<String> hashSet) throws IOException {
       out.value(value == null ? null : value.toASCIIString());
     }
   };
@@ -548,7 +537,7 @@ public InetAddress read(JsonReader in) throws IOException {
       return InetAddress.getByName(in.nextString());
     }
     @Override
-    public void write(JsonWriter out, InetAddress value) throws IOException {
+    public void write(JsonWriter out, InetAddress value, Set<String> hashSet) throws IOException {
       out.value(value == null ? null : value.getHostAddress());
     }
   };
@@ -566,7 +555,7 @@ public UUID read(JsonReader in) throws IOException {
       return java.util.UUID.fromString(in.nextString());
     }
     @Override
-    public void write(JsonWriter out, UUID value) throws IOException {
+    public void write(JsonWriter out, UUID value, Set<String> hashSet) throws IOException {
       out.value(value == null ? null : value.toString());
     }
   };
@@ -579,7 +568,7 @@ public Currency read(JsonReader in) throws IOException {
       return Currency.getInstance(in.nextString());
     }
     @Override
-    public void write(JsonWriter out, Currency value) throws IOException {
+    public void write(JsonWriter out, Currency value, Set<String> hashSet) throws IOException {
       out.value(value.getCurrencyCode());
     }
   }.nullSafe();
@@ -599,8 +588,8 @@ public void write(JsonWriter out, Currency value) throws IOException {
           return date != null ? new Timestamp(date.getTime()) : null;
         }
 
-        @Override public void write(JsonWriter out, Timestamp value) throws IOException {
-          dateTypeAdapter.write(out, value);
+        @Override public void write(JsonWriter out, Timestamp value, Set<String> hashSet) throws IOException {
+          dateTypeAdapter.write(out, value, hashSet);
         }
       };
     }
@@ -649,7 +638,7 @@ public Calendar read(JsonReader in) throws IOException {
     }
 
     @Override
-    public void write(JsonWriter out, Calendar value) throws IOException {
+    public void write(JsonWriter out, Calendar value, Set<String> hashSet) throws IOException {
       if (value == null) {
         out.nullValue();
         return;
@@ -704,7 +693,7 @@ public Locale read(JsonReader in) throws IOException {
       }
     }
     @Override
-    public void write(JsonWriter out, Locale value) throws IOException {
+    public void write(JsonWriter out, Locale value, Set<String> hashSet) throws IOException {
       out.value(value == null ? null : value.toString());
     }
   };
@@ -749,7 +738,7 @@ public void write(JsonWriter out, Locale value) throws IOException {
       }
     }
 
-    @Override public void write(JsonWriter out, JsonElement value) throws IOException {
+    @Override public void write(JsonWriter out, JsonElement value, Set<String> hashSet) throws IOException {
       if (value == null || value.isJsonNull()) {
         out.nullValue();
       } else if (value.isJsonPrimitive()) {
@@ -765,7 +754,7 @@ public void write(JsonWriter out, Locale value) throws IOException {
       } else if (value.isJsonArray()) {
         out.beginArray();
         for (JsonElement e : value.getAsJsonArray()) {
-          write(out, e);
+          write(out, e, hashSet);
         }
         out.endArray();
 
@@ -773,7 +762,7 @@ public void write(JsonWriter out, Locale value) throws IOException {
         out.beginObject();
         for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet()) {
           out.name(e.getKey());
-          write(out, e.getValue());
+          write(out, e.getValue(), hashSet);
         }
         out.endObject();
 
@@ -816,7 +805,7 @@ public EnumTypeAdapter(Class<T> classOfT) {
       return nameToConstant.get(in.nextString());
     }
 
-    @Override public void write(JsonWriter out, T value) throws IOException {
+    @Override public void write(JsonWriter out, T value, Set<String> hashSet) throws IOException {
       out.value(value == null ? null : constantToName.get(value));
     }
   }
@@ -902,8 +891,8 @@ public EnumTypeAdapter(Class<T> classOfT) {
           return null;
         }
         return (TypeAdapter<T2>) new TypeAdapter<T1>() {
-          @Override public void write(JsonWriter out, T1 value) throws IOException {
-            typeAdapter.write(out, value);
+          @Override public void write(JsonWriter out, T1 value, Set<String> hashSet) throws IOException {
+            typeAdapter.write(out, value, hashSet);
           }
 
           @Override public T1 read(JsonReader in) throws IOException {
diff --git a/gson/src/test/java/com/google/gson/GsonBuilderTest.java b/gson/src/test/java/com/google/gson/GsonBuilderTest.java
index 73601c0e3..3c17225d8 100755
--- a/gson/src/test/java/com/google/gson/GsonBuilderTest.java
+++ b/gson/src/test/java/com/google/gson/GsonBuilderTest.java
@@ -18,6 +18,7 @@
 
 import java.lang.reflect.Modifier;
 import java.lang.reflect.Type;
+import java.util.Set;
 
 import junit.framework.TestCase;
 
@@ -31,7 +32,7 @@
  */
 public class GsonBuilderTest extends TestCase {
   private static final TypeAdapter<Object> NULL_TYPE_ADAPTER = new TypeAdapter<Object>() {
-    @Override public void write(JsonWriter out, Object value) {
+    @Override public void write(JsonWriter out, Object value, Set<String> hashSet) {
       throw new AssertionError();
     }
     @Override public Object read(JsonReader in) {
diff --git a/gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java b/gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java
index 79ae1698f..c78226968 100644
--- a/gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java
+++ b/gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java
@@ -20,6 +20,8 @@
 import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.util.Locale;
+import java.util.Set;
+
 import junit.framework.TestCase;
 
 /**
@@ -27,7 +29,7 @@
  */
 public class OverrideCoreTypeAdaptersTest extends TestCase {
   private static final TypeAdapter<Boolean> booleanAsIntAdapter = new TypeAdapter<Boolean>() {
-    @Override public void write(JsonWriter out, Boolean value) throws IOException {
+    @Override public void write(JsonWriter out, Boolean value, Set<String> hashSet) throws IOException {
       out.value(value ? 1 : 0);
     }
     @Override public Boolean read(JsonReader in) throws IOException {
@@ -37,7 +39,7 @@
   };
 
   private static final TypeAdapter<String> swapCaseStringAdapter = new TypeAdapter<String>() {
-    @Override public void write(JsonWriter out, String value) throws IOException {
+    @Override public void write(JsonWriter out, String value, Set<String> hashSet) throws IOException {
       out.value(value.toUpperCase(Locale.US));
     }
     @Override public String read(JsonReader in) throws IOException {
diff --git a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
index 198667162..50cba24fa 100644
--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
@@ -701,7 +701,7 @@ public void testStringBufferDeserialization() {
   @SuppressWarnings("rawtypes")
   private static class MyClassTypeAdapter extends TypeAdapter<Class> {
     @Override
-    public void write(JsonWriter out, Class value) throws IOException {
+    public void write(JsonWriter out, Class value, Set<String> hashSet) throws IOException {
       out.value(value.getName());
     }
     @Override
@@ -720,7 +720,7 @@ public Class read(JsonReader in) throws IOException {
     NumberAsStringAdapter(Class<? extends Number> type) throws Exception {
       this.constructor = type.getConstructor(String.class);
     }
-    @Override public void write(JsonWriter out, Number value) throws IOException {
+    @Override public void write(JsonWriter out, Number value, Set<String> hashSet) throws IOException {
       out.value(value.toString());
     }
     @Override public Number read(JsonReader in) throws IOException {
diff --git a/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java b/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
index f89148e36..84d36b042 100644
--- a/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
+++ b/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
@@ -17,7 +17,9 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 import junit.framework.TestCase;
 
@@ -78,9 +80,10 @@ public void testDelegateInvokedOnStrings() {
       final TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);
       return new TypeAdapter<T>() {
         @Override
-        public void write(JsonWriter out, T value) throws IOException {
+        public void write(JsonWriter out, T value,Set<String> hashSet) throws IOException {
           ++numWrites;
-          delegate.write(out, value);
+
+          delegate.write(out, value, hashSet);
         }
 
         @Override
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
index b7b29a656..4e79b4e23 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
@@ -34,6 +34,8 @@
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.util.Locale;
+import java.util.Set;
+
 import junit.framework.TestCase;
 
 /**
@@ -69,7 +71,7 @@ public void testJsonAdapterFactoryInvoked() {
 
   public void testRegisteredAdapterOverridesJsonAdapter() {
     TypeAdapter<A> typeAdapter = new TypeAdapter<A>() {
-      @Override public void write(JsonWriter out, A value) throws IOException {
+      @Override public void write(JsonWriter out, A value, Set<String> hashSet) throws IOException {
         out.value("registeredAdapter");
       }
       @Override public A read(JsonReader in) throws IOException {
@@ -146,7 +148,7 @@ public void testNullSafeObjectFromJson() {
       this.value = value;
     }
     static final class JsonAdapter extends TypeAdapter<A> {
-      @Override public void write(JsonWriter out, A value) throws IOException {
+      @Override public void write(JsonWriter out, A value, Set<String> hashSet) throws IOException {
         out.value("jsonAdapter");
       }
       @Override public A read(JsonReader in) throws IOException {
@@ -165,7 +167,7 @@ public void testNullSafeObjectFromJson() {
     static final class JsonAdapterFactory implements TypeAdapterFactory {
       @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
         return new TypeAdapter<T>() {
-          @Override public void write(JsonWriter out, T value) throws IOException {
+          @Override public void write(JsonWriter out, T value, Set<String> hashSet) throws IOException {
             out.value("jsonAdapterFactory");
           }
           @SuppressWarnings("unchecked")
@@ -203,7 +205,7 @@ public void testNullSafeObjectFromJson() {
     }
   }
   private static class UserJsonAdapter extends TypeAdapter<User> {
-    @Override public void write(JsonWriter out, User user) throws IOException {
+    @Override public void write(JsonWriter out, User user, Set<String> hashSet) throws IOException {
       // implement write: combine firstName and lastName into name
       out.beginObject();
       out.name("name");
@@ -227,7 +229,7 @@ public void testNullSafeObjectFromJson() {
 
   private static class NullableClassJsonAdapter extends TypeAdapter<NullableClass> {
     @Override
-    public void write(JsonWriter out, NullableClass value) throws IOException {
+    public void write(JsonWriter out, NullableClass value, Set<String> hashSet) throws IOException {
       out.value("nullable");
     }
 
@@ -241,7 +243,7 @@ public NullableClass read(JsonReader in) throws IOException {
   @JsonAdapter(FooJsonAdapter.class)
   private static enum Foo { BAR, BAZ }
   private static class FooJsonAdapter extends TypeAdapter<Foo> {
-    @Override public void write(JsonWriter out, Foo value) throws IOException {
+    @Override public void write(JsonWriter out, Foo value, Set<String> hashSet) throws IOException {
       out.value(value.name().toLowerCase(Locale.US));
     }
 
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
index 706fe60f8..c7baef926 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
@@ -19,6 +19,7 @@
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Set;
 
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
@@ -64,7 +65,7 @@ public void testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter()
   public void testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter() {
     Gson gson = new GsonBuilder()
       .registerTypeAdapter(Part.class, new TypeAdapter<Part>() {
-        @Override public void write(JsonWriter out, Part part) throws IOException {
+        @Override public void write(JsonWriter out, Part part, Set<String> hashSet) throws IOException {
           throw new AssertionError();
         }
         @Override public Part read(JsonReader in) throws IOException {
@@ -109,7 +110,7 @@ public Part(String name) {
   }
 
   private static class PartJsonFieldAnnotationAdapter extends TypeAdapter<Part> {
-    @Override public void write(JsonWriter out, Part part) throws IOException {
+    @Override public void write(JsonWriter out, Part part, Set<String> hashSet) throws IOException {
       out.value("PartJsonFieldAnnotationAdapter");
     }
     @Override public Part read(JsonReader in) throws IOException {
@@ -121,7 +122,7 @@ public Part(String name) {
   private static class GizmoPartTypeAdapterFactory implements TypeAdapterFactory {
     @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
       return new TypeAdapter<T>() {
-        @Override public void write(JsonWriter out, T value) throws IOException {
+        @Override public void write(JsonWriter out, T value, Set<String> hashSet) throws IOException {
           out.value("GizmoPartTypeAdapterFactory");
         }
         @SuppressWarnings("unchecked")
@@ -149,7 +150,7 @@ private User(String name) {
   }
 
   private static class UserClassAnnotationAdapter extends TypeAdapter<User> {
-    @Override public void write(JsonWriter out, User user) throws IOException {
+    @Override public void write(JsonWriter out, User user, Set<String> hashSet) throws IOException {
       out.value("UserClassAnnotationAdapter");
     }
     @Override public User read(JsonReader in) throws IOException {
@@ -168,7 +169,7 @@ private User(String name) {
   }
 
   private static final class UserFieldAnnotationAdapter extends TypeAdapter<User> {
-    @Override public void write(JsonWriter out, User user) throws IOException {
+    @Override public void write(JsonWriter out, User user, Set<String> hashSet) throws IOException {
       out.value("UserFieldAnnotationAdapter");
     }
     @Override public User read(JsonReader in) throws IOException {
@@ -178,7 +179,7 @@ private User(String name) {
   }
 
   private static final class RegisteredUserAdapter extends TypeAdapter<User> {
-    @Override public void write(JsonWriter out, User user) throws IOException {
+    @Override public void write(JsonWriter out, User user, Set<String> hashSet) throws IOException {
       out.value("RegisteredUserAdapter");
     }
     @Override public User read(JsonReader in) throws IOException {
@@ -253,7 +254,7 @@ private GadgetWithPrimitivePart(long part) {
 
   private static final class LongToStringTypeAdapterFactory implements TypeAdapterFactory {
     static final TypeAdapter<Long> ADAPTER = new TypeAdapter<Long>() {
-      @Override public void write(JsonWriter out, Long value) throws IOException {
+      @Override public void write(JsonWriter out, Long value, Set<String> hashSet) throws IOException {
         out.value(value.toString());
       }
       @Override public Long read(JsonReader in) throws IOException {
@@ -292,7 +293,7 @@ public void testFieldAnnotationWorksForParameterizedType() {
   private static class Gizmo2PartTypeAdapterFactory implements TypeAdapterFactory {
     @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
       return new TypeAdapter<T>() {
-        @Override public void write(JsonWriter out, T value) throws IOException {
+        @Override public void write(JsonWriter out, T value, Set<String> hashSet) throws IOException {
           out.value("GizmoPartTypeAdapterFactory");
         }
         @SuppressWarnings("unchecked")
diff --git a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java b/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
index 1284e2c9b..8cc30044f 100644
--- a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
+++ b/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
@@ -18,6 +18,7 @@
 import java.io.IOException;
 import java.util.LinkedHashMap;
 import java.util.Map;
+import java.util.Set;
 
 import junit.framework.TestCase;
 
@@ -179,7 +180,7 @@ protected RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {
           return delegate.fromJsonTree(jsonElement);
         }
 
-        @Override public void write(JsonWriter out, R value) throws IOException {
+        @Override public void write(JsonWriter out, R value, Set<String> hashSet) throws IOException {
           Class<?> srcType = value.getClass();
           String label = subtypeToLabel.get(srcType);
           @SuppressWarnings("unchecked") // registration requires that subtype extends T
diff --git a/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java b/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java
index 551ceffc0..b980a01b3 100644
--- a/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java
+++ b/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java
@@ -29,12 +29,8 @@
 import java.io.IOException;
 import java.io.StringReader;
 import java.io.StringWriter;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
+
 import junit.framework.TestCase;
 
 public final class StreamingTypeAdaptersTest extends TestCase {
@@ -105,7 +101,7 @@ private void usePersonNameAdapter() {
         String name = in.nextString();
         return new Person(name, -1);
       }
-      @Override public void write(JsonWriter out, Person value) throws IOException {
+      @Override public void write(JsonWriter out, Person value, Set<String> hashSet) throws IOException {
         out.value(value.name);
       }
     };
@@ -157,7 +153,7 @@ public void testNullSafe() {
         String[] values = in.nextString().split(",");
         return new Person(values[0], Integer.parseInt(values[1]));
       }
-      public void write(JsonWriter out, Person person) throws IOException {
+      public void write(JsonWriter out, Person person, Set<String> hashSet) throws IOException {
         out.value(person.name + "," + person.age);
       }
     };
@@ -248,7 +244,8 @@ public void testFromJsonTree() {
   private static <T> String toJson(TypeAdapter<T> typeAdapter, T value) throws IOException {
     StringWriter stringWriter = new StringWriter();
     JsonWriter writer = new JsonWriter(stringWriter);
-    typeAdapter.write(writer, value);
+    Set<String> hashSet = new HashSet<String>();
+    typeAdapter.write(writer, value, hashSet);
     return stringWriter.toString();
   }
 
diff --git a/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java b/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java
index 5f881530d..447d0102b 100644
--- a/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java
+++ b/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java
@@ -29,6 +29,8 @@
 import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Type;
+import java.util.Set;
+
 import junit.framework.TestCase;
 
 public final class TypeAdapterPrecedenceTest extends TestCase {
@@ -143,7 +145,7 @@ public Foo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContex
       @Override public Foo read(JsonReader in) throws IOException {
         return new Foo(in.nextString() + " via " + name);
       }
-      @Override public void write(JsonWriter out, Foo value) throws IOException {
+      @Override public void write(JsonWriter out, Foo value, Set<String> hashSet) throws IOException {
         out.value(value.name + " via " + name);
       }
     };
diff --git a/pom.xml b/pom.xml
index 86c7110d4..b0519dd81 100644
--- a/pom.xml
+++ b/pom.xml
@@ -11,7 +11,7 @@
 
   <groupId>com.google.code.gson</groupId>
   <artifactId>gson-parent</artifactId>
-  <version>2.7.1-SNAPSHOT</version>
+  <version>2.7.1-X1</version>
   <packaging>pom</packaging>
 
   <name>Gson Parent</name>
