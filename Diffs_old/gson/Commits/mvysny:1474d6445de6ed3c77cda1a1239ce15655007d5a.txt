diff --git a/gson/src/main/java/com/google/gson/JsonElement.java b/gson/src/main/java/com/google/gson/JsonElement.java
index 62bb920cd..188d00bbe 100644
--- a/gson/src/main/java/com/google/gson/JsonElement.java
+++ b/gson/src/main/java/com/google/gson/JsonElement.java
@@ -19,6 +19,7 @@
 import com.google.gson.internal.Streams;
 import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
+import java.io.Serializable;
 import java.io.StringWriter;
 import java.math.BigDecimal;
 import java.math.BigInteger;
@@ -30,7 +31,7 @@
  * @author Inderjeet Singh
  * @author Joel Leitch
  */
-public abstract class JsonElement {
+public abstract class JsonElement implements Serializable {
   /**
    * Returns a deep copy of this element. Immutable elements like primitives
    * and nulls are not copied.
diff --git a/gson/src/main/java/com/google/gson/JsonNull.java b/gson/src/main/java/com/google/gson/JsonNull.java
index 67cb9325b..01b23cb28 100755
--- a/gson/src/main/java/com/google/gson/JsonNull.java
+++ b/gson/src/main/java/com/google/gson/JsonNull.java
@@ -64,4 +64,8 @@ public int hashCode() {
   public boolean equals(Object other) {
     return this == other || other instanceof JsonNull;
   }
+
+  private Object readResolve() {
+    return INSTANCE;
+  }
 }
diff --git a/gson/src/main/java/com/google/gson/JsonObject.java b/gson/src/main/java/com/google/gson/JsonObject.java
index 4b63db56c..1643bbe2f 100644
--- a/gson/src/main/java/com/google/gson/JsonObject.java
+++ b/gson/src/main/java/com/google/gson/JsonObject.java
@@ -18,6 +18,11 @@
 
 import com.google.gson.internal.LinkedTreeMap;
 
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
@@ -30,7 +35,7 @@
  * @author Joel Leitch
  */
 public final class JsonObject extends JsonElement {
-  private final LinkedTreeMap<String, JsonElement> members =
+  private LinkedTreeMap<String, JsonElement> members =
       new LinkedTreeMap<String, JsonElement>();
 
   /**
@@ -215,4 +220,17 @@ public boolean equals(Object o) {
   public int hashCode() {
     return members.hashCode();
   }
+
+  @SuppressWarnings("unchecked")
+  private void readObject(ObjectInputStream aInputStream) throws ClassNotFoundException, IOException {
+    // custom deserializer since LinkedTreeMap serializes to LinkedHashMap!
+    members = new LinkedTreeMap<String, JsonElement>();
+    members.putAll(((Map<String, JsonElement>) aInputStream.readObject()));
+  }
+
+  private void writeObject(ObjectOutputStream aOutputStream) throws IOException {
+    // custom deserializer since LinkedTreeMap serializes to LinkedHashMap and thus deserialization would fail with
+    // java.lang.ClassCastException: cannot assign instance of java.util.LinkedHashMap to field com.google.gson.JsonObject.members of type com.google.gson.internal.LinkedTreeMap in instance of com.google.gson.JsonObject
+    aOutputStream.writeObject(members); // this actually writes LinkedHashMap.
+  }
 }
diff --git a/gson/src/test/java/com/google/gson/JavaSerializationTest.java b/gson/src/test/java/com/google/gson/JavaSerializationTest.java
index fbaea19d4..3d8d489e5 100644
--- a/gson/src/test/java/com/google/gson/JavaSerializationTest.java
+++ b/gson/src/test/java/com/google/gson/JavaSerializationTest.java
@@ -63,7 +63,7 @@ public void testNumberIsSerializable() throws Exception {
   }
 
   @SuppressWarnings("unchecked") // Serialization promises to return the same type.
-  private <T> T serializedCopy(T object) throws IOException, ClassNotFoundException {
+  public static <T> T serializedCopy(T object) throws IOException, ClassNotFoundException {
     ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
     ObjectOutputStream out = new ObjectOutputStream(bytesOut);
     out.writeObject(object);
diff --git a/gson/src/test/java/com/google/gson/JsonArrayTest.java b/gson/src/test/java/com/google/gson/JsonArrayTest.java
index b77d6f1b4..e4177b364 100644
--- a/gson/src/test/java/com/google/gson/JsonArrayTest.java
+++ b/gson/src/test/java/com/google/gson/JsonArrayTest.java
@@ -20,6 +20,11 @@
 
 import com.google.gson.common.MoreAsserts;
 
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectOutputStream;
+
+import static com.google.gson.JavaSerializationTest.serializedCopy;
+
 /**
  * @author Jesse Wilson
  */
@@ -99,4 +104,29 @@ public void testDeepCopy() {
     assertEquals(1, original.get(0).getAsJsonArray().size());
     assertEquals(0, copy.get(0).getAsJsonArray().size());
   }
+
+  public void testSerialization() throws Exception {
+    assertEquals(new JsonArray(), serializedCopy(new JsonArray()));
+    JsonArray original = new JsonArray();
+    original.add(false);
+    assertEquals(original, serializedCopy(original));
+    original.add('a');
+    assertEquals(original, serializedCopy(original));
+    original.add((String) null);
+    assertEquals(original, serializedCopy(original));
+    original.add("b");
+    assertEquals(original, serializedCopy(original));
+    original.add(20L);
+    assertEquals(original, serializedCopy(original));
+    original.add(20);
+    assertEquals(original, serializedCopy(original));
+    original.add(20f);
+    assertEquals(original, serializedCopy(original));
+    original.add(20d);
+    assertEquals(original, serializedCopy(original));
+    original.add((short) 20);
+    assertEquals(original, serializedCopy(original));
+    original.add((byte) 20);
+    assertEquals(original, serializedCopy(original));
+  }
 }
diff --git a/gson/src/test/java/com/google/gson/JsonNullTest.java b/gson/src/test/java/com/google/gson/JsonNullTest.java
index 6157e3876..8e2e4ef66 100644
--- a/gson/src/test/java/com/google/gson/JsonNullTest.java
+++ b/gson/src/test/java/com/google/gson/JsonNullTest.java
@@ -19,6 +19,11 @@
 import com.google.gson.common.MoreAsserts;
 import junit.framework.TestCase;
 
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectOutputStream;
+
+import static com.google.gson.JavaSerializationTest.serializedCopy;
+
 /**
  * @author Jesse Wilson
  */
@@ -37,4 +42,8 @@ public void testDeepCopy() {
     assertSame(JsonNull.INSTANCE, a.deepCopy());
     assertSame(JsonNull.INSTANCE, JsonNull.INSTANCE.deepCopy());
   }
+
+  public void testSerialization() throws Exception {
+    assertSame(JsonNull.INSTANCE, serializedCopy(JsonNull.INSTANCE));
+  }
 }
diff --git a/gson/src/test/java/com/google/gson/JsonObjectTest.java b/gson/src/test/java/com/google/gson/JsonObjectTest.java
index d071c3baa..d8c09e894 100644
--- a/gson/src/test/java/com/google/gson/JsonObjectTest.java
+++ b/gson/src/test/java/com/google/gson/JsonObjectTest.java
@@ -20,6 +20,8 @@
 
 import junit.framework.TestCase;
 
+import static com.google.gson.JavaSerializationTest.serializedCopy;
+
 /**
  * Unit test for the {@link JsonObject} class.
  *
@@ -198,4 +200,11 @@ public void testKeySet() {
     assertTrue(a.keySet().contains("foo"));
     assertTrue(a.keySet().contains("bar"));
   }
+
+  public void testSerialization() throws Exception {
+    JsonObject a = new JsonObject();
+    a.add("foo", new JsonArray());
+    a.add("bar", new JsonObject());
+    assertEquals(a, serializedCopy(a));
+  }
 }
diff --git a/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java b/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java
index fa3611c93..dda06518e 100644
--- a/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java
+++ b/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java
@@ -23,6 +23,8 @@
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
+import static com.google.gson.JavaSerializationTest.serializedCopy;
+
 /**
  * Unit test for the {@link JsonPrimitive} class.
  *
@@ -244,4 +246,14 @@ public void testDeepCopy() {
     JsonPrimitive a = new JsonPrimitive("a");
     assertSame(a, a.deepCopy()); // Primitives are immutable!
   }
+
+  public void testSerialization() throws Exception {
+    assertEquals(new JsonPrimitive(false), serializedCopy(new JsonPrimitive(false)));
+    assertEquals(new JsonPrimitive("a"), serializedCopy(new JsonPrimitive("a")));
+    assertEquals(new JsonPrimitive(Float.NaN), serializedCopy(new JsonPrimitive(Float.NaN)));
+    assertEquals(new JsonPrimitive(1d), serializedCopy(new JsonPrimitive(1d)));
+    assertEquals(new JsonPrimitive(2f), serializedCopy(new JsonPrimitive(2f)));
+    assertEquals(new JsonPrimitive(3), serializedCopy(new JsonPrimitive(3)));
+    assertEquals(new JsonPrimitive('q'), serializedCopy(new JsonPrimitive('q')));
+  }
 }
