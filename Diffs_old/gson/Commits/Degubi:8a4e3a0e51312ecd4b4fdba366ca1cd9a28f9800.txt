diff --git a/gson/src/main/java/com/google/gson/Gson.java b/gson/src/main/java/com/google/gson/Gson.java
index 1225f8c1d..e6f826565 100644
--- a/gson/src/main/java/com/google/gson/Gson.java
+++ b/gson/src/main/java/com/google/gson/Gson.java
@@ -121,10 +121,8 @@
    * lookup would stack overflow. We cheat by returning a proxy type adapter.
    * The proxy is wired up once the initial adapter has been created.
    */
-  private final ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>> calls
-      = new ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>>();
-
-  private final Map<TypeToken<?>, TypeAdapter<?>> typeTokenCache = new ConcurrentHashMap<TypeToken<?>, TypeAdapter<?>>();
+  private final ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>> calls = new ThreadLocal<>();
+  private final Map<TypeToken<?>, TypeAdapter<?>> typeTokenCache = new ConcurrentHashMap<>();
 
   private final ConstructorConstructor constructorConstructor;
   private final JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;
@@ -218,7 +216,7 @@ public Gson() {
     this.builderFactories = builderFactories;
     this.builderHierarchyFactories = builderHierarchyFactories;
 
-    List<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>();
+    List<TypeAdapterFactory> factories = new ArrayList<>();
 
     // built-in type adapters that cannot be overridden
     factories.add(TypeAdapters.JSON_ELEMENT_FACTORY);
@@ -310,7 +308,7 @@ public boolean htmlSafe() {
     if (serializeSpecialFloatingPointValues) {
       return TypeAdapters.DOUBLE;
     }
-    return new TypeAdapter<Number>() {
+    return new TypeAdapter<>() {
       @Override public Double read(JsonReader in) throws IOException {
         if (in.peek() == JsonToken.NULL) {
           in.nextNull();
@@ -334,7 +332,7 @@ public boolean htmlSafe() {
     if (serializeSpecialFloatingPointValues) {
       return TypeAdapters.FLOAT;
     }
-    return new TypeAdapter<Number>() {
+    return new TypeAdapter<>() {
       @Override public Float read(JsonReader in) throws IOException {
         if (in.peek() == JsonToken.NULL) {
           in.nextNull();
@@ -366,7 +364,7 @@ static void checkValidFloatingPoint(double value) {
     if (longSerializationPolicy == LongSerializationPolicy.DEFAULT) {
       return TypeAdapters.LONG;
     }
-    return new TypeAdapter<Number>() {
+    return new TypeAdapter<>() {
       @Override public Number read(JsonReader in) throws IOException {
         if (in.peek() == JsonToken.NULL) {
           in.nextNull();
@@ -406,7 +404,7 @@ static void checkValidFloatingPoint(double value) {
         out.endArray();
       }
       @Override public AtomicLongArray read(JsonReader in) throws IOException {
-        List<Long> list = new ArrayList<Long>();
+        List<Long> list = new ArrayList<>();
         in.beginArray();
         while (in.hasNext()) {
             long value = longAdapter.read(in).longValue();
@@ -439,7 +437,7 @@ static void checkValidFloatingPoint(double value) {
     Map<TypeToken<?>, FutureTypeAdapter<?>> threadCalls = calls.get();
     boolean requiresThreadLocalCleanup = false;
     if (threadCalls == null) {
-      threadCalls = new HashMap<TypeToken<?>, FutureTypeAdapter<?>>();
+      threadCalls = new HashMap<>();
       calls.set(threadCalls);
       requiresThreadLocalCleanup = true;
     }
@@ -451,7 +449,7 @@ static void checkValidFloatingPoint(double value) {
     }
 
     try {
-      FutureTypeAdapter<T> call = new FutureTypeAdapter<T>();
+      FutureTypeAdapter<T> call = new FutureTypeAdapter<>();
       threadCalls.put(type, call);
 
       for (TypeAdapterFactory factory : factories) {
diff --git a/gson/src/main/java/com/google/gson/GsonBuilder.java b/gson/src/main/java/com/google/gson/GsonBuilder.java
index f2b4dabb5..c92ad653d 100644
--- a/gson/src/main/java/com/google/gson/GsonBuilder.java
+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java
@@ -79,10 +79,10 @@
   private LongSerializationPolicy longSerializationPolicy = LongSerializationPolicy.DEFAULT;
   private FieldNamingStrategy fieldNamingPolicy = FieldNamingStrategy.IDENTITY;
   private final Map<Type, InstanceCreator<?>> instanceCreators
-      = new HashMap<Type, InstanceCreator<?>>();
-  private final List<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>();
+      = new HashMap<>();
+  private final List<TypeAdapterFactory> factories = new ArrayList<>();
   /** tree-style hierarchy factories. These come after factories for backwards compatibility. */
-  private final List<TypeAdapterFactory> hierarchyFactories = new ArrayList<TypeAdapterFactory>();
+  private final List<TypeAdapterFactory> hierarchyFactories = new ArrayList<>();
   private boolean serializeNulls = DEFAULT_SERIALIZE_NULLS;
   private String datePattern;
   private int dateStyle = DateFormat.DEFAULT;
@@ -570,11 +570,11 @@ public GsonBuilder serializeSpecialFloatingPointValues() {
    * @return an instance of Gson configured with the options currently set in this builder
    */
   public Gson create() {
-    List<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>(this.factories.size() + this.hierarchyFactories.size() + 3);
+    List<TypeAdapterFactory> factories = new ArrayList<>(this.factories.size() + this.hierarchyFactories.size() + 3);
     factories.addAll(this.factories);
     Collections.reverse(factories);
 
-    List<TypeAdapterFactory> hierarchyFactories = new ArrayList<TypeAdapterFactory>(this.hierarchyFactories);
+    List<TypeAdapterFactory> hierarchyFactories = new ArrayList<>(this.hierarchyFactories);
     Collections.reverse(hierarchyFactories);
     factories.addAll(hierarchyFactories);
 
diff --git a/gson/src/main/java/com/google/gson/JsonArray.java b/gson/src/main/java/com/google/gson/JsonArray.java
index 819aa4c51..991174d7b 100644
--- a/gson/src/main/java/com/google/gson/JsonArray.java
+++ b/gson/src/main/java/com/google/gson/JsonArray.java
@@ -16,6 +16,9 @@
 
 package com.google.gson;
 
+import com.google.gson.internal.*;
+import com.google.gson.stream.*;
+import java.io.*;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.ArrayList;
@@ -31,322 +34,338 @@
  * @author Joel Leitch
  */
 public final class JsonArray extends JsonElement implements Iterable<JsonElement> {
-  private final List<JsonElement> elements;
+	private final List<JsonElement> elements;
 
-  /**
-   * Creates an empty JsonArray.
-   */
-  public JsonArray() {
-    elements = new ArrayList<JsonElement>();
-  }
-  
-  public JsonArray(int capacity) {
-    elements = new ArrayList<JsonElement>(capacity);
-  }
+	/**
+	 * Creates an empty JsonArray.
+	 */
+	public JsonArray() {
+		elements = new ArrayList<JsonElement>();
+	}
 
-  /**
-   * Creates a deep copy of this element and all its children
-   * @since 2.8.2
-   */
-  @Override
-  public JsonArray deepCopy() {
-    if (!elements.isEmpty()) {
-      JsonArray result = new JsonArray(elements.size());
-      for (JsonElement element : elements) {
-        result.add(element.deepCopy());
-      }
-      return result;
-    }
-    return new JsonArray();
-  }
+	public JsonArray(int capacity) {
+		elements = new ArrayList<JsonElement>(capacity);
+	}
 
-  /**
-   * Adds the specified boolean to self.
-   *
-   * @param bool the boolean that needs to be added to the array.
-   */
-  public void add(Boolean bool) {
-    elements.add(bool == null ? JsonNull.INSTANCE : new JsonPrimitive(bool));
-  }
+	/**
+	 * Creates a deep copy of this element and all its children
+	 * @since 2.8.2
+	 */
+	@Override
+	public JsonArray deepCopy() {
+		if (!elements.isEmpty()) {
+			JsonArray result = new JsonArray(elements.size());
+			for (JsonElement element : elements) {
+				result.add(element.deepCopy());
+			}
+			return result;
+		}
+		return new JsonArray();
+	}
 
-  /**
-   * Adds the specified character to self.
-   *
-   * @param character the character that needs to be added to the array.
-   */
-  public void add(Character character) {
-    elements.add(character == null ? JsonNull.INSTANCE : new JsonPrimitive(character));
-  }
+	/**
+	 * Adds the specified boolean to self.
+	 *
+	 * @param bool the boolean that needs to be added to the array.
+	 */
+	public void add(Boolean bool) {
+		elements.add(bool == null ? JsonNull.INSTANCE : new JsonPrimitive(bool));
+	}
 
-  /**
-   * Adds the specified number to self.
-   *
-   * @param number the number that needs to be added to the array.
-   */
-  public void add(Number number) {
-    elements.add(number == null ? JsonNull.INSTANCE : new JsonPrimitive(number));
-  }
+	/**
+	 * Adds the specified character to self.
+	 *
+	 * @param character the character that needs to be added to the array.
+	 */
+	public void add(Character character) {
+		elements.add(character == null ? JsonNull.INSTANCE : new JsonPrimitive(character));
+	}
 
-  /**
-   * Adds the specified string to self.
-   *
-   * @param string the string that needs to be added to the array.
-   */
-  public void add(String string) {
-    elements.add(string == null ? JsonNull.INSTANCE : new JsonPrimitive(string));
-  }
+	/**
+	 * Adds the specified number to self.
+	 *
+	 * @param number the number that needs to be added to the array.
+	 */
+	public void add(Number number) {
+		elements.add(number == null ? JsonNull.INSTANCE : new JsonPrimitive(number));
+	}
 
-  /**
-   * Adds the specified element to self.
-   *
-   * @param element the element that needs to be added to the array.
-   */
-  public void add(JsonElement element) {
-    if (element == null) {
-      element = JsonNull.INSTANCE;
-    }
-    elements.add(element);
-  }
+	/**
+	 * Adds the specified string to self.
+	 *
+	 * @param string the string that needs to be added to the array.
+	 */
+	public void add(String string) {
+		elements.add(string == null ? JsonNull.INSTANCE : new JsonPrimitive(string));
+	}
 
-  /**
-   * Adds all the elements of the specified array to self.
-   *
-   * @param array the array whose elements need to be added to the array.
-   */
-  public void addAll(JsonArray array) {
-    elements.addAll(array.elements);
-  }
+	/**
+	 * Adds the specified element to self.
+	 *
+	 * @param element the element that needs to be added to the array.
+	 */
+	public void add(JsonElement element) {
+		if (element == null) {
+			element = JsonNull.INSTANCE;
+		}
+		elements.add(element);
+	}
 
-  /**
-   * Replaces the element at the specified position in this array with the specified element.
-   *   Element can be null.
-   * @param index index of the element to replace
-   * @param element element to be stored at the specified position
-   * @return the element previously at the specified position
-   * @throws IndexOutOfBoundsException if the specified index is outside the array bounds
-   */
-  public JsonElement set(int index, JsonElement element) {
-    return elements.set(index, element);
-  }
+	/**
+	 * Adds all the elements of the specified array to self.
+	 *
+	 * @param array the array whose elements need to be added to the array.
+	 */
+	public void addAll(JsonArray array) {
+		elements.addAll(array.elements);
+	}
 
-  /**
-   * Removes the first occurrence of the specified element from this array, if it is present.
-   * If the array does not contain the element, it is unchanged.
-   * @param element element to be removed from this array, if present
-   * @return true if this array contained the specified element, false otherwise
-   * @since 2.3
-   */
-  public boolean remove(JsonElement element) {
-    return elements.remove(element);
-  }
+	/**
+	 * Replaces the element at the specified position in this array with the specified element.
+	 *   Element can be null.
+	 * @param index index of the element to replace
+	 * @param element element to be stored at the specified position
+	 * @return the element previously at the specified position
+	 * @throws IndexOutOfBoundsException if the specified index is outside the array bounds
+	 */
+	public JsonElement set(int index, JsonElement element) {
+		return elements.set(index, element);
+	}
 
-  /**
-   * Removes the element at the specified position in this array. Shifts any subsequent elements
-   * to the left (subtracts one from their indices). Returns the element that was removed from
-   * the array.
-   * @param index index the index of the element to be removed
-   * @return the element previously at the specified position
-   * @throws IndexOutOfBoundsException if the specified index is outside the array bounds
-   * @since 2.3
-   */
-  public JsonElement remove(int index) {
-    return elements.remove(index);
-  }
+	/**
+	 * Removes the first occurrence of the specified element from this array, if it is present.
+	 * If the array does not contain the element, it is unchanged.
+	 * @param element element to be removed from this array, if present
+	 * @return true if this array contained the specified element, false otherwise
+	 * @since 2.3
+	 */
+	public boolean remove(JsonElement element) {
+		return elements.remove(element);
+	}
 
-  /**
-   * Returns true if this array contains the specified element.
-   * @return true if this array contains the specified element.
-   * @param element whose presence in this array is to be tested
-   * @since 2.3
-   */
-  public boolean contains(JsonElement element) {
-    return elements.contains(element);
-  }
+	/**
+	 * Removes the element at the specified position in this array. Shifts any subsequent elements
+	 * to the left (subtracts one from their indices). Returns the element that was removed from
+	 * the array.
+	 * @param index index the index of the element to be removed
+	 * @return the element previously at the specified position
+	 * @throws IndexOutOfBoundsException if the specified index is outside the array bounds
+	 * @since 2.3
+	 */
+	public JsonElement remove(int index) {
+		return elements.remove(index);
+	}
 
-  /**
-   * Returns the number of elements in the array.
-   *
-   * @return the number of elements in the array.
-   */
-  public int size() {
-    return elements.size();
-  }
+	/**
+	 * Returns true if this array contains the specified element.
+	 * @return true if this array contains the specified element.
+	 * @param element whose presence in this array is to be tested
+	 * @since 2.3
+	 */
+	public boolean contains(JsonElement element) {
+		return elements.contains(element);
+	}
 
-  /**
-   * Returns an iterator to navigate the elements of the array. Since the array is an ordered list,
-   * the iterator navigates the elements in the order they were inserted.
-   *
-   * @return an iterator to navigate the elements of the array.
-   */
-  public Iterator<JsonElement> iterator() {
-    return elements.iterator();
-  }
+	/**
+	 * Returns the number of elements in the array.
+	 *
+	 * @return the number of elements in the array.
+	 */
+	public int size() {
+		return elements.size();
+	}
 
-  /**
-   * Returns the ith element of the array.
-   *
-   * @param i the index of the element that is being sought.
-   * @return the element present at the ith index.
-   * @throws IndexOutOfBoundsException if i is negative or greater than or equal to the
-   * {@link #size()} of the array.
-   */
-  public JsonElement get(int i) {
-    return elements.get(i);
-  }
+	/**
+	 * Returns an iterator to navigate the elements of the array. Since the array is an ordered list,
+	 * the iterator navigates the elements in the order they were inserted.
+	 *
+	 * @return an iterator to navigate the elements of the array.
+	 */
+	public Iterator<JsonElement> iterator() {
+		return elements.iterator();
+	}
 
-  /**
-   * convenience method to get this array as a {@link Number} if it contains a single element.
-   *
-   * @return get this element as a number if it is single element array.
-   * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
-   * is not a valid Number.
-   * @throws IllegalStateException if the array has more than one element.
-   */
-  @Override
-  public Number getAsNumber() {
-    if (elements.size() == 1) {
-      return elements.get(0).getAsNumber();
-    }
-    throw new IllegalStateException();
-  }
+	/**
+	 * Returns the ith element of the array.
+	 *
+	 * @param i the index of the element that is being sought.
+	 * @return the element present at the ith index.
+	 * @throws IndexOutOfBoundsException if i is negative or greater than or equal to the
+	 * {@link #size()} of the array.
+	 */
+	public JsonElement get(int i) {
+		return elements.get(i);
+	}
 
-  /**
-   * convenience method to get this array as a {@link String} if it contains a single element.
-   *
-   * @return get this element as a String if it is single element array.
-   * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
-   * is not a valid String.
-   * @throws IllegalStateException if the array has more than one element.
-   */
-  @Override
-  public String getAsString() {
-    if (elements.size() == 1) {
-      return elements.get(0).getAsString();
-    }
-    throw new IllegalStateException();
-  }
+	/**
+	 * convenience method to get this array as a {@link Number} if it contains a single element.
+	 *
+	 * @return get this element as a number if it is single element array.
+	 * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
+	 * is not a valid Number.
+	 * @throws IllegalStateException if the array has more than one element.
+	 */
+	@Override
+	public Number getAsNumber() {
+		if (elements.size() == 1) {
+			return elements.get(0).getAsNumber();
+		}
+		throw new IllegalStateException();
+	}
 
-  /**
-   * convenience method to get this array as a double if it contains a single element.
-   *
-   * @return get this element as a double if it is single element array.
-   * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
-   * is not a valid double.
-   * @throws IllegalStateException if the array has more than one element.
-   */
-  @Override
-  public double getAsDouble() {
-    if (elements.size() == 1) {
-      return elements.get(0).getAsDouble();
-    }
-    throw new IllegalStateException();
-  }
+	/**
+	 * convenience method to get this array as a {@link String} if it contains a single element.
+	 *
+	 * @return get this element as a String if it is single element array.
+	 * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
+	 * is not a valid String.
+	 * @throws IllegalStateException if the array has more than one element.
+	 */
+	@Override
+	public String getAsString() {
+		if (elements.size() == 1) {
+			return elements.get(0).getAsString();
+		}
+		throw new IllegalStateException();
+	}
 
-  /**
-   * convenience method to get this array as a {@link BigDecimal} if it contains a single element.
-   *
-   * @return get this element as a {@link BigDecimal} if it is single element array.
-   * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
-   * @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
-   * @throws IllegalStateException if the array has more than one element.
-   * @since 1.2
-   */
-  @Override
-  public BigDecimal getAsBigDecimal() {
-    if (elements.size() == 1) {
-      return elements.get(0).getAsBigDecimal();
-    }
-    throw new IllegalStateException();
-  }
+	/**
+	 * convenience method to get this array as a double if it contains a single element.
+	 *
+	 * @return get this element as a double if it is single element array.
+	 * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
+	 * is not a valid double.
+	 * @throws IllegalStateException if the array has more than one element.
+	 */
+	@Override
+	public double getAsDouble() {
+		if (elements.size() == 1) {
+			return elements.get(0).getAsDouble();
+		}
+		throw new IllegalStateException();
+	}
 
-  /**
-   * convenience method to get this array as a {@link BigInteger} if it contains a single element.
-   *
-   * @return get this element as a {@link BigInteger} if it is single element array.
-   * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
-   * @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
-   * @throws IllegalStateException if the array has more than one element.
-   * @since 1.2
-   */
-  @Override
-  public BigInteger getAsBigInteger() {
-    if (elements.size() == 1) {
-      return elements.get(0).getAsBigInteger();
-    }
-    throw new IllegalStateException();
-  }
+	/**
+	 * convenience method to get this array as a {@link BigDecimal} if it contains a single element.
+	 *
+	 * @return get this element as a {@link BigDecimal} if it is single element array.
+	 * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
+	 * @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
+	 * @throws IllegalStateException if the array has more than one element.
+	 * @since 1.2
+	 */
+	@Override
+	public BigDecimal getAsBigDecimal() {
+		if (elements.size() == 1) {
+			return elements.get(0).getAsBigDecimal();
+		}
+		throw new IllegalStateException();
+	}
 
-  /**
-   * convenience method to get this array as a float if it contains a single element.
-   *
-   * @return get this element as a float if it is single element array.
-   * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
-   * is not a valid float.
-   * @throws IllegalStateException if the array has more than one element.
-   */
-  @Override
-  public float getAsFloat() {
-    if (elements.size() == 1) {
-      return elements.get(0).getAsFloat();
-    }
-    throw new IllegalStateException();
-  }
+	/**
+	 * convenience method to get this array as a {@link BigInteger} if it contains a single element.
+	 *
+	 * @return get this element as a {@link BigInteger} if it is single element array.
+	 * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
+	 * @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
+	 * @throws IllegalStateException if the array has more than one element.
+	 * @since 1.2
+	 */
+	@Override
+	public BigInteger getAsBigInteger() {
+		if (elements.size() == 1) {
+			return elements.get(0).getAsBigInteger();
+		}
+		throw new IllegalStateException();
+	}
 
-  /**
-   * convenience method to get this array as a long if it contains a single element.
-   *
-   * @return get this element as a long if it is single element array.
-   * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
-   * is not a valid long.
-   * @throws IllegalStateException if the array has more than one element.
-   */
-  @Override
-  public long getAsLong() {
-    if (elements.size() == 1) {
-      return elements.get(0).getAsLong();
-    }
-    throw new IllegalStateException();
-  }
+	/**
+	 * convenience method to get this array as a float if it contains a single element.
+	 *
+	 * @return get this element as a float if it is single element array.
+	 * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
+	 * is not a valid float.
+	 * @throws IllegalStateException if the array has more than one element.
+	 */
+	@Override
+	public float getAsFloat() {
+		if (elements.size() == 1) {
+			return elements.get(0).getAsFloat();
+		}
+		throw new IllegalStateException();
+	}
 
-  /**
-   * convenience method to get this array as an integer if it contains a single element.
-   *
-   * @return get this element as an integer if it is single element array.
-   * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
-   * is not a valid integer.
-   * @throws IllegalStateException if the array has more than one element.
-   */
-  @Override
-  public int getAsInt() {
-    if (elements.size() == 1) {
-      return elements.get(0).getAsInt();
-    }
-    throw new IllegalStateException();
-  }
+	/**
+	 * convenience method to get this array as a long if it contains a single element.
+	 *
+	 * @return get this element as a long if it is single element array.
+	 * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
+	 * is not a valid long.
+	 * @throws IllegalStateException if the array has more than one element.
+	 */
+	@Override
+	public long getAsLong() {
+		if (elements.size() == 1) {
+			return elements.get(0).getAsLong();
+		}
+		throw new IllegalStateException();
+	}
 
-  /**
-   * convenience method to get this array as a boolean if it contains a single element.
-   *
-   * @return get this element as a boolean if it is single element array.
-   * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
-   * is not a valid boolean.
-   * @throws IllegalStateException if the array has more than one element.
-   */
-  @Override
-  public boolean getAsBoolean() {
-    if (elements.size() == 1) {
-      return elements.get(0).getAsBoolean();
-    }
-    throw new IllegalStateException();
-  }
+	/**
+	 * convenience method to get this array as an integer if it contains a single element.
+	 *
+	 * @return get this element as an integer if it is single element array.
+	 * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
+	 * is not a valid integer.
+	 * @throws IllegalStateException if the array has more than one element.
+	 */
+	@Override
+	public int getAsInt() {
+		if (elements.size() == 1) {
+			return elements.get(0).getAsInt();
+		}
+		throw new IllegalStateException();
+	}
 
-  @Override
-  public boolean equals(Object o) {
-    return (o == this) || (o instanceof JsonArray && ((JsonArray) o).elements.equals(elements));
-  }
+	/**
+	 * convenience method to get this array as a boolean if it contains a single element.
+	 *
+	 * @return get this element as a boolean if it is single element array.
+	 * @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
+	 * is not a valid boolean.
+	 * @throws IllegalStateException if the array has more than one element.
+	 */
+	@Override
+	public boolean getAsBoolean() {
+		if (elements.size() == 1) {
+			return elements.get(0).getAsBoolean();
+		}
+		throw new IllegalStateException();
+	}
 
-  @Override
-  public int hashCode() {
-    return elements.hashCode();
-  }
+	@Override
+	public boolean equals(Object o) {
+		return (o == this) || (o instanceof JsonArray && ((JsonArray) o).elements.equals(elements));
+	}
+
+	/**
+	 * Returns a String representation of this element.
+	 */
+	@Override
+	public String toString() {
+		try {
+			StringWriter stringWriter = new StringWriter();
+			JsonWriter jsonWriter = new JsonWriter(stringWriter);
+			jsonWriter.setLenient(true);
+			Streams.write(this, jsonWriter);
+			return stringWriter.toString();
+		} catch (IOException e) {
+			throw new AssertionError(e);
+		}
+	}
+
+	@Override
+	public int hashCode() {
+		return elements.hashCode();
+	}
 }
diff --git a/gson/src/main/java/com/google/gson/JsonElement.java b/gson/src/main/java/com/google/gson/JsonElement.java
index e5d61e7de..0f80d54dd 100644
--- a/gson/src/main/java/com/google/gson/JsonElement.java
+++ b/gson/src/main/java/com/google/gson/JsonElement.java
@@ -16,12 +16,7 @@
 
 package com.google.gson;
 
-import com.google.gson.internal.Streams;
-import com.google.gson.stream.JsonWriter;
-import java.io.IOException;
-import java.io.StringWriter;
-import java.math.BigDecimal;
-import java.math.BigInteger;
+import java.math.*;
 
 /**
  * A class representing an element of Json. It could either be a {@link JsonObject}, a
@@ -31,247 +26,231 @@
  * @author Joel Leitch
  */
 public abstract class JsonElement {
-  /**
-   * Returns a deep copy of this element. Immutable elements like primitives
-   * and nulls are not copied.
-   * @since 2.8.2
-   */
-  public abstract JsonElement deepCopy();
+	/**
+	 * Returns a deep copy of this element. Immutable elements like primitives
+	 * and nulls are not copied.
+	 * @since 2.8.2
+	 */
+	public abstract JsonElement deepCopy();
 
-  /**
-   * provides check for verifying if this element is an array or not.
-   *
-   * @return true if this element is of type {@link JsonArray}, false otherwise.
-   */
-  public boolean isJsonArray() {
-    return this instanceof JsonArray;
-  }
+	/**
+	 * provides check for verifying if this element is an array or not.
+	 *
+	 * @return true if this element is of type {@link JsonArray}, false otherwise.
+	 */
+	public final boolean isJsonArray() {
+		return this instanceof JsonArray;
+	}
 
-  /**
-   * provides check for verifying if this element is a Json object or not.
-   *
-   * @return true if this element is of type {@link JsonObject}, false otherwise.
-   */
-  public boolean isJsonObject() {
-    return this instanceof JsonObject;
-  }
+	/**
+	 * provides check for verifying if this element is a Json object or not.
+	 *
+	 * @return true if this element is of type {@link JsonObject}, false otherwise.
+	 */
+	public final boolean isJsonObject() {
+		return this instanceof JsonObject;
+	}
 
-  /**
-   * provides check for verifying if this element is a primitive or not.
-   *
-   * @return true if this element is of type {@link JsonPrimitive}, false otherwise.
-   */
-  public boolean isJsonPrimitive() {
-    return this instanceof JsonPrimitive;
-  }
+	/**
+	 * provides check for verifying if this element is a primitive or not.
+	 *
+	 * @return true if this element is of type {@link JsonPrimitive}, false otherwise.
+	 */
+	public final boolean isJsonPrimitive() {
+		return this instanceof JsonPrimitive;
+	}
 
-  /**
-   * provides check for verifying if this element represents a null value or not.
-   *
-   * @return true if this element is of type {@link JsonNull}, false otherwise.
-   * @since 1.2
-   */
-  public boolean isJsonNull() {
-    return this instanceof JsonNull;
-  }
+	/**
+	 * provides check for verifying if this element represents a null value or not.
+	 *
+	 * @return true if this element is of type {@link JsonNull}, false otherwise.
+	 * @since 1.2
+	 */
+	public final boolean isJsonNull() {
+		return this == JsonNull.INSTANCE;
+	}
 
-  /**
-   * convenience method to get this element as a {@link JsonObject}. If the element is of some
-   * other type, a {@link IllegalStateException} will result. Hence it is best to use this method
-   * after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
-   * first.
-   *
-   * @return get this element as a {@link JsonObject}.
-   * @throws IllegalStateException if the element is of another type.
-   */
-  public JsonObject getAsJsonObject() {
-    if (isJsonObject()) {
-      return (JsonObject) this;
-    }
-    throw new IllegalStateException("Not a JSON Object: " + this);
-  }
+	/**
+	 * convenience method to get this element as a {@link JsonObject}. If the element is of some
+	 * other type, a {@link IllegalStateException} will result. Hence it is best to use this method
+	 * after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
+	 * first.
+	 *
+	 * @return get this element as a {@link JsonObject}.
+	 * @throws IllegalStateException if the element is of another type.
+	 */
+	public JsonObject getAsJsonObject() {
+		if (isJsonObject()) {
+			return (JsonObject) this;
+		}
+		throw new IllegalStateException("Not a JSON Object: " + this);
+	}
 
-  /**
-   * convenience method to get this element as a {@link JsonArray}. If the element is of some
-   * other type, a {@link IllegalStateException} will result. Hence it is best to use this method
-   * after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
-   * first.
-   *
-   * @return get this element as a {@link JsonArray}.
-   * @throws IllegalStateException if the element is of another type.
-   */
-  public JsonArray getAsJsonArray() {
-    if (isJsonArray()) {
-      return (JsonArray) this;
-    }
-    throw new IllegalStateException("Not a JSON Array: " + this);
-  }
+	/**
+	 * convenience method to get this element as a {@link JsonArray}. If the element is of some
+	 * other type, a {@link IllegalStateException} will result. Hence it is best to use this method
+	 * after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
+	 * first.
+	 *
+	 * @return get this element as a {@link JsonArray}.
+	 * @throws IllegalStateException if the element is of another type.
+	 */
+	public JsonArray getAsJsonArray() {
+		if (isJsonArray()) {
+			return (JsonArray) this;
+		}
+		throw new IllegalStateException("Not a JSON Array: " + this);
+	}
 
-  /**
-   * convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
-   * other type, a {@link IllegalStateException} will result. Hence it is best to use this method
-   * after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
-   * first.
-   *
-   * @return get this element as a {@link JsonPrimitive}.
-   * @throws IllegalStateException if the element is of another type.
-   */
-  public JsonPrimitive getAsJsonPrimitive() {
-    if (isJsonPrimitive()) {
-      return (JsonPrimitive) this;
-    }
-    throw new IllegalStateException("Not a JSON Primitive: " + this);
-  }
+	/**
+	 * convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
+	 * other type, a {@link IllegalStateException} will result. Hence it is best to use this method
+	 * after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
+	 * first.
+	 *
+	 * @return get this element as a {@link JsonPrimitive}.
+	 * @throws IllegalStateException if the element is of another type.
+	 */
+	public JsonPrimitive getAsJsonPrimitive() {
+		if (isJsonPrimitive()) {
+			return (JsonPrimitive) this;
+		}
+		throw new IllegalStateException("Not a JSON Primitive: " + this);
+	}
 
-  /**
-   * convenience method to get this element as a {@link JsonNull}. If the element is of some
-   * other type, a {@link IllegalStateException} will result. Hence it is best to use this method
-   * after ensuring that this element is of the desired type by calling {@link #isJsonNull()}
-   * first.
-   *
-   * @return get this element as a {@link JsonNull}.
-   * @throws IllegalStateException if the element is of another type.
-   * @since 1.2
-   */
-  public JsonNull getAsJsonNull() {
-    if (isJsonNull()) {
-      return (JsonNull) this;
-    }
-    throw new IllegalStateException("Not a JSON Null: " + this);
-  }
+	/**
+	 * convenience method to get this element as a {@link JsonNull}. If the element is of some
+	 * other type, a {@link IllegalStateException} will result. Hence it is best to use this method
+	 * after ensuring that this element is of the desired type by calling {@link #isJsonNull()}
+	 * first.
+	 *
+	 * @return get this element as a {@link JsonNull}.
+	 * @throws IllegalStateException if the element is of another type.
+	 * @since 1.2
+	 */
+	public JsonNull getAsJsonNull() {
+		if (isJsonNull()) {
+			return (JsonNull) this;
+		}
+		throw new IllegalStateException("Not a JSON Null: " + this);
+	}
 
-  /**
-   * convenience method to get this element as a boolean value.
-   *
-   * @return get this element as a primitive boolean value.
-   * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
-   * boolean value.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
-   * more than a single element.
-   */
-  public boolean getAsBoolean() {
-    throw new UnsupportedOperationException(getClass().getSimpleName());
-  }
+	/**
+	 * convenience method to get this element as a boolean value.
+	 *
+	 * @return get this element as a primitive boolean value.
+	 * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
+	 * boolean value.
+	 * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+	 * more than a single element.
+	 */
+	public boolean getAsBoolean() {
+		throw new UnsupportedOperationException(getClass().getSimpleName());
+	}
 
-  /**
-   * convenience method to get this element as a {@link Number}.
-   *
-   * @return get this element as a {@link Number}.
-   * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
-   * number.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
-   * more than a single element.
-   */
-  public Number getAsNumber() {
-    throw new UnsupportedOperationException(getClass().getSimpleName());
-  }
+	/**
+	 * convenience method to get this element as a {@link Number}.
+	 *
+	 * @return get this element as a {@link Number}.
+	 * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
+	 * number.
+	 * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+	 * more than a single element.
+	 */
+	public Number getAsNumber() {
+		throw new UnsupportedOperationException(getClass().getSimpleName());
+	}
 
-  /**
-   * convenience method to get this element as a string value.
-   *
-   * @return get this element as a string value.
-   * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
-   * string value.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
-   * more than a single element.
-   */
-  public String getAsString() {
-    throw new UnsupportedOperationException(getClass().getSimpleName());
-  }
+	/**
+	 * convenience method to get this element as a string value.
+	 *
+	 * @return get this element as a string value.
+	 * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
+	 * string value.
+	 * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+	 * more than a single element.
+	 */
+	public String getAsString() {
+		throw new UnsupportedOperationException(getClass().getSimpleName());
+	}
 
-  /**
-   * convenience method to get this element as a primitive double value.
-   *
-   * @return get this element as a primitive double value.
-   * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
-   * double value.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
-   * more than a single element.
-   */
-  public double getAsDouble() {
-    throw new UnsupportedOperationException(getClass().getSimpleName());
-  }
+	/**
+	 * convenience method to get this element as a primitive double value.
+	 *
+	 * @return get this element as a primitive double value.
+	 * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
+	 * double value.
+	 * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+	 * more than a single element.
+	 */
+	public double getAsDouble() {
+		throw new UnsupportedOperationException(getClass().getSimpleName());
+	}
 
-  /**
-   * convenience method to get this element as a primitive float value.
-   *
-   * @return get this element as a primitive float value.
-   * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
-   * float value.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
-   * more than a single element.
-   */
-  public float getAsFloat() {
-    throw new UnsupportedOperationException(getClass().getSimpleName());
-  }
+	/**
+	 * convenience method to get this element as a primitive float value.
+	 *
+	 * @return get this element as a primitive float value.
+	 * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
+	 * float value.
+	 * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+	 * more than a single element.
+	 */
+	public float getAsFloat() {
+		throw new UnsupportedOperationException(getClass().getSimpleName());
+	}
 
-  /**
-   * convenience method to get this element as a primitive long value.
-   *
-   * @return get this element as a primitive long value.
-   * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
-   * long value.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
-   * more than a single element.
-   */
-  public long getAsLong() {
-    throw new UnsupportedOperationException(getClass().getSimpleName());
-  }
+	/**
+	 * convenience method to get this element as a primitive long value.
+	 *
+	 * @return get this element as a primitive long value.
+	 * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
+	 * long value.
+	 * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+	 * more than a single element.
+	 */
+	public long getAsLong() {
+		throw new UnsupportedOperationException(getClass().getSimpleName());
+	}
 
-  /**
-   * convenience method to get this element as a primitive integer value.
-   *
-   * @return get this element as a primitive integer value.
-   * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
-   * integer value.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
-   * more than a single element.
-   */
-  public int getAsInt() {
-    throw new UnsupportedOperationException(getClass().getSimpleName());
-  }
+	/**
+	 * convenience method to get this element as a primitive integer value.
+	 *
+	 * @return get this element as a primitive integer value.
+	 * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
+	 * integer value.
+	 * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+	 * more than a single element.
+	 */
+	public int getAsInt() {
+		throw new UnsupportedOperationException(getClass().getSimpleName());
+	}
 
-  /**
-   * convenience method to get this element as a {@link BigDecimal}.
-   *
-   * @return get this element as a {@link BigDecimal}.
-   * @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
-   * * @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
-   * more than a single element.
-   * @since 1.2
-   */
-  public BigDecimal getAsBigDecimal() {
-    throw new UnsupportedOperationException(getClass().getSimpleName());
-  }
+	/**
+	 * convenience method to get this element as a {@link BigDecimal}.
+	 *
+	 * @return get this element as a {@link BigDecimal}.
+	 * @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
+	 * * @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
+	 * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+	 * more than a single element.
+	 * @since 1.2
+	 */
+	public BigDecimal getAsBigDecimal() {
+		throw new UnsupportedOperationException(getClass().getSimpleName());
+	}
 
-  /**
-   * convenience method to get this element as a {@link BigInteger}.
-   *
-   * @return get this element as a {@link BigInteger}.
-   * @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
-   * @throws NumberFormatException if the element is not a valid {@link BigInteger}.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
-   * more than a single element.
-   * @since 1.2
-   */
-  public BigInteger getAsBigInteger() {
-    throw new UnsupportedOperationException(getClass().getSimpleName());
-  }
-
-  /**
-   * Returns a String representation of this element.
-   */
-  @Override
-  public String toString() {
-    try {
-      StringWriter stringWriter = new StringWriter();
-      JsonWriter jsonWriter = new JsonWriter(stringWriter);
-      jsonWriter.setLenient(true);
-      Streams.write(this, jsonWriter);
-      return stringWriter.toString();
-    } catch (IOException e) {
-      throw new AssertionError(e);
-    }
-  }
-}
+	/**
+	 * convenience method to get this element as a {@link BigInteger}.
+	 *
+	 * @return get this element as a {@link BigInteger}.
+	 * @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
+	 * @throws NumberFormatException if the element is not a valid {@link BigInteger}.
+	 * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+	 * more than a single element.
+	 * @since 1.2
+	 */
+	public BigInteger getAsBigInteger() {
+		throw new UnsupportedOperationException(getClass().getSimpleName());
+	}
+}
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/JsonObject.java b/gson/src/main/java/com/google/gson/JsonObject.java
index d4feb96e8..cc2138cad 100644
--- a/gson/src/main/java/com/google/gson/JsonObject.java
+++ b/gson/src/main/java/com/google/gson/JsonObject.java
@@ -16,8 +16,9 @@
 
 package com.google.gson;
 
-import com.google.gson.internal.LinkedTreeMap;
-
+import com.google.gson.internal.*;
+import com.google.gson.stream.*;
+import java.io.*;
 import java.util.Map;
 import java.util.Set;
 
@@ -30,176 +31,191 @@
  * @author Joel Leitch
  */
 public final class JsonObject extends JsonElement {
-  private final LinkedTreeMap<String, JsonElement> members =
-      new LinkedTreeMap<String, JsonElement>();
-
-  /**
-   * Creates a deep copy of this element and all its children
-   * @since 2.8.2
-   */
-  @Override
-  public JsonObject deepCopy() {
-    JsonObject result = new JsonObject();
-    for (Map.Entry<String, JsonElement> entry : members.entrySet()) {
-      result.add(entry.getKey(), entry.getValue().deepCopy());
-    }
-    return result;
-  }
-
-  /**
-   * Adds a member, which is a name-value pair, to self. The name must be a String, but the value
-   * can be an arbitrary JsonElement, thereby allowing you to build a full tree of JsonElements
-   * rooted at this node.
-   *
-   * @param property name of the member.
-   * @param value the member object.
-   */
-  public void add(String property, JsonElement value) {
-    members.put(property, value == null ? JsonNull.INSTANCE : value);
-  }
-
-  /**
-   * Removes the {@code property} from this {@link JsonObject}.
-   *
-   * @param property name of the member that should be removed.
-   * @return the {@link JsonElement} object that is being removed.
-   * @since 1.3
-   */
-  public JsonElement remove(String property) {
-    return members.remove(property);
-  }
-
-  /**
-   * Convenience method to add a primitive member. The specified value is converted to a
-   * JsonPrimitive of String.
-   *
-   * @param property name of the member.
-   * @param value the string value associated with the member.
-   */
-  public void addProperty(String property, String value) {
-    add(property, value == null ? JsonNull.INSTANCE : new JsonPrimitive(value));
-  }
-
-  /**
-   * Convenience method to add a primitive member. The specified value is converted to a
-   * JsonPrimitive of Number.
-   *
-   * @param property name of the member.
-   * @param value the number value associated with the member.
-   */
-  public void addProperty(String property, Number value) {
-    add(property, value == null ? JsonNull.INSTANCE : new JsonPrimitive(value));
-  }
-
-  /**
-   * Convenience method to add a boolean member. The specified value is converted to a
-   * JsonPrimitive of Boolean.
-   *
-   * @param property name of the member.
-   * @param value the number value associated with the member.
-   */
-  public void addProperty(String property, Boolean value) {
-    add(property, value == null ? JsonNull.INSTANCE : new JsonPrimitive(value));
-  }
-
-  /**
-   * Convenience method to add a char member. The specified value is converted to a
-   * JsonPrimitive of Character.
-   *
-   * @param property name of the member.
-   * @param value the number value associated with the member.
-   */
-  public void addProperty(String property, Character value) {
-    add(property, value == null ? JsonNull.INSTANCE : new JsonPrimitive(value));
-  }
-
-  /**
-   * Returns a set of members of this object. The set is ordered, and the order is in which the
-   * elements were added.
-   *
-   * @return a set of members of this object.
-   */
-  public Set<Map.Entry<String, JsonElement>> entrySet() {
-    return members.entrySet();
-  }
-
-  /**
-   * Returns a set of members key values.
-   *
-   * @return a set of member keys as Strings
-   * @since 2.8.1
-   */
-  public Set<String> keySet() {
-    return members.keySet();
-  }
-
-  /**
-   * Returns the number of key/value pairs in the object.
-   *
-   * @return the number of key/value pairs in the object.
-   */
-  public int size() {
-    return members.size();
-  }
-
-  /**
-   * Convenience method to check if a member with the specified name is present in this object.
-   *
-   * @param memberName name of the member that is being checked for presence.
-   * @return true if there is a member with the specified name, false otherwise.
-   */
-  public boolean has(String memberName) {
-    return members.containsKey(memberName);
-  }
-
-  /**
-   * Returns the member with the specified name.
-   *
-   * @param memberName name of the member that is being requested.
-   * @return the member matching the name. Null if no such member exists.
-   */
-  public JsonElement get(String memberName) {
-    return members.get(memberName);
-  }
-
-  /**
-   * Convenience method to get the specified member as a JsonPrimitive element.
-   *
-   * @param memberName name of the member being requested.
-   * @return the JsonPrimitive corresponding to the specified member.
-   */
-  public JsonPrimitive getAsJsonPrimitive(String memberName) {
-    return (JsonPrimitive) members.get(memberName);
-  }
-
-  /**
-   * Convenience method to get the specified member as a JsonArray.
-   *
-   * @param memberName name of the member being requested.
-   * @return the JsonArray corresponding to the specified member.
-   */
-  public JsonArray getAsJsonArray(String memberName) {
-    return (JsonArray) members.get(memberName);
-  }
-
-  /**
-   * Convenience method to get the specified member as a JsonObject.
-   *
-   * @param memberName name of the member being requested.
-   * @return the JsonObject corresponding to the specified member.
-   */
-  public JsonObject getAsJsonObject(String memberName) {
-    return (JsonObject) members.get(memberName);
-  }
-
-  @Override
-  public boolean equals(Object o) {
-    return (o == this) || (o instanceof JsonObject
-        && ((JsonObject) o).members.equals(members));
-  }
-
-  @Override
-  public int hashCode() {
-    return members.hashCode();
-  }
+	private final LinkedTreeMap<String, JsonElement> members = new LinkedTreeMap<>();
+
+	/**
+	 * Creates a deep copy of this element and all its children
+	 * @since 2.8.2
+	 */
+	@Override
+	public JsonObject deepCopy() {
+		JsonObject result = new JsonObject();
+		for (Map.Entry<String, JsonElement> entry : members.entrySet()) {
+			result.add(entry.getKey(), entry.getValue().deepCopy());
+		}
+		return result;
+	}
+
+	/**
+	 * Adds a member, which is a name-value pair, to self. The name must be a String, but the value
+	 * can be an arbitrary JsonElement, thereby allowing you to build a full tree of JsonElements
+	 * rooted at this node.
+	 *
+	 * @param property name of the member.
+	 * @param value the member object.
+	 */
+	public void add(String property, JsonElement value) {
+		members.put(property, value == null ? JsonNull.INSTANCE : value);
+	}
+
+	/**
+	 * Removes the {@code property} from this {@link JsonObject}.
+	 *
+	 * @param property name of the member that should be removed.
+	 * @return the {@link JsonElement} object that is being removed.
+	 * @since 1.3
+	 */
+	public JsonElement remove(String property) {
+		return members.remove(property);
+	}
+
+	/**
+	 * Convenience method to add a primitive member. The specified value is converted to a
+	 * JsonPrimitive of String.
+	 *
+	 * @param property name of the member.
+	 * @param value the string value associated with the member.
+	 */
+	public void addProperty(String property, String value) {
+		add(property, value == null ? JsonNull.INSTANCE : new JsonPrimitive(value));
+	}
+
+	/**
+	 * Convenience method to add a primitive member. The specified value is converted to a
+	 * JsonPrimitive of Number.
+	 *
+	 * @param property name of the member.
+	 * @param value the number value associated with the member.
+	 */
+	public void addProperty(String property, Number value) {
+		add(property, value == null ? JsonNull.INSTANCE : new JsonPrimitive(value));
+	}
+
+	/**
+	 * Convenience method to add a boolean member. The specified value is converted to a
+	 * JsonPrimitive of Boolean.
+	 *
+	 * @param property name of the member.
+	 * @param value the number value associated with the member.
+	 */
+	public void addProperty(String property, Boolean value) {
+		add(property, value == null ? JsonNull.INSTANCE : new JsonPrimitive(value));
+	}
+
+	/**
+	 * Convenience method to add a char member. The specified value is converted to a
+	 * JsonPrimitive of Character.
+	 *
+	 * @param property name of the member.
+	 * @param value the number value associated with the member.
+	 */
+	public void addProperty(String property, Character value) {
+		add(property, value == null ? JsonNull.INSTANCE : new JsonPrimitive(value));
+	}
+
+	/**
+	 * Returns a set of members of this object. The set is ordered, and the order is in which the
+	 * elements were added.
+	 *
+	 * @return a set of members of this object.
+	 */
+	public Set<Map.Entry<String, JsonElement>> entrySet() {
+		return members.entrySet();
+	}
+
+	/**
+	 * Returns a set of members key values.
+	 *
+	 * @return a set of member keys as Strings
+	 * @since 2.8.1
+	 */
+	public Set<String> keySet() {
+		return members.keySet();
+	}
+
+	/**
+	 * Returns the number of key/value pairs in the object.
+	 *
+	 * @return the number of key/value pairs in the object.
+	 */
+	public int size() {
+		return members.size();
+	}
+
+	/**
+	 * Convenience method to check if a member with the specified name is present in this object.
+	 *
+	 * @param memberName name of the member that is being checked for presence.
+	 * @return true if there is a member with the specified name, false otherwise.
+	 */
+	public boolean has(String memberName) {
+		return members.containsKey(memberName);
+	}
+
+	/**
+	 * Returns the member with the specified name.
+	 *
+	 * @param memberName name of the member that is being requested.
+	 * @return the member matching the name. Null if no such member exists.
+	 */
+	public JsonElement get(String memberName) {
+		return members.get(memberName);
+	}
+
+	/**
+	 * Convenience method to get the specified member as a JsonPrimitive element.
+	 *
+	 * @param memberName name of the member being requested.
+	 * @return the JsonPrimitive corresponding to the specified member.
+	 */
+	public JsonPrimitive getAsJsonPrimitive(String memberName) {
+		return (JsonPrimitive) members.get(memberName);
+	}
+
+	/**
+	 * Convenience method to get the specified member as a JsonArray.
+	 *
+	 * @param memberName name of the member being requested.
+	 * @return the JsonArray corresponding to the specified member.
+	 */
+	public JsonArray getAsJsonArray(String memberName) {
+		return (JsonArray) members.get(memberName);
+	}
+
+	/**
+	 * Convenience method to get the specified member as a JsonObject.
+	 *
+	 * @param memberName name of the member being requested.
+	 * @return the JsonObject corresponding to the specified member.
+	 */
+	public JsonObject getAsJsonObject(String memberName) {
+		return (JsonObject) members.get(memberName);
+	}
+
+	/**
+	 * Returns a String representation of this element.
+	 */
+	@Override
+	public String toString() {
+		try {
+			StringWriter stringWriter = new StringWriter();
+			JsonWriter jsonWriter = new JsonWriter(stringWriter);
+			jsonWriter.setLenient(true);
+			Streams.write(this, jsonWriter);
+			return stringWriter.toString();
+		} catch (IOException e) {
+			throw new AssertionError(e);
+		}
+	}
+
+	@Override
+	public boolean equals(Object o) {
+		return (o == this) || (o instanceof JsonObject
+				&& ((JsonObject) o).members.equals(members));
+	}
+
+	@Override
+	public int hashCode() {
+		return members.hashCode();
+	}
 }
diff --git a/gson/src/main/java/com/google/gson/JsonPrimitive.java b/gson/src/main/java/com/google/gson/JsonPrimitive.java
index 3cb80981b..35b5e610e 100644
--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java
+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java
@@ -16,10 +16,12 @@
 
 package com.google.gson;
 
+import com.google.gson.internal.*;
+import com.google.gson.stream.*;
+import java.io.*;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.*;
-import com.google.gson.internal.LazilyParsedNumber;
 
 /**
  * A class representing a Json primitive value. A primitive value
@@ -232,6 +234,22 @@ public int hashCode() {
 		return value.hashCode();
 	}
 
+	/**
+	 * Returns a String representation of this element.
+	 */
+	@Override
+	public String toString() {
+		try {
+			StringWriter stringWriter = new StringWriter();
+			JsonWriter jsonWriter = new JsonWriter(stringWriter);
+			jsonWriter.setLenient(true);
+			Streams.write(this, jsonWriter);
+			return stringWriter.toString();
+		} catch (IOException e) {
+			throw new AssertionError(e);
+		}
+	}
+	
 	@Override
 	public boolean equals(Object obj) {
 		if (this == obj) {
diff --git a/gson/src/main/java/com/google/gson/JsonStreamParser.java b/gson/src/main/java/com/google/gson/JsonStreamParser.java
index 1c0c9b9d6..f398a445b 100644
--- a/gson/src/main/java/com/google/gson/JsonStreamParser.java
+++ b/gson/src/main/java/com/google/gson/JsonStreamParser.java
@@ -19,9 +19,8 @@
 import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
-import java.util.Iterator;
-import java.util.NoSuchElementException;
-
+import java.util.*;
+import java.util.stream.*;
 import com.google.gson.internal.Streams;
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonToken;
@@ -50,73 +49,68 @@
  * @since 1.4
  */
 public final class JsonStreamParser implements Iterator<JsonElement> {
-  private final JsonReader parser;
-  private final Object lock;
+	private final JsonReader parser;
+	private final Object lock;
+
+	/**
+	 * @param json The string containing JSON elements concatenated to each other.
+	 * @since 1.4
+	 */
+	public JsonStreamParser(String json) {
+		this(new StringReader(json));      
+	}
+
+	/**
+	 * @param reader The data stream containing JSON elements concatenated to each other.
+	 * @since 1.4
+	 */
+	public JsonStreamParser(Reader reader) {
+		parser = new JsonReader(reader);
+		parser.setLenient(true);
+		lock = new Object();
+	}
+	
+	public static Stream<JsonElement> fromString(String json){
+		return StreamSupport.stream(Spliterators.spliteratorUnknownSize(new JsonStreamParser(json), Spliterator.ORDERED), false);
+	}
 
-  /**
-   * @param json The string containing JSON elements concatenated to each other.
-   * @since 1.4
-   */
-  public JsonStreamParser(String json) {
-    this(new StringReader(json));      
-  }
-  
-  /**
-   * @param reader The data stream containing JSON elements concatenated to each other.
-   * @since 1.4
-   */
-  public JsonStreamParser(Reader reader) {
-    parser = new JsonReader(reader);
-    parser.setLenient(true);
-    lock = new Object();
-  }
-  
-  /**
-   * Returns the next available {@link JsonElement} on the reader. Null if none available.
-   * 
-   * @return the next available {@link JsonElement} on the reader. Null if none available.
-   * @throws JsonParseException if the incoming stream is malformed JSON.
-   * @since 1.4
-   */
-  public JsonElement next() throws JsonParseException {
-    if (!hasNext()) {
-      throw new NoSuchElementException();
-    }
-    
-    try {
-      return Streams.parse(parser);
-    } catch (StackOverflowError e) {
-      throw new JsonParseException("Failed parsing JSON source to Json", e);
-    } catch (OutOfMemoryError e) {
-      throw new JsonParseException("Failed parsing JSON source to Json", e);
-    } catch (JsonParseException e) {
-      throw e.getCause() instanceof EOFException ? new NoSuchElementException() : e;
-    }
-  }
+	/**
+	 * Returns the next available {@link JsonElement} on the reader. Null if none available.
+	 * 
+	 * @return the next available {@link JsonElement} on the reader. Null if none available.
+	 * @throws JsonParseException if the incoming stream is malformed JSON.
+	 * @since 1.4
+	 */
+	public JsonElement next() throws JsonParseException {
+		if (!hasNext()) {
+			throw new NoSuchElementException();
+		}
 
-  /**
-   * Returns true if a {@link JsonElement} is available on the input for consumption
-   * @return true if a {@link JsonElement} is available on the input, false otherwise
-   * @since 1.4
-   */
-  public boolean hasNext() {
-    synchronized (lock) {
-      try {
-        return parser.peek() != JsonToken.END_DOCUMENT;
-      } catch (MalformedJsonException e) {
-        throw new JsonSyntaxException(e);
-      } catch (IOException e) {
-        throw new JsonIOException(e);
-      }
-    }
-  }
+		try {
+			return Streams.parse(parser);
+		} catch (StackOverflowError e) {
+			throw new JsonParseException("Failed parsing JSON source to Json", e);
+		} catch (OutOfMemoryError e) {
+			throw new JsonParseException("Failed parsing JSON source to Json", e);
+		} catch (JsonParseException e) {
+			throw e.getCause() instanceof EOFException ? new NoSuchElementException() : e;
+		}
+	}
 
-  /**
-   * This optional {@link Iterator} method is not relevant for stream parsing and hence is not
-   * implemented.
-   * @since 1.4
-   */
-  public void remove() {
-    throw new UnsupportedOperationException();
-  }
-}
+	/**
+	 * Returns true if a {@link JsonElement} is available on the input for consumption
+	 * @return true if a {@link JsonElement} is available on the input, false otherwise
+	 * @since 1.4
+	 */
+	public boolean hasNext() {
+		synchronized (lock) {
+			try {
+				return parser.peek() != JsonToken.END_DOCUMENT;
+			} catch (MalformedJsonException e) {
+				throw new JsonSyntaxException(e);
+			} catch (IOException e) {
+				throw new JsonIOException(e);
+			}
+		}
+	}
+}
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
index 56101706b..04bc47bb7 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
@@ -55,8 +55,7 @@
   private final TypeAdapter<E> componentTypeAdapter;
 
   public ArrayTypeAdapter(Gson context, TypeAdapter<E> componentTypeAdapter, Class<E> componentType) {
-    this.componentTypeAdapter =
-      new TypeAdapterRuntimeTypeWrapper<E>(context, componentTypeAdapter, componentType);
+    this.componentTypeAdapter = new TypeAdapterRuntimeTypeWrapper<>(context, componentTypeAdapter, componentType);
     this.componentType = componentType;
   }
 
@@ -66,7 +65,7 @@ public ArrayTypeAdapter(Gson context, TypeAdapter<E> componentTypeAdapter, Class
       return null;
     }
 
-    List<E> list = new ArrayList<E>();
+    List<E> list = new ArrayList<>();
     in.beginArray();
     while (in.hasNext()) {
       E instance = componentTypeAdapter.read(in);
diff --git a/gson/src/main/java/com/google/gson/reflect/TypeToken.java b/gson/src/main/java/com/google/gson/reflect/TypeToken.java
index 7bdb06c41..80f708733 100644
--- a/gson/src/main/java/com/google/gson/reflect/TypeToken.java
+++ b/gson/src/main/java/com/google/gson/reflect/TypeToken.java
@@ -113,14 +113,14 @@ public final Type getType() {
    * Gets type literal for the given {@code Type} instance.
    */
   public static TypeToken<?> get(Type type) {
-    return new TypeToken<Object>(type);
+    return new TypeToken<>(type);
   }
 
   /**
    * Gets type literal for the given {@code Class} instance.
    */
   public static <T> TypeToken<T> get(Class<T> type) {
-    return new TypeToken<T>(type);
+    return new TypeToken<>(type);
   }
 
   /**
@@ -128,13 +128,13 @@ public final Type getType() {
    * {@code rawType}.
    */
   public static TypeToken<?> getParameterized(Type rawType, Type... typeArguments) {
-    return new TypeToken<Object>($Gson$Types.newParameterizedTypeWithOwner(null, rawType, typeArguments));
+    return new TypeToken<>($Gson$Types.newParameterizedTypeWithOwner(null, rawType, typeArguments));
   }
 
   /**
    * Gets type literal for the array type whose elements are all instances of {@code componentType}.
    */
   public static TypeToken<?> getArray(Type componentType) {
-    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));
+    return new TypeToken<>($Gson$Types.arrayOf(componentType));
   }
 }
