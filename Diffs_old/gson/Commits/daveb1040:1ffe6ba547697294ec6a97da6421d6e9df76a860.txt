diff --git a/gson/pom.xml b/gson/pom.xml
index 5bbad6e4d..42c2afd70 100644
--- a/gson/pom.xml
+++ b/gson/pom.xml
@@ -57,7 +57,12 @@
       <version>4.12</version>
       <scope>test</scope>
     </dependency>
-
+    <dependency>
+      <groupId>pl.pragmatists</groupId>
+      <artifactId>JUnitParams</artifactId>
+      <version>1.0.4</version>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
   <profiles>
     <!-- Activate PGP signing only when performing a release -->
diff --git a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java b/gson/src/main/java/com/google/gson/FieldNamingPolicy.java
index 02defc136..41a9c85b5 100644
--- a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java
+++ b/gson/src/main/java/com/google/gson/FieldNamingPolicy.java
@@ -20,10 +20,11 @@
 import java.util.Locale;
 
 /**
- * An enumeration that defines a few standard naming conventions for JSON field names.
- * This enumeration should be used in conjunction with {@link com.google.gson.GsonBuilder}
- * to configure a {@link com.google.gson.Gson} instance to properly translate Java field
- * names into the desired JSON field names.
+ * An enumeration that defines a few standard naming conventions for JSON field
+ * names. This enumeration should be used in conjunction with
+ * {@link com.google.gson.GsonBuilder} to configure a
+ * {@link com.google.gson.Gson} instance to properly translate Java field names
+ * into the desired JSON field names.
  *
  * @author Inderjeet Singh
  * @author Joel Leitch
@@ -35,84 +36,100 @@
    * unchanged.
    */
   IDENTITY() {
-    @Override public String translateName(Field f) {
+    @Override
+    public String translateName(Field f) {
       return f.getName();
     }
   },
 
   /**
-   * Using this naming policy with Gson will ensure that the first "letter" of the Java
-   * field name is capitalized when serialized to its JSON form.
+   * Using this naming policy with Gson will ensure that the first "letter" of
+   * the Java field name is capitalized when serialized to its JSON form.
    *
-   * <p>Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":</p>
+   * <p>
+   * Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":
+   * </p>
    * <ul>
-   *   <li>someFieldName ---> SomeFieldName</li>
-   *   <li>_someFieldName ---> _SomeFieldName</li>
+   * <li>someFieldName ---> SomeFieldName</li>
+   * <li>_someFieldName ---> _SomeFieldName</li>
    * </ul>
    */
   UPPER_CAMEL_CASE() {
-    @Override public String translateName(Field f) {
+    @Override
+    public String translateName(Field f) {
       return upperCaseFirstLetter(f.getName());
     }
   },
 
- 
   /**
-   * Using this naming policy with Gson will ensure that the first "letter" of the Java
-   * field name is capitalized when serialized to its JSON form and the words will be
-   * separated by a space.
+   * Using this naming policy with Gson will ensure that the first "letter" of
+   * the Java field name is capitalized when serialized to its JSON form and the
+   * words will be separated by a space.
    *
-   * <p>Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":</p>
+   * <p>
+   * Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":
+   * </p>
    * <ul>
-   *   <li>someFieldName ---> Some Field Name</li>
-   *   <li>_someFieldName ---> _Some Field Name</li>
+   * <li>someFieldName ---> Some Field Name</li>
+   * <li>_someFieldName ---> _Some Field Name</li>
    * </ul>
    *
    * @since 1.4
    */
   UPPER_CAMEL_CASE_WITH_SPACES() {
-    @Override public String translateName(Field f) {
+    @Override
+    public String translateName(Field f) {
       return upperCaseFirstLetter(separateCamelCase(f.getName(), " "));
     }
   },
 
   /**
-   * Using this naming policy with Gson will modify the Java Field name from its camel cased
-   * form to a lower case field name where each word is separated by an underscore (_).
+   * Using this naming policy with Gson will modify the Java Field name from its
+   * camel cased form to a lower case field name where each word is separated by
+   * an underscore (_).
    *
-   * <p>Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":</p>
+   * <p>
+   * Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":
+   * </p>
    * <ul>
-   *   <li>someFieldName ---> some_field_name</li>
-   *   <li>_someFieldName ---> _some_field_name</li>
-   *   <li>aStringField ---> a_string_field</li>
-   *   <li>aURL ---> a_u_r_l</li>
+   * <li>someFieldName ---> some_field_name</li>
+   * <li>_someFieldName ---> _some_field_name</li>
+   * <li>aStringField ---> a_string_field</li>
+   * <li>aURL ---> a_u_r_l</li>
    * </ul>
    */
   LOWER_CASE_WITH_UNDERSCORES() {
-    @Override public String translateName(Field f) {
+    @Override
+    public String translateName(Field f) {
       return separateCamelCase(f.getName(), "_").toLowerCase(Locale.ENGLISH);
     }
   },
 
   /**
-   * Using this naming policy with Gson will modify the Java Field name from its camel cased
-   * form to a lower case field name where each word is separated by a dash (-).
+   * Using this naming policy with Gson will modify the Java Field name from its
+   * camel cased form to a lower case field name where each word is separated by
+   * a dash (-).
    *
-   * <p>Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":</p>
+   * <p>
+   * Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":
+   * </p>
    * <ul>
-   *   <li>someFieldName ---> some-field-name</li>
-   *   <li>_someFieldName ---> _some-field-name</li>
-   *   <li>aStringField ---> a-string-field</li>
-   *   <li>aURL ---> a-u-r-l</li>
+   * <li>someFieldName ---> some-field-name</li>
+   * <li>_someFieldName ---> _some-field-name</li>
+   * <li>aStringField ---> a-string-field</li>
+   * <li>aURL ---> a-u-r-l</li>
    * </ul>
-   * Using dashes in JavaScript is not recommended since dash is also used for a minus sign in
-   * expressions. This requires that a field named with dashes is always accessed as a quoted
-   * property like {@code myobject['my-field']}. Accessing it as an object field
-   * {@code myobject.my-field} will result in an unintended javascript expression.
+   * Using dashes in JavaScript is not recommended since dash is also used for a
+   * minus sign in expressions. This requires that a field named with dashes is
+   * always accessed as a quoted property like {@code myobject['my-field']}.
+   * Accessing it as an object field {@code myobject.my-field} will result in an
+   * unintended javascript expression.
+   * 
    * @since 1.4
    */
   LOWER_CASE_WITH_DASHES() {
-    @Override public String translateName(Field f) {
+    @Override
+    public String translateName(Field f) {
       return separateCamelCase(f.getName(), "-").toLowerCase(Locale.ENGLISH);
     }
   };
@@ -160,7 +177,6 @@ static String upperCaseFirstLetter(String name) {
 
   private static String modifyString(char firstCharacter, String srcString, int indexOfSubstring) {
     return (indexOfSubstring < srcString.length())
-        ? firstCharacter + srcString.substring(indexOfSubstring)
-        : String.valueOf(firstCharacter);
+        ? firstCharacter + srcString.substring(indexOfSubstring) : String.valueOf(firstCharacter);
   }
 }
diff --git a/gson/src/test/java/com/google/gson/FieldNamingPolicyTest.java b/gson/src/test/java/com/google/gson/FieldNamingPolicyTest.java
index cb4c48aac..cbe039bb9 100644
--- a/gson/src/test/java/com/google/gson/FieldNamingPolicyTest.java
+++ b/gson/src/test/java/com/google/gson/FieldNamingPolicyTest.java
@@ -1,78 +1,60 @@
+/*
+ * Copyright (C) 2016 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 package com.google.gson;
 
 import org.junit.Test;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.runner.RunWith;
 
 import static org.junit.Assert.assertEquals;
 
-public class FieldNamingPolicyTest {
-	
-
-	@Test
-	public void testUpperCaseFirstLetterNonUpperCaseLetter() {
-		verifyUpperCaseFirstLetter("someFieldName", "SomeFieldName");
-	}
-	
-	@Test
-	public void testUpperCaseFirstLetterWithUpperCaseLetter() {
-		verifyUpperCaseFirstLetter("SomeFieldName", "SomeFieldName");
-	}
-	
-	@Test
-	public void testUpperCaseFirstLetterWithUnderscoreAndNonUpperCaseLetter() {
-		verifyUpperCaseFirstLetter("_someFieldName", "_SomeFieldName");
-	}
-	
-	@Test
-	public void testUpperCaseFirstLetterWithUnderScoreAndWithUpperCaseLetter() {
-		verifyUpperCaseFirstLetter("_SomeFieldName", "_SomeFieldName");
-	}
-	
-	@Test
-	public void testUpperCaseFirstLetterWithUnderscoreAndNumberAndNonUpperCaseLetter() {
-		verifyUpperCaseFirstLetter("_999someFieldName", "_999SomeFieldName");
-	}
-	
-	@Test
-	public void testUpperCaseFirstLetterWithUnderScoreAndNumberWithUpperCaseLetter() {
-		verifyUpperCaseFirstLetter("_333SomeFieldName", "_333SomeFieldName");
-	}
-
-	@Test
-	public void testUpperCaseFirstLetter1LowercaseLetter() {
-		verifyUpperCaseFirstLetter("x", "X");
-	}
-
-	@Test
-	public void testUpperCaseFirstLetter1UppercaseLetter() {
-		verifyUpperCaseFirstLetter("X", "X");
-	}
+import junitparams.JUnitParamsRunner;
+import junitparams.Parameters;
 
-	@Test
-	public void testUpperCaseFirstAllNumbers() {
-		verifyUpperCaseFirstLetter("555", "555");
-	}
-
-	@Test
-	public void testUpperCaseFirstJustUnderscore() {
-		verifyUpperCaseFirstLetter("_", "_");
-	}
-
-	@Test
-	public void testUpperCaseBlank() {
-		verifyUpperCaseFirstLetter(" ", " ");
-	}
-
-	/**
-	 * Verifies the upperCaseFirstLetter is working as expected
-	 * @param fieldName
-	 * @param expectedFieldName
-	 */
-	private void verifyUpperCaseFirstLetter(String fieldName, String expectedFieldName) {		
-		String actualFieldName = FieldNamingPolicy.upperCaseFirstLetter(fieldName);
-		assertEquals("Verify fieldName was uppercased properly", expectedFieldName, actualFieldName);
-	}
-	
+/**
+ * Unit test for the {@link FieldNamingPolicy} class
+ * 
+ * @author David Betancourt
+ *
+ */
+@RunWith(JUnitParamsRunner.class)
+public class FieldNamingPolicyTest {
 
+  private Object[] getUpperCaseFirstLetterParams() {
+    return new Object[] { getUpperCaseFirstLetterParamArgs("someFieldName", "SomeFieldName"),
+        getUpperCaseFirstLetterParamArgs("SomeFieldName", "SomeFieldName"),
+        getUpperCaseFirstLetterParamArgs("_someFieldName", "_SomeFieldName"),
+        getUpperCaseFirstLetterParamArgs("_SomeFieldName", "_SomeFieldName"),
+        getUpperCaseFirstLetterParamArgs("_999someFieldName", "_999SomeFieldName"),
+        getUpperCaseFirstLetterParamArgs("_999SomeFieldName", "_999SomeFieldName"),
+        getUpperCaseFirstLetterParamArgs("x", "X"), getUpperCaseFirstLetterParamArgs("X", "X"),
+        getUpperCaseFirstLetterParamArgs("555", "555"),
+        getUpperCaseFirstLetterParamArgs("_", "_") };
+
+  }
+
+  private Object[] getUpperCaseFirstLetterParamArgs(String fieldName, String expectedFieldName) {
+    return new Object[] { fieldName, expectedFieldName };
+  }
+
+  @Test
+  @Parameters(method = "getUpperCaseFirstLetterParams")
+  public void testUpperCaseFieldLetter(String fieldName, String expectedFieldName) {
+    String actualFieldName = FieldNamingPolicy.upperCaseFirstLetter(fieldName);
+    assertEquals("Verify '" + fieldName + "' was uppercased properly", expectedFieldName,
+        actualFieldName);
+  }
 }
-
