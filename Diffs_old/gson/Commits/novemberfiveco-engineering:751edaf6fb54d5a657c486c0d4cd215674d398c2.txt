diff --git a/gson/src/main/java/com/google/gson/annotations/IngoreOnParseFailure.java b/gson/src/main/java/com/google/gson/annotations/IngoreOnParseFailure.java
new file mode 100644
index 000000000..b844d0b10
--- /dev/null
+++ b/gson/src/main/java/com/google/gson/annotations/IngoreOnParseFailure.java
@@ -0,0 +1,22 @@
+package com.google.gson.annotations;/*
+ * This file is part of gson-parent.
+ * 
+ * Created by christophesmet on 25/10/2016
+ * 
+ * (c) 2016 November Five BVBA
+ * 
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+import java.lang.annotation.*;
+
+/**
+ * An annotiation that indicates this member will be parsed as null when the field is invalid or a parse error happens.
+ */
+
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target({ElementType.FIELD})
+public @interface IngoreOnParseFailure {
+}
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
index 34e97664e..49725d00f 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -21,6 +21,7 @@
 import com.google.gson.JsonSyntaxException;
 import com.google.gson.TypeAdapter;
 import com.google.gson.TypeAdapterFactory;
+import com.google.gson.annotations.IngoreOnParseFailure;
 import com.google.gson.annotations.JsonAdapter;
 import com.google.gson.annotations.SerializedName;
 import com.google.gson.internal.$Gson$Types;
@@ -32,6 +33,7 @@
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonToken;
 import com.google.gson.stream.JsonWriter;
+
 import java.io.IOException;
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
@@ -45,208 +47,235 @@
  * Type adapter that reflects over the fields and methods of a class.
  */
 public final class ReflectiveTypeAdapterFactory implements TypeAdapterFactory {
-  private final ConstructorConstructor constructorConstructor;
-  private final FieldNamingStrategy fieldNamingPolicy;
-  private final Excluder excluder;
-  private final JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;
-
-  public ReflectiveTypeAdapterFactory(ConstructorConstructor constructorConstructor,
-      FieldNamingStrategy fieldNamingPolicy, Excluder excluder,
-      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory) {
-    this.constructorConstructor = constructorConstructor;
-    this.fieldNamingPolicy = fieldNamingPolicy;
-    this.excluder = excluder;
-    this.jsonAdapterFactory = jsonAdapterFactory;
-  }
-
-  public boolean excludeField(Field f, boolean serialize) {
-    return excludeField(f, serialize, excluder);
-  }
-
-  static boolean excludeField(Field f, boolean serialize, Excluder excluder) {
-    return !excluder.excludeClass(f.getType(), serialize) && !excluder.excludeField(f, serialize);
-  }
-
-  /** first element holds the default name */
-  private List<String> getFieldNames(Field f) {
-    SerializedName annotation = f.getAnnotation(SerializedName.class);
-    if (annotation == null) {
-      String name = fieldNamingPolicy.translateName(f);
-      return Collections.singletonList(name);
+    private final ConstructorConstructor constructorConstructor;
+    private final FieldNamingStrategy fieldNamingPolicy;
+    private final Excluder excluder;
+    private final JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;
+
+    public ReflectiveTypeAdapterFactory(ConstructorConstructor constructorConstructor,
+                                        FieldNamingStrategy fieldNamingPolicy, Excluder excluder,
+                                        JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory) {
+        this.constructorConstructor = constructorConstructor;
+        this.fieldNamingPolicy = fieldNamingPolicy;
+        this.excluder = excluder;
+        this.jsonAdapterFactory = jsonAdapterFactory;
     }
 
-    String serializedName = annotation.value();
-    String[] alternates = annotation.alternate();
-    if (alternates.length == 0) {
-      return Collections.singletonList(serializedName);
+    public boolean excludeField(Field f, boolean serialize) {
+        return excludeField(f, serialize, excluder);
     }
 
-    List<String> fieldNames = new ArrayList<String>(alternates.length + 1);
-    fieldNames.add(serializedName);
-    for (String alternate : alternates) {
-      fieldNames.add(alternate);
+    static boolean excludeField(Field f, boolean serialize, Excluder excluder) {
+        return !excluder.excludeClass(f.getType(), serialize) && !excluder.excludeField(f, serialize);
     }
-    return fieldNames;
-  }
 
-  @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
-    Class<? super T> raw = type.getRawType();
+    /**
+     * first element holds the default name
+     */
+    private List<String> getFieldNames(Field f) {
+        SerializedName annotation = f.getAnnotation(SerializedName.class);
+        if (annotation == null) {
+            String name = fieldNamingPolicy.translateName(f);
+            return Collections.singletonList(name);
+        }
 
-    if (!Object.class.isAssignableFrom(raw)) {
-      return null; // it's a primitive!
-    }
+        String serializedName = annotation.value();
+        String[] alternates = annotation.alternate();
+        if (alternates.length == 0) {
+            return Collections.singletonList(serializedName);
+        }
 
-    ObjectConstructor<T> constructor = constructorConstructor.get(type);
-    return new Adapter<T>(constructor, getBoundFields(gson, type, raw));
-  }
-
-  private ReflectiveTypeAdapterFactory.BoundField createBoundField(
-      final Gson context, final Field field, final String name,
-      final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
-    final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
-    JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
-    TypeAdapter<?> mapped = null;
-    if (annotation != null) {
-      mapped = jsonAdapterFactory.getTypeAdapter(
-          constructorConstructor, context, fieldType, annotation);
+        List<String> fieldNames = new ArrayList<String>(alternates.length + 1);
+        fieldNames.add(serializedName);
+        for (String alternate : alternates) {
+            fieldNames.add(alternate);
+        }
+        return fieldNames;
     }
-    final boolean jsonAdapterPresent = mapped != null;
-    if (mapped == null) mapped = context.getAdapter(fieldType);
-
-    final TypeAdapter<?> typeAdapter = mapped;
-    return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
-      @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
-      @Override void write(JsonWriter writer, Object value)
-          throws IOException, IllegalAccessException {
-        Object fieldValue = field.get(value);
-        TypeAdapter t = jsonAdapterPresent ? typeAdapter
-            : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
-        t.write(writer, fieldValue);
-      }
-      @Override void read(JsonReader reader, Object value)
-          throws IOException, IllegalAccessException {
-        Object fieldValue = typeAdapter.read(reader);
-        if (fieldValue != null || !isPrimitive) {
-          field.set(value, fieldValue);
+
+    @Override
+    public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
+        Class<? super T> raw = type.getRawType();
+
+        if (!Object.class.isAssignableFrom(raw)) {
+            return null; // it's a primitive!
         }
-      }
-      @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
-        if (!serialized) return false;
-        Object fieldValue = field.get(value);
-        return fieldValue != value; // avoid recursion for example for Throwable.cause
-      }
-    };
-  }
-
-  private Map<String, BoundField> getBoundFields(Gson context, TypeToken<?> type, Class<?> raw) {
-    Map<String, BoundField> result = new LinkedHashMap<String, BoundField>();
-    if (raw.isInterface()) {
-      return result;
+
+        ObjectConstructor<T> constructor = constructorConstructor.get(type);
+        return new Adapter<T>(constructor, getBoundFields(gson, type, raw));
     }
 
-    Type declaredType = type.getType();
-    while (raw != Object.class) {
-      Field[] fields = raw.getDeclaredFields();
-      for (Field field : fields) {
-        boolean serialize = excludeField(field, true);
-        boolean deserialize = excludeField(field, false);
-        if (!serialize && !deserialize) {
-          continue;
+    private ReflectiveTypeAdapterFactory.BoundField createBoundField(
+            final Gson context, final Field field, final String name,
+            final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
+        final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
+        // special casing primitives here saves ~5% on Android...
+        JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
+        TypeAdapter<?> mapped = null;
+        if (annotation != null) {
+            mapped = jsonAdapterFactory.getTypeAdapter(
+                    constructorConstructor, context, fieldType, annotation);
         }
-        field.setAccessible(true);
-        Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());
-        List<String> fieldNames = getFieldNames(field);
-        BoundField previous = null;
-        for (int i = 0; i < fieldNames.size(); ++i) {
-          String name = fieldNames.get(i);
-          if (i != 0) serialize = false; // only serialize the default name
-          BoundField boundField = createBoundField(context, field, name,
-              TypeToken.get(fieldType), serialize, deserialize);
-          BoundField replaced = result.put(name, boundField);
-          if (previous == null) previous = replaced;
+        final boolean jsonAdapterPresent = mapped != null;
+        if (mapped == null) mapped = context.getAdapter(fieldType);
+
+        final TypeAdapter<?> typeAdapter = mapped;
+        return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
+            @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
+            @Override
+            void write(JsonWriter writer, Object value)
+                    throws IOException, IllegalAccessException {
+                Object fieldValue = field.get(value);
+                TypeAdapter t = jsonAdapterPresent ? typeAdapter
+                        : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+                t.write(writer, fieldValue);
+            }
+
+            @Override
+            void read(JsonReader reader, Object value)
+                    throws IOException, IllegalAccessException {
+                //If its annotated with parse to null, we should add someone who handles incorrect parsing.
+                //He can in the future become smarter with extra lookups etc.
+                //This isn't expandable. The Excluder is a good example.
+                Object fieldValue = null;
+                if (field.getAnnotation(IngoreOnParseFailure.class) != null) {
+                    try {
+                        fieldValue = typeAdapter.read(reader);
+                    } catch (IllegalStateException ignored) {
+                        //Skip this field
+                        reader.skipValue();
+                        return;
+                    }
+                } else {
+                    fieldValue = typeAdapter.read(reader);
+                }
+                if (fieldValue != null || !isPrimitive) {
+                    field.set(value, fieldValue);
+                }
+            }
+
+            @Override
+            public boolean writeField(Object value) throws IOException, IllegalAccessException {
+                if (!serialized) return false;
+                Object fieldValue = field.get(value);
+                return fieldValue != value; // avoid recursion for example for Throwable.cause
+            }
+        };
+    }
+
+    private Map<String, BoundField> getBoundFields(Gson context, TypeToken<?> type, Class<?> raw) {
+        Map<String, BoundField> result = new LinkedHashMap<String, BoundField>();
+        if (raw.isInterface()) {
+            return result;
         }
-        if (previous != null) {
-          throw new IllegalArgumentException(declaredType
-              + " declares multiple JSON fields named " + previous.name);
+
+        Type declaredType = type.getType();
+        while (raw != Object.class) {
+            Field[] fields = raw.getDeclaredFields();
+            for (Field field : fields) {
+                boolean serialize = excludeField(field, true);
+                boolean deserialize = excludeField(field, false);
+                if (!serialize && !deserialize) {
+                    continue;
+                }
+                field.setAccessible(true);
+                Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());
+                List<String> fieldNames = getFieldNames(field);
+                BoundField previous = null;
+                for (int i = 0; i < fieldNames.size(); ++i) {
+                    String name = fieldNames.get(i);
+                    if (i != 0) serialize = false; // only serialize the default name
+                    BoundField boundField = createBoundField(context, field, name,
+                            TypeToken.get(fieldType), serialize, deserialize);
+                    BoundField replaced = result.put(name, boundField);
+                    if (previous == null) previous = replaced;
+                }
+                if (previous != null) {
+                    throw new IllegalArgumentException(declaredType
+                            + " declares multiple JSON fields named " + previous.name);
+                }
+            }
+            type = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));
+            raw = type.getRawType();
         }
-      }
-      type = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));
-      raw = type.getRawType();
-    }
-    return result;
-  }
-
-  static abstract class BoundField {
-    final String name;
-    final boolean serialized;
-    final boolean deserialized;
-
-    protected BoundField(String name, boolean serialized, boolean deserialized) {
-      this.name = name;
-      this.serialized = serialized;
-      this.deserialized = deserialized;
-    }
-    abstract boolean writeField(Object value) throws IOException, IllegalAccessException;
-    abstract void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException;
-    abstract void read(JsonReader reader, Object value) throws IOException, IllegalAccessException;
-  }
-
-  public static final class Adapter<T> extends TypeAdapter<T> {
-    private final ObjectConstructor<T> constructor;
-    private final Map<String, BoundField> boundFields;
-
-    Adapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundFields) {
-      this.constructor = constructor;
-      this.boundFields = boundFields;
+        return result;
     }
 
-    @Override public T read(JsonReader in) throws IOException {
-      if (in.peek() == JsonToken.NULL) {
-        in.nextNull();
-        return null;
-      }
-
-      T instance = constructor.construct();
-
-      try {
-        in.beginObject();
-        while (in.hasNext()) {
-          String name = in.nextName();
-          BoundField field = boundFields.get(name);
-          if (field == null || !field.deserialized) {
-            in.skipValue();
-          } else {
-            field.read(in, instance);
-          }
+    static abstract class BoundField {
+        final String name;
+        final boolean serialized;
+        final boolean deserialized;
+
+        protected BoundField(String name, boolean serialized, boolean deserialized) {
+            this.name = name;
+            this.serialized = serialized;
+            this.deserialized = deserialized;
         }
-      } catch (IllegalStateException e) {
-        throw new JsonSyntaxException(e);
-      } catch (IllegalAccessException e) {
-        throw new AssertionError(e);
-      }
-      in.endObject();
-      return instance;
+
+        abstract boolean writeField(Object value) throws IOException, IllegalAccessException;
+
+        abstract void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException;
+
+        abstract void read(JsonReader reader, Object value) throws IOException, IllegalAccessException;
     }
 
-    @Override public void write(JsonWriter out, T value) throws IOException {
-      if (value == null) {
-        out.nullValue();
-        return;
-      }
-
-      out.beginObject();
-      try {
-        for (BoundField boundField : boundFields.values()) {
-          if (boundField.writeField(value)) {
-            out.name(boundField.name);
-            boundField.write(out, value);
-          }
+    public static final class Adapter<T> extends TypeAdapter<T> {
+        private final ObjectConstructor<T> constructor;
+        private final Map<String, BoundField> boundFields;
+
+        Adapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundFields) {
+            this.constructor = constructor;
+            this.boundFields = boundFields;
+        }
+
+        @Override
+        public T read(JsonReader in) throws IOException {
+            if (in.peek() == JsonToken.NULL) {
+                in.nextNull();
+                return null;
+            }
+
+            T instance = constructor.construct();
+
+            try {
+                in.beginObject();
+                while (in.hasNext()) {
+                    String name = in.nextName();
+                    BoundField field = boundFields.get(name);
+                    if (field == null || !field.deserialized) {
+                        in.skipValue();
+                    } else {
+                        field.read(in, instance);
+                    }
+                }
+            } catch (IllegalStateException e) {
+                throw new JsonSyntaxException(e);
+            } catch (IllegalAccessException e) {
+                throw new AssertionError(e);
+            }
+            in.endObject();
+            return instance;
+        }
+
+        @Override
+        public void write(JsonWriter out, T value) throws IOException {
+            if (value == null) {
+                out.nullValue();
+                return;
+            }
+
+            out.beginObject();
+            try {
+                for (BoundField boundField : boundFields.values()) {
+                    if (boundField.writeField(value)) {
+                        out.name(boundField.name);
+                        boundField.write(out, value);
+                    }
+                }
+            } catch (IllegalAccessException e) {
+                throw new AssertionError(e);
+            }
+            out.endObject();
         }
-      } catch (IllegalAccessException e) {
-        throw new AssertionError(e);
-      }
-      out.endObject();
     }
-  }
 }
diff --git a/gson/src/test/java/com/google/gson/AllowInvalidTypeParseTest.java b/gson/src/test/java/com/google/gson/AllowInvalidTypeParseTest.java
new file mode 100644
index 000000000..e049101e6
--- /dev/null
+++ b/gson/src/test/java/com/google/gson/AllowInvalidTypeParseTest.java
@@ -0,0 +1,69 @@
+package com.google.gson;
+
+import com.google.gson.annotations.IngoreOnParseFailure;
+import com.google.gson.annotations.Expose;
+import com.google.gson.reflect.TypeToken;
+import junit.framework.TestCase;
+
+import java.util.List;
+
+/*
+ * This file is part of gson-parent.
+ * 
+ * Created by christophesmet on 25/10/2016
+ * 
+ * (c) 2016 November Five BVBA
+ * 
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+public class AllowInvalidTypeParseTest extends TestCase {
+
+    private Gson gson;
+
+    private static final String VALID_JSON = "[\n" +
+            "{\n" +
+            "    \"id\": \"256968069936000\",\n" +
+            "    \"title\": \"Cordon afl.8 \",\n" +
+            "    \"duration\": \"3350\"\n" +
+            "}\n" +
+            "]";
+
+    private static final String INVALID_JSON = "[\n" +
+            "{\n" +
+            "    \"id\": \"256968069936000\",\n" +
+            "    \"title\": \"Cordon afl.8 \",\n" +
+            "    \"duration\": {\n" +
+            "        \"value\": 3350,\n" +
+            "        \"formatted\": \"55:50\"\n" +
+            "    }\n" +
+            "}\n" +
+            "]";
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        gson = new GsonBuilder()
+                .create();
+    }
+
+    public void testValidJson() {
+        List<Content> parsedValue = gson.fromJson(VALID_JSON, new TypeToken<List<Content>>(){}.getType());
+        assertNotNull(parsedValue);
+    }
+
+    public void testInvalidJson() {
+        List<Content> parsedValue = gson.fromJson(INVALID_JSON, new TypeToken<List<Content>>(){}.getType());
+        assertNotNull(parsedValue);
+    }
+
+    class Content {
+        @Expose
+        public String id;
+        @Expose
+        public String title;
+        @Expose
+        @IngoreOnParseFailure
+        public String duration;
+    }
+}
\ No newline at end of file
