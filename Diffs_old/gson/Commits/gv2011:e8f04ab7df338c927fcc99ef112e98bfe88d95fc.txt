diff --git a/api/src/main/java/com/github/gv2011/jsoncore/JsonFactory.java b/api/src/main/java/com/github/gv2011/jsoncore/JsonFactory.java
index d97048034..aa0041921 100644
--- a/api/src/main/java/com/github/gv2011/jsoncore/JsonFactory.java
+++ b/api/src/main/java/com/github/gv2011/jsoncore/JsonFactory.java
@@ -1,12 +1,13 @@
 package com.github.gv2011.jsoncore;
 
 import java.io.Reader;
+import java.io.Writer;
 
 public interface JsonFactory {
 
   JsonParser newJsonParser(Reader reader, JsonOption... jsonOptions);
 
-  JsonSerializer newJsonSerializer(Reader reader, JsonOption... jsonOptions);
+  JsonSerializer newJsonSerializer(Writer out, JsonOption... jsonOptions);
 
   <T> JsonEncoder<T> newJsonEncoder(Class<T> primitive, JsonOption... jsonOptions);
 
diff --git a/api/src/main/java/com/github/gv2011/jsoncore/JsonSerializer.java b/api/src/main/java/com/github/gv2011/jsoncore/JsonSerializer.java
index e81a4bb73..76aa37239 100644
--- a/api/src/main/java/com/github/gv2011/jsoncore/JsonSerializer.java
+++ b/api/src/main/java/com/github/gv2011/jsoncore/JsonSerializer.java
@@ -172,15 +172,6 @@
    */
   public JsonSerializer value(final String value);
 
-  /**
-   * Writes {@code value} directly to the writer without quoting or
-   * escaping.
-   *
-   * @param value the literal string value, or null to encode a null literal.
-   * @return this writer.
-   */
-  public JsonSerializer jsonValue(final String value);
-
 
   /**
    * Encodes {@code null}.
diff --git a/imp/src/main/java/com/github/gv2011/jsoncore/imp/AbstractJsonEncoder.java b/imp/src/main/java/com/github/gv2011/jsoncore/imp/AbstractJsonEncoder.java
new file mode 100644
index 000000000..b11098b5f
--- /dev/null
+++ b/imp/src/main/java/com/github/gv2011/jsoncore/imp/AbstractJsonEncoder.java
@@ -0,0 +1,29 @@
+package com.github.gv2011.jsoncore.imp;
+
+import static com.github.gv2011.util.ex.Exceptions.run;
+
+import java.io.StringWriter;
+
+import com.github.gv2011.jsoncore.JsonEncoder;
+
+abstract class AbstractJsonEncoder<T> implements JsonEncoder<T>{
+
+
+  protected AbstractJsonEncoder() {}
+
+  @Override
+  public final String encode(final T value) {
+    final StringWriter w = new StringWriter();
+    encode(value, w);
+    return w.toString();
+  }
+
+  protected final void write(final Appendable out, final String str) {
+    run(()->out.append(str));
+  }
+
+  protected final void write(final Appendable out, final String cbuf, final int off, final int len) {
+    run(()->out.append(cbuf, off, off+len));
+  }
+
+}
diff --git a/imp/src/main/java/com/github/gv2011/jsoncore/imp/JsonFactoryImp.java b/imp/src/main/java/com/github/gv2011/jsoncore/imp/JsonFactoryImp.java
index 70875c758..33c18f724 100644
--- a/imp/src/main/java/com/github/gv2011/jsoncore/imp/JsonFactoryImp.java
+++ b/imp/src/main/java/com/github/gv2011/jsoncore/imp/JsonFactoryImp.java
@@ -1,6 +1,8 @@
 package com.github.gv2011.jsoncore.imp;
 
 import java.io.Reader;
+import java.io.Writer;
+import java.util.Arrays;
 
 import com.github.gv2011.jsoncore.JsonEncoder;
 import com.github.gv2011.jsoncore.JsonFactory;
@@ -10,21 +12,33 @@
 
 public class JsonFactoryImp implements JsonFactory{
 
+
   @Override
   public JsonParser newJsonParser(final Reader reader, final JsonOption... jsonOptions) {
-    return new JsonReader(reader);
+    return new JsonReader(reader, jsonOptions);
   }
 
+
   @Override
-  public JsonSerializer newJsonSerializer(final Reader reader, final JsonOption... jsonOptions) {
-    // TODO Auto-generated method stub
-    return null;
+  public JsonSerializer newJsonSerializer(final Writer out, final JsonOption... jsonOptions) {
+    return new JsonWriter(out, this, jsonOptions);
   }
 
+
+  @SuppressWarnings("unchecked")
   @Override
   public <T> JsonEncoder<T> newJsonEncoder(final Class<T> primitive, final JsonOption... jsonOptions) {
-    // TODO Auto-generated method stub
-    return null;
+    JsonEncoder<T> encoder;
+    if(primitive.equals(String.class)){
+      encoder = (JsonEncoder<T>)
+        new JsonStringEncoder(Arrays.asList(jsonOptions).contains(JsonOption.HTML_SAFE))
+      ;
+    }
+    else if(primitive.equals(Long.class)||primitive.equals(long.class)){
+      encoder = new ToStringEncoder<T>();
+    }
+    else throw new UnsupportedOperationException(primitive.getName());
+    return encoder;
   }
 
 }
diff --git a/imp/src/main/java/com/github/gv2011/jsoncore/imp/JsonStringEncoder.java b/imp/src/main/java/com/github/gv2011/jsoncore/imp/JsonStringEncoder.java
index 0fd51eb48..b5d7e21a8 100644
--- a/imp/src/main/java/com/github/gv2011/jsoncore/imp/JsonStringEncoder.java
+++ b/imp/src/main/java/com/github/gv2011/jsoncore/imp/JsonStringEncoder.java
@@ -1,12 +1,6 @@
 package com.github.gv2011.jsoncore.imp;
 
-import static com.github.gv2011.util.ex.Exceptions.run;
-
-import java.io.StringWriter;
-
-import com.github.gv2011.jsoncore.JsonEncoder;
-
-class JsonStringEncoder implements JsonEncoder<String>{
+class JsonStringEncoder extends AbstractJsonEncoder<String>{
 
     /*
    * From RFC 7159, "All Unicode characters may be placed within the
@@ -51,13 +45,6 @@
     this.htmlSafe = htmlSafe;
   }
 
-  @Override
-  public String encode(final String value) {
-    final StringWriter w = new StringWriter();
-    encode(value, w);
-    return w.toString();
-  }
-
   @Override
   public void encode(final String value, final Appendable out) {
     final String[] replacements = htmlSafe ? HTML_SAFE_REPLACEMENT_CHARS : REPLACEMENT_CHARS;
@@ -91,12 +78,4 @@ public void encode(final String value, final Appendable out) {
     write(out, "\"");
   }
 
-  private void write(final Appendable out, final String str) {
-    run(()->out.append(str));
-  }
-
-  private void write(final Appendable out, final String cbuf, final int off, final int len) {
-    run(()->out.append(cbuf, off, off+len));
-  }
-
 }
diff --git a/imp/src/main/java/com/github/gv2011/jsoncore/imp/JsonWriter.java b/imp/src/main/java/com/github/gv2011/jsoncore/imp/JsonWriter.java
index 1c60ed6c0..29ff9a6b6 100644
--- a/imp/src/main/java/com/github/gv2011/jsoncore/imp/JsonWriter.java
+++ b/imp/src/main/java/com/github/gv2011/jsoncore/imp/JsonWriter.java
@@ -34,6 +34,7 @@
 import java.util.Set;
 
 import com.github.gv2011.jsoncore.JsonEncoder;
+import com.github.gv2011.jsoncore.JsonFactory;
 import com.github.gv2011.jsoncore.JsonOption;
 import com.github.gv2011.jsoncore.JsonSerializer;
 
@@ -71,19 +72,21 @@
   private final Set<JsonOption> optList;
 
   private final JsonEncoder<String> stringEncoder;
+  private final JsonEncoder<Long> longEncoder;
 
   /**
    * Creates a new instance that writes a JSON-encoded stream to {@code out}.
    * For best performance, ensure {@link Writer} is buffered; wrapping in
    * {@link java.io.BufferedWriter BufferedWriter} if necessary.
    */
-  public JsonWriter(final Writer out, final JsonOption... options) {
+  public JsonWriter(final Writer out, final JsonFactory factory, final JsonOption... options) {
     this.out = out;
     optList = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(options)));
     lenient = optList.contains(JsonOption.LENIENT);
     htmlSafe = optList.contains(JsonOption.HTML_SAFE);
     serializeNulls = !optList.contains(JsonOption.OMIT_NULLS);
-    stringEncoder = new JsonStringEncoder(htmlSafe);
+    stringEncoder = factory.newJsonEncoder(String.class, options);
+    longEncoder = factory.newJsonEncoder(Long.class, options);
   }
 
   /**
@@ -322,7 +325,6 @@ public JsonWriter value(final String value){
    * @param value the literal string value, or null to encode a null literal.
    * @return this writer.
    */
-  @Override
   public JsonWriter jsonValue(final String value){
     if (value == null) {
       return nullValue();
@@ -413,7 +415,7 @@ public JsonWriter value(final double value){
   public JsonWriter value(final long value){
     writeDeferredName();
     beforeValue();
-    write(Long.toString(value));
+    longEncoder.encode(value, out);
     return this;
   }
 
diff --git a/imp/src/main/java/com/github/gv2011/jsoncore/imp/ToStringEncoder.java b/imp/src/main/java/com/github/gv2011/jsoncore/imp/ToStringEncoder.java
new file mode 100644
index 000000000..068c21f5d
--- /dev/null
+++ b/imp/src/main/java/com/github/gv2011/jsoncore/imp/ToStringEncoder.java
@@ -0,0 +1,10 @@
+package com.github.gv2011.jsoncore.imp;
+
+public class ToStringEncoder<T> extends AbstractJsonEncoder<T>{
+
+  @Override
+  public void encode(final T value, final Appendable out) {
+    write(out, value.toString());
+  }
+
+}
diff --git a/imp/src/main/java/com/github/gv2011/jsoncore/imp/VisibleForTesting.java b/imp/src/main/java/com/github/gv2011/jsoncore/imp/VisibleForTesting.java
new file mode 100644
index 000000000..57c892b66
--- /dev/null
+++ b/imp/src/main/java/com/github/gv2011/jsoncore/imp/VisibleForTesting.java
@@ -0,0 +1,5 @@
+package com.github.gv2011.jsoncore.imp;
+
+public @interface VisibleForTesting {
+
+}
diff --git a/imp/src/test/java/com/github/gv2011/jsoncore/imp/JsonWriterTest.java b/imp/src/test/java/com/github/gv2011/jsoncore/imp/JsonWriterTest.java
index bea9169f1..815ac0fe8 100644
--- a/imp/src/test/java/com/github/gv2011/jsoncore/imp/JsonWriterTest.java
+++ b/imp/src/test/java/com/github/gv2011/jsoncore/imp/JsonWriterTest.java
@@ -19,43 +19,50 @@
 
 import java.io.IOException;
 import java.io.StringWriter;
+import java.io.Writer;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
+import com.github.gv2011.jsoncore.JsonFactory;
 import com.github.gv2011.jsoncore.JsonOption;
 
 import junit.framework.TestCase;
 
-@SuppressWarnings("resource")
 public final class JsonWriterTest extends TestCase {
 
+  private final JsonFactory factory = new JsonFactoryImp();
+
+  private JsonWriter newJsonWriter(final Writer w, final JsonOption... jsonOptions){
+    return new JsonWriter(w, factory, jsonOptions);
+  }
+
   public void testTopLevelValueTypes() throws IOException {
     final StringWriter string1 = new StringWriter();
-    final JsonWriter writer1 = new JsonWriter(string1);
+    final JsonWriter writer1 = newJsonWriter(string1);
     writer1.value(true);
     writer1.close();
     assertEquals("true", string1.toString());
 
     final StringWriter string2 = new StringWriter();
-    final JsonWriter writer2 = new JsonWriter(string2);
+    final JsonWriter writer2 = newJsonWriter(string2);
     writer2.nullValue();
     writer2.close();
     assertEquals("null", string2.toString());
 
     final StringWriter string3 = new StringWriter();
-    final JsonWriter writer3 = new JsonWriter(string3);
+    final JsonWriter writer3 = newJsonWriter(string3);
     writer3.value(123);
     writer3.close();
     assertEquals("123", string3.toString());
 
     final StringWriter string4 = new StringWriter();
-    final JsonWriter writer4 = new JsonWriter(string4);
+    final JsonWriter writer4 = newJsonWriter(string4);
     writer4.value(123.4);
     writer4.close();
     assertEquals("123.4", string4.toString());
 
     final StringWriter string5 = new StringWriter();
-    final JsonWriter writert = new JsonWriter(string5);
+    final JsonWriter writert = newJsonWriter(string5);
     writert.value("a");
     writert.close();
     assertEquals("\"a\"", string5.toString());
@@ -63,7 +70,7 @@ public void testTopLevelValueTypes() throws IOException {
 
   public void testInvalidTopLevelTypes() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.name("hello");
     try {
       jsonWriter.value("world");
@@ -74,7 +81,7 @@ public void testInvalidTopLevelTypes() throws IOException {
 
   public void testTwoNames() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginObject();
     jsonWriter.name("a");
     try {
@@ -86,7 +93,7 @@ public void testTwoNames() throws IOException {
 
   public void testNameWithoutValue() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginObject();
     jsonWriter.name("a");
     try {
@@ -98,7 +105,7 @@ public void testNameWithoutValue() throws IOException {
 
   public void testValueWithoutName() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginObject();
     try {
       jsonWriter.value(true);
@@ -109,7 +116,7 @@ public void testValueWithoutName() throws IOException {
 
   public void testMultipleTopLevelValues() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginArray().endArray();
     try {
       jsonWriter.beginArray();
@@ -120,7 +127,7 @@ public void testMultipleTopLevelValues() throws IOException {
 
   public void testBadNestingObject() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginArray();
     jsonWriter.beginObject();
     try {
@@ -132,7 +139,7 @@ public void testBadNestingObject() throws IOException {
 
   public void testBadNestingArray() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginArray();
     jsonWriter.beginArray();
     try {
@@ -144,7 +151,7 @@ public void testBadNestingArray() throws IOException {
 
   public void testNullName() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginObject();
     try {
       jsonWriter.name(null);
@@ -155,7 +162,7 @@ public void testNullName() throws IOException {
 
   public void testNullStringValue() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginObject();
     jsonWriter.name("a");
     jsonWriter.value((String) null);
@@ -165,7 +172,7 @@ public void testNullStringValue() throws IOException {
 
   public void testJsonValue() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginObject();
     jsonWriter.name("a");
     jsonWriter.jsonValue("{\"b\":true}");
@@ -177,7 +184,7 @@ public void testJsonValue() throws IOException {
 
   public void testNonFiniteDoubles() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginArray();
     try {
       jsonWriter.value(Double.NaN);
@@ -198,7 +205,7 @@ public void testNonFiniteDoubles() throws IOException {
 
   public void testNonFiniteBoxedDoubles() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginArray();
     try {
       jsonWriter.value(new Double(Double.NaN));
@@ -219,7 +226,7 @@ public void testNonFiniteBoxedDoubles() throws IOException {
 
   public void testDoubles() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginArray();
     jsonWriter.value(-0.0);
     jsonWriter.value(1.0);
@@ -245,7 +252,7 @@ public void testDoubles() throws IOException {
 
   public void testLongs() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginArray();
     jsonWriter.value(0);
     jsonWriter.value(1);
@@ -263,7 +270,7 @@ public void testLongs() throws IOException {
 
   public void testNumbers() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginArray();
     jsonWriter.value(new BigInteger("0"));
     jsonWriter.value(new BigInteger("9223372036854775808"));
@@ -279,7 +286,7 @@ public void testNumbers() throws IOException {
 
   public void testBooleans() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginArray();
     jsonWriter.value(true);
     jsonWriter.value(false);
@@ -289,7 +296,7 @@ public void testBooleans() throws IOException {
 
   public void testBoxedBooleans() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginArray();
     jsonWriter.value((Boolean) true);
     jsonWriter.value((Boolean) false);
@@ -300,7 +307,7 @@ public void testBoxedBooleans() throws IOException {
 
   public void testNulls() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginArray();
     jsonWriter.nullValue();
     jsonWriter.endArray();
@@ -309,7 +316,7 @@ public void testNulls() throws IOException {
 
   public void testStrings() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginArray();
     jsonWriter.value("a");
     jsonWriter.value("a\"");
@@ -352,7 +359,7 @@ public void testStrings() throws IOException {
 
   public void testUnicodeLineBreaksEscaped() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginArray();
     jsonWriter.value("\u2028 \u2029");
     jsonWriter.endArray();
@@ -361,7 +368,7 @@ public void testUnicodeLineBreaksEscaped() throws IOException {
 
   public void testEmptyArray() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginArray();
     jsonWriter.endArray();
     assertEquals("[]", stringWriter.toString());
@@ -369,7 +376,7 @@ public void testEmptyArray() throws IOException {
 
   public void testEmptyObject() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginObject();
     jsonWriter.endObject();
     assertEquals("{}", stringWriter.toString());
@@ -377,7 +384,7 @@ public void testEmptyObject() throws IOException {
 
   public void testObjectsInArrays() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginArray();
     jsonWriter.beginObject();
     jsonWriter.name("a").value(5);
@@ -394,7 +401,7 @@ public void testObjectsInArrays() throws IOException {
 
   public void testArraysInObjects() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginObject();
     jsonWriter.name("a");
     jsonWriter.beginArray();
@@ -413,7 +420,7 @@ public void testArraysInObjects() throws IOException {
 
   public void testDeepNestingArrays() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     for (int i = 0; i < 20; i++) {
       jsonWriter.beginArray();
     }
@@ -425,7 +432,7 @@ public void testDeepNestingArrays() throws IOException {
 
   public void testDeepNestingObjects() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginObject();
     for (int i = 0; i < 20; i++) {
       jsonWriter.name("a");
@@ -442,7 +449,7 @@ public void testDeepNestingObjects() throws IOException {
 
   public void testRepeatedName() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.beginObject();
     jsonWriter.name("a").value(true);
     jsonWriter.name("a").value(false);
@@ -453,7 +460,7 @@ public void testRepeatedName() throws IOException {
 
   public void testPrettyPrintObject() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.setIndent("   ");
 
     jsonWriter.beginObject();
@@ -490,7 +497,7 @@ public void testPrettyPrintObject() throws IOException {
 
   public void testPrettyPrintArray() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter jsonWriter = new JsonWriter(stringWriter);
+    final JsonWriter jsonWriter = newJsonWriter(stringWriter);
     jsonWriter.setIndent("   ");
 
     jsonWriter.beginArray();
@@ -527,7 +534,7 @@ public void testPrettyPrintArray() throws IOException {
 
   public void testLenientWriterPermitsMultipleTopLevelValues() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter writer = new JsonWriter(stringWriter, JsonOption.LENIENT);
+    final JsonWriter writer = newJsonWriter(stringWriter, JsonOption.LENIENT);
     writer.beginArray();
     writer.endArray();
     writer.beginArray();
@@ -538,7 +545,7 @@ public void testLenientWriterPermitsMultipleTopLevelValues() throws IOException
 
   public void testStrictWriterDoesNotPermitMultipleTopLevelValues() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter writer = new JsonWriter(stringWriter);
+    final JsonWriter writer = newJsonWriter(stringWriter);
     writer.beginArray();
     writer.endArray();
     try {
@@ -550,7 +557,7 @@ public void testStrictWriterDoesNotPermitMultipleTopLevelValues() throws IOExcep
 
   public void testClosedWriterThrowsOnStructure() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter writer = new JsonWriter(stringWriter);
+    final JsonWriter writer = newJsonWriter(stringWriter);
     writer.beginArray();
     writer.endArray();
     writer.close();
@@ -578,7 +585,7 @@ public void testClosedWriterThrowsOnStructure() throws IOException {
 
   public void testClosedWriterThrowsOnName() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter writer = new JsonWriter(stringWriter);
+    final JsonWriter writer = newJsonWriter(stringWriter);
     writer.beginArray();
     writer.endArray();
     writer.close();
@@ -591,7 +598,7 @@ public void testClosedWriterThrowsOnName() throws IOException {
 
   public void testClosedWriterThrowsOnValue() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter writer = new JsonWriter(stringWriter);
+    final JsonWriter writer = newJsonWriter(stringWriter);
     writer.beginArray();
     writer.endArray();
     writer.close();
@@ -604,7 +611,7 @@ public void testClosedWriterThrowsOnValue() throws IOException {
 
   public void testClosedWriterThrowsOnFlush() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter writer = new JsonWriter(stringWriter);
+    final JsonWriter writer = newJsonWriter(stringWriter);
     writer.beginArray();
     writer.endArray();
     writer.close();
@@ -617,7 +624,7 @@ public void testClosedWriterThrowsOnFlush() throws IOException {
 
   public void testWriterCloseIsIdempotent() throws IOException {
     final StringWriter stringWriter = new StringWriter();
-    final JsonWriter writer = new JsonWriter(stringWriter);
+    final JsonWriter writer = newJsonWriter(stringWriter);
     writer.beginArray();
     writer.endArray();
     writer.close();
