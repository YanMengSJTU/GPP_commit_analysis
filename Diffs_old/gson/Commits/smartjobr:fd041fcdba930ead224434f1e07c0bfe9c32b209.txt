diff --git a/gson/src/main/java/com/google/gson/Gson.java b/gson/src/main/java/com/google/gson/Gson.java
index a4ca4f309..899700ad7 100644
--- a/gson/src/main/java/com/google/gson/Gson.java
+++ b/gson/src/main/java/com/google/gson/Gson.java
@@ -106,6 +106,7 @@
   static final boolean DEFAULT_PRETTY_PRINT = false;
   static final boolean DEFAULT_ESCAPE_HTML = true;
   static final boolean DEFAULT_SERIALIZE_NULLS = false;
+  static final boolean DEFAULT_SKIP_NULLS = false;
   static final boolean DEFAULT_COMPLEX_MAP_KEYS = false;
   static final boolean DEFAULT_SPECIALIZE_FLOAT_VALUES = false;
 
@@ -130,6 +131,7 @@
   private final Excluder excluder;
   private final FieldNamingStrategy fieldNamingStrategy;
   private final boolean serializeNulls;
+  private final boolean skipNulls;
   private final boolean htmlSafe;
   private final boolean generateNonExecutableJson;
   private final boolean prettyPrinting;
@@ -173,13 +175,13 @@
   public Gson() {
     this(Excluder.DEFAULT, FieldNamingPolicy.IDENTITY,
         Collections.<Type, InstanceCreator<?>>emptyMap(), DEFAULT_SERIALIZE_NULLS,
-        DEFAULT_COMPLEX_MAP_KEYS, DEFAULT_JSON_NON_EXECUTABLE, DEFAULT_ESCAPE_HTML,
+        DEFAULT_SKIP_NULLS, DEFAULT_COMPLEX_MAP_KEYS, DEFAULT_JSON_NON_EXECUTABLE, DEFAULT_ESCAPE_HTML,
         DEFAULT_PRETTY_PRINT, DEFAULT_LENIENT, DEFAULT_SPECIALIZE_FLOAT_VALUES,
         LongSerializationPolicy.DEFAULT, Collections.<TypeAdapterFactory>emptyList());
   }
 
   Gson(final Excluder excluder, final FieldNamingStrategy fieldNamingStrategy,
-      final Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls,
+      final Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls, boolean skipNulls,
       boolean complexMapKeySerialization, boolean generateNonExecutableGson, boolean htmlSafe,
       boolean prettyPrinting, boolean lenient, boolean serializeSpecialFloatingPointValues,
       LongSerializationPolicy longSerializationPolicy,
@@ -188,6 +190,7 @@ public Gson() {
     this.excluder = excluder;
     this.fieldNamingStrategy = fieldNamingStrategy;
     this.serializeNulls = serializeNulls;
+    this.skipNulls = skipNulls;
     this.generateNonExecutableJson = generateNonExecutableGson;
     this.htmlSafe = htmlSafe;
     this.prettyPrinting = prettyPrinting;
@@ -266,6 +269,10 @@ public FieldNamingStrategy fieldNamingStrategy() {
   public boolean serializeNulls() {
     return serializeNulls;
   }
+  
+  public boolean skipNulls() { 
+	  return skipNulls;
+  }
 
   public boolean htmlSafe() {
     return htmlSafe;
diff --git a/gson/src/main/java/com/google/gson/GsonBuilder.java b/gson/src/main/java/com/google/gson/GsonBuilder.java
index 0c917d46f..e8d0e3789 100644
--- a/gson/src/main/java/com/google/gson/GsonBuilder.java
+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java
@@ -39,6 +39,7 @@
 import static com.google.gson.Gson.DEFAULT_LENIENT;
 import static com.google.gson.Gson.DEFAULT_PRETTY_PRINT;
 import static com.google.gson.Gson.DEFAULT_SERIALIZE_NULLS;
+import static com.google.gson.Gson.DEFAULT_SKIP_NULLS;
 import static com.google.gson.Gson.DEFAULT_SPECIALIZE_FLOAT_VALUES;
 
 /**
@@ -85,6 +86,7 @@
   /** tree-style hierarchy factories. These come after factories for backwards compatibility. */
   private final List<TypeAdapterFactory> hierarchyFactories = new ArrayList<TypeAdapterFactory>();
   private boolean serializeNulls = DEFAULT_SERIALIZE_NULLS;
+  private boolean skipNulls = DEFAULT_SKIP_NULLS;
   private String datePattern;
   private int dateStyle = DateFormat.DEFAULT;
   private int timeStyle = DateFormat.DEFAULT;
@@ -169,6 +171,11 @@ public GsonBuilder serializeNulls() {
     return this;
   }
 
+  public GsonBuilder skipNulls() {
+      this.skipNulls = true;
+      return this;
+  }
+
   /**
    * Enabling this feature will only change the serialized form if the map key is
    * a complex type (i.e. non-primitive) in its <strong>serialized</strong> JSON
@@ -567,7 +574,7 @@ public Gson create() {
     addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, factories);
 
     return new Gson(excluder, fieldNamingPolicy, instanceCreators,
-        serializeNulls, complexMapKeySerialization,
+        serializeNulls, skipNulls, complexMapKeySerialization,
         generateNonExecutableJson, escapeHtmlChars, prettyPrinting, lenient,
         serializeSpecialFloatingPointValues, longSerializationPolicy, factories);
   }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
index 34e97664e..8cd4fd1f0 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -127,7 +127,7 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
-        if (fieldValue != null || !isPrimitive) {
+        if (fieldValue != null || (!isPrimitive && !context.skipNulls())) {
           field.set(value, fieldValue);
         }
       }
diff --git a/gson/src/test/java/com/google/gson/GsonTest.java b/gson/src/test/java/com/google/gson/GsonTest.java
index fb0c00321..5bc837c82 100644
--- a/gson/src/test/java/com/google/gson/GsonTest.java
+++ b/gson/src/test/java/com/google/gson/GsonTest.java
@@ -42,13 +42,14 @@
 
   public void testOverridesDefaultExcluder() {
     Gson gson = new Gson(CUSTOM_EXCLUDER, CUSTOM_FIELD_NAMING_STRATEGY,
-        new HashMap<Type, InstanceCreator<?>>(), true, false, true, false,
+        new HashMap<Type, InstanceCreator<?>>(), true, true, false, true, false,
         true, true, false, LongSerializationPolicy.DEFAULT,
         new ArrayList<TypeAdapterFactory>());
 
     assertEquals(CUSTOM_EXCLUDER, gson.excluder());
     assertEquals(CUSTOM_FIELD_NAMING_STRATEGY, gson.fieldNamingStrategy());
     assertEquals(true, gson.serializeNulls());
+    assertEquals(true, gson.skipNulls());
     assertEquals(false, gson.htmlSafe());
   }
 }
diff --git a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java b/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
index 7939a8c85..232494f2d 100755
--- a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
+++ b/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
@@ -138,6 +138,19 @@ public void testPrintPrintingObjectWithNulls() throws Exception {
     assertTrue(result.contains("\"str\":null"));
   }
   
+  public void testSkipNulls() throws Exception {
+	Gson gson = new GsonBuilder().skipNulls().create();
+	  
+	ClassWithInitializedMembers target =
+			gson.fromJson("{\"array\":null, \"str1\":null, \"str2\": null }", ClassWithInitializedMembers.class);
+	assertEquals(ClassWithInitializedMembers.MY_STRING_DEFAULT, target.str1);
+	assertNull(target.str2);
+	assertEquals(ClassWithInitializedMembers.MY_INT_DEFAULT, target.int1);
+	assertEquals(0, target.int2); // test the default value of a primitive int field per JVM spec
+	assertEquals(ClassWithInitializedMembers.MY_BOOLEAN_DEFAULT, target.bool1);
+	assertFalse(target.bool2); // test the default value of a primitive boolean field per JVM spec
+  }
+  
   public void testPrintPrintingArraysWithNulls() throws Exception {
     gsonBuilder = new GsonBuilder();
     Gson gson = gsonBuilder.create();
