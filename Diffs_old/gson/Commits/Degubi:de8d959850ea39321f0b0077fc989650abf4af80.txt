diff --git a/GsonDesignDocument.md b/GsonDesignDocument.md
index 2c3702ee1..5e8193056 100644
--- a/GsonDesignDocument.md
+++ b/GsonDesignDocument.md
@@ -42,7 +42,7 @@ Gson uses inner classes substantially. Many of the public interfaces are inner i
 
 **Why do you provide two ways of constructing Gson?**
 
-Gson can be constructed in two ways: by invoking new Gson() or by using a GsonBuilder. We chose to provide a simple no-args constructor to handle simple use-cases for Gson where you want to use default options, and quickly want to get going with writing code. For all other situations, where you need to configure Gson with options such as formatters, version controls etc, we use a builder pattern. The builder pattern allows a user to specify multiple optional settings for what essentially become constructor parameters for Gson. 
+Gson can be constructed in two ways: by invoking Gson.newGson() or by using a GsonBuilder. We chose to provide a simple no-args constructor to handle simple use-cases for Gson where you want to use default options, and quickly want to get going with writing code. For all other situations, where you need to configure Gson with options such as formatters, version controls etc, we use a builder pattern. The builder pattern allows a user to specify multiple optional settings for what essentially become constructor parameters for Gson. 
 
 **Comparing Gson with Alternate Approaches**
 
diff --git a/UserGuide.md b/UserGuide.md
index aac9bb440..838fd4470 100644
--- a/UserGuide.md
+++ b/UserGuide.md
@@ -67,7 +67,7 @@ Gson was originally created for use inside Google where it is currently used in
 
 ## <a name="TOC-Using-Gson"></a>Using Gson
 
-The primary class to use is [`Gson`](gson/src/main/java/com/google/gson/Gson.java) which you can just create by calling `new Gson()`. There is also a class [`GsonBuilder`](gson/src/main/java/com/google/gson/GsonBuilder.java) available that can be used to create a Gson instance with various settings like version control and so on.
+The primary class to use is [`Gson`](gson/src/main/java/com/google/gson/Gson.java) which you can just create by calling `Gson.newGson()`. There is also a class [`GsonBuilder`](gson/src/main/java/com/google/gson/GsonBuilder.java) available that can be used to create a Gson instance with various settings like version control and so on.
 
 The Gson instance does not maintain any state while invoking Json operations. So, you are free to reuse the same object for multiple Json serialization and deserialization operations.
 
@@ -98,7 +98,7 @@ That is it, now your maven project is Gson enabled.
 
 ```java
 // Serialization
-Gson gson = new Gson();
+Gson gson = Gson.newGson();
 gson.toJson(1);            // ==> 1
 gson.toJson("abcd");       // ==> "abcd"
 gson.toJson(new Long(10)); // ==> 10
@@ -128,7 +128,7 @@ class BagOfPrimitives {
 
 // Serialization
 BagOfPrimitives obj = new BagOfPrimitives();
-Gson gson = new Gson();
+Gson gson = Gson.newGson();
 String json = gson.toJson(obj);  
 
 // ==> json is {"value1":1,"value2":"abc"}
@@ -195,7 +195,7 @@ The above is possible, but not recommended.
 ### <a name="TOC-Array-Examples"></a>Array Examples
 
 ```java
-Gson gson = new Gson();
+Gson gson = Gson.newGson();
 int[] ints = {1, 2, 3, 4, 5};
 String[] strings = {"abc", "def", "ghi"};
 
@@ -213,7 +213,7 @@ We also support multi-dimensional arrays, with arbitrarily complex element types
 ### <a name="TOC-Collections-Examples"></a>Collections Examples
 
 ```java
-Gson gson = new Gson();
+Gson gson = Gson.newGson();
 Collection<Integer> ints = Lists.immutableList(1,2,3,4,5);
 
 // Serialization
@@ -241,7 +241,7 @@ When you call `toJson(obj)`, Gson calls `obj.getClass()` to get information on t
 class Foo<T> {
   T value;
 }
-Gson gson = new Gson();
+Gson gson = Gson.newGson();
 Foo<Bar> foo = new Foo<Bar>();
 gson.toJson(foo); // May not serialize foo.value correctly
 
@@ -514,7 +514,7 @@ String jsonOutput = gson.toJson(versionedObject);
 System.out.println(jsonOutput);
 System.out.println();
 
-gson = new Gson();
+gson = Gson.newGson();
 jsonOutput = gson.toJson(versionedObject);
 System.out.println(jsonOutput);
 ```
diff --git a/examples/android-proguard-example/src/com/google/gson/examples/android/GsonProguardExampleActivity.java b/examples/android-proguard-example/src/com/google/gson/examples/android/GsonProguardExampleActivity.java
index bd5443114..ffe803a87 100644
--- a/examples/android-proguard-example/src/com/google/gson/examples/android/GsonProguardExampleActivity.java
+++ b/examples/android-proguard-example/src/com/google/gson/examples/android/GsonProguardExampleActivity.java
@@ -37,7 +37,7 @@ public void onCreate(Bundle icicle) {
     super.onCreate(icicle);
     setContentView(R.layout.main);
     TextView tv = (TextView) findViewById(R.id.tv);
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     Cart cart = buildCart();
     StringBuilder sb = new StringBuilder();
     sb.append("Gson.toJson() example: \n");
diff --git a/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java b/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java
index bd7c2d24d..318da2c9f 100644
--- a/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java
+++ b/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java
@@ -38,7 +38,7 @@ public String toString() {
 
   @SuppressWarnings({ "unchecked", "rawtypes" })
   public static void main(String[] args) {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     Collection collection = new ArrayList();
     collection.add("hello");
     collection.add(5);
diff --git a/gson/build.gradle b/gson/build.gradle
index 4dd24c1d0..c3e8597f0 100644
--- a/gson/build.gradle
+++ b/gson/build.gradle
@@ -4,8 +4,8 @@ apply plugin: 'maven'
 group = 'com.google.code.gson'
 version = '2.8.6-SNAPSHOT'
 
-sourceCompatibility = 1.6
-targetCompatibility = 1.6
+sourceCompatibility = 11
+targetCompatibility = 11
 
 sourceSets.main.java.exclude("**/module-info.java")
 dependencies {
diff --git a/gson/docs/javadocs/com/google/gson/Gson.html b/gson/docs/javadocs/com/google/gson/Gson.html
index 2cbe1b8b9..470ff211d 100644
--- a/gson/docs/javadocs/com/google/gson/Gson.html
+++ b/gson/docs/javadocs/com/google/gson/Gson.html
@@ -106,7 +106,7 @@ <H2>
  Gson instance and then invoking <A HREF="../../../com/google/gson/Gson.html#toJson(java.lang.Object)"><CODE>toJson(Object)</CODE></A> or <A HREF="../../../com/google/gson/Gson.html#fromJson(java.lang.String, java.lang.Class)"><CODE>fromJson(String, Class)</CODE></A>
  methods on it.
 
- <p>You can create a Gson instance by invoking <code>new Gson()</code> if the default configuration
+ <p>You can create a Gson instance by invoking <code>Gson.newGson()</code> if the default configuration
  is all you need. You can also use <A HREF="../../../com/google/gson/GsonBuilder.html" title="class in com.google.gson"><CODE>GsonBuilder</CODE></A> to build a Gson instance with various
  configuration options such as versioning support, pretty printing, custom
  <A HREF="../../../com/google/gson/JsonSerializer.html" title="interface in com.google.gson"><CODE>JsonSerializer</CODE></A>s, <A HREF="../../../com/google/gson/JsonDeserializer.html" title="interface in com.google.gson"><CODE>JsonDeserializer</CODE></A>s, and <A HREF="../../../com/google/gson/InstanceCreator.html" title="interface in com.google.gson"><CODE>InstanceCreator</CODE></A>s.</p>
@@ -114,7 +114,7 @@ <H2>
  <p>Here is an example of how Gson is used for a simple Class:
 
  <pre>
- Gson gson = new Gson(); // Or use Gson.newBuilder().build();
+ Gson gson = Gson.newGson(); // Or use Gson.newBuilder().build();
  MyType target = new MyType();
  String json = gson.toJson(target); // serializes target to Json
  MyType target2 = gson.fromJson(json, MyType.class); // deserializes json into target2
@@ -130,7 +130,7 @@ <H2>
  List&lt;String&gt; target = new LinkedList&lt;String&gt;();
  target.add("blah");
 
- Gson gson = new Gson();
+ Gson gson = Gson.newGson();
  String json = gson.toJson(target, listType);
  List&lt;String&gt; target2 = gson.fromJson(json, listType);
  </pre></p>
diff --git a/gson/docs/javadocs/com/google/gson/GsonBuilder.html b/gson/docs/javadocs/com/google/gson/GsonBuilder.html
index ae77446ba..14c561fdb 100644
--- a/gson/docs/javadocs/com/google/gson/GsonBuilder.html
+++ b/gson/docs/javadocs/com/google/gson/GsonBuilder.html
@@ -104,7 +104,7 @@ <H2>
 <P>
 <p>Use this builder to construct a <A HREF="../../../com/google/gson/Gson.html" title="class in com.google.gson"><CODE>Gson</CODE></A> instance when you need to set configuration
  options other than the default. For <A HREF="../../../com/google/gson/Gson.html" title="class in com.google.gson"><CODE>Gson</CODE></A> with default configuration, it is simpler to
- use <code>new Gson()</code>. <code>GsonBuilder</code> is best used by creating it, and then invoking its
+ use <code>Gson.newGson()</code>. <code>GsonBuilder</code> is best used by creating it, and then invoking its
  various configuration methods, and finally calling create.</p>
 
  <p>The following is an example shows how to use the <code>GsonBuilder</code> to construct a Gson
diff --git a/gson/docs/javadocs/com/google/gson/annotations/Expose.html b/gson/docs/javadocs/com/google/gson/annotations/Expose.html
index 0e25b5334..5e9a8ad74 100644
--- a/gson/docs/javadocs/com/google/gson/annotations/Expose.html
+++ b/gson/docs/javadocs/com/google/gson/annotations/Expose.html
@@ -117,7 +117,7 @@ <H2>
    private String password;
  }
  </pre></p>
- If you created Gson with <code>new Gson()</code>, the <code>toJson()</code> and <code>fromJson()</code>
+ If you created Gson with <code>Gson.newGson()</code>, the <code>toJson()</code> and <code>fromJson()</code>
  methods will use the <code>password</code> field along-with <code>firstName</code>, <code>lastName</code>,
  and <code>emailAddress</code> for serialization and deserialization. However, if you created Gson
  with <code>Gson gson = Gson.newBuilder().excludeFieldsWithoutExposeAnnotation().build()</code>
diff --git a/gson/docs/javadocs/com/google/gson/annotations/SerializedName.html b/gson/docs/javadocs/com/google/gson/annotations/SerializedName.html
index df6ece9ab..e388035e9 100644
--- a/gson/docs/javadocs/com/google/gson/annotations/SerializedName.html
+++ b/gson/docs/javadocs/com/google/gson/annotations/SerializedName.html
@@ -126,7 +126,7 @@ <H2>
  above example class:</p>
  <pre>
  SomeClassWithFields objectToSerialize = new SomeClassWithFields("a", "b");
- Gson gson = new Gson();
+ Gson gson = Gson.newGson();
  String jsonRepresentation = gson.toJson(objectToSerialize);
  System.out.println(jsonRepresentation);
 
diff --git a/gson/docs/javadocs/com/google/gson/annotations/Since.html b/gson/docs/javadocs/com/google/gson/annotations/Since.html
index 696c70e56..3ea5442d3 100644
--- a/gson/docs/javadocs/com/google/gson/annotations/Since.html
+++ b/gson/docs/javadocs/com/google/gson/annotations/Since.html
@@ -119,7 +119,7 @@ <H2>
  }
  </pre>
 
- <p>If you created Gson with <code>new Gson()</code>, the <code>toJson()</code> and <code>fromJson()</code>
+ <p>If you created Gson with <code>Gson.newGson()</code>, the <code>toJson()</code> and <code>fromJson()</code>
  methods will use all the fields for serialization and deserialization. However, if you created
  Gson with <code>Gson gson = Gson.newBuilder().setVersion(1.0).build()</code> then the
  <code>toJson()</code> and <code>fromJson()</code> methods of Gson will exclude the <code>address</code> field
diff --git a/gson/docs/javadocs/com/google/gson/annotations/Until.html b/gson/docs/javadocs/com/google/gson/annotations/Until.html
index d57d3af31..38af77d6f 100644
--- a/gson/docs/javadocs/com/google/gson/annotations/Until.html
+++ b/gson/docs/javadocs/com/google/gson/annotations/Until.html
@@ -120,7 +120,7 @@ <H2>
  }
  </pre>
 
- <p>If you created Gson with <code>new Gson()</code>, the <code>toJson()</code> and <code>fromJson()</code>
+ <p>If you created Gson with <code>Gson.newGson()</code>, the <code>toJson()</code> and <code>fromJson()</code>
  methods will use all the fields for serialization and deserialization. However, if you created
  Gson with <code>Gson gson = Gson.newBuilder().setVersion(1.2).build()</code> then the
  <code>toJson()</code> and <code>fromJson()</code> methods of Gson will exclude the <code>emailAddress</code>
diff --git a/gson/docs/javadocs/com/google/gson/package-summary.html b/gson/docs/javadocs/com/google/gson/package-summary.html
index 71f41005c..8c0860b9c 100644
--- a/gson/docs/javadocs/com/google/gson/package-summary.html
+++ b/gson/docs/javadocs/com/google/gson/package-summary.html
@@ -245,7 +245,7 @@ <H2>
  vice-versa.
 
  <p>The primary class to use is <A HREF="../../../com/google/gson/Gson.html" title="class in com.google.gson"><CODE>Gson</CODE></A> which can be constructed with
- <code>new Gson()</code> (using default settings) or by using <A HREF="../../../com/google/gson/GsonBuilder.html" title="class in com.google.gson"><CODE>GsonBuilder</CODE></A>
+ <code>Gson.newGson()</code> (using default settings) or by using <A HREF="../../../com/google/gson/GsonBuilder.html" title="class in com.google.gson"><CODE>GsonBuilder</CODE></A>
  (to configure various options such as using versioning and so on).</p>
 <P>
 
diff --git a/gson/pom.xml b/gson/pom.xml
index 8f233fe71..3a54c98dd 100644
--- a/gson/pom.xml
+++ b/gson/pom.xml
@@ -50,6 +50,8 @@
           <archive>
             <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
           </archive>
+          <source>11</source>
+          <target>11</target>
         </configuration>
       </plugin>
       <plugin>
diff --git a/gson/src/main/java/com/google/gson/FieldNamingStrategy.java b/gson/src/main/java/com/google/gson/FieldNamingStrategy.java
index 039afe275..06b3a6a01 100644
--- a/gson/src/main/java/com/google/gson/FieldNamingStrategy.java
+++ b/gson/src/main/java/com/google/gson/FieldNamingStrategy.java
@@ -37,7 +37,7 @@
 	 * @return the translated field name.
 	 * @since 1.3
 	 */
-	public String translateName(Field f);
+	String translateName(Field f);
 
 	/**
 	 * Using this naming policy with Gson will ensure that the field name is
diff --git a/gson/src/main/java/com/google/gson/Gson.java b/gson/src/main/java/com/google/gson/Gson.java
index 0eb267274..303adb03b 100644
--- a/gson/src/main/java/com/google/gson/Gson.java
+++ b/gson/src/main/java/com/google/gson/Gson.java
@@ -64,7 +64,7 @@
  * methods on it. Gson instances are Thread-safe so you can reuse them freely across multiple
  * threads.
  *
- * <p>You can create a Gson instance by invoking {@code new Gson()} if the default configuration
+ * <p>You can create a Gson instance by invoking {@code Gson.newGson()} if the default configuration
  * is all you need. You can also use {@link GsonBuilder} to build a Gson instance with various
  * configuration options such as versioning support, pretty printing, custom
  * {@link JsonSerializer}s, {@link JsonDeserializer}s, and {@link InstanceCreator}s.</p>
@@ -72,7 +72,7 @@
  * <p>Here is an example of how Gson is used for a simple Class:
  *
  * <pre>
- * Gson gson = new Gson(); // Or use Gson.newBuilder().build();
+ * Gson gson = Gson.newGson(); // Or use Gson.newBuilder().build();
  * MyType target = new MyType();
  * String json = gson.toJson(target); // serializes target to Json
  * MyType target2 = gson.fromJson(json, MyType.class); // deserializes json into target2
@@ -88,7 +88,7 @@
  * List&lt;String&gt; target = new LinkedList&lt;String&gt;();
  * target.add("blah");
  *
- * Gson gson = new Gson();
+ * Gson gson = Gson.newGson();
  * String json = gson.toJson(target, listType);
  * List&lt;String&gt; target2 = gson.fromJson(json, listType);
  * </pre></p>
@@ -104,7 +104,6 @@
  */
 public final class Gson {
 	static final boolean DEFAULT_JSON_NON_EXECUTABLE = false;
-	static final boolean DEFAULT_LENIENT = false;
 	static final boolean DEFAULT_PRETTY_PRINT = false;
 	static final boolean DEFAULT_ESCAPE_HTML = true;
 	static final boolean DEFAULT_SERIALIZE_NULLS = false;
@@ -137,7 +136,6 @@
 	final boolean generateNonExecutableJson;
 	final boolean htmlSafe;
 	final boolean prettyPrinting;
-	final boolean lenient;
 	final boolean serializeSpecialFloatingPointValues;
 	final String datePattern;
 	final int dateStyle;
@@ -180,11 +178,11 @@
 	 *   {@link GsonBuilder#excludeFieldsWithModifiers(int...)}.</li>
 	 * </ul>
 	 */
-	public Gson() {
+	private Gson() {
 		this(Excluder.DEFAULT, FieldNamingStrategy.IDENTITY,
 				Collections.<Type, InstanceCreator<?>>emptyMap(), DEFAULT_SERIALIZE_NULLS,
 				DEFAULT_COMPLEX_MAP_KEYS, DEFAULT_JSON_NON_EXECUTABLE, DEFAULT_ESCAPE_HTML,
-				DEFAULT_PRETTY_PRINT, DEFAULT_LENIENT, DEFAULT_SPECIALIZE_FLOAT_VALUES,
+				DEFAULT_PRETTY_PRINT, DEFAULT_SPECIALIZE_FLOAT_VALUES,
 				LongSerializationPolicy.DEFAULT, null, DateFormat.DEFAULT, DateFormat.DEFAULT,
 				Collections.<TypeAdapterFactory>emptyList(), Collections.<TypeAdapterFactory>emptyList(),
 				Collections.<TypeAdapterFactory>emptyList());
@@ -193,7 +191,7 @@ public Gson() {
 	Gson(Excluder excluder, FieldNamingStrategy fieldNamingStrategy,
 			Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls,
 			boolean complexMapKeySerialization, boolean generateNonExecutableGson, boolean htmlSafe,
-			boolean prettyPrinting, boolean lenient, boolean serializeSpecialFloatingPointValues,
+			boolean prettyPrinting, boolean serializeSpecialFloatingPointValues,
 			LongSerializationPolicy longSerializationPolicy, String datePattern, int dateStyle,
 			int timeStyle, List<TypeAdapterFactory> builderFactories,
 			List<TypeAdapterFactory> builderHierarchyFactories,
@@ -207,7 +205,6 @@ public Gson() {
 		this.generateNonExecutableJson = generateNonExecutableGson;
 		this.htmlSafe = htmlSafe;
 		this.prettyPrinting = prettyPrinting;
-		this.lenient = lenient;
 		this.serializeSpecialFloatingPointValues = serializeSpecialFloatingPointValues;
 		this.longSerializationPolicy = longSerializationPolicy;
 		this.datePattern = datePattern;
@@ -295,6 +292,61 @@ public static Gson newGson() {
 	public static GsonBuilder newBuilder() {
 		return new GsonBuilder();
 	}
+	
+	/**
+	 * Parses the specified JSON string into a parse tree
+	 *
+	 * @param json JSON text
+	 * @return a parse tree of {@link JsonElement}s corresponding to the specified JSON
+	 * @throws JsonParseException if the specified text is not valid JSON
+	 */
+	public static JsonElement parseString(String json) throws JsonSyntaxException {
+		return parseReader(new StringReader(json));
+	}
+
+	/**
+	 * Parses the specified JSON string into a parse tree
+	 *
+	 * @param reader JSON text
+	 * @return a parse tree of {@link JsonElement}s corresponding to the specified JSON
+	 * @throws JsonParseException if the specified text is not valid JSON
+	 */
+	public static JsonElement parseReader(Reader reader) throws JsonIOException, JsonSyntaxException {
+		try {
+			JsonReader jsonReader = new JsonReader(reader);
+			JsonElement element = parseReader(jsonReader);
+			if (!element.isJsonNull() && jsonReader.peek() != JsonToken.END_DOCUMENT) {
+				throw new JsonSyntaxException("Did not consume the entire document.");
+			}
+			return element;
+		} catch (MalformedJsonException e) {
+			throw new JsonSyntaxException(e);
+		} catch (IOException e) {
+			throw new JsonIOException(e);
+		} catch (NumberFormatException e) {
+			throw new JsonSyntaxException(e);
+		}
+	}
+
+	/**
+	 * Returns the next value from the JSON stream as a parse tree.
+	 *
+	 * @throws JsonParseException if there is an IOException or if the specified
+	 *     text is not valid JSON
+	 */
+	public static JsonElement parseReader(JsonReader reader) throws JsonIOException, JsonSyntaxException {
+		boolean lenient = reader.isLenient();
+		reader.setLenient(true);
+		try {
+			return Streams.parse(reader);
+		} catch (StackOverflowError e) {
+			throw new JsonParseException("Failed parsing JSON source: " + reader + " to Json", e);
+		} catch (OutOfMemoryError e) {
+			throw new JsonParseException("Failed parsing JSON source: " + reader + " to Json", e);
+		} finally {
+			reader.setLenient(lenient);
+		}
+	}
 
 	public Excluder excluder() {
 		return excluder;
@@ -771,7 +823,6 @@ public JsonWriter newJsonWriter(Writer writer) throws IOException {
 	 */
 	public JsonReader newJsonReader(Reader reader) {
 		JsonReader jsonReader = new JsonReader(reader);
-		jsonReader.setLenient(lenient);
 		return jsonReader;
 	}
 
diff --git a/gson/src/main/java/com/google/gson/GsonBuilder.java b/gson/src/main/java/com/google/gson/GsonBuilder.java
index 68aa1549d..8e88f0111 100644
--- a/gson/src/main/java/com/google/gson/GsonBuilder.java
+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java
@@ -35,7 +35,6 @@
 import static com.google.gson.Gson.DEFAULT_COMPLEX_MAP_KEYS;
 import static com.google.gson.Gson.DEFAULT_ESCAPE_HTML;
 import static com.google.gson.Gson.DEFAULT_JSON_NON_EXECUTABLE;
-import static com.google.gson.Gson.DEFAULT_LENIENT;
 import static com.google.gson.Gson.DEFAULT_PRETTY_PRINT;
 import static com.google.gson.Gson.DEFAULT_SERIALIZE_NULLS;
 import static com.google.gson.Gson.DEFAULT_SPECIALIZE_FLOAT_VALUES;
@@ -43,7 +42,7 @@
 /**
  * <p>Use this builder to construct a {@link Gson} instance when you need to set configuration
  * options other than the default. For {@link Gson} with default configuration, it is simpler to
- * use {@code new Gson()}. {@code GsonBuilder} is best used by creating it, and then invoking its
+ * use {@code Gson.newGson()}. {@code GsonBuilder} is best used by creating it, and then invoking its
  * various configuration methods, and finally calling create.</p>
  *
  * <p>The following is an example shows how to use the {@code GsonBuilder} to construct a Gson
@@ -92,7 +91,6 @@
   private boolean escapeHtmlChars = DEFAULT_ESCAPE_HTML;
   private boolean prettyPrinting = DEFAULT_PRETTY_PRINT;
   private boolean generateNonExecutableJson = DEFAULT_JSON_NON_EXECUTABLE;
-  private boolean lenient = DEFAULT_LENIENT;
 
   /**
    * Creates a GsonBuilder instance that can be used to build Gson with various configuration
@@ -100,8 +98,7 @@
    * invoking various configuration methods to set desired options, and finally calling
    * {@link #create()}.
    */
-  GsonBuilder() {
-  }
+  GsonBuilder() {}
 
   /**
    * Constructs a GsonBuilder instance from a Gson instance. The newly constructed GsonBuilder
@@ -118,7 +115,6 @@
     this.generateNonExecutableJson = gson.generateNonExecutableJson;
     this.escapeHtmlChars = gson.htmlSafe;
     this.prettyPrinting = gson.prettyPrinting;
-    this.lenient = gson.lenient;
     this.serializeSpecialFloatingPointValues = gson.serializeSpecialFloatingPointValues;
     this.longSerializationPolicy = gson.longSerializationPolicy;
     this.datePattern = gson.datePattern;
@@ -373,19 +369,6 @@ public GsonBuilder setPrettyPrinting() {
     return this;
   }
 
-  /**
-   * By default, Gson is strict and only accepts JSON as specified by
-   * <a href="http://www.ietf.org/rfc/rfc4627.txt">RFC 4627</a>. This option makes the parser
-   * liberal in what it accepts.
-   *
-   * @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern
-   * @see JsonReader#setLenient(boolean)
-   */
-  public GsonBuilder setLenient() {
-    lenient = true;
-    return this;
-  }
-
   /**
    * By default, Gson escapes HTML characters such as &lt; &gt; etc. Use this option to configure
    * Gson to pass-through HTML characters as is.
@@ -582,7 +565,7 @@ public Gson build() {
 
     return new Gson(excluder, fieldNamingPolicy, instanceCreators,
         serializeNulls, complexMapKeySerialization,
-        generateNonExecutableJson, escapeHtmlChars, prettyPrinting, lenient,
+        generateNonExecutableJson, escapeHtmlChars, prettyPrinting,
         serializeSpecialFloatingPointValues, longSerializationPolicy,
         datePattern, dateStyle, timeStyle,
         this.factories, this.hierarchyFactories, factories);
diff --git a/gson/src/main/java/com/google/gson/JsonArray.java b/gson/src/main/java/com/google/gson/JsonArray.java
index 991174d7b..ead3e100a 100644
--- a/gson/src/main/java/com/google/gson/JsonArray.java
+++ b/gson/src/main/java/com/google/gson/JsonArray.java
@@ -40,11 +40,11 @@
 	 * Creates an empty JsonArray.
 	 */
 	public JsonArray() {
-		elements = new ArrayList<JsonElement>();
+		elements = new ArrayList<>();
 	}
 
 	public JsonArray(int capacity) {
-		elements = new ArrayList<JsonElement>(capacity);
+		elements = new ArrayList<>(capacity);
 	}
 
 	/**
diff --git a/gson/src/main/java/com/google/gson/JsonIOException.java b/gson/src/main/java/com/google/gson/JsonIOException.java
index b1de8a3c3..198cabcb5 100644
--- a/gson/src/main/java/com/google/gson/JsonIOException.java
+++ b/gson/src/main/java/com/google/gson/JsonIOException.java
@@ -42,4 +42,4 @@ public JsonIOException(String msg, Throwable cause) {
 	public JsonIOException(Throwable cause) {
 		super(cause);
 	}
-}
+}
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/JsonParser.java b/gson/src/main/java/com/google/gson/JsonParser.java
deleted file mode 100644
index 2e46811e7..000000000
--- a/gson/src/main/java/com/google/gson/JsonParser.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * Copyright (C) 2009 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson;
-
-import java.io.IOException;
-import java.io.Reader;
-import java.io.StringReader;
-
-import com.google.gson.internal.Streams;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.MalformedJsonException;
-
-/**
- * A parser to parse Json into a parse tree of {@link JsonElement}s
- *
- * @author Inderjeet Singh
- * @author Joel Leitch
- * @since 1.3
- */
-public final class JsonParser {
-	private JsonParser() {}
-
-	/**
-	 * Parses the specified JSON string into a parse tree
-	 *
-	 * @param json JSON text
-	 * @return a parse tree of {@link JsonElement}s corresponding to the specified JSON
-	 * @throws JsonParseException if the specified text is not valid JSON
-	 */
-	public static JsonElement parseString(String json) throws JsonSyntaxException {
-		return parseReader(new StringReader(json));
-	}
-
-	/**
-	 * Parses the specified JSON string into a parse tree
-	 *
-	 * @param reader JSON text
-	 * @return a parse tree of {@link JsonElement}s corresponding to the specified JSON
-	 * @throws JsonParseException if the specified text is not valid JSON
-	 */
-	public static JsonElement parseReader(Reader reader) throws JsonIOException, JsonSyntaxException {
-		try {
-			JsonReader jsonReader = new JsonReader(reader);
-			JsonElement element = parseReader(jsonReader);
-			if (!element.isJsonNull() && jsonReader.peek() != JsonToken.END_DOCUMENT) {
-				throw new JsonSyntaxException("Did not consume the entire document.");
-			}
-			return element;
-		} catch (MalformedJsonException e) {
-			throw new JsonSyntaxException(e);
-		} catch (IOException e) {
-			throw new JsonIOException(e);
-		} catch (NumberFormatException e) {
-			throw new JsonSyntaxException(e);
-		}
-	}
-
-	/**
-	 * Returns the next value from the JSON stream as a parse tree.
-	 *
-	 * @throws JsonParseException if there is an IOException or if the specified
-	 *     text is not valid JSON
-	 */
-	public static JsonElement parseReader(JsonReader reader) throws JsonIOException, JsonSyntaxException {
-		boolean lenient = reader.isLenient();
-		reader.setLenient(true);
-		try {
-			return Streams.parse(reader);
-		} catch (StackOverflowError e) {
-			throw new JsonParseException("Failed parsing JSON source: " + reader + " to Json", e);
-		} catch (OutOfMemoryError e) {
-			throw new JsonParseException("Failed parsing JSON source: " + reader + " to Json", e);
-		} finally {
-			reader.setLenient(lenient);
-		}
-	}
-}
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/JsonStreamParser.java b/gson/src/main/java/com/google/gson/JsonStreamParser.java
index f398a445b..496a6a3f5 100644
--- a/gson/src/main/java/com/google/gson/JsonStreamParser.java
+++ b/gson/src/main/java/com/google/gson/JsonStreamParser.java
@@ -81,6 +81,7 @@ public JsonStreamParser(Reader reader) {
 	 * @throws JsonParseException if the incoming stream is malformed JSON.
 	 * @since 1.4
 	 */
+	@Override
 	public JsonElement next() throws JsonParseException {
 		if (!hasNext()) {
 			throw new NoSuchElementException();
@@ -102,6 +103,7 @@ public JsonElement next() throws JsonParseException {
 	 * @return true if a {@link JsonElement} is available on the input, false otherwise
 	 * @since 1.4
 	 */
+	@Override
 	public boolean hasNext() {
 		synchronized (lock) {
 			try {
diff --git a/gson/src/main/java/com/google/gson/annotations/Expose.java b/gson/src/main/java/com/google/gson/annotations/Expose.java
index 0bbb84937..068a06f3a 100644
--- a/gson/src/main/java/com/google/gson/annotations/Expose.java
+++ b/gson/src/main/java/com/google/gson/annotations/Expose.java
@@ -40,7 +40,7 @@
  *   private String password;
  * }
  * </pre></p>
- * If you created Gson with {@code new Gson()}, the {@code toJson()} and {@code fromJson()}
+ * If you created Gson with {@code Gson.newGson()}, the {@code toJson()} and {@code fromJson()}
  * methods will use the {@code password} field along-with {@code firstName}, {@code lastName},
  * and {@code emailAddress} for serialization and deserialization. However, if you created Gson
  * with {@code Gson gson = Gson.newBuilder().excludeFieldsWithoutExposeAnnotation().build()}
diff --git a/gson/src/main/java/com/google/gson/annotations/SerializedName.java b/gson/src/main/java/com/google/gson/annotations/SerializedName.java
index 82bb51cd5..7b411c64e 100644
--- a/gson/src/main/java/com/google/gson/annotations/SerializedName.java
+++ b/gson/src/main/java/com/google/gson/annotations/SerializedName.java
@@ -51,7 +51,7 @@
  * above example class:</p>
  * <pre>
  * MyClass target = new MyClass("v1", "v2", "v3");
- * Gson gson = new Gson();
+ * Gson gson = Gson.newGson();
  * String json = gson.toJson(target);
  * System.out.println(json);
  *
diff --git a/gson/src/main/java/com/google/gson/annotations/Since.java b/gson/src/main/java/com/google/gson/annotations/Since.java
index 07170357b..6a3dc3bc2 100644
--- a/gson/src/main/java/com/google/gson/annotations/Since.java
+++ b/gson/src/main/java/com/google/gson/annotations/Since.java
@@ -42,7 +42,7 @@
  * }
  * </pre>
  *
- * <p>If you created Gson with {@code new Gson()}, the {@code toJson()} and {@code fromJson()}
+ * <p>If you created Gson with {@code Gson.newGson()}, the {@code toJson()} and {@code fromJson()}
  * methods will use all the fields for serialization and deserialization. However, if you created
  * Gson with {@code Gson gson = Gson.newBuilder().setVersion(1.0).build()} then the
  * {@code toJson()} and {@code fromJson()} methods of Gson will exclude the {@code address} field
diff --git a/gson/src/main/java/com/google/gson/annotations/Until.java b/gson/src/main/java/com/google/gson/annotations/Until.java
index a02bd4954..ad7d00d63 100644
--- a/gson/src/main/java/com/google/gson/annotations/Until.java
+++ b/gson/src/main/java/com/google/gson/annotations/Until.java
@@ -43,7 +43,7 @@
  * }
  * </pre>
  *
- * <p>If you created Gson with {@code new Gson()}, the {@code toJson()} and {@code fromJson()}
+ * <p>If you created Gson with {@code Gson.newGson()}, the {@code toJson()} and {@code fromJson()}
  * methods will use all the fields for serialization and deserialization. However, if you created
  * Gson with {@code Gson gson = Gson.newBuilder().setVersion(1.2).build()} then the
  * {@code toJson()} and {@code fromJson()} methods of Gson will exclude the {@code emailAddress}
diff --git a/gson/src/main/java/com/google/gson/package-info.java b/gson/src/main/java/com/google/gson/package-info.java
index 428e280cf..9e9e10d0e 100644
--- a/gson/src/main/java/com/google/gson/package-info.java
+++ b/gson/src/main/java/com/google/gson/package-info.java
@@ -3,7 +3,7 @@
  * vice-versa.
  *
  * <p>The primary class to use is {@link com.google.gson.Gson} which can be constructed with
- * {@code new Gson()} (using default settings) or by using {@link com.google.gson.GsonBuilder}
+ * {@code Gson.newGson()} (using default settings) or by using {@link com.google.gson.GsonBuilder}
  * (to configure various options such as using versioning and so on).</p>
  *
  * @author Inderjeet Singh, Joel Leitch
diff --git a/gson/src/test/java/com/google/gson/CommentsTest.java b/gson/src/test/java/com/google/gson/CommentsTest.java
index 306e5aff3..4495fce4e 100644
--- a/gson/src/test/java/com/google/gson/CommentsTest.java
+++ b/gson/src/test/java/com/google/gson/CommentsTest.java
@@ -39,7 +39,7 @@ public void testParseComments() {
         + "  \"c\"\n"
         + "]";
 
-    List<String> abc = new Gson().fromJson(json, new TypeToken<List<String>>() {}.getType());
+    List<String> abc = Gson.newGson().fromJson(json, new TypeToken<List<String>>() {}.getType());
     assertEquals(Arrays.asList("a", "b", "c"), abc);
   }
 }
diff --git a/gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java b/gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java
index 6b853f5de..975548e69 100644
--- a/gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java
+++ b/gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java
@@ -31,7 +31,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
   
   public void testInetAddressSerializationAndDeserialization() throws Exception {
diff --git a/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java b/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java
index 5c0619535..aa807a61b 100644
--- a/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java
+++ b/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java
@@ -29,7 +29,7 @@
  * @author Joel Leitch
  */
 public class DefaultMapJsonSerializerTest extends TestCase {
-  private Gson gson = new Gson();
+  private Gson gson = Gson.newGson();
 
   public void testEmptyMapNoTypeSerialization() {
     Map<String, String> emptyMap = new HashMap<String, String>();
@@ -54,7 +54,7 @@ public void testNonEmptyMapSerialization() {
     Map<String, String> myMap = new HashMap<String, String>();
     String key = "key1";
     myMap.put(key, "value1");
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     JsonElement element = gson.toJsonTree(myMap, mapType);
 
     assertTrue(element.isJsonObject());
diff --git a/gson/src/test/java/com/google/gson/GsonTest.java b/gson/src/test/java/com/google/gson/GsonTest.java
index 5b8e6f552..80c4c1645 100644
--- a/gson/src/test/java/com/google/gson/GsonTest.java
+++ b/gson/src/test/java/com/google/gson/GsonTest.java
@@ -47,7 +47,7 @@
   public void testOverridesDefaultExcluder() {
     Gson gson = new Gson(CUSTOM_EXCLUDER, CUSTOM_FIELD_NAMING_STRATEGY,
         new HashMap<Type, InstanceCreator<?>>(), true, false, true, false,
-        true, true, false, LongSerializationPolicy.DEFAULT, null, DateFormat.DEFAULT,
+        true, false, LongSerializationPolicy.DEFAULT, null, DateFormat.DEFAULT,
         DateFormat.DEFAULT, new ArrayList<TypeAdapterFactory>(),
         new ArrayList<TypeAdapterFactory>(), new ArrayList<TypeAdapterFactory>());
 
@@ -60,7 +60,7 @@ public void testOverridesDefaultExcluder() {
   public void testClonedTypeAdapterFactoryListsAreIndependent() {
     Gson original = new Gson(CUSTOM_EXCLUDER, CUSTOM_FIELD_NAMING_STRATEGY,
         new HashMap<Type, InstanceCreator<?>>(), true, false, true, false,
-        true, true, false, LongSerializationPolicy.DEFAULT, null, DateFormat.DEFAULT,
+        true, false, LongSerializationPolicy.DEFAULT, null, DateFormat.DEFAULT,
         DateFormat.DEFAULT, new ArrayList<TypeAdapterFactory>(),
         new ArrayList<TypeAdapterFactory>(), new ArrayList<TypeAdapterFactory>());
 
diff --git a/gson/src/test/java/com/google/gson/JavaSerializationTest.java b/gson/src/test/java/com/google/gson/JavaSerializationTest.java
index fbaea19d4..b1ea0a49f 100644
--- a/gson/src/test/java/com/google/gson/JavaSerializationTest.java
+++ b/gson/src/test/java/com/google/gson/JavaSerializationTest.java
@@ -35,7 +35,7 @@
  * @author Jesse Wilson
  */
 public final class JavaSerializationTest extends TestCase {
-  private final Gson gson = new Gson();
+  private final Gson gson = Gson.newGson();
 
   public void testMapIsSerializable() throws Exception {
     Type type = new TypeToken<Map<String, Integer>>() {}.getType();
diff --git a/gson/src/test/java/com/google/gson/JsonObjectTest.java b/gson/src/test/java/com/google/gson/JsonObjectTest.java
index 9e47b9733..9549af2da 100644
--- a/gson/src/test/java/com/google/gson/JsonObjectTest.java
+++ b/gson/src/test/java/com/google/gson/JsonObjectTest.java
@@ -112,7 +112,7 @@ public void testAddingCharacterProperties() throws Exception {
   public void testPropertyWithQuotes() {
     JsonObject jsonObj = new JsonObject();
     jsonObj.add("a\"b", new JsonPrimitive("c\"d"));
-    String json = new Gson().toJson(jsonObj);
+    String json = Gson.newGson().toJson(jsonObj);
     assertEquals("{\"a\\\"b\":\"c\\\"d\"}", json);
   }
 
@@ -122,12 +122,12 @@ public void testPropertyWithQuotes() {
   public void testWritePropertyWithEmptyStringName() {
     JsonObject jsonObj = new JsonObject();
     jsonObj.add("", new JsonPrimitive(true));
-    assertEquals("{\"\":true}", new Gson().toJson(jsonObj));
+    assertEquals("{\"\":true}", Gson.newGson().toJson(jsonObj));
 
   }
 
   public void testReadPropertyWithEmptyStringName() {
-    JsonObject jsonObj = JsonParser.parseString("{\"\":true}").getAsJsonObject();
+    JsonObject jsonObj = Gson.parseString("{\"\":true}").getAsJsonObject();
     assertEquals(true, jsonObj.get("").getAsBoolean());
   }
 
diff --git a/gson/src/test/java/com/google/gson/JsonParserTest.java b/gson/src/test/java/com/google/gson/JsonParserTest.java
index cc18238be..5ae56d2b1 100644
--- a/gson/src/test/java/com/google/gson/JsonParserTest.java
+++ b/gson/src/test/java/com/google/gson/JsonParserTest.java
@@ -35,13 +35,13 @@
 
   public void testParseInvalidJson() {
     try {
-      JsonParser.parseString("[[]");
+    	Gson.parseString("[[]");
       fail();
     } catch (JsonSyntaxException expected) { }
   }
 
   public void testParseUnquotedStringArrayFails() {
-    JsonElement element = JsonParser.parseString("[a,b,c]");
+    JsonElement element = Gson.parseString("[a,b,c]");
     assertEquals("a", element.getAsJsonArray().get(0).getAsString());
     assertEquals("b", element.getAsJsonArray().get(1).getAsString());
     assertEquals("c", element.getAsJsonArray().get(2).getAsString());
@@ -50,38 +50,38 @@ public void testParseUnquotedStringArrayFails() {
 
   public void testParseString() {
     String json = "{a:10,b:'c'}";
-    JsonElement e = JsonParser.parseString(json);
+    JsonElement e = Gson.parseString(json);
     assertTrue(e.isJsonObject());
     assertEquals(10, e.getAsJsonObject().get("a").getAsInt());
     assertEquals("c", e.getAsJsonObject().get("b").getAsString());
   }
 
   public void testParseEmptyString() {
-    JsonElement e = JsonParser.parseString("\"   \"");
+    JsonElement e = Gson.parseString("\"   \"");
     assertTrue(e.isJsonPrimitive());
     assertEquals("   ", e.getAsString());
   }
 
   public void testParseEmptyWhitespaceInput() {
-    JsonElement e = JsonParser.parseString("     ");
+    JsonElement e = Gson.parseString("     ");
     assertTrue(e.isJsonNull());
   }
 
   public void testParseUnquotedSingleWordStringFails() {
-    assertEquals("Test", JsonParser.parseString("Test").getAsString());
+    assertEquals("Test", Gson.parseString("Test").getAsString());
   }
 
   public void testParseUnquotedMultiWordStringFails() {
     String unquotedSentence = "Test is a test..blah blah";
     try {
-      JsonParser.parseString(unquotedSentence);
+    	Gson.parseString(unquotedSentence);
       fail();
     } catch (JsonSyntaxException expected) { }
   }
 
   public void testParseMixedArray() {
     String json = "[{},13,\"stringValue\"]";
-    JsonElement e = JsonParser.parseString(json);
+    JsonElement e = Gson.parseString(json);
     assertTrue(e.isJsonArray());
 
     JsonArray  array = e.getAsJsonArray();
@@ -92,14 +92,14 @@ public void testParseMixedArray() {
 
   public void testParseReader() {
     StringReader reader = new StringReader("{a:10,b:'c'}");
-    JsonElement e = JsonParser.parseReader(reader);
+    JsonElement e = Gson.parseReader(reader);
     assertTrue(e.isJsonObject());
     assertEquals(10, e.getAsJsonObject().get("a").getAsInt());
     assertEquals("c", e.getAsJsonObject().get("b").getAsString());
   }
 
   public void testReadWriteTwoObjects() throws Exception {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     CharArrayWriter writer = new CharArrayWriter();
     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one");
     writer.write(gson.toJson(expectedOne).toCharArray());
diff --git a/gson/src/test/java/com/google/gson/MixedStreamTest.java b/gson/src/test/java/com/google/gson/MixedStreamTest.java
index 51e5316df..36d19d3b9 100644
--- a/gson/src/test/java/com/google/gson/MixedStreamTest.java
+++ b/gson/src/test/java/com/google/gson/MixedStreamTest.java
@@ -48,7 +48,7 @@
       + "]";
 
   public void testWriteMixedStreamed() throws IOException {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     StringWriter stringWriter = new StringWriter();
     JsonWriter jsonWriter = new JsonWriter(stringWriter);
 
@@ -63,7 +63,7 @@ public void testWriteMixedStreamed() throws IOException {
   }
 
   public void testReadMixedStreamed() throws IOException {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     StringReader stringReader = new StringReader(CARS_JSON);
     JsonReader jsonReader = new JsonReader(stringReader);
 
@@ -75,7 +75,7 @@ public void testReadMixedStreamed() throws IOException {
   }
 
   public void testReaderDoesNotMutateState() throws IOException {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     JsonReader jsonReader = new JsonReader(new StringReader(CARS_JSON));
     jsonReader.beginArray();
 
@@ -89,7 +89,7 @@ public void testReaderDoesNotMutateState() throws IOException {
   }
 
   public void testWriteDoesNotMutateState() throws IOException {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     JsonWriter jsonWriter = new JsonWriter(new StringWriter());
     jsonWriter.beginArray();
 
@@ -107,7 +107,7 @@ public void testWriteDoesNotMutateState() throws IOException {
   }
 
   public void testReadInvalidState() throws IOException {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     JsonReader jsonReader = new JsonReader(new StringReader(CARS_JSON));
     jsonReader.beginArray();
     jsonReader.beginObject();
@@ -119,7 +119,7 @@ public void testReadInvalidState() throws IOException {
   }
 
   public void testReadClosed() throws IOException {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     JsonReader jsonReader = new JsonReader(new StringReader(CARS_JSON));
     jsonReader.close();
     try {
@@ -130,7 +130,7 @@ public void testReadClosed() throws IOException {
   }
 
   public void testWriteInvalidState() throws IOException {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     JsonWriter jsonWriter = new JsonWriter(new StringWriter());
     jsonWriter.beginObject();
     try {
@@ -141,7 +141,7 @@ public void testWriteInvalidState() throws IOException {
   }
 
   public void testWriteClosed() throws IOException {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     JsonWriter jsonWriter = new JsonWriter(new StringWriter());
     jsonWriter.beginArray();
     jsonWriter.endArray();
@@ -154,7 +154,7 @@ public void testWriteClosed() throws IOException {
   }
 
   public void testWriteNulls() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     try {
       gson.toJson(new JsonPrimitive("hello"), (JsonWriter) null);
       fail();
@@ -167,7 +167,7 @@ public void testWriteNulls() {
   }
 
   public void testReadNulls() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     try {
       gson.fromJson((JsonReader) null, Integer.class);
       fail();
@@ -185,7 +185,7 @@ public void testWriteHtmlSafe() {
     Type type = new TypeToken<List<String>>() {}.getType();
 
     StringWriter writer = new StringWriter();
-    new Gson().toJson(contents, type, new JsonWriter(writer));
+    Gson.newGson().toJson(contents, type, new JsonWriter(writer));
     assertEquals("[\"\\u003c\",\"\\u003e\",\"\\u0026\",\"\\u003d\",\"\\u0027\"]",
         writer.toString());
 
@@ -208,7 +208,7 @@ public void testWriteLenient() {
     assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
 
     try {
-      new Gson().toJson(doubles, type, new JsonWriter(new StringWriter()));
+      Gson.newGson().toJson(doubles, type, new JsonWriter(new StringWriter()));
       fail();
     } catch (IllegalArgumentException expected) {
     }
diff --git a/gson/src/test/java/com/google/gson/functional/ArrayTest.java b/gson/src/test/java/com/google/gson/functional/ArrayTest.java
index e918bf2a6..79fc6aee9 100644
--- a/gson/src/test/java/com/google/gson/functional/ArrayTest.java
+++ b/gson/src/test/java/com/google/gson/functional/ArrayTest.java
@@ -42,7 +42,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testTopLevelArrayOfIntsSerialization() {
@@ -263,6 +263,6 @@ public void testArrayElementsAreArrays() {
         new String[] {"test3", "test4"}
     };
     assertEquals("[[\"test1\",\"test2\"],[\"test3\",\"test4\"]]",
-        new Gson().toJson(stringArrays));
+        Gson.newGson().toJson(stringArrays));
   }
 }
diff --git a/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java b/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java
index bac04d942..45934db0c 100644
--- a/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java
+++ b/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java
@@ -41,7 +41,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testCircularSerialization() throws Exception {
diff --git a/gson/src/test/java/com/google/gson/functional/CollectionTest.java b/gson/src/test/java/com/google/gson/functional/CollectionTest.java
index 1c0ed71ff..dc82b38ea 100644
--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java
+++ b/gson/src/test/java/com/google/gson/functional/CollectionTest.java
@@ -55,7 +55,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testTopLevelCollectionOfIntegersSerialization() {
@@ -406,7 +406,7 @@ public void testIssue1107() {
             "    ]\n" +
             "  }\n" +
             "}";
-    BigClass bigClass = new Gson().fromJson(json, BigClass.class);
+    BigClass bigClass = Gson.newGson().fromJson(json, BigClass.class);
     SmallClass small = bigClass.inBig.get("key").get(0);
     assertNotNull(small);
     assertEquals("hello", small.inSmall);
diff --git a/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java b/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java
index 2dccf4b61..c243b807e 100644
--- a/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java
+++ b/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java
@@ -36,7 +36,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   /**
diff --git a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java b/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java
index fa6ddaae4..6ff8f2e51 100644
--- a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java
+++ b/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java
@@ -87,7 +87,7 @@ public void testCustomDeserializers() {
 
   public void disable_testCustomSerializersOfSelf() {
     Gson gson = createGsonObjectWithFooTypeAdapter();
-    Gson basicGson = new Gson();
+    Gson basicGson = Gson.newGson();
     Foo newFooObject = new Foo(1, 2L);
     String jsonFromCustomSerializer = gson.toJson(newFooObject);
     String jsonFromGson = basicGson.toJson(newFooObject);
@@ -97,7 +97,7 @@ public void disable_testCustomSerializersOfSelf() {
 
   public void disable_testCustomDeserializersOfSelf() {
     Gson gson = createGsonObjectWithFooTypeAdapter();
-    Gson basicGson = new Gson();
+    Gson basicGson = Gson.newGson();
     Foo expectedFoo = new Foo(1, 2L);
     String json = basicGson.toJson(expectedFoo);
     Foo newFooObject = gson.fromJson(json, Foo.class);
diff --git a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
index 0dfdba3ee..bf4a29c7e 100644
--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
@@ -76,7 +76,7 @@ protected void setUp() throws Exception {
     this.oldTimeZone = TimeZone.getDefault();
     TimeZone.setDefault(TimeZone.getTimeZone("America/Los_Angeles"));
     Locale.setDefault(Locale.US);
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   @Override
@@ -287,7 +287,7 @@ public void testOverrideBigDecimalTypeAdapter() throws Exception {
   }
 
   public void testSetSerialization() throws Exception {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     HashSet<String> s = new HashSet<String>();
     s.add("blah");
     String json = gson.toJson(s);
@@ -298,7 +298,7 @@ public void testSetSerialization() throws Exception {
   }
 
   public void testBitSetSerialization() throws Exception {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     BitSet bits = new BitSet();
     bits.set(1);
     bits.set(3, 6);
@@ -313,7 +313,7 @@ public void testBitSetDeserialization() throws Exception {
     expected.set(2, 6);
     expected.set(8);
 
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String json = gson.toJson(expected);
     assertEquals(expected, gson.fromJson(json, BitSet.class));
 
diff --git a/gson/src/test/java/com/google/gson/functional/EnumTest.java b/gson/src/test/java/com/google/gson/functional/EnumTest.java
index 54485e85d..0da781c20 100644
--- a/gson/src/test/java/com/google/gson/functional/EnumTest.java
+++ b/gson/src/test/java/com/google/gson/functional/EnumTest.java
@@ -49,7 +49,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testTopLevelEnumSerialization() throws Exception {
diff --git a/gson/src/test/java/com/google/gson/functional/EscapingTest.java b/gson/src/test/java/com/google/gson/functional/EscapingTest.java
index c85055cbc..f262a6846 100644
--- a/gson/src/test/java/com/google/gson/functional/EscapingTest.java
+++ b/gson/src/test/java/com/google/gson/functional/EscapingTest.java
@@ -35,7 +35,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testEscapingQuotesInStringArray() throws Exception {
diff --git a/gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java b/gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java
index 5fdfd1624..feae1736f 100644
--- a/gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java
+++ b/gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java
@@ -40,7 +40,7 @@ protected void setUp() throws Exception {
   }
 
   public void testDefaultInnerClassExclusion() throws Exception {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     Outer.Inner target = outer.new Inner(VALUE);
     String result = gson.toJson(target);
     assertEquals(target.toJson(), result);
@@ -59,7 +59,7 @@ public void testInnerClassExclusion() throws Exception {
   }
 
   public void testDefaultNestedStaticClassIncluded() throws Exception {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     Outer.Inner target = outer.new Inner(VALUE);
     String result = gson.toJson(target);
     assertEquals(target.toJson(), result);
diff --git a/gson/src/test/java/com/google/gson/functional/InheritanceTest.java b/gson/src/test/java/com/google/gson/functional/InheritanceTest.java
index 475db8382..2b08f70e1 100644
--- a/gson/src/test/java/com/google/gson/functional/InheritanceTest.java
+++ b/gson/src/test/java/com/google/gson/functional/InheritanceTest.java
@@ -51,7 +51,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testSubClassSerialization() throws Exception {
diff --git a/gson/src/test/java/com/google/gson/functional/InterfaceTest.java b/gson/src/test/java/com/google/gson/functional/InterfaceTest.java
index 6851f1e99..11109da1d 100644
--- a/gson/src/test/java/com/google/gson/functional/InterfaceTest.java
+++ b/gson/src/test/java/com/google/gson/functional/InterfaceTest.java
@@ -35,7 +35,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
     obj = new TestObject("StringValue");
   }
 
diff --git a/gson/src/test/java/com/google/gson/functional/InternationalizationTest.java b/gson/src/test/java/com/google/gson/functional/InternationalizationTest.java
index 169c37a50..8980f6a71 100644
--- a/gson/src/test/java/com/google/gson/functional/InternationalizationTest.java
+++ b/gson/src/test/java/com/google/gson/functional/InternationalizationTest.java
@@ -31,7 +31,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   /*
diff --git a/gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java b/gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java
index f4ea3bb34..6d1a3642c 100644
--- a/gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java
@@ -37,7 +37,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testAtomicBoolean() throws Exception {
diff --git a/gson/src/test/java/com/google/gson/functional/JavaUtilTest.java b/gson/src/test/java/com/google/gson/functional/JavaUtilTest.java
index 052096533..3f490e5a6 100644
--- a/gson/src/test/java/com/google/gson/functional/JavaUtilTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JavaUtilTest.java
@@ -32,7 +32,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testCurrency() throws Exception {
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
index 0cd99a9c0..f332f6373 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
@@ -42,7 +42,7 @@
 public final class JsonAdapterAnnotationOnClassesTest extends TestCase {
 
   public void testJsonAdapterInvoked() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String json = gson.toJson(new A("bar"));
     assertEquals("\"jsonAdapter\"", json);
 
@@ -60,7 +60,7 @@ public void testJsonAdapterInvoked() {
   }
 
   public void testJsonAdapterFactoryInvoked() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String json = gson.toJson(new C("bar"));
     assertEquals("\"jsonAdapterFactory\"", json);
     C c = gson.fromJson("\"bar\"", C.class);
@@ -123,18 +123,18 @@ public A deserialize(JsonElement json, Type typeOfT,
 
   public void testIncorrectTypeAdapterFails() {
     try {
-      String json = new Gson().toJson(new ClassWithIncorrectJsonAdapter("bar"));
+      String json = Gson.newGson().toJson(new ClassWithIncorrectJsonAdapter("bar"));
       fail(json);
     } catch (ClassCastException expected) {}
   }
 
   public void testSuperclassTypeAdapterNotInvoked() {
-    String json = new Gson().toJson(new B("bar"));
+    String json = Gson.newGson().toJson(new B("bar"));
     assertFalse(json.contains("jsonAdapter"));
   }
 
   public void testNullSafeObjectFromJson() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     NullableClass fromJson = gson.fromJson("null", NullableClass.class);
     assertNull(fromJson);
   }
@@ -252,7 +252,7 @@ public NullableClass read(JsonReader in) throws IOException {
 
   public void testIncorrectJsonAdapterType() {
     try {
-      new Gson().toJson(new D());
+      Gson.newGson().toJson(new D());
       fail();
     } catch (IllegalArgumentException expected) {}
   }
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
index 8be669e0f..5b3156987 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
@@ -36,7 +36,7 @@
  */
 public final class JsonAdapterAnnotationOnFieldsTest extends TestCase {
   public void testClassAnnotationAdapterTakesPrecedenceOverDefault() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String json = gson.toJson(new Computer(new User("Inderjeet Singh")));
     assertEquals("{\"user\":\"UserClassAnnotationAdapter\"}", json);
     Computer computer = gson.fromJson("{'user':'Inderjeet Singh'}", Computer.class);
@@ -44,7 +44,7 @@ public void testClassAnnotationAdapterTakesPrecedenceOverDefault() {
   }
 
   public void testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String json = gson.toJson(new Gizmo(new Part("Part")));
     assertEquals("{\"part\":\"GizmoPartTypeAdapterFactory\"}", json);
     Gizmo computer = gson.fromJson("{'part':'Part'}", Gizmo.class);
@@ -78,7 +78,7 @@ public void testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter() {
   }
 
   public void testFieldAnnotationTakesPrecedenceOverClassAnnotation() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String json = gson.toJson(new Computer2(new User("Inderjeet Singh")));
     assertEquals("{\"user\":\"UserFieldAnnotationAdapter\"}", json);
     Computer2 target = gson.fromJson("{'user':'Interjeet Singh'}", Computer2.class);
@@ -188,7 +188,7 @@ private User(String name) {
   }
 
   public void testJsonAdapterInvokedOnlyForAnnotatedFields() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String json = "{'part1':'name','part2':{'name':'name2'}}";
     GadgetWithTwoParts gadget = gson.fromJson(json, GadgetWithTwoParts.class);
     assertEquals("PartJsonFieldAnnotationAdapter", gadget.part1.name);
@@ -205,7 +205,7 @@ public void testJsonAdapterInvokedOnlyForAnnotatedFields() {
   }
 
   public void testJsonAdapterWrappedInNullSafeAsRequested() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String fromJson = "{'part':null}";
 
     GadgetWithOptionalPart gadget = gson.fromJson(fromJson, GadgetWithOptionalPart.class);
@@ -226,7 +226,7 @@ private GadgetWithOptionalPart(Part part) {
 
   /** Regression test contributed through https://github.com/google/gson/issues/831 */
   public void testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String json = gson.toJson(new GadgetWithOptionalPart(new Part("foo")));
     assertEquals("{\"part\":\"PartJsonFieldAnnotationAdapter\"}", json);
     GadgetWithOptionalPart gadget = gson.fromJson("{'part':'foo'}", GadgetWithOptionalPart.class);
@@ -235,7 +235,7 @@ public void testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {
 
   /** Regression test contributed through https://github.com/google/gson/issues/831 */
   public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String json = gson.toJson(new GadgetWithPrimitivePart(42));
     assertEquals("{\"part\":\"42\"}", json);
     GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);
@@ -274,7 +274,7 @@ private GadgetWithPrimitivePart(long part) {
   }
 
   public void testFieldAnnotationWorksForParameterizedType() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String json = gson.toJson(new Gizmo2(Arrays.asList(new Part("Part"))));
     assertEquals("{\"part\":\"GizmoPartTypeAdapterFactory\"}", json);
     Gizmo2 computer = gson.fromJson("{'part':'Part'}", Gizmo2.class);
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterSerializerDeserializerTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterSerializerDeserializerTest.java
index 8ab4e128a..4d46a66f3 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterSerializerDeserializerTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterSerializerDeserializerTest.java
@@ -37,7 +37,7 @@
 public final class JsonAdapterSerializerDeserializerTest extends TestCase {
 
   public void testJsonSerializerDeserializerBasedJsonAdapterOnFields() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String json = gson.toJson(new Computer(new User("Inderjeet Singh"), null, new User("Jesse Wilson")));
     assertEquals("{\"user1\":\"UserSerializer\",\"user3\":\"UserSerializerDeserializer\"}", json);
     Computer computer = gson.fromJson("{'user2':'Jesse Wilson','user3':'Jake Wharton'}", Computer.class);
@@ -91,7 +91,7 @@ public User deserialize(JsonElement json, Type typeOfT, JsonDeserializationConte
   }
 
   public void testJsonSerializerDeserializerBasedJsonAdapterOnClass() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String json = gson.toJson(new Computer2(new User2("Inderjeet Singh")));
     assertEquals("{\"user\":\"UserSerializerDeserializer2\"}", json);
     Computer2 computer = gson.fromJson("{'user':'Inderjeet Singh'}", Computer2.class);
@@ -127,7 +127,7 @@ public User2 deserialize(JsonElement json, Type typeOfT, JsonDeserializationCont
 
   public void testDifferentJsonAdaptersForGenericFieldsOfSameRawType() {
     Container c = new Container("Foo", 10);
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String json = gson.toJson(c);
     assertTrue(json.contains("\"a\":\"BaseStringAdapter\""));
     assertTrue(json.contains("\"b\":\"BaseIntegerAdapter\""));
diff --git a/gson/src/test/java/com/google/gson/functional/JsonParserTest.java b/gson/src/test/java/com/google/gson/functional/JsonParserTest.java
index 1da6a6f29..82e57e538 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonParserTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JsonParserTest.java
@@ -16,24 +16,13 @@
 
 package com.google.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonParser;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.reflect.TypeToken;
-
-import junit.framework.TestCase;
-
-import java.io.StringReader;
-import java.lang.reflect.Type;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Map;
+import com.google.gson.*;
+import com.google.gson.common.TestTypes.*;
+import com.google.gson.reflect.*;
+import java.io.*;
+import java.lang.reflect.*;
+import java.util.*;
+import junit.framework.*;
 
 /**
  * Functional tests for that use JsonParser and related Gson methods
@@ -47,7 +36,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testParseInvalidJson() {
@@ -112,7 +101,7 @@ public void testBadFieldTypeForDeserializingCustomTree() {
   public void testChangingCustomTreeAndDeserializing() {
     StringReader json =
       new StringReader("{'stringValue':'no message','intValue':10,'longValue':20}");
-    JsonObject obj = (JsonObject) JsonParser.parseReader(json);
+    JsonObject obj = (JsonObject) Gson.parseReader(json);
     obj.remove("stringValue");
     obj.addProperty("stringValue", "fooBar");
     BagOfPrimitives target = gson.fromJson(obj, BagOfPrimitives.class);
diff --git a/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java b/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java
index a64794030..08e2d3396 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java
@@ -23,7 +23,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testToJsonTree() {
diff --git a/gson/src/test/java/com/google/gson/functional/LeniencyTest.java b/gson/src/test/java/com/google/gson/functional/LeniencyTest.java
deleted file mode 100644
index 9d0e1ff7d..000000000
--- a/gson/src/test/java/com/google/gson/functional/LeniencyTest.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- * Copyright (C) 2016 The Gson Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.reflect.TypeToken;
-import java.util.List;
-import junit.framework.TestCase;
-
-import static java.util.Collections.singletonList;
-
-/**
- * Functional tests for leniency option.
- */
-public class LeniencyTest extends TestCase {
-
-  private Gson gson;
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    gson = Gson.newBuilder().setLenient().build();
-  }
-
-  public void testLenientFromJson() {
-    List<String> json = gson.fromJson(""
-        + "[ # One!\n"
-        + "  'Hi' #Element!\n"
-        + "] # Array!", new TypeToken<List<String>>() {}.getType());
-    assertEquals(singletonList("Hi"), json);
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/functional/MapTest.java b/gson/src/test/java/com/google/gson/functional/MapTest.java
index e1809ae5d..c7135b5f6 100644
--- a/gson/src/test/java/com/google/gson/functional/MapTest.java
+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java
@@ -16,34 +16,14 @@
 
 package com.google.gson.functional;
 
-import java.lang.reflect.Type;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.SortedMap;
-import java.util.TreeMap;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.ConcurrentNavigableMap;
-import java.util.concurrent.ConcurrentSkipListMap;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonParser;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.common.TestTypes;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
-
-import junit.framework.TestCase;
+import com.google.gson.*;
+import com.google.gson.common.*;
+import com.google.gson.internal.*;
+import com.google.gson.reflect.*;
+import java.lang.reflect.*;
+import java.util.*;
+import java.util.concurrent.*;
+import junit.framework.*;
 
 /**
  * Functional test for Json serialization and deserialization for Maps
@@ -57,7 +37,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testMapSerialization() {
@@ -455,7 +435,7 @@ public void testSerializeMaps() {
 
     innerMap.put("d", "e");
     assertEquals("{\"a\":12,\"c\":{\"test\":1,\"TestStringArray\":[\"one\",\"two\"],\"d\":\"e\"}}",
-        new Gson().toJson(map));
+        Gson.newGson().toJson(map));
   }
 
   public final void testInterfaceTypeMap() {
@@ -464,7 +444,7 @@ public final void testInterfaceTypeMap() {
     element.addBase("Test", subType);
     element.addSub("Test", subType);
 
-    String subTypeJson = new Gson().toJson(subType);
+    String subTypeJson = Gson.newGson().toJson(subType);
     String expected = "{\"bases\":{\"Test\":" + subTypeJson + "},"
       + "\"subs\":{\"Test\":" + subTypeJson + "}}";
 
@@ -474,7 +454,7 @@ public final void testInterfaceTypeMap() {
     String json = gsonWithComplexKeys.toJson(element);
     assertEquals(expected, json);
 
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     json = gson.toJson(element);
     assertEquals(expected, json);
   }
@@ -485,7 +465,7 @@ public final void testInterfaceTypeMapWithSerializer() {
     element.addBase("Test", subType);
     element.addSub("Test", subType);
 
-    Gson tempGson = new Gson();
+    Gson tempGson = Gson.newGson();
     String subTypeJson = tempGson.toJson(subType);
     final JsonElement baseTypeJsonElement = tempGson.toJsonTree(subType, TestTypes.Base.class);
     String baseTypeJson = tempGson.toJson(baseTypeJsonElement);
@@ -608,7 +588,7 @@ public void testMapNamePromotionWithJsonElementReader() {
     String json = "{'2.3':'a'}";
     Map<Double, String> map = new LinkedHashMap<Double, String>();
     map.put(2.3, "a");
-    JsonElement tree = JsonParser.parseString(json);
+    JsonElement tree = Gson.parseString(json);
     assertEquals(map, gson.fromJson(tree, new TypeToken<Map<Double, String>>() {}.getType()));
   }
 
diff --git a/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java b/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java
index 7ecbffc84..cc1a2f86e 100644
--- a/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java
+++ b/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java
@@ -38,7 +38,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testSubclassFields() {
diff --git a/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java b/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java
index b8725282a..4580dbe95 100644
--- a/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java
+++ b/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java
@@ -148,7 +148,7 @@ public void testDeprecatedNamingStrategy() throws Exception {
   }
 
   public void testComplexFieldNameStrategy() throws Exception {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String json = gson.toJson(new ClassWithComplexFieldName(10));
     String escapedFieldName = "@value\\\"_s$\\\\";
     assertEquals("{\"" + escapedFieldName + "\":10}", json);
@@ -159,7 +159,7 @@ public void testComplexFieldNameStrategy() throws Exception {
 
   /** http://code.google.com/p/google-gson/issues/detail?id=349 */
   public void testAtSignInSerializedName() {
-    assertEquals("{\"@foo\":\"bar\"}", new Gson().toJson(new AtName()));
+    assertEquals("{\"@foo\":\"bar\"}", Gson.newGson().toJson(new AtName()));
   }
 
   static final class AtName {
diff --git a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java b/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
index 5f500491f..4cff5757a 100644
--- a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
+++ b/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
@@ -151,7 +151,7 @@ public void testPrintPrintingArraysWithNulls() throws Exception {
 
   // test for issue 389
   public void testAbsentJsonElementsAreSetToNull() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     ClassWithInitializedMembers target =
         gson.fromJson("{array:[1,2,3]}", ClassWithInitializedMembers.class);
     assertTrue(target.array.length == 3 && target.array[1] == 2);
@@ -201,7 +201,7 @@ public ClassWithInitializedMembers() {
   }
 
   public void testExplicitNullSetsFieldToNullDuringDeserialization() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String json = "{value:null}";
     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class);
     assertNull(obj.value);
diff --git a/gson/src/test/java/com/google/gson/functional/ObjectTest.java b/gson/src/test/java/com/google/gson/functional/ObjectTest.java
index 6337195ad..258baf7e8 100644
--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java
+++ b/gson/src/test/java/com/google/gson/functional/ObjectTest.java
@@ -60,7 +60,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
 
     TimeZone.setDefault(TimeZone.getTimeZone("America/Los_Angeles"));
     Locale.setDefault(Locale.US);
@@ -463,7 +463,7 @@ public void testJsonObjectSerialization() {
    * Test for issue 215.
    */
   public void testSingletonLists() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     Product product = new Product();
     assertEquals("{\"attributes\":[],\"departments\":[]}",
         gson.toJson(product));
diff --git a/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java b/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java
index 4b67186d0..50bffa6ec 100644
--- a/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java
+++ b/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java
@@ -48,7 +48,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testParameterizedTypesSerialization() throws Exception {
diff --git a/gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java b/gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java
index 69ff1f3f2..da541cb7e 100644
--- a/gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java
+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java
@@ -32,7 +32,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testPrimitiveCharacterAutoboxedSerialization() {
diff --git a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java
index 470c463da..441d039d4 100644
--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java
+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java
@@ -42,7 +42,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testPrimitiveIntegerAutoboxedSerialization() {
@@ -333,7 +333,7 @@ public void testBadValueForBigIntegerDeserialization() {
   }
 
   public void testMoreSpecificSerialization() {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String expected = "This is a string";
     String expectedJson = gson.toJson(expected);
 
diff --git a/gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java b/gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java
index 28a005699..0e3ed9564 100644
--- a/gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java
+++ b/gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java
@@ -42,7 +42,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   @SuppressWarnings({"unchecked", "rawtypes"})
diff --git a/gson/src/test/java/com/google/gson/functional/RawSerializationTest.java b/gson/src/test/java/com/google/gson/functional/RawSerializationTest.java
index d5e8883e7..a48a911a4 100644
--- a/gson/src/test/java/com/google/gson/functional/RawSerializationTest.java
+++ b/gson/src/test/java/com/google/gson/functional/RawSerializationTest.java
@@ -35,7 +35,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testCollectionOfPrimitives() {
diff --git a/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java b/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java
index 946ad2bea..b2f1e19b5 100644
--- a/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java
+++ b/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java
@@ -45,7 +45,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testWriterForSerialization() throws Exception {
@@ -89,7 +89,7 @@ public void testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls() {
   }
 
   public void testReadWriteTwoStrings() throws IOException {
-    Gson gson= new Gson();
+    Gson gson= Gson.newGson();
     CharArrayWriter writer= new CharArrayWriter();
     writer.write(gson.toJson("one").toCharArray());
     writer.write(gson.toJson("two").toCharArray());
@@ -102,7 +102,7 @@ public void testReadWriteTwoStrings() throws IOException {
   }
 
   public void testReadWriteTwoObjects() throws IOException {
-    Gson gson= new Gson();
+    Gson gson= Gson.newGson();
     CharArrayWriter writer= new CharArrayWriter();
     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one");
     writer.write(gson.toJson(expectedOne).toCharArray());
diff --git a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java b/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
index 1284e2c9b..0ff9579a9 100644
--- a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
+++ b/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
@@ -39,7 +39,7 @@
  */
 public final class RuntimeTypeAdapterFactoryFunctionalTest extends TestCase {
 
-  private final Gson gson = new Gson();
+  private final Gson gson = Gson.newGson();
 
   /**
    * This test also ensures that {@link TypeAdapterFactory} registered through {@link JsonAdapter}
diff --git a/gson/src/test/java/com/google/gson/functional/SerializedNameTest.java b/gson/src/test/java/com/google/gson/functional/SerializedNameTest.java
index 0314ae0af..b0acbb664 100644
--- a/gson/src/test/java/com/google/gson/functional/SerializedNameTest.java
+++ b/gson/src/test/java/com/google/gson/functional/SerializedNameTest.java
@@ -21,7 +21,7 @@
 import junit.framework.TestCase;
 
 public final class SerializedNameTest extends TestCase {
-  private final Gson gson = new Gson();
+  private final Gson gson = Gson.newGson();
 
   public void testFirstNameIsChosenForSerialization() {
     MyClass target = new MyClass("v1", "v2");
diff --git a/gson/src/test/java/com/google/gson/functional/StringTest.java b/gson/src/test/java/com/google/gson/functional/StringTest.java
index 7dcf6f0f5..c444fdc69 100644
--- a/gson/src/test/java/com/google/gson/functional/StringTest.java
+++ b/gson/src/test/java/com/google/gson/functional/StringTest.java
@@ -16,7 +16,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testStringValueSerialization() throws Exception {
diff --git a/gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java b/gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java
index f6ae748a5..3e4462648 100644
--- a/gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java
+++ b/gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java
@@ -10,7 +10,7 @@
 
 @SuppressWarnings("serial")
 public final class ThrowableFunctionalTest extends TestCase {
-  private final Gson gson = new Gson();
+  private final Gson gson = Gson.newGson();
 
   public void testExceptionWithoutCause() {
     RuntimeException e = new RuntimeException("hello");
diff --git a/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java b/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java
index 2d7503eb3..d0e993a38 100644
--- a/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java
+++ b/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java
@@ -36,7 +36,7 @@
 public class TypeVariableTest extends TestCase {
 
   public void testAdvancedTypeVariables() throws Exception {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     Bar bar1 = new Bar("someString", 1, true);
     ArrayList<Integer> arrayList = new ArrayList<Integer>();
     arrayList.add(1);
@@ -51,7 +51,7 @@ public void testAdvancedTypeVariables() throws Exception {
   }
 
   public void testTypeVariablesViaTypeParameter() throws Exception {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     Foo<String, Integer> original = new Foo<String, Integer>("e", 5, false);
     original.map.put("f", Arrays.asList(6, 7));
     Type type = new TypeToken<Foo<String, Integer>>() {}.getType();
@@ -62,7 +62,7 @@ public void testTypeVariablesViaTypeParameter() throws Exception {
   }
 
   public void testBasicTypeVariables() throws Exception {
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     Blue blue1 = new Blue(true);
     String json = gson.toJson(blue1);
 
diff --git a/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java b/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java
index d9875ad2f..aaab5d964 100644
--- a/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java
+++ b/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java
@@ -44,7 +44,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
 
   public void testInvalidJsonDeserializationFails() throws Exception {
diff --git a/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java b/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java
index 4c4dd8df9..bd6bc743b 100644
--- a/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java
+++ b/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java
@@ -17,7 +17,7 @@
 package com.google.gson.internal.bind;
 
 import com.google.gson.JsonElement;
-import com.google.gson.JsonParser;
+import com.google.gson.Gson;
 import com.google.gson.stream.JsonToken;
 import java.io.IOException;
 import junit.framework.TestCase;
@@ -26,7 +26,7 @@
 public final class JsonElementReaderTest extends TestCase {
 
   public void testNumbers() throws IOException {
-    JsonElement element = JsonParser.parseString("[1, 2, 3]");
+    JsonElement element = Gson.parseString("[1, 2, 3]");
     JsonTreeReader reader = new JsonTreeReader(element);
     reader.beginArray();
     assertEquals(1, reader.nextInt());
@@ -36,7 +36,7 @@ public void testNumbers() throws IOException {
   }
 
   public void testLenientNansAndInfinities() throws IOException {
-    JsonElement element = JsonParser.parseString("[NaN, -Infinity, Infinity]");
+    JsonElement element = Gson.parseString("[NaN, -Infinity, Infinity]");
     JsonTreeReader reader = new JsonTreeReader(element);
     reader.setLenient(true);
     reader.beginArray();
@@ -47,7 +47,7 @@ public void testLenientNansAndInfinities() throws IOException {
   }
 
   public void testStrictNansAndInfinities() throws IOException {
-    JsonElement element = JsonParser.parseString("[NaN, -Infinity, Infinity]");
+    JsonElement element = Gson.parseString("[NaN, -Infinity, Infinity]");
     JsonTreeReader reader = new JsonTreeReader(element);
     reader.setLenient(false);
     reader.beginArray();
@@ -73,7 +73,7 @@ public void testStrictNansAndInfinities() throws IOException {
   }
 
   public void testNumbersFromStrings() throws IOException {
-    JsonElement element = JsonParser.parseString("[\"1\", \"2\", \"3\"]");
+    JsonElement element = Gson.parseString("[\"1\", \"2\", \"3\"]");
     JsonTreeReader reader = new JsonTreeReader(element);
     reader.beginArray();
     assertEquals(1, reader.nextInt());
@@ -83,7 +83,7 @@ public void testNumbersFromStrings() throws IOException {
   }
 
   public void testStringsFromNumbers() throws IOException {
-    JsonElement element = JsonParser.parseString("[1]");
+    JsonElement element = Gson.parseString("[1]");
     JsonTreeReader reader = new JsonTreeReader(element);
     reader.beginArray();
     assertEquals("1", reader.nextString());
@@ -91,7 +91,7 @@ public void testStringsFromNumbers() throws IOException {
   }
 
   public void testBooleans() throws IOException {
-    JsonElement element = JsonParser.parseString("[true, false]");
+    JsonElement element = Gson.parseString("[true, false]");
     JsonTreeReader reader = new JsonTreeReader(element);
     reader.beginArray();
     assertEquals(true, reader.nextBoolean());
@@ -100,7 +100,7 @@ public void testBooleans() throws IOException {
   }
 
   public void testNulls() throws IOException {
-    JsonElement element = JsonParser.parseString("[null,null]");
+    JsonElement element = Gson.parseString("[null,null]");
     JsonTreeReader reader = new JsonTreeReader(element);
     reader.beginArray();
     reader.nextNull();
@@ -109,7 +109,7 @@ public void testNulls() throws IOException {
   }
 
   public void testStrings() throws IOException {
-    JsonElement element = JsonParser.parseString("[\"A\",\"B\"]");
+    JsonElement element = Gson.parseString("[\"A\",\"B\"]");
     JsonTreeReader reader = new JsonTreeReader(element);
     reader.beginArray();
     assertEquals("A", reader.nextString());
@@ -118,7 +118,7 @@ public void testStrings() throws IOException {
   }
 
   public void testArray() throws IOException {
-    JsonElement element = JsonParser.parseString("[1, 2, 3]");
+    JsonElement element = Gson.parseString("[1, 2, 3]");
     JsonTreeReader reader = new JsonTreeReader(element);
     assertEquals(JsonToken.BEGIN_ARRAY, reader.peek());
     reader.beginArray();
@@ -134,7 +134,7 @@ public void testArray() throws IOException {
   }
 
   public void testObject() throws IOException {
-    JsonElement element = JsonParser.parseString("{\"A\": 1, \"B\": 2}");
+    JsonElement element = Gson.parseString("{\"A\": 1, \"B\": 2}");
     JsonTreeReader reader = new JsonTreeReader(element);
     assertEquals(JsonToken.BEGIN_OBJECT, reader.peek());
     reader.beginObject();
@@ -152,14 +152,14 @@ public void testObject() throws IOException {
   }
 
   public void testEmptyArray() throws IOException {
-    JsonElement element = JsonParser.parseString("[]");
+    JsonElement element = Gson.parseString("[]");
     JsonTreeReader reader = new JsonTreeReader(element);
     reader.beginArray();
     reader.endArray();
   }
 
   public void testNestedArrays() throws IOException {
-    JsonElement element = JsonParser.parseString("[[],[[]]]");
+    JsonElement element = Gson.parseString("[[],[[]]]");
     JsonTreeReader reader = new JsonTreeReader(element);
     reader.beginArray();
     reader.beginArray();
@@ -172,7 +172,7 @@ public void testNestedArrays() throws IOException {
   }
 
   public void testNestedObjects() throws IOException {
-    JsonElement element = JsonParser.parseString("{\"A\":{},\"B\":{\"C\":{}}}");
+    JsonElement element = Gson.parseString("{\"A\":{},\"B\":{\"C\":{}}}");
     JsonTreeReader reader = new JsonTreeReader(element);
     reader.beginObject();
     assertEquals("A", reader.nextName());
@@ -188,14 +188,14 @@ public void testNestedObjects() throws IOException {
   }
 
   public void testEmptyObject() throws IOException {
-    JsonElement element = JsonParser.parseString("{}");
+    JsonElement element = Gson.parseString("{}");
     JsonTreeReader reader = new JsonTreeReader(element);
     reader.beginObject();
     reader.endObject();
   }
 
   public void testSkipValue() throws IOException {
-    JsonElement element = JsonParser.parseString("[\"A\",{\"B\":[[]]},\"C\",[[]],\"D\",null]");
+    JsonElement element = Gson.parseString("[\"A\",{\"B\":[[]]},\"C\",[[]],\"D\",null]");
     JsonTreeReader reader = new JsonTreeReader(element);
     reader.beginArray();
     assertEquals("A", reader.nextString());
@@ -208,7 +208,7 @@ public void testSkipValue() throws IOException {
   }
 
   public void testWrongType() throws IOException {
-    JsonElement element = JsonParser.parseString("[[],\"A\"]");
+    JsonElement element = Gson.parseString("[[],\"A\"]");
     JsonTreeReader reader = new JsonTreeReader(element);
     reader.beginArray();
     try {
@@ -299,7 +299,7 @@ public void testWrongType() throws IOException {
   }
 
   public void testEarlyClose() throws IOException {
-    JsonElement element = JsonParser.parseString("[1, 2, 3]");
+    JsonElement element = Gson.parseString("[1, 2, 3]");
     JsonTreeReader reader = new JsonTreeReader(element);
     reader.beginArray();
     reader.close();
diff --git a/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java b/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java
index 0f7c428d0..6c6843b1b 100644
--- a/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java
+++ b/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java
@@ -47,7 +47,7 @@
    */
 
   public void testRecursiveResolveSimple() {
-    TypeAdapter<Foo1> adapter = new Gson().getAdapter(Foo1.class);
+    TypeAdapter<Foo1> adapter = Gson.newGson().getAdapter(Foo1.class);
     assertNotNull(adapter);
   }
 
@@ -56,12 +56,12 @@ public void testRecursiveResolveSimple() {
    */
 
   public void testIssue603PrintStream() {
-    TypeAdapter<PrintStream> adapter = new Gson().getAdapter(PrintStream.class);
+    TypeAdapter<PrintStream> adapter = Gson.newGson().getAdapter(PrintStream.class);
     assertNotNull(adapter);
   }
 
   public void testIssue440WeakReference() throws Exception {
-    TypeAdapter<WeakReference> adapter = new Gson().getAdapter(WeakReference.class);
+    TypeAdapter<WeakReference> adapter = Gson.newGson().getAdapter(WeakReference.class);
     assertNotNull(adapter);
   }
 
@@ -102,12 +102,12 @@ public void testSubSupertype() {
   }
 
   public void testRecursiveTypeVariablesResolve1() throws Exception {
-    TypeAdapter<TestType> adapter = new Gson().getAdapter(TestType.class);
+    TypeAdapter<TestType> adapter = Gson.newGson().getAdapter(TestType.class);
     assertNotNull(adapter);
   }
 
   public void testRecursiveTypeVariablesResolve12() throws Exception {
-    TypeAdapter<TestType2> adapter = new Gson().getAdapter(TestType2.class);
+    TypeAdapter<TestType2> adapter = Gson.newGson().getAdapter(TestType2.class);
     assertNotNull(adapter);
   }
 }
diff --git a/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java b/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java
index d05cf4be1..1cfdc4c75 100644
--- a/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java
+++ b/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java
@@ -47,7 +47,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = Gson.newGson();
   }
   
   public void testDummy() {
@@ -270,7 +270,7 @@ public void disabled_testLargeGsonMapRoundTrip() throws Exception {
       original.put(i, i + 1);
     }
 
-    Gson gson = new Gson();
+    Gson gson = Gson.newGson();
     String json = gson.toJson(original);
     Type longToLong = new TypeToken<Map<Long, Long>>(){}.getType();
     gson.fromJson(json, longToLong);
diff --git a/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java b/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
index 30a6775c8..f816b5c5e 100644
--- a/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
+++ b/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
@@ -24,7 +24,7 @@
 import junit.framework.TestCase;
 
 public class JsonAdapterNullSafeTest extends TestCase {
-  private final Gson gson = new Gson();
+  private final Gson gson = Gson.newGson();
 
   public void testNullSafeBugSerialize() throws Exception {
     Device device = new Device("ec57803e");
diff --git a/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitivesDeserializationBenchmark.java b/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitivesDeserializationBenchmark.java
index 8e6ea2b24..25e99740b 100644
--- a/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitivesDeserializationBenchmark.java
+++ b/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitivesDeserializationBenchmark.java
@@ -42,7 +42,7 @@ public static void main(String[] args) {
   
   @Override
   protected void setUp() throws Exception {
-    this.gson = new Gson();
+    this.gson = Gson.newGson();
     BagOfPrimitives bag = new BagOfPrimitives(10L, 1, false, "foo");
     this.json = gson.toJson(bag);
   }
diff --git a/metrics/src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java b/metrics/src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java
index 09a5782ab..c128ebfd2 100644
--- a/metrics/src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java
+++ b/metrics/src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java
@@ -45,7 +45,7 @@ public static void main(String[] args) {
   
   @Override
   protected void setUp() throws Exception {
-    this.gson = new Gson();
+    this.gson = Gson.newGson();
     List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();
     for (int i = 0; i < 100; ++i) {
       bags.add(new BagOfPrimitives(10L, 1, false, "foo"));
diff --git a/metrics/src/main/java/com/google/gson/metrics/SerializationBenchmark.java b/metrics/src/main/java/com/google/gson/metrics/SerializationBenchmark.java
index be710eae7..1c831514b 100644
--- a/metrics/src/main/java/com/google/gson/metrics/SerializationBenchmark.java
+++ b/metrics/src/main/java/com/google/gson/metrics/SerializationBenchmark.java
@@ -41,7 +41,7 @@ public static void main(String[] args) {
   
   @Override
   protected void setUp() throws Exception {
-    this.gson = pretty ? Gson.newBuilder().setPrettyPrinting().build() : new Gson();
+    this.gson = pretty ? Gson.newBuilder().setPrettyPrinting().build() : Gson.newGson();
     this.bag = new BagOfPrimitives(10L, 1, false, "foo");
   }
 
