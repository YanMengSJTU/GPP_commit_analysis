diff --git a/gson/src/main/java/com/google/gson/DateFormatType.java b/gson/src/main/java/com/google/gson/DateFormatType.java
index d6efeb46e..fbf34b15d 100644
--- a/gson/src/main/java/com/google/gson/DateFormatType.java
+++ b/gson/src/main/java/com/google/gson/DateFormatType.java
@@ -1,5 +1,5 @@
 package com.google.gson;
 
 public enum DateFormatType {
-	EN_US, LOCAL, ISO_8601, DEFAULT;
+	EN_US, LOCAL, ISO_8601, CUSTOM;
 }
diff --git a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
index 3f529397c..020fa0cb3 100644
--- a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
@@ -43,29 +43,35 @@
 	
 	private final EnumMap<DateFormatType, DateFormatter> dateFormats;
 	private final DateFormatType outputDateFormatType;
-	
-  private final DateFormat enUsFormat;
-  private final DateFormat localFormat;
 
   DefaultDateTypeAdapter() {
     this(DateFormatType.EN_US);
   }
   
-  DefaultDateTypeAdapter(DateFormatType outputFormat) {
+  DefaultDateTypeAdapter(DateFormatType outputFormatType) {
     this(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US),
         DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT),
-        outputFormat);
+        outputFormatType);
   }
 
   DefaultDateTypeAdapter(String datePattern) {
+    this(datePattern,
+    		DateFormatType.EN_US);
+  }
+  
+  DefaultDateTypeAdapter(String datePattern, DateFormatType outputFormatType) {
     this(new SimpleDateFormat(datePattern, Locale.US),
     		new SimpleDateFormat(datePattern),
     		DateFormatType.EN_US);
   }
   
+  DefaultDateTypeAdapter(DateFormat dateFormat, DateFormatType outputFormatType) {
+  	this(outputFormatType);
+    dateFormats.put(DateFormatType.CUSTOM, new SimpleDateFormatter(dateFormat));
+  }
+  
   DefaultDateTypeAdapter(DateFormat dateFormat) {
-  	this(DateFormatType.EN_US);
-    dateFormats.put(DateFormatType.DEFAULT, new SimpleDateFormatter(dateFormat));
+  	this(dateFormat, DateFormatType.EN_US);
   }
 
   DefaultDateTypeAdapter(int style) {
@@ -87,18 +93,18 @@ public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {
   }
 
   DefaultDateTypeAdapter(DateFormat enUsFormat, DateFormat localFormat, DateFormatType outputFormat) {
+  	
+  	// Make sure every DateFormatType is present in dateFormats
   	dateFormats = new EnumMap<DateFormatType, DateFormatter>(DateFormatType.class);
   	SimpleDateFormatter usFormatter = new SimpleDateFormatter(enUsFormat);
   	dateFormats.put(DateFormatType.EN_US, usFormatter);
   	
   	// Set Custom to US to prevent null pointer
-  	dateFormats.put(DateFormatType.DEFAULT, usFormatter);
+  	dateFormats.put(DateFormatType.CUSTOM, usFormatter);
   	dateFormats.put(DateFormatType.LOCAL, new SimpleDateFormatter(localFormat));
   	dateFormats.put(DateFormatType.ISO_8601, ISO8601DateFormater.getInstance());
   	
   	outputDateFormatType = outputFormat;
-    this.enUsFormat = enUsFormat;
-    this.localFormat = localFormat;
   }
 
   @Override
@@ -146,7 +152,7 @@ private Date deserializeToDate(JsonElement json) {
   public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append(DefaultDateTypeAdapter.class.getSimpleName());
-    sb.append('(').append(localFormat.getClass().getSimpleName()).append(')');
+    sb.append('(').append(dateFormats.get(DateFormatType.LOCAL).toString()).append(')');
     return sb.toString();
   }
 }
diff --git a/gson/src/main/java/com/google/gson/GsonBuilder.java b/gson/src/main/java/com/google/gson/GsonBuilder.java
index e966c7f16..7d2444aa0 100644
--- a/gson/src/main/java/com/google/gson/GsonBuilder.java
+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java
@@ -77,7 +77,7 @@
   private boolean serializeNulls;
   private String datePattern;
   private DateFormat customDateFormat;
-  private DateFormatType outputDateFormat = DateFormatType.DEFAULT;
+  private DateFormatType outputDateFormatType = DateFormatType.EN_US;
   private int dateStyle = DateFormat.DEFAULT;
   private int timeStyle = DateFormat.DEFAULT;
   private boolean complexMapKeySerialization;
@@ -428,6 +428,23 @@ public GsonBuilder setDateFormat(int style) {
     this.customDateFormat = null;
     return this;
   }
+  
+  // TODO
+  /**
+   * Configures Gson to serialize {@code Date} objects according to the date format type value provided.
+   *
+   * <p>Note that this style value should be one of the predefined constants in the
+   * {@code DateFormatType} class.</p>
+   *
+   * @param outputDateFormatType the predefined date format type that date objects will be serialized
+   * to/from
+   * @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern
+   * @since 1.2
+   */
+  public GsonBuilder setDateFormatType(DateFormatType outputDateFormatType) {
+    this.outputDateFormatType = outputDateFormatType;
+    return this;
+  }
 
   /**
    * Configures Gson to to serialize {@code Date} objects according to the style value provided.
@@ -565,7 +582,7 @@ public Gson create() {
     factories.addAll(this.factories);
     Collections.reverse(factories);
     factories.addAll(this.hierarchyFactories);
-    addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, customDateFormat, factories);
+    addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, customDateFormat, outputDateFormatType, factories);
 
     return new Gson(excluder, fieldNamingPolicy, instanceCreators,
         serializeNulls, complexMapKeySerialization,
@@ -573,15 +590,15 @@ public Gson create() {
         serializeSpecialFloatingPointValues, longSerializationPolicy, factories);
   }
 
-  private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, DateFormat dateFormat,
+  private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle, DateFormat dateFormat, DateFormatType outputDateFormatType,
       List<TypeAdapterFactory> factories) {
     DefaultDateTypeAdapter dateTypeAdapter;
     if(dateFormat != null){
-    	dateTypeAdapter = new DefaultDateTypeAdapter(dateFormat);
+    	dateTypeAdapter = new DefaultDateTypeAdapter(dateFormat, outputDateFormatType);
     } else if (datePattern != null && !"".equals(datePattern.trim())) {
-      dateTypeAdapter = new DefaultDateTypeAdapter(datePattern);
+      dateTypeAdapter = new DefaultDateTypeAdapter(datePattern, outputDateFormatType);
     } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {
-      dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle, timeStyle);
+      dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle, timeStyle, outputDateFormatType);
     } else {
       return;
     }
diff --git a/gson/src/main/java/com/google/gson/SimpleDateFormatter.java b/gson/src/main/java/com/google/gson/SimpleDateFormatter.java
index c21078d41..9818c8a3c 100644
--- a/gson/src/main/java/com/google/gson/SimpleDateFormatter.java
+++ b/gson/src/main/java/com/google/gson/SimpleDateFormatter.java
@@ -28,4 +28,10 @@ public Date parse(String dateAsString) throws ParseException {
 			return dateFormat.parse(dateAsString);
 		}
 	}
+	
+	@Override
+	public String toString()
+	{
+		return dateFormat.getClass().getSimpleName();
+	}
 }
\ No newline at end of file
diff --git a/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java b/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
index 05c6b735b..04cfc27d7 100644
--- a/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
+++ b/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
@@ -62,8 +62,7 @@ private void assertFormattingAlwaysEmitsUsLocale(Locale locale) {
     }
   }
   
-  // TODO with date frmat type output
-  /*public void testOutputFormattedWithCustomDateFormat()
+  public void testOutputFormattedWithCustomDateFormatType()
   {
   	TimeZone defaultTimeZone = TimeZone.getDefault();
     TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
@@ -71,14 +70,14 @@ private void assertFormattingAlwaysEmitsUsLocale(Locale locale) {
     Locale.setDefault(Locale.US);
     
     SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
-  	DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(dateFormat);
+  	DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(dateFormat, DateFormatType.CUSTOM);
     try {
     	assertFormatted("1970-01-01", dateTypeAdapter);
     } finally {
       TimeZone.setDefault(defaultTimeZone);
       Locale.setDefault(defaultLocale);
     }
-  }*/
+  }
   
   public void testOutputNotFormattedWithCustomDateFormat()
   {
@@ -114,29 +113,43 @@ public void testOutputFormattedWithIsoFormat()
     }
   }
   
-  // TODO date format output tpye to local with french
-  /*
-  public void testOutputFormattedWithCustomFranceFormatter()
+  public void testOutputFormattedWithLocalOutputDateFormatType()
   {
   	TimeZone defaultTimeZone = TimeZone.getDefault();
     TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
     Locale defaultLocale = Locale.getDefault();
-    Locale.setDefault(Locale.US);
+    Locale.setDefault(Locale.FRANCE);
     
-    DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.FRANCE);
-  	DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(dateFormat);
+  	DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(DateFormatType.LOCAL);
     try {
     	// Can parse US
     	assertParsed("Jan 1, 1970 12:00:00 AM", dateTypeAdapter);
     	// Can parse FR
     	assertParsed("1 janv. 1970 00:00:00", dateTypeAdapter);
     	// Formats as FR
-    	assertFormatted("Jan 1, 1970 12:00:00 AM", dateTypeAdapter);
+    	assertFormatted("1 janv. 1970 00:00:00", dateTypeAdapter);
     } finally {
       TimeZone.setDefault(defaultTimeZone);
       Locale.setDefault(defaultLocale);
     }
-  }*/
+  }
+  
+  public void testOutputFormattedWithISOOutputDateFormatTypeAndCustomDateFormat()
+  {
+  	TimeZone defaultTimeZone = TimeZone.getDefault();
+    TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
+    Locale defaultLocale = Locale.getDefault();
+    Locale.setDefault(Locale.US);
+    
+    DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.FRANCE);
+  	DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(dateFormat, DateFormatType.ISO_8601);
+    try {
+    	assertFormatted("1970-01-01T00:00:00.000Z", dateTypeAdapter);
+    } finally {
+      TimeZone.setDefault(defaultTimeZone);
+      Locale.setDefault(defaultLocale);
+    }
+  }
   
   public void testOutputFormattedUsWithDateTypeFormatCustomAndNoFormatter()
   {
@@ -145,7 +158,7 @@ public void testOutputFormattedUsWithDateTypeFormatCustomAndNoFormatter()
     Locale defaultLocale = Locale.getDefault();
     Locale.setDefault(Locale.US);
     
-  	DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(DateFormatType.DEFAULT);
+  	DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(DateFormatType.CUSTOM);
     try {
     	assertFormatted("Jan 1, 1970 12:00:00 AM", dateTypeAdapter);
     } finally {
