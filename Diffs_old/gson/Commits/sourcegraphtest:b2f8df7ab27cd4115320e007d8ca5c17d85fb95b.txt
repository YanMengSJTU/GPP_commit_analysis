diff --git a/metrics/javaconfig.json b/metrics/javaconfig.json
index a686fd487..61444858f 100644
--- a/metrics/javaconfig.json
+++ b/metrics/javaconfig.json
@@ -1,6 +1,117 @@
 {
-  "sourceDirectory" : "",
-  "testSourceDirectory" : "",
-  "repositories" : [ ],
-  "dependencies" : [ ]
+  "sourceDirectory" : "src/main/java",
+  "testSourceDirectory" : "src/test/java",
+  "repositories" : [ {
+    "id" : "sonatype-nexus-snapshots",
+    "url" : "https://oss.sonatype.org/content/repositories/snapshots"
+  }, {
+    "id" : "central",
+    "url" : "https://repo.maven.apache.org/maven2"
+  } ],
+  "dependencies" : [ {
+    "groupId" : "com.google.code.gson",
+    "artifactId" : "gson",
+    "version" : "2.8.1-SNAPSHOT",
+    "scope" : "compile",
+    "systemPath" : null,
+    "packages" : [ "com.google.gson.internal", "com.google.gson.internal.bind", "com.google.gson.stream", "com.google.gson", "com.google.gson.annotations", "com.google.gson.internal.bind.util", "com.google.gson.reflect" ]
+  }, {
+    "groupId" : "com.google.caliper",
+    "artifactId" : "caliper",
+    "version" : "0.5-rc1",
+    "scope" : "compile",
+    "systemPath" : null,
+    "packages" : [ "com.google.caliper.util", "com.google.caliper" ]
+  }, {
+    "groupId" : "com.google.code.findbugs",
+    "artifactId" : "jsr305",
+    "version" : "1.3.9",
+    "scope" : "compile",
+    "systemPath" : null,
+    "packages" : [ "javax.annotation", "javax.annotation.meta", "javax.annotation.concurrent" ]
+  }, {
+    "groupId" : "com.google.guava",
+    "artifactId" : "guava",
+    "version" : "11.0.1",
+    "scope" : "compile",
+    "systemPath" : null,
+    "packages" : [ "com.google.common.base.internal", "com.google.common.primitives", "com.google.common.cache", "com.google.common.base", "com.google.common.hash", "com.google.common.annotations", "com.google.common.eventbus", "com.google.common.util.concurrent", "com.google.common.net", "com.google.common.io", "com.google.common.collect", "com.google.common.math" ]
+  }, {
+    "groupId" : "com.google.code.java-allocation-instrumenter",
+    "artifactId" : "java-allocation-instrumenter",
+    "version" : "2.0",
+    "scope" : "compile",
+    "systemPath" : null,
+    "packages" : [ "com.google.monitoring.runtime.instrumentation" ]
+  }, {
+    "groupId" : "asm",
+    "artifactId" : "asm",
+    "version" : "3.3.1",
+    "scope" : "compile",
+    "systemPath" : null,
+    "packages" : [ "org.objectweb.asm.signature", "org.objectweb.asm" ]
+  }, {
+    "groupId" : "asm",
+    "artifactId" : "asm-analysis",
+    "version" : "3.3.1",
+    "scope" : "compile",
+    "systemPath" : null,
+    "packages" : [ "org.objectweb.asm.tree.analysis" ]
+  }, {
+    "groupId" : "asm",
+    "artifactId" : "asm-commons",
+    "version" : "3.3.1",
+    "scope" : "compile",
+    "systemPath" : null,
+    "packages" : [ "org.objectweb.asm.commons" ]
+  }, {
+    "groupId" : "asm",
+    "artifactId" : "asm-tree",
+    "version" : "3.3.1",
+    "scope" : "compile",
+    "systemPath" : null,
+    "packages" : [ "org.objectweb.asm.tree" ]
+  }, {
+    "groupId" : "asm",
+    "artifactId" : "asm-util",
+    "version" : "3.3.1",
+    "scope" : "compile",
+    "systemPath" : null,
+    "packages" : [ "org.objectweb.asm.util" ]
+  }, {
+    "groupId" : "asm",
+    "artifactId" : "asm-xml",
+    "version" : "3.3.1",
+    "scope" : "compile",
+    "systemPath" : null,
+    "packages" : [ "org.objectweb.asm.xml" ]
+  }, {
+    "groupId" : "com.fasterxml.jackson.core",
+    "artifactId" : "jackson-core",
+    "version" : "2.7.0",
+    "scope" : "compile",
+    "systemPath" : null,
+    "packages" : [ "com.fasterxml.jackson.core.format", "com.fasterxml.jackson.core.io", "com.fasterxml.jackson.core.json", "com.fasterxml.jackson.core.filter", "com.fasterxml.jackson.core", "com.fasterxml.jackson.core.util", "com.fasterxml.jackson.core.type", "com.fasterxml.jackson.core.base", "com.fasterxml.jackson.core.sym" ]
+  }, {
+    "groupId" : "com.fasterxml.jackson.core",
+    "artifactId" : "jackson-databind",
+    "version" : "2.7.0",
+    "scope" : "compile",
+    "systemPath" : null,
+    "packages" : [ "com.fasterxml.jackson.databind.exc", "com.fasterxml.jackson.databind.introspect", "com.fasterxml.jackson.databind.deser", "com.fasterxml.jackson.databind.jsontype", "com.fasterxml.jackson.databind.type", "com.fasterxml.jackson.databind.module", "com.fasterxml.jackson.databind.node", "com.fasterxml.jackson.databind.jsonFormatVisitors", "com.fasterxml.jackson.databind.jsontype.impl", "com.fasterxml.jackson.databind.ext", "com.fasterxml.jackson.databind.ser.std", "com.fasterxml.jackson.databind.util", "com.fasterxml.jackson.databind.jsonschema", "com.fasterxml.jackson.databind.ser", "com.fasterxml.jackson.databind.cfg", "com.fasterxml.jackson.databind.deser.impl", "com.fasterxml.jackson.databind.annotation", "com.fasterxml.jackson.databind", "com.fasterxml.jackson.databind.ser.impl", "com.fasterxml.jackson.databind.deser.std" ]
+  }, {
+    "groupId" : "com.fasterxml.jackson.core",
+    "artifactId" : "jackson-annotations",
+    "version" : "2.7.0",
+    "scope" : "compile",
+    "systemPath" : null,
+    "packages" : [ "com.fasterxml.jackson.annotation" ]
+  }, {
+    "groupId" : "junit",
+    "artifactId" : "junit",
+    "version" : "3.8.2",
+    "scope" : "test",
+    "systemPath" : null,
+    "packages" : [ "junit.extensions", "junit.awtui", "junit.swingui", "junit.textui", "junit.runner", "junit.framework" ]
+  } ]
 }
\ No newline at end of file
diff --git a/metrics/pom.xml b/metrics/pom.xml
index 9a084452c..93d84b9d0 100644
--- a/metrics/pom.xml
+++ b/metrics/pom.xml
@@ -41,12 +41,22 @@
     <dependency>
       <groupId>com.google.code.gson</groupId>
       <artifactId>gson</artifactId>
-      <version>1.7.2-SNAPSHOT</version>
+      <version>2.8.1-SNAPSHOT</version>
     </dependency>
     <dependency>
-      <groupId>com.google.code.caliper</groupId>
+      <groupId>com.google.caliper</groupId>
       <artifactId>caliper</artifactId>
-      <version>1.0-SNAPSHOT</version>
+      <version>0.5-rc1</version>
+    </dependency>
+    <dependency>
+      <groupId>com.fasterxml.jackson.core</groupId>
+      <artifactId>jackson-core</artifactId>
+      <version>2.7.0</version>
+    </dependency>
+    <dependency>
+      <groupId>com.fasterxml.jackson.core</groupId>
+      <artifactId>jackson-databind</artifactId>
+      <version>2.7.0</version>
     </dependency>
     <dependency>
       <groupId>junit</groupId>
diff --git a/metrics/src/main/java/com/google/gson/metrics/ParseBenchmark.java b/metrics/src/main/java/com/google/gson/metrics/ParseBenchmark.java
index 68134372c..32545c7dd 100644
--- a/metrics/src/main/java/com/google/gson/metrics/ParseBenchmark.java
+++ b/metrics/src/main/java/com/google/gson/metrics/ParseBenchmark.java
@@ -16,6 +16,10 @@
 
 package com.google.gson.metrics;
 
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.caliper.Param;
 import com.google.caliper.Runner;
 import com.google.caliper.SimpleBenchmark;
@@ -24,21 +28,12 @@
 import com.google.gson.JsonParser;
 import com.google.gson.annotations.SerializedName;
 import com.google.gson.reflect.TypeToken;
-import java.io.CharArrayReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.io.StringWriter;
+
+import java.io.*;
 import java.lang.reflect.Type;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.List;
-import org.codehaus.jackson.JsonFactory;
-import org.codehaus.jackson.annotate.JsonProperty;
-import org.codehaus.jackson.map.DeserializationConfig;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.type.TypeReference;
 
 /**
  * Measure Gson and Jackson parsing and binding performance.
@@ -197,8 +192,8 @@ public void parse(char[] data, Document document) throws Exception {
   private static class JacksonStreamParser implements Parser {
     public void parse(char[] data, Document document) throws Exception {
       JsonFactory jsonFactory = new JsonFactory();
-      org.codehaus.jackson.JsonParser jp = jsonFactory.createJsonParser(new CharArrayReader(data));
-      jp.configure(org.codehaus.jackson.JsonParser.Feature.CANONICALIZE_FIELD_NAMES, false);
+      com.fasterxml.jackson.core.JsonParser jp = jsonFactory.createJsonParser(new CharArrayReader(data));
+//      jp.configure(org.codehaus.jackson.JsonParser.Feature.CANONICALIZE_FIELD_NAMES, false);
       int depth = 0;
       do {
         switch (jp.nextToken()) {
@@ -246,8 +241,8 @@ public void parse(char[] data, Document document) throws Exception {
     private static ObjectMapper mapper = new ObjectMapper();
 
     static {
-      mapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);
-      mapper.configure(DeserializationConfig.Feature.AUTO_DETECT_FIELDS, true);
+//      mapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);
+//      mapper.configure(DeserializationConfig.Feature.AUTO_DETECT_FIELDS, true);
       mapper.setDateFormat(new SimpleDateFormat("EEE MMM dd HH:mm:ss Z yyyy"));
     }
 
