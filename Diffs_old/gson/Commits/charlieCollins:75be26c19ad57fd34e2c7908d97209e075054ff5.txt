diff --git a/gson/j2objc/readme.md b/gson/j2objc/readme.md
index 76f816eaf..b5ba7d4a3 100644
--- a/gson/j2objc/readme.md
+++ b/gson/j2objc/readme.md
@@ -6,34 +6,35 @@ Overview
 ----------
 
 Premises: 
-* This project is an attempt to understand how to share code across iOS and Android using j2objc 
+* This example project is an attempt to understand how to share code across iOS and Android using j2objc... 
+* j2objc is intended to transpile (source -> source) java code to objective-C   
 * j2objc is one way to share code across iOS and Android, it is interesting because: 
-   * It focuses on native code (webviews and frameworks that use them are nonstarters for performance and tweaks reasons)
-   * It focuses on non UI code (the logic that should be shared and is not idiomatic and not lowest comment demonimator)
-   * It provides well written source that can be used to debug
-   * It is written with a testing focus in mind, tests can be run across platform (so you know semantics, not just syntax, are correct) 
-   * It is written with performance and memory footprint in mind
-   * It is open source and maintained by very smart and capable people (tom et al at google) 
+   * Focus on native code (webviews and frameworks that use them are nonstarters for performance and tweaks reasons)
+   * Focus on non UI code (the logic that should be shared and is not idiomatic and not lowest comment demonimator)
+   * Provides well written source that can be used to debug 
+   * Written with a testing focus in mind, tests can be run across platform (so you know semantics, not just syntax, are correct) 
+   * Written with performance and memory footprint in mind
+   * Open source and maintained by very smart and capable people (tom et al at google) 
    * Out of the box it includes a JRE emulation library for core classes, and a useful and sensible set of 3rd party libs
 
-j2objc is intended to transpile (source -> source) java code to objective-C.   
-
-It's the DRY principle turned up to 11. Don't repeat yourself on other platforms either, if you can avoid it.   
+The idea of code sharing across mobile platforms is the DRY principle turned up to 11.   
 There are several ways to share native code on iOS and Android, these include C, j2objc, and maybe someday Kotlin and Swift.  j2objc is very well written and very performant and shares the code that you want to share, hence it is interesting and helpful.   
 
-For this project we have purposely chosen an existing Java library with a lot of source code and a lot of tests: gson. 
-This allows us to have a robust example that does not have any transitive dependencies not already supported by j2objc. 
+Why GSON
+--------
 
-goal
-compile java (just to make sure it works, extra step to get in habit) 
-transpile to obj-c
-compile objc-c
-transpile/compile gson TESTS
-run the tests as OBJECTIVE MUTHA FLIPPING C
+This example project uses an existing Java library with a lot of source code and a lot of tests: GSON. 
+This allows for a robust example that does not have any transitive dependencies not already supported by j2objc. 
 
+Process high level:
+* compile java (just to make sure it works, extra step to get in habit) 
+* transpile to obj-c
+* compile objc-c
+* transpile/compile gson TESTS
+* run the tests as OBJECTIVE MUTHA FLIPPING C
 
-Steps for j2objc internally
----------------------------
+j2objc internals
+-----------------
 http://j2objc.org/docs/Design-Overview.html
 1. rewriter rewrites stuff that doesnâ€™t have java equivalent, it all started here, was bigger, stuff split out
 2. autoboxer
@@ -50,11 +51,15 @@ interesting notes from tom:
 https://groups.google.com/forum/#!topic/j2objc-discuss/iXdtl4KRP1k
 
 
-take gson and convert it, as an example
-----------------------------------------
+Detailed Process: GSON java to objc with tests
+----------------------------------------------
+
+1. Prerequisites: 
+   * clone this project, or get the source of gson and mirror this project
+   * install j2objc and have $J2OBJC_HOME in the path. 
 
-1. run mvn tests, all good, 1018 passed
-mvn test
+1. run mvn tests, ensure all java works and tests pass (1018 tests)
+```mvn test```
 
 #if you NEED sources, maven can help you get them for OS stuff
 #(this puts all the stuff in target/dependency)
