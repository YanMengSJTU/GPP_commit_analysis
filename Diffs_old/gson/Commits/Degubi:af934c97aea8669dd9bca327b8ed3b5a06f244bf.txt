diff --git a/gson/src/main/java/com/google/gson/Gson.java b/gson/src/main/java/com/google/gson/Gson.java
index 303adb03b..984dc4a5c 100644
--- a/gson/src/main/java/com/google/gson/Gson.java
+++ b/gson/src/main/java/com/google/gson/Gson.java
@@ -16,47 +16,17 @@
 
 package com.google.gson;
 
-import java.io.EOFException;
-import java.io.IOException;
-import java.io.Reader;
-import java.io.StringReader;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.lang.reflect.Type;
-import java.math.BigDecimal;
-import java.math.BigInteger;
-import java.text.DateFormat;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.atomic.AtomicLong;
-import java.util.concurrent.atomic.AtomicLongArray;
-
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.Excluder;
-import com.google.gson.internal.GsonBuildConfig;
-import com.google.gson.internal.Primitives;
-import com.google.gson.internal.Streams;
-import com.google.gson.internal.bind.ArrayTypeAdapter;
-import com.google.gson.internal.bind.CollectionTypeAdapterFactory;
-import com.google.gson.internal.bind.DateTypeAdapter;
-import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
-import com.google.gson.internal.bind.JsonTreeReader;
-import com.google.gson.internal.bind.JsonTreeWriter;
-import com.google.gson.internal.bind.MapTypeAdapterFactory;
-import com.google.gson.internal.bind.ObjectTypeAdapter;
-import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
-import com.google.gson.internal.bind.SqlDateTypeAdapter;
-import com.google.gson.internal.bind.TimeTypeAdapter;
-import com.google.gson.internal.bind.TypeAdapters;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
-import com.google.gson.stream.MalformedJsonException;
+import com.google.gson.internal.*;
+import com.google.gson.internal.bind.*;
+import com.google.gson.reflect.*;
+import com.google.gson.stream.*;
+import java.io.*;
+import java.lang.reflect.*;
+import java.math.*;
+import java.text.*;
+import java.util.*;
+import java.util.concurrent.*;
+import java.util.concurrent.atomic.*;
 
 /**
  * This is the main class for using Gson. Gson is typically used by first constructing a
@@ -123,7 +93,6 @@
 	private final ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>> calls = new ThreadLocal<>();
 	private final Map<TypeToken<?>, TypeAdapter<?>> typeTokenCache = new ConcurrentHashMap<>();
 
-	private final ConstructorConstructor constructorConstructor;
 	private final JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;
 
 	final List<TypeAdapterFactory> factories;
@@ -199,7 +168,6 @@ private Gson() {
 		this.excluder = excluder;
 		this.fieldNamingStrategy = fieldNamingStrategy;
 		this.instanceCreators = instanceCreators;
-		this.constructorConstructor = new ConstructorConstructor(instanceCreators);
 		this.serializeNulls = serializeNulls;
 		this.complexMapKeySerialization = complexMapKeySerialization;
 		this.generateNonExecutableJson = generateNonExecutableGson;
@@ -258,21 +226,22 @@ private Gson() {
 		factories.add(DateTypeAdapter.FACTORY);
 		factories.add(TypeAdapters.CALENDAR_FACTORY);
 		factories.add(TimeTypeAdapter.FACTORY);
-		factories.add(SqlDateTypeAdapter.FACTORY);
 		factories.add(TypeAdapters.TIMESTAMP_FACTORY);
 		factories.add(ArrayTypeAdapter.FACTORY);
 		factories.add(TypeAdapters.CLASS_FACTORY);
+		factories.add(LocalTimeAdapter.factory);
+		factories.add(InstantTypeAdapter.factory);
 
 		// type adapters for composite and user-defined types
-		factories.add(new CollectionTypeAdapterFactory(constructorConstructor));
-		factories.add(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization));
-		this.jsonAdapterFactory = new JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor);
+		factories.add(new CollectionTypeAdapterFactory(instanceCreators));
+		factories.add(new MapTypeAdapterFactory(instanceCreators, complexMapKeySerialization));
+		this.jsonAdapterFactory = new JsonAdapterAnnotationTypeAdapterFactory(instanceCreators);
 		factories.add(jsonAdapterFactory);
 		factories.add(TypeAdapters.ENUM_FACTORY);
 		factories.add(new ReflectiveTypeAdapterFactory(
-				constructorConstructor, fieldNamingStrategy, excluder, jsonAdapterFactory));
+				instanceCreators, fieldNamingStrategy, excluder));
 
-		this.factories = Collections.unmodifiableList(factories);
+		this.factories = factories;
 	}
 
 	/**
@@ -1090,7 +1059,7 @@ public String toString() {
 		return new StringBuilder("{serializeNulls:")
 				.append(serializeNulls)
 				.append(",factories:").append(factories)
-				.append(",instanceCreators:").append(constructorConstructor)
+				.append(",instanceCreators:").append(instanceCreators)
 				.append("}")
 				.toString();
 	}
diff --git a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java b/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
index 7605bfd9e..71f69fbb1 100644
--- a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
+++ b/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
@@ -27,13 +27,8 @@
  * Returns a function that can construct an instance of a requested type.
  */
 public final class ConstructorConstructor {
-  private final Map<Type, InstanceCreator<?>> instanceCreators;
 
-  public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {
-    this.instanceCreators = instanceCreators;
-  }
-
-  public <T> Supplier<T> get(TypeToken<T> typeToken) {
+  public static <T> Supplier<T> get(TypeToken<T> typeToken, Map<Type, InstanceCreator<?>> instanceCreators) {
     final Type type = typeToken.getType();
     final Class<? super T> rawType = typeToken.getRawType();
 
@@ -154,8 +149,4 @@ public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {
         }
       };
   }
-
-  @Override public String toString() {
-    return instanceCreators.toString();
-  }
 }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
index b8beeab4f..c92459e1d 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
@@ -29,10 +29,10 @@
  * Adapt a homogeneous collection of objects.
  */
 public final class CollectionTypeAdapterFactory implements TypeAdapterFactory {
-  private final ConstructorConstructor constructorConstructor;
+  private final Map<Type, InstanceCreator<?>> instanceCreators;
 
-  public CollectionTypeAdapterFactory(ConstructorConstructor constructorConstructor) {
-    this.constructorConstructor = constructorConstructor;
+  public CollectionTypeAdapterFactory(Map<Type, InstanceCreator<?>> instanceCreators) {
+    this.instanceCreators = instanceCreators;
   }
 
   @Override
@@ -46,7 +46,7 @@ public CollectionTypeAdapterFactory(ConstructorConstructor constructorConstructo
 
     Type elementType = $Gson$Types.getCollectionElementType(type, rawType);
     TypeAdapter<?> elementTypeAdapter = gson.getAdapter(TypeToken.get(elementType));
-    Supplier<T> constructor = constructorConstructor.get(typeToken);
+    Supplier<T> constructor = ConstructorConstructor.get(typeToken, instanceCreators);
 
     @SuppressWarnings({"unchecked", "rawtypes"}) // create() doesn't define a type parameter
     TypeAdapter<T> result = new Adapter(gson, elementType, elementTypeAdapter, constructor);
diff --git a/gson/src/main/java/com/google/gson/internal/bind/InstantTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/InstantTypeAdapter.java
new file mode 100644
index 000000000..1d03c719f
--- /dev/null
+++ b/gson/src/main/java/com/google/gson/internal/bind/InstantTypeAdapter.java
@@ -0,0 +1,34 @@
+package com.google.gson.internal.bind;
+
+import com.google.gson.*;
+import com.google.gson.reflect.*;
+import com.google.gson.stream.*;
+import java.io.*;
+import java.time.*;
+
+public class InstantTypeAdapter extends TypeAdapter<Instant>{
+	public static final TypeAdapterFactory factory = new TypeAdapterFactory() {
+		
+		@Override
+		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
+			return type.getRawType() == Instant.class ? (TypeAdapter<T>) new InstantTypeAdapter() : null;
+		}
+	};
+	@Override
+	public void write(JsonWriter out, Instant value) throws IOException {
+		if(value == null) {
+			out.nullValue();
+		}else{
+			out.value(value.toString());
+		}
+	}
+
+	@Override
+	public Instant read(JsonReader in) throws IOException {
+		if (in.peek() == JsonToken.NULL) {
+			in.nextNull();
+			return null;
+		}
+		return Instant.parse(in.nextString());
+	}
+}
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
index 8d2a7a98a..9b6a111ae 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
@@ -16,14 +16,12 @@
 
 package com.google.gson.internal.bind;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonSerializer;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
+import com.google.gson.*;
 import com.google.gson.annotations.JsonAdapter;
 import com.google.gson.internal.ConstructorConstructor;
 import com.google.gson.reflect.TypeToken;
+import java.lang.reflect.*;
+import java.util.*;
 
 /**
  * Given a type T, looks for the annotation {@link JsonAdapter} and uses an instance of the
@@ -32,53 +30,52 @@
  * @since 2.3
  */
 public final class JsonAdapterAnnotationTypeAdapterFactory implements TypeAdapterFactory {
-  private final ConstructorConstructor constructorConstructor;
+	private final Map<Type, InstanceCreator<?>> instanceCreators;
 
-  public JsonAdapterAnnotationTypeAdapterFactory(ConstructorConstructor constructorConstructor) {
-    this.constructorConstructor = constructorConstructor;
-  }
+	public JsonAdapterAnnotationTypeAdapterFactory(Map<Type, InstanceCreator<?>> instanceCreators) {
+		this.instanceCreators = instanceCreators;
+	}
 
-  @SuppressWarnings("unchecked")
-  @Override
-  public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> targetType) {
-    Class<? super T> rawType = targetType.getRawType();
-    JsonAdapter annotation = rawType.getAnnotation(JsonAdapter.class);
-    if (annotation == null) {
-      return null;
-    }
-    return (TypeAdapter<T>) getTypeAdapter(constructorConstructor, gson, targetType, annotation);
-  }
+	@SuppressWarnings("unchecked")
+	@Override
+	public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> targetType) {
+		Class<? super T> rawType = targetType.getRawType();
+		JsonAdapter annotation = rawType.getAnnotation(JsonAdapter.class);
+		if (annotation == null) {
+			return null;
+		}
+		return (TypeAdapter<T>) getTypeAdapter(instanceCreators, gson, targetType, annotation);
+	}
 
-  @SuppressWarnings({ "unchecked", "rawtypes" }) // Casts guarded by conditionals.
-static
-  TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
-      TypeToken<?> type, JsonAdapter annotation) {
-    Object instance = constructorConstructor.get(TypeToken.get(annotation.value())).get();
+	@SuppressWarnings({ "unchecked", "rawtypes" }) // Casts guarded by conditionals.
+	static TypeAdapter<?> getTypeAdapter(Map<Type, InstanceCreator<?>> instanceCreators, Gson gson,
+			TypeToken<?> type, JsonAdapter annotation) {
+		Object instance = ConstructorConstructor.get(TypeToken.get(annotation.value()), instanceCreators).get();
 
-    TypeAdapter<?> typeAdapter;
-    if (instance instanceof TypeAdapter) {
-      typeAdapter = (TypeAdapter<?>) instance;
-    } else if (instance instanceof TypeAdapterFactory) {
-      typeAdapter = ((TypeAdapterFactory) instance).create(gson, type);
-    } else if (instance instanceof JsonSerializer || instance instanceof JsonDeserializer) {
-      JsonSerializer<?> serializer = instance instanceof JsonSerializer
-          ? (JsonSerializer) instance
-          : null;
-      JsonDeserializer<?> deserializer = instance instanceof JsonDeserializer
-          ? (JsonDeserializer) instance
-          : null;
-      typeAdapter = new TreeTypeAdapter(serializer, deserializer, gson, type, null);
-    } else {
-      throw new IllegalArgumentException("Invalid attempt to bind an instance of "
-          + instance.getClass().getName() + " as a @JsonAdapter for " + type.toString()
-          + ". @JsonAdapter value must be a TypeAdapter, TypeAdapterFactory,"
-          + " JsonSerializer or JsonDeserializer.");
-    }
+		TypeAdapter<?> typeAdapter;
+		if (instance instanceof TypeAdapter) {
+			typeAdapter = (TypeAdapter<?>) instance;
+		} else if (instance instanceof TypeAdapterFactory) {
+			typeAdapter = ((TypeAdapterFactory) instance).create(gson, type);
+		} else if (instance instanceof JsonSerializer || instance instanceof JsonDeserializer) {
+			JsonSerializer<?> serializer = instance instanceof JsonSerializer
+					? (JsonSerializer) instance
+							: null;
+					JsonDeserializer<?> deserializer = instance instanceof JsonDeserializer
+							? (JsonDeserializer) instance
+									: null;
+							typeAdapter = new TreeTypeAdapter(serializer, deserializer, gson, type, null);
+		} else {
+			throw new IllegalArgumentException("Invalid attempt to bind an instance of "
+					+ instance.getClass().getName() + " as a @JsonAdapter for " + type.toString()
+					+ ". @JsonAdapter value must be a TypeAdapter, TypeAdapterFactory,"
+					+ " JsonSerializer or JsonDeserializer.");
+		}
 
-    if (typeAdapter != null && annotation.nullSafe()) {
-      typeAdapter = typeAdapter.nullSafe();
-    }
+		if (typeAdapter != null && annotation.nullSafe()) {
+			typeAdapter = typeAdapter.nullSafe();
+		}
 
-    return typeAdapter;
-  }
+		return typeAdapter;
+	}
 }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/LocalTimeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/LocalTimeAdapter.java
new file mode 100644
index 000000000..4bb845181
--- /dev/null
+++ b/gson/src/main/java/com/google/gson/internal/bind/LocalTimeAdapter.java
@@ -0,0 +1,35 @@
+package com.google.gson.internal.bind;
+
+import com.google.gson.*;
+import com.google.gson.reflect.*;
+import com.google.gson.stream.*;
+import java.io.*;
+import java.time.*;
+
+public class LocalTimeAdapter extends TypeAdapter<LocalTime>{
+	public static final TypeAdapterFactory factory = new TypeAdapterFactory() {
+		
+		@Override
+		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
+			return type.getRawType() == LocalTime.class ? (TypeAdapter<T>) new LocalTimeAdapter() : null;
+		}
+	};
+	
+	@Override
+	public void write(JsonWriter out, LocalTime value) throws IOException {
+		if(value == null) {
+			out.nullValue();
+		}else{
+			out.value(value.toString());
+		}
+	}
+
+	@Override
+	public LocalTime read(JsonReader in) throws IOException {
+		if (in.peek() == JsonToken.NULL) {
+			in.nextNull();
+			return null;
+		}
+		return LocalTime.parse(in.nextString());
+	}
+}
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
index a396afd9e..985882955 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
@@ -91,162 +91,162 @@
  * is registered.
  */
 public final class MapTypeAdapterFactory implements TypeAdapterFactory {
-  private final ConstructorConstructor constructorConstructor;
-  final boolean complexMapKeySerialization;
-
-  public MapTypeAdapterFactory(ConstructorConstructor constructorConstructor,
-      boolean complexMapKeySerialization) {
-    this.constructorConstructor = constructorConstructor;
-    this.complexMapKeySerialization = complexMapKeySerialization;
-  }
-
-  @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
-    Type type = typeToken.getType();
-
-    Class<? super T> rawType = typeToken.getRawType();
-    if (!Map.class.isAssignableFrom(rawType)) {
-      return null;
-    }
-
-    Class<?> rawTypeOfSrc = $Gson$Types.getRawType(type);
-    Type[] keyAndValueTypes = $Gson$Types.getMapKeyAndValueTypes(type, rawTypeOfSrc);
-    TypeAdapter<?> keyAdapter = getKeyAdapter(gson, keyAndValueTypes[0]);
-    TypeAdapter<?> valueAdapter = gson.getAdapter(TypeToken.get(keyAndValueTypes[1]));
-    Supplier<T> constructor = constructorConstructor.get(typeToken);
-
-    @SuppressWarnings({"unchecked", "rawtypes"})
-    // we don't define a type parameter for the key or value types
-    TypeAdapter<T> result = new Adapter(gson, keyAndValueTypes[0], keyAdapter,
-        keyAndValueTypes[1], valueAdapter, constructor);
-    return result;
-  }
-
-  /**
-   * Returns a type adapter that writes the value as a string.
-   */
-  private TypeAdapter<?> getKeyAdapter(Gson context, Type keyType) {
-    return (keyType == boolean.class || keyType == Boolean.class)
-        ? TypeAdapters.BOOLEAN_AS_STRING
-        : context.getAdapter(TypeToken.get(keyType));
-  }
-
-  private final class Adapter<K, V> extends TypeAdapter<Map<K, V>> {
-    private final TypeAdapter<K> keyTypeAdapter;
-    private final TypeAdapter<V> valueTypeAdapter;
-    private final Supplier<? extends Map<K, V>> constructor;
-
-    public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,
-        Type valueType, TypeAdapter<V> valueTypeAdapter,
-        Supplier<? extends Map<K, V>> constructor) {
-      this.keyTypeAdapter =
-        new TypeAdapterRuntimeTypeWrapper<K>(context, keyTypeAdapter, keyType);
-      this.valueTypeAdapter =
-        new TypeAdapterRuntimeTypeWrapper<V>(context, valueTypeAdapter, valueType);
-      this.constructor = constructor;
-    }
-
-    @Override public Map<K, V> read(JsonReader in) throws IOException {
-      JsonToken peek = in.peek();
-      if (peek == JsonToken.NULL) {
-        in.nextNull();
-        return null;
-      }
-
-      Map<K, V> map = constructor.get();
-
-      if (peek == JsonToken.BEGIN_ARRAY) {
-        in.beginArray();
-        while (in.hasNext()) {
-          in.beginArray(); // entry array
-          K key = keyTypeAdapter.read(in);
-          V value = valueTypeAdapter.read(in);
-          V replaced = map.put(key, value);
-          if (replaced != null) {
-            throw new JsonSyntaxException("duplicate key: " + key);
-          }
-          in.endArray();
-        }
-        in.endArray();
-      } else {
-        in.beginObject();
-        while (in.hasNext()) {
-          JsonReaderInternalAccess.INSTANCE.promoteNameToValue(in);
-          K key = keyTypeAdapter.read(in);
-          V value = valueTypeAdapter.read(in);
-          V replaced = map.put(key, value);
-          if (replaced != null) {
-            throw new JsonSyntaxException("duplicate key: " + key);
-          }
-        }
-        in.endObject();
-      }
-      return map;
-    }
-
-    @Override public void write(JsonWriter out, Map<K, V> map) throws IOException {
-      if (map == null) {
-        out.nullValue();
-        return;
-      }
-
-      if (!complexMapKeySerialization) {
-        out.beginObject();
-        for (Map.Entry<K, V> entry : map.entrySet()) {
-          out.name(String.valueOf(entry.getKey()));
-          valueTypeAdapter.write(out, entry.getValue());
-        }
-        out.endObject();
-        return;
-      }
-
-      boolean hasComplexKeys = false;
-      List<JsonElement> keys = new ArrayList<JsonElement>(map.size());
-
-      List<V> values = new ArrayList<V>(map.size());
-      for (Map.Entry<K, V> entry : map.entrySet()) {
-        JsonElement keyElement = keyTypeAdapter.toJsonTree(entry.getKey());
-        keys.add(keyElement);
-        values.add(entry.getValue());
-        hasComplexKeys |= keyElement.isJsonArray() || keyElement.isJsonObject();
-      }
-
-      if (hasComplexKeys) {
-        out.beginArray();
-        for (int i = 0, size = keys.size(); i < size; i++) {
-          out.beginArray(); // entry array
-          Streams.write(keys.get(i), out);
-          valueTypeAdapter.write(out, values.get(i));
-          out.endArray();
-        }
-        out.endArray();
-      } else {
-        out.beginObject();
-        for (int i = 0, size = keys.size(); i < size; i++) {
-          JsonElement keyElement = keys.get(i);
-          out.name(keyToString(keyElement));
-          valueTypeAdapter.write(out, values.get(i));
-        }
-        out.endObject();
-      }
-    }
-
-    private String keyToString(JsonElement keyElement) {
-      if (keyElement.isJsonPrimitive()) {
-        JsonPrimitive primitive = keyElement.getAsJsonPrimitive();
-        if (primitive.isNumber()) {
-          return String.valueOf(primitive.getAsNumber());
-        } else if (primitive.isBoolean()) {
-          return Boolean.toString(primitive.getAsBoolean());
-        } else if (primitive.isString()) {
-          return primitive.getAsString();
-        } else {
-          throw new AssertionError();
-        }
-      } else if (keyElement.isJsonNull()) {
-        return "null";
-      } else {
-        throw new AssertionError();
-      }
-    }
-  }
+	private final Map<Type, InstanceCreator<?>> instanceCreators;
+	final boolean complexMapKeySerialization;
+
+	public MapTypeAdapterFactory(Map<Type, InstanceCreator<?>> instanceCreators,
+			boolean complexMapKeySerialization) {
+		this.instanceCreators = instanceCreators;
+		this.complexMapKeySerialization = complexMapKeySerialization;
+	}
+
+	@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
+		Type type = typeToken.getType();
+
+		Class<? super T> rawType = typeToken.getRawType();
+		if (!Map.class.isAssignableFrom(rawType)) {
+			return null;
+		}
+
+		Class<?> rawTypeOfSrc = $Gson$Types.getRawType(type);
+		Type[] keyAndValueTypes = $Gson$Types.getMapKeyAndValueTypes(type, rawTypeOfSrc);
+		TypeAdapter<?> keyAdapter = getKeyAdapter(gson, keyAndValueTypes[0]);
+		TypeAdapter<?> valueAdapter = gson.getAdapter(TypeToken.get(keyAndValueTypes[1]));
+		Supplier<T> constructor = ConstructorConstructor.get(typeToken, instanceCreators);
+
+		@SuppressWarnings({"unchecked", "rawtypes"})
+		// we don't define a type parameter for the key or value types
+		TypeAdapter<T> result = new Adapter(gson, keyAndValueTypes[0], keyAdapter,
+				keyAndValueTypes[1], valueAdapter, constructor);
+		return result;
+	}
+
+	/**
+	 * Returns a type adapter that writes the value as a string.
+	 */
+	private TypeAdapter<?> getKeyAdapter(Gson context, Type keyType) {
+		return (keyType == boolean.class || keyType == Boolean.class)
+				? TypeAdapters.BOOLEAN_AS_STRING
+						: context.getAdapter(TypeToken.get(keyType));
+	}
+
+	private final class Adapter<K, V> extends TypeAdapter<Map<K, V>> {
+		private final TypeAdapter<K> keyTypeAdapter;
+		private final TypeAdapter<V> valueTypeAdapter;
+		private final Supplier<? extends Map<K, V>> constructor;
+
+		public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,
+				Type valueType, TypeAdapter<V> valueTypeAdapter,
+				Supplier<? extends Map<K, V>> constructor) {
+			this.keyTypeAdapter =
+					new TypeAdapterRuntimeTypeWrapper<K>(context, keyTypeAdapter, keyType);
+			this.valueTypeAdapter =
+					new TypeAdapterRuntimeTypeWrapper<V>(context, valueTypeAdapter, valueType);
+			this.constructor = constructor;
+		}
+
+		@Override public Map<K, V> read(JsonReader in) throws IOException {
+			JsonToken peek = in.peek();
+			if (peek == JsonToken.NULL) {
+				in.nextNull();
+				return null;
+			}
+
+			Map<K, V> map = constructor.get();
+
+			if (peek == JsonToken.BEGIN_ARRAY) {
+				in.beginArray();
+				while (in.hasNext()) {
+					in.beginArray(); // entry array
+					K key = keyTypeAdapter.read(in);
+					V value = valueTypeAdapter.read(in);
+					V replaced = map.put(key, value);
+					if (replaced != null) {
+						throw new JsonSyntaxException("duplicate key: " + key);
+					}
+					in.endArray();
+				}
+				in.endArray();
+			} else {
+				in.beginObject();
+				while (in.hasNext()) {
+					JsonReaderInternalAccess.INSTANCE.promoteNameToValue(in);
+					K key = keyTypeAdapter.read(in);
+					V value = valueTypeAdapter.read(in);
+					V replaced = map.put(key, value);
+					if (replaced != null) {
+						throw new JsonSyntaxException("duplicate key: " + key);
+					}
+				}
+				in.endObject();
+			}
+			return map;
+		}
+
+		@Override public void write(JsonWriter out, Map<K, V> map) throws IOException {
+			if (map == null) {
+				out.nullValue();
+				return;
+			}
+
+			if (!complexMapKeySerialization) {
+				out.beginObject();
+				for (Map.Entry<K, V> entry : map.entrySet()) {
+					out.name(String.valueOf(entry.getKey()));
+					valueTypeAdapter.write(out, entry.getValue());
+				}
+				out.endObject();
+				return;
+			}
+
+			boolean hasComplexKeys = false;
+			List<JsonElement> keys = new ArrayList<JsonElement>(map.size());
+
+			List<V> values = new ArrayList<V>(map.size());
+			for (Map.Entry<K, V> entry : map.entrySet()) {
+				JsonElement keyElement = keyTypeAdapter.toJsonTree(entry.getKey());
+				keys.add(keyElement);
+				values.add(entry.getValue());
+				hasComplexKeys |= keyElement.isJsonArray() || keyElement.isJsonObject();
+			}
+
+			if (hasComplexKeys) {
+				out.beginArray();
+				for (int i = 0, size = keys.size(); i < size; i++) {
+					out.beginArray(); // entry array
+					Streams.write(keys.get(i), out);
+					valueTypeAdapter.write(out, values.get(i));
+					out.endArray();
+				}
+				out.endArray();
+			} else {
+				out.beginObject();
+				for (int i = 0, size = keys.size(); i < size; i++) {
+					JsonElement keyElement = keys.get(i);
+					out.name(keyToString(keyElement));
+					valueTypeAdapter.write(out, values.get(i));
+				}
+				out.endObject();
+			}
+		}
+
+		private String keyToString(JsonElement keyElement) {
+			if (keyElement.isJsonPrimitive()) {
+				JsonPrimitive primitive = keyElement.getAsJsonPrimitive();
+				if (primitive.isNumber()) {
+					return String.valueOf(primitive.getAsNumber());
+				} else if (primitive.isBoolean()) {
+					return Boolean.toString(primitive.getAsBoolean());
+				} else if (primitive.isString()) {
+					return primitive.getAsString();
+				} else {
+					throw new AssertionError();
+				}
+			} else if (keyElement.isJsonNull()) {
+				return "null";
+			} else {
+				throw new AssertionError();
+			}
+		}
+	}
 }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
index b434ae55c..4fc525e39 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -30,208 +30,204 @@
  * Type adapter that reflects over the fields and methods of a class.
  */
 public final class ReflectiveTypeAdapterFactory implements TypeAdapterFactory {
-  private final ConstructorConstructor constructorConstructor;
-  private final FieldNamingStrategy fieldNamingPolicy;
-  private final Excluder excluder;
-  private final JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;
-
-  public ReflectiveTypeAdapterFactory(ConstructorConstructor constructorConstructor,
-      FieldNamingStrategy fieldNamingPolicy, Excluder excluder,
-      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory) {
-    this.constructorConstructor = constructorConstructor;
-    this.fieldNamingPolicy = fieldNamingPolicy;
-    this.excluder = excluder;
-    this.jsonAdapterFactory = jsonAdapterFactory;
-  }
-
-  public boolean excludeField(Field f, boolean serialize) {
-    return excludeField(f, serialize, excluder);
-  }
-
-  static boolean excludeField(Field f, boolean serialize, Excluder excluder) {
-    return !excluder.excludeClass(f.getType(), serialize) && !excluder.excludeField(f, serialize);
-  }
-
-  /** first element holds the default name */
-  private List<String> getFieldNames(Field f) {
-    SerializedName annotation = f.getAnnotation(SerializedName.class);
-    if (annotation == null) {
-      String name = fieldNamingPolicy.translateName(f);
-      return Collections.singletonList(name);
-    }
-
-    String serializedName = annotation.value();
-    String[] alternates = annotation.alternate();
-    if (alternates.length == 0) {
-      return Collections.singletonList(serializedName);
-    }
-
-    List<String> fieldNames = new ArrayList<String>(alternates.length + 1);
-    fieldNames.add(serializedName);
-    for (String alternate : alternates) {
-      fieldNames.add(alternate);
-    }
-    return fieldNames;
-  }
-
-  @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
-    Class<? super T> raw = type.getRawType();
-
-    if (!Object.class.isAssignableFrom(raw)) {
-      return null; // it's a primitive!
-    }
-
-    Supplier<T> constructor = constructorConstructor.get(type);
-    return new Adapter<T>(constructor, getBoundFields(gson, type, raw));
-  }
-
-  private ReflectiveTypeAdapterFactory.BoundField createBoundField(
-      final Gson context, final Field field, final String name,
-      final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
-    final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
-    JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
-    TypeAdapter<?> mapped = null;
-    if (annotation != null) {
-      mapped = jsonAdapterFactory.getTypeAdapter(
-          constructorConstructor, context, fieldType, annotation);
-    }
-    final boolean jsonAdapterPresent = mapped != null;
-    if (mapped == null) mapped = context.getAdapter(fieldType);
-
-    final TypeAdapter<?> typeAdapter = mapped;
-    return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
-      @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
-      @Override void write(JsonWriter writer, Object value)
-          throws IOException, IllegalAccessException {
-        Object fieldValue = field.get(value);
-        TypeAdapter t = jsonAdapterPresent ? typeAdapter
-            : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
-        t.write(writer, fieldValue);
-      }
-      @Override void read(JsonReader reader, Object value)
-          throws IOException, IllegalAccessException {
-        Object fieldValue = typeAdapter.read(reader);
-        if (fieldValue != null || !isPrimitive) {
-          field.set(value, fieldValue);
-        }
-      }
-      @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
-        if (!serialized) return false;
-        Object fieldValue = field.get(value);
-        return fieldValue != value; // avoid recursion for example for Throwable.cause
-      }
-    };
-  }
-
-  private Map<String, BoundField> getBoundFields(Gson context, TypeToken<?> type, Class<?> raw) {
-    Map<String, BoundField> result = new LinkedHashMap<String, BoundField>();
-    if (raw.isInterface()) {
-      return result;
-    }
-
-    Type declaredType = type.getType();
-    while (raw != Object.class) {
-      Field[] fields = raw.getDeclaredFields();
-      for (Field field : fields) {
-        boolean serialize = excludeField(field, true);
-        boolean deserialize = excludeField(field, false);
-        if (!serialize && !deserialize) {
-          continue;
-        }
-        field.setAccessible(true);
-        Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());
-        List<String> fieldNames = getFieldNames(field);
-        BoundField previous = null;
-        for (int i = 0, size = fieldNames.size(); i < size; ++i) {
-          String name = fieldNames.get(i);
-          if (i != 0) serialize = false; // only serialize the default name
-          BoundField boundField = createBoundField(context, field, name,
-              TypeToken.get(fieldType), serialize, deserialize);
-          BoundField replaced = result.put(name, boundField);
-          if (previous == null) previous = replaced;
-        }
-        if (previous != null) {
-          throw new IllegalArgumentException(declaredType
-              + " declares multiple JSON fields named " + previous.name);
-        }
-      }
-      type = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));
-      raw = type.getRawType();
-    }
-    return result;
-  }
-
-  static abstract class BoundField {
-    final String name;
-    final boolean serialized;
-    final boolean deserialized;
-
-    protected BoundField(String name, boolean serialized, boolean deserialized) {
-      this.name = name;
-      this.serialized = serialized;
-      this.deserialized = deserialized;
-    }
-    abstract boolean writeField(Object value) throws IOException, IllegalAccessException;
-    abstract void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException;
-    abstract void read(JsonReader reader, Object value) throws IOException, IllegalAccessException;
-  }
-
-  public static final class Adapter<T> extends TypeAdapter<T> {
-    private final Supplier<T> constructor;
-    private final Map<String, BoundField> boundFields;
-
-    Adapter(Supplier<T> constructor, Map<String, BoundField> boundFields) {
-      this.constructor = constructor;
-      this.boundFields = boundFields;
-    }
-
-    @Override public T read(JsonReader in) throws IOException {
-      if (in.peek() == JsonToken.NULL) {
-        in.nextNull();
-        return null;
-      }
-
-      T instance = constructor.get();
-
-      try {
-        in.beginObject();
-        while (in.hasNext()) {
-          String name = in.nextName();
-          BoundField field = boundFields.get(name);
-          if (field == null || !field.deserialized) {
-            in.skipValue();
-          } else {
-            field.read(in, instance);
-          }
-        }
-      } catch (IllegalStateException e) {
-        throw new JsonSyntaxException(e);
-      } catch (IllegalAccessException e) {
-        throw new AssertionError(e);
-      }
-      in.endObject();
-      return instance;
-    }
-
-    @Override public void write(JsonWriter out, T value) throws IOException {
-      if (value == null) {
-        out.nullValue();
-        return;
-      }
-
-      out.beginObject();
-      try {
-        for (BoundField boundField : boundFields.values()) {
-          if (boundField.writeField(value)) {
-            out.name(boundField.name);
-            boundField.write(out, value);
-          }
-        }
-      } catch (IllegalAccessException e) {
-        throw new AssertionError(e);
-      }
-      out.endObject();
-    }
-  }
+	private final Map<Type, InstanceCreator<?>> instanceCreators;
+	private final FieldNamingStrategy fieldNamingPolicy;
+	private final Excluder excluder;
+
+	public ReflectiveTypeAdapterFactory(Map<Type, InstanceCreator<?>> instanceCreators,
+			FieldNamingStrategy fieldNamingPolicy, Excluder excluder) {
+		this.instanceCreators = instanceCreators;
+		this.fieldNamingPolicy = fieldNamingPolicy;
+		this.excluder = excluder;
+	}
+
+	public boolean excludeField(Field f, boolean serialize) {
+		return excludeField(f, serialize, excluder);
+	}
+
+	static boolean excludeField(Field f, boolean serialize, Excluder excluder) {
+		return !excluder.excludeClass(f.getType(), serialize) && !excluder.excludeField(f, serialize);
+	}
+
+	/** first element holds the default name */
+	private List<String> getFieldNames(Field f) {
+		SerializedName annotation = f.getAnnotation(SerializedName.class);
+		if (annotation == null) {
+			String name = fieldNamingPolicy.translateName(f);
+			return Collections.singletonList(name);
+		}
+
+		String serializedName = annotation.value();
+		String[] alternates = annotation.alternate();
+		if (alternates.length == 0) {
+			return Collections.singletonList(serializedName);
+		}
+
+		List<String> fieldNames = new ArrayList<String>(alternates.length + 1);
+		fieldNames.add(serializedName);
+		for (String alternate : alternates) {
+			fieldNames.add(alternate);
+		}
+		return fieldNames;
+	}
+
+	@Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
+		Class<? super T> raw = type.getRawType();
+
+		if (!Object.class.isAssignableFrom(raw)) {
+			return null; // it's a primitive!
+		}
+
+		Supplier<T> constructor = ConstructorConstructor.get(type, instanceCreators);
+		return new Adapter<T>(constructor, getBoundFields(gson, type, raw));
+	}
+
+	private ReflectiveTypeAdapterFactory.BoundField createBoundField(
+			final Gson context, final Field field, final String name,
+			final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
+		final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
+		// special casing primitives here saves ~5% on Android...
+		JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
+		TypeAdapter<?> mapped = null;
+		if (annotation != null) {
+			mapped = JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(instanceCreators, context, fieldType, annotation);
+		}
+		final boolean jsonAdapterPresent = mapped != null;
+		if (mapped == null) mapped = context.getAdapter(fieldType);
+
+		final TypeAdapter<?> typeAdapter = mapped;
+		return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
+			@SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
+			@Override void write(JsonWriter writer, Object value)
+					throws IOException, IllegalAccessException {
+				Object fieldValue = field.get(value);
+				TypeAdapter t = jsonAdapterPresent ? typeAdapter
+						: new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+				t.write(writer, fieldValue);
+			}
+			@Override void read(JsonReader reader, Object value)
+					throws IOException, IllegalAccessException {
+				Object fieldValue = typeAdapter.read(reader);
+				if (fieldValue != null || !isPrimitive) {
+					field.set(value, fieldValue);
+				}
+			}
+			@Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
+				if (!serialized) return false;
+				Object fieldValue = field.get(value);
+				return fieldValue != value; // avoid recursion for example for Throwable.cause
+			}
+		};
+	}
+
+	private Map<String, BoundField> getBoundFields(Gson context, TypeToken<?> type, Class<?> raw) {
+		Map<String, BoundField> result = new LinkedHashMap<String, BoundField>();
+		if (raw.isInterface()) {
+			return result;
+		}
+
+		Type declaredType = type.getType();
+		while (raw != Object.class) {
+			Field[] fields = raw.getDeclaredFields();
+			for (Field field : fields) {
+				boolean serialize = excludeField(field, true);
+				boolean deserialize = excludeField(field, false);
+				if (!serialize && !deserialize) {
+					continue;
+				}
+				field.setAccessible(true);
+				Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());
+				List<String> fieldNames = getFieldNames(field);
+				BoundField previous = null;
+				for (int i = 0, size = fieldNames.size(); i < size; ++i) {
+					String name = fieldNames.get(i);
+					if (i != 0) serialize = false; // only serialize the default name
+					BoundField boundField = createBoundField(context, field, name,
+							TypeToken.get(fieldType), serialize, deserialize);
+					BoundField replaced = result.put(name, boundField);
+					if (previous == null) previous = replaced;
+				}
+				if (previous != null) {
+					throw new IllegalArgumentException(declaredType
+							+ " declares multiple JSON fields named " + previous.name);
+				}
+			}
+			type = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));
+			raw = type.getRawType();
+		}
+		return result;
+	}
+
+	static abstract class BoundField {
+		final String name;
+		final boolean serialized;
+		final boolean deserialized;
+
+		protected BoundField(String name, boolean serialized, boolean deserialized) {
+			this.name = name;
+			this.serialized = serialized;
+			this.deserialized = deserialized;
+		}
+		abstract boolean writeField(Object value) throws IOException, IllegalAccessException;
+		abstract void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException;
+		abstract void read(JsonReader reader, Object value) throws IOException, IllegalAccessException;
+	}
+
+	public static final class Adapter<T> extends TypeAdapter<T> {
+		private final Supplier<T> constructor;
+		private final Map<String, BoundField> boundFields;
+
+		Adapter(Supplier<T> constructor, Map<String, BoundField> boundFields) {
+			this.constructor = constructor;
+			this.boundFields = boundFields;
+		}
+
+		@Override public T read(JsonReader in) throws IOException {
+			if (in.peek() == JsonToken.NULL) {
+				in.nextNull();
+				return null;
+			}
+
+			T instance = constructor.get();
+
+			try {
+				in.beginObject();
+				while (in.hasNext()) {
+					String name = in.nextName();
+					BoundField field = boundFields.get(name);
+					if (field == null || !field.deserialized) {
+						in.skipValue();
+					} else {
+						field.read(in, instance);
+					}
+				}
+			} catch (IllegalStateException e) {
+				throw new JsonSyntaxException(e);
+			} catch (IllegalAccessException e) {
+				throw new AssertionError(e);
+			}
+			in.endObject();
+			return instance;
+		}
+
+		@Override public void write(JsonWriter out, T value) throws IOException {
+			if (value == null) {
+				out.nullValue();
+				return;
+			}
+
+			out.beginObject();
+			try {
+				for (BoundField boundField : boundFields.values()) {
+					if (boundField.writeField(value)) {
+						out.name(boundField.name);
+						boundField.write(out, value);
+					}
+				}
+			} catch (IllegalAccessException e) {
+				throw new AssertionError(e);
+			}
+			out.endObject();
+		}
+	}
 }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java
deleted file mode 100644
index 5ec244f29..000000000
--- a/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.internal.bind;
-
-import com.google.gson.Gson;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
-import java.io.IOException;
-import java.text.DateFormat;
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-
-/**
- * Adapter for java.sql.Date. Although this class appears stateless, it is not.
- * DateFormat captures its time zone and locale when it is created, which gives
- * this class state. DateFormat isn't thread safe either, so this class has
- * to synchronize its read and write methods.
- */
-public final class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {
-  public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {
-    @SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
-    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
-      return typeToken.getRawType() == java.sql.Date.class
-          ? (TypeAdapter<T>) new SqlDateTypeAdapter() : null;
-    }
-  };
-
-  private final DateFormat format = new SimpleDateFormat("MMM d, yyyy");
-
-  @Override
-  public synchronized java.sql.Date read(JsonReader in) throws IOException {
-    if (in.peek() == JsonToken.NULL) {
-      in.nextNull();
-      return null;
-    }
-    try {
-      final long utilDate = format.parse(in.nextString()).getTime();
-      return new java.sql.Date(utilDate);
-    } catch (ParseException e) {
-      throw new JsonSyntaxException(e);
-    }
-  }
-
-  @Override
-  public synchronized void write(JsonWriter out, java.sql.Date value) throws IOException {
-    out.value(value == null ? null : format.format(value));
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
index bf4a29c7e..596e4eb77 100644
--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
@@ -42,6 +42,7 @@
 import java.sql.Time;
 import java.sql.Timestamp;
 import java.text.DateFormat;
+import java.time.*;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.BitSet;
@@ -361,15 +362,15 @@ private void assertEqualsTime(Date date, int hours, int minutes, int seconds) {
   }
 
   public void testDefaultJavaSqlDateSerialization() {
-    java.sql.Date instant = new java.sql.Date(1259875082000L);
+    Instant instant = Instant.ofEpochMilli(1259875082000L);
     String json = gson.toJson(instant);
-    assertEquals("\"Dec 3, 2009\"", json);
+    assertEquals("\"2009-12-03T21:18:02Z\"", json);
   }
-
+  
   public void testDefaultJavaSqlDateDeserialization() {
-    String json = "'Dec 3, 2009'";
-    java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class);
-    assertEqualsDate(extracted, 2009, 11, 3);
+    String json = "\"2009-12-03T21:18:02Z\"";
+    Instant extracted = gson.fromJson(json, Instant.class);
+    assertEquals(extracted, Instant.ofEpochMilli(1259875082000L));
   }
 
   public void testDefaultJavaSqlTimestampSerialization() {
