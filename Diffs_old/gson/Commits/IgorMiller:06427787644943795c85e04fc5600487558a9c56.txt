diff --git a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
index 0a5269ff8..390d73736 100644
--- a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
@@ -44,7 +44,7 @@
   // TODO: migrate to streaming adapter
 	
 	private final EnumMap<DateFormatType, DateFormatter> dateFormatters;
-	private final EnumSet<DateFormatType> dateParsersToUse;
+	private final EnumSet<DateFormatType> dateFormatTypesToUse;
 	private final DateFormatType outputDateFormatType;
 
   DefaultDateTypeAdapter() {
@@ -71,7 +71,7 @@
   DefaultDateTypeAdapter(DateFormat dateFormat, DateFormatType outputFormatType) {
   	this(outputFormatType);
     dateFormatters.put(DateFormatType.CUSTOM, new SimpleDateFormatter(dateFormat));
-    dateParsersToUse.add(DateFormatType.CUSTOM);
+    dateFormatTypesToUse.add(DateFormatType.CUSTOM);
   }
   
   DefaultDateTypeAdapter(DateFormat dateFormat) {
@@ -113,11 +113,11 @@ public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {
   	dateFormatters.put(DateFormatType.MILLIS, MillisDateFormatter.getInstance());
   	
   	// Date type formatters to use. Prevents repeating parsing when Default or Custom are set to EN-US.
-  	dateParsersToUse = EnumSet.of(DateFormatType.EN_US, DateFormatType.LOCAL, DateFormatType.ISO_8601);
+  	dateFormatTypesToUse = EnumSet.of(DateFormatType.EN_US, DateFormatType.LOCAL, DateFormatType.ISO_8601);
   	
   	// Add date formatter for millis or unix. Millis as default.
   	DateFormatType formatForLong = outputDateFormatType == DateFormatType.UNIX ? outputDateFormatType : DateFormatType.MILLIS;
-  	dateParsersToUse.add(formatForLong);
+  	dateFormatTypesToUse.add(formatForLong);
   	
   	// DateFormatter type to use for serialization
   	this.outputDateFormatType = outputDateFormatType;
@@ -152,7 +152,7 @@ private Date deserializeToDate(JsonElement json) {
   	
   	ParseException parseExc = null; // Hopefully will not be used
   	
-  	for(DateFormatType dateFormatType : dateParsersToUse )
+  	for(DateFormatType dateFormatType : dateFormatTypesToUse )
   	{
   		DateFormatter dateFormatter = dateFormatters.get(dateFormatType);
   		try{
diff --git a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
index 10135eeb2..46177c57f 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
@@ -53,7 +53,7 @@
   };
   
   private final EnumMap<DateFormatType, DateFormatter> dateFormatters;
-	private final EnumSet<DateFormatType> dateParsersToUse;
+	private final EnumSet<DateFormatType> dateFormatTypesToUse;
   
 	public DateTypeAdapter() {
 		dateFormatters = new EnumMap<DateFormatType, DateFormatter>(DateFormatType.class);
@@ -70,7 +70,7 @@ public DateTypeAdapter() {
 
 		// Date type formatters to use. Prevents repeating parsing when Default or
 		// Custom are set to EN-US.
-		dateParsersToUse = EnumSet.of(DateFormatType.EN_US, DateFormatType.LOCAL, DateFormatType.ISO_8601,
+		dateFormatTypesToUse = EnumSet.of(DateFormatType.EN_US, DateFormatType.LOCAL, DateFormatType.ISO_8601,
 				DateFormatType.MILLIS);
 	}
 
@@ -85,7 +85,7 @@ public DateTypeAdapter() {
 	private Date deserializeToDate(String json) {
 		ParseException parseExc = null; // Hopefully will not be used
 
-		for (DateFormatType dateFormatType : dateParsersToUse) {
+		for (DateFormatType dateFormatType : dateFormatTypesToUse) {
 			DateFormatter dateFormatter = dateFormatters.get(dateFormatType);
 			try {
 				return dateFormatter.parse(json);
diff --git a/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java b/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
index 89bdc0f04..7c4c06ff3 100644
--- a/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
+++ b/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
@@ -21,6 +21,7 @@
 import java.util.Date;
 import java.util.Locale;
 import java.util.TimeZone;
+
 import junit.framework.TestCase;
 
 /**
@@ -131,7 +132,7 @@ public void testMillisecondsDateFormatParsedWithDefaultConfig()
 		TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
 
 		try {
-			DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(DateFormatType.EN_US);
+			DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter();
 			Long someMillis = 1448603783413L; // Fri Nov 27 2015 05:56:23 in UTC
 			String someSecondsStr = "1448603783413";
 			// assert formatted US
@@ -144,7 +145,7 @@ public void testMillisecondsDateFormatParsedWithDefaultConfig()
 		}
   }
   
-  public void testOutputNotFormattedWithCustomDateFormat()
+  public void testOutputNotFormattedWithCustomDateFormatAndDefaultOutputType()
   {
   	TimeZone defaultTimeZone = TimeZone.getDefault();
     TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
@@ -216,7 +217,7 @@ public void testOutputFormattedWithISOOutputDateFormatTypeAndCustomDateFormat()
     }
   }
   
-  public void testOutputFormattedUsWithDateTypeFormatCustomAndNoFormatter()
+  public void testOutputFormatWithDateTypeFormatCustomAndNoSpecifiedFormatter()
   {
   	TimeZone defaultTimeZone = TimeZone.getDefault();
     TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
@@ -225,6 +226,7 @@ public void testOutputFormattedUsWithDateTypeFormatCustomAndNoFormatter()
     
   	DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(DateFormatType.CUSTOM);
     try {
+    	// EN-US output format
     	assertFormatted("Jan 1, 1970 12:00:00 AM", dateTypeAdapter);
     } finally {
       TimeZone.setDefault(defaultTimeZone);
