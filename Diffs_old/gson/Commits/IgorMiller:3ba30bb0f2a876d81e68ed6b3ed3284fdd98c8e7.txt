diff --git a/gson/src/main/java/com/google/gson/DateFormatPolicy.java b/gson/src/main/java/com/google/gson/DateFormatPolicy.java
new file mode 100644
index 000000000..4ab7ec01f
--- /dev/null
+++ b/gson/src/main/java/com/google/gson/DateFormatPolicy.java
@@ -0,0 +1,108 @@
+/*
+ * Copyright (C) 2015 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.gson;
+
+import java.util.Date;
+
+public enum DateFormatPolicy {
+
+  
+  EN_US
+  },
+
+  /**
+   * Using this naming policy with Gson will ensure that the first "letter" of the Java
+   * field name is capitalized when serialized to its JSON form.
+   *
+   * <p>Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":</p>
+   * <ul>
+   *   <li>someFieldName ---> SomeFieldName</li>
+   *   <li>_someFieldName ---> _SomeFieldName</li>
+   * </ul>
+   */
+  UPPER_CAMEL_CASE() {
+    @Override public String translateName(Field f) {
+      return upperCaseFirstLetter(f.getName());
+    }
+  },
+
+  /**
+   * Using this naming policy with Gson will ensure that the first "letter" of the Java
+   * field name is capitalized when serialized to its JSON form and the words will be
+   * separated by a space.
+   *
+   * <p>Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":</p>
+   * <ul>
+   *   <li>someFieldName ---> Some Field Name</li>
+   *   <li>_someFieldName ---> _Some Field Name</li>
+   * </ul>
+   *
+   * @since 1.4
+   */
+  UPPER_CAMEL_CASE_WITH_SPACES() {
+    @Override public String translateName(Field f) {
+      return upperCaseFirstLetter(separateCamelCase(f.getName(), " "));
+    }
+  },
+
+  /**
+   * Using this naming policy with Gson will modify the Java Field name from its camel cased
+   * form to a lower case field name where each word is separated by an underscore (_).
+   *
+   * <p>Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":</p>
+   * <ul>
+   *   <li>someFieldName ---> some_field_name</li>
+   *   <li>_someFieldName ---> _some_field_name</li>
+   *   <li>aStringField ---> a_string_field</li>
+   *   <li>aURL ---> a_u_r_l</li>
+   * </ul>
+   */
+  LOWER_CASE_WITH_UNDERSCORES() {
+    @Override public String translateName(Field f) {
+      return separateCamelCase(f.getName(), "_").toLowerCase(Locale.ENGLISH);
+    }
+  },
+
+  /**
+   * Using this naming policy with Gson will modify the Java Field name from its camel cased
+   * form to a lower case field name where each word is separated by a dash (-).
+   *
+   * <p>Here's a few examples of the form "Java Field Name" ---> "JSON Field Name":</p>
+   * <ul>
+   *   <li>someFieldName ---> some-field-name</li>
+   *   <li>_someFieldName ---> _some-field-name</li>
+   *   <li>aStringField ---> a-string-field</li>
+   *   <li>aURL ---> a-u-r-l</li>
+   * </ul>
+   * Using dashes in JavaScript is not recommended since dash is also used for a minus sign in
+   * expressions. This requires that a field named with dashes is always accessed as a quoted
+   * property like {@code myobject['my-field']}. Accessing it as an object field
+   * {@code myobject.my-field} will result in an unintended javascript expression.
+   * @since 1.4
+   */
+  LOWER_CASE_WITH_DASHES() {
+    @Override public String translateName(Field f) {
+      return separateCamelCase(f.getName(), "-").toLowerCase(Locale.ENGLISH);
+    }
+  };
+  
+	@Override
+	public String format(Date date) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+}
diff --git a/gson/src/main/java/com/google/gson/DateFormatStrategy.java b/gson/src/main/java/com/google/gson/DateFormatStrategy.java
new file mode 100644
index 000000000..3da5c6904
--- /dev/null
+++ b/gson/src/main/java/com/google/gson/DateFormatStrategy.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2015 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.gson;
+
+import java.text.ParseException;
+import java.util.Date;
+
+/**
+ * Mechanism to format a date during the serialization.
+ *
+ */
+public interface DateFormatStrategy {
+	
+	/**
+	 * Formats date during serialization.
+	 * @param date to format.
+	 * @return Formatted date.
+	 */
+	public String format(Date date);
+	public Date parse(String dateAsString) throws ParseException;
+}
diff --git a/gson/src/main/java/com/google/gson/DateFormatter.java b/gson/src/main/java/com/google/gson/DateFormatter.java
new file mode 100644
index 000000000..acf3e3e16
--- /dev/null
+++ b/gson/src/main/java/com/google/gson/DateFormatter.java
@@ -0,0 +1,10 @@
+package com.google.gson;
+
+import java.text.ParseException;
+import java.util.Date;
+
+public interface DateFormatter {
+
+	String format(Date date);
+	Date parse(String dateAsString) throws ParseException;
+}
diff --git a/gson/src/main/java/com/google/gson/ISO8601DateFormatter.java b/gson/src/main/java/com/google/gson/ISO8601DateFormatter.java
new file mode 100644
index 000000000..865402c34
--- /dev/null
+++ b/gson/src/main/java/com/google/gson/ISO8601DateFormatter.java
@@ -0,0 +1,21 @@
+package com.google.gson;
+
+import java.text.ParseException;
+import java.text.ParsePosition;
+import java.util.Date;
+
+import com.google.gson.internal.bind.util.ISO8601Utils;
+
+final class ISO8601DateFormat implements DateFormatter
+{
+	@Override
+	public String format(Date date) {
+		return ISO8601Utils.format(date, true);
+	}
+
+	@Override
+	public Date parse(String dateAsString) throws ParseException {
+		return ISO8601Utils.parse(dateAsString, new ParsePosition(0));
+	}
+	
+}
diff --git a/gson/src/main/java/com/google/gson/SimpleDateFormatter.java b/gson/src/main/java/com/google/gson/SimpleDateFormatter.java
new file mode 100644
index 000000000..bd6dd56ec
--- /dev/null
+++ b/gson/src/main/java/com/google/gson/SimpleDateFormatter.java
@@ -0,0 +1,28 @@
+package com.google.gson;
+
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.util.Date;
+
+final class SimpleDateFormatter implements DateFormatter
+{
+	private final DateFormat dateFormat;
+	
+	SimpleDateFormatter(DateFormat dateFormat) {
+    this.dateFormat = dateFormat;
+  }
+
+	@Override
+	public String format(Date date) {
+		synchronized (dateFormat) {
+      return dateFormat.format(date);
+    }
+	}
+
+	@Override
+	public Date parse(String dateAsString) throws ParseException {
+		synchronized (dateFormat) {
+			return dateFormat.parse(dateAsString);
+		}
+	}
+}
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/UnixDateFormatter.java b/gson/src/main/java/com/google/gson/UnixDateFormatter.java
new file mode 100644
index 000000000..b2c080c80
--- /dev/null
+++ b/gson/src/main/java/com/google/gson/UnixDateFormatter.java
@@ -0,0 +1,19 @@
+package com.google.gson;
+
+import java.util.Date;
+
+final class UnixDateFormat implements DateFormatter
+{
+
+	@Override
+	public String format(Date date) {
+		return Long.toString(date.getTime() / 1000);
+	}
+
+	@Override
+	public Date parse(String dateAsString) {
+		Long seconds = Long.parseLong(dateAsString);
+		return new Date(seconds * 1000);
+	}
+	
+}
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/wip2.java b/gson/src/main/java/com/google/gson/wip2.java
new file mode 100644
index 000000000..b45b01f0b
--- /dev/null
+++ b/gson/src/main/java/com/google/gson/wip2.java
@@ -0,0 +1,28 @@
+package com.google.gson;
+
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+public class wip2 {
+
+    public static void main(String[] args) {
+	Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'").create();
+	String json = "{'date': \"2015-11-19\"}";//  "{'date': \"2015-11-19T18:33:51Z\"}"; 
+	MyDateJson datDate = gson.fromJson(json, MyDateJson.class);
+	Date date = datDate.getDate();
+    }
+    
+    private class MyDateJson
+    {
+	private Date date;
+
+	public Date getDate() {
+	    return date;
+	}
+
+	public void setDate(Date date) {
+	    this.date = date;
+	}
+    }
+
+}
