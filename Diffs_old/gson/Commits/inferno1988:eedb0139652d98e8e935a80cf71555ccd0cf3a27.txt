diff --git a/gson/src/main/java/com/google/gson/annotations/IgnoreNullValue.java b/gson/src/main/java/com/google/gson/annotations/IgnoreNullValue.java
new file mode 100644
index 000000000..021134332
--- /dev/null
+++ b/gson/src/main/java/com/google/gson/annotations/IgnoreNullValue.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.gson.annotations;
+
+import java.lang.annotation.*;
+
+/**
+ * An annotation that indicates this member should not be overwritten if JSON value is null.
+ *
+ * @author Maksym Palamarchuk
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface IgnoreNullValue {}
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
index 34e97664e..36328fe8c 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -21,6 +21,7 @@
 import com.google.gson.JsonSyntaxException;
 import com.google.gson.TypeAdapter;
 import com.google.gson.TypeAdapterFactory;
+import com.google.gson.annotations.IgnoreNullValue;
 import com.google.gson.annotations.JsonAdapter;
 import com.google.gson.annotations.SerializedName;
 import com.google.gson.internal.$Gson$Types;
@@ -127,8 +128,10 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
-        if (fieldValue != null || !isPrimitive) {
-          field.set(value, fieldValue);
+        if(fieldValue != null || !field.isAnnotationPresent(IgnoreNullValue.class)) {
+          if(fieldValue != null || !isPrimitive) {
+            field.set(value, fieldValue);
+          }
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
