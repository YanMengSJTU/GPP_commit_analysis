diff --git a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
index 51c05196e..c38fa35ad 100644
--- a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
@@ -34,93 +34,90 @@
  */
 final class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {
 
-  // TODO: migrate to streaming adapter
+	// TODO: migrate to streaming adapter
 
-  private final DateFormat enUsFormat;
-  private final DateFormat localFormat;
-  private final DateFormat iso8601Format;
-  private final DateFormat iso8601FormatMilli;
+	private final DateFormat enUsFormat;
+	private final DateFormat localFormat;
+	private final DateFormat iso8601Format;
 
-  DefaultDateTypeAdapter() {
-    this(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US),
-        DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));
-  }
+	DefaultDateTypeAdapter() {
+		this(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US),
+			DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));
+	}
 
-  DefaultDateTypeAdapter(String datePattern) {
-    this(new SimpleDateFormat(datePattern, Locale.US), new SimpleDateFormat(datePattern));
-  }
+	DefaultDateTypeAdapter(String datePattern) {
+		this(new SimpleDateFormat(datePattern, Locale.US), new SimpleDateFormat(datePattern));
+	}
 
-  DefaultDateTypeAdapter(int style) {
-    this(DateFormat.getDateInstance(style, Locale.US), DateFormat.getDateInstance(style));
-  }
+	DefaultDateTypeAdapter(int style) {
+		this(DateFormat.getDateInstance(style, Locale.US), DateFormat.getDateInstance(style));
+	}
 
-  public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {
-    this(DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US),
-        DateFormat.getDateTimeInstance(dateStyle, timeStyle));
-  }
+	public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {
+		this(DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US),
+			DateFormat.getDateTimeInstance(dateStyle, timeStyle));
+	}
 
-  DefaultDateTypeAdapter(DateFormat enUsFormat, DateFormat localFormat) {
-    this.enUsFormat = enUsFormat;
-    this.localFormat = localFormat;
-    this.iso8601Format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.US);
-    this.iso8601Format.setTimeZone(TimeZone.getTimeZone("UTC"));
-    this.iso8601FormatMilli = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.US);
-    this.iso8601FormatMilli.setTimeZone(TimeZone.getTimeZone("UTC"));
-  }
+	DefaultDateTypeAdapter(DateFormat enUsFormat, DateFormat localFormat) {
+		this.enUsFormat = enUsFormat;
+		this.localFormat = localFormat;
+		this.iso8601Format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.US);
+		this.iso8601Format.setTimeZone(TimeZone.getTimeZone("UTC"));
+	}
 
-  // These methods need to be synchronized since JDK DateFormat classes are not thread-safe
-  // See issue 162
-  public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {
-    synchronized (localFormat) {
-      String dateFormatAsString = enUsFormat.format(src);
-      return new JsonPrimitive(dateFormatAsString);
-    }
-  }
+	// These methods need to be synchronized since JDK DateFormat classes are not thread-safe
+	// See issue 162
+	public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {
+		synchronized (localFormat) {
+			String dateFormatAsString = enUsFormat.format(src);
+			return new JsonPrimitive(dateFormatAsString);
+		}
+	}
 
-  public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
-      throws JsonParseException {
-    if (!(json instanceof JsonPrimitive)) {
-      throw new JsonParseException("The date should be a string value");
-    }
-    Date date = deserializeToDate(json);
-    if (typeOfT == Date.class) {
-      return date;
-    } else if (typeOfT == Timestamp.class) {
-      return new Timestamp(date.getTime());
-    } else if (typeOfT == java.sql.Date.class) {
-      return new java.sql.Date(date.getTime());
-    } else {
-      throw new IllegalArgumentException(getClass() + " cannot deserialize to " + typeOfT);
-    }
-  }
+	public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
+		throws JsonParseException {
+		if (!(json instanceof JsonPrimitive)) {
+			throw new JsonParseException("The date should be a string value");
+		}
+		Date date = deserializeToDate(json);
+		if (typeOfT == Date.class) {
+			return date;
+		} else if (typeOfT == Timestamp.class) {
+			return new Timestamp(date.getTime());
+		} else if (typeOfT == java.sql.Date.class) {
+			return new java.sql.Date(date.getTime());
+		} else {
+			throw new IllegalArgumentException(getClass() + " cannot deserialize to " + typeOfT);
+		}
+	}
 
-  private Date deserializeToDate(JsonElement json) {
-    synchronized (localFormat) {
-      try {
-        return localFormat.parse(json.getAsString());
-      } catch (ParseException ignored) {
-      }
-      try {
-        return enUsFormat.parse(json.getAsString());
-      } catch (ParseException ignored) {
-      }
-      try {
-        return iso8601FormatMilli.parse(json.getAsString());
-      } catch (ParseException ignored) {
-      }
-      try {
-        return iso8601Format.parse(json.getAsString());
-      } catch (ParseException e) {
-        throw new JsonSyntaxException(json.getAsString(), e);
-      }
-    }
-  }
+	private Date deserializeToDate(JsonElement json) {
+		synchronized (localFormat) {
+			try {
+				return localFormat.parse(json.getAsString());
+			} catch (ParseException ignored) {
+			}
+			try {
+				return enUsFormat.parse(json.getAsString());
+			} catch (ParseException ignored) {
+			}
+			try {
+				return iso8601Format.parse(json.getAsString());
+			} catch (ParseException ignored) {
+			}
+			try {
+				return iso8601Format.parse(json.getAsString().replaceFirst("\\.\\d\\d\\d", ""));
+			} catch (ParseException e) {
+				throw new JsonSyntaxException(json.getAsString(), e);
+			}
+		}
+	}
 
-  @Override
-  public String toString() {
-    StringBuilder sb = new StringBuilder();
-    sb.append(DefaultDateTypeAdapter.class.getSimpleName());
-    sb.append('(').append(localFormat.getClass().getSimpleName()).append(')');
-    return sb.toString();
-  }
+	@Override
+	public String toString() {
+		StringBuilder sb = new StringBuilder();
+		sb.append(DefaultDateTypeAdapter.class.getSimpleName());
+		sb.append('(').append(localFormat.getClass().getSimpleName()).append(')');
+		return sb.toString();
+	}
 }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
index 536d13e6f..886e57289 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
@@ -51,7 +51,6 @@
   private final DateFormat localFormat
       = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT);
   private final DateFormat iso8601Format = buildIso8601Format();
-  private final DateFormat iso8601FormatMilli = buildIso8601FormatMilli();
 
   private static DateFormat buildIso8601Format() {
     DateFormat iso8601Format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.US);
@@ -59,12 +58,6 @@ private static DateFormat buildIso8601Format() {
     return iso8601Format;
   }
 
-  private static DateFormat buildIso8601FormatMilli() {
-    DateFormat iso8601FormatMilli = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.US);
-    iso8601FormatMilli.setTimeZone(TimeZone.getTimeZone("UTC"));
-    return iso8601FormatMilli;
-  }
-
   @Override public Date read(JsonReader in) throws IOException {
     if (in.peek() == JsonToken.NULL) {
       in.nextNull();
@@ -83,11 +76,11 @@ private synchronized Date deserializeToDate(String json) {
     } catch (ParseException ignored) {
     }
     try {
-      return iso8601FormatMilli.parse(json);
+      return iso8601Format.parse(json);
     } catch (ParseException ignored) {
     }
     try {
-      return iso8601Format.parse(json);
+      return iso8601Format.parse(json.replaceFirst("\\.\\d\\d\\d", ""));
     } catch (ParseException e) {
       throw new JsonSyntaxException(json, e);
     }
