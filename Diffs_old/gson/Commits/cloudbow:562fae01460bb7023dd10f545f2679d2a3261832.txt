diff --git a/gson/src/main/java/com/google/gson/JsonArray.java b/gson/src/main/java/com/google/gson/JsonArray.java
index c664a5e18..d07813621 100644
--- a/gson/src/main/java/com/google/gson/JsonArray.java
+++ b/gson/src/main/java/com/google/gson/JsonArray.java
@@ -151,6 +151,28 @@ public JsonElement remove(int index) {
   public boolean contains(JsonElement element) {
     return elements.contains(element);
   }
+  
+  /**
+   * Overloaded convenience method which searches a string in JsonArray and returns true if it exists
+   * Assumes that the JsonArray contains string elements
+   * @return true if this array contains the specified element.
+   * @param element whose presence in this array is to be tested
+   */
+  public boolean contains(String element) {
+     if(element==null || elements.size()==0 ) return false;
+     return contains(new JsonPrimitive(element));     
+  }
+  
+  /**
+   * Overloaded convenience method which searches a Integer in JsonArray and returns true if it exists
+   * Assumes that the JsonArray contains integer elements
+   * @return true if this array contains the specified element.
+   * @param element whose presence in this array is to be tested
+   */
+  public boolean contains(Integer element) {
+     if(element==null || elements.size()==0 ) return false;
+     return contains(new JsonPrimitive(element));     
+  }
 
   /**
    * Returns the number of elements in the array.
diff --git a/gson/src/test/java/com/google/gson/JsonArrayTest.java b/gson/src/test/java/com/google/gson/JsonArrayTest.java
index b77d6f1b4..e0d20d23d 100644
--- a/gson/src/test/java/com/google/gson/JsonArrayTest.java
+++ b/gson/src/test/java/com/google/gson/JsonArrayTest.java
@@ -99,4 +99,24 @@ public void testDeepCopy() {
     assertEquals(1, original.get(0).getAsJsonArray().size());
     assertEquals(0, copy.get(0).getAsJsonArray().size());
   }
+  
+  public void testArrayContains() {
+      
+    JsonArray original = new JsonArray();
+    original.add(new JsonPrimitive("y"));
+    original.add(new JsonPrimitive("z"));
+
+    assertTrue(original.contains("y"));
+    assertFalse(original.contains("a"));
+
+    
+    original = new JsonArray();
+    original.add(new JsonPrimitive("1"));
+    original.add(new JsonPrimitive("2"));
+    
+    assertTrue(original.contains("2"));
+    assertFalse(original.contains("0"));
+
+
+  }
 }
