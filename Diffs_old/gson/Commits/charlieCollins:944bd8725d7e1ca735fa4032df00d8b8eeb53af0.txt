diff --git a/gson/j2objc/readme.md b/gson/j2objc/readme.md
index 3dbad3e33..b93b2fcfd 100644
--- a/gson/j2objc/readme.md
+++ b/gson/j2objc/readme.md
@@ -65,28 +65,27 @@ NOTE: if you NEED sources for other projects, such as for transitive dependencie
 ```mvn dependency:unpack-dependencies -Dclassifier=sources```   
 (this will put source in target/dependency)
 
-2. get ALL the source together and make sure javac can compile it
-find ../src -name "*.java" > sources_all.txt
+3. get ALL the source together and make sure javac can compile it   
+```find ../src -name "*.java" > sources_all.txt```   
 
-3. make sure javac works, and include deps in classpath (ONLY use deps that j2objc supports, else get SOURCE for those deps too)
-javac -classpath ~/.m2/repository/junit/junit/4.12/junit-4.12.jar -d ./build_java @sources_all.txt
+4. make sure javac works, and include deps in classpath (ONLY use deps that j2objc supports, else get SOURCE for those deps too)   
+```javac -classpath ~/.m2/repository/junit/junit/4.12/junit-4.12.jar -d ./build_java @sources_all.txt```   
 
-4. transpile the JAVA source in OBJC source with j2objc (no pkg dirs makes the imports cleaner/easier)
-j2objc --no-package-directories -classpath ~/.m2/repository/junit/junit/4.12/junit-4.12.jar -d ./build_objc @sources_all.txt
+5. transpile the JAVA source in OBJC source with j2objc (no pkg dirs makes the imports cleaner/easier)
+```j2objc --no-package-directories -classpath ~/.m2/repository/junit/junit/4.12/junit-4.12.jar -d ./build_objc @sources_all.txt```   
 
-5. compile the OBJC into an executable 
-j2objcc -Wno-deprecated -ObjC -o gsonobjc -ljre_emul -ljunit ./build_objc/*.m
+6. compile the OBJC into an executable   
+```j2objcc -Wno-deprecated -ObjC -o gsonobjc -ljre_emul -ljunit ./build_objc/*.m```   
+(you now have an executable! and it can run all the interfaces defined within! (incl junit))
 
-#you now have an executable! and it can run all the interfaces defined within! (incl junit) 
+7. run a SINGLE test   
+```./gsonobjc org.junit.runner.JUnitCore ComGoogleGsonCommentsTest```
 
-6. run a SINGLE test
-./gsonobjc org.junit.runner.JUnitCore ComGoogleGsonCommentsTest
+8. get the NAMES of all the tests, while not using package directories, from the gened header files 
+```find ./build_objc/*Test.h -exec grep -hw -m1 "$@interface" {} \; | sed 's/@interface//' | sed 's/ ().*/\/' | sed 's/ :.*//' > test_names.txt```
 
-7. get the NAMES of all the tests, while not using package directories, from the gened header files 
-find ./build_objc/*Test.h -exec grep -hw -m1 "$@interface" {} \; | sed 's/@interface//' | sed 's/ ().*/\/' | sed 's/ :.*//' > test_names.txt
-
-8. RUN the tests 
-for i in `cat test_names.txt`; do echo RUNNING: $i; ./gsonobjc org.junit.runner.JUnitCore $i; done
+9. RUN the tests   
+```for i in `cat test_names.txt`; do echo RUNNING: $i; ./gsonobjc org.junit.runner.JUnitCore $i; done```
 
 
 
