diff --git a/gson/src/main/java/com/google/gson/Gson.java b/gson/src/main/java/com/google/gson/Gson.java
index 80f050fa3..d2818ef45 100644
--- a/gson/src/main/java/com/google/gson/Gson.java
+++ b/gson/src/main/java/com/google/gson/Gson.java
@@ -143,19 +143,14 @@
 		factories.add(TypeAdapters.BOOLEAN_FACTORY);
 		factories.add(TypeAdapters.BYTE_FACTORY);
 		factories.add(TypeAdapters.SHORT_FACTORY);
-		TypeAdapter<Number> longAdapter = TypeAdapters.LONG;
-		factories.add(TypeAdapters.newFactory(long.class, Long.class, longAdapter));
-		factories.add(TypeAdapters.newFactory(double.class, Double.class,
-				TypeAdapters.DOUBLE));
-		factories.add(TypeAdapters.newFactory(float.class, Float.class,
-				TypeAdapters.FLOAT));
+		factories.add(TypeAdapters.LONG_FACTORY);
+		factories.add(TypeAdapters.FLOAT_FACTORY);
+		factories.add(TypeAdapters.DOUBLE_FACTORY);
 		factories.add(TypeAdapters.NUMBER_FACTORY);
 		factories.add(TypeAdapters.CHARACTER_FACTORY);
 		factories.add(TypeAdapters.STRING_BUILDER_FACTORY);
-		factories.add(TypeAdapters.STRING_BUFFER_FACTORY);
-		factories.add(TypeAdapters.newFactory(BigDecimal.class, TypeAdapters.BIG_DECIMAL));
-		factories.add(TypeAdapters.newFactory(BigInteger.class, TypeAdapters.BIG_INTEGER));
-		factories.add(TypeAdapters.URL_FACTORY);
+		factories.add(TypeAdapterFactory.checkingRawType(BigDecimal.class, () -> TypeAdapters.BIG_DECIMAL));
+		factories.add(TypeAdapterFactory.checkingRawType(BigInteger.class, () -> TypeAdapters.BIG_INTEGER));
 		factories.add(TypeAdapters.URI_FACTORY);
 		factories.add(TypeAdapters.UUID_FACTORY);
 		factories.add(TypeAdapters.CURRENCY_FACTORY);
@@ -306,7 +301,9 @@ public boolean htmlSafe() {
 			threadCalls.put(type, call);
 
 			for (TypeAdapterFactory factory : factories) {
-				TypeAdapter<T> candidate = factory.create(this, type);
+				var rawType = type.getRawType();
+				
+				TypeAdapter<T> candidate = factory.create(this, type, rawType);
 				if (candidate != null) {
 					call.setDelegate(candidate);
 					typeTokenCache.put(type, candidate);
@@ -388,8 +385,10 @@ public boolean htmlSafe() {
 				}
 				continue;
 			}
+			
+			var rawType = type.getRawType();
 
-			TypeAdapter<T> candidate = factory.create(this, type);
+			TypeAdapter<T> candidate = factory.create(this, type, rawType);
 			if (candidate != null) {
 				return candidate;
 			}
diff --git a/gson/src/main/java/com/google/gson/TypeAdapterFactory.java b/gson/src/main/java/com/google/gson/TypeAdapterFactory.java
index bd85fc8db..18a815218 100644
--- a/gson/src/main/java/com/google/gson/TypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/TypeAdapterFactory.java
@@ -16,7 +16,8 @@
 
 package com.google.gson;
 
-import com.google.gson.reflect.TypeToken;
+import com.google.gson.reflect.*;
+import java.util.function.*;
 
 /**
  * Creates type adapters for set of related types. Type adapter factories are
@@ -160,11 +161,32 @@
  *
  * @since 2.1
  */
+@SuppressWarnings("unchecked")
 public interface TypeAdapterFactory {
 
-  /**
-   * Returns a type adapter for {@code type}, or null if this factory doesn't
-   * support {@code type}.
-   */
-  <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type);
-}
+	/**
+	 * Returns a type adapter for {@code type}, or null if this factory doesn't
+	 * support {@code type}.
+	 */
+	<T> TypeAdapter<T> create(Gson gson, TypeToken<T> type, Class<? super T> rawType);
+	
+	public static<T> TypeAdapterFactory checkingRawType(Class<T> raw, Supplier<TypeAdapter<? super T>> adapter){
+		return new TypeAdapterFactory() {
+			
+			@Override
+			public <TT> TypeAdapter<TT> create(Gson gson, TypeToken<TT> type, Class<? super TT> rawType) {
+				return rawType == raw ? (TypeAdapter<TT>) adapter.get() : null;
+			}
+		};
+	}
+	
+	public static <T> TypeAdapterFactory checkingRawTypes(Class<T> unboxed, Class<T> boxed, Supplier<TypeAdapter<? super T>> typeAdapter) {
+		return new TypeAdapterFactory() {
+			
+			@Override 
+			public <TT> TypeAdapter<TT> create(Gson gson, TypeToken<TT> typeToken, Class<? super TT> rawType) {
+				return rawType == unboxed || rawType == boxed ? (TypeAdapter<TT>) typeAdapter.get() : null;
+			}
+		};
+	}
+}
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/internal/Excluder.java b/gson/src/main/java/com/google/gson/internal/Excluder.java
index 66e230572..fa7d5d045 100644
--- a/gson/src/main/java/com/google/gson/internal/Excluder.java
+++ b/gson/src/main/java/com/google/gson/internal/Excluder.java
@@ -99,8 +99,7 @@ public Excluder withExclusionStrategy(ExclusionStrategy exclusionStrategy,
 	}
 
 	@Override
-	public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> type) {
-		Class<?> rawType = type.getRawType();
+	public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> type, Class<? super T> rawType) {
 		boolean excludeClass = excludeClassChecks(rawType);
 
 		final boolean skipSerialize = excludeClass || excludeClassInStrategy(rawType, true);
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
index e3899a535..60a825f93 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
@@ -29,7 +29,7 @@
 public final class ArrayTypeAdapter<E> extends TypeAdapter<Object> {
 	public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {
 		@SuppressWarnings({"unchecked", "rawtypes"})
-		@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
+		@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken, Class<? super T> rawType) {
 			Type type = typeToken.getType();
 			if (!(type instanceof GenericArrayType || type instanceof Class && ((Class<?>) type).isArray())) {
 				return null;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
index 1398e0b56..73cba79e5 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
@@ -36,10 +36,9 @@ public CollectionTypeAdapterFactory(Map<Type, Function<Class<?>, ?>> instanceCre
 	}
 
 	@Override
-	public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
+	public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken, Class<? super T> rawType) {
 		Type type = typeToken.getType();
 
-		Class<? super T> rawType = typeToken.getRawType();
 		if (!Collection.class.isAssignableFrom(rawType)) {
 			return null;
 		}
diff --git a/gson/src/main/java/com/google/gson/internal/bind/InstantTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/InstantTypeAdapter.java
index 9b985dd24..2bf127426 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/InstantTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/InstantTypeAdapter.java
@@ -1,20 +1,13 @@
 package com.google.gson.internal.bind;
 
 import com.google.gson.*;
-import com.google.gson.reflect.*;
 import com.google.gson.stream.*;
 import java.io.*;
 import java.time.*;
 
 public class InstantTypeAdapter extends TypeAdapter<Instant>{
-	public static final TypeAdapterFactory factory = new TypeAdapterFactory() {
-		
-		@SuppressWarnings("unchecked")
-		@Override
-		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
-			return type.getRawType() == Instant.class ? (TypeAdapter<T>) new InstantTypeAdapter() : null;
-		}
-	};
+	public static final TypeAdapterFactory factory = TypeAdapterFactory.checkingRawType(Instant.class, InstantTypeAdapter::new);
+	
 	@Override
 	public void write(JsonWriter out, Instant value) throws IOException {
 		if(value == null) {
diff --git a/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
index 8b4aa71ec..ccc642dc6 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
@@ -37,26 +37,24 @@ public JsonAdapterAnnotationTypeAdapterFactory(Map<Type, Function<Class<?>, ?>>
 		this.instanceCreators = instanceCreators;
 	}
 
-	@SuppressWarnings("unchecked")
 	@Override
-	public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> targetType) {
-		Class<? super T> rawType = targetType.getRawType();
+	public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> targetType, Class<? super T> rawType) {
 		JsonAdapter annotation = rawType.getAnnotation(JsonAdapter.class);
 		if (annotation == null) {
 			return null;
 		}
-		return (TypeAdapter<T>) getTypeAdapter(instanceCreators, gson, targetType, annotation);
+		return getTypeAdapter(instanceCreators, gson, targetType, annotation);
 	}
 
 	@SuppressWarnings({ "unchecked", "rawtypes" }) // Casts guarded by conditionals.
-	public static TypeAdapter<?> getTypeAdapter(Map<Type, Function<Class<?>, ?>> instanceCreators, Gson gson, TypeToken<?> type, JsonAdapter annotation) {
+	public static<T> TypeAdapter<T> getTypeAdapter(Map<Type, Function<Class<?>, ?>> instanceCreators, Gson gson, TypeToken<T> type, JsonAdapter annotation) {
 		Object instance = ConstructorConstructor.get(TypeToken.get(annotation.value()), instanceCreators).get();
 
-		TypeAdapter<?> typeAdapter;
+		TypeAdapter<T> typeAdapter;
 		if (instance instanceof TypeAdapter) {
-			typeAdapter = (TypeAdapter<?>) instance;
+			typeAdapter = (TypeAdapter<T>) instance;
 		} else if (instance instanceof TypeAdapterFactory) {
-			typeAdapter = ((TypeAdapterFactory) instance).create(gson, type);
+			typeAdapter = ((TypeAdapterFactory) instance).create(gson, type, type.getRawType());
 		} else if (instance instanceof JsonSerializer || instance instanceof JsonDeserializer) {
 			JsonSerializer<?> serializer = instance instanceof JsonSerializer
 					? (JsonSerializer) instance
diff --git a/gson/src/main/java/com/google/gson/internal/bind/LocalDateAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/LocalDateAdapter.java
index c947007af..92fe714f8 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/LocalDateAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/LocalDateAdapter.java
@@ -1,22 +1,12 @@
 package com.google.gson.internal.bind;
 
-import java.io.*;
-import java.time.*;
-
 import com.google.gson.*;
-import com.google.gson.reflect.*;
 import com.google.gson.stream.*;
+import java.io.*;
+import java.time.*;
 
 public class LocalDateAdapter extends TypeAdapter<LocalDate>{
-
-	public static final TypeAdapterFactory factory = new TypeAdapterFactory() {
-		
-		@SuppressWarnings("unchecked")
-		@Override
-		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
-			return type.getRawType() == LocalDate.class ? (TypeAdapter<T>) new LocalDateAdapter() : null;
-		}
-	};
+	public static final TypeAdapterFactory factory = TypeAdapterFactory.checkingRawType(LocalDate.class, LocalDateAdapter::new);
 	
 	@Override
 	public void write(JsonWriter out, LocalDate value) throws IOException {
diff --git a/gson/src/main/java/com/google/gson/internal/bind/LocalDateTimeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/LocalDateTimeAdapter.java
index 3f1ff1dca..00f673a13 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/LocalDateTimeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/LocalDateTimeAdapter.java
@@ -1,20 +1,12 @@
 package com.google.gson.internal.bind;
 
 import com.google.gson.*;
-import com.google.gson.reflect.*;
 import com.google.gson.stream.*;
 import java.io.*;
 import java.time.*;
 
 public class LocalDateTimeAdapter extends TypeAdapter<LocalDateTime>{
-
-	public static final TypeAdapterFactory factory = new TypeAdapterFactory() {
-		@SuppressWarnings("unchecked")
-		@Override
-		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
-			return type.getRawType() == LocalDateTime.class ? (TypeAdapter<T>) new LocalDateTimeAdapter() : null;
-		}
-	};
+	public static final TypeAdapterFactory factory = TypeAdapterFactory.checkingRawType(LocalDateTime.class, LocalDateTimeAdapter::new);
 	
 	@Override
 	public void write(JsonWriter out, LocalDateTime value) throws IOException {
diff --git a/gson/src/main/java/com/google/gson/internal/bind/LocalTimeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/LocalTimeAdapter.java
index adc35952e..da9c912d2 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/LocalTimeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/LocalTimeAdapter.java
@@ -1,20 +1,12 @@
 package com.google.gson.internal.bind;
 
 import com.google.gson.*;
-import com.google.gson.reflect.*;
 import com.google.gson.stream.*;
 import java.io.*;
 import java.time.*;
 
 public class LocalTimeAdapter extends TypeAdapter<LocalTime>{
-	public static final TypeAdapterFactory factory = new TypeAdapterFactory() {
-		
-		@SuppressWarnings("unchecked")
-		@Override
-		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
-			return type.getRawType() == LocalTime.class ? (TypeAdapter<T>) new LocalTimeAdapter() : null;
-		}
-	};
+	public static final TypeAdapterFactory factory = TypeAdapterFactory.checkingRawType(LocalTime.class, LocalTimeAdapter::new);
 	
 	@Override
 	public void write(JsonWriter out, LocalTime value) throws IOException {
diff --git a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
index b991e8e59..d4e1dbc82 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
@@ -100,10 +100,9 @@ public MapTypeAdapterFactory(Map<Type, Function<Class<?>, ?>> instanceCreators,
 		this.complexMapKeySerialization = complexMapKeySerialization;
 	}
 
-	@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
+	@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken, Class<? super T> rawType) {
 		Type type = typeToken.getType();
 
-		Class<? super T> rawType = typeToken.getRawType();
 		if (!Map.class.isAssignableFrom(rawType)) {
 			return null;
 		}
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
index a1399f1da..79757666b 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
@@ -29,8 +29,8 @@
 public final class ObjectTypeAdapter extends TypeAdapter<Object> {
 	public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {
 		@SuppressWarnings("unchecked")
-		@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
-			if (type.getRawType() == Object.class) {
+		@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type, Class<? super T> rawType) {
+			if (rawType == Object.class) {
 				return (TypeAdapter<T>) new ObjectTypeAdapter(gson);
 			}
 			return null;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
index 5cd8ae00a..dbc22c49f 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -68,15 +68,13 @@ public boolean excludeField(Field f, boolean serialize) {
 	}
 
 	@Override 
-	public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
-		Class<? super T> raw = type.getRawType();
-
-		if (!Object.class.isAssignableFrom(raw)) {
+	public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type, Class<? super T> rawType) {
+		if (!Object.class.isAssignableFrom(rawType)) {
 			return null; // it's a primitive!
 		}
 
 		Supplier<T> constructor = ConstructorConstructor.get(type, instanceCreators);
-		return new Adapter<T>(constructor, getBoundFields(gson, type, raw));
+		return new Adapter<T>(constructor, getBoundFields(gson, type, rawType));
 	}
 
 	private ReflectiveTypeAdapterFactory.BoundField createBoundField(Gson context, Field field, String name, TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java
index 1167df01f..06345de1c 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java
@@ -129,12 +129,12 @@ public static TypeAdapterFactory newTypeHierarchyFactory(
 
 		@SuppressWarnings("unchecked") // guarded by typeToken.equals() call
 		@Override
-		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
+		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type, Class<? super T> rawType) {
 			boolean matches = exactType != null
-					? exactType.equals(type) || matchRawType && exactType.getType() == type.getRawType()
-					: hierarchyType.isAssignableFrom(type.getRawType());
+					? exactType.equals(type) || matchRawType && exactType.getType() == rawType
+					: hierarchyType.isAssignableFrom(rawType);
 					return matches
-							? new TreeTypeAdapter<T>((JsonSerializer<T>) serializer,
+							? new TreeTypeAdapter<>((JsonSerializer<T>) serializer,
 									(JsonDeserializer<T>) deserializer, gson, type, this)
 									: null;
 		}
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
index fe58c704e..ed0e66cc1 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
@@ -31,7 +31,7 @@
  */
 public final class TypeAdapters {
 
-	public static final TypeAdapterFactory CLASS_FACTORY = newFactory(Class.class, new TypeAdapter<Class>() {
+	public static final TypeAdapterFactory CLASS_FACTORY = TypeAdapterFactory.checkingRawType(Class.class, () -> new TypeAdapter<Class>() {
 		@Override
 		public void write(JsonWriter out, Class value) throws IOException {
 			throw new UnsupportedOperationException("Attempted to serialize java.lang.Class: " + value.getName() + ". Forgot to register a type adapter?");
@@ -76,8 +76,7 @@ public void write(JsonWriter out, Boolean value) throws IOException {
 		}
 	};
 
-	public static final TypeAdapterFactory BOOLEAN_FACTORY
-	= newFactory(boolean.class, Boolean.class, BOOLEAN);
+	public static final TypeAdapterFactory BOOLEAN_FACTORY = TypeAdapterFactory.checkingRawTypes(boolean.class, Boolean.class, () -> BOOLEAN);
 
 	public static final TypeAdapter<Number> BYTE = new TypeAdapter<>() {
 		@Override
@@ -99,8 +98,7 @@ public void write(JsonWriter out, Number value) throws IOException {
 		}
 	};
 
-	public static final TypeAdapterFactory BYTE_FACTORY
-	= newFactory(byte.class, Byte.class, BYTE);
+	public static final TypeAdapterFactory BYTE_FACTORY = TypeAdapterFactory.checkingRawTypes(byte.class, Byte.class, () -> BYTE);
 
 	public static final TypeAdapter<Number> SHORT = new TypeAdapter<>() {
 		@Override
@@ -121,8 +119,7 @@ public void write(JsonWriter out, Number value) throws IOException {
 		}
 	};
 
-	public static final TypeAdapterFactory SHORT_FACTORY
-	= newFactory(short.class, Short.class, SHORT);
+	public static final TypeAdapterFactory SHORT_FACTORY = TypeAdapterFactory.checkingRawTypes(short.class, Short.class, () -> SHORT);
 
 	public static final TypeAdapter<Number> INTEGER = new TypeAdapter<>() {
 		@Override
@@ -142,8 +139,7 @@ public void write(JsonWriter out, Number value) throws IOException {
 			out.value(value);
 		}
 	};
-	public static final TypeAdapterFactory INTEGER_FACTORY
-	= newFactory(int.class, Integer.class, INTEGER);
+	public static final TypeAdapterFactory INTEGER_FACTORY = TypeAdapterFactory.checkingRawTypes(int.class, Integer.class, () -> INTEGER);
 
 	public static final TypeAdapter<Number> LONG = new TypeAdapter<>() {
 		@Override
@@ -163,6 +159,8 @@ public void write(JsonWriter out, Number value) throws IOException {
 			out.value(value);
 		}
 	};
+	
+	public static final TypeAdapterFactory LONG_FACTORY = TypeAdapterFactory.checkingRawTypes(long.class, Long.class, () -> LONG);
 
 	public static final TypeAdapter<Number> FLOAT = new TypeAdapter<>() {
 		@Override
@@ -184,6 +182,8 @@ public void write(JsonWriter out, Number value) throws IOException {
 			out.value(value);
 		}
 	};
+	
+	public static final TypeAdapterFactory FLOAT_FACTORY = TypeAdapterFactory.checkingRawTypes(float.class, Float.class, () -> FLOAT);
 
 	static void checkValidFloatingPoint(double value) {
 		if (Double.isNaN(value) || Double.isInfinite(value)) {
@@ -213,6 +213,8 @@ public void write(JsonWriter out, Number value) throws IOException {
 			out.value(value);
 		}
 	};
+	
+	public static final TypeAdapterFactory DOUBLE_FACTORY = TypeAdapterFactory.checkingRawTypes(double.class, Double.class, () -> DOUBLE);
 
 	public static final TypeAdapter<Number> NUMBER = new TypeAdapter<>() {
 		@Override
@@ -235,7 +237,7 @@ public void write(JsonWriter out, Number value) throws IOException {
 		}
 	};
 
-	public static final TypeAdapterFactory NUMBER_FACTORY = newFactory(Number.class, NUMBER);
+	public static final TypeAdapterFactory NUMBER_FACTORY = TypeAdapterFactory.checkingRawType(Number.class, () -> NUMBER);
 
 	public static final TypeAdapter<Character> CHARACTER = new TypeAdapter<>() {
 		@Override
@@ -256,8 +258,7 @@ public void write(JsonWriter out, Character value) throws IOException {
 		}
 	};
 
-	public static final TypeAdapterFactory CHARACTER_FACTORY
-	= newFactory(char.class, Character.class, CHARACTER);
+	public static final TypeAdapterFactory CHARACTER_FACTORY = TypeAdapterFactory.checkingRawTypes(char.class, Character.class, () -> CHARACTER);
 
 	public static final TypeAdapter<String> STRING = new TypeAdapter<>() {
 		@Override
@@ -315,7 +316,7 @@ public void write(JsonWriter out, String value) throws IOException {
 		}
 	};
 
-	public static final TypeAdapterFactory STRING_FACTORY = newFactory(String.class, STRING);
+	public static final TypeAdapterFactory STRING_FACTORY = TypeAdapterFactory.checkingRawType(String.class, () -> STRING);
 
 	public static final TypeAdapter<StringBuilder> STRING_BUILDER = new TypeAdapter<>() {
 		@Override
@@ -332,44 +333,7 @@ public void write(JsonWriter out, StringBuilder value) throws IOException {
 		}
 	};
 
-	public static final TypeAdapterFactory STRING_BUILDER_FACTORY =
-			newFactory(StringBuilder.class, STRING_BUILDER);
-
-	public static final TypeAdapter<StringBuffer> STRING_BUFFER = new TypeAdapter<>() {
-		@Override
-		public StringBuffer read(JsonReader in) throws IOException {
-			if (in.peek() == JsonToken.NULL) {
-				in.nextNull();
-				return null;
-			}
-			return new StringBuffer(in.nextString());
-		}
-		@Override
-		public void write(JsonWriter out, StringBuffer value) throws IOException {
-			out.value(value == null ? null : value.toString());
-		}
-	};
-
-	public static final TypeAdapterFactory STRING_BUFFER_FACTORY =
-			newFactory(StringBuffer.class, STRING_BUFFER);
-
-	public static final TypeAdapter<URL> URL = new TypeAdapter<>() {
-		@Override
-		public URL read(JsonReader in) throws IOException {
-			if (in.peek() == JsonToken.NULL) {
-				in.nextNull();
-				return null;
-			}
-			String nextString = in.nextString();
-			return "null".equals(nextString) ? null : new URL(nextString);
-		}
-		@Override
-		public void write(JsonWriter out, URL value) throws IOException {
-			out.value(value == null ? null : value.toExternalForm());
-		}
-	};
-
-	public static final TypeAdapterFactory URL_FACTORY = newFactory(URL.class, URL);
+	public static final TypeAdapterFactory STRING_BUILDER_FACTORY = TypeAdapterFactory.checkingRawType(StringBuilder.class, () -> STRING_BUILDER);
 
 	public static final TypeAdapter<URI> URI = new TypeAdapter<>() {
 		@Override
@@ -391,7 +355,7 @@ public void write(JsonWriter out, URI value) throws IOException {
 		}
 	};
 
-	public static final TypeAdapterFactory URI_FACTORY = newFactory(URI.class, URI);
+	public static final TypeAdapterFactory URI_FACTORY = TypeAdapterFactory.checkingRawType(URI.class, () -> URI);
 
 	public static final TypeAdapter<UUID> UUID = new TypeAdapter<>() {
 		@Override
@@ -408,7 +372,7 @@ public void write(JsonWriter out, UUID value) throws IOException {
 		}
 	};
 
-	public static final TypeAdapterFactory UUID_FACTORY = newFactory(UUID.class, UUID);
+	public static final TypeAdapterFactory UUID_FACTORY = TypeAdapterFactory.checkingRawType(UUID.class, () -> UUID);
 
 	public static final TypeAdapter<Currency> CURRENCY = new TypeAdapter<Currency>() {
 		@Override
@@ -420,7 +384,7 @@ public void write(JsonWriter out, Currency value) throws IOException {
 			out.value(value.getCurrencyCode());
 		}
 	}.nullSafe();
-	public static final TypeAdapterFactory CURRENCY_FACTORY = newFactory(Currency.class, CURRENCY);
+	public static final TypeAdapterFactory CURRENCY_FACTORY = TypeAdapterFactory.checkingRawType(Currency.class, () -> CURRENCY);
 
 	public static final TypeAdapter<Locale> LOCALE = new TypeAdapter<>() {
 		@Override
@@ -457,7 +421,7 @@ public void write(JsonWriter out, Locale value) throws IOException {
 		}
 	};
 
-	public static final TypeAdapterFactory LOCALE_FACTORY = newFactory(Locale.class, LOCALE);
+	public static final TypeAdapterFactory LOCALE_FACTORY = TypeAdapterFactory.checkingRawType(Locale.class, () -> LOCALE);
 
 	public static final TypeAdapter<JsonElement> JSON_ELEMENT = new TypeAdapter<>() {
 		@Override public JsonElement read(JsonReader in) throws IOException {
@@ -571,8 +535,7 @@ public EnumTypeAdapter(Class<T> classOfT) {
 
 	public static final TypeAdapterFactory ENUM_FACTORY = new TypeAdapterFactory() {
 		@SuppressWarnings({"rawtypes", "unchecked"})
-		@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
-			Class<? super T> rawType = typeToken.getRawType();
+		@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken, Class<? super T> rawType) {
 			if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class) {
 				return null;
 			}
@@ -583,58 +546,24 @@ public EnumTypeAdapter(Class<T> classOfT) {
 		}
 	};
 
-	public static <TT> TypeAdapterFactory newFactory(
-			final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter) {
+	public static <TT> TypeAdapterFactory newFactory(TypeToken<TT> type, TypeAdapter<TT> typeAdapter) {
 		return new TypeAdapterFactory() {
 			@SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
-			@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
+			@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken, Class<? super T> rawType) {
 				return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;
 			}
 		};
 	}
 
-	public static <TT> TypeAdapterFactory newFactory(Class<TT> type, TypeAdapter<TT> typeAdapter) {
-		return new TypeAdapterFactory() {
-			@SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
-			@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
-				return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;
-			}
-		};
-	}
-
-	public static <TT> TypeAdapterFactory newFactory(
-			final Class<TT> unboxed, final Class<TT> boxed, final TypeAdapter<? super TT> typeAdapter) {
-		return new TypeAdapterFactory() {
-			@SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
-			@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
-				Class<? super T> rawType = typeToken.getRawType();
-				return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;
-			}
-		};
-	}
-
-	public static <TT> TypeAdapterFactory newFactoryForMultipleTypes(final Class<TT> base,
-			final Class<? extends TT> sub, final TypeAdapter<? super TT> typeAdapter) {
-		return new TypeAdapterFactory() {
-			@SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
-			@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
-				Class<? super T> rawType = typeToken.getRawType();
-				return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;
-			}
-		};
-	}
-
 	/**
 	 * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
 	 * that the deserialized type matches the type requested.
 	 */
-	public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
-			final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
+	public static <T1> TypeAdapterFactory newTypeHierarchyFactory(Class<T1> clazz, TypeAdapter<T1> typeAdapter) {
 		return new TypeAdapterFactory() {
 			@SuppressWarnings("unchecked")
-			@Override public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
-				final Class<? super T2> requestedType = typeToken.getRawType();
-				if (!clazz.isAssignableFrom(requestedType)) {
+			@Override public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken, Class<? super T2> rawType) {
+				if (!clazz.isAssignableFrom(rawType)) {
 					return null;
 				}
 				return (TypeAdapter<T2>) new TypeAdapter<T1>() {
@@ -644,8 +573,8 @@ public EnumTypeAdapter(Class<T> classOfT) {
 
 					@Override public T1 read(JsonReader in) throws IOException {
 						T1 result = typeAdapter.read(in);
-						if (result != null && !requestedType.isInstance(result)) {
-							throw new JsonSyntaxException("Expected a " + requestedType.getName()
+						if (result != null && !rawType.isInstance(result)) {
+							throw new JsonSyntaxException("Expected a " + rawType.getName()
 							+ " but was " + result.getClass().getName());
 						}
 						return result;
diff --git a/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java b/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
index c6ca8880f..ea72327d9 100644
--- a/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
+++ b/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
@@ -74,8 +74,8 @@ public void testDelegateInvokedOnStrings() {
     public int numReads = 0;
     public int numWrites = 0;
 
-    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
-      final TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);
+    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type, Class<? super T> rawType) {
+      TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);
       return new TypeAdapter<T>() {
         @Override
         public void write(JsonWriter out, T value) throws IOException {
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
index b5d437ccd..092a4c13c 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
@@ -68,7 +68,7 @@ public void testJsonAdapterFactoryInvoked() {
   }
 
   public void testRegisteredAdapterOverridesJsonAdapter() {
-    TypeAdapter<A> typeAdapter = new TypeAdapter<A>() {
+    TypeAdapter<A> typeAdapter = new TypeAdapter<>() {
       @Override public void write(JsonWriter out, A value) throws IOException {
         out.value("registeredAdapter");
       }
@@ -87,7 +87,7 @@ public void testRegisteredAdapterOverridesJsonAdapter() {
    * The serializer overrides field adapter, but for deserializer the fieldAdapter is used.
    */
   public void testRegisteredSerializerOverridesJsonAdapter() {
-    JsonSerializer<A> serializer = new JsonSerializer<A>() {
+    JsonSerializer<A> serializer = new JsonSerializer<>() {
       public JsonElement serialize(A src, Type typeOfSrc,
           JsonSerializationContext context) {
         return new JsonPrimitive("registeredSerializer");
@@ -106,7 +106,7 @@ public JsonElement serialize(A src, Type typeOfSrc,
    * The deserializer overrides Json adapter, but for serializer the jsonAdapter is used.
    */
   public void testRegisteredDeserializerOverridesJsonAdapter() {
-    JsonDeserializer<A> deserializer = new JsonDeserializer<A>() {
+    JsonDeserializer<A> deserializer = new JsonDeserializer<>() {
       public A deserialize(JsonElement json, Type typeOfT,
           JsonDeserializationContext context) throws JsonParseException {
         return new A("registeredDeserializer");
@@ -163,8 +163,8 @@ public void testNullSafeObjectFromJson() {
       this.value = value;
     }
     static final class JsonAdapterFactory implements TypeAdapterFactory {
-      @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
-        return new TypeAdapter<T>() {
+      @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type, Class<? super T> rawType) {
+        return new TypeAdapter<>() {
           @Override public void write(JsonWriter out, T value) throws IOException {
             out.value("jsonAdapterFactory");
           }
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
index 8003c19df..e9525f05e 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
@@ -131,7 +131,7 @@ public Part() {
   }
 
   private static class GizmoPartTypeAdapterFactory implements TypeAdapterFactory {
-    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
+    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type, Class<? super T> rawType) {
       return new TypeAdapter<T>() {
         @Override public void write(JsonWriter out, T value) throws IOException {
           out.value("GizmoPartTypeAdapterFactory");
@@ -296,7 +296,7 @@ public GadgetWithPrimitivePart() {
       }
     };
     @SuppressWarnings("unchecked")
-    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
+    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type, Class<? super T> rawType) {
       Class<?> cls = type.getRawType();
       if (Long.class.isAssignableFrom(cls)) {
         return (TypeAdapter<T>) ADAPTER;
@@ -329,7 +329,7 @@ public Gizmo2() {
   }
 
   private static class Gizmo2PartTypeAdapterFactory implements TypeAdapterFactory {
-    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
+    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type, Class<? super T> rawType) {
       return new TypeAdapter<T>() {
         @Override public void write(JsonWriter out, T value) throws IOException {
           out.value("GizmoPartTypeAdapterFactory");
diff --git a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java b/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
index 1f7f4d109..bc00e88e8 100644
--- a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
+++ b/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
@@ -152,7 +152,7 @@ protected RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {
       return registerSubtype(type, type.getSimpleName());
     }
 
-    @Override public <R> TypeAdapter<R> create(Gson gson, TypeToken<R> type) {
+    @Override public <R> TypeAdapter<R> create(Gson gson, TypeToken<R> type, Class<? super R> rawType) {
       if (type.getRawType() != baseType) {
         return null;
       }
diff --git a/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java b/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
index 62348f4b6..f7949e168 100644
--- a/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
+++ b/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
@@ -53,8 +53,8 @@ public Device() {}
 			private static final ThreadLocal<Boolean> recursiveCall = new ThreadLocal<Boolean>();
 
 			@Override 
-			public <T> TypeAdapter<T> create(final Gson gson, TypeToken<T> type) {
-				if (type.getRawType() != Device.class || recursiveCall.get() != null) {
+			public <T> TypeAdapter<T> create(final Gson gson, TypeToken<T> type, Class<? super T> rawType) {
+				if (rawType != Device.class || recursiveCall.get() != null) {
 					recursiveCall.set(null); // clear for subsequent use
 					return null;
 				}
