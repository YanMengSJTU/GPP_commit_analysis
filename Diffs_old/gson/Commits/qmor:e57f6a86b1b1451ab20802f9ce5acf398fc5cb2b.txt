diff --git a/gson/src/main/java/com/google/gson/Gson.java b/gson/src/main/java/com/google/gson/Gson.java
index ba677e262..063732eca 100644
--- a/gson/src/main/java/com/google/gson/Gson.java
+++ b/gson/src/main/java/com/google/gson/Gson.java
@@ -147,7 +147,7 @@
   final LongSerializationPolicy longSerializationPolicy;
   final List<TypeAdapterFactory> builderFactories;
   final List<TypeAdapterFactory> builderHierarchyFactories;
-
+  final boolean json5;
   /**
    * Constructs a Gson object with default configuration. The default configuration has the
    * following settings:
@@ -189,7 +189,7 @@ public Gson() {
         DEFAULT_PRETTY_PRINT, DEFAULT_LENIENT, DEFAULT_SPECIALIZE_FLOAT_VALUES,
         LongSerializationPolicy.DEFAULT, null, DateFormat.DEFAULT, DateFormat.DEFAULT,
         Collections.<TypeAdapterFactory>emptyList(), Collections.<TypeAdapterFactory>emptyList(),
-        Collections.<TypeAdapterFactory>emptyList());
+        Collections.<TypeAdapterFactory>emptyList(),false);
   }
 
   Gson(final Excluder excluder, final FieldNamingStrategy fieldNamingStrategy,
@@ -199,7 +199,7 @@ public Gson() {
       LongSerializationPolicy longSerializationPolicy, String datePattern, int dateStyle,
       int timeStyle, List<TypeAdapterFactory> builderFactories,
       List<TypeAdapterFactory> builderHierarchyFactories,
-      List<TypeAdapterFactory> factoriesToBeAdded) {
+      List<TypeAdapterFactory> factoriesToBeAdded,final boolean json5) {
     this.excluder = excluder;
     this.fieldNamingStrategy = fieldNamingStrategy;
     this.instanceCreators = instanceCreators;
@@ -217,6 +217,7 @@ public Gson() {
     this.timeStyle = timeStyle;
     this.builderFactories = builderFactories;
     this.builderHierarchyFactories = builderHierarchyFactories;
+    this.json5 = json5;
 
     List<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>();
 
@@ -894,6 +895,7 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce
   @SuppressWarnings("unchecked")
   public <T> T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {
     JsonReader jsonReader = newJsonReader(json);
+    jsonReader.setJson5(this.json5);
     T object = (T) fromJson(jsonReader, typeOfT);
     assertFullConsumption(object, jsonReader);
     return object;
diff --git a/gson/src/main/java/com/google/gson/GsonBuilder.java b/gson/src/main/java/com/google/gson/GsonBuilder.java
index b97be452b..2f0ea1125 100644
--- a/gson/src/main/java/com/google/gson/GsonBuilder.java
+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java
@@ -94,6 +94,7 @@
   private boolean prettyPrinting = DEFAULT_PRETTY_PRINT;
   private boolean generateNonExecutableJson = DEFAULT_JSON_NON_EXECUTABLE;
   private boolean lenient = DEFAULT_LENIENT;
+  private boolean json5 = false;
 
   /**
    * Creates a GsonBuilder instance that can be used to build Gson with various configuration
@@ -577,6 +578,18 @@ public GsonBuilder serializeSpecialFloatingPointValues() {
     return this;
   }
 
+  /**
+   * Set JSON5 compability 
+   * https://json5.org/
+   * @param json5
+   * @return
+   */
+  public GsonBuilder setJSON5Mode(boolean json5)
+  {
+	  this.json5 = json5;
+	  return this;
+  }
+  
   /**
    * Creates a {@link Gson} instance based on the current configuration. This method is free of
    * side-effects to this {@code GsonBuilder} instance and hence can be called multiple times.
@@ -599,7 +612,7 @@ public Gson create() {
         generateNonExecutableJson, escapeHtmlChars, prettyPrinting, lenient,
         serializeSpecialFloatingPointValues, longSerializationPolicy,
         datePattern, dateStyle, timeStyle,
-        this.factories, this.hierarchyFactories, factories);
+        this.factories, this.hierarchyFactories, factories,json5);
   }
 
   @SuppressWarnings("unchecked")
diff --git a/gson/src/main/java/com/google/gson/stream/JsonReader.java b/gson/src/main/java/com/google/gson/stream/JsonReader.java
index e0799d736..d1b71029c 100644
--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java
+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java
@@ -228,7 +228,8 @@
 
   /** True to accept non-spec compliant JSON */
   private boolean lenient = false;
-
+  
+  private boolean json5;
   /**
    * Use a manual buffer to easily read and unread upcoming characters, and
    * also so we can create strings without an intermediate StringBuilder.
@@ -1186,7 +1187,21 @@ public int nextInt() throws IOException {
         peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\'' : '"');
       }
       try {
-        result = Integer.parseInt(peekedString);
+    	if (!json5)
+    	{
+    		result = Integer.parseInt(peekedString);
+    	}
+    	else
+    	{
+    		if (peekedString.toLowerCase().startsWith("0x"))
+    		{
+    			result = Integer.parseInt(peekedString.substring(2),16);
+    		}
+    		else
+    		{
+    			result = Integer.parseInt(peekedString);
+    		}
+    	}
         peeked = PEEKED_NONE;
         pathIndices[stackSize - 1]++;
         return result;
@@ -1490,7 +1505,11 @@ public String getPath() {
     }
     return result.toString();
   }
-
+  
+  public void setJson5(boolean json5) {
+	  this.json5 = json5;
+  }
+  
   /**
    * Unescapes the character identified by the character or characters that
    * immediately follow a backslash. The backslash '\' should have already
diff --git a/gson/src/test/java/com/google/gson/GsonTest.java b/gson/src/test/java/com/google/gson/GsonTest.java
index eec2ec91c..edb1cce98 100644
--- a/gson/src/test/java/com/google/gson/GsonTest.java
+++ b/gson/src/test/java/com/google/gson/GsonTest.java
@@ -49,7 +49,7 @@ public void testOverridesDefaultExcluder() {
         new HashMap<Type, InstanceCreator<?>>(), true, false, true, false,
         true, true, false, LongSerializationPolicy.DEFAULT, null, DateFormat.DEFAULT,
         DateFormat.DEFAULT, new ArrayList<TypeAdapterFactory>(),
-        new ArrayList<TypeAdapterFactory>(), new ArrayList<TypeAdapterFactory>());
+        new ArrayList<TypeAdapterFactory>(), new ArrayList<TypeAdapterFactory>(),false);
 
     assertEquals(CUSTOM_EXCLUDER, gson.excluder());
     assertEquals(CUSTOM_FIELD_NAMING_STRATEGY, gson.fieldNamingStrategy());
@@ -62,7 +62,7 @@ public void testClonedTypeAdapterFactoryListsAreIndependent() {
         new HashMap<Type, InstanceCreator<?>>(), true, false, true, false,
         true, true, false, LongSerializationPolicy.DEFAULT, null, DateFormat.DEFAULT,
         DateFormat.DEFAULT, new ArrayList<TypeAdapterFactory>(),
-        new ArrayList<TypeAdapterFactory>(), new ArrayList<TypeAdapterFactory>());
+        new ArrayList<TypeAdapterFactory>(), new ArrayList<TypeAdapterFactory>(),false);
 
     Gson clone = original.newBuilder()
         .registerTypeAdapter(Object.class, new TestTypeAdapter())
diff --git a/gson/src/test/java/com/google/gson/Json5Tests.java b/gson/src/test/java/com/google/gson/Json5Tests.java
new file mode 100644
index 000000000..3f8333bae
--- /dev/null
+++ b/gson/src/test/java/com/google/gson/Json5Tests.java
@@ -0,0 +1,40 @@
+package com.google.gson;
+
+import static org.junit.Assert.assertEquals;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class Json5Tests {
+	
+
+	class Json5Cls
+	{
+		public int hex;
+	}
+	class Json5ClsArray
+	{
+		public List<Integer> hexarray;
+	}
+	@Test
+	public void testJSON5hexInteger()
+	{
+
+		String json5= "{hex:0xdeadc0d}";
+		GsonBuilder builder = new GsonBuilder();
+		builder.setJSON5Mode(true);
+		Gson gson = builder.create();
+		Json5Cls result = gson.fromJson(json5, Json5Cls.class);
+		assertEquals(0xdeadc0d, result.hex);
+
+		json5= "{hexarray:[1,2,0x20,2.0]}";
+		Json5ClsArray resarray = gson.fromJson(json5, Json5ClsArray.class);
+		List<Integer> resultListTest = new ArrayList<>();
+		resultListTest.addAll(Arrays.asList(new Integer[] {1,2,32,2}));
+		Assert.assertEquals(resarray.hexarray,resultListTest);
+	}
+}
