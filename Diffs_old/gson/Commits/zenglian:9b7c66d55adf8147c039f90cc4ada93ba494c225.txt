diff --git a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
index ec42e0482..4662f53e0 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
@@ -26,6 +26,7 @@
 import com.google.gson.stream.JsonWriter;
 
 import java.io.IOException;
+import java.math.BigInteger;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -35,6 +36,11 @@
  * serialization and a primitive/Map/List on deserialization.
  */
 public final class ObjectTypeAdapter extends TypeAdapter<Object> {
+  private static final BigInteger MAX_INT = BigInteger.valueOf(Integer.MAX_VALUE);
+  private static final BigInteger MIN_INT = BigInteger.valueOf(Integer.MIN_VALUE);
+  private static final BigInteger MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);
+  private static final BigInteger MIN_LONG = BigInteger.valueOf(Long.MIN_VALUE);
+
   public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {
     @SuppressWarnings("unchecked")
     @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
@@ -76,7 +82,17 @@
       return in.nextString();
 
     case NUMBER:
-      return in.nextDouble();
+      String str = in.nextString();
+      if (str.contains(".") || str.contains("E") || str.contains("e")) {
+        return Double.valueOf(str);
+      } else {
+        BigInteger big = new BigInteger(str);
+        if (big.compareTo(MAX_INT) <= 0 && big.compareTo(MIN_INT) >= 0)
+          return big.intValue();
+        if (big.compareTo(MAX_LONG) <= 0 && big.compareTo(MIN_LONG) >= 0)
+          return big.longValue();
+        return big;
+      }
 
     case BOOLEAN:
       return in.nextBoolean();
diff --git a/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java b/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java
index 2891bffca..727799769 100644
--- a/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java
+++ b/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java
@@ -16,10 +16,8 @@
 
 package com.google.gson;
 
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.LinkedHashMap;
-import java.util.Map;
+import java.math.BigInteger;
+import java.util.*;
 import junit.framework.TestCase;
 
 public final class ObjectTypeAdapterTest extends TestCase {
@@ -28,8 +26,8 @@
 
   public void testDeserialize() throws Exception {
     Map<?, ?> map = (Map<?, ?>) adapter.fromJson("{\"a\":5,\"b\":[1,2,null],\"c\":{\"x\":\"y\"}}");
-    assertEquals(5.0, map.get("a"));
-    assertEquals(Arrays.asList(1.0, 2.0, null), map.get("b"));
+    assertEquals(5, map.get("a"));
+    assertEquals(Arrays.asList(1, 2, null), map.get("b"));
     assertEquals(Collections.singletonMap("x", "y"), map.get("c"));
     assertEquals(3, map.size());
   }
@@ -55,6 +53,17 @@ public void testSerializeObject() throws Exception {
     assertEquals("{}", adapter.toJson(new Object()));
   }
 
+  public void testDeserializeNumbers() {
+    String json = "[2147483647,9223372036854775807,9223372036854775808,-9223372036854775809,1E6,1.0]";
+    Object[] numbers = gson.fromJson(json, Object[].class);
+    assertEquals(Integer.MAX_VALUE, numbers[0]);                       //int
+    assertEquals(Long.MAX_VALUE, numbers[1]);                          //long
+    assertEquals(new BigInteger("9223372036854775808"), numbers[2]);  //BigInteger
+    assertEquals(new BigInteger("-9223372036854775809"), numbers[3]); //BigInteger
+    assertEquals(1.0E6, numbers[4]);                                    //double
+    assertEquals(1.0, numbers[5]);                                      //double
+  }
+
   @SuppressWarnings("unused")
   private class RuntimeType {
     Object a = 5;
diff --git a/gson/src/test/java/com/google/gson/functional/CollectionTest.java b/gson/src/test/java/com/google/gson/functional/CollectionTest.java
index 4ec7378b2..deff33e56 100644
--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java
+++ b/gson/src/test/java/com/google/gson/functional/CollectionTest.java
@@ -17,19 +17,7 @@
 package com.google.gson.functional;
 
 import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.PriorityQueue;
-import java.util.Queue;
-import java.util.Set;
-import java.util.Stack;
-import java.util.Vector;
+import java.util.*;
 
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
@@ -253,8 +241,8 @@ public void testRawCollectionSerialization() {
   public void testRawCollectionDeserializationNotAlllowed() {
     String json = "[0,1,2,3,4,5,6,7,8,9]";
     Collection integers = gson.fromJson(json, Collection.class);
-    // JsonReader converts numbers to double by default so we need a floating point comparison
-    assertEquals(Arrays.asList(0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0), integers);
+    // JsonReader converts numbers to long by default so we need L suffix
+    assertEquals(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), integers);
 
     json = "[\"Hello\", \"World\"]";
     Collection strings = gson.fromJson(json, Collection.class);
@@ -271,8 +259,8 @@ public void testRawCollectionOfBagOfPrimitivesNotAllowed() {
     for (Object bag1 : target) {
       // Gson 2.0 converts raw objects into maps
       Map<String, Object> values = (Map<String, Object>) bag1;
-      assertTrue(values.containsValue(10.0));
-      assertTrue(values.containsValue(20.0));
+      assertTrue(values.containsValue(10));
+      assertTrue(values.containsValue(20));
       assertTrue(values.containsValue("stringValue"));
     }
   }
@@ -324,7 +312,7 @@ public void testFieldIsArrayList() {
     HasArrayListField copy = gson.fromJson("{\"longs\":[1,3]}", HasArrayListField.class);
     assertEquals(Arrays.asList(1L, 3L), copy.longs);
   }
-  
+
   public void testUserCollectionTypeAdapter() {
     Type listOfString = new TypeToken<List<String>>() {}.getType();
     Object stringListSerializer = new JsonSerializer<List<String>>() {
@@ -411,5 +399,4 @@ public void testIssue1107() {
     assertNotNull(small);
     assertEquals("hello", small.inSmall);
   }
-
 }
