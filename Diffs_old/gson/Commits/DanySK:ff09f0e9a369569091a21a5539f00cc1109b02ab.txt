diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 000000000..b8a47ca22
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1 @@
+gson/docs/javadocs/* linguist-documentation
diff --git a/.gitignore b/.gitignore
index 05e74ee0b..d9b1c770d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,3 +8,10 @@ gradle.prefs
 version.info
 version.info
 prepare_environment.sh
+eclipsebin
+.idea
+*.iml
+*.ipr
+*.iws
+classes
+.DS_Store
diff --git a/.travis.yml b/.travis.yml
index ca1765e6b..15f4caa06 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -19,5 +19,5 @@ before_install:
   - openssl aes-256-cbc -K $encrypted_817fdb1d0976_key -iv $encrypted_817fdb1d0976_iv -in prepare_environment.sh.enc -out prepare_environment.sh -d
   - sh prepare_environment.sh
 script:
-  - ./gradlew
-  - ./gradlew uploadArchives
+  - ./gradlew check
+  - ./gradlew publishAll
diff --git a/README.md b/README.md
index 42226506d..6c63d7256 100644
--- a/README.md
+++ b/README.md
@@ -25,3 +25,7 @@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ```
+
+### Disclaimer
+
+This is not an officially supported Google product.
diff --git a/build.gradle b/build.gradle
deleted file mode 100644
index 395b34e4a..000000000
--- a/build.gradle
+++ /dev/null
@@ -1,47 +0,0 @@
-buildscript {
-    repositories {
-        maven { url "https://plugins.gradle.org/m2/" }
-    }
-    dependencies {
-        classpath "gradle.plugin.org.danilopianini:javadoc.io-linker:${javadocIOVersion}"
-        classpath "gradle.plugin.org.danilopianini:build-commons:${buildCommonsVersion}"
-    }
-}
-
-apply plugin: 'org.danilopianini.build-commons'
-
-configurations {
-    doc { transitive false }
-    doclet
-}
-
-dependencies {
-   compile "com.google.code.gson:gson:$gsonVersion"
-   testCompile "junit:junit:$junitVersion"
-   doclet "org.jboss.apiviz:apiviz:$apivizVersion"
-}
-
-apply plugin: "org.danilopianini.javadoc.io-linker"
-
-uploadArchives {
-    repositories {
-        mavenDeployer {
-            pom.project {
-                developers {
-                    developer {
-                        name 'Danilo Pianini'
-                        email 'danilo.pianini@unibo.it'
-                        url 'http://www.danilopianini.org'
-                    }
-                    developer {
-                        name 'Matteo Francia'
-                        email 'matteo.francia2@studio.unibo.it'
-                    }
-                }
-            }
-        }
-    }
-}
-
-defaultTasks 'clean', 'build', 'check', 'javadoc', 'assemble', 'install'
-
diff --git a/build.gradle.kts b/build.gradle.kts
new file mode 100644
index 000000000..5a5ccac0c
--- /dev/null
+++ b/build.gradle.kts
@@ -0,0 +1,68 @@
+import org.gradle.api.tasks.testing.logging.TestExceptionFormat
+
+plugins {
+    buildSrcVersions
+    id("org.danilopianini.git-sensitive-semantic-versioning") version Versions.org_danilopianini_git_sensitive_semantic_versioning_gradle_plugin
+    `java-library`
+    id("org.jlleitschuh.gradle.ktlint") version Versions.org_jlleitschuh_gradle_ktlint_gradle_plugin
+    signing
+    `maven-publish`
+    id("org.danilopianini.publish-on-central") version Versions.org_danilopianini_publish_on_central_gradle_plugin
+}
+
+repositories {
+    mavenCentral()
+}
+
+gitSemVer {
+    version = computeGitSemVer()
+}
+
+dependencies {
+    api("com.google.code.gson:gson:2.8.6")
+    implementation("javax.annotation:jsr250-api:1.0")
+    testImplementation("junit:junit:[4.12, 5[")
+}
+
+tasks.withType<Test> {
+    failFast = true
+    testLogging {
+        events("passed", "skipped", "failed", "standardError")
+        exceptionFormat = TestExceptionFormat.FULL
+    }
+}
+
+group = "org.danilopianini"
+publishOnCentral {
+    projectDescription.set("Extra goodies for Gson, available on Google's Github repository, made available on Central")
+    projectLongName.set("Gson Extras")
+}
+
+publishing {
+    publications {
+        withType<MavenPublication> {
+            pom {
+                developers {
+                    developer {
+                        name.set("Danilo Pianini")
+                        email.set("danilo.pianini@unibo.it")
+                        url.set("http://www.danilopianini.org/")
+                    }
+                    developer {
+                        name.set("Matteo Francia")
+                        email.set("matteo.francia2@studio.unibo.it")
+                        url.set("http://www.danilopianini.org/")
+                    }
+                }
+            }
+        }
+    }
+}
+
+if (System.getenv("CI") == true.toString()) {
+    signing {
+        val signingKey: String? by project
+        val signingPassword: String? by project
+        useInMemoryPgpKeys(signingKey, signingPassword)
+    }
+}
diff --git a/buildSrc/.gitignore b/buildSrc/.gitignore
new file mode 100644
index 000000000..ea958e573
--- /dev/null
+++ b/buildSrc/.gitignore
@@ -0,0 +1,3 @@
+
+.gradle/
+build/
diff --git a/buildSrc/build.gradle.kts b/buildSrc/build.gradle.kts
new file mode 100644
index 000000000..3bdb70389
--- /dev/null
+++ b/buildSrc/build.gradle.kts
@@ -0,0 +1,8 @@
+
+plugins {
+    `kotlin-dsl`
+}
+repositories {
+    jcenter()
+}
+        
\ No newline at end of file
diff --git a/buildSrc/settings.gradle.kts b/buildSrc/settings.gradle.kts
new file mode 100644
index 000000000..e69de29bb
diff --git a/buildSrc/src/main/kotlin/Libs.kt b/buildSrc/src/main/kotlin/Libs.kt
new file mode 100644
index 000000000..5a05aae8d
--- /dev/null
+++ b/buildSrc/src/main/kotlin/Libs.kt
@@ -0,0 +1,59 @@
+import kotlin.String
+
+/**
+ * Generated by https://github.com/jmfayard/buildSrcVersions
+ *
+ * Update this file with
+ *   `$ ./gradlew buildSrcVersions`
+ */
+object Libs {
+    const val org_danilopianini_git_sensitive_semantic_versioning_gradle_plugin: String =
+            "org.danilopianini.git-sensitive-semantic-versioning:org.danilopianini.git-sensitive-semantic-versioning.gradle.plugin:" +
+            Versions.org_danilopianini_git_sensitive_semantic_versioning_gradle_plugin
+
+    const val org_danilopianini_publish_on_central_gradle_plugin: String =
+            "org.danilopianini.publish-on-central:org.danilopianini.publish-on-central.gradle.plugin:" +
+            Versions.org_danilopianini_publish_on_central_gradle_plugin
+
+    const val org_jlleitschuh_gradle_ktlint_gradle_plugin: String =
+            "org.jlleitschuh.gradle.ktlint:org.jlleitschuh.gradle.ktlint.gradle.plugin:" +
+            Versions.org_jlleitschuh_gradle_ktlint_gradle_plugin
+
+    const val de_fayard_buildsrcversions_gradle_plugin: String =
+            "de.fayard.buildSrcVersions:de.fayard.buildSrcVersions.gradle.plugin:" +
+            Versions.de_fayard_buildsrcversions_gradle_plugin
+
+    const val com_github_spotbugs_gradle_plugin: String =
+            "com.github.spotbugs:com.github.spotbugs.gradle.plugin:" +
+            Versions.com_github_spotbugs_gradle_plugin
+
+    /**
+     * http://commons.apache.org/proper/commons-lang/
+     */
+    const val commons_lang3: String = "org.apache.commons:commons-lang3:" + Versions.commons_lang3
+
+    /**
+     * http://www.jgrapht.org
+     */
+    const val jgrapht_core: String = "org.jgrapht:jgrapht-core:" + Versions.jgrapht_core
+
+    /**
+     * https://github.com/DanySK/boilerplate
+     */
+    const val boilerplate: String = "org.danilopianini:boilerplate:" + Versions.boilerplate
+
+    /**
+     * https://github.com/pinterest/ktlint
+     */
+    const val ktlint: String = "com.pinterest:ktlint:" + Versions.ktlint
+
+    /**
+     * https://github.com/google/guava
+     */
+    const val guava: String = "com.google.guava:guava:" + Versions.guava
+
+    /**
+     * http://junit.org
+     */
+    const val junit: String = "junit:junit:" + Versions.junit
+}
diff --git a/buildSrc/src/main/kotlin/Versions.kt b/buildSrc/src/main/kotlin/Versions.kt
new file mode 100644
index 000000000..ead023b8b
--- /dev/null
+++ b/buildSrc/src/main/kotlin/Versions.kt
@@ -0,0 +1,51 @@
+import kotlin.String
+import org.gradle.plugin.use.PluginDependenciesSpec
+import org.gradle.plugin.use.PluginDependencySpec
+
+/**
+ * Generated by https://github.com/jmfayard/buildSrcVersions
+ *
+ * Find which updates are available by running
+ *     `$ ./gradlew buildSrcVersions`
+ * This will only update the comments.
+ *
+ * YOU are responsible for updating manually the dependency version.
+ */
+object Versions {
+    const val org_danilopianini_git_sensitive_semantic_versioning_gradle_plugin: String = "0.2.2"
+
+    const val org_danilopianini_publish_on_central_gradle_plugin: String = "0.2.3"
+
+    const val org_jlleitschuh_gradle_ktlint_gradle_plugin: String = "9.0.0"
+
+    const val de_fayard_buildsrcversions_gradle_plugin: String = "0.6.4"
+
+    const val com_github_spotbugs_gradle_plugin: String = "1.6.9" // available: "2.0.0"
+
+    const val commons_lang3: String = "3.9"
+
+    const val jgrapht_core: String = "1.3.1"
+
+    const val boilerplate: String = "0.2.1"
+
+    const val ktlint: String = "0.34.2"
+
+    const val guava: String = "28.1-jre"
+
+    const val junit: String = "4.12"
+
+    /**
+     * Current version: "5.6.2"
+     * See issue 19: How to update Gradle itself?
+     * https://github.com/jmfayard/buildSrcVersions/issues/19
+     */
+    const val gradleLatestVersion: String = "5.6.2"
+}
+
+/**
+ * See issue #47: how to update buildSrcVersions itself
+ * https://github.com/jmfayard/buildSrcVersions/issues/47
+ */
+val PluginDependenciesSpec.buildSrcVersions: PluginDependencySpec
+    inline get() =
+            id("de.fayard.buildSrcVersions").version(Versions.de_fayard_buildsrcversions_gradle_plugin)
diff --git a/gradle.properties b/gradle.properties
index 9bd442d1a..67f367f14 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,31 +1,2 @@
-longName = Gson Extras
-projectDescription = Extra goodies for Gson, available on Google's Github repository, made available on Central.
-group = org.danilopianini
-artifactId = gson-extras
-version = 0.2.1
-
-jdkVersion = 1.6
-gradleVersion = 2.14.1
-buildCommonsVersion = 0.1.8
-javadocIOVersion = 0.1.0
-
-gsonVersion = [2.3.1, )
-junitVersion = [4.12, 5.0[
-apivizVersion = 1.3.2.GA
-
-pmdVersion = 5.7.0
-pmdTargetJdk = 1.6
-pmdConfigFile = pmd.xml
-checkstyleConfigFile = google_checks.xml
-
-licenseName = Apache License 2.0
-licenseUrl = https://raw.githubusercontent.com/DanySK/gson-extras/master/LICENSE
-
-scmType = scm:git
-scmRootUrl = https://github.com/DanySK
-scmLogin = git@github.com:DanySK
-scmRepoName = gson-extras.git
-
-signArchivesIsEnabled = false
-ossrhUsername = do not write your real user here, set it in your own ~/.gradle/gradle.properties
-ossrhPassword = do ABSOLUTELY NOT FOR GOD'S SAKE write your real password here, set it in your own ~/.gradle/gradle.properties
\ No newline at end of file
+systemProp.org.gradle.internal.http.connectionTimeout=500000
+systemProp.org.gradle.internal.http.socketTimeout=500000
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 3baa851b2..5c2d1cf01 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index b152b197a..7c4388a92 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,5 @@
-#Thu Sep 08 12:51:28 CEST 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-5.6.2-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-bin.zip
diff --git a/gradlew b/gradlew
index 27309d923..e554bc1d8 100755
--- a/gradlew
+++ b/gradlew
@@ -1,4 +1,20 @@
-#!/usr/bin/env bash
+#!/usr/bin/env sh
+
+#
+# Copyright 2015 the original author or authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
 
 ##############################################################################
 ##
@@ -28,16 +44,16 @@ APP_NAME="Gradle"
 APP_BASE_NAME=`basename "$0"`
 
 # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
 
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -81,7 +97,7 @@ Please set the JAVA_HOME variable in your environment to match the
 location of your Java installation."
     fi
 else
-    JAVACMD="java"
+    JAVACMD="/usr/lib/jvm/java-11-openjdk/bin/java"
     which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
 
 Please set the JAVA_HOME variable in your environment to match the
@@ -109,8 +125,8 @@ if $darwin; then
     GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
 fi
 
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin ; then
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
     JAVACMD=`cygpath --unix "$JAVACMD"`
@@ -154,11 +170,19 @@ if $cygwin ; then
     esac
 fi
 
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
 }
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+APP_ARGS=$(save "$@")
 
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
+
+exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
index f6d5974e7..24467a141 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -1,3 +1,19 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
 @if "%DEBUG%" == "" @echo off
 @rem ##########################################################################
 @rem
@@ -14,7 +30,7 @@ set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
 @rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
 
 @rem Find java.exe
 if defined JAVA_HOME goto findJavaFromJavaHome
@@ -49,7 +65,6 @@ goto fail
 @rem Get command-line arguments, handling Windows variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
 
 :win9xME_args
 @rem Slurp the command line arguments.
@@ -60,11 +75,6 @@ set _SKIP=2
 if "x%~1" == "x" goto execute
 
 set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
 
 :execute
 @rem Setup the command line
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 000000000..975ec9b39
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1 @@
+include ':gson'
diff --git a/src/main/java/com/google/gson/typeadapters/PostConstructAdapterFactory.java b/src/main/java/com/google/gson/typeadapters/PostConstructAdapterFactory.java
index 6d02b958c..36e06da20 100644
--- a/src/main/java/com/google/gson/typeadapters/PostConstructAdapterFactory.java
+++ b/src/main/java/com/google/gson/typeadapters/PostConstructAdapterFactory.java
@@ -33,7 +33,7 @@
     // copied from https://gist.github.com/swankjesse/20df26adaf639ed7fd160f145a0b661a
     @Override
     public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
-        for (Class<?> t = type.getRawType(); t != Object.class; t = t.getSuperclass()) {
+        for (Class<?> t = type.getRawType(); (t != Object.class) && (t.getSuperclass() != null); t = t.getSuperclass()) {
             for (Method m : t.getDeclaredMethods()) {
                 if (m.isAnnotationPresent(PostConstruct.class)) {
                     m.setAccessible(true);
@@ -73,4 +73,4 @@ public PostConstructAdapter(TypeAdapter<T> delegate, Method method) {
             delegate.write(out, value);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java b/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java
index bc0569cbd..47e7f5152 100644
--- a/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java
+++ b/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java
@@ -104,9 +104,9 @@
  * registered. This protects your application from injection attacks. If you
  * don't supply an explicit type label, the type's simple name will be used.
  * <pre>   {@code
- *   shapeAdapter.registerSubtype(Rectangle.class, "Rectangle");
- *   shapeAdapter.registerSubtype(Circle.class, "Circle");
- *   shapeAdapter.registerSubtype(Diamond.class, "Diamond");
+ *   shapeAdapterFactory.registerSubtype(Rectangle.class, "Rectangle");
+ *   shapeAdapterFactory.registerSubtype(Circle.class, "Circle");
+ *   shapeAdapterFactory.registerSubtype(Diamond.class, "Diamond");
  * }</pre>
  * Finally, register the type adapter factory in your application's GSON builder:
  * <pre>   {@code
@@ -126,21 +126,32 @@
   private final String typeFieldName;
   private final Map<String, Class<?>> labelToSubtype = new LinkedHashMap<String, Class<?>>();
   private final Map<Class<?>, String> subtypeToLabel = new LinkedHashMap<Class<?>, String>();
+  private final boolean maintainType;
 
-  private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {
+  private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName, boolean maintainType) {
     if (typeFieldName == null || baseType == null) {
       throw new NullPointerException();
     }
     this.baseType = baseType;
     this.typeFieldName = typeFieldName;
+    this.maintainType = maintainType;
   }
 
+  /**
+   * Creates a new runtime type adapter using for {@code baseType} using {@code
+   * typeFieldName} as the type field name. Type field names are case sensitive.
+   * {@code maintainType} flag decide if the type will be stored in pojo or not.
+   */
+  public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType, String typeFieldName, boolean maintainType) {
+    return new RuntimeTypeAdapterFactory<T>(baseType, typeFieldName, maintainType);
+  }
+  
   /**
    * Creates a new runtime type adapter using for {@code baseType} using {@code
    * typeFieldName} as the type field name. Type field names are case sensitive.
    */
   public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType, String typeFieldName) {
-    return new RuntimeTypeAdapterFactory<T>(baseType, typeFieldName);
+    return new RuntimeTypeAdapterFactory<T>(baseType, typeFieldName, false);
   }
 
   /**
@@ -148,7 +159,7 @@ private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {
    * the type field name.
    */
   public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType) {
-    return new RuntimeTypeAdapterFactory<T>(baseType, "type");
+    return new RuntimeTypeAdapterFactory<T>(baseType, "type", false);
   }
 
   /**
@@ -199,7 +210,13 @@ private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {
     return new TypeAdapter<R>() {
       @Override public R read(JsonReader in) throws IOException {
         JsonElement jsonElement = Streams.parse(in);
-        JsonElement labelJsonElement = jsonElement.getAsJsonObject().remove(typeFieldName);
+        JsonElement labelJsonElement;
+        if (maintainType) {
+            labelJsonElement = jsonElement.getAsJsonObject().get(typeFieldName);
+        } else {
+            labelJsonElement = jsonElement.getAsJsonObject().remove(typeFieldName);
+        }
+        
         if (labelJsonElement == null) {
           throw new JsonParseException("cannot deserialize " + baseType
               + " because it does not define a field named " + typeFieldName);
@@ -224,12 +241,20 @@ private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {
               + "; did you forget to register a subtype?");
         }
         JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();
+
+        if (maintainType) {
+          Streams.write(jsonObject, out);
+          return;
+        }
+
+        JsonObject clone = new JsonObject();
+
         if (jsonObject.has(typeFieldName)) {
           throw new JsonParseException("cannot serialize " + srcType.getName()
               + " because it already defines a field named " + typeFieldName);
         }
-        JsonObject clone = new JsonObject();
         clone.add(typeFieldName, new JsonPrimitive(label));
+        
         for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {
           clone.add(e.getKey(), e.getValue());
         }
diff --git a/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java b/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java
index 5e8c0ccee..1e889d373 100644
--- a/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java
+++ b/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java
@@ -229,7 +229,7 @@ private static Date parse(String date, ParsePosition pos) throws ParseException
     } catch (IllegalArgumentException e) {
       fail = e;
     }
-    String input = (date == null) ? null : ('"' + date + "'");
+    String input = (date == null) ? null : ("'" + date + "'");
     throw new ParseException("Failed to parse date [" + input + "]: " + fail.getMessage(), pos.getIndex());
   }
 
diff --git a/src/test/java/com/google/gson/typeadapters/PostConstructAdapterFactoryTest.java b/src/test/java/com/google/gson/typeadapters/PostConstructAdapterFactoryTest.java
index 1c934b11e..7bd0a520d 100644
--- a/src/test/java/com/google/gson/typeadapters/PostConstructAdapterFactoryTest.java
+++ b/src/test/java/com/google/gson/typeadapters/PostConstructAdapterFactoryTest.java
@@ -23,6 +23,9 @@
 
 import junit.framework.TestCase;
 
+import java.util.Arrays;
+import java.util.List;
+
 public class PostConstructAdapterFactoryTest extends TestCase {
     public void test() throws Exception {
         Gson gson = new GsonBuilder()
@@ -37,14 +40,73 @@ public void test() throws Exception {
         }
     }
 
+    public void testList() {
+        MultipleSandwiches sandwiches = new MultipleSandwiches(Arrays.asList(
+            new Sandwich("white", "cheddar"),
+            new Sandwich("whole wheat", "swiss")));
+
+        Gson gson = new GsonBuilder().registerTypeAdapterFactory(new PostConstructAdapterFactory()).create();
+
+        // Throws NullPointerException without the fix in https://github.com/google/gson/pull/1103
+        String json = gson.toJson(sandwiches);
+        assertEquals("{\"sandwiches\":[{\"bread\":\"white\",\"cheese\":\"cheddar\"},{\"bread\":\"whole wheat\",\"cheese\":\"swiss\"}]}", json);
+
+        MultipleSandwiches sandwichesFromJson = gson.fromJson(json, MultipleSandwiches.class);
+        assertEquals(sandwiches, sandwichesFromJson);
+    }
+
     static class Sandwich {
-        String bread;
-        String cheese;
+        public String bread;
+        public String cheese;
 
-        @PostConstruct void validate() {
+        public Sandwich(String bread, String cheese) {
+            this.bread = bread;
+            this.cheese = cheese;
+        }
+
+        @PostConstruct private void validate() {
             if (bread.equals("cheesey bread") && cheese != null) {
                 throw new IllegalArgumentException("too cheesey");
             }
         }
+
+        public boolean equals(Object o) {
+            if (o == this) {
+                return true;
+            }
+            if (!(o instanceof Sandwich)) {
+                return false;
+            }
+            final Sandwich other = (Sandwich) o;
+            if (this.bread == null ? other.bread != null : !this.bread.equals(other.bread)) {
+                return false;
+            }
+            if (this.cheese == null ? other.cheese != null : !this.cheese.equals(other.cheese)) {
+                return false;
+            }
+            return true;
+        }
+    }
+
+    static class MultipleSandwiches {
+        public List<Sandwich> sandwiches;
+
+        public MultipleSandwiches(List<Sandwich> sandwiches) {
+            this.sandwiches = sandwiches;
+        }
+
+        public boolean equals(Object o) {
+            if (o == this) {
+                return true;
+            }
+            if (!(o instanceof MultipleSandwiches)) {
+                return false;
+            }
+            final MultipleSandwiches other = (MultipleSandwiches) o;
+            if (this.sandwiches == null ? other.sandwiches != null : !this.sandwiches.equals(other.sandwiches)) {
+                return false;
+            }
+            return true;
+        }
     }
 }
diff --git a/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java b/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java
index 902dc4774..56e54290c 100644
--- a/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java
+++ b/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java
@@ -22,6 +22,7 @@
 import java.util.Locale;
 import java.util.TimeZone;
 
+import com.google.gson.JsonParseException;
 import junit.framework.TestCase;
 
 import com.google.gson.Gson;
@@ -76,4 +77,13 @@ public void testNullDateSerialization() {
     String json = gson.toJson(null, Date.class);
     assertEquals("null", json);
   }
+
+  public void testWellFormedParseException() {
+    try {
+      gson.fromJson("2017-06-20T14:32:30", Date.class);
+      fail("No exception");
+    } catch (JsonParseException exe) {
+      assertEquals(exe.getMessage(), "java.text.ParseException: Failed to parse date ['2017-06-20T14']: 2017-06-20T14");
+    }
+  }
 }
