diff --git a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java b/gson/src/main/java/com/economic/persistgson/DefaultDateTypeAdapter.java
similarity index 91%
rename from gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
rename to gson/src/main/java/com/economic/persistgson/DefaultDateTypeAdapter.java
index bb1a9bdbe..a81ce5c9b 100644
--- a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
+++ b/gson/src/main/java/com/economic/persistgson/DefaultDateTypeAdapter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 import java.lang.reflect.Type;
 import java.sql.Timestamp;
@@ -25,7 +25,12 @@
 import java.util.Date;
 import java.util.Locale;
 
-import com.google.gson.internal.bind.util.ISO8601Utils;
+import com.economic.persistgson.internal.bind.util.ISO8601Utils;
+import com.economic.persistgson.JsonDeserializationContext;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.JsonSyntaxException;
 
 /**
  * This type adapter supports three subclasses of date: Date, Timestamp, and
diff --git a/gson/src/main/java/com/google/gson/ExclusionStrategy.java b/gson/src/main/java/com/economic/persistgson/ExclusionStrategy.java
similarity index 89%
rename from gson/src/main/java/com/google/gson/ExclusionStrategy.java
rename to gson/src/main/java/com/economic/persistgson/ExclusionStrategy.java
index 6a3f43fb5..30b4eac58 100644
--- a/gson/src/main/java/com/google/gson/ExclusionStrategy.java
+++ b/gson/src/main/java/com/economic/persistgson/ExclusionStrategy.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 /**
  * A strategy (or policy) definition that is used to decide whether or not a field or top-level
@@ -75,7 +75,7 @@
  * <p>For certain model classes, you may only want to serialize a field, but exclude it for
  * deserialization. To do that, you can write an {@code ExclusionStrategy} as per normal;
  * however, you would register it with the
- * {@link GsonBuilder#addDeserializationExclusionStrategy(ExclusionStrategy)} method.
+ * {@link com.economic.persistgson.GsonBuilder#addDeserializationExclusionStrategy(ExclusionStrategy)} method.
  * For example:
  * <pre class="code">
  * ExclusionStrategy excludeStrings = new UserDefinedExclusionStrategy(String.class);
@@ -87,9 +87,9 @@
  * @author Inderjeet Singh
  * @author Joel Leitch
  *
- * @see GsonBuilder#setExclusionStrategies(ExclusionStrategy...)
- * @see GsonBuilder#addDeserializationExclusionStrategy(ExclusionStrategy)
- * @see GsonBuilder#addSerializationExclusionStrategy(ExclusionStrategy)
+ * @see com.economic.persistgson.GsonBuilder#setExclusionStrategies(ExclusionStrategy...)
+ * @see com.economic.persistgson.GsonBuilder#addDeserializationExclusionStrategy(ExclusionStrategy)
+ * @see com.economic.persistgson.GsonBuilder#addSerializationExclusionStrategy(ExclusionStrategy)
  *
  * @since 1.4
  */
diff --git a/gson/src/main/java/com/google/gson/FieldAttributes.java b/gson/src/main/java/com/economic/persistgson/FieldAttributes.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/FieldAttributes.java
rename to gson/src/main/java/com/economic/persistgson/FieldAttributes.java
index bcabff14a..a28957f82 100644
--- a/gson/src/main/java/com/google/gson/FieldAttributes.java
+++ b/gson/src/main/java/com/economic/persistgson/FieldAttributes.java
@@ -14,9 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
+
+import com.economic.persistgson.internal.$Gson$Preconditions;
 
-import com.google.gson.internal.$Gson$Preconditions;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
diff --git a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java b/gson/src/main/java/com/economic/persistgson/FieldNamingPolicy.java
similarity index 96%
rename from gson/src/main/java/com/google/gson/FieldNamingPolicy.java
rename to gson/src/main/java/com/economic/persistgson/FieldNamingPolicy.java
index ad7bb6c89..ef6a61de9 100644
--- a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java
+++ b/gson/src/main/java/com/economic/persistgson/FieldNamingPolicy.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 import java.lang.reflect.Field;
 import java.util.Locale;
 
 /**
  * An enumeration that defines a few standard naming conventions for JSON field names.
- * This enumeration should be used in conjunction with {@link com.google.gson.GsonBuilder}
- * to configure a {@link com.google.gson.Gson} instance to properly translate Java field
+ * This enumeration should be used in conjunction with {@link GsonBuilder}
+ * to configure a {@link Gson} instance to properly translate Java field
  * names into the desired JSON field names.
  *
  * @author Inderjeet Singh
diff --git a/gson/src/main/java/com/google/gson/FieldNamingStrategy.java b/gson/src/main/java/com/economic/persistgson/FieldNamingStrategy.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/FieldNamingStrategy.java
rename to gson/src/main/java/com/economic/persistgson/FieldNamingStrategy.java
index 9be453ad1..df46f8688 100644
--- a/gson/src/main/java/com/google/gson/FieldNamingStrategy.java
+++ b/gson/src/main/java/com/economic/persistgson/FieldNamingStrategy.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 import java.lang.reflect.Field;
 
diff --git a/gson/src/main/java/com/google/gson/Gson.java b/gson/src/main/java/com/economic/persistgson/Gson.java
similarity index 73%
rename from gson/src/main/java/com/google/gson/Gson.java
rename to gson/src/main/java/com/economic/persistgson/Gson.java
index 28285738e..fe394800b 100644
--- a/gson/src/main/java/com/google/gson/Gson.java
+++ b/gson/src/main/java/com/economic/persistgson/Gson.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 import java.io.EOFException;
 import java.io.IOException;
@@ -34,27 +34,41 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicLongArray;
 
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.Excluder;
-import com.google.gson.internal.Primitives;
-import com.google.gson.internal.Streams;
-import com.google.gson.internal.bind.ArrayTypeAdapter;
-import com.google.gson.internal.bind.CollectionTypeAdapterFactory;
-import com.google.gson.internal.bind.DateTypeAdapter;
-import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
-import com.google.gson.internal.bind.JsonTreeReader;
-import com.google.gson.internal.bind.JsonTreeWriter;
-import com.google.gson.internal.bind.MapTypeAdapterFactory;
-import com.google.gson.internal.bind.ObjectTypeAdapter;
-import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
-import com.google.gson.internal.bind.SqlDateTypeAdapter;
-import com.google.gson.internal.bind.TimeTypeAdapter;
-import com.google.gson.internal.bind.TypeAdapters;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
-import com.google.gson.stream.MalformedJsonException;
+import com.economic.persistgson.annotations.Expose;
+import com.economic.persistgson.annotations.Since;
+import com.economic.persistgson.internal.Primitives;
+import com.economic.persistgson.internal.bind.ArrayTypeAdapter;
+import com.economic.persistgson.internal.bind.CollectionTypeAdapterFactory;
+import com.economic.persistgson.internal.bind.JsonTreeReader;
+import com.economic.persistgson.internal.bind.JsonTreeWriter;
+import com.economic.persistgson.internal.bind.MapTypeAdapterFactory;
+import com.economic.persistgson.internal.bind.SqlDateTypeAdapter;
+import com.economic.persistgson.internal.bind.TimeTypeAdapter;
+import com.economic.persistgson.internal.bind.TypeAdapters;
+import com.economic.persistgson.persist.PersistReflectiveTypeAdapterFactory;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonWriter;
+import com.economic.persistgson.stream.MalformedJsonException;
+import com.economic.persistgson.FieldNamingPolicy;
+import com.economic.persistgson.FieldNamingStrategy;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.InstanceCreator;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonIOException;
+import com.economic.persistgson.JsonNull;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonSyntaxException;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.internal.ConstructorConstructor;
+import com.economic.persistgson.internal.Excluder;
+import com.economic.persistgson.internal.Streams;
+import com.economic.persistgson.internal.bind.DateTypeAdapter;
+import com.economic.persistgson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
+import com.economic.persistgson.internal.bind.ObjectTypeAdapter;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonToken;
 
 /**
  * This is the main class for using Gson. Gson is typically used by first constructing a
@@ -63,9 +77,9 @@
  * threads.
  *
  * <p>You can create a Gson instance by invoking {@code new Gson()} if the default configuration
- * is all you need. You can also use {@link GsonBuilder} to build a Gson instance with various
+ * is all you need. You can also use {@link com.economic.persistgson.GsonBuilder} to build a Gson instance with various
  * configuration options such as versioning support, pretty printing, custom
- * {@link JsonSerializer}s, {@link JsonDeserializer}s, and {@link InstanceCreator}s.</p>
+ * {@link com.economic.persistgson.JsonSerializer}s, {@link JsonDeserializer}s, and {@link com.economic.persistgson.InstanceCreator}s.</p>
  *
  * <p>Here is an example of how Gson is used for a simple Class:
  *
@@ -94,7 +108,7 @@
  * <p>See the <a href="https://sites.google.com/site/gson/gson-user-guide">Gson User Guide</a>
  * for a more complete set of examples.</p>
  *
- * @see com.google.gson.reflect.TypeToken
+ * @see TypeToken
  *
  * @author Inderjeet Singh
  * @author Joel Leitch
@@ -122,13 +136,13 @@
   private final ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>> calls
       = new ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>>();
 
-  private final Map<TypeToken<?>, TypeAdapter<?>> typeTokenCache = new ConcurrentHashMap<TypeToken<?>, TypeAdapter<?>>();
+  private final Map<TypeToken<?>, com.economic.persistgson.TypeAdapter<?>> typeTokenCache = new ConcurrentHashMap<TypeToken<?>, com.economic.persistgson.TypeAdapter<?>>();
 
-  private final List<TypeAdapterFactory> factories;
+  private final List<com.economic.persistgson.TypeAdapterFactory> factories;
   private final ConstructorConstructor constructorConstructor;
 
   private final Excluder excluder;
-  private final FieldNamingStrategy fieldNamingStrategy;
+  private final com.economic.persistgson.FieldNamingStrategy fieldNamingStrategy;
   private final boolean serializeNulls;
   private final boolean htmlSafe;
   private final boolean generateNonExecutableJson;
@@ -142,29 +156,29 @@
    * <ul>
    *   <li>The JSON generated by <code>toJson</code> methods is in compact representation. This
    *   means that all the unneeded white-space is removed. You can change this behavior with
-   *   {@link GsonBuilder#setPrettyPrinting()}. </li>
+   *   {@link com.economic.persistgson.GsonBuilder#setPrettyPrinting()}. </li>
    *   <li>The generated JSON omits all the fields that are null. Note that nulls in arrays are
    *   kept as is since an array is an ordered list. Moreover, if a field is not null, but its
    *   generated JSON is empty, the field is kept. You can configure Gson to serialize null values
-   *   by setting {@link GsonBuilder#serializeNulls()}.</li>
+   *   by setting {@link com.economic.persistgson.GsonBuilder#serializeNulls()}.</li>
    *   <li>Gson provides default serialization and deserialization for Enums, {@link Map},
    *   {@link java.net.URL}, {@link java.net.URI}, {@link java.util.Locale}, {@link java.util.Date},
    *   {@link java.math.BigDecimal}, and {@link java.math.BigInteger} classes. If you would prefer
    *   to change the default representation, you can do so by registering a type adapter through
-   *   {@link GsonBuilder#registerTypeAdapter(Type, Object)}. </li>
+   *   {@link com.economic.persistgson.GsonBuilder#registerTypeAdapter(Type, Object)}. </li>
    *   <li>The default Date format is same as {@link java.text.DateFormat#DEFAULT}. This format
    *   ignores the millisecond portion of the date during serialization. You can change
-   *   this by invoking {@link GsonBuilder#setDateFormat(int)} or
-   *   {@link GsonBuilder#setDateFormat(String)}. </li>
-   *   <li>By default, Gson ignores the {@link com.google.gson.annotations.Expose} annotation.
+   *   this by invoking {@link com.economic.persistgson.GsonBuilder#setDateFormat(int)} or
+   *   {@link com.economic.persistgson.GsonBuilder#setDateFormat(String)}. </li>
+   *   <li>By default, Gson ignores the {@link Expose} annotation.
    *   You can enable Gson to serialize/deserialize only those fields marked with this annotation
-   *   through {@link GsonBuilder#excludeFieldsWithoutExposeAnnotation()}. </li>
-   *   <li>By default, Gson ignores the {@link com.google.gson.annotations.Since} annotation. You
-   *   can enable Gson to use this annotation through {@link GsonBuilder#setVersion(double)}.</li>
+   *   through {@link com.economic.persistgson.GsonBuilder#excludeFieldsWithoutExposeAnnotation()}. </li>
+   *   <li>By default, Gson ignores the {@link Since} annotation. You
+   *   can enable Gson to use this annotation through {@link com.economic.persistgson.GsonBuilder#setVersion(double)}.</li>
    *   <li>The default field naming policy for the output Json is same as in Java. So, a Java class
    *   field <code>versionNumber</code> will be output as <code>&quot;versionNumber&quot;</code> in
    *   Json. The same rules are applied for mapping incoming Json to the Java classes. You can
-   *   change this policy through {@link GsonBuilder#setFieldNamingPolicy(FieldNamingPolicy)}.</li>
+   *   change this policy through {@link com.economic.persistgson.GsonBuilder#setFieldNamingPolicy(com.economic.persistgson.FieldNamingPolicy)}.</li>
    *   <li>By default, Gson excludes <code>transient</code> or <code>static</code> fields from
    *   consideration for serialization and deserialization. You can change this behavior through
    *   {@link GsonBuilder#excludeFieldsWithModifiers(int...)}.</li>
@@ -172,18 +186,18 @@
    */
   public Gson() {
     this(Excluder.DEFAULT, FieldNamingPolicy.IDENTITY,
-        Collections.<Type, InstanceCreator<?>>emptyMap(), DEFAULT_SERIALIZE_NULLS,
+        Collections.<Type, com.economic.persistgson.InstanceCreator<?>>emptyMap(), DEFAULT_SERIALIZE_NULLS,
         DEFAULT_COMPLEX_MAP_KEYS, DEFAULT_JSON_NON_EXECUTABLE, DEFAULT_ESCAPE_HTML,
         DEFAULT_PRETTY_PRINT, DEFAULT_LENIENT, DEFAULT_SPECIALIZE_FLOAT_VALUES,
-        LongSerializationPolicy.DEFAULT, Collections.<TypeAdapterFactory>emptyList());
+        LongSerializationPolicy.DEFAULT, Collections.<com.economic.persistgson.TypeAdapterFactory>emptyList());
   }
 
-  Gson(final Excluder excluder, final FieldNamingStrategy fieldNamingStrategy,
-      final Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls,
-      boolean complexMapKeySerialization, boolean generateNonExecutableGson, boolean htmlSafe,
-      boolean prettyPrinting, boolean lenient, boolean serializeSpecialFloatingPointValues,
-      LongSerializationPolicy longSerializationPolicy,
-      List<TypeAdapterFactory> typeAdapterFactories) {
+  Gson(final Excluder excluder, final com.economic.persistgson.FieldNamingStrategy fieldNamingStrategy,
+       final Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls,
+       boolean complexMapKeySerialization, boolean generateNonExecutableGson, boolean htmlSafe,
+       boolean prettyPrinting, boolean lenient, boolean serializeSpecialFloatingPointValues,
+       LongSerializationPolicy longSerializationPolicy,
+       List<com.economic.persistgson.TypeAdapterFactory> typeAdapterFactories) {
     this.constructorConstructor = new ConstructorConstructor(instanceCreators);
     this.excluder = excluder;
     this.fieldNamingStrategy = fieldNamingStrategy;
@@ -193,7 +207,7 @@ public Gson() {
     this.prettyPrinting = prettyPrinting;
     this.lenient = lenient;
 
-    List<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>();
+    List<com.economic.persistgson.TypeAdapterFactory> factories = new ArrayList<com.economic.persistgson.TypeAdapterFactory>();
 
     // built-in type adapters that cannot be overridden
     factories.add(TypeAdapters.JSON_ELEMENT_FACTORY);
@@ -211,7 +225,7 @@ public Gson() {
     factories.add(TypeAdapters.BOOLEAN_FACTORY);
     factories.add(TypeAdapters.BYTE_FACTORY);
     factories.add(TypeAdapters.SHORT_FACTORY);
-    TypeAdapter<Number> longAdapter = longAdapter(longSerializationPolicy);
+    com.economic.persistgson.TypeAdapter<Number> longAdapter = longAdapter(longSerializationPolicy);
     factories.add(TypeAdapters.newFactory(long.class, Long.class, longAdapter));
     factories.add(TypeAdapters.newFactory(double.class, Double.class,
             doubleAdapter(serializeSpecialFloatingPointValues)));
@@ -249,7 +263,7 @@ public Gson() {
     this.jsonAdapterFactory = new JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor);
     factories.add(jsonAdapterFactory);
     factories.add(TypeAdapters.ENUM_FACTORY);
-    factories.add(new ReflectiveTypeAdapterFactory(
+    factories.add(new PersistReflectiveTypeAdapterFactory(
         constructorConstructor, fieldNamingStrategy, excluder, jsonAdapterFactory));
 
     this.factories = Collections.unmodifiableList(factories);
@@ -271,11 +285,11 @@ public boolean htmlSafe() {
     return htmlSafe;
   }
 
-  private TypeAdapter<Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {
+  private com.economic.persistgson.TypeAdapter<Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {
     if (serializeSpecialFloatingPointValues) {
       return TypeAdapters.DOUBLE;
     }
-    return new TypeAdapter<Number>() {
+    return new com.economic.persistgson.TypeAdapter<Number>() {
       @Override public Double read(JsonReader in) throws IOException {
         if (in.peek() == JsonToken.NULL) {
           in.nextNull();
@@ -295,11 +309,11 @@ public boolean htmlSafe() {
     };
   }
 
-  private TypeAdapter<Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {
+  private com.economic.persistgson.TypeAdapter<Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {
     if (serializeSpecialFloatingPointValues) {
       return TypeAdapters.FLOAT;
     }
-    return new TypeAdapter<Number>() {
+    return new com.economic.persistgson.TypeAdapter<Number>() {
       @Override public Float read(JsonReader in) throws IOException {
         if (in.peek() == JsonToken.NULL) {
           in.nextNull();
@@ -327,11 +341,11 @@ static void checkValidFloatingPoint(double value) {
     }
   }
 
-  private static TypeAdapter<Number> longAdapter(LongSerializationPolicy longSerializationPolicy) {
+  private static com.economic.persistgson.TypeAdapter<Number> longAdapter(LongSerializationPolicy longSerializationPolicy) {
     if (longSerializationPolicy == LongSerializationPolicy.DEFAULT) {
       return TypeAdapters.LONG;
     }
-    return new TypeAdapter<Number>() {
+    return new com.economic.persistgson.TypeAdapter<Number>() {
       @Override public Number read(JsonReader in) throws IOException {
         if (in.peek() == JsonToken.NULL) {
           in.nextNull();
@@ -349,8 +363,8 @@ static void checkValidFloatingPoint(double value) {
     };
   }
 
-  private static TypeAdapter<AtomicLong> atomicLongAdapter(final TypeAdapter<Number> longAdapter) {
-    return new TypeAdapter<AtomicLong>() {
+  private static com.economic.persistgson.TypeAdapter<AtomicLong> atomicLongAdapter(final com.economic.persistgson.TypeAdapter<Number> longAdapter) {
+    return new com.economic.persistgson.TypeAdapter<AtomicLong>() {
       @Override public void write(JsonWriter out, AtomicLong value) throws IOException {
         longAdapter.write(out, value.get());
       }
@@ -361,8 +375,8 @@ static void checkValidFloatingPoint(double value) {
     }.nullSafe();
   }
 
-  private static TypeAdapter<AtomicLongArray> atomicLongArrayAdapter(final TypeAdapter<Number> longAdapter) {
-    return new TypeAdapter<AtomicLongArray>() {
+  private static com.economic.persistgson.TypeAdapter<AtomicLongArray> atomicLongArrayAdapter(final com.economic.persistgson.TypeAdapter<Number> longAdapter) {
+    return new com.economic.persistgson.TypeAdapter<AtomicLongArray>() {
       @Override public void write(JsonWriter out, AtomicLongArray value) throws IOException {
         out.beginArray();
         for (int i = 0, length = value.length(); i < length; i++) {
@@ -395,10 +409,10 @@ static void checkValidFloatingPoint(double value) {
    *     deserialize {@code type}.
    */
   @SuppressWarnings("unchecked")
-  public <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {
-    TypeAdapter<?> cached = typeTokenCache.get(type == null ? NULL_KEY_SURROGATE : type);
+  public <T> com.economic.persistgson.TypeAdapter<T> getAdapter(TypeToken<T> type) {
+    com.economic.persistgson.TypeAdapter<?> cached = typeTokenCache.get(type == null ? NULL_KEY_SURROGATE : type);
     if (cached != null) {
-      return (TypeAdapter<T>) cached;
+      return (com.economic.persistgson.TypeAdapter<T>) cached;
     }
 
     Map<TypeToken<?>, FutureTypeAdapter<?>> threadCalls = calls.get();
@@ -419,8 +433,8 @@ static void checkValidFloatingPoint(double value) {
       FutureTypeAdapter<T> call = new FutureTypeAdapter<T>();
       threadCalls.put(type, call);
 
-      for (TypeAdapterFactory factory : factories) {
-        TypeAdapter<T> candidate = factory.create(this, type);
+      for (com.economic.persistgson.TypeAdapterFactory factory : factories) {
+        com.economic.persistgson.TypeAdapter<T> candidate = factory.create(this, type);
         if (candidate != null) {
           call.setDelegate(candidate);
           typeTokenCache.put(type, candidate);
@@ -439,7 +453,7 @@ static void checkValidFloatingPoint(double value) {
 
   /**
    * This method is used to get an alternate type adapter for the specified type. This is used
-   * to access a type adapter that is overridden by a {@link TypeAdapterFactory} that you
+   * to access a type adapter that is overridden by a {@link com.economic.persistgson.TypeAdapterFactory} that you
    * may have registered. This features is typically used when you want to register a type
    * adapter that does a little bit of work but then delegates further processing to the Gson
    * default type adapter. Here is an example:
@@ -487,7 +501,7 @@ static void checkValidFloatingPoint(double value) {
    *
    * @since 2.2
    */
-  public <T> TypeAdapter<T> getDelegateAdapter(TypeAdapterFactory skipPast, TypeToken<T> type) {
+  public <T> com.economic.persistgson.TypeAdapter<T> getDelegateAdapter(com.economic.persistgson.TypeAdapterFactory skipPast, TypeToken<T> type) {
     // Hack. If the skipPast factory isn't registered, assume the factory is being requested via
     // our @JsonAdapter annotation.
     if (!factories.contains(skipPast)) {
@@ -503,7 +517,7 @@ static void checkValidFloatingPoint(double value) {
         continue;
       }
 
-      TypeAdapter<T> candidate = factory.create(this, type);
+      com.economic.persistgson.TypeAdapter<T> candidate = factory.create(this, type);
       if (candidate != null) {
         return candidate;
       }
@@ -517,13 +531,13 @@ static void checkValidFloatingPoint(double value) {
    * @throws IllegalArgumentException if this GSON cannot serialize and
    *     deserialize {@code type}.
    */
-  public <T> TypeAdapter<T> getAdapter(Class<T> type) {
+  public <T> com.economic.persistgson.TypeAdapter<T> getAdapter(Class<T> type) {
     return getAdapter(TypeToken.get(type));
   }
 
   /**
    * This method serializes the specified object into its equivalent representation as a tree of
-   * {@link JsonElement}s. This method should be used when the specified object is not a generic
+   * {@link com.economic.persistgson.JsonElement}s. This method should be used when the specified object is not a generic
    * type. This method uses {@link Class#getClass()} to get the type for the specified object, but
    * the {@code getClass()} loses the generic type information because of the Type Erasure feature
    * of Java. Note that this method works fine if the any of the object fields are of generic type,
@@ -534,22 +548,22 @@ static void checkValidFloatingPoint(double value) {
    * @return Json representation of {@code src}.
    * @since 1.4
    */
-  public JsonElement toJsonTree(Object src) {
+  public com.economic.persistgson.JsonElement toJsonTree(Object src) {
     if (src == null) {
-      return JsonNull.INSTANCE;
+      return com.economic.persistgson.JsonNull.INSTANCE;
     }
     return toJsonTree(src, src.getClass());
   }
 
   /**
    * This method serializes the specified object, including those of generic types, into its
-   * equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
+   * equivalent representation as a tree of {@link com.economic.persistgson.JsonElement}s. This method must be used if the
    * specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}
    * instead.
    *
    * @param src the object for which JSON representation is to be created
    * @param typeOfSrc The specific genericized type of src. You can obtain
-   * this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
+   * this type by using the {@link TypeToken} class. For example,
    * to get the type for {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -557,7 +571,7 @@ public JsonElement toJsonTree(Object src) {
    * @return Json representation of {@code src}
    * @since 1.4
    */
-  public JsonElement toJsonTree(Object src, Type typeOfSrc) {
+  public com.economic.persistgson.JsonElement toJsonTree(Object src, Type typeOfSrc) {
     JsonTreeWriter writer = new JsonTreeWriter();
     toJson(src, typeOfSrc, writer);
     return writer.get();
@@ -578,7 +592,7 @@ public JsonElement toJsonTree(Object src, Type typeOfSrc) {
    */
   public String toJson(Object src) {
     if (src == null) {
-      return toJson(JsonNull.INSTANCE);
+      return toJson(com.economic.persistgson.JsonNull.INSTANCE);
     }
     return toJson(src, src.getClass());
   }
@@ -591,7 +605,7 @@ public String toJson(Object src) {
    *
    * @param src the object for which JSON representation is to be created
    * @param typeOfSrc The specific genericized type of src. You can obtain
-   * this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
+   * this type by using the {@link TypeToken} class. For example,
    * to get the type for {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -615,10 +629,10 @@ public String toJson(Object src, Type typeOfSrc) {
    *
    * @param src the object for which Json representation is to be created setting for Gson
    * @param writer Writer to which the Json representation needs to be written
-   * @throws JsonIOException if there was a problem writing to the writer
+   * @throws com.economic.persistgson.JsonIOException if there was a problem writing to the writer
    * @since 1.2
    */
-  public void toJson(Object src, Appendable writer) throws JsonIOException {
+  public void toJson(Object src, Appendable writer) throws com.economic.persistgson.JsonIOException {
     if (src != null) {
       toJson(src, src.getClass(), writer);
     } else {
@@ -633,32 +647,32 @@ public void toJson(Object src, Appendable writer) throws JsonIOException {
    *
    * @param src the object for which JSON representation is to be created
    * @param typeOfSrc The specific genericized type of src. You can obtain
-   * this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
+   * this type by using the {@link TypeToken} class. For example,
    * to get the type for {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
    * </pre>
    * @param writer Writer to which the Json representation of src needs to be written.
-   * @throws JsonIOException if there was a problem writing to the writer
+   * @throws com.economic.persistgson.JsonIOException if there was a problem writing to the writer
    * @since 1.2
    */
-  public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException {
+  public void toJson(Object src, Type typeOfSrc, Appendable writer) throws com.economic.persistgson.JsonIOException {
     try {
       JsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));
       toJson(src, typeOfSrc, jsonWriter);
     } catch (IOException e) {
-      throw new JsonIOException(e);
+      throw new com.economic.persistgson.JsonIOException(e);
     }
   }
 
   /**
    * Writes the JSON representation of {@code src} of type {@code typeOfSrc} to
    * {@code writer}.
-   * @throws JsonIOException if there was a problem writing to the writer
+   * @throws com.economic.persistgson.JsonIOException if there was a problem writing to the writer
    */
   @SuppressWarnings("unchecked")
-  public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {
-    TypeAdapter<?> adapter = getAdapter(TypeToken.get(typeOfSrc));
+  public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws com.economic.persistgson.JsonIOException {
+    com.economic.persistgson.TypeAdapter<?> adapter = getAdapter(TypeToken.get(typeOfSrc));
     boolean oldLenient = writer.isLenient();
     writer.setLenient(true);
     boolean oldHtmlSafe = writer.isHtmlSafe();
@@ -666,9 +680,9 @@ public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOE
     boolean oldSerializeNulls = writer.getSerializeNulls();
     writer.setSerializeNulls(serializeNulls);
     try {
-      ((TypeAdapter<Object>) adapter).write(writer, src);
+      ((com.economic.persistgson.TypeAdapter<Object>) adapter).write(writer, src);
     } catch (IOException e) {
-      throw new JsonIOException(e);
+      throw new com.economic.persistgson.JsonIOException(e);
     } finally {
       writer.setLenient(oldLenient);
       writer.setHtmlSafe(oldHtmlSafe);
@@ -677,32 +691,32 @@ public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOE
   }
 
   /**
-   * Converts a tree of {@link JsonElement}s into its equivalent JSON representation.
+   * Converts a tree of {@link com.economic.persistgson.JsonElement}s into its equivalent JSON representation.
    *
-   * @param jsonElement root of a tree of {@link JsonElement}s
+   * @param jsonElement root of a tree of {@link com.economic.persistgson.JsonElement}s
    * @return JSON String representation of the tree
    * @since 1.4
    */
-  public String toJson(JsonElement jsonElement) {
+  public String toJson(com.economic.persistgson.JsonElement jsonElement) {
     StringWriter writer = new StringWriter();
     toJson(jsonElement, writer);
     return writer.toString();
   }
 
   /**
-   * Writes out the equivalent JSON for a tree of {@link JsonElement}s.
+   * Writes out the equivalent JSON for a tree of {@link com.economic.persistgson.JsonElement}s.
    *
-   * @param jsonElement root of a tree of {@link JsonElement}s
+   * @param jsonElement root of a tree of {@link com.economic.persistgson.JsonElement}s
    * @param writer Writer to which the Json representation needs to be written
-   * @throws JsonIOException if there was a problem writing to the writer
+   * @throws com.economic.persistgson.JsonIOException if there was a problem writing to the writer
    * @since 1.4
    */
-  public void toJson(JsonElement jsonElement, Appendable writer) throws JsonIOException {
+  public void toJson(com.economic.persistgson.JsonElement jsonElement, Appendable writer) throws com.economic.persistgson.JsonIOException {
     try {
       JsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));
       toJson(jsonElement, jsonWriter);
     } catch (IOException e) {
-      throw new JsonIOException(e);
+      throw new com.economic.persistgson.JsonIOException(e);
     }
   }
 
@@ -732,9 +746,9 @@ public JsonReader newJsonReader(Reader reader) {
 
   /**
    * Writes the JSON for {@code jsonElement} to {@code writer}.
-   * @throws JsonIOException if there was a problem writing to the writer
+   * @throws com.economic.persistgson.JsonIOException if there was a problem writing to the writer
    */
-  public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOException {
+  public void toJson(com.economic.persistgson.JsonElement jsonElement, JsonWriter writer) throws com.economic.persistgson.JsonIOException {
     boolean oldLenient = writer.isLenient();
     writer.setLenient(true);
     boolean oldHtmlSafe = writer.isHtmlSafe();
@@ -744,7 +758,7 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce
     try {
       Streams.write(jsonElement, writer);
     } catch (IOException e) {
-      throw new JsonIOException(e);
+      throw new com.economic.persistgson.JsonIOException(e);
     } finally {
       writer.setLenient(oldLenient);
       writer.setHtmlSafe(oldHtmlSafe);
@@ -766,10 +780,10 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce
    * @param json the string from which the object is to be deserialized
    * @param classOfT the class of T
    * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
-   * @throws JsonSyntaxException if json is not a valid representation for an object of type
+   * @throws com.economic.persistgson.JsonSyntaxException if json is not a valid representation for an object of type
    * classOfT
    */
-  public <T> T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException {
+  public <T> T fromJson(String json, Class<T> classOfT) throws com.economic.persistgson.JsonSyntaxException {
     Object object = fromJson(json, (Type) classOfT);
     return Primitives.wrap(classOfT).cast(object);
   }
@@ -783,17 +797,17 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce
    * @param <T> the type of the desired object
    * @param json the string from which the object is to be deserialized
    * @param typeOfT The specific genericized type of src. You can obtain this type by using the
-   * {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
+   * {@link TypeToken} class. For example, to get the type for
    * {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
    * </pre>
    * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.
    * @throws JsonParseException if json is not a valid representation for an object of type typeOfT
-   * @throws JsonSyntaxException if json is not a valid representation for an object of type
+   * @throws com.economic.persistgson.JsonSyntaxException if json is not a valid representation for an object of type
    */
   @SuppressWarnings("unchecked")
-  public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException {
+  public <T> T fromJson(String json, Type typeOfT) throws com.economic.persistgson.JsonSyntaxException {
     if (json == null) {
       return null;
     }
@@ -816,11 +830,11 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce
    * @param json the reader producing the Json from which the object is to be deserialized.
    * @param classOfT the class of T
    * @return an object of type T from the string. Returns {@code null} if {@code json} is at EOF.
-   * @throws JsonIOException if there was a problem reading from the Reader
-   * @throws JsonSyntaxException if json is not a valid representation for an object of type
+   * @throws com.economic.persistgson.JsonIOException if there was a problem reading from the Reader
+   * @throws com.economic.persistgson.JsonSyntaxException if json is not a valid representation for an object of type
    * @since 1.2
    */
-  public <T> T fromJson(Reader json, Class<T> classOfT) throws JsonSyntaxException, JsonIOException {
+  public <T> T fromJson(Reader json, Class<T> classOfT) throws com.economic.persistgson.JsonSyntaxException, com.economic.persistgson.JsonIOException {
     JsonReader jsonReader = newJsonReader(json);
     Object object = fromJson(jsonReader, classOfT);
     assertFullConsumption(object, jsonReader);
@@ -836,18 +850,18 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce
    * @param <T> the type of the desired object
    * @param json the reader producing Json from which the object is to be deserialized
    * @param typeOfT The specific genericized type of src. You can obtain this type by using the
-   * {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
+   * {@link TypeToken} class. For example, to get the type for
    * {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
    * </pre>
    * @return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.
-   * @throws JsonIOException if there was a problem reading from the Reader
-   * @throws JsonSyntaxException if json is not a valid representation for an object of type
+   * @throws com.economic.persistgson.JsonIOException if there was a problem reading from the Reader
+   * @throws com.economic.persistgson.JsonSyntaxException if json is not a valid representation for an object of type
    * @since 1.2
    */
   @SuppressWarnings("unchecked")
-  public <T> T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {
+  public <T> T fromJson(Reader json, Type typeOfT) throws com.economic.persistgson.JsonIOException, com.economic.persistgson.JsonSyntaxException {
     JsonReader jsonReader = newJsonReader(json);
     T object = (T) fromJson(jsonReader, typeOfT);
     assertFullConsumption(object, jsonReader);
@@ -857,12 +871,12 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce
   private static void assertFullConsumption(Object obj, JsonReader reader) {
     try {
       if (obj != null && reader.peek() != JsonToken.END_DOCUMENT) {
-        throw new JsonIOException("JSON document was not fully consumed.");
+        throw new com.economic.persistgson.JsonIOException("JSON document was not fully consumed.");
       }
     } catch (MalformedJsonException e) {
-      throw new JsonSyntaxException(e);
+      throw new com.economic.persistgson.JsonSyntaxException(e);
     } catch (IOException e) {
-      throw new JsonIOException(e);
+      throw new com.economic.persistgson.JsonIOException(e);
     }
   }
 
@@ -871,11 +885,11 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {
    * of type {@code typeOfT}. Returns {@code null}, if the {@code reader} is at EOF.
    * Since Type is not parameterized by T, this method is type unsafe and should be used carefully
    *
-   * @throws JsonIOException if there was a problem writing to the Reader
-   * @throws JsonSyntaxException if json is not a valid representation for an object of type
+   * @throws com.economic.persistgson.JsonIOException if there was a problem writing to the Reader
+   * @throws com.economic.persistgson.JsonSyntaxException if json is not a valid representation for an object of type
    */
   @SuppressWarnings("unchecked")
-  public <T> T fromJson(JsonReader reader, Type typeOfT) throws JsonIOException, JsonSyntaxException {
+  public <T> T fromJson(JsonReader reader, Type typeOfT) throws JsonIOException, com.economic.persistgson.JsonSyntaxException {
     boolean isEmpty = true;
     boolean oldLenient = reader.isLenient();
     reader.setLenient(true);
@@ -883,7 +897,7 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {
       reader.peek();
       isEmpty = false;
       TypeToken<T> typeToken = (TypeToken<T>) TypeToken.get(typeOfT);
-      TypeAdapter<T> typeAdapter = getAdapter(typeToken);
+      com.economic.persistgson.TypeAdapter<T> typeAdapter = getAdapter(typeToken);
       T object = typeAdapter.read(reader);
       return object;
     } catch (EOFException e) {
@@ -894,12 +908,12 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {
       if (isEmpty) {
         return null;
       }
-      throw new JsonSyntaxException(e);
+      throw new com.economic.persistgson.JsonSyntaxException(e);
     } catch (IllegalStateException e) {
-      throw new JsonSyntaxException(e);
+      throw new com.economic.persistgson.JsonSyntaxException(e);
     } catch (IOException e) {
       // TODO(inder): Figure out whether it is indeed right to rethrow this as JsonSyntaxException
-      throw new JsonSyntaxException(e);
+      throw new com.economic.persistgson.JsonSyntaxException(e);
     } finally {
       reader.setLenient(oldLenient);
     }
@@ -912,16 +926,16 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {
    * Therefore, this method should not be used if the desired type is a generic type. Note that
    * this method works fine if the any of the fields of the specified object are generics, just the
    * object itself should not be a generic type. For the cases when the object is of generic type,
-   * invoke {@link #fromJson(JsonElement, Type)}.
+   * invoke {@link #fromJson(com.economic.persistgson.JsonElement, Type)}.
    * @param <T> the type of the desired object
-   * @param json the root of the parse tree of {@link JsonElement}s from which the object is to
+   * @param json the root of the parse tree of {@link com.economic.persistgson.JsonElement}s from which the object is to
    * be deserialized
    * @param classOfT The class of T
    * @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
-   * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
+   * @throws com.economic.persistgson.JsonSyntaxException if json is not a valid representation for an object of type typeOfT
    * @since 1.3
    */
-  public <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException {
+  public <T> T fromJson(com.economic.persistgson.JsonElement json, Class<T> classOfT) throws com.economic.persistgson.JsonSyntaxException {
     Object object = fromJson(json, (Type) classOfT);
     return Primitives.wrap(classOfT).cast(object);
   }
@@ -929,19 +943,19 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {
   /**
    * This method deserializes the Json read from the specified parse tree into an object of the
    * specified type. This method is useful if the specified object is a generic type. For
-   * non-generic objects, use {@link #fromJson(JsonElement, Class)} instead.
+   * non-generic objects, use {@link #fromJson(com.economic.persistgson.JsonElement, Class)} instead.
    *
    * @param <T> the type of the desired object
-   * @param json the root of the parse tree of {@link JsonElement}s from which the object is to
+   * @param json the root of the parse tree of {@link com.economic.persistgson.JsonElement}s from which the object is to
    * be deserialized
    * @param typeOfT The specific genericized type of src. You can obtain this type by using the
-   * {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
+   * {@link TypeToken} class. For example, to get the type for
    * {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
    * </pre>
    * @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.
-   * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT
+   * @throws com.economic.persistgson.JsonSyntaxException if json is not a valid representation for an object of type typeOfT
    * @since 1.3
    */
   @SuppressWarnings("unchecked")
@@ -952,8 +966,8 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {
     return (T) fromJson(new JsonTreeReader(json), typeOfT);
   }
 
-  static class FutureTypeAdapter<T> extends TypeAdapter<T> {
-    private TypeAdapter<T> delegate;
+  static class FutureTypeAdapter<T> extends com.economic.persistgson.TypeAdapter<T> {
+    private com.economic.persistgson.TypeAdapter<T> delegate;
 
     public void setDelegate(TypeAdapter<T> typeAdapter) {
       if (delegate != null) {
diff --git a/gson/src/main/java/com/google/gson/GsonBuilder.java b/gson/src/main/java/com/economic/persistgson/GsonBuilder.java
similarity index 86%
rename from gson/src/main/java/com/google/gson/GsonBuilder.java
rename to gson/src/main/java/com/economic/persistgson/GsonBuilder.java
index cebed7e76..41add4a17 100644
--- a/gson/src/main/java/com/google/gson/GsonBuilder.java
+++ b/gson/src/main/java/com/economic/persistgson/GsonBuilder.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 import java.lang.reflect.Type;
 import java.sql.Timestamp;
@@ -26,20 +26,16 @@
 import java.util.List;
 import java.util.Map;
 
-import com.google.gson.internal.$Gson$Preconditions;
-import com.google.gson.internal.Excluder;
-import com.google.gson.internal.bind.TreeTypeAdapter;
-import com.google.gson.internal.bind.TypeAdapters;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-
-import static com.google.gson.Gson.DEFAULT_COMPLEX_MAP_KEYS;
-import static com.google.gson.Gson.DEFAULT_ESCAPE_HTML;
-import static com.google.gson.Gson.DEFAULT_JSON_NON_EXECUTABLE;
-import static com.google.gson.Gson.DEFAULT_LENIENT;
-import static com.google.gson.Gson.DEFAULT_PRETTY_PRINT;
-import static com.google.gson.Gson.DEFAULT_SERIALIZE_NULLS;
-import static com.google.gson.Gson.DEFAULT_SPECIALIZE_FLOAT_VALUES;
+import com.economic.persistgson.annotations.Expose;
+import com.economic.persistgson.internal.$Gson$Preconditions;
+import com.economic.persistgson.internal.bind.TypeAdapters;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.internal.Excluder;
+import com.economic.persistgson.internal.bind.TreeTypeAdapter;
 
 /**
  * <p>Use this builder to construct a {@link Gson} instance when you need to set configuration
@@ -79,21 +75,21 @@
   private Excluder excluder = Excluder.DEFAULT;
   private LongSerializationPolicy longSerializationPolicy = LongSerializationPolicy.DEFAULT;
   private FieldNamingStrategy fieldNamingPolicy = FieldNamingPolicy.IDENTITY;
-  private final Map<Type, InstanceCreator<?>> instanceCreators
-      = new HashMap<Type, InstanceCreator<?>>();
-  private final List<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>();
+  private final Map<Type, com.economic.persistgson.InstanceCreator<?>> instanceCreators
+      = new HashMap<Type, com.economic.persistgson.InstanceCreator<?>>();
+  private final List<com.economic.persistgson.TypeAdapterFactory> factories = new ArrayList<com.economic.persistgson.TypeAdapterFactory>();
   /** tree-style hierarchy factories. These come after factories for backwards compatibility. */
-  private final List<TypeAdapterFactory> hierarchyFactories = new ArrayList<TypeAdapterFactory>();
-  private boolean serializeNulls = DEFAULT_SERIALIZE_NULLS;
+  private final List<com.economic.persistgson.TypeAdapterFactory> hierarchyFactories = new ArrayList<com.economic.persistgson.TypeAdapterFactory>();
+  private boolean serializeNulls = Gson.DEFAULT_SERIALIZE_NULLS;
   private String datePattern;
   private int dateStyle = DateFormat.DEFAULT;
   private int timeStyle = DateFormat.DEFAULT;
-  private boolean complexMapKeySerialization = DEFAULT_COMPLEX_MAP_KEYS;
-  private boolean serializeSpecialFloatingPointValues = DEFAULT_SPECIALIZE_FLOAT_VALUES;
-  private boolean escapeHtmlChars = DEFAULT_ESCAPE_HTML;
-  private boolean prettyPrinting = DEFAULT_PRETTY_PRINT;
-  private boolean generateNonExecutableJson = DEFAULT_JSON_NON_EXECUTABLE;
-  private boolean lenient = DEFAULT_LENIENT;
+  private boolean complexMapKeySerialization = Gson.DEFAULT_COMPLEX_MAP_KEYS;
+  private boolean serializeSpecialFloatingPointValues = Gson.DEFAULT_SPECIALIZE_FLOAT_VALUES;
+  private boolean escapeHtmlChars = Gson.DEFAULT_ESCAPE_HTML;
+  private boolean prettyPrinting = Gson.DEFAULT_PRETTY_PRINT;
+  private boolean generateNonExecutableJson = Gson.DEFAULT_JSON_NON_EXECUTABLE;
+  private boolean lenient = Gson.DEFAULT_LENIENT;
 
   /**
    * Creates a GsonBuilder instance that can be used to build Gson with various configuration
@@ -148,7 +144,7 @@ public GsonBuilder generateNonExecutableJson() {
 
   /**
    * Configures Gson to exclude all fields from consideration for serialization or deserialization
-   * that do not have the {@link com.google.gson.annotations.Expose} annotation.
+   * that do not have the {@link Expose} annotation.
    *
    * @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern
    */
@@ -453,8 +449,8 @@ public GsonBuilder setDateFormat(int dateStyle, int timeStyle) {
 
   /**
    * Configures Gson for custom serialization or deserialization. This method combines the
-   * registration of an {@link TypeAdapter}, {@link InstanceCreator}, {@link JsonSerializer}, and a
-   * {@link JsonDeserializer}. It is best used when a single object {@code typeAdapter} implements
+   * registration of an {@link TypeAdapter}, {@link com.economic.persistgson.InstanceCreator}, {@link com.economic.persistgson.JsonSerializer}, and a
+   * {@link com.economic.persistgson.JsonDeserializer}. It is best used when a single object {@code typeAdapter} implements
    * all the required interfaces for custom serialization with Gson. If a type adapter was
    * previously registered for the specified {@code type}, it is overwritten.
    *
@@ -464,19 +460,19 @@ public GsonBuilder setDateFormat(int dateStyle, int timeStyle) {
    *
    * @param type the type definition for the type adapter being registered
    * @param typeAdapter This object must implement at least one of the {@link TypeAdapter},
-   * {@link InstanceCreator}, {@link JsonSerializer}, and a {@link JsonDeserializer} interfaces.
+   * {@link com.economic.persistgson.InstanceCreator}, {@link com.economic.persistgson.JsonSerializer}, and a {@link com.economic.persistgson.JsonDeserializer} interfaces.
    * @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern
    */
   @SuppressWarnings({"unchecked", "rawtypes"})
   public GsonBuilder registerTypeAdapter(Type type, Object typeAdapter) {
-    $Gson$Preconditions.checkArgument(typeAdapter instanceof JsonSerializer<?>
-        || typeAdapter instanceof JsonDeserializer<?>
-        || typeAdapter instanceof InstanceCreator<?>
+    $Gson$Preconditions.checkArgument(typeAdapter instanceof com.economic.persistgson.JsonSerializer<?>
+        || typeAdapter instanceof com.economic.persistgson.JsonDeserializer<?>
+        || typeAdapter instanceof com.economic.persistgson.InstanceCreator<?>
         || typeAdapter instanceof TypeAdapter<?>);
-    if (typeAdapter instanceof InstanceCreator<?>) {
-      instanceCreators.put(type, (InstanceCreator) typeAdapter);
+    if (typeAdapter instanceof com.economic.persistgson.InstanceCreator<?>) {
+      instanceCreators.put(type, (com.economic.persistgson.InstanceCreator) typeAdapter);
     }
-    if (typeAdapter instanceof JsonSerializer<?> || typeAdapter instanceof JsonDeserializer<?>) {
+    if (typeAdapter instanceof com.economic.persistgson.JsonSerializer<?> || typeAdapter instanceof com.economic.persistgson.JsonDeserializer<?>) {
       TypeToken<?> typeToken = TypeToken.get(type);
       factories.add(TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));
     }
@@ -494,29 +490,29 @@ public GsonBuilder registerTypeAdapter(Type type, Object typeAdapter) {
    *
    * @since 2.1
    */
-  public GsonBuilder registerTypeAdapterFactory(TypeAdapterFactory factory) {
+  public GsonBuilder registerTypeAdapterFactory(com.economic.persistgson.TypeAdapterFactory factory) {
     factories.add(factory);
     return this;
   }
 
   /**
    * Configures Gson for custom serialization or deserialization for an inheritance type hierarchy.
-   * This method combines the registration of a {@link TypeAdapter}, {@link JsonSerializer} and
-   * a {@link JsonDeserializer}. If a type adapter was previously registered for the specified
+   * This method combines the registration of a {@link TypeAdapter}, {@link com.economic.persistgson.JsonSerializer} and
+   * a {@link com.economic.persistgson.JsonDeserializer}. If a type adapter was previously registered for the specified
    * type hierarchy, it is overridden. If a type adapter is registered for a specific type in
    * the type hierarchy, it will be invoked instead of the one registered for the type hierarchy.
    *
    * @param baseType the class definition for the type adapter being registered for the base class
    *        or interface
    * @param typeAdapter This object must implement at least one of {@link TypeAdapter},
-   *        {@link JsonSerializer} or {@link JsonDeserializer} interfaces.
+   *        {@link com.economic.persistgson.JsonSerializer} or {@link com.economic.persistgson.JsonDeserializer} interfaces.
    * @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern
    * @since 1.7
    */
   @SuppressWarnings({"unchecked", "rawtypes"})
   public GsonBuilder registerTypeHierarchyAdapter(Class<?> baseType, Object typeAdapter) {
-    $Gson$Preconditions.checkArgument(typeAdapter instanceof JsonSerializer<?>
-        || typeAdapter instanceof JsonDeserializer<?>
+    $Gson$Preconditions.checkArgument(typeAdapter instanceof com.economic.persistgson.JsonSerializer<?>
+        || typeAdapter instanceof com.economic.persistgson.JsonDeserializer<?>
         || typeAdapter instanceof TypeAdapter<?>);
     if (typeAdapter instanceof JsonDeserializer || typeAdapter instanceof JsonSerializer) {
       hierarchyFactories.add(TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));
@@ -559,7 +555,7 @@ public GsonBuilder serializeSpecialFloatingPointValues() {
    * @return an instance of Gson configured with the options currently set in this builder
    */
   public Gson create() {
-    List<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>(this.factories.size() + this.hierarchyFactories.size() + 3);
+    List<com.economic.persistgson.TypeAdapterFactory> factories = new ArrayList<com.economic.persistgson.TypeAdapterFactory>(this.factories.size() + this.hierarchyFactories.size() + 3);
     factories.addAll(this.factories);
     Collections.reverse(factories);
     Collections.reverse(this.hierarchyFactories);
diff --git a/gson/src/main/java/com/google/gson/InstanceCreator.java b/gson/src/main/java/com/economic/persistgson/InstanceCreator.java
similarity index 99%
rename from gson/src/main/java/com/google/gson/InstanceCreator.java
rename to gson/src/main/java/com/economic/persistgson/InstanceCreator.java
index d5096a07a..93342a738 100644
--- a/gson/src/main/java/com/google/gson/InstanceCreator.java
+++ b/gson/src/main/java/com/economic/persistgson/InstanceCreator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 import java.lang.reflect.Type;
 
diff --git a/gson/src/main/java/com/google/gson/JsonArray.java b/gson/src/main/java/com/economic/persistgson/JsonArray.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/JsonArray.java
rename to gson/src/main/java/com/economic/persistgson/JsonArray.java
index 96fe23edb..49654c33a 100644
--- a/gson/src/main/java/com/google/gson/JsonArray.java
+++ b/gson/src/main/java/com/economic/persistgson/JsonArray.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
@@ -89,7 +89,7 @@ public void add(Number number) {
    * @param string the string that needs to be added to the array.
    */
   public void add(String string) {
-    elements.add(string == null ? JsonNull.INSTANCE : new JsonPrimitive(string));
+    elements.add(string == null ? com.economic.persistgson.JsonNull.INSTANCE : new JsonPrimitive(string));
   }
 
   /**
@@ -99,7 +99,7 @@ public void add(String string) {
    */
   public void add(JsonElement element) {
     if (element == null) {
-      element = JsonNull.INSTANCE;
+      element = com.economic.persistgson.JsonNull.INSTANCE;
     }
     elements.add(element);
   }
diff --git a/gson/src/main/java/com/google/gson/JsonDeserializationContext.java b/gson/src/main/java/com/economic/persistgson/JsonDeserializationContext.java
similarity index 84%
rename from gson/src/main/java/com/google/gson/JsonDeserializationContext.java
rename to gson/src/main/java/com/economic/persistgson/JsonDeserializationContext.java
index 00c750543..95bdba279 100644
--- a/gson/src/main/java/com/google/gson/JsonDeserializationContext.java
+++ b/gson/src/main/java/com/economic/persistgson/JsonDeserializationContext.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 import java.lang.reflect.Type;
 
 /**
  * Context for deserialization that is passed to a custom deserializer during invocation of its
- * {@link JsonDeserializer#deserialize(JsonElement, Type, JsonDeserializationContext)}
+ * {@link com.economic.persistgson.JsonDeserializer#deserialize(JsonElement, Type, JsonDeserializationContext)}
  * method.
  *
  * @author Inderjeet Singh
@@ -31,7 +31,7 @@
   /**
    * Invokes default deserialization on the specified object. It should never be invoked on
    * the element received as a parameter of the
-   * {@link JsonDeserializer#deserialize(JsonElement, Type, JsonDeserializationContext)} method. Doing
+   * {@link com.economic.persistgson.JsonDeserializer#deserialize(JsonElement, Type, JsonDeserializationContext)} method. Doing
    * so will result in an infinite loop since Gson will in-turn call the custom deserializer again.
    *
    * @param json the parse tree.
diff --git a/gson/src/main/java/com/google/gson/JsonDeserializer.java b/gson/src/main/java/com/economic/persistgson/JsonDeserializer.java
similarity index 99%
rename from gson/src/main/java/com/google/gson/JsonDeserializer.java
rename to gson/src/main/java/com/economic/persistgson/JsonDeserializer.java
index 0589eb284..e8e3dab41 100644
--- a/gson/src/main/java/com/google/gson/JsonDeserializer.java
+++ b/gson/src/main/java/com/economic/persistgson/JsonDeserializer.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 import java.lang.reflect.Type;
 
diff --git a/gson/src/main/java/com/google/gson/JsonElement.java b/gson/src/main/java/com/economic/persistgson/JsonElement.java
similarity index 84%
rename from gson/src/main/java/com/google/gson/JsonElement.java
rename to gson/src/main/java/com/economic/persistgson/JsonElement.java
index 8f393aea8..aea5b8684 100644
--- a/gson/src/main/java/com/google/gson/JsonElement.java
+++ b/gson/src/main/java/com/economic/persistgson/JsonElement.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
+
+import com.economic.persistgson.stream.JsonWriter;
+import com.economic.persistgson.JsonArray;
+import com.economic.persistgson.internal.Streams;
 
-import com.google.gson.internal.Streams;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.io.StringWriter;
 import java.math.BigDecimal;
@@ -25,7 +27,7 @@
 
 /**
  * A class representing an element of Json. It could either be a {@link JsonObject}, a
- * {@link JsonArray}, a {@link JsonPrimitive} or a {@link JsonNull}.
+ * {@link com.economic.persistgson.JsonArray}, a {@link JsonPrimitive} or a {@link com.economic.persistgson.JsonNull}.
  *
  * @author Inderjeet Singh
  * @author Joel Leitch
@@ -40,10 +42,10 @@
   /**
    * provides check for verifying if this element is an array or not.
    *
-   * @return true if this element is of type {@link JsonArray}, false otherwise.
+   * @return true if this element is of type {@link com.economic.persistgson.JsonArray}, false otherwise.
    */
   public boolean isJsonArray() {
-    return this instanceof JsonArray;
+    return this instanceof com.economic.persistgson.JsonArray;
   }
 
   /**
@@ -67,11 +69,11 @@ public boolean isJsonPrimitive() {
   /**
    * provides check for verifying if this element represents a null value or not.
    *
-   * @return true if this element is of type {@link JsonNull}, false otherwise.
+   * @return true if this element is of type {@link com.economic.persistgson.JsonNull}, false otherwise.
    * @since 1.2
    */
   public boolean isJsonNull() {
-    return this instanceof JsonNull;
+    return this instanceof com.economic.persistgson.JsonNull;
   }
 
   /**
@@ -91,17 +93,17 @@ public JsonObject getAsJsonObject() {
   }
 
   /**
-   * convenience method to get this element as a {@link JsonArray}. If the element is of some
+   * convenience method to get this element as a {@link com.economic.persistgson.JsonArray}. If the element is of some
    * other type, a {@link IllegalStateException} will result. Hence it is best to use this method
    * after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
    * first.
    *
-   * @return get this element as a {@link JsonArray}.
+   * @return get this element as a {@link com.economic.persistgson.JsonArray}.
    * @throws IllegalStateException if the element is of another type.
    */
-  public JsonArray getAsJsonArray() {
+  public com.economic.persistgson.JsonArray getAsJsonArray() {
     if (isJsonArray()) {
-      return (JsonArray) this;
+      return (com.economic.persistgson.JsonArray) this;
     }
     throw new IllegalStateException("Not a JSON Array: " + this);
   }
@@ -123,18 +125,18 @@ public JsonPrimitive getAsJsonPrimitive() {
   }
 
   /**
-   * convenience method to get this element as a {@link JsonNull}. If the element is of some
+   * convenience method to get this element as a {@link com.economic.persistgson.JsonNull}. If the element is of some
    * other type, a {@link IllegalStateException} will result. Hence it is best to use this method
    * after ensuring that this element is of the desired type by calling {@link #isJsonNull()}
    * first.
    *
-   * @return get this element as a {@link JsonNull}.
+   * @return get this element as a {@link com.economic.persistgson.JsonNull}.
    * @throws IllegalStateException if the element is of another type.
    * @since 1.2
    */
-  public JsonNull getAsJsonNull() {
+  public com.economic.persistgson.JsonNull getAsJsonNull() {
     if (isJsonNull()) {
-      return (JsonNull) this;
+      return (com.economic.persistgson.JsonNull) this;
     }
     throw new IllegalStateException("Not a JSON Null: " + this);
   }
@@ -145,7 +147,7 @@ public JsonNull getAsJsonNull() {
    * @return get this element as a primitive boolean value.
    * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
    * boolean value.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+   * @throws IllegalStateException if the element is of the type {@link com.economic.persistgson.JsonArray} but contains
    * more than a single element.
    */
   public boolean getAsBoolean() {
@@ -158,7 +160,7 @@ public boolean getAsBoolean() {
    * @return get this element as a {@link Boolean} value.
    * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
    * boolean value.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+   * @throws IllegalStateException if the element is of the type {@link com.economic.persistgson.JsonArray} but contains
    * more than a single element.
    */
   Boolean getAsBooleanWrapper() {
@@ -171,7 +173,7 @@ Boolean getAsBooleanWrapper() {
    * @return get this element as a {@link Number}.
    * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
    * number.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+   * @throws IllegalStateException if the element is of the type {@link com.economic.persistgson.JsonArray} but contains
    * more than a single element.
    */
   public Number getAsNumber() {
@@ -184,7 +186,7 @@ public Number getAsNumber() {
    * @return get this element as a string value.
    * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
    * string value.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+   * @throws IllegalStateException if the element is of the type {@link com.economic.persistgson.JsonArray} but contains
    * more than a single element.
    */
   public String getAsString() {
@@ -197,7 +199,7 @@ public String getAsString() {
    * @return get this element as a primitive double value.
    * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
    * double value.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+   * @throws IllegalStateException if the element is of the type {@link com.economic.persistgson.JsonArray} but contains
    * more than a single element.
    */
   public double getAsDouble() {
@@ -210,7 +212,7 @@ public double getAsDouble() {
    * @return get this element as a primitive float value.
    * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
    * float value.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+   * @throws IllegalStateException if the element is of the type {@link com.economic.persistgson.JsonArray} but contains
    * more than a single element.
    */
   public float getAsFloat() {
@@ -223,7 +225,7 @@ public float getAsFloat() {
    * @return get this element as a primitive long value.
    * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
    * long value.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+   * @throws IllegalStateException if the element is of the type {@link com.economic.persistgson.JsonArray} but contains
    * more than a single element.
    */
   public long getAsLong() {
@@ -236,7 +238,7 @@ public long getAsLong() {
    * @return get this element as a primitive integer value.
    * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
    * integer value.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+   * @throws IllegalStateException if the element is of the type {@link com.economic.persistgson.JsonArray} but contains
    * more than a single element.
    */
   public int getAsInt() {
@@ -249,7 +251,7 @@ public int getAsInt() {
    * @return get this element as a primitive byte value.
    * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
    * byte value.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+   * @throws IllegalStateException if the element is of the type {@link com.economic.persistgson.JsonArray} but contains
    * more than a single element.
    * @since 1.3
    */
@@ -263,7 +265,7 @@ public byte getAsByte() {
    * @return get this element as a primitive char value.
    * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
    * char value.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+   * @throws IllegalStateException if the element is of the type {@link com.economic.persistgson.JsonArray} but contains
    * more than a single element.
    * @since 1.3
    */
@@ -277,7 +279,7 @@ public char getAsCharacter() {
    * @return get this element as a {@link BigDecimal}.
    * @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
    * * @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+   * @throws IllegalStateException if the element is of the type {@link com.economic.persistgson.JsonArray} but contains
    * more than a single element.
    * @since 1.2
    */
@@ -291,7 +293,7 @@ public BigDecimal getAsBigDecimal() {
    * @return get this element as a {@link BigInteger}.
    * @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
    * @throws NumberFormatException if the element is not a valid {@link BigInteger}.
-   * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
+   * @throws IllegalStateException if the element is of the type {@link com.economic.persistgson.JsonArray} but contains
    * more than a single element.
    * @since 1.2
    */
diff --git a/gson/src/main/java/com/google/gson/JsonIOException.java b/gson/src/main/java/com/economic/persistgson/JsonIOException.java
similarity index 91%
rename from gson/src/main/java/com/google/gson/JsonIOException.java
rename to gson/src/main/java/com/economic/persistgson/JsonIOException.java
index dfeccd8ed..e39f586cc 100644
--- a/gson/src/main/java/com/google/gson/JsonIOException.java
+++ b/gson/src/main/java/com/economic/persistgson/JsonIOException.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson;
+package com.economic.persistgson;
 
 /**
  * This exception is raised when Gson was unable to read an input stream
@@ -22,7 +22,7 @@
  * @author Inderjeet Singh
  * @author Joel Leitch
  */
-public final class JsonIOException extends JsonParseException {
+public final class JsonIOException extends com.economic.persistgson.JsonParseException {
   private static final long serialVersionUID = 1L;
 
   public JsonIOException(String msg) {
diff --git a/gson/src/main/java/com/google/gson/JsonNull.java b/gson/src/main/java/com/economic/persistgson/JsonNull.java
similarity index 93%
rename from gson/src/main/java/com/google/gson/JsonNull.java
rename to gson/src/main/java/com/economic/persistgson/JsonNull.java
index 56883369e..73b154108 100755
--- a/gson/src/main/java/com/google/gson/JsonNull.java
+++ b/gson/src/main/java/com/economic/persistgson/JsonNull.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 /**
  * A class representing a Json {@code null} value.
diff --git a/gson/src/main/java/com/google/gson/JsonObject.java b/gson/src/main/java/com/economic/persistgson/JsonObject.java
similarity index 75%
rename from gson/src/main/java/com/google/gson/JsonObject.java
rename to gson/src/main/java/com/economic/persistgson/JsonObject.java
index 97e7dcf47..a64010695 100644
--- a/gson/src/main/java/com/google/gson/JsonObject.java
+++ b/gson/src/main/java/com/economic/persistgson/JsonObject.java
@@ -14,29 +14,32 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
-import com.google.gson.internal.LinkedTreeMap;
+import com.economic.persistgson.JsonArray;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.internal.LinkedTreeMap;
 
 import java.util.Map;
 import java.util.Set;
 
 /**
  * A class representing an object type in Json. An object consists of name-value pairs where names
- * are strings, and values are any other type of {@link JsonElement}. This allows for a creating a
+ * are strings, and values are any other type of {@link com.economic.persistgson.JsonElement}. This allows for a creating a
  * tree of JsonElements. The member elements of this object are maintained in order they were added.
  *
  * @author Inderjeet Singh
  * @author Joel Leitch
  */
-public final class JsonObject extends JsonElement {
-  private final LinkedTreeMap<String, JsonElement> members =
-      new LinkedTreeMap<String, JsonElement>();
+public final class JsonObject extends com.economic.persistgson.JsonElement {
+  private final LinkedTreeMap<String, com.economic.persistgson.JsonElement> members =
+      new LinkedTreeMap<String, com.economic.persistgson.JsonElement>();
 
   @Override
   JsonObject deepCopy() {
     JsonObject result = new JsonObject();
-    for (Map.Entry<String, JsonElement> entry : members.entrySet()) {
+    for (Map.Entry<String, com.economic.persistgson.JsonElement> entry : members.entrySet()) {
       result.add(entry.getKey(), entry.getValue().deepCopy());
     }
     return result;
@@ -50,9 +53,9 @@ JsonObject deepCopy() {
    * @param property name of the member.
    * @param value the member object.
    */
-  public void add(String property, JsonElement value) {
+  public void add(String property, com.economic.persistgson.JsonElement value) {
     if (value == null) {
-      value = JsonNull.INSTANCE;
+      value = com.economic.persistgson.JsonNull.INSTANCE;
     }
     members.put(property, value);
   }
@@ -61,10 +64,10 @@ public void add(String property, JsonElement value) {
    * Removes the {@code property} from this {@link JsonObject}.
    *
    * @param property name of the member that should be removed.
-   * @return the {@link JsonElement} object that is being removed.
+   * @return the {@link com.economic.persistgson.JsonElement} object that is being removed.
    * @since 1.3
    */
-  public JsonElement remove(String property) {
+  public com.economic.persistgson.JsonElement remove(String property) {
     return members.remove(property);
   }
 
@@ -113,13 +116,13 @@ public void addProperty(String property, Character value) {
   }
 
   /**
-   * Creates the proper {@link JsonElement} object from the given {@code value} object.
+   * Creates the proper {@link com.economic.persistgson.JsonElement} object from the given {@code value} object.
    *
-   * @param value the object to generate the {@link JsonElement} for
-   * @return a {@link JsonPrimitive} if the {@code value} is not null, otherwise a {@link JsonNull}
+   * @param value the object to generate the {@link com.economic.persistgson.JsonElement} for
+   * @return a {@link com.economic.persistgson.JsonPrimitive} if the {@code value} is not null, otherwise a {@link com.economic.persistgson.JsonNull}
    */
-  private JsonElement createJsonElement(Object value) {
-    return value == null ? JsonNull.INSTANCE : new JsonPrimitive(value);
+  private com.economic.persistgson.JsonElement createJsonElement(Object value) {
+    return value == null ? com.economic.persistgson.JsonNull.INSTANCE : new com.economic.persistgson.JsonPrimitive(value);
   }
 
   /**
@@ -128,7 +131,7 @@ private JsonElement createJsonElement(Object value) {
    *
    * @return a set of members of this object.
    */
-  public Set<Map.Entry<String, JsonElement>> entrySet() {
+  public Set<Map.Entry<String, com.economic.persistgson.JsonElement>> entrySet() {
     return members.entrySet();
   }
 
@@ -177,7 +180,7 @@ public JsonElement get(String memberName) {
    * @param memberName name of the member being requested.
    * @return the JsonPrimitive corresponding to the specified member.
    */
-  public JsonPrimitive getAsJsonPrimitive(String memberName) {
+  public com.economic.persistgson.JsonPrimitive getAsJsonPrimitive(String memberName) {
     return (JsonPrimitive) members.get(memberName);
   }
 
@@ -187,7 +190,7 @@ public JsonPrimitive getAsJsonPrimitive(String memberName) {
    * @param memberName name of the member being requested.
    * @return the JsonArray corresponding to the specified member.
    */
-  public JsonArray getAsJsonArray(String memberName) {
+  public com.economic.persistgson.JsonArray getAsJsonArray(String memberName) {
     return (JsonArray) members.get(memberName);
   }
 
diff --git a/gson/src/main/java/com/google/gson/JsonParseException.java b/gson/src/main/java/com/economic/persistgson/JsonParseException.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/JsonParseException.java
rename to gson/src/main/java/com/economic/persistgson/JsonParseException.java
index 084f66127..68208f794 100644
--- a/gson/src/main/java/com/google/gson/JsonParseException.java
+++ b/gson/src/main/java/com/economic/persistgson/JsonParseException.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 /**
  * This exception is raised if there is a serious issue that occurs during parsing of a Json
diff --git a/gson/src/main/java/com/google/gson/JsonParser.java b/gson/src/main/java/com/economic/persistgson/JsonParser.java
similarity index 64%
rename from gson/src/main/java/com/google/gson/JsonParser.java
rename to gson/src/main/java/com/economic/persistgson/JsonParser.java
index a8ae337ba..d5e42afe9 100755
--- a/gson/src/main/java/com/google/gson/JsonParser.java
+++ b/gson/src/main/java/com/economic/persistgson/JsonParser.java
@@ -13,16 +13,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson;
+package com.economic.persistgson;
 
 import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
 
-import com.google.gson.internal.Streams;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.MalformedJsonException;
+import com.economic.persistgson.internal.Streams;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonToken;
+import com.economic.persistgson.stream.MalformedJsonException;
+import com.economic.persistgson.JsonParseException;
 
 /**
  * A parser to parse Json into a parse tree of {@link JsonElement}s
@@ -38,10 +39,10 @@
    *
    * @param json JSON text
    * @return a parse tree of {@link JsonElement}s corresponding to the specified JSON
-   * @throws JsonParseException if the specified text is not valid JSON
+   * @throws com.economic.persistgson.JsonParseException if the specified text is not valid JSON
    * @since 1.3
    */
-  public JsonElement parse(String json) throws JsonSyntaxException {
+  public JsonElement parse(String json) throws com.economic.persistgson.JsonSyntaxException {
     return parse(new StringReader(json));
   }
 
@@ -50,40 +51,40 @@ public JsonElement parse(String json) throws JsonSyntaxException {
    *
    * @param json JSON text
    * @return a parse tree of {@link JsonElement}s corresponding to the specified JSON
-   * @throws JsonParseException if the specified text is not valid JSON
+   * @throws com.economic.persistgson.JsonParseException if the specified text is not valid JSON
    * @since 1.3
    */
-  public JsonElement parse(Reader json) throws JsonIOException, JsonSyntaxException {
+  public JsonElement parse(Reader json) throws JsonIOException, com.economic.persistgson.JsonSyntaxException {
     try {
       JsonReader jsonReader = new JsonReader(json);
       JsonElement element = parse(jsonReader);
       if (!element.isJsonNull() && jsonReader.peek() != JsonToken.END_DOCUMENT) {
-        throw new JsonSyntaxException("Did not consume the entire document.");
+        throw new com.economic.persistgson.JsonSyntaxException("Did not consume the entire document.");
       }
       return element;
     } catch (MalformedJsonException e) {
-      throw new JsonSyntaxException(e);
+      throw new com.economic.persistgson.JsonSyntaxException(e);
     } catch (IOException e) {
       throw new JsonIOException(e);
     } catch (NumberFormatException e) {
-      throw new JsonSyntaxException(e);
+      throw new com.economic.persistgson.JsonSyntaxException(e);
     }
   }
 
   /**
    * Returns the next value from the JSON stream as a parse tree.
    *
-   * @throws JsonParseException if there is an IOException or if the specified
+   * @throws com.economic.persistgson.JsonParseException if there is an IOException or if the specified
    *     text is not valid JSON
    * @since 1.6
    */
-  public JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException {
+  public JsonElement parse(JsonReader json) throws JsonIOException, com.economic.persistgson.JsonSyntaxException {
     boolean lenient = json.isLenient();
     json.setLenient(true);
     try {
       return Streams.parse(json);
     } catch (StackOverflowError e) {
-      throw new JsonParseException("Failed parsing JSON source: " + json + " to Json", e);
+      throw new com.economic.persistgson.JsonParseException("Failed parsing JSON source: " + json + " to Json", e);
     } catch (OutOfMemoryError e) {
       throw new JsonParseException("Failed parsing JSON source: " + json + " to Json", e);
     } finally {
diff --git a/gson/src/main/java/com/google/gson/JsonPrimitive.java b/gson/src/main/java/com/economic/persistgson/JsonPrimitive.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/JsonPrimitive.java
rename to gson/src/main/java/com/economic/persistgson/JsonPrimitive.java
index e2443d435..fbeee09be 100644
--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java
+++ b/gson/src/main/java/com/economic/persistgson/JsonPrimitive.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
-import com.google.gson.internal.$Gson$Preconditions;
-import com.google.gson.internal.LazilyParsedNumber;
+import com.economic.persistgson.internal.$Gson$Preconditions;
+import com.economic.persistgson.internal.LazilyParsedNumber;
 
 /**
  * A class representing a Json primitive value. A primitive value
@@ -30,7 +30,7 @@
  * @author Inderjeet Singh
  * @author Joel Leitch
  */
-public final class JsonPrimitive extends JsonElement {
+public final class JsonPrimitive extends com.economic.persistgson.JsonElement {
 
   private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class,
       float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class,
diff --git a/gson/src/main/java/com/google/gson/JsonSerializationContext.java b/gson/src/main/java/com/economic/persistgson/JsonSerializationContext.java
similarity index 86%
rename from gson/src/main/java/com/google/gson/JsonSerializationContext.java
rename to gson/src/main/java/com/economic/persistgson/JsonSerializationContext.java
index ca3ec4f90..968d615a4 100644
--- a/gson/src/main/java/com/google/gson/JsonSerializationContext.java
+++ b/gson/src/main/java/com/economic/persistgson/JsonSerializationContext.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 import java.lang.reflect.Type;
 
 /**
  * Context for serialization that is passed to a custom serializer during invocation of its
- * {@link JsonSerializer#serialize(Object, Type, JsonSerializationContext)} method.
+ * {@link com.economic.persistgson.JsonSerializer#serialize(Object, Type, JsonSerializationContext)} method.
  *
  * @author Inderjeet Singh
  * @author Joel Leitch
@@ -38,7 +38,7 @@
   /**
    * Invokes default serialization on the specified object passing the specific type information.
    * It should never be invoked on the element received as a parameter of the
-   * {@link JsonSerializer#serialize(Object, Type, JsonSerializationContext)} method. Doing
+   * {@link com.economic.persistgson.JsonSerializer#serialize(Object, Type, JsonSerializationContext)} method. Doing
    * so will result in an infinite loop since Gson will in-turn call the custom serializer again.
    *
    * @param src the object that needs to be serialized.
diff --git a/gson/src/main/java/com/google/gson/JsonSerializer.java b/gson/src/main/java/com/economic/persistgson/JsonSerializer.java
similarity index 96%
rename from gson/src/main/java/com/google/gson/JsonSerializer.java
rename to gson/src/main/java/com/economic/persistgson/JsonSerializer.java
index a60500336..fe71ad864 100644
--- a/gson/src/main/java/com/google/gson/JsonSerializer.java
+++ b/gson/src/main/java/com/economic/persistgson/JsonSerializer.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 import java.lang.reflect.Type;
 
 /**
  * Interface representing a custom serializer for Json. You should write a custom serializer, if
  * you are not happy with the default serialization done by Gson. You will also need to register
- * this serializer through {@link com.google.gson.GsonBuilder#registerTypeAdapter(Type, Object)}.
+ * this serializer through {@link GsonBuilder#registerTypeAdapter(Type, Object)}.
  *
  * <p>Let us look at example where defining a serializer will be useful. The {@code Id} class
  * defined below has two fields: {@code clazz} and {@code value}.</p>
diff --git a/gson/src/main/java/com/google/gson/JsonStreamParser.java b/gson/src/main/java/com/economic/persistgson/JsonStreamParser.java
similarity index 66%
rename from gson/src/main/java/com/google/gson/JsonStreamParser.java
rename to gson/src/main/java/com/economic/persistgson/JsonStreamParser.java
index f0438db32..0cbde4c51 100644
--- a/gson/src/main/java/com/google/gson/JsonStreamParser.java
+++ b/gson/src/main/java/com/economic/persistgson/JsonStreamParser.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson;
+package com.economic.persistgson;
 
 import java.io.EOFException;
 import java.io.IOException;
@@ -22,13 +22,16 @@
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
-import com.google.gson.internal.Streams;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.MalformedJsonException;
+import com.economic.persistgson.internal.Streams;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonToken;
+import com.economic.persistgson.stream.MalformedJsonException;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonIOException;
+import com.economic.persistgson.JsonSyntaxException;
 
 /**
- * A streaming parser that allows reading of multiple {@link JsonElement}s from the specified reader
+ * A streaming parser that allows reading of multiple {@link com.economic.persistgson.JsonElement}s from the specified reader
  * asynchronously.
  * 
  * <p>This class is conditionally thread-safe (see Item 70, Effective Java second edition). To
@@ -49,7 +52,7 @@
  * @author Joel Leitch
  * @since 1.4
  */
-public final class JsonStreamParser implements Iterator<JsonElement> {
+public final class JsonStreamParser implements Iterator<com.economic.persistgson.JsonElement> {
   private final JsonReader parser;
   private final Object lock;
 
@@ -72,13 +75,13 @@ public JsonStreamParser(Reader reader) {
   }
   
   /**
-   * Returns the next available {@link JsonElement} on the reader. Null if none available.
+   * Returns the next available {@link com.economic.persistgson.JsonElement} on the reader. Null if none available.
    * 
-   * @return the next available {@link JsonElement} on the reader. Null if none available.
-   * @throws JsonParseException if the incoming stream is malformed JSON.
+   * @return the next available {@link com.economic.persistgson.JsonElement} on the reader. Null if none available.
+   * @throws com.economic.persistgson.JsonParseException if the incoming stream is malformed JSON.
    * @since 1.4
    */
-  public JsonElement next() throws JsonParseException {
+  public com.economic.persistgson.JsonElement next() throws com.economic.persistgson.JsonParseException {
     if (!hasNext()) {
       throw new NoSuchElementException();
     }
@@ -86,16 +89,16 @@ public JsonElement next() throws JsonParseException {
     try {
       return Streams.parse(parser);
     } catch (StackOverflowError e) {
-      throw new JsonParseException("Failed parsing JSON source to Json", e);
+      throw new com.economic.persistgson.JsonParseException("Failed parsing JSON source to Json", e);
     } catch (OutOfMemoryError e) {
-      throw new JsonParseException("Failed parsing JSON source to Json", e);
-    } catch (JsonParseException e) {
+      throw new com.economic.persistgson.JsonParseException("Failed parsing JSON source to Json", e);
+    } catch (com.economic.persistgson.JsonParseException e) {
       throw e.getCause() instanceof EOFException ? new NoSuchElementException() : e;
     }
   }
 
   /**
-   * Returns true if a {@link JsonElement} is available on the input for consumption
+   * Returns true if a {@link com.economic.persistgson.JsonElement} is available on the input for consumption
    * @return true if a {@link JsonElement} is available on the input, false otherwise
    * @since 1.4
    */
diff --git a/gson/src/main/java/com/google/gson/JsonSyntaxException.java b/gson/src/main/java/com/economic/persistgson/JsonSyntaxException.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/JsonSyntaxException.java
rename to gson/src/main/java/com/economic/persistgson/JsonSyntaxException.java
index 17c1d3d3a..b6ae5f23b 100644
--- a/gson/src/main/java/com/google/gson/JsonSyntaxException.java
+++ b/gson/src/main/java/com/economic/persistgson/JsonSyntaxException.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson;
+package com.economic.persistgson;
 
 /**
  * This exception is raised when Gson attempts to read (or write) a malformed
diff --git a/gson/src/main/java/com/google/gson/LongSerializationPolicy.java b/gson/src/main/java/com/economic/persistgson/LongSerializationPolicy.java
similarity index 78%
rename from gson/src/main/java/com/google/gson/LongSerializationPolicy.java
rename to gson/src/main/java/com/economic/persistgson/LongSerializationPolicy.java
index 7b732bab7..509b8db23 100644
--- a/gson/src/main/java/com/google/gson/LongSerializationPolicy.java
+++ b/gson/src/main/java/com/economic/persistgson/LongSerializationPolicy.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
+
+import com.economic.persistgson.JsonElement;
 
 /**
  * Defines the expected format for a {@code long} or {@code Long} type when its serialized.
@@ -32,8 +34,8 @@
    * {@code {"f":123}}.
    */
   DEFAULT() {
-    @Override public JsonElement serialize(Long value) {
-      return new JsonPrimitive(value);
+    @Override public com.economic.persistgson.JsonElement serialize(Long value) {
+      return new com.economic.persistgson.JsonPrimitive(value);
     }
   },
   
@@ -43,15 +45,15 @@
    * {@code {"f":"123"}}.
    */
   STRING() {
-    @Override public JsonElement serialize(Long value) {
-      return new JsonPrimitive(String.valueOf(value));
+    @Override public com.economic.persistgson.JsonElement serialize(Long value) {
+      return new com.economic.persistgson.JsonPrimitive(String.valueOf(value));
     }
   };
   
   /**
    * Serialize this {@code value} using this serialization policy.
    *
-   * @param value the long value to be serialized into a {@link JsonElement}
+   * @param value the long value to be serialized into a {@link com.economic.persistgson.JsonElement}
    * @return the serialized version of {@code value}
    */
   public abstract JsonElement serialize(Long value);
diff --git a/gson/src/main/java/com/google/gson/TypeAdapter.java b/gson/src/main/java/com/economic/persistgson/TypeAdapter.java
similarity index 93%
rename from gson/src/main/java/com/google/gson/TypeAdapter.java
rename to gson/src/main/java/com/economic/persistgson/TypeAdapter.java
index 4646d271d..c76966bd9 100644
--- a/gson/src/main/java/com/google/gson/TypeAdapter.java
+++ b/gson/src/main/java/com/economic/persistgson/TypeAdapter.java
@@ -14,13 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
+
+import com.economic.persistgson.internal.bind.JsonTreeReader;
+import com.economic.persistgson.internal.bind.JsonTreeWriter;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonToken;
+import com.economic.persistgson.stream.JsonWriter;
+import com.economic.persistgson.JsonNull;
 
-import com.google.gson.internal.bind.JsonTreeWriter;
-import com.google.gson.internal.bind.JsonTreeReader;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
@@ -76,13 +78,13 @@
  * <p>Type adapters should be prepared to read null from the stream and write it
  * to the stream. Alternatively, they should use {@link #nullSafe()} method while
  * registering the type adapter with Gson. If your {@code Gson} instance
- * has been configured to {@link GsonBuilder#serializeNulls()}, these nulls will be
+ * has been configured to {@link com.economic.persistgson.GsonBuilder#serializeNulls()}, these nulls will be
  * written to the final document. Otherwise the value (and the corresponding name
  * when writing to a JSON object) will be omitted automatically. In either case
  * your type adapter must handle null.
  *
  * <p>To use a custom type adapter with Gson, you must <i>register</i> it with a
- * {@link GsonBuilder}: <pre>   {@code
+ * {@link com.economic.persistgson.GsonBuilder}: <pre>   {@code
  *
  *   GsonBuilder builder = new GsonBuilder();
  *   builder.registerTypeAdapter(Point.class, new PointAdapter());
@@ -131,7 +133,7 @@
    * Unlike Gson's similar {@link Gson#toJson(JsonElement, Appendable) toJson}
    * method, this write is strict. Create a {@link
    * JsonWriter#setLenient(boolean) lenient} {@code JsonWriter} and call
-   * {@link #write(com.google.gson.stream.JsonWriter, Object)} for lenient
+   * {@link #write(JsonWriter, Object)} for lenient
    * writing.
    *
    * @param value the Java object to convert. May be null.
@@ -205,7 +207,7 @@ public final void toJson(Writer out, T value) throws IOException {
    * Converts {@code value} to a JSON document. Unlike Gson's similar {@link
    * Gson#toJson(Object) toJson} method, this write is strict. Create a {@link
    * JsonWriter#setLenient(boolean) lenient} {@code JsonWriter} and call
-   * {@link #write(com.google.gson.stream.JsonWriter, Object)} for lenient
+   * {@link #write(JsonWriter, Object)} for lenient
    * writing.
    *
    * @param value the Java object to convert. May be null.
@@ -225,7 +227,7 @@ public final String toJson(T value) {
    * Converts {@code value} to a JSON tree.
    *
    * @param value the Java object to convert. May be null.
-   * @return the converted JSON tree. May be {@link JsonNull}.
+   * @return the converted JSON tree. May be {@link com.economic.persistgson.JsonNull}.
    * @since 2.2
    */
   public final JsonElement toJsonTree(T value) {
diff --git a/gson/src/main/java/com/google/gson/TypeAdapterFactory.java b/gson/src/main/java/com/economic/persistgson/TypeAdapterFactory.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/TypeAdapterFactory.java
rename to gson/src/main/java/com/economic/persistgson/TypeAdapterFactory.java
index e12a72dcc..487cf65ef 100644
--- a/gson/src/main/java/com/google/gson/TypeAdapterFactory.java
+++ b/gson/src/main/java/com/economic/persistgson/TypeAdapterFactory.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.reflect.TypeToken;
 
 /**
  * Creates type adapters for set of related types. Type adapter factories are
@@ -80,7 +80,7 @@
  * mapping from lowercase name to enum value is computed eagerly.
  *
  * <p>As with type adapters, factories must be <i>registered</i> with a {@link
- * com.google.gson.GsonBuilder} for them to take effect: <pre>   {@code
+ * GsonBuilder} for them to take effect: <pre>   {@code
  *
  *  GsonBuilder builder = new GsonBuilder();
  *  builder.registerTypeAdapterFactory(new LowercaseEnumTypeAdapterFactory());
diff --git a/gson/src/main/java/com/google/gson/annotations/Expose.java b/gson/src/main/java/com/economic/persistgson/annotations/Expose.java
similarity index 91%
rename from gson/src/main/java/com/google/gson/annotations/Expose.java
rename to gson/src/main/java/com/economic/persistgson/annotations/Expose.java
index b66dc4f27..643657d7a 100644
--- a/gson/src/main/java/com/google/gson/annotations/Expose.java
+++ b/gson/src/main/java/com/economic/persistgson/annotations/Expose.java
@@ -14,7 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.annotations;
+package com.economic.persistgson.annotations;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -26,9 +29,9 @@
  * An annotation that indicates this member should be exposed for JSON
  * serialization or deserialization.
  *
- * <p>This annotation has no effect unless you build {@link com.google.gson.Gson}
- * with a {@link com.google.gson.GsonBuilder} and invoke
- * {@link com.google.gson.GsonBuilder#excludeFieldsWithoutExposeAnnotation()}
+ * <p>This annotation has no effect unless you build {@link Gson}
+ * with a {@link GsonBuilder} and invoke
+ * {@link GsonBuilder#excludeFieldsWithoutExposeAnnotation()}
  * method.</p>
  *
  * <p>Here is an example of how this annotation is meant to be used:
diff --git a/gson/src/main/java/com/google/gson/annotations/JsonAdapter.java b/gson/src/main/java/com/economic/persistgson/annotations/JsonAdapter.java
similarity index 90%
rename from gson/src/main/java/com/google/gson/annotations/JsonAdapter.java
rename to gson/src/main/java/com/economic/persistgson/annotations/JsonAdapter.java
index 93163f858..986f0e959 100644
--- a/gson/src/main/java/com/google/gson/annotations/JsonAdapter.java
+++ b/gson/src/main/java/com/economic/persistgson/annotations/JsonAdapter.java
@@ -14,12 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.annotations;
+package com.economic.persistgson.annotations;
+
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.JsonDeserializer;
 
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonSerializer;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -74,14 +76,14 @@
  * </pre>
  *
  * It's possible to specify different type adapters on a field, that
- * field's type, and in the {@link com.google.gson.GsonBuilder}. Field
+ * field's type, and in the {@link GsonBuilder}. Field
  * annotations take precedence over {@code GsonBuilder}-registered type
  * adapters, which in turn take precedence over annotated types.
  *
  * <p>The class referenced by this annotation must be either a {@link
  * TypeAdapter} or a {@link TypeAdapterFactory}, or must implement one
- * or both of {@link JsonDeserializer} or {@link JsonSerializer}. 
- * Using {@link TypeAdapterFactory} makes it possible to delegate 
+ * or both of {@link JsonDeserializer} or {@link JsonSerializer}.
+ * Using {@link TypeAdapterFactory} makes it possible to delegate
  * to the enclosing {@code Gson} instance.
  *
  * @since 2.3
diff --git a/gson/src/main/java/com/google/gson/annotations/SerializedName.java b/gson/src/main/java/com/economic/persistgson/annotations/SerializedName.java
similarity index 88%
rename from gson/src/main/java/com/google/gson/annotations/SerializedName.java
rename to gson/src/main/java/com/economic/persistgson/annotations/SerializedName.java
index 9e8e4b8d4..ce09439a2 100644
--- a/gson/src/main/java/com/google/gson/annotations/SerializedName.java
+++ b/gson/src/main/java/com/economic/persistgson/annotations/SerializedName.java
@@ -14,7 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.annotations;
+package com.economic.persistgson.annotations;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.FieldNamingPolicy;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -26,10 +30,10 @@
  * An annotation that indicates this member should be serialized to JSON with
  * the provided name value as its field name.
  *
- * <p>This annotation will override any {@link com.google.gson.FieldNamingPolicy}, including
- * the default field naming policy, that may have been set on the {@link com.google.gson.Gson}
+ * <p>This annotation will override any {@link FieldNamingPolicy}, including
+ * the default field naming policy, that may have been set on the {@link Gson}
  * instance.  A different naming policy can set using the {@code GsonBuilder} class.  See
- * {@link com.google.gson.GsonBuilder#setFieldNamingPolicy(com.google.gson.FieldNamingPolicy)}
+ * {@link GsonBuilder#setFieldNamingPolicy(FieldNamingPolicy)}
  * for more information.</p>
  *
  * <p>Here is an example of how this annotation is meant to be used:</p>
@@ -72,7 +76,7 @@
  * </pre>
  * Note that MyClass.b is now deserialized from either name1, name2 or name3.
  *
- * @see com.google.gson.FieldNamingPolicy
+ * @see FieldNamingPolicy
  *
  * @author Inderjeet Singh
  * @author Joel Leitch
diff --git a/gson/src/main/java/com/google/gson/annotations/Since.java b/gson/src/main/java/com/economic/persistgson/annotations/Since.java
similarity index 87%
rename from gson/src/main/java/com/google/gson/annotations/Since.java
rename to gson/src/main/java/com/economic/persistgson/annotations/Since.java
index c6b218252..95d9118f3 100644
--- a/gson/src/main/java/com/google/gson/annotations/Since.java
+++ b/gson/src/main/java/com/economic/persistgson/annotations/Since.java
@@ -14,7 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.annotations;
+package com.economic.persistgson.annotations;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -27,9 +30,9 @@
  * This annotation is useful to manage versioning of your Json classes for a web-service.
  *
  * <p>
- * This annotation has no effect unless you build {@link com.google.gson.Gson} with a
- * {@link com.google.gson.GsonBuilder} and invoke
- * {@link com.google.gson.GsonBuilder#setVersion(double)} method.
+ * This annotation has no effect unless you build {@link Gson} with a
+ * {@link GsonBuilder} and invoke
+ * {@link GsonBuilder#setVersion(double)} method.
  *
  * <p>Here is an example of how this annotation is meant to be used:</p>
  * <pre>
diff --git a/gson/src/main/java/com/google/gson/annotations/Until.java b/gson/src/main/java/com/economic/persistgson/annotations/Until.java
similarity index 89%
rename from gson/src/main/java/com/google/gson/annotations/Until.java
rename to gson/src/main/java/com/economic/persistgson/annotations/Until.java
index 676a4b959..20e082ccc 100644
--- a/gson/src/main/java/com/google/gson/annotations/Until.java
+++ b/gson/src/main/java/com/economic/persistgson/annotations/Until.java
@@ -14,7 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.annotations;
+package com.economic.persistgson.annotations;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -29,9 +32,9 @@
  * is useful to manage versioning of your JSON classes for a web-service.
  *
  * <p>
- * This annotation has no effect unless you build {@link com.google.gson.Gson} with a
- * {@link com.google.gson.GsonBuilder} and invoke
- * {@link com.google.gson.GsonBuilder#setVersion(double)} method.
+ * This annotation has no effect unless you build {@link Gson} with a
+ * {@link GsonBuilder} and invoke
+ * {@link GsonBuilder#setVersion(double)} method.
  *
  * <p>Here is an example of how this annotation is meant to be used:</p>
  * <pre>
diff --git a/gson/src/main/java/com/google/gson/annotations/package-info.java b/gson/src/main/java/com/economic/persistgson/annotations/package-info.java
similarity index 59%
rename from gson/src/main/java/com/google/gson/annotations/package-info.java
rename to gson/src/main/java/com/economic/persistgson/annotations/package-info.java
index 1c461fd68..81356deb8 100644
--- a/gson/src/main/java/com/google/gson/annotations/package-info.java
+++ b/gson/src/main/java/com/economic/persistgson/annotations/package-info.java
@@ -1,6 +1,6 @@
 /**
- * This package provides annotations that can be used with {@link com.google.gson.Gson}.
+ * This package provides annotations that can be used with {@link com.economic.persistgson.Gson}.
  * 
  * @author Inderjeet Singh, Joel Leitch
  */
-package com.google.gson.annotations;
\ No newline at end of file
+package com.economic.persistgson.annotations;
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/internal/$Gson$Preconditions.java b/gson/src/main/java/com/economic/persistgson/internal/$Gson$Preconditions.java
similarity index 93%
rename from gson/src/main/java/com/google/gson/internal/$Gson$Preconditions.java
rename to gson/src/main/java/com/economic/persistgson/internal/$Gson$Preconditions.java
index f0e7d3fac..d1b12c283 100644
--- a/gson/src/main/java/com/google/gson/internal/$Gson$Preconditions.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/$Gson$Preconditions.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.economic.persistgson.internal;
 
 /**
  * A simple utility class used to check method Preconditions.
diff --git a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java b/gson/src/main/java/com/economic/persistgson/internal/$Gson$Types.java
similarity index 96%
rename from gson/src/main/java/com/google/gson/internal/$Gson$Types.java
rename to gson/src/main/java/com/economic/persistgson/internal/$Gson$Types.java
index 8ba697ed0..b7aa3a940 100644
--- a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/$Gson$Types.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.economic.persistgson.internal;
 
 import java.io.Serializable;
 import java.lang.reflect.Array;
@@ -31,9 +31,6 @@
 import java.util.NoSuchElementException;
 import java.util.Properties;
 
-import static com.google.gson.internal.$Gson$Preconditions.checkArgument;
-import static com.google.gson.internal.$Gson$Preconditions.checkNotNull;
-
 /**
  * Static methods for working with types.
  *
@@ -128,7 +125,7 @@ public static Type canonicalize(Type type) {
       // Neal isn't either but suspects some pathological case related
       // to nested classes exists.
       Type rawType = parameterizedType.getRawType();
-      checkArgument(rawType instanceof Class);
+      $Gson$Preconditions.checkArgument(rawType instanceof Class);
       return (Class<?>) rawType;
 
     } else if (type instanceof GenericArrayType) {
@@ -267,7 +264,7 @@ static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResol
    * @param supertype a superclass of, or interface implemented by, this.
    */
   static Type getSupertype(Type context, Class<?> contextRawType, Class<?> supertype) {
-    checkArgument(supertype.isAssignableFrom(contextRawType));
+    $Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));
     return resolve(context, contextRawType,
         $Gson$Types.getGenericSupertype(context, contextRawType, supertype));
   }
@@ -431,7 +428,7 @@ private static int indexOf(Object[] array, Object toFind) {
   }
 
   static void checkNotPrimitive(Type type) {
-    checkArgument(!(type instanceof Class<?>) || !((Class<?>) type).isPrimitive());
+    $Gson$Preconditions.checkArgument(!(type instanceof Class<?>) || !((Class<?>) type).isPrimitive());
   }
 
   private static final class ParameterizedTypeImpl implements ParameterizedType, Serializable {
@@ -445,14 +442,14 @@ public ParameterizedTypeImpl(Type ownerType, Type rawType, Type... typeArguments
         Class<?> rawTypeAsClass = (Class<?>) rawType;
         boolean isStaticOrTopLevelClass = Modifier.isStatic(rawTypeAsClass.getModifiers())
             || rawTypeAsClass.getEnclosingClass() == null;
-        checkArgument(ownerType != null || isStaticOrTopLevelClass);
+        $Gson$Preconditions.checkArgument(ownerType != null || isStaticOrTopLevelClass);
       }
 
       this.ownerType = ownerType == null ? null : canonicalize(ownerType);
       this.rawType = canonicalize(rawType);
       this.typeArguments = typeArguments.clone();
       for (int t = 0, length = this.typeArguments.length; t < length; t++) {
-        checkNotNull(this.typeArguments[t]);
+        $Gson$Preconditions.checkNotNull(this.typeArguments[t]);
         checkNotPrimitive(this.typeArguments[t]);
         this.typeArguments[t] = canonicalize(this.typeArguments[t]);
       }
@@ -535,18 +532,18 @@ public Type getGenericComponentType() {
     private final Type lowerBound;
 
     public WildcardTypeImpl(Type[] upperBounds, Type[] lowerBounds) {
-      checkArgument(lowerBounds.length <= 1);
-      checkArgument(upperBounds.length == 1);
+      $Gson$Preconditions.checkArgument(lowerBounds.length <= 1);
+      $Gson$Preconditions.checkArgument(upperBounds.length == 1);
 
       if (lowerBounds.length == 1) {
-        checkNotNull(lowerBounds[0]);
+        $Gson$Preconditions.checkNotNull(lowerBounds[0]);
         checkNotPrimitive(lowerBounds[0]);
-        checkArgument(upperBounds[0] == Object.class);
+        $Gson$Preconditions.checkArgument(upperBounds[0] == Object.class);
         this.lowerBound = canonicalize(lowerBounds[0]);
         this.upperBound = Object.class;
 
       } else {
-        checkNotNull(upperBounds[0]);
+        $Gson$Preconditions.checkNotNull(upperBounds[0]);
         checkNotPrimitive(upperBounds[0]);
         this.lowerBound = null;
         this.upperBound = canonicalize(upperBounds[0]);
diff --git a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java b/gson/src/main/java/com/economic/persistgson/internal/ConstructorConstructor.java
similarity index 76%
rename from gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
rename to gson/src/main/java/com/economic/persistgson/internal/ConstructorConstructor.java
index ffe3cb48e..9f167198e 100644
--- a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/ConstructorConstructor.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.economic.persistgson.internal;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
@@ -38,9 +38,11 @@
 import java.util.concurrent.ConcurrentNavigableMap;
 import java.util.concurrent.ConcurrentSkipListMap;
 
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonIOException;
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.InstanceCreator;
+import com.economic.persistgson.JsonIOException;
+import com.economic.persistgson.internal.ObjectConstructor;
+import com.economic.persistgson.internal.UnsafeAllocator;
+import com.economic.persistgson.reflect.TypeToken;
 
 /**
  * Returns a function that can construct an instance of a requested type.
@@ -52,7 +54,7 @@ public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {
     this.instanceCreators = instanceCreators;
   }
 
-  public <T> ObjectConstructor<T> get(TypeToken<T> typeToken) {
+  public <T> com.economic.persistgson.internal.ObjectConstructor<T> get(TypeToken<T> typeToken) {
     final Type type = typeToken.getType();
     final Class<? super T> rawType = typeToken.getRawType();
 
@@ -61,7 +63,7 @@ public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {
     @SuppressWarnings("unchecked") // types must agree
     final InstanceCreator<T> typeCreator = (InstanceCreator<T>) instanceCreators.get(type);
     if (typeCreator != null) {
-      return new ObjectConstructor<T>() {
+      return new com.economic.persistgson.internal.ObjectConstructor<T>() {
         @Override public T construct() {
           return typeCreator.createInstance(type);
         }
@@ -73,19 +75,19 @@ public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {
     final InstanceCreator<T> rawTypeCreator =
         (InstanceCreator<T>) instanceCreators.get(rawType);
     if (rawTypeCreator != null) {
-      return new ObjectConstructor<T>() {
+      return new com.economic.persistgson.internal.ObjectConstructor<T>() {
         @Override public T construct() {
           return rawTypeCreator.createInstance(type);
         }
       };
     }
 
-    ObjectConstructor<T> defaultConstructor = newDefaultConstructor(rawType);
+    com.economic.persistgson.internal.ObjectConstructor<T> defaultConstructor = newDefaultConstructor(rawType);
     if (defaultConstructor != null) {
       return defaultConstructor;
     }
 
-    ObjectConstructor<T> defaultImplementation = newDefaultImplementationConstructor(type, rawType);
+    com.economic.persistgson.internal.ObjectConstructor<T> defaultImplementation = newDefaultImplementationConstructor(type, rawType);
     if (defaultImplementation != null) {
       return defaultImplementation;
     }
@@ -94,13 +96,13 @@ public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {
     return newUnsafeAllocator(type, rawType);
   }
 
-  private <T> ObjectConstructor<T> newDefaultConstructor(Class<? super T> rawType) {
+  private <T> com.economic.persistgson.internal.ObjectConstructor<T> newDefaultConstructor(Class<? super T> rawType) {
     try {
       final Constructor<? super T> constructor = rawType.getDeclaredConstructor();
       if (!constructor.isAccessible()) {
         constructor.setAccessible(true);
       }
-      return new ObjectConstructor<T>() {
+      return new com.economic.persistgson.internal.ObjectConstructor<T>() {
         @SuppressWarnings("unchecked") // T is the same raw type as is requested
         @Override public T construct() {
           try {
@@ -129,17 +131,17 @@ public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {
    * subtypes.
    */
   @SuppressWarnings("unchecked") // use runtime checks to guarantee that 'T' is what it is
-  private <T> ObjectConstructor<T> newDefaultImplementationConstructor(
+  private <T> com.economic.persistgson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(
       final Type type, Class<? super T> rawType) {
     if (Collection.class.isAssignableFrom(rawType)) {
       if (SortedSet.class.isAssignableFrom(rawType)) {
-        return new ObjectConstructor<T>() {
+        return new com.economic.persistgson.internal.ObjectConstructor<T>() {
           @Override public T construct() {
             return (T) new TreeSet<Object>();
           }
         };
       } else if (EnumSet.class.isAssignableFrom(rawType)) {
-        return new ObjectConstructor<T>() {
+        return new com.economic.persistgson.internal.ObjectConstructor<T>() {
           @SuppressWarnings("rawtypes")
           @Override public T construct() {
             if (type instanceof ParameterizedType) {
@@ -155,19 +157,19 @@ public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {
           }
         };
       } else if (Set.class.isAssignableFrom(rawType)) {
-        return new ObjectConstructor<T>() {
+        return new com.economic.persistgson.internal.ObjectConstructor<T>() {
           @Override public T construct() {
             return (T) new LinkedHashSet<Object>();
           }
         };
       } else if (Queue.class.isAssignableFrom(rawType)) {
-        return new ObjectConstructor<T>() {
+        return new com.economic.persistgson.internal.ObjectConstructor<T>() {
           @Override public T construct() {
             return (T) new ArrayDeque<Object>();
           }
         };
       } else {
-        return new ObjectConstructor<T>() {
+        return new com.economic.persistgson.internal.ObjectConstructor<T>() {
           @Override public T construct() {
             return (T) new ArrayList<Object>();
           }
@@ -177,34 +179,34 @@ public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {
 
     if (Map.class.isAssignableFrom(rawType)) {
       if (ConcurrentNavigableMap.class.isAssignableFrom(rawType)) {
-        return new ObjectConstructor<T>() {
+        return new com.economic.persistgson.internal.ObjectConstructor<T>() {
           @Override public T construct() {
             return (T) new ConcurrentSkipListMap<Object, Object>();
           }
         };
       } else if (ConcurrentMap.class.isAssignableFrom(rawType)) {
-        return new ObjectConstructor<T>() {
+        return new com.economic.persistgson.internal.ObjectConstructor<T>() {
           @Override public T construct() {
             return (T) new ConcurrentHashMap<Object, Object>();
           }
         };
       } else if (SortedMap.class.isAssignableFrom(rawType)) {
-        return new ObjectConstructor<T>() {
+        return new com.economic.persistgson.internal.ObjectConstructor<T>() {
           @Override public T construct() {
             return (T) new TreeMap<Object, Object>();
           }
         };
       } else if (type instanceof ParameterizedType && !(String.class.isAssignableFrom(
           TypeToken.get(((ParameterizedType) type).getActualTypeArguments()[0]).getRawType()))) {
-        return new ObjectConstructor<T>() {
+        return new com.economic.persistgson.internal.ObjectConstructor<T>() {
           @Override public T construct() {
             return (T) new LinkedHashMap<Object, Object>();
           }
         };
       } else {
-        return new ObjectConstructor<T>() {
+        return new com.economic.persistgson.internal.ObjectConstructor<T>() {
           @Override public T construct() {
-            return (T) new LinkedTreeMap<String, Object>();
+            return (T) new com.economic.persistgson.internal.LinkedTreeMap<String, Object>();
           }
         };
       }
@@ -213,10 +215,10 @@ public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {
     return null;
   }
 
-  private <T> ObjectConstructor<T> newUnsafeAllocator(
+  private <T> com.economic.persistgson.internal.ObjectConstructor<T> newUnsafeAllocator(
       final Type type, final Class<? super T> rawType) {
     return new ObjectConstructor<T>() {
-      private final UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();
+      private final com.economic.persistgson.internal.UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();
       @SuppressWarnings("unchecked")
       @Override public T construct() {
         try {
diff --git a/gson/src/main/java/com/google/gson/internal/Excluder.java b/gson/src/main/java/com/economic/persistgson/internal/Excluder.java
similarity index 91%
rename from gson/src/main/java/com/google/gson/internal/Excluder.java
rename to gson/src/main/java/com/economic/persistgson/internal/Excluder.java
index bef790406..6d5f2d0bd 100644
--- a/gson/src/main/java/com/google/gson/internal/Excluder.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/Excluder.java
@@ -14,19 +14,20 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
-
-import com.google.gson.ExclusionStrategy;
-import com.google.gson.FieldAttributes;
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.Expose;
-import com.google.gson.annotations.Since;
-import com.google.gson.annotations.Until;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+package com.economic.persistgson.internal;
+
+import com.economic.persistgson.ExclusionStrategy;
+import com.economic.persistgson.FieldAttributes;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.annotations.Expose;
+import com.economic.persistgson.annotations.Since;
+import com.economic.persistgson.annotations.Until;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonWriter;
+
 import java.io.IOException;
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
@@ -94,7 +95,7 @@ public Excluder excludeFieldsWithoutExposeAnnotation() {
   }
 
   public Excluder withExclusionStrategy(ExclusionStrategy exclusionStrategy,
-      boolean serialization, boolean deserialization) {
+                                        boolean serialization, boolean deserialization) {
     Excluder result = clone();
     if (serialization) {
       result.serializationStrategies = new ArrayList<ExclusionStrategy>(serializationStrategies);
diff --git a/gson/src/main/java/com/google/gson/internal/JsonReaderInternalAccess.java b/gson/src/main/java/com/economic/persistgson/internal/JsonReaderInternalAccess.java
similarity index 91%
rename from gson/src/main/java/com/google/gson/internal/JsonReaderInternalAccess.java
rename to gson/src/main/java/com/economic/persistgson/internal/JsonReaderInternalAccess.java
index bbd472040..e3afdf949 100644
--- a/gson/src/main/java/com/google/gson/internal/JsonReaderInternalAccess.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/JsonReaderInternalAccess.java
@@ -14,9 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.economic.persistgson.internal;
+
+import com.economic.persistgson.stream.JsonReader;
 
-import com.google.gson.stream.JsonReader;
 import java.io.IOException;
 
 /**
diff --git a/gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java b/gson/src/main/java/com/economic/persistgson/internal/LazilyParsedNumber.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java
rename to gson/src/main/java/com/economic/persistgson/internal/LazilyParsedNumber.java
index 3669af7b5..651d8891f 100644
--- a/gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/LazilyParsedNumber.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.internal;
+package com.economic.persistgson.internal;
 
 import java.io.ObjectStreamException;
 import java.math.BigDecimal;
diff --git a/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java b/gson/src/main/java/com/economic/persistgson/internal/LinkedHashTreeMap.java
similarity index 99%
rename from gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java
rename to gson/src/main/java/com/economic/persistgson/internal/LinkedHashTreeMap.java
index b2707c50d..13772713b 100644
--- a/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/LinkedHashTreeMap.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.economic.persistgson.internal;
 
 import java.io.ObjectStreamException;
 import java.io.Serializable;
diff --git a/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java b/gson/src/main/java/com/economic/persistgson/internal/LinkedTreeMap.java
similarity index 99%
rename from gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java
rename to gson/src/main/java/com/economic/persistgson/internal/LinkedTreeMap.java
index 80462742e..ca0d16a94 100644
--- a/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/LinkedTreeMap.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.economic.persistgson.internal;
 
 import java.io.ObjectStreamException;
 import java.io.Serializable;
diff --git a/gson/src/main/java/com/google/gson/internal/ObjectConstructor.java b/gson/src/main/java/com/economic/persistgson/internal/ObjectConstructor.java
similarity index 95%
rename from gson/src/main/java/com/google/gson/internal/ObjectConstructor.java
rename to gson/src/main/java/com/economic/persistgson/internal/ObjectConstructor.java
index 6ef20607f..93953dbdb 100644
--- a/gson/src/main/java/com/google/gson/internal/ObjectConstructor.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/ObjectConstructor.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.economic.persistgson.internal;
 
 /**
  * Defines a generic object construction factory.  The purpose of this class
diff --git a/gson/src/main/java/com/google/gson/internal/Primitives.java b/gson/src/main/java/com/economic/persistgson/internal/Primitives.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/internal/Primitives.java
rename to gson/src/main/java/com/economic/persistgson/internal/Primitives.java
index a98f6242a..ee9a94890 100644
--- a/gson/src/main/java/com/google/gson/internal/Primitives.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/Primitives.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.economic.persistgson.internal;
 
 
 import java.lang.reflect.Type;
diff --git a/gson/src/main/java/com/google/gson/internal/Streams.java b/gson/src/main/java/com/economic/persistgson/internal/Streams.java
similarity index 86%
rename from gson/src/main/java/com/google/gson/internal/Streams.java
rename to gson/src/main/java/com/economic/persistgson/internal/Streams.java
index ac99910a9..279f6f166 100644
--- a/gson/src/main/java/com/google/gson/internal/Streams.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/Streams.java
@@ -14,17 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.economic.persistgson.internal;
+
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonIOException;
+import com.economic.persistgson.JsonNull;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonSyntaxException;
+import com.economic.persistgson.internal.bind.TypeAdapters;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonWriter;
+import com.economic.persistgson.stream.MalformedJsonException;
 
-import com.google.gson.JsonElement;
-import com.google.gson.JsonIOException;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.internal.bind.TypeAdapters;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-import com.google.gson.stream.MalformedJsonException;
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.Writer;
diff --git a/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java b/gson/src/main/java/com/economic/persistgson/internal/UnsafeAllocator.java
similarity index 99%
rename from gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
rename to gson/src/main/java/com/economic/persistgson/internal/UnsafeAllocator.java
index 999a2b57e..10fcdd072 100644
--- a/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/UnsafeAllocator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.economic.persistgson.internal;
 
 import java.io.ObjectInputStream;
 import java.io.ObjectStreamClass;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java b/gson/src/main/java/com/economic/persistgson/internal/bind/ArrayTypeAdapter.java
similarity index 82%
rename from gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
rename to gson/src/main/java/com/economic/persistgson/internal/bind/ArrayTypeAdapter.java
index 56101706b..424e6fe33 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/ArrayTypeAdapter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.economic.persistgson.internal.bind;
 
 import java.io.IOException;
 import java.lang.reflect.Array;
@@ -23,14 +23,14 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.internal.$Gson$Types;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonToken;
+import com.economic.persistgson.stream.JsonWriter;
 
 /**
  * Adapt an array of objects.
@@ -56,7 +56,7 @@
 
   public ArrayTypeAdapter(Gson context, TypeAdapter<E> componentTypeAdapter, Class<E> componentType) {
     this.componentTypeAdapter =
-      new TypeAdapterRuntimeTypeWrapper<E>(context, componentTypeAdapter, componentType);
+      new com.economic.persistgson.internal.bind.TypeAdapterRuntimeTypeWrapper<E>(context, componentTypeAdapter, componentType);
     this.componentType = componentType;
   }
 
diff --git a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java b/gson/src/main/java/com/economic/persistgson/internal/bind/CollectionTypeAdapterFactory.java
similarity index 78%
rename from gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
rename to gson/src/main/java/com/economic/persistgson/internal/bind/CollectionTypeAdapterFactory.java
index 1d57844a4..7916469e8 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/CollectionTypeAdapterFactory.java
@@ -14,18 +14,19 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.economic.persistgson.internal.bind;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.internal.ConstructorConstructor;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonToken;
+import com.economic.persistgson.stream.JsonWriter;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.internal.$Gson$Types;
+import com.economic.persistgson.internal.ObjectConstructor;
 
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.ObjectConstructor;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.util.Collection;
@@ -54,7 +55,7 @@ public CollectionTypeAdapterFactory(ConstructorConstructor constructorConstructo
     ObjectConstructor<T> constructor = constructorConstructor.get(typeToken);
 
     @SuppressWarnings({"unchecked", "rawtypes"}) // create() doesn't define a type parameter
-    TypeAdapter<T> result = new Adapter(gson, elementType, elementTypeAdapter, constructor);
+            TypeAdapter<T> result = new Adapter(gson, elementType, elementTypeAdapter, constructor);
     return result;
   }
 
@@ -63,8 +64,8 @@ public CollectionTypeAdapterFactory(ConstructorConstructor constructorConstructo
     private final ObjectConstructor<? extends Collection<E>> constructor;
 
     public Adapter(Gson context, Type elementType,
-        TypeAdapter<E> elementTypeAdapter,
-        ObjectConstructor<? extends Collection<E>> constructor) {
+                   TypeAdapter<E> elementTypeAdapter,
+                   ObjectConstructor<? extends Collection<E>> constructor) {
       this.elementTypeAdapter =
           new TypeAdapterRuntimeTypeWrapper<E>(context, elementTypeAdapter, elementType);
       this.constructor = constructor;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java b/gson/src/main/java/com/economic/persistgson/internal/bind/DateTypeAdapter.java
similarity index 83%
rename from gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
rename to gson/src/main/java/com/economic/persistgson/internal/bind/DateTypeAdapter.java
index 561af1985..11a9a64df 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/DateTypeAdapter.java
@@ -14,17 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.economic.persistgson.internal.bind;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonSyntaxException;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.internal.bind.util.ISO8601Utils;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonToken;
+import com.economic.persistgson.stream.JsonWriter;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.bind.util.ISO8601Utils;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.text.DateFormat;
 import java.text.ParseException;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java b/gson/src/main/java/com/economic/persistgson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
similarity index 83%
rename from gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
rename to gson/src/main/java/com/economic/persistgson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
index 13a7bb7eb..fb25bd840 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.economic.persistgson.internal.bind;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonSerializer;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.annotations.JsonAdapter;
+import com.economic.persistgson.internal.ConstructorConstructor;
+import com.economic.persistgson.reflect.TypeToken;
 
 /**
  * Given a type T, looks for the annotation {@link JsonAdapter} and uses an instance of the
@@ -66,7 +66,7 @@ public JsonAdapterAnnotationTypeAdapterFactory(ConstructorConstructor constructo
       JsonDeserializer<?> deserializer = instance instanceof JsonDeserializer
           ? (JsonDeserializer) instance
           : null;
-      typeAdapter = new TreeTypeAdapter(serializer, deserializer, gson, type, null);
+      typeAdapter = new com.economic.persistgson.internal.bind.TreeTypeAdapter(serializer, deserializer, gson, type, null);
     } else {
       throw new IllegalArgumentException("Invalid attempt to bind an instance of "
           + instance.getClass().getName() + " as a @JsonAdapter for " + type.toString()
diff --git a/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java b/gson/src/main/java/com/economic/persistgson/internal/bind/JsonTreeReader.java
similarity index 96%
rename from gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java
rename to gson/src/main/java/com/economic/persistgson/internal/bind/JsonTreeReader.java
index 387b29e9b..f69e6463a 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/JsonTreeReader.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.economic.persistgson.internal.bind;
 
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
+import com.economic.persistgson.JsonArray;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonNull;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonToken;
 import java.io.IOException;
 import java.io.Reader;
 import java.util.Iterator;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java b/gson/src/main/java/com/economic/persistgson/internal/bind/JsonTreeWriter.java
similarity index 94%
rename from gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java
rename to gson/src/main/java/com/economic/persistgson/internal/bind/JsonTreeWriter.java
index 51dc1f3a3..218aac15e 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/JsonTreeWriter.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
-
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.stream.JsonWriter;
+package com.economic.persistgson.internal.bind;
+
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.JsonArray;
+import com.economic.persistgson.JsonNull;
+import com.economic.persistgson.stream.JsonWriter;
 import java.io.IOException;
 import java.io.Writer;
 import java.util.ArrayList;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java b/gson/src/main/java/com/economic/persistgson/internal/bind/MapTypeAdapterFactory.java
similarity index 83%
rename from gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
rename to gson/src/main/java/com/economic/persistgson/internal/bind/MapTypeAdapterFactory.java
index 5a34a5d5f..676d2768d 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/MapTypeAdapterFactory.java
@@ -14,23 +14,24 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.economic.persistgson.internal.bind;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.internal.ConstructorConstructor;
+import com.economic.persistgson.internal.JsonReaderInternalAccess;
+import com.economic.persistgson.internal.Streams;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonToken;
+import com.economic.persistgson.stream.JsonWriter;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.JsonSyntaxException;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.internal.$Gson$Types;
+import com.economic.persistgson.internal.ObjectConstructor;
+import com.economic.persistgson.reflect.TypeToken;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.JsonReaderInternalAccess;
-import com.google.gson.internal.ObjectConstructor;
-import com.google.gson.internal.Streams;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
@@ -60,9 +61,9 @@
  * But GSON is unable to deserialize this value because the JSON string name is
  * just the {@link Object#toString() toString()} of the map key. Attempting to
  * convert the above JSON to an object fails with a parse exception:
- * <pre>com.google.gson.JsonParseException: Expecting object found: "(5,6)"
- *   at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler
- *   at com.google.gson.ObjectNavigator.navigateClassFields
+ * <pre>JsonParseException: Expecting object found: "(5,6)"
+ *   at com.economic.persistgson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler
+ *   at com.economic.persistgson.ObjectNavigator.navigateClassFields
  *   ...</pre>
  *
  * <h3>Maps as JSON arrays</h3>
@@ -107,7 +108,7 @@
   final boolean complexMapKeySerialization;
 
   public MapTypeAdapterFactory(ConstructorConstructor constructorConstructor,
-      boolean complexMapKeySerialization) {
+                               boolean complexMapKeySerialization) {
     this.constructorConstructor = constructorConstructor;
     this.complexMapKeySerialization = complexMapKeySerialization;
   }
@@ -138,7 +139,7 @@ public MapTypeAdapterFactory(ConstructorConstructor constructorConstructor,
    */
   private TypeAdapter<?> getKeyAdapter(Gson context, Type keyType) {
     return (keyType == boolean.class || keyType == Boolean.class)
-        ? TypeAdapters.BOOLEAN_AS_STRING
+        ? com.economic.persistgson.internal.bind.TypeAdapters.BOOLEAN_AS_STRING
         : context.getAdapter(TypeToken.get(keyType));
   }
 
@@ -148,12 +149,12 @@ public MapTypeAdapterFactory(ConstructorConstructor constructorConstructor,
     private final ObjectConstructor<? extends Map<K, V>> constructor;
 
     public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,
-        Type valueType, TypeAdapter<V> valueTypeAdapter,
-        ObjectConstructor<? extends Map<K, V>> constructor) {
+                   Type valueType, TypeAdapter<V> valueTypeAdapter,
+                   ObjectConstructor<? extends Map<K, V>> constructor) {
       this.keyTypeAdapter =
-        new TypeAdapterRuntimeTypeWrapper<K>(context, keyTypeAdapter, keyType);
+        new com.economic.persistgson.internal.bind.TypeAdapterRuntimeTypeWrapper<K>(context, keyTypeAdapter, keyType);
       this.valueTypeAdapter =
-        new TypeAdapterRuntimeTypeWrapper<V>(context, valueTypeAdapter, valueType);
+        new com.economic.persistgson.internal.bind.TypeAdapterRuntimeTypeWrapper<V>(context, valueTypeAdapter, valueType);
       this.constructor = constructor;
     }
 
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java b/gson/src/main/java/com/economic/persistgson/internal/bind/ObjectTypeAdapter.java
similarity index 85%
rename from gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
rename to gson/src/main/java/com/economic/persistgson/internal/bind/ObjectTypeAdapter.java
index ec42e0482..dac189c53 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/ObjectTypeAdapter.java
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
-
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.LinkedTreeMap;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+package com.economic.persistgson.internal.bind;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonToken;
+import com.economic.persistgson.stream.JsonWriter;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.internal.LinkedTreeMap;
+import com.economic.persistgson.reflect.TypeToken;
 
 import java.io.IOException;
 import java.util.ArrayList;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/economic/persistgson/internal/bind/ReflectiveTypeAdapterFactory.java
similarity index 86%
rename from gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
rename to gson/src/main/java/com/economic/persistgson/internal/bind/ReflectiveTypeAdapterFactory.java
index e51d2eceb..8cc95b702 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -14,24 +14,24 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
-
-import com.google.gson.FieldNamingStrategy;
-import com.google.gson.Gson;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.annotations.SerializedName;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.Excluder;
-import com.google.gson.internal.ObjectConstructor;
-import com.google.gson.internal.Primitives;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+package com.economic.persistgson.internal.bind;
+
+import com.economic.persistgson.FieldNamingStrategy;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.internal.ConstructorConstructor;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonToken;
+import com.economic.persistgson.JsonSyntaxException;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.annotations.JsonAdapter;
+import com.economic.persistgson.annotations.SerializedName;
+import com.economic.persistgson.internal.$Gson$Types;
+import com.economic.persistgson.internal.Excluder;
+import com.economic.persistgson.internal.ObjectConstructor;
+import com.economic.persistgson.internal.Primitives;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
@@ -51,8 +51,8 @@
   protected final JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;
 
   public ReflectiveTypeAdapterFactory(ConstructorConstructor constructorConstructor,
-      FieldNamingStrategy fieldNamingPolicy, Excluder excluder,
-      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory) {
+                                      FieldNamingStrategy fieldNamingPolicy, Excluder excluder,
+                                      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory) {
     this.constructorConstructor = constructorConstructor;
     this.fieldNamingPolicy = fieldNamingPolicy;
     this.excluder = excluder;
@@ -101,8 +101,8 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {
   }
 
   protected ReflectiveTypeAdapterFactory.BoundField createBoundField(
-      final Gson context, final Field field, final String name,
-      final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
+          final Gson context, final Field field, final String name,
+          final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
     // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
@@ -122,7 +122,7 @@ public void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
         TypeAdapter t = jsonAdapterPresent ? typeAdapter
-            : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+            : new com.economic.persistgson.internal.bind.TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
         t.write(writer, fieldValue);
       }
       @Override
diff --git a/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java b/gson/src/main/java/com/economic/persistgson/internal/bind/SqlDateTypeAdapter.java
similarity index 82%
rename from gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java
rename to gson/src/main/java/com/economic/persistgson/internal/bind/SqlDateTypeAdapter.java
index 5ec244f29..76c74e6f7 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/SqlDateTypeAdapter.java
@@ -14,16 +14,17 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.economic.persistgson.internal.bind;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonWriter;
+import com.economic.persistgson.JsonSyntaxException;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonToken;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.text.DateFormat;
 import java.text.ParseException;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java b/gson/src/main/java/com/economic/persistgson/internal/bind/TimeTypeAdapter.java
similarity index 82%
rename from gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java
rename to gson/src/main/java/com/economic/persistgson/internal/bind/TimeTypeAdapter.java
index 55d4b2f69..cb4781f27 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/TimeTypeAdapter.java
@@ -14,16 +14,17 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.economic.persistgson.internal.bind;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonSyntaxException;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonToken;
+import com.economic.persistgson.stream.JsonWriter;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.sql.Time;
 import java.text.DateFormat;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java b/gson/src/main/java/com/economic/persistgson/internal/bind/TreeTypeAdapter.java
similarity index 85%
rename from gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java
rename to gson/src/main/java/com/economic/persistgson/internal/bind/TreeTypeAdapter.java
index a5c6c5dcd..3e34926ce 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/TreeTypeAdapter.java
@@ -14,22 +14,23 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
-
-import com.google.gson.Gson;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.$Gson$Preconditions;
-import com.google.gson.internal.Streams;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+package com.economic.persistgson.internal.bind;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonDeserializationContext;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.internal.$Gson$Preconditions;
+import com.economic.persistgson.internal.Streams;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonWriter;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.reflect.TypeToken;
+
 import java.io.IOException;
 import java.lang.reflect.Type;
 
@@ -50,7 +51,7 @@
   private TypeAdapter<T> delegate;
 
   public TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deserializer,
-      Gson gson, TypeToken<T> typeToken, TypeAdapterFactory skipPast) {
+                         Gson gson, TypeToken<T> typeToken, TypeAdapterFactory skipPast) {
     this.serializer = serializer;
     this.deserializer = deserializer;
     this.gson = gson;
@@ -124,7 +125,7 @@ public static TypeAdapterFactory newTypeHierarchyFactory(
     private final JsonDeserializer<?> deserializer;
 
     SingleTypeFactory(Object typeAdapter, TypeToken<?> exactType, boolean matchRawType,
-        Class<?> hierarchyType) {
+                      Class<?> hierarchyType) {
       serializer = typeAdapter instanceof JsonSerializer
           ? (JsonSerializer<?>) typeAdapter
           : null;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java b/gson/src/main/java/com/economic/persistgson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
similarity index 88%
rename from gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
rename to gson/src/main/java/com/economic/persistgson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
index 2bf37ad0a..ceb9bb10e 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
@@ -13,17 +13,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.internal.bind;
+package com.economic.persistgson.internal.bind;
 
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
 
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonWriter;
 
 final class TypeAdapterRuntimeTypeWrapper<T> extends TypeAdapter<T> {
   private final Gson context;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java b/gson/src/main/java/com/economic/persistgson/internal/bind/TypeAdapters.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
rename to gson/src/main/java/com/economic/persistgson/internal/bind/TypeAdapters.java
index c2839bc89..a0e01bf33 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/TypeAdapters.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.economic.persistgson.internal.bind;
 
 import java.io.IOException;
 import java.math.BigDecimal;
@@ -40,22 +40,22 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicIntegerArray;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonIOException;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.SerializedName;
-import com.google.gson.internal.LazilyParsedNumber;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonArray;
+import com.economic.persistgson.JsonIOException;
+import com.economic.persistgson.JsonNull;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.internal.LazilyParsedNumber;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonToken;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonSyntaxException;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.annotations.SerializedName;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonWriter;
 
 /**
  * Type adapters for basic types.
diff --git a/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java b/gson/src/main/java/com/economic/persistgson/internal/bind/util/ISO8601Utils.java
similarity index 99%
rename from gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java
rename to gson/src/main/java/com/economic/persistgson/internal/bind/util/ISO8601Utils.java
index c931b0906..f570ec513 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/util/ISO8601Utils.java
@@ -1,4 +1,4 @@
-package com.google.gson.internal.bind.util;
+package com.economic.persistgson.internal.bind.util;
 
 import java.text.ParseException;
 import java.text.ParsePosition;
diff --git a/gson/src/main/java/com/google/gson/internal/package-info.java b/gson/src/main/java/com/economic/persistgson/internal/package-info.java
similarity index 85%
rename from gson/src/main/java/com/google/gson/internal/package-info.java
rename to gson/src/main/java/com/economic/persistgson/internal/package-info.java
index b5139b6de..ee6fb2e4f 100644
--- a/gson/src/main/java/com/google/gson/internal/package-info.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/package-info.java
@@ -4,4 +4,4 @@
  *
  * @author Inderjeet Singh, Joel Leitch, Jesse Wilson
  */
-package com.google.gson.internal;
\ No newline at end of file
+package com.economic.persistgson.internal;
\ No newline at end of file
diff --git a/gson/src/main/java/com/economic/persistgson/package-info.java b/gson/src/main/java/com/economic/persistgson/package-info.java
new file mode 100644
index 000000000..8817fe59d
--- /dev/null
+++ b/gson/src/main/java/com/economic/persistgson/package-info.java
@@ -0,0 +1,11 @@
+/**
+ * This package provides the {@link com.economic.persistgson.Gson} class to convert Json to Java and
+ * vice-versa.
+ *
+ * <p>The primary class to use is {@link com.economic.persistgson.Gson} which can be constructed with
+ * {@code new Gson()} (using default settings) or by using {@link com.economic.persistgson.GsonBuilder}
+ * (to configure various options such as using versioning and so on).</p>
+ *
+ * @author Inderjeet Singh, Joel Leitch
+ */
+package com.economic.persistgson;
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/persist/PersistObject.java b/gson/src/main/java/com/economic/persistgson/persist/PersistObject.java
similarity index 78%
rename from gson/src/main/java/com/google/gson/persist/PersistObject.java
rename to gson/src/main/java/com/economic/persistgson/persist/PersistObject.java
index 2c58a5c3b..a59748844 100644
--- a/gson/src/main/java/com/google/gson/persist/PersistObject.java
+++ b/gson/src/main/java/com/economic/persistgson/persist/PersistObject.java
@@ -1,7 +1,6 @@
-package com.google.gson.persist;
+package com.economic.persistgson.persist;
 
 import java.util.HashMap;
-import java.util.Map;
 
 /**
  * Created by Tudor Dragan on 03/05/2017.
diff --git a/gson/src/main/java/com/google/gson/persist/PersistReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.java
similarity index 79%
rename from gson/src/main/java/com/google/gson/persist/PersistReflectiveTypeAdapterFactory.java
rename to gson/src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.java
index ad4d5a3e8..20b2666f8 100644
--- a/gson/src/main/java/com/google/gson/persist/PersistReflectiveTypeAdapterFactory.java
+++ b/gson/src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.java
@@ -1,18 +1,18 @@
-package com.google.gson.persist;
+package com.economic.persistgson.persist;
 
-import com.google.gson.FieldNamingStrategy;
-import com.google.gson.Gson;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.Excluder;
-import com.google.gson.internal.ObjectConstructor;
-import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
-import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+import com.economic.persistgson.FieldNamingStrategy;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonSyntaxException;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.internal.ConstructorConstructor;
+import com.economic.persistgson.internal.Excluder;
+import com.economic.persistgson.internal.ObjectConstructor;
+import com.economic.persistgson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
+import com.economic.persistgson.internal.bind.ReflectiveTypeAdapterFactory;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonToken;
+import com.economic.persistgson.stream.JsonWriter;
 
 import java.io.IOException;
 import java.util.Map;
diff --git a/gson/src/main/java/com/google/gson/reflect/TypeToken.java b/gson/src/main/java/com/economic/persistgson/reflect/TypeToken.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/reflect/TypeToken.java
rename to gson/src/main/java/com/economic/persistgson/reflect/TypeToken.java
index 3fb8af2bc..b061c43c8 100644
--- a/gson/src/main/java/com/google/gson/reflect/TypeToken.java
+++ b/gson/src/main/java/com/economic/persistgson/reflect/TypeToken.java
@@ -14,10 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.reflect;
+package com.economic.persistgson.reflect;
+
+import com.economic.persistgson.internal.$Gson$Preconditions;
+import com.economic.persistgson.internal.$Gson$Types;
 
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.internal.$Gson$Preconditions;
 import java.lang.reflect.GenericArrayType;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
diff --git a/gson/src/main/java/com/google/gson/reflect/package-info.java b/gson/src/main/java/com/economic/persistgson/reflect/package-info.java
similarity index 77%
rename from gson/src/main/java/com/google/gson/reflect/package-info.java
rename to gson/src/main/java/com/economic/persistgson/reflect/package-info.java
index e666c4311..0a933fcc1 100644
--- a/gson/src/main/java/com/google/gson/reflect/package-info.java
+++ b/gson/src/main/java/com/economic/persistgson/reflect/package-info.java
@@ -3,4 +3,4 @@
  *  
  * @author Inderjeet Singh, Joel Leitch
  */
-package com.google.gson.reflect;
\ No newline at end of file
+package com.economic.persistgson.reflect;
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/stream/JsonReader.java b/gson/src/main/java/com/economic/persistgson/stream/JsonReader.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/stream/JsonReader.java
rename to gson/src/main/java/com/economic/persistgson/stream/JsonReader.java
index 0a10edcee..af8ca3ca1 100644
--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java
+++ b/gson/src/main/java/com/economic/persistgson/stream/JsonReader.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.economic.persistgson.stream;
+
+import com.economic.persistgson.internal.JsonReaderInternalAccess;
+import com.economic.persistgson.internal.bind.JsonTreeReader;
+import com.economic.persistgson.stream.MalformedJsonException;
 
-import com.google.gson.internal.JsonReaderInternalAccess;
-import com.google.gson.internal.bind.JsonTreeReader;
 import java.io.Closeable;
 import java.io.EOFException;
 import java.io.IOException;
@@ -419,7 +421,7 @@ public boolean hasNext() throws IOException {
   /**
    * Returns the type of the next token without consuming it.
    */
-  public JsonToken peek() throws IOException {
+  public com.economic.persistgson.stream.JsonToken peek() throws IOException {
     int p = peeked;
     if (p == PEEKED_NONE) {
       p = doPeek();
@@ -427,32 +429,32 @@ public JsonToken peek() throws IOException {
 
     switch (p) {
     case PEEKED_BEGIN_OBJECT:
-      return JsonToken.BEGIN_OBJECT;
+      return com.economic.persistgson.stream.JsonToken.BEGIN_OBJECT;
     case PEEKED_END_OBJECT:
-      return JsonToken.END_OBJECT;
+      return com.economic.persistgson.stream.JsonToken.END_OBJECT;
     case PEEKED_BEGIN_ARRAY:
-      return JsonToken.BEGIN_ARRAY;
+      return com.economic.persistgson.stream.JsonToken.BEGIN_ARRAY;
     case PEEKED_END_ARRAY:
-      return JsonToken.END_ARRAY;
+      return com.economic.persistgson.stream.JsonToken.END_ARRAY;
     case PEEKED_SINGLE_QUOTED_NAME:
     case PEEKED_DOUBLE_QUOTED_NAME:
     case PEEKED_UNQUOTED_NAME:
-      return JsonToken.NAME;
+      return com.economic.persistgson.stream.JsonToken.NAME;
     case PEEKED_TRUE:
     case PEEKED_FALSE:
-      return JsonToken.BOOLEAN;
+      return com.economic.persistgson.stream.JsonToken.BOOLEAN;
     case PEEKED_NULL:
-      return JsonToken.NULL;
+      return com.economic.persistgson.stream.JsonToken.NULL;
     case PEEKED_SINGLE_QUOTED:
     case PEEKED_DOUBLE_QUOTED:
     case PEEKED_UNQUOTED:
     case PEEKED_BUFFERED:
-      return JsonToken.STRING;
+      return com.economic.persistgson.stream.JsonToken.STRING;
     case PEEKED_LONG:
     case PEEKED_NUMBER:
-      return JsonToken.NUMBER;
+      return com.economic.persistgson.stream.JsonToken.NUMBER;
     case PEEKED_EOF:
-      return JsonToken.END_DOCUMENT;
+      return com.economic.persistgson.stream.JsonToken.END_DOCUMENT;
     default:
       throw new AssertionError();
     }
@@ -767,7 +769,7 @@ private boolean isLiteral(char c) throws IOException {
   }
 
   /**
-   * Returns the next token, a {@link com.google.gson.stream.JsonToken#NAME property name}, and
+   * Returns the next token, a {@link JsonToken#NAME property name}, and
    * consumes it.
    *
    * @throws java.io.IOException if the next token in the stream is not a property
@@ -794,7 +796,7 @@ public String nextName() throws IOException {
   }
 
   /**
-   * Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
+   * Returns the {@link JsonToken#STRING string} value of the next token,
    * consuming it. If the next token is a number, this method will return its
    * string form.
    *
@@ -830,7 +832,7 @@ public String nextString() throws IOException {
   }
 
   /**
-   * Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
+   * Returns the {@link JsonToken#BOOLEAN boolean} value of the next token,
    * consuming it.
    *
    * @throws IllegalStateException if the next token is not a boolean or if
@@ -874,7 +876,7 @@ public void nextNull() throws IOException {
   }
 
   /**
-   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
+   * Returns the {@link JsonToken#NUMBER double} value of the next token,
    * consuming it. If the next token is a string, this method will attempt to
    * parse it as a double using {@link Double#parseDouble(String)}.
    *
@@ -908,7 +910,7 @@ public double nextDouble() throws IOException {
     peeked = PEEKED_BUFFERED;
     double result = Double.parseDouble(peekedString); // don't catch this NumberFormatException.
     if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {
-      throw new MalformedJsonException(
+      throw new com.economic.persistgson.stream.MalformedJsonException(
           "JSON forbids NaN and infinities: " + result + locationString());
     }
     peekedString = null;
@@ -918,7 +920,7 @@ public double nextDouble() throws IOException {
   }
 
   /**
-   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
+   * Returns the {@link JsonToken#NUMBER long} value of the next token,
    * consuming it. If the next token is a string, this method will attempt to
    * parse it as a long. If the next token's numeric value cannot be exactly
    * represented by a Java {@code long}, this method throws.
@@ -1156,7 +1158,7 @@ private void skipUnquotedValue() throws IOException {
   }
 
   /**
-   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
+   * Returns the {@link JsonToken#NUMBER int} value of the next token,
    * consuming it. If the next token is a string, this method will attempt to
    * parse it as an int. If the next token's numeric value cannot be exactly
    * represented by a Java {@code int}, this method throws.
diff --git a/gson/src/main/java/com/google/gson/stream/JsonScope.java b/gson/src/main/java/com/economic/persistgson/stream/JsonScope.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/stream/JsonScope.java
rename to gson/src/main/java/com/economic/persistgson/stream/JsonScope.java
index da6913727..00ce79cfe 100644
--- a/gson/src/main/java/com/google/gson/stream/JsonScope.java
+++ b/gson/src/main/java/com/economic/persistgson/stream/JsonScope.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.economic.persistgson.stream;
 
 /**
  * Lexical scoping elements within a JSON reader or writer.
diff --git a/gson/src/main/java/com/google/gson/stream/JsonToken.java b/gson/src/main/java/com/economic/persistgson/stream/JsonToken.java
similarity index 73%
rename from gson/src/main/java/com/google/gson/stream/JsonToken.java
rename to gson/src/main/java/com/economic/persistgson/stream/JsonToken.java
index f1025b3f4..18a8148e6 100644
--- a/gson/src/main/java/com/google/gson/stream/JsonToken.java
+++ b/gson/src/main/java/com/economic/persistgson/stream/JsonToken.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.economic.persistgson.stream;
 
 /**
  * A structure, name or value type in a JSON-encoded string.
@@ -25,32 +25,32 @@
 public enum JsonToken {
 
   /**
-   * The opening of a JSON array. Written using {@link JsonWriter#beginArray}
+   * The opening of a JSON array. Written using {@link com.economic.persistgson.stream.JsonWriter#beginArray}
    * and read using {@link JsonReader#beginArray}.
    */
   BEGIN_ARRAY,
 
   /**
-   * The closing of a JSON array. Written using {@link JsonWriter#endArray}
+   * The closing of a JSON array. Written using {@link com.economic.persistgson.stream.JsonWriter#endArray}
    * and read using {@link JsonReader#endArray}.
    */
   END_ARRAY,
 
   /**
-   * The opening of a JSON object. Written using {@link JsonWriter#beginObject}
+   * The opening of a JSON object. Written using {@link com.economic.persistgson.stream.JsonWriter#beginObject}
    * and read using {@link JsonReader#beginObject}.
    */
   BEGIN_OBJECT,
 
   /**
-   * The closing of a JSON object. Written using {@link JsonWriter#endObject}
+   * The closing of a JSON object. Written using {@link com.economic.persistgson.stream.JsonWriter#endObject}
    * and read using {@link JsonReader#endObject}.
    */
   END_OBJECT,
 
   /**
    * A JSON property name. Within objects, tokens alternate between names and
-   * their values. Written using {@link JsonWriter#name} and read using {@link
+   * their values. Written using {@link com.economic.persistgson.stream.JsonWriter#name} and read using {@link
    * JsonReader#nextName}
    */
   NAME,
diff --git a/gson/src/main/java/com/google/gson/stream/JsonWriter.java b/gson/src/main/java/com/economic/persistgson/stream/JsonWriter.java
similarity index 93%
rename from gson/src/main/java/com/google/gson/stream/JsonWriter.java
rename to gson/src/main/java/com/economic/persistgson/stream/JsonWriter.java
index e2fc19611..332e338c6 100644
--- a/gson/src/main/java/com/google/gson/stream/JsonWriter.java
+++ b/gson/src/main/java/com/economic/persistgson/stream/JsonWriter.java
@@ -14,21 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.economic.persistgson.stream;
 
 import java.io.Closeable;
 import java.io.Flushable;
 import java.io.IOException;
 import java.io.Writer;
 
-import static com.google.gson.stream.JsonScope.DANGLING_NAME;
-import static com.google.gson.stream.JsonScope.EMPTY_ARRAY;
-import static com.google.gson.stream.JsonScope.EMPTY_DOCUMENT;
-import static com.google.gson.stream.JsonScope.EMPTY_OBJECT;
-import static com.google.gson.stream.JsonScope.NONEMPTY_ARRAY;
-import static com.google.gson.stream.JsonScope.NONEMPTY_DOCUMENT;
-import static com.google.gson.stream.JsonScope.NONEMPTY_OBJECT;
-
 /**
  * Writes a JSON (<a href="http://www.ietf.org/rfc/rfc7159.txt">RFC 7159</a>)
  * encoded value to a stream, one token at a time. The stream includes both
@@ -167,7 +159,7 @@
   private int[] stack = new int[32];
   private int stackSize = 0;
   {
-    push(EMPTY_DOCUMENT);
+    push(JsonScope.EMPTY_DOCUMENT);
   }
 
   /**
@@ -285,7 +277,7 @@ public final boolean getSerializeNulls() {
    */
   public JsonWriter beginArray() throws IOException {
     writeDeferredName();
-    return open(EMPTY_ARRAY, "[");
+    return open(JsonScope.EMPTY_ARRAY, "[");
   }
 
   /**
@@ -294,7 +286,7 @@ public JsonWriter beginArray() throws IOException {
    * @return this writer.
    */
   public JsonWriter endArray() throws IOException {
-    return close(EMPTY_ARRAY, NONEMPTY_ARRAY, "]");
+    return close(JsonScope.EMPTY_ARRAY, JsonScope.NONEMPTY_ARRAY, "]");
   }
 
   /**
@@ -305,7 +297,7 @@ public JsonWriter endArray() throws IOException {
    */
   public JsonWriter beginObject() throws IOException {
     writeDeferredName();
-    return open(EMPTY_OBJECT, "{");
+    return open(JsonScope.EMPTY_OBJECT, "{");
   }
 
   /**
@@ -314,7 +306,7 @@ public JsonWriter beginObject() throws IOException {
    * @return this writer.
    */
   public JsonWriter endObject() throws IOException {
-    return close(EMPTY_OBJECT, NONEMPTY_OBJECT, "}");
+    return close(JsonScope.EMPTY_OBJECT, JsonScope.NONEMPTY_OBJECT, "}");
   }
 
   /**
@@ -555,7 +547,7 @@ public void close() throws IOException {
     out.close();
 
     int size = stackSize;
-    if (size > 1 || size == 1 && stack[size - 1] != NONEMPTY_DOCUMENT) {
+    if (size > 1 || size == 1 && stack[size - 1] != JsonScope.NONEMPTY_DOCUMENT) {
       throw new IOException("Incomplete document");
     }
     stackSize = 0;
@@ -610,13 +602,13 @@ private void newline() throws IOException {
    */
   private void beforeName() throws IOException {
     int context = peek();
-    if (context == NONEMPTY_OBJECT) { // first in object
+    if (context == JsonScope.NONEMPTY_OBJECT) { // first in object
       out.write(',');
-    } else if (context != EMPTY_OBJECT) { // not in an object!
+    } else if (context != JsonScope.EMPTY_OBJECT) { // not in an object!
       throw new IllegalStateException("Nesting problem.");
     }
     newline();
-    replaceTop(DANGLING_NAME);
+    replaceTop(JsonScope.DANGLING_NAME);
   }
 
   /**
@@ -627,29 +619,29 @@ private void beforeName() throws IOException {
   @SuppressWarnings("fallthrough")
   private void beforeValue() throws IOException {
     switch (peek()) {
-    case NONEMPTY_DOCUMENT:
+    case JsonScope.NONEMPTY_DOCUMENT:
       if (!lenient) {
         throw new IllegalStateException(
             "JSON must have only one top-level value.");
       }
       // fall-through
-    case EMPTY_DOCUMENT: // first in document
-      replaceTop(NONEMPTY_DOCUMENT);
+    case JsonScope.EMPTY_DOCUMENT: // first in document
+      replaceTop(JsonScope.NONEMPTY_DOCUMENT);
       break;
 
-    case EMPTY_ARRAY: // first in array
-      replaceTop(NONEMPTY_ARRAY);
+    case JsonScope.EMPTY_ARRAY: // first in array
+      replaceTop(JsonScope.NONEMPTY_ARRAY);
       newline();
       break;
 
-    case NONEMPTY_ARRAY: // another in array
+    case JsonScope.NONEMPTY_ARRAY: // another in array
       out.append(',');
       newline();
       break;
 
-    case DANGLING_NAME: // value for name
+    case JsonScope.DANGLING_NAME: // value for name
       out.append(separator);
-      replaceTop(NONEMPTY_OBJECT);
+      replaceTop(JsonScope.NONEMPTY_OBJECT);
       break;
 
     default:
diff --git a/gson/src/main/java/com/google/gson/stream/MalformedJsonException.java b/gson/src/main/java/com/economic/persistgson/stream/MalformedJsonException.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/stream/MalformedJsonException.java
rename to gson/src/main/java/com/economic/persistgson/stream/MalformedJsonException.java
index 9da70ebcc..3bf0ebe6f 100644
--- a/gson/src/main/java/com/google/gson/stream/MalformedJsonException.java
+++ b/gson/src/main/java/com/economic/persistgson/stream/MalformedJsonException.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.economic.persistgson.stream;
 
 import java.io.IOException;
 
diff --git a/gson/src/main/java/com/google/gson/package-info.java b/gson/src/main/java/com/google/gson/package-info.java
deleted file mode 100644
index 428e280cf..000000000
--- a/gson/src/main/java/com/google/gson/package-info.java
+++ /dev/null
@@ -1,11 +0,0 @@
-/**
- * This package provides the {@link com.google.gson.Gson} class to convert Json to Java and
- * vice-versa.
- *
- * <p>The primary class to use is {@link com.google.gson.Gson} which can be constructed with
- * {@code new Gson()} (using default settings) or by using {@link com.google.gson.GsonBuilder}
- * (to configure various options such as using versioning and so on).</p>
- *
- * @author Inderjeet Singh, Joel Leitch
- */
-package com.google.gson;
\ No newline at end of file
diff --git a/gson/src/test/java/com/google/gson/CommentsTest.java b/gson/src/test/java/com/economic/persistgson/CommentsTest.java
similarity index 90%
rename from gson/src/test/java/com/google/gson/CommentsTest.java
rename to gson/src/test/java/com/economic/persistgson/CommentsTest.java
index 306e5aff3..feb7e0710 100644
--- a/gson/src/test/java/com/google/gson/CommentsTest.java
+++ b/gson/src/test/java/com/economic/persistgson/CommentsTest.java
@@ -14,9 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.reflect.TypeToken;
 import java.util.Arrays;
 import java.util.List;
 import junit.framework.TestCase;
diff --git a/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java b/gson/src/test/java/com/economic/persistgson/DefaultDateTypeAdapterTest.java
similarity index 55%
rename from gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
rename to gson/src/test/java/com/economic/persistgson/DefaultDateTypeAdapterTest.java
index 5ce65d748..b1801e74d 100644
--- a/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
+++ b/gson/src/test/java/com/economic/persistgson/DefaultDateTypeAdapterTest.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
+
+import com.economic.persistgson.JsonPrimitive;
 
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
@@ -24,7 +26,7 @@
 import junit.framework.TestCase;
 
 /**
- * A simple unit test for the {@link DefaultDateTypeAdapter} class.
+ * A simple unit test for the {@link com.economic.persistgson.DefaultDateTypeAdapter} class.
  *
  * @author Joel Leitch
  */
@@ -44,18 +46,18 @@ private void assertFormattingAlwaysEmitsUsLocale(Locale locale) {
     Locale defaultLocale = Locale.getDefault();
     Locale.setDefault(locale);
     try {
-      assertFormatted("Jan 1, 1970 12:00:00 AM", new DefaultDateTypeAdapter());
-      assertFormatted("1/1/70", new DefaultDateTypeAdapter(DateFormat.SHORT));
-      assertFormatted("Jan 1, 1970", new DefaultDateTypeAdapter(DateFormat.MEDIUM));
-      assertFormatted("January 1, 1970", new DefaultDateTypeAdapter(DateFormat.LONG));
+      assertFormatted("Jan 1, 1970 12:00:00 AM", new com.economic.persistgson.DefaultDateTypeAdapter());
+      assertFormatted("1/1/70", new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.SHORT));
+      assertFormatted("Jan 1, 1970", new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.MEDIUM));
+      assertFormatted("January 1, 1970", new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.LONG));
       assertFormatted("1/1/70 12:00 AM",
-          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
+          new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
       assertFormatted("Jan 1, 1970 12:00:00 AM",
-          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
+          new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
       assertFormatted("January 1, 1970 12:00:00 AM UTC",
-          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
+          new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
       assertFormatted("Thursday, January 1, 1970 12:00:00 AM UTC",
-          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
+          new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
     } finally {
       TimeZone.setDefault(defaultTimeZone);
       Locale.setDefault(defaultLocale);
@@ -68,18 +70,18 @@ public void testParsingDatesFormattedWithSystemLocale() {
     Locale defaultLocale = Locale.getDefault();
     Locale.setDefault(Locale.FRANCE);
     try {
-      assertParsed("1 janv. 1970 00:00:00", new DefaultDateTypeAdapter());
-      assertParsed("01/01/70", new DefaultDateTypeAdapter(DateFormat.SHORT));
-      assertParsed("1 janv. 1970", new DefaultDateTypeAdapter(DateFormat.MEDIUM));
-      assertParsed("1 janvier 1970", new DefaultDateTypeAdapter(DateFormat.LONG));
+      assertParsed("1 janv. 1970 00:00:00", new com.economic.persistgson.DefaultDateTypeAdapter());
+      assertParsed("01/01/70", new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.SHORT));
+      assertParsed("1 janv. 1970", new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.MEDIUM));
+      assertParsed("1 janvier 1970", new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.LONG));
       assertParsed("01/01/70 00:00",
-          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
+          new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
       assertParsed("1 janv. 1970 00:00:00",
-          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
+          new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
       assertParsed("1 janvier 1970 00:00:00 UTC",
-          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
+          new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
       assertParsed("jeudi 1 janvier 1970 00 h 00 UTC",
-          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
+          new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
     } finally {
       TimeZone.setDefault(defaultTimeZone);
       Locale.setDefault(defaultLocale);
@@ -92,18 +94,18 @@ public void testParsingDatesFormattedWithUsLocale() {
     Locale defaultLocale = Locale.getDefault();
     Locale.setDefault(Locale.US);
     try {
-      assertParsed("Jan 1, 1970 0:00:00 AM", new DefaultDateTypeAdapter());
-      assertParsed("1/1/70", new DefaultDateTypeAdapter(DateFormat.SHORT));
-      assertParsed("Jan 1, 1970", new DefaultDateTypeAdapter(DateFormat.MEDIUM));
-      assertParsed("January 1, 1970", new DefaultDateTypeAdapter(DateFormat.LONG));
+      assertParsed("Jan 1, 1970 0:00:00 AM", new com.economic.persistgson.DefaultDateTypeAdapter());
+      assertParsed("1/1/70", new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.SHORT));
+      assertParsed("Jan 1, 1970", new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.MEDIUM));
+      assertParsed("January 1, 1970", new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.LONG));
       assertParsed("1/1/70 0:00 AM",
-          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
+          new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
       assertParsed("Jan 1, 1970 0:00:00 AM",
-          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
+          new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
       assertParsed("January 1, 1970 0:00:00 AM UTC",
-          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
+          new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
       assertParsed("Thursday, January 1, 1970 0:00:00 AM UTC",
-          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
+          new com.economic.persistgson.DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
     } finally {
       TimeZone.setDefault(defaultTimeZone);
       Locale.setDefault(defaultLocale);
@@ -116,8 +118,8 @@ public void testFormatUsesDefaultTimezone() {
     Locale defaultLocale = Locale.getDefault();
     Locale.setDefault(Locale.US);
     try {
-      assertFormatted("Dec 31, 1969 4:00:00 PM", new DefaultDateTypeAdapter());
-      assertParsed("Dec 31, 1969 4:00:00 PM", new DefaultDateTypeAdapter());
+      assertFormatted("Dec 31, 1969 4:00:00 PM", new com.economic.persistgson.DefaultDateTypeAdapter());
+      assertParsed("Dec 31, 1969 4:00:00 PM", new com.economic.persistgson.DefaultDateTypeAdapter());
     } finally {
       TimeZone.setDefault(defaultTimeZone);
       Locale.setDefault(defaultLocale);
@@ -125,7 +127,7 @@ public void testFormatUsesDefaultTimezone() {
   }
 
   public void testDateDeserializationISO8601() throws Exception {
-  	DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter();
+  	com.economic.persistgson.DefaultDateTypeAdapter adapter = new com.economic.persistgson.DefaultDateTypeAdapter();
     assertParsed("1970-01-01T00:00:00.000Z", adapter);
     assertParsed("1970-01-01T00:00Z", adapter);
     assertParsed("1970-01-01T00:00:00+00:00", adapter);
@@ -135,7 +137,7 @@ public void testDateDeserializationISO8601() throws Exception {
   
   public void testDateSerialization() throws Exception {
     int dateStyle = DateFormat.LONG;
-    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle);
+    com.economic.persistgson.DefaultDateTypeAdapter dateTypeAdapter = new com.economic.persistgson.DefaultDateTypeAdapter(dateStyle);
     DateFormat formatter = DateFormat.getDateInstance(dateStyle, Locale.US);
     Date currentDate = new Date();
 
@@ -145,7 +147,7 @@ public void testDateSerialization() throws Exception {
 
   public void testDatePattern() throws Exception {
     String pattern = "yyyy-MM-dd";
-    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(pattern);
+    com.economic.persistgson.DefaultDateTypeAdapter dateTypeAdapter = new com.economic.persistgson.DefaultDateTypeAdapter(pattern);
     DateFormat formatter = new SimpleDateFormat(pattern);
     Date currentDate = new Date();
 
@@ -155,17 +157,17 @@ public void testDatePattern() throws Exception {
 
   public void testInvalidDatePattern() throws Exception {
     try {
-      new DefaultDateTypeAdapter("I am a bad Date pattern....");
+      new com.economic.persistgson.DefaultDateTypeAdapter("I am a bad Date pattern....");
       fail("Invalid date pattern should fail.");
     } catch (IllegalArgumentException expected) { }
   }
 
-  private void assertFormatted(String formatted, DefaultDateTypeAdapter adapter) {
+  private void assertFormatted(String formatted, com.economic.persistgson.DefaultDateTypeAdapter adapter) {
     assertEquals(formatted, adapter.serialize(new Date(0), Date.class, null).getAsString());
   }
 
-  private void assertParsed(String date, DefaultDateTypeAdapter  adapter) {
-    assertEquals(date, new Date(0), adapter.deserialize(new JsonPrimitive(date), Date.class, null));
+  private void assertParsed(String date, com.economic.persistgson.DefaultDateTypeAdapter adapter) {
+    assertEquals(date, new Date(0), adapter.deserialize(new com.economic.persistgson.JsonPrimitive(date), Date.class, null));
     assertEquals("ISO 8601", new Date(0), adapter.deserialize(
         new JsonPrimitive("1970-01-01T00:00:00Z"), Date.class, null));
   }
diff --git a/gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java b/gson/src/test/java/com/economic/persistgson/DefaultInetAddressTypeAdapterTest.java
similarity index 90%
rename from gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java
rename to gson/src/test/java/com/economic/persistgson/DefaultInetAddressTypeAdapterTest.java
index 6b853f5de..de0e8cac1 100644
--- a/gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java
+++ b/gson/src/test/java/com/economic/persistgson/DefaultInetAddressTypeAdapterTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 import java.net.InetAddress;
 
@@ -26,12 +26,12 @@
  * @author Joel Leitch
  */
 public class DefaultInetAddressTypeAdapterTest extends TestCase {
-  private Gson gson;
+  private com.economic.persistgson.Gson gson;
   
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson();
+    gson = new com.economic.persistgson.Gson();
   }
   
   public void testInetAddressSerializationAndDeserialization() throws Exception {
diff --git a/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java b/gson/src/test/java/com/economic/persistgson/DefaultMapJsonSerializerTest.java
similarity index 71%
rename from gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java
rename to gson/src/test/java/com/economic/persistgson/DefaultMapJsonSerializerTest.java
index 5c0619535..20a4d3bd7 100644
--- a/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java
+++ b/gson/src/test/java/com/economic/persistgson/DefaultMapJsonSerializerTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.reflect.TypeToken;
 import java.lang.reflect.Type;
 import java.util.HashMap;
 import java.util.Map;
@@ -33,19 +33,19 @@
 
   public void testEmptyMapNoTypeSerialization() {
     Map<String, String> emptyMap = new HashMap<String, String>();
-    JsonElement element = gson.toJsonTree(emptyMap, emptyMap.getClass());
-    assertTrue(element instanceof JsonObject);
-    JsonObject emptyMapJsonObject = (JsonObject) element;
+    com.economic.persistgson.JsonElement element = gson.toJsonTree(emptyMap, emptyMap.getClass());
+    assertTrue(element instanceof com.economic.persistgson.JsonObject);
+    com.economic.persistgson.JsonObject emptyMapJsonObject = (com.economic.persistgson.JsonObject) element;
     assertTrue(emptyMapJsonObject.entrySet().isEmpty());
   }
 
   public void testEmptyMapSerialization() {
     Type mapType = new TypeToken<Map<String, String>>() { }.getType();
     Map<String, String> emptyMap = new HashMap<String, String>();
-    JsonElement element = gson.toJsonTree(emptyMap, mapType);
+    com.economic.persistgson.JsonElement element = gson.toJsonTree(emptyMap, mapType);
 
-    assertTrue(element instanceof JsonObject);
-    JsonObject emptyMapJsonObject = (JsonObject) element;
+    assertTrue(element instanceof com.economic.persistgson.JsonObject);
+    com.economic.persistgson.JsonObject emptyMapJsonObject = (com.economic.persistgson.JsonObject) element;
     assertTrue(emptyMapJsonObject.entrySet().isEmpty());
   }
 
@@ -55,7 +55,7 @@ public void testNonEmptyMapSerialization() {
     String key = "key1";
     myMap.put(key, "value1");
     Gson gson = new Gson();
-    JsonElement element = gson.toJsonTree(myMap, mapType);
+    com.economic.persistgson.JsonElement element = gson.toJsonTree(myMap, mapType);
 
     assertTrue(element.isJsonObject());
     JsonObject mapJsonObject = element.getAsJsonObject();
diff --git a/gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java b/gson/src/test/java/com/economic/persistgson/ExposeAnnotationExclusionStrategyTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java
rename to gson/src/test/java/com/economic/persistgson/ExposeAnnotationExclusionStrategyTest.java
index dd8a7a926..8ae28669c 100644
--- a/gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java
+++ b/gson/src/test/java/com/economic/persistgson/ExposeAnnotationExclusionStrategyTest.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
-import com.google.gson.annotations.Expose;
+import com.economic.persistgson.annotations.Expose;
 
-import com.google.gson.internal.Excluder;
+import com.economic.persistgson.internal.Excluder;
 import junit.framework.TestCase;
 
 import java.lang.reflect.Field;
diff --git a/gson/src/test/java/com/google/gson/FieldAttributesTest.java b/gson/src/test/java/com/economic/persistgson/FieldAttributesTest.java
similarity index 85%
rename from gson/src/test/java/com/google/gson/FieldAttributesTest.java
rename to gson/src/test/java/com/economic/persistgson/FieldAttributesTest.java
index 8a9d95338..afa77d883 100644
--- a/gson/src/test/java/com/google/gson/FieldAttributesTest.java
+++ b/gson/src/test/java/com/economic/persistgson/FieldAttributesTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
@@ -25,23 +25,23 @@
 import java.util.List;
 
 /**
- * Unit tests for the {@link FieldAttributes} class.
+ * Unit tests for the {@link com.economic.persistgson.FieldAttributes} class.
  *
  * @author Inderjeet Singh
  * @author Joel Leitch
  */
 public class FieldAttributesTest extends TestCase {
-  private FieldAttributes fieldAttributes;
+  private com.economic.persistgson.FieldAttributes fieldAttributes;
 
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    fieldAttributes = new FieldAttributes(Foo.class.getField("bar"));
+    fieldAttributes = new com.economic.persistgson.FieldAttributes(Foo.class.getField("bar"));
   }
 
   public void testNullField() throws Exception {
     try {
-      new FieldAttributes(null);
+      new com.economic.persistgson.FieldAttributes(null);
       fail("Field parameter can not be null");
     } catch (NullPointerException expected) { }
   }
diff --git a/gson/src/test/java/com/google/gson/GenericArrayTypeTest.java b/gson/src/test/java/com/economic/persistgson/GenericArrayTypeTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/GenericArrayTypeTest.java
rename to gson/src/test/java/com/economic/persistgson/GenericArrayTypeTest.java
index 42acb8a2d..b6214296d 100644
--- a/gson/src/test/java/com/google/gson/GenericArrayTypeTest.java
+++ b/gson/src/test/java/com/economic/persistgson/GenericArrayTypeTest.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.internal.$Gson$Types;
+import com.economic.persistgson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/GsonBuilderTest.java b/gson/src/test/java/com/economic/persistgson/GsonBuilderTest.java
similarity index 86%
rename from gson/src/test/java/com/google/gson/GsonBuilderTest.java
rename to gson/src/test/java/com/economic/persistgson/GsonBuilderTest.java
index 73601c0e3..5164bbc79 100755
--- a/gson/src/test/java/com/google/gson/GsonBuilderTest.java
+++ b/gson/src/test/java/com/economic/persistgson/GsonBuilderTest.java
@@ -14,16 +14,19 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonWriter;
 
 import java.lang.reflect.Modifier;
 import java.lang.reflect.Type;
 
 import junit.framework.TestCase;
 
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-
 /**
  * Unit tests for {@link GsonBuilder}.
  *
diff --git a/gson/src/test/java/com/google/gson/GsonTest.java b/gson/src/test/java/com/economic/persistgson/GsonTest.java
similarity index 72%
rename from gson/src/test/java/com/google/gson/GsonTest.java
rename to gson/src/test/java/com/economic/persistgson/GsonTest.java
index fb0c00321..1654ad98e 100644
--- a/gson/src/test/java/com/google/gson/GsonTest.java
+++ b/gson/src/test/java/com/economic/persistgson/GsonTest.java
@@ -14,9 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
-import com.google.gson.internal.Excluder;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.InstanceCreator;
+import com.economic.persistgson.LongSerializationPolicy;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.internal.Excluder;
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
@@ -24,7 +28,7 @@
 import junit.framework.TestCase;
 
 /**
- * Unit tests for {@link Gson}.
+ * Unit tests for {@link com.economic.persistgson.Gson}.
  *
  * @author Ryan Harter
  */
@@ -34,14 +38,14 @@
       .excludeFieldsWithoutExposeAnnotation()
       .disableInnerClassSerialization();
 
-  private static final FieldNamingStrategy CUSTOM_FIELD_NAMING_STRATEGY = new FieldNamingStrategy() {
+  private static final com.economic.persistgson.FieldNamingStrategy CUSTOM_FIELD_NAMING_STRATEGY = new com.economic.persistgson.FieldNamingStrategy() {
     @Override public String translateName(Field f) {
       return "foo";
     }
   };
 
   public void testOverridesDefaultExcluder() {
-    Gson gson = new Gson(CUSTOM_EXCLUDER, CUSTOM_FIELD_NAMING_STRATEGY,
+    com.economic.persistgson.Gson gson = new Gson(CUSTOM_EXCLUDER, CUSTOM_FIELD_NAMING_STRATEGY,
         new HashMap<Type, InstanceCreator<?>>(), true, false, true, false,
         true, true, false, LongSerializationPolicy.DEFAULT,
         new ArrayList<TypeAdapterFactory>());
diff --git a/gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java b/gson/src/test/java/com/economic/persistgson/GsonTypeAdapterTest.java
similarity index 84%
rename from gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java
rename to gson/src/test/java/com/economic/persistgson/GsonTypeAdapterTest.java
index decb93d83..501c9c519 100644
--- a/gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java
+++ b/gson/src/test/java/com/economic/persistgson/GsonTypeAdapterTest.java
@@ -14,7 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.JsonDeserializationContext;
 
 import java.lang.reflect.Type;
 import java.math.BigInteger;
@@ -79,25 +88,25 @@ public void testTypeAdapterDoesNotAffectNonAdaptedTypes() throws Exception {
   }
 
   private static class ExceptionTypeAdapter
-      implements JsonSerializer<AtomicLong>, JsonDeserializer<AtomicLong> {
+      implements JsonSerializer<AtomicLong>, com.economic.persistgson.JsonDeserializer<AtomicLong> {
     @Override public JsonElement serialize(
         AtomicLong src, Type typeOfSrc, JsonSerializationContext context) {
       throw new IllegalStateException();
     }
     @Override public AtomicLong deserialize(
-        JsonElement json, Type typeOfT, JsonDeserializationContext context)
+        JsonElement json, Type typeOfT, com.economic.persistgson.JsonDeserializationContext context)
         throws JsonParseException {
       throw new IllegalStateException();
     }
   }
 
   private static class AtomicIntegerTypeAdapter
-      implements JsonSerializer<AtomicInteger>, JsonDeserializer<AtomicInteger> {
+      implements JsonSerializer<AtomicInteger>, com.economic.persistgson.JsonDeserializer<AtomicInteger> {
     @Override public JsonElement serialize(AtomicInteger src, Type typeOfSrc, JsonSerializationContext context) {
       return new JsonPrimitive(src.incrementAndGet());
     }
 
-    @Override public AtomicInteger deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
+    @Override public AtomicInteger deserialize(JsonElement json, Type typeOfT, com.economic.persistgson.JsonDeserializationContext context)
         throws JsonParseException {
       int intValue = json.getAsInt();
       return new AtomicInteger(--intValue);
@@ -129,7 +138,7 @@ public void testDeserializerForAbstractClass() {
 
   private void assertSerialized(String expected, Class<?> instanceType, boolean registerAbstractDeserializer,
       boolean registerAbstractHierarchyDeserializer, Object instance) {
-    JsonDeserializer<Abstract> deserializer = new JsonDeserializer<Abstract>() {
+    com.economic.persistgson.JsonDeserializer<Abstract> deserializer = new com.economic.persistgson.JsonDeserializer<Abstract>() {
       public Abstract deserialize(JsonElement json, Type typeOfT,
           JsonDeserializationContext context) throws JsonParseException {
         throw new AssertionError();
diff --git a/gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java b/gson/src/test/java/com/economic/persistgson/InnerClassExclusionStrategyTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java
rename to gson/src/test/java/com/economic/persistgson/InnerClassExclusionStrategyTest.java
index 86f7a6224..5ec9cf80f 100644
--- a/gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java
+++ b/gson/src/test/java/com/economic/persistgson/InnerClassExclusionStrategyTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
-import com.google.gson.internal.Excluder;
+import com.economic.persistgson.internal.Excluder;
 import java.lang.reflect.Field;
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/JavaSerializationTest.java b/gson/src/test/java/com/economic/persistgson/JavaSerializationTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/JavaSerializationTest.java
rename to gson/src/test/java/com/economic/persistgson/JavaSerializationTest.java
index fbaea19d4..6d8c7d3db 100644
--- a/gson/src/test/java/com/google/gson/JavaSerializationTest.java
+++ b/gson/src/test/java/com/economic/persistgson/JavaSerializationTest.java
@@ -14,9 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.reflect.TypeToken;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
diff --git a/gson/src/test/java/com/google/gson/JsonArrayTest.java b/gson/src/test/java/com/economic/persistgson/JsonArrayTest.java
similarity index 59%
rename from gson/src/test/java/com/google/gson/JsonArrayTest.java
rename to gson/src/test/java/com/economic/persistgson/JsonArrayTest.java
index b77d6f1b4..15f399e3e 100644
--- a/gson/src/test/java/com/google/gson/JsonArrayTest.java
+++ b/gson/src/test/java/com/economic/persistgson/JsonArrayTest.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 import junit.framework.TestCase;
 
-import com.google.gson.common.MoreAsserts;
+import com.economic.persistgson.common.MoreAsserts;
 
 /**
  * @author Jesse Wilson
@@ -26,23 +26,23 @@
 public final class JsonArrayTest extends TestCase {
 
   public void testEqualsOnEmptyArray() {
-    MoreAsserts.assertEqualsAndHashCode(new JsonArray(), new JsonArray());
+    MoreAsserts.assertEqualsAndHashCode(new com.economic.persistgson.JsonArray(), new com.economic.persistgson.JsonArray());
   }
 
   public void testEqualsNonEmptyArray() {
-    JsonArray a = new JsonArray();
-    JsonArray b = new JsonArray();
+    com.economic.persistgson.JsonArray a = new com.economic.persistgson.JsonArray();
+    com.economic.persistgson.JsonArray b = new com.economic.persistgson.JsonArray();
 
     assertEquals(a, a);
 
-    a.add(new JsonObject());
+    a.add(new com.economic.persistgson.JsonObject());
     assertFalse(a.equals(b));
     assertFalse(b.equals(a));
 
-    b.add(new JsonObject());
+    b.add(new com.economic.persistgson.JsonObject());
     MoreAsserts.assertEqualsAndHashCode(a, b);
 
-    a.add(new JsonObject());
+    a.add(new com.economic.persistgson.JsonObject());
     assertFalse(a.equals(b));
     assertFalse(b.equals(a));
 
@@ -52,46 +52,46 @@ public void testEqualsNonEmptyArray() {
   }
 
   public void testRemove() {
-    JsonArray array = new JsonArray();
+    com.economic.persistgson.JsonArray array = new com.economic.persistgson.JsonArray();
     try {
       array.remove(0);
       fail();
     } catch (IndexOutOfBoundsException expected) {}
-    JsonPrimitive a = new JsonPrimitive("a");
+    com.economic.persistgson.JsonPrimitive a = new com.economic.persistgson.JsonPrimitive("a");
     array.add(a);
     assertTrue(array.remove(a));
     assertFalse(array.contains(a));
     array.add(a);
-    array.add(new JsonPrimitive("b"));
+    array.add(new com.economic.persistgson.JsonPrimitive("b"));
     assertEquals("b", array.remove(1).getAsString());
     assertEquals(1, array.size());
     assertTrue(array.contains(a));
   }
 
   public void testSet() {
-    JsonArray array = new JsonArray();
+    com.economic.persistgson.JsonArray array = new com.economic.persistgson.JsonArray();
     try {
-      array.set(0, new JsonPrimitive(1));
+      array.set(0, new com.economic.persistgson.JsonPrimitive(1));
       fail();
     } catch (IndexOutOfBoundsException expected) {}
-    JsonPrimitive a = new JsonPrimitive("a");
+    com.economic.persistgson.JsonPrimitive a = new com.economic.persistgson.JsonPrimitive("a");
     array.add(a);
-    array.set(0, new JsonPrimitive("b"));
+    array.set(0, new com.economic.persistgson.JsonPrimitive("b"));
     assertEquals("b", array.get(0).getAsString());
     array.set(0, null);
     assertNull(array.get(0));
-    array.set(0, new JsonPrimitive("c"));
+    array.set(0, new com.economic.persistgson.JsonPrimitive("c"));
     assertEquals("c", array.get(0).getAsString());
     assertEquals(1, array.size());
   }
 
   public void testDeepCopy() {
-    JsonArray original = new JsonArray();
-    JsonArray firstEntry = new JsonArray();
+    com.economic.persistgson.JsonArray original = new com.economic.persistgson.JsonArray();
+    com.economic.persistgson.JsonArray firstEntry = new com.economic.persistgson.JsonArray();
     original.add(firstEntry);
 
     JsonArray copy = original.deepCopy();
-    original.add(new JsonPrimitive("y"));
+    original.add(new com.economic.persistgson.JsonPrimitive("y"));
 
     assertEquals(1, copy.size());
     firstEntry.add(new JsonPrimitive("z"));
diff --git a/gson/src/test/java/com/google/gson/JsonNullTest.java b/gson/src/test/java/com/economic/persistgson/JsonNullTest.java
similarity index 54%
rename from gson/src/test/java/com/google/gson/JsonNullTest.java
rename to gson/src/test/java/com/economic/persistgson/JsonNullTest.java
index 6157e3876..f0d4c5abf 100644
--- a/gson/src/test/java/com/google/gson/JsonNullTest.java
+++ b/gson/src/test/java/com/economic/persistgson/JsonNullTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
-import com.google.gson.common.MoreAsserts;
+import com.economic.persistgson.common.MoreAsserts;
 import junit.framework.TestCase;
 
 /**
@@ -26,15 +26,15 @@
 
   @SuppressWarnings("deprecation")
   public void testEqualsAndHashcode() {
-    MoreAsserts.assertEqualsAndHashCode(new JsonNull(), new JsonNull());
-    MoreAsserts.assertEqualsAndHashCode(new JsonNull(), JsonNull.INSTANCE);
-    MoreAsserts.assertEqualsAndHashCode(JsonNull.INSTANCE, JsonNull.INSTANCE);
+    MoreAsserts.assertEqualsAndHashCode(new com.economic.persistgson.JsonNull(), new com.economic.persistgson.JsonNull());
+    MoreAsserts.assertEqualsAndHashCode(new com.economic.persistgson.JsonNull(), com.economic.persistgson.JsonNull.INSTANCE);
+    MoreAsserts.assertEqualsAndHashCode(com.economic.persistgson.JsonNull.INSTANCE, com.economic.persistgson.JsonNull.INSTANCE);
   }
 
   public void testDeepCopy() {
     @SuppressWarnings("deprecation")
-    JsonNull a = new JsonNull();
-    assertSame(JsonNull.INSTANCE, a.deepCopy());
-    assertSame(JsonNull.INSTANCE, JsonNull.INSTANCE.deepCopy());
+    com.economic.persistgson.JsonNull a = new com.economic.persistgson.JsonNull();
+    assertSame(com.economic.persistgson.JsonNull.INSTANCE, a.deepCopy());
+    assertSame(com.economic.persistgson.JsonNull.INSTANCE, com.economic.persistgson.JsonNull.INSTANCE.deepCopy());
   }
 }
diff --git a/gson/src/test/java/com/google/gson/JsonObjectTest.java b/gson/src/test/java/com/economic/persistgson/JsonObjectTest.java
similarity index 59%
rename from gson/src/test/java/com/google/gson/JsonObjectTest.java
rename to gson/src/test/java/com/economic/persistgson/JsonObjectTest.java
index b567137da..b4d17c307 100644
--- a/gson/src/test/java/com/google/gson/JsonObjectTest.java
+++ b/gson/src/test/java/com/economic/persistgson/JsonObjectTest.java
@@ -14,30 +14,30 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
-import com.google.gson.common.MoreAsserts;
+import com.economic.persistgson.common.MoreAsserts;
 
 import junit.framework.TestCase;
 
 /**
- * Unit test for the {@link JsonObject} class.
+ * Unit test for the {@link com.economic.persistgson.JsonObject} class.
  *
  * @author Joel Leitch
  */
 public class JsonObjectTest extends TestCase {
 
   public void testAddingAndRemovingObjectProperties() throws Exception {
-    JsonObject jsonObj = new JsonObject();
+    com.economic.persistgson.JsonObject jsonObj = new com.economic.persistgson.JsonObject();
     String propertyName = "property";
     assertFalse(jsonObj.has(propertyName));
     assertNull(jsonObj.get(propertyName));
 
-    JsonPrimitive value = new JsonPrimitive("blah");
+    com.economic.persistgson.JsonPrimitive value = new com.economic.persistgson.JsonPrimitive("blah");
     jsonObj.add(propertyName, value);
     assertEquals(value, jsonObj.get(propertyName));
 
-    JsonElement removedElement = jsonObj.remove(propertyName);
+    com.economic.persistgson.JsonElement removedElement = jsonObj.remove(propertyName);
     assertEquals(value, removedElement);
     assertFalse(jsonObj.has(propertyName));
     assertNull(jsonObj.get(propertyName));
@@ -45,35 +45,35 @@ public void testAddingAndRemovingObjectProperties() throws Exception {
 
   public void testAddingNullPropertyValue() throws Exception {
     String propertyName = "property";
-    JsonObject jsonObj = new JsonObject();
+    com.economic.persistgson.JsonObject jsonObj = new com.economic.persistgson.JsonObject();
     jsonObj.add(propertyName, null);
 
     assertTrue(jsonObj.has(propertyName));
 
-    JsonElement jsonElement = jsonObj.get(propertyName);
+    com.economic.persistgson.JsonElement jsonElement = jsonObj.get(propertyName);
     assertNotNull(jsonElement);
     assertTrue(jsonElement.isJsonNull());
   }
 
   public void testAddingNullOrEmptyPropertyName() throws Exception {
-    JsonObject jsonObj = new JsonObject();
+    com.economic.persistgson.JsonObject jsonObj = new com.economic.persistgson.JsonObject();
     try {
-      jsonObj.add(null, JsonNull.INSTANCE);
+      jsonObj.add(null, com.economic.persistgson.JsonNull.INSTANCE);
       fail("Should not allow null property names.");
     } catch (NullPointerException expected) { }
 
-    jsonObj.add("", JsonNull.INSTANCE);
-    jsonObj.add("   \t", JsonNull.INSTANCE);
+    jsonObj.add("", com.economic.persistgson.JsonNull.INSTANCE);
+    jsonObj.add("   \t", com.economic.persistgson.JsonNull.INSTANCE);
   }
 
   public void testAddingBooleanProperties() throws Exception {
     String propertyName = "property";
-    JsonObject jsonObj = new JsonObject();
+    com.economic.persistgson.JsonObject jsonObj = new com.economic.persistgson.JsonObject();
     jsonObj.addProperty(propertyName, true);
 
     assertTrue(jsonObj.has(propertyName));
 
-    JsonElement jsonElement = jsonObj.get(propertyName);
+    com.economic.persistgson.JsonElement jsonElement = jsonObj.get(propertyName);
     assertNotNull(jsonElement);
     assertTrue(jsonElement.getAsBoolean());
   }
@@ -82,12 +82,12 @@ public void testAddingStringProperties() throws Exception {
     String propertyName = "property";
     String value = "blah";
 
-    JsonObject jsonObj = new JsonObject();
+    com.economic.persistgson.JsonObject jsonObj = new com.economic.persistgson.JsonObject();
     jsonObj.addProperty(propertyName, value);
 
     assertTrue(jsonObj.has(propertyName));
 
-    JsonElement jsonElement = jsonObj.get(propertyName);
+    com.economic.persistgson.JsonElement jsonElement = jsonObj.get(propertyName);
     assertNotNull(jsonElement);
     assertEquals(value, jsonElement.getAsString());
   }
@@ -96,12 +96,12 @@ public void testAddingCharacterProperties() throws Exception {
     String propertyName = "property";
     char value = 'a';
 
-    JsonObject jsonObj = new JsonObject();
+    com.economic.persistgson.JsonObject jsonObj = new com.economic.persistgson.JsonObject();
     jsonObj.addProperty(propertyName, value);
 
     assertTrue(jsonObj.has(propertyName));
 
-    JsonElement jsonElement = jsonObj.get(propertyName);
+    com.economic.persistgson.JsonElement jsonElement = jsonObj.get(propertyName);
     assertNotNull(jsonElement);
     assertEquals(String.valueOf(value), jsonElement.getAsString());
     assertEquals(value, jsonElement.getAsCharacter());
@@ -111,9 +111,9 @@ public void testAddingCharacterProperties() throws Exception {
    * From bug report http://code.google.com/p/google-gson/issues/detail?id=182
    */
   public void testPropertyWithQuotes() {
-    JsonObject jsonObj = new JsonObject();
-    jsonObj.add("a\"b", new JsonPrimitive("c\"d"));
-    String json = new Gson().toJson(jsonObj);
+    com.economic.persistgson.JsonObject jsonObj = new com.economic.persistgson.JsonObject();
+    jsonObj.add("a\"b", new com.economic.persistgson.JsonPrimitive("c\"d"));
+    String json = new com.economic.persistgson.Gson().toJson(jsonObj);
     assertEquals("{\"a\\\"b\":\"c\\\"d\"}", json);
   }
 
@@ -121,35 +121,35 @@ public void testPropertyWithQuotes() {
    * From issue 227.
    */
   public void testWritePropertyWithEmptyStringName() {
-    JsonObject jsonObj = new JsonObject();
-    jsonObj.add("", new JsonPrimitive(true));
+    com.economic.persistgson.JsonObject jsonObj = new com.economic.persistgson.JsonObject();
+    jsonObj.add("", new com.economic.persistgson.JsonPrimitive(true));
     assertEquals("{\"\":true}", new Gson().toJson(jsonObj));
 
   }
 
   public void testReadPropertyWithEmptyStringName() {
-    JsonObject jsonObj = new JsonParser().parse("{\"\":true}").getAsJsonObject();
+    com.economic.persistgson.JsonObject jsonObj = new JsonParser().parse("{\"\":true}").getAsJsonObject();
     assertEquals(true, jsonObj.get("").getAsBoolean());
   }
 
   public void testEqualsOnEmptyObject() {
-    MoreAsserts.assertEqualsAndHashCode(new JsonObject(), new JsonObject());
+    MoreAsserts.assertEqualsAndHashCode(new com.economic.persistgson.JsonObject(), new com.economic.persistgson.JsonObject());
   }
 
   public void testEqualsNonEmptyObject() {
-    JsonObject a = new JsonObject();
-    JsonObject b = new JsonObject();
+    com.economic.persistgson.JsonObject a = new com.economic.persistgson.JsonObject();
+    com.economic.persistgson.JsonObject b = new com.economic.persistgson.JsonObject();
 
     assertEquals(a, a);
 
-    a.add("foo", new JsonObject());
+    a.add("foo", new com.economic.persistgson.JsonObject());
     assertFalse(a.equals(b));
     assertFalse(b.equals(a));
 
-    b.add("foo", new JsonObject());
+    b.add("foo", new com.economic.persistgson.JsonObject());
     MoreAsserts.assertEqualsAndHashCode(a, b);
 
-    a.add("bar", new JsonObject());
+    a.add("bar", new com.economic.persistgson.JsonObject());
     assertFalse(a.equals(b));
     assertFalse(b.equals(a));
 
@@ -159,13 +159,13 @@ public void testEqualsNonEmptyObject() {
   }
 
   public void testSize() {
-    JsonObject o = new JsonObject();
+    com.economic.persistgson.JsonObject o = new com.economic.persistgson.JsonObject();
     assertEquals(0, o.size());
 
-    o.add("Hello", new JsonPrimitive(1));
+    o.add("Hello", new com.economic.persistgson.JsonPrimitive(1));
     assertEquals(1, o.size());
 
-    o.add("Hi", new JsonPrimitive(1));
+    o.add("Hi", new com.economic.persistgson.JsonPrimitive(1));
     assertEquals(2, o.size());
 
     o.remove("Hello");
@@ -173,8 +173,8 @@ public void testSize() {
   }
 
   public void testDeepCopy() {
-    JsonObject original = new JsonObject();
-    JsonArray firstEntry = new JsonArray();
+    com.economic.persistgson.JsonObject original = new com.economic.persistgson.JsonObject();
+    com.economic.persistgson.JsonArray firstEntry = new JsonArray();
     original.add("key", firstEntry);
 
     JsonObject copy = original.deepCopy();
diff --git a/gson/src/test/java/com/google/gson/JsonParserTest.java b/gson/src/test/java/com/economic/persistgson/JsonParserTest.java
similarity index 82%
rename from gson/src/test/java/com/google/gson/JsonParserTest.java
rename to gson/src/test/java/com/economic/persistgson/JsonParserTest.java
index 7efa7fd2e..0ba27421c 100644
--- a/gson/src/test/java/com/google/gson/JsonParserTest.java
+++ b/gson/src/test/java/com/economic/persistgson/JsonParserTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 import java.io.CharArrayReader;
 import java.io.CharArrayWriter;
@@ -22,9 +22,9 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.internal.Streams;
-import com.google.gson.stream.JsonReader;
+import com.economic.persistgson.common.TestTypes;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.internal.Streams;
 
 /**
  * Unit test for {@link JsonParser}
@@ -44,7 +44,7 @@ public void testParseInvalidJson() {
     try {
       parser.parse("[[]");
       fail();
-    } catch (JsonSyntaxException expected) { }
+    } catch (com.economic.persistgson.JsonSyntaxException expected) { }
   }
 
   public void testParseUnquotedStringArrayFails() {
@@ -83,7 +83,7 @@ public void testParseUnquotedMultiWordStringFails() {
     try {
       parser.parse(unquotedSentence);
       fail();
-    } catch (JsonSyntaxException expected) { }
+    } catch (com.economic.persistgson.JsonSyntaxException expected) { }
   }
 
   public void testParseMixedArray() {
@@ -91,7 +91,7 @@ public void testParseMixedArray() {
     JsonElement e = parser.parse(json);
     assertTrue(e.isJsonArray());
 
-    JsonArray  array = e.getAsJsonArray();
+    JsonArray array = e.getAsJsonArray();
     assertEquals("{}", array.get(0).toString());
     assertEquals(13, array.get(1).getAsInt());
     assertEquals("stringValue", array.get(2).getAsString());
@@ -108,9 +108,9 @@ public void testParseReader() {
   public void testReadWriteTwoObjects() throws Exception {
     Gson gson = new Gson();
     CharArrayWriter writer = new CharArrayWriter();
-    BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one");
+    TestTypes.BagOfPrimitives expectedOne = new TestTypes.BagOfPrimitives(1, 1, true, "one");
     writer.write(gson.toJson(expectedOne).toCharArray());
-    BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two");
+    TestTypes.BagOfPrimitives expectedTwo = new TestTypes.BagOfPrimitives(2, 2, false, "two");
     writer.write(gson.toJson(expectedTwo).toCharArray());
     CharArrayReader reader = new CharArrayReader(writer.toCharArray());
 
@@ -118,9 +118,9 @@ public void testReadWriteTwoObjects() throws Exception {
     parser.setLenient(true);
     JsonElement element1 = Streams.parse(parser);
     JsonElement element2 = Streams.parse(parser);
-    BagOfPrimitives actualOne = gson.fromJson(element1, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives actualOne = gson.fromJson(element1, TestTypes.BagOfPrimitives.class);
     assertEquals("one", actualOne.stringValue);
-    BagOfPrimitives actualTwo = gson.fromJson(element2, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives actualTwo = gson.fromJson(element2, TestTypes.BagOfPrimitives.class);
     assertEquals("two", actualTwo.stringValue);
   }
 }
diff --git a/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java b/gson/src/test/java/com/economic/persistgson/JsonPrimitiveTest.java
similarity index 99%
rename from gson/src/test/java/com/google/gson/JsonPrimitiveTest.java
rename to gson/src/test/java/com/economic/persistgson/JsonPrimitiveTest.java
index fa3611c93..77cf6fd64 100644
--- a/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java
+++ b/gson/src/test/java/com/economic/persistgson/JsonPrimitiveTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
-import com.google.gson.common.MoreAsserts;
+import com.economic.persistgson.common.MoreAsserts;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/JsonStreamParserTest.java b/gson/src/test/java/com/economic/persistgson/JsonStreamParserTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/JsonStreamParserTest.java
rename to gson/src/test/java/com/economic/persistgson/JsonStreamParserTest.java
index 1b40b58b6..2ecbd7a4b 100644
--- a/gson/src/test/java/com/google/gson/JsonStreamParserTest.java
+++ b/gson/src/test/java/com/economic/persistgson/JsonStreamParserTest.java
@@ -13,7 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson;
+package com.economic.persistgson;
+
+import com.economic.persistgson.JsonStreamParser;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/LongSerializationPolicyTest.java b/gson/src/test/java/com/economic/persistgson/LongSerializationPolicyTest.java
similarity index 93%
rename from gson/src/test/java/com/google/gson/LongSerializationPolicyTest.java
rename to gson/src/test/java/com/economic/persistgson/LongSerializationPolicyTest.java
index d0a063208..5cda48c7a 100644
--- a/gson/src/test/java/com/google/gson/LongSerializationPolicyTest.java
+++ b/gson/src/test/java/com/economic/persistgson/LongSerializationPolicyTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
 import junit.framework.TestCase;
 
@@ -37,7 +37,7 @@ public void testDefaultLongSerialization() throws Exception {
   }
   
   public void testDefaultLongSerializationIntegration() {
-    Gson gson = new GsonBuilder()
+    Gson gson = new com.economic.persistgson.GsonBuilder()
         .setLongSerializationPolicy(LongSerializationPolicy.DEFAULT)
         .create();
     assertEquals("[1]", gson.toJson(new long[] { 1L }, long[].class));
@@ -55,7 +55,7 @@ public void testStringLongSerialization() throws Exception {
   }
 
   public void testStringLongSerializationIntegration() {
-    Gson gson = new GsonBuilder()
+    Gson gson = new com.economic.persistgson.GsonBuilder()
         .setLongSerializationPolicy(LongSerializationPolicy.STRING)
         .create();
     assertEquals("[\"1\"]", gson.toJson(new long[] { 1L }, long[].class));
diff --git a/gson/src/test/java/com/google/gson/MixedStreamTest.java b/gson/src/test/java/com/economic/persistgson/MixedStreamTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/MixedStreamTest.java
rename to gson/src/test/java/com/economic/persistgson/MixedStreamTest.java
index 00eb4bc8a..add01367b 100644
--- a/gson/src/test/java/com/google/gson/MixedStreamTest.java
+++ b/gson/src/test/java/com/economic/persistgson/MixedStreamTest.java
@@ -14,11 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonWriter;
 
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.io.StringReader;
 import java.io.StringWriter;
diff --git a/gson/src/test/java/com/google/gson/MockExclusionStrategy.java b/gson/src/test/java/com/economic/persistgson/MockExclusionStrategy.java
similarity index 89%
rename from gson/src/test/java/com/google/gson/MockExclusionStrategy.java
rename to gson/src/test/java/com/economic/persistgson/MockExclusionStrategy.java
index 7830d8a2f..2ee46b0bb 100644
--- a/gson/src/test/java/com/google/gson/MockExclusionStrategy.java
+++ b/gson/src/test/java/com/economic/persistgson/MockExclusionStrategy.java
@@ -14,7 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
+
+import com.economic.persistgson.ExclusionStrategy;
+import com.economic.persistgson.FieldAttributes;
 
 /**
  * This is a configurable {@link ExclusionStrategy} that can be used for
diff --git a/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java b/gson/src/test/java/com/economic/persistgson/ObjectTypeAdapterTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java
rename to gson/src/test/java/com/economic/persistgson/ObjectTypeAdapterTest.java
index 2891bffca..5596df7cd 100644
--- a/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java
+++ b/gson/src/test/java/com/economic/persistgson/ObjectTypeAdapterTest.java
@@ -14,7 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.TypeAdapter;
 
 import java.util.Arrays;
 import java.util.Collections;
diff --git a/gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java b/gson/src/test/java/com/economic/persistgson/OverrideCoreTypeAdaptersTest.java
similarity index 87%
rename from gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java
rename to gson/src/test/java/com/economic/persistgson/OverrideCoreTypeAdaptersTest.java
index 79ae1698f..22f927e75 100644
--- a/gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java
+++ b/gson/src/test/java/com/economic/persistgson/OverrideCoreTypeAdaptersTest.java
@@ -14,10 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonWriter;
 
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.util.Locale;
 import junit.framework.TestCase;
@@ -46,7 +49,7 @@
   };
 
   public void testOverrideWrapperBooleanAdapter() {
-    Gson gson = new GsonBuilder()
+    Gson gson = new com.economic.persistgson.GsonBuilder()
         .registerTypeAdapter(Boolean.class, booleanAsIntAdapter)
         .create();
     assertEquals("true", gson.toJson(true, boolean.class));
@@ -57,7 +60,7 @@ public void testOverrideWrapperBooleanAdapter() {
   }
 
   public void testOverridePrimitiveBooleanAdapter() {
-    Gson gson = new GsonBuilder()
+    Gson gson = new com.economic.persistgson.GsonBuilder()
         .registerTypeAdapter(boolean.class, booleanAsIntAdapter)
         .create();
     assertEquals("1", gson.toJson(true, boolean.class));
@@ -68,7 +71,7 @@ public void testOverridePrimitiveBooleanAdapter() {
   }
 
   public void testOverrideStringAdapter() {
-    Gson gson = new GsonBuilder()
+    Gson gson = new com.economic.persistgson.GsonBuilder()
         .registerTypeAdapter(String.class, swapCaseStringAdapter)
         .create();
     assertEquals("\"HELLO\"", gson.toJson("Hello", String.class));
diff --git a/gson/src/test/java/com/google/gson/ParameterizedTypeTest.java b/gson/src/test/java/com/economic/persistgson/ParameterizedTypeTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/ParameterizedTypeTest.java
rename to gson/src/test/java/com/economic/persistgson/ParameterizedTypeTest.java
index 24d78e89d..f342f9c64 100644
--- a/gson/src/test/java/com/google/gson/ParameterizedTypeTest.java
+++ b/gson/src/test/java/com/economic/persistgson/ParameterizedTypeTest.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.internal.$Gson$Types;
+import com.economic.persistgson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java b/gson/src/test/java/com/economic/persistgson/PrimitiveTypeAdapter.java
similarity index 78%
rename from gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java
rename to gson/src/test/java/com/economic/persistgson/PrimitiveTypeAdapter.java
index fb38687b5..dd00b0095 100644
--- a/gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java
+++ b/gson/src/test/java/com/economic/persistgson/PrimitiveTypeAdapter.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
-import com.google.gson.internal.Primitives;
+import com.economic.persistgson.internal.Primitives;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -38,20 +38,20 @@
         if (value.length() == 1) {
           return (T) (Character) from.toString().charAt(0);
         }
-        throw new JsonParseException("The value: " + value + " contains more than a character.");
+        throw new com.economic.persistgson.JsonParseException("The value: " + value + " contains more than a character.");
       }
 
       try {
         Constructor<?> constructor = aClass.getConstructor(String.class);
         return (T) constructor.newInstance(from.toString());
       } catch (NoSuchMethodException e) {
-        throw new JsonParseException(e);
+        throw new com.economic.persistgson.JsonParseException(e);
       } catch (IllegalAccessException e) {
-        throw new JsonParseException(e);
+        throw new com.economic.persistgson.JsonParseException(e);
       } catch (InvocationTargetException e) {
-        throw new JsonParseException(e);
+        throw new com.economic.persistgson.JsonParseException(e);
       } catch (InstantiationException e) {
-        throw new JsonParseException(e);
+        throw new com.economic.persistgson.JsonParseException(e);
       }
     } else if (Enum.class.isAssignableFrom(to)) {
       // Case where the type being adapted to is an Enum
@@ -67,7 +67,7 @@
         throw new RuntimeException(e);
       }
     } else {
-      throw new JsonParseException("Can not adapt type " + from.getClass() + " to " + to);
+      throw new com.economic.persistgson.JsonParseException("Can not adapt type " + from.getClass() + " to " + to);
     }
   }
 }
diff --git a/gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java b/gson/src/test/java/com/economic/persistgson/VersionExclusionStrategyTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java
rename to gson/src/test/java/com/economic/persistgson/VersionExclusionStrategyTest.java
index d878850ec..98918e27b 100644
--- a/gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java
+++ b/gson/src/test/java/com/economic/persistgson/VersionExclusionStrategyTest.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.economic.persistgson;
 
-import com.google.gson.annotations.Since;
-import com.google.gson.internal.Excluder;
+import com.economic.persistgson.annotations.Since;
+import com.economic.persistgson.internal.Excluder;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/common/MoreAsserts.java b/gson/src/test/java/com/economic/persistgson/common/MoreAsserts.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/common/MoreAsserts.java
rename to gson/src/test/java/com/economic/persistgson/common/MoreAsserts.java
index 5e05832a5..4acd8163f 100644
--- a/gson/src/test/java/com/google/gson/common/MoreAsserts.java
+++ b/gson/src/test/java/com/economic/persistgson/common/MoreAsserts.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.common;
+package com.economic.persistgson.common;
 
 import junit.framework.Assert;
 
diff --git a/gson/src/test/java/com/google/gson/common/TestTypes.java b/gson/src/test/java/com/economic/persistgson/common/TestTypes.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/common/TestTypes.java
rename to gson/src/test/java/com/economic/persistgson/common/TestTypes.java
index 11d3d0abe..a7cf88d4d 100644
--- a/gson/src/test/java/com/google/gson/common/TestTypes.java
+++ b/gson/src/test/java/com/economic/persistgson/common/TestTypes.java
@@ -14,20 +14,20 @@
  * limitations under the License.
  */
 
-package com.google.gson.common;
+package com.economic.persistgson.common;
 
 import java.lang.reflect.Type;
 import java.util.Collection;
 
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.annotations.SerializedName;
+import com.economic.persistgson.JsonDeserializationContext;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.annotations.SerializedName;
 
 /**
  * Types used for testing JSON serialization and deserialization
diff --git a/gson/src/test/java/com/google/gson/functional/ArrayTest.java b/gson/src/test/java/com/economic/persistgson/functional/ArrayTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/functional/ArrayTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/ArrayTest.java
index 11388e90a..2be146928 100644
--- a/gson/src/test/java/com/google/gson/functional/ArrayTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/ArrayTest.java
@@ -14,15 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonParseException;
-import com.google.gson.common.MoreAsserts;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithObjects;
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.common.MoreAsserts;
+import com.economic.persistgson.common.TestTypes;
+import com.economic.persistgson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
@@ -98,14 +97,14 @@ public void testNullsInArrayDeserialization() {
   }
 
   public void testSingleNullInArraySerialization() {
-    BagOfPrimitives[] array = new BagOfPrimitives[1];
+    TestTypes.BagOfPrimitives[] array = new TestTypes.BagOfPrimitives[1];
     array[0] = null;
     String json = gson.toJson(array);
     assertEquals("[null]", json);
   }
 
   public void testSingleNullInArrayDeserialization() {
-    BagOfPrimitives[] array = gson.fromJson("[null]", BagOfPrimitives[].class);
+    TestTypes.BagOfPrimitives[] array = gson.fromJson("[null]", TestTypes.BagOfPrimitives[].class);
     assertNull(array[0]);
   }
 
@@ -196,8 +195,8 @@ public void testArrayOfPrimitivesAsObjectsDeserialization() throws Exception {
   }
 
   public void testObjectArrayWithNonPrimitivesSerialization() throws Exception {
-    ClassWithObjects classWithObjects = new ClassWithObjects();
-    BagOfPrimitives bagOfPrimitives = new BagOfPrimitives();
+    TestTypes.ClassWithObjects classWithObjects = new TestTypes.ClassWithObjects();
+    TestTypes.BagOfPrimitives bagOfPrimitives = new TestTypes.BagOfPrimitives();
     String classWithObjectsJson = gson.toJson(classWithObjects);
     String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives);
 
diff --git a/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java b/gson/src/test/java/com/economic/persistgson/functional/CircularReferenceTest.java
similarity index 87%
rename from gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/CircularReferenceTest.java
index d352e2418..199ea9831 100644
--- a/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/CircularReferenceTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
 import java.lang.reflect.Type;
 import java.util.ArrayList;
@@ -21,13 +21,13 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.ClassOverridingEquals;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.common.TestTypes;
 
 /**
  * Functional tests related to circular reference detection and error reporting.
@@ -57,7 +57,7 @@ public void testCircularSerialization() throws Exception {
   }
 
   public void testSelfReferenceIgnoredInSerialization() throws Exception {
-    ClassOverridingEquals objA = new ClassOverridingEquals();
+    TestTypes.ClassOverridingEquals objA = new TestTypes.ClassOverridingEquals();
     objA.ref = objA;
 
     String json = gson.toJson(objA);
@@ -80,7 +80,7 @@ public void testSelfReferenceCustomHandlerSerialization() throws Exception {
     obj.child = obj;
     Gson gson = new GsonBuilder().registerTypeAdapter(ClassWithSelfReference.class, new JsonSerializer<ClassWithSelfReference>() {
       public JsonElement serialize(ClassWithSelfReference src, Type typeOfSrc,
-          JsonSerializationContext context) {
+                                   JsonSerializationContext context) {
         JsonObject obj = new JsonObject();
         obj.addProperty("property", "value");
         obj.add("child", context.serialize(src.child));
diff --git a/gson/src/test/java/com/google/gson/functional/CollectionTest.java b/gson/src/test/java/com/economic/persistgson/functional/CollectionTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/functional/CollectionTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/CollectionTest.java
index 9a8f707b4..8f0184df3 100644
--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/CollectionTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
 import java.lang.reflect.Type;
 import java.util.ArrayList;
@@ -31,15 +31,15 @@
 import java.util.Stack;
 import java.util.Vector;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.MoreAsserts;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.common.MoreAsserts;
+import com.economic.persistgson.common.TestTypes.BagOfPrimitives;
+import com.economic.persistgson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java b/gson/src/test/java/com/economic/persistgson/functional/ConcurrencyTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/ConcurrencyTest.java
index 2dccf4b61..3271be6a2 100755
--- a/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/ConcurrencyTest.java
@@ -13,7 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutorService;
@@ -22,8 +24,6 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-
 /**
  * Tests for ensuring Gson thread-safety.
  * 
diff --git a/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java b/gson/src/test/java/com/economic/persistgson/functional/CustomDeserializerTest.java
similarity index 77%
rename from gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/CustomDeserializerTest.java
index c53db7f23..a4bbe6819 100644
--- a/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/CustomDeserializerTest.java
@@ -14,17 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.common.TestTypes.Base;
-import com.google.gson.common.TestTypes.ClassWithBaseField;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonDeserializationContext;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.common.TestTypes;
 
 import junit.framework.TestCase;
 
@@ -114,7 +113,7 @@ public void testJsonTypeFieldBasedDeserialization() {
     String json = "{field1:'abc',field2:'def',__type__:'SUB_TYPE1'}";
     Gson gson = new GsonBuilder().registerTypeAdapter(MyBase.class, new JsonDeserializer<MyBase>() {
       @Override public MyBase deserialize(JsonElement json, Type pojoType,
-          JsonDeserializationContext context) throws JsonParseException {
+                                          JsonDeserializationContext context) throws JsonParseException {
         String type = json.getAsJsonObject().get(MyBase.TYPE_ACCESS).getAsString();
         return context.deserialize(json, SubTypes.valueOf(type).getSubclass());
       }
@@ -150,52 +149,52 @@ public Type getSubclass() {
 
   public void testCustomDeserializerReturnsNullForTopLevelObject() {
     Gson gson = new GsonBuilder()
-      .registerTypeAdapter(Base.class, new JsonDeserializer<Base>() {
+      .registerTypeAdapter(TestTypes.Base.class, new JsonDeserializer<TestTypes.Base>() {
         @Override
-        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
+        public TestTypes.Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
             throws JsonParseException {
           return null;
         }
       }).create();
     String json = "{baseName:'Base',subName:'SubRevised'}";
-    Base target = gson.fromJson(json, Base.class);
+    TestTypes.Base target = gson.fromJson(json, TestTypes.Base.class);
     assertNull(target);
   }
 
   public void testCustomDeserializerReturnsNull() {
     Gson gson = new GsonBuilder()
-      .registerTypeAdapter(Base.class, new JsonDeserializer<Base>() {
+      .registerTypeAdapter(TestTypes.Base.class, new JsonDeserializer<TestTypes.Base>() {
         @Override
-        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
+        public TestTypes.Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
             throws JsonParseException {
           return null;
         }
       }).create();
     String json = "{base:{baseName:'Base',subName:'SubRevised'}}";
-    ClassWithBaseField target = gson.fromJson(json, ClassWithBaseField.class);
+    TestTypes.ClassWithBaseField target = gson.fromJson(json, TestTypes.ClassWithBaseField.class);
     assertNull(target.base);
   }
 
   public void testCustomDeserializerReturnsNullForArrayElements() {
     Gson gson = new GsonBuilder()
-      .registerTypeAdapter(Base.class, new JsonDeserializer<Base>() {
+      .registerTypeAdapter(TestTypes.Base.class, new JsonDeserializer<TestTypes.Base>() {
         @Override
-        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
+        public TestTypes.Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
             throws JsonParseException {
           return null;
         }
       }).create();
     String json = "[{baseName:'Base'},{baseName:'Base'}]";
-    Base[] target = gson.fromJson(json, Base[].class);
+    TestTypes.Base[] target = gson.fromJson(json, TestTypes.Base[].class);
     assertNull(target[0]);
     assertNull(target[1]);
   }
 
   public void testCustomDeserializerReturnsNullForArrayElementsForArrayField() {
     Gson gson = new GsonBuilder()
-      .registerTypeAdapter(Base.class, new JsonDeserializer<Base>() {
+      .registerTypeAdapter(TestTypes.Base.class, new JsonDeserializer<TestTypes.Base>() {
         @Override
-        public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
+        public TestTypes.Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
             throws JsonParseException {
           return null;
         }
@@ -207,6 +206,6 @@ public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationConte
   }
 
   private static final class ClassWithBaseArray {
-    Base[] bases;
+    TestTypes.Base[] bases;
   }
 }
diff --git a/gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java b/gson/src/test/java/com/economic/persistgson/functional/CustomSerializerTest.java
similarity index 51%
rename from gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/CustomSerializerTest.java
index c8095463a..12951b28e 100644
--- a/gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/CustomSerializerTest.java
@@ -14,21 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.Base;
-import com.google.gson.common.TestTypes.BaseSerializer;
-import com.google.gson.common.TestTypes.ClassWithBaseArrayField;
-import com.google.gson.common.TestTypes.ClassWithBaseField;
-import com.google.gson.common.TestTypes.Sub;
-import com.google.gson.common.TestTypes.SubSerializer;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonArray;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.common.TestTypes;
 
 import junit.framework.TestCase;
 
@@ -44,59 +39,59 @@
 
    public void testBaseClassSerializerInvokedForBaseClassFields() {
      Gson gson = new GsonBuilder()
-         .registerTypeAdapter(Base.class, new BaseSerializer())
-         .registerTypeAdapter(Sub.class, new SubSerializer())
+         .registerTypeAdapter(TestTypes.Base.class, new TestTypes.BaseSerializer())
+         .registerTypeAdapter(TestTypes.Sub.class, new TestTypes.SubSerializer())
          .create();
-     ClassWithBaseField target = new ClassWithBaseField(new Base());
+     TestTypes.ClassWithBaseField target = new TestTypes.ClassWithBaseField(new TestTypes.Base());
      JsonObject json = (JsonObject) gson.toJsonTree(target);
      JsonObject base = json.get("base").getAsJsonObject();
-     assertEquals(BaseSerializer.NAME, base.get(Base.SERIALIZER_KEY).getAsString());
+     assertEquals(TestTypes.BaseSerializer.NAME, base.get(TestTypes.Base.SERIALIZER_KEY).getAsString());
    }
 
    public void testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances() {
      Gson gson = new GsonBuilder()
-         .registerTypeAdapter(Base.class, new BaseSerializer())
-         .registerTypeAdapter(Sub.class, new SubSerializer())
+         .registerTypeAdapter(TestTypes.Base.class, new TestTypes.BaseSerializer())
+         .registerTypeAdapter(TestTypes.Sub.class, new TestTypes.SubSerializer())
          .create();
-     ClassWithBaseField target = new ClassWithBaseField(new Sub());
+     TestTypes.ClassWithBaseField target = new TestTypes.ClassWithBaseField(new TestTypes.Sub());
      JsonObject json = (JsonObject) gson.toJsonTree(target);
      JsonObject base = json.get("base").getAsJsonObject();
-     assertEquals(SubSerializer.NAME, base.get(Base.SERIALIZER_KEY).getAsString());
+     assertEquals(TestTypes.SubSerializer.NAME, base.get(TestTypes.Base.SERIALIZER_KEY).getAsString());
    }
 
    public void testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances() {
      Gson gson = new GsonBuilder()
-         .registerTypeAdapter(Base.class, new BaseSerializer())
-         .registerTypeAdapter(Sub.class, new SubSerializer())
+         .registerTypeAdapter(TestTypes.Base.class, new TestTypes.BaseSerializer())
+         .registerTypeAdapter(TestTypes.Sub.class, new TestTypes.SubSerializer())
          .create();
-     ClassWithBaseArrayField target = new ClassWithBaseArrayField(new Base[] {new Sub(), new Sub()});
+     TestTypes.ClassWithBaseArrayField target = new TestTypes.ClassWithBaseArrayField(new TestTypes.Base[] {new TestTypes.Sub(), new TestTypes.Sub()});
      JsonObject json = (JsonObject) gson.toJsonTree(target);
      JsonArray array = json.get("base").getAsJsonArray();
      for (JsonElement element : array) {
-       JsonElement serializerKey = element.getAsJsonObject().get(Base.SERIALIZER_KEY);
-      assertEquals(SubSerializer.NAME, serializerKey.getAsString());
+       JsonElement serializerKey = element.getAsJsonObject().get(TestTypes.Base.SERIALIZER_KEY);
+      assertEquals(TestTypes.SubSerializer.NAME, serializerKey.getAsString());
      }
    }
 
    public void testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances() {
      Gson gson = new GsonBuilder()
-         .registerTypeAdapter(Base.class, new BaseSerializer())
+         .registerTypeAdapter(TestTypes.Base.class, new TestTypes.BaseSerializer())
          .create();
-     ClassWithBaseField target = new ClassWithBaseField(new Sub());
+     TestTypes.ClassWithBaseField target = new TestTypes.ClassWithBaseField(new TestTypes.Sub());
      JsonObject json = (JsonObject) gson.toJsonTree(target);
      JsonObject base = json.get("base").getAsJsonObject();
-     assertEquals(BaseSerializer.NAME, base.get(Base.SERIALIZER_KEY).getAsString());
+     assertEquals(TestTypes.BaseSerializer.NAME, base.get(TestTypes.Base.SERIALIZER_KEY).getAsString());
    }
 
    public void testSerializerReturnsNull() {
      Gson gson = new GsonBuilder()
-       .registerTypeAdapter(Base.class, new JsonSerializer<Base>() {
-         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {
+       .registerTypeAdapter(TestTypes.Base.class, new JsonSerializer<TestTypes.Base>() {
+         public JsonElement serialize(TestTypes.Base src, Type typeOfSrc, JsonSerializationContext context) {
            return null;
          }
        })
        .create();
-       JsonElement json = gson.toJsonTree(new Base());
+       JsonElement json = gson.toJsonTree(new TestTypes.Base());
        assertTrue(json.isJsonNull());
    }
 }
diff --git a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java b/gson/src/test/java/com/economic/persistgson/functional/CustomTypeAdaptersTest.java
similarity index 83%
rename from gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/CustomTypeAdaptersTest.java
index b452849dd..86798f3f4 100644
--- a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/CustomTypeAdaptersTest.java
@@ -13,22 +13,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithCustomTypeConverter;
-import com.google.gson.reflect.TypeToken;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonDeserializationContext;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.common.TestTypes;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.InstanceCreator;
 
 import java.util.Date;
 import junit.framework.TestCase;
@@ -56,32 +55,32 @@ protected void setUp() throws Exception {
 
   public void testCustomSerializers() {
     Gson gson = builder.registerTypeAdapter(
-        ClassWithCustomTypeConverter.class, new JsonSerializer<ClassWithCustomTypeConverter>() {
-          @Override public JsonElement serialize(ClassWithCustomTypeConverter src, Type typeOfSrc,
-              JsonSerializationContext context) {
+        TestTypes.ClassWithCustomTypeConverter.class, new JsonSerializer<TestTypes.ClassWithCustomTypeConverter>() {
+          @Override public JsonElement serialize(TestTypes.ClassWithCustomTypeConverter src, Type typeOfSrc,
+                                                 JsonSerializationContext context) {
         JsonObject json = new JsonObject();
         json.addProperty("bag", 5);
         json.addProperty("value", 25);
         return json;
       }
     }).create();
-    ClassWithCustomTypeConverter target = new ClassWithCustomTypeConverter();
+    TestTypes.ClassWithCustomTypeConverter target = new TestTypes.ClassWithCustomTypeConverter();
     assertEquals("{\"bag\":5,\"value\":25}", gson.toJson(target));
   }
 
   public void testCustomDeserializers() {
     Gson gson = new GsonBuilder().registerTypeAdapter(
-        ClassWithCustomTypeConverter.class, new JsonDeserializer<ClassWithCustomTypeConverter>() {
-          @Override public ClassWithCustomTypeConverter deserialize(JsonElement json, Type typeOfT,
-              JsonDeserializationContext context) {
+        TestTypes.ClassWithCustomTypeConverter.class, new JsonDeserializer<TestTypes.ClassWithCustomTypeConverter>() {
+          @Override public TestTypes.ClassWithCustomTypeConverter deserialize(JsonElement json, Type typeOfT,
+                                                                              JsonDeserializationContext context) {
         JsonObject jsonObject = json.getAsJsonObject();
         int value = jsonObject.get("bag").getAsInt();
-        return new ClassWithCustomTypeConverter(new BagOfPrimitives(value,
+        return new TestTypes.ClassWithCustomTypeConverter(new TestTypes.BagOfPrimitives(value,
             value, false, ""), value);
       }
     }).create();
     String json = "{\"bag\":5,\"value\":25}";
-    ClassWithCustomTypeConverter target = gson.fromJson(json, ClassWithCustomTypeConverter.class);
+    TestTypes.ClassWithCustomTypeConverter target = gson.fromJson(json, TestTypes.ClassWithCustomTypeConverter.class);
     assertEquals(5, target.getBag().getIntValue());
   }
 
@@ -108,32 +107,32 @@ public void disable_testCustomDeserializersOfSelf() {
 
   public void testCustomNestedSerializers() {
     Gson gson = new GsonBuilder().registerTypeAdapter(
-        BagOfPrimitives.class, new JsonSerializer<BagOfPrimitives>() {
-          @Override public JsonElement serialize(BagOfPrimitives src, Type typeOfSrc,
-          JsonSerializationContext context) {
+        TestTypes.BagOfPrimitives.class, new JsonSerializer<TestTypes.BagOfPrimitives>() {
+          @Override public JsonElement serialize(TestTypes.BagOfPrimitives src, Type typeOfSrc,
+                                                 JsonSerializationContext context) {
         return new JsonPrimitive(6);
       }
     }).create();
-    ClassWithCustomTypeConverter target = new ClassWithCustomTypeConverter();
+    TestTypes.ClassWithCustomTypeConverter target = new TestTypes.ClassWithCustomTypeConverter();
     assertEquals("{\"bag\":6,\"value\":10}", gson.toJson(target));
   }
 
   public void testCustomNestedDeserializers() {
     Gson gson = new GsonBuilder().registerTypeAdapter(
-        BagOfPrimitives.class, new JsonDeserializer<BagOfPrimitives>() {
-          @Override public BagOfPrimitives deserialize(JsonElement json, Type typeOfT,
-          JsonDeserializationContext context) throws JsonParseException {
+        TestTypes.BagOfPrimitives.class, new JsonDeserializer<TestTypes.BagOfPrimitives>() {
+          @Override public TestTypes.BagOfPrimitives deserialize(JsonElement json, Type typeOfT,
+                                                                 JsonDeserializationContext context) throws JsonParseException {
         int value = json.getAsInt();
-        return new BagOfPrimitives(value, value, false, "");
+        return new TestTypes.BagOfPrimitives(value, value, false, "");
       }
     }).create();
     String json = "{\"bag\":7,\"value\":25}";
-    ClassWithCustomTypeConverter target = gson.fromJson(json, ClassWithCustomTypeConverter.class);
+    TestTypes.ClassWithCustomTypeConverter target = gson.fromJson(json, TestTypes.ClassWithCustomTypeConverter.class);
     assertEquals(7, target.getBag().getIntValue());
   }
 
   public void testCustomTypeAdapterDoesNotAppliesToSubClasses() {
-    Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base> () {
+    Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() {
       @Override
       public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {
         JsonObject json = new JsonObject();
@@ -150,7 +149,7 @@ public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext
   }
 
   public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() {
-    Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base> () {
+    Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() {
       @Override
       public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {
         JsonObject json = new JsonObject();
@@ -254,7 +253,7 @@ public void testCustomByteArrayDeserializerAndInstanceCreator() {
     GsonBuilder gsonBuilder = new GsonBuilder().registerTypeAdapter(byte[].class,
         new JsonDeserializer<byte[]>() {
           @Override public byte[] deserialize(JsonElement json,
-              Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+                                              Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
         String str = json.getAsString();
         byte[] data = new byte[str.length()];
         for (int i = 0; i < data.length; ++i) {
@@ -288,7 +287,7 @@ public StringHolder(String part1, String part2) {
   }
 
   private static class StringHolderTypeAdapter implements JsonSerializer<StringHolder>,
-      JsonDeserializer<StringHolder>, InstanceCreator<StringHolder> {
+          JsonDeserializer<StringHolder>, InstanceCreator<StringHolder> {
 
     @Override public StringHolder createInstance(Type type) {
       //Fill up with objects that will be thrown away
@@ -296,12 +295,12 @@ public StringHolder(String part1, String part2) {
     }
 
     @Override public StringHolder deserialize(JsonElement src, Type type,
-        JsonDeserializationContext context) {
+                                              JsonDeserializationContext context) {
       return new StringHolder(src.getAsString());
     }
 
     @Override public JsonElement serialize(StringHolder src, Type typeOfSrc,
-        JsonSerializationContext context) {
+                                           JsonSerializationContext context) {
       String contents = src.part1 + ':' + src.part2;
       return new JsonPrimitive(contents);
     }
diff --git a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java b/gson/src/test/java/com/economic/persistgson/functional/DefaultTypeAdaptersTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/DefaultTypeAdaptersTest.java
index 198667162..80c9141ee 100644
--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/DefaultTypeAdaptersTest.java
@@ -13,23 +13,24 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonArray;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonNull;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.JsonSyntaxException;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonWriter;
+import com.economic.persistgson.JsonDeserializationContext;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.reflect.TypeToken;
+
 import java.io.IOException;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Type;
@@ -479,7 +480,7 @@ public void testDateSerializationWithPatternNotOverridenByTypeAdapter() throws E
         .setDateFormat(pattern)
         .registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
           public Date deserialize(JsonElement json, Type typeOfT,
-              JsonDeserializationContext context)
+                                  JsonDeserializationContext context)
               throws JsonParseException {
             return new Date(1315806903103L);
           }
@@ -623,7 +624,7 @@ public void testJsonElementTypeMismatch() {
       gson.fromJson("\"abc\"", JsonObject.class);
       fail();
     } catch (JsonSyntaxException expected) {
-      assertEquals("Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive",
+      assertEquals("Expected a JsonObject but was JsonPrimitive",
           expected.getMessage());
     }
   }
diff --git a/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java b/gson/src/test/java/com/economic/persistgson/functional/DelegateTypeAdapterTest.java
similarity index 77%
rename from gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/DelegateTypeAdapterTest.java
index f89148e36..3712081cf 100644
--- a/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/DelegateTypeAdapterTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -21,14 +21,14 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.common.TestTypes;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonWriter;
 
 /**
  * Functional tests for {@link Gson#getDelegateAdapter(TypeAdapterFactory, TypeToken)} method.
@@ -50,12 +50,12 @@ protected void setUp() throws Exception {
   }
 
   public void testDelegateInvoked() {
-    List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();
+    List<TestTypes.BagOfPrimitives> bags = new ArrayList<TestTypes.BagOfPrimitives>();
     for (int i = 0; i < 10; ++i) {
-      bags.add(new BagOfPrimitives(i, i, i % 2 == 0, String.valueOf(i)));
+      bags.add(new TestTypes.BagOfPrimitives(i, i, i % 2 == 0, String.valueOf(i)));
     }
     String json = gson.toJson(bags);
-    bags = gson.fromJson(json, new TypeToken<List<BagOfPrimitives>>(){}.getType());
+    bags = gson.fromJson(json, new TypeToken<List<TestTypes.BagOfPrimitives>>(){}.getType());
     // 11: 1 list object, and 10 entries. stats invoked on all 5 fields
     assertEquals(51, stats.numReads);
     assertEquals(51, stats.numWrites);
diff --git a/gson/src/test/java/com/google/gson/functional/EnumTest.java b/gson/src/test/java/com/economic/persistgson/functional/EnumTest.java
similarity index 90%
rename from gson/src/test/java/com/google/gson/functional/EnumTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/EnumTest.java
index 4a9f05b59..247d1182a 100644
--- a/gson/src/test/java/com/google/gson/functional/EnumTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/EnumTest.java
@@ -14,20 +14,20 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.annotations.SerializedName;
-import com.google.gson.common.MoreAsserts;
-import com.google.gson.reflect.TypeToken;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonDeserializationContext;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.annotations.SerializedName;
+import com.economic.persistgson.common.MoreAsserts;
+import com.economic.persistgson.reflect.TypeToken;
 
 
 import java.lang.reflect.Type;
diff --git a/gson/src/test/java/com/google/gson/functional/EscapingTest.java b/gson/src/test/java/com/economic/persistgson/functional/EscapingTest.java
similarity index 77%
rename from gson/src/test/java/com/google/gson/functional/EscapingTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/EscapingTest.java
index 1581f4518..2e0003ca4 100644
--- a/gson/src/test/java/com/google/gson/functional/EscapingTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/EscapingTest.java
@@ -14,11 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.common.TestTypes;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
 import java.util.ArrayList;
 import java.util.List;
 import junit.framework.TestCase;
@@ -59,13 +60,13 @@ public void testEscapeAllHtmlCharacters() {
   }
 
   public void testEscapingObjectFields() throws Exception {
-    BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>");
+    TestTypes.BagOfPrimitives objWithPrimitives = new TestTypes.BagOfPrimitives(1L, 1, true, "test with\" <script>");
     String jsonRepresentation = gson.toJson(objWithPrimitives);
     assertFalse(jsonRepresentation.contains("<"));
     assertFalse(jsonRepresentation.contains(">"));
     assertTrue(jsonRepresentation.contains("\\\""));
 
-    BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, TestTypes.BagOfPrimitives.class);
     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson());
   }
   
@@ -73,20 +74,20 @@ public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exce
     Gson escapeHtmlGson = new GsonBuilder().create();
     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create();
     
-    BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>");
+    TestTypes.BagOfPrimitives target = new TestTypes.BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>");
     String escapedJsonForm = escapeHtmlGson.toJson(target);
     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target);
     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm));
     
-    assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class));
-    assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class));
+    assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, TestTypes.BagOfPrimitives.class));
+    assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, TestTypes.BagOfPrimitives.class));
   }
 
   public void testGsonDoubleDeserialization() {
-    BagOfPrimitives expected = new BagOfPrimitives(3L, 4, true, "value1");
+    TestTypes.BagOfPrimitives expected = new TestTypes.BagOfPrimitives(3L, 4, true, "value1");
     String json = gson.toJson(gson.toJson(expected));
     String value = gson.fromJson(json, String.class);
-    BagOfPrimitives actual = gson.fromJson(value, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives actual = gson.fromJson(value, TestTypes.BagOfPrimitives.class);
     assertEquals(expected, actual);
   }
 }
diff --git a/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java b/gson/src/test/java/com/economic/persistgson/functional/ExclusionStrategyFunctionalTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/ExclusionStrategyFunctionalTest.java
index 2eca8bb4f..390ee1e28 100644
--- a/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/ExclusionStrategyFunctionalTest.java
@@ -14,14 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.ExclusionStrategy;
-import com.google.gson.FieldAttributes;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.ExclusionStrategy;
+import com.economic.persistgson.FieldAttributes;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.JsonPrimitive;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
diff --git a/gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java b/gson/src/test/java/com/economic/persistgson/functional/ExposeFieldsTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/ExposeFieldsTest.java
index 0430ba49d..ce9220eca 100644
--- a/gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/ExposeFieldsTest.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
 import java.lang.reflect.Type;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.annotations.Expose;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.InstanceCreator;
+import com.economic.persistgson.annotations.Expose;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java b/gson/src/test/java/com/economic/persistgson/functional/FieldExclusionTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/FieldExclusionTest.java
index 080a8234f..5ff39ab48 100644
--- a/gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/FieldExclusionTest.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/FieldNamingTest.java b/gson/src/test/java/com/economic/persistgson/functional/FieldNamingTest.java
similarity index 76%
rename from gson/src/test/java/com/google/gson/functional/FieldNamingTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/FieldNamingTest.java
index 5d326af8c..5d24fe527 100644
--- a/gson/src/test/java/com/google/gson/functional/FieldNamingTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/FieldNamingTest.java
@@ -14,23 +14,17 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import static com.google.gson.FieldNamingPolicy.IDENTITY;
-import static com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
-import static com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;
-import static com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
-import static com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
-
-import com.google.gson.FieldNamingPolicy;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.annotations.SerializedName;
+import com.economic.persistgson.FieldNamingPolicy;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.annotations.SerializedName;
 import junit.framework.TestCase;
 
 public final class FieldNamingTest extends TestCase {
   public void testIdentity() {
-    Gson gson = getGsonWithNamingPolicy(IDENTITY);
+    Gson gson = getGsonWithNamingPolicy(FieldNamingPolicy.IDENTITY);
     assertEquals("{'lowerCamel':1,'UpperCamel':2,'_lowerCamelLeadingUnderscore':3," +
         "'_UpperCamelLeadingUnderscore':4,'lower_words':5,'UPPER_WORDS':6," +
         "'annotatedName':7,'lowerId':8}",
@@ -38,7 +32,7 @@ public void testIdentity() {
   }
 
   public void testUpperCamelCase() {
-    Gson gson = getGsonWithNamingPolicy(UPPER_CAMEL_CASE);
+    Gson gson = getGsonWithNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE);
     assertEquals("{'LowerCamel':1,'UpperCamel':2,'_LowerCamelLeadingUnderscore':3," +
         "'_UpperCamelLeadingUnderscore':4,'Lower_words':5,'UPPER_WORDS':6," +
         "'annotatedName':7,'LowerId':8}",
@@ -46,7 +40,7 @@ public void testUpperCamelCase() {
   }
 
   public void testUpperCamelCaseWithSpaces() {
-    Gson gson = getGsonWithNamingPolicy(UPPER_CAMEL_CASE_WITH_SPACES);
+    Gson gson = getGsonWithNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES);
     assertEquals("{'Lower Camel':1,'Upper Camel':2,'_Lower Camel Leading Underscore':3," +
         "'_ Upper Camel Leading Underscore':4,'Lower_words':5,'U P P E R_ W O R D S':6," +
         "'annotatedName':7,'Lower Id':8}",
@@ -54,7 +48,7 @@ public void testUpperCamelCaseWithSpaces() {
   }
 
   public void testLowerCaseWithUnderscores() {
-    Gson gson = getGsonWithNamingPolicy(LOWER_CASE_WITH_UNDERSCORES);
+    Gson gson = getGsonWithNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);
     assertEquals("{'lower_camel':1,'upper_camel':2,'_lower_camel_leading_underscore':3," +
         "'__upper_camel_leading_underscore':4,'lower_words':5,'u_p_p_e_r__w_o_r_d_s':6," +
         "'annotatedName':7,'lower_id':8}",
@@ -62,7 +56,7 @@ public void testLowerCaseWithUnderscores() {
   }
 
   public void testLowerCaseWithDashes() {
-    Gson gson = getGsonWithNamingPolicy(LOWER_CASE_WITH_DASHES);
+    Gson gson = getGsonWithNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES);
     assertEquals("{'lower-camel':1,'upper-camel':2,'_lower-camel-leading-underscore':3," +
         "'_-upper-camel-leading-underscore':4,'lower_words':5,'u-p-p-e-r_-w-o-r-d-s':6," +
         "'annotatedName':7,'lower-id':8}",
diff --git a/gson/src/test/java/com/google/gson/functional/InheritanceTest.java b/gson/src/test/java/com/economic/persistgson/functional/InheritanceTest.java
similarity index 68%
rename from gson/src/test/java/com/google/gson/functional/InheritanceTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/InheritanceTest.java
index b93ba0b59..b5f9002a1 100644
--- a/gson/src/test/java/com/google/gson/functional/InheritanceTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/InheritanceTest.java
@@ -13,19 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.Base;
-import com.google.gson.common.TestTypes.ClassWithBaseArrayField;
-import com.google.gson.common.TestTypes.ClassWithBaseCollectionField;
-import com.google.gson.common.TestTypes.ClassWithBaseField;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.common.TestTypes.Sub;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonArray;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.common.TestTypes;
 
 import junit.framework.TestCase;
 
@@ -55,8 +49,8 @@ protected void setUp() throws Exception {
   }
 
   public void testSubClassSerialization() throws Exception {
-    SubTypeOfNested target = new SubTypeOfNested(new BagOfPrimitives(10, 20, false, "stringValue"),
-        new BagOfPrimitives(30, 40, true, "stringValue"));
+    SubTypeOfNested target = new SubTypeOfNested(new TestTypes.BagOfPrimitives(10, 20, false, "stringValue"),
+        new TestTypes.BagOfPrimitives(30, 40, true, "stringValue"));
     assertEquals(target.getExpectedJson(), gson.toJson(target));
   }
 
@@ -70,76 +64,76 @@ public void testSubClassDeserialization() throws Exception {
   }
 
   public void testClassWithBaseFieldSerialization() {
-    ClassWithBaseField sub = new ClassWithBaseField(new Sub());
+    TestTypes.ClassWithBaseField sub = new TestTypes.ClassWithBaseField(new TestTypes.Sub());
     JsonObject json = (JsonObject) gson.toJsonTree(sub);
-    JsonElement base = json.getAsJsonObject().get(ClassWithBaseField.FIELD_KEY);
-    assertEquals(Sub.SUB_NAME, base.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString());
+    JsonElement base = json.getAsJsonObject().get(TestTypes.ClassWithBaseField.FIELD_KEY);
+    assertEquals(TestTypes.Sub.SUB_NAME, base.getAsJsonObject().get(TestTypes.Sub.SUB_FIELD_KEY).getAsString());
   }
 
   public void testClassWithBaseArrayFieldSerialization() {
-    Base[] baseClasses = new Base[]{ new Sub(), new Sub()};
-    ClassWithBaseArrayField sub = new ClassWithBaseArrayField(baseClasses);
+    TestTypes.Base[] baseClasses = new TestTypes.Base[]{ new TestTypes.Sub(), new TestTypes.Sub()};
+    TestTypes.ClassWithBaseArrayField sub = new TestTypes.ClassWithBaseArrayField(baseClasses);
     JsonObject json = gson.toJsonTree(sub).getAsJsonObject();
-    JsonArray bases = json.get(ClassWithBaseArrayField.FIELD_KEY).getAsJsonArray();
-    for (JsonElement element : bases) { 
-      assertEquals(Sub.SUB_NAME, element.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString());
+    JsonArray bases = json.get(TestTypes.ClassWithBaseArrayField.FIELD_KEY).getAsJsonArray();
+    for (JsonElement element : bases) {
+      assertEquals(TestTypes.Sub.SUB_NAME, element.getAsJsonObject().get(TestTypes.Sub.SUB_FIELD_KEY).getAsString());
     }
   }
 
   public void testClassWithBaseCollectionFieldSerialization() {
-    Collection<Base> baseClasses = new ArrayList<Base>();
-    baseClasses.add(new Sub());
-    baseClasses.add(new Sub());
-    ClassWithBaseCollectionField sub = new ClassWithBaseCollectionField(baseClasses);
+    Collection<TestTypes.Base> baseClasses = new ArrayList<TestTypes.Base>();
+    baseClasses.add(new TestTypes.Sub());
+    baseClasses.add(new TestTypes.Sub());
+    TestTypes.ClassWithBaseCollectionField sub = new TestTypes.ClassWithBaseCollectionField(baseClasses);
     JsonObject json = gson.toJsonTree(sub).getAsJsonObject();
-    JsonArray bases = json.get(ClassWithBaseArrayField.FIELD_KEY).getAsJsonArray();
-    for (JsonElement element : bases) { 
-      assertEquals(Sub.SUB_NAME, element.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString());
+    JsonArray bases = json.get(TestTypes.ClassWithBaseArrayField.FIELD_KEY).getAsJsonArray();
+    for (JsonElement element : bases) {
+      assertEquals(TestTypes.Sub.SUB_NAME, element.getAsJsonObject().get(TestTypes.Sub.SUB_FIELD_KEY).getAsString());
     }
   }
 
   public void testBaseSerializedAsSub() {
-    Base base = new Sub();
+    TestTypes.Base base = new TestTypes.Sub();
     JsonObject json = gson.toJsonTree(base).getAsJsonObject();
-    assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString());
+    assertEquals(TestTypes.Sub.SUB_NAME, json.get(TestTypes.Sub.SUB_FIELD_KEY).getAsString());
   }
 
   public void testBaseSerializedAsSubForToJsonMethod() {
-    Base base = new Sub();
+    TestTypes.Base base = new TestTypes.Sub();
     String json = gson.toJson(base);
-    assertTrue(json.contains(Sub.SUB_NAME));
+    assertTrue(json.contains(TestTypes.Sub.SUB_NAME));
   }
 
   public void testBaseSerializedAsBaseWhenSpecifiedWithExplicitType() {
-    Base base = new Sub();
-    JsonObject json = gson.toJsonTree(base, Base.class).getAsJsonObject();
-    assertEquals(Base.BASE_NAME, json.get(Base.BASE_FIELD_KEY).getAsString());
-    assertNull(json.get(Sub.SUB_FIELD_KEY));
+    TestTypes.Base base = new TestTypes.Sub();
+    JsonObject json = gson.toJsonTree(base, TestTypes.Base.class).getAsJsonObject();
+    assertEquals(TestTypes.Base.BASE_NAME, json.get(TestTypes.Base.BASE_FIELD_KEY).getAsString());
+    assertNull(json.get(TestTypes.Sub.SUB_FIELD_KEY));
   }
 
   public void testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod() {
-    Base base = new Sub();
-    String json = gson.toJson(base, Base.class);
-    assertTrue(json.contains(Base.BASE_NAME));
-    assertFalse(json.contains(Sub.SUB_FIELD_KEY));
+    TestTypes.Base base = new TestTypes.Sub();
+    String json = gson.toJson(base, TestTypes.Base.class);
+    assertTrue(json.contains(TestTypes.Base.BASE_NAME));
+    assertFalse(json.contains(TestTypes.Sub.SUB_FIELD_KEY));
   }
 
   public void testBaseSerializedAsSubWhenSpecifiedWithExplicitType() {
-    Base base = new Sub();
-    JsonObject json = gson.toJsonTree(base, Sub.class).getAsJsonObject();
-    assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString());
+    TestTypes.Base base = new TestTypes.Sub();
+    JsonObject json = gson.toJsonTree(base, TestTypes.Sub.class).getAsJsonObject();
+    assertEquals(TestTypes.Sub.SUB_NAME, json.get(TestTypes.Sub.SUB_FIELD_KEY).getAsString());
   }
 
   public void testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod() {
-    Base base = new Sub();
-    String json = gson.toJson(base, Sub.class);
-    assertTrue(json.contains(Sub.SUB_NAME));
+    TestTypes.Base base = new TestTypes.Sub();
+    String json = gson.toJson(base, TestTypes.Sub.class);
+    assertTrue(json.contains(TestTypes.Sub.SUB_NAME));
   }
 
-  private static class SubTypeOfNested extends Nested {
+  private static class SubTypeOfNested extends TestTypes.Nested {
     private final long value = 5;
 
-    public SubTypeOfNested(BagOfPrimitives primitive1, BagOfPrimitives primitive2) {
+    public SubTypeOfNested(TestTypes.BagOfPrimitives primitive1, TestTypes.BagOfPrimitives primitive2) {
       super(primitive1, primitive2);
     }
 
diff --git a/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java b/gson/src/test/java/com/economic/persistgson/functional/InstanceCreatorTest.java
similarity index 70%
rename from gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/InstanceCreatorTest.java
index aad55eeb2..5163433f4 100644
--- a/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/InstanceCreatorTest.java
@@ -14,16 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.common.TestTypes.Base;
-import com.google.gson.common.TestTypes.ClassWithBaseField;
-import com.google.gson.common.TestTypes.Sub;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.InstanceCreator;
+
+import com.economic.persistgson.common.TestTypes;
+import com.economic.persistgson.reflect.TypeToken;
 
-import com.google.gson.reflect.TypeToken;
 import java.util.ArrayList;
 import java.util.List;
 import junit.framework.TestCase;
@@ -42,47 +41,47 @@
 
   public void testInstanceCreatorReturnsBaseType() {
     Gson gson = new GsonBuilder()
-      .registerTypeAdapter(Base.class, new InstanceCreator<Base>() {
-        @Override public Base createInstance(Type type) {
-         return new Base();
+      .registerTypeAdapter(TestTypes.Base.class, new InstanceCreator<TestTypes.Base>() {
+        @Override public TestTypes.Base createInstance(Type type) {
+         return new TestTypes.Base();
        }
       })
       .create();
     String json = "{baseName:'BaseRevised',subName:'Sub'}";
-    Base base = gson.fromJson(json, Base.class);
+    TestTypes.Base base = gson.fromJson(json, TestTypes.Base.class);
     assertEquals("BaseRevised", base.baseName);
   }
 
   public void testInstanceCreatorReturnsSubTypeForTopLevelObject() {
     Gson gson = new GsonBuilder()
-    .registerTypeAdapter(Base.class, new InstanceCreator<Base>() {
-      @Override public Base createInstance(Type type) {
-        return new Sub();
+    .registerTypeAdapter(TestTypes.Base.class, new InstanceCreator<TestTypes.Base>() {
+      @Override public TestTypes.Base createInstance(Type type) {
+        return new TestTypes.Sub();
       }
     })
     .create();
 
     String json = "{baseName:'Base',subName:'SubRevised'}";
-    Base base = gson.fromJson(json, Base.class);
-    assertTrue(base instanceof Sub);
+    TestTypes.Base base = gson.fromJson(json, TestTypes.Base.class);
+    assertTrue(base instanceof TestTypes.Sub);
 
-    Sub sub = (Sub) base;
+    TestTypes.Sub sub = (TestTypes.Sub) base;
     assertFalse("SubRevised".equals(sub.subName));
-    assertEquals(Sub.SUB_NAME, sub.subName);
+    assertEquals(TestTypes.Sub.SUB_NAME, sub.subName);
   }
 
   public void testInstanceCreatorReturnsSubTypeForField() {
     Gson gson = new GsonBuilder()
-    .registerTypeAdapter(Base.class, new InstanceCreator<Base>() {
-      @Override public Base createInstance(Type type) {
-        return new Sub();
+    .registerTypeAdapter(TestTypes.Base.class, new InstanceCreator<TestTypes.Base>() {
+      @Override public TestTypes.Base createInstance(Type type) {
+        return new TestTypes.Sub();
       }
     })
     .create();
     String json = "{base:{baseName:'Base',subName:'SubRevised'}}";
-    ClassWithBaseField target = gson.fromJson(json, ClassWithBaseField.class);
-    assertTrue(target.base instanceof Sub);
-    assertEquals(Sub.SUB_NAME, ((Sub)target.base).subName);
+    TestTypes.ClassWithBaseField target = gson.fromJson(json, TestTypes.ClassWithBaseField.class);
+    assertTrue(target.base instanceof TestTypes.Sub);
+    assertEquals(TestTypes.Sub.SUB_NAME, ((TestTypes.Sub)target.base).subName);
   }
 
   // This regressed in Gson 2.0 and 2.1
diff --git a/gson/src/test/java/com/google/gson/functional/InterfaceTest.java b/gson/src/test/java/com/economic/persistgson/functional/InterfaceTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/InterfaceTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/InterfaceTest.java
index 6851f1e99..70d2e448f 100644
--- a/gson/src/test/java/com/google/gson/functional/InterfaceTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/InterfaceTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
+import com.economic.persistgson.Gson;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/InternationalizationTest.java b/gson/src/test/java/com/economic/persistgson/functional/InternationalizationTest.java
similarity index 93%
rename from gson/src/test/java/com/google/gson/functional/InternationalizationTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/InternationalizationTest.java
index 169c37a50..fbb15f99d 100644
--- a/gson/src/test/java/com/google/gson/functional/InternationalizationTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/InternationalizationTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
+import com.economic.persistgson.Gson;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java b/gson/src/test/java/com/economic/persistgson/functional/JavaUtilConcurrentAtomicTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/JavaUtilConcurrentAtomicTest.java
index 464892a3a..e5e016bd9 100644
--- a/gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/JavaUtilConcurrentAtomicTest.java
@@ -14,7 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.LongSerializationPolicy;
 
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -22,10 +26,6 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicLongArray;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.LongSerializationPolicy;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/functional/JavaUtilTest.java b/gson/src/test/java/com/economic/persistgson/functional/JavaUtilTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/JavaUtilTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/JavaUtilTest.java
index 052096533..502aae3db 100644
--- a/gson/src/test/java/com/google/gson/functional/JavaUtilTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/JavaUtilTest.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
 
 import java.util.Currency;
 import java.util.Properties;
 
-import com.google.gson.Gson;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java b/gson/src/test/java/com/economic/persistgson/functional/JsonAdapterAnnotationOnClassesTest.java
similarity index 88%
rename from gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/JsonAdapterAnnotationOnClassesTest.java
index 4288bfe3b..99b26d93d 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/JsonAdapterAnnotationOnClassesTest.java
@@ -14,30 +14,30 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonDeserializationContext;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.annotations.JsonAdapter;
+import com.economic.persistgson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.util.Locale;
 import junit.framework.TestCase;
 
 /**
- * Functional tests for the {@link com.google.gson.annotations.JsonAdapter} annotation on classes.
+ * Functional tests for the {@link JsonAdapter} annotation on classes.
  */
 public final class JsonAdapterAnnotationOnClassesTest extends TestCase {
 
@@ -89,7 +89,7 @@ public void testRegisteredAdapterOverridesJsonAdapter() {
   public void testRegisteredSerializerOverridesJsonAdapter() {
     JsonSerializer<A> serializer = new JsonSerializer<A>() {
       public JsonElement serialize(A src, Type typeOfSrc,
-          JsonSerializationContext context) {
+                                   JsonSerializationContext context) {
         return new JsonPrimitive("registeredSerializer");
       }
     };
@@ -108,7 +108,7 @@ public JsonElement serialize(A src, Type typeOfSrc,
   public void testRegisteredDeserializerOverridesJsonAdapter() {
     JsonDeserializer<A> deserializer = new JsonDeserializer<A>() {
       public A deserialize(JsonElement json, Type typeOfT,
-          JsonDeserializationContext context) throws JsonParseException {
+                           JsonDeserializationContext context) throws JsonParseException {
         return new A("registeredDeserializer");
       }
     };
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/economic/persistgson/functional/JsonAdapterAnnotationOnFieldsTest.java
similarity index 93%
rename from gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/JsonAdapterAnnotationOnFieldsTest.java
index 706fe60f8..47df14d7b 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/JsonAdapterAnnotationOnFieldsTest.java
@@ -14,25 +14,25 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.annotations.JsonAdapter;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonWriter;
 
 import junit.framework.TestCase;
 
 /**
- * Functional tests for the {@link com.google.gson.annotations.JsonAdapter} annotation on fields.
+ * Functional tests for the {@link JsonAdapter} annotation on fields.
  */
 public final class JsonAdapterAnnotationOnFieldsTest extends TestCase {
   public void testClassAnnotationAdapterTakesPrecedenceOverDefault() {
@@ -224,7 +224,7 @@ private GadgetWithOptionalPart(Part part) {
     }
   }
 
-  /** Regression test contributed through https://github.com/google/gson/issues/831 */
+  /** Regression test contributed through https://github.com.economic.persistgson/issues/831 */
   public void testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {
     Gson gson = new Gson();
     String json = gson.toJson(new GadgetWithOptionalPart(new Part("foo")));
@@ -233,7 +233,7 @@ public void testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {
     assertEquals("PartJsonFieldAnnotationAdapter", gadget.part.name);
   }
 
-  /** Regression test contributed through https://github.com/google/gson/issues/831 */
+  /** Regression test contributed through https://github.com.economic.persistgson/issues/831 */
   public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {
     Gson gson = new Gson();
     String json = gson.toJson(new GadgetWithPrimitivePart(42));
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterSerializerDeserializerTest.java b/gson/src/test/java/com/economic/persistgson/functional/JsonAdapterSerializerDeserializerTest.java
similarity index 91%
rename from gson/src/test/java/com/google/gson/functional/JsonAdapterSerializerDeserializerTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/JsonAdapterSerializerDeserializerTest.java
index 8ab4e128a..ca6c2b495 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterSerializerDeserializerTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/JsonAdapterSerializerDeserializerTest.java
@@ -14,19 +14,19 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
 import java.lang.reflect.Type;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.annotations.JsonAdapter;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonDeserializationContext;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.annotations.JsonAdapter;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/JsonArrayTest.java b/gson/src/test/java/com/economic/persistgson/functional/JsonArrayTest.java
similarity index 97%
rename from gson/src/test/java/com/google/gson/functional/JsonArrayTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/JsonArrayTest.java
index 22a479b85..0220c978a 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonArrayTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/JsonArrayTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.JsonArray;
+import com.economic.persistgson.JsonArray;
 import junit.framework.TestCase;
 
 import java.math.BigInteger;
diff --git a/gson/src/test/java/com/google/gson/functional/JsonParserTest.java b/gson/src/test/java/com/economic/persistgson/functional/JsonParserTest.java
similarity index 82%
rename from gson/src/test/java/com/google/gson/functional/JsonParserTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/JsonParserTest.java
index 44f4477cb..ca0130da0 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonParserTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/JsonParserTest.java
@@ -14,18 +14,17 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonParser;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.reflect.TypeToken;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonArray;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonParser;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.JsonSyntaxException;
+import com.economic.persistgson.common.TestTypes;
+import com.economic.persistgson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
@@ -61,7 +60,7 @@ public void testDeserializingCustomTree() {
     JsonObject obj = new JsonObject();
     obj.addProperty("stringValue", "foo");
     obj.addProperty("intValue", 11);
-    BagOfPrimitives target = gson.fromJson(obj, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives target = gson.fromJson(obj, TestTypes.BagOfPrimitives.class);
     assertEquals(11, target.intValue);
     assertEquals("foo", target.stringValue);
   }
@@ -73,7 +72,7 @@ public void testBadTypeForDeserializingCustomTree() {
     JsonArray array = new JsonArray();
     array.add(obj);
     try {
-      gson.fromJson(array, BagOfPrimitives.class);
+      gson.fromJson(array, TestTypes.BagOfPrimitives.class);
       fail("BagOfPrimitives is not an array");
     } catch (JsonParseException expected) { }
   }
@@ -87,7 +86,7 @@ public void testBadFieldTypeForCustomDeserializerCustomTree() {
     obj.add("longValue", array);
 
     try {
-      gson.fromJson(obj, BagOfPrimitives.class);
+      gson.fromJson(obj, TestTypes.BagOfPrimitives.class);
       fail("BagOfPrimitives is not an array");
     } catch (JsonParseException expected) { }
   }
@@ -104,7 +103,7 @@ public void testBadFieldTypeForDeserializingCustomTree() {
     obj.add("primitive2", array);
 
     try {
-      gson.fromJson(obj, Nested.class);
+      gson.fromJson(obj, TestTypes.Nested.class);
       fail("Nested has field BagOfPrimitives which is not an array");
     } catch (JsonParseException expected) { }
   }
@@ -115,7 +114,7 @@ public void testChangingCustomTreeAndDeserializing() {
     JsonObject obj = (JsonObject) new JsonParser().parse(json);
     obj.remove("stringValue");
     obj.addProperty("stringValue", "fooBar");
-    BagOfPrimitives target = gson.fromJson(obj, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives target = gson.fromJson(obj, TestTypes.BagOfPrimitives.class);
     assertEquals(10, target.intValue);
     assertEquals(20, target.longValue);
     assertEquals("fooBar", target.stringValue);
diff --git a/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java b/gson/src/test/java/com/economic/persistgson/functional/JsonTreeTest.java
similarity index 75%
rename from gson/src/test/java/com/google/gson/functional/JsonTreeTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/JsonTreeTest.java
index a64794030..898f0ae7c 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/JsonTreeTest.java
@@ -1,17 +1,18 @@
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.common.TestTypes;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
 import junit.framework.TestCase;
 
 /**
- * Functional tests for {@link Gson#toJsonTree(Object)} and 
+ * Functional tests for {@link Gson#toJsonTree(Object)} and
  * {@link Gson#toJsonTree(Object, java.lang.reflect.Type)}
  * 
  * @author Inderjeet Singh
@@ -27,7 +28,7 @@ protected void setUp() throws Exception {
   }
 
   public void testToJsonTree() {
-    BagOfPrimitives bag = new BagOfPrimitives(10L, 5, false, "foo");
+    TestTypes.BagOfPrimitives bag = new TestTypes.BagOfPrimitives(10L, 5, false, "foo");
     JsonElement json = gson.toJsonTree(bag);
     assertTrue(json.isJsonObject());
     JsonObject obj = json.getAsJsonObject();
@@ -41,7 +42,7 @@ public void testToJsonTree() {
 
   public void testToJsonTreeObjectType() {
     SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, "foo", 1.4F);
-    JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class);
+    JsonElement json = gson.toJsonTree(bag, TestTypes.BagOfPrimitives.class);
     assertTrue(json.isJsonObject());
     JsonObject obj = json.getAsJsonObject();
     Set<Entry<String, JsonElement>> children = obj.entrySet();
@@ -61,8 +62,8 @@ public void testJsonTreeToString() {
   }
 
   public void testJsonTreeNull() {
-    BagOfPrimitives bag = new BagOfPrimitives(10L, 5, false, null);
-    JsonObject jsonElement = (JsonObject) gson.toJsonTree(bag, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives bag = new TestTypes.BagOfPrimitives(10L, 5, false, null);
+    JsonObject jsonElement = (JsonObject) gson.toJsonTree(bag, TestTypes.BagOfPrimitives.class);
     assertFalse(jsonElement.has("stringValue"));
   }
 
@@ -78,7 +79,7 @@ private void assertContains(JsonObject json, JsonPrimitive child) {
     fail();
   }
   
-  private static class SubTypeOfBagOfPrimitives extends BagOfPrimitives {
+  private static class SubTypeOfBagOfPrimitives extends TestTypes.BagOfPrimitives {
     @SuppressWarnings("unused")
     float f = 1.2F;
     public SubTypeOfBagOfPrimitives(long l, int i, boolean b, String string, float f) {
diff --git a/gson/src/test/java/com/google/gson/functional/LeniencyTest.java b/gson/src/test/java/com/economic/persistgson/functional/LeniencyTest.java
similarity index 87%
rename from gson/src/test/java/com/google/gson/functional/LeniencyTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/LeniencyTest.java
index 6b5375e4b..7e65efa20 100644
--- a/gson/src/test/java/com/google/gson/functional/LeniencyTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/LeniencyTest.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.reflect.TypeToken;
 import java.util.List;
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java b/gson/src/test/java/com/economic/persistgson/functional/MapAsArrayTypeAdapterTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/MapAsArrayTypeAdapterTest.java
index c7cfcdf9f..6480fd312 100644
--- a/gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/MapAsArrayTypeAdapterTest.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonSyntaxException;
+import com.economic.persistgson.reflect.TypeToken;
 import java.lang.reflect.Type;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
diff --git a/gson/src/test/java/com/google/gson/functional/MapTest.java b/gson/src/test/java/com/economic/persistgson/functional/MapTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/functional/MapTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/MapTest.java
index 154ecf558..0ceb56dea 100755
--- a/gson/src/test/java/com/google/gson/functional/MapTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/MapTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
 import java.lang.reflect.Type;
 import java.util.Collection;
@@ -28,20 +28,20 @@
 import java.util.concurrent.ConcurrentNavigableMap;
 import java.util.concurrent.ConcurrentSkipListMap;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonParser;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.common.TestTypes;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.InstanceCreator;
+import com.economic.persistgson.JsonArray;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonParser;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.JsonSyntaxException;
+import com.economic.persistgson.common.TestTypes;
+import com.economic.persistgson.internal.$Gson$Types;
+import com.economic.persistgson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
@@ -300,7 +300,7 @@ public void testCustomSerializerForSpecificMapType() {
     Gson gson = new GsonBuilder()
         .registerTypeAdapter(type, new JsonSerializer<Map<String, Long>>() {
           public JsonElement serialize(Map<String, Long> src, Type typeOfSrc,
-              JsonSerializationContext context) {
+                                       JsonSerializationContext context) {
             JsonArray array = new JsonArray();
             for (long value : src.values()) {
               array.add(new JsonPrimitive(value));
@@ -494,7 +494,7 @@ public final void testInterfaceTypeMapWithSerializer() {
 
     JsonSerializer<TestTypes.Base> baseTypeAdapter = new JsonSerializer<TestTypes.Base>() {
       public JsonElement serialize(TestTypes.Base src, Type typeOfSrc,
-          JsonSerializationContext context) {
+                                   JsonSerializationContext context) {
         return baseTypeJsonElement;
       }
     };
diff --git a/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java b/gson/src/test/java/com/economic/persistgson/functional/MoreSpecificTypeSerializationTest.java
similarity index 97%
rename from gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/MoreSpecificTypeSerializationTest.java
index 7ecbffc84..dfc634252 100644
--- a/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/MoreSpecificTypeSerializationTest.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonObject;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonObject;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java b/gson/src/test/java/com/economic/persistgson/functional/NamingPolicyTest.java
similarity index 81%
rename from gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/NamingPolicyTest.java
index c3c0be1de..1ed23809f 100644
--- a/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/NamingPolicyTest.java
@@ -13,15 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.FieldNamingPolicy;
-import com.google.gson.FieldNamingStrategy;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.annotations.SerializedName;
-import com.google.gson.common.TestTypes.ClassWithSerializedNameFields;
-import com.google.gson.common.TestTypes.StringWrapper;
+import com.economic.persistgson.FieldNamingPolicy;
+import com.economic.persistgson.FieldNamingStrategy;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.annotations.SerializedName;
+import com.economic.persistgson.common.TestTypes;
 
 import junit.framework.TestCase;
 
@@ -44,7 +43,7 @@ protected void setUp() throws Exception {
 
   public void testGsonWithNonDefaultFieldNamingPolicySerialization() {
     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();
-    StringWrapper target = new StringWrapper("blah");
+    TestTypes.StringWrapper target = new TestTypes.StringWrapper("blah");
     assertEquals("{\"SomeConstantStringInstanceField\":\""
         + target.someConstantStringInstanceField + "\"}", gson.toJson(target));
   }
@@ -52,13 +51,13 @@ public void testGsonWithNonDefaultFieldNamingPolicySerialization() {
   public void testGsonWithNonDefaultFieldNamingPolicyDeserialiation() {
     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();
     String target = "{\"SomeConstantStringInstanceField\":\"someValue\"}";
-    StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class);
+    TestTypes.StringWrapper deserializedObject = gson.fromJson(target, TestTypes.StringWrapper.class);
     assertEquals("someValue", deserializedObject.someConstantStringInstanceField);
   }
 
   public void testGsonWithLowerCaseDashPolicySerialization() {
     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create();
-    StringWrapper target = new StringWrapper("blah");
+    TestTypes.StringWrapper target = new TestTypes.StringWrapper("blah");
     assertEquals("{\"some-constant-string-instance-field\":\""
         + target.someConstantStringInstanceField + "\"}", gson.toJson(target));
   }
@@ -66,14 +65,14 @@ public void testGsonWithLowerCaseDashPolicySerialization() {
   public void testGsonWithLowerCaseDashPolicyDeserialiation() {
     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create();
     String target = "{\"some-constant-string-instance-field\":\"someValue\"}";
-    StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class);
+    TestTypes.StringWrapper deserializedObject = gson.fromJson(target, TestTypes.StringWrapper.class);
     assertEquals("someValue", deserializedObject.someConstantStringInstanceField);
   }
 
   public void testGsonWithLowerCaseUnderscorePolicySerialization() {
     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
         .create();
-    StringWrapper target = new StringWrapper("blah");
+    TestTypes.StringWrapper target = new TestTypes.StringWrapper("blah");
     assertEquals("{\"some_constant_string_instance_field\":\""
         + target.someConstantStringInstanceField + "\"}", gson.toJson(target));
   }
@@ -82,22 +81,22 @@ public void testGsonWithLowerCaseUnderscorePolicyDeserialiation() {
     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
         .create();
     String target = "{\"some_constant_string_instance_field\":\"someValue\"}";
-    StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class);
+    TestTypes.StringWrapper deserializedObject = gson.fromJson(target, TestTypes.StringWrapper.class);
     assertEquals("someValue", deserializedObject.someConstantStringInstanceField);
   }
 
   public void testGsonWithSerializedNameFieldNamingPolicySerialization() {
     Gson gson = builder.create();
-    ClassWithSerializedNameFields expected = new ClassWithSerializedNameFields(5, 6);
+    TestTypes.ClassWithSerializedNameFields expected = new TestTypes.ClassWithSerializedNameFields(5, 6);
     String actual = gson.toJson(expected);
     assertEquals(expected.getExpectedJson(), actual);
   }
 
   public void testGsonWithSerializedNameFieldNamingPolicyDeserialization() {
     Gson gson = builder.create();
-    ClassWithSerializedNameFields expected = new ClassWithSerializedNameFields(5, 7);
-    ClassWithSerializedNameFields actual =
-        gson.fromJson(expected.getExpectedJson(), ClassWithSerializedNameFields.class);
+    TestTypes.ClassWithSerializedNameFields expected = new TestTypes.ClassWithSerializedNameFields(5, 7);
+    TestTypes.ClassWithSerializedNameFields actual =
+        gson.fromJson(expected.getExpectedJson(), TestTypes.ClassWithSerializedNameFields.class);
     assertEquals(expected.f, actual.f);
   }
 
@@ -114,7 +113,7 @@ public void testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerializati
   public void testGsonWithUpperCamelCaseSpacesPolicySerialiation() {
     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES)
         .create();
-    StringWrapper target = new StringWrapper("blah");
+    TestTypes.StringWrapper target = new TestTypes.StringWrapper("blah");
     assertEquals("{\"Some Constant String Instance Field\":\""
         + target.someConstantStringInstanceField + "\"}", gson.toJson(target));
   }
@@ -123,7 +122,7 @@ public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() {
     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES)
         .create();
     String target = "{\"Some Constant String Instance Field\":\"someValue\"}";
-    StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class);
+    TestTypes.StringWrapper deserializedObject = gson.fromJson(target, TestTypes.StringWrapper.class);
     assertEquals("someValue", deserializedObject.someConstantStringInstanceField);
   }
 
diff --git a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java b/gson/src/test/java/com/economic/persistgson/functional/NullObjectAndFieldTest.java
similarity index 84%
rename from gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/NullObjectAndFieldTest.java
index 7939a8c85..58feebd1a 100755
--- a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/NullObjectAndFieldTest.java
@@ -14,19 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithObjects;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonDeserializationContext;
+import com.economic.persistgson.JsonNull;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.common.TestTypes;
 
 import junit.framework.TestCase;
 
@@ -65,7 +64,7 @@ public void testTopLevelNullObjectDeserialization() throws Exception {
 
   public void testExplicitSerializationOfNulls() {
     Gson gson = gsonBuilder.create();
-    ClassWithObjects target = new ClassWithObjects(null);
+    TestTypes.ClassWithObjects target = new TestTypes.ClassWithObjects(null);
     String actual = gson.toJson(target);
     String expected = "{\"bag\":null}";
     assertEquals(expected, actual);
@@ -73,7 +72,7 @@ public void testExplicitSerializationOfNulls() {
 
   public void testExplicitDeserializationOfNulls() throws Exception {
     Gson gson = gsonBuilder.create();
-    ClassWithObjects target = gson.fromJson("{\"bag\":null}", ClassWithObjects.class);
+    TestTypes.ClassWithObjects target = gson.fromJson("{\"bag\":null}", TestTypes.ClassWithObjects.class);
     assertNull(target.bag);
   }
   
@@ -119,9 +118,9 @@ public void testExplicitSerializationOfNullStringMembers() {
   }
 
   public void testCustomSerializationOfNulls() {
-    gsonBuilder.registerTypeAdapter(ClassWithObjects.class, new ClassWithObjectsSerializer());
+    gsonBuilder.registerTypeAdapter(TestTypes.ClassWithObjects.class, new ClassWithObjectsSerializer());
     Gson gson = gsonBuilder.create();
-    ClassWithObjects target = new ClassWithObjects(new BagOfPrimitives());
+    TestTypes.ClassWithObjects target = new TestTypes.ClassWithObjects(new TestTypes.BagOfPrimitives());
     String actual = gson.toJson(target);
     String expected = "{\"bag\":null}";
     assertEquals(expected, actual);
@@ -191,9 +190,9 @@ public ClassWithInitializedMembers() {
     Collection<String> col;
   }
   
-  private static class ClassWithObjectsSerializer implements JsonSerializer<ClassWithObjects> {
-    @Override public JsonElement serialize(ClassWithObjects src, Type typeOfSrc,
-        JsonSerializationContext context) {
+  private static class ClassWithObjectsSerializer implements JsonSerializer<TestTypes.ClassWithObjects> {
+    @Override public JsonElement serialize(TestTypes.ClassWithObjects src, Type typeOfSrc,
+                                           JsonSerializationContext context) {
       JsonObject obj = new JsonObject();
       obj.add("bag", JsonNull.INSTANCE);
       return obj;
diff --git a/gson/src/test/java/com/google/gson/functional/ObjectTest.java b/gson/src/test/java/com/economic/persistgson/functional/ObjectTest.java
similarity index 76%
rename from gson/src/test/java/com/google/gson/functional/ObjectTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/ObjectTest.java
index de1219a6a..6dde5f507 100644
--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/ObjectTest.java
@@ -14,26 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.ArrayOfObjects;
-import com.google.gson.common.TestTypes.BagOfPrimitiveWrappers;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithArray;
-import com.google.gson.common.TestTypes.ClassWithNoFields;
-import com.google.gson.common.TestTypes.ClassWithObjects;
-import com.google.gson.common.TestTypes.ClassWithTransientFields;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.common.TestTypes.PrimitiveArray;
-import com.google.gson.reflect.TypeToken;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.InstanceCreator;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.common.TestTypes;
+import com.economic.persistgson.reflect.TypeToken;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -71,7 +63,7 @@ protected void tearDown() throws Exception {
   }
   public void testJsonInSingleQuotesDeserialization() {
     String json = "{'stringValue':'no message','intValue':10,'longValue':20}";
-    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives target = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals("no message", target.stringValue);
     assertEquals(10, target.intValue);
     assertEquals(20, target.longValue);
@@ -79,45 +71,45 @@ public void testJsonInSingleQuotesDeserialization() {
 
   public void testJsonInMixedQuotesDeserialization() {
     String json = "{\"stringValue\":'no message','intValue':10,'longValue':20}";
-    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives target = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals("no message", target.stringValue);
     assertEquals(10, target.intValue);
     assertEquals(20, target.longValue);
   }
 
   public void testBagOfPrimitivesSerialization() throws Exception {
-    BagOfPrimitives target = new BagOfPrimitives(10, 20, false, "stringValue");
+    TestTypes.BagOfPrimitives target = new TestTypes.BagOfPrimitives(10, 20, false, "stringValue");
     assertEquals(target.getExpectedJson(), gson.toJson(target));
   }
 
   public void testBagOfPrimitivesDeserialization() throws Exception {
-    BagOfPrimitives src = new BagOfPrimitives(10, 20, false, "stringValue");
+    TestTypes.BagOfPrimitives src = new TestTypes.BagOfPrimitives(10, 20, false, "stringValue");
     String json = src.getExpectedJson();
-    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives target = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals(json, target.getExpectedJson());
   }
 
   public void testBagOfPrimitiveWrappersSerialization() throws Exception {
-    BagOfPrimitiveWrappers target = new BagOfPrimitiveWrappers(10L, 20, false);
+    TestTypes.BagOfPrimitiveWrappers target = new TestTypes.BagOfPrimitiveWrappers(10L, 20, false);
     assertEquals(target.getExpectedJson(), gson.toJson(target));
   }
 
   public void testBagOfPrimitiveWrappersDeserialization() throws Exception {
-    BagOfPrimitiveWrappers target = new BagOfPrimitiveWrappers(10L, 20, false);
+    TestTypes.BagOfPrimitiveWrappers target = new TestTypes.BagOfPrimitiveWrappers(10L, 20, false);
     String jsonString = target.getExpectedJson();
-    target = gson.fromJson(jsonString, BagOfPrimitiveWrappers.class);
+    target = gson.fromJson(jsonString, TestTypes.BagOfPrimitiveWrappers.class);
     assertEquals(jsonString, target.getExpectedJson());
   }
 
   public void testClassWithTransientFieldsSerialization() throws Exception {
-    ClassWithTransientFields<Long> target = new ClassWithTransientFields<Long>(1L);
+    TestTypes.ClassWithTransientFields<Long> target = new TestTypes.ClassWithTransientFields<Long>(1L);
     assertEquals(target.getExpectedJson(), gson.toJson(target));
   }
 
   @SuppressWarnings("rawtypes")
   public void testClassWithTransientFieldsDeserialization() throws Exception {
     String json = "{\"longValue\":[1]}";
-    ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class);
+    TestTypes.ClassWithTransientFields target = gson.fromJson(json, TestTypes.ClassWithTransientFields.class);
     assertEquals(json, target.getExpectedJson());
   }
 
@@ -125,24 +117,24 @@ public void testClassWithTransientFieldsDeserialization() throws Exception {
   public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored()
       throws Exception {
     String json = "{\"transientLongValue\":1,\"longValue\":[1]}";
-    ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class);
+    TestTypes.ClassWithTransientFields target = gson.fromJson(json, TestTypes.ClassWithTransientFields.class);
     assertFalse(target.transientLongValue != 1);
   }
 
   public void testClassWithNoFieldsSerialization() throws Exception {
-    assertEquals("{}", gson.toJson(new ClassWithNoFields()));
+    assertEquals("{}", gson.toJson(new TestTypes.ClassWithNoFields()));
   }
 
   public void testClassWithNoFieldsDeserialization() throws Exception {
     String json = "{}";
-    ClassWithNoFields target = gson.fromJson(json, ClassWithNoFields.class);
-    ClassWithNoFields expected = new ClassWithNoFields();
+    TestTypes.ClassWithNoFields target = gson.fromJson(json, TestTypes.ClassWithNoFields.class);
+    TestTypes.ClassWithNoFields expected = new TestTypes.ClassWithNoFields();
     assertEquals(expected, target);
   }
 
   public void testNestedSerialization() throws Exception {
-    Nested target = new Nested(new BagOfPrimitives(10, 20, false, "stringValue"),
-       new BagOfPrimitives(30, 40, true, "stringValue"));
+    TestTypes.Nested target = new TestTypes.Nested(new TestTypes.BagOfPrimitives(10, 20, false, "stringValue"),
+       new TestTypes.BagOfPrimitives(30, 40, true, "stringValue"));
     assertEquals(target.getExpectedJson(), gson.toJson(target));
   }
 
@@ -150,7 +142,7 @@ public void testNestedDeserialization() throws Exception {
     String json = "{\"primitive1\":{\"longValue\":10,\"intValue\":20,\"booleanValue\":false,"
         + "\"stringValue\":\"stringValue\"},\"primitive2\":{\"longValue\":30,\"intValue\":40,"
         + "\"booleanValue\":true,\"stringValue\":\"stringValue\"}}";
-    Nested target = gson.fromJson(json, Nested.class);
+    TestTypes.Nested target = gson.fromJson(json, TestTypes.Nested.class);
     assertEquals(json, target.getExpectedJson());
   }
   public void testNullSerialization() throws Exception {
@@ -177,25 +169,25 @@ public void testNullDeserialization() throws Exception {
   }
 
   public void testNullFieldsSerialization() throws Exception {
-    Nested target = new Nested(new BagOfPrimitives(10, 20, false, "stringValue"), null);
+    TestTypes.Nested target = new TestTypes.Nested(new TestTypes.BagOfPrimitives(10, 20, false, "stringValue"), null);
     assertEquals(target.getExpectedJson(), gson.toJson(target));
   }
 
   public void testNullFieldsDeserialization() throws Exception {
     String json = "{\"primitive1\":{\"longValue\":10,\"intValue\":20,\"booleanValue\":false"
         + ",\"stringValue\":\"stringValue\"}}";
-    Nested target = gson.fromJson(json, Nested.class);
+    TestTypes.Nested target = gson.fromJson(json, TestTypes.Nested.class);
     assertEquals(json, target.getExpectedJson());
   }
 
   public void testArrayOfObjectsSerialization() throws Exception {
-    ArrayOfObjects target = new ArrayOfObjects();
+    TestTypes.ArrayOfObjects target = new TestTypes.ArrayOfObjects();
     assertEquals(target.getExpectedJson(), gson.toJson(target));
   }
 
   public void testArrayOfObjectsDeserialization() throws Exception {
-    String json = new ArrayOfObjects().getExpectedJson();
-    ArrayOfObjects target = gson.fromJson(json, ArrayOfObjects.class);
+    String json = new TestTypes.ArrayOfObjects().getExpectedJson();
+    TestTypes.ArrayOfObjects target = gson.fromJson(json, TestTypes.ArrayOfObjects.class);
     assertEquals(json, target.getExpectedJson());
   }
 
@@ -211,13 +203,13 @@ public void testArrayOfArraysDeserialization() throws Exception {
   }
 
   public void testArrayOfObjectsAsFields() throws Exception {
-    ClassWithObjects classWithObjects = new ClassWithObjects();
-    BagOfPrimitives bagOfPrimitives = new BagOfPrimitives();
+    TestTypes.ClassWithObjects classWithObjects = new TestTypes.ClassWithObjects();
+    TestTypes.BagOfPrimitives bagOfPrimitives = new TestTypes.BagOfPrimitives();
     String stringValue = "someStringValueInArray";
     String classWithObjectsJson = gson.toJson(classWithObjects);
     String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives);
 
-    ClassWithArray classWithArray = new ClassWithArray(
+    TestTypes.ClassWithArray classWithArray = new TestTypes.ClassWithArray(
         new Object[] { stringValue, classWithObjects, bagOfPrimitives });
     String json = gson.toJson(classWithArray);
 
@@ -231,7 +223,7 @@ public void testArrayOfObjectsAsFields() throws Exception {
    */
   public void testNullArraysDeserialization() throws Exception {
     String json = "{\"array\": null}";
-    ClassWithArray target = gson.fromJson(json, ClassWithArray.class);
+    TestTypes.ClassWithArray target = gson.fromJson(json, TestTypes.ClassWithArray.class);
     assertNull(target.array);
   }
 
@@ -240,7 +232,7 @@ public void testNullArraysDeserialization() throws Exception {
    */
   public void testNullObjectFieldsDeserialization() throws Exception {
     String json = "{\"bag\": null}";
-    ClassWithObjects target = gson.fromJson(json, ClassWithObjects.class);
+    TestTypes.ClassWithObjects target = gson.fromJson(json, TestTypes.ClassWithObjects.class);
     assertNull(target.bag);
   }
 
@@ -257,7 +249,7 @@ public void testEmptyCollectionInAnObjectDeserialization() throws Exception {
 
   public void testPrimitiveArrayInAnObjectDeserialization() throws Exception {
     String json = "{\"longArray\":[0,1,2,3,4,5,6,7,8,9]}";
-    PrimitiveArray target = gson.fromJson(json, PrimitiveArray.class);
+    TestTypes.PrimitiveArray target = gson.fromJson(json, TestTypes.PrimitiveArray.class);
     assertEquals(json, target.getExpectedJson());
   }
 
@@ -266,8 +258,8 @@ public void testPrimitiveArrayInAnObjectDeserialization() throws Exception {
    */
   public void testNullPrimitiveFieldsDeserialization() throws Exception {
     String json = "{\"longValue\":null}";
-    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);
-    assertEquals(BagOfPrimitives.DEFAULT_VALUE, target.longValue);
+    TestTypes.BagOfPrimitives target = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
+    assertEquals(TestTypes.BagOfPrimitives.DEFAULT_VALUE, target.longValue);
   }
 
   public void testEmptyCollectionInAnObjectSerialization() throws Exception {
@@ -282,28 +274,28 @@ public void testPrivateNoArgConstructorDeserialization() throws Exception {
   }
 
   public void testAnonymousLocalClassesSerialization() throws Exception {
-    assertEquals("null", gson.toJson(new ClassWithNoFields() {
+    assertEquals("null", gson.toJson(new TestTypes.ClassWithNoFields() {
       // empty anonymous class
     }));
   }
 
   public void testAnonymousLocalClassesCustomSerialization() throws Exception {
     gson = new GsonBuilder()
-        .registerTypeHierarchyAdapter(ClassWithNoFields.class,
-            new JsonSerializer<ClassWithNoFields>() {
+        .registerTypeHierarchyAdapter(TestTypes.ClassWithNoFields.class,
+            new JsonSerializer<TestTypes.ClassWithNoFields>() {
               public JsonElement serialize(
-                  ClassWithNoFields src, Type typeOfSrc, JsonSerializationContext context) {
+                      TestTypes.ClassWithNoFields src, Type typeOfSrc, JsonSerializationContext context) {
                 return new JsonObject();
               }
             }).create();
 
-    assertEquals("null", gson.toJson(new ClassWithNoFields() {
+    assertEquals("null", gson.toJson(new TestTypes.ClassWithNoFields() {
       // empty anonymous class
     }));
   }
 
   public void testPrimitiveArrayFieldSerialization() {
-    PrimitiveArray target = new PrimitiveArray(new long[] { 1L, 2L, 3L });
+    TestTypes.PrimitiveArray target = new TestTypes.PrimitiveArray(new long[] { 1L, 2L, 3L });
     assertEquals(target.getExpectedJson(), gson.toJson(target));
   }
 
@@ -353,20 +345,20 @@ public void testInnerClassDeserialization() {
   }
 
   private static class ArrayOfArrays {
-    private final BagOfPrimitives[][] elements;
+    private final TestTypes.BagOfPrimitives[][] elements;
     public ArrayOfArrays() {
-      elements = new BagOfPrimitives[3][2];
+      elements = new TestTypes.BagOfPrimitives[3][2];
       for (int i = 0; i < elements.length; ++i) {
-        BagOfPrimitives[] row = elements[i];
+        TestTypes.BagOfPrimitives[] row = elements[i];
         for (int j = 0; j < row.length; ++j) {
-          row[j] = new BagOfPrimitives(i+j, i*j, false, i+"_"+j);
+          row[j] = new TestTypes.BagOfPrimitives(i+j, i*j, false, i+"_"+j);
         }
       }
     }
     public String getExpectedJson() {
       StringBuilder sb = new StringBuilder("{\"elements\":[");
       boolean first = true;
-      for (BagOfPrimitives[] row : elements) {
+      for (TestTypes.BagOfPrimitives[] row : elements) {
         if (first) {
           first = false;
         } else {
@@ -374,7 +366,7 @@ public String getExpectedJson() {
         }
         boolean firstOfRow = true;
         sb.append("[");
-        for (BagOfPrimitives element : row) {
+        for (TestTypes.BagOfPrimitives element : row) {
           if (firstOfRow) {
             firstOfRow = false;
           } else {
@@ -401,7 +393,7 @@ private ClassWithPrivateNoArgsConstructor() {
    */
   public void testObjectFieldNamesWithoutQuotesDeserialization() {
     String json = "{longValue:1,'booleanValue':true,\"stringValue\":'bar'}";
-    BagOfPrimitives bag = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives bag = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals(1, bag.longValue);
     assertTrue(bag.booleanValue);
     assertEquals("bar", bag.stringValue);
@@ -409,15 +401,15 @@ public void testObjectFieldNamesWithoutQuotesDeserialization() {
 
   public void testStringFieldWithNumberValueDeserialization() {
     String json = "{\"stringValue\":1}";
-    BagOfPrimitives bag = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives bag = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals("1", bag.stringValue);
 
     json = "{\"stringValue\":1.5E+6}";
-    bag = gson.fromJson(json, BagOfPrimitives.class);
+    bag = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals("1.5E+6", bag.stringValue);
 
     json = "{\"stringValue\":true}";
-    bag = gson.fromJson(json, BagOfPrimitives.class);
+    bag = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals("true", bag.stringValue);
   }
 
diff --git a/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java b/gson/src/test/java/com/economic/persistgson/functional/ParameterizedTypesTest.java
similarity index 74%
rename from gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/ParameterizedTypesTest.java
index 190603deb..37869ccdd 100644
--- a/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/ParameterizedTypesTest.java
@@ -14,15 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.ParameterizedTypeFixtures.MyParameterizedType;
-import com.google.gson.ParameterizedTypeFixtures.MyParameterizedTypeAdapter;
-import com.google.gson.ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.ParameterizedTypeFixtures;
+import com.economic.persistgson.common.TestTypes;
+import com.economic.persistgson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
@@ -52,32 +50,32 @@ protected void setUp() throws Exception {
   }
 
   public void testParameterizedTypesSerialization() throws Exception {
-    MyParameterizedType<Integer> src = new MyParameterizedType<Integer>(10);
-    Type typeOfSrc = new TypeToken<MyParameterizedType<Integer>>() {}.getType();
+    ParameterizedTypeFixtures.MyParameterizedType<Integer> src = new ParameterizedTypeFixtures.MyParameterizedType<Integer>(10);
+    Type typeOfSrc = new TypeToken<ParameterizedTypeFixtures.MyParameterizedType<Integer>>() {}.getType();
     String json = gson.toJson(src, typeOfSrc);
     assertEquals(src.getExpectedJson(), json);
   }
 
   public void testParameterizedTypeDeserialization() throws Exception {
-    BagOfPrimitives bag = new BagOfPrimitives();
-    MyParameterizedType<BagOfPrimitives> expected = new MyParameterizedType<BagOfPrimitives>(bag);
-    Type expectedType = new TypeToken<MyParameterizedType<BagOfPrimitives>>() {}.getType();
-    BagOfPrimitives bagDefaultInstance = new BagOfPrimitives();
+    TestTypes.BagOfPrimitives bag = new TestTypes.BagOfPrimitives();
+    ParameterizedTypeFixtures.MyParameterizedType<TestTypes.BagOfPrimitives> expected = new ParameterizedTypeFixtures.MyParameterizedType<TestTypes.BagOfPrimitives>(bag);
+    Type expectedType = new TypeToken<ParameterizedTypeFixtures.MyParameterizedType<TestTypes.BagOfPrimitives>>() {}.getType();
+    TestTypes.BagOfPrimitives bagDefaultInstance = new TestTypes.BagOfPrimitives();
     Gson gson = new GsonBuilder().registerTypeAdapter(
-        expectedType, new MyParameterizedTypeInstanceCreator<BagOfPrimitives>(bagDefaultInstance))
+        expectedType, new ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<TestTypes.BagOfPrimitives>(bagDefaultInstance))
         .create();
 
     String json = expected.getExpectedJson();
-    MyParameterizedType<BagOfPrimitives> actual = gson.fromJson(json, expectedType);
+    ParameterizedTypeFixtures.MyParameterizedType<TestTypes.BagOfPrimitives> actual = gson.fromJson(json, expectedType);
     assertEquals(expected, actual);
   }
 
   public void testTypesWithMultipleParametersSerialization() throws Exception {
-    MultiParameters<Integer, Float, Double, String, BagOfPrimitives> src =
-        new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D,
-            "abc", new BagOfPrimitives());
+    MultiParameters<Integer, Float, Double, String, TestTypes.BagOfPrimitives> src =
+        new MultiParameters<Integer, Float, Double, String, TestTypes.BagOfPrimitives>(10, 1.0F, 2.1D,
+            "abc", new TestTypes.BagOfPrimitives());
     Type typeOfSrc = new TypeToken<MultiParameters<Integer, Float, Double, String,
-        BagOfPrimitives>>() {}.getType();
+            TestTypes.BagOfPrimitives>>() {}.getType();
     String json = gson.toJson(src, typeOfSrc);
     String expected = "{\"a\":10,\"b\":1.0,\"c\":2.1,\"d\":\"abc\","
         + "\"e\":{\"longValue\":0,\"intValue\":0,\"booleanValue\":false,\"stringValue\":\"\"}}";
@@ -86,74 +84,74 @@ public void testTypesWithMultipleParametersSerialization() throws Exception {
 
   public void testTypesWithMultipleParametersDeserialization() throws Exception {
     Type typeOfTarget = new TypeToken<MultiParameters<Integer, Float, Double, String,
-        BagOfPrimitives>>() {}.getType();
+            TestTypes.BagOfPrimitives>>() {}.getType();
     String json = "{\"a\":10,\"b\":1.0,\"c\":2.1,\"d\":\"abc\","
         + "\"e\":{\"longValue\":0,\"intValue\":0,\"booleanValue\":false,\"stringValue\":\"\"}}";
-    MultiParameters<Integer, Float, Double, String, BagOfPrimitives> target =
+    MultiParameters<Integer, Float, Double, String, TestTypes.BagOfPrimitives> target =
         gson.fromJson(json, typeOfTarget);
-    MultiParameters<Integer, Float, Double, String, BagOfPrimitives> expected =
-        new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D,
-            "abc", new BagOfPrimitives());
+    MultiParameters<Integer, Float, Double, String, TestTypes.BagOfPrimitives> expected =
+        new MultiParameters<Integer, Float, Double, String, TestTypes.BagOfPrimitives>(10, 1.0F, 2.1D,
+            "abc", new TestTypes.BagOfPrimitives());
     assertEquals(expected, target);
   }
 
   public void testParameterizedTypeWithCustomSerializer() {
-    Type ptIntegerType = new TypeToken<MyParameterizedType<Integer>>() {}.getType();
-    Type ptStringType = new TypeToken<MyParameterizedType<String>>() {}.getType();
+    Type ptIntegerType = new TypeToken<ParameterizedTypeFixtures.MyParameterizedType<Integer>>() {}.getType();
+    Type ptStringType = new TypeToken<ParameterizedTypeFixtures.MyParameterizedType<String>>() {}.getType();
     Gson gson = new GsonBuilder()
-        .registerTypeAdapter(ptIntegerType, new MyParameterizedTypeAdapter<Integer>())
-        .registerTypeAdapter(ptStringType, new MyParameterizedTypeAdapter<String>())
+        .registerTypeAdapter(ptIntegerType, new ParameterizedTypeFixtures.MyParameterizedTypeAdapter<Integer>())
+        .registerTypeAdapter(ptStringType, new ParameterizedTypeFixtures.MyParameterizedTypeAdapter<String>())
         .create();
-    MyParameterizedType<Integer> intTarget = new MyParameterizedType<Integer>(10);
+    ParameterizedTypeFixtures.MyParameterizedType<Integer> intTarget = new ParameterizedTypeFixtures.MyParameterizedType<Integer>(10);
     String json = gson.toJson(intTarget, ptIntegerType);
-    assertEquals(MyParameterizedTypeAdapter.<Integer>getExpectedJson(intTarget), json);
+    assertEquals(ParameterizedTypeFixtures.MyParameterizedTypeAdapter.<Integer>getExpectedJson(intTarget), json);
 
-    MyParameterizedType<String> stringTarget = new MyParameterizedType<String>("abc");
+    ParameterizedTypeFixtures.MyParameterizedType<String> stringTarget = new ParameterizedTypeFixtures.MyParameterizedType<String>("abc");
     json = gson.toJson(stringTarget, ptStringType);
-    assertEquals(MyParameterizedTypeAdapter.<String>getExpectedJson(stringTarget), json);
+    assertEquals(ParameterizedTypeFixtures.MyParameterizedTypeAdapter.<String>getExpectedJson(stringTarget), json);
   }
 
   public void testParameterizedTypesWithCustomDeserializer() {
-    Type ptIntegerType = new TypeToken<MyParameterizedType<Integer>>() {}.getType();
-    Type ptStringType = new TypeToken<MyParameterizedType<String>>() {}.getType();
+    Type ptIntegerType = new TypeToken<ParameterizedTypeFixtures.MyParameterizedType<Integer>>() {}.getType();
+    Type ptStringType = new TypeToken<ParameterizedTypeFixtures.MyParameterizedType<String>>() {}.getType();
     Gson gson = new GsonBuilder().registerTypeAdapter(
-        ptIntegerType, new MyParameterizedTypeAdapter<Integer>())
-        .registerTypeAdapter(ptStringType, new MyParameterizedTypeAdapter<String>())
-        .registerTypeAdapter(ptStringType, new MyParameterizedTypeInstanceCreator<String>(""))
+        ptIntegerType, new ParameterizedTypeFixtures.MyParameterizedTypeAdapter<Integer>())
+        .registerTypeAdapter(ptStringType, new ParameterizedTypeFixtures.MyParameterizedTypeAdapter<String>())
+        .registerTypeAdapter(ptStringType, new ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<String>(""))
         .registerTypeAdapter(ptIntegerType,
-            new MyParameterizedTypeInstanceCreator<Integer>(new Integer(0)))
+            new ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<Integer>(new Integer(0)))
         .create();
 
-    MyParameterizedType<Integer> src = new MyParameterizedType<Integer>(10);
-    String json = MyParameterizedTypeAdapter.<Integer>getExpectedJson(src);
-    MyParameterizedType<Integer> intTarget = gson.fromJson(json, ptIntegerType);
+    ParameterizedTypeFixtures.MyParameterizedType<Integer> src = new ParameterizedTypeFixtures.MyParameterizedType<Integer>(10);
+    String json = ParameterizedTypeFixtures.MyParameterizedTypeAdapter.<Integer>getExpectedJson(src);
+    ParameterizedTypeFixtures.MyParameterizedType<Integer> intTarget = gson.fromJson(json, ptIntegerType);
     assertEquals(10, intTarget.value.intValue());
 
-    MyParameterizedType<String> srcStr = new MyParameterizedType<String>("abc");
-    json = MyParameterizedTypeAdapter.<String>getExpectedJson(srcStr);
-    MyParameterizedType<String> stringTarget = gson.fromJson(json, ptStringType);
+    ParameterizedTypeFixtures.MyParameterizedType<String> srcStr = new ParameterizedTypeFixtures.MyParameterizedType<String>("abc");
+    json = ParameterizedTypeFixtures.MyParameterizedTypeAdapter.<String>getExpectedJson(srcStr);
+    ParameterizedTypeFixtures.MyParameterizedType<String> stringTarget = gson.fromJson(json, ptStringType);
     assertEquals("abc", stringTarget.value);
   }
 
   public void testParameterizedTypesWithWriterSerialization() throws Exception {
     Writer writer = new StringWriter();
-    MyParameterizedType<Integer> src = new MyParameterizedType<Integer>(10);
-    Type typeOfSrc = new TypeToken<MyParameterizedType<Integer>>() {}.getType();
+    ParameterizedTypeFixtures.MyParameterizedType<Integer> src = new ParameterizedTypeFixtures.MyParameterizedType<Integer>(10);
+    Type typeOfSrc = new TypeToken<ParameterizedTypeFixtures.MyParameterizedType<Integer>>() {}.getType();
     gson.toJson(src, typeOfSrc, writer);
     assertEquals(src.getExpectedJson(), writer.toString());
   }
 
   public void testParameterizedTypeWithReaderDeserialization() throws Exception {
-    BagOfPrimitives bag = new BagOfPrimitives();
-    MyParameterizedType<BagOfPrimitives> expected = new MyParameterizedType<BagOfPrimitives>(bag);
-    Type expectedType = new TypeToken<MyParameterizedType<BagOfPrimitives>>() {}.getType();
-    BagOfPrimitives bagDefaultInstance = new BagOfPrimitives();
+    TestTypes.BagOfPrimitives bag = new TestTypes.BagOfPrimitives();
+    ParameterizedTypeFixtures.MyParameterizedType<TestTypes.BagOfPrimitives> expected = new ParameterizedTypeFixtures.MyParameterizedType<TestTypes.BagOfPrimitives>(bag);
+    Type expectedType = new TypeToken<ParameterizedTypeFixtures.MyParameterizedType<TestTypes.BagOfPrimitives>>() {}.getType();
+    TestTypes.BagOfPrimitives bagDefaultInstance = new TestTypes.BagOfPrimitives();
     Gson gson = new GsonBuilder().registerTypeAdapter(
-        expectedType, new MyParameterizedTypeInstanceCreator<BagOfPrimitives>(bagDefaultInstance))
+        expectedType, new ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<TestTypes.BagOfPrimitives>(bagDefaultInstance))
         .create();
 
     Reader json = new StringReader(expected.getExpectedJson());
-    MyParameterizedType<Integer> actual = gson.fromJson(json, expectedType);
+    ParameterizedTypeFixtures.MyParameterizedType<Integer> actual = gson.fromJson(json, expectedType);
     assertEquals(expected, actual);
   }
 
diff --git a/gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java b/gson/src/test/java/com/economic/persistgson/functional/PrettyPrintingTest.java
similarity index 86%
rename from gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/PrettyPrintingTest.java
index 0aacc9e27..26f4e2abc 100644
--- a/gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/PrettyPrintingTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
 import java.lang.reflect.Type;
 import java.util.Arrays;
@@ -24,11 +24,10 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.common.TestTypes.ArrayOfObjects;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.common.TestTypes;
+import com.economic.persistgson.reflect.TypeToken;
 
 /**
  * Functional tests for pretty printing option.
@@ -49,18 +48,18 @@ protected void setUp() throws Exception {
   }
 
   public void testPrettyPrintList() {
-    BagOfPrimitives b = new BagOfPrimitives();
-    List<BagOfPrimitives> listOfB = new LinkedList<BagOfPrimitives>();
+    TestTypes.BagOfPrimitives b = new TestTypes.BagOfPrimitives();
+    List<TestTypes.BagOfPrimitives> listOfB = new LinkedList<TestTypes.BagOfPrimitives>();
     for (int i = 0; i < 15; ++i) {
       listOfB.add(b);
     }
-    Type typeOfSrc = new TypeToken<List<BagOfPrimitives>>() {}.getType();
+    Type typeOfSrc = new TypeToken<List<TestTypes.BagOfPrimitives>>() {}.getType();
     String json = gson.toJson(listOfB, typeOfSrc);
     print(json);
   }
 
   public void testPrettyPrintArrayOfObjects() {
-    ArrayOfObjects target = new ArrayOfObjects();
+    TestTypes.ArrayOfObjects target = new TestTypes.ArrayOfObjects();
     String json = gson.toJson(target);
     print(json);
   }
diff --git a/gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java b/gson/src/test/java/com/economic/persistgson/functional/PrimitiveCharacterTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/PrimitiveCharacterTest.java
index 69ff1f3f2..ae6eab2eb 100644
--- a/gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/PrimitiveCharacterTest.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import junit.framework.TestCase;
+import com.economic.persistgson.Gson;
 
-import com.google.gson.Gson;
+import junit.framework.TestCase;
 
 /**
  * Functional tests for Java Character values.
diff --git a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java b/gson/src/test/java/com/economic/persistgson/functional/PrimitiveTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/functional/PrimitiveTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/PrimitiveTest.java
index 9da983a3b..9ecaecf23 100644
--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/PrimitiveTest.java
@@ -14,14 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.LongSerializationPolicy;
-import com.google.gson.reflect.TypeToken;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.LongSerializationPolicy;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonSyntaxException;
+
 import java.io.Serializable;
 import java.io.StringReader;
 import java.math.BigDecimal;
diff --git a/gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java b/gson/src/test/java/com/economic/persistgson/functional/PrintFormattingTest.java
similarity index 79%
rename from gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/PrintFormattingTest.java
index 7dcbc23c3..9c853f2e3 100644
--- a/gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/PrintFormattingTest.java
@@ -14,15 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonObject;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithTransientFields;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.common.TestTypes.PrimitiveArray;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.common.TestTypes;
 
 import junit.framework.TestCase;
 
@@ -48,10 +45,10 @@ protected void setUp() throws Exception {
   @SuppressWarnings({"unchecked", "rawtypes"})
   public void testCompactFormattingLeavesNoWhiteSpace() {
     List list = new ArrayList();
-    list.add(new BagOfPrimitives());
-    list.add(new Nested());
-    list.add(new PrimitiveArray());
-    list.add(new ClassWithTransientFields());
+    list.add(new TestTypes.BagOfPrimitives());
+    list.add(new TestTypes.Nested());
+    list.add(new TestTypes.PrimitiveArray());
+    list.add(new TestTypes.ClassWithTransientFields());
 
     String json = gson.toJson(list);
     assertContainsNoWhiteSpace(json);
diff --git a/gson/src/test/java/com/google/gson/functional/RawSerializationTest.java b/gson/src/test/java/com/economic/persistgson/functional/RawSerializationTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/RawSerializationTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/RawSerializationTest.java
index d5e8883e7..75030e533 100644
--- a/gson/src/test/java/com/google/gson/functional/RawSerializationTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/RawSerializationTest.java
@@ -13,16 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.reflect.TypeToken;
 
 import java.util.Arrays;
 import java.util.Collection;
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.reflect.TypeToken;
-
 /**
  * Unit tests to validate serialization of parameterized types without explicit types
  *
diff --git a/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java b/gson/src/test/java/com/economic/persistgson/functional/ReadersWritersTest.java
similarity index 80%
rename from gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/ReadersWritersTest.java
index e21fb903e..9794e9d61 100644
--- a/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/ReadersWritersTest.java
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonStreamParser;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonStreamParser;
+import com.economic.persistgson.JsonSyntaxException;
+import com.economic.persistgson.common.TestTypes;
+import com.economic.persistgson.reflect.TypeToken;
 
-import com.google.gson.reflect.TypeToken;
 import java.util.Map;
 import junit.framework.TestCase;
 
@@ -50,15 +50,15 @@ protected void setUp() throws Exception {
 
   public void testWriterForSerialization() throws Exception {
     Writer writer = new StringWriter();
-    BagOfPrimitives src = new BagOfPrimitives();
+    TestTypes.BagOfPrimitives src = new TestTypes.BagOfPrimitives();
     gson.toJson(src, writer);
     assertEquals(src.getExpectedJson(), writer.toString());
   }
 
   public void testReaderForDeserialization() throws Exception {
-    BagOfPrimitives expected = new BagOfPrimitives();
+    TestTypes.BagOfPrimitives expected = new TestTypes.BagOfPrimitives();
     Reader json = new StringReader(expected.getExpectedJson());
-    BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives actual = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals(expected, actual);
   }
 
@@ -104,15 +104,15 @@ public void testReadWriteTwoStrings() throws IOException {
   public void testReadWriteTwoObjects() throws IOException {
     Gson gson= new Gson();
     CharArrayWriter writer= new CharArrayWriter();
-    BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one");
+    TestTypes.BagOfPrimitives expectedOne = new TestTypes.BagOfPrimitives(1, 1, true, "one");
     writer.write(gson.toJson(expectedOne).toCharArray());
-    BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two");
+    TestTypes.BagOfPrimitives expectedTwo = new TestTypes.BagOfPrimitives(2, 2, false, "two");
     writer.write(gson.toJson(expectedTwo).toCharArray());
     CharArrayReader reader = new CharArrayReader(writer.toCharArray());
     JsonStreamParser parser = new JsonStreamParser(reader);
-    BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives actualOne = gson.fromJson(parser.next(), TestTypes.BagOfPrimitives.class);
     assertEquals("one", actualOne.stringValue);
-    BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives actualTwo = gson.fromJson(parser.next(), TestTypes.BagOfPrimitives.class);
     assertEquals("two", actualTwo.stringValue);
     assertFalse(parser.hasNext());
   }
diff --git a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java b/gson/src/test/java/com/economic/persistgson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
similarity index 90%
rename from gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
index 1284e2c9b..9bacd8b9e 100644
--- a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
@@ -13,7 +13,20 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.annotations.JsonAdapter;
+import com.economic.persistgson.internal.Streams;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonWriter;
 
 import java.io.IOException;
 import java.util.LinkedHashMap;
@@ -21,19 +34,6 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.internal.Streams;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-
 /**
  * Functional tests for the RuntimeTypeAdapterFactory feature in extras.
  */
@@ -171,7 +171,7 @@ protected RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {
           }
           String label = labelJsonElement.getAsString();
           @SuppressWarnings("unchecked") // registration requires that subtype extends T
-          TypeAdapter<R> delegate = (TypeAdapter<R>) labelToDelegate.get(label);
+                  TypeAdapter<R> delegate = (TypeAdapter<R>) labelToDelegate.get(label);
           if (delegate == null) {
             throw new JsonParseException("cannot deserialize " + baseType + " subtype named "
                 + label + "; did you forget to register a subtype?");
@@ -183,7 +183,7 @@ protected RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {
           Class<?> srcType = value.getClass();
           String label = subtypeToLabel.get(srcType);
           @SuppressWarnings("unchecked") // registration requires that subtype extends T
-          TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);
+                  TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);
           if (delegate == null) {
             throw new JsonParseException("cannot serialize " + srcType.getName()
                 + "; did you forget to register a subtype?");
diff --git a/gson/src/test/java/com/google/gson/functional/SecurityTest.java b/gson/src/test/java/com/economic/persistgson/functional/SecurityTest.java
similarity index 83%
rename from gson/src/test/java/com/google/gson/functional/SecurityTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/SecurityTest.java
index aa1c2d451..35811e32f 100644
--- a/gson/src/test/java/com/google/gson/functional/SecurityTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/SecurityTest.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.common.TestTypes;
 
 import junit.framework.TestCase;
 
@@ -43,14 +43,14 @@ protected void setUp() throws Exception {
 
   public void testNonExecutableJsonSerialization() {
     Gson gson = gsonBuilder.generateNonExecutableJson().create();
-    String json = gson.toJson(new BagOfPrimitives());
+    String json = gson.toJson(new TestTypes.BagOfPrimitives());
     assertTrue(json.startsWith(JSON_NON_EXECUTABLE_PREFIX));
   }
   
   public void testNonExecutableJsonDeserialization() {
     String json = JSON_NON_EXECUTABLE_PREFIX + "{longValue:1}";
     Gson gson = gsonBuilder.create();
-    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives target = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals(1, target.longValue);
   }
   
@@ -67,7 +67,7 @@ public void testJsonWithNonExectuableTokenSerialization() {
   public void testJsonWithNonExectuableTokenWithRegularGsonDeserialization() {
     Gson gson = gsonBuilder.create();
     String json = JSON_NON_EXECUTABLE_PREFIX + "{stringValue:')]}\\u0027\\n'}";
-    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives target = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals(")]}'\n", target.stringValue);
   }  
   
@@ -79,7 +79,7 @@ public void testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization() {
     // Gson should be able to deserialize a stream with non-exectuable token even if it is created 
     Gson gson = gsonBuilder.generateNonExecutableJson().create();
     String json = JSON_NON_EXECUTABLE_PREFIX + "{intValue:2,stringValue:')]}\\u0027\\n'}";
-    BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives target = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals(")]}'\n", target.stringValue);
     assertEquals(2, target.intValue);
   }  
diff --git a/gson/src/test/java/com/google/gson/functional/SerializedNameTest.java b/gson/src/test/java/com/economic/persistgson/functional/SerializedNameTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/functional/SerializedNameTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/SerializedNameTest.java
index 0314ae0af..1f8c0e575 100644
--- a/gson/src/test/java/com/google/gson/functional/SerializedNameTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/SerializedNameTest.java
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.annotations.SerializedName;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.annotations.SerializedName;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java b/gson/src/test/java/com/economic/persistgson/functional/StreamingTypeAdaptersTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/StreamingTypeAdaptersTest.java
index 45e85342c..528485e52 100644
--- a/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/StreamingTypeAdaptersTest.java
@@ -14,18 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonArray;
+import com.economic.persistgson.JsonSyntaxException;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.reflect.TypeToken;
+import com.economic.persistgson.stream.JsonWriter;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
diff --git a/gson/src/test/java/com/google/gson/functional/StringTest.java b/gson/src/test/java/com/economic/persistgson/functional/StringTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/functional/StringTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/StringTest.java
index 7dcf6f0f5..ff5138def 100644
--- a/gson/src/test/java/com/google/gson/functional/StringTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/StringTest.java
@@ -1,6 +1,6 @@
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
+import com.economic.persistgson.Gson;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java b/gson/src/test/java/com/economic/persistgson/functional/ThrowableFunctionalTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/ThrowableFunctionalTest.java
index f6ae748a5..1213a3745 100644
--- a/gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/ThrowableFunctionalTest.java
@@ -1,13 +1,13 @@
 // Copyright (C) 2014 Trymph Inc.
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.annotations.SerializedName;
 
 import java.io.IOException;
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.annotations.SerializedName;
-
 @SuppressWarnings("serial")
 public final class ThrowableFunctionalTest extends TestCase {
   private final Gson gson = new Gson();
diff --git a/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java b/gson/src/test/java/com/economic/persistgson/functional/TreeTypeAdaptersTest.java
similarity index 90%
rename from gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/TreeTypeAdaptersTest.java
index ad737ec51..f5bea1751 100644
--- a/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/TreeTypeAdaptersTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
@@ -24,16 +24,16 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonDeserializationContext;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.reflect.TypeToken;
 
 /**
  * Collection of functional tests for DOM tree based type adapters.
diff --git a/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java b/gson/src/test/java/com/economic/persistgson/functional/TypeAdapterPrecedenceTest.java
similarity index 91%
rename from gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/TypeAdapterPrecedenceTest.java
index 5f881530d..cd1481724 100644
--- a/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/TypeAdapterPrecedenceTest.java
@@ -14,19 +14,19 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.TypeAdapter;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonDeserializationContext;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.JsonSerializer;
+import com.economic.persistgson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Type;
 import junit.framework.TestCase;
diff --git a/gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java b/gson/src/test/java/com/economic/persistgson/functional/TypeHierarchyAdapterTest.java
similarity index 90%
rename from gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/TypeHierarchyAdapterTest.java
index 25b9c3436..c1f160e39 100644
--- a/gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/TypeHierarchyAdapterTest.java
@@ -14,18 +14,19 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
+package com.economic.persistgson.functional;
+
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonDeserializationContext;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.JsonPrimitive;
+import com.economic.persistgson.JsonSerializationContext;
+import com.economic.persistgson.JsonSerializer;
+
 import java.lang.reflect.Type;
 import junit.framework.TestCase;
 
@@ -152,7 +153,7 @@ public void testRegisterSubTypeFirstAllowed() {
 
   static class EmployeeAdapter implements JsonSerializer<Employee>, JsonDeserializer<Employee> {
     @Override public JsonElement serialize(Employee employee, Type typeOfSrc,
-        JsonSerializationContext context) {
+                                           JsonSerializationContext context) {
       JsonObject result = new JsonObject();
       result.add("userid", context.serialize(employee.userid, String.class));
       result.add("startDate", context.serialize(employee.startDate, long.class));
@@ -166,7 +167,7 @@ public void testRegisterSubTypeFirstAllowed() {
     }
 
     @Override public Employee deserialize(JsonElement json, Type typeOfT,
-        JsonDeserializationContext context) throws JsonParseException {
+                                          JsonDeserializationContext context) throws JsonParseException {
       JsonObject object = json.getAsJsonObject();
       Employee result = null;
 
diff --git a/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java b/gson/src/test/java/com/economic/persistgson/functional/TypeVariableTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/functional/TypeVariableTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/TypeVariableTest.java
index 2d7503eb3..9070ed7c4 100644
--- a/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/TypeVariableTest.java
@@ -13,11 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.reflect.TypeToken;
 import java.lang.reflect.Type;
 import java.util.Arrays;
 import junit.framework.TestCase;
diff --git a/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java b/gson/src/test/java/com/economic/persistgson/functional/UncategorizedTest.java
similarity index 79%
rename from gson/src/test/java/com/google/gson/functional/UncategorizedTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/UncategorizedTest.java
index 0ac038035..aa0383c55 100644
--- a/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/UncategorizedTest.java
@@ -13,18 +13,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassOverridingEquals;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonDeserializationContext;
+import com.economic.persistgson.JsonDeserializer;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.common.TestTypes;
 
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.reflect.TypeToken;
 import java.util.Arrays;
 import java.util.List;
 import junit.framework.TestCase;
@@ -49,33 +48,33 @@ protected void setUp() throws Exception {
 
   public void testInvalidJsonDeserializationFails() throws Exception {
     try {
-      gson.fromJson("adfasdf1112,,,\":", BagOfPrimitives.class);
+      gson.fromJson("adfasdf1112,,,\":", TestTypes.BagOfPrimitives.class);
       fail("Bad JSON should throw a ParseException");
     } catch (JsonParseException expected) { }
 
     try {
-      gson.fromJson("{adfasdf1112,,,\":}", BagOfPrimitives.class);
+      gson.fromJson("{adfasdf1112,,,\":}", TestTypes.BagOfPrimitives.class);
       fail("Bad JSON should throw a ParseException");
     } catch (JsonParseException expected) { }
   }
 
   public void testObjectEqualButNotSameSerialization() throws Exception {
-    ClassOverridingEquals objA = new ClassOverridingEquals();
-    ClassOverridingEquals objB = new ClassOverridingEquals();
+    TestTypes.ClassOverridingEquals objA = new TestTypes.ClassOverridingEquals();
+    TestTypes.ClassOverridingEquals objB = new TestTypes.ClassOverridingEquals();
     objB.ref = objA;
     String json = gson.toJson(objB);
     assertEquals(objB.getExpectedJson(), json);
   }
 
   public void testStaticFieldsAreNotSerialized() {
-    BagOfPrimitives target = new BagOfPrimitives();
+    TestTypes.BagOfPrimitives target = new TestTypes.BagOfPrimitives();
     assertFalse(gson.toJson(target).contains("DEFAULT_VALUE"));
   }
 
   public void testGsonInstanceReusableForSerializationAndDeserialization() {
-    BagOfPrimitives bag = new BagOfPrimitives();
+    TestTypes.BagOfPrimitives bag = new TestTypes.BagOfPrimitives();
     String json = gson.toJson(bag);
-    BagOfPrimitives deserialized = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives deserialized = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals(bag, deserialized);
   }
 
diff --git a/gson/src/test/java/com/google/gson/functional/VersioningTest.java b/gson/src/test/java/com/economic/persistgson/functional/VersioningTest.java
similarity index 90%
rename from gson/src/test/java/com/google/gson/functional/VersioningTest.java
rename to gson/src/test/java/com/economic/persistgson/functional/VersioningTest.java
index bc526de06..9914ec125 100644
--- a/gson/src/test/java/com/google/gson/functional/VersioningTest.java
+++ b/gson/src/test/java/com/economic/persistgson/functional/VersioningTest.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.economic.persistgson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.annotations.Since;
-import com.google.gson.annotations.Until;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.annotations.Since;
+import com.economic.persistgson.annotations.Until;
+import com.economic.persistgson.GsonBuilder;
+import com.economic.persistgson.common.TestTypes;
 
 import junit.framework.TestCase;
 
@@ -96,7 +96,7 @@ public void testIgnoreLaterVersionClassDeserialization() {
 
   public void testVersionedGsonWithUnversionedClassesSerialization() {
     Gson gson = builder.setVersion(1.0).create();
-    BagOfPrimitives target = new BagOfPrimitives(10, 20, false, "stringValue");
+    TestTypes.BagOfPrimitives target = new TestTypes.BagOfPrimitives(10, 20, false, "stringValue");
     assertEquals(target.getExpectedJson(), gson.toJson(target));
   }
 
@@ -104,11 +104,11 @@ public void testVersionedGsonWithUnversionedClassesDeserialization() {
     Gson gson = builder.setVersion(1.0).create();
     String json = "{\"longValue\":10,\"intValue\":20,\"booleanValue\":false}";
 
-    BagOfPrimitives expected = new BagOfPrimitives();
+    TestTypes.BagOfPrimitives expected = new TestTypes.BagOfPrimitives();
     expected.longValue = 10;
     expected.intValue = 20;
     expected.booleanValue = false;
-    BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class);
+    TestTypes.BagOfPrimitives actual = gson.fromJson(json, TestTypes.BagOfPrimitives.class);
     assertEquals(expected, actual);
   }
 
diff --git a/gson/src/test/java/com/google/gson/internal/GsonTypesTest.java b/gson/src/test/java/com/economic/persistgson/internal/GsonTypesTest.java
similarity index 73%
rename from gson/src/test/java/com/google/gson/internal/GsonTypesTest.java
rename to gson/src/test/java/com/economic/persistgson/internal/GsonTypesTest.java
index c80700bde..664d7bff9 100644
--- a/gson/src/test/java/com/google/gson/internal/GsonTypesTest.java
+++ b/gson/src/test/java/com/economic/persistgson/internal/GsonTypesTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.economic.persistgson.internal;
 
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
@@ -26,30 +26,30 @@
 
   public void testNewParameterizedTypeWithoutOwner() throws Exception {
     // List<A>. List is a top-level class
-    Type type = $Gson$Types.newParameterizedTypeWithOwner(null, List.class, A.class);
+    Type type = com.economic.persistgson.internal.$Gson$Types.newParameterizedTypeWithOwner(null, List.class, A.class);
     assertEquals(A.class, getFirstTypeArgument(type));
 
     // A<B>. A is a static inner class.
-    type = $Gson$Types.newParameterizedTypeWithOwner(null, A.class, B.class);
+    type = com.economic.persistgson.internal.$Gson$Types.newParameterizedTypeWithOwner(null, A.class, B.class);
     assertEquals(B.class, getFirstTypeArgument(type));
 
     final class D {
     }
     try {
       // D<A> is not allowed since D is not a static inner class
-      $Gson$Types.newParameterizedTypeWithOwner(null, D.class, A.class);
+      com.economic.persistgson.internal.$Gson$Types.newParameterizedTypeWithOwner(null, D.class, A.class);
       fail();
     } catch (IllegalArgumentException expected) {}
 
     // A<D> is allowed.
-    type = $Gson$Types.newParameterizedTypeWithOwner(null, A.class, D.class);
+    type = com.economic.persistgson.internal.$Gson$Types.newParameterizedTypeWithOwner(null, A.class, D.class);
     assertEquals(D.class, getFirstTypeArgument(type));
   }
 
   public void testGetFirstTypeArgument() throws Exception {
     assertNull(getFirstTypeArgument(A.class));
 
-    Type type = $Gson$Types.newParameterizedTypeWithOwner(null, A.class, B.class, C.class);
+    Type type = com.economic.persistgson.internal.$Gson$Types.newParameterizedTypeWithOwner(null, A.class, B.class, C.class);
     assertEquals(B.class, getFirstTypeArgument(type));
   }
 
@@ -69,6 +69,6 @@ public static Type getFirstTypeArgument(Type type) throws Exception {
     ParameterizedType ptype = (ParameterizedType) type;
     Type[] actualTypeArguments = ptype.getActualTypeArguments();
     if (actualTypeArguments.length == 0) return null;
-    return $Gson$Types.canonicalize(actualTypeArguments[0]);
+    return com.economic.persistgson.internal.$Gson$Types.canonicalize(actualTypeArguments[0]);
   }
 }
diff --git a/gson/src/test/java/com/google/gson/internal/LazilyParsedNumberTest.java b/gson/src/test/java/com/economic/persistgson/internal/LazilyParsedNumberTest.java
similarity index 88%
rename from gson/src/test/java/com/google/gson/internal/LazilyParsedNumberTest.java
rename to gson/src/test/java/com/economic/persistgson/internal/LazilyParsedNumberTest.java
index f108fa0de..3526827ef 100644
--- a/gson/src/test/java/com/google/gson/internal/LazilyParsedNumberTest.java
+++ b/gson/src/test/java/com/economic/persistgson/internal/LazilyParsedNumberTest.java
@@ -13,7 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.internal;
+package com.economic.persistgson.internal;
+
+import com.economic.persistgson.internal.LazilyParsedNumber;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java b/gson/src/test/java/com/economic/persistgson/internal/LinkedHashTreeMapTest.java
similarity index 84%
rename from gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java
rename to gson/src/test/java/com/economic/persistgson/internal/LinkedHashTreeMapTest.java
index 2aeeeb764..126c0f911 100644
--- a/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java
+++ b/gson/src/test/java/com/economic/persistgson/internal/LinkedHashTreeMapTest.java
@@ -14,12 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.economic.persistgson.internal;
+
+import com.economic.persistgson.common.MoreAsserts;
 
-import com.google.gson.common.MoreAsserts;
-import com.google.gson.internal.LinkedHashTreeMap.AvlBuilder;
-import com.google.gson.internal.LinkedHashTreeMap.AvlIterator;
-import com.google.gson.internal.LinkedHashTreeMap.Node;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
@@ -156,8 +154,8 @@ public void testAvlWalker() {
         "a", "b", "c", "d");
   }
 
-  private void assertAvlWalker(Node<String, String> root, String... values) {
-    AvlIterator<String, String> iterator = new AvlIterator<String, String>();
+  private void assertAvlWalker(LinkedHashTreeMap.Node<String, String> root, String... values) {
+    LinkedHashTreeMap.AvlIterator<String, String> iterator = new LinkedHashTreeMap.AvlIterator<String, String>();
     iterator.reset(root);
     for (String value : values) {
       assertEquals(value, iterator.next().getKey());
@@ -190,7 +188,7 @@ public void testAvlBuilder() {
 
   private void assertAvlBuilder(int size, String expected) {
     char[] values = "abcdefghijklmnopqrstuvwxyzABCDE".toCharArray();
-    AvlBuilder<String, String> avlBuilder = new AvlBuilder<String, String>();
+    LinkedHashTreeMap.AvlBuilder<String, String> avlBuilder = new LinkedHashTreeMap.AvlBuilder<String, String>();
     avlBuilder.reset(size);
     for (int i = 0; i < size; i++) {
       avlBuilder.add(node(Character.toString(values[i])));
@@ -200,39 +198,39 @@ private void assertAvlBuilder(int size, String expected) {
 
   public void testDoubleCapacity() {
     @SuppressWarnings("unchecked") // Arrays and generics don't get along.
-    Node<String, String>[] oldTable = new Node[1];
+    LinkedHashTreeMap.Node<String, String>[] oldTable = new LinkedHashTreeMap.Node[1];
     oldTable[0] = node(node(node("a"), "b", node("c")), "d", node(node("e"), "f", node("g")));
 
-    Node<String, String>[] newTable = LinkedHashTreeMap.doubleCapacity(oldTable);
+    LinkedHashTreeMap.Node<String, String>[] newTable = LinkedHashTreeMap.doubleCapacity(oldTable);
     assertTree("(b d f)", newTable[0]); // Even hash codes!
     assertTree("(a c (. e g))", newTable[1]); // Odd hash codes!
   }
 
   public void testDoubleCapacityAllNodesOnLeft() {
     @SuppressWarnings("unchecked") // Arrays and generics don't get along.
-    Node<String, String>[] oldTable = new Node[1];
+    LinkedHashTreeMap.Node<String, String>[] oldTable = new LinkedHashTreeMap.Node[1];
     oldTable[0] = node(node("b"), "d", node("f"));
 
-    Node<String, String>[] newTable = LinkedHashTreeMap.doubleCapacity(oldTable);
+    LinkedHashTreeMap.Node<String, String>[] newTable = LinkedHashTreeMap.doubleCapacity(oldTable);
     assertTree("(b d f)", newTable[0]); // Even hash codes!
     assertNull(newTable[1]); // Odd hash codes!
 
-    for (Node<?, ?> node : newTable) {
+    for (LinkedHashTreeMap.Node<?, ?> node : newTable) {
       if (node != null) {
         assertConsistent(node);
       }
     }
   }
 
-  private static final Node<String, String> head = new Node<String, String>();
+  private static final LinkedHashTreeMap.Node<String, String> head = new LinkedHashTreeMap.Node<String, String>();
 
-  private Node<String, String> node(String value) {
-    return new Node<String, String>(null, value, value.hashCode(), head, head);
+  private LinkedHashTreeMap.Node<String, String> node(String value) {
+    return new LinkedHashTreeMap.Node<String, String>(null, value, value.hashCode(), head, head);
   }
 
-  private Node<String, String> node(Node<String, String> left, String value,
-      Node<String, String> right) {
-    Node<String, String> result = node(value);
+  private LinkedHashTreeMap.Node<String, String> node(LinkedHashTreeMap.Node<String, String> left, String value,
+                                                      LinkedHashTreeMap.Node<String, String> right) {
+    LinkedHashTreeMap.Node<String, String> result = node(value);
     if (left != null) {
       result.left = left;
       left.parent = result;
@@ -244,12 +242,12 @@ public void testDoubleCapacityAllNodesOnLeft() {
     return result;
   }
 
-  private void assertTree(String expected, Node<?, ?> root) {
+  private void assertTree(String expected, LinkedHashTreeMap.Node<?, ?> root) {
     assertEquals(expected, toString(root));
     assertConsistent(root);
   }
 
-  private void assertConsistent(Node<?, ?> node) {
+  private void assertConsistent(LinkedHashTreeMap.Node<?, ?> node) {
     int leftHeight = 0;
     if (node.left != null) {
       assertConsistent(node.left);
@@ -270,7 +268,7 @@ private void assertConsistent(Node<?, ?> node) {
     }
   }
 
-  private String toString(Node<?, ?> root) {
+  private String toString(LinkedHashTreeMap.Node<?, ?> root) {
     if (root == null) {
       return ".";
     } else if (root.left == null && root.right == null) {
diff --git a/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java b/gson/src/test/java/com/economic/persistgson/internal/LinkedTreeMapTest.java
similarity index 97%
rename from gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
rename to gson/src/test/java/com/economic/persistgson/internal/LinkedTreeMapTest.java
index 580d25a57..76a6b1814 100644
--- a/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
+++ b/gson/src/test/java/com/economic/persistgson/internal/LinkedTreeMapTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.economic.persistgson.internal;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -24,7 +24,7 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.common.MoreAsserts;
+import com.economic.persistgson.common.MoreAsserts;
 
 public final class LinkedTreeMapTest extends TestCase {
 
diff --git a/gson/src/test/java/com/google/gson/internal/UnsafeAllocatorInstantiationTest.java b/gson/src/test/java/com/economic/persistgson/internal/UnsafeAllocatorInstantiationTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/internal/UnsafeAllocatorInstantiationTest.java
rename to gson/src/test/java/com/economic/persistgson/internal/UnsafeAllocatorInstantiationTest.java
index 431fc83dd..91ad8b99e 100644
--- a/gson/src/test/java/com/google/gson/internal/UnsafeAllocatorInstantiationTest.java
+++ b/gson/src/test/java/com/economic/persistgson/internal/UnsafeAllocatorInstantiationTest.java
@@ -13,7 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.internal;
+package com.economic.persistgson.internal;
+
+import com.economic.persistgson.internal.UnsafeAllocator;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java b/gson/src/test/java/com/economic/persistgson/internal/bind/JsonElementReaderTest.java
similarity index 97%
rename from gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java
rename to gson/src/test/java/com/economic/persistgson/internal/bind/JsonElementReaderTest.java
index 10624711c..be8788002 100644
--- a/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java
+++ b/gson/src/test/java/com/economic/persistgson/internal/bind/JsonElementReaderTest.java
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.economic.persistgson.internal.bind;
+
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.JsonParser;
+import com.economic.persistgson.internal.bind.JsonTreeReader;
+import com.economic.persistgson.stream.JsonToken;
 
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParser;
-import com.google.gson.stream.JsonToken;
 import java.io.IOException;
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/internal/bind/JsonTreeReaderTest.java b/gson/src/test/java/com/economic/persistgson/internal/bind/JsonTreeReaderTest.java
similarity index 84%
rename from gson/src/test/java/com/google/gson/internal/bind/JsonTreeReaderTest.java
rename to gson/src/test/java/com/economic/persistgson/internal/bind/JsonTreeReaderTest.java
index f6a5bf33e..c5d7c2a04 100644
--- a/gson/src/test/java/com/google/gson/internal/bind/JsonTreeReaderTest.java
+++ b/gson/src/test/java/com/economic/persistgson/internal/bind/JsonTreeReaderTest.java
@@ -13,12 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.internal.bind;
+package com.economic.persistgson.internal.bind;
+
+import com.economic.persistgson.JsonArray;
+import com.economic.persistgson.JsonNull;
+import com.economic.persistgson.JsonObject;
+import com.economic.persistgson.internal.bind.JsonTreeReader;
+import com.economic.persistgson.stream.JsonToken;
 
-import com.google.gson.JsonArray;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.stream.JsonToken;
 import java.io.IOException;
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java b/gson/src/test/java/com/economic/persistgson/internal/bind/JsonTreeWriterTest.java
similarity index 72%
rename from gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java
rename to gson/src/test/java/com/economic/persistgson/internal/bind/JsonTreeWriterTest.java
index e07014d3f..5dcb2d01e 100644
--- a/gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java
+++ b/gson/src/test/java/com/economic/persistgson/internal/bind/JsonTreeWriterTest.java
@@ -14,16 +14,17 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.economic.persistgson.internal.bind;
+
+import com.economic.persistgson.JsonNull;
 
-import com.google.gson.JsonNull;
 import java.io.IOException;
 import junit.framework.TestCase;
 
 @SuppressWarnings("resource")
 public final class JsonTreeWriterTest extends TestCase {
   public void testArray() throws IOException {
-    JsonTreeWriter writer = new JsonTreeWriter();
+    com.economic.persistgson.internal.bind.JsonTreeWriter writer = new com.economic.persistgson.internal.bind.JsonTreeWriter();
     writer.beginArray();
     writer.value(1);
     writer.value(2);
@@ -33,7 +34,7 @@ public void testArray() throws IOException {
   }
 
   public void testNestedArray() throws IOException {
-    JsonTreeWriter writer = new JsonTreeWriter();
+    com.economic.persistgson.internal.bind.JsonTreeWriter writer = new com.economic.persistgson.internal.bind.JsonTreeWriter();
     writer.beginArray();
     writer.beginArray();
     writer.endArray();
@@ -46,7 +47,7 @@ public void testNestedArray() throws IOException {
   }
 
   public void testObject() throws IOException {
-    JsonTreeWriter writer = new JsonTreeWriter();
+    com.economic.persistgson.internal.bind.JsonTreeWriter writer = new com.economic.persistgson.internal.bind.JsonTreeWriter();
     writer.beginObject();
     writer.name("A").value(1);
     writer.name("B").value(2);
@@ -55,7 +56,7 @@ public void testObject() throws IOException {
   }
 
   public void testNestedObject() throws IOException {
-    JsonTreeWriter writer = new JsonTreeWriter();
+    com.economic.persistgson.internal.bind.JsonTreeWriter writer = new com.economic.persistgson.internal.bind.JsonTreeWriter();
     writer.beginObject();
     writer.name("A");
     writer.beginObject();
@@ -71,7 +72,7 @@ public void testNestedObject() throws IOException {
   }
 
   public void testWriteAfterClose() throws Exception {
-    JsonTreeWriter writer = new JsonTreeWriter();
+    com.economic.persistgson.internal.bind.JsonTreeWriter writer = new com.economic.persistgson.internal.bind.JsonTreeWriter();
     writer.setLenient(true);
     writer.beginArray();
     writer.value("A");
@@ -85,7 +86,7 @@ public void testWriteAfterClose() throws Exception {
   }
 
   public void testPrematureClose() throws Exception {
-    JsonTreeWriter writer = new JsonTreeWriter();
+    com.economic.persistgson.internal.bind.JsonTreeWriter writer = new com.economic.persistgson.internal.bind.JsonTreeWriter();
     writer.setLenient(true);
     writer.beginArray();
     try {
@@ -96,7 +97,7 @@ public void testPrematureClose() throws Exception {
   }
 
   public void testSerializeNullsFalse() throws IOException {
-    JsonTreeWriter writer = new JsonTreeWriter();
+    com.economic.persistgson.internal.bind.JsonTreeWriter writer = new com.economic.persistgson.internal.bind.JsonTreeWriter();
     writer.setSerializeNulls(false);
     writer.beginObject();
     writer.name("A");
@@ -106,7 +107,7 @@ public void testSerializeNullsFalse() throws IOException {
   }
 
   public void testSerializeNullsTrue() throws IOException {
-    JsonTreeWriter writer = new JsonTreeWriter();
+    com.economic.persistgson.internal.bind.JsonTreeWriter writer = new com.economic.persistgson.internal.bind.JsonTreeWriter();
     writer.setSerializeNulls(true);
     writer.beginObject();
     writer.name("A");
@@ -116,12 +117,12 @@ public void testSerializeNullsTrue() throws IOException {
   }
 
   public void testEmptyWriter() {
-    JsonTreeWriter writer = new JsonTreeWriter();
+    com.economic.persistgson.internal.bind.JsonTreeWriter writer = new com.economic.persistgson.internal.bind.JsonTreeWriter();
     assertEquals(JsonNull.INSTANCE, writer.get());
   }
 
   public void testLenientNansAndInfinities() throws IOException {
-    JsonTreeWriter writer = new JsonTreeWriter();
+    com.economic.persistgson.internal.bind.JsonTreeWriter writer = new com.economic.persistgson.internal.bind.JsonTreeWriter();
     writer.setLenient(true);
     writer.beginArray();
     writer.value(Double.NaN);
@@ -132,7 +133,7 @@ public void testLenientNansAndInfinities() throws IOException {
   }
 
   public void testStrictNansAndInfinities() throws IOException {
-    JsonTreeWriter writer = new JsonTreeWriter();
+    com.economic.persistgson.internal.bind.JsonTreeWriter writer = new com.economic.persistgson.internal.bind.JsonTreeWriter();
     writer.setLenient(false);
     writer.beginArray();
     try {
@@ -153,7 +154,7 @@ public void testStrictNansAndInfinities() throws IOException {
   }
 
   public void testStrictBoxedNansAndInfinities() throws IOException {
-    JsonTreeWriter writer = new JsonTreeWriter();
+    com.economic.persistgson.internal.bind.JsonTreeWriter writer = new com.economic.persistgson.internal.bind.JsonTreeWriter();
     writer.setLenient(false);
     writer.beginArray();
     try {
diff --git a/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java b/gson/src/test/java/com/economic/persistgson/metrics/PerformanceTest.java
similarity index 97%
rename from gson/src/test/java/com/google/gson/metrics/PerformanceTest.java
rename to gson/src/test/java/com/economic/persistgson/metrics/PerformanceTest.java
index cf444eee7..7bc89b12b 100644
--- a/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java
+++ b/gson/src/test/java/com/economic/persistgson/metrics/PerformanceTest.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.metrics;
+package com.economic.persistgson.metrics;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonParseException;
-import com.google.gson.annotations.Expose;
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.JsonParseException;
+import com.economic.persistgson.annotations.Expose;
+import com.economic.persistgson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java b/gson/src/test/java/com/economic/persistgson/reflect/TypeTokenTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java
rename to gson/src/test/java/com/economic/persistgson/reflect/TypeTokenTest.java
index 40572716b..d471ff349 100644
--- a/gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java
+++ b/gson/src/test/java/com/economic/persistgson/reflect/TypeTokenTest.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson.reflect;
+package com.economic.persistgson.reflect;
+
+import com.economic.persistgson.reflect.TypeToken;
 
 import java.lang.reflect.Type;
 import java.util.ArrayList;
diff --git a/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java b/gson/src/test/java/com/economic/persistgson/regression/JsonAdapterNullSafeTest.java
similarity index 87%
rename from gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
rename to gson/src/test/java/com/economic/persistgson/regression/JsonAdapterNullSafeTest.java
index 30a6775c8..b9ec28d6b 100644
--- a/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
+++ b/gson/src/test/java/com/economic/persistgson/regression/JsonAdapterNullSafeTest.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.regression;
+package com.economic.persistgson.regression;
 
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.reflect.TypeToken;
+import com.economic.persistgson.Gson;
+import com.economic.persistgson.TypeAdapter;
+import com.economic.persistgson.TypeAdapterFactory;
+import com.economic.persistgson.annotations.JsonAdapter;
+import com.economic.persistgson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java b/gson/src/test/java/com/economic/persistgson/stream/JsonReaderPathTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java
rename to gson/src/test/java/com/economic/persistgson/stream/JsonReaderPathTest.java
index c0b269172..b2e477c3e 100644
--- a/gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java
+++ b/gson/src/test/java/com/economic/persistgson/stream/JsonReaderPathTest.java
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.economic.persistgson.stream;
+
+import com.economic.persistgson.JsonElement;
+import com.economic.persistgson.internal.bind.JsonTreeReader;
+import com.economic.persistgson.internal.Streams;
+import com.economic.persistgson.stream.JsonReader;
 
-import com.google.gson.JsonElement;
-import com.google.gson.internal.Streams;
-import com.google.gson.internal.bind.JsonTreeReader;
 import java.io.IOException;
 import java.io.StringReader;
 import java.util.Arrays;
diff --git a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java b/gson/src/test/java/com/economic/persistgson/stream/JsonReaderTest.java
similarity index 90%
rename from gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
rename to gson/src/test/java/com/economic/persistgson/stream/JsonReaderTest.java
index 19ca2d234..9d149615d 100644
--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
+++ b/gson/src/test/java/com/economic/persistgson/stream/JsonReaderTest.java
@@ -14,7 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.economic.persistgson.stream;
+
+import com.economic.persistgson.stream.JsonReader;
+import com.economic.persistgson.stream.JsonToken;
+import com.economic.persistgson.stream.MalformedJsonException;
 
 import java.io.EOFException;
 import java.io.IOException;
@@ -23,16 +27,6 @@
 import java.util.Arrays;
 import junit.framework.TestCase;
 
-import static com.google.gson.stream.JsonToken.BEGIN_ARRAY;
-import static com.google.gson.stream.JsonToken.BEGIN_OBJECT;
-import static com.google.gson.stream.JsonToken.BOOLEAN;
-import static com.google.gson.stream.JsonToken.END_ARRAY;
-import static com.google.gson.stream.JsonToken.END_OBJECT;
-import static com.google.gson.stream.JsonToken.NAME;
-import static com.google.gson.stream.JsonToken.NULL;
-import static com.google.gson.stream.JsonToken.NUMBER;
-import static com.google.gson.stream.JsonToken.STRING;
-
 @SuppressWarnings("resource")
 public final class JsonReaderTest extends TestCase {
   public void testReadArray() throws IOException {
@@ -89,7 +83,7 @@ public void testSkipArrayAfterPeek() throws Exception {
         "{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
     reader.beginObject();
     assertEquals("a", reader.nextName());
-    assertEquals(BEGIN_ARRAY, reader.peek());
+    assertEquals(JsonToken.BEGIN_ARRAY, reader.peek());
     reader.skipValue();
     assertEquals("b", reader.nextName());
     assertEquals(123, reader.nextInt());
@@ -122,10 +116,10 @@ public void testSkipObjectAfterPeek() throws Exception {
     JsonReader reader = new JsonReader(reader(json));
     reader.beginObject();
     assertEquals("one", reader.nextName());
-    assertEquals(BEGIN_OBJECT, reader.peek());
+    assertEquals(JsonToken.BEGIN_OBJECT, reader.peek());
     reader.skipValue();
     assertEquals("two", reader.nextName());
-    assertEquals(BEGIN_OBJECT, reader.peek());
+    assertEquals(JsonToken.BEGIN_OBJECT, reader.peek());
     reader.skipValue();
     assertEquals("three", reader.nextName());
     reader.skipValue();
@@ -452,7 +446,7 @@ public void testPeekingUnquotedStringsPrefixedWithBooleans() throws IOException
     JsonReader reader = new JsonReader(reader("[truey]"));
     reader.setLenient(true);
     reader.beginArray();
-    assertEquals(STRING, reader.peek());
+    assertEquals(JsonToken.STRING, reader.peek());
     try {
       reader.nextBoolean();
       fail();
@@ -512,7 +506,7 @@ public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException
     JsonReader reader = new JsonReader(reader("[12.34e5x]"));
     reader.setLenient(true);
     reader.beginArray();
-    assertEquals(STRING, reader.peek());
+    assertEquals(JsonToken.STRING, reader.peek());
     try {
       reader.nextInt();
       fail();
@@ -525,7 +519,7 @@ public void testPeekLongMinValue() throws IOException {
     JsonReader reader = new JsonReader(reader("[-9223372036854775808]"));
     reader.setLenient(true);
     reader.beginArray();
-    assertEquals(NUMBER, reader.peek());
+    assertEquals(JsonToken.NUMBER, reader.peek());
     assertEquals(-9223372036854775808L, reader.nextLong());
   }
 
@@ -533,7 +527,7 @@ public void testPeekLongMaxValue() throws IOException {
     JsonReader reader = new JsonReader(reader("[9223372036854775807]"));
     reader.setLenient(true);
     reader.beginArray();
-    assertEquals(NUMBER, reader.peek());
+    assertEquals(JsonToken.NUMBER, reader.peek());
     assertEquals(9223372036854775807L, reader.nextLong());
   }
 
@@ -541,7 +535,7 @@ public void testLongLargerThanMaxLongThatWrapsAround() throws IOException {
     JsonReader reader = new JsonReader(reader("[22233720368547758070]"));
     reader.setLenient(true);
     reader.beginArray();
-    assertEquals(NUMBER, reader.peek());
+    assertEquals(JsonToken.NUMBER, reader.peek());
     try {
       reader.nextLong();
       fail();
@@ -553,7 +547,7 @@ public void testLongLargerThanMinLongThatWrapsAround() throws IOException {
     JsonReader reader = new JsonReader(reader("[-22233720368547758070]"));
     reader.setLenient(true);
     reader.beginArray();
-    assertEquals(NUMBER, reader.peek());
+    assertEquals(JsonToken.NUMBER, reader.peek());
     try {
       reader.nextLong();
       fail();
@@ -569,7 +563,7 @@ public void testNegativeZero() throws Exception {
 	  	JsonReader reader = new JsonReader(reader("[-0]"));
 	    reader.setLenient(false);
 	    reader.beginArray();
-	    assertEquals(NUMBER, reader.peek());
+	    assertEquals(JsonToken.NUMBER, reader.peek());
 	    assertEquals("-0", reader.nextString());
   }
 
@@ -581,7 +575,7 @@ public void disabled_testPeekLargerThanLongMaxValue() throws IOException {
     JsonReader reader = new JsonReader(reader("[9223372036854775808]"));
     reader.setLenient(true);
     reader.beginArray();
-    assertEquals(NUMBER, reader.peek());
+    assertEquals(JsonToken.NUMBER, reader.peek());
     try {
       reader.nextLong();
       fail();
@@ -597,7 +591,7 @@ public void disabled_testPeekLargerThanLongMinValue() throws IOException {
     JsonReader reader = new JsonReader(reader("[-9223372036854775809]"));
     reader.setLenient(true);
     reader.beginArray();
-    assertEquals(NUMBER, reader.peek());
+    assertEquals(JsonToken.NUMBER, reader.peek());
     try {
       reader.nextLong();
       fail();
@@ -622,7 +616,7 @@ public void testPeekMuchLargerThanLongMinValue() throws IOException {
     JsonReader reader = new JsonReader(reader("[-92233720368547758080]"));
     reader.setLenient(true);
     reader.beginArray();
-    assertEquals(NUMBER, reader.peek());
+    assertEquals(JsonToken.NUMBER, reader.peek());
     try {
       reader.nextLong();
       fail();
@@ -635,7 +629,7 @@ public void testQuotedNumberWithEscape() throws IOException {
     JsonReader reader = new JsonReader(reader("[\"12\u00334\"]"));
     reader.setLenient(true);
     reader.beginArray();
-    assertEquals(STRING, reader.peek());
+    assertEquals(JsonToken.STRING, reader.peek());
     assertEquals(1234, reader.nextInt());
   }
 
@@ -1609,29 +1603,29 @@ public void testStringAsNumberWithTruncatedExponent() throws IOException {
     JsonReader reader = new JsonReader(reader("[123e]"));
     reader.setLenient(true);
     reader.beginArray();
-    assertEquals(STRING, reader.peek());
+    assertEquals(JsonToken.STRING, reader.peek());
   }
 
   public void testStringAsNumberWithDigitAndNonDigitExponent() throws IOException {
     JsonReader reader = new JsonReader(reader("[123e4b]"));
     reader.setLenient(true);
     reader.beginArray();
-    assertEquals(STRING, reader.peek());
+    assertEquals(JsonToken.STRING, reader.peek());
   }
 
   public void testStringAsNumberWithNonDigitExponent() throws IOException {
     JsonReader reader = new JsonReader(reader("[123eb]"));
     reader.setLenient(true);
     reader.beginArray();
-    assertEquals(STRING, reader.peek());
+    assertEquals(JsonToken.STRING, reader.peek());
   }
 
   public void testEmptyStringName() throws IOException {
     JsonReader reader = new JsonReader(reader("{\"\":true}"));
     reader.setLenient(true);
-    assertEquals(BEGIN_OBJECT, reader.peek());
+    assertEquals(JsonToken.BEGIN_OBJECT, reader.peek());
     reader.beginObject();
-    assertEquals(NAME, reader.peek());
+    assertEquals(JsonToken.NAME, reader.peek());
     assertEquals("", reader.nextName());
     assertEquals(JsonToken.BOOLEAN, reader.peek());
     assertEquals(true, reader.nextBoolean());
@@ -1672,45 +1666,45 @@ private String repeat(char c, int count) {
   }
 
   public void testMalformedDocuments() throws IOException {
-    assertDocument("{]", BEGIN_OBJECT, IOException.class);
-    assertDocument("{,", BEGIN_OBJECT, IOException.class);
-    assertDocument("{{", BEGIN_OBJECT, IOException.class);
-    assertDocument("{[", BEGIN_OBJECT, IOException.class);
-    assertDocument("{:", BEGIN_OBJECT, IOException.class);
-    assertDocument("{\"name\",", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{\"name\",", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{\"name\":}", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{\"name\"::", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{\"name\":,", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{\"name\"=}", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{\"name\"=>}", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{\"name\"=>\"string\":", BEGIN_OBJECT, NAME, STRING, IOException.class);
-    assertDocument("{\"name\"=>\"string\"=", BEGIN_OBJECT, NAME, STRING, IOException.class);
-    assertDocument("{\"name\"=>\"string\"=>", BEGIN_OBJECT, NAME, STRING, IOException.class);
-    assertDocument("{\"name\"=>\"string\",", BEGIN_OBJECT, NAME, STRING, IOException.class);
-    assertDocument("{\"name\"=>\"string\",\"name\"", BEGIN_OBJECT, NAME, STRING, NAME);
-    assertDocument("[}", BEGIN_ARRAY, IOException.class);
-    assertDocument("[,]", BEGIN_ARRAY, NULL, NULL, END_ARRAY);
-    assertDocument("{", BEGIN_OBJECT, IOException.class);
-    assertDocument("{\"name\"", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{\"name\",", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{'name'", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{'name',", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{name", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("[", BEGIN_ARRAY, IOException.class);
-    assertDocument("[string", BEGIN_ARRAY, STRING, IOException.class);
-    assertDocument("[\"string\"", BEGIN_ARRAY, STRING, IOException.class);
-    assertDocument("['string'", BEGIN_ARRAY, STRING, IOException.class);
-    assertDocument("[123", BEGIN_ARRAY, NUMBER, IOException.class);
-    assertDocument("[123,", BEGIN_ARRAY, NUMBER, IOException.class);
-    assertDocument("{\"name\":123", BEGIN_OBJECT, NAME, NUMBER, IOException.class);
-    assertDocument("{\"name\":123,", BEGIN_OBJECT, NAME, NUMBER, IOException.class);
-    assertDocument("{\"name\":\"string\"", BEGIN_OBJECT, NAME, STRING, IOException.class);
-    assertDocument("{\"name\":\"string\",", BEGIN_OBJECT, NAME, STRING, IOException.class);
-    assertDocument("{\"name\":'string'", BEGIN_OBJECT, NAME, STRING, IOException.class);
-    assertDocument("{\"name\":'string',", BEGIN_OBJECT, NAME, STRING, IOException.class);
-    assertDocument("{\"name\":false", BEGIN_OBJECT, NAME, BOOLEAN, IOException.class);
-    assertDocument("{\"name\":false,,", BEGIN_OBJECT, NAME, BOOLEAN, IOException.class);
+    assertDocument("{]", JsonToken.BEGIN_OBJECT, IOException.class);
+    assertDocument("{,", JsonToken.BEGIN_OBJECT, IOException.class);
+    assertDocument("{{", JsonToken.BEGIN_OBJECT, IOException.class);
+    assertDocument("{[", JsonToken.BEGIN_OBJECT, IOException.class);
+    assertDocument("{:", JsonToken.BEGIN_OBJECT, IOException.class);
+    assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
+    assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
+    assertDocument("{\"name\":}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
+    assertDocument("{\"name\"::", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
+    assertDocument("{\"name\":,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
+    assertDocument("{\"name\"=}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
+    assertDocument("{\"name\"=>}", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
+    assertDocument("{\"name\"=>\"string\":", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
+    assertDocument("{\"name\"=>\"string\"=", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
+    assertDocument("{\"name\"=>\"string\"=>", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
+    assertDocument("{\"name\"=>\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
+    assertDocument("{\"name\"=>\"string\",\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, JsonToken.NAME);
+    assertDocument("[}", JsonToken.BEGIN_ARRAY, IOException.class);
+    assertDocument("[,]", JsonToken.BEGIN_ARRAY, JsonToken.NULL, JsonToken.NULL, JsonToken.END_ARRAY);
+    assertDocument("{", JsonToken.BEGIN_OBJECT, IOException.class);
+    assertDocument("{\"name\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
+    assertDocument("{\"name\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
+    assertDocument("{'name'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
+    assertDocument("{'name',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
+    assertDocument("{name", JsonToken.BEGIN_OBJECT, JsonToken.NAME, IOException.class);
+    assertDocument("[", JsonToken.BEGIN_ARRAY, IOException.class);
+    assertDocument("[string", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
+    assertDocument("[\"string\"", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
+    assertDocument("['string'", JsonToken.BEGIN_ARRAY, JsonToken.STRING, IOException.class);
+    assertDocument("[123", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
+    assertDocument("[123,", JsonToken.BEGIN_ARRAY, JsonToken.NUMBER, IOException.class);
+    assertDocument("{\"name\":123", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
+    assertDocument("{\"name\":123,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.NUMBER, IOException.class);
+    assertDocument("{\"name\":\"string\"", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
+    assertDocument("{\"name\":\"string\",", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
+    assertDocument("{\"name\":'string'", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
+    assertDocument("{\"name\":'string',", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.STRING, IOException.class);
+    assertDocument("{\"name\":false", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
+    assertDocument("{\"name\":false,,", JsonToken.BEGIN_OBJECT, JsonToken.NAME, JsonToken.BOOLEAN, IOException.class);
   }
 
   /**
@@ -1733,23 +1727,23 @@ private void assertDocument(String document, Object... expectations) throws IOEx
     JsonReader reader = new JsonReader(reader(document));
     reader.setLenient(true);
     for (Object expectation : expectations) {
-      if (expectation == BEGIN_OBJECT) {
+      if (expectation == JsonToken.BEGIN_OBJECT) {
         reader.beginObject();
-      } else if (expectation == BEGIN_ARRAY) {
+      } else if (expectation == JsonToken.BEGIN_ARRAY) {
         reader.beginArray();
-      } else if (expectation == END_OBJECT) {
+      } else if (expectation == JsonToken.END_OBJECT) {
         reader.endObject();
-      } else if (expectation == END_ARRAY) {
+      } else if (expectation == JsonToken.END_ARRAY) {
         reader.endArray();
-      } else if (expectation == NAME) {
+      } else if (expectation == JsonToken.NAME) {
         assertEquals("name", reader.nextName());
-      } else if (expectation == BOOLEAN) {
+      } else if (expectation == JsonToken.BOOLEAN) {
         assertEquals(false, reader.nextBoolean());
-      } else if (expectation == STRING) {
+      } else if (expectation == JsonToken.STRING) {
         assertEquals("string", reader.nextString());
-      } else if (expectation == NUMBER) {
+      } else if (expectation == JsonToken.NUMBER) {
         assertEquals(123, reader.nextInt());
-      } else if (expectation == NULL) {
+      } else if (expectation == JsonToken.NULL) {
         reader.nextNull();
       } else if (expectation == IOException.class) {
         try {
diff --git a/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java b/gson/src/test/java/com/economic/persistgson/stream/JsonWriterTest.java
similarity index 99%
rename from gson/src/test/java/com/google/gson/stream/JsonWriterTest.java
rename to gson/src/test/java/com/economic/persistgson/stream/JsonWriterTest.java
index 34dc91402..581ab862c 100644
--- a/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java
+++ b/gson/src/test/java/com/economic/persistgson/stream/JsonWriterTest.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.economic.persistgson.stream;
+
+import com.economic.persistgson.stream.JsonWriter;
 
 import java.io.IOException;
 import java.io.StringWriter;
diff --git a/gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java b/gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java
deleted file mode 100644
index 0959ee429..000000000
--- a/gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java
+++ /dev/null
@@ -1,177 +0,0 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import com.google.gson.internal.$Gson$Types;
-
-import com.google.gson.internal.Primitives;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.ParameterizedType;
-import java.lang.reflect.Type;
-
-
-/**
- * This class contains some test fixtures for Parameterized types. These classes should ideally
- * belong either in the common or functional package, but they are placed here because they need
- * access to package protected elements of com.google.gson.
- *
- * @author Inderjeet Singh
- * @author Joel Leitch
- */
-public class ParameterizedTypeFixtures {
-
-  public static class MyParameterizedType<T> {
-    public final T value;
-    public MyParameterizedType(T value) {
-      this.value = value;
-    }
-    public T getValue() {
-      return value;
-    }
-
-    public String getExpectedJson() {
-      String valueAsJson = getExpectedJson(value);
-      return String.format("{\"value\":%s}", valueAsJson);
-    }
-
-    private String getExpectedJson(Object obj) {
-      Class<?> clazz = obj.getClass();
-      if (Primitives.isWrapperType(Primitives.wrap(clazz))) {
-        return obj.toString();
-      } else if (obj.getClass().equals(String.class)) {
-        return "\"" + obj.toString() + "\"";
-      } else {
-        // Try invoking a getExpectedJson() method if it exists
-        try {
-          Method method = clazz.getMethod("getExpectedJson");
-          Object results = method.invoke(obj);
-          return (String) results;
-        } catch (SecurityException e) {
-          throw new RuntimeException(e);
-        } catch (NoSuchMethodException e) {
-          throw new RuntimeException(e);
-        } catch (IllegalArgumentException e) {
-          throw new RuntimeException(e);
-        } catch (IllegalAccessException e) {
-          throw new RuntimeException(e);
-        } catch (InvocationTargetException e) {
-          throw new RuntimeException(e);
-        }
-      }
-    }
-
-    @Override
-    public int hashCode() {
-      return value == null ? 0 : value.hashCode();
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public boolean equals(Object obj) {
-      if (this == obj) {
-        return true;
-      }
-      if (obj == null) {
-        return false;
-      }
-      if (getClass() != obj.getClass()) {
-        return false;
-      }
-      MyParameterizedType<T> other = (MyParameterizedType<T>) obj;
-      if (value == null) {
-        if (other.value != null) {
-          return false;
-        }
-      } else if (!value.equals(other.value)) {
-        return false;
-      }
-      return true;
-    }
-  }
-
-  public static class MyParameterizedTypeInstanceCreator<T>
-      implements InstanceCreator<MyParameterizedType<T>>{
-    private final T instanceOfT;
-    /**
-     * Caution the specified instance is reused by the instance creator for each call.
-     * This means that the fields of the same objects will be overwritten by Gson.
-     * This is usually fine in tests since there we deserialize just once, but quite
-     * dangerous in practice.
-     *
-     * @param instanceOfT
-     */
-    public MyParameterizedTypeInstanceCreator(T instanceOfT) {
-      this.instanceOfT = instanceOfT;
-    }
-    @Override public MyParameterizedType<T> createInstance(Type type) {
-      return new MyParameterizedType<T>(instanceOfT);
-    }
-  }
-
-  public static final class MyParameterizedTypeAdapter<T>
-  implements JsonSerializer<MyParameterizedType<T>>, JsonDeserializer<MyParameterizedType<T>> {
-    @SuppressWarnings("unchecked")
-    public static<T> String getExpectedJson(MyParameterizedType<T> obj) {
-      Class<T> clazz = (Class<T>) obj.value.getClass();
-      boolean addQuotes = !clazz.isArray() && !Primitives.unwrap(clazz).isPrimitive();
-      StringBuilder sb = new StringBuilder("{\"");
-      sb.append(obj.value.getClass().getSimpleName()).append("\":");
-      if (addQuotes) {
-        sb.append("\"");
-      }
-      sb.append(obj.value.toString());
-      if (addQuotes) {
-        sb.append("\"");
-      }
-      sb.append("}");
-      return sb.toString();
-    }
-
-    @Override public JsonElement serialize(MyParameterizedType<T> src, Type classOfSrc,
-        JsonSerializationContext context) {
-      JsonObject json = new JsonObject();
-      T value = src.getValue();
-      json.add(value.getClass().getSimpleName(), context.serialize(value));
-      return json;
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override public MyParameterizedType<T> deserialize(JsonElement json, Type typeOfT,
-        JsonDeserializationContext context) throws JsonParseException {
-      Type genericClass = ((ParameterizedType) typeOfT).getActualTypeArguments()[0];
-      Class<?> rawType = $Gson$Types.getRawType(genericClass);
-      String className = rawType.getSimpleName();
-      JsonElement jsonElement = json.getAsJsonObject().get(className);
-
-      T value;
-      if (genericClass == Integer.class) {
-        value = (T) Integer.valueOf(jsonElement.getAsInt());
-      } else if (genericClass == String.class) {
-        value = (T) jsonElement.getAsString();
-      } else {
-        value = (T) jsonElement;
-      }
-
-      if (Primitives.isPrimitive(genericClass)) {
-        PrimitiveTypeAdapter typeAdapter = new PrimitiveTypeAdapter();
-        value = (T) typeAdapter.adaptType(value, rawType);
-      }
-      return new MyParameterizedType<T>(value);
-    }
-  }
-}
