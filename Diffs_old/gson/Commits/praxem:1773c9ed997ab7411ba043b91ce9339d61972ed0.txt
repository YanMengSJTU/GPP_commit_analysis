diff --git a/codegen/src/main/java/com/praxem/commons/utils/Amount.java b/codegen/src/main/java/com/praxem/commons/utils/Amount.java
new file mode 100644
index 000000000..cc5b9792e
--- /dev/null
+++ b/codegen/src/main/java/com/praxem/commons/utils/Amount.java
@@ -0,0 +1,242 @@
+package com.praxem.commons.utils;
+
+import java.math.BigDecimal;
+import java.math.MathContext;
+import java.math.RoundingMode;
+
+public class Amount extends Number implements Comparable<IAmount>, IAmount
+{
+	private static final long serialVersionUID = 8157002248669941957L;
+
+	private BigDecimal bigDecimal;
+	
+	public Amount()
+	{
+		setBigDecimal(new BigDecimal(0, MathContext.DECIMAL128));
+		normalize();
+	}
+	
+	public Amount(BigDecimal amount)
+	{
+		setBigDecimal(new BigDecimal(amount.toString(), MathContext.DECIMAL128));
+		normalize();
+	}
+	
+	public Amount(String amount)
+	{
+		setBigDecimal(new BigDecimal(amount, MathContext.DECIMAL128));
+		normalize();
+	}
+	
+	private void normalize()
+	{
+		setBigDecimal(getBigDecimal().setScale(2, RoundingMode.HALF_UP));
+	}
+	
+	public static final Amount ZERO = new Amount("0");
+	
+	@Override
+   public double doubleValue()
+   {
+	   return getBigDecimal().doubleValue();
+   }
+
+	@Override
+   public float floatValue()
+   {
+	   return getBigDecimal().floatValue();
+   }
+
+	@Override
+   public int intValue()
+   {
+	   return getBigDecimal().intValue();
+   }
+
+	@Override
+   public long longValue()
+   {
+	   return getBigDecimal().longValue();
+   }
+
+	@Override
+   public byte byteValue()
+   {
+	   return getBigDecimal().byteValue();
+   }
+
+	@Override
+   public short shortValue()
+   {
+	   return getBigDecimal().shortValue();
+   }
+
+	@Override
+   public boolean equals(Object arg0)
+   {
+		IAmount a = (IAmount)arg0;
+		return getBigDecimal().equals(a.getBigDecimal());
+   }
+
+	@Override
+   public int hashCode()
+   {
+	   return getBigDecimal().hashCode();
+   }
+
+	@Override
+   public String toString()
+   {
+	   return getBigDecimal().toString();
+   }
+
+	@Override
+   public int compareTo(IAmount arg0)
+   {
+	   return getBigDecimal().compareTo(arg0.getBigDecimal());
+   }
+	
+	public static void main(String[] args)
+   {
+	   Amount amount = null; 
+	   
+	   try
+	   {
+	      amount = new Amount("123sewer");
+	   }
+	   catch (NumberFormatException e)
+	   {
+	   	System.out.println("test");
+	   }
+   }
+
+	@Override
+   public Amount add(IAmount amount)
+   {
+	   return new Amount(getBigDecimal().add(amount.getBigDecimal()));
+	   
+   }
+
+	@Override
+   public Amount multiply(IAmount amount)
+   {
+		return new Amount(getBigDecimal().multiply(amount.getBigDecimal()));
+	   
+   }
+
+	@Override
+   public Amount substract(IAmount amount)
+   {
+		return new Amount(getBigDecimal().subtract(amount.getBigDecimal()));
+	   
+   }
+
+	@Override
+   public Amount divide(IAmount amount)
+   {
+		return new Amount(getBigDecimal().divide(amount.getBigDecimal()));
+	   
+   }
+
+	@Override
+   public IAmount add(Integer integer)
+   {
+	   return new Amount(getBigDecimal().add(new BigDecimal(integer)));
+	   
+   }
+
+	@Override
+   public IAmount add(Double double_)
+   {
+	   return new Amount(getBigDecimal().add(new BigDecimal(double_)));
+	   
+   }
+
+	@Override
+   public IAmount add(BigDecimal bigDecimal)
+   {
+	   return new Amount(getBigDecimal().add(bigDecimal));
+	   
+   }
+
+	@Override
+   public IAmount multiply(Integer integer)
+   {
+		return new Amount(getBigDecimal().multiply(new BigDecimal(integer)));
+	   
+   }
+
+	@Override
+   public IAmount multiply(Double double_)
+   {
+		return new Amount(getBigDecimal().multiply(new BigDecimal(double_)));
+	   
+   }
+
+	@Override
+   public IAmount multiply(BigDecimal bigDecimal)
+   {
+		return new Amount(getBigDecimal().multiply(bigDecimal));
+	   
+   }
+
+	@Override
+   public IAmount substract(Integer integer)
+   {
+		return new Amount(getBigDecimal().subtract(new BigDecimal(integer)));
+	   
+   }
+
+	@Override
+   public IAmount substract(Double double_)
+   {
+		return new Amount(getBigDecimal().subtract(new BigDecimal(double_)));
+	   
+   }
+
+	@Override
+   public IAmount substract(BigDecimal bigDecimal)
+   {
+		return new Amount(getBigDecimal().subtract(bigDecimal));
+	   
+   }
+
+	@Override
+   public IAmount divide(Integer integer)
+   {
+		return new Amount(getBigDecimal().divide(new BigDecimal(integer)));
+	   
+   }
+
+	@Override
+   public IAmount divide(Double double_)
+   {
+		return new Amount(getBigDecimal().divide(new BigDecimal(double_)));
+	   
+   }
+
+	@Override
+   public IAmount divide(BigDecimal bigDecimal)
+   {
+		return new Amount(getBigDecimal().divide(bigDecimal));
+	   
+   }
+
+	public BigDecimal getBigDecimal()
+   {
+	   return bigDecimal;
+   }
+
+	public void setBigDecimal(BigDecimal bigDecimal)
+   {
+	   this.bigDecimal = bigDecimal;
+   }
+
+	@Override
+   public boolean equalsToZero()
+   {
+	   return this.bigDecimal.equals(BigDecimal.ZERO);
+   }
+	
+	
+}
diff --git a/codegen/src/main/java/com/praxem/commons/utils/IAmount.java b/codegen/src/main/java/com/praxem/commons/utils/IAmount.java
new file mode 100644
index 000000000..241489d5f
--- /dev/null
+++ b/codegen/src/main/java/com/praxem/commons/utils/IAmount.java
@@ -0,0 +1,45 @@
+package com.praxem.commons.utils;
+
+import java.math.BigDecimal;
+
+public interface IAmount extends Comparable<IAmount>
+{
+   public IAmount add(IAmount amount);
+   
+   public IAmount add(Integer integer);
+   
+   public IAmount add(Double double_);
+   
+   public IAmount add(BigDecimal bigDecimal);
+   
+   
+   public IAmount multiply(IAmount amount);
+   
+   public IAmount multiply(Integer integer);
+   
+   public IAmount multiply(Double double_);
+   
+   public IAmount multiply(BigDecimal bigDecimal);
+   
+   
+   public IAmount substract(IAmount amount);
+   
+   public IAmount substract(Integer integer);
+   
+   public IAmount substract(Double double_);
+   
+   public IAmount substract(BigDecimal bigDecimal);
+   
+   
+   public IAmount divide(IAmount amount);
+   
+   public IAmount divide(Integer integer);
+   
+   public IAmount divide(Double double_);
+   
+   public IAmount divide(BigDecimal bigDecimal);
+   
+   public BigDecimal getBigDecimal();
+   
+   public boolean equalsToZero();
+}
diff --git a/codegen/src/main/java/com/praxem/commons/utils/SaveMethod.java b/codegen/src/main/java/com/praxem/commons/utils/SaveMethod.java
new file mode 100644
index 000000000..7a52e7c35
--- /dev/null
+++ b/codegen/src/main/java/com/praxem/commons/utils/SaveMethod.java
@@ -0,0 +1,6 @@
+package com.praxem.commons.utils;
+
+public enum SaveMethod
+{
+   FULL, CLEAN  
+}
diff --git a/gson/src/main/java/com/google/gson/Gson.java b/gson/src/main/java/com/google/gson/Gson.java
index edb2783da..e004e0aa3 100644
--- a/gson/src/main/java/com/google/gson/Gson.java
+++ b/gson/src/main/java/com/google/gson/Gson.java
@@ -55,6 +55,7 @@
 import com.google.gson.stream.JsonToken;
 import com.google.gson.stream.JsonWriter;
 import com.google.gson.stream.MalformedJsonException;
+import com.praxem.commons.utils.Amount;
 
 /**
  * This is the main class for using Gson. Gson is typically used by first constructing a
@@ -229,6 +230,7 @@ public Gson() {
     factories.add(TypeAdapters.CHARACTER_FACTORY);
     factories.add(TypeAdapters.STRING_BUILDER_FACTORY);
     factories.add(TypeAdapters.STRING_BUFFER_FACTORY);
+    factories.add(TypeAdapters.newFactory(Amount.class, TypeAdapters.AMOUNT));
     factories.add(TypeAdapters.newFactory(BigDecimal.class, TypeAdapters.BIG_DECIMAL));
     factories.add(TypeAdapters.newFactory(BigInteger.class, TypeAdapters.BIG_INTEGER));
     factories.add(TypeAdapters.URL_FACTORY);
diff --git a/gson/src/main/java/com/google/gson/InstanceInitializer.java b/gson/src/main/java/com/google/gson/InstanceInitializer.java
new file mode 100644
index 000000000..05aad6728
--- /dev/null
+++ b/gson/src/main/java/com/google/gson/InstanceInitializer.java
@@ -0,0 +1,6 @@
+package com.google.gson;
+
+public interface InstanceInitializer<T>
+{
+   public void initialize(JsonGlobalContext globalContext, T t);
+}
diff --git a/gson/src/main/java/com/google/gson/JsonArray.java b/gson/src/main/java/com/google/gson/JsonArray.java
index 96fe23edb..5a5037e3c 100644
--- a/gson/src/main/java/com/google/gson/JsonArray.java
+++ b/gson/src/main/java/com/google/gson/JsonArray.java
@@ -22,6 +22,8 @@
 import java.util.Iterator;
 import java.util.List;
 
+import com.praxem.commons.utils.Amount;
+
 /**
  * A class representing an array type in Json. An array is a list of {@link JsonElement}s each of
  * which can be of a different type. This is an ordered list, meaning that the order in which
@@ -254,8 +256,19 @@ public BigDecimal getAsBigDecimal() {
     }
     throw new IllegalStateException();
   }
+  
+  
 
-  /**
+  @Override
+  public Amount getAsAmount()
+  {
+	    if (elements.size() == 1) {
+	       return elements.get(0).getAsAmount();
+	     }
+	     throw new IllegalStateException();
+  }
+
+/**
    * convenience method to get this array as a {@link BigInteger} if it contains a single element.
    *
    * @return get this element as a {@link BigInteger} if it is single element array.
diff --git a/gson/src/main/java/com/google/gson/JsonElement.java b/gson/src/main/java/com/google/gson/JsonElement.java
index 8f393aea8..b92fd332d 100644
--- a/gson/src/main/java/com/google/gson/JsonElement.java
+++ b/gson/src/main/java/com/google/gson/JsonElement.java
@@ -18,6 +18,8 @@
 
 import com.google.gson.internal.Streams;
 import com.google.gson.stream.JsonWriter;
+import com.praxem.commons.utils.Amount;
+
 import java.io.IOException;
 import java.io.StringWriter;
 import java.math.BigDecimal;
@@ -285,6 +287,10 @@ public BigDecimal getAsBigDecimal() {
     throw new UnsupportedOperationException(getClass().getSimpleName());
   }
 
+  public Amount getAsAmount() {
+	    throw new UnsupportedOperationException(getClass().getSimpleName());
+	  }
+  
   /**
    * convenience method to get this element as a {@link BigInteger}.
    *
diff --git a/gson/src/main/java/com/google/gson/JsonGlobalContext.java b/gson/src/main/java/com/google/gson/JsonGlobalContext.java
index b75ecc58a..085753172 100644
--- a/gson/src/main/java/com/google/gson/JsonGlobalContext.java
+++ b/gson/src/main/java/com/google/gson/JsonGlobalContext.java
@@ -1,6 +1,10 @@
 package com.google.gson;
 
+import com.praxem.commons.utils.SaveMethod;
+
 public interface JsonGlobalContext
 {
    public JsonGlobalContext getContext();
+   
+   public SaveMethod getSaveMethod();
 }
diff --git a/gson/src/main/java/com/google/gson/JsonPrimitive.java b/gson/src/main/java/com/google/gson/JsonPrimitive.java
index e2443d435..9748a7839 100644
--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java
+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java
@@ -21,6 +21,7 @@
 
 import com.google.gson.internal.$Gson$Preconditions;
 import com.google.gson.internal.LazilyParsedNumber;
+import com.praxem.commons.utils.Amount;
 
 /**
  * A class representing a Json primitive value. A primitive value
@@ -203,8 +204,16 @@ public double getAsDouble() {
   public BigDecimal getAsBigDecimal() {
     return value instanceof BigDecimal ? (BigDecimal) value : new BigDecimal(value.toString());
   }
+  
+  
 
-  /**
+  @Override
+  public Amount getAsAmount()
+  {	
+	  return value instanceof Amount ? (Amount) value : new Amount(value.toString());
+  }
+
+/**
    * convenience method to get this element as a {@link BigInteger}.
    *
    * @return get this element as a {@link BigInteger}.
diff --git a/gson/src/main/java/com/google/gson/annotations/ExcludeWhenCleanSave.java b/gson/src/main/java/com/google/gson/annotations/ExcludeWhenCleanSave.java
new file mode 100644
index 000000000..67b759c4e
--- /dev/null
+++ b/gson/src/main/java/com/google/gson/annotations/ExcludeWhenCleanSave.java
@@ -0,0 +1,12 @@
+package com.google.gson.annotations;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface ExcludeWhenCleanSave
+{
+}
diff --git a/gson/src/main/java/com/google/gson/internal/Excluder.java b/gson/src/main/java/com/google/gson/internal/Excluder.java
index c1277d65f..fac7a914f 100644
--- a/gson/src/main/java/com/google/gson/internal/Excluder.java
+++ b/gson/src/main/java/com/google/gson/internal/Excluder.java
@@ -16,25 +16,26 @@
 
 package com.google.gson.internal;
 
+import java.io.IOException;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
 import com.google.gson.ExclusionStrategy;
 import com.google.gson.FieldAttributes;
 import com.google.gson.Gson;
-import com.google.gson.JsonGlobalContext;
 import com.google.gson.TypeAdapter;
 import com.google.gson.TypeAdapterFactory;
+import com.google.gson.annotations.ExcludeWhenCleanSave;
 import com.google.gson.annotations.Expose;
 import com.google.gson.annotations.Since;
 import com.google.gson.annotations.Until;
 import com.google.gson.reflect.TypeToken;
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonWriter;
-
-import java.io.IOException;
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
+import com.praxem.commons.utils.SaveMethod;
 
 /**
  * This class selects which fields and types to omit. It is configurable,
@@ -59,6 +60,7 @@
   private boolean requireExpose;
   private List<ExclusionStrategy> serializationStrategies = Collections.emptyList();
   private List<ExclusionStrategy> deserializationStrategies = Collections.emptyList();
+  private SaveMethod saveMethod;
 
   @Override protected Excluder clone() {
     try {
@@ -106,11 +108,13 @@ public Excluder withExclusionStrategy(ExclusionStrategy exclusionStrategy,
       result.deserializationStrategies
           = new ArrayList<ExclusionStrategy>(deserializationStrategies);
       result.deserializationStrategies.add(exclusionStrategy);
-    }
+    } 
     return result;
   }
 
   public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> type) {
+    this.saveMethod = gson.getGlobalContext().getSaveMethod();
+	 
     Class<?> rawType = type.getRawType();
     final boolean skipSerialize = excludeClass(rawType, true);
     final boolean skipDeserialize = excludeClass(rawType, false);
@@ -149,6 +153,11 @@ public Excluder withExclusionStrategy(ExclusionStrategy exclusionStrategy,
   }
 
   public boolean excludeField(Field field, boolean serialize) {
+	 ExcludeWhenCleanSave exAnnotation =  field.getAnnotation(ExcludeWhenCleanSave.class);
+	 if (serialize && saveMethod == SaveMethod.CLEAN && exAnnotation != null) {
+	    return true; 
+	 }
+	  
     if ((modifiers & field.getModifiers()) != 0) {
       return true;
     }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
index 125090229..f123473fc 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -28,6 +28,7 @@
 import com.google.gson.FieldNamingStrategy;
 import com.google.gson.Gson;
 import com.google.gson.Initializer;
+import com.google.gson.InstanceInitializer;
 import com.google.gson.JsonGlobalContext;
 import com.google.gson.JsonSyntaxException;
 import com.google.gson.TypeAdapter;
@@ -206,7 +207,8 @@ protected BoundField(String name, boolean serialized, boolean deserialized, Json
       this.boundFields = boundFields;
     }
 
-    @Override public T read(JsonReader in) throws IOException {
+    @SuppressWarnings("unchecked")
+   @Override public T read(JsonReader in) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -221,7 +223,7 @@ protected BoundField(String name, boolean serialized, boolean deserialized, Json
           String name = in.nextName();
           BoundField field = boundFields.get(name);
           
-          if (globalContext == null)
+          if (globalContext == null && field != null)
          	 globalContext = field.globalContext;
           
           if (field == null || !field.deserialized) {
@@ -238,7 +240,20 @@ protected BoundField(String name, boolean serialized, boolean deserialized, Json
       in.endObject();
       
       if (instance instanceof Initializer)
+      {
+      	if (globalContext == null)
+      		System.out.println("Warning - globalContext is null");
+      	
       	((Initializer)instance).initialize(globalContext);
+      }
+      
+      if (instance instanceof InstanceInitializer<?>)
+      {
+      	if (globalContext == null)
+      		System.out.println("Warning - globalContext is null");
+      	
+      	((InstanceInitializer<T>)instance).initialize(globalContext, instance);
+      }
       
       return instance;
     }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
index c2839bc89..6dc4b34a7 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
@@ -56,6 +56,7 @@
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonToken;
 import com.google.gson.stream.JsonWriter;
+import com.praxem.commons.utils.Amount;
 
 /**
  * Type adapters for basic types.
@@ -424,6 +425,24 @@ public void write(JsonWriter out, String value) throws IOException {
     }
   };
   
+  public static final TypeAdapter<Amount> AMOUNT = new TypeAdapter<Amount>() {
+	    @Override public Amount read(JsonReader in) throws IOException {
+	      if (in.peek() == JsonToken.NULL) {
+	        in.nextNull();
+	        return null;
+	      }
+	      try {
+	        return new Amount(in.nextString());
+	      } catch (NumberFormatException e) {
+	        throw new JsonSyntaxException(e);
+	      }
+	    }
+
+	    @Override public void write(JsonWriter out, Amount value) throws IOException {
+	      out.value(value);
+	    }
+	  };
+  
   public static final TypeAdapter<BigInteger> BIG_INTEGER = new TypeAdapter<BigInteger>() {
     @Override public BigInteger read(JsonReader in) throws IOException {
       if (in.peek() == JsonToken.NULL) {
