diff --git a/codegen/pom.xml b/codegen/pom.xml
deleted file mode 100644
index c2f9499a3..000000000
--- a/codegen/pom.xml
+++ /dev/null
@@ -1,182 +0,0 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>com.google.code.gson</groupId>
-  <artifactId>gson-codegen</artifactId>
-  <packaging>jar</packaging>
-  <version>1.0-SNAPSHOT</version>
-  <inceptionYear>2008</inceptionYear>
-  <name>Gson Code Gen</name>
-  <parent>
-    <groupId>org.sonatype.oss</groupId>
-    <artifactId>oss-parent</artifactId>
-    <version>7</version>
-  </parent>
-  <url>http://code.google.com/p/google-gson/</url>
-  <description>Google Gson grab bag of utilities, type adapters, etc.</description>
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-  </properties>
-  <licenses>
-    <license>
-      <name>The Apache Software License, Version 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-      <distribution>repo</distribution>
-    </license>
-  </licenses>
-  <scm>
-    <connection>scm:svn:http://google-gson.googlecode.com/svn/trunk/extras</connection>
-    <developerConnection>scm:svn:https://google-gson.googlecode.com/svn/trunk/extras</developerConnection>
-    <url>http://google-gson.codegoogle.com/svn/trunk/extras</url>
-  </scm>
-  <issueManagement>
-    <system>Google Code Issue Tracking</system>
-    <url>http://code.google.com/p/google-gson/issues/list</url>
-  </issueManagement>
-  <organization>
-    <name>Google, Inc.</name>
-    <url>http://www.google.com</url>
-  </organization>
-  <dependencies>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>3.8.2</version>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-  <profiles>
-    <!-- Activate PGP signing only when performing a release -->
-    <profile>
-      <id>release-sign-artifacts</id>
-      <activation>
-        <property>
-          <name>performRelease</name>
-          <value>true</value>
-        </property>
-      </activation>
-      <build>
-        <plugins>
-          <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-gpg-plugin</artifactId>
-            <version>1.4</version>
-            <executions>
-              <execution>
-                <id>sign-artifacts</id>
-                <phase>verify</phase>
-                <goals>
-                  <goal>sign</goal>
-                </goals>
-              </execution>
-            </executions>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-  </profiles>  
-  <build>
-    <defaultGoal>package</defaultGoal>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>2.5.1</version>
-        <configuration>
-          <source>1.6</source>
-          <target>1.6</target>
-          <compilerArgument>-proc:none</compilerArgument>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-jar-plugin</artifactId>
-        <version>2.4</version>
-        <executions>
-          <execution>
-            <phase>package</phase>
-            <goals>
-              <goal>jar</goal>
-            </goals>
-          </execution>
-        </executions>
-        <configuration>
-          <archive>
-            <addMavenDescriptor>false</addMavenDescriptor>
-          </archive>
-        </configuration>
-      </plugin>
-      <plugin>
-         <groupId>org.apache.maven.plugins</groupId>
-         <artifactId>maven-source-plugin</artifactId>
-         <version>2.1.2</version>
-         <executions>
-           <execution>
-             <id>attach-sources</id>
-             <phase>verify</phase>
-             <goals>
-               <goal>jar</goal>
-             </goals>
-           </execution>
-         </executions>
-       </plugin>
-       <plugin>
-         <groupId>org.apache.maven.plugins</groupId>
-         <artifactId>maven-javadoc-plugin</artifactId>
-         <version>2.8.1</version>
-         <executions>
-           <execution>
-             <id>attach-javadocs</id>
-             <goals>
-               <goal>jar</goal>
-             </goals>
-           </execution>
-         </executions>
-         <configuration>
-           <links>
-             <link>http://download.oracle.com/javase/1.5.0/docs/api/</link>
-           </links>
-           <version>true</version>
-           <show>public</show>
-         </configuration>
-       </plugin>
-       <plugin>
-         <groupId>org.apache.maven.plugins</groupId>
-         <artifactId>maven-eclipse-plugin</artifactId>
-         <version>2.9</version>
-         <configuration>
-           <downloadSources>true</downloadSources>
-           <downloadJavadocs>true</downloadJavadocs>
-           <workspace>
-             ../eclipse-ws/
-           </workspace>
-           <workspaceCodeStylesURL>
-             file:///${basedir}/../lib/gson-formatting-styles.xml
-           </workspaceCodeStylesURL>
-         </configuration>
-       </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-release-plugin</artifactId>
-        <!--  version>2.3.2</version -->
-        <configuration>
-          <arguments>-DenableCiProfile=true</arguments>
-          <tagBase>https://google-gson.googlecode.com/svn/tags/</tagBase>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-  <developers>
-    <developer>
-      <name>Inderjeet Singh</name>
-      <organization>Trymph Inc.</organization>
-    </developer>
-    <developer>
-      <name>Joel Leitch</name>
-      <organization>Google Inc.</organization>
-    </developer>
-    <developer>
-      <name>Jesse Wilson</name>
-      <organization>Square Inc.</organization>
-    </developer>
-  </developers>
-</project>
diff --git a/codegen/src/main/java/com/google/gson/codegen/CodeGen.java b/codegen/src/main/java/com/google/gson/codegen/CodeGen.java
deleted file mode 100644
index 011568ff9..000000000
--- a/codegen/src/main/java/com/google/gson/codegen/CodeGen.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Copyright (C) 2012 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.codegen;
-
-import javax.lang.model.element.Element;
-import javax.lang.model.element.ElementKind;
-import javax.lang.model.element.PackageElement;
-import javax.lang.model.element.TypeElement;
-
-public class CodeGen {
-  private CodeGen() {
-  }
-
-  public static PackageElement getPackage(Element type) {
-    while (type.getKind() != ElementKind.PACKAGE) {
-      type = type.getEnclosingElement();
-    }
-    return (PackageElement) type;
-  }
-
-  /**
-   * Returns a fully qualified class name to complement {@code type}.
-   */
-  public static String adapterName(TypeElement typeElement, String suffix) {
-    StringBuilder builder = new StringBuilder();
-    rawTypeToString(builder, typeElement, '$');
-    builder.append(suffix);
-    return builder.toString();
-  }
-
-  static void rawTypeToString(StringBuilder result, TypeElement type, char innerClassSeparator) {
-    String packageName = getPackage(type).getQualifiedName().toString();
-    String qualifiedName = type.getQualifiedName().toString();
-    result.append(packageName);
-    result.append('.');
-    result.append(
-        qualifiedName.substring(packageName.length() + 1).replace('.', innerClassSeparator));
-  }
-}
diff --git a/codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java b/codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java
deleted file mode 100644
index 1694d88ac..000000000
--- a/codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java
+++ /dev/null
@@ -1,21 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.codegen;
-
-public @interface GeneratedTypeAdapter {
-  Class<?>[] value() default {};
-}
diff --git a/codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java b/codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java
deleted file mode 100644
index cd542bc35..000000000
--- a/codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.codegen;
-
-import static java.lang.reflect.Modifier.FINAL;
-
-import java.io.IOException;
-import java.util.Set;
-
-import javax.annotation.processing.AbstractProcessor;
-import javax.annotation.processing.RoundEnvironment;
-import javax.annotation.processing.SupportedAnnotationTypes;
-import javax.annotation.processing.SupportedSourceVersion;
-import javax.lang.model.SourceVersion;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
-import javax.tools.Diagnostic;
-import javax.tools.JavaFileObject;
-
-@SupportedAnnotationTypes("com.google.gson.codegen.GeneratedTypeAdapter")
-@SupportedSourceVersion(SourceVersion.RELEASE_6)
-public final class GeneratedTypeAdapterProcessor extends AbstractProcessor {
-  @Override public boolean process(Set<? extends TypeElement> types, RoundEnvironment env) {
-    System.out.println("invoked GeneratedTypeAdapterProcessor");
-    try {
-      for (Element element : env.getElementsAnnotatedWith(GeneratedTypeAdapter.class)) {
-        writeAdapter((TypeElement) element);
-      }
-    } catch (IOException e) {
-      processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, e.getMessage());
-    }
-    return true;
-  }
-
-  private void writeAdapter(TypeElement type) throws IOException {
-    String typeAdapterName = CodeGen.adapterName(type, "$TypeAdapter");
-    JavaFileObject sourceFile = processingEnv.getFiler()
-        .createSourceFile(typeAdapterName, type);
-    System.out.println("Generating type adapter: " + typeAdapterName + " in " + sourceFile.getName());
-
-    JavaWriter writer = new JavaWriter(sourceFile.openWriter());
-    writer.addPackage(CodeGen.getPackage(type).getQualifiedName().toString());
-    writer.beginType(typeAdapterName, "class", FINAL, null);
-    writer.endType();
-    writer.close();
-  }
-}
diff --git a/codegen/src/main/java/com/google/gson/codegen/JavaWriter.java b/codegen/src/main/java/com/google/gson/codegen/JavaWriter.java
deleted file mode 100644
index ccba6c8cd..000000000
--- a/codegen/src/main/java/com/google/gson/codegen/JavaWriter.java
+++ /dev/null
@@ -1,443 +0,0 @@
-/**
- * Copyright (C) 2012 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.codegen;
-
-import java.io.IOException;
-import java.io.Writer;
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Modifier;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-/**
- * Emits Java source files.
- */
-public final class JavaWriter {
-  private static final Pattern TYPE_PATTERN = Pattern.compile("(?:[\\w$]+\\.)*([\\w$]+)");
-  private static final String INDENT = "  ";
-
-  /** Map fully qualified type names to their short names. */
-  private final Map<String, String> importedTypes = new HashMap<String, String>();
-
-  private String packagePrefix;
-  private final List<Scope> scopes = new ArrayList<Scope>();
-  private final Writer out;
-
-  /**
-   * @param out the stream to which Java source will be written. This should be
-   *     a buffered stream.
-   */
-  public JavaWriter(Writer out) {
-    this.out = out;
-  }
-
-  /**
-   * Emit a package declaration.
-   */
-  public void addPackage(String packageName) throws IOException {
-    if (this.packagePrefix != null) {
-      throw new IllegalStateException();
-    }
-    out.write("package ");
-    out.write(packageName);
-    out.write(";\n");
-    this.packagePrefix = packageName + ".";
-  }
-
-  /**
-   * Equivalent to {@code addImport(type.getName())}.
-   */
-  public void addImport(Class<?> type) throws IOException {
-    addImport(type.getName());
-  }
-
-  /**
-   * Emit an import for {@code type}. For the duration of the file, all
-   * references to this class will be automatically shortened.
-   */
-  public void addImport(String type) throws IOException {
-    Matcher matcher = TYPE_PATTERN.matcher(type);
-    if (!matcher.matches()) {
-      throw new IllegalArgumentException(type);
-    }
-    if (importedTypes.put(type, matcher.group(1)) != null) {
-      throw new IllegalArgumentException(type);
-    }
-    out.write("import ");
-    out.write(type);
-    out.write(";\n");
-  }
-
-  /**
-   * Emits a name like {@code java.lang.String} or {@code
-   * java.util.List<java.lang.String>}, shorting it with imports if
-   * possible.
-   */
-  private void type(String type) throws IOException {
-    if (this.packagePrefix == null) {
-      throw new IllegalStateException();
-    }
-
-    Matcher m = TYPE_PATTERN.matcher(type);
-    int pos = 0;
-    while (true) {
-      boolean found = m.find(pos);
-
-      // copy non-matching characters like "<"
-      int typeStart = found ? m.start() : type.length();
-      out.write(type, pos, typeStart - pos);
-
-      if (!found) {
-        break;
-      }
-
-      // copy a single class name, shortening it if possible
-      String name = m.group(0);
-      String imported;
-      if ((imported = importedTypes.get(name)) != null) {
-        out.write(imported);
-      } else if (name.startsWith(packagePrefix)
-          && name.indexOf('.', packagePrefix.length()) == -1) {
-        out.write(name.substring(packagePrefix.length()));
-      } else if (name.startsWith("java.lang.")) {
-        out.write(name.substring("java.lang.".length()));
-      } else {
-        out.write(name);
-      }
-      pos = m.end();
-    }
-  }
-
-  /**
-   * Emits a type declaration.
-   *
-   * @param kind such as "class", "interface" or "enum".
-   */
-  public void beginType(String type, String kind, int modifiers) throws IOException {
-    beginType(type, kind, modifiers, null);
-  }
-
-  /**
-   * Emits a type declaration.
-   *
-   * @param kind such as "class", "interface" or "enum".
-   * @param extendsType the class to extend, or null for no extends clause.
-   */
-  public void beginType(String type, String kind, int modifiers,
-      String extendsType, String... implementsTypes) throws IOException {
-    indent();
-    modifiers(modifiers);
-    out.write(kind);
-    out.write(" ");
-    type(type);
-    if (extendsType != null) {
-      out.write("\n");
-      indent();
-      out.write("    extends ");
-      type(extendsType);
-    }
-    if (implementsTypes.length > 0) {
-      out.write("\n");
-      indent();
-      out.write("    implements ");
-      for (int i = 0; i < implementsTypes.length; i++) {
-        if (i != 0) {
-          out.write(", ");
-        }
-        type(implementsTypes[i]);
-      }
-    }
-    out.write(" {\n");
-    pushScope(Scope.TYPE_DECLARATION);
-  }
-
-  /**
-   * Completes the current type declaration.
-   */
-  public void endType() throws IOException {
-    if (popScope() != Scope.TYPE_DECLARATION) {
-      throw new IllegalStateException();
-    }
-    indent();
-    out.write("}\n");
-  }
-
-  /**
-   * Emits a field declaration.
-   */
-  public void field(String type, String name, int modifiers) throws IOException {
-    field(type, name, modifiers, null);
-  }
-
-  public void field(String type, String name, int modifiers, String initialValue)
-      throws IOException {
-    indent();
-    modifiers(modifiers);
-    type(type);
-    out.write(" ");
-    out.write(name);
-
-    if (initialValue != null) {
-      out.write(" = ");
-      out.write(initialValue);
-    }
-    out.write(";\n");
-  }
-
-  /**
-   * Emit a method declaration.
-   *
-   * @param returnType the method's return type, or null for constructors.
-   * @param parameters alternating parameter types and names.
-   * @param name the method name, or the fully qualified class name for
-   *     constructors.
-   */
-  public void beginMethod(String returnType, String name, int modifiers, String... parameters)
-      throws IOException {
-    indent();
-    modifiers(modifiers);
-    if (returnType != null) {
-      type(returnType);
-      out.write(" ");
-      out.write(name);
-    } else {
-      type(name);
-    }
-    out.write("(");
-    for (int p = 0; p < parameters.length; ) {
-      if (p != 0) {
-        out.write(", ");
-      }
-      type(parameters[p++]);
-      out.write(" ");
-      type(parameters[p++]);
-    }
-    out.write(")");
-    if ((modifiers & Modifier.ABSTRACT) != 0) {
-      out.write(";\n");
-      pushScope(Scope.ABSTRACT_METHOD);
-    } else {
-      out.write(" {\n");
-      pushScope(Scope.NON_ABSTRACT_METHOD);
-    }
-  }
-
-  /**
-   * Annotates the next element with {@code annotation}. The annotation has no
-   * attributes.
-   */
-  public void annotation(String annotation) throws IOException {
-    indent();
-    out.write("@");
-    type(annotation);
-    out.write("\n");
-  }
-
-  /**
-   * Equivalent to {@code annotation(annotationType.getName())}.
-   */
-  public void annotation(Class<? extends Annotation> annotationType) throws IOException {
-    annotation(annotationType.getName());
-  }
-
-  /**
-   * @param pattern a code pattern like "int i = %s". Shouldn't contain a
-   * trailing semicolon or newline character.
-   */
-  public void statement(String pattern, Object... args) throws IOException {
-    checkInMethod();
-    indent();
-    out.write(String.format(pattern, args));
-    out.write(";\n");
-  }
-
-  /**
-   * @param controlFlow the control flow construct and its code, such as
-   *     "if (foo == 5)". Shouldn't contain braces or newline characters.
-   */
-  public void beginControlFlow(String controlFlow) throws IOException {
-    checkInMethod();
-    indent();
-    out.write(controlFlow);
-    out.write(" {\n");
-    pushScope(Scope.CONTROL_FLOW);
-  }
-
-  /**
-   * @param controlFlow the control flow construct and its code, such as
-   *     "else if (foo == 10)". Shouldn't contain braces or newline characters.
-   */
-  public void nextControlFlow(String controlFlow) throws IOException {
-    if (popScope() != Scope.CONTROL_FLOW) {
-      throw new IllegalArgumentException();
-    }
-
-    indent();
-    pushScope(Scope.CONTROL_FLOW);
-    out.write("} ");
-    out.write(controlFlow);
-    out.write(" {\n");
-  }
-
-  public void endControlFlow() throws IOException {
-    endControlFlow(null);
-  }
-
-  /**
-   * @param controlFlow the optional control flow construct and its code, such
-   *     as "while(foo == 20)". Only used for "do/while" control flows.
-   */
-  public void endControlFlow(String controlFlow) throws IOException {
-    if (popScope() != Scope.CONTROL_FLOW) {
-      throw new IllegalArgumentException();
-    }
-
-    indent();
-    if (controlFlow != null) {
-      out.write("} ");
-      out.write(controlFlow);
-      out.write(";\n");
-    } else {
-      out.write("}\n");
-    }
-  }
-
-  /**
-   * Completes the current method declaration.
-   */
-  public void endMethod() throws IOException {
-    Scope popped = popScope();
-    if (popped == Scope.NON_ABSTRACT_METHOD) {
-      indent();
-      out.write("}\n");
-    } else if (popped != Scope.ABSTRACT_METHOD) {
-      throw new IllegalStateException();
-    }
-  }
-
-  /**
-   * Returns the string literal representing {@code data}, including wrapping
-   * quotes.
-   */
-  public static String stringLiteral(String data) {
-    StringBuilder result = new StringBuilder();
-    result.append('"');
-    for (int i = 0; i < data.length(); i++) {
-      char c = data.charAt(i);
-      switch (c) {
-        case '"':
-          result.append("\\\"");
-          break;
-        case '\\':
-          result.append("\\\\");
-          break;
-        case '\t':
-          result.append("\\\t");
-          break;
-        case '\b':
-          result.append("\\\b");
-          break;
-        case '\n':
-          result.append("\\\n");
-          break;
-        case '\r':
-          result.append("\\\r");
-          break;
-        case '\f':
-          result.append("\\\f");
-          break;
-        default:
-          result.append(c);
-      }
-    }
-    result.append('"');
-    return result.toString();
-  }
-
-  public void close() throws IOException {
-    out.close();
-  }
-
-  /**
-   * Emit modifier names.
-   */
-  private void modifiers(int modifiers) throws IOException {
-    if ((modifiers & Modifier.PUBLIC) != 0) {
-      out.write("public ");
-    }
-    if ((modifiers & Modifier.PRIVATE) != 0) {
-      out.write("private ");
-    }
-    if ((modifiers & Modifier.PROTECTED) != 0) {
-      out.write("protected ");
-    }
-    if ((modifiers & Modifier.STATIC) != 0) {
-      out.write("static ");
-    }
-    if ((modifiers & Modifier.FINAL) != 0) {
-      out.write("final ");
-    }
-    if ((modifiers & Modifier.ABSTRACT) != 0) {
-      out.write("abstract ");
-    }
-    if ((modifiers & Modifier.SYNCHRONIZED) != 0) {
-      out.write("synchronized ");
-    }
-    if ((modifiers & Modifier.TRANSIENT) != 0) {
-      out.write("transient ");
-    }
-    if ((modifiers & Modifier.VOLATILE) != 0) {
-      out.write("volatile ");
-    }
-  }
-
-  private void indent() throws IOException {
-    for (int i = 0; i < scopes.size(); i++) {
-      out.write(INDENT);
-    }
-  }
-
-  private void checkInMethod() {
-    Scope scope = peekScope();
-    if (scope != Scope.NON_ABSTRACT_METHOD && scope != Scope.CONTROL_FLOW) {
-      throw new IllegalArgumentException();
-    }
-  }
-
-  private void pushScope(Scope pushed) {
-    scopes.add(pushed);
-  }
-
-  private Scope peekScope() {
-    return scopes.get(scopes.size() - 1);
-  }
-
-  private Scope popScope() {
-    return scopes.remove(scopes.size() - 1);
-  }
-
-  private enum Scope {
-    TYPE_DECLARATION,
-    ABSTRACT_METHOD,
-    NON_ABSTRACT_METHOD,
-    CONTROL_FLOW,
-  }
-}
diff --git a/codegen/src/main/resources/META-INF/services/javax.annotation.processing.Processor b/codegen/src/main/resources/META-INF/services/javax.annotation.processing.Processor
deleted file mode 100644
index a052da0c1..000000000
--- a/codegen/src/main/resources/META-INF/services/javax.annotation.processing.Processor
+++ /dev/null
@@ -1 +0,0 @@
-com.google.gson.codegen.GeneratedTypeAdapterProcessor
\ No newline at end of file
diff --git a/codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java b/codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java
deleted file mode 100644
index 855ee3faf..000000000
--- a/codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.codegen.functional;
-
-import junit.framework.TestCase;
-
-public class CodeGenFunctionalTest extends TestCase {
-
-  public void testGeneratedJson() {
-    Order order = new Order("toy", 10);
-    // TODO: figure out how to access the generated type adapter
-  }
-}
diff --git a/codegen/src/test/java/com/google/gson/codegen/functional/Order.java b/codegen/src/test/java/com/google/gson/codegen/functional/Order.java
deleted file mode 100644
index 916587f3b..000000000
--- a/codegen/src/test/java/com/google/gson/codegen/functional/Order.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.codegen.functional;
-
-import com.google.gson.codegen.GeneratedTypeAdapter;
-
-@GeneratedTypeAdapter
-final class Order {
-  private final String itemName;
-  private final int price;
-
-  public Order(String itemName, int price) {
-    this.itemName = itemName;
-    this.price = price;
-  }
-
-  public String getItemName() {
-    return itemName;
-  }
-
-  public int getAmount() {
-    return price;
-  }
-}
diff --git a/examples/android-proguard-example/AndroidManifest.xml b/examples/android-proguard-example/AndroidManifest.xml
deleted file mode 100755
index 7e9b1d8b0..000000000
--- a/examples/android-proguard-example/AndroidManifest.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-  package="com.google.gson.examples.android"
-  android:versionCode="1"
-  android:versionName="1.0">
-  <uses-sdk android:minSdkVersion="3"/>
-  <application android:icon="@drawable/icon" android:label="@string/app_name">
-    <activity android:name=".GsonProguardExampleActivity" 
-              android:label="@string/app_name" 
-              android:exported="true" 
-              android:icon="@drawable/icon"
-              android:configChanges="keyboardHidden|orientation" 
-              android:enabled="true">
-      <intent-filter>
-        <action android:name="android.intent.action.MAIN" />
-        <category android:name="android.intent.category.LAUNCHER" />
-      </intent-filter>
-    </activity>
-  </application>
-  <uses-permission android:name="android.permission.INTERNET" />
-</manifest> 
diff --git a/examples/android-proguard-example/default.properties b/examples/android-proguard-example/default.properties
deleted file mode 100644
index 7d4fed0b2..000000000
--- a/examples/android-proguard-example/default.properties
+++ /dev/null
@@ -1,12 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system use,
-# "build.properties", and override values to adapt the script to your
-# project structure.
-
-# Project target.
-target=android-3
-proguard.config=proguard.cfg
\ No newline at end of file
diff --git a/examples/android-proguard-example/proguard.cfg b/examples/android-proguard-example/proguard.cfg
deleted file mode 100644
index a1d8fe1ae..000000000
--- a/examples/android-proguard-example/proguard.cfg
+++ /dev/null
@@ -1,16 +0,0 @@
-##---------------Begin: proguard configuration for Gson  ----------
-# Gson uses generic type information stored in a class file when working with fields. Proguard
-# removes such information by default, so configure it to keep all of it.
--keepattributes Signature
-
-# For using GSON @Expose annotation
--keepattributes *Annotation*
-
-# Gson specific classes
--keep class sun.misc.Unsafe { *; }
-#-keep class com.google.gson.stream.** { *; }
-
-# Application classes that will be serialized/deserialized over Gson
--keep class com.google.gson.examples.android.model.** { *; }
-
-##---------------End: proguard configuration for Gson  ----------
diff --git a/examples/android-proguard-example/res/drawable/icon.png b/examples/android-proguard-example/res/drawable/icon.png
deleted file mode 100644
index a07c69fa5..000000000
Binary files a/examples/android-proguard-example/res/drawable/icon.png and /dev/null differ
diff --git a/examples/android-proguard-example/res/layout/main.xml b/examples/android-proguard-example/res/layout/main.xml
deleted file mode 100644
index 0ac46e684..000000000
--- a/examples/android-proguard-example/res/layout/main.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<LinearLayout
-  xmlns:android="http://schemas.android.com/apk/res/android" 
-  android:orientation="vertical"
-  android:layout_width="fill_parent"
-  android:layout_height="fill_parent">
-  
-  <TextView android:id="@+id/tv"
-    android:layout_width="fill_parent"
-    android:layout_height="wrap_content" />
-</LinearLayout>
\ No newline at end of file
diff --git a/examples/android-proguard-example/res/values/strings.xml b/examples/android-proguard-example/res/values/strings.xml
deleted file mode 100644
index ba3be81e8..000000000
--- a/examples/android-proguard-example/res/values/strings.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-  <string name="app_name">Gson Proguard Example</string>
-</resources>
-
diff --git a/examples/android-proguard-example/src/com/google/gson/examples/android/GsonProguardExampleActivity.java b/examples/android-proguard-example/src/com/google/gson/examples/android/GsonProguardExampleActivity.java
deleted file mode 100644
index bd5443114..000000000
--- a/examples/android-proguard-example/src/com/google/gson/examples/android/GsonProguardExampleActivity.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.examples.android;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.widget.TextView;
-
-import com.google.gson.Gson;
-import com.google.gson.examples.android.model.Cart;
-import com.google.gson.examples.android.model.LineItem;
-
-/**
- * Activity class illustrating how to use proguard with Gson
- *
- * @author Inderjeet Singh
- */
-public class GsonProguardExampleActivity extends Activity {
-  @Override
-  public void onCreate(Bundle icicle) {
-    super.onCreate(icicle);
-    setContentView(R.layout.main);
-    TextView tv = (TextView) findViewById(R.id.tv);
-    Gson gson = new Gson();
-    Cart cart = buildCart();
-    StringBuilder sb = new StringBuilder();
-    sb.append("Gson.toJson() example: \n");
-    sb.append("  Cart Object: ").append(cart).append("\n");
-    sb.append("  Cart JSON: ").append(gson.toJson(cart)).append("\n");
-    sb.append("\n\nGson.fromJson() example: \n");
-    String json = "{buyer:'Happy Camper',creditCard:'4111-1111-1111-1111',"
-      + "lineItems:[{name:'nails',priceInMicros:100000,quantity:100,currencyCode:'USD'}]}";
-    sb.append("Cart JSON: ").append(json).append("\n");
-    sb.append("Cart Object: ").append(gson.fromJson(json, Cart.class)).append("\n");
-    tv.setText(sb.toString());
-    tv.invalidate();
-  }
-
-  private Cart buildCart() {
-    List<LineItem> lineItems = new ArrayList<LineItem>();
-    lineItems.add(new LineItem("hammer", 1, 12000000, "USD"));
-    return new Cart(lineItems, "Happy Buyer", "4111-1111-1111-1111");
-  }
-}
diff --git a/examples/android-proguard-example/src/com/google/gson/examples/android/model/Cart.java b/examples/android-proguard-example/src/com/google/gson/examples/android/model/Cart.java
deleted file mode 100644
index 7582036eb..000000000
--- a/examples/android-proguard-example/src/com/google/gson/examples/android/model/Cart.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.examples.android.model;
-
-import java.lang.reflect.ParameterizedType;
-import java.lang.reflect.Type;
-import java.lang.reflect.WildcardType;
-import java.util.List;
-
-import com.google.gson.annotations.SerializedName;
-
-/**
- * A model object representing a cart that can be posted to an order-processing server
- * 
- * @author Inderjeet Singh
- */
-public class Cart {
-  public final List<LineItem> lineItems;
-
-  @SerializedName("buyer")
-  private final String buyerName;
-
-  private final String creditCard;
-
-  public Cart(List<LineItem> lineItems, String buyerName, String creditCard) {
-    this.lineItems = lineItems;
-    this.buyerName = buyerName;
-    this.creditCard = creditCard;
-  }
-
-  public List<LineItem> getLineItems() {
-    return lineItems;
-  }
-
-  public String getBuyerName() {
-    return buyerName;
-  }
-
-  public String getCreditCard() {
-    return creditCard;
-  }
-
-  @Override
-  public String toString() {
-    StringBuilder itemsText = new StringBuilder();
-    boolean first = true;
-    if (lineItems != null) {
-      try {
-        Class<?> fieldType = Cart.class.getField("lineItems").getType();
-        System.out.println("LineItems CLASS: " + getSimpleTypeName(fieldType));
-      } catch (SecurityException e) {
-      } catch (NoSuchFieldException e) {
-      }
-      for (LineItem item : lineItems) {
-        if (first) {
-          first = false;
-        } else {
-          itemsText.append("; ");
-        }
-        itemsText.append(item);
-      }
-    }
-    return "[BUYER: " + buyerName + "; CC: " + creditCard + "; "
-    + "LINE_ITEMS: " + itemsText.toString() + "]";
-  }
-
-  @SuppressWarnings("unchecked")
-  public static String getSimpleTypeName(Type type) {
-    if (type == null) {
-      return "null";
-    }
-    if (type instanceof Class) {
-      return ((Class)type).getSimpleName();
-    } else if (type instanceof ParameterizedType) {
-      ParameterizedType pType = (ParameterizedType) type;
-      StringBuilder sb = new StringBuilder(getSimpleTypeName(pType.getRawType()));
-      sb.append('<');
-      boolean first = true;
-      for (Type argumentType : pType.getActualTypeArguments()) {
-        if (first) {
-          first = false;
-        } else {
-          sb.append(',');
-        }
-        sb.append(getSimpleTypeName(argumentType));
-      }
-      sb.append('>');
-      return sb.toString();
-    } else if (type instanceof WildcardType) {
-      return "?";
-    }
-    return type.toString();
-  }
-
-}
diff --git a/examples/android-proguard-example/src/com/google/gson/examples/android/model/LineItem.java b/examples/android-proguard-example/src/com/google/gson/examples/android/model/LineItem.java
deleted file mode 100644
index 1273ec971..000000000
--- a/examples/android-proguard-example/src/com/google/gson/examples/android/model/LineItem.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.examples.android.model;
-
-/**
- * A line item in a cart. This is not a rest resource, just a dependent object
- *
- * @author Inderjeet Singh
- */
-public class LineItem {
-  private final String name;
-  private final int quantity;
-  private final long priceInMicros;
-  private final String currencyCode;
-
-  public LineItem(String name, int quantity, long priceInMicros, String currencyCode) {
-    this.name = name;
-    this.quantity = quantity;
-    this.priceInMicros = priceInMicros;
-    this.currencyCode = currencyCode;
-  }
-
-  public String getName() {
-    return name;
-  }
-
-  public int getQuantity() {
-    return quantity;
-  }
-
-  public long getPriceInMicros() {
-    return priceInMicros;
-  }
-
-  public String getCurrencyCode() {
-    return currencyCode;
-  }
-
-  @Override
-  public String toString() {
-    return String.format("(item: %s, qty: %s, price: %.2f %s)",
-        name, quantity, priceInMicros / 1000000d, currencyCode);
-  }
-}
diff --git a/extras/pom.xml b/extras/pom.xml
deleted file mode 100644
index 41e6c9c9b..000000000
--- a/extras/pom.xml
+++ /dev/null
@@ -1,186 +0,0 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>com.google.code.gson</groupId>
-  <artifactId>gson-extras</artifactId>
-  <packaging>jar</packaging>
-  <version>1.0-SNAPSHOT</version>
-  <inceptionYear>2008</inceptionYear>
-  <name>Gson Extras</name>
-  <parent>
-    <groupId>org.sonatype.oss</groupId>
-    <artifactId>oss-parent</artifactId>
-    <version>9</version>
-  </parent>
-  <url>http://code.google.com/p/google-gson/</url>
-  <description>Google Gson grab bag of utilities, type adapters, etc.</description>
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-  </properties>
-  <licenses>
-    <license>
-      <name>The Apache Software License, Version 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-      <distribution>repo</distribution>
-    </license>
-  </licenses>
-  <scm>
-    <connection>scm:svn:http://google-gson.googlecode.com/svn/trunk/extras</connection>
-    <developerConnection>scm:svn:https://google-gson.googlecode.com/svn/trunk/extras</developerConnection>
-    <url>http://google-gson.codegoogle.com/svn/trunk/extras</url>
-  </scm>
-  <issueManagement>
-    <system>Google Code Issue Tracking</system>
-    <url>http://code.google.com/p/google-gson/issues/list</url>
-  </issueManagement>
-  <organization>
-    <name>Google, Inc.</name>
-    <url>http://www.google.com</url>
-  </organization>
-  <dependencies>
-    <dependency>
-      <groupId>com.google.code.gson</groupId>
-      <artifactId>gson</artifactId>
-      <version>2.3.1</version>
-      <scope>compile</scope>
-    </dependency>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>3.8.2</version>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-  <profiles>
-    <!-- Activate PGP signing only when performing a release -->
-    <profile>
-      <id>release-sign-artifacts</id>
-      <activation>
-        <property>
-          <name>performRelease</name>
-          <value>true</value>
-        </property>
-      </activation>
-      <build>
-        <plugins>
-          <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-gpg-plugin</artifactId>
-            <version>1.5</version>
-            <executions>
-              <execution>
-                <id>sign-artifacts</id>
-                <phase>verify</phase>
-                <goals>
-                  <goal>sign</goal>
-                </goals>
-              </execution>
-            </executions>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-  </profiles>  
-  <build>
-    <defaultGoal>package</defaultGoal>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>3.2</version>
-        <configuration>
-          <source>1.5</source>
-          <target>1.5</target>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-jar-plugin</artifactId>
-        <version>2.5</version>
-        <executions>
-          <execution>
-            <phase>package</phase>
-            <goals>
-              <goal>jar</goal>
-            </goals>
-          </execution>
-        </executions>
-        <configuration>
-          <archive>
-            <addMavenDescriptor>false</addMavenDescriptor>
-          </archive>
-        </configuration>
-      </plugin>
-      <plugin>
-         <groupId>org.apache.maven.plugins</groupId>
-         <artifactId>maven-source-plugin</artifactId>
-         <version>2.4</version>
-         <executions>
-           <execution>
-             <id>attach-sources</id>
-             <phase>verify</phase>
-             <goals>
-               <goal>jar</goal>
-             </goals>
-           </execution>
-         </executions>
-       </plugin>
-       <plugin>
-         <groupId>org.apache.maven.plugins</groupId>
-         <artifactId>maven-javadoc-plugin</artifactId>
-         <version>2.10.1</version>
-         <executions>
-           <execution>
-             <id>attach-javadocs</id>
-             <goals>
-               <goal>jar</goal>
-             </goals>
-           </execution>
-         </executions>
-         <configuration>
-           <links>
-             <link>http://download.oracle.com/javase/1.5.0/docs/api/</link>
-           </links>
-           <version>true</version>
-           <show>public</show>
-         </configuration>
-       </plugin>
-       <plugin>
-         <groupId>org.apache.maven.plugins</groupId>
-         <artifactId>maven-eclipse-plugin</artifactId>
-         <version>2.9</version>
-         <configuration>
-           <downloadSources>true</downloadSources>
-           <downloadJavadocs>true</downloadJavadocs>
-           <workspace>
-             ../eclipse-ws/
-           </workspace>
-           <workspaceCodeStylesURL>
-             file:///${basedir}/../lib/gson-formatting-styles.xml
-           </workspaceCodeStylesURL>
-         </configuration>
-       </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-release-plugin</artifactId>
-        <!--  version>2.3.2</version -->
-        <configuration>
-          <arguments>-DenableCiProfile=true</arguments>
-          <tagBase>https://google-gson.googlecode.com/svn/tags/</tagBase>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-  <developers>
-    <developer>
-      <name>Inderjeet Singh</name>
-    </developer>
-    <developer>
-      <name>Joel Leitch</name>
-      <organization>Google Inc.</organization>
-    </developer>
-    <developer>
-      <name>Jesse Wilson</name>
-      <organization>Square Inc.</organization>
-    </developer>
-  </developers>
-</project>
diff --git a/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java b/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java
deleted file mode 100644
index bd7c2d24d..000000000
--- a/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.extras.examples.rawcollections;
-
-import java.util.ArrayList;
-import java.util.Collection;
-
-import com.google.gson.Gson;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonParser;
-
-public class RawCollectionsExample {
-  static class Event {
-    private String name;
-    private String source;
-    private Event(String name, String source) {
-      this.name = name;
-      this.source = source;
-    }
-    @Override
-    public String toString() {
-      return String.format("(name=%s, source=%s)", name, source);
-    }
-  }
-
-  @SuppressWarnings({ "unchecked", "rawtypes" })
-  public static void main(String[] args) {
-    Gson gson = new Gson();
-    Collection collection = new ArrayList();
-    collection.add("hello");
-    collection.add(5);
-    collection.add(new Event("GREETINGS", "guest"));
-    String json = gson.toJson(collection);
-    System.out.println("Using Gson.toJson() on a raw collection: " + json);
-    JsonParser parser = new JsonParser();
-    JsonArray array = parser.parse(json).getAsJsonArray();
-    String message = gson.fromJson(array.get(0), String.class);
-    int number = gson.fromJson(array.get(1), int.class);
-    Event event = gson.fromJson(array.get(2), Event.class);
-    System.out.printf("Using Gson.fromJson() to get: %s, %d, %s", message, number, event);
-  }
-}
diff --git a/extras/src/main/java/com/google/gson/graph/GraphAdapterBuilder.java b/extras/src/main/java/com/google/gson/graph/GraphAdapterBuilder.java
deleted file mode 100644
index cd8ea00f4..000000000
--- a/extras/src/main/java/com/google/gson/graph/GraphAdapterBuilder.java
+++ /dev/null
@@ -1,308 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.graph;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonElement;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.ObjectConstructor;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
-import java.io.IOException;
-import java.lang.reflect.Type;
-import java.util.HashMap;
-import java.util.IdentityHashMap;
-import java.util.LinkedList;
-import java.util.Map;
-import java.util.Queue;
-
-/**
- * Writes a graph of objects as a list of named nodes.
- */
-// TODO: proper documentation
-@SuppressWarnings("rawtypes")
-public final class GraphAdapterBuilder {
-  private final Map<Type, InstanceCreator<?>> instanceCreators;
-  private final ConstructorConstructor constructorConstructor;
-
-  public GraphAdapterBuilder() {
-      this.instanceCreators = new HashMap<Type, InstanceCreator<?>>();
-      this.constructorConstructor = new ConstructorConstructor(instanceCreators);
-  }
-  public GraphAdapterBuilder addType(Type type) {
-    final ObjectConstructor<?> objectConstructor = constructorConstructor.get(TypeToken.get(type));
-    InstanceCreator<Object> instanceCreator = new InstanceCreator<Object>() {
-      public Object createInstance(Type type) {
-        return objectConstructor.construct();
-      }
-    };
-    return addType(type, instanceCreator);
-  }
-
-  public GraphAdapterBuilder addType(Type type, InstanceCreator<?> instanceCreator) {
-    if (type == null || instanceCreator == null) {
-      throw new NullPointerException();
-    }
-    instanceCreators.put(type, instanceCreator);
-    return this;
-  }
-
-  public void registerOn(GsonBuilder gsonBuilder) {
-    Factory factory = new Factory(instanceCreators);
-    gsonBuilder.registerTypeAdapterFactory(factory);
-    for (Map.Entry<Type, InstanceCreator<?>> entry : instanceCreators.entrySet()) {
-      gsonBuilder.registerTypeAdapter(entry.getKey(), factory);
-    }
-  }
-
-  static class Factory implements TypeAdapterFactory, InstanceCreator {
-    private final Map<Type, InstanceCreator<?>> instanceCreators;
-    private final ThreadLocal<Graph> graphThreadLocal = new ThreadLocal<Graph>();
-
-    Factory(Map<Type, InstanceCreator<?>> instanceCreators) {
-      this.instanceCreators = instanceCreators;
-    }
-
-    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
-      if (!instanceCreators.containsKey(type.getType())) {
-        return null;
-      }
-
-      final TypeAdapter<T> typeAdapter = gson.getDelegateAdapter(this, type);
-      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
-      return new TypeAdapter<T>() {
-        @Override public void write(JsonWriter out, T value) throws IOException {
-          if (value == null) {
-            out.nullValue();
-            return;
-          }
-
-          Graph graph = graphThreadLocal.get();
-          boolean writeEntireGraph = false;
-
-          /*
-           * We have one of two cases:
-           *  1. We've encountered the first known object in this graph. Write
-           *     out the graph, starting with that object.
-           *  2. We've encountered another graph object in the course of #1.
-           *     Just write out this object's name. We'll circle back to writing
-           *     out the object's value as a part of #1.
-           */
-
-          if (graph == null) {
-            writeEntireGraph = true;
-            graph = new Graph(new IdentityHashMap<Object, Element<?>>());
-          }
-
-          @SuppressWarnings("unchecked") // graph.map guarantees consistency between value and T
-          Element<T> element = (Element<T>) graph.map.get(value);
-          if (element == null) {
-            element = new Element<T>(value, graph.nextName(), typeAdapter, null);
-            graph.map.put(value, element);
-            graph.queue.add(element);
-          }
-
-          if (writeEntireGraph) {
-            graphThreadLocal.set(graph);
-            try {
-              out.beginObject();
-              Element<?> current;
-              while ((current = graph.queue.poll()) != null) {
-                out.name(current.id);
-                current.write(out);
-              }
-              out.endObject();
-            } finally {
-              graphThreadLocal.remove();
-            }
-          } else {
-            out.value(element.id);
-          }
-        }
-
-        @Override public T read(JsonReader in) throws IOException {
-          if (in.peek() == JsonToken.NULL) {
-            in.nextNull();
-            return null;
-          }
-
-          /*
-           * Again we have one of two cases:
-           *  1. We've encountered the first known object in this graph. Read
-           *     the entire graph in as a map from names to their JsonElements.
-           *     Then convert the first JsonElement to its Java object.
-           *  2. We've encountered another graph object in the course of #1.
-           *     Read in its name, then deserialize its value from the
-           *     JsonElement in our map. We need to do this lazily because we
-           *     don't know which TypeAdapter to use until a value is
-           *     encountered in the wild.
-           */
-
-          String currentName = null;
-          Graph graph = graphThreadLocal.get();
-          boolean readEntireGraph = false;
-
-          if (graph == null) {
-            graph = new Graph(new HashMap<Object, Element<?>>());
-            readEntireGraph = true;
-
-            // read the entire tree into memory
-            in.beginObject();
-            while (in.hasNext()) {
-              String name = in.nextName();
-              if (currentName == null) {
-                currentName = name;
-              }
-              JsonElement element = elementAdapter.read(in);
-              graph.map.put(name, new Element<T>(null, name, typeAdapter, element));
-            }
-            in.endObject();
-          } else {
-            currentName = in.nextString();
-          }
-
-          if (readEntireGraph) {
-            graphThreadLocal.set(graph);
-          }
-          try {
-            @SuppressWarnings("unchecked") // graph.map guarantees consistency between value and T
-            Element<T> element = (Element<T>) graph.map.get(currentName);
-            // now that we know the typeAdapter for this name, go from JsonElement to 'T'
-            if (element.value == null) {
-              element.typeAdapter = typeAdapter;
-              element.read(graph);
-            }
-            return element.value;
-          } finally {
-            if (readEntireGraph) {
-              graphThreadLocal.remove();
-            }
-          }
-        }
-      };
-    }
-
-    /**
-     * Hook for the graph adapter to get a reference to a deserialized value
-     * before that value is fully populated. This is useful to deserialize
-     * values that directly or indirectly reference themselves: we can hand
-     * out an instance before read() returns.
-     *
-     * <p>Gson should only ever call this method when we're expecting it to;
-     * that is only when we've called back into Gson to deserialize a tree.
-     */
-    @SuppressWarnings("unchecked")
-    public Object createInstance(Type type) {
-      Graph graph = graphThreadLocal.get();
-      if (graph == null || graph.nextCreate == null) {
-        throw new IllegalStateException("Unexpected call to createInstance() for " + type);
-      }
-      InstanceCreator<?> creator = instanceCreators.get(type);
-      Object result = creator.createInstance(type);
-      graph.nextCreate.value = result;
-      graph.nextCreate = null;
-      return result;
-    }
-  }
-
-  static class Graph {
-    /**
-     * The graph elements. On serialization keys are objects (using an identity
-     * hash map) and on deserialization keys are the string names (using a
-     * standard hash map).
-     */
-    private final Map<Object, Element<?>> map;
-
-    /**
-     * The queue of elements to write during serialization. Unused during
-     * deserialization.
-     */
-    private final Queue<Element> queue = new LinkedList<Element>();
-
-    /**
-     * The instance currently being deserialized. Used as a backdoor between
-     * the graph traversal (which needs to know instances) and instance creators
-     * which create them.
-     */
-    private Element nextCreate;
-
-    private Graph(Map<Object, Element<?>> map) {
-      this.map = map;
-    }
-
-    /**
-     * Returns a unique name for an element to be inserted into the graph.
-     */
-    public String nextName() {
-      return "0x" + Integer.toHexString(map.size() + 1);
-    }
-  }
-
-  /**
-   * An element of the graph during serialization or deserialization.
-   */
-  static class Element<T> {
-    /**
-     * This element's name in the top level graph object.
-     */
-    private final String id;
-
-    /**
-     * The value if known. During deserialization this is lazily populated.
-     */
-    private T value;
-
-    /**
-     * This element's type adapter if known. During deserialization this is
-     * lazily populated.
-     */
-    private TypeAdapter<T> typeAdapter;
-
-    /**
-     * The element to deserialize. Unused in serialization.
-     */
-    private final JsonElement element;
-
-    Element(T value, String id, TypeAdapter<T> typeAdapter, JsonElement element) {
-      this.value = value;
-      this.id = id;
-      this.typeAdapter = typeAdapter;
-      this.element = element;
-    }
-
-    void write(JsonWriter out) throws IOException {
-      typeAdapter.write(out, value);
-    }
-
-    void read(Graph graph) throws IOException {
-      if (graph.nextCreate != null) {
-        throw new IllegalStateException("Unexpected recursive call to read() for " + id);
-      }
-      graph.nextCreate = this;
-      value = typeAdapter.fromJsonTree(element);
-      if (value == null) {
-        throw new IllegalStateException("non-null value deserialized to null: " + element);
-      }
-    }
-  }
-}
diff --git a/extras/src/main/java/com/google/gson/interceptors/Intercept.java b/extras/src/main/java/com/google/gson/interceptors/Intercept.java
deleted file mode 100644
index 0c4e9043f..000000000
--- a/extras/src/main/java/com/google/gson/interceptors/Intercept.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.interceptors;
-
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-
-/**
- * Use this annotation to indicate various interceptors for class instances after
- * they have been processed by Gson. For example, you can use it to validate an instance
- * after it has been deserialized from Json.
- * Here is an example of how this annotation is used:
- * <p>Here is an example of how this annotation is used:
- * <p><pre>
- * &#64Intercept(postDeserialize=UserValidator.class)
- * public class User {
- *   String name;
- *   String password;
- *   String emailAddress;
- * }
- *
- * public class UserValidator implements JsonPostDeserializer&lt;User&gt; {
- *   public void postDeserialize(User user) {
- *     // Do some checks on user
- *     if (user.name == null || user.password == null) {
- *       throw new JsonParseException("name and password are required fields.");
- *     }
- *     if (user.emailAddress == null) {
- *       emailAddress = "unknown"; // assign a default value.
- *     }
- *   }
- * }
- * </pre></p>
- *
- * @author Inderjeet Singh
- */
-@Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.TYPE)
-public @interface Intercept {
-
-  /**
-   * Specify the class that provides the methods that should be invoked after an instance
-   * has been deserialized.
-   */
-  @SuppressWarnings("rawtypes")
-  public Class<? extends JsonPostDeserializer> postDeserialize();
-}
diff --git a/extras/src/main/java/com/google/gson/interceptors/InterceptorFactory.java b/extras/src/main/java/com/google/gson/interceptors/InterceptorFactory.java
deleted file mode 100644
index 907fca3a4..000000000
--- a/extras/src/main/java/com/google/gson/interceptors/InterceptorFactory.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.google.gson.interceptors;
-
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-import java.io.IOException;
-
-/**
- * A type adapter factory that implements {@code @Intercept}.
- */
-public final class InterceptorFactory implements TypeAdapterFactory {
-  public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
-    Intercept intercept = type.getRawType().getAnnotation(Intercept.class);
-    if (intercept == null) {
-      return null;
-    }
-
-    TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);
-    return new InterceptorAdapter<T>(delegate, intercept);
-  }
-
-  static class InterceptorAdapter<T> extends TypeAdapter<T> {
-    private final TypeAdapter<T> delegate;
-    private final JsonPostDeserializer<T> postDeserializer;
-
-    @SuppressWarnings("unchecked") // ?
-    public InterceptorAdapter(TypeAdapter<T> delegate, Intercept intercept) {
-      try {
-        this.delegate = delegate;
-        this.postDeserializer = intercept.postDeserialize().newInstance();
-      } catch (Exception e) {
-        throw new RuntimeException(e);
-      }
-    }
-
-    @Override public void write(JsonWriter out, T value) throws IOException {
-      delegate.write(out, value);
-    }
-
-    @Override public T read(JsonReader in) throws IOException {
-      T result = delegate.read(in);
-      postDeserializer.postDeserialize(result);
-      return result;
-    }
-  }
-}
diff --git a/extras/src/main/java/com/google/gson/interceptors/JsonPostDeserializer.java b/extras/src/main/java/com/google/gson/interceptors/JsonPostDeserializer.java
deleted file mode 100644
index 0f3a72ca8..000000000
--- a/extras/src/main/java/com/google/gson/interceptors/JsonPostDeserializer.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.interceptors;
-
-import com.google.gson.InstanceCreator;
-
-/**
- * This interface is implemented by a class that wishes to inspect or modify an object
- * after it has been deserialized. You must define a no-args constructor or register an
- * {@link InstanceCreator} for such a class.
- *
- * @author Inderjeet Singh
- */
-public interface JsonPostDeserializer<T> {
-
-  /**
-   * This method is called by Gson after the object has been deserialized from Json.
-   */
-  public void postDeserialize(T object);
-}
diff --git a/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java b/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java
deleted file mode 100644
index f9ee32b4a..000000000
--- a/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java
+++ /dev/null
@@ -1,240 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.typeadapters;
-
-import java.io.IOException;
-import java.util.LinkedHashMap;
-import java.util.Map;
-
-import com.google.gson.Gson;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.Streams;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-
-/**
- * Adapts values whose runtime type may differ from their declaration type. This
- * is necessary when a field's type is not the same type that GSON should create
- * when deserializing that field. For example, consider these types:
- * <pre>   {@code
- *   abstract class Shape {
- *     int x;
- *     int y;
- *   }
- *   class Circle extends Shape {
- *     int radius;
- *   }
- *   class Rectangle extends Shape {
- *     int width;
- *     int height;
- *   }
- *   class Diamond extends Shape {
- *     int width;
- *     int height;
- *   }
- *   class Drawing {
- *     Shape bottomShape;
- *     Shape topShape;
- *   }
- * }</pre>
- * <p>Without additional type information, the serialized JSON is ambiguous. Is
- * the bottom shape in this drawing a rectangle or a diamond? <pre>   {@code
- *   {
- *     "bottomShape": {
- *       "width": 10,
- *       "height": 5,
- *       "x": 0,
- *       "y": 0
- *     },
- *     "topShape": {
- *       "radius": 2,
- *       "x": 4,
- *       "y": 1
- *     }
- *   }}</pre>
- * This class addresses this problem by adding type information to the
- * serialized JSON and honoring that type information when the JSON is
- * deserialized: <pre>   {@code
- *   {
- *     "bottomShape": {
- *       "type": "Diamond",
- *       "width": 10,
- *       "height": 5,
- *       "x": 0,
- *       "y": 0
- *     },
- *     "topShape": {
- *       "type": "Circle",
- *       "radius": 2,
- *       "x": 4,
- *       "y": 1
- *     }
- *   }}</pre>
- * Both the type field name ({@code "type"}) and the type labels ({@code
- * "Rectangle"}) are configurable.
- *
- * <h3>Registering Types</h3>
- * Create a {@code RuntimeTypeAdapterFactory} by passing the base type and type field
- * name to the {@link #of} factory method. If you don't supply an explicit type
- * field name, {@code "type"} will be used. <pre>   {@code
- *   RuntimeTypeAdapterFactory<Shape> shapeAdapter
- *       = RuntimeTypeAdapterFactory.of(Shape.class, "type");
- * }</pre>
- * Next register all of your subtypes. Every subtype must be explicitly
- * registered. This protects your application from injection attacks. If you
- * don't supply an explicit type label, the type's simple name will be used.
- * <pre>   {@code
- *   shapeAdapter.registerSubtype(Rectangle.class, "Rectangle");
- *   shapeAdapter.registerSubtype(Circle.class, "Circle");
- *   shapeAdapter.registerSubtype(Diamond.class, "Diamond");
- * }</pre>
- * Finally, register the type adapter in your application's GSON builder:
- * <pre>   {@code
- *   Gson gson = new GsonBuilder()
- *       .registerTypeAdapter(Shape.class, shapeAdapter)
- *       .create();
- * }</pre>
- * Like {@code GsonBuilder}, this API supports chaining: <pre>   {@code
- *   RuntimeTypeAdapterFactory<Shape> shapeAdapter = RuntimeTypeAdapterFactory.of(Shape.class)
- *       .registerSubtype(Rectangle.class)
- *       .registerSubtype(Circle.class)
- *       .registerSubtype(Diamond.class);
- * }</pre>
- */
-public final class RuntimeTypeAdapterFactory<T> implements TypeAdapterFactory {
-  private final Class<?> baseType;
-  private final String typeFieldName;
-  private final Map<String, Class<?>> labelToSubtype = new LinkedHashMap<String, Class<?>>();
-  private final Map<Class<?>, String> subtypeToLabel = new LinkedHashMap<Class<?>, String>();
-
-  private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {
-    if (typeFieldName == null || baseType == null) {
-      throw new NullPointerException();
-    }
-    this.baseType = baseType;
-    this.typeFieldName = typeFieldName;
-  }
-
-  /**
-   * Creates a new runtime type adapter using for {@code baseType} using {@code
-   * typeFieldName} as the type field name. Type field names are case sensitive.
-   */
-  public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType, String typeFieldName) {
-    return new RuntimeTypeAdapterFactory<T>(baseType, typeFieldName);
-  }
-
-  /**
-   * Creates a new runtime type adapter for {@code baseType} using {@code "type"} as
-   * the type field name.
-   */
-  public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType) {
-    return new RuntimeTypeAdapterFactory<T>(baseType, "type");
-  }
-
-  /**
-   * Registers {@code type} identified by {@code label}. Labels are case
-   * sensitive.
-   *
-   * @throws IllegalArgumentException if either {@code type} or {@code label}
-   *     have already been registered on this type adapter.
-   */
-  public RuntimeTypeAdapterFactory<T> registerSubtype(Class<? extends T> type, String label) {
-    if (type == null || label == null) {
-      throw new NullPointerException();
-    }
-    if (subtypeToLabel.containsKey(type) || labelToSubtype.containsKey(label)) {
-      throw new IllegalArgumentException("types and labels must be unique");
-    }
-    labelToSubtype.put(label, type);
-    subtypeToLabel.put(type, label);
-    return this;
-  }
-
-  /**
-   * Registers {@code type} identified by its {@link Class#getSimpleName simple
-   * name}. Labels are case sensitive.
-   *
-   * @throws IllegalArgumentException if either {@code type} or its simple name
-   *     have already been registered on this type adapter.
-   */
-  public RuntimeTypeAdapterFactory<T> registerSubtype(Class<? extends T> type) {
-    return registerSubtype(type, type.getSimpleName());
-  }
-
-  public <R> TypeAdapter<R> create(Gson gson, TypeToken<R> type) {
-    if (type.getRawType() != baseType) {
-      return null;
-    }
-
-    final Map<String, TypeAdapter<?>> labelToDelegate
-        = new LinkedHashMap<String, TypeAdapter<?>>();
-    final Map<Class<?>, TypeAdapter<?>> subtypeToDelegate
-        = new LinkedHashMap<Class<?>, TypeAdapter<?>>();
-    for (Map.Entry<String, Class<?>> entry : labelToSubtype.entrySet()) {
-      TypeAdapter<?> delegate = gson.getDelegateAdapter(this, TypeToken.get(entry.getValue()));
-      labelToDelegate.put(entry.getKey(), delegate);
-      subtypeToDelegate.put(entry.getValue(), delegate);
-    }
-
-    return new TypeAdapter<R>() {
-      @Override public R read(JsonReader in) throws IOException {
-        JsonElement jsonElement = Streams.parse(in);
-        JsonElement labelJsonElement = jsonElement.getAsJsonObject().remove(typeFieldName);
-        if (labelJsonElement == null) {
-          throw new JsonParseException("cannot deserialize " + baseType
-              + " because it does not define a field named " + typeFieldName);
-        }
-        String label = labelJsonElement.getAsString();
-        @SuppressWarnings("unchecked") // registration requires that subtype extends T
-        TypeAdapter<R> delegate = (TypeAdapter<R>) labelToDelegate.get(label);
-        if (delegate == null) {
-          throw new JsonParseException("cannot deserialize " + baseType + " subtype named "
-              + label + "; did you forget to register a subtype?");
-        }
-        return delegate.fromJsonTree(jsonElement);
-      }
-
-      @Override public void write(JsonWriter out, R value) throws IOException {
-        Class<?> srcType = value.getClass();
-        String label = subtypeToLabel.get(srcType);
-        @SuppressWarnings("unchecked") // registration requires that subtype extends T
-        TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);
-        if (delegate == null) {
-          throw new JsonParseException("cannot serialize " + srcType.getName()
-              + "; did you forget to register a subtype?");
-        }
-        JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();
-        if (jsonObject.has(typeFieldName)) {
-          throw new JsonParseException("cannot serialize " + srcType.getName()
-              + " because it already defines a field named " + typeFieldName);
-        }
-        JsonObject clone = new JsonObject();
-        clone.add(typeFieldName, new JsonPrimitive(label));
-        for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {
-          clone.add(e.getKey(), e.getValue());
-        }
-        Streams.write(clone, out);
-      }
-    }.nullSafe();
-  }
-}
diff --git a/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java b/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java
deleted file mode 100644
index 5e8c0ccee..000000000
--- a/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java
+++ /dev/null
@@ -1,282 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.typeadapters;
-
-import java.io.IOException;
-import java.text.ParseException;
-import java.text.ParsePosition;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.GregorianCalendar;
-import java.util.Locale;
-import java.util.TimeZone;
-
-import com.google.gson.JsonParseException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-
-public final class UtcDateTypeAdapter extends TypeAdapter<Date> {
-  private final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone("UTC");
-
-  @Override
-  public void write(JsonWriter out, Date date) throws IOException {
-    if (date == null) {
-      out.nullValue();
-    } else {
-      String value = format(date, true, UTC_TIME_ZONE);
-      out.value(value);
-    }
-  }
-
-  @Override
-  public Date read(JsonReader in) throws IOException {
-    try {
-      switch (in.peek()) {
-      case NULL:
-        in.nextNull();
-        return null;
-      default:
-        String date = in.nextString();
-        // Instead of using iso8601Format.parse(value), we use Jackson's date parsing
-        // This is because Android doesn't support XXX because it is JDK 1.6
-        return parse(date, new ParsePosition(0));
-      }
-    } catch (ParseException e) {
-      throw new JsonParseException(e);
-    }
-  }
-
-  // Date parsing code from Jackson databind ISO8601Utils.java
-  // https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java
-  private static final String GMT_ID = "GMT";
-
-  /**
-   * Format date into yyyy-MM-ddThh:mm:ss[.sss][Z|[+-]hh:mm]
-   *
-   * @param date the date to format
-   * @param millis true to include millis precision otherwise false
-   * @param tz timezone to use for the formatting (GMT will produce 'Z')
-   * @return the date formatted as yyyy-MM-ddThh:mm:ss[.sss][Z|[+-]hh:mm]
-   */
-  private static String format(Date date, boolean millis, TimeZone tz) {
-      Calendar calendar = new GregorianCalendar(tz, Locale.US);
-      calendar.setTime(date);
-
-      // estimate capacity of buffer as close as we can (yeah, that's pedantic ;)
-      int capacity = "yyyy-MM-ddThh:mm:ss".length();
-      capacity += millis ? ".sss".length() : 0;
-      capacity += tz.getRawOffset() == 0 ? "Z".length() : "+hh:mm".length();
-      StringBuilder formatted = new StringBuilder(capacity);
-
-      padInt(formatted, calendar.get(Calendar.YEAR), "yyyy".length());
-      formatted.append('-');
-      padInt(formatted, calendar.get(Calendar.MONTH) + 1, "MM".length());
-      formatted.append('-');
-      padInt(formatted, calendar.get(Calendar.DAY_OF_MONTH), "dd".length());
-      formatted.append('T');
-      padInt(formatted, calendar.get(Calendar.HOUR_OF_DAY), "hh".length());
-      formatted.append(':');
-      padInt(formatted, calendar.get(Calendar.MINUTE), "mm".length());
-      formatted.append(':');
-      padInt(formatted, calendar.get(Calendar.SECOND), "ss".length());
-      if (millis) {
-          formatted.append('.');
-          padInt(formatted, calendar.get(Calendar.MILLISECOND), "sss".length());
-      }
-
-      int offset = tz.getOffset(calendar.getTimeInMillis());
-      if (offset != 0) {
-          int hours = Math.abs((offset / (60 * 1000)) / 60);
-          int minutes = Math.abs((offset / (60 * 1000)) % 60);
-          formatted.append(offset < 0 ? '-' : '+');
-          padInt(formatted, hours, "hh".length());
-          formatted.append(':');
-          padInt(formatted, minutes, "mm".length());
-      } else {
-          formatted.append('Z');
-      }
-
-      return formatted.toString();
-  }
-  /**
-   * Zero pad a number to a specified length
-   *
-   * @param buffer buffer to use for padding
-   * @param value the integer value to pad if necessary.
-   * @param length the length of the string we should zero pad
-   */
-  private static void padInt(StringBuilder buffer, int value, int length) {
-      String strValue = Integer.toString(value);
-      for (int i = length - strValue.length(); i > 0; i--) {
-          buffer.append('0');
-      }
-      buffer.append(strValue);
-  }
-
-  /**
-   * Parse a date from ISO-8601 formatted string. It expects a format
-   * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh:mm]]
-   *
-   * @param date ISO string to parse in the appropriate format.
-   * @param pos The position to start parsing from, updated to where parsing stopped.
-   * @return the parsed date
-   * @throws ParseException if the date is not in the appropriate format
-   */
-  private static Date parse(String date, ParsePosition pos) throws ParseException {
-    Exception fail = null;
-    try {
-      int offset = pos.getIndex();
-
-      // extract year
-      int year = parseInt(date, offset, offset += 4);
-      if (checkOffset(date, offset, '-')) {
-        offset += 1;
-      }
-
-      // extract month
-      int month = parseInt(date, offset, offset += 2);
-      if (checkOffset(date, offset, '-')) {
-        offset += 1;
-      }
-
-      // extract day
-      int day = parseInt(date, offset, offset += 2);
-      // default time value
-      int hour = 0;
-      int minutes = 0;
-      int seconds = 0;
-      int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time
-      if (checkOffset(date, offset, 'T')) {
-
-        // extract hours, minutes, seconds and milliseconds
-        hour = parseInt(date, offset += 1, offset += 2);
-        if (checkOffset(date, offset, ':')) {
-          offset += 1;
-        }
-
-        minutes = parseInt(date, offset, offset += 2);
-        if (checkOffset(date, offset, ':')) {
-          offset += 1;
-        }
-        // second and milliseconds can be optional
-        if (date.length() > offset) {
-          char c = date.charAt(offset);
-          if (c != 'Z' && c != '+' && c != '-') {
-            seconds = parseInt(date, offset, offset += 2);
-            // milliseconds can be optional in the format
-            if (checkOffset(date, offset, '.')) {
-              milliseconds = parseInt(date, offset += 1, offset += 3);
-            }
-          }
-        }
-      }
-
-      // extract timezone
-      String timezoneId;
-      if (date.length() <= offset) {
-        throw new IllegalArgumentException("No time zone indicator");
-      }
-      char timezoneIndicator = date.charAt(offset);
-      if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-        String timezoneOffset = date.substring(offset);
-        timezoneId = GMT_ID + timezoneOffset;
-        offset += timezoneOffset.length();
-      } else if (timezoneIndicator == 'Z') {
-        timezoneId = GMT_ID;
-        offset += 1;
-      } else {
-        throw new IndexOutOfBoundsException("Invalid time zone indicator " + timezoneIndicator);
-      }
-
-      TimeZone timezone = TimeZone.getTimeZone(timezoneId);
-      if (!timezone.getID().equals(timezoneId)) {
-        throw new IndexOutOfBoundsException();
-      }
-
-      Calendar calendar = new GregorianCalendar(timezone);
-      calendar.setLenient(false);
-      calendar.set(Calendar.YEAR, year);
-      calendar.set(Calendar.MONTH, month - 1);
-      calendar.set(Calendar.DAY_OF_MONTH, day);
-      calendar.set(Calendar.HOUR_OF_DAY, hour);
-      calendar.set(Calendar.MINUTE, minutes);
-      calendar.set(Calendar.SECOND, seconds);
-      calendar.set(Calendar.MILLISECOND, milliseconds);
-
-      pos.setIndex(offset);
-      return calendar.getTime();
-      // If we get a ParseException it'll already have the right message/offset.
-      // Other exception types can convert here.
-    } catch (IndexOutOfBoundsException e) {
-      fail = e;
-    } catch (NumberFormatException e) {
-      fail = e;
-    } catch (IllegalArgumentException e) {
-      fail = e;
-    }
-    String input = (date == null) ? null : ('"' + date + "'");
-    throw new ParseException("Failed to parse date [" + input + "]: " + fail.getMessage(), pos.getIndex());
-  }
-
-  /**
-   * Check if the expected character exist at the given offset in the value.
-   *
-   * @param value the string to check at the specified offset
-   * @param offset the offset to look for the expected character
-   * @param expected the expected character
-   * @return true if the expected character exist at the given offset
-   */
-  private static boolean checkOffset(String value, int offset, char expected) {
-    return (offset < value.length()) && (value.charAt(offset) == expected);
-  }
-
-  /**
-   * Parse an integer located between 2 given offsets in a string
-   *
-   * @param value the string to parse
-   * @param beginIndex the start index for the integer in the string
-   * @param endIndex the end index for the integer in the string
-   * @return the int
-   * @throws NumberFormatException if the value is not a number
-   */
-  private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {
-    if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {
-      throw new NumberFormatException(value);
-    }
-    // use same logic as in Integer.parseInt() but less generic we're not supporting negative values
-    int i = beginIndex;
-    int result = 0;
-    int digit;
-    if (i < endIndex) {
-      digit = Character.digit(value.charAt(i++), 10);
-      if (digit < 0) {
-        throw new NumberFormatException("Invalid number: " + value);
-      }
-      result = -digit;
-    }
-    while (i < endIndex) {
-      digit = Character.digit(value.charAt(i++), 10);
-      if (digit < 0) {
-        throw new NumberFormatException("Invalid number: " + value);
-      }
-      result *= 10;
-      result -= digit;
-    }
-    return -result;
-  }
-}
diff --git a/extras/src/test/java/com/google/gson/graph/GraphAdapterBuilderTest.java b/extras/src/test/java/com/google/gson/graph/GraphAdapterBuilderTest.java
deleted file mode 100644
index 8a1d7cdbf..000000000
--- a/extras/src/test/java/com/google/gson/graph/GraphAdapterBuilderTest.java
+++ /dev/null
@@ -1,197 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.graph;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.reflect.TypeToken;
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import junit.framework.TestCase;
-
-public final class GraphAdapterBuilderTest extends TestCase {
-  public void testSerialization() {
-    Roshambo rock = new Roshambo("ROCK");
-    Roshambo scissors = new Roshambo("SCISSORS");
-    Roshambo paper = new Roshambo("PAPER");
-    rock.beats = scissors;
-    scissors.beats = paper;
-    paper.beats = rock;
-
-    GsonBuilder gsonBuilder = new GsonBuilder();
-    new GraphAdapterBuilder()
-        .addType(Roshambo.class)
-        .registerOn(gsonBuilder);
-    Gson gson = gsonBuilder.create();
-
-    assertEquals("{'0x1':{'name':'ROCK','beats':'0x2'}," +
-        "'0x2':{'name':'SCISSORS','beats':'0x3'}," +
-        "'0x3':{'name':'PAPER','beats':'0x1'}}",
-        gson.toJson(rock).replace('"', '\''));
-  }
-
-  public void testDeserialization() {
-    String json = "{'0x1':{'name':'ROCK','beats':'0x2'}," +
-        "'0x2':{'name':'SCISSORS','beats':'0x3'}," +
-        "'0x3':{'name':'PAPER','beats':'0x1'}}";
-
-    GsonBuilder gsonBuilder = new GsonBuilder();
-    new GraphAdapterBuilder()
-        .addType(Roshambo.class)
-        .registerOn(gsonBuilder);
-    Gson gson = gsonBuilder.create();
-
-    Roshambo rock = gson.fromJson(json, Roshambo.class);
-    assertEquals("ROCK", rock.name);
-    Roshambo scissors = rock.beats;
-    assertEquals("SCISSORS", scissors.name);
-    Roshambo paper = scissors.beats;
-    assertEquals("PAPER", paper.name);
-    assertSame(rock, paper.beats);
-  }
-
-  public void testSerializationDirectSelfReference() {
-    Roshambo suicide = new Roshambo("SUICIDE");
-    suicide.beats = suicide;
-
-    GsonBuilder gsonBuilder = new GsonBuilder();
-    new GraphAdapterBuilder()
-        .addType(Roshambo.class)
-        .registerOn(gsonBuilder);
-    Gson gson = gsonBuilder.create();
-
-    assertEquals("{'0x1':{'name':'SUICIDE','beats':'0x1'}}",
-        gson.toJson(suicide).replace('"', '\''));
-  }
-
-  public void testDeserializationDirectSelfReference() {
-    String json = "{'0x1':{'name':'SUICIDE','beats':'0x1'}}";
-
-    GsonBuilder gsonBuilder = new GsonBuilder();
-    new GraphAdapterBuilder()
-        .addType(Roshambo.class)
-        .registerOn(gsonBuilder);
-    Gson gson = gsonBuilder.create();
-
-    Roshambo suicide = gson.fromJson(json, Roshambo.class);
-    assertEquals("SUICIDE", suicide.name);
-    assertSame(suicide, suicide.beats);
-  }
-
-  public void testSerializeListOfLists() {
-    Type listOfListsType = new TypeToken<List<List<?>>>() {}.getType();
-    Type listOfAnyType = new TypeToken<List<?>>() {}.getType();
-
-    List<List<?>> listOfLists = new ArrayList<List<?>>();
-    listOfLists.add(listOfLists);
-    listOfLists.add(new ArrayList<Object>());
-
-    GsonBuilder gsonBuilder = new GsonBuilder();
-    new GraphAdapterBuilder()
-        .addType(listOfListsType)
-        .addType(listOfAnyType)
-        .registerOn(gsonBuilder);
-    Gson gson = gsonBuilder.create();
-
-    String json = gson.toJson(listOfLists, listOfListsType);
-    assertEquals("{'0x1':['0x1','0x2'],'0x2':[]}", json.replace('"', '\''));
-  }
-
-  public void testDeserializeListOfLists() {
-    Type listOfAnyType = new TypeToken<List<?>>() {}.getType();
-    Type listOfListsType = new TypeToken<List<List<?>>>() {}.getType();
-
-    GsonBuilder gsonBuilder = new GsonBuilder();
-    new GraphAdapterBuilder()
-        .addType(listOfListsType)
-        .addType(listOfAnyType)
-        .registerOn(gsonBuilder);
-    Gson gson = gsonBuilder.create();
-
-    List<List<?>> listOfLists = gson.fromJson("{'0x1':['0x1','0x2'],'0x2':[]}", listOfListsType);
-    assertEquals(2, listOfLists.size());
-    assertSame(listOfLists, listOfLists.get(0));
-    assertEquals(Collections.emptyList(), listOfLists.get(1));
-  }
-
-  public void testSerializationWithMultipleTypes() {
-    Company google = new Company("Google");
-    new Employee("Jesse", google);
-    new Employee("Joel", google);
-
-    GsonBuilder gsonBuilder = new GsonBuilder();
-    new GraphAdapterBuilder()
-        .addType(Company.class)
-        .addType(Employee.class)
-        .registerOn(gsonBuilder);
-    Gson gson = gsonBuilder.create();
-
-    assertEquals("{'0x1':{'name':'Google','employees':['0x2','0x3']},"
-        + "'0x2':{'name':'Jesse','company':'0x1'},"
-        + "'0x3':{'name':'Joel','company':'0x1'}}",
-        gson.toJson(google).replace('"', '\''));
-  }
-
-  public void testDeserializationWithMultipleTypes() {
-    GsonBuilder gsonBuilder = new GsonBuilder();
-    new GraphAdapterBuilder()
-        .addType(Company.class)
-        .addType(Employee.class)
-        .registerOn(gsonBuilder);
-    Gson gson = gsonBuilder.create();
-
-    String json = "{'0x1':{'name':'Google','employees':['0x2','0x3']},"
-        + "'0x2':{'name':'Jesse','company':'0x1'},"
-        + "'0x3':{'name':'Joel','company':'0x1'}}";
-    Company company = gson.fromJson(json, Company.class);
-    assertEquals("Google", company.name);
-    Employee jesse = company.employees.get(0);
-    assertEquals("Jesse", jesse.name);
-    assertEquals(company, jesse.company);
-    Employee joel = company.employees.get(1);
-    assertEquals("Joel", joel.name);
-    assertEquals(company, joel.company);
-  }
-
-  static class Roshambo {
-    String name;
-    Roshambo beats;
-    Roshambo(String name) {
-      this.name = name;
-    }
-  }
-
-  static class Employee {
-    final String name;
-    final Company company;
-    Employee(String name, Company company) {
-      this.name = name;
-      this.company = company;
-      this.company.employees.add(this);
-    }
-  }
-
-  static class Company {
-    final String name;
-    final List<Employee> employees = new ArrayList<Employee>();
-    Company(String name) {
-      this.name = name;
-    }
-  }
-}
diff --git a/extras/src/test/java/com/google/gson/interceptors/InterceptorTest.java b/extras/src/test/java/com/google/gson/interceptors/InterceptorTest.java
deleted file mode 100644
index 0aab6598c..000000000
--- a/extras/src/test/java/com/google/gson/interceptors/InterceptorTest.java
+++ /dev/null
@@ -1,171 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.interceptors;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-import java.io.IOException;
-import java.lang.reflect.Type;
-import java.util.Collection;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import junit.framework.TestCase;
-
-/**
- * Unit tests for {@link Intercept} and {@link JsonPostDeserializer}.
- *
- * @author Inderjeet Singh
- */
-public final class InterceptorTest extends TestCase {
-
-  private Gson gson;
-
-  @Override
-  public void setUp() throws Exception {
-    super.setUp();
-    this.gson = new GsonBuilder()
-        .registerTypeAdapterFactory(new InterceptorFactory())
-        .enableComplexMapKeySerialization()
-        .create();
-  }
-
-  public void testExceptionsPropagated() {
-    try {
-      gson.fromJson("{}", User.class);
-      fail();
-    } catch (JsonParseException expected) {}
-  }
-
-  public void testTopLevelClass() {
-    User user = gson.fromJson("{name:'bob',password:'pwd'}", User.class);
-    assertEquals(User.DEFAULT_EMAIL, user.email);
-  }
-
-  public void testList() {
-    List<User> list = gson.fromJson("[{name:'bob',password:'pwd'}]", new TypeToken<List<User>>(){}.getType());
-    User user = list.get(0);
-    assertEquals(User.DEFAULT_EMAIL, user.email);
-  }
-
-  public void testCollection() {
-    Collection<User> list = gson.fromJson("[{name:'bob',password:'pwd'}]", new TypeToken<Collection<User>>(){}.getType());
-    User user = list.iterator().next();
-    assertEquals(User.DEFAULT_EMAIL, user.email);
-  }
-
-  public void testMapKeyAndValues() {
-    Type mapType = new TypeToken<Map<User, Address>>(){}.getType();
-    try {
-      gson.fromJson("[[{name:'bob',password:'pwd'},{}]]", mapType);
-      fail();
-    } catch (JsonSyntaxException expected) {}
-    Map<User, Address> map = gson.fromJson("[[{name:'bob',password:'pwd'},{city:'Mountain View',state:'CA',zip:'94043'}]]",
-        mapType);
-    Entry<User, Address> entry = map.entrySet().iterator().next();
-    assertEquals(User.DEFAULT_EMAIL, entry.getKey().email);
-    assertEquals(Address.DEFAULT_FIRST_LINE, entry.getValue().firstLine);
-  }
-
-  public void testField() {
-    UserGroup userGroup = gson.fromJson("{user:{name:'bob',password:'pwd'}}", UserGroup.class);
-    assertEquals(User.DEFAULT_EMAIL, userGroup.user.email);
-  }
-
-  public void testCustomTypeAdapter() {
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapter(User.class, new TypeAdapter<User>() {
-          @Override public void write(JsonWriter out, User value) throws IOException {
-            throw new UnsupportedOperationException();
-          }
-
-          @Override public User read(JsonReader in) throws IOException {
-            in.beginObject();
-            in.nextName();
-            String name = in.nextString();
-            in.nextName();
-            String password = in.nextString();
-            in.endObject();
-            return new User(name, password);
-          }
-        })
-        .registerTypeAdapterFactory(new InterceptorFactory())
-        .create();
-    UserGroup userGroup = gson.fromJson("{user:{name:'bob',password:'pwd'}}", UserGroup.class);
-    assertEquals(User.DEFAULT_EMAIL, userGroup.user.email);
-  }
-
-  public void testDirectInvocationOfTypeAdapter() throws Exception {
-    TypeAdapter<UserGroup> adapter = gson.getAdapter(UserGroup.class);
-    UserGroup userGroup = adapter.fromJson("{\"user\":{\"name\":\"bob\",\"password\":\"pwd\"}}");
-    assertEquals(User.DEFAULT_EMAIL, userGroup.user.email);
-  }
-
-  @SuppressWarnings("unused")
-  private static final class UserGroup {
-    User user;
-    String city;
-  }
-
-  @Intercept(postDeserialize = UserValidator.class)
-  @SuppressWarnings("unused")
-  private static final class User {
-    static final String DEFAULT_EMAIL = "invalid@invalid.com";
-    String name;
-    String password;
-    String email;
-    Address address;
-    public User(String name, String password) {
-      this.name = name;
-      this.password = password;
-    }
-  }
-
-  public static final class UserValidator implements JsonPostDeserializer<User> {
-    public void postDeserialize(User user) {
-      if (user.name == null || user.password == null) {
-        throw new JsonSyntaxException("name and password are required fields.");
-      }
-      if (user.email == null) user.email = User.DEFAULT_EMAIL;
-    }
-  }
-
-  @Intercept(postDeserialize = AddressValidator.class)
-  @SuppressWarnings("unused")
-  private static final class Address {
-    static final String DEFAULT_FIRST_LINE = "unknown";
-    String firstLine;
-    String secondLine;
-    String city;
-    String state;
-    String zip;
-  }
-
-  public static final class AddressValidator implements JsonPostDeserializer<Address> {
-    public void postDeserialize(Address address) {
-      if (address.city == null || address.state == null || address.zip == null) {
-        throw new JsonSyntaxException("Address city, state and zip are required fields.");
-      }
-      if (address.firstLine == null) address.firstLine = Address.DEFAULT_FIRST_LINE;
-    }
-  }
-}
diff --git a/extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactoryTest.java b/extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactoryTest.java
deleted file mode 100644
index 8c62bef7f..000000000
--- a/extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactoryTest.java
+++ /dev/null
@@ -1,211 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.typeadapters;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonParseException;
-import com.google.gson.TypeAdapterFactory;
-import junit.framework.TestCase;
-
-public final class RuntimeTypeAdapterFactoryTest extends TestCase {
-
-  public void testRuntimeTypeAdapter() {
-    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(
-        BillingInstrument.class)
-        .registerSubtype(CreditCard.class);
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapterFactory(rta)
-        .create();
-
-    CreditCard original = new CreditCard("Jesse", 234);
-    assertEquals("{\"type\":\"CreditCard\",\"cvv\":234,\"ownerName\":\"Jesse\"}",
-        gson.toJson(original, BillingInstrument.class));
-    BillingInstrument deserialized = gson.fromJson(
-        "{type:'CreditCard',cvv:234,ownerName:'Jesse'}", BillingInstrument.class);
-    assertEquals("Jesse", deserialized.ownerName);
-    assertTrue(deserialized instanceof CreditCard);
-  }
-
-  public void testRuntimeTypeIsBaseType() {
-    TypeAdapterFactory rta = RuntimeTypeAdapterFactory.of(
-        BillingInstrument.class)
-        .registerSubtype(BillingInstrument.class);
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapterFactory(rta)
-        .create();
-
-    BillingInstrument original = new BillingInstrument("Jesse");
-    assertEquals("{\"type\":\"BillingInstrument\",\"ownerName\":\"Jesse\"}",
-        gson.toJson(original, BillingInstrument.class));
-    BillingInstrument deserialized = gson.fromJson(
-        "{type:'BillingInstrument',ownerName:'Jesse'}", BillingInstrument.class);
-    assertEquals("Jesse", deserialized.ownerName);
-  }
-
-  public void testNullBaseType() {
-    try {
-      RuntimeTypeAdapterFactory.of(null);
-      fail();
-    } catch (NullPointerException expected) {
-    }
-  }
-
-  public void testNullTypeFieldName() {
-    try {
-      RuntimeTypeAdapterFactory.of(BillingInstrument.class, null);
-      fail();
-    } catch (NullPointerException expected) {
-    }
-  }
-
-  public void testNullSubtype() {
-    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(
-        BillingInstrument.class);
-    try {
-      rta.registerSubtype(null);
-      fail();
-    } catch (NullPointerException expected) {
-    }
-  }
-
-  public void testNullLabel() {
-    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(
-        BillingInstrument.class);
-    try {
-      rta.registerSubtype(CreditCard.class, null);
-      fail();
-    } catch (NullPointerException expected) {
-    }
-  }
-
-  public void testDuplicateSubtype() {
-    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(
-        BillingInstrument.class);
-    rta.registerSubtype(CreditCard.class, "CC");
-    try {
-      rta.registerSubtype(CreditCard.class, "Visa");
-      fail();
-    } catch (IllegalArgumentException expected) {
-    }
-  }
-
-  public void testDuplicateLabel() {
-    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(
-        BillingInstrument.class);
-    rta.registerSubtype(CreditCard.class, "CC");
-    try {
-      rta.registerSubtype(BankTransfer.class, "CC");
-      fail();
-    } catch (IllegalArgumentException expected) {
-    }
-  }
-
-  public void testDeserializeMissingTypeField() {
-    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)
-        .registerSubtype(CreditCard.class);
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapterFactory(billingAdapter)
-        .create();
-    try {
-      gson.fromJson("{ownerName:'Jesse'}", BillingInstrument.class);
-      fail();
-    } catch (JsonParseException expected) {
-    }
-  }
-
-  public void testDeserializeMissingSubtype() {
-    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)
-        .registerSubtype(BankTransfer.class);
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapterFactory(billingAdapter)
-        .create();
-    try {
-      gson.fromJson("{type:'CreditCard',ownerName:'Jesse'}", BillingInstrument.class);
-      fail();
-    } catch (JsonParseException expected) {
-    }
-  }
-
-  public void testSerializeMissingSubtype() {
-    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)
-        .registerSubtype(BankTransfer.class);
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapterFactory(billingAdapter)
-        .create();
-    try {
-      gson.toJson(new CreditCard("Jesse", 456), BillingInstrument.class);
-      fail();
-    } catch (JsonParseException expected) {
-    }
-  }
-
-  public void testSerializeCollidingTypeFieldName() {
-    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class, "cvv")
-        .registerSubtype(CreditCard.class);
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapterFactory(billingAdapter)
-        .create();
-    try {
-      gson.toJson(new CreditCard("Jesse", 456), BillingInstrument.class);
-      fail();
-    } catch (JsonParseException expected) {
-    }
-  }
-
-  public void testSerializeWrappedNullValue() {
-    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)
-        .registerSubtype(CreditCard.class)
-        .registerSubtype(BankTransfer.class);    
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapterFactory(billingAdapter)
-        .create();    
-    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);
-    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);
-    assertNull(deserialized.instrument);
-  }
-
-  static class BillingInstrumentWrapper {
-    BillingInstrument instrument;
-    BillingInstrumentWrapper(BillingInstrument instrument) {
-      this.instrument = instrument;
-    }
-  }
-
-  static class BillingInstrument {
-    private final String ownerName;
-    BillingInstrument(String ownerName) {
-      this.ownerName = ownerName;
-    }
-  }
-
-  static class CreditCard extends BillingInstrument {
-    int cvv;
-    CreditCard(String ownerName, int cvv) {
-      super(ownerName);
-      this.cvv = cvv;
-    }
-  }
-
-  static class BankTransfer extends BillingInstrument {
-    int bankAccount;
-    BankTransfer(String ownerName, int bankAccount) {
-      super(ownerName);
-      this.bankAccount = bankAccount;
-    }
-  }
-}
diff --git a/extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java b/extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java
deleted file mode 100644
index 902dc4774..000000000
--- a/extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.typeadapters;
-
-import java.text.SimpleDateFormat;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.Locale;
-import java.util.TimeZone;
-
-import junit.framework.TestCase;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-
-public final class UtcDateTypeAdapterTest extends TestCase {
-  private final Gson gson = new GsonBuilder()
-    .registerTypeAdapter(Date.class, new UtcDateTypeAdapter())
-    .create();
-
-  public void testLocalTimeZone() {
-    Date expected = new Date();
-    String json = gson.toJson(expected);
-    Date actual = gson.fromJson(json, Date.class);
-    assertEquals(expected.getTime(), actual.getTime());
-  }
-
-  public void testDifferentTimeZones() {
-    for (String timeZone : TimeZone.getAvailableIDs()) {
-      Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(timeZone));
-      Date expected = cal.getTime();
-      String json = gson.toJson(expected);
-      // System.out.println(json + ": " + timeZone);
-      Date actual = gson.fromJson(json, Date.class);
-      assertEquals(expected.getTime(), actual.getTime());
-    }
-  }
-
-  /**
-   * JDK 1.7 introduced support for XXX format to indicate UTC date. But Android is older JDK.
-   * We want to make sure that this date is parseable in Android.
-   */
-  public void testUtcDatesOnJdkBefore1_7() {
-    Gson gson = new GsonBuilder()
-      .registerTypeAdapter(Date.class, new UtcDateTypeAdapter())
-      .create();
-    gson.fromJson("'2014-12-05T04:00:00.000Z'", Date.class);
-  }
-
-  public void testUtcWithJdk7Default() {
-    Date expected = new Date();
-    SimpleDateFormat iso8601Format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX", Locale.US);
-    iso8601Format.setTimeZone(TimeZone.getTimeZone("UTC"));
-    String expectedJson = "\"" + iso8601Format.format(expected) + "\"";
-    String actualJson = gson.toJson(expected);
-    assertEquals(expectedJson, actualJson);
-    Date actual = gson.fromJson(expectedJson, Date.class);
-    assertEquals(expected.getTime(), actual.getTime());
-  }
-
-  public void testNullDateSerialization() {
-    String json = gson.toJson(null, Date.class);
-    assertEquals("null", json);
-  }
-}
diff --git a/gson/Gson 2.1 notes.txt b/gson/Gson 2.1 notes.txt
index def324ed8..ebfa511b1 100644
--- a/gson/Gson 2.1 notes.txt	
+++ b/gson/Gson 2.1 notes.txt	
@@ -3,4 +3,4 @@ Dropped support for GsonBuilder.registerTypeHierarchyAdapter+InstanceCreator
 Relax registerTypeHierarchyAdapter order
 Gson 2.0 failed if you registered Manager then Employee would fail
 Gson 2.1 it isn't a problem
-com.google.gson.functional.TypeHierarchyAdapterTest#testRegisterSubTypeFirstNotAllowed
\ No newline at end of file
+com.solidfire.gson.functional.TypeHierarchyAdapterTest#testRegisterSubTypeFirstNotAllowed
\ No newline at end of file
diff --git a/gson/bnd.bnd b/gson/bnd.bnd
index c98fcfd3c..cdf31b330 100644
--- a/gson/bnd.bnd
+++ b/gson/bnd.bnd
@@ -10,5 +10,5 @@ Bundle-RequiredExecutionEnvironment: J2SE-1.5, JavaSE-1.6, JavaSE-1.7, JavaSE-1.
 -exportcontents:\
     com.google.gson,\
     com.google.gson.annotations,\
-    com.google.gson.reflect,\
-    com.google.gson.stream
+    com.solidfire.gson.reflect,\
+    com.solidfire.gson.stream
diff --git a/gson/docs/javadocs/allclasses-frame.html b/gson/docs/javadocs/allclasses-frame.html
index d6e484e65..a1b97586a 100644
--- a/gson/docs/javadocs/allclasses-frame.html
+++ b/gson/docs/javadocs/allclasses-frame.html
@@ -60,7 +60,7 @@
 <BR>
 <A HREF="com/google/gson/JsonPrimitive.html" title="class in com.google.gson" target="classFrame">JsonPrimitive</A>
 <BR>
-<A HREF="com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream" target="classFrame">JsonReader</A>
+<A HREF="com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream" target="classFrame">JsonReader</A>
 <BR>
 <A HREF="com/google/gson/JsonSerializationContext.html" title="interface in com.google.gson" target="classFrame"><I>JsonSerializationContext</I></A>
 <BR>
@@ -70,13 +70,13 @@
 <BR>
 <A HREF="com/google/gson/JsonSyntaxException.html" title="class in com.google.gson" target="classFrame">JsonSyntaxException</A>
 <BR>
-<A HREF="com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream" target="classFrame">JsonToken</A>
+<A HREF="com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream" target="classFrame">JsonToken</A>
 <BR>
-<A HREF="com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream" target="classFrame">JsonWriter</A>
+<A HREF="com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream" target="classFrame">JsonWriter</A>
 <BR>
 <A HREF="com/google/gson/LongSerializationPolicy.html" title="enum in com.google.gson" target="classFrame">LongSerializationPolicy</A>
 <BR>
-<A HREF="com/google/gson/stream/MalformedJsonException.html" title="class in com.google.gson.stream" target="classFrame">MalformedJsonException</A>
+<A HREF="com/google/gson/stream/MalformedJsonException.html" title="class in com.solidfire.gson.stream" target="classFrame">MalformedJsonException</A>
 <BR>
 <A HREF="com/google/gson/annotations/SerializedName.html" title="annotation in com.google.gson.annotations" target="classFrame">SerializedName</A>
 <BR>
@@ -86,7 +86,7 @@
 <BR>
 <A HREF="com/google/gson/TypeAdapterFactory.html" title="interface in com.google.gson" target="classFrame"><I>TypeAdapterFactory</I></A>
 <BR>
-<A HREF="com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect" target="classFrame">TypeToken</A>
+<A HREF="com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect" target="classFrame">TypeToken</A>
 <BR>
 <A HREF="com/google/gson/annotations/Until.html" title="annotation in com.google.gson.annotations" target="classFrame">Until</A>
 <BR>
diff --git a/gson/docs/javadocs/allclasses-noframe.html b/gson/docs/javadocs/allclasses-noframe.html
index 963ffefaf..08292b206 100644
--- a/gson/docs/javadocs/allclasses-noframe.html
+++ b/gson/docs/javadocs/allclasses-noframe.html
@@ -60,7 +60,7 @@
 <BR>
 <A HREF="com/google/gson/JsonPrimitive.html" title="class in com.google.gson">JsonPrimitive</A>
 <BR>
-<A HREF="com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+<A HREF="com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <BR>
 <A HREF="com/google/gson/JsonSerializationContext.html" title="interface in com.google.gson"><I>JsonSerializationContext</I></A>
 <BR>
@@ -70,13 +70,13 @@
 <BR>
 <A HREF="com/google/gson/JsonSyntaxException.html" title="class in com.google.gson">JsonSyntaxException</A>
 <BR>
-<A HREF="com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A>
+<A HREF="com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A>
 <BR>
-<A HREF="com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+<A HREF="com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <BR>
 <A HREF="com/google/gson/LongSerializationPolicy.html" title="enum in com.google.gson">LongSerializationPolicy</A>
 <BR>
-<A HREF="com/google/gson/stream/MalformedJsonException.html" title="class in com.google.gson.stream">MalformedJsonException</A>
+<A HREF="com/google/gson/stream/MalformedJsonException.html" title="class in com.solidfire.gson.stream">MalformedJsonException</A>
 <BR>
 <A HREF="com/google/gson/annotations/SerializedName.html" title="annotation in com.google.gson.annotations">SerializedName</A>
 <BR>
@@ -86,7 +86,7 @@
 <BR>
 <A HREF="com/google/gson/TypeAdapterFactory.html" title="interface in com.google.gson"><I>TypeAdapterFactory</I></A>
 <BR>
-<A HREF="com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>
+<A HREF="com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>
 <BR>
 <A HREF="com/google/gson/annotations/Until.html" title="annotation in com.google.gson.annotations">Until</A>
 <BR>
diff --git a/gson/docs/javadocs/com/google/gson/FieldAttributes.html b/gson/docs/javadocs/com/google/gson/FieldAttributes.html
index 620bb5c78..e5c1dfa52 100644
--- a/gson/docs/javadocs/com/google/gson/FieldAttributes.html
+++ b/gson/docs/javadocs/com/google/gson/FieldAttributes.html
@@ -94,7 +94,7 @@ <H2>
 Class FieldAttributes</H2>
 <PRE>
 <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
-  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.FieldAttributes</B>
+  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.FieldAttributes</B>
 </PRE>
 <HR>
 <DL>
diff --git a/gson/docs/javadocs/com/google/gson/FieldNamingPolicy.html b/gson/docs/javadocs/com/google/gson/FieldNamingPolicy.html
index d466f9610..5ad44854c 100644
--- a/gson/docs/javadocs/com/google/gson/FieldNamingPolicy.html
+++ b/gson/docs/javadocs/com/google/gson/FieldNamingPolicy.html
@@ -95,7 +95,7 @@ <H2>
 <PRE>
 <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
   <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Enum.html?is-external=true" title="class or interface in java.lang">java.lang.Enum</A>&lt;<A HREF="../../../com/google/gson/FieldNamingPolicy.html" title="enum in com.google.gson">FieldNamingPolicy</A>&gt;
-      <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.FieldNamingPolicy</B>
+      <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.FieldNamingPolicy</B>
 </PRE>
 <DL>
 <DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../com/google/gson/FieldNamingStrategy.html" title="interface in com.google.gson">FieldNamingStrategy</A>, <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>, <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Comparable.html?is-external=true" title="class or interface in java.lang">Comparable</A>&lt;<A HREF="../../../com/google/gson/FieldNamingPolicy.html" title="enum in com.google.gson">FieldNamingPolicy</A>&gt;</DD>
@@ -210,7 +210,7 @@ <H2>
 <TD><CODE><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true#getClass()" title="class or interface in java.lang">getClass</A>, <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true#notify()" title="class or interface in java.lang">notify</A>, <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true#notifyAll()" title="class or interface in java.lang">notifyAll</A>, <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true#wait()" title="class or interface in java.lang">wait</A>, <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true#wait(long)" title="class or interface in java.lang">wait</A>, <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true#wait(long, int)" title="class or interface in java.lang">wait</A></CODE></TD>
 </TR>
 </TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_com.google.gson.FieldNamingStrategy"><!-- --></A>
+&nbsp;<A NAME="methods_inherited_from_class_com.solidfire.gson.FieldNamingStrategy"><!-- --></A>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
 <TH ALIGN="left"><B>Methods inherited from interface com.google.gson.<A HREF="../../../com/google/gson/FieldNamingStrategy.html" title="interface in com.google.gson">FieldNamingStrategy</A></B></TH>
diff --git a/gson/docs/javadocs/com/google/gson/Gson.html b/gson/docs/javadocs/com/google/gson/Gson.html
index 416ee2e6c..a2fbf6c15 100644
--- a/gson/docs/javadocs/com/google/gson/Gson.html
+++ b/gson/docs/javadocs/com/google/gson/Gson.html
@@ -94,7 +94,7 @@ <H2>
 Class Gson</H2>
 <PRE>
 <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
-  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.Gson</B>
+  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.Gson</B>
 </PRE>
 <HR>
 <DL>
@@ -143,7 +143,7 @@ <H2>
 <DL>
 <DT><B>Author:</B></DT>
   <DD>Inderjeet Singh, Joel Leitch, Jesse Wilson</DD>
-<DT><B>See Also:</B><DD><A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect"><CODE>TypeToken</CODE></A></DL>
+<DT><B>See Also:</B><DD><A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect"><CODE>TypeToken</CODE></A></DL>
 <HR>
 
 <P>
@@ -216,7 +216,7 @@ <H2>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
-<TD><CODE><B><A HREF="../../../com/google/gson/Gson.html#fromJson(com.google.gson.stream.JsonReader, java.lang.reflect.Type)">fromJson</A></B>(<A HREF="../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>&nbsp;reader,
+<TD><CODE><B><A HREF="../../../com/google/gson/Gson.html#fromJson(com.solidfire.gson.stream.JsonReader, java.lang.reflect.Type)">fromJson</A></B>(<A HREF="../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>&nbsp;reader,
          <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/reflect/Type.html?is-external=true" title="class or interface in java.lang.reflect">Type</A>&nbsp;typeOfT)</CODE>
 
 <BR>
@@ -314,7 +314,7 @@ <H2>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
-<TD><CODE><B><A HREF="../../../com/google/gson/Gson.html#getAdapter(com.google.gson.reflect.TypeToken)">getAdapter</A></B>(<A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
+<TD><CODE><B><A HREF="../../../com/google/gson/Gson.html#getAdapter(com.solidfire.gson.reflect.TypeToken)">getAdapter</A></B>(<A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the type adapter for <code></code> type.</TD>
@@ -329,8 +329,8 @@ <H2>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
-<TD><CODE><B><A HREF="../../../com/google/gson/Gson.html#getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken)">getDelegateAdapter</A></B>(<A HREF="../../../com/google/gson/TypeAdapterFactory.html" title="interface in com.google.gson">TypeAdapterFactory</A>&nbsp;skipPast,
-                   <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
+<TD><CODE><B><A HREF="../../../com/google/gson/Gson.html#getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.solidfire.gson.reflect.TypeToken)">getDelegateAdapter</A></B>(<A HREF="../../../com/google/gson/TypeAdapterFactory.html" title="interface in com.google.gson">TypeAdapterFactory</A>&nbsp;skipPast,
+                   <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is used to get an alternate type adapter for the specified type.</TD>
@@ -355,8 +355,8 @@ <H2>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;void</CODE></FONT></TD>
-<TD><CODE><B><A HREF="../../../com/google/gson/Gson.html#toJson(com.google.gson.JsonElement, com.google.gson.stream.JsonWriter)">toJson</A></B>(<A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>&nbsp;jsonElement,
-       <A HREF="../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>&nbsp;writer)</CODE>
+<TD><CODE><B><A HREF="../../../com/google/gson/Gson.html#toJson(com.google.gson.JsonElement, com.solidfire.gson.stream.JsonWriter)">toJson</A></B>(<A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>&nbsp;jsonElement,
+       <A HREF="../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>&nbsp;writer)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Writes the JSON for <code>jsonElement</code> to <code>writer</code>.</TD>
@@ -402,9 +402,9 @@ <H2>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;void</CODE></FONT></TD>
-<TD><CODE><B><A HREF="../../../com/google/gson/Gson.html#toJson(java.lang.Object, java.lang.reflect.Type, com.google.gson.stream.JsonWriter)">toJson</A></B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;src,
+<TD><CODE><B><A HREF="../../../com/google/gson/Gson.html#toJson(java.lang.Object, java.lang.reflect.Type, com.solidfire.gson.stream.JsonWriter)">toJson</A></B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;src,
        <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/reflect/Type.html?is-external=true" title="class or interface in java.lang.reflect">Type</A>&nbsp;typeOfSrc,
-       <A HREF="../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>&nbsp;writer)</CODE>
+       <A HREF="../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>&nbsp;writer)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Writes the JSON representation of <code>src</code> of type <code>typeOfSrc</code> to
@@ -510,10 +510,10 @@ <H2>
 </TR>
 </TABLE>
 
-<A NAME="getAdapter(com.google.gson.reflect.TypeToken)"><!-- --></A><H3>
+<A NAME="getAdapter(com.solidfire.gson.reflect.TypeToken)"><!-- --></A><H3>
 getAdapter</H3>
 <PRE>
-public &lt;T&gt; <A HREF="../../../com/google/gson/TypeAdapter.html" title="class in com.google.gson">TypeAdapter</A>&lt;T&gt; <B>getAdapter</B>(<A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</PRE>
+public &lt;T&gt; <A HREF="../../../com/google/gson/TypeAdapter.html" title="class in com.google.gson">TypeAdapter</A>&lt;T&gt; <B>getAdapter</B>(<A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</PRE>
 <DL>
 <DD>Returns the type adapter for <code></code> type.
 <P>
@@ -526,11 +526,11 @@ <H2>
 </DL>
 <HR>
 
-<A NAME="getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken)"><!-- --></A><H3>
+<A NAME="getDelegateAdapter(com.solidfire.gson.TypeAdapterFactory, com.solidfire.gson.reflect.TypeToken)"><!-- --></A><H3>
 getDelegateAdapter</H3>
 <PRE>
 public &lt;T&gt; <A HREF="../../../com/google/gson/TypeAdapter.html" title="class in com.google.gson">TypeAdapter</A>&lt;T&gt; <B>getDelegateAdapter</B>(<A HREF="../../../com/google/gson/TypeAdapterFactory.html" title="interface in com.google.gson">TypeAdapterFactory</A>&nbsp;skipPast,
-                                             <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</PRE>
+                                             <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</PRE>
 <DL>
 <DD>This method is used to get an alternate type adapter for the specified type. This is used
  to access a type adapter that is overridden by a <A HREF="../../../com/google/gson/TypeAdapterFactory.html" title="interface in com.google.gson"><CODE>TypeAdapterFactory</CODE></A> that you
@@ -572,7 +572,7 @@ <H2>
 <DD><DL>
 <DT><B>Parameters:</B><DD><CODE>skipPast</CODE> - The type adapter factory that needs to be skipped while searching for
    a matching type adapter. In most cases, you should just pass <i>this</i> (the type adapter
-   factory from where <A HREF="../../../com/google/gson/Gson.html#getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken)"><CODE>getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken<T>)</CODE></A> method is being invoked).<DD><CODE>type</CODE> - Type for which the delegate adapter is being searched for.<DT><B>Since:</B></DT>
+   factory from where <A HREF="../../../com/google/gson/Gson.html#getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.solidfire.gson.reflect.TypeToken)"><CODE>getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.solidfire.gson.reflect.TypeToken<T>)</CODE></A> method is being invoked).<DD><CODE>type</CODE> - Type for which the delegate adapter is being searched for.<DT><B>Since:</B></DT>
   <DD>2.2</DD>
 </DL>
 </DD>
@@ -630,7 +630,7 @@ <H2>
 <P>
 <DD><DL>
 <DT><B>Parameters:</B><DD><CODE>src</CODE> - the object for which JSON representation is to be created<DD><CODE>typeOfSrc</CODE> - The specific genericized type of src. You can obtain
- this type by using the <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect"><CODE>TypeToken</CODE></A> class. For example,
+ this type by using the <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect"><CODE>TypeToken</CODE></A> class. For example,
  to get the type for <code>Collection&lt;Foo&gt;</code>, you should use:
  <pre>
  Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -676,7 +676,7 @@ <H2>
 <P>
 <DD><DL>
 <DT><B>Parameters:</B><DD><CODE>src</CODE> - the object for which JSON representation is to be created<DD><CODE>typeOfSrc</CODE> - The specific genericized type of src. You can obtain
- this type by using the <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect"><CODE>TypeToken</CODE></A> class. For example,
+ this type by using the <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect"><CODE>TypeToken</CODE></A> class. For example,
  to get the type for <code>Collection&lt;Foo&gt;</code>, you should use:
  <pre>
  Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -725,7 +725,7 @@ <H2>
 <P>
 <DD><DL>
 <DT><B>Parameters:</B><DD><CODE>src</CODE> - the object for which JSON representation is to be created<DD><CODE>typeOfSrc</CODE> - The specific genericized type of src. You can obtain
- this type by using the <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect"><CODE>TypeToken</CODE></A> class. For example,
+ this type by using the <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect"><CODE>TypeToken</CODE></A> class. For example,
  to get the type for <code>Collection&lt;Foo&gt;</code>, you should use:
  <pre>
  Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -738,12 +738,12 @@ <H2>
 </DL>
 <HR>
 
-<A NAME="toJson(java.lang.Object, java.lang.reflect.Type, com.google.gson.stream.JsonWriter)"><!-- --></A><H3>
+<A NAME="toJson(java.lang.Object, java.lang.reflect.Type, com.solidfire.gson.stream.JsonWriter)"><!-- --></A><H3>
 toJson</H3>
 <PRE>
 public void <B>toJson</B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;src,
                    <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/reflect/Type.html?is-external=true" title="class or interface in java.lang.reflect">Type</A>&nbsp;typeOfSrc,
-                   <A HREF="../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>&nbsp;writer)
+                   <A HREF="../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>&nbsp;writer)
             throws <A HREF="../../../com/google/gson/JsonIOException.html" title="class in com.google.gson">JsonIOException</A></PRE>
 <DL>
 <DD>Writes the JSON representation of <code>src</code> of type <code>typeOfSrc</code> to
@@ -773,7 +773,7 @@ <H2>
 </DL>
 <HR>
 
-<A NAME="toJson(com.google.gson.JsonElement, java.lang.Appendable)"><!-- --></A><H3>
+<A NAME="toJson(com.solidfire.gson.JsonElement, java.lang.Appendable)"><!-- --></A><H3>
 toJson</H3>
 <PRE>
 public void <B>toJson</B>(<A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>&nbsp;jsonElement,
@@ -792,11 +792,11 @@ <H2>
 </DL>
 <HR>
 
-<A NAME="toJson(com.google.gson.JsonElement, com.google.gson.stream.JsonWriter)"><!-- --></A><H3>
+<A NAME="toJson(com.solidfire.gson.JsonElement, com.solidfire.gson.stream.JsonWriter)"><!-- --></A><H3>
 toJson</H3>
 <PRE>
 public void <B>toJson</B>(<A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>&nbsp;jsonElement,
-                   <A HREF="../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>&nbsp;writer)
+                   <A HREF="../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>&nbsp;writer)
             throws <A HREF="../../../com/google/gson/JsonIOException.html" title="class in com.google.gson">JsonIOException</A></PRE>
 <DL>
 <DD>Writes the JSON for <code>jsonElement</code> to <code>writer</code>.
@@ -849,7 +849,7 @@ <H2>
 <P>
 <DD><DL>
 <DT><B>Type Parameters:</B><DD><CODE>T</CODE> - the type of the desired object<DT><B>Parameters:</B><DD><CODE>json</CODE> - the string from which the object is to be deserialized<DD><CODE>typeOfT</CODE> - The specific genericized type of src. You can obtain this type by using the
- <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect"><CODE>TypeToken</CODE></A> class. For example, to get the type for
+ <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect"><CODE>TypeToken</CODE></A> class. For example, to get the type for
  <code>Collection&lt;Foo&gt;</code>, you should use:
  <pre>
  Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -906,7 +906,7 @@ <H2>
 <P>
 <DD><DL>
 <DT><B>Type Parameters:</B><DD><CODE>T</CODE> - the type of the desired object<DT><B>Parameters:</B><DD><CODE>json</CODE> - the reader producing Json from which the object is to be deserialized<DD><CODE>typeOfT</CODE> - The specific genericized type of src. You can obtain this type by using the
- <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect"><CODE>TypeToken</CODE></A> class. For example, to get the type for
+ <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect"><CODE>TypeToken</CODE></A> class. For example, to get the type for
  <code>Collection&lt;Foo&gt;</code>, you should use:
  <pre>
  Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -921,10 +921,10 @@ <H2>
 </DL>
 <HR>
 
-<A NAME="fromJson(com.google.gson.stream.JsonReader, java.lang.reflect.Type)"><!-- --></A><H3>
+<A NAME="fromJson(com.solidfire.gson.stream.JsonReader, java.lang.reflect.Type)"><!-- --></A><H3>
 fromJson</H3>
 <PRE>
-public &lt;T&gt; T <B>fromJson</B>(<A HREF="../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>&nbsp;reader,
+public &lt;T&gt; T <B>fromJson</B>(<A HREF="../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>&nbsp;reader,
                       <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/reflect/Type.html?is-external=true" title="class or interface in java.lang.reflect">Type</A>&nbsp;typeOfT)
            throws <A HREF="../../../com/google/gson/JsonIOException.html" title="class in com.google.gson">JsonIOException</A>,
                   <A HREF="../../../com/google/gson/JsonSyntaxException.html" title="class in com.google.gson">JsonSyntaxException</A></PRE>
@@ -942,7 +942,7 @@ <H2>
 </DL>
 <HR>
 
-<A NAME="fromJson(com.google.gson.JsonElement, java.lang.Class)"><!-- --></A><H3>
+<A NAME="fromJson(com.solidfire.gson.JsonElement, java.lang.Class)"><!-- --></A><H3>
 fromJson</H3>
 <PRE>
 public &lt;T&gt; T <B>fromJson</B>(<A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>&nbsp;json,
@@ -969,7 +969,7 @@ <H2>
 </DL>
 <HR>
 
-<A NAME="fromJson(com.google.gson.JsonElement, java.lang.reflect.Type)"><!-- --></A><H3>
+<A NAME="fromJson(com.solidfire.gson.JsonElement, java.lang.reflect.Type)"><!-- --></A><H3>
 fromJson</H3>
 <PRE>
 public &lt;T&gt; T <B>fromJson</B>(<A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>&nbsp;json,
@@ -983,7 +983,7 @@ <H2>
 <DD><DL>
 <DT><B>Type Parameters:</B><DD><CODE>T</CODE> - the type of the desired object<DT><B>Parameters:</B><DD><CODE>json</CODE> - the root of the parse tree of <A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson"><CODE>JsonElement</CODE></A>s from which the object is to
  be deserialized<DD><CODE>typeOfT</CODE> - The specific genericized type of src. You can obtain this type by using the
- <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect"><CODE>TypeToken</CODE></A> class. For example, to get the type for
+ <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect"><CODE>TypeToken</CODE></A> class. For example, to get the type for
  <code>Collection&lt;Foo&gt;</code>, you should use:
  <pre>
  Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
diff --git a/gson/docs/javadocs/com/google/gson/GsonBuilder.html b/gson/docs/javadocs/com/google/gson/GsonBuilder.html
index 9f9355742..5943d26b7 100644
--- a/gson/docs/javadocs/com/google/gson/GsonBuilder.html
+++ b/gson/docs/javadocs/com/google/gson/GsonBuilder.html
@@ -94,7 +94,7 @@ <H2>
 Class GsonBuilder</H2>
 <PRE>
 <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
-  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.GsonBuilder</B>
+  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.GsonBuilder</B>
 </PRE>
 <HR>
 <DL>
@@ -638,7 +638,7 @@ <h3>Maps as JSON arrays</h3>
 </DL>
 <HR>
 
-<A NAME="setExclusionStrategies(com.google.gson.ExclusionStrategy...)"><!-- --></A><H3>
+<A NAME="setExclusionStrategies(com.solidfire.gson.ExclusionStrategy...)"><!-- --></A><H3>
 setExclusionStrategies</H3>
 <PRE>
 public <A HREF="../../../com/google/gson/GsonBuilder.html" title="class in com.google.gson">GsonBuilder</A> <B>setExclusionStrategies</B>(<A HREF="../../../com/google/gson/ExclusionStrategy.html" title="interface in com.google.gson">ExclusionStrategy</A>...&nbsp;strategies)</PRE>
diff --git a/gson/docs/javadocs/com/google/gson/JsonArray.html b/gson/docs/javadocs/com/google/gson/JsonArray.html
index ad8688ec6..2144fb46b 100644
--- a/gson/docs/javadocs/com/google/gson/JsonArray.html
+++ b/gson/docs/javadocs/com/google/gson/JsonArray.html
@@ -94,8 +94,8 @@ <H2>
 Class JsonArray</H2>
 <PRE>
 <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
-  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">com.google.gson.JsonElement</A>
-      <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.JsonArray</B>
+  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">com.solidfire.gson.JsonElement</A>
+      <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.JsonArray</B>
 </PRE>
 <DL>
 <DT><B>All Implemented Interfaces:</B> <DD><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Iterable.html?is-external=true" title="class or interface in java.lang">Iterable</A>&lt;<A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>&gt;</DD>
@@ -330,7 +330,7 @@ <H2>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the number of elements in the array.</TD>
 </TR>
 </TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_com.google.gson.JsonElement"><!-- --></A>
+&nbsp;<A NAME="methods_inherited_from_class_com.solidfire.gson.JsonElement"><!-- --></A>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
 <TH ALIGN="left"><B>Methods inherited from class com.google.gson.<A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A></B></TH>
diff --git a/gson/docs/javadocs/com/google/gson/JsonDeserializationContext.html b/gson/docs/javadocs/com/google/gson/JsonDeserializationContext.html
index 57d0dfe4f..07483eccf 100644
--- a/gson/docs/javadocs/com/google/gson/JsonDeserializationContext.html
+++ b/gson/docs/javadocs/com/google/gson/JsonDeserializationContext.html
@@ -150,7 +150,7 @@ <H2>
 </TR>
 </TABLE>
 
-<A NAME="deserialize(com.google.gson.JsonElement, java.lang.reflect.Type)"><!-- --></A><H3>
+<A NAME="deserialize(com.solidfire.gson.JsonElement, java.lang.reflect.Type)"><!-- --></A><H3>
 deserialize</H3>
 <PRE>
 &lt;T&gt; T <B>deserialize</B>(<A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>&nbsp;json,
diff --git a/gson/docs/javadocs/com/google/gson/JsonDeserializer.html b/gson/docs/javadocs/com/google/gson/JsonDeserializer.html
index 1f1e207ad..32b9863c6 100644
--- a/gson/docs/javadocs/com/google/gson/JsonDeserializer.html
+++ b/gson/docs/javadocs/com/google/gson/JsonDeserializer.html
@@ -189,7 +189,7 @@ <H2>
 </TR>
 </TABLE>
 
-<A NAME="deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)"><!-- --></A><H3>
+<A NAME="deserialize(com.solidfire.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)"><!-- --></A><H3>
 deserialize</H3>
 <PRE>
 <A HREF="../../../com/google/gson/JsonDeserializer.html" title="type parameter in JsonDeserializer">T</A> <B>deserialize</B>(<A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>&nbsp;json,
diff --git a/gson/docs/javadocs/com/google/gson/JsonElement.html b/gson/docs/javadocs/com/google/gson/JsonElement.html
index 785eeaae5..df2b5ee87 100644
--- a/gson/docs/javadocs/com/google/gson/JsonElement.html
+++ b/gson/docs/javadocs/com/google/gson/JsonElement.html
@@ -94,7 +94,7 @@ <H2>
 Class JsonElement</H2>
 <PRE>
 <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
-  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.JsonElement</B>
+  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.JsonElement</B>
 </PRE>
 <DL>
 <DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../com/google/gson/JsonArray.html" title="class in com.google.gson">JsonArray</A>, <A HREF="../../../com/google/gson/JsonNull.html" title="class in com.google.gson">JsonNull</A>, <A HREF="../../../com/google/gson/JsonObject.html" title="class in com.google.gson">JsonObject</A>, <A HREF="../../../com/google/gson/JsonPrimitive.html" title="class in com.google.gson">JsonPrimitive</A></DD>
diff --git a/gson/docs/javadocs/com/google/gson/JsonIOException.html b/gson/docs/javadocs/com/google/gson/JsonIOException.html
index c57a0f608..bb625ff6d 100644
--- a/gson/docs/javadocs/com/google/gson/JsonIOException.html
+++ b/gson/docs/javadocs/com/google/gson/JsonIOException.html
@@ -97,8 +97,8 @@ <H2>
   <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Throwable.html?is-external=true" title="class or interface in java.lang">java.lang.Throwable</A>
       <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Exception.html?is-external=true" title="class or interface in java.lang">java.lang.Exception</A>
           <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/RuntimeException.html?is-external=true" title="class or interface in java.lang">java.lang.RuntimeException</A>
-              <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../com/google/gson/JsonParseException.html" title="class in com.google.gson">com.google.gson.JsonParseException</A>
-                  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.JsonIOException</B>
+              <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../com/google/gson/JsonParseException.html" title="class in com.google.gson">com.solidfire.gson.JsonParseException</A>
+                  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.JsonIOException</B>
 </PRE>
 <DL>
 <DT><B>All Implemented Interfaces:</B> <DD><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A></DD>
diff --git a/gson/docs/javadocs/com/google/gson/JsonNull.html b/gson/docs/javadocs/com/google/gson/JsonNull.html
index 33b2ec64e..418c4dfe9 100644
--- a/gson/docs/javadocs/com/google/gson/JsonNull.html
+++ b/gson/docs/javadocs/com/google/gson/JsonNull.html
@@ -94,8 +94,8 @@ <H2>
 Class JsonNull</H2>
 <PRE>
 <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
-  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">com.google.gson.JsonElement</A>
-      <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.JsonNull</B>
+  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">com.solidfire.gson.JsonElement</A>
+      <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.JsonNull</B>
 </PRE>
 <HR>
 <DL>
@@ -175,7 +175,7 @@ <H2>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;All instances of JsonNull have the same hash code since they are indistinguishable</TD>
 </TR>
 </TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_com.google.gson.JsonElement"><!-- --></A>
+&nbsp;<A NAME="methods_inherited_from_class_com.solidfire.gson.JsonElement"><!-- --></A>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
 <TH ALIGN="left"><B>Methods inherited from class com.google.gson.<A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A></B></TH>
diff --git a/gson/docs/javadocs/com/google/gson/JsonObject.html b/gson/docs/javadocs/com/google/gson/JsonObject.html
index 3afd99e41..d6c7600db 100644
--- a/gson/docs/javadocs/com/google/gson/JsonObject.html
+++ b/gson/docs/javadocs/com/google/gson/JsonObject.html
@@ -94,8 +94,8 @@ <H2>
 Class JsonObject</H2>
 <PRE>
 <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
-  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">com.google.gson.JsonElement</A>
-      <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.JsonObject</B>
+  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">com.solidfire.gson.JsonElement</A>
+      <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.JsonObject</B>
 </PRE>
 <HR>
 <DL>
@@ -259,7 +259,7 @@ <H2>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes the <code>property</code> from this <A HREF="../../../com/google/gson/JsonObject.html" title="class in com.google.gson"><CODE>JsonObject</CODE></A>.</TD>
 </TR>
 </TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_com.google.gson.JsonElement"><!-- --></A>
+&nbsp;<A NAME="methods_inherited_from_class_com.solidfire.gson.JsonElement"><!-- --></A>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
 <TH ALIGN="left"><B>Methods inherited from class com.google.gson.<A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A></B></TH>
diff --git a/gson/docs/javadocs/com/google/gson/JsonParseException.html b/gson/docs/javadocs/com/google/gson/JsonParseException.html
index 0297398e1..b231db364 100644
--- a/gson/docs/javadocs/com/google/gson/JsonParseException.html
+++ b/gson/docs/javadocs/com/google/gson/JsonParseException.html
@@ -97,7 +97,7 @@ <H2>
   <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Throwable.html?is-external=true" title="class or interface in java.lang">java.lang.Throwable</A>
       <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Exception.html?is-external=true" title="class or interface in java.lang">java.lang.Exception</A>
           <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/RuntimeException.html?is-external=true" title="class or interface in java.lang">java.lang.RuntimeException</A>
-              <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.JsonParseException</B>
+              <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.JsonParseException</B>
 </PRE>
 <DL>
 <DT><B>All Implemented Interfaces:</B> <DD><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A></DD>
diff --git a/gson/docs/javadocs/com/google/gson/JsonParser.html b/gson/docs/javadocs/com/google/gson/JsonParser.html
index ab6c02dac..96a54d927 100644
--- a/gson/docs/javadocs/com/google/gson/JsonParser.html
+++ b/gson/docs/javadocs/com/google/gson/JsonParser.html
@@ -94,7 +94,7 @@ <H2>
 Class JsonParser</H2>
 <PRE>
 <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
-  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.JsonParser</B>
+  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.JsonParser</B>
 </PRE>
 <HR>
 <DL>
@@ -143,7 +143,7 @@ <H2>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;<A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A></CODE></FONT></TD>
-<TD><CODE><B><A HREF="../../../com/google/gson/JsonParser.html#parse(com.google.gson.stream.JsonReader)">parse</A></B>(<A HREF="../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>&nbsp;json)</CODE>
+<TD><CODE><B><A HREF="../../../com/google/gson/JsonParser.html#parse(com.solidfire.gson.stream.JsonReader)">parse</A></B>(<A HREF="../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>&nbsp;json)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the next value from the JSON stream as a parse tree.</TD>
@@ -246,10 +246,10 @@ <H2>
 </DL>
 <HR>
 
-<A NAME="parse(com.google.gson.stream.JsonReader)"><!-- --></A><H3>
+<A NAME="parse(com.solidfire.gson.stream.JsonReader)"><!-- --></A><H3>
 parse</H3>
 <PRE>
-public <A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A> <B>parse</B>(<A HREF="../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>&nbsp;json)
+public <A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A> <B>parse</B>(<A HREF="../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>&nbsp;json)
                   throws <A HREF="../../../com/google/gson/JsonIOException.html" title="class in com.google.gson">JsonIOException</A>,
                          <A HREF="../../../com/google/gson/JsonSyntaxException.html" title="class in com.google.gson">JsonSyntaxException</A></PRE>
 <DL>
diff --git a/gson/docs/javadocs/com/google/gson/JsonPrimitive.html b/gson/docs/javadocs/com/google/gson/JsonPrimitive.html
index 79861db2b..b11a5ef2f 100644
--- a/gson/docs/javadocs/com/google/gson/JsonPrimitive.html
+++ b/gson/docs/javadocs/com/google/gson/JsonPrimitive.html
@@ -94,8 +94,8 @@ <H2>
 Class JsonPrimitive</H2>
 <PRE>
 <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
-  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">com.google.gson.JsonElement</A>
-      <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.JsonPrimitive</B>
+  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">com.solidfire.gson.JsonElement</A>
+      <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.JsonPrimitive</B>
 </PRE>
 <HR>
 <DL>
@@ -296,7 +296,7 @@ <H2>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check whether this primitive contains a String value.</TD>
 </TR>
 </TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_com.google.gson.JsonElement"><!-- --></A>
+&nbsp;<A NAME="methods_inherited_from_class_com.solidfire.gson.JsonElement"><!-- --></A>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
 <TH ALIGN="left"><B>Methods inherited from class com.google.gson.<A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A></B></TH>
diff --git a/gson/docs/javadocs/com/google/gson/JsonStreamParser.html b/gson/docs/javadocs/com/google/gson/JsonStreamParser.html
index 208cbea3d..013e50271 100644
--- a/gson/docs/javadocs/com/google/gson/JsonStreamParser.html
+++ b/gson/docs/javadocs/com/google/gson/JsonStreamParser.html
@@ -94,7 +94,7 @@ <H2>
 Class JsonStreamParser</H2>
 <PRE>
 <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
-  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.JsonStreamParser</B>
+  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.JsonStreamParser</B>
 </PRE>
 <DL>
 <DT><B>All Implemented Interfaces:</B> <DD><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util">Iterator</A>&lt;<A HREF="../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>&gt;</DD>
diff --git a/gson/docs/javadocs/com/google/gson/JsonSyntaxException.html b/gson/docs/javadocs/com/google/gson/JsonSyntaxException.html
index 216d89718..d19a9b532 100644
--- a/gson/docs/javadocs/com/google/gson/JsonSyntaxException.html
+++ b/gson/docs/javadocs/com/google/gson/JsonSyntaxException.html
@@ -97,8 +97,8 @@ <H2>
   <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Throwable.html?is-external=true" title="class or interface in java.lang">java.lang.Throwable</A>
       <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Exception.html?is-external=true" title="class or interface in java.lang">java.lang.Exception</A>
           <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/RuntimeException.html?is-external=true" title="class or interface in java.lang">java.lang.RuntimeException</A>
-              <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../com/google/gson/JsonParseException.html" title="class in com.google.gson">com.google.gson.JsonParseException</A>
-                  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.JsonSyntaxException</B>
+              <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../com/google/gson/JsonParseException.html" title="class in com.google.gson">com.solidfire.gson.JsonParseException</A>
+                  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.JsonSyntaxException</B>
 </PRE>
 <DL>
 <DT><B>All Implemented Interfaces:</B> <DD><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A></DD>
diff --git a/gson/docs/javadocs/com/google/gson/LongSerializationPolicy.html b/gson/docs/javadocs/com/google/gson/LongSerializationPolicy.html
index c11d122d0..bdce73b70 100644
--- a/gson/docs/javadocs/com/google/gson/LongSerializationPolicy.html
+++ b/gson/docs/javadocs/com/google/gson/LongSerializationPolicy.html
@@ -95,7 +95,7 @@ <H2>
 <PRE>
 <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
   <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Enum.html?is-external=true" title="class or interface in java.lang">java.lang.Enum</A>&lt;<A HREF="../../../com/google/gson/LongSerializationPolicy.html" title="enum in com.google.gson">LongSerializationPolicy</A>&gt;
-      <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.LongSerializationPolicy</B>
+      <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.LongSerializationPolicy</B>
 </PRE>
 <DL>
 <DT><B>All Implemented Interfaces:</B> <DD><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>, <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Comparable.html?is-external=true" title="class or interface in java.lang">Comparable</A>&lt;<A HREF="../../../com/google/gson/LongSerializationPolicy.html" title="enum in com.google.gson">LongSerializationPolicy</A>&gt;</DD>
diff --git a/gson/docs/javadocs/com/google/gson/TypeAdapter.html b/gson/docs/javadocs/com/google/gson/TypeAdapter.html
index c1a05f0e0..50dd3b162 100644
--- a/gson/docs/javadocs/com/google/gson/TypeAdapter.html
+++ b/gson/docs/javadocs/com/google/gson/TypeAdapter.html
@@ -133,8 +133,8 @@ <h3>Defining a type's JSON form</h3>
  strings like <code>"5,8"</code> rather than objects like <code>{"x":5,"y":8}</code>. In
  this case the type adapter binds a rich Java class to a compact JSON value.
 
- <p>The <A HREF="../../../com/google/gson/TypeAdapter.html#read(com.google.gson.stream.JsonReader)"><CODE>read()</CODE></A> method must read exactly one value
- and <A HREF="../../../com/google/gson/TypeAdapter.html#write(com.google.gson.stream.JsonWriter, T)"><CODE>write()</CODE></A> must write exactly one value.
+ <p>The <A HREF="../../../com/google/gson/TypeAdapter.html#read(com.solidfire.gson.stream.JsonReader)"><CODE>read()</CODE></A> method must read exactly one value
+ and <A HREF="../../../com/google/gson/TypeAdapter.html#write(com.solidfire.gson.stream.JsonWriter, T)"><CODE>write()</CODE></A> must write exactly one value.
  For primitive types this is means readers should make exactly one call to
  <code>nextBoolean()</code>, <code>nextDouble()</code>, <code>nextInt()</code>, <code>nextLong()</code>, <code>nextString()</code> or <code>nextNull()</code>. Writers should make
  exactly one call to one of <code>value()</code> or <code>nullValue()</code>.
@@ -230,7 +230,7 @@ <h3>Defining a type's JSON form</h3>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>abstract &nbsp;<A HREF="../../../com/google/gson/TypeAdapter.html" title="type parameter in TypeAdapter">T</A></CODE></FONT></TD>
-<TD><CODE><B><A HREF="../../../com/google/gson/TypeAdapter.html#read(com.google.gson.stream.JsonReader)">read</A></B>(<A HREF="../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>&nbsp;in)</CODE>
+<TD><CODE><B><A HREF="../../../com/google/gson/TypeAdapter.html#read(com.solidfire.gson.stream.JsonReader)">read</A></B>(<A HREF="../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>&nbsp;in)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reads one JSON value (an array, object, string, number, boolean or null)
@@ -264,7 +264,7 @@ <h3>Defining a type's JSON form</h3>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>abstract &nbsp;void</CODE></FONT></TD>
-<TD><CODE><B><A HREF="../../../com/google/gson/TypeAdapter.html#write(com.google.gson.stream.JsonWriter, T)">write</A></B>(<A HREF="../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>&nbsp;out,
+<TD><CODE><B><A HREF="../../../com/google/gson/TypeAdapter.html#write(com.solidfire.gson.stream.JsonWriter, T)">write</A></B>(<A HREF="../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>&nbsp;out,
       <A HREF="../../../com/google/gson/TypeAdapter.html" title="type parameter in TypeAdapter">T</A>&nbsp;value)</CODE>
 
 <BR>
@@ -311,10 +311,10 @@ <h3>Defining a type's JSON form</h3>
 </TR>
 </TABLE>
 
-<A NAME="write(com.google.gson.stream.JsonWriter,java.lang.Object)"><!-- --></A><A NAME="write(com.google.gson.stream.JsonWriter, T)"><!-- --></A><H3>
+<A NAME="write(com.solidfire.gson.stream.JsonWriter,java.lang.Object)"><!-- --></A><A NAME="write(com.solidfire.gson.stream.JsonWriter, T)"><!-- --></A><H3>
 write</H3>
 <PRE>
-public abstract void <B>write</B>(<A HREF="../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>&nbsp;out,
+public abstract void <B>write</B>(<A HREF="../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>&nbsp;out,
                            <A HREF="../../../com/google/gson/TypeAdapter.html" title="type parameter in TypeAdapter">T</A>&nbsp;value)
                     throws <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
 <DL>
@@ -339,7 +339,7 @@ <h3>Defining a type's JSON form</h3>
 <DD>Converts <code>value</code> to a JSON document and writes it to <code>out</code>.
  Unlike Gson's similar <A HREF="../../../com/google/gson/Gson.html#toJson(com.google.gson.JsonElement, java.lang.Appendable)"><CODE>toJson</CODE></A>
  method, this write is strict. Create a <A HREF="../../../com/google/gson/stream/JsonWriter.html#setLenient(boolean)"><CODE>lenient</CODE></A> <code>JsonWriter</code> and call
- <A HREF="../../../com/google/gson/TypeAdapter.html#write(com.google.gson.stream.JsonWriter, T)"><CODE>write(com.google.gson.stream.JsonWriter, Object)</CODE></A> for lenient
+ <A HREF="../../../com/google/gson/TypeAdapter.html#write(com.solidfire.gson.stream.JsonWriter, T)"><CODE>write(com.solidfire.gson.stream.JsonWriter, Object)</CODE></A> for lenient
  writing.
 <P>
 <DD><DL>
@@ -405,7 +405,7 @@ <h3>Defining a type's JSON form</h3>
                     throws <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
 <DL>
 <DD>Converts <code>value</code> to a JSON document. Unlike Gson's similar <A HREF="../../../com/google/gson/Gson.html#toJson(java.lang.Object)"><CODE>toJson</CODE></A> method, this write is strict. Create a <A HREF="../../../com/google/gson/stream/JsonWriter.html#setLenient(boolean)"><CODE>lenient</CODE></A> <code>JsonWriter</code> and call
- <A HREF="../../../com/google/gson/TypeAdapter.html#write(com.google.gson.stream.JsonWriter, T)"><CODE>write(com.google.gson.stream.JsonWriter, Object)</CODE></A> for lenient
+ <A HREF="../../../com/google/gson/TypeAdapter.html#write(com.solidfire.gson.stream.JsonWriter, T)"><CODE>write(com.solidfire.gson.stream.JsonWriter, Object)</CODE></A> for lenient
  writing.
 <P>
 <DD><DL>
@@ -434,10 +434,10 @@ <h3>Defining a type's JSON form</h3>
 </DL>
 <HR>
 
-<A NAME="read(com.google.gson.stream.JsonReader)"><!-- --></A><H3>
+<A NAME="read(com.solidfire.gson.stream.JsonReader)"><!-- --></A><H3>
 read</H3>
 <PRE>
-public abstract <A HREF="../../../com/google/gson/TypeAdapter.html" title="type parameter in TypeAdapter">T</A> <B>read</B>(<A HREF="../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>&nbsp;in)
+public abstract <A HREF="../../../com/google/gson/TypeAdapter.html" title="type parameter in TypeAdapter">T</A> <B>read</B>(<A HREF="../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>&nbsp;in)
                 throws <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
 <DL>
 <DD>Reads one JSON value (an array, object, string, number, boolean or null)
@@ -461,7 +461,7 @@ <h3>Defining a type's JSON form</h3>
 <DD>Converts the JSON document in <code>in</code> to a Java object. Unlike Gson's
  similar <A HREF="../../../com/google/gson/Gson.html#fromJson(java.io.Reader, java.lang.Class)"><CODE>fromJson</CODE></A> method, this
  read is strict. Create a <A HREF="../../../com/google/gson/stream/JsonReader.html#setLenient(boolean)"><CODE>lenient</CODE></A>
- <code>JsonReader</code> and call <A HREF="../../../com/google/gson/TypeAdapter.html#read(com.google.gson.stream.JsonReader)"><CODE>read(JsonReader)</CODE></A> for lenient reading.
+ <code>JsonReader</code> and call <A HREF="../../../com/google/gson/TypeAdapter.html#read(com.solidfire.gson.stream.JsonReader)"><CODE>read(JsonReader)</CODE></A> for lenient reading.
 <P>
 <DD><DL>
 
@@ -482,7 +482,7 @@ <h3>Defining a type's JSON form</h3>
 <DL>
 <DD>Converts the JSON document in <code>json</code> to a Java object. Unlike Gson's
  similar <A HREF="../../../com/google/gson/Gson.html#fromJson(java.lang.String, java.lang.Class)"><CODE>fromJson</CODE></A> method, this read is
- strict. Create a <A HREF="../../../com/google/gson/stream/JsonReader.html#setLenient(boolean)"><CODE>lenient</CODE></A> <code>JsonReader</code> and call <A HREF="../../../com/google/gson/TypeAdapter.html#read(com.google.gson.stream.JsonReader)"><CODE>read(JsonReader)</CODE></A> for lenient reading.
+ strict. Create a <A HREF="../../../com/google/gson/stream/JsonReader.html#setLenient(boolean)"><CODE>lenient</CODE></A> <code>JsonReader</code> and call <A HREF="../../../com/google/gson/TypeAdapter.html#read(com.solidfire.gson.stream.JsonReader)"><CODE>read(JsonReader)</CODE></A> for lenient reading.
 <P>
 <DD><DL>
 
diff --git a/gson/docs/javadocs/com/google/gson/TypeAdapterFactory.html b/gson/docs/javadocs/com/google/gson/TypeAdapterFactory.html
index 2fb30755f..08acbe080 100644
--- a/gson/docs/javadocs/com/google/gson/TypeAdapterFactory.html
+++ b/gson/docs/javadocs/com/google/gson/TypeAdapterFactory.html
@@ -145,7 +145,7 @@ <h3>Example: Converting enums to lowercase</h3>
 
  <p>Type adapter factories select which types they provide type adapters
  for. If a factory cannot support a given type, it must return null when
- that type is passed to <A HREF="../../../com/google/gson/TypeAdapterFactory.html#create(com.google.gson.Gson, com.google.gson.reflect.TypeToken)"><CODE>create(com.google.gson.Gson, com.google.gson.reflect.TypeToken<T>)</CODE></A>. Factories should expect <code>create()</code> to be called on them for many types and should return null for
+ that type is passed to <A HREF="../../../com/google/gson/TypeAdapterFactory.html#create(com.google.gson.Gson, com.solidfire.gson.reflect.TypeToken)"><CODE>create(com.google.gson.Gson, com.solidfire.gson.reflect.TypeToken<T>)</CODE></A>. Factories should expect <code>create()</code> to be called on them for many types and should return null for
  most of those types. In the above example the factory returns null for
  calls to <code>create()</code> where <code>type</code> is not an enum.
 
@@ -254,8 +254,8 @@ <h3>Example: composing other type adapters</h3>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
-<TD><CODE><B><A HREF="../../../com/google/gson/TypeAdapterFactory.html#create(com.google.gson.Gson, com.google.gson.reflect.TypeToken)">create</A></B>(<A HREF="../../../com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>&nbsp;gson,
-       <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
+<TD><CODE><B><A HREF="../../../com/google/gson/TypeAdapterFactory.html#create(com.google.gson.Gson, com.solidfire.gson.reflect.TypeToken)">create</A></B>(<A HREF="../../../com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>&nbsp;gson,
+       <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a type adapter for <code>type</code>, or null if this factory doesn't
@@ -275,11 +275,11 @@ <h3>Example: composing other type adapters</h3>
 </TR>
 </TABLE>
 
-<A NAME="create(com.google.gson.Gson, com.google.gson.reflect.TypeToken)"><!-- --></A><H3>
+<A NAME="create(com.solidfire.gson.Gson, com.solidfire.gson.reflect.TypeToken)"><!-- --></A><H3>
 create</H3>
 <PRE>
 &lt;T&gt; <A HREF="../../../com/google/gson/TypeAdapter.html" title="class in com.google.gson">TypeAdapter</A>&lt;T&gt; <B>create</B>(<A HREF="../../../com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>&nbsp;gson,
-                          <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</PRE>
+                          <A HREF="../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</PRE>
 <DL>
 <DD>Returns a type adapter for <code>type</code>, or null if this factory doesn't
  support <code>type</code>.
diff --git a/gson/docs/javadocs/com/google/gson/annotations/class-use/Expose.html b/gson/docs/javadocs/com/google/gson/annotations/class-use/Expose.html
index 2146bfb73..ed2161a06 100644
--- a/gson/docs/javadocs/com/google/gson/annotations/class-use/Expose.html
+++ b/gson/docs/javadocs/com/google/gson/annotations/class-use/Expose.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.annotations.Expose (Gson 2.3.1 API)
+  Uses of Class com.solidfire.gson.annotations.Expose (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.annotations.Expose (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Class com.solidfire.gson.annotations.Expose (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/annotations/class-use/JsonAdapter.html b/gson/docs/javadocs/com/google/gson/annotations/class-use/JsonAdapter.html
index d6a264221..f336070df 100644
--- a/gson/docs/javadocs/com/google/gson/annotations/class-use/JsonAdapter.html
+++ b/gson/docs/javadocs/com/google/gson/annotations/class-use/JsonAdapter.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.annotations.JsonAdapter (Gson 2.3.1 API)
+  Uses of Class com.solidfire.gson.annotations.JsonAdapter (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.annotations.JsonAdapter (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Class com.solidfire.gson.annotations.JsonAdapter (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/annotations/class-use/SerializedName.html b/gson/docs/javadocs/com/google/gson/annotations/class-use/SerializedName.html
index 6e9cc8961..3b0dacfa3 100644
--- a/gson/docs/javadocs/com/google/gson/annotations/class-use/SerializedName.html
+++ b/gson/docs/javadocs/com/google/gson/annotations/class-use/SerializedName.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.annotations.SerializedName (Gson 2.3.1 API)
+  Uses of Class com.solidfire.gson.annotations.SerializedName (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.annotations.SerializedName (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Class com.solidfire.gson.annotations.SerializedName (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/annotations/class-use/Since.html b/gson/docs/javadocs/com/google/gson/annotations/class-use/Since.html
index 7d4162c51..f1bb67abf 100644
--- a/gson/docs/javadocs/com/google/gson/annotations/class-use/Since.html
+++ b/gson/docs/javadocs/com/google/gson/annotations/class-use/Since.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.annotations.Since (Gson 2.3.1 API)
+  Uses of Class com.solidfire.gson.annotations.Since (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.annotations.Since (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Class com.solidfire.gson.annotations.Since (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/annotations/class-use/Until.html b/gson/docs/javadocs/com/google/gson/annotations/class-use/Until.html
index d18f2702f..cce15ba94 100644
--- a/gson/docs/javadocs/com/google/gson/annotations/class-use/Until.html
+++ b/gson/docs/javadocs/com/google/gson/annotations/class-use/Until.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.annotations.Until (Gson 2.3.1 API)
+  Uses of Class com.solidfire.gson.annotations.Until (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.annotations.Until (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Class com.solidfire.gson.annotations.Until (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/ExclusionStrategy.html b/gson/docs/javadocs/com/google/gson/class-use/ExclusionStrategy.html
index df78f8f38..85d037e57 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/ExclusionStrategy.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/ExclusionStrategy.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Interface com.google.gson.ExclusionStrategy (Gson 2.3.1 API)
+  Uses of Interface com.solidfire.gson.ExclusionStrategy (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Interface com.google.gson.ExclusionStrategy (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Interface com.solidfire.gson.ExclusionStrategy (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/FieldAttributes.html b/gson/docs/javadocs/com/google/gson/class-use/FieldAttributes.html
index 0bca5831d..a307aec1f 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/FieldAttributes.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/FieldAttributes.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.FieldAttributes (Gson 2.3.1 API)
+  Uses of Class com.solidfire.gson.FieldAttributes (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.FieldAttributes (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Class com.solidfire.gson.FieldAttributes (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/FieldNamingPolicy.html b/gson/docs/javadocs/com/google/gson/class-use/FieldNamingPolicy.html
index 43ad5eb3b..a867b7f2d 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/FieldNamingPolicy.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/FieldNamingPolicy.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.FieldNamingPolicy (Gson 2.3.1 API)
+  Uses of Class com.solidfire.gson.FieldNamingPolicy (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.FieldNamingPolicy (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Class com.solidfire.gson.FieldNamingPolicy (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/FieldNamingStrategy.html b/gson/docs/javadocs/com/google/gson/class-use/FieldNamingStrategy.html
index bd2040a47..31647b2f4 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/FieldNamingStrategy.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/FieldNamingStrategy.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Interface com.google.gson.FieldNamingStrategy (Gson 2.3.1 API)
+  Uses of Interface com.solidfire.gson.FieldNamingStrategy (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Interface com.google.gson.FieldNamingStrategy (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Interface com.solidfire.gson.FieldNamingStrategy (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/Gson.html b/gson/docs/javadocs/com/google/gson/class-use/Gson.html
index aa80f0225..ec8cae61a 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/Gson.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/Gson.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.Gson (Gson 2.3.1 API)
+    Uses of Class com.solidfire.gson.Gson (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
+    function windowTitle()
+    {
     if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.Gson (Gson 2.3.1 API)";
+    parent.document.title="Uses of Class com.solidfire.gson.Gson (Gson 2.3.1 API)";
+    }
     }
-}
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -138,8 +138,8 @@ <H2>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
-<TD><CODE><B>TypeAdapterFactory.</B><B><A HREF="../../../../com/google/gson/TypeAdapterFactory.html#create(com.google.gson.Gson, com.google.gson.reflect.TypeToken)">create</A></B>(<A HREF="../../../../com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>&nbsp;gson,
-       <A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
+<TD><CODE><B>TypeAdapterFactory.</B><B><A HREF="../../../../com/google/gson/TypeAdapterFactory.html#create(com.google.gson.Gson, com.solidfire.gson.reflect.TypeToken)">create</A></B>(<A HREF="../../../../com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>&nbsp;gson,
+       <A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a type adapter for <code>type</code>, or null if this factory doesn't
diff --git a/gson/docs/javadocs/com/google/gson/class-use/GsonBuilder.html b/gson/docs/javadocs/com/google/gson/class-use/GsonBuilder.html
index 4d8c0be79..5fe64dc9a 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/GsonBuilder.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/GsonBuilder.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.GsonBuilder (Gson 2.3.1 API)
+    Uses of Class com.solidfire.gson.GsonBuilder (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
+    function windowTitle()
+    {
     if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.GsonBuilder (Gson 2.3.1 API)";
+    parent.document.title="Uses of Class com.solidfire.gson.GsonBuilder (Gson 2.3.1 API)";
+    }
     }
-}
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/InstanceCreator.html b/gson/docs/javadocs/com/google/gson/class-use/InstanceCreator.html
index 304606337..c7aa32668 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/InstanceCreator.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/InstanceCreator.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Interface com.google.gson.InstanceCreator (Gson 2.3.1 API)
+  Uses of Interface com.solidfire.gson.InstanceCreator (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Interface com.google.gson.InstanceCreator (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Interface com.solidfire.gson.InstanceCreator (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonArray.html b/gson/docs/javadocs/com/google/gson/class-use/JsonArray.html
index 22492a1f9..d9b4229be 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/JsonArray.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/JsonArray.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.JsonArray (Gson 2.3.1 API)
+  Uses of Class com.solidfire.gson.JsonArray (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.JsonArray (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Class com.solidfire.gson.JsonArray (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonDeserializationContext.html b/gson/docs/javadocs/com/google/gson/class-use/JsonDeserializationContext.html
index 6de4973f3..35c2d3ed2 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/JsonDeserializationContext.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/JsonDeserializationContext.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Interface com.google.gson.JsonDeserializationContext (Gson 2.3.1 API)
+    Uses of Interface com.solidfire.gson.JsonDeserializationContext (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
+    function windowTitle()
+    {
     if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Interface com.google.gson.JsonDeserializationContext (Gson 2.3.1 API)";
+    parent.document.title="Uses of Interface com.solidfire.gson.JsonDeserializationContext (Gson 2.3.1 API)";
+    }
     }
-}
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonDeserializer.html b/gson/docs/javadocs/com/google/gson/class-use/JsonDeserializer.html
index 3948a537e..4446ec44f 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/JsonDeserializer.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/JsonDeserializer.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Interface com.google.gson.JsonDeserializer (Gson 2.3.1 API)
+  Uses of Interface com.solidfire.gson.JsonDeserializer (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Interface com.google.gson.JsonDeserializer (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Interface com.solidfire.gson.JsonDeserializer (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonElement.html b/gson/docs/javadocs/com/google/gson/class-use/JsonElement.html
index dc3cd5c0b..871d069c0 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/JsonElement.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/JsonElement.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.JsonElement (Gson 2.3.1 API)
+    Uses of Class com.solidfire.gson.JsonElement (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
+    function windowTitle()
+    {
     if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.JsonElement (Gson 2.3.1 API)";
+    parent.document.title="Uses of Class com.solidfire.gson.JsonElement (Gson 2.3.1 API)";
+    }
     }
-}
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -179,7 +179,7 @@ <H2>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;<A HREF="../../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A></CODE></FONT></TD>
-<TD><CODE><B>JsonParser.</B><B><A HREF="../../../../com/google/gson/JsonParser.html#parse(com.google.gson.stream.JsonReader)">parse</A></B>(<A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>&nbsp;json)</CODE>
+<TD><CODE><B>JsonParser.</B><B><A HREF="../../../../com/google/gson/JsonParser.html#parse(com.solidfire.gson.stream.JsonReader)">parse</A></B>(<A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>&nbsp;json)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the next value from the JSON stream as a parse tree.</TD>
@@ -451,8 +451,8 @@ <H2>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;void</CODE></FONT></TD>
-<TD><CODE><B>Gson.</B><B><A HREF="../../../../com/google/gson/Gson.html#toJson(com.google.gson.JsonElement, com.google.gson.stream.JsonWriter)">toJson</A></B>(<A HREF="../../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>&nbsp;jsonElement,
-       <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>&nbsp;writer)</CODE>
+<TD><CODE><B>Gson.</B><B><A HREF="../../../../com/google/gson/Gson.html#toJson(com.google.gson.JsonElement, com.solidfire.gson.stream.JsonWriter)">toJson</A></B>(<A HREF="../../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>&nbsp;jsonElement,
+       <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>&nbsp;writer)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Writes the JSON for <code>jsonElement</code> to <code>writer</code>.</TD>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonIOException.html b/gson/docs/javadocs/com/google/gson/class-use/JsonIOException.html
index 5ae823a6f..5727f69f4 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/JsonIOException.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/JsonIOException.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.JsonIOException (Gson 2.3.1 API)
+    Uses of Class com.solidfire.gson.JsonIOException (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
+    function windowTitle()
+    {
     if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.JsonIOException (Gson 2.3.1 API)";
+    parent.document.title="Uses of Class com.solidfire.gson.JsonIOException (Gson 2.3.1 API)";
+    }
     }
-}
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -122,7 +122,7 @@ <H2>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
-<TD><CODE><B>Gson.</B><B><A HREF="../../../../com/google/gson/Gson.html#fromJson(com.google.gson.stream.JsonReader, java.lang.reflect.Type)">fromJson</A></B>(<A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>&nbsp;reader,
+<TD><CODE><B>Gson.</B><B><A HREF="../../../../com/google/gson/Gson.html#fromJson(com.solidfire.gson.stream.JsonReader, java.lang.reflect.Type)">fromJson</A></B>(<A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>&nbsp;reader,
          <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/reflect/Type.html?is-external=true" title="class or interface in java.lang.reflect">Type</A>&nbsp;typeOfT)</CODE>
 
 <BR>
@@ -166,7 +166,7 @@ <H2>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;<A HREF="../../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A></CODE></FONT></TD>
-<TD><CODE><B>JsonParser.</B><B><A HREF="../../../../com/google/gson/JsonParser.html#parse(com.google.gson.stream.JsonReader)">parse</A></B>(<A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>&nbsp;json)</CODE>
+<TD><CODE><B>JsonParser.</B><B><A HREF="../../../../com/google/gson/JsonParser.html#parse(com.solidfire.gson.stream.JsonReader)">parse</A></B>(<A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>&nbsp;json)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the next value from the JSON stream as a parse tree.</TD>
@@ -191,8 +191,8 @@ <H2>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;void</CODE></FONT></TD>
-<TD><CODE><B>Gson.</B><B><A HREF="../../../../com/google/gson/Gson.html#toJson(com.google.gson.JsonElement, com.google.gson.stream.JsonWriter)">toJson</A></B>(<A HREF="../../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>&nbsp;jsonElement,
-       <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>&nbsp;writer)</CODE>
+<TD><CODE><B>Gson.</B><B><A HREF="../../../../com/google/gson/Gson.html#toJson(com.google.gson.JsonElement, com.solidfire.gson.stream.JsonWriter)">toJson</A></B>(<A HREF="../../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>&nbsp;jsonElement,
+       <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>&nbsp;writer)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Writes the JSON for <code>jsonElement</code> to <code>writer</code>.</TD>
@@ -220,9 +220,9 @@ <H2>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;void</CODE></FONT></TD>
-<TD><CODE><B>Gson.</B><B><A HREF="../../../../com/google/gson/Gson.html#toJson(java.lang.Object, java.lang.reflect.Type, com.google.gson.stream.JsonWriter)">toJson</A></B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;src,
+<TD><CODE><B>Gson.</B><B><A HREF="../../../../com/google/gson/Gson.html#toJson(java.lang.Object, java.lang.reflect.Type, com.solidfire.gson.stream.JsonWriter)">toJson</A></B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;src,
        <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/reflect/Type.html?is-external=true" title="class or interface in java.lang.reflect">Type</A>&nbsp;typeOfSrc,
-       <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>&nbsp;writer)</CODE>
+       <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>&nbsp;writer)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Writes the JSON representation of <code>src</code> of type <code>typeOfSrc</code> to
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonNull.html b/gson/docs/javadocs/com/google/gson/class-use/JsonNull.html
index 81c456568..c0c6dafb8 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/JsonNull.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/JsonNull.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.JsonNull (Gson 2.3.1 API)
+  Uses of Class com.solidfire.gson.JsonNull (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.JsonNull (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Class com.solidfire.gson.JsonNull (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonObject.html b/gson/docs/javadocs/com/google/gson/class-use/JsonObject.html
index 2e4d5dc0e..53e3e48eb 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/JsonObject.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/JsonObject.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.JsonObject (Gson 2.3.1 API)
+  Uses of Class com.solidfire.gson.JsonObject (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.JsonObject (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Class com.solidfire.gson.JsonObject (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonParseException.html b/gson/docs/javadocs/com/google/gson/class-use/JsonParseException.html
index b1dd0d497..35570dfa6 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/JsonParseException.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/JsonParseException.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.JsonParseException (Gson 2.3.1 API)
+    Uses of Class com.solidfire.gson.JsonParseException (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
+    function windowTitle()
+    {
     if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.JsonParseException (Gson 2.3.1 API)";
+    parent.document.title="Uses of Class com.solidfire.gson.JsonParseException (Gson 2.3.1 API)";
+    }
     }
-}
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonParser.html b/gson/docs/javadocs/com/google/gson/class-use/JsonParser.html
index fad118730..f33e9c92e 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/JsonParser.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/JsonParser.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.JsonParser (Gson 2.3.1 API)
+  Uses of Class com.solidfire.gson.JsonParser (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.JsonParser (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Class com.solidfire.gson.JsonParser (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonPrimitive.html b/gson/docs/javadocs/com/google/gson/class-use/JsonPrimitive.html
index 2c548c28a..5bab98869 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/JsonPrimitive.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/JsonPrimitive.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.JsonPrimitive (Gson 2.3.1 API)
+  Uses of Class com.solidfire.gson.JsonPrimitive (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.JsonPrimitive (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Class com.solidfire.gson.JsonPrimitive (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonSerializationContext.html b/gson/docs/javadocs/com/google/gson/class-use/JsonSerializationContext.html
index ec258ff7e..39b55b43b 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/JsonSerializationContext.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/JsonSerializationContext.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Interface com.google.gson.JsonSerializationContext (Gson 2.3.1 API)
+    Uses of Interface com.solidfire.gson.JsonSerializationContext (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
+    function windowTitle()
+    {
     if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Interface com.google.gson.JsonSerializationContext (Gson 2.3.1 API)";
+    parent.document.title="Uses of Interface com.solidfire.gson.JsonSerializationContext (Gson 2.3.1 API)";
+    }
     }
-}
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonSerializer.html b/gson/docs/javadocs/com/google/gson/class-use/JsonSerializer.html
index bd01d2f03..bc85c679c 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/JsonSerializer.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/JsonSerializer.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Interface com.google.gson.JsonSerializer (Gson 2.3.1 API)
+  Uses of Interface com.solidfire.gson.JsonSerializer (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Interface com.google.gson.JsonSerializer (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Interface com.solidfire.gson.JsonSerializer (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonStreamParser.html b/gson/docs/javadocs/com/google/gson/class-use/JsonStreamParser.html
index be4ce5077..b84c3a411 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/JsonStreamParser.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/JsonStreamParser.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.JsonStreamParser (Gson 2.3.1 API)
+  Uses of Class com.solidfire.gson.JsonStreamParser (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.JsonStreamParser (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Class com.solidfire.gson.JsonStreamParser (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonSyntaxException.html b/gson/docs/javadocs/com/google/gson/class-use/JsonSyntaxException.html
index 38e4bdeaa..05fee9aac 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/JsonSyntaxException.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/JsonSyntaxException.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.JsonSyntaxException (Gson 2.3.1 API)
+    Uses of Class com.solidfire.gson.JsonSyntaxException (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
+    function windowTitle()
+    {
     if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.JsonSyntaxException (Gson 2.3.1 API)";
+    parent.document.title="Uses of Class com.solidfire.gson.JsonSyntaxException (Gson 2.3.1 API)";
+    }
     }
-}
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -156,7 +156,7 @@ <H2>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
-<TD><CODE><B>Gson.</B><B><A HREF="../../../../com/google/gson/Gson.html#fromJson(com.google.gson.stream.JsonReader, java.lang.reflect.Type)">fromJson</A></B>(<A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>&nbsp;reader,
+<TD><CODE><B>Gson.</B><B><A HREF="../../../../com/google/gson/Gson.html#fromJson(com.solidfire.gson.stream.JsonReader, java.lang.reflect.Type)">fromJson</A></B>(<A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>&nbsp;reader,
          <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/reflect/Type.html?is-external=true" title="class or interface in java.lang.reflect">Type</A>&nbsp;typeOfT)</CODE>
 
 <BR>
@@ -232,7 +232,7 @@ <H2>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;<A HREF="../../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A></CODE></FONT></TD>
-<TD><CODE><B>JsonParser.</B><B><A HREF="../../../../com/google/gson/JsonParser.html#parse(com.google.gson.stream.JsonReader)">parse</A></B>(<A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>&nbsp;json)</CODE>
+<TD><CODE><B>JsonParser.</B><B><A HREF="../../../../com/google/gson/JsonParser.html#parse(com.solidfire.gson.stream.JsonReader)">parse</A></B>(<A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>&nbsp;json)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the next value from the JSON stream as a parse tree.</TD>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/LongSerializationPolicy.html b/gson/docs/javadocs/com/google/gson/class-use/LongSerializationPolicy.html
index 292a33450..e910f162a 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/LongSerializationPolicy.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/LongSerializationPolicy.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.LongSerializationPolicy (Gson 2.3.1 API)
+  Uses of Class com.solidfire.gson.LongSerializationPolicy (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.LongSerializationPolicy (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Class com.solidfire.gson.LongSerializationPolicy (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/TypeAdapter.html b/gson/docs/javadocs/com/google/gson/class-use/TypeAdapter.html
index 8157c5f78..1fc65266c 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/TypeAdapter.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/TypeAdapter.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.TypeAdapter (Gson 2.3.1 API)
+    Uses of Class com.solidfire.gson.TypeAdapter (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
+    function windowTitle()
+    {
     if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.TypeAdapter (Gson 2.3.1 API)";
+    parent.document.title="Uses of Class com.solidfire.gson.TypeAdapter (Gson 2.3.1 API)";
+    }
     }
-}
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -122,8 +122,8 @@ <H2>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
-<TD><CODE><B>TypeAdapterFactory.</B><B><A HREF="../../../../com/google/gson/TypeAdapterFactory.html#create(com.google.gson.Gson, com.google.gson.reflect.TypeToken)">create</A></B>(<A HREF="../../../../com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>&nbsp;gson,
-       <A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
+<TD><CODE><B>TypeAdapterFactory.</B><B><A HREF="../../../../com/google/gson/TypeAdapterFactory.html#create(com.google.gson.Gson, com.solidfire.gson.reflect.TypeToken)">create</A></B>(<A HREF="../../../../com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>&nbsp;gson,
+       <A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a type adapter for <code>type</code>, or null if this factory doesn't
@@ -154,7 +154,7 @@ <H2>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
-<TD><CODE><B>Gson.</B><B><A HREF="../../../../com/google/gson/Gson.html#getAdapter(com.google.gson.reflect.TypeToken)">getAdapter</A></B>(<A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
+<TD><CODE><B>Gson.</B><B><A HREF="../../../../com/google/gson/Gson.html#getAdapter(com.solidfire.gson.reflect.TypeToken)">getAdapter</A></B>(<A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the type adapter for <code></code> type.</TD>
@@ -169,8 +169,8 @@ <H2>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
-<TD><CODE><B>Gson.</B><B><A HREF="../../../../com/google/gson/Gson.html#getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken)">getDelegateAdapter</A></B>(<A HREF="../../../../com/google/gson/TypeAdapterFactory.html" title="interface in com.google.gson">TypeAdapterFactory</A>&nbsp;skipPast,
-                   <A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
+<TD><CODE><B>Gson.</B><B><A HREF="../../../../com/google/gson/Gson.html#getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.solidfire.gson.reflect.TypeToken)">getDelegateAdapter</A></B>(<A HREF="../../../../com/google/gson/TypeAdapterFactory.html" title="interface in com.google.gson">TypeAdapterFactory</A>&nbsp;skipPast,
+                   <A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is used to get an alternate type adapter for the specified type.</TD>
diff --git a/gson/docs/javadocs/com/google/gson/class-use/TypeAdapterFactory.html b/gson/docs/javadocs/com/google/gson/class-use/TypeAdapterFactory.html
index 99ba94b3e..a90ddc8a7 100644
--- a/gson/docs/javadocs/com/google/gson/class-use/TypeAdapterFactory.html
+++ b/gson/docs/javadocs/com/google/gson/class-use/TypeAdapterFactory.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Interface com.google.gson.TypeAdapterFactory (Gson 2.3.1 API)
+  Uses of Interface com.solidfire.gson.TypeAdapterFactory (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Interface com.google.gson.TypeAdapterFactory (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Interface com.solidfire.gson.TypeAdapterFactory (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -122,8 +122,8 @@ <H2>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
-<TD><CODE><B>Gson.</B><B><A HREF="../../../../com/google/gson/Gson.html#getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken)">getDelegateAdapter</A></B>(<A HREF="../../../../com/google/gson/TypeAdapterFactory.html" title="interface in com.google.gson">TypeAdapterFactory</A>&nbsp;skipPast,
-                   <A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
+<TD><CODE><B>Gson.</B><B><A HREF="../../../../com/google/gson/Gson.html#getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.solidfire.gson.reflect.TypeToken)">getDelegateAdapter</A></B>(<A HREF="../../../../com/google/gson/TypeAdapterFactory.html" title="interface in com.google.gson">TypeAdapterFactory</A>&nbsp;skipPast,
+                   <A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is used to get an alternate type adapter for the specified type.</TD>
diff --git a/gson/docs/javadocs/com/google/gson/reflect/TypeToken.html b/gson/docs/javadocs/com/google/gson/reflect/TypeToken.html
index 9ceb5129c..ec3611ce1 100644
--- a/gson/docs/javadocs/com/google/gson/reflect/TypeToken.html
+++ b/gson/docs/javadocs/com/google/gson/reflect/TypeToken.html
@@ -89,12 +89,12 @@
 <!-- ======== START OF CLASS DATA ======== -->
 <H2>
 <FONT SIZE="-1">
-com.google.gson.reflect</FONT>
+    com.solidfire.gson.reflect</FONT>
 <BR>
 Class TypeToken&lt;T&gt;</H2>
 <PRE>
 <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
-  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.reflect.TypeToken&lt;T&gt;</B>
+  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.reflect.TypeToken&lt;T&gt;</B>
 </PRE>
 <HR>
 <DL>
@@ -166,7 +166,7 @@ <H2>
 <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
 <TR ALIGN="right" VALIGN="">
 <TD NOWRAP><FONT SIZE="-1">
-<CODE>&lt;T&gt; <A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt;</CODE></FONT></TD>
+<CODE>&lt;T&gt; <A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt;</CODE></FONT></TD>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
@@ -177,7 +177,7 @@ <H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>static&nbsp;<A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;?&gt;</CODE></FONT></TD>
+<CODE>static&nbsp;<A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;?&gt;</CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/gson/reflect/TypeToken.html#get(java.lang.reflect.Type)">get</A></B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/reflect/Type.html?is-external=true" title="class or interface in java.lang.reflect">Type</A>&nbsp;type)</CODE>
 
 <BR>
@@ -228,7 +228,7 @@ <H2>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;boolean</CODE></FONT></TD>
-<TD><CODE><B><A HREF="../../../../com/google/gson/reflect/TypeToken.html#isAssignableFrom(com.google.gson.reflect.TypeToken)">isAssignableFrom</A></B>(<A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;?&gt;&nbsp;token)</CODE>
+<TD><CODE><B><A HREF="../../../../com/google/gson/reflect/TypeToken.html#isAssignableFrom(com.solidfire.gson.reflect.TypeToken)">isAssignableFrom</A></B>(<A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;?&gt;&nbsp;token)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>this implementation may be inconsistent with javac for types
@@ -349,11 +349,11 @@ <H2>
 </DL>
 <HR>
 
-<A NAME="isAssignableFrom(com.google.gson.reflect.TypeToken)"><!-- --></A><H3>
+<A NAME="isAssignableFrom(com.solidfire.gson.reflect.TypeToken)"><!-- --></A><H3>
 isAssignableFrom</H3>
 <PRE>
 <FONT SIZE="-1"><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Deprecated.html?is-external=true" title="class or interface in java.lang">@Deprecated</A>
-</FONT>public boolean <B>isAssignableFrom</B>(<A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;?&gt;&nbsp;token)</PRE>
+</FONT>public boolean <B>isAssignableFrom</B>(<A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;?&gt;&nbsp;token)</PRE>
 <DL>
 <DD><B>Deprecated.</B>&nbsp;<I>this implementation may be inconsistent with javac for types
      with wildcards.</I>
@@ -411,7 +411,7 @@ <H2>
 <A NAME="get(java.lang.reflect.Type)"><!-- --></A><H3>
 get</H3>
 <PRE>
-public static <A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;?&gt; <B>get</B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/reflect/Type.html?is-external=true" title="class or interface in java.lang.reflect">Type</A>&nbsp;type)</PRE>
+public static <A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;?&gt; <B>get</B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/reflect/Type.html?is-external=true" title="class or interface in java.lang.reflect">Type</A>&nbsp;type)</PRE>
 <DL>
 <DD>Gets type literal for the given <code>Type</code> instance.
 <P>
@@ -424,7 +424,7 @@ <H2>
 <A NAME="get(java.lang.Class)"><!-- --></A><H3>
 get</H3>
 <PRE>
-public static &lt;T&gt; <A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt; <B>get</B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;type)</PRE>
+public static &lt;T&gt; <A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt; <B>get</B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Class.html?is-external=true" title="class or interface in java.lang">Class</A>&lt;T&gt;&nbsp;type)</PRE>
 <DL>
 <DD>Gets type literal for the given <code>Class</code> instance.
 <P>
diff --git a/gson/docs/javadocs/com/google/gson/reflect/class-use/TypeToken.html b/gson/docs/javadocs/com/google/gson/reflect/class-use/TypeToken.html
index fccc2a1e1..50537110b 100644
--- a/gson/docs/javadocs/com/google/gson/reflect/class-use/TypeToken.html
+++ b/gson/docs/javadocs/com/google/gson/reflect/class-use/TypeToken.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.reflect.TypeToken (Gson 2.3.1 API)
+    Uses of Class com.solidfire.gson.reflect.TypeToken (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
+    function windowTitle()
+    {
     if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.reflect.TypeToken (Gson 2.3.1 API)";
+    parent.document.title="Uses of Class com.solidfire.gson.reflect.TypeToken (Gson 2.3.1 API)";
+    }
     }
-}
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -40,7 +40,7 @@
   <TR ALIGN="center" VALIGN="top">
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
-  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
+  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Use</B></FONT>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
@@ -82,13 +82,13 @@
 <HR>
 <CENTER>
 <H2>
-<B>Uses of Class<br>com.google.gson.reflect.TypeToken</B></H2>
+<B>Uses of Class<br>com.solidfire.gson.reflect.TypeToken</B></H2>
 </CENTER>
 
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-Packages that use <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A></FONT></TH>
+Packages that use <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD><A HREF="#com.google.gson"><B>com.google.gson</B></A></TD>
@@ -96,7 +96,7 @@ <H2>
  vice-versa.&nbsp;</TD>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><A HREF="#com.google.gson.reflect"><B>com.google.gson.reflect</B></A></TD>
+<TD><A HREF="#com.solidfire.gson.reflect"><B>com.solidfire.gson.reflect</B></A></TD>
 <TD>This package provides utility classes for finding type information for generic types.&nbsp;</TD>
 </TR>
 </TABLE>
@@ -106,7 +106,7 @@ <H2>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-Uses of <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A> in <A HREF="../../../../../com/google/gson/package-summary.html">com.google.gson</A></FONT></TH>
+Uses of <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A> in <A HREF="../../../../../com/google/gson/package-summary.html">com.google.gson</A></FONT></TH>
 </TR>
 </TABLE>
 &nbsp;
@@ -114,7 +114,7 @@ <H2>
 
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableSubHeadingColor">
-<TH ALIGN="left" COLSPAN="2">Methods in <A HREF="../../../../../com/google/gson/package-summary.html">com.google.gson</A> with parameters of type <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A></FONT></TH>
+<TH ALIGN="left" COLSPAN="2">Methods in <A HREF="../../../../../com/google/gson/package-summary.html">com.google.gson</A> with parameters of type <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
@@ -126,8 +126,8 @@ <H2>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
-<TD><CODE><B>TypeAdapterFactory.</B><B><A HREF="../../../../../com/google/gson/TypeAdapterFactory.html#create(com.google.gson.Gson, com.google.gson.reflect.TypeToken)">create</A></B>(<A HREF="../../../../../com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>&nbsp;gson,
-       <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
+<TD><CODE><B>TypeAdapterFactory.</B><B><A HREF="../../../../../com/google/gson/TypeAdapterFactory.html#create(com.google.gson.Gson, com.solidfire.gson.reflect.TypeToken)">create</A></B>(<A HREF="../../../../../com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>&nbsp;gson,
+       <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a type adapter for <code>type</code>, or null if this factory doesn't
@@ -143,7 +143,7 @@ <H2>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
-<TD><CODE><B>Gson.</B><B><A HREF="../../../../../com/google/gson/Gson.html#getAdapter(com.google.gson.reflect.TypeToken)">getAdapter</A></B>(<A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
+<TD><CODE><B>Gson.</B><B><A HREF="../../../../../com/google/gson/Gson.html#getAdapter(com.solidfire.gson.reflect.TypeToken)">getAdapter</A></B>(<A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the type adapter for <code></code> type.</TD>
@@ -158,8 +158,8 @@ <H2>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
-<TD><CODE><B>Gson.</B><B><A HREF="../../../../../com/google/gson/Gson.html#getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken)">getDelegateAdapter</A></B>(<A HREF="../../../../../com/google/gson/TypeAdapterFactory.html" title="interface in com.google.gson">TypeAdapterFactory</A>&nbsp;skipPast,
-                   <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
+<TD><CODE><B>Gson.</B><B><A HREF="../../../../../com/google/gson/Gson.html#getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.solidfire.gson.reflect.TypeToken)">getDelegateAdapter</A></B>(<A HREF="../../../../../com/google/gson/TypeAdapterFactory.html" title="interface in com.google.gson">TypeAdapterFactory</A>&nbsp;skipPast,
+                   <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt;&nbsp;type)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is used to get an alternate type adapter for the specified type.</TD>
@@ -167,11 +167,11 @@ <H2>
 </TABLE>
 &nbsp;
 <P>
-<A NAME="com.google.gson.reflect"><!-- --></A>
+<A NAME="com.solidfire.gson.reflect"><!-- --></A>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-Uses of <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A> in <A HREF="../../../../../com/google/gson/reflect/package-summary.html">com.google.gson.reflect</A></FONT></TH>
+Uses of <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A> in <A HREF="../../../../../com/google/gson/reflect/package-summary.html">com.solidfire.gson.reflect</A></FONT></TH>
 </TR>
 </TABLE>
 &nbsp;
@@ -179,7 +179,7 @@ <H2>
 
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableSubHeadingColor">
-<TH ALIGN="left" COLSPAN="2">Methods in <A HREF="../../../../../com/google/gson/reflect/package-summary.html">com.google.gson.reflect</A> that return <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A></FONT></TH>
+<TH ALIGN="left" COLSPAN="2">Methods in <A HREF="../../../../../com/google/gson/reflect/package-summary.html">com.solidfire.gson.reflect</A> that return <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
@@ -187,7 +187,7 @@ <H2>
 <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" SUMMARY="">
 <TR ALIGN="right" VALIGN="">
 <TD NOWRAP><FONT SIZE="-1">
-<CODE>&lt;T&gt; <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;T&gt;</CODE></FONT></TD>
+<CODE>&lt;T&gt; <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;T&gt;</CODE></FONT></TD>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
@@ -198,7 +198,7 @@ <H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>static&nbsp;<A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;?&gt;</CODE></FONT></TD>
+<CODE>static&nbsp;<A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;?&gt;</CODE></FONT></TD>
 <TD><CODE><B>TypeToken.</B><B><A HREF="../../../../../com/google/gson/reflect/TypeToken.html#get(java.lang.reflect.Type)">get</A></B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/reflect/Type.html?is-external=true" title="class or interface in java.lang.reflect">Type</A>&nbsp;type)</CODE>
 
 <BR>
@@ -210,12 +210,12 @@ <H2>
 
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableSubHeadingColor">
-<TH ALIGN="left" COLSPAN="2">Methods in <A HREF="../../../../../com/google/gson/reflect/package-summary.html">com.google.gson.reflect</A> with parameters of type <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A></FONT></TH>
+<TH ALIGN="left" COLSPAN="2">Methods in <A HREF="../../../../../com/google/gson/reflect/package-summary.html">com.solidfire.gson.reflect</A> with parameters of type <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;boolean</CODE></FONT></TD>
-<TD><CODE><B>TypeToken.</B><B><A HREF="../../../../../com/google/gson/reflect/TypeToken.html#isAssignableFrom(com.google.gson.reflect.TypeToken)">isAssignableFrom</A></B>(<A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>&lt;?&gt;&nbsp;token)</CODE>
+<TD><CODE><B>TypeToken.</B><B><A HREF="../../../../../com/google/gson/reflect/TypeToken.html#isAssignableFrom(com.solidfire.gson.reflect.TypeToken)">isAssignableFrom</A></B>(<A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>&lt;?&gt;&nbsp;token)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>this implementation may be inconsistent with javac for types
@@ -238,7 +238,7 @@ <H2>
   <TR ALIGN="center" VALIGN="top">
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
-  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
+  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Use</B></FONT>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
diff --git a/gson/docs/javadocs/com/google/gson/reflect/package-frame.html b/gson/docs/javadocs/com/google/gson/reflect/package-frame.html
index c85f90ed5..82e94a72a 100644
--- a/gson/docs/javadocs/com/google/gson/reflect/package-frame.html
+++ b/gson/docs/javadocs/com/google/gson/reflect/package-frame.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-com.google.gson.reflect (Gson 2.3.1 API)
+    com.solidfire.gson.reflect (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -17,14 +17,14 @@
 
 <BODY BGCOLOR="white">
 <FONT size="+1" CLASS="FrameTitleFont">
-<A HREF="../../../../com/google/gson/reflect/package-summary.html" target="classFrame">com.google.gson.reflect</A></FONT>
+<A HREF="../../../../com/google/gson/reflect/package-summary.html" target="classFrame">com.solidfire.gson.reflect</A></FONT>
 <TABLE BORDER="0" WIDTH="100%" SUMMARY="">
 <TR>
 <TD NOWRAP><FONT size="+1" CLASS="FrameHeadingFont">
 Classes</FONT>&nbsp;
 <FONT CLASS="FrameItemFont">
 <BR>
-<A HREF="TypeToken.html" title="class in com.google.gson.reflect" target="classFrame">TypeToken</A></FONT></TD>
+<A HREF="TypeToken.html" title="class in com.solidfire.gson.reflect" target="classFrame">TypeToken</A></FONT></TD>
 </TR>
 </TABLE>
 
diff --git a/gson/docs/javadocs/com/google/gson/reflect/package-summary.html b/gson/docs/javadocs/com/google/gson/reflect/package-summary.html
index 61b34e0b0..219e0cf39 100644
--- a/gson/docs/javadocs/com/google/gson/reflect/package-summary.html
+++ b/gson/docs/javadocs/com/google/gson/reflect/package-summary.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-com.google.gson.reflect (Gson 2.3.1 API)
+  com.solidfire.gson.reflect (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="com.google.gson.reflect (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="com.solidfire.gson.reflect (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -81,7 +81,7 @@
 
 <HR>
 <H2>
-Package com.google.gson.reflect
+  Package com.solidfire.gson.reflect
 </H2>
 This package provides utility classes for finding type information for generic types.
 <P>
@@ -96,7 +96,7 @@ <H2>
 <B>Class Summary</B></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD WIDTH="15%"><B><A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken&lt;T&gt;</A></B></TD>
+<TD WIDTH="15%"><B><A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken&lt;T&gt;</A></B></TD>
 <TD>Represents a generic type <code>T</code>.</TD>
 </TR>
 </TABLE>
@@ -104,7 +104,7 @@ <H2>
 
 <P>
 <A NAME="package_description"><!-- --></A><H2>
-Package com.google.gson.reflect Description
+  Package com.solidfire.gson.reflect Description
 </H2>
 
 <P>
diff --git a/gson/docs/javadocs/com/google/gson/reflect/package-tree.html b/gson/docs/javadocs/com/google/gson/reflect/package-tree.html
index 60de9ac36..1eb236a52 100644
--- a/gson/docs/javadocs/com/google/gson/reflect/package-tree.html
+++ b/gson/docs/javadocs/com/google/gson/reflect/package-tree.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-com.google.gson.reflect Class Hierarchy (Gson 2.3.1 API)
+  com.solidfire.gson.reflect Class Hierarchy (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="com.google.gson.reflect Class Hierarchy (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="com.solidfire.gson.reflect Class Hierarchy (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -82,7 +82,7 @@
 <HR>
 <CENTER>
 <H2>
-Hierarchy For Package com.google.gson.reflect
+  Hierarchy For Package com.solidfire.gson.reflect
 </H2>
 </CENTER>
 <DL>
@@ -93,7 +93,7 @@ <H2>
 </H2>
 <UL>
 <LI TYPE="circle">java.lang.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang"><B>Object</B></A><UL>
-<LI TYPE="circle">com.google.gson.reflect.<A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect"><B>TypeToken</B></A>&lt;T&gt;</UL>
+<LI TYPE="circle">com.solidfire.gson.reflect.<A HREF="../../../../com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect"><B>TypeToken</B></A>&lt;T&gt;</UL>
 </UL>
 <HR>
 
diff --git a/gson/docs/javadocs/com/google/gson/reflect/package-use.html b/gson/docs/javadocs/com/google/gson/reflect/package-use.html
index e0af29245..325196e5c 100644
--- a/gson/docs/javadocs/com/google/gson/reflect/package-use.html
+++ b/gson/docs/javadocs/com/google/gson/reflect/package-use.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Package com.google.gson.reflect (Gson 2.3.1 API)
+  Uses of Package com.solidfire.gson.reflect (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Package com.google.gson.reflect (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Package com.solidfire.gson.reflect (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -82,13 +82,13 @@
 <HR>
 <CENTER>
 <H2>
-<B>Uses of Package<br>com.google.gson.reflect</B></H2>
+<B>Uses of Package<br>com.solidfire.gson.reflect</B></H2>
 </CENTER>
 
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-Packages that use <A HREF="../../../../com/google/gson/reflect/package-summary.html">com.google.gson.reflect</A></FONT></TH>
+Packages that use <A HREF="../../../../com/google/gson/reflect/package-summary.html">com.solidfire.gson.reflect</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD><A HREF="#com.google.gson"><B>com.google.gson</B></A></TD>
@@ -96,7 +96,7 @@ <H2>
  vice-versa.&nbsp;</TD>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><A HREF="#com.google.gson.reflect"><B>com.google.gson.reflect</B></A></TD>
+<TD><A HREF="#com.solidfire.gson.reflect"><B>com.solidfire.gson.reflect</B></A></TD>
 <TD>This package provides utility classes for finding type information for generic types.&nbsp;</TD>
 </TR>
 </TABLE>
@@ -106,7 +106,7 @@ <H2>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-Classes in <A HREF="../../../../com/google/gson/reflect/package-summary.html">com.google.gson.reflect</A> used by <A HREF="../../../../com/google/gson/package-summary.html">com.google.gson</A></FONT></TH>
+Classes in <A HREF="../../../../com/google/gson/reflect/package-summary.html">com.solidfire.gson.reflect</A> used by <A HREF="../../../../com/google/gson/package-summary.html">com.google.gson</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD><B><A HREF="../../../../com/google/gson/reflect/class-use/TypeToken.html#com.google.gson"><B>TypeToken</B></A></B>
@@ -117,14 +117,14 @@ <H2>
 </TABLE>
 &nbsp;
 <P>
-<A NAME="com.google.gson.reflect"><!-- --></A>
+<A NAME="com.solidfire.gson.reflect"><!-- --></A>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-Classes in <A HREF="../../../../com/google/gson/reflect/package-summary.html">com.google.gson.reflect</A> used by <A HREF="../../../../com/google/gson/reflect/package-summary.html">com.google.gson.reflect</A></FONT></TH>
+Classes in <A HREF="../../../../com/google/gson/reflect/package-summary.html">com.solidfire.gson.reflect</A> used by <A HREF="../../../../com/google/gson/reflect/package-summary.html">com.solidfire.gson.reflect</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><B><A HREF="../../../../com/google/gson/reflect/class-use/TypeToken.html#com.google.gson.reflect"><B>TypeToken</B></A></B>
+<TD><B><A HREF="../../../../com/google/gson/reflect/class-use/TypeToken.html#com.solidfire.gson.reflect"><B>TypeToken</B></A></B>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Represents a generic type <code>T</code>.</TD>
diff --git a/gson/docs/javadocs/com/google/gson/stream/JsonReader.html b/gson/docs/javadocs/com/google/gson/stream/JsonReader.html
index c505aab81..8943deceb 100644
--- a/gson/docs/javadocs/com/google/gson/stream/JsonReader.html
+++ b/gson/docs/javadocs/com/google/gson/stream/JsonReader.html
@@ -57,7 +57,7 @@
 <TR>
 <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
 &nbsp;PREV CLASS&nbsp;
-&nbsp;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream"><B>NEXT CLASS</B></A></FONT></TD>
+&nbsp;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream"><B>NEXT CLASS</B></A></FONT></TD>
 <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
   <A HREF="../../../../index.html?com/google/gson/stream/JsonReader.html" target="_top"><B>FRAMES</B></A>  &nbsp;
 &nbsp;<A HREF="JsonReader.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
@@ -89,12 +89,12 @@
 <!-- ======== START OF CLASS DATA ======== -->
 <H2>
 <FONT SIZE="-1">
-com.google.gson.stream</FONT>
+    com.solidfire.gson.stream</FONT>
 <BR>
 Class JsonReader</H2>
 <PRE>
 <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
-  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.stream.JsonReader</B>
+  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.stream.JsonReader</B>
 </PRE>
 <DL>
 <DT><B>All Implemented Interfaces:</B> <DD><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Closeable.html?is-external=true" title="class or interface in java.io">Closeable</A></DD>
@@ -426,7 +426,7 @@ <h3>Number Handling</h3>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/gson/stream/JsonReader.html#peek()">peek</A></B>()</CODE>
 
 <BR>
@@ -657,7 +657,7 @@ <h3>Number Handling</h3>
 <A NAME="peek()"><!-- --></A><H3>
 peek</H3>
 <PRE>
-public <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A> <B>peek</B>()
+public <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A> <B>peek</B>()
                throws <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
 <DL>
 <DD>Returns the type of the next token without consuming it.
@@ -936,7 +936,7 @@ <h3>Number Handling</h3>
 <TR>
 <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
 &nbsp;PREV CLASS&nbsp;
-&nbsp;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream"><B>NEXT CLASS</B></A></FONT></TD>
+&nbsp;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream"><B>NEXT CLASS</B></A></FONT></TD>
 <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
   <A HREF="../../../../index.html?com/google/gson/stream/JsonReader.html" target="_top"><B>FRAMES</B></A>  &nbsp;
 &nbsp;<A HREF="JsonReader.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
diff --git a/gson/docs/javadocs/com/google/gson/stream/JsonToken.html b/gson/docs/javadocs/com/google/gson/stream/JsonToken.html
index 64d937d5d..b24f4704e 100644
--- a/gson/docs/javadocs/com/google/gson/stream/JsonToken.html
+++ b/gson/docs/javadocs/com/google/gson/stream/JsonToken.html
@@ -56,8 +56,8 @@
 
 <TR>
 <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
-&nbsp;<A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream"><B>PREV CLASS</B></A>&nbsp;
-&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream"><B>NEXT CLASS</B></A></FONT></TD>
+&nbsp;<A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream"><B>PREV CLASS</B></A>&nbsp;
+&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream"><B>NEXT CLASS</B></A></FONT></TD>
 <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
   <A HREF="../../../../index.html?com/google/gson/stream/JsonToken.html" target="_top"><B>FRAMES</B></A>  &nbsp;
 &nbsp;<A HREF="JsonToken.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
@@ -89,20 +89,20 @@
 <!-- ======== START OF CLASS DATA ======== -->
 <H2>
 <FONT SIZE="-1">
-com.google.gson.stream</FONT>
+  com.solidfire.gson.stream</FONT>
 <BR>
 Enum JsonToken</H2>
 <PRE>
 <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
-  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Enum.html?is-external=true" title="class or interface in java.lang">java.lang.Enum</A>&lt;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A>&gt;
-      <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.stream.JsonToken</B>
+  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Enum.html?is-external=true" title="class or interface in java.lang">java.lang.Enum</A>&lt;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A>&gt;
+      <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.stream.JsonToken</B>
 </PRE>
 <DL>
-<DT><B>All Implemented Interfaces:</B> <DD><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>, <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Comparable.html?is-external=true" title="class or interface in java.lang">Comparable</A>&lt;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A>&gt;</DD>
+<DT><B>All Implemented Interfaces:</B> <DD><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>, <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Comparable.html?is-external=true" title="class or interface in java.lang">Comparable</A>&lt;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A>&gt;</DD>
 </DL>
 <HR>
 <DL>
-<DT><PRE>public enum <B>JsonToken</B><DT>extends <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Enum.html?is-external=true" title="class or interface in java.lang">Enum</A>&lt;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A>&gt;</DL>
+<DT><PRE>public enum <B>JsonToken</B><DT>extends <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Enum.html?is-external=true" title="class or interface in java.lang">Enum</A>&lt;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A>&gt;</DL>
 </PRE>
 
 <P>
@@ -199,7 +199,7 @@ <H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>static&nbsp;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A></CODE></FONT></TD>
+<CODE>static&nbsp;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/gson/stream/JsonToken.html#valueOf(java.lang.String)">valueOf</A></B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>
 
 <BR>
@@ -207,7 +207,7 @@ <H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>static&nbsp;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A>[]</CODE></FONT></TD>
+<CODE>static&nbsp;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A>[]</CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/gson/stream/JsonToken.html#values()">values</A></B>()</CODE>
 
 <BR>
@@ -249,7 +249,7 @@ <H2>
 <A NAME="BEGIN_ARRAY"><!-- --></A><H3>
 BEGIN_ARRAY</H3>
 <PRE>
-public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A> <B>BEGIN_ARRAY</B></PRE>
+public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A> <B>BEGIN_ARRAY</B></PRE>
 <DL>
 <DD>The opening of a JSON array. Written using <A HREF="../../../../com/google/gson/stream/JsonWriter.html#beginArray()"><CODE>JsonWriter.beginArray()</CODE></A>
  and read using <A HREF="../../../../com/google/gson/stream/JsonReader.html#beginArray()"><CODE>JsonReader.beginArray()</CODE></A>.
@@ -262,7 +262,7 @@ <H2>
 <A NAME="END_ARRAY"><!-- --></A><H3>
 END_ARRAY</H3>
 <PRE>
-public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A> <B>END_ARRAY</B></PRE>
+public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A> <B>END_ARRAY</B></PRE>
 <DL>
 <DD>The closing of a JSON array. Written using <A HREF="../../../../com/google/gson/stream/JsonWriter.html#endArray()"><CODE>JsonWriter.endArray()</CODE></A>
  and read using <A HREF="../../../../com/google/gson/stream/JsonReader.html#endArray()"><CODE>JsonReader.endArray()</CODE></A>.
@@ -275,7 +275,7 @@ <H2>
 <A NAME="BEGIN_OBJECT"><!-- --></A><H3>
 BEGIN_OBJECT</H3>
 <PRE>
-public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A> <B>BEGIN_OBJECT</B></PRE>
+public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A> <B>BEGIN_OBJECT</B></PRE>
 <DL>
 <DD>The opening of a JSON object. Written using <A HREF="../../../../com/google/gson/stream/JsonWriter.html#beginObject()"><CODE>JsonWriter.beginObject()</CODE></A>
  and read using <A HREF="../../../../com/google/gson/stream/JsonReader.html#beginObject()"><CODE>JsonReader.beginObject()</CODE></A>.
@@ -288,7 +288,7 @@ <H2>
 <A NAME="END_OBJECT"><!-- --></A><H3>
 END_OBJECT</H3>
 <PRE>
-public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A> <B>END_OBJECT</B></PRE>
+public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A> <B>END_OBJECT</B></PRE>
 <DL>
 <DD>The closing of a JSON object. Written using <A HREF="../../../../com/google/gson/stream/JsonWriter.html#endObject()"><CODE>JsonWriter.endObject()</CODE></A>
  and read using <A HREF="../../../../com/google/gson/stream/JsonReader.html#endObject()"><CODE>JsonReader.endObject()</CODE></A>.
@@ -301,7 +301,7 @@ <H2>
 <A NAME="NAME"><!-- --></A><H3>
 NAME</H3>
 <PRE>
-public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A> <B>NAME</B></PRE>
+public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A> <B>NAME</B></PRE>
 <DL>
 <DD>A JSON property name. Within objects, tokens alternate between names and
  their values. Written using <A HREF="../../../../com/google/gson/stream/JsonWriter.html#name(java.lang.String)"><CODE>JsonWriter.name(java.lang.String)</CODE></A> and read using <A HREF="../../../../com/google/gson/stream/JsonReader.html#nextName()"><CODE>JsonReader.nextName()</CODE></A>
@@ -314,7 +314,7 @@ <H2>
 <A NAME="STRING"><!-- --></A><H3>
 STRING</H3>
 <PRE>
-public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A> <B>STRING</B></PRE>
+public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A> <B>STRING</B></PRE>
 <DL>
 <DD>A JSON string.
 <P>
@@ -326,7 +326,7 @@ <H2>
 <A NAME="NUMBER"><!-- --></A><H3>
 NUMBER</H3>
 <PRE>
-public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A> <B>NUMBER</B></PRE>
+public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A> <B>NUMBER</B></PRE>
 <DL>
 <DD>A JSON number represented in this API by a Java <code>double</code>, <code>long</code>, or <code>int</code>.
 <P>
@@ -338,7 +338,7 @@ <H2>
 <A NAME="BOOLEAN"><!-- --></A><H3>
 BOOLEAN</H3>
 <PRE>
-public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A> <B>BOOLEAN</B></PRE>
+public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A> <B>BOOLEAN</B></PRE>
 <DL>
 <DD>A JSON <code>true</code> or <code>false</code>.
 <P>
@@ -350,7 +350,7 @@ <H2>
 <A NAME="NULL"><!-- --></A><H3>
 NULL</H3>
 <PRE>
-public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A> <B>NULL</B></PRE>
+public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A> <B>NULL</B></PRE>
 <DL>
 <DD>A JSON <code>null</code>.
 <P>
@@ -362,7 +362,7 @@ <H2>
 <A NAME="END_DOCUMENT"><!-- --></A><H3>
 END_DOCUMENT</H3>
 <PRE>
-public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A> <B>END_DOCUMENT</B></PRE>
+public static final <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A> <B>END_DOCUMENT</B></PRE>
 <DL>
 <DD>The end of the JSON stream. This sentinel value is returned by <A HREF="../../../../com/google/gson/stream/JsonReader.html#peek()"><CODE>JsonReader.peek()</CODE></A> to signal that the JSON-encoded value has no more
  tokens.
@@ -384,7 +384,7 @@ <H2>
 <A NAME="values()"><!-- --></A><H3>
 values</H3>
 <PRE>
-public static <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A>[] <B>values</B>()</PRE>
+public static <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A>[] <B>values</B>()</PRE>
 <DL>
 <DD>Returns an array containing the constants of this enum type, in
 the order they are declared.  This method may be used to iterate
@@ -405,7 +405,7 @@ <H2>
 <A NAME="valueOf(java.lang.String)"><!-- --></A><H3>
 valueOf</H3>
 <PRE>
-public static <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A> <B>valueOf</B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</PRE>
+public static <A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A> <B>valueOf</B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</PRE>
 <DL>
 <DD>Returns the enum constant of this type with the specified name.
 The string must match <I>exactly</I> an identifier used to declare an
@@ -452,8 +452,8 @@ <H2>
 
 <TR>
 <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
-&nbsp;<A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream"><B>PREV CLASS</B></A>&nbsp;
-&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream"><B>NEXT CLASS</B></A></FONT></TD>
+&nbsp;<A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream"><B>PREV CLASS</B></A>&nbsp;
+&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream"><B>NEXT CLASS</B></A></FONT></TD>
 <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
   <A HREF="../../../../index.html?com/google/gson/stream/JsonToken.html" target="_top"><B>FRAMES</B></A>  &nbsp;
 &nbsp;<A HREF="JsonToken.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
diff --git a/gson/docs/javadocs/com/google/gson/stream/JsonWriter.html b/gson/docs/javadocs/com/google/gson/stream/JsonWriter.html
index 11578fd5f..15f2d438b 100644
--- a/gson/docs/javadocs/com/google/gson/stream/JsonWriter.html
+++ b/gson/docs/javadocs/com/google/gson/stream/JsonWriter.html
@@ -56,8 +56,8 @@
 
 <TR>
 <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
-&nbsp;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream"><B>PREV CLASS</B></A>&nbsp;
-&nbsp;<A HREF="../../../../com/google/gson/stream/MalformedJsonException.html" title="class in com.google.gson.stream"><B>NEXT CLASS</B></A></FONT></TD>
+&nbsp;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream"><B>PREV CLASS</B></A>&nbsp;
+&nbsp;<A HREF="../../../../com/google/gson/stream/MalformedJsonException.html" title="class in com.solidfire.gson.stream"><B>NEXT CLASS</B></A></FONT></TD>
 <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
   <A HREF="../../../../index.html?com/google/gson/stream/JsonWriter.html" target="_top"><B>FRAMES</B></A>  &nbsp;
 &nbsp;<A HREF="JsonWriter.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
@@ -89,12 +89,12 @@
 <!-- ======== START OF CLASS DATA ======== -->
 <H2>
 <FONT SIZE="-1">
-com.google.gson.stream</FONT>
+    com.solidfire.gson.stream</FONT>
 <BR>
 Class JsonWriter</H2>
 <PRE>
 <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
-  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.stream.JsonWriter</B>
+  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.stream.JsonWriter</B>
 </PRE>
 <DL>
 <DT><B>All Implemented Interfaces:</B> <DD><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Closeable.html?is-external=true" title="class or interface in java.io">Closeable</A>, <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Flushable.html?is-external=true" title="class or interface in java.io">Flushable</A></DD>
@@ -235,7 +235,7 @@ <h3>Example</h3>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/gson/stream/JsonWriter.html#beginArray()">beginArray</A></B>()</CODE>
 
 <BR>
@@ -243,7 +243,7 @@ <h3>Example</h3>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/gson/stream/JsonWriter.html#beginObject()">beginObject</A></B>()</CODE>
 
 <BR>
@@ -259,7 +259,7 @@ <h3>Example</h3>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/gson/stream/JsonWriter.html#endArray()">endArray</A></B>()</CODE>
 
 <BR>
@@ -267,7 +267,7 @@ <h3>Example</h3>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/gson/stream/JsonWriter.html#endObject()">endObject</A></B>()</CODE>
 
 <BR>
@@ -309,7 +309,7 @@ <h3>Example</h3>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/gson/stream/JsonWriter.html#name(java.lang.String)">name</A></B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>
 
 <BR>
@@ -317,7 +317,7 @@ <h3>Example</h3>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/gson/stream/JsonWriter.html#nullValue()">nullValue</A></B>()</CODE>
 
 <BR>
@@ -359,7 +359,7 @@ <h3>Example</h3>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/gson/stream/JsonWriter.html#value(boolean)">value</A></B>(boolean&nbsp;value)</CODE>
 
 <BR>
@@ -367,7 +367,7 @@ <h3>Example</h3>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/gson/stream/JsonWriter.html#value(double)">value</A></B>(double&nbsp;value)</CODE>
 
 <BR>
@@ -375,7 +375,7 @@ <h3>Example</h3>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/gson/stream/JsonWriter.html#value(long)">value</A></B>(long&nbsp;value)</CODE>
 
 <BR>
@@ -383,7 +383,7 @@ <h3>Example</h3>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/gson/stream/JsonWriter.html#value(java.lang.Number)">value</A></B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Number.html?is-external=true" title="class or interface in java.lang">Number</A>&nbsp;value)</CODE>
 
 <BR>
@@ -391,7 +391,7 @@ <h3>Example</h3>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/gson/stream/JsonWriter.html#value(java.lang.String)">value</A></B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;value)</CODE>
 
 <BR>
@@ -574,7 +574,7 @@ <h3>Example</h3>
 <A NAME="beginArray()"><!-- --></A><H3>
 beginArray</H3>
 <PRE>
-public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A> <B>beginArray</B>()
+public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A> <B>beginArray</B>()
                       throws <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
 <DL>
 <DD>Begins encoding a new array. Each call to this method must be paired with
@@ -595,7 +595,7 @@ <h3>Example</h3>
 <A NAME="endArray()"><!-- --></A><H3>
 endArray</H3>
 <PRE>
-public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A> <B>endArray</B>()
+public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A> <B>endArray</B>()
                     throws <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
 <DL>
 <DD>Ends encoding the current array.
@@ -615,7 +615,7 @@ <h3>Example</h3>
 <A NAME="beginObject()"><!-- --></A><H3>
 beginObject</H3>
 <PRE>
-public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A> <B>beginObject</B>()
+public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A> <B>beginObject</B>()
                        throws <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
 <DL>
 <DD>Begins encoding a new object. Each call to this method must be paired
@@ -636,7 +636,7 @@ <h3>Example</h3>
 <A NAME="endObject()"><!-- --></A><H3>
 endObject</H3>
 <PRE>
-public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A> <B>endObject</B>()
+public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A> <B>endObject</B>()
                      throws <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
 <DL>
 <DD>Ends encoding the current object.
@@ -656,7 +656,7 @@ <h3>Example</h3>
 <A NAME="name(java.lang.String)"><!-- --></A><H3>
 name</H3>
 <PRE>
-public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A> <B>name</B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
+public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A> <B>name</B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)
                 throws <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
 <DL>
 <DD>Encodes the property name.
@@ -676,7 +676,7 @@ <h3>Example</h3>
 <A NAME="value(java.lang.String)"><!-- --></A><H3>
 value</H3>
 <PRE>
-public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A> <B>value</B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;value)
+public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A> <B>value</B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;value)
                  throws <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
 <DL>
 <DD>Encodes <code>value</code>.
@@ -696,7 +696,7 @@ <h3>Example</h3>
 <A NAME="nullValue()"><!-- --></A><H3>
 nullValue</H3>
 <PRE>
-public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A> <B>nullValue</B>()
+public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A> <B>nullValue</B>()
                      throws <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
 <DL>
 <DD>Encodes <code>null</code>.
@@ -716,7 +716,7 @@ <h3>Example</h3>
 <A NAME="value(boolean)"><!-- --></A><H3>
 value</H3>
 <PRE>
-public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A> <B>value</B>(boolean&nbsp;value)
+public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A> <B>value</B>(boolean&nbsp;value)
                  throws <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
 <DL>
 <DD>Encodes <code>value</code>.
@@ -736,7 +736,7 @@ <h3>Example</h3>
 <A NAME="value(double)"><!-- --></A><H3>
 value</H3>
 <PRE>
-public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A> <B>value</B>(double&nbsp;value)
+public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A> <B>value</B>(double&nbsp;value)
                  throws <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
 <DL>
 <DD>Encodes <code>value</code>.
@@ -757,7 +757,7 @@ <h3>Example</h3>
 <A NAME="value(long)"><!-- --></A><H3>
 value</H3>
 <PRE>
-public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A> <B>value</B>(long&nbsp;value)
+public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A> <B>value</B>(long&nbsp;value)
                  throws <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
 <DL>
 <DD>Encodes <code>value</code>.
@@ -777,7 +777,7 @@ <h3>Example</h3>
 <A NAME="value(java.lang.Number)"><!-- --></A><H3>
 value</H3>
 <PRE>
-public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A> <B>value</B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Number.html?is-external=true" title="class or interface in java.lang">Number</A>&nbsp;value)
+public <A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A> <B>value</B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Number.html?is-external=true" title="class or interface in java.lang">Number</A>&nbsp;value)
                  throws <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A></PRE>
 <DL>
 <DD>Encodes <code>value</code>.
@@ -863,8 +863,8 @@ <h3>Example</h3>
 
 <TR>
 <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
-&nbsp;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream"><B>PREV CLASS</B></A>&nbsp;
-&nbsp;<A HREF="../../../../com/google/gson/stream/MalformedJsonException.html" title="class in com.google.gson.stream"><B>NEXT CLASS</B></A></FONT></TD>
+&nbsp;<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream"><B>PREV CLASS</B></A>&nbsp;
+&nbsp;<A HREF="../../../../com/google/gson/stream/MalformedJsonException.html" title="class in com.solidfire.gson.stream"><B>NEXT CLASS</B></A></FONT></TD>
 <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
   <A HREF="../../../../index.html?com/google/gson/stream/JsonWriter.html" target="_top"><B>FRAMES</B></A>  &nbsp;
 &nbsp;<A HREF="JsonWriter.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
diff --git a/gson/docs/javadocs/com/google/gson/stream/MalformedJsonException.html b/gson/docs/javadocs/com/google/gson/stream/MalformedJsonException.html
index c74d11a93..3df99a3f7 100644
--- a/gson/docs/javadocs/com/google/gson/stream/MalformedJsonException.html
+++ b/gson/docs/javadocs/com/google/gson/stream/MalformedJsonException.html
@@ -56,7 +56,7 @@
 
 <TR>
 <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
-&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream"><B>PREV CLASS</B></A>&nbsp;
+&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream"><B>PREV CLASS</B></A>&nbsp;
 &nbsp;NEXT CLASS</FONT></TD>
 <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
   <A HREF="../../../../index.html?com/google/gson/stream/MalformedJsonException.html" target="_top"><B>FRAMES</B></A>  &nbsp;
@@ -89,7 +89,7 @@
 <!-- ======== START OF CLASS DATA ======== -->
 <H2>
 <FONT SIZE="-1">
-com.google.gson.stream</FONT>
+  com.solidfire.gson.stream</FONT>
 <BR>
 Class MalformedJsonException</H2>
 <PRE>
@@ -97,7 +97,7 @@ <H2>
   <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Throwable.html?is-external=true" title="class or interface in java.lang">java.lang.Throwable</A>
       <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Exception.html?is-external=true" title="class or interface in java.lang">java.lang.Exception</A>
           <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">java.io.IOException</A>
-              <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.google.gson.stream.MalformedJsonException</B>
+              <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.solidfire.gson.stream.MalformedJsonException</B>
 </PRE>
 <DL>
 <DT><B>All Implemented Interfaces:</B> <DD><A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A></DD>
@@ -114,7 +114,7 @@ <H2>
 
 <P>
 <DL>
-<DT><B>See Also:</B><DD><A HREF="../../../../serialized-form.html#com.google.gson.stream.MalformedJsonException">Serialized Form</A></DL>
+<DT><B>See Also:</B><DD><A HREF="../../../../serialized-form.html#com.solidfire.gson.stream.MalformedJsonException">Serialized Form</A></DL>
 <HR>
 
 <P>
@@ -242,7 +242,7 @@ <H2>
 
 <TR>
 <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
-&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream"><B>PREV CLASS</B></A>&nbsp;
+&nbsp;<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream"><B>PREV CLASS</B></A>&nbsp;
 &nbsp;NEXT CLASS</FONT></TD>
 <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
   <A HREF="../../../../index.html?com/google/gson/stream/MalformedJsonException.html" target="_top"><B>FRAMES</B></A>  &nbsp;
diff --git a/gson/docs/javadocs/com/google/gson/stream/class-use/JsonReader.html b/gson/docs/javadocs/com/google/gson/stream/class-use/JsonReader.html
index fc40d6fa8..5e4e04bf8 100644
--- a/gson/docs/javadocs/com/google/gson/stream/class-use/JsonReader.html
+++ b/gson/docs/javadocs/com/google/gson/stream/class-use/JsonReader.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.stream.JsonReader (Gson 2.3.1 API)
+    Uses of Class com.solidfire.gson.stream.JsonReader (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
+    function windowTitle()
+    {
     if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.stream.JsonReader (Gson 2.3.1 API)";
+    parent.document.title="Uses of Class com.solidfire.gson.stream.JsonReader (Gson 2.3.1 API)";
+    }
     }
-}
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -40,7 +40,7 @@
   <TR ALIGN="center" VALIGN="top">
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
-  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
+  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Use</B></FONT>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
@@ -82,13 +82,13 @@
 <HR>
 <CENTER>
 <H2>
-<B>Uses of Class<br>com.google.gson.stream.JsonReader</B></H2>
+<B>Uses of Class<br>com.solidfire.gson.stream.JsonReader</B></H2>
 </CENTER>
 
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-Packages that use <A HREF="../../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A></FONT></TH>
+Packages that use <A HREF="../../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD><A HREF="#com.google.gson"><B>com.google.gson</B></A></TD>
@@ -102,7 +102,7 @@ <H2>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-Uses of <A HREF="../../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A> in <A HREF="../../../../../com/google/gson/package-summary.html">com.google.gson</A></FONT></TH>
+Uses of <A HREF="../../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A> in <A HREF="../../../../../com/google/gson/package-summary.html">com.google.gson</A></FONT></TH>
 </TR>
 </TABLE>
 &nbsp;
@@ -110,7 +110,7 @@ <H2>
 
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableSubHeadingColor">
-<TH ALIGN="left" COLSPAN="2">Methods in <A HREF="../../../../../com/google/gson/package-summary.html">com.google.gson</A> with parameters of type <A HREF="../../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A></FONT></TH>
+<TH ALIGN="left" COLSPAN="2">Methods in <A HREF="../../../../../com/google/gson/package-summary.html">com.google.gson</A> with parameters of type <A HREF="../../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
@@ -122,7 +122,7 @@ <H2>
 </TR>
 </TABLE>
 </CODE></FONT></TD>
-<TD><CODE><B>Gson.</B><B><A HREF="../../../../../com/google/gson/Gson.html#fromJson(com.google.gson.stream.JsonReader, java.lang.reflect.Type)">fromJson</A></B>(<A HREF="../../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>&nbsp;reader,
+<TD><CODE><B>Gson.</B><B><A HREF="../../../../../com/google/gson/Gson.html#fromJson(com.solidfire.gson.stream.JsonReader, java.lang.reflect.Type)">fromJson</A></B>(<A HREF="../../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>&nbsp;reader,
          <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/reflect/Type.html?is-external=true" title="class or interface in java.lang.reflect">Type</A>&nbsp;typeOfT)</CODE>
 
 <BR>
@@ -132,7 +132,7 @@ <H2>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;<A HREF="../../../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A></CODE></FONT></TD>
-<TD><CODE><B>JsonParser.</B><B><A HREF="../../../../../com/google/gson/JsonParser.html#parse(com.google.gson.stream.JsonReader)">parse</A></B>(<A HREF="../../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>&nbsp;json)</CODE>
+<TD><CODE><B>JsonParser.</B><B><A HREF="../../../../../com/google/gson/JsonParser.html#parse(com.solidfire.gson.stream.JsonReader)">parse</A></B>(<A HREF="../../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>&nbsp;json)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the next value from the JSON stream as a parse tree.</TD>
@@ -140,7 +140,7 @@ <H2>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>abstract &nbsp;<A HREF="../../../../../com/google/gson/TypeAdapter.html" title="type parameter in TypeAdapter">T</A></CODE></FONT></TD>
-<TD><CODE><B>TypeAdapter.</B><B><A HREF="../../../../../com/google/gson/TypeAdapter.html#read(com.google.gson.stream.JsonReader)">read</A></B>(<A HREF="../../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>&nbsp;in)</CODE>
+<TD><CODE><B>TypeAdapter.</B><B><A HREF="../../../../../com/google/gson/TypeAdapter.html#read(com.solidfire.gson.stream.JsonReader)">read</A></B>(<A HREF="../../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>&nbsp;in)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reads one JSON value (an array, object, string, number, boolean or null)
@@ -163,7 +163,7 @@ <H2>
   <TR ALIGN="center" VALIGN="top">
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
-  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
+  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Use</B></FONT>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
diff --git a/gson/docs/javadocs/com/google/gson/stream/class-use/JsonToken.html b/gson/docs/javadocs/com/google/gson/stream/class-use/JsonToken.html
index a28390f1e..28984c411 100644
--- a/gson/docs/javadocs/com/google/gson/stream/class-use/JsonToken.html
+++ b/gson/docs/javadocs/com/google/gson/stream/class-use/JsonToken.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.stream.JsonToken (Gson 2.3.1 API)
+  Uses of Class com.solidfire.gson.stream.JsonToken (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.stream.JsonToken (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Class com.solidfire.gson.stream.JsonToken (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -40,7 +40,7 @@
   <TR ALIGN="center" VALIGN="top">
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
-  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
+  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Use</B></FONT>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
@@ -82,26 +82,26 @@
 <HR>
 <CENTER>
 <H2>
-<B>Uses of Class<br>com.google.gson.stream.JsonToken</B></H2>
+<B>Uses of Class<br>com.solidfire.gson.stream.JsonToken</B></H2>
 </CENTER>
 
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-Packages that use <A HREF="../../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A></FONT></TH>
+Packages that use <A HREF="../../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><A HREF="#com.google.gson.stream"><B>com.google.gson.stream</B></A></TD>
+<TD><A HREF="#com.solidfire.gson.stream"><B>com.solidfire.gson.stream</B></A></TD>
 <TD>&nbsp;&nbsp;</TD>
 </TR>
 </TABLE>
 &nbsp;
 <P>
-<A NAME="com.google.gson.stream"><!-- --></A>
+<A NAME="com.solidfire.gson.stream"><!-- --></A>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-Uses of <A HREF="../../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A> in <A HREF="../../../../../com/google/gson/stream/package-summary.html">com.google.gson.stream</A></FONT></TH>
+Uses of <A HREF="../../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A> in <A HREF="../../../../../com/google/gson/stream/package-summary.html">com.solidfire.gson.stream</A></FONT></TH>
 </TR>
 </TABLE>
 &nbsp;
@@ -109,11 +109,11 @@ <H2>
 
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableSubHeadingColor">
-<TH ALIGN="left" COLSPAN="2">Methods in <A HREF="../../../../../com/google/gson/stream/package-summary.html">com.google.gson.stream</A> that return <A HREF="../../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A></FONT></TH>
+<TH ALIGN="left" COLSPAN="2">Methods in <A HREF="../../../../../com/google/gson/stream/package-summary.html">com.solidfire.gson.stream</A> that return <A HREF="../../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A></CODE></FONT></TD>
 <TD><CODE><B>JsonReader.</B><B><A HREF="../../../../../com/google/gson/stream/JsonReader.html#peek()">peek</A></B>()</CODE>
 
 <BR>
@@ -121,7 +121,7 @@ <H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>static&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A></CODE></FONT></TD>
+<CODE>static&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A></CODE></FONT></TD>
 <TD><CODE><B>JsonToken.</B><B><A HREF="../../../../../com/google/gson/stream/JsonToken.html#valueOf(java.lang.String)">valueOf</A></B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>
 
 <BR>
@@ -129,7 +129,7 @@ <H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>static&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A>[]</CODE></FONT></TD>
+<CODE>static&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A>[]</CODE></FONT></TD>
 <TD><CODE><B>JsonToken.</B><B><A HREF="../../../../../com/google/gson/stream/JsonToken.html#values()">values</A></B>()</CODE>
 
 <BR>
@@ -153,7 +153,7 @@ <H2>
   <TR ALIGN="center" VALIGN="top">
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
-  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
+  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Use</B></FONT>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
diff --git a/gson/docs/javadocs/com/google/gson/stream/class-use/JsonWriter.html b/gson/docs/javadocs/com/google/gson/stream/class-use/JsonWriter.html
index 08a76be23..4284612b4 100644
--- a/gson/docs/javadocs/com/google/gson/stream/class-use/JsonWriter.html
+++ b/gson/docs/javadocs/com/google/gson/stream/class-use/JsonWriter.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.stream.JsonWriter (Gson 2.3.1 API)
+    Uses of Class com.solidfire.gson.stream.JsonWriter (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
+    function windowTitle()
+    {
     if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.stream.JsonWriter (Gson 2.3.1 API)";
+    parent.document.title="Uses of Class com.solidfire.gson.stream.JsonWriter (Gson 2.3.1 API)";
+    }
     }
-}
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -40,7 +40,7 @@
   <TR ALIGN="center" VALIGN="top">
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
-  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
+  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Use</B></FONT>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
@@ -82,13 +82,13 @@
 <HR>
 <CENTER>
 <H2>
-<B>Uses of Class<br>com.google.gson.stream.JsonWriter</B></H2>
+<B>Uses of Class<br>com.solidfire.gson.stream.JsonWriter</B></H2>
 </CENTER>
 
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-Packages that use <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></FONT></TH>
+Packages that use <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD><A HREF="#com.google.gson"><B>com.google.gson</B></A></TD>
@@ -96,7 +96,7 @@ <H2>
  vice-versa.&nbsp;</TD>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><A HREF="#com.google.gson.stream"><B>com.google.gson.stream</B></A></TD>
+<TD><A HREF="#com.solidfire.gson.stream"><B>com.solidfire.gson.stream</B></A></TD>
 <TD>&nbsp;&nbsp;</TD>
 </TR>
 </TABLE>
@@ -106,7 +106,7 @@ <H2>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-Uses of <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A> in <A HREF="../../../../../com/google/gson/package-summary.html">com.google.gson</A></FONT></TH>
+Uses of <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A> in <A HREF="../../../../../com/google/gson/package-summary.html">com.google.gson</A></FONT></TH>
 </TR>
 </TABLE>
 &nbsp;
@@ -114,13 +114,13 @@ <H2>
 
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableSubHeadingColor">
-<TH ALIGN="left" COLSPAN="2">Methods in <A HREF="../../../../../com/google/gson/package-summary.html">com.google.gson</A> with parameters of type <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></FONT></TH>
+<TH ALIGN="left" COLSPAN="2">Methods in <A HREF="../../../../../com/google/gson/package-summary.html">com.google.gson</A> with parameters of type <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;void</CODE></FONT></TD>
-<TD><CODE><B>Gson.</B><B><A HREF="../../../../../com/google/gson/Gson.html#toJson(com.google.gson.JsonElement, com.google.gson.stream.JsonWriter)">toJson</A></B>(<A HREF="../../../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>&nbsp;jsonElement,
-       <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>&nbsp;writer)</CODE>
+<TD><CODE><B>Gson.</B><B><A HREF="../../../../../com/google/gson/Gson.html#toJson(com.google.gson.JsonElement, com.solidfire.gson.stream.JsonWriter)">toJson</A></B>(<A HREF="../../../../../com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>&nbsp;jsonElement,
+       <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>&nbsp;writer)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Writes the JSON for <code>jsonElement</code> to <code>writer</code>.</TD>
@@ -128,9 +128,9 @@ <H2>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;void</CODE></FONT></TD>
-<TD><CODE><B>Gson.</B><B><A HREF="../../../../../com/google/gson/Gson.html#toJson(java.lang.Object, java.lang.reflect.Type, com.google.gson.stream.JsonWriter)">toJson</A></B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;src,
+<TD><CODE><B>Gson.</B><B><A HREF="../../../../../com/google/gson/Gson.html#toJson(java.lang.Object, java.lang.reflect.Type, com.solidfire.gson.stream.JsonWriter)">toJson</A></B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A>&nbsp;src,
        <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/reflect/Type.html?is-external=true" title="class or interface in java.lang.reflect">Type</A>&nbsp;typeOfSrc,
-       <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>&nbsp;writer)</CODE>
+       <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>&nbsp;writer)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Writes the JSON representation of <code>src</code> of type <code>typeOfSrc</code> to
@@ -139,7 +139,7 @@ <H2>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>abstract &nbsp;void</CODE></FONT></TD>
-<TD><CODE><B>TypeAdapter.</B><B><A HREF="../../../../../com/google/gson/TypeAdapter.html#write(com.google.gson.stream.JsonWriter, T)">write</A></B>(<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>&nbsp;out,
+<TD><CODE><B>TypeAdapter.</B><B><A HREF="../../../../../com/google/gson/TypeAdapter.html#write(com.solidfire.gson.stream.JsonWriter, T)">write</A></B>(<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>&nbsp;out,
       <A HREF="../../../../../com/google/gson/TypeAdapter.html" title="type parameter in TypeAdapter">T</A>&nbsp;value)</CODE>
 
 <BR>
@@ -149,11 +149,11 @@ <H2>
 </TABLE>
 &nbsp;
 <P>
-<A NAME="com.google.gson.stream"><!-- --></A>
+<A NAME="com.solidfire.gson.stream"><!-- --></A>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-Uses of <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A> in <A HREF="../../../../../com/google/gson/stream/package-summary.html">com.google.gson.stream</A></FONT></TH>
+Uses of <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A> in <A HREF="../../../../../com/google/gson/stream/package-summary.html">com.solidfire.gson.stream</A></FONT></TH>
 </TR>
 </TABLE>
 &nbsp;
@@ -161,11 +161,11 @@ <H2>
 
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableSubHeadingColor">
-<TH ALIGN="left" COLSPAN="2">Methods in <A HREF="../../../../../com/google/gson/stream/package-summary.html">com.google.gson.stream</A> that return <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></FONT></TH>
+<TH ALIGN="left" COLSPAN="2">Methods in <A HREF="../../../../../com/google/gson/stream/package-summary.html">com.solidfire.gson.stream</A> that return <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B>JsonWriter.</B><B><A HREF="../../../../../com/google/gson/stream/JsonWriter.html#beginArray()">beginArray</A></B>()</CODE>
 
 <BR>
@@ -173,7 +173,7 @@ <H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B>JsonWriter.</B><B><A HREF="../../../../../com/google/gson/stream/JsonWriter.html#beginObject()">beginObject</A></B>()</CODE>
 
 <BR>
@@ -181,7 +181,7 @@ <H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B>JsonWriter.</B><B><A HREF="../../../../../com/google/gson/stream/JsonWriter.html#endArray()">endArray</A></B>()</CODE>
 
 <BR>
@@ -189,7 +189,7 @@ <H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B>JsonWriter.</B><B><A HREF="../../../../../com/google/gson/stream/JsonWriter.html#endObject()">endObject</A></B>()</CODE>
 
 <BR>
@@ -197,7 +197,7 @@ <H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B>JsonWriter.</B><B><A HREF="../../../../../com/google/gson/stream/JsonWriter.html#name(java.lang.String)">name</A></B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>
 
 <BR>
@@ -205,7 +205,7 @@ <H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B>JsonWriter.</B><B><A HREF="../../../../../com/google/gson/stream/JsonWriter.html#nullValue()">nullValue</A></B>()</CODE>
 
 <BR>
@@ -213,7 +213,7 @@ <H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B>JsonWriter.</B><B><A HREF="../../../../../com/google/gson/stream/JsonWriter.html#value(boolean)">value</A></B>(boolean&nbsp;value)</CODE>
 
 <BR>
@@ -221,7 +221,7 @@ <H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B>JsonWriter.</B><B><A HREF="../../../../../com/google/gson/stream/JsonWriter.html#value(double)">value</A></B>(double&nbsp;value)</CODE>
 
 <BR>
@@ -229,7 +229,7 @@ <H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B>JsonWriter.</B><B><A HREF="../../../../../com/google/gson/stream/JsonWriter.html#value(long)">value</A></B>(long&nbsp;value)</CODE>
 
 <BR>
@@ -237,7 +237,7 @@ <H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B>JsonWriter.</B><B><A HREF="../../../../../com/google/gson/stream/JsonWriter.html#value(java.lang.Number)">value</A></B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Number.html?is-external=true" title="class or interface in java.lang">Number</A>&nbsp;value)</CODE>
 
 <BR>
@@ -245,7 +245,7 @@ <H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></CODE></FONT></TD>
+<CODE>&nbsp;<A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></CODE></FONT></TD>
 <TD><CODE><B>JsonWriter.</B><B><A HREF="../../../../../com/google/gson/stream/JsonWriter.html#value(java.lang.String)">value</A></B>(<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;value)</CODE>
 
 <BR>
@@ -268,7 +268,7 @@ <H2>
   <TR ALIGN="center" VALIGN="top">
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
-  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
+  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Use</B></FONT>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
diff --git a/gson/docs/javadocs/com/google/gson/stream/class-use/MalformedJsonException.html b/gson/docs/javadocs/com/google/gson/stream/class-use/MalformedJsonException.html
index ddffe2894..0ca955d59 100644
--- a/gson/docs/javadocs/com/google/gson/stream/class-use/MalformedJsonException.html
+++ b/gson/docs/javadocs/com/google/gson/stream/class-use/MalformedJsonException.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Class com.google.gson.stream.MalformedJsonException (Gson 2.3.1 API)
+  Uses of Class com.solidfire.gson.stream.MalformedJsonException (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Class com.google.gson.stream.MalformedJsonException (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="Uses of Class com.solidfire.gson.stream.MalformedJsonException (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -40,7 +40,7 @@
   <TR ALIGN="center" VALIGN="top">
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
-  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/stream/MalformedJsonException.html" title="class in com.google.gson.stream"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
+  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/stream/MalformedJsonException.html" title="class in com.solidfire.gson.stream"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Use</B></FONT>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
@@ -82,9 +82,9 @@
 <HR>
 <CENTER>
 <H2>
-<B>Uses of Class<br>com.google.gson.stream.MalformedJsonException</B></H2>
+<B>Uses of Class<br>com.solidfire.gson.stream.MalformedJsonException</B></H2>
 </CENTER>
-No usage of com.google.gson.stream.MalformedJsonException
+No usage of com.solidfire.gson.stream.MalformedJsonException
 <P>
 <HR>
 
@@ -100,7 +100,7 @@ <H2>
   <TR ALIGN="center" VALIGN="top">
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
-  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/stream/MalformedJsonException.html" title="class in com.google.gson.stream"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
+  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../com/google/gson/stream/MalformedJsonException.html" title="class in com.solidfire.gson.stream"><FONT CLASS="NavBarFont1"><B>Class</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Use</B></FONT>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
diff --git a/gson/docs/javadocs/com/google/gson/stream/package-frame.html b/gson/docs/javadocs/com/google/gson/stream/package-frame.html
index 722729202..aa1314d04 100644
--- a/gson/docs/javadocs/com/google/gson/stream/package-frame.html
+++ b/gson/docs/javadocs/com/google/gson/stream/package-frame.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-com.google.gson.stream (Gson 2.3.1 API)
+    com.solidfire.gson.stream (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -17,16 +17,16 @@
 
 <BODY BGCOLOR="white">
 <FONT size="+1" CLASS="FrameTitleFont">
-<A HREF="../../../../com/google/gson/stream/package-summary.html" target="classFrame">com.google.gson.stream</A></FONT>
+<A HREF="../../../../com/google/gson/stream/package-summary.html" target="classFrame">com.solidfire.gson.stream</A></FONT>
 <TABLE BORDER="0" WIDTH="100%" SUMMARY="">
 <TR>
 <TD NOWRAP><FONT size="+1" CLASS="FrameHeadingFont">
 Classes</FONT>&nbsp;
 <FONT CLASS="FrameItemFont">
 <BR>
-<A HREF="JsonReader.html" title="class in com.google.gson.stream" target="classFrame">JsonReader</A>
+<A HREF="JsonReader.html" title="class in com.solidfire.gson.stream" target="classFrame">JsonReader</A>
 <BR>
-<A HREF="JsonWriter.html" title="class in com.google.gson.stream" target="classFrame">JsonWriter</A></FONT></TD>
+<A HREF="JsonWriter.html" title="class in com.solidfire.gson.stream" target="classFrame">JsonWriter</A></FONT></TD>
 </TR>
 </TABLE>
 
@@ -37,7 +37,7 @@
 Enums</FONT>&nbsp;
 <FONT CLASS="FrameItemFont">
 <BR>
-<A HREF="JsonToken.html" title="enum in com.google.gson.stream" target="classFrame">JsonToken</A></FONT></TD>
+<A HREF="JsonToken.html" title="enum in com.solidfire.gson.stream" target="classFrame">JsonToken</A></FONT></TD>
 </TR>
 </TABLE>
 
@@ -48,7 +48,7 @@
 Exceptions</FONT>&nbsp;
 <FONT CLASS="FrameItemFont">
 <BR>
-<A HREF="MalformedJsonException.html" title="class in com.google.gson.stream" target="classFrame">MalformedJsonException</A></FONT></TD>
+<A HREF="MalformedJsonException.html" title="class in com.solidfire.gson.stream" target="classFrame">MalformedJsonException</A></FONT></TD>
 </TR>
 </TABLE>
 
diff --git a/gson/docs/javadocs/com/google/gson/stream/package-summary.html b/gson/docs/javadocs/com/google/gson/stream/package-summary.html
index 8df8fcf72..a1cd490f3 100644
--- a/gson/docs/javadocs/com/google/gson/stream/package-summary.html
+++ b/gson/docs/javadocs/com/google/gson/stream/package-summary.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-com.google.gson.stream (Gson 2.3.1 API)
+  com.solidfire.gson.stream (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="com.google.gson.stream (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="com.solidfire.gson.stream (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -81,7 +81,7 @@
 
 <HR>
 <H2>
-Package com.google.gson.stream
+  Package com.solidfire.gson.stream
 </H2>
 
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
@@ -90,12 +90,12 @@ <H2>
 <B>Class Summary</B></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD WIDTH="15%"><B><A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A></B></TD>
+<TD WIDTH="15%"><B><A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A></B></TD>
 <TD>Reads a JSON (<a href="http://www.ietf.org/rfc/rfc4627.txt">RFC 4627</a>)
  encoded value as a stream of tokens.</TD>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD WIDTH="15%"><B><A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A></B></TD>
+<TD WIDTH="15%"><B><A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A></B></TD>
 <TD>Writes a JSON (<a href="http://www.ietf.org/rfc/rfc4627.txt">RFC 4627</a>)
  encoded value to a stream, one token at a time.</TD>
 </TR>
@@ -110,7 +110,7 @@ <H2>
 <B>Enum Summary</B></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD WIDTH="15%"><B><A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A></B></TD>
+<TD WIDTH="15%"><B><A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A></B></TD>
 <TD>A structure, name or value type in a JSON-encoded string.</TD>
 </TR>
 </TABLE>
@@ -124,7 +124,7 @@ <H2>
 <B>Exception Summary</B></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD WIDTH="15%"><B><A HREF="../../../../com/google/gson/stream/MalformedJsonException.html" title="class in com.google.gson.stream">MalformedJsonException</A></B></TD>
+<TD WIDTH="15%"><B><A HREF="../../../../com/google/gson/stream/MalformedJsonException.html" title="class in com.solidfire.gson.stream">MalformedJsonException</A></B></TD>
 <TD>Thrown when a reader encounters malformed JSON.</TD>
 </TR>
 </TABLE>
diff --git a/gson/docs/javadocs/com/google/gson/stream/package-tree.html b/gson/docs/javadocs/com/google/gson/stream/package-tree.html
index ed6ee8ff4..9cd9e0a06 100644
--- a/gson/docs/javadocs/com/google/gson/stream/package-tree.html
+++ b/gson/docs/javadocs/com/google/gson/stream/package-tree.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-com.google.gson.stream Class Hierarchy (Gson 2.3.1 API)
+  com.solidfire.gson.stream Class Hierarchy (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
-    if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="com.google.gson.stream Class Hierarchy (Gson 2.3.1 API)";
-    }
-}
+  function windowTitle()
+  {
+  if (location.href.indexOf('is-external=true') == -1) {
+  parent.document.title="com.solidfire.gson.stream Class Hierarchy (Gson 2.3.1 API)";
+  }
+  }
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -82,7 +82,7 @@
 <HR>
 <CENTER>
 <H2>
-Hierarchy For Package com.google.gson.stream
+  Hierarchy For Package com.solidfire.gson.stream
 </H2>
 </CENTER>
 <DL>
@@ -93,13 +93,13 @@ <H2>
 </H2>
 <UL>
 <LI TYPE="circle">java.lang.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang"><B>Object</B></A><UL>
-<LI TYPE="circle">com.google.gson.stream.<A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream"><B>JsonReader</B></A> (implements java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Closeable.html?is-external=true" title="class or interface in java.io">Closeable</A>)
-<LI TYPE="circle">com.google.gson.stream.<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream"><B>JsonWriter</B></A> (implements java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Closeable.html?is-external=true" title="class or interface in java.io">Closeable</A>, java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Flushable.html?is-external=true" title="class or interface in java.io">Flushable</A>)
+<LI TYPE="circle">com.solidfire.gson.stream.<A HREF="../../../../com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream"><B>JsonReader</B></A> (implements java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Closeable.html?is-external=true" title="class or interface in java.io">Closeable</A>)
+<LI TYPE="circle">com.solidfire.gson.stream.<A HREF="../../../../com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream"><B>JsonWriter</B></A> (implements java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Closeable.html?is-external=true" title="class or interface in java.io">Closeable</A>, java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Flushable.html?is-external=true" title="class or interface in java.io">Flushable</A>)
 <LI TYPE="circle">java.lang.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Throwable.html?is-external=true" title="class or interface in java.lang"><B>Throwable</B></A> (implements java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>)
 <UL>
 <LI TYPE="circle">java.lang.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Exception.html?is-external=true" title="class or interface in java.lang"><B>Exception</B></A><UL>
 <LI TYPE="circle">java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io"><B>IOException</B></A><UL>
-<LI TYPE="circle">com.google.gson.stream.<A HREF="../../../../com/google/gson/stream/MalformedJsonException.html" title="class in com.google.gson.stream"><B>MalformedJsonException</B></A></UL>
+<LI TYPE="circle">com.solidfire.gson.stream.<A HREF="../../../../com/google/gson/stream/MalformedJsonException.html" title="class in com.solidfire.gson.stream"><B>MalformedJsonException</B></A></UL>
 </UL>
 </UL>
 </UL>
@@ -111,7 +111,7 @@ <H2>
 <LI TYPE="circle">java.lang.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang"><B>Object</B></A><UL>
 <LI TYPE="circle">java.lang.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Enum.html?is-external=true" title="class or interface in java.lang"><B>Enum</B></A>&lt;E&gt; (implements java.lang.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Comparable.html?is-external=true" title="class or interface in java.lang">Comparable</A>&lt;T&gt;, java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>)
 <UL>
-<LI TYPE="circle">com.google.gson.stream.<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream"><B>JsonToken</B></A></UL>
+<LI TYPE="circle">com.solidfire.gson.stream.<A HREF="../../../../com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream"><B>JsonToken</B></A></UL>
 </UL>
 </UL>
 <HR>
diff --git a/gson/docs/javadocs/com/google/gson/stream/package-use.html b/gson/docs/javadocs/com/google/gson/stream/package-use.html
index 9276c0e4b..80359d583 100644
--- a/gson/docs/javadocs/com/google/gson/stream/package-use.html
+++ b/gson/docs/javadocs/com/google/gson/stream/package-use.html
@@ -5,7 +5,7 @@
 <!-- Generated by javadoc (build 1.6.0_65) on Thu Nov 20 01:11:55 PST 2014 -->
 <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <TITLE>
-Uses of Package com.google.gson.stream (Gson 2.3.1 API)
+    Uses of Package com.solidfire.gson.stream (Gson 2.3.1 API)
 </TITLE>
 
 <META NAME="date" CONTENT="2014-11-20">
@@ -13,12 +13,12 @@
 <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">
 
 <SCRIPT type="text/javascript">
-function windowTitle()
-{
+    function windowTitle()
+    {
     if (location.href.indexOf('is-external=true') == -1) {
-        parent.document.title="Uses of Package com.google.gson.stream (Gson 2.3.1 API)";
+    parent.document.title="Uses of Package com.solidfire.gson.stream (Gson 2.3.1 API)";
+    }
     }
-}
 </SCRIPT>
 <NOSCRIPT>
 </NOSCRIPT>
@@ -82,13 +82,13 @@
 <HR>
 <CENTER>
 <H2>
-<B>Uses of Package<br>com.google.gson.stream</B></H2>
+<B>Uses of Package<br>com.solidfire.gson.stream</B></H2>
 </CENTER>
 
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-Packages that use <A HREF="../../../../com/google/gson/stream/package-summary.html">com.google.gson.stream</A></FONT></TH>
+Packages that use <A HREF="../../../../com/google/gson/stream/package-summary.html">com.solidfire.gson.stream</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD><A HREF="#com.google.gson"><B>com.google.gson</B></A></TD>
@@ -96,7 +96,7 @@ <H2>
  vice-versa.&nbsp;</TD>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><A HREF="#com.google.gson.stream"><B>com.google.gson.stream</B></A></TD>
+<TD><A HREF="#com.solidfire.gson.stream"><B>com.solidfire.gson.stream</B></A></TD>
 <TD>&nbsp;&nbsp;</TD>
 </TR>
 </TABLE>
@@ -106,7 +106,7 @@ <H2>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-Classes in <A HREF="../../../../com/google/gson/stream/package-summary.html">com.google.gson.stream</A> used by <A HREF="../../../../com/google/gson/package-summary.html">com.google.gson</A></FONT></TH>
+Classes in <A HREF="../../../../com/google/gson/stream/package-summary.html">com.solidfire.gson.stream</A> used by <A HREF="../../../../com/google/gson/package-summary.html">com.google.gson</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD><B><A HREF="../../../../com/google/gson/stream/class-use/JsonReader.html#com.google.gson"><B>JsonReader</B></A></B>
@@ -125,20 +125,20 @@ <H2>
 </TABLE>
 &nbsp;
 <P>
-<A NAME="com.google.gson.stream"><!-- --></A>
+<A NAME="com.solidfire.gson.stream"><!-- --></A>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-Classes in <A HREF="../../../../com/google/gson/stream/package-summary.html">com.google.gson.stream</A> used by <A HREF="../../../../com/google/gson/stream/package-summary.html">com.google.gson.stream</A></FONT></TH>
+Classes in <A HREF="../../../../com/google/gson/stream/package-summary.html">com.solidfire.gson.stream</A> used by <A HREF="../../../../com/google/gson/stream/package-summary.html">com.solidfire.gson.stream</A></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><B><A HREF="../../../../com/google/gson/stream/class-use/JsonToken.html#com.google.gson.stream"><B>JsonToken</B></A></B>
+<TD><B><A HREF="../../../../com/google/gson/stream/class-use/JsonToken.html#com.solidfire.gson.stream"><B>JsonToken</B></A></B>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A structure, name or value type in a JSON-encoded string.</TD>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><B><A HREF="../../../../com/google/gson/stream/class-use/JsonWriter.html#com.google.gson.stream"><B>JsonWriter</B></A></B>
+<TD><B><A HREF="../../../../com/google/gson/stream/class-use/JsonWriter.html#com.solidfire.gson.stream"><B>JsonWriter</B></A></B>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Writes a JSON (<a href="http://www.ietf.org/rfc/rfc4627.txt">RFC 4627</a>)
diff --git a/gson/docs/javadocs/deprecated-list.html b/gson/docs/javadocs/deprecated-list.html
index c537694fe..fc6511ce8 100644
--- a/gson/docs/javadocs/deprecated-list.html
+++ b/gson/docs/javadocs/deprecated-list.html
@@ -97,19 +97,19 @@ <H2>
 <B>Deprecated Methods</B></FONT></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><A HREF="com/google/gson/reflect/TypeToken.html#isAssignableFrom(java.lang.Class)">com.google.gson.reflect.TypeToken.isAssignableFrom(Class<?>)</A>
+<TD><A HREF="com/google/gson/reflect/TypeToken.html#isAssignableFrom(java.lang.Class)">com.solidfire.gson.reflect.TypeToken.isAssignableFrom(Class<?>)</A>
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>this implementation may be inconsistent with javac for types
      with wildcards.</I>&nbsp;</TD>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><A HREF="com/google/gson/reflect/TypeToken.html#isAssignableFrom(java.lang.reflect.Type)">com.google.gson.reflect.TypeToken.isAssignableFrom(Type)</A>
+<TD><A HREF="com/google/gson/reflect/TypeToken.html#isAssignableFrom(java.lang.reflect.Type)">com.solidfire.gson.reflect.TypeToken.isAssignableFrom(Type)</A>
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>this implementation may be inconsistent with javac for types
      with wildcards.</I>&nbsp;</TD>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><A HREF="com/google/gson/reflect/TypeToken.html#isAssignableFrom(com.google.gson.reflect.TypeToken)">com.google.gson.reflect.TypeToken.isAssignableFrom(TypeToken<?>)</A>
+<TD><A HREF="com/google/gson/reflect/TypeToken.html#isAssignableFrom(com.solidfire.gson.reflect.TypeToken)">com.solidfire.gson.reflect.TypeToken.isAssignableFrom(TypeToken<?>)</A>
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>this implementation may be inconsistent with javac for types
      with wildcards.</I>&nbsp;</TD>
diff --git a/gson/docs/javadocs/index-all.html b/gson/docs/javadocs/index-all.html
index 758e0797e..700afede9 100644
--- a/gson/docs/javadocs/index-all.html
+++ b/gson/docs/javadocs/index-all.html
@@ -116,18 +116,18 @@
 <B>B</B></H2>
 <DL>
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#beginArray()"><B>beginArray()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Consumes the next token from the JSON stream and asserts that it is the
  beginning of a new array.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#beginArray()"><B>beginArray()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Begins encoding a new array.
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#beginObject()"><B>beginObject()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Consumes the next token from the JSON stream and asserts that it is the
  beginning of a new object.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#beginObject()"><B>beginObject()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Begins encoding a new object.
 </DL>
 <HR>
@@ -135,19 +135,19 @@
 <B>C</B></H2>
 <DL>
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#close()"><B>close()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Closes this JSON reader and the underlying <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Reader.html?is-external=true" title="class or interface in java.io"><CODE>Reader</CODE></A>.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#close()"><B>close()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Flushes and closes this writer and the underlying <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Writer.html?is-external=true" title="class or interface in java.io"><CODE>Writer</CODE></A>.
 <DT><A HREF="./com/google/gson/package-summary.html"><B>com.google.gson</B></A> - package com.google.gson<DD>This package provides the <A HREF="./com/google/gson/Gson.html" title="class in com.google.gson"><CODE>Gson</CODE></A> class to convert Json to Java and
- vice-versa.<DT><A HREF="./com/google/gson/annotations/package-summary.html"><B>com.google.gson.annotations</B></A> - package com.google.gson.annotations<DD>This package provides annotations that can be used with <A HREF="./com/google/gson/Gson.html" title="class in com.google.gson"><CODE>Gson</CODE></A>.<DT><A HREF="./com/google/gson/reflect/package-summary.html"><B>com.google.gson.reflect</B></A> - package com.google.gson.reflect<DD>This package provides utility classes for finding type information for generic types.<DT><A HREF="./com/google/gson/stream/package-summary.html"><B>com.google.gson.stream</B></A> - package com.google.gson.stream<DD>&nbsp;<DT><A HREF="./com/google/gson/JsonArray.html#contains(com.google.gson.JsonElement)"><B>contains(JsonElement)</B></A> - 
+ vice-versa.<DT><A HREF="./com/google/gson/annotations/package-summary.html"><B>com.google.gson.annotations</B></A> - package com.google.gson.annotations<DD>This package provides annotations that can be used with <A HREF="./com/google/gson/Gson.html" title="class in com.google.gson"><CODE>Gson</CODE></A>.<DT><A HREF="./com/google/gson/reflect/package-summary.html"><B>com.solidfire.gson.reflect</B></A> - package com.solidfire.gson.reflect<DD>This package provides utility classes for finding type information for generic types.<DT><A HREF="./com/google/gson/stream/package-summary.html"><B>com.solidfire.gson.stream</B></A> - package com.solidfire.gson.stream<DD>&nbsp;<DT><A HREF="./com/google/gson/JsonArray.html#contains(com.google.gson.JsonElement)"><B>contains(JsonElement)</B></A> -
 Method in class com.google.gson.<A HREF="./com/google/gson/JsonArray.html" title="class in com.google.gson">JsonArray</A>
 <DD>Returns true if this array contains the specified element.
 <DT><A HREF="./com/google/gson/GsonBuilder.html#create()"><B>create()</B></A> - 
 Method in class com.google.gson.<A HREF="./com/google/gson/GsonBuilder.html" title="class in com.google.gson">GsonBuilder</A>
 <DD>Creates a <A HREF="./com/google/gson/Gson.html" title="class in com.google.gson"><CODE>Gson</CODE></A> instance based on the current configuration.
-<DT><A HREF="./com/google/gson/TypeAdapterFactory.html#create(com.google.gson.Gson, com.google.gson.reflect.TypeToken)"><B>create(Gson, TypeToken&lt;T&gt;)</B></A> - 
+<DT><A HREF="./com/google/gson/TypeAdapterFactory.html#create(com.google.gson.Gson, com.solidfire.gson.reflect.TypeToken)"><B>create(Gson, TypeToken&lt;T&gt;)</B></A> -
 Method in interface com.google.gson.<A HREF="./com/google/gson/TypeAdapterFactory.html" title="interface in com.google.gson">TypeAdapterFactory</A>
 <DD>Returns a type adapter for <code>type</code>, or null if this factory doesn't
  support <code>type</code>.
@@ -183,18 +183,18 @@
 <DD>Enabling this feature will only change the serialized form if the map key is
  a complex type (i.e.
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#endArray()"><B>endArray()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Consumes the next token from the JSON stream and asserts that it is the
  end of the current array.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#endArray()"><B>endArray()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Ends encoding the current array.
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#endObject()"><B>endObject()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Consumes the next token from the JSON stream and asserts that it is the
  end of the current object.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#endObject()"><B>endObject()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Ends encoding the current object.
 <DT><A HREF="./com/google/gson/JsonObject.html#entrySet()"><B>entrySet()</B></A> - 
 Method in class com.google.gson.<A HREF="./com/google/gson/JsonObject.html" title="class in com.google.gson">JsonObject</A>
@@ -212,7 +212,7 @@
 Method in class com.google.gson.<A HREF="./com/google/gson/JsonPrimitive.html" title="class in com.google.gson">JsonPrimitive</A>
 <DD>&nbsp;
 <DT><A HREF="./com/google/gson/reflect/TypeToken.html#equals(java.lang.Object)"><B>equals(Object)</B></A> - 
-Method in class com.google.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>
+Method in class com.solidfire.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>
 <DD>&nbsp;
 <DT><A HREF="./com/google/gson/GsonBuilder.html#excludeFieldsWithModifiers(int...)"><B>excludeFieldsWithModifiers(int...)</B></A> - 
 Method in class com.google.gson.<A HREF="./com/google/gson/GsonBuilder.html" title="class in com.google.gson">GsonBuilder</A>
@@ -232,7 +232,7 @@
 Constructor for class com.google.gson.<A HREF="./com/google/gson/FieldAttributes.html" title="class in com.google.gson">FieldAttributes</A>
 <DD>Constructs a Field Attributes object from the <code>f</code>.
 <DT><A HREF="./com/google/gson/FieldNamingPolicy.html" title="enum in com.google.gson"><B>FieldNamingPolicy</B></A> - Enum in <A HREF="./com/google/gson/package-summary.html">com.google.gson</A><DD>An enumeration that defines a few standard naming conventions for JSON field names.<DT><A HREF="./com/google/gson/FieldNamingStrategy.html" title="interface in com.google.gson"><B>FieldNamingStrategy</B></A> - Interface in <A HREF="./com/google/gson/package-summary.html">com.google.gson</A><DD>A mechanism for providing custom field naming in Gson.<DT><A HREF="./com/google/gson/stream/JsonWriter.html#flush()"><B>flush()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Ensures all buffered data is written to the underlying <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Writer.html?is-external=true" title="class or interface in java.io"><CODE>Writer</CODE></A>
  and flushes that writer.
 <DT><A HREF="./com/google/gson/Gson.html#fromJson(java.lang.String, java.lang.Class)"><B>fromJson(String, Class&lt;T&gt;)</B></A> - 
@@ -249,7 +249,7 @@
 Method in class com.google.gson.<A HREF="./com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>
 <DD>This method deserializes the Json read from the specified reader into an object of the
  specified type.
-<DT><A HREF="./com/google/gson/Gson.html#fromJson(com.google.gson.stream.JsonReader, java.lang.reflect.Type)"><B>fromJson(JsonReader, Type)</B></A> - 
+<DT><A HREF="./com/google/gson/Gson.html#fromJson(com.solidfire.gson.stream.JsonReader, java.lang.reflect.Type)"><B>fromJson(JsonReader, Type)</B></A> -
 Method in class com.google.gson.<A HREF="./com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>
 <DD>Reads the next JSON value from <code>reader</code> and convert it to an object
  of type <code>typeOfT</code>.
@@ -286,12 +286,12 @@
 Method in class com.google.gson.<A HREF="./com/google/gson/JsonObject.html" title="class in com.google.gson">JsonObject</A>
 <DD>Returns the member with the specified name.
 <DT><A HREF="./com/google/gson/reflect/TypeToken.html#get(java.lang.reflect.Type)"><B>get(Type)</B></A> - 
-Static method in class com.google.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>
+Static method in class com.solidfire.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>
 <DD>Gets type literal for the given <code>Type</code> instance.
 <DT><A HREF="./com/google/gson/reflect/TypeToken.html#get(java.lang.Class)"><B>get(Class&lt;T&gt;)</B></A> - 
-Static method in class com.google.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>
+Static method in class com.solidfire.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>
 <DD>Gets type literal for the given <code>Class</code> instance.
-<DT><A HREF="./com/google/gson/Gson.html#getAdapter(com.google.gson.reflect.TypeToken)"><B>getAdapter(TypeToken&lt;T&gt;)</B></A> - 
+<DT><A HREF="./com/google/gson/Gson.html#getAdapter(com.solidfire.gson.reflect.TypeToken)"><B>getAdapter(TypeToken&lt;T&gt;)</B></A> -
 Method in class com.google.gson.<A HREF="./com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>
 <DD>Returns the type adapter for <code></code> type.
 <DT><A HREF="./com/google/gson/Gson.html#getAdapter(java.lang.Class)"><B>getAdapter(Class&lt;T&gt;)</B></A> - 
@@ -449,24 +449,24 @@
 <DT><A HREF="./com/google/gson/FieldAttributes.html#getDeclaringClass()"><B>getDeclaringClass()</B></A> - 
 Method in class com.google.gson.<A HREF="./com/google/gson/FieldAttributes.html" title="class in com.google.gson">FieldAttributes</A>
 <DD>&nbsp;
-<DT><A HREF="./com/google/gson/Gson.html#getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken)"><B>getDelegateAdapter(TypeAdapterFactory, TypeToken&lt;T&gt;)</B></A> - 
+<DT><A HREF="./com/google/gson/Gson.html#getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.solidfire.gson.reflect.TypeToken)"><B>getDelegateAdapter(TypeAdapterFactory, TypeToken&lt;T&gt;)</B></A> -
 Method in class com.google.gson.<A HREF="./com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>
 <DD>This method is used to get an alternate type adapter for the specified type.
 <DT><A HREF="./com/google/gson/FieldAttributes.html#getName()"><B>getName()</B></A> - 
 Method in class com.google.gson.<A HREF="./com/google/gson/FieldAttributes.html" title="class in com.google.gson">FieldAttributes</A>
 <DD>&nbsp;
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#getPath()"><B>getPath()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Returns a <a href="http://goessner.net/articles/JsonPath/">JsonPath</a> to
  the current location in the JSON value.
 <DT><A HREF="./com/google/gson/reflect/TypeToken.html#getRawType()"><B>getRawType()</B></A> - 
-Method in class com.google.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>
+Method in class com.solidfire.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>
 <DD>Returns the raw (non-generic) type for this type.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#getSerializeNulls()"><B>getSerializeNulls()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Returns true if object members are serialized when their value is null.
 <DT><A HREF="./com/google/gson/reflect/TypeToken.html#getType()"><B>getType()</B></A> - 
-Method in class com.google.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>
+Method in class com.solidfire.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>
 <DD>Gets underlying <code>Type</code> instance.
 <DT><A HREF="./com/google/gson/Gson.html" title="class in com.google.gson"><B>Gson</B></A> - Class in <A HREF="./com/google/gson/package-summary.html">com.google.gson</A><DD>This is the main class for using Gson.<DT><A HREF="./com/google/gson/Gson.html#Gson()"><B>Gson()</B></A> - 
 Constructor for class com.google.gson.<A HREF="./com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>
@@ -497,7 +497,7 @@
 Method in class com.google.gson.<A HREF="./com/google/gson/JsonPrimitive.html" title="class in com.google.gson">JsonPrimitive</A>
 <DD>&nbsp;
 <DT><A HREF="./com/google/gson/reflect/TypeToken.html#hashCode()"><B>hashCode()</B></A> - 
-Method in class com.google.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>
+Method in class com.solidfire.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>
 <DD>&nbsp;
 <DT><A HREF="./com/google/gson/FieldAttributes.html#hasModifier(int)"><B>hasModifier(int)</B></A> - 
 Method in class com.google.gson.<A HREF="./com/google/gson/FieldAttributes.html" title="class in com.google.gson">FieldAttributes</A>
@@ -506,7 +506,7 @@
 Method in class com.google.gson.<A HREF="./com/google/gson/JsonStreamParser.html" title="class in com.google.gson">JsonStreamParser</A>
 <DD>Returns true if a <A HREF="./com/google/gson/JsonElement.html" title="class in com.google.gson"><CODE>JsonElement</CODE></A> is available on the input for consumption
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#hasNext()"><B>hasNext()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Returns true if the current array or object has another element.
 </DL>
 <HR>
@@ -518,22 +518,22 @@
 <DD>singleton for JsonNull
 <DT><A HREF="./com/google/gson/InstanceCreator.html" title="interface in com.google.gson"><B>InstanceCreator</B></A>&lt;<A HREF="./com/google/gson/InstanceCreator.html" title="type parameter in InstanceCreator">T</A>&gt; - Interface in <A HREF="./com/google/gson/package-summary.html">com.google.gson</A><DD>This interface is implemented to create instances of a class that does not define a no-args
  constructor.<DT><A HREF="./com/google/gson/reflect/TypeToken.html#isAssignableFrom(java.lang.Class)"><B>isAssignableFrom(Class&lt;?&gt;)</B></A> - 
-Method in class com.google.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>
+Method in class com.solidfire.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>
 <DD><B>Deprecated.</B>&nbsp;<I>this implementation may be inconsistent with javac for types
      with wildcards.</I>
 <DT><A HREF="./com/google/gson/reflect/TypeToken.html#isAssignableFrom(java.lang.reflect.Type)"><B>isAssignableFrom(Type)</B></A> - 
-Method in class com.google.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>
+Method in class com.solidfire.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>
 <DD><B>Deprecated.</B>&nbsp;<I>this implementation may be inconsistent with javac for types
      with wildcards.</I>
-<DT><A HREF="./com/google/gson/reflect/TypeToken.html#isAssignableFrom(com.google.gson.reflect.TypeToken)"><B>isAssignableFrom(TypeToken&lt;?&gt;)</B></A> - 
-Method in class com.google.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>
+<DT><A HREF="./com/google/gson/reflect/TypeToken.html#isAssignableFrom(com.solidfire.gson.reflect.TypeToken)"><B>isAssignableFrom(TypeToken&lt;?&gt;)</B></A> -
+Method in class com.solidfire.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>
 <DD><B>Deprecated.</B>&nbsp;<I>this implementation may be inconsistent with javac for types
      with wildcards.</I>
 <DT><A HREF="./com/google/gson/JsonPrimitive.html#isBoolean()"><B>isBoolean()</B></A> - 
 Method in class com.google.gson.<A HREF="./com/google/gson/JsonPrimitive.html" title="class in com.google.gson">JsonPrimitive</A>
 <DD>Check whether this primitive contains a boolean value.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#isHtmlSafe()"><B>isHtmlSafe()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Returns true if this writer writes JSON that's safe for inclusion in HTML
  and XML documents.
 <DT><A HREF="./com/google/gson/JsonElement.html#isJsonArray()"><B>isJsonArray()</B></A> - 
@@ -549,10 +549,10 @@
 Method in class com.google.gson.<A HREF="./com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>
 <DD>provides check for verifying if this element is a primitive or not.
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#isLenient()"><B>isLenient()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Returns true if this parser is liberal in what it accepts.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#isLenient()"><B>isLenient()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Returns true if this writer has relaxed syntax rules.
 <DT><A HREF="./com/google/gson/JsonPrimitive.html#isNumber()"><B>isNumber()</B></A> - 
 Method in class com.google.gson.<A HREF="./com/google/gson/JsonPrimitive.html" title="class in com.google.gson">JsonPrimitive</A>
@@ -618,9 +618,9 @@
 <DT><A HREF="./com/google/gson/JsonPrimitive.html#JsonPrimitive(java.lang.Character)"><B>JsonPrimitive(Character)</B></A> - 
 Constructor for class com.google.gson.<A HREF="./com/google/gson/JsonPrimitive.html" title="class in com.google.gson">JsonPrimitive</A>
 <DD>Create a primitive containing a character.
-<DT><A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream"><B>JsonReader</B></A> - Class in <A HREF="./com/google/gson/stream/package-summary.html">com.google.gson.stream</A><DD>Reads a JSON (<a href="http://www.ietf.org/rfc/rfc4627.txt">RFC 4627</a>)
+<DT><A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream"><B>JsonReader</B></A> - Class in <A HREF="./com/google/gson/stream/package-summary.html">com.solidfire.gson.stream</A><DD>Reads a JSON (<a href="http://www.ietf.org/rfc/rfc4627.txt">RFC 4627</a>)
  encoded value as a stream of tokens.<DT><A HREF="./com/google/gson/stream/JsonReader.html#JsonReader(java.io.Reader)"><B>JsonReader(Reader)</B></A> - 
-Constructor for class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Constructor for class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Creates a new instance that reads a JSON-encoded stream from <code>in</code>.
 <DT><A HREF="./com/google/gson/JsonSerializationContext.html" title="interface in com.google.gson"><B>JsonSerializationContext</B></A> - Interface in <A HREF="./com/google/gson/package-summary.html">com.google.gson</A><DD>Context for serialization that is passed to a custom serializer during invocation of its
  <A HREF="./com/google/gson/JsonSerializer.html#serialize(T, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)"><CODE>JsonSerializer.serialize(Object, Type, JsonSerializationContext)</CODE></A> method.<DT><A HREF="./com/google/gson/JsonSerializer.html" title="interface in com.google.gson"><B>JsonSerializer</B></A>&lt;<A HREF="./com/google/gson/JsonSerializer.html" title="type parameter in JsonSerializer">T</A>&gt; - Interface in <A HREF="./com/google/gson/package-summary.html">com.google.gson</A><DD>Interface representing a custom serializer for Json.<DT><A HREF="./com/google/gson/JsonStreamParser.html" title="class in com.google.gson"><B>JsonStreamParser</B></A> - Class in <A HREF="./com/google/gson/package-summary.html">com.google.gson</A><DD>A streaming parser that allows reading of multiple <A HREF="./com/google/gson/JsonElement.html" title="class in com.google.gson"><CODE>JsonElement</CODE></A>s from the specified reader
@@ -640,9 +640,9 @@
 <DT><A HREF="./com/google/gson/JsonSyntaxException.html#JsonSyntaxException(java.lang.Throwable)"><B>JsonSyntaxException(Throwable)</B></A> - 
 Constructor for exception com.google.gson.<A HREF="./com/google/gson/JsonSyntaxException.html" title="class in com.google.gson">JsonSyntaxException</A>
 <DD>Creates exception with the specified cause.
-<DT><A HREF="./com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream"><B>JsonToken</B></A> - Enum in <A HREF="./com/google/gson/stream/package-summary.html">com.google.gson.stream</A><DD>A structure, name or value type in a JSON-encoded string.<DT><A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream"><B>JsonWriter</B></A> - Class in <A HREF="./com/google/gson/stream/package-summary.html">com.google.gson.stream</A><DD>Writes a JSON (<a href="http://www.ietf.org/rfc/rfc4627.txt">RFC 4627</a>)
+<DT><A HREF="./com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream"><B>JsonToken</B></A> - Enum in <A HREF="./com/google/gson/stream/package-summary.html">com.solidfire.gson.stream</A><DD>A structure, name or value type in a JSON-encoded string.<DT><A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream"><B>JsonWriter</B></A> - Class in <A HREF="./com/google/gson/stream/package-summary.html">com.solidfire.gson.stream</A><DD>Writes a JSON (<a href="http://www.ietf.org/rfc/rfc4627.txt">RFC 4627</a>)
  encoded value to a stream, one token at a time.<DT><A HREF="./com/google/gson/stream/JsonWriter.html#JsonWriter(java.io.Writer)"><B>JsonWriter(Writer)</B></A> - 
-Constructor for class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Constructor for class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Creates a new instance that writes a JSON-encoded stream to <code>out</code>.
 </DL>
 <HR>
@@ -654,14 +654,14 @@
 <A NAME="_M_"><!-- --></A><H2>
 <B>M</B></H2>
 <DL>
-<DT><A HREF="./com/google/gson/stream/MalformedJsonException.html" title="class in com.google.gson.stream"><B>MalformedJsonException</B></A> - Exception in <A HREF="./com/google/gson/stream/package-summary.html">com.google.gson.stream</A><DD>Thrown when a reader encounters malformed JSON.<DT><A HREF="./com/google/gson/stream/MalformedJsonException.html#MalformedJsonException(java.lang.String)"><B>MalformedJsonException(String)</B></A> - 
-Constructor for exception com.google.gson.stream.<A HREF="./com/google/gson/stream/MalformedJsonException.html" title="class in com.google.gson.stream">MalformedJsonException</A>
+<DT><A HREF="./com/google/gson/stream/MalformedJsonException.html" title="class in com.solidfire.gson.stream"><B>MalformedJsonException</B></A> - Exception in <A HREF="./com/google/gson/stream/package-summary.html">com.solidfire.gson.stream</A><DD>Thrown when a reader encounters malformed JSON.<DT><A HREF="./com/google/gson/stream/MalformedJsonException.html#MalformedJsonException(java.lang.String)"><B>MalformedJsonException(String)</B></A> -
+Constructor for exception com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/MalformedJsonException.html" title="class in com.solidfire.gson.stream">MalformedJsonException</A>
 <DD>&nbsp;
 <DT><A HREF="./com/google/gson/stream/MalformedJsonException.html#MalformedJsonException(java.lang.String, java.lang.Throwable)"><B>MalformedJsonException(String, Throwable)</B></A> - 
-Constructor for exception com.google.gson.stream.<A HREF="./com/google/gson/stream/MalformedJsonException.html" title="class in com.google.gson.stream">MalformedJsonException</A>
+Constructor for exception com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/MalformedJsonException.html" title="class in com.solidfire.gson.stream">MalformedJsonException</A>
 <DD>&nbsp;
 <DT><A HREF="./com/google/gson/stream/MalformedJsonException.html#MalformedJsonException(java.lang.Throwable)"><B>MalformedJsonException(Throwable)</B></A> - 
-Constructor for exception com.google.gson.stream.<A HREF="./com/google/gson/stream/MalformedJsonException.html" title="class in com.google.gson.stream">MalformedJsonException</A>
+Constructor for exception com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/MalformedJsonException.html" title="class in com.solidfire.gson.stream">MalformedJsonException</A>
 <DD>&nbsp;
 </DL>
 <HR>
@@ -669,44 +669,44 @@
 <B>N</B></H2>
 <DL>
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#name(java.lang.String)"><B>name(String)</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Encodes the property name.
 <DT><A HREF="./com/google/gson/JsonStreamParser.html#next()"><B>next()</B></A> - 
 Method in class com.google.gson.<A HREF="./com/google/gson/JsonStreamParser.html" title="class in com.google.gson">JsonStreamParser</A>
 <DD>Returns the next available <A HREF="./com/google/gson/JsonElement.html" title="class in com.google.gson"><CODE>JsonElement</CODE></A> on the reader.
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#nextBoolean()"><B>nextBoolean()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Returns the <A HREF="./com/google/gson/stream/JsonToken.html#BOOLEAN"><CODE>boolean</CODE></A> value of the next token,
  consuming it.
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#nextDouble()"><B>nextDouble()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Returns the <A HREF="./com/google/gson/stream/JsonToken.html#NUMBER"><CODE>double</CODE></A> value of the next token,
  consuming it.
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#nextInt()"><B>nextInt()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Returns the <A HREF="./com/google/gson/stream/JsonToken.html#NUMBER"><CODE>int</CODE></A> value of the next token,
  consuming it.
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#nextLong()"><B>nextLong()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Returns the <A HREF="./com/google/gson/stream/JsonToken.html#NUMBER"><CODE>long</CODE></A> value of the next token,
  consuming it.
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#nextName()"><B>nextName()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Returns the next token, a <A HREF="./com/google/gson/stream/JsonToken.html#NAME"><CODE>property name</CODE></A>, and
  consumes it.
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#nextNull()"><B>nextNull()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Consumes the next token from the JSON stream and asserts that it is a
  literal null.
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#nextString()"><B>nextString()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Returns the <A HREF="./com/google/gson/stream/JsonToken.html#STRING"><CODE>string</CODE></A> value of the next token,
  consuming it.
 <DT><A HREF="./com/google/gson/TypeAdapter.html#nullSafe()"><B>nullSafe()</B></A> - 
 Method in class com.google.gson.<A HREF="./com/google/gson/TypeAdapter.html" title="class in com.google.gson">TypeAdapter</A>
 <DD>This wrapper method is used to make a type adapter null tolerant.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#nullValue()"><B>nullValue()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Encodes <code>null</code>.
 </DL>
 <HR>
@@ -719,18 +719,18 @@
 <DT><A HREF="./com/google/gson/JsonParser.html#parse(java.io.Reader)"><B>parse(Reader)</B></A> - 
 Method in class com.google.gson.<A HREF="./com/google/gson/JsonParser.html" title="class in com.google.gson">JsonParser</A>
 <DD>Parses the specified JSON string into a parse tree
-<DT><A HREF="./com/google/gson/JsonParser.html#parse(com.google.gson.stream.JsonReader)"><B>parse(JsonReader)</B></A> - 
+<DT><A HREF="./com/google/gson/JsonParser.html#parse(com.solidfire.gson.stream.JsonReader)"><B>parse(JsonReader)</B></A> -
 Method in class com.google.gson.<A HREF="./com/google/gson/JsonParser.html" title="class in com.google.gson">JsonParser</A>
 <DD>Returns the next value from the JSON stream as a parse tree.
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#peek()"><B>peek()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Returns the type of the next token without consuming it.
 </DL>
 <HR>
 <A NAME="_R_"><!-- --></A><H2>
 <B>R</B></H2>
 <DL>
-<DT><A HREF="./com/google/gson/TypeAdapter.html#read(com.google.gson.stream.JsonReader)"><B>read(JsonReader)</B></A> - 
+<DT><A HREF="./com/google/gson/TypeAdapter.html#read(com.solidfire.gson.stream.JsonReader)"><B>read(JsonReader)</B></A> -
 Method in class com.google.gson.<A HREF="./com/google/gson/TypeAdapter.html" title="class in com.google.gson">TypeAdapter</A>
 <DD>Reads one JSON value (an array, object, string, number, boolean or null)
  and converts it to a Java object.
@@ -807,18 +807,18 @@
 <DD>Configures Gson to apply a specific naming policy strategy to an object's field during
  serialization and deserialization.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#setHtmlSafe(boolean)"><B>setHtmlSafe(boolean)</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Configure this writer to emit JSON that's safe for direct inclusion in HTML
  and XML documents.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#setIndent(java.lang.String)"><B>setIndent(String)</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Sets the indentation string to be repeated for each level of indentation
  in the encoded document.
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#setLenient(boolean)"><B>setLenient(boolean)</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Configure this parser to be  be liberal in what it accepts.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#setLenient(boolean)"><B>setLenient(boolean)</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Configure this writer to relax its syntax rules.
 <DT><A HREF="./com/google/gson/GsonBuilder.html#setLongSerializationPolicy(com.google.gson.LongSerializationPolicy)"><B>setLongSerializationPolicy(LongSerializationPolicy)</B></A> - 
 Method in class com.google.gson.<A HREF="./com/google/gson/GsonBuilder.html" title="class in com.google.gson">GsonBuilder</A>
@@ -828,7 +828,7 @@
 Method in class com.google.gson.<A HREF="./com/google/gson/GsonBuilder.html" title="class in com.google.gson">GsonBuilder</A>
 <DD>Configures Gson to output Json that fits in a page for pretty printing.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#setSerializeNulls(boolean)"><B>setSerializeNulls(boolean)</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Sets whether object members are serialized when their value is null.
 <DT><A HREF="./com/google/gson/GsonBuilder.html#setVersion(double)"><B>setVersion(double)</B></A> - 
 Method in class com.google.gson.<A HREF="./com/google/gson/GsonBuilder.html" title="class in com.google.gson">GsonBuilder</A>
@@ -843,7 +843,7 @@
 Method in class com.google.gson.<A HREF="./com/google/gson/JsonArray.html" title="class in com.google.gson">JsonArray</A>
 <DD>Returns the number of elements in the array.
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#skipValue()"><B>skipValue()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>Skips the next value recursively.
 </DL>
 <HR>
@@ -864,7 +864,7 @@
 Method in class com.google.gson.<A HREF="./com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>
 <DD>This method serializes the specified object, including those of generic types, into its
  equivalent Json representation.
-<DT><A HREF="./com/google/gson/Gson.html#toJson(java.lang.Object, java.lang.reflect.Type, com.google.gson.stream.JsonWriter)"><B>toJson(Object, Type, JsonWriter)</B></A> - 
+<DT><A HREF="./com/google/gson/Gson.html#toJson(java.lang.Object, java.lang.reflect.Type, com.solidfire.gson.stream.JsonWriter)"><B>toJson(Object, Type, JsonWriter)</B></A> -
 Method in class com.google.gson.<A HREF="./com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>
 <DD>Writes the JSON representation of <code>src</code> of type <code>typeOfSrc</code> to
  <code>writer</code>.
@@ -874,7 +874,7 @@
 <DT><A HREF="./com/google/gson/Gson.html#toJson(com.google.gson.JsonElement, java.lang.Appendable)"><B>toJson(JsonElement, Appendable)</B></A> - 
 Method in class com.google.gson.<A HREF="./com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>
 <DD>Writes out the equivalent JSON for a tree of <A HREF="./com/google/gson/JsonElement.html" title="class in com.google.gson"><CODE>JsonElement</CODE></A>s.
-<DT><A HREF="./com/google/gson/Gson.html#toJson(com.google.gson.JsonElement, com.google.gson.stream.JsonWriter)"><B>toJson(JsonElement, JsonWriter)</B></A> - 
+<DT><A HREF="./com/google/gson/Gson.html#toJson(com.google.gson.JsonElement, com.solidfire.gson.stream.JsonWriter)"><B>toJson(JsonElement, JsonWriter)</B></A> -
 Method in class com.google.gson.<A HREF="./com/google/gson/Gson.html" title="class in com.google.gson">Gson</A>
 <DD>Writes the JSON for <code>jsonElement</code> to <code>writer</code>.
 <DT><A HREF="./com/google/gson/TypeAdapter.html#toJson(java.io.Writer, T)"><B>toJson(Writer, T)</B></A> - 
@@ -901,10 +901,10 @@
 Method in class com.google.gson.<A HREF="./com/google/gson/JsonElement.html" title="class in com.google.gson">JsonElement</A>
 <DD>Returns a String representation of this element.
 <DT><A HREF="./com/google/gson/reflect/TypeToken.html#toString()"><B>toString()</B></A> - 
-Method in class com.google.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>
+Method in class com.solidfire.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>
 <DD>&nbsp;
 <DT><A HREF="./com/google/gson/stream/JsonReader.html#toString()"><B>toString()</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream">JsonReader</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream">JsonReader</A>
 <DD>&nbsp;
 <DT><A HREF="./com/google/gson/FieldNamingStrategy.html#translateName(java.lang.reflect.Field)"><B>translateName(Field)</B></A> - 
 Method in interface com.google.gson.<A HREF="./com/google/gson/FieldNamingStrategy.html" title="interface in com.google.gson">FieldNamingStrategy</A>
@@ -912,8 +912,8 @@
 <DT><A HREF="./com/google/gson/TypeAdapter.html" title="class in com.google.gson"><B>TypeAdapter</B></A>&lt;<A HREF="./com/google/gson/TypeAdapter.html" title="type parameter in TypeAdapter">T</A>&gt; - Class in <A HREF="./com/google/gson/package-summary.html">com.google.gson</A><DD>Converts Java objects to and from JSON.<DT><A HREF="./com/google/gson/TypeAdapter.html#TypeAdapter()"><B>TypeAdapter()</B></A> - 
 Constructor for class com.google.gson.<A HREF="./com/google/gson/TypeAdapter.html" title="class in com.google.gson">TypeAdapter</A>
 <DD>&nbsp;
-<DT><A HREF="./com/google/gson/TypeAdapterFactory.html" title="interface in com.google.gson"><B>TypeAdapterFactory</B></A> - Interface in <A HREF="./com/google/gson/package-summary.html">com.google.gson</A><DD>Creates type adapters for set of related types.<DT><A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect"><B>TypeToken</B></A>&lt;<A HREF="./com/google/gson/reflect/TypeToken.html" title="type parameter in TypeToken">T</A>&gt; - Class in <A HREF="./com/google/gson/reflect/package-summary.html">com.google.gson.reflect</A><DD>Represents a generic type <code>T</code>.<DT><A HREF="./com/google/gson/reflect/TypeToken.html#TypeToken()"><B>TypeToken()</B></A> - 
-Constructor for class com.google.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect">TypeToken</A>
+<DT><A HREF="./com/google/gson/TypeAdapterFactory.html" title="interface in com.google.gson"><B>TypeAdapterFactory</B></A> - Interface in <A HREF="./com/google/gson/package-summary.html">com.google.gson</A><DD>Creates type adapters for set of related types.<DT><A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect"><B>TypeToken</B></A>&lt;<A HREF="./com/google/gson/reflect/TypeToken.html" title="type parameter in TypeToken">T</A>&gt; - Class in <A HREF="./com/google/gson/reflect/package-summary.html">com.solidfire.gson.reflect</A><DD>Represents a generic type <code>T</code>.<DT><A HREF="./com/google/gson/reflect/TypeToken.html#TypeToken()"><B>TypeToken()</B></A> -
+Constructor for class com.solidfire.gson.reflect.<A HREF="./com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect">TypeToken</A>
 <DD>Constructs a new type literal.
 </DL>
 <HR>
@@ -926,19 +926,19 @@
 <B>V</B></H2>
 <DL>
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#value(java.lang.String)"><B>value(String)</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Encodes <code>value</code>.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#value(boolean)"><B>value(boolean)</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Encodes <code>value</code>.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#value(double)"><B>value(double)</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Encodes <code>value</code>.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#value(long)"><B>value(long)</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Encodes <code>value</code>.
 <DT><A HREF="./com/google/gson/stream/JsonWriter.html#value(java.lang.Number)"><B>value(Number)</B></A> - 
-Method in class com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream">JsonWriter</A>
+Method in class com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream">JsonWriter</A>
 <DD>Encodes <code>value</code>.
 <DT><A HREF="./com/google/gson/FieldNamingPolicy.html#valueOf(java.lang.String)"><B>valueOf(String)</B></A> - 
 Static method in enum com.google.gson.<A HREF="./com/google/gson/FieldNamingPolicy.html" title="enum in com.google.gson">FieldNamingPolicy</A>
@@ -947,7 +947,7 @@
 Static method in enum com.google.gson.<A HREF="./com/google/gson/LongSerializationPolicy.html" title="enum in com.google.gson">LongSerializationPolicy</A>
 <DD>Returns the enum constant of this type with the specified name.
 <DT><A HREF="./com/google/gson/stream/JsonToken.html#valueOf(java.lang.String)"><B>valueOf(String)</B></A> - 
-Static method in enum com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A>
+Static method in enum com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A>
 <DD>Returns the enum constant of this type with the specified name.
 <DT><A HREF="./com/google/gson/FieldNamingPolicy.html#values()"><B>values()</B></A> - 
 Static method in enum com.google.gson.<A HREF="./com/google/gson/FieldNamingPolicy.html" title="enum in com.google.gson">FieldNamingPolicy</A>
@@ -958,7 +958,7 @@
 <DD>Returns an array containing the constants of this enum type, in
 the order they are declared.
 <DT><A HREF="./com/google/gson/stream/JsonToken.html#values()"><B>values()</B></A> - 
-Static method in enum com.google.gson.stream.<A HREF="./com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream">JsonToken</A>
+Static method in enum com.solidfire.gson.stream.<A HREF="./com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream">JsonToken</A>
 <DD>Returns an array containing the constants of this enum type, in
 the order they are declared.
 </DL>
@@ -966,7 +966,7 @@
 <A NAME="_W_"><!-- --></A><H2>
 <B>W</B></H2>
 <DL>
-<DT><A HREF="./com/google/gson/TypeAdapter.html#write(com.google.gson.stream.JsonWriter, T)"><B>write(JsonWriter, T)</B></A> - 
+<DT><A HREF="./com/google/gson/TypeAdapter.html#write(com.solidfire.gson.stream.JsonWriter, T)"><B>write(JsonWriter, T)</B></A> -
 Method in class com.google.gson.<A HREF="./com/google/gson/TypeAdapter.html" title="class in com.google.gson">TypeAdapter</A>
 <DD>Writes one JSON value (an array, object, string, number, boolean or null)
  for <code>value</code>.
diff --git a/gson/docs/javadocs/overview-frame.html b/gson/docs/javadocs/overview-frame.html
index 33a3118e9..e8336b630 100644
--- a/gson/docs/javadocs/overview-frame.html
+++ b/gson/docs/javadocs/overview-frame.html
@@ -35,9 +35,9 @@
 <BR>
 <FONT CLASS="FrameItemFont"><A HREF="com/google/gson/annotations/package-frame.html" target="packageFrame">com.google.gson.annotations</A></FONT>
 <BR>
-<FONT CLASS="FrameItemFont"><A HREF="com/google/gson/reflect/package-frame.html" target="packageFrame">com.google.gson.reflect</A></FONT>
+<FONT CLASS="FrameItemFont"><A HREF="com/google/gson/reflect/package-frame.html" target="packageFrame">com.solidfire.gson.reflect</A></FONT>
 <BR>
-<FONT CLASS="FrameItemFont"><A HREF="com/google/gson/stream/package-frame.html" target="packageFrame">com.google.gson.stream</A></FONT>
+<FONT CLASS="FrameItemFont"><A HREF="com/google/gson/stream/package-frame.html" target="packageFrame">com.solidfire.gson.stream</A></FONT>
 <BR>
 </TD>
 </TR>
diff --git a/gson/docs/javadocs/overview-summary.html b/gson/docs/javadocs/overview-summary.html
index 6efe68d0a..490df9094 100644
--- a/gson/docs/javadocs/overview-summary.html
+++ b/gson/docs/javadocs/overview-summary.html
@@ -101,11 +101,11 @@ <H1>
 <TD>This package provides annotations that can be used with <A HREF="com/google/gson/Gson.html" title="class in com.google.gson"><CODE>Gson</CODE></A>.</TD>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD WIDTH="20%"><B><A HREF="com/google/gson/reflect/package-summary.html">com.google.gson.reflect</A></B></TD>
+<TD WIDTH="20%"><B><A HREF="com/google/gson/reflect/package-summary.html">com.solidfire.gson.reflect</A></B></TD>
 <TD>This package provides utility classes for finding type information for generic types.</TD>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD WIDTH="20%"><B><A HREF="com/google/gson/stream/package-summary.html">com.google.gson.stream</A></B></TD>
+<TD WIDTH="20%"><B><A HREF="com/google/gson/stream/package-summary.html">com.solidfire.gson.stream</A></B></TD>
 <TD>&nbsp;</TD>
 </TR>
 </TABLE>
diff --git a/gson/docs/javadocs/overview-tree.html b/gson/docs/javadocs/overview-tree.html
index b3dfac95f..627c16989 100644
--- a/gson/docs/javadocs/overview-tree.html
+++ b/gson/docs/javadocs/overview-tree.html
@@ -85,7 +85,7 @@ <H2>
 Hierarchy For All Packages</H2>
 </CENTER>
 <DL>
-<DT><B>Package Hierarchies:</B><DD><A HREF="com/google/gson/package-tree.html">com.google.gson</A>, <A HREF="com/google/gson/annotations/package-tree.html">com.google.gson.annotations</A>, <A HREF="com/google/gson/reflect/package-tree.html">com.google.gson.reflect</A>, <A HREF="com/google/gson/stream/package-tree.html">com.google.gson.stream</A></DL>
+<DT><B>Package Hierarchies:</B><DD><A HREF="com/google/gson/package-tree.html">com.google.gson</A>, <A HREF="com/google/gson/annotations/package-tree.html">com.google.gson.annotations</A>, <A HREF="com/google/gson/reflect/package-tree.html">com.solidfire.gson.reflect</A>, <A HREF="com/google/gson/stream/package-tree.html">com.solidfire.gson.stream</A></DL>
 <HR>
 <H2>
 Class Hierarchy
@@ -95,21 +95,21 @@ <H2>
 <LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/FieldAttributes.html" title="class in com.google.gson"><B>FieldAttributes</B></A><LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/Gson.html" title="class in com.google.gson"><B>Gson</B></A><LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/GsonBuilder.html" title="class in com.google.gson"><B>GsonBuilder</B></A><LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/JsonElement.html" title="class in com.google.gson"><B>JsonElement</B></A><UL>
 <LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/JsonArray.html" title="class in com.google.gson"><B>JsonArray</B></A> (implements java.lang.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Iterable.html?is-external=true" title="class or interface in java.lang">Iterable</A>&lt;T&gt;)
 <LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/JsonNull.html" title="class in com.google.gson"><B>JsonNull</B></A><LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/JsonObject.html" title="class in com.google.gson"><B>JsonObject</B></A><LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/JsonPrimitive.html" title="class in com.google.gson"><B>JsonPrimitive</B></A></UL>
-<LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/JsonParser.html" title="class in com.google.gson"><B>JsonParser</B></A><LI TYPE="circle">com.google.gson.stream.<A HREF="com/google/gson/stream/JsonReader.html" title="class in com.google.gson.stream"><B>JsonReader</B></A> (implements java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Closeable.html?is-external=true" title="class or interface in java.io">Closeable</A>)
+<LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/JsonParser.html" title="class in com.google.gson"><B>JsonParser</B></A><LI TYPE="circle">com.solidfire.gson.stream.<A HREF="com/google/gson/stream/JsonReader.html" title="class in com.solidfire.gson.stream"><B>JsonReader</B></A> (implements java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Closeable.html?is-external=true" title="class or interface in java.io">Closeable</A>)
 <LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/JsonStreamParser.html" title="class in com.google.gson"><B>JsonStreamParser</B></A> (implements java.util.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util">Iterator</A>&lt;E&gt;)
-<LI TYPE="circle">com.google.gson.stream.<A HREF="com/google/gson/stream/JsonWriter.html" title="class in com.google.gson.stream"><B>JsonWriter</B></A> (implements java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Closeable.html?is-external=true" title="class or interface in java.io">Closeable</A>, java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Flushable.html?is-external=true" title="class or interface in java.io">Flushable</A>)
+<LI TYPE="circle">com.solidfire.gson.stream.<A HREF="com/google/gson/stream/JsonWriter.html" title="class in com.solidfire.gson.stream"><B>JsonWriter</B></A> (implements java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Closeable.html?is-external=true" title="class or interface in java.io">Closeable</A>, java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Flushable.html?is-external=true" title="class or interface in java.io">Flushable</A>)
 <LI TYPE="circle">java.lang.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Throwable.html?is-external=true" title="class or interface in java.lang"><B>Throwable</B></A> (implements java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>)
 <UL>
 <LI TYPE="circle">java.lang.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Exception.html?is-external=true" title="class or interface in java.lang"><B>Exception</B></A><UL>
 <LI TYPE="circle">java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io"><B>IOException</B></A><UL>
-<LI TYPE="circle">com.google.gson.stream.<A HREF="com/google/gson/stream/MalformedJsonException.html" title="class in com.google.gson.stream"><B>MalformedJsonException</B></A></UL>
+<LI TYPE="circle">com.solidfire.gson.stream.<A HREF="com/google/gson/stream/MalformedJsonException.html" title="class in com.solidfire.gson.stream"><B>MalformedJsonException</B></A></UL>
 <LI TYPE="circle">java.lang.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/RuntimeException.html?is-external=true" title="class or interface in java.lang"><B>RuntimeException</B></A><UL>
 <LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/JsonParseException.html" title="class in com.google.gson"><B>JsonParseException</B></A><UL>
 <LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/JsonIOException.html" title="class in com.google.gson"><B>JsonIOException</B></A><LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/JsonSyntaxException.html" title="class in com.google.gson"><B>JsonSyntaxException</B></A></UL>
 </UL>
 </UL>
 </UL>
-<LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/TypeAdapter.html" title="class in com.google.gson"><B>TypeAdapter</B></A>&lt;T&gt;<LI TYPE="circle">com.google.gson.reflect.<A HREF="com/google/gson/reflect/TypeToken.html" title="class in com.google.gson.reflect"><B>TypeToken</B></A>&lt;T&gt;</UL>
+<LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/TypeAdapter.html" title="class in com.google.gson"><B>TypeAdapter</B></A>&lt;T&gt;<LI TYPE="circle">com.solidfire.gson.reflect.<A HREF="com/google/gson/reflect/TypeToken.html" title="class in com.solidfire.gson.reflect"><B>TypeToken</B></A>&lt;T&gt;</UL>
 </UL>
 <H2>
 Interface Hierarchy
@@ -134,7 +134,7 @@ <H2>
 <LI TYPE="circle">java.lang.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Enum.html?is-external=true" title="class or interface in java.lang"><B>Enum</B></A>&lt;E&gt; (implements java.lang.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Comparable.html?is-external=true" title="class or interface in java.lang">Comparable</A>&lt;T&gt;, java.io.<A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/Serializable.html?is-external=true" title="class or interface in java.io">Serializable</A>)
 <UL>
 <LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/LongSerializationPolicy.html" title="enum in com.google.gson"><B>LongSerializationPolicy</B></A><LI TYPE="circle">com.google.gson.<A HREF="com/google/gson/FieldNamingPolicy.html" title="enum in com.google.gson"><B>FieldNamingPolicy</B></A> (implements com.google.gson.<A HREF="com/google/gson/FieldNamingStrategy.html" title="interface in com.google.gson">FieldNamingStrategy</A>)
-<LI TYPE="circle">com.google.gson.stream.<A HREF="com/google/gson/stream/JsonToken.html" title="enum in com.google.gson.stream"><B>JsonToken</B></A></UL>
+<LI TYPE="circle">com.solidfire.gson.stream.<A HREF="com/google/gson/stream/JsonToken.html" title="enum in com.solidfire.gson.stream"><B>JsonToken</B></A></UL>
 </UL>
 </UL>
 <HR>
diff --git a/gson/docs/javadocs/package-list b/gson/docs/javadocs/package-list
index cdd3c1daa..1e9cbac84 100644
--- a/gson/docs/javadocs/package-list
+++ b/gson/docs/javadocs/package-list
@@ -1,4 +1,4 @@
 com.google.gson
 com.google.gson.annotations
-com.google.gson.reflect
-com.google.gson.stream
+com.solidfire.gson.reflect
+com.solidfire.gson.stream
diff --git a/gson/docs/javadocs/serialized-form.html b/gson/docs/javadocs/serialized-form.html
index bcec40944..c7e594429 100644
--- a/gson/docs/javadocs/serialized-form.html
+++ b/gson/docs/javadocs/serialized-form.html
@@ -94,11 +94,11 @@ <H1>
 </TABLE>
 
 <P>
-<A NAME="com.google.gson.JsonIOException"><!-- --></A>
+<A NAME="com.solidfire.gson.JsonIOException"><!-- --></A>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableSubHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-<B>Class <A HREF="com/google/gson/JsonIOException.html" title="class in com.google.gson">com.google.gson.JsonIOException</A> extends <A HREF="com/google/gson/JsonParseException.html" title="class in com.google.gson">JsonParseException</A> implements Serializable</B></FONT></TH>
+<B>Class <A HREF="com/google/gson/JsonIOException.html" title="class in com.google.gson">com.solidfire.gson.JsonIOException</A> extends <A HREF="com/google/gson/JsonParseException.html" title="class in com.google.gson">JsonParseException</A> implements Serializable</B></FONT></TH>
 </TR>
 </TABLE>
 
@@ -108,11 +108,11 @@ <H1>
 <P>
 
 <P>
-<A NAME="com.google.gson.JsonParseException"><!-- --></A>
+<A NAME="com.solidfire.gson.JsonParseException"><!-- --></A>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableSubHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-<B>Class <A HREF="com/google/gson/JsonParseException.html" title="class in com.google.gson">com.google.gson.JsonParseException</A> extends <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/RuntimeException.html?is-external=true" title="class or interface in java.lang">RuntimeException</A> implements Serializable</B></FONT></TH>
+<B>Class <A HREF="com/google/gson/JsonParseException.html" title="class in com.google.gson">com.solidfire.gson.JsonParseException</A> extends <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/RuntimeException.html?is-external=true" title="class or interface in java.lang">RuntimeException</A> implements Serializable</B></FONT></TH>
 </TR>
 </TABLE>
 
@@ -122,11 +122,11 @@ <H1>
 <P>
 
 <P>
-<A NAME="com.google.gson.JsonSyntaxException"><!-- --></A>
+<A NAME="com.solidfire.gson.JsonSyntaxException"><!-- --></A>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableSubHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-<B>Class <A HREF="com/google/gson/JsonSyntaxException.html" title="class in com.google.gson">com.google.gson.JsonSyntaxException</A> extends <A HREF="com/google/gson/JsonParseException.html" title="class in com.google.gson">JsonParseException</A> implements Serializable</B></FONT></TH>
+<B>Class <A HREF="com/google/gson/JsonSyntaxException.html" title="class in com.google.gson">com.solidfire.gson.JsonSyntaxException</A> extends <A HREF="com/google/gson/JsonParseException.html" title="class in com.google.gson">JsonParseException</A> implements Serializable</B></FONT></TH>
 </TR>
 </TABLE>
 
@@ -139,16 +139,16 @@ <H1>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableSubHeadingColor">
 <TH ALIGN="center"><FONT SIZE="+2">
-<B>Package</B> <B>com.google.gson.stream</B></FONT></TH>
+<B>Package</B> <B>com.solidfire.gson.stream</B></FONT></TH>
 </TR>
 </TABLE>
 
 <P>
-<A NAME="com.google.gson.stream.MalformedJsonException"><!-- --></A>
+<A NAME="com.solidfire.gson.stream.MalformedJsonException"><!-- --></A>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 <TR BGCOLOR="#CCCCFF" CLASS="TableSubHeadingColor">
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
-<B>Class <A HREF="com/google/gson/stream/MalformedJsonException.html" title="class in com.google.gson.stream">com.google.gson.stream.MalformedJsonException</A> extends <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A> implements Serializable</B></FONT></TH>
+<B>Class <A HREF="com/google/gson/stream/MalformedJsonException.html" title="class in com.solidfire.gson.stream">com.solidfire.gson.stream.MalformedJsonException</A> extends <A HREF="http://docs.oracle.com/javase/1.5.0/docs/api/java/io/IOException.html?is-external=true" title="class or interface in java.io">IOException</A> implements Serializable</B></FONT></TH>
 </TR>
 </TABLE>
 
diff --git a/gson/pom.xml b/gson/pom.xml
index 62cf161c6..8a88aea38 100644
--- a/gson/pom.xml
+++ b/gson/pom.xml
@@ -2,7 +2,7 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.google.code.gson</groupId>
+    <groupId>com.solidfire.code.gson</groupId>
     <artifactId>gson-parent</artifactId>
     <version>2.6.2</version>
   </parent>
@@ -24,8 +24,8 @@
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-javadoc-plugin</artifactId>
         <configuration>
-          <includePackageNames>com.google.gson</includePackageNames>
-          <excludePackageNames>com.google.gson.internal:com.google.gson.internal.bind</excludePackageNames>
+          <includePackageNames>com.solidfire.gson</includePackageNames>
+          <excludePackageNames>com.solidfire.gson.internal:com.solidfire.gson.internal.bind</excludePackageNames>
           <links>
             <link>http://docs.oracle.com/javase/6/docs/api/</link>
           </links>
diff --git a/gson/src/main/java/com/google/gson/package-info.java b/gson/src/main/java/com/google/gson/package-info.java
deleted file mode 100644
index 428e280cf..000000000
--- a/gson/src/main/java/com/google/gson/package-info.java
+++ /dev/null
@@ -1,11 +0,0 @@
-/**
- * This package provides the {@link com.google.gson.Gson} class to convert Json to Java and
- * vice-versa.
- *
- * <p>The primary class to use is {@link com.google.gson.Gson} which can be constructed with
- * {@code new Gson()} (using default settings) or by using {@link com.google.gson.GsonBuilder}
- * (to configure various options such as using versioning and so on).</p>
- *
- * @author Inderjeet Singh, Joel Leitch
- */
-package com.google.gson;
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java b/gson/src/main/java/com/solidfire/gson/DefaultDateTypeAdapter.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
rename to gson/src/main/java/com/solidfire/gson/DefaultDateTypeAdapter.java
index 81700e638..7e3ccdf59 100644
--- a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
+++ b/gson/src/main/java/com/solidfire/gson/DefaultDateTypeAdapter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
 import java.lang.reflect.Type;
 import java.sql.Timestamp;
@@ -24,9 +24,8 @@
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Locale;
-import java.util.TimeZone;
 
-import com.google.gson.internal.bind.util.ISO8601Utils;
+import com.solidfire.gson.internal.bind.util.ISO8601Utils;
 
 /**
  * This type adapter supports three subclasses of date: Date, Timestamp, and
diff --git a/gson/src/main/java/com/google/gson/ExclusionStrategy.java b/gson/src/main/java/com/solidfire/gson/ExclusionStrategy.java
similarity index 99%
rename from gson/src/main/java/com/google/gson/ExclusionStrategy.java
rename to gson/src/main/java/com/solidfire/gson/ExclusionStrategy.java
index 6a3f43fb5..e8fd0490f 100644
--- a/gson/src/main/java/com/google/gson/ExclusionStrategy.java
+++ b/gson/src/main/java/com/solidfire/gson/ExclusionStrategy.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
 /**
  * A strategy (or policy) definition that is used to decide whether or not a field or top-level
diff --git a/gson/src/main/java/com/google/gson/FieldAttributes.java b/gson/src/main/java/com/solidfire/gson/FieldAttributes.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/FieldAttributes.java
rename to gson/src/main/java/com/solidfire/gson/FieldAttributes.java
index bcabff14a..f32869a86 100644
--- a/gson/src/main/java/com/google/gson/FieldAttributes.java
+++ b/gson/src/main/java/com/solidfire/gson/FieldAttributes.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
-import com.google.gson.internal.$Gson$Preconditions;
+import com.solidfire.gson.internal.$Gson$Preconditions;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
diff --git a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java b/gson/src/main/java/com/solidfire/gson/FieldNamingPolicy.java
similarity index 96%
rename from gson/src/main/java/com/google/gson/FieldNamingPolicy.java
rename to gson/src/main/java/com/solidfire/gson/FieldNamingPolicy.java
index 3b325a4fd..594d1d629 100644
--- a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java
+++ b/gson/src/main/java/com/solidfire/gson/FieldNamingPolicy.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
 import java.lang.reflect.Field;
 import java.util.Locale;
 
 /**
  * An enumeration that defines a few standard naming conventions for JSON field names.
- * This enumeration should be used in conjunction with {@link com.google.gson.GsonBuilder}
- * to configure a {@link com.google.gson.Gson} instance to properly translate Java field
+ * This enumeration should be used in conjunction with {@link GsonBuilder}
+ * to configure a {@link Gson} instance to properly translate Java field
  * names into the desired JSON field names.
  *
  * @author Inderjeet Singh
diff --git a/gson/src/main/java/com/google/gson/FieldNamingStrategy.java b/gson/src/main/java/com/solidfire/gson/FieldNamingStrategy.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/FieldNamingStrategy.java
rename to gson/src/main/java/com/solidfire/gson/FieldNamingStrategy.java
index 9be453ad1..0f9ce8e94 100644
--- a/gson/src/main/java/com/google/gson/FieldNamingStrategy.java
+++ b/gson/src/main/java/com/solidfire/gson/FieldNamingStrategy.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
 import java.lang.reflect.Field;
 
diff --git a/gson/src/main/java/com/google/gson/Gson.java b/gson/src/main/java/com/solidfire/gson/Gson.java
similarity index 95%
rename from gson/src/main/java/com/google/gson/Gson.java
rename to gson/src/main/java/com/solidfire/gson/Gson.java
index 106d24854..48fd5a834 100644
--- a/gson/src/main/java/com/google/gson/Gson.java
+++ b/gson/src/main/java/com/solidfire/gson/Gson.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
 import java.io.EOFException;
 import java.io.IOException;
@@ -33,27 +33,29 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicLongArray;
 
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.Excluder;
-import com.google.gson.internal.Primitives;
-import com.google.gson.internal.Streams;
-import com.google.gson.internal.bind.ArrayTypeAdapter;
-import com.google.gson.internal.bind.CollectionTypeAdapterFactory;
-import com.google.gson.internal.bind.DateTypeAdapter;
-import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
-import com.google.gson.internal.bind.JsonTreeReader;
-import com.google.gson.internal.bind.JsonTreeWriter;
-import com.google.gson.internal.bind.MapTypeAdapterFactory;
-import com.google.gson.internal.bind.ObjectTypeAdapter;
-import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
-import com.google.gson.internal.bind.SqlDateTypeAdapter;
-import com.google.gson.internal.bind.TimeTypeAdapter;
-import com.google.gson.internal.bind.TypeAdapters;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
-import com.google.gson.stream.MalformedJsonException;
+import com.solidfire.gson.annotations.Expose;
+import com.solidfire.gson.annotations.Since;
+import com.solidfire.gson.internal.ConstructorConstructor;
+import com.solidfire.gson.internal.Excluder;
+import com.solidfire.gson.internal.Primitives;
+import com.solidfire.gson.internal.Streams;
+import com.solidfire.gson.internal.bind.ArrayTypeAdapter;
+import com.solidfire.gson.internal.bind.CollectionTypeAdapterFactory;
+import com.solidfire.gson.internal.bind.DateTypeAdapter;
+import com.solidfire.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
+import com.solidfire.gson.internal.bind.JsonTreeReader;
+import com.solidfire.gson.internal.bind.JsonTreeWriter;
+import com.solidfire.gson.internal.bind.MapTypeAdapterFactory;
+import com.solidfire.gson.internal.bind.ObjectTypeAdapter;
+import com.solidfire.gson.internal.bind.ReflectiveTypeAdapterFactory;
+import com.solidfire.gson.internal.bind.SqlDateTypeAdapter;
+import com.solidfire.gson.internal.bind.TimeTypeAdapter;
+import com.solidfire.gson.internal.bind.TypeAdapters;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonToken;
+import com.solidfire.gson.stream.JsonWriter;
+import com.solidfire.gson.stream.MalformedJsonException;
 
 /**
  * This is the main class for using Gson. Gson is typically used by first constructing a
@@ -93,7 +95,7 @@
  * <p>See the <a href="https://sites.google.com/site/gson/gson-user-guide">Gson User Guide</a>
  * for a more complete set of examples.</p>
  *
- * @see com.google.gson.reflect.TypeToken
+ * @see TypeToken
  *
  * @author Inderjeet Singh
  * @author Joel Leitch
@@ -168,10 +170,10 @@
    *   ignores the millisecond portion of the date during serialization. You can change
    *   this by invoking {@link GsonBuilder#setDateFormat(int)} or
    *   {@link GsonBuilder#setDateFormat(String)}. </li>
-   *   <li>By default, Gson ignores the {@link com.google.gson.annotations.Expose} annotation.
+   *   <li>By default, Gson ignores the {@link Expose} annotation.
    *   You can enable Gson to serialize/deserialize only those fields marked with this annotation
    *   through {@link GsonBuilder#excludeFieldsWithoutExposeAnnotation()}. </li>
-   *   <li>By default, Gson ignores the {@link com.google.gson.annotations.Since} annotation. You
+   *   <li>By default, Gson ignores the {@link Since} annotation. You
    *   can enable Gson to use this annotation through {@link GsonBuilder#setVersion(double)}.</li>
    *   <li>The default field naming policy for the output Json is same as in Java. So, a Java class
    *   field <code>versionNumber</code> will be output as <code>&quot;versionNumber&quot;</code> in
@@ -541,7 +543,7 @@ public JsonElement toJsonTree(Object src) {
    *
    * @param src the object for which JSON representation is to be created
    * @param typeOfSrc The specific genericized type of src. You can obtain
-   * this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
+   * this type by using the {@link TypeToken} class. For example,
    * to get the type for {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -583,7 +585,7 @@ public String toJson(Object src) {
    *
    * @param src the object for which JSON representation is to be created
    * @param typeOfSrc The specific genericized type of src. You can obtain
-   * this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
+   * this type by using the {@link TypeToken} class. For example,
    * to get the type for {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -625,7 +627,7 @@ public void toJson(Object src, Appendable writer) throws JsonIOException {
    *
    * @param src the object for which JSON representation is to be created
    * @param typeOfSrc The specific genericized type of src. You can obtain
-   * this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
+   * this type by using the {@link TypeToken} class. For example,
    * to get the type for {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -775,7 +777,7 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce
    * @param <T> the type of the desired object
    * @param json the string from which the object is to be deserialized
    * @param typeOfT The specific genericized type of src. You can obtain this type by using the
-   * {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
+   * {@link TypeToken} class. For example, to get the type for
    * {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -828,7 +830,7 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce
    * @param <T> the type of the desired object
    * @param json the reader producing Json from which the object is to be deserialized
    * @param typeOfT The specific genericized type of src. You can obtain this type by using the
-   * {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
+   * {@link TypeToken} class. For example, to get the type for
    * {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -927,7 +929,7 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {
    * @param json the root of the parse tree of {@link JsonElement}s from which the object is to
    * be deserialized
    * @param typeOfT The specific genericized type of src. You can obtain this type by using the
-   * {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
+   * {@link TypeToken} class. For example, to get the type for
    * {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
diff --git a/gson/src/main/java/com/google/gson/GsonBuilder.java b/gson/src/main/java/com/solidfire/gson/GsonBuilder.java
similarity index 96%
rename from gson/src/main/java/com/google/gson/GsonBuilder.java
rename to gson/src/main/java/com/solidfire/gson/GsonBuilder.java
index b258e22fa..144fc403a 100644
--- a/gson/src/main/java/com/google/gson/GsonBuilder.java
+++ b/gson/src/main/java/com/solidfire/gson/GsonBuilder.java
@@ -14,9 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
-import com.google.gson.stream.JsonReader;
+import com.solidfire.gson.annotations.Expose;
+import com.solidfire.gson.stream.JsonReader;
 import java.lang.reflect.Type;
 import java.sql.Timestamp;
 import java.text.DateFormat;
@@ -27,18 +28,18 @@
 import java.util.List;
 import java.util.Map;
 
-import com.google.gson.internal.$Gson$Preconditions;
-import com.google.gson.internal.Excluder;
-import com.google.gson.internal.bind.TypeAdapters;
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.internal.$Gson$Preconditions;
+import com.solidfire.gson.internal.Excluder;
+import com.solidfire.gson.internal.bind.TypeAdapters;
+import com.solidfire.gson.reflect.TypeToken;
 
-import static com.google.gson.Gson.DEFAULT_COMPLEX_MAP_KEYS;
-import static com.google.gson.Gson.DEFAULT_ESCAPE_HTML;
-import static com.google.gson.Gson.DEFAULT_JSON_NON_EXECUTABLE;
-import static com.google.gson.Gson.DEFAULT_LENIENT;
-import static com.google.gson.Gson.DEFAULT_PRETTY_PRINT;
-import static com.google.gson.Gson.DEFAULT_SERIALIZE_NULLS;
-import static com.google.gson.Gson.DEFAULT_SPECIALIZE_FLOAT_VALUES;
+import static com.solidfire.gson.Gson.DEFAULT_COMPLEX_MAP_KEYS;
+import static com.solidfire.gson.Gson.DEFAULT_ESCAPE_HTML;
+import static com.solidfire.gson.Gson.DEFAULT_JSON_NON_EXECUTABLE;
+import static com.solidfire.gson.Gson.DEFAULT_LENIENT;
+import static com.solidfire.gson.Gson.DEFAULT_PRETTY_PRINT;
+import static com.solidfire.gson.Gson.DEFAULT_SERIALIZE_NULLS;
+import static com.solidfire.gson.Gson.DEFAULT_SPECIALIZE_FLOAT_VALUES;
 
 /**
  * <p>Use this builder to construct a {@link Gson} instance when you need to set configuration
@@ -147,7 +148,7 @@ public GsonBuilder generateNonExecutableJson() {
 
   /**
    * Configures Gson to exclude all fields from consideration for serialization or deserialization
-   * that do not have the {@link com.google.gson.annotations.Expose} annotation.
+   * that do not have the {@link Expose} annotation.
    *
    * @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern
    */
diff --git a/gson/src/main/java/com/google/gson/InstanceCreator.java b/gson/src/main/java/com/solidfire/gson/InstanceCreator.java
similarity index 99%
rename from gson/src/main/java/com/google/gson/InstanceCreator.java
rename to gson/src/main/java/com/solidfire/gson/InstanceCreator.java
index d5096a07a..3aec44180 100644
--- a/gson/src/main/java/com/google/gson/InstanceCreator.java
+++ b/gson/src/main/java/com/solidfire/gson/InstanceCreator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
 import java.lang.reflect.Type;
 
diff --git a/gson/src/main/java/com/google/gson/JsonArray.java b/gson/src/main/java/com/solidfire/gson/JsonArray.java
similarity index 99%
rename from gson/src/main/java/com/google/gson/JsonArray.java
rename to gson/src/main/java/com/solidfire/gson/JsonArray.java
index 19299d14e..630f6b2c7 100644
--- a/gson/src/main/java/com/google/gson/JsonArray.java
+++ b/gson/src/main/java/com/solidfire/gson/JsonArray.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
diff --git a/gson/src/main/java/com/google/gson/JsonDeserializationContext.java b/gson/src/main/java/com/solidfire/gson/JsonDeserializationContext.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/JsonDeserializationContext.java
rename to gson/src/main/java/com/solidfire/gson/JsonDeserializationContext.java
index 00c750543..80a100d4c 100644
--- a/gson/src/main/java/com/google/gson/JsonDeserializationContext.java
+++ b/gson/src/main/java/com/solidfire/gson/JsonDeserializationContext.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
 import java.lang.reflect.Type;
 
diff --git a/gson/src/main/java/com/google/gson/JsonDeserializer.java b/gson/src/main/java/com/solidfire/gson/JsonDeserializer.java
similarity index 99%
rename from gson/src/main/java/com/google/gson/JsonDeserializer.java
rename to gson/src/main/java/com/solidfire/gson/JsonDeserializer.java
index 0589eb284..2b01a96a3 100644
--- a/gson/src/main/java/com/google/gson/JsonDeserializer.java
+++ b/gson/src/main/java/com/solidfire/gson/JsonDeserializer.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
 import java.lang.reflect.Type;
 
diff --git a/gson/src/main/java/com/google/gson/JsonElement.java b/gson/src/main/java/com/solidfire/gson/JsonElement.java
similarity index 99%
rename from gson/src/main/java/com/google/gson/JsonElement.java
rename to gson/src/main/java/com/solidfire/gson/JsonElement.java
index d9cd91846..708d09c76 100644
--- a/gson/src/main/java/com/google/gson/JsonElement.java
+++ b/gson/src/main/java/com/solidfire/gson/JsonElement.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
-import com.google.gson.internal.Streams;
-import com.google.gson.stream.JsonWriter;
+import com.solidfire.gson.internal.Streams;
+import com.solidfire.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.io.StringWriter;
 import java.math.BigDecimal;
diff --git a/gson/src/main/java/com/google/gson/JsonIOException.java b/gson/src/main/java/com/solidfire/gson/JsonIOException.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/JsonIOException.java
rename to gson/src/main/java/com/solidfire/gson/JsonIOException.java
index dfeccd8ed..b372153bd 100644
--- a/gson/src/main/java/com/google/gson/JsonIOException.java
+++ b/gson/src/main/java/com/solidfire/gson/JsonIOException.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson;
+package com.solidfire.gson;
 
 /**
  * This exception is raised when Gson was unable to read an input stream
diff --git a/gson/src/main/java/com/google/gson/JsonNull.java b/gson/src/main/java/com/solidfire/gson/JsonNull.java
similarity index 94%
rename from gson/src/main/java/com/google/gson/JsonNull.java
rename to gson/src/main/java/com/solidfire/gson/JsonNull.java
index 56883369e..4b468ab86 100755
--- a/gson/src/main/java/com/google/gson/JsonNull.java
+++ b/gson/src/main/java/com/solidfire/gson/JsonNull.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
 /**
  * A class representing a Json {@code null} value.
diff --git a/gson/src/main/java/com/google/gson/JsonObject.java b/gson/src/main/java/com/solidfire/gson/JsonObject.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/JsonObject.java
rename to gson/src/main/java/com/solidfire/gson/JsonObject.java
index 78c7a177a..123ffa5b9 100644
--- a/gson/src/main/java/com/google/gson/JsonObject.java
+++ b/gson/src/main/java/com/solidfire/gson/JsonObject.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
-import com.google.gson.internal.LinkedTreeMap;
+import com.solidfire.gson.internal.LinkedTreeMap;
 
 import java.util.Map;
 import java.util.Set;
diff --git a/gson/src/main/java/com/google/gson/JsonParseException.java b/gson/src/main/java/com/solidfire/gson/JsonParseException.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/JsonParseException.java
rename to gson/src/main/java/com/solidfire/gson/JsonParseException.java
index 084f66127..075041e7f 100644
--- a/gson/src/main/java/com/google/gson/JsonParseException.java
+++ b/gson/src/main/java/com/solidfire/gson/JsonParseException.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
 /**
  * This exception is raised if there is a serious issue that occurs during parsing of a Json
diff --git a/gson/src/main/java/com/google/gson/JsonParser.java b/gson/src/main/java/com/solidfire/gson/JsonParser.java
similarity index 90%
rename from gson/src/main/java/com/google/gson/JsonParser.java
rename to gson/src/main/java/com/solidfire/gson/JsonParser.java
index a8ae337ba..6c93d1102 100755
--- a/gson/src/main/java/com/google/gson/JsonParser.java
+++ b/gson/src/main/java/com/solidfire/gson/JsonParser.java
@@ -13,16 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson;
+package com.solidfire.gson;
 
 import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
 
-import com.google.gson.internal.Streams;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.MalformedJsonException;
+import com.solidfire.gson.internal.Streams;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonToken;
+import com.solidfire.gson.stream.MalformedJsonException;
 
 /**
  * A parser to parse Json into a parse tree of {@link JsonElement}s
diff --git a/gson/src/main/java/com/google/gson/JsonPrimitive.java b/gson/src/main/java/com/solidfire/gson/JsonPrimitive.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/JsonPrimitive.java
rename to gson/src/main/java/com/solidfire/gson/JsonPrimitive.java
index e2443d435..6fbfafc38 100644
--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java
+++ b/gson/src/main/java/com/solidfire/gson/JsonPrimitive.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
-import com.google.gson.internal.$Gson$Preconditions;
-import com.google.gson.internal.LazilyParsedNumber;
+import com.solidfire.gson.internal.$Gson$Preconditions;
+import com.solidfire.gson.internal.LazilyParsedNumber;
 
 /**
  * A class representing a Json primitive value. A primitive value
diff --git a/gson/src/main/java/com/google/gson/JsonSerializationContext.java b/gson/src/main/java/com/solidfire/gson/JsonSerializationContext.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/JsonSerializationContext.java
rename to gson/src/main/java/com/solidfire/gson/JsonSerializationContext.java
index ca3ec4f90..54402797a 100644
--- a/gson/src/main/java/com/google/gson/JsonSerializationContext.java
+++ b/gson/src/main/java/com/solidfire/gson/JsonSerializationContext.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
 import java.lang.reflect.Type;
 
diff --git a/gson/src/main/java/com/google/gson/JsonSerializer.java b/gson/src/main/java/com/solidfire/gson/JsonSerializer.java
similarity index 96%
rename from gson/src/main/java/com/google/gson/JsonSerializer.java
rename to gson/src/main/java/com/solidfire/gson/JsonSerializer.java
index a60500336..4361dbf24 100644
--- a/gson/src/main/java/com/google/gson/JsonSerializer.java
+++ b/gson/src/main/java/com/solidfire/gson/JsonSerializer.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
 import java.lang.reflect.Type;
 
 /**
  * Interface representing a custom serializer for Json. You should write a custom serializer, if
  * you are not happy with the default serialization done by Gson. You will also need to register
- * this serializer through {@link com.google.gson.GsonBuilder#registerTypeAdapter(Type, Object)}.
+ * this serializer through {@link GsonBuilder#registerTypeAdapter(Type, Object)}.
  *
  * <p>Let us look at example where defining a serializer will be useful. The {@code Id} class
  * defined below has two fields: {@code clazz} and {@code value}.</p>
diff --git a/gson/src/main/java/com/google/gson/JsonStreamParser.java b/gson/src/main/java/com/solidfire/gson/JsonStreamParser.java
similarity index 94%
rename from gson/src/main/java/com/google/gson/JsonStreamParser.java
rename to gson/src/main/java/com/solidfire/gson/JsonStreamParser.java
index f0438db32..ee461a7fb 100644
--- a/gson/src/main/java/com/google/gson/JsonStreamParser.java
+++ b/gson/src/main/java/com/solidfire/gson/JsonStreamParser.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson;
+package com.solidfire.gson;
 
 import java.io.EOFException;
 import java.io.IOException;
@@ -22,10 +22,10 @@
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
-import com.google.gson.internal.Streams;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.MalformedJsonException;
+import com.solidfire.gson.internal.Streams;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonToken;
+import com.solidfire.gson.stream.MalformedJsonException;
 
 /**
  * A streaming parser that allows reading of multiple {@link JsonElement}s from the specified reader
diff --git a/gson/src/main/java/com/google/gson/JsonSyntaxException.java b/gson/src/main/java/com/solidfire/gson/JsonSyntaxException.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/JsonSyntaxException.java
rename to gson/src/main/java/com/solidfire/gson/JsonSyntaxException.java
index 17c1d3d3a..dfc68efb4 100644
--- a/gson/src/main/java/com/google/gson/JsonSyntaxException.java
+++ b/gson/src/main/java/com/solidfire/gson/JsonSyntaxException.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson;
+package com.solidfire.gson;
 
 /**
  * This exception is raised when Gson attempts to read (or write) a malformed
diff --git a/gson/src/main/java/com/google/gson/LongSerializationPolicy.java b/gson/src/main/java/com/solidfire/gson/LongSerializationPolicy.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/LongSerializationPolicy.java
rename to gson/src/main/java/com/solidfire/gson/LongSerializationPolicy.java
index 7b732bab7..e96162ba7 100644
--- a/gson/src/main/java/com/google/gson/LongSerializationPolicy.java
+++ b/gson/src/main/java/com/solidfire/gson/LongSerializationPolicy.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
 /**
  * Defines the expected format for a {@code long} or {@code Long} type when its serialized.
diff --git a/gson/src/main/java/com/google/gson/TreeTypeAdapter.java b/gson/src/main/java/com/solidfire/gson/TreeTypeAdapter.java
similarity index 94%
rename from gson/src/main/java/com/google/gson/TreeTypeAdapter.java
rename to gson/src/main/java/com/solidfire/gson/TreeTypeAdapter.java
index 5b7305edc..8e83ba5a6 100644
--- a/gson/src/main/java/com/google/gson/TreeTypeAdapter.java
+++ b/gson/src/main/java/com/solidfire/gson/TreeTypeAdapter.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
-import com.google.gson.internal.$Gson$Preconditions;
-import com.google.gson.internal.Streams;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+import com.solidfire.gson.internal.$Gson$Preconditions;
+import com.solidfire.gson.internal.Streams;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonWriter;
 import java.io.IOException;
 
 /**
diff --git a/gson/src/main/java/com/google/gson/TypeAdapter.java b/gson/src/main/java/com/solidfire/gson/TypeAdapter.java
similarity index 96%
rename from gson/src/main/java/com/google/gson/TypeAdapter.java
rename to gson/src/main/java/com/solidfire/gson/TypeAdapter.java
index 4646d271d..644433227 100644
--- a/gson/src/main/java/com/google/gson/TypeAdapter.java
+++ b/gson/src/main/java/com/solidfire/gson/TypeAdapter.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
-import com.google.gson.internal.bind.JsonTreeWriter;
-import com.google.gson.internal.bind.JsonTreeReader;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+import com.solidfire.gson.internal.bind.JsonTreeWriter;
+import com.solidfire.gson.internal.bind.JsonTreeReader;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonToken;
+import com.solidfire.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
@@ -131,7 +131,7 @@
    * Unlike Gson's similar {@link Gson#toJson(JsonElement, Appendable) toJson}
    * method, this write is strict. Create a {@link
    * JsonWriter#setLenient(boolean) lenient} {@code JsonWriter} and call
-   * {@link #write(com.google.gson.stream.JsonWriter, Object)} for lenient
+   * {@link #write(JsonWriter, Object)} for lenient
    * writing.
    *
    * @param value the Java object to convert. May be null.
@@ -205,7 +205,7 @@ public final void toJson(Writer out, T value) throws IOException {
    * Converts {@code value} to a JSON document. Unlike Gson's similar {@link
    * Gson#toJson(Object) toJson} method, this write is strict. Create a {@link
    * JsonWriter#setLenient(boolean) lenient} {@code JsonWriter} and call
-   * {@link #write(com.google.gson.stream.JsonWriter, Object)} for lenient
+   * {@link #write(JsonWriter, Object)} for lenient
    * writing.
    *
    * @param value the Java object to convert. May be null.
diff --git a/gson/src/main/java/com/google/gson/TypeAdapterFactory.java b/gson/src/main/java/com/solidfire/gson/TypeAdapterFactory.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/TypeAdapterFactory.java
rename to gson/src/main/java/com/solidfire/gson/TypeAdapterFactory.java
index e12a72dcc..cb596460c 100644
--- a/gson/src/main/java/com/google/gson/TypeAdapterFactory.java
+++ b/gson/src/main/java/com/solidfire/gson/TypeAdapterFactory.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.reflect.TypeToken;
 
 /**
  * Creates type adapters for set of related types. Type adapter factories are
@@ -80,7 +80,7 @@
  * mapping from lowercase name to enum value is computed eagerly.
  *
  * <p>As with type adapters, factories must be <i>registered</i> with a {@link
- * com.google.gson.GsonBuilder} for them to take effect: <pre>   {@code
+ * GsonBuilder} for them to take effect: <pre>   {@code
  *
  *  GsonBuilder builder = new GsonBuilder();
  *  builder.registerTypeAdapterFactory(new LowercaseEnumTypeAdapterFactory());
diff --git a/gson/src/main/java/com/google/gson/annotations/Expose.java b/gson/src/main/java/com/solidfire/gson/annotations/Expose.java
similarity index 91%
rename from gson/src/main/java/com/google/gson/annotations/Expose.java
rename to gson/src/main/java/com/solidfire/gson/annotations/Expose.java
index 1b9c70df0..70bc69848 100644
--- a/gson/src/main/java/com/google/gson/annotations/Expose.java
+++ b/gson/src/main/java/com/solidfire/gson/annotations/Expose.java
@@ -14,7 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.annotations;
+package com.solidfire.gson.annotations;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -25,9 +28,9 @@
  * An annotation that indicates this member should be exposed for JSON
  * serialization or deserialization.
  *
- * <p>This annotation has no effect unless you build {@link com.google.gson.Gson}
- * with a {@link com.google.gson.GsonBuilder} and invoke
- * {@link com.google.gson.GsonBuilder#excludeFieldsWithoutExposeAnnotation()}
+ * <p>This annotation has no effect unless you build {@link Gson}
+ * with a {@link GsonBuilder} and invoke
+ * {@link GsonBuilder#excludeFieldsWithoutExposeAnnotation()}
  * method.</p>
  *
  * <p>Here is an example of how this annotation is meant to be used:
diff --git a/gson/src/main/java/com/google/gson/annotations/JsonAdapter.java b/gson/src/main/java/com/solidfire/gson/annotations/JsonAdapter.java
similarity index 93%
rename from gson/src/main/java/com/google/gson/annotations/JsonAdapter.java
rename to gson/src/main/java/com/solidfire/gson/annotations/JsonAdapter.java
index 2ee3e682d..d2f5c25da 100644
--- a/gson/src/main/java/com/google/gson/annotations/JsonAdapter.java
+++ b/gson/src/main/java/com/solidfire/gson/annotations/JsonAdapter.java
@@ -14,10 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.annotations;
+package com.solidfire.gson.annotations;
 
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -72,7 +73,7 @@
  * </pre>
  *
  * It's possible to specify different type adapters on a field, that
- * field's type, and in the {@link com.google.gson.GsonBuilder}. Field
+ * field's type, and in the {@link GsonBuilder}. Field
  * annotations take precedence over {@code GsonBuilder}-registered type
  * adapters, which in turn take precedence over annotated types.
  *
diff --git a/gson/src/main/java/com/google/gson/annotations/SerializedName.java b/gson/src/main/java/com/solidfire/gson/annotations/SerializedName.java
similarity index 89%
rename from gson/src/main/java/com/google/gson/annotations/SerializedName.java
rename to gson/src/main/java/com/solidfire/gson/annotations/SerializedName.java
index 363b95a35..669ac41c1 100644
--- a/gson/src/main/java/com/google/gson/annotations/SerializedName.java
+++ b/gson/src/main/java/com/solidfire/gson/annotations/SerializedName.java
@@ -14,7 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.annotations;
+package com.solidfire.gson.annotations;
+
+import com.solidfire.gson.FieldNamingPolicy;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -25,10 +29,10 @@
  * An annotation that indicates this member should be serialized to JSON with
  * the provided name value as its field name.
  *
- * <p>This annotation will override any {@link com.google.gson.FieldNamingPolicy}, including
- * the default field naming policy, that may have been set on the {@link com.google.gson.Gson}
+ * <p>This annotation will override any {@link FieldNamingPolicy}, including
+ * the default field naming policy, that may have been set on the {@link Gson}
  * instance.  A different naming policy can set using the {@code GsonBuilder} class.  See
- * {@link com.google.gson.GsonBuilder#setFieldNamingPolicy(com.google.gson.FieldNamingPolicy)}
+ * {@link GsonBuilder#setFieldNamingPolicy(FieldNamingPolicy)}
  * for more information.</p>
  *
  * <p>Here is an example of how this annotation is meant to be used:</p>
@@ -71,7 +75,7 @@
  * </pre>
  * Note that MyClass.b is now deserialized from either name1, name2 or name3.
  *
- * @see com.google.gson.FieldNamingPolicy
+ * @see FieldNamingPolicy
  *
  * @author Inderjeet Singh
  * @author Joel Leitch
diff --git a/gson/src/main/java/com/google/gson/annotations/Since.java b/gson/src/main/java/com/solidfire/gson/annotations/Since.java
similarity index 88%
rename from gson/src/main/java/com/google/gson/annotations/Since.java
rename to gson/src/main/java/com/solidfire/gson/annotations/Since.java
index 541f154b6..dfbc11772 100644
--- a/gson/src/main/java/com/google/gson/annotations/Since.java
+++ b/gson/src/main/java/com/solidfire/gson/annotations/Since.java
@@ -14,7 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.annotations;
+package com.solidfire.gson.annotations;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -26,9 +29,9 @@
  * This annotation is useful to manage versioning of your Json classes for a web-service.
  *
  * <p>
- * This annotation has no effect unless you build {@link com.google.gson.Gson} with a
- * {@link com.google.gson.GsonBuilder} and invoke
- * {@link com.google.gson.GsonBuilder#setVersion(double)} method.
+ * This annotation has no effect unless you build {@link Gson} with a
+ * {@link GsonBuilder} and invoke
+ * {@link GsonBuilder#setVersion(double)} method.
  *
  * <p>Here is an example of how this annotation is meant to be used:</p>
  * <pre>
diff --git a/gson/src/main/java/com/google/gson/annotations/Until.java b/gson/src/main/java/com/solidfire/gson/annotations/Until.java
similarity index 89%
rename from gson/src/main/java/com/google/gson/annotations/Until.java
rename to gson/src/main/java/com/solidfire/gson/annotations/Until.java
index 4648b8a2a..fb8ad501e 100644
--- a/gson/src/main/java/com/google/gson/annotations/Until.java
+++ b/gson/src/main/java/com/solidfire/gson/annotations/Until.java
@@ -14,7 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.annotations;
+package com.solidfire.gson.annotations;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -28,9 +31,9 @@
  * is useful to manage versioning of your JSON classes for a web-service.
  *
  * <p>
- * This annotation has no effect unless you build {@link com.google.gson.Gson} with a
- * {@link com.google.gson.GsonBuilder} and invoke
- * {@link com.google.gson.GsonBuilder#setVersion(double)} method.
+ * This annotation has no effect unless you build {@link Gson} with a
+ * {@link GsonBuilder} and invoke
+ * {@link GsonBuilder#setVersion(double)} method.
  *
  * <p>Here is an example of how this annotation is meant to be used:</p>
  * <pre>
diff --git a/gson/src/main/java/com/google/gson/annotations/package-info.java b/gson/src/main/java/com/solidfire/gson/annotations/package-info.java
similarity index 63%
rename from gson/src/main/java/com/google/gson/annotations/package-info.java
rename to gson/src/main/java/com/solidfire/gson/annotations/package-info.java
index 1c461fd68..3094dd3bc 100644
--- a/gson/src/main/java/com/google/gson/annotations/package-info.java
+++ b/gson/src/main/java/com/solidfire/gson/annotations/package-info.java
@@ -1,6 +1,6 @@
 /**
- * This package provides annotations that can be used with {@link com.google.gson.Gson}.
+ * This package provides annotations that can be used with {@link com.solidfire.gson.Gson}.
  * 
  * @author Inderjeet Singh, Joel Leitch
  */
-package com.google.gson.annotations;
\ No newline at end of file
+package com.solidfire.gson.annotations;
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/internal/$Gson$Preconditions.java b/gson/src/main/java/com/solidfire/gson/internal/$Gson$Preconditions.java
similarity index 93%
rename from gson/src/main/java/com/google/gson/internal/$Gson$Preconditions.java
rename to gson/src/main/java/com/solidfire/gson/internal/$Gson$Preconditions.java
index f0e7d3fac..20eb10e5b 100644
--- a/gson/src/main/java/com/google/gson/internal/$Gson$Preconditions.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/$Gson$Preconditions.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.solidfire.gson.internal;
 
 /**
  * A simple utility class used to check method Preconditions.
diff --git a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java b/gson/src/main/java/com/solidfire/gson/internal/$Gson$Types.java
similarity index 99%
rename from gson/src/main/java/com/google/gson/internal/$Gson$Types.java
rename to gson/src/main/java/com/solidfire/gson/internal/$Gson$Types.java
index 017e27cee..bfd1f48fc 100644
--- a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/$Gson$Types.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.solidfire.gson.internal;
 
 import java.io.Serializable;
 import java.lang.reflect.Array;
@@ -31,8 +31,8 @@
 import java.util.NoSuchElementException;
 import java.util.Properties;
 
-import static com.google.gson.internal.$Gson$Preconditions.checkArgument;
-import static com.google.gson.internal.$Gson$Preconditions.checkNotNull;
+import static com.solidfire.gson.internal.$Gson$Preconditions.checkArgument;
+import static com.solidfire.gson.internal.$Gson$Preconditions.checkNotNull;
 
 /**
  * Static methods for working with types.
diff --git a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java b/gson/src/main/java/com/solidfire/gson/internal/ConstructorConstructor.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
rename to gson/src/main/java/com/solidfire/gson/internal/ConstructorConstructor.java
index 6fc9f2d3e..13926c054 100644
--- a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/ConstructorConstructor.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.solidfire.gson.internal;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
@@ -38,9 +38,9 @@
 import java.util.concurrent.ConcurrentNavigableMap;
 import java.util.concurrent.ConcurrentSkipListMap;
 
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonIOException;
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.InstanceCreator;
+import com.solidfire.gson.JsonIOException;
+import com.solidfire.gson.reflect.TypeToken;
 
 /**
  * Returns a function that can construct an instance of a requested type.
diff --git a/gson/src/main/java/com/google/gson/internal/Excluder.java b/gson/src/main/java/com/solidfire/gson/internal/Excluder.java
similarity index 93%
rename from gson/src/main/java/com/google/gson/internal/Excluder.java
rename to gson/src/main/java/com/solidfire/gson/internal/Excluder.java
index bef790406..329994be3 100644
--- a/gson/src/main/java/com/google/gson/internal/Excluder.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/Excluder.java
@@ -14,19 +14,19 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
-
-import com.google.gson.ExclusionStrategy;
-import com.google.gson.FieldAttributes;
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.Expose;
-import com.google.gson.annotations.Since;
-import com.google.gson.annotations.Until;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+package com.solidfire.gson.internal;
+
+import com.solidfire.gson.ExclusionStrategy;
+import com.solidfire.gson.FieldAttributes;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
+import com.solidfire.gson.annotations.Expose;
+import com.solidfire.gson.annotations.Since;
+import com.solidfire.gson.annotations.Until;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
diff --git a/gson/src/main/java/com/google/gson/internal/JsonReaderInternalAccess.java b/gson/src/main/java/com/solidfire/gson/internal/JsonReaderInternalAccess.java
similarity index 92%
rename from gson/src/main/java/com/google/gson/internal/JsonReaderInternalAccess.java
rename to gson/src/main/java/com/solidfire/gson/internal/JsonReaderInternalAccess.java
index bbd472040..52583ecf0 100644
--- a/gson/src/main/java/com/google/gson/internal/JsonReaderInternalAccess.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/JsonReaderInternalAccess.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.solidfire.gson.internal;
 
-import com.google.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonReader;
 import java.io.IOException;
 
 /**
diff --git a/gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java b/gson/src/main/java/com/solidfire/gson/internal/LazilyParsedNumber.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java
rename to gson/src/main/java/com/solidfire/gson/internal/LazilyParsedNumber.java
index 3669af7b5..3d3d00690 100644
--- a/gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/LazilyParsedNumber.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.internal;
+package com.solidfire.gson.internal;
 
 import java.io.ObjectStreamException;
 import java.math.BigDecimal;
diff --git a/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java b/gson/src/main/java/com/solidfire/gson/internal/LinkedHashTreeMap.java
similarity index 99%
rename from gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java
rename to gson/src/main/java/com/solidfire/gson/internal/LinkedHashTreeMap.java
index b2707c50d..26a05ddae 100644
--- a/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/LinkedHashTreeMap.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.solidfire.gson.internal;
 
 import java.io.ObjectStreamException;
 import java.io.Serializable;
diff --git a/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java b/gson/src/main/java/com/solidfire/gson/internal/LinkedTreeMap.java
similarity index 99%
rename from gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java
rename to gson/src/main/java/com/solidfire/gson/internal/LinkedTreeMap.java
index 80462742e..d0442310d 100644
--- a/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/LinkedTreeMap.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.solidfire.gson.internal;
 
 import java.io.ObjectStreamException;
 import java.io.Serializable;
diff --git a/gson/src/main/java/com/google/gson/internal/ObjectConstructor.java b/gson/src/main/java/com/solidfire/gson/internal/ObjectConstructor.java
similarity index 96%
rename from gson/src/main/java/com/google/gson/internal/ObjectConstructor.java
rename to gson/src/main/java/com/solidfire/gson/internal/ObjectConstructor.java
index 6ef20607f..dca6b37c9 100644
--- a/gson/src/main/java/com/google/gson/internal/ObjectConstructor.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/ObjectConstructor.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.solidfire.gson.internal;
 
 /**
  * Defines a generic object construction factory.  The purpose of this class
diff --git a/gson/src/main/java/com/google/gson/internal/Primitives.java b/gson/src/main/java/com/solidfire/gson/internal/Primitives.java
similarity index 99%
rename from gson/src/main/java/com/google/gson/internal/Primitives.java
rename to gson/src/main/java/com/solidfire/gson/internal/Primitives.java
index a98f6242a..692a8b416 100644
--- a/gson/src/main/java/com/google/gson/internal/Primitives.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/Primitives.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.solidfire.gson.internal;
 
 
 import java.lang.reflect.Type;
diff --git a/gson/src/main/java/com/google/gson/internal/Streams.java b/gson/src/main/java/com/solidfire/gson/internal/Streams.java
similarity index 88%
rename from gson/src/main/java/com/google/gson/internal/Streams.java
rename to gson/src/main/java/com/solidfire/gson/internal/Streams.java
index 74956d777..a79ea2108 100644
--- a/gson/src/main/java/com/google/gson/internal/Streams.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/Streams.java
@@ -14,17 +14,17 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.solidfire.gson.internal;
 
-import com.google.gson.JsonElement;
-import com.google.gson.JsonIOException;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.internal.bind.TypeAdapters;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-import com.google.gson.stream.MalformedJsonException;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonIOException;
+import com.solidfire.gson.JsonNull;
+import com.solidfire.gson.JsonParseException;
+import com.solidfire.gson.JsonSyntaxException;
+import com.solidfire.gson.internal.bind.TypeAdapters;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonWriter;
+import com.solidfire.gson.stream.MalformedJsonException;
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.Writer;
diff --git a/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java b/gson/src/main/java/com/solidfire/gson/internal/UnsafeAllocator.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
rename to gson/src/main/java/com/solidfire/gson/internal/UnsafeAllocator.java
index fce0be379..ce2d268c1 100644
--- a/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/UnsafeAllocator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.solidfire.gson.internal;
 
 import java.io.ObjectInputStream;
 import java.io.ObjectStreamClass;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java b/gson/src/main/java/com/solidfire/gson/internal/bind/ArrayTypeAdapter.java
similarity index 88%
rename from gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
rename to gson/src/main/java/com/solidfire/gson/internal/bind/ArrayTypeAdapter.java
index 3fb7c0568..7574f8791 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/bind/ArrayTypeAdapter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.solidfire.gson.internal.bind;
 
 import java.io.IOException;
 import java.lang.reflect.Array;
@@ -23,14 +23,14 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
+import com.solidfire.gson.internal.$Gson$Types;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonToken;
+import com.solidfire.gson.stream.JsonWriter;
 
 /**
  * Adapt an array of objects.
diff --git a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java b/gson/src/main/java/com/solidfire/gson/internal/bind/CollectionTypeAdapterFactory.java
similarity index 85%
rename from gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
rename to gson/src/main/java/com/solidfire/gson/internal/bind/CollectionTypeAdapterFactory.java
index 1d57844a4..b4288b830 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/bind/CollectionTypeAdapterFactory.java
@@ -14,18 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.solidfire.gson.internal.bind;
 
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.ObjectConstructor;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
+import com.solidfire.gson.internal.$Gson$Types;
+import com.solidfire.gson.internal.ConstructorConstructor;
+import com.solidfire.gson.internal.ObjectConstructor;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonToken;
+import com.solidfire.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.util.Collection;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java b/gson/src/main/java/com/solidfire/gson/internal/bind/DateTypeAdapter.java
similarity index 85%
rename from gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
rename to gson/src/main/java/com/solidfire/gson/internal/bind/DateTypeAdapter.java
index 561af1985..0239c37b6 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/bind/DateTypeAdapter.java
@@ -14,17 +14,17 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.solidfire.gson.internal.bind;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.bind.util.ISO8601Utils;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.JsonSyntaxException;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
+import com.solidfire.gson.internal.bind.util.ISO8601Utils;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonToken;
+import com.solidfire.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.text.DateFormat;
 import java.text.ParseException;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java b/gson/src/main/java/com/solidfire/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
similarity index 88%
rename from gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
rename to gson/src/main/java/com/solidfire/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
index b52e15734..4da3e9cdc 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.solidfire.gson.internal.bind;
 
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
+import com.solidfire.gson.annotations.JsonAdapter;
+import com.solidfire.gson.internal.ConstructorConstructor;
+import com.solidfire.gson.reflect.TypeToken;
 
 /**
  * Given a type T, looks for the annotation {@link JsonAdapter} and uses an instance of the
diff --git a/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java b/gson/src/main/java/com/solidfire/gson/internal/bind/JsonTreeReader.java
similarity index 95%
rename from gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java
rename to gson/src/main/java/com/solidfire/gson/internal/bind/JsonTreeReader.java
index 6a8362805..9483e94d9 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/bind/JsonTreeReader.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
-
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
+package com.solidfire.gson.internal.bind;
+
+import com.solidfire.gson.JsonArray;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonNull;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonToken;
 import java.io.IOException;
 import java.io.Reader;
 import java.util.ArrayList;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java b/gson/src/main/java/com/solidfire/gson/internal/bind/JsonTreeWriter.java
similarity index 95%
rename from gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java
rename to gson/src/main/java/com/solidfire/gson/internal/bind/JsonTreeWriter.java
index 5f9f0395d..ad2469844 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/bind/JsonTreeWriter.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
-
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.stream.JsonWriter;
+package com.solidfire.gson.internal.bind;
+
+import com.solidfire.gson.JsonArray;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonNull;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.io.Writer;
 import java.util.ArrayList;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java b/gson/src/main/java/com/solidfire/gson/internal/bind/MapTypeAdapterFactory.java
similarity index 92%
rename from gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
rename to gson/src/main/java/com/solidfire/gson/internal/bind/MapTypeAdapterFactory.java
index 1682aad04..79231d706 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/bind/MapTypeAdapterFactory.java
@@ -14,23 +14,24 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.solidfire.gson.internal.bind;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.JsonSyntaxException;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
+import com.solidfire.gson.internal.$Gson$Types;
+import com.solidfire.gson.internal.ConstructorConstructor;
+import com.solidfire.gson.internal.JsonReaderInternalAccess;
+import com.solidfire.gson.internal.ObjectConstructor;
+import com.solidfire.gson.internal.Streams;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonToken;
+import com.solidfire.gson.stream.JsonWriter;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.JsonReaderInternalAccess;
-import com.google.gson.internal.ObjectConstructor;
-import com.google.gson.internal.Streams;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java b/gson/src/main/java/com/solidfire/gson/internal/bind/ObjectTypeAdapter.java
similarity index 87%
rename from gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
rename to gson/src/main/java/com/solidfire/gson/internal/bind/ObjectTypeAdapter.java
index ec42e0482..cec1aa440 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/bind/ObjectTypeAdapter.java
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
-
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.LinkedTreeMap;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+package com.solidfire.gson.internal.bind;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
+import com.solidfire.gson.internal.LinkedTreeMap;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonToken;
+import com.solidfire.gson.stream.JsonWriter;
 
 import java.io.IOException;
 import java.util.ArrayList;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/solidfire/gson/internal/bind/ReflectiveTypeAdapterFactory.java
similarity index 90%
rename from gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
rename to gson/src/main/java/com/solidfire/gson/internal/bind/ReflectiveTypeAdapterFactory.java
index c87cdbf16..a0fc6ff22 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -14,24 +14,24 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
-
-import com.google.gson.FieldNamingStrategy;
-import com.google.gson.Gson;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.annotations.SerializedName;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.Excluder;
-import com.google.gson.internal.ObjectConstructor;
-import com.google.gson.internal.Primitives;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+package com.solidfire.gson.internal.bind;
+
+import com.solidfire.gson.FieldNamingStrategy;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.JsonSyntaxException;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
+import com.solidfire.gson.annotations.JsonAdapter;
+import com.solidfire.gson.annotations.SerializedName;
+import com.solidfire.gson.internal.$Gson$Types;
+import com.solidfire.gson.internal.ConstructorConstructor;
+import com.solidfire.gson.internal.Excluder;
+import com.solidfire.gson.internal.ObjectConstructor;
+import com.solidfire.gson.internal.Primitives;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonToken;
+import com.solidfire.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
@@ -40,7 +40,7 @@
 import java.util.List;
 import java.util.Map;
 
-import static com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter;
+import static com.solidfire.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter;
 
 /**
  * Type adapter that reflects over the fields and methods of a class.
diff --git a/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java b/gson/src/main/java/com/solidfire/gson/internal/bind/SqlDateTypeAdapter.java
similarity index 84%
rename from gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java
rename to gson/src/main/java/com/solidfire/gson/internal/bind/SqlDateTypeAdapter.java
index 5ec244f29..91c7e941a 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/bind/SqlDateTypeAdapter.java
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.solidfire.gson.internal.bind;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.JsonSyntaxException;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonToken;
+import com.solidfire.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.text.DateFormat;
 import java.text.ParseException;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java b/gson/src/main/java/com/solidfire/gson/internal/bind/TimeTypeAdapter.java
similarity index 84%
rename from gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java
rename to gson/src/main/java/com/solidfire/gson/internal/bind/TimeTypeAdapter.java
index 55d4b2f69..9f5babae7 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/bind/TimeTypeAdapter.java
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.solidfire.gson.internal.bind;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.JsonSyntaxException;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonToken;
+import com.solidfire.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.sql.Time;
 import java.text.DateFormat;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java b/gson/src/main/java/com/solidfire/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
similarity index 89%
rename from gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
rename to gson/src/main/java/com/solidfire/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
index 7e52c27d2..6a3325230 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
@@ -13,13 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.internal.bind;
+package com.solidfire.gson.internal.bind;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonWriter;
 
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java b/gson/src/main/java/com/solidfire/gson/internal/bind/TypeAdapters.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
rename to gson/src/main/java/com/solidfire/gson/internal/bind/TypeAdapters.java
index 0d6d013c1..480f86ab0 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/bind/TypeAdapters.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.solidfire.gson.internal.bind;
 
 import java.io.IOException;
 import java.math.BigDecimal;
@@ -40,22 +40,22 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicIntegerArray;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonIOException;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.SerializedName;
-import com.google.gson.internal.LazilyParsedNumber;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.JsonArray;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonIOException;
+import com.solidfire.gson.JsonNull;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.JsonSyntaxException;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
+import com.solidfire.gson.annotations.SerializedName;
+import com.solidfire.gson.internal.LazilyParsedNumber;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonToken;
+import com.solidfire.gson.stream.JsonWriter;
 
 /**
  * Type adapters for basic types.
diff --git a/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java b/gson/src/main/java/com/solidfire/gson/internal/bind/util/ISO8601Utils.java
similarity index 99%
rename from gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java
rename to gson/src/main/java/com/solidfire/gson/internal/bind/util/ISO8601Utils.java
index c931b0906..0dab8b0c1 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/bind/util/ISO8601Utils.java
@@ -1,4 +1,4 @@
-package com.google.gson.internal.bind.util;
+package com.solidfire.gson.internal.bind.util;
 
 import java.text.ParseException;
 import java.text.ParsePosition;
diff --git a/gson/src/main/java/com/google/gson/internal/package-info.java b/gson/src/main/java/com/solidfire/gson/internal/package-info.java
similarity index 87%
rename from gson/src/main/java/com/google/gson/internal/package-info.java
rename to gson/src/main/java/com/solidfire/gson/internal/package-info.java
index b5139b6de..31e51f9a0 100644
--- a/gson/src/main/java/com/google/gson/internal/package-info.java
+++ b/gson/src/main/java/com/solidfire/gson/internal/package-info.java
@@ -4,4 +4,4 @@
  *
  * @author Inderjeet Singh, Joel Leitch, Jesse Wilson
  */
-package com.google.gson.internal;
\ No newline at end of file
+package com.solidfire.gson.internal;
\ No newline at end of file
diff --git a/gson/src/main/java/com/solidfire/gson/package-info.java b/gson/src/main/java/com/solidfire/gson/package-info.java
new file mode 100644
index 000000000..5e7e46f19
--- /dev/null
+++ b/gson/src/main/java/com/solidfire/gson/package-info.java
@@ -0,0 +1,11 @@
+/**
+ * This package provides the {@link com.solidfire.gson.Gson} class to convert Json to Java and
+ * vice-versa.
+ *
+ * <p>The primary class to use is {@link com.solidfire.gson.Gson} which can be constructed with
+ * {@code new Gson()} (using default settings) or by using {@link com.solidfire.gson.GsonBuilder}
+ * (to configure various options such as using versioning and so on).</p>
+ *
+ * @author Inderjeet Singh, Joel Leitch
+ */
+package com.solidfire.gson;
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/reflect/TypeToken.java b/gson/src/main/java/com/solidfire/gson/reflect/TypeToken.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/reflect/TypeToken.java
rename to gson/src/main/java/com/solidfire/gson/reflect/TypeToken.java
index e16e8e6dc..3ced301d1 100644
--- a/gson/src/main/java/com/google/gson/reflect/TypeToken.java
+++ b/gson/src/main/java/com/solidfire/gson/reflect/TypeToken.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.reflect;
+package com.solidfire.gson.reflect;
 
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.internal.$Gson$Preconditions;
+import com.solidfire.gson.internal.$Gson$Types;
+import com.solidfire.gson.internal.$Gson$Preconditions;
 import java.lang.reflect.GenericArrayType;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
diff --git a/gson/src/main/java/com/google/gson/reflect/package-info.java b/gson/src/main/java/com/solidfire/gson/reflect/package-info.java
similarity index 80%
rename from gson/src/main/java/com/google/gson/reflect/package-info.java
rename to gson/src/main/java/com/solidfire/gson/reflect/package-info.java
index e666c4311..f1aba551f 100644
--- a/gson/src/main/java/com/google/gson/reflect/package-info.java
+++ b/gson/src/main/java/com/solidfire/gson/reflect/package-info.java
@@ -3,4 +3,4 @@
  *  
  * @author Inderjeet Singh, Joel Leitch
  */
-package com.google.gson.reflect;
\ No newline at end of file
+package com.solidfire.gson.reflect;
\ No newline at end of file
diff --git a/gson/src/main/java/com/google/gson/stream/JsonReader.java b/gson/src/main/java/com/solidfire/gson/stream/JsonReader.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/stream/JsonReader.java
rename to gson/src/main/java/com/solidfire/gson/stream/JsonReader.java
index 838355cb4..964055d93 100644
--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java
+++ b/gson/src/main/java/com/solidfire/gson/stream/JsonReader.java
@@ -14,10 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.solidfire.gson.stream;
+
+import com.solidfire.gson.internal.JsonReaderInternalAccess;
+import com.solidfire.gson.internal.bind.JsonTreeReader;
 
-import com.google.gson.internal.JsonReaderInternalAccess;
-import com.google.gson.internal.bind.JsonTreeReader;
 import java.io.Closeable;
 import java.io.EOFException;
 import java.io.IOException;
@@ -771,7 +772,7 @@ private boolean isLiteral(char c) throws IOException {
   }
 
   /**
-   * Returns the next token, a {@link com.google.gson.stream.JsonToken#NAME property name}, and
+   * Returns the next token, a {@link JsonToken#NAME property name}, and
    * consumes it.
    *
    * @throws java.io.IOException if the next token in the stream is not a property
@@ -799,7 +800,7 @@ public String nextName() throws IOException {
   }
 
   /**
-   * Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
+   * Returns the {@link JsonToken#STRING string} value of the next token,
    * consuming it. If the next token is a number, this method will return its
    * string form.
    *
@@ -836,7 +837,7 @@ public String nextString() throws IOException {
   }
 
   /**
-   * Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
+   * Returns the {@link JsonToken#BOOLEAN boolean} value of the next token,
    * consuming it.
    *
    * @throws IllegalStateException if the next token is not a boolean or if
@@ -882,7 +883,7 @@ public void nextNull() throws IOException {
   }
 
   /**
-   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
+   * Returns the {@link JsonToken#NUMBER double} value of the next token,
    * consuming it. If the next token is a string, this method will attempt to
    * parse it as a double using {@link Double#parseDouble(String)}.
    *
@@ -927,7 +928,7 @@ public double nextDouble() throws IOException {
   }
 
   /**
-   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
+   * Returns the {@link JsonToken#NUMBER long} value of the next token,
    * consuming it. If the next token is a string, this method will attempt to
    * parse it as a long. If the next token's numeric value cannot be exactly
    * represented by a Java {@code long}, this method throws.
@@ -1149,7 +1150,7 @@ private void skipUnquotedValue() throws IOException {
   }
 
   /**
-   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
+   * Returns the {@link JsonToken#NUMBER int} value of the next token,
    * consuming it. If the next token is a string, this method will attempt to
    * parse it as an int. If the next token's numeric value cannot be exactly
    * represented by a Java {@code int}, this method throws.
diff --git a/gson/src/main/java/com/google/gson/stream/JsonScope.java b/gson/src/main/java/com/solidfire/gson/stream/JsonScope.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/stream/JsonScope.java
rename to gson/src/main/java/com/solidfire/gson/stream/JsonScope.java
index da6913727..23dca8cb4 100644
--- a/gson/src/main/java/com/google/gson/stream/JsonScope.java
+++ b/gson/src/main/java/com/solidfire/gson/stream/JsonScope.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.solidfire.gson.stream;
 
 /**
  * Lexical scoping elements within a JSON reader or writer.
diff --git a/gson/src/main/java/com/google/gson/stream/JsonToken.java b/gson/src/main/java/com/solidfire/gson/stream/JsonToken.java
similarity index 98%
rename from gson/src/main/java/com/google/gson/stream/JsonToken.java
rename to gson/src/main/java/com/solidfire/gson/stream/JsonToken.java
index f1025b3f4..fbba56c0e 100644
--- a/gson/src/main/java/com/google/gson/stream/JsonToken.java
+++ b/gson/src/main/java/com/solidfire/gson/stream/JsonToken.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.solidfire.gson.stream;
 
 /**
  * A structure, name or value type in a JSON-encoded string.
diff --git a/gson/src/main/java/com/google/gson/stream/JsonWriter.java b/gson/src/main/java/com/solidfire/gson/stream/JsonWriter.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/stream/JsonWriter.java
rename to gson/src/main/java/com/solidfire/gson/stream/JsonWriter.java
index 9bf2d22a6..0323b29a4 100644
--- a/gson/src/main/java/com/google/gson/stream/JsonWriter.java
+++ b/gson/src/main/java/com/solidfire/gson/stream/JsonWriter.java
@@ -14,20 +14,20 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.solidfire.gson.stream;
 
 import java.io.Closeable;
 import java.io.Flushable;
 import java.io.IOException;
 import java.io.Writer;
 
-import static com.google.gson.stream.JsonScope.DANGLING_NAME;
-import static com.google.gson.stream.JsonScope.EMPTY_ARRAY;
-import static com.google.gson.stream.JsonScope.EMPTY_DOCUMENT;
-import static com.google.gson.stream.JsonScope.EMPTY_OBJECT;
-import static com.google.gson.stream.JsonScope.NONEMPTY_ARRAY;
-import static com.google.gson.stream.JsonScope.NONEMPTY_DOCUMENT;
-import static com.google.gson.stream.JsonScope.NONEMPTY_OBJECT;
+import static com.solidfire.gson.stream.JsonScope.DANGLING_NAME;
+import static com.solidfire.gson.stream.JsonScope.EMPTY_ARRAY;
+import static com.solidfire.gson.stream.JsonScope.EMPTY_DOCUMENT;
+import static com.solidfire.gson.stream.JsonScope.EMPTY_OBJECT;
+import static com.solidfire.gson.stream.JsonScope.NONEMPTY_ARRAY;
+import static com.solidfire.gson.stream.JsonScope.NONEMPTY_DOCUMENT;
+import static com.solidfire.gson.stream.JsonScope.NONEMPTY_OBJECT;
 
 /**
  * Writes a JSON (<a href="http://www.ietf.org/rfc/rfc7159.txt">RFC 7159</a>)
diff --git a/gson/src/main/java/com/google/gson/stream/MalformedJsonException.java b/gson/src/main/java/com/solidfire/gson/stream/MalformedJsonException.java
similarity index 97%
rename from gson/src/main/java/com/google/gson/stream/MalformedJsonException.java
rename to gson/src/main/java/com/solidfire/gson/stream/MalformedJsonException.java
index 9da70ebcc..a3f63c5e5 100644
--- a/gson/src/main/java/com/google/gson/stream/MalformedJsonException.java
+++ b/gson/src/main/java/com/solidfire/gson/stream/MalformedJsonException.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.solidfire.gson.stream;
 
 import java.io.IOException;
 
diff --git a/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java b/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
deleted file mode 100644
index 5ce65d748..000000000
--- a/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
+++ /dev/null
@@ -1,172 +0,0 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import java.text.DateFormat;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Locale;
-import java.util.TimeZone;
-import junit.framework.TestCase;
-
-/**
- * A simple unit test for the {@link DefaultDateTypeAdapter} class.
- *
- * @author Joel Leitch
- */
-public class DefaultDateTypeAdapterTest extends TestCase {
-
-  public void testFormattingInEnUs() {
-    assertFormattingAlwaysEmitsUsLocale(Locale.US);
-  }
-
-  public void testFormattingInFr() {
-    assertFormattingAlwaysEmitsUsLocale(Locale.FRANCE);
-  }
-
-  private void assertFormattingAlwaysEmitsUsLocale(Locale locale) {
-    TimeZone defaultTimeZone = TimeZone.getDefault();
-    TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
-    Locale defaultLocale = Locale.getDefault();
-    Locale.setDefault(locale);
-    try {
-      assertFormatted("Jan 1, 1970 12:00:00 AM", new DefaultDateTypeAdapter());
-      assertFormatted("1/1/70", new DefaultDateTypeAdapter(DateFormat.SHORT));
-      assertFormatted("Jan 1, 1970", new DefaultDateTypeAdapter(DateFormat.MEDIUM));
-      assertFormatted("January 1, 1970", new DefaultDateTypeAdapter(DateFormat.LONG));
-      assertFormatted("1/1/70 12:00 AM",
-          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
-      assertFormatted("Jan 1, 1970 12:00:00 AM",
-          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
-      assertFormatted("January 1, 1970 12:00:00 AM UTC",
-          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
-      assertFormatted("Thursday, January 1, 1970 12:00:00 AM UTC",
-          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
-    } finally {
-      TimeZone.setDefault(defaultTimeZone);
-      Locale.setDefault(defaultLocale);
-    }
-  }
-
-  public void testParsingDatesFormattedWithSystemLocale() {
-    TimeZone defaultTimeZone = TimeZone.getDefault();
-    TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
-    Locale defaultLocale = Locale.getDefault();
-    Locale.setDefault(Locale.FRANCE);
-    try {
-      assertParsed("1 janv. 1970 00:00:00", new DefaultDateTypeAdapter());
-      assertParsed("01/01/70", new DefaultDateTypeAdapter(DateFormat.SHORT));
-      assertParsed("1 janv. 1970", new DefaultDateTypeAdapter(DateFormat.MEDIUM));
-      assertParsed("1 janvier 1970", new DefaultDateTypeAdapter(DateFormat.LONG));
-      assertParsed("01/01/70 00:00",
-          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
-      assertParsed("1 janv. 1970 00:00:00",
-          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
-      assertParsed("1 janvier 1970 00:00:00 UTC",
-          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
-      assertParsed("jeudi 1 janvier 1970 00 h 00 UTC",
-          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
-    } finally {
-      TimeZone.setDefault(defaultTimeZone);
-      Locale.setDefault(defaultLocale);
-    }
-  }
-
-  public void testParsingDatesFormattedWithUsLocale() {
-    TimeZone defaultTimeZone = TimeZone.getDefault();
-    TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
-    Locale defaultLocale = Locale.getDefault();
-    Locale.setDefault(Locale.US);
-    try {
-      assertParsed("Jan 1, 1970 0:00:00 AM", new DefaultDateTypeAdapter());
-      assertParsed("1/1/70", new DefaultDateTypeAdapter(DateFormat.SHORT));
-      assertParsed("Jan 1, 1970", new DefaultDateTypeAdapter(DateFormat.MEDIUM));
-      assertParsed("January 1, 1970", new DefaultDateTypeAdapter(DateFormat.LONG));
-      assertParsed("1/1/70 0:00 AM",
-          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
-      assertParsed("Jan 1, 1970 0:00:00 AM",
-          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
-      assertParsed("January 1, 1970 0:00:00 AM UTC",
-          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
-      assertParsed("Thursday, January 1, 1970 0:00:00 AM UTC",
-          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
-    } finally {
-      TimeZone.setDefault(defaultTimeZone);
-      Locale.setDefault(defaultLocale);
-    }
-  }
-
-  public void testFormatUsesDefaultTimezone() {
-    TimeZone defaultTimeZone = TimeZone.getDefault();
-    TimeZone.setDefault(TimeZone.getTimeZone("America/Los_Angeles"));
-    Locale defaultLocale = Locale.getDefault();
-    Locale.setDefault(Locale.US);
-    try {
-      assertFormatted("Dec 31, 1969 4:00:00 PM", new DefaultDateTypeAdapter());
-      assertParsed("Dec 31, 1969 4:00:00 PM", new DefaultDateTypeAdapter());
-    } finally {
-      TimeZone.setDefault(defaultTimeZone);
-      Locale.setDefault(defaultLocale);
-    }
-  }
-
-  public void testDateDeserializationISO8601() throws Exception {
-  	DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter();
-    assertParsed("1970-01-01T00:00:00.000Z", adapter);
-    assertParsed("1970-01-01T00:00Z", adapter);
-    assertParsed("1970-01-01T00:00:00+00:00", adapter);
-    assertParsed("1970-01-01T01:00:00+01:00", adapter);
-    assertParsed("1970-01-01T01:00:00+01", adapter);
-  }
-  
-  public void testDateSerialization() throws Exception {
-    int dateStyle = DateFormat.LONG;
-    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle);
-    DateFormat formatter = DateFormat.getDateInstance(dateStyle, Locale.US);
-    Date currentDate = new Date();
-
-    String dateString = dateTypeAdapter.serialize(currentDate, Date.class, null).getAsString();
-    assertEquals(formatter.format(currentDate), dateString);
-  }
-
-  public void testDatePattern() throws Exception {
-    String pattern = "yyyy-MM-dd";
-    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(pattern);
-    DateFormat formatter = new SimpleDateFormat(pattern);
-    Date currentDate = new Date();
-
-    String dateString = dateTypeAdapter.serialize(currentDate, Date.class, null).getAsString();
-    assertEquals(formatter.format(currentDate), dateString);
-  }
-
-  public void testInvalidDatePattern() throws Exception {
-    try {
-      new DefaultDateTypeAdapter("I am a bad Date pattern....");
-      fail("Invalid date pattern should fail.");
-    } catch (IllegalArgumentException expected) { }
-  }
-
-  private void assertFormatted(String formatted, DefaultDateTypeAdapter adapter) {
-    assertEquals(formatted, adapter.serialize(new Date(0), Date.class, null).getAsString());
-  }
-
-  private void assertParsed(String date, DefaultDateTypeAdapter  adapter) {
-    assertEquals(date, new Date(0), adapter.deserialize(new JsonPrimitive(date), Date.class, null));
-    assertEquals("ISO 8601", new Date(0), adapter.deserialize(
-        new JsonPrimitive("1970-01-01T00:00:00Z"), Date.class, null));
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java b/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java
deleted file mode 100644
index 5c0619535..000000000
--- a/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import com.google.gson.reflect.TypeToken;
-import java.lang.reflect.Type;
-import java.util.HashMap;
-import java.util.Map;
-import junit.framework.TestCase;
-
-/**
- * Unit test for the default JSON map serialization object located in the
- * {@link DefaultTypeAdapters} class.
- *
- * @author Joel Leitch
- */
-public class DefaultMapJsonSerializerTest extends TestCase {
-  private Gson gson = new Gson();
-
-  public void testEmptyMapNoTypeSerialization() {
-    Map<String, String> emptyMap = new HashMap<String, String>();
-    JsonElement element = gson.toJsonTree(emptyMap, emptyMap.getClass());
-    assertTrue(element instanceof JsonObject);
-    JsonObject emptyMapJsonObject = (JsonObject) element;
-    assertTrue(emptyMapJsonObject.entrySet().isEmpty());
-  }
-
-  public void testEmptyMapSerialization() {
-    Type mapType = new TypeToken<Map<String, String>>() { }.getType();
-    Map<String, String> emptyMap = new HashMap<String, String>();
-    JsonElement element = gson.toJsonTree(emptyMap, mapType);
-
-    assertTrue(element instanceof JsonObject);
-    JsonObject emptyMapJsonObject = (JsonObject) element;
-    assertTrue(emptyMapJsonObject.entrySet().isEmpty());
-  }
-
-  public void testNonEmptyMapSerialization() {
-    Type mapType = new TypeToken<Map<String, String>>() { }.getType();
-    Map<String, String> myMap = new HashMap<String, String>();
-    String key = "key1";
-    myMap.put(key, "value1");
-    Gson gson = new Gson();
-    JsonElement element = gson.toJsonTree(myMap, mapType);
-
-    assertTrue(element.isJsonObject());
-    JsonObject mapJsonObject = element.getAsJsonObject();
-    assertTrue(mapJsonObject.has(key));
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java b/gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java
deleted file mode 100644
index dd8a7a926..000000000
--- a/gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java
+++ /dev/null
@@ -1,89 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import com.google.gson.annotations.Expose;
-
-import com.google.gson.internal.Excluder;
-import junit.framework.TestCase;
-
-import java.lang.reflect.Field;
-
-/**
- * Unit tests for GsonBuilder.REQUIRE_EXPOSE_DESERIALIZE.
- *
- * @author Joel Leitch
- */
-public class ExposeAnnotationExclusionStrategyTest extends TestCase {
-  private Excluder excluder = Excluder.DEFAULT.excludeFieldsWithoutExposeAnnotation();
-
-  public void testNeverSkipClasses() throws Exception {
-    assertFalse(excluder.excludeClass(MockObject.class, true));
-    assertFalse(excluder.excludeClass(MockObject.class, false));
-  }
-
-  public void testSkipNonAnnotatedFields() throws Exception {
-    Field f = createFieldAttributes("hiddenField");
-    assertTrue(excluder.excludeField(f, true));
-    assertTrue(excluder.excludeField(f, false));
-  }
-
-  public void testSkipExplicitlySkippedFields() throws Exception {
-    Field f = createFieldAttributes("explicitlyHiddenField");
-    assertTrue(excluder.excludeField(f, true));
-    assertTrue(excluder.excludeField(f, false));
-  }
-
-  public void testNeverSkipExposedAnnotatedFields() throws Exception {
-    Field f = createFieldAttributes("exposedField");
-    assertFalse(excluder.excludeField(f, true));
-    assertFalse(excluder.excludeField(f, false));
-  }
-
-  public void testNeverSkipExplicitlyExposedAnnotatedFields() throws Exception {
-    Field f = createFieldAttributes("explicitlyExposedField");
-    assertFalse(excluder.excludeField(f, true));
-    assertFalse(excluder.excludeField(f, false));
-  }
-
-  public void testDifferentSerializeAndDeserializeField() throws Exception {
-    Field f = createFieldAttributes("explicitlyDifferentModeField");
-    assertFalse(excluder.excludeField(f, true));
-    assertTrue(excluder.excludeField(f, false));
-  }
-
-  private static Field createFieldAttributes(String fieldName) throws Exception {
-    return MockObject.class.getField(fieldName);
-  }
-
-  @SuppressWarnings("unused")
-  private static class MockObject {
-    @Expose
-    public final int exposedField = 0;
-
-    @Expose(serialize=true, deserialize=true)
-    public final int explicitlyExposedField = 0;
-
-    @Expose(serialize=false, deserialize=false)
-    public final int explicitlyHiddenField = 0;
-
-    @Expose(serialize=true, deserialize=false)
-    public final int explicitlyDifferentModeField = 0;
-
-    public final int hiddenField = 0;
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/FieldAttributesTest.java b/gson/src/test/java/com/google/gson/FieldAttributesTest.java
deleted file mode 100644
index 8a9d95338..000000000
--- a/gson/src/test/java/com/google/gson/FieldAttributesTest.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
- * Copyright (C) 2009 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import com.google.gson.reflect.TypeToken;
-
-import junit.framework.TestCase;
-
-import java.lang.reflect.Modifier;
-import java.lang.reflect.Type;
-import java.util.List;
-
-/**
- * Unit tests for the {@link FieldAttributes} class.
- *
- * @author Inderjeet Singh
- * @author Joel Leitch
- */
-public class FieldAttributesTest extends TestCase {
-  private FieldAttributes fieldAttributes;
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    fieldAttributes = new FieldAttributes(Foo.class.getField("bar"));
-  }
-
-  public void testNullField() throws Exception {
-    try {
-      new FieldAttributes(null);
-      fail("Field parameter can not be null");
-    } catch (NullPointerException expected) { }
-  }
-
-  public void testDeclaringClass() throws Exception {
-    assertEquals(Foo.class, fieldAttributes.getDeclaringClass());
-  }
-
-  public void testModifiers() throws Exception {
-    assertFalse(fieldAttributes.hasModifier(Modifier.STATIC));
-    assertFalse(fieldAttributes.hasModifier(Modifier.FINAL));
-    assertFalse(fieldAttributes.hasModifier(Modifier.ABSTRACT));
-    assertFalse(fieldAttributes.hasModifier(Modifier.VOLATILE));
-    assertFalse(fieldAttributes.hasModifier(Modifier.PROTECTED));
-
-    assertTrue(fieldAttributes.hasModifier(Modifier.PUBLIC));
-    assertTrue(fieldAttributes.hasModifier(Modifier.TRANSIENT));
-  }
-
-  public void testIsSynthetic() throws Exception {
-    assertFalse(fieldAttributes.isSynthetic());
-  }
-
-  public void testName() throws Exception {
-    assertEquals("bar", fieldAttributes.getName());
-  }
-
-  public void testDeclaredTypeAndClass() throws Exception {
-    Type expectedType = new TypeToken<List<String>>() {}.getType();
-    assertEquals(expectedType, fieldAttributes.getDeclaredType());
-    assertEquals(List.class, fieldAttributes.getDeclaredClass());
-  }
-
-  private static class Foo {
-    @SuppressWarnings("unused")
-    public transient List<String> bar;
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/GenericArrayTypeTest.java b/gson/src/test/java/com/google/gson/GenericArrayTypeTest.java
deleted file mode 100644
index 42acb8a2d..000000000
--- a/gson/src/test/java/com/google/gson/GenericArrayTypeTest.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
-
-import junit.framework.TestCase;
-
-import java.lang.reflect.GenericArrayType;
-import java.lang.reflect.Type;
-import java.util.List;
-
-/**
- * Unit tests for the {@code GenericArrayType}s created by the {@link $Gson$Types} class.
- *
- * @author Inderjeet Singh
- * @author Joel Leitch
- */
-public class GenericArrayTypeTest extends TestCase {
-  private GenericArrayType ourType;
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    ourType = $Gson$Types.arrayOf($Gson$Types.newParameterizedTypeWithOwner(null, List.class, String.class));
-  }
-
-  public void testOurTypeFunctionality() throws Exception {
-    Type parameterizedType = new TypeToken<List<String>>() {}.getType();
-    Type genericArrayType = new TypeToken<List<String>[]>() {}.getType();
-
-    assertEquals(parameterizedType, ourType.getGenericComponentType());
-    assertEquals(genericArrayType, ourType);
-    assertEquals(genericArrayType.hashCode(), ourType.hashCode());
-  }
-
-  public void testNotEquals() throws Exception {
-    Type differentGenericArrayType = new TypeToken<List<String>[][]>() {}.getType();
-    assertFalse(differentGenericArrayType.equals(ourType));
-    assertFalse(ourType.equals(differentGenericArrayType));
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/GsonBuilderTest.java b/gson/src/test/java/com/google/gson/GsonBuilderTest.java
deleted file mode 100755
index 73601c0e3..000000000
--- a/gson/src/test/java/com/google/gson/GsonBuilderTest.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import java.lang.reflect.Modifier;
-import java.lang.reflect.Type;
-
-import junit.framework.TestCase;
-
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-
-/**
- * Unit tests for {@link GsonBuilder}.
- *
- * @author Inderjeet Singh
- */
-public class GsonBuilderTest extends TestCase {
-  private static final TypeAdapter<Object> NULL_TYPE_ADAPTER = new TypeAdapter<Object>() {
-    @Override public void write(JsonWriter out, Object value) {
-      throw new AssertionError();
-    }
-    @Override public Object read(JsonReader in) {
-      throw new AssertionError();
-    }
-  };
-
-  public void testCreatingMoreThanOnce() {
-    GsonBuilder builder = new GsonBuilder();
-    builder.create();
-    builder.create();
-  }
-
-  public void testExcludeFieldsWithModifiers() {
-    Gson gson = new GsonBuilder()
-        .excludeFieldsWithModifiers(Modifier.VOLATILE, Modifier.PRIVATE)
-        .create();
-    assertEquals("{\"d\":\"d\"}", gson.toJson(new HasModifiers()));
-  }
-
-  public void testRegisterTypeAdapterForCoreType() {
-    Type[] types = {
-        byte.class,
-        int.class,
-        double.class,
-        Short.class,
-        Long.class,
-        String.class,
-    };
-    for (Type type : types) {
-      new GsonBuilder().registerTypeAdapter(type, NULL_TYPE_ADAPTER);
-    }
-  }
-
-  @SuppressWarnings("unused")
-  static class HasModifiers {
-    private String a = "a";
-    volatile String b = "b";
-    private volatile String c = "c";
-    String d = "d";
-  }
-
-  public void testTransientFieldExclusion() {
-    Gson gson = new GsonBuilder()
-        .excludeFieldsWithModifiers()
-        .create();
-    assertEquals("{\"a\":\"a\"}", gson.toJson(new HasTransients()));
-  }
-
-  static class HasTransients {
-    transient String a = "a";
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java b/gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java
deleted file mode 100644
index decb93d83..000000000
--- a/gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java
+++ /dev/null
@@ -1,148 +0,0 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import java.lang.reflect.Type;
-import java.math.BigInteger;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.atomic.AtomicLong;
-import junit.framework.TestCase;
-
-/**
- * Contains numerous tests involving registered type converters with a Gson instance.
- *
- * @author Inderjeet Singh
- * @author Joel Leitch
- */
-public class GsonTypeAdapterTest extends TestCase {
-  private Gson gson;
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    gson = new GsonBuilder()
-        .registerTypeAdapter(AtomicLong.class, new ExceptionTypeAdapter())
-        .registerTypeAdapter(AtomicInteger.class, new AtomicIntegerTypeAdapter())
-        .create();
-  }
-
-  public void testDefaultTypeAdapterThrowsParseException() throws Exception {
-    try {
-      gson.fromJson("{\"abc\":123}", BigInteger.class);
-      fail("Should have thrown a JsonParseException");
-    } catch (JsonParseException expected) { }
-  }
-
-  public void testTypeAdapterThrowsException() throws Exception {
-    try {
-      gson.toJson(new AtomicLong(0));
-      fail("Type Adapter should have thrown an exception");
-    } catch (IllegalStateException expected) { }
-
-    try {
-      gson.fromJson("123", AtomicLong.class);
-      fail("Type Adapter should have thrown an exception");
-    } catch (JsonParseException expected) { }
-  }
-
-  public void testTypeAdapterProperlyConvertsTypes() throws Exception {
-    int intialValue = 1;
-    AtomicInteger atomicInt = new AtomicInteger(intialValue);
-    String json = gson.toJson(atomicInt);
-    assertEquals(intialValue + 1, Integer.parseInt(json));
-
-    atomicInt = gson.fromJson(json, AtomicInteger.class);
-    assertEquals(intialValue, atomicInt.get());
-  }
-
-  public void testTypeAdapterDoesNotAffectNonAdaptedTypes() throws Exception {
-    String expected = "blah";
-    String actual = gson.toJson(expected);
-    assertEquals("\"" + expected + "\"", actual);
-
-    actual = gson.fromJson(actual, String.class);
-    assertEquals(expected, actual);
-  }
-
-  private static class ExceptionTypeAdapter
-      implements JsonSerializer<AtomicLong>, JsonDeserializer<AtomicLong> {
-    @Override public JsonElement serialize(
-        AtomicLong src, Type typeOfSrc, JsonSerializationContext context) {
-      throw new IllegalStateException();
-    }
-    @Override public AtomicLong deserialize(
-        JsonElement json, Type typeOfT, JsonDeserializationContext context)
-        throws JsonParseException {
-      throw new IllegalStateException();
-    }
-  }
-
-  private static class AtomicIntegerTypeAdapter
-      implements JsonSerializer<AtomicInteger>, JsonDeserializer<AtomicInteger> {
-    @Override public JsonElement serialize(AtomicInteger src, Type typeOfSrc, JsonSerializationContext context) {
-      return new JsonPrimitive(src.incrementAndGet());
-    }
-
-    @Override public AtomicInteger deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
-        throws JsonParseException {
-      int intValue = json.getAsInt();
-      return new AtomicInteger(--intValue);
-    }
-  }
-
-  static abstract class Abstract {
-    String a;
-  }
-
-  static class Concrete extends Abstract {
-    String b;
-  }
-
-  // https://groups.google.com/d/topic/google-gson/EBmOCa8kJPE/discussion
-  public void testDeserializerForAbstractClass() {
-    Concrete instance = new Concrete();
-    instance.a = "android";
-    instance.b = "beep";
-    assertSerialized("{\"a\":\"android\"}", Abstract.class, true, true, instance);
-    assertSerialized("{\"a\":\"android\"}", Abstract.class, true, false, instance);
-    assertSerialized("{\"a\":\"android\"}", Abstract.class, false, true, instance);
-    assertSerialized("{\"a\":\"android\"}", Abstract.class, false, false, instance);
-    assertSerialized("{\"b\":\"beep\",\"a\":\"android\"}", Concrete.class, true, true, instance);
-    assertSerialized("{\"b\":\"beep\",\"a\":\"android\"}", Concrete.class, true, false, instance);
-    assertSerialized("{\"b\":\"beep\",\"a\":\"android\"}", Concrete.class, false, true, instance);
-    assertSerialized("{\"b\":\"beep\",\"a\":\"android\"}", Concrete.class, false, false, instance);
-  }
-
-  private void assertSerialized(String expected, Class<?> instanceType, boolean registerAbstractDeserializer,
-      boolean registerAbstractHierarchyDeserializer, Object instance) {
-    JsonDeserializer<Abstract> deserializer = new JsonDeserializer<Abstract>() {
-      public Abstract deserialize(JsonElement json, Type typeOfT,
-          JsonDeserializationContext context) throws JsonParseException {
-        throw new AssertionError();
-      }
-    };
-    GsonBuilder builder = new GsonBuilder();
-    if (registerAbstractDeserializer) {
-      builder.registerTypeAdapter(Abstract.class, deserializer);
-    }
-    if (registerAbstractHierarchyDeserializer) {
-      builder.registerTypeHierarchyAdapter(Abstract.class, deserializer);
-    }
-    Gson gson = builder.create();
-    assertEquals(expected, gson.toJson(instance, instanceType));
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java b/gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java
deleted file mode 100644
index 86f7a6224..000000000
--- a/gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import com.google.gson.internal.Excluder;
-import java.lang.reflect.Field;
-import junit.framework.TestCase;
-
-/**
- * Unit test for GsonBuilder.EXCLUDE_INNER_CLASSES.
- *
- * @author Joel Leitch
- */
-public class InnerClassExclusionStrategyTest extends TestCase {
-  public InnerClass innerClass = new InnerClass();
-  public StaticNestedClass staticNestedClass = new StaticNestedClass();
-  private Excluder excluder = Excluder.DEFAULT.disableInnerClassSerialization();
-
-  public void testExcludeInnerClassObject() throws Exception {
-    Class<?> clazz = innerClass.getClass();
-    assertTrue(excluder.excludeClass(clazz, true));
-  }
-
-  public void testExcludeInnerClassField() throws Exception {
-    Field f = getClass().getField("innerClass");
-    assertTrue(excluder.excludeField(f, true));
-  }
-
-  public void testIncludeStaticNestedClassObject() throws Exception {
-    Class<?> clazz = staticNestedClass.getClass();
-    assertFalse(excluder.excludeClass(clazz, true));
-  }
-
-  public void testIncludeStaticNestedClassField() throws Exception {
-    Field f = getClass().getField("staticNestedClass");
-    assertFalse(excluder.excludeField(f, true));
-  }
-
-  class InnerClass {
-  }
-
-  static class StaticNestedClass {
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/JavaSerializationTest.java b/gson/src/test/java/com/google/gson/JavaSerializationTest.java
deleted file mode 100644
index fbaea19d4..000000000
--- a/gson/src/test/java/com/google/gson/JavaSerializationTest.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import com.google.gson.reflect.TypeToken;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Map;
-import junit.framework.TestCase;
-
-/**
- * Check that Gson doesn't return non-serializable data types.
- *
- * @author Jesse Wilson
- */
-public final class JavaSerializationTest extends TestCase {
-  private final Gson gson = new Gson();
-
-  public void testMapIsSerializable() throws Exception {
-    Type type = new TypeToken<Map<String, Integer>>() {}.getType();
-    Map<String, Integer> map = gson.fromJson("{\"b\":1,\"c\":2,\"a\":3}", type);
-    Map<String, Integer> serialized = serializedCopy(map);
-    assertEquals(map, serialized);
-    // Also check that the iteration order is retained.
-    assertEquals(Arrays.asList("b", "c", "a"), new ArrayList<String>(serialized.keySet()));
-  }
-
-  public void testListIsSerializable() throws Exception {
-    Type type = new TypeToken<List<String>>() {}.getType();
-    List<String> list = gson.fromJson("[\"a\",\"b\",\"c\"]", type);
-    List<String> serialized = serializedCopy(list);
-    assertEquals(list, serialized);
-  }
-
-  public void testNumberIsSerializable() throws Exception {
-    Type type = new TypeToken<List<Number>>() {}.getType();
-    List<Number> list = gson.fromJson("[1,3.14,6.673e-11]", type);
-    List<Number> serialized = serializedCopy(list);
-    assertEquals(1.0, serialized.get(0).doubleValue());
-    assertEquals(3.14, serialized.get(1).doubleValue());
-    assertEquals(6.673e-11, serialized.get(2).doubleValue());
-  }
-
-  @SuppressWarnings("unchecked") // Serialization promises to return the same type.
-  private <T> T serializedCopy(T object) throws IOException, ClassNotFoundException {
-    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
-    ObjectOutputStream out = new ObjectOutputStream(bytesOut);
-    out.writeObject(object);
-    out.close();
-    ByteArrayInputStream bytesIn = new ByteArrayInputStream(bytesOut.toByteArray());
-    ObjectInputStream in = new ObjectInputStream(bytesIn);
-    return (T) in.readObject();
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/JsonArrayTest.java b/gson/src/test/java/com/google/gson/JsonArrayTest.java
deleted file mode 100644
index b77d6f1b4..000000000
--- a/gson/src/test/java/com/google/gson/JsonArrayTest.java
+++ /dev/null
@@ -1,102 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import junit.framework.TestCase;
-
-import com.google.gson.common.MoreAsserts;
-
-/**
- * @author Jesse Wilson
- */
-public final class JsonArrayTest extends TestCase {
-
-  public void testEqualsOnEmptyArray() {
-    MoreAsserts.assertEqualsAndHashCode(new JsonArray(), new JsonArray());
-  }
-
-  public void testEqualsNonEmptyArray() {
-    JsonArray a = new JsonArray();
-    JsonArray b = new JsonArray();
-
-    assertEquals(a, a);
-
-    a.add(new JsonObject());
-    assertFalse(a.equals(b));
-    assertFalse(b.equals(a));
-
-    b.add(new JsonObject());
-    MoreAsserts.assertEqualsAndHashCode(a, b);
-
-    a.add(new JsonObject());
-    assertFalse(a.equals(b));
-    assertFalse(b.equals(a));
-
-    b.add(JsonNull.INSTANCE);
-    assertFalse(a.equals(b));
-    assertFalse(b.equals(a));
-  }
-
-  public void testRemove() {
-    JsonArray array = new JsonArray();
-    try {
-      array.remove(0);
-      fail();
-    } catch (IndexOutOfBoundsException expected) {}
-    JsonPrimitive a = new JsonPrimitive("a");
-    array.add(a);
-    assertTrue(array.remove(a));
-    assertFalse(array.contains(a));
-    array.add(a);
-    array.add(new JsonPrimitive("b"));
-    assertEquals("b", array.remove(1).getAsString());
-    assertEquals(1, array.size());
-    assertTrue(array.contains(a));
-  }
-
-  public void testSet() {
-    JsonArray array = new JsonArray();
-    try {
-      array.set(0, new JsonPrimitive(1));
-      fail();
-    } catch (IndexOutOfBoundsException expected) {}
-    JsonPrimitive a = new JsonPrimitive("a");
-    array.add(a);
-    array.set(0, new JsonPrimitive("b"));
-    assertEquals("b", array.get(0).getAsString());
-    array.set(0, null);
-    assertNull(array.get(0));
-    array.set(0, new JsonPrimitive("c"));
-    assertEquals("c", array.get(0).getAsString());
-    assertEquals(1, array.size());
-  }
-
-  public void testDeepCopy() {
-    JsonArray original = new JsonArray();
-    JsonArray firstEntry = new JsonArray();
-    original.add(firstEntry);
-
-    JsonArray copy = original.deepCopy();
-    original.add(new JsonPrimitive("y"));
-
-    assertEquals(1, copy.size());
-    firstEntry.add(new JsonPrimitive("z"));
-
-    assertEquals(1, original.get(0).getAsJsonArray().size());
-    assertEquals(0, copy.get(0).getAsJsonArray().size());
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/JsonObjectTest.java b/gson/src/test/java/com/google/gson/JsonObjectTest.java
deleted file mode 100644
index 9423a24d2..000000000
--- a/gson/src/test/java/com/google/gson/JsonObjectTest.java
+++ /dev/null
@@ -1,172 +0,0 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import com.google.gson.common.MoreAsserts;
-
-import junit.framework.TestCase;
-
-/**
- * Unit test for the {@link JsonObject} class.
- *
- * @author Joel Leitch
- */
-public class JsonObjectTest extends TestCase {
-
-  public void testAddingAndRemovingObjectProperties() throws Exception {
-    JsonObject jsonObj = new JsonObject();
-    String propertyName = "property";
-    assertFalse(jsonObj.has(propertyName));
-    assertNull(jsonObj.get(propertyName));
-
-    JsonPrimitive value = new JsonPrimitive("blah");
-    jsonObj.add(propertyName, value);
-    assertEquals(value, jsonObj.get(propertyName));
-
-    JsonElement removedElement = jsonObj.remove(propertyName);
-    assertEquals(value, removedElement);
-    assertFalse(jsonObj.has(propertyName));
-    assertNull(jsonObj.get(propertyName));
-  }
-
-  public void testAddingNullPropertyValue() throws Exception {
-    String propertyName = "property";
-    JsonObject jsonObj = new JsonObject();
-    jsonObj.add(propertyName, null);
-
-    assertTrue(jsonObj.has(propertyName));
-
-    JsonElement jsonElement = jsonObj.get(propertyName);
-    assertNotNull(jsonElement);
-    assertTrue(jsonElement.isJsonNull());
-  }
-
-  public void testAddingNullOrEmptyPropertyName() throws Exception {
-    JsonObject jsonObj = new JsonObject();
-    try {
-      jsonObj.add(null, JsonNull.INSTANCE);
-      fail("Should not allow null property names.");
-    } catch (NullPointerException expected) { }
-
-    jsonObj.add("", JsonNull.INSTANCE);
-    jsonObj.add("   \t", JsonNull.INSTANCE);
-  }
-
-  public void testAddingBooleanProperties() throws Exception {
-    String propertyName = "property";
-    JsonObject jsonObj = new JsonObject();
-    jsonObj.addProperty(propertyName, true);
-
-    assertTrue(jsonObj.has(propertyName));
-
-    JsonElement jsonElement = jsonObj.get(propertyName);
-    assertNotNull(jsonElement);
-    assertTrue(jsonElement.getAsBoolean());
-  }
-
-  public void testAddingStringProperties() throws Exception {
-    String propertyName = "property";
-    String value = "blah";
-
-    JsonObject jsonObj = new JsonObject();
-    jsonObj.addProperty(propertyName, value);
-
-    assertTrue(jsonObj.has(propertyName));
-
-    JsonElement jsonElement = jsonObj.get(propertyName);
-    assertNotNull(jsonElement);
-    assertEquals(value, jsonElement.getAsString());
-  }
-
-  public void testAddingCharacterProperties() throws Exception {
-    String propertyName = "property";
-    char value = 'a';
-
-    JsonObject jsonObj = new JsonObject();
-    jsonObj.addProperty(propertyName, value);
-
-    assertTrue(jsonObj.has(propertyName));
-
-    JsonElement jsonElement = jsonObj.get(propertyName);
-    assertNotNull(jsonElement);
-    assertEquals(String.valueOf(value), jsonElement.getAsString());
-    assertEquals(value, jsonElement.getAsCharacter());
-  }
-
-  /**
-   * From bug report http://code.google.com/p/google-gson/issues/detail?id=182
-   */
-  public void testPropertyWithQuotes() {
-    JsonObject jsonObj = new JsonObject();
-    jsonObj.add("a\"b", new JsonPrimitive("c\"d"));
-    String json = new Gson().toJson(jsonObj);
-    assertEquals("{\"a\\\"b\":\"c\\\"d\"}", json);
-  }
-
-  /**
-   * From issue 227.
-   */
-  public void testWritePropertyWithEmptyStringName() {
-    JsonObject jsonObj = new JsonObject();
-    jsonObj.add("", new JsonPrimitive(true));
-    assertEquals("{\"\":true}", new Gson().toJson(jsonObj));
-
-  }
-
-  public void testReadPropertyWithEmptyStringName() {
-    JsonObject jsonObj = new JsonParser().parse("{\"\":true}").getAsJsonObject();
-    assertEquals(true, jsonObj.get("").getAsBoolean());
-  }
-
-  public void testEqualsOnEmptyObject() {
-    MoreAsserts.assertEqualsAndHashCode(new JsonObject(), new JsonObject());
-  }
-
-  public void testEqualsNonEmptyObject() {
-    JsonObject a = new JsonObject();
-    JsonObject b = new JsonObject();
-
-    assertEquals(a, a);
-
-    a.add("foo", new JsonObject());
-    assertFalse(a.equals(b));
-    assertFalse(b.equals(a));
-
-    b.add("foo", new JsonObject());
-    MoreAsserts.assertEqualsAndHashCode(a, b);
-
-    a.add("bar", new JsonObject());
-    assertFalse(a.equals(b));
-    assertFalse(b.equals(a));
-
-    b.add("bar", JsonNull.INSTANCE);
-    assertFalse(a.equals(b));
-    assertFalse(b.equals(a));
-  }
-
-  public void testDeepCopy() {
-    JsonObject original = new JsonObject();
-    JsonArray firstEntry = new JsonArray();
-    original.add("key", firstEntry);
-
-    JsonObject copy = original.deepCopy();
-    firstEntry.add(new JsonPrimitive("z"));
-
-    assertEquals(1, original.get("key").getAsJsonArray().size());
-    assertEquals(0, copy.get("key").getAsJsonArray().size());
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/JsonParserTest.java b/gson/src/test/java/com/google/gson/JsonParserTest.java
deleted file mode 100644
index 7efa7fd2e..000000000
--- a/gson/src/test/java/com/google/gson/JsonParserTest.java
+++ /dev/null
@@ -1,126 +0,0 @@
-/*
- * Copyright (C) 2009 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import java.io.CharArrayReader;
-import java.io.CharArrayWriter;
-import java.io.StringReader;
-
-import junit.framework.TestCase;
-
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.internal.Streams;
-import com.google.gson.stream.JsonReader;
-
-/**
- * Unit test for {@link JsonParser}
- *
- * @author Inderjeet Singh
- */
-public class JsonParserTest extends TestCase {
-  private JsonParser parser;
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    parser = new JsonParser();
-  }
-
-  public void testParseInvalidJson() {
-    try {
-      parser.parse("[[]");
-      fail();
-    } catch (JsonSyntaxException expected) { }
-  }
-
-  public void testParseUnquotedStringArrayFails() {
-    JsonElement element = parser.parse("[a,b,c]");
-    assertEquals("a", element.getAsJsonArray().get(0).getAsString());
-    assertEquals("b", element.getAsJsonArray().get(1).getAsString());
-    assertEquals("c", element.getAsJsonArray().get(2).getAsString());
-    assertEquals(3, element.getAsJsonArray().size());
-  }
-
-  public void testParseString() {
-    String json = "{a:10,b:'c'}";
-    JsonElement e = parser.parse(json);
-    assertTrue(e.isJsonObject());
-    assertEquals(10, e.getAsJsonObject().get("a").getAsInt());
-    assertEquals("c", e.getAsJsonObject().get("b").getAsString());
-  }
-
-  public void testParseEmptyString() {
-    JsonElement e = parser.parse("\"   \"");
-    assertTrue(e.isJsonPrimitive());
-    assertEquals("   ", e.getAsString());
-  }
-
-  public void testParseEmptyWhitespaceInput() {
-    JsonElement e = parser.parse("     ");
-    assertTrue(e.isJsonNull());
-  }
-
-  public void testParseUnquotedSingleWordStringFails() {
-    assertEquals("Test", parser.parse("Test").getAsString());
-  }
-
-  public void testParseUnquotedMultiWordStringFails() {
-    String unquotedSentence = "Test is a test..blah blah";
-    try {
-      parser.parse(unquotedSentence);
-      fail();
-    } catch (JsonSyntaxException expected) { }
-  }
-
-  public void testParseMixedArray() {
-    String json = "[{},13,\"stringValue\"]";
-    JsonElement e = parser.parse(json);
-    assertTrue(e.isJsonArray());
-
-    JsonArray  array = e.getAsJsonArray();
-    assertEquals("{}", array.get(0).toString());
-    assertEquals(13, array.get(1).getAsInt());
-    assertEquals("stringValue", array.get(2).getAsString());
-  }
-
-  public void testParseReader() {
-    StringReader reader = new StringReader("{a:10,b:'c'}");
-    JsonElement e = parser.parse(reader);
-    assertTrue(e.isJsonObject());
-    assertEquals(10, e.getAsJsonObject().get("a").getAsInt());
-    assertEquals("c", e.getAsJsonObject().get("b").getAsString());
-  }
-
-  public void testReadWriteTwoObjects() throws Exception {
-    Gson gson = new Gson();
-    CharArrayWriter writer = new CharArrayWriter();
-    BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one");
-    writer.write(gson.toJson(expectedOne).toCharArray());
-    BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two");
-    writer.write(gson.toJson(expectedTwo).toCharArray());
-    CharArrayReader reader = new CharArrayReader(writer.toCharArray());
-
-    JsonReader parser = new JsonReader(reader);
-    parser.setLenient(true);
-    JsonElement element1 = Streams.parse(parser);
-    JsonElement element2 = Streams.parse(parser);
-    BagOfPrimitives actualOne = gson.fromJson(element1, BagOfPrimitives.class);
-    assertEquals("one", actualOne.stringValue);
-    BagOfPrimitives actualTwo = gson.fromJson(element2, BagOfPrimitives.class);
-    assertEquals("two", actualTwo.stringValue);
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java b/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java
deleted file mode 100644
index fa3611c93..000000000
--- a/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java
+++ /dev/null
@@ -1,247 +0,0 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import com.google.gson.common.MoreAsserts;
-
-import junit.framework.TestCase;
-
-import java.math.BigDecimal;
-import java.math.BigInteger;
-
-/**
- * Unit test for the {@link JsonPrimitive} class.
- *
- * @author Joel Leitch
- */
-public class JsonPrimitiveTest extends TestCase {
-
-  public void testBoolean() throws Exception {
-    JsonPrimitive json = new JsonPrimitive(Boolean.TRUE);
-
-    assertTrue(json.isBoolean());
-    assertTrue(json.getAsBoolean());
-
-    // Extra support for booleans
-    json = new JsonPrimitive(1);
-    assertFalse(json.getAsBoolean());
-
-    json = new JsonPrimitive("1");
-    assertFalse(json.getAsBoolean());
-
-    json = new JsonPrimitive("true");
-    assertTrue(json.getAsBoolean());
-
-    json = new JsonPrimitive("TrUe");
-    assertTrue(json.getAsBoolean());
-
-    json = new JsonPrimitive("1.3");
-    assertFalse(json.getAsBoolean());
-  }
-
-  public void testParsingStringAsBoolean() throws Exception {
-    JsonPrimitive json = new JsonPrimitive("true");
-
-    assertFalse(json.isBoolean());
-    assertTrue(json.getAsBoolean());
-  }
-
-  public void testParsingStringAsNumber() throws Exception {
-    JsonPrimitive json = new JsonPrimitive("1");
-
-    assertFalse(json.isNumber());
-    assertEquals(1D, json.getAsDouble(), 0.00001);
-    assertEquals(1F, json.getAsFloat(), 0.00001);
-    assertEquals(1, json.getAsInt());
-    assertEquals(1L, json.getAsLong());
-    assertEquals((short) 1, json.getAsShort());
-    assertEquals((byte) 1, json.getAsByte());
-    assertEquals(new BigInteger("1"), json.getAsBigInteger());
-    assertEquals(new BigDecimal("1"), json.getAsBigDecimal());
-  }
-
-  public void testStringsAndChar() throws Exception {
-    JsonPrimitive json = new JsonPrimitive("abc");
-    assertTrue(json.isString());
-    assertEquals('a', json.getAsCharacter());
-    assertEquals("abc", json.getAsString());
-
-    json = new JsonPrimitive('z');
-    assertTrue(json.isString());
-    assertEquals('z', json.getAsCharacter());
-    assertEquals("z", json.getAsString());
-  }
-
-  public void testExponential() throws Exception {
-    JsonPrimitive json = new JsonPrimitive("1E+7");
-
-    assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal());
-    assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001);
-    assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001);
-
-    try {
-      json.getAsInt();
-      fail("Integers can not handle exponents like this.");
-    } catch (NumberFormatException expected) { }
-  }
-
-  public void testByteEqualsShort() {
-    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));
-    JsonPrimitive p2 = new JsonPrimitive(new Short((short)10));
-    assertEquals(p1, p2);
-    assertEquals(p1.hashCode(), p2.hashCode());
-  }
-
-  public void testByteEqualsInteger() {
-    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));
-    JsonPrimitive p2 = new JsonPrimitive(new Integer(10));
-    assertEquals(p1, p2);
-    assertEquals(p1.hashCode(), p2.hashCode());
-  }
-
-  public void testByteEqualsLong() {
-    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));
-    JsonPrimitive p2 = new JsonPrimitive(new Long(10L));
-    assertEquals(p1, p2);
-    assertEquals(p1.hashCode(), p2.hashCode());
-  }
-
-  public void testByteEqualsBigInteger() {
-    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));
-    JsonPrimitive p2 = new JsonPrimitive(new BigInteger("10"));
-    assertEquals(p1, p2);
-    assertEquals(p1.hashCode(), p2.hashCode());
-  }
-
-  public void testShortEqualsInteger() {
-    JsonPrimitive p1 = new JsonPrimitive(new Short((short)10));
-    JsonPrimitive p2 = new JsonPrimitive(new Integer(10));
-    assertEquals(p1, p2);
-    assertEquals(p1.hashCode(), p2.hashCode());
-  }
-
-  public void testShortEqualsLong() {
-    JsonPrimitive p1 = new JsonPrimitive(new Short((short)10));
-    JsonPrimitive p2 = new JsonPrimitive(new Long(10));
-    assertEquals(p1, p2);
-    assertEquals(p1.hashCode(), p2.hashCode());
-  }
-
-  public void testShortEqualsBigInteger() {
-    JsonPrimitive p1 = new JsonPrimitive(new Short((short)10));
-    JsonPrimitive p2 = new JsonPrimitive(new BigInteger("10"));
-    assertEquals(p1, p2);
-    assertEquals(p1.hashCode(), p2.hashCode());
-  }
-
-  public void testIntegerEqualsLong() {
-    JsonPrimitive p1 = new JsonPrimitive(new Integer(10));
-    JsonPrimitive p2 = new JsonPrimitive(new Long(10L));
-    assertEquals(p1, p2);
-    assertEquals(p1.hashCode(), p2.hashCode());
-  }
-
-  public void testIntegerEqualsBigInteger() {
-    JsonPrimitive p1 = new JsonPrimitive(new Integer(10));
-    JsonPrimitive p2 = new JsonPrimitive(new BigInteger("10"));
-    assertEquals(p1, p2);
-    assertEquals(p1.hashCode(), p2.hashCode());
-  }
-
-  public void testLongEqualsBigInteger() {
-    JsonPrimitive p1 = new JsonPrimitive(new Long(10L));
-    JsonPrimitive p2 = new JsonPrimitive(new BigInteger("10"));
-    assertEquals(p1, p2);
-    assertEquals(p1.hashCode(), p2.hashCode());
-  }
-
-  public void testFloatEqualsDouble() {
-    JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F));
-    JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D));
-    assertEquals(p1, p2);
-    assertEquals(p1.hashCode(), p2.hashCode());
-  }
-
-  public void testFloatEqualsBigDecimal() {
-    JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F));
-    JsonPrimitive p2 = new JsonPrimitive(new BigDecimal("10.25"));
-    assertEquals(p1, p2);
-    assertEquals(p1.hashCode(), p2.hashCode());
-  }
-
-  public void testDoubleEqualsBigDecimal() {
-    JsonPrimitive p1 = new JsonPrimitive(new Double(10.25D));
-    JsonPrimitive p2 = new JsonPrimitive(new BigDecimal("10.25"));
-    assertEquals(p1, p2);
-    assertEquals(p1.hashCode(), p2.hashCode());
-  }
-
-  public void testValidJsonOnToString() throws Exception {
-    JsonPrimitive json = new JsonPrimitive("Some\nEscaped\nValue");
-    assertEquals("\"Some\\nEscaped\\nValue\"", json.toString());
-
-    json = new JsonPrimitive(new BigDecimal("1.333"));
-    assertEquals("1.333", json.toString());
-  }
-
-  public void testEquals() {
-    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive("A"), new JsonPrimitive("A"));
-    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(true), new JsonPrimitive(true));
-    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(5L), new JsonPrimitive(5L));
-    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive('a'), new JsonPrimitive('a'));
-    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NaN), new JsonPrimitive(Float.NaN));
-    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NEGATIVE_INFINITY),
-        new JsonPrimitive(Float.NEGATIVE_INFINITY));
-    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.POSITIVE_INFINITY),
-        new JsonPrimitive(Float.POSITIVE_INFINITY));
-    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.NaN), new JsonPrimitive(Double.NaN));
-    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.NEGATIVE_INFINITY),
-        new JsonPrimitive(Double.NEGATIVE_INFINITY));
-    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.POSITIVE_INFINITY),
-        new JsonPrimitive(Double.POSITIVE_INFINITY));
-    assertFalse(new JsonPrimitive("a").equals(new JsonPrimitive("b")));
-    assertFalse(new JsonPrimitive(true).equals(new JsonPrimitive(false)));
-    assertFalse(new JsonPrimitive(0).equals(new JsonPrimitive(1)));
-  }
-
-  public void testEqualsAcrossTypes() {
-    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive("a"), new JsonPrimitive('a'));
-    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(new BigInteger("0")), new JsonPrimitive(0));
-    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(0), new JsonPrimitive(0L));
-    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(new BigInteger("0")), new JsonPrimitive(0));
-    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NaN), new JsonPrimitive(Double.NaN));
-  }
-
-  public void testEqualsIntegerAndBigInteger() {
-    JsonPrimitive a = new JsonPrimitive(5L);
-    JsonPrimitive b = new JsonPrimitive(new BigInteger("18446744073709551621")); // 2^64 + 5
-    // Ideally, the following assertion should have failed but the price is too much to pay 
-    // assertFalse(a + " equals " + b, a.equals(b));
-    assertTrue(a + " equals " + b, a.equals(b));
-  }
-
-  public void testEqualsDoesNotEquateStringAndNonStringTypes() {
-    assertFalse(new JsonPrimitive("true").equals(new JsonPrimitive(true)));
-    assertFalse(new JsonPrimitive("0").equals(new JsonPrimitive(0)));
-    assertFalse(new JsonPrimitive("NaN").equals(new JsonPrimitive(Float.NaN)));
-  }
-
-  public void testDeepCopy() {
-    JsonPrimitive a = new JsonPrimitive("a");
-    assertSame(a, a.deepCopy()); // Primitives are immutable!
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/JsonStreamParserTest.java b/gson/src/test/java/com/google/gson/JsonStreamParserTest.java
deleted file mode 100644
index 1b40b58b6..000000000
--- a/gson/src/test/java/com/google/gson/JsonStreamParserTest.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Copyright (C) 2009 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson;
-
-import junit.framework.TestCase;
-
-import java.util.NoSuchElementException;
-
-/**
- * Unit tests for {@link JsonStreamParser}
- * 
- * @author Inderjeet Singh
- */
-public class JsonStreamParserTest extends TestCase {
-  private JsonStreamParser parser;
-  
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    parser = new JsonStreamParser("'one' 'two'");
-  }
-
-  public void testParseTwoStrings() {
-    String actualOne = parser.next().getAsString();
-    assertEquals("one", actualOne);
-    String actualTwo = parser.next().getAsString();
-    assertEquals("two", actualTwo);
-  }
-
-  public void testIterator() {
-    assertTrue(parser.hasNext());
-    assertEquals("one", parser.next().getAsString());
-    assertTrue(parser.hasNext());
-    assertEquals("two", parser.next().getAsString());
-    assertFalse(parser.hasNext());
-  }
-
-  public void testNoSideEffectForHasNext() throws Exception {
-    assertTrue(parser.hasNext());
-    assertTrue(parser.hasNext());
-    assertTrue(parser.hasNext());
-    assertEquals("one", parser.next().getAsString());
-    
-    assertTrue(parser.hasNext());
-    assertTrue(parser.hasNext());
-    assertEquals("two", parser.next().getAsString());
-    
-    assertFalse(parser.hasNext());
-    assertFalse(parser.hasNext());
-  }
-
-  public void testCallingNextBeyondAvailableInput() {
-    parser.next();
-    parser.next();
-    try {
-      parser.next();
-      fail("Parser should not go beyond available input");
-    } catch (NoSuchElementException expected) {
-    }
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/LongSerializationPolicyTest.java b/gson/src/test/java/com/google/gson/LongSerializationPolicyTest.java
deleted file mode 100644
index d0a063208..000000000
--- a/gson/src/test/java/com/google/gson/LongSerializationPolicyTest.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*
- * Copyright (C) 2009 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import junit.framework.TestCase;
-
-/**
- * Unit test for the {@link LongSerializationPolicy} class.
- *
- * @author Inderjeet Singh
- * @author Joel Leitch
- */
-public class LongSerializationPolicyTest extends TestCase {
-
-  public void testDefaultLongSerialization() throws Exception {
-    JsonElement element = LongSerializationPolicy.DEFAULT.serialize(1556L);
-    assertTrue(element.isJsonPrimitive());
-    
-    JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive();
-    assertFalse(jsonPrimitive.isString());
-    assertTrue(jsonPrimitive.isNumber());
-    assertEquals(1556L, element.getAsLong());
-  }
-  
-  public void testDefaultLongSerializationIntegration() {
-    Gson gson = new GsonBuilder()
-        .setLongSerializationPolicy(LongSerializationPolicy.DEFAULT)
-        .create();
-    assertEquals("[1]", gson.toJson(new long[] { 1L }, long[].class));
-    assertEquals("[1]", gson.toJson(new Long[] { 1L }, Long[].class));
-  }
-
-  public void testStringLongSerialization() throws Exception {
-    JsonElement element = LongSerializationPolicy.STRING.serialize(1556L);
-    assertTrue(element.isJsonPrimitive());
-
-    JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive();
-    assertFalse(jsonPrimitive.isNumber());
-    assertTrue(jsonPrimitive.isString());
-    assertEquals("1556", element.getAsString());
-  }
-
-  public void testStringLongSerializationIntegration() {
-    Gson gson = new GsonBuilder()
-        .setLongSerializationPolicy(LongSerializationPolicy.STRING)
-        .create();
-    assertEquals("[\"1\"]", gson.toJson(new long[] { 1L }, long[].class));
-    assertEquals("[\"1\"]", gson.toJson(new Long[] { 1L }, Long[].class));
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/MixedStreamTest.java b/gson/src/test/java/com/google/gson/MixedStreamTest.java
deleted file mode 100644
index 00eb4bc8a..000000000
--- a/gson/src/test/java/com/google/gson/MixedStreamTest.java
+++ /dev/null
@@ -1,239 +0,0 @@
-/*
- * Copyright (C) 2010 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-import java.io.IOException;
-import java.io.StringReader;
-import java.io.StringWriter;
-import java.lang.reflect.Type;
-import java.util.Arrays;
-import java.util.List;
-import junit.framework.TestCase;
-
-public final class MixedStreamTest extends TestCase {
-
-  private static final Car BLUE_MUSTANG = new Car("mustang", 0x0000FF);
-  private static final Car BLACK_BMW = new Car("bmw", 0x000000);
-  private static final Car RED_MIATA = new Car("miata", 0xFF0000);
-  private static final String CARS_JSON = "[\n"
-      + "  {\n"
-      + "    \"name\": \"mustang\",\n"
-      + "    \"color\": 255\n"
-      + "  },\n"
-      + "  {\n"
-      + "    \"name\": \"bmw\",\n"
-      + "    \"color\": 0\n"
-      + "  },\n"
-      + "  {\n"
-      + "    \"name\": \"miata\",\n"
-      + "    \"color\": 16711680\n"
-      + "  }\n"
-      + "]";
-
-  public void testWriteMixedStreamed() throws IOException {
-    Gson gson = new Gson();
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-
-    jsonWriter.beginArray();
-    jsonWriter.setIndent("  ");
-    gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);
-    gson.toJson(BLACK_BMW, Car.class, jsonWriter);
-    gson.toJson(RED_MIATA, Car.class, jsonWriter);
-    jsonWriter.endArray();
-
-    assertEquals(CARS_JSON, stringWriter.toString());
-  }
-
-  public void testReadMixedStreamed() throws IOException {
-    Gson gson = new Gson();
-    StringReader stringReader = new StringReader(CARS_JSON);
-    JsonReader jsonReader = new JsonReader(stringReader);
-
-    jsonReader.beginArray();
-    assertEquals(BLUE_MUSTANG, gson.fromJson(jsonReader, Car.class));
-    assertEquals(BLACK_BMW, gson.fromJson(jsonReader, Car.class));
-    assertEquals(RED_MIATA, gson.fromJson(jsonReader, Car.class));
-    jsonReader.endArray();
-  }
-
-  public void testReaderDoesNotMutateState() throws IOException {
-    Gson gson = new Gson();
-    JsonReader jsonReader = new JsonReader(new StringReader(CARS_JSON));
-    jsonReader.beginArray();
-
-    jsonReader.setLenient(false);
-    gson.fromJson(jsonReader, Car.class);
-    assertFalse(jsonReader.isLenient());
-
-    jsonReader.setLenient(true);
-    gson.fromJson(jsonReader, Car.class);
-    assertTrue(jsonReader.isLenient());
-  }
-
-  public void testWriteDoesNotMutateState() throws IOException {
-    Gson gson = new Gson();
-    JsonWriter jsonWriter = new JsonWriter(new StringWriter());
-    jsonWriter.beginArray();
-
-    jsonWriter.setHtmlSafe(true);
-    jsonWriter.setLenient(true);
-    gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);
-    assertTrue(jsonWriter.isHtmlSafe());
-    assertTrue(jsonWriter.isLenient());
-
-    jsonWriter.setHtmlSafe(false);
-    jsonWriter.setLenient(false);
-    gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);
-    assertFalse(jsonWriter.isHtmlSafe());
-    assertFalse(jsonWriter.isLenient());
-  }
-
-  public void testReadInvalidState() throws IOException {
-    Gson gson = new Gson();
-    JsonReader jsonReader = new JsonReader(new StringReader(CARS_JSON));
-    jsonReader.beginArray();
-    jsonReader.beginObject();
-    try {
-      gson.fromJson(jsonReader, String.class);
-      fail();
-    } catch (JsonParseException expected) {
-    }
-  }
-
-  public void testReadClosed() throws IOException {
-    Gson gson = new Gson();
-    JsonReader jsonReader = new JsonReader(new StringReader(CARS_JSON));
-    jsonReader.close();
-    try {
-      gson.fromJson(jsonReader, new TypeToken<List<Car>>() {}.getType());
-      fail();
-    } catch (JsonParseException expected) {
-    }
-  }
-
-  public void testWriteInvalidState() throws IOException {
-    Gson gson = new Gson();
-    JsonWriter jsonWriter = new JsonWriter(new StringWriter());
-    jsonWriter.beginObject();
-    try {
-      gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testWriteClosed() throws IOException {
-    Gson gson = new Gson();
-    JsonWriter jsonWriter = new JsonWriter(new StringWriter());
-    jsonWriter.beginArray();
-    jsonWriter.endArray();
-    jsonWriter.close();
-    try {
-      gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testWriteNulls() {
-    Gson gson = new Gson();
-    try {
-      gson.toJson(new JsonPrimitive("hello"), (JsonWriter) null);
-      fail();
-    } catch (NullPointerException expected) {
-    }
-
-    StringWriter stringWriter = new StringWriter();
-    gson.toJson(null, new JsonWriter(stringWriter));
-    assertEquals("null", stringWriter.toString());
-  }
-
-  public void testReadNulls() {
-    Gson gson = new Gson();
-    try {
-      gson.fromJson((JsonReader) null, Integer.class);
-      fail();
-    } catch (NullPointerException expected) {
-    }
-    try {
-      gson.fromJson(new JsonReader(new StringReader("true")), null);
-      fail();
-    } catch (NullPointerException expected) {
-    }
-  }
-
-  public void testWriteHtmlSafe() {
-    List<String> contents = Arrays.asList("<", ">", "&", "=", "'");
-    Type type = new TypeToken<List<String>>() {}.getType();
-
-    StringWriter writer = new StringWriter();
-    new Gson().toJson(contents, type, new JsonWriter(writer));
-    assertEquals("[\"\\u003c\",\"\\u003e\",\"\\u0026\",\"\\u003d\",\"\\u0027\"]",
-        writer.toString());
-
-    writer = new StringWriter();
-    new GsonBuilder().disableHtmlEscaping().create()
-        .toJson(contents, type, new JsonWriter(writer));
-    assertEquals("[\"<\",\">\",\"&\",\"=\",\"'\"]",
-        writer.toString());
-  }
-
-  public void testWriteLenient() {
-    List<Double> doubles = Arrays.asList(Double.NaN, Double.NEGATIVE_INFINITY,
-        Double.POSITIVE_INFINITY, -0.0d, 0.5d, 0.0d);
-    Type type = new TypeToken<List<Double>>() {}.getType();
-
-    StringWriter writer = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(writer);
-    new GsonBuilder().serializeSpecialFloatingPointValues().create()
-        .toJson(doubles, type, jsonWriter);
-    assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
-
-    try {
-      new Gson().toJson(doubles, type, new JsonWriter(new StringWriter()));
-      fail();
-    } catch (IllegalArgumentException expected) {
-    }
-  }
-
-  static final class Car {
-    String name;
-    int color;
-
-    Car(String name, int color) {
-      this.name = name;
-      this.color = color;
-    }
-
-    // used by Gson
-    Car() {}
-
-    @Override public int hashCode() {
-      return name.hashCode() ^ color;
-    }
-
-    @Override public boolean equals(Object o) {
-      return o instanceof Car
-          && ((Car) o).name.equals(name)
-          && ((Car) o).color == color;
-    }
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java b/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java
deleted file mode 100644
index 2891bffca..000000000
--- a/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import junit.framework.TestCase;
-
-public final class ObjectTypeAdapterTest extends TestCase {
-  private final Gson gson = new GsonBuilder().create();
-  private final TypeAdapter<Object> adapter = gson.getAdapter(Object.class);
-
-  public void testDeserialize() throws Exception {
-    Map<?, ?> map = (Map<?, ?>) adapter.fromJson("{\"a\":5,\"b\":[1,2,null],\"c\":{\"x\":\"y\"}}");
-    assertEquals(5.0, map.get("a"));
-    assertEquals(Arrays.asList(1.0, 2.0, null), map.get("b"));
-    assertEquals(Collections.singletonMap("x", "y"), map.get("c"));
-    assertEquals(3, map.size());
-  }
-
-  public void testSerialize() throws Exception {
-    Object object = new RuntimeType();
-    assertEquals("{'a':5,'b':[1,2,null]}", adapter.toJson(object).replace("\"", "'"));
-  }
-  
-  public void testSerializeNullValue() throws Exception {
-    Map<String, Object> map = new LinkedHashMap<String, Object>();
-    map.put("a", null);
-    assertEquals("{'a':null}", adapter.toJson(map).replace('"', '\''));
-  }
-
-  public void testDeserializeNullValue() throws Exception {
-    Map<String, Object> map = new LinkedHashMap<String, Object>();
-    map.put("a", null);
-    assertEquals(map, adapter.fromJson("{\"a\":null}"));
-  }
-
-  public void testSerializeObject() throws Exception {
-    assertEquals("{}", adapter.toJson(new Object()));
-  }
-
-  @SuppressWarnings("unused")
-  private class RuntimeType {
-    Object a = 5;
-    Object b = Arrays.asList(1, 2, null);
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java b/gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java
deleted file mode 100644
index 79ae1698f..000000000
--- a/gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-import java.io.IOException;
-import java.util.Locale;
-import junit.framework.TestCase;
-
-/**
- * @author Jesse Wilson
- */
-public class OverrideCoreTypeAdaptersTest extends TestCase {
-  private static final TypeAdapter<Boolean> booleanAsIntAdapter = new TypeAdapter<Boolean>() {
-    @Override public void write(JsonWriter out, Boolean value) throws IOException {
-      out.value(value ? 1 : 0);
-    }
-    @Override public Boolean read(JsonReader in) throws IOException {
-      int value = in.nextInt();
-      return value != 0;
-    }
-  };
-
-  private static final TypeAdapter<String> swapCaseStringAdapter = new TypeAdapter<String>() {
-    @Override public void write(JsonWriter out, String value) throws IOException {
-      out.value(value.toUpperCase(Locale.US));
-    }
-    @Override public String read(JsonReader in) throws IOException {
-      return in.nextString().toLowerCase(Locale.US);
-    }
-  };
-
-  public void testOverrideWrapperBooleanAdapter() {
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapter(Boolean.class, booleanAsIntAdapter)
-        .create();
-    assertEquals("true", gson.toJson(true, boolean.class));
-    assertEquals("1", gson.toJson(true, Boolean.class));
-    assertEquals(Boolean.TRUE, gson.fromJson("true", boolean.class));
-    assertEquals(Boolean.TRUE, gson.fromJson("1", Boolean.class));
-    assertEquals(Boolean.FALSE, gson.fromJson("0", Boolean.class));
-  }
-
-  public void testOverridePrimitiveBooleanAdapter() {
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapter(boolean.class, booleanAsIntAdapter)
-        .create();
-    assertEquals("1", gson.toJson(true, boolean.class));
-    assertEquals("true", gson.toJson(true, Boolean.class));
-    assertEquals(Boolean.TRUE, gson.fromJson("1", boolean.class));
-    assertEquals(Boolean.TRUE, gson.fromJson("true", Boolean.class));
-    assertEquals("0", gson.toJson(false, boolean.class));
-  }
-
-  public void testOverrideStringAdapter() {
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapter(String.class, swapCaseStringAdapter)
-        .create();
-    assertEquals("\"HELLO\"", gson.toJson("Hello", String.class));
-    assertEquals("hello", gson.fromJson("\"Hello\"", String.class));
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java b/gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java
deleted file mode 100644
index 0959ee429..000000000
--- a/gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java
+++ /dev/null
@@ -1,177 +0,0 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import com.google.gson.internal.$Gson$Types;
-
-import com.google.gson.internal.Primitives;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.ParameterizedType;
-import java.lang.reflect.Type;
-
-
-/**
- * This class contains some test fixtures for Parameterized types. These classes should ideally
- * belong either in the common or functional package, but they are placed here because they need
- * access to package protected elements of com.google.gson.
- *
- * @author Inderjeet Singh
- * @author Joel Leitch
- */
-public class ParameterizedTypeFixtures {
-
-  public static class MyParameterizedType<T> {
-    public final T value;
-    public MyParameterizedType(T value) {
-      this.value = value;
-    }
-    public T getValue() {
-      return value;
-    }
-
-    public String getExpectedJson() {
-      String valueAsJson = getExpectedJson(value);
-      return String.format("{\"value\":%s}", valueAsJson);
-    }
-
-    private String getExpectedJson(Object obj) {
-      Class<?> clazz = obj.getClass();
-      if (Primitives.isWrapperType(Primitives.wrap(clazz))) {
-        return obj.toString();
-      } else if (obj.getClass().equals(String.class)) {
-        return "\"" + obj.toString() + "\"";
-      } else {
-        // Try invoking a getExpectedJson() method if it exists
-        try {
-          Method method = clazz.getMethod("getExpectedJson");
-          Object results = method.invoke(obj);
-          return (String) results;
-        } catch (SecurityException e) {
-          throw new RuntimeException(e);
-        } catch (NoSuchMethodException e) {
-          throw new RuntimeException(e);
-        } catch (IllegalArgumentException e) {
-          throw new RuntimeException(e);
-        } catch (IllegalAccessException e) {
-          throw new RuntimeException(e);
-        } catch (InvocationTargetException e) {
-          throw new RuntimeException(e);
-        }
-      }
-    }
-
-    @Override
-    public int hashCode() {
-      return value == null ? 0 : value.hashCode();
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public boolean equals(Object obj) {
-      if (this == obj) {
-        return true;
-      }
-      if (obj == null) {
-        return false;
-      }
-      if (getClass() != obj.getClass()) {
-        return false;
-      }
-      MyParameterizedType<T> other = (MyParameterizedType<T>) obj;
-      if (value == null) {
-        if (other.value != null) {
-          return false;
-        }
-      } else if (!value.equals(other.value)) {
-        return false;
-      }
-      return true;
-    }
-  }
-
-  public static class MyParameterizedTypeInstanceCreator<T>
-      implements InstanceCreator<MyParameterizedType<T>>{
-    private final T instanceOfT;
-    /**
-     * Caution the specified instance is reused by the instance creator for each call.
-     * This means that the fields of the same objects will be overwritten by Gson.
-     * This is usually fine in tests since there we deserialize just once, but quite
-     * dangerous in practice.
-     *
-     * @param instanceOfT
-     */
-    public MyParameterizedTypeInstanceCreator(T instanceOfT) {
-      this.instanceOfT = instanceOfT;
-    }
-    @Override public MyParameterizedType<T> createInstance(Type type) {
-      return new MyParameterizedType<T>(instanceOfT);
-    }
-  }
-
-  public static final class MyParameterizedTypeAdapter<T>
-  implements JsonSerializer<MyParameterizedType<T>>, JsonDeserializer<MyParameterizedType<T>> {
-    @SuppressWarnings("unchecked")
-    public static<T> String getExpectedJson(MyParameterizedType<T> obj) {
-      Class<T> clazz = (Class<T>) obj.value.getClass();
-      boolean addQuotes = !clazz.isArray() && !Primitives.unwrap(clazz).isPrimitive();
-      StringBuilder sb = new StringBuilder("{\"");
-      sb.append(obj.value.getClass().getSimpleName()).append("\":");
-      if (addQuotes) {
-        sb.append("\"");
-      }
-      sb.append(obj.value.toString());
-      if (addQuotes) {
-        sb.append("\"");
-      }
-      sb.append("}");
-      return sb.toString();
-    }
-
-    @Override public JsonElement serialize(MyParameterizedType<T> src, Type classOfSrc,
-        JsonSerializationContext context) {
-      JsonObject json = new JsonObject();
-      T value = src.getValue();
-      json.add(value.getClass().getSimpleName(), context.serialize(value));
-      return json;
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override public MyParameterizedType<T> deserialize(JsonElement json, Type typeOfT,
-        JsonDeserializationContext context) throws JsonParseException {
-      Type genericClass = ((ParameterizedType) typeOfT).getActualTypeArguments()[0];
-      Class<?> rawType = $Gson$Types.getRawType(genericClass);
-      String className = rawType.getSimpleName();
-      JsonElement jsonElement = json.getAsJsonObject().get(className);
-
-      T value;
-      if (genericClass == Integer.class) {
-        value = (T) Integer.valueOf(jsonElement.getAsInt());
-      } else if (genericClass == String.class) {
-        value = (T) jsonElement.getAsString();
-      } else {
-        value = (T) jsonElement;
-      }
-
-      if (Primitives.isPrimitive(genericClass)) {
-        PrimitiveTypeAdapter typeAdapter = new PrimitiveTypeAdapter();
-        value = (T) typeAdapter.adaptType(value, rawType);
-      }
-      return new MyParameterizedType<T>(value);
-    }
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/ParameterizedTypeTest.java b/gson/src/test/java/com/google/gson/ParameterizedTypeTest.java
deleted file mode 100644
index 24d78e89d..000000000
--- a/gson/src/test/java/com/google/gson/ParameterizedTypeTest.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
-
-import junit.framework.TestCase;
-
-import java.lang.reflect.ParameterizedType;
-import java.lang.reflect.Type;
-import java.util.List;
-
-/**
- * Unit tests for {@code ParameterizedType}s created by the {@link $Gson$Types} class.
- *
- * @author Inderjeet Singh
- * @author Joel Leitch
- */
-public class ParameterizedTypeTest extends TestCase {
-  private ParameterizedType ourType;
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    ourType = $Gson$Types.newParameterizedTypeWithOwner(null, List.class, String.class);
-  }
-
-  public void testOurTypeFunctionality() throws Exception {
-    Type parameterizedType = new TypeToken<List<String>>() {}.getType();
-    assertNull(ourType.getOwnerType());
-    assertEquals(String.class, ourType.getActualTypeArguments()[0]);
-    assertEquals(List.class, ourType.getRawType());
-    assertEquals(parameterizedType, ourType);
-    assertEquals(parameterizedType.hashCode(), ourType.hashCode());
-  }
-
-  public void testNotEquals() throws Exception {
-    Type differentParameterizedType = new TypeToken<List<Integer>>() {}.getType();
-    assertFalse(differentParameterizedType.equals(ourType));
-    assertFalse(ourType.equals(differentParameterizedType));
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java b/gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java
deleted file mode 100644
index fb38687b5..000000000
--- a/gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import com.google.gson.internal.Primitives;
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-
-/**
- * Handles type conversion from some object to some primitive (or primitive
- * wrapper instance).
- *
- * @author Joel Leitch
- */
-final class PrimitiveTypeAdapter {
-
-  @SuppressWarnings("unchecked")
-  public <T> T adaptType(Object from, Class<T> to) {
-    Class<?> aClass = Primitives.wrap(to);
-    if (Primitives.isWrapperType(aClass)) {
-      if (aClass == Character.class) {
-        String value = from.toString();
-        if (value.length() == 1) {
-          return (T) (Character) from.toString().charAt(0);
-        }
-        throw new JsonParseException("The value: " + value + " contains more than a character.");
-      }
-
-      try {
-        Constructor<?> constructor = aClass.getConstructor(String.class);
-        return (T) constructor.newInstance(from.toString());
-      } catch (NoSuchMethodException e) {
-        throw new JsonParseException(e);
-      } catch (IllegalAccessException e) {
-        throw new JsonParseException(e);
-      } catch (InvocationTargetException e) {
-        throw new JsonParseException(e);
-      } catch (InstantiationException e) {
-        throw new JsonParseException(e);
-      }
-    } else if (Enum.class.isAssignableFrom(to)) {
-      // Case where the type being adapted to is an Enum
-      // We will try to convert from.toString() to the enum
-      try {
-        Method valuesMethod = to.getMethod("valueOf", String.class);
-        return (T) valuesMethod.invoke(null, from.toString());
-      } catch (NoSuchMethodException e) {
-        throw new RuntimeException(e);
-      } catch (IllegalAccessException e) {
-        throw new RuntimeException(e);
-      } catch (InvocationTargetException e) {
-        throw new RuntimeException(e);
-      }
-    } else {
-      throw new JsonParseException("Can not adapt type " + from.getClass() + " to " + to);
-    }
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java b/gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java
deleted file mode 100644
index d878850ec..000000000
--- a/gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson;
-
-import com.google.gson.annotations.Since;
-import com.google.gson.internal.Excluder;
-import junit.framework.TestCase;
-
-/**
- * Unit tests for the {@link Excluder} class.
- *
- * @author Joel Leitch
- */
-public class VersionExclusionStrategyTest extends TestCase {
-  private static final double VERSION = 5.0D;
-
-  public void testClassAndFieldAreAtSameVersion() throws Exception {
-    Excluder excluder = Excluder.DEFAULT.withVersion(VERSION);
-    assertFalse(excluder.excludeClass(MockObject.class, true));
-    assertFalse(excluder.excludeField(MockObject.class.getField("someField"), true));
-  }
-
-  public void testClassAndFieldAreBehindInVersion() throws Exception {
-    Excluder excluder = Excluder.DEFAULT.withVersion(VERSION + 1);
-    assertFalse(excluder.excludeClass(MockObject.class, true));
-    assertFalse(excluder.excludeField(MockObject.class.getField("someField"), true));
-  }
-
-  public void testClassAndFieldAreAheadInVersion() throws Exception {
-    Excluder excluder = Excluder.DEFAULT.withVersion(VERSION - 1);
-    assertTrue(excluder.excludeClass(MockObject.class, true));
-    assertTrue(excluder.excludeField(MockObject.class.getField("someField"), true));
-  }
-
-  @Since(VERSION)
-  private static class MockObject {
-
-    @Since(VERSION)
-    public final int someField = 0;
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java b/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java
deleted file mode 100644
index 2aeeeb764..000000000
--- a/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java
+++ /dev/null
@@ -1,290 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.internal;
-
-import com.google.gson.common.MoreAsserts;
-import com.google.gson.internal.LinkedHashTreeMap.AvlBuilder;
-import com.google.gson.internal.LinkedHashTreeMap.AvlIterator;
-import com.google.gson.internal.LinkedHashTreeMap.Node;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Random;
-import junit.framework.TestCase;
-
-public final class LinkedHashTreeMapTest extends TestCase {
-  public void testIterationOrder() {
-    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
-    map.put("a", "android");
-    map.put("c", "cola");
-    map.put("b", "bbq");
-    assertIterationOrder(map.keySet(), "a", "c", "b");
-    assertIterationOrder(map.values(), "android", "cola", "bbq");
-  }
-
-  public void testRemoveRootDoesNotDoubleUnlink() {
-    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
-    map.put("a", "android");
-    map.put("c", "cola");
-    map.put("b", "bbq");
-    Iterator<Map.Entry<String,String>> it = map.entrySet().iterator();
-    it.next();
-    it.next();
-    it.next();
-    it.remove();
-    assertIterationOrder(map.keySet(), "a", "c");
-  }
-
-  public void testPutNullKeyFails() {
-    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
-    try {
-      map.put(null, "android");
-      fail();
-    } catch (NullPointerException expected) {
-    }
-  }
-
-  public void testPutNonComparableKeyFails() {
-    LinkedHashTreeMap<Object, String> map = new LinkedHashTreeMap<Object, String>();
-    try {
-      map.put(new Object(), "android");
-      fail();
-    } catch (ClassCastException expected) {}
-  }
-
-  public void testContainsNonComparableKeyReturnsFalse() {
-    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
-    map.put("a", "android");
-    assertFalse(map.containsKey(new Object()));
-  }
-
-  public void testContainsNullKeyIsAlwaysFalse() {
-    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
-    map.put("a", "android");
-    assertFalse(map.containsKey(null));
-  }
-
-  public void testPutOverrides() throws Exception {
-    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
-    assertNull(map.put("d", "donut"));
-    assertNull(map.put("e", "eclair"));
-    assertNull(map.put("f", "froyo"));
-    assertEquals(3, map.size());
-
-    assertEquals("donut", map.get("d"));
-    assertEquals("donut", map.put("d", "done"));
-    assertEquals(3, map.size());
-  }
-
-  public void testEmptyStringValues() {
-    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
-    map.put("a", "");
-    assertTrue(map.containsKey("a"));
-    assertEquals("", map.get("a"));
-  }
-
-  // NOTE that this does not happen every time, but given the below predictable random,
-  // this test will consistently fail (assuming the initial size is 16 and rehashing
-  // size remains at 3/4)
-  public void testForceDoublingAndRehash() throws Exception {
-    Random random = new Random(1367593214724L);
-    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
-    String[] keys = new String[1000];
-    for (int i = 0; i < keys.length; i++) {
-      keys[i] = Integer.toString(Math.abs(random.nextInt()), 36) + "-" + i;
-      map.put(keys[i], "" + i);
-    }
-
-    for (int i = 0; i < keys.length; i++) {
-      String key = keys[i];
-      assertTrue(map.containsKey(key));
-      assertEquals("" + i, map.get(key));
-    }
-  }
-
-  public void testClear() {
-    LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
-    map.put("a", "android");
-    map.put("c", "cola");
-    map.put("b", "bbq");
-    map.clear();
-    assertIterationOrder(map.keySet());
-    assertEquals(0, map.size());
-  }
-
-  public void testEqualsAndHashCode() throws Exception {
-    LinkedHashTreeMap<String, Integer> map1 = new LinkedHashTreeMap<String, Integer>();
-    map1.put("A", 1);
-    map1.put("B", 2);
-    map1.put("C", 3);
-    map1.put("D", 4);
-
-    LinkedHashTreeMap<String, Integer> map2 = new LinkedHashTreeMap<String, Integer>();
-    map2.put("C", 3);
-    map2.put("B", 2);
-    map2.put("D", 4);
-    map2.put("A", 1);
-
-    MoreAsserts.assertEqualsAndHashCode(map1, map2);
-  }
-
-  public void testAvlWalker() {
-    assertAvlWalker(node(node("a"), "b", node("c")),
-        "a", "b", "c");
-    assertAvlWalker(node(node(node("a"), "b", node("c")), "d", node(node("e"), "f", node("g"))),
-        "a", "b", "c", "d", "e", "f", "g");
-    assertAvlWalker(node(node(null, "a", node("b")), "c", node(node("d"), "e", null)),
-        "a", "b", "c", "d", "e");
-    assertAvlWalker(node(null, "a", node(null, "b", node(null, "c", node("d")))),
-        "a", "b", "c", "d");
-    assertAvlWalker(node(node(node(node("a"), "b", null), "c", null), "d", null),
-        "a", "b", "c", "d");
-  }
-
-  private void assertAvlWalker(Node<String, String> root, String... values) {
-    AvlIterator<String, String> iterator = new AvlIterator<String, String>();
-    iterator.reset(root);
-    for (String value : values) {
-      assertEquals(value, iterator.next().getKey());
-    }
-    assertNull(iterator.next());
-  }
-
-  public void testAvlBuilder() {
-    assertAvlBuilder(1, "a");
-    assertAvlBuilder(2, "(. a b)");
-    assertAvlBuilder(3, "(a b c)");
-    assertAvlBuilder(4, "(a b (. c d))");
-    assertAvlBuilder(5, "(a b (c d e))");
-    assertAvlBuilder(6, "((. a b) c (d e f))");
-    assertAvlBuilder(7, "((a b c) d (e f g))");
-    assertAvlBuilder(8, "((a b c) d (e f (. g h)))");
-    assertAvlBuilder(9, "((a b c) d (e f (g h i)))");
-    assertAvlBuilder(10, "((a b c) d ((. e f) g (h i j)))");
-    assertAvlBuilder(11, "((a b c) d ((e f g) h (i j k)))");
-    assertAvlBuilder(12, "((a b (. c d)) e ((f g h) i (j k l)))");
-    assertAvlBuilder(13, "((a b (c d e)) f ((g h i) j (k l m)))");
-    assertAvlBuilder(14, "(((. a b) c (d e f)) g ((h i j) k (l m n)))");
-    assertAvlBuilder(15, "(((a b c) d (e f g)) h ((i j k) l (m n o)))");
-    assertAvlBuilder(16, "(((a b c) d (e f g)) h ((i j k) l (m n (. o p))))");
-    assertAvlBuilder(30, "((((. a b) c (d e f)) g ((h i j) k (l m n))) o "
-        + "(((p q r) s (t u v)) w ((x y z) A (B C D))))");
-    assertAvlBuilder(31, "((((a b c) d (e f g)) h ((i j k) l (m n o))) p "
-        + "(((q r s) t (u v w)) x ((y z A) B (C D E))))");
-  }
-
-  private void assertAvlBuilder(int size, String expected) {
-    char[] values = "abcdefghijklmnopqrstuvwxyzABCDE".toCharArray();
-    AvlBuilder<String, String> avlBuilder = new AvlBuilder<String, String>();
-    avlBuilder.reset(size);
-    for (int i = 0; i < size; i++) {
-      avlBuilder.add(node(Character.toString(values[i])));
-    }
-    assertTree(expected, avlBuilder.root());
-  }
-
-  public void testDoubleCapacity() {
-    @SuppressWarnings("unchecked") // Arrays and generics don't get along.
-    Node<String, String>[] oldTable = new Node[1];
-    oldTable[0] = node(node(node("a"), "b", node("c")), "d", node(node("e"), "f", node("g")));
-
-    Node<String, String>[] newTable = LinkedHashTreeMap.doubleCapacity(oldTable);
-    assertTree("(b d f)", newTable[0]); // Even hash codes!
-    assertTree("(a c (. e g))", newTable[1]); // Odd hash codes!
-  }
-
-  public void testDoubleCapacityAllNodesOnLeft() {
-    @SuppressWarnings("unchecked") // Arrays and generics don't get along.
-    Node<String, String>[] oldTable = new Node[1];
-    oldTable[0] = node(node("b"), "d", node("f"));
-
-    Node<String, String>[] newTable = LinkedHashTreeMap.doubleCapacity(oldTable);
-    assertTree("(b d f)", newTable[0]); // Even hash codes!
-    assertNull(newTable[1]); // Odd hash codes!
-
-    for (Node<?, ?> node : newTable) {
-      if (node != null) {
-        assertConsistent(node);
-      }
-    }
-  }
-
-  private static final Node<String, String> head = new Node<String, String>();
-
-  private Node<String, String> node(String value) {
-    return new Node<String, String>(null, value, value.hashCode(), head, head);
-  }
-
-  private Node<String, String> node(Node<String, String> left, String value,
-      Node<String, String> right) {
-    Node<String, String> result = node(value);
-    if (left != null) {
-      result.left = left;
-      left.parent = result;
-    }
-    if (right != null) {
-      result.right = right;
-      right.parent = result;
-    }
-    return result;
-  }
-
-  private void assertTree(String expected, Node<?, ?> root) {
-    assertEquals(expected, toString(root));
-    assertConsistent(root);
-  }
-
-  private void assertConsistent(Node<?, ?> node) {
-    int leftHeight = 0;
-    if (node.left != null) {
-      assertConsistent(node.left);
-      assertSame(node, node.left.parent);
-      leftHeight = node.left.height;
-    }
-    int rightHeight = 0;
-    if (node.right != null) {
-      assertConsistent(node.right);
-      assertSame(node, node.right.parent);
-      rightHeight = node.right.height;
-    }
-    if (node.parent != null) {
-      assertTrue(node.parent.left == node || node.parent.right == node);
-    }
-    if (Math.max(leftHeight, rightHeight) + 1 != node.height) {
-      fail();
-    }
-  }
-
-  private String toString(Node<?, ?> root) {
-    if (root == null) {
-      return ".";
-    } else if (root.left == null && root.right == null) {
-      return String.valueOf(root.key);
-    } else {
-      return String.format("(%s %s %s)", toString(root.left), root.key, toString(root.right));
-    }
-  }
-
-  private <T> void assertIterationOrder(Iterable<T> actual, T... expected) {
-    ArrayList<T> actualList = new ArrayList<T>();
-    for (T t : actual) {
-      actualList.add(t);
-    }
-    assertEquals(Arrays.asList(expected), actualList);
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java b/gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java
deleted file mode 100644
index 50661664c..000000000
--- a/gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java
+++ /dev/null
@@ -1,217 +0,0 @@
-/*
- * Copyright (C) 2014 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.stream;
-
-import java.io.IOException;
-import java.io.StringReader;
-import junit.framework.TestCase;
-
-@SuppressWarnings("resource")
-public class JsonReaderPathTest extends TestCase {
-  public void testPath() throws IOException {
-    JsonReader reader = new JsonReader(
-        new StringReader("{\"a\":[2,true,false,null,\"b\",{\"c\":\"d\"},[3]]}"));
-    assertEquals("$", reader.getPath());
-    reader.beginObject();
-    assertEquals("$.", reader.getPath());
-    reader.nextName();
-    assertEquals("$.a", reader.getPath());
-    reader.beginArray();
-    assertEquals("$.a[0]", reader.getPath());
-    reader.nextInt();
-    assertEquals("$.a[1]", reader.getPath());
-    reader.nextBoolean();
-    assertEquals("$.a[2]", reader.getPath());
-    reader.nextBoolean();
-    assertEquals("$.a[3]", reader.getPath());
-    reader.nextNull();
-    assertEquals("$.a[4]", reader.getPath());
-    reader.nextString();
-    assertEquals("$.a[5]", reader.getPath());
-    reader.beginObject();
-    assertEquals("$.a[5].", reader.getPath());
-    reader.nextName();
-    assertEquals("$.a[5].c", reader.getPath());
-    reader.nextString();
-    assertEquals("$.a[5].c", reader.getPath());
-    reader.endObject();
-    assertEquals("$.a[6]", reader.getPath());
-    reader.beginArray();
-    assertEquals("$.a[6][0]", reader.getPath());
-    reader.nextInt();
-    assertEquals("$.a[6][1]", reader.getPath());
-    reader.endArray();
-    assertEquals("$.a[7]", reader.getPath());
-    reader.endArray();
-    assertEquals("$.a", reader.getPath());
-    reader.endObject();
-    assertEquals("$", reader.getPath());
-  }
-
-  public void testObjectPath() throws IOException {
-    JsonReader reader = new JsonReader(new StringReader("{\"a\":1,\"b\":2}"));
-    assertEquals("$", reader.getPath());
-
-    reader.peek();
-    assertEquals("$", reader.getPath());
-    reader.beginObject();
-    assertEquals("$.", reader.getPath());
-
-    reader.peek();
-    assertEquals("$.", reader.getPath());
-    reader.nextName();
-    assertEquals("$.a", reader.getPath());
-
-    reader.peek();
-    assertEquals("$.a", reader.getPath());
-    reader.nextInt();
-    assertEquals("$.a", reader.getPath());
-
-    reader.peek();
-    assertEquals("$.a", reader.getPath());
-    reader.nextName();
-    assertEquals("$.b", reader.getPath());
-
-    reader.peek();
-    assertEquals("$.b", reader.getPath());
-    reader.nextInt();
-    assertEquals("$.b", reader.getPath());
-
-    reader.peek();
-    assertEquals("$.b", reader.getPath());
-    reader.endObject();
-    assertEquals("$", reader.getPath());
-
-    reader.peek();
-    assertEquals("$", reader.getPath());
-    reader.close();
-    assertEquals("$", reader.getPath());
-  }
-
-  public void testArrayPath() throws IOException {
-    JsonReader reader = new JsonReader(new StringReader("[1,2]"));
-    assertEquals("$", reader.getPath());
-
-    reader.peek();
-    assertEquals("$", reader.getPath());
-    reader.beginArray();
-    assertEquals("$[0]", reader.getPath());
-
-    reader.peek();
-    assertEquals("$[0]", reader.getPath());
-    reader.nextInt();
-    assertEquals("$[1]", reader.getPath());
-
-    reader.peek();
-    assertEquals("$[1]", reader.getPath());
-    reader.nextInt();
-    assertEquals("$[2]", reader.getPath());
-
-    reader.peek();
-    assertEquals("$[2]", reader.getPath());
-    reader.endArray();
-    assertEquals("$", reader.getPath());
-
-    reader.peek();
-    assertEquals("$", reader.getPath());
-    reader.close();
-    assertEquals("$", reader.getPath());
-  }
-
-  public void testMultipleTopLevelValuesInOneDocument() throws IOException {
-    JsonReader reader = new JsonReader(new StringReader("[][]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    reader.endArray();
-    assertEquals("$", reader.getPath());
-    reader.beginArray();
-    reader.endArray();
-    assertEquals("$", reader.getPath());
-  }
-
-  public void testSkipArrayElements() throws IOException {
-    JsonReader reader = new JsonReader(new StringReader("[1,2,3]"));
-    reader.beginArray();
-    reader.skipValue();
-    reader.skipValue();
-    assertEquals("$[2]", reader.getPath());
-  }
-
-  public void testSkipObjectNames() throws IOException {
-    JsonReader reader = new JsonReader(new StringReader("{\"a\":1}"));
-    reader.beginObject();
-    reader.skipValue();
-    assertEquals("$.null", reader.getPath());
-  }
-
-  public void testSkipObjectValues() throws IOException {
-    JsonReader reader = new JsonReader(new StringReader("{\"a\":1,\"b\":2}"));
-    reader.beginObject();
-    reader.nextName();
-    reader.skipValue();
-    assertEquals("$.null", reader.getPath());
-    reader.nextName();
-    assertEquals("$.b", reader.getPath());
-  }
-
-  public void testSkipNestedStructures() throws IOException {
-    JsonReader reader = new JsonReader(new StringReader("[[1,2,3],4]"));
-    reader.beginArray();
-    reader.skipValue();
-    assertEquals("$[1]", reader.getPath());
-  }
-
-  public void testArrayOfObjects() throws IOException {
-    JsonReader reader = new JsonReader(new StringReader("[{},{},{}]"));
-    reader.beginArray();
-    assertEquals("$[0]", reader.getPath());
-    reader.beginObject();
-    assertEquals("$[0].", reader.getPath());
-    reader.endObject();
-    assertEquals("$[1]", reader.getPath());
-    reader.beginObject();
-    assertEquals("$[1].", reader.getPath());
-    reader.endObject();
-    assertEquals("$[2]", reader.getPath());
-    reader.beginObject();
-    assertEquals("$[2].", reader.getPath());
-    reader.endObject();
-    assertEquals("$[3]", reader.getPath());
-    reader.endArray();
-    assertEquals("$", reader.getPath());
-  }
-
-  public void testArrayOfArrays() throws IOException {
-    JsonReader reader = new JsonReader(new StringReader("[[],[],[]]"));
-    reader.beginArray();
-    assertEquals("$[0]", reader.getPath());
-    reader.beginArray();
-    assertEquals("$[0][0]", reader.getPath());
-    reader.endArray();
-    assertEquals("$[1]", reader.getPath());
-    reader.beginArray();
-    assertEquals("$[1][0]", reader.getPath());
-    reader.endArray();
-    assertEquals("$[2]", reader.getPath());
-    reader.beginArray();
-    assertEquals("$[2][0]", reader.getPath());
-    reader.endArray();
-    assertEquals("$[3]", reader.getPath());
-    reader.endArray();
-    assertEquals("$", reader.getPath());
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
deleted file mode 100644
index a192940f8..000000000
--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
+++ /dev/null
@@ -1,1760 +0,0 @@
-/*
- * Copyright (C) 2010 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.stream;
-
-import java.io.EOFException;
-import java.io.IOException;
-import java.io.Reader;
-import java.io.StringReader;
-import java.util.Arrays;
-import junit.framework.TestCase;
-
-import static com.google.gson.stream.JsonToken.BEGIN_ARRAY;
-import static com.google.gson.stream.JsonToken.BEGIN_OBJECT;
-import static com.google.gson.stream.JsonToken.BOOLEAN;
-import static com.google.gson.stream.JsonToken.END_ARRAY;
-import static com.google.gson.stream.JsonToken.END_OBJECT;
-import static com.google.gson.stream.JsonToken.NAME;
-import static com.google.gson.stream.JsonToken.NULL;
-import static com.google.gson.stream.JsonToken.NUMBER;
-import static com.google.gson.stream.JsonToken.STRING;
-
-@SuppressWarnings("resource")
-public final class JsonReaderTest extends TestCase {
-  public void testReadArray() throws IOException {
-    JsonReader reader = new JsonReader(reader("[true, true]"));
-    reader.beginArray();
-    assertEquals(true, reader.nextBoolean());
-    assertEquals(true, reader.nextBoolean());
-    reader.endArray();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testReadEmptyArray() throws IOException {
-    JsonReader reader = new JsonReader(reader("[]"));
-    reader.beginArray();
-    assertFalse(reader.hasNext());
-    reader.endArray();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testReadObject() throws IOException {
-    JsonReader reader = new JsonReader(reader(
-        "{\"a\": \"android\", \"b\": \"banana\"}"));
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    assertEquals("android", reader.nextString());
-    assertEquals("b", reader.nextName());
-    assertEquals("banana", reader.nextString());
-    reader.endObject();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testReadEmptyObject() throws IOException {
-    JsonReader reader = new JsonReader(reader("{}"));
-    reader.beginObject();
-    assertFalse(reader.hasNext());
-    reader.endObject();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testSkipArray() throws IOException {
-    JsonReader reader = new JsonReader(reader(
-        "{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    reader.skipValue();
-    assertEquals("b", reader.nextName());
-    assertEquals(123, reader.nextInt());
-    reader.endObject();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testSkipArrayAfterPeek() throws Exception {
-    JsonReader reader = new JsonReader(reader(
-        "{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    assertEquals(BEGIN_ARRAY, reader.peek());
-    reader.skipValue();
-    assertEquals("b", reader.nextName());
-    assertEquals(123, reader.nextInt());
-    reader.endObject();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testSkipTopLevelObject() throws Exception {
-    JsonReader reader = new JsonReader(reader(
-        "{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
-    reader.skipValue();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testSkipObject() throws IOException {
-    JsonReader reader = new JsonReader(reader(
-        "{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}"));
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    reader.skipValue();
-    assertEquals("b", reader.nextName());
-    reader.skipValue();
-    reader.endObject();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testSkipObjectAfterPeek() throws Exception {
-    String json = "{" + "  \"one\": { \"num\": 1 }"
-        + ", \"two\": { \"num\": 2 }" + ", \"three\": { \"num\": 3 }" + "}";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.beginObject();
-    assertEquals("one", reader.nextName());
-    assertEquals(BEGIN_OBJECT, reader.peek());
-    reader.skipValue();
-    assertEquals("two", reader.nextName());
-    assertEquals(BEGIN_OBJECT, reader.peek());
-    reader.skipValue();
-    assertEquals("three", reader.nextName());
-    reader.skipValue();
-    reader.endObject();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testSkipInteger() throws IOException {
-    JsonReader reader = new JsonReader(reader(
-        "{\"a\":123456789,\"b\":-123456789}"));
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    reader.skipValue();
-    assertEquals("b", reader.nextName());
-    reader.skipValue();
-    reader.endObject();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testSkipDouble() throws IOException {
-    JsonReader reader = new JsonReader(reader(
-        "{\"a\":-123.456e-789,\"b\":123456789.0}"));
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    reader.skipValue();
-    assertEquals("b", reader.nextName());
-    reader.skipValue();
-    reader.endObject();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testHelloWorld() throws IOException {
-    String json = "{\n" +
-        "   \"hello\": true,\n" +
-        "   \"foo\": [\"world\"]\n" +
-        "}";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.beginObject();
-    assertEquals("hello", reader.nextName());
-    assertEquals(true, reader.nextBoolean());
-    assertEquals("foo", reader.nextName());
-    reader.beginArray();
-    assertEquals("world", reader.nextString());
-    reader.endArray();
-    reader.endObject();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testNulls() {
-    try {
-      new JsonReader(null);
-      fail();
-    } catch (NullPointerException expected) {
-    }
-  }
-
-  public void testEmptyString() {
-    try {
-      new JsonReader(reader("")).beginArray();
-      fail();
-    } catch (IOException expected) {
-    }
-    try {
-      new JsonReader(reader("")).beginObject();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testCharacterUnescaping() throws IOException {
-    String json = "[\"a\","
-        + "\"a\\\"\","
-        + "\"\\\"\","
-        + "\":\","
-        + "\",\","
-        + "\"\\b\","
-        + "\"\\f\","
-        + "\"\\n\","
-        + "\"\\r\","
-        + "\"\\t\","
-        + "\" \","
-        + "\"\\\\\","
-        + "\"{\","
-        + "\"}\","
-        + "\"[\","
-        + "\"]\","
-        + "\"\\u0000\","
-        + "\"\\u0019\","
-        + "\"\\u20AC\""
-        + "]";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.beginArray();
-    assertEquals("a", reader.nextString());
-    assertEquals("a\"", reader.nextString());
-    assertEquals("\"", reader.nextString());
-    assertEquals(":", reader.nextString());
-    assertEquals(",", reader.nextString());
-    assertEquals("\b", reader.nextString());
-    assertEquals("\f", reader.nextString());
-    assertEquals("\n", reader.nextString());
-    assertEquals("\r", reader.nextString());
-    assertEquals("\t", reader.nextString());
-    assertEquals(" ", reader.nextString());
-    assertEquals("\\", reader.nextString());
-    assertEquals("{", reader.nextString());
-    assertEquals("}", reader.nextString());
-    assertEquals("[", reader.nextString());
-    assertEquals("]", reader.nextString());
-    assertEquals("\0", reader.nextString());
-    assertEquals("\u0019", reader.nextString());
-    assertEquals("\u20AC", reader.nextString());
-    reader.endArray();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testUnescapingInvalidCharacters() throws IOException {
-    String json = "[\"\\u000g\"]";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.beginArray();
-    try {
-      reader.nextString();
-      fail();
-    } catch (NumberFormatException expected) {
-    }
-  }
-
-  public void testUnescapingTruncatedCharacters() throws IOException {
-    String json = "[\"\\u000";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.beginArray();
-    try {
-      reader.nextString();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testUnescapingTruncatedSequence() throws IOException {
-    String json = "[\"\\";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.beginArray();
-    try {
-      reader.nextString();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testIntegersWithFractionalPartSpecified() throws IOException {
-    JsonReader reader = new JsonReader(reader("[1.0,1.0,1.0]"));
-    reader.beginArray();
-    assertEquals(1.0, reader.nextDouble());
-    assertEquals(1, reader.nextInt());
-    assertEquals(1L, reader.nextLong());
-  }
-
-  public void testDoubles() throws IOException {
-    String json = "[-0.0,"
-        + "1.0,"
-        + "1.7976931348623157E308,"
-        + "4.9E-324,"
-        + "0.0,"
-        + "-0.5,"
-        + "2.2250738585072014E-308,"
-        + "3.141592653589793,"
-        + "2.718281828459045]";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.beginArray();
-    assertEquals(-0.0, reader.nextDouble());
-    assertEquals(1.0, reader.nextDouble());
-    assertEquals(1.7976931348623157E308, reader.nextDouble());
-    assertEquals(4.9E-324, reader.nextDouble());
-    assertEquals(0.0, reader.nextDouble());
-    assertEquals(-0.5, reader.nextDouble());
-    assertEquals(2.2250738585072014E-308, reader.nextDouble());
-    assertEquals(3.141592653589793, reader.nextDouble());
-    assertEquals(2.718281828459045, reader.nextDouble());
-    reader.endArray();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testStrictNonFiniteDoubles() throws IOException {
-    String json = "[NaN]";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.beginArray();
-    try {
-      reader.nextDouble();
-      fail();
-    } catch (MalformedJsonException expected) {
-    }
-  }
-
-  public void testStrictQuotedNonFiniteDoubles() throws IOException {
-    String json = "[\"NaN\"]";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.beginArray();
-    try {
-      reader.nextDouble();
-      fail();
-    } catch (MalformedJsonException expected) {
-    }
-  }
-
-  public void testLenientNonFiniteDoubles() throws IOException {
-    String json = "[NaN, -Infinity, Infinity]";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertTrue(Double.isNaN(reader.nextDouble()));
-    assertEquals(Double.NEGATIVE_INFINITY, reader.nextDouble());
-    assertEquals(Double.POSITIVE_INFINITY, reader.nextDouble());
-    reader.endArray();
-  }
-
-  public void testLenientQuotedNonFiniteDoubles() throws IOException {
-    String json = "[\"NaN\", \"-Infinity\", \"Infinity\"]";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertTrue(Double.isNaN(reader.nextDouble()));
-    assertEquals(Double.NEGATIVE_INFINITY, reader.nextDouble());
-    assertEquals(Double.POSITIVE_INFINITY, reader.nextDouble());
-    reader.endArray();
-  }
-
-  public void testStrictNonFiniteDoublesWithSkipValue() throws IOException {
-    String json = "[NaN]";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.beginArray();
-    try {
-      reader.skipValue();
-      fail();
-    } catch (MalformedJsonException expected) {
-    }
-  }
-
-  public void testLongs() throws IOException {
-    String json = "[0,0,0,"
-        + "1,1,1,"
-        + "-1,-1,-1,"
-        + "-9223372036854775808,"
-        + "9223372036854775807]";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.beginArray();
-    assertEquals(0L, reader.nextLong());
-    assertEquals(0, reader.nextInt());
-    assertEquals(0.0, reader.nextDouble());
-    assertEquals(1L, reader.nextLong());
-    assertEquals(1, reader.nextInt());
-    assertEquals(1.0, reader.nextDouble());
-    assertEquals(-1L, reader.nextLong());
-    assertEquals(-1, reader.nextInt());
-    assertEquals(-1.0, reader.nextDouble());
-    try {
-      reader.nextInt();
-      fail();
-    } catch (NumberFormatException expected) {
-    }
-    assertEquals(Long.MIN_VALUE, reader.nextLong());
-    try {
-      reader.nextInt();
-      fail();
-    } catch (NumberFormatException expected) {
-    }
-    assertEquals(Long.MAX_VALUE, reader.nextLong());
-    reader.endArray();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void disabled_testNumberWithOctalPrefix() throws IOException {
-    String json = "[01]";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.beginArray();
-    try {
-      reader.peek();
-      fail();
-    } catch (MalformedJsonException expected) {
-    }
-    try {
-      reader.nextInt();
-      fail();
-    } catch (MalformedJsonException expected) {
-    }
-    try {
-      reader.nextLong();
-      fail();
-    } catch (MalformedJsonException expected) {
-    }
-    try {
-      reader.nextDouble();
-      fail();
-    } catch (MalformedJsonException expected) {
-    }
-    assertEquals("01", reader.nextString());
-    reader.endArray();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testBooleans() throws IOException {
-    JsonReader reader = new JsonReader(reader("[true,false]"));
-    reader.beginArray();
-    assertEquals(true, reader.nextBoolean());
-    assertEquals(false, reader.nextBoolean());
-    reader.endArray();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testPeekingUnquotedStringsPrefixedWithBooleans() throws IOException {
-    JsonReader reader = new JsonReader(reader("[truey]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(STRING, reader.peek());
-    try {
-      reader.nextBoolean();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-    assertEquals("truey", reader.nextString());
-    reader.endArray();
-  }
-
-  public void testMalformedNumbers() throws IOException {
-    assertNotANumber("-");
-    assertNotANumber(".");
-
-    // exponent lacks digit
-    assertNotANumber("e");
-    assertNotANumber("0e");
-    assertNotANumber(".e");
-    assertNotANumber("0.e");
-    assertNotANumber("-.0e");
-
-    // no integer
-    assertNotANumber("e1");
-    assertNotANumber(".e1");
-    assertNotANumber("-e1");
-
-    // trailing characters
-    assertNotANumber("1x");
-    assertNotANumber("1.1x");
-    assertNotANumber("1e1x");
-    assertNotANumber("1ex");
-    assertNotANumber("1.1ex");
-    assertNotANumber("1.1e1x");
-
-    // fraction has no digit
-    assertNotANumber("0.");
-    assertNotANumber("-0.");
-    assertNotANumber("0.e1");
-    assertNotANumber("-0.e1");
-
-    // no leading digit
-    assertNotANumber(".0");
-    assertNotANumber("-.0");
-    assertNotANumber(".0e1");
-    assertNotANumber("-.0e1");
-  }
-
-  private void assertNotANumber(String s) throws IOException {
-    JsonReader reader = new JsonReader(reader("[" + s + "]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(JsonToken.STRING, reader.peek());
-    assertEquals(s, reader.nextString());
-    reader.endArray();
-  }
-
-  public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException {
-    JsonReader reader = new JsonReader(reader("[12.34e5x]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(STRING, reader.peek());
-    try {
-      reader.nextInt();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-    assertEquals("12.34e5x", reader.nextString());
-  }
-
-  public void testPeekLongMinValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("[-9223372036854775808]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(NUMBER, reader.peek());
-    assertEquals(-9223372036854775808L, reader.nextLong());
-  }
-
-  public void testPeekLongMaxValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("[9223372036854775807]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(NUMBER, reader.peek());
-    assertEquals(9223372036854775807L, reader.nextLong());
-  }
-
-  public void testLongLargerThanMaxLongThatWrapsAround() throws IOException {
-    JsonReader reader = new JsonReader(reader("[22233720368547758070]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(NUMBER, reader.peek());
-    try {
-      reader.nextLong();
-      fail();
-    } catch (NumberFormatException expected) {
-    }
-  }
-
-  public void testLongLargerThanMinLongThatWrapsAround() throws IOException {
-    JsonReader reader = new JsonReader(reader("[-22233720368547758070]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(NUMBER, reader.peek());
-    try {
-      reader.nextLong();
-      fail();
-    } catch (NumberFormatException expected) {
-    }
-  }
-
-  /**
-   * This test fails because there's no double for 9223372036854775808, and our
-   * long parsing uses Double.parseDouble() for fractional values.
-   */
-  public void disabled_testPeekLargerThanLongMaxValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("[9223372036854775808]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(NUMBER, reader.peek());
-    try {
-      reader.nextLong();
-      fail();
-    } catch (NumberFormatException e) {
-    }
-  }
-
-  /**
-   * This test fails because there's no double for -9223372036854775809, and our
-   * long parsing uses Double.parseDouble() for fractional values.
-   */
-  public void disabled_testPeekLargerThanLongMinValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("[-9223372036854775809]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(NUMBER, reader.peek());
-    try {
-      reader.nextLong();
-      fail();
-    } catch (NumberFormatException expected) {
-    }
-    assertEquals(-9223372036854775809d, reader.nextDouble());
-  }
-
-  /**
-   * This test fails because there's no double for 9223372036854775806, and
-   * our long parsing uses Double.parseDouble() for fractional values.
-   */
-  public void disabled_testHighPrecisionLong() throws IOException {
-    String json = "[9223372036854775806.000]";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.beginArray();
-    assertEquals(9223372036854775806L, reader.nextLong());
-    reader.endArray();
-  }
-
-  public void testPeekMuchLargerThanLongMinValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("[-92233720368547758080]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(NUMBER, reader.peek());
-    try {
-      reader.nextLong();
-      fail();
-    } catch (NumberFormatException expected) {
-    }
-    assertEquals(-92233720368547758080d, reader.nextDouble());
-  }
-
-  public void testQuotedNumberWithEscape() throws IOException {
-    JsonReader reader = new JsonReader(reader("[\"12\u00334\"]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(STRING, reader.peek());
-    assertEquals(1234, reader.nextInt());
-  }
-
-  public void testMixedCaseLiterals() throws IOException {
-    JsonReader reader = new JsonReader(reader("[True,TruE,False,FALSE,NULL,nulL]"));
-    reader.beginArray();
-    assertEquals(true, reader.nextBoolean());
-    assertEquals(true, reader.nextBoolean());
-    assertEquals(false, reader.nextBoolean());
-    assertEquals(false, reader.nextBoolean());
-    reader.nextNull();
-    reader.nextNull();
-    reader.endArray();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testMissingValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("{\"a\":}"));
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    try {
-      reader.nextString();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testPrematureEndOfInput() throws IOException {
-    JsonReader reader = new JsonReader(reader("{\"a\":true,"));
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    assertEquals(true, reader.nextBoolean());
-    try {
-      reader.nextName();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testPrematurelyClosed() throws IOException {
-    try {
-      JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
-      reader.beginObject();
-      reader.close();
-      reader.nextName();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-
-    try {
-      JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
-      reader.close();
-      reader.beginObject();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-
-    try {
-      JsonReader reader = new JsonReader(reader("{\"a\":true}"));
-      reader.beginObject();
-      reader.nextName();
-      reader.peek();
-      reader.close();
-      reader.nextBoolean();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testNextFailuresDoNotAdvance() throws IOException {
-    JsonReader reader = new JsonReader(reader("{\"a\":true}"));
-    reader.beginObject();
-    try {
-      reader.nextString();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-    assertEquals("a", reader.nextName());
-    try {
-      reader.nextName();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-    try {
-      reader.beginArray();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-    try {
-      reader.endArray();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-    try {
-      reader.beginObject();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-    try {
-      reader.endObject();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-    assertEquals(true, reader.nextBoolean());
-    try {
-      reader.nextString();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-    try {
-      reader.nextName();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-    try {
-      reader.beginArray();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-    try {
-      reader.endArray();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-    reader.endObject();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-    reader.close();
-  }
-
-  public void testIntegerMismatchFailuresDoNotAdvance() throws IOException {
-    JsonReader reader = new JsonReader(reader("[1.5]"));
-    reader.beginArray();
-    try {
-      reader.nextInt();
-      fail();
-    } catch (NumberFormatException expected) {
-    }
-    assertEquals(1.5d, reader.nextDouble());
-    reader.endArray();
-  }
-
-  public void testStringNullIsNotNull() throws IOException {
-    JsonReader reader = new JsonReader(reader("[\"null\"]"));
-    reader.beginArray();
-    try {
-      reader.nextNull();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testNullLiteralIsNotAString() throws IOException {
-    JsonReader reader = new JsonReader(reader("[null]"));
-    reader.beginArray();
-    try {
-      reader.nextString();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testStrictNameValueSeparator() throws IOException {
-    JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    try {
-      reader.nextBoolean();
-      fail();
-    } catch (IOException expected) {
-    }
-
-    reader = new JsonReader(reader("{\"a\"=>true}"));
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    try {
-      reader.nextBoolean();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testLenientNameValueSeparator() throws IOException {
-    JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
-    reader.setLenient(true);
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    assertEquals(true, reader.nextBoolean());
-
-    reader = new JsonReader(reader("{\"a\"=>true}"));
-    reader.setLenient(true);
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    assertEquals(true, reader.nextBoolean());
-  }
-
-  public void testStrictNameValueSeparatorWithSkipValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    try {
-      reader.skipValue();
-      fail();
-    } catch (IOException expected) {
-    }
-
-    reader = new JsonReader(reader("{\"a\"=>true}"));
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    try {
-      reader.skipValue();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testCommentsInStringValue() throws Exception {
-    JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
-    reader.beginArray();
-    assertEquals("// comment", reader.nextString());
-    reader.endArray();
-
-    reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    assertEquals("#someComment", reader.nextString());
-    reader.endObject();
-
-    reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
-    reader.beginObject();
-    assertEquals("#//a", reader.nextName());
-    assertEquals("#some //Comment", reader.nextString());
-    reader.endObject();
-  }
-
-  public void testStrictComments() throws IOException {
-    JsonReader reader = new JsonReader(reader("[// comment \n true]"));
-    reader.beginArray();
-    try {
-      reader.nextBoolean();
-      fail();
-    } catch (IOException expected) {
-    }
-
-    reader = new JsonReader(reader("[# comment \n true]"));
-    reader.beginArray();
-    try {
-      reader.nextBoolean();
-      fail();
-    } catch (IOException expected) {
-    }
-
-    reader = new JsonReader(reader("[/* comment */ true]"));
-    reader.beginArray();
-    try {
-      reader.nextBoolean();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testLenientComments() throws IOException {
-    JsonReader reader = new JsonReader(reader("[// comment \n true]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(true, reader.nextBoolean());
-
-    reader = new JsonReader(reader("[# comment \n true]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(true, reader.nextBoolean());
-
-    reader = new JsonReader(reader("[/* comment */ true]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(true, reader.nextBoolean());
-  }
-
-  public void testStrictCommentsWithSkipValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("[// comment \n true]"));
-    reader.beginArray();
-    try {
-      reader.skipValue();
-      fail();
-    } catch (IOException expected) {
-    }
-
-    reader = new JsonReader(reader("[# comment \n true]"));
-    reader.beginArray();
-    try {
-      reader.skipValue();
-      fail();
-    } catch (IOException expected) {
-    }
-
-    reader = new JsonReader(reader("[/* comment */ true]"));
-    reader.beginArray();
-    try {
-      reader.skipValue();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testStrictUnquotedNames() throws IOException {
-    JsonReader reader = new JsonReader(reader("{a:true}"));
-    reader.beginObject();
-    try {
-      reader.nextName();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testLenientUnquotedNames() throws IOException {
-    JsonReader reader = new JsonReader(reader("{a:true}"));
-    reader.setLenient(true);
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-  }
-
-  public void testStrictUnquotedNamesWithSkipValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("{a:true}"));
-    reader.beginObject();
-    try {
-      reader.skipValue();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testStrictSingleQuotedNames() throws IOException {
-    JsonReader reader = new JsonReader(reader("{'a':true}"));
-    reader.beginObject();
-    try {
-      reader.nextName();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testLenientSingleQuotedNames() throws IOException {
-    JsonReader reader = new JsonReader(reader("{'a':true}"));
-    reader.setLenient(true);
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-  }
-
-  public void testStrictSingleQuotedNamesWithSkipValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("{'a':true}"));
-    reader.beginObject();
-    try {
-      reader.skipValue();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testStrictUnquotedStrings() throws IOException {
-    JsonReader reader = new JsonReader(reader("[a]"));
-    reader.beginArray();
-    try {
-      reader.nextString();
-      fail();
-    } catch (MalformedJsonException expected) {
-    }
-  }
-
-  public void testStrictUnquotedStringsWithSkipValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("[a]"));
-    reader.beginArray();
-    try {
-      reader.skipValue();
-      fail();
-    } catch (MalformedJsonException expected) {
-    }
-  }
-
-  public void testLenientUnquotedStrings() throws IOException {
-    JsonReader reader = new JsonReader(reader("[a]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals("a", reader.nextString());
-  }
-
-  public void testStrictSingleQuotedStrings() throws IOException {
-    JsonReader reader = new JsonReader(reader("['a']"));
-    reader.beginArray();
-    try {
-      reader.nextString();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testLenientSingleQuotedStrings() throws IOException {
-    JsonReader reader = new JsonReader(reader("['a']"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals("a", reader.nextString());
-  }
-
-  public void testStrictSingleQuotedStringsWithSkipValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("['a']"));
-    reader.beginArray();
-    try {
-      reader.skipValue();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testStrictSemicolonDelimitedArray() throws IOException {
-    JsonReader reader = new JsonReader(reader("[true;true]"));
-    reader.beginArray();
-    try {
-      reader.nextBoolean();
-      reader.nextBoolean();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testLenientSemicolonDelimitedArray() throws IOException {
-    JsonReader reader = new JsonReader(reader("[true;true]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(true, reader.nextBoolean());
-    assertEquals(true, reader.nextBoolean());
-  }
-
-  public void testStrictSemicolonDelimitedArrayWithSkipValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("[true;true]"));
-    reader.beginArray();
-    try {
-      reader.skipValue();
-      reader.skipValue();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testStrictSemicolonDelimitedNameValuePair() throws IOException {
-    JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    try {
-      reader.nextBoolean();
-      reader.nextName();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testLenientSemicolonDelimitedNameValuePair() throws IOException {
-    JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
-    reader.setLenient(true);
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    assertEquals(true, reader.nextBoolean());
-    assertEquals("b", reader.nextName());
-  }
-
-  public void testStrictSemicolonDelimitedNameValuePairWithSkipValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    try {
-      reader.skipValue();
-      reader.skipValue();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testStrictUnnecessaryArraySeparators() throws IOException {
-    JsonReader reader = new JsonReader(reader("[true,,true]"));
-    reader.beginArray();
-    assertEquals(true, reader.nextBoolean());
-    try {
-      reader.nextNull();
-      fail();
-    } catch (IOException expected) {
-    }
-
-    reader = new JsonReader(reader("[,true]"));
-    reader.beginArray();
-    try {
-      reader.nextNull();
-      fail();
-    } catch (IOException expected) {
-    }
-
-    reader = new JsonReader(reader("[true,]"));
-    reader.beginArray();
-    assertEquals(true, reader.nextBoolean());
-    try {
-      reader.nextNull();
-      fail();
-    } catch (IOException expected) {
-    }
-
-    reader = new JsonReader(reader("[,]"));
-    reader.beginArray();
-    try {
-      reader.nextNull();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testLenientUnnecessaryArraySeparators() throws IOException {
-    JsonReader reader = new JsonReader(reader("[true,,true]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(true, reader.nextBoolean());
-    reader.nextNull();
-    assertEquals(true, reader.nextBoolean());
-    reader.endArray();
-
-    reader = new JsonReader(reader("[,true]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    reader.nextNull();
-    assertEquals(true, reader.nextBoolean());
-    reader.endArray();
-
-    reader = new JsonReader(reader("[true,]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(true, reader.nextBoolean());
-    reader.nextNull();
-    reader.endArray();
-
-    reader = new JsonReader(reader("[,]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    reader.nextNull();
-    reader.nextNull();
-    reader.endArray();
-  }
-
-  public void testStrictUnnecessaryArraySeparatorsWithSkipValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("[true,,true]"));
-    reader.beginArray();
-    assertEquals(true, reader.nextBoolean());
-    try {
-      reader.skipValue();
-      fail();
-    } catch (IOException expected) {
-    }
-
-    reader = new JsonReader(reader("[,true]"));
-    reader.beginArray();
-    try {
-      reader.skipValue();
-      fail();
-    } catch (IOException expected) {
-    }
-
-    reader = new JsonReader(reader("[true,]"));
-    reader.beginArray();
-    assertEquals(true, reader.nextBoolean());
-    try {
-      reader.skipValue();
-      fail();
-    } catch (IOException expected) {
-    }
-
-    reader = new JsonReader(reader("[,]"));
-    reader.beginArray();
-    try {
-      reader.skipValue();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testStrictMultipleTopLevelValues() throws IOException {
-    JsonReader reader = new JsonReader(reader("[] []"));
-    reader.beginArray();
-    reader.endArray();
-    try {
-      reader.peek();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testLenientMultipleTopLevelValues() throws IOException {
-    JsonReader reader = new JsonReader(reader("[] true {}"));
-    reader.setLenient(true);
-    reader.beginArray();
-    reader.endArray();
-    assertEquals(true, reader.nextBoolean());
-    reader.beginObject();
-    reader.endObject();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testStrictMultipleTopLevelValuesWithSkipValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("[] []"));
-    reader.beginArray();
-    reader.endArray();
-    try {
-      reader.skipValue();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testTopLevelValueTypes() throws IOException {
-    JsonReader reader1 = new JsonReader(reader("true"));
-    assertTrue(reader1.nextBoolean());
-    assertEquals(JsonToken.END_DOCUMENT, reader1.peek());
-
-    JsonReader reader2 = new JsonReader(reader("false"));
-    assertFalse(reader2.nextBoolean());
-    assertEquals(JsonToken.END_DOCUMENT, reader2.peek());
-
-    JsonReader reader3 = new JsonReader(reader("null"));
-    assertEquals(JsonToken.NULL, reader3.peek());
-    reader3.nextNull();
-    assertEquals(JsonToken.END_DOCUMENT, reader3.peek());
-
-    JsonReader reader4 = new JsonReader(reader("123"));
-    assertEquals(123, reader4.nextInt());
-    assertEquals(JsonToken.END_DOCUMENT, reader4.peek());
-
-    JsonReader reader5 = new JsonReader(reader("123.4"));
-    assertEquals(123.4, reader5.nextDouble());
-    assertEquals(JsonToken.END_DOCUMENT, reader5.peek());
-
-    JsonReader reader6 = new JsonReader(reader("\"a\""));
-    assertEquals("a", reader6.nextString());
-    assertEquals(JsonToken.END_DOCUMENT, reader6.peek());
-  }
-
-  public void testTopLevelValueTypeWithSkipValue() throws IOException {
-    JsonReader reader = new JsonReader(reader("true"));
-    reader.skipValue();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testStrictNonExecutePrefix() {
-    JsonReader reader = new JsonReader(reader(")]}'\n []"));
-    try {
-      reader.beginArray();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testStrictNonExecutePrefixWithSkipValue() {
-    JsonReader reader = new JsonReader(reader(")]}'\n []"));
-    try {
-      reader.skipValue();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testLenientNonExecutePrefix() throws IOException {
-    JsonReader reader = new JsonReader(reader(")]}'\n []"));
-    reader.setLenient(true);
-    reader.beginArray();
-    reader.endArray();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException {
-    JsonReader reader = new JsonReader(reader("\r\n \t)]}'\n []"));
-    reader.setLenient(true);
-    reader.beginArray();
-    reader.endArray();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testLenientPartialNonExecutePrefix() {
-    JsonReader reader = new JsonReader(reader(")]}' []"));
-    reader.setLenient(true);
-    try {
-      assertEquals(")", reader.nextString());
-      reader.nextString();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testBomIgnoredAsFirstCharacterOfDocument() throws IOException {
-    JsonReader reader = new JsonReader(reader("\ufeff[]"));
-    reader.beginArray();
-    reader.endArray();
-  }
-
-  public void testBomForbiddenAsOtherCharacterInDocument() throws IOException {
-    JsonReader reader = new JsonReader(reader("[\ufeff]"));
-    reader.beginArray();
-    try {
-      reader.endArray();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testFailWithPosition() throws IOException {
-    testFailWithPosition("Expected value at line 6 column 5 path $[1]",
-        "[\n\n\n\n\n\"a\",}]");
-  }
-
-  public void testFailWithPositionGreaterThanBufferSize() throws IOException {
-    String spaces = repeat(' ', 8192);
-    testFailWithPosition("Expected value at line 6 column 5 path $[1]",
-        "[\n\n" + spaces + "\n\n\n\"a\",}]");
-  }
-
-  public void testFailWithPositionOverSlashSlashEndOfLineComment() throws IOException {
-    testFailWithPosition("Expected value at line 5 column 6 path $[1]",
-        "\n// foo\n\n//bar\r\n[\"a\",}");
-  }
-
-  public void testFailWithPositionOverHashEndOfLineComment() throws IOException {
-    testFailWithPosition("Expected value at line 5 column 6 path $[1]",
-        "\n# foo\n\n#bar\r\n[\"a\",}");
-  }
-
-  public void testFailWithPositionOverCStyleComment() throws IOException {
-    testFailWithPosition("Expected value at line 6 column 12 path $[1]",
-        "\n\n/* foo\n*\n*\r\nbar */[\"a\",}");
-  }
-
-  public void testFailWithPositionOverQuotedString() throws IOException {
-    testFailWithPosition("Expected value at line 5 column 3 path $[1]",
-        "[\"foo\nbar\r\nbaz\n\",\n  }");
-  }
-
-  public void testFailWithPositionOverUnquotedString() throws IOException {
-    testFailWithPosition("Expected value at line 5 column 2 path $[1]", "[\n\nabcd\n\n,}");
-  }
-
-  public void testFailWithEscapedNewlineCharacter() throws IOException {
-    testFailWithPosition("Expected value at line 5 column 3 path $[1]", "[\n\n\"\\\n\n\",}");
-  }
-
-  public void testFailWithPositionIsOffsetByBom() throws IOException {
-    testFailWithPosition("Expected value at line 1 column 6 path $[1]",
-        "\ufeff[\"a\",}]");
-  }
-
-  private void testFailWithPosition(String message, String json) throws IOException {
-    // Validate that it works reading the string normally.
-    JsonReader reader1 = new JsonReader(reader(json));
-    reader1.setLenient(true);
-    reader1.beginArray();
-    reader1.nextString();
-    try {
-      reader1.peek();
-      fail();
-    } catch (IOException expected) {
-      assertEquals(message, expected.getMessage());
-    }
-
-    // Also validate that it works when skipping.
-    JsonReader reader2 = new JsonReader(reader(json));
-    reader2.setLenient(true);
-    reader2.beginArray();
-    reader2.skipValue();
-    try {
-      reader2.peek();
-      fail();
-    } catch (IOException expected) {
-      assertEquals(message, expected.getMessage());
-    }
-  }
-
-  public void testFailWithPositionDeepPath() throws IOException {
-    JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
-    reader.beginArray();
-    reader.nextInt();
-    reader.beginObject();
-    reader.nextName();
-    reader.beginArray();
-    reader.nextInt();
-    reader.nextInt();
-    try {
-      reader.peek();
-      fail();
-    } catch (IOException expected) {
-      assertEquals("Expected value at line 1 column 14 path $[1].a[2]", expected.getMessage());
-    }
-  }
-
-  public void testStrictVeryLongNumber() throws IOException {
-    JsonReader reader = new JsonReader(reader("[0." + repeat('9', 8192) + "]"));
-    reader.beginArray();
-    try {
-      assertEquals(1d, reader.nextDouble());
-      fail();
-    } catch (MalformedJsonException expected) {
-    }
-  }
-
-  public void testLenientVeryLongNumber() throws IOException {
-    JsonReader reader = new JsonReader(reader("[0." + repeat('9', 8192) + "]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(JsonToken.STRING, reader.peek());
-    assertEquals(1d, reader.nextDouble());
-    reader.endArray();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testVeryLongUnquotedLiteral() throws IOException {
-    String literal = "a" + repeat('b', 8192) + "c";
-    JsonReader reader = new JsonReader(reader("[" + literal + "]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(literal, reader.nextString());
-    reader.endArray();
-  }
-
-  public void testDeeplyNestedArrays() throws IOException {
-    // this is nested 40 levels deep; Gson is tuned for nesting is 30 levels deep or fewer
-    JsonReader reader = new JsonReader(reader(
-        "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]"));
-    for (int i = 0; i < 40; i++) {
-      reader.beginArray();
-    }
-    assertEquals("$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]"
-        + "[0][0][0][0][0][0][0][0][0][0][0][0][0][0]", reader.getPath());
-    for (int i = 0; i < 40; i++) {
-      reader.endArray();
-    }
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testDeeplyNestedObjects() throws IOException {
-    // Build a JSON document structured like {"a":{"a":{"a":{"a":true}}}}, but 40 levels deep
-    String array = "{\"a\":%s}";
-    String json = "true";
-    for (int i = 0; i < 40; i++) {
-      json = String.format(array, json);
-    }
-
-    JsonReader reader = new JsonReader(reader(json));
-    for (int i = 0; i < 40; i++) {
-      reader.beginObject();
-      assertEquals("a", reader.nextName());
-    }
-    assertEquals("$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"
-        + ".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a", reader.getPath());
-    assertEquals(true, reader.nextBoolean());
-    for (int i = 0; i < 40; i++) {
-      reader.endObject();
-    }
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  // http://code.google.com/p/google-gson/issues/detail?id=409
-  public void testStringEndingInSlash() throws IOException {
-    JsonReader reader = new JsonReader(reader("/"));
-    reader.setLenient(true);
-    try {
-      reader.peek();
-      fail();
-    } catch (MalformedJsonException expected) {
-    }
-  }
-
-  public void testDocumentWithCommentEndingInSlash() throws IOException {
-    JsonReader reader = new JsonReader(reader("/* foo *//"));
-    reader.setLenient(true);
-    try {
-      reader.peek();
-      fail();
-    } catch (MalformedJsonException expected) {
-    }
-  }
-
-  public void testStringWithLeadingSlash() throws IOException {
-    JsonReader reader = new JsonReader(reader("/x"));
-    reader.setLenient(true);
-    try {
-      reader.peek();
-      fail();
-    } catch (MalformedJsonException expected) {
-    }
-  }
-
-  public void testUnterminatedObject() throws IOException {
-    JsonReader reader = new JsonReader(reader("{\"a\":\"android\"x"));
-    reader.setLenient(true);
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    assertEquals("android", reader.nextString());
-    try {
-      reader.peek();
-      fail();
-    } catch (MalformedJsonException expected) {
-    }
-  }
-
-  public void testVeryLongQuotedString() throws IOException {
-    char[] stringChars = new char[1024 * 16];
-    Arrays.fill(stringChars, 'x');
-    String string = new String(stringChars);
-    String json = "[\"" + string + "\"]";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.beginArray();
-    assertEquals(string, reader.nextString());
-    reader.endArray();
-  }
-
-  public void testVeryLongUnquotedString() throws IOException {
-    char[] stringChars = new char[1024 * 16];
-    Arrays.fill(stringChars, 'x');
-    String string = new String(stringChars);
-    String json = "[" + string + "]";
-    JsonReader reader = new JsonReader(reader(json));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(string, reader.nextString());
-    reader.endArray();
-  }
-
-  public void testVeryLongUnterminatedString() throws IOException {
-    char[] stringChars = new char[1024 * 16];
-    Arrays.fill(stringChars, 'x');
-    String string = new String(stringChars);
-    String json = "[" + string;
-    JsonReader reader = new JsonReader(reader(json));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(string, reader.nextString());
-    try {
-      reader.peek();
-      fail();
-    } catch (EOFException expected) {
-    }
-  }
-
-  public void testSkipVeryLongUnquotedString() throws IOException {
-    JsonReader reader = new JsonReader(reader("[" + repeat('x', 8192) + "]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    reader.skipValue();
-    reader.endArray();
-  }
-
-  public void testSkipTopLevelUnquotedString() throws IOException {
-    JsonReader reader = new JsonReader(reader(repeat('x', 8192)));
-    reader.setLenient(true);
-    reader.skipValue();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testSkipVeryLongQuotedString() throws IOException {
-    JsonReader reader = new JsonReader(reader("[\"" + repeat('x', 8192) + "\"]"));
-    reader.beginArray();
-    reader.skipValue();
-    reader.endArray();
-  }
-
-  public void testSkipTopLevelQuotedString() throws IOException {
-    JsonReader reader = new JsonReader(reader("\"" + repeat('x', 8192) + "\""));
-    reader.setLenient(true);
-    reader.skipValue();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testStringAsNumberWithTruncatedExponent() throws IOException {
-    JsonReader reader = new JsonReader(reader("[123e]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(STRING, reader.peek());
-  }
-
-  public void testStringAsNumberWithDigitAndNonDigitExponent() throws IOException {
-    JsonReader reader = new JsonReader(reader("[123e4b]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(STRING, reader.peek());
-  }
-
-  public void testStringAsNumberWithNonDigitExponent() throws IOException {
-    JsonReader reader = new JsonReader(reader("[123eb]"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(STRING, reader.peek());
-  }
-
-  public void testEmptyStringName() throws IOException {
-    JsonReader reader = new JsonReader(reader("{\"\":true}"));
-    reader.setLenient(true);
-    assertEquals(BEGIN_OBJECT, reader.peek());
-    reader.beginObject();
-    assertEquals(NAME, reader.peek());
-    assertEquals("", reader.nextName());
-    assertEquals(JsonToken.BOOLEAN, reader.peek());
-    assertEquals(true, reader.nextBoolean());
-    assertEquals(JsonToken.END_OBJECT, reader.peek());
-    reader.endObject();
-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
-  }
-
-  public void testStrictExtraCommasInMaps() throws IOException {
-    JsonReader reader = new JsonReader(reader("{\"a\":\"b\",}"));
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    assertEquals("b", reader.nextString());
-    try {
-      reader.peek();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  public void testLenientExtraCommasInMaps() throws IOException {
-    JsonReader reader = new JsonReader(reader("{\"a\":\"b\",}"));
-    reader.setLenient(true);
-    reader.beginObject();
-    assertEquals("a", reader.nextName());
-    assertEquals("b", reader.nextString());
-    try {
-      reader.peek();
-      fail();
-    } catch (IOException expected) {
-    }
-  }
-
-  private String repeat(char c, int count) {
-    char[] array = new char[count];
-    Arrays.fill(array, c);
-    return new String(array);
-  }
-
-  public void testMalformedDocuments() throws IOException {
-    assertDocument("{]", BEGIN_OBJECT, IOException.class);
-    assertDocument("{,", BEGIN_OBJECT, IOException.class);
-    assertDocument("{{", BEGIN_OBJECT, IOException.class);
-    assertDocument("{[", BEGIN_OBJECT, IOException.class);
-    assertDocument("{:", BEGIN_OBJECT, IOException.class);
-    assertDocument("{\"name\",", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{\"name\",", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{\"name\":}", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{\"name\"::", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{\"name\":,", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{\"name\"=}", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{\"name\"=>}", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{\"name\"=>\"string\":", BEGIN_OBJECT, NAME, STRING, IOException.class);
-    assertDocument("{\"name\"=>\"string\"=", BEGIN_OBJECT, NAME, STRING, IOException.class);
-    assertDocument("{\"name\"=>\"string\"=>", BEGIN_OBJECT, NAME, STRING, IOException.class);
-    assertDocument("{\"name\"=>\"string\",", BEGIN_OBJECT, NAME, STRING, IOException.class);
-    assertDocument("{\"name\"=>\"string\",\"name\"", BEGIN_OBJECT, NAME, STRING, NAME);
-    assertDocument("[}", BEGIN_ARRAY, IOException.class);
-    assertDocument("[,]", BEGIN_ARRAY, NULL, NULL, END_ARRAY);
-    assertDocument("{", BEGIN_OBJECT, IOException.class);
-    assertDocument("{\"name\"", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{\"name\",", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{'name'", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{'name',", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("{name", BEGIN_OBJECT, NAME, IOException.class);
-    assertDocument("[", BEGIN_ARRAY, IOException.class);
-    assertDocument("[string", BEGIN_ARRAY, STRING, IOException.class);
-    assertDocument("[\"string\"", BEGIN_ARRAY, STRING, IOException.class);
-    assertDocument("['string'", BEGIN_ARRAY, STRING, IOException.class);
-    assertDocument("[123", BEGIN_ARRAY, NUMBER, IOException.class);
-    assertDocument("[123,", BEGIN_ARRAY, NUMBER, IOException.class);
-    assertDocument("{\"name\":123", BEGIN_OBJECT, NAME, NUMBER, IOException.class);
-    assertDocument("{\"name\":123,", BEGIN_OBJECT, NAME, NUMBER, IOException.class);
-    assertDocument("{\"name\":\"string\"", BEGIN_OBJECT, NAME, STRING, IOException.class);
-    assertDocument("{\"name\":\"string\",", BEGIN_OBJECT, NAME, STRING, IOException.class);
-    assertDocument("{\"name\":'string'", BEGIN_OBJECT, NAME, STRING, IOException.class);
-    assertDocument("{\"name\":'string',", BEGIN_OBJECT, NAME, STRING, IOException.class);
-    assertDocument("{\"name\":false", BEGIN_OBJECT, NAME, BOOLEAN, IOException.class);
-    assertDocument("{\"name\":false,,", BEGIN_OBJECT, NAME, BOOLEAN, IOException.class);
-  }
-
-  /**
-   * This test behave slightly differently in Gson 2.2 and earlier. It fails
-   * during peek rather than during nextString().
-   */
-  public void testUnterminatedStringFailure() throws IOException {
-    JsonReader reader = new JsonReader(reader("[\"string"));
-    reader.setLenient(true);
-    reader.beginArray();
-    assertEquals(JsonToken.STRING, reader.peek());
-    try {
-      reader.nextString();
-      fail();
-    } catch (MalformedJsonException expected) {
-    }
-  }
-
-  private void assertDocument(String document, Object... expectations) throws IOException {
-    JsonReader reader = new JsonReader(reader(document));
-    reader.setLenient(true);
-    for (Object expectation : expectations) {
-      if (expectation == BEGIN_OBJECT) {
-        reader.beginObject();
-      } else if (expectation == BEGIN_ARRAY) {
-        reader.beginArray();
-      } else if (expectation == END_OBJECT) {
-        reader.endObject();
-      } else if (expectation == END_ARRAY) {
-        reader.endArray();
-      } else if (expectation == NAME) {
-        assertEquals("name", reader.nextName());
-      } else if (expectation == BOOLEAN) {
-        assertEquals(false, reader.nextBoolean());
-      } else if (expectation == STRING) {
-        assertEquals("string", reader.nextString());
-      } else if (expectation == NUMBER) {
-        assertEquals(123, reader.nextInt());
-      } else if (expectation == NULL) {
-        reader.nextNull();
-      } else if (expectation == IOException.class) {
-        try {
-          reader.peek();
-          fail();
-        } catch (IOException expected) {
-        }
-      } else {
-        throw new AssertionError();
-      }
-    }
-  }
-
-  /**
-   * Returns a reader that returns one character at a time.
-   */
-  private Reader reader(final String s) {
-    /* if (true) */ return new StringReader(s);
-    /* return new Reader() {
-      int position = 0;
-      @Override public int read(char[] buffer, int offset, int count) throws IOException {
-        if (position == s.length()) {
-          return -1;
-        } else if (count > 0) {
-          buffer[offset] = s.charAt(position++);
-          return 1;
-        } else {
-          throw new IllegalArgumentException();
-        }
-      }
-      @Override public void close() throws IOException {
-      }
-    }; */
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java b/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java
deleted file mode 100644
index 91763d184..000000000
--- a/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java
+++ /dev/null
@@ -1,612 +0,0 @@
-/*
- * Copyright (C) 2010 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.stream;
-
-import java.io.IOException;
-import java.io.StringWriter;
-import java.math.BigDecimal;
-import java.math.BigInteger;
-import junit.framework.TestCase;
-
-@SuppressWarnings("resource")
-public final class JsonWriterTest extends TestCase {
-
-  public void testTopLevelValueTypes() throws IOException {
-    StringWriter string1 = new StringWriter();
-    JsonWriter writer1 = new JsonWriter(string1);
-    writer1.value(true);
-    writer1.close();
-    assertEquals("true", string1.toString());
-
-    StringWriter string2 = new StringWriter();
-    JsonWriter writer2 = new JsonWriter(string2);
-    writer2.nullValue();
-    writer2.close();
-    assertEquals("null", string2.toString());
-
-    StringWriter string3 = new StringWriter();
-    JsonWriter writer3 = new JsonWriter(string3);
-    writer3.value(123);
-    writer3.close();
-    assertEquals("123", string3.toString());
-
-    StringWriter string4 = new StringWriter();
-    JsonWriter writer4 = new JsonWriter(string4);
-    writer4.value(123.4);
-    writer4.close();
-    assertEquals("123.4", string4.toString());
-
-    StringWriter string5 = new StringWriter();
-    JsonWriter writert = new JsonWriter(string5);
-    writert.value("a");
-    writert.close();
-    assertEquals("\"a\"", string5.toString());
-  }
-
-  public void testInvalidTopLevelTypes() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.name("hello");
-    try {
-      jsonWriter.value("world");
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testTwoNames() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginObject();
-    jsonWriter.name("a");
-    try {
-      jsonWriter.name("a");
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testNameWithoutValue() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginObject();
-    jsonWriter.name("a");
-    try {
-      jsonWriter.endObject();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testValueWithoutName() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginObject();
-    try {
-      jsonWriter.value(true);
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testMultipleTopLevelValues() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginArray().endArray();
-    try {
-      jsonWriter.beginArray();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testBadNestingObject() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginArray();
-    jsonWriter.beginObject();
-    try {
-      jsonWriter.endArray();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testBadNestingArray() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginArray();
-    jsonWriter.beginArray();
-    try {
-      jsonWriter.endObject();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testNullName() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginObject();
-    try {
-      jsonWriter.name(null);
-      fail();
-    } catch (NullPointerException expected) {
-    }
-  }
-
-  public void testNullStringValue() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginObject();
-    jsonWriter.name("a");
-    jsonWriter.value((String) null);
-    jsonWriter.endObject();
-    assertEquals("{\"a\":null}", stringWriter.toString());
-  }
-
-  public void testJsonValue() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginObject();
-    jsonWriter.name("a");
-    jsonWriter.jsonValue("{\"b\":true}");
-    jsonWriter.name("c");
-    jsonWriter.value(1);
-    jsonWriter.endObject();
-    assertEquals("{\"a\":{\"b\":true},\"c\":1}", stringWriter.toString());
-  }
-
-  public void testNonFiniteDoubles() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginArray();
-    try {
-      jsonWriter.value(Double.NaN);
-      fail();
-    } catch (IllegalArgumentException expected) {
-    }
-    try {
-      jsonWriter.value(Double.NEGATIVE_INFINITY);
-      fail();
-    } catch (IllegalArgumentException expected) {
-    }
-    try {
-      jsonWriter.value(Double.POSITIVE_INFINITY);
-      fail();
-    } catch (IllegalArgumentException expected) {
-    }
-  }
-
-  public void testNonFiniteBoxedDoubles() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginArray();
-    try {
-      jsonWriter.value(new Double(Double.NaN));
-      fail();
-    } catch (IllegalArgumentException expected) {
-    }
-    try {
-      jsonWriter.value(new Double(Double.NEGATIVE_INFINITY));
-      fail();
-    } catch (IllegalArgumentException expected) {
-    }
-    try {
-      jsonWriter.value(new Double(Double.POSITIVE_INFINITY));
-      fail();
-    } catch (IllegalArgumentException expected) {
-    }
-  }
-
-  public void testDoubles() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginArray();
-    jsonWriter.value(-0.0);
-    jsonWriter.value(1.0);
-    jsonWriter.value(Double.MAX_VALUE);
-    jsonWriter.value(Double.MIN_VALUE);
-    jsonWriter.value(0.0);
-    jsonWriter.value(-0.5);
-    jsonWriter.value(2.2250738585072014E-308);
-    jsonWriter.value(Math.PI);
-    jsonWriter.value(Math.E);
-    jsonWriter.endArray();
-    jsonWriter.close();
-    assertEquals("[-0.0,"
-        + "1.0,"
-        + "1.7976931348623157E308,"
-        + "4.9E-324,"
-        + "0.0,"
-        + "-0.5,"
-        + "2.2250738585072014E-308,"
-        + "3.141592653589793,"
-        + "2.718281828459045]", stringWriter.toString());
-  }
-
-  public void testLongs() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginArray();
-    jsonWriter.value(0);
-    jsonWriter.value(1);
-    jsonWriter.value(-1);
-    jsonWriter.value(Long.MIN_VALUE);
-    jsonWriter.value(Long.MAX_VALUE);
-    jsonWriter.endArray();
-    jsonWriter.close();
-    assertEquals("[0,"
-        + "1,"
-        + "-1,"
-        + "-9223372036854775808,"
-        + "9223372036854775807]", stringWriter.toString());
-  }
-
-  public void testNumbers() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginArray();
-    jsonWriter.value(new BigInteger("0"));
-    jsonWriter.value(new BigInteger("9223372036854775808"));
-    jsonWriter.value(new BigInteger("-9223372036854775809"));
-    jsonWriter.value(new BigDecimal("3.141592653589793238462643383"));
-    jsonWriter.endArray();
-    jsonWriter.close();
-    assertEquals("[0,"
-        + "9223372036854775808,"
-        + "-9223372036854775809,"
-        + "3.141592653589793238462643383]", stringWriter.toString());
-  }
-
-  public void testBooleans() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginArray();
-    jsonWriter.value(true);
-    jsonWriter.value(false);
-    jsonWriter.endArray();
-    assertEquals("[true,false]", stringWriter.toString());
-  }
-
-  public void testNulls() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginArray();
-    jsonWriter.nullValue();
-    jsonWriter.endArray();
-    assertEquals("[null]", stringWriter.toString());
-  }
-
-  public void testStrings() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginArray();
-    jsonWriter.value("a");
-    jsonWriter.value("a\"");
-    jsonWriter.value("\"");
-    jsonWriter.value(":");
-    jsonWriter.value(",");
-    jsonWriter.value("\b");
-    jsonWriter.value("\f");
-    jsonWriter.value("\n");
-    jsonWriter.value("\r");
-    jsonWriter.value("\t");
-    jsonWriter.value(" ");
-    jsonWriter.value("\\");
-    jsonWriter.value("{");
-    jsonWriter.value("}");
-    jsonWriter.value("[");
-    jsonWriter.value("]");
-    jsonWriter.value("\0");
-    jsonWriter.value("\u0019");
-    jsonWriter.endArray();
-    assertEquals("[\"a\","
-        + "\"a\\\"\","
-        + "\"\\\"\","
-        + "\":\","
-        + "\",\","
-        + "\"\\b\","
-        + "\"\\f\","
-        + "\"\\n\","
-        + "\"\\r\","
-        + "\"\\t\","
-        + "\" \","
-        + "\"\\\\\","
-        + "\"{\","
-        + "\"}\","
-        + "\"[\","
-        + "\"]\","
-        + "\"\\u0000\","
-        + "\"\\u0019\"]", stringWriter.toString());
-  }
-
-  public void testUnicodeLineBreaksEscaped() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginArray();
-    jsonWriter.value("\u2028 \u2029");
-    jsonWriter.endArray();
-    assertEquals("[\"\\u2028 \\u2029\"]", stringWriter.toString());
-  }
-
-  public void testEmptyArray() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginArray();
-    jsonWriter.endArray();
-    assertEquals("[]", stringWriter.toString());
-  }
-
-  public void testEmptyObject() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginObject();
-    jsonWriter.endObject();
-    assertEquals("{}", stringWriter.toString());
-  }
-
-  public void testObjectsInArrays() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginArray();
-    jsonWriter.beginObject();
-    jsonWriter.name("a").value(5);
-    jsonWriter.name("b").value(false);
-    jsonWriter.endObject();
-    jsonWriter.beginObject();
-    jsonWriter.name("c").value(6);
-    jsonWriter.name("d").value(true);
-    jsonWriter.endObject();
-    jsonWriter.endArray();
-    assertEquals("[{\"a\":5,\"b\":false},"
-        + "{\"c\":6,\"d\":true}]", stringWriter.toString());
-  }
-
-  public void testArraysInObjects() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginObject();
-    jsonWriter.name("a");
-    jsonWriter.beginArray();
-    jsonWriter.value(5);
-    jsonWriter.value(false);
-    jsonWriter.endArray();
-    jsonWriter.name("b");
-    jsonWriter.beginArray();
-    jsonWriter.value(6);
-    jsonWriter.value(true);
-    jsonWriter.endArray();
-    jsonWriter.endObject();
-    assertEquals("{\"a\":[5,false],"
-        + "\"b\":[6,true]}", stringWriter.toString());
-  }
-
-  public void testDeepNestingArrays() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    for (int i = 0; i < 20; i++) {
-      jsonWriter.beginArray();
-    }
-    for (int i = 0; i < 20; i++) {
-      jsonWriter.endArray();
-    }
-    assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString());
-  }
-
-  public void testDeepNestingObjects() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginObject();
-    for (int i = 0; i < 20; i++) {
-      jsonWriter.name("a");
-      jsonWriter.beginObject();
-    }
-    for (int i = 0; i < 20; i++) {
-      jsonWriter.endObject();
-    }
-    jsonWriter.endObject();
-    assertEquals("{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":"
-        + "{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{"
-        + "}}}}}}}}}}}}}}}}}}}}}", stringWriter.toString());
-  }
-
-  public void testRepeatedName() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.beginObject();
-    jsonWriter.name("a").value(true);
-    jsonWriter.name("a").value(false);
-    jsonWriter.endObject();
-    // JsonWriter doesn't attempt to detect duplicate names
-    assertEquals("{\"a\":true,\"a\":false}", stringWriter.toString());
-  }
-
-  public void testPrettyPrintObject() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.setIndent("   ");
-
-    jsonWriter.beginObject();
-    jsonWriter.name("a").value(true);
-    jsonWriter.name("b").value(false);
-    jsonWriter.name("c").value(5.0);
-    jsonWriter.name("e").nullValue();
-    jsonWriter.name("f").beginArray();
-    jsonWriter.value(6.0);
-    jsonWriter.value(7.0);
-    jsonWriter.endArray();
-    jsonWriter.name("g").beginObject();
-    jsonWriter.name("h").value(8.0);
-    jsonWriter.name("i").value(9.0);
-    jsonWriter.endObject();
-    jsonWriter.endObject();
-
-    String expected = "{\n"
-        + "   \"a\": true,\n"
-        + "   \"b\": false,\n"
-        + "   \"c\": 5.0,\n"
-        + "   \"e\": null,\n"
-        + "   \"f\": [\n"
-        + "      6.0,\n"
-        + "      7.0\n"
-        + "   ],\n"
-        + "   \"g\": {\n"
-        + "      \"h\": 8.0,\n"
-        + "      \"i\": 9.0\n"
-        + "   }\n"
-        + "}";
-    assertEquals(expected, stringWriter.toString());
-  }
-
-  public void testPrettyPrintArray() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(stringWriter);
-    jsonWriter.setIndent("   ");
-
-    jsonWriter.beginArray();
-    jsonWriter.value(true);
-    jsonWriter.value(false);
-    jsonWriter.value(5.0);
-    jsonWriter.nullValue();
-    jsonWriter.beginObject();
-    jsonWriter.name("a").value(6.0);
-    jsonWriter.name("b").value(7.0);
-    jsonWriter.endObject();
-    jsonWriter.beginArray();
-    jsonWriter.value(8.0);
-    jsonWriter.value(9.0);
-    jsonWriter.endArray();
-    jsonWriter.endArray();
-
-    String expected = "[\n"
-        + "   true,\n"
-        + "   false,\n"
-        + "   5.0,\n"
-        + "   null,\n"
-        + "   {\n"
-        + "      \"a\": 6.0,\n"
-        + "      \"b\": 7.0\n"
-        + "   },\n"
-        + "   [\n"
-        + "      8.0,\n"
-        + "      9.0\n"
-        + "   ]\n"
-        + "]";
-    assertEquals(expected, stringWriter.toString());
-  }
-
-  public void testLenientWriterPermitsMultipleTopLevelValues() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter writer = new JsonWriter(stringWriter);
-    writer.setLenient(true);
-    writer.beginArray();
-    writer.endArray();
-    writer.beginArray();
-    writer.endArray();
-    writer.close();
-    assertEquals("[][]", stringWriter.toString());
-  }
-
-  public void testStrictWriterDoesNotPermitMultipleTopLevelValues() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter writer = new JsonWriter(stringWriter);
-    writer.beginArray();
-    writer.endArray();
-    try {
-      writer.beginArray();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testClosedWriterThrowsOnStructure() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter writer = new JsonWriter(stringWriter);
-    writer.beginArray();
-    writer.endArray();
-    writer.close();
-    try {
-      writer.beginArray();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-    try {
-      writer.endArray();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-    try {
-      writer.beginObject();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-    try {
-      writer.endObject();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testClosedWriterThrowsOnName() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter writer = new JsonWriter(stringWriter);
-    writer.beginArray();
-    writer.endArray();
-    writer.close();
-    try {
-      writer.name("a");
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testClosedWriterThrowsOnValue() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter writer = new JsonWriter(stringWriter);
-    writer.beginArray();
-    writer.endArray();
-    writer.close();
-    try {
-      writer.value("a");
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testClosedWriterThrowsOnFlush() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter writer = new JsonWriter(stringWriter);
-    writer.beginArray();
-    writer.endArray();
-    writer.close();
-    try {
-      writer.flush();
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  public void testWriterCloseIsIdempotent() throws IOException {
-    StringWriter stringWriter = new StringWriter();
-    JsonWriter writer = new JsonWriter(stringWriter);
-    writer.beginArray();
-    writer.endArray();
-    writer.close();
-    writer.close();
-  }
-}
diff --git a/gson/src/test/java/com/google/gson/CommentsTest.java b/gson/src/test/java/com/solidfire/gson/CommentsTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/CommentsTest.java
rename to gson/src/test/java/com/solidfire/gson/CommentsTest.java
index 306e5aff3..feffaf9ba 100644
--- a/gson/src/test/java/com/google/gson/CommentsTest.java
+++ b/gson/src/test/java/com/solidfire/gson/CommentsTest.java
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.reflect.TypeToken;
 import java.util.Arrays;
 import java.util.List;
+
+import com.solidfire.gson.Gson;
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/solidfire/gson/DefaultDateTypeAdapterTest.java b/gson/src/test/java/com/solidfire/gson/DefaultDateTypeAdapterTest.java
new file mode 100644
index 000000000..ea67d8880
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/DefaultDateTypeAdapterTest.java
@@ -0,0 +1,174 @@
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import junit.framework.TestCase;
+
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+import java.util.TimeZone;
+
+/**
+ * A simple unit test for the {@link DefaultDateTypeAdapter} class.
+ *
+ * @author Joel Leitch
+ */
+public class DefaultDateTypeAdapterTest extends TestCase {
+
+    public void testFormattingInEnUs() {
+        assertFormattingAlwaysEmitsUsLocale(Locale.US);
+    }
+
+    public void testFormattingInFr() {
+        assertFormattingAlwaysEmitsUsLocale(Locale.FRANCE);
+    }
+
+    private void assertFormattingAlwaysEmitsUsLocale(Locale locale) {
+        TimeZone defaultTimeZone = TimeZone.getDefault();
+        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
+        Locale defaultLocale = Locale.getDefault();
+        Locale.setDefault(locale);
+        try {
+            assertFormatted("Jan 1, 1970 12:00:00 AM", new DefaultDateTypeAdapter());
+            assertFormatted("1/1/70", new DefaultDateTypeAdapter(DateFormat.SHORT));
+            assertFormatted("Jan 1, 1970", new DefaultDateTypeAdapter(DateFormat.MEDIUM));
+            assertFormatted("January 1, 1970", new DefaultDateTypeAdapter(DateFormat.LONG));
+            assertFormatted("1/1/70 12:00 AM",
+                    new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
+            assertFormatted("Jan 1, 1970 12:00:00 AM",
+                    new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
+            assertFormatted("January 1, 1970 12:00:00 AM UTC",
+                    new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
+            assertFormatted("Thursday, January 1, 1970 12:00:00 AM UTC",
+                    new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
+        } finally {
+            TimeZone.setDefault(defaultTimeZone);
+            Locale.setDefault(defaultLocale);
+        }
+    }
+
+    public void testParsingDatesFormattedWithSystemLocale() {
+        TimeZone defaultTimeZone = TimeZone.getDefault();
+        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
+        Locale defaultLocale = Locale.getDefault();
+        Locale.setDefault(Locale.FRANCE);
+        try {
+            assertParsed("1 janv. 1970 00:00:00", new DefaultDateTypeAdapter());
+            assertParsed("01/01/70", new DefaultDateTypeAdapter(DateFormat.SHORT));
+            assertParsed("1 janv. 1970", new DefaultDateTypeAdapter(DateFormat.MEDIUM));
+            assertParsed("1 janvier 1970", new DefaultDateTypeAdapter(DateFormat.LONG));
+            assertParsed("01/01/70 00:00",
+                    new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
+            assertParsed("1 janv. 1970 00:00:00",
+                    new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
+            assertParsed("1 janvier 1970 00:00:00 UTC",
+                    new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
+            assertParsed("jeudi 1 janvier 1970 00 h 00 UTC",
+                    new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
+        } finally {
+            TimeZone.setDefault(defaultTimeZone);
+            Locale.setDefault(defaultLocale);
+        }
+    }
+
+    public void testParsingDatesFormattedWithUsLocale() {
+        TimeZone defaultTimeZone = TimeZone.getDefault();
+        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
+        Locale defaultLocale = Locale.getDefault();
+        Locale.setDefault(Locale.US);
+        try {
+            assertParsed("Jan 1, 1970 0:00:00 AM", new DefaultDateTypeAdapter());
+            assertParsed("1/1/70", new DefaultDateTypeAdapter(DateFormat.SHORT));
+            assertParsed("Jan 1, 1970", new DefaultDateTypeAdapter(DateFormat.MEDIUM));
+            assertParsed("January 1, 1970", new DefaultDateTypeAdapter(DateFormat.LONG));
+            assertParsed("1/1/70 0:00 AM",
+                    new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
+            assertParsed("Jan 1, 1970 0:00:00 AM",
+                    new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
+            assertParsed("January 1, 1970 0:00:00 AM UTC",
+                    new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
+            assertParsed("Thursday, January 1, 1970 0:00:00 AM UTC",
+                    new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
+        } finally {
+            TimeZone.setDefault(defaultTimeZone);
+            Locale.setDefault(defaultLocale);
+        }
+    }
+
+    public void testFormatUsesDefaultTimezone() {
+        TimeZone defaultTimeZone = TimeZone.getDefault();
+        TimeZone.setDefault(TimeZone.getTimeZone("America/Los_Angeles"));
+        Locale defaultLocale = Locale.getDefault();
+        Locale.setDefault(Locale.US);
+        try {
+            assertFormatted("Dec 31, 1969 4:00:00 PM", new DefaultDateTypeAdapter());
+            assertParsed("Dec 31, 1969 4:00:00 PM", new DefaultDateTypeAdapter());
+        } finally {
+            TimeZone.setDefault(defaultTimeZone);
+            Locale.setDefault(defaultLocale);
+        }
+    }
+
+    public void testDateDeserializationISO8601() throws Exception {
+        DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter();
+        assertParsed("1970-01-01T00:00:00.000Z", adapter);
+        assertParsed("1970-01-01T00:00Z", adapter);
+        assertParsed("1970-01-01T00:00:00+00:00", adapter);
+        assertParsed("1970-01-01T01:00:00+01:00", adapter);
+        assertParsed("1970-01-01T01:00:00+01", adapter);
+    }
+
+    public void testDateSerialization() throws Exception {
+        int dateStyle = DateFormat.LONG;
+        DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle);
+        DateFormat formatter = DateFormat.getDateInstance(dateStyle, Locale.US);
+        Date currentDate = new Date();
+
+        String dateString = dateTypeAdapter.serialize(currentDate, Date.class, null).getAsString();
+        assertEquals(formatter.format(currentDate), dateString);
+    }
+
+    public void testDatePattern() throws Exception {
+        String pattern = "yyyy-MM-dd";
+        DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(pattern);
+        DateFormat formatter = new SimpleDateFormat(pattern);
+        Date currentDate = new Date();
+
+        String dateString = dateTypeAdapter.serialize(currentDate, Date.class, null).getAsString();
+        assertEquals(formatter.format(currentDate), dateString);
+    }
+
+    public void testInvalidDatePattern() throws Exception {
+        try {
+            new DefaultDateTypeAdapter("I am a bad Date pattern....");
+            fail("Invalid date pattern should fail.");
+        } catch (IllegalArgumentException expected) {
+        }
+    }
+
+    private void assertFormatted(String formatted, DefaultDateTypeAdapter adapter) {
+        assertEquals(formatted, adapter.serialize(new Date(0), Date.class, null).getAsString());
+    }
+
+    private void assertParsed(String date, DefaultDateTypeAdapter adapter) {
+        assertEquals(date, new Date(0), adapter.deserialize(new JsonPrimitive(date), Date.class, null));
+        assertEquals("ISO 8601", new Date(0), adapter.deserialize(
+                new JsonPrimitive("1970-01-01T00:00:00Z"), Date.class, null));
+    }
+}
diff --git a/gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java b/gson/src/test/java/com/solidfire/gson/DefaultInetAddressTypeAdapterTest.java
similarity index 61%
rename from gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java
rename to gson/src/test/java/com/solidfire/gson/DefaultInetAddressTypeAdapterTest.java
index 6b853f5de..11391a772 100644
--- a/gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java
+++ b/gson/src/test/java/com/solidfire/gson/DefaultInetAddressTypeAdapterTest.java
@@ -14,32 +14,32 @@
  * limitations under the License.
  */
 
-package com.google.gson;
-
-import java.net.InetAddress;
+package com.solidfire.gson;
 
 import junit.framework.TestCase;
 
+import java.net.InetAddress;
+
 /**
  * Unit tests for the default serializer/deserializer for the {@code InetAddress} type.
- * 
+ *
  * @author Joel Leitch
  */
 public class DefaultInetAddressTypeAdapterTest extends TestCase {
-  private Gson gson;
-  
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    gson = new Gson();
-  }
-  
-  public void testInetAddressSerializationAndDeserialization() throws Exception {
-    InetAddress address = InetAddress.getByName("8.8.8.8");
-    String jsonAddress = gson.toJson(address);
-    assertEquals("\"8.8.8.8\"", jsonAddress);
-    
-    InetAddress value = gson.fromJson(jsonAddress, InetAddress.class);
-    assertEquals(value, address);
-  } 
+    private Gson gson;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        gson = new Gson();
+    }
+
+    public void testInetAddressSerializationAndDeserialization() throws Exception {
+        InetAddress address = InetAddress.getByName("8.8.8.8");
+        String jsonAddress = gson.toJson(address);
+        assertEquals("\"8.8.8.8\"", jsonAddress);
+
+        InetAddress value = gson.fromJson(jsonAddress, InetAddress.class);
+        assertEquals(value, address);
+    }
 }
diff --git a/gson/src/test/java/com/solidfire/gson/DefaultMapJsonSerializerTest.java b/gson/src/test/java/com/solidfire/gson/DefaultMapJsonSerializerTest.java
new file mode 100644
index 000000000..799e62d86
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/DefaultMapJsonSerializerTest.java
@@ -0,0 +1,67 @@
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.reflect.TypeToken;
+import junit.framework.TestCase;
+
+import java.lang.reflect.Type;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Unit test for the default JSON map serialization object located in the
+ * {@link DefaultTypeAdapters} class.
+ *
+ * @author Joel Leitch
+ */
+public class DefaultMapJsonSerializerTest extends TestCase {
+    private Gson gson = new Gson();
+
+    public void testEmptyMapNoTypeSerialization() {
+        Map<String, String> emptyMap = new HashMap<String, String>();
+        JsonElement element = gson.toJsonTree(emptyMap, emptyMap.getClass());
+        assertTrue(element instanceof JsonObject);
+        JsonObject emptyMapJsonObject = (JsonObject) element;
+        assertTrue(emptyMapJsonObject.entrySet().isEmpty());
+    }
+
+    public void testEmptyMapSerialization() {
+        Type mapType = new TypeToken<Map<String, String>>() {
+        }.getType();
+        Map<String, String> emptyMap = new HashMap<String, String>();
+        JsonElement element = gson.toJsonTree(emptyMap, mapType);
+
+        assertTrue(element instanceof JsonObject);
+        JsonObject emptyMapJsonObject = (JsonObject) element;
+        assertTrue(emptyMapJsonObject.entrySet().isEmpty());
+    }
+
+    public void testNonEmptyMapSerialization() {
+        Type mapType = new TypeToken<Map<String, String>>() {
+        }.getType();
+        Map<String, String> myMap = new HashMap<String, String>();
+        String key = "key1";
+        myMap.put(key, "value1");
+        Gson gson = new Gson();
+        JsonElement element = gson.toJsonTree(myMap, mapType);
+
+        assertTrue(element.isJsonObject());
+        JsonObject mapJsonObject = element.getAsJsonObject();
+        assertTrue(mapJsonObject.has(key));
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/ExposeAnnotationExclusionStrategyTest.java b/gson/src/test/java/com/solidfire/gson/ExposeAnnotationExclusionStrategyTest.java
new file mode 100644
index 000000000..b8524f548
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/ExposeAnnotationExclusionStrategyTest.java
@@ -0,0 +1,88 @@
+/*
+ * Copyright (C) 2011 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.annotations.Expose;
+import com.solidfire.gson.internal.Excluder;
+import junit.framework.TestCase;
+
+import java.lang.reflect.Field;
+
+/**
+ * Unit tests for GsonBuilder.REQUIRE_EXPOSE_DESERIALIZE.
+ *
+ * @author Joel Leitch
+ */
+public class ExposeAnnotationExclusionStrategyTest extends TestCase {
+    private Excluder excluder = Excluder.DEFAULT.excludeFieldsWithoutExposeAnnotation();
+
+    public void testNeverSkipClasses() throws Exception {
+        assertFalse(excluder.excludeClass(MockObject.class, true));
+        assertFalse(excluder.excludeClass(MockObject.class, false));
+    }
+
+    public void testSkipNonAnnotatedFields() throws Exception {
+        Field f = createFieldAttributes("hiddenField");
+        assertTrue(excluder.excludeField(f, true));
+        assertTrue(excluder.excludeField(f, false));
+    }
+
+    public void testSkipExplicitlySkippedFields() throws Exception {
+        Field f = createFieldAttributes("explicitlyHiddenField");
+        assertTrue(excluder.excludeField(f, true));
+        assertTrue(excluder.excludeField(f, false));
+    }
+
+    public void testNeverSkipExposedAnnotatedFields() throws Exception {
+        Field f = createFieldAttributes("exposedField");
+        assertFalse(excluder.excludeField(f, true));
+        assertFalse(excluder.excludeField(f, false));
+    }
+
+    public void testNeverSkipExplicitlyExposedAnnotatedFields() throws Exception {
+        Field f = createFieldAttributes("explicitlyExposedField");
+        assertFalse(excluder.excludeField(f, true));
+        assertFalse(excluder.excludeField(f, false));
+    }
+
+    public void testDifferentSerializeAndDeserializeField() throws Exception {
+        Field f = createFieldAttributes("explicitlyDifferentModeField");
+        assertFalse(excluder.excludeField(f, true));
+        assertTrue(excluder.excludeField(f, false));
+    }
+
+    private static Field createFieldAttributes(String fieldName) throws Exception {
+        return MockObject.class.getField(fieldName);
+    }
+
+    @SuppressWarnings("unused")
+    private static class MockObject {
+        @Expose
+        public final int exposedField = 0;
+
+        @Expose(serialize = true, deserialize = true)
+        public final int explicitlyExposedField = 0;
+
+        @Expose(serialize = false, deserialize = false)
+        public final int explicitlyHiddenField = 0;
+
+        @Expose(serialize = true, deserialize = false)
+        public final int explicitlyDifferentModeField = 0;
+
+        public final int hiddenField = 0;
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/FieldAttributesTest.java b/gson/src/test/java/com/solidfire/gson/FieldAttributesTest.java
new file mode 100644
index 000000000..0990160da
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/FieldAttributesTest.java
@@ -0,0 +1,83 @@
+/*
+ * Copyright (C) 2009 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.reflect.TypeToken;
+import junit.framework.TestCase;
+
+import java.lang.reflect.Modifier;
+import java.lang.reflect.Type;
+import java.util.List;
+
+/**
+ * Unit tests for the {@link FieldAttributes} class.
+ *
+ * @author Inderjeet Singh
+ * @author Joel Leitch
+ */
+public class FieldAttributesTest extends TestCase {
+    private FieldAttributes fieldAttributes;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        fieldAttributes = new FieldAttributes(Foo.class.getField("bar"));
+    }
+
+    public void testNullField() throws Exception {
+        try {
+            new FieldAttributes(null);
+            fail("Field parameter can not be null");
+        } catch (NullPointerException expected) {
+        }
+    }
+
+    public void testDeclaringClass() throws Exception {
+        assertEquals(Foo.class, fieldAttributes.getDeclaringClass());
+    }
+
+    public void testModifiers() throws Exception {
+        assertFalse(fieldAttributes.hasModifier(Modifier.STATIC));
+        assertFalse(fieldAttributes.hasModifier(Modifier.FINAL));
+        assertFalse(fieldAttributes.hasModifier(Modifier.ABSTRACT));
+        assertFalse(fieldAttributes.hasModifier(Modifier.VOLATILE));
+        assertFalse(fieldAttributes.hasModifier(Modifier.PROTECTED));
+
+        assertTrue(fieldAttributes.hasModifier(Modifier.PUBLIC));
+        assertTrue(fieldAttributes.hasModifier(Modifier.TRANSIENT));
+    }
+
+    public void testIsSynthetic() throws Exception {
+        assertFalse(fieldAttributes.isSynthetic());
+    }
+
+    public void testName() throws Exception {
+        assertEquals("bar", fieldAttributes.getName());
+    }
+
+    public void testDeclaredTypeAndClass() throws Exception {
+        Type expectedType = new TypeToken<List<String>>() {
+        }.getType();
+        assertEquals(expectedType, fieldAttributes.getDeclaredType());
+        assertEquals(List.class, fieldAttributes.getDeclaredClass());
+    }
+
+    private static class Foo {
+        @SuppressWarnings("unused")
+        public transient List<String> bar;
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/GenericArrayTypeTest.java b/gson/src/test/java/com/solidfire/gson/GenericArrayTypeTest.java
new file mode 100644
index 000000000..10398a89d
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/GenericArrayTypeTest.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.internal.$Gson$Types;
+import com.solidfire.gson.reflect.TypeToken;
+import junit.framework.TestCase;
+
+import java.lang.reflect.GenericArrayType;
+import java.lang.reflect.Type;
+import java.util.List;
+
+/**
+ * Unit tests for the {@code GenericArrayType}s created by the {@link $Gson$Types} class.
+ *
+ * @author Inderjeet Singh
+ * @author Joel Leitch
+ */
+public class GenericArrayTypeTest extends TestCase {
+    private GenericArrayType ourType;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        ourType = $Gson$Types.arrayOf($Gson$Types.newParameterizedTypeWithOwner(null, List.class, String.class));
+    }
+
+    public void testOurTypeFunctionality() throws Exception {
+        Type parameterizedType = new TypeToken<List<String>>() {
+        }.getType();
+        Type genericArrayType = new TypeToken<List<String>[]>() {
+        }.getType();
+
+        assertEquals(parameterizedType, ourType.getGenericComponentType());
+        assertEquals(genericArrayType, ourType);
+        assertEquals(genericArrayType.hashCode(), ourType.hashCode());
+    }
+
+    public void testNotEquals() throws Exception {
+        Type differentGenericArrayType = new TypeToken<List<String>[][]>() {
+        }.getType();
+        assertFalse(differentGenericArrayType.equals(ourType));
+        assertFalse(ourType.equals(differentGenericArrayType));
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/GsonBuilderTest.java b/gson/src/test/java/com/solidfire/gson/GsonBuilderTest.java
new file mode 100755
index 000000000..58e654e99
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/GsonBuilderTest.java
@@ -0,0 +1,89 @@
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonWriter;
+import junit.framework.TestCase;
+
+import java.lang.reflect.Modifier;
+import java.lang.reflect.Type;
+
+/**
+ * Unit tests for {@link GsonBuilder}.
+ *
+ * @author Inderjeet Singh
+ */
+public class GsonBuilderTest extends TestCase {
+    private static final TypeAdapter<Object> NULL_TYPE_ADAPTER = new TypeAdapter<Object>() {
+        @Override
+        public void write(JsonWriter out, Object value) {
+            throw new AssertionError();
+        }
+
+        @Override
+        public Object read(JsonReader in) {
+            throw new AssertionError();
+        }
+    };
+
+    public void testCreatingMoreThanOnce() {
+        GsonBuilder builder = new GsonBuilder();
+        builder.create();
+        builder.create();
+    }
+
+    public void testExcludeFieldsWithModifiers() {
+        Gson gson = new GsonBuilder()
+                .excludeFieldsWithModifiers(Modifier.VOLATILE, Modifier.PRIVATE)
+                .create();
+        assertEquals("{\"d\":\"d\"}", gson.toJson(new HasModifiers()));
+    }
+
+    public void testRegisterTypeAdapterForCoreType() {
+        Type[] types = {
+                byte.class,
+                int.class,
+                double.class,
+                Short.class,
+                Long.class,
+                String.class,
+        };
+        for (Type type : types) {
+            new GsonBuilder().registerTypeAdapter(type, NULL_TYPE_ADAPTER);
+        }
+    }
+
+    @SuppressWarnings("unused")
+    static class HasModifiers {
+        private String a = "a";
+        volatile String b = "b";
+        private volatile String c = "c";
+        String d = "d";
+    }
+
+    public void testTransientFieldExclusion() {
+        Gson gson = new GsonBuilder()
+                .excludeFieldsWithModifiers()
+                .create();
+        assertEquals("{\"a\":\"a\"}", gson.toJson(new HasTransients()));
+    }
+
+    static class HasTransients {
+        transient String a = "a";
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/GsonTypeAdapterTest.java b/gson/src/test/java/com/solidfire/gson/GsonTypeAdapterTest.java
new file mode 100644
index 000000000..7ba78213e
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/GsonTypeAdapterTest.java
@@ -0,0 +1,157 @@
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import junit.framework.TestCase;
+
+import java.lang.reflect.Type;
+import java.math.BigInteger;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicLong;
+
+/**
+ * Contains numerous tests involving registered type converters with a Gson instance.
+ *
+ * @author Inderjeet Singh
+ * @author Joel Leitch
+ */
+public class GsonTypeAdapterTest extends TestCase {
+    private Gson gson;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        gson = new GsonBuilder()
+                .registerTypeAdapter(AtomicLong.class, new ExceptionTypeAdapter())
+                .registerTypeAdapter(AtomicInteger.class, new AtomicIntegerTypeAdapter())
+                .create();
+    }
+
+    public void testDefaultTypeAdapterThrowsParseException() throws Exception {
+        try {
+            gson.fromJson("{\"abc\":123}", BigInteger.class);
+            fail("Should have thrown a JsonParseException");
+        } catch (JsonParseException expected) {
+        }
+    }
+
+    public void testTypeAdapterThrowsException() throws Exception {
+        try {
+            gson.toJson(new AtomicLong(0));
+            fail("Type Adapter should have thrown an exception");
+        } catch (IllegalStateException expected) {
+        }
+
+        try {
+            gson.fromJson("123", AtomicLong.class);
+            fail("Type Adapter should have thrown an exception");
+        } catch (JsonParseException expected) {
+        }
+    }
+
+    public void testTypeAdapterProperlyConvertsTypes() throws Exception {
+        int intialValue = 1;
+        AtomicInteger atomicInt = new AtomicInteger(intialValue);
+        String json = gson.toJson(atomicInt);
+        assertEquals(intialValue + 1, Integer.parseInt(json));
+
+        atomicInt = gson.fromJson(json, AtomicInteger.class);
+        assertEquals(intialValue, atomicInt.get());
+    }
+
+    public void testTypeAdapterDoesNotAffectNonAdaptedTypes() throws Exception {
+        String expected = "blah";
+        String actual = gson.toJson(expected);
+        assertEquals("\"" + expected + "\"", actual);
+
+        actual = gson.fromJson(actual, String.class);
+        assertEquals(expected, actual);
+    }
+
+    private static class ExceptionTypeAdapter
+            implements JsonSerializer<AtomicLong>, JsonDeserializer<AtomicLong> {
+        @Override
+        public JsonElement serialize(
+                AtomicLong src, Type typeOfSrc, JsonSerializationContext context) {
+            throw new IllegalStateException();
+        }
+
+        @Override
+        public AtomicLong deserialize(
+                JsonElement json, Type typeOfT, JsonDeserializationContext context)
+                throws JsonParseException {
+            throw new IllegalStateException();
+        }
+    }
+
+    private static class AtomicIntegerTypeAdapter
+            implements JsonSerializer<AtomicInteger>, JsonDeserializer<AtomicInteger> {
+        @Override
+        public JsonElement serialize(AtomicInteger src, Type typeOfSrc, JsonSerializationContext context) {
+            return new JsonPrimitive(src.incrementAndGet());
+        }
+
+        @Override
+        public AtomicInteger deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
+                throws JsonParseException {
+            int intValue = json.getAsInt();
+            return new AtomicInteger(--intValue);
+        }
+    }
+
+    static abstract class Abstract {
+        String a;
+    }
+
+    static class Concrete extends Abstract {
+        String b;
+    }
+
+    // https://groups.google.com/d/topic/google-gson/EBmOCa8kJPE/discussion
+    public void testDeserializerForAbstractClass() {
+        Concrete instance = new Concrete();
+        instance.a = "android";
+        instance.b = "beep";
+        assertSerialized("{\"a\":\"android\"}", Abstract.class, true, true, instance);
+        assertSerialized("{\"a\":\"android\"}", Abstract.class, true, false, instance);
+        assertSerialized("{\"a\":\"android\"}", Abstract.class, false, true, instance);
+        assertSerialized("{\"a\":\"android\"}", Abstract.class, false, false, instance);
+        assertSerialized("{\"b\":\"beep\",\"a\":\"android\"}", Concrete.class, true, true, instance);
+        assertSerialized("{\"b\":\"beep\",\"a\":\"android\"}", Concrete.class, true, false, instance);
+        assertSerialized("{\"b\":\"beep\",\"a\":\"android\"}", Concrete.class, false, true, instance);
+        assertSerialized("{\"b\":\"beep\",\"a\":\"android\"}", Concrete.class, false, false, instance);
+    }
+
+    private void assertSerialized(String expected, Class<?> instanceType, boolean registerAbstractDeserializer,
+                                  boolean registerAbstractHierarchyDeserializer, Object instance) {
+        JsonDeserializer<Abstract> deserializer = new JsonDeserializer<Abstract>() {
+            public Abstract deserialize(JsonElement json, Type typeOfT,
+                                        JsonDeserializationContext context) throws JsonParseException {
+                throw new AssertionError();
+            }
+        };
+        GsonBuilder builder = new GsonBuilder();
+        if (registerAbstractDeserializer) {
+            builder.registerTypeAdapter(Abstract.class, deserializer);
+        }
+        if (registerAbstractHierarchyDeserializer) {
+            builder.registerTypeHierarchyAdapter(Abstract.class, deserializer);
+        }
+        Gson gson = builder.create();
+        assertEquals(expected, gson.toJson(instance, instanceType));
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/InnerClassExclusionStrategyTest.java b/gson/src/test/java/com/solidfire/gson/InnerClassExclusionStrategyTest.java
new file mode 100644
index 000000000..6e1cc9811
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/InnerClassExclusionStrategyTest.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.internal.Excluder;
+import junit.framework.TestCase;
+
+import java.lang.reflect.Field;
+
+/**
+ * Unit test for GsonBuilder.EXCLUDE_INNER_CLASSES.
+ *
+ * @author Joel Leitch
+ */
+public class InnerClassExclusionStrategyTest extends TestCase {
+    public InnerClass innerClass = new InnerClass();
+    public StaticNestedClass staticNestedClass = new StaticNestedClass();
+    private Excluder excluder = Excluder.DEFAULT.disableInnerClassSerialization();
+
+    public void testExcludeInnerClassObject() throws Exception {
+        Class<?> clazz = innerClass.getClass();
+        assertTrue(excluder.excludeClass(clazz, true));
+    }
+
+    public void testExcludeInnerClassField() throws Exception {
+        Field f = getClass().getField("innerClass");
+        assertTrue(excluder.excludeField(f, true));
+    }
+
+    public void testIncludeStaticNestedClassObject() throws Exception {
+        Class<?> clazz = staticNestedClass.getClass();
+        assertFalse(excluder.excludeClass(clazz, true));
+    }
+
+    public void testIncludeStaticNestedClassField() throws Exception {
+        Field f = getClass().getField("staticNestedClass");
+        assertFalse(excluder.excludeField(f, true));
+    }
+
+    class InnerClass {
+    }
+
+    static class StaticNestedClass {
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/JavaSerializationTest.java b/gson/src/test/java/com/solidfire/gson/JavaSerializationTest.java
new file mode 100644
index 000000000..2bb056147
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/JavaSerializationTest.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright (C) 2012 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.reflect.TypeToken;
+import junit.framework.TestCase;
+
+import java.io.*;
+import java.lang.reflect.Type;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Check that Gson doesn't return non-serializable data types.
+ *
+ * @author Jesse Wilson
+ */
+public final class JavaSerializationTest extends TestCase {
+    private final Gson gson = new Gson();
+
+    public void testMapIsSerializable() throws Exception {
+        Type type = new TypeToken<Map<String, Integer>>() {
+        }.getType();
+        Map<String, Integer> map = gson.fromJson("{\"b\":1,\"c\":2,\"a\":3}", type);
+        Map<String, Integer> serialized = serializedCopy(map);
+        assertEquals(map, serialized);
+        // Also check that the iteration order is retained.
+        assertEquals(Arrays.asList("b", "c", "a"), new ArrayList<String>(serialized.keySet()));
+    }
+
+    public void testListIsSerializable() throws Exception {
+        Type type = new TypeToken<List<String>>() {
+        }.getType();
+        List<String> list = gson.fromJson("[\"a\",\"b\",\"c\"]", type);
+        List<String> serialized = serializedCopy(list);
+        assertEquals(list, serialized);
+    }
+
+    public void testNumberIsSerializable() throws Exception {
+        Type type = new TypeToken<List<Number>>() {
+        }.getType();
+        List<Number> list = gson.fromJson("[1,3.14,6.673e-11]", type);
+        List<Number> serialized = serializedCopy(list);
+        assertEquals(1.0, serialized.get(0).doubleValue());
+        assertEquals(3.14, serialized.get(1).doubleValue());
+        assertEquals(6.673e-11, serialized.get(2).doubleValue());
+    }
+
+    @SuppressWarnings("unchecked") // Serialization promises to return the same type.
+    private <T> T serializedCopy(T object) throws IOException, ClassNotFoundException {
+        ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
+        ObjectOutputStream out = new ObjectOutputStream(bytesOut);
+        out.writeObject(object);
+        out.close();
+        ByteArrayInputStream bytesIn = new ByteArrayInputStream(bytesOut.toByteArray());
+        ObjectInputStream in = new ObjectInputStream(bytesIn);
+        return (T) in.readObject();
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/JsonArrayTest.java b/gson/src/test/java/com/solidfire/gson/JsonArrayTest.java
new file mode 100644
index 000000000..b1ab26dc1
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/JsonArrayTest.java
@@ -0,0 +1,103 @@
+/*
+ * Copyright (C) 2011 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.common.MoreAsserts;
+import junit.framework.TestCase;
+
+/**
+ * @author Jesse Wilson
+ */
+public final class JsonArrayTest extends TestCase {
+
+    public void testEqualsOnEmptyArray() {
+        MoreAsserts.assertEqualsAndHashCode(new JsonArray(), new JsonArray());
+    }
+
+    public void testEqualsNonEmptyArray() {
+        JsonArray a = new JsonArray();
+        JsonArray b = new JsonArray();
+
+        assertEquals(a, a);
+
+        a.add(new JsonObject());
+        assertFalse(a.equals(b));
+        assertFalse(b.equals(a));
+
+        b.add(new JsonObject());
+        MoreAsserts.assertEqualsAndHashCode(a, b);
+
+        a.add(new JsonObject());
+        assertFalse(a.equals(b));
+        assertFalse(b.equals(a));
+
+        b.add(JsonNull.INSTANCE);
+        assertFalse(a.equals(b));
+        assertFalse(b.equals(a));
+    }
+
+    public void testRemove() {
+        JsonArray array = new JsonArray();
+        try {
+            array.remove(0);
+            fail();
+        } catch (IndexOutOfBoundsException expected) {
+        }
+        JsonPrimitive a = new JsonPrimitive("a");
+        array.add(a);
+        assertTrue(array.remove(a));
+        assertFalse(array.contains(a));
+        array.add(a);
+        array.add(new JsonPrimitive("b"));
+        assertEquals("b", array.remove(1).getAsString());
+        assertEquals(1, array.size());
+        assertTrue(array.contains(a));
+    }
+
+    public void testSet() {
+        JsonArray array = new JsonArray();
+        try {
+            array.set(0, new JsonPrimitive(1));
+            fail();
+        } catch (IndexOutOfBoundsException expected) {
+        }
+        JsonPrimitive a = new JsonPrimitive("a");
+        array.add(a);
+        array.set(0, new JsonPrimitive("b"));
+        assertEquals("b", array.get(0).getAsString());
+        array.set(0, null);
+        assertNull(array.get(0));
+        array.set(0, new JsonPrimitive("c"));
+        assertEquals("c", array.get(0).getAsString());
+        assertEquals(1, array.size());
+    }
+
+    public void testDeepCopy() {
+        JsonArray original = new JsonArray();
+        JsonArray firstEntry = new JsonArray();
+        original.add(firstEntry);
+
+        JsonArray copy = original.deepCopy();
+        original.add(new JsonPrimitive("y"));
+
+        assertEquals(1, copy.size());
+        firstEntry.add(new JsonPrimitive("z"));
+
+        assertEquals(1, original.get(0).getAsJsonArray().size());
+        assertEquals(0, copy.get(0).getAsJsonArray().size());
+    }
+}
diff --git a/gson/src/test/java/com/google/gson/JsonNullTest.java b/gson/src/test/java/com/solidfire/gson/JsonNullTest.java
similarity index 55%
rename from gson/src/test/java/com/google/gson/JsonNullTest.java
rename to gson/src/test/java/com/solidfire/gson/JsonNullTest.java
index 6157e3876..df5c1dce3 100644
--- a/gson/src/test/java/com/google/gson/JsonNullTest.java
+++ b/gson/src/test/java/com/solidfire/gson/JsonNullTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
-import com.google.gson.common.MoreAsserts;
+import com.solidfire.gson.common.MoreAsserts;
 import junit.framework.TestCase;
 
 /**
@@ -24,17 +24,17 @@
  */
 public final class JsonNullTest extends TestCase {
 
-  @SuppressWarnings("deprecation")
-  public void testEqualsAndHashcode() {
-    MoreAsserts.assertEqualsAndHashCode(new JsonNull(), new JsonNull());
-    MoreAsserts.assertEqualsAndHashCode(new JsonNull(), JsonNull.INSTANCE);
-    MoreAsserts.assertEqualsAndHashCode(JsonNull.INSTANCE, JsonNull.INSTANCE);
-  }
-
-  public void testDeepCopy() {
     @SuppressWarnings("deprecation")
-    JsonNull a = new JsonNull();
-    assertSame(JsonNull.INSTANCE, a.deepCopy());
-    assertSame(JsonNull.INSTANCE, JsonNull.INSTANCE.deepCopy());
-  }
+    public void testEqualsAndHashcode() {
+        MoreAsserts.assertEqualsAndHashCode(new JsonNull(), new JsonNull());
+        MoreAsserts.assertEqualsAndHashCode(new JsonNull(), JsonNull.INSTANCE);
+        MoreAsserts.assertEqualsAndHashCode(JsonNull.INSTANCE, JsonNull.INSTANCE);
+    }
+
+    public void testDeepCopy() {
+        @SuppressWarnings("deprecation")
+        JsonNull a = new JsonNull();
+        assertSame(JsonNull.INSTANCE, a.deepCopy());
+        assertSame(JsonNull.INSTANCE, JsonNull.INSTANCE.deepCopy());
+    }
 }
diff --git a/gson/src/test/java/com/solidfire/gson/JsonObjectTest.java b/gson/src/test/java/com/solidfire/gson/JsonObjectTest.java
new file mode 100644
index 000000000..1166f0ad9
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/JsonObjectTest.java
@@ -0,0 +1,172 @@
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.common.MoreAsserts;
+import junit.framework.TestCase;
+
+/**
+ * Unit test for the {@link JsonObject} class.
+ *
+ * @author Joel Leitch
+ */
+public class JsonObjectTest extends TestCase {
+
+    public void testAddingAndRemovingObjectProperties() throws Exception {
+        JsonObject jsonObj = new JsonObject();
+        String propertyName = "property";
+        assertFalse(jsonObj.has(propertyName));
+        assertNull(jsonObj.get(propertyName));
+
+        JsonPrimitive value = new JsonPrimitive("blah");
+        jsonObj.add(propertyName, value);
+        assertEquals(value, jsonObj.get(propertyName));
+
+        JsonElement removedElement = jsonObj.remove(propertyName);
+        assertEquals(value, removedElement);
+        assertFalse(jsonObj.has(propertyName));
+        assertNull(jsonObj.get(propertyName));
+    }
+
+    public void testAddingNullPropertyValue() throws Exception {
+        String propertyName = "property";
+        JsonObject jsonObj = new JsonObject();
+        jsonObj.add(propertyName, null);
+
+        assertTrue(jsonObj.has(propertyName));
+
+        JsonElement jsonElement = jsonObj.get(propertyName);
+        assertNotNull(jsonElement);
+        assertTrue(jsonElement.isJsonNull());
+    }
+
+    public void testAddingNullOrEmptyPropertyName() throws Exception {
+        JsonObject jsonObj = new JsonObject();
+        try {
+            jsonObj.add(null, JsonNull.INSTANCE);
+            fail("Should not allow null property names.");
+        } catch (NullPointerException expected) {
+        }
+
+        jsonObj.add("", JsonNull.INSTANCE);
+        jsonObj.add("   \t", JsonNull.INSTANCE);
+    }
+
+    public void testAddingBooleanProperties() throws Exception {
+        String propertyName = "property";
+        JsonObject jsonObj = new JsonObject();
+        jsonObj.addProperty(propertyName, true);
+
+        assertTrue(jsonObj.has(propertyName));
+
+        JsonElement jsonElement = jsonObj.get(propertyName);
+        assertNotNull(jsonElement);
+        assertTrue(jsonElement.getAsBoolean());
+    }
+
+    public void testAddingStringProperties() throws Exception {
+        String propertyName = "property";
+        String value = "blah";
+
+        JsonObject jsonObj = new JsonObject();
+        jsonObj.addProperty(propertyName, value);
+
+        assertTrue(jsonObj.has(propertyName));
+
+        JsonElement jsonElement = jsonObj.get(propertyName);
+        assertNotNull(jsonElement);
+        assertEquals(value, jsonElement.getAsString());
+    }
+
+    public void testAddingCharacterProperties() throws Exception {
+        String propertyName = "property";
+        char value = 'a';
+
+        JsonObject jsonObj = new JsonObject();
+        jsonObj.addProperty(propertyName, value);
+
+        assertTrue(jsonObj.has(propertyName));
+
+        JsonElement jsonElement = jsonObj.get(propertyName);
+        assertNotNull(jsonElement);
+        assertEquals(String.valueOf(value), jsonElement.getAsString());
+        assertEquals(value, jsonElement.getAsCharacter());
+    }
+
+    /**
+     * From bug report http://code.google.com/p/google-gson/issues/detail?id=182
+     */
+    public void testPropertyWithQuotes() {
+        JsonObject jsonObj = new JsonObject();
+        jsonObj.add("a\"b", new JsonPrimitive("c\"d"));
+        String json = new Gson().toJson(jsonObj);
+        assertEquals("{\"a\\\"b\":\"c\\\"d\"}", json);
+    }
+
+    /**
+     * From issue 227.
+     */
+    public void testWritePropertyWithEmptyStringName() {
+        JsonObject jsonObj = new JsonObject();
+        jsonObj.add("", new JsonPrimitive(true));
+        assertEquals("{\"\":true}", new Gson().toJson(jsonObj));
+
+    }
+
+    public void testReadPropertyWithEmptyStringName() {
+        JsonObject jsonObj = new JsonParser().parse("{\"\":true}").getAsJsonObject();
+        assertEquals(true, jsonObj.get("").getAsBoolean());
+    }
+
+    public void testEqualsOnEmptyObject() {
+        MoreAsserts.assertEqualsAndHashCode(new JsonObject(), new JsonObject());
+    }
+
+    public void testEqualsNonEmptyObject() {
+        JsonObject a = new JsonObject();
+        JsonObject b = new JsonObject();
+
+        assertEquals(a, a);
+
+        a.add("foo", new JsonObject());
+        assertFalse(a.equals(b));
+        assertFalse(b.equals(a));
+
+        b.add("foo", new JsonObject());
+        MoreAsserts.assertEqualsAndHashCode(a, b);
+
+        a.add("bar", new JsonObject());
+        assertFalse(a.equals(b));
+        assertFalse(b.equals(a));
+
+        b.add("bar", JsonNull.INSTANCE);
+        assertFalse(a.equals(b));
+        assertFalse(b.equals(a));
+    }
+
+    public void testDeepCopy() {
+        JsonObject original = new JsonObject();
+        JsonArray firstEntry = new JsonArray();
+        original.add("key", firstEntry);
+
+        JsonObject copy = original.deepCopy();
+        firstEntry.add(new JsonPrimitive("z"));
+
+        assertEquals(1, original.get("key").getAsJsonArray().size());
+        assertEquals(0, copy.get("key").getAsJsonArray().size());
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/JsonParserTest.java b/gson/src/test/java/com/solidfire/gson/JsonParserTest.java
new file mode 100644
index 000000000..70afd027f
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/JsonParserTest.java
@@ -0,0 +1,127 @@
+/*
+ * Copyright (C) 2009 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.internal.Streams;
+import com.solidfire.gson.stream.JsonReader;
+import junit.framework.TestCase;
+
+import java.io.CharArrayReader;
+import java.io.CharArrayWriter;
+import java.io.StringReader;
+
+/**
+ * Unit test for {@link JsonParser}
+ *
+ * @author Inderjeet Singh
+ */
+public class JsonParserTest extends TestCase {
+    private JsonParser parser;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        parser = new JsonParser();
+    }
+
+    public void testParseInvalidJson() {
+        try {
+            parser.parse("[[]");
+            fail();
+        } catch (JsonSyntaxException expected) {
+        }
+    }
+
+    public void testParseUnquotedStringArrayFails() {
+        JsonElement element = parser.parse("[a,b,c]");
+        assertEquals("a", element.getAsJsonArray().get(0).getAsString());
+        assertEquals("b", element.getAsJsonArray().get(1).getAsString());
+        assertEquals("c", element.getAsJsonArray().get(2).getAsString());
+        assertEquals(3, element.getAsJsonArray().size());
+    }
+
+    public void testParseString() {
+        String json = "{a:10,b:'c'}";
+        JsonElement e = parser.parse(json);
+        assertTrue(e.isJsonObject());
+        assertEquals(10, e.getAsJsonObject().get("a").getAsInt());
+        assertEquals("c", e.getAsJsonObject().get("b").getAsString());
+    }
+
+    public void testParseEmptyString() {
+        JsonElement e = parser.parse("\"   \"");
+        assertTrue(e.isJsonPrimitive());
+        assertEquals("   ", e.getAsString());
+    }
+
+    public void testParseEmptyWhitespaceInput() {
+        JsonElement e = parser.parse("     ");
+        assertTrue(e.isJsonNull());
+    }
+
+    public void testParseUnquotedSingleWordStringFails() {
+        assertEquals("Test", parser.parse("Test").getAsString());
+    }
+
+    public void testParseUnquotedMultiWordStringFails() {
+        String unquotedSentence = "Test is a test..blah blah";
+        try {
+            parser.parse(unquotedSentence);
+            fail();
+        } catch (JsonSyntaxException expected) {
+        }
+    }
+
+    public void testParseMixedArray() {
+        String json = "[{},13,\"stringValue\"]";
+        JsonElement e = parser.parse(json);
+        assertTrue(e.isJsonArray());
+
+        JsonArray array = e.getAsJsonArray();
+        assertEquals("{}", array.get(0).toString());
+        assertEquals(13, array.get(1).getAsInt());
+        assertEquals("stringValue", array.get(2).getAsString());
+    }
+
+    public void testParseReader() {
+        StringReader reader = new StringReader("{a:10,b:'c'}");
+        JsonElement e = parser.parse(reader);
+        assertTrue(e.isJsonObject());
+        assertEquals(10, e.getAsJsonObject().get("a").getAsInt());
+        assertEquals("c", e.getAsJsonObject().get("b").getAsString());
+    }
+
+    public void testReadWriteTwoObjects() throws Exception {
+        Gson gson = new Gson();
+        CharArrayWriter writer = new CharArrayWriter();
+        BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one");
+        writer.write(gson.toJson(expectedOne).toCharArray());
+        BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two");
+        writer.write(gson.toJson(expectedTwo).toCharArray());
+        CharArrayReader reader = new CharArrayReader(writer.toCharArray());
+
+        JsonReader parser = new JsonReader(reader);
+        parser.setLenient(true);
+        JsonElement element1 = Streams.parse(parser);
+        JsonElement element2 = Streams.parse(parser);
+        BagOfPrimitives actualOne = gson.fromJson(element1, BagOfPrimitives.class);
+        assertEquals("one", actualOne.stringValue);
+        BagOfPrimitives actualTwo = gson.fromJson(element2, BagOfPrimitives.class);
+        assertEquals("two", actualTwo.stringValue);
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/JsonPrimitiveTest.java b/gson/src/test/java/com/solidfire/gson/JsonPrimitiveTest.java
new file mode 100644
index 000000000..591a3b99b
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/JsonPrimitiveTest.java
@@ -0,0 +1,247 @@
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.common.MoreAsserts;
+import junit.framework.TestCase;
+
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
+/**
+ * Unit test for the {@link JsonPrimitive} class.
+ *
+ * @author Joel Leitch
+ */
+public class JsonPrimitiveTest extends TestCase {
+
+    public void testBoolean() throws Exception {
+        JsonPrimitive json = new JsonPrimitive(Boolean.TRUE);
+
+        assertTrue(json.isBoolean());
+        assertTrue(json.getAsBoolean());
+
+        // Extra support for booleans
+        json = new JsonPrimitive(1);
+        assertFalse(json.getAsBoolean());
+
+        json = new JsonPrimitive("1");
+        assertFalse(json.getAsBoolean());
+
+        json = new JsonPrimitive("true");
+        assertTrue(json.getAsBoolean());
+
+        json = new JsonPrimitive("TrUe");
+        assertTrue(json.getAsBoolean());
+
+        json = new JsonPrimitive("1.3");
+        assertFalse(json.getAsBoolean());
+    }
+
+    public void testParsingStringAsBoolean() throws Exception {
+        JsonPrimitive json = new JsonPrimitive("true");
+
+        assertFalse(json.isBoolean());
+        assertTrue(json.getAsBoolean());
+    }
+
+    public void testParsingStringAsNumber() throws Exception {
+        JsonPrimitive json = new JsonPrimitive("1");
+
+        assertFalse(json.isNumber());
+        assertEquals(1D, json.getAsDouble(), 0.00001);
+        assertEquals(1F, json.getAsFloat(), 0.00001);
+        assertEquals(1, json.getAsInt());
+        assertEquals(1L, json.getAsLong());
+        assertEquals((short) 1, json.getAsShort());
+        assertEquals((byte) 1, json.getAsByte());
+        assertEquals(new BigInteger("1"), json.getAsBigInteger());
+        assertEquals(new BigDecimal("1"), json.getAsBigDecimal());
+    }
+
+    public void testStringsAndChar() throws Exception {
+        JsonPrimitive json = new JsonPrimitive("abc");
+        assertTrue(json.isString());
+        assertEquals('a', json.getAsCharacter());
+        assertEquals("abc", json.getAsString());
+
+        json = new JsonPrimitive('z');
+        assertTrue(json.isString());
+        assertEquals('z', json.getAsCharacter());
+        assertEquals("z", json.getAsString());
+    }
+
+    public void testExponential() throws Exception {
+        JsonPrimitive json = new JsonPrimitive("1E+7");
+
+        assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal());
+        assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001);
+        assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001);
+
+        try {
+            json.getAsInt();
+            fail("Integers can not handle exponents like this.");
+        } catch (NumberFormatException expected) {
+        }
+    }
+
+    public void testByteEqualsShort() {
+        JsonPrimitive p1 = new JsonPrimitive(new Byte((byte) 10));
+        JsonPrimitive p2 = new JsonPrimitive(new Short((short) 10));
+        assertEquals(p1, p2);
+        assertEquals(p1.hashCode(), p2.hashCode());
+    }
+
+    public void testByteEqualsInteger() {
+        JsonPrimitive p1 = new JsonPrimitive(new Byte((byte) 10));
+        JsonPrimitive p2 = new JsonPrimitive(new Integer(10));
+        assertEquals(p1, p2);
+        assertEquals(p1.hashCode(), p2.hashCode());
+    }
+
+    public void testByteEqualsLong() {
+        JsonPrimitive p1 = new JsonPrimitive(new Byte((byte) 10));
+        JsonPrimitive p2 = new JsonPrimitive(new Long(10L));
+        assertEquals(p1, p2);
+        assertEquals(p1.hashCode(), p2.hashCode());
+    }
+
+    public void testByteEqualsBigInteger() {
+        JsonPrimitive p1 = new JsonPrimitive(new Byte((byte) 10));
+        JsonPrimitive p2 = new JsonPrimitive(new BigInteger("10"));
+        assertEquals(p1, p2);
+        assertEquals(p1.hashCode(), p2.hashCode());
+    }
+
+    public void testShortEqualsInteger() {
+        JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10));
+        JsonPrimitive p2 = new JsonPrimitive(new Integer(10));
+        assertEquals(p1, p2);
+        assertEquals(p1.hashCode(), p2.hashCode());
+    }
+
+    public void testShortEqualsLong() {
+        JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10));
+        JsonPrimitive p2 = new JsonPrimitive(new Long(10));
+        assertEquals(p1, p2);
+        assertEquals(p1.hashCode(), p2.hashCode());
+    }
+
+    public void testShortEqualsBigInteger() {
+        JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10));
+        JsonPrimitive p2 = new JsonPrimitive(new BigInteger("10"));
+        assertEquals(p1, p2);
+        assertEquals(p1.hashCode(), p2.hashCode());
+    }
+
+    public void testIntegerEqualsLong() {
+        JsonPrimitive p1 = new JsonPrimitive(new Integer(10));
+        JsonPrimitive p2 = new JsonPrimitive(new Long(10L));
+        assertEquals(p1, p2);
+        assertEquals(p1.hashCode(), p2.hashCode());
+    }
+
+    public void testIntegerEqualsBigInteger() {
+        JsonPrimitive p1 = new JsonPrimitive(new Integer(10));
+        JsonPrimitive p2 = new JsonPrimitive(new BigInteger("10"));
+        assertEquals(p1, p2);
+        assertEquals(p1.hashCode(), p2.hashCode());
+    }
+
+    public void testLongEqualsBigInteger() {
+        JsonPrimitive p1 = new JsonPrimitive(new Long(10L));
+        JsonPrimitive p2 = new JsonPrimitive(new BigInteger("10"));
+        assertEquals(p1, p2);
+        assertEquals(p1.hashCode(), p2.hashCode());
+    }
+
+    public void testFloatEqualsDouble() {
+        JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F));
+        JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D));
+        assertEquals(p1, p2);
+        assertEquals(p1.hashCode(), p2.hashCode());
+    }
+
+    public void testFloatEqualsBigDecimal() {
+        JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F));
+        JsonPrimitive p2 = new JsonPrimitive(new BigDecimal("10.25"));
+        assertEquals(p1, p2);
+        assertEquals(p1.hashCode(), p2.hashCode());
+    }
+
+    public void testDoubleEqualsBigDecimal() {
+        JsonPrimitive p1 = new JsonPrimitive(new Double(10.25D));
+        JsonPrimitive p2 = new JsonPrimitive(new BigDecimal("10.25"));
+        assertEquals(p1, p2);
+        assertEquals(p1.hashCode(), p2.hashCode());
+    }
+
+    public void testValidJsonOnToString() throws Exception {
+        JsonPrimitive json = new JsonPrimitive("Some\nEscaped\nValue");
+        assertEquals("\"Some\\nEscaped\\nValue\"", json.toString());
+
+        json = new JsonPrimitive(new BigDecimal("1.333"));
+        assertEquals("1.333", json.toString());
+    }
+
+    public void testEquals() {
+        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive("A"), new JsonPrimitive("A"));
+        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(true), new JsonPrimitive(true));
+        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(5L), new JsonPrimitive(5L));
+        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive('a'), new JsonPrimitive('a'));
+        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NaN), new JsonPrimitive(Float.NaN));
+        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NEGATIVE_INFINITY),
+                new JsonPrimitive(Float.NEGATIVE_INFINITY));
+        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.POSITIVE_INFINITY),
+                new JsonPrimitive(Float.POSITIVE_INFINITY));
+        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.NaN), new JsonPrimitive(Double.NaN));
+        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.NEGATIVE_INFINITY),
+                new JsonPrimitive(Double.NEGATIVE_INFINITY));
+        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.POSITIVE_INFINITY),
+                new JsonPrimitive(Double.POSITIVE_INFINITY));
+        assertFalse(new JsonPrimitive("a").equals(new JsonPrimitive("b")));
+        assertFalse(new JsonPrimitive(true).equals(new JsonPrimitive(false)));
+        assertFalse(new JsonPrimitive(0).equals(new JsonPrimitive(1)));
+    }
+
+    public void testEqualsAcrossTypes() {
+        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive("a"), new JsonPrimitive('a'));
+        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(new BigInteger("0")), new JsonPrimitive(0));
+        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(0), new JsonPrimitive(0L));
+        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(new BigInteger("0")), new JsonPrimitive(0));
+        MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NaN), new JsonPrimitive(Double.NaN));
+    }
+
+    public void testEqualsIntegerAndBigInteger() {
+        JsonPrimitive a = new JsonPrimitive(5L);
+        JsonPrimitive b = new JsonPrimitive(new BigInteger("18446744073709551621")); // 2^64 + 5
+        // Ideally, the following assertion should have failed but the price is too much to pay
+        // assertFalse(a + " equals " + b, a.equals(b));
+        assertTrue(a + " equals " + b, a.equals(b));
+    }
+
+    public void testEqualsDoesNotEquateStringAndNonStringTypes() {
+        assertFalse(new JsonPrimitive("true").equals(new JsonPrimitive(true)));
+        assertFalse(new JsonPrimitive("0").equals(new JsonPrimitive(0)));
+        assertFalse(new JsonPrimitive("NaN").equals(new JsonPrimitive(Float.NaN)));
+    }
+
+    public void testDeepCopy() {
+        JsonPrimitive a = new JsonPrimitive("a");
+        assertSame(a, a.deepCopy()); // Primitives are immutable!
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/JsonStreamParserTest.java b/gson/src/test/java/com/solidfire/gson/JsonStreamParserTest.java
new file mode 100644
index 000000000..6fcae7923
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/JsonStreamParserTest.java
@@ -0,0 +1,74 @@
+/*
+ * Copyright (C) 2009 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.solidfire.gson;
+
+import junit.framework.TestCase;
+
+import java.util.NoSuchElementException;
+
+/**
+ * Unit tests for {@link JsonStreamParser}
+ *
+ * @author Inderjeet Singh
+ */
+public class JsonStreamParserTest extends TestCase {
+    private JsonStreamParser parser;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        parser = new JsonStreamParser("'one' 'two'");
+    }
+
+    public void testParseTwoStrings() {
+        String actualOne = parser.next().getAsString();
+        assertEquals("one", actualOne);
+        String actualTwo = parser.next().getAsString();
+        assertEquals("two", actualTwo);
+    }
+
+    public void testIterator() {
+        assertTrue(parser.hasNext());
+        assertEquals("one", parser.next().getAsString());
+        assertTrue(parser.hasNext());
+        assertEquals("two", parser.next().getAsString());
+        assertFalse(parser.hasNext());
+    }
+
+    public void testNoSideEffectForHasNext() throws Exception {
+        assertTrue(parser.hasNext());
+        assertTrue(parser.hasNext());
+        assertTrue(parser.hasNext());
+        assertEquals("one", parser.next().getAsString());
+
+        assertTrue(parser.hasNext());
+        assertTrue(parser.hasNext());
+        assertEquals("two", parser.next().getAsString());
+
+        assertFalse(parser.hasNext());
+        assertFalse(parser.hasNext());
+    }
+
+    public void testCallingNextBeyondAvailableInput() {
+        parser.next();
+        parser.next();
+        try {
+            parser.next();
+            fail("Parser should not go beyond available input");
+        } catch (NoSuchElementException expected) {
+        }
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/LongSerializationPolicyTest.java b/gson/src/test/java/com/solidfire/gson/LongSerializationPolicyTest.java
new file mode 100644
index 000000000..9b17e1dc8
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/LongSerializationPolicyTest.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright (C) 2009 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import junit.framework.TestCase;
+
+/**
+ * Unit test for the {@link LongSerializationPolicy} class.
+ *
+ * @author Inderjeet Singh
+ * @author Joel Leitch
+ */
+public class LongSerializationPolicyTest extends TestCase {
+
+    public void testDefaultLongSerialization() throws Exception {
+        JsonElement element = LongSerializationPolicy.DEFAULT.serialize(1556L);
+        assertTrue(element.isJsonPrimitive());
+
+        JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive();
+        assertFalse(jsonPrimitive.isString());
+        assertTrue(jsonPrimitive.isNumber());
+        assertEquals(1556L, element.getAsLong());
+    }
+
+    public void testDefaultLongSerializationIntegration() {
+        Gson gson = new GsonBuilder()
+                .setLongSerializationPolicy(LongSerializationPolicy.DEFAULT)
+                .create();
+        assertEquals("[1]", gson.toJson(new long[]{1L}, long[].class));
+        assertEquals("[1]", gson.toJson(new Long[]{1L}, Long[].class));
+    }
+
+    public void testStringLongSerialization() throws Exception {
+        JsonElement element = LongSerializationPolicy.STRING.serialize(1556L);
+        assertTrue(element.isJsonPrimitive());
+
+        JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive();
+        assertFalse(jsonPrimitive.isNumber());
+        assertTrue(jsonPrimitive.isString());
+        assertEquals("1556", element.getAsString());
+    }
+
+    public void testStringLongSerializationIntegration() {
+        Gson gson = new GsonBuilder()
+                .setLongSerializationPolicy(LongSerializationPolicy.STRING)
+                .create();
+        assertEquals("[\"1\"]", gson.toJson(new long[]{1L}, long[].class));
+        assertEquals("[\"1\"]", gson.toJson(new Long[]{1L}, Long[].class));
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/MixedStreamTest.java b/gson/src/test/java/com/solidfire/gson/MixedStreamTest.java
new file mode 100644
index 000000000..38ee378ff
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/MixedStreamTest.java
@@ -0,0 +1,246 @@
+/*
+ * Copyright (C) 2010 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonWriter;
+import junit.framework.TestCase;
+
+import java.io.IOException;
+import java.io.StringReader;
+import java.io.StringWriter;
+import java.lang.reflect.Type;
+import java.util.Arrays;
+import java.util.List;
+
+public final class MixedStreamTest extends TestCase {
+
+    private static final Car BLUE_MUSTANG = new Car("mustang", 0x0000FF);
+    private static final Car BLACK_BMW = new Car("bmw", 0x000000);
+    private static final Car RED_MIATA = new Car("miata", 0xFF0000);
+    private static final String CARS_JSON = "[\n"
+            + "  {\n"
+            + "    \"name\": \"mustang\",\n"
+            + "    \"color\": 255\n"
+            + "  },\n"
+            + "  {\n"
+            + "    \"name\": \"bmw\",\n"
+            + "    \"color\": 0\n"
+            + "  },\n"
+            + "  {\n"
+            + "    \"name\": \"miata\",\n"
+            + "    \"color\": 16711680\n"
+            + "  }\n"
+            + "]";
+
+    public void testWriteMixedStreamed() throws IOException {
+        Gson gson = new Gson();
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+
+        jsonWriter.beginArray();
+        jsonWriter.setIndent("  ");
+        gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);
+        gson.toJson(BLACK_BMW, Car.class, jsonWriter);
+        gson.toJson(RED_MIATA, Car.class, jsonWriter);
+        jsonWriter.endArray();
+
+        assertEquals(CARS_JSON, stringWriter.toString());
+    }
+
+    public void testReadMixedStreamed() throws IOException {
+        Gson gson = new Gson();
+        StringReader stringReader = new StringReader(CARS_JSON);
+        JsonReader jsonReader = new JsonReader(stringReader);
+
+        jsonReader.beginArray();
+        assertEquals(BLUE_MUSTANG, gson.fromJson(jsonReader, Car.class));
+        assertEquals(BLACK_BMW, gson.fromJson(jsonReader, Car.class));
+        assertEquals(RED_MIATA, gson.fromJson(jsonReader, Car.class));
+        jsonReader.endArray();
+    }
+
+    public void testReaderDoesNotMutateState() throws IOException {
+        Gson gson = new Gson();
+        JsonReader jsonReader = new JsonReader(new StringReader(CARS_JSON));
+        jsonReader.beginArray();
+
+        jsonReader.setLenient(false);
+        gson.fromJson(jsonReader, Car.class);
+        assertFalse(jsonReader.isLenient());
+
+        jsonReader.setLenient(true);
+        gson.fromJson(jsonReader, Car.class);
+        assertTrue(jsonReader.isLenient());
+    }
+
+    public void testWriteDoesNotMutateState() throws IOException {
+        Gson gson = new Gson();
+        JsonWriter jsonWriter = new JsonWriter(new StringWriter());
+        jsonWriter.beginArray();
+
+        jsonWriter.setHtmlSafe(true);
+        jsonWriter.setLenient(true);
+        gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);
+        assertTrue(jsonWriter.isHtmlSafe());
+        assertTrue(jsonWriter.isLenient());
+
+        jsonWriter.setHtmlSafe(false);
+        jsonWriter.setLenient(false);
+        gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);
+        assertFalse(jsonWriter.isHtmlSafe());
+        assertFalse(jsonWriter.isLenient());
+    }
+
+    public void testReadInvalidState() throws IOException {
+        Gson gson = new Gson();
+        JsonReader jsonReader = new JsonReader(new StringReader(CARS_JSON));
+        jsonReader.beginArray();
+        jsonReader.beginObject();
+        try {
+            gson.fromJson(jsonReader, String.class);
+            fail();
+        } catch (JsonParseException expected) {
+        }
+    }
+
+    public void testReadClosed() throws IOException {
+        Gson gson = new Gson();
+        JsonReader jsonReader = new JsonReader(new StringReader(CARS_JSON));
+        jsonReader.close();
+        try {
+            gson.fromJson(jsonReader, new TypeToken<List<Car>>() {
+            }.getType());
+            fail();
+        } catch (JsonParseException expected) {
+        }
+    }
+
+    public void testWriteInvalidState() throws IOException {
+        Gson gson = new Gson();
+        JsonWriter jsonWriter = new JsonWriter(new StringWriter());
+        jsonWriter.beginObject();
+        try {
+            gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testWriteClosed() throws IOException {
+        Gson gson = new Gson();
+        JsonWriter jsonWriter = new JsonWriter(new StringWriter());
+        jsonWriter.beginArray();
+        jsonWriter.endArray();
+        jsonWriter.close();
+        try {
+            gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testWriteNulls() {
+        Gson gson = new Gson();
+        try {
+            gson.toJson(new JsonPrimitive("hello"), (JsonWriter) null);
+            fail();
+        } catch (NullPointerException expected) {
+        }
+
+        StringWriter stringWriter = new StringWriter();
+        gson.toJson(null, new JsonWriter(stringWriter));
+        assertEquals("null", stringWriter.toString());
+    }
+
+    public void testReadNulls() {
+        Gson gson = new Gson();
+        try {
+            gson.fromJson((JsonReader) null, Integer.class);
+            fail();
+        } catch (NullPointerException expected) {
+        }
+        try {
+            gson.fromJson(new JsonReader(new StringReader("true")), null);
+            fail();
+        } catch (NullPointerException expected) {
+        }
+    }
+
+    public void testWriteHtmlSafe() {
+        List<String> contents = Arrays.asList("<", ">", "&", "=", "'");
+        Type type = new TypeToken<List<String>>() {
+        }.getType();
+
+        StringWriter writer = new StringWriter();
+        new Gson().toJson(contents, type, new JsonWriter(writer));
+        assertEquals("[\"\\u003c\",\"\\u003e\",\"\\u0026\",\"\\u003d\",\"\\u0027\"]",
+                writer.toString());
+
+        writer = new StringWriter();
+        new GsonBuilder().disableHtmlEscaping().create()
+                         .toJson(contents, type, new JsonWriter(writer));
+        assertEquals("[\"<\",\">\",\"&\",\"=\",\"'\"]",
+                writer.toString());
+    }
+
+    public void testWriteLenient() {
+        List<Double> doubles = Arrays.asList(Double.NaN, Double.NEGATIVE_INFINITY,
+                Double.POSITIVE_INFINITY, -0.0d, 0.5d, 0.0d);
+        Type type = new TypeToken<List<Double>>() {
+        }.getType();
+
+        StringWriter writer = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(writer);
+        new GsonBuilder().serializeSpecialFloatingPointValues().create()
+                         .toJson(doubles, type, jsonWriter);
+        assertEquals("[NaN,-Infinity,Infinity,-0.0,0.5,0.0]", writer.toString());
+
+        try {
+            new Gson().toJson(doubles, type, new JsonWriter(new StringWriter()));
+            fail();
+        } catch (IllegalArgumentException expected) {
+        }
+    }
+
+    static final class Car {
+        String name;
+        int color;
+
+        Car(String name, int color) {
+            this.name = name;
+            this.color = color;
+        }
+
+        // used by Gson
+        Car() {
+        }
+
+        @Override
+        public int hashCode() {
+            return name.hashCode() ^ color;
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            return o instanceof Car
+                    && ((Car) o).name.equals(name)
+                    && ((Car) o).color == color;
+        }
+    }
+}
diff --git a/gson/src/test/java/com/google/gson/MockExclusionStrategy.java b/gson/src/test/java/com/solidfire/gson/MockExclusionStrategy.java
similarity index 63%
rename from gson/src/test/java/com/google/gson/MockExclusionStrategy.java
rename to gson/src/test/java/com/solidfire/gson/MockExclusionStrategy.java
index 7830d8a2f..decdcf27d 100644
--- a/gson/src/test/java/com/google/gson/MockExclusionStrategy.java
+++ b/gson/src/test/java/com/solidfire/gson/MockExclusionStrategy.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.solidfire.gson;
 
 /**
  * This is a configurable {@link ExclusionStrategy} that can be used for
@@ -23,21 +23,21 @@
  * @author Joel Leitch
  */
 final class MockExclusionStrategy implements ExclusionStrategy {
-  private final boolean skipClass;
-  private final boolean skipField;
+    private final boolean skipClass;
+    private final boolean skipField;
 
-  public MockExclusionStrategy(boolean skipClass, boolean skipField) {
-    this.skipClass = skipClass;
-    this.skipField = skipField;
-  }
+    public MockExclusionStrategy(boolean skipClass, boolean skipField) {
+        this.skipClass = skipClass;
+        this.skipField = skipField;
+    }
 
-  @Override
-  public boolean shouldSkipField(FieldAttributes f) {
-    return skipField;
-  }
+    @Override
+    public boolean shouldSkipField(FieldAttributes f) {
+        return skipField;
+    }
 
-  @Override
-  public boolean shouldSkipClass(Class<?> clazz) {
-    return skipClass;
-  }
+    @Override
+    public boolean shouldSkipClass(Class<?> clazz) {
+        return skipClass;
+    }
 }
diff --git a/gson/src/test/java/com/solidfire/gson/ObjectTypeAdapterTest.java b/gson/src/test/java/com/solidfire/gson/ObjectTypeAdapterTest.java
new file mode 100644
index 000000000..c3a995a1e
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/ObjectTypeAdapterTest.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright (C) 2011 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import junit.framework.TestCase;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+public final class ObjectTypeAdapterTest extends TestCase {
+    private final Gson gson = new GsonBuilder().create();
+    private final TypeAdapter<Object> adapter = gson.getAdapter(Object.class);
+
+    public void testDeserialize() throws Exception {
+        Map<?, ?> map = (Map<?, ?>) adapter.fromJson("{\"a\":5,\"b\":[1,2,null],\"c\":{\"x\":\"y\"}}");
+        assertEquals(5.0, map.get("a"));
+        assertEquals(Arrays.asList(1.0, 2.0, null), map.get("b"));
+        assertEquals(Collections.singletonMap("x", "y"), map.get("c"));
+        assertEquals(3, map.size());
+    }
+
+    public void testSerialize() throws Exception {
+        Object object = new RuntimeType();
+        assertEquals("{'a':5,'b':[1,2,null]}", adapter.toJson(object).replace("\"", "'"));
+    }
+
+    public void testSerializeNullValue() throws Exception {
+        Map<String, Object> map = new LinkedHashMap<String, Object>();
+        map.put("a", null);
+        assertEquals("{'a':null}", adapter.toJson(map).replace('"', '\''));
+    }
+
+    public void testDeserializeNullValue() throws Exception {
+        Map<String, Object> map = new LinkedHashMap<String, Object>();
+        map.put("a", null);
+        assertEquals(map, adapter.fromJson("{\"a\":null}"));
+    }
+
+    public void testSerializeObject() throws Exception {
+        assertEquals("{}", adapter.toJson(new Object()));
+    }
+
+    @SuppressWarnings("unused")
+    private class RuntimeType {
+        Object a = 5;
+        Object b = Arrays.asList(1, 2, null);
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/OverrideCoreTypeAdaptersTest.java b/gson/src/test/java/com/solidfire/gson/OverrideCoreTypeAdaptersTest.java
new file mode 100644
index 000000000..19e8db2f5
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/OverrideCoreTypeAdaptersTest.java
@@ -0,0 +1,84 @@
+/*
+ * Copyright (C) 2012 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonWriter;
+import junit.framework.TestCase;
+
+import java.io.IOException;
+import java.util.Locale;
+
+/**
+ * @author Jesse Wilson
+ */
+public class OverrideCoreTypeAdaptersTest extends TestCase {
+    private static final TypeAdapter<Boolean> booleanAsIntAdapter = new TypeAdapter<Boolean>() {
+        @Override
+        public void write(JsonWriter out, Boolean value) throws IOException {
+            out.value(value ? 1 : 0);
+        }
+
+        @Override
+        public Boolean read(JsonReader in) throws IOException {
+            int value = in.nextInt();
+            return value != 0;
+        }
+    };
+
+    private static final TypeAdapter<String> swapCaseStringAdapter = new TypeAdapter<String>() {
+        @Override
+        public void write(JsonWriter out, String value) throws IOException {
+            out.value(value.toUpperCase(Locale.US));
+        }
+
+        @Override
+        public String read(JsonReader in) throws IOException {
+            return in.nextString().toLowerCase(Locale.US);
+        }
+    };
+
+    public void testOverrideWrapperBooleanAdapter() {
+        Gson gson = new GsonBuilder()
+                .registerTypeAdapter(Boolean.class, booleanAsIntAdapter)
+                .create();
+        assertEquals("true", gson.toJson(true, boolean.class));
+        assertEquals("1", gson.toJson(true, Boolean.class));
+        assertEquals(Boolean.TRUE, gson.fromJson("true", boolean.class));
+        assertEquals(Boolean.TRUE, gson.fromJson("1", Boolean.class));
+        assertEquals(Boolean.FALSE, gson.fromJson("0", Boolean.class));
+    }
+
+    public void testOverridePrimitiveBooleanAdapter() {
+        Gson gson = new GsonBuilder()
+                .registerTypeAdapter(boolean.class, booleanAsIntAdapter)
+                .create();
+        assertEquals("1", gson.toJson(true, boolean.class));
+        assertEquals("true", gson.toJson(true, Boolean.class));
+        assertEquals(Boolean.TRUE, gson.fromJson("1", boolean.class));
+        assertEquals(Boolean.TRUE, gson.fromJson("true", Boolean.class));
+        assertEquals("0", gson.toJson(false, boolean.class));
+    }
+
+    public void testOverrideStringAdapter() {
+        Gson gson = new GsonBuilder()
+                .registerTypeAdapter(String.class, swapCaseStringAdapter)
+                .create();
+        assertEquals("\"HELLO\"", gson.toJson("Hello", String.class));
+        assertEquals("hello", gson.fromJson("\"Hello\"", String.class));
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/ParameterizedTypeFixtures.java b/gson/src/test/java/com/solidfire/gson/ParameterizedTypeFixtures.java
new file mode 100644
index 000000000..5a7ef183c
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/ParameterizedTypeFixtures.java
@@ -0,0 +1,184 @@
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.internal.$Gson$Types;
+import com.solidfire.gson.internal.Primitives;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+
+
+/**
+ * This class contains some test fixtures for Parameterized types. These classes should ideally
+ * belong either in the common or functional package, but they are placed here because they need
+ * access to package protected elements of com.google.gson.
+ *
+ * @author Inderjeet Singh
+ * @author Joel Leitch
+ */
+public class ParameterizedTypeFixtures {
+
+    public static class MyParameterizedType<T> {
+        public final T value;
+
+        public MyParameterizedType(T value) {
+            this.value = value;
+        }
+
+        public T getValue() {
+            return value;
+        }
+
+        public String getExpectedJson() {
+            String valueAsJson = getExpectedJson(value);
+            return String.format("{\"value\":%s}", valueAsJson);
+        }
+
+        private String getExpectedJson(Object obj) {
+            Class<?> clazz = obj.getClass();
+            if (Primitives.isWrapperType(Primitives.wrap(clazz))) {
+                return obj.toString();
+            } else if (obj.getClass().equals(String.class)) {
+                return "\"" + obj.toString() + "\"";
+            } else {
+                // Try invoking a getExpectedJson() method if it exists
+                try {
+                    Method method = clazz.getMethod("getExpectedJson");
+                    Object results = method.invoke(obj);
+                    return (String) results;
+                } catch (SecurityException e) {
+                    throw new RuntimeException(e);
+                } catch (NoSuchMethodException e) {
+                    throw new RuntimeException(e);
+                } catch (IllegalArgumentException e) {
+                    throw new RuntimeException(e);
+                } catch (IllegalAccessException e) {
+                    throw new RuntimeException(e);
+                } catch (InvocationTargetException e) {
+                    throw new RuntimeException(e);
+                }
+            }
+        }
+
+        @Override
+        public int hashCode() {
+            return value == null ? 0 : value.hashCode();
+        }
+
+        @SuppressWarnings("unchecked")
+        @Override
+        public boolean equals(Object obj) {
+            if (this == obj) {
+                return true;
+            }
+            if (obj == null) {
+                return false;
+            }
+            if (getClass() != obj.getClass()) {
+                return false;
+            }
+            MyParameterizedType<T> other = (MyParameterizedType<T>) obj;
+            if (value == null) {
+                if (other.value != null) {
+                    return false;
+                }
+            } else if (!value.equals(other.value)) {
+                return false;
+            }
+            return true;
+        }
+    }
+
+    public static class MyParameterizedTypeInstanceCreator<T>
+            implements InstanceCreator<MyParameterizedType<T>> {
+        private final T instanceOfT;
+
+        /**
+         * Caution the specified instance is reused by the instance creator for each call.
+         * This means that the fields of the same objects will be overwritten by Gson.
+         * This is usually fine in tests since there we deserialize just once, but quite
+         * dangerous in practice.
+         *
+         * @param instanceOfT
+         */
+        public MyParameterizedTypeInstanceCreator(T instanceOfT) {
+            this.instanceOfT = instanceOfT;
+        }
+
+        @Override
+        public MyParameterizedType<T> createInstance(Type type) {
+            return new MyParameterizedType<T>(instanceOfT);
+        }
+    }
+
+    public static final class MyParameterizedTypeAdapter<T>
+            implements JsonSerializer<MyParameterizedType<T>>, JsonDeserializer<MyParameterizedType<T>> {
+        @SuppressWarnings("unchecked")
+        public static <T> String getExpectedJson(MyParameterizedType<T> obj) {
+            Class<T> clazz = (Class<T>) obj.value.getClass();
+            boolean addQuotes = !clazz.isArray() && !Primitives.unwrap(clazz).isPrimitive();
+            StringBuilder sb = new StringBuilder("{\"");
+            sb.append(obj.value.getClass().getSimpleName()).append("\":");
+            if (addQuotes) {
+                sb.append("\"");
+            }
+            sb.append(obj.value.toString());
+            if (addQuotes) {
+                sb.append("\"");
+            }
+            sb.append("}");
+            return sb.toString();
+        }
+
+        @Override
+        public JsonElement serialize(MyParameterizedType<T> src, Type classOfSrc,
+                                     JsonSerializationContext context) {
+            JsonObject json = new JsonObject();
+            T value = src.getValue();
+            json.add(value.getClass().getSimpleName(), context.serialize(value));
+            return json;
+        }
+
+        @SuppressWarnings("unchecked")
+        @Override
+        public MyParameterizedType<T> deserialize(JsonElement json, Type typeOfT,
+                                                  JsonDeserializationContext context) throws JsonParseException {
+            Type genericClass = ((ParameterizedType) typeOfT).getActualTypeArguments()[0];
+            Class<?> rawType = $Gson$Types.getRawType(genericClass);
+            String className = rawType.getSimpleName();
+            JsonElement jsonElement = json.getAsJsonObject().get(className);
+
+            T value;
+            if (genericClass == Integer.class) {
+                value = (T) Integer.valueOf(jsonElement.getAsInt());
+            } else if (genericClass == String.class) {
+                value = (T) jsonElement.getAsString();
+            } else {
+                value = (T) jsonElement;
+            }
+
+            if (Primitives.isPrimitive(genericClass)) {
+                PrimitiveTypeAdapter typeAdapter = new PrimitiveTypeAdapter();
+                value = (T) typeAdapter.adaptType(value, rawType);
+            }
+            return new MyParameterizedType<T>(value);
+        }
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/ParameterizedTypeTest.java b/gson/src/test/java/com/solidfire/gson/ParameterizedTypeTest.java
new file mode 100644
index 000000000..df6a84a5b
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/ParameterizedTypeTest.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.internal.$Gson$Types;
+import com.solidfire.gson.reflect.TypeToken;
+import junit.framework.TestCase;
+
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.util.List;
+
+/**
+ * Unit tests for {@code ParameterizedType}s created by the {@link $Gson$Types} class.
+ *
+ * @author Inderjeet Singh
+ * @author Joel Leitch
+ */
+public class ParameterizedTypeTest extends TestCase {
+    private ParameterizedType ourType;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        ourType = $Gson$Types.newParameterizedTypeWithOwner(null, List.class, String.class);
+    }
+
+    public void testOurTypeFunctionality() throws Exception {
+        Type parameterizedType = new TypeToken<List<String>>() {
+        }.getType();
+        assertNull(ourType.getOwnerType());
+        assertEquals(String.class, ourType.getActualTypeArguments()[0]);
+        assertEquals(List.class, ourType.getRawType());
+        assertEquals(parameterizedType, ourType);
+        assertEquals(parameterizedType.hashCode(), ourType.hashCode());
+    }
+
+    public void testNotEquals() throws Exception {
+        Type differentParameterizedType = new TypeToken<List<Integer>>() {
+        }.getType();
+        assertFalse(differentParameterizedType.equals(ourType));
+        assertFalse(ourType.equals(differentParameterizedType));
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/PrimitiveTypeAdapter.java b/gson/src/test/java/com/solidfire/gson/PrimitiveTypeAdapter.java
new file mode 100644
index 000000000..b5988b1ab
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/PrimitiveTypeAdapter.java
@@ -0,0 +1,74 @@
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.internal.Primitives;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+/**
+ * Handles type conversion from some object to some primitive (or primitive
+ * wrapper instance).
+ *
+ * @author Joel Leitch
+ */
+final class PrimitiveTypeAdapter {
+
+    @SuppressWarnings("unchecked")
+    public <T> T adaptType(Object from, Class<T> to) {
+        Class<?> aClass = Primitives.wrap(to);
+        if (Primitives.isWrapperType(aClass)) {
+            if (aClass == Character.class) {
+                String value = from.toString();
+                if (value.length() == 1) {
+                    return (T) (Character) from.toString().charAt(0);
+                }
+                throw new JsonParseException("The value: " + value + " contains more than a character.");
+            }
+
+            try {
+                Constructor<?> constructor = aClass.getConstructor(String.class);
+                return (T) constructor.newInstance(from.toString());
+            } catch (NoSuchMethodException e) {
+                throw new JsonParseException(e);
+            } catch (IllegalAccessException e) {
+                throw new JsonParseException(e);
+            } catch (InvocationTargetException e) {
+                throw new JsonParseException(e);
+            } catch (InstantiationException e) {
+                throw new JsonParseException(e);
+            }
+        } else if (Enum.class.isAssignableFrom(to)) {
+            // Case where the type being adapted to is an Enum
+            // We will try to convert from.toString() to the enum
+            try {
+                Method valuesMethod = to.getMethod("valueOf", String.class);
+                return (T) valuesMethod.invoke(null, from.toString());
+            } catch (NoSuchMethodException e) {
+                throw new RuntimeException(e);
+            } catch (IllegalAccessException e) {
+                throw new RuntimeException(e);
+            } catch (InvocationTargetException e) {
+                throw new RuntimeException(e);
+            }
+        } else {
+            throw new JsonParseException("Can not adapt type " + from.getClass() + " to " + to);
+        }
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/VersionExclusionStrategyTest.java b/gson/src/test/java/com/solidfire/gson/VersionExclusionStrategyTest.java
new file mode 100644
index 000000000..b79922a63
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/VersionExclusionStrategyTest.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson;
+
+import com.solidfire.gson.annotations.Since;
+import com.solidfire.gson.internal.Excluder;
+import junit.framework.TestCase;
+
+/**
+ * Unit tests for the {@link Excluder} class.
+ *
+ * @author Joel Leitch
+ */
+public class VersionExclusionStrategyTest extends TestCase {
+    private static final double VERSION = 5.0D;
+
+    public void testClassAndFieldAreAtSameVersion() throws Exception {
+        Excluder excluder = Excluder.DEFAULT.withVersion(VERSION);
+        assertFalse(excluder.excludeClass(MockObject.class, true));
+        assertFalse(excluder.excludeField(MockObject.class.getField("someField"), true));
+    }
+
+    public void testClassAndFieldAreBehindInVersion() throws Exception {
+        Excluder excluder = Excluder.DEFAULT.withVersion(VERSION + 1);
+        assertFalse(excluder.excludeClass(MockObject.class, true));
+        assertFalse(excluder.excludeField(MockObject.class.getField("someField"), true));
+    }
+
+    public void testClassAndFieldAreAheadInVersion() throws Exception {
+        Excluder excluder = Excluder.DEFAULT.withVersion(VERSION - 1);
+        assertTrue(excluder.excludeClass(MockObject.class, true));
+        assertTrue(excluder.excludeField(MockObject.class.getField("someField"), true));
+    }
+
+    @Since(VERSION)
+    private static class MockObject {
+
+        @Since(VERSION)
+        public final int someField = 0;
+    }
+}
diff --git a/gson/src/test/java/com/google/gson/common/MoreAsserts.java b/gson/src/test/java/com/solidfire/gson/common/MoreAsserts.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/common/MoreAsserts.java
rename to gson/src/test/java/com/solidfire/gson/common/MoreAsserts.java
index 5e05832a5..57b15d6cc 100644
--- a/gson/src/test/java/com/google/gson/common/MoreAsserts.java
+++ b/gson/src/test/java/com/solidfire/gson/common/MoreAsserts.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.common;
+package com.solidfire.gson.common;
 
 import junit.framework.Assert;
 
diff --git a/gson/src/test/java/com/google/gson/common/TestTypes.java b/gson/src/test/java/com/solidfire/gson/common/TestTypes.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/common/TestTypes.java
rename to gson/src/test/java/com/solidfire/gson/common/TestTypes.java
index 11d3d0abe..143b12505 100644
--- a/gson/src/test/java/com/google/gson/common/TestTypes.java
+++ b/gson/src/test/java/com/solidfire/gson/common/TestTypes.java
@@ -14,20 +14,20 @@
  * limitations under the License.
  */
 
-package com.google.gson.common;
+package com.solidfire.gson.common;
 
 import java.lang.reflect.Type;
 import java.util.Collection;
 
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.annotations.SerializedName;
+import com.solidfire.gson.JsonDeserializationContext;
+import com.solidfire.gson.JsonDeserializer;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonParseException;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.JsonSerializationContext;
+import com.solidfire.gson.JsonSerializer;
+import com.solidfire.gson.annotations.SerializedName;
 
 /**
  * Types used for testing JSON serialization and deserialization
diff --git a/gson/src/test/java/com/google/gson/functional/ArrayTest.java b/gson/src/test/java/com/solidfire/gson/functional/ArrayTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/ArrayTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/ArrayTest.java
index 11388e90a..4a7cbd1e8 100644
--- a/gson/src/test/java/com/google/gson/functional/ArrayTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/ArrayTest.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonParseException;
-import com.google.gson.common.MoreAsserts;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithObjects;
-import com.google.gson.reflect.TypeToken;
+package com.solidfire.gson.functional;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonParseException;
+import com.solidfire.gson.common.MoreAsserts;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.common.TestTypes.ClassWithObjects;
+import com.solidfire.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java b/gson/src/test/java/com/solidfire/gson/functional/CircularReferenceTest.java
similarity index 91%
rename from gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/CircularReferenceTest.java
index d352e2418..a5d0afb8b 100644
--- a/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/CircularReferenceTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
 import java.lang.reflect.Type;
 import java.util.ArrayList;
@@ -21,13 +21,13 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.ClassOverridingEquals;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonSerializationContext;
+import com.solidfire.gson.JsonSerializer;
+import com.solidfire.gson.common.TestTypes.ClassOverridingEquals;
 
 /**
  * Functional tests related to circular reference detection and error reporting.
diff --git a/gson/src/test/java/com/google/gson/functional/CollectionTest.java b/gson/src/test/java/com/solidfire/gson/functional/CollectionTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/functional/CollectionTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/CollectionTest.java
index 9a8f707b4..09c20e2e3 100644
--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/CollectionTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
 import java.lang.reflect.Type;
 import java.util.ArrayList;
@@ -31,15 +31,15 @@
 import java.util.Stack;
 import java.util.Vector;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.MoreAsserts;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.JsonSerializationContext;
+import com.solidfire.gson.JsonSerializer;
+import com.solidfire.gson.common.MoreAsserts;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java b/gson/src/test/java/com/solidfire/gson/functional/ConcurrencyTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/ConcurrencyTest.java
index 2dccf4b61..9a6469712 100755
--- a/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/ConcurrencyTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutorService;
@@ -22,7 +22,7 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
+import com.solidfire.gson.Gson;
 
 /**
  * Tests for ensuring Gson thread-safety.
diff --git a/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java b/gson/src/test/java/com/solidfire/gson/functional/CustomDeserializerTest.java
similarity index 93%
rename from gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/CustomDeserializerTest.java
index c53db7f23..ecc180616 100644
--- a/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/CustomDeserializerTest.java
@@ -14,17 +14,17 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.common.TestTypes.Base;
-import com.google.gson.common.TestTypes.ClassWithBaseField;
+package com.solidfire.gson.functional;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonDeserializationContext;
+import com.solidfire.gson.JsonDeserializer;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonParseException;
+import com.solidfire.gson.common.TestTypes.Base;
+import com.solidfire.gson.common.TestTypes.ClassWithBaseField;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java b/gson/src/test/java/com/solidfire/gson/functional/CustomSerializerTest.java
similarity index 84%
rename from gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/CustomSerializerTest.java
index c8095463a..b35f7d796 100644
--- a/gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/CustomSerializerTest.java
@@ -14,21 +14,21 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.Base;
-import com.google.gson.common.TestTypes.BaseSerializer;
-import com.google.gson.common.TestTypes.ClassWithBaseArrayField;
-import com.google.gson.common.TestTypes.ClassWithBaseField;
-import com.google.gson.common.TestTypes.Sub;
-import com.google.gson.common.TestTypes.SubSerializer;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonArray;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonSerializationContext;
+import com.solidfire.gson.JsonSerializer;
+import com.solidfire.gson.common.TestTypes.Base;
+import com.solidfire.gson.common.TestTypes.BaseSerializer;
+import com.solidfire.gson.common.TestTypes.ClassWithBaseArrayField;
+import com.solidfire.gson.common.TestTypes.ClassWithBaseField;
+import com.solidfire.gson.common.TestTypes.Sub;
+import com.solidfire.gson.common.TestTypes.SubSerializer;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java b/gson/src/test/java/com/solidfire/gson/functional/CustomTypeAdaptersTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/CustomTypeAdaptersTest.java
index b452849dd..1bf25d4c6 100644
--- a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/CustomTypeAdaptersTest.java
@@ -13,22 +13,22 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithCustomTypeConverter;
-import com.google.gson.reflect.TypeToken;
+package com.solidfire.gson.functional;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.InstanceCreator;
+import com.solidfire.gson.JsonDeserializationContext;
+import com.solidfire.gson.JsonDeserializer;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonParseException;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.JsonSerializationContext;
+import com.solidfire.gson.JsonSerializer;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.common.TestTypes.ClassWithCustomTypeConverter;
+import com.solidfire.gson.reflect.TypeToken;
 
 import java.util.Date;
 import junit.framework.TestCase;
diff --git a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java b/gson/src/test/java/com/solidfire/gson/functional/DefaultTypeAdaptersTest.java
similarity index 97%
rename from gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/DefaultTypeAdaptersTest.java
index 198667162..782cae8a2 100644
--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/DefaultTypeAdaptersTest.java
@@ -13,23 +13,23 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+package com.solidfire.gson.functional;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonArray;
+import com.solidfire.gson.JsonDeserializationContext;
+import com.solidfire.gson.JsonDeserializer;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonNull;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonParseException;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.JsonSyntaxException;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Type;
@@ -623,7 +623,7 @@ public void testJsonElementTypeMismatch() {
       gson.fromJson("\"abc\"", JsonObject.class);
       fail();
     } catch (JsonSyntaxException expected) {
-      assertEquals("Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive",
+      assertEquals("Expected a com.solidfire.gson.JsonObject but was com.solidfire.gson.JsonPrimitive",
           expected.getMessage());
     }
   }
diff --git a/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java b/gson/src/test/java/com/solidfire/gson/functional/DelegateTypeAdapterTest.java
similarity index 87%
rename from gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/DelegateTypeAdapterTest.java
index f89148e36..5e7991b9e 100644
--- a/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/DelegateTypeAdapterTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -21,14 +21,14 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonWriter;
 
 /**
  * Functional tests for {@link Gson#getDelegateAdapter(TypeAdapterFactory, TypeToken)} method.
diff --git a/gson/src/test/java/com/google/gson/functional/EnumTest.java b/gson/src/test/java/com/solidfire/gson/functional/EnumTest.java
similarity index 91%
rename from gson/src/test/java/com/google/gson/functional/EnumTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/EnumTest.java
index 4a9f05b59..4e265f403 100644
--- a/gson/src/test/java/com/google/gson/functional/EnumTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/EnumTest.java
@@ -14,20 +14,20 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.annotations.SerializedName;
-import com.google.gson.common.MoreAsserts;
-import com.google.gson.reflect.TypeToken;
+package com.solidfire.gson.functional;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonDeserializationContext;
+import com.solidfire.gson.JsonDeserializer;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonParseException;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.JsonSerializationContext;
+import com.solidfire.gson.JsonSerializer;
+import com.solidfire.gson.annotations.SerializedName;
+import com.solidfire.gson.common.MoreAsserts;
+import com.solidfire.gson.reflect.TypeToken;
 
 
 import java.lang.reflect.Type;
diff --git a/gson/src/test/java/com/google/gson/functional/EscapingTest.java b/gson/src/test/java/com/solidfire/gson/functional/EscapingTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/EscapingTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/EscapingTest.java
index 1581f4518..f135d4d97 100644
--- a/gson/src/test/java/com/google/gson/functional/EscapingTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/EscapingTest.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
 import java.util.ArrayList;
 import java.util.List;
 import junit.framework.TestCase;
diff --git a/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java b/gson/src/test/java/com/solidfire/gson/functional/ExclusionStrategyFunctionalTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/ExclusionStrategyFunctionalTest.java
index 2eca8bb4f..db8568eb2 100644
--- a/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/ExclusionStrategyFunctionalTest.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.ExclusionStrategy;
-import com.google.gson.FieldAttributes;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
+package com.solidfire.gson.functional;
+
+import com.solidfire.gson.ExclusionStrategy;
+import com.solidfire.gson.FieldAttributes;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonPrimitive;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
diff --git a/gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java b/gson/src/test/java/com/solidfire/gson/functional/ExposeFieldsTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/ExposeFieldsTest.java
index 0430ba49d..d61876236 100644
--- a/gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/ExposeFieldsTest.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
 import java.lang.reflect.Type;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.annotations.Expose;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.InstanceCreator;
+import com.solidfire.gson.annotations.Expose;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java b/gson/src/test/java/com/solidfire/gson/functional/FieldExclusionTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/FieldExclusionTest.java
index 080a8234f..37ad61b45 100644
--- a/gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/FieldExclusionTest.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/FieldNamingTest.java b/gson/src/test/java/com/solidfire/gson/functional/FieldNamingTest.java
similarity index 84%
rename from gson/src/test/java/com/google/gson/functional/FieldNamingTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/FieldNamingTest.java
index 5d326af8c..ea80a3ab0 100644
--- a/gson/src/test/java/com/google/gson/functional/FieldNamingTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/FieldNamingTest.java
@@ -14,18 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import static com.google.gson.FieldNamingPolicy.IDENTITY;
-import static com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
-import static com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;
-import static com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
-import static com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
+import static com.solidfire.gson.FieldNamingPolicy.IDENTITY;
+import static com.solidfire.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
+import static com.solidfire.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;
+import static com.solidfire.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
+import static com.solidfire.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
 
-import com.google.gson.FieldNamingPolicy;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.annotations.SerializedName;
+import com.solidfire.gson.FieldNamingPolicy;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.annotations.SerializedName;
 import junit.framework.TestCase;
 
 public final class FieldNamingTest extends TestCase {
diff --git a/gson/src/test/java/com/google/gson/functional/InheritanceTest.java b/gson/src/test/java/com/solidfire/gson/functional/InheritanceTest.java
similarity index 93%
rename from gson/src/test/java/com/google/gson/functional/InheritanceTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/InheritanceTest.java
index b93ba0b59..db84c3942 100644
--- a/gson/src/test/java/com/google/gson/functional/InheritanceTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/InheritanceTest.java
@@ -13,19 +13,19 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.Base;
-import com.google.gson.common.TestTypes.ClassWithBaseArrayField;
-import com.google.gson.common.TestTypes.ClassWithBaseCollectionField;
-import com.google.gson.common.TestTypes.ClassWithBaseField;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.common.TestTypes.Sub;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.JsonArray;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.common.TestTypes.Base;
+import com.solidfire.gson.common.TestTypes.ClassWithBaseArrayField;
+import com.solidfire.gson.common.TestTypes.ClassWithBaseCollectionField;
+import com.solidfire.gson.common.TestTypes.ClassWithBaseField;
+import com.solidfire.gson.common.TestTypes.Nested;
+import com.solidfire.gson.common.TestTypes.Sub;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java b/gson/src/test/java/com/solidfire/gson/functional/InstanceCreatorTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/InstanceCreatorTest.java
index aad55eeb2..6fbc69fe3 100644
--- a/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/InstanceCreatorTest.java
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.common.TestTypes.Base;
-import com.google.gson.common.TestTypes.ClassWithBaseField;
-import com.google.gson.common.TestTypes.Sub;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.InstanceCreator;
+import com.solidfire.gson.common.TestTypes.Base;
+import com.solidfire.gson.common.TestTypes.ClassWithBaseField;
+import com.solidfire.gson.common.TestTypes.Sub;
 
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.reflect.TypeToken;
 import java.util.ArrayList;
 import java.util.List;
 import junit.framework.TestCase;
diff --git a/gson/src/test/java/com/google/gson/functional/InterfaceTest.java b/gson/src/test/java/com/solidfire/gson/functional/InterfaceTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/functional/InterfaceTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/InterfaceTest.java
index 6851f1e99..34cc30ff2 100644
--- a/gson/src/test/java/com/google/gson/functional/InterfaceTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/InterfaceTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
+import com.solidfire.gson.Gson;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/InternationalizationTest.java b/gson/src/test/java/com/solidfire/gson/functional/InternationalizationTest.java
similarity index 93%
rename from gson/src/test/java/com/google/gson/functional/InternationalizationTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/InternationalizationTest.java
index 169c37a50..a1b440cde 100644
--- a/gson/src/test/java/com/google/gson/functional/InternationalizationTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/InternationalizationTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
+import com.solidfire.gson.Gson;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java b/gson/src/test/java/com/solidfire/gson/functional/JavaUtilConcurrentAtomicTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/JavaUtilConcurrentAtomicTest.java
index 464892a3a..d72322b97 100644
--- a/gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/JavaUtilConcurrentAtomicTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -22,9 +22,9 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicLongArray;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.LongSerializationPolicy;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.LongSerializationPolicy;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/JavaUtilTest.java b/gson/src/test/java/com/solidfire/gson/functional/JavaUtilTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/functional/JavaUtilTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/JavaUtilTest.java
index 052096533..e58ffcb45 100644
--- a/gson/src/test/java/com/google/gson/functional/JavaUtilTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/JavaUtilTest.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
 import java.util.Currency;
 import java.util.Properties;
 
-import com.google.gson.Gson;
+import com.solidfire.gson.Gson;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java b/gson/src/test/java/com/solidfire/gson/functional/JsonAdapterAnnotationOnClassesTest.java
similarity index 90%
rename from gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/JsonAdapterAnnotationOnClassesTest.java
index b7b29a656..ce78a1103 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/JsonAdapterAnnotationOnClassesTest.java
@@ -14,30 +14,30 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+package com.solidfire.gson.functional;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonDeserializationContext;
+import com.solidfire.gson.JsonDeserializer;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonParseException;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.JsonSerializationContext;
+import com.solidfire.gson.JsonSerializer;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
+import com.solidfire.gson.annotations.JsonAdapter;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.util.Locale;
 import junit.framework.TestCase;
 
 /**
- * Functional tests for the {@link com.google.gson.annotations.JsonAdapter} annotation on classes.
+ * Functional tests for the {@link JsonAdapter} annotation on classes.
  */
 public final class JsonAdapterAnnotationOnClassesTest extends TestCase {
 
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/solidfire/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
index 4c745ec2a..532ce64e1 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
@@ -14,21 +14,21 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+package com.solidfire.gson.functional;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
+import com.solidfire.gson.annotations.JsonAdapter;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonWriter;
 import java.io.IOException;
 import junit.framework.TestCase;
 
 /**
- * Functional tests for the {@link com.google.gson.annotations.JsonAdapter} annotation on fields.
+ * Functional tests for the {@link JsonAdapter} annotation on fields.
  */
 public final class JsonAdapterAnnotationOnFieldsTest extends TestCase {
   public void testClassAnnotationAdapterTakesPrecedenceOverDefault() {
diff --git a/gson/src/test/java/com/google/gson/functional/JsonArrayTest.java b/gson/src/test/java/com/solidfire/gson/functional/JsonArrayTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/functional/JsonArrayTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/JsonArrayTest.java
index 22a479b85..d4265a881 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonArrayTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/JsonArrayTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.JsonArray;
+import com.solidfire.gson.JsonArray;
 import junit.framework.TestCase;
 
 import java.math.BigInteger;
diff --git a/gson/src/test/java/com/google/gson/functional/JsonParserTest.java b/gson/src/test/java/com/solidfire/gson/functional/JsonParserTest.java
similarity index 89%
rename from gson/src/test/java/com/google/gson/functional/JsonParserTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/JsonParserTest.java
index 44f4477cb..769e279cf 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonParserTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/JsonParserTest.java
@@ -14,18 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonParser;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.reflect.TypeToken;
+package com.solidfire.gson.functional;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.JsonArray;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonParseException;
+import com.solidfire.gson.JsonParser;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.JsonSyntaxException;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.common.TestTypes.Nested;
+import com.solidfire.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java b/gson/src/test/java/com/solidfire/gson/functional/JsonTreeTest.java
similarity index 91%
rename from gson/src/test/java/com/google/gson/functional/JsonTreeTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/JsonTreeTest.java
index a64794030..3ad52c357 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/JsonTreeTest.java
@@ -1,10 +1,10 @@
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
diff --git a/gson/src/test/java/com/google/gson/functional/LeniencyTest.java b/gson/src/test/java/com/solidfire/gson/functional/LeniencyTest.java
similarity index 88%
rename from gson/src/test/java/com/google/gson/functional/LeniencyTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/LeniencyTest.java
index 6b5375e4b..aea1462e4 100644
--- a/gson/src/test/java/com/google/gson/functional/LeniencyTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/LeniencyTest.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.reflect.TypeToken;
 import java.util.List;
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java b/gson/src/test/java/com/solidfire/gson/functional/MapAsArrayTypeAdapterTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/MapAsArrayTypeAdapterTest.java
index c7cfcdf9f..9130d4fd4 100644
--- a/gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/MapAsArrayTypeAdapterTest.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonSyntaxException;
+import com.solidfire.gson.reflect.TypeToken;
 import java.lang.reflect.Type;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
diff --git a/gson/src/test/java/com/google/gson/functional/MapTest.java b/gson/src/test/java/com/solidfire/gson/functional/MapTest.java
similarity index 97%
rename from gson/src/test/java/com/google/gson/functional/MapTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/MapTest.java
index 590760cb5..f53354200 100755
--- a/gson/src/test/java/com/google/gson/functional/MapTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/MapTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
 import java.lang.reflect.Type;
 import java.util.Collection;
@@ -28,20 +28,20 @@
 import java.util.concurrent.ConcurrentNavigableMap;
 import java.util.concurrent.ConcurrentSkipListMap;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonParser;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.common.TestTypes;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.InstanceCreator;
+import com.solidfire.gson.JsonArray;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonParseException;
+import com.solidfire.gson.JsonParser;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.JsonSerializationContext;
+import com.solidfire.gson.JsonSerializer;
+import com.solidfire.gson.JsonSyntaxException;
+import com.solidfire.gson.common.TestTypes;
+import com.solidfire.gson.internal.$Gson$Types;
+import com.solidfire.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java b/gson/src/test/java/com/solidfire/gson/functional/MoreSpecificTypeSerializationTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/MoreSpecificTypeSerializationTest.java
index 7ecbffc84..59792896a 100644
--- a/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/MoreSpecificTypeSerializationTest.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonObject;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.JsonObject;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java b/gson/src/test/java/com/solidfire/gson/functional/NamingPolicyTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/NamingPolicyTest.java
index c3c0be1de..8006dc27e 100644
--- a/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/NamingPolicyTest.java
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
-
-import com.google.gson.FieldNamingPolicy;
-import com.google.gson.FieldNamingStrategy;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.annotations.SerializedName;
-import com.google.gson.common.TestTypes.ClassWithSerializedNameFields;
-import com.google.gson.common.TestTypes.StringWrapper;
+package com.solidfire.gson.functional;
+
+import com.solidfire.gson.FieldNamingPolicy;
+import com.solidfire.gson.FieldNamingStrategy;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.annotations.SerializedName;
+import com.solidfire.gson.common.TestTypes.ClassWithSerializedNameFields;
+import com.solidfire.gson.common.TestTypes.StringWrapper;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java b/gson/src/test/java/com/solidfire/gson/functional/NullObjectAndFieldTest.java
similarity index 91%
rename from gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/NullObjectAndFieldTest.java
index 7939a8c85..c76db9072 100755
--- a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/NullObjectAndFieldTest.java
@@ -14,19 +14,19 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithObjects;
+package com.solidfire.gson.functional;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonNull;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonDeserializationContext;
+import com.solidfire.gson.JsonDeserializer;
+import com.solidfire.gson.JsonSerializationContext;
+import com.solidfire.gson.JsonSerializer;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.common.TestTypes.ClassWithObjects;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/ObjectTest.java b/gson/src/test/java/com/solidfire/gson/functional/ObjectTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/ObjectTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/ObjectTest.java
index de1219a6a..4822be249 100644
--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/ObjectTest.java
@@ -14,26 +14,26 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.ArrayOfObjects;
-import com.google.gson.common.TestTypes.BagOfPrimitiveWrappers;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithArray;
-import com.google.gson.common.TestTypes.ClassWithNoFields;
-import com.google.gson.common.TestTypes.ClassWithObjects;
-import com.google.gson.common.TestTypes.ClassWithTransientFields;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.common.TestTypes.PrimitiveArray;
-import com.google.gson.reflect.TypeToken;
+package com.solidfire.gson.functional;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.InstanceCreator;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonParseException;
+import com.solidfire.gson.JsonSerializationContext;
+import com.solidfire.gson.JsonSerializer;
+import com.solidfire.gson.common.TestTypes.ArrayOfObjects;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitiveWrappers;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.common.TestTypes.ClassWithArray;
+import com.solidfire.gson.common.TestTypes.ClassWithNoFields;
+import com.solidfire.gson.common.TestTypes.ClassWithObjects;
+import com.solidfire.gson.common.TestTypes.ClassWithTransientFields;
+import com.solidfire.gson.common.TestTypes.Nested;
+import com.solidfire.gson.common.TestTypes.PrimitiveArray;
+import com.solidfire.gson.reflect.TypeToken;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Collection;
diff --git a/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java b/gson/src/test/java/com/solidfire/gson/functional/ParameterizedTypesTest.java
similarity index 97%
rename from gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/ParameterizedTypesTest.java
index 190603deb..8d0c8bcf2 100644
--- a/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/ParameterizedTypesTest.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.ParameterizedTypeFixtures.MyParameterizedType;
-import com.google.gson.ParameterizedTypeFixtures.MyParameterizedTypeAdapter;
-import com.google.gson.ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.reflect.TypeToken;
+package com.solidfire.gson.functional;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.ParameterizedTypeFixtures.MyParameterizedType;
+import com.solidfire.gson.ParameterizedTypeFixtures.MyParameterizedTypeAdapter;
+import com.solidfire.gson.ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java b/gson/src/test/java/com/solidfire/gson/functional/PrettyPrintingTest.java
similarity index 93%
rename from gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/PrettyPrintingTest.java
index 0aacc9e27..7a5c5a763 100644
--- a/gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/PrettyPrintingTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
 import java.lang.reflect.Type;
 import java.util.Arrays;
@@ -24,11 +24,11 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.common.TestTypes.ArrayOfObjects;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.common.TestTypes.ArrayOfObjects;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.reflect.TypeToken;
 
 /**
  * Functional tests for pretty printing option.
diff --git a/gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java b/gson/src/test/java/com/solidfire/gson/functional/PrimitiveCharacterTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/PrimitiveCharacterTest.java
index 69ff1f3f2..546cde260 100644
--- a/gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/PrimitiveCharacterTest.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
+import com.solidfire.gson.Gson;
 
 /**
  * Functional tests for Java Character values.
diff --git a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java b/gson/src/test/java/com/solidfire/gson/functional/PrimitiveTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/functional/PrimitiveTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/PrimitiveTest.java
index bb28ed1ec..01251ef30 100644
--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/PrimitiveTest.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.LongSerializationPolicy;
-import com.google.gson.reflect.TypeToken;
+package com.solidfire.gson.functional;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.JsonSyntaxException;
+import com.solidfire.gson.LongSerializationPolicy;
+import com.solidfire.gson.reflect.TypeToken;
 import java.io.Serializable;
 import java.io.StringReader;
 import java.math.BigDecimal;
diff --git a/gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java b/gson/src/test/java/com/solidfire/gson/functional/PrintFormattingTest.java
similarity index 84%
rename from gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/PrintFormattingTest.java
index 7dcbc23c3..1ced355a3 100644
--- a/gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/PrintFormattingTest.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonObject;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithTransientFields;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.common.TestTypes.PrimitiveArray;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.common.TestTypes.ClassWithTransientFields;
+import com.solidfire.gson.common.TestTypes.Nested;
+import com.solidfire.gson.common.TestTypes.PrimitiveArray;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/RawSerializationTest.java b/gson/src/test/java/com/solidfire/gson/functional/RawSerializationTest.java
similarity index 96%
rename from gson/src/test/java/com/google/gson/functional/RawSerializationTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/RawSerializationTest.java
index d5e8883e7..d9caced49 100644
--- a/gson/src/test/java/com/google/gson/functional/RawSerializationTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/RawSerializationTest.java
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
 import java.util.Arrays;
 import java.util.Collection;
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.reflect.TypeToken;
 
 /**
  * Unit tests to validate serialization of parameterized types without explicit types
diff --git a/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java b/gson/src/test/java/com/solidfire/gson/functional/ReadersWritersTest.java
similarity index 93%
rename from gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/ReadersWritersTest.java
index e21fb903e..4e31b1195 100644
--- a/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/ReadersWritersTest.java
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonStreamParser;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonStreamParser;
+import com.solidfire.gson.JsonSyntaxException;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
 
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.reflect.TypeToken;
 import java.util.Map;
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java b/gson/src/test/java/com/solidfire/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
similarity index 93%
rename from gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
index 7959fc860..2fa2010c0 100644
--- a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
 import java.io.IOException;
 import java.util.LinkedHashMap;
@@ -21,18 +21,18 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.internal.Streams;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonParseException;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
+import com.solidfire.gson.annotations.JsonAdapter;
+import com.solidfire.gson.internal.Streams;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonWriter;
 
 /**
  * Functional tests for the RuntimeTypeAdapterFactory feature in extras.
diff --git a/gson/src/test/java/com/google/gson/functional/SecurityTest.java b/gson/src/test/java/com/solidfire/gson/functional/SecurityTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/SecurityTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/SecurityTest.java
index aa1c2d451..eb0063c27 100644
--- a/gson/src/test/java/com/google/gson/functional/SecurityTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/SecurityTest.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/SerializedNameTest.java b/gson/src/test/java/com/solidfire/gson/functional/SerializedNameTest.java
similarity index 93%
rename from gson/src/test/java/com/google/gson/functional/SerializedNameTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/SerializedNameTest.java
index 0314ae0af..aeecac67f 100644
--- a/gson/src/test/java/com/google/gson/functional/SerializedNameTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/SerializedNameTest.java
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.annotations.SerializedName;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.annotations.SerializedName;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java b/gson/src/test/java/com/solidfire/gson/functional/StreamingTypeAdaptersTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/StreamingTypeAdaptersTest.java
index 551ceffc0..ba63d46fd 100644
--- a/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/StreamingTypeAdaptersTest.java
@@ -14,18 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonArray;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.JsonSyntaxException;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.reflect.TypeToken;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.io.StringReader;
 import java.io.StringWriter;
diff --git a/gson/src/test/java/com/google/gson/functional/StringTest.java b/gson/src/test/java/com/solidfire/gson/functional/StringTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/functional/StringTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/StringTest.java
index 7dcf6f0f5..3467356dc 100644
--- a/gson/src/test/java/com/google/gson/functional/StringTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/StringTest.java
@@ -1,6 +1,6 @@
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
+import com.solidfire.gson.Gson;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java b/gson/src/test/java/com/solidfire/gson/functional/ThrowableFunctionalTest.java
similarity index 94%
rename from gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/ThrowableFunctionalTest.java
index f6ae748a5..122e98652 100644
--- a/gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/ThrowableFunctionalTest.java
@@ -1,12 +1,12 @@
 // Copyright (C) 2014 Trymph Inc.
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
 import java.io.IOException;
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.annotations.SerializedName;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.annotations.SerializedName;
 
 @SuppressWarnings("serial")
 public final class ThrowableFunctionalTest extends TestCase {
diff --git a/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java b/gson/src/test/java/com/solidfire/gson/functional/TreeTypeAdaptersTest.java
similarity index 91%
rename from gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/TreeTypeAdaptersTest.java
index ad737ec51..ad6859a13 100644
--- a/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/TreeTypeAdaptersTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
@@ -24,16 +24,16 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonDeserializationContext;
+import com.solidfire.gson.JsonDeserializer;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonParseException;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.JsonSerializationContext;
+import com.solidfire.gson.JsonSerializer;
+import com.solidfire.gson.reflect.TypeToken;
 
 /**
  * Collection of functional tests for DOM tree based type adapters.
diff --git a/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java b/gson/src/test/java/com/solidfire/gson/functional/TypeAdapterPrecedenceTest.java
similarity index 92%
rename from gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/TypeAdapterPrecedenceTest.java
index 5f881530d..9ac7f3d89 100644
--- a/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/TypeAdapterPrecedenceTest.java
@@ -14,19 +14,19 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.TypeAdapter;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonDeserializationContext;
+import com.solidfire.gson.JsonDeserializer;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.JsonSerializationContext;
+import com.solidfire.gson.JsonSerializer;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.stream.JsonReader;
+import com.solidfire.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Type;
 import junit.framework.TestCase;
diff --git a/gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java b/gson/src/test/java/com/solidfire/gson/functional/TypeHierarchyAdapterTest.java
similarity index 93%
rename from gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/TypeHierarchyAdapterTest.java
index 25b9c3436..13629db67 100644
--- a/gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/TypeHierarchyAdapterTest.java
@@ -14,18 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
+package com.solidfire.gson.functional;
+
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonDeserializationContext;
+import com.solidfire.gson.JsonDeserializer;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonObject;
+import com.solidfire.gson.JsonParseException;
+import com.solidfire.gson.JsonPrimitive;
+import com.solidfire.gson.JsonSerializationContext;
+import com.solidfire.gson.JsonSerializer;
 import java.lang.reflect.Type;
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java b/gson/src/test/java/com/solidfire/gson/functional/TypeVariableTest.java
similarity index 97%
rename from gson/src/test/java/com/google/gson/functional/TypeVariableTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/TypeVariableTest.java
index 2d7503eb3..61ff093bf 100644
--- a/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/TypeVariableTest.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
+import com.solidfire.gson.Gson;
 
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.reflect.TypeToken;
 import java.lang.reflect.Type;
 import java.util.Arrays;
 import junit.framework.TestCase;
diff --git a/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java b/gson/src/test/java/com/solidfire/gson/functional/UncategorizedTest.java
similarity index 90%
rename from gson/src/test/java/com/google/gson/functional/UncategorizedTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/UncategorizedTest.java
index 0ac038035..73a7db168 100644
--- a/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/UncategorizedTest.java
@@ -13,18 +13,18 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassOverridingEquals;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.JsonDeserializationContext;
+import com.solidfire.gson.JsonDeserializer;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonParseException;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.common.TestTypes.ClassOverridingEquals;
 
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.reflect.TypeToken;
 import java.util.Arrays;
 import java.util.List;
 import junit.framework.TestCase;
diff --git a/gson/src/test/java/com/google/gson/functional/VersioningTest.java b/gson/src/test/java/com/solidfire/gson/functional/VersioningTest.java
similarity index 95%
rename from gson/src/test/java/com/google/gson/functional/VersioningTest.java
rename to gson/src/test/java/com/solidfire/gson/functional/VersioningTest.java
index bc526de06..9e5ae2b47 100644
--- a/gson/src/test/java/com/google/gson/functional/VersioningTest.java
+++ b/gson/src/test/java/com/solidfire/gson/functional/VersioningTest.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.solidfire.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.annotations.Since;
-import com.google.gson.annotations.Until;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.GsonBuilder;
+import com.solidfire.gson.annotations.Since;
+import com.solidfire.gson.annotations.Until;
+import com.solidfire.gson.common.TestTypes.BagOfPrimitives;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/internal/GsonTypesTest.java b/gson/src/test/java/com/solidfire/gson/internal/GsonTypesTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/internal/GsonTypesTest.java
rename to gson/src/test/java/com/solidfire/gson/internal/GsonTypesTest.java
index c80700bde..a9c46ac8c 100644
--- a/gson/src/test/java/com/google/gson/internal/GsonTypesTest.java
+++ b/gson/src/test/java/com/solidfire/gson/internal/GsonTypesTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.solidfire.gson.internal;
 
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
diff --git a/gson/src/test/java/com/google/gson/internal/LazilyParsedNumberTest.java b/gson/src/test/java/com/solidfire/gson/internal/LazilyParsedNumberTest.java
similarity index 57%
rename from gson/src/test/java/com/google/gson/internal/LazilyParsedNumberTest.java
rename to gson/src/test/java/com/solidfire/gson/internal/LazilyParsedNumberTest.java
index f108fa0de..be4e56420 100644
--- a/gson/src/test/java/com/google/gson/internal/LazilyParsedNumberTest.java
+++ b/gson/src/test/java/com/solidfire/gson/internal/LazilyParsedNumberTest.java
@@ -13,20 +13,20 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.internal;
+package com.solidfire.gson.internal;
 
 import junit.framework.TestCase;
 
 public class LazilyParsedNumberTest extends TestCase {
-  public void testHashCode() {
-    LazilyParsedNumber n1 = new LazilyParsedNumber("1");
-    LazilyParsedNumber n1Another = new LazilyParsedNumber("1");
-    assertEquals(n1.hashCode(), n1Another.hashCode());
-  }
+    public void testHashCode() {
+        LazilyParsedNumber n1 = new LazilyParsedNumber("1");
+        LazilyParsedNumber n1Another = new LazilyParsedNumber("1");
+        assertEquals(n1.hashCode(), n1Another.hashCode());
+    }
 
-  public void testEquals() {
-    LazilyParsedNumber n1 = new LazilyParsedNumber("1");
-    LazilyParsedNumber n1Another = new LazilyParsedNumber("1");
-    assertTrue(n1.equals(n1Another));
-  }
+    public void testEquals() {
+        LazilyParsedNumber n1 = new LazilyParsedNumber("1");
+        LazilyParsedNumber n1Another = new LazilyParsedNumber("1");
+        assertTrue(n1.equals(n1Another));
+    }
 }
diff --git a/gson/src/test/java/com/solidfire/gson/internal/LinkedHashTreeMapTest.java b/gson/src/test/java/com/solidfire/gson/internal/LinkedHashTreeMapTest.java
new file mode 100644
index 000000000..d6b89401a
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/internal/LinkedHashTreeMapTest.java
@@ -0,0 +1,288 @@
+/*
+ * Copyright (C) 2012 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson.internal;
+
+import com.solidfire.gson.common.MoreAsserts;
+import com.solidfire.gson.internal.LinkedHashTreeMap.AvlBuilder;
+import com.solidfire.gson.internal.LinkedHashTreeMap.AvlIterator;
+import com.solidfire.gson.internal.LinkedHashTreeMap.Node;
+import junit.framework.TestCase;
+
+import java.util.*;
+
+public final class LinkedHashTreeMapTest extends TestCase {
+    public void testIterationOrder() {
+        LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
+        map.put("a", "android");
+        map.put("c", "cola");
+        map.put("b", "bbq");
+        assertIterationOrder(map.keySet(), "a", "c", "b");
+        assertIterationOrder(map.values(), "android", "cola", "bbq");
+    }
+
+    public void testRemoveRootDoesNotDoubleUnlink() {
+        LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
+        map.put("a", "android");
+        map.put("c", "cola");
+        map.put("b", "bbq");
+        Iterator<Map.Entry<String, String>> it = map.entrySet().iterator();
+        it.next();
+        it.next();
+        it.next();
+        it.remove();
+        assertIterationOrder(map.keySet(), "a", "c");
+    }
+
+    public void testPutNullKeyFails() {
+        LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
+        try {
+            map.put(null, "android");
+            fail();
+        } catch (NullPointerException expected) {
+        }
+    }
+
+    public void testPutNonComparableKeyFails() {
+        LinkedHashTreeMap<Object, String> map = new LinkedHashTreeMap<Object, String>();
+        try {
+            map.put(new Object(), "android");
+            fail();
+        } catch (ClassCastException expected) {
+        }
+    }
+
+    public void testContainsNonComparableKeyReturnsFalse() {
+        LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
+        map.put("a", "android");
+        assertFalse(map.containsKey(new Object()));
+    }
+
+    public void testContainsNullKeyIsAlwaysFalse() {
+        LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
+        map.put("a", "android");
+        assertFalse(map.containsKey(null));
+    }
+
+    public void testPutOverrides() throws Exception {
+        LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
+        assertNull(map.put("d", "donut"));
+        assertNull(map.put("e", "eclair"));
+        assertNull(map.put("f", "froyo"));
+        assertEquals(3, map.size());
+
+        assertEquals("donut", map.get("d"));
+        assertEquals("donut", map.put("d", "done"));
+        assertEquals(3, map.size());
+    }
+
+    public void testEmptyStringValues() {
+        LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
+        map.put("a", "");
+        assertTrue(map.containsKey("a"));
+        assertEquals("", map.get("a"));
+    }
+
+    // NOTE that this does not happen every time, but given the below predictable random,
+    // this test will consistently fail (assuming the initial size is 16 and rehashing
+    // size remains at 3/4)
+    public void testForceDoublingAndRehash() throws Exception {
+        Random random = new Random(1367593214724L);
+        LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
+        String[] keys = new String[1000];
+        for (int i = 0; i < keys.length; i++) {
+            keys[i] = Integer.toString(Math.abs(random.nextInt()), 36) + "-" + i;
+            map.put(keys[i], "" + i);
+        }
+
+        for (int i = 0; i < keys.length; i++) {
+            String key = keys[i];
+            assertTrue(map.containsKey(key));
+            assertEquals("" + i, map.get(key));
+        }
+    }
+
+    public void testClear() {
+        LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();
+        map.put("a", "android");
+        map.put("c", "cola");
+        map.put("b", "bbq");
+        map.clear();
+        assertIterationOrder(map.keySet());
+        assertEquals(0, map.size());
+    }
+
+    public void testEqualsAndHashCode() throws Exception {
+        LinkedHashTreeMap<String, Integer> map1 = new LinkedHashTreeMap<String, Integer>();
+        map1.put("A", 1);
+        map1.put("B", 2);
+        map1.put("C", 3);
+        map1.put("D", 4);
+
+        LinkedHashTreeMap<String, Integer> map2 = new LinkedHashTreeMap<String, Integer>();
+        map2.put("C", 3);
+        map2.put("B", 2);
+        map2.put("D", 4);
+        map2.put("A", 1);
+
+        MoreAsserts.assertEqualsAndHashCode(map1, map2);
+    }
+
+    public void testAvlWalker() {
+        assertAvlWalker(node(node("a"), "b", node("c")),
+                "a", "b", "c");
+        assertAvlWalker(node(node(node("a"), "b", node("c")), "d", node(node("e"), "f", node("g"))),
+                "a", "b", "c", "d", "e", "f", "g");
+        assertAvlWalker(node(node(null, "a", node("b")), "c", node(node("d"), "e", null)),
+                "a", "b", "c", "d", "e");
+        assertAvlWalker(node(null, "a", node(null, "b", node(null, "c", node("d")))),
+                "a", "b", "c", "d");
+        assertAvlWalker(node(node(node(node("a"), "b", null), "c", null), "d", null),
+                "a", "b", "c", "d");
+    }
+
+    private void assertAvlWalker(Node<String, String> root, String... values) {
+        AvlIterator<String, String> iterator = new AvlIterator<String, String>();
+        iterator.reset(root);
+        for (String value : values) {
+            assertEquals(value, iterator.next().getKey());
+        }
+        assertNull(iterator.next());
+    }
+
+    public void testAvlBuilder() {
+        assertAvlBuilder(1, "a");
+        assertAvlBuilder(2, "(. a b)");
+        assertAvlBuilder(3, "(a b c)");
+        assertAvlBuilder(4, "(a b (. c d))");
+        assertAvlBuilder(5, "(a b (c d e))");
+        assertAvlBuilder(6, "((. a b) c (d e f))");
+        assertAvlBuilder(7, "((a b c) d (e f g))");
+        assertAvlBuilder(8, "((a b c) d (e f (. g h)))");
+        assertAvlBuilder(9, "((a b c) d (e f (g h i)))");
+        assertAvlBuilder(10, "((a b c) d ((. e f) g (h i j)))");
+        assertAvlBuilder(11, "((a b c) d ((e f g) h (i j k)))");
+        assertAvlBuilder(12, "((a b (. c d)) e ((f g h) i (j k l)))");
+        assertAvlBuilder(13, "((a b (c d e)) f ((g h i) j (k l m)))");
+        assertAvlBuilder(14, "(((. a b) c (d e f)) g ((h i j) k (l m n)))");
+        assertAvlBuilder(15, "(((a b c) d (e f g)) h ((i j k) l (m n o)))");
+        assertAvlBuilder(16, "(((a b c) d (e f g)) h ((i j k) l (m n (. o p))))");
+        assertAvlBuilder(30, "((((. a b) c (d e f)) g ((h i j) k (l m n))) o "
+                + "(((p q r) s (t u v)) w ((x y z) A (B C D))))");
+        assertAvlBuilder(31, "((((a b c) d (e f g)) h ((i j k) l (m n o))) p "
+                + "(((q r s) t (u v w)) x ((y z A) B (C D E))))");
+    }
+
+    private void assertAvlBuilder(int size, String expected) {
+        char[] values = "abcdefghijklmnopqrstuvwxyzABCDE".toCharArray();
+        AvlBuilder<String, String> avlBuilder = new AvlBuilder<String, String>();
+        avlBuilder.reset(size);
+        for (int i = 0; i < size; i++) {
+            avlBuilder.add(node(Character.toString(values[i])));
+        }
+        assertTree(expected, avlBuilder.root());
+    }
+
+    public void testDoubleCapacity() {
+        @SuppressWarnings("unchecked") // Arrays and generics don't get along.
+                Node<String, String>[] oldTable = new Node[1];
+        oldTable[0] = node(node(node("a"), "b", node("c")), "d", node(node("e"), "f", node("g")));
+
+        Node<String, String>[] newTable = LinkedHashTreeMap.doubleCapacity(oldTable);
+        assertTree("(b d f)", newTable[0]); // Even hash codes!
+        assertTree("(a c (. e g))", newTable[1]); // Odd hash codes!
+    }
+
+    public void testDoubleCapacityAllNodesOnLeft() {
+        @SuppressWarnings("unchecked") // Arrays and generics don't get along.
+                Node<String, String>[] oldTable = new Node[1];
+        oldTable[0] = node(node("b"), "d", node("f"));
+
+        Node<String, String>[] newTable = LinkedHashTreeMap.doubleCapacity(oldTable);
+        assertTree("(b d f)", newTable[0]); // Even hash codes!
+        assertNull(newTable[1]); // Odd hash codes!
+
+        for (Node<?, ?> node : newTable) {
+            if (node != null) {
+                assertConsistent(node);
+            }
+        }
+    }
+
+    private static final Node<String, String> head = new Node<String, String>();
+
+    private Node<String, String> node(String value) {
+        return new Node<String, String>(null, value, value.hashCode(), head, head);
+    }
+
+    private Node<String, String> node(Node<String, String> left, String value,
+                                      Node<String, String> right) {
+        Node<String, String> result = node(value);
+        if (left != null) {
+            result.left = left;
+            left.parent = result;
+        }
+        if (right != null) {
+            result.right = right;
+            right.parent = result;
+        }
+        return result;
+    }
+
+    private void assertTree(String expected, Node<?, ?> root) {
+        assertEquals(expected, toString(root));
+        assertConsistent(root);
+    }
+
+    private void assertConsistent(Node<?, ?> node) {
+        int leftHeight = 0;
+        if (node.left != null) {
+            assertConsistent(node.left);
+            assertSame(node, node.left.parent);
+            leftHeight = node.left.height;
+        }
+        int rightHeight = 0;
+        if (node.right != null) {
+            assertConsistent(node.right);
+            assertSame(node, node.right.parent);
+            rightHeight = node.right.height;
+        }
+        if (node.parent != null) {
+            assertTrue(node.parent.left == node || node.parent.right == node);
+        }
+        if (Math.max(leftHeight, rightHeight) + 1 != node.height) {
+            fail();
+        }
+    }
+
+    private String toString(Node<?, ?> root) {
+        if (root == null) {
+            return ".";
+        } else if (root.left == null && root.right == null) {
+            return String.valueOf(root.key);
+        } else {
+            return String.format("(%s %s %s)", toString(root.left), root.key, toString(root.right));
+        }
+    }
+
+    private <T> void assertIterationOrder(Iterable<T> actual, T... expected) {
+        ArrayList<T> actualList = new ArrayList<T>();
+        for (T t : actual) {
+            actualList.add(t);
+        }
+        assertEquals(Arrays.asList(expected), actualList);
+    }
+}
diff --git a/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java b/gson/src/test/java/com/solidfire/gson/internal/LinkedTreeMapTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
rename to gson/src/test/java/com/solidfire/gson/internal/LinkedTreeMapTest.java
index 580d25a57..e92361b8f 100644
--- a/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
+++ b/gson/src/test/java/com/solidfire/gson/internal/LinkedTreeMapTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.solidfire.gson.internal;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -24,7 +24,7 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.common.MoreAsserts;
+import com.solidfire.gson.common.MoreAsserts;
 
 public final class LinkedTreeMapTest extends TestCase {
 
diff --git a/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java b/gson/src/test/java/com/solidfire/gson/internal/bind/JsonElementReaderTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java
rename to gson/src/test/java/com/solidfire/gson/internal/bind/JsonElementReaderTest.java
index 10624711c..5dfd44a3d 100644
--- a/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java
+++ b/gson/src/test/java/com/solidfire/gson/internal/bind/JsonElementReaderTest.java
@@ -14,12 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.solidfire.gson.internal.bind;
 
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParser;
-import com.google.gson.stream.JsonToken;
+import com.solidfire.gson.JsonElement;
+import com.solidfire.gson.JsonParser;
+import com.solidfire.gson.stream.JsonToken;
 import java.io.IOException;
+
 import junit.framework.TestCase;
 
 @SuppressWarnings("resource")
diff --git a/gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java b/gson/src/test/java/com/solidfire/gson/internal/bind/JsonTreeWriterTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java
rename to gson/src/test/java/com/solidfire/gson/internal/bind/JsonTreeWriterTest.java
index e07014d3f..f8fa94529 100644
--- a/gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java
+++ b/gson/src/test/java/com/solidfire/gson/internal/bind/JsonTreeWriterTest.java
@@ -14,10 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.solidfire.gson.internal.bind;
 
-import com.google.gson.JsonNull;
+import com.solidfire.gson.JsonNull;
 import java.io.IOException;
+
 import junit.framework.TestCase;
 
 @SuppressWarnings("resource")
diff --git a/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java b/gson/src/test/java/com/solidfire/gson/metrics/PerformanceTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/metrics/PerformanceTest.java
rename to gson/src/test/java/com/solidfire/gson/metrics/PerformanceTest.java
index cf444eee7..2acd3f0eb 100644
--- a/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java
+++ b/gson/src/test/java/com/solidfire/gson/metrics/PerformanceTest.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.metrics;
+package com.solidfire.gson.metrics;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonParseException;
-import com.google.gson.annotations.Expose;
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.JsonParseException;
+import com.solidfire.gson.annotations.Expose;
+import com.solidfire.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java b/gson/src/test/java/com/solidfire/gson/reflect/TypeTokenTest.java
similarity index 98%
rename from gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java
rename to gson/src/test/java/com/solidfire/gson/reflect/TypeTokenTest.java
index 7dda9d47d..337d3c259 100644
--- a/gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java
+++ b/gson/src/test/java/com/solidfire/gson/reflect/TypeTokenTest.java
@@ -14,13 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.reflect;
+package com.solidfire.gson.reflect;
 
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.RandomAccess;
 import java.util.Set;
+
 import junit.framework.TestCase;
 
 /**
diff --git a/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java b/gson/src/test/java/com/solidfire/gson/regression/JsonAdapterNullSafeTest.java
similarity index 88%
rename from gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
rename to gson/src/test/java/com/solidfire/gson/regression/JsonAdapterNullSafeTest.java
index 30a6775c8..773efa664 100644
--- a/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
+++ b/gson/src/test/java/com/solidfire/gson/regression/JsonAdapterNullSafeTest.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.regression;
+package com.solidfire.gson.regression;
 
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.reflect.TypeToken;
+import com.solidfire.gson.Gson;
+import com.solidfire.gson.TypeAdapter;
+import com.solidfire.gson.TypeAdapterFactory;
+import com.solidfire.gson.annotations.JsonAdapter;
+import com.solidfire.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/gson/src/test/java/com/solidfire/gson/stream/JsonReaderPathTest.java b/gson/src/test/java/com/solidfire/gson/stream/JsonReaderPathTest.java
new file mode 100644
index 000000000..1eff140fe
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/stream/JsonReaderPathTest.java
@@ -0,0 +1,218 @@
+/*
+ * Copyright (C) 2014 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson.stream;
+
+import junit.framework.TestCase;
+
+import java.io.IOException;
+import java.io.StringReader;
+
+@SuppressWarnings("resource")
+public class JsonReaderPathTest extends TestCase {
+    public void testPath() throws IOException {
+        JsonReader reader = new JsonReader(
+                new StringReader("{\"a\":[2,true,false,null,\"b\",{\"c\":\"d\"},[3]]}"));
+        assertEquals("$", reader.getPath());
+        reader.beginObject();
+        assertEquals("$.", reader.getPath());
+        reader.nextName();
+        assertEquals("$.a", reader.getPath());
+        reader.beginArray();
+        assertEquals("$.a[0]", reader.getPath());
+        reader.nextInt();
+        assertEquals("$.a[1]", reader.getPath());
+        reader.nextBoolean();
+        assertEquals("$.a[2]", reader.getPath());
+        reader.nextBoolean();
+        assertEquals("$.a[3]", reader.getPath());
+        reader.nextNull();
+        assertEquals("$.a[4]", reader.getPath());
+        reader.nextString();
+        assertEquals("$.a[5]", reader.getPath());
+        reader.beginObject();
+        assertEquals("$.a[5].", reader.getPath());
+        reader.nextName();
+        assertEquals("$.a[5].c", reader.getPath());
+        reader.nextString();
+        assertEquals("$.a[5].c", reader.getPath());
+        reader.endObject();
+        assertEquals("$.a[6]", reader.getPath());
+        reader.beginArray();
+        assertEquals("$.a[6][0]", reader.getPath());
+        reader.nextInt();
+        assertEquals("$.a[6][1]", reader.getPath());
+        reader.endArray();
+        assertEquals("$.a[7]", reader.getPath());
+        reader.endArray();
+        assertEquals("$.a", reader.getPath());
+        reader.endObject();
+        assertEquals("$", reader.getPath());
+    }
+
+    public void testObjectPath() throws IOException {
+        JsonReader reader = new JsonReader(new StringReader("{\"a\":1,\"b\":2}"));
+        assertEquals("$", reader.getPath());
+
+        reader.peek();
+        assertEquals("$", reader.getPath());
+        reader.beginObject();
+        assertEquals("$.", reader.getPath());
+
+        reader.peek();
+        assertEquals("$.", reader.getPath());
+        reader.nextName();
+        assertEquals("$.a", reader.getPath());
+
+        reader.peek();
+        assertEquals("$.a", reader.getPath());
+        reader.nextInt();
+        assertEquals("$.a", reader.getPath());
+
+        reader.peek();
+        assertEquals("$.a", reader.getPath());
+        reader.nextName();
+        assertEquals("$.b", reader.getPath());
+
+        reader.peek();
+        assertEquals("$.b", reader.getPath());
+        reader.nextInt();
+        assertEquals("$.b", reader.getPath());
+
+        reader.peek();
+        assertEquals("$.b", reader.getPath());
+        reader.endObject();
+        assertEquals("$", reader.getPath());
+
+        reader.peek();
+        assertEquals("$", reader.getPath());
+        reader.close();
+        assertEquals("$", reader.getPath());
+    }
+
+    public void testArrayPath() throws IOException {
+        JsonReader reader = new JsonReader(new StringReader("[1,2]"));
+        assertEquals("$", reader.getPath());
+
+        reader.peek();
+        assertEquals("$", reader.getPath());
+        reader.beginArray();
+        assertEquals("$[0]", reader.getPath());
+
+        reader.peek();
+        assertEquals("$[0]", reader.getPath());
+        reader.nextInt();
+        assertEquals("$[1]", reader.getPath());
+
+        reader.peek();
+        assertEquals("$[1]", reader.getPath());
+        reader.nextInt();
+        assertEquals("$[2]", reader.getPath());
+
+        reader.peek();
+        assertEquals("$[2]", reader.getPath());
+        reader.endArray();
+        assertEquals("$", reader.getPath());
+
+        reader.peek();
+        assertEquals("$", reader.getPath());
+        reader.close();
+        assertEquals("$", reader.getPath());
+    }
+
+    public void testMultipleTopLevelValuesInOneDocument() throws IOException {
+        JsonReader reader = new JsonReader(new StringReader("[][]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        reader.endArray();
+        assertEquals("$", reader.getPath());
+        reader.beginArray();
+        reader.endArray();
+        assertEquals("$", reader.getPath());
+    }
+
+    public void testSkipArrayElements() throws IOException {
+        JsonReader reader = new JsonReader(new StringReader("[1,2,3]"));
+        reader.beginArray();
+        reader.skipValue();
+        reader.skipValue();
+        assertEquals("$[2]", reader.getPath());
+    }
+
+    public void testSkipObjectNames() throws IOException {
+        JsonReader reader = new JsonReader(new StringReader("{\"a\":1}"));
+        reader.beginObject();
+        reader.skipValue();
+        assertEquals("$.null", reader.getPath());
+    }
+
+    public void testSkipObjectValues() throws IOException {
+        JsonReader reader = new JsonReader(new StringReader("{\"a\":1,\"b\":2}"));
+        reader.beginObject();
+        reader.nextName();
+        reader.skipValue();
+        assertEquals("$.null", reader.getPath());
+        reader.nextName();
+        assertEquals("$.b", reader.getPath());
+    }
+
+    public void testSkipNestedStructures() throws IOException {
+        JsonReader reader = new JsonReader(new StringReader("[[1,2,3],4]"));
+        reader.beginArray();
+        reader.skipValue();
+        assertEquals("$[1]", reader.getPath());
+    }
+
+    public void testArrayOfObjects() throws IOException {
+        JsonReader reader = new JsonReader(new StringReader("[{},{},{}]"));
+        reader.beginArray();
+        assertEquals("$[0]", reader.getPath());
+        reader.beginObject();
+        assertEquals("$[0].", reader.getPath());
+        reader.endObject();
+        assertEquals("$[1]", reader.getPath());
+        reader.beginObject();
+        assertEquals("$[1].", reader.getPath());
+        reader.endObject();
+        assertEquals("$[2]", reader.getPath());
+        reader.beginObject();
+        assertEquals("$[2].", reader.getPath());
+        reader.endObject();
+        assertEquals("$[3]", reader.getPath());
+        reader.endArray();
+        assertEquals("$", reader.getPath());
+    }
+
+    public void testArrayOfArrays() throws IOException {
+        JsonReader reader = new JsonReader(new StringReader("[[],[],[]]"));
+        reader.beginArray();
+        assertEquals("$[0]", reader.getPath());
+        reader.beginArray();
+        assertEquals("$[0][0]", reader.getPath());
+        reader.endArray();
+        assertEquals("$[1]", reader.getPath());
+        reader.beginArray();
+        assertEquals("$[1][0]", reader.getPath());
+        reader.endArray();
+        assertEquals("$[2]", reader.getPath());
+        reader.beginArray();
+        assertEquals("$[2][0]", reader.getPath());
+        reader.endArray();
+        assertEquals("$[3]", reader.getPath());
+        reader.endArray();
+        assertEquals("$", reader.getPath());
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/stream/JsonReaderTest.java b/gson/src/test/java/com/solidfire/gson/stream/JsonReaderTest.java
new file mode 100644
index 000000000..b42abd3ca
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/stream/JsonReaderTest.java
@@ -0,0 +1,1754 @@
+/*
+ * Copyright (C) 2010 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson.stream;
+
+import junit.framework.TestCase;
+
+import java.io.EOFException;
+import java.io.IOException;
+import java.io.Reader;
+import java.io.StringReader;
+import java.util.Arrays;
+
+import static com.solidfire.gson.stream.JsonToken.*;
+
+@SuppressWarnings("resource")
+public final class JsonReaderTest extends TestCase {
+    public void testReadArray() throws IOException {
+        JsonReader reader = new JsonReader(reader("[true, true]"));
+        reader.beginArray();
+        assertEquals(true, reader.nextBoolean());
+        assertEquals(true, reader.nextBoolean());
+        reader.endArray();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testReadEmptyArray() throws IOException {
+        JsonReader reader = new JsonReader(reader("[]"));
+        reader.beginArray();
+        assertFalse(reader.hasNext());
+        reader.endArray();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testReadObject() throws IOException {
+        JsonReader reader = new JsonReader(reader(
+                "{\"a\": \"android\", \"b\": \"banana\"}"));
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        assertEquals("android", reader.nextString());
+        assertEquals("b", reader.nextName());
+        assertEquals("banana", reader.nextString());
+        reader.endObject();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testReadEmptyObject() throws IOException {
+        JsonReader reader = new JsonReader(reader("{}"));
+        reader.beginObject();
+        assertFalse(reader.hasNext());
+        reader.endObject();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testSkipArray() throws IOException {
+        JsonReader reader = new JsonReader(reader(
+                "{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        reader.skipValue();
+        assertEquals("b", reader.nextName());
+        assertEquals(123, reader.nextInt());
+        reader.endObject();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testSkipArrayAfterPeek() throws Exception {
+        JsonReader reader = new JsonReader(reader(
+                "{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        assertEquals(BEGIN_ARRAY, reader.peek());
+        reader.skipValue();
+        assertEquals("b", reader.nextName());
+        assertEquals(123, reader.nextInt());
+        reader.endObject();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testSkipTopLevelObject() throws Exception {
+        JsonReader reader = new JsonReader(reader(
+                "{\"a\": [\"one\", \"two\", \"three\"], \"b\": 123}"));
+        reader.skipValue();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testSkipObject() throws IOException {
+        JsonReader reader = new JsonReader(reader(
+                "{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}"));
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        reader.skipValue();
+        assertEquals("b", reader.nextName());
+        reader.skipValue();
+        reader.endObject();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testSkipObjectAfterPeek() throws Exception {
+        String json = "{" + "  \"one\": { \"num\": 1 }"
+                + ", \"two\": { \"num\": 2 }" + ", \"three\": { \"num\": 3 }" + "}";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.beginObject();
+        assertEquals("one", reader.nextName());
+        assertEquals(BEGIN_OBJECT, reader.peek());
+        reader.skipValue();
+        assertEquals("two", reader.nextName());
+        assertEquals(BEGIN_OBJECT, reader.peek());
+        reader.skipValue();
+        assertEquals("three", reader.nextName());
+        reader.skipValue();
+        reader.endObject();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testSkipInteger() throws IOException {
+        JsonReader reader = new JsonReader(reader(
+                "{\"a\":123456789,\"b\":-123456789}"));
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        reader.skipValue();
+        assertEquals("b", reader.nextName());
+        reader.skipValue();
+        reader.endObject();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testSkipDouble() throws IOException {
+        JsonReader reader = new JsonReader(reader(
+                "{\"a\":-123.456e-789,\"b\":123456789.0}"));
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        reader.skipValue();
+        assertEquals("b", reader.nextName());
+        reader.skipValue();
+        reader.endObject();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testHelloWorld() throws IOException {
+        String json = "{\n" +
+                "   \"hello\": true,\n" +
+                "   \"foo\": [\"world\"]\n" +
+                "}";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.beginObject();
+        assertEquals("hello", reader.nextName());
+        assertEquals(true, reader.nextBoolean());
+        assertEquals("foo", reader.nextName());
+        reader.beginArray();
+        assertEquals("world", reader.nextString());
+        reader.endArray();
+        reader.endObject();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testNulls() {
+        try {
+            new JsonReader(null);
+            fail();
+        } catch (NullPointerException expected) {
+        }
+    }
+
+    public void testEmptyString() {
+        try {
+            new JsonReader(reader("")).beginArray();
+            fail();
+        } catch (IOException expected) {
+        }
+        try {
+            new JsonReader(reader("")).beginObject();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testCharacterUnescaping() throws IOException {
+        String json = "[\"a\","
+                + "\"a\\\"\","
+                + "\"\\\"\","
+                + "\":\","
+                + "\",\","
+                + "\"\\b\","
+                + "\"\\f\","
+                + "\"\\n\","
+                + "\"\\r\","
+                + "\"\\t\","
+                + "\" \","
+                + "\"\\\\\","
+                + "\"{\","
+                + "\"}\","
+                + "\"[\","
+                + "\"]\","
+                + "\"\\u0000\","
+                + "\"\\u0019\","
+                + "\"\\u20AC\""
+                + "]";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.beginArray();
+        assertEquals("a", reader.nextString());
+        assertEquals("a\"", reader.nextString());
+        assertEquals("\"", reader.nextString());
+        assertEquals(":", reader.nextString());
+        assertEquals(",", reader.nextString());
+        assertEquals("\b", reader.nextString());
+        assertEquals("\f", reader.nextString());
+        assertEquals("\n", reader.nextString());
+        assertEquals("\r", reader.nextString());
+        assertEquals("\t", reader.nextString());
+        assertEquals(" ", reader.nextString());
+        assertEquals("\\", reader.nextString());
+        assertEquals("{", reader.nextString());
+        assertEquals("}", reader.nextString());
+        assertEquals("[", reader.nextString());
+        assertEquals("]", reader.nextString());
+        assertEquals("\0", reader.nextString());
+        assertEquals("\u0019", reader.nextString());
+        assertEquals("\u20AC", reader.nextString());
+        reader.endArray();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testUnescapingInvalidCharacters() throws IOException {
+        String json = "[\"\\u000g\"]";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.beginArray();
+        try {
+            reader.nextString();
+            fail();
+        } catch (NumberFormatException expected) {
+        }
+    }
+
+    public void testUnescapingTruncatedCharacters() throws IOException {
+        String json = "[\"\\u000";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.beginArray();
+        try {
+            reader.nextString();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testUnescapingTruncatedSequence() throws IOException {
+        String json = "[\"\\";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.beginArray();
+        try {
+            reader.nextString();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testIntegersWithFractionalPartSpecified() throws IOException {
+        JsonReader reader = new JsonReader(reader("[1.0,1.0,1.0]"));
+        reader.beginArray();
+        assertEquals(1.0, reader.nextDouble());
+        assertEquals(1, reader.nextInt());
+        assertEquals(1L, reader.nextLong());
+    }
+
+    public void testDoubles() throws IOException {
+        String json = "[-0.0,"
+                + "1.0,"
+                + "1.7976931348623157E308,"
+                + "4.9E-324,"
+                + "0.0,"
+                + "-0.5,"
+                + "2.2250738585072014E-308,"
+                + "3.141592653589793,"
+                + "2.718281828459045]";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.beginArray();
+        assertEquals(-0.0, reader.nextDouble());
+        assertEquals(1.0, reader.nextDouble());
+        assertEquals(1.7976931348623157E308, reader.nextDouble());
+        assertEquals(4.9E-324, reader.nextDouble());
+        assertEquals(0.0, reader.nextDouble());
+        assertEquals(-0.5, reader.nextDouble());
+        assertEquals(2.2250738585072014E-308, reader.nextDouble());
+        assertEquals(3.141592653589793, reader.nextDouble());
+        assertEquals(2.718281828459045, reader.nextDouble());
+        reader.endArray();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testStrictNonFiniteDoubles() throws IOException {
+        String json = "[NaN]";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.beginArray();
+        try {
+            reader.nextDouble();
+            fail();
+        } catch (MalformedJsonException expected) {
+        }
+    }
+
+    public void testStrictQuotedNonFiniteDoubles() throws IOException {
+        String json = "[\"NaN\"]";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.beginArray();
+        try {
+            reader.nextDouble();
+            fail();
+        } catch (MalformedJsonException expected) {
+        }
+    }
+
+    public void testLenientNonFiniteDoubles() throws IOException {
+        String json = "[NaN, -Infinity, Infinity]";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertTrue(Double.isNaN(reader.nextDouble()));
+        assertEquals(Double.NEGATIVE_INFINITY, reader.nextDouble());
+        assertEquals(Double.POSITIVE_INFINITY, reader.nextDouble());
+        reader.endArray();
+    }
+
+    public void testLenientQuotedNonFiniteDoubles() throws IOException {
+        String json = "[\"NaN\", \"-Infinity\", \"Infinity\"]";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertTrue(Double.isNaN(reader.nextDouble()));
+        assertEquals(Double.NEGATIVE_INFINITY, reader.nextDouble());
+        assertEquals(Double.POSITIVE_INFINITY, reader.nextDouble());
+        reader.endArray();
+    }
+
+    public void testStrictNonFiniteDoublesWithSkipValue() throws IOException {
+        String json = "[NaN]";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.beginArray();
+        try {
+            reader.skipValue();
+            fail();
+        } catch (MalformedJsonException expected) {
+        }
+    }
+
+    public void testLongs() throws IOException {
+        String json = "[0,0,0,"
+                + "1,1,1,"
+                + "-1,-1,-1,"
+                + "-9223372036854775808,"
+                + "9223372036854775807]";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.beginArray();
+        assertEquals(0L, reader.nextLong());
+        assertEquals(0, reader.nextInt());
+        assertEquals(0.0, reader.nextDouble());
+        assertEquals(1L, reader.nextLong());
+        assertEquals(1, reader.nextInt());
+        assertEquals(1.0, reader.nextDouble());
+        assertEquals(-1L, reader.nextLong());
+        assertEquals(-1, reader.nextInt());
+        assertEquals(-1.0, reader.nextDouble());
+        try {
+            reader.nextInt();
+            fail();
+        } catch (NumberFormatException expected) {
+        }
+        assertEquals(Long.MIN_VALUE, reader.nextLong());
+        try {
+            reader.nextInt();
+            fail();
+        } catch (NumberFormatException expected) {
+        }
+        assertEquals(Long.MAX_VALUE, reader.nextLong());
+        reader.endArray();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void disabled_testNumberWithOctalPrefix() throws IOException {
+        String json = "[01]";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.beginArray();
+        try {
+            reader.peek();
+            fail();
+        } catch (MalformedJsonException expected) {
+        }
+        try {
+            reader.nextInt();
+            fail();
+        } catch (MalformedJsonException expected) {
+        }
+        try {
+            reader.nextLong();
+            fail();
+        } catch (MalformedJsonException expected) {
+        }
+        try {
+            reader.nextDouble();
+            fail();
+        } catch (MalformedJsonException expected) {
+        }
+        assertEquals("01", reader.nextString());
+        reader.endArray();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testBooleans() throws IOException {
+        JsonReader reader = new JsonReader(reader("[true,false]"));
+        reader.beginArray();
+        assertEquals(true, reader.nextBoolean());
+        assertEquals(false, reader.nextBoolean());
+        reader.endArray();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testPeekingUnquotedStringsPrefixedWithBooleans() throws IOException {
+        JsonReader reader = new JsonReader(reader("[truey]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(STRING, reader.peek());
+        try {
+            reader.nextBoolean();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+        assertEquals("truey", reader.nextString());
+        reader.endArray();
+    }
+
+    public void testMalformedNumbers() throws IOException {
+        assertNotANumber("-");
+        assertNotANumber(".");
+
+        // exponent lacks digit
+        assertNotANumber("e");
+        assertNotANumber("0e");
+        assertNotANumber(".e");
+        assertNotANumber("0.e");
+        assertNotANumber("-.0e");
+
+        // no integer
+        assertNotANumber("e1");
+        assertNotANumber(".e1");
+        assertNotANumber("-e1");
+
+        // trailing characters
+        assertNotANumber("1x");
+        assertNotANumber("1.1x");
+        assertNotANumber("1e1x");
+        assertNotANumber("1ex");
+        assertNotANumber("1.1ex");
+        assertNotANumber("1.1e1x");
+
+        // fraction has no digit
+        assertNotANumber("0.");
+        assertNotANumber("-0.");
+        assertNotANumber("0.e1");
+        assertNotANumber("-0.e1");
+
+        // no leading digit
+        assertNotANumber(".0");
+        assertNotANumber("-.0");
+        assertNotANumber(".0e1");
+        assertNotANumber("-.0e1");
+    }
+
+    private void assertNotANumber(String s) throws IOException {
+        JsonReader reader = new JsonReader(reader("[" + s + "]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(JsonToken.STRING, reader.peek());
+        assertEquals(s, reader.nextString());
+        reader.endArray();
+    }
+
+    public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException {
+        JsonReader reader = new JsonReader(reader("[12.34e5x]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(STRING, reader.peek());
+        try {
+            reader.nextInt();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+        assertEquals("12.34e5x", reader.nextString());
+    }
+
+    public void testPeekLongMinValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("[-9223372036854775808]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(NUMBER, reader.peek());
+        assertEquals(-9223372036854775808L, reader.nextLong());
+    }
+
+    public void testPeekLongMaxValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("[9223372036854775807]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(NUMBER, reader.peek());
+        assertEquals(9223372036854775807L, reader.nextLong());
+    }
+
+    public void testLongLargerThanMaxLongThatWrapsAround() throws IOException {
+        JsonReader reader = new JsonReader(reader("[22233720368547758070]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(NUMBER, reader.peek());
+        try {
+            reader.nextLong();
+            fail();
+        } catch (NumberFormatException expected) {
+        }
+    }
+
+    public void testLongLargerThanMinLongThatWrapsAround() throws IOException {
+        JsonReader reader = new JsonReader(reader("[-22233720368547758070]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(NUMBER, reader.peek());
+        try {
+            reader.nextLong();
+            fail();
+        } catch (NumberFormatException expected) {
+        }
+    }
+
+    /**
+     * This test fails because there's no double for 9223372036854775808, and our
+     * long parsing uses Double.parseDouble() for fractional values.
+     */
+    public void disabled_testPeekLargerThanLongMaxValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("[9223372036854775808]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(NUMBER, reader.peek());
+        try {
+            reader.nextLong();
+            fail();
+        } catch (NumberFormatException e) {
+        }
+    }
+
+    /**
+     * This test fails because there's no double for -9223372036854775809, and our
+     * long parsing uses Double.parseDouble() for fractional values.
+     */
+    public void disabled_testPeekLargerThanLongMinValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("[-9223372036854775809]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(NUMBER, reader.peek());
+        try {
+            reader.nextLong();
+            fail();
+        } catch (NumberFormatException expected) {
+        }
+        assertEquals(-9223372036854775809d, reader.nextDouble());
+    }
+
+    /**
+     * This test fails because there's no double for 9223372036854775806, and
+     * our long parsing uses Double.parseDouble() for fractional values.
+     */
+    public void disabled_testHighPrecisionLong() throws IOException {
+        String json = "[9223372036854775806.000]";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.beginArray();
+        assertEquals(9223372036854775806L, reader.nextLong());
+        reader.endArray();
+    }
+
+    public void testPeekMuchLargerThanLongMinValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("[-92233720368547758080]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(NUMBER, reader.peek());
+        try {
+            reader.nextLong();
+            fail();
+        } catch (NumberFormatException expected) {
+        }
+        assertEquals(-92233720368547758080d, reader.nextDouble());
+    }
+
+    public void testQuotedNumberWithEscape() throws IOException {
+        JsonReader reader = new JsonReader(reader("[\"12\u00334\"]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(STRING, reader.peek());
+        assertEquals(1234, reader.nextInt());
+    }
+
+    public void testMixedCaseLiterals() throws IOException {
+        JsonReader reader = new JsonReader(reader("[True,TruE,False,FALSE,NULL,nulL]"));
+        reader.beginArray();
+        assertEquals(true, reader.nextBoolean());
+        assertEquals(true, reader.nextBoolean());
+        assertEquals(false, reader.nextBoolean());
+        assertEquals(false, reader.nextBoolean());
+        reader.nextNull();
+        reader.nextNull();
+        reader.endArray();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testMissingValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("{\"a\":}"));
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        try {
+            reader.nextString();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testPrematureEndOfInput() throws IOException {
+        JsonReader reader = new JsonReader(reader("{\"a\":true,"));
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        assertEquals(true, reader.nextBoolean());
+        try {
+            reader.nextName();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testPrematurelyClosed() throws IOException {
+        try {
+            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
+            reader.beginObject();
+            reader.close();
+            reader.nextName();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+
+        try {
+            JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
+            reader.close();
+            reader.beginObject();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+
+        try {
+            JsonReader reader = new JsonReader(reader("{\"a\":true}"));
+            reader.beginObject();
+            reader.nextName();
+            reader.peek();
+            reader.close();
+            reader.nextBoolean();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testNextFailuresDoNotAdvance() throws IOException {
+        JsonReader reader = new JsonReader(reader("{\"a\":true}"));
+        reader.beginObject();
+        try {
+            reader.nextString();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+        assertEquals("a", reader.nextName());
+        try {
+            reader.nextName();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+        try {
+            reader.beginArray();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+        try {
+            reader.endArray();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+        try {
+            reader.beginObject();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+        try {
+            reader.endObject();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+        assertEquals(true, reader.nextBoolean());
+        try {
+            reader.nextString();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+        try {
+            reader.nextName();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+        try {
+            reader.beginArray();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+        try {
+            reader.endArray();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+        reader.endObject();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+        reader.close();
+    }
+
+    public void testIntegerMismatchFailuresDoNotAdvance() throws IOException {
+        JsonReader reader = new JsonReader(reader("[1.5]"));
+        reader.beginArray();
+        try {
+            reader.nextInt();
+            fail();
+        } catch (NumberFormatException expected) {
+        }
+        assertEquals(1.5d, reader.nextDouble());
+        reader.endArray();
+    }
+
+    public void testStringNullIsNotNull() throws IOException {
+        JsonReader reader = new JsonReader(reader("[\"null\"]"));
+        reader.beginArray();
+        try {
+            reader.nextNull();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testNullLiteralIsNotAString() throws IOException {
+        JsonReader reader = new JsonReader(reader("[null]"));
+        reader.beginArray();
+        try {
+            reader.nextString();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testStrictNameValueSeparator() throws IOException {
+        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        try {
+            reader.nextBoolean();
+            fail();
+        } catch (IOException expected) {
+        }
+
+        reader = new JsonReader(reader("{\"a\"=>true}"));
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        try {
+            reader.nextBoolean();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testLenientNameValueSeparator() throws IOException {
+        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
+        reader.setLenient(true);
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        assertEquals(true, reader.nextBoolean());
+
+        reader = new JsonReader(reader("{\"a\"=>true}"));
+        reader.setLenient(true);
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        assertEquals(true, reader.nextBoolean());
+    }
+
+    public void testStrictNameValueSeparatorWithSkipValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        try {
+            reader.skipValue();
+            fail();
+        } catch (IOException expected) {
+        }
+
+        reader = new JsonReader(reader("{\"a\"=>true}"));
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        try {
+            reader.skipValue();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testCommentsInStringValue() throws Exception {
+        JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
+        reader.beginArray();
+        assertEquals("// comment", reader.nextString());
+        reader.endArray();
+
+        reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        assertEquals("#someComment", reader.nextString());
+        reader.endObject();
+
+        reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
+        reader.beginObject();
+        assertEquals("#//a", reader.nextName());
+        assertEquals("#some //Comment", reader.nextString());
+        reader.endObject();
+    }
+
+    public void testStrictComments() throws IOException {
+        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
+        reader.beginArray();
+        try {
+            reader.nextBoolean();
+            fail();
+        } catch (IOException expected) {
+        }
+
+        reader = new JsonReader(reader("[# comment \n true]"));
+        reader.beginArray();
+        try {
+            reader.nextBoolean();
+            fail();
+        } catch (IOException expected) {
+        }
+
+        reader = new JsonReader(reader("[/* comment */ true]"));
+        reader.beginArray();
+        try {
+            reader.nextBoolean();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testLenientComments() throws IOException {
+        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(true, reader.nextBoolean());
+
+        reader = new JsonReader(reader("[# comment \n true]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(true, reader.nextBoolean());
+
+        reader = new JsonReader(reader("[/* comment */ true]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(true, reader.nextBoolean());
+    }
+
+    public void testStrictCommentsWithSkipValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("[// comment \n true]"));
+        reader.beginArray();
+        try {
+            reader.skipValue();
+            fail();
+        } catch (IOException expected) {
+        }
+
+        reader = new JsonReader(reader("[# comment \n true]"));
+        reader.beginArray();
+        try {
+            reader.skipValue();
+            fail();
+        } catch (IOException expected) {
+        }
+
+        reader = new JsonReader(reader("[/* comment */ true]"));
+        reader.beginArray();
+        try {
+            reader.skipValue();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testStrictUnquotedNames() throws IOException {
+        JsonReader reader = new JsonReader(reader("{a:true}"));
+        reader.beginObject();
+        try {
+            reader.nextName();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testLenientUnquotedNames() throws IOException {
+        JsonReader reader = new JsonReader(reader("{a:true}"));
+        reader.setLenient(true);
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+    }
+
+    public void testStrictUnquotedNamesWithSkipValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("{a:true}"));
+        reader.beginObject();
+        try {
+            reader.skipValue();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testStrictSingleQuotedNames() throws IOException {
+        JsonReader reader = new JsonReader(reader("{'a':true}"));
+        reader.beginObject();
+        try {
+            reader.nextName();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testLenientSingleQuotedNames() throws IOException {
+        JsonReader reader = new JsonReader(reader("{'a':true}"));
+        reader.setLenient(true);
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+    }
+
+    public void testStrictSingleQuotedNamesWithSkipValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("{'a':true}"));
+        reader.beginObject();
+        try {
+            reader.skipValue();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testStrictUnquotedStrings() throws IOException {
+        JsonReader reader = new JsonReader(reader("[a]"));
+        reader.beginArray();
+        try {
+            reader.nextString();
+            fail();
+        } catch (MalformedJsonException expected) {
+        }
+    }
+
+    public void testStrictUnquotedStringsWithSkipValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("[a]"));
+        reader.beginArray();
+        try {
+            reader.skipValue();
+            fail();
+        } catch (MalformedJsonException expected) {
+        }
+    }
+
+    public void testLenientUnquotedStrings() throws IOException {
+        JsonReader reader = new JsonReader(reader("[a]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals("a", reader.nextString());
+    }
+
+    public void testStrictSingleQuotedStrings() throws IOException {
+        JsonReader reader = new JsonReader(reader("['a']"));
+        reader.beginArray();
+        try {
+            reader.nextString();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testLenientSingleQuotedStrings() throws IOException {
+        JsonReader reader = new JsonReader(reader("['a']"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals("a", reader.nextString());
+    }
+
+    public void testStrictSingleQuotedStringsWithSkipValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("['a']"));
+        reader.beginArray();
+        try {
+            reader.skipValue();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testStrictSemicolonDelimitedArray() throws IOException {
+        JsonReader reader = new JsonReader(reader("[true;true]"));
+        reader.beginArray();
+        try {
+            reader.nextBoolean();
+            reader.nextBoolean();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testLenientSemicolonDelimitedArray() throws IOException {
+        JsonReader reader = new JsonReader(reader("[true;true]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(true, reader.nextBoolean());
+        assertEquals(true, reader.nextBoolean());
+    }
+
+    public void testStrictSemicolonDelimitedArrayWithSkipValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("[true;true]"));
+        reader.beginArray();
+        try {
+            reader.skipValue();
+            reader.skipValue();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testStrictSemicolonDelimitedNameValuePair() throws IOException {
+        JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        try {
+            reader.nextBoolean();
+            reader.nextName();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testLenientSemicolonDelimitedNameValuePair() throws IOException {
+        JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
+        reader.setLenient(true);
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        assertEquals(true, reader.nextBoolean());
+        assertEquals("b", reader.nextName());
+    }
+
+    public void testStrictSemicolonDelimitedNameValuePairWithSkipValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        try {
+            reader.skipValue();
+            reader.skipValue();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testStrictUnnecessaryArraySeparators() throws IOException {
+        JsonReader reader = new JsonReader(reader("[true,,true]"));
+        reader.beginArray();
+        assertEquals(true, reader.nextBoolean());
+        try {
+            reader.nextNull();
+            fail();
+        } catch (IOException expected) {
+        }
+
+        reader = new JsonReader(reader("[,true]"));
+        reader.beginArray();
+        try {
+            reader.nextNull();
+            fail();
+        } catch (IOException expected) {
+        }
+
+        reader = new JsonReader(reader("[true,]"));
+        reader.beginArray();
+        assertEquals(true, reader.nextBoolean());
+        try {
+            reader.nextNull();
+            fail();
+        } catch (IOException expected) {
+        }
+
+        reader = new JsonReader(reader("[,]"));
+        reader.beginArray();
+        try {
+            reader.nextNull();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testLenientUnnecessaryArraySeparators() throws IOException {
+        JsonReader reader = new JsonReader(reader("[true,,true]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(true, reader.nextBoolean());
+        reader.nextNull();
+        assertEquals(true, reader.nextBoolean());
+        reader.endArray();
+
+        reader = new JsonReader(reader("[,true]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        reader.nextNull();
+        assertEquals(true, reader.nextBoolean());
+        reader.endArray();
+
+        reader = new JsonReader(reader("[true,]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(true, reader.nextBoolean());
+        reader.nextNull();
+        reader.endArray();
+
+        reader = new JsonReader(reader("[,]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        reader.nextNull();
+        reader.nextNull();
+        reader.endArray();
+    }
+
+    public void testStrictUnnecessaryArraySeparatorsWithSkipValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("[true,,true]"));
+        reader.beginArray();
+        assertEquals(true, reader.nextBoolean());
+        try {
+            reader.skipValue();
+            fail();
+        } catch (IOException expected) {
+        }
+
+        reader = new JsonReader(reader("[,true]"));
+        reader.beginArray();
+        try {
+            reader.skipValue();
+            fail();
+        } catch (IOException expected) {
+        }
+
+        reader = new JsonReader(reader("[true,]"));
+        reader.beginArray();
+        assertEquals(true, reader.nextBoolean());
+        try {
+            reader.skipValue();
+            fail();
+        } catch (IOException expected) {
+        }
+
+        reader = new JsonReader(reader("[,]"));
+        reader.beginArray();
+        try {
+            reader.skipValue();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testStrictMultipleTopLevelValues() throws IOException {
+        JsonReader reader = new JsonReader(reader("[] []"));
+        reader.beginArray();
+        reader.endArray();
+        try {
+            reader.peek();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testLenientMultipleTopLevelValues() throws IOException {
+        JsonReader reader = new JsonReader(reader("[] true {}"));
+        reader.setLenient(true);
+        reader.beginArray();
+        reader.endArray();
+        assertEquals(true, reader.nextBoolean());
+        reader.beginObject();
+        reader.endObject();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testStrictMultipleTopLevelValuesWithSkipValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("[] []"));
+        reader.beginArray();
+        reader.endArray();
+        try {
+            reader.skipValue();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testTopLevelValueTypes() throws IOException {
+        JsonReader reader1 = new JsonReader(reader("true"));
+        assertTrue(reader1.nextBoolean());
+        assertEquals(JsonToken.END_DOCUMENT, reader1.peek());
+
+        JsonReader reader2 = new JsonReader(reader("false"));
+        assertFalse(reader2.nextBoolean());
+        assertEquals(JsonToken.END_DOCUMENT, reader2.peek());
+
+        JsonReader reader3 = new JsonReader(reader("null"));
+        assertEquals(JsonToken.NULL, reader3.peek());
+        reader3.nextNull();
+        assertEquals(JsonToken.END_DOCUMENT, reader3.peek());
+
+        JsonReader reader4 = new JsonReader(reader("123"));
+        assertEquals(123, reader4.nextInt());
+        assertEquals(JsonToken.END_DOCUMENT, reader4.peek());
+
+        JsonReader reader5 = new JsonReader(reader("123.4"));
+        assertEquals(123.4, reader5.nextDouble());
+        assertEquals(JsonToken.END_DOCUMENT, reader5.peek());
+
+        JsonReader reader6 = new JsonReader(reader("\"a\""));
+        assertEquals("a", reader6.nextString());
+        assertEquals(JsonToken.END_DOCUMENT, reader6.peek());
+    }
+
+    public void testTopLevelValueTypeWithSkipValue() throws IOException {
+        JsonReader reader = new JsonReader(reader("true"));
+        reader.skipValue();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testStrictNonExecutePrefix() {
+        JsonReader reader = new JsonReader(reader(")]}'\n []"));
+        try {
+            reader.beginArray();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testStrictNonExecutePrefixWithSkipValue() {
+        JsonReader reader = new JsonReader(reader(")]}'\n []"));
+        try {
+            reader.skipValue();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testLenientNonExecutePrefix() throws IOException {
+        JsonReader reader = new JsonReader(reader(")]}'\n []"));
+        reader.setLenient(true);
+        reader.beginArray();
+        reader.endArray();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException {
+        JsonReader reader = new JsonReader(reader("\r\n \t)]}'\n []"));
+        reader.setLenient(true);
+        reader.beginArray();
+        reader.endArray();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testLenientPartialNonExecutePrefix() {
+        JsonReader reader = new JsonReader(reader(")]}' []"));
+        reader.setLenient(true);
+        try {
+            assertEquals(")", reader.nextString());
+            reader.nextString();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testBomIgnoredAsFirstCharacterOfDocument() throws IOException {
+        JsonReader reader = new JsonReader(reader("\ufeff[]"));
+        reader.beginArray();
+        reader.endArray();
+    }
+
+    public void testBomForbiddenAsOtherCharacterInDocument() throws IOException {
+        JsonReader reader = new JsonReader(reader("[\ufeff]"));
+        reader.beginArray();
+        try {
+            reader.endArray();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testFailWithPosition() throws IOException {
+        testFailWithPosition("Expected value at line 6 column 5 path $[1]",
+                "[\n\n\n\n\n\"a\",}]");
+    }
+
+    public void testFailWithPositionGreaterThanBufferSize() throws IOException {
+        String spaces = repeat(' ', 8192);
+        testFailWithPosition("Expected value at line 6 column 5 path $[1]",
+                "[\n\n" + spaces + "\n\n\n\"a\",}]");
+    }
+
+    public void testFailWithPositionOverSlashSlashEndOfLineComment() throws IOException {
+        testFailWithPosition("Expected value at line 5 column 6 path $[1]",
+                "\n// foo\n\n//bar\r\n[\"a\",}");
+    }
+
+    public void testFailWithPositionOverHashEndOfLineComment() throws IOException {
+        testFailWithPosition("Expected value at line 5 column 6 path $[1]",
+                "\n# foo\n\n#bar\r\n[\"a\",}");
+    }
+
+    public void testFailWithPositionOverCStyleComment() throws IOException {
+        testFailWithPosition("Expected value at line 6 column 12 path $[1]",
+                "\n\n/* foo\n*\n*\r\nbar */[\"a\",}");
+    }
+
+    public void testFailWithPositionOverQuotedString() throws IOException {
+        testFailWithPosition("Expected value at line 5 column 3 path $[1]",
+                "[\"foo\nbar\r\nbaz\n\",\n  }");
+    }
+
+    public void testFailWithPositionOverUnquotedString() throws IOException {
+        testFailWithPosition("Expected value at line 5 column 2 path $[1]", "[\n\nabcd\n\n,}");
+    }
+
+    public void testFailWithEscapedNewlineCharacter() throws IOException {
+        testFailWithPosition("Expected value at line 5 column 3 path $[1]", "[\n\n\"\\\n\n\",}");
+    }
+
+    public void testFailWithPositionIsOffsetByBom() throws IOException {
+        testFailWithPosition("Expected value at line 1 column 6 path $[1]",
+                "\ufeff[\"a\",}]");
+    }
+
+    private void testFailWithPosition(String message, String json) throws IOException {
+        // Validate that it works reading the string normally.
+        JsonReader reader1 = new JsonReader(reader(json));
+        reader1.setLenient(true);
+        reader1.beginArray();
+        reader1.nextString();
+        try {
+            reader1.peek();
+            fail();
+        } catch (IOException expected) {
+            assertEquals(message, expected.getMessage());
+        }
+
+        // Also validate that it works when skipping.
+        JsonReader reader2 = new JsonReader(reader(json));
+        reader2.setLenient(true);
+        reader2.beginArray();
+        reader2.skipValue();
+        try {
+            reader2.peek();
+            fail();
+        } catch (IOException expected) {
+            assertEquals(message, expected.getMessage());
+        }
+    }
+
+    public void testFailWithPositionDeepPath() throws IOException {
+        JsonReader reader = new JsonReader(reader("[1,{\"a\":[2,3,}"));
+        reader.beginArray();
+        reader.nextInt();
+        reader.beginObject();
+        reader.nextName();
+        reader.beginArray();
+        reader.nextInt();
+        reader.nextInt();
+        try {
+            reader.peek();
+            fail();
+        } catch (IOException expected) {
+            assertEquals("Expected value at line 1 column 14 path $[1].a[2]", expected.getMessage());
+        }
+    }
+
+    public void testStrictVeryLongNumber() throws IOException {
+        JsonReader reader = new JsonReader(reader("[0." + repeat('9', 8192) + "]"));
+        reader.beginArray();
+        try {
+            assertEquals(1d, reader.nextDouble());
+            fail();
+        } catch (MalformedJsonException expected) {
+        }
+    }
+
+    public void testLenientVeryLongNumber() throws IOException {
+        JsonReader reader = new JsonReader(reader("[0." + repeat('9', 8192) + "]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(JsonToken.STRING, reader.peek());
+        assertEquals(1d, reader.nextDouble());
+        reader.endArray();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testVeryLongUnquotedLiteral() throws IOException {
+        String literal = "a" + repeat('b', 8192) + "c";
+        JsonReader reader = new JsonReader(reader("[" + literal + "]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(literal, reader.nextString());
+        reader.endArray();
+    }
+
+    public void testDeeplyNestedArrays() throws IOException {
+        // this is nested 40 levels deep; Gson is tuned for nesting is 30 levels deep or fewer
+        JsonReader reader = new JsonReader(reader(
+                "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]"));
+        for (int i = 0; i < 40; i++) {
+            reader.beginArray();
+        }
+        assertEquals("$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]"
+                + "[0][0][0][0][0][0][0][0][0][0][0][0][0][0]", reader.getPath());
+        for (int i = 0; i < 40; i++) {
+            reader.endArray();
+        }
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testDeeplyNestedObjects() throws IOException {
+        // Build a JSON document structured like {"a":{"a":{"a":{"a":true}}}}, but 40 levels deep
+        String array = "{\"a\":%s}";
+        String json = "true";
+        for (int i = 0; i < 40; i++) {
+            json = String.format(array, json);
+        }
+
+        JsonReader reader = new JsonReader(reader(json));
+        for (int i = 0; i < 40; i++) {
+            reader.beginObject();
+            assertEquals("a", reader.nextName());
+        }
+        assertEquals("$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"
+                + ".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a", reader.getPath());
+        assertEquals(true, reader.nextBoolean());
+        for (int i = 0; i < 40; i++) {
+            reader.endObject();
+        }
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    // http://code.google.com/p/google-gson/issues/detail?id=409
+    public void testStringEndingInSlash() throws IOException {
+        JsonReader reader = new JsonReader(reader("/"));
+        reader.setLenient(true);
+        try {
+            reader.peek();
+            fail();
+        } catch (MalformedJsonException expected) {
+        }
+    }
+
+    public void testDocumentWithCommentEndingInSlash() throws IOException {
+        JsonReader reader = new JsonReader(reader("/* foo *//"));
+        reader.setLenient(true);
+        try {
+            reader.peek();
+            fail();
+        } catch (MalformedJsonException expected) {
+        }
+    }
+
+    public void testStringWithLeadingSlash() throws IOException {
+        JsonReader reader = new JsonReader(reader("/x"));
+        reader.setLenient(true);
+        try {
+            reader.peek();
+            fail();
+        } catch (MalformedJsonException expected) {
+        }
+    }
+
+    public void testUnterminatedObject() throws IOException {
+        JsonReader reader = new JsonReader(reader("{\"a\":\"android\"x"));
+        reader.setLenient(true);
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        assertEquals("android", reader.nextString());
+        try {
+            reader.peek();
+            fail();
+        } catch (MalformedJsonException expected) {
+        }
+    }
+
+    public void testVeryLongQuotedString() throws IOException {
+        char[] stringChars = new char[1024 * 16];
+        Arrays.fill(stringChars, 'x');
+        String string = new String(stringChars);
+        String json = "[\"" + string + "\"]";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.beginArray();
+        assertEquals(string, reader.nextString());
+        reader.endArray();
+    }
+
+    public void testVeryLongUnquotedString() throws IOException {
+        char[] stringChars = new char[1024 * 16];
+        Arrays.fill(stringChars, 'x');
+        String string = new String(stringChars);
+        String json = "[" + string + "]";
+        JsonReader reader = new JsonReader(reader(json));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(string, reader.nextString());
+        reader.endArray();
+    }
+
+    public void testVeryLongUnterminatedString() throws IOException {
+        char[] stringChars = new char[1024 * 16];
+        Arrays.fill(stringChars, 'x');
+        String string = new String(stringChars);
+        String json = "[" + string;
+        JsonReader reader = new JsonReader(reader(json));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(string, reader.nextString());
+        try {
+            reader.peek();
+            fail();
+        } catch (EOFException expected) {
+        }
+    }
+
+    public void testSkipVeryLongUnquotedString() throws IOException {
+        JsonReader reader = new JsonReader(reader("[" + repeat('x', 8192) + "]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        reader.skipValue();
+        reader.endArray();
+    }
+
+    public void testSkipTopLevelUnquotedString() throws IOException {
+        JsonReader reader = new JsonReader(reader(repeat('x', 8192)));
+        reader.setLenient(true);
+        reader.skipValue();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testSkipVeryLongQuotedString() throws IOException {
+        JsonReader reader = new JsonReader(reader("[\"" + repeat('x', 8192) + "\"]"));
+        reader.beginArray();
+        reader.skipValue();
+        reader.endArray();
+    }
+
+    public void testSkipTopLevelQuotedString() throws IOException {
+        JsonReader reader = new JsonReader(reader("\"" + repeat('x', 8192) + "\""));
+        reader.setLenient(true);
+        reader.skipValue();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testStringAsNumberWithTruncatedExponent() throws IOException {
+        JsonReader reader = new JsonReader(reader("[123e]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(STRING, reader.peek());
+    }
+
+    public void testStringAsNumberWithDigitAndNonDigitExponent() throws IOException {
+        JsonReader reader = new JsonReader(reader("[123e4b]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(STRING, reader.peek());
+    }
+
+    public void testStringAsNumberWithNonDigitExponent() throws IOException {
+        JsonReader reader = new JsonReader(reader("[123eb]"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(STRING, reader.peek());
+    }
+
+    public void testEmptyStringName() throws IOException {
+        JsonReader reader = new JsonReader(reader("{\"\":true}"));
+        reader.setLenient(true);
+        assertEquals(BEGIN_OBJECT, reader.peek());
+        reader.beginObject();
+        assertEquals(NAME, reader.peek());
+        assertEquals("", reader.nextName());
+        assertEquals(JsonToken.BOOLEAN, reader.peek());
+        assertEquals(true, reader.nextBoolean());
+        assertEquals(JsonToken.END_OBJECT, reader.peek());
+        reader.endObject();
+        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
+    }
+
+    public void testStrictExtraCommasInMaps() throws IOException {
+        JsonReader reader = new JsonReader(reader("{\"a\":\"b\",}"));
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        assertEquals("b", reader.nextString());
+        try {
+            reader.peek();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    public void testLenientExtraCommasInMaps() throws IOException {
+        JsonReader reader = new JsonReader(reader("{\"a\":\"b\",}"));
+        reader.setLenient(true);
+        reader.beginObject();
+        assertEquals("a", reader.nextName());
+        assertEquals("b", reader.nextString());
+        try {
+            reader.peek();
+            fail();
+        } catch (IOException expected) {
+        }
+    }
+
+    private String repeat(char c, int count) {
+        char[] array = new char[count];
+        Arrays.fill(array, c);
+        return new String(array);
+    }
+
+    public void testMalformedDocuments() throws IOException {
+        assertDocument("{]", BEGIN_OBJECT, IOException.class);
+        assertDocument("{,", BEGIN_OBJECT, IOException.class);
+        assertDocument("{{", BEGIN_OBJECT, IOException.class);
+        assertDocument("{[", BEGIN_OBJECT, IOException.class);
+        assertDocument("{:", BEGIN_OBJECT, IOException.class);
+        assertDocument("{\"name\",", BEGIN_OBJECT, NAME, IOException.class);
+        assertDocument("{\"name\",", BEGIN_OBJECT, NAME, IOException.class);
+        assertDocument("{\"name\":}", BEGIN_OBJECT, NAME, IOException.class);
+        assertDocument("{\"name\"::", BEGIN_OBJECT, NAME, IOException.class);
+        assertDocument("{\"name\":,", BEGIN_OBJECT, NAME, IOException.class);
+        assertDocument("{\"name\"=}", BEGIN_OBJECT, NAME, IOException.class);
+        assertDocument("{\"name\"=>}", BEGIN_OBJECT, NAME, IOException.class);
+        assertDocument("{\"name\"=>\"string\":", BEGIN_OBJECT, NAME, STRING, IOException.class);
+        assertDocument("{\"name\"=>\"string\"=", BEGIN_OBJECT, NAME, STRING, IOException.class);
+        assertDocument("{\"name\"=>\"string\"=>", BEGIN_OBJECT, NAME, STRING, IOException.class);
+        assertDocument("{\"name\"=>\"string\",", BEGIN_OBJECT, NAME, STRING, IOException.class);
+        assertDocument("{\"name\"=>\"string\",\"name\"", BEGIN_OBJECT, NAME, STRING, NAME);
+        assertDocument("[}", BEGIN_ARRAY, IOException.class);
+        assertDocument("[,]", BEGIN_ARRAY, NULL, NULL, END_ARRAY);
+        assertDocument("{", BEGIN_OBJECT, IOException.class);
+        assertDocument("{\"name\"", BEGIN_OBJECT, NAME, IOException.class);
+        assertDocument("{\"name\",", BEGIN_OBJECT, NAME, IOException.class);
+        assertDocument("{'name'", BEGIN_OBJECT, NAME, IOException.class);
+        assertDocument("{'name',", BEGIN_OBJECT, NAME, IOException.class);
+        assertDocument("{name", BEGIN_OBJECT, NAME, IOException.class);
+        assertDocument("[", BEGIN_ARRAY, IOException.class);
+        assertDocument("[string", BEGIN_ARRAY, STRING, IOException.class);
+        assertDocument("[\"string\"", BEGIN_ARRAY, STRING, IOException.class);
+        assertDocument("['string'", BEGIN_ARRAY, STRING, IOException.class);
+        assertDocument("[123", BEGIN_ARRAY, NUMBER, IOException.class);
+        assertDocument("[123,", BEGIN_ARRAY, NUMBER, IOException.class);
+        assertDocument("{\"name\":123", BEGIN_OBJECT, NAME, NUMBER, IOException.class);
+        assertDocument("{\"name\":123,", BEGIN_OBJECT, NAME, NUMBER, IOException.class);
+        assertDocument("{\"name\":\"string\"", BEGIN_OBJECT, NAME, STRING, IOException.class);
+        assertDocument("{\"name\":\"string\",", BEGIN_OBJECT, NAME, STRING, IOException.class);
+        assertDocument("{\"name\":'string'", BEGIN_OBJECT, NAME, STRING, IOException.class);
+        assertDocument("{\"name\":'string',", BEGIN_OBJECT, NAME, STRING, IOException.class);
+        assertDocument("{\"name\":false", BEGIN_OBJECT, NAME, BOOLEAN, IOException.class);
+        assertDocument("{\"name\":false,,", BEGIN_OBJECT, NAME, BOOLEAN, IOException.class);
+    }
+
+    /**
+     * This test behave slightly differently in Gson 2.2 and earlier. It fails
+     * during peek rather than during nextString().
+     */
+    public void testUnterminatedStringFailure() throws IOException {
+        JsonReader reader = new JsonReader(reader("[\"string"));
+        reader.setLenient(true);
+        reader.beginArray();
+        assertEquals(JsonToken.STRING, reader.peek());
+        try {
+            reader.nextString();
+            fail();
+        } catch (MalformedJsonException expected) {
+        }
+    }
+
+    private void assertDocument(String document, Object... expectations) throws IOException {
+        JsonReader reader = new JsonReader(reader(document));
+        reader.setLenient(true);
+        for (Object expectation : expectations) {
+            if (expectation == BEGIN_OBJECT) {
+                reader.beginObject();
+            } else if (expectation == BEGIN_ARRAY) {
+                reader.beginArray();
+            } else if (expectation == END_OBJECT) {
+                reader.endObject();
+            } else if (expectation == END_ARRAY) {
+                reader.endArray();
+            } else if (expectation == NAME) {
+                assertEquals("name", reader.nextName());
+            } else if (expectation == BOOLEAN) {
+                assertEquals(false, reader.nextBoolean());
+            } else if (expectation == STRING) {
+                assertEquals("string", reader.nextString());
+            } else if (expectation == NUMBER) {
+                assertEquals(123, reader.nextInt());
+            } else if (expectation == NULL) {
+                reader.nextNull();
+            } else if (expectation == IOException.class) {
+                try {
+                    reader.peek();
+                    fail();
+                } catch (IOException expected) {
+                }
+            } else {
+                throw new AssertionError();
+            }
+        }
+    }
+
+    /**
+     * Returns a reader that returns one character at a time.
+     */
+    private Reader reader(final String s) {
+    /* if (true) */
+        return new StringReader(s);
+    /* return new Reader() {
+      int position = 0;
+      @Override public int read(char[] buffer, int offset, int count) throws IOException {
+        if (position == s.length()) {
+          return -1;
+        } else if (count > 0) {
+          buffer[offset] = s.charAt(position++);
+          return 1;
+        } else {
+          throw new IllegalArgumentException();
+        }
+      }
+      @Override public void close() throws IOException {
+      }
+    }; */
+    }
+}
diff --git a/gson/src/test/java/com/solidfire/gson/stream/JsonWriterTest.java b/gson/src/test/java/com/solidfire/gson/stream/JsonWriterTest.java
new file mode 100644
index 000000000..60d3eae51
--- /dev/null
+++ b/gson/src/test/java/com/solidfire/gson/stream/JsonWriterTest.java
@@ -0,0 +1,613 @@
+/*
+ * Copyright (C) 2010 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.solidfire.gson.stream;
+
+import junit.framework.TestCase;
+
+import java.io.IOException;
+import java.io.StringWriter;
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
+@SuppressWarnings("resource")
+public final class JsonWriterTest extends TestCase {
+
+    public void testTopLevelValueTypes() throws IOException {
+        StringWriter string1 = new StringWriter();
+        JsonWriter writer1 = new JsonWriter(string1);
+        writer1.value(true);
+        writer1.close();
+        assertEquals("true", string1.toString());
+
+        StringWriter string2 = new StringWriter();
+        JsonWriter writer2 = new JsonWriter(string2);
+        writer2.nullValue();
+        writer2.close();
+        assertEquals("null", string2.toString());
+
+        StringWriter string3 = new StringWriter();
+        JsonWriter writer3 = new JsonWriter(string3);
+        writer3.value(123);
+        writer3.close();
+        assertEquals("123", string3.toString());
+
+        StringWriter string4 = new StringWriter();
+        JsonWriter writer4 = new JsonWriter(string4);
+        writer4.value(123.4);
+        writer4.close();
+        assertEquals("123.4", string4.toString());
+
+        StringWriter string5 = new StringWriter();
+        JsonWriter writert = new JsonWriter(string5);
+        writert.value("a");
+        writert.close();
+        assertEquals("\"a\"", string5.toString());
+    }
+
+    public void testInvalidTopLevelTypes() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.name("hello");
+        try {
+            jsonWriter.value("world");
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testTwoNames() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginObject();
+        jsonWriter.name("a");
+        try {
+            jsonWriter.name("a");
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testNameWithoutValue() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginObject();
+        jsonWriter.name("a");
+        try {
+            jsonWriter.endObject();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testValueWithoutName() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginObject();
+        try {
+            jsonWriter.value(true);
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testMultipleTopLevelValues() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginArray().endArray();
+        try {
+            jsonWriter.beginArray();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testBadNestingObject() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginArray();
+        jsonWriter.beginObject();
+        try {
+            jsonWriter.endArray();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testBadNestingArray() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginArray();
+        jsonWriter.beginArray();
+        try {
+            jsonWriter.endObject();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testNullName() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginObject();
+        try {
+            jsonWriter.name(null);
+            fail();
+        } catch (NullPointerException expected) {
+        }
+    }
+
+    public void testNullStringValue() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginObject();
+        jsonWriter.name("a");
+        jsonWriter.value((String) null);
+        jsonWriter.endObject();
+        assertEquals("{\"a\":null}", stringWriter.toString());
+    }
+
+    public void testJsonValue() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginObject();
+        jsonWriter.name("a");
+        jsonWriter.jsonValue("{\"b\":true}");
+        jsonWriter.name("c");
+        jsonWriter.value(1);
+        jsonWriter.endObject();
+        assertEquals("{\"a\":{\"b\":true},\"c\":1}", stringWriter.toString());
+    }
+
+    public void testNonFiniteDoubles() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginArray();
+        try {
+            jsonWriter.value(Double.NaN);
+            fail();
+        } catch (IllegalArgumentException expected) {
+        }
+        try {
+            jsonWriter.value(Double.NEGATIVE_INFINITY);
+            fail();
+        } catch (IllegalArgumentException expected) {
+        }
+        try {
+            jsonWriter.value(Double.POSITIVE_INFINITY);
+            fail();
+        } catch (IllegalArgumentException expected) {
+        }
+    }
+
+    public void testNonFiniteBoxedDoubles() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginArray();
+        try {
+            jsonWriter.value(new Double(Double.NaN));
+            fail();
+        } catch (IllegalArgumentException expected) {
+        }
+        try {
+            jsonWriter.value(new Double(Double.NEGATIVE_INFINITY));
+            fail();
+        } catch (IllegalArgumentException expected) {
+        }
+        try {
+            jsonWriter.value(new Double(Double.POSITIVE_INFINITY));
+            fail();
+        } catch (IllegalArgumentException expected) {
+        }
+    }
+
+    public void testDoubles() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginArray();
+        jsonWriter.value(-0.0);
+        jsonWriter.value(1.0);
+        jsonWriter.value(Double.MAX_VALUE);
+        jsonWriter.value(Double.MIN_VALUE);
+        jsonWriter.value(0.0);
+        jsonWriter.value(-0.5);
+        jsonWriter.value(2.2250738585072014E-308);
+        jsonWriter.value(Math.PI);
+        jsonWriter.value(Math.E);
+        jsonWriter.endArray();
+        jsonWriter.close();
+        assertEquals("[-0.0,"
+                + "1.0,"
+                + "1.7976931348623157E308,"
+                + "4.9E-324,"
+                + "0.0,"
+                + "-0.5,"
+                + "2.2250738585072014E-308,"
+                + "3.141592653589793,"
+                + "2.718281828459045]", stringWriter.toString());
+    }
+
+    public void testLongs() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginArray();
+        jsonWriter.value(0);
+        jsonWriter.value(1);
+        jsonWriter.value(-1);
+        jsonWriter.value(Long.MIN_VALUE);
+        jsonWriter.value(Long.MAX_VALUE);
+        jsonWriter.endArray();
+        jsonWriter.close();
+        assertEquals("[0,"
+                + "1,"
+                + "-1,"
+                + "-9223372036854775808,"
+                + "9223372036854775807]", stringWriter.toString());
+    }
+
+    public void testNumbers() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginArray();
+        jsonWriter.value(new BigInteger("0"));
+        jsonWriter.value(new BigInteger("9223372036854775808"));
+        jsonWriter.value(new BigInteger("-9223372036854775809"));
+        jsonWriter.value(new BigDecimal("3.141592653589793238462643383"));
+        jsonWriter.endArray();
+        jsonWriter.close();
+        assertEquals("[0,"
+                + "9223372036854775808,"
+                + "-9223372036854775809,"
+                + "3.141592653589793238462643383]", stringWriter.toString());
+    }
+
+    public void testBooleans() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginArray();
+        jsonWriter.value(true);
+        jsonWriter.value(false);
+        jsonWriter.endArray();
+        assertEquals("[true,false]", stringWriter.toString());
+    }
+
+    public void testNulls() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginArray();
+        jsonWriter.nullValue();
+        jsonWriter.endArray();
+        assertEquals("[null]", stringWriter.toString());
+    }
+
+    public void testStrings() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginArray();
+        jsonWriter.value("a");
+        jsonWriter.value("a\"");
+        jsonWriter.value("\"");
+        jsonWriter.value(":");
+        jsonWriter.value(",");
+        jsonWriter.value("\b");
+        jsonWriter.value("\f");
+        jsonWriter.value("\n");
+        jsonWriter.value("\r");
+        jsonWriter.value("\t");
+        jsonWriter.value(" ");
+        jsonWriter.value("\\");
+        jsonWriter.value("{");
+        jsonWriter.value("}");
+        jsonWriter.value("[");
+        jsonWriter.value("]");
+        jsonWriter.value("\0");
+        jsonWriter.value("\u0019");
+        jsonWriter.endArray();
+        assertEquals("[\"a\","
+                + "\"a\\\"\","
+                + "\"\\\"\","
+                + "\":\","
+                + "\",\","
+                + "\"\\b\","
+                + "\"\\f\","
+                + "\"\\n\","
+                + "\"\\r\","
+                + "\"\\t\","
+                + "\" \","
+                + "\"\\\\\","
+                + "\"{\","
+                + "\"}\","
+                + "\"[\","
+                + "\"]\","
+                + "\"\\u0000\","
+                + "\"\\u0019\"]", stringWriter.toString());
+    }
+
+    public void testUnicodeLineBreaksEscaped() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginArray();
+        jsonWriter.value("\u2028 \u2029");
+        jsonWriter.endArray();
+        assertEquals("[\"\\u2028 \\u2029\"]", stringWriter.toString());
+    }
+
+    public void testEmptyArray() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginArray();
+        jsonWriter.endArray();
+        assertEquals("[]", stringWriter.toString());
+    }
+
+    public void testEmptyObject() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginObject();
+        jsonWriter.endObject();
+        assertEquals("{}", stringWriter.toString());
+    }
+
+    public void testObjectsInArrays() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginArray();
+        jsonWriter.beginObject();
+        jsonWriter.name("a").value(5);
+        jsonWriter.name("b").value(false);
+        jsonWriter.endObject();
+        jsonWriter.beginObject();
+        jsonWriter.name("c").value(6);
+        jsonWriter.name("d").value(true);
+        jsonWriter.endObject();
+        jsonWriter.endArray();
+        assertEquals("[{\"a\":5,\"b\":false},"
+                + "{\"c\":6,\"d\":true}]", stringWriter.toString());
+    }
+
+    public void testArraysInObjects() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginObject();
+        jsonWriter.name("a");
+        jsonWriter.beginArray();
+        jsonWriter.value(5);
+        jsonWriter.value(false);
+        jsonWriter.endArray();
+        jsonWriter.name("b");
+        jsonWriter.beginArray();
+        jsonWriter.value(6);
+        jsonWriter.value(true);
+        jsonWriter.endArray();
+        jsonWriter.endObject();
+        assertEquals("{\"a\":[5,false],"
+                + "\"b\":[6,true]}", stringWriter.toString());
+    }
+
+    public void testDeepNestingArrays() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        for (int i = 0; i < 20; i++) {
+            jsonWriter.beginArray();
+        }
+        for (int i = 0; i < 20; i++) {
+            jsonWriter.endArray();
+        }
+        assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString());
+    }
+
+    public void testDeepNestingObjects() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginObject();
+        for (int i = 0; i < 20; i++) {
+            jsonWriter.name("a");
+            jsonWriter.beginObject();
+        }
+        for (int i = 0; i < 20; i++) {
+            jsonWriter.endObject();
+        }
+        jsonWriter.endObject();
+        assertEquals("{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":"
+                + "{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{\"a\":{"
+                + "}}}}}}}}}}}}}}}}}}}}}", stringWriter.toString());
+    }
+
+    public void testRepeatedName() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.beginObject();
+        jsonWriter.name("a").value(true);
+        jsonWriter.name("a").value(false);
+        jsonWriter.endObject();
+        // JsonWriter doesn't attempt to detect duplicate names
+        assertEquals("{\"a\":true,\"a\":false}", stringWriter.toString());
+    }
+
+    public void testPrettyPrintObject() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.setIndent("   ");
+
+        jsonWriter.beginObject();
+        jsonWriter.name("a").value(true);
+        jsonWriter.name("b").value(false);
+        jsonWriter.name("c").value(5.0);
+        jsonWriter.name("e").nullValue();
+        jsonWriter.name("f").beginArray();
+        jsonWriter.value(6.0);
+        jsonWriter.value(7.0);
+        jsonWriter.endArray();
+        jsonWriter.name("g").beginObject();
+        jsonWriter.name("h").value(8.0);
+        jsonWriter.name("i").value(9.0);
+        jsonWriter.endObject();
+        jsonWriter.endObject();
+
+        String expected = "{\n"
+                + "   \"a\": true,\n"
+                + "   \"b\": false,\n"
+                + "   \"c\": 5.0,\n"
+                + "   \"e\": null,\n"
+                + "   \"f\": [\n"
+                + "      6.0,\n"
+                + "      7.0\n"
+                + "   ],\n"
+                + "   \"g\": {\n"
+                + "      \"h\": 8.0,\n"
+                + "      \"i\": 9.0\n"
+                + "   }\n"
+                + "}";
+        assertEquals(expected, stringWriter.toString());
+    }
+
+    public void testPrettyPrintArray() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter jsonWriter = new JsonWriter(stringWriter);
+        jsonWriter.setIndent("   ");
+
+        jsonWriter.beginArray();
+        jsonWriter.value(true);
+        jsonWriter.value(false);
+        jsonWriter.value(5.0);
+        jsonWriter.nullValue();
+        jsonWriter.beginObject();
+        jsonWriter.name("a").value(6.0);
+        jsonWriter.name("b").value(7.0);
+        jsonWriter.endObject();
+        jsonWriter.beginArray();
+        jsonWriter.value(8.0);
+        jsonWriter.value(9.0);
+        jsonWriter.endArray();
+        jsonWriter.endArray();
+
+        String expected = "[\n"
+                + "   true,\n"
+                + "   false,\n"
+                + "   5.0,\n"
+                + "   null,\n"
+                + "   {\n"
+                + "      \"a\": 6.0,\n"
+                + "      \"b\": 7.0\n"
+                + "   },\n"
+                + "   [\n"
+                + "      8.0,\n"
+                + "      9.0\n"
+                + "   ]\n"
+                + "]";
+        assertEquals(expected, stringWriter.toString());
+    }
+
+    public void testLenientWriterPermitsMultipleTopLevelValues() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter writer = new JsonWriter(stringWriter);
+        writer.setLenient(true);
+        writer.beginArray();
+        writer.endArray();
+        writer.beginArray();
+        writer.endArray();
+        writer.close();
+        assertEquals("[][]", stringWriter.toString());
+    }
+
+    public void testStrictWriterDoesNotPermitMultipleTopLevelValues() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter writer = new JsonWriter(stringWriter);
+        writer.beginArray();
+        writer.endArray();
+        try {
+            writer.beginArray();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testClosedWriterThrowsOnStructure() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter writer = new JsonWriter(stringWriter);
+        writer.beginArray();
+        writer.endArray();
+        writer.close();
+        try {
+            writer.beginArray();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+        try {
+            writer.endArray();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+        try {
+            writer.beginObject();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+        try {
+            writer.endObject();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testClosedWriterThrowsOnName() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter writer = new JsonWriter(stringWriter);
+        writer.beginArray();
+        writer.endArray();
+        writer.close();
+        try {
+            writer.name("a");
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testClosedWriterThrowsOnValue() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter writer = new JsonWriter(stringWriter);
+        writer.beginArray();
+        writer.endArray();
+        writer.close();
+        try {
+            writer.value("a");
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testClosedWriterThrowsOnFlush() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter writer = new JsonWriter(stringWriter);
+        writer.beginArray();
+        writer.endArray();
+        writer.close();
+        try {
+            writer.flush();
+            fail();
+        } catch (IllegalStateException expected) {
+        }
+    }
+
+    public void testWriterCloseIsIdempotent() throws IOException {
+        StringWriter stringWriter = new StringWriter();
+        JsonWriter writer = new JsonWriter(stringWriter);
+        writer.beginArray();
+        writer.endArray();
+        writer.close();
+        writer.close();
+    }
+}
diff --git a/metrics/pom.xml b/metrics/pom.xml
deleted file mode 100644
index 9a084452c..000000000
--- a/metrics/pom.xml
+++ /dev/null
@@ -1,141 +0,0 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>com.google.code.gson</groupId>
-  <artifactId>gson-metrics</artifactId>
-  <packaging>jar</packaging>
-  <version>1.0-SNAPSHOT</version>
-  <inceptionYear>2011</inceptionYear>
-  <name>Gson Metrics</name>
-  <parent>
-    <groupId>org.sonatype.oss</groupId>
-    <artifactId>oss-parent</artifactId>
-    <version>5</version>
-  </parent>
-  <url>http://code.google.com/p/google-gson/</url>
-  <description>Performance Metrics for Google Gson library</description>
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-  </properties>
-  <licenses>
-    <license>
-      <name>The Apache Software License, Version 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-      <distribution>repo</distribution>
-    </license>
-  </licenses>
-  <scm>
-    <connection>scm:svn:http://google-gson.googlecode.com/svn/trunk/metrics</connection>
-    <developerConnection>scm:svn:https://google-gson.googlecode.com/svn/trunk/metrics</developerConnection>
-    <url>http://google-gson.codegoogle.com/svn/trunk/metrics</url>
-  </scm>
-  <issueManagement>
-    <system>Google Code Issue Tracking</system>
-    <url>http://code.google.com/p/google-gson/issues/list</url>
-  </issueManagement>
-  <organization>
-    <name>Google, Inc.</name>
-    <url>http://www.google.com</url>
-  </organization>
-  <dependencies>
-    <dependency>
-      <groupId>com.google.code.gson</groupId>
-      <artifactId>gson</artifactId>
-      <version>1.7.2-SNAPSHOT</version>
-    </dependency>
-    <dependency>
-      <groupId>com.google.code.caliper</groupId>
-      <artifactId>caliper</artifactId>
-      <version>1.0-SNAPSHOT</version>
-    </dependency>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>3.8.2</version>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-  <build>
-    <defaultGoal>package</defaultGoal>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>2.3.2</version>
-        <configuration>
-          <source>1.6</source>
-          <target>1.6</target>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-eclipse-plugin</artifactId>
-        <version>2.8</version>
-        <configuration>
-          <downloadSources>true</downloadSources>
-          <downloadJavadocs>true</downloadJavadocs>
-          <workspace>../eclipse-ws/</workspace>
-          <workspaceCodeStylesURL>
-            file:///${basedir}/../lib/gson-formatting-styles.xml
-          </workspaceCodeStylesURL>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-release-plugin</artifactId>
-        <version>2.1</version>
-        <configuration>
-          <arguments>-DenableCiProfile=true</arguments>
-          <tagBase>https://google-gson.googlecode.com/svn/tags/</tagBase>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-source-plugin</artifactId>
-        <version>2.1.2</version>
-        <executions>
-          <execution>
-            <id>attach-sources</id>
-            <goals>
-              <goal>jar</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-javadoc-plugin</artifactId>
-        <version>2.7</version>
-        <executions>
-          <execution>
-            <id>attach-javadocs</id>
-            <goals>
-              <goal>jar</goal>
-            </goals>
-          </execution>
-        </executions>
-        <configuration>
-          <links>
-            <link>http://download.oracle.com/javase/1.5.0/docs/api/</link>
-          </links>
-          <version>true</version>
-          <show>public</show>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-  <developers>
-    <developer>
-      <name>Inderjeet Singh</name>
-      <organization>Google Inc.</organization>
-    </developer>
-    <developer>
-      <name>Joel Leitch</name>
-      <organization>Google Inc.</organization>
-    </developer>
-    <developer>
-      <name>Jesse Wilson</name>
-      <organization>Google Inc.</organization>
-    </developer>
-  </developers>
-</project>
diff --git a/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitives.java b/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitives.java
deleted file mode 100644
index 72cd6b6d1..000000000
--- a/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitives.java
+++ /dev/null
@@ -1,95 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.metrics;
-
-/**
- * Class with a bunch of primitive fields
- *
- * @author Inderjeet Singh
- */
-public class BagOfPrimitives {
-  public static final long DEFAULT_VALUE = 0;
-  public long longValue;
-  public int intValue;
-  public boolean booleanValue;
-  public String stringValue;
-
-  public BagOfPrimitives() {
-    this(DEFAULT_VALUE, 0, false, "");
-  }
-
-  public BagOfPrimitives(long longValue, int intValue, boolean booleanValue, String stringValue) {
-    this.longValue = longValue;
-    this.intValue = intValue;
-    this.booleanValue = booleanValue;
-    this.stringValue = stringValue;
-  }
-
-  public int getIntValue() {
-    return intValue;
-  }
-
-  public String getExpectedJson() {
-    StringBuilder sb = new StringBuilder();
-    sb.append("{");
-    sb.append("\"longValue\":").append(longValue).append(",");
-    sb.append("\"intValue\":").append(intValue).append(",");
-    sb.append("\"booleanValue\":").append(booleanValue).append(",");
-    sb.append("\"stringValue\":\"").append(stringValue).append("\"");
-    sb.append("}");
-    return sb.toString();
-  }
-
-  @Override
-  public int hashCode() {
-    final int prime = 31;
-    int result = 1;
-    result = prime * result + (booleanValue ? 1231 : 1237);
-    result = prime * result + intValue;
-    result = prime * result + (int) (longValue ^ (longValue >>> 32));
-    result = prime * result + ((stringValue == null) ? 0 : stringValue.hashCode());
-    return result;
-  }
-
-  @Override
-  public boolean equals(Object obj) {
-    if (this == obj)
-      return true;
-    if (obj == null)
-      return false;
-    if (getClass() != obj.getClass())
-      return false;
-    BagOfPrimitives other = (BagOfPrimitives) obj;
-    if (booleanValue != other.booleanValue)
-      return false;
-    if (intValue != other.intValue)
-      return false;
-    if (longValue != other.longValue)
-      return false;
-    if (stringValue == null) {
-      if (other.stringValue != null)
-        return false;
-    } else if (!stringValue.equals(other.stringValue))
-      return false;
-    return true;
-  }
-
-  @Override
-  public String toString() {
-    return String.format("(longValue=%d,intValue=%d,booleanValue=%b,stringValue=%s)",
-        longValue, intValue, booleanValue, stringValue);
-  }
-}
diff --git a/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitivesDeserializationBenchmark.java b/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitivesDeserializationBenchmark.java
deleted file mode 100644
index 8e6ea2b24..000000000
--- a/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitivesDeserializationBenchmark.java
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.metrics;
-
-import java.io.IOException;
-import java.io.StringReader;
-import java.lang.reflect.Field;
-
-import com.google.caliper.Runner;
-import com.google.caliper.SimpleBenchmark;
-import com.google.gson.Gson;
-import com.google.gson.stream.JsonReader;
-
-/**
- * Caliper based micro benchmarks for Gson
- *
- * @author Inderjeet Singh
- * @author Jesse Wilson
- * @author Joel Leitch
- */
-public class BagOfPrimitivesDeserializationBenchmark extends SimpleBenchmark {
-
-  private Gson gson;
-  private String json;
-
-  public static void main(String[] args) {
-    Runner.main(BagOfPrimitivesDeserializationBenchmark.class, args);
-  }
-  
-  @Override
-  protected void setUp() throws Exception {
-    this.gson = new Gson();
-    BagOfPrimitives bag = new BagOfPrimitives(10L, 1, false, "foo");
-    this.json = gson.toJson(bag);
-  }
-
-  /** 
-   * Benchmark to measure Gson performance for deserializing an object
-   */
-  public void timeBagOfPrimitivesDefault(int reps) {
-    for (int i=0; i<reps; ++i) {
-      gson.fromJson(json, BagOfPrimitives.class);
-    }
-  }
-
-  /**
-   * Benchmark to measure deserializing objects by hand
-   */
-  public void timeBagOfPrimitivesStreaming(int reps) throws IOException {
-    for (int i=0; i<reps; ++i) {
-      StringReader reader = new StringReader(json);
-      JsonReader jr = new JsonReader(reader);
-      jr.beginObject();
-      long longValue = 0;
-      int intValue = 0;
-      boolean booleanValue = false;
-      String stringValue = null;
-      while(jr.hasNext()) {
-        String name = jr.nextName();
-        if (name.equals("longValue")) {
-          longValue = jr.nextLong();
-        } else if (name.equals("intValue")) {
-          intValue = jr.nextInt();
-        } else if (name.equals("booleanValue")) {
-          booleanValue = jr.nextBoolean();
-        } else if (name.equals("stringValue")) {
-          stringValue = jr.nextString();
-        } else {
-          throw new IOException("Unexpected name: " + name);
-        }
-      }
-      jr.endObject();
-      new BagOfPrimitives(longValue, intValue, booleanValue, stringValue);
-    }
-  }
-
-  /**
-   * This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and
-   * setting object values by reflection. We should strive to reduce the discrepancy between this
-   * and {@link #timeBagOfPrimitivesDefault(int)} .
-   */
-  public void timeBagOfPrimitivesReflectionStreaming(int reps) throws Exception {
-    for (int i=0; i<reps; ++i) {
-      StringReader reader = new StringReader(json);
-      JsonReader jr = new JsonReader(reader);
-      jr.beginObject();
-      BagOfPrimitives bag = new BagOfPrimitives();
-      while(jr.hasNext()) {
-        String name = jr.nextName();
-        for (Field field : BagOfPrimitives.class.getDeclaredFields()) {
-          if (field.getName().equals(name)) {
-            Class<?> fieldType = field.getType();
-            if (fieldType.equals(long.class)) {
-              field.setLong(bag, jr.nextLong());
-            } else if (fieldType.equals(int.class)) {
-              field.setInt(bag, jr.nextInt());
-            } else if (fieldType.equals(boolean.class)) {
-              field.setBoolean(bag, jr.nextBoolean());
-            } else if (fieldType.equals(String.class)) {
-              field.set(bag, jr.nextString());
-            } else {
-              throw new RuntimeException("Unexpected: type: " + fieldType + ", name: " + name);
-            }
-          }
-        }
-      }
-      jr.endObject();
-    }
-  }
-}
diff --git a/metrics/src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java b/metrics/src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java
deleted file mode 100644
index 09a5782ab..000000000
--- a/metrics/src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java
+++ /dev/null
@@ -1,140 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.metrics;
-
-import java.io.IOException;
-import java.io.StringReader;
-import java.lang.reflect.Field;
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.List;
-
-import com.google.caliper.Runner;
-import com.google.caliper.SimpleBenchmark;
-import com.google.gson.Gson;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-
-/**
- * Caliper based micro benchmarks for Gson
- *
- * @author Inderjeet Singh
- */
-public class CollectionsDeserializationBenchmark extends SimpleBenchmark {
-
-  private static final Type LIST_TYPE = new TypeToken<List<BagOfPrimitives>>(){}.getType();
-  private Gson gson;
-  private String json;
-
-  public static void main(String[] args) {
-    Runner.main(CollectionsDeserializationBenchmark.class, args);
-  }
-  
-  @Override
-  protected void setUp() throws Exception {
-    this.gson = new Gson();
-    List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();
-    for (int i = 0; i < 100; ++i) {
-      bags.add(new BagOfPrimitives(10L, 1, false, "foo"));
-    }
-    this.json = gson.toJson(bags, LIST_TYPE);
-  }
-
-  /** 
-   * Benchmark to measure Gson performance for deserializing an object
-   */
-  public void timeCollectionsDefault(int reps) {
-    for (int i=0; i<reps; ++i) {
-      gson.fromJson(json, LIST_TYPE);
-    }
-  }
-
-  /**
-   * Benchmark to measure deserializing objects by hand
-   */
-  public void timeCollectionsStreaming(int reps) throws IOException {
-    for (int i=0; i<reps; ++i) {
-      StringReader reader = new StringReader(json);
-      JsonReader jr = new JsonReader(reader);
-      jr.beginArray();
-      List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();
-      while(jr.hasNext()) {
-        jr.beginObject();
-        long longValue = 0;
-        int intValue = 0;
-        boolean booleanValue = false;
-        String stringValue = null;
-        while(jr.hasNext()) {
-          String name = jr.nextName();
-          if (name.equals("longValue")) {
-            longValue = jr.nextLong();
-          } else if (name.equals("intValue")) {
-            intValue = jr.nextInt();
-          } else if (name.equals("booleanValue")) {
-            booleanValue = jr.nextBoolean();
-          } else if (name.equals("stringValue")) {
-            stringValue = jr.nextString();
-          } else {
-            throw new IOException("Unexpected name: " + name);
-          }
-        }
-        jr.endObject();
-        bags.add(new BagOfPrimitives(longValue, intValue, booleanValue, stringValue));
-      }
-      jr.endArray();
-    }
-  }
-
-  /**
-   * This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and
-   * setting object values by reflection. We should strive to reduce the discrepancy between this
-   * and {@link #timeCollectionsDefault(int)} .
-   */
-  public void timeCollectionsReflectionStreaming(int reps) throws Exception {
-    for (int i=0; i<reps; ++i) {
-      StringReader reader = new StringReader(json);
-      JsonReader jr = new JsonReader(reader);
-      jr.beginArray();
-      List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();
-      while(jr.hasNext()) {
-        jr.beginObject();
-        BagOfPrimitives bag = new BagOfPrimitives();
-        while(jr.hasNext()) {
-          String name = jr.nextName();
-          for (Field field : BagOfPrimitives.class.getDeclaredFields()) {
-            if (field.getName().equals(name)) {
-              Class<?> fieldType = field.getType();
-              if (fieldType.equals(long.class)) {
-                field.setLong(bag, jr.nextLong());
-              } else if (fieldType.equals(int.class)) {
-                field.setInt(bag, jr.nextInt());
-              } else if (fieldType.equals(boolean.class)) {
-                field.setBoolean(bag, jr.nextBoolean());
-              } else if (fieldType.equals(String.class)) {
-                field.set(bag, jr.nextString());
-              } else {
-                throw new RuntimeException("Unexpected: type: " + fieldType + ", name: " + name);
-              }
-            }
-          }
-        }
-        jr.endObject();
-        bags.add(bag);
-      }
-      jr.endArray();
-    }
-  }
-}
diff --git a/metrics/src/main/java/com/google/gson/metrics/ParseBenchmark.java b/metrics/src/main/java/com/google/gson/metrics/ParseBenchmark.java
deleted file mode 100644
index 68134372c..000000000
--- a/metrics/src/main/java/com/google/gson/metrics/ParseBenchmark.java
+++ /dev/null
@@ -1,389 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.metrics;
-
-import com.google.caliper.Param;
-import com.google.caliper.Runner;
-import com.google.caliper.SimpleBenchmark;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonParser;
-import com.google.gson.annotations.SerializedName;
-import com.google.gson.reflect.TypeToken;
-import java.io.CharArrayReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.io.StringWriter;
-import java.lang.reflect.Type;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.List;
-import org.codehaus.jackson.JsonFactory;
-import org.codehaus.jackson.annotate.JsonProperty;
-import org.codehaus.jackson.map.DeserializationConfig;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.type.TypeReference;
-
-/**
- * Measure Gson and Jackson parsing and binding performance.
- *
- * <p>This benchmark requires that ParseBenchmarkData.zip is on the classpath.
- * That file contains Twitter feed data, which is representative of what
- * applications will be parsing.
- */
-public final class ParseBenchmark extends SimpleBenchmark {
-  @Param Document document;
-  @Param Api api;
-
-  private enum Document {
-    TWEETS(new TypeToken<List<Tweet>>() {}, new TypeReference<List<Tweet>>() {}),
-    READER_SHORT(new TypeToken<Feed>() {}, new TypeReference<Feed>() {}),
-    READER_LONG(new TypeToken<Feed>() {}, new TypeReference<Feed>() {});
-
-    private final Type gsonType;
-    private final TypeReference<?> jacksonType;
-
-    private Document(TypeToken<?> typeToken, TypeReference<?> typeReference) {
-      this.gsonType = typeToken.getType();
-      this.jacksonType = typeReference;
-    }
-  }
-
-  private enum Api {
-    JACKSON_STREAM {
-      @Override Parser newParser() {
-        return new JacksonStreamParser();
-      }
-    },
-    JACKSON_BIND {
-      @Override Parser newParser() {
-        return new JacksonBindParser();
-      }
-    },
-    GSON_STREAM {
-      @Override Parser newParser() {
-        return new GsonStreamParser();
-      }
-    },
-    GSON_SKIP {
-      @Override Parser newParser() {
-        return new GsonSkipParser();
-      }
-    },
-    GSON_DOM {
-      @Override Parser newParser() {
-        return new GsonDomParser();
-      }
-    },
-    GSON_BIND {
-      @Override Parser newParser() {
-        return new GsonBindParser();
-      }
-    };
-    abstract Parser newParser();
-  }
-
-  private char[] text;
-  private Parser parser;
-
-  @Override protected void setUp() throws Exception {
-    text = resourceToString("/" + document.name() + ".json").toCharArray();
-    parser = api.newParser();
-  }
-
-  public void timeParse(int reps) throws Exception {
-    for (int i = 0; i < reps; i++) {
-      parser.parse(text, document);
-    }
-  }
-
-  private static String resourceToString(String path) throws Exception {
-    InputStream in = ParseBenchmark.class.getResourceAsStream(path);
-    if (in == null) {
-      throw new IllegalArgumentException("No such file: " + path);
-    }
-
-    Reader reader = new InputStreamReader(in, "UTF-8");
-    char[] buffer = new char[8192];
-    StringWriter writer = new StringWriter();
-    int count;
-    while ((count = reader.read(buffer)) != -1) {
-      writer.write(buffer, 0, count);
-    }
-    reader.close();
-    return writer.toString();
-  }
-
-  public static void main(String[] args) throws Exception {
-    Runner.main(ParseBenchmark.class, args);
-  }
-
-  interface Parser {
-    void parse(char[] data, Document document) throws Exception;
-  }
-
-  private static class GsonStreamParser implements Parser {
-    public void parse(char[] data, Document document) throws Exception {
-      com.google.gson.stream.JsonReader jsonReader
-          = new com.google.gson.stream.JsonReader(new CharArrayReader(data));
-      readToken(jsonReader);
-      jsonReader.close();
-    }
-
-    private void readToken(com.google.gson.stream.JsonReader reader) throws IOException {
-      while (true) {
-        switch (reader.peek()) {
-        case BEGIN_ARRAY:
-          reader.beginArray();
-          break;
-        case END_ARRAY:
-          reader.endArray();
-          break;
-        case BEGIN_OBJECT:
-          reader.beginObject();
-          break;
-        case END_OBJECT:
-          reader.endObject();
-          break;
-        case NAME:
-          reader.nextName();
-          break;
-        case BOOLEAN:
-          reader.nextBoolean();
-          break;
-        case NULL:
-          reader.nextNull();
-          break;
-        case NUMBER:
-          reader.nextLong();
-          break;
-        case STRING:
-          reader.nextString();
-          break;
-        case END_DOCUMENT:
-          return;
-        default:
-          throw new IllegalArgumentException("Unexpected token" + reader.peek());
-        }
-      }
-    }
-  }
-
-  private static class GsonSkipParser implements Parser {
-    public void parse(char[] data, Document document) throws Exception {
-      com.google.gson.stream.JsonReader jsonReader
-          = new com.google.gson.stream.JsonReader(new CharArrayReader(data));
-      jsonReader.skipValue();
-      jsonReader.close();
-    }
-  }
-
-  private static class JacksonStreamParser implements Parser {
-    public void parse(char[] data, Document document) throws Exception {
-      JsonFactory jsonFactory = new JsonFactory();
-      org.codehaus.jackson.JsonParser jp = jsonFactory.createJsonParser(new CharArrayReader(data));
-      jp.configure(org.codehaus.jackson.JsonParser.Feature.CANONICALIZE_FIELD_NAMES, false);
-      int depth = 0;
-      do {
-        switch (jp.nextToken()) {
-        case START_OBJECT:
-        case START_ARRAY:
-          depth++;
-          break;
-        case END_OBJECT:
-        case END_ARRAY:
-          depth--;
-          break;
-        case FIELD_NAME:
-          jp.getCurrentName();
-          break;
-        case VALUE_STRING:
-          jp.getText();
-          break;
-        case VALUE_NUMBER_INT:
-        case VALUE_NUMBER_FLOAT:
-          jp.getLongValue();
-          break;
-        }
-      } while (depth > 0);
-      jp.close();
-    }
-  }
-
-  private static class GsonDomParser implements Parser {
-    public void parse(char[] data, Document document) throws Exception {
-      new JsonParser().parse(new CharArrayReader(data));
-    }
-  }
-
-  private static class GsonBindParser implements Parser {
-    private static Gson gson = new GsonBuilder()
-        .setDateFormat("EEE MMM dd HH:mm:ss Z yyyy")
-        .create();
-
-    public void parse(char[] data, Document document) throws Exception {
-      gson.fromJson(new CharArrayReader(data), document.gsonType);
-    }
-  }
-
-  private static class JacksonBindParser implements Parser {
-    private static ObjectMapper mapper = new ObjectMapper();
-
-    static {
-      mapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);
-      mapper.configure(DeserializationConfig.Feature.AUTO_DETECT_FIELDS, true);
-      mapper.setDateFormat(new SimpleDateFormat("EEE MMM dd HH:mm:ss Z yyyy"));
-    }
-
-    public void parse(char[] data, Document document) throws Exception {
-      mapper.readValue(new CharArrayReader(data), document.jacksonType);
-    }
-  }
-
-  static class Tweet {
-    @JsonProperty String coordinates;
-    @JsonProperty boolean favorited;
-    @JsonProperty Date created_at;
-    @JsonProperty boolean truncated;
-    @JsonProperty Tweet retweeted_status;
-    @JsonProperty String id_str;
-    @JsonProperty String in_reply_to_id_str;
-    @JsonProperty String contributors;
-    @JsonProperty String text;
-    @JsonProperty long id;
-    @JsonProperty String retweet_count;
-    @JsonProperty String in_reply_to_status_id_str;
-    @JsonProperty Object geo;
-    @JsonProperty boolean retweeted;
-    @JsonProperty String in_reply_to_user_id;
-    @JsonProperty String in_reply_to_screen_name;
-    @JsonProperty Object place;
-    @JsonProperty User user;
-    @JsonProperty String source;
-    @JsonProperty String in_reply_to_user_id_str;
-  }
-
-  static class User {
-    @JsonProperty String name;
-    @JsonProperty String profile_sidebar_border_color;
-    @JsonProperty boolean profile_background_tile;
-    @JsonProperty String profile_sidebar_fill_color;
-    @JsonProperty Date created_at;
-    @JsonProperty String location;
-    @JsonProperty String profile_image_url;
-    @JsonProperty boolean follow_request_sent;
-    @JsonProperty String profile_link_color;
-    @JsonProperty boolean is_translator;
-    @JsonProperty String id_str;
-    @JsonProperty int favourites_count;
-    @JsonProperty boolean contributors_enabled;
-    @JsonProperty String url;
-    @JsonProperty boolean default_profile;
-    @JsonProperty long utc_offset;
-    @JsonProperty long id;
-    @JsonProperty boolean profile_use_background_image;
-    @JsonProperty int listed_count;
-    @JsonProperty String lang;
-    @JsonProperty("protected") @SerializedName("protected") boolean isProtected;
-    @JsonProperty int followers_count;
-    @JsonProperty String profile_text_color;
-    @JsonProperty String profile_background_color;
-    @JsonProperty String time_zone;
-    @JsonProperty String description;
-    @JsonProperty boolean notifications;
-    @JsonProperty boolean geo_enabled;
-    @JsonProperty boolean verified;
-    @JsonProperty String profile_background_image_url;
-    @JsonProperty boolean defalut_profile_image;
-    @JsonProperty int friends_count;
-    @JsonProperty int statuses_count;
-    @JsonProperty String screen_name;
-    @JsonProperty boolean following;
-    @JsonProperty boolean show_all_inline_media;
-  }
-
-  static class Feed {
-    @JsonProperty String id;
-    @JsonProperty String title;
-    @JsonProperty String description;
-    @JsonProperty("alternate") @SerializedName("alternate") List<Link> alternates;
-    @JsonProperty long updated;
-    @JsonProperty List<Item> items;
-
-    @Override public String toString() {
-      StringBuilder result = new StringBuilder()
-          .append(id)
-          .append("\n").append(title)
-          .append("\n").append(description)
-          .append("\n").append(alternates)
-          .append("\n").append(updated);
-      int i = 1;
-      for (Item item : items) {
-        result.append(i++).append(": ").append(item).append("\n\n");
-      }
-      return result.toString();
-    }
-  }
-
-  static class Link {
-    @JsonProperty String href;
-
-    @Override public String toString() {
-      return href;
-    }
-  }
-
-  static class Item {
-    @JsonProperty List<String> categories;
-    @JsonProperty String title;
-    @JsonProperty long published;
-    @JsonProperty long updated;
-    @JsonProperty("alternate") @SerializedName("alternate") List<Link> alternates;
-    @JsonProperty Content content;
-    @JsonProperty String author;
-    @JsonProperty List<ReaderUser> likingUsers;
-
-    @Override public String toString() {
-      return title
-          + "\nauthor: " + author
-          + "\npublished: " + published
-          + "\nupdated: " + updated
-          + "\n" + content
-          + "\nliking users: " + likingUsers
-          + "\nalternates: " + alternates
-          + "\ncategories: " + categories;
-    }
-  }
-
-  static class Content {
-    @JsonProperty String content;
-
-    @Override public String toString() {
-      return content;
-    }
-  }
-
-  static class ReaderUser {
-    @JsonProperty String userId;
-
-    @Override public String toString() {
-      return userId;
-    }
-  }
-}
diff --git a/metrics/src/main/java/com/google/gson/metrics/ParseBenchmarkData.zip b/metrics/src/main/java/com/google/gson/metrics/ParseBenchmarkData.zip
deleted file mode 100644
index 58e08bb50..000000000
Binary files a/metrics/src/main/java/com/google/gson/metrics/ParseBenchmarkData.zip and /dev/null differ
diff --git a/metrics/src/main/java/com/google/gson/metrics/SerializationBenchmark.java b/metrics/src/main/java/com/google/gson/metrics/SerializationBenchmark.java
deleted file mode 100644
index 9cdf085e8..000000000
--- a/metrics/src/main/java/com/google/gson/metrics/SerializationBenchmark.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.metrics;
-
-import com.google.caliper.Param;
-import com.google.caliper.Runner;
-import com.google.caliper.SimpleBenchmark;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-
-/**
- * Caliper based micro benchmarks for Gson serialization
- *
- * @author Inderjeet Singh
- * @author Jesse Wilson
- * @author Joel Leitch
- */
-public class SerializationBenchmark extends SimpleBenchmark {
-
-  private Gson gson;
-  private BagOfPrimitives bag;
-  @Param
-  private boolean pretty;
-
-  public static void main(String[] args) {
-    Runner.main(SerializationBenchmark.class, args);
-  }
-  
-  @Override
-  protected void setUp() throws Exception {
-    this.gson = pretty ? new GsonBuilder().setPrettyPrinting().create() : new Gson();
-    this.bag = new BagOfPrimitives(10L, 1, false, "foo");
-  }
-
-  public void timeObjectSerialization(int reps) {
-    for (int i=0; i<reps; ++i) {
-      gson.toJson(bag);
-    }
-  }
-}
diff --git a/pom.xml b/pom.xml
index 79fef8dff..90eae9eba 100644
--- a/pom.xml
+++ b/pom.xml
@@ -9,14 +9,14 @@
     <version>7</version>
   </parent>
 
-  <groupId>com.google.code.gson</groupId>
+  <groupId>com.solidfire.code.gson</groupId>
   <artifactId>gson-parent</artifactId>
   <version>2.6.2</version>
   <packaging>pom</packaging>
 
   <name>Gson Parent</name>
   <description>Gson JSON library</description>
-  <url>https://github.com/google/gson</url>
+  <url>https://github.com/solidfire/gson</url>
 
   <modules>
     <module>gson</module>
@@ -28,15 +28,15 @@
   </properties>
 
   <scm>
-    <url>https://github.com/google/gson/</url>
-    <connection>scm:git:https://github.com/google/gson.git</connection>
-    <developerConnection>scm:git:git@github.com:google/gson.git</developerConnection>
+    <url>https://github.com/solidfire/gson/</url>
+    <connection>scm:git:https://github.com/solidfire/gson.git</connection>
+    <developerConnection>scm:git:git@github.com:solidfire/gson.git</developerConnection>
     <tag>gson-parent-2.6.2</tag>
   </scm>
 
   <issueManagement>
     <system>GitHub Issues</system>
-    <url>https://github.com/google/gson/issues</url>
+    <url>https://github.com/solidfire/gson/issues</url>
   </issueManagement>
 
   <licenses>
diff --git a/proto/.gitignore b/proto/.gitignore
deleted file mode 100644
index f44578ac2..000000000
--- a/proto/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-src/main/java/com/google/gson/protobuf/generated/
diff --git a/proto/pom.xml b/proto/pom.xml
deleted file mode 100644
index 99f7791d5..000000000
--- a/proto/pom.xml
+++ /dev/null
@@ -1,218 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>com.google.code.gson</groupId>
-  <artifactId>proto</artifactId>
-  <packaging>jar</packaging>
-  <version>0.6-SNAPSHOT</version>
-  <name>Gson Protobuf Support</name>
-  <description>Gson support for Protobufs</description>
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-  </properties>
-  <distributionManagement>
-    <repository>
-      <id>local.repo</id>
-      <name>file repository to svn</name>
-      <url>file://${basedir}/../../mavenrepo</url>
-    </repository>
-  </distributionManagement>
-  <repositories>
-    <repository>
-      <id>gson</id>
-      <url>http://google-gson.googlecode.com/svn/mavenrepo</url>
-      <snapshots>
-        <enabled>true</enabled>
-      </snapshots>
-      <releases>
-        <enabled>true</enabled>
-      </releases>
-    </repository>
-  </repositories>
-  <licenses>
-    <license>
-      <name>The Apache Software License, Version 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-      <distribution>repo</distribution>
-    </license>
-  </licenses>
-  <scm>
-    <connection>scm:svn:http://google-gson.googlecode.com/svn/trunk/proto</connection>
-    <developerConnection>scm:svn:https://google-gson.googlecode.com/svn/trunk/proto</developerConnection>
-    <url>http://google-gson.codegoogle.com/svn/trunk/proto</url>
-  </scm>
-  <issueManagement>
-    <system>Google Code Issue Tracking</system>
-    <url>http://code.google.com/p/google-gson/issues/list</url>
-  </issueManagement>
-
-  <dependencies>
-
-    <!--  Gson: Java to Json conversion -->
-    <dependency>
-      <groupId>com.google.code.gson</groupId>
-      <artifactId>gson</artifactId>
-      <version>2.4</version>
-      <scope>compile</scope>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.protobuf</groupId>
-      <artifactId>protobuf-java</artifactId>
-      <version>2.6.1</version>
-      <scope>compile</scope>
-    </dependency>
-    
-    <dependency>
-      <groupId>com.google.guava</groupId>
-      <artifactId>guava</artifactId>
-      <version>18.0</version>
-      <scope>compile</scope>
-    </dependency>
-
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>4.12</version>
-      <scope>test</scope>
-    </dependency>
-    
-    <dependency>
-      <groupId>com.google.truth</groupId>
-      <artifactId>truth</artifactId>
-      <version>0.27</version>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <finalName>gson-proto</finalName>
-    <plugins>
-      <plugin>
-        <artifactId>maven-antrun-plugin</artifactId>
-        <version>1.8</version>
-        <executions>
-          <execution>
-            <id>compile-protoc</id>
-            <phase>generate-sources</phase>
-            <configuration>
-              <tasks>
-                <mkdir dir="target/generated" />
-                <path id="proto.path">
-                  <fileset dir="src/main/protobuf">
-                    <include name="**/*.proto" />
-                  </fileset>
-                </path>
-                <pathconvert pathsep=" " property="proto.files" refid="proto.path" />
-                <exec executable="protoc" failonerror="true">
-                  <arg value="--java_out=src/main/java" />
-                  <arg value="--proto_path=/usr/include" />
-                  <arg value="-I${project.basedir}/src/main/protobuf" />
-                  <arg line="${proto.files}" />
-                </exec>
-              </tasks>
-            </configuration>
-            <goals>
-              <goal>run</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>2.3.2</version>
-        <configuration>
-          <source>1.6</source>
-          <target>1.6</target>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-eclipse-plugin</artifactId>
-        <version>2.8</version>
-        <configuration>
-          <downloadSources>true</downloadSources>
-          <downloadJavadocs>true</downloadJavadocs>
-          <workspace>../eclipse-ws</workspace>
-          <workspaceCodeStylesURL>file:///${basedir}/../lib/gson-formatting-styles.xml</workspaceCodeStylesURL>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-install-plugin</artifactId>
-        <version>2.5.2</version>
-        <!-- configuration>
-          <updateReleaseInfo>true</updateReleaseInfo>
-          <createChecksum>true</createChecksum>
-          <groupId>${groupId}</groupId>
-          <artifactId>${artifactId}</artifactId>
-          <version>${version}</version>
-          <packaging>jar</packaging>
-          <classifier>sources</classifier>
-          <file>target/proto-sources.jar</file>
-        </configuration -->
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-release-plugin</artifactId>
-        <version>2.1</version>
-        <configuration>
-          <arguments>-DenableCiProfile=true</arguments>
-          <tagBase>https://google-gson.googlecode.com/svn/tags/</tagBase>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-source-plugin</artifactId>
-        <version>2.1.2</version>
-        <executions>
-          <execution>
-            <id>attach-sources</id>
-            <goals>
-              <goal>jar</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-javadoc-plugin</artifactId>
-        <version>2.7</version>
-        <executions>
-          <execution>
-            <id>attach-javadocs</id>
-            <goals>
-              <goal>jar</goal>
-            </goals>
-          </execution>
-        </executions>
-        <configuration>
-          <links>
-            <link>http://download.oracle.com/javase/1.5.0/docs/api/</link>
-          </links>
-          <version>true</version>
-          <show>public</show>
-        </configuration>
-      </plugin>
-      <plugin>
-        <artifactId>maven-assembly-plugin</artifactId>
-        <configuration>
-          <descriptor>src/main/resources/assembly-descriptor.xml</descriptor>
-          <finalName>proto-${project.version}</finalName>
-          <outputDirectory>target/dist</outputDirectory>
-          <workDirectory>target/assembly/work</workDirectory>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-  <developers>
-    <developer>
-      <name>Inderjeet Singh</name>
-      <organization>Google Inc.</organization>
-    </developer>
-  </developers>
-</project>
diff --git a/proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java b/proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java
deleted file mode 100644
index ff44779f1..000000000
--- a/proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java
+++ /dev/null
@@ -1,406 +0,0 @@
-/*
- * Copyright (C) 2010 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.protobuf;
-
-import static com.google.common.base.Preconditions.checkNotNull;
-
-import com.google.common.base.CaseFormat;
-import com.google.common.base.Converter;
-import com.google.common.collect.MapMaker;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.protobuf.DescriptorProtos.EnumValueOptions;
-import com.google.protobuf.DescriptorProtos.FieldOptions;
-import com.google.protobuf.Descriptors.Descriptor;
-import com.google.protobuf.Descriptors.EnumDescriptor;
-import com.google.protobuf.Descriptors.EnumValueDescriptor;
-import com.google.protobuf.Descriptors.FieldDescriptor;
-import com.google.protobuf.Extension;
-import com.google.protobuf.GeneratedMessage;
-import com.google.protobuf.Message;
-
-import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.ConcurrentMap;
-
-/**
- * GSON type adapter for protocol buffers that knows how to serialize enums either by using their
- * values or their names, and also supports custom proto field names.
- * <p>
- * You can specify which case representation is used for the proto fields when writing/reading the
- * JSON payload by calling {@link Builder#setFieldNameSerializationFormat(CaseFormat, CaseFormat)}.
- * <p>
- * An example of default serialization/deserialization using custom proto field names is shown
- * below:
- *
- * <pre>
- * message MyMessage {
- *   // Will be serialized as 'osBuildID' instead of the default 'osBuildId'.
- *   string os_build_id = 1 [(serialized_name) = "osBuildID"];
- * }
- * </pre>
- * <p>
- *
- * @author Inderjeet Singh
- * @author Emmanuel Cron
- * @author Stanley Wang
- */
-public class ProtoTypeAdapter
-    implements JsonSerializer<GeneratedMessage>, JsonDeserializer<GeneratedMessage> {
-  /**
-   * Determines how enum <u>values</u> should be serialized.
-   */
-  public static enum EnumSerialization {
-    /**
-     * Serializes and deserializes enum values using their <b>number</b>. When this is used, custom
-     * value names set on enums are ignored.
-     */
-    NUMBER,
-    /** Serializes and deserializes enum values using their <b>name</b>. */
-    NAME;
-  }
-
-  /**
-   * Builder for {@link ProtoTypeAdapter}s.
-   */
-  public static class Builder {
-    private final Set<Extension<FieldOptions, String>> serializedNameExtensions;
-    private final Set<Extension<EnumValueOptions, String>> serializedEnumValueExtensions;
-    private EnumSerialization enumSerialization;
-    private Converter<String, String> fieldNameSerializationFormat;
-
-    private Builder(EnumSerialization enumSerialization, CaseFormat fromFieldNameFormat,
-        CaseFormat toFieldNameFormat) {
-      this.serializedNameExtensions = new HashSet<Extension<FieldOptions, String>>();
-      this.serializedEnumValueExtensions = new HashSet<Extension<EnumValueOptions, String>>();
-      setEnumSerialization(enumSerialization);
-      setFieldNameSerializationFormat(fromFieldNameFormat, toFieldNameFormat);
-    }
-
-    public Builder setEnumSerialization(EnumSerialization enumSerialization) {
-      this.enumSerialization = checkNotNull(enumSerialization);
-      return this;
-    }
-
-    /**
-     * Sets the field names serialization format. The first parameter defines how to read the format
-     * of the proto field names you are converting to JSON. The second parameter defines which
-     * format to use when serializing them.
-     * <p>
-     * For example, if you use the following parameters: {@link CaseFormat#LOWER_UNDERSCORE},
-     * {@link CaseFormat#LOWER_CAMEL}, the following conversion will occur:
-     *
-     * <pre>
-     * PROTO     <->  JSON
-     * my_field       myField
-     * foo            foo
-     * n__id_ct       nIdCt
-     * </pre>
-     */
-    public Builder setFieldNameSerializationFormat(CaseFormat fromFieldNameFormat,
-        CaseFormat toFieldNameFormat) {
-      fieldNameSerializationFormat = fromFieldNameFormat.converterTo(toFieldNameFormat);
-      return this;
-    }
-
-    /**
-     * Adds a field proto annotation that, when set, overrides the default field name
-     * serialization/deserialization. For example, if you add the '{@code serialized_name}'
-     * annotation and you define a field in your proto like the one below:
-     *
-     * <pre>
-     * string client_app_id = 1 [(serialized_name) = "appId"];
-     * </pre>
-     *
-     * ...the adapter will serialize the field using '{@code appId}' instead of the default '
-     * {@code clientAppId}'. This lets you customize the name serialization of any proto field.
-     */
-    public Builder addSerializedNameExtension(
-        Extension<FieldOptions, String> serializedNameExtension) {
-      serializedNameExtensions.add(checkNotNull(serializedNameExtension));
-      return this;
-    }
-
-    /**
-     * Adds an enum value proto annotation that, when set, overrides the default <b>enum</b> value
-     * serialization/deserialization of this adapter. For example, if you add the '
-     * {@code serialized_value}' annotation and you define an enum in your proto like the one below:
-     *
-     * <pre>
-     * enum MyEnum {
-     *   UNKNOWN = 0;
-     *   CLIENT_APP_ID = 1 [(serialized_value) = "APP_ID"];
-     *   TWO = 2 [(serialized_value) = "2"];
-     * }
-     * </pre>
-     *
-     * ...the adapter will serialize the value {@code CLIENT_APP_ID} as "{@code APP_ID}" and the
-     * value {@code TWO} as "{@code 2}". This works for both serialization and deserialization.
-     * <p>
-     * Note that you need to set the enum serialization of this adapter to
-     * {@link EnumSerialization#NAME}, otherwise these annotations will be ignored.
-     */
-    public Builder addSerializedEnumValueExtension(
-        Extension<EnumValueOptions, String> serializedEnumValueExtension) {
-      serializedEnumValueExtensions.add(checkNotNull(serializedEnumValueExtension));
-      return this;
-    }
-
-    public ProtoTypeAdapter build() {
-      return new ProtoTypeAdapter(enumSerialization, fieldNameSerializationFormat,
-          serializedNameExtensions, serializedEnumValueExtensions);
-    }
-  }
-
-  /**
-   * Creates a new {@link ProtoTypeAdapter} builder, defaulting enum serialization to
-   * {@link EnumSerialization#NAME} and converting field serialization from
-   * {@link CaseFormat#LOWER_UNDERSCORE} to {@link CaseFormat#LOWER_CAMEL}.
-   */
-  public static Builder newBuilder() {
-    return new Builder(EnumSerialization.NAME, CaseFormat.LOWER_UNDERSCORE, CaseFormat.LOWER_CAMEL);
-  }
-
-  private static final com.google.protobuf.Descriptors.FieldDescriptor.Type ENUM_TYPE =
-      com.google.protobuf.Descriptors.FieldDescriptor.Type.ENUM;
-
-  private static final ConcurrentMap<String, Map<Class<?>, Method>> mapOfMapOfMethods =
-      new MapMaker().makeMap();
-
-  private final EnumSerialization enumSerialization;
-  private final Converter<String, String> fieldNameSerializationFormat;
-  private final Set<Extension<FieldOptions, String>> serializedNameExtensions;
-  private final Set<Extension<EnumValueOptions, String>> serializedEnumValueExtensions;
-
-  private ProtoTypeAdapter(EnumSerialization enumSerialization,
-      Converter<String, String> fieldNameSerializationFormat,
-      Set<Extension<FieldOptions, String>> serializedNameExtensions,
-      Set<Extension<EnumValueOptions, String>> serializedEnumValueExtensions) {
-    this.enumSerialization = enumSerialization;
-    this.fieldNameSerializationFormat = fieldNameSerializationFormat;
-    this.serializedNameExtensions = serializedNameExtensions;
-    this.serializedEnumValueExtensions = serializedEnumValueExtensions;
-  }
-
-  @Override
-  public JsonElement serialize(GeneratedMessage src, Type typeOfSrc,
-      JsonSerializationContext context) {
-    JsonObject ret = new JsonObject();
-    final Map<FieldDescriptor, Object> fields = src.getAllFields();
-
-    for (Map.Entry<FieldDescriptor, Object> fieldPair : fields.entrySet()) {
-      final FieldDescriptor desc = fieldPair.getKey();
-      String name = getCustSerializedName(desc.getOptions(), desc.getName());
-
-      if (desc.getType() == ENUM_TYPE) {
-        // Enum collections are also returned as ENUM_TYPE
-        if (fieldPair.getValue() instanceof Collection) {
-          // Build the array to avoid infinite loop
-          JsonArray array = new JsonArray();
-          @SuppressWarnings("unchecked")
-          Collection<EnumValueDescriptor> enumDescs =
-              (Collection<EnumValueDescriptor>) fieldPair.getValue();
-          for (EnumValueDescriptor enumDesc : enumDescs) {
-            array.add(context.serialize(getEnumValue(enumDesc)));
-            ret.add(name, array);
-          }
-        } else {
-          EnumValueDescriptor enumDesc = ((EnumValueDescriptor) fieldPair.getValue());
-          ret.add(name, context.serialize(getEnumValue(enumDesc)));
-        }
-      } else {
-        ret.add(name, context.serialize(fieldPair.getValue()));
-      }
-    }
-    return ret;
-  }
-
-  @Override
-  public GeneratedMessage deserialize(JsonElement json, Type typeOfT,
-      JsonDeserializationContext context) throws JsonParseException {
-    try {
-      JsonObject jsonObject = json.getAsJsonObject();
-      @SuppressWarnings("unchecked")
-      Class<? extends GeneratedMessage> protoClass = (Class<? extends GeneratedMessage>) typeOfT;
-
-      try {
-        // Invoke the ProtoClass.newBuilder() method
-        GeneratedMessage.Builder<?> protoBuilder =
-            (GeneratedMessage.Builder<?>) getCachedMethod(protoClass, "newBuilder").invoke(null);
-
-        Descriptor protoDescriptor =
-            (Descriptor) getCachedMethod(protoClass, "getDescriptor").invoke(null);
-        // Call setters on all of the available fields
-        for (FieldDescriptor fieldDescriptor : protoDescriptor.getFields()) {
-          String jsonFieldName =
-              getCustSerializedName(fieldDescriptor.getOptions(), fieldDescriptor.getName());
-
-          if (jsonObject.has(jsonFieldName)) {
-            JsonElement jsonElement = jsonObject.get(jsonFieldName);
-            // Do not reuse jsonFieldName here, it might have a custom value
-            Object fieldValue;
-            if (fieldDescriptor.getType() == ENUM_TYPE) {
-              if (jsonElement.isJsonArray()) {
-                // Handling array
-                Collection<EnumValueDescriptor> enumCollection =
-                    new ArrayList<EnumValueDescriptor>();
-                for (JsonElement element : jsonElement.getAsJsonArray()) {
-                  enumCollection.add(
-                      findValueByNameAndExtension(fieldDescriptor.getEnumType(), element));
-                }
-                fieldValue = enumCollection;
-              } else {
-                // No array, just a plain value
-                fieldValue =
-                    findValueByNameAndExtension(fieldDescriptor.getEnumType(), jsonElement);
-              }
-              protoBuilder.setField(fieldDescriptor, fieldValue);
-            } else if (fieldDescriptor.isRepeated()) {
-              // If the type is an array, then we have to grab the type from the class.
-              String protoArrayFieldName =
-                  fieldNameSerializationFormat.convert(fieldDescriptor.getName()) + "_";
-              Field protoArrayField = protoClass.getDeclaredField(protoArrayFieldName);
-              Type protoArrayFieldType = protoArrayField.getGenericType();
-              fieldValue = context.deserialize(jsonElement, protoArrayFieldType);
-              protoBuilder.setField(fieldDescriptor, fieldValue);
-            } else {
-              Message prototype = protoBuilder.build();
-              Object field = prototype.getField(fieldDescriptor);
-              fieldValue = context.deserialize(jsonElement, field.getClass());
-              protoBuilder.setField(fieldDescriptor, fieldValue);
-            }
-          }
-        }
-        return (GeneratedMessage) protoBuilder.build();
-      } catch (SecurityException e) {
-        throw new JsonParseException(e);
-      } catch (NoSuchMethodException e) {
-        throw new JsonParseException(e);
-      } catch (IllegalArgumentException e) {
-        throw new JsonParseException(e);
-      } catch (IllegalAccessException e) {
-        throw new JsonParseException(e);
-      } catch (InvocationTargetException e) {
-        throw new JsonParseException(e);
-      }
-    } catch (Exception e) {
-      throw new JsonParseException("Error while parsing proto", e);
-    }
-  }
-
-  /**
-   * Retrieves the custom field name from the given options, and if not found, returns the specified
-   * default name.
-   */
-  private String getCustSerializedName(FieldOptions options, String defaultName) {
-    for (Extension<FieldOptions, String> extension : serializedNameExtensions) {
-      if (options.hasExtension(extension)) {
-        return options.getExtension(extension);
-      }
-    }
-    return fieldNameSerializationFormat.convert(defaultName);
-  }
-
-  /**
-   * Retrieves the custom enum value name from the given options, and if not found, returns the
-   * specified default value.
-   */
-  private String getCustSerializedEnumValue(EnumValueOptions options, String defaultValue) {
-    for (Extension<EnumValueOptions, String> extension : serializedEnumValueExtensions) {
-      if (options.hasExtension(extension)) {
-        return options.getExtension(extension);
-      }
-    }
-    return defaultValue;
-  }
-
-  /**
-   * Returns the enum value to use for serialization, depending on the value of
-   * {@link EnumSerialization} that was given to this adapter.
-   */
-  private Object getEnumValue(EnumValueDescriptor enumDesc) {
-    if (enumSerialization == EnumSerialization.NAME) {
-      return getCustSerializedEnumValue(enumDesc.getOptions(), enumDesc.getName());
-    } else {
-      return enumDesc.getNumber();
-    }
-  }
-
-  /**
-   * Finds an enum value in the given {@link EnumDescriptor} that matches the given JSON element,
-   * either by name if the current adapter is using {@link EnumSerialization#NAME}, otherwise by
-   * number. If matching by name, it uses the extension value if it is defined, otherwise it uses
-   * its default value.
-   *
-   * @throws IllegalArgumentException if a matching name/number was not found
-   */
-  private EnumValueDescriptor findValueByNameAndExtension(EnumDescriptor desc,
-      JsonElement jsonElement) {
-    if (enumSerialization == EnumSerialization.NAME) {
-      // With enum name
-      for (EnumValueDescriptor enumDesc : desc.getValues()) {
-        String enumValue = getCustSerializedEnumValue(enumDesc.getOptions(), enumDesc.getName());
-        if (enumValue.equals(jsonElement.getAsString())) {
-          return enumDesc;
-        }
-      }
-      throw new IllegalArgumentException(
-          String.format("Unrecognized enum name: %s", jsonElement.getAsString()));
-    } else {
-      // With enum value
-      EnumValueDescriptor fieldValue = desc.findValueByNumber(jsonElement.getAsInt());
-      if (fieldValue == null) {
-        throw new IllegalArgumentException(
-            String.format("Unrecognized enum value: %s", jsonElement.getAsInt()));
-      }
-      return fieldValue;
-    }
-  }
-
-  private static Method getCachedMethod(Class<?> clazz, String methodName,
-      Class<?>... methodParamTypes) throws NoSuchMethodException {
-    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);
-    if (mapOfMethods == null) {
-      mapOfMethods = new MapMaker().makeMap();
-      Map<Class<?>, Method> previous =
-          mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);
-      mapOfMethods = previous == null ? mapOfMethods : previous;
-    }
-
-    Method method = mapOfMethods.get(clazz);
-    if (method == null) {
-      method = clazz.getMethod(methodName, methodParamTypes);
-      mapOfMethods.putIfAbsent(clazz, method);
-      // NB: it doesn't matter which method we return in the event of a race.
-    }
-    return method;
-  }
-
-}
diff --git a/proto/src/main/protobuf/annotations.proto b/proto/src/main/protobuf/annotations.proto
deleted file mode 100644
index 53b727a66..000000000
--- a/proto/src/main/protobuf/annotations.proto
+++ /dev/null
@@ -1,32 +0,0 @@
-//
-// Copyright (C) 2010 Google Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-//
-
-syntax = "proto2";
-
-package google.gson.protobuf.generated;
-option java_package = "com.google.gson.protobuf.generated";
-
-import "google/protobuf/descriptor.proto";
-
-extend google.protobuf.FieldOptions {
-  // Indicates a field name that overrides the default for serialization
-  optional string serialized_name = 92066888;
-}
-
-extend google.protobuf.EnumValueOptions {
-  // Indicates a field value that overrides the default for serialization
-  optional string serialized_value = 92066888;
-}
diff --git a/proto/src/main/protobuf/bag.proto b/proto/src/main/protobuf/bag.proto
deleted file mode 100644
index 26189a24f..000000000
--- a/proto/src/main/protobuf/bag.proto
+++ /dev/null
@@ -1,65 +0,0 @@
-//
-// Copyright (C) 2010 Google Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-//
-
-package google.gson.protobuf.generated;
-option java_package = "com.google.gson.protobuf.generated";
-
-import "annotations.proto";
-
-message SimpleProto {
-  optional string msg = 1;
-  optional int32 count = 2;
-}
-
-message ProtoWithRepeatedFields {
-  repeated int64 numbers = 1;
-  repeated SimpleProto simples = 2;
-  optional string name = 3;
-}
-
-// -- A more complex message with annotations and nested protos
-
-message OuterMessage {
-  optional int32 month = 1;
-  optional int32 year = 2;
-  optional int64 long_timestamp = 3 [(serialized_name) = "timeStamp"];
-  optional string country_code_5f55 = 4;
-}
-
-message ProtoWithAnnotations {
-  optional string id = 1;
-  optional OuterMessage outer_message = 2 [(serialized_name) = "expiration_date"];
-
-  message InnerMessage {
-    optional int32 n__id_ct = 1;
-
-    enum Type {
-      UNKNOWN = 0;
-      TEXT = 1 [(serialized_value) = "text/plain"];
-      IMAGE = 2 [(serialized_value) = "image/png"];
-    }
-    optional Type content = 2;
-
-    message Data {
-      optional string data = 1;
-      optional int32 width = 2;
-      optional int32 height = 3;
-    }
-    repeated Data data = 3 [(serialized_name) = "$binary_data$"];
-  }
-  optional InnerMessage inner_message_1 = 3;
-  optional InnerMessage inner_message_2 = 4;
-}
\ No newline at end of file
diff --git a/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithAnnotationsTest.java b/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithAnnotationsTest.java
deleted file mode 100644
index 2bb6f183a..000000000
--- a/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithAnnotationsTest.java
+++ /dev/null
@@ -1,227 +0,0 @@
-/*
- * Copyright (C) 2010 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.protobuf.functional;
-
-import static com.google.common.truth.Truth.assertThat;
-import static com.google.common.truth.Truth.assert_;
-
-import com.google.common.base.CaseFormat;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonParseException;
-import com.google.gson.protobuf.ProtoTypeAdapter;
-import com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization;
-import com.google.gson.protobuf.generated.Annotations;
-import com.google.gson.protobuf.generated.Bag.OuterMessage;
-import com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations;
-import com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations.InnerMessage;
-import com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations.InnerMessage.Data;
-import com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations.InnerMessage.Type;
-import com.google.protobuf.GeneratedMessage;
-
-import junit.framework.TestCase;
-
-/**
- * Functional tests for protocol buffers using annotations for field names and enum values.
- *
- * @author Emmanuel Cron
- */
-public class ProtosWithAnnotationsTest extends TestCase {
-  private Gson gson;
-  private Gson gsonWithEnumNumbers;
-  private Gson gsonWithLowerHyphen;
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    ProtoTypeAdapter.Builder protoTypeAdapter = ProtoTypeAdapter.newBuilder()
-        .setEnumSerialization(EnumSerialization.NAME)
-        .addSerializedNameExtension(Annotations.serializedName)
-        .addSerializedEnumValueExtension(Annotations.serializedValue);
-    gson = new GsonBuilder()
-        .registerTypeHierarchyAdapter(GeneratedMessage.class, protoTypeAdapter.build())
-        .create();
-    gsonWithEnumNumbers = new GsonBuilder()
-        .registerTypeHierarchyAdapter(GeneratedMessage.class, protoTypeAdapter
-            .setEnumSerialization(EnumSerialization.NUMBER)
-            .build())
-        .create();
-    gsonWithLowerHyphen = new GsonBuilder()
-        .registerTypeHierarchyAdapter(GeneratedMessage.class, protoTypeAdapter
-            .setFieldNameSerializationFormat(CaseFormat.LOWER_UNDERSCORE, CaseFormat.LOWER_HYPHEN)
-            .build())
-        .create();
-  }
-
-  public void testProtoWithAnnotations_deserialize() {
-    String json = String.format("{  %n"
-        + "   \"id\":\"41e5e7fd6065d101b97018a465ffff01\",%n"
-        + "   \"expiration_date\":{  %n"
-        + "      \"month\":\"12\",%n"
-        + "      \"year\":\"2017\",%n"
-        + "      \"timeStamp\":\"9864653135687\",%n"
-        + "      \"countryCode5f55\":\"en_US\"%n"
-        + "   },%n"
-        // Don't define innerMessage1
-        + "   \"innerMessage2\":{  %n"
-        // Set a number as a string; it should work
-        + "      \"nIdCt\":\"98798465\",%n"
-        + "      \"content\":\"text/plain\",%n"
-        + "      \"$binary_data$\":[  %n"
-        + "         {  %n"
-        + "            \"data\":\"OFIN8e9fhwoeh8((⁹8efywoih\",%n"
-        // Don't define width
-        + "            \"height\":665%n"
-        + "         },%n"
-        + "         {  %n"
-        // Define as an int; it should work
-        + "            \"data\":65,%n"
-        + "            \"width\":-56684%n"
-        // Don't define height
-        + "         }%n"
-        + "      ]%n"
-        + "   },%n"
-        // Define a bunch of non recognizable data
-        + "   \"non_existing\":\"foobar\",%n"
-        + "   \"stillNot\":{  %n"
-        + "      \"bunch\":\"of_useless data\"%n"
-        + "   }%n"
-        + "}");
-    ProtoWithAnnotations proto = gson.fromJson(json, ProtoWithAnnotations.class);
-    assertThat(proto.getId()).isEqualTo("41e5e7fd6065d101b97018a465ffff01");
-    assertThat(proto.getOuterMessage()).isEqualTo(OuterMessage.newBuilder()
-        .setMonth(12)
-        .setYear(2017)
-        .setLongTimestamp(9864653135687L)
-        .setCountryCode5F55("en_US")
-        .build());
-    assertThat(proto.hasInnerMessage1()).isFalse();
-    assertThat(proto.getInnerMessage2()).isEqualTo(InnerMessage.newBuilder()
-        .setNIdCt(98798465)
-        .setContent(Type.TEXT)
-        .addData(Data.newBuilder()
-            .setData("OFIN8e9fhwoeh8((⁹8efywoih")
-            .setHeight(665))
-        .addData(Data.newBuilder()
-            .setData("65")
-            .setWidth(-56684))
-        .build());
-
-    String rebuilt = gson.toJson(proto);
-    assertThat(rebuilt).isEqualTo("{"
-        + "\"id\":\"41e5e7fd6065d101b97018a465ffff01\","
-        + "\"expiration_date\":{"
-        + "\"month\":12,"
-        + "\"year\":2017,"
-        + "\"timeStamp\":9864653135687,"
-        + "\"countryCode5f55\":\"en_US\""
-        + "},"
-        + "\"innerMessage2\":{"
-        + "\"nIdCt\":98798465,"
-        + "\"content\":\"text/plain\","
-        + "\"$binary_data$\":["
-        + "{"
-        + "\"data\":\"OFIN8e9fhwoeh8((⁹8efywoih\","
-        + "\"height\":665"
-        + "},"
-        + "{"
-        + "\"data\":\"65\","
-        + "\"width\":-56684"
-        + "}]}}");
-  }
-
-  public void testProtoWithAnnotations_deserializeUnknownEnumValue() {
-    String json = String.format("{  %n"
-        + "   \"content\":\"UNKNOWN\"%n"
-        + "}");
-    InnerMessage proto = gson.fromJson(json, InnerMessage.class);
-    assertThat(proto.getContent()).isEqualTo(Type.UNKNOWN);
-  }
-
-  public void testProtoWithAnnotations_deserializeUnrecognizedEnumValue() {
-    String json = String.format("{  %n"
-        + "   \"content\":\"UNRECOGNIZED\"%n"
-        + "}");
-    try {
-      gson.fromJson(json, InnerMessage.class);
-      assert_().fail("Should have thrown");
-    } catch (JsonParseException e) {
-      // expected
-    }
-  }
-
-  public void testProtoWithAnnotations_deserializeWithEnumNumbers() {
-    String json = String.format("{  %n"
-        + "   \"content\":\"0\"%n"
-        + "}");
-    InnerMessage proto = gsonWithEnumNumbers.fromJson(json, InnerMessage.class);
-    assertThat(proto.getContent()).isEqualTo(Type.UNKNOWN);
-    String rebuilt = gsonWithEnumNumbers.toJson(proto);
-    assertThat(rebuilt).isEqualTo("{\"content\":0}");
-
-    json = String.format("{  %n"
-        + "   \"content\":\"2\"%n"
-        + "}");
-    proto = gsonWithEnumNumbers.fromJson(json, InnerMessage.class);
-    assertThat(proto.getContent()).isEqualTo(Type.IMAGE);
-    rebuilt = gsonWithEnumNumbers.toJson(proto);
-    assertThat(rebuilt).isEqualTo("{\"content\":2}");
-  }
-
-  public void testProtoWithAnnotations_serialize() {
-    ProtoWithAnnotations proto = ProtoWithAnnotations.newBuilder()
-        .setId("09f3j20839h032y0329hf30932h0nffn")
-        .setOuterMessage(OuterMessage.newBuilder()
-            .setMonth(14)
-            .setYear(6650)
-            .setLongTimestamp(468406876880768L))
-        .setInnerMessage1(InnerMessage.newBuilder()
-            .setNIdCt(12)
-            .setContent(Type.IMAGE)
-            .addData(Data.newBuilder()
-                .setData("data$$")
-                .setWidth(200))
-            .addData(Data.newBuilder()
-                .setHeight(56)))
-        .build();
-
-    String json = gsonWithLowerHyphen.toJson(proto);
-    assertThat(json).isEqualTo(
-        "{\"id\":\"09f3j20839h032y0329hf30932h0nffn\","
-        + "\"expiration_date\":{"
-            + "\"month\":14,"
-            + "\"year\":6650,"
-            + "\"timeStamp\":468406876880768"
-        + "},"
-        // This field should be using hyphens
-        + "\"inner-message-1\":{"
-            + "\"n--id-ct\":12,"
-            + "\"content\":2,"
-            + "\"$binary_data$\":["
-              + "{"
-                  + "\"data\":\"data$$\","
-                  + "\"width\":200"
-              + "},"
-              + "{"
-                  + "\"height\":56"
-              + "}]"
-            + "}"
-        + "}");
-
-    ProtoWithAnnotations rebuilt = gsonWithLowerHyphen.fromJson(json, ProtoWithAnnotations.class);
-    assertThat(rebuilt).isEqualTo(proto);
-  }
-}
diff --git a/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithComplexAndRepeatedFieldsTest.java b/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithComplexAndRepeatedFieldsTest.java
deleted file mode 100644
index 964549d6b..000000000
--- a/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithComplexAndRepeatedFieldsTest.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Copyright (C) 2010 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.protobuf.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.protobuf.ProtoTypeAdapter;
-import com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization;
-import com.google.gson.protobuf.generated.Bag.ProtoWithRepeatedFields;
-import com.google.gson.protobuf.generated.Bag.SimpleProto;
-import com.google.protobuf.GeneratedMessage;
-
-import junit.framework.TestCase;
-
-/**
- * Functional tests for protocol buffers using complex and repeated fields
- *
- * @author Inderjeet Singh
- */
-public class ProtosWithComplexAndRepeatedFieldsTest extends TestCase {
-  private Gson gson;
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    gson =
-        new GsonBuilder()
-            .registerTypeHierarchyAdapter(GeneratedMessage.class,
-                ProtoTypeAdapter.newBuilder()
-                    .setEnumSerialization(EnumSerialization.NUMBER)
-                    .build())
-            .create();
-  }
-
-  public void testSerializeRepeatedFields() {
-    ProtoWithRepeatedFields proto = ProtoWithRepeatedFields.newBuilder()
-      .addNumbers(2)
-      .addNumbers(3)
-      .addSimples(SimpleProto.newBuilder().setMsg("foo").build())
-      .addSimples(SimpleProto.newBuilder().setCount(3).build())
-      .build();
-    String json = gson.toJson(proto);
-    assertTrue(json.contains("[2,3]"));
-    assertTrue(json.contains("foo"));
-    assertTrue(json.contains("count"));
-  }
-
-  public void testDeserializeRepeatedFieldsProto() {
-    String json = "{numbers:[4,6],simples:[{msg:'bar'},{count:7}]}";
-    ProtoWithRepeatedFields proto =
-      gson.fromJson(json, ProtoWithRepeatedFields.class);
-    assertEquals(4, proto.getNumbers(0));
-    assertEquals(6, proto.getNumbers(1));
-    assertEquals("bar", proto.getSimples(0).getMsg());
-    assertEquals(7, proto.getSimples(1).getCount());
-  }
-}
diff --git a/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java b/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java
deleted file mode 100644
index f90899e1c..000000000
--- a/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * Copyright (C) 2010 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.protobuf.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.protobuf.ProtoTypeAdapter;
-import com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization;
-import com.google.gson.protobuf.generated.Bag.SimpleProto;
-import com.google.protobuf.Descriptors.Descriptor;
-import com.google.protobuf.GeneratedMessage;
-
-import junit.framework.TestCase;
-
-public class ProtosWithPrimitiveTypesTest extends TestCase {
-  private Gson gson;
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    gson = new GsonBuilder().registerTypeHierarchyAdapter(
-      GeneratedMessage.class, ProtoTypeAdapter.newBuilder()
-          .setEnumSerialization(EnumSerialization.NUMBER)
-          .build())
-      .create();
-  }
-
-  public void testSerializeEmptyProto() {
-    SimpleProto proto = SimpleProto.newBuilder().build();
-    String json = gson.toJson(proto);
-    assertEquals("{}", json);
-  }
-
-  public void testDeserializeEmptyProto() {
-    SimpleProto proto = gson.fromJson("{}", SimpleProto.class);
-    assertFalse(proto.hasCount());
-    assertFalse(proto.hasMsg());
-  }
-
-  public void testSerializeProto() {
-    Descriptor descriptor = SimpleProto.getDescriptor();
-    SimpleProto proto = SimpleProto.newBuilder()
-      .setCount(3)
-      .setMsg("foo")
-      .build();
-    String json = gson.toJson(proto);
-    assertTrue(json.contains("\"msg\":\"foo\""));
-    assertTrue(json.contains("\"count\":3"));
-  }
-
-  public void testDeserializeProto() {
-    SimpleProto proto = gson.fromJson("{msg:'foo',count:3}", SimpleProto.class);
-    assertEquals("foo", proto.getMsg());
-    assertEquals(3, proto.getCount());
-  }
-}
