diff --git a/gson/src/main/java/com/google/gson/stream/JsonReader.java b/gson/src/main/java/com/google/gson/stream/JsonReader.java
index 8248e7843..4a0498c46 100644
--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java
+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java
@@ -956,22 +956,33 @@ public long nextLong() throws IOException {
     }
 
     Long result = null;
-    if (p == PEEKED_NUMBER) {
-      peekedString = new String(buffer, pos, peekedNumberLength);
-      pos += peekedNumberLength;
-    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {
-      peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\'' : '"');
-      try {
-        result = Long.parseLong(peekedString);
-        peeked = PEEKED_NONE;
-        pathIndices[stackSize - 1]++;
-      } catch (NumberFormatException ignored) {
-        // Fall back to parse as a double below.
+
+    slice: {
+      if (p == PEEKED_NUMBER) {
+        peekedString = new String(buffer, pos, peekedNumberLength);
+        pos += peekedNumberLength;
+      } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {
+        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\'' : '"');
       }
-    } else {
+    }
+
+    co_slice: {
+      if (p == PEEKED_NUMBER) {
+      } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {
+        try {
+          result = Long.parseLong(peekedString);
+          peeked = PEEKED_NONE;
+          pathIndices[stackSize - 1]++;
+        } catch (NumberFormatException ignored) {
+          // Fall back to parse as a double below.
+        }
+      }
+    }
+
+  /*} else {
       throw new IllegalStateException("Expected a long but was " + peek()
           + " at line " + getLineNumber() + " column " + getColumnNumber() + " path " + getPath());
-    }
+    }*/
 
     if (result != null) {
       return result;
