diff --git a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
index c3c616c4e..506249d2b 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
@@ -22,6 +22,7 @@
 import com.google.gson.JsonSyntaxException;
 import com.google.gson.TypeAdapter;
 import com.google.gson.TypeAdapterFactory;
+import com.google.gson.annotations.SerializedName;
 import com.google.gson.internal.$Gson$Types;
 import com.google.gson.internal.ConstructorConstructor;
 import com.google.gson.internal.JsonReaderInternalAccess;
@@ -34,6 +35,7 @@
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
+import java.util.EnumMap;
 import java.util.List;
 import java.util.Map;
 
@@ -201,6 +203,26 @@ public void write(JsonWriter out, Map<K, V> map) throws IOException {
         return;
       }
 
+      if (map instanceof EnumMap) {
+        out.beginObject();
+        for (Map.Entry<K, V> entry : map.entrySet()) {
+          K key = entry.getKey();
+          String name = String.valueOf(key);
+          try {
+            SerializedName annotation = key.getClass().getField(name).getAnnotation(SerializedName.class);
+            if (annotation != null) {
+              name = annotation.value();
+            }
+          } catch (NoSuchFieldException e) {
+            throw new AssertionError();
+          }
+          out.name(name);
+          valueTypeAdapter.write(out, entry.getValue());
+        }
+        out.endObject();
+        return;
+      }
+
       if (!complexMapKeySerialization) {
         out.beginObject();
         for (Map.Entry<K, V> entry : map.entrySet()) {
diff --git a/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java b/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java
index 5c0619535..4a2e8b3f4 100644
--- a/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java
+++ b/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java
@@ -16,15 +16,16 @@
 
 package com.google.gson;
 
+import com.google.gson.annotations.SerializedName;
 import com.google.gson.reflect.TypeToken;
 import java.lang.reflect.Type;
+import java.util.EnumMap;
 import java.util.HashMap;
 import java.util.Map;
 import junit.framework.TestCase;
 
 /**
- * Unit test for the default JSON map serialization object located in the
- * {@link DefaultTypeAdapters} class.
+ * Unit test for the default JSON map serialization logic.
  *
  * @author Joel Leitch
  */
@@ -61,4 +62,24 @@ public void testNonEmptyMapSerialization() {
     JsonObject mapJsonObject = element.getAsJsonObject();
     assertTrue(mapJsonObject.has(key));
   }
+
+  public enum Bool {
+    @SerializedName("true")
+    TRUE, FALSE
+  }
+
+  public void testEnumMapSerialization() {
+    Type mapType = new TypeToken<Map<Bool, String>>() { }.getType();
+    Map<Bool, Integer> enumMap = new EnumMap<Bool, Integer>(Bool.class);
+    enumMap.put(Bool.TRUE, 0);
+    enumMap.put(Bool.FALSE, 1);
+
+    Gson gson = new Gson();
+    JsonElement element = gson.toJsonTree(enumMap, mapType);
+
+    assertTrue(element.isJsonObject());
+    JsonObject mapJsonObject = element.getAsJsonObject();
+    assertTrue(mapJsonObject.has("true"));
+    assertTrue(mapJsonObject.has("FALSE"));
+  }
 }
