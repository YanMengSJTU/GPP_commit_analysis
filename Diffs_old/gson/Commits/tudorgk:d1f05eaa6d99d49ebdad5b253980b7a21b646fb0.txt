diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/ReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/economic/persistgson/internal/bind/ReflectiveTypeAdapterFactory.java
index 8cc95b702..1a874668b 100644
--- a/gson/src/main/java/com/economic/persistgson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -122,7 +122,7 @@ public void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
         TypeAdapter t = jsonAdapterPresent ? typeAdapter
-            : new com.economic.persistgson.internal.bind.TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+            : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
         t.write(writer, fieldValue);
       }
       @Override
diff --git a/gson/src/main/java/com/economic/persistgson/persist/PersistObject.java b/gson/src/main/java/com/economic/persistgson/persist/PersistObject.java
deleted file mode 100644
index a59748844..000000000
--- a/gson/src/main/java/com/economic/persistgson/persist/PersistObject.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package com.economic.persistgson.persist;
-
-import java.util.HashMap;
-
-/**
- * Created by Tudor Dragan on 03/05/2017.
- * Copyright © e-conomic.com
- */
-
-public interface PersistObject {
-    HashMap<String, ?> persistMap = new HashMap<>();
-}
diff --git a/gson/src/main/java/com/economic/persistgson/persist/PersistObject.kt b/gson/src/main/java/com/economic/persistgson/persist/PersistObject.kt
new file mode 100644
index 000000000..7668ecfa6
--- /dev/null
+++ b/gson/src/main/java/com/economic/persistgson/persist/PersistObject.kt
@@ -0,0 +1,12 @@
+package com.economic.persistgson.persist
+
+import java.util.HashMap
+
+/**
+ * Created by Tudor Dragan on 03/05/2017.
+ * Copyright © e-conomic.com
+ */
+
+interface PersistObject {
+    val persistMap: MutableMap<String, Any>
+}
diff --git a/gson/src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.java
deleted file mode 100644
index 20b2666f8..000000000
--- a/gson/src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.java
+++ /dev/null
@@ -1,99 +0,0 @@
-package com.economic.persistgson.persist;
-
-import com.economic.persistgson.FieldNamingStrategy;
-import com.economic.persistgson.Gson;
-import com.economic.persistgson.JsonSyntaxException;
-import com.economic.persistgson.TypeAdapter;
-import com.economic.persistgson.internal.ConstructorConstructor;
-import com.economic.persistgson.internal.Excluder;
-import com.economic.persistgson.internal.ObjectConstructor;
-import com.economic.persistgson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
-import com.economic.persistgson.internal.bind.ReflectiveTypeAdapterFactory;
-import com.economic.persistgson.reflect.TypeToken;
-import com.economic.persistgson.stream.JsonReader;
-import com.economic.persistgson.stream.JsonToken;
-import com.economic.persistgson.stream.JsonWriter;
-
-import java.io.IOException;
-import java.util.Map;
-
-/**
- * Created by Tudor Dragan on 03/05/2017.
- * Copyright © e-conomic.com
- */
-
-public class PersistReflectiveTypeAdapterFactory extends ReflectiveTypeAdapterFactory {
-
-    public PersistReflectiveTypeAdapterFactory(ConstructorConstructor constructorConstructor, FieldNamingStrategy fieldNamingPolicy, Excluder excluder, JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory) {
-        super(constructorConstructor, fieldNamingPolicy, excluder, jsonAdapterFactory);
-    }
-
-    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
-        Class<? super T> raw = type.getRawType();
-
-        if (!Object.class.isAssignableFrom(raw)) {
-            return null; // it's a primitive!
-        }
-
-        ObjectConstructor<T> constructor = constructorConstructor.get(type);
-        return new Adapter<T>(constructor, getBoundFields(gson, type, raw));
-    }
-
-    public static final class Adapter<T> extends TypeAdapter<T> {
-        private final ObjectConstructor<T> constructor;
-        private final Map<String, BoundField> boundFields;
-
-        Adapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundFields) {
-            this.constructor = constructor;
-            this.boundFields = boundFields;
-        }
-
-        @Override public T read(JsonReader in) throws IOException {
-            if (in.peek() == JsonToken.NULL) {
-                in.nextNull();
-                return null;
-            }
-
-            T instance = constructor.construct();
-
-            try {
-                in.beginObject();
-                while (in.hasNext()) {
-                    String name = in.nextName();
-                    BoundField field = boundFields.get(name);
-                    if (field == null || !field.deserialized) {
-                        in.skipValue();
-                    } else {
-                        field.read(in, instance);
-                    }
-                }
-            } catch (IllegalStateException e) {
-                throw new JsonSyntaxException(e);
-            } catch (IllegalAccessException e) {
-                throw new AssertionError(e);
-            }
-            in.endObject();
-            return instance;
-        }
-
-        @Override public void write(JsonWriter out, T value) throws IOException {
-            if (value == null) {
-                out.nullValue();
-                return;
-            }
-
-            out.beginObject();
-            try {
-                for (BoundField boundField : boundFields.values()) {
-                    if (boundField.writeField(value)) {
-                        out.name(boundField.name);
-                        boundField.write(out, value);
-                    }
-                }
-            } catch (IllegalAccessException e) {
-                throw new AssertionError(e);
-            }
-            out.endObject();
-        }
-    }
-}
diff --git a/gson/src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.kt b/gson/src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.kt
new file mode 100644
index 000000000..8769320ce
--- /dev/null
+++ b/gson/src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.kt
@@ -0,0 +1,97 @@
+package com.economic.persistgson.persist
+
+import com.economic.persistgson.*
+import com.economic.persistgson.internal.ConstructorConstructor
+import com.economic.persistgson.internal.Excluder
+import com.economic.persistgson.internal.ObjectConstructor
+import com.economic.persistgson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory
+import com.economic.persistgson.internal.bind.ReflectiveTypeAdapterFactory
+import com.economic.persistgson.reflect.TypeToken
+import com.economic.persistgson.stream.JsonReader
+import com.economic.persistgson.stream.JsonToken
+import com.economic.persistgson.stream.JsonWriter
+
+import org.json.JSONObject
+
+import java.io.IOException
+import java.util.HashMap
+
+/**
+ * Created by Tudor Dragan on 03/05/2017.
+ * Copyright © e-conomic.com
+ */
+
+class PersistReflectiveTypeAdapterFactory(constructorConstructor: ConstructorConstructor, fieldNamingPolicy: FieldNamingStrategy, excluder: Excluder, jsonAdapterFactory: JsonAdapterAnnotationTypeAdapterFactory) : ReflectiveTypeAdapterFactory(constructorConstructor, fieldNamingPolicy, excluder, jsonAdapterFactory) {
+
+    override fun <T> create(gson: Gson, type: TypeToken<T>): TypeAdapter<T>? {
+        val raw = type.rawType
+
+        if (!Any::class.java.isAssignableFrom(raw)) {
+            return null // it's a primitive!
+        }
+
+        val constructor = constructorConstructor.get(type)
+        return Adapter(constructor, getBoundFields(gson, type, raw))
+    }
+
+    class Adapter<T> internal constructor(private val constructor: ObjectConstructor<T>, private val boundFields: Map<String, ReflectiveTypeAdapterFactory.BoundField>) : TypeAdapter<T>() {
+
+        @Throws(IOException::class)
+        override fun read(`in`: JsonReader): T? {
+            if (`in`.peek() == JsonToken.NULL) {
+                `in`.nextNull()
+                return null
+            }
+
+            val instance = constructor.construct()
+
+            try {
+                `in`.beginObject()
+                while (`in`.hasNext()) {
+                    val name = `in`.nextName()
+                    val field = boundFields[name]
+                    if (field == null || !field.deserialized) {
+                        // if instance is of type PersisObject
+                        if (instance is PersistObject) {
+                            val parsedJson = JsonParser().parse(`in`)
+                            instance.persistMap.put(name,parsedJson)
+                        } else {
+                            `in`.skipValue()
+                        }
+                    } else {
+                        field.read(`in`, instance)
+                    }
+                }
+            } catch (e: IllegalStateException) {
+                throw JsonSyntaxException(e)
+            } catch (e: IllegalAccessException) {
+                throw AssertionError(e)
+            }
+
+            `in`.endObject()
+            return instance
+        }
+
+        @Throws(IOException::class)
+        override fun write(out: JsonWriter, value: T?) {
+            if (value == null) {
+                out.nullValue()
+                return
+            }
+
+            out.beginObject()
+            try {
+                for (boundField in boundFields.values) {
+                    if (boundField.writeField(value)) {
+                        out.name(boundField.name)
+                        boundField.write(out, value)
+                    }
+                }
+            } catch (e: IllegalAccessException) {
+                throw AssertionError(e)
+            }
+
+            out.endObject()
+        }
+    }
+}
diff --git a/gson/src/test/java/com/economic/persistgson/persist/PersistJsonElementReaderTest.kt b/gson/src/test/java/com/economic/persistgson/persist/PersistJsonElementReaderTest.kt
new file mode 100644
index 000000000..325b7cc30
--- /dev/null
+++ b/gson/src/test/java/com/economic/persistgson/persist/PersistJsonElementReaderTest.kt
@@ -0,0 +1,10 @@
+package com.economic.persistgson.persist
+
+import junit.framework.TestCase
+
+/**
+ * Created by Tudor Dragan on 04/05/2017.
+ * Copyright © e-conomic.com
+ */
+
+class PersistJsonElementReaderTest : TestCase()
\ No newline at end of file
