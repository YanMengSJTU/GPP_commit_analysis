diff --git a/gson/src/main/java/com/google/gson/GetterSetterMethodAttributes.java b/gson/src/main/java/com/google/gson/GetterSetterMethodAttributes.java
index cba34c803..bf53d322e 100644
--- a/gson/src/main/java/com/google/gson/GetterSetterMethodAttributes.java
+++ b/gson/src/main/java/com/google/gson/GetterSetterMethodAttributes.java
@@ -2,8 +2,13 @@
 
 import com.google.gson.internal.$Gson$Preconditions;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
 
 /**
  * Created by apple on 03.12.17.
@@ -13,14 +18,14 @@
     private final Method method;
     private final Type fieldType;
 
-    public GetterSetterMethodAttributes(Method method){
+    public GetterSetterMethodAttributes(Method method) {
         $Gson$Preconditions.checkNotNull(method);
         this.method = method;
-        if(isGetter()){
+        if (isGetter()) {
             this.fieldType = method.getGenericReturnType();
-        } else if (isSetter()){
-            Type [] setterArgTypes =  method.getGenericParameterTypes();
-            if(setterArgTypes.length != 1){
+        } else if (isSetter()) {
+            Type[] setterArgTypes = method.getGenericParameterTypes();
+            if (setterArgTypes.length != 1) {
                 throw new IllegalArgumentException("Setter should take exactly one argument. " +
                         "Received setter method  " + method.getName() +
                         "which takes " + setterArgTypes.length + " arguments"
@@ -29,22 +34,20 @@ public GetterSetterMethodAttributes(Method method){
             this.fieldType = setterArgTypes[0];
         } else {
             throw new IllegalArgumentException(
-                    "Expected getter or setter method. Received method "+ method.getName()
+                    "Expected getter or setter method. Received method " + method.getName()
             );
         }
     }
 
-    public boolean isGetter(){
-        String methodName = method.getName();
-        return methodName.substring(0, 2).equals("is") || methodName.substring(0, 3).equals("get");
+    public boolean isGetter() {
+        return GetterSetterReflectionHelper.isGetter(method.getName());
     }
 
-    public boolean isSetter(){
-        String methodName = method.getName();
-        return methodName.substring(0, 3).equals("set");
+    public boolean isSetter() {
+        return GetterSetterReflectionHelper.isSetter(method.getName());
     }
 
-    public String getVirtualFieldName(){
+    public String getVirtualFieldName() {
         String methodName = method.getName();
         if (methodName.substring(0, 2).equals("is")) {
             return methodName.substring(2, 3).toLowerCase() + methodName.substring(3);
@@ -59,7 +62,123 @@ public String getVirtualFieldName(){
         return method.getDeclaringClass();
     }
 
-    public Type getDeclaredVirtualFieldType(){
+    public Type getDeclaredVirtualFieldType() {
         return this.fieldType;
     }
+
+    public static class GetterSetterReflectionHelper {
+        public static String getGetterName(Field field) {
+            String fieldName = field.getName();
+            String getterPrefix = field.getType() == boolean.class || field.getType() == Boolean.class ? "is" : "get";
+            return getterPrefix + fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1);
+        }
+
+        public static String getSetterName(Field field) {
+            return "set" + field.getName().substring(0, 1).toUpperCase() + field.getName().substring(1);
+        }
+
+        public static boolean isGetter(String methodName) {
+            return methodName.substring(0, 2).equals("is") || methodName.substring(0, 3).equals("get");
+        }
+
+        public static boolean isGetter(Method method) {
+            return isGetter(method.getName());
+        }
+
+        public static boolean isSetter(String methodName) {
+            return methodName.substring(0, 3).equals("set");
+        }
+
+        public static boolean isSetter(Method method) {
+            return isSetter(method.getName());
+        }
+
+        public static boolean classHasField(Class<?> cls, String fieldName){
+            try{
+                cls.getField(fieldName);
+                return true;
+            } catch (NoSuchFieldException e) {
+                return false;
+            } catch (SecurityException e) {
+                return false;
+            }
+        }
+
+        public static boolean fieldHasGetter(Field field) {
+            String getterName = getGetterName(field);
+            Class<?> cls = field.getDeclaringClass();
+            try {
+                cls.getMethod(getterName);
+                return true;
+            } catch (NoSuchMethodException e) {
+                return false;
+            } catch (SecurityException e) {
+                return false;
+            }
+        }
+
+        public static boolean fieldHasSetter(Field field) {
+            String setterName = getSetterName(field);
+            Class<?> cls = field.getDeclaringClass();
+            try {
+                cls.getMethod(setterName, Object.class); //TODO: make sure Object works here
+                return true;
+            } catch (NoSuchMethodException e) {
+                return false;
+            } catch (SecurityException e) {
+                return false;
+            }
+        }
+
+        public static Method[] getAllGetters(Class cls, boolean declaredOnly) {
+            Set<Method> getters = new HashSet<>();
+            Method[] methods = declaredOnly ? cls.getDeclaredMethods() : cls.getMethods();
+            for (Method m : methods) {
+                if (isGetter(m)) {
+                    getters.add(m);
+                }
+            }
+            return getters.toArray(new Method[]{});
+        }
+
+        public static Method[] getAllSetters(Class cls, boolean declaredOnly) {
+            Set<Method> setters = new HashSet<>();
+            Method[] methods = declaredOnly ? cls.getDeclaredMethods() : cls.getMethods();
+            for (Method m : methods) {
+                if (isSetter(m)) {
+                    setters.add(m);
+                }
+            }
+            return setters.toArray(new Method[]{});
+        }
+
+        /**
+         * Returns an array of Method objects, keeping only the methods (getters, setters)
+         * for which no actual field with the corresponding name exists
+         *
+         * @param methods
+         * @return
+         */
+        public static Method[] filterVirtualFieldMethods(Method[] methods){
+            List<Method> vms = new ArrayList<>();
+            for (Method m: methods){
+                Class<?> cls = m.getDeclaringClass();
+                if(!classHasField(cls, fieldNameFromGetterOrSetter(m))){
+                    vms.add(m);
+                }
+            }
+            return vms.toArray(new Method[]{});
+        }
+
+        public static String fieldNameFromGetterOrSetter(Method getter) {
+            String methodName = getter.getName();
+            if (methodName.substring(0, 2).equals("is")) {
+                return methodName.substring(2, 3).toLowerCase() + methodName.substring(3);
+            } else if (methodName.substring(0, 3).equals("get") || methodName.substring(0, 3).equals("set")) {
+                return methodName.substring(3, 4).toLowerCase() + methodName.substring(4);
+            } else {
+                throw new IllegalArgumentException("The passed method with the name " + methodName + "is not a getter");
+            }
+        }
+    }
 }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
index dabcbd705..f2d436d39 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -16,22 +16,15 @@
 
 package com.google.gson.internal.bind;
 
-import com.google.gson.FieldNamingStrategy;
-import com.google.gson.Gson;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
+import com.google.gson.*;
 import com.google.gson.annotations.JsonAdapter;
 import com.google.gson.annotations.SerializedName;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.Excluder;
-import com.google.gson.internal.ObjectConstructor;
-import com.google.gson.internal.Primitives;
+import com.google.gson.internal.*;
 import com.google.gson.reflect.TypeToken;
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonToken;
 import com.google.gson.stream.JsonWriter;
+
 import java.io.IOException;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
@@ -43,369 +36,387 @@
  * Type adapter that reflects over the fields and methods of a class.
  */
 public final class ReflectiveTypeAdapterFactory implements TypeAdapterFactory {
-  private final ConstructorConstructor constructorConstructor;
-  private final FieldNamingStrategy fieldNamingPolicy;
-  private final Excluder excluder;
-  private final JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;
-
-  public ReflectiveTypeAdapterFactory(ConstructorConstructor constructorConstructor,
-                                      FieldNamingStrategy fieldNamingPolicy, Excluder excluder,
-                                      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory) {
-    this.constructorConstructor = constructorConstructor;
-    this.fieldNamingPolicy = fieldNamingPolicy;
-    this.excluder = excluder;
-    this.jsonAdapterFactory = jsonAdapterFactory;
-  }
-
-  public boolean excludeField(Field f, boolean serialize) {
-    return excludeField(f, serialize, excluder);
-  }
-
-  static boolean excludeField(Field f, boolean serialize, Excluder excluder) {
-    return !excluder.excludeClass(f.getType(), serialize) && !excluder.excludeField(f, serialize);
-  }
-
-  /** first element holds the default name */
-  private List<String> getFieldNames(Field f) {
-    SerializedName annotation = f.getAnnotation(SerializedName.class);
-    if (annotation == null) {
-      String name = fieldNamingPolicy.translateName(f);
-      return Collections.singletonList(name);
+    private final ConstructorConstructor constructorConstructor;
+    private final FieldNamingStrategy fieldNamingPolicy;
+    private final Excluder excluder;
+    private final JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;
+
+    public ReflectiveTypeAdapterFactory(ConstructorConstructor constructorConstructor,
+                                        FieldNamingStrategy fieldNamingPolicy, Excluder excluder,
+                                        JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory) {
+        this.constructorConstructor = constructorConstructor;
+        this.fieldNamingPolicy = fieldNamingPolicy;
+        this.excluder = excluder;
+        this.jsonAdapterFactory = jsonAdapterFactory;
     }
 
-    String serializedName = annotation.value();
-    String[] alternates = annotation.alternate();
-    if (alternates.length == 0) {
-      return Collections.singletonList(serializedName);
+    public boolean excludeField(Field f, boolean serialize) {
+        return excludeField(f, serialize, excluder);
     }
 
-    List<String> fieldNames = new ArrayList<String>(alternates.length + 1);
-    fieldNames.add(serializedName);
-    for (String alternate : alternates) {
-      fieldNames.add(alternate);
+    static boolean excludeField(Field f, boolean serialize, Excluder excluder) {
+        return !excluder.excludeClass(f.getType(), serialize) && !excluder.excludeField(f, serialize);
     }
-    return fieldNames;
-  }
 
-  @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
-    Class<? super T> raw = type.getRawType();
+    boolean includeGetterOrSetter(Method m, boolean serialize) {
+        return includeGetterOrSetter(m, serialize, excluder);
+    }
 
-    if (!Object.class.isAssignableFrom(raw)) {
-      return null; // it's a primitive!
+    static boolean includeGetterOrSetter(Method m, boolean serialize, Excluder excluder) {
+        return !excluder.excludeGetterOrSetter(m, serialize);
     }
 
-    ObjectConstructor<T> constructor = constructorConstructor.get(type);
-    return new Adapter<T>(constructor, getBoundFields(gson, type, raw));
-  }
 
+    /**
+     * first element holds the default name
+     */
+    private List<String> getFieldNames(Field f) {
+        SerializedName annotation = f.getAnnotation(SerializedName.class);
+        if (annotation == null) {
+            String name = fieldNamingPolicy.translateName(f);
+            return Collections.singletonList(name);
+        }
+
+        String serializedName = annotation.value();
+        String[] alternates = annotation.alternate();
+        if (alternates.length == 0) {
+            return Collections.singletonList(serializedName);
+        }
 
-  private Map<String, BoundField> getBoundFields(Gson context, TypeToken<?> type, Class<?> raw) {
-    Map<String, BoundField> result = new LinkedHashMap<String, BoundField>();
-    if (raw.isInterface()) {
-      return result;
+        List<String> fieldNames = new ArrayList<String>(alternates.length + 1);
+        fieldNames.add(serializedName);
+        for (String alternate : alternates) {
+            fieldNames.add(alternate);
+        }
+        return fieldNames;
     }
 
-    Type declaredType = type.getType();
-    while (raw != Object.class) {
-      Field[] fields = raw.getDeclaredFields();
-      for (Field field : fields) {
-        boolean serialize = excludeField(field, true);
-        boolean deserialize = excludeField(field, false);
-        if (!serialize && !deserialize) {
-          continue;
+    @Override
+    public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
+        Class<? super T> raw = type.getRawType();
+
+        if (!Object.class.isAssignableFrom(raw)) {
+            return null; // it's a primitive!
         }
-        field.setAccessible(true);
-        Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());
-        List<String> fieldNames = getFieldNames(field);
-        BoundField previous = null;
-        for (int i = 0, size = fieldNames.size(); i < size; ++i) {
-          String name = fieldNames.get(i);
-          if (i != 0) serialize = false; // only serialize the default name
-          GetterSetterSerializedField wrapped = new GetterSetterSerializedField(
-                  name, fieldType, context, field
-          );
-          /*
-          BoundField boundField = createBoundField(context, field, name,
-              TypeToken.get(fieldType), serialize, deserialize);
-          */
-          BoundField boundField = wrapped.createBoundField(serialize, deserialize);
-          BoundField replaced = result.put(name, boundField);
-          if (previous == null) previous = replaced;
+
+        ObjectConstructor<T> constructor = constructorConstructor.get(type);
+        return new Adapter<T>(constructor, getBoundFields(gson, type, raw));
+    }
+
+
+    private Map<String, BoundField> getBoundFields(Gson context, TypeToken<?> type, Class<?> raw) {
+        Map<String, BoundField> result = new LinkedHashMap<String, BoundField>();
+        if (raw.isInterface()) {
+            return result;
         }
-        if (previous != null) {
-          throw new IllegalArgumentException(declaredType
-                  + " declares multiple JSON fields named " + previous.name);
+
+        Type declaredType = type.getType();
+        while (raw != Object.class) {
+            Field[] fields = raw.getDeclaredFields();
+            for (Field field : fields) {
+                boolean serialize = excludeField(field, true);
+                boolean deserialize = excludeField(field, false);
+                if (!serialize && !deserialize) {
+                    continue;
+                }
+                field.setAccessible(true);
+                Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());
+                List<String> fieldNames = getFieldNames(field);
+                BoundField previous = null;
+                for (int i = 0, size = fieldNames.size(); i < size; ++i) {
+                    String name = fieldNames.get(i);
+                    if (i != 0) serialize = false; // only serialize the default name
+                    GetterSetterSerializedField wrapped = new GetterSetterSerializedField(
+                            name, fieldType, context, field
+                    );
+                    BoundField boundField = wrapped.createBoundField(serialize, deserialize);
+                    BoundField replaced = result.put(name, boundField);
+                    if (previous == null) previous = replaced;
+                }
+                if (previous != null) {
+                    throw new IllegalArgumentException(declaredType
+                            + " declares multiple JSON fields named " + previous.name);
+                }
+                // Serialization of "virtual" fields, defined by getters only
+                // TODO: support deserialization
+                if (context.useGetterSetter()) {
+                    Method[] getters = GetterSetterMethodAttributes.GetterSetterReflectionHelper.filterVirtualFieldMethods(
+                            GetterSetterMethodAttributes.GetterSetterReflectionHelper.getAllGetters(raw, true)
+                    );
+                    for (Method getter : getters) {
+                        serialize = includeGetterOrSetter(getter, true);
+                        deserialize = includeGetterOrSetter(getter, false);
+                        if (!serialize && !deserialize) {
+                            continue;
+                        }
+                        GetterSetterSerializedVirtualField wrapped = new GetterSetterSerializedVirtualField(
+                            getter, context
+                        );
+                        result.put(wrapped.name, wrapped.createBoundField(serialize, deserialize));
+                    }
+                }
+            }
+            type = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));
+            raw = type.getRawType();
         }
-        /*
-        if(context.useGetterSetter()){
-          Method[] getters = ReflectionHelper.getAllGetters(raw, true);
-          for (Method getter: getters){
-            serialize = excludeField(field, true);
-          }
+        return result;
+    }
+
+
+    abstract class GeneralizedField {
+        final String name;
+        final Type fieldType;
+        final TypeToken<?> typeToken;
+        final Gson context;
+
+        GeneralizedField(String name, Type fieldType, Gson context) {
+            this.name = name;
+            this.fieldType = fieldType;
+            this.typeToken = TypeToken.get(fieldType);
+            this.context = context;
         }
-        */
 
+        abstract TypeAdapter<?> getTypeAdapter();
 
-      }
-      type = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));
-      raw = type.getRawType();
-    }
-    return result;
-  }
-
-  static class ReflectionHelper{
-    static String getGetterName(Field field){
-      String fieldName = field.getName();
-      String getterPrefix = field.getType() == boolean.class || field.getType() == Boolean.class ? "is" : "get";
-      return getterPrefix + fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1);
-    }
+        abstract Object getValue(Object instance) throws IllegalAccessException;
 
-    static String getSetterName(Field field){
-      return "set" + field.getName().substring(0, 1).toUpperCase() + field.getName().substring(1);
-    }
+        abstract void setValue(Object instance, Object value) throws IllegalAccessException;
 
-    static boolean fieldHasGetter(Field field){
-      String getterName = getGetterName(field);
-      Class<?> cls = field.getDeclaringClass();
-      try{
-        cls.getMethod(getterName, new Class[]{});
-        return true;
-      } catch (NoSuchMethodException e){
-        return false;
-      } catch (SecurityException e){
-        return false;
-      }
-    }
+        abstract boolean isRuntimeWrapped();
 
-    static Method[] getAllGetters(Class cls, boolean declaredOnly) {
-      Set<Method> getters = new HashSet<>();
-      Method[] methods = declaredOnly ? cls.getDeclaredMethods() : cls.getMethods();
-      for (Method m : methods) {
-        String name = m.getName();
-        if (name.substring(0, 2).equals("is") || name.substring(0, 3).equals("get")) {
-          getters.add(m);
-        }
+        ReflectiveTypeAdapterFactory.BoundField createBoundField(boolean serialize, boolean deserialize) {
+            return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
 
-      }
-      return getters.toArray(new Method[]{});
-    }
+                @Override
+                boolean writeField(Object value) throws IOException, IllegalAccessException {
+                    if (!serialized) return false;
+                    Object fieldValue = getValue(value);
+                    return fieldValue != value; // avoid recursion for example for Throwable.cause
+                }
 
-    static String fieldNameFromGetter(Method getter) {
-      String getterName = getter.getName();
-      if (getterName.substring(0, 2).equals("is")) {
-        return getterName.substring(2, 3).toLowerCase() + getterName.substring(3);
-      } else if (getterName.substring(0, 3).equals("get")) {
-        return getterName.substring(3, 4).toLowerCase() + getterName.substring(4);
-      } else {
-        throw new IllegalArgumentException("The passed method with the name " + getterName + "is not a getter");
-      }
-    }
-  }
-
-  abstract class GeneralizedField {
-    final String name;
-    final Type fieldType;
-    final TypeToken<?> typeToken;
-    final Gson context;
-
-    GeneralizedField(String name, Type fieldType, Gson context){
-      this.name = name;
-      this.fieldType = fieldType;
-      this.typeToken = TypeToken.get(fieldType);
-      this.context = context;
+                @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
+                @Override
+                void write(JsonWriter writer, Object instance) throws IOException, IllegalAccessException {
+                    TypeAdapter t = isRuntimeWrapped() ? getTypeAdapter()
+                            : new TypeAdapterRuntimeTypeWrapper(context, getTypeAdapter(), typeToken.getType());
+                    t.write(writer, getValue(instance));
+                }
+
+                @Override
+                void read(JsonReader reader, Object instance) throws IOException, IllegalAccessException {
+                    Object fieldValue = getTypeAdapter().read(reader);
+                    final boolean isPrimitive = Primitives.isPrimitive(typeToken.getRawType());
+                    if (fieldValue != null || !isPrimitive) {
+                        setValue(instance, fieldValue);
+                    }
+                }
+            };
+
+        }
     }
 
-    abstract TypeAdapter<?> getTypeAdapter();
-    abstract Object getValue(Object instance) throws IllegalAccessException;
-    abstract void setValue(Object instance, Object value) throws IllegalAccessException;
-    abstract boolean isRuntimeWrapped();
+    class StandardField extends GeneralizedField {
+
+        private final TypeAdapter<?> typeAdapter;
+        private final boolean jsonAdapterPresent;
+        protected final Field field;
+
+        StandardField(String name, Type fieldType, Gson context, Field field) {
+            super(name, fieldType, context);
+            JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
+            TypeAdapter<?> mapped = null;
+            if (annotation != null) {
+                mapped = jsonAdapterFactory.getTypeAdapter(
+                        constructorConstructor, context, this.typeToken, annotation);
+            }
+            jsonAdapterPresent = mapped != null;
+            if (mapped == null) mapped = context.getAdapter(this.typeToken);
+            typeAdapter = mapped;
+            this.field = field;
+        }
 
-    ReflectiveTypeAdapterFactory.BoundField createBoundField(boolean serialize, boolean deserialize) {
-      return new  ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
 
         @Override
-        boolean writeField(Object value) throws IOException, IllegalAccessException {
-          if (!serialized) return false;
-          Object fieldValue = getValue(value);
-          return fieldValue != value; // avoid recursion for example for Throwable.cause
+        TypeAdapter<?> getTypeAdapter() {
+            return this.typeAdapter;
         }
 
-        @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
         @Override
-        void write(JsonWriter writer, Object instance) throws IOException, IllegalAccessException {
-          TypeAdapter t = isRuntimeWrapped() ? getTypeAdapter()
-                  : new TypeAdapterRuntimeTypeWrapper(context, getTypeAdapter(), typeToken.getType());
-          t.write(writer, getValue(instance));
+        Object getValue(Object instance) throws IllegalAccessException {
+            return field.get(instance);
         }
 
         @Override
-        void read(JsonReader reader, Object instance) throws IOException, IllegalAccessException {
-          Object fieldValue = getTypeAdapter().read(reader);
-          final boolean isPrimitive = Primitives.isPrimitive(typeToken.getRawType());
-          if (fieldValue != null || !isPrimitive) {
-            setValue(instance, fieldValue);
-          }
+        void setValue(Object instance, Object value) throws IllegalAccessException {
+            field.set(instance, value);
         }
-      };
 
-    }
-  }
-
-  class StandardField extends GeneralizedField{
-
-    private final TypeAdapter<?> typeAdapter;
-    private final boolean jsonAdapterPresent;
-    protected final Field field;
-
-    StandardField(String name, Type fieldType, Gson context, Field field){
-      super(name, fieldType, context);
-      JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
-      TypeAdapter<?> mapped = null;
-      if (annotation != null) {
-        mapped = jsonAdapterFactory.getTypeAdapter(
-                constructorConstructor, context, this.typeToken, annotation);
-      }
-      jsonAdapterPresent = mapped != null;
-      if (mapped == null) mapped = context.getAdapter(this.typeToken);
-      typeAdapter = mapped;
-      this.field = field;
+        @Override
+        boolean isRuntimeWrapped() {
+            return jsonAdapterPresent;
+        }
     }
 
+    class GetterSetterSerializedField extends StandardField {
 
-    @Override
-    TypeAdapter<?> getTypeAdapter() {
-      return this.typeAdapter;
-    }
+        private final boolean useGetterSetter;
 
-    @Override
-    Object getValue(Object instance) throws IllegalAccessException {
-      return field.get(instance);
-    }
+        GetterSetterSerializedField(String name, Type fieldType, Gson context, Field field) {
+            super(name, fieldType, context, field);
+            this.useGetterSetter = context.useGetterSetter();
+        }
 
-    @Override
-    void setValue(Object instance, Object value) throws IllegalAccessException {
-      field.set(instance, value);
-    }
+        @Override
+        Object getValue(Object instance) throws IllegalAccessException {
+            if (!useGetterSetter || !GetterSetterMethodAttributes.GetterSetterReflectionHelper.fieldHasGetter(field)) {
+                return super.getValue(instance);
+            } else {
+                String getterName = GetterSetterMethodAttributes.GetterSetterReflectionHelper.getGetterName(field);
+                try {
+                    Method method = instance.getClass().getMethod(getterName);
+                    return method.invoke(instance);
+                } catch (NoSuchMethodException | InvocationTargetException ignored) {
+                    // TODO: revisit this
+                    return super.getValue(instance);
+                }
+            }
+        }
 
-    @Override
-    boolean isRuntimeWrapped() {
-      return jsonAdapterPresent;
+        @Override
+        void setValue(Object instance, Object value) throws IllegalAccessException {
+            if (!useGetterSetter) {
+                super.setValue(instance, value);
+            } else {
+                String setterName = GetterSetterMethodAttributes.GetterSetterReflectionHelper.getSetterName(field);
+                try {
+                    Method method = instance.getClass().getMethod(setterName, field.getType());
+                    method.invoke(instance, value);
+                } catch (NoSuchMethodException | InvocationTargetException e) {
+                    // TODO: revisit this
+                    super.setValue(instance, value);
+                }
+            }
+        }
     }
-  }
 
-  class GetterSetterSerializedField extends StandardField{
+    class GetterSetterSerializedVirtualField extends GeneralizedField {
 
-    private final boolean useGetterSetter;
+        private Method method;
 
-    GetterSetterSerializedField(String name, Type fieldType, Gson context, Field field) {
-      super(name, fieldType, context, field);
-      this.useGetterSetter = context.useGetterSetter();
-    }
+        GetterSetterSerializedVirtualField(Method method, Gson context) {
+            this(GetterSetterMethodAttributes.GetterSetterReflectionHelper.fieldNameFromGetterOrSetter(method),
+                    new GetterSetterMethodAttributes(method).getDeclaredVirtualFieldType(), context);
+            $Gson$Preconditions.checkArgument( // Only support getters for now
+                    GetterSetterMethodAttributes.GetterSetterReflectionHelper.isGetter(method)
+            );
+            this.method = method;
+        }
 
-    @Override
-    Object getValue(Object instance) throws IllegalAccessException {
-      if(!useGetterSetter || !ReflectionHelper.fieldHasGetter(field)){
-        return super.getValue(instance);
-      } else {
-        String getterName = ReflectionHelper.getGetterName(field);
-        try {
-          Method method = instance.getClass().getMethod(getterName);
-          return method.invoke(instance);
-        } catch (NoSuchMethodException | InvocationTargetException ignored) {
-          // TODO: revisit this
-          return super.getValue(instance);
+        GetterSetterSerializedVirtualField(String name, Type fieldType, Gson context) {
+            super(name, fieldType, context);
         }
-      }
-    }
 
-    @Override
-    void setValue(Object instance, Object value) throws IllegalAccessException {
-      if(!useGetterSetter){
-        super.setValue(instance, value);
-      } else {
-        String setterName = ReflectionHelper.getSetterName(field);
-        try {
-          Method method = instance.getClass().getMethod(setterName, field.getType());
-          method.invoke(instance, value);
-        } catch (NoSuchMethodException | InvocationTargetException e){
-          // TODO: revisit this
-          super.setValue(instance, value);
+        @Override
+        TypeAdapter<?> getTypeAdapter() {
+            return context.getAdapter(this.typeToken);
         }
-      }
-    }
-  }
 
+        @Override
+        Object getValue(Object instance) throws IllegalAccessException {
+            try {
+                return method.invoke(instance);
+            } catch (InvocationTargetException e) {
+                throw new RuntimeException(e);
+            }
+        }
 
-  static abstract class BoundField {
-    final String name;
-    final boolean serialized;
-    final boolean deserialized;
+        @Override
+        void setValue(Object instance, Object value) throws IllegalAccessException {
+            throw new UnsupportedOperationException("Setting values for virtual fields not yet supported");
+        }
 
-    protected BoundField(String name, boolean serialized, boolean deserialized) {
-      this.name = name;
-      this.serialized = serialized;
-      this.deserialized = deserialized;
-    }
-    abstract boolean writeField(Object value) throws IOException, IllegalAccessException;
-    abstract void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException;
-    abstract void read(JsonReader reader, Object value) throws IOException, IllegalAccessException;
-  }
-
-  public static final class Adapter<T> extends TypeAdapter<T> {
-    private final ObjectConstructor<T> constructor;
-    private final Map<String, BoundField> boundFields;
-
-    Adapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundFields) {
-      this.constructor = constructor;
-      this.boundFields = boundFields;
+        @Override
+        boolean isRuntimeWrapped() {
+            return false; // TODO: Revisit this
+        }
     }
 
-    @Override public T read(JsonReader in) throws IOException {
-      if (in.peek() == JsonToken.NULL) {
-        in.nextNull();
-        return null;
-      }
-
-      T instance = constructor.construct();
-
-      try {
-        in.beginObject();
-        while (in.hasNext()) {
-          String name = in.nextName();
-          BoundField field = boundFields.get(name);
-          if (field == null || !field.deserialized) {
-            in.skipValue();
-          } else {
-            field.read(in, instance);
-          }
+
+    static abstract class BoundField {
+        final String name;
+        final boolean serialized;
+        final boolean deserialized;
+
+        protected BoundField(String name, boolean serialized, boolean deserialized) {
+            this.name = name;
+            this.serialized = serialized;
+            this.deserialized = deserialized;
         }
-      } catch (IllegalStateException e) {
-        throw new JsonSyntaxException(e);
-      } catch (IllegalAccessException e) {
-        throw new AssertionError(e);
-      }
-      in.endObject();
-      return instance;
+
+        abstract boolean writeField(Object value) throws IOException, IllegalAccessException;
+
+        abstract void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException;
+
+        abstract void read(JsonReader reader, Object value) throws IOException, IllegalAccessException;
     }
 
-    @Override public void write(JsonWriter out, T value) throws IOException {
-      if (value == null) {
-        out.nullValue();
-        return;
-      }
-
-      out.beginObject();
-      try {
-        for (BoundField boundField : boundFields.values()) {
-          if (boundField.writeField(value)) {
-            out.name(boundField.name);
-            boundField.write(out, value);
-          }
+    public static final class Adapter<T> extends TypeAdapter<T> {
+        private final ObjectConstructor<T> constructor;
+        private final Map<String, BoundField> boundFields;
+
+        Adapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundFields) {
+            this.constructor = constructor;
+            this.boundFields = boundFields;
+        }
+
+        @Override
+        public T read(JsonReader in) throws IOException {
+            if (in.peek() == JsonToken.NULL) {
+                in.nextNull();
+                return null;
+            }
+
+            T instance = constructor.construct();
+
+            try {
+                in.beginObject();
+                while (in.hasNext()) {
+                    String name = in.nextName();
+                    BoundField field = boundFields.get(name);
+                    if (field == null || !field.deserialized) {
+                        in.skipValue();
+                    } else {
+                        field.read(in, instance);
+                    }
+                }
+            } catch (IllegalStateException e) {
+                throw new JsonSyntaxException(e);
+            } catch (IllegalAccessException e) {
+                throw new AssertionError(e);
+            }
+            in.endObject();
+            return instance;
+        }
+
+        @Override
+        public void write(JsonWriter out, T value) throws IOException {
+            if (value == null) {
+                out.nullValue();
+                return;
+            }
+
+            out.beginObject();
+            try {
+                for (BoundField boundField : boundFields.values()) {
+                    if (boundField.writeField(value)) {
+                        out.name(boundField.name);
+                        boundField.write(out, value);
+                    }
+                }
+            } catch (IllegalAccessException e) {
+                throw new AssertionError(e);
+            }
+            out.endObject();
         }
-      } catch (IllegalAccessException e) {
-        throw new AssertionError(e);
-      }
-      out.endObject();
     }
-  }
 }
