diff --git a/.travis.yml b/.travis.yml
deleted file mode 100644
index ee50d51cb..000000000
--- a/.travis.yml
+++ /dev/null
@@ -1,21 +0,0 @@
-language: java
-
-jdk:
-  - oraclejdk7
-  - oraclejdk8
-
-install: mvn -f gson install -DskipTests=true
-script: mvn -f gson test
-
-branches:
-  except:
-    - gh-pages
-
-notifications:
-  email: false
-
-sudo: false
-
-cache:
-  directories:
-    - $HOME/.m2
diff --git a/CHANGELOG.md b/CHANGELOG.md
deleted file mode 100644
index 09f1388fa..000000000
--- a/CHANGELOG.md
+++ /dev/null
@@ -1,372 +0,0 @@
-Change Log
-==========
-
-## Version 2.8.1
-_2016-10-26_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.0...gson-parent-2.8.1)
- * New: `JsonObject.keySet()`
-
-## Version 2.8
-_2016-10-26_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.7...gson-parent-2.8.0)
- * New: `TypeToken.getParameterized()` and `TypeToken.getArray()` make it easier to
-   register or look up a `TypeAdapter`.
- * New: `@JsonAdapter(nullSafe=true)` to specify that a custom type adapter handles null.
-
-## Version 2.7
-_2016-06-14_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.6.2...gson-parent-2.7)
- * Added support for JsonSerializer/JsonDeserializer in @JsonAdapter annotation
- * Exposing Gson properties excluder(), fieldNamingStrategy(), serializeNulls(), htmlSafe()
- * Added JsonObject.size() method
- * Added JsonWriter.value(Boolean value) method
- * Using ArrayDeque, ConcurrentHashMap, and other JDK 1.6 features
- * Better error reporting
- * Plenty of other bug fixes
-
-## Version 2.6.2
-_2016-02-26_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.6.1...gson-parent-2.6.2)
- * Fixed an NPE bug with @JsonAdapter annotation
- * Added back OSGI manifest
- * Some documentation typo fixes
-
-## Version 2.6.1
-
-_2016-02-11_ [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.6...gson-parent-2.6.1)
-
- * Fix: The 2.6 release targeted Java 1.7, but we intend to target Java 1.6. The
-   2.6.1 release is identical to 2.6, but it targets Java 1.6.
-
-
-## Version 2.6
-
-_2016-02-11_ [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.5...gson-parent-2.6)
-
- * Permit timezones without minutes in the default date adapter.
- * Update reader and writer for RFC 7159. This means that strings, numbers,
-   booleans and null may be top-level values in JSON documents, even if the
-   reader is strict.
- * New `setLenient()` method on `GsonBuilder`. This setting impacts the new
-   factory method `Gson.newJsonReader()`.
- * Adapters discovered with `@JsonAdapter` are now null safe by default.
-
-
-## Version 2.5
-
-_2015-11-24_ [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.4...gson-parent-2.5)
-
- * Updated minimum JDK version to 1.6
- * Improved Date Deserialization by accepting many date formats
- * Added support for `java.util.Currency`, `AtomicLong`, `AtomicLongArray`, `AtomicInteger`, `AtomicIntegerArray`, `AtomicBoolean`. This change is backward-incompatible because the earlier version of Gson used the default serialization which wasn't intuitive. We hope that these classes are not used enough to actually cause problems in the field.
- * Improved debugging information when some exceptions are thrown
-
-
-## Version 2.4
-
-_2015-10-04_
-
- * **Drop `IOException` from `TypeAdapter.toJson()`.** This is a binary-compatible change, but may
-   cause compiler errors where `IOExceptions` are being caught but no longer thrown. The correct fix
-   for this problem is to remove the unnecessary `catch` clause.
- * New: `Gson.newJsonWriter` method returns configured `JsonWriter` instances.
- * New: `@SerializedName` now works with [AutoValue’s][autovalue] abstract property methods.
- * New: `@SerializedName` permits alternate names when deserializing.
- * New: `JsonWriter#jsonValue` writes raw JSON values.
- * New: APIs to add primitives directly to `JsonArray` instances.
- * New: ISO 8601 date type adapter. Find this in _extras_.
- * Fix: `FieldNamingPolicy` now works properly when running on a device with a Turkish locale.
-  [autovalue]: https://github.com/google/auto/tree/master/value
-
-
-## Version 2.3.1
-
-_2014-11-20_
-
- * Added support to serialize objects with self-referential fields. The self-referential field is set to null in JSON. Previous version of Gson threw a StackOverflowException on encountering any self-referential fields.
-   * The most visible impact of this is that Gson can now serialize Throwable (Exception and Error)
- * Added support for @JsonAdapter annotation on enums which are user defined types
- * Fixed bug in getPath() with array of objects and arrays of arrays
- * Other smaller bug fixes
-
-
-## Version 2.3
-
-_2014-08-11_
-
- * The new @JsonAdapter annotation to specify a Json TypeAdapter for a class field
- * JsonPath support: JsonReader.getPath() method returns the JsonPath expression
- * New public methods in JsonArray (similar to the java.util.List): `contains(JsonElement), remove(JsonElement), remove(int index), set(int index, JsonElement element)`
- * Many other smaller bug fixes
-
-
-## Version 2.2.4
-
-_2013-05-13_
-
- * Fix internal map (LinkedHashTreeMap) hashing bug.
- * Bug fix (Issue 511)
-
-
-## Version 2.2.3
-
-_2013-04-12_
-
- * Fixes for possible DoS attack due to poor String hashing
-
-
-## Version 2.2.2
-
-_2012-07-02_
-
- * Gson now allows a user to override default type adapters for Primitives and Strings. This behavior was allowed in earlier versions of Gson but was prohibited started Gson 2.0. We decided to allow it again: This enables a user to parse 1/0 as boolean values for compatibility with iOS JSON libraries.
- * (Incompatible behavior change in `JsonParser`): In the past, if `JsonParser` encountered a stream that terminated prematurely, it returned `JsonNull`. This behavior wasn't correct because the stream had invalid JSON, not a null. `JsonParser` is now changed to throw `JsonSyntaxException` in this case. Note that if JsonParser (or Gson) encounter an empty stream, they still return `JsonNull`.
-
-
-## Version 2.2.1
-
-_2012-05-05_
-
- * Very minor fixes
-
-
-## Version 2.2
-
-_2012-05-05_
-
- * Added getDelegateAdapter in Gson class
- * Fixed a security bug related to denial of service attack with Java HashMap String collisions.
-
-
-## Version 2.1
-
-_2011-12-30_ (Targeted Dec 31, 2011)
-
- * Support for user-defined streaming type adapters
- * continued performance enhancements
- * Dropped support for type hierarchy instance creators. We don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, this might actually be an improvement!
-
-
-## Version 2.0
-
-_2011-11-13_
-
-#### Faster
-
- * Previous versions first parsed complete document into a DOM-style model (JsonObject or JsonArray) and then bound data against that. Gson 2 does data binding directly from the stream parser.
-
-#### More Predictable
-
- * Objects are serialized and deserialized in the same way, regardless of where they occur in the object graph.
-
-#### Changes to watch out for
-
-  * Gson 1.7 would serialize top-level nulls as "". 2.0 serializes them as "null".
-    ```
-    String json = gson.toJson(null, Foo.class);
-    1.7: json == ""
-    2.0: json == "null"
-    ```
-
-  * Gson 1.7 permitted duplicate map keys. 2.0 forbids them.
-    ```
-    String json = "{'a':1,'a':2}";
-    Map<String, Integer> map = gson.fromJson(json, mapType);
-    1.7: map == {a=2}
-    2.0: JsonSyntaxException thrown
-    ```
-
-  * Gson 1.7 won’t serialize subclass fields in collection elements. 2.0 adds this extra information.
-    ```
-    List<Point2d> points = new ArrayList<Point2d>();
-    points.add(new Point3d(1, 2, 3));
-    String json = gson.toJson(points,
-        new TypeToken<List<Point2d>>() {}.getType());
-    1.7: json == "[{'x':1,'y':2}]"
-    2.0: json == "[{'x':1,'y':2,'z':3}]"
-    ```
-
-  * Gson 1.7 binds single-element arrays as their contents. 2.0 doesn’t.
-    ```
-    Integer i = gson.fromJson("[42]", Integer.class);
-    1.7: i == 42
-    2.0: JsonSyntaxException thrown
-    ```
-
-#### Other changes to be aware of
- * Gson 2.0 doesn’t support type adapters for primitive types.
- * Gson 1.7 uses arbitrary precision for primitive type conversion (so -122.08e-2132 != 0). Gson 2.0 uses double precision (so -122.08e-2132 == 0).
- * Gson 1.7 sets subclass fields when an InstanceCreator returns a subclass when the value is a field of another object. Gson 2.0 sets fields of the requested type only.
- * Gson 1.7 versioning never skips the top-level object. Gson 2.0 versioning applies to all objects.
- * Gson 1.7 truncates oversized large integers. Gson 2.0 fails on them.
- * Gson 2.0 permits integers to have .0 fractions like "1.0".
- * Gson 1.7 throws IllegalStateException on circular references. Gson 2.0 lets the runtime throw a StackOverflowError.
-
-
-## Version 1.7.2
-
-_2011-09-30_ (Unplanned release)
- * Fixed a threading issue in FieldAttributes (Issue 354)
-
-
-## Version 1.7.1
-
-_2011-04-13_ (Unplanned release)
-
- * Fixed Gson jars in Maven Central repository
- * Removed assembly-descriptor.xml and maven pom.xml/pom.properties files from Gson binary jar. This also ensures that jarjar can be run correctly on Gson.
-
-
-## Version 1.7
-
-_2011-04-12_ (Targeted: Jan 2011)
-
- * No need to define no-args constructors for classes serialized with Gson
- * Ability to register a hierarchical type adapter
- * Support for serialization and deserialization of maps with complex keys
- * Serialization and deserialization specific exclusion strategies
- * Allow concrete data structure fields without type adapters
- * Fixes "type" management (i.e. Wildcards, etc.)
- * Major performance enhancements by reducing the need for Java reflection
-See detailed announcement at this thread in the Gson Google Group.
-
-
-## Version 1.6
-
-_2010-11-24_ (Targeted: Oct, 2010)
-
- * New stream parser APIs
- * New parser that improves parsing performance significantly
-
-
-## Version 1.5
-
-_2010-08-19_ (Target Date: Aug 18, 2010)
-
- * Added `UPPER_CAMEL_CASE_WITH_SPACES` naming policy
- * Added SQL date and time support
- * A number of performance improvements: Using caching of field annotations for speeding up reflection, replacing recursive calls in the parser with a for loop.
-
-
-## Version 1.4 BETA
-
-_2009_10_09_
-
- * JsonStreamParser: A streaming parser API class to deserialize multiple JSON objects on a stream (such as a pipelined HTTP response)
- * Raised the deserialization limit for byte and object arrays and collection to over 11MB from 80KB. See issue 96.
- * While serializing, Gson now uses the actual type of a field. This allows serialization of base-class references holding sub-classes to the JSON for the sub-class. It also allows serialization of raw collections. See Issue 155, 156.
- * Added a `Gson.toJsonTree()` method that serializes a Java object to a tree of JsonElements. See issue 110.
- * Added a `Gson.fromJson(JsonElement)` method that deserializes from a Json parse tree.
- * Updated `Expose` annotation to contain parameters serialize and deserialize to control whether a field gets serialized or deserialized. See issue 146.
- * Added a new naming policy `LOWER_CASE_WITH_DASHES`
- * Default date type adapter is now thread-safe. See Issue 162.
- * `JsonElement.toString()` now outputs valid JSON after escaping characters properly. See issue 154.
- * `JsonPrimitive.equals()` now returns true for two numbers if their values are equal. All integral types (long, int, short, byte, BigDecimal, Long, Integer, Short, Byte) are treated equivalent for comparison. Similarly, floating point types (double, float, BigDecimal, Double, Float) are treated equivalent as well. See issue 147.
- * Fixed bugs in pretty printing. See issue 153.
- * If a field causes circular reference error, Gson lists the field name instead of the object value. See issue 118.
- * Gson now serializes a list with null elements correctly. See issue 117.
- * Fixed issue 121, 123, 126.
- * Support user defined exclusion strategies (Feature Request 138).
-
-
-## Version 1.3
-
-_2009-04-01_
-
- * Fix security token to remove the `<data>` element.
- * Changed JsonParser.parse method to be non-static
- * Throw JsonParseExceptions instead of ClassCastExceptions and UnsupportedOperationExceptions
-
-
-## Version 1.3 beta3
-
-_2009-03-17_
-
- * Supported custom mapping of field names by making `FieldNamingStrategy` public and allowing `FieldNamingStrategy` to be set in GsonBuilder. See issue 104.
- * Added a new GsonBuilder setting `generateNonExecutableJson()` that prefixes the generated JSON with some text to make the output non-executable Javascript. Gson now recognizes this text from input while deserializing and filters it out. This feature is meant to prevent script sourcing attacks. See Issue 42.
- * Supported deserialization of sets with elements that do not implement Comparable. See Issue 100
- * Supported deserialization of floating point numbers without a sign after E. See Issue 94
-
-
-## Version 1.3 beta2
-
-_2009-02-05_
-
- * Added a new Parser API. See issue 65
- * Supported deserialization of java.util.Properties. See Issue 87
- * Fixed the pretty printing of maps. See Issue 93
- * Supported automatic conversion of strings into numeric and boolean types if possible. See Issue 89
- * Supported deserialization of longs into strings. See Issue 82
-
-
-## Version 1.3 beta1
-
-_2009_01_ (Target Date Friday, Dec 15, 2008)
-
- * Made JSON parser lenient by allowing unquoted member names while parsing. See Issue 41
- * Better precision handling for floating points. See Issue 71, 72
- * Support for deserialization of special double values: NaN, infinity and negative infinity. See Issue 81
- * Backward compatibility issue found with serialization of `Collection<Object>` type.  See Issue 73 and 83.
- * Able to serialize null keys and/or values within a Map.  See Issue 77
- * Deserializing non-String value keys for Maps.  See Issue 85.
-
- * Support for clashing field name.  See Issue 76.
- * Removed the need to invoke instance creator if a deserializer is registered. See issues 37 and 69.
- * Added default support for java.util.UUID. See Issue 79
- * Changed `Gson.toJson()` methods to use `Appendable` instead of `Writer`. Issue 52. This requires that clients recompile their source code that uses Gson.
-
-
-## Version 1.2.3
-
-_2008-11-15_ (Target Date Friday, Oct 31, 2008)
-
- * Added support to serialize raw maps. See issue 45
- * Made Gson thread-safe by fixing Issue 63
- * Fixed Issue 68 to allow default type adapters for primitive types to be replaced by custom type adapters.
- * Relaxed the JSON parser to accept escaped slash (\/) as a valid character in the string. See Issue 66
-
-
-## Version 1.2.2
-
-_2008-10-14_ (Target Date: None, Unplanned)
-
- * This version was released to fix Issue 58 which caused a regression bug in version 1.2.1. It includes the contents from the release 1.2.1
-
-
-## Version 1.2.1
-
-_2008-10-13_ (Target Date Friday, Oct 7, 2008)
-
-**Note:** This release was abandoned since it caused a regression (Issue 58) bug.
-
- * Includes updated parser for JSON that supports much larger strings. For example, Gson 1.2 failed at parsing a 100k string, Gson 1.2.1 has successfully parsed strings of size 15-20MB. The parser also is faster and consumes less memory since it uses a token match instead of a recursion-based Grammar production match. See Issue 47.
- * Gson now supports field names with single quotes ' in addition to double quotes ". See Issue 55.
- * Includes bug fixes for issue 46, 49, 51, 53, 54, and 56.
-
-
-## Version 1.2
-
-_2008-08-29_ (Target Date Tuesday Aug 26, 2008)
-
- * Includes support for feature requests 21, 24, 29
- * Includes bug fixes for Issue 22, Issue 23, Issue 25, Issue 26, Issue 32 , Issue 34, Issue 35, Issue 36, Issue 37, Issue 38, Issue 39
- * Performance enhancements (see r137)
- * Documentation updates
-
-
-## Version 1.1.1
-
-_2008-07-18_ (Target Date Friday, Aug 1, 2008)
-
- * Includes fixes for Issue 19, Partial fix for Issue 20
-
-
-## Version 1.1
-
-_2008-07-01_ (Target Date Thursday, July 3, 2008)
-
- * Includes fixes for Issue 9, Issue 16, Issue 18
-
-
-## Version 1.0.1
-
-_2008-06-17_ (Target Date Friday,  Jun 13, 2008)
-
- * Includes fixes for Issue 15, Issue 14, Issue 3, Issue 8
- * Javadoc improvements
diff --git a/GsonDesignDocument.md b/GsonDesignDocument.md
deleted file mode 100644
index 2c3702ee1..000000000
--- a/GsonDesignDocument.md
+++ /dev/null
@@ -1,57 +0,0 @@
-# Gson Design Document
-
-This document presents issues that we faced while designing Gson. It is meant for advanced users or developers working on Gson. If you are interested in learning how to use Gson, see its user guide. 
-
-**Navigating the Json tree or the target Type Tree while deserializing**
-
-When you are deserializing a Json string into an object of desired type, you can either navigate the tree of the input, or the type tree of the desired type. Gson uses the latter approach of navigating the type of the target object. This keeps you in tight control of instantiating only the type of objects that you are expecting (essentially validating the input against the expected "schema"). By doing this, you also ignore any extra fields that the Json input has but were not expected. 
-
-As part of Gson, we wrote a general purpose ObjectNavigator that can take any object and navigate through its fields calling a visitor of your choice. 
-
-**Supporting richer serialization semantics than deserialization semantics**
-
-Gson supports serialization of arbitrary collections, but can only deserialize genericized collections. this means that Gson can, in some cases, fail to deserialize Json that it wrote. This is primarily a limitation of the Java type system since when you encounter a Json array of arbitrary types there is no way to detect the types of individual elements. We could have chosen to restrict the serialization to support only generic collections, but chose not to.This is because often the user of the library are concerned with either serialization or deserialization, but not both. In such cases, there is no need to artificially restrict the serialization capabilities. 
-
-**Supporting serialization and deserialization of classes that are not under your control and hence can not be modified**
-
-Some Json libraries use annotations on fields or methods to indicate which fields should be used for Json serialization. That approach essentially precludes the use of classes from JDK or third-party libraries. We solved this problem by defining the notion of Custom serializers and deserializers. This approach is not new, and was used by the JAX-RPC technology to solve essentially the same problem. 
-
-**Using Checked vs Unchecked exceptions to indicate a parsing error**
-
-We chose to use unchecked exceptions to indicate a parsing failure. This is primarily done because usually the client can not recover from bad input, and hence forcing them to catch a checked exception results in sloppy code in the catch() block. 
-
-**Creating class instances for deserialization**
-
-Gson needs to create a dummy class instance before it can deserialize Json data into its fields. We could have used Guice to get such an instance, but that would have resulted in a dependency on Guice. Moreover, it probably would have done the wrong thing since Guice is expected to return a valid instance, whereas we need to create a dummy one. Worse, Gson would overwrite the fields of that instance with the incoming data there by modifying the instance for all subsequent Guice injections. This is clearly not a desired behavior. Hence, we create class instances by invoking the parameterless constructor. We also handle the primitive types, enums, collections, sets, maps and trees as a special case. 
-
-To solve the problem of supporting unmodifiable types, we use custom instance creators. So, if you want to use a library types that does not define a default constructor (for example, Money class), then you can register an instance creator that returns a dummy instance when asked.
-
-**Using fields vs getters to indicate Json elements**
-
-Some Json libraries use the getters of a type to deduce the Json elements. We chose to use all fields (up the inheritance hierarchy) that are not transient, static, or synthetic. We did this because not all classes are written with suitably named getters. Moreover, getXXX or isXXX might be semantic rather than indicating properties. 
-
-However, there are good arguments to support properties as well. We intend to enhance Gson in a latter version to support properties as an alternate mapping for indicating Json fields. For now, Gson is fields-based. 
-
-**Why are most classes in Gson marked as final?**
-
-While Gson provides a fairly extensible architecture by providing pluggable serializers and deserializers, Gson classes were not specifically designed to be extensible. Providing non-final classes would have allowed a user to legitimately extend Gson classes, and then expect that behavior to work in all subsequent revisions. We chose to limit such use-cases by marking classes as final, and waiting until a good use-case emerges to allow extensibility. Marking a class final also has a minor benefit of providing additional optimization opportunities to Java compiler and virtual machine. 
-
-**Why are inner interfaces and classes used heavily in Gson?**
-
-Gson uses inner classes substantially. Many of the public interfaces are inner interfaces too (see JsonSerializer.Context or JsonDeserializer.Context as an example). These are primarily done as a matter of style. For example, we could have moved JsonSerializer.Context to be a top-level class JsonSerializerContext, but chose not to do so. However, if you can give us good reasons to rename it alternately, we are open to changing this philosophy. 
-
-**Why do you provide two ways of constructing Gson?**
-
-Gson can be constructed in two ways: by invoking new Gson() or by using a GsonBuilder. We chose to provide a simple no-args constructor to handle simple use-cases for Gson where you want to use default options, and quickly want to get going with writing code. For all other situations, where you need to configure Gson with options such as formatters, version controls etc, we use a builder pattern. The builder pattern allows a user to specify multiple optional settings for what essentially become constructor parameters for Gson. 
-
-**Comparing Gson with Alternate Approaches**
-
-Note that these comparisons were done while developing Gson so these date back to mid to late 2007.
-
-__Comparing Gson with org.json library__
-
-org.json is a much lower-level library that can be used to write a toJson() method in a class. If you can not use Gson directly (may be because of platform restrictions regarding reflection), you could use org.json to hand-code a toJson method in each object. 
-
-__Comparing Gson with org.json.simple library__
-
-org.json.simple library is very similar to org.json library and hence fairly low level. The key issue with this library is that it does not handle exceptions very well. In some cases it appeared to just eat the exception while in other cases it throws an "Error" rather than an exception.
diff --git a/LICENSE b/LICENSE
index d64569567..892eaed8f 100644
--- a/LICENSE
+++ b/LICENSE
@@ -1,202 +1,203 @@
-
-                                 Apache License
-                           Version 2.0, January 2004
-                        http://www.apache.org/licenses/
-
-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-   1. Definitions.
-
-      "License" shall mean the terms and conditions for use, reproduction,
-      and distribution as defined by Sections 1 through 9 of this document.
-
-      "Licensor" shall mean the copyright owner or entity authorized by
-      the copyright owner that is granting the License.
-
-      "Legal Entity" shall mean the union of the acting entity and all
-      other entities that control, are controlled by, or are under common
-      control with that entity. For the purposes of this definition,
-      "control" means (i) the power, direct or indirect, to cause the
-      direction or management of such entity, whether by contract or
-      otherwise, or (ii) ownership of fifty percent (50%) or more of the
-      outstanding shares, or (iii) beneficial ownership of such entity.
-
-      "You" (or "Your") shall mean an individual or Legal Entity
-      exercising permissions granted by this License.
-
-      "Source" form shall mean the preferred form for making modifications,
-      including but not limited to software source code, documentation
-      source, and configuration files.
-
-      "Object" form shall mean any form resulting from mechanical
-      transformation or translation of a Source form, including but
-      not limited to compiled object code, generated documentation,
-      and conversions to other media types.
-
-      "Work" shall mean the work of authorship, whether in Source or
-      Object form, made available under the License, as indicated by a
-      copyright notice that is included in or attached to the work
-      (an example is provided in the Appendix below).
-
-      "Derivative Works" shall mean any work, whether in Source or Object
-      form, that is based on (or derived from) the Work and for which the
-      editorial revisions, annotations, elaborations, or other modifications
-      represent, as a whole, an original work of authorship. For the purposes
-      of this License, Derivative Works shall not include works that remain
-      separable from, or merely link (or bind by name) to the interfaces of,
-      the Work and Derivative Works thereof.
-
-      "Contribution" shall mean any work of authorship, including
-      the original version of the Work and any modifications or additions
-      to that Work or Derivative Works thereof, that is intentionally
-      submitted to Licensor for inclusion in the Work by the copyright owner
-      or by an individual or Legal Entity authorized to submit on behalf of
-      the copyright owner. For the purposes of this definition, "submitted"
-      means any form of electronic, verbal, or written communication sent
-      to the Licensor or its representatives, including but not limited to
-      communication on electronic mailing lists, source code control systems,
-      and issue tracking systems that are managed by, or on behalf of, the
-      Licensor for the purpose of discussing and improving the Work, but
-      excluding communication that is conspicuously marked or otherwise
-      designated in writing by the copyright owner as "Not a Contribution."
-
-      "Contributor" shall mean Licensor and any individual or Legal Entity
-      on behalf of whom a Contribution has been received by Licensor and
-      subsequently incorporated within the Work.
-
-   2. Grant of Copyright License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      copyright license to reproduce, prepare Derivative Works of,
-      publicly display, publicly perform, sublicense, and distribute the
-      Work and such Derivative Works in Source or Object form.
-
-   3. Grant of Patent License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      (except as stated in this section) patent license to make, have made,
-      use, offer to sell, sell, import, and otherwise transfer the Work,
-      where such license applies only to those patent claims licensable
-      by such Contributor that are necessarily infringed by their
-      Contribution(s) alone or by combination of their Contribution(s)
-      with the Work to which such Contribution(s) was submitted. If You
-      institute patent litigation against any entity (including a
-      cross-claim or counterclaim in a lawsuit) alleging that the Work
-      or a Contribution incorporated within the Work constitutes direct
-      or contributory patent infringement, then any patent licenses
-      granted to You under this License for that Work shall terminate
-      as of the date such litigation is filed.
-
-   4. Redistribution. You may reproduce and distribute copies of the
-      Work or Derivative Works thereof in any medium, with or without
-      modifications, and in Source or Object form, provided that You
-      meet the following conditions:
-
-      (a) You must give any other recipients of the Work or
-          Derivative Works a copy of this License; and
-
-      (b) You must cause any modified files to carry prominent notices
-          stating that You changed the files; and
-
-      (c) You must retain, in the Source form of any Derivative Works
-          that You distribute, all copyright, patent, trademark, and
-          attribution notices from the Source form of the Work,
-          excluding those notices that do not pertain to any part of
-          the Derivative Works; and
-
-      (d) If the Work includes a "NOTICE" text file as part of its
-          distribution, then any Derivative Works that You distribute must
-          include a readable copy of the attribution notices contained
-          within such NOTICE file, excluding those notices that do not
-          pertain to any part of the Derivative Works, in at least one
-          of the following places: within a NOTICE text file distributed
-          as part of the Derivative Works; within the Source form or
-          documentation, if provided along with the Derivative Works; or,
-          within a display generated by the Derivative Works, if and
-          wherever such third-party notices normally appear. The contents
-          of the NOTICE file are for informational purposes only and
-          do not modify the License. You may add Your own attribution
-          notices within Derivative Works that You distribute, alongside
-          or as an addendum to the NOTICE text from the Work, provided
-          that such additional attribution notices cannot be construed
-          as modifying the License.
-
-      You may add Your own copyright statement to Your modifications and
-      may provide additional or different license terms and conditions
-      for use, reproduction, or distribution of Your modifications, or
-      for any such Derivative Works as a whole, provided Your use,
-      reproduction, and distribution of the Work otherwise complies with
-      the conditions stated in this License.
-
-   5. Submission of Contributions. Unless You explicitly state otherwise,
-      any Contribution intentionally submitted for inclusion in the Work
-      by You to the Licensor shall be under the terms and conditions of
-      this License, without any additional terms or conditions.
-      Notwithstanding the above, nothing herein shall supersede or modify
-      the terms of any separate license agreement you may have executed
-      with Licensor regarding such Contributions.
-
-   6. Trademarks. This License does not grant permission to use the trade
-      names, trademarks, service marks, or product names of the Licensor,
-      except as required for reasonable and customary use in describing the
-      origin of the Work and reproducing the content of the NOTICE file.
-
-   7. Disclaimer of Warranty. Unless required by applicable law or
-      agreed to in writing, Licensor provides the Work (and each
-      Contributor provides its Contributions) on an "AS IS" BASIS,
-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-      implied, including, without limitation, any warranties or conditions
-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
-      PARTICULAR PURPOSE. You are solely responsible for determining the
-      appropriateness of using or redistributing the Work and assume any
-      risks associated with Your exercise of permissions under this License.
-
-   8. Limitation of Liability. In no event and under no legal theory,
-      whether in tort (including negligence), contract, or otherwise,
-      unless required by applicable law (such as deliberate and grossly
-      negligent acts) or agreed to in writing, shall any Contributor be
-      liable to You for damages, including any direct, indirect, special,
-      incidental, or consequential damages of any character arising as a
-      result of this License or out of the use or inability to use the
-      Work (including but not limited to damages for loss of goodwill,
-      work stoppage, computer failure or malfunction, or any and all
-      other commercial damages or losses), even if such Contributor
-      has been advised of the possibility of such damages.
-
-   9. Accepting Warranty or Additional Liability. While redistributing
-      the Work or Derivative Works thereof, You may choose to offer,
-      and charge a fee for, acceptance of support, warranty, indemnity,
-      or other liability obligations and/or rights consistent with this
-      License. However, in accepting such obligations, You may act only
-      on Your own behalf and on Your sole responsibility, not on behalf
-      of any other Contributor, and only if You agree to indemnify,
-      defend, and hold each Contributor harmless for any liability
-      incurred by, or claims asserted against, such Contributor by reason
-      of your accepting any such warranty or additional liability.
-
-   END OF TERMS AND CONDITIONS
-
-   APPENDIX: How to apply the Apache License to your work.
-
-      To apply the Apache License to your work, attach the following
-      boilerplate notice, with the fields enclosed by brackets "[]"
-      replaced with your own identifying information. (Don't include
-      the brackets!)  The text should be enclosed in the appropriate
-      comment syntax for the file format. We also recommend that a
-      file or class name and description of purpose be included on the
-      same "printed page" as the copyright notice for easier
-      identification within third-party archives.
-
-   Copyright [yyyy] [name of copyright owner]
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
+Google Gson
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright 2008-2011 Google Inc.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
diff --git a/README.md b/README.md
index 2648a7ea5..9e49968c6 100644
--- a/README.md
+++ b/README.md
@@ -1,53 +1,16 @@
-# google-gson
-
-[![Build Status](https://travis-ci.org/google/gson.svg?branch=master)](https://travis-ci.org/google/gson)
-[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson)
-[![Javadoc](https://javadoc-emblem.rhcloud.com/doc/com.google.code.gson/gson/badge.svg)](http://www.javadoc.io/doc/com.google.code.gson/gson)
-
-Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object.
-Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of. 
-
-There are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals. 
-
-### Gson Goals
-  * Provide simple `toJson()` and `fromJson()` methods to convert Java objects to JSON and vice-versa
-  * Allow pre-existing unmodifiable objects to be converted to and from JSON
-  * Extensive support of Java Generics
-  * Allow custom representations for objects
-  * Support arbitrarily complex objects (with deep inheritance hierarchies and extensive use of generic types)
-
-### Gson Download and Maven
-  * [Gson Download](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson) downloads at Maven Central
-  * For Maven check "Dependency Information" tab, on the left side.
-
-### Gson Documentation
-  * Gson [API](http://www.javadoc.io/doc/com.google.code.gson/gson): Javadocs for the current Gson release
-  * Gson [user guide](https://github.com/google/gson/blob/master/UserGuide.md): This guide contains examples on how to use Gson in your code.
-  * Gson [Roadmap](https://github.com/google/gson/blob/master/CHANGELOG.md): Details of changes in the recent versions
-  * Gson [design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion
-
-Please use the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson, or to post questions. 
-
-### Gson-related Content Created by Third Parties
-  * [Gson Tutorial](http://www.studytrails.com/java/json/java-google-json-introduction.jsp) by `StudyTrails`
-  * [Gson Tutorial Series](https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization) by `Future Studio`
-
-### License
-
-Gson is released under the [Apache 2.0 license](LICENSE).
-
-```
-Copyright 2008 Google Inc.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-```
+# Persist Gson
+Gson is a Java library that can be used to convert a Java object into its 
+JSON representation. It can also be used to convert a JSON string into an 
+equivalent Java object. Gson can work with arbitrary Java objects including 
+pre-existing objects that you do not have source-code of.
+
+Complete Gson documentation is available at its project page 
+https://github.com/google/gson
+
+## Important information
+
+This repo is a fork of [Google's Gson](https://github.com/google/gson) library. The library has 
+been modified to provide persist functionality for our models. The library is being used in the 
+[econ-android-foundation](https://github.com/e-conomic/econ-android-foundation). Because we have
+added Kotlin files in the library, the `kotlin` compiler is needed to build the current version of 
+the library. 
diff --git a/ReleaseProcess.md b/ReleaseProcess.md
deleted file mode 100644
index f75ce398e..000000000
--- a/ReleaseProcess.md
+++ /dev/null
@@ -1,92 +0,0 @@
-#Gson Release Process
-
-The following is a step-by-step procedure for releasing a new version of Google-Gson.
-
-1. Go through all open bugs and identify which will be fixed in this release. Mark all others with an appropriate release tag. Identify duplicates, and close the bugs that will never be fixed. Fix all bugs for the release, and mark them fixed.
-1. Edit [`pom.xml`](pom.xml) and update the versions listed for Export-Package to the target version. Also add any new Java packages that have been introduced in Gson.
-1. Ensure all changelists are code-reviewed and have +1
-1. Ensure that your `~/.m2/settings.xml` is configured properly (see steps below)
-1. `cd gson`; ensure there are no open files and all changes are committed.
-1. Run `mvn release:clean`
-1. Do a dry run: `mvn release:prepare -DdryRun=true`
-1. Start the release: `mvn release:prepare`
-  * Answer questions: usually the defaults are fine.
-  * This will do a full build, change version from `-SNAPSHOT` to the released version, commit and create the tags. It will then change the version to `-SNAPSHOT` for the next release.
-1. Ensure you have defined `sonatype-nexus-staging` in your Maven `settings.xml` and run:
-
-   ```bash
-   mvn -s /home/<username>/.m2/settings.xml release:perform
-   ```
-
-1. [Log in to Nexus repository manager](https://oss.sonatype.org/index.html#welcome) at Sonatype and close the staging repository for Gson. If you run into an error regarding missing signatures, you need to manually upload the artifacts using `mvn gpg:sign-and-deploy-file` for Gson binary, source and Javadoc jars.
-
-  ```bash
-  cp -r ~/.m2/repository/com/google/code/gson/gson/1.7.2 /tmp
-  cd /tmp/1.7.2
-
-  mvn gpg:sign-and-deploy-file \
-      -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \
-      -DrepositoryId=sonatype-nexus-staging \
-      -DpomFile=gson-1.7.2.pom \
-      -Dfile=gson-1.7.2-javadoc.jar \
-      -Dclassifier=javadoc
-
-  mvn gpg:sign-and-deploy-file \
-      -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \
-      -DrepositoryId=sonatype-nexus-staging \
-      -DpomFile=gson-1.7.2.pom \
-      -Dfile=gson-1.7.2-sources.jar \
-      -Dclassifier=sources
-
-  mvn gpg:sign-and-deploy-file \
-      -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \
-      -DrepositoryId=sonatype-nexus-staging \
-      -DpomFile=gson-1.7.2.pom \
-      -Dfile=gson-1.7.2.jar
-  ```
-
-1. Close the Gson repository. Download and sanity check all downloads. Do not skip this step! Once you release the staging repository, there is no going back. It will get synced with Maven central and you will not be able to update or delete anything. Your only recourse will be to release a new version of Gson and hope that no one uses the old one.
-1. Release the staging repository for Gson. Gson will now get synced to Maven central with-in the next hour. For issues consult [Sonatype Guide](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8.ReleaseIt).
-
-1. Update the version in the [Using Gson with Maven2 page](https://github.com/google/gson/blob/master/UserGuide.md#TOC-Gson-With-Maven)
-1. Update [Gson Changelog](https://github.com/google/gson/blob/master/CHANGELOG.md). Also, look at all bugs that were fixed and add a few lines describing what changed in the release.
-1. Create a post on the [Gson Discussion Forum](http://groups.google.com/group/google-gson)
-1. Update the release version in [Wikipedia](http://en.wikipedia.org/wiki/GSON) and update the current "stable" release.
-
-## Configuring a machine for deployment to Sonatype Repository
-
-This section was borrowed heavily from [Doclava release process](http://code.google.com/p/doclava/wiki/ProcessRelease).
-
-1. Install/Configure GPG following this [guide](http://www.sonatype.com/people/2010/01/how-to-generate-pgp-signatures-with-maven/).
-2. [Create encrypted passwords](http://maven.apache.org/guides/mini/guide-encryption.html).
-3. Create `~/.m2/settings.xml` similar to as described in [Doclava release process](https://code.google.com/p/doclava/wiki/ProcessRelease).
-4. Now for deploying a snapshot repository, use `mvn deploy`.
-
-## Getting Maven Publishing Privileges
-
-Based on [Gson group thread](https://groups.google.com/d/topic/google-gson/DHWJHVFpIBg/discussion):
-
-1. [Sign up for a Sonatype account](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide) following instructions under (2) on that page
-2. Ask one of the existing members of the repository to create a JIRA ticket (Step 3 of above document) to add you to the publisher list.
-
-## Running Benchmarks or Tests on Android
-
-* Download vogar
-* Put `adb` on your `$PATH` and run:
-
-  ```bash
-  vogar --benchmark --classpath gson.jar path/to/Benchmark.java
-  ```
-
-For example, here is how to run the [CollectionsDeserializationBenchmark](gson/src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java):
-
-```bash
-export ANDROID_HOME=~/apps/android-sdk-mac_x86
-export PATH=$PATH:$ANDROID_HOME/platform-tools/:$ANDROID_HOME/android-sdk-mac_x86/tools/
-$VOGAR_HOME/bin/vogar \
-    --benchmark \
-    --sourcepath ../gson/src/main/java/ \
-    src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java \
-    -- \
-    --vm "app_process -Xgc:noconcurrent,app_process"
-```
diff --git a/UserGuide.md b/UserGuide.md
deleted file mode 100644
index e829a4b51..000000000
--- a/UserGuide.md
+++ /dev/null
@@ -1,662 +0,0 @@
-# Gson User Guide
-
-1. [Overview](#TOC-Overview)
-2. [Goals for Gson](#TOC-Goals-for-Gson)
-3. [Gson Performance and Scalability](#TOC-Gson-Performance-and-Scalability)
-4. [Gson Users](#TOC-Gson-Users)
-5. [Using Gson](#TOC-Using-Gson)
-   * [Using Gson with Maven](#TOC-Gson-With-Maven)
-   * [Primitives Examples](#TOC-Primitives-Examples)
-   * [Object Examples](#TOC-Object-Examples)
-   * [Finer Points with Objects](#TOC-Finer-Points-with-Objects)
-   * [Nested Classes (including Inner Classes)](#TOC-Nested-Classes-including-Inner-Classes-)
-   * [Array Examples](#TOC-Array-Examples)
-   * [Collections Examples](#TOC-Collections-Examples)
-     * [Collections Limitations](#TOC-Collections-Limitations)
-   * [Serializing and Deserializing Generic Types](#TOC-Serializing-and-Deserializing-Generic-Types)
-   * [Serializing and Deserializing Collection with Objects of Arbitrary Types](#TOC-Serializing-and-Deserializing-Collection-with-Objects-of-Arbitrary-Types)
-   * [Built-in Serializers and Deserializers](#TOC-Built-in-Serializers-and-Deserializers)
-   * [Custom Serialization and Deserialization](#TOC-Custom-Serialization-and-Deserialization)
-     * [Writing a Serializer](#TOC-Writing-a-Serializer)
-     * [Writing a Deserializer](#TOC-Writing-a-Deserializer)
-   * [Writing an Instance Creator](#TOC-Writing-an-Instance-Creator)
-     * [InstanceCreator for a Parameterized Type](#TOC-InstanceCreator-for-a-Parameterized-Type)
-   * [Compact Vs. Pretty Printing for JSON Output Format](#TOC-Compact-Vs.-Pretty-Printing-for-JSON-Output-Format)
-   * [Null Object Support](#TOC-Null-Object-Support)
-   * [Versioning Support](#TOC-Versioning-Support)
-   * [Excluding Fields From Serialization and Deserialization](#TOC-Excluding-Fields-From-Serialization-and-Deserialization)
-     * [Java Modifier Exclusion](#TOC-Java-Modifier-Exclusion)
-     * [Gson's `@Expose`](#TOC-Gson-s-Expose)
-     * [User Defined Exclusion Strategies](#TOC-User-Defined-Exclusion-Strategies)
-   * [JSON Field Naming Support](#TOC-JSON-Field-Naming-Support)
-   * [Sharing State Across Custom Serializers and Deserializers](#TOC-Sharing-State-Across-Custom-Serializers-and-Deserializers)
-   * [Streaming](#TOC-Streaming)
-6. [Issues in Designing Gson](#TOC-Issues-in-Designing-Gson)
-7. [Future Enhancements to Gson](#TOC-Future-Enhancements-to-Gson)
-
-## <a name="TOC-Overview"></a>Overview
-
-Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object.
-
-Gson can work with arbitrary Java objects including pre-existing objects that you do not have source code of.
-
-## <a name="TOC-Goals-for-Gson"></a>Goals for Gson
-
-* Provide easy to use mechanisms like `toString()` and constructor (factory method) to convert Java to JSON and vice-versa
-* Allow pre-existing unmodifiable objects to be converted to and from JSON
-* Allow custom representations for objects
-* Support arbitrarily complex objects
-* Generate compact and readable JSON output
-
-## <a name="TOC-Gson-Performance-and-Scalability"></a>Gson Performance and Scalability
-
-Here are some metrics that we obtained on a desktop (dual opteron, 8GB RAM, 64-bit Ubuntu) running lots of other things along-with the tests. You can rerun these tests by using the class [`PerformanceTest`](gson/src/test/java/com/google/gson/metrics/PerformanceTest.java).
-
-* Strings: Deserialized strings of over 25MB without any problems (see `disabled_testStringDeserializationPerformance` method in `PerformanceTest`)
-* Large collections:
-  * Serialized a collection of 1.4 million objects (see `disabled_testLargeCollectionSerialization` method in `PerformanceTest`)
-  * Deserialized a collection of 87,000 objects (see `disabled_testLargeCollectionDeserialization` in `PerformanceTest`)
-* Gson 1.4 raised the deserialization limit for byte arrays and collection to over 11MB from 80KB.
-
-Note: Delete the `disabled_` prefix to run these tests. We use this prefix to prevent running these tests every time we run JUnit tests.
-
-## <a name="TOC-Gson-Users"></a>Gson Users
-
-Gson was originally created for use inside Google where it is currently used in a number of projects. It is now used by a number of public projects and companies.
-
-## <a name="TOC-Using-Gson"></a>Using Gson
-
-The primary class to use is [`Gson`](gson/src/main/java/com/google/gson/Gson.java) which you can just create by calling `new Gson()`. There is also a class [`GsonBuilder`](gson/src/main/java/com/google/gson/GsonBuilder.java) available that can be used to create a Gson instance with various settings like version control and so on.
-
-The Gson instance does not maintain any state while invoking Json operations. So, you are free to reuse the same object for multiple Json serialization and deserialization operations.
-
-## <a name="TOC-Gson-With-Maven"></a>Using Gson with Maven
-To use Gson with Maven2/3, you can use the Gson version available in Maven Central by adding the following dependency:
-
-```xml
-<dependencies>
-    <!--  Gson: Java to Json conversion -->
-    <dependency>
-      <groupId>com.google.code.gson</groupId>
-      <artifactId>gson</artifactId>
-      <version>2.8.0</version>
-      <scope>compile</scope>
-    </dependency>
-</dependencies>
-```
-
-That is it, now your maven project is Gson enabled. 
-
-### <a name="TOC-Primitives-Examples"></a>Primitives Examples
-
-```java
-// Serialization
-Gson gson = new Gson();
-gson.toJson(1);            // ==> 1
-gson.toJson("abcd");       // ==> "abcd"
-gson.toJson(new Long(10)); // ==> 10
-int[] values = { 1 };
-gson.toJson(values);       // ==> [1]
-
-// Deserialization
-int one = gson.fromJson("1", int.class);
-Integer one = gson.fromJson("1", Integer.class);
-Long one = gson.fromJson("1", Long.class);
-Boolean false = gson.fromJson("false", Boolean.class);
-String str = gson.fromJson("\"abc\"", String.class);
-String[] anotherStr = gson.fromJson("[\"abc\"]", String[].class);
-```
-
-### <a name="TOC-Object-Examples"></a>Object Examples
-
-```java
-class BagOfPrimitives {
-  private int value1 = 1;
-  private String value2 = "abc";
-  private transient int value3 = 3;
-  BagOfPrimitives() {
-    // no-args constructor
-  }
-}
-
-// Serialization
-BagOfPrimitives obj = new BagOfPrimitives();
-Gson gson = new Gson();
-String json = gson.toJson(obj);  
-
-// ==> json is {"value1":1,"value2":"abc"}
-```
-
-Note that you can not serialize objects with circular references since that will result in infinite recursion.
-
-```java
-// Deserialization
-BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);
-// ==> obj2 is just like obj
-```
-
-#### <a name="TOC-Finer-Points-with-Objects"></a>**Finer Points with Objects**
-
-* It is perfectly fine (and recommended) to use private fields
-* There is no need to use any annotations to indicate a field is to be included for serialization and deserialization. All fields in the current class (and from all super classes) are included by default.
-* If a field is marked transient, (by default) it is ignored and not included in the JSON serialization or deserialization.
-* This implementation handles nulls correctly
-* While serializing, a null field is skipped from the output
-* While deserializing, a missing entry in JSON results in setting the corresponding field in the object to null
-* If a field is _synthetic_, it is ignored and not included in JSON serialization or deserialization
-* Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization
-
-### <a name="TOC-Nested-Classes-including-Inner-Classes-"></a>Nested Classes (including Inner Classes)
-
-Gson can serialize static nested classes quite easily.
-
-Gson can also deserialize static nested classes. However, Gson can **not** automatically deserialize the **pure inner classes since their no-args constructor also need a reference to the containing Object** which is not available at the time of deserialization. You can address this problem by either making the inner class static or by providing a custom InstanceCreator for it. Here is an example:
-
-```java
-public class A { 
-  public String a; 
-
-  class B { 
-
-    public String b; 
-
-    public B() {
-      // No args constructor for B
-    }
-  } 
-}
-```
-
-**NOTE**: The above class B can not (by default) be serialized with Gson.
-
-Gson can not deserialize `{"b":"abc"}` into an instance of B since the class B is an inner class. If it was defined as static class B then Gson would have been able to deserialize the string. Another solution is to write a custom instance creator for B. 
-
-```java
-public class InstanceCreatorForB implements InstanceCreator<A.B> {
-  private final A a;
-  public InstanceCreatorForB(A a)  {
-    this.a = a;
-  }
-  public A.B createInstance(Type type) {
-    return a.new B();
-  }
-}
-```
-
-The above is possible, but not recommended.
-
-### <a name="TOC-Array-Examples"></a>Array Examples
-
-```java
-Gson gson = new Gson();
-int[] ints = {1, 2, 3, 4, 5};
-String[] strings = {"abc", "def", "ghi"};
-
-// Serialization
-gson.toJson(ints);     // ==> [1,2,3,4,5]
-gson.toJson(strings);  // ==> ["abc", "def", "ghi"]
-
-// Deserialization
-int[] ints2 = gson.fromJson("[1,2,3,4,5]", int[].class); 
-// ==> ints2 will be same as ints
-```
-
-We also support multi-dimensional arrays, with arbitrarily complex element types.
-
-### <a name="TOC-Collections-Examples"></a>Collections Examples
-
-```java
-Gson gson = new Gson();
-Collection<Integer> ints = Lists.immutableList(1,2,3,4,5);
-
-// Serialization
-String json = gson.toJson(ints);  // ==> json is [1,2,3,4,5]
-
-// Deserialization
-Type collectionType = new TypeToken<Collection<Integer>>(){}.getType();
-Collection<Integer> ints2 = gson.fromJson(json, collectionType);
-// ==> ints2 is same as ints
-```
-
-Fairly hideous: note how we define the type of collection.
-Unfortunately, there is no way to get around this in Java.
-
-#### <a name="TOC-Collections-Limitations"></a>Collections Limitations
-
-Gson can serialize collection of arbitrary objects but can not deserialize from it, because there is no way for the user to indicate the type of the resulting object. Instead, while deserializing, the Collection must be of a specific, generic type.
-This makes sense, and is rarely a problem when following good Java coding practices.
-
-### <a name="TOC-Serializing-and-Deserializing-Generic-Types"></a>Serializing and Deserializing Generic Types
-
-When you call `toJson(obj)`, Gson calls `obj.getClass()` to get information on the fields to serialize. Similarly, you can typically pass `MyClass.class` object in the `fromJson(json, MyClass.class)` method. This works fine if the object is a non-generic type. However, if the object is of a generic type, then the Generic type information is lost because of Java Type Erasure. Here is an example illustrating the point:
-
-```java
-class Foo<T> {
-  T value;
-}
-Gson gson = new Gson();
-Foo<Bar> foo = new Foo<Bar>();
-gson.toJson(foo); // May not serialize foo.value correctly
-
-gson.fromJson(json, foo.getClass()); // Fails to deserialize foo.value as Bar
-```
-
-The above code fails to interpret value as type Bar because Gson invokes `list.getClass()` to get its class information, but this method returns a raw class, `Foo.class`. This means that Gson has no way of knowing that this is an object of type `Foo<Bar>`, and not just plain `Foo`.
-
-You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the [`TypeToken`](http://google.github.io/gson/apidocs/com/google/gson/reflect/TypeToken.html) class.
-
-```java
-Type fooType = new TypeToken<Foo<Bar>>() {}.getType();
-gson.toJson(foo, fooType);
-
-gson.fromJson(json, fooType);
-```
-The idiom used to get `fooType` actually defines an anonymous local inner class containing a method `getType()` that returns the fully parameterized type.
-
-### <a name="TOC-Serializing-and-Deserializing-Collection-with-Objects-of-Arbitrary-Types"></a>Serializing and Deserializing Collection with Objects of Arbitrary Types
-
-Sometimes you are dealing with JSON array that contains mixed types. For example:
-`['hello',5,{name:'GREETINGS',source:'guest'}]`
-
-The equivalent `Collection` containing this is:
-
-```java
-Collection collection = new ArrayList();
-collection.add("hello");
-collection.add(5);
-collection.add(new Event("GREETINGS", "guest"));
-```
-
-where the `Event` class is defined as:
-
-```java
-class Event {
-  private String name;
-  private String source;
-  private Event(String name, String source) {
-    this.name = name;
-    this.source = source;
-  }
-}
-```
-
-You can serialize the collection with Gson without doing anything specific: `toJson(collection)` would write out the desired output.
-
-However, deserialization with `fromJson(json, Collection.class)` will not work since Gson has no way of knowing how to map the input to the types. Gson requires that you provide a genericised version of collection type in `fromJson()`. So, you have three options:
-
-1. Use Gson's parser API (low-level streaming parser or the DOM parser JsonParser) to parse the array elements and then use `Gson.fromJson()` on each of the array elements.This is the preferred approach. [Here is an example](extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java) that demonstrates how to do this.
-
-2. Register a type adapter for `Collection.class` that looks at each of the array members and maps them to appropriate objects. The disadvantage of this approach is that it will screw up deserialization of other collection types in Gson.
-
-3. Register a type adapter for `MyCollectionMemberType` and use `fromJson()` with `Collection<MyCollectionMemberType>`.
-
-This approach is practical only if the array appears as a top-level element or if you can change the field type holding the collection to be of type `Collection<MyCollectionMemberType>`.
-
-### <a name="TOC-Built-in-Serializers-and-Deserializers"></a>Built-in Serializers and Deserializers
-
-Gson has built-in serializers and deserializers for commonly used classes whose default representation may be inappropriate.
-Here is a list of such classes:
-
-1. `java.net.URL` to match it with strings like `"https://github.com/google/gson/"`
-2. `java.net.URI` to match it with strings like `"/google/gson/"`
-
-You can also find source code for some commonly used classes such as JodaTime at [this page](https://sites.google.com/site/gson/gson-type-adapters-for-common-classes-1).
-
-### <a name="TOC-Custom-Serialization-and-Deserialization"></a>Custom Serialization and Deserialization
-
-Sometimes default representation is not what you want. This is often the case when dealing with library classes (DateTime, etc).
-Gson allows you to register your own custom serializers and deserializers. This is done by defining two parts:
-
-* Json Serializers: Need to define custom serialization for an object
-* Json Deserializers: Needed to define custom deserialization for a type
-
-* Instance Creators: Not needed if no-args constructor is available or a deserializer is registered
-
-```java
-GsonBuilder gson = new GsonBuilder();
-gson.registerTypeAdapter(MyType2.class, new MyTypeAdapter());
-gson.registerTypeAdapter(MyType.class, new MySerializer());
-gson.registerTypeAdapter(MyType.class, new MyDeserializer());
-gson.registerTypeAdapter(MyType.class, new MyInstanceCreator());
-```
-
-`registerTypeAdapter` call checks if the type adapter implements more than one of these interfaces and register it for all of them.
-
-#### <a name="TOC-Writing-a-Serializer"></a>Writing a Serializer
-
-Here is an example of how to write a custom serializer for JodaTime `DateTime` class.
-
-```java
-private class DateTimeSerializer implements JsonSerializer<DateTime> {
-  public JsonElement serialize(DateTime src, Type typeOfSrc, JsonSerializationContext context) {
-    return new JsonPrimitive(src.toString());
-  }
-}
-```
-
-Gson calls `serialize()` when it runs into a `DateTime` object during serialization.
-
-#### <a name="TOC-Writing-a-Deserializer"></a>Writing a Deserializer
-
-Here is an example of how to write a custom deserializer for JodaTime DateTime class.
-
-```java
-private class DateTimeDeserializer implements JsonDeserializer<DateTime> {
-  public DateTime deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
-      throws JsonParseException {
-    return new DateTime(json.getAsJsonPrimitive().getAsString());
-  }
-}
-```
-
-Gson calls `deserialize` when it needs to deserialize a JSON string fragment into a DateTime object
-
-**Finer points with Serializers and Deserializers**
-
-Often you want to register a single handler for all generic types corresponding to a raw type
-
-* For example, suppose you have an `Id` class for id representation/translation (i.e. an internal vs. external representation).
-* `Id<T>` type that has same serialization for all generic types
-  * Essentially write out the id value
-* Deserialization is very similar but not exactly the same
-  * Need to call `new Id(Class<T>, String)` which returns an instance of `Id<T>`
-
-Gson supports registering a single handler for this. You can also register a specific handler for a specific generic type (say `Id<RequiresSpecialHandling>` needed special handling).
-The `Type` parameter for the `toJson()` and `fromJson()` contains the generic type information to help you write a single handler for all generic types corresponding to the same raw type.
-
-### <a name="TOC-Writing-an-Instance-Creator"></a>Writing an Instance Creator
-
-While deserializing an Object, Gson needs to create a default instance of the class.
-Well-behaved classes that are meant for serialization and deserialization should have a no-argument constructor.
-
-* Doesn't matter whether public or private
-
-Typically, Instance Creators are needed when you are dealing with a library class that does NOT define a no-argument constructor
-
-**Instance Creator Example**
-
-```java
-private class MoneyInstanceCreator implements InstanceCreator<Money> {
-  public Money createInstance(Type type) {
-    return new Money("1000000", CurrencyCode.USD);
-  }
-}
-```
-
-Type could be of a corresponding generic type
-
-* Very useful to invoke constructors which need specific generic type information
-* For example, if the `Id` class stores the class for which the Id is being created
-
-#### <a name="TOC-InstanceCreator-for-a-Parameterized-Type"></a>InstanceCreator for a Parameterized Type
-
-Sometimes the type that you are trying to instantiate is a parameterized type. Generally, this is not a problem since the actual instance is of raw type. Here is an example:
-
-```java
-class MyList<T> extends ArrayList<T> {
-}
-
-class MyListInstanceCreator implements InstanceCreator<MyList<?>> {
-    @SuppressWarnings("unchecked")
-  public MyList<?> createInstance(Type type) {
-    // No need to use a parameterized list since the actual instance will have the raw type anyway.
-    return new MyList();
-  }
-}
-```
-
-However, sometimes you do need to create instance based on the actual parameterized type. In this case, you can use the type parameter being passed to the `createInstance` method. Here is an example:
-
-```java
-public class Id<T> {
-  private final Class<T> classOfId;
-  private final long value;
-  public Id(Class<T> classOfId, long value) {
-    this.classOfId = classOfId;
-    this.value = value;
-  }
-}
-
-class IdInstanceCreator implements InstanceCreator<Id<?>> {
-  public Id<?> createInstance(Type type) {
-    Type[] typeParameters = ((ParameterizedType)type).getActualTypeArguments();
-    Type idType = typeParameters[0]; // Id has only one parameterized type T
-    return Id.get((Class)idType, 0L);
-  }
-}
-```
-
-In the above example, an instance of the Id class can not be created without actually passing in the actual type for the parameterized type. We solve this problem by using the passed method parameter, `type`. The `type` object in this case is the Java parameterized type representation of `Id<Foo>` where the actual instance should be bound to `Id<Foo>`. Since `Id` class has just one parameterized type parameter, `T`, we use the zeroth element of the type array returned by `getActualTypeArgument()` which will hold `Foo.class` in this case.
-
-### <a name="TOC-Compact-Vs.-Pretty-Printing-for-JSON-Output-Format"></a>Compact Vs. Pretty Printing for JSON Output Format
-
-The default JSON output that is provided by Gson is a compact JSON format. This means that there will not be any whitespace in the output JSON structure. Therefore, there will be no whitespace between field names and its value, object fields, and objects within arrays in the JSON output. As well, "null" fields will be ignored in the output (NOTE: null values will still be included in collections/arrays of objects). See the [Null Object Support](#TOC-Null-Object-Support) section for information on configure Gson to output all null values.
-
-If you would like to use the Pretty Print feature, you must configure your `Gson` instance using the `GsonBuilder`. The `JsonFormatter` is not exposed through our public API, so the client is unable to configure the default print settings/margins for the JSON output. For now, we only provide a default `JsonPrintFormatter` that has default line length of 80 character, 2 character indentation, and 4 character right margin.
-
-The following is an example shows how to configure a `Gson` instance to use the default `JsonPrintFormatter` instead of the `JsonCompactFormatter`:
-```
-Gson gson = new GsonBuilder().setPrettyPrinting().create();
-String jsonOutput = gson.toJson(someObject);
-```
-### <a name="TOC-Null-Object-Support"></a>Null Object Support
-
-The default behaviour that is implemented in Gson is that `null` object fields are ignored. This allows for a more compact output format; however, the client must define a default value for these fields as the JSON format is converted back into its Java form.
-
-Here's how you would configure a `Gson` instance to output null:
-
-```java
-Gson gson = new GsonBuilder().serializeNulls().create();
-```
-
-NOTE: when serializing `null`s with Gson, it will add a `JsonNull` element to the `JsonElement` structure. Therefore, this object can be used in custom serialization/deserialization.
-
-Here's an example:
-
-```java
-public class Foo {
-  private final String s;
-  private final int i;
-
-  public Foo() {
-    this(null, 5);
-  }
-
-  public Foo(String s, int i) {
-    this.s = s;
-    this.i = i;
-  }
-}
-
-Gson gson = new GsonBuilder().serializeNulls().create();
-Foo foo = new Foo();
-String json = gson.toJson(foo);
-System.out.println(json);
-
-json = gson.toJson(null);
-System.out.println(json);
-```
-
-The output is:
-
-```
-{"s":null,"i":5}
-null
-```
-
-### <a name="TOC-Versioning-Support"></a>Versioning Support
-
-Multiple versions of the same object can be maintained by using [@Since](gson/src/main/java/com/google/gson/annotations/Since.java) annotation. This annotation can be used on Classes, Fields and, in a future release, Methods. In order to leverage this feature, you must configure your `Gson` instance to ignore any field/object that is greater than some version number. If no version is set on the `Gson` instance then it will serialize and deserialize all fields and classes regardless of the version.
-
-```java
-public class VersionedClass {
-  @Since(1.1) private final String newerField;
-  @Since(1.0) private final String newField;
-  private final String field;
-
-  public VersionedClass() {
-    this.newerField = "newer";
-    this.newField = "new";
-    this.field = "old";
-  }
-}
-
-VersionedClass versionedObject = new VersionedClass();
-Gson gson = new GsonBuilder().setVersion(1.0).create();
-String jsonOutput = gson.toJson(someObject);
-System.out.println(jsonOutput);
-System.out.println();
-
-gson = new Gson();
-jsonOutput = gson.toJson(someObject);
-System.out.println(jsonOutput);
-```
-
-The output is:
-
-```
-{"newField":"new","field":"old"}
-
-{"newerField":"newer","newField":"new","field":"old"}
-```
-
-### <a name="TOC-Excluding-Fields-From-Serialization-and-Deserialization"></a>Excluding Fields From Serialization and Deserialization
-
-Gson supports numerous mechanisms for excluding top-level classes, fields and field types. Below are pluggable mechanisms that allow field and class exclusion. If none of the below mechanisms satisfy your needs then you can always use [custom serializers and deserializers](#TOC-Custom-Serialization-and-Deserialization).
-
-#### <a name="TOC-Java-Modifier-Exclusion"></a>Java Modifier Exclusion
-
-By default, if you mark a field as `transient`, it will be excluded. As well, if a field is marked as `static` then by default it will be excluded. If you want to include some transient fields then you can do the following:
-
-```java
-import java.lang.reflect.Modifier;
-Gson gson = new GsonBuilder()
-    .excludeFieldsWithModifiers(Modifier.STATIC)
-    .create();
-```
-
-NOTE: you can give any number of the `Modifier` constants to the `excludeFieldsWithModifiers` method. For example:
-
-```java
-Gson gson = new GsonBuilder()
-    .excludeFieldsWithModifiers(Modifier.STATIC, Modifier.TRANSIENT, Modifier.VOLATILE)
-    .create();
-```
-
-#### <a name="TOC-Gson-s-Expose"></a>Gson's `@Expose`
-
-This feature provides a way where you can mark certain fields of your objects to be excluded for consideration for serialization and deserialization to JSON. To use this annotation, you must create Gson by using `new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()`. The Gson instance created will exclude all fields in a class that are not marked with `@Expose` annotation.
-
-#### <a name="TOC-User-Defined-Exclusion-Strategies"></a>User Defined Exclusion Strategies
-
-If the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the [`ExclusionStrategy`](http://google.github.io/gson/apidocs/com/google/gson/ExclusionStrategy.html) JavaDoc for more information.
-
-The following example shows how to exclude fields marked with a specific `@Foo` annotation and excludes top-level types (or declared field type) of class `String`.
-
-```java
-@Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.FIELD})
-public @interface Foo {
-  // Field tag only annotation
-}
-
-public class SampleObjectForTest {
-  @Foo private final int annotatedField;
-  private final String stringField;
-  private final long longField;
-  private final Class<?> clazzField;
-
-  public SampleObjectForTest() {
-    annotatedField = 5;
-    stringField = "someDefaultValue";
-    longField = 1234;
-  }
-}
-
-public class MyExclusionStrategy implements ExclusionStrategy {
-  private final Class<?> typeToSkip;
-
-  private MyExclusionStrategy(Class<?> typeToSkip) {
-    this.typeToSkip = typeToSkip;
-  }
-
-  public boolean shouldSkipClass(Class<?> clazz) {
-    return (clazz == typeToSkip);
-  }
-
-  public boolean shouldSkipField(FieldAttributes f) {
-    return f.getAnnotation(Foo.class) != null;
-  }
-}
-
-public static void main(String[] args) {
-  Gson gson = new GsonBuilder()
-      .setExclusionStrategies(new MyExclusionStrategy(String.class))
-      .serializeNulls()
-      .create();
-  SampleObjectForTest src = new SampleObjectForTest();
-  String json = gson.toJson(src);
-  System.out.println(json);
-}
-```
-
-The output is:
-
-```
-{"longField":1234}
-```
-
-### <a name="TOC-JSON-Field-Naming-Support"></a>JSON Field Naming Support
-
-Gson supports some pre-defined field naming policies to convert the standard Java field names (i.e., camel cased names starting with lower case --- `sampleFieldNameInJava`) to a Json field name (i.e., `sample_field_name_in_java` or `SampleFieldNameInJava`). See the [FieldNamingPolicy](http://google.github.io/gson/apidocs/com/google/gson/FieldNamingPolicy.html) class for information on the pre-defined naming policies.
-
-It also has an annotation based strategy to allows clients to define custom names on a per field basis. Note, that the annotation based strategy has field name validation which will raise "Runtime" exceptions if an invalid field name is provided as the annotation value.
-
-The following is an example of how to use both Gson naming policy features:
-
-```java
-private class SomeObject {
-  @SerializedName("custom_naming") private final String someField;
-  private final String someOtherField;
-
-  public SomeObject(String a, String b) {
-    this.someField = a;
-    this.someOtherField = b;
-  }
-}
-
-SomeObject someObject = new SomeObject("first", "second");
-Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();
-String jsonRepresentation = gson.toJson(someObject);
-System.out.println(jsonRepresentation);
-```
-
-The output is:
-
-```
-{"custom_naming":"first","SomeOtherField":"second"}
-```
-
-If you have a need for custom naming policy ([see this discussion](http://groups.google.com/group/google-gson/browse_thread/thread/cb441a2d717f6892)), you can use the [@SerializedName](http://google.github.io/gson/apidocs/com/google/gson/annotations/SerializedName.html) annotation.
-
-### <a name="TOC-Sharing-State-Across-Custom-Serializers-and-Deserializers"></a>Sharing State Across Custom Serializers and Deserializers
-
-Sometimes you need to share state across custom serializers/deserializers ([see this discussion](http://groups.google.com/group/google-gson/browse_thread/thread/2850010691ea09fb)). You can use the following three strategies to accomplish this:
-
-1. Store shared state in static fields
-2. Declare the serializer/deserializer as inner classes of a parent type, and use the instance fields of parent type to store shared state
-3. Use Java `ThreadLocal`
-
-1 and 2 are not thread-safe options, but 3 is.
-
-### <a name="TOC-Streaming"></a>Streaming
-
-In addition Gson's object model and data binding, you can use Gson to read from and write to a [stream](https://sites.google.com/site/gson/streaming). You can also combine streaming and object model access to get the best of both approaches.
-
-## <a name="TOC-Issues-in-Designing-Gson"></a>Issues in Designing Gson
-
-See the [Gson design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md "Gson design document") for a discussion of issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion.
-
-## <a name="TOC-Future-Enhancements-to-Gson"></a>Future Enhancements to Gson
-
-For the latest list of proposed enhancements or if you'd like to suggest new ones, see the [Issues section](https://github.com/google/gson/issues) under the project website.
diff --git a/codegen/pom.xml b/codegen/pom.xml
deleted file mode 100644
index c2f9499a3..000000000
--- a/codegen/pom.xml
+++ /dev/null
@@ -1,182 +0,0 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>com.google.code.gson</groupId>
-  <artifactId>gson-codegen</artifactId>
-  <packaging>jar</packaging>
-  <version>1.0-SNAPSHOT</version>
-  <inceptionYear>2008</inceptionYear>
-  <name>Gson Code Gen</name>
-  <parent>
-    <groupId>org.sonatype.oss</groupId>
-    <artifactId>oss-parent</artifactId>
-    <version>7</version>
-  </parent>
-  <url>http://code.google.com/p/google-gson/</url>
-  <description>Google Gson grab bag of utilities, type adapters, etc.</description>
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-  </properties>
-  <licenses>
-    <license>
-      <name>The Apache Software License, Version 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-      <distribution>repo</distribution>
-    </license>
-  </licenses>
-  <scm>
-    <connection>scm:svn:http://google-gson.googlecode.com/svn/trunk/extras</connection>
-    <developerConnection>scm:svn:https://google-gson.googlecode.com/svn/trunk/extras</developerConnection>
-    <url>http://google-gson.codegoogle.com/svn/trunk/extras</url>
-  </scm>
-  <issueManagement>
-    <system>Google Code Issue Tracking</system>
-    <url>http://code.google.com/p/google-gson/issues/list</url>
-  </issueManagement>
-  <organization>
-    <name>Google, Inc.</name>
-    <url>http://www.google.com</url>
-  </organization>
-  <dependencies>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>3.8.2</version>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-  <profiles>
-    <!-- Activate PGP signing only when performing a release -->
-    <profile>
-      <id>release-sign-artifacts</id>
-      <activation>
-        <property>
-          <name>performRelease</name>
-          <value>true</value>
-        </property>
-      </activation>
-      <build>
-        <plugins>
-          <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-gpg-plugin</artifactId>
-            <version>1.4</version>
-            <executions>
-              <execution>
-                <id>sign-artifacts</id>
-                <phase>verify</phase>
-                <goals>
-                  <goal>sign</goal>
-                </goals>
-              </execution>
-            </executions>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-  </profiles>  
-  <build>
-    <defaultGoal>package</defaultGoal>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>2.5.1</version>
-        <configuration>
-          <source>1.6</source>
-          <target>1.6</target>
-          <compilerArgument>-proc:none</compilerArgument>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-jar-plugin</artifactId>
-        <version>2.4</version>
-        <executions>
-          <execution>
-            <phase>package</phase>
-            <goals>
-              <goal>jar</goal>
-            </goals>
-          </execution>
-        </executions>
-        <configuration>
-          <archive>
-            <addMavenDescriptor>false</addMavenDescriptor>
-          </archive>
-        </configuration>
-      </plugin>
-      <plugin>
-         <groupId>org.apache.maven.plugins</groupId>
-         <artifactId>maven-source-plugin</artifactId>
-         <version>2.1.2</version>
-         <executions>
-           <execution>
-             <id>attach-sources</id>
-             <phase>verify</phase>
-             <goals>
-               <goal>jar</goal>
-             </goals>
-           </execution>
-         </executions>
-       </plugin>
-       <plugin>
-         <groupId>org.apache.maven.plugins</groupId>
-         <artifactId>maven-javadoc-plugin</artifactId>
-         <version>2.8.1</version>
-         <executions>
-           <execution>
-             <id>attach-javadocs</id>
-             <goals>
-               <goal>jar</goal>
-             </goals>
-           </execution>
-         </executions>
-         <configuration>
-           <links>
-             <link>http://download.oracle.com/javase/1.5.0/docs/api/</link>
-           </links>
-           <version>true</version>
-           <show>public</show>
-         </configuration>
-       </plugin>
-       <plugin>
-         <groupId>org.apache.maven.plugins</groupId>
-         <artifactId>maven-eclipse-plugin</artifactId>
-         <version>2.9</version>
-         <configuration>
-           <downloadSources>true</downloadSources>
-           <downloadJavadocs>true</downloadJavadocs>
-           <workspace>
-             ../eclipse-ws/
-           </workspace>
-           <workspaceCodeStylesURL>
-             file:///${basedir}/../lib/gson-formatting-styles.xml
-           </workspaceCodeStylesURL>
-         </configuration>
-       </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-release-plugin</artifactId>
-        <!--  version>2.3.2</version -->
-        <configuration>
-          <arguments>-DenableCiProfile=true</arguments>
-          <tagBase>https://google-gson.googlecode.com/svn/tags/</tagBase>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-  <developers>
-    <developer>
-      <name>Inderjeet Singh</name>
-      <organization>Trymph Inc.</organization>
-    </developer>
-    <developer>
-      <name>Joel Leitch</name>
-      <organization>Google Inc.</organization>
-    </developer>
-    <developer>
-      <name>Jesse Wilson</name>
-      <organization>Square Inc.</organization>
-    </developer>
-  </developers>
-</project>
diff --git a/codegen/src/main/java/com/google/gson/codegen/CodeGen.java b/codegen/src/main/java/com/google/gson/codegen/CodeGen.java
deleted file mode 100644
index 011568ff9..000000000
--- a/codegen/src/main/java/com/google/gson/codegen/CodeGen.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Copyright (C) 2012 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.codegen;
-
-import javax.lang.model.element.Element;
-import javax.lang.model.element.ElementKind;
-import javax.lang.model.element.PackageElement;
-import javax.lang.model.element.TypeElement;
-
-public class CodeGen {
-  private CodeGen() {
-  }
-
-  public static PackageElement getPackage(Element type) {
-    while (type.getKind() != ElementKind.PACKAGE) {
-      type = type.getEnclosingElement();
-    }
-    return (PackageElement) type;
-  }
-
-  /**
-   * Returns a fully qualified class name to complement {@code type}.
-   */
-  public static String adapterName(TypeElement typeElement, String suffix) {
-    StringBuilder builder = new StringBuilder();
-    rawTypeToString(builder, typeElement, '$');
-    builder.append(suffix);
-    return builder.toString();
-  }
-
-  static void rawTypeToString(StringBuilder result, TypeElement type, char innerClassSeparator) {
-    String packageName = getPackage(type).getQualifiedName().toString();
-    String qualifiedName = type.getQualifiedName().toString();
-    result.append(packageName);
-    result.append('.');
-    result.append(
-        qualifiedName.substring(packageName.length() + 1).replace('.', innerClassSeparator));
-  }
-}
diff --git a/codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java b/codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java
deleted file mode 100644
index 1694d88ac..000000000
--- a/codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java
+++ /dev/null
@@ -1,21 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.codegen;
-
-public @interface GeneratedTypeAdapter {
-  Class<?>[] value() default {};
-}
diff --git a/codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java b/codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java
deleted file mode 100644
index cd542bc35..000000000
--- a/codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.codegen;
-
-import static java.lang.reflect.Modifier.FINAL;
-
-import java.io.IOException;
-import java.util.Set;
-
-import javax.annotation.processing.AbstractProcessor;
-import javax.annotation.processing.RoundEnvironment;
-import javax.annotation.processing.SupportedAnnotationTypes;
-import javax.annotation.processing.SupportedSourceVersion;
-import javax.lang.model.SourceVersion;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
-import javax.tools.Diagnostic;
-import javax.tools.JavaFileObject;
-
-@SupportedAnnotationTypes("com.google.gson.codegen.GeneratedTypeAdapter")
-@SupportedSourceVersion(SourceVersion.RELEASE_6)
-public final class GeneratedTypeAdapterProcessor extends AbstractProcessor {
-  @Override public boolean process(Set<? extends TypeElement> types, RoundEnvironment env) {
-    System.out.println("invoked GeneratedTypeAdapterProcessor");
-    try {
-      for (Element element : env.getElementsAnnotatedWith(GeneratedTypeAdapter.class)) {
-        writeAdapter((TypeElement) element);
-      }
-    } catch (IOException e) {
-      processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, e.getMessage());
-    }
-    return true;
-  }
-
-  private void writeAdapter(TypeElement type) throws IOException {
-    String typeAdapterName = CodeGen.adapterName(type, "$TypeAdapter");
-    JavaFileObject sourceFile = processingEnv.getFiler()
-        .createSourceFile(typeAdapterName, type);
-    System.out.println("Generating type adapter: " + typeAdapterName + " in " + sourceFile.getName());
-
-    JavaWriter writer = new JavaWriter(sourceFile.openWriter());
-    writer.addPackage(CodeGen.getPackage(type).getQualifiedName().toString());
-    writer.beginType(typeAdapterName, "class", FINAL, null);
-    writer.endType();
-    writer.close();
-  }
-}
diff --git a/codegen/src/main/java/com/google/gson/codegen/JavaWriter.java b/codegen/src/main/java/com/google/gson/codegen/JavaWriter.java
deleted file mode 100644
index ccba6c8cd..000000000
--- a/codegen/src/main/java/com/google/gson/codegen/JavaWriter.java
+++ /dev/null
@@ -1,443 +0,0 @@
-/**
- * Copyright (C) 2012 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.codegen;
-
-import java.io.IOException;
-import java.io.Writer;
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Modifier;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-/**
- * Emits Java source files.
- */
-public final class JavaWriter {
-  private static final Pattern TYPE_PATTERN = Pattern.compile("(?:[\\w$]+\\.)*([\\w$]+)");
-  private static final String INDENT = "  ";
-
-  /** Map fully qualified type names to their short names. */
-  private final Map<String, String> importedTypes = new HashMap<String, String>();
-
-  private String packagePrefix;
-  private final List<Scope> scopes = new ArrayList<Scope>();
-  private final Writer out;
-
-  /**
-   * @param out the stream to which Java source will be written. This should be
-   *     a buffered stream.
-   */
-  public JavaWriter(Writer out) {
-    this.out = out;
-  }
-
-  /**
-   * Emit a package declaration.
-   */
-  public void addPackage(String packageName) throws IOException {
-    if (this.packagePrefix != null) {
-      throw new IllegalStateException();
-    }
-    out.write("package ");
-    out.write(packageName);
-    out.write(";\n");
-    this.packagePrefix = packageName + ".";
-  }
-
-  /**
-   * Equivalent to {@code addImport(type.getName())}.
-   */
-  public void addImport(Class<?> type) throws IOException {
-    addImport(type.getName());
-  }
-
-  /**
-   * Emit an import for {@code type}. For the duration of the file, all
-   * references to this class will be automatically shortened.
-   */
-  public void addImport(String type) throws IOException {
-    Matcher matcher = TYPE_PATTERN.matcher(type);
-    if (!matcher.matches()) {
-      throw new IllegalArgumentException(type);
-    }
-    if (importedTypes.put(type, matcher.group(1)) != null) {
-      throw new IllegalArgumentException(type);
-    }
-    out.write("import ");
-    out.write(type);
-    out.write(";\n");
-  }
-
-  /**
-   * Emits a name like {@code java.lang.String} or {@code
-   * java.util.List<java.lang.String>}, shorting it with imports if
-   * possible.
-   */
-  private void type(String type) throws IOException {
-    if (this.packagePrefix == null) {
-      throw new IllegalStateException();
-    }
-
-    Matcher m = TYPE_PATTERN.matcher(type);
-    int pos = 0;
-    while (true) {
-      boolean found = m.find(pos);
-
-      // copy non-matching characters like "<"
-      int typeStart = found ? m.start() : type.length();
-      out.write(type, pos, typeStart - pos);
-
-      if (!found) {
-        break;
-      }
-
-      // copy a single class name, shortening it if possible
-      String name = m.group(0);
-      String imported;
-      if ((imported = importedTypes.get(name)) != null) {
-        out.write(imported);
-      } else if (name.startsWith(packagePrefix)
-          && name.indexOf('.', packagePrefix.length()) == -1) {
-        out.write(name.substring(packagePrefix.length()));
-      } else if (name.startsWith("java.lang.")) {
-        out.write(name.substring("java.lang.".length()));
-      } else {
-        out.write(name);
-      }
-      pos = m.end();
-    }
-  }
-
-  /**
-   * Emits a type declaration.
-   *
-   * @param kind such as "class", "interface" or "enum".
-   */
-  public void beginType(String type, String kind, int modifiers) throws IOException {
-    beginType(type, kind, modifiers, null);
-  }
-
-  /**
-   * Emits a type declaration.
-   *
-   * @param kind such as "class", "interface" or "enum".
-   * @param extendsType the class to extend, or null for no extends clause.
-   */
-  public void beginType(String type, String kind, int modifiers,
-      String extendsType, String... implementsTypes) throws IOException {
-    indent();
-    modifiers(modifiers);
-    out.write(kind);
-    out.write(" ");
-    type(type);
-    if (extendsType != null) {
-      out.write("\n");
-      indent();
-      out.write("    extends ");
-      type(extendsType);
-    }
-    if (implementsTypes.length > 0) {
-      out.write("\n");
-      indent();
-      out.write("    implements ");
-      for (int i = 0; i < implementsTypes.length; i++) {
-        if (i != 0) {
-          out.write(", ");
-        }
-        type(implementsTypes[i]);
-      }
-    }
-    out.write(" {\n");
-    pushScope(Scope.TYPE_DECLARATION);
-  }
-
-  /**
-   * Completes the current type declaration.
-   */
-  public void endType() throws IOException {
-    if (popScope() != Scope.TYPE_DECLARATION) {
-      throw new IllegalStateException();
-    }
-    indent();
-    out.write("}\n");
-  }
-
-  /**
-   * Emits a field declaration.
-   */
-  public void field(String type, String name, int modifiers) throws IOException {
-    field(type, name, modifiers, null);
-  }
-
-  public void field(String type, String name, int modifiers, String initialValue)
-      throws IOException {
-    indent();
-    modifiers(modifiers);
-    type(type);
-    out.write(" ");
-    out.write(name);
-
-    if (initialValue != null) {
-      out.write(" = ");
-      out.write(initialValue);
-    }
-    out.write(";\n");
-  }
-
-  /**
-   * Emit a method declaration.
-   *
-   * @param returnType the method's return type, or null for constructors.
-   * @param parameters alternating parameter types and names.
-   * @param name the method name, or the fully qualified class name for
-   *     constructors.
-   */
-  public void beginMethod(String returnType, String name, int modifiers, String... parameters)
-      throws IOException {
-    indent();
-    modifiers(modifiers);
-    if (returnType != null) {
-      type(returnType);
-      out.write(" ");
-      out.write(name);
-    } else {
-      type(name);
-    }
-    out.write("(");
-    for (int p = 0; p < parameters.length; ) {
-      if (p != 0) {
-        out.write(", ");
-      }
-      type(parameters[p++]);
-      out.write(" ");
-      type(parameters[p++]);
-    }
-    out.write(")");
-    if ((modifiers & Modifier.ABSTRACT) != 0) {
-      out.write(";\n");
-      pushScope(Scope.ABSTRACT_METHOD);
-    } else {
-      out.write(" {\n");
-      pushScope(Scope.NON_ABSTRACT_METHOD);
-    }
-  }
-
-  /**
-   * Annotates the next element with {@code annotation}. The annotation has no
-   * attributes.
-   */
-  public void annotation(String annotation) throws IOException {
-    indent();
-    out.write("@");
-    type(annotation);
-    out.write("\n");
-  }
-
-  /**
-   * Equivalent to {@code annotation(annotationType.getName())}.
-   */
-  public void annotation(Class<? extends Annotation> annotationType) throws IOException {
-    annotation(annotationType.getName());
-  }
-
-  /**
-   * @param pattern a code pattern like "int i = %s". Shouldn't contain a
-   * trailing semicolon or newline character.
-   */
-  public void statement(String pattern, Object... args) throws IOException {
-    checkInMethod();
-    indent();
-    out.write(String.format(pattern, args));
-    out.write(";\n");
-  }
-
-  /**
-   * @param controlFlow the control flow construct and its code, such as
-   *     "if (foo == 5)". Shouldn't contain braces or newline characters.
-   */
-  public void beginControlFlow(String controlFlow) throws IOException {
-    checkInMethod();
-    indent();
-    out.write(controlFlow);
-    out.write(" {\n");
-    pushScope(Scope.CONTROL_FLOW);
-  }
-
-  /**
-   * @param controlFlow the control flow construct and its code, such as
-   *     "else if (foo == 10)". Shouldn't contain braces or newline characters.
-   */
-  public void nextControlFlow(String controlFlow) throws IOException {
-    if (popScope() != Scope.CONTROL_FLOW) {
-      throw new IllegalArgumentException();
-    }
-
-    indent();
-    pushScope(Scope.CONTROL_FLOW);
-    out.write("} ");
-    out.write(controlFlow);
-    out.write(" {\n");
-  }
-
-  public void endControlFlow() throws IOException {
-    endControlFlow(null);
-  }
-
-  /**
-   * @param controlFlow the optional control flow construct and its code, such
-   *     as "while(foo == 20)". Only used for "do/while" control flows.
-   */
-  public void endControlFlow(String controlFlow) throws IOException {
-    if (popScope() != Scope.CONTROL_FLOW) {
-      throw new IllegalArgumentException();
-    }
-
-    indent();
-    if (controlFlow != null) {
-      out.write("} ");
-      out.write(controlFlow);
-      out.write(";\n");
-    } else {
-      out.write("}\n");
-    }
-  }
-
-  /**
-   * Completes the current method declaration.
-   */
-  public void endMethod() throws IOException {
-    Scope popped = popScope();
-    if (popped == Scope.NON_ABSTRACT_METHOD) {
-      indent();
-      out.write("}\n");
-    } else if (popped != Scope.ABSTRACT_METHOD) {
-      throw new IllegalStateException();
-    }
-  }
-
-  /**
-   * Returns the string literal representing {@code data}, including wrapping
-   * quotes.
-   */
-  public static String stringLiteral(String data) {
-    StringBuilder result = new StringBuilder();
-    result.append('"');
-    for (int i = 0; i < data.length(); i++) {
-      char c = data.charAt(i);
-      switch (c) {
-        case '"':
-          result.append("\\\"");
-          break;
-        case '\\':
-          result.append("\\\\");
-          break;
-        case '\t':
-          result.append("\\\t");
-          break;
-        case '\b':
-          result.append("\\\b");
-          break;
-        case '\n':
-          result.append("\\\n");
-          break;
-        case '\r':
-          result.append("\\\r");
-          break;
-        case '\f':
-          result.append("\\\f");
-          break;
-        default:
-          result.append(c);
-      }
-    }
-    result.append('"');
-    return result.toString();
-  }
-
-  public void close() throws IOException {
-    out.close();
-  }
-
-  /**
-   * Emit modifier names.
-   */
-  private void modifiers(int modifiers) throws IOException {
-    if ((modifiers & Modifier.PUBLIC) != 0) {
-      out.write("public ");
-    }
-    if ((modifiers & Modifier.PRIVATE) != 0) {
-      out.write("private ");
-    }
-    if ((modifiers & Modifier.PROTECTED) != 0) {
-      out.write("protected ");
-    }
-    if ((modifiers & Modifier.STATIC) != 0) {
-      out.write("static ");
-    }
-    if ((modifiers & Modifier.FINAL) != 0) {
-      out.write("final ");
-    }
-    if ((modifiers & Modifier.ABSTRACT) != 0) {
-      out.write("abstract ");
-    }
-    if ((modifiers & Modifier.SYNCHRONIZED) != 0) {
-      out.write("synchronized ");
-    }
-    if ((modifiers & Modifier.TRANSIENT) != 0) {
-      out.write("transient ");
-    }
-    if ((modifiers & Modifier.VOLATILE) != 0) {
-      out.write("volatile ");
-    }
-  }
-
-  private void indent() throws IOException {
-    for (int i = 0; i < scopes.size(); i++) {
-      out.write(INDENT);
-    }
-  }
-
-  private void checkInMethod() {
-    Scope scope = peekScope();
-    if (scope != Scope.NON_ABSTRACT_METHOD && scope != Scope.CONTROL_FLOW) {
-      throw new IllegalArgumentException();
-    }
-  }
-
-  private void pushScope(Scope pushed) {
-    scopes.add(pushed);
-  }
-
-  private Scope peekScope() {
-    return scopes.get(scopes.size() - 1);
-  }
-
-  private Scope popScope() {
-    return scopes.remove(scopes.size() - 1);
-  }
-
-  private enum Scope {
-    TYPE_DECLARATION,
-    ABSTRACT_METHOD,
-    NON_ABSTRACT_METHOD,
-    CONTROL_FLOW,
-  }
-}
diff --git a/codegen/src/main/resources/META-INF/services/javax.annotation.processing.Processor b/codegen/src/main/resources/META-INF/services/javax.annotation.processing.Processor
deleted file mode 100644
index a052da0c1..000000000
--- a/codegen/src/main/resources/META-INF/services/javax.annotation.processing.Processor
+++ /dev/null
@@ -1 +0,0 @@
-com.google.gson.codegen.GeneratedTypeAdapterProcessor
\ No newline at end of file
diff --git a/codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java b/codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java
deleted file mode 100644
index 855ee3faf..000000000
--- a/codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.codegen.functional;
-
-import junit.framework.TestCase;
-
-public class CodeGenFunctionalTest extends TestCase {
-
-  public void testGeneratedJson() {
-    Order order = new Order("toy", 10);
-    // TODO: figure out how to access the generated type adapter
-  }
-}
diff --git a/codegen/src/test/java/com/google/gson/codegen/functional/Order.java b/codegen/src/test/java/com/google/gson/codegen/functional/Order.java
deleted file mode 100644
index 916587f3b..000000000
--- a/codegen/src/test/java/com/google/gson/codegen/functional/Order.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.codegen.functional;
-
-import com.google.gson.codegen.GeneratedTypeAdapter;
-
-@GeneratedTypeAdapter
-final class Order {
-  private final String itemName;
-  private final int price;
-
-  public Order(String itemName, int price) {
-    this.itemName = itemName;
-    this.price = price;
-  }
-
-  public String getItemName() {
-    return itemName;
-  }
-
-  public int getAmount() {
-    return price;
-  }
-}
diff --git a/gson/docs/javadocs/allclasses-frame.html b/docs/javadocs/allclasses-frame.html
similarity index 100%
rename from gson/docs/javadocs/allclasses-frame.html
rename to docs/javadocs/allclasses-frame.html
diff --git a/gson/docs/javadocs/allclasses-noframe.html b/docs/javadocs/allclasses-noframe.html
similarity index 100%
rename from gson/docs/javadocs/allclasses-noframe.html
rename to docs/javadocs/allclasses-noframe.html
diff --git a/gson/docs/javadocs/com/google/gson/ExclusionStrategy.html b/docs/javadocs/com/google/gson/ExclusionStrategy.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/ExclusionStrategy.html
rename to docs/javadocs/com/google/gson/ExclusionStrategy.html
diff --git a/gson/docs/javadocs/com/google/gson/FieldAttributes.html b/docs/javadocs/com/google/gson/FieldAttributes.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/FieldAttributes.html
rename to docs/javadocs/com/google/gson/FieldAttributes.html
diff --git a/gson/docs/javadocs/com/google/gson/FieldNamingPolicy.html b/docs/javadocs/com/google/gson/FieldNamingPolicy.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/FieldNamingPolicy.html
rename to docs/javadocs/com/google/gson/FieldNamingPolicy.html
diff --git a/gson/docs/javadocs/com/google/gson/FieldNamingStrategy.html b/docs/javadocs/com/google/gson/FieldNamingStrategy.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/FieldNamingStrategy.html
rename to docs/javadocs/com/google/gson/FieldNamingStrategy.html
diff --git a/gson/docs/javadocs/com/google/gson/Gson.html b/docs/javadocs/com/google/gson/Gson.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/Gson.html
rename to docs/javadocs/com/google/gson/Gson.html
diff --git a/gson/docs/javadocs/com/google/gson/GsonBuilder.html b/docs/javadocs/com/google/gson/GsonBuilder.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/GsonBuilder.html
rename to docs/javadocs/com/google/gson/GsonBuilder.html
diff --git a/gson/docs/javadocs/com/google/gson/InstanceCreator.html b/docs/javadocs/com/google/gson/InstanceCreator.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/InstanceCreator.html
rename to docs/javadocs/com/google/gson/InstanceCreator.html
diff --git a/gson/docs/javadocs/com/google/gson/JsonArray.html b/docs/javadocs/com/google/gson/JsonArray.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/JsonArray.html
rename to docs/javadocs/com/google/gson/JsonArray.html
diff --git a/gson/docs/javadocs/com/google/gson/JsonDeserializationContext.html b/docs/javadocs/com/google/gson/JsonDeserializationContext.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/JsonDeserializationContext.html
rename to docs/javadocs/com/google/gson/JsonDeserializationContext.html
diff --git a/gson/docs/javadocs/com/google/gson/JsonDeserializer.html b/docs/javadocs/com/google/gson/JsonDeserializer.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/JsonDeserializer.html
rename to docs/javadocs/com/google/gson/JsonDeserializer.html
diff --git a/gson/docs/javadocs/com/google/gson/JsonElement.html b/docs/javadocs/com/google/gson/JsonElement.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/JsonElement.html
rename to docs/javadocs/com/google/gson/JsonElement.html
diff --git a/gson/docs/javadocs/com/google/gson/JsonIOException.html b/docs/javadocs/com/google/gson/JsonIOException.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/JsonIOException.html
rename to docs/javadocs/com/google/gson/JsonIOException.html
diff --git a/gson/docs/javadocs/com/google/gson/JsonNull.html b/docs/javadocs/com/google/gson/JsonNull.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/JsonNull.html
rename to docs/javadocs/com/google/gson/JsonNull.html
diff --git a/gson/docs/javadocs/com/google/gson/JsonObject.html b/docs/javadocs/com/google/gson/JsonObject.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/JsonObject.html
rename to docs/javadocs/com/google/gson/JsonObject.html
diff --git a/gson/docs/javadocs/com/google/gson/JsonParseException.html b/docs/javadocs/com/google/gson/JsonParseException.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/JsonParseException.html
rename to docs/javadocs/com/google/gson/JsonParseException.html
diff --git a/gson/docs/javadocs/com/google/gson/JsonParser.html b/docs/javadocs/com/google/gson/JsonParser.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/JsonParser.html
rename to docs/javadocs/com/google/gson/JsonParser.html
diff --git a/gson/docs/javadocs/com/google/gson/JsonPrimitive.html b/docs/javadocs/com/google/gson/JsonPrimitive.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/JsonPrimitive.html
rename to docs/javadocs/com/google/gson/JsonPrimitive.html
diff --git a/gson/docs/javadocs/com/google/gson/JsonSerializationContext.html b/docs/javadocs/com/google/gson/JsonSerializationContext.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/JsonSerializationContext.html
rename to docs/javadocs/com/google/gson/JsonSerializationContext.html
diff --git a/gson/docs/javadocs/com/google/gson/JsonSerializer.html b/docs/javadocs/com/google/gson/JsonSerializer.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/JsonSerializer.html
rename to docs/javadocs/com/google/gson/JsonSerializer.html
diff --git a/gson/docs/javadocs/com/google/gson/JsonStreamParser.html b/docs/javadocs/com/google/gson/JsonStreamParser.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/JsonStreamParser.html
rename to docs/javadocs/com/google/gson/JsonStreamParser.html
diff --git a/gson/docs/javadocs/com/google/gson/JsonSyntaxException.html b/docs/javadocs/com/google/gson/JsonSyntaxException.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/JsonSyntaxException.html
rename to docs/javadocs/com/google/gson/JsonSyntaxException.html
diff --git a/gson/docs/javadocs/com/google/gson/LongSerializationPolicy.html b/docs/javadocs/com/google/gson/LongSerializationPolicy.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/LongSerializationPolicy.html
rename to docs/javadocs/com/google/gson/LongSerializationPolicy.html
diff --git a/gson/docs/javadocs/com/google/gson/TypeAdapter.html b/docs/javadocs/com/google/gson/TypeAdapter.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/TypeAdapter.html
rename to docs/javadocs/com/google/gson/TypeAdapter.html
diff --git a/gson/docs/javadocs/com/google/gson/TypeAdapterFactory.html b/docs/javadocs/com/google/gson/TypeAdapterFactory.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/TypeAdapterFactory.html
rename to docs/javadocs/com/google/gson/TypeAdapterFactory.html
diff --git a/gson/docs/javadocs/com/google/gson/annotations/Expose.html b/docs/javadocs/com/google/gson/annotations/Expose.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/annotations/Expose.html
rename to docs/javadocs/com/google/gson/annotations/Expose.html
diff --git a/gson/docs/javadocs/com/google/gson/annotations/JsonAdapter.html b/docs/javadocs/com/google/gson/annotations/JsonAdapter.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/annotations/JsonAdapter.html
rename to docs/javadocs/com/google/gson/annotations/JsonAdapter.html
diff --git a/gson/docs/javadocs/com/google/gson/annotations/SerializedName.html b/docs/javadocs/com/google/gson/annotations/SerializedName.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/annotations/SerializedName.html
rename to docs/javadocs/com/google/gson/annotations/SerializedName.html
diff --git a/gson/docs/javadocs/com/google/gson/annotations/Since.html b/docs/javadocs/com/google/gson/annotations/Since.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/annotations/Since.html
rename to docs/javadocs/com/google/gson/annotations/Since.html
diff --git a/gson/docs/javadocs/com/google/gson/annotations/Until.html b/docs/javadocs/com/google/gson/annotations/Until.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/annotations/Until.html
rename to docs/javadocs/com/google/gson/annotations/Until.html
diff --git a/gson/docs/javadocs/com/google/gson/annotations/class-use/Expose.html b/docs/javadocs/com/google/gson/annotations/class-use/Expose.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/annotations/class-use/Expose.html
rename to docs/javadocs/com/google/gson/annotations/class-use/Expose.html
diff --git a/gson/docs/javadocs/com/google/gson/annotations/class-use/JsonAdapter.html b/docs/javadocs/com/google/gson/annotations/class-use/JsonAdapter.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/annotations/class-use/JsonAdapter.html
rename to docs/javadocs/com/google/gson/annotations/class-use/JsonAdapter.html
diff --git a/gson/docs/javadocs/com/google/gson/annotations/class-use/SerializedName.html b/docs/javadocs/com/google/gson/annotations/class-use/SerializedName.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/annotations/class-use/SerializedName.html
rename to docs/javadocs/com/google/gson/annotations/class-use/SerializedName.html
diff --git a/gson/docs/javadocs/com/google/gson/annotations/class-use/Since.html b/docs/javadocs/com/google/gson/annotations/class-use/Since.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/annotations/class-use/Since.html
rename to docs/javadocs/com/google/gson/annotations/class-use/Since.html
diff --git a/gson/docs/javadocs/com/google/gson/annotations/class-use/Until.html b/docs/javadocs/com/google/gson/annotations/class-use/Until.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/annotations/class-use/Until.html
rename to docs/javadocs/com/google/gson/annotations/class-use/Until.html
diff --git a/gson/docs/javadocs/com/google/gson/annotations/package-frame.html b/docs/javadocs/com/google/gson/annotations/package-frame.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/annotations/package-frame.html
rename to docs/javadocs/com/google/gson/annotations/package-frame.html
diff --git a/gson/docs/javadocs/com/google/gson/annotations/package-summary.html b/docs/javadocs/com/google/gson/annotations/package-summary.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/annotations/package-summary.html
rename to docs/javadocs/com/google/gson/annotations/package-summary.html
diff --git a/gson/docs/javadocs/com/google/gson/annotations/package-tree.html b/docs/javadocs/com/google/gson/annotations/package-tree.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/annotations/package-tree.html
rename to docs/javadocs/com/google/gson/annotations/package-tree.html
diff --git a/gson/docs/javadocs/com/google/gson/annotations/package-use.html b/docs/javadocs/com/google/gson/annotations/package-use.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/annotations/package-use.html
rename to docs/javadocs/com/google/gson/annotations/package-use.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/ExclusionStrategy.html b/docs/javadocs/com/google/gson/class-use/ExclusionStrategy.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/ExclusionStrategy.html
rename to docs/javadocs/com/google/gson/class-use/ExclusionStrategy.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/FieldAttributes.html b/docs/javadocs/com/google/gson/class-use/FieldAttributes.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/FieldAttributes.html
rename to docs/javadocs/com/google/gson/class-use/FieldAttributes.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/FieldNamingPolicy.html b/docs/javadocs/com/google/gson/class-use/FieldNamingPolicy.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/FieldNamingPolicy.html
rename to docs/javadocs/com/google/gson/class-use/FieldNamingPolicy.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/FieldNamingStrategy.html b/docs/javadocs/com/google/gson/class-use/FieldNamingStrategy.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/FieldNamingStrategy.html
rename to docs/javadocs/com/google/gson/class-use/FieldNamingStrategy.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/Gson.html b/docs/javadocs/com/google/gson/class-use/Gson.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/Gson.html
rename to docs/javadocs/com/google/gson/class-use/Gson.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/GsonBuilder.html b/docs/javadocs/com/google/gson/class-use/GsonBuilder.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/GsonBuilder.html
rename to docs/javadocs/com/google/gson/class-use/GsonBuilder.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/InstanceCreator.html b/docs/javadocs/com/google/gson/class-use/InstanceCreator.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/InstanceCreator.html
rename to docs/javadocs/com/google/gson/class-use/InstanceCreator.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonArray.html b/docs/javadocs/com/google/gson/class-use/JsonArray.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/JsonArray.html
rename to docs/javadocs/com/google/gson/class-use/JsonArray.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonDeserializationContext.html b/docs/javadocs/com/google/gson/class-use/JsonDeserializationContext.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/JsonDeserializationContext.html
rename to docs/javadocs/com/google/gson/class-use/JsonDeserializationContext.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonDeserializer.html b/docs/javadocs/com/google/gson/class-use/JsonDeserializer.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/JsonDeserializer.html
rename to docs/javadocs/com/google/gson/class-use/JsonDeserializer.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonElement.html b/docs/javadocs/com/google/gson/class-use/JsonElement.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/JsonElement.html
rename to docs/javadocs/com/google/gson/class-use/JsonElement.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonIOException.html b/docs/javadocs/com/google/gson/class-use/JsonIOException.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/JsonIOException.html
rename to docs/javadocs/com/google/gson/class-use/JsonIOException.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonNull.html b/docs/javadocs/com/google/gson/class-use/JsonNull.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/JsonNull.html
rename to docs/javadocs/com/google/gson/class-use/JsonNull.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonObject.html b/docs/javadocs/com/google/gson/class-use/JsonObject.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/JsonObject.html
rename to docs/javadocs/com/google/gson/class-use/JsonObject.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonParseException.html b/docs/javadocs/com/google/gson/class-use/JsonParseException.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/JsonParseException.html
rename to docs/javadocs/com/google/gson/class-use/JsonParseException.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonParser.html b/docs/javadocs/com/google/gson/class-use/JsonParser.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/JsonParser.html
rename to docs/javadocs/com/google/gson/class-use/JsonParser.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonPrimitive.html b/docs/javadocs/com/google/gson/class-use/JsonPrimitive.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/JsonPrimitive.html
rename to docs/javadocs/com/google/gson/class-use/JsonPrimitive.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonSerializationContext.html b/docs/javadocs/com/google/gson/class-use/JsonSerializationContext.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/JsonSerializationContext.html
rename to docs/javadocs/com/google/gson/class-use/JsonSerializationContext.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonSerializer.html b/docs/javadocs/com/google/gson/class-use/JsonSerializer.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/JsonSerializer.html
rename to docs/javadocs/com/google/gson/class-use/JsonSerializer.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonStreamParser.html b/docs/javadocs/com/google/gson/class-use/JsonStreamParser.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/JsonStreamParser.html
rename to docs/javadocs/com/google/gson/class-use/JsonStreamParser.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/JsonSyntaxException.html b/docs/javadocs/com/google/gson/class-use/JsonSyntaxException.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/JsonSyntaxException.html
rename to docs/javadocs/com/google/gson/class-use/JsonSyntaxException.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/LongSerializationPolicy.html b/docs/javadocs/com/google/gson/class-use/LongSerializationPolicy.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/LongSerializationPolicy.html
rename to docs/javadocs/com/google/gson/class-use/LongSerializationPolicy.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/TypeAdapter.html b/docs/javadocs/com/google/gson/class-use/TypeAdapter.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/TypeAdapter.html
rename to docs/javadocs/com/google/gson/class-use/TypeAdapter.html
diff --git a/gson/docs/javadocs/com/google/gson/class-use/TypeAdapterFactory.html b/docs/javadocs/com/google/gson/class-use/TypeAdapterFactory.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/class-use/TypeAdapterFactory.html
rename to docs/javadocs/com/google/gson/class-use/TypeAdapterFactory.html
diff --git a/gson/docs/javadocs/com/google/gson/package-frame.html b/docs/javadocs/com/google/gson/package-frame.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/package-frame.html
rename to docs/javadocs/com/google/gson/package-frame.html
diff --git a/gson/docs/javadocs/com/google/gson/package-summary.html b/docs/javadocs/com/google/gson/package-summary.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/package-summary.html
rename to docs/javadocs/com/google/gson/package-summary.html
diff --git a/gson/docs/javadocs/com/google/gson/package-tree.html b/docs/javadocs/com/google/gson/package-tree.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/package-tree.html
rename to docs/javadocs/com/google/gson/package-tree.html
diff --git a/gson/docs/javadocs/com/google/gson/package-use.html b/docs/javadocs/com/google/gson/package-use.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/package-use.html
rename to docs/javadocs/com/google/gson/package-use.html
diff --git a/gson/docs/javadocs/com/google/gson/reflect/TypeToken.html b/docs/javadocs/com/google/gson/reflect/TypeToken.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/reflect/TypeToken.html
rename to docs/javadocs/com/google/gson/reflect/TypeToken.html
diff --git a/gson/docs/javadocs/com/google/gson/reflect/class-use/TypeToken.html b/docs/javadocs/com/google/gson/reflect/class-use/TypeToken.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/reflect/class-use/TypeToken.html
rename to docs/javadocs/com/google/gson/reflect/class-use/TypeToken.html
diff --git a/gson/docs/javadocs/com/google/gson/reflect/package-frame.html b/docs/javadocs/com/google/gson/reflect/package-frame.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/reflect/package-frame.html
rename to docs/javadocs/com/google/gson/reflect/package-frame.html
diff --git a/gson/docs/javadocs/com/google/gson/reflect/package-summary.html b/docs/javadocs/com/google/gson/reflect/package-summary.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/reflect/package-summary.html
rename to docs/javadocs/com/google/gson/reflect/package-summary.html
diff --git a/gson/docs/javadocs/com/google/gson/reflect/package-tree.html b/docs/javadocs/com/google/gson/reflect/package-tree.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/reflect/package-tree.html
rename to docs/javadocs/com/google/gson/reflect/package-tree.html
diff --git a/gson/docs/javadocs/com/google/gson/reflect/package-use.html b/docs/javadocs/com/google/gson/reflect/package-use.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/reflect/package-use.html
rename to docs/javadocs/com/google/gson/reflect/package-use.html
diff --git a/gson/docs/javadocs/com/google/gson/stream/JsonReader.html b/docs/javadocs/com/google/gson/stream/JsonReader.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/stream/JsonReader.html
rename to docs/javadocs/com/google/gson/stream/JsonReader.html
diff --git a/gson/docs/javadocs/com/google/gson/stream/JsonToken.html b/docs/javadocs/com/google/gson/stream/JsonToken.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/stream/JsonToken.html
rename to docs/javadocs/com/google/gson/stream/JsonToken.html
diff --git a/gson/docs/javadocs/com/google/gson/stream/JsonWriter.html b/docs/javadocs/com/google/gson/stream/JsonWriter.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/stream/JsonWriter.html
rename to docs/javadocs/com/google/gson/stream/JsonWriter.html
diff --git a/gson/docs/javadocs/com/google/gson/stream/MalformedJsonException.html b/docs/javadocs/com/google/gson/stream/MalformedJsonException.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/stream/MalformedJsonException.html
rename to docs/javadocs/com/google/gson/stream/MalformedJsonException.html
diff --git a/gson/docs/javadocs/com/google/gson/stream/class-use/JsonReader.html b/docs/javadocs/com/google/gson/stream/class-use/JsonReader.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/stream/class-use/JsonReader.html
rename to docs/javadocs/com/google/gson/stream/class-use/JsonReader.html
diff --git a/gson/docs/javadocs/com/google/gson/stream/class-use/JsonToken.html b/docs/javadocs/com/google/gson/stream/class-use/JsonToken.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/stream/class-use/JsonToken.html
rename to docs/javadocs/com/google/gson/stream/class-use/JsonToken.html
diff --git a/gson/docs/javadocs/com/google/gson/stream/class-use/JsonWriter.html b/docs/javadocs/com/google/gson/stream/class-use/JsonWriter.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/stream/class-use/JsonWriter.html
rename to docs/javadocs/com/google/gson/stream/class-use/JsonWriter.html
diff --git a/gson/docs/javadocs/com/google/gson/stream/class-use/MalformedJsonException.html b/docs/javadocs/com/google/gson/stream/class-use/MalformedJsonException.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/stream/class-use/MalformedJsonException.html
rename to docs/javadocs/com/google/gson/stream/class-use/MalformedJsonException.html
diff --git a/gson/docs/javadocs/com/google/gson/stream/package-frame.html b/docs/javadocs/com/google/gson/stream/package-frame.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/stream/package-frame.html
rename to docs/javadocs/com/google/gson/stream/package-frame.html
diff --git a/gson/docs/javadocs/com/google/gson/stream/package-summary.html b/docs/javadocs/com/google/gson/stream/package-summary.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/stream/package-summary.html
rename to docs/javadocs/com/google/gson/stream/package-summary.html
diff --git a/gson/docs/javadocs/com/google/gson/stream/package-tree.html b/docs/javadocs/com/google/gson/stream/package-tree.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/stream/package-tree.html
rename to docs/javadocs/com/google/gson/stream/package-tree.html
diff --git a/gson/docs/javadocs/com/google/gson/stream/package-use.html b/docs/javadocs/com/google/gson/stream/package-use.html
similarity index 100%
rename from gson/docs/javadocs/com/google/gson/stream/package-use.html
rename to docs/javadocs/com/google/gson/stream/package-use.html
diff --git a/gson/docs/javadocs/constant-values.html b/docs/javadocs/constant-values.html
similarity index 100%
rename from gson/docs/javadocs/constant-values.html
rename to docs/javadocs/constant-values.html
diff --git a/gson/docs/javadocs/deprecated-list.html b/docs/javadocs/deprecated-list.html
similarity index 100%
rename from gson/docs/javadocs/deprecated-list.html
rename to docs/javadocs/deprecated-list.html
diff --git a/gson/docs/javadocs/help-doc.html b/docs/javadocs/help-doc.html
similarity index 100%
rename from gson/docs/javadocs/help-doc.html
rename to docs/javadocs/help-doc.html
diff --git a/gson/docs/javadocs/index-all.html b/docs/javadocs/index-all.html
similarity index 100%
rename from gson/docs/javadocs/index-all.html
rename to docs/javadocs/index-all.html
diff --git a/gson/docs/javadocs/index.html b/docs/javadocs/index.html
similarity index 100%
rename from gson/docs/javadocs/index.html
rename to docs/javadocs/index.html
diff --git a/gson/docs/javadocs/overview-frame.html b/docs/javadocs/overview-frame.html
similarity index 100%
rename from gson/docs/javadocs/overview-frame.html
rename to docs/javadocs/overview-frame.html
diff --git a/gson/docs/javadocs/overview-summary.html b/docs/javadocs/overview-summary.html
similarity index 100%
rename from gson/docs/javadocs/overview-summary.html
rename to docs/javadocs/overview-summary.html
diff --git a/gson/docs/javadocs/overview-tree.html b/docs/javadocs/overview-tree.html
similarity index 100%
rename from gson/docs/javadocs/overview-tree.html
rename to docs/javadocs/overview-tree.html
diff --git a/gson/docs/javadocs/package-list b/docs/javadocs/package-list
similarity index 100%
rename from gson/docs/javadocs/package-list
rename to docs/javadocs/package-list
diff --git a/gson/docs/javadocs/resources/inherit.gif b/docs/javadocs/resources/inherit.gif
similarity index 100%
rename from gson/docs/javadocs/resources/inherit.gif
rename to docs/javadocs/resources/inherit.gif
diff --git a/gson/docs/javadocs/script.js b/docs/javadocs/script.js
similarity index 100%
rename from gson/docs/javadocs/script.js
rename to docs/javadocs/script.js
diff --git a/gson/docs/javadocs/serialized-form.html b/docs/javadocs/serialized-form.html
similarity index 100%
rename from gson/docs/javadocs/serialized-form.html
rename to docs/javadocs/serialized-form.html
diff --git a/gson/docs/javadocs/stylesheet.css b/docs/javadocs/stylesheet.css
similarity index 100%
rename from gson/docs/javadocs/stylesheet.css
rename to docs/javadocs/stylesheet.css
diff --git a/examples/android-proguard-example/AndroidManifest.xml b/examples/android-proguard-example/AndroidManifest.xml
deleted file mode 100755
index 7e9b1d8b0..000000000
--- a/examples/android-proguard-example/AndroidManifest.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-  package="com.google.gson.examples.android"
-  android:versionCode="1"
-  android:versionName="1.0">
-  <uses-sdk android:minSdkVersion="3"/>
-  <application android:icon="@drawable/icon" android:label="@string/app_name">
-    <activity android:name=".GsonProguardExampleActivity" 
-              android:label="@string/app_name" 
-              android:exported="true" 
-              android:icon="@drawable/icon"
-              android:configChanges="keyboardHidden|orientation" 
-              android:enabled="true">
-      <intent-filter>
-        <action android:name="android.intent.action.MAIN" />
-        <category android:name="android.intent.category.LAUNCHER" />
-      </intent-filter>
-    </activity>
-  </application>
-  <uses-permission android:name="android.permission.INTERNET" />
-</manifest> 
diff --git a/examples/android-proguard-example/default.properties b/examples/android-proguard-example/default.properties
deleted file mode 100644
index 7d4fed0b2..000000000
--- a/examples/android-proguard-example/default.properties
+++ /dev/null
@@ -1,12 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system use,
-# "build.properties", and override values to adapt the script to your
-# project structure.
-
-# Project target.
-target=android-3
-proguard.config=proguard.cfg
\ No newline at end of file
diff --git a/examples/android-proguard-example/proguard.cfg b/examples/android-proguard-example/proguard.cfg
deleted file mode 100644
index 5db375b8b..000000000
--- a/examples/android-proguard-example/proguard.cfg
+++ /dev/null
@@ -1,22 +0,0 @@
-##---------------Begin: proguard configuration for Gson  ----------
-# Gson uses generic type information stored in a class file when working with fields. Proguard
-# removes such information by default, so configure it to keep all of it.
--keepattributes Signature
-
-# For using GSON @Expose annotation
--keepattributes *Annotation*
-
-# Gson specific classes
--keep class sun.misc.Unsafe { *; }
-#-keep class com.google.gson.stream.** { *; }
-
-# Application classes that will be serialized/deserialized over Gson
--keep class com.google.gson.examples.android.model.** { *; }
-
-# Prevent proguard from stripping interface information from TypeAdapterFactory,
-# JsonSerializer, JsonDeserializer instances (so they can be used in @JsonAdapter)
--keep class * implements com.google.gson.TypeAdapterFactory
--keep class * implements com.google.gson.JsonSerializer
--keep class * implements com.google.gson.JsonDeserializer
-
-##---------------End: proguard configuration for Gson  ----------
diff --git a/examples/android-proguard-example/res/drawable/icon.png b/examples/android-proguard-example/res/drawable/icon.png
deleted file mode 100644
index a07c69fa5..000000000
Binary files a/examples/android-proguard-example/res/drawable/icon.png and /dev/null differ
diff --git a/examples/android-proguard-example/res/layout/main.xml b/examples/android-proguard-example/res/layout/main.xml
deleted file mode 100644
index 0ac46e684..000000000
--- a/examples/android-proguard-example/res/layout/main.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<LinearLayout
-  xmlns:android="http://schemas.android.com/apk/res/android" 
-  android:orientation="vertical"
-  android:layout_width="fill_parent"
-  android:layout_height="fill_parent">
-  
-  <TextView android:id="@+id/tv"
-    android:layout_width="fill_parent"
-    android:layout_height="wrap_content" />
-</LinearLayout>
\ No newline at end of file
diff --git a/examples/android-proguard-example/res/values/strings.xml b/examples/android-proguard-example/res/values/strings.xml
deleted file mode 100644
index ba3be81e8..000000000
--- a/examples/android-proguard-example/res/values/strings.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-  <string name="app_name">Gson Proguard Example</string>
-</resources>
-
diff --git a/examples/android-proguard-example/src/com/google/gson/examples/android/GsonProguardExampleActivity.java b/examples/android-proguard-example/src/com/google/gson/examples/android/GsonProguardExampleActivity.java
deleted file mode 100644
index bd5443114..000000000
--- a/examples/android-proguard-example/src/com/google/gson/examples/android/GsonProguardExampleActivity.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.examples.android;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.widget.TextView;
-
-import com.google.gson.Gson;
-import com.google.gson.examples.android.model.Cart;
-import com.google.gson.examples.android.model.LineItem;
-
-/**
- * Activity class illustrating how to use proguard with Gson
- *
- * @author Inderjeet Singh
- */
-public class GsonProguardExampleActivity extends Activity {
-  @Override
-  public void onCreate(Bundle icicle) {
-    super.onCreate(icicle);
-    setContentView(R.layout.main);
-    TextView tv = (TextView) findViewById(R.id.tv);
-    Gson gson = new Gson();
-    Cart cart = buildCart();
-    StringBuilder sb = new StringBuilder();
-    sb.append("Gson.toJson() example: \n");
-    sb.append("  Cart Object: ").append(cart).append("\n");
-    sb.append("  Cart JSON: ").append(gson.toJson(cart)).append("\n");
-    sb.append("\n\nGson.fromJson() example: \n");
-    String json = "{buyer:'Happy Camper',creditCard:'4111-1111-1111-1111',"
-      + "lineItems:[{name:'nails',priceInMicros:100000,quantity:100,currencyCode:'USD'}]}";
-    sb.append("Cart JSON: ").append(json).append("\n");
-    sb.append("Cart Object: ").append(gson.fromJson(json, Cart.class)).append("\n");
-    tv.setText(sb.toString());
-    tv.invalidate();
-  }
-
-  private Cart buildCart() {
-    List<LineItem> lineItems = new ArrayList<LineItem>();
-    lineItems.add(new LineItem("hammer", 1, 12000000, "USD"));
-    return new Cart(lineItems, "Happy Buyer", "4111-1111-1111-1111");
-  }
-}
diff --git a/examples/android-proguard-example/src/com/google/gson/examples/android/model/Cart.java b/examples/android-proguard-example/src/com/google/gson/examples/android/model/Cart.java
deleted file mode 100644
index 7582036eb..000000000
--- a/examples/android-proguard-example/src/com/google/gson/examples/android/model/Cart.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.examples.android.model;
-
-import java.lang.reflect.ParameterizedType;
-import java.lang.reflect.Type;
-import java.lang.reflect.WildcardType;
-import java.util.List;
-
-import com.google.gson.annotations.SerializedName;
-
-/**
- * A model object representing a cart that can be posted to an order-processing server
- * 
- * @author Inderjeet Singh
- */
-public class Cart {
-  public final List<LineItem> lineItems;
-
-  @SerializedName("buyer")
-  private final String buyerName;
-
-  private final String creditCard;
-
-  public Cart(List<LineItem> lineItems, String buyerName, String creditCard) {
-    this.lineItems = lineItems;
-    this.buyerName = buyerName;
-    this.creditCard = creditCard;
-  }
-
-  public List<LineItem> getLineItems() {
-    return lineItems;
-  }
-
-  public String getBuyerName() {
-    return buyerName;
-  }
-
-  public String getCreditCard() {
-    return creditCard;
-  }
-
-  @Override
-  public String toString() {
-    StringBuilder itemsText = new StringBuilder();
-    boolean first = true;
-    if (lineItems != null) {
-      try {
-        Class<?> fieldType = Cart.class.getField("lineItems").getType();
-        System.out.println("LineItems CLASS: " + getSimpleTypeName(fieldType));
-      } catch (SecurityException e) {
-      } catch (NoSuchFieldException e) {
-      }
-      for (LineItem item : lineItems) {
-        if (first) {
-          first = false;
-        } else {
-          itemsText.append("; ");
-        }
-        itemsText.append(item);
-      }
-    }
-    return "[BUYER: " + buyerName + "; CC: " + creditCard + "; "
-    + "LINE_ITEMS: " + itemsText.toString() + "]";
-  }
-
-  @SuppressWarnings("unchecked")
-  public static String getSimpleTypeName(Type type) {
-    if (type == null) {
-      return "null";
-    }
-    if (type instanceof Class) {
-      return ((Class)type).getSimpleName();
-    } else if (type instanceof ParameterizedType) {
-      ParameterizedType pType = (ParameterizedType) type;
-      StringBuilder sb = new StringBuilder(getSimpleTypeName(pType.getRawType()));
-      sb.append('<');
-      boolean first = true;
-      for (Type argumentType : pType.getActualTypeArguments()) {
-        if (first) {
-          first = false;
-        } else {
-          sb.append(',');
-        }
-        sb.append(getSimpleTypeName(argumentType));
-      }
-      sb.append('>');
-      return sb.toString();
-    } else if (type instanceof WildcardType) {
-      return "?";
-    }
-    return type.toString();
-  }
-
-}
diff --git a/examples/android-proguard-example/src/com/google/gson/examples/android/model/LineItem.java b/examples/android-proguard-example/src/com/google/gson/examples/android/model/LineItem.java
deleted file mode 100644
index 1273ec971..000000000
--- a/examples/android-proguard-example/src/com/google/gson/examples/android/model/LineItem.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.examples.android.model;
-
-/**
- * A line item in a cart. This is not a rest resource, just a dependent object
- *
- * @author Inderjeet Singh
- */
-public class LineItem {
-  private final String name;
-  private final int quantity;
-  private final long priceInMicros;
-  private final String currencyCode;
-
-  public LineItem(String name, int quantity, long priceInMicros, String currencyCode) {
-    this.name = name;
-    this.quantity = quantity;
-    this.priceInMicros = priceInMicros;
-    this.currencyCode = currencyCode;
-  }
-
-  public String getName() {
-    return name;
-  }
-
-  public int getQuantity() {
-    return quantity;
-  }
-
-  public long getPriceInMicros() {
-    return priceInMicros;
-  }
-
-  public String getCurrencyCode() {
-    return currencyCode;
-  }
-
-  @Override
-  public String toString() {
-    return String.format("(item: %s, qty: %s, price: %.2f %s)",
-        name, quantity, priceInMicros / 1000000d, currencyCode);
-  }
-}
diff --git a/extras/pom.xml b/extras/pom.xml
deleted file mode 100644
index 1c5e76c39..000000000
--- a/extras/pom.xml
+++ /dev/null
@@ -1,191 +0,0 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>com.google.code.gson</groupId>
-  <artifactId>gson-extras</artifactId>
-  <packaging>jar</packaging>
-  <version>1.0-SNAPSHOT</version>
-  <inceptionYear>2008</inceptionYear>
-  <name>Gson Extras</name>
-  <parent>
-    <groupId>org.sonatype.oss</groupId>
-    <artifactId>oss-parent</artifactId>
-    <version>9</version>
-  </parent>
-  <url>http://code.google.com/p/google-gson/</url>
-  <description>Google Gson grab bag of utilities, type adapters, etc.</description>
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-  </properties>
-  <licenses>
-    <license>
-      <name>The Apache Software License, Version 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-      <distribution>repo</distribution>
-    </license>
-  </licenses>
-  <scm>
-    <connection>scm:svn:http://google-gson.googlecode.com/svn/trunk/extras</connection>
-    <developerConnection>scm:svn:https://google-gson.googlecode.com/svn/trunk/extras</developerConnection>
-    <url>http://google-gson.codegoogle.com/svn/trunk/extras</url>
-  </scm>
-  <issueManagement>
-    <system>Google Code Issue Tracking</system>
-    <url>http://code.google.com/p/google-gson/issues/list</url>
-  </issueManagement>
-  <organization>
-    <name>Google, Inc.</name>
-    <url>http://www.google.com</url>
-  </organization>
-  <dependencies>
-    <dependency>
-      <groupId>com.google.code.gson</groupId>
-      <artifactId>gson</artifactId>
-      <version>2.7</version>
-      <scope>compile</scope>
-    </dependency>
-    <dependency>
-      <groupId>javax.annotation</groupId>
-      <artifactId>jsr250-api</artifactId>
-      <version>1.0</version>
-    </dependency>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>3.8.2</version>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-  <profiles>
-    <!-- Activate PGP signing only when performing a release -->
-    <profile>
-      <id>release-sign-artifacts</id>
-      <activation>
-        <property>
-          <name>performRelease</name>
-          <value>true</value>
-        </property>
-      </activation>
-      <build>
-        <plugins>
-          <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-gpg-plugin</artifactId>
-            <version>1.5</version>
-            <executions>
-              <execution>
-                <id>sign-artifacts</id>
-                <phase>verify</phase>
-                <goals>
-                  <goal>sign</goal>
-                </goals>
-              </execution>
-            </executions>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-  </profiles>  
-  <build>
-    <defaultGoal>package</defaultGoal>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>3.5.1</version>
-        <configuration>
-          <source>1.6</source>
-          <target>1.6</target>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-jar-plugin</artifactId>
-        <version>3.0.2</version>
-        <executions>
-          <execution>
-            <phase>package</phase>
-            <goals>
-              <goal>jar</goal>
-            </goals>
-          </execution>
-        </executions>
-        <configuration>
-          <archive>
-            <addMavenDescriptor>false</addMavenDescriptor>
-          </archive>
-        </configuration>
-      </plugin>
-      <plugin>
-         <groupId>org.apache.maven.plugins</groupId>
-         <artifactId>maven-source-plugin</artifactId>
-         <version>3.0.1</version>
-         <executions>
-           <execution>
-             <id>attach-sources</id>
-             <phase>verify</phase>
-             <goals>
-               <goal>jar</goal>
-             </goals>
-           </execution>
-         </executions>
-       </plugin>
-       <plugin>
-         <groupId>org.apache.maven.plugins</groupId>
-         <artifactId>maven-javadoc-plugin</artifactId>
-         <version>2.10.4</version>
-         <executions>
-           <execution>
-             <id>attach-javadocs</id>
-             <goals>
-               <goal>jar</goal>
-             </goals>
-           </execution>
-         </executions>
-         <configuration>
-           <links>
-             <link>http://download.oracle.com/javase/1.5.0/docs/api/</link>
-           </links>
-           <version>true</version>
-           <show>public</show>
-         </configuration>
-       </plugin>
-       <plugin>
-         <groupId>org.apache.maven.plugins</groupId>
-         <artifactId>maven-eclipse-plugin</artifactId>
-         <version>2.10</version>
-         <configuration>
-           <downloadSources>true</downloadSources>
-           <downloadJavadocs>true</downloadJavadocs>
-           <workspace>
-             ../eclipse-ws/
-           </workspace>
-           <workspaceCodeStylesURL>
-             file:///${basedir}/../lib/gson-formatting-styles.xml
-           </workspaceCodeStylesURL>
-         </configuration>
-       </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-release-plugin</artifactId>
-        <!--  version>2.3.2</version -->
-        <configuration>
-          <arguments>-DenableCiProfile=true</arguments>
-          <tagBase>https://google-gson.googlecode.com/svn/tags/</tagBase>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-  <developers>
-    <developer>
-      <name>Inderjeet Singh</name>
-    </developer>
-    <developer>
-      <name>Joel Leitch</name>
-      <organization>Google Inc.</organization>
-    </developer>
-    <developer>
-      <name>Jesse Wilson</name>
-      <organization>Square Inc.</organization>
-    </developer>
-  </developers>
-</project>
diff --git a/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java b/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java
deleted file mode 100644
index bd7c2d24d..000000000
--- a/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.extras.examples.rawcollections;
-
-import java.util.ArrayList;
-import java.util.Collection;
-
-import com.google.gson.Gson;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonParser;
-
-public class RawCollectionsExample {
-  static class Event {
-    private String name;
-    private String source;
-    private Event(String name, String source) {
-      this.name = name;
-      this.source = source;
-    }
-    @Override
-    public String toString() {
-      return String.format("(name=%s, source=%s)", name, source);
-    }
-  }
-
-  @SuppressWarnings({ "unchecked", "rawtypes" })
-  public static void main(String[] args) {
-    Gson gson = new Gson();
-    Collection collection = new ArrayList();
-    collection.add("hello");
-    collection.add(5);
-    collection.add(new Event("GREETINGS", "guest"));
-    String json = gson.toJson(collection);
-    System.out.println("Using Gson.toJson() on a raw collection: " + json);
-    JsonParser parser = new JsonParser();
-    JsonArray array = parser.parse(json).getAsJsonArray();
-    String message = gson.fromJson(array.get(0), String.class);
-    int number = gson.fromJson(array.get(1), int.class);
-    Event event = gson.fromJson(array.get(2), Event.class);
-    System.out.printf("Using Gson.fromJson() to get: %s, %d, %s", message, number, event);
-  }
-}
diff --git a/extras/src/main/java/com/google/gson/graph/GraphAdapterBuilder.java b/extras/src/main/java/com/google/gson/graph/GraphAdapterBuilder.java
deleted file mode 100644
index cd8ea00f4..000000000
--- a/extras/src/main/java/com/google/gson/graph/GraphAdapterBuilder.java
+++ /dev/null
@@ -1,308 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.graph;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonElement;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.ObjectConstructor;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
-import java.io.IOException;
-import java.lang.reflect.Type;
-import java.util.HashMap;
-import java.util.IdentityHashMap;
-import java.util.LinkedList;
-import java.util.Map;
-import java.util.Queue;
-
-/**
- * Writes a graph of objects as a list of named nodes.
- */
-// TODO: proper documentation
-@SuppressWarnings("rawtypes")
-public final class GraphAdapterBuilder {
-  private final Map<Type, InstanceCreator<?>> instanceCreators;
-  private final ConstructorConstructor constructorConstructor;
-
-  public GraphAdapterBuilder() {
-      this.instanceCreators = new HashMap<Type, InstanceCreator<?>>();
-      this.constructorConstructor = new ConstructorConstructor(instanceCreators);
-  }
-  public GraphAdapterBuilder addType(Type type) {
-    final ObjectConstructor<?> objectConstructor = constructorConstructor.get(TypeToken.get(type));
-    InstanceCreator<Object> instanceCreator = new InstanceCreator<Object>() {
-      public Object createInstance(Type type) {
-        return objectConstructor.construct();
-      }
-    };
-    return addType(type, instanceCreator);
-  }
-
-  public GraphAdapterBuilder addType(Type type, InstanceCreator<?> instanceCreator) {
-    if (type == null || instanceCreator == null) {
-      throw new NullPointerException();
-    }
-    instanceCreators.put(type, instanceCreator);
-    return this;
-  }
-
-  public void registerOn(GsonBuilder gsonBuilder) {
-    Factory factory = new Factory(instanceCreators);
-    gsonBuilder.registerTypeAdapterFactory(factory);
-    for (Map.Entry<Type, InstanceCreator<?>> entry : instanceCreators.entrySet()) {
-      gsonBuilder.registerTypeAdapter(entry.getKey(), factory);
-    }
-  }
-
-  static class Factory implements TypeAdapterFactory, InstanceCreator {
-    private final Map<Type, InstanceCreator<?>> instanceCreators;
-    private final ThreadLocal<Graph> graphThreadLocal = new ThreadLocal<Graph>();
-
-    Factory(Map<Type, InstanceCreator<?>> instanceCreators) {
-      this.instanceCreators = instanceCreators;
-    }
-
-    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
-      if (!instanceCreators.containsKey(type.getType())) {
-        return null;
-      }
-
-      final TypeAdapter<T> typeAdapter = gson.getDelegateAdapter(this, type);
-      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
-      return new TypeAdapter<T>() {
-        @Override public void write(JsonWriter out, T value) throws IOException {
-          if (value == null) {
-            out.nullValue();
-            return;
-          }
-
-          Graph graph = graphThreadLocal.get();
-          boolean writeEntireGraph = false;
-
-          /*
-           * We have one of two cases:
-           *  1. We've encountered the first known object in this graph. Write
-           *     out the graph, starting with that object.
-           *  2. We've encountered another graph object in the course of #1.
-           *     Just write out this object's name. We'll circle back to writing
-           *     out the object's value as a part of #1.
-           */
-
-          if (graph == null) {
-            writeEntireGraph = true;
-            graph = new Graph(new IdentityHashMap<Object, Element<?>>());
-          }
-
-          @SuppressWarnings("unchecked") // graph.map guarantees consistency between value and T
-          Element<T> element = (Element<T>) graph.map.get(value);
-          if (element == null) {
-            element = new Element<T>(value, graph.nextName(), typeAdapter, null);
-            graph.map.put(value, element);
-            graph.queue.add(element);
-          }
-
-          if (writeEntireGraph) {
-            graphThreadLocal.set(graph);
-            try {
-              out.beginObject();
-              Element<?> current;
-              while ((current = graph.queue.poll()) != null) {
-                out.name(current.id);
-                current.write(out);
-              }
-              out.endObject();
-            } finally {
-              graphThreadLocal.remove();
-            }
-          } else {
-            out.value(element.id);
-          }
-        }
-
-        @Override public T read(JsonReader in) throws IOException {
-          if (in.peek() == JsonToken.NULL) {
-            in.nextNull();
-            return null;
-          }
-
-          /*
-           * Again we have one of two cases:
-           *  1. We've encountered the first known object in this graph. Read
-           *     the entire graph in as a map from names to their JsonElements.
-           *     Then convert the first JsonElement to its Java object.
-           *  2. We've encountered another graph object in the course of #1.
-           *     Read in its name, then deserialize its value from the
-           *     JsonElement in our map. We need to do this lazily because we
-           *     don't know which TypeAdapter to use until a value is
-           *     encountered in the wild.
-           */
-
-          String currentName = null;
-          Graph graph = graphThreadLocal.get();
-          boolean readEntireGraph = false;
-
-          if (graph == null) {
-            graph = new Graph(new HashMap<Object, Element<?>>());
-            readEntireGraph = true;
-
-            // read the entire tree into memory
-            in.beginObject();
-            while (in.hasNext()) {
-              String name = in.nextName();
-              if (currentName == null) {
-                currentName = name;
-              }
-              JsonElement element = elementAdapter.read(in);
-              graph.map.put(name, new Element<T>(null, name, typeAdapter, element));
-            }
-            in.endObject();
-          } else {
-            currentName = in.nextString();
-          }
-
-          if (readEntireGraph) {
-            graphThreadLocal.set(graph);
-          }
-          try {
-            @SuppressWarnings("unchecked") // graph.map guarantees consistency between value and T
-            Element<T> element = (Element<T>) graph.map.get(currentName);
-            // now that we know the typeAdapter for this name, go from JsonElement to 'T'
-            if (element.value == null) {
-              element.typeAdapter = typeAdapter;
-              element.read(graph);
-            }
-            return element.value;
-          } finally {
-            if (readEntireGraph) {
-              graphThreadLocal.remove();
-            }
-          }
-        }
-      };
-    }
-
-    /**
-     * Hook for the graph adapter to get a reference to a deserialized value
-     * before that value is fully populated. This is useful to deserialize
-     * values that directly or indirectly reference themselves: we can hand
-     * out an instance before read() returns.
-     *
-     * <p>Gson should only ever call this method when we're expecting it to;
-     * that is only when we've called back into Gson to deserialize a tree.
-     */
-    @SuppressWarnings("unchecked")
-    public Object createInstance(Type type) {
-      Graph graph = graphThreadLocal.get();
-      if (graph == null || graph.nextCreate == null) {
-        throw new IllegalStateException("Unexpected call to createInstance() for " + type);
-      }
-      InstanceCreator<?> creator = instanceCreators.get(type);
-      Object result = creator.createInstance(type);
-      graph.nextCreate.value = result;
-      graph.nextCreate = null;
-      return result;
-    }
-  }
-
-  static class Graph {
-    /**
-     * The graph elements. On serialization keys are objects (using an identity
-     * hash map) and on deserialization keys are the string names (using a
-     * standard hash map).
-     */
-    private final Map<Object, Element<?>> map;
-
-    /**
-     * The queue of elements to write during serialization. Unused during
-     * deserialization.
-     */
-    private final Queue<Element> queue = new LinkedList<Element>();
-
-    /**
-     * The instance currently being deserialized. Used as a backdoor between
-     * the graph traversal (which needs to know instances) and instance creators
-     * which create them.
-     */
-    private Element nextCreate;
-
-    private Graph(Map<Object, Element<?>> map) {
-      this.map = map;
-    }
-
-    /**
-     * Returns a unique name for an element to be inserted into the graph.
-     */
-    public String nextName() {
-      return "0x" + Integer.toHexString(map.size() + 1);
-    }
-  }
-
-  /**
-   * An element of the graph during serialization or deserialization.
-   */
-  static class Element<T> {
-    /**
-     * This element's name in the top level graph object.
-     */
-    private final String id;
-
-    /**
-     * The value if known. During deserialization this is lazily populated.
-     */
-    private T value;
-
-    /**
-     * This element's type adapter if known. During deserialization this is
-     * lazily populated.
-     */
-    private TypeAdapter<T> typeAdapter;
-
-    /**
-     * The element to deserialize. Unused in serialization.
-     */
-    private final JsonElement element;
-
-    Element(T value, String id, TypeAdapter<T> typeAdapter, JsonElement element) {
-      this.value = value;
-      this.id = id;
-      this.typeAdapter = typeAdapter;
-      this.element = element;
-    }
-
-    void write(JsonWriter out) throws IOException {
-      typeAdapter.write(out, value);
-    }
-
-    void read(Graph graph) throws IOException {
-      if (graph.nextCreate != null) {
-        throw new IllegalStateException("Unexpected recursive call to read() for " + id);
-      }
-      graph.nextCreate = this;
-      value = typeAdapter.fromJsonTree(element);
-      if (value == null) {
-        throw new IllegalStateException("non-null value deserialized to null: " + element);
-      }
-    }
-  }
-}
diff --git a/extras/src/main/java/com/google/gson/interceptors/Intercept.java b/extras/src/main/java/com/google/gson/interceptors/Intercept.java
deleted file mode 100644
index 0c4e9043f..000000000
--- a/extras/src/main/java/com/google/gson/interceptors/Intercept.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.interceptors;
-
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-
-/**
- * Use this annotation to indicate various interceptors for class instances after
- * they have been processed by Gson. For example, you can use it to validate an instance
- * after it has been deserialized from Json.
- * Here is an example of how this annotation is used:
- * <p>Here is an example of how this annotation is used:
- * <p><pre>
- * &#64Intercept(postDeserialize=UserValidator.class)
- * public class User {
- *   String name;
- *   String password;
- *   String emailAddress;
- * }
- *
- * public class UserValidator implements JsonPostDeserializer&lt;User&gt; {
- *   public void postDeserialize(User user) {
- *     // Do some checks on user
- *     if (user.name == null || user.password == null) {
- *       throw new JsonParseException("name and password are required fields.");
- *     }
- *     if (user.emailAddress == null) {
- *       emailAddress = "unknown"; // assign a default value.
- *     }
- *   }
- * }
- * </pre></p>
- *
- * @author Inderjeet Singh
- */
-@Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.TYPE)
-public @interface Intercept {
-
-  /**
-   * Specify the class that provides the methods that should be invoked after an instance
-   * has been deserialized.
-   */
-  @SuppressWarnings("rawtypes")
-  public Class<? extends JsonPostDeserializer> postDeserialize();
-}
diff --git a/extras/src/main/java/com/google/gson/interceptors/InterceptorFactory.java b/extras/src/main/java/com/google/gson/interceptors/InterceptorFactory.java
deleted file mode 100644
index 907fca3a4..000000000
--- a/extras/src/main/java/com/google/gson/interceptors/InterceptorFactory.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.google.gson.interceptors;
-
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-import java.io.IOException;
-
-/**
- * A type adapter factory that implements {@code @Intercept}.
- */
-public final class InterceptorFactory implements TypeAdapterFactory {
-  public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
-    Intercept intercept = type.getRawType().getAnnotation(Intercept.class);
-    if (intercept == null) {
-      return null;
-    }
-
-    TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);
-    return new InterceptorAdapter<T>(delegate, intercept);
-  }
-
-  static class InterceptorAdapter<T> extends TypeAdapter<T> {
-    private final TypeAdapter<T> delegate;
-    private final JsonPostDeserializer<T> postDeserializer;
-
-    @SuppressWarnings("unchecked") // ?
-    public InterceptorAdapter(TypeAdapter<T> delegate, Intercept intercept) {
-      try {
-        this.delegate = delegate;
-        this.postDeserializer = intercept.postDeserialize().newInstance();
-      } catch (Exception e) {
-        throw new RuntimeException(e);
-      }
-    }
-
-    @Override public void write(JsonWriter out, T value) throws IOException {
-      delegate.write(out, value);
-    }
-
-    @Override public T read(JsonReader in) throws IOException {
-      T result = delegate.read(in);
-      postDeserializer.postDeserialize(result);
-      return result;
-    }
-  }
-}
diff --git a/extras/src/main/java/com/google/gson/interceptors/JsonPostDeserializer.java b/extras/src/main/java/com/google/gson/interceptors/JsonPostDeserializer.java
deleted file mode 100644
index 0f3a72ca8..000000000
--- a/extras/src/main/java/com/google/gson/interceptors/JsonPostDeserializer.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.interceptors;
-
-import com.google.gson.InstanceCreator;
-
-/**
- * This interface is implemented by a class that wishes to inspect or modify an object
- * after it has been deserialized. You must define a no-args constructor or register an
- * {@link InstanceCreator} for such a class.
- *
- * @author Inderjeet Singh
- */
-public interface JsonPostDeserializer<T> {
-
-  /**
-   * This method is called by Gson after the object has been deserialized from Json.
-   */
-  public void postDeserialize(T object);
-}
diff --git a/extras/src/main/java/com/google/gson/typeadapters/PostConstructAdapterFactory.java b/extras/src/main/java/com/google/gson/typeadapters/PostConstructAdapterFactory.java
deleted file mode 100644
index 6d02b958c..000000000
--- a/extras/src/main/java/com/google/gson/typeadapters/PostConstructAdapterFactory.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * Copyright (C) 2016 Gson Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.typeadapters;
-
-import java.io.IOException;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-
-import javax.annotation.PostConstruct;
-
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-
-public class PostConstructAdapterFactory implements TypeAdapterFactory {
-    // copied from https://gist.github.com/swankjesse/20df26adaf639ed7fd160f145a0b661a
-    @Override
-    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
-        for (Class<?> t = type.getRawType(); t != Object.class; t = t.getSuperclass()) {
-            for (Method m : t.getDeclaredMethods()) {
-                if (m.isAnnotationPresent(PostConstruct.class)) {
-                    m.setAccessible(true);
-                    TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);
-                    return new PostConstructAdapter<T>(delegate, m);
-                }
-            }
-        }
-        return null;
-    }
-
-    final static class PostConstructAdapter<T> extends TypeAdapter<T> {
-        private final TypeAdapter<T> delegate;
-        private final Method method;
-
-        public PostConstructAdapter(TypeAdapter<T> delegate, Method method) {
-            this.delegate = delegate;
-            this.method = method;
-        }
-
-        @Override public T read(JsonReader in) throws IOException {
-            T result = delegate.read(in);
-            if (result != null) {
-                try {
-                    method.invoke(result);
-                } catch (IllegalAccessException e) {
-                    throw new AssertionError();
-                } catch (InvocationTargetException e) {
-                    if (e.getCause() instanceof RuntimeException) throw (RuntimeException) e.getCause();
-                    throw new RuntimeException(e.getCause());
-                }
-            }
-            return result;
-        }
-
-        @Override public void write(JsonWriter out, T value) throws IOException {
-            delegate.write(out, value);
-        }
-    }
-}
\ No newline at end of file
diff --git a/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java b/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java
deleted file mode 100644
index bc0569cbd..000000000
--- a/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java
+++ /dev/null
@@ -1,240 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.typeadapters;
-
-import java.io.IOException;
-import java.util.LinkedHashMap;
-import java.util.Map;
-
-import com.google.gson.Gson;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.Streams;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-
-/**
- * Adapts values whose runtime type may differ from their declaration type. This
- * is necessary when a field's type is not the same type that GSON should create
- * when deserializing that field. For example, consider these types:
- * <pre>   {@code
- *   abstract class Shape {
- *     int x;
- *     int y;
- *   }
- *   class Circle extends Shape {
- *     int radius;
- *   }
- *   class Rectangle extends Shape {
- *     int width;
- *     int height;
- *   }
- *   class Diamond extends Shape {
- *     int width;
- *     int height;
- *   }
- *   class Drawing {
- *     Shape bottomShape;
- *     Shape topShape;
- *   }
- * }</pre>
- * <p>Without additional type information, the serialized JSON is ambiguous. Is
- * the bottom shape in this drawing a rectangle or a diamond? <pre>   {@code
- *   {
- *     "bottomShape": {
- *       "width": 10,
- *       "height": 5,
- *       "x": 0,
- *       "y": 0
- *     },
- *     "topShape": {
- *       "radius": 2,
- *       "x": 4,
- *       "y": 1
- *     }
- *   }}</pre>
- * This class addresses this problem by adding type information to the
- * serialized JSON and honoring that type information when the JSON is
- * deserialized: <pre>   {@code
- *   {
- *     "bottomShape": {
- *       "type": "Diamond",
- *       "width": 10,
- *       "height": 5,
- *       "x": 0,
- *       "y": 0
- *     },
- *     "topShape": {
- *       "type": "Circle",
- *       "radius": 2,
- *       "x": 4,
- *       "y": 1
- *     }
- *   }}</pre>
- * Both the type field name ({@code "type"}) and the type labels ({@code
- * "Rectangle"}) are configurable.
- *
- * <h3>Registering Types</h3>
- * Create a {@code RuntimeTypeAdapterFactory} by passing the base type and type field
- * name to the {@link #of} factory method. If you don't supply an explicit type
- * field name, {@code "type"} will be used. <pre>   {@code
- *   RuntimeTypeAdapterFactory<Shape> shapeAdapterFactory
- *       = RuntimeTypeAdapterFactory.of(Shape.class, "type");
- * }</pre>
- * Next register all of your subtypes. Every subtype must be explicitly
- * registered. This protects your application from injection attacks. If you
- * don't supply an explicit type label, the type's simple name will be used.
- * <pre>   {@code
- *   shapeAdapter.registerSubtype(Rectangle.class, "Rectangle");
- *   shapeAdapter.registerSubtype(Circle.class, "Circle");
- *   shapeAdapter.registerSubtype(Diamond.class, "Diamond");
- * }</pre>
- * Finally, register the type adapter factory in your application's GSON builder:
- * <pre>   {@code
- *   Gson gson = new GsonBuilder()
- *       .registerTypeAdapterFactory(shapeAdapterFactory)
- *       .create();
- * }</pre>
- * Like {@code GsonBuilder}, this API supports chaining: <pre>   {@code
- *   RuntimeTypeAdapterFactory<Shape> shapeAdapterFactory = RuntimeTypeAdapterFactory.of(Shape.class)
- *       .registerSubtype(Rectangle.class)
- *       .registerSubtype(Circle.class)
- *       .registerSubtype(Diamond.class);
- * }</pre>
- */
-public final class RuntimeTypeAdapterFactory<T> implements TypeAdapterFactory {
-  private final Class<?> baseType;
-  private final String typeFieldName;
-  private final Map<String, Class<?>> labelToSubtype = new LinkedHashMap<String, Class<?>>();
-  private final Map<Class<?>, String> subtypeToLabel = new LinkedHashMap<Class<?>, String>();
-
-  private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {
-    if (typeFieldName == null || baseType == null) {
-      throw new NullPointerException();
-    }
-    this.baseType = baseType;
-    this.typeFieldName = typeFieldName;
-  }
-
-  /**
-   * Creates a new runtime type adapter using for {@code baseType} using {@code
-   * typeFieldName} as the type field name. Type field names are case sensitive.
-   */
-  public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType, String typeFieldName) {
-    return new RuntimeTypeAdapterFactory<T>(baseType, typeFieldName);
-  }
-
-  /**
-   * Creates a new runtime type adapter for {@code baseType} using {@code "type"} as
-   * the type field name.
-   */
-  public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType) {
-    return new RuntimeTypeAdapterFactory<T>(baseType, "type");
-  }
-
-  /**
-   * Registers {@code type} identified by {@code label}. Labels are case
-   * sensitive.
-   *
-   * @throws IllegalArgumentException if either {@code type} or {@code label}
-   *     have already been registered on this type adapter.
-   */
-  public RuntimeTypeAdapterFactory<T> registerSubtype(Class<? extends T> type, String label) {
-    if (type == null || label == null) {
-      throw new NullPointerException();
-    }
-    if (subtypeToLabel.containsKey(type) || labelToSubtype.containsKey(label)) {
-      throw new IllegalArgumentException("types and labels must be unique");
-    }
-    labelToSubtype.put(label, type);
-    subtypeToLabel.put(type, label);
-    return this;
-  }
-
-  /**
-   * Registers {@code type} identified by its {@link Class#getSimpleName simple
-   * name}. Labels are case sensitive.
-   *
-   * @throws IllegalArgumentException if either {@code type} or its simple name
-   *     have already been registered on this type adapter.
-   */
-  public RuntimeTypeAdapterFactory<T> registerSubtype(Class<? extends T> type) {
-    return registerSubtype(type, type.getSimpleName());
-  }
-
-  public <R> TypeAdapter<R> create(Gson gson, TypeToken<R> type) {
-    if (type.getRawType() != baseType) {
-      return null;
-    }
-
-    final Map<String, TypeAdapter<?>> labelToDelegate
-        = new LinkedHashMap<String, TypeAdapter<?>>();
-    final Map<Class<?>, TypeAdapter<?>> subtypeToDelegate
-        = new LinkedHashMap<Class<?>, TypeAdapter<?>>();
-    for (Map.Entry<String, Class<?>> entry : labelToSubtype.entrySet()) {
-      TypeAdapter<?> delegate = gson.getDelegateAdapter(this, TypeToken.get(entry.getValue()));
-      labelToDelegate.put(entry.getKey(), delegate);
-      subtypeToDelegate.put(entry.getValue(), delegate);
-    }
-
-    return new TypeAdapter<R>() {
-      @Override public R read(JsonReader in) throws IOException {
-        JsonElement jsonElement = Streams.parse(in);
-        JsonElement labelJsonElement = jsonElement.getAsJsonObject().remove(typeFieldName);
-        if (labelJsonElement == null) {
-          throw new JsonParseException("cannot deserialize " + baseType
-              + " because it does not define a field named " + typeFieldName);
-        }
-        String label = labelJsonElement.getAsString();
-        @SuppressWarnings("unchecked") // registration requires that subtype extends T
-        TypeAdapter<R> delegate = (TypeAdapter<R>) labelToDelegate.get(label);
-        if (delegate == null) {
-          throw new JsonParseException("cannot deserialize " + baseType + " subtype named "
-              + label + "; did you forget to register a subtype?");
-        }
-        return delegate.fromJsonTree(jsonElement);
-      }
-
-      @Override public void write(JsonWriter out, R value) throws IOException {
-        Class<?> srcType = value.getClass();
-        String label = subtypeToLabel.get(srcType);
-        @SuppressWarnings("unchecked") // registration requires that subtype extends T
-        TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);
-        if (delegate == null) {
-          throw new JsonParseException("cannot serialize " + srcType.getName()
-              + "; did you forget to register a subtype?");
-        }
-        JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();
-        if (jsonObject.has(typeFieldName)) {
-          throw new JsonParseException("cannot serialize " + srcType.getName()
-              + " because it already defines a field named " + typeFieldName);
-        }
-        JsonObject clone = new JsonObject();
-        clone.add(typeFieldName, new JsonPrimitive(label));
-        for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {
-          clone.add(e.getKey(), e.getValue());
-        }
-        Streams.write(clone, out);
-      }
-    }.nullSafe();
-  }
-}
diff --git a/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java b/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java
deleted file mode 100644
index 5e8c0ccee..000000000
--- a/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java
+++ /dev/null
@@ -1,282 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.typeadapters;
-
-import java.io.IOException;
-import java.text.ParseException;
-import java.text.ParsePosition;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.GregorianCalendar;
-import java.util.Locale;
-import java.util.TimeZone;
-
-import com.google.gson.JsonParseException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-
-public final class UtcDateTypeAdapter extends TypeAdapter<Date> {
-  private final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone("UTC");
-
-  @Override
-  public void write(JsonWriter out, Date date) throws IOException {
-    if (date == null) {
-      out.nullValue();
-    } else {
-      String value = format(date, true, UTC_TIME_ZONE);
-      out.value(value);
-    }
-  }
-
-  @Override
-  public Date read(JsonReader in) throws IOException {
-    try {
-      switch (in.peek()) {
-      case NULL:
-        in.nextNull();
-        return null;
-      default:
-        String date = in.nextString();
-        // Instead of using iso8601Format.parse(value), we use Jackson's date parsing
-        // This is because Android doesn't support XXX because it is JDK 1.6
-        return parse(date, new ParsePosition(0));
-      }
-    } catch (ParseException e) {
-      throw new JsonParseException(e);
-    }
-  }
-
-  // Date parsing code from Jackson databind ISO8601Utils.java
-  // https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java
-  private static final String GMT_ID = "GMT";
-
-  /**
-   * Format date into yyyy-MM-ddThh:mm:ss[.sss][Z|[+-]hh:mm]
-   *
-   * @param date the date to format
-   * @param millis true to include millis precision otherwise false
-   * @param tz timezone to use for the formatting (GMT will produce 'Z')
-   * @return the date formatted as yyyy-MM-ddThh:mm:ss[.sss][Z|[+-]hh:mm]
-   */
-  private static String format(Date date, boolean millis, TimeZone tz) {
-      Calendar calendar = new GregorianCalendar(tz, Locale.US);
-      calendar.setTime(date);
-
-      // estimate capacity of buffer as close as we can (yeah, that's pedantic ;)
-      int capacity = "yyyy-MM-ddThh:mm:ss".length();
-      capacity += millis ? ".sss".length() : 0;
-      capacity += tz.getRawOffset() == 0 ? "Z".length() : "+hh:mm".length();
-      StringBuilder formatted = new StringBuilder(capacity);
-
-      padInt(formatted, calendar.get(Calendar.YEAR), "yyyy".length());
-      formatted.append('-');
-      padInt(formatted, calendar.get(Calendar.MONTH) + 1, "MM".length());
-      formatted.append('-');
-      padInt(formatted, calendar.get(Calendar.DAY_OF_MONTH), "dd".length());
-      formatted.append('T');
-      padInt(formatted, calendar.get(Calendar.HOUR_OF_DAY), "hh".length());
-      formatted.append(':');
-      padInt(formatted, calendar.get(Calendar.MINUTE), "mm".length());
-      formatted.append(':');
-      padInt(formatted, calendar.get(Calendar.SECOND), "ss".length());
-      if (millis) {
-          formatted.append('.');
-          padInt(formatted, calendar.get(Calendar.MILLISECOND), "sss".length());
-      }
-
-      int offset = tz.getOffset(calendar.getTimeInMillis());
-      if (offset != 0) {
-          int hours = Math.abs((offset / (60 * 1000)) / 60);
-          int minutes = Math.abs((offset / (60 * 1000)) % 60);
-          formatted.append(offset < 0 ? '-' : '+');
-          padInt(formatted, hours, "hh".length());
-          formatted.append(':');
-          padInt(formatted, minutes, "mm".length());
-      } else {
-          formatted.append('Z');
-      }
-
-      return formatted.toString();
-  }
-  /**
-   * Zero pad a number to a specified length
-   *
-   * @param buffer buffer to use for padding
-   * @param value the integer value to pad if necessary.
-   * @param length the length of the string we should zero pad
-   */
-  private static void padInt(StringBuilder buffer, int value, int length) {
-      String strValue = Integer.toString(value);
-      for (int i = length - strValue.length(); i > 0; i--) {
-          buffer.append('0');
-      }
-      buffer.append(strValue);
-  }
-
-  /**
-   * Parse a date from ISO-8601 formatted string. It expects a format
-   * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh:mm]]
-   *
-   * @param date ISO string to parse in the appropriate format.
-   * @param pos The position to start parsing from, updated to where parsing stopped.
-   * @return the parsed date
-   * @throws ParseException if the date is not in the appropriate format
-   */
-  private static Date parse(String date, ParsePosition pos) throws ParseException {
-    Exception fail = null;
-    try {
-      int offset = pos.getIndex();
-
-      // extract year
-      int year = parseInt(date, offset, offset += 4);
-      if (checkOffset(date, offset, '-')) {
-        offset += 1;
-      }
-
-      // extract month
-      int month = parseInt(date, offset, offset += 2);
-      if (checkOffset(date, offset, '-')) {
-        offset += 1;
-      }
-
-      // extract day
-      int day = parseInt(date, offset, offset += 2);
-      // default time value
-      int hour = 0;
-      int minutes = 0;
-      int seconds = 0;
-      int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time
-      if (checkOffset(date, offset, 'T')) {
-
-        // extract hours, minutes, seconds and milliseconds
-        hour = parseInt(date, offset += 1, offset += 2);
-        if (checkOffset(date, offset, ':')) {
-          offset += 1;
-        }
-
-        minutes = parseInt(date, offset, offset += 2);
-        if (checkOffset(date, offset, ':')) {
-          offset += 1;
-        }
-        // second and milliseconds can be optional
-        if (date.length() > offset) {
-          char c = date.charAt(offset);
-          if (c != 'Z' && c != '+' && c != '-') {
-            seconds = parseInt(date, offset, offset += 2);
-            // milliseconds can be optional in the format
-            if (checkOffset(date, offset, '.')) {
-              milliseconds = parseInt(date, offset += 1, offset += 3);
-            }
-          }
-        }
-      }
-
-      // extract timezone
-      String timezoneId;
-      if (date.length() <= offset) {
-        throw new IllegalArgumentException("No time zone indicator");
-      }
-      char timezoneIndicator = date.charAt(offset);
-      if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-        String timezoneOffset = date.substring(offset);
-        timezoneId = GMT_ID + timezoneOffset;
-        offset += timezoneOffset.length();
-      } else if (timezoneIndicator == 'Z') {
-        timezoneId = GMT_ID;
-        offset += 1;
-      } else {
-        throw new IndexOutOfBoundsException("Invalid time zone indicator " + timezoneIndicator);
-      }
-
-      TimeZone timezone = TimeZone.getTimeZone(timezoneId);
-      if (!timezone.getID().equals(timezoneId)) {
-        throw new IndexOutOfBoundsException();
-      }
-
-      Calendar calendar = new GregorianCalendar(timezone);
-      calendar.setLenient(false);
-      calendar.set(Calendar.YEAR, year);
-      calendar.set(Calendar.MONTH, month - 1);
-      calendar.set(Calendar.DAY_OF_MONTH, day);
-      calendar.set(Calendar.HOUR_OF_DAY, hour);
-      calendar.set(Calendar.MINUTE, minutes);
-      calendar.set(Calendar.SECOND, seconds);
-      calendar.set(Calendar.MILLISECOND, milliseconds);
-
-      pos.setIndex(offset);
-      return calendar.getTime();
-      // If we get a ParseException it'll already have the right message/offset.
-      // Other exception types can convert here.
-    } catch (IndexOutOfBoundsException e) {
-      fail = e;
-    } catch (NumberFormatException e) {
-      fail = e;
-    } catch (IllegalArgumentException e) {
-      fail = e;
-    }
-    String input = (date == null) ? null : ('"' + date + "'");
-    throw new ParseException("Failed to parse date [" + input + "]: " + fail.getMessage(), pos.getIndex());
-  }
-
-  /**
-   * Check if the expected character exist at the given offset in the value.
-   *
-   * @param value the string to check at the specified offset
-   * @param offset the offset to look for the expected character
-   * @param expected the expected character
-   * @return true if the expected character exist at the given offset
-   */
-  private static boolean checkOffset(String value, int offset, char expected) {
-    return (offset < value.length()) && (value.charAt(offset) == expected);
-  }
-
-  /**
-   * Parse an integer located between 2 given offsets in a string
-   *
-   * @param value the string to parse
-   * @param beginIndex the start index for the integer in the string
-   * @param endIndex the end index for the integer in the string
-   * @return the int
-   * @throws NumberFormatException if the value is not a number
-   */
-  private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {
-    if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {
-      throw new NumberFormatException(value);
-    }
-    // use same logic as in Integer.parseInt() but less generic we're not supporting negative values
-    int i = beginIndex;
-    int result = 0;
-    int digit;
-    if (i < endIndex) {
-      digit = Character.digit(value.charAt(i++), 10);
-      if (digit < 0) {
-        throw new NumberFormatException("Invalid number: " + value);
-      }
-      result = -digit;
-    }
-    while (i < endIndex) {
-      digit = Character.digit(value.charAt(i++), 10);
-      if (digit < 0) {
-        throw new NumberFormatException("Invalid number: " + value);
-      }
-      result *= 10;
-      result -= digit;
-    }
-    return -result;
-  }
-}
diff --git a/extras/src/test/java/com/google/gson/graph/GraphAdapterBuilderTest.java b/extras/src/test/java/com/google/gson/graph/GraphAdapterBuilderTest.java
deleted file mode 100644
index 8a1d7cdbf..000000000
--- a/extras/src/test/java/com/google/gson/graph/GraphAdapterBuilderTest.java
+++ /dev/null
@@ -1,197 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.graph;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.reflect.TypeToken;
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import junit.framework.TestCase;
-
-public final class GraphAdapterBuilderTest extends TestCase {
-  public void testSerialization() {
-    Roshambo rock = new Roshambo("ROCK");
-    Roshambo scissors = new Roshambo("SCISSORS");
-    Roshambo paper = new Roshambo("PAPER");
-    rock.beats = scissors;
-    scissors.beats = paper;
-    paper.beats = rock;
-
-    GsonBuilder gsonBuilder = new GsonBuilder();
-    new GraphAdapterBuilder()
-        .addType(Roshambo.class)
-        .registerOn(gsonBuilder);
-    Gson gson = gsonBuilder.create();
-
-    assertEquals("{'0x1':{'name':'ROCK','beats':'0x2'}," +
-        "'0x2':{'name':'SCISSORS','beats':'0x3'}," +
-        "'0x3':{'name':'PAPER','beats':'0x1'}}",
-        gson.toJson(rock).replace('"', '\''));
-  }
-
-  public void testDeserialization() {
-    String json = "{'0x1':{'name':'ROCK','beats':'0x2'}," +
-        "'0x2':{'name':'SCISSORS','beats':'0x3'}," +
-        "'0x3':{'name':'PAPER','beats':'0x1'}}";
-
-    GsonBuilder gsonBuilder = new GsonBuilder();
-    new GraphAdapterBuilder()
-        .addType(Roshambo.class)
-        .registerOn(gsonBuilder);
-    Gson gson = gsonBuilder.create();
-
-    Roshambo rock = gson.fromJson(json, Roshambo.class);
-    assertEquals("ROCK", rock.name);
-    Roshambo scissors = rock.beats;
-    assertEquals("SCISSORS", scissors.name);
-    Roshambo paper = scissors.beats;
-    assertEquals("PAPER", paper.name);
-    assertSame(rock, paper.beats);
-  }
-
-  public void testSerializationDirectSelfReference() {
-    Roshambo suicide = new Roshambo("SUICIDE");
-    suicide.beats = suicide;
-
-    GsonBuilder gsonBuilder = new GsonBuilder();
-    new GraphAdapterBuilder()
-        .addType(Roshambo.class)
-        .registerOn(gsonBuilder);
-    Gson gson = gsonBuilder.create();
-
-    assertEquals("{'0x1':{'name':'SUICIDE','beats':'0x1'}}",
-        gson.toJson(suicide).replace('"', '\''));
-  }
-
-  public void testDeserializationDirectSelfReference() {
-    String json = "{'0x1':{'name':'SUICIDE','beats':'0x1'}}";
-
-    GsonBuilder gsonBuilder = new GsonBuilder();
-    new GraphAdapterBuilder()
-        .addType(Roshambo.class)
-        .registerOn(gsonBuilder);
-    Gson gson = gsonBuilder.create();
-
-    Roshambo suicide = gson.fromJson(json, Roshambo.class);
-    assertEquals("SUICIDE", suicide.name);
-    assertSame(suicide, suicide.beats);
-  }
-
-  public void testSerializeListOfLists() {
-    Type listOfListsType = new TypeToken<List<List<?>>>() {}.getType();
-    Type listOfAnyType = new TypeToken<List<?>>() {}.getType();
-
-    List<List<?>> listOfLists = new ArrayList<List<?>>();
-    listOfLists.add(listOfLists);
-    listOfLists.add(new ArrayList<Object>());
-
-    GsonBuilder gsonBuilder = new GsonBuilder();
-    new GraphAdapterBuilder()
-        .addType(listOfListsType)
-        .addType(listOfAnyType)
-        .registerOn(gsonBuilder);
-    Gson gson = gsonBuilder.create();
-
-    String json = gson.toJson(listOfLists, listOfListsType);
-    assertEquals("{'0x1':['0x1','0x2'],'0x2':[]}", json.replace('"', '\''));
-  }
-
-  public void testDeserializeListOfLists() {
-    Type listOfAnyType = new TypeToken<List<?>>() {}.getType();
-    Type listOfListsType = new TypeToken<List<List<?>>>() {}.getType();
-
-    GsonBuilder gsonBuilder = new GsonBuilder();
-    new GraphAdapterBuilder()
-        .addType(listOfListsType)
-        .addType(listOfAnyType)
-        .registerOn(gsonBuilder);
-    Gson gson = gsonBuilder.create();
-
-    List<List<?>> listOfLists = gson.fromJson("{'0x1':['0x1','0x2'],'0x2':[]}", listOfListsType);
-    assertEquals(2, listOfLists.size());
-    assertSame(listOfLists, listOfLists.get(0));
-    assertEquals(Collections.emptyList(), listOfLists.get(1));
-  }
-
-  public void testSerializationWithMultipleTypes() {
-    Company google = new Company("Google");
-    new Employee("Jesse", google);
-    new Employee("Joel", google);
-
-    GsonBuilder gsonBuilder = new GsonBuilder();
-    new GraphAdapterBuilder()
-        .addType(Company.class)
-        .addType(Employee.class)
-        .registerOn(gsonBuilder);
-    Gson gson = gsonBuilder.create();
-
-    assertEquals("{'0x1':{'name':'Google','employees':['0x2','0x3']},"
-        + "'0x2':{'name':'Jesse','company':'0x1'},"
-        + "'0x3':{'name':'Joel','company':'0x1'}}",
-        gson.toJson(google).replace('"', '\''));
-  }
-
-  public void testDeserializationWithMultipleTypes() {
-    GsonBuilder gsonBuilder = new GsonBuilder();
-    new GraphAdapterBuilder()
-        .addType(Company.class)
-        .addType(Employee.class)
-        .registerOn(gsonBuilder);
-    Gson gson = gsonBuilder.create();
-
-    String json = "{'0x1':{'name':'Google','employees':['0x2','0x3']},"
-        + "'0x2':{'name':'Jesse','company':'0x1'},"
-        + "'0x3':{'name':'Joel','company':'0x1'}}";
-    Company company = gson.fromJson(json, Company.class);
-    assertEquals("Google", company.name);
-    Employee jesse = company.employees.get(0);
-    assertEquals("Jesse", jesse.name);
-    assertEquals(company, jesse.company);
-    Employee joel = company.employees.get(1);
-    assertEquals("Joel", joel.name);
-    assertEquals(company, joel.company);
-  }
-
-  static class Roshambo {
-    String name;
-    Roshambo beats;
-    Roshambo(String name) {
-      this.name = name;
-    }
-  }
-
-  static class Employee {
-    final String name;
-    final Company company;
-    Employee(String name, Company company) {
-      this.name = name;
-      this.company = company;
-      this.company.employees.add(this);
-    }
-  }
-
-  static class Company {
-    final String name;
-    final List<Employee> employees = new ArrayList<Employee>();
-    Company(String name) {
-      this.name = name;
-    }
-  }
-}
diff --git a/extras/src/test/java/com/google/gson/interceptors/InterceptorTest.java b/extras/src/test/java/com/google/gson/interceptors/InterceptorTest.java
deleted file mode 100644
index 0aab6598c..000000000
--- a/extras/src/test/java/com/google/gson/interceptors/InterceptorTest.java
+++ /dev/null
@@ -1,171 +0,0 @@
-/*
- * Copyright (C) 2012 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.interceptors;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-import java.io.IOException;
-import java.lang.reflect.Type;
-import java.util.Collection;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import junit.framework.TestCase;
-
-/**
- * Unit tests for {@link Intercept} and {@link JsonPostDeserializer}.
- *
- * @author Inderjeet Singh
- */
-public final class InterceptorTest extends TestCase {
-
-  private Gson gson;
-
-  @Override
-  public void setUp() throws Exception {
-    super.setUp();
-    this.gson = new GsonBuilder()
-        .registerTypeAdapterFactory(new InterceptorFactory())
-        .enableComplexMapKeySerialization()
-        .create();
-  }
-
-  public void testExceptionsPropagated() {
-    try {
-      gson.fromJson("{}", User.class);
-      fail();
-    } catch (JsonParseException expected) {}
-  }
-
-  public void testTopLevelClass() {
-    User user = gson.fromJson("{name:'bob',password:'pwd'}", User.class);
-    assertEquals(User.DEFAULT_EMAIL, user.email);
-  }
-
-  public void testList() {
-    List<User> list = gson.fromJson("[{name:'bob',password:'pwd'}]", new TypeToken<List<User>>(){}.getType());
-    User user = list.get(0);
-    assertEquals(User.DEFAULT_EMAIL, user.email);
-  }
-
-  public void testCollection() {
-    Collection<User> list = gson.fromJson("[{name:'bob',password:'pwd'}]", new TypeToken<Collection<User>>(){}.getType());
-    User user = list.iterator().next();
-    assertEquals(User.DEFAULT_EMAIL, user.email);
-  }
-
-  public void testMapKeyAndValues() {
-    Type mapType = new TypeToken<Map<User, Address>>(){}.getType();
-    try {
-      gson.fromJson("[[{name:'bob',password:'pwd'},{}]]", mapType);
-      fail();
-    } catch (JsonSyntaxException expected) {}
-    Map<User, Address> map = gson.fromJson("[[{name:'bob',password:'pwd'},{city:'Mountain View',state:'CA',zip:'94043'}]]",
-        mapType);
-    Entry<User, Address> entry = map.entrySet().iterator().next();
-    assertEquals(User.DEFAULT_EMAIL, entry.getKey().email);
-    assertEquals(Address.DEFAULT_FIRST_LINE, entry.getValue().firstLine);
-  }
-
-  public void testField() {
-    UserGroup userGroup = gson.fromJson("{user:{name:'bob',password:'pwd'}}", UserGroup.class);
-    assertEquals(User.DEFAULT_EMAIL, userGroup.user.email);
-  }
-
-  public void testCustomTypeAdapter() {
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapter(User.class, new TypeAdapter<User>() {
-          @Override public void write(JsonWriter out, User value) throws IOException {
-            throw new UnsupportedOperationException();
-          }
-
-          @Override public User read(JsonReader in) throws IOException {
-            in.beginObject();
-            in.nextName();
-            String name = in.nextString();
-            in.nextName();
-            String password = in.nextString();
-            in.endObject();
-            return new User(name, password);
-          }
-        })
-        .registerTypeAdapterFactory(new InterceptorFactory())
-        .create();
-    UserGroup userGroup = gson.fromJson("{user:{name:'bob',password:'pwd'}}", UserGroup.class);
-    assertEquals(User.DEFAULT_EMAIL, userGroup.user.email);
-  }
-
-  public void testDirectInvocationOfTypeAdapter() throws Exception {
-    TypeAdapter<UserGroup> adapter = gson.getAdapter(UserGroup.class);
-    UserGroup userGroup = adapter.fromJson("{\"user\":{\"name\":\"bob\",\"password\":\"pwd\"}}");
-    assertEquals(User.DEFAULT_EMAIL, userGroup.user.email);
-  }
-
-  @SuppressWarnings("unused")
-  private static final class UserGroup {
-    User user;
-    String city;
-  }
-
-  @Intercept(postDeserialize = UserValidator.class)
-  @SuppressWarnings("unused")
-  private static final class User {
-    static final String DEFAULT_EMAIL = "invalid@invalid.com";
-    String name;
-    String password;
-    String email;
-    Address address;
-    public User(String name, String password) {
-      this.name = name;
-      this.password = password;
-    }
-  }
-
-  public static final class UserValidator implements JsonPostDeserializer<User> {
-    public void postDeserialize(User user) {
-      if (user.name == null || user.password == null) {
-        throw new JsonSyntaxException("name and password are required fields.");
-      }
-      if (user.email == null) user.email = User.DEFAULT_EMAIL;
-    }
-  }
-
-  @Intercept(postDeserialize = AddressValidator.class)
-  @SuppressWarnings("unused")
-  private static final class Address {
-    static final String DEFAULT_FIRST_LINE = "unknown";
-    String firstLine;
-    String secondLine;
-    String city;
-    String state;
-    String zip;
-  }
-
-  public static final class AddressValidator implements JsonPostDeserializer<Address> {
-    public void postDeserialize(Address address) {
-      if (address.city == null || address.state == null || address.zip == null) {
-        throw new JsonSyntaxException("Address city, state and zip are required fields.");
-      }
-      if (address.firstLine == null) address.firstLine = Address.DEFAULT_FIRST_LINE;
-    }
-  }
-}
diff --git a/extras/src/test/java/com/google/gson/typeadapters/PostConstructAdapterFactoryTest.java b/extras/src/test/java/com/google/gson/typeadapters/PostConstructAdapterFactoryTest.java
deleted file mode 100644
index 1c934b11e..000000000
--- a/extras/src/test/java/com/google/gson/typeadapters/PostConstructAdapterFactoryTest.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright (C) 2016 Gson Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.typeadapters;
-
-import javax.annotation.PostConstruct;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-
-import junit.framework.TestCase;
-
-public class PostConstructAdapterFactoryTest extends TestCase {
-    public void test() throws Exception {
-        Gson gson = new GsonBuilder()
-                .registerTypeAdapterFactory(new PostConstructAdapterFactory())
-                .create();
-        gson.fromJson("{\"bread\": \"white\", \"cheese\": \"cheddar\"}", Sandwich.class);
-        try {
-            gson.fromJson("{\"bread\": \"cheesey bread\", \"cheese\": \"swiss\"}", Sandwich.class);
-            fail();
-        } catch (IllegalArgumentException expected) {
-            assertEquals("too cheesey", expected.getMessage());
-        }
-    }
-
-    static class Sandwich {
-        String bread;
-        String cheese;
-
-        @PostConstruct void validate() {
-            if (bread.equals("cheesey bread") && cheese != null) {
-                throw new IllegalArgumentException("too cheesey");
-            }
-        }
-    }
-}
diff --git a/extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactoryTest.java b/extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactoryTest.java
deleted file mode 100644
index 8c62bef7f..000000000
--- a/extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactoryTest.java
+++ /dev/null
@@ -1,211 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.typeadapters;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonParseException;
-import com.google.gson.TypeAdapterFactory;
-import junit.framework.TestCase;
-
-public final class RuntimeTypeAdapterFactoryTest extends TestCase {
-
-  public void testRuntimeTypeAdapter() {
-    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(
-        BillingInstrument.class)
-        .registerSubtype(CreditCard.class);
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapterFactory(rta)
-        .create();
-
-    CreditCard original = new CreditCard("Jesse", 234);
-    assertEquals("{\"type\":\"CreditCard\",\"cvv\":234,\"ownerName\":\"Jesse\"}",
-        gson.toJson(original, BillingInstrument.class));
-    BillingInstrument deserialized = gson.fromJson(
-        "{type:'CreditCard',cvv:234,ownerName:'Jesse'}", BillingInstrument.class);
-    assertEquals("Jesse", deserialized.ownerName);
-    assertTrue(deserialized instanceof CreditCard);
-  }
-
-  public void testRuntimeTypeIsBaseType() {
-    TypeAdapterFactory rta = RuntimeTypeAdapterFactory.of(
-        BillingInstrument.class)
-        .registerSubtype(BillingInstrument.class);
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapterFactory(rta)
-        .create();
-
-    BillingInstrument original = new BillingInstrument("Jesse");
-    assertEquals("{\"type\":\"BillingInstrument\",\"ownerName\":\"Jesse\"}",
-        gson.toJson(original, BillingInstrument.class));
-    BillingInstrument deserialized = gson.fromJson(
-        "{type:'BillingInstrument',ownerName:'Jesse'}", BillingInstrument.class);
-    assertEquals("Jesse", deserialized.ownerName);
-  }
-
-  public void testNullBaseType() {
-    try {
-      RuntimeTypeAdapterFactory.of(null);
-      fail();
-    } catch (NullPointerException expected) {
-    }
-  }
-
-  public void testNullTypeFieldName() {
-    try {
-      RuntimeTypeAdapterFactory.of(BillingInstrument.class, null);
-      fail();
-    } catch (NullPointerException expected) {
-    }
-  }
-
-  public void testNullSubtype() {
-    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(
-        BillingInstrument.class);
-    try {
-      rta.registerSubtype(null);
-      fail();
-    } catch (NullPointerException expected) {
-    }
-  }
-
-  public void testNullLabel() {
-    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(
-        BillingInstrument.class);
-    try {
-      rta.registerSubtype(CreditCard.class, null);
-      fail();
-    } catch (NullPointerException expected) {
-    }
-  }
-
-  public void testDuplicateSubtype() {
-    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(
-        BillingInstrument.class);
-    rta.registerSubtype(CreditCard.class, "CC");
-    try {
-      rta.registerSubtype(CreditCard.class, "Visa");
-      fail();
-    } catch (IllegalArgumentException expected) {
-    }
-  }
-
-  public void testDuplicateLabel() {
-    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(
-        BillingInstrument.class);
-    rta.registerSubtype(CreditCard.class, "CC");
-    try {
-      rta.registerSubtype(BankTransfer.class, "CC");
-      fail();
-    } catch (IllegalArgumentException expected) {
-    }
-  }
-
-  public void testDeserializeMissingTypeField() {
-    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)
-        .registerSubtype(CreditCard.class);
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapterFactory(billingAdapter)
-        .create();
-    try {
-      gson.fromJson("{ownerName:'Jesse'}", BillingInstrument.class);
-      fail();
-    } catch (JsonParseException expected) {
-    }
-  }
-
-  public void testDeserializeMissingSubtype() {
-    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)
-        .registerSubtype(BankTransfer.class);
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapterFactory(billingAdapter)
-        .create();
-    try {
-      gson.fromJson("{type:'CreditCard',ownerName:'Jesse'}", BillingInstrument.class);
-      fail();
-    } catch (JsonParseException expected) {
-    }
-  }
-
-  public void testSerializeMissingSubtype() {
-    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)
-        .registerSubtype(BankTransfer.class);
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapterFactory(billingAdapter)
-        .create();
-    try {
-      gson.toJson(new CreditCard("Jesse", 456), BillingInstrument.class);
-      fail();
-    } catch (JsonParseException expected) {
-    }
-  }
-
-  public void testSerializeCollidingTypeFieldName() {
-    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class, "cvv")
-        .registerSubtype(CreditCard.class);
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapterFactory(billingAdapter)
-        .create();
-    try {
-      gson.toJson(new CreditCard("Jesse", 456), BillingInstrument.class);
-      fail();
-    } catch (JsonParseException expected) {
-    }
-  }
-
-  public void testSerializeWrappedNullValue() {
-    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)
-        .registerSubtype(CreditCard.class)
-        .registerSubtype(BankTransfer.class);    
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapterFactory(billingAdapter)
-        .create();    
-    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);
-    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);
-    assertNull(deserialized.instrument);
-  }
-
-  static class BillingInstrumentWrapper {
-    BillingInstrument instrument;
-    BillingInstrumentWrapper(BillingInstrument instrument) {
-      this.instrument = instrument;
-    }
-  }
-
-  static class BillingInstrument {
-    private final String ownerName;
-    BillingInstrument(String ownerName) {
-      this.ownerName = ownerName;
-    }
-  }
-
-  static class CreditCard extends BillingInstrument {
-    int cvv;
-    CreditCard(String ownerName, int cvv) {
-      super(ownerName);
-      this.cvv = cvv;
-    }
-  }
-
-  static class BankTransfer extends BillingInstrument {
-    int bankAccount;
-    BankTransfer(String ownerName, int bankAccount) {
-      super(ownerName);
-      this.bankAccount = bankAccount;
-    }
-  }
-}
diff --git a/extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java b/extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java
deleted file mode 100644
index 902dc4774..000000000
--- a/extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.typeadapters;
-
-import java.text.SimpleDateFormat;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.Locale;
-import java.util.TimeZone;
-
-import junit.framework.TestCase;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-
-public final class UtcDateTypeAdapterTest extends TestCase {
-  private final Gson gson = new GsonBuilder()
-    .registerTypeAdapter(Date.class, new UtcDateTypeAdapter())
-    .create();
-
-  public void testLocalTimeZone() {
-    Date expected = new Date();
-    String json = gson.toJson(expected);
-    Date actual = gson.fromJson(json, Date.class);
-    assertEquals(expected.getTime(), actual.getTime());
-  }
-
-  public void testDifferentTimeZones() {
-    for (String timeZone : TimeZone.getAvailableIDs()) {
-      Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(timeZone));
-      Date expected = cal.getTime();
-      String json = gson.toJson(expected);
-      // System.out.println(json + ": " + timeZone);
-      Date actual = gson.fromJson(json, Date.class);
-      assertEquals(expected.getTime(), actual.getTime());
-    }
-  }
-
-  /**
-   * JDK 1.7 introduced support for XXX format to indicate UTC date. But Android is older JDK.
-   * We want to make sure that this date is parseable in Android.
-   */
-  public void testUtcDatesOnJdkBefore1_7() {
-    Gson gson = new GsonBuilder()
-      .registerTypeAdapter(Date.class, new UtcDateTypeAdapter())
-      .create();
-    gson.fromJson("'2014-12-05T04:00:00.000Z'", Date.class);
-  }
-
-  public void testUtcWithJdk7Default() {
-    Date expected = new Date();
-    SimpleDateFormat iso8601Format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX", Locale.US);
-    iso8601Format.setTimeZone(TimeZone.getTimeZone("UTC"));
-    String expectedJson = "\"" + iso8601Format.format(expected) + "\"";
-    String actualJson = gson.toJson(expected);
-    assertEquals(expectedJson, actualJson);
-    Date actual = gson.fromJson(expectedJson, Date.class);
-    assertEquals(expected.getTime(), actual.getTime());
-  }
-
-  public void testNullDateSerialization() {
-    String json = gson.toJson(null, Date.class);
-    assertEquals("null", json);
-  }
-}
diff --git a/gson/Gson 2.1 notes.txt b/gson/Gson 2.1 notes.txt
deleted file mode 100644
index def324ed8..000000000
--- a/gson/Gson 2.1 notes.txt	
+++ /dev/null
@@ -1,6 +0,0 @@
-Dropped support for GsonBuilder.registerTypeHierarchyAdapter+InstanceCreator
-
-Relax registerTypeHierarchyAdapter order
-Gson 2.0 failed if you registered Manager then Employee would fail
-Gson 2.1 it isn't a problem
-com.google.gson.functional.TypeHierarchyAdapterTest#testRegisterSubTypeFirstNotAllowed
\ No newline at end of file
diff --git a/gson/LICENSE b/gson/LICENSE
deleted file mode 100644
index 892eaed8f..000000000
--- a/gson/LICENSE
+++ /dev/null
@@ -1,203 +0,0 @@
-Google Gson
-
-                                 Apache License
-                           Version 2.0, January 2004
-                        http://www.apache.org/licenses/
-
-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-   1. Definitions.
-
-      "License" shall mean the terms and conditions for use, reproduction,
-      and distribution as defined by Sections 1 through 9 of this document.
-
-      "Licensor" shall mean the copyright owner or entity authorized by
-      the copyright owner that is granting the License.
-
-      "Legal Entity" shall mean the union of the acting entity and all
-      other entities that control, are controlled by, or are under common
-      control with that entity. For the purposes of this definition,
-      "control" means (i) the power, direct or indirect, to cause the
-      direction or management of such entity, whether by contract or
-      otherwise, or (ii) ownership of fifty percent (50%) or more of the
-      outstanding shares, or (iii) beneficial ownership of such entity.
-
-      "You" (or "Your") shall mean an individual or Legal Entity
-      exercising permissions granted by this License.
-
-      "Source" form shall mean the preferred form for making modifications,
-      including but not limited to software source code, documentation
-      source, and configuration files.
-
-      "Object" form shall mean any form resulting from mechanical
-      transformation or translation of a Source form, including but
-      not limited to compiled object code, generated documentation,
-      and conversions to other media types.
-
-      "Work" shall mean the work of authorship, whether in Source or
-      Object form, made available under the License, as indicated by a
-      copyright notice that is included in or attached to the work
-      (an example is provided in the Appendix below).
-
-      "Derivative Works" shall mean any work, whether in Source or Object
-      form, that is based on (or derived from) the Work and for which the
-      editorial revisions, annotations, elaborations, or other modifications
-      represent, as a whole, an original work of authorship. For the purposes
-      of this License, Derivative Works shall not include works that remain
-      separable from, or merely link (or bind by name) to the interfaces of,
-      the Work and Derivative Works thereof.
-
-      "Contribution" shall mean any work of authorship, including
-      the original version of the Work and any modifications or additions
-      to that Work or Derivative Works thereof, that is intentionally
-      submitted to Licensor for inclusion in the Work by the copyright owner
-      or by an individual or Legal Entity authorized to submit on behalf of
-      the copyright owner. For the purposes of this definition, "submitted"
-      means any form of electronic, verbal, or written communication sent
-      to the Licensor or its representatives, including but not limited to
-      communication on electronic mailing lists, source code control systems,
-      and issue tracking systems that are managed by, or on behalf of, the
-      Licensor for the purpose of discussing and improving the Work, but
-      excluding communication that is conspicuously marked or otherwise
-      designated in writing by the copyright owner as "Not a Contribution."
-
-      "Contributor" shall mean Licensor and any individual or Legal Entity
-      on behalf of whom a Contribution has been received by Licensor and
-      subsequently incorporated within the Work.
-
-   2. Grant of Copyright License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      copyright license to reproduce, prepare Derivative Works of,
-      publicly display, publicly perform, sublicense, and distribute the
-      Work and such Derivative Works in Source or Object form.
-
-   3. Grant of Patent License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      (except as stated in this section) patent license to make, have made,
-      use, offer to sell, sell, import, and otherwise transfer the Work,
-      where such license applies only to those patent claims licensable
-      by such Contributor that are necessarily infringed by their
-      Contribution(s) alone or by combination of their Contribution(s)
-      with the Work to which such Contribution(s) was submitted. If You
-      institute patent litigation against any entity (including a
-      cross-claim or counterclaim in a lawsuit) alleging that the Work
-      or a Contribution incorporated within the Work constitutes direct
-      or contributory patent infringement, then any patent licenses
-      granted to You under this License for that Work shall terminate
-      as of the date such litigation is filed.
-
-   4. Redistribution. You may reproduce and distribute copies of the
-      Work or Derivative Works thereof in any medium, with or without
-      modifications, and in Source or Object form, provided that You
-      meet the following conditions:
-
-      (a) You must give any other recipients of the Work or
-          Derivative Works a copy of this License; and
-
-      (b) You must cause any modified files to carry prominent notices
-          stating that You changed the files; and
-
-      (c) You must retain, in the Source form of any Derivative Works
-          that You distribute, all copyright, patent, trademark, and
-          attribution notices from the Source form of the Work,
-          excluding those notices that do not pertain to any part of
-          the Derivative Works; and
-
-      (d) If the Work includes a "NOTICE" text file as part of its
-          distribution, then any Derivative Works that You distribute must
-          include a readable copy of the attribution notices contained
-          within such NOTICE file, excluding those notices that do not
-          pertain to any part of the Derivative Works, in at least one
-          of the following places: within a NOTICE text file distributed
-          as part of the Derivative Works; within the Source form or
-          documentation, if provided along with the Derivative Works; or,
-          within a display generated by the Derivative Works, if and
-          wherever such third-party notices normally appear. The contents
-          of the NOTICE file are for informational purposes only and
-          do not modify the License. You may add Your own attribution
-          notices within Derivative Works that You distribute, alongside
-          or as an addendum to the NOTICE text from the Work, provided
-          that such additional attribution notices cannot be construed
-          as modifying the License.
-
-      You may add Your own copyright statement to Your modifications and
-      may provide additional or different license terms and conditions
-      for use, reproduction, or distribution of Your modifications, or
-      for any such Derivative Works as a whole, provided Your use,
-      reproduction, and distribution of the Work otherwise complies with
-      the conditions stated in this License.
-
-   5. Submission of Contributions. Unless You explicitly state otherwise,
-      any Contribution intentionally submitted for inclusion in the Work
-      by You to the Licensor shall be under the terms and conditions of
-      this License, without any additional terms or conditions.
-      Notwithstanding the above, nothing herein shall supersede or modify
-      the terms of any separate license agreement you may have executed
-      with Licensor regarding such Contributions.
-
-   6. Trademarks. This License does not grant permission to use the trade
-      names, trademarks, service marks, or product names of the Licensor,
-      except as required for reasonable and customary use in describing the
-      origin of the Work and reproducing the content of the NOTICE file.
-
-   7. Disclaimer of Warranty. Unless required by applicable law or
-      agreed to in writing, Licensor provides the Work (and each
-      Contributor provides its Contributions) on an "AS IS" BASIS,
-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-      implied, including, without limitation, any warranties or conditions
-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
-      PARTICULAR PURPOSE. You are solely responsible for determining the
-      appropriateness of using or redistributing the Work and assume any
-      risks associated with Your exercise of permissions under this License.
-
-   8. Limitation of Liability. In no event and under no legal theory,
-      whether in tort (including negligence), contract, or otherwise,
-      unless required by applicable law (such as deliberate and grossly
-      negligent acts) or agreed to in writing, shall any Contributor be
-      liable to You for damages, including any direct, indirect, special,
-      incidental, or consequential damages of any character arising as a
-      result of this License or out of the use or inability to use the
-      Work (including but not limited to damages for loss of goodwill,
-      work stoppage, computer failure or malfunction, or any and all
-      other commercial damages or losses), even if such Contributor
-      has been advised of the possibility of such damages.
-
-   9. Accepting Warranty or Additional Liability. While redistributing
-      the Work or Derivative Works thereof, You may choose to offer,
-      and charge a fee for, acceptance of support, warranty, indemnity,
-      or other liability obligations and/or rights consistent with this
-      License. However, in accepting such obligations, You may act only
-      on Your own behalf and on Your sole responsibility, not on behalf
-      of any other Contributor, and only if You agree to indemnify,
-      defend, and hold each Contributor harmless for any liability
-      incurred by, or claims asserted against, such Contributor by reason
-      of your accepting any such warranty or additional liability.
-
-   END OF TERMS AND CONDITIONS
-
-   APPENDIX: How to apply the Apache License to your work.
-
-      To apply the Apache License to your work, attach the following
-      boilerplate notice, with the fields enclosed by brackets "[]"
-      replaced with your own identifying information. (Don't include
-      the brackets!)  The text should be enclosed in the appropriate
-      comment syntax for the file format. We also recommend that a
-      file or class name and description of purpose be included on the
-      same "printed page" as the copyright notice for easier
-      identification within third-party archives.
-
-   Copyright 2008-2011 Google Inc.
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
diff --git a/gson/README b/gson/README
deleted file mode 100644
index ebae78030..000000000
--- a/gson/README
+++ /dev/null
@@ -1,7 +0,0 @@
-Gson is a Java library that can be used to convert a Java object into its 
-JSON representation. It can also be used to convert a JSON string into an 
-equivalent Java object. Gson can work with arbitrary Java objects including 
-pre-existing objects that you do not have source-code of.
-
-Complete Gson documentation is available at its project page 
-https://github.com/google/gson
diff --git a/gson/assembly-descriptor.xml b/gson/assembly-descriptor.xml
deleted file mode 100644
index b734ee3aa..000000000
--- a/gson/assembly-descriptor.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<assembly>
-  <id>release</id>
-  <formats>
-    <format>zip</format>
-  </formats>
-  <fileSets>
-    <fileSet>
-      <includes>
-        <include>README*</include>
-        <include>LICENSE*</include>
-      </includes>
-    </fileSet>
-    <fileSet>
-      <directory>target</directory>
-      <outputDirectory></outputDirectory>
-      <includes>
-        <include>gson-*.jar</include>
-      </includes>
-    </fileSet>
-  </fileSets>
-</assembly>
\ No newline at end of file
diff --git a/gson/bnd.bnd b/gson/bnd.bnd
deleted file mode 100644
index c98fcfd3c..000000000
--- a/gson/bnd.bnd
+++ /dev/null
@@ -1,14 +0,0 @@
-Bundle-SymbolicName: com.google.gson
-Bundle-Name: ${project.name}
-Bundle-Description: ${project.description}
-Bundle-Vendor: Google Gson Project
-Bundle-ContactAddress: ${project.parent.url}
-Bundle-RequiredExecutionEnvironment: J2SE-1.5, JavaSE-1.6, JavaSE-1.7, JavaSE-1.8
-
--removeheaders: Private-Package
-
--exportcontents:\
-    com.google.gson,\
-    com.google.gson.annotations,\
-    com.google.gson.reflect,\
-    com.google.gson.stream
diff --git a/gson/pom.xml b/gson/pom.xml
deleted file mode 100644
index 90cd5dc85..000000000
--- a/gson/pom.xml
+++ /dev/null
@@ -1,57 +0,0 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.google.code.gson</groupId>
-    <artifactId>gson-parent</artifactId>
-    <version>2.8.1-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>gson</artifactId>
-  <name>Gson</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-javadoc-plugin</artifactId>
-        <configuration>
-          <includePackageNames>com.google.gson</includePackageNames>
-          <excludePackageNames>com.google.gson.internal:com.google.gson.internal.bind</excludePackageNames>
-          <links>
-            <link>http://docs.oracle.com/javase/6/docs/api/</link>
-          </links>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>biz.aQute.bnd</groupId>
-        <artifactId>bnd-maven-plugin</artifactId>
-        <version>3.1.0</version>
-        <executions>
-          <execution>
-            <goals>
-              <goal>bnd-process</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-jar-plugin</artifactId>
-        <configuration>
-          <archive>
-            <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
-          </archive>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/lib/gson-cleanup-styles.xml b/lib/gson-cleanup-styles.xml
deleted file mode 100644
index 9e20cb96f..000000000
--- a/lib/gson-cleanup-styles.xml
+++ /dev/null
@@ -1,51 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<profiles version="2">
-<profile kind="CleanUpProfile" name="Gson" version="2">
-<setting id="cleanup.add_missing_nls_tags" value="false"/>
-<setting id="cleanup.format_source_code" value="false"/>
-<setting id="cleanup.add_missing_override_annotations" value="true"/>
-<setting id="cleanup.qualify_static_method_accesses_with_declaring_class" value="false"/>
-<setting id="cleanup.remove_unused_private_types" value="true"/>
-<setting id="cleanup.remove_unused_private_fields" value="true"/>
-<setting id="cleanup.always_use_parentheses_in_expressions" value="false"/>
-<setting id="cleanup.never_use_blocks" value="false"/>
-<setting id="cleanup.make_local_variable_final" value="true"/>
-<setting id="cleanup.add_missing_deprecated_annotations" value="true"/>
-<setting id="cleanup.remove_unused_private_methods" value="true"/>
-<setting id="cleanup.convert_to_enhanced_for_loop" value="true"/>
-<setting id="cleanup.remove_unnecessary_nls_tags" value="true"/>
-<setting id="cleanup.remove_unused_imports" value="true"/>
-<setting id="cleanup.remove_trailing_whitespaces_ignore_empty" value="false"/>
-<setting id="cleanup.make_private_fields_final" value="true"/>
-<setting id="cleanup.sort_members" value="false"/>
-<setting id="cleanup.add_generated_serial_version_id" value="false"/>
-<setting id="cleanup.remove_unused_local_variables" value="true"/>
-<setting id="cleanup.organize_imports" value="false"/>
-<setting id="cleanup.remove_unused_private_members" value="false"/>
-<setting id="cleanup.remove_trailing_whitespaces" value="true"/>
-<setting id="cleanup.never_use_parentheses_in_expressions" value="true"/>
-<setting id="cleanup.sort_members_all" value="false"/>
-<setting id="cleanup.remove_unnecessary_casts" value="true"/>
-<setting id="cleanup.make_parameters_final" value="false"/>
-<setting id="cleanup.use_blocks_only_for_return_and_throw" value="false"/>
-<setting id="cleanup.use_this_for_non_static_field_access" value="false"/>
-<setting id="cleanup.remove_private_constructors" value="true"/>
-<setting id="cleanup.use_blocks" value="false"/>
-<setting id="cleanup.add_missing_annotations" value="true"/>
-<setting id="cleanup.always_use_this_for_non_static_method_access" value="false"/>
-<setting id="cleanup.use_parentheses_in_expressions" value="false"/>
-<setting id="cleanup.remove_trailing_whitespaces_all" value="true"/>
-<setting id="cleanup.always_use_this_for_non_static_field_access" value="false"/>
-<setting id="cleanup.use_this_for_non_static_field_access_only_if_necessary" value="true"/>
-<setting id="cleanup.qualify_static_field_accesses_with_declaring_class" value="false"/>
-<setting id="cleanup.add_default_serial_version_id" value="true"/>
-<setting id="cleanup.use_this_for_non_static_method_access_only_if_necessary" value="true"/>
-<setting id="cleanup.use_this_for_non_static_method_access" value="false"/>
-<setting id="cleanup.qualify_static_member_accesses_through_instances_with_declaring_class" value="true"/>
-<setting id="cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class" value="true"/>
-<setting id="cleanup.add_serial_version_id" value="false"/>
-<setting id="cleanup.make_variable_declarations_final" value="false"/>
-<setting id="cleanup.always_use_blocks" value="true"/>
-<setting id="cleanup.qualify_static_member_accesses_with_declaring_class" value="true"/>
-</profile>
-</profiles>
diff --git a/lib/gson-formatting-styles.xml b/lib/gson-formatting-styles.xml
deleted file mode 100644
index 177e9997d..000000000
--- a/lib/gson-formatting-styles.xml
+++ /dev/null
@@ -1,267 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<profiles version="11">
-<profile kind="CodeFormatterProfile" name="Gson" version="11">
-<setting id="org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration" value="end_of_line"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_field" value="0"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line" value="false"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_ellipsis" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_multiple_fields" value="16"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer" value="16"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_conditional_expression" value="80"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_binary_operator" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.brace_position_for_array_initializer" value="end_of_line"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.blank_lines_after_package" value="1"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.continuation_indentation" value="2"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation" value="16"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk" value="1"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_binary_operator" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_package" value="0"/>
-<setting id="org.eclipse.jdt.core.compiler.source" value="1.5"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.comment.format_line_comments" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call" value="16"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_member_type" value="1"/>
-<setting id="org.eclipse.jdt.core.formatter.align_type_members_on_columns" value="false"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation" value="16"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_unary_operator" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.comment.indent_parameter_description" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment" value="false"/>
-<setting id="org.eclipse.jdt.core.formatter.lineSplit" value="100"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration" value="0"/>
-<setting id="org.eclipse.jdt.core.formatter.indentation.size" value="4"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration" value="16"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_assignment" value="16"/>
-<setting id="org.eclipse.jdt.core.compiler.problem.assertIdentifier" value="error"/>
-<setting id="org.eclipse.jdt.core.formatter.tabulation.char" value="space"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.indent_statements_compare_to_body" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_method" value="1"/>
-<setting id="org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line" value="false"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration" value="16"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration" value="end_of_line"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.brace_position_for_switch" value="end_of_line"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.compiler.problem.enumIdentifier" value="error"/>
-<setting id="org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch" value="false"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_ellipsis" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.brace_position_for_block" value="end_of_line"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.brace_position_for_method_declaration" value="end_of_line"/>
-<setting id="org.eclipse.jdt.core.formatter.compact_else_if" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.brace_position_for_enum_constant" value="end_of_line"/>
-<setting id="org.eclipse.jdt.core.formatter.comment.indent_root_tags" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.tabulation.size" value="2"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment" value="false"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration" value="16"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.indent_empty_lines" value="false"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.brace_position_for_block_in_case" value="end_of_line"/>
-<setting id="org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve" value="1"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression" value="16"/>
-<setting id="org.eclipse.jdt.core.compiler.compliance" value="1.5"/>
-<setting id="org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer" value="2"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression" value="16"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_unary_operator" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line" value="false"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line" value="false"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration" value="16"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_binary_expression" value="16"/>
-<setting id="org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration" value="end_of_line"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode" value="enabled"/>
-<setting id="org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant" value="16"/>
-<setting id="org.eclipse.jdt.core.formatter.comment.format_javadoc_comments" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.comment.line_length" value="80"/>
-<setting id="org.eclipse.jdt.core.formatter.blank_lines_between_import_groups" value="1"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_semicolon" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration" value="end_of_line"/>
-<setting id="org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body" value="0"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.wrap_before_binary_operator" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations" value="1"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.indent_statements_compare_to_block" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration" value="16"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_compact_if" value="16"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.blank_lines_before_imports" value="1"/>
-<setting id="org.eclipse.jdt.core.formatter.comment.format_html" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration" value="16"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.comment.format_source_code" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration" value="16"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer" value="insert"/>
-<setting id="org.eclipse.jdt.core.compiler.codegen.targetPlatform" value="1.5"/>
-<setting id="org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations" value="false"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_member" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.comment.format_header" value="false"/>
-<setting id="org.eclipse.jdt.core.formatter.comment.format_block_comments" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.alignment_for_enum_constants" value="0"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.brace_position_for_type_declaration" value="end_of_line"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.blank_lines_after_imports" value="1"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header" value="true"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for" value="insert"/>
-<setting id="org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column" value="false"/>
-<setting id="org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments" value="do not insert"/>
-<setting id="org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column" value="false"/>
-<setting id="org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line" value="false"/>
-</profile>
-</profiles>
diff --git a/metrics/pom.xml b/metrics/pom.xml
deleted file mode 100644
index 9a084452c..000000000
--- a/metrics/pom.xml
+++ /dev/null
@@ -1,141 +0,0 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>com.google.code.gson</groupId>
-  <artifactId>gson-metrics</artifactId>
-  <packaging>jar</packaging>
-  <version>1.0-SNAPSHOT</version>
-  <inceptionYear>2011</inceptionYear>
-  <name>Gson Metrics</name>
-  <parent>
-    <groupId>org.sonatype.oss</groupId>
-    <artifactId>oss-parent</artifactId>
-    <version>5</version>
-  </parent>
-  <url>http://code.google.com/p/google-gson/</url>
-  <description>Performance Metrics for Google Gson library</description>
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-  </properties>
-  <licenses>
-    <license>
-      <name>The Apache Software License, Version 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-      <distribution>repo</distribution>
-    </license>
-  </licenses>
-  <scm>
-    <connection>scm:svn:http://google-gson.googlecode.com/svn/trunk/metrics</connection>
-    <developerConnection>scm:svn:https://google-gson.googlecode.com/svn/trunk/metrics</developerConnection>
-    <url>http://google-gson.codegoogle.com/svn/trunk/metrics</url>
-  </scm>
-  <issueManagement>
-    <system>Google Code Issue Tracking</system>
-    <url>http://code.google.com/p/google-gson/issues/list</url>
-  </issueManagement>
-  <organization>
-    <name>Google, Inc.</name>
-    <url>http://www.google.com</url>
-  </organization>
-  <dependencies>
-    <dependency>
-      <groupId>com.google.code.gson</groupId>
-      <artifactId>gson</artifactId>
-      <version>1.7.2-SNAPSHOT</version>
-    </dependency>
-    <dependency>
-      <groupId>com.google.code.caliper</groupId>
-      <artifactId>caliper</artifactId>
-      <version>1.0-SNAPSHOT</version>
-    </dependency>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>3.8.2</version>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-  <build>
-    <defaultGoal>package</defaultGoal>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>2.3.2</version>
-        <configuration>
-          <source>1.6</source>
-          <target>1.6</target>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-eclipse-plugin</artifactId>
-        <version>2.8</version>
-        <configuration>
-          <downloadSources>true</downloadSources>
-          <downloadJavadocs>true</downloadJavadocs>
-          <workspace>../eclipse-ws/</workspace>
-          <workspaceCodeStylesURL>
-            file:///${basedir}/../lib/gson-formatting-styles.xml
-          </workspaceCodeStylesURL>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-release-plugin</artifactId>
-        <version>2.1</version>
-        <configuration>
-          <arguments>-DenableCiProfile=true</arguments>
-          <tagBase>https://google-gson.googlecode.com/svn/tags/</tagBase>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-source-plugin</artifactId>
-        <version>2.1.2</version>
-        <executions>
-          <execution>
-            <id>attach-sources</id>
-            <goals>
-              <goal>jar</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-javadoc-plugin</artifactId>
-        <version>2.7</version>
-        <executions>
-          <execution>
-            <id>attach-javadocs</id>
-            <goals>
-              <goal>jar</goal>
-            </goals>
-          </execution>
-        </executions>
-        <configuration>
-          <links>
-            <link>http://download.oracle.com/javase/1.5.0/docs/api/</link>
-          </links>
-          <version>true</version>
-          <show>public</show>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-  <developers>
-    <developer>
-      <name>Inderjeet Singh</name>
-      <organization>Google Inc.</organization>
-    </developer>
-    <developer>
-      <name>Joel Leitch</name>
-      <organization>Google Inc.</organization>
-    </developer>
-    <developer>
-      <name>Jesse Wilson</name>
-      <organization>Google Inc.</organization>
-    </developer>
-  </developers>
-</project>
diff --git a/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitives.java b/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitives.java
deleted file mode 100644
index 72cd6b6d1..000000000
--- a/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitives.java
+++ /dev/null
@@ -1,95 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.metrics;
-
-/**
- * Class with a bunch of primitive fields
- *
- * @author Inderjeet Singh
- */
-public class BagOfPrimitives {
-  public static final long DEFAULT_VALUE = 0;
-  public long longValue;
-  public int intValue;
-  public boolean booleanValue;
-  public String stringValue;
-
-  public BagOfPrimitives() {
-    this(DEFAULT_VALUE, 0, false, "");
-  }
-
-  public BagOfPrimitives(long longValue, int intValue, boolean booleanValue, String stringValue) {
-    this.longValue = longValue;
-    this.intValue = intValue;
-    this.booleanValue = booleanValue;
-    this.stringValue = stringValue;
-  }
-
-  public int getIntValue() {
-    return intValue;
-  }
-
-  public String getExpectedJson() {
-    StringBuilder sb = new StringBuilder();
-    sb.append("{");
-    sb.append("\"longValue\":").append(longValue).append(",");
-    sb.append("\"intValue\":").append(intValue).append(",");
-    sb.append("\"booleanValue\":").append(booleanValue).append(",");
-    sb.append("\"stringValue\":\"").append(stringValue).append("\"");
-    sb.append("}");
-    return sb.toString();
-  }
-
-  @Override
-  public int hashCode() {
-    final int prime = 31;
-    int result = 1;
-    result = prime * result + (booleanValue ? 1231 : 1237);
-    result = prime * result + intValue;
-    result = prime * result + (int) (longValue ^ (longValue >>> 32));
-    result = prime * result + ((stringValue == null) ? 0 : stringValue.hashCode());
-    return result;
-  }
-
-  @Override
-  public boolean equals(Object obj) {
-    if (this == obj)
-      return true;
-    if (obj == null)
-      return false;
-    if (getClass() != obj.getClass())
-      return false;
-    BagOfPrimitives other = (BagOfPrimitives) obj;
-    if (booleanValue != other.booleanValue)
-      return false;
-    if (intValue != other.intValue)
-      return false;
-    if (longValue != other.longValue)
-      return false;
-    if (stringValue == null) {
-      if (other.stringValue != null)
-        return false;
-    } else if (!stringValue.equals(other.stringValue))
-      return false;
-    return true;
-  }
-
-  @Override
-  public String toString() {
-    return String.format("(longValue=%d,intValue=%d,booleanValue=%b,stringValue=%s)",
-        longValue, intValue, booleanValue, stringValue);
-  }
-}
diff --git a/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitivesDeserializationBenchmark.java b/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitivesDeserializationBenchmark.java
deleted file mode 100644
index 8e6ea2b24..000000000
--- a/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitivesDeserializationBenchmark.java
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.metrics;
-
-import java.io.IOException;
-import java.io.StringReader;
-import java.lang.reflect.Field;
-
-import com.google.caliper.Runner;
-import com.google.caliper.SimpleBenchmark;
-import com.google.gson.Gson;
-import com.google.gson.stream.JsonReader;
-
-/**
- * Caliper based micro benchmarks for Gson
- *
- * @author Inderjeet Singh
- * @author Jesse Wilson
- * @author Joel Leitch
- */
-public class BagOfPrimitivesDeserializationBenchmark extends SimpleBenchmark {
-
-  private Gson gson;
-  private String json;
-
-  public static void main(String[] args) {
-    Runner.main(BagOfPrimitivesDeserializationBenchmark.class, args);
-  }
-  
-  @Override
-  protected void setUp() throws Exception {
-    this.gson = new Gson();
-    BagOfPrimitives bag = new BagOfPrimitives(10L, 1, false, "foo");
-    this.json = gson.toJson(bag);
-  }
-
-  /** 
-   * Benchmark to measure Gson performance for deserializing an object
-   */
-  public void timeBagOfPrimitivesDefault(int reps) {
-    for (int i=0; i<reps; ++i) {
-      gson.fromJson(json, BagOfPrimitives.class);
-    }
-  }
-
-  /**
-   * Benchmark to measure deserializing objects by hand
-   */
-  public void timeBagOfPrimitivesStreaming(int reps) throws IOException {
-    for (int i=0; i<reps; ++i) {
-      StringReader reader = new StringReader(json);
-      JsonReader jr = new JsonReader(reader);
-      jr.beginObject();
-      long longValue = 0;
-      int intValue = 0;
-      boolean booleanValue = false;
-      String stringValue = null;
-      while(jr.hasNext()) {
-        String name = jr.nextName();
-        if (name.equals("longValue")) {
-          longValue = jr.nextLong();
-        } else if (name.equals("intValue")) {
-          intValue = jr.nextInt();
-        } else if (name.equals("booleanValue")) {
-          booleanValue = jr.nextBoolean();
-        } else if (name.equals("stringValue")) {
-          stringValue = jr.nextString();
-        } else {
-          throw new IOException("Unexpected name: " + name);
-        }
-      }
-      jr.endObject();
-      new BagOfPrimitives(longValue, intValue, booleanValue, stringValue);
-    }
-  }
-
-  /**
-   * This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and
-   * setting object values by reflection. We should strive to reduce the discrepancy between this
-   * and {@link #timeBagOfPrimitivesDefault(int)} .
-   */
-  public void timeBagOfPrimitivesReflectionStreaming(int reps) throws Exception {
-    for (int i=0; i<reps; ++i) {
-      StringReader reader = new StringReader(json);
-      JsonReader jr = new JsonReader(reader);
-      jr.beginObject();
-      BagOfPrimitives bag = new BagOfPrimitives();
-      while(jr.hasNext()) {
-        String name = jr.nextName();
-        for (Field field : BagOfPrimitives.class.getDeclaredFields()) {
-          if (field.getName().equals(name)) {
-            Class<?> fieldType = field.getType();
-            if (fieldType.equals(long.class)) {
-              field.setLong(bag, jr.nextLong());
-            } else if (fieldType.equals(int.class)) {
-              field.setInt(bag, jr.nextInt());
-            } else if (fieldType.equals(boolean.class)) {
-              field.setBoolean(bag, jr.nextBoolean());
-            } else if (fieldType.equals(String.class)) {
-              field.set(bag, jr.nextString());
-            } else {
-              throw new RuntimeException("Unexpected: type: " + fieldType + ", name: " + name);
-            }
-          }
-        }
-      }
-      jr.endObject();
-    }
-  }
-}
diff --git a/metrics/src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java b/metrics/src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java
deleted file mode 100644
index 09a5782ab..000000000
--- a/metrics/src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java
+++ /dev/null
@@ -1,140 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.metrics;
-
-import java.io.IOException;
-import java.io.StringReader;
-import java.lang.reflect.Field;
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.List;
-
-import com.google.caliper.Runner;
-import com.google.caliper.SimpleBenchmark;
-import com.google.gson.Gson;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-
-/**
- * Caliper based micro benchmarks for Gson
- *
- * @author Inderjeet Singh
- */
-public class CollectionsDeserializationBenchmark extends SimpleBenchmark {
-
-  private static final Type LIST_TYPE = new TypeToken<List<BagOfPrimitives>>(){}.getType();
-  private Gson gson;
-  private String json;
-
-  public static void main(String[] args) {
-    Runner.main(CollectionsDeserializationBenchmark.class, args);
-  }
-  
-  @Override
-  protected void setUp() throws Exception {
-    this.gson = new Gson();
-    List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();
-    for (int i = 0; i < 100; ++i) {
-      bags.add(new BagOfPrimitives(10L, 1, false, "foo"));
-    }
-    this.json = gson.toJson(bags, LIST_TYPE);
-  }
-
-  /** 
-   * Benchmark to measure Gson performance for deserializing an object
-   */
-  public void timeCollectionsDefault(int reps) {
-    for (int i=0; i<reps; ++i) {
-      gson.fromJson(json, LIST_TYPE);
-    }
-  }
-
-  /**
-   * Benchmark to measure deserializing objects by hand
-   */
-  public void timeCollectionsStreaming(int reps) throws IOException {
-    for (int i=0; i<reps; ++i) {
-      StringReader reader = new StringReader(json);
-      JsonReader jr = new JsonReader(reader);
-      jr.beginArray();
-      List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();
-      while(jr.hasNext()) {
-        jr.beginObject();
-        long longValue = 0;
-        int intValue = 0;
-        boolean booleanValue = false;
-        String stringValue = null;
-        while(jr.hasNext()) {
-          String name = jr.nextName();
-          if (name.equals("longValue")) {
-            longValue = jr.nextLong();
-          } else if (name.equals("intValue")) {
-            intValue = jr.nextInt();
-          } else if (name.equals("booleanValue")) {
-            booleanValue = jr.nextBoolean();
-          } else if (name.equals("stringValue")) {
-            stringValue = jr.nextString();
-          } else {
-            throw new IOException("Unexpected name: " + name);
-          }
-        }
-        jr.endObject();
-        bags.add(new BagOfPrimitives(longValue, intValue, booleanValue, stringValue));
-      }
-      jr.endArray();
-    }
-  }
-
-  /**
-   * This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and
-   * setting object values by reflection. We should strive to reduce the discrepancy between this
-   * and {@link #timeCollectionsDefault(int)} .
-   */
-  public void timeCollectionsReflectionStreaming(int reps) throws Exception {
-    for (int i=0; i<reps; ++i) {
-      StringReader reader = new StringReader(json);
-      JsonReader jr = new JsonReader(reader);
-      jr.beginArray();
-      List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();
-      while(jr.hasNext()) {
-        jr.beginObject();
-        BagOfPrimitives bag = new BagOfPrimitives();
-        while(jr.hasNext()) {
-          String name = jr.nextName();
-          for (Field field : BagOfPrimitives.class.getDeclaredFields()) {
-            if (field.getName().equals(name)) {
-              Class<?> fieldType = field.getType();
-              if (fieldType.equals(long.class)) {
-                field.setLong(bag, jr.nextLong());
-              } else if (fieldType.equals(int.class)) {
-                field.setInt(bag, jr.nextInt());
-              } else if (fieldType.equals(boolean.class)) {
-                field.setBoolean(bag, jr.nextBoolean());
-              } else if (fieldType.equals(String.class)) {
-                field.set(bag, jr.nextString());
-              } else {
-                throw new RuntimeException("Unexpected: type: " + fieldType + ", name: " + name);
-              }
-            }
-          }
-        }
-        jr.endObject();
-        bags.add(bag);
-      }
-      jr.endArray();
-    }
-  }
-}
diff --git a/metrics/src/main/java/com/google/gson/metrics/ParseBenchmark.java b/metrics/src/main/java/com/google/gson/metrics/ParseBenchmark.java
deleted file mode 100644
index 68134372c..000000000
--- a/metrics/src/main/java/com/google/gson/metrics/ParseBenchmark.java
+++ /dev/null
@@ -1,389 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.metrics;
-
-import com.google.caliper.Param;
-import com.google.caliper.Runner;
-import com.google.caliper.SimpleBenchmark;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonParser;
-import com.google.gson.annotations.SerializedName;
-import com.google.gson.reflect.TypeToken;
-import java.io.CharArrayReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.io.StringWriter;
-import java.lang.reflect.Type;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.List;
-import org.codehaus.jackson.JsonFactory;
-import org.codehaus.jackson.annotate.JsonProperty;
-import org.codehaus.jackson.map.DeserializationConfig;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.type.TypeReference;
-
-/**
- * Measure Gson and Jackson parsing and binding performance.
- *
- * <p>This benchmark requires that ParseBenchmarkData.zip is on the classpath.
- * That file contains Twitter feed data, which is representative of what
- * applications will be parsing.
- */
-public final class ParseBenchmark extends SimpleBenchmark {
-  @Param Document document;
-  @Param Api api;
-
-  private enum Document {
-    TWEETS(new TypeToken<List<Tweet>>() {}, new TypeReference<List<Tweet>>() {}),
-    READER_SHORT(new TypeToken<Feed>() {}, new TypeReference<Feed>() {}),
-    READER_LONG(new TypeToken<Feed>() {}, new TypeReference<Feed>() {});
-
-    private final Type gsonType;
-    private final TypeReference<?> jacksonType;
-
-    private Document(TypeToken<?> typeToken, TypeReference<?> typeReference) {
-      this.gsonType = typeToken.getType();
-      this.jacksonType = typeReference;
-    }
-  }
-
-  private enum Api {
-    JACKSON_STREAM {
-      @Override Parser newParser() {
-        return new JacksonStreamParser();
-      }
-    },
-    JACKSON_BIND {
-      @Override Parser newParser() {
-        return new JacksonBindParser();
-      }
-    },
-    GSON_STREAM {
-      @Override Parser newParser() {
-        return new GsonStreamParser();
-      }
-    },
-    GSON_SKIP {
-      @Override Parser newParser() {
-        return new GsonSkipParser();
-      }
-    },
-    GSON_DOM {
-      @Override Parser newParser() {
-        return new GsonDomParser();
-      }
-    },
-    GSON_BIND {
-      @Override Parser newParser() {
-        return new GsonBindParser();
-      }
-    };
-    abstract Parser newParser();
-  }
-
-  private char[] text;
-  private Parser parser;
-
-  @Override protected void setUp() throws Exception {
-    text = resourceToString("/" + document.name() + ".json").toCharArray();
-    parser = api.newParser();
-  }
-
-  public void timeParse(int reps) throws Exception {
-    for (int i = 0; i < reps; i++) {
-      parser.parse(text, document);
-    }
-  }
-
-  private static String resourceToString(String path) throws Exception {
-    InputStream in = ParseBenchmark.class.getResourceAsStream(path);
-    if (in == null) {
-      throw new IllegalArgumentException("No such file: " + path);
-    }
-
-    Reader reader = new InputStreamReader(in, "UTF-8");
-    char[] buffer = new char[8192];
-    StringWriter writer = new StringWriter();
-    int count;
-    while ((count = reader.read(buffer)) != -1) {
-      writer.write(buffer, 0, count);
-    }
-    reader.close();
-    return writer.toString();
-  }
-
-  public static void main(String[] args) throws Exception {
-    Runner.main(ParseBenchmark.class, args);
-  }
-
-  interface Parser {
-    void parse(char[] data, Document document) throws Exception;
-  }
-
-  private static class GsonStreamParser implements Parser {
-    public void parse(char[] data, Document document) throws Exception {
-      com.google.gson.stream.JsonReader jsonReader
-          = new com.google.gson.stream.JsonReader(new CharArrayReader(data));
-      readToken(jsonReader);
-      jsonReader.close();
-    }
-
-    private void readToken(com.google.gson.stream.JsonReader reader) throws IOException {
-      while (true) {
-        switch (reader.peek()) {
-        case BEGIN_ARRAY:
-          reader.beginArray();
-          break;
-        case END_ARRAY:
-          reader.endArray();
-          break;
-        case BEGIN_OBJECT:
-          reader.beginObject();
-          break;
-        case END_OBJECT:
-          reader.endObject();
-          break;
-        case NAME:
-          reader.nextName();
-          break;
-        case BOOLEAN:
-          reader.nextBoolean();
-          break;
-        case NULL:
-          reader.nextNull();
-          break;
-        case NUMBER:
-          reader.nextLong();
-          break;
-        case STRING:
-          reader.nextString();
-          break;
-        case END_DOCUMENT:
-          return;
-        default:
-          throw new IllegalArgumentException("Unexpected token" + reader.peek());
-        }
-      }
-    }
-  }
-
-  private static class GsonSkipParser implements Parser {
-    public void parse(char[] data, Document document) throws Exception {
-      com.google.gson.stream.JsonReader jsonReader
-          = new com.google.gson.stream.JsonReader(new CharArrayReader(data));
-      jsonReader.skipValue();
-      jsonReader.close();
-    }
-  }
-
-  private static class JacksonStreamParser implements Parser {
-    public void parse(char[] data, Document document) throws Exception {
-      JsonFactory jsonFactory = new JsonFactory();
-      org.codehaus.jackson.JsonParser jp = jsonFactory.createJsonParser(new CharArrayReader(data));
-      jp.configure(org.codehaus.jackson.JsonParser.Feature.CANONICALIZE_FIELD_NAMES, false);
-      int depth = 0;
-      do {
-        switch (jp.nextToken()) {
-        case START_OBJECT:
-        case START_ARRAY:
-          depth++;
-          break;
-        case END_OBJECT:
-        case END_ARRAY:
-          depth--;
-          break;
-        case FIELD_NAME:
-          jp.getCurrentName();
-          break;
-        case VALUE_STRING:
-          jp.getText();
-          break;
-        case VALUE_NUMBER_INT:
-        case VALUE_NUMBER_FLOAT:
-          jp.getLongValue();
-          break;
-        }
-      } while (depth > 0);
-      jp.close();
-    }
-  }
-
-  private static class GsonDomParser implements Parser {
-    public void parse(char[] data, Document document) throws Exception {
-      new JsonParser().parse(new CharArrayReader(data));
-    }
-  }
-
-  private static class GsonBindParser implements Parser {
-    private static Gson gson = new GsonBuilder()
-        .setDateFormat("EEE MMM dd HH:mm:ss Z yyyy")
-        .create();
-
-    public void parse(char[] data, Document document) throws Exception {
-      gson.fromJson(new CharArrayReader(data), document.gsonType);
-    }
-  }
-
-  private static class JacksonBindParser implements Parser {
-    private static ObjectMapper mapper = new ObjectMapper();
-
-    static {
-      mapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);
-      mapper.configure(DeserializationConfig.Feature.AUTO_DETECT_FIELDS, true);
-      mapper.setDateFormat(new SimpleDateFormat("EEE MMM dd HH:mm:ss Z yyyy"));
-    }
-
-    public void parse(char[] data, Document document) throws Exception {
-      mapper.readValue(new CharArrayReader(data), document.jacksonType);
-    }
-  }
-
-  static class Tweet {
-    @JsonProperty String coordinates;
-    @JsonProperty boolean favorited;
-    @JsonProperty Date created_at;
-    @JsonProperty boolean truncated;
-    @JsonProperty Tweet retweeted_status;
-    @JsonProperty String id_str;
-    @JsonProperty String in_reply_to_id_str;
-    @JsonProperty String contributors;
-    @JsonProperty String text;
-    @JsonProperty long id;
-    @JsonProperty String retweet_count;
-    @JsonProperty String in_reply_to_status_id_str;
-    @JsonProperty Object geo;
-    @JsonProperty boolean retweeted;
-    @JsonProperty String in_reply_to_user_id;
-    @JsonProperty String in_reply_to_screen_name;
-    @JsonProperty Object place;
-    @JsonProperty User user;
-    @JsonProperty String source;
-    @JsonProperty String in_reply_to_user_id_str;
-  }
-
-  static class User {
-    @JsonProperty String name;
-    @JsonProperty String profile_sidebar_border_color;
-    @JsonProperty boolean profile_background_tile;
-    @JsonProperty String profile_sidebar_fill_color;
-    @JsonProperty Date created_at;
-    @JsonProperty String location;
-    @JsonProperty String profile_image_url;
-    @JsonProperty boolean follow_request_sent;
-    @JsonProperty String profile_link_color;
-    @JsonProperty boolean is_translator;
-    @JsonProperty String id_str;
-    @JsonProperty int favourites_count;
-    @JsonProperty boolean contributors_enabled;
-    @JsonProperty String url;
-    @JsonProperty boolean default_profile;
-    @JsonProperty long utc_offset;
-    @JsonProperty long id;
-    @JsonProperty boolean profile_use_background_image;
-    @JsonProperty int listed_count;
-    @JsonProperty String lang;
-    @JsonProperty("protected") @SerializedName("protected") boolean isProtected;
-    @JsonProperty int followers_count;
-    @JsonProperty String profile_text_color;
-    @JsonProperty String profile_background_color;
-    @JsonProperty String time_zone;
-    @JsonProperty String description;
-    @JsonProperty boolean notifications;
-    @JsonProperty boolean geo_enabled;
-    @JsonProperty boolean verified;
-    @JsonProperty String profile_background_image_url;
-    @JsonProperty boolean defalut_profile_image;
-    @JsonProperty int friends_count;
-    @JsonProperty int statuses_count;
-    @JsonProperty String screen_name;
-    @JsonProperty boolean following;
-    @JsonProperty boolean show_all_inline_media;
-  }
-
-  static class Feed {
-    @JsonProperty String id;
-    @JsonProperty String title;
-    @JsonProperty String description;
-    @JsonProperty("alternate") @SerializedName("alternate") List<Link> alternates;
-    @JsonProperty long updated;
-    @JsonProperty List<Item> items;
-
-    @Override public String toString() {
-      StringBuilder result = new StringBuilder()
-          .append(id)
-          .append("\n").append(title)
-          .append("\n").append(description)
-          .append("\n").append(alternates)
-          .append("\n").append(updated);
-      int i = 1;
-      for (Item item : items) {
-        result.append(i++).append(": ").append(item).append("\n\n");
-      }
-      return result.toString();
-    }
-  }
-
-  static class Link {
-    @JsonProperty String href;
-
-    @Override public String toString() {
-      return href;
-    }
-  }
-
-  static class Item {
-    @JsonProperty List<String> categories;
-    @JsonProperty String title;
-    @JsonProperty long published;
-    @JsonProperty long updated;
-    @JsonProperty("alternate") @SerializedName("alternate") List<Link> alternates;
-    @JsonProperty Content content;
-    @JsonProperty String author;
-    @JsonProperty List<ReaderUser> likingUsers;
-
-    @Override public String toString() {
-      return title
-          + "\nauthor: " + author
-          + "\npublished: " + published
-          + "\nupdated: " + updated
-          + "\n" + content
-          + "\nliking users: " + likingUsers
-          + "\nalternates: " + alternates
-          + "\ncategories: " + categories;
-    }
-  }
-
-  static class Content {
-    @JsonProperty String content;
-
-    @Override public String toString() {
-      return content;
-    }
-  }
-
-  static class ReaderUser {
-    @JsonProperty String userId;
-
-    @Override public String toString() {
-      return userId;
-    }
-  }
-}
diff --git a/metrics/src/main/java/com/google/gson/metrics/ParseBenchmarkData.zip b/metrics/src/main/java/com/google/gson/metrics/ParseBenchmarkData.zip
deleted file mode 100644
index 58e08bb50..000000000
Binary files a/metrics/src/main/java/com/google/gson/metrics/ParseBenchmarkData.zip and /dev/null differ
diff --git a/metrics/src/main/java/com/google/gson/metrics/SerializationBenchmark.java b/metrics/src/main/java/com/google/gson/metrics/SerializationBenchmark.java
deleted file mode 100644
index 9cdf085e8..000000000
--- a/metrics/src/main/java/com/google/gson/metrics/SerializationBenchmark.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Copyright (C) 2011 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.metrics;
-
-import com.google.caliper.Param;
-import com.google.caliper.Runner;
-import com.google.caliper.SimpleBenchmark;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-
-/**
- * Caliper based micro benchmarks for Gson serialization
- *
- * @author Inderjeet Singh
- * @author Jesse Wilson
- * @author Joel Leitch
- */
-public class SerializationBenchmark extends SimpleBenchmark {
-
-  private Gson gson;
-  private BagOfPrimitives bag;
-  @Param
-  private boolean pretty;
-
-  public static void main(String[] args) {
-    Runner.main(SerializationBenchmark.class, args);
-  }
-  
-  @Override
-  protected void setUp() throws Exception {
-    this.gson = pretty ? new GsonBuilder().setPrettyPrinting().create() : new Gson();
-    this.bag = new BagOfPrimitives(10L, 1, false, "foo");
-  }
-
-  public void timeObjectSerialization(int reps) {
-    for (int i=0; i<reps; ++i) {
-      gson.toJson(bag);
-    }
-  }
-}
diff --git a/pom.xml b/pom.xml
deleted file mode 100644
index 9e5c435fc..000000000
--- a/pom.xml
+++ /dev/null
@@ -1,120 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>org.sonatype.oss</groupId>
-    <artifactId>oss-parent</artifactId>
-    <version>7</version>
-  </parent>
-
-  <groupId>com.google.code.gson</groupId>
-  <artifactId>gson-parent</artifactId>
-  <version>2.8.1-SNAPSHOT</version>
-  <packaging>pom</packaging>
-
-  <name>Gson Parent</name>
-  <description>Gson JSON library</description>
-  <url>https://github.com/google/gson</url>
-
-  <modules>
-    <module>gson</module>
-  </modules>
-
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    <java.version>1.6</java.version>
-  </properties>
-
-  <scm>
-    <url>https://github.com/google/gson/</url>
-    <connection>scm:git:https://github.com/google/gson.git</connection>
-    <developerConnection>scm:git:git@github.com:google/gson.git</developerConnection>
-    <tag>HEAD</tag>
-  </scm>
-
-  <issueManagement>
-    <system>GitHub Issues</system>
-    <url>https://github.com/google/gson/issues</url>
-  </issueManagement>
-
-  <licenses>
-    <license>
-      <name>Apache 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-    </license>
-  </licenses>
-
-  <dependencyManagement>
-    <dependencies>
-      <dependency>
-        <groupId>junit</groupId>
-        <artifactId>junit</artifactId>
-        <version>4.12</version>
-        <scope>test</scope>
-      </dependency>
-    </dependencies>
-  </dependencyManagement>
-
-  <build>
-    <pluginManagement>
-      <plugins>
-        <plugin>
-          <groupId>org.apache.maven.plugins</groupId>
-          <artifactId>maven-compiler-plugin</artifactId>
-          <version>3.0</version>
-          <configuration>
-            <source>${java.version}</source>
-            <target>${java.version}</target>
-          </configuration>
-        </plugin>
-        <plugin>
-          <groupId>org.apache.maven.plugins</groupId>
-          <artifactId>maven-javadoc-plugin</artifactId>
-          <version>2.10.3</version>
-        </plugin>
-        <plugin>
-          <groupId>org.apache.maven.plugins</groupId>
-          <artifactId>maven-jar-plugin</artifactId>
-        </plugin>
-      </plugins>
-    </pluginManagement>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-release-plugin</artifactId>
-        <version>2.4.2</version>
-        <dependencies>
-          <dependency>
-            <groupId>org.apache.maven.scm</groupId>
-            <artifactId>maven-scm-provider-gitexe</artifactId>
-            <version>1.9</version>
-          </dependency>
-        </dependencies>
-        <configuration>
-          <autoVersionSubmodules>true</autoVersionSubmodules>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-  <profiles>
-    <profile>
-      <id>doclint-java8-disable</id>
-      <activation>
-        <jdk>[1.8,)</jdk>
-      </activation>
-      <build>
-        <plugins>
-          <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-javadoc-plugin</artifactId>
-            <configuration>
-              <additionalparam>-Xdoclint:none</additionalparam>
-            </configuration>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-  </profiles>
-</project>
diff --git a/proto/.gitignore b/proto/.gitignore
deleted file mode 100644
index f44578ac2..000000000
--- a/proto/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-src/main/java/com/google/gson/protobuf/generated/
diff --git a/proto/pom.xml b/proto/pom.xml
deleted file mode 100644
index 99f7791d5..000000000
--- a/proto/pom.xml
+++ /dev/null
@@ -1,218 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>com.google.code.gson</groupId>
-  <artifactId>proto</artifactId>
-  <packaging>jar</packaging>
-  <version>0.6-SNAPSHOT</version>
-  <name>Gson Protobuf Support</name>
-  <description>Gson support for Protobufs</description>
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-  </properties>
-  <distributionManagement>
-    <repository>
-      <id>local.repo</id>
-      <name>file repository to svn</name>
-      <url>file://${basedir}/../../mavenrepo</url>
-    </repository>
-  </distributionManagement>
-  <repositories>
-    <repository>
-      <id>gson</id>
-      <url>http://google-gson.googlecode.com/svn/mavenrepo</url>
-      <snapshots>
-        <enabled>true</enabled>
-      </snapshots>
-      <releases>
-        <enabled>true</enabled>
-      </releases>
-    </repository>
-  </repositories>
-  <licenses>
-    <license>
-      <name>The Apache Software License, Version 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-      <distribution>repo</distribution>
-    </license>
-  </licenses>
-  <scm>
-    <connection>scm:svn:http://google-gson.googlecode.com/svn/trunk/proto</connection>
-    <developerConnection>scm:svn:https://google-gson.googlecode.com/svn/trunk/proto</developerConnection>
-    <url>http://google-gson.codegoogle.com/svn/trunk/proto</url>
-  </scm>
-  <issueManagement>
-    <system>Google Code Issue Tracking</system>
-    <url>http://code.google.com/p/google-gson/issues/list</url>
-  </issueManagement>
-
-  <dependencies>
-
-    <!--  Gson: Java to Json conversion -->
-    <dependency>
-      <groupId>com.google.code.gson</groupId>
-      <artifactId>gson</artifactId>
-      <version>2.4</version>
-      <scope>compile</scope>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.protobuf</groupId>
-      <artifactId>protobuf-java</artifactId>
-      <version>2.6.1</version>
-      <scope>compile</scope>
-    </dependency>
-    
-    <dependency>
-      <groupId>com.google.guava</groupId>
-      <artifactId>guava</artifactId>
-      <version>18.0</version>
-      <scope>compile</scope>
-    </dependency>
-
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>4.12</version>
-      <scope>test</scope>
-    </dependency>
-    
-    <dependency>
-      <groupId>com.google.truth</groupId>
-      <artifactId>truth</artifactId>
-      <version>0.27</version>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <finalName>gson-proto</finalName>
-    <plugins>
-      <plugin>
-        <artifactId>maven-antrun-plugin</artifactId>
-        <version>1.8</version>
-        <executions>
-          <execution>
-            <id>compile-protoc</id>
-            <phase>generate-sources</phase>
-            <configuration>
-              <tasks>
-                <mkdir dir="target/generated" />
-                <path id="proto.path">
-                  <fileset dir="src/main/protobuf">
-                    <include name="**/*.proto" />
-                  </fileset>
-                </path>
-                <pathconvert pathsep=" " property="proto.files" refid="proto.path" />
-                <exec executable="protoc" failonerror="true">
-                  <arg value="--java_out=src/main/java" />
-                  <arg value="--proto_path=/usr/include" />
-                  <arg value="-I${project.basedir}/src/main/protobuf" />
-                  <arg line="${proto.files}" />
-                </exec>
-              </tasks>
-            </configuration>
-            <goals>
-              <goal>run</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>2.3.2</version>
-        <configuration>
-          <source>1.6</source>
-          <target>1.6</target>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-eclipse-plugin</artifactId>
-        <version>2.8</version>
-        <configuration>
-          <downloadSources>true</downloadSources>
-          <downloadJavadocs>true</downloadJavadocs>
-          <workspace>../eclipse-ws</workspace>
-          <workspaceCodeStylesURL>file:///${basedir}/../lib/gson-formatting-styles.xml</workspaceCodeStylesURL>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-install-plugin</artifactId>
-        <version>2.5.2</version>
-        <!-- configuration>
-          <updateReleaseInfo>true</updateReleaseInfo>
-          <createChecksum>true</createChecksum>
-          <groupId>${groupId}</groupId>
-          <artifactId>${artifactId}</artifactId>
-          <version>${version}</version>
-          <packaging>jar</packaging>
-          <classifier>sources</classifier>
-          <file>target/proto-sources.jar</file>
-        </configuration -->
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-release-plugin</artifactId>
-        <version>2.1</version>
-        <configuration>
-          <arguments>-DenableCiProfile=true</arguments>
-          <tagBase>https://google-gson.googlecode.com/svn/tags/</tagBase>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-source-plugin</artifactId>
-        <version>2.1.2</version>
-        <executions>
-          <execution>
-            <id>attach-sources</id>
-            <goals>
-              <goal>jar</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-javadoc-plugin</artifactId>
-        <version>2.7</version>
-        <executions>
-          <execution>
-            <id>attach-javadocs</id>
-            <goals>
-              <goal>jar</goal>
-            </goals>
-          </execution>
-        </executions>
-        <configuration>
-          <links>
-            <link>http://download.oracle.com/javase/1.5.0/docs/api/</link>
-          </links>
-          <version>true</version>
-          <show>public</show>
-        </configuration>
-      </plugin>
-      <plugin>
-        <artifactId>maven-assembly-plugin</artifactId>
-        <configuration>
-          <descriptor>src/main/resources/assembly-descriptor.xml</descriptor>
-          <finalName>proto-${project.version}</finalName>
-          <outputDirectory>target/dist</outputDirectory>
-          <workDirectory>target/assembly/work</workDirectory>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-  <developers>
-    <developer>
-      <name>Inderjeet Singh</name>
-      <organization>Google Inc.</organization>
-    </developer>
-  </developers>
-</project>
diff --git a/proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java b/proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java
deleted file mode 100644
index 5570edc98..000000000
--- a/proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java
+++ /dev/null
@@ -1,406 +0,0 @@
-/*
- * Copyright (C) 2010 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.gson.protobuf;
-
-import static com.google.common.base.Preconditions.checkNotNull;
-
-import com.google.common.base.CaseFormat;
-import com.google.common.base.Converter;
-import com.google.common.collect.MapMaker;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.protobuf.DescriptorProtos.EnumValueOptions;
-import com.google.protobuf.DescriptorProtos.FieldOptions;
-import com.google.protobuf.Descriptors.Descriptor;
-import com.google.protobuf.Descriptors.EnumDescriptor;
-import com.google.protobuf.Descriptors.EnumValueDescriptor;
-import com.google.protobuf.Descriptors.FieldDescriptor;
-import com.google.protobuf.Extension;
-import com.google.protobuf.GeneratedMessage;
-import com.google.protobuf.Message;
-
-import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.ConcurrentMap;
-
-/**
- * GSON type adapter for protocol buffers that knows how to serialize enums either by using their
- * values or their names, and also supports custom proto field names.
- * <p>
- * You can specify which case representation is used for the proto fields when writing/reading the
- * JSON payload by calling {@link Builder#setFieldNameSerializationFormat(CaseFormat, CaseFormat)}.
- * <p>
- * An example of default serialization/deserialization using custom proto field names is shown
- * below:
- *
- * <pre>
- * message MyMessage {
- *   // Will be serialized as 'osBuildID' instead of the default 'osBuildId'.
- *   string os_build_id = 1 [(serialized_name) = "osBuildID"];
- * }
- * </pre>
- * <p>
- *
- * @author Inderjeet Singh
- * @author Emmanuel Cron
- * @author Stanley Wang
- */
-public class ProtoTypeAdapter
-    implements JsonSerializer<GeneratedMessage>, JsonDeserializer<GeneratedMessage> {
-  /**
-   * Determines how enum <u>values</u> should be serialized.
-   */
-  public static enum EnumSerialization {
-    /**
-     * Serializes and deserializes enum values using their <b>number</b>. When this is used, custom
-     * value names set on enums are ignored.
-     */
-    NUMBER,
-    /** Serializes and deserializes enum values using their <b>name</b>. */
-    NAME;
-  }
-
-  /**
-   * Builder for {@link ProtoTypeAdapter}s.
-   */
-  public static class Builder {
-    private final Set<Extension<FieldOptions, String>> serializedNameExtensions;
-    private final Set<Extension<EnumValueOptions, String>> serializedEnumValueExtensions;
-    private EnumSerialization enumSerialization;
-    private Converter<String, String> fieldNameSerializationFormat;
-
-    private Builder(EnumSerialization enumSerialization, CaseFormat fromFieldNameFormat,
-        CaseFormat toFieldNameFormat) {
-      this.serializedNameExtensions = new HashSet<Extension<FieldOptions, String>>();
-      this.serializedEnumValueExtensions = new HashSet<Extension<EnumValueOptions, String>>();
-      setEnumSerialization(enumSerialization);
-      setFieldNameSerializationFormat(fromFieldNameFormat, toFieldNameFormat);
-    }
-
-    public Builder setEnumSerialization(EnumSerialization enumSerialization) {
-      this.enumSerialization = checkNotNull(enumSerialization);
-      return this;
-    }
-
-    /**
-     * Sets the field names serialization format. The first parameter defines how to read the format
-     * of the proto field names you are converting to JSON. The second parameter defines which
-     * format to use when serializing them.
-     * <p>
-     * For example, if you use the following parameters: {@link CaseFormat#LOWER_UNDERSCORE},
-     * {@link CaseFormat#LOWER_CAMEL}, the following conversion will occur:
-     *
-     * <pre>
-     * PROTO     <->  JSON
-     * my_field       myField
-     * foo            foo
-     * n__id_ct       nIdCt
-     * </pre>
-     */
-    public Builder setFieldNameSerializationFormat(CaseFormat fromFieldNameFormat,
-        CaseFormat toFieldNameFormat) {
-      fieldNameSerializationFormat = fromFieldNameFormat.converterTo(toFieldNameFormat);
-      return this;
-    }
-
-    /**
-     * Adds a field proto annotation that, when set, overrides the default field name
-     * serialization/deserialization. For example, if you add the '{@code serialized_name}'
-     * annotation and you define a field in your proto like the one below:
-     *
-     * <pre>
-     * string client_app_id = 1 [(serialized_name) = "appId"];
-     * </pre>
-     *
-     * ...the adapter will serialize the field using '{@code appId}' instead of the default '
-     * {@code clientAppId}'. This lets you customize the name serialization of any proto field.
-     */
-    public Builder addSerializedNameExtension(
-        Extension<FieldOptions, String> serializedNameExtension) {
-      serializedNameExtensions.add(checkNotNull(serializedNameExtension));
-      return this;
-    }
-
-    /**
-     * Adds an enum value proto annotation that, when set, overrides the default <b>enum</b> value
-     * serialization/deserialization of this adapter. For example, if you add the '
-     * {@code serialized_value}' annotation and you define an enum in your proto like the one below:
-     *
-     * <pre>
-     * enum MyEnum {
-     *   UNKNOWN = 0;
-     *   CLIENT_APP_ID = 1 [(serialized_value) = "APP_ID"];
-     *   TWO = 2 [(serialized_value) = "2"];
-     * }
-     * </pre>
-     *
-     * ...the adapter will serialize the value {@code CLIENT_APP_ID} as "{@code APP_ID}" and the
-     * value {@code TWO} as "{@code 2}". This works for both serialization and deserialization.
-     * <p>
-     * Note that you need to set the enum serialization of this adapter to
-     * {@link EnumSerialization#NAME}, otherwise these annotations will be ignored.
-     */
-    public Builder addSerializedEnumValueExtension(
-        Extension<EnumValueOptions, String> serializedEnumValueExtension) {
-      serializedEnumValueExtensions.add(checkNotNull(serializedEnumValueExtension));
-      return this;
-    }
-
-    public ProtoTypeAdapter build() {
-      return new ProtoTypeAdapter(enumSerialization, fieldNameSerializationFormat,
-          serializedNameExtensions, serializedEnumValueExtensions);
-    }
-  }
-
-  /**
-   * Creates a new {@link ProtoTypeAdapter} builder, defaulting enum serialization to
-   * {@link EnumSerialization#NAME} and converting field serialization from
-   * {@link CaseFormat#LOWER_UNDERSCORE} to {@link CaseFormat#LOWER_CAMEL}.
-   */
-  public static Builder newBuilder() {
-    return new Builder(EnumSerialization.NAME, CaseFormat.LOWER_UNDERSCORE, CaseFormat.LOWER_CAMEL);
-  }
-
-  private static final com.google.protobuf.Descriptors.FieldDescriptor.Type ENUM_TYPE =
-      com.google.protobuf.Descriptors.FieldDescriptor.Type.ENUM;
-
-  private static final ConcurrentMap<String, Map<Class<?>, Method>> mapOfMapOfMethods =
-      new MapMaker().makeMap();
-
-  private final EnumSerialization enumSerialization;
-  private final Converter<String, String> fieldNameSerializationFormat;
-  private final Set<Extension<FieldOptions, String>> serializedNameExtensions;
-  private final Set<Extension<EnumValueOptions, String>> serializedEnumValueExtensions;
-
-  private ProtoTypeAdapter(EnumSerialization enumSerialization,
-      Converter<String, String> fieldNameSerializationFormat,
-      Set<Extension<FieldOptions, String>> serializedNameExtensions,
-      Set<Extension<EnumValueOptions, String>> serializedEnumValueExtensions) {
-    this.enumSerialization = enumSerialization;
-    this.fieldNameSerializationFormat = fieldNameSerializationFormat;
-    this.serializedNameExtensions = serializedNameExtensions;
-    this.serializedEnumValueExtensions = serializedEnumValueExtensions;
-  }
-
-  @Override
-  public JsonElement serialize(GeneratedMessage src, Type typeOfSrc,
-      JsonSerializationContext context) {
-    JsonObject ret = new JsonObject();
-    final Map<FieldDescriptor, Object> fields = src.getAllFields();
-
-    for (Map.Entry<FieldDescriptor, Object> fieldPair : fields.entrySet()) {
-      final FieldDescriptor desc = fieldPair.getKey();
-      String name = getCustSerializedName(desc.getOptions(), desc.getName());
-
-      if (desc.getType() == ENUM_TYPE) {
-        // Enum collections are also returned as ENUM_TYPE
-        if (fieldPair.getValue() instanceof Collection) {
-          // Build the array to avoid infinite loop
-          JsonArray array = new JsonArray();
-          @SuppressWarnings("unchecked")
-          Collection<EnumValueDescriptor> enumDescs =
-              (Collection<EnumValueDescriptor>) fieldPair.getValue();
-          for (EnumValueDescriptor enumDesc : enumDescs) {
-            array.add(context.serialize(getEnumValue(enumDesc)));
-            ret.add(name, array);
-          }
-        } else {
-          EnumValueDescriptor enumDesc = ((EnumValueDescriptor) fieldPair.getValue());
-          ret.add(name, context.serialize(getEnumValue(enumDesc)));
-        }
-      } else {
-        ret.add(name, context.serialize(fieldPair.getValue()));
-      }
-    }
-    return ret;
-  }
-
-  @Override
-  public GeneratedMessage deserialize(JsonElement json, Type typeOfT,
-      JsonDeserializationContext context) throws JsonParseException {
-    try {
-      JsonObject jsonObject = json.getAsJsonObject();
-      @SuppressWarnings("unchecked")
-      Class<? extends GeneratedMessage> protoClass = (Class<? extends GeneratedMessage>) typeOfT;
-
-      try {
-        // Invoke the ProtoClass.newBuilder() method
-        GeneratedMessage.Builder<?> protoBuilder =
-            (GeneratedMessage.Builder<?>) getCachedMethod(protoClass, "newBuilder").invoke(null);
-
-        Descriptor protoDescriptor =
-            (Descriptor) getCachedMethod(protoClass, "getDescriptor").invoke(null);
-        // Call setters on all of the available fields
-        for (FieldDescriptor fieldDescriptor : protoDescriptor.getFields()) {
-          String jsonFieldName =
-              getCustSerializedName(fieldDescriptor.getOptions(), fieldDescriptor.getName());
-
-          JsonElement jsonElement = jsonObject.get(jsonFieldName);
-          if (jsonElement != null && !jsonElement.isJsonNull()) {
-            // Do not reuse jsonFieldName here, it might have a custom value
-            Object fieldValue;
-            if (fieldDescriptor.getType() == ENUM_TYPE) {
-              if (jsonElement.isJsonArray()) {
-                // Handling array
-                Collection<EnumValueDescriptor> enumCollection =
-                    new ArrayList<EnumValueDescriptor>(jsonElement.getAsJsonArray().size());
-                for (JsonElement element : jsonElement.getAsJsonArray()) {
-                  enumCollection.add(
-                      findValueByNameAndExtension(fieldDescriptor.getEnumType(), element));
-                }
-                fieldValue = enumCollection;
-              } else {
-                // No array, just a plain value
-                fieldValue =
-                    findValueByNameAndExtension(fieldDescriptor.getEnumType(), jsonElement);
-              }
-              protoBuilder.setField(fieldDescriptor, fieldValue);
-            } else if (fieldDescriptor.isRepeated()) {
-              // If the type is an array, then we have to grab the type from the class.
-              String protoArrayFieldName =
-                  fieldNameSerializationFormat.convert(fieldDescriptor.getName()) + "_";
-              Field protoArrayField = protoClass.getDeclaredField(protoArrayFieldName);
-              Type protoArrayFieldType = protoArrayField.getGenericType();
-              fieldValue = context.deserialize(jsonElement, protoArrayFieldType);
-              protoBuilder.setField(fieldDescriptor, fieldValue);
-            } else {
-              Message prototype = protoBuilder.build();
-              Object field = prototype.getField(fieldDescriptor);
-              fieldValue = context.deserialize(jsonElement, field.getClass());
-              protoBuilder.setField(fieldDescriptor, fieldValue);
-            }
-          }
-        }
-        return (GeneratedMessage) protoBuilder.build();
-      } catch (SecurityException e) {
-        throw new JsonParseException(e);
-      } catch (NoSuchMethodException e) {
-        throw new JsonParseException(e);
-      } catch (IllegalArgumentException e) {
-        throw new JsonParseException(e);
-      } catch (IllegalAccessException e) {
-        throw new JsonParseException(e);
-      } catch (InvocationTargetException e) {
-        throw new JsonParseException(e);
-      }
-    } catch (Exception e) {
-      throw new JsonParseException("Error while parsing proto", e);
-    }
-  }
-
-  /**
-   * Retrieves the custom field name from the given options, and if not found, returns the specified
-   * default name.
-   */
-  private String getCustSerializedName(FieldOptions options, String defaultName) {
-    for (Extension<FieldOptions, String> extension : serializedNameExtensions) {
-      if (options.hasExtension(extension)) {
-        return options.getExtension(extension);
-      }
-    }
-    return fieldNameSerializationFormat.convert(defaultName);
-  }
-
-  /**
-   * Retrieves the custom enum value name from the given options, and if not found, returns the
-   * specified default value.
-   */
-  private String getCustSerializedEnumValue(EnumValueOptions options, String defaultValue) {
-    for (Extension<EnumValueOptions, String> extension : serializedEnumValueExtensions) {
-      if (options.hasExtension(extension)) {
-        return options.getExtension(extension);
-      }
-    }
-    return defaultValue;
-  }
-
-  /**
-   * Returns the enum value to use for serialization, depending on the value of
-   * {@link EnumSerialization} that was given to this adapter.
-   */
-  private Object getEnumValue(EnumValueDescriptor enumDesc) {
-    if (enumSerialization == EnumSerialization.NAME) {
-      return getCustSerializedEnumValue(enumDesc.getOptions(), enumDesc.getName());
-    } else {
-      return enumDesc.getNumber();
-    }
-  }
-
-  /**
-   * Finds an enum value in the given {@link EnumDescriptor} that matches the given JSON element,
-   * either by name if the current adapter is using {@link EnumSerialization#NAME}, otherwise by
-   * number. If matching by name, it uses the extension value if it is defined, otherwise it uses
-   * its default value.
-   *
-   * @throws IllegalArgumentException if a matching name/number was not found
-   */
-  private EnumValueDescriptor findValueByNameAndExtension(EnumDescriptor desc,
-      JsonElement jsonElement) {
-    if (enumSerialization == EnumSerialization.NAME) {
-      // With enum name
-      for (EnumValueDescriptor enumDesc : desc.getValues()) {
-        String enumValue = getCustSerializedEnumValue(enumDesc.getOptions(), enumDesc.getName());
-        if (enumValue.equals(jsonElement.getAsString())) {
-          return enumDesc;
-        }
-      }
-      throw new IllegalArgumentException(
-          String.format("Unrecognized enum name: %s", jsonElement.getAsString()));
-    } else {
-      // With enum value
-      EnumValueDescriptor fieldValue = desc.findValueByNumber(jsonElement.getAsInt());
-      if (fieldValue == null) {
-        throw new IllegalArgumentException(
-            String.format("Unrecognized enum value: %s", jsonElement.getAsInt()));
-      }
-      return fieldValue;
-    }
-  }
-
-  private static Method getCachedMethod(Class<?> clazz, String methodName,
-      Class<?>... methodParamTypes) throws NoSuchMethodException {
-    Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);
-    if (mapOfMethods == null) {
-      mapOfMethods = new MapMaker().makeMap();
-      Map<Class<?>, Method> previous =
-          mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);
-      mapOfMethods = previous == null ? mapOfMethods : previous;
-    }
-
-    Method method = mapOfMethods.get(clazz);
-    if (method == null) {
-      method = clazz.getMethod(methodName, methodParamTypes);
-      mapOfMethods.putIfAbsent(clazz, method);
-      // NB: it doesn't matter which method we return in the event of a race.
-    }
-    return method;
-  }
-
-}
diff --git a/proto/src/main/protobuf/annotations.proto b/proto/src/main/protobuf/annotations.proto
deleted file mode 100644
index 53b727a66..000000000
--- a/proto/src/main/protobuf/annotations.proto
+++ /dev/null
@@ -1,32 +0,0 @@
-//
-// Copyright (C) 2010 Google Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-//
-
-syntax = "proto2";
-
-package google.gson.protobuf.generated;
-option java_package = "com.google.gson.protobuf.generated";
-
-import "google/protobuf/descriptor.proto";
-
-extend google.protobuf.FieldOptions {
-  // Indicates a field name that overrides the default for serialization
-  optional string serialized_name = 92066888;
-}
-
-extend google.protobuf.EnumValueOptions {
-  // Indicates a field value that overrides the default for serialization
-  optional string serialized_value = 92066888;
-}
diff --git a/proto/src/main/protobuf/bag.proto b/proto/src/main/protobuf/bag.proto
deleted file mode 100644
index 26189a24f..000000000
--- a/proto/src/main/protobuf/bag.proto
+++ /dev/null
@@ -1,65 +0,0 @@
-//
-// Copyright (C) 2010 Google Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-//
-
-package google.gson.protobuf.generated;
-option java_package = "com.google.gson.protobuf.generated";
-
-import "annotations.proto";
-
-message SimpleProto {
-  optional string msg = 1;
-  optional int32 count = 2;
-}
-
-message ProtoWithRepeatedFields {
-  repeated int64 numbers = 1;
-  repeated SimpleProto simples = 2;
-  optional string name = 3;
-}
-
-// -- A more complex message with annotations and nested protos
-
-message OuterMessage {
-  optional int32 month = 1;
-  optional int32 year = 2;
-  optional int64 long_timestamp = 3 [(serialized_name) = "timeStamp"];
-  optional string country_code_5f55 = 4;
-}
-
-message ProtoWithAnnotations {
-  optional string id = 1;
-  optional OuterMessage outer_message = 2 [(serialized_name) = "expiration_date"];
-
-  message InnerMessage {
-    optional int32 n__id_ct = 1;
-
-    enum Type {
-      UNKNOWN = 0;
-      TEXT = 1 [(serialized_value) = "text/plain"];
-      IMAGE = 2 [(serialized_value) = "image/png"];
-    }
-    optional Type content = 2;
-
-    message Data {
-      optional string data = 1;
-      optional int32 width = 2;
-      optional int32 height = 3;
-    }
-    repeated Data data = 3 [(serialized_name) = "$binary_data$"];
-  }
-  optional InnerMessage inner_message_1 = 3;
-  optional InnerMessage inner_message_2 = 4;
-}
\ No newline at end of file
diff --git a/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithAnnotationsTest.java b/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithAnnotationsTest.java
deleted file mode 100644
index 2bb6f183a..000000000
--- a/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithAnnotationsTest.java
+++ /dev/null
@@ -1,227 +0,0 @@
-/*
- * Copyright (C) 2010 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.protobuf.functional;
-
-import static com.google.common.truth.Truth.assertThat;
-import static com.google.common.truth.Truth.assert_;
-
-import com.google.common.base.CaseFormat;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonParseException;
-import com.google.gson.protobuf.ProtoTypeAdapter;
-import com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization;
-import com.google.gson.protobuf.generated.Annotations;
-import com.google.gson.protobuf.generated.Bag.OuterMessage;
-import com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations;
-import com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations.InnerMessage;
-import com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations.InnerMessage.Data;
-import com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations.InnerMessage.Type;
-import com.google.protobuf.GeneratedMessage;
-
-import junit.framework.TestCase;
-
-/**
- * Functional tests for protocol buffers using annotations for field names and enum values.
- *
- * @author Emmanuel Cron
- */
-public class ProtosWithAnnotationsTest extends TestCase {
-  private Gson gson;
-  private Gson gsonWithEnumNumbers;
-  private Gson gsonWithLowerHyphen;
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    ProtoTypeAdapter.Builder protoTypeAdapter = ProtoTypeAdapter.newBuilder()
-        .setEnumSerialization(EnumSerialization.NAME)
-        .addSerializedNameExtension(Annotations.serializedName)
-        .addSerializedEnumValueExtension(Annotations.serializedValue);
-    gson = new GsonBuilder()
-        .registerTypeHierarchyAdapter(GeneratedMessage.class, protoTypeAdapter.build())
-        .create();
-    gsonWithEnumNumbers = new GsonBuilder()
-        .registerTypeHierarchyAdapter(GeneratedMessage.class, protoTypeAdapter
-            .setEnumSerialization(EnumSerialization.NUMBER)
-            .build())
-        .create();
-    gsonWithLowerHyphen = new GsonBuilder()
-        .registerTypeHierarchyAdapter(GeneratedMessage.class, protoTypeAdapter
-            .setFieldNameSerializationFormat(CaseFormat.LOWER_UNDERSCORE, CaseFormat.LOWER_HYPHEN)
-            .build())
-        .create();
-  }
-
-  public void testProtoWithAnnotations_deserialize() {
-    String json = String.format("{  %n"
-        + "   \"id\":\"41e5e7fd6065d101b97018a465ffff01\",%n"
-        + "   \"expiration_date\":{  %n"
-        + "      \"month\":\"12\",%n"
-        + "      \"year\":\"2017\",%n"
-        + "      \"timeStamp\":\"9864653135687\",%n"
-        + "      \"countryCode5f55\":\"en_US\"%n"
-        + "   },%n"
-        // Don't define innerMessage1
-        + "   \"innerMessage2\":{  %n"
-        // Set a number as a string; it should work
-        + "      \"nIdCt\":\"98798465\",%n"
-        + "      \"content\":\"text/plain\",%n"
-        + "      \"$binary_data$\":[  %n"
-        + "         {  %n"
-        + "            \"data\":\"OFIN8e9fhwoeh8((⁹8efywoih\",%n"
-        // Don't define width
-        + "            \"height\":665%n"
-        + "         },%n"
-        + "         {  %n"
-        // Define as an int; it should work
-        + "            \"data\":65,%n"
-        + "            \"width\":-56684%n"
-        // Don't define height
-        + "         }%n"
-        + "      ]%n"
-        + "   },%n"
-        // Define a bunch of non recognizable data
-        + "   \"non_existing\":\"foobar\",%n"
-        + "   \"stillNot\":{  %n"
-        + "      \"bunch\":\"of_useless data\"%n"
-        + "   }%n"
-        + "}");
-    ProtoWithAnnotations proto = gson.fromJson(json, ProtoWithAnnotations.class);
-    assertThat(proto.getId()).isEqualTo("41e5e7fd6065d101b97018a465ffff01");
-    assertThat(proto.getOuterMessage()).isEqualTo(OuterMessage.newBuilder()
-        .setMonth(12)
-        .setYear(2017)
-        .setLongTimestamp(9864653135687L)
-        .setCountryCode5F55("en_US")
-        .build());
-    assertThat(proto.hasInnerMessage1()).isFalse();
-    assertThat(proto.getInnerMessage2()).isEqualTo(InnerMessage.newBuilder()
-        .setNIdCt(98798465)
-        .setContent(Type.TEXT)
-        .addData(Data.newBuilder()
-            .setData("OFIN8e9fhwoeh8((⁹8efywoih")
-            .setHeight(665))
-        .addData(Data.newBuilder()
-            .setData("65")
-            .setWidth(-56684))
-        .build());
-
-    String rebuilt = gson.toJson(proto);
-    assertThat(rebuilt).isEqualTo("{"
-        + "\"id\":\"41e5e7fd6065d101b97018a465ffff01\","
-        + "\"expiration_date\":{"
-        + "\"month\":12,"
-        + "\"year\":2017,"
-        + "\"timeStamp\":9864653135687,"
-        + "\"countryCode5f55\":\"en_US\""
-        + "},"
-        + "\"innerMessage2\":{"
-        + "\"nIdCt\":98798465,"
-        + "\"content\":\"text/plain\","
-        + "\"$binary_data$\":["
-        + "{"
-        + "\"data\":\"OFIN8e9fhwoeh8((⁹8efywoih\","
-        + "\"height\":665"
-        + "},"
-        + "{"
-        + "\"data\":\"65\","
-        + "\"width\":-56684"
-        + "}]}}");
-  }
-
-  public void testProtoWithAnnotations_deserializeUnknownEnumValue() {
-    String json = String.format("{  %n"
-        + "   \"content\":\"UNKNOWN\"%n"
-        + "}");
-    InnerMessage proto = gson.fromJson(json, InnerMessage.class);
-    assertThat(proto.getContent()).isEqualTo(Type.UNKNOWN);
-  }
-
-  public void testProtoWithAnnotations_deserializeUnrecognizedEnumValue() {
-    String json = String.format("{  %n"
-        + "   \"content\":\"UNRECOGNIZED\"%n"
-        + "}");
-    try {
-      gson.fromJson(json, InnerMessage.class);
-      assert_().fail("Should have thrown");
-    } catch (JsonParseException e) {
-      // expected
-    }
-  }
-
-  public void testProtoWithAnnotations_deserializeWithEnumNumbers() {
-    String json = String.format("{  %n"
-        + "   \"content\":\"0\"%n"
-        + "}");
-    InnerMessage proto = gsonWithEnumNumbers.fromJson(json, InnerMessage.class);
-    assertThat(proto.getContent()).isEqualTo(Type.UNKNOWN);
-    String rebuilt = gsonWithEnumNumbers.toJson(proto);
-    assertThat(rebuilt).isEqualTo("{\"content\":0}");
-
-    json = String.format("{  %n"
-        + "   \"content\":\"2\"%n"
-        + "}");
-    proto = gsonWithEnumNumbers.fromJson(json, InnerMessage.class);
-    assertThat(proto.getContent()).isEqualTo(Type.IMAGE);
-    rebuilt = gsonWithEnumNumbers.toJson(proto);
-    assertThat(rebuilt).isEqualTo("{\"content\":2}");
-  }
-
-  public void testProtoWithAnnotations_serialize() {
-    ProtoWithAnnotations proto = ProtoWithAnnotations.newBuilder()
-        .setId("09f3j20839h032y0329hf30932h0nffn")
-        .setOuterMessage(OuterMessage.newBuilder()
-            .setMonth(14)
-            .setYear(6650)
-            .setLongTimestamp(468406876880768L))
-        .setInnerMessage1(InnerMessage.newBuilder()
-            .setNIdCt(12)
-            .setContent(Type.IMAGE)
-            .addData(Data.newBuilder()
-                .setData("data$$")
-                .setWidth(200))
-            .addData(Data.newBuilder()
-                .setHeight(56)))
-        .build();
-
-    String json = gsonWithLowerHyphen.toJson(proto);
-    assertThat(json).isEqualTo(
-        "{\"id\":\"09f3j20839h032y0329hf30932h0nffn\","
-        + "\"expiration_date\":{"
-            + "\"month\":14,"
-            + "\"year\":6650,"
-            + "\"timeStamp\":468406876880768"
-        + "},"
-        // This field should be using hyphens
-        + "\"inner-message-1\":{"
-            + "\"n--id-ct\":12,"
-            + "\"content\":2,"
-            + "\"$binary_data$\":["
-              + "{"
-                  + "\"data\":\"data$$\","
-                  + "\"width\":200"
-              + "},"
-              + "{"
-                  + "\"height\":56"
-              + "}]"
-            + "}"
-        + "}");
-
-    ProtoWithAnnotations rebuilt = gsonWithLowerHyphen.fromJson(json, ProtoWithAnnotations.class);
-    assertThat(rebuilt).isEqualTo(proto);
-  }
-}
diff --git a/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithComplexAndRepeatedFieldsTest.java b/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithComplexAndRepeatedFieldsTest.java
deleted file mode 100644
index 964549d6b..000000000
--- a/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithComplexAndRepeatedFieldsTest.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Copyright (C) 2010 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.protobuf.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.protobuf.ProtoTypeAdapter;
-import com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization;
-import com.google.gson.protobuf.generated.Bag.ProtoWithRepeatedFields;
-import com.google.gson.protobuf.generated.Bag.SimpleProto;
-import com.google.protobuf.GeneratedMessage;
-
-import junit.framework.TestCase;
-
-/**
- * Functional tests for protocol buffers using complex and repeated fields
- *
- * @author Inderjeet Singh
- */
-public class ProtosWithComplexAndRepeatedFieldsTest extends TestCase {
-  private Gson gson;
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    gson =
-        new GsonBuilder()
-            .registerTypeHierarchyAdapter(GeneratedMessage.class,
-                ProtoTypeAdapter.newBuilder()
-                    .setEnumSerialization(EnumSerialization.NUMBER)
-                    .build())
-            .create();
-  }
-
-  public void testSerializeRepeatedFields() {
-    ProtoWithRepeatedFields proto = ProtoWithRepeatedFields.newBuilder()
-      .addNumbers(2)
-      .addNumbers(3)
-      .addSimples(SimpleProto.newBuilder().setMsg("foo").build())
-      .addSimples(SimpleProto.newBuilder().setCount(3).build())
-      .build();
-    String json = gson.toJson(proto);
-    assertTrue(json.contains("[2,3]"));
-    assertTrue(json.contains("foo"));
-    assertTrue(json.contains("count"));
-  }
-
-  public void testDeserializeRepeatedFieldsProto() {
-    String json = "{numbers:[4,6],simples:[{msg:'bar'},{count:7}]}";
-    ProtoWithRepeatedFields proto =
-      gson.fromJson(json, ProtoWithRepeatedFields.class);
-    assertEquals(4, proto.getNumbers(0));
-    assertEquals(6, proto.getNumbers(1));
-    assertEquals("bar", proto.getSimples(0).getMsg());
-    assertEquals(7, proto.getSimples(1).getCount());
-  }
-}
diff --git a/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java b/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java
deleted file mode 100644
index 69b877e60..000000000
--- a/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * Copyright (C) 2010 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.gson.protobuf.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.protobuf.ProtoTypeAdapter;
-import com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization;
-import com.google.gson.protobuf.generated.Bag.SimpleProto;
-import com.google.protobuf.Descriptors.Descriptor;
-import com.google.protobuf.GeneratedMessage;
-
-import junit.framework.TestCase;
-
-public class ProtosWithPrimitiveTypesTest extends TestCase {
-  private Gson gson;
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    gson = new GsonBuilder().registerTypeHierarchyAdapter(
-      GeneratedMessage.class, ProtoTypeAdapter.newBuilder()
-          .setEnumSerialization(EnumSerialization.NUMBER)
-          .build())
-      .create();
-  }
-
-  public void testSerializeEmptyProto() {
-    SimpleProto proto = SimpleProto.newBuilder().build();
-    String json = gson.toJson(proto);
-    assertEquals("{}", json);
-  }
-
-  public void testDeserializeEmptyProto() {
-    SimpleProto proto = gson.fromJson("{}", SimpleProto.class);
-    assertFalse(proto.hasCount());
-    assertFalse(proto.hasMsg());
-  }
-
-  public void testSerializeProto() {
-    Descriptor descriptor = SimpleProto.getDescriptor();
-    SimpleProto proto = SimpleProto.newBuilder()
-      .setCount(3)
-      .setMsg("foo")
-      .build();
-    String json = gson.toJson(proto);
-    assertTrue(json.contains("\"msg\":\"foo\""));
-    assertTrue(json.contains("\"count\":3"));
-  }
-
-  public void testDeserializeProto() {
-    SimpleProto proto = gson.fromJson("{msg:'foo',count:3}", SimpleProto.class);
-    assertEquals("foo", proto.getMsg());
-    assertEquals(3, proto.getCount());
-  }
-
-  public void testDeserializeWithExplicitNullValue() {
-    SimpleProto proto = gson.fromJson("{msg:'foo',count:null}", SimpleProto.class);
-    assertEquals("foo", proto.getMsg());
-    assertEquals(0, proto.getCount());
-  }
-
-}
diff --git a/gson/src/main/java/com/economic/persistgson/DefaultDateTypeAdapter.java b/src/main/java/com/economic/persistgson/DefaultDateTypeAdapter.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/DefaultDateTypeAdapter.java
rename to src/main/java/com/economic/persistgson/DefaultDateTypeAdapter.java
diff --git a/gson/src/main/java/com/economic/persistgson/ExclusionStrategy.java b/src/main/java/com/economic/persistgson/ExclusionStrategy.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/ExclusionStrategy.java
rename to src/main/java/com/economic/persistgson/ExclusionStrategy.java
diff --git a/gson/src/main/java/com/economic/persistgson/FieldAttributes.java b/src/main/java/com/economic/persistgson/FieldAttributes.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/FieldAttributes.java
rename to src/main/java/com/economic/persistgson/FieldAttributes.java
diff --git a/gson/src/main/java/com/economic/persistgson/FieldNamingPolicy.java b/src/main/java/com/economic/persistgson/FieldNamingPolicy.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/FieldNamingPolicy.java
rename to src/main/java/com/economic/persistgson/FieldNamingPolicy.java
diff --git a/gson/src/main/java/com/economic/persistgson/FieldNamingStrategy.java b/src/main/java/com/economic/persistgson/FieldNamingStrategy.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/FieldNamingStrategy.java
rename to src/main/java/com/economic/persistgson/FieldNamingStrategy.java
diff --git a/gson/src/main/java/com/economic/persistgson/Gson.java b/src/main/java/com/economic/persistgson/Gson.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/Gson.java
rename to src/main/java/com/economic/persistgson/Gson.java
diff --git a/gson/src/main/java/com/economic/persistgson/GsonBuilder.java b/src/main/java/com/economic/persistgson/GsonBuilder.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/GsonBuilder.java
rename to src/main/java/com/economic/persistgson/GsonBuilder.java
diff --git a/gson/src/main/java/com/economic/persistgson/InstanceCreator.java b/src/main/java/com/economic/persistgson/InstanceCreator.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/InstanceCreator.java
rename to src/main/java/com/economic/persistgson/InstanceCreator.java
diff --git a/gson/src/main/java/com/economic/persistgson/JsonArray.java b/src/main/java/com/economic/persistgson/JsonArray.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/JsonArray.java
rename to src/main/java/com/economic/persistgson/JsonArray.java
diff --git a/gson/src/main/java/com/economic/persistgson/JsonDeserializationContext.java b/src/main/java/com/economic/persistgson/JsonDeserializationContext.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/JsonDeserializationContext.java
rename to src/main/java/com/economic/persistgson/JsonDeserializationContext.java
diff --git a/gson/src/main/java/com/economic/persistgson/JsonDeserializer.java b/src/main/java/com/economic/persistgson/JsonDeserializer.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/JsonDeserializer.java
rename to src/main/java/com/economic/persistgson/JsonDeserializer.java
diff --git a/gson/src/main/java/com/economic/persistgson/JsonElement.java b/src/main/java/com/economic/persistgson/JsonElement.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/JsonElement.java
rename to src/main/java/com/economic/persistgson/JsonElement.java
diff --git a/gson/src/main/java/com/economic/persistgson/JsonIOException.java b/src/main/java/com/economic/persistgson/JsonIOException.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/JsonIOException.java
rename to src/main/java/com/economic/persistgson/JsonIOException.java
diff --git a/gson/src/main/java/com/economic/persistgson/JsonNull.java b/src/main/java/com/economic/persistgson/JsonNull.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/JsonNull.java
rename to src/main/java/com/economic/persistgson/JsonNull.java
diff --git a/gson/src/main/java/com/economic/persistgson/JsonObject.java b/src/main/java/com/economic/persistgson/JsonObject.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/JsonObject.java
rename to src/main/java/com/economic/persistgson/JsonObject.java
diff --git a/gson/src/main/java/com/economic/persistgson/JsonParseException.java b/src/main/java/com/economic/persistgson/JsonParseException.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/JsonParseException.java
rename to src/main/java/com/economic/persistgson/JsonParseException.java
diff --git a/gson/src/main/java/com/economic/persistgson/JsonParser.java b/src/main/java/com/economic/persistgson/JsonParser.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/JsonParser.java
rename to src/main/java/com/economic/persistgson/JsonParser.java
diff --git a/gson/src/main/java/com/economic/persistgson/JsonPrimitive.java b/src/main/java/com/economic/persistgson/JsonPrimitive.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/JsonPrimitive.java
rename to src/main/java/com/economic/persistgson/JsonPrimitive.java
diff --git a/gson/src/main/java/com/economic/persistgson/JsonSerializationContext.java b/src/main/java/com/economic/persistgson/JsonSerializationContext.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/JsonSerializationContext.java
rename to src/main/java/com/economic/persistgson/JsonSerializationContext.java
diff --git a/gson/src/main/java/com/economic/persistgson/JsonSerializer.java b/src/main/java/com/economic/persistgson/JsonSerializer.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/JsonSerializer.java
rename to src/main/java/com/economic/persistgson/JsonSerializer.java
diff --git a/gson/src/main/java/com/economic/persistgson/JsonStreamParser.java b/src/main/java/com/economic/persistgson/JsonStreamParser.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/JsonStreamParser.java
rename to src/main/java/com/economic/persistgson/JsonStreamParser.java
diff --git a/gson/src/main/java/com/economic/persistgson/JsonSyntaxException.java b/src/main/java/com/economic/persistgson/JsonSyntaxException.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/JsonSyntaxException.java
rename to src/main/java/com/economic/persistgson/JsonSyntaxException.java
diff --git a/gson/src/main/java/com/economic/persistgson/LongSerializationPolicy.java b/src/main/java/com/economic/persistgson/LongSerializationPolicy.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/LongSerializationPolicy.java
rename to src/main/java/com/economic/persistgson/LongSerializationPolicy.java
diff --git a/gson/src/main/java/com/economic/persistgson/TypeAdapter.java b/src/main/java/com/economic/persistgson/TypeAdapter.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/TypeAdapter.java
rename to src/main/java/com/economic/persistgson/TypeAdapter.java
diff --git a/gson/src/main/java/com/economic/persistgson/TypeAdapterFactory.java b/src/main/java/com/economic/persistgson/TypeAdapterFactory.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/TypeAdapterFactory.java
rename to src/main/java/com/economic/persistgson/TypeAdapterFactory.java
diff --git a/gson/src/main/java/com/economic/persistgson/annotations/Expose.java b/src/main/java/com/economic/persistgson/annotations/Expose.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/annotations/Expose.java
rename to src/main/java/com/economic/persistgson/annotations/Expose.java
diff --git a/gson/src/main/java/com/economic/persistgson/annotations/JsonAdapter.java b/src/main/java/com/economic/persistgson/annotations/JsonAdapter.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/annotations/JsonAdapter.java
rename to src/main/java/com/economic/persistgson/annotations/JsonAdapter.java
diff --git a/gson/src/main/java/com/economic/persistgson/annotations/SerializedName.java b/src/main/java/com/economic/persistgson/annotations/SerializedName.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/annotations/SerializedName.java
rename to src/main/java/com/economic/persistgson/annotations/SerializedName.java
diff --git a/gson/src/main/java/com/economic/persistgson/annotations/Since.java b/src/main/java/com/economic/persistgson/annotations/Since.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/annotations/Since.java
rename to src/main/java/com/economic/persistgson/annotations/Since.java
diff --git a/gson/src/main/java/com/economic/persistgson/annotations/Until.java b/src/main/java/com/economic/persistgson/annotations/Until.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/annotations/Until.java
rename to src/main/java/com/economic/persistgson/annotations/Until.java
diff --git a/gson/src/main/java/com/economic/persistgson/annotations/package-info.java b/src/main/java/com/economic/persistgson/annotations/package-info.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/annotations/package-info.java
rename to src/main/java/com/economic/persistgson/annotations/package-info.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/$Gson$Preconditions.java b/src/main/java/com/economic/persistgson/internal/$Gson$Preconditions.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/$Gson$Preconditions.java
rename to src/main/java/com/economic/persistgson/internal/$Gson$Preconditions.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/$Gson$Types.java b/src/main/java/com/economic/persistgson/internal/$Gson$Types.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/$Gson$Types.java
rename to src/main/java/com/economic/persistgson/internal/$Gson$Types.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/ConstructorConstructor.java b/src/main/java/com/economic/persistgson/internal/ConstructorConstructor.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/ConstructorConstructor.java
rename to src/main/java/com/economic/persistgson/internal/ConstructorConstructor.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/Excluder.java b/src/main/java/com/economic/persistgson/internal/Excluder.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/Excluder.java
rename to src/main/java/com/economic/persistgson/internal/Excluder.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/JsonReaderInternalAccess.java b/src/main/java/com/economic/persistgson/internal/JsonReaderInternalAccess.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/JsonReaderInternalAccess.java
rename to src/main/java/com/economic/persistgson/internal/JsonReaderInternalAccess.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/LazilyParsedNumber.java b/src/main/java/com/economic/persistgson/internal/LazilyParsedNumber.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/LazilyParsedNumber.java
rename to src/main/java/com/economic/persistgson/internal/LazilyParsedNumber.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/LinkedHashTreeMap.java b/src/main/java/com/economic/persistgson/internal/LinkedHashTreeMap.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/LinkedHashTreeMap.java
rename to src/main/java/com/economic/persistgson/internal/LinkedHashTreeMap.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/LinkedTreeMap.java b/src/main/java/com/economic/persistgson/internal/LinkedTreeMap.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/LinkedTreeMap.java
rename to src/main/java/com/economic/persistgson/internal/LinkedTreeMap.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/ObjectConstructor.java b/src/main/java/com/economic/persistgson/internal/ObjectConstructor.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/ObjectConstructor.java
rename to src/main/java/com/economic/persistgson/internal/ObjectConstructor.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/Primitives.java b/src/main/java/com/economic/persistgson/internal/Primitives.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/Primitives.java
rename to src/main/java/com/economic/persistgson/internal/Primitives.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/Streams.java b/src/main/java/com/economic/persistgson/internal/Streams.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/Streams.java
rename to src/main/java/com/economic/persistgson/internal/Streams.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/UnsafeAllocator.java b/src/main/java/com/economic/persistgson/internal/UnsafeAllocator.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/UnsafeAllocator.java
rename to src/main/java/com/economic/persistgson/internal/UnsafeAllocator.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/ArrayTypeAdapter.java b/src/main/java/com/economic/persistgson/internal/bind/ArrayTypeAdapter.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/bind/ArrayTypeAdapter.java
rename to src/main/java/com/economic/persistgson/internal/bind/ArrayTypeAdapter.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/CollectionTypeAdapterFactory.java b/src/main/java/com/economic/persistgson/internal/bind/CollectionTypeAdapterFactory.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/bind/CollectionTypeAdapterFactory.java
rename to src/main/java/com/economic/persistgson/internal/bind/CollectionTypeAdapterFactory.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/DateTypeAdapter.java b/src/main/java/com/economic/persistgson/internal/bind/DateTypeAdapter.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/bind/DateTypeAdapter.java
rename to src/main/java/com/economic/persistgson/internal/bind/DateTypeAdapter.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java b/src/main/java/com/economic/persistgson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
rename to src/main/java/com/economic/persistgson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/JsonTreeReader.java b/src/main/java/com/economic/persistgson/internal/bind/JsonTreeReader.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/bind/JsonTreeReader.java
rename to src/main/java/com/economic/persistgson/internal/bind/JsonTreeReader.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/JsonTreeWriter.java b/src/main/java/com/economic/persistgson/internal/bind/JsonTreeWriter.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/bind/JsonTreeWriter.java
rename to src/main/java/com/economic/persistgson/internal/bind/JsonTreeWriter.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/MapTypeAdapterFactory.java b/src/main/java/com/economic/persistgson/internal/bind/MapTypeAdapterFactory.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/bind/MapTypeAdapterFactory.java
rename to src/main/java/com/economic/persistgson/internal/bind/MapTypeAdapterFactory.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/ObjectTypeAdapter.java b/src/main/java/com/economic/persistgson/internal/bind/ObjectTypeAdapter.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/bind/ObjectTypeAdapter.java
rename to src/main/java/com/economic/persistgson/internal/bind/ObjectTypeAdapter.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/ReflectiveTypeAdapterFactory.java b/src/main/java/com/economic/persistgson/internal/bind/ReflectiveTypeAdapterFactory.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/bind/ReflectiveTypeAdapterFactory.java
rename to src/main/java/com/economic/persistgson/internal/bind/ReflectiveTypeAdapterFactory.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/SqlDateTypeAdapter.java b/src/main/java/com/economic/persistgson/internal/bind/SqlDateTypeAdapter.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/bind/SqlDateTypeAdapter.java
rename to src/main/java/com/economic/persistgson/internal/bind/SqlDateTypeAdapter.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/TimeTypeAdapter.java b/src/main/java/com/economic/persistgson/internal/bind/TimeTypeAdapter.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/bind/TimeTypeAdapter.java
rename to src/main/java/com/economic/persistgson/internal/bind/TimeTypeAdapter.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/TreeTypeAdapter.java b/src/main/java/com/economic/persistgson/internal/bind/TreeTypeAdapter.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/bind/TreeTypeAdapter.java
rename to src/main/java/com/economic/persistgson/internal/bind/TreeTypeAdapter.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/TypeAdapterRuntimeTypeWrapper.java b/src/main/java/com/economic/persistgson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
rename to src/main/java/com/economic/persistgson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/TypeAdapters.java b/src/main/java/com/economic/persistgson/internal/bind/TypeAdapters.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/bind/TypeAdapters.java
rename to src/main/java/com/economic/persistgson/internal/bind/TypeAdapters.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/util/ISO8601Utils.java b/src/main/java/com/economic/persistgson/internal/bind/util/ISO8601Utils.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/bind/util/ISO8601Utils.java
rename to src/main/java/com/economic/persistgson/internal/bind/util/ISO8601Utils.java
diff --git a/gson/src/main/java/com/economic/persistgson/internal/package-info.java b/src/main/java/com/economic/persistgson/internal/package-info.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/internal/package-info.java
rename to src/main/java/com/economic/persistgson/internal/package-info.java
diff --git a/gson/src/main/java/com/economic/persistgson/package-info.java b/src/main/java/com/economic/persistgson/package-info.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/package-info.java
rename to src/main/java/com/economic/persistgson/package-info.java
diff --git a/gson/src/main/java/com/economic/persistgson/persist/PersistObject.kt b/src/main/java/com/economic/persistgson/persist/PersistObject.kt
similarity index 88%
rename from gson/src/main/java/com/economic/persistgson/persist/PersistObject.kt
rename to src/main/java/com/economic/persistgson/persist/PersistObject.kt
index 7668ecfa6..5c7fb68ce 100644
--- a/gson/src/main/java/com/economic/persistgson/persist/PersistObject.kt
+++ b/src/main/java/com/economic/persistgson/persist/PersistObject.kt
@@ -1,6 +1,5 @@
 package com.economic.persistgson.persist
 
-import java.util.HashMap
 
 /**
  * Created by Tudor Dragan on 03/05/2017.
diff --git a/gson/src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.kt b/src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.kt
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.kt
rename to src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.kt
diff --git a/gson/src/main/java/com/economic/persistgson/reflect/TypeToken.java b/src/main/java/com/economic/persistgson/reflect/TypeToken.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/reflect/TypeToken.java
rename to src/main/java/com/economic/persistgson/reflect/TypeToken.java
diff --git a/gson/src/main/java/com/economic/persistgson/reflect/package-info.java b/src/main/java/com/economic/persistgson/reflect/package-info.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/reflect/package-info.java
rename to src/main/java/com/economic/persistgson/reflect/package-info.java
diff --git a/gson/src/main/java/com/economic/persistgson/stream/JsonReader.java b/src/main/java/com/economic/persistgson/stream/JsonReader.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/stream/JsonReader.java
rename to src/main/java/com/economic/persistgson/stream/JsonReader.java
diff --git a/gson/src/main/java/com/economic/persistgson/stream/JsonScope.java b/src/main/java/com/economic/persistgson/stream/JsonScope.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/stream/JsonScope.java
rename to src/main/java/com/economic/persistgson/stream/JsonScope.java
diff --git a/gson/src/main/java/com/economic/persistgson/stream/JsonToken.java b/src/main/java/com/economic/persistgson/stream/JsonToken.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/stream/JsonToken.java
rename to src/main/java/com/economic/persistgson/stream/JsonToken.java
diff --git a/gson/src/main/java/com/economic/persistgson/stream/JsonWriter.java b/src/main/java/com/economic/persistgson/stream/JsonWriter.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/stream/JsonWriter.java
rename to src/main/java/com/economic/persistgson/stream/JsonWriter.java
diff --git a/gson/src/main/java/com/economic/persistgson/stream/MalformedJsonException.java b/src/main/java/com/economic/persistgson/stream/MalformedJsonException.java
similarity index 100%
rename from gson/src/main/java/com/economic/persistgson/stream/MalformedJsonException.java
rename to src/main/java/com/economic/persistgson/stream/MalformedJsonException.java
diff --git a/gson/src/test/java/com/economic/persistgson/CommentsTest.java b/src/test/java/com/economic/persistgson/CommentsTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/CommentsTest.java
rename to src/test/java/com/economic/persistgson/CommentsTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/DefaultDateTypeAdapterTest.java b/src/test/java/com/economic/persistgson/DefaultDateTypeAdapterTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/DefaultDateTypeAdapterTest.java
rename to src/test/java/com/economic/persistgson/DefaultDateTypeAdapterTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/DefaultInetAddressTypeAdapterTest.java b/src/test/java/com/economic/persistgson/DefaultInetAddressTypeAdapterTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/DefaultInetAddressTypeAdapterTest.java
rename to src/test/java/com/economic/persistgson/DefaultInetAddressTypeAdapterTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/DefaultMapJsonSerializerTest.java b/src/test/java/com/economic/persistgson/DefaultMapJsonSerializerTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/DefaultMapJsonSerializerTest.java
rename to src/test/java/com/economic/persistgson/DefaultMapJsonSerializerTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/ExposeAnnotationExclusionStrategyTest.java b/src/test/java/com/economic/persistgson/ExposeAnnotationExclusionStrategyTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/ExposeAnnotationExclusionStrategyTest.java
rename to src/test/java/com/economic/persistgson/ExposeAnnotationExclusionStrategyTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/FieldAttributesTest.java b/src/test/java/com/economic/persistgson/FieldAttributesTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/FieldAttributesTest.java
rename to src/test/java/com/economic/persistgson/FieldAttributesTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/GenericArrayTypeTest.java b/src/test/java/com/economic/persistgson/GenericArrayTypeTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/GenericArrayTypeTest.java
rename to src/test/java/com/economic/persistgson/GenericArrayTypeTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/GsonBuilderTest.java b/src/test/java/com/economic/persistgson/GsonBuilderTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/GsonBuilderTest.java
rename to src/test/java/com/economic/persistgson/GsonBuilderTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/GsonTest.java b/src/test/java/com/economic/persistgson/GsonTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/GsonTest.java
rename to src/test/java/com/economic/persistgson/GsonTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/GsonTypeAdapterTest.java b/src/test/java/com/economic/persistgson/GsonTypeAdapterTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/GsonTypeAdapterTest.java
rename to src/test/java/com/economic/persistgson/GsonTypeAdapterTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/InnerClassExclusionStrategyTest.java b/src/test/java/com/economic/persistgson/InnerClassExclusionStrategyTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/InnerClassExclusionStrategyTest.java
rename to src/test/java/com/economic/persistgson/InnerClassExclusionStrategyTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/JavaSerializationTest.java b/src/test/java/com/economic/persistgson/JavaSerializationTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/JavaSerializationTest.java
rename to src/test/java/com/economic/persistgson/JavaSerializationTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/JsonArrayTest.java b/src/test/java/com/economic/persistgson/JsonArrayTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/JsonArrayTest.java
rename to src/test/java/com/economic/persistgson/JsonArrayTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/JsonNullTest.java b/src/test/java/com/economic/persistgson/JsonNullTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/JsonNullTest.java
rename to src/test/java/com/economic/persistgson/JsonNullTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/JsonObjectTest.java b/src/test/java/com/economic/persistgson/JsonObjectTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/JsonObjectTest.java
rename to src/test/java/com/economic/persistgson/JsonObjectTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/JsonParserTest.java b/src/test/java/com/economic/persistgson/JsonParserTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/JsonParserTest.java
rename to src/test/java/com/economic/persistgson/JsonParserTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/JsonPrimitiveTest.java b/src/test/java/com/economic/persistgson/JsonPrimitiveTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/JsonPrimitiveTest.java
rename to src/test/java/com/economic/persistgson/JsonPrimitiveTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/JsonStreamParserTest.java b/src/test/java/com/economic/persistgson/JsonStreamParserTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/JsonStreamParserTest.java
rename to src/test/java/com/economic/persistgson/JsonStreamParserTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/LongSerializationPolicyTest.java b/src/test/java/com/economic/persistgson/LongSerializationPolicyTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/LongSerializationPolicyTest.java
rename to src/test/java/com/economic/persistgson/LongSerializationPolicyTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/MixedStreamTest.java b/src/test/java/com/economic/persistgson/MixedStreamTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/MixedStreamTest.java
rename to src/test/java/com/economic/persistgson/MixedStreamTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/MockExclusionStrategy.java b/src/test/java/com/economic/persistgson/MockExclusionStrategy.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/MockExclusionStrategy.java
rename to src/test/java/com/economic/persistgson/MockExclusionStrategy.java
diff --git a/gson/src/test/java/com/economic/persistgson/ObjectTypeAdapterTest.java b/src/test/java/com/economic/persistgson/ObjectTypeAdapterTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/ObjectTypeAdapterTest.java
rename to src/test/java/com/economic/persistgson/ObjectTypeAdapterTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/OverrideCoreTypeAdaptersTest.java b/src/test/java/com/economic/persistgson/OverrideCoreTypeAdaptersTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/OverrideCoreTypeAdaptersTest.java
rename to src/test/java/com/economic/persistgson/OverrideCoreTypeAdaptersTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/ParameterizedTypeFixtures.java b/src/test/java/com/economic/persistgson/ParameterizedTypeFixtures.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/ParameterizedTypeFixtures.java
rename to src/test/java/com/economic/persistgson/ParameterizedTypeFixtures.java
diff --git a/gson/src/test/java/com/economic/persistgson/ParameterizedTypeTest.java b/src/test/java/com/economic/persistgson/ParameterizedTypeTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/ParameterizedTypeTest.java
rename to src/test/java/com/economic/persistgson/ParameterizedTypeTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/PrimitiveTypeAdapter.java b/src/test/java/com/economic/persistgson/PrimitiveTypeAdapter.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/PrimitiveTypeAdapter.java
rename to src/test/java/com/economic/persistgson/PrimitiveTypeAdapter.java
diff --git a/gson/src/test/java/com/economic/persistgson/VersionExclusionStrategyTest.java b/src/test/java/com/economic/persistgson/VersionExclusionStrategyTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/VersionExclusionStrategyTest.java
rename to src/test/java/com/economic/persistgson/VersionExclusionStrategyTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/common/MoreAsserts.java b/src/test/java/com/economic/persistgson/common/MoreAsserts.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/common/MoreAsserts.java
rename to src/test/java/com/economic/persistgson/common/MoreAsserts.java
diff --git a/gson/src/test/java/com/economic/persistgson/common/TestTypes.java b/src/test/java/com/economic/persistgson/common/TestTypes.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/common/TestTypes.java
rename to src/test/java/com/economic/persistgson/common/TestTypes.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/ArrayTest.java b/src/test/java/com/economic/persistgson/functional/ArrayTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/ArrayTest.java
rename to src/test/java/com/economic/persistgson/functional/ArrayTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/CircularReferenceTest.java b/src/test/java/com/economic/persistgson/functional/CircularReferenceTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/CircularReferenceTest.java
rename to src/test/java/com/economic/persistgson/functional/CircularReferenceTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/CollectionTest.java b/src/test/java/com/economic/persistgson/functional/CollectionTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/CollectionTest.java
rename to src/test/java/com/economic/persistgson/functional/CollectionTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/ConcurrencyTest.java b/src/test/java/com/economic/persistgson/functional/ConcurrencyTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/ConcurrencyTest.java
rename to src/test/java/com/economic/persistgson/functional/ConcurrencyTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/CustomDeserializerTest.java b/src/test/java/com/economic/persistgson/functional/CustomDeserializerTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/CustomDeserializerTest.java
rename to src/test/java/com/economic/persistgson/functional/CustomDeserializerTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/CustomSerializerTest.java b/src/test/java/com/economic/persistgson/functional/CustomSerializerTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/CustomSerializerTest.java
rename to src/test/java/com/economic/persistgson/functional/CustomSerializerTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/CustomTypeAdaptersTest.java b/src/test/java/com/economic/persistgson/functional/CustomTypeAdaptersTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/CustomTypeAdaptersTest.java
rename to src/test/java/com/economic/persistgson/functional/CustomTypeAdaptersTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/DefaultTypeAdaptersTest.java b/src/test/java/com/economic/persistgson/functional/DefaultTypeAdaptersTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/DefaultTypeAdaptersTest.java
rename to src/test/java/com/economic/persistgson/functional/DefaultTypeAdaptersTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/DelegateTypeAdapterTest.java b/src/test/java/com/economic/persistgson/functional/DelegateTypeAdapterTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/DelegateTypeAdapterTest.java
rename to src/test/java/com/economic/persistgson/functional/DelegateTypeAdapterTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/EnumTest.java b/src/test/java/com/economic/persistgson/functional/EnumTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/EnumTest.java
rename to src/test/java/com/economic/persistgson/functional/EnumTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/EscapingTest.java b/src/test/java/com/economic/persistgson/functional/EscapingTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/EscapingTest.java
rename to src/test/java/com/economic/persistgson/functional/EscapingTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/ExclusionStrategyFunctionalTest.java b/src/test/java/com/economic/persistgson/functional/ExclusionStrategyFunctionalTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/ExclusionStrategyFunctionalTest.java
rename to src/test/java/com/economic/persistgson/functional/ExclusionStrategyFunctionalTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/ExposeFieldsTest.java b/src/test/java/com/economic/persistgson/functional/ExposeFieldsTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/ExposeFieldsTest.java
rename to src/test/java/com/economic/persistgson/functional/ExposeFieldsTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/FieldExclusionTest.java b/src/test/java/com/economic/persistgson/functional/FieldExclusionTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/FieldExclusionTest.java
rename to src/test/java/com/economic/persistgson/functional/FieldExclusionTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/FieldNamingTest.java b/src/test/java/com/economic/persistgson/functional/FieldNamingTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/FieldNamingTest.java
rename to src/test/java/com/economic/persistgson/functional/FieldNamingTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/InheritanceTest.java b/src/test/java/com/economic/persistgson/functional/InheritanceTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/InheritanceTest.java
rename to src/test/java/com/economic/persistgson/functional/InheritanceTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/InstanceCreatorTest.java b/src/test/java/com/economic/persistgson/functional/InstanceCreatorTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/InstanceCreatorTest.java
rename to src/test/java/com/economic/persistgson/functional/InstanceCreatorTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/InterfaceTest.java b/src/test/java/com/economic/persistgson/functional/InterfaceTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/InterfaceTest.java
rename to src/test/java/com/economic/persistgson/functional/InterfaceTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/InternationalizationTest.java b/src/test/java/com/economic/persistgson/functional/InternationalizationTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/InternationalizationTest.java
rename to src/test/java/com/economic/persistgson/functional/InternationalizationTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/JavaUtilConcurrentAtomicTest.java b/src/test/java/com/economic/persistgson/functional/JavaUtilConcurrentAtomicTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/JavaUtilConcurrentAtomicTest.java
rename to src/test/java/com/economic/persistgson/functional/JavaUtilConcurrentAtomicTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/JavaUtilTest.java b/src/test/java/com/economic/persistgson/functional/JavaUtilTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/JavaUtilTest.java
rename to src/test/java/com/economic/persistgson/functional/JavaUtilTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/JsonAdapterAnnotationOnClassesTest.java b/src/test/java/com/economic/persistgson/functional/JsonAdapterAnnotationOnClassesTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/JsonAdapterAnnotationOnClassesTest.java
rename to src/test/java/com/economic/persistgson/functional/JsonAdapterAnnotationOnClassesTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/JsonAdapterAnnotationOnFieldsTest.java b/src/test/java/com/economic/persistgson/functional/JsonAdapterAnnotationOnFieldsTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/JsonAdapterAnnotationOnFieldsTest.java
rename to src/test/java/com/economic/persistgson/functional/JsonAdapterAnnotationOnFieldsTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/JsonAdapterSerializerDeserializerTest.java b/src/test/java/com/economic/persistgson/functional/JsonAdapterSerializerDeserializerTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/JsonAdapterSerializerDeserializerTest.java
rename to src/test/java/com/economic/persistgson/functional/JsonAdapterSerializerDeserializerTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/JsonArrayTest.java b/src/test/java/com/economic/persistgson/functional/JsonArrayTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/JsonArrayTest.java
rename to src/test/java/com/economic/persistgson/functional/JsonArrayTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/JsonParserTest.java b/src/test/java/com/economic/persistgson/functional/JsonParserTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/JsonParserTest.java
rename to src/test/java/com/economic/persistgson/functional/JsonParserTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/JsonTreeTest.java b/src/test/java/com/economic/persistgson/functional/JsonTreeTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/JsonTreeTest.java
rename to src/test/java/com/economic/persistgson/functional/JsonTreeTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/LeniencyTest.java b/src/test/java/com/economic/persistgson/functional/LeniencyTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/LeniencyTest.java
rename to src/test/java/com/economic/persistgson/functional/LeniencyTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/MapAsArrayTypeAdapterTest.java b/src/test/java/com/economic/persistgson/functional/MapAsArrayTypeAdapterTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/MapAsArrayTypeAdapterTest.java
rename to src/test/java/com/economic/persistgson/functional/MapAsArrayTypeAdapterTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/MapTest.java b/src/test/java/com/economic/persistgson/functional/MapTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/MapTest.java
rename to src/test/java/com/economic/persistgson/functional/MapTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/MoreSpecificTypeSerializationTest.java b/src/test/java/com/economic/persistgson/functional/MoreSpecificTypeSerializationTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/MoreSpecificTypeSerializationTest.java
rename to src/test/java/com/economic/persistgson/functional/MoreSpecificTypeSerializationTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/NamingPolicyTest.java b/src/test/java/com/economic/persistgson/functional/NamingPolicyTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/NamingPolicyTest.java
rename to src/test/java/com/economic/persistgson/functional/NamingPolicyTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/NullObjectAndFieldTest.java b/src/test/java/com/economic/persistgson/functional/NullObjectAndFieldTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/NullObjectAndFieldTest.java
rename to src/test/java/com/economic/persistgson/functional/NullObjectAndFieldTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/ObjectTest.java b/src/test/java/com/economic/persistgson/functional/ObjectTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/ObjectTest.java
rename to src/test/java/com/economic/persistgson/functional/ObjectTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/ParameterizedTypesTest.java b/src/test/java/com/economic/persistgson/functional/ParameterizedTypesTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/ParameterizedTypesTest.java
rename to src/test/java/com/economic/persistgson/functional/ParameterizedTypesTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/PrettyPrintingTest.java b/src/test/java/com/economic/persistgson/functional/PrettyPrintingTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/PrettyPrintingTest.java
rename to src/test/java/com/economic/persistgson/functional/PrettyPrintingTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/PrimitiveCharacterTest.java b/src/test/java/com/economic/persistgson/functional/PrimitiveCharacterTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/PrimitiveCharacterTest.java
rename to src/test/java/com/economic/persistgson/functional/PrimitiveCharacterTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/PrimitiveTest.java b/src/test/java/com/economic/persistgson/functional/PrimitiveTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/PrimitiveTest.java
rename to src/test/java/com/economic/persistgson/functional/PrimitiveTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/PrintFormattingTest.java b/src/test/java/com/economic/persistgson/functional/PrintFormattingTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/PrintFormattingTest.java
rename to src/test/java/com/economic/persistgson/functional/PrintFormattingTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/RawSerializationTest.java b/src/test/java/com/economic/persistgson/functional/RawSerializationTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/RawSerializationTest.java
rename to src/test/java/com/economic/persistgson/functional/RawSerializationTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/ReadersWritersTest.java b/src/test/java/com/economic/persistgson/functional/ReadersWritersTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/ReadersWritersTest.java
rename to src/test/java/com/economic/persistgson/functional/ReadersWritersTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java b/src/test/java/com/economic/persistgson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
rename to src/test/java/com/economic/persistgson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/SecurityTest.java b/src/test/java/com/economic/persistgson/functional/SecurityTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/SecurityTest.java
rename to src/test/java/com/economic/persistgson/functional/SecurityTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/SerializedNameTest.java b/src/test/java/com/economic/persistgson/functional/SerializedNameTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/SerializedNameTest.java
rename to src/test/java/com/economic/persistgson/functional/SerializedNameTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/StreamingTypeAdaptersTest.java b/src/test/java/com/economic/persistgson/functional/StreamingTypeAdaptersTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/StreamingTypeAdaptersTest.java
rename to src/test/java/com/economic/persistgson/functional/StreamingTypeAdaptersTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/StringTest.java b/src/test/java/com/economic/persistgson/functional/StringTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/StringTest.java
rename to src/test/java/com/economic/persistgson/functional/StringTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/ThrowableFunctionalTest.java b/src/test/java/com/economic/persistgson/functional/ThrowableFunctionalTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/ThrowableFunctionalTest.java
rename to src/test/java/com/economic/persistgson/functional/ThrowableFunctionalTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/TreeTypeAdaptersTest.java b/src/test/java/com/economic/persistgson/functional/TreeTypeAdaptersTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/TreeTypeAdaptersTest.java
rename to src/test/java/com/economic/persistgson/functional/TreeTypeAdaptersTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/TypeAdapterPrecedenceTest.java b/src/test/java/com/economic/persistgson/functional/TypeAdapterPrecedenceTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/TypeAdapterPrecedenceTest.java
rename to src/test/java/com/economic/persistgson/functional/TypeAdapterPrecedenceTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/TypeHierarchyAdapterTest.java b/src/test/java/com/economic/persistgson/functional/TypeHierarchyAdapterTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/TypeHierarchyAdapterTest.java
rename to src/test/java/com/economic/persistgson/functional/TypeHierarchyAdapterTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/TypeVariableTest.java b/src/test/java/com/economic/persistgson/functional/TypeVariableTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/TypeVariableTest.java
rename to src/test/java/com/economic/persistgson/functional/TypeVariableTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/UncategorizedTest.java b/src/test/java/com/economic/persistgson/functional/UncategorizedTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/UncategorizedTest.java
rename to src/test/java/com/economic/persistgson/functional/UncategorizedTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/functional/VersioningTest.java b/src/test/java/com/economic/persistgson/functional/VersioningTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/functional/VersioningTest.java
rename to src/test/java/com/economic/persistgson/functional/VersioningTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/internal/GsonTypesTest.java b/src/test/java/com/economic/persistgson/internal/GsonTypesTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/internal/GsonTypesTest.java
rename to src/test/java/com/economic/persistgson/internal/GsonTypesTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/internal/LazilyParsedNumberTest.java b/src/test/java/com/economic/persistgson/internal/LazilyParsedNumberTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/internal/LazilyParsedNumberTest.java
rename to src/test/java/com/economic/persistgson/internal/LazilyParsedNumberTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/internal/LinkedHashTreeMapTest.java b/src/test/java/com/economic/persistgson/internal/LinkedHashTreeMapTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/internal/LinkedHashTreeMapTest.java
rename to src/test/java/com/economic/persistgson/internal/LinkedHashTreeMapTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/internal/LinkedTreeMapTest.java b/src/test/java/com/economic/persistgson/internal/LinkedTreeMapTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/internal/LinkedTreeMapTest.java
rename to src/test/java/com/economic/persistgson/internal/LinkedTreeMapTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/internal/UnsafeAllocatorInstantiationTest.java b/src/test/java/com/economic/persistgson/internal/UnsafeAllocatorInstantiationTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/internal/UnsafeAllocatorInstantiationTest.java
rename to src/test/java/com/economic/persistgson/internal/UnsafeAllocatorInstantiationTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/internal/bind/JsonElementReaderTest.java b/src/test/java/com/economic/persistgson/internal/bind/JsonElementReaderTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/internal/bind/JsonElementReaderTest.java
rename to src/test/java/com/economic/persistgson/internal/bind/JsonElementReaderTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/internal/bind/JsonTreeReaderTest.java b/src/test/java/com/economic/persistgson/internal/bind/JsonTreeReaderTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/internal/bind/JsonTreeReaderTest.java
rename to src/test/java/com/economic/persistgson/internal/bind/JsonTreeReaderTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/internal/bind/JsonTreeWriterTest.java b/src/test/java/com/economic/persistgson/internal/bind/JsonTreeWriterTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/internal/bind/JsonTreeWriterTest.java
rename to src/test/java/com/economic/persistgson/internal/bind/JsonTreeWriterTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/metrics/PerformanceTest.java b/src/test/java/com/economic/persistgson/metrics/PerformanceTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/metrics/PerformanceTest.java
rename to src/test/java/com/economic/persistgson/metrics/PerformanceTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/persist/PersistModelTest.kt b/src/test/java/com/economic/persistgson/persist/PersistModelTest.kt
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/persist/PersistModelTest.kt
rename to src/test/java/com/economic/persistgson/persist/PersistModelTest.kt
diff --git a/gson/src/test/java/com/economic/persistgson/reflect/TypeTokenTest.java b/src/test/java/com/economic/persistgson/reflect/TypeTokenTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/reflect/TypeTokenTest.java
rename to src/test/java/com/economic/persistgson/reflect/TypeTokenTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/regression/JsonAdapterNullSafeTest.java b/src/test/java/com/economic/persistgson/regression/JsonAdapterNullSafeTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/regression/JsonAdapterNullSafeTest.java
rename to src/test/java/com/economic/persistgson/regression/JsonAdapterNullSafeTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/stream/JsonReaderPathTest.java b/src/test/java/com/economic/persistgson/stream/JsonReaderPathTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/stream/JsonReaderPathTest.java
rename to src/test/java/com/economic/persistgson/stream/JsonReaderPathTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/stream/JsonReaderTest.java b/src/test/java/com/economic/persistgson/stream/JsonReaderTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/stream/JsonReaderTest.java
rename to src/test/java/com/economic/persistgson/stream/JsonReaderTest.java
diff --git a/gson/src/test/java/com/economic/persistgson/stream/JsonWriterTest.java b/src/test/java/com/economic/persistgson/stream/JsonWriterTest.java
similarity index 100%
rename from gson/src/test/java/com/economic/persistgson/stream/JsonWriterTest.java
rename to src/test/java/com/economic/persistgson/stream/JsonWriterTest.java
