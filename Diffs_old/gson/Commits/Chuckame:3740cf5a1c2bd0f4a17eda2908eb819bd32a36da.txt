diff --git a/gson/pom.xml b/gson/pom.xml
index cf0594633..d13124ed4 100644
--- a/gson/pom.xml
+++ b/gson/pom.xml
@@ -4,7 +4,7 @@
   <parent>
     <groupId>com.google.code.gson</groupId>
     <artifactId>gson-parent</artifactId>
-    <version>2.8.3-SNAPSHOT</version>
+    <version>2.8.2-forked</version>
   </parent>
 
   <artifactId>gson</artifactId>
diff --git a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
index 0cbf77cea..01330070b 100644
--- a/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
@@ -120,7 +120,7 @@ public void write(JsonWriter out, Date value) throws IOException {
   }
 
   @Override
-  public Date read(JsonReader in) throws IOException {
+  public Date read(JsonReader in, Object parent) throws IOException {
     if (in.peek() == JsonToken.NULL) {
       in.nextNull();
       return null;
diff --git a/gson/src/main/java/com/google/gson/Gson.java b/gson/src/main/java/com/google/gson/Gson.java
index 5b1c6c833..f8c332729 100644
--- a/gson/src/main/java/com/google/gson/Gson.java
+++ b/gson/src/main/java/com/google/gson/Gson.java
@@ -310,7 +310,7 @@ public boolean htmlSafe() {
       return TypeAdapters.DOUBLE;
     }
     return new TypeAdapter<Number>() {
-      @Override public Double read(JsonReader in) throws IOException {
+      @Override public Double read(JsonReader in, Object parent) throws IOException {
         if (in.peek() == JsonToken.NULL) {
           in.nextNull();
           return null;
@@ -334,7 +334,7 @@ public boolean htmlSafe() {
       return TypeAdapters.FLOAT;
     }
     return new TypeAdapter<Number>() {
-      @Override public Float read(JsonReader in) throws IOException {
+      @Override public Float read(JsonReader in, Object parent) throws IOException {
         if (in.peek() == JsonToken.NULL) {
           in.nextNull();
           return null;
@@ -366,7 +366,7 @@ static void checkValidFloatingPoint(double value) {
       return TypeAdapters.LONG;
     }
     return new TypeAdapter<Number>() {
-      @Override public Number read(JsonReader in) throws IOException {
+      @Override public Number read(JsonReader in, Object parent) throws IOException {
         if (in.peek() == JsonToken.NULL) {
           in.nextNull();
           return null;
@@ -388,8 +388,8 @@ static void checkValidFloatingPoint(double value) {
       @Override public void write(JsonWriter out, AtomicLong value) throws IOException {
         longAdapter.write(out, value.get());
       }
-      @Override public AtomicLong read(JsonReader in) throws IOException {
-        Number value = longAdapter.read(in);
+      @Override public AtomicLong read(JsonReader in, Object parent) throws IOException {
+        Number value = longAdapter.read(in, parent);
         return new AtomicLong(value.longValue());
       }
     }.nullSafe();
@@ -404,11 +404,11 @@ static void checkValidFloatingPoint(double value) {
         }
         out.endArray();
       }
-      @Override public AtomicLongArray read(JsonReader in) throws IOException {
+      @Override public AtomicLongArray read(JsonReader in, Object parent) throws IOException {
         List<Long> list = new ArrayList<Long>();
         in.beginArray();
         while (in.hasNext()) {
-            long value = longAdapter.read(in).longValue();
+            long value = longAdapter.read(in, parent).longValue();
             list.add(value);
         }
         in.endArray();
@@ -919,7 +919,7 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {
       isEmpty = false;
       TypeToken<T> typeToken = (TypeToken<T>) TypeToken.get(typeOfT);
       TypeAdapter<T> typeAdapter = getAdapter(typeToken);
-      T object = typeAdapter.read(reader);
+      T object = typeAdapter.read(reader, null);
       return object;
     } catch (EOFException e) {
       /*
@@ -997,11 +997,11 @@ public void setDelegate(TypeAdapter<T> typeAdapter) {
       delegate = typeAdapter;
     }
 
-    @Override public T read(JsonReader in) throws IOException {
+    @Override public T read(JsonReader in, Object parent) throws IOException {
       if (delegate == null) {
         throw new IllegalStateException();
       }
-      return delegate.read(in);
+      return delegate.read(in, parent);
     }
 
     @Override public void write(JsonWriter out, T value) throws IOException {
diff --git a/gson/src/main/java/com/google/gson/TypeAdapter.java b/gson/src/main/java/com/google/gson/TypeAdapter.java
index 4646d271d..0f803f418 100644
--- a/gson/src/main/java/com/google/gson/TypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/TypeAdapter.java
@@ -61,7 +61,7 @@
  * strings like {@code "5,8"} rather than objects like {@code {"x":5,"y":8}}. In
  * this case the type adapter binds a rich Java class to a compact JSON value.
  *
- * <p>The {@link #read(JsonReader) read()} method must read exactly one value
+ * <p>The {@link #read(JsonReader, Object) read()} method must read exactly one value
  * and {@link #write(JsonWriter,Object) write()} must write exactly one value.
  * For primitive types this is means readers should make exactly one call to
  * {@code nextBoolean()}, {@code nextDouble()}, {@code nextInt()}, {@code
@@ -191,12 +191,12 @@ public final void toJson(Writer out, T value) throws IOException {
           TypeAdapter.this.write(out, value);
         }
       }
-      @Override public T read(JsonReader reader) throws IOException {
+      @Override public T read(JsonReader reader, Object parent) throws IOException {
         if (reader.peek() == JsonToken.NULL) {
           reader.nextNull();
           return null;
         }
-        return TypeAdapter.this.read(reader);
+        return TypeAdapter.this.read(reader, null);
       }
     };
   }
@@ -241,30 +241,31 @@ public final JsonElement toJsonTree(T value) {
   /**
    * Reads one JSON value (an array, object, string, number, boolean or null)
    * and converts it to a Java object. Returns the converted object.
+ * @param parent TODO
    *
    * @return the converted Java object. May be null.
    */
-  public abstract T read(JsonReader in) throws IOException;
+  public abstract T read(JsonReader in, Object parent) throws IOException;
 
   /**
    * Converts the JSON document in {@code in} to a Java object. Unlike Gson's
    * similar {@link Gson#fromJson(java.io.Reader, Class) fromJson} method, this
    * read is strict. Create a {@link JsonReader#setLenient(boolean) lenient}
-   * {@code JsonReader} and call {@link #read(JsonReader)} for lenient reading.
+   * {@code JsonReader} and call {@link #read(JsonReader, Object)} for lenient reading.
    *
    * @return the converted Java object. May be null.
    * @since 2.2
    */
   public final T fromJson(Reader in) throws IOException {
     JsonReader reader = new JsonReader(in);
-    return read(reader);
+    return read(reader, null);
   }
 
   /**
    * Converts the JSON document in {@code json} to a Java object. Unlike Gson's
    * similar {@link Gson#fromJson(String, Class) fromJson} method, this read is
    * strict. Create a {@link JsonReader#setLenient(boolean) lenient} {@code
-   * JsonReader} and call {@link #read(JsonReader)} for lenient reading.
+   * JsonReader} and call {@link #read(JsonReader, Object)} for lenient reading.
    *
    * @return the converted Java object. May be null.
    * @since 2.2
@@ -282,7 +283,7 @@ public final T fromJson(String json) throws IOException {
   public final T fromJsonTree(JsonElement jsonTree) {
     try {
       JsonReader jsonReader = new JsonTreeReader(jsonTree);
-      return read(jsonReader);
+      return read(jsonReader, null);
     } catch (IOException e) {
       throw new JsonIOException(e);
     }
diff --git a/gson/src/main/java/com/google/gson/internal/Excluder.java b/gson/src/main/java/com/google/gson/internal/Excluder.java
index 6b83757ed..fe105db70 100644
--- a/gson/src/main/java/com/google/gson/internal/Excluder.java
+++ b/gson/src/main/java/com/google/gson/internal/Excluder.java
@@ -123,12 +123,12 @@ public Excluder withExclusionStrategy(ExclusionStrategy exclusionStrategy,
       /** The delegate is lazily created because it may not be needed, and creating it may fail. */
       private TypeAdapter<T> delegate;
 
-      @Override public T read(JsonReader in) throws IOException {
+      @Override public T read(JsonReader in, Object parent) throws IOException {
         if (skipDeserialize) {
           in.skipValue();
           return null;
         }
-        return delegate().read(in);
+        return delegate().read(in, parent);
       }
 
       @Override public void write(JsonWriter out, T value) throws IOException {
diff --git a/gson/src/main/java/com/google/gson/internal/Streams.java b/gson/src/main/java/com/google/gson/internal/Streams.java
index ac99910a9..124a424f7 100644
--- a/gson/src/main/java/com/google/gson/internal/Streams.java
+++ b/gson/src/main/java/com/google/gson/internal/Streams.java
@@ -45,7 +45,7 @@ public static JsonElement parse(JsonReader reader) throws JsonParseException {
     try {
       reader.peek();
       isEmpty = false;
-      return TypeAdapters.JSON_ELEMENT.read(reader);
+      return TypeAdapters.JSON_ELEMENT.read(reader, null);
     } catch (EOFException e) {
       /*
        * For compatibility with JSON 1.5 and earlier, we return a JsonNull for
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
index 56101706b..9f8c171b0 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
@@ -60,7 +60,7 @@ public ArrayTypeAdapter(Gson context, TypeAdapter<E> componentTypeAdapter, Class
     this.componentType = componentType;
   }
 
-  @Override public Object read(JsonReader in) throws IOException {
+  @Override public Object read(JsonReader in, Object parent) throws IOException {
     if (in.peek() == JsonToken.NULL) {
       in.nextNull();
       return null;
@@ -69,7 +69,7 @@ public ArrayTypeAdapter(Gson context, TypeAdapter<E> componentTypeAdapter, Class
     List<E> list = new ArrayList<E>();
     in.beginArray();
     while (in.hasNext()) {
-      E instance = componentTypeAdapter.read(in);
+      E instance = componentTypeAdapter.read(in, parent);
       list.add(instance);
     }
     in.endArray();
diff --git a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
index 1d57844a4..dfe3bd0ab 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
@@ -70,7 +70,7 @@ public Adapter(Gson context, Type elementType,
       this.constructor = constructor;
     }
 
-    @Override public Collection<E> read(JsonReader in) throws IOException {
+    @Override public Collection<E> read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -79,7 +79,7 @@ public Adapter(Gson context, Type elementType,
       Collection<E> collection = constructor.construct();
       in.beginArray();
       while (in.hasNext()) {
-        E instance = elementTypeAdapter.read(in);
+        E instance = elementTypeAdapter.read(in, parent);
         collection.add(instance);
       }
       in.endArray();
diff --git a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
index c3a3de1b5..658603998 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
@@ -67,7 +67,7 @@ public DateTypeAdapter() {
     }
   }
 
-  @Override public Date read(JsonReader in) throws IOException {
+  @Override public Date read(JsonReader in, Object parent) throws IOException {
     if (in.peek() == JsonToken.NULL) {
       in.nextNull();
       return null;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
index 5a34a5d5f..bcc3251ab 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
@@ -157,7 +157,7 @@ public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,
       this.constructor = constructor;
     }
 
-    @Override public Map<K, V> read(JsonReader in) throws IOException {
+    @Override public Map<K, V> read(JsonReader in, Object parent) throws IOException {
       JsonToken peek = in.peek();
       if (peek == JsonToken.NULL) {
         in.nextNull();
@@ -170,8 +170,8 @@ public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,
         in.beginArray();
         while (in.hasNext()) {
           in.beginArray(); // entry array
-          K key = keyTypeAdapter.read(in);
-          V value = valueTypeAdapter.read(in);
+          K key = keyTypeAdapter.read(in, parent);
+          V value = valueTypeAdapter.read(in, parent);
           V replaced = map.put(key, value);
           if (replaced != null) {
             throw new JsonSyntaxException("duplicate key: " + key);
@@ -183,8 +183,8 @@ public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,
         in.beginObject();
         while (in.hasNext()) {
           JsonReaderInternalAccess.INSTANCE.promoteNameToValue(in);
-          K key = keyTypeAdapter.read(in);
-          V value = valueTypeAdapter.read(in);
+          K key = keyTypeAdapter.read(in, parent);
+          V value = valueTypeAdapter.read(in, parent);
           V replaced = map.put(key, value);
           if (replaced != null) {
             throw new JsonSyntaxException("duplicate key: " + key);
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
index ec42e0482..b24b9ffc0 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
@@ -51,14 +51,14 @@
     this.gson = gson;
   }
 
-  @Override public Object read(JsonReader in) throws IOException {
+  @Override public Object read(JsonReader in, Object parent) throws IOException {
     JsonToken token = in.peek();
     switch (token) {
     case BEGIN_ARRAY:
       List<Object> list = new ArrayList<Object>();
       in.beginArray();
       while (in.hasNext()) {
-        list.add(read(in));
+        list.add(read(in, parent));
       }
       in.endArray();
       return list;
@@ -67,7 +67,7 @@
       Map<String, Object> map = new LinkedTreeMap<String, Object>();
       in.beginObject();
       while (in.hasNext()) {
-        map.put(in.nextName(), read(in));
+        map.put(in.nextName(), read(in, parent));
       }
       in.endObject();
       return map;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
index 777e7dee3..181065c03 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -128,7 +128,7 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
-        Object fieldValue = typeAdapter.read(reader);
+        Object fieldValue = typeAdapter.read(reader, value);
         if (fieldValue != null || !isPrimitive) {
           field.set(value, fieldValue);
         }
@@ -203,7 +203,7 @@ protected BoundField(String name, boolean serialized, boolean deserialized) {
       this.boundFields = boundFields;
     }
 
-    @Override public T read(JsonReader in) throws IOException {
+    @Override public T read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java
index 5ec244f29..eef939fd1 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java
@@ -47,7 +47,7 @@
   private final DateFormat format = new SimpleDateFormat("MMM d, yyyy");
 
   @Override
-  public synchronized java.sql.Date read(JsonReader in) throws IOException {
+  public synchronized java.sql.Date read(JsonReader in, Object parent) throws IOException {
     if (in.peek() == JsonToken.NULL) {
       in.nextNull();
       return null;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java
index 55d4b2f69..c9468b6cb 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java
@@ -47,7 +47,7 @@
 
   private final DateFormat format = new SimpleDateFormat("hh:mm:ss a");
 
-  @Override public synchronized Time read(JsonReader in) throws IOException {
+  @Override public synchronized Time read(JsonReader in, Object parent) throws IOException {
     if (in.peek() == JsonToken.NULL) {
       in.nextNull();
       return null;
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java
index a5c6c5dcd..d7429c81d 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java
@@ -58,9 +58,9 @@ public TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deseria
     this.skipPast = skipPast;
   }
 
-  @Override public T read(JsonReader in) throws IOException {
+  @Override public T read(JsonReader in, Object parent) throws IOException {
     if (deserializer == null) {
-      return delegate().read(in);
+      return delegate().read(in, parent);
     }
     JsonElement value = Streams.parse(in);
     if (value.isJsonNull()) {
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
index 2bf37ad0a..2a50a8805 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
@@ -37,8 +37,8 @@
   }
 
   @Override
-  public T read(JsonReader in) throws IOException {
-    return delegate.read(in);
+  public T read(JsonReader in, Object parent) throws IOException {
+    return delegate.read(in, parent);
   }
 
   @SuppressWarnings({"rawtypes", "unchecked"})
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
index 354ce5a1f..e35ebe615 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
@@ -73,7 +73,7 @@ public void write(JsonWriter out, Class value) throws IOException {
               + value.getName() + ". Forgot to register a type adapter?");
     }
     @Override
-    public Class read(JsonReader in) throws IOException {
+    public Class read(JsonReader in, Object parent) throws IOException {
       throw new UnsupportedOperationException(
               "Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?");
     }
@@ -82,7 +82,7 @@ public Class read(JsonReader in) throws IOException {
   public static final TypeAdapterFactory CLASS_FACTORY = newFactory(Class.class, CLASS);
 
   public static final TypeAdapter<BitSet> BIT_SET = new TypeAdapter<BitSet>() {
-    @Override public BitSet read(JsonReader in) throws IOException {
+    @Override public BitSet read(JsonReader in, Object parent) throws IOException {
       BitSet bitset = new BitSet();
       in.beginArray();
       int i = 0;
@@ -132,7 +132,7 @@ public Class read(JsonReader in) throws IOException {
 
   public static final TypeAdapter<Boolean> BOOLEAN = new TypeAdapter<Boolean>() {
     @Override
-    public Boolean read(JsonReader in) throws IOException {
+    public Boolean read(JsonReader in, Object parent) throws IOException {
       JsonToken peek = in.peek();
       if (peek == JsonToken.NULL) {
         in.nextNull();
@@ -154,7 +154,7 @@ public void write(JsonWriter out, Boolean value) throws IOException {
    * otherwise permitted.
    */
   public static final TypeAdapter<Boolean> BOOLEAN_AS_STRING = new TypeAdapter<Boolean>() {
-    @Override public Boolean read(JsonReader in) throws IOException {
+    @Override public Boolean read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -172,7 +172,7 @@ public void write(JsonWriter out, Boolean value) throws IOException {
 
   public static final TypeAdapter<Number> BYTE = new TypeAdapter<Number>() {
     @Override
-    public Number read(JsonReader in) throws IOException {
+    public Number read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -195,7 +195,7 @@ public void write(JsonWriter out, Number value) throws IOException {
 
   public static final TypeAdapter<Number> SHORT = new TypeAdapter<Number>() {
     @Override
-    public Number read(JsonReader in) throws IOException {
+    public Number read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -217,7 +217,7 @@ public void write(JsonWriter out, Number value) throws IOException {
 
   public static final TypeAdapter<Number> INTEGER = new TypeAdapter<Number>() {
     @Override
-    public Number read(JsonReader in) throws IOException {
+    public Number read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -237,7 +237,7 @@ public void write(JsonWriter out, Number value) throws IOException {
       = newFactory(int.class, Integer.class, INTEGER);
 
   public static final TypeAdapter<AtomicInteger> ATOMIC_INTEGER = new TypeAdapter<AtomicInteger>() {
-    @Override public AtomicInteger read(JsonReader in) throws IOException {
+    @Override public AtomicInteger read(JsonReader in, Object parent) throws IOException {
       try {
         return new AtomicInteger(in.nextInt());
       } catch (NumberFormatException e) {
@@ -252,7 +252,7 @@ public void write(JsonWriter out, Number value) throws IOException {
       newFactory(AtomicInteger.class, TypeAdapters.ATOMIC_INTEGER);
 
   public static final TypeAdapter<AtomicBoolean> ATOMIC_BOOLEAN = new TypeAdapter<AtomicBoolean>() {
-    @Override public AtomicBoolean read(JsonReader in) throws IOException {
+    @Override public AtomicBoolean read(JsonReader in, Object parent) throws IOException {
       return new AtomicBoolean(in.nextBoolean());
     }
     @Override public void write(JsonWriter out, AtomicBoolean value) throws IOException {
@@ -263,7 +263,7 @@ public void write(JsonWriter out, Number value) throws IOException {
       newFactory(AtomicBoolean.class, TypeAdapters.ATOMIC_BOOLEAN);
 
   public static final TypeAdapter<AtomicIntegerArray> ATOMIC_INTEGER_ARRAY = new TypeAdapter<AtomicIntegerArray>() {
-    @Override public AtomicIntegerArray read(JsonReader in) throws IOException {
+    @Override public AtomicIntegerArray read(JsonReader in, Object parent) throws IOException {
         List<Integer> list = new ArrayList<Integer>();
         in.beginArray();
         while (in.hasNext()) {
@@ -295,7 +295,7 @@ public void write(JsonWriter out, Number value) throws IOException {
 
   public static final TypeAdapter<Number> LONG = new TypeAdapter<Number>() {
     @Override
-    public Number read(JsonReader in) throws IOException {
+    public Number read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -314,7 +314,7 @@ public void write(JsonWriter out, Number value) throws IOException {
 
   public static final TypeAdapter<Number> FLOAT = new TypeAdapter<Number>() {
     @Override
-    public Number read(JsonReader in) throws IOException {
+    public Number read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -329,7 +329,7 @@ public void write(JsonWriter out, Number value) throws IOException {
 
   public static final TypeAdapter<Number> DOUBLE = new TypeAdapter<Number>() {
     @Override
-    public Number read(JsonReader in) throws IOException {
+    public Number read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -344,7 +344,7 @@ public void write(JsonWriter out, Number value) throws IOException {
 
   public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {
     @Override
-    public Number read(JsonReader in) throws IOException {
+    public Number read(JsonReader in, Object parent) throws IOException {
       JsonToken jsonToken = in.peek();
       switch (jsonToken) {
       case NULL:
@@ -367,7 +367,7 @@ public void write(JsonWriter out, Number value) throws IOException {
 
   public static final TypeAdapter<Character> CHARACTER = new TypeAdapter<Character>() {
     @Override
-    public Character read(JsonReader in) throws IOException {
+    public Character read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -389,7 +389,7 @@ public void write(JsonWriter out, Character value) throws IOException {
 
   public static final TypeAdapter<String> STRING = new TypeAdapter<String>() {
     @Override
-    public String read(JsonReader in) throws IOException {
+    public String read(JsonReader in, Object parent) throws IOException {
       JsonToken peek = in.peek();
       if (peek == JsonToken.NULL) {
         in.nextNull();
@@ -408,7 +408,7 @@ public void write(JsonWriter out, String value) throws IOException {
   };
   
   public static final TypeAdapter<BigDecimal> BIG_DECIMAL = new TypeAdapter<BigDecimal>() {
-    @Override public BigDecimal read(JsonReader in) throws IOException {
+    @Override public BigDecimal read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -426,7 +426,7 @@ public void write(JsonWriter out, String value) throws IOException {
   };
   
   public static final TypeAdapter<BigInteger> BIG_INTEGER = new TypeAdapter<BigInteger>() {
-    @Override public BigInteger read(JsonReader in) throws IOException {
+    @Override public BigInteger read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -447,7 +447,7 @@ public void write(JsonWriter out, String value) throws IOException {
 
   public static final TypeAdapter<StringBuilder> STRING_BUILDER = new TypeAdapter<StringBuilder>() {
     @Override
-    public StringBuilder read(JsonReader in) throws IOException {
+    public StringBuilder read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -465,7 +465,7 @@ public void write(JsonWriter out, StringBuilder value) throws IOException {
 
   public static final TypeAdapter<StringBuffer> STRING_BUFFER = new TypeAdapter<StringBuffer>() {
     @Override
-    public StringBuffer read(JsonReader in) throws IOException {
+    public StringBuffer read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -483,7 +483,7 @@ public void write(JsonWriter out, StringBuffer value) throws IOException {
 
   public static final TypeAdapter<URL> URL = new TypeAdapter<URL>() {
     @Override
-    public URL read(JsonReader in) throws IOException {
+    public URL read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -501,7 +501,7 @@ public void write(JsonWriter out, URL value) throws IOException {
 
   public static final TypeAdapter<URI> URI = new TypeAdapter<URI>() {
     @Override
-    public URI read(JsonReader in) throws IOException {
+    public URI read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -523,7 +523,7 @@ public void write(JsonWriter out, URI value) throws IOException {
 
   public static final TypeAdapter<InetAddress> INET_ADDRESS = new TypeAdapter<InetAddress>() {
     @Override
-    public InetAddress read(JsonReader in) throws IOException {
+    public InetAddress read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -542,7 +542,7 @@ public void write(JsonWriter out, InetAddress value) throws IOException {
 
   public static final TypeAdapter<UUID> UUID = new TypeAdapter<UUID>() {
     @Override
-    public UUID read(JsonReader in) throws IOException {
+    public UUID read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -559,7 +559,7 @@ public void write(JsonWriter out, UUID value) throws IOException {
 
   public static final TypeAdapter<Currency> CURRENCY = new TypeAdapter<Currency>() {
     @Override
-    public Currency read(JsonReader in) throws IOException {
+    public Currency read(JsonReader in, Object parent) throws IOException {
       return Currency.getInstance(in.nextString());
     }
     @Override
@@ -578,8 +578,8 @@ public void write(JsonWriter out, Currency value) throws IOException {
 
       final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);
       return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {
-        @Override public Timestamp read(JsonReader in) throws IOException {
-          Date date = dateTypeAdapter.read(in);
+        @Override public Timestamp read(JsonReader in, Object parent) throws IOException {
+          Date date = dateTypeAdapter.read(in, null);
           return date != null ? new Timestamp(date.getTime()) : null;
         }
 
@@ -599,7 +599,7 @@ public void write(JsonWriter out, Currency value) throws IOException {
     private static final String SECOND = "second";
 
     @Override
-    public Calendar read(JsonReader in) throws IOException {
+    public Calendar read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return  null;
@@ -660,7 +660,7 @@ public void write(JsonWriter out, Calendar value) throws IOException {
 
   public static final TypeAdapter<Locale> LOCALE = new TypeAdapter<Locale>() {
     @Override
-    public Locale read(JsonReader in) throws IOException {
+    public Locale read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -696,7 +696,7 @@ public void write(JsonWriter out, Locale value) throws IOException {
   public static final TypeAdapterFactory LOCALE_FACTORY = newFactory(Locale.class, LOCALE);
 
   public static final TypeAdapter<JsonElement> JSON_ELEMENT = new TypeAdapter<JsonElement>() {
-    @Override public JsonElement read(JsonReader in) throws IOException {
+    @Override public JsonElement read(JsonReader in, Object parent) throws IOException {
       switch (in.peek()) {
       case STRING:
         return new JsonPrimitive(in.nextString());
@@ -712,7 +712,7 @@ public void write(JsonWriter out, Locale value) throws IOException {
         JsonArray array = new JsonArray();
         in.beginArray();
         while (in.hasNext()) {
-          array.add(read(in));
+          array.add(read(in, parent));
         }
         in.endArray();
         return array;
@@ -720,7 +720,7 @@ public void write(JsonWriter out, Locale value) throws IOException {
         JsonObject object = new JsonObject();
         in.beginObject();
         while (in.hasNext()) {
-          object.add(in.nextName(), read(in));
+          object.add(in.nextName(), read(in, parent));
         }
         in.endObject();
         return object;
@@ -792,7 +792,7 @@ public EnumTypeAdapter(Class<T> classOfT) {
         throw new AssertionError(e);
       }
     }
-    @Override public T read(JsonReader in) throws IOException {
+    @Override public T read(JsonReader in, Object parent) throws IOException {
       if (in.peek() == JsonToken.NULL) {
         in.nextNull();
         return null;
@@ -890,8 +890,8 @@ public EnumTypeAdapter(Class<T> classOfT) {
             typeAdapter.write(out, value);
           }
 
-          @Override public T1 read(JsonReader in) throws IOException {
-            T1 result = typeAdapter.read(in);
+          @Override public T1 read(JsonReader in, Object parent) throws IOException {
+            T1 result = typeAdapter.read(in, parent);
             if (result != null && !requestedType.isInstance(result)) {
               throw new JsonSyntaxException("Expected a " + requestedType.getName()
                   + " but was " + result.getClass().getName());
diff --git a/gson/src/test/java/com/google/gson/GsonBuilderTest.java b/gson/src/test/java/com/google/gson/GsonBuilderTest.java
index 73601c0e3..61e558bc0 100755
--- a/gson/src/test/java/com/google/gson/GsonBuilderTest.java
+++ b/gson/src/test/java/com/google/gson/GsonBuilderTest.java
@@ -34,7 +34,7 @@
     @Override public void write(JsonWriter out, Object value) {
       throw new AssertionError();
     }
-    @Override public Object read(JsonReader in) {
+    @Override public Object read(JsonReader in, Object parent) {
       throw new AssertionError();
     }
   };
diff --git a/gson/src/test/java/com/google/gson/GsonTest.java b/gson/src/test/java/com/google/gson/GsonTest.java
index eec2ec91c..de4d165c0 100644
--- a/gson/src/test/java/com/google/gson/GsonTest.java
+++ b/gson/src/test/java/com/google/gson/GsonTest.java
@@ -75,6 +75,6 @@ public void testClonedTypeAdapterFactoryListsAreIndependent() {
     @Override public void write(JsonWriter out, Object value) throws IOException {
       // Test stub.
     }
-    @Override public Object read(JsonReader in) throws IOException { return null; }
+    @Override public Object read(JsonReader in, Object parent) throws IOException { return null; }
   }
 }
diff --git a/gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java b/gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java
index 79ae1698f..fa66db2d8 100644
--- a/gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java
+++ b/gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java
@@ -30,7 +30,7 @@
     @Override public void write(JsonWriter out, Boolean value) throws IOException {
       out.value(value ? 1 : 0);
     }
-    @Override public Boolean read(JsonReader in) throws IOException {
+    @Override public Boolean read(JsonReader in, Object parent) throws IOException {
       int value = in.nextInt();
       return value != 0;
     }
@@ -40,7 +40,7 @@
     @Override public void write(JsonWriter out, String value) throws IOException {
       out.value(value.toUpperCase(Locale.US));
     }
-    @Override public String read(JsonReader in) throws IOException {
+    @Override public String read(JsonReader in, Object parent) throws IOException {
       return in.nextString().toLowerCase(Locale.US);
     }
   };
diff --git a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
index 635c20887..a9362f30e 100644
--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
@@ -719,7 +719,7 @@ public void write(JsonWriter out, Class value) throws IOException {
       out.value(value.getName());
     }
     @Override
-    public Class read(JsonReader in) throws IOException {
+    public Class read(JsonReader in, Object parent) throws IOException {
       String className = in.nextString();
       try {
         return Class.forName(className);
@@ -737,7 +737,7 @@ public Class read(JsonReader in) throws IOException {
     @Override public void write(JsonWriter out, Number value) throws IOException {
       out.value(value.toString());
     }
-    @Override public Number read(JsonReader in) throws IOException {
+    @Override public Number read(JsonReader in, Object parent) throws IOException {
       try {
         return constructor.newInstance(in.nextString());
       } catch (Exception e) {
diff --git a/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java b/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
index f89148e36..2b33601fe 100644
--- a/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
+++ b/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
@@ -84,9 +84,9 @@ public void write(JsonWriter out, T value) throws IOException {
         }
 
         @Override
-        public T read(JsonReader in) throws IOException {
+        public T read(JsonReader in, Object parent) throws IOException {
           ++numReads;
-          return delegate.read(in);
+          return delegate.read(in, parent);
         }
       };
     }
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
index 4288bfe3b..b4c9c0fdd 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
@@ -72,7 +72,7 @@ public void testRegisteredAdapterOverridesJsonAdapter() {
       @Override public void write(JsonWriter out, A value) throws IOException {
         out.value("registeredAdapter");
       }
-      @Override public A read(JsonReader in) throws IOException {
+      @Override public A read(JsonReader in, Object parent) throws IOException {
         return new A(in.nextString());
       }
     };
@@ -149,7 +149,7 @@ public void testNullSafeObjectFromJson() {
       @Override public void write(JsonWriter out, A value) throws IOException {
         out.value("jsonAdapter");
       }
-      @Override public A read(JsonReader in) throws IOException {
+      @Override public A read(JsonReader in, Object parent) throws IOException {
         in.nextString();
         return new A("jsonAdapter");
       }
@@ -169,7 +169,7 @@ public void testNullSafeObjectFromJson() {
             out.value("jsonAdapterFactory");
           }
           @SuppressWarnings("unchecked")
-          @Override public T read(JsonReader in) throws IOException {
+          @Override public T read(JsonReader in, Object parent) throws IOException {
             in.nextString();
             return (T) new C("jsonAdapterFactory");
           }
@@ -211,7 +211,7 @@ public void testNullSafeObjectFromJson() {
       out.endObject();
       // implement the write method
     }
-    @Override public User read(JsonReader in) throws IOException {
+    @Override public User read(JsonReader in, Object parent) throws IOException {
       // implement read: split name into firstName and lastName
       in.beginObject();
       in.nextName();
@@ -232,7 +232,7 @@ public void write(JsonWriter out, NullableClass value) throws IOException {
     }
 
     @Override
-    public NullableClass read(JsonReader in) throws IOException {
+    public NullableClass read(JsonReader in, Object parent) throws IOException {
       in.nextString();
       return new NullableClass();
     }
@@ -245,7 +245,7 @@ public NullableClass read(JsonReader in) throws IOException {
       out.value(value.name().toLowerCase(Locale.US));
     }
 
-    @Override public Foo read(JsonReader in) throws IOException {
+    @Override public Foo read(JsonReader in, Object parent) throws IOException {
       return Foo.valueOf(in.nextString().toUpperCase(Locale.US));
     }
   }
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
index 706fe60f8..e5075e4cb 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
@@ -67,7 +67,7 @@ public void testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter() {
         @Override public void write(JsonWriter out, Part part) throws IOException {
           throw new AssertionError();
         }
-        @Override public Part read(JsonReader in) throws IOException {
+        @Override public Part read(JsonReader in, Object parent) throws IOException {
           throw new AssertionError();
         }
       }).create();
@@ -112,7 +112,7 @@ public Part(String name) {
     @Override public void write(JsonWriter out, Part part) throws IOException {
       out.value("PartJsonFieldAnnotationAdapter");
     }
-    @Override public Part read(JsonReader in) throws IOException {
+    @Override public Part read(JsonReader in, Object parent) throws IOException {
       in.nextString();
       return new Part("PartJsonFieldAnnotationAdapter");
     }
@@ -125,7 +125,7 @@ public Part(String name) {
           out.value("GizmoPartTypeAdapterFactory");
         }
         @SuppressWarnings("unchecked")
-        @Override public T read(JsonReader in) throws IOException {
+        @Override public T read(JsonReader in, Object parent) throws IOException {
           in.nextString();
           return (T) new Part("GizmoPartTypeAdapterFactory");
         }
@@ -152,7 +152,7 @@ private User(String name) {
     @Override public void write(JsonWriter out, User user) throws IOException {
       out.value("UserClassAnnotationAdapter");
     }
-    @Override public User read(JsonReader in) throws IOException {
+    @Override public User read(JsonReader in, Object parent) throws IOException {
       in.nextString();
       return new User("UserClassAnnotationAdapter");
     }
@@ -171,7 +171,7 @@ private User(String name) {
     @Override public void write(JsonWriter out, User user) throws IOException {
       out.value("UserFieldAnnotationAdapter");
     }
-    @Override public User read(JsonReader in) throws IOException {
+    @Override public User read(JsonReader in, Object parent) throws IOException {
       in.nextString();
       return new User("UserFieldAnnotationAdapter");
     }
@@ -181,7 +181,7 @@ private User(String name) {
     @Override public void write(JsonWriter out, User user) throws IOException {
       out.value("RegisteredUserAdapter");
     }
-    @Override public User read(JsonReader in) throws IOException {
+    @Override public User read(JsonReader in, Object parent) throws IOException {
       in.nextString();
       return new User("RegisteredUserAdapter");
     }
@@ -256,7 +256,7 @@ private GadgetWithPrimitivePart(long part) {
       @Override public void write(JsonWriter out, Long value) throws IOException {
         out.value(value.toString());
       }
-      @Override public Long read(JsonReader in) throws IOException {
+      @Override public Long read(JsonReader in, Object parent) throws IOException {
         return in.nextLong();
       }
     };
@@ -296,7 +296,7 @@ public void testFieldAnnotationWorksForParameterizedType() {
           out.value("GizmoPartTypeAdapterFactory");
         }
         @SuppressWarnings("unchecked")
-        @Override public T read(JsonReader in) throws IOException {
+        @Override public T read(JsonReader in, Object parent) throws IOException {
           in.nextString();
           return (T) Arrays.asList(new Part("GizmoPartTypeAdapterFactory"));
         }
diff --git a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java b/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
index 1284e2c9b..3b9fd8a00 100644
--- a/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
+++ b/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
@@ -162,7 +162,7 @@ protected RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {
       }
 
       return new TypeAdapter<R>() {
-        @Override public R read(JsonReader in) throws IOException {
+        @Override public R read(JsonReader in, Object parent) throws IOException {
           JsonElement jsonElement = Streams.parse(in);
           JsonElement labelJsonElement = jsonElement.getAsJsonObject().get(typeFieldName);
           if (labelJsonElement == null) {
diff --git a/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java b/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java
index 45e85342c..affe4c7de 100644
--- a/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java
+++ b/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java
@@ -99,7 +99,7 @@ public void testDeserializeWithCustomTypeAdapter() throws IOException {
 
   private void usePersonNameAdapter() {
     TypeAdapter<Person> personNameAdapter = new TypeAdapter<Person>() {
-      @Override public Person read(JsonReader in) throws IOException {
+      @Override public Person read(JsonReader in, Object parent) throws IOException {
         String name = in.nextString();
         return new Person(name, -1);
       }
@@ -151,7 +151,7 @@ public void testDeserialize2dArray() throws IOException {
 
   public void testNullSafe() {
     TypeAdapter<Person> typeAdapter = new TypeAdapter<Person>() {
-      @Override public Person read(JsonReader in) throws IOException {
+      @Override public Person read(JsonReader in, Object parent) throws IOException {
         String[] values = in.nextString().split(",");
         return new Person(values[0], Integer.parseInt(values[1]));
       }
diff --git a/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java b/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java
index 5f881530d..53e23fd6e 100644
--- a/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java
+++ b/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java
@@ -140,7 +140,7 @@ public Foo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContex
 
   private TypeAdapter<Foo> newTypeAdapter(final String name) {
     return new TypeAdapter<Foo>() {
-      @Override public Foo read(JsonReader in) throws IOException {
+      @Override public Foo read(JsonReader in, Object parent) throws IOException {
         return new Foo(in.nextString() + " via " + name);
       }
       @Override public void write(JsonWriter out, Foo value) throws IOException {
diff --git a/pom.xml b/pom.xml
index c6b454b57..b2fa3bfc9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -11,7 +11,7 @@
 
   <groupId>com.google.code.gson</groupId>
   <artifactId>gson-parent</artifactId>
-  <version>2.8.3-SNAPSHOT</version>
+  <version>2.8.2-forked</version>
   <packaging>pom</packaging>
 
   <name>Gson Parent</name>
