diff --git a/gson/src/test/java/com/mc636/lb03/TestFromJason.java b/gson/src/test/java/com/mc636/lb03/TestFromJason.java
index 05c94d184..bdccaf56c 100644
--- a/gson/src/test/java/com/mc636/lb03/TestFromJason.java
+++ b/gson/src/test/java/com/mc636/lb03/TestFromJason.java
@@ -33,19 +33,21 @@ public void CT1() {
 		}
 	}
 	
+	
 	/* test no-property Json into simple Java Object */
 	@Test
-	public void CT9() {
+	public void CT2() {
 		String json = "{}";
 		json = json.replace('\'', '\"');
 		User usr = gson.fromJson(json, User.class);
 		assertEquals(usr.name, null);
 		assertEquals(usr.age, 0);
 	}
+
 	
 	/* test missing-brackets Json into simple Java Object */
 	@Test
-	public void CT12() {
+	public void CT3() {
 		String json = "{";
 		json = json.replace('\'', '\"');
 		try {
@@ -53,48 +55,13 @@ public void CT12() {
 			fail();
 		}
 		catch (RuntimeException expected) {
-			
 		}
-
-	}
-	
-	/* test no-property Json into simple Java Object */
-	@Test
-	public void CT10() {
-		String json = "{'carro': True}";
-		json = json.replace('\'', '\"');
-		User usr = gson.fromJson(json, User.class);
-		assertEquals(usr.name, null);
-		assertEquals(usr.age, 0);
-	}
-	
-	/* test missing-comma Json into simple Java Object */
-	@Test
-	public void CT11() {
-		String json = "{'name': 'Jose Emanuel' 'age': 26, 'isParent': false}";
-		json = json.replace('\'', '\"');
-		try {
-			User usr = gson.fromJson(json, User.class);
-			fail();
-		}
-		catch(RuntimeException expected) {}
-	}
-	
-	/* test Json to simple Java Object with missing property */
-	@Test
-	public void CT2() {
-		String json = "{'name': 'Jose Emanuel', 'isParent': false}";
-		json = json.replace('\'', '\"');
-		User usr = gson.fromJson(json, User.class);
-		assertEquals(usr.name, "Jose Emanuel");
-		assertFalse(usr.isParent);
-		assertEquals(usr.age, 0);
 	}
 	
 	/* test Json with wrong syntax to simple Java Object */
 	@Test
-	public void CT3()  throws  IOException {
-		String json = "{'name' 'Jose Emanuel', 'isParent': false}";
+	public void CT3b()  throws  IOException {
+		String json = "'name': 'Jose Emanuel', 'isParent': false}";
 		json = json.replace('\'', '\"');
 		try {
 			User usr = gson.fromJson(json, User.class);
@@ -106,24 +73,21 @@ public void CT3()  throws  IOException {
 		catch(JsonSyntaxException expected) {}
 	}
 	
-	/* test Json with wrong syntax to simple Java Object */
+	/* test missing-comma Json into simple Java Object */
 	@Test
-	public void CT8()  throws  IOException {
-		String json = "'name': 'Jose Emanuel', 'isParent': false}";
+	public void CT4() {
+		String json = "{'name': 'Jose Emanuel' 'age': 26, 'isParent': false}";
 		json = json.replace('\'', '\"');
 		try {
 			User usr = gson.fromJson(json, User.class);
-			assertEquals(usr.name, "Jose Emanuel");
-			assertFalse(usr.isParent);
-			assertEquals(usr.age, 0);
 			fail();
 		}
-		catch(JsonSyntaxException expected) {}
+		catch(RuntimeException expected) {}
 	}
 	
 	/* test Json with missing double quote to simple Java Object */
 	@Test
-	public void CT13()  throws  IOException {
+	public void CT5()  throws  IOException {
 		String json = "{'name: 'Jose Emanuel, 'isParent': false}";
 		json = json.replace('\'', '\"');
 		try {
@@ -133,10 +97,9 @@ public void CT13()  throws  IOException {
 		catch(JsonSyntaxException expected) {}
 	}
 	
-	
 	/* test Json with missing attib value to simple Java Object */
 	@Test
-	public void CT14()  throws  IOException {
+	public void CT6()  throws  IOException {
 		String json = "{'name': 'Jose Emanuel', 'isParent': }";
 		json = json.replace('\'', '\"');
 		try {
@@ -145,49 +108,26 @@ public void CT14()  throws  IOException {
 		}
 		catch(JsonSyntaxException expected) {}
 	}
-
-	public void CT15() {
-		String json = "{'intnumber': 5468268, 'number': 15454.36}";
-		json = json.replace('\'', '\"');
-		Numbers n = gson.fromJson(json, Numbers.class);
-		assertEquals(n.intnumber, 5468268);
-		assertEquals(n.number, 15454.36, 0.001f);
-	}
-	
-	public void CT16() {
-		String json = "{'intnumber': 5468268, 'number': 1.2e3}";
-		json = json.replace('\'', '\"');
-		Numbers n = gson.fromJson(json, Numbers.class);
-		assertEquals(n.intnumber, 5468268);
-		assertEquals(n.number, 1200, 0.001f);
-	}
-	
-	public void CT18() {
-		String json = "{'name': 'Jose Emanuel', 'isParent': 7}";
-		json = json.replace('\'', '\"');
-		try {
-			gson.fromJson(json, Numbers.class);
-			fail();
-		}
-		catch(RuntimeException expected) {}
-
-	}
 	
-	public void CT17() {
-		String json = "{'intnumber': 5468268, 'number': --1.2e3}";
+	/* test Json with wrong syntax to simple Java Object */
+	@Test
+	public void CT7()  throws  IOException {
+		String json = "{'name' 'Jose Emanuel', 'isParent': false}";
 		json = json.replace('\'', '\"');
 		try {
-			gson.fromJson(json, Numbers.class);
+			User usr = gson.fromJson(json, User.class);
+			assertEquals(usr.name, "Jose Emanuel");
+			assertFalse(usr.isParent);
+			assertEquals(usr.age, 0);
 			fail();
 		}
-		catch(RuntimeException expected) {}
-
+		catch(JsonSyntaxException expected) {}
 	}
 	
 	
 	/* Test arrays: valid */
 	@Test
-	public void CT4() {
+	public void CT8() {
 		String json = "[1, 2, 3, 4, 5, 6]";
 		
 		int [] array = gson.fromJson(json, int[].class);
@@ -199,10 +139,10 @@ public void CT4() {
 		assertEquals(array[5], 6);
 	}
 	
-	/* Test arrays: wrong type */
+	/* Test arrays: missing square bracket */
 	@Test
-	public void CT5() {
-		String json = "[a, 2, 3, 4, 5, 6]";
+	public void CT9() {
+		String json = "[1, 2, 3, 4, 5, 6";
 		
 		try {
 		int [] array = gson.fromJson(json, int[].class);
@@ -215,15 +155,14 @@ public void CT5() {
 			fail();
 		}
 		catch( RuntimeException expected) {
-			assertEquals("java.lang.NumberFormatException: For input string: 'a'".replace('\'', '\"'), expected.getMessage());
+			
 		}
 	}
 	
-	
-	/* Test arrays: missing comma */
+	/* Test arrays: wrong type */
 	@Test
-	public void CT6() {
-		String json = "[1, 2, 3 4, 5, 6]";
+	public void CT10() {
+		String json = "[a, 2, 3, 4, 5, 6]";
 		
 		try {
 		int [] array = gson.fromJson(json, int[].class);
@@ -236,14 +175,14 @@ public void CT6() {
 			fail();
 		}
 		catch( RuntimeException expected) {
-			
+			assertEquals("java.lang.NumberFormatException: For input string: 'a'".replace('\'', '\"'), expected.getMessage());
 		}
 	}
 	
-	/* Test arrays: missing square bracket */
+	/* Test arrays: missing comma */
 	@Test
-	public void CT7() {
-		String json = "[1, 2, 3, 4, 5, 6";
+	public void CT11() {
+		String json = "[1, 2, 3 4, 5, 6]";
 		
 		try {
 		int [] array = gson.fromJson(json, int[].class);
@@ -259,5 +198,96 @@ public void CT7() {
 			
 		}
 	}
+	
+	@Test
+	public void CT12() {
+		String json = "{'intnumber': 5468268, 'number': 15454.36}";
+		json = json.replace('\'', '\"');
+		Numbers n = gson.fromJson(json, Numbers.class);
+		assertEquals(n.intnumber, 5468268);
+		assertEquals(n.number, 15454.36, 0.001f);
+	}
+	
+	@Test
+	public void CT13() {
+		String json = "{'intnumber': 5468268, 'number': 1.2e3}";
+		json = json.replace('\'', '\"');
+		Numbers n = gson.fromJson(json, Numbers.class);
+		assertEquals(n.intnumber, 5468268);
+		assertEquals(n.number, 1200, 0.001f);
+	}
+	
+	@Test
+	public void CT14() {
+		String json = "{'intnumber': 5468268, 'number': --1.2e3}";
+		json = json.replace('\'', '\"');
+		try {
+			gson.fromJson(json, Numbers.class);
+			fail();
+		}
+		catch(RuntimeException expected) {}
+
+	}
+	
+	@Test
+	public void CT15() {
+		String json = "{'name': 'Jose Emanuel', 'isParent': 7}";
+		json = json.replace('\'', '\"');
+		try {
+			gson.fromJson(json, Numbers.class);
+			fail();
+		}
+		catch(RuntimeException expected) {}
+
+	}
+
+	
+	/* test no-property Json into simple Java Object */
+	@Test
+	public void CT16() {
+		String json = "{'carro': True}";
+		json = json.replace('\'', '\"');
+		User usr = gson.fromJson(json, User.class);
+		assertEquals(usr.name, null);
+		assertEquals(usr.age, 0);
+	}
+	
+	
+	
+	/* test Json to simple Java Object with missing property */
+	@Test
+	public void CT17() {
+		String json = "{'name': 'Jose Emanuel', 'isParent': false}";
+		json = json.replace('\'', '\"');
+		User usr = gson.fromJson(json, User.class);
+		assertEquals(usr.name, "Jose Emanuel");
+		assertFalse(usr.isParent);
+		assertEquals(usr.age, 0);
+	}
+	
+
+
+
+
+	
+
+	
+	
+	
+
+	
+
+	
+
+
+	
+
+	
+
+	
+	
+	
+	
+
 	
 }
diff --git a/gson/src/test/java/com/mc636/lb03/TestPeek.java b/gson/src/test/java/com/mc636/lb03/TestPeek.java
new file mode 100644
index 000000000..fa6ff762c
--- /dev/null
+++ b/gson/src/test/java/com/mc636/lb03/TestPeek.java
@@ -0,0 +1,209 @@
+package com.mc636.lb03;
+
+import static org.junit.Assert.*;
+
+import java.io.IOException;
+import java.io.Reader;
+import java.io.StringReader;
+
+import org.junit.Test;
+
+import com.google.gson.Gson;
+import com.google.gson.stream.JsonReader;
+import com.google.gson.stream.JsonToken;
+
+public class TestPeek {
+	Gson gson = new Gson();
+	Reader reader;
+	JsonReader jreader;
+	
+	
+	/* Test invalid token */
+	@Test
+	public void CT1() throws Exception {
+		String json = "$'name': 'Jose Emanuel', 'scenes': [1, 2, 3, 4]}";
+		json = json.replace('\'', '\"');
+		try {
+			reader = new StringReader(json);
+			jreader = new JsonReader(reader);
+			jreader.setLenient(true);
+			jreader.beginObject();
+			fail();
+		}
+		catch(RuntimeException expected) {}
+	}
+	
+	/* Test open brackets  */
+	@Test
+	public void CT2() throws IOException {
+		String json = "{'name': 'Jose Emanuel', 'scenes': [1, 2, 3, 4]}";
+		json = json.replace('\'', '\"');
+		
+		reader = new StringReader(json);
+		jreader = new JsonReader(reader);
+		assertEquals(jreader.peek(), JsonToken.BEGIN_OBJECT);
+	}
+	
+	/* Test close brackets */
+	@Test
+	public void CT3() throws IOException {
+		String json = "{'name': 'Jose Emanuel'}";
+		json = json.replace('\'', '\"');
+		
+		reader = new StringReader(json);
+		jreader = new JsonReader(reader);
+		jreader.beginObject();
+		jreader.nextName();
+		jreader.nextString();
+		assertEquals(jreader.peek(), JsonToken.END_OBJECT);
+	}
+	
+	/* Test open squared brackets */
+	@Test
+	public void CT4() throws IOException {
+		String json = "{'aa': [1, 2, 3]}";
+		json = json.replace('\'', '\"');
+		
+		reader = new StringReader(json);
+		jreader = new JsonReader(reader);
+		jreader.beginObject();
+		jreader.nextName();
+		assertEquals(jreader.peek(), JsonToken.BEGIN_ARRAY);
+	}
+	
+	/* Test close squared brackets */
+	@Test
+	public void CT5() throws IOException {
+		String json = "{'aa': [1, 2, 3]}";
+		json = json.replace('\'', '\"');
+		
+		reader = new StringReader(json);
+		jreader = new JsonReader(reader);
+		jreader.beginObject();
+		jreader.nextName();
+		jreader.beginArray();
+		jreader.nextInt();
+		jreader.nextInt();
+		jreader.nextInt();
+		assertEquals(jreader.peek(), JsonToken.END_ARRAY);
+	}
+	
+	/* Test name of property */
+	@Test
+	public void CT6() throws IOException {
+		String json = "{'name': 'Jose Emanuel', 'scenes': [1, 2, 3, 4]}";
+		json = json.replace('\'', '\"');
+		
+		reader = new StringReader(json);
+		jreader = new JsonReader(reader);
+		jreader.beginObject();
+		assertEquals(jreader.peek(), JsonToken.NAME);
+	}
+	
+	/* Test integer */
+	@Test
+	public void CT7() throws IOException {
+		String json = "{'aa': [1, 2, 3]}";
+		json = json.replace('\'', '\"');
+		
+		reader = new StringReader(json);
+		jreader = new JsonReader(reader);
+		jreader.beginObject();
+		jreader.nextName();
+		jreader.beginArray();
+		assertEquals(jreader.peek(), JsonToken.NUMBER);
+	}
+	
+	/* Test float number */
+	@Test
+	public void CT8() throws IOException {
+		String json = "{'aa': [1, 2, 3.145]}";
+		json = json.replace('\'', '\"');
+		
+		reader = new StringReader(json);
+		jreader = new JsonReader(reader);
+		jreader.beginObject();
+		jreader.nextName();
+		jreader.beginArray();
+		jreader.nextInt();
+		jreader.nextInt();
+		assertEquals(jreader.peek(), JsonToken.NUMBER);
+	}
+	
+	/* Test scientific number  */
+	@Test
+	public void CT9() throws IOException {
+		String json = "{'aa': [1, 2, 3.145e10]}";
+		json = json.replace('\'', '\"');
+		
+		reader = new StringReader(json);
+		jreader = new JsonReader(reader);
+		jreader.beginObject();
+		jreader.nextName();
+		jreader.beginArray();
+		jreader.nextInt();
+		jreader.nextInt();
+		assertEquals(jreader.peek(), JsonToken.NUMBER);
+	}
+	
+	/* Test string */
+	@Test 
+	public void CT10() throws IOException {
+		String json = "{'name': 'Jose Emanuel', 'scenes': [1, 2, 3, 4]}";
+		json = json.replace('\'', '\"');
+		
+		reader = new StringReader(json);
+		jreader = new JsonReader(reader);
+		jreader.beginObject();
+		jreader.nextName();
+		
+		assertEquals(jreader.peek(), JsonToken.STRING);
+	}
+	
+	/* Test null */
+	@Test
+	public void CT11() throws IOException {
+		String json = "{'name': null, 'scenes': [1, 2, 3, 4]}";
+		json = json.replace('\'', '\"');
+		
+		reader = new StringReader(json);
+		jreader = new JsonReader(reader);
+		jreader.beginObject();
+		jreader.nextName();
+		assertEquals(jreader.peek(), JsonToken.NULL);
+	}
+	
+	/* Test end of Json */ 
+	@Test 
+	public void CT12() throws IOException {
+		String json = "{'name': 'Jose Emanuel', 'scenes': 0}";
+		json = json.replace('\'', '\"');
+		
+		reader = new StringReader(json);
+		jreader = new JsonReader(reader);
+		jreader.beginObject();
+		jreader.nextName();
+		jreader.nextString();
+		jreader.nextName();
+		jreader.nextInt();
+
+		assertEquals(jreader.peek(), JsonToken.END_OBJECT);
+	}
+	
+	/* Test boolean */
+	@Test 
+	public void CT13() throws IOException {
+		String json = "{'name': 'Jose Emanuel', 'scenes': true}";
+		json = json.replace('\'', '\"');
+		
+		reader = new StringReader(json);
+		jreader = new JsonReader(reader);
+		jreader.beginObject();
+		jreader.nextName();
+		jreader.nextString();
+		jreader.nextName();
+
+		assertEquals(jreader.peek(), JsonToken.BOOLEAN);
+	}
+
+}
