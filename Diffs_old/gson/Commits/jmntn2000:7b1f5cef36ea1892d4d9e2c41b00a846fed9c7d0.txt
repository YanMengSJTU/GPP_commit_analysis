diff --git a/gson/pom.xml b/gson/pom.xml
index 3b1190d3d..516a1c844 100644
--- a/gson/pom.xml
+++ b/gson/pom.xml
@@ -3,7 +3,7 @@
   <groupId>com.google.code.gson</groupId>
   <artifactId>gson</artifactId>
   <packaging>jar</packaging>
-  <version>2.3.2-SNAPSHOT</version>
+  <version>2.3.3.PS</version>
   <inceptionYear>2008</inceptionYear>
   <name>Gson</name>
   <parent>
diff --git a/gson/src/main/java/com/google/gson/GsonBuilder.java b/gson/src/main/java/com/google/gson/GsonBuilder.java
index e6c0b8c0c..acdc66f99 100644
--- a/gson/src/main/java/com/google/gson/GsonBuilder.java
+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java
@@ -16,6 +16,10 @@
 
 package com.google.gson;
 
+import com.google.gson.internal.$Gson$Preconditions;
+import com.google.gson.internal.Excluder;
+import com.google.gson.internal.bind.TypeAdapters;
+import com.google.gson.reflect.TypeToken;
 import java.lang.reflect.Type;
 import java.sql.Timestamp;
 import java.text.DateFormat;
@@ -26,11 +30,6 @@
 import java.util.List;
 import java.util.Map;
 
-import com.google.gson.internal.$Gson$Preconditions;
-import com.google.gson.internal.Excluder;
-import com.google.gson.internal.bind.TypeAdapters;
-import com.google.gson.reflect.TypeToken;
-
 /**
  * <p>Use this builder to construct a {@link Gson} instance when you need to set configuration
  * options other than the default. For {@link Gson} with default configuration, it is simpler to
@@ -82,7 +81,9 @@
   private boolean serializeSpecialFloatingPointValues;
   private boolean escapeHtmlChars = true;
   private boolean prettyPrinting;
-  private boolean generateNonExecutableJson;
+    private boolean generateNonExecutableJson;
+    private boolean upperCaseStrings = false;
+    private boolean excludeDuplicateObjects = false;
 
   /**
    * Creates a GsonBuilder instance that can be used to build Gson with various configuration
@@ -93,8 +94,24 @@
   public GsonBuilder() {
   }
 
-  /**
-   * Configures Gson to enable versioning support.
+    public boolean isUpperCaseStrings() {
+        return upperCaseStrings;
+    }
+
+    public void setUpperCaseStrings(boolean upperCaseStrings) {
+        this.upperCaseStrings = upperCaseStrings;
+    }
+
+    public boolean isExcludeDuplicateObjects() {
+        return excludeDuplicateObjects;
+    }
+
+    public void setExcludeDuplicateObjects(boolean excludeDuplicateObjects) {
+        this.excludeDuplicateObjects = excludeDuplicateObjects;
+    }
+
+    /**
+     * Configures Gson to enable versioning support.
    *
    * @param ignoreVersionsAfter any field or type marked with a version higher than this value
    * are ignored during serialization or deserialization.
@@ -545,7 +562,7 @@ public Gson create() {
     return new Gson(excluder, fieldNamingPolicy, instanceCreators,
         serializeNulls, complexMapKeySerialization,
         generateNonExecutableJson, escapeHtmlChars, prettyPrinting,
-        serializeSpecialFloatingPointValues, longSerializationPolicy, factories);
+              serializeSpecialFloatingPointValues, longSerializationPolicy, factories, upperCaseStrings, excludeDuplicateObjects);
   }
 
   private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle,
diff --git a/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java b/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java
index c5afee4a3..266a1cd8e 100644
--- a/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java
+++ b/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java
@@ -15,12 +15,6 @@
  */
 package com.google.gson.functional;
 
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Collection;
-
-import junit.framework.TestCase;
-
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.JsonElement;
@@ -28,8 +22,12 @@
 import com.google.gson.JsonSerializationContext;
 import com.google.gson.JsonSerializer;
 import com.google.gson.common.TestTypes.ClassOverridingEquals;
+import java.lang.reflect.Type;
 import java.math.BigInteger;
+import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
+import junit.framework.TestCase;
 
 /**
  * Functional tests related to circular reference detection and error reporting.
@@ -43,7 +41,7 @@
   @Override
   protected void setUp() throws Exception {
     super.setUp();
-    gson = new Gson(false, true, true, true, true);
+      gson = new Gson(false, true, false, true, true);
   }
 
   public void testCircularSerialization() throws Exception {
@@ -72,12 +70,11 @@ public void testCircularSerialization() throws Exception {
       a.parts.add(l3);
       a.parts.add(l3);
     try {
-      String res = gson.toJson(a);
+        String res = gson.toJson(l1);
         System.out.println(res);
         System.out.println();
-      fail("Circular types should not get printed!");
     } catch (Exception expected) {
-        System.out.println("j");
+        fail("Circular types should not get printed!");
     }
   }
 
