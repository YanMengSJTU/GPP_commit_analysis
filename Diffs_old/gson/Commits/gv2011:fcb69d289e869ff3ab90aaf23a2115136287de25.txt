diff --git a/LICENSE.txt b/LICENSE.txt
index a2628f084..1df7837b3 100644
--- a/LICENSE.txt
+++ b/LICENSE.txt
@@ -1,31 +1,31 @@
-The MIT License (MIT) (in combination with Apache License 2.0)
-
-Copyright © 2016-2019 by Vinz (https://github.com/gv2011)
-
-This is a derivative work (fork) of:
-
-  https://github.com/google/gson
-  Copyright © ?-2016 Google Inc.
-  Original license: Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0)
-  
-The complete history of individual files is available at: https://github.com/gv2011/gsoncore
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following two conditions:
-
-1. The above copyright notice and this permission notice shall be included in
-all copies or substantial portions of the Software.
-
-2. The conditions for derivative works from Apache License 2.0 must be met.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-THE SOFTWARE.
+The MIT License (MIT) (in combination with Apache License 2.0)
+
+Copyright © 2016-2019 by Vinz (https://github.com/gv2011)
+
+This is a derivative work (fork) of:
+
+  https://github.com/google/gson
+  Copyright © ?-2016 Google Inc.
+  Original license: Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0)
+  
+The complete history of individual files is available at: https://github.com/gv2011/gsoncore
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following two conditions:
+
+1. The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+2. The conditions for derivative works from Apache License 2.0 must be met.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
diff --git a/src/test/java/com/github/gv2011/gson/GsonBuilderTest.java b/src/test/java/com/github/gv2011/gson/GsonBuilderTest.java
index cdaf137e8..844da31e9 100644
--- a/src/test/java/com/github/gv2011/gson/GsonBuilderTest.java
+++ b/src/test/java/com/github/gv2011/gson/GsonBuilderTest.java
@@ -1,90 +1,90 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.github.gv2011.gson;
-
-import java.lang.reflect.Modifier;
-import java.lang.reflect.Type;
-
-import junit.framework.TestCase;
-
-import com.github.gv2011.gson.Gson;
-import com.github.gv2011.gson.GsonBuilder;
-import com.github.gv2011.gson.TypeAdapter;
-import com.github.gv2011.gson.stream.JsonReader;
-import com.github.gv2011.gson.stream.JsonWriter;
-
-/**
- * Unit tests for {@link GsonBuilder}.
- *
- * @author Inderjeet Singh
- */
-public class GsonBuilderTest extends TestCase {
-  private static final TypeAdapter<Object> NULL_TYPE_ADAPTER = new TypeAdapter<Object>() {
-    @Override public void write(JsonWriter out, Object value) {
-      throw new AssertionError();
-    }
-    @Override public Object read(JsonReader in) {
-      throw new AssertionError();
-    }
-  };
-
-  public void testCreatingMoreThanOnce() {
-    GsonBuilder builder = new GsonBuilder();
-    builder.create();
-    builder.create();
-  }
-
-  public void testExcludeFieldsWithModifiers() {
-    Gson gson = new GsonBuilder()
-        .excludeFieldsWithModifiers(Modifier.VOLATILE, Modifier.PRIVATE)
-        .create();
-    assertEquals("{\"d\":\"d\"}", gson.toJson(new HasModifiers()));
-  }
-
-  public void testRegisterTypeAdapterForCoreType() {
-    Type[] types = {
-        byte.class,
-        int.class,
-        double.class,
-        Short.class,
-        Long.class,
-        String.class,
-    };
-    for (Type type : types) {
-      new GsonBuilder().registerTypeAdapter(type, NULL_TYPE_ADAPTER);
-    }
-  }
-
-  @SuppressWarnings("unused")
-  static class HasModifiers {
-    private String a = "a";
-    volatile String b = "b";
-    private volatile String c = "c";
-    String d = "d";
-  }
-
-  public void testTransientFieldExclusion() {
-    Gson gson = new GsonBuilder()
-        .excludeFieldsWithModifiers()
-        .create();
-    assertEquals("{\"a\":\"a\"}", gson.toJson(new HasTransients()));
-  }
-
-  static class HasTransients {
-    transient String a = "a";
-  }
-}
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.github.gv2011.gson;
+
+import java.lang.reflect.Modifier;
+import java.lang.reflect.Type;
+
+import junit.framework.TestCase;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonWriter;
+
+/**
+ * Unit tests for {@link GsonBuilder}.
+ *
+ * @author Inderjeet Singh
+ */
+public class GsonBuilderTest extends TestCase {
+  private static final TypeAdapter<Object> NULL_TYPE_ADAPTER = new TypeAdapter<Object>() {
+    @Override public void write(JsonWriter out, Object value) {
+      throw new AssertionError();
+    }
+    @Override public Object read(JsonReader in) {
+      throw new AssertionError();
+    }
+  };
+
+  public void testCreatingMoreThanOnce() {
+    GsonBuilder builder = new GsonBuilder();
+    builder.create();
+    builder.create();
+  }
+
+  public void testExcludeFieldsWithModifiers() {
+    Gson gson = new GsonBuilder()
+        .excludeFieldsWithModifiers(Modifier.VOLATILE, Modifier.PRIVATE)
+        .create();
+    assertEquals("{\"d\":\"d\"}", gson.toJson(new HasModifiers()));
+  }
+
+  public void testRegisterTypeAdapterForCoreType() {
+    Type[] types = {
+        byte.class,
+        int.class,
+        double.class,
+        Short.class,
+        Long.class,
+        String.class,
+    };
+    for (Type type : types) {
+      new GsonBuilder().registerTypeAdapter(type, NULL_TYPE_ADAPTER);
+    }
+  }
+
+  @SuppressWarnings("unused")
+  static class HasModifiers {
+    private String a = "a";
+    volatile String b = "b";
+    private volatile String c = "c";
+    String d = "d";
+  }
+
+  public void testTransientFieldExclusion() {
+    Gson gson = new GsonBuilder()
+        .excludeFieldsWithModifiers()
+        .create();
+    assertEquals("{\"a\":\"a\"}", gson.toJson(new HasTransients()));
+  }
+
+  static class HasTransients {
+    transient String a = "a";
+  }
+}
diff --git a/src/test/java/com/github/gv2011/gson/functional/ConcurrencyTest.java b/src/test/java/com/github/gv2011/gson/functional/ConcurrencyTest.java
index ce0631daf..05ecd0377 100644
--- a/src/test/java/com/github/gv2011/gson/functional/ConcurrencyTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/ConcurrencyTest.java
@@ -1,140 +1,140 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.github.gv2011.gson.functional;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-import com.github.gv2011.gson.Gson;
-
-import junit.framework.TestCase;
-
-/**
- * Tests for ensuring Gson thread-safety.
- * 
- * @author Inderjeet Singh
- * @author Joel Leitch
- */
-public class ConcurrencyTest extends TestCase {
-  private Gson gson;
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    gson = new Gson();
-  }
-
-  /**
-   * Source-code based on
-   * http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081
-   */
-  public void testSingleThreadSerialization() { 
-    MyObject myObj = new MyObject(); 
-    for (int i = 0; i < 10; i++) { 
-      gson.toJson(myObj); 
-    } 
-  } 
-
-  /**
-   * Source-code based on
-   * http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081
-   */
-  public void testSingleThreadDeserialization() { 
-    for (int i = 0; i < 10; i++) { 
-      gson.fromJson("{'a':'hello','b':'world','i':1}", MyObject.class); 
-    } 
-  } 
-
-  /**
-   * Source-code based on
-   * http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081
-   */
-  public void testMultiThreadSerialization() throws InterruptedException {
-    final CountDownLatch startLatch = new CountDownLatch(1);
-    final CountDownLatch finishedLatch = new CountDownLatch(10);
-    final AtomicBoolean failed = new AtomicBoolean(false);
-    ExecutorService executor = Executors.newFixedThreadPool(10);
-    for (int taskCount = 0; taskCount < 10; taskCount++) {
-      executor.execute(new Runnable() {
-        public void run() {
-          MyObject myObj = new MyObject();
-          try {
-            startLatch.await();
-            for (int i = 0; i < 10; i++) {
-              gson.toJson(myObj);
-            }
-          } catch (Throwable t) {
-            failed.set(true);
-          } finally {
-            finishedLatch.countDown();
-          }
-        }
-      });
-    }
-    startLatch.countDown();
-    finishedLatch.await();
-    assertFalse(failed.get());
-  }
-
-  /**
-   * Source-code based on
-   * http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081
-   */
-  public void testMultiThreadDeserialization() throws InterruptedException {
-    final CountDownLatch startLatch = new CountDownLatch(1);
-    final CountDownLatch finishedLatch = new CountDownLatch(10);
-    final AtomicBoolean failed = new AtomicBoolean(false);
-    ExecutorService executor = Executors.newFixedThreadPool(10);
-    for (int taskCount = 0; taskCount < 10; taskCount++) {
-      executor.execute(new Runnable() {
-        public void run() {
-          try {
-            startLatch.await();
-            for (int i = 0; i < 10; i++) {
-              gson.fromJson("{'a':'hello','b':'world','i':1}", MyObject.class); 
-            }
-          } catch (Throwable t) {
-            failed.set(true);
-          } finally {
-            finishedLatch.countDown();
-          }
-        }
-      });
-    }
-    startLatch.countDown();
-    finishedLatch.await();
-    assertFalse(failed.get());
-  }
-  
-  @SuppressWarnings("unused")
-  private static class MyObject {
-    String a;
-    String b;
-    int i;
-
-    MyObject() {
-      this("hello", "world", 42);
-    }
-
-    public MyObject(String a, String b, int i) {
-      this.a = a;
-      this.b = b;
-      this.i = i;
-    }
-  }
-}
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.github.gv2011.gson.functional;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicBoolean;
+
+import com.github.gv2011.gson.Gson;
+
+import junit.framework.TestCase;
+
+/**
+ * Tests for ensuring Gson thread-safety.
+ * 
+ * @author Inderjeet Singh
+ * @author Joel Leitch
+ */
+public class ConcurrencyTest extends TestCase {
+  private Gson gson;
+
+  @Override
+  protected void setUp() throws Exception {
+    super.setUp();
+    gson = new Gson();
+  }
+
+  /**
+   * Source-code based on
+   * http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081
+   */
+  public void testSingleThreadSerialization() { 
+    MyObject myObj = new MyObject(); 
+    for (int i = 0; i < 10; i++) { 
+      gson.toJson(myObj); 
+    } 
+  } 
+
+  /**
+   * Source-code based on
+   * http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081
+   */
+  public void testSingleThreadDeserialization() { 
+    for (int i = 0; i < 10; i++) { 
+      gson.fromJson("{'a':'hello','b':'world','i':1}", MyObject.class); 
+    } 
+  } 
+
+  /**
+   * Source-code based on
+   * http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081
+   */
+  public void testMultiThreadSerialization() throws InterruptedException {
+    final CountDownLatch startLatch = new CountDownLatch(1);
+    final CountDownLatch finishedLatch = new CountDownLatch(10);
+    final AtomicBoolean failed = new AtomicBoolean(false);
+    ExecutorService executor = Executors.newFixedThreadPool(10);
+    for (int taskCount = 0; taskCount < 10; taskCount++) {
+      executor.execute(new Runnable() {
+        public void run() {
+          MyObject myObj = new MyObject();
+          try {
+            startLatch.await();
+            for (int i = 0; i < 10; i++) {
+              gson.toJson(myObj);
+            }
+          } catch (Throwable t) {
+            failed.set(true);
+          } finally {
+            finishedLatch.countDown();
+          }
+        }
+      });
+    }
+    startLatch.countDown();
+    finishedLatch.await();
+    assertFalse(failed.get());
+  }
+
+  /**
+   * Source-code based on
+   * http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081
+   */
+  public void testMultiThreadDeserialization() throws InterruptedException {
+    final CountDownLatch startLatch = new CountDownLatch(1);
+    final CountDownLatch finishedLatch = new CountDownLatch(10);
+    final AtomicBoolean failed = new AtomicBoolean(false);
+    ExecutorService executor = Executors.newFixedThreadPool(10);
+    for (int taskCount = 0; taskCount < 10; taskCount++) {
+      executor.execute(new Runnable() {
+        public void run() {
+          try {
+            startLatch.await();
+            for (int i = 0; i < 10; i++) {
+              gson.fromJson("{'a':'hello','b':'world','i':1}", MyObject.class); 
+            }
+          } catch (Throwable t) {
+            failed.set(true);
+          } finally {
+            finishedLatch.countDown();
+          }
+        }
+      });
+    }
+    startLatch.countDown();
+    finishedLatch.await();
+    assertFalse(failed.get());
+  }
+  
+  @SuppressWarnings("unused")
+  private static class MyObject {
+    String a;
+    String b;
+    int i;
+
+    MyObject() {
+      this("hello", "world", 42);
+    }
+
+    public MyObject(String a, String b, int i) {
+      this.a = a;
+      this.b = b;
+      this.i = i;
+    }
+  }
+}
diff --git a/src/test/java/com/github/gv2011/gson/functional/InternationalizationTest.java b/src/test/java/com/github/gv2011/gson/functional/InternationalizationTest.java
index c10d393b9..443ba233f 100644
--- a/src/test/java/com/github/gv2011/gson/functional/InternationalizationTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/InternationalizationTest.java
@@ -1,71 +1,71 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.github.gv2011.gson.functional;
-
-import com.github.gv2011.gson.Gson;
-
-import junit.framework.TestCase;
-
-/**
- * Functional tests for internationalized strings.
- *
- * @author Inderjeet Singh
- */
-public class InternationalizationTest extends TestCase {
-  private Gson gson;
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    gson = new Gson();
-  }
-
-  /*
-  public void testStringsWithRawChineseCharactersSerialization() throws Exception {
-    String target = "好好好";
-    String json = gson.toJson(target);
-    String expected = "\"\\u597d\\u597d\\u597d\"";
-    assertEquals(expected, json);
-  }
-  */
-
-  public void testStringsWithRawChineseCharactersDeserialization() throws Exception {
-    String expected = "好好好";
-    String json = "\"" + expected + "\"";
-    String actual = gson.fromJson(json, String.class);
-    assertEquals(expected, actual);
-  }
-
-  public void testStringsWithUnicodeChineseCharactersSerialization() throws Exception {
-    String target = "\u597d\u597d\u597d";
-    String json = gson.toJson(target);
-    String expected = "\"\u597d\u597d\u597d\"";
-    assertEquals(expected, json);
-  }
-
-  public void testStringsWithUnicodeChineseCharactersDeserialization() throws Exception {
-    String expected = "\u597d\u597d\u597d";
-    String json = "\"" + expected + "\"";
-    String actual = gson.fromJson(json, String.class);
-    assertEquals(expected, actual);
-  }
-
-  public void testStringsWithUnicodeChineseCharactersEscapedDeserialization() throws Exception {
-    String actual = gson.fromJson("'\\u597d\\u597d\\u597d'", String.class);
-    assertEquals("\u597d\u597d\u597d", actual);
-  }
-}
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+
+import junit.framework.TestCase;
+
+/**
+ * Functional tests for internationalized strings.
+ *
+ * @author Inderjeet Singh
+ */
+public class InternationalizationTest extends TestCase {
+  private Gson gson;
+
+  @Override
+  protected void setUp() throws Exception {
+    super.setUp();
+    gson = new Gson();
+  }
+
+  /*
+  public void testStringsWithRawChineseCharactersSerialization() throws Exception {
+    String target = "好好好";
+    String json = gson.toJson(target);
+    String expected = "\"\\u597d\\u597d\\u597d\"";
+    assertEquals(expected, json);
+  }
+  */
+
+  public void testStringsWithRawChineseCharactersDeserialization() throws Exception {
+    String expected = "好好好";
+    String json = "\"" + expected + "\"";
+    String actual = gson.fromJson(json, String.class);
+    assertEquals(expected, actual);
+  }
+
+  public void testStringsWithUnicodeChineseCharactersSerialization() throws Exception {
+    String target = "\u597d\u597d\u597d";
+    String json = gson.toJson(target);
+    String expected = "\"\u597d\u597d\u597d\"";
+    assertEquals(expected, json);
+  }
+
+  public void testStringsWithUnicodeChineseCharactersDeserialization() throws Exception {
+    String expected = "\u597d\u597d\u597d";
+    String json = "\"" + expected + "\"";
+    String actual = gson.fromJson(json, String.class);
+    assertEquals(expected, actual);
+  }
+
+  public void testStringsWithUnicodeChineseCharactersEscapedDeserialization() throws Exception {
+    String actual = gson.fromJson("'\\u597d\\u597d\\u597d'", String.class);
+    assertEquals("\u597d\u597d\u597d", actual);
+  }
+}
diff --git a/src/test/java/com/github/gv2011/gson/functional/NullObjectAndFieldTest.java b/src/test/java/com/github/gv2011/gson/functional/NullObjectAndFieldTest.java
index 178dc4280..e169a3888 100644
--- a/src/test/java/com/github/gv2011/gson/functional/NullObjectAndFieldTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/NullObjectAndFieldTest.java
@@ -1,240 +1,240 @@
-/*
- * Copyright (C) 2008 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.github.gv2011.gson.functional;
-
-import com.github.gv2011.gson.Gson;
-import com.github.gv2011.gson.GsonBuilder;
-import com.github.gv2011.gson.JsonDeserializationContext;
-import com.github.gv2011.gson.JsonDeserializer;
-import com.github.gv2011.gson.JsonElement;
-import com.github.gv2011.gson.JsonNull;
-import com.github.gv2011.gson.JsonObject;
-import com.github.gv2011.gson.JsonSerializationContext;
-import com.github.gv2011.gson.JsonSerializer;
-import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
-import com.github.gv2011.gson.common.TestTypes.ClassWithObjects;
-
-import junit.framework.TestCase;
-
-import java.lang.reflect.Type;
-import java.util.Collection;
-
-/**
- * Functional tests for the different cases for serializing (or ignoring) null fields and object.
- *
- * @author Inderjeet Singh
- * @author Joel Leitch
- */
-public class NullObjectAndFieldTest extends TestCase {
-  private GsonBuilder gsonBuilder;
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    gsonBuilder = new GsonBuilder().serializeNulls();
-  }
-
-  public void testTopLevelNullObjectSerialization() {
-    Gson gson = gsonBuilder.create();
-    String actual = gson.toJson(null);
-    assertEquals("null", actual);
-
-    actual = gson.toJson(null, String.class);
-    assertEquals("null", actual);
-  }
-
-  public void testTopLevelNullObjectDeserialization() throws Exception {
-    Gson gson = gsonBuilder.create();
-    String actual = gson.fromJson("null", String.class);
-    assertNull(actual);
-  }
-
-  public void testExplicitSerializationOfNulls() {
-    Gson gson = gsonBuilder.create();
-    ClassWithObjects target = new ClassWithObjects(null);
-    String actual = gson.toJson(target);
-    String expected = "{\"bag\":null}";
-    assertEquals(expected, actual);
-  }
-
-  public void testExplicitDeserializationOfNulls() throws Exception {
-    Gson gson = gsonBuilder.create();
-    ClassWithObjects target = gson.fromJson("{\"bag\":null}", ClassWithObjects.class);
-    assertNull(target.bag);
-  }
-  
-  public void testExplicitSerializationOfNullArrayMembers() {
-    Gson gson = gsonBuilder.create();
-    ClassWithMembers target = new ClassWithMembers();
-    String json = gson.toJson(target);
-    assertTrue(json.contains("\"array\":null"));
-  }
-  
-  /** 
-   * Added to verify http://code.google.com/p/google-gson/issues/detail?id=68
-   */
-  public void testNullWrappedPrimitiveMemberSerialization() {
-    Gson gson = gsonBuilder.serializeNulls().create();
-    ClassWithNullWrappedPrimitive target = new ClassWithNullWrappedPrimitive();
-    String json = gson.toJson(target);
-    assertTrue(json.contains("\"value\":null"));
-  }
-  
-  /** 
-   * Added to verify http://code.google.com/p/google-gson/issues/detail?id=68
-   */
-  public void testNullWrappedPrimitiveMemberDeserialization() {
-    Gson gson = gsonBuilder.create();
-    String json = "{'value':null}";
-    ClassWithNullWrappedPrimitive target = gson.fromJson(json, ClassWithNullWrappedPrimitive.class);
-    assertNull(target.value);
-  }
-  
-  public void testExplicitSerializationOfNullCollectionMembers() {
-    Gson gson = gsonBuilder.create();
-    ClassWithMembers target = new ClassWithMembers();
-    String json = gson.toJson(target);
-    assertTrue(json.contains("\"col\":null"));
-  }
-  
-  public void testExplicitSerializationOfNullStringMembers() {
-    Gson gson = gsonBuilder.create();
-    ClassWithMembers target = new ClassWithMembers();
-    String json = gson.toJson(target);
-    assertTrue(json.contains("\"str\":null"));
-  }
-
-  public void testCustomSerializationOfNulls() {
-    gsonBuilder.registerTypeAdapter(ClassWithObjects.class, new ClassWithObjectsSerializer());
-    Gson gson = gsonBuilder.create();
-    ClassWithObjects target = new ClassWithObjects(new BagOfPrimitives());
-    String actual = gson.toJson(target);
-    String expected = "{\"bag\":null}";
-    assertEquals(expected, actual);
-  }
-  
-  public void testPrintPrintingObjectWithNulls() throws Exception {
-    gsonBuilder = new GsonBuilder();
-    Gson gson = gsonBuilder.create();
-    String result = gson.toJson(new ClassWithMembers());
-    assertEquals("{}", result);
-
-    gson = gsonBuilder.serializeNulls().create();
-    result = gson.toJson(new ClassWithMembers());
-    assertTrue(result.contains("\"str\":null"));
-  }
-  
-  public void testPrintPrintingArraysWithNulls() throws Exception {
-    gsonBuilder = new GsonBuilder();
-    Gson gson = gsonBuilder.create();
-    String result = gson.toJson(new String[] { "1", null, "3" });
-    assertEquals("[\"1\",null,\"3\"]", result);
-
-    gson = gsonBuilder.serializeNulls().create();
-    result = gson.toJson(new String[] { "1", null, "3" });
-    assertEquals("[\"1\",null,\"3\"]", result);
-  }
-
-  // test for issue 389
-  public void testAbsentJsonElementsAreSetToNull() {
-    Gson gson = new Gson();
-    ClassWithInitializedMembers target =
-        gson.fromJson("{array:[1,2,3]}", ClassWithInitializedMembers.class);
-    assertTrue(target.array.length == 3 && target.array[1] == 2);
-    assertEquals(ClassWithInitializedMembers.MY_STRING_DEFAULT, target.str1);
-    assertNull(target.str2);
-    assertEquals(ClassWithInitializedMembers.MY_INT_DEFAULT, target.int1);
-    assertEquals(0, target.int2); // test the default value of a primitive int field per JVM spec
-    assertEquals(ClassWithInitializedMembers.MY_BOOLEAN_DEFAULT, target.bool1);
-    assertFalse(target.bool2); // test the default value of a primitive boolean field per JVM spec
-  }
-
-  public static class ClassWithInitializedMembers  {
-    // Using a mix of no-args constructor and field initializers
-    // Also, some fields are intialized and some are not (so initialized per JVM spec)
-    public static final String MY_STRING_DEFAULT = "string";
-    private static final int MY_INT_DEFAULT = 2;
-    private static final boolean MY_BOOLEAN_DEFAULT = true;
-    int[] array;
-    String str1, str2;
-    int int1 = MY_INT_DEFAULT;
-    int int2;
-    boolean bool1 = MY_BOOLEAN_DEFAULT;
-    boolean bool2;
-    public ClassWithInitializedMembers() {
-      str1 = MY_STRING_DEFAULT;
-    }
-  }
-
-  private static class ClassWithNullWrappedPrimitive {
-    private Long value;
-  }
-
-  @SuppressWarnings("unused")
-  private static class ClassWithMembers {
-    String str;
-    int[] array;
-    Collection<String> col;
-  }
-  
-  private static class ClassWithObjectsSerializer implements JsonSerializer<ClassWithObjects> {
-    @Override public JsonElement serialize(ClassWithObjects src, Type typeOfSrc,
-        JsonSerializationContext context) {
-      JsonObject obj = new JsonObject();
-      obj.add("bag", JsonNull.INSTANCE);
-      return obj;
-    }
-  }
-
-  public void testExplicitNullSetsFieldToNullDuringDeserialization() {
-    Gson gson = new Gson();
-    String json = "{value:null}";
-    ObjectWithField obj = gson.fromJson(json, ObjectWithField.class);
-    assertNull(obj.value);    
-  }
-
-  public void testCustomTypeAdapterPassesNullSerialization() {
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapter(ObjectWithField.class, new JsonSerializer<ObjectWithField>() {
-          @Override public JsonElement serialize(ObjectWithField src, Type typeOfSrc,
-              JsonSerializationContext context) {
-            return context.serialize(null);
-          }
-        }).create();
-    ObjectWithField target = new ObjectWithField();
-    target.value = "value1";
-    String json = gson.toJson(target);
-    assertFalse(json.contains("value1"));
-  }
-
-  public void testCustomTypeAdapterPassesNullDesrialization() {
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapter(ObjectWithField.class, new JsonDeserializer<ObjectWithField>() {
-          @Override public ObjectWithField deserialize(JsonElement json, Type type,
-              JsonDeserializationContext context) {
-            return context.deserialize(null, type);
-          }
-        }).create();
-    String json = "{value:'value1'}";
-    ObjectWithField target = gson.fromJson(json, ObjectWithField.class);
-    assertNull(target);
-  }
-
-  private static class ObjectWithField {
-    String value = "";
-  }
-}
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonDeserializationContext;
+import com.github.gv2011.gson.JsonDeserializer;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonNull;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonSerializationContext;
+import com.github.gv2011.gson.JsonSerializer;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.common.TestTypes.ClassWithObjects;
+
+import junit.framework.TestCase;
+
+import java.lang.reflect.Type;
+import java.util.Collection;
+
+/**
+ * Functional tests for the different cases for serializing (or ignoring) null fields and object.
+ *
+ * @author Inderjeet Singh
+ * @author Joel Leitch
+ */
+public class NullObjectAndFieldTest extends TestCase {
+  private GsonBuilder gsonBuilder;
+
+  @Override
+  protected void setUp() throws Exception {
+    super.setUp();
+    gsonBuilder = new GsonBuilder().serializeNulls();
+  }
+
+  public void testTopLevelNullObjectSerialization() {
+    Gson gson = gsonBuilder.create();
+    String actual = gson.toJson(null);
+    assertEquals("null", actual);
+
+    actual = gson.toJson(null, String.class);
+    assertEquals("null", actual);
+  }
+
+  public void testTopLevelNullObjectDeserialization() throws Exception {
+    Gson gson = gsonBuilder.create();
+    String actual = gson.fromJson("null", String.class);
+    assertNull(actual);
+  }
+
+  public void testExplicitSerializationOfNulls() {
+    Gson gson = gsonBuilder.create();
+    ClassWithObjects target = new ClassWithObjects(null);
+    String actual = gson.toJson(target);
+    String expected = "{\"bag\":null}";
+    assertEquals(expected, actual);
+  }
+
+  public void testExplicitDeserializationOfNulls() throws Exception {
+    Gson gson = gsonBuilder.create();
+    ClassWithObjects target = gson.fromJson("{\"bag\":null}", ClassWithObjects.class);
+    assertNull(target.bag);
+  }
+  
+  public void testExplicitSerializationOfNullArrayMembers() {
+    Gson gson = gsonBuilder.create();
+    ClassWithMembers target = new ClassWithMembers();
+    String json = gson.toJson(target);
+    assertTrue(json.contains("\"array\":null"));
+  }
+  
+  /** 
+   * Added to verify http://code.google.com/p/google-gson/issues/detail?id=68
+   */
+  public void testNullWrappedPrimitiveMemberSerialization() {
+    Gson gson = gsonBuilder.serializeNulls().create();
+    ClassWithNullWrappedPrimitive target = new ClassWithNullWrappedPrimitive();
+    String json = gson.toJson(target);
+    assertTrue(json.contains("\"value\":null"));
+  }
+  
+  /** 
+   * Added to verify http://code.google.com/p/google-gson/issues/detail?id=68
+   */
+  public void testNullWrappedPrimitiveMemberDeserialization() {
+    Gson gson = gsonBuilder.create();
+    String json = "{'value':null}";
+    ClassWithNullWrappedPrimitive target = gson.fromJson(json, ClassWithNullWrappedPrimitive.class);
+    assertNull(target.value);
+  }
+  
+  public void testExplicitSerializationOfNullCollectionMembers() {
+    Gson gson = gsonBuilder.create();
+    ClassWithMembers target = new ClassWithMembers();
+    String json = gson.toJson(target);
+    assertTrue(json.contains("\"col\":null"));
+  }
+  
+  public void testExplicitSerializationOfNullStringMembers() {
+    Gson gson = gsonBuilder.create();
+    ClassWithMembers target = new ClassWithMembers();
+    String json = gson.toJson(target);
+    assertTrue(json.contains("\"str\":null"));
+  }
+
+  public void testCustomSerializationOfNulls() {
+    gsonBuilder.registerTypeAdapter(ClassWithObjects.class, new ClassWithObjectsSerializer());
+    Gson gson = gsonBuilder.create();
+    ClassWithObjects target = new ClassWithObjects(new BagOfPrimitives());
+    String actual = gson.toJson(target);
+    String expected = "{\"bag\":null}";
+    assertEquals(expected, actual);
+  }
+  
+  public void testPrintPrintingObjectWithNulls() throws Exception {
+    gsonBuilder = new GsonBuilder();
+    Gson gson = gsonBuilder.create();
+    String result = gson.toJson(new ClassWithMembers());
+    assertEquals("{}", result);
+
+    gson = gsonBuilder.serializeNulls().create();
+    result = gson.toJson(new ClassWithMembers());
+    assertTrue(result.contains("\"str\":null"));
+  }
+  
+  public void testPrintPrintingArraysWithNulls() throws Exception {
+    gsonBuilder = new GsonBuilder();
+    Gson gson = gsonBuilder.create();
+    String result = gson.toJson(new String[] { "1", null, "3" });
+    assertEquals("[\"1\",null,\"3\"]", result);
+
+    gson = gsonBuilder.serializeNulls().create();
+    result = gson.toJson(new String[] { "1", null, "3" });
+    assertEquals("[\"1\",null,\"3\"]", result);
+  }
+
+  // test for issue 389
+  public void testAbsentJsonElementsAreSetToNull() {
+    Gson gson = new Gson();
+    ClassWithInitializedMembers target =
+        gson.fromJson("{array:[1,2,3]}", ClassWithInitializedMembers.class);
+    assertTrue(target.array.length == 3 && target.array[1] == 2);
+    assertEquals(ClassWithInitializedMembers.MY_STRING_DEFAULT, target.str1);
+    assertNull(target.str2);
+    assertEquals(ClassWithInitializedMembers.MY_INT_DEFAULT, target.int1);
+    assertEquals(0, target.int2); // test the default value of a primitive int field per JVM spec
+    assertEquals(ClassWithInitializedMembers.MY_BOOLEAN_DEFAULT, target.bool1);
+    assertFalse(target.bool2); // test the default value of a primitive boolean field per JVM spec
+  }
+
+  public static class ClassWithInitializedMembers  {
+    // Using a mix of no-args constructor and field initializers
+    // Also, some fields are intialized and some are not (so initialized per JVM spec)
+    public static final String MY_STRING_DEFAULT = "string";
+    private static final int MY_INT_DEFAULT = 2;
+    private static final boolean MY_BOOLEAN_DEFAULT = true;
+    int[] array;
+    String str1, str2;
+    int int1 = MY_INT_DEFAULT;
+    int int2;
+    boolean bool1 = MY_BOOLEAN_DEFAULT;
+    boolean bool2;
+    public ClassWithInitializedMembers() {
+      str1 = MY_STRING_DEFAULT;
+    }
+  }
+
+  private static class ClassWithNullWrappedPrimitive {
+    private Long value;
+  }
+
+  @SuppressWarnings("unused")
+  private static class ClassWithMembers {
+    String str;
+    int[] array;
+    Collection<String> col;
+  }
+  
+  private static class ClassWithObjectsSerializer implements JsonSerializer<ClassWithObjects> {
+    @Override public JsonElement serialize(ClassWithObjects src, Type typeOfSrc,
+        JsonSerializationContext context) {
+      JsonObject obj = new JsonObject();
+      obj.add("bag", JsonNull.INSTANCE);
+      return obj;
+    }
+  }
+
+  public void testExplicitNullSetsFieldToNullDuringDeserialization() {
+    Gson gson = new Gson();
+    String json = "{value:null}";
+    ObjectWithField obj = gson.fromJson(json, ObjectWithField.class);
+    assertNull(obj.value);    
+  }
+
+  public void testCustomTypeAdapterPassesNullSerialization() {
+    Gson gson = new GsonBuilder()
+        .registerTypeAdapter(ObjectWithField.class, new JsonSerializer<ObjectWithField>() {
+          @Override public JsonElement serialize(ObjectWithField src, Type typeOfSrc,
+              JsonSerializationContext context) {
+            return context.serialize(null);
+          }
+        }).create();
+    ObjectWithField target = new ObjectWithField();
+    target.value = "value1";
+    String json = gson.toJson(target);
+    assertFalse(json.contains("value1"));
+  }
+
+  public void testCustomTypeAdapterPassesNullDesrialization() {
+    Gson gson = new GsonBuilder()
+        .registerTypeAdapter(ObjectWithField.class, new JsonDeserializer<ObjectWithField>() {
+          @Override public ObjectWithField deserialize(JsonElement json, Type type,
+              JsonDeserializationContext context) {
+            return context.deserialize(null, type);
+          }
+        }).create();
+    String json = "{value:'value1'}";
+    ObjectWithField target = gson.fromJson(json, ObjectWithField.class);
+    assertNull(target);
+  }
+
+  private static class ObjectWithField {
+    String value = "";
+  }
+}
diff --git a/src/test/java/com/github/gv2011/gson/internal/LazilyParsedNumberTest.java b/src/test/java/com/github/gv2011/gson/internal/LazilyParsedNumberTest.java
index 67a0c8d89..ef2ebab9b 100644
--- a/src/test/java/com/github/gv2011/gson/internal/LazilyParsedNumberTest.java
+++ b/src/test/java/com/github/gv2011/gson/internal/LazilyParsedNumberTest.java
@@ -1,34 +1,34 @@
-/*
- * Copyright (C) 2015 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.github.gv2011.gson.internal;
-
-import com.github.gv2011.gson.internal.LazilyParsedNumber;
-
-import junit.framework.TestCase;
-
-public class LazilyParsedNumberTest extends TestCase {
-  public void testHashCode() {
-    LazilyParsedNumber n1 = new LazilyParsedNumber("1");
-    LazilyParsedNumber n1Another = new LazilyParsedNumber("1");
-    assertEquals(n1.hashCode(), n1Another.hashCode());
-  }
-
-  public void testEquals() {
-    LazilyParsedNumber n1 = new LazilyParsedNumber("1");
-    LazilyParsedNumber n1Another = new LazilyParsedNumber("1");
-    assertTrue(n1.equals(n1Another));
-  }
-}
+/*
+ * Copyright (C) 2015 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.github.gv2011.gson.internal;
+
+import com.github.gv2011.gson.internal.LazilyParsedNumber;
+
+import junit.framework.TestCase;
+
+public class LazilyParsedNumberTest extends TestCase {
+  public void testHashCode() {
+    LazilyParsedNumber n1 = new LazilyParsedNumber("1");
+    LazilyParsedNumber n1Another = new LazilyParsedNumber("1");
+    assertEquals(n1.hashCode(), n1Another.hashCode());
+  }
+
+  public void testEquals() {
+    LazilyParsedNumber n1 = new LazilyParsedNumber("1");
+    LazilyParsedNumber n1Another = new LazilyParsedNumber("1");
+    assertTrue(n1.equals(n1Another));
+  }
+}
