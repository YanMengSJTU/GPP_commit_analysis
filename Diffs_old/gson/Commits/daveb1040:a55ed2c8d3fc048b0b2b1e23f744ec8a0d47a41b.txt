diff --git a/gson/pom.xml b/gson/pom.xml
index 99b17d32e..5bbad6e4d 100644
--- a/gson/pom.xml
+++ b/gson/pom.xml
@@ -54,9 +54,10 @@
     <dependency>
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>
-      <version>3.8.2</version>
+      <version>4.12</version>
       <scope>test</scope>
     </dependency>
+
   </dependencies>
   <profiles>
     <!-- Activate PGP signing only when performing a release -->
diff --git a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java b/gson/src/main/java/com/google/gson/FieldNamingPolicy.java
index 3b325a4fd..02defc136 100644
--- a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java
+++ b/gson/src/main/java/com/google/gson/FieldNamingPolicy.java
@@ -56,6 +56,7 @@
     }
   },
 
+ 
   /**
    * Using this naming policy with Gson will ensure that the first "letter" of the Java
    * field name is capitalized when serialized to its JSON form and the words will be
@@ -149,10 +150,6 @@ static String upperCaseFirstLetter(String name) {
       firstCharacter = name.charAt(++index);
     }
 
-    if (index == name.length()) {
-      return fieldNameBuilder.toString();
-    }
-
     if (!Character.isUpperCase(firstCharacter)) {
       String modifiedTarget = modifyString(Character.toUpperCase(firstCharacter), name, ++index);
       return fieldNameBuilder.append(modifiedTarget).toString();
diff --git a/gson/src/test/java/com/google/gson/FieldNamingPolicyTest.java b/gson/src/test/java/com/google/gson/FieldNamingPolicyTest.java
new file mode 100644
index 000000000..cb4c48aac
--- /dev/null
+++ b/gson/src/test/java/com/google/gson/FieldNamingPolicyTest.java
@@ -0,0 +1,78 @@
+package com.google.gson;
+
+import org.junit.Test;
+import org.junit.runners.Parameterized.Parameters;
+
+import static org.junit.Assert.assertEquals;
+
+public class FieldNamingPolicyTest {
+	
+
+	@Test
+	public void testUpperCaseFirstLetterNonUpperCaseLetter() {
+		verifyUpperCaseFirstLetter("someFieldName", "SomeFieldName");
+	}
+	
+	@Test
+	public void testUpperCaseFirstLetterWithUpperCaseLetter() {
+		verifyUpperCaseFirstLetter("SomeFieldName", "SomeFieldName");
+	}
+	
+	@Test
+	public void testUpperCaseFirstLetterWithUnderscoreAndNonUpperCaseLetter() {
+		verifyUpperCaseFirstLetter("_someFieldName", "_SomeFieldName");
+	}
+	
+	@Test
+	public void testUpperCaseFirstLetterWithUnderScoreAndWithUpperCaseLetter() {
+		verifyUpperCaseFirstLetter("_SomeFieldName", "_SomeFieldName");
+	}
+	
+	@Test
+	public void testUpperCaseFirstLetterWithUnderscoreAndNumberAndNonUpperCaseLetter() {
+		verifyUpperCaseFirstLetter("_999someFieldName", "_999SomeFieldName");
+	}
+	
+	@Test
+	public void testUpperCaseFirstLetterWithUnderScoreAndNumberWithUpperCaseLetter() {
+		verifyUpperCaseFirstLetter("_333SomeFieldName", "_333SomeFieldName");
+	}
+
+	@Test
+	public void testUpperCaseFirstLetter1LowercaseLetter() {
+		verifyUpperCaseFirstLetter("x", "X");
+	}
+
+	@Test
+	public void testUpperCaseFirstLetter1UppercaseLetter() {
+		verifyUpperCaseFirstLetter("X", "X");
+	}
+
+	@Test
+	public void testUpperCaseFirstAllNumbers() {
+		verifyUpperCaseFirstLetter("555", "555");
+	}
+
+	@Test
+	public void testUpperCaseFirstJustUnderscore() {
+		verifyUpperCaseFirstLetter("_", "_");
+	}
+
+	@Test
+	public void testUpperCaseBlank() {
+		verifyUpperCaseFirstLetter(" ", " ");
+	}
+
+	/**
+	 * Verifies the upperCaseFirstLetter is working as expected
+	 * @param fieldName
+	 * @param expectedFieldName
+	 */
+	private void verifyUpperCaseFirstLetter(String fieldName, String expectedFieldName) {		
+		String actualFieldName = FieldNamingPolicy.upperCaseFirstLetter(fieldName);
+		assertEquals("Verify fieldName was uppercased properly", expectedFieldName, actualFieldName);
+	}
+	
+
+}
+
