diff --git a/gson/src/main/java/com/google/gson/stream/JsonReader.java b/gson/src/main/java/com/google/gson/stream/JsonReader.java
index 7a5e9cbb6..20656f6c7 100644
--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java
+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java
@@ -1561,8 +1561,11 @@ private char readEscapeCharacter() throws IOException {
     case '\'':
     case '"':
     case '\\':
+    case '/':	
+    	return escaped;
     default:
-      return escaped;
+    	// throw error when none of the above cases are matched
+    	throw syntaxError("Invalid escape sequence");
     }
   }
 
diff --git a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
index 48279dacb..043e911c9 100644
--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
@@ -173,7 +173,22 @@ public void testHelloWorld() throws IOException {
     reader.endObject();
     assertEquals(JsonToken.END_DOCUMENT, reader.peek());
   }
-
+  
+  public void testInvalidJsonInput() throws IOException {
+	  String json = "{\n" +
+		        "   \"h\\ello\": true,\n" +
+		        "   \"foo\": [\"world\"]\n" +
+		        "}";
+
+	  try {
+		  JsonReader reader = new JsonReader(reader(json));
+		  reader.beginObject();
+		  assertEquals("hello", reader.nextName());
+	      fail();
+	    } catch (IOException expected) {
+	    }
+  }
+  
   public void testNulls() {
     try {
       new JsonReader(null);
