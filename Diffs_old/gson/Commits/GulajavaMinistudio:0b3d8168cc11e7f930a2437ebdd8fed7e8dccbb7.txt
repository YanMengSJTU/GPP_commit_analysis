diff --git a/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java b/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java
index 45d143aac..979860eca 100644
--- a/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java
+++ b/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java
@@ -241,15 +241,19 @@ private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName, boole
               + "; did you forget to register a subtype?");
         }
         JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();
+
+        if (maintainType) {
+          Streams.write(jsonObject, out);
+          return;
+        }
+
         JsonObject clone = new JsonObject();
-        
-        if (!maintainType) {
-            if (jsonObject.has(typeFieldName)) {
-              throw new JsonParseException("cannot serialize " + srcType.getName()
-                  + " because it already defines a field named " + typeFieldName);
-            }
-            clone.add(typeFieldName, new JsonPrimitive(label));
+
+        if (jsonObject.has(typeFieldName)) {
+          throw new JsonParseException("cannot serialize " + srcType.getName()
+              + " because it already defines a field named " + typeFieldName);
         }
+        clone.add(typeFieldName, new JsonPrimitive(label));
         
         for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {
           clone.add(e.getKey(), e.getValue());
diff --git a/gson/src/main/java/com/google/gson/JsonElement.java b/gson/src/main/java/com/google/gson/JsonElement.java
index 62bb920cd..315ff82e9 100644
--- a/gson/src/main/java/com/google/gson/JsonElement.java
+++ b/gson/src/main/java/com/google/gson/JsonElement.java
@@ -259,15 +259,19 @@ public byte getAsByte() {
   }
 
   /**
-   * convenience method to get this element as a primitive character value.
+   * convenience method to get the first character of this element as a string or the first
+   * character of this array's first element as a string.
    *
-   * @return get this element as a primitive char value.
+   * @return the first character of the string.
    * @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
-   * char value.
+   * string value.
    * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
    * more than a single element.
    * @since 1.3
+   * @deprecated This method is misleading, as it does not get this element as a char but rather as
+   * a string's first character.
    */
+  @Deprecated
   public char getAsCharacter() {
     throw new UnsupportedOperationException(getClass().getSimpleName());
   }
