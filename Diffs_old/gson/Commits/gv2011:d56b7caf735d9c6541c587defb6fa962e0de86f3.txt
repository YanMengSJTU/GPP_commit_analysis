diff --git a/pom.xml b/pom.xml
index c247ad1b7..bf43f4d42 100644
--- a/pom.xml
+++ b/pom.xml
@@ -9,8 +9,8 @@
     <version>0.5.0</version>
   </parent>
 
-  <artifactId>gson</artifactId>
-  <version>2.7.0-SNAPSHOT</version>
+  <artifactId>gsoncore</artifactId>
+  <version>0.5.0-SNAPSHOT</version>
   <name>Gson</name>
 
   <description>
diff --git a/src/main/java/com/google/gson/DefaultDateTypeAdapter.java b/src/main/java/com/github/gv2011/gson/DefaultDateTypeAdapter.java
similarity index 97%
rename from src/main/java/com/google/gson/DefaultDateTypeAdapter.java
rename to src/main/java/com/github/gv2011/gson/DefaultDateTypeAdapter.java
index afd570f9b..0f06e4c25 100644
--- a/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
+++ b/src/main/java/com/github/gv2011/gson/DefaultDateTypeAdapter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.lang.reflect.Type;
 import java.sql.Timestamp;
@@ -25,7 +25,7 @@
 import java.util.Date;
 import java.util.Locale;
 
-import com.google.gson.internal.bind.util.ISO8601Utils;
+import com.github.gv2011.gson.internal.bind.util.ISO8601Utils;
 
 /**
  * This type adapter supports three subclasses of date: Date, Timestamp, and
diff --git a/src/main/java/com/google/gson/ExclusionStrategy.java b/src/main/java/com/github/gv2011/gson/ExclusionStrategy.java
similarity index 99%
rename from src/main/java/com/google/gson/ExclusionStrategy.java
rename to src/main/java/com/github/gv2011/gson/ExclusionStrategy.java
index 6a3f43fb5..d32f4cbf9 100644
--- a/src/main/java/com/google/gson/ExclusionStrategy.java
+++ b/src/main/java/com/github/gv2011/gson/ExclusionStrategy.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 /**
  * A strategy (or policy) definition that is used to decide whether or not a field or top-level
diff --git a/src/main/java/com/google/gson/FieldAttributes.java b/src/main/java/com/github/gv2011/gson/FieldAttributes.java
similarity index 97%
rename from src/main/java/com/google/gson/FieldAttributes.java
rename to src/main/java/com/github/gv2011/gson/FieldAttributes.java
index bcabff14a..58d75cee2 100644
--- a/src/main/java/com/google/gson/FieldAttributes.java
+++ b/src/main/java/com/github/gv2011/gson/FieldAttributes.java
@@ -14,15 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
-import com.google.gson.internal.$Gson$Preconditions;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.Collection;
 
+import com.github.gv2011.gson.internal.$Gson$Preconditions;
+
 /**
  * A data object that stores attributes of a field.
  *
diff --git a/src/main/java/com/google/gson/FieldNamingPolicy.java b/src/main/java/com/github/gv2011/gson/FieldNamingPolicy.java
similarity index 97%
rename from src/main/java/com/google/gson/FieldNamingPolicy.java
rename to src/main/java/com/github/gv2011/gson/FieldNamingPolicy.java
index 3b325a4fd..faf3399d9 100644
--- a/src/main/java/com/google/gson/FieldNamingPolicy.java
+++ b/src/main/java/com/github/gv2011/gson/FieldNamingPolicy.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.lang.reflect.Field;
 import java.util.Locale;
 
 /**
  * An enumeration that defines a few standard naming conventions for JSON field names.
- * This enumeration should be used in conjunction with {@link com.google.gson.GsonBuilder}
- * to configure a {@link com.google.gson.Gson} instance to properly translate Java field
+ * This enumeration should be used in conjunction with {@link com.github.gv2011.gson.GsonBuilder}
+ * to configure a {@link com.github.gv2011.gson.Gson} instance to properly translate Java field
  * names into the desired JSON field names.
  *
  * @author Inderjeet Singh
diff --git a/src/main/java/com/google/gson/FieldNamingStrategy.java b/src/main/java/com/github/gv2011/gson/FieldNamingStrategy.java
similarity index 97%
rename from src/main/java/com/google/gson/FieldNamingStrategy.java
rename to src/main/java/com/github/gv2011/gson/FieldNamingStrategy.java
index 9be453ad1..bc4a6a20d 100644
--- a/src/main/java/com/google/gson/FieldNamingStrategy.java
+++ b/src/main/java/com/github/gv2011/gson/FieldNamingStrategy.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.lang.reflect.Field;
 
diff --git a/src/main/java/com/google/gson/Gson.java b/src/main/java/com/github/gv2011/gson/Gson.java
similarity index 95%
rename from src/main/java/com/google/gson/Gson.java
rename to src/main/java/com/github/gv2011/gson/Gson.java
index 106d24854..16eb3ded3 100644
--- a/src/main/java/com/google/gson/Gson.java
+++ b/src/main/java/com/github/gv2011/gson/Gson.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.io.EOFException;
 import java.io.IOException;
@@ -33,27 +33,27 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicLongArray;
 
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.Excluder;
-import com.google.gson.internal.Primitives;
-import com.google.gson.internal.Streams;
-import com.google.gson.internal.bind.ArrayTypeAdapter;
-import com.google.gson.internal.bind.CollectionTypeAdapterFactory;
-import com.google.gson.internal.bind.DateTypeAdapter;
-import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
-import com.google.gson.internal.bind.JsonTreeReader;
-import com.google.gson.internal.bind.JsonTreeWriter;
-import com.google.gson.internal.bind.MapTypeAdapterFactory;
-import com.google.gson.internal.bind.ObjectTypeAdapter;
-import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
-import com.google.gson.internal.bind.SqlDateTypeAdapter;
-import com.google.gson.internal.bind.TimeTypeAdapter;
-import com.google.gson.internal.bind.TypeAdapters;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
-import com.google.gson.stream.MalformedJsonException;
+import com.github.gv2011.gson.internal.ConstructorConstructor;
+import com.github.gv2011.gson.internal.Excluder;
+import com.github.gv2011.gson.internal.Primitives;
+import com.github.gv2011.gson.internal.Streams;
+import com.github.gv2011.gson.internal.bind.ArrayTypeAdapter;
+import com.github.gv2011.gson.internal.bind.CollectionTypeAdapterFactory;
+import com.github.gv2011.gson.internal.bind.DateTypeAdapter;
+import com.github.gv2011.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
+import com.github.gv2011.gson.internal.bind.JsonTreeReader;
+import com.github.gv2011.gson.internal.bind.JsonTreeWriter;
+import com.github.gv2011.gson.internal.bind.MapTypeAdapterFactory;
+import com.github.gv2011.gson.internal.bind.ObjectTypeAdapter;
+import com.github.gv2011.gson.internal.bind.ReflectiveTypeAdapterFactory;
+import com.github.gv2011.gson.internal.bind.SqlDateTypeAdapter;
+import com.github.gv2011.gson.internal.bind.TimeTypeAdapter;
+import com.github.gv2011.gson.internal.bind.TypeAdapters;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonToken;
+import com.github.gv2011.gson.stream.JsonWriter;
+import com.github.gv2011.gson.stream.MalformedJsonException;
 
 /**
  * This is the main class for using Gson. Gson is typically used by first constructing a
@@ -93,7 +93,7 @@
  * <p>See the <a href="https://sites.google.com/site/gson/gson-user-guide">Gson User Guide</a>
  * for a more complete set of examples.</p>
  *
- * @see com.google.gson.reflect.TypeToken
+ * @see com.github.gv2011.gson.reflect.TypeToken
  *
  * @author Inderjeet Singh
  * @author Joel Leitch
@@ -168,10 +168,10 @@
    *   ignores the millisecond portion of the date during serialization. You can change
    *   this by invoking {@link GsonBuilder#setDateFormat(int)} or
    *   {@link GsonBuilder#setDateFormat(String)}. </li>
-   *   <li>By default, Gson ignores the {@link com.google.gson.annotations.Expose} annotation.
+   *   <li>By default, Gson ignores the {@link com.github.gv2011.gson.annotations.Expose} annotation.
    *   You can enable Gson to serialize/deserialize only those fields marked with this annotation
    *   through {@link GsonBuilder#excludeFieldsWithoutExposeAnnotation()}. </li>
-   *   <li>By default, Gson ignores the {@link com.google.gson.annotations.Since} annotation. You
+   *   <li>By default, Gson ignores the {@link com.github.gv2011.gson.annotations.Since} annotation. You
    *   can enable Gson to use this annotation through {@link GsonBuilder#setVersion(double)}.</li>
    *   <li>The default field naming policy for the output Json is same as in Java. So, a Java class
    *   field <code>versionNumber</code> will be output as <code>&quot;versionNumber&quot;</code> in
@@ -541,7 +541,7 @@ public JsonElement toJsonTree(Object src) {
    *
    * @param src the object for which JSON representation is to be created
    * @param typeOfSrc The specific genericized type of src. You can obtain
-   * this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
+   * this type by using the {@link com.github.gv2011.gson.reflect.TypeToken} class. For example,
    * to get the type for {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -583,7 +583,7 @@ public String toJson(Object src) {
    *
    * @param src the object for which JSON representation is to be created
    * @param typeOfSrc The specific genericized type of src. You can obtain
-   * this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
+   * this type by using the {@link com.github.gv2011.gson.reflect.TypeToken} class. For example,
    * to get the type for {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -625,7 +625,7 @@ public void toJson(Object src, Appendable writer) throws JsonIOException {
    *
    * @param src the object for which JSON representation is to be created
    * @param typeOfSrc The specific genericized type of src. You can obtain
-   * this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,
+   * this type by using the {@link com.github.gv2011.gson.reflect.TypeToken} class. For example,
    * to get the type for {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -775,7 +775,7 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce
    * @param <T> the type of the desired object
    * @param json the string from which the object is to be deserialized
    * @param typeOfT The specific genericized type of src. You can obtain this type by using the
-   * {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
+   * {@link com.github.gv2011.gson.reflect.TypeToken} class. For example, to get the type for
    * {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -828,7 +828,7 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce
    * @param <T> the type of the desired object
    * @param json the reader producing Json from which the object is to be deserialized
    * @param typeOfT The specific genericized type of src. You can obtain this type by using the
-   * {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
+   * {@link com.github.gv2011.gson.reflect.TypeToken} class. For example, to get the type for
    * {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
@@ -927,7 +927,7 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {
    * @param json the root of the parse tree of {@link JsonElement}s from which the object is to
    * be deserialized
    * @param typeOfT The specific genericized type of src. You can obtain this type by using the
-   * {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for
+   * {@link com.github.gv2011.gson.reflect.TypeToken} class. For example, to get the type for
    * {@code Collection<Foo>}, you should use:
    * <pre>
    * Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
diff --git a/src/main/java/com/google/gson/GsonBuilder.java b/src/main/java/com/github/gv2011/gson/GsonBuilder.java
similarity index 96%
rename from src/main/java/com/google/gson/GsonBuilder.java
rename to src/main/java/com/github/gv2011/gson/GsonBuilder.java
index b258e22fa..9f2c0597d 100644
--- a/src/main/java/com/google/gson/GsonBuilder.java
+++ b/src/main/java/com/github/gv2011/gson/GsonBuilder.java
@@ -14,9 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
+
+import static com.github.gv2011.gson.Gson.DEFAULT_COMPLEX_MAP_KEYS;
+import static com.github.gv2011.gson.Gson.DEFAULT_ESCAPE_HTML;
+import static com.github.gv2011.gson.Gson.DEFAULT_JSON_NON_EXECUTABLE;
+import static com.github.gv2011.gson.Gson.DEFAULT_LENIENT;
+import static com.github.gv2011.gson.Gson.DEFAULT_PRETTY_PRINT;
+import static com.github.gv2011.gson.Gson.DEFAULT_SERIALIZE_NULLS;
+import static com.github.gv2011.gson.Gson.DEFAULT_SPECIALIZE_FLOAT_VALUES;
 
-import com.google.gson.stream.JsonReader;
 import java.lang.reflect.Type;
 import java.sql.Timestamp;
 import java.text.DateFormat;
@@ -27,18 +34,11 @@
 import java.util.List;
 import java.util.Map;
 
-import com.google.gson.internal.$Gson$Preconditions;
-import com.google.gson.internal.Excluder;
-import com.google.gson.internal.bind.TypeAdapters;
-import com.google.gson.reflect.TypeToken;
-
-import static com.google.gson.Gson.DEFAULT_COMPLEX_MAP_KEYS;
-import static com.google.gson.Gson.DEFAULT_ESCAPE_HTML;
-import static com.google.gson.Gson.DEFAULT_JSON_NON_EXECUTABLE;
-import static com.google.gson.Gson.DEFAULT_LENIENT;
-import static com.google.gson.Gson.DEFAULT_PRETTY_PRINT;
-import static com.google.gson.Gson.DEFAULT_SERIALIZE_NULLS;
-import static com.google.gson.Gson.DEFAULT_SPECIALIZE_FLOAT_VALUES;
+import com.github.gv2011.gson.internal.$Gson$Preconditions;
+import com.github.gv2011.gson.internal.Excluder;
+import com.github.gv2011.gson.internal.bind.TypeAdapters;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
 
 /**
  * <p>Use this builder to construct a {@link Gson} instance when you need to set configuration
@@ -147,7 +147,7 @@ public GsonBuilder generateNonExecutableJson() {
 
   /**
    * Configures Gson to exclude all fields from consideration for serialization or deserialization
-   * that do not have the {@link com.google.gson.annotations.Expose} annotation.
+   * that do not have the {@link com.github.gv2011.gson.annotations.Expose} annotation.
    *
    * @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern
    */
diff --git a/src/main/java/com/google/gson/InstanceCreator.java b/src/main/java/com/github/gv2011/gson/InstanceCreator.java
similarity index 99%
rename from src/main/java/com/google/gson/InstanceCreator.java
rename to src/main/java/com/github/gv2011/gson/InstanceCreator.java
index d5096a07a..6a47dc539 100644
--- a/src/main/java/com/google/gson/InstanceCreator.java
+++ b/src/main/java/com/github/gv2011/gson/InstanceCreator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.lang.reflect.Type;
 
diff --git a/src/main/java/com/google/gson/JsonArray.java b/src/main/java/com/github/gv2011/gson/JsonArray.java
similarity index 99%
rename from src/main/java/com/google/gson/JsonArray.java
rename to src/main/java/com/github/gv2011/gson/JsonArray.java
index 19299d14e..83310cbf8 100644
--- a/src/main/java/com/google/gson/JsonArray.java
+++ b/src/main/java/com/github/gv2011/gson/JsonArray.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
diff --git a/src/main/java/com/google/gson/JsonDeserializationContext.java b/src/main/java/com/github/gv2011/gson/JsonDeserializationContext.java
similarity index 98%
rename from src/main/java/com/google/gson/JsonDeserializationContext.java
rename to src/main/java/com/github/gv2011/gson/JsonDeserializationContext.java
index 00c750543..7093bfbcd 100644
--- a/src/main/java/com/google/gson/JsonDeserializationContext.java
+++ b/src/main/java/com/github/gv2011/gson/JsonDeserializationContext.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.lang.reflect.Type;
 
diff --git a/src/main/java/com/google/gson/JsonDeserializer.java b/src/main/java/com/github/gv2011/gson/JsonDeserializer.java
similarity index 99%
rename from src/main/java/com/google/gson/JsonDeserializer.java
rename to src/main/java/com/github/gv2011/gson/JsonDeserializer.java
index 0589eb284..146281a10 100644
--- a/src/main/java/com/google/gson/JsonDeserializer.java
+++ b/src/main/java/com/github/gv2011/gson/JsonDeserializer.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.lang.reflect.Type;
 
diff --git a/src/main/java/com/google/gson/JsonElement.java b/src/main/java/com/github/gv2011/gson/JsonElement.java
similarity index 98%
rename from src/main/java/com/google/gson/JsonElement.java
rename to src/main/java/com/github/gv2011/gson/JsonElement.java
index d9cd91846..d3161692a 100644
--- a/src/main/java/com/google/gson/JsonElement.java
+++ b/src/main/java/com/github/gv2011/gson/JsonElement.java
@@ -14,10 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
+
+import com.github.gv2011.gson.internal.Streams;
+import com.github.gv2011.gson.stream.JsonWriter;
 
-import com.google.gson.internal.Streams;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.io.StringWriter;
 import java.math.BigDecimal;
diff --git a/src/main/java/com/google/gson/JsonIOException.java b/src/main/java/com/github/gv2011/gson/JsonIOException.java
similarity index 97%
rename from src/main/java/com/google/gson/JsonIOException.java
rename to src/main/java/com/github/gv2011/gson/JsonIOException.java
index dfeccd8ed..f10d27ecf 100644
--- a/src/main/java/com/google/gson/JsonIOException.java
+++ b/src/main/java/com/github/gv2011/gson/JsonIOException.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson;
+package com.github.gv2011.gson;
 
 /**
  * This exception is raised when Gson was unable to read an input stream
diff --git a/src/main/java/com/google/gson/JsonNull.java b/src/main/java/com/github/gv2011/gson/JsonNull.java
similarity index 93%
rename from src/main/java/com/google/gson/JsonNull.java
rename to src/main/java/com/github/gv2011/gson/JsonNull.java
index 56883369e..8348d14b9 100644
--- a/src/main/java/com/google/gson/JsonNull.java
+++ b/src/main/java/com/github/gv2011/gson/JsonNull.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 /**
  * A class representing a Json {@code null} value.
diff --git a/src/main/java/com/google/gson/JsonObject.java b/src/main/java/com/github/gv2011/gson/JsonObject.java
similarity index 98%
rename from src/main/java/com/google/gson/JsonObject.java
rename to src/main/java/com/github/gv2011/gson/JsonObject.java
index 78c7a177a..f9edd8e10 100644
--- a/src/main/java/com/google/gson/JsonObject.java
+++ b/src/main/java/com/github/gv2011/gson/JsonObject.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson;
-
-import com.google.gson.internal.LinkedTreeMap;
+package com.github.gv2011.gson;
 
 import java.util.Map;
 import java.util.Set;
 
+import com.github.gv2011.gson.internal.LinkedTreeMap;
+
 /**
  * A class representing an object type in Json. An object consists of name-value pairs where names
  * are strings, and values are any other type of {@link JsonElement}. This allows for a creating a
diff --git a/src/main/java/com/google/gson/JsonParseException.java b/src/main/java/com/github/gv2011/gson/JsonParseException.java
similarity index 98%
rename from src/main/java/com/google/gson/JsonParseException.java
rename to src/main/java/com/github/gv2011/gson/JsonParseException.java
index 084f66127..1f10dcc5e 100644
--- a/src/main/java/com/google/gson/JsonParseException.java
+++ b/src/main/java/com/github/gv2011/gson/JsonParseException.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 /**
  * This exception is raised if there is a serious issue that occurs during parsing of a Json
diff --git a/src/main/java/com/google/gson/JsonParser.java b/src/main/java/com/github/gv2011/gson/JsonParser.java
similarity index 89%
rename from src/main/java/com/google/gson/JsonParser.java
rename to src/main/java/com/github/gv2011/gson/JsonParser.java
index a8ae337ba..84cce17fe 100644
--- a/src/main/java/com/google/gson/JsonParser.java
+++ b/src/main/java/com/github/gv2011/gson/JsonParser.java
@@ -13,16 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
 
-import com.google.gson.internal.Streams;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.MalformedJsonException;
+import com.github.gv2011.gson.internal.Streams;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonToken;
+import com.github.gv2011.gson.stream.MalformedJsonException;
 
 /**
  * A parser to parse Json into a parse tree of {@link JsonElement}s
diff --git a/src/main/java/com/google/gson/JsonPrimitive.java b/src/main/java/com/github/gv2011/gson/JsonPrimitive.java
similarity index 98%
rename from src/main/java/com/google/gson/JsonPrimitive.java
rename to src/main/java/com/github/gv2011/gson/JsonPrimitive.java
index e2443d435..69c9d08db 100644
--- a/src/main/java/com/google/gson/JsonPrimitive.java
+++ b/src/main/java/com/github/gv2011/gson/JsonPrimitive.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
-import com.google.gson.internal.$Gson$Preconditions;
-import com.google.gson.internal.LazilyParsedNumber;
+import com.github.gv2011.gson.internal.$Gson$Preconditions;
+import com.github.gv2011.gson.internal.LazilyParsedNumber;
 
 /**
  * A class representing a Json primitive value. A primitive value
diff --git a/src/main/java/com/google/gson/JsonSerializationContext.java b/src/main/java/com/github/gv2011/gson/JsonSerializationContext.java
similarity index 98%
rename from src/main/java/com/google/gson/JsonSerializationContext.java
rename to src/main/java/com/github/gv2011/gson/JsonSerializationContext.java
index ca3ec4f90..10cd27c70 100644
--- a/src/main/java/com/google/gson/JsonSerializationContext.java
+++ b/src/main/java/com/github/gv2011/gson/JsonSerializationContext.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.lang.reflect.Type;
 
diff --git a/src/main/java/com/google/gson/JsonSerializer.java b/src/main/java/com/github/gv2011/gson/JsonSerializer.java
similarity index 96%
rename from src/main/java/com/google/gson/JsonSerializer.java
rename to src/main/java/com/github/gv2011/gson/JsonSerializer.java
index a60500336..57f0d4032 100644
--- a/src/main/java/com/google/gson/JsonSerializer.java
+++ b/src/main/java/com/github/gv2011/gson/JsonSerializer.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.lang.reflect.Type;
 
 /**
  * Interface representing a custom serializer for Json. You should write a custom serializer, if
  * you are not happy with the default serialization done by Gson. You will also need to register
- * this serializer through {@link com.google.gson.GsonBuilder#registerTypeAdapter(Type, Object)}.
+ * this serializer through {@link com.github.gv2011.gson.GsonBuilder#registerTypeAdapter(Type, Object)}.
  *
  * <p>Let us look at example where defining a serializer will be useful. The {@code Id} class
  * defined below has two fields: {@code clazz} and {@code value}.</p>
diff --git a/src/main/java/com/google/gson/JsonStreamParser.java b/src/main/java/com/github/gv2011/gson/JsonStreamParser.java
similarity index 93%
rename from src/main/java/com/google/gson/JsonStreamParser.java
rename to src/main/java/com/github/gv2011/gson/JsonStreamParser.java
index f0438db32..ce21359ae 100644
--- a/src/main/java/com/google/gson/JsonStreamParser.java
+++ b/src/main/java/com/github/gv2011/gson/JsonStreamParser.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.io.EOFException;
 import java.io.IOException;
@@ -22,10 +22,10 @@
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
-import com.google.gson.internal.Streams;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.MalformedJsonException;
+import com.github.gv2011.gson.internal.Streams;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonToken;
+import com.github.gv2011.gson.stream.MalformedJsonException;
 
 /**
  * A streaming parser that allows reading of multiple {@link JsonElement}s from the specified reader
diff --git a/src/main/java/com/google/gson/JsonSyntaxException.java b/src/main/java/com/github/gv2011/gson/JsonSyntaxException.java
similarity index 97%
rename from src/main/java/com/google/gson/JsonSyntaxException.java
rename to src/main/java/com/github/gv2011/gson/JsonSyntaxException.java
index 17c1d3d3a..4e9b3e481 100644
--- a/src/main/java/com/google/gson/JsonSyntaxException.java
+++ b/src/main/java/com/github/gv2011/gson/JsonSyntaxException.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson;
+package com.github.gv2011.gson;
 
 /**
  * This exception is raised when Gson attempts to read (or write) a malformed
diff --git a/src/main/java/com/google/gson/LongSerializationPolicy.java b/src/main/java/com/github/gv2011/gson/LongSerializationPolicy.java
similarity index 98%
rename from src/main/java/com/google/gson/LongSerializationPolicy.java
rename to src/main/java/com/github/gv2011/gson/LongSerializationPolicy.java
index 7b732bab7..1cb866fc3 100644
--- a/src/main/java/com/google/gson/LongSerializationPolicy.java
+++ b/src/main/java/com/github/gv2011/gson/LongSerializationPolicy.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 /**
  * Defines the expected format for a {@code long} or {@code Long} type when its serialized.
diff --git a/src/main/java/com/google/gson/TreeTypeAdapter.java b/src/main/java/com/github/gv2011/gson/TreeTypeAdapter.java
similarity index 94%
rename from src/main/java/com/google/gson/TreeTypeAdapter.java
rename to src/main/java/com/github/gv2011/gson/TreeTypeAdapter.java
index 5b7305edc..eed0fd5df 100644
--- a/src/main/java/com/google/gson/TreeTypeAdapter.java
+++ b/src/main/java/com/github/gv2011/gson/TreeTypeAdapter.java
@@ -14,13 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
+
+import com.github.gv2011.gson.internal.$Gson$Preconditions;
+import com.github.gv2011.gson.internal.Streams;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonWriter;
 
-import com.google.gson.internal.$Gson$Preconditions;
-import com.google.gson.internal.Streams;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 
 /**
diff --git a/src/main/java/com/google/gson/TypeAdapter.java b/src/main/java/com/github/gv2011/gson/TypeAdapter.java
similarity index 95%
rename from src/main/java/com/google/gson/TypeAdapter.java
rename to src/main/java/com/github/gv2011/gson/TypeAdapter.java
index 4646d271d..1939c6578 100644
--- a/src/main/java/com/google/gson/TypeAdapter.java
+++ b/src/main/java/com/github/gv2011/gson/TypeAdapter.java
@@ -14,13 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
+
+import com.github.gv2011.gson.internal.bind.JsonTreeReader;
+import com.github.gv2011.gson.internal.bind.JsonTreeWriter;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonToken;
+import com.github.gv2011.gson.stream.JsonWriter;
 
-import com.google.gson.internal.bind.JsonTreeWriter;
-import com.google.gson.internal.bind.JsonTreeReader;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
@@ -131,7 +132,7 @@
    * Unlike Gson's similar {@link Gson#toJson(JsonElement, Appendable) toJson}
    * method, this write is strict. Create a {@link
    * JsonWriter#setLenient(boolean) lenient} {@code JsonWriter} and call
-   * {@link #write(com.google.gson.stream.JsonWriter, Object)} for lenient
+   * {@link #write(com.github.gv2011.gson.stream.JsonWriter, Object)} for lenient
    * writing.
    *
    * @param value the Java object to convert. May be null.
@@ -205,7 +206,7 @@ public final void toJson(Writer out, T value) throws IOException {
    * Converts {@code value} to a JSON document. Unlike Gson's similar {@link
    * Gson#toJson(Object) toJson} method, this write is strict. Create a {@link
    * JsonWriter#setLenient(boolean) lenient} {@code JsonWriter} and call
-   * {@link #write(com.google.gson.stream.JsonWriter, Object)} for lenient
+   * {@link #write(com.github.gv2011.gson.stream.JsonWriter, Object)} for lenient
    * writing.
    *
    * @param value the Java object to convert. May be null.
diff --git a/src/main/java/com/google/gson/TypeAdapterFactory.java b/src/main/java/com/github/gv2011/gson/TypeAdapterFactory.java
similarity index 97%
rename from src/main/java/com/google/gson/TypeAdapterFactory.java
rename to src/main/java/com/github/gv2011/gson/TypeAdapterFactory.java
index e12a72dcc..19e14f671 100644
--- a/src/main/java/com/google/gson/TypeAdapterFactory.java
+++ b/src/main/java/com/github/gv2011/gson/TypeAdapterFactory.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
-import com.google.gson.reflect.TypeToken;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 /**
  * Creates type adapters for set of related types. Type adapter factories are
@@ -80,7 +80,7 @@
  * mapping from lowercase name to enum value is computed eagerly.
  *
  * <p>As with type adapters, factories must be <i>registered</i> with a {@link
- * com.google.gson.GsonBuilder} for them to take effect: <pre>   {@code
+ * com.github.gv2011.gson.GsonBuilder} for them to take effect: <pre>   {@code
  *
  *  GsonBuilder builder = new GsonBuilder();
  *  builder.registerTypeAdapterFactory(new LowercaseEnumTypeAdapterFactory());
diff --git a/src/main/java/com/google/gson/annotations/Expose.java b/src/main/java/com/github/gv2011/gson/annotations/Expose.java
similarity index 93%
rename from src/main/java/com/google/gson/annotations/Expose.java
rename to src/main/java/com/github/gv2011/gson/annotations/Expose.java
index 1b9c70df0..9dfd756f7 100644
--- a/src/main/java/com/google/gson/annotations/Expose.java
+++ b/src/main/java/com/github/gv2011/gson/annotations/Expose.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.annotations;
+package com.github.gv2011.gson.annotations;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -25,9 +25,9 @@
  * An annotation that indicates this member should be exposed for JSON
  * serialization or deserialization.
  *
- * <p>This annotation has no effect unless you build {@link com.google.gson.Gson}
- * with a {@link com.google.gson.GsonBuilder} and invoke
- * {@link com.google.gson.GsonBuilder#excludeFieldsWithoutExposeAnnotation()}
+ * <p>This annotation has no effect unless you build {@link com.github.gv2011.gson.Gson}
+ * with a {@link com.github.gv2011.gson.GsonBuilder} and invoke
+ * {@link com.github.gv2011.gson.GsonBuilder#excludeFieldsWithoutExposeAnnotation()}
  * method.</p>
  *
  * <p>Here is an example of how this annotation is meant to be used:
diff --git a/src/main/java/com/google/gson/annotations/JsonAdapter.java b/src/main/java/com/github/gv2011/gson/annotations/JsonAdapter.java
similarity index 93%
rename from src/main/java/com/google/gson/annotations/JsonAdapter.java
rename to src/main/java/com/github/gv2011/gson/annotations/JsonAdapter.java
index 2ee3e682d..6db6a7c43 100644
--- a/src/main/java/com/google/gson/annotations/JsonAdapter.java
+++ b/src/main/java/com/github/gv2011/gson/annotations/JsonAdapter.java
@@ -14,15 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson.annotations;
+package com.github.gv2011.gson.annotations;
 
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+
 /**
  * An annotation that indicates the Gson {@link TypeAdapter} to use with a class
  * or field.
@@ -72,7 +73,7 @@
  * </pre>
  *
  * It's possible to specify different type adapters on a field, that
- * field's type, and in the {@link com.google.gson.GsonBuilder}. Field
+ * field's type, and in the {@link com.github.gv2011.gson.GsonBuilder}. Field
  * annotations take precedence over {@code GsonBuilder}-registered type
  * adapters, which in turn take precedence over annotated types.
  *
diff --git a/src/main/java/com/google/gson/annotations/SerializedName.java b/src/main/java/com/github/gv2011/gson/annotations/SerializedName.java
similarity index 89%
rename from src/main/java/com/google/gson/annotations/SerializedName.java
rename to src/main/java/com/github/gv2011/gson/annotations/SerializedName.java
index 363b95a35..223f7732b 100644
--- a/src/main/java/com/google/gson/annotations/SerializedName.java
+++ b/src/main/java/com/github/gv2011/gson/annotations/SerializedName.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.annotations;
+package com.github.gv2011.gson.annotations;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -25,10 +25,10 @@
  * An annotation that indicates this member should be serialized to JSON with
  * the provided name value as its field name.
  *
- * <p>This annotation will override any {@link com.google.gson.FieldNamingPolicy}, including
- * the default field naming policy, that may have been set on the {@link com.google.gson.Gson}
+ * <p>This annotation will override any {@link com.github.gv2011.gson.FieldNamingPolicy}, including
+ * the default field naming policy, that may have been set on the {@link com.github.gv2011.gson.Gson}
  * instance.  A different naming policy can set using the {@code GsonBuilder} class.  See
- * {@link com.google.gson.GsonBuilder#setFieldNamingPolicy(com.google.gson.FieldNamingPolicy)}
+ * {@link com.github.gv2011.gson.GsonBuilder#setFieldNamingPolicy(com.github.gv2011.gson.FieldNamingPolicy)}
  * for more information.</p>
  *
  * <p>Here is an example of how this annotation is meant to be used:</p>
@@ -71,7 +71,7 @@
  * </pre>
  * Note that MyClass.b is now deserialized from either name1, name2 or name3.
  *
- * @see com.google.gson.FieldNamingPolicy
+ * @see com.github.gv2011.gson.FieldNamingPolicy
  *
  * @author Inderjeet Singh
  * @author Joel Leitch
diff --git a/src/main/java/com/google/gson/annotations/Since.java b/src/main/java/com/github/gv2011/gson/annotations/Since.java
similarity index 88%
rename from src/main/java/com/google/gson/annotations/Since.java
rename to src/main/java/com/github/gv2011/gson/annotations/Since.java
index 541f154b6..4e7113082 100644
--- a/src/main/java/com/google/gson/annotations/Since.java
+++ b/src/main/java/com/github/gv2011/gson/annotations/Since.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.annotations;
+package com.github.gv2011.gson.annotations;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -26,9 +26,9 @@
  * This annotation is useful to manage versioning of your Json classes for a web-service.
  *
  * <p>
- * This annotation has no effect unless you build {@link com.google.gson.Gson} with a
- * {@link com.google.gson.GsonBuilder} and invoke
- * {@link com.google.gson.GsonBuilder#setVersion(double)} method.
+ * This annotation has no effect unless you build {@link com.github.gv2011.gson.Gson} with a
+ * {@link com.github.gv2011.gson.GsonBuilder} and invoke
+ * {@link com.github.gv2011.gson.GsonBuilder#setVersion(double)} method.
  *
  * <p>Here is an example of how this annotation is meant to be used:</p>
  * <pre>
diff --git a/src/main/java/com/google/gson/annotations/Until.java b/src/main/java/com/github/gv2011/gson/annotations/Until.java
similarity index 89%
rename from src/main/java/com/google/gson/annotations/Until.java
rename to src/main/java/com/github/gv2011/gson/annotations/Until.java
index 4648b8a2a..d6eb3d3d1 100644
--- a/src/main/java/com/google/gson/annotations/Until.java
+++ b/src/main/java/com/github/gv2011/gson/annotations/Until.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.annotations;
+package com.github.gv2011.gson.annotations;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -28,9 +28,9 @@
  * is useful to manage versioning of your JSON classes for a web-service.
  *
  * <p>
- * This annotation has no effect unless you build {@link com.google.gson.Gson} with a
- * {@link com.google.gson.GsonBuilder} and invoke
- * {@link com.google.gson.GsonBuilder#setVersion(double)} method.
+ * This annotation has no effect unless you build {@link com.github.gv2011.gson.Gson} with a
+ * {@link com.github.gv2011.gson.GsonBuilder} and invoke
+ * {@link com.github.gv2011.gson.GsonBuilder#setVersion(double)} method.
  *
  * <p>Here is an example of how this annotation is meant to be used:</p>
  * <pre>
diff --git a/src/main/java/com/google/gson/annotations/package-info.java b/src/main/java/com/github/gv2011/gson/annotations/package-info.java
similarity index 60%
rename from src/main/java/com/google/gson/annotations/package-info.java
rename to src/main/java/com/github/gv2011/gson/annotations/package-info.java
index 1c461fd68..b0043d91e 100644
--- a/src/main/java/com/google/gson/annotations/package-info.java
+++ b/src/main/java/com/github/gv2011/gson/annotations/package-info.java
@@ -1,6 +1,6 @@
 /**
- * This package provides annotations that can be used with {@link com.google.gson.Gson}.
+ * This package provides annotations that can be used with {@link com.github.gv2011.gson.Gson}.
  * 
  * @author Inderjeet Singh, Joel Leitch
  */
-package com.google.gson.annotations;
\ No newline at end of file
+package com.github.gv2011.gson.annotations;
\ No newline at end of file
diff --git a/src/main/java/com/google/gson/internal/$Gson$Preconditions.java b/src/main/java/com/github/gv2011/gson/internal/$Gson$Preconditions.java
similarity index 93%
rename from src/main/java/com/google/gson/internal/$Gson$Preconditions.java
rename to src/main/java/com/github/gv2011/gson/internal/$Gson$Preconditions.java
index f0e7d3fac..23ab3f301 100644
--- a/src/main/java/com/google/gson/internal/$Gson$Preconditions.java
+++ b/src/main/java/com/github/gv2011/gson/internal/$Gson$Preconditions.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.github.gv2011.gson.internal;
 
 /**
  * A simple utility class used to check method Preconditions.
diff --git a/src/main/java/com/google/gson/internal/$Gson$Types.java b/src/main/java/com/github/gv2011/gson/internal/$Gson$Types.java
similarity index 99%
rename from src/main/java/com/google/gson/internal/$Gson$Types.java
rename to src/main/java/com/github/gv2011/gson/internal/$Gson$Types.java
index 017e27cee..d21c2472b 100644
--- a/src/main/java/com/google/gson/internal/$Gson$Types.java
+++ b/src/main/java/com/github/gv2011/gson/internal/$Gson$Types.java
@@ -14,7 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.github.gv2011.gson.internal;
+
+import static com.github.gv2011.gson.internal.$Gson$Preconditions.checkArgument;
+import static com.github.gv2011.gson.internal.$Gson$Preconditions.checkNotNull;
 
 import java.io.Serializable;
 import java.lang.reflect.Array;
@@ -31,9 +34,6 @@
 import java.util.NoSuchElementException;
 import java.util.Properties;
 
-import static com.google.gson.internal.$Gson$Preconditions.checkArgument;
-import static com.google.gson.internal.$Gson$Preconditions.checkNotNull;
-
 /**
  * Static methods for working with types.
  *
diff --git a/src/main/java/com/google/gson/internal/ConstructorConstructor.java b/src/main/java/com/github/gv2011/gson/internal/ConstructorConstructor.java
similarity index 97%
rename from src/main/java/com/google/gson/internal/ConstructorConstructor.java
rename to src/main/java/com/github/gv2011/gson/internal/ConstructorConstructor.java
index 0c9bd6d72..2e493f087 100644
--- a/src/main/java/com/google/gson/internal/ConstructorConstructor.java
+++ b/src/main/java/com/github/gv2011/gson/internal/ConstructorConstructor.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.github.gv2011.gson.internal;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
@@ -38,9 +38,9 @@
 import java.util.concurrent.ConcurrentNavigableMap;
 import java.util.concurrent.ConcurrentSkipListMap;
 
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonIOException;
-import com.google.gson.reflect.TypeToken;
+import com.github.gv2011.gson.InstanceCreator;
+import com.github.gv2011.gson.JsonIOException;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 /**
  * Returns a function that can construct an instance of a requested type.
diff --git a/src/main/java/com/google/gson/internal/Excluder.java b/src/main/java/com/github/gv2011/gson/internal/Excluder.java
similarity index 92%
rename from src/main/java/com/google/gson/internal/Excluder.java
rename to src/main/java/com/github/gv2011/gson/internal/Excluder.java
index bef790406..d4a6fcce3 100644
--- a/src/main/java/com/google/gson/internal/Excluder.java
+++ b/src/main/java/com/github/gv2011/gson/internal/Excluder.java
@@ -14,19 +14,20 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
-
-import com.google.gson.ExclusionStrategy;
-import com.google.gson.FieldAttributes;
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.Expose;
-import com.google.gson.annotations.Since;
-import com.google.gson.annotations.Until;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+package com.github.gv2011.gson.internal;
+
+import com.github.gv2011.gson.ExclusionStrategy;
+import com.github.gv2011.gson.FieldAttributes;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+import com.github.gv2011.gson.annotations.Expose;
+import com.github.gv2011.gson.annotations.Since;
+import com.github.gv2011.gson.annotations.Until;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonWriter;
+
 import java.io.IOException;
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
diff --git a/src/main/java/com/google/gson/internal/JsonReaderInternalAccess.java b/src/main/java/com/github/gv2011/gson/internal/JsonReaderInternalAccess.java
similarity index 91%
rename from src/main/java/com/google/gson/internal/JsonReaderInternalAccess.java
rename to src/main/java/com/github/gv2011/gson/internal/JsonReaderInternalAccess.java
index bbd472040..a609f0afc 100644
--- a/src/main/java/com/google/gson/internal/JsonReaderInternalAccess.java
+++ b/src/main/java/com/github/gv2011/gson/internal/JsonReaderInternalAccess.java
@@ -14,11 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.github.gv2011.gson.internal;
 
-import com.google.gson.stream.JsonReader;
 import java.io.IOException;
 
+import com.github.gv2011.gson.stream.JsonReader;
+
 /**
  * Internal-only APIs of JsonReader available only to other classes in Gson.
  */
diff --git a/src/main/java/com/google/gson/internal/LazilyParsedNumber.java b/src/main/java/com/github/gv2011/gson/internal/LazilyParsedNumber.java
similarity index 98%
rename from src/main/java/com/google/gson/internal/LazilyParsedNumber.java
rename to src/main/java/com/github/gv2011/gson/internal/LazilyParsedNumber.java
index 3669af7b5..d0c3ba816 100644
--- a/src/main/java/com/google/gson/internal/LazilyParsedNumber.java
+++ b/src/main/java/com/github/gv2011/gson/internal/LazilyParsedNumber.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.internal;
+package com.github.gv2011.gson.internal;
 
 import java.io.ObjectStreamException;
 import java.math.BigDecimal;
diff --git a/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java b/src/main/java/com/github/gv2011/gson/internal/LinkedHashTreeMap.java
similarity index 99%
rename from src/main/java/com/google/gson/internal/LinkedHashTreeMap.java
rename to src/main/java/com/github/gv2011/gson/internal/LinkedHashTreeMap.java
index b2707c50d..6b6eada82 100644
--- a/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java
+++ b/src/main/java/com/github/gv2011/gson/internal/LinkedHashTreeMap.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.github.gv2011.gson.internal;
 
 import java.io.ObjectStreamException;
 import java.io.Serializable;
diff --git a/src/main/java/com/google/gson/internal/LinkedTreeMap.java b/src/main/java/com/github/gv2011/gson/internal/LinkedTreeMap.java
similarity index 99%
rename from src/main/java/com/google/gson/internal/LinkedTreeMap.java
rename to src/main/java/com/github/gv2011/gson/internal/LinkedTreeMap.java
index 80462742e..65f5f53fe 100644
--- a/src/main/java/com/google/gson/internal/LinkedTreeMap.java
+++ b/src/main/java/com/github/gv2011/gson/internal/LinkedTreeMap.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.github.gv2011.gson.internal;
 
 import java.io.ObjectStreamException;
 import java.io.Serializable;
diff --git a/src/main/java/com/google/gson/internal/ObjectConstructor.java b/src/main/java/com/github/gv2011/gson/internal/ObjectConstructor.java
similarity index 95%
rename from src/main/java/com/google/gson/internal/ObjectConstructor.java
rename to src/main/java/com/github/gv2011/gson/internal/ObjectConstructor.java
index 6ef20607f..955bb56ac 100644
--- a/src/main/java/com/google/gson/internal/ObjectConstructor.java
+++ b/src/main/java/com/github/gv2011/gson/internal/ObjectConstructor.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.github.gv2011.gson.internal;
 
 /**
  * Defines a generic object construction factory.  The purpose of this class
diff --git a/src/main/java/com/google/gson/internal/Primitives.java b/src/main/java/com/github/gv2011/gson/internal/Primitives.java
similarity index 99%
rename from src/main/java/com/google/gson/internal/Primitives.java
rename to src/main/java/com/github/gv2011/gson/internal/Primitives.java
index a98f6242a..c1c7f33db 100644
--- a/src/main/java/com/google/gson/internal/Primitives.java
+++ b/src/main/java/com/github/gv2011/gson/internal/Primitives.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.github.gv2011.gson.internal;
 
 
 import java.lang.reflect.Type;
diff --git a/src/main/java/com/google/gson/internal/Streams.java b/src/main/java/com/github/gv2011/gson/internal/Streams.java
similarity index 87%
rename from src/main/java/com/google/gson/internal/Streams.java
rename to src/main/java/com/github/gv2011/gson/internal/Streams.java
index 74956d777..609d695e0 100644
--- a/src/main/java/com/google/gson/internal/Streams.java
+++ b/src/main/java/com/github/gv2011/gson/internal/Streams.java
@@ -14,17 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.github.gv2011.gson.internal;
+
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonIOException;
+import com.github.gv2011.gson.JsonNull;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.JsonSyntaxException;
+import com.github.gv2011.gson.internal.bind.TypeAdapters;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonWriter;
+import com.github.gv2011.gson.stream.MalformedJsonException;
 
-import com.google.gson.JsonElement;
-import com.google.gson.JsonIOException;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.internal.bind.TypeAdapters;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-import com.google.gson.stream.MalformedJsonException;
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.Writer;
diff --git a/src/main/java/com/google/gson/internal/UnsafeAllocator.java b/src/main/java/com/github/gv2011/gson/internal/UnsafeAllocator.java
similarity index 98%
rename from src/main/java/com/google/gson/internal/UnsafeAllocator.java
rename to src/main/java/com/github/gv2011/gson/internal/UnsafeAllocator.java
index fce0be379..47e660f25 100644
--- a/src/main/java/com/google/gson/internal/UnsafeAllocator.java
+++ b/src/main/java/com/github/gv2011/gson/internal/UnsafeAllocator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.github.gv2011.gson.internal;
 
 import java.io.ObjectInputStream;
 import java.io.ObjectStreamClass;
diff --git a/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java b/src/main/java/com/github/gv2011/gson/internal/bind/ArrayTypeAdapter.java
similarity index 87%
rename from src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
rename to src/main/java/com/github/gv2011/gson/internal/bind/ArrayTypeAdapter.java
index 3fb7c0568..888642f47 100644
--- a/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java
+++ b/src/main/java/com/github/gv2011/gson/internal/bind/ArrayTypeAdapter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.github.gv2011.gson.internal.bind;
 
 import java.io.IOException;
 import java.lang.reflect.Array;
@@ -23,14 +23,14 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+import com.github.gv2011.gson.internal.$Gson$Types;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonToken;
+import com.github.gv2011.gson.stream.JsonWriter;
 
 /**
  * Adapt an array of objects.
diff --git a/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java b/src/main/java/com/github/gv2011/gson/internal/bind/CollectionTypeAdapterFactory.java
similarity index 84%
rename from src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
rename to src/main/java/com/github/gv2011/gson/internal/bind/CollectionTypeAdapterFactory.java
index 1d57844a4..2a19f54ee 100644
--- a/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
+++ b/src/main/java/com/github/gv2011/gson/internal/bind/CollectionTypeAdapterFactory.java
@@ -14,18 +14,19 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.github.gv2011.gson.internal.bind;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+import com.github.gv2011.gson.internal.$Gson$Types;
+import com.github.gv2011.gson.internal.ConstructorConstructor;
+import com.github.gv2011.gson.internal.ObjectConstructor;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonToken;
+import com.github.gv2011.gson.stream.JsonWriter;
 
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.ObjectConstructor;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.util.Collection;
diff --git a/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java b/src/main/java/com/github/gv2011/gson/internal/bind/DateTypeAdapter.java
similarity index 84%
rename from src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
rename to src/main/java/com/github/gv2011/gson/internal/bind/DateTypeAdapter.java
index 561af1985..5d8e6269f 100644
--- a/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
+++ b/src/main/java/com/github/gv2011/gson/internal/bind/DateTypeAdapter.java
@@ -14,17 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.github.gv2011.gson.internal.bind;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.JsonSyntaxException;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+import com.github.gv2011.gson.internal.bind.util.ISO8601Utils;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonToken;
+import com.github.gv2011.gson.stream.JsonWriter;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.bind.util.ISO8601Utils;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.text.DateFormat;
 import java.text.ParseException;
diff --git a/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java b/src/main/java/com/github/gv2011/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
similarity index 88%
rename from src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
rename to src/main/java/com/github/gv2011/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
index b52e15734..a35776538 100644
--- a/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
+++ b/src/main/java/com/github/gv2011/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.github.gv2011.gson.internal.bind;
 
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.reflect.TypeToken;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+import com.github.gv2011.gson.annotations.JsonAdapter;
+import com.github.gv2011.gson.internal.ConstructorConstructor;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 /**
  * Given a type T, looks for the annotation {@link JsonAdapter} and uses an instance of the
diff --git a/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java b/src/main/java/com/github/gv2011/gson/internal/bind/JsonTreeReader.java
similarity index 94%
rename from src/main/java/com/google/gson/internal/bind/JsonTreeReader.java
rename to src/main/java/com/github/gv2011/gson/internal/bind/JsonTreeReader.java
index 6a8362805..5e6e18c56 100644
--- a/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java
+++ b/src/main/java/com/github/gv2011/gson/internal/bind/JsonTreeReader.java
@@ -14,15 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
-
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
+package com.github.gv2011.gson.internal.bind;
+
+import com.github.gv2011.gson.JsonArray;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonNull;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonToken;
+
 import java.io.IOException;
 import java.io.Reader;
 import java.util.ArrayList;
diff --git a/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java b/src/main/java/com/github/gv2011/gson/internal/bind/JsonTreeWriter.java
similarity index 94%
rename from src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java
rename to src/main/java/com/github/gv2011/gson/internal/bind/JsonTreeWriter.java
index 5f9f0395d..8f907b7f6 100644
--- a/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java
+++ b/src/main/java/com/github/gv2011/gson/internal/bind/JsonTreeWriter.java
@@ -14,14 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
-
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.stream.JsonWriter;
+package com.github.gv2011.gson.internal.bind;
+
+import com.github.gv2011.gson.JsonArray;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonNull;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.stream.JsonWriter;
+
 import java.io.IOException;
 import java.io.Writer;
 import java.util.ArrayList;
diff --git a/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java b/src/main/java/com/github/gv2011/gson/internal/bind/MapTypeAdapterFactory.java
similarity index 91%
rename from src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
rename to src/main/java/com/github/gv2011/gson/internal/bind/MapTypeAdapterFactory.java
index 1682aad04..e2ba24219 100644
--- a/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
+++ b/src/main/java/com/github/gv2011/gson/internal/bind/MapTypeAdapterFactory.java
@@ -14,23 +14,24 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.github.gv2011.gson.internal.bind;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.JsonSyntaxException;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+import com.github.gv2011.gson.internal.$Gson$Types;
+import com.github.gv2011.gson.internal.ConstructorConstructor;
+import com.github.gv2011.gson.internal.JsonReaderInternalAccess;
+import com.github.gv2011.gson.internal.ObjectConstructor;
+import com.github.gv2011.gson.internal.Streams;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonToken;
+import com.github.gv2011.gson.stream.JsonWriter;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.JsonReaderInternalAccess;
-import com.google.gson.internal.ObjectConstructor;
-import com.google.gson.internal.Streams;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
diff --git a/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java b/src/main/java/com/github/gv2011/gson/internal/bind/ObjectTypeAdapter.java
similarity index 86%
rename from src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
rename to src/main/java/com/github/gv2011/gson/internal/bind/ObjectTypeAdapter.java
index ec42e0482..a64c3b705 100644
--- a/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
+++ b/src/main/java/com/github/gv2011/gson/internal/bind/ObjectTypeAdapter.java
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
-
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.internal.LinkedTreeMap;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+package com.github.gv2011.gson.internal.bind;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+import com.github.gv2011.gson.internal.LinkedTreeMap;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonToken;
+import com.github.gv2011.gson.stream.JsonWriter;
 
 import java.io.IOException;
 import java.util.ArrayList;
diff --git a/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java b/src/main/java/com/github/gv2011/gson/internal/bind/ReflectiveTypeAdapterFactory.java
similarity index 89%
rename from src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
rename to src/main/java/com/github/gv2011/gson/internal/bind/ReflectiveTypeAdapterFactory.java
index c87cdbf16..2d9a681ff 100644
--- a/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ b/src/main/java/com/github/gv2011/gson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -14,24 +14,27 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
-
-import com.google.gson.FieldNamingStrategy;
-import com.google.gson.Gson;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.annotations.SerializedName;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.internal.ConstructorConstructor;
-import com.google.gson.internal.Excluder;
-import com.google.gson.internal.ObjectConstructor;
-import com.google.gson.internal.Primitives;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+package com.github.gv2011.gson.internal.bind;
+
+import com.github.gv2011.gson.FieldNamingStrategy;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.JsonSyntaxException;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+import com.github.gv2011.gson.annotations.JsonAdapter;
+import com.github.gv2011.gson.annotations.SerializedName;
+import com.github.gv2011.gson.internal.$Gson$Types;
+import com.github.gv2011.gson.internal.ConstructorConstructor;
+import com.github.gv2011.gson.internal.Excluder;
+import com.github.gv2011.gson.internal.ObjectConstructor;
+import com.github.gv2011.gson.internal.Primitives;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonToken;
+import com.github.gv2011.gson.stream.JsonWriter;
+
+import static com.github.gv2011.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter;
+
 import java.io.IOException;
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
@@ -40,8 +43,6 @@
 import java.util.List;
 import java.util.Map;
 
-import static com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter;
-
 /**
  * Type adapter that reflects over the fields and methods of a class.
  */
diff --git a/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java b/src/main/java/com/github/gv2011/gson/internal/bind/SqlDateTypeAdapter.java
similarity index 83%
rename from src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java
rename to src/main/java/com/github/gv2011/gson/internal/bind/SqlDateTypeAdapter.java
index 5ec244f29..56b887db1 100644
--- a/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java
+++ b/src/main/java/com/github/gv2011/gson/internal/bind/SqlDateTypeAdapter.java
@@ -14,16 +14,17 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.github.gv2011.gson.internal.bind;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.JsonSyntaxException;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonToken;
+import com.github.gv2011.gson.stream.JsonWriter;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.text.DateFormat;
 import java.text.ParseException;
diff --git a/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java b/src/main/java/com/github/gv2011/gson/internal/bind/TimeTypeAdapter.java
similarity index 82%
rename from src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java
rename to src/main/java/com/github/gv2011/gson/internal/bind/TimeTypeAdapter.java
index 55d4b2f69..d0319a8ce 100644
--- a/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java
+++ b/src/main/java/com/github/gv2011/gson/internal/bind/TimeTypeAdapter.java
@@ -14,16 +14,17 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.github.gv2011.gson.internal.bind;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.JsonSyntaxException;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonToken;
+import com.github.gv2011.gson.stream.JsonWriter;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.sql.Time;
 import java.text.DateFormat;
diff --git a/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java b/src/main/java/com/github/gv2011/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
similarity index 88%
rename from src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
rename to src/main/java/com/github/gv2011/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
index 7e52c27d2..df11b12ff 100644
--- a/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
+++ b/src/main/java/com/github/gv2011/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java
@@ -13,13 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.internal.bind;
+package com.github.gv2011.gson.internal.bind;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonWriter;
 
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
diff --git a/src/main/java/com/google/gson/internal/bind/TypeAdapters.java b/src/main/java/com/github/gv2011/gson/internal/bind/TypeAdapters.java
similarity index 97%
rename from src/main/java/com/google/gson/internal/bind/TypeAdapters.java
rename to src/main/java/com/github/gv2011/gson/internal/bind/TypeAdapters.java
index 0d6d013c1..bb84886b7 100644
--- a/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
+++ b/src/main/java/com/github/gv2011/gson/internal/bind/TypeAdapters.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.github.gv2011.gson.internal.bind;
 
 import java.io.IOException;
 import java.math.BigDecimal;
@@ -40,22 +40,22 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicIntegerArray;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonIOException;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.SerializedName;
-import com.google.gson.internal.LazilyParsedNumber;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonToken;
-import com.google.gson.stream.JsonWriter;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.JsonArray;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonIOException;
+import com.github.gv2011.gson.JsonNull;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.JsonSyntaxException;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+import com.github.gv2011.gson.annotations.SerializedName;
+import com.github.gv2011.gson.internal.LazilyParsedNumber;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonToken;
+import com.github.gv2011.gson.stream.JsonWriter;
 
 /**
  * Type adapters for basic types.
diff --git a/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java b/src/main/java/com/github/gv2011/gson/internal/bind/util/ISO8601Utils.java
similarity index 99%
rename from src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java
rename to src/main/java/com/github/gv2011/gson/internal/bind/util/ISO8601Utils.java
index c931b0906..8a19b5867 100644
--- a/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java
+++ b/src/main/java/com/github/gv2011/gson/internal/bind/util/ISO8601Utils.java
@@ -1,4 +1,4 @@
-package com.google.gson.internal.bind.util;
+package com.github.gv2011.gson.internal.bind.util;
 
 import java.text.ParseException;
 import java.text.ParsePosition;
diff --git a/src/main/java/com/google/gson/internal/package-info.java b/src/main/java/com/github/gv2011/gson/internal/package-info.java
similarity index 85%
rename from src/main/java/com/google/gson/internal/package-info.java
rename to src/main/java/com/github/gv2011/gson/internal/package-info.java
index b5139b6de..e6224ecc7 100644
--- a/src/main/java/com/google/gson/internal/package-info.java
+++ b/src/main/java/com/github/gv2011/gson/internal/package-info.java
@@ -4,4 +4,4 @@
  *
  * @author Inderjeet Singh, Joel Leitch, Jesse Wilson
  */
-package com.google.gson.internal;
\ No newline at end of file
+package com.github.gv2011.gson.internal;
\ No newline at end of file
diff --git a/src/main/java/com/github/gv2011/gson/package-info.java b/src/main/java/com/github/gv2011/gson/package-info.java
new file mode 100644
index 000000000..b30caebcc
--- /dev/null
+++ b/src/main/java/com/github/gv2011/gson/package-info.java
@@ -0,0 +1,11 @@
+/**
+ * This package provides the {@link com.github.gv2011.gson.Gson} class to convert Json to Java and
+ * vice-versa.
+ *
+ * <p>The primary class to use is {@link com.github.gv2011.gson.Gson} which can be constructed with
+ * {@code new Gson()} (using default settings) or by using {@link com.github.gv2011.gson.GsonBuilder}
+ * (to configure various options such as using versioning and so on).</p>
+ *
+ * @author Inderjeet Singh, Joel Leitch
+ */
+package com.github.gv2011.gson;
\ No newline at end of file
diff --git a/src/main/java/com/google/gson/reflect/TypeToken.java b/src/main/java/com/github/gv2011/gson/reflect/TypeToken.java
similarity index 98%
rename from src/main/java/com/google/gson/reflect/TypeToken.java
rename to src/main/java/com/github/gv2011/gson/reflect/TypeToken.java
index e16e8e6dc..68c634623 100644
--- a/src/main/java/com/google/gson/reflect/TypeToken.java
+++ b/src/main/java/com/github/gv2011/gson/reflect/TypeToken.java
@@ -14,10 +14,8 @@
  * limitations under the License.
  */
 
-package com.google.gson.reflect;
+package com.github.gv2011.gson.reflect;
 
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.internal.$Gson$Preconditions;
 import java.lang.reflect.GenericArrayType;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
@@ -25,6 +23,9 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import com.github.gv2011.gson.internal.$Gson$Preconditions;
+import com.github.gv2011.gson.internal.$Gson$Types;
+
 /**
  * Represents a generic type {@code T}. Java doesn't yet provide a way to
  * represent generic types, so this class does. Forces clients to create a
diff --git a/src/main/java/com/google/gson/reflect/package-info.java b/src/main/java/com/github/gv2011/gson/reflect/package-info.java
similarity index 78%
rename from src/main/java/com/google/gson/reflect/package-info.java
rename to src/main/java/com/github/gv2011/gson/reflect/package-info.java
index e666c4311..87e55b264 100644
--- a/src/main/java/com/google/gson/reflect/package-info.java
+++ b/src/main/java/com/github/gv2011/gson/reflect/package-info.java
@@ -3,4 +3,4 @@
  *  
  * @author Inderjeet Singh, Joel Leitch
  */
-package com.google.gson.reflect;
\ No newline at end of file
+package com.github.gv2011.gson.reflect;
\ No newline at end of file
diff --git a/src/main/java/com/google/gson/stream/JsonReader.java b/src/main/java/com/github/gv2011/gson/stream/JsonReader.java
similarity index 98%
rename from src/main/java/com/google/gson/stream/JsonReader.java
rename to src/main/java/com/github/gv2011/gson/stream/JsonReader.java
index 838355cb4..9f9597996 100644
--- a/src/main/java/com/google/gson/stream/JsonReader.java
+++ b/src/main/java/com/github/gv2011/gson/stream/JsonReader.java
@@ -14,10 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.github.gv2011.gson.stream;
+
+import com.github.gv2011.gson.internal.JsonReaderInternalAccess;
+import com.github.gv2011.gson.internal.bind.JsonTreeReader;
 
-import com.google.gson.internal.JsonReaderInternalAccess;
-import com.google.gson.internal.bind.JsonTreeReader;
 import java.io.Closeable;
 import java.io.EOFException;
 import java.io.IOException;
@@ -771,7 +772,7 @@ private boolean isLiteral(char c) throws IOException {
   }
 
   /**
-   * Returns the next token, a {@link com.google.gson.stream.JsonToken#NAME property name}, and
+   * Returns the next token, a {@link com.github.gv2011.gson.stream.JsonToken#NAME property name}, and
    * consumes it.
    *
    * @throws java.io.IOException if the next token in the stream is not a property
@@ -799,7 +800,7 @@ public String nextName() throws IOException {
   }
 
   /**
-   * Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,
+   * Returns the {@link com.github.gv2011.gson.stream.JsonToken#STRING string} value of the next token,
    * consuming it. If the next token is a number, this method will return its
    * string form.
    *
@@ -836,7 +837,7 @@ public String nextString() throws IOException {
   }
 
   /**
-   * Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
+   * Returns the {@link com.github.gv2011.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,
    * consuming it.
    *
    * @throws IllegalStateException if the next token is not a boolean or if
@@ -882,7 +883,7 @@ public void nextNull() throws IOException {
   }
 
   /**
-   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,
+   * Returns the {@link com.github.gv2011.gson.stream.JsonToken#NUMBER double} value of the next token,
    * consuming it. If the next token is a string, this method will attempt to
    * parse it as a double using {@link Double#parseDouble(String)}.
    *
@@ -927,7 +928,7 @@ public double nextDouble() throws IOException {
   }
 
   /**
-   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,
+   * Returns the {@link com.github.gv2011.gson.stream.JsonToken#NUMBER long} value of the next token,
    * consuming it. If the next token is a string, this method will attempt to
    * parse it as a long. If the next token's numeric value cannot be exactly
    * represented by a Java {@code long}, this method throws.
@@ -1149,7 +1150,7 @@ private void skipUnquotedValue() throws IOException {
   }
 
   /**
-   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,
+   * Returns the {@link com.github.gv2011.gson.stream.JsonToken#NUMBER int} value of the next token,
    * consuming it. If the next token is a string, this method will attempt to
    * parse it as an int. If the next token's numeric value cannot be exactly
    * represented by a Java {@code int}, this method throws.
diff --git a/src/main/java/com/google/gson/stream/JsonScope.java b/src/main/java/com/github/gv2011/gson/stream/JsonScope.java
similarity index 97%
rename from src/main/java/com/google/gson/stream/JsonScope.java
rename to src/main/java/com/github/gv2011/gson/stream/JsonScope.java
index da6913727..40b24120d 100644
--- a/src/main/java/com/google/gson/stream/JsonScope.java
+++ b/src/main/java/com/github/gv2011/gson/stream/JsonScope.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.github.gv2011.gson.stream;
 
 /**
  * Lexical scoping elements within a JSON reader or writer.
diff --git a/src/main/java/com/google/gson/stream/JsonToken.java b/src/main/java/com/github/gv2011/gson/stream/JsonToken.java
similarity index 98%
rename from src/main/java/com/google/gson/stream/JsonToken.java
rename to src/main/java/com/github/gv2011/gson/stream/JsonToken.java
index f1025b3f4..3b8edc37c 100644
--- a/src/main/java/com/google/gson/stream/JsonToken.java
+++ b/src/main/java/com/github/gv2011/gson/stream/JsonToken.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.github.gv2011.gson.stream;
 
 /**
  * A structure, name or value type in a JSON-encoded string.
diff --git a/src/main/java/com/google/gson/stream/JsonWriter.java b/src/main/java/com/github/gv2011/gson/stream/JsonWriter.java
similarity index 97%
rename from src/main/java/com/google/gson/stream/JsonWriter.java
rename to src/main/java/com/github/gv2011/gson/stream/JsonWriter.java
index 9bf2d22a6..de564dc4e 100644
--- a/src/main/java/com/google/gson/stream/JsonWriter.java
+++ b/src/main/java/com/github/gv2011/gson/stream/JsonWriter.java
@@ -14,21 +14,21 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.github.gv2011.gson.stream;
+
+import static com.github.gv2011.gson.stream.JsonScope.DANGLING_NAME;
+import static com.github.gv2011.gson.stream.JsonScope.EMPTY_ARRAY;
+import static com.github.gv2011.gson.stream.JsonScope.EMPTY_DOCUMENT;
+import static com.github.gv2011.gson.stream.JsonScope.EMPTY_OBJECT;
+import static com.github.gv2011.gson.stream.JsonScope.NONEMPTY_ARRAY;
+import static com.github.gv2011.gson.stream.JsonScope.NONEMPTY_DOCUMENT;
+import static com.github.gv2011.gson.stream.JsonScope.NONEMPTY_OBJECT;
 
 import java.io.Closeable;
 import java.io.Flushable;
 import java.io.IOException;
 import java.io.Writer;
 
-import static com.google.gson.stream.JsonScope.DANGLING_NAME;
-import static com.google.gson.stream.JsonScope.EMPTY_ARRAY;
-import static com.google.gson.stream.JsonScope.EMPTY_DOCUMENT;
-import static com.google.gson.stream.JsonScope.EMPTY_OBJECT;
-import static com.google.gson.stream.JsonScope.NONEMPTY_ARRAY;
-import static com.google.gson.stream.JsonScope.NONEMPTY_DOCUMENT;
-import static com.google.gson.stream.JsonScope.NONEMPTY_OBJECT;
-
 /**
  * Writes a JSON (<a href="http://www.ietf.org/rfc/rfc7159.txt">RFC 7159</a>)
  * encoded value to a stream, one token at a time. The stream includes both
diff --git a/src/main/java/com/google/gson/stream/MalformedJsonException.java b/src/main/java/com/github/gv2011/gson/stream/MalformedJsonException.java
similarity index 97%
rename from src/main/java/com/google/gson/stream/MalformedJsonException.java
rename to src/main/java/com/github/gv2011/gson/stream/MalformedJsonException.java
index 9da70ebcc..13bc0ae3b 100644
--- a/src/main/java/com/google/gson/stream/MalformedJsonException.java
+++ b/src/main/java/com/github/gv2011/gson/stream/MalformedJsonException.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.github.gv2011.gson.stream;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/github/gv2011/gson/test/TestMarker.java b/src/main/java/com/github/gv2011/gson/test/TestMarker.java
new file mode 100644
index 000000000..6d3fb0651
--- /dev/null
+++ b/src/main/java/com/github/gv2011/gson/test/TestMarker.java
@@ -0,0 +1,5 @@
+package com.github.gv2011.gson.test;
+
+public final class TestMarker {
+
+}
diff --git a/src/main/java/com/google/gson/package-info.java b/src/main/java/com/google/gson/package-info.java
deleted file mode 100644
index 428e280cf..000000000
--- a/src/main/java/com/google/gson/package-info.java
+++ /dev/null
@@ -1,11 +0,0 @@
-/**
- * This package provides the {@link com.google.gson.Gson} class to convert Json to Java and
- * vice-versa.
- *
- * <p>The primary class to use is {@link com.google.gson.Gson} which can be constructed with
- * {@code new Gson()} (using default settings) or by using {@link com.google.gson.GsonBuilder}
- * (to configure various options such as using versioning and so on).</p>
- *
- * @author Inderjeet Singh, Joel Leitch
- */
-package com.google.gson;
\ No newline at end of file
diff --git a/src/main/java/com/google/gson/test/TestMarker.java b/src/main/java/com/google/gson/test/TestMarker.java
deleted file mode 100644
index 4b12c95bf..000000000
--- a/src/main/java/com/google/gson/test/TestMarker.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package com.google.gson.test;
-
-public final class TestMarker {
-
-}
diff --git a/src/main/java/module-info.java b/src/main/java/module-info.java
index 958ce3bd0..4627a9653 100644
--- a/src/main/java/module-info.java
+++ b/src/main/java/module-info.java
@@ -1,4 +1,4 @@
 module com.github.gv2011.gson{
   requires java.sql;
-  exports com.google.gson.stream;
+  exports com.github.gv2011.gson.stream;
 }
\ No newline at end of file
diff --git a/src/test/java/com/google/gson/CommentsTest.java b/src/test/java/com/github/gv2011/gson/CommentsTest.java
similarity index 91%
rename from src/test/java/com/google/gson/CommentsTest.java
rename to src/test/java/com/github/gv2011/gson/CommentsTest.java
index 306e5aff3..1ba4eb91d 100644
--- a/src/test/java/com/google/gson/CommentsTest.java
+++ b/src/test/java/com/github/gv2011/gson/CommentsTest.java
@@ -14,9 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.reflect.TypeToken;
 
-import com.google.gson.reflect.TypeToken;
 import java.util.Arrays;
 import java.util.List;
 import junit.framework.TestCase;
diff --git a/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java b/src/test/java/com/github/gv2011/gson/DefaultDateTypeAdapterTest.java
similarity index 98%
rename from src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
rename to src/test/java/com/github/gv2011/gson/DefaultDateTypeAdapterTest.java
index e8281162d..78f6614c7 100644
--- a/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
+++ b/src/test/java/com/github/gv2011/gson/DefaultDateTypeAdapterTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
@@ -28,6 +28,9 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
+import com.github.gv2011.gson.DefaultDateTypeAdapter;
+import com.github.gv2011.gson.JsonPrimitive;
+
 /**
  * A simple unit test for the {@link DefaultDateTypeAdapter} class.
  *
diff --git a/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java b/src/test/java/com/github/gv2011/gson/DefaultInetAddressTypeAdapterTest.java
similarity index 95%
rename from src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java
rename to src/test/java/com/github/gv2011/gson/DefaultInetAddressTypeAdapterTest.java
index 6b853f5de..563201e8c 100644
--- a/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java
+++ b/src/test/java/com/github/gv2011/gson/DefaultInetAddressTypeAdapterTest.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.net.InetAddress;
 
+import com.github.gv2011.gson.Gson;
+
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java b/src/test/java/com/github/gv2011/gson/DefaultMapJsonSerializerTest.java
similarity index 91%
rename from src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java
rename to src/test/java/com/github/gv2011/gson/DefaultMapJsonSerializerTest.java
index 5c0619535..841373476 100644
--- a/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java
+++ b/src/test/java/com/github/gv2011/gson/DefaultMapJsonSerializerTest.java
@@ -14,9 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.reflect.TypeToken;
 
-import com.google.gson.reflect.TypeToken;
 import java.lang.reflect.Type;
 import java.util.HashMap;
 import java.util.Map;
diff --git a/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java b/src/test/java/com/github/gv2011/gson/ExposeAnnotationExclusionStrategyTest.java
similarity index 95%
rename from src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java
rename to src/test/java/com/github/gv2011/gson/ExposeAnnotationExclusionStrategyTest.java
index dd8a7a926..a5e8fc9b2 100644
--- a/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java
+++ b/src/test/java/com/github/gv2011/gson/ExposeAnnotationExclusionStrategyTest.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
-import com.google.gson.annotations.Expose;
+import com.github.gv2011.gson.annotations.Expose;
+import com.github.gv2011.gson.internal.Excluder;
 
-import com.google.gson.internal.Excluder;
 import junit.framework.TestCase;
 
 import java.lang.reflect.Field;
diff --git a/src/test/java/com/google/gson/FieldAttributesTest.java b/src/test/java/com/github/gv2011/gson/FieldAttributesTest.java
similarity index 95%
rename from src/test/java/com/google/gson/FieldAttributesTest.java
rename to src/test/java/com/github/gv2011/gson/FieldAttributesTest.java
index 8a9d95338..817195369 100644
--- a/src/test/java/com/google/gson/FieldAttributesTest.java
+++ b/src/test/java/com/github/gv2011/gson/FieldAttributesTest.java
@@ -14,9 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
-import com.google.gson.reflect.TypeToken;
+import com.github.gv2011.gson.FieldAttributes;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/GenericArrayTypeTest.java b/src/test/java/com/github/gv2011/gson/GenericArrayTypeTest.java
similarity index 93%
rename from src/test/java/com/google/gson/GenericArrayTypeTest.java
rename to src/test/java/com/github/gv2011/gson/GenericArrayTypeTest.java
index 42acb8a2d..2e85e85e3 100644
--- a/src/test/java/com/google/gson/GenericArrayTypeTest.java
+++ b/src/test/java/com/github/gv2011/gson/GenericArrayTypeTest.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
+import com.github.gv2011.gson.internal.$Gson$Types;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/GsonBuilderTest.java b/src/test/java/com/github/gv2011/gson/GsonBuilderTest.java
similarity index 86%
rename from src/test/java/com/google/gson/GsonBuilderTest.java
rename to src/test/java/com/github/gv2011/gson/GsonBuilderTest.java
index 73601c0e3..844da31e9 100644
--- a/src/test/java/com/google/gson/GsonBuilderTest.java
+++ b/src/test/java/com/github/gv2011/gson/GsonBuilderTest.java
@@ -14,15 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.lang.reflect.Modifier;
 import java.lang.reflect.Type;
 
 import junit.framework.TestCase;
 
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonWriter;
 
 /**
  * Unit tests for {@link GsonBuilder}.
diff --git a/src/test/java/com/google/gson/GsonTypeAdapterTest.java b/src/test/java/com/github/gv2011/gson/GsonTypeAdapterTest.java
similarity index 92%
rename from src/test/java/com/google/gson/GsonTypeAdapterTest.java
rename to src/test/java/com/github/gv2011/gson/GsonTypeAdapterTest.java
index decb93d83..259ac88d6 100644
--- a/src/test/java/com/google/gson/GsonTypeAdapterTest.java
+++ b/src/test/java/com/github/gv2011/gson/GsonTypeAdapterTest.java
@@ -14,12 +14,23 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.lang.reflect.Type;
 import java.math.BigInteger;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonDeserializationContext;
+import com.github.gv2011.gson.JsonDeserializer;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.JsonSerializationContext;
+import com.github.gv2011.gson.JsonSerializer;
+
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java b/src/test/java/com/github/gv2011/gson/InnerClassExclusionStrategyTest.java
similarity index 95%
rename from src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java
rename to src/test/java/com/github/gv2011/gson/InnerClassExclusionStrategyTest.java
index 86f7a6224..ad7c7afa3 100644
--- a/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java
+++ b/src/test/java/com/github/gv2011/gson/InnerClassExclusionStrategyTest.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
-import com.google.gson.internal.Excluder;
 import java.lang.reflect.Field;
+
+import com.github.gv2011.gson.internal.Excluder;
+
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/java/com/google/gson/JavaSerializationTest.java b/src/test/java/com/github/gv2011/gson/JavaSerializationTest.java
similarity index 95%
rename from src/test/java/com/google/gson/JavaSerializationTest.java
rename to src/test/java/com/github/gv2011/gson/JavaSerializationTest.java
index fbaea19d4..65e50979d 100644
--- a/src/test/java/com/google/gson/JavaSerializationTest.java
+++ b/src/test/java/com/github/gv2011/gson/JavaSerializationTest.java
@@ -14,9 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.reflect.TypeToken;
 
-import com.google.gson.reflect.TypeToken;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
diff --git a/src/test/java/com/google/gson/JsonArrayTest.java b/src/test/java/com/github/gv2011/gson/JsonArrayTest.java
similarity index 91%
rename from src/test/java/com/google/gson/JsonArrayTest.java
rename to src/test/java/com/github/gv2011/gson/JsonArrayTest.java
index b77d6f1b4..69ba89c0f 100644
--- a/src/test/java/com/google/gson/JsonArrayTest.java
+++ b/src/test/java/com/github/gv2011/gson/JsonArrayTest.java
@@ -14,11 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import junit.framework.TestCase;
 
-import com.google.gson.common.MoreAsserts;
+import com.github.gv2011.gson.JsonArray;
+import com.github.gv2011.gson.JsonNull;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.common.MoreAsserts;
 
 /**
  * @author Jesse Wilson
diff --git a/src/test/java/com/google/gson/JsonNullTest.java b/src/test/java/com/github/gv2011/gson/JsonNullTest.java
similarity index 91%
rename from src/test/java/com/google/gson/JsonNullTest.java
rename to src/test/java/com/github/gv2011/gson/JsonNullTest.java
index 6157e3876..dec20e84d 100644
--- a/src/test/java/com/google/gson/JsonNullTest.java
+++ b/src/test/java/com/github/gv2011/gson/JsonNullTest.java
@@ -14,9 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
+
+import com.github.gv2011.gson.JsonNull;
+import com.github.gv2011.gson.common.MoreAsserts;
 
-import com.google.gson.common.MoreAsserts;
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/java/com/google/gson/JsonObjectTest.java b/src/test/java/com/github/gv2011/gson/JsonObjectTest.java
similarity index 93%
rename from src/test/java/com/google/gson/JsonObjectTest.java
rename to src/test/java/com/github/gv2011/gson/JsonObjectTest.java
index 9423a24d2..990e848d0 100644
--- a/src/test/java/com/google/gson/JsonObjectTest.java
+++ b/src/test/java/com/github/gv2011/gson/JsonObjectTest.java
@@ -14,9 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson;
-
-import com.google.gson.common.MoreAsserts;
+package com.github.gv2011.gson;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.JsonArray;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonNull;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonParser;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.common.MoreAsserts;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/JsonParserTest.java b/src/test/java/com/github/gv2011/gson/JsonParserTest.java
similarity index 90%
rename from src/test/java/com/google/gson/JsonParserTest.java
rename to src/test/java/com/github/gv2011/gson/JsonParserTest.java
index 7efa7fd2e..2331dc7a4 100644
--- a/src/test/java/com/google/gson/JsonParserTest.java
+++ b/src/test/java/com/github/gv2011/gson/JsonParserTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.io.CharArrayReader;
 import java.io.CharArrayWriter;
@@ -22,9 +22,14 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.internal.Streams;
-import com.google.gson.stream.JsonReader;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.JsonArray;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonParser;
+import com.github.gv2011.gson.JsonSyntaxException;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.internal.Streams;
+import com.github.gv2011.gson.stream.JsonReader;
 
 /**
  * Unit test for {@link JsonParser}
diff --git a/src/test/java/com/google/gson/JsonPrimitiveTest.java b/src/test/java/com/github/gv2011/gson/JsonPrimitiveTest.java
similarity index 98%
rename from src/test/java/com/google/gson/JsonPrimitiveTest.java
rename to src/test/java/com/github/gv2011/gson/JsonPrimitiveTest.java
index 6ad0d4994..ff5d859dd 100644
--- a/src/test/java/com/google/gson/JsonPrimitiveTest.java
+++ b/src/test/java/com/github/gv2011/gson/JsonPrimitiveTest.java
@@ -14,9 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
-import com.google.gson.common.MoreAsserts;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.common.MoreAsserts;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/JsonStreamParserTest.java b/src/test/java/com/github/gv2011/gson/JsonStreamParserTest.java
similarity index 96%
rename from src/test/java/com/google/gson/JsonStreamParserTest.java
rename to src/test/java/com/github/gv2011/gson/JsonStreamParserTest.java
index 1b40b58b6..4cca0aa5b 100644
--- a/src/test/java/com/google/gson/JsonStreamParserTest.java
+++ b/src/test/java/com/github/gv2011/gson/JsonStreamParserTest.java
@@ -13,12 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import junit.framework.TestCase;
 
 import java.util.NoSuchElementException;
 
+import com.github.gv2011.gson.JsonStreamParser;
+
 /**
  * Unit tests for {@link JsonStreamParser}
  * 
diff --git a/src/test/java/com/google/gson/LongSerializationPolicyTest.java b/src/test/java/com/github/gv2011/gson/LongSerializationPolicyTest.java
similarity index 89%
rename from src/test/java/com/google/gson/LongSerializationPolicyTest.java
rename to src/test/java/com/github/gv2011/gson/LongSerializationPolicyTest.java
index d0a063208..872e24104 100644
--- a/src/test/java/com/google/gson/LongSerializationPolicyTest.java
+++ b/src/test/java/com/github/gv2011/gson/LongSerializationPolicyTest.java
@@ -14,7 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.LongSerializationPolicy;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/MixedStreamTest.java b/src/test/java/com/github/gv2011/gson/MixedStreamTest.java
similarity index 95%
rename from src/test/java/com/google/gson/MixedStreamTest.java
rename to src/test/java/com/github/gv2011/gson/MixedStreamTest.java
index 00eb4bc8a..dbd960650 100644
--- a/src/test/java/com/google/gson/MixedStreamTest.java
+++ b/src/test/java/com/github/gv2011/gson/MixedStreamTest.java
@@ -14,11 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonWriter;
 
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.io.StringReader;
 import java.io.StringWriter;
diff --git a/src/test/java/com/google/gson/MockExclusionStrategy.java b/src/test/java/com/github/gv2011/gson/MockExclusionStrategy.java
similarity index 90%
rename from src/test/java/com/google/gson/MockExclusionStrategy.java
rename to src/test/java/com/github/gv2011/gson/MockExclusionStrategy.java
index 7830d8a2f..7f523ed4f 100644
--- a/src/test/java/com/google/gson/MockExclusionStrategy.java
+++ b/src/test/java/com/github/gv2011/gson/MockExclusionStrategy.java
@@ -14,7 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
+
+import com.github.gv2011.gson.ExclusionStrategy;
+import com.github.gv2011.gson.FieldAttributes;
 
 /**
  * This is a configurable {@link ExclusionStrategy} that can be used for
diff --git a/src/test/java/com/google/gson/ObjectTypeAdapterTest.java b/src/test/java/com/github/gv2011/gson/ObjectTypeAdapterTest.java
similarity index 93%
rename from src/test/java/com/google/gson/ObjectTypeAdapterTest.java
rename to src/test/java/com/github/gv2011/gson/ObjectTypeAdapterTest.java
index 2891bffca..ee1f48971 100644
--- a/src/test/java/com/google/gson/ObjectTypeAdapterTest.java
+++ b/src/test/java/com/github/gv2011/gson/ObjectTypeAdapterTest.java
@@ -14,12 +14,17 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.LinkedHashMap;
 import java.util.Map;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.TypeAdapter;
+
 import junit.framework.TestCase;
 
 public final class ObjectTypeAdapterTest extends TestCase {
diff --git a/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java b/src/test/java/com/github/gv2011/gson/OverrideCoreTypeAdaptersTest.java
similarity index 91%
rename from src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java
rename to src/test/java/com/github/gv2011/gson/OverrideCoreTypeAdaptersTest.java
index 79ae1698f..c811f9838 100644
--- a/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java
+++ b/src/test/java/com/github/gv2011/gson/OverrideCoreTypeAdaptersTest.java
@@ -14,10 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonWriter;
 
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.util.Locale;
 import junit.framework.TestCase;
diff --git a/src/test/java/com/google/gson/ParameterizedTypeFixtures.java b/src/test/java/com/github/gv2011/gson/ParameterizedTypeFixtures.java
similarity index 91%
rename from src/test/java/com/google/gson/ParameterizedTypeFixtures.java
rename to src/test/java/com/github/gv2011/gson/ParameterizedTypeFixtures.java
index 0959ee429..d95124649 100644
--- a/src/test/java/com/google/gson/ParameterizedTypeFixtures.java
+++ b/src/test/java/com/github/gv2011/gson/ParameterizedTypeFixtures.java
@@ -14,11 +14,19 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
+
+import com.github.gv2011.gson.InstanceCreator;
+import com.github.gv2011.gson.JsonDeserializationContext;
+import com.github.gv2011.gson.JsonDeserializer;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.JsonSerializationContext;
+import com.github.gv2011.gson.JsonSerializer;
+import com.github.gv2011.gson.internal.$Gson$Types;
+import com.github.gv2011.gson.internal.Primitives;
 
-import com.google.gson.internal.$Gson$Types;
-
-import com.google.gson.internal.Primitives;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.ParameterizedType;
diff --git a/src/test/java/com/google/gson/ParameterizedTypeTest.java b/src/test/java/com/github/gv2011/gson/ParameterizedTypeTest.java
similarity index 93%
rename from src/test/java/com/google/gson/ParameterizedTypeTest.java
rename to src/test/java/com/github/gv2011/gson/ParameterizedTypeTest.java
index 24d78e89d..8bbc392ca 100644
--- a/src/test/java/com/google/gson/ParameterizedTypeTest.java
+++ b/src/test/java/com/github/gv2011/gson/ParameterizedTypeTest.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
 
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
+import com.github.gv2011.gson.internal.$Gson$Types;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/PrimitiveTypeAdapter.java b/src/test/java/com/github/gv2011/gson/PrimitiveTypeAdapter.java
similarity index 94%
rename from src/test/java/com/google/gson/PrimitiveTypeAdapter.java
rename to src/test/java/com/github/gv2011/gson/PrimitiveTypeAdapter.java
index fb38687b5..b7660ef09 100644
--- a/src/test/java/com/google/gson/PrimitiveTypeAdapter.java
+++ b/src/test/java/com/github/gv2011/gson/PrimitiveTypeAdapter.java
@@ -14,9 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
+
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.internal.Primitives;
 
-import com.google.gson.internal.Primitives;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
diff --git a/src/test/java/com/google/gson/VersionExclusionStrategyTest.java b/src/test/java/com/github/gv2011/gson/VersionExclusionStrategyTest.java
similarity index 93%
rename from src/test/java/com/google/gson/VersionExclusionStrategyTest.java
rename to src/test/java/com/github/gv2011/gson/VersionExclusionStrategyTest.java
index d878850ec..1f3fea8fb 100644
--- a/src/test/java/com/google/gson/VersionExclusionStrategyTest.java
+++ b/src/test/java/com/github/gv2011/gson/VersionExclusionStrategyTest.java
@@ -14,10 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson;
+package com.github.gv2011.gson;
+
+import com.github.gv2011.gson.annotations.Since;
+import com.github.gv2011.gson.internal.Excluder;
 
-import com.google.gson.annotations.Since;
-import com.google.gson.internal.Excluder;
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/java/com/google/gson/common/MoreAsserts.java b/src/test/java/com/github/gv2011/gson/common/MoreAsserts.java
similarity index 98%
rename from src/test/java/com/google/gson/common/MoreAsserts.java
rename to src/test/java/com/github/gv2011/gson/common/MoreAsserts.java
index 3b01e710e..5907ecf8d 100644
--- a/src/test/java/com/google/gson/common/MoreAsserts.java
+++ b/src/test/java/com/github/gv2011/gson/common/MoreAsserts.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.common;
+package com.github.gv2011.gson.common;
 
 
 import java.util.Collection;
diff --git a/src/test/java/com/google/gson/common/TestTypes.java b/src/test/java/com/github/gv2011/gson/common/TestTypes.java
similarity index 95%
rename from src/test/java/com/google/gson/common/TestTypes.java
rename to src/test/java/com/github/gv2011/gson/common/TestTypes.java
index 11d3d0abe..f05519fac 100644
--- a/src/test/java/com/google/gson/common/TestTypes.java
+++ b/src/test/java/com/github/gv2011/gson/common/TestTypes.java
@@ -14,20 +14,20 @@
  * limitations under the License.
  */
 
-package com.google.gson.common;
+package com.github.gv2011.gson.common;
 
 import java.lang.reflect.Type;
 import java.util.Collection;
 
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.annotations.SerializedName;
+import com.github.gv2011.gson.JsonDeserializationContext;
+import com.github.gv2011.gson.JsonDeserializer;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.JsonSerializationContext;
+import com.github.gv2011.gson.JsonSerializer;
+import com.github.gv2011.gson.annotations.SerializedName;
 
 /**
  * Types used for testing JSON serialization and deserialization
diff --git a/src/test/java/com/google/gson/functional/ArrayTest.java b/src/test/java/com/github/gv2011/gson/functional/ArrayTest.java
similarity index 95%
rename from src/test/java/com/google/gson/functional/ArrayTest.java
rename to src/test/java/com/github/gv2011/gson/functional/ArrayTest.java
index 11388e90a..eb5d5437a 100644
--- a/src/test/java/com/google/gson/functional/ArrayTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/ArrayTest.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonParseException;
-import com.google.gson.common.MoreAsserts;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithObjects;
-import com.google.gson.reflect.TypeToken;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.common.MoreAsserts;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.common.TestTypes.ClassWithObjects;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/CircularReferenceTest.java b/src/test/java/com/github/gv2011/gson/functional/CircularReferenceTest.java
similarity index 91%
rename from src/test/java/com/google/gson/functional/CircularReferenceTest.java
rename to src/test/java/com/github/gv2011/gson/functional/CircularReferenceTest.java
index d352e2418..28a3ae2d8 100644
--- a/src/test/java/com/google/gson/functional/CircularReferenceTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/CircularReferenceTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
 import java.lang.reflect.Type;
 import java.util.ArrayList;
@@ -21,13 +21,13 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.ClassOverridingEquals;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonSerializationContext;
+import com.github.gv2011.gson.JsonSerializer;
+import com.github.gv2011.gson.common.TestTypes.ClassOverridingEquals;
 
 /**
  * Functional tests related to circular reference detection and error reporting.
diff --git a/src/test/java/com/google/gson/functional/CollectionTest.java b/src/test/java/com/github/gv2011/gson/functional/CollectionTest.java
similarity index 96%
rename from src/test/java/com/google/gson/functional/CollectionTest.java
rename to src/test/java/com/github/gv2011/gson/functional/CollectionTest.java
index 23d778225..a1edc30d3 100644
--- a/src/test/java/com/google/gson/functional/CollectionTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/CollectionTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
 import java.lang.reflect.Type;
 import java.util.ArrayList;
@@ -31,15 +31,15 @@
 import java.util.Stack;
 import java.util.Vector;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.MoreAsserts;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.reflect.TypeToken;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.JsonSerializationContext;
+import com.github.gv2011.gson.JsonSerializer;
+import com.github.gv2011.gson.common.MoreAsserts;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/ConcurrencyTest.java b/src/test/java/com/github/gv2011/gson/functional/ConcurrencyTest.java
similarity index 94%
rename from src/test/java/com/google/gson/functional/ConcurrencyTest.java
rename to src/test/java/com/github/gv2011/gson/functional/ConcurrencyTest.java
index 2dccf4b61..05ecd0377 100644
--- a/src/test/java/com/google/gson/functional/ConcurrencyTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/ConcurrencyTest.java
@@ -13,16 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import junit.framework.TestCase;
+import com.github.gv2011.gson.Gson;
 
-import com.google.gson.Gson;
+import junit.framework.TestCase;
 
 /**
  * Tests for ensuring Gson thread-safety.
diff --git a/src/test/java/com/google/gson/functional/CustomDeserializerTest.java b/src/test/java/com/github/gv2011/gson/functional/CustomDeserializerTest.java
similarity index 93%
rename from src/test/java/com/google/gson/functional/CustomDeserializerTest.java
rename to src/test/java/com/github/gv2011/gson/functional/CustomDeserializerTest.java
index c53db7f23..9ee8f619b 100644
--- a/src/test/java/com/google/gson/functional/CustomDeserializerTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/CustomDeserializerTest.java
@@ -14,17 +14,17 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.common.TestTypes.Base;
-import com.google.gson.common.TestTypes.ClassWithBaseField;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonDeserializationContext;
+import com.github.gv2011.gson.JsonDeserializer;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.common.TestTypes.Base;
+import com.github.gv2011.gson.common.TestTypes.ClassWithBaseField;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/CustomSerializerTest.java b/src/test/java/com/github/gv2011/gson/functional/CustomSerializerTest.java
similarity index 83%
rename from src/test/java/com/google/gson/functional/CustomSerializerTest.java
rename to src/test/java/com/github/gv2011/gson/functional/CustomSerializerTest.java
index c8095463a..1c9ee1fbc 100644
--- a/src/test/java/com/google/gson/functional/CustomSerializerTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/CustomSerializerTest.java
@@ -14,21 +14,21 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.Base;
-import com.google.gson.common.TestTypes.BaseSerializer;
-import com.google.gson.common.TestTypes.ClassWithBaseArrayField;
-import com.google.gson.common.TestTypes.ClassWithBaseField;
-import com.google.gson.common.TestTypes.Sub;
-import com.google.gson.common.TestTypes.SubSerializer;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonArray;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonSerializationContext;
+import com.github.gv2011.gson.JsonSerializer;
+import com.github.gv2011.gson.common.TestTypes.Base;
+import com.github.gv2011.gson.common.TestTypes.BaseSerializer;
+import com.github.gv2011.gson.common.TestTypes.ClassWithBaseArrayField;
+import com.github.gv2011.gson.common.TestTypes.ClassWithBaseField;
+import com.github.gv2011.gson.common.TestTypes.Sub;
+import com.github.gv2011.gson.common.TestTypes.SubSerializer;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java b/src/test/java/com/github/gv2011/gson/functional/CustomTypeAdaptersTest.java
similarity index 95%
rename from src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java
rename to src/test/java/com/github/gv2011/gson/functional/CustomTypeAdaptersTest.java
index b452849dd..ad459fc19 100644
--- a/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/CustomTypeAdaptersTest.java
@@ -13,22 +13,22 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithCustomTypeConverter;
-import com.google.gson.reflect.TypeToken;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.InstanceCreator;
+import com.github.gv2011.gson.JsonDeserializationContext;
+import com.github.gv2011.gson.JsonDeserializer;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.JsonSerializationContext;
+import com.github.gv2011.gson.JsonSerializer;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.common.TestTypes.ClassWithCustomTypeConverter;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 import java.util.Date;
 import junit.framework.TestCase;
diff --git a/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java b/src/test/java/com/github/gv2011/gson/functional/DefaultTypeAdaptersTest.java
similarity index 97%
rename from src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
rename to src/test/java/com/github/gv2011/gson/functional/DefaultTypeAdaptersTest.java
index c7c14ccf7..2c7c9b057 100644
--- a/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/DefaultTypeAdaptersTest.java
@@ -13,23 +13,24 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonArray;
+import com.github.gv2011.gson.JsonDeserializationContext;
+import com.github.gv2011.gson.JsonDeserializer;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonNull;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.JsonSyntaxException;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonWriter;
+
 import java.io.IOException;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Type;
diff --git a/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java b/src/test/java/com/github/gv2011/gson/functional/DelegateTypeAdapterTest.java
similarity index 86%
rename from src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
rename to src/test/java/com/github/gv2011/gson/functional/DelegateTypeAdapterTest.java
index f89148e36..74b52e29c 100644
--- a/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/DelegateTypeAdapterTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -21,14 +21,14 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonWriter;
 
 /**
  * Functional tests for {@link Gson#getDelegateAdapter(TypeAdapterFactory, TypeToken)} method.
diff --git a/src/test/java/com/google/gson/functional/EnumTest.java b/src/test/java/com/github/gv2011/gson/functional/EnumTest.java
similarity index 91%
rename from src/test/java/com/google/gson/functional/EnumTest.java
rename to src/test/java/com/github/gv2011/gson/functional/EnumTest.java
index 4a9f05b59..c548fc285 100644
--- a/src/test/java/com/google/gson/functional/EnumTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/EnumTest.java
@@ -14,21 +14,20 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.annotations.SerializedName;
-import com.google.gson.common.MoreAsserts;
-import com.google.gson.reflect.TypeToken;
-
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonDeserializationContext;
+import com.github.gv2011.gson.JsonDeserializer;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.JsonSerializationContext;
+import com.github.gv2011.gson.JsonSerializer;
+import com.github.gv2011.gson.annotations.SerializedName;
+import com.github.gv2011.gson.common.MoreAsserts;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 import java.lang.reflect.Type;
 import java.util.ArrayList;
diff --git a/src/test/java/com/google/gson/functional/EscapingTest.java b/src/test/java/com/github/gv2011/gson/functional/EscapingTest.java
similarity index 94%
rename from src/test/java/com/google/gson/functional/EscapingTest.java
rename to src/test/java/com/github/gv2011/gson/functional/EscapingTest.java
index 1581f4518..9008bbd89 100644
--- a/src/test/java/com/google/gson/functional/EscapingTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/EscapingTest.java
@@ -14,11 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
 import java.util.ArrayList;
 import java.util.List;
 import junit.framework.TestCase;
diff --git a/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java b/src/test/java/com/github/gv2011/gson/functional/ExclusionStrategyFunctionalTest.java
similarity index 95%
rename from src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java
rename to src/test/java/com/github/gv2011/gson/functional/ExclusionStrategyFunctionalTest.java
index 2eca8bb4f..3f6c94dee 100644
--- a/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/ExclusionStrategyFunctionalTest.java
@@ -14,18 +14,20 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.ExclusionStrategy;
-import com.google.gson.FieldAttributes;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
+package com.github.gv2011.gson.functional;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
+
+import com.github.gv2011.gson.ExclusionStrategy;
+import com.github.gv2011.gson.FieldAttributes;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonPrimitive;
+
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/java/com/google/gson/functional/ExposeFieldsTest.java b/src/test/java/com/github/gv2011/gson/functional/ExposeFieldsTest.java
similarity index 95%
rename from src/test/java/com/google/gson/functional/ExposeFieldsTest.java
rename to src/test/java/com/github/gv2011/gson/functional/ExposeFieldsTest.java
index 0430ba49d..4c3d0d437 100644
--- a/src/test/java/com/google/gson/functional/ExposeFieldsTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/ExposeFieldsTest.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
 import java.lang.reflect.Type;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.annotations.Expose;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.InstanceCreator;
+import com.github.gv2011.gson.annotations.Expose;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/FieldExclusionTest.java b/src/test/java/com/github/gv2011/gson/functional/FieldExclusionTest.java
similarity index 95%
rename from src/test/java/com/google/gson/functional/FieldExclusionTest.java
rename to src/test/java/com/github/gv2011/gson/functional/FieldExclusionTest.java
index 080a8234f..ee10f54c1 100644
--- a/src/test/java/com/google/gson/functional/FieldExclusionTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/FieldExclusionTest.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/FieldNamingTest.java b/src/test/java/com/github/gv2011/gson/functional/FieldNamingTest.java
similarity index 83%
rename from src/test/java/com/google/gson/functional/FieldNamingTest.java
rename to src/test/java/com/github/gv2011/gson/functional/FieldNamingTest.java
index 5d326af8c..22257a7e6 100644
--- a/src/test/java/com/google/gson/functional/FieldNamingTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/FieldNamingTest.java
@@ -14,18 +14,19 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import static com.google.gson.FieldNamingPolicy.IDENTITY;
-import static com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
-import static com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;
-import static com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
-import static com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
+import static com.github.gv2011.gson.FieldNamingPolicy.IDENTITY;
+import static com.github.gv2011.gson.FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
+import static com.github.gv2011.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;
+import static com.github.gv2011.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;
+import static com.github.gv2011.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
+
+import com.github.gv2011.gson.FieldNamingPolicy;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.annotations.SerializedName;
 
-import com.google.gson.FieldNamingPolicy;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.annotations.SerializedName;
 import junit.framework.TestCase;
 
 public final class FieldNamingTest extends TestCase {
diff --git a/src/test/java/com/google/gson/functional/InheritanceTest.java b/src/test/java/com/github/gv2011/gson/functional/InheritanceTest.java
similarity index 93%
rename from src/test/java/com/google/gson/functional/InheritanceTest.java
rename to src/test/java/com/github/gv2011/gson/functional/InheritanceTest.java
index b93ba0b59..9496a07f7 100644
--- a/src/test/java/com/google/gson/functional/InheritanceTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/InheritanceTest.java
@@ -13,19 +13,19 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.Base;
-import com.google.gson.common.TestTypes.ClassWithBaseArrayField;
-import com.google.gson.common.TestTypes.ClassWithBaseCollectionField;
-import com.google.gson.common.TestTypes.ClassWithBaseField;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.common.TestTypes.Sub;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.JsonArray;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.common.TestTypes.Base;
+import com.github.gv2011.gson.common.TestTypes.ClassWithBaseArrayField;
+import com.github.gv2011.gson.common.TestTypes.ClassWithBaseCollectionField;
+import com.github.gv2011.gson.common.TestTypes.ClassWithBaseField;
+import com.github.gv2011.gson.common.TestTypes.Nested;
+import com.github.gv2011.gson.common.TestTypes.Sub;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/InstanceCreatorTest.java b/src/test/java/com/github/gv2011/gson/functional/InstanceCreatorTest.java
similarity index 91%
rename from src/test/java/com/google/gson/functional/InstanceCreatorTest.java
rename to src/test/java/com/github/gv2011/gson/functional/InstanceCreatorTest.java
index aad55eeb2..1b5ca4b13 100644
--- a/src/test/java/com/google/gson/functional/InstanceCreatorTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/InstanceCreatorTest.java
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.common.TestTypes.Base;
-import com.google.gson.common.TestTypes.ClassWithBaseField;
-import com.google.gson.common.TestTypes.Sub;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.InstanceCreator;
+import com.github.gv2011.gson.common.TestTypes.Base;
+import com.github.gv2011.gson.common.TestTypes.ClassWithBaseField;
+import com.github.gv2011.gson.common.TestTypes.Sub;
+import com.github.gv2011.gson.reflect.TypeToken;
 
-import com.google.gson.reflect.TypeToken;
 import java.util.ArrayList;
 import java.util.List;
 import junit.framework.TestCase;
diff --git a/src/test/java/com/google/gson/functional/InterfaceTest.java b/src/test/java/com/github/gv2011/gson/functional/InterfaceTest.java
similarity index 96%
rename from src/test/java/com/google/gson/functional/InterfaceTest.java
rename to src/test/java/com/github/gv2011/gson/functional/InterfaceTest.java
index 6851f1e99..c90fb31e1 100644
--- a/src/test/java/com/google/gson/functional/InterfaceTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/InterfaceTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import com.google.gson.Gson;
+import com.github.gv2011.gson.Gson;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/InternationalizationTest.java b/src/test/java/com/github/gv2011/gson/functional/InternationalizationTest.java
similarity index 93%
rename from src/test/java/com/google/gson/functional/InternationalizationTest.java
rename to src/test/java/com/github/gv2011/gson/functional/InternationalizationTest.java
index 169c37a50..443ba233f 100644
--- a/src/test/java/com/google/gson/functional/InternationalizationTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/InternationalizationTest.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import com.google.gson.Gson;
+import com.github.gv2011.gson.Gson;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java b/src/test/java/com/github/gv2011/gson/functional/JavaUtilConcurrentAtomicTest.java
similarity index 95%
rename from src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java
rename to src/test/java/com/github/gv2011/gson/functional/JavaUtilConcurrentAtomicTest.java
index 464892a3a..9dbf2ceda 100644
--- a/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/JavaUtilConcurrentAtomicTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -22,9 +22,9 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicLongArray;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.LongSerializationPolicy;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.LongSerializationPolicy;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/JavaUtilTest.java b/src/test/java/com/github/gv2011/gson/functional/JavaUtilTest.java
similarity index 95%
rename from src/test/java/com/google/gson/functional/JavaUtilTest.java
rename to src/test/java/com/github/gv2011/gson/functional/JavaUtilTest.java
index 052096533..59938200f 100644
--- a/src/test/java/com/google/gson/functional/JavaUtilTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/JavaUtilTest.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
 import java.util.Currency;
 import java.util.Properties;
 
-import com.google.gson.Gson;
+import com.github.gv2011.gson.Gson;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java b/src/test/java/com/github/gv2011/gson/functional/JsonAdapterAnnotationOnClassesTest.java
similarity index 89%
rename from src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
rename to src/test/java/com/github/gv2011/gson/functional/JsonAdapterAnnotationOnClassesTest.java
index b7b29a656..cbf28f058 100644
--- a/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/JsonAdapterAnnotationOnClassesTest.java
@@ -14,30 +14,31 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonDeserializationContext;
+import com.github.gv2011.gson.JsonDeserializer;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.JsonSerializationContext;
+import com.github.gv2011.gson.JsonSerializer;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+import com.github.gv2011.gson.annotations.JsonAdapter;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonWriter;
+
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.util.Locale;
 import junit.framework.TestCase;
 
 /**
- * Functional tests for the {@link com.google.gson.annotations.JsonAdapter} annotation on classes.
+ * Functional tests for the {@link com.github.gv2011.gson.annotations.JsonAdapter} annotation on classes.
  */
 public final class JsonAdapterAnnotationOnClassesTest extends TestCase {
 
diff --git a/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/src/test/java/com/github/gv2011/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
similarity index 93%
rename from src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
rename to src/test/java/com/github/gv2011/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
index 4c745ec2a..ca2704625 100644
--- a/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
@@ -14,21 +14,22 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+import com.github.gv2011.gson.annotations.JsonAdapter;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonWriter;
+
 import java.io.IOException;
 import junit.framework.TestCase;
 
 /**
- * Functional tests for the {@link com.google.gson.annotations.JsonAdapter} annotation on fields.
+ * Functional tests for the {@link com.github.gv2011.gson.annotations.JsonAdapter} annotation on fields.
  */
 public final class JsonAdapterAnnotationOnFieldsTest extends TestCase {
   public void testClassAnnotationAdapterTakesPrecedenceOverDefault() {
diff --git a/src/test/java/com/google/gson/functional/JsonArrayTest.java b/src/test/java/com/github/gv2011/gson/functional/JsonArrayTest.java
similarity index 97%
rename from src/test/java/com/google/gson/functional/JsonArrayTest.java
rename to src/test/java/com/github/gv2011/gson/functional/JsonArrayTest.java
index 22a479b85..958c7cb59 100644
--- a/src/test/java/com/google/gson/functional/JsonArrayTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/JsonArrayTest.java
@@ -14,13 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import com.google.gson.JsonArray;
 import junit.framework.TestCase;
 
 import java.math.BigInteger;
 
+import com.github.gv2011.gson.JsonArray;
+
 /**
  * Functional tests for adding primitives to a JsonArray.
  *
diff --git a/src/test/java/com/google/gson/functional/JsonParserTest.java b/src/test/java/com/github/gv2011/gson/functional/JsonParserTest.java
similarity index 89%
rename from src/test/java/com/google/gson/functional/JsonParserTest.java
rename to src/test/java/com/github/gv2011/gson/functional/JsonParserTest.java
index 96691f98b..8795218bd 100644
--- a/src/test/java/com/google/gson/functional/JsonParserTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/JsonParserTest.java
@@ -14,18 +14,18 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonParser;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.reflect.TypeToken;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.JsonArray;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.JsonParser;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.JsonSyntaxException;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.common.TestTypes.Nested;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/JsonTreeTest.java b/src/test/java/com/github/gv2011/gson/functional/JsonTreeTest.java
similarity index 90%
rename from src/test/java/com/google/gson/functional/JsonTreeTest.java
rename to src/test/java/com/github/gv2011/gson/functional/JsonTreeTest.java
index a64794030..3efb29e7a 100644
--- a/src/test/java/com/google/gson/functional/JsonTreeTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/JsonTreeTest.java
@@ -1,10 +1,11 @@
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
diff --git a/src/test/java/com/google/gson/functional/LeniencyTest.java b/src/test/java/com/github/gv2011/gson/functional/LeniencyTest.java
similarity index 87%
rename from src/test/java/com/google/gson/functional/LeniencyTest.java
rename to src/test/java/com/github/gv2011/gson/functional/LeniencyTest.java
index 6b5375e4b..1887de008 100644
--- a/src/test/java/com/google/gson/functional/LeniencyTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/LeniencyTest.java
@@ -13,11 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.reflect.TypeToken;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.reflect.TypeToken;
 import java.util.List;
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java b/src/test/java/com/github/gv2011/gson/functional/MapAsArrayTypeAdapterTest.java
similarity index 95%
rename from src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java
rename to src/test/java/com/github/gv2011/gson/functional/MapAsArrayTypeAdapterTest.java
index 9dec49b6e..a62c17aa0 100644
--- a/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/MapAsArrayTypeAdapterTest.java
@@ -14,12 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonSyntaxException;
+import com.github.gv2011.gson.reflect.TypeToken;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.reflect.TypeToken;
 import java.lang.reflect.Type;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
diff --git a/src/test/java/com/google/gson/functional/MapTest.java b/src/test/java/com/github/gv2011/gson/functional/MapTest.java
similarity index 97%
rename from src/test/java/com/google/gson/functional/MapTest.java
rename to src/test/java/com/github/gv2011/gson/functional/MapTest.java
index 16e3b4b91..42ddf1f62 100644
--- a/src/test/java/com/google/gson/functional/MapTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/MapTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
 import java.lang.reflect.Type;
 import java.util.Collection;
@@ -28,20 +28,20 @@
 import java.util.concurrent.ConcurrentNavigableMap;
 import java.util.concurrent.ConcurrentSkipListMap;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonParser;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.common.TestTypes;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.InstanceCreator;
+import com.github.gv2011.gson.JsonArray;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.JsonParser;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.JsonSerializationContext;
+import com.github.gv2011.gson.JsonSerializer;
+import com.github.gv2011.gson.JsonSyntaxException;
+import com.github.gv2011.gson.common.TestTypes;
+import com.github.gv2011.gson.internal.$Gson$Types;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java b/src/test/java/com/github/gv2011/gson/functional/MoreSpecificTypeSerializationTest.java
similarity index 97%
rename from src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java
rename to src/test/java/com/github/gv2011/gson/functional/MoreSpecificTypeSerializationTest.java
index 7ecbffc84..914151838 100644
--- a/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/MoreSpecificTypeSerializationTest.java
@@ -14,10 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.JsonObject;
+package com.github.gv2011.gson.functional;
 
 import junit.framework.TestCase;
 
@@ -26,6 +23,9 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.JsonObject;
+
 /**
  * Tests for Gson serialization of a sub-class object while encountering a base-class type
  *
diff --git a/src/test/java/com/google/gson/functional/NamingPolicyTest.java b/src/test/java/com/github/gv2011/gson/functional/NamingPolicyTest.java
similarity index 94%
rename from src/test/java/com/google/gson/functional/NamingPolicyTest.java
rename to src/test/java/com/github/gv2011/gson/functional/NamingPolicyTest.java
index c3c0be1de..b5c66abc6 100644
--- a/src/test/java/com/google/gson/functional/NamingPolicyTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/NamingPolicyTest.java
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
-
-import com.google.gson.FieldNamingPolicy;
-import com.google.gson.FieldNamingStrategy;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.annotations.SerializedName;
-import com.google.gson.common.TestTypes.ClassWithSerializedNameFields;
-import com.google.gson.common.TestTypes.StringWrapper;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.FieldNamingPolicy;
+import com.github.gv2011.gson.FieldNamingStrategy;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.annotations.SerializedName;
+import com.github.gv2011.gson.common.TestTypes.ClassWithSerializedNameFields;
+import com.github.gv2011.gson.common.TestTypes.StringWrapper;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java b/src/test/java/com/github/gv2011/gson/functional/NullObjectAndFieldTest.java
similarity index 90%
rename from src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
rename to src/test/java/com/github/gv2011/gson/functional/NullObjectAndFieldTest.java
index 7939a8c85..e169a3888 100644
--- a/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/NullObjectAndFieldTest.java
@@ -14,19 +14,19 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonNull;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithObjects;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonDeserializationContext;
+import com.github.gv2011.gson.JsonDeserializer;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonNull;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonSerializationContext;
+import com.github.gv2011.gson.JsonSerializer;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.common.TestTypes.ClassWithObjects;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/ObjectTest.java b/src/test/java/com/github/gv2011/gson/functional/ObjectTest.java
similarity index 94%
rename from src/test/java/com/google/gson/functional/ObjectTest.java
rename to src/test/java/com/github/gv2011/gson/functional/ObjectTest.java
index 4cfb04054..2ca1aa2e3 100644
--- a/src/test/java/com/google/gson/functional/ObjectTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/ObjectTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
 import java.lang.reflect.Type;
 import java.util.ArrayList;
@@ -25,24 +25,24 @@
 import java.util.Map;
 import java.util.TimeZone;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.InstanceCreator;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.common.TestTypes.ArrayOfObjects;
-import com.google.gson.common.TestTypes.BagOfPrimitiveWrappers;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithArray;
-import com.google.gson.common.TestTypes.ClassWithNoFields;
-import com.google.gson.common.TestTypes.ClassWithObjects;
-import com.google.gson.common.TestTypes.ClassWithTransientFields;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.common.TestTypes.PrimitiveArray;
-import com.google.gson.reflect.TypeToken;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.InstanceCreator;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.JsonSerializationContext;
+import com.github.gv2011.gson.JsonSerializer;
+import com.github.gv2011.gson.common.TestTypes.ArrayOfObjects;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitiveWrappers;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.common.TestTypes.ClassWithArray;
+import com.github.gv2011.gson.common.TestTypes.ClassWithNoFields;
+import com.github.gv2011.gson.common.TestTypes.ClassWithObjects;
+import com.github.gv2011.gson.common.TestTypes.ClassWithTransientFields;
+import com.github.gv2011.gson.common.TestTypes.Nested;
+import com.github.gv2011.gson.common.TestTypes.PrimitiveArray;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java b/src/test/java/com/github/gv2011/gson/functional/ParameterizedTypesTest.java
similarity index 97%
rename from src/test/java/com/google/gson/functional/ParameterizedTypesTest.java
rename to src/test/java/com/github/gv2011/gson/functional/ParameterizedTypesTest.java
index 2d3dddc3b..4468ac0a1 100644
--- a/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/ParameterizedTypesTest.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.ParameterizedTypeFixtures.MyParameterizedType;
-import com.google.gson.ParameterizedTypeFixtures.MyParameterizedTypeAdapter;
-import com.google.gson.ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.reflect.TypeToken;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.ParameterizedTypeFixtures.MyParameterizedType;
+import com.github.gv2011.gson.ParameterizedTypeFixtures.MyParameterizedTypeAdapter;
+import com.github.gv2011.gson.ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/PrettyPrintingTest.java b/src/test/java/com/github/gv2011/gson/functional/PrettyPrintingTest.java
similarity index 92%
rename from src/test/java/com/google/gson/functional/PrettyPrintingTest.java
rename to src/test/java/com/github/gv2011/gson/functional/PrettyPrintingTest.java
index 0aacc9e27..85669708a 100644
--- a/src/test/java/com/google/gson/functional/PrettyPrintingTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/PrettyPrintingTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
 import java.lang.reflect.Type;
 import java.util.Arrays;
@@ -24,11 +24,11 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.common.TestTypes.ArrayOfObjects;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.reflect.TypeToken;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.common.TestTypes.ArrayOfObjects;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 /**
  * Functional tests for pretty printing option.
diff --git a/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java b/src/test/java/com/github/gv2011/gson/functional/PrimitiveCharacterTest.java
similarity index 95%
rename from src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java
rename to src/test/java/com/github/gv2011/gson/functional/PrimitiveCharacterTest.java
index 69ff1f3f2..e4ac5f35a 100644
--- a/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/PrimitiveCharacterTest.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import junit.framework.TestCase;
+import com.github.gv2011.gson.Gson;
 
-import com.google.gson.Gson;
+import junit.framework.TestCase;
 
 /**
  * Functional tests for Java Character values.
diff --git a/src/test/java/com/google/gson/functional/PrimitiveTest.java b/src/test/java/com/github/gv2011/gson/functional/PrimitiveTest.java
similarity index 98%
rename from src/test/java/com/google/gson/functional/PrimitiveTest.java
rename to src/test/java/com/github/gv2011/gson/functional/PrimitiveTest.java
index f801b3623..88a14b831 100644
--- a/src/test/java/com/google/gson/functional/PrimitiveTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/PrimitiveTest.java
@@ -14,14 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.LongSerializationPolicy;
-import com.google.gson.reflect.TypeToken;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.JsonSyntaxException;
+import com.github.gv2011.gson.LongSerializationPolicy;
+import com.github.gv2011.gson.reflect.TypeToken;
+
 import java.io.Serializable;
 import java.io.StringReader;
 import java.math.BigDecimal;
diff --git a/src/test/java/com/google/gson/functional/PrintFormattingTest.java b/src/test/java/com/github/gv2011/gson/functional/PrintFormattingTest.java
similarity index 83%
rename from src/test/java/com/google/gson/functional/PrintFormattingTest.java
rename to src/test/java/com/github/gv2011/gson/functional/PrintFormattingTest.java
index 7dcbc23c3..1fa740bb6 100644
--- a/src/test/java/com/google/gson/functional/PrintFormattingTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/PrintFormattingTest.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonObject;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassWithTransientFields;
-import com.google.gson.common.TestTypes.Nested;
-import com.google.gson.common.TestTypes.PrimitiveArray;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.common.TestTypes.ClassWithTransientFields;
+import com.github.gv2011.gson.common.TestTypes.Nested;
+import com.github.gv2011.gson.common.TestTypes.PrimitiveArray;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/RawSerializationTest.java b/src/test/java/com/github/gv2011/gson/functional/RawSerializationTest.java
similarity index 96%
rename from src/test/java/com/google/gson/functional/RawSerializationTest.java
rename to src/test/java/com/github/gv2011/gson/functional/RawSerializationTest.java
index d5e8883e7..337811fe7 100644
--- a/src/test/java/com/google/gson/functional/RawSerializationTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/RawSerializationTest.java
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
 import java.util.Arrays;
 import java.util.Collection;
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.reflect.TypeToken;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 /**
  * Unit tests to validate serialization of parameterized types without explicit types
diff --git a/src/test/java/com/google/gson/functional/ReadersWritersTest.java b/src/test/java/com/github/gv2011/gson/functional/ReadersWritersTest.java
similarity index 93%
rename from src/test/java/com/google/gson/functional/ReadersWritersTest.java
rename to src/test/java/com/github/gv2011/gson/functional/ReadersWritersTest.java
index e21fb903e..1fec80751 100644
--- a/src/test/java/com/google/gson/functional/ReadersWritersTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/ReadersWritersTest.java
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonStreamParser;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonStreamParser;
+import com.github.gv2011.gson.JsonSyntaxException;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.reflect.TypeToken;
 
-import com.google.gson.reflect.TypeToken;
 import java.util.Map;
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java b/src/test/java/com/github/gv2011/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
similarity index 92%
rename from src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
rename to src/test/java/com/github/gv2011/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
index 7959fc860..c7a7abecc 100644
--- a/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
 import java.io.IOException;
 import java.util.LinkedHashMap;
@@ -21,18 +21,18 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.internal.Streams;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+import com.github.gv2011.gson.annotations.JsonAdapter;
+import com.github.gv2011.gson.internal.Streams;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonWriter;
 
 /**
  * Functional tests for the RuntimeTypeAdapterFactory feature in extras.
diff --git a/src/test/java/com/google/gson/functional/SecurityTest.java b/src/test/java/com/github/gv2011/gson/functional/SecurityTest.java
similarity index 94%
rename from src/test/java/com/google/gson/functional/SecurityTest.java
rename to src/test/java/com/github/gv2011/gson/functional/SecurityTest.java
index aa1c2d451..66dd839a6 100644
--- a/src/test/java/com/google/gson/functional/SecurityTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/SecurityTest.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/SerializedNameTest.java b/src/test/java/com/github/gv2011/gson/functional/SerializedNameTest.java
similarity index 93%
rename from src/test/java/com/google/gson/functional/SerializedNameTest.java
rename to src/test/java/com/github/gv2011/gson/functional/SerializedNameTest.java
index 0314ae0af..1248abcaf 100644
--- a/src/test/java/com/google/gson/functional/SerializedNameTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/SerializedNameTest.java
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.annotations.SerializedName;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.annotations.SerializedName;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java b/src/test/java/com/github/gv2011/gson/functional/StreamingTypeAdaptersTest.java
similarity index 95%
rename from src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java
rename to src/test/java/com/github/gv2011/gson/functional/StreamingTypeAdaptersTest.java
index 551ceffc0..fbbda2c10 100644
--- a/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/StreamingTypeAdaptersTest.java
@@ -14,18 +14,19 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonArray;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.JsonSyntaxException;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.reflect.TypeToken;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonWriter;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSyntaxException;
-import com.google.gson.TypeAdapter;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.io.StringReader;
 import java.io.StringWriter;
diff --git a/src/test/java/com/google/gson/functional/StringTest.java b/src/test/java/com/github/gv2011/gson/functional/StringTest.java
similarity index 98%
rename from src/test/java/com/google/gson/functional/StringTest.java
rename to src/test/java/com/github/gv2011/gson/functional/StringTest.java
index 7dcf6f0f5..3a2b81403 100644
--- a/src/test/java/com/google/gson/functional/StringTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/StringTest.java
@@ -1,6 +1,6 @@
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import com.google.gson.Gson;
+import com.github.gv2011.gson.Gson;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java b/src/test/java/com/github/gv2011/gson/functional/ThrowableFunctionalTest.java
similarity index 94%
rename from src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java
rename to src/test/java/com/github/gv2011/gson/functional/ThrowableFunctionalTest.java
index 66042a6d6..d8ddf36e7 100644
--- a/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/ThrowableFunctionalTest.java
@@ -1,13 +1,13 @@
 // Copyright (C) 2014 Trymph Inc.
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
 import java.io.IOException;
 
-import com.google.gson.Gson;
-import com.google.gson.annotations.SerializedName;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.annotations.SerializedName;
 
 @SuppressWarnings("serial")
 public final class ThrowableFunctionalTest // extends TestCase TODO fails, makes private fields accesible
diff --git a/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java b/src/test/java/com/github/gv2011/gson/functional/TreeTypeAdaptersTest.java
similarity index 91%
rename from src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java
rename to src/test/java/com/github/gv2011/gson/functional/TreeTypeAdaptersTest.java
index 85294e2dc..56b7c7921 100644
--- a/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/TreeTypeAdaptersTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
@@ -24,16 +24,16 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.reflect.TypeToken;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonDeserializationContext;
+import com.github.gv2011.gson.JsonDeserializer;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.JsonSerializationContext;
+import com.github.gv2011.gson.JsonSerializer;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 /**
  * Collection of functional tests for DOM tree based type adapters.
diff --git a/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java b/src/test/java/com/github/gv2011/gson/functional/TypeAdapterPrecedenceTest.java
similarity index 91%
rename from src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java
rename to src/test/java/com/github/gv2011/gson/functional/TypeAdapterPrecedenceTest.java
index 5f881530d..e8893a8c4 100644
--- a/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/TypeAdapterPrecedenceTest.java
@@ -14,19 +14,20 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonDeserializationContext;
+import com.github.gv2011.gson.JsonDeserializer;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.JsonSerializationContext;
+import com.github.gv2011.gson.JsonSerializer;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonWriter;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.TypeAdapter;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
 import java.io.IOException;
 import java.lang.reflect.Type;
 import junit.framework.TestCase;
diff --git a/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java b/src/test/java/com/github/gv2011/gson/functional/TypeHierarchyAdapterTest.java
similarity index 93%
rename from src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java
rename to src/test/java/com/github/gv2011/gson/functional/TypeHierarchyAdapterTest.java
index 65c4e1547..7de023ab0 100644
--- a/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/TypeHierarchyAdapterTest.java
@@ -14,19 +14,21 @@
  * limitations under the License.
  */
 
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
+package com.github.gv2011.gson.functional;
+
 import java.lang.reflect.Type;
+
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonDeserializationContext;
+import com.github.gv2011.gson.JsonDeserializer;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonObject;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.JsonPrimitive;
+import com.github.gv2011.gson.JsonSerializationContext;
+import com.github.gv2011.gson.JsonSerializer;
+
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/java/com/google/gson/functional/TypeVariableTest.java b/src/test/java/com/github/gv2011/gson/functional/TypeVariableTest.java
similarity index 96%
rename from src/test/java/com/google/gson/functional/TypeVariableTest.java
rename to src/test/java/com/github/gv2011/gson/functional/TypeVariableTest.java
index 2d7503eb3..1c8bb0852 100644
--- a/src/test/java/com/google/gson/functional/TypeVariableTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/TypeVariableTest.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import com.google.gson.Gson;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.reflect.TypeToken;
 
-import com.google.gson.reflect.TypeToken;
 import java.lang.reflect.Type;
 import java.util.Arrays;
 import junit.framework.TestCase;
diff --git a/src/test/java/com/google/gson/functional/UncategorizedTest.java b/src/test/java/com/github/gv2011/gson/functional/UncategorizedTest.java
similarity index 89%
rename from src/test/java/com/google/gson/functional/UncategorizedTest.java
rename to src/test/java/com/github/gv2011/gson/functional/UncategorizedTest.java
index 0ac038035..7299cec2d 100644
--- a/src/test/java/com/google/gson/functional/UncategorizedTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/UncategorizedTest.java
@@ -13,18 +13,18 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParseException;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
-import com.google.gson.common.TestTypes.ClassOverridingEquals;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.JsonDeserializationContext;
+import com.github.gv2011.gson.JsonDeserializer;
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.common.TestTypes.ClassOverridingEquals;
+import com.github.gv2011.gson.reflect.TypeToken;
 
-import com.google.gson.reflect.TypeToken;
 import java.util.Arrays;
 import java.util.List;
 import junit.framework.TestCase;
diff --git a/src/test/java/com/google/gson/functional/VersioningTest.java b/src/test/java/com/github/gv2011/gson/functional/VersioningTest.java
similarity index 94%
rename from src/test/java/com/google/gson/functional/VersioningTest.java
rename to src/test/java/com/github/gv2011/gson/functional/VersioningTest.java
index bc526de06..928a42a30 100644
--- a/src/test/java/com/google/gson/functional/VersioningTest.java
+++ b/src/test/java/com/github/gv2011/gson/functional/VersioningTest.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.functional;
+package com.github.gv2011.gson.functional;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.annotations.Since;
-import com.google.gson.annotations.Until;
-import com.google.gson.common.TestTypes.BagOfPrimitives;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.GsonBuilder;
+import com.github.gv2011.gson.annotations.Since;
+import com.github.gv2011.gson.annotations.Until;
+import com.github.gv2011.gson.common.TestTypes.BagOfPrimitives;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/internal/GsonTypesTest.java b/src/test/java/com/github/gv2011/gson/internal/GsonTypesTest.java
similarity index 96%
rename from src/test/java/com/google/gson/internal/GsonTypesTest.java
rename to src/test/java/com/github/gv2011/gson/internal/GsonTypesTest.java
index c80700bde..9cec54f32 100644
--- a/src/test/java/com/google/gson/internal/GsonTypesTest.java
+++ b/src/test/java/com/github/gv2011/gson/internal/GsonTypesTest.java
@@ -14,12 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.github.gv2011.gson.internal;
 
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.util.List;
 
+import com.github.gv2011.gson.internal.$Gson$Types;
+
 import junit.framework.TestCase;
 
 public final class GsonTypesTest extends TestCase {
diff --git a/src/test/java/com/google/gson/internal/LazilyParsedNumberTest.java b/src/test/java/com/github/gv2011/gson/internal/LazilyParsedNumberTest.java
similarity index 88%
rename from src/test/java/com/google/gson/internal/LazilyParsedNumberTest.java
rename to src/test/java/com/github/gv2011/gson/internal/LazilyParsedNumberTest.java
index f108fa0de..ef2ebab9b 100644
--- a/src/test/java/com/google/gson/internal/LazilyParsedNumberTest.java
+++ b/src/test/java/com/github/gv2011/gson/internal/LazilyParsedNumberTest.java
@@ -13,7 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.internal;
+package com.github.gv2011.gson.internal;
+
+import com.github.gv2011.gson.internal.LazilyParsedNumber;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java b/src/test/java/com/github/gv2011/gson/internal/LinkedHashTreeMapTest.java
similarity index 96%
rename from src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java
rename to src/test/java/com/github/gv2011/gson/internal/LinkedHashTreeMapTest.java
index 4b027eccb..dc1dff839 100644
--- a/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java
+++ b/src/test/java/com/github/gv2011/gson/internal/LinkedHashTreeMapTest.java
@@ -14,12 +14,14 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.github.gv2011.gson.internal;
+
+import com.github.gv2011.gson.common.MoreAsserts;
+import com.github.gv2011.gson.internal.LinkedHashTreeMap;
+import com.github.gv2011.gson.internal.LinkedHashTreeMap.AvlBuilder;
+import com.github.gv2011.gson.internal.LinkedHashTreeMap.AvlIterator;
+import com.github.gv2011.gson.internal.LinkedHashTreeMap.Node;
 
-import com.google.gson.common.MoreAsserts;
-import com.google.gson.internal.LinkedHashTreeMap.AvlBuilder;
-import com.google.gson.internal.LinkedHashTreeMap.AvlIterator;
-import com.google.gson.internal.LinkedHashTreeMap.Node;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
diff --git a/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java b/src/test/java/com/github/gv2011/gson/internal/LinkedTreeMapTest.java
similarity index 97%
rename from src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
rename to src/test/java/com/github/gv2011/gson/internal/LinkedTreeMapTest.java
index c872bc0fd..84d60d05d 100644
--- a/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
+++ b/src/test/java/com/github/gv2011/gson/internal/LinkedTreeMapTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal;
+package com.github.gv2011.gson.internal;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -24,7 +24,8 @@
 
 import junit.framework.TestCase;
 
-import com.google.gson.common.MoreAsserts;
+import com.github.gv2011.gson.common.MoreAsserts;
+import com.github.gv2011.gson.internal.LinkedTreeMap;
 
 public final class LinkedTreeMapTest extends TestCase {
 
diff --git a/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java b/src/test/java/com/github/gv2011/gson/internal/bind/JsonElementReaderTest.java
similarity index 97%
rename from src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java
rename to src/test/java/com/github/gv2011/gson/internal/bind/JsonElementReaderTest.java
index 10624711c..d3d4da4df 100644
--- a/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java
+++ b/src/test/java/com/github/gv2011/gson/internal/bind/JsonElementReaderTest.java
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.github.gv2011.gson.internal.bind;
+
+import com.github.gv2011.gson.JsonElement;
+import com.github.gv2011.gson.JsonParser;
+import com.github.gv2011.gson.internal.bind.JsonTreeReader;
+import com.github.gv2011.gson.stream.JsonToken;
 
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParser;
-import com.google.gson.stream.JsonToken;
 import java.io.IOException;
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java b/src/test/java/com/github/gv2011/gson/internal/bind/JsonTreeWriterTest.java
similarity index 97%
rename from src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java
rename to src/test/java/com/github/gv2011/gson/internal/bind/JsonTreeWriterTest.java
index c87a071e3..b459266d0 100644
--- a/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java
+++ b/src/test/java/com/github/gv2011/gson/internal/bind/JsonTreeWriterTest.java
@@ -14,10 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson.internal.bind;
+package com.github.gv2011.gson.internal.bind;
 
-import com.google.gson.JsonNull;
 import java.io.IOException;
+
+import com.github.gv2011.gson.JsonNull;
+import com.github.gv2011.gson.internal.bind.JsonTreeWriter;
+
 import junit.framework.TestCase;
 
 @SuppressWarnings("resource")
diff --git a/src/test/java/com/google/gson/metrics/PerformanceTest.java b/src/test/java/com/github/gv2011/gson/metrics/PerformanceTest.java
similarity index 97%
rename from src/test/java/com/google/gson/metrics/PerformanceTest.java
rename to src/test/java/com/github/gv2011/gson/metrics/PerformanceTest.java
index cf444eee7..58b584bec 100644
--- a/src/test/java/com/google/gson/metrics/PerformanceTest.java
+++ b/src/test/java/com/github/gv2011/gson/metrics/PerformanceTest.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.google.gson.metrics;
+package com.github.gv2011.gson.metrics;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonParseException;
-import com.google.gson.annotations.Expose;
-import com.google.gson.reflect.TypeToken;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.JsonParseException;
+import com.github.gv2011.gson.annotations.Expose;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/reflect/TypeTokenTest.java b/src/test/java/com/github/gv2011/gson/reflect/TypeTokenTest.java
similarity index 97%
rename from src/test/java/com/google/gson/reflect/TypeTokenTest.java
rename to src/test/java/com/github/gv2011/gson/reflect/TypeTokenTest.java
index 7dda9d47d..119a3341b 100644
--- a/src/test/java/com/google/gson/reflect/TypeTokenTest.java
+++ b/src/test/java/com/github/gv2011/gson/reflect/TypeTokenTest.java
@@ -14,13 +14,16 @@
  * limitations under the License.
  */
 
-package com.google.gson.reflect;
+package com.github.gv2011.gson.reflect;
 
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.RandomAccess;
 import java.util.Set;
+
+import com.github.gv2011.gson.reflect.TypeToken;
+
 import junit.framework.TestCase;
 
 /**
diff --git a/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java b/src/test/java/com/github/gv2011/gson/regression/JsonAdapterNullSafeTest.java
similarity index 87%
rename from src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
rename to src/test/java/com/github/gv2011/gson/regression/JsonAdapterNullSafeTest.java
index 30a6775c8..efb032a6f 100644
--- a/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
+++ b/src/test/java/com/github/gv2011/gson/regression/JsonAdapterNullSafeTest.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.gson.regression;
+package com.github.gv2011.gson.regression;
 
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.annotations.JsonAdapter;
-import com.google.gson.reflect.TypeToken;
+import com.github.gv2011.gson.Gson;
+import com.github.gv2011.gson.TypeAdapter;
+import com.github.gv2011.gson.TypeAdapterFactory;
+import com.github.gv2011.gson.annotations.JsonAdapter;
+import com.github.gv2011.gson.reflect.TypeToken;
 
 import junit.framework.TestCase;
 
diff --git a/src/test/java/com/google/gson/stream/JsonReaderPathTest.java b/src/test/java/com/github/gv2011/gson/stream/JsonReaderPathTest.java
similarity index 98%
rename from src/test/java/com/google/gson/stream/JsonReaderPathTest.java
rename to src/test/java/com/github/gv2011/gson/stream/JsonReaderPathTest.java
index 50661664c..db9557851 100644
--- a/src/test/java/com/google/gson/stream/JsonReaderPathTest.java
+++ b/src/test/java/com/github/gv2011/gson/stream/JsonReaderPathTest.java
@@ -14,10 +14,13 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.github.gv2011.gson.stream;
 
 import java.io.IOException;
 import java.io.StringReader;
+
+import com.github.gv2011.gson.stream.JsonReader;
+
 import junit.framework.TestCase;
 
 @SuppressWarnings("resource")
diff --git a/src/test/java/com/google/gson/stream/JsonReaderTest.java b/src/test/java/com/github/gv2011/gson/stream/JsonReaderTest.java
similarity index 98%
rename from src/test/java/com/google/gson/stream/JsonReaderTest.java
rename to src/test/java/com/github/gv2011/gson/stream/JsonReaderTest.java
index a192940f8..5d26fc130 100644
--- a/src/test/java/com/google/gson/stream/JsonReaderTest.java
+++ b/src/test/java/com/github/gv2011/gson/stream/JsonReaderTest.java
@@ -14,24 +14,29 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.github.gv2011.gson.stream;
+
+import static com.github.gv2011.gson.stream.JsonToken.BEGIN_ARRAY;
+import static com.github.gv2011.gson.stream.JsonToken.BEGIN_OBJECT;
+import static com.github.gv2011.gson.stream.JsonToken.BOOLEAN;
+import static com.github.gv2011.gson.stream.JsonToken.END_ARRAY;
+import static com.github.gv2011.gson.stream.JsonToken.END_OBJECT;
+import static com.github.gv2011.gson.stream.JsonToken.NAME;
+import static com.github.gv2011.gson.stream.JsonToken.NULL;
+import static com.github.gv2011.gson.stream.JsonToken.NUMBER;
+import static com.github.gv2011.gson.stream.JsonToken.STRING;
 
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
 import java.util.Arrays;
-import junit.framework.TestCase;
 
-import static com.google.gson.stream.JsonToken.BEGIN_ARRAY;
-import static com.google.gson.stream.JsonToken.BEGIN_OBJECT;
-import static com.google.gson.stream.JsonToken.BOOLEAN;
-import static com.google.gson.stream.JsonToken.END_ARRAY;
-import static com.google.gson.stream.JsonToken.END_OBJECT;
-import static com.google.gson.stream.JsonToken.NAME;
-import static com.google.gson.stream.JsonToken.NULL;
-import static com.google.gson.stream.JsonToken.NUMBER;
-import static com.google.gson.stream.JsonToken.STRING;
+import com.github.gv2011.gson.stream.JsonReader;
+import com.github.gv2011.gson.stream.JsonToken;
+import com.github.gv2011.gson.stream.MalformedJsonException;
+
+import junit.framework.TestCase;
 
 @SuppressWarnings("resource")
 public final class JsonReaderTest extends TestCase {
diff --git a/src/test/java/com/google/gson/stream/JsonWriterTest.java b/src/test/java/com/github/gv2011/gson/stream/JsonWriterTest.java
similarity index 99%
rename from src/test/java/com/google/gson/stream/JsonWriterTest.java
rename to src/test/java/com/github/gv2011/gson/stream/JsonWriterTest.java
index 5c3f64d43..4a79eee90 100644
--- a/src/test/java/com/google/gson/stream/JsonWriterTest.java
+++ b/src/test/java/com/github/gv2011/gson/stream/JsonWriterTest.java
@@ -14,12 +14,15 @@
  * limitations under the License.
  */
 
-package com.google.gson.stream;
+package com.github.gv2011.gson.stream;
 
 import java.io.IOException;
 import java.io.StringWriter;
 import java.math.BigDecimal;
 import java.math.BigInteger;
+
+import com.github.gv2011.gson.stream.JsonWriter;
+
 import junit.framework.TestCase;
 
 @SuppressWarnings("resource")
