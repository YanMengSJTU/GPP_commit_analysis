diff --git a/src/main/java/com/economic/persistgson/internal/bind/ObjectTypeAdapter.java b/src/main/java/com/economic/persistgson/internal/bind/ObjectTypeAdapter.java
index 3ba48c0d5..c8ea52357 100644
--- a/src/main/java/com/economic/persistgson/internal/bind/ObjectTypeAdapter.java
+++ b/src/main/java/com/economic/persistgson/internal/bind/ObjectTypeAdapter.java
@@ -31,6 +31,7 @@
 
 import java.io.IOException;
 import java.math.BigDecimal;
+import java.math.BigInteger;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -90,7 +91,7 @@
                 "JSON forbids NaN and infinities: " + asDouble);
       }
       if (DoubleMath.isMathematicalInteger(asDouble)) {
-        return (int) asDouble;
+        return (long) asDouble;
       } else {
         return asDouble;
       }
diff --git a/src/test/java/com/economic/persistgson/ObjectTypeAdapterTest.java b/src/test/java/com/economic/persistgson/ObjectTypeAdapterTest.java
index 43d0a1751..ff5463989 100644
--- a/src/test/java/com/economic/persistgson/ObjectTypeAdapterTest.java
+++ b/src/test/java/com/economic/persistgson/ObjectTypeAdapterTest.java
@@ -32,8 +32,8 @@
 
   public void testDeserialize() throws Exception {
     Map<?, ?> map = (Map<?, ?>) adapter.fromJson("{\"a\":5,\"b\":[1,2,null],\"c\":{\"x\":\"y\"}}");
-    assertEquals(5, map.get("a"));
-    assertEquals(Arrays.asList(1, 2, null), map.get("b"));
+    assertEquals(5L, map.get("a"));
+    assertEquals(Arrays.asList(1L, 2L, null), map.get("b"));
     assertEquals(Collections.singletonMap("x", "y"), map.get("c"));
     assertEquals(3, map.size());
   }
diff --git a/src/test/java/com/economic/persistgson/functional/CollectionTest.java b/src/test/java/com/economic/persistgson/functional/CollectionTest.java
index cc5893dcc..ee07e382d 100644
--- a/src/test/java/com/economic/persistgson/functional/CollectionTest.java
+++ b/src/test/java/com/economic/persistgson/functional/CollectionTest.java
@@ -254,7 +254,7 @@ public void testRawCollectionDeserializationNotAlllowed() {
     String json = "[0,1,2,3,4,5,6,7,8,9]";
     Collection integers = gson.fromJson(json, Collection.class);
     // JsonReader converts numbers to double by default so we need a floating point comparison
-    assertEquals(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), integers);
+    assertEquals(Arrays.asList(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L), integers);
 
     json = "[\"Hello\", \"World\"]";
     Collection strings = gson.fromJson(json, Collection.class);
@@ -271,8 +271,8 @@ public void testRawCollectionOfBagOfPrimitivesNotAllowed() {
     for (Object bag1 : target) {
       // Gson 2.0 converts raw objects into maps
       Map<String, Object> values = (Map<String, Object>) bag1;
-      assertTrue(values.containsValue(10));
-      assertTrue(values.containsValue(20));
+      assertTrue(values.containsValue(10L));
+      assertTrue(values.containsValue(20L));
       assertTrue(values.containsValue("stringValue"));
     }
   }
diff --git a/src/test/java/com/economic/persistgson/persist/PersistModelTest.kt b/src/test/java/com/economic/persistgson/persist/PersistModelTest.kt
index ccb566337..82e2c1405 100644
--- a/src/test/java/com/economic/persistgson/persist/PersistModelTest.kt
+++ b/src/test/java/com/economic/persistgson/persist/PersistModelTest.kt
@@ -144,20 +144,20 @@ class PersistModelTest : TestCase() {
         Assert.assertNotNull(customer?.customerContact)
         Assert.assertTrue(customer?._persistMap?.values?.size != 0)
         Assert.assertEquals(1, customer?.customerNumber)
-        Assert.assertEquals(12, customer!!._persistMap["unknownProperty"])
+        Assert.assertEquals(12L, customer!!._persistMap["unknownProperty"])
     }
 
     fun testWriteModelToJson() {
         val customer = Customer()
 
         customer.customerNumber = 27
-        customer.doubleCustomerNumber = 12.0242
+        customer.doubleCustomerNumber = 1234567890.1234567890
         customer.customerContact = listOf(CustomerContact())
         customer._persistMap["unknownProperty"] = "hello"
 
         val expectedJson = mapOf<String, Any>(
-                "customerNumber" to 27,
-                "doubleCustomerNumber" to 12.0242,
+                "customerNumber" to 27L,
+                "doubleCustomerNumber" to 1234567890.1234567890,
                 "customerContact" to arrayListOf(
                         mapOf("contactName" to "Generic Name")
                 ),
@@ -180,13 +180,13 @@ class PersistModelTest : TestCase() {
         val customer = gson.create<Customer>(defaultCustomerJson)
 
         customer?.customerContact = listOf(CustomerContact(contactName = "Some Guy"))
-        customer?.doubleCustomerNumber = 2.021421241
+        customer?.doubleCustomerNumber = 1234567890.000
 
         val expectedCustomerMap = mapOf(
-                "customerNumber" to 1,
-                "doubleCustomerNumber" to 2.021421241,
-                "unknownProperty" to 12,
-                "balance" to 123,
+                "customerNumber" to 1L,
+                "doubleCustomerNumber" to 1234567890L,
+                "unknownProperty" to 12L,
+                "balance" to 123L,
                 "demo" to true,
                 "customerContact" to arrayListOf(
                         mapOf(
@@ -195,7 +195,7 @@ class PersistModelTest : TestCase() {
                 ),
                 "layout" to arrayListOf(
                         mapOf(
-                                "layoutNumber" to 21,
+                                "layoutNumber" to 21L,
                                 "someOtherProperty" to arrayListOf(
                                         mapOf(
                                                 "name" to "Michael"
@@ -206,7 +206,7 @@ class PersistModelTest : TestCase() {
                                 )
                         ),
                         mapOf(
-                                "layoutNumber" to 21,
+                                "layoutNumber" to 21L,
                                 "someOtherProperty" to arrayListOf(
                                         mapOf(
                                                 "name" to "Michael"
@@ -237,14 +237,14 @@ class PersistModelTest : TestCase() {
         customer?.customerContact = null
 
         val expectedCustomerMap = mapOf(
-                "customerNumber" to 1,
+                "customerNumber" to 1L,
                 "doubleCustomerNumber" to 2.02,
-                "unknownProperty" to 12,
-                "balance" to 123,
+                "unknownProperty" to 12L,
+                "balance" to 123L,
                 "demo" to true,
                 "layout" to arrayListOf(
                         mapOf(
-                                "layoutNumber" to 21,
+                                "layoutNumber" to 21L,
                                 "someOtherProperty" to arrayListOf(
                                         mapOf(
                                                 "name" to "Michael"
@@ -255,7 +255,7 @@ class PersistModelTest : TestCase() {
                                 )
                         ),
                         mapOf(
-                                "layoutNumber" to 21,
+                                "layoutNumber" to 21L,
                                 "someOtherProperty" to arrayListOf(
                                         mapOf(
                                                 "name" to "Michael"
@@ -278,14 +278,14 @@ class PersistModelTest : TestCase() {
         customer?.customerContact = customer?.customerContact?.plus(CustomerContact(details = listOf(ContactDetails(contactInfo = "nothing"))))
 
         val expectedCustomerMap = mapOf(
-                "customerNumber" to 1,
+                "customerNumber" to 1L,
                 "doubleCustomerNumber" to 2.02,
-                "unknownProperty" to 12,
-                "balance" to 123,
+                "unknownProperty" to 12L,
+                "balance" to 123L,
                 "demo" to true,
                 "customerContact" to arrayListOf(
                         mapOf(
-                                "id" to 12345,
+                                "id" to 12345L,
                                 "contactName" to "John Doe",
                                 "phones" to mapOf(
                                         "home" to "800-123-4567",
@@ -322,7 +322,7 @@ class PersistModelTest : TestCase() {
                                 )
                         ),
                         mapOf(
-                                "id" to 12345,
+                                "id" to 12345L,
                                 "contactName" to "John Doe",
                                 "phones" to mapOf(
                                         "home" to "800-123-4567",
@@ -369,7 +369,7 @@ class PersistModelTest : TestCase() {
                 ),
                 "layout" to arrayListOf(
                         mapOf(
-                                "layoutNumber" to 21,
+                                "layoutNumber" to 21L,
                                 "someOtherProperty" to arrayListOf(
                                         mapOf(
                                                 "name" to "Michael"
@@ -380,7 +380,7 @@ class PersistModelTest : TestCase() {
                                 )
                         ),
                         mapOf(
-                                "layoutNumber" to 21,
+                                "layoutNumber" to 21L,
                                 "someOtherProperty" to arrayListOf(
                                         mapOf(
                                                 "name" to "Michael"
