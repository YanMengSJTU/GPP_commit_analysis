diff --git a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
index 8fb1834a2..3ae172178 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
@@ -24,7 +24,6 @@
 import java.io.*;
 import java.math.*;
 import java.net.*;
-import java.sql.*;
 import java.util.*;
 import java.util.concurrent.atomic.*;
 
diff --git a/gson/src/main/java/module-info.java b/gson/src/main/java/module-info.java
index ba6ea07b7..b85e94319 100644
--- a/gson/src/main/java/module-info.java
+++ b/gson/src/main/java/module-info.java
@@ -3,6 +3,4 @@
 	exports com.google.gson.annotations;
 	exports com.google.gson.reflect;
 	exports com.google.gson.stream;
-
-	requires transitive java.sql;
 }
diff --git a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java b/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java
index 73fbd560b..a64323cab 100644
--- a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java
+++ b/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java
@@ -401,17 +401,6 @@ public void testEnsureCustomDeserializerNotInvokedForNullValues() {
     assertNull(actual.wrappedData);
   }
 
-  // Test created from Issue 352
-  public void testRegisterHierarchyAdapterForDate() {
-    Gson gson = Gson.newBuilder()
-        .registerTypeHierarchyAdapter(Date.class, new DateTypeAdapter())
-        .build();
-    assertEquals("0", gson.toJson(new Date(0)));
-    assertEquals("0", gson.toJson(new java.sql.Date(0)));
-    assertEquals(new Date(0), gson.fromJson("0", Date.class));
-    assertEquals(new java.sql.Date(0), gson.fromJson("0", java.sql.Date.class));
-  }
-
   private static class DataHolder {
     final String data;
 
@@ -453,17 +442,4 @@ public DataHolder deserialize(JsonElement json, Type typeOfT, JsonDeserializatio
       return new DataHolder(jsonElement.getAsString());
     }
   }
-
-  private static class DateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {
-    @Override
-    public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) {
-      return typeOfT == Date.class
-          ? new Date(json.getAsLong())
-          : new java.sql.Date(json.getAsLong());
-    }
-    @Override
-    public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {
-      return new JsonPrimitive(src.getTime());
-    }
-  }
 }
