diff --git a/gson/src/test/java/com/google/gson/mc626/ISO8601UtilsTest.java b/gson/src/test/java/com/google/gson/mc626/ISO8601UtilsTest.java
index b5626c2a7..d7c2ccc60 100644
--- a/gson/src/test/java/com/google/gson/mc626/ISO8601UtilsTest.java
+++ b/gson/src/test/java/com/google/gson/mc626/ISO8601UtilsTest.java
@@ -1,79 +1,76 @@
 package com.google.gson.mc626;
 
-import java.io.IOException;
 import java.text.ParseException;
 import java.text.ParsePosition;
-import java.util.Calendar;
+import java.text.SimpleDateFormat;
 import java.util.Date;
-import java.util.GregorianCalendar;
+import java.util.TimeZone;
 
 import com.google.gson.internal.bind.util.ISO8601Utils;
 
-import junit.framework.Assert;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import junit.framework.TestCase;
 
-public class ISO8601UtilsTest extends TestCase{
-	public void testFlow1() throws IOException {
-		ISO8601Utils parser = new ISO8601Utils();
-		Date date = new GregorianCalendar(2014, Calendar.FEBRUARY, 11).getTime();
-        try {
-			assertEquals(date, parser.parse("2014-02-11", new ParsePosition(0)));
-		} catch (ParseException e) {
-			e.printStackTrace();
-		}
+/** Test cases for ISO8601Utils, using cause-effect graph for test coverage **/
+public class ISO8601UtilsTest extends TestCase {
+	public void testLowerBoundPosition() {
+        String strDate = "whatever";
+		ParsePosition position = new ParsePosition(-1);
+		assertThrows(ParseException.class, () -> ISO8601Utils.parse(strDate, position));
     }
 	
-	@SuppressWarnings("deprecation")
-	public void testFlow2() throws IOException {
-		ISO8601Utils parser = new ISO8601Utils();
-		Date date = new Date(2014-1900, 1, 11, 01, 01, 59);
-		// [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]
-        try {
-			assertEquals(date, parser.parse("2014-02-12T01:01:59+22:00", new ParsePosition(0)));
-		} catch (ParseException e) {
-			e.printStackTrace();
-		}
+	public void testUpperBoundPosition() {
+        String strDate = "2014-02-12";
+        ParsePosition position = new ParsePosition(42);
+        assertThrows(ParseException.class, () -> ISO8601Utils.parse(strDate, position));
+    }
+
+    public void testEmptyDate() throws ParseException {
+        String strDate = "";
+        ParsePosition position = new ParsePosition(0);
+        assertThrows(ParseException.class, () -> ISO8601Utils.parse(strDate, position));
+    }
+    
+	public void testInvalidDate() {
+        String strDate = "2014z02-12";
+        ParsePosition position = new ParsePosition(0);
+        assertThrows(ParseException.class, () -> ISO8601Utils.parse(strDate, position));
     }
 	
-	@SuppressWarnings("deprecation")
-	public void testFlow3() throws IOException {
-		ISO8601Utils parser = new ISO8601Utils();
-		Date date = new Date(2014-1900, 1, 11, 01, 01, 59);
-		String d = "2014-02-12T01:01:59";
-		String prefix = "Failed to parse date [\"" + d + "\"]: ";
-        try {
-			assertEquals(date, parser.parse(d, new ParsePosition(0)));
-			Assert.fail("Should have thrown an exception.");
-		} catch (ParseException e) {
-			assertEquals(prefix + "No time zone indicator", e.getMessage());
-		}
+	public void testInvalidDateWithTime() {
+        String strDate = "201402-12T";
+        ParsePosition position = new ParsePosition(0);
+        assertThrows(ParseException.class, () -> ISO8601Utils.parse(strDate, position));
+    }
+	
+	public void testInvalidDateWithoutTimezone() {
+        String strDate = "201402-12T01:01:59";
+	    ParsePosition position = new ParsePosition(0);
+        assertThrows(ParseException.class, () -> ISO8601Utils.parse(strDate, position));
+	}
+
+	public void testValidDate() throws ParseException {
+        String strDate = "201402-12";
+        ParsePosition position = new ParsePosition(0);
+        Date date = new SimpleDateFormat("yyyy-MM-dd").parse("2014-02-12");
+        
+        assertEquals(date, ISO8601Utils.parse(strDate, position));
     }
 	
-	@SuppressWarnings("deprecation")
-	public void testFlow4() throws IOException {
-		ISO8601Utils parser = new ISO8601Utils();
-		Date date = new Date(2014-1900, 1, 11, 01, 01, 59);
-		String d = "2014-02-12T01:01:59?Z";
-		String prefix = "Failed to parse date [\"" + d + "\"]: ";
-        try {
-			assertEquals(date, parser.parse(d, new ParsePosition(0)));
-			Assert.fail("Should have thrown an exception.");
-		} catch (ParseException e) {
-			assertEquals(prefix + "Invalid time zone indicator '" + "?" +"'", e.getMessage());
-		}
+	public void testValidDateWithTime() throws ParseException {
+        String strDate = "2014-02-12T01:01:59Z";
+        ParsePosition position = new ParsePosition(0);
+        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
+        
+        assertEquals(sdf.parse("2014-02-12 01:01:59"), ISO8601Utils.parse(strDate, position));
     }
 	
-	@SuppressWarnings("deprecation")
-	public void testFlow5() throws IOException {
-		ISO8601Utils parser = new ISO8601Utils();
-		Date date = new Date(2014-1900, 1, 11, 01, 01, 59);
-		String d = "2014-02-12T01:01:59+00000";
-		String prefix = "Failed to parse date [\"" + d + "\"]: ";
-        try {
-			assertEquals(date, parser.parse(d, new ParsePosition(0)));
-			Assert.fail("Should have thrown an exception.");
-		} catch (ParseException e) {
-			assertEquals(prefix + "Mismatching time zone indicator: GMT+00000 given, resolves to GMT+00:00", e.getMessage());
-		}
+    public void testValidDateWithTimeAndTimezone() throws ParseException {
+        String strDate = "2014-02-12T01:01:59+0300";
+        ParsePosition position = new ParsePosition(0);
+        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+        
+        assertEquals(sdf.parse("2014-02-11 20:01:59"), ISO8601Utils.parse(strDate, position));
     }
 }
