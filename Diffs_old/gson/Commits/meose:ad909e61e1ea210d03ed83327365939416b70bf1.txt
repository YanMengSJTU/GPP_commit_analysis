diff --git a/gson/src/main/java/com/google/gson/Gson.java b/gson/src/main/java/com/google/gson/Gson.java
index 8b1ae122c..27f3ee924 100644
--- a/gson/src/main/java/com/google/gson/Gson.java
+++ b/gson/src/main/java/com/google/gson/Gson.java
@@ -110,7 +110,6 @@
   static final boolean DEFAULT_SERIALIZE_NULLS = false;
   static final boolean DEFAULT_COMPLEX_MAP_KEYS = false;
   static final boolean DEFAULT_SPECIALIZE_FLOAT_VALUES = false;
-  static final boolean DEFAULT_USE_GETTER_SETTER = false;
 
   private static final TypeToken<?> NULL_KEY_SURROGATE = TypeToken.get(Object.class);
   private static final String JSON_NON_EXECUTABLE_PREFIX = ")]}'\n";
@@ -129,7 +128,6 @@
 
   private final ConstructorConstructor constructorConstructor;
   private final JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;
-  private final boolean useGetterSetter;
 
   final List<TypeAdapterFactory> factories;
 
@@ -191,7 +189,7 @@ public Gson() {
         DEFAULT_PRETTY_PRINT, DEFAULT_LENIENT, DEFAULT_SPECIALIZE_FLOAT_VALUES,
         LongSerializationPolicy.DEFAULT, null, DateFormat.DEFAULT, DateFormat.DEFAULT,
         Collections.<TypeAdapterFactory>emptyList(), Collections.<TypeAdapterFactory>emptyList(),
-        Collections.<TypeAdapterFactory>emptyList(), DEFAULT_USE_GETTER_SETTER);
+        Collections.<TypeAdapterFactory>emptyList());
   }
 
   Gson(Excluder excluder, FieldNamingStrategy fieldNamingStrategy,
@@ -201,7 +199,7 @@ public Gson() {
       LongSerializationPolicy longSerializationPolicy, String datePattern, int dateStyle,
       int timeStyle, List<TypeAdapterFactory> builderFactories,
       List<TypeAdapterFactory> builderHierarchyFactories,
-      List<TypeAdapterFactory> factoriesToBeAdded, boolean useGetterSetter) {
+      List<TypeAdapterFactory> factoriesToBeAdded) {
     this.excluder = excluder;
     this.fieldNamingStrategy = fieldNamingStrategy;
     this.instanceCreators = instanceCreators;
@@ -212,7 +210,6 @@ public Gson() {
     this.htmlSafe = htmlSafe;
     this.prettyPrinting = prettyPrinting;
     this.lenient = lenient;
-    this.useGetterSetter = useGetterSetter;
     this.serializeSpecialFloatingPointValues = serializeSpecialFloatingPointValues;
     this.longSerializationPolicy = longSerializationPolicy;
     this.datePattern = datePattern;
@@ -309,10 +306,6 @@ public boolean htmlSafe() {
     return htmlSafe;
   }
 
-  public boolean useGetterSetter() {
-    return useGetterSetter;
-  }
-
   private TypeAdapter<Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {
     if (serializeSpecialFloatingPointValues) {
       return TypeAdapters.DOUBLE;
diff --git a/gson/src/main/java/com/google/gson/GsonBuilder.java b/gson/src/main/java/com/google/gson/GsonBuilder.java
index 343d900f3..b97be452b 100644
--- a/gson/src/main/java/com/google/gson/GsonBuilder.java
+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java
@@ -40,7 +40,6 @@
 import static com.google.gson.Gson.DEFAULT_PRETTY_PRINT;
 import static com.google.gson.Gson.DEFAULT_SERIALIZE_NULLS;
 import static com.google.gson.Gson.DEFAULT_SPECIALIZE_FLOAT_VALUES;
-import static com.google.gson.Gson.DEFAULT_USE_GETTER_SETTER;
 
 /**
  * <p>Use this builder to construct a {@link Gson} instance when you need to set configuration
@@ -95,7 +94,6 @@
   private boolean prettyPrinting = DEFAULT_PRETTY_PRINT;
   private boolean generateNonExecutableJson = DEFAULT_JSON_NON_EXECUTABLE;
   private boolean lenient = DEFAULT_LENIENT;
-  private boolean useGetterSetter = DEFAULT_USE_GETTER_SETTER;
 
   /**
    * Creates a GsonBuilder instance that can be used to build Gson with various configuration
@@ -579,19 +577,6 @@ public GsonBuilder serializeSpecialFloatingPointValues() {
     return this;
   }
 
-  /**
-   * By default, Gson uses reflection to get/set values of the fields. Use this option to configure
-   * Gson to use getter/setter methods whenever possible. If no method is found,
-   * it will fallback to using reflection.
-   *
-   * @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern
-   * @since 1.8
-   */
-  public GsonBuilder useGetterSetter() {
-    this.useGetterSetter = true;
-    return this;
-  }
-
   /**
    * Creates a {@link Gson} instance based on the current configuration. This method is free of
    * side-effects to this {@code GsonBuilder} instance and hence can be called multiple times.
@@ -614,7 +599,7 @@ public Gson create() {
         generateNonExecutableJson, escapeHtmlChars, prettyPrinting, lenient,
         serializeSpecialFloatingPointValues, longSerializationPolicy,
         datePattern, dateStyle, timeStyle,
-        this.factories, this.hierarchyFactories, factories, useGetterSetter);
+        this.factories, this.hierarchyFactories, factories);
   }
 
   @SuppressWarnings("unchecked")
diff --git a/gson/src/test/java/com/google/gson/GsonTest.java b/gson/src/test/java/com/google/gson/GsonTest.java
index e851d0a13..eec2ec91c 100644
--- a/gson/src/test/java/com/google/gson/GsonTest.java
+++ b/gson/src/test/java/com/google/gson/GsonTest.java
@@ -49,13 +49,12 @@ public void testOverridesDefaultExcluder() {
         new HashMap<Type, InstanceCreator<?>>(), true, false, true, false,
         true, true, false, LongSerializationPolicy.DEFAULT, null, DateFormat.DEFAULT,
         DateFormat.DEFAULT, new ArrayList<TypeAdapterFactory>(),
-        new ArrayList<TypeAdapterFactory>(), new ArrayList<TypeAdapterFactory>(), true);
+        new ArrayList<TypeAdapterFactory>(), new ArrayList<TypeAdapterFactory>());
 
     assertEquals(CUSTOM_EXCLUDER, gson.excluder());
     assertEquals(CUSTOM_FIELD_NAMING_STRATEGY, gson.fieldNamingStrategy());
     assertEquals(true, gson.serializeNulls());
     assertEquals(false, gson.htmlSafe());
-    assertEquals(true, gson.useGetterSetter());
   }
 
   public void testClonedTypeAdapterFactoryListsAreIndependent() {
@@ -63,7 +62,7 @@ public void testClonedTypeAdapterFactoryListsAreIndependent() {
         new HashMap<Type, InstanceCreator<?>>(), true, false, true, false,
         true, true, false, LongSerializationPolicy.DEFAULT, null, DateFormat.DEFAULT,
         DateFormat.DEFAULT, new ArrayList<TypeAdapterFactory>(),
-        new ArrayList<TypeAdapterFactory>(), new ArrayList<TypeAdapterFactory>(), true);
+        new ArrayList<TypeAdapterFactory>(), new ArrayList<TypeAdapterFactory>());
 
     Gson clone = original.newBuilder()
         .registerTypeAdapter(Object.class, new TestTypeAdapter())
diff --git a/gson/src/test/java/com/google/gson/functional/UseGetterSetterTest.java b/gson/src/test/java/com/google/gson/functional/UseGetterSetterTest.java
deleted file mode 100644
index fc0a6099a..000000000
--- a/gson/src/test/java/com/google/gson/functional/UseGetterSetterTest.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package com.google.gson.functional;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import junit.framework.TestCase;
-
-/**
- * Functional Test exercising serialization/deserialization using getter/setter methods.
- *
- * @author Raj Srivastava
- */
-public class UseGetterSetterTest extends TestCase {
-
-    private static final int    INITIAL_INT    = 100;
-    private static final int    GETTER_OFFSET  = 20;
-    private static final int    SETTER_OFFSET  = 40;
-    private static final String INITIAL_STRING = "initial";
-    private static final String GETTER_SUFFIX  = "-g";
-    private static final String SETTER_SUFFIX  = "-s";
-
-    private Gson gson;
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        gson = new GsonBuilder().useGetterSetter().create();
-    }
-
-    public void testGetterSetterUse() throws Exception {
-        ClassWithGetterSetter request = new ClassWithGetterSetter(INITIAL_INT, INITIAL_STRING);
-        String json = gson.toJson(request);
-
-        ClassWithGetterSetter response = gson.fromJson(json, ClassWithGetterSetter.class);
-        assertEquals(response.primitiveField, INITIAL_INT + GETTER_OFFSET + SETTER_OFFSET);
-        assertEquals(response.nonPrimitiveField, INITIAL_STRING + GETTER_SUFFIX + SETTER_SUFFIX);
-    }
-
-    public static class ClassWithGetterSetter {
-        int     primitiveField;
-        String  nonPrimitiveField;
-
-        public ClassWithGetterSetter(int primitiveField, String nonPrimitiveField) {
-            this.primitiveField = primitiveField;
-            this.nonPrimitiveField = nonPrimitiveField;
-        }
-
-        public int getPrimitiveField() {
-            return primitiveField + GETTER_OFFSET;
-        }
-
-        public void setPrimitiveField(int primitiveField) {
-            this.primitiveField = primitiveField + SETTER_OFFSET;
-        }
-
-        public String getNonPrimitiveField() {
-            return nonPrimitiveField + GETTER_SUFFIX;
-        }
-
-        public void setNonPrimitiveField(String nonPrimitiveField) {
-            this.nonPrimitiveField = nonPrimitiveField + SETTER_SUFFIX;
-        }
-    }
-}
\ No newline at end of file
