diff --git a/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java b/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java
index b125e71ec..195287bc2 100644
--- a/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java
+++ b/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java
@@ -156,9 +156,17 @@ public LinkedTreeMap(Comparator<? super K> comparator) {
     }
 
     // Create the node and add it to the tree or the table.
+    Node<K, V> created = createNode(key, comparator, nearest);
+    updateTree(key, comparator, nearest, comparison, created);
+    size++;
+    modCount++;
+
+    return created;
+  }
+
+  private Node<K, V> createNode(K key, Comparator<? super K> comparator, Node<K, V> nearest) {
     Node<K, V> header = this.header;
     Node<K, V> created;
-    // marked
     if (nearest == null) {
       // Check that the value is comparable if we didn't do any comparisons.
       if (comparator == NATURAL_ORDER && !(key instanceof Comparable)) {
@@ -168,7 +176,10 @@ public LinkedTreeMap(Comparator<? super K> comparator) {
     } else {
       created = new Node<K, V>(nearest, key, header, header.prev);
     }
-    // after
+    return created;
+  }
+
+  private void updateTree(K key, Comparator<? super K> comparator, Node<K, V> nearest, int comparison, Node<K, V> created) {
     if (nearest == null) {
       if (comparator == NATURAL_ORDER && !(key instanceof Comparable)) {
         throw new ClassCastException(key.getClass().getName() + " is not Comparable");
@@ -182,10 +193,6 @@ public LinkedTreeMap(Comparator<? super K> comparator) {
       }
       rebalance(nearest, true);
     }
-    size++;
-    modCount++;
-
-    return created;
   }
 
   @SuppressWarnings("unchecked")
