diff --git a/gson/src/main/java/com/economic/persistgson/internal/bind/ReflectiveTypeAdapterFactory.java b/gson/src/main/java/com/economic/persistgson/internal/bind/ReflectiveTypeAdapterFactory.java
index c4bc08ba5..e48d952b5 100644
--- a/gson/src/main/java/com/economic/persistgson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ b/gson/src/main/java/com/economic/persistgson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -41,6 +41,7 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 /**
  * Type adapter that reflects over the fields and methods of a class.
@@ -123,17 +124,30 @@ public void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         if (value instanceof PersistObject) {
           if (this.name.equals("persistMap")) {
-            for (persistMapKey : value.persistMap.keys) {
-
-            }
+              Map<String, Object> persistMap = ((PersistObject) value).getPersistMap();
+              Set<String> keySet = ((PersistObject) value).getPersistMap().keySet();
+              for (String key : keySet) {
+                  writer.name(key);
+                  Object mapValue = persistMap.get(key);
+                  TypeAdapter t = context.getAdapter(TypeToken.get(mapValue.getClass()).getRawType());
+                  t.write(writer, mapValue);
+              }
+          } else {
+              writer.name(this.name);
+              Object fieldValue = field.get(value);
+              TypeAdapter t = jsonAdapterPresent ? typeAdapter
+                      : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+              t.write(writer, fieldValue);
           }
+        } else {
+            writer.name(this.name);
+            Object fieldValue = field.get(value);
+            TypeAdapter t = jsonAdapterPresent ? typeAdapter
+                    : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+            t.write(writer, fieldValue);
         }
-
-        Object fieldValue = field.get(value);
-        TypeAdapter t = jsonAdapterPresent ? typeAdapter
-            : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
-        t.write(writer, fieldValue);
       }
+
       @Override
       public void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
diff --git a/gson/src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.kt b/gson/src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.kt
index 0980bc66a..028689341 100644
--- a/gson/src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.kt
+++ b/gson/src/main/java/com/economic/persistgson/persist/PersistReflectiveTypeAdapterFactory.kt
@@ -93,7 +93,6 @@ class PersistReflectiveTypeAdapterFactory(constructorConstructor: ConstructorCon
 
         private fun writeValueToBoundField(boundField: BoundField, value: T?, out: JsonWriter) {
             if (boundField.writeField(value)) {
-                out.name(boundField.name)
                 boundField.write(out, value)
             }
         }
