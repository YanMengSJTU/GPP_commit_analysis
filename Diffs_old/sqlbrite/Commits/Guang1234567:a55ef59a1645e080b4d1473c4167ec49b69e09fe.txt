diff --git a/build.gradle b/build.gradle
index eb86081..9e2a71e 100644
--- a/build.gradle
+++ b/build.gradle
@@ -84,8 +84,8 @@ ext {
     autoValueCursor = 'com.gabrielittner.auto.value:auto-value-cursor:1.1.0'
     autoValueCursorAnnotations = 'com.gabrielittner.auto.value:auto-value-cursor-annotations:1.1.0'
 
-    rxJava = 'io.reactivex.rxjava2:rxjava:2.1.3'
-    rxAndroid = 'io.reactivex.rxjava2:rxandroid:2.0.1'
+    rxJava = 'io.reactivex.rxjava2:rxjava:+'
+    rxAndroid = 'io.reactivex.rxjava2:rxandroid:+'
     rxBinding = 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
     rxPreferences = 'com.f2prateek.rx.preferences2:rx-preferences:+'
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java b/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
index 9b8becd..9bc8b54 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
@@ -35,9 +35,7 @@
 
 import timber.log.Timber;
 
-public final class TodoApp extends Application {
-
-    private AppScopeComponent mAppScopeComponent;
+public final class TodoApp extends Application implements AppScopeComponent.Injectable{
 
     @Inject
     ActivityMgr mActivityMgr;
@@ -61,11 +59,7 @@ public void onCreate() {
             Timber.plant(new Timber.DebugTree());
         }
 
-        mAppScopeComponent = InjectHelper.instance()
-                .init(this);
-
-        mAppScopeComponent.inject(this);
-
+        inject(InjectHelper.instance().init(this));
     }
 
     public void exit() {
@@ -85,6 +79,11 @@ private void exitInMainThread() {
         mActivityMgr.finishAllActivity();
     }
 
+    @Override
+    public void inject(AppScopeComponent component) {
+        component.inject(this);
+    }
+
     public final static class ActivityMgr {
         private List<Activity> mActivitys;
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/LoginFlowViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/LoginFlowViewModel.java
new file mode 100644
index 0000000..79df425
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/LoginFlowViewModel.java
@@ -0,0 +1,31 @@
+package com.example.sqlbrite.todo.controler;
+
+import android.arch.lifecycle.ViewModel;
+
+import com.example.sqlbrite.todo.model.LoginFlowRepository;
+import com.example.sqlbrite.todo.model.users.UserSession;
+
+import javax.inject.Inject;
+
+import io.reactivex.Single;
+
+public class LoginFlowViewModel extends ViewModel {
+
+    private LoginFlowRepository mLoginFlowRepository;
+
+    @Inject
+    protected LoginFlowViewModel(LoginFlowRepository LoginFlowRepository) {
+        super();
+
+        mLoginFlowRepository = LoginFlowRepository;
+    }
+
+    public Single<UserSession> login(final String userId, final String password) {
+        return mLoginFlowRepository.login(userId, password);
+    }
+
+    @Override
+    protected void onCleared() {
+        super.onCleared();
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
index c6f3f3a..80d9fc8 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
@@ -1,5 +1,6 @@
 package com.example.sqlbrite.todo.controler;
 
+import com.example.sqlbrite.todo.model.LoginFlowRepository;
 import com.example.sqlbrite.todo.model.MainDataSource;
 import com.example.sqlbrite.todo.model.local.db.TodoItem;
 import com.example.sqlbrite.todo.model.users.UserSession;
@@ -24,35 +25,35 @@
 public class MainViewModel extends RxBaseViewModel {
 
     private final MainDataSource mDataSource;
-    private final LoginViewControler mLoginViewControler;
+    private final LoginFlowRepository mLoginFlowRepository;
     private final SchedulerProvider mSchedulerProvider;
 
     private Date mLastCreateTime;
 
     @Inject
     public MainViewModel(MainDataSource dataSource,
-                         LoginViewControler loginViewControler,
+                         LoginFlowRepository LoginFlowRepository,
                          SchedulerProvider schedulerProvider) {
         mDataSource = dataSource;
-        mLoginViewControler = loginViewControler;
+        mLoginFlowRepository = LoginFlowRepository;
         mSchedulerProvider = schedulerProvider;
         mLastCreateTime = new Date();
     }
 
     public Observable<UserSession> currentLoginUserSession() {
-        return mLoginViewControler.currentLoginUserSession();
+        return mLoginFlowRepository.currentLoginUserSession();
     }
 
-    public Observable<List<ListsItem>> createQueryListsItems() {
+    public Observable<List<ListsItem>> getListsItems() {
         return mDataSource.createQueryListsItems(100)// 省内存
-                .compose(this.<List<ListsItem>>bindToLifecycle()); // 等价 bindUntilEvent(ViewModelEvent.DESTROY)
+                .compose(bindToLifecycle()); // 释放资源
     }
 
     public boolean complete(long id, boolean complete) {
         return mDataSource.completeTodoitem(id, complete);
     }
 
-    public Observable<Integer> createQueryItemCount(long listId) {
+    public Observable<Integer> getItemCount(long listId) {
         return mDataSource.createQueryItemCount(listId)
                 .compose(this.<Integer>bindUntilEvent(ViewModelEvent.DESTROY));
     }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/SystemSettingViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/SystemSettingViewModel.java
index 9326a3b..3c6a994 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/controler/SystemSettingViewModel.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/SystemSettingViewModel.java
@@ -1,5 +1,6 @@
 package com.example.sqlbrite.todo.controler;
 
+import com.example.sqlbrite.todo.model.LoginFlowRepository;
 import com.example.sqlbrite.todo.model.users.UserManager;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.gg.rxbase.controller.RxBaseViewModel;
@@ -17,12 +18,12 @@
 
     private final UserManager mUserManager;
     private final SchedulerProvider mSchedulerProvider;
-    private final LoginViewControler mloginViewModel;
+    private final LoginFlowRepository mloginViewModel;
 
     @Inject
     public SystemSettingViewModel(UserManager userManager,
                                   SchedulerProvider schedulerProvider,
-                                  LoginViewControler loginViewModel) {
+                                  LoginFlowRepository loginViewModel) {
         mUserManager = userManager;
         mSchedulerProvider = schedulerProvider;
         mloginViewModel = loginViewModel;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java
deleted file mode 100644
index 701a9fc..0000000
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package com.example.sqlbrite.todo.di;
-
-import android.app.Activity;
-
-import com.example.sqlbrite.todo.di.controler.UserScopeViewModelFactory;
-import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
-import com.example.sqlbrite.todo.ui.MainActivity;
-import com.example.sqlbrite.todo.ui.SystemSettingActivity;
-
-import dagger.Component;
-
-/**
- * @author Guang1234567
- * @date 2018/3/14 13:10
- */
-
-@ActivityScope
-@Component(modules = ActivityScopeModule.class, dependencies = UserScopeComponent.class)
-public interface ActivityScopeComponent {
-
-    Activity activity();
-
-    SchedulerProvider schedulerProvider();
-
-    /*ViewModelProvider.Factory viewModelProviderFactory();*/
-
-    UserScopeViewModelFactory viewModelProviderFactory();
-
-    void inject(MainActivity activity);
-
-    void inject(SystemSettingActivity activity);
-}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeModule.java
deleted file mode 100644
index be784bc..0000000
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeModule.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package com.example.sqlbrite.todo.di;
-
-import android.app.Activity;
-
-import com.example.sqlbrite.todo.di.model.UserScopeModelModule;
-import com.example.sqlbrite.todo.di.model.remote.NetModule;
-
-import dagger.Module;
-import dagger.Provides;
-
-/**
- * @author Guang1234567
- * @date 2018/3/14 13:11
- */
-
-@Module
-public class ActivityScopeModule {
-    private final Activity mActivity;
-
-    public ActivityScopeModule(Activity activity) {
-        mActivity = activity;
-    }
-
-    @Provides
-    @ActivityScope
-    Activity provideActivity() {
-        return mActivity;
-    }
-}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/AppActivityScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/AppActivityScopeComponent.java
new file mode 100644
index 0000000..7b5fc87
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/AppActivityScopeComponent.java
@@ -0,0 +1,37 @@
+package com.example.sqlbrite.todo.di;
+
+import android.arch.lifecycle.ViewModelProvider;
+import android.support.v4.app.FragmentActivity;
+
+import com.example.sqlbrite.todo.controler.LoginFlowViewModel;
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
+import com.example.sqlbrite.todo.ui.SplashActivity;
+
+import javax.inject.Named;
+
+import dagger.Component;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/14 13:10
+ */
+
+@ActivityScope
+@Component(modules = AppActivityScopeModule.class, dependencies = AppScopeComponent.class)
+public interface AppActivityScopeComponent {
+
+    FragmentActivity activity();
+
+    SchedulerProvider schedulerProvider();
+
+    @Named("AppScope")
+    ViewModelProvider.Factory appScopeviewModelProviderFactory();
+
+    LoginFlowViewModel loginFlowViewModel();
+
+    void inject(SplashActivity activity);
+
+    interface Injectable {
+        void inject(AppActivityScopeComponent component);
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/AppActivityScopeModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/AppActivityScopeModule.java
new file mode 100644
index 0000000..bcc887f
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/AppActivityScopeModule.java
@@ -0,0 +1,41 @@
+package com.example.sqlbrite.todo.di;
+
+import android.arch.lifecycle.ViewModelProvider;
+import android.arch.lifecycle.ViewModelProviders;
+import android.support.v4.app.FragmentActivity;
+
+import com.example.sqlbrite.todo.controler.DemoShareViewModel;
+import com.example.sqlbrite.todo.controler.LoginFlowViewModel;
+import com.example.sqlbrite.todo.controler.MainViewModel;
+import com.example.sqlbrite.todo.controler.SystemSettingViewModel;
+
+import javax.inject.Named;
+
+import dagger.Module;
+import dagger.Provides;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/14 13:11
+ */
+
+@Module
+public class AppActivityScopeModule {
+    private final FragmentActivity mActivity;
+
+    public AppActivityScopeModule(FragmentActivity activity) {
+        mActivity = activity;
+    }
+
+    @Provides
+    @ActivityScope
+    FragmentActivity provideActivity() {
+        return mActivity;
+    }
+
+    @Provides
+    @ActivityScope
+    LoginFlowViewModel provideLoginFlowViewModel(FragmentActivity activity, @Named("AppScope") ViewModelProvider.Factory factory) {
+        return ViewModelProviders.of(activity, factory).get(LoginFlowViewModel.class);
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/AppFragmentScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/AppFragmentScopeComponent.java
new file mode 100644
index 0000000..c647683
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/AppFragmentScopeComponent.java
@@ -0,0 +1,12 @@
+package com.example.sqlbrite.todo.di;
+
+import dagger.Component;
+
+@FragmentScope
+@Component(modules = AppFragmentScopeModule.class, dependencies = AppActivityScopeComponent.class)
+public interface AppFragmentScopeComponent {
+
+    interface Injectable {
+        void inject(AppFragmentScopeComponent component);
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/AppFragmentScopeModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/AppFragmentScopeModule.java
new file mode 100644
index 0000000..f23d648
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/AppFragmentScopeModule.java
@@ -0,0 +1,39 @@
+package com.example.sqlbrite.todo.di;
+
+import android.arch.lifecycle.ViewModelProvider;
+import android.arch.lifecycle.ViewModelProviders;
+import android.support.v4.app.Fragment;
+
+import com.example.sqlbrite.todo.controler.LoginFlowViewModel;
+
+import javax.inject.Named;
+
+import dagger.Module;
+import dagger.Provides;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/14 13:11
+ */
+
+@Module
+public class AppFragmentScopeModule {
+    private final Fragment mFragment;
+
+    public AppFragmentScopeModule(Fragment fragment) {
+        mFragment = fragment;
+    }
+
+    @Provides
+    @FragmentScope
+    Fragment provideFragment() {
+        return mFragment;
+    }
+
+    @Provides
+    @FragmentScope
+    @Named("FragmentScope")
+    LoginFlowViewModel provideLoginFlowViewModel(Fragment fragment, ViewModelProvider.Factory factory) {
+        return ViewModelProviders.of(fragment, factory).get(LoginFlowViewModel.class);
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
index 6eaa6b5..cf6107c 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
@@ -16,17 +16,18 @@
 package com.example.sqlbrite.todo.di;
 
 import android.app.Application;
+import android.arch.lifecycle.ViewModelProvider;
 
 import com.example.sqlbrite.todo.TodoApp;
-import com.example.sqlbrite.todo.controler.LoginViewControler;
+import com.example.sqlbrite.todo.model.LoginFlowRepository;
 import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
 import com.example.sqlbrite.todo.model.local.preferences.AppPrefs;
 import com.example.sqlbrite.todo.model.users.LoginManager;
 import com.example.sqlbrite.todo.model.users.UserManager;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
-import com.example.sqlbrite.todo.ui.SplashActivity;
 import com.google.gson.Gson;
 
+import javax.inject.Named;
 import javax.inject.Singleton;
 
 import dagger.Component;
@@ -39,15 +40,10 @@
 
     SchedulerProvider schedulerProvider();
 
-    Gson gson();
-
-    /*Retrofit retrofit();
+    @Named("AppScope")
+    ViewModelProvider.Factory appScopeviewModelProviderFactory();
 
-    @Named("cached")
-    OkHttpClient okHttpClient();
-
-    @Named("non_cached")
-    OkHttpClient okHttpClientWithoutCache();*/
+    Gson gson();
 
     AppPrefs appPrefs();
 
@@ -57,9 +53,11 @@
 
     LoginManager loginManager();
 
-    LoginViewControler loginViewControler();
+    LoginFlowRepository loginFlowRepository();
 
     void inject(TodoApp app);
 
-    void inject(SplashActivity activity);
+    interface Injectable {
+        void inject(AppScopeComponent component);
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeModule.java
index 9b70f33..de88630 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeModule.java
@@ -16,10 +16,10 @@
 package com.example.sqlbrite.todo.di;
 
 import android.app.Application;
-import android.content.Context;
 
 import com.example.sqlbrite.todo.TodoApp;
-import com.example.sqlbrite.todo.controler.LoginViewControler;
+import com.example.sqlbrite.todo.model.LoginFlowRepository;
+import com.example.sqlbrite.todo.di.controler.AppScopeViewModelModule;
 import com.example.sqlbrite.todo.di.model.AppScopeModelModule;
 import com.example.sqlbrite.todo.di.schedulers.SchedulerModule;
 import com.example.sqlbrite.todo.model.local.preferences.AppPrefs;
@@ -34,7 +34,8 @@
 @Module(
         includes = {
                 SchedulerModule.class,
-                AppScopeModelModule.class
+                AppScopeModelModule.class,
+                AppScopeViewModelModule.class,
         }
 )
 public final class AppScopeModule {
@@ -51,11 +52,13 @@ Application provideApplication() {
         return mApplication;
     }
 
-    /*@Provides
+    /*
+    @Provides
     @Singleton
     public Context provideContext() {
         return mApplication;
-    }*/
+    }
+    */
 
     @Provides
     @Singleton
@@ -65,7 +68,8 @@ public Context provideContext() {
 
     @Provides
     @Singleton
-    public LoginViewControler provideLoginViewControler(UserManager userManager, AppPrefs appPrefs, SchedulerProvider schedulerProvider) {
-        return new LoginViewControler(userManager, appPrefs, schedulerProvider);
+    public LoginFlowRepository provideLoginFlowRepository(UserManager userManager, AppPrefs appPrefs, SchedulerProvider schedulerProvider) {
+        return new LoginFlowRepository(userManager, appPrefs, schedulerProvider);
     }
+
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/FragmentScopeModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/FragmentScopeModule.java
deleted file mode 100644
index 5010903..0000000
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/FragmentScopeModule.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.example.sqlbrite.todo.di;
-
-import android.support.v4.app.Fragment;
-
-import dagger.Module;
-import dagger.Provides;
-
-/**
- * @author Guang1234567
- * @date 2018/3/14 13:11
- */
-
-@Module
-public class FragmentScopeModule {
-    private final Fragment mFragment;
-
-    public FragmentScopeModule(Fragment fragment) {
-        mFragment = fragment;
-    }
-
-    @Provides
-    @FragmentScope
-    Fragment provideFragment() {
-        return mFragment;
-    }
-}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/InjectHelper.java b/sample/src/main/java/com/example/sqlbrite/todo/di/InjectHelper.java
index 310d2dc..af30076 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/InjectHelper.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/InjectHelper.java
@@ -1,15 +1,14 @@
 package com.example.sqlbrite.todo.di;
 
-import android.app.Activity;
 import android.app.Application;
 import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentActivity;
 
 import com.example.sqlbrite.todo.di.model.local.db.DbModule;
 import com.example.sqlbrite.todo.di.model.local.preferences.AppScopePreferencesModule;
 import com.example.sqlbrite.todo.di.model.local.preferences.UserScopePreferencesModule;
 import com.example.sqlbrite.todo.di.model.remote.NetModule;
 import com.example.sqlbrite.todo.di.model.remote.TodoApiModule;
-import com.example.sqlbrite.todo.ui.BaseViewModelActivity;
 
 /**
  * @author Guang1234567
@@ -54,19 +53,33 @@ public UserScopeComponent createUserScopeComponent(String userId) {
                 .build();
     }
 
-    public ActivityScopeComponent createActivityScopeComponent(Activity activity, UserScopeComponent userScopeComponent) {
-        return DaggerActivityScopeComponent.builder()
+    public UserActivityScopeComponent createUserActivityScopeComponent(FragmentActivity activity, UserScopeComponent userScopeComponent) {
+        return DaggerUserActivityScopeComponent.builder()
                 .userScopeComponent(userScopeComponent)
-                .activityScopeModule(new ActivityScopeModule(activity))
+                .userActivityScopeModule(new UserActivityScopeModule(activity))
                 .build();
     }
 
 
-    public FragmentScopeComponent createFragmentScopeComponent(BaseViewModelActivity activity, Fragment fragment) {
-        ActivityScopeComponent activityScopeComponent = activity.getActivityScopeComponent();
-        return DaggerFragmentScopeComponent.builder()
-                .activityScopeComponent(activityScopeComponent)
-                .fragmentScopeModule(new FragmentScopeModule(fragment))
+    public UserFragmentScopeComponent createUserFragmentScopeComponent(Fragment fragment, UserActivityScopeComponent activityScopeComponent) {
+        return DaggerUserFragmentScopeComponent.builder()
+                .userActivityScopeComponent(activityScopeComponent)
+                .userFragmentScopeModule(new UserFragmentScopeModule(fragment))
+                .build();
+    }
+
+    public AppActivityScopeComponent createAppActivityScopeComponent(FragmentActivity activity) {
+        return DaggerAppActivityScopeComponent.builder()
+                .appScopeComponent(getAppScopeComponent())
+                .appActivityScopeModule(new AppActivityScopeModule(activity))
+                .build();
+    }
+
+
+    public AppFragmentScopeComponent createAppFragmentScopeComponent(Fragment fragment, AppActivityScopeComponent activityScopeComponent) {
+        return DaggerAppFragmentScopeComponent.builder()
+                .appActivityScopeComponent(activityScopeComponent)
+                .appFragmentScopeModule(new AppFragmentScopeModule(fragment))
                 .build();
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/UserActivityScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/UserActivityScopeComponent.java
new file mode 100644
index 0000000..eedf760
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/UserActivityScopeComponent.java
@@ -0,0 +1,48 @@
+package com.example.sqlbrite.todo.di;
+
+import android.arch.lifecycle.ViewModelProvider;
+import android.support.v4.app.FragmentActivity;
+
+import com.example.sqlbrite.todo.controler.DemoShareViewModel;
+import com.example.sqlbrite.todo.controler.MainViewModel;
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
+import com.example.sqlbrite.todo.ui.MainActivity;
+import com.example.sqlbrite.todo.ui.SystemSettingActivity;
+
+import javax.inject.Named;
+
+import dagger.Component;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/14 13:10
+ */
+
+@ActivityScope
+@Component(
+        modules = UserActivityScopeModule.class,
+        dependencies = UserScopeComponent.class
+)
+public interface UserActivityScopeComponent {
+
+    FragmentActivity activity();
+
+    SchedulerProvider schedulerProvider();
+
+    ViewModelProvider.Factory userScopeviewModelProviderFactory();
+
+    @Named("AppScope")
+    ViewModelProvider.Factory appScopeviewModelProviderFactory();
+
+    MainViewModel mainViewModel();
+
+    DemoShareViewModel demoShareViewModel();
+
+    void inject(MainActivity activity);
+
+    void inject(SystemSettingActivity activity);
+
+    interface Injectable {
+        void inject(UserActivityScopeComponent component);
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/UserActivityScopeModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/UserActivityScopeModule.java
new file mode 100644
index 0000000..17d211b
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/UserActivityScopeModule.java
@@ -0,0 +1,59 @@
+package com.example.sqlbrite.todo.di;
+
+import android.arch.lifecycle.ViewModelProvider;
+import android.arch.lifecycle.ViewModelProviders;
+import android.support.v4.app.FragmentActivity;
+
+import com.example.sqlbrite.todo.controler.DemoShareViewModel;
+import com.example.sqlbrite.todo.controler.LoginFlowViewModel;
+import com.example.sqlbrite.todo.controler.MainViewModel;
+import com.example.sqlbrite.todo.controler.SystemSettingViewModel;
+
+import javax.inject.Named;
+
+import dagger.Module;
+import dagger.Provides;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/14 13:11
+ */
+
+@Module
+public class UserActivityScopeModule {
+    private final FragmentActivity mActivity;
+
+    public UserActivityScopeModule(FragmentActivity activity) {
+        mActivity = activity;
+    }
+
+    @Provides
+    @ActivityScope
+    FragmentActivity provideActivity() {
+        return mActivity;
+    }
+
+    @Provides
+    @ActivityScope
+    MainViewModel provideMainViewModel(FragmentActivity activity, ViewModelProvider.Factory factory) {
+        return ViewModelProviders.of(activity, factory).get(MainViewModel.class);
+    }
+
+    @Provides
+    @ActivityScope
+    DemoShareViewModel provideDemoShareViewModel(FragmentActivity activity, ViewModelProvider.Factory factory) {
+        return ViewModelProviders.of(activity, factory).get(DemoShareViewModel.class);
+    }
+
+    @Provides
+    @ActivityScope
+    SystemSettingViewModel provideSystemSettingViewModel(FragmentActivity activity, ViewModelProvider.Factory factory) {
+        return ViewModelProviders.of(activity, factory).get(SystemSettingViewModel.class);
+    }
+
+    @Provides
+    @ActivityScope
+    LoginFlowViewModel provideLoginFlowViewModel(FragmentActivity activity, @Named("AppScope") ViewModelProvider.Factory factory) {
+        return ViewModelProviders.of(activity, factory).get(LoginFlowViewModel.class);
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/FragmentScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/UserFragmentScopeComponent.java
similarity index 68%
rename from sample/src/main/java/com/example/sqlbrite/todo/di/FragmentScopeComponent.java
rename to sample/src/main/java/com/example/sqlbrite/todo/di/UserFragmentScopeComponent.java
index a823d55..eb6f6da 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/FragmentScopeComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/UserFragmentScopeComponent.java
@@ -1,9 +1,7 @@
 package com.example.sqlbrite.todo.di;
 
-import android.arch.lifecycle.ViewModelProvider;
 import android.support.v4.app.Fragment;
 
-import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.example.sqlbrite.todo.ui.ItemsFragment;
 import com.example.sqlbrite.todo.ui.ListsFragment;
 import com.example.sqlbrite.todo.ui.NewItemFragment;
@@ -12,8 +10,8 @@
 import dagger.Component;
 
 @FragmentScope
-@Component(modules = FragmentScopeModule.class, dependencies = ActivityScopeComponent.class)
-public interface FragmentScopeComponent {
+@Component(modules = UserFragmentScopeModule.class, dependencies = UserActivityScopeComponent.class)
+public interface UserFragmentScopeComponent {
 
     Fragment fragment();
 
@@ -24,4 +22,8 @@
     void inject(NewItemFragment fragment);
 
     void inject(NewListFragment fragment);
+
+    interface Injectable {
+        void inject(UserFragmentScopeComponent component);
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/UserFragmentScopeModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/UserFragmentScopeModule.java
new file mode 100644
index 0000000..77b6485
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/UserFragmentScopeModule.java
@@ -0,0 +1,39 @@
+package com.example.sqlbrite.todo.di;
+
+import android.arch.lifecycle.ViewModelProvider;
+import android.arch.lifecycle.ViewModelProviders;
+import android.support.v4.app.Fragment;
+
+import com.example.sqlbrite.todo.controler.MainViewModel;
+
+import javax.inject.Named;
+
+import dagger.Module;
+import dagger.Provides;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/14 13:11
+ */
+
+@Module
+public class UserFragmentScopeModule {
+    private final Fragment mFragment;
+
+    public UserFragmentScopeModule(Fragment fragment) {
+        mFragment = fragment;
+    }
+
+    @Provides
+    @FragmentScope
+    Fragment provideFragment() {
+        return mFragment;
+    }
+
+    @Provides
+    @FragmentScope
+    @Named("FragmentScope")
+    MainViewModel provideMainViewModel(Fragment fragment, ViewModelProvider.Factory factory) {
+        return ViewModelProviders.of(fragment, factory).get(MainViewModel.class);
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
index f86ee29..1062835 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
@@ -1,9 +1,13 @@
 package com.example.sqlbrite.todo.di;
 
+import android.arch.lifecycle.ViewModelProvider;
+
 import com.example.sqlbrite.todo.di.controler.UserScopeViewModelFactory;
 import com.example.sqlbrite.todo.model.local.preferences.UserPrefs;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 
+import javax.inject.Named;
+
 import dagger.Component;
 
 @UserScope
@@ -12,7 +16,10 @@
 
     SchedulerProvider schedulerProvider();
 
-    UserScopeViewModelFactory viewModelProviderFactory();
+    ViewModelProvider.Factory userScopeviewModelProviderFactory();
+
+    @Named("AppScope")
+    ViewModelProvider.Factory appScopeviewModelProviderFactory();
 
     UserPrefs userPrefs();
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/AppScopeViewModelFactory.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/AppScopeViewModelFactory.java
new file mode 100644
index 0000000..de79269
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/AppScopeViewModelFactory.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.example.sqlbrite.todo.di.controler;
+
+import android.arch.lifecycle.ViewModel;
+
+import java.util.Map;
+
+import javax.inject.Inject;
+import javax.inject.Provider;
+import javax.inject.Singleton;
+
+@Singleton
+public class AppScopeViewModelFactory extends ShareViewModelFactory {
+
+    @Inject
+    public AppScopeViewModelFactory(Map<Class<? extends ViewModel>, Provider<ViewModel>> creators) {
+        super(creators);
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/AppScopeViewModelModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/AppScopeViewModelModule.java
new file mode 100644
index 0000000..e3a1230
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/AppScopeViewModelModule.java
@@ -0,0 +1,25 @@
+package com.example.sqlbrite.todo.di.controler;
+
+import android.arch.lifecycle.ViewModel;
+import android.arch.lifecycle.ViewModelProvider;
+
+import com.example.sqlbrite.todo.controler.LoginFlowViewModel;
+
+import javax.inject.Named;
+
+import dagger.Binds;
+import dagger.Module;
+import dagger.multibindings.IntoMap;
+
+@Module
+public abstract class AppScopeViewModelModule {
+
+    @Binds
+    @IntoMap
+    @ViewModelKey(LoginFlowViewModel.class)
+    abstract ViewModel bindLoginFlowViewModel(LoginFlowViewModel viewModel);
+
+    @Named("AppScope")
+    @Binds
+    abstract ViewModelProvider.Factory bindViewModelFactory(AppScopeViewModelFactory factory);
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModel.java
index 4dee39e..89c4e25 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModel.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModel.java
@@ -28,6 +28,7 @@
     protected ShareViewModel() {
         mRefCounter = new AtomicInteger(0);
         mLifecycleProvider = new RxViewModelLifecycleProviderImpl();
+        mLifecycleProvider.onNext(ViewModelEvent.CREATE);
     }
 
     void setOnShareCreated(Runnable hook) {
@@ -58,12 +59,11 @@ protected void onShareCleared() {
     public final int incRefCount() {
         int counter = mRefCounter.incrementAndGet();
         if (counter == 1) {
-            onFirstRef();
             if (mOnShareCreated != null) {
                 mOnShareCreated.run();
                 mOnShareCreated = null;
             }
-            mLifecycleProvider.onNext(ViewModelEvent.CREATE);
+            onFirstRef();
         }
         return counter;
     }
@@ -71,15 +71,15 @@ public final int incRefCount() {
     public final int decRefCount() {
         int counter = mRefCounter.decrementAndGet();
         if (counter == 0) {
-            mLifecycleProvider.onNext(ViewModelEvent.DESTROY);
-            onShareCleared();
+            onLastRef();
             if (mOnShareCleared != null) {
                 mOnShareCleared.run();
                 mOnShareCleared = null;
             }
-            onLastRef();
+            onShareCleared();
+            mLifecycleProvider.onNext(ViewModelEvent.DESTROY);
         } else if (counter < 0) {
-            Log.e(TAG, "too many decRefCount() call!", new Exception());
+            Log.e(TAG, "Too many decRefCount() call!", new Exception());
 
             mRefCounter.set(0);
             mOnShareCleared = null;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory2.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModelFactory.java
similarity index 87%
rename from sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory2.java
rename to sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModelFactory.java
index 67e7f9d..fd193bf 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory2.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModelFactory.java
@@ -18,25 +18,23 @@
 
 import android.arch.lifecycle.ViewModel;
 import android.arch.lifecycle.ViewModelProvider;
+import android.arch.lifecycle.ViewModelProviders;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-
-import com.example.sqlbrite.todo.di.UserScope;
+import android.support.v4.app.FragmentActivity;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.inject.Inject;
 import javax.inject.Provider;
 
-@UserScope
-public class UserScopeViewModelFactory2 implements ViewModelProvider.Factory {
+public abstract class ShareViewModelFactory implements ViewModelProvider.Factory {
 
     private final Map<Class<? extends ViewModel>, Provider<ViewModel>> mCreators;
 
     private final Map<Class<? extends ShareViewModel>, ShareViewModel> mShareCache;
 
-    @Inject
-    public UserScopeViewModelFactory2(Map<Class<? extends ViewModel>, Provider<ViewModel>> creators) {
+    public ShareViewModelFactory(Map<Class<? extends ViewModel>, Provider<ViewModel>> creators) {
         mCreators = creators;
         mShareCache = new HashMap<>();
     }
@@ -103,6 +101,12 @@ public void run() {
         return shareVM;
     }
 
+    public final <VM extends ViewModel> VM provide(@NonNull FragmentActivity activity,
+                                                   @NonNull Class<VM> modelClass) {
+        VM result = ViewModelProviders.of(activity, this).get(modelClass);
+        return result;
+    }
+
     /*
     @SuppressWarnings("unchecked")
     @Override
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory.java
index 0b58e1e..eaec3ea 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory.java
@@ -17,132 +17,19 @@
 package com.example.sqlbrite.todo.di.controler;
 
 import android.arch.lifecycle.ViewModel;
-import android.arch.lifecycle.ViewModelProvider;
-import android.arch.lifecycle.ViewModelProviders;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.v4.app.FragmentActivity;
 
 import com.example.sqlbrite.todo.di.UserScope;
 
-import java.util.HashMap;
 import java.util.Map;
 
 import javax.inject.Inject;
 import javax.inject.Provider;
 
 @UserScope
-public class UserScopeViewModelFactory implements ViewModelProvider.Factory {
-
-    private final Map<Class<? extends ViewModel>, Provider<ViewModel>> mCreators;
-
-    private final Map<Class<? extends ShareViewModel>, ShareViewModel> mShareCache;
+public class UserScopeViewModelFactory extends ShareViewModelFactory {
 
     @Inject
     public UserScopeViewModelFactory(Map<Class<? extends ViewModel>, Provider<ViewModel>> creators) {
-        mCreators = creators;
-        mShareCache = new HashMap<>();
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public <T extends ViewModel> T create(Class<T> modelClass) {
-        Provider<? extends ViewModel> creator = mCreators.get(modelClass);
-        if (creator == null) {
-            for (Map.Entry<Class<? extends ViewModel>, Provider<ViewModel>> entry : mCreators.entrySet()) {
-                if (modelClass.isAssignableFrom(entry.getKey())) {
-                    creator = entry.getValue();
-                    break;
-                }
-            }
-        }
-
-        if (creator == null) {
-            throw new IllegalArgumentException("unknown model class " + modelClass);
-        }
-
-        if (ShareViewModel.class.isAssignableFrom(modelClass)) {
-            return (T) provideShareViewModel((Class<ShareViewModel>) modelClass, (Provider<ShareViewModel>) creator);
-        }
-
-        try {
-            return (T) creator.get();
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    @Nullable
-    private ViewModel provideShareViewModel(Class<? extends ShareViewModel> modelClass, Provider<? extends ShareViewModel> creator) {
-        ShareViewModel shareVM;
-        if (mShareCache.containsKey(modelClass)) {
-            shareVM = mShareCache.get(modelClass);
-        } else {
-            try {
-                shareVM = creator.get();
-            } catch (Exception e) {
-                throw new RuntimeException(e);
-            }
-            if (shareVM != null) {
-                final ShareViewModel tmp = shareVM;
-                shareVM.setOnShareCreated(new Runnable() {
-                    @Override
-                    public void run() {
-                        mShareCache.put(modelClass, tmp);
-                    }
-                });
-                shareVM.setOnShareCleared(new Runnable() {
-                    @Override
-                    public void run() {
-                        mShareCache.remove(modelClass);
-                    }
-                });
-            }
-        }
-        ViewModel vm = null;
-        if (shareVM != null) {
-            vm = new ViewModelSmartPointer(shareVM);
-        }
-        return vm;
-    }
-
-    public final <VM extends ViewModel> VM provide(@NonNull FragmentActivity activity,
-                                                   @NonNull Class<VM> modelClass) {
-
-        VM result = ViewModelProviders.of(activity, this).get(modelClass);
-        if (ShareViewModel.class.isAssignableFrom(modelClass)) {
-            ViewModelSmartPointer<ShareViewModel> sp = (ViewModelSmartPointer<ShareViewModel>) result;
-            result = (VM) sp.ref();
-        }
-        return result;
-    }
-
-    /**
-     * Smart pointer fro {@link ShareViewModel}
-     *
-     * @param <T>
-     */
-    private final static class ViewModelSmartPointer<T extends ShareViewModel> extends ViewModel {
-
-        private T mRef;
-
-        public ViewModelSmartPointer(T ref) {
-            if (ref == null) {
-                throw new RuntimeException("requireNonNull !");
-            }
-            ref.incRefCount();
-            mRef = ref;
-        }
-
-        @Override
-        protected final void onCleared() {
-            super.onCleared();
-            mRef.decRefCount();
-        }
-
-        @NonNull
-        public final T ref() {
-            return mRef;
-        }
+        super(creators);
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/DbMainRepository.java b/sample/src/main/java/com/example/sqlbrite/todo/model/DbMainRepository.java
index f52d839..047d231 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/DbMainRepository.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/DbMainRepository.java
@@ -44,14 +44,7 @@ public DbMainRepository(BriteDatabase briteDatabaseb, ListsItemDao listsItemDao,
     @Override
     public Observable<List<ListsItem>> createQueryListsItems(final long max) {
         return mListsItemDao
-                .createQueryListsItems(500)
-                .doOnNext(new Consumer<List<ListsItem>>() {
-                    @Override
-                    public void accept(List<ListsItem> listsItems) throws Exception {
-                        int i = 1;
-                    }
-                })
-                .take(max);
+                .createQueryListsItems(max);
     }
 
     @Override
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/LoginViewControler.java b/sample/src/main/java/com/example/sqlbrite/todo/model/LoginFlowRepository.java
similarity index 87%
rename from sample/src/main/java/com/example/sqlbrite/todo/controler/LoginViewControler.java
rename to sample/src/main/java/com/example/sqlbrite/todo/model/LoginFlowRepository.java
index 34bb187..45b07de 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/controler/LoginViewControler.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/LoginFlowRepository.java
@@ -1,5 +1,6 @@
-package com.example.sqlbrite.todo.controler;
+package com.example.sqlbrite.todo.model;
 
+import com.example.sqlbrite.todo.di.controler.ShareViewModel;
 import com.example.sqlbrite.todo.model.local.preferences.AppPrefs;
 import com.example.sqlbrite.todo.model.users.UserManager;
 import com.example.sqlbrite.todo.model.users.UserSession;
@@ -19,7 +20,7 @@
  * @date 2018/3/6 14:40
  */
 
-public class LoginViewControler {
+public class LoginFlowRepository {
 
     private final UserManager mUserManager;
     private final AppPrefs mAppPrefs;
@@ -28,9 +29,9 @@
     private UserSession mUserSession = null;
 
     @Inject
-    public LoginViewControler(UserManager userManager,
-                              AppPrefs appPrefs,
-                              SchedulerProvider schedulerProvider) {
+    public LoginFlowRepository(UserManager userManager,
+                               AppPrefs appPrefs,
+                               SchedulerProvider schedulerProvider) {
         mUserManager = userManager;
         mAppPrefs = appPrefs;
         mSchedulerProvider = schedulerProvider;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java b/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java
index 9c120dc..cc40e39 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java
@@ -1,17 +1,28 @@
 package com.example.sqlbrite.todo.model;
 
+import android.util.Log;
+
 import com.example.sqlbrite.todo.model.local.db.TodoItem;
 import com.example.sqlbrite.todo.ui.ListsItem;
+import com.jakewharton.rx.ReplayingShare;
 
 import java.io.File;
+import java.util.LinkedList;
 import java.util.List;
+import java.util.concurrent.Callable;
+import java.util.concurrent.TimeUnit;
 
 import javax.inject.Inject;
 
 import io.reactivex.Observable;
+import io.reactivex.ObservableConverter;
+import io.reactivex.ObservableSource;
+import io.reactivex.ObservableTransformer;
+import io.reactivex.Observer;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.functions.Action;
 import io.reactivex.functions.Consumer;
+import io.reactivex.functions.Function;
 
 /**
  * @author Guang1234567
@@ -20,51 +31,58 @@
 
 public class MainRepository implements MainDataSource {
 
-    private final DbMainRepository mDbMainRepository;
-
     private final MemoryMainRepository mMemoryMainRepository;
 
-    private final Observable mCreateQueryListsItems;
+    private final DbMainRepository mDbMainRepository;
+
+    private final Observable<List<ListsItem>> mListItems;
 
     @Inject
     public MainRepository(final DbMainRepository dbMainRepository, final MemoryMainRepository memoryMainRepository) {
-        mDbMainRepository = dbMainRepository;
         mMemoryMainRepository = memoryMainRepository;
+        mDbMainRepository = dbMainRepository;
 
-        mCreateQueryListsItems = dbMainRepository.createQueryListsItems(Long.MAX_VALUE)
-                .doOnNext(new Consumer<List<ListsItem>>() {
+        //mListItems = mDbMainRepository.createQueryListsItems(100).replay(1).refCount(); // as same as below line
+        //mListItems = mDbMainRepository.createQueryListsItems(100).compose(ReplayingShare.instance());
+        mListItems = mDbMainRepository.createQueryListsItems(100)
+                .doOnNext(mMemoryMainRepository.updateListsItems())
+                .share()
+                .compose(new ObservableTransformer<List<ListsItem>, List<ListsItem>>() {
                     @Override
-                    public void accept(List<ListsItem> listsItems) throws Exception {
-                        memoryMainRepository.refreshListsItemsCache(listsItems);
+                    public ObservableSource<List<ListsItem>> apply(Observable<List<ListsItem>> upstream) {
+                        return new Observable<List<ListsItem>>() {
+                            @Override
+                            protected void subscribeActual(Observer<? super List<ListsItem>> downstream) {
+                                upstream.subscribe(new Observer<List<ListsItem>>() {
+                                    @Override
+                                    public void onSubscribe(Disposable d) {
+                                        downstream.onSubscribe(d);
+                                    }
+
+                                    @Override
+                                    public void onNext(List<ListsItem> listsItems) {
+                                        downstream.onNext(listsItems);
+                                    }
+
+                                    @Override
+                                    public void onError(Throwable e) {
+                                        downstream.onError(e);
+                                    }
+
+                                    @Override
+                                    public void onComplete() {
+                                        downstream.onComplete();
+                                    }
+                                });
+                            }
+                        };
                     }
-                })
-                .share();
+                });
     }
 
     @Override
     public Observable<List<ListsItem>> createQueryListsItems(final long max) {
-        Observable<List<ListsItem>> memory = mMemoryMainRepository.createQueryListsItems(max);
-        final Disposable[] outterDisposable = new Disposable[1];
-        return memory
-                .doOnLifecycle(
-                        new Consumer<Disposable>() {
-                            @Override
-                            public void accept(Disposable disposable) throws Exception {
-                                if (!disposable.isDisposed()) {
-                                    outterDisposable[0] = mCreateQueryListsItems.subscribe();
-                                }
-                            }
-                        },
-                        new Action() {
-                            @Override
-                            public void run() throws Exception {
-                                if (outterDisposable[0] != null
-                                        && !outterDisposable[0].isDisposed()) {
-                                    outterDisposable[0].dispose();
-                                }
-                            }
-                        }
-                );
+        return mListItems;
     }
 
     @Override
@@ -75,18 +93,7 @@ public void run() throws Exception {
 
     @Override
     public Observable<List<TodoItem>> createQueryTodoItemsByListId(long listId) {
-        return mMemoryMainRepository.createQueryTodoItemsByListId(listId)
-                .switchIfEmpty(
-                        mDbMainRepository.createQueryTodoItemsByListId(listId)
-                                .doOnNext(new Consumer<List<TodoItem>>() {
-                                    @Override
-                                    public void accept(List<TodoItem> todoItems) throws Exception {
-                                        if (todoItems != null) {
-                                            mMemoryMainRepository.putTodoItemsCache(listId, todoItems);
-                                        }
-                                    }
-                                })
-                );
+        return mDbMainRepository.createQueryTodoItemsByListId(listId);
     }
 
     @Override
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/MemoryMainRepository.java b/sample/src/main/java/com/example/sqlbrite/todo/model/MemoryMainRepository.java
index f7b8843..6657efd 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/MemoryMainRepository.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/MemoryMainRepository.java
@@ -1,27 +1,19 @@
 package com.example.sqlbrite.todo.model;
 
-import android.support.v4.util.LruCache;
-
 import com.example.sqlbrite.todo.model.local.db.TodoItem;
 import com.example.sqlbrite.todo.ui.ListsItem;
+import com.jakewharton.rxrelay2.BehaviorRelay;
 
 import java.io.File;
-import java.io.IOException;
-import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ConcurrentHashMap;
 
 import javax.inject.Inject;
 
 import io.reactivex.Observable;
-import io.reactivex.ObservableEmitter;
-import io.reactivex.ObservableOnSubscribe;
 import io.reactivex.ObservableSource;
+import io.reactivex.functions.Consumer;
 import io.reactivex.functions.Function;
-import io.reactivex.subjects.PublishSubject;
 
 /**
  * @author Guang1234567
@@ -29,125 +21,48 @@
  */
 
 public class MemoryMainRepository implements MainDataSource {
-    private static final int DEFAULT_CACHE_SIZE = (10 /* MiB */ * 1024 * 1024);
-
-    private final Map<Long, ListsItem> mListsItemsCache;
-
-    private final PublishSubject<List<ListsItem>> mListsItemsCacheTrigger;
 
-    private final LruCache<Long, List<TodoItem>> mTodoItemsCache;
-
-    private final PublishSubject<List<ListsItem>> mTodoItemsCacheTrigger;
+    private final BehaviorRelay<List<ListsItem>> mListsItems;
 
     @Inject
     public MemoryMainRepository() {
-        mListsItemsCache = new ConcurrentHashMap<>(100);
-        mListsItemsCacheTrigger = PublishSubject.create();
-
-        mTodoItemsCache = new LruCache<>(DEFAULT_CACHE_SIZE);
-        mTodoItemsCacheTrigger = PublishSubject.create();
-    }
-
-    protected void refreshListsItemsCache(List<ListsItem> newData) {
-        mListsItemsCache.clear();
-        if (newData != null && !newData.isEmpty()) {
-            Iterator<ListsItem> it = newData.iterator();
-            while (it.hasNext()) {
-                ListsItem item = it.next();
-                if (item != null) {
-                    mListsItemsCache.put(Long.valueOf(item.id()), item);
-                }
-            }
-
-            if (mListsItemsCacheTrigger.hasObservers()) {
-                mListsItemsCacheTrigger.onNext(newData);
-            }
-        }
-    }
-
-    protected void putTodoItemsCache(long listId, List<TodoItem> newData) throws IOException {
-        mTodoItemsCache.put(Long.valueOf(listId), newData);
+        mListsItems = BehaviorRelay.create();
     }
 
-    private List<TodoItem> getTodoItemsCache(long listId) {
-        return mTodoItemsCache.get(Long.valueOf(listId));
+    public Consumer<List<ListsItem>> updateListsItems() {
+        return mListsItems;
     }
 
     @Override
-    public Observable<List<ListsItem>> createQueryListsItems(final long max) {
-        return mListsItemsCacheTrigger
-                .startWith(Observable.fromCallable(new Callable<List<ListsItem>>() {
-                    @Override
-                    public List<ListsItem> call() throws Exception {
-                        return new ArrayList<ListsItem>(mListsItemsCache.values())
-                                .subList(0, (int) Math.min(max, mListsItemsCache.size()));
-                    }
-                }));
+    public Observable<List<ListsItem>> createQueryListsItems(long max) {
+        return mListsItems.hide();
     }
 
     @Override
     public Observable<Integer> createQueryItemCount(long listId) {
-        return mListsItemsCacheTrigger
-                .flatMap(new Function<List<ListsItem>, ObservableSource<Integer>>() {
-                    @Override
-                    public ObservableSource<Integer> apply(List<ListsItem> newData) throws Exception {
-                        ListsItem item = mListsItemsCache.get(Long.valueOf(listId));
-                        if (item != null) {
-                            return Observable.just(item.itemCount());
-                        }
-                        return Observable.empty();
-                    }
-                })
-                .startWith(Observable.create(new ObservableOnSubscribe<Integer>() {
-                    @Override
-                    public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {
-                        ListsItem item = mListsItemsCache.get(Long.valueOf(listId));
-                        if (item != null) {
-                            emitter.onNext(item.itemCount());
-                        }
-                        emitter.onComplete();
+        return mListsItems.flatMap(new Function<List<ListsItem>, ObservableSource<Integer>>() {
+            @Override
+            public ObservableSource<Integer> apply(List<ListsItem> cache) throws Exception {
+                Iterator<ListsItem> it = cache.iterator();
+                while (it.hasNext()) {
+                    ListsItem listsItem = it.next();
+                    if (listsItem != null && listsItem.id() == listId) {
+                        return Observable.just(listsItem.itemCount());
                     }
-                }));
+                }
+                return Observable.empty();
+            }
+        });
     }
 
     @Override
     public Observable<List<TodoItem>> createQueryTodoItemsByListId(long listId) {
-        return Observable
-                .create(new ObservableOnSubscribe<List<TodoItem>>() {
-                    @Override
-                    public void subscribe(ObservableEmitter<List<TodoItem>> emitter) throws Exception {
-                        List<TodoItem> todoItems = getTodoItemsCache(listId);
-                        if (todoItems != null) {
-                            emitter.onNext(todoItems);
-                        }
-                        emitter.onComplete();
-                    }
-                });
+        return null;
     }
 
     @Override
     public Observable<String> createQueryListName(long listId) {
-        return mListsItemsCacheTrigger
-                .flatMap(new Function<List<ListsItem>, ObservableSource<String>>() {
-                    @Override
-                    public ObservableSource<String> apply(List<ListsItem> newData) throws Exception {
-                        ListsItem item = mListsItemsCache.get(Long.valueOf(listId));
-                        if (item != null) {
-                            return Observable.just(item.name());
-                        }
-                        return Observable.empty();
-                    }
-                })
-                .startWith(Observable.create(new ObservableOnSubscribe<String>() {
-                    @Override
-                    public void subscribe(ObservableEmitter<String> emitter) throws Exception {
-                        ListsItem item = mListsItemsCache.get(Long.valueOf(listId));
-                        if (item != null) {
-                            emitter.onNext(item.name());
-                        }
-                        emitter.onComplete();
-                    }
-                }));
+        return null;
     }
 
     @Override
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseAppViewModelActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseAppViewModelActivity.java
new file mode 100644
index 0000000..bdd9324
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseAppViewModelActivity.java
@@ -0,0 +1 @@
+package com.example.sqlbrite.todo.ui;import android.os.Bundle;import com.example.sqlbrite.todo.di.AppActivityScopeComponent;import com.example.sqlbrite.todo.di.InjectHelper;import com.example.sqlbrite.todo.schedulers.SchedulerProvider;import com.gg.rxbase.ui.RxBaseActivity;import javax.inject.Inject;/** * @author Guang1234567 * @date 2018/3/10 11:21 */public abstract class BaseAppViewModelActivity extends RxBaseActivity implements AppActivityScopeComponent.Injectable {    private AppActivityScopeComponent mActivityScopeComponent;    @Inject    SchedulerProvider mSchedulerProvider;    @SuppressWarnings("unchecked")    @Override    protected void onCreate(Bundle savedInstanceState) {        mActivityScopeComponent = InjectHelper.instance()                .createAppActivityScopeComponent(this);        inject(mActivityScopeComponent);        super.onCreate(savedInstanceState);    }    public AppActivityScopeComponent getActivityScopeComponent() {        return mActivityScopeComponent;    }    public SchedulerProvider getSchedulerProvider() {        return mSchedulerProvider;    }}
\ No newline at end of file
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseAppViewModelDialogFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseAppViewModelDialogFragment.java
new file mode 100644
index 0000000..1106b69
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseAppViewModelDialogFragment.java
@@ -0,0 +1 @@
+package com.example.sqlbrite.todo.ui;import android.content.Context;import android.os.Bundle;import android.support.annotation.Nullable;import android.view.LayoutInflater;import com.example.sqlbrite.todo.di.AppFragmentScopeComponent;import com.example.sqlbrite.todo.di.InjectHelper;import com.example.sqlbrite.todo.schedulers.SchedulerProvider;import com.trello.rxlifecycle2.components.support.RxAppCompatDialogFragment;import javax.inject.Inject;/** * @author Guang1234567 * @date 2018/3/9 10:03 */public abstract class BaseAppViewModelDialogFragment extends RxAppCompatDialogFragment implements AppFragmentScopeComponent.Injectable {    private AppFragmentScopeComponent mFragmentScopeComponent;    @Inject    SchedulerProvider mSchedulerProvider;    @Override    public void onAttach(Context context) {        super.onAttach(context);        if (!(getActivity() instanceof BaseAppViewModelActivity)) {            throw new IllegalStateException("Activity must extends " + BaseAppViewModelActivity.class);        }    }    @SuppressWarnings("unchecked")    @Override    public LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState) {        mFragmentScopeComponent = InjectHelper.instance().createAppFragmentScopeComponent(                this,                ((BaseAppViewModelActivity) getActivity()).getActivityScopeComponent());        inject(mFragmentScopeComponent);        return super.onGetLayoutInflater(savedInstanceState);    }    @Override    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);    }    public SchedulerProvider getSchedulerProvider() {        return mSchedulerProvider;    }}
\ No newline at end of file
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseAppViewModelFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseAppViewModelFragment.java
new file mode 100644
index 0000000..b43464b
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseAppViewModelFragment.java
@@ -0,0 +1 @@
+package com.example.sqlbrite.todo.ui;import android.content.Context;import android.os.Bundle;import android.support.annotation.Nullable;import com.example.sqlbrite.todo.di.AppFragmentScopeComponent;import com.example.sqlbrite.todo.di.InjectHelper;import com.example.sqlbrite.todo.schedulers.SchedulerProvider;import com.gg.rxbase.ui.RxBaseFragment;import javax.inject.Inject;/** * @author Guang1234567 * @date 2018/3/9 10:03 */public abstract class BaseAppViewModelFragment extends RxBaseFragment implements AppFragmentScopeComponent.Injectable {    private AppFragmentScopeComponent mFragmentScopeComponent;    @Inject    SchedulerProvider mSchedulerProvider;    @Override    public void onAttach(Context context) {        super.onAttach(context);        if (!(getActivity() instanceof BaseAppViewModelActivity)) {            throw new IllegalStateException("Activity must extends " + BaseAppViewModelActivity.class);        }    }    @SuppressWarnings("unchecked")    @Override    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        mFragmentScopeComponent = InjectHelper.instance().createAppFragmentScopeComponent(                this,                ((BaseAppViewModelActivity) getActivity()).getActivityScopeComponent());        inject(mFragmentScopeComponent);    }    public SchedulerProvider getSchedulerProvider() {        return mSchedulerProvider;    }}
\ No newline at end of file
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseUserViewModelActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseUserViewModelActivity.java
new file mode 100644
index 0000000..69a52e7
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseUserViewModelActivity.java
@@ -0,0 +1 @@
+package com.example.sqlbrite.todo.ui;import android.os.Bundle;import com.example.sqlbrite.todo.di.UserActivityScopeComponent;import com.example.sqlbrite.todo.di.InjectHelper;import com.example.sqlbrite.todo.model.users.UserSession;import com.example.sqlbrite.todo.schedulers.SchedulerProvider;import com.gg.rxbase.ui.RxBaseActivity;import javax.inject.Inject;/** * @author Guang1234567 * @date 2018/3/10 11:21 */public abstract class BaseUserViewModelActivity extends RxBaseActivity implements UserActivityScopeComponent.Injectable {    private UserActivityScopeComponent mActivityScopeComponent;    @Inject    SchedulerProvider mSchedulerProvider;    @SuppressWarnings("unchecked")    @Override    protected void onCreate(Bundle savedInstanceState) {        UserSession loginUs = InjectHelper.instance()                .getAppScopeComponent()                .loginFlowRepository()                .currentLoginUserSession()                .blockingFirst();        if (loginUs == null) {            throw new IllegalStateException("Must under login!");        }        mActivityScopeComponent = InjectHelper.instance()                .createUserActivityScopeComponent(this,                        loginUs.getUserScopeComponent());        inject(mActivityScopeComponent);        super.onCreate(savedInstanceState);    }    public UserActivityScopeComponent getActivityScopeComponent() {        return mActivityScopeComponent;    }    public SchedulerProvider getSchedulerProvider() {        return mSchedulerProvider;    }}
\ No newline at end of file
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseUserViewModelDialogFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseUserViewModelDialogFragment.java
new file mode 100644
index 0000000..6c7afa3
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseUserViewModelDialogFragment.java
@@ -0,0 +1 @@
+package com.example.sqlbrite.todo.ui;import android.content.Context;import android.os.Bundle;import android.support.annotation.Nullable;import android.view.LayoutInflater;import com.example.sqlbrite.todo.di.UserFragmentScopeComponent;import com.example.sqlbrite.todo.di.InjectHelper;import com.example.sqlbrite.todo.schedulers.SchedulerProvider;import com.trello.rxlifecycle2.components.support.RxAppCompatDialogFragment;import javax.inject.Inject;/** * @author Guang1234567 * @date 2018/3/9 10:03 */public abstract class BaseUserViewModelDialogFragment extends RxAppCompatDialogFragment implements UserFragmentScopeComponent.Injectable {    private UserFragmentScopeComponent mFragmentScopeComponent;    @Inject    SchedulerProvider mSchedulerProvider;    @Override    public void onAttach(Context context) {        super.onAttach(context);        if (!(getActivity() instanceof BaseUserViewModelActivity)) {            throw new IllegalStateException("Activity must extends " + BaseUserViewModelActivity.class);        }    }    @SuppressWarnings("unchecked")    @Override    public LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState) {        mFragmentScopeComponent = InjectHelper.instance().createUserFragmentScopeComponent(                this,                ((BaseUserViewModelActivity) getActivity()).getActivityScopeComponent());        inject(mFragmentScopeComponent);        return super.onGetLayoutInflater(savedInstanceState);    }    @Override    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);    }    public SchedulerProvider getSchedulerProvider() {        return mSchedulerProvider;    }}
\ No newline at end of file
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseUserViewModelFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseUserViewModelFragment.java
new file mode 100644
index 0000000..7f4812a
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseUserViewModelFragment.java
@@ -0,0 +1 @@
+package com.example.sqlbrite.todo.ui;import android.content.Context;import android.os.Bundle;import android.support.annotation.Nullable;import com.example.sqlbrite.todo.di.UserFragmentScopeComponent;import com.example.sqlbrite.todo.di.InjectHelper;import com.example.sqlbrite.todo.schedulers.SchedulerProvider;import com.gg.rxbase.ui.RxBaseFragment;import javax.inject.Inject;/** * @author Guang1234567 * @date 2018/3/9 10:03 */public abstract class BaseUserViewModelFragment extends RxBaseFragment implements UserFragmentScopeComponent.Injectable {    private UserFragmentScopeComponent mFragmentScopeComponent;    @Inject    SchedulerProvider mSchedulerProvider;    @Override    public void onAttach(Context context) {        super.onAttach(context);        if (!(getActivity() instanceof BaseUserViewModelActivity)) {            throw new IllegalStateException("Activity must extends " + BaseUserViewModelActivity.class);        }    }    @SuppressWarnings("unchecked")    @Override    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        mFragmentScopeComponent = InjectHelper.instance().createUserFragmentScopeComponent(                this,                ((BaseUserViewModelActivity) getActivity()).getActivityScopeComponent());        inject(mFragmentScopeComponent);    }    public SchedulerProvider getSchedulerProvider() {        return mSchedulerProvider;    }}
\ No newline at end of file
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java
deleted file mode 100644
index 602a659..0000000
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java
+++ /dev/null
@@ -1 +0,0 @@
-package com.example.sqlbrite.todo.ui;import android.arch.lifecycle.ViewModel;import android.os.Bundle;import com.example.sqlbrite.todo.di.ActivityScopeComponent;import com.example.sqlbrite.todo.di.InjectHelper;import com.example.sqlbrite.todo.di.controler.UserScopeViewModelFactory;import com.example.sqlbrite.todo.model.users.UserSession;import com.example.sqlbrite.todo.schedulers.SchedulerProvider;import com.gg.rxbase.ui.RxBaseActivity;import java.lang.reflect.ParameterizedType;import java.lang.reflect.Type;import javax.inject.Inject;/** * @author Guang1234567 * @date 2018/3/10 11:21 */public abstract class BaseViewModelActivity<VIEWMODEL extends ViewModel> extends RxBaseActivity {    private ActivityScopeComponent mActivityScopeComponent;    @Inject    SchedulerProvider mSchedulerProvider;    @Inject    UserScopeViewModelFactory mViewModelFactory;    private VIEWMODEL mViewModel;    @SuppressWarnings("unchecked")    @Override    protected void onCreate(Bundle savedInstanceState) {        UserSession loginUs = InjectHelper.instance()                .getAppScopeComponent()                .loginViewControler()                .currentLoginUserSession()                .blockingFirst();        if (loginUs == null) {            throw new IllegalStateException("Must under login!");        }        mActivityScopeComponent = InjectHelper.instance()                .createActivityScopeComponent(this,                        loginUs.getUserScopeComponent());        injectOnCreate(mActivityScopeComponent);        Class<VIEWMODEL> viewModelClazz;        Type genericSuperclass = this.getClass().getGenericSuperclass();        if (genericSuperclass instanceof ParameterizedType) {            Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass).getActualTypeArguments();            viewModelClazz = (Class<VIEWMODEL>) actualTypeArguments[0];        } else {            viewModelClazz = (Class<VIEWMODEL>) genericSuperclass;        }        mViewModel = mViewModelFactory.provide(this, viewModelClazz);        super.onCreate(savedInstanceState);    }    public ActivityScopeComponent getActivityScopeComponent() {        return mActivityScopeComponent;    }    protected abstract void injectOnCreate(ActivityScopeComponent component);    protected VIEWMODEL getViewModel() {        return mViewModel;    }    public SchedulerProvider getSchedulerProvider() {        return mSchedulerProvider;    }}
\ No newline at end of file
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelDialogFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelDialogFragment.java
deleted file mode 100644
index 84ae848..0000000
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelDialogFragment.java
+++ /dev/null
@@ -1 +0,0 @@
-package com.example.sqlbrite.todo.ui;import android.arch.lifecycle.ViewModel;import android.content.Context;import android.os.Bundle;import android.support.annotation.Nullable;import android.view.LayoutInflater;import com.example.sqlbrite.todo.di.FragmentScopeComponent;import com.example.sqlbrite.todo.di.InjectHelper;import com.example.sqlbrite.todo.di.controler.UserScopeViewModelFactory;import com.example.sqlbrite.todo.schedulers.SchedulerProvider;import com.trello.rxlifecycle2.components.support.RxAppCompatDialogFragment;import java.lang.reflect.ParameterizedType;import java.lang.reflect.Type;import javax.inject.Inject;/** * @author Guang1234567 * @date 2018/3/9 10:03 */public abstract class BaseViewModelDialogFragment<VIEWMODEL extends ViewModel> extends RxAppCompatDialogFragment {    private FragmentScopeComponent mFragmentScopeComponent;    @Inject    SchedulerProvider mSchedulerProvider;    @Inject    UserScopeViewModelFactory mViewModelFactory;    private VIEWMODEL mViewModel;    @Override    public void onAttach(Context context) {        super.onAttach(context);        if (!(getActivity() instanceof BaseViewModelActivity)) {            throw new IllegalStateException("Activity must extends " + BaseViewModelActivity.class);        }        mFragmentScopeComponent = InjectHelper.instance().createFragmentScopeComponent((BaseViewModelActivity) getActivity(), this);        injectOnAttach(mFragmentScopeComponent);    }    protected FragmentScopeComponent getFragmentScopeComponent() {        return mFragmentScopeComponent;    }    protected abstract void injectOnAttach(FragmentScopeComponent component);    @SuppressWarnings("unchecked")    @Override    public LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState) {        Class<VIEWMODEL> viewModelClazz;        Type genericSuperclass = this.getClass().getGenericSuperclass();        if (genericSuperclass instanceof ParameterizedType) {            Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass).getActualTypeArguments();            viewModelClazz = (Class<VIEWMODEL>) actualTypeArguments[0];        } else {            viewModelClazz = (Class<VIEWMODEL>) genericSuperclass;        }        mViewModel = mViewModelFactory.provide(getActivity(), viewModelClazz);        return super.onGetLayoutInflater(savedInstanceState);    }    protected VIEWMODEL getViewModel() {        return mViewModel;    }    public SchedulerProvider getSchedulerProvider() {        return mSchedulerProvider;    }}
\ No newline at end of file
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
deleted file mode 100644
index 8391f72..0000000
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
+++ /dev/null
@@ -1 +0,0 @@
-package com.example.sqlbrite.todo.ui;import android.arch.lifecycle.ViewModel;import android.content.Context;import android.os.Bundle;import android.support.annotation.Nullable;import com.example.sqlbrite.todo.di.FragmentScopeComponent;import com.example.sqlbrite.todo.di.InjectHelper;import com.example.sqlbrite.todo.di.controler.UserScopeViewModelFactory;import com.example.sqlbrite.todo.schedulers.SchedulerProvider;import com.gg.rxbase.ui.RxBaseFragment;import java.lang.reflect.ParameterizedType;import java.lang.reflect.Type;import javax.inject.Inject;/** * @author Guang1234567 * @date 2018/3/9 10:03 */public abstract class BaseViewModelFragment<VIEWMODEL extends ViewModel> extends RxBaseFragment {    private FragmentScopeComponent mFragmentScopeComponent;    @Inject    SchedulerProvider mSchedulerProvider;    @Inject    UserScopeViewModelFactory mViewModelFactory;    private VIEWMODEL mViewModel;    @Override    public void onAttach(Context context) {        super.onAttach(context);        if (!(getActivity() instanceof BaseViewModelActivity)) {            throw new IllegalStateException("Activity must extends " + BaseViewModelActivity.class);        }        mFragmentScopeComponent = InjectHelper.instance().createFragmentScopeComponent((BaseViewModelActivity) getActivity(), this);        injectOnAttach(mFragmentScopeComponent);    }    protected FragmentScopeComponent getFragmentScopeComponent() {        return mFragmentScopeComponent;    }    protected abstract void injectOnAttach(FragmentScopeComponent component);    @SuppressWarnings("unchecked")    @Override    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        Class<VIEWMODEL> viewModelClazz;        Type genericSuperclass = this.getClass().getGenericSuperclass();        if (genericSuperclass instanceof ParameterizedType) {            Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass).getActualTypeArguments();            viewModelClazz = (Class<VIEWMODEL>) actualTypeArguments[0];        } else {            viewModelClazz = (Class<VIEWMODEL>) genericSuperclass;        }        mViewModel = mViewModelFactory.provide(getActivity(), viewModelClazz);    }    protected VIEWMODEL getViewModel() {        return mViewModel;    }    public SchedulerProvider getSchedulerProvider() {        return mSchedulerProvider;    }}
\ No newline at end of file
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
index 0209072..359740e 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
@@ -30,7 +30,7 @@
 
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.controler.MainViewModel;
-import com.example.sqlbrite.todo.di.FragmentScopeComponent;
+import com.example.sqlbrite.todo.di.UserFragmentScopeComponent;
 import com.example.sqlbrite.todo.model.local.db.TodoItem;
 import com.jakewharton.rxbinding2.widget.AdapterViewItemClickEvent;
 import com.jakewharton.rxbinding2.widget.RxAdapterView;
@@ -38,15 +38,20 @@
 
 import java.util.List;
 
+import javax.inject.Inject;
+
 import butterknife.BindView;
 import butterknife.ButterKnife;
 import io.reactivex.Observable;
 import io.reactivex.functions.BiFunction;
 import io.reactivex.functions.Consumer;
 
-public final class ItemsFragment extends BaseViewModelFragment<MainViewModel> {
+public final class ItemsFragment extends BaseUserViewModelFragment {
     private static final String KEY_LIST_ID = "list_id";
 
+    @Inject
+    MainViewModel mMainViewModel;
+
     public interface Listener {
 
         void onNewItemClicked(long listId);
@@ -88,11 +93,10 @@ public void onAttach(Context context) {
         setHasOptionsMenu(true);
 
         listener = (Listener) activity;
-        adapter = new ItemsAdapter(context);
     }
 
     @Override
-    protected void injectOnAttach(FragmentScopeComponent component) {
+    public void inject(UserFragmentScopeComponent component) {
         component.inject(this);
     }
 
@@ -124,7 +128,13 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
 
         ButterKnife.bind(this, view);
         listView.setEmptyView(emptyView);
+        adapter = new ItemsAdapter(getContext());
         listView.setAdapter(adapter);
+    }
+
+    @Override
+    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
 
         RxAdapterView.itemClickEvents(listView)
                 .observeOn(getSchedulerProvider().io())
@@ -132,7 +142,7 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
                     @Override
                     public void accept(AdapterViewItemClickEvent event) {
                         boolean newValue = !adapter.getItem(event.position()).complete();
-                        getViewModel().complete(event.id(), newValue);
+                        mMainViewModel.complete(event.id(), newValue);
                     }
                 });
     }
@@ -144,8 +154,8 @@ public void onResume() {
 
         //disposables = new CompositeDisposable();
 
-        Observable<Integer> itemCount = getViewModel().createQueryItemCount(listId);
-        Observable<String> listName = getViewModel().createQueryListName(listId);
+        Observable<Integer> itemCount = mMainViewModel.getItemCount(listId);
+        Observable<String> listName = mMainViewModel.createQueryListName(listId);
 
         //disposables.add(
         Observable
@@ -167,14 +177,14 @@ public void accept(String title) throws Exception {
         ;
 
         //disposables.add(
-        getViewModel().createQueryTodoItemsByListId(listId)
+        mMainViewModel.createQueryTodoItemsByListId(listId)
                 .compose(this.<List<TodoItem>>bindUntilEvent(FragmentEvent.PAUSE))
                 .observeOn(getSchedulerProvider().ui())
                 .subscribe(adapter)
         //)
         ;
 
-        CharSequence content = "请切换成横屏!\nViewModel 仍是同一个!\n创建时间 : " + String.valueOf(getViewModel().getLastCreateTime());
+        CharSequence content = "请切换成横屏!\nViewModel 仍是同一个!\n创建时间 : " + String.valueOf(mMainViewModel.getLastCreateTime());
         Toast.makeText(getContext(),
                 content,
                 Toast.LENGTH_LONG)
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
index 5a298dc..8fa94ac 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
@@ -37,21 +37,37 @@
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.controler.DemoShareViewModel;
 import com.example.sqlbrite.todo.controler.MainViewModel;
-import com.example.sqlbrite.todo.di.FragmentScopeComponent;
+import com.example.sqlbrite.todo.di.UserFragmentScopeComponent;
 import com.trello.rxlifecycle2.android.FragmentEvent;
 
 import java.io.File;
 import java.util.List;
 
+import javax.inject.Inject;
+import javax.inject.Named;
+
 import butterknife.BindView;
 import butterknife.ButterKnife;
 import io.reactivex.functions.Consumer;
 import me.drakeet.multitype.ItemViewBinder;
 import me.drakeet.multitype.MultiTypeAdapter;
 
-public final class ListsFragment extends BaseViewModelFragment<MainViewModel> {
+public final class ListsFragment extends BaseUserViewModelFragment {
     private static final String TAG = "ListsFragment";
 
+    // 同一Activity内多个Fragment共享的ViewModel实例.
+    @Inject
+    MainViewModel mMainViewModel;
+
+    // 当前Fragment内部私有的ViewModel实例.
+    @Inject
+    @Named("FragmentScope")
+    MainViewModel mMainViewModelInFragmentScope;
+
+    // 多个Activity和多个Fragment都能共享的ViewModel实例 (类似单例, 但实际上是引用计数).
+    @Inject
+    DemoShareViewModel demoShareViewModel;
+
     interface Listener {
         void onListClicked(long id);
 
@@ -89,7 +105,7 @@ public void onAttach(Context context) {
     }
 
     @Override
-    protected void injectOnAttach(FragmentScopeComponent component) {
+    public void inject(UserFragmentScopeComponent component) {
         component.inject(this);
     }
 
@@ -135,12 +151,13 @@ public boolean onMenuItemClick(MenuItem item) {
                 .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
                     @Override
                     public boolean onMenuItemClick(MenuItem item) {
-                        getViewModel().createQueryListsItems() // 省内存
+                        mMainViewModel.getListsItems() // 省内存
                                 .compose(ListsFragment.this.<List<ListsItem>>bindUntilEvent(FragmentEvent.PAUSE))
                                 .observeOn(getSchedulerProvider().ui())
                                 .subscribe(new Consumer<List<ListsItem>>() {
                                     @Override
                                     public void accept(List<ListsItem> listsItems) throws Exception {
+                                        int i = 1;
                                     }
                                 });
                         return true;
@@ -152,7 +169,7 @@ public void accept(List<ListsItem> listsItems) throws Exception {
 
     private void exportDB() {
         try {
-            File dstFile = getViewModel().exportDecryption();
+            File dstFile = mMainViewModel.exportDecryption();
             Toast.makeText(getContext(), "导出数据库成功!\n" + dstFile.getPath(), Toast.LENGTH_SHORT).show();
         } catch (Exception e) {
             Log.e(TAG, "导出数据库失败!", e);
@@ -175,8 +192,6 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
         listView.addItemDecoration(new DividerItemDecoration(listView.getContext(), DividerItemDecoration.VERTICAL));
         //listView.setEmptyView(emptyView);
         listView.setAdapter(adapter);
-
-        DemoShareViewModel demoShareViewModel = mViewModelFactory.provide(getActivity(), DemoShareViewModel.class);
     }
 
     /*@OnItemClick(android.R.id.list)
@@ -203,7 +218,7 @@ public void onResume() {
 
 
         /*disposable = */
-        getViewModel().createQueryListsItems() // 省内存
+        mMainViewModel.getListsItems() // 省内存
                 .compose(this.<List<ListsItem>>bindUntilEvent(FragmentEvent.PAUSE))
                 .observeOn(getSchedulerProvider().ui())
                 .subscribe(new Consumer<List<ListsItem>>() {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
index 9e59218..b5a1411 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
@@ -23,21 +23,27 @@
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.controler.DemoShareViewModel;
 import com.example.sqlbrite.todo.controler.MainViewModel;
-import com.example.sqlbrite.todo.di.ActivityScopeComponent;
+import com.example.sqlbrite.todo.di.UserActivityScopeComponent;
 import com.example.sqlbrite.todo.model.users.UserSession;
 import com.google.gson.reflect.TypeToken;
 
 import java.util.List;
 
+import javax.inject.Inject;
+
 import io.reactivex.Observable;
 import io.reactivex.functions.Consumer;
 
-public final class MainActivity extends BaseViewModelActivity<MainViewModel>
+public final class MainActivity extends BaseUserViewModelActivity
         implements ListsFragment.Listener, ItemsFragment.Listener {
 
     private static final String TAG = "MainActivity";
 
-    private DemoShareViewModel mDemoShareViewModel;
+    @Inject
+    MainViewModel mMainViewModel;
+
+    @Inject
+    DemoShareViewModel mDemoShareViewModel;
 
     @Override
     protected void onCreate(final Bundle savedInstanceState) {
@@ -62,8 +68,6 @@ public void accept(Integer integer) throws Exception {
                 Log.e("lll", String.valueOf(integer));
             }
         });
-
-        mDemoShareViewModel = mViewModelFactory.provide(this, DemoShareViewModel.class);
     }
 
     @Override
@@ -72,7 +76,7 @@ protected void onResume() {
 
         // Obtain currrent login user to do sth.
         // No login no trigger
-        getViewModel().currentLoginUserSession()
+        mMainViewModel.currentLoginUserSession()
                 .compose(this.<UserSession>bindToLifecycle())
                 .observeOn(getSchedulerProvider().ui())
                 .subscribe(new Consumer<UserSession>() {
@@ -96,7 +100,7 @@ protected void onDestroy() {
     }
 
     @Override
-    protected void injectOnCreate(ActivityScopeComponent component) {
+    public void inject(UserActivityScopeComponent component) {
         component.inject(this);
     }
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
index 78f893d..3fcb77f 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
@@ -15,7 +15,6 @@
  */
 package com.example.sqlbrite.todo.ui;
 
-import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.content.Context;
@@ -28,18 +27,22 @@
 
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.controler.MainViewModel;
-import com.example.sqlbrite.todo.di.FragmentScopeComponent;
-import com.example.sqlbrite.todo.di.InjectHelper;
+import com.example.sqlbrite.todo.di.UserFragmentScopeComponent;
 import com.jakewharton.rxbinding2.widget.RxTextView;
 
+import javax.inject.Inject;
+
 import io.reactivex.Observable;
 import io.reactivex.functions.BiFunction;
 import io.reactivex.functions.Consumer;
 import io.reactivex.subjects.PublishSubject;
 
-public final class NewItemFragment extends BaseViewModelDialogFragment<MainViewModel> {
+public final class NewItemFragment extends BaseUserViewModelDialogFragment {
     private static final String KEY_LIST_ID = "list_id";
 
+    @Inject
+    MainViewModel mMainViewModel;
+
     public static NewItemFragment newInstance(long listId) {
         Bundle arguments = new Bundle();
         arguments.putLong(KEY_LIST_ID, listId);
@@ -56,7 +59,7 @@ private long getListId() {
     }
 
     @Override
-    protected void injectOnAttach(FragmentScopeComponent component) {
+    public void inject(UserFragmentScopeComponent component) {
         component.inject(this);
     }
 
@@ -79,7 +82,7 @@ public String apply(String ignored, CharSequence text) {
                 .subscribe(new Consumer<String>() {
                     @Override
                     public void accept(String description) {
-                        getViewModel().createNewOneTodoItem(getListId(), description);
+                        mMainViewModel.createNewOneTodoItem(getListId(), description);
                     }
                 });
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
index 98b1d9e..a074f88 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
@@ -27,24 +27,29 @@
 
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.controler.MainViewModel;
-import com.example.sqlbrite.todo.di.FragmentScopeComponent;
+import com.example.sqlbrite.todo.di.UserFragmentScopeComponent;
 import com.jakewharton.rxbinding2.widget.RxTextView;
 
+import javax.inject.Inject;
+
 import io.reactivex.Observable;
 import io.reactivex.functions.BiFunction;
 import io.reactivex.functions.Consumer;
 import io.reactivex.subjects.PublishSubject;
 
-public final class NewListFragment extends BaseViewModelDialogFragment<MainViewModel> {
+public final class NewListFragment extends BaseUserViewModelDialogFragment {
+
+    @Inject
+    MainViewModel mMainViewModel;
+
+    private final PublishSubject<String> createClicked = PublishSubject.create();
 
     public static NewListFragment newInstance() {
         return new NewListFragment();
     }
 
-    private final PublishSubject<String> createClicked = PublishSubject.create();
-
     @Override
-    protected void injectOnAttach(FragmentScopeComponent component) {
+    public void inject(UserFragmentScopeComponent component) {
         component.inject(this);
     }
 
@@ -67,7 +72,7 @@ public String apply(String ignored, CharSequence text) {
                 .subscribe(new Consumer<String>() {
                     @Override
                     public void accept(String name) {
-                        getViewModel().createNewOneTodoList(name);
+                        mMainViewModel.createNewOneTodoList(name);
                     }
                 });
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/SplashActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/SplashActivity.java
index a0d150a..5041c0b 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/SplashActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/SplashActivity.java
@@ -6,38 +6,31 @@
 import android.widget.Toast;
 
 import com.example.sqlbrite.todo.R;
-import com.example.sqlbrite.todo.controler.LoginViewControler;
-import com.example.sqlbrite.todo.di.AppScopeComponent;
-import com.example.sqlbrite.todo.di.InjectHelper;
+import com.example.sqlbrite.todo.controler.LoginFlowViewModel;
+import com.example.sqlbrite.todo.di.AppActivityScopeComponent;
 import com.example.sqlbrite.todo.model.users.UserSession;
-import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
-import com.gg.rxbase.ui.RxBaseActivity;
 
 import javax.inject.Inject;
 
 import io.reactivex.functions.Action;
 import io.reactivex.functions.Consumer;
 
-public class SplashActivity extends RxBaseActivity {
+public class SplashActivity extends BaseAppViewModelActivity{
 
     private static final String TAG = "SplashActivity";
 
     @Inject
-    LoginViewControler mViewModel;
-    @Inject SchedulerProvider mSchedulerProvider;
+    LoginFlowViewModel mLoginFlowViewModel;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_splash);
 
-        AppScopeComponent appScopeComponent = InjectHelper.instance().getAppScopeComponent();
-        appScopeComponent.inject(this);
-
-        mViewModel
+        mLoginFlowViewModel
                 .login("user_id_lucy", "pwd_1234567")
                 .compose(this.<UserSession>bindToLifecycle())
-                .observeOn(mSchedulerProvider.ui())
+                .observeOn(getSchedulerProvider().ui())
                 .doFinally(new Action() {
                     @Override
                     public void run() throws Exception {
@@ -63,7 +56,17 @@ public void accept(Throwable e) throws Exception {
 
     }
 
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+    }
+
     private void NaviToMain() {
         startActivity(new Intent(this, MainActivity.class));
     }
+
+    @Override
+    public void inject(AppActivityScopeComponent component) {
+        component.inject(this);
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/SystemSettingActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/SystemSettingActivity.java
index 1114f99..312035e 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/SystemSettingActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/SystemSettingActivity.java
@@ -10,22 +10,28 @@
 import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.DemoShareViewModel;
 import com.example.sqlbrite.todo.controler.SystemSettingViewModel;
-import com.example.sqlbrite.todo.di.ActivityScopeComponent;
+import com.example.sqlbrite.todo.di.UserActivityScopeComponent;
+
+import javax.inject.Inject;
 
 import butterknife.BindView;
 import butterknife.ButterKnife;
 import butterknife.OnClick;
 
-public class SystemSettingActivity extends BaseViewModelActivity<SystemSettingViewModel> {
+public class SystemSettingActivity extends BaseUserViewModelActivity {
 
     private static final String TAG = "SystemSettingActivity";
     @BindView(R.id.btn_logout)
     Button mBtnLogout;
 
-    private DemoShareViewModel mDemoShareViewModel;
+    @Inject
+    SystemSettingViewModel mSystemSettingViewModel;
+    
+    @Inject
+    DemoShareViewModel mDemoShareViewModel;
 
     @Override
-    protected void injectOnCreate(ActivityScopeComponent component) {
+    public void inject(UserActivityScopeComponent component) {
         component.inject(this);
     }
 
@@ -35,18 +41,15 @@ protected void onCreate(Bundle savedInstanceState) {
         setContentView(R.layout.activity_system_setting);
 
         ButterKnife.bind(this);
-
-        mDemoShareViewModel = mViewModelFactory.provide(this, DemoShareViewModel.class);
     }
 
     @OnClick(R.id.btn_logout)
     void listClicked(View v) {
-        getViewModel().logout()
+        mSystemSettingViewModel.logout()
                 .observeOn(getSchedulerProvider().ui())
                 .subscribe(
                         () -> {
                             Toast.makeText(SystemSettingActivity.this, "注销成功!", Toast.LENGTH_SHORT).show();
-
                             TodoApp.getApplication(this).exit();
                         },
 
