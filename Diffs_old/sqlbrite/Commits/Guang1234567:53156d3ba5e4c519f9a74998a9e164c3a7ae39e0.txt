diff --git a/sample/build.gradle b/sample/build.gradle
index 457cb50..20f83bc 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -19,7 +19,7 @@ dependencies {
     annotationProcessor rootProject.ext.autoValueParcel
 
     implementation project(':sqlbrite')
-    implementation project(':daosupport')
+    implementation project(':sqlbrite-support')
     implementation rootProject.ext.supportSqliteFramework
 
     //implementation project(':sqlbrite-sqlcipher-integration')
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java b/sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java
index 6d9ce55..82eda09 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java
@@ -19,6 +19,7 @@
 
 import com.example.sqlbrite.todo.controler.ViewModelModule;
 import com.example.sqlbrite.todo.db.DbModule;
+import com.example.sqlbrite.todo.schedulers.SchedulerModule;
 
 import javax.inject.Singleton;
 
@@ -28,6 +29,7 @@
 @Module(
         includes = {
                 DbModule.class,
+                SchedulerModule.class,
                 ViewModelModule.class
         }
 )
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
index c9bac04..bf898be 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
@@ -25,7 +25,6 @@
 
 public class MainViewModel extends ViewModel {
 
-    @Inject
     BriteDatabase mBriteDatabaseb;
 
     private final ListsItemDao mListsItemDao;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java b/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
index b6e815d..144f610 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
@@ -23,9 +23,12 @@
 import android.arch.persistence.db.sqlcipher.SqlcipherSQLiteOpenHelperFactory;
 import android.arch.persistence.db.wcdb.WcdbSQLiteOpenHelperFactory;
 
+import com.example.sqlbrite.todo.schedulers.SchedulerModule;
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.example.sqlbrite.todo.ui.ListsItemDao;
 import com.squareup.sqlbrite3.BriteDatabase;
 import com.squareup.sqlbrite3.SqlBrite;
+import com.squareup.sqlbrite3.support.BriteDatabaseProvider;
 
 import dagger.Module;
 import dagger.Provides;
@@ -52,8 +55,7 @@ public void log(String message) {
 
     @Provides
     @Singleton
-    BriteDatabase provideDatabase(SqlBrite sqlBrite, Application application) {
-
+    SupportSQLiteOpenHelper provideSupportSQLiteOpenHelper(Application application) {
         // 1) android native sqlite, no cipher
         /*
         Configuration configuration = Configuration.builder(application)
@@ -100,20 +102,27 @@ BriteDatabase provideDatabase(SqlBrite sqlBrite, Application application) {
 
 
         // 4) wcdb base on SQLCipher, has cipher
-        ///*
         Configuration configuration_wcdb_cipher = Configuration.builder(application)
                 .name("todo_wcdb_cipher.db")
                 .callback(new DbCallback())
                 .build();
 
         WcdbSQLiteOpenHelperFactory factory_wcdb_cipher = new WcdbSQLiteOpenHelperFactory();
-        SupportSQLiteOpenHelper helper_wcdb_cipher = factory_wcdb_cipher.create(configuration_wcdb_cipher, "Passsword_7654321");
+        return factory_wcdb_cipher.create(configuration_wcdb_cipher, "Passsword_7654321");
+    }
 
-        BriteDatabase db_wcdb_cipher = sqlBrite.wrapDatabaseHelper(helper_wcdb_cipher, Schedulers.io());
-        db_wcdb_cipher.setLoggingEnabled(true);
-        //*/
+    @Provides
+    @Singleton
+    BriteDatabase provideDatabase(SqlBrite sqlBrite, SupportSQLiteOpenHelper helper, SchedulerProvider schedulerProvider) {
+        BriteDatabase briteDatabase = sqlBrite.wrapDatabaseHelper(helper, schedulerProvider.database());
+        briteDatabase.setLoggingEnabled(true);
+        return briteDatabase;
+    }
 
-        return db_wcdb_cipher;
+    @Provides
+    @Singleton
+    BriteDatabaseProvider provideDatabaseProvider(SqlBrite sqlBrite, SupportSQLiteOpenHelper helper, SchedulerProvider schedulerProvider) {
+        return new BriteDatabaseProvider(sqlBrite, helper, schedulerProvider.database());
     }
 
     @Provides
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerModule.java b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerModule.java
new file mode 100644
index 0000000..257d7f2
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerModule.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.example.sqlbrite.todo.schedulers;
+
+import com.example.sqlbrite.todo.ui.ListsItemDao;
+import com.squareup.sqlbrite3.BriteDatabase;
+
+import javax.inject.Singleton;
+
+import dagger.Module;
+import dagger.Provides;
+
+@Module
+public final class SchedulerModule {
+
+    @Provides
+    @Singleton
+    SchedulerProvider provideSchedulerProvider() {
+        return new TodoSchedulerProvider();
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerProvider.java b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerProvider.java
new file mode 100644
index 0000000..6a9fe93
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerProvider.java
@@ -0,0 +1,26 @@
+package com.example.sqlbrite.todo.schedulers;
+
+import android.support.annotation.NonNull;
+
+import io.reactivex.Scheduler;
+
+/**
+ * Allow providing different types of {@link Scheduler}s.
+ */
+public interface SchedulerProvider {
+
+    @NonNull
+    Scheduler computation();
+
+    @NonNull
+    Scheduler io();
+
+    @NonNull
+    Scheduler ui();
+
+    @NonNull
+    Scheduler viewModel();
+
+    @NonNull
+    Scheduler database();
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/TodoSchedulerProvider.java b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/TodoSchedulerProvider.java
new file mode 100644
index 0000000..1f55a24
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/TodoSchedulerProvider.java
@@ -0,0 +1,44 @@
+package com.example.sqlbrite.todo.schedulers;
+
+import android.support.annotation.NonNull;
+
+import io.reactivex.Scheduler;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.schedulers.Schedulers;
+
+
+/**
+ * Provides different types of schedulers.
+ */
+public class TodoSchedulerProvider implements SchedulerProvider {
+
+    @Override
+    @NonNull
+    public Scheduler computation() {
+        return Schedulers.computation();
+    }
+
+    @Override
+    @NonNull
+    public Scheduler io() {
+        return Schedulers.io();
+    }
+
+    @Override
+    @NonNull
+    public Scheduler ui() {
+        return AndroidSchedulers.mainThread();
+    }
+
+    @NonNull
+    @Override
+    public Scheduler viewModel() {
+        return Schedulers.single();
+    }
+
+    @NonNull
+    @Override
+    public Scheduler database() {
+        return Schedulers.io();
+    }
+}
diff --git a/settings.gradle b/settings.gradle
index ab10c82..bece938 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,9 +1,11 @@
-include ':sqlbrite', ':daosupport'
+include ':sqlbrite'
 include ':sqlbrite-kotlin'
 include ':sqlbrite-lint'
 include ':sample'
 
 include ':sqlbrite-sqlcipher-integration'
 include ':sqlbrite-wcdb-integration'
+include ':sqlbrite-support'
+
 
 rootProject.name = 'sqlbrite-root'
diff --git a/daosupport/.gitignore b/sqlbrite-support/.gitignore
similarity index 100%
rename from daosupport/.gitignore
rename to sqlbrite-support/.gitignore
diff --git a/daosupport/build.gradle b/sqlbrite-support/build.gradle
similarity index 86%
rename from daosupport/build.gradle
rename to sqlbrite-support/build.gradle
index 466c2d5..d71fc02 100644
--- a/daosupport/build.gradle
+++ b/sqlbrite-support/build.gradle
@@ -37,11 +37,11 @@ android {
 
 ext {
     bintrayRepo = 'maven'
-    bintrayName = 'daosupport'
+    bintrayName = 'sqlbrite-support'
 
-    publishedGroupId = 'com.squareup.sqlbrite3.support.dao'
-    libraryName = 'daosupport'
-    artifact = 'daosupport'
+    publishedGroupId = 'com.squareup.sqlbrite3.support'
+    libraryName = 'sqlbrite-support'
+    artifact = 'sqlbrite-support'
 
     libraryDescription = 'A wrapper for Facebook Native Like Button (LikeView) on Android'
 
diff --git a/daosupport/proguard-rules.pro b/sqlbrite-support/proguard-rules.pro
similarity index 100%
rename from daosupport/proguard-rules.pro
rename to sqlbrite-support/proguard-rules.pro
diff --git a/daosupport/src/androidTest/java/android/arch/persistence/db/support/dao/ExampleInstrumentedTest.java b/sqlbrite-support/src/androidTest/java/android/arch/persistence/db/support/dao/ExampleInstrumentedTest.java
similarity index 100%
rename from daosupport/src/androidTest/java/android/arch/persistence/db/support/dao/ExampleInstrumentedTest.java
rename to sqlbrite-support/src/androidTest/java/android/arch/persistence/db/support/dao/ExampleInstrumentedTest.java
diff --git a/daosupport/src/main/AndroidManifest.xml b/sqlbrite-support/src/main/AndroidManifest.xml
similarity index 100%
rename from daosupport/src/main/AndroidManifest.xml
rename to sqlbrite-support/src/main/AndroidManifest.xml
diff --git a/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/BriteDatabaseProvider.java b/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/BriteDatabaseProvider.java
new file mode 100644
index 0000000..00e8720
--- /dev/null
+++ b/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/BriteDatabaseProvider.java
@@ -0,0 +1,84 @@
+package com.squareup.sqlbrite3.support;
+
+import android.arch.persistence.db.SupportSQLiteOpenHelper;
+import android.support.annotation.NonNull;
+
+import com.squareup.sqlbrite3.BriteDatabase;
+import com.squareup.sqlbrite3.SqlBrite;
+
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import io.reactivex.Observable;
+import io.reactivex.ObservableEmitter;
+import io.reactivex.ObservableOnSubscribe;
+import io.reactivex.Scheduler;
+import io.reactivex.disposables.Disposable;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/8 15:12
+ */
+class BriteDatabaseProvider {
+
+    private final SqlBrite mSqlBrite;
+    private final SupportSQLiteOpenHelper mHelper;
+    private final Scheduler mScheduler;
+
+    private AtomicInteger mDbRefCounter;
+    private BriteDatabase mDb;
+
+    public BriteDatabaseProvider(@NonNull SqlBrite sqlBrite,
+                                 @NonNull SupportSQLiteOpenHelper helper,
+                                 @NonNull Scheduler scheduler) {
+        mSqlBrite = sqlBrite;
+        mHelper = helper;
+        mScheduler = scheduler;
+
+        mDbRefCounter = new AtomicInteger(0);
+        mDb = null;
+    }
+
+    private synchronized BriteDatabase openBriteDatabase() {
+        if (mDbRefCounter.incrementAndGet() == 1) {
+            mDb = mSqlBrite.wrapDatabaseHelper(mHelper, mScheduler);
+        }
+        return mDb;
+    }
+
+    private synchronized void closeBriteDatabase() {
+        int counter = mDbRefCounter.decrementAndGet();
+        if (counter == 0) {
+            mDb.close();
+            mDb = null;
+        } else if (counter < 0) {
+            mDbRefCounter.set(0);
+        }
+    }
+
+    public Observable<BriteDatabase> get() {
+        return Observable.create(new ObservableOnSubscribe<BriteDatabase>() {
+            @Override
+            public void subscribe(ObservableEmitter<BriteDatabase> e) throws Exception {
+                e.setDisposable(new Disposable() {
+                    final AtomicBoolean mIsDispose = new AtomicBoolean(false);
+
+                    @Override
+                    public void dispose() {
+                        if (mIsDispose.compareAndSet(false, true)) {
+                            BriteDatabaseProvider.this.closeBriteDatabase();
+                        }
+                    }
+
+                    @Override
+                    public boolean isDisposed() {
+                        return mIsDispose.get();
+                    }
+                });
+
+                BriteDatabase briteDatabase = openBriteDatabase();
+                e.onNext(briteDatabase);
+            }
+        }).subscribeOn(mScheduler);
+    }
+}
diff --git a/daosupport/src/main/java/com/squareup/sqlbrite3/support/DbUtils.java b/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/DbUtils.java
similarity index 100%
rename from daosupport/src/main/java/com/squareup/sqlbrite3/support/DbUtils.java
rename to sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/DbUtils.java
diff --git a/daosupport/src/main/java/com/squareup/sqlbrite3/support/dao/BriteDaoSupport.java b/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/dao/BriteDaoSupport.java
similarity index 100%
rename from daosupport/src/main/java/com/squareup/sqlbrite3/support/dao/BriteDaoSupport.java
rename to sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/dao/BriteDaoSupport.java
diff --git a/daosupport/src/main/res/values/strings.xml b/sqlbrite-support/src/main/res/values/strings.xml
similarity index 100%
rename from daosupport/src/main/res/values/strings.xml
rename to sqlbrite-support/src/main/res/values/strings.xml
diff --git a/daosupport/src/test/java/android/arch/persistence/db/support/dao/ExampleUnitTest.java b/sqlbrite-support/src/test/java/android/arch/persistence/db/support/dao/ExampleUnitTest.java
similarity index 100%
rename from daosupport/src/test/java/android/arch/persistence/db/support/dao/ExampleUnitTest.java
rename to sqlbrite-support/src/test/java/android/arch/persistence/db/support/dao/ExampleUnitTest.java
