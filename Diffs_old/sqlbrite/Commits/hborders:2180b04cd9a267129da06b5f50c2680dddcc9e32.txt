diff --git a/build.gradle b/build.gradle
index a0bb673..889022d 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,8 +1,10 @@
 buildscript {
   ext.versions = [
       'minSdk': 14,
-      'compileSdk': 27,
-      'kotlin': '1.1.60',
+      'compileSdk': 29,
+      'kotlin': '1.3.50',
+      // latest as of now is 26.5.1, don't upgrade until rewriting BriteIssueRegistry
+      // because it has linter issues that stop the build
       'lint': '26.0.1'
   ]
 
@@ -13,7 +15,7 @@ buildscript {
   }
 
   dependencies {
-    classpath 'com.android.tools.build:gradle:3.0.1'
+    classpath 'com.android.tools.build:gradle:3.5.1'
     classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
   }
 }
@@ -31,12 +33,13 @@ allprojects {
 
 ext {
   // Android dependencies.
-  supportV4 = 'com.android.support:support-v4:27.0.0'
-  supportAnnotations = 'com.android.support:support-annotations:27.0.0'
-  supportTestRunner = 'com.android.support.test:runner:0.5'
+  supportV4 = 'com.android.support:support-v4:28.0.0'
+  supportAnnotations = 'com.android.support:support-annotations:28.0.0'
+  supportTestRunner = 'com.android.support.test:runner:1.0.2'
+  supportTestRules = 'com.android.support.test:rules:1.0.2'
 
-  supportSqlite = 'android.arch.persistence:db:1.0.0'
-  supportSqliteFramework = 'android.arch.persistence:db-framework:1.0.0'
+  supportSqlite = 'android.arch.persistence:db:1.1.1'
+  supportSqliteFramework = 'android.arch.persistence:db-framework:1.1.1'
 
   // Third-party dependencies.
   kotlinStdLib = "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index b6517bb..962a9c2 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,5 +1,6 @@
+#Sun Oct 20 22:44:17 CDT 2019
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.4-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-5.4.1-all.zip
diff --git a/sqlbrite/build.gradle b/sqlbrite/build.gradle
index ed4fb7d..d627afa 100644
--- a/sqlbrite/build.gradle
+++ b/sqlbrite/build.gradle
@@ -8,6 +8,7 @@ dependencies {
   androidTestImplementation rootProject.ext.supportTestRunner
   androidTestImplementation rootProject.ext.truth
   androidTestImplementation rootProject.ext.supportSqliteFramework
+  androidTestImplementation rootProject.ext.supportTestRules
 
   lintChecks project(':sqlbrite-lint')
 }
@@ -32,8 +33,11 @@ android {
   }
 
   // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
-  libraryVariants.all {
-    it.generateBuildConfig.enabled = false
+  libraryVariants.all { variant ->
+    // https://stackoverflow.com/a/52504256/9636
+    variant.generateBuildConfigProvider.configure {
+      it.enabled = false
+    }
   }
 }
 
diff --git a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/BriteContentResolverTest.java b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/BriteContentResolverTest.java
index 67619a8..df51ba5 100644
--- a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/BriteContentResolverTest.java
+++ b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/BriteContentResolverTest.java
@@ -15,28 +15,46 @@
  */
 package com.squareup.sqlbrite3;
 
+import android.content.ContentProvider;
 import android.content.ContentResolver;
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.database.MatrixCursor;
 import android.net.Uri;
-import android.test.ProviderTestCase2;
-import android.test.mock.MockContentProvider;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.test.rule.provider.ProviderTestRule;
+import android.support.test.runner.AndroidJUnit4;
+
 import com.squareup.sqlbrite3.SqlBrite.Query;
-import io.reactivex.Observable;
-import io.reactivex.ObservableSource;
-import io.reactivex.ObservableTransformer;
-import io.reactivex.subjects.PublishSubject;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
+
+import io.reactivex.Observable;
+import io.reactivex.ObservableSource;
+import io.reactivex.ObservableTransformer;
+import io.reactivex.subjects.PublishSubject;
 
 import static com.google.common.truth.Truth.assertThat;
 
-public final class BriteContentResolverTest
-    extends ProviderTestCase2<BriteContentResolverTest.TestContentProvider> {
-  private static final Uri AUTHORITY = Uri.parse("content://test_authority");
+public final class BriteContentResolverTest {
+
+  @NonNull private static final Uri AUTHORITY = Objects.requireNonNull(Uri.parse("content://test_authority"));
+
+  @Rule
+  public ProviderTestRule providerRule = new ProviderTestRule.Builder(
+          TestContentProvider.class, Objects.requireNonNull(AUTHORITY.getAuthority())
+  ).build();
+
   private static final Uri TABLE = AUTHORITY.buildUpon().appendPath("test_table").build();
   private static final String KEY = "test_key";
   private static final String VALUE = "test_value";
@@ -49,13 +67,8 @@
   private ContentResolver contentResolver;
   private BriteContentResolver db;
 
-  public BriteContentResolverTest() {
-    super(TestContentProvider.class, AUTHORITY.getAuthority());
-  }
-
-  @Override protected void setUp() throws Exception {
-    super.setUp();
-    contentResolver = getMockContentResolver();
+  @Before protected void setUp() {
+    contentResolver = providerRule.getResolver();
 
     SqlBrite.Logger logger = new SqlBrite.Logger() {
       @Override public void log(String message) {
@@ -69,11 +82,9 @@ public BriteContentResolverTest() {
           }
         };
     db = new BriteContentResolver(contentResolver, logger, scheduler, queryTransformer);
-
-    getProvider().init(getContext().getContentResolver());
   }
 
-  @Override public void tearDown() {
+  @After public void tearDown() {
     o.assertNoMoreEvents();
     o.dispose();
   }
@@ -164,7 +175,7 @@ private ContentValues values(String key, String value) {
     return result;
   }
 
-  public static final class TestContentProvider extends MockContentProvider {
+  public static final class TestContentProvider extends ContentProvider {
     private final Map<String, String> storage = new LinkedHashMap<>();
 
     private ContentResolver contentResolver;
@@ -173,30 +184,47 @@ void init(ContentResolver contentResolver) {
       this.contentResolver = contentResolver;
     }
 
-    @Override public Uri insert(Uri uri, ContentValues values) {
-      storage.put(values.getAsString(KEY), values.getAsString(VALUE));
-      contentResolver.notifyChange(uri, null);
-      return Uri.parse(AUTHORITY + "/" + values.getAsString(KEY));
+
+    @Override
+    public boolean onCreate() {
+      throw new UnsupportedOperationException("unimplemented mock method");
+    }
+
+    @Override
+    public String getType(@NonNull Uri uri) {
+      throw new UnsupportedOperationException("unimplemented mock method");
+    }
+
+    @Override public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {
+      if (values != null) {
+        storage.put(values.getAsString(KEY), values.getAsString(VALUE));
+        contentResolver.notifyChange(uri, null);
+        return Uri.parse(AUTHORITY + "/" + values.getAsString(KEY));
+      } else {
+        return AUTHORITY;
+      }
     }
 
-    @Override public int update(Uri uri, ContentValues values, String selection,
-        String[] selectionArgs) {
+    @Override public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection,
+        @Nullable String[] selectionArgs) {
       for (String key : storage.keySet()) {
-        storage.put(key, values.getAsString(VALUE));
+        if (values != null) {
+          storage.put(key, values.getAsString(VALUE));
+        }
       }
       contentResolver.notifyChange(uri, null);
       return storage.size();
     }
 
-    @Override public int delete(Uri uri, String selection, String[] selectionArgs) {
+    @Override public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {
       int result = storage.size();
       storage.clear();
       contentResolver.notifyChange(uri, null);
       return result;
     }
 
-    @Override public Cursor query(Uri uri, String[] projection, String selection,
-        String[] selectionArgs, String sortOrder) {
+    @Override public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection,
+        @Nullable String[] selectionArgs, @Nullable String sortOrder) {
       MatrixCursor result = new MatrixCursor(new String[] { KEY, VALUE });
       for (Map.Entry<String, String> entry : storage.entrySet()) {
         result.addRow(new Object[] { entry.getKey(), entry.getValue() });
diff --git a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/BriteDatabaseTest.java b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/BriteDatabaseTest.java
index 8353c04..a897a65 100644
--- a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/BriteDatabaseTest.java
+++ b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/BriteDatabaseTest.java
@@ -72,7 +72,6 @@
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.junit.Assert.fail;
 
-@RunWith(AndroidJUnit4.class) //
 public final class BriteDatabaseTest {
   private final TestDb testDb = new TestDb();
   private final List<String> logs = new ArrayList<>();
