diff --git a/CHANGELOG.md b/CHANGELOG.md
index fd58ead..5373d2c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,8 +1,17 @@
 Change Log
 =========
 
-Version 0.5.0 *(In Development)*
---------------------------------
+Version 0.5.1 *(2016-02-03)*
+----------------------------
+
+ * New: Query logs now contain timing information on how long they took to execute. This only covers
+   the time until a `Cursor` was made available, not object mapping or delivering to subscribers.
+ * Fix: Switch query logging to happen when `Query.run` is called, not when a query is triggered.
+ * Fix: Check for subscribing inside a transaction using a more accurate primitive.
+
+
+Version 0.5.0 *(2015-12-09)*
+----------------------------
 
  * New: Expose `mapToOne`, `mapToOneOrDefault`, and `mapToList` as static methods on `Query`. These
    mirror the behavior of the methods of the same name on `QueryObservable` but can be used later in
diff --git a/README.md b/README.md
index 493e685..dd1d9e0 100755
--- a/README.md
+++ b/README.md
@@ -144,7 +144,7 @@ Download
 --------
 
 ```groovy
-compile 'com.squareup.sqlbrite:sqlbrite:0.5.0'
+compile 'com.squareup.sqlbrite:sqlbrite:0.5.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
diff --git a/RELEASING.md b/RELEASING.md
index c86a089..591e3a8 100644
--- a/RELEASING.md
+++ b/RELEASING.md
@@ -5,9 +5,11 @@ Releasing
  2. Update the `CHANGELOG.md` for the impending release.
  3. Update the `README.md` with the new version.
  4. `git commit -am "Prepare for release X.Y.Z."` (where X.Y.Z is the new version)
- 5. `git tag -a X.Y.X -m "Version X.Y.Z"` (where X.Y.Z is the new version)
- 6. `./gradlew clean uploadArchives`
- 7. Update the `gradle.properties` to the next SNAPSHOT version.
- 8. `git commit -am "Prepare next development version."`
- 9. `git push && git push --tags`
- 10. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.
+ 5. `./gradlew clean uploadArchives`.
+ 6. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.
+ 7. `git tag -a X.Y.X -m "Version X.Y.Z"` (where X.Y.Z is the new version)
+ 8. Update the `gradle.properties` to the next SNAPSHOT version.
+ 9. `git commit -am "Prepare next development version."`
+ 10. `git push && git push --tags`
+
+If step 5 or 6 fails, drop the Sonatype repo, fix the problem, commit, and start again at step 5.
diff --git a/gradle.properties b/gradle.properties
index b34fa99..a4f792f 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.squareup.sqlbrite
-VERSION_NAME=0.5.1-SNAPSHOT
+VERSION_NAME=0.5.2-SNAPSHOT
 
 POM_DESCRIPTION=A lightweight wrapper around SQLiteOpenHelper which introduces reactive stream semantics to SQL operations.
 
diff --git a/sqlbrite-sample/build.gradle b/sample/build.gradle
similarity index 100%
rename from sqlbrite-sample/build.gradle
rename to sample/build.gradle
diff --git a/sqlbrite-sample/debug.keystore b/sample/debug.keystore
similarity index 100%
rename from sqlbrite-sample/debug.keystore
rename to sample/debug.keystore
diff --git a/sqlbrite-sample/src/main/AndroidManifest.xml b/sample/src/main/AndroidManifest.xml
similarity index 100%
rename from sqlbrite-sample/src/main/AndroidManifest.xml
rename to sample/src/main/AndroidManifest.xml
diff --git a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java b/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
similarity index 100%
rename from sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
rename to sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
diff --git a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java b/sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java
similarity index 100%
rename from sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java
rename to sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java
diff --git a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/db/Db.java b/sample/src/main/java/com/example/sqlbrite/todo/db/Db.java
similarity index 100%
rename from sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/db/Db.java
rename to sample/src/main/java/com/example/sqlbrite/todo/db/Db.java
diff --git a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java b/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
similarity index 93%
rename from sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
rename to sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
index c8a346f..0143fe0 100644
--- a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
@@ -39,6 +39,8 @@
   }
 
   @Provides @Singleton BriteDatabase provideDatabase(SqlBrite sqlBrite, SQLiteOpenHelper helper) {
-    return sqlBrite.wrapDatabaseHelper(helper);
+    BriteDatabase db = sqlBrite.wrapDatabaseHelper(helper);
+    db.setLoggingEnabled(true);
+    return db;
   }
 }
diff --git a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/db/DbOpenHelper.java b/sample/src/main/java/com/example/sqlbrite/todo/db/DbOpenHelper.java
similarity index 100%
rename from sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/db/DbOpenHelper.java
rename to sample/src/main/java/com/example/sqlbrite/todo/db/DbOpenHelper.java
diff --git a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/db/TodoItem.java b/sample/src/main/java/com/example/sqlbrite/todo/db/TodoItem.java
similarity index 100%
rename from sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/db/TodoItem.java
rename to sample/src/main/java/com/example/sqlbrite/todo/db/TodoItem.java
diff --git a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/db/TodoList.java b/sample/src/main/java/com/example/sqlbrite/todo/db/TodoList.java
similarity index 100%
rename from sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/db/TodoList.java
rename to sample/src/main/java/com/example/sqlbrite/todo/db/TodoList.java
diff --git a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsAdapter.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsAdapter.java
similarity index 100%
rename from sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsAdapter.java
rename to sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsAdapter.java
diff --git a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
similarity index 100%
rename from sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
rename to sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
diff --git a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/ListsAdapter.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsAdapter.java
similarity index 100%
rename from sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/ListsAdapter.java
rename to sample/src/main/java/com/example/sqlbrite/todo/ui/ListsAdapter.java
diff --git a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
similarity index 100%
rename from sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
rename to sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
diff --git a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
similarity index 100%
rename from sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
rename to sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
diff --git a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
similarity index 100%
rename from sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
rename to sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
diff --git a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
similarity index 100%
rename from sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
rename to sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
diff --git a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
similarity index 100%
rename from sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
rename to sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
diff --git a/sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/UiModule.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/UiModule.java
similarity index 100%
rename from sqlbrite-sample/src/main/java/com/example/sqlbrite/todo/ui/UiModule.java
rename to sample/src/main/java/com/example/sqlbrite/todo/ui/UiModule.java
diff --git a/sqlbrite-sample/src/main/res/anim/slide_in_left.xml b/sample/src/main/res/anim/slide_in_left.xml
similarity index 100%
rename from sqlbrite-sample/src/main/res/anim/slide_in_left.xml
rename to sample/src/main/res/anim/slide_in_left.xml
diff --git a/sqlbrite-sample/src/main/res/anim/slide_in_right.xml b/sample/src/main/res/anim/slide_in_right.xml
similarity index 100%
rename from sqlbrite-sample/src/main/res/anim/slide_in_right.xml
rename to sample/src/main/res/anim/slide_in_right.xml
diff --git a/sqlbrite-sample/src/main/res/anim/slide_out_left.xml b/sample/src/main/res/anim/slide_out_left.xml
similarity index 100%
rename from sqlbrite-sample/src/main/res/anim/slide_out_left.xml
rename to sample/src/main/res/anim/slide_out_left.xml
diff --git a/sqlbrite-sample/src/main/res/anim/slide_out_right.xml b/sample/src/main/res/anim/slide_out_right.xml
similarity index 100%
rename from sqlbrite-sample/src/main/res/anim/slide_out_right.xml
rename to sample/src/main/res/anim/slide_out_right.xml
diff --git a/sqlbrite-sample/src/main/res/drawable-hdpi/ic_launcher.png b/sample/src/main/res/drawable-hdpi/ic_launcher.png
similarity index 100%
rename from sqlbrite-sample/src/main/res/drawable-hdpi/ic_launcher.png
rename to sample/src/main/res/drawable-hdpi/ic_launcher.png
diff --git a/sqlbrite-sample/src/main/res/drawable-xhdpi/ic_launcher.png b/sample/src/main/res/drawable-xhdpi/ic_launcher.png
similarity index 100%
rename from sqlbrite-sample/src/main/res/drawable-xhdpi/ic_launcher.png
rename to sample/src/main/res/drawable-xhdpi/ic_launcher.png
diff --git a/sqlbrite-sample/src/main/res/drawable-xxhdpi/ic_launcher.png b/sample/src/main/res/drawable-xxhdpi/ic_launcher.png
similarity index 100%
rename from sqlbrite-sample/src/main/res/drawable-xxhdpi/ic_launcher.png
rename to sample/src/main/res/drawable-xxhdpi/ic_launcher.png
diff --git a/sqlbrite-sample/src/main/res/drawable-xxxhdpi/ic_launcher.png b/sample/src/main/res/drawable-xxxhdpi/ic_launcher.png
similarity index 100%
rename from sqlbrite-sample/src/main/res/drawable-xxxhdpi/ic_launcher.png
rename to sample/src/main/res/drawable-xxxhdpi/ic_launcher.png
diff --git a/sqlbrite-sample/src/main/res/layout/items.xml b/sample/src/main/res/layout/items.xml
similarity index 100%
rename from sqlbrite-sample/src/main/res/layout/items.xml
rename to sample/src/main/res/layout/items.xml
diff --git a/sqlbrite-sample/src/main/res/layout/lists.xml b/sample/src/main/res/layout/lists.xml
similarity index 100%
rename from sqlbrite-sample/src/main/res/layout/lists.xml
rename to sample/src/main/res/layout/lists.xml
diff --git a/sqlbrite-sample/src/main/res/layout/new_item.xml b/sample/src/main/res/layout/new_item.xml
similarity index 100%
rename from sqlbrite-sample/src/main/res/layout/new_item.xml
rename to sample/src/main/res/layout/new_item.xml
diff --git a/sqlbrite-sample/src/main/res/layout/new_list.xml b/sample/src/main/res/layout/new_list.xml
similarity index 100%
rename from sqlbrite-sample/src/main/res/layout/new_list.xml
rename to sample/src/main/res/layout/new_list.xml
diff --git a/sqlbrite-sample/src/main/res/values/strings.xml b/sample/src/main/res/values/strings.xml
similarity index 100%
rename from sqlbrite-sample/src/main/res/values/strings.xml
rename to sample/src/main/res/values/strings.xml
diff --git a/settings.gradle b/settings.gradle
index 1ba2cf3..4254ba9 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,4 +1,4 @@
 include ':sqlbrite'
-include ':sqlbrite-sample'
+include ':sample'
 
 rootProject.name = 'sqlbrite-root'
diff --git a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BlockingRecordingObserver.java b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BlockingRecordingObserver.java
new file mode 100644
index 0000000..5569489
--- /dev/null
+++ b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BlockingRecordingObserver.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2016 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.squareup.sqlbrite;
+
+import static com.google.common.truth.Truth.assertThat;
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+final class BlockingRecordingObserver extends RecordingObserver {
+  protected Object takeEvent() {
+    try {
+      Object item = events.pollFirst(1, SECONDS);
+      if (item == null) {
+        throw new AssertionError("No items.");
+      }
+      return item;
+    } catch (InterruptedException e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  @Override public void assertNoMoreEvents() {
+    try {
+      assertThat(events.pollFirst(1, SECONDS)).isNull();
+    } catch (InterruptedException e) {
+      throw new RuntimeException(e);
+    }
+  }
+}
diff --git a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BriteContentResolverTest.java b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BriteContentResolverTest.java
index f7826a9..b8817c1 100644
--- a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BriteContentResolverTest.java
+++ b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BriteContentResolverTest.java
@@ -39,7 +39,7 @@
   private static final String VALUE = "test_value";
 
   private final List<String> logs = new ArrayList<>();
-  private final RecordingObserver o = new RecordingObserver();
+  private final RecordingObserver o = new BlockingRecordingObserver();
 
   private ContentResolver contentResolver;
   private BriteContentResolver db;
diff --git a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BriteDatabaseTest.java b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BriteDatabaseTest.java
index cf09800..bd8f84f 100644
--- a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BriteDatabaseTest.java
+++ b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BriteDatabaseTest.java
@@ -22,7 +22,6 @@
 import android.database.sqlite.SQLiteException;
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
-import com.google.common.collect.Range;
 import com.squareup.sqlbrite.BriteDatabase.Transaction;
 import com.squareup.sqlbrite.TestDb.Employee;
 import java.io.Closeable;
@@ -31,7 +30,6 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -164,44 +162,6 @@
         .isExhausted();
   }
 
-  @Test public void queryObservesInsertDebounced() {
-    db.createQuery(TABLE_EMPLOYEE, SELECT_EMPLOYEES)
-        .debounce(500, MILLISECONDS)
-        .subscribe(o);
-    o.assertCursor()
-        .hasRow("alice", "Alice Allison")
-        .hasRow("bob", "Bob Bobberson")
-        .hasRow("eve", "Eve Evenson")
-        .isExhausted();
-
-    long startNs = System.nanoTime();
-
-    // Shotgun 10 inserts which will cause 10 triggers. DO NOT DO THIS IRL! Use a transaction!
-    for (int i = 0; i < 10; i++) {
-      db.insert(TABLE_EMPLOYEE, employee("john" + i, "John Johnson " + i));
-    }
-
-    // Only one trigger should have been observed.
-    o.assertCursor()
-        .hasRow("alice", "Alice Allison")
-        .hasRow("bob", "Bob Bobberson")
-        .hasRow("eve", "Eve Evenson")
-        .hasRow("john0", "John Johnson 0")
-        .hasRow("john1", "John Johnson 1")
-        .hasRow("john2", "John Johnson 2")
-        .hasRow("john3", "John Johnson 3")
-        .hasRow("john4", "John Johnson 4")
-        .hasRow("john5", "John Johnson 5")
-        .hasRow("john6", "John Johnson 6")
-        .hasRow("john7", "John Johnson 7")
-        .hasRow("john8", "John Johnson 8")
-        .hasRow("john9", "John Johnson 9")
-        .isExhausted();
-
-    long tookNs = System.nanoTime() - startNs;
-    assertThat(TimeUnit.NANOSECONDS.toMillis(tookNs)).isIn(Range.atLeast(500L));
-  }
-
   @Test public void queryNotNotifiedWhenInsertFails() {
     db.createQuery(TABLE_EMPLOYEE, SELECT_EMPLOYEES).subscribe(o);
     o.assertCursor()
@@ -546,6 +506,16 @@
     o.assertErrorContains("Cannot subscribe to observable query in a transaction.");
   }
 
+  @Test public void querySubscribedToDuringTransactionThrowsWithBackpressure() {
+    o.doRequest(0);
+
+    Observable<Query> query = db.createQuery(TABLE_EMPLOYEE, SELECT_EMPLOYEES);
+
+    db.newTransaction();
+    query.subscribe(o);
+    o.assertErrorContains("Cannot subscribe to observable query in a transaction.");
+  }
+
   @Test public void callingEndMultipleTimesThrows() {
     Transaction transaction = db.newTransaction();
     transaction.end();
diff --git a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/RecordingObserver.java b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/RecordingObserver.java
index e670477..94b3648 100644
--- a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/RecordingObserver.java
+++ b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/RecordingObserver.java
@@ -23,63 +23,54 @@
 
 import static com.google.common.truth.Truth.assertThat;
 import static com.squareup.sqlbrite.SqlBrite.Query;
-import static java.util.concurrent.TimeUnit.SECONDS;
 
-final class RecordingObserver extends Subscriber<Query> {
+class RecordingObserver extends Subscriber<Query> {
   private static final Object COMPLETED = "<completed>";
   private static final String TAG = RecordingObserver.class.getSimpleName();
 
-  private final BlockingDeque<Object> events = new LinkedBlockingDeque<>();
+  final BlockingDeque<Object> events = new LinkedBlockingDeque<>();
 
-  @Override public void onCompleted() {
+  @Override public final void onCompleted() {
     Log.d(TAG, "onCompleted");
     events.add(COMPLETED);
   }
 
-  @Override public void onError(Throwable e) {
+  @Override public final void onError(Throwable e) {
     Log.d(TAG, "onError " + e.getClass().getSimpleName() + " " + e.getMessage());
     events.add(e);
   }
 
-  @Override public void onNext(Query value) {
+  @Override public final void onNext(Query value) {
     Log.d(TAG, "onNext " + value);
     events.add(value.run());
   }
 
-  public void doRequest(long amount) {
+  public final void doRequest(long amount) {
     request(amount);
   }
 
-  private Object takeEvent() {
-    try {
-      Object item = events.pollFirst(1, SECONDS);
-      if (item == null) {
-        throw new AssertionError("Timeout expired waiting for item.");
-      }
-      return item;
-    } catch (InterruptedException e) {
-      throw new RuntimeException(e);
+  protected Object takeEvent() {
+    Object item = events.removeFirst();
+    if (item == null) {
+      throw new AssertionError("No items.");
     }
+    return item;
   }
 
-  public CursorAssert assertCursor() {
+  public final CursorAssert assertCursor() {
     Object event = takeEvent();
     assertThat(event).isInstanceOf(Cursor.class);
     return new CursorAssert((Cursor) event);
   }
 
-  public void assertErrorContains(String expected) {
+  public final void assertErrorContains(String expected) {
     Object event = takeEvent();
     assertThat(event).isInstanceOf(Throwable.class);
     assertThat(((Throwable) event).getMessage()).contains(expected);
   }
 
   public void assertNoMoreEvents() {
-    try {
-      assertThat(events.pollFirst(1, SECONDS)).isNull();
-    } catch (InterruptedException e) {
-      throw new RuntimeException(e);
-    }
+    assertThat(events).isEmpty();
   }
 
   static final class CursorAssert {
diff --git a/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteContentResolver.java b/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteContentResolver.java
index d407d03..157297d 100644
--- a/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteContentResolver.java
+++ b/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteContentResolver.java
@@ -33,6 +33,8 @@
 
 import static com.squareup.sqlbrite.SqlBrite.Logger;
 import static com.squareup.sqlbrite.SqlBrite.Query;
+import static java.lang.System.nanoTime;
+import static java.util.concurrent.TimeUnit.NANOSECONDS;
 
 /**
  * A lightweight wrapper around {@link ContentResolver} which allows for continuously observing
@@ -80,19 +82,24 @@ public QueryObservable createQuery(@NonNull final Uri uri, @Nullable final Strin
       final String sortOrder, final boolean notifyForDescendents) {
     final Query query = new Query() {
       @Override public Cursor run() {
-        return contentResolver.query(uri, projection, selection, selectionArgs, sortOrder);
+        long startNanos = nanoTime();
+        Cursor cursor = contentResolver.query(uri, projection, selection, selectionArgs, sortOrder);
+        long tookMillis = NANOSECONDS.toMillis(nanoTime() - startNanos);
+
+        if (logging) {
+          log("QUERY (%sms)\n  uri: %s\n  projection: %s\n  selection: %s\n  selectionArgs: %s\n  "
+                  + "sortOrder: %s\n  notifyForDescendents: %s", tookMillis, uri,
+              Arrays.toString(projection), selection, Arrays.toString(selectionArgs), sortOrder,
+              notifyForDescendents);
+        }
+
+        return cursor;
       }
     };
     OnSubscribe<Query> subscribe = new OnSubscribe<Query>() {
       @Override public void call(final Subscriber<? super Query> subscriber) {
         final ContentObserver observer = new ContentObserver(contentObserverHandler) {
           @Override public void onChange(boolean selfChange) {
-            if (logging) {
-              log("QUERY\n  uri: %s\n  projection: %s\n  selection: %s\n  selectionArgs: %s\n  "
-                      + "sortOrder: %s\n  notifyForDescendents: %s", uri,
-                  Arrays.toString(projection), selection, Arrays.toString(selectionArgs), sortOrder,
-                  notifyForDescendents);
-            }
             subscriber.onNext(query);
           }
         };
diff --git a/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteDatabase.java b/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteDatabase.java
index afd4c10..30edc38 100644
--- a/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteDatabase.java
+++ b/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteDatabase.java
@@ -33,6 +33,7 @@
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
 import rx.Observable;
+import rx.functions.Action0;
 import rx.functions.Func1;
 import rx.subjects.PublishSubject;
 
@@ -42,15 +43,15 @@
 import static android.database.sqlite.SQLiteDatabase.CONFLICT_NONE;
 import static android.database.sqlite.SQLiteDatabase.CONFLICT_REPLACE;
 import static android.database.sqlite.SQLiteDatabase.CONFLICT_ROLLBACK;
+import static java.lang.System.nanoTime;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
+import static java.util.concurrent.TimeUnit.NANOSECONDS;
 
 /**
  * A lightweight wrapper around {@link SQLiteOpenHelper} which allows for continuously observing
  * the result of a query. Create using a {@link SqlBrite} instance.
  */
 public final class BriteDatabase implements Closeable {
-  private static final Set<String> INITIAL_TRIGGER = Collections.singleton("<initial>");
-
   private final SQLiteOpenHelper helper;
   private final SqlBrite.Logger logger;
 
@@ -284,7 +285,17 @@ private QueryObservable createQuery(final Func1<Set<String>, Boolean> tableFilte
         if (transactions.get() != null) {
           throw new IllegalStateException("Cannot execute observable query in a transaction.");
         }
-        return getReadableDatabase().rawQuery(sql, args);
+
+        long startNanos = nanoTime();
+        Cursor cursor = getReadableDatabase().rawQuery(sql, args);
+        long tookMillis = NANOSECONDS.toMillis(nanoTime() - startNanos);
+
+        if (logging) {
+          log("QUERY (%sms)\n  tables: %s\n  sql: %s\n  args: %s", tookMillis, tableFilter, sql,
+              Arrays.toString(args));
+        }
+
+        return cursor;
       }
 
       @Override public String toString() {
@@ -294,21 +305,21 @@ private QueryObservable createQuery(final Func1<Set<String>, Boolean> tableFilte
 
     Observable<Query> queryObservable = triggers //
         .filter(tableFilter) // Only trigger on tables we care about.
-        .startWith(INITIAL_TRIGGER) // Immediately execute the query for initial value.
         .map(new Func1<Set<String>, Query>() {
           @Override public Query call(Set<String> trigger) {
+            return query;
+          }
+        }) //
+        .startWith(query) // Immediately trigger the query for initial value.
+        .onBackpressureLatest() //
+        .doOnSubscribe(new Action0() {
+          @Override public void call() {
             if (transactions.get() != null) {
               throw new IllegalStateException(
                   "Cannot subscribe to observable query in a transaction.");
             }
-            if (logging) {
-              log("QUERY\n  trigger: %s\n  tables: %s\n  sql: %s\n  args: %s", trigger, tableFilter,
-                  sql, Arrays.toString(args));
-            }
-            return query;
           }
-        }) //
-        .onBackpressureLatest();
+        });
     return new QueryObservable(queryObservable);
   }
 
@@ -319,8 +330,15 @@ private QueryObservable createQuery(final Func1<Set<String>, Boolean> tableFilte
    */
   @CheckResult // TODO @WorkerThread
   public Cursor query(@NonNull String sql, @NonNull String... args) {
-    if (logging) log("QUERY\n  sql: %s\n  args: %s", sql, Arrays.toString(args));
-    return getReadableDatabase().rawQuery(sql, args);
+    long startNanos = nanoTime();
+    Cursor cursor = getReadableDatabase().rawQuery(sql, args);
+    long tookMillis = NANOSECONDS.toMillis(nanoTime() - startNanos);
+
+    if (logging) {
+      log("QUERY (%sms)\n  sql: %s\n  args: %s", tookMillis, sql, Arrays.toString(args));
+    }
+
+    return cursor;
   }
 
   /**
