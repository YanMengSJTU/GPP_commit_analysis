diff --git a/build.gradle b/build.gradle
index 7e9a216..67a4745 100644
--- a/build.gradle
+++ b/build.gradle
@@ -33,6 +33,12 @@ allprojects {
 
     group = GROUP
     version = VERSION_NAME
+
+    gradle.projectsEvaluated {
+        tasks.withType(JavaCompile) {
+            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
+        }
+    }
 }
 
 ext {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java
index 6b9cefd..6ddeae4 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java
@@ -11,6 +11,7 @@
 import com.gg.rxbase.ui.RxBaseActivity;
 
 import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
 
 import javax.inject.Inject;
 
@@ -31,14 +32,22 @@
 
     private VIEWMODEL mViewModel;
 
+    @SuppressWarnings("unchecked")
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+
         mActivityScopeComponent = InjectHelper.instance().createActivityScopeComponent(this);
         injectOnCreate(mActivityScopeComponent);
 
-        ParameterizedType type = (ParameterizedType) this.getClass().getGenericSuperclass();
-        Class viewModelClazz = (Class) type.getActualTypeArguments()[0];
+        Class<VIEWMODEL> viewModelClazz;
+        Type genericSuperclass = this.getClass().getGenericSuperclass();
+        if (genericSuperclass instanceof ParameterizedType) {
+            Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass).getActualTypeArguments();
+            viewModelClazz = (Class<VIEWMODEL>) actualTypeArguments[0];
+        } else {
+            viewModelClazz = (Class<VIEWMODEL>) genericSuperclass;
+        }
         mViewModel = (VIEWMODEL) ViewModelProviders.of(this, mViewModelFactory).get(viewModelClazz);
     }
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
index f28d782..bf20809 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
@@ -13,6 +13,7 @@
 import com.gg.rxbase.ui.RxBaseFragment;
 
 import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
 
 import javax.inject.Inject;
 
@@ -36,21 +37,33 @@
     @Override
     public void onAttach(Context context) {
         super.onAttach(context);
+        if (!(getActivity() instanceof BaseViewModelActivity)) {
+            throw new IllegalStateException("Activity must extends " + BaseViewModelActivity.class);
+        }
+
         mFragmentScopeComponent = InjectHelper.instance().createFragmentScopeComponent(getActivity(), this);
-        injectOnAttach(mFragmentScopeComponent);
+        injectonAttach(mFragmentScopeComponent);
     }
 
     protected FragmentScopeComponent getFragmentScopeComponent() {
         return mFragmentScopeComponent;
     }
 
-    protected abstract void injectOnAttach(FragmentScopeComponent component);
+    protected abstract void injectonAttach(FragmentScopeComponent component);
 
+    @SuppressWarnings("unchecked")
     @Override
     public void onActivityCreated(@Nullable Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
-        ParameterizedType type = (ParameterizedType) this.getClass().getGenericSuperclass();
-        Class viewModelClazz = (Class) type.getActualTypeArguments()[0];
+
+        Class<VIEWMODEL> viewModelClazz;
+        Type genericSuperclass = this.getClass().getGenericSuperclass();
+        if (genericSuperclass instanceof ParameterizedType) {
+            Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass).getActualTypeArguments();
+            viewModelClazz = (Class<VIEWMODEL>) actualTypeArguments[0];
+        } else {
+            viewModelClazz = (Class<VIEWMODEL>) genericSuperclass;
+        }
         mViewModel = (VIEWMODEL) ViewModelProviders.of(getActivity(), mViewModelFactory).get(viewModelClazz);
     }
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
index 1dfc187..aaaccdf 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
@@ -1,193 +1,189 @@
-/*
- * Copyright (C) 2015 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.example.sqlbrite.todo.ui;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.support.v4.view.MenuItemCompat;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ListView;
-import android.widget.Toast;
-
-import com.example.sqlbrite.todo.R;
-import com.example.sqlbrite.todo.TodoApp;
-import com.example.sqlbrite.todo.controler.MainViewModel;
-import com.example.sqlbrite.todo.di.FragmentScopeComponent;
-import com.example.sqlbrite.todo.model.local.db.TodoItem;
-import com.jakewharton.rxbinding2.widget.AdapterViewItemClickEvent;
-import com.jakewharton.rxbinding2.widget.RxAdapterView;
-import com.trello.rxlifecycle2.android.FragmentEvent;
-
-import java.util.List;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-import io.reactivex.Observable;
-import io.reactivex.functions.BiFunction;
-import io.reactivex.functions.Consumer;
-
-import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_IF_ROOM;
-import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_WITH_TEXT;
-
-public final class ItemsFragment extends BaseViewModelFragment<MainViewModel> {
-    private static final String KEY_LIST_ID = "list_id";
-
-    public interface Listener {
-
-        void onNewItemClicked(long listId);
-    }
-
-    public static ItemsFragment newInstance(long listId) {
-        Bundle arguments = new Bundle();
-        arguments.putLong(KEY_LIST_ID, listId);
-
-        ItemsFragment fragment = new ItemsFragment();
-        fragment.setArguments(arguments);
-        return fragment;
-    }
-
-
-    @BindView(android.R.id.list)
-    ListView listView;
-
-    @BindView(android.R.id.empty)
-    View emptyView;
-    private Listener listener;
-
-    private ItemsAdapter adapter;
-    //private CompositeDisposable disposables;
-
-    private long getListId() {
-        return getArguments().getLong(KEY_LIST_ID);
-    }
-
-    @Override
-    public void onAttach(Context context) {
-        super.onAttach(context);
-        Activity activity = getActivity();
-        if (!(activity instanceof Listener)) {
-            throw new IllegalStateException("Activity must implement fragment Listener.");
-        }
-
-        setHasOptionsMenu(true);
-
-        listener = (Listener) activity;
-        adapter = new ItemsAdapter(activity);
-    }
-
-    @Override
-    protected void injectOnAttach(FragmentScopeComponent component) {
-        component.inject(this);
-    }
-
-    @Override
-    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        super.onCreateOptionsMenu(menu, inflater);
-
-        MenuItem item = menu.add(R.string.new_item)
-                .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
-                    @Override
-                    public boolean onMenuItemClick(MenuItem item) {
-                        listener.onNewItemClicked(getListId());
-                        return true;
-                    }
-                });
-        MenuItemCompat.setShowAsAction(item, SHOW_AS_ACTION_IF_ROOM | SHOW_AS_ACTION_WITH_TEXT);
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
-                             @Nullable Bundle savedInstanceState) {
-        super.onCreateView(inflater, container, savedInstanceState);
-        return inflater.inflate(R.layout.items, container, false);
-    }
-
-    @Override
-    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
-        super.onViewCreated(view, savedInstanceState);
-
-        ButterKnife.bind(this, view);
-        listView.setEmptyView(emptyView);
-        listView.setAdapter(adapter);
-
-        RxAdapterView.itemClickEvents(listView)
-                .observeOn(getSchedulerProvider().io())
-                .subscribe(new Consumer<AdapterViewItemClickEvent>() {
-                    @Override
-                    public void accept(AdapterViewItemClickEvent event) {
-                        boolean newValue = !adapter.getItem(event.position()).complete();
-                        getViewModel().complete(event.id(), newValue);
-                    }
-                });
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        long listId = getListId();
-
-        //disposables = new CompositeDisposable();
-
-        Observable<Integer> itemCount = getViewModel().createQueryItemCount(listId);
-        Observable<String> listName = getViewModel().createQueryListName(listId);
-
-        //disposables.add(
-        Observable
-                .combineLatest(listName, itemCount, new BiFunction<String, Integer, String>() {
-                    @Override
-                    public String apply(String listName, Integer itemCount) {
-                        return listName + " (" + itemCount + ")";
-                    }
-                })
-                .compose(this.<String>bindUntilEvent(FragmentEvent.PAUSE))
-                .observeOn(getSchedulerProvider().ui())
-                .subscribe(new Consumer<String>() {
-                    @Override
-                    public void accept(String title) throws Exception {
-                        getActivity().setTitle(title);
-                    }
-                })
-        //)
-        ;
-
-        //disposables.add(
-        getViewModel().createQueryTodoItemsByListId(listId)
-                .compose(this.<List<TodoItem>>bindUntilEvent(FragmentEvent.PAUSE))
-                .observeOn(getSchedulerProvider().ui())
-                .subscribe(adapter)
-        //)
-        ;
-
-        CharSequence content = "请切换成横屏!\nViewModel 仍是同一个!\n创建时间 : " + String.valueOf(getViewModel().getLastCreateTime());
-        Toast.makeText(getContext(),
-                content,
-                Toast.LENGTH_LONG)
-                .show();
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        //disposables.dispose();
-    }
-}
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.example.sqlbrite.todo.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ListView;
+import android.widget.Toast;
+
+import com.example.sqlbrite.todo.R;
+import com.example.sqlbrite.todo.controler.MainViewModel;
+import com.example.sqlbrite.todo.di.FragmentScopeComponent;
+import com.example.sqlbrite.todo.model.local.db.TodoItem;
+import com.jakewharton.rxbinding2.widget.AdapterViewItemClickEvent;
+import com.jakewharton.rxbinding2.widget.RxAdapterView;
+import com.trello.rxlifecycle2.android.FragmentEvent;
+
+import java.util.List;
+
+import butterknife.BindView;
+import butterknife.ButterKnife;
+import io.reactivex.Observable;
+import io.reactivex.functions.BiFunction;
+import io.reactivex.functions.Consumer;
+
+public final class ItemsFragment extends BaseViewModelFragment<MainViewModel> {
+    private static final String KEY_LIST_ID = "list_id";
+
+    public interface Listener {
+
+        void onNewItemClicked(long listId);
+    }
+
+    public static ItemsFragment newInstance(long listId) {
+        Bundle arguments = new Bundle();
+        arguments.putLong(KEY_LIST_ID, listId);
+
+        ItemsFragment fragment = new ItemsFragment();
+        fragment.setArguments(arguments);
+        return fragment;
+    }
+
+
+    @BindView(android.R.id.list)
+    ListView listView;
+
+    @BindView(android.R.id.empty)
+    View emptyView;
+
+    private Listener listener;
+
+    private ItemsAdapter adapter;
+    //private CompositeDisposable disposables;
+
+    private long getListId() {
+        return getArguments().getLong(KEY_LIST_ID);
+    }
+
+    @Override
+    public void onAttach(Context context) {
+        super.onAttach(context);
+        Activity activity = getActivity();
+        if (!(activity instanceof Listener)) {
+            throw new IllegalStateException("Activity must implement fragment Listener.");
+        }
+
+        setHasOptionsMenu(true);
+
+        listener = (Listener) activity;
+        adapter = new ItemsAdapter(context);
+    }
+
+    @Override
+    protected void injectonAttach(FragmentScopeComponent component) {
+        component.inject(this);
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        super.onCreateOptionsMenu(menu, inflater);
+
+        MenuItem item = menu.add(R.string.new_item)
+                .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
+                    @Override
+                    public boolean onMenuItemClick(MenuItem item) {
+                        listener.onNewItemClicked(getListId());
+                        return true;
+                    }
+                });
+        item.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
+                             @Nullable Bundle savedInstanceState) {
+        super.onCreateView(inflater, container, savedInstanceState);
+        return inflater.inflate(R.layout.items, container, false);
+    }
+
+    @Override
+    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+
+        ButterKnife.bind(this, view);
+        listView.setEmptyView(emptyView);
+        listView.setAdapter(adapter);
+
+        RxAdapterView.itemClickEvents(listView)
+                .observeOn(getSchedulerProvider().io())
+                .subscribe(new Consumer<AdapterViewItemClickEvent>() {
+                    @Override
+                    public void accept(AdapterViewItemClickEvent event) {
+                        boolean newValue = !adapter.getItem(event.position()).complete();
+                        getViewModel().complete(event.id(), newValue);
+                    }
+                });
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        long listId = getListId();
+
+        //disposables = new CompositeDisposable();
+
+        Observable<Integer> itemCount = getViewModel().createQueryItemCount(listId);
+        Observable<String> listName = getViewModel().createQueryListName(listId);
+
+        //disposables.add(
+        Observable
+                .combineLatest(listName, itemCount, new BiFunction<String, Integer, String>() {
+                    @Override
+                    public String apply(String listName, Integer itemCount) {
+                        return listName + " (" + itemCount + ")";
+                    }
+                })
+                .compose(this.<String>bindUntilEvent(FragmentEvent.PAUSE))
+                .observeOn(getSchedulerProvider().ui())
+                .subscribe(new Consumer<String>() {
+                    @Override
+                    public void accept(String title) throws Exception {
+                        getActivity().setTitle(title);
+                    }
+                })
+        //)
+        ;
+
+        //disposables.add(
+        getViewModel().createQueryTodoItemsByListId(listId)
+                .compose(this.<List<TodoItem>>bindUntilEvent(FragmentEvent.PAUSE))
+                .observeOn(getSchedulerProvider().ui())
+                .subscribe(adapter)
+        //)
+        ;
+
+        CharSequence content = "请切换成横屏!\nViewModel 仍是同一个!\n创建时间 : " + String.valueOf(getViewModel().getLastCreateTime());
+        Toast.makeText(getContext(),
+                content,
+                Toast.LENGTH_LONG)
+                .show();
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        //disposables.dispose();
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
index 5437f5a..b7910e1 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
@@ -1,190 +1,186 @@
-/*
- * Copyright (C) 2015 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.example.sqlbrite.todo.ui;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.support.v4.view.MenuItemCompat;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ListView;
-import android.widget.Toast;
-
-import com.example.sqlbrite.todo.R;
-import com.example.sqlbrite.todo.TodoApp;
-import com.example.sqlbrite.todo.controler.MainViewModel;
-import com.example.sqlbrite.todo.di.FragmentScopeComponent;
-import com.trello.rxlifecycle2.android.FragmentEvent;
-
-import java.io.File;
-import java.util.List;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-import butterknife.OnItemClick;
-
-import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_IF_ROOM;
-import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_WITH_TEXT;
-
-public final class ListsFragment extends BaseViewModelFragment<MainViewModel> {
-    private static final String TAG = "ListsFragment";
-
-    interface Listener {
-        void onListClicked(long id);
-
-        void onNewListClicked();
-    }
-
-    static ListsFragment newInstance() {
-        return new ListsFragment();
-    }
-
-    @BindView(android.R.id.list)
-    ListView listView;
-    @BindView(android.R.id.empty)
-    View emptyView;
-
-    private Listener listener;
-    private ListsAdapter adapter;
-    //private Disposable disposable;
-
-    @Override
-    public void onAttach(Context context) {
-        super.onAttach(context);
-
-        Activity activity = getActivity();
-        if (!(activity instanceof Listener)) {
-            throw new IllegalStateException("Activity must implement fragment Listener.");
-        }
-        setHasOptionsMenu(true);
-
-        listener = (Listener) activity;
-        adapter = new ListsAdapter(activity);
-    }
-
-    @Override
-    protected void injectOnAttach(FragmentScopeComponent component) {
-        component.inject(this);
-    }
-
-    @Override
-    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        super.onCreateOptionsMenu(menu, inflater);
-
-        MenuItem item = menu.add(R.string.new_list)
-                .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
-                    @Override
-                    public boolean onMenuItemClick(MenuItem item) {
-                        listener.onNewListClicked();
-                        return true;
-                    }
-                });
-
-        MenuItemCompat.setShowAsAction(item, SHOW_AS_ACTION_IF_ROOM | SHOW_AS_ACTION_WITH_TEXT);
-
-        item = menu.add(R.string.export_db)
-                .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
-                    @Override
-                    public boolean onMenuItemClick(MenuItem item) {
-                        exportDB();
-                        return true;
-                    }
-                });
-
-        MenuItemCompat.setShowAsAction(item, SHOW_AS_ACTION_IF_ROOM | SHOW_AS_ACTION_WITH_TEXT);
-
-        item = menu.add(R.string.setting)
-                .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
-                    @Override
-                    public boolean onMenuItemClick(MenuItem item) {
-                        Intent intent = new Intent(getContext(), SystemSettingActivity.class);
-                        startActivity(intent);
-                        return true;
-                    }
-                });
-
-        MenuItemCompat.setShowAsAction(item, SHOW_AS_ACTION_IF_ROOM | SHOW_AS_ACTION_WITH_TEXT);
-    }
-
-    private void exportDB() {
-        try {
-            File dstFile = getViewModel().exportDecryption();
-            Toast.makeText(getContext(), "导出数据库成功!\n" + dstFile.getPath(), Toast.LENGTH_SHORT).show();
-        } catch (Exception e) {
-            Log.e(TAG, "导出数据库失败!", e);
-            Toast.makeText(getContext(), "导出数据库失败!", Toast.LENGTH_SHORT).show();
-        }
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
-                             @Nullable Bundle savedInstanceState) {
-        super.onCreateView(inflater, container, savedInstanceState);
-        return inflater.inflate(R.layout.lists, container, false);
-    }
-
-    @Override
-    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
-        super.onViewCreated(view, savedInstanceState);
-        ButterKnife.bind(this, view);
-        listView.setEmptyView(emptyView);
-        listView.setAdapter(adapter);
-    }
-
-    @OnItemClick(android.R.id.list)
-    void listClicked(long listId) {
-        listener.onListClicked(listId);
-    }
-
-    @Override
-    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
-        super.onActivityCreated(savedInstanceState);
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-
-        getActivity().setTitle("To-Do");
-
-        /*
-        disposable = db.createQuery(ListsItem.TABLES, ListsItem.QUERY)
-        .mapToList(ListsItem.MAPPER) // 耗内存
-        .observeOn(AndroidSchedulers.mainThread())
-        .subscribe(adapter);*/
-
-
-        /*disposable = */
-        getViewModel().createQueryListsItems() // 省内存
-                .compose(this.<List<ListsItem>>bindUntilEvent(FragmentEvent.PAUSE))
-                .observeOn(getSchedulerProvider().ui())
-                .subscribe(adapter);
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        //disposable.dispose();  // RxLifecycle instead of
-    }
-}
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.example.sqlbrite.todo.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ListView;
+import android.widget.Toast;
+
+import com.example.sqlbrite.todo.R;
+import com.example.sqlbrite.todo.controler.MainViewModel;
+import com.example.sqlbrite.todo.di.FragmentScopeComponent;
+import com.trello.rxlifecycle2.android.FragmentEvent;
+
+import java.io.File;
+import java.util.List;
+
+import butterknife.BindView;
+import butterknife.ButterKnife;
+import butterknife.OnItemClick;
+
+public final class ListsFragment extends BaseViewModelFragment<MainViewModel> {
+    private static final String TAG = "ListsFragment";
+
+    interface Listener {
+        void onListClicked(long id);
+
+        void onNewListClicked();
+    }
+
+    static ListsFragment newInstance() {
+        return new ListsFragment();
+    }
+
+    @BindView(android.R.id.list)
+    ListView listView;
+    @BindView(android.R.id.empty)
+    View emptyView;
+
+    private Listener listener;
+    private ListsAdapter adapter;
+    //private Disposable disposable;
+
+    @Override
+    public void onAttach(Context context) {
+        super.onAttach(context);
+
+        Activity activity = getActivity();
+        if (!(activity instanceof Listener)) {
+            throw new IllegalStateException("Activity must implement fragment Listener.");
+        }
+
+        setHasOptionsMenu(true);
+
+        listener = (Listener) activity;
+        adapter = new ListsAdapter(context);
+    }
+
+    @Override
+    protected void injectonAttach(FragmentScopeComponent component) {
+        component.inject(this);
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        super.onCreateOptionsMenu(menu, inflater);
+
+        MenuItem item = menu.add(R.string.new_list)
+                .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
+                    @Override
+                    public boolean onMenuItemClick(MenuItem item) {
+                        listener.onNewListClicked();
+                        return true;
+                    }
+                });
+
+        item.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);
+
+        item = menu.add(R.string.export_db)
+                .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
+                    @Override
+                    public boolean onMenuItemClick(MenuItem item) {
+                        exportDB();
+                        return true;
+                    }
+                });
+
+        item.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);
+
+        item = menu.add(R.string.setting)
+                .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
+                    @Override
+                    public boolean onMenuItemClick(MenuItem item) {
+                        Intent intent = new Intent(getContext(), SystemSettingActivity.class);
+                        startActivity(intent);
+                        return true;
+                    }
+                });
+
+        item.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);
+    }
+
+    private void exportDB() {
+        try {
+            File dstFile = getViewModel().exportDecryption();
+            Toast.makeText(getContext(), "导出数据库成功!\n" + dstFile.getPath(), Toast.LENGTH_SHORT).show();
+        } catch (Exception e) {
+            Log.e(TAG, "导出数据库失败!", e);
+            Toast.makeText(getContext(), "导出数据库失败!", Toast.LENGTH_SHORT).show();
+        }
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
+                             @Nullable Bundle savedInstanceState) {
+        super.onCreateView(inflater, container, savedInstanceState);
+        return inflater.inflate(R.layout.lists, container, false);
+    }
+
+    @Override
+    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+        ButterKnife.bind(this, view);
+        listView.setEmptyView(emptyView);
+        listView.setAdapter(adapter);
+    }
+
+    @OnItemClick(android.R.id.list)
+    void listClicked(long listId) {
+        listener.onListClicked(listId);
+    }
+
+    @Override
+    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+
+        getActivity().setTitle("To-Do");
+
+        /*
+        disposable = db.createQuery(ListsItem.TABLES, ListsItem.QUERY)
+        .mapToList(ListsItem.MAPPER) // 耗内存
+        .observeOn(AndroidSchedulers.mainThread())
+        .subscribe(adapter);*/
+
+
+        /*disposable = */
+        getViewModel().createQueryListsItems() // 省内存
+                .compose(this.<List<ListsItem>>bindUntilEvent(FragmentEvent.PAUSE))
+                .observeOn(getSchedulerProvider().ui())
+                .subscribe(adapter);
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        //disposable.dispose();  // RxLifecycle instead of
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
index 7a75850..7327b38 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
@@ -29,7 +29,6 @@
 import android.widget.EditText;
 
 import com.example.sqlbrite.todo.R;
-import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.MainViewModel;
 import com.example.sqlbrite.todo.di.InjectHelper;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
@@ -43,8 +42,6 @@
 import io.reactivex.functions.Consumer;
 import io.reactivex.subjects.PublishSubject;
 
-import static butterknife.ButterKnife.findById;
-
 public final class NewItemFragment extends RxAppCompatDialogFragment {
     private static final String KEY_LIST_ID = "list_id";
 
@@ -86,7 +83,7 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
         final Context context = getActivity();
         View view = LayoutInflater.from(context).inflate(R.layout.new_item, null);
 
-        EditText name = findById(view, android.R.id.input);
+        EditText name = view.findViewById(android.R.id.input);
         Observable.combineLatest(createClicked, RxTextView.textChanges(name),
                 new BiFunction<String, CharSequence, String>() {
                     @Override
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
index 3f963ad..7a18970 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
@@ -41,8 +41,6 @@
 import io.reactivex.functions.Consumer;
 import io.reactivex.subjects.PublishSubject;
 
-import static butterknife.ButterKnife.findById;
-
 public final class NewListFragment extends RxAppCompatDialogFragment {
     public static NewListFragment newInstance() {
         return new NewListFragment();
@@ -74,7 +72,7 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
         final Context context = getActivity();
         View view = LayoutInflater.from(context).inflate(R.layout.new_list, null);
 
-        EditText name = findById(view, android.R.id.input);
+        EditText name = view.findViewById(android.R.id.input);
         Observable.combineLatest(createClicked, RxTextView.textChanges(name),
                 new BiFunction<String, CharSequence, String>() {
                     @Override
diff --git a/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/dao/BriteDaoSupport.java b/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/dao/BriteDaoSupport.java
index dbb172d..d4b1763 100644
--- a/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/dao/BriteDaoSupport.java
+++ b/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/dao/BriteDaoSupport.java
@@ -11,6 +11,7 @@
 import com.squareup.sqlbrite3.QueryObservable;
 
 import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -25,17 +26,23 @@
 
     private final BriteDatabase mDatabase;
 
-    private final Class mEntityClazz;
+    private final Class<ENTITY> mEntityClazz;
 
     private final String mTableName;
 
     private final String SQL_QUERY_BY_ID;
 
+    @SuppressWarnings("unchecked")
     public BriteDaoSupport(BriteDatabase database) {
         mDatabase = database;
 
-        ParameterizedType type = (ParameterizedType) this.getClass().getGenericSuperclass();
-        mEntityClazz = (Class) type.getActualTypeArguments()[0];
+        Type genericSuperclass = this.getClass().getGenericSuperclass();
+        if (genericSuperclass instanceof ParameterizedType) {
+            Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass).getActualTypeArguments();
+            mEntityClazz = (Class<ENTITY>) actualTypeArguments[0];
+        } else {
+            mEntityClazz = (Class<ENTITY>) genericSuperclass;
+        }
 
         mTableName = toTableName(mEntityClazz);
 
