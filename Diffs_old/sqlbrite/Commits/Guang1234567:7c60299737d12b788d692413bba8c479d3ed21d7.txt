diff --git a/sample/src/main/java/com/jakewharton/rxrelay2/AppendOnlyLinkedArrayList.java b/sample/src/main/java/com/jakewharton/rxrelay2/AppendOnlyLinkedArrayList.java
new file mode 100644
index 0000000..b3a461d
--- /dev/null
+++ b/sample/src/main/java/com/jakewharton/rxrelay2/AppendOnlyLinkedArrayList.java
@@ -0,0 +1,107 @@
+/**
+ * Copyright 2016 Netflix, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package com.jakewharton.rxrelay2;
+
+import io.reactivex.functions.Predicate;
+
+/**
+ * A linked-array-list implementation that only supports appending and consumption.
+ *
+ * @param <T> the value type
+ */
+class AppendOnlyLinkedArrayList<T> {
+    private final int capacity;
+    private final Object[] head;
+    private Object[] tail;
+    private int offset;
+
+    /**
+     * Constructs an empty list with a per-link capacity.
+     * @param capacity the capacity of each link
+     */
+    AppendOnlyLinkedArrayList(int capacity) {
+        this.capacity = capacity;
+        this.head = new Object[capacity + 1];
+        this.tail = head;
+    }
+
+    /**
+     * Append a non-null value to the list.
+     * <p>Don't add null to the list!
+     * @param value the value to append
+     */
+    void add(T value) {
+        final int c = capacity;
+        int o = offset;
+        if (o == c) {
+            Object[] next = new Object[c + 1];
+            tail[c] = next;
+            tail = next;
+            o = 0;
+        }
+        tail[o] = value;
+        offset = o + 1;
+    }
+
+    /**
+     * Predicate interface suppressing the exception.
+     *
+     * @param <T> the value type
+     */
+    public interface NonThrowingPredicate<T> extends Predicate<T> {
+        @Override
+        boolean test(T t);
+    }
+
+    /**
+     * Loops over all elements of the array until a null element is encountered or
+     * the given predicate returns true.
+     * @param consumer the consumer of values that returns true if the forEach should terminate
+     */
+    @SuppressWarnings("unchecked")
+    void forEachWhile(NonThrowingPredicate<? super T> consumer) {
+        Object[] a = head;
+        final int c = capacity;
+        while (a != null) {
+            for (int i = 0; i < c; i++) {
+                Object o = a[i];
+                if (o == null) {
+                    break;
+                }
+                if (consumer.test((T)o)) {
+                    break;
+                }
+            }
+            a = (Object[])a[c];
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    boolean accept(Relay<? super T> observer) {
+        Object[] a = head;
+        final int c = capacity;
+        while (a != null) {
+            for (int i = 0; i < c; i++) {
+                Object o = a[i];
+                if (o == null) {
+                    break;
+                }
+
+                observer.accept((T) o);
+            }
+            a = (Object[])a[c];
+        }
+        return false;
+    }
+}
diff --git a/sample/src/main/java/com/jakewharton/rxrelay2/BehaviorRelay.java b/sample/src/main/java/com/jakewharton/rxrelay2/BehaviorRelay.java
new file mode 100644
index 0000000..4477b1d
--- /dev/null
+++ b/sample/src/main/java/com/jakewharton/rxrelay2/BehaviorRelay.java
@@ -0,0 +1,380 @@
+/**
+ * Copyright 2016 Netflix, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package com.jakewharton.rxrelay2;
+
+import com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.NonThrowingPredicate;
+import io.reactivex.Observer;
+import io.reactivex.annotations.Nullable;
+import io.reactivex.disposables.Disposable;
+import java.lang.reflect.Array;
+import java.util.concurrent.atomic.AtomicReference;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+/**
+ * Relay that emits the most recent item it has observed and all subsequent observed items to each subscribed
+ * {@link Observer}.
+ * <p>
+ * <img width="640" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/S.BehaviorSubject.png" alt="">
+ * <p>
+ * Example usage:
+ * <p>
+ * <pre> {@code
+
+  // observer will receive all events.
+  BehaviorRelay<Object> subject = BehaviorRelay.createDefault("default");
+  subject.subscribe(observer);
+  subject.accept("one");
+  subject.accept("two");
+  subject.accept("three");
+
+  // observer will receive the "one", "two" and "three" events, but not "zero"
+  BehaviorRelay<Object> subject = BehaviorRelay.createDefault("default");
+  subject.accept("zero");
+  subject.accept("one");
+  subject.subscribe(observer);
+  subject.accept("two");
+  subject.accept("three");
+  } </pre>
+ */
+public final class BehaviorRelay<T> extends Relay<T> {
+
+    /** An empty array to avoid allocation in getValues(). */
+    private static final Object[] EMPTY_ARRAY = new Object[0];
+
+    final AtomicReference<T> value;
+
+    private final AtomicReference<BehaviorDisposable<T>[]> subscribers;
+
+    @SuppressWarnings("rawtypes")
+    private static final BehaviorDisposable[] EMPTY = new BehaviorDisposable[0];
+
+    final Lock readLock;
+    private final Lock writeLock;
+
+    long index;
+
+    /**
+     * Creates a {@link BehaviorRelay} without a default item.
+     */
+    public static <T> BehaviorRelay<T> create() {
+        return new BehaviorRelay<T>();
+    }
+
+    /**
+     * Creates a {@link BehaviorRelay} that emits the last item it observed and all subsequent items to each
+     * {@link Observer} that subscribes to it.
+     *
+     * @param defaultValue
+     *            the item that will be emitted first to any {@link Observer} as long as the
+     *            {@link BehaviorRelay} has not yet observed any items from its source {@code Observable}
+     */
+    public static <T> BehaviorRelay<T> createDefault(T defaultValue) {
+        return new BehaviorRelay<T>(defaultValue);
+    }
+
+    /**
+     * Constructs an empty BehaviorRelay.
+     */
+    @SuppressWarnings("unchecked") private BehaviorRelay() {
+        ReadWriteLock lock = new ReentrantReadWriteLock();
+        this.readLock = lock.readLock();
+        this.writeLock = lock.writeLock();
+        this.subscribers = new AtomicReference<BehaviorDisposable<T>[]>(EMPTY);
+        this.value = new AtomicReference<T>();
+    }
+
+    /**
+     * Constructs a BehaviorRelay with the given initial value.
+     * @param defaultValue the initial value, not null (verified)
+     * @throws NullPointerException if {@code defaultValue} is null
+     */
+    private BehaviorRelay(T defaultValue) {
+        this();
+        if (defaultValue == null) throw new NullPointerException("defaultValue == null");
+        value.lazySet(defaultValue);
+    }
+
+    @Override
+    protected void subscribeActual(Observer<? super T> observer) {
+        BehaviorDisposable<T> bs = new BehaviorDisposable<T>(observer, this);
+        observer.onSubscribe(bs);
+        add(bs);
+        if (bs.cancelled) {
+            remove(bs);
+        } else {
+            bs.emitFirst();
+        }
+    }
+
+    @Override
+    public void accept(T value) {
+        if (value == null) throw new NullPointerException("value == null");
+
+        setCurrent(value);
+        for (BehaviorDisposable<T> bs : subscribers.get()) {
+            bs.emitNext(value, index);
+        }
+    }
+
+    @Override
+    public boolean hasObservers() {
+        return subscribers.get().length != 0;
+    }
+
+    /* test support*/ int subscriberCount() {
+        return subscribers.get().length;
+    }
+
+    /**
+     * Returns a single value the Relay currently has or null if no such value exists.
+     * <p>The method is thread-safe.
+     */
+    @Nullable
+    public T getValue() {
+        return value.get();
+    }
+
+    /**
+     * Returns an Object array containing snapshot all values of the Relay.
+     * <p>The method is thread-safe.
+     */
+    public Object[] getValues() {
+        @SuppressWarnings("unchecked")
+        T[] a = (T[])EMPTY_ARRAY;
+        T[] b = getValues(a);
+        if (b == EMPTY_ARRAY) {
+            return new Object[0];
+        }
+        return b;
+
+    }
+
+    /**
+     * Returns a typed array containing a snapshot of all values of the Relay.
+     * <p>The method follows the conventions of Collection.toArray by setting the array element
+     * after the last value to null (if the capacity permits).
+     * <p>The method is thread-safe.
+     * @param array the target array to copy values into if it fits
+     */
+    @SuppressWarnings("unchecked")
+    public T[] getValues(T[] array) {
+        T o = value.get();
+        if (o == null) {
+            if (array.length != 0) {
+                array[0] = null;
+            }
+            return array;
+        }
+        if (array.length != 0) {
+            array[0] = o;
+            if (array.length != 1) {
+                array[1] = null;
+            }
+        } else {
+            array = (T[]) Array.newInstance(array.getClass().getComponentType(), 1);
+            array[0] = o;
+        }
+        return array;
+    }
+
+    /**
+     * Returns true if the subject has any value.
+     * <p>The method is thread-safe.
+     * @return true if the subject has any value
+     */
+    public boolean hasValue() {
+        return value.get() != null;
+    }
+
+    private void add(BehaviorDisposable<T> rs) {
+        for (;;) {
+            BehaviorDisposable<T>[] a = subscribers.get();
+            int len = a.length;
+            @SuppressWarnings("unchecked")
+            BehaviorDisposable<T>[] b = new BehaviorDisposable[len + 1];
+            System.arraycopy(a, 0, b, 0, len);
+            b[len] = rs;
+            if (subscribers.compareAndSet(a, b)) {
+                return;
+            }
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    void remove(BehaviorDisposable<T> rs) {
+        for (;;) {
+            BehaviorDisposable<T>[] a = subscribers.get();
+            if (a == EMPTY) {
+                return;
+            }
+            int len = a.length;
+            int j = -1;
+            for (int i = 0; i < len; i++) {
+                if (a[i] == rs) {
+                    j = i;
+                    break;
+                }
+            }
+
+            if (j < 0) {
+                return;
+            }
+            BehaviorDisposable<T>[] b;
+            if (len == 1) {
+                b = EMPTY;
+            } else {
+                b = new BehaviorDisposable[len - 1];
+                System.arraycopy(a, 0, b, 0, j);
+                System.arraycopy(a, j + 1, b, j, len - j - 1);
+            }
+            if (subscribers.compareAndSet(a, b)) {
+                return;
+            }
+        }
+    }
+
+    private void setCurrent(T current) {
+        writeLock.lock();
+        try {
+            index++;
+            value.lazySet(current);
+        } finally {
+            writeLock.unlock();
+        }
+    }
+
+    static final class BehaviorDisposable<T> implements Disposable, NonThrowingPredicate<T> {
+
+        final Observer<? super T> actual;
+        final BehaviorRelay<T> state;
+
+        boolean next;
+        boolean emitting;
+        AppendOnlyLinkedArrayList<T> queue;
+
+        boolean fastPath;
+
+        volatile boolean cancelled;
+
+        long index;
+
+        BehaviorDisposable(Observer<? super T> actual, BehaviorRelay<T> state) {
+            this.actual = actual;
+            this.state = state;
+        }
+
+        @Override
+        public void dispose() {
+            if (!cancelled) {
+                cancelled = true;
+
+                state.remove(this);
+            }
+        }
+
+        @Override
+        public boolean isDisposed() {
+            return cancelled;
+        }
+
+        void emitFirst() {
+            if (cancelled) {
+                return;
+            }
+            T o;
+            synchronized (this) {
+                if (cancelled) {
+                    return;
+                }
+                if (next) {
+                    return;
+                }
+
+                BehaviorRelay<T> s = state;
+                Lock lock = s.readLock;
+
+                lock.lock();
+                index = s.index;
+                o = s.value.get();
+                lock.unlock();
+
+                emitting = o != null;
+                next = true;
+            }
+
+            if (o != null) {
+                test(o);
+                emitLoop();
+            }
+        }
+
+        void emitNext(T value, long stateIndex) {
+            if (cancelled) {
+                return;
+            }
+            if (!fastPath) {
+                synchronized (this) {
+                    if (cancelled) {
+                        return;
+                    }
+                    if (index == stateIndex) {
+                        return;
+                    }
+                    if (emitting) {
+                        AppendOnlyLinkedArrayList<T> q = queue;
+                        if (q == null) {
+                            q = new AppendOnlyLinkedArrayList<T>(4);
+                            queue = q;
+                        }
+                        q.add(value);
+                        return;
+                    }
+                    next = true;
+                }
+                fastPath = true;
+            }
+
+            test(value);
+        }
+
+        @Override
+        public boolean test(T o) {
+            if (!cancelled) {
+                actual.onNext(o);
+            }
+            return false;
+        }
+
+        void emitLoop() {
+            for (;;) {
+                if (cancelled) {
+                    return;
+                }
+                AppendOnlyLinkedArrayList<T> q;
+                synchronized (this) {
+                    q = queue;
+                    if (q == null) {
+                        emitting = false;
+                        return;
+                    }
+                    queue = null;
+                }
+
+                q.forEachWhile(this);
+            }
+        }
+    }
+}
diff --git a/sample/src/main/java/com/jakewharton/rxrelay2/PublishRelay.java b/sample/src/main/java/com/jakewharton/rxrelay2/PublishRelay.java
new file mode 100644
index 0000000..f1e9807
--- /dev/null
+++ b/sample/src/main/java/com/jakewharton/rxrelay2/PublishRelay.java
@@ -0,0 +1,191 @@
+/**
+ * Copyright 2016 Netflix, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package com.jakewharton.rxrelay2;
+
+import io.reactivex.Observer;
+import io.reactivex.disposables.Disposable;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicReference;
+
+/**
+ * Relay that, once an {@link Observer} has subscribed, emits all subsequently observed items to the
+ * subscriber.
+ * <p>
+ * <img width="640" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/S.PublishSubject.png" alt="">
+ * <p>
+ * Example usage:
+ * <p>
+ * <pre> {@code
+
+  PublishRelay<Object> relay = PublishRelay.create();
+  // observer1 will receive all events
+  relay.subscribe(observer1);
+  relay.accept("one");
+  relay.accept("two");
+  // observer2 will only receive "three"
+  relay.subscribe(observer2);
+  relay.accept("three");
+
+  } </pre>
+ */
+public final class PublishRelay<T> extends Relay<T> {
+    /** An empty subscribers array to avoid allocating it all the time. */
+    @SuppressWarnings("rawtypes")
+    private static final PublishDisposable[] EMPTY = new PublishDisposable[0];
+
+    /** The array of currently subscribed subscribers. */
+    private final AtomicReference<PublishDisposable<T>[]> subscribers;
+
+    /**
+     * Constructs a PublishRelay.
+     */
+    public static <T> PublishRelay<T> create() {
+        return new PublishRelay<T>();
+    }
+
+    /**
+     * Constructs a PublishRelay.
+     */
+    @SuppressWarnings("unchecked") private PublishRelay() {
+        subscribers = new AtomicReference<PublishDisposable<T>[]>(EMPTY);
+    }
+
+
+    @Override
+    public void subscribeActual(Observer<? super T> t) {
+        PublishDisposable<T> ps = new PublishDisposable<T>(t, this);
+        t.onSubscribe(ps);
+        add(ps);
+        // if cancellation happened while a successful add, the remove() didn't work
+        // so we need to do it again
+        if (ps.isDisposed()) {
+            remove(ps);
+        }
+    }
+
+    /**
+     * Adds the given subscriber to the subscribers array atomically.
+     * @param ps the subscriber to add
+     */
+    private void add(PublishDisposable<T> ps) {
+        for (;;) {
+            PublishDisposable<T>[] a = subscribers.get();
+            int n = a.length;
+            @SuppressWarnings("unchecked")
+            PublishDisposable<T>[] b = new PublishDisposable[n + 1];
+            System.arraycopy(a, 0, b, 0, n);
+            b[n] = ps;
+
+            if (subscribers.compareAndSet(a, b)) {
+                return;
+            }
+        }
+    }
+
+    /**
+     * Atomically removes the given subscriber if it is subscribed to the subject.
+     * @param ps the subject to remove
+     */
+    @SuppressWarnings("unchecked")
+    void remove(PublishDisposable<T> ps) {
+        for (;;) {
+            PublishDisposable<T>[] a = subscribers.get();
+            if (a == EMPTY) {
+                return;
+            }
+
+            int n = a.length;
+            int j = -1;
+            for (int i = 0; i < n; i++) {
+                if (a[i] == ps) {
+                    j = i;
+                    break;
+                }
+            }
+
+            if (j < 0) {
+                return;
+            }
+
+            PublishDisposable<T>[] b;
+
+            if (n == 1) {
+                b = EMPTY;
+            } else {
+                b = new PublishDisposable[n - 1];
+                System.arraycopy(a, 0, b, 0, j);
+                System.arraycopy(a, j + 1, b, j, n - j - 1);
+            }
+            if (subscribers.compareAndSet(a, b)) {
+                return;
+            }
+        }
+    }
+
+    @Override
+    public void accept(T value) {
+        if (value == null) throw new NullPointerException("value == null");
+        for (PublishDisposable<T> s : subscribers.get()) {
+            s.onNext(value);
+        }
+    }
+
+    @Override
+    public boolean hasObservers() {
+        return subscribers.get().length != 0;
+    }
+
+    /**
+     * Wraps the actual subscriber, tracks its requests and makes cancellation
+     * to remove itself from the current subscribers array.
+     *
+     * @param <T> the value type
+     */
+    static final class PublishDisposable<T> extends AtomicBoolean implements Disposable {
+
+        private static final long serialVersionUID = 3562861878281475070L;
+        /** The actual subscriber. */
+        final Observer<? super T> actual;
+        /** The subject state. */
+        final PublishRelay<T> parent;
+
+        /**
+         * Constructs a PublishSubscriber, wraps the actual subscriber and the state.
+         * @param actual the actual subscriber
+         * @param parent the parent PublishProcessor
+         */
+        PublishDisposable(Observer<? super T> actual, PublishRelay<T> parent) {
+            this.actual = actual;
+            this.parent = parent;
+        }
+
+        void onNext(T t) {
+            if (!get()) {
+                actual.onNext(t);
+            }
+        }
+
+        @Override
+        public void dispose() {
+            if (compareAndSet(false, true)) {
+                parent.remove(this);
+            }
+        }
+
+        @Override
+        public boolean isDisposed() {
+            return get();
+        }
+    }
+}
diff --git a/sample/src/main/java/com/jakewharton/rxrelay2/Relay.java b/sample/src/main/java/com/jakewharton/rxrelay2/Relay.java
new file mode 100644
index 0000000..fea76dc
--- /dev/null
+++ b/sample/src/main/java/com/jakewharton/rxrelay2/Relay.java
@@ -0,0 +1,47 @@
+/**
+ * Copyright 2016 Netflix, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package com.jakewharton.rxrelay2;
+
+import io.reactivex.Observable;
+import io.reactivex.functions.Consumer;
+
+/**
+ * Represents a Consumer and an Observable at the same time, allowing
+ * multicasting events from a single source to multiple child Observers.
+ * <p>All methods except {@link #accept} are thread-safe.
+ * Use {@link #toSerialized()} to make it thread-safe as well.
+ *
+ * @param <T> the item value type
+ */
+public abstract class Relay<T> extends Observable<T> implements Consumer<T> {
+    /** {@inheritDoc} */
+    @Override public abstract void accept(T value); // Redeclare without checked exception.
+
+    /**
+     * Returns true if the subject has any Observers.
+     * <p>The method is thread-safe.
+     */
+    public abstract boolean hasObservers();
+
+    /**
+     * Wraps this Relay and serializes the calls to {@link #accept}, making it thread-safe.
+     * <p>The method is thread-safe.
+     */
+    public final Relay<T> toSerialized() {
+        if (this instanceof SerializedRelay) {
+            return this;
+        }
+        return new SerializedRelay<T>(this);
+    }
+}
diff --git a/sample/src/main/java/com/jakewharton/rxrelay2/ReplayRelay.java b/sample/src/main/java/com/jakewharton/rxrelay2/ReplayRelay.java
new file mode 100644
index 0000000..ef7a741
--- /dev/null
+++ b/sample/src/main/java/com/jakewharton/rxrelay2/ReplayRelay.java
@@ -0,0 +1,878 @@
+/**
+ * Copyright 2016 Netflix, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package com.jakewharton.rxrelay2;
+
+import io.reactivex.Observer;
+import io.reactivex.Scheduler;
+import io.reactivex.annotations.Nullable;
+import io.reactivex.disposables.Disposable;
+import java.lang.reflect.Array;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
+
+/**
+ * Replays events to Observers.
+ * <p>
+ * <img width="640" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/S.ReplaySubject.png" alt="">
+ * <p>
+ * Example usage:
+ * <p>
+ * <pre> {@code
+
+  ReplayRelay<Object> relay = new ReplayRelay<>();
+  relay.accept("one");
+  relay.accept("two");
+  relay.accept("three");
+
+  // both of the following will get the values from above
+  relay.subscribe(observer1);
+  relay.subscribe(observer2);
+
+  } </pre>
+ *
+ * @param <T> the value type
+ */
+public final class ReplayRelay<T> extends Relay<T> {
+    final ReplayBuffer<T> buffer;
+
+    final AtomicReference<ReplayDisposable<T>[]> observers;
+
+    @SuppressWarnings("rawtypes")
+    static final ReplayDisposable[] EMPTY = new ReplayDisposable[0];
+
+    /**
+     * Creates an unbounded replay relay.
+     * <p>
+     * The internal buffer is backed by an {@link ArrayList} and starts with an initial capacity of 16. Once the
+     * number of items reaches this capacity, it will grow as necessary (usually by 50%). However, as the
+     * number of items grows, this causes frequent array reallocation and copying, and may hurt performance
+     * and latency. This can be avoided with the {@link #create(int)} overload which takes an initial capacity
+     * parameter and can be tuned to reduce the array reallocation frequency as needed.
+     */
+    public static <T> ReplayRelay<T> create() {
+        return new ReplayRelay<T>(new UnboundedReplayBuffer<T>(16));
+    }
+
+    /**
+     * Creates an unbounded replay relay with the specified initial buffer capacity.
+     * <p>
+     * Use this method to avoid excessive array reallocation while the internal buffer grows to accommodate new
+     * items. For example, if you know that the buffer will hold 32k items, you can ask the
+     * {@code ReplayRelay} to preallocate its internal array with a capacity to hold that many items. Once
+     * the items start to arrive, the internal array won't need to grow, creating less garbage and no overhead
+     * due to frequent array-copying.
+     *
+     * @param capacityHint
+     *          the initial buffer capacity
+     */
+    public static <T> ReplayRelay<T> create(int capacityHint) {
+        return new ReplayRelay<T>(new UnboundedReplayBuffer<T>(capacityHint));
+    }
+
+    /**
+     * Creates a size-bounded replay relay.
+     * <p>
+     * In this setting, the {@code ReplayRelay} holds at most {@code size} items in its internal buffer and
+     * discards the oldest item.
+     * <p>
+     * When observers subscribe to a terminated {@code ReplayRelay}, they are guaranteed to see at most
+     * {@code size} {@code onNext} events followed by a termination event.
+     * <p>
+     * If an observer subscribes while the {@code ReplayRelay} is active, it will observe all items in the
+     * buffer at that point in time and each item observed afterwards, even if the buffer evicts items due to
+     * the size constraint in the mean time. In other words, once an Observer subscribes, it will receive items
+     * without gaps in the sequence.
+     *
+     * @param maxSize
+     *          the maximum number of buffered items
+     */
+    public static <T> ReplayRelay<T> createWithSize(int maxSize) {
+        return new ReplayRelay<T>(new SizeBoundReplayBuffer<T>(maxSize));
+    }
+
+    /**
+     * Creates an unbounded replay replay with the bounded-implementation for testing purposes.
+     * <p>
+     * This variant behaves like the regular unbounded {@code ReplayRelay} created via {@link #create()} but
+     * uses the structures of the bounded-implementation. This is by no means intended for the replacement of
+     * the original, array-backed and unbounded {@code ReplayRelay} due to the additional overhead of the
+     * linked-list based internal buffer. The sole purpose is to allow testing and reasoning about the behavior
+     * of the bounded implementations without the interference of the eviction policies.
+     */
+    /* test */ static <T> ReplayRelay<T> createUnbounded() {
+        return new ReplayRelay<T>(new SizeBoundReplayBuffer<T>(Integer.MAX_VALUE));
+    }
+
+    /**
+     * Creates a time-bounded replay relay.
+     * <p>
+     * In this setting, the {@code ReplayRelay} internally tags each observed item with a timestamp value
+     * supplied by the {@link Scheduler} and keeps only those whose age is less than the supplied time value
+     * converted to milliseconds. For example, an item arrives at T=0 and the max age is set to 5; at T&gt;=5
+     * this first item is then evicted by any subsequent item or termination event, leaving the buffer empty.
+     * <p>
+     * Once the subject is terminated, observers subscribing to it will receive items that remained in the
+     * buffer after the terminal event, regardless of their age.
+     * <p>
+     * If an observer subscribes while the {@code ReplayRelay} is active, it will observe only those items
+     * from within the buffer that have an age less than the specified time, and each item observed thereafter,
+     * even if the buffer evicts items due to the time constraint in the mean time. In other words, once an
+     * observer subscribes, it observes items without gaps in the sequence except for any outdated items at the
+     * beginning of the sequence.
+     * <p>
+     * Note that terminal notifications ({@code onError} and {@code onComplete}) trigger eviction as well. For
+     * example, with a max age of 5, the first item is observed at T=0, then an {@code onComplete} notification
+     * arrives at T=10. If an observer subscribes at T=11, it will find an empty {@code ReplayRelay} with just
+     * an {@code onComplete} notification.
+     *
+     * @param maxAge
+     *          the maximum age of the contained items
+     * @param unit
+     *          the time unit of {@code time}
+     * @param scheduler
+     *          the {@link Scheduler} that provides the current time
+     */
+    public static <T> ReplayRelay<T> createWithTime(long maxAge, TimeUnit unit, Scheduler scheduler) {
+        return new ReplayRelay<T>(new SizeAndTimeBoundReplayBuffer<T>(Integer.MAX_VALUE, maxAge, unit, scheduler));
+    }
+
+    /**
+     * Creates a time- and size-bounded replay subject.
+     * <p>
+     * In this setting, the {@code ReplayRelay} internally tags each received item with a timestamp value
+     * supplied by the {@link Scheduler} and holds at most {@code size} items in its internal buffer. It evicts
+     * items from the start of the buffer if their age becomes less-than or equal to the supplied age in
+     * milliseconds or the buffer reaches its {@code size} limit.
+     * <p>
+     * When observers subscribe to a terminated {@code ReplayRelay}, they observe the items that remained in
+     * the buffer after the terminal notification, regardless of their age, but at most {@code size} items.
+     * <p>
+     * If an observer subscribes while the {@code ReplayRelay} is active, it will observe only those items
+     * from within the buffer that have age less than the specified time and each subsequent item, even if the
+     * buffer evicts items due to the time constraint in the mean time. In other words, once an observer
+     * subscribes, it observes items without gaps in the sequence except for the outdated items at the beginning
+     * of the sequence.
+     * <p>
+     * Note that terminal notifications ({@code onError} and {@code onComplete}) trigger eviction as well. For
+     * example, with a max age of 5, the first item is observed at T=0, then an {@code onComplete} notification
+     * arrives at T=10. If an observer subscribes at T=11, it will find an empty {@code ReplayRelay} with just
+     * an {@code onComplete} notification.
+     *
+     * @param maxAge
+     *          the maximum age of the contained items
+     * @param unit
+     *          the time unit of {@code time}
+     * @param maxSize
+     *          the maximum number of buffered items
+     * @param scheduler
+     *          the {@link Scheduler} that provides the current time
+     */
+    public static <T> ReplayRelay<T> createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize) {
+        return new ReplayRelay<T>(new SizeAndTimeBoundReplayBuffer<T>(maxSize, maxAge, unit, scheduler));
+    }
+
+    /**
+     * Constructs a ReplayRelay with the given custom ReplayBuffer instance.
+     * @param buffer the ReplayBuffer instance, not null (not verified)
+     */
+    @SuppressWarnings("unchecked") ReplayRelay(ReplayBuffer<T> buffer) {
+        this.buffer = buffer;
+        this.observers = new AtomicReference<ReplayDisposable<T>[]>(EMPTY);
+    }
+
+    @Override
+    protected void subscribeActual(Observer<? super T> observer) {
+        ReplayDisposable<T> rs = new ReplayDisposable<T>(observer, this);
+        observer.onSubscribe(rs);
+
+        if (!rs.cancelled) {
+            if (add(rs)) {
+                if (rs.cancelled) {
+                    remove(rs);
+                    return;
+                }
+            }
+            buffer.replay(rs);
+        }
+    }
+
+    @Override
+    public void accept(T value) {
+        if (value == null) throw new NullPointerException("value == null");
+
+        ReplayBuffer<T> b = buffer;
+        b.add(value);
+
+        for (ReplayDisposable<T> rs : observers.get()) {
+            b.replay(rs);
+        }
+    }
+
+    @Override
+    public boolean hasObservers() {
+        return observers.get().length != 0;
+    }
+
+    /* test */ int observerCount() {
+        return observers.get().length;
+    }
+
+    /**
+     * Returns a single value the Relay currently has or null if no such value exists.
+     * <p>The method is thread-safe.
+     */
+    @Nullable
+    public T getValue() {
+        return buffer.getValue();
+    }
+
+    /** An empty array to avoid allocation in getValues(). */
+    private static final Object[] EMPTY_ARRAY = new Object[0];
+
+    /**
+     * Returns an Object array containing snapshot all values of the Relay.
+     * <p>The method is thread-safe.
+     */
+    public Object[] getValues() {
+        @SuppressWarnings("unchecked")
+        T[] a = (T[])EMPTY_ARRAY;
+        T[] b = getValues(a);
+        if (b == EMPTY_ARRAY) {
+            return new Object[0];
+        }
+        return b;
+
+    }
+
+    /**
+     * Returns a typed array containing a snapshot of all values of the Relay.
+     * <p>The method follows the conventions of Collection.toArray by setting the array element
+     * after the last value to null (if the capacity permits).
+     * <p>The method is thread-safe.
+     * @param array the target array to copy values into if it fits
+     */
+    public T[] getValues(T[] array) {
+        return buffer.getValues(array);
+    }
+
+    /**
+     * Returns true if the relay has any value.
+     * <p>The method is thread-safe.
+     */
+    public boolean hasValue() {
+        return buffer.size() != 0; // NOPMD
+    }
+
+    /* test*/ int size() {
+        return buffer.size();
+    }
+
+    boolean add(ReplayDisposable<T> rs) {
+        for (;;) {
+            ReplayDisposable<T>[] a = observers.get();
+            int len = a.length;
+            @SuppressWarnings("unchecked")
+            ReplayDisposable<T>[] b = new ReplayDisposable[len + 1];
+            System.arraycopy(a, 0, b, 0, len);
+            b[len] = rs;
+            if (observers.compareAndSet(a, b)) {
+                return true;
+            }
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    void remove(ReplayDisposable<T> rs) {
+        for (;;) {
+            ReplayDisposable<T>[] a = observers.get();
+            if (a == EMPTY) {
+                return;
+            }
+            int len = a.length;
+            int j = -1;
+            for (int i = 0; i < len; i++) {
+                if (a[i] == rs) {
+                    j = i;
+                    break;
+                }
+            }
+
+            if (j < 0) {
+                return;
+            }
+            ReplayDisposable<T>[] b;
+            if (len == 1) {
+                b = EMPTY;
+            } else {
+                b = new ReplayDisposable[len - 1];
+                System.arraycopy(a, 0, b, 0, j);
+                System.arraycopy(a, j + 1, b, j, len - j - 1);
+            }
+            if (observers.compareAndSet(a, b)) {
+                return;
+            }
+        }
+    }
+
+    /**
+     * Abstraction over a buffer that receives events and replays them to
+     * individual Observers.
+     */
+    interface ReplayBuffer<T> {
+
+        void add(T value);
+
+        void replay(ReplayDisposable<T> rs);
+
+        int size();
+
+        @Nullable
+        T getValue();
+
+        T[] getValues(T[] array);
+    }
+
+    static final class ReplayDisposable<T> extends AtomicInteger implements Disposable {
+
+        private static final long serialVersionUID = 466549804534799122L;
+        final Observer<? super T> actual;
+        final ReplayRelay<T> state;
+
+        Object index;
+
+        volatile boolean cancelled;
+
+        ReplayDisposable(Observer<? super T> actual, ReplayRelay<T> state) {
+            this.actual = actual;
+            this.state = state;
+        }
+
+        @Override
+        public void dispose() {
+            if (!cancelled) {
+                cancelled = true;
+                state.remove(this);
+            }
+        }
+
+        @Override
+        public boolean isDisposed() {
+            return cancelled;
+        }
+    }
+
+    static final class UnboundedReplayBuffer<T>
+    extends AtomicReference<Object>
+    implements ReplayBuffer<T> {
+
+        private static final long serialVersionUID = -733876083048047795L;
+
+        final List<T> buffer;
+
+        volatile int size;
+
+        UnboundedReplayBuffer(int capacityHint) {
+            if (capacityHint <= 0) throw new IllegalArgumentException("capacityHint <= 0");
+            this.buffer = new ArrayList<T>(capacityHint);
+        }
+
+        @Override
+        public void add(T value) {
+            buffer.add(value);
+            size++;
+        }
+
+        @Override
+        @Nullable
+        @SuppressWarnings("unchecked")
+        public T getValue() {
+            int s = size;
+            if (s != 0) {
+                return buffer.get(s - 1);
+            }
+            return null;
+        }
+
+        @Override
+        @SuppressWarnings("unchecked")
+        public T[] getValues(T[] array) {
+            int s = size;
+            if (s == 0) {
+                if (array.length != 0) {
+                    array[0] = null;
+                }
+                return array;
+            }
+
+            if (array.length < s) {
+                array = (T[]) Array.newInstance(array.getClass().getComponentType(), s);
+            }
+            List<T> b = buffer;
+            for (int i = 0; i < s; i++) {
+                array[i] = b.get(i);
+            }
+            if (array.length > s) {
+                array[s] = null;
+            }
+
+            return array;
+        }
+
+        @Override
+        @SuppressWarnings("unchecked")
+        public void replay(ReplayDisposable<T> rs) {
+            if (rs.getAndIncrement() != 0) {
+                return;
+            }
+
+            int missed = 1;
+            final List<T> b = buffer;
+            final Observer<? super T> a = rs.actual;
+
+            Integer indexObject = (Integer)rs.index;
+            int index;
+            if (indexObject != null) {
+                index = indexObject;
+            } else {
+                index = 0;
+                rs.index = 0;
+            }
+
+            for (;;) {
+
+                if (rs.cancelled) {
+                    rs.index = null;
+                    return;
+                }
+
+                int s = size;
+
+                while (s != index) {
+
+                    if (rs.cancelled) {
+                        rs.index = null;
+                        return;
+                    }
+
+                    T o = b.get(index);
+
+                    a.onNext((T)o);
+                    index++;
+                }
+
+                if (index != size) {
+                    continue;
+                }
+
+                rs.index = index;
+
+                missed = rs.addAndGet(-missed);
+                if (missed == 0) {
+                    break;
+                }
+            }
+        }
+
+        @Override
+        public int size() {
+            int s = size;
+            return s != 0 ? s : 0;
+        }
+    }
+
+    static final class Node<T> extends AtomicReference<Node<T>> {
+
+        private static final long serialVersionUID = 6404226426336033100L;
+
+        final T value;
+
+        Node(T value) {
+            this.value = value;
+        }
+    }
+
+    static final class TimedNode<T> extends AtomicReference<TimedNode<T>> {
+
+        private static final long serialVersionUID = 6404226426336033100L;
+
+        final T value;
+        final long time;
+
+        TimedNode(T value, long time) {
+            this.value = value;
+            this.time = time;
+        }
+    }
+
+    static final class SizeBoundReplayBuffer<T>
+    extends AtomicReference<Object>
+    implements ReplayBuffer<T> {
+
+        private static final long serialVersionUID = 1107649250281456395L;
+
+        final int maxSize;
+        int size;
+
+        volatile Node<T> head;
+
+        Node<T> tail;
+
+        SizeBoundReplayBuffer(int maxSize) {
+            if (maxSize <= 0) {
+                throw new IllegalArgumentException("maxSize > 0 required but it was " + maxSize);
+            }
+            this.maxSize = maxSize;
+            Node<T> h = new Node<T>(null);
+            this.tail = h;
+            this.head = h;
+        }
+
+        void trim() {
+            if (size > maxSize) {
+                size--;
+                Node<T> h = head;
+                head = h.get();
+            }
+        }
+
+        @Override
+        public void add(T value) {
+            Node<T> n = new Node<T>(value);
+            Node<T> t = tail;
+
+            tail = n;
+            size++;
+            t.set(n); // releases both the tail and size
+
+            trim();
+        }
+
+        @Override
+        @Nullable
+        @SuppressWarnings("unchecked")
+        public T getValue() {
+            Node<T> h = head;
+
+            for (;;) {
+                Node<T> next = h.get();
+                if (next == null) {
+                    break;
+                }
+                h = next;
+            }
+
+            return h.value;
+        }
+
+        @Override
+        @SuppressWarnings("unchecked")
+        public T[] getValues(T[] array) {
+            Node<T> h = head;
+            int s = size();
+
+            if (s == 0) {
+                if (array.length != 0) {
+                    array[0] = null;
+                }
+            } else {
+                if (array.length < s) {
+                    array = (T[]) Array.newInstance(array.getClass().getComponentType(), s);
+                }
+
+                int i = 0;
+                while (i != s) {
+                    Node<T> next = h.get();
+                    array[i] = (T)next.value;
+                    i++;
+                    h = next;
+                }
+                if (array.length > s) {
+                    array[s] = null;
+                }
+            }
+
+            return array;
+        }
+
+        @Override
+        @SuppressWarnings("unchecked")
+        public void replay(ReplayDisposable<T> rs) {
+            if (rs.getAndIncrement() != 0) {
+                return;
+            }
+
+            int missed = 1;
+            final Observer<? super T> a = rs.actual;
+
+            Node<T> index = (Node<T>)rs.index;
+            if (index == null) {
+                index = head;
+            }
+
+            for (;;) {
+
+                for (;;) {
+                    if (rs.cancelled) {
+                        rs.index = null;
+                        return;
+                    }
+
+                    Node<T> n = index.get();
+
+                    if (n == null) {
+                        break;
+                    }
+
+                    T o = n.value;
+
+                    a.onNext((T)o);
+
+                    index = n;
+                }
+
+                if (index.get() != null) {
+                    continue;
+                }
+
+                rs.index = index;
+
+                missed = rs.addAndGet(-missed);
+                if (missed == 0) {
+                    break;
+                }
+            }
+        }
+
+        @Override
+        public int size() {
+            int s = 0;
+            Node<T> h = head;
+            while (s != Integer.MAX_VALUE) {
+                Node<T> next = h.get();
+                if (next == null) {
+                    break;
+                }
+                s++;
+                h = next;
+            }
+
+            return s;
+        }
+    }
+
+    static final class SizeAndTimeBoundReplayBuffer<T>
+    extends AtomicReference<Object>
+    implements ReplayBuffer<T> {
+
+        private static final long serialVersionUID = -8056260896137901749L;
+
+        final int maxSize;
+        final long maxAge;
+        final TimeUnit unit;
+        final Scheduler scheduler;
+        int size;
+
+        volatile TimedNode<T> head;
+
+        TimedNode<T> tail;
+
+        SizeAndTimeBoundReplayBuffer(int maxSize, long maxAge, TimeUnit unit, Scheduler scheduler) {
+            if (maxSize <= 0) {
+                throw new IllegalArgumentException("maxSize > 0 required but it was " + maxSize);
+            }
+            if (maxAge <= 0) {
+                throw new IllegalArgumentException("maxAge > 0 required but it was " + maxAge);
+            }
+            if (unit == null) throw new NullPointerException("unit == null");
+            if (scheduler == null) throw new NullPointerException("scheduler == null");
+            this.maxSize = maxSize;
+            this.maxAge = maxAge;
+            this.unit = unit;
+            this.scheduler = scheduler;
+            TimedNode<T> h = new TimedNode<T>(null, 0L);
+            this.tail = h;
+            this.head = h;
+        }
+
+        void trim() {
+            if (size > maxSize) {
+                size--;
+                TimedNode<T> h = head;
+                head = h.get();
+            }
+            long limit = scheduler.now(unit) - maxAge;
+
+            TimedNode<T> h = head;
+
+            for (;;) {
+                TimedNode<T> next = h.get();
+                if (next == null) {
+                    head = h;
+                    break;
+                }
+
+                if (next.time > limit) {
+                    head = h;
+                    break;
+                }
+
+                h = next;
+            }
+
+        }
+
+        @Override
+        public void add(T value) {
+            TimedNode<T> n = new TimedNode<T>(value, scheduler.now(unit));
+            TimedNode<T> t = tail;
+
+            tail = n;
+            size++;
+            t.set(n); // releases both the tail and size
+
+            trim();
+        }
+
+        @Override
+        @Nullable
+        @SuppressWarnings("unchecked")
+        public T getValue() {
+            TimedNode<T> h = head;
+
+            for (;;) {
+                TimedNode<T> next = h.get();
+                if (next == null) {
+                    break;
+                }
+                h = next;
+            }
+
+            return h.value;
+        }
+
+        @Override
+        @SuppressWarnings("unchecked")
+        public T[] getValues(T[] array) {
+            TimedNode<T> h = head;
+            int s = size();
+
+            if (s == 0) {
+                if (array.length != 0) {
+                    array[0] = null;
+                }
+            } else {
+                if (array.length < s) {
+                    array = (T[]) Array.newInstance(array.getClass().getComponentType(), s);
+                }
+
+                int i = 0;
+                while (i != s) {
+                    TimedNode<T> next = h.get();
+                    array[i] = next.value;
+                    i++;
+                    h = next;
+                }
+                if (array.length > s) {
+                    array[s] = null;
+                }
+            }
+
+            return array;
+        }
+
+        @Override
+        @SuppressWarnings("unchecked")
+        public void replay(ReplayDisposable<T> rs) {
+            if (rs.getAndIncrement() != 0) {
+                return;
+            }
+
+            int missed = 1;
+            final Observer<? super T> a = rs.actual;
+
+            TimedNode<T> index = (TimedNode<T>)rs.index;
+            if (index == null) {
+                index = head;
+                // skip old entries
+                long limit = scheduler.now(unit) - maxAge;
+                TimedNode<T> next = index.get();
+                while (next != null) {
+                    long ts = next.time;
+                    if (ts > limit) {
+                        break;
+                    }
+                    index = next;
+                    next = index.get();
+                }
+            }
+
+            for (;;) {
+
+                if (rs.cancelled) {
+                    rs.index = null;
+                    return;
+                }
+
+                for (;;) {
+                    if (rs.cancelled) {
+                        rs.index = null;
+                        return;
+                    }
+
+                    TimedNode<T> n = index.get();
+
+                    if (n == null) {
+                        break;
+                    }
+
+                    T o = n.value;
+
+                    a.onNext(o);
+
+                    index = n;
+                }
+
+                if (index.get() != null) {
+                    continue;
+                }
+
+                rs.index = index;
+
+                missed = rs.addAndGet(-missed);
+                if (missed == 0) {
+                    break;
+                }
+            }
+        }
+
+        @Override
+        public int size() {
+            int s = 0;
+            TimedNode<T> h = head;
+            while (s != Integer.MAX_VALUE) {
+                TimedNode<T> next = h.get();
+                if (next == null) {
+                    break;
+                }
+                s++;
+                h = next;
+            }
+
+            return s;
+        }
+    }
+}
diff --git a/sample/src/main/java/com/jakewharton/rxrelay2/SerializedRelay.java b/sample/src/main/java/com/jakewharton/rxrelay2/SerializedRelay.java
new file mode 100644
index 0000000..439b59a
--- /dev/null
+++ b/sample/src/main/java/com/jakewharton/rxrelay2/SerializedRelay.java
@@ -0,0 +1,81 @@
+/**
+ * Copyright 2016 Netflix, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package com.jakewharton.rxrelay2;
+
+import io.reactivex.Observer;
+
+/**
+ * Serializes calls to the Consumer methods.
+ * <p>All other Relay methods are thread-safe by design.
+ */
+/* public */ final class SerializedRelay<T> extends Relay<T> {
+    /** The actual subscriber to serialize Subscriber calls to. */
+    private final Relay<T> actual;
+    /** Indicates an emission is going on, guarded by this. */
+    private boolean emitting;
+    /** If not null, it holds the missed NotificationLite events. */
+    private AppendOnlyLinkedArrayList<T> queue;
+
+    /**
+     * Constructor that wraps an actual relay.
+     */
+    SerializedRelay(final Relay<T> actual) {
+        this.actual = actual;
+    }
+
+    @Override
+    protected void subscribeActual(Observer<? super T> observer) {
+        actual.subscribe(observer);
+    }
+
+
+    @Override
+    public void accept(T value) {
+        synchronized (this) {
+            if (emitting) {
+                AppendOnlyLinkedArrayList<T> q = queue;
+                if (q == null) {
+                    q = new AppendOnlyLinkedArrayList<T>(4);
+                    queue = q;
+                }
+                q.add(value);
+                return;
+            }
+            emitting = true;
+        }
+        actual.accept(value);
+        emitLoop();
+    }
+
+    /** Loops until all notifications in the queue has been processed. */
+    private void emitLoop() {
+        for (;;) {
+            AppendOnlyLinkedArrayList<T> q;
+            synchronized (this) {
+                q = queue;
+                if (q == null) {
+                    emitting = false;
+                    return;
+                }
+                queue = null;
+            }
+            q.accept(actual);
+        }
+    }
+
+    @Override
+    public boolean hasObservers() {
+        return actual.hasObservers();
+    }
+}
