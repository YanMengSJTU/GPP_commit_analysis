diff --git a/build.gradle b/build.gradle
index 4b58bef..c2796b3 100644
--- a/build.gradle
+++ b/build.gradle
@@ -17,7 +17,7 @@ buildscript {
         classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
 
         classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
-        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
+        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'
     }
 }
 
@@ -26,9 +26,9 @@ allprojects {
         mavenCentral()
         google()
         jcenter()
-        maven {
+        /*maven {
             url "https://dl.bintray.com/ggg1234567/maven"
-        }
+        }*/
     }
 
     group = GROUP
diff --git a/daosupport/.gitignore b/daosupport/.gitignore
new file mode 100644
index 0000000..3543521
--- /dev/null
+++ b/daosupport/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/daosupport/build.gradle b/daosupport/build.gradle
new file mode 100644
index 0000000..466c2d5
--- /dev/null
+++ b/daosupport/build.gradle
@@ -0,0 +1,63 @@
+apply plugin: 'com.android.library'
+apply plugin: 'maven'
+
+dependencies {
+    provided project(':sqlbrite')
+    implementation rootProject.ext.supportAnnotations
+
+    androidTestImplementation rootProject.ext.supportTestRunner
+    androidTestImplementation rootProject.ext.truth
+    androidTestImplementation rootProject.ext.supportSqliteFramework
+
+    lintChecks project(':sqlbrite-lint')
+}
+
+android {
+    compileSdkVersion versions.compileSdk
+
+    defaultConfig {
+        minSdkVersion versions.minSdk
+
+        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
+    }
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_7
+        targetCompatibility JavaVersion.VERSION_1_7
+    }
+
+    lintOptions {
+        textOutput 'stdout'
+        textReport true
+    }
+}
+
+//apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
+
+
+ext {
+    bintrayRepo = 'maven'
+    bintrayName = 'daosupport'
+
+    publishedGroupId = 'com.squareup.sqlbrite3.support.dao'
+    libraryName = 'daosupport'
+    artifact = 'daosupport'
+
+    libraryDescription = 'A wrapper for Facebook Native Like Button (LikeView) on Android'
+
+    siteUrl = 'https://github.com/Guang1234567/sqlbrite'
+    gitUrl = 'https://github.com/Guang1234567/sqlbrite.git'
+
+    libraryVersion = '1.1.1'
+
+    developerId = 'GG1234567'
+    developerName = 'GG1234567'
+    developerEmail = 'lihansey163@163.com'
+
+    licenseName = 'The MIT License'
+    licenseUrl = 'https://mit-license.org/'
+    allLicenses = ["MIT"]
+}
+
+apply from: '../installv1.gradle'
+apply from: '../bintrayv1.gradle'
diff --git a/daosupport/proguard-rules.pro b/daosupport/proguard-rules.pro
new file mode 100644
index 0000000..6e7ffa9
--- /dev/null
+++ b/daosupport/proguard-rules.pro
@@ -0,0 +1,21 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
diff --git a/daosupport/src/androidTest/java/android/arch/persistence/db/support/dao/ExampleInstrumentedTest.java b/daosupport/src/androidTest/java/android/arch/persistence/db/support/dao/ExampleInstrumentedTest.java
new file mode 100644
index 0000000..8a3c958
--- /dev/null
+++ b/daosupport/src/androidTest/java/android/arch/persistence/db/support/dao/ExampleInstrumentedTest.java
@@ -0,0 +1,26 @@
+package android.arch.persistence.db.support.dao;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumented test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+    @Test
+    public void useAppContext() throws Exception {
+        // Context of the app under test.
+        Context appContext = InstrumentationRegistry.getTargetContext();
+
+        assertEquals("android.arch.persistence.db.support.dao.test", appContext.getPackageName());
+    }
+}
diff --git a/daosupport/src/main/AndroidManifest.xml b/daosupport/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..77adc75
--- /dev/null
+++ b/daosupport/src/main/AndroidManifest.xml
@@ -0,0 +1,2 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="com.squareup.sqlbrite3.support.dao"/>
diff --git a/daosupport/src/main/java/com/squareup/sqlbrite3/support/dao/BriteDaoSupport.java b/daosupport/src/main/java/com/squareup/sqlbrite3/support/dao/BriteDaoSupport.java
new file mode 100644
index 0000000..f7bbd39
--- /dev/null
+++ b/daosupport/src/main/java/com/squareup/sqlbrite3/support/dao/BriteDaoSupport.java
@@ -0,0 +1,126 @@
+package com.squareup.sqlbrite3.support.dao;
+
+import android.content.ContentValues;
+import android.database.Cursor;
+import android.provider.BaseColumns;
+import android.support.annotation.CheckResult;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.squareup.sqlbrite3.BriteDatabase;
+import com.squareup.sqlbrite3.QueryObservable;
+
+import java.lang.reflect.ParameterizedType;
+import java.util.LinkedList;
+import java.util.List;
+
+import static android.database.sqlite.SQLiteDatabase.CONFLICT_NONE;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/5 15:21
+ */
+
+public abstract class BriteDaoSupport<ENTITY> {
+    private BriteDatabase mDatabase;
+
+    private Class mEntityClazz;
+
+    private String mTableName;
+
+    private final String SQL_QUERY;
+
+    public BriteDaoSupport(BriteDatabase database) {
+        mDatabase = database;
+
+        ParameterizedType type = (ParameterizedType) this.getClass().getGenericSuperclass();
+        mEntityClazz = (Class) type.getActualTypeArguments()[0];
+
+        mTableName = getTableName(mEntityClazz);
+
+        SQL_QUERY = new StringBuilder("SELECT * FROM ").append(mTableName).toString();
+    }
+
+    final public long insert(ENTITY t) {
+        ContentValues cvsWithoutRowId = toContentValues(t);
+        cvsWithoutRowId.remove(BaseColumns._ID);
+        return mDatabase.insert(mTableName, CONFLICT_NONE, cvsWithoutRowId);
+    }
+
+    final public int deleteById(long rowId) {
+        return mDatabase.delete(mTableName, BaseColumns._ID + " = " + rowId);
+    }
+
+    final protected int delete(@Nullable String whereClause,
+                               @Nullable String... whereArgs) {
+        return mDatabase.delete(mTableName, whereClause, whereArgs);
+    }
+
+    final public int update(ENTITY t) {
+        return mDatabase.update(mTableName,
+                CONFLICT_NONE,
+                toContentValues(t),
+                BaseColumns._ID + " = ?",
+                new String[]{String.valueOf(getRowId(t))});
+    }
+
+    protected int update(int conflictAlgorithm,
+                         @NonNull ContentValues values, @Nullable String whereClause, @Nullable String... whereArgs) {
+        return mDatabase.update(mTableName,
+                conflictAlgorithm,
+                values,
+                whereClause,
+                whereArgs);
+    }
+
+    @CheckResult
+    @Nullable
+    final public ENTITY queryById(long rowId) {
+        ENTITY e = null;
+        Cursor cursor = mDatabase.query(SQL_QUERY);
+        if (cursor != null && !cursor.isClosed()) {
+            if (cursor.moveToFirst()) {
+                e = toEntity(cursor);
+            }
+            cursor.close();
+        }
+        return e;
+    }
+
+    @NonNull
+    final protected List<ENTITY> query(@NonNull String sql, @NonNull Object... args) {
+        List<ENTITY> result = new LinkedList<>();
+        Cursor c = mDatabase.query(sql, args);
+        if (c != null && !c.isClosed()) {
+            if (c.getCount() > 0) {
+                while (c.moveToNext()) {
+                    result.add(toEntity(c));
+                }
+            }
+            c.close();
+        }
+        return result;
+    }
+
+    @CheckResult
+    @NonNull
+    final protected QueryObservable createQuery(@NonNull String sql,
+                                                @NonNull Object... args) {
+        return mDatabase.createQuery(mTableName, sql, args);
+    }
+
+    @CheckResult
+    @NonNull
+    final protected QueryObservable createQuery(@NonNull final Iterable<String> tables, @NonNull String sql,
+                                                @NonNull Object... args) {
+        return mDatabase.createQuery(tables, sql, args);
+    }
+
+    protected abstract ContentValues toContentValues(ENTITY e);
+
+    protected abstract ENTITY toEntity(Cursor cursor);
+
+    protected abstract long getRowId(ENTITY e);
+
+    protected abstract String getTableName(Class<ENTITY> clazz);
+}
diff --git a/daosupport/src/main/java/com/squareup/sqlbrite3/support/dao/DbUtils.java b/daosupport/src/main/java/com/squareup/sqlbrite3/support/dao/DbUtils.java
new file mode 100644
index 0000000..35febd7
--- /dev/null
+++ b/daosupport/src/main/java/com/squareup/sqlbrite3/support/dao/DbUtils.java
@@ -0,0 +1,28 @@
+package com.squareup.sqlbrite3.support.dao;
+
+import android.database.Cursor;
+
+public final class DbUtils {
+    public static final int BOOLEAN_FALSE = 0;
+    public static final int BOOLEAN_TRUE = 1;
+
+    public static String getString(Cursor cursor, String columnName) {
+        return cursor.getString(cursor.getColumnIndexOrThrow(columnName));
+    }
+
+    public static boolean getBoolean(Cursor cursor, String columnName) {
+        return getInt(cursor, columnName) == BOOLEAN_TRUE;
+    }
+
+    public static long getLong(Cursor cursor, String columnName) {
+        return cursor.getLong(cursor.getColumnIndexOrThrow(columnName));
+    }
+
+    public static int getInt(Cursor cursor, String columnName) {
+        return cursor.getInt(cursor.getColumnIndexOrThrow(columnName));
+    }
+
+    private DbUtils() {
+        throw new AssertionError("No instances.");
+    }
+}
diff --git a/daosupport/src/main/res/values/strings.xml b/daosupport/src/main/res/values/strings.xml
new file mode 100644
index 0000000..155b0c2
--- /dev/null
+++ b/daosupport/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">DaoSupport</string>
+</resources>
diff --git a/daosupport/src/test/java/android/arch/persistence/db/support/dao/ExampleUnitTest.java b/daosupport/src/test/java/android/arch/persistence/db/support/dao/ExampleUnitTest.java
new file mode 100644
index 0000000..9266813
--- /dev/null
+++ b/daosupport/src/test/java/android/arch/persistence/db/support/dao/ExampleUnitTest.java
@@ -0,0 +1,17 @@
+package android.arch.persistence.db.support.dao;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
diff --git a/sample/build.gradle b/sample/build.gradle
index f49fb82..2d8a147 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -19,6 +19,7 @@ dependencies {
     annotationProcessor rootProject.ext.autoValueParcel
 
     implementation project(':sqlbrite')
+    implementation project(':daosupport')
     implementation rootProject.ext.supportSqliteFramework
 
     //implementation project(':sqlbrite-sqlcipher-integration')
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java b/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
index 29d2320..48b257e 100644
Binary files a/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java and b/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java differ
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoItem.java b/sample/src/main/java/com/example/sqlbrite/todo/db/TodoItem.java
index a40771f..7b244b9 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoItem.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/db/TodoItem.java
@@ -18,58 +18,77 @@
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.os.Parcelable;
+
 import com.google.auto.value.AutoValue;
+
 import io.reactivex.functions.Function;
 
 @AutoValue
 public abstract class TodoItem implements Parcelable {
-  public static final String TABLE = "todo_item";
-
-  public static final String ID = "_id";
-  public static final String LIST_ID = "todo_list_id";
-  public static final String DESCRIPTION = "description";
-  public static final String COMPLETE = "complete";
-
-  public abstract long id();
-  public abstract long listId();
-  public abstract String description();
-  public abstract boolean complete();
-
-  public static final Function<Cursor, TodoItem> MAPPER = new Function<Cursor, TodoItem>() {
-    @Override public TodoItem apply(Cursor cursor) {
-      long id = Db.getLong(cursor, ID);
-      long listId = Db.getLong(cursor, LIST_ID);
-      String description = Db.getString(cursor, DESCRIPTION);
-      boolean complete = Db.getBoolean(cursor, COMPLETE);
-      return new AutoValue_TodoItem(id, listId, description, complete);
-    }
-  };
+    public static final String TABLE = "todo_item";
 
-  public static final class Builder {
-    private final ContentValues values = new ContentValues();
+    public static final String ID = "_id";
+    public static final String LIST_ID = "todo_list_id";
+    public static final String DESCRIPTION = "description";
+    public static final String COMPLETE = "complete";
 
-    public Builder id(long id) {
-      values.put(ID, id);
-      return this;
-    }
+    public abstract long id();
 
-    public Builder listId(long listId) {
-      values.put(LIST_ID, listId);
-      return this;
-    }
+    public abstract long listId();
+
+    public abstract String description();
+
+    public abstract boolean complete();
 
-    public Builder description(String description) {
-      values.put(DESCRIPTION, description);
-      return this;
+    public static final class Builder {
+        private final ContentValues values = new ContentValues();
+
+        public Builder id(long id) {
+            values.put(ID, id);
+            return this;
+        }
+
+        public Builder listId(long listId) {
+            values.put(LIST_ID, listId);
+            return this;
+        }
+
+        public Builder description(String description) {
+            values.put(DESCRIPTION, description);
+            return this;
+        }
+
+        public Builder complete(boolean complete) {
+            values.put(COMPLETE, complete ? Db.BOOLEAN_TRUE : Db.BOOLEAN_FALSE);
+            return this;
+        }
+
+        public ContentValues build() {
+            return values; // TODO defensive copy?
+        }
     }
 
-    public Builder complete(boolean complete) {
-      values.put(COMPLETE, complete ? Db.BOOLEAN_TRUE : Db.BOOLEAN_FALSE);
-      return this;
+    static Function<Cursor, TodoItem> MAPPER = new Function<Cursor, TodoItem>() {
+        @Override
+        public TodoItem apply(Cursor cursor) {
+            return toEntity(cursor);
+        }
+    };
+
+    static TodoItem toEntity(Cursor cursor) {
+        long id = Db.getLong(cursor, ID);
+        long listId = Db.getLong(cursor, LIST_ID);
+        String description = Db.getString(cursor, DESCRIPTION);
+        boolean complete = Db.getBoolean(cursor, COMPLETE);
+        return new AutoValue_TodoItem(id, listId, description, complete);
     }
 
-    public ContentValues build() {
-      return values; // TODO defensive copy?
+    ContentValues toContentValues() {
+        return new TodoItem.Builder()
+                .id(id())
+                .complete(complete())
+                .listId(listId())
+                .description(description())
+                .build();
     }
-  }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoItemDao.java b/sample/src/main/java/com/example/sqlbrite/todo/db/TodoItemDao.java
new file mode 100644
index 0000000..85cfd1a
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/db/TodoItemDao.java
@@ -0,0 +1,100 @@
+package com.example.sqlbrite.todo.db;
+
+import android.content.ContentValues;
+import android.database.Cursor;
+
+import com.squareup.sqlbrite3.BriteDatabase;
+import com.squareup.sqlbrite3.SqlBrite;
+import com.squareup.sqlbrite3.support.dao.BriteDaoSupport;
+
+import java.util.List;
+
+import io.reactivex.Observable;
+import io.reactivex.functions.Function;
+
+import static android.database.sqlite.SQLiteDatabase.CONFLICT_NONE;
+
+/**
+ * @author Administrator
+ * @date 2018/3/5 18:04
+ */
+
+public class TodoItemDao extends BriteDaoSupport<TodoItem> {
+
+    public TodoItemDao(BriteDatabase database) {
+        super(database);
+    }
+
+    @Override
+    protected ContentValues toContentValues(TodoItem e) {
+        return e.toContentValues();
+    }
+
+    @Override
+    protected TodoItem toEntity(Cursor cursor) {
+        return TodoItem.toEntity(cursor);
+    }
+
+    @Override
+    protected long getRowId(TodoItem e) {
+        return e.id();
+    }
+
+    @Override
+    protected String getTableName(Class<TodoItem> clazz) {
+        return TodoItem.TABLE;
+    }
+
+
+    //------------------------------------------------------------
+    // 业务逻辑
+    //------------------------------------------------------------
+
+
+    public boolean complete(long id, boolean complete) {
+        return update(CONFLICT_NONE,
+                new TodoItem.Builder().complete(complete).build(), TodoItem.ID + " = ?",
+                String.valueOf(id)) > 0;
+    }
+
+    private static final String COUNT_QUERY = "SELECT COUNT(*) FROM "
+            + TodoItem.TABLE
+            + " WHERE "
+            + TodoItem.COMPLETE
+            + " = "
+            + Db.BOOLEAN_FALSE
+            + " AND "
+            + TodoItem.LIST_ID
+            + " = ?";
+
+    public Observable<Integer> itemCount(long listId) {
+        return createQuery(COUNT_QUERY, listId) //
+                .map(new Function<SqlBrite.Query, Integer>() {
+                    @Override
+                    public Integer apply(SqlBrite.Query query) {
+                        Cursor cursor = query.run();
+                        try {
+                            if (!cursor.moveToNext()) {
+                                throw new AssertionError("No rows");
+                            }
+                            return cursor.getInt(0);
+                        } finally {
+                            cursor.close();
+                        }
+                    }
+                });
+    }
+
+    private static final String LIST_QUERY = "SELECT * FROM "
+            + TodoItem.TABLE
+            + " WHERE "
+            + TodoItem.LIST_ID
+            + " = ? ORDER BY "
+            + TodoItem.COMPLETE
+            + " ASC";
+
+    public Observable<List<TodoItem>> createTodoItemsByListId(long listId) {
+        return createQuery(LIST_QUERY, listId)
+                .mapToList(TodoItem.MAPPER);
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoList.java b/sample/src/main/java/com/example/sqlbrite/todo/db/TodoList.java
index 8d60760..5b40973 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoList.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/db/TodoList.java
@@ -16,42 +16,71 @@
 package com.example.sqlbrite.todo.db;
 
 import android.content.ContentValues;
+import android.database.Cursor;
 import android.os.Parcelable;
+
 import com.google.auto.value.AutoValue;
+import com.squareup.sqlbrite3.support.dao.DbUtils;
+
+import io.reactivex.functions.Function;
 
 // Note: normally I wouldn't prefix table classes but I didn't want 'List' to be overloaded.
 @AutoValue
 public abstract class TodoList implements Parcelable {
-  public static final String TABLE = "todo_list";
+    public static final String TABLE = "todo_list";
 
-  public static final String ID = "_id";
-  public static final String NAME = "name";
-  public static final String ARCHIVED = "archived";
+    public static final String ID = "_id";
+    public static final String NAME = "name";
+    public static final String ARCHIVED = "archived";
 
-  public abstract long id();
-  public abstract String name();
-  public abstract boolean archived();
+    public abstract long id();
 
-  public static final class Builder {
-    private final ContentValues values = new ContentValues();
+    public abstract String name();
 
-    public Builder id(long id) {
-      values.put(ID, id);
-      return this;
-    }
+    public abstract boolean archived();
+
+    public static final class Builder {
+        private final ContentValues values = new ContentValues();
 
-    public Builder name(String name) {
-      values.put(NAME, name);
-      return this;
+        public Builder id(long id) {
+            values.put(ID, id);
+            return this;
+        }
+
+        public Builder name(String name) {
+            values.put(NAME, name);
+            return this;
+        }
+
+        public Builder archived(boolean archived) {
+            values.put(ARCHIVED, archived);
+            return this;
+        }
+
+        public ContentValues build() {
+            return values; // TODO defensive copy?
+        }
     }
 
-    public Builder archived(boolean archived) {
-      values.put(ARCHIVED, archived);
-      return this;
+    static Function<Cursor, TodoList> MAPPER = new Function<Cursor, TodoList>() {
+        @Override
+        public TodoList apply(Cursor cursor) {
+            return toEntity(cursor);
+        }
+    };
+
+    static TodoList toEntity(Cursor cursor) {
+        long id = DbUtils.getLong(cursor, TodoList.ID);
+        String name = DbUtils.getString(cursor, TodoList.NAME);
+        boolean archived = DbUtils.getBoolean(cursor, TodoList.ARCHIVED);
+        return new AutoValue_TodoList(id, name, archived);
     }
 
-    public ContentValues build() {
-      return values; // TODO defensive copy?
+    ContentValues toContentValues() {
+        return new TodoList.Builder()
+                .id(id())
+                .name(name())
+                .archived(archived())
+                .build();
     }
-  }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoListDao.java b/sample/src/main/java/com/example/sqlbrite/todo/db/TodoListDao.java
new file mode 100644
index 0000000..e2424fc
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/db/TodoListDao.java
@@ -0,0 +1,84 @@
+package com.example.sqlbrite.todo.db;
+
+import android.content.ContentValues;
+import android.database.Cursor;
+
+import com.example.sqlbrite.todo.ui.ListsItem;
+import com.squareup.sqlbrite3.BriteDatabase;
+import com.squareup.sqlbrite3.SqlBrite;
+import com.squareup.sqlbrite3.support.dao.BriteDaoSupport;
+
+import java.util.List;
+
+import io.reactivex.Observable;
+import io.reactivex.SingleSource;
+import io.reactivex.functions.Function;
+
+/**
+ * @author Administrator
+ * @date 2018/3/5 17:22
+ */
+
+public class TodoListDao extends BriteDaoSupport<TodoList> {
+
+    public TodoListDao(BriteDatabase database) {
+        super(database);
+    }
+
+    @Override
+    protected ContentValues toContentValues(TodoList e) {
+        return e.toContentValues();
+    }
+
+    @Override
+    protected TodoList toEntity(Cursor cursor) {
+        return TodoList.toEntity(cursor);
+    }
+
+    @Override
+    protected long getRowId(TodoList e) {
+        return e.id();
+    }
+
+    @Override
+    protected String getTableName(Class<TodoList> clazz) {
+        return TodoList.TABLE;
+    }
+
+
+    //------------------------------------------------------------
+    // 业务逻辑
+    //------------------------------------------------------------
+
+    public Observable<List<ListsItem>> createListsItemsQuery(final int max) {
+        return createQuery(ListsItem.TABLES, ListsItem.QUERY)
+                .flatMapSingle(new Function<SqlBrite.Query, SingleSource<List<ListsItem>>>() {
+                    @Override
+                    public SingleSource<List<ListsItem>> apply(SqlBrite.Query query) throws Exception {
+                        return query.asRows(ListsItem.MAPPER)
+                                .take(max)
+                                .toList();
+                    }
+                });
+    }
+
+    private static final String TITLE_QUERY =
+            "SELECT " + TodoList.NAME + " FROM " + TodoList.TABLE + " WHERE " + TodoList.ID + " = ?";
+
+    public Observable<String> listName(long listId) {
+        return createQuery(TITLE_QUERY, listId).map(new Function<SqlBrite.Query, String>() {
+            @Override
+            public String apply(SqlBrite.Query query) {
+                Cursor cursor = query.run();
+                try {
+                    if (!cursor.moveToNext()) {
+                        throw new AssertionError("No rows");
+                    }
+                    return cursor.getString(0);
+                } finally {
+                    cursor.close();
+                }
+            }
+        });
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
index 6e39d27..8db57fb 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
@@ -34,7 +34,9 @@
 import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.db.Db;
 import com.example.sqlbrite.todo.db.TodoItem;
+import com.example.sqlbrite.todo.db.TodoItemDao;
 import com.example.sqlbrite.todo.db.TodoList;
+import com.example.sqlbrite.todo.db.TodoListDao;
 import com.jakewharton.rxbinding2.widget.AdapterViewItemClickEvent;
 import com.jakewharton.rxbinding2.widget.RxAdapterView;
 import com.squareup.sqlbrite3.BriteDatabase;
@@ -54,24 +56,6 @@
 
 public final class ItemsFragment extends Fragment {
   private static final String KEY_LIST_ID = "list_id";
-  private static final String LIST_QUERY = "SELECT * FROM "
-      + TodoItem.TABLE
-      + " WHERE "
-      + TodoItem.LIST_ID
-      + " = ? ORDER BY "
-      + TodoItem.COMPLETE
-      + " ASC";
-  private static final String COUNT_QUERY = "SELECT COUNT(*) FROM "
-      + TodoItem.TABLE
-      + " WHERE "
-      + TodoItem.COMPLETE
-      + " = "
-      + Db.BOOLEAN_FALSE
-      + " AND "
-      + TodoItem.LIST_ID
-      + " = ?";
-  private static final String TITLE_QUERY =
-      "SELECT " + TodoList.NAME + " FROM " + TodoList.TABLE + " WHERE " + TodoList.ID + " = ?";
 
   public interface Listener {
     void onNewItemClicked(long listId);
@@ -86,7 +70,10 @@ public static ItemsFragment newInstance(long listId) {
     return fragment;
   }
 
-  @Inject BriteDatabase db;
+  @Inject
+  TodoItemDao todoItemDao;
+  @Inject
+  TodoListDao todoListDao;
 
   @BindView(android.R.id.list) ListView listView;
   @BindView(android.R.id.empty) View emptyView;
@@ -137,52 +124,25 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
     listView.setEmptyView(emptyView);
     listView.setAdapter(adapter);
 
-    RxAdapterView.itemClickEvents(listView) //
+    RxAdapterView.itemClickEvents(listView)
         .observeOn(Schedulers.io())
         .subscribe(new Consumer<AdapterViewItemClickEvent>() {
           @Override public void accept(AdapterViewItemClickEvent event) {
             boolean newValue = !adapter.getItem(event.position()).complete();
-            db.update(TodoItem.TABLE, CONFLICT_NONE,
-                new TodoItem.Builder().complete(newValue).build(), TodoItem.ID + " = ?",
-                String.valueOf(event.id()));
+            todoItemDao.complete(event.id(), newValue);
           }
         });
   }
 
   @Override public void onResume() {
     super.onResume();
-    String listId = String.valueOf(getListId());
+    long listId = getListId();
 
     disposables = new CompositeDisposable();
 
-    Observable<Integer> itemCount = db.createQuery(TodoItem.TABLE, COUNT_QUERY, listId) //
-        .map(new Function<Query, Integer>() {
-          @Override public Integer apply(Query query) {
-            Cursor cursor = query.run();
-            try {
-              if (!cursor.moveToNext()) {
-                throw new AssertionError("No rows");
-              }
-              return cursor.getInt(0);
-            } finally {
-              cursor.close();
-            }
-          }
-        });
-    Observable<String> listName =
-        db.createQuery(TodoList.TABLE, TITLE_QUERY, listId).map(new Function<Query, String>() {
-          @Override public String apply(Query query) {
-            Cursor cursor = query.run();
-            try {
-              if (!cursor.moveToNext()) {
-                throw new AssertionError("No rows");
-              }
-              return cursor.getString(0);
-            } finally {
-              cursor.close();
-            }
-          }
-        });
+    Observable<Integer> itemCount = todoItemDao.itemCount(listId);
+    Observable<String> listName = todoListDao.listName(listId);
+
     disposables.add(
         Observable.combineLatest(listName, itemCount, new BiFunction<String, Integer, String>() {
           @Override public String apply(String listName, Integer itemCount) {
@@ -196,8 +156,7 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
               }
             }));
 
-    disposables.add(db.createQuery(TodoItem.TABLE, LIST_QUERY, listId)
-        .mapToList(TodoItem.MAPPER)
+    disposables.add(todoItemDao.createTodoItemsByListId(listId)
         .observeOn(AndroidSchedulers.mainThread())
         .subscribe(adapter));
   }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
index 3869577..06c33b4 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
@@ -27,94 +27,113 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ListView;
+
+import com.example.sqlbrite.todo.R;
+import com.example.sqlbrite.todo.TodoApp;
+import com.example.sqlbrite.todo.db.TodoListDao;
+
+import javax.inject.Inject;
+
 import butterknife.BindView;
 import butterknife.ButterKnife;
 import butterknife.OnItemClick;
-import com.example.sqlbrite.todo.R;
-import com.example.sqlbrite.todo.TodoApp;
-import com.squareup.sqlbrite3.BriteDatabase;
 import io.reactivex.android.schedulers.AndroidSchedulers;
 import io.reactivex.disposables.Disposable;
-import javax.inject.Inject;
 
 import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_IF_ROOM;
 import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_WITH_TEXT;
 
 public final class ListsFragment extends Fragment {
-  interface Listener {
-    void onListClicked(long id);
-    void onNewListClicked();
-  }
+    interface Listener {
+        void onListClicked(long id);
+
+        void onNewListClicked();
+    }
+
+    static ListsFragment newInstance() {
+        return new ListsFragment();
+    }
+
+    @Inject
+    TodoListDao todoListDao;
 
-  static ListsFragment newInstance() {
-    return new ListsFragment();
-  }
+    @BindView(android.R.id.list)
+    ListView listView;
+    @BindView(android.R.id.empty)
+    View emptyView;
 
-  @Inject BriteDatabase db;
+    private Listener listener;
+    private ListsAdapter adapter;
+    private Disposable disposable;
 
-  @BindView(android.R.id.list) ListView listView;
-  @BindView(android.R.id.empty) View emptyView;
+    @Override
+    public void onAttach(Activity activity) {
+        if (!(activity instanceof Listener)) {
+            throw new IllegalStateException("Activity must implement fragment Listener.");
+        }
 
-  private Listener listener;
-  private ListsAdapter adapter;
-  private Disposable disposable;
+        super.onAttach(activity);
+        TodoApp.getComponent(activity).inject(this);
+        setHasOptionsMenu(true);
 
-  @Override public void onAttach(Activity activity) {
-    if (!(activity instanceof Listener)) {
-      throw new IllegalStateException("Activity must implement fragment Listener.");
+        listener = (Listener) activity;
+        adapter = new ListsAdapter(activity);
     }
 
-    super.onAttach(activity);
-    TodoApp.getComponent(activity).inject(this);
-    setHasOptionsMenu(true);
-
-    listener = (Listener) activity;
-    adapter = new ListsAdapter(activity);
-  }
-
-  @Override public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-    super.onCreateOptionsMenu(menu, inflater);
-
-    MenuItem item = menu.add(R.string.new_list)
-        .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
-          @Override public boolean onMenuItemClick(MenuItem item) {
-            listener.onNewListClicked();
-            return true;
-          }
-        });
-    MenuItemCompat.setShowAsAction(item, SHOW_AS_ACTION_IF_ROOM | SHOW_AS_ACTION_WITH_TEXT);
-  }
-
-  @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
-      @Nullable Bundle savedInstanceState) {
-    return inflater.inflate(R.layout.lists, container, false);
-  }
-
-  @Override
-  public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
-    super.onViewCreated(view, savedInstanceState);
-    ButterKnife.bind(this, view);
-    listView.setEmptyView(emptyView);
-    listView.setAdapter(adapter);
-  }
-
-  @OnItemClick(android.R.id.list) void listClicked(long listId) {
-    listener.onListClicked(listId);
-  }
-
-  @Override public void onResume() {
-    super.onResume();
-
-    getActivity().setTitle("To-Do");
-
-    disposable = db.createQuery(ListsItem.TABLES, ListsItem.QUERY)
-        .mapToList(ListsItem.MAPPER)
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        super.onCreateOptionsMenu(menu, inflater);
+
+        MenuItem item = menu.add(R.string.new_list)
+                .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
+                    @Override
+                    public boolean onMenuItemClick(MenuItem item) {
+                        listener.onNewListClicked();
+                        return true;
+                    }
+                });
+        MenuItemCompat.setShowAsAction(item, SHOW_AS_ACTION_IF_ROOM | SHOW_AS_ACTION_WITH_TEXT);
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
+                             @Nullable Bundle savedInstanceState) {
+        return inflater.inflate(R.layout.lists, container, false);
+    }
+
+    @Override
+    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+        ButterKnife.bind(this, view);
+        listView.setEmptyView(emptyView);
+        listView.setAdapter(adapter);
+    }
+
+    @OnItemClick(android.R.id.list)
+    void listClicked(long listId) {
+        listener.onListClicked(listId);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+
+        getActivity().setTitle("To-Do");
+
+    /*disposable = db.createQuery(ListsItem.TABLES, ListsItem.QUERY)
+        .mapToList(ListsItem.MAPPER) // 耗内存
         .observeOn(AndroidSchedulers.mainThread())
-        .subscribe(adapter);
-  }
+        .subscribe(adapter);*/
+
 
-  @Override public void onPause() {
-    super.onPause();
-    disposable.dispose();
-  }
+        disposable = todoListDao.createListsItemsQuery(5) // 省内存
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(adapter);
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        disposable.dispose();
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
index 4faee80..1f70ee1 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
@@ -26,7 +26,7 @@
 import java.util.Collection;
 
 @AutoValue
-abstract class ListsItem implements Parcelable {
+public abstract class ListsItem implements Parcelable {
   private static String ALIAS_LIST = "list";
   private static String ALIAS_ITEM = "item";
 
@@ -47,7 +47,7 @@
   abstract String name();
   abstract int itemCount();
 
-  static Function<Cursor, ListsItem> MAPPER = new Function<Cursor, ListsItem>() {
+  public static Function<Cursor, ListsItem> MAPPER = new Function<Cursor, ListsItem>() {
     @Override public ListsItem apply(Cursor cursor) {
       long id = Db.getLong(cursor, TodoList.ID);
       String name = Db.getString(cursor, TodoList.NAME);
diff --git a/settings.gradle b/settings.gradle
index 36edaca..ab10c82 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,4 +1,4 @@
-include ':sqlbrite'
+include ':sqlbrite', ':daosupport'
 include ':sqlbrite-kotlin'
 include ':sqlbrite-lint'
 include ':sample'
