diff --git a/build.gradle b/build.gradle
index 262079e..b938cd1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,6 +1,6 @@
 buildscript {
     ext.versions = [
-            'minSdk'    : 14,
+            'minSdk'    : 15,
             'compileSdk': 27,
             'kotlin'    : '1.1.60',
             'lint'      : '26.0.1'
@@ -26,9 +26,9 @@ allprojects {
         mavenCentral()
         google()
         jcenter()
-        /*maven {
+        maven {
             url "https://dl.bintray.com/ggg1234567/maven"
-        }*/
+        }
     }
 
     group = GROUP
@@ -37,8 +37,8 @@ allprojects {
 
 ext {
     // Android dependencies.
-    supportV4 = 'com.android.support:support-v4:27.0.0'
-    supportAnnotations = 'com.android.support:support-annotations:27.0.0'
+    supportV4 = 'com.android.support:support-v4:27.1.0'
+    supportAnnotations = 'com.android.support:support-annotations:27.1.0'
     supportTestRunner = 'com.android.support.test:runner:0.5'
 
     // https://developer.android.com/topic/libraries/architecture/adding-components.html
@@ -49,11 +49,11 @@ ext {
 
     // https://www.zetetic.net/sqlcipher/sqlcipher-for-android/
     supportSqlcipher = 'net.zetetic:android-database-sqlcipher:3.5.8@aar'
-    sqlbrite_sqlcipher_integration = 'android.arch.persistence.db.sqlcipher:sqlbrite-sqlcipher-integration:1.1.1'
+    sqlbrite_sqlcipher_integration = 'android.arch.persistence.db.sqlcipher:sqlbrite-sqlcipher-integration:1.1.2'
 
     // https://github.com/Tencent/wcdb
     supportWcdb = 'com.tencent.wcdb:wcdb-android:1.0.5'
-    sqlbrite_wcdb_integration = 'android.arch.persistence.db.wcdb:sqlbrite-wcdb-integration:1.1.1'
+    sqlbrite_wcdb_integration = 'android.arch.persistence.db.wcdb:sqlbrite-wcdb-integration:1.1.2'
 
     // Third-party dependencies.
     kotlinStdLib = "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
diff --git a/sample/build.gradle b/sample/build.gradle
index 20f83bc..3e15c2d 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -10,9 +10,9 @@ dependencies {
     implementation rootProject.ext.butterKnifeRuntime
     annotationProcessor rootProject.ext.butterKnifeCompiler
     implementation rootProject.ext.timber
-    implementation rootProject.ext.rxJava
-    implementation rootProject.ext.rxAndroid
-    implementation rootProject.ext.rxBinding
+    //implementation rootProject.ext.rxJava
+    //implementation rootProject.ext.rxAndroid
+    //implementation rootProject.ext.rxBinding
 
     compileOnly rootProject.ext.autoValue
     annotationProcessor rootProject.ext.autoValue
@@ -25,17 +25,18 @@ dependencies {
     //implementation project(':sqlbrite-sqlcipher-integration')
     implementation rootProject.ext.supportSqlcipher
     implementation rootProject.ext.sqlbrite_sqlcipher_integration
-    implementation project(':sqlbrite-wcdb-integration')
-    //implementation rootProject.ext.supportWcdb
-    //implementation rootProject.ext.sqlbrite_wcdb_integration
+    //implementation project(':sqlbrite-wcdb-integration')
+    implementation rootProject.ext.supportWcdb
+    implementation rootProject.ext.sqlbrite_wcdb_integration
 
     implementation rootProject.ext.androidArchViewModel
     implementation "android.arch.lifecycle:extensions:1.1.0"
+
+    compile 'com.gg.rxbase:rxbase:1.1.1'
 }
 
 android {
     compileSdkVersion versions.compileSdk
-
     compileOptions {
         sourceCompatibility JavaVersion.VERSION_1_7
         targetCompatibility JavaVersion.VERSION_1_7
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
index 5bf3323..2ec3d9d 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
@@ -1,12 +1,13 @@
 package com.example.sqlbrite.todo.controler;
 
-import android.arch.lifecycle.ViewModel;
-
 import com.example.sqlbrite.todo.model.MainDataSource;
 import com.example.sqlbrite.todo.model.local.db.TodoItem;
 import com.example.sqlbrite.todo.ui.ListsItem;
+import com.gg.rxbase.controller.RxBaseViewModel;
+import com.gg.rxbase.lifecycle.ViewModelEvent;
 
 import java.io.File;
+import java.util.Date;
 import java.util.List;
 
 import javax.inject.Inject;
@@ -18,17 +19,26 @@
  * @date 2018/3/6 14:40
  */
 
-public class MainViewModel extends ViewModel {
+public class MainViewModel extends RxBaseViewModel {
 
     private final MainDataSource mDataSource;
 
+    private Date mLastCreateTime;
+
     @Inject
     public MainViewModel(MainDataSource dataSource) {
         mDataSource = dataSource;
+
+        mLastCreateTime = new Date();
+    }
+
+    public Date getLastCreateTime() {
+        return mLastCreateTime;
     }
 
     public Observable<List<ListsItem>> createQueryListsItems() {
-        return mDataSource.createQueryListsItems(100); // 省内存
+        return mDataSource.createQueryListsItems(100)// 省内存
+                .compose(this.<List<ListsItem>>bindToLifecycle()); // 等价 bindUntilEvent(ViewModelEvent.DESTROY)
     }
 
     public boolean complete(long id, boolean complete) {
@@ -36,15 +46,18 @@ public boolean complete(long id, boolean complete) {
     }
 
     public Observable<Integer> createQueryItemCount(long listId) {
-        return mDataSource.createQueryItemCount(listId);
+        return mDataSource.createQueryItemCount(listId)
+                .compose(this.<Integer>bindUntilEvent(ViewModelEvent.DESTROY));
     }
 
     public Observable<List<TodoItem>> createQueryTodoItemsByListId(long listId) {
-        return mDataSource.createQueryTodoItemsByListId(listId);
+        return mDataSource.createQueryTodoItemsByListId(listId)
+                .compose(this.<List<TodoItem>>bindUntilEvent(ViewModelEvent.DESTROY));
     }
 
     public Observable<String> createQueryListName(long listId) {
-        return mDataSource.createQueryListName(listId);
+        return mDataSource.createQueryListName(listId)
+                .compose(this.<String>bindUntilEvent(ViewModelEvent.DESTROY));
     }
 
     public long createNewOneTodoList(String name) {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
index 69826dd..27fd0f2 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
@@ -9,6 +9,8 @@
 import android.support.v4.app.Fragment;
 
 import com.example.sqlbrite.todo.TodoApp;
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
+import com.gg.rxbase.ui.RxBaseFragment;
 
 import java.lang.reflect.ParameterizedType;
 
@@ -19,10 +21,13 @@
  * @date 2018/3/9 10:03
  */
 
-public abstract class BaseViewModelFragment<VIEWMODEL extends ViewModel> extends Fragment {
+public abstract class BaseViewModelFragment<VIEWMODEL extends ViewModel> extends RxBaseFragment {
 
     @Inject
-    public ViewModelProvider.Factory mViewModelFactory;
+    SchedulerProvider mSchedulerProvider;
+
+    @Inject
+    ViewModelProvider.Factory mViewModelFactory;
 
     private VIEWMODEL mViewModel;
 
@@ -45,4 +50,8 @@ public void onActivityCreated(@Nullable Bundle savedInstanceState) {
     protected VIEWMODEL getViewModel() {
         return mViewModel;
     }
+
+    public SchedulerProvider getSchedulerProvider() {
+        return mSchedulerProvider;
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
index 2314505..fa36379 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
@@ -27,12 +27,17 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ListView;
+import android.widget.Toast;
 
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.MainViewModel;
+import com.example.sqlbrite.todo.model.local.db.TodoItem;
 import com.jakewharton.rxbinding2.widget.AdapterViewItemClickEvent;
 import com.jakewharton.rxbinding2.widget.RxAdapterView;
+import com.trello.rxlifecycle2.android.FragmentEvent;
+
+import java.util.List;
 
 import butterknife.BindView;
 import butterknife.ButterKnife;
@@ -72,7 +77,7 @@ public static ItemsFragment newInstance(long listId) {
     private Listener listener;
 
     private ItemsAdapter adapter;
-    private CompositeDisposable disposables;
+    //private CompositeDisposable disposables;
 
     private long getListId() {
         return getArguments().getLong(KEY_LIST_ID);
@@ -115,6 +120,7 @@ public boolean onMenuItemClick(MenuItem item) {
     @Override
     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
                              @Nullable Bundle savedInstanceState) {
+        super.onCreateView(inflater, container, savedInstanceState);
         return inflater.inflate(R.layout.items, container, false);
     }
 
@@ -127,7 +133,7 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
         listView.setAdapter(adapter);
 
         RxAdapterView.itemClickEvents(listView)
-                .observeOn(Schedulers.io())
+                .observeOn(getSchedulerProvider().io())
                 .subscribe(new Consumer<AdapterViewItemClickEvent>() {
                     @Override
                     public void accept(AdapterViewItemClickEvent event) {
@@ -142,34 +148,46 @@ public void onResume() {
         super.onResume();
         long listId = getListId();
 
-        disposables = new CompositeDisposable();
+        //disposables = new CompositeDisposable();
 
         Observable<Integer> itemCount = getViewModel().createQueryItemCount(listId);
         Observable<String> listName = getViewModel().createQueryListName(listId);
 
-        disposables.add(
-                Observable.combineLatest(listName, itemCount, new BiFunction<String, Integer, String>() {
+        //disposables.add(
+        Observable.combineLatest(listName, itemCount, new BiFunction<String, Integer, String>() {
+            @Override
+            public String apply(String listName, Integer itemCount) {
+                return listName + " (" + itemCount + ")";
+            }
+        })
+                .observeOn(getSchedulerProvider().ui())
+                .subscribe(new Consumer<String>() {
                     @Override
-                    public String apply(String listName, Integer itemCount) {
-                        return listName + " (" + itemCount + ")";
+                    public void accept(String title) throws Exception {
+                        getActivity().setTitle(title);
                     }
                 })
-                        .observeOn(AndroidSchedulers.mainThread())
-                        .subscribe(new Consumer<String>() {
-                            @Override
-                            public void accept(String title) throws Exception {
-                                getActivity().setTitle(title);
-                            }
-                        }));
-
-        disposables.add(getViewModel().createQueryTodoItemsByListId(listId)
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(adapter));
+        //)
+        ;
+
+        //disposables.add(
+        getViewModel().createQueryTodoItemsByListId(listId)
+                .compose(this.<List<TodoItem>>bindUntilEvent(FragmentEvent.PAUSE))
+                .observeOn(getSchedulerProvider().ui())
+                .subscribe(adapter)
+        //)
+        ;
+
+        CharSequence content = "请切换成横屏!\nViewModel 仍是同一个!\n创建时间 : " + String.valueOf(getViewModel().getLastCreateTime());
+        Toast.makeText(getContext(),
+                content,
+                Toast.LENGTH_LONG)
+                .show();
     }
 
     @Override
     public void onPause() {
         super.onPause();
-        disposables.dispose();
+        //disposables.dispose();
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
index 3cd32cf..0825dc7 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
@@ -32,15 +32,19 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Button;
+import android.widget.ListAdapter;
 import android.widget.ListView;
 import android.widget.Toast;
 
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.MainViewModel;
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.squareup.sqlbrite3.BriteDatabase;
+import com.trello.rxlifecycle2.android.FragmentEvent;
 
 import java.io.File;
+import java.util.List;
 
 import javax.inject.Inject;
 
@@ -76,7 +80,7 @@ static ListsFragment newInstance() {
 
     private Listener listener;
     private ListsAdapter adapter;
-    private Disposable disposable;
+    //private Disposable disposable;
 
     @Override
     public void onAttach(Context context) {
@@ -115,6 +119,7 @@ public boolean onMenuItemClick(MenuItem item) {
     @Override
     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
                              @Nullable Bundle savedInstanceState) {
+        super.onCreateView(inflater, container, savedInstanceState);
         return inflater.inflate(R.layout.lists, container, false);
     }
 
@@ -131,6 +136,8 @@ void onExportDB(View btn) {
         try {
             File dstFile = getViewModel().exportDecryption();
             Toast.makeText(getContext(), "导出数据库成功!\n" + dstFile.getPath(), Toast.LENGTH_SHORT).show();
+
+            getActivity().finish();
         } catch (Exception e) {
             Log.e(TAG, "导出数据库失败!", e);
             Toast.makeText(getContext(), "导出数据库失败!", Toast.LENGTH_SHORT).show();
@@ -153,20 +160,23 @@ public void onResume() {
 
         getActivity().setTitle("To-Do");
 
-    /*disposable = db.createQuery(ListsItem.TABLES, ListsItem.QUERY)
+        /*
+        disposable = db.createQuery(ListsItem.TABLES, ListsItem.QUERY)
         .mapToList(ListsItem.MAPPER) // 耗内存
         .observeOn(AndroidSchedulers.mainThread())
         .subscribe(adapter);*/
 
 
-        disposable = getViewModel().createQueryListsItems() // 省内存
-                .observeOn(AndroidSchedulers.mainThread())
+        /*disposable = */
+        getViewModel().createQueryListsItems() // 省内存
+                .compose(this.<List<ListsItem>>bindUntilEvent(FragmentEvent.PAUSE))
+                .observeOn(getSchedulerProvider().ui())
                 .subscribe(adapter);
     }
 
     @Override
     public void onPause() {
         super.onPause();
-        disposable.dispose();
+        //disposable.dispose();  // RxLifecycle instead of
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
index 87c41b5..5aafc3d 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
@@ -17,10 +17,13 @@
 
 import android.os.Bundle;
 import android.support.v4.app.FragmentActivity;
+import android.support.v7.app.AppCompatActivity;
 
 import com.example.sqlbrite.todo.R;
+import com.gg.rxbase.ui.RxBaseActivity;
+import com.trello.rxlifecycle2.components.support.RxFragmentActivity;
 
-public final class MainActivity extends FragmentActivity
+public final class MainActivity extends RxFragmentActivity
         implements ListsFragment.Listener, ItemsFragment.Listener {
 
     @Override
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
index 33e1deb..9240828 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
@@ -24,7 +24,6 @@
 import android.content.DialogInterface;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
-import android.support.v4.app.DialogFragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.widget.EditText;
@@ -32,8 +31,9 @@
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.MainViewModel;
-import com.example.sqlbrite.todo.model.local.db.TodoItemDao;
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.jakewharton.rxbinding2.widget.RxTextView;
+import com.trello.rxlifecycle2.components.support.RxAppCompatDialogFragment;
 
 import javax.inject.Inject;
 
@@ -45,7 +45,7 @@
 
 import static butterknife.ButterKnife.findById;
 
-public final class NewItemFragment extends DialogFragment {
+public final class NewItemFragment extends RxAppCompatDialogFragment {
     private static final String KEY_LIST_ID = "list_id";
 
     public static NewItemFragment newInstance(long listId) {
@@ -59,10 +59,8 @@ public static NewItemFragment newInstance(long listId) {
 
     private final PublishSubject<String> createClicked = PublishSubject.create();
 
-/*
     @Inject
-    TodoItemDao todoItemDao;
-*/
+    SchedulerProvider mSchedulerProvider;
 
     @Inject
     ViewModelProvider.Factory mViewModelFactory;
@@ -96,7 +94,7 @@ public String apply(String ignored, CharSequence text) {
                         return text.toString();
                     }
                 }) //
-                .observeOn(Schedulers.io())
+                .observeOn(mSchedulerProvider.io())
                 .subscribe(new Consumer<String>() {
                     @Override
                     public void accept(String description) {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
index 7668c05..ad58eb3 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
@@ -24,7 +24,6 @@
 import android.content.DialogInterface;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
-import android.support.v4.app.DialogFragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.widget.EditText;
@@ -32,8 +31,9 @@
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.MainViewModel;
-import com.example.sqlbrite.todo.model.local.db.TodoListDao;
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.jakewharton.rxbinding2.widget.RxTextView;
+import com.trello.rxlifecycle2.components.support.RxAppCompatDialogFragment;
 
 import javax.inject.Inject;
 
@@ -45,17 +45,16 @@
 
 import static butterknife.ButterKnife.findById;
 
-public final class NewListFragment extends DialogFragment {
+public final class NewListFragment extends RxAppCompatDialogFragment {
     public static NewListFragment newInstance() {
         return new NewListFragment();
     }
 
     private final PublishSubject<String> createClicked = PublishSubject.create();
 
-/*
+
     @Inject
-    TodoListDao todoListDao;
-*/
+    SchedulerProvider mSchedulerProvider;
 
     @Inject
     ViewModelProvider.Factory mViewModelFactory;
@@ -85,7 +84,7 @@ public String apply(String ignored, CharSequence text) {
                         return text.toString();
                     }
                 }) //
-                .observeOn(Schedulers.io())
+                .observeOn(mSchedulerProvider.io())
                 .subscribe(new Consumer<String>() {
                     @Override
                     public void accept(String name) {
diff --git a/sqlbrite-sqlcipher-integration/build.gradle b/sqlbrite-sqlcipher-integration/build.gradle
index e28a68d..a6249c6 100644
--- a/sqlbrite-sqlcipher-integration/build.gradle
+++ b/sqlbrite-sqlcipher-integration/build.gradle
@@ -50,7 +50,7 @@ ext {
     siteUrl = 'https://github.com/Guang1234567/sqlbrite'
     gitUrl = 'https://github.com/Guang1234567/sqlbrite.git'
 
-    libraryVersion = '1.1.1'
+    libraryVersion = '1.1.2'
 
     developerId = 'GG1234567'
     developerName = 'GG1234567'
diff --git a/sqlbrite-wcdb-integration/build.gradle b/sqlbrite-wcdb-integration/build.gradle
index 1050c84..5845b29 100644
--- a/sqlbrite-wcdb-integration/build.gradle
+++ b/sqlbrite-wcdb-integration/build.gradle
@@ -49,7 +49,7 @@ ext {
     siteUrl = 'https://github.com/Guang1234567/sqlbrite'
     gitUrl = 'https://github.com/Guang1234567/sqlbrite.git'
 
-    libraryVersion = '1.1.1'
+    libraryVersion = '1.1.2'
 
     developerId = 'GG1234567'
     developerName = 'GG1234567'
