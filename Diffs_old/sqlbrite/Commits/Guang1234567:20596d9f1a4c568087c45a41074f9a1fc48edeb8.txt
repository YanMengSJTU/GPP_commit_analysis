diff --git a/build.gradle b/build.gradle
index bd386dd..013f8d6 100644
--- a/build.gradle
+++ b/build.gradle
@@ -49,7 +49,7 @@ ext {
     supportMultidex = 'com.android.support:multidex:1.0.3'
     supportTestRunner = 'com.android.support.test:runner:0.5'
 
-    rxbase = 'com.gg.rxbase:rxbase:1.1.4'
+    rxbase = 'com.gg.rxbase:rxbase:1.1.9'
 
     multitype = "me.drakeet.multitype:multitype:3.4.4"
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/TodoApiThrowableHandler.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/TodoApiThrowableHandler.java
new file mode 100644
index 0000000..eec974a
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/TodoApiThrowableHandler.java
@@ -0,0 +1,77 @@
+package com.example.sqlbrite.todo.controler;
+
+import android.app.Application;
+import android.net.ParseException;
+import android.support.annotation.MainThread;
+import android.support.annotation.UiThread;
+import android.util.Log;
+import android.widget.Toast;
+
+import com.gg.rxbase.net.retrofit.ApiCode;
+import com.gg.rxbase.net.retrofit.ApiException;
+import com.google.gson.JsonParseException;
+
+import org.apache.http.conn.ConnectTimeoutException;
+import org.json.JSONException;
+
+import java.net.ConnectException;
+import java.net.SocketTimeoutException;
+
+import io.reactivex.functions.Consumer;
+import retrofit2.HttpException;
+
+/**
+ * @author Guang1234567
+ * @date 2018/4/13 9:24
+ */
+
+@MainThread
+@UiThread
+public class TodoApiThrowableHandler implements Consumer<Throwable> {
+    private Application mApplication;
+
+    public TodoApiThrowableHandler(Application application) {
+        mApplication = application;
+    }
+
+    @Override
+    public void accept(Throwable e) throws Exception {
+        Toast.makeText(mApplication, Log.getStackTraceString(e), Toast.LENGTH_LONG).show();
+
+        if (e instanceof HttpException) {             //HTTP错误, 如配置了 Https 但证书不匹配?
+            // handle
+        } else if (e instanceof JsonParseException
+                || e instanceof JSONException
+                || e instanceof ParseException) { //均视为协议解析错误, 此时应该检查协议与代码是否一致
+            // handle
+        } else if (e instanceof ConnectException
+                || e instanceof SocketTimeoutException
+                || e instanceof ConnectTimeoutException) { // "连接失败"
+            // handle
+        } else if (e instanceof ApiException) { // 内部协议错误
+            ApiException apiException = (ApiException) e;
+            ApiCode code = apiException.getErrorCode();
+            switch (code) {
+                case ERROR_CLIENT_AUTHORIZED:
+                    // handle
+                    break;
+                case ERROR_USER_AUTHORIZED:
+                    // handle
+                    break;
+                case ERROR_REQUEST_PARAM:
+                    // handle
+                    break;
+                case ERROR_PARAM_CHECK:
+                    // handle
+                    break;
+                case ERROR_OTHER:
+                    // handle
+                    break;
+                case ERROR_NO_INTERNET:
+                    // handle
+                    break;
+            }
+        } else {
+        }
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/NetModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/NetModule.java
index a6d0ab9..dd02e70 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/NetModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/NetModule.java
@@ -19,9 +19,10 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 
+import com.example.sqlbrite.todo.controler.TodoApiThrowableHandler;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
-import com.gg.rxbase.net.retrofit.ApiRxThrowableHandlingCallAdapterFactory;
-import com.gg.rxbase.net.retrofit.ApiThrowableHandler;
+import com.gg.rxbase.net.retrofit.ApiErrorHandlingTransformer;
+import com.gg.rxbase.net.retrofit.ApiTransformerCallAdapterFactory;
 import com.gg.rxbase.net.retrofit.ObserveOnCallAdapterFactory;
 import com.google.gson.FieldNamingPolicy;
 import com.google.gson.Gson;
@@ -33,6 +34,7 @@
 
 import dagger.Module;
 import dagger.Provides;
+import io.reactivex.functions.Consumer;
 import okhttp3.Cache;
 import okhttp3.OkHttpClient;
 import retrofit2.Retrofit;
@@ -100,9 +102,8 @@ OkHttpClient provideOkHttpClientWithoutCache() {
     }
 
     @Provides
-    @Singleton
-    ApiThrowableHandler provideApiThrowableHandler() {
-        return ApiThrowableHandler.DEFAULT;
+    Consumer<Throwable> provideApiThrowableHandler(Application application) {
+        return new TodoApiThrowableHandler(application);
     }
 
     @Provides
@@ -110,12 +111,19 @@ ApiThrowableHandler provideApiThrowableHandler() {
     Retrofit provideRetrofit(Gson gson,
                              @Named("cached") OkHttpClient okHttpClient,
                              Application application,
-                             ApiThrowableHandler apiThrowableHandler,
+                             Consumer<Throwable> apiThrowableHandler,
                              SchedulerProvider schedulerProvider) {
+        ApiErrorHandlingTransformer errorHandlingTransformer = new ApiErrorHandlingTransformer(application, apiThrowableHandler);
+
         Retrofit retrofit = new Retrofit.Builder()
                 .addConverterFactory(GsonConverterFactory.create(gson))
-                .addCallAdapterFactory(ApiRxThrowableHandlingCallAdapterFactory.create(application, apiThrowableHandler, schedulerProvider.ui()))
                 .addCallAdapterFactory(ObserveOnCallAdapterFactory.create(schedulerProvider.io()))
+                .addCallAdapterFactory(ApiTransformerCallAdapterFactory.create(errorHandlingTransformer,
+                        errorHandlingTransformer,
+                        errorHandlingTransformer,
+                        errorHandlingTransformer,
+                        errorHandlingTransformer))
+                .addCallAdapterFactory(ObserveOnCallAdapterFactory.create(schedulerProvider.ui()))
                 .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
                 .baseUrl(mBaseUrl)
                 .client(okHttpClient)
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java
index 67a7c6b..d3152a1 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java
@@ -15,103 +15,110 @@
  */
 package com.example.sqlbrite.todo.model.local.db;
 
-import android.arch.persistence.db.SupportSQLiteDatabase;
-import android.arch.persistence.db.SupportSQLiteOpenHelper;
+import com.squareup.sqlbrite3.support.RxSupportSQLiteOpenHelperCallback;
 
 import static android.database.sqlite.SQLiteDatabase.CONFLICT_FAIL;
 
-public final class DbCallback extends SupportSQLiteOpenHelper.Callback {
-  private static final int VERSION = 1;
+public final class DbCallback extends RxSupportSQLiteOpenHelperCallback {
+    private static final int FIRST_VERSION = 1; // 最初版本号是 1
+    private static final int LAST_VERSION = 3;
 
-  private static final String CREATE_LIST = ""
-      + "CREATE TABLE " + TodoList.TABLE + "("
-      + TodoList.ID + " INTEGER NOT NULL PRIMARY KEY,"
-      + TodoList.NAME + " TEXT NOT NULL,"
-      + TodoList.ARCHIVED + " INTEGER NOT NULL DEFAULT 0,"
-      + TodoList.CREATE_TIMESTAMP + " INTEGER NOT NULL DEFAULT 0"
-      + ")";
-  private static final String CREATE_ITEM = ""
-      + "CREATE TABLE " + TodoItem.TABLE + "("
-      + TodoItem.ID + " INTEGER NOT NULL PRIMARY KEY,"
-      + TodoItem.LIST_ID + " INTEGER NOT NULL REFERENCES " + TodoList.TABLE + "(" + TodoList.ID + "),"
-      + TodoItem.DESCRIPTION + " TEXT NOT NULL,"
-      + TodoItem.COMPLETE + " INTEGER NOT NULL DEFAULT 0"
-      + ")";
-  private static final String CREATE_ITEM_LIST_ID_INDEX =
-      "CREATE INDEX item_list_id ON " + TodoItem.TABLE + " (" + TodoItem.LIST_ID + ")";
+    private static final String CREATE_LIST = ""
+            + "CREATE TABLE " + TodoList.TABLE + "("
+            + TodoList.ID + " INTEGER NOT NULL PRIMARY KEY,"
+            + TodoList.NAME + " TEXT NOT NULL,"
+            + TodoList.ARCHIVED + " INTEGER NOT NULL DEFAULT 0,"
+            + TodoList.CREATE_TIMESTAMP + " INTEGER NOT NULL DEFAULT 0"
+            + ")";
+    private static final String CREATE_ITEM = ""
+            + "CREATE TABLE " + TodoItem.TABLE + "("
+            + TodoItem.ID + " INTEGER NOT NULL PRIMARY KEY,"
+            + TodoItem.LIST_ID + " INTEGER NOT NULL REFERENCES " + TodoList.TABLE + "(" + TodoList.ID + "),"
+            + TodoItem.DESCRIPTION + " TEXT NOT NULL,"
+            + TodoItem.COMPLETE + " INTEGER NOT NULL DEFAULT 0"
+            + ")";
+    private static final String CREATE_ITEM_LIST_ID_INDEX =
+            "CREATE INDEX item_list_id ON " + TodoItem.TABLE + " (" + TodoItem.LIST_ID + ")";
 
-  public DbCallback() {
-    super(VERSION);
-  }
+    public DbCallback() {
+        super(FIRST_VERSION, LAST_VERSION);
 
-  @Override public void onCreate(SupportSQLiteDatabase db) {
-    db.execSQL(CREATE_LIST);
-    db.execSQL(CREATE_ITEM);
-    db.execSQL(CREATE_ITEM_LIST_ID_INDEX);
+        init();
+    }
 
-    long groceryListId = db.insert(TodoList.TABLE, CONFLICT_FAIL, new TodoList.ContentValuesBuilder()
-        .name("Grocery List")
-        .build());
-    db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
-        .listId(groceryListId)
-        .description("Beer")
-        .build());
-    db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
-        .listId(groceryListId)
-        .description("Point Break on DVD")
-        .build());
-    db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
-        .listId(groceryListId)
-        .description("Bad Boys 2 on DVD")
-        .build());
+    private void init() {
+        upgrateToVersion(FIRST_VERSION).subscribe(db -> {
+            db.execSQL(CREATE_LIST);
+            db.execSQL(CREATE_ITEM);
+            db.execSQL(CREATE_ITEM_LIST_ID_INDEX);
 
-    long holidayPresentsListId = db.insert(TodoList.TABLE, CONFLICT_FAIL, new TodoList.ContentValuesBuilder()
-        .name("Holiday Presents")
-        .build());
-    db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
-        .listId(holidayPresentsListId)
-        .description("Pogo Stick for Jake W.")
-        .build());
-    db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
-        .listId(holidayPresentsListId)
-        .description("Jack-in-the-box for Alec S.")
-        .build());
-    db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
-        .listId(holidayPresentsListId)
-        .description("Pogs for Matt P.")
-        .build());
-    db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
-        .listId(holidayPresentsListId)
-        .description("Cola for Jesse W.")
-        .build());
+            long groceryListId = db.insert(TodoList.TABLE, CONFLICT_FAIL, new TodoList.ContentValuesBuilder()
+                    .name("Grocery List")
+                    .build());
+            db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
+                    .listId(groceryListId)
+                    .description("Beer")
+                    .build());
+            db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
+                    .listId(groceryListId)
+                    .description("Point Break on DVD")
+                    .build());
+            db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
+                    .listId(groceryListId)
+                    .description("Bad Boys 2 on DVD")
+                    .build());
 
-    long workListId = db.insert(TodoList.TABLE, CONFLICT_FAIL, new TodoList.ContentValuesBuilder()
-        .name("Work Items")
-        .build());
-    db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
-        .listId(workListId)
-        .description("Finish SqlBrite library")
-        .complete(true)
-        .build());
-    db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
-        .listId(workListId)
-        .description("Finish SqlBrite sample app")
-        .build());
-    db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
-        .listId(workListId)
-        .description("Publish SqlBrite to GitHub")
-        .build());
+            long holidayPresentsListId = db.insert(TodoList.TABLE, CONFLICT_FAIL, new TodoList.ContentValuesBuilder()
+                    .name("Holiday Presents")
+                    .build());
+            db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
+                    .listId(holidayPresentsListId)
+                    .description("Pogo Stick for Jake W.")
+                    .build());
+            db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
+                    .listId(holidayPresentsListId)
+                    .description("Jack-in-the-box for Alec S.")
+                    .build());
+            db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
+                    .listId(holidayPresentsListId)
+                    .description("Pogs for Matt P.")
+                    .build());
+            db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
+                    .listId(holidayPresentsListId)
+                    .description("Cola for Jesse W.")
+                    .build());
 
-    long birthdayPresentsListId = db.insert(TodoList.TABLE, CONFLICT_FAIL, new TodoList.ContentValuesBuilder()
-        .name("Birthday Presents")
-        .archived(true)
-        .build());
-    db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder().listId(birthdayPresentsListId)
-        .description("New car")
-        .complete(true)
-        .build());
-  }
+            long workListId = db.insert(TodoList.TABLE, CONFLICT_FAIL, new TodoList.ContentValuesBuilder()
+                    .name("Work Items")
+                    .build());
+            db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
+                    .listId(workListId)
+                    .description("Finish SqlBrite library")
+                    .complete(true)
+                    .build());
+            db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
+                    .listId(workListId)
+                    .description("Finish SqlBrite sample app")
+                    .build());
+            db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder()
+                    .listId(workListId)
+                    .description("Publish SqlBrite to GitHub")
+                    .build());
 
-  @Override public void onUpgrade(SupportSQLiteDatabase db, int oldVersion, int newVersion) {
-  }
+            long birthdayPresentsListId = db.insert(TodoList.TABLE, CONFLICT_FAIL, new TodoList.ContentValuesBuilder()
+                    .name("Birthday Presents")
+                    .archived(true)
+                    .build());
+            db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder().listId(birthdayPresentsListId)
+                    .description("New car")
+                    .complete(true)
+                    .build());
+        });
+
+        upgrateToVersion((2)).subscribe(db -> {
+        });
+
+        upgrateToVersion((3)).subscribe(db -> {
+        });
+    }
 }
diff --git a/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/RxSupportSQLiteOpenHelperCallback.java b/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/RxSupportSQLiteOpenHelperCallback.java
new file mode 100644
index 0000000..5e9d863
--- /dev/null
+++ b/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/RxSupportSQLiteOpenHelperCallback.java
@@ -0,0 +1,90 @@
+package com.squareup.sqlbrite3.support;
+
+import android.arch.persistence.db.SupportSQLiteDatabase;
+import android.arch.persistence.db.SupportSQLiteOpenHelper;
+import android.util.Log;
+
+import io.reactivex.Observable;
+import io.reactivex.functions.Function;
+import io.reactivex.functions.Predicate;
+import io.reactivex.subjects.PublishSubject;
+
+/**
+ * @author Administrator
+ * @date 2018/4/13 16:15
+ */
+
+public class RxSupportSQLiteOpenHelperCallback extends SupportSQLiteOpenHelper.Callback {
+
+    public static final String TAG = "RxSupportSQLiteOpenHelperCallback";
+
+    private final PublishSubject<DbVersion> mVersionEmitter;
+
+    private final int mFirstVersion;
+    private final int mLastVersion;
+
+    public RxSupportSQLiteOpenHelperCallback(int firstVersion, int lastVersion) {
+        super(lastVersion);
+        mVersionEmitter = PublishSubject.create();
+        mFirstVersion = firstVersion;
+        mLastVersion = lastVersion;
+    }
+
+    @Override
+    final public void onCreate(SupportSQLiteDatabase db) {
+        Log.i(TAG, "┏ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ┓");
+        Log.i(TAG, "┃            Start Create Database");
+        Log.i(TAG, "┗ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ┛");
+        Log.i(TAG, "db = " + db);
+        doEachVer(db, mFirstVersion, mLastVersion);
+        Log.i(TAG, "┏ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ┓");
+        Log.i(TAG, "┃              End Create Database");
+        Log.i(TAG, "┗ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ┛");
+    }
+
+    @Override
+    final public void onUpgrade(SupportSQLiteDatabase db, int oldVersion, int newVersion) {
+        Log.i(TAG, "┏ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ┓");
+        Log.i(TAG, "┃            Start Upgrade Database");
+        Log.i(TAG, "┗ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ┛");
+        Log.i(TAG, "db = " + db + "   (@" + db.hashCode() + ")");
+        Log.i(TAG, "oldVersion = " + oldVersion);
+        Log.i(TAG, "newVersion = " + newVersion);
+        doEachVer(db, oldVersion + 1, newVersion);
+        Log.i(TAG, "┏ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ┓");
+        Log.i(TAG, "┃              End Upgrade Database");
+        Log.i(TAG, "┗ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ┛");
+    }
+
+    private void doEachVer(SupportSQLiteDatabase db, int fromVersion, int toVersion) {
+        for (int toVer = fromVersion; toVer <= toVersion; toVer++) {
+            mVersionEmitter.onNext(new DbVersion(db, toVer));
+        }
+        mVersionEmitter.onComplete();
+    }
+
+    public Observable<SupportSQLiteDatabase> upgrateToVersion(final int version) {
+        return mVersionEmitter
+                .filter(new Predicate<DbVersion>() {
+                    @Override
+                    public boolean test(DbVersion ver) throws Exception {
+                        return ver.mCode == version;
+                    }
+                }).map(new Function<DbVersion, SupportSQLiteDatabase>() {
+                    @Override
+                    public SupportSQLiteDatabase apply(DbVersion ver) throws Exception {
+                        return ver.mDb;
+                    }
+                });
+    }
+
+    private static class DbVersion {
+        SupportSQLiteDatabase mDb;
+        int mCode;
+
+        DbVersion(SupportSQLiteDatabase db, int code) {
+            mDb = db;
+            mCode = code;
+        }
+    }
+}
