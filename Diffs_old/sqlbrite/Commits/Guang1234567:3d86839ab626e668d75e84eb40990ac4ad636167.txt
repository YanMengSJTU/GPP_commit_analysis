diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/DemoShareViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/DemoShareViewModel.java
index ebe224e..88c0f74 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/controler/DemoShareViewModel.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/DemoShareViewModel.java
@@ -13,5 +13,6 @@ protected DemoShareViewModel() {
 
     @Override
     protected void onShareCleared() {
+        super.onShareCleared();
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java
index d17ca47..701a9fc 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java
@@ -1,13 +1,8 @@
 package com.example.sqlbrite.todo.di;
 
 import android.app.Activity;
-import android.arch.lifecycle.ViewModelProvider;
 
-import com.example.sqlbrite.todo.controler.LoginViewControler;
-import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
-import com.example.sqlbrite.todo.model.local.preferences.AppPrefs;
-import com.example.sqlbrite.todo.model.users.LoginManager;
-import com.example.sqlbrite.todo.model.users.UserManager;
+import com.example.sqlbrite.todo.di.controler.UserScopeViewModelFactory;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.example.sqlbrite.todo.ui.MainActivity;
 import com.example.sqlbrite.todo.ui.SystemSettingActivity;
@@ -27,7 +22,9 @@
 
     SchedulerProvider schedulerProvider();
 
-    ViewModelProvider.Factory viewModelProviderFactory();
+    /*ViewModelProvider.Factory viewModelProviderFactory();*/
+
+    UserScopeViewModelFactory viewModelProviderFactory();
 
     void inject(MainActivity activity);
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
index baa6547..f86ee29 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
@@ -1,7 +1,6 @@
 package com.example.sqlbrite.todo.di;
 
-import android.arch.lifecycle.ViewModelProvider;
-
+import com.example.sqlbrite.todo.di.controler.UserScopeViewModelFactory;
 import com.example.sqlbrite.todo.model.local.preferences.UserPrefs;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 
@@ -13,7 +12,7 @@
 
     SchedulerProvider schedulerProvider();
 
-    ViewModelProvider.Factory viewModelProviderFactory();
+    UserScopeViewModelFactory viewModelProviderFactory();
 
     UserPrefs userPrefs();
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModel.java
index 9c23c9b..4dee39e 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModel.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModel.java
@@ -1,11 +1,19 @@
 package com.example.sqlbrite.todo.di.controler;
 
 import android.arch.lifecycle.ViewModel;
+import android.support.annotation.NonNull;
 import android.util.Log;
 
+import com.gg.rxbase.lifecycle.RxViewModelLifecycleProviderImpl;
+import com.gg.rxbase.lifecycle.ViewModelEvent;
+import com.trello.rxlifecycle2.LifecycleProvider;
+import com.trello.rxlifecycle2.LifecycleTransformer;
+
 import java.util.concurrent.atomic.AtomicInteger;
 
-public abstract class ShareViewModel extends ViewModel {
+import io.reactivex.Observable;
+
+public abstract class ShareViewModel extends ViewModel implements LifecycleProvider<ViewModelEvent> {
 
     public static final String TAG = "ShareViewModel";
 
@@ -15,8 +23,11 @@
 
     private Runnable mOnShareCleared;
 
+    private final RxViewModelLifecycleProviderImpl mLifecycleProvider;
+
     protected ShareViewModel() {
         mRefCounter = new AtomicInteger(0);
+        mLifecycleProvider = new RxViewModelLifecycleProviderImpl();
     }
 
     void setOnShareCreated(Runnable hook) {
@@ -29,6 +40,7 @@ void setOnShareCleared(Runnable hook) {
 
     @Override
     protected final void onCleared() {
+        super.onCleared();
         decRefCount();
     }
 
@@ -40,7 +52,8 @@ protected void onLastRef() {
 
     }
 
-    protected abstract void onShareCleared();
+    protected void onShareCleared() {
+    }
 
     public final int incRefCount() {
         int counter = mRefCounter.incrementAndGet();
@@ -50,6 +63,7 @@ public final int incRefCount() {
                 mOnShareCreated.run();
                 mOnShareCreated = null;
             }
+            mLifecycleProvider.onNext(ViewModelEvent.CREATE);
         }
         return counter;
     }
@@ -57,12 +71,13 @@ public final int incRefCount() {
     public final int decRefCount() {
         int counter = mRefCounter.decrementAndGet();
         if (counter == 0) {
-            onLastRef();
+            mLifecycleProvider.onNext(ViewModelEvent.DESTROY);
+            onShareCleared();
             if (mOnShareCleared != null) {
                 mOnShareCleared.run();
                 mOnShareCleared = null;
             }
-            onShareCleared();
+            onLastRef();
         } else if (counter < 0) {
             Log.e(TAG, "too many decRefCount() call!", new Exception());
 
@@ -81,4 +96,22 @@ public String toString() {
         sb.append('}');
         return sb.toString();
     }
+
+    @NonNull
+    @Override
+    public final Observable<ViewModelEvent> lifecycle() {
+        return mLifecycleProvider.lifecycle();
+    }
+
+    @NonNull
+    @Override
+    public final <T> LifecycleTransformer<T> bindUntilEvent(@NonNull ViewModelEvent event) {
+        return mLifecycleProvider.bindUntilEvent(event);
+    }
+
+    @NonNull
+    @Override
+    public final <T> LifecycleTransformer<T> bindToLifecycle() {
+        return mLifecycleProvider.bindToLifecycle();
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModelFactory.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModelFactory.java
deleted file mode 100644
index 6ad745c..0000000
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModelFactory.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.example.sqlbrite.todo.di.controler;
-
-import android.arch.lifecycle.ViewModel;
-import android.arch.lifecycle.ViewModelProvider;
-import android.support.annotation.NonNull;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class ShareViewModelFactory extends ViewModelProvider.NewInstanceFactory {
-
-    private static final Map<Class<? extends ViewModel>, ViewModel> sShareCache = new HashMap<>();
-
-    @NonNull
-    @Override
-    public <T extends ViewModel> T create(final @NonNull Class<T> modelClass) {
-        if (ShareViewModel.class.isAssignableFrom(modelClass)) {
-            ShareViewModel shareVM = null;
-            if (sShareCache.containsKey(modelClass)) {
-                shareVM = (ShareViewModel) sShareCache.get(modelClass);
-            } else {
-                shareVM = (ShareViewModel) super.create(modelClass);
-                if (shareVM != null) {
-                    shareVM.setOnShareCleared(new Runnable() {
-                        @Override
-                        public void run() {
-                            sShareCache.remove(modelClass);
-                        }
-                    });
-                    sShareCache.put(modelClass, shareVM);
-                }
-            }
-            if (shareVM != null) {
-                shareVM.incRefCount();
-            }
-            return (T) shareVM;
-        }
-        return super.create(modelClass);
-    }
-}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory.java
index 1e66230..0b58e1e 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory.java
@@ -18,7 +18,10 @@
 
 import android.arch.lifecycle.ViewModel;
 import android.arch.lifecycle.ViewModelProvider;
+import android.arch.lifecycle.ViewModelProviders;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.v4.app.FragmentActivity;
 
 import com.example.sqlbrite.todo.di.UserScope;
 
@@ -30,45 +33,23 @@
 
 @UserScope
 public class UserScopeViewModelFactory implements ViewModelProvider.Factory {
-    private final Map<Class<? extends ViewModel>, Provider<ViewModel>> creators;
+
+    private final Map<Class<? extends ViewModel>, Provider<ViewModel>> mCreators;
+
+    private final Map<Class<? extends ShareViewModel>, ShareViewModel> mShareCache;
 
     @Inject
     public UserScopeViewModelFactory(Map<Class<? extends ViewModel>, Provider<ViewModel>> creators) {
-        this.creators = creators;
+        mCreators = creators;
+        mShareCache = new HashMap<>();
     }
 
-    /*
     @SuppressWarnings("unchecked")
     @Override
     public <T extends ViewModel> T create(Class<T> modelClass) {
-        Provider<? extends ViewModel> creator = creators.get(modelClass);
+        Provider<? extends ViewModel> creator = mCreators.get(modelClass);
         if (creator == null) {
-            for (Map.Entry<Class<? extends ViewModel>, Provider<ViewModel>> entry : creators.entrySet()) {
-                if (modelClass.isAssignableFrom(entry.getKey())) {
-                    creator = entry.getValue();
-                    break;
-                }
-            }
-        }
-        if (creator == null) {
-            throw new IllegalArgumentException("unknown model class " + modelClass);
-        }
-        try {
-            return (T) creator.get();
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-    */
-
-    private static final Map<Class<? extends ShareViewModel>, ShareViewModel> sShareCache = new HashMap<>();
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public <T extends ViewModel> T create(Class<T> modelClass) {
-        Provider<? extends ViewModel> creator = creators.get(modelClass);
-        if (creator == null) {
-            for (Map.Entry<Class<? extends ViewModel>, Provider<ViewModel>> entry : creators.entrySet()) {
+            for (Map.Entry<Class<? extends ViewModel>, Provider<ViewModel>> entry : mCreators.entrySet()) {
                 if (modelClass.isAssignableFrom(entry.getKey())) {
                     creator = entry.getValue();
                     break;
@@ -92,10 +73,10 @@ public UserScopeViewModelFactory(Map<Class<? extends ViewModel>, Provider<ViewMo
     }
 
     @Nullable
-    private ShareViewModel provideShareViewModel(Class<? extends ShareViewModel> modelClass, Provider<? extends ShareViewModel> creator) {
+    private ViewModel provideShareViewModel(Class<? extends ShareViewModel> modelClass, Provider<? extends ShareViewModel> creator) {
         ShareViewModel shareVM;
-        if (sShareCache.containsKey(modelClass)) {
-            shareVM = sShareCache.get(modelClass);
+        if (mShareCache.containsKey(modelClass)) {
+            shareVM = mShareCache.get(modelClass);
         } else {
             try {
                 shareVM = creator.get();
@@ -107,21 +88,61 @@ private ShareViewModel provideShareViewModel(Class<? extends ShareViewModel> mod
                 shareVM.setOnShareCreated(new Runnable() {
                     @Override
                     public void run() {
-                        sShareCache.put(modelClass, tmp);
+                        mShareCache.put(modelClass, tmp);
                     }
                 });
                 shareVM.setOnShareCleared(new Runnable() {
                     @Override
                     public void run() {
-                        sShareCache.remove(modelClass);
+                        mShareCache.remove(modelClass);
                     }
                 });
             }
         }
-
+        ViewModel vm = null;
         if (shareVM != null) {
-            shareVM.incRefCount();
+            vm = new ViewModelSmartPointer(shareVM);
+        }
+        return vm;
+    }
+
+    public final <VM extends ViewModel> VM provide(@NonNull FragmentActivity activity,
+                                                   @NonNull Class<VM> modelClass) {
+
+        VM result = ViewModelProviders.of(activity, this).get(modelClass);
+        if (ShareViewModel.class.isAssignableFrom(modelClass)) {
+            ViewModelSmartPointer<ShareViewModel> sp = (ViewModelSmartPointer<ShareViewModel>) result;
+            result = (VM) sp.ref();
+        }
+        return result;
+    }
+
+    /**
+     * Smart pointer fro {@link ShareViewModel}
+     *
+     * @param <T>
+     */
+    private final static class ViewModelSmartPointer<T extends ShareViewModel> extends ViewModel {
+
+        private T mRef;
+
+        public ViewModelSmartPointer(T ref) {
+            if (ref == null) {
+                throw new RuntimeException("requireNonNull !");
+            }
+            ref.incRefCount();
+            mRef = ref;
+        }
+
+        @Override
+        protected final void onCleared() {
+            super.onCleared();
+            mRef.decRefCount();
+        }
+
+        @NonNull
+        public final T ref() {
+            return mRef;
         }
-        return shareVM;
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory2.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory2.java
new file mode 100644
index 0000000..67e7f9d
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory2.java
@@ -0,0 +1,129 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.example.sqlbrite.todo.di.controler;
+
+import android.arch.lifecycle.ViewModel;
+import android.arch.lifecycle.ViewModelProvider;
+import android.support.annotation.Nullable;
+
+import com.example.sqlbrite.todo.di.UserScope;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.inject.Inject;
+import javax.inject.Provider;
+
+@UserScope
+public class UserScopeViewModelFactory2 implements ViewModelProvider.Factory {
+
+    private final Map<Class<? extends ViewModel>, Provider<ViewModel>> mCreators;
+
+    private final Map<Class<? extends ShareViewModel>, ShareViewModel> mShareCache;
+
+    @Inject
+    public UserScopeViewModelFactory2(Map<Class<? extends ViewModel>, Provider<ViewModel>> creators) {
+        mCreators = creators;
+        mShareCache = new HashMap<>();
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public <T extends ViewModel> T create(Class<T> modelClass) {
+        Provider<? extends ViewModel> creator = mCreators.get(modelClass);
+        if (creator == null) {
+            for (Map.Entry<Class<? extends ViewModel>, Provider<ViewModel>> entry : mCreators.entrySet()) {
+                if (modelClass.isAssignableFrom(entry.getKey())) {
+                    creator = entry.getValue();
+                    break;
+                }
+            }
+        }
+
+        if (creator == null) {
+            throw new IllegalArgumentException("unknown model class " + modelClass);
+        }
+
+        if (ShareViewModel.class.isAssignableFrom(modelClass)) {
+            return (T) provideShareViewModel((Class<ShareViewModel>) modelClass, (Provider<ShareViewModel>) creator);
+        }
+
+        try {
+            return (T) creator.get();
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Nullable
+    private ShareViewModel provideShareViewModel(Class<? extends ShareViewModel> modelClass, Provider<? extends ShareViewModel> creator) {
+        ShareViewModel shareVM;
+        if (mShareCache.containsKey(modelClass)) {
+            shareVM = mShareCache.get(modelClass);
+        } else {
+            try {
+                shareVM = creator.get();
+            } catch (Exception e) {
+                throw new RuntimeException(e);
+            }
+            if (shareVM != null) {
+                final ShareViewModel tmp = shareVM;
+                shareVM.setOnShareCreated(new Runnable() {
+                    @Override
+                    public void run() {
+                        mShareCache.put(modelClass, tmp);
+                    }
+                });
+                shareVM.setOnShareCleared(new Runnable() {
+                    @Override
+                    public void run() {
+                        mShareCache.remove(modelClass);
+                    }
+                });
+            }
+        }
+
+        if (shareVM != null) {
+            shareVM.incRefCount();
+        }
+        return shareVM;
+    }
+
+    /*
+    @SuppressWarnings("unchecked")
+    @Override
+    public <T extends ViewModel> T create(Class<T> modelClass) {
+        Provider<? extends ViewModel> creator = creators.get(modelClass);
+        if (creator == null) {
+            for (Map.Entry<Class<? extends ViewModel>, Provider<ViewModel>> entry : creators.entrySet()) {
+                if (modelClass.isAssignableFrom(entry.getKey())) {
+                    creator = entry.getValue();
+                    break;
+                }
+            }
+        }
+        if (creator == null) {
+            throw new IllegalArgumentException("unknown model class " + modelClass);
+        }
+        try {
+            return (T) creator.get();
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+    */
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java
index 1b83492..602a659 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java
@@ -1 +1 @@
-package com.example.sqlbrite.todo.ui;import android.arch.lifecycle.ViewModel;import android.arch.lifecycle.ViewModelProvider;import android.arch.lifecycle.ViewModelProviders;import android.os.Bundle;import com.example.sqlbrite.todo.di.ActivityScopeComponent;import com.example.sqlbrite.todo.di.InjectHelper;import com.example.sqlbrite.todo.model.users.UserSession;import com.example.sqlbrite.todo.schedulers.SchedulerProvider;import com.gg.rxbase.ui.RxBaseActivity;import java.lang.reflect.ParameterizedType;import java.lang.reflect.Type;import javax.inject.Inject;/** * @author Guang1234567 * @date 2018/3/10 11:21 */public abstract class BaseViewModelActivity<VIEWMODEL extends ViewModel> extends RxBaseActivity {    private ActivityScopeComponent mActivityScopeComponent;    @Inject    SchedulerProvider mSchedulerProvider;    @Inject    ViewModelProvider.Factory mViewModelFactory;    private VIEWMODEL mViewModel;    @SuppressWarnings("unchecked")    @Override    protected void onCreate(Bundle savedInstanceState) {        UserSession loginUs = InjectHelper.instance()                .getAppScopeComponent()                .loginViewControler()                .currentLoginUserSession()                .blockingFirst();        if (loginUs == null) {            throw new IllegalStateException("Must under login!");        }        mActivityScopeComponent = InjectHelper.instance()                .createActivityScopeComponent(this,                        loginUs.getUserScopeComponent());        injectOnCreate(mActivityScopeComponent);        Class<VIEWMODEL> viewModelClazz;        Type genericSuperclass = this.getClass().getGenericSuperclass();        if (genericSuperclass instanceof ParameterizedType) {            Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass).getActualTypeArguments();            viewModelClazz = (Class<VIEWMODEL>) actualTypeArguments[0];        } else {            viewModelClazz = (Class<VIEWMODEL>) genericSuperclass;        }        mViewModel = (VIEWMODEL) ViewModelProviders.of(this, mViewModelFactory).get(viewModelClazz);        super.onCreate(savedInstanceState);    }    public ActivityScopeComponent getActivityScopeComponent() {        return mActivityScopeComponent;    }    protected abstract void injectOnCreate(ActivityScopeComponent component);    protected VIEWMODEL getViewModel() {        return mViewModel;    }    public SchedulerProvider getSchedulerProvider() {        return mSchedulerProvider;    }}
\ No newline at end of file
+package com.example.sqlbrite.todo.ui;import android.arch.lifecycle.ViewModel;import android.os.Bundle;import com.example.sqlbrite.todo.di.ActivityScopeComponent;import com.example.sqlbrite.todo.di.InjectHelper;import com.example.sqlbrite.todo.di.controler.UserScopeViewModelFactory;import com.example.sqlbrite.todo.model.users.UserSession;import com.example.sqlbrite.todo.schedulers.SchedulerProvider;import com.gg.rxbase.ui.RxBaseActivity;import java.lang.reflect.ParameterizedType;import java.lang.reflect.Type;import javax.inject.Inject;/** * @author Guang1234567 * @date 2018/3/10 11:21 */public abstract class BaseViewModelActivity<VIEWMODEL extends ViewModel> extends RxBaseActivity {    private ActivityScopeComponent mActivityScopeComponent;    @Inject    SchedulerProvider mSchedulerProvider;    @Inject    UserScopeViewModelFactory mViewModelFactory;    private VIEWMODEL mViewModel;    @SuppressWarnings("unchecked")    @Override    protected void onCreate(Bundle savedInstanceState) {        UserSession loginUs = InjectHelper.instance()                .getAppScopeComponent()                .loginViewControler()                .currentLoginUserSession()                .blockingFirst();        if (loginUs == null) {            throw new IllegalStateException("Must under login!");        }        mActivityScopeComponent = InjectHelper.instance()                .createActivityScopeComponent(this,                        loginUs.getUserScopeComponent());        injectOnCreate(mActivityScopeComponent);        Class<VIEWMODEL> viewModelClazz;        Type genericSuperclass = this.getClass().getGenericSuperclass();        if (genericSuperclass instanceof ParameterizedType) {            Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass).getActualTypeArguments();            viewModelClazz = (Class<VIEWMODEL>) actualTypeArguments[0];        } else {            viewModelClazz = (Class<VIEWMODEL>) genericSuperclass;        }        mViewModel = mViewModelFactory.provide(this, viewModelClazz);        super.onCreate(savedInstanceState);    }    public ActivityScopeComponent getActivityScopeComponent() {        return mActivityScopeComponent;    }    protected abstract void injectOnCreate(ActivityScopeComponent component);    protected VIEWMODEL getViewModel() {        return mViewModel;    }    public SchedulerProvider getSchedulerProvider() {        return mSchedulerProvider;    }}
\ No newline at end of file
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelDialogFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelDialogFragment.java
index d1cde7e..84ae848 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelDialogFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelDialogFragment.java
@@ -1 +1 @@
-package com.example.sqlbrite.todo.ui;import android.arch.lifecycle.ViewModel;import android.arch.lifecycle.ViewModelProvider;import android.arch.lifecycle.ViewModelProviders;import android.content.Context;import android.os.Bundle;import android.support.annotation.Nullable;import android.view.LayoutInflater;import com.example.sqlbrite.todo.di.FragmentScopeComponent;import com.example.sqlbrite.todo.di.InjectHelper;import com.example.sqlbrite.todo.schedulers.SchedulerProvider;import com.trello.rxlifecycle2.components.support.RxAppCompatDialogFragment;import java.lang.reflect.ParameterizedType;import java.lang.reflect.Type;import javax.inject.Inject;/** * @author Guang1234567 * @date 2018/3/9 10:03 */public abstract class BaseViewModelDialogFragment<VIEWMODEL extends ViewModel> extends RxAppCompatDialogFragment {    private FragmentScopeComponent mFragmentScopeComponent;    @Inject    SchedulerProvider mSchedulerProvider;    @Inject    ViewModelProvider.Factory mViewModelFactory;    private VIEWMODEL mViewModel;    @Override    public void onAttach(Context context) {        super.onAttach(context);        if (!(getActivity() instanceof BaseViewModelActivity)) {            throw new IllegalStateException("Activity must extends " + BaseViewModelActivity.class);        }        mFragmentScopeComponent = InjectHelper.instance().createFragmentScopeComponent((BaseViewModelActivity) getActivity(), this);        injectOnAttach(mFragmentScopeComponent);    }    protected FragmentScopeComponent getFragmentScopeComponent() {        return mFragmentScopeComponent;    }    protected abstract void injectOnAttach(FragmentScopeComponent component);    @SuppressWarnings("unchecked")    @Override    public LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState) {        Class<VIEWMODEL> viewModelClazz;        Type genericSuperclass = this.getClass().getGenericSuperclass();        if (genericSuperclass instanceof ParameterizedType) {            Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass).getActualTypeArguments();            viewModelClazz = (Class<VIEWMODEL>) actualTypeArguments[0];        } else {            viewModelClazz = (Class<VIEWMODEL>) genericSuperclass;        }        mViewModel = (VIEWMODEL) ViewModelProviders.of(getActivity(), mViewModelFactory).get(viewModelClazz);        return super.onGetLayoutInflater(savedInstanceState);    }    protected VIEWMODEL getViewModel() {        return mViewModel;    }    public SchedulerProvider getSchedulerProvider() {        return mSchedulerProvider;    }}
\ No newline at end of file
+package com.example.sqlbrite.todo.ui;import android.arch.lifecycle.ViewModel;import android.content.Context;import android.os.Bundle;import android.support.annotation.Nullable;import android.view.LayoutInflater;import com.example.sqlbrite.todo.di.FragmentScopeComponent;import com.example.sqlbrite.todo.di.InjectHelper;import com.example.sqlbrite.todo.di.controler.UserScopeViewModelFactory;import com.example.sqlbrite.todo.schedulers.SchedulerProvider;import com.trello.rxlifecycle2.components.support.RxAppCompatDialogFragment;import java.lang.reflect.ParameterizedType;import java.lang.reflect.Type;import javax.inject.Inject;/** * @author Guang1234567 * @date 2018/3/9 10:03 */public abstract class BaseViewModelDialogFragment<VIEWMODEL extends ViewModel> extends RxAppCompatDialogFragment {    private FragmentScopeComponent mFragmentScopeComponent;    @Inject    SchedulerProvider mSchedulerProvider;    @Inject    UserScopeViewModelFactory mViewModelFactory;    private VIEWMODEL mViewModel;    @Override    public void onAttach(Context context) {        super.onAttach(context);        if (!(getActivity() instanceof BaseViewModelActivity)) {            throw new IllegalStateException("Activity must extends " + BaseViewModelActivity.class);        }        mFragmentScopeComponent = InjectHelper.instance().createFragmentScopeComponent((BaseViewModelActivity) getActivity(), this);        injectOnAttach(mFragmentScopeComponent);    }    protected FragmentScopeComponent getFragmentScopeComponent() {        return mFragmentScopeComponent;    }    protected abstract void injectOnAttach(FragmentScopeComponent component);    @SuppressWarnings("unchecked")    @Override    public LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState) {        Class<VIEWMODEL> viewModelClazz;        Type genericSuperclass = this.getClass().getGenericSuperclass();        if (genericSuperclass instanceof ParameterizedType) {            Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass).getActualTypeArguments();            viewModelClazz = (Class<VIEWMODEL>) actualTypeArguments[0];        } else {            viewModelClazz = (Class<VIEWMODEL>) genericSuperclass;        }        mViewModel = mViewModelFactory.provide(getActivity(), viewModelClazz);        return super.onGetLayoutInflater(savedInstanceState);    }    protected VIEWMODEL getViewModel() {        return mViewModel;    }    public SchedulerProvider getSchedulerProvider() {        return mSchedulerProvider;    }}
\ No newline at end of file
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
index 42af6d1..8391f72 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
@@ -1 +1 @@
-package com.example.sqlbrite.todo.ui;import android.arch.lifecycle.ViewModel;import android.arch.lifecycle.ViewModelProvider;import android.arch.lifecycle.ViewModelProviders;import android.content.Context;import android.os.Bundle;import android.support.annotation.Nullable;import com.example.sqlbrite.todo.di.FragmentScopeComponent;import com.example.sqlbrite.todo.di.InjectHelper;import com.example.sqlbrite.todo.schedulers.SchedulerProvider;import com.gg.rxbase.ui.RxBaseFragment;import java.lang.reflect.ParameterizedType;import java.lang.reflect.Type;import javax.inject.Inject;/** * @author Guang1234567 * @date 2018/3/9 10:03 */public abstract class BaseViewModelFragment<VIEWMODEL extends ViewModel> extends RxBaseFragment {    private FragmentScopeComponent mFragmentScopeComponent;    @Inject    SchedulerProvider mSchedulerProvider;    @Inject    ViewModelProvider.Factory mViewModelFactory;    private VIEWMODEL mViewModel;    @Override    public void onAttach(Context context) {        super.onAttach(context);        if (!(getActivity() instanceof BaseViewModelActivity)) {            throw new IllegalStateException("Activity must extends " + BaseViewModelActivity.class);        }        mFragmentScopeComponent = InjectHelper.instance().createFragmentScopeComponent((BaseViewModelActivity) getActivity(), this);        injectOnAttach(mFragmentScopeComponent);    }    protected FragmentScopeComponent getFragmentScopeComponent() {        return mFragmentScopeComponent;    }    protected abstract void injectOnAttach(FragmentScopeComponent component);    @SuppressWarnings("unchecked")    @Override    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        Class<VIEWMODEL> viewModelClazz;        Type genericSuperclass = this.getClass().getGenericSuperclass();        if (genericSuperclass instanceof ParameterizedType) {            Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass).getActualTypeArguments();            viewModelClazz = (Class<VIEWMODEL>) actualTypeArguments[0];        } else {            viewModelClazz = (Class<VIEWMODEL>) genericSuperclass;        }        mViewModel = (VIEWMODEL) ViewModelProviders.of(getActivity(), mViewModelFactory).get(viewModelClazz);    }    protected VIEWMODEL getViewModel() {        return mViewModel;    }    public SchedulerProvider getSchedulerProvider() {        return mSchedulerProvider;    }}
\ No newline at end of file
+package com.example.sqlbrite.todo.ui;import android.arch.lifecycle.ViewModel;import android.content.Context;import android.os.Bundle;import android.support.annotation.Nullable;import com.example.sqlbrite.todo.di.FragmentScopeComponent;import com.example.sqlbrite.todo.di.InjectHelper;import com.example.sqlbrite.todo.di.controler.UserScopeViewModelFactory;import com.example.sqlbrite.todo.schedulers.SchedulerProvider;import com.gg.rxbase.ui.RxBaseFragment;import java.lang.reflect.ParameterizedType;import java.lang.reflect.Type;import javax.inject.Inject;/** * @author Guang1234567 * @date 2018/3/9 10:03 */public abstract class BaseViewModelFragment<VIEWMODEL extends ViewModel> extends RxBaseFragment {    private FragmentScopeComponent mFragmentScopeComponent;    @Inject    SchedulerProvider mSchedulerProvider;    @Inject    UserScopeViewModelFactory mViewModelFactory;    private VIEWMODEL mViewModel;    @Override    public void onAttach(Context context) {        super.onAttach(context);        if (!(getActivity() instanceof BaseViewModelActivity)) {            throw new IllegalStateException("Activity must extends " + BaseViewModelActivity.class);        }        mFragmentScopeComponent = InjectHelper.instance().createFragmentScopeComponent((BaseViewModelActivity) getActivity(), this);        injectOnAttach(mFragmentScopeComponent);    }    protected FragmentScopeComponent getFragmentScopeComponent() {        return mFragmentScopeComponent;    }    protected abstract void injectOnAttach(FragmentScopeComponent component);    @SuppressWarnings("unchecked")    @Override    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        Class<VIEWMODEL> viewModelClazz;        Type genericSuperclass = this.getClass().getGenericSuperclass();        if (genericSuperclass instanceof ParameterizedType) {            Type[] actualTypeArguments = ((ParameterizedType) genericSuperclass).getActualTypeArguments();            viewModelClazz = (Class<VIEWMODEL>) actualTypeArguments[0];        } else {            viewModelClazz = (Class<VIEWMODEL>) genericSuperclass;        }        mViewModel = mViewModelFactory.provide(getActivity(), viewModelClazz);    }    protected VIEWMODEL getViewModel() {        return mViewModel;    }    public SchedulerProvider getSchedulerProvider() {        return mSchedulerProvider;    }}
\ No newline at end of file
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
index 1f79b8d..5a298dc 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
@@ -16,7 +16,6 @@
 package com.example.sqlbrite.todo.ui;
 
 import android.app.Activity;
-import android.arch.lifecycle.ViewModelProviders;
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
@@ -177,7 +176,7 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
         //listView.setEmptyView(emptyView);
         listView.setAdapter(adapter);
 
-        DemoShareViewModel demoShareViewModel = ViewModelProviders.of(getActivity(), mViewModelFactory).get(DemoShareViewModel.class);
+        DemoShareViewModel demoShareViewModel = mViewModelFactory.provide(getActivity(), DemoShareViewModel.class);
     }
 
     /*@OnItemClick(android.R.id.list)
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
index 47e027f..9e59218 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
@@ -15,7 +15,6 @@
  */
 package com.example.sqlbrite.todo.ui;
 
-import android.arch.lifecycle.ViewModelProviders;
 import android.content.Intent;
 import android.os.Bundle;
 import android.util.Log;
@@ -28,7 +27,6 @@
 import com.example.sqlbrite.todo.model.users.UserSession;
 import com.google.gson.reflect.TypeToken;
 
-import java.util.Date;
 import java.util.List;
 
 import io.reactivex.Observable;
@@ -65,7 +63,7 @@ public void accept(Integer integer) throws Exception {
             }
         });
 
-        mDemoShareViewModel = ViewModelProviders.of(this, mViewModelFactory).get(DemoShareViewModel.class);
+        mDemoShareViewModel = mViewModelFactory.provide(this, DemoShareViewModel.class);
     }
 
     @Override
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/SystemSettingActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/SystemSettingActivity.java
index 587659d..1114f99 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/SystemSettingActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/SystemSettingActivity.java
@@ -1,6 +1,5 @@
 package com.example.sqlbrite.todo.ui;
 
-import android.arch.lifecycle.ViewModelProviders;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.View;
@@ -37,7 +36,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
         ButterKnife.bind(this);
 
-        mDemoShareViewModel = ViewModelProviders.of(this, mViewModelFactory).get(DemoShareViewModel.class);
+        mDemoShareViewModel = mViewModelFactory.provide(this, DemoShareViewModel.class);
     }
 
     @OnClick(R.id.btn_logout)
