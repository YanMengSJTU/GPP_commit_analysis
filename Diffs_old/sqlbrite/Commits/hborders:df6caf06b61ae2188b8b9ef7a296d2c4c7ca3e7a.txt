diff --git a/build.gradle b/build.gradle
index c23afcc..d17b6fe 100644
--- a/build.gradle
+++ b/build.gradle
@@ -30,24 +30,26 @@ allprojects {
 ext {
   // Android dependencies.
   supportV4 = 'androidx.legacy:legacy-support-v4:1.0.0'
-  supportAnnotations = 'androidx.annotation:annotation:1.0.0'
+  supportAnnotations = 'androidx.annotation:annotation:1.1.0'
   supportTestRunner = 'androidx.test.ext:junit:1.1.1'
   supportTestRules = 'androidx.test:rules:1.2.0'
+  androidxTestRunner = 'androidx.test:runner:1.2.0'
 
-  supportSqlite = 'androidx.sqlite:sqlite:2.0.0'
-  supportSqliteFramework = 'androidx.sqlite:sqlite-framework:2.0.0'
+  supportSqlite = 'androidx.sqlite:sqlite:2.0.1'
+  supportSqliteFramework = 'androidx.sqlite:sqlite-framework:2.0.1'
 
   // Third-party dependencies.
-  dagger = 'com.google.dagger:dagger:2.13'
-  daggerCompiler = 'com.google.dagger:dagger-compiler:2.13'
-  timber = 'com.jakewharton.timber:timber:4.6.0'
-  autoValue = 'com.google.auto.value:auto-value:1.5'
-  autoValueParcel = 'com.ryanharter.auto.value:auto-value-parcel:0.2.5'
-  rxJava = 'io.reactivex.rxjava2:rxjava:2.1.3'
-  rxAndroid = 'io.reactivex.rxjava2:rxandroid:2.0.1'
-  rxBinding = 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
+  dagger = 'com.google.dagger:dagger:2.24'
+  daggerCompiler = 'com.google.dagger:dagger-compiler:2.24'
+  timber = 'com.jakewharton.timber:timber:4.7.1'
+  autoValue = 'com.google.auto.value:auto-value:1.7'
+  autoValueAnnotations = 'com.google.auto.value:auto-value-annotations:1.7'
+  autoValueParcel = 'com.ryanharter.auto.value:auto-value-parcel:0.2.8'
+  rxJava = 'io.reactivex.rxjava2:rxjava:2.2.13'
+  rxAndroid = 'io.reactivex.rxjava2:rxandroid:2.1.1'
+  rxBinding = 'com.jakewharton.rxbinding2:rxbinding:2.2.0'
   junit = 'junit:junit:4.12'
-  truth = 'com.google.truth:truth:0.36'
+  truth = 'com.google.truth:truth:1.0'
 
   // Lint dependencies.
   lintApi = "com.android.tools.lint:lint-api:${versions.lint}"
@@ -59,7 +61,7 @@ configurations {
   osstrich
 }
 dependencies {
-  osstrich 'com.squareup.osstrich:osstrich:1.2.0'
+  osstrich 'com.squareup.osstrich:osstrich:1.4.0'
 }
 task publishV1Javadoc(type: JavaExec) {
   classpath = configurations.osstrich
diff --git a/sample/build.gradle b/sample/build.gradle
index 80a9ebf..365ef66 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -14,6 +14,7 @@ dependencies {
 
   compileOnly rootProject.ext.autoValue
   annotationProcessor rootProject.ext.autoValue
+  implementation rootProject.ext.autoValueAnnotations
   annotationProcessor rootProject.ext.autoValueParcel
 
   implementation project(':sqlbrite')
@@ -24,8 +25,8 @@ android {
   compileSdkVersion versions.compileSdk
 
   compileOptions {
-    sourceCompatibility JavaVersion.VERSION_1_7
-    targetCompatibility JavaVersion.VERSION_1_7
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
   }
 
   lintOptions {
diff --git a/sqlbrite/build.gradle b/sqlbrite/build.gradle
index c30fa75..ad91f95 100644
--- a/sqlbrite/build.gradle
+++ b/sqlbrite/build.gradle
@@ -6,6 +6,7 @@ dependencies {
   implementation rootProject.ext.supportAnnotations
 
   androidTestImplementation rootProject.ext.supportTestRunner
+  androidTestImplementation rootProject.ext.androidxTestRunner
   androidTestImplementation rootProject.ext.truth
   androidTestImplementation rootProject.ext.supportSqliteFramework
   androidTestImplementation rootProject.ext.supportTestRules
@@ -23,8 +24,8 @@ android {
   }
 
   compileOptions {
-    sourceCompatibility JavaVersion.VERSION_1_7
-    targetCompatibility JavaVersion.VERSION_1_7
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
   }
 
   lintOptions {
diff --git a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/BriteDatabaseTest.java b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/BriteDatabaseTest.java
index 4fe629c..a627ce0 100644
--- a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/BriteDatabaseTest.java
+++ b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/BriteDatabaseTest.java
@@ -1020,7 +1020,7 @@
       transaction.end();
       fail();
     } catch (IllegalStateException e) {
-      assertThat(e).hasMessage("Not in transaction.");
+      assertThat(e).hasMessageThat().isEqualTo("Not in transaction.");
     }
   }
 
diff --git a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/QueryTest.java b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/QueryTest.java
index 22ed162..5c86bc5 100644
--- a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/QueryTest.java
+++ b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/QueryTest.java
@@ -85,7 +85,7 @@
       employees.blockingFirst();
       fail();
     } catch (IllegalStateException e) {
-      assertThat(e).hasMessage("Cursor returned more than 1 row");
+      assertThat(e).hasMessageThat().isEqualTo("Cursor returned more than 1 row");
     }
   }
 
@@ -118,7 +118,7 @@
       Query.mapToOneOrDefault(MAPPER, null);
       fail();
     } catch (NullPointerException e) {
-      assertThat(e).hasMessage("defaultValue == null");
+      assertThat(e).hasMessageThat().isEqualTo("defaultValue == null");
     }
   }
 
@@ -143,7 +143,7 @@
       employees.blockingFirst();
       fail();
     } catch (IllegalStateException e) {
-      assertThat(e).hasMessage("Cursor returned more than 1 row");
+      assertThat(e).hasMessageThat().isEqualTo("Cursor returned more than 1 row");
     }
   }
 
diff --git a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/RecordingObserver.java b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/RecordingObserver.java
index b6f7cdb..a04acf3 100644
--- a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/RecordingObserver.java
+++ b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/RecordingObserver.java
@@ -22,6 +22,7 @@
 import java.util.concurrent.LinkedBlockingDeque;
 
 import static com.google.common.truth.Truth.assertThat;
+import static com.google.common.truth.Truth.assertWithMessage;
 import static com.squareup.sqlbrite3.SqlBrite.Query;
 
 class RecordingObserver extends DisposableObserver<Query> {
@@ -83,12 +84,14 @@ public void assertNoMoreEvents() {
     }
 
     public CursorAssert hasRow(Object... values) {
-      assertThat(cursor.moveToNext()).named("row " + (row + 1) + " exists").isTrue();
+      assertWithMessage("row " + (row + 1) + " exists")
+          .that(cursor.moveToNext()).isTrue();
       row += 1;
-      assertThat(cursor.getColumnCount()).named("column count").isEqualTo(values.length);
+      assertWithMessage("column count")
+          .that(cursor.getColumnCount()).isEqualTo(values.length);
       for (int i = 0; i < values.length; i++) {
-        assertThat(cursor.getString(i))
-            .named("row " + row + " column '" + cursor.getColumnName(i) + "'")
+        assertWithMessage("row " + row + " column '" + cursor.getColumnName(i) + "'")
+            .that(cursor.getString(i))
             .isEqualTo(values[i]);
       }
       return this;
diff --git a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/SqlBriteTest.java b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/SqlBriteTest.java
index eb07d6c..f153674 100644
--- a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/SqlBriteTest.java
+++ b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite3/SqlBriteTest.java
@@ -27,13 +27,13 @@
       builder.logger(null);
       fail();
     } catch (NullPointerException e) {
-      assertThat(e).hasMessage("logger == null");
+      assertThat(e).hasMessageThat().isEqualTo("logger == null");
     }
     try {
       builder.queryTransformer(null);
       fail();
     } catch (NullPointerException e) {
-      assertThat(e).hasMessage("queryTransformer == null");
+      assertThat(e).hasMessageThat().isEqualTo("queryTransformer == null");
     }
   }
 
