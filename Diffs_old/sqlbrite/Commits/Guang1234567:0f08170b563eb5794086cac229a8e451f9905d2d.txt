diff --git a/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java b/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
index 3fd0e15..1857a80 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
@@ -18,25 +18,33 @@
 import android.app.Application;
 import android.content.Context;
 
-import com.example.sqlbrite.todo.di.TodoComponent;
-import com.example.sqlbrite.todo.di.TodoModule;
+import com.example.sqlbrite.todo.di.AppScopeComponent;
+import com.example.sqlbrite.todo.di.AppScopeModule;
+import com.example.sqlbrite.todo.di.DaggerAppScopeComponent;
+import com.example.sqlbrite.todo.di.InjectHelper;
+import com.example.sqlbrite.todo.di.UserScopeComponent;
 
 import timber.log.Timber;
 
 public final class TodoApp extends Application {
-  private TodoComponent mainComponent;
+    private AppScopeComponent mAppScopeComponent;
 
-  @Override public void onCreate() {
-    super.onCreate();
+    private UserScopeComponent mUserScopeComponent;
 
-    if (BuildConfig.DEBUG) {
-      Timber.plant(new Timber.DebugTree());
-    }
+    @Override
+    public void onCreate() {
+        super.onCreate();
+
+        if (BuildConfig.DEBUG) {
+            Timber.plant(new Timber.DebugTree());
+        }
 
-    mainComponent = DaggerTodoComponent.builder().todoModule(new TodoModule(this)).build();
-  }
+        mAppScopeComponent = DaggerAppScopeComponent.builder().appScopeModule(new AppScopeModule(this)).build();
 
-  public static TodoComponent getComponent(Context context) {
-    return ((TodoApp) context.getApplicationContext()).mainComponent;
-  }
+        mUserScopeComponent = InjectHelper.createUserScopeComponent(this);
+    }
+
+    public static AppScopeComponent getAppScopeComponent(Context context) {
+        return ((TodoApp) context.getApplicationContext()).mAppScopeComponent;
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
index 266ebc7..e9ef00d 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
@@ -2,6 +2,9 @@
 
 import com.example.sqlbrite.todo.model.MainDataSource;
 import com.example.sqlbrite.todo.model.local.db.TodoItem;
+import com.example.sqlbrite.todo.model.users.UserManager;
+import com.example.sqlbrite.todo.model.users.UserSession;
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.example.sqlbrite.todo.ui.ListsItem;
 import com.gg.rxbase.controller.RxBaseViewModel;
 import com.gg.rxbase.lifecycle.ViewModelEvent;
@@ -12,10 +15,13 @@
 
 import javax.inject.Inject;
 
+import dagger.Lazy;
 import io.reactivex.Observable;
-import io.reactivex.Single;
-import io.reactivex.SingleObserver;
-import io.reactivex.disposables.Disposable;
+import io.reactivex.ObservableEmitter;
+import io.reactivex.ObservableOnSubscribe;
+import io.reactivex.functions.Consumer;
+import io.reactivex.functions.Function;
+import io.reactivex.functions.Predicate;
 
 /**
  * @author Guang1234567
@@ -25,12 +31,20 @@
 public class MainViewModel extends RxBaseViewModel {
 
     private final MainDataSource mDataSource;
+    private final Lazy<Observable<UserManager>> mUserManager;
+    private final SchedulerProvider mSchedulerProvider;
+
+    private UserSession mUserSession = UserSession.FAIL;
 
     private Date mLastCreateTime;
 
     @Inject
-    public MainViewModel(MainDataSource dataSource) {
+    public MainViewModel(MainDataSource dataSource,
+                         Lazy<Observable<UserManager>> userManager,
+                         SchedulerProvider schedulerProvider) {
         mDataSource = dataSource;
+        mUserManager = userManager;
+        mSchedulerProvider = schedulerProvider;
 
         mLastCreateTime = new Date();
     }
@@ -74,4 +88,54 @@ public long createNewOneTodoItem(long listId, String description) {
     public File exportDecryption() throws Exception {
         return mDataSource.exportDecryption();
     }
+
+    public Observable<UserSession> login(final String userId, final String password) {
+        return mUserManager.get()
+                .observeOn(mSchedulerProvider.viewModel())
+                .filter(new Predicate<UserManager>() {
+                    @Override
+                    public boolean test(UserManager userManager) throws Exception {
+                        return UserSession.FAIL.equals(mUserSession);
+                    }
+                })
+                .map(new Function<UserManager, UserSession>() {
+                    @Override
+                    public UserSession apply(UserManager userManager) throws Exception {
+                        return userManager.login(userId, password);
+                    }
+                })
+                .doOnNext(new Consumer<UserSession>() {
+                    @Override
+                    public void accept(UserSession userSession) throws Exception {
+                        mUserSession = userSession;
+                    }
+                });
+    }
+
+    public Observable<UserSession> isUserSessionAlive() {
+        return Observable
+                .create(new ObservableOnSubscribe<UserSession>() {
+                    @Override
+                    public void subscribe(ObservableEmitter<UserSession> e) throws Exception {
+                        e.onNext(mUserSession);
+                        if (!e.isDisposed()) {
+                            e.onComplete();
+                        }
+                    }
+                })
+                .observeOn(mSchedulerProvider.viewModel())
+                .filter(new Predicate<UserSession>() {
+                    @Override
+                    public boolean test(UserSession session) throws Exception {
+                        return mUserSession.isAlive();
+                    }
+                });
+    }
+
+    public void logout() {
+        if (!UserSession.FAIL.equals(mUserSession)) {
+            mUserSession.logout();
+            mUserSession = UserSession.FAIL;
+        }
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScope.java b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScope.java
new file mode 100644
index 0000000..08a7e1d
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScope.java
@@ -0,0 +1,16 @@
+package com.example.sqlbrite.todo.di;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+import javax.inject.Scope;
+
+/**
+ * @author Administrator
+ * @date 2018/3/14 13:09
+ */
+
+@Scope
+@Retention(RetentionPolicy.RUNTIME)
+public @interface ActivityScope {
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java
new file mode 100644
index 0000000..875ac35
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java
@@ -0,0 +1,27 @@
+package com.example.sqlbrite.todo.di;
+
+import android.app.Activity;
+import android.arch.lifecycle.ViewModelProvider;
+
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
+import com.example.sqlbrite.todo.ui.MainActivity;
+
+import dagger.Component;
+
+/**
+ * @author Administrator
+ * @date 2018/3/14 13:10
+ */
+
+@ActivityScope
+@Component(modules = ActivityScopeModule.class, dependencies = {UserScopeComponent.class})
+public interface ActivityScopeComponent {
+
+    Activity activity();
+
+    SchedulerProvider schedulerProvider();
+
+    ViewModelProvider.Factory viewModelProviderFactory();
+
+    void inject(MainActivity activity);
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeModule.java
new file mode 100644
index 0000000..9dd6446
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeModule.java
@@ -0,0 +1,30 @@
+package com.example.sqlbrite.todo.di;
+
+import android.app.Activity;
+
+import com.example.sqlbrite.todo.di.model.UserScopeModelModule;
+
+import dagger.Module;
+import dagger.Provides;
+
+/**
+ * @author Administrator
+ * @date 2018/3/14 13:11
+ */
+
+@Module(includes = {
+        UserScopeModelModule.class,
+})
+public class ActivityScopeModule {
+    private final Activity mActivity;
+
+    public ActivityScopeModule(Activity activity) {
+        mActivity = activity;
+    }
+
+    @Provides
+    @ActivityScope
+    Activity provideActivity() {
+        return mActivity;
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/TodoComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
similarity index 57%
rename from sample/src/main/java/com/example/sqlbrite/todo/di/TodoComponent.java
rename to sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
index 3731685..384fa31 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/TodoComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
@@ -15,27 +15,23 @@
  */
 package com.example.sqlbrite.todo.di;
 
-import com.example.sqlbrite.todo.ui.ItemsFragment;
-import com.example.sqlbrite.todo.ui.ListsFragment;
-import com.example.sqlbrite.todo.ui.MainActivity;
-import com.example.sqlbrite.todo.ui.NewItemFragment;
-import com.example.sqlbrite.todo.ui.NewListFragment;
+import android.app.Application;
+
+import com.example.sqlbrite.todo.model.users.UserManager;
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 
 import javax.inject.Singleton;
 
 import dagger.Component;
+import io.reactivex.Observable;
 
 @Singleton
-@Component(modules = TodoModule.class)
-public interface TodoComponent {
-
-    void inject(MainActivity activity);
-
-    void inject(ListsFragment fragment);
+@Component(modules = AppScopeModule.class)
+public interface AppScopeComponent {
 
-    void inject(ItemsFragment fragment);
+    Application application();
 
-    void inject(NewItemFragment fragment);
+    SchedulerProvider schedulerProvider();
 
-    void inject(NewListFragment fragment);
+    Observable<UserManager> userManager();
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/TodoModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeModule.java
similarity index 74%
rename from sample/src/main/java/com/example/sqlbrite/todo/di/TodoModule.java
rename to sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeModule.java
index 42aa2b2..010b6e4 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/TodoModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeModule.java
@@ -16,9 +16,9 @@
 package com.example.sqlbrite.todo.di;
 
 import android.app.Application;
+import android.content.Context;
 
-import com.example.sqlbrite.todo.di.controler.ViewModelModule;
-import com.example.sqlbrite.todo.di.model.DataSourceModule;
+import com.example.sqlbrite.todo.di.model.AppScopeModelModule;
 import com.example.sqlbrite.todo.di.schedulers.SchedulerModule;
 
 import javax.inject.Singleton;
@@ -28,15 +28,14 @@
 
 @Module(
         includes = {
-                DataSourceModule.class,
-                ViewModelModule.class,
-                SchedulerModule.class
+                SchedulerModule.class,
+                AppScopeModelModule.class
         }
 )
-public final class TodoModule {
+public final class AppScopeModule {
     private final Application application;
 
-    TodoModule(Application application) {
+    public AppScopeModule(Application application) {
         this.application = application;
     }
 
@@ -45,4 +44,10 @@
     Application provideApplication() {
         return application;
     }
+
+    @Provides
+    @Singleton
+    public Context provideContext() {
+        return application;
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/FragmentScope.java b/sample/src/main/java/com/example/sqlbrite/todo/di/FragmentScope.java
new file mode 100644
index 0000000..950ae83
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/FragmentScope.java
@@ -0,0 +1,16 @@
+package com.example.sqlbrite.todo.di;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+import javax.inject.Scope;
+
+/**
+ * @author Administrator
+ * @date 2018/3/14 12:38
+ */
+
+@Scope
+@Retention(RetentionPolicy.RUNTIME)
+public @interface FragmentScope {
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/FragmentScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/FragmentScopeComponent.java
new file mode 100644
index 0000000..a823d55
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/FragmentScopeComponent.java
@@ -0,0 +1,27 @@
+package com.example.sqlbrite.todo.di;
+
+import android.arch.lifecycle.ViewModelProvider;
+import android.support.v4.app.Fragment;
+
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
+import com.example.sqlbrite.todo.ui.ItemsFragment;
+import com.example.sqlbrite.todo.ui.ListsFragment;
+import com.example.sqlbrite.todo.ui.NewItemFragment;
+import com.example.sqlbrite.todo.ui.NewListFragment;
+
+import dagger.Component;
+
+@FragmentScope
+@Component(modules = FragmentScopeModule.class, dependencies = ActivityScopeComponent.class)
+public interface FragmentScopeComponent {
+
+    Fragment fragment();
+
+    void inject(ListsFragment fragment);
+
+    void inject(ItemsFragment fragment);
+
+    void inject(NewItemFragment fragment);
+
+    void inject(NewListFragment fragment);
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/FragmentScopeModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/FragmentScopeModule.java
new file mode 100644
index 0000000..08803d0
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/FragmentScopeModule.java
@@ -0,0 +1,26 @@
+package com.example.sqlbrite.todo.di;
+
+import android.support.v4.app.Fragment;
+
+import dagger.Module;
+import dagger.Provides;
+
+/**
+ * @author Administrator
+ * @date 2018/3/14 13:11
+ */
+
+@Module
+public class FragmentScopeModule {
+    private final Fragment mFragment;
+
+    public FragmentScopeModule(Fragment fragment) {
+        mFragment = fragment;
+    }
+
+    @Provides
+    @FragmentScope
+    Fragment provideFragment() {
+        return mFragment;
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/InjectHelper.java b/sample/src/main/java/com/example/sqlbrite/todo/di/InjectHelper.java
new file mode 100644
index 0000000..7231738
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/InjectHelper.java
@@ -0,0 +1,43 @@
+package com.example.sqlbrite.todo.di;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.v4.app.Fragment;
+
+import com.example.sqlbrite.todo.TodoApp;
+
+/**
+ * @author Administrator
+ * @date 2018/3/14 17:34
+ */
+
+public class InjectHelper {
+
+    public static FragmentScopeComponent createFragmentScopeComponent(Context context, Activity activity, Fragment fragment) {
+        context = context.getApplicationContext();
+        return DaggerFragmentScopeComponent.builder()
+                .activityScopeComponent(
+                        createActivityScopeComponent(context, activity)
+                )
+                .fragmentScopeModule(new FragmentScopeModule(fragment))
+                .build();
+    }
+
+    public static ActivityScopeComponent createActivityScopeComponent(Context context, Activity activity) {
+        context = context.getApplicationContext();
+        return DaggerActivityScopeComponent.builder()
+                .userScopeComponent(createUserScopeComponent(context))
+                .activityScopeModule(new ActivityScopeModule(activity))
+                .build();
+    }
+
+    public static UserScopeComponent createUserScopeComponent(Context context) {
+        context = context.getApplicationContext();
+        return DaggerUserScopeComponent.builder().appScopeComponent(createAppScopeComponent(context)).build();
+    }
+
+    public static AppScopeComponent createAppScopeComponent(Context context) {
+        context = context.getApplicationContext();
+        return TodoApp.getAppScopeComponent(context);
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/UserScope.java b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScope.java
new file mode 100644
index 0000000..cd7ee5d
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScope.java
@@ -0,0 +1,16 @@
+package com.example.sqlbrite.todo.di;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+import javax.inject.Scope;
+
+/**
+ * @author Administrator
+ * @date 2018/3/14 12:38
+ */
+
+@Scope
+@Retention(RetentionPolicy.RUNTIME)
+public @interface UserScope {
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
new file mode 100644
index 0000000..5867043
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
@@ -0,0 +1,16 @@
+package com.example.sqlbrite.todo.di;
+
+import android.arch.lifecycle.ViewModelProvider;
+
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
+
+import dagger.Component;
+
+@UserScope
+@Component(modules = UserScopeModule.class, dependencies = AppScopeComponent.class)
+public interface UserScopeComponent {
+
+    SchedulerProvider schedulerProvider();
+
+    ViewModelProvider.Factory viewModelProviderFactory();
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeModule.java
new file mode 100644
index 0000000..ef95432
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeModule.java
@@ -0,0 +1,13 @@
+package com.example.sqlbrite.todo.di;
+
+import com.example.sqlbrite.todo.di.controler.ViewModelModule;
+import com.example.sqlbrite.todo.di.model.UserScopeModelModule;
+
+import dagger.Module;
+
+@Module(includes = {UserScopeModelModule.class, ViewModelModule.class,})
+public final class UserScopeModule {
+
+    public UserScopeModule() {
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/TodoViewModelFactory.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/TodoViewModelFactory.java
index d9d31ca..952f93d 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/TodoViewModelFactory.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/TodoViewModelFactory.java
@@ -19,13 +19,15 @@
 import android.arch.lifecycle.ViewModel;
 import android.arch.lifecycle.ViewModelProvider;
 
+import com.example.sqlbrite.todo.di.UserScope;
+
 import java.util.Map;
 
 import javax.inject.Inject;
 import javax.inject.Provider;
 import javax.inject.Singleton;
 
-@Singleton
+@UserScope
 public class TodoViewModelFactory implements ViewModelProvider.Factory {
     private final Map<Class<? extends ViewModel>, Provider<ViewModel>> creators;
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/AppScopeModelModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/AppScopeModelModule.java
new file mode 100644
index 0000000..3ae7488
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/AppScopeModelModule.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.example.sqlbrite.todo.di.model;
+
+import android.app.Application;
+
+import com.example.sqlbrite.todo.model.users.UserManager;
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
+
+import javax.inject.Singleton;
+
+import dagger.Module;
+import dagger.Provides;
+import io.reactivex.Observable;
+
+@Module
+public final class AppScopeModelModule {
+
+    @Provides
+    @Singleton
+    public UserManager provideUserManager(Application application, SchedulerProvider schedulerProvider) {
+        return new UserManager.UserManagerImpl(application, schedulerProvider);
+    }
+
+    @Provides
+    @Singleton
+    public Observable<UserManager> provideUserManagerObservable(UserManager userManager) {
+        return userManager.toObservable();
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/DataSourceModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/UserScopeModelModule.java
similarity index 94%
rename from sample/src/main/java/com/example/sqlbrite/todo/di/model/DataSourceModule.java
rename to sample/src/main/java/com/example/sqlbrite/todo/di/model/UserScopeModelModule.java
index 88c2923..f5b53f7 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/model/DataSourceModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/UserScopeModelModule.java
@@ -15,6 +15,7 @@
  */
 package com.example.sqlbrite.todo.di.model;
 
+import com.example.sqlbrite.todo.di.UserScope;
 import com.example.sqlbrite.todo.di.model.local.db.DbModule;
 import com.example.sqlbrite.todo.model.MainDataSource;
 import com.example.sqlbrite.todo.model.MainRepository;
@@ -37,9 +38,9 @@
                 NetModule.class
         }
 )
-public final class DataSourceModule {
+public final class UserScopeModelModule {
     @Provides
-    @Singleton
+    @UserScope
     MainDataSource provideMainDataSource(BriteDatabase briteDatabaseb, ListsItemDao listsItemDao, TodoListDao todoListDao, TodoItemDao todoItemDao) {
         return new MainRepository(briteDatabaseb, listsItemDao, todoListDao, todoItemDao);
     }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/db/DbModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/db/DbModule.java
index 0ee0e07..bbff2d2 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/db/DbModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/db/DbModule.java
@@ -20,6 +20,7 @@
 import android.arch.persistence.db.SupportSQLiteOpenHelper.Configuration;
 import android.arch.persistence.db.wcdb.WcdbSQLiteOpenHelperFactory;
 
+import com.example.sqlbrite.todo.di.UserScope;
 import com.example.sqlbrite.todo.model.local.db.DbCallback;
 import com.example.sqlbrite.todo.model.local.db.TodoItemDao;
 import com.example.sqlbrite.todo.model.local.db.TodoListDao;
@@ -37,7 +38,7 @@
 @Module
 public final class DbModule {
     @Provides
-    @Singleton
+    @UserScope
     SqlBrite provideSqlBrite() {
         return new SqlBrite.Builder()
                 .logger(new SqlBrite.Logger() {
@@ -50,7 +51,7 @@ public void log(String message) {
     }
 
     @Provides
-    @Singleton
+    @UserScope
     SupportSQLiteOpenHelper provideSupportSQLiteOpenHelper(Application application) {
         // 1) android native sqlite, no cipher
         /*
@@ -108,7 +109,7 @@ SupportSQLiteOpenHelper provideSupportSQLiteOpenHelper(Application application)
     }
 
     @Provides
-    @Singleton
+    @UserScope
     BriteDatabase provideDatabase(SqlBrite sqlBrite, SupportSQLiteOpenHelper helper, SchedulerProvider schedulerProvider) {
         BriteDatabase briteDatabase = sqlBrite.wrapDatabaseHelper(helper, schedulerProvider.database());
         briteDatabase.setLoggingEnabled(true);
@@ -116,25 +117,25 @@ BriteDatabase provideDatabase(SqlBrite sqlBrite, SupportSQLiteOpenHelper helper,
     }
 
     /*@Provides
-    @Singleton
+    @UserScope
     BriteDatabaseProvider provideDatabaseProvider(SqlBrite sqlBrite, SupportSQLiteOpenHelper helper, SchedulerProvider schedulerProvider) {
         return new BriteDatabaseProvider(sqlBrite, helper, schedulerProvider.database());
     }*/
 
     @Provides
-    @Singleton
+    @UserScope
     TodoListDao provideTodoListDao(BriteDatabase db) {
         return new TodoListDao(db);
     }
 
     @Provides
-    @Singleton
+    @UserScope
     TodoItemDao provideTodoItemDao(BriteDatabase db) {
         return new TodoItemDao(db);
     }
 
     @Provides
-    @Singleton
+    @UserScope
     ListsItemDao provideListsItemDao(BriteDatabase db) {
         return new ListsItemDao(db);
     }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/NetModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/NetModule.java
new file mode 100644
index 0000000..f0ea6c5
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/NetModule.java
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.example.sqlbrite.todo.di.model.remote;
+
+import dagger.Module;
+
+@Module
+public final class NetModule {
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserManager.java b/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserManager.java
new file mode 100644
index 0000000..afbd20b
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserManager.java
@@ -0,0 +1,76 @@
+package com.example.sqlbrite.todo.model.users;
+
+import android.app.Application;
+import android.support.annotation.NonNull;
+
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
+
+import javax.inject.Inject;
+
+import io.reactivex.Observable;
+import io.reactivex.ObservableEmitter;
+import io.reactivex.ObservableOnSubscribe;
+
+/**
+ * @author Administrator
+ * @date 2018/3/14 12:31
+ */
+
+public interface UserManager {
+
+    UserSession login(String userId, String password);
+
+    void logout();
+
+    UserSession curSession();
+
+    Observable<UserManager> toObservable();
+
+    class UserManagerImpl implements UserManager {
+
+        private final SchedulerProvider mSchedulerProvider;
+
+        private UserSession mUserSession;
+
+        @Inject
+        public UserManagerImpl(Application application, SchedulerProvider schedulerProvider) {
+            mSchedulerProvider = schedulerProvider;
+
+            mUserSession = UserSession.FAIL;
+        }
+
+        @NonNull
+        @Override
+        public UserSession login(String userId, String password) {
+            if (UserSession.FAIL.equals(mUserSession)) {
+                // TODO login here
+                mUserSession = UserSession.login(userId, password, this);
+            }
+            return mUserSession;
+        }
+
+        @Override
+        public void logout() {
+            mUserSession = UserSession.FAIL;
+        }
+
+        @NonNull
+        @Override
+        public UserSession curSession() {
+            return mUserSession;
+        }
+
+        @Override
+        public Observable<UserManager> toObservable() {
+            return Observable.create(new ObservableOnSubscribe<UserManager>() {
+                @Override
+                public void subscribe(ObservableEmitter<UserManager> e) throws Exception {
+                    e.onNext(UserManagerImpl.this);
+                    if (!e.isDisposed()) {
+                        e.onComplete();
+                    }
+                }
+            });
+        }
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserSession.java b/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserSession.java
new file mode 100644
index 0000000..38ae60f
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserSession.java
@@ -0,0 +1,64 @@
+package com.example.sqlbrite.todo.model.users;
+
+import com.google.auto.value.AutoValue;
+
+/**
+ * @author Administrator
+ * @date 2018/3/14 18:42
+ */
+
+@AutoValue
+public abstract class UserSession {
+
+    public static final UserSession FAIL = new NullUserSession();
+
+    private boolean mIsAlive = false;
+
+    public abstract String name();
+
+    public abstract String token();
+
+    abstract UserManager userManager();
+
+    static UserSession login(String name, String token, UserManager userManager) {
+        UserSession s =  new AutoValue_UserSession(name, token, userManager);
+        s.mIsAlive = true;
+        return s;
+    }
+
+    public void logout() {
+        UserManager mgr = userManager();
+        if (mgr != null) {
+            mgr.logout();
+        }
+
+        mIsAlive = false;
+    }
+
+    public boolean isAlive() {
+        return mIsAlive;
+    }
+
+    private static class NullUserSession extends UserSession {
+
+        @Override
+        public String name() {
+            return "";
+        }
+
+        @Override
+        public String token() {
+            return "";
+        }
+
+        @Override
+        UserManager userManager() {
+            return null;
+        }
+
+        @Override
+        public boolean equals(Object obj) {
+            return super.equals(obj) || obj == null;
+        }
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerProvider.java b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerProvider.java
index 6a9fe93..c8cd086 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerProvider.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerProvider.java
@@ -12,6 +12,15 @@
     @NonNull
     Scheduler computation();
 
+    @NonNull
+    Scheduler single();
+
+    @NonNull
+    Scheduler newThread();
+
+    @NonNull
+    Scheduler trampoline();
+
     @NonNull
     Scheduler io();
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/TodoSchedulerProvider.java b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/TodoSchedulerProvider.java
index 1f55a24..27e9b86 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/TodoSchedulerProvider.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/TodoSchedulerProvider.java
@@ -18,6 +18,24 @@ public Scheduler computation() {
         return Schedulers.computation();
     }
 
+    @Override
+    @NonNull
+    public Scheduler single() {
+        return Schedulers.single();
+    }
+
+    @Override
+    @NonNull
+    public Scheduler newThread() {
+        return Schedulers.newThread();
+    }
+
+    @Override
+    @NonNull
+    public Scheduler trampoline() {
+        return Schedulers.trampoline();
+    }
+
     @Override
     @NonNull
     public Scheduler io() {
@@ -30,14 +48,14 @@ public Scheduler ui() {
         return AndroidSchedulers.mainThread();
     }
 
-    @NonNull
     @Override
+    @NonNull
     public Scheduler viewModel() {
         return Schedulers.single();
     }
 
-    @NonNull
     @Override
+    @NonNull
     public Scheduler database() {
         return Schedulers.io();
     }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java
index 331f76d..d5eca7d 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java
@@ -5,6 +5,10 @@
 import android.arch.lifecycle.ViewModelProviders;
 import android.os.Bundle;
 
+import com.example.sqlbrite.todo.TodoApp;
+import com.example.sqlbrite.todo.di.ActivityScopeComponent;
+import com.example.sqlbrite.todo.di.DaggerActivityScopeComponent;
+import com.example.sqlbrite.todo.di.InjectHelper;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.gg.rxbase.ui.RxBaseActivity;
 
@@ -30,14 +34,16 @@
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        toInject(this);
+        toInject(
+                InjectHelper.createActivityScopeComponent(this, this)
+        );
 
         ParameterizedType type = (ParameterizedType) this.getClass().getGenericSuperclass();
         Class viewModelClazz = (Class) type.getActualTypeArguments()[0];
         mViewModel = (VIEWMODEL) ViewModelProviders.of(this, mViewModelFactory).get(viewModelClazz);
     }
 
-    protected abstract void toInject(BaseViewModelActivity<VIEWMODEL> self);
+    protected abstract void toInject(ActivityScopeComponent component);
 
     protected VIEWMODEL getViewModel() {
         return mViewModel;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
index 27fd0f2..c96ef89 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
@@ -9,6 +9,11 @@
 import android.support.v4.app.Fragment;
 
 import com.example.sqlbrite.todo.TodoApp;
+import com.example.sqlbrite.todo.di.DaggerActivityScopeComponent;
+import com.example.sqlbrite.todo.di.DaggerFragmentScopeComponent;
+import com.example.sqlbrite.todo.di.FragmentScopeComponent;
+import com.example.sqlbrite.todo.di.FragmentScopeModule;
+import com.example.sqlbrite.todo.di.InjectHelper;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.gg.rxbase.ui.RxBaseFragment;
 
@@ -34,10 +39,12 @@
     @Override
     public void onAttach(Context context) {
         super.onAttach(context);
-        toInject(this);
+        toInject(
+                InjectHelper.createFragmentScopeComponent(context, getActivity(), this)
+        );
     }
 
-    protected abstract void toInject(BaseViewModelFragment<VIEWMODEL> self);
+    protected abstract void toInject(FragmentScopeComponent component);
 
     @Override
     public void onActivityCreated(@Nullable Bundle savedInstanceState) {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
index fa36379..179b3fd 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
@@ -32,6 +32,7 @@
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.MainViewModel;
+import com.example.sqlbrite.todo.di.FragmentScopeComponent;
 import com.example.sqlbrite.todo.model.local.db.TodoItem;
 import com.jakewharton.rxbinding2.widget.AdapterViewItemClickEvent;
 import com.jakewharton.rxbinding2.widget.RxAdapterView;
@@ -42,11 +43,8 @@
 import butterknife.BindView;
 import butterknife.ButterKnife;
 import io.reactivex.Observable;
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.disposables.CompositeDisposable;
 import io.reactivex.functions.BiFunction;
 import io.reactivex.functions.Consumer;
-import io.reactivex.schedulers.Schedulers;
 
 import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_IF_ROOM;
 import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_WITH_TEXT;
@@ -98,8 +96,8 @@ public void onAttach(Context context) {
     }
 
     @Override
-    protected void toInject(BaseViewModelFragment<MainViewModel> self) {
-        TodoApp.getComponent(getContext()).inject(this);
+    protected void toInject(FragmentScopeComponent component) {
+        component.inject(this);
     }
 
     @Override
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
index 17b1e10..58c3221 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
@@ -33,6 +33,7 @@
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.MainViewModel;
+import com.example.sqlbrite.todo.di.FragmentScopeComponent;
 import com.trello.rxlifecycle2.android.FragmentEvent;
 
 import java.io.File;
@@ -82,8 +83,8 @@ public void onAttach(Context context) {
     }
 
     @Override
-    protected void toInject(BaseViewModelFragment<MainViewModel> self) {
-        TodoApp.getComponent(self.getContext()).inject(this);
+    protected void toInject(FragmentScopeComponent component) {
+        component.inject(this);
     }
 
     @Override
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
index 7d1598b..db25543 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
@@ -16,31 +16,74 @@
 package com.example.sqlbrite.todo.ui;
 
 import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-import android.support.v7.app.AppCompatActivity;
+import android.widget.Toast;
 
 import com.example.sqlbrite.todo.R;
-import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.MainViewModel;
-import com.gg.rxbase.ui.RxBaseActivity;
-import com.trello.rxlifecycle2.components.support.RxFragmentActivity;
+import com.example.sqlbrite.todo.di.ActivityScopeComponent;
+import com.example.sqlbrite.todo.model.users.UserSession;
+import com.trello.rxlifecycle2.android.ActivityEvent;
+
+import io.reactivex.Observable;
+import io.reactivex.ObservableSource;
+import io.reactivex.functions.Consumer;
+import io.reactivex.functions.Function;
 
 public final class MainActivity extends BaseViewModelActivity<MainViewModel>
         implements ListsFragment.Listener, ItemsFragment.Listener {
 
     @Override
-    protected void onCreate(Bundle savedInstanceState) {
+    protected void onCreate(final Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        if (savedInstanceState == null) {
-            getSupportFragmentManager().beginTransaction()
-                    .add(android.R.id.content, ListsFragment.newInstance())
-                    .commit();
+
+        getViewModel()
+                .login("id_user_lucy", "pwd_1234567")
+                .compose(this.<UserSession>bindUntilEvent(ActivityEvent.DESTROY))
+                .flatMap(new Function<UserSession, Observable<UserSession>>() {
+                    @Override
+                    public Observable<UserSession> apply(UserSession userSession) throws Exception {
+                        return UserSession.FAIL.equals(userSession) ?
+                                Observable.<UserSession>error(new AssertionError())
+                                : Observable.just(userSession);
+                    }
+                })
+                .observeOn(getSchedulerProvider().ui())
+                .subscribe(new Consumer<UserSession>() {
+                               @Override
+                               public void accept(UserSession userSession) throws Exception {
+                                   Toast.makeText(MainActivity.this, "登陆成功!\n进入界面!", Toast.LENGTH_SHORT).show();
+
+                                   if (savedInstanceState == null) {
+                                       getSupportFragmentManager().beginTransaction()
+                                               .add(android.R.id.content, ListsFragment.newInstance())
+                                               .commit();
+                                   }
+                               }
+                           },
+                        new Consumer<Throwable>() {
+                            @Override
+                            public void accept(Throwable throwable) throws Exception {
+                                Toast.makeText(MainActivity.this, "登陆失败!", Toast.LENGTH_SHORT).show();
+                            }
+                        });
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+        if (isFinishing()) {
+            getViewModel().logout();
         }
     }
 
     @Override
-    protected void toInject(BaseViewModelActivity<MainViewModel> self) {
-        TodoApp.getComponent(this).inject(this);
+    protected void toInject(ActivityScopeComponent component) {
+        component.inject(this);
     }
 
     @Override
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
index 9240828..2f9417f 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
@@ -31,6 +31,7 @@
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.MainViewModel;
+import com.example.sqlbrite.todo.di.InjectHelper;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.jakewharton.rxbinding2.widget.RxTextView;
 import com.trello.rxlifecycle2.components.support.RxAppCompatDialogFragment;
@@ -40,7 +41,6 @@
 import io.reactivex.Observable;
 import io.reactivex.functions.BiFunction;
 import io.reactivex.functions.Consumer;
-import io.reactivex.schedulers.Schedulers;
 import io.reactivex.subjects.PublishSubject;
 
 import static butterknife.ButterKnife.findById;
@@ -73,9 +73,9 @@ private long getListId() {
     }
 
     @Override
-    public void onAttach(Activity activity) {
-        super.onAttach(activity);
-        TodoApp.getComponent(activity).inject(this);
+    public void onAttach(Activity context) {
+        super.onAttach(context);
+        InjectHelper.createFragmentScopeComponent(context, getActivity(), this).inject(this);
     }
 
     @NonNull
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
index ad58eb3..c2a7888 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
@@ -15,7 +15,6 @@
  */
 package com.example.sqlbrite.todo.ui;
 
-import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.arch.lifecycle.ViewModelProvider;
@@ -29,8 +28,8 @@
 import android.widget.EditText;
 
 import com.example.sqlbrite.todo.R;
-import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.MainViewModel;
+import com.example.sqlbrite.todo.di.InjectHelper;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.jakewharton.rxbinding2.widget.RxTextView;
 import com.trello.rxlifecycle2.components.support.RxAppCompatDialogFragment;
@@ -40,7 +39,6 @@
 import io.reactivex.Observable;
 import io.reactivex.functions.BiFunction;
 import io.reactivex.functions.Consumer;
-import io.reactivex.schedulers.Schedulers;
 import io.reactivex.subjects.PublishSubject;
 
 import static butterknife.ButterKnife.findById;
@@ -63,9 +61,9 @@ public static NewListFragment newInstance() {
     MainViewModel mViewModel;
 
     @Override
-    public void onAttach(Activity activity) {
-        super.onAttach(activity);
-        TodoApp.getComponent(activity).inject(this);
+    public void onAttach(Context context) {
+        super.onAttach(context);
+        InjectHelper.createFragmentScopeComponent(context, getActivity(), this).inject(this);
     }
 
     @NonNull
