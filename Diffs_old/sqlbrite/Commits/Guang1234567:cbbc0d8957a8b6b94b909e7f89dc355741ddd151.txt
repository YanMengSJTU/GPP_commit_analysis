diff --git a/build.gradle b/build.gradle
index 013f8d6..eb86081 100644
--- a/build.gradle
+++ b/build.gradle
@@ -43,7 +43,7 @@ allprojects {
 
 ext {
     // Android dependencies.
-    androidSupportVersion = '27.0.0'
+    androidSupportVersion = '27.1.1'
     supportV4 = "com.android.support:support-v4:$androidSupportVersion"
     supportAnnotations = "com.android.support:support-annotations:$androidSupportVersion"
     supportMultidex = 'com.android.support:multidex:1.0.3'
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/DemoShareViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/DemoShareViewModel.java
new file mode 100644
index 0000000..ebe224e
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/DemoShareViewModel.java
@@ -0,0 +1,17 @@
+package com.example.sqlbrite.todo.controler;
+
+import com.example.sqlbrite.todo.di.controler.ShareViewModel;
+
+import javax.inject.Inject;
+
+public class DemoShareViewModel extends ShareViewModel {
+
+    @Inject
+    protected DemoShareViewModel() {
+        super();
+    }
+
+    @Override
+    protected void onShareCleared() {
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
index 623c755..6eaa6b5 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
@@ -16,7 +16,6 @@
 package com.example.sqlbrite.todo.di;
 
 import android.app.Application;
-import android.arch.lifecycle.ViewModelProvider;
 
 import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.LoginViewControler;
@@ -28,12 +27,9 @@
 import com.example.sqlbrite.todo.ui.SplashActivity;
 import com.google.gson.Gson;
 
-import javax.inject.Named;
 import javax.inject.Singleton;
 
 import dagger.Component;
-import okhttp3.OkHttpClient;
-import retrofit2.Retrofit;
 
 @Singleton
 @Component(modules = AppScopeModule.class)
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModel.java
new file mode 100644
index 0000000..9c23c9b
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModel.java
@@ -0,0 +1,84 @@
+package com.example.sqlbrite.todo.di.controler;
+
+import android.arch.lifecycle.ViewModel;
+import android.util.Log;
+
+import java.util.concurrent.atomic.AtomicInteger;
+
+public abstract class ShareViewModel extends ViewModel {
+
+    public static final String TAG = "ShareViewModel";
+
+    private final AtomicInteger mRefCounter;
+
+    private Runnable mOnShareCreated;
+
+    private Runnable mOnShareCleared;
+
+    protected ShareViewModel() {
+        mRefCounter = new AtomicInteger(0);
+    }
+
+    void setOnShareCreated(Runnable hook) {
+        mOnShareCreated = hook;
+    }
+
+    void setOnShareCleared(Runnable hook) {
+        mOnShareCleared = hook;
+    }
+
+    @Override
+    protected final void onCleared() {
+        decRefCount();
+    }
+
+    protected void onFirstRef() {
+
+    }
+
+    protected void onLastRef() {
+
+    }
+
+    protected abstract void onShareCleared();
+
+    public final int incRefCount() {
+        int counter = mRefCounter.incrementAndGet();
+        if (counter == 1) {
+            onFirstRef();
+            if (mOnShareCreated != null) {
+                mOnShareCreated.run();
+                mOnShareCreated = null;
+            }
+        }
+        return counter;
+    }
+
+    public final int decRefCount() {
+        int counter = mRefCounter.decrementAndGet();
+        if (counter == 0) {
+            onLastRef();
+            if (mOnShareCleared != null) {
+                mOnShareCleared.run();
+                mOnShareCleared = null;
+            }
+            onShareCleared();
+        } else if (counter < 0) {
+            Log.e(TAG, "too many decRefCount() call!", new Exception());
+
+            mRefCounter.set(0);
+            mOnShareCleared = null;
+            counter = 0;
+        }
+        return counter;
+    }
+
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder("ShareViewModel{");
+        sb.append("mRefCounter=").append(mRefCounter);
+        sb.append(", mOnShareCleared=").append(mOnShareCleared);
+        sb.append('}');
+        return sb.toString();
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModelFactory.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModelFactory.java
new file mode 100644
index 0000000..6ad745c
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ShareViewModelFactory.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.example.sqlbrite.todo.di.controler;
+
+import android.arch.lifecycle.ViewModel;
+import android.arch.lifecycle.ViewModelProvider;
+import android.support.annotation.NonNull;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class ShareViewModelFactory extends ViewModelProvider.NewInstanceFactory {
+
+    private static final Map<Class<? extends ViewModel>, ViewModel> sShareCache = new HashMap<>();
+
+    @NonNull
+    @Override
+    public <T extends ViewModel> T create(final @NonNull Class<T> modelClass) {
+        if (ShareViewModel.class.isAssignableFrom(modelClass)) {
+            ShareViewModel shareVM = null;
+            if (sShareCache.containsKey(modelClass)) {
+                shareVM = (ShareViewModel) sShareCache.get(modelClass);
+            } else {
+                shareVM = (ShareViewModel) super.create(modelClass);
+                if (shareVM != null) {
+                    shareVM.setOnShareCleared(new Runnable() {
+                        @Override
+                        public void run() {
+                            sShareCache.remove(modelClass);
+                        }
+                    });
+                    sShareCache.put(modelClass, shareVM);
+                }
+            }
+            if (shareVM != null) {
+                shareVM.incRefCount();
+            }
+            return (T) shareVM;
+        }
+        return super.create(modelClass);
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory.java
index f8a6e35..c1b007d 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory.java
@@ -18,9 +18,11 @@
 
 import android.arch.lifecycle.ViewModel;
 import android.arch.lifecycle.ViewModelProvider;
+import android.support.annotation.Nullable;
 
 import com.example.sqlbrite.todo.di.UserScope;
 
+import java.util.HashMap;
 import java.util.Map;
 
 import javax.inject.Inject;
@@ -35,6 +37,7 @@ public UserScopeViewModelFactory(Map<Class<? extends ViewModel>, Provider<ViewMo
         this.creators = creators;
     }
 
+    /*
     @SuppressWarnings("unchecked")
     @Override
     public <T extends ViewModel> T create(Class<T> modelClass) {
@@ -56,4 +59,69 @@ public UserScopeViewModelFactory(Map<Class<? extends ViewModel>, Provider<ViewMo
             throw new RuntimeException(e);
         }
     }
+    */
+
+    private static final Map<Class<? extends ViewModel>, ViewModel> sShareCache = new HashMap<>();
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public <T extends ViewModel> T create(Class<T> modelClass) {
+        Provider<? extends ViewModel> creator = creators.get(modelClass);
+        if (creator == null) {
+            for (Map.Entry<Class<? extends ViewModel>, Provider<ViewModel>> entry : creators.entrySet()) {
+                if (modelClass.isAssignableFrom(entry.getKey())) {
+                    creator = entry.getValue();
+                    break;
+                }
+            }
+        }
+
+        if (creator == null) {
+            throw new IllegalArgumentException("unknown model class " + modelClass);
+        }
+
+        if (ShareViewModel.class.isAssignableFrom(modelClass)) {
+            return (T) provideShareViewModel(modelClass, creator);
+        }
+
+        try {
+            return (T) creator.get();
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Nullable
+    private <T extends ViewModel> ShareViewModel provideShareViewModel(Class<T> modelClass, Provider<? extends ViewModel> creator) {
+        ShareViewModel shareVM;
+        if (sShareCache.containsKey(modelClass)) {
+            shareVM = (ShareViewModel) sShareCache.get(modelClass);
+        } else {
+            try {
+                shareVM = (ShareViewModel) creator.get();
+            } catch (Exception e) {
+                throw new RuntimeException(e);
+            }
+            if (shareVM != null) {
+                final ShareViewModel tmp = shareVM;
+                shareVM.setOnShareCreated(new Runnable() {
+                    @Override
+                    public void run() {
+                        sShareCache.put(modelClass, tmp);
+                    }
+                });
+                shareVM.setOnShareCleared(new Runnable() {
+                    @Override
+                    public void run() {
+                        sShareCache.remove(modelClass);
+                    }
+                });
+            }
+        }
+
+        if (shareVM != null) {
+            shareVM.incRefCount();
+        }
+        return shareVM;
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelModule.java
index 81f2fc7..0456731 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelModule.java
@@ -3,6 +3,7 @@
 import android.arch.lifecycle.ViewModel;
 import android.arch.lifecycle.ViewModelProvider;
 
+import com.example.sqlbrite.todo.controler.DemoShareViewModel;
 import com.example.sqlbrite.todo.controler.MainViewModel;
 import com.example.sqlbrite.todo.controler.SystemSettingViewModel;
 
@@ -23,6 +24,11 @@
     @ViewModelKey(SystemSettingViewModel.class)
     abstract ViewModel bindSystemSettingViewModel(SystemSettingViewModel viewModel);
 
+    @Binds
+    @IntoMap
+    @ViewModelKey(DemoShareViewModel.class)
+    abstract ViewModel bindDemoShareViewModel(DemoShareViewModel viewModel);
+
     @Binds
     abstract ViewModelProvider.Factory bindViewModelFactory(UserScopeViewModelFactory factory);
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItemDao.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItemDao.java
index 7549019..e19943f 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItemDao.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItemDao.java
@@ -69,18 +69,10 @@ public boolean complete(long id, boolean complete) {
 
     public Observable<Integer> createQueryItemCount(long listId) {
         return createQuery(getTableName(), COUNT_QUERY, listId) //
-                .map(new Function<SqlBrite.Query, Integer>() {
+                .mapToOne(new Function<Cursor, Integer>() {
                     @Override
-                    public Integer apply(SqlBrite.Query query) {
-                        Cursor cursor = query.run();
-                        try {
-                            if (!cursor.moveToNext()) {
-                                throw new AssertionError("No rows");
-                            }
-                            return cursor.getInt(0);
-                        } finally {
-                            cursor.close();
-                        }
+                    public Integer apply(Cursor cursor) throws Exception {
+                        return cursor.getInt(0);
                     }
                 });
     }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
index 5b6b810..1f79b8d 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
@@ -16,6 +16,7 @@
 package com.example.sqlbrite.todo.ui;
 
 import android.app.Activity;
+import android.arch.lifecycle.ViewModelProviders;
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
@@ -35,6 +36,7 @@
 import android.widget.Toast;
 
 import com.example.sqlbrite.todo.R;
+import com.example.sqlbrite.todo.controler.DemoShareViewModel;
 import com.example.sqlbrite.todo.controler.MainViewModel;
 import com.example.sqlbrite.todo.di.FragmentScopeComponent;
 import com.trello.rxlifecycle2.android.FragmentEvent;
@@ -174,6 +176,8 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
         listView.addItemDecoration(new DividerItemDecoration(listView.getContext(), DividerItemDecoration.VERTICAL));
         //listView.setEmptyView(emptyView);
         listView.setAdapter(adapter);
+
+        DemoShareViewModel demoShareViewModel = ViewModelProviders.of(getActivity(), mViewModelFactory).get(DemoShareViewModel.class);
     }
 
     /*@OnItemClick(android.R.id.list)
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
index 2ec1111..47e027f 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
@@ -15,12 +15,14 @@
  */
 package com.example.sqlbrite.todo.ui;
 
+import android.arch.lifecycle.ViewModelProviders;
 import android.content.Intent;
 import android.os.Bundle;
 import android.util.Log;
 import android.widget.Toast;
 
 import com.example.sqlbrite.todo.R;
+import com.example.sqlbrite.todo.controler.DemoShareViewModel;
 import com.example.sqlbrite.todo.controler.MainViewModel;
 import com.example.sqlbrite.todo.di.ActivityScopeComponent;
 import com.example.sqlbrite.todo.model.users.UserSession;
@@ -37,6 +39,8 @@
 
     private static final String TAG = "MainActivity";
 
+    private DemoShareViewModel mDemoShareViewModel;
+
     @Override
     protected void onCreate(final Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -60,6 +64,8 @@ public void accept(Integer integer) throws Exception {
                 Log.e("lll", String.valueOf(integer));
             }
         });
+
+        mDemoShareViewModel = ViewModelProviders.of(this, mViewModelFactory).get(DemoShareViewModel.class);
     }
 
     @Override
@@ -86,6 +92,11 @@ protected void onPause() {
         }
     }
 
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+    }
+
     @Override
     protected void injectOnCreate(ActivityScopeComponent component) {
         component.inject(this);
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/SystemSettingActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/SystemSettingActivity.java
index d22d773..587659d 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/SystemSettingActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/SystemSettingActivity.java
@@ -1,5 +1,6 @@
 package com.example.sqlbrite.todo.ui;
 
+import android.arch.lifecycle.ViewModelProviders;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.View;
@@ -8,6 +9,7 @@
 
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
+import com.example.sqlbrite.todo.controler.DemoShareViewModel;
 import com.example.sqlbrite.todo.controler.SystemSettingViewModel;
 import com.example.sqlbrite.todo.di.ActivityScopeComponent;
 
@@ -21,6 +23,8 @@
     @BindView(R.id.btn_logout)
     Button mBtnLogout;
 
+    private DemoShareViewModel mDemoShareViewModel;
+
     @Override
     protected void injectOnCreate(ActivityScopeComponent component) {
         component.inject(this);
@@ -32,6 +36,8 @@ protected void onCreate(Bundle savedInstanceState) {
         setContentView(R.layout.activity_system_setting);
 
         ButterKnife.bind(this);
+
+        mDemoShareViewModel = ViewModelProviders.of(this, mViewModelFactory).get(DemoShareViewModel.class);
     }
 
     @OnClick(R.id.btn_logout)
diff --git a/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/BriteDatabaseProvider.java b/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/BriteDatabaseProvider.java
index 6b8b507..6811b7a 100644
--- a/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/BriteDatabaseProvider.java
+++ b/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/BriteDatabaseProvider.java
@@ -25,7 +25,7 @@
     private final SupportSQLiteOpenHelper mHelper;
     private final Scheduler mScheduler;
 
-    private AtomicInteger mDbRefCounter;
+    private final AtomicInteger mDbRefCounter;
     private BriteDatabase mDb;
 
     public BriteDatabaseProvider(@NonNull SqlBrite sqlBrite,
@@ -79,9 +79,9 @@ public boolean isDisposed() {
                 BriteDatabase briteDatabase = openBriteDatabase();
                 e.onNext(briteDatabase);
 
-                /*if (!e.isDisposed()) {
+                if (!e.isDisposed()) {
                     e.onComplete();
-                }*/
+                }
             }
         }).subscribeOn(mScheduler);
     }
