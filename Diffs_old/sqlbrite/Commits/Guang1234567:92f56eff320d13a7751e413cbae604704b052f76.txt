diff --git a/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java b/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
index 70cff42..3fd0e15 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
@@ -17,6 +17,10 @@
 
 import android.app.Application;
 import android.content.Context;
+
+import com.example.sqlbrite.todo.di.TodoComponent;
+import com.example.sqlbrite.todo.di.TodoModule;
+
 import timber.log.Timber;
 
 public final class TodoApp extends Application {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/TodoComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/TodoComponent.java
similarity index 96%
rename from sample/src/main/java/com/example/sqlbrite/todo/TodoComponent.java
rename to sample/src/main/java/com/example/sqlbrite/todo/di/TodoComponent.java
index 48fdd99..3731685 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/TodoComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/TodoComponent.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.example.sqlbrite.todo;
+package com.example.sqlbrite.todo.di;
 
 import com.example.sqlbrite.todo.ui.ItemsFragment;
 import com.example.sqlbrite.todo.ui.ListsFragment;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/TodoModule.java
similarity index 83%
rename from sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java
rename to sample/src/main/java/com/example/sqlbrite/todo/di/TodoModule.java
index 376e807..42aa2b2 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/TodoModule.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.example.sqlbrite.todo;
+package com.example.sqlbrite.todo.di;
 
 import android.app.Application;
 
-import com.example.sqlbrite.todo.controler.ViewModelModule;
-import com.example.sqlbrite.todo.model.DataSourceModule;
-import com.example.sqlbrite.todo.schedulers.SchedulerModule;
+import com.example.sqlbrite.todo.di.controler.ViewModelModule;
+import com.example.sqlbrite.todo.di.model.DataSourceModule;
+import com.example.sqlbrite.todo.di.schedulers.SchedulerModule;
 
 import javax.inject.Singleton;
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/TodoViewModelFactory.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/TodoViewModelFactory.java
similarity index 97%
rename from sample/src/main/java/com/example/sqlbrite/todo/controler/TodoViewModelFactory.java
rename to sample/src/main/java/com/example/sqlbrite/todo/di/controler/TodoViewModelFactory.java
index 72aa478..d9d31ca 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/controler/TodoViewModelFactory.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/TodoViewModelFactory.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.example.sqlbrite.todo.controler;
+package com.example.sqlbrite.todo.di.controler;
 
 import android.arch.lifecycle.ViewModel;
 import android.arch.lifecycle.ViewModelProvider;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/ViewModelKey.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ViewModelKey.java
similarity index 89%
rename from sample/src/main/java/com/example/sqlbrite/todo/controler/ViewModelKey.java
rename to sample/src/main/java/com/example/sqlbrite/todo/di/controler/ViewModelKey.java
index 7a88fbf..4fbda23 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/controler/ViewModelKey.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ViewModelKey.java
@@ -1,4 +1,4 @@
-package com.example.sqlbrite.todo.controler;
+package com.example.sqlbrite.todo.di.controler;
 
 import android.arch.lifecycle.ViewModel;
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/ViewModelModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ViewModelModule.java
similarity index 78%
rename from sample/src/main/java/com/example/sqlbrite/todo/controler/ViewModelModule.java
rename to sample/src/main/java/com/example/sqlbrite/todo/di/controler/ViewModelModule.java
index c324a0d..8d8c37c 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/controler/ViewModelModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ViewModelModule.java
@@ -1,8 +1,10 @@
-package com.example.sqlbrite.todo.controler;
+package com.example.sqlbrite.todo.di.controler;
 
 import android.arch.lifecycle.ViewModel;
 import android.arch.lifecycle.ViewModelProvider;
 
+import com.example.sqlbrite.todo.controler.MainViewModel;
+
 import dagger.Binds;
 import dagger.Module;
 import dagger.multibindings.IntoMap;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/DataSourceModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/DataSourceModule.java
similarity index 82%
rename from sample/src/main/java/com/example/sqlbrite/todo/model/DataSourceModule.java
rename to sample/src/main/java/com/example/sqlbrite/todo/di/model/DataSourceModule.java
index 7f33c41..88c2923 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/DataSourceModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/DataSourceModule.java
@@ -13,12 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.example.sqlbrite.todo.model;
+package com.example.sqlbrite.todo.di.model;
 
-import com.example.sqlbrite.todo.model.local.db.DbModule;
+import com.example.sqlbrite.todo.di.model.local.db.DbModule;
+import com.example.sqlbrite.todo.model.MainDataSource;
+import com.example.sqlbrite.todo.model.MainRepository;
 import com.example.sqlbrite.todo.model.local.db.TodoItemDao;
 import com.example.sqlbrite.todo.model.local.db.TodoListDao;
-import com.example.sqlbrite.todo.model.local.preferences.PreferencesModule;
+import com.example.sqlbrite.todo.di.model.local.preferences.PreferencesModule;
 import com.example.sqlbrite.todo.model.remote.NetModule;
 import com.example.sqlbrite.todo.ui.ListsItemDao;
 import com.squareup.sqlbrite3.BriteDatabase;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/db/DbModule.java
similarity index 95%
rename from sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbModule.java
rename to sample/src/main/java/com/example/sqlbrite/todo/di/model/local/db/DbModule.java
index f3b85ca..0ee0e07 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/db/DbModule.java
@@ -13,13 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.example.sqlbrite.todo.model.local.db;
+package com.example.sqlbrite.todo.di.model.local.db;
 
 import android.app.Application;
 import android.arch.persistence.db.SupportSQLiteOpenHelper;
 import android.arch.persistence.db.SupportSQLiteOpenHelper.Configuration;
 import android.arch.persistence.db.wcdb.WcdbSQLiteOpenHelperFactory;
 
+import com.example.sqlbrite.todo.model.local.db.DbCallback;
+import com.example.sqlbrite.todo.model.local.db.TodoItemDao;
+import com.example.sqlbrite.todo.model.local.db.TodoListDao;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.example.sqlbrite.todo.ui.ListsItemDao;
 import com.squareup.sqlbrite3.BriteDatabase;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/preferences/PreferencesModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/preferences/PreferencesModule.java
similarity index 91%
rename from sample/src/main/java/com/example/sqlbrite/todo/model/local/preferences/PreferencesModule.java
rename to sample/src/main/java/com/example/sqlbrite/todo/di/model/local/preferences/PreferencesModule.java
index 0ec0957..c9cb423 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/local/preferences/PreferencesModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/preferences/PreferencesModule.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.example.sqlbrite.todo.model.local.preferences;
+package com.example.sqlbrite.todo.di.model.local.preferences;
 
 import dagger.Module;
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/schedulers/SchedulerModule.java
similarity index 84%
rename from sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerModule.java
rename to sample/src/main/java/com/example/sqlbrite/todo/di/schedulers/SchedulerModule.java
index 257d7f2..774e190 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/schedulers/SchedulerModule.java
@@ -13,8 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.example.sqlbrite.todo.schedulers;
+package com.example.sqlbrite.todo.di.schedulers;
 
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
+import com.example.sqlbrite.todo.schedulers.TodoSchedulerProvider;
 import com.example.sqlbrite.todo.ui.ListsItemDao;
 import com.squareup.sqlbrite3.BriteDatabase;
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java b/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java
index 9e1d869..a1fbfad 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java
@@ -2,38 +2,23 @@
 
 import android.arch.persistence.db.wcdb.WcdbUtils;
 import android.os.Environment;
-import android.support.annotation.Nullable;
-import android.support.annotation.VisibleForTesting;
 
 import com.example.sqlbrite.todo.model.local.db.TodoItem;
 import com.example.sqlbrite.todo.model.local.db.TodoItemDao;
 import com.example.sqlbrite.todo.model.local.db.TodoListDao;
 import com.example.sqlbrite.todo.ui.ListsItem;
 import com.example.sqlbrite.todo.ui.ListsItemDao;
+import com.jakewharton.rx.ReplayingShare;
 import com.squareup.sqlbrite3.BriteDatabase;
-import com.squareup.sqlbrite3.SqlBrite;
 
 import java.io.File;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.LinkedList;
 import java.util.List;
-import java.util.Map;
 
 import javax.inject.Inject;
 
 import io.reactivex.Observable;
-import io.reactivex.ObservableEmitter;
-import io.reactivex.ObservableOnSubscribe;
-import io.reactivex.ObservableSource;
-import io.reactivex.disposables.Disposable;
-import io.reactivex.functions.Action;
 import io.reactivex.functions.Consumer;
-import io.reactivex.functions.Function;
-import io.reactivex.functions.Predicate;
 import io.reactivex.subjects.BehaviorSubject;
-import io.reactivex.subjects.Subject;
 
 /**
  * @author Guang1234567
@@ -50,7 +35,7 @@
 
     private final TodoItemDao mTodoItemDao;
 
-    final BehaviorSubject<List<ListsItem>> memory = BehaviorSubject.create();
+    private final Observable<List<ListsItem>> QueryListsItems;
 
     @Inject
     public MainRepository(BriteDatabase briteDatabaseb, ListsItemDao listsItemDao, TodoListDao todoListDao, TodoItemDao todoItemDao) {
@@ -59,25 +44,20 @@ public MainRepository(BriteDatabase briteDatabaseb, ListsItemDao listsItemDao, T
         mTodoListDao = todoListDao;
         mTodoItemDao = todoItemDao;
 
-        Observable<List<ListsItem>> disk = mListsItemDao.createQueryListsItems(Long.MAX_VALUE,
-                new Predicate<SqlBrite.Query>() {
-                    @Override
-                    public boolean test(SqlBrite.Query query) throws Exception {
-                        return !memory.hasValue() || memory.hasObservers();
-                    }
-                })
+        QueryListsItems = mListsItemDao
+                .createQueryListsItems(Long.MAX_VALUE)
                 .doOnNext(new Consumer<List<ListsItem>>() {
                     @Override
                     public void accept(List<ListsItem> listsItems) throws Exception {
-                        memory.onNext(listsItems);
+                        int i = 1;
                     }
-                });
-        Disposable disposable = disk.subscribe();
+                })
+                .compose(ReplayingShare.<List<ListsItem>>instance()); // use ReplayingShare Transformer to memory cache, avoid expensive manipulate.
     }
 
     @Override
     public Observable<List<ListsItem>> createQueryListsItems(final long max) {
-        return memory.take(max);
+        return QueryListsItems.take(max);
     }
 
     @Override
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java
index f28f87c..f35f2d5 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java
@@ -20,7 +20,7 @@
 
 import static android.database.sqlite.SQLiteDatabase.CONFLICT_FAIL;
 
-final class DbCallback extends SupportSQLiteOpenHelper.Callback {
+public final class DbCallback extends SupportSQLiteOpenHelper.Callback {
   private static final int VERSION = 1;
 
   private static final String CREATE_LIST = ""
@@ -39,7 +39,7 @@
   private static final String CREATE_ITEM_LIST_ID_INDEX =
       "CREATE INDEX item_list_id ON " + TodoItem.TABLE + " (" + TodoItem.LIST_ID + ")";
 
-  DbCallback() {
+  public DbCallback() {
     super(VERSION);
   }
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
index 53c60d9..efc9e56 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
@@ -41,9 +41,8 @@ public ListsItemDao(BriteDatabase database) {
             + " LEFT OUTER JOIN " + TodoItem.TABLE + " AS " + ALIAS_ITEM + " ON " + LIST_ID + " = " + ITEM_LIST_ID
             + " GROUP BY " + LIST_ID;
 
-    public Observable<List<ListsItem>> createQueryListsItems(final long max, Predicate<SqlBrite.Query> filter) {
+    public Observable<List<ListsItem>> createQueryListsItems(final long max) {
         return mDatabase.createQuery(TABLES, QUERY)
-                .filter(filter)
                 .flatMap(new Function<SqlBrite.Query, Observable<List<ListsItem>>>() {
                     @Override
                     public Observable<List<ListsItem>> apply(SqlBrite.Query query) throws Exception {
diff --git a/sample/src/main/java/com/jakewharton/rx/ReplayingShare.java b/sample/src/main/java/com/jakewharton/rx/ReplayingShare.java
new file mode 100644
index 0000000..29b9955
--- /dev/null
+++ b/sample/src/main/java/com/jakewharton/rx/ReplayingShare.java
@@ -0,0 +1,178 @@
+/*
+ * Copyright 2016 Jake Wharton
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.jakewharton.rx;
+
+import io.reactivex.Flowable;
+import io.reactivex.FlowableTransformer;
+import io.reactivex.Observable;
+import io.reactivex.ObservableTransformer;
+import io.reactivex.Observer;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.functions.Consumer;
+import org.reactivestreams.Subscriber;
+import org.reactivestreams.Subscription;
+
+/**
+ * A transformer which combines the {@code replay(1)}, {@code publish()}, and {@code refCount()}
+ * operators.
+ * <p>
+ * Unlike traditional combinations of these operators, `ReplayingShare` caches the last emitted
+ * value from the upstream observable or flowable *only* when one or more downstream subscribers
+ * are connected. This allows expensive upstream sources to be shut down when no one is listening
+ * while also replaying the last value seen by *any* subscriber to new ones.
+ */
+public final class ReplayingShare<T>
+    implements ObservableTransformer<T, T>, FlowableTransformer<T, T> {
+  private static final ReplayingShare<Object> INSTANCE = new ReplayingShare<>();
+
+  /** The singleton instance of this transformer. */
+  @SuppressWarnings("unchecked") // Safe because of erasure.
+  public static <T> ReplayingShare<T> instance() {
+    return (ReplayingShare<T>) INSTANCE;
+  }
+
+  private ReplayingShare() {
+  }
+
+  @Override public Observable<T> apply(Observable<T> upstream) {
+    LastSeen<T> lastSeen = new LastSeen<>();
+    return new LastSeenObservable<>(upstream.doOnNext(lastSeen).share(), lastSeen);
+  }
+
+  @Override public Flowable<T> apply(Flowable<T> upstream) {
+    LastSeen<T> lastSeen = new LastSeen<>();
+    return new LastSeenFlowable<>(upstream.doOnNext(lastSeen).share(), lastSeen);
+  }
+
+  static final class LastSeen<T> implements Consumer<T> {
+    volatile T value;
+
+    @Override public void accept(T latest) {
+      value = latest;
+    }
+  }
+
+  static final class LastSeenObservable<T> extends Observable<T> {
+    private final Observable<T> upstream;
+    private final LastSeen<T> lastSeen;
+
+    LastSeenObservable(Observable<T> upstream, LastSeen<T> lastSeen) {
+      this.upstream = upstream;
+      this.lastSeen = lastSeen;
+    }
+
+    @Override protected void subscribeActual(Observer<? super T> observer) {
+      upstream.subscribe(new LastSeenObserver<T>(observer, lastSeen));
+    }
+  }
+
+  static final class LastSeenObserver<T> implements Observer<T> {
+    private final Observer<? super T> downstream;
+    private final LastSeen<T> lastSeen;
+
+    LastSeenObserver(Observer<? super T> downstream, LastSeen<T> lastSeen) {
+      this.downstream = downstream;
+      this.lastSeen = lastSeen;
+    }
+
+    @Override public void onSubscribe(Disposable d) {
+      downstream.onSubscribe(d);
+
+      T value = lastSeen.value;
+      if (value != null) {
+        downstream.onNext(value);
+      }
+    }
+
+    @Override public void onNext(T value) {
+      downstream.onNext(value);
+    }
+
+    @Override public void onComplete() {
+      downstream.onComplete();
+    }
+
+    @Override public void onError(Throwable e) {
+      downstream.onError(e);
+    }
+  }
+
+  static final class LastSeenFlowable<T> extends Flowable<T> {
+    private final Flowable<T> upstream;
+    private final LastSeen<T> lastSeen;
+
+    LastSeenFlowable(Flowable<T> upstream, LastSeen<T> lastSeen) {
+      this.upstream = upstream;
+      this.lastSeen = lastSeen;
+    }
+
+    @Override protected void subscribeActual(Subscriber<? super T> subscriber) {
+      upstream.subscribe(new LastSeenSubscriber<T>(subscriber, lastSeen));
+    }
+  }
+
+  static final class LastSeenSubscriber<T> implements Subscriber<T>, Subscription {
+    private final Subscriber<? super T> downstream;
+    private final LastSeen<T> lastSeen;
+
+    private Subscription subscription;
+    private boolean first = true;
+
+    LastSeenSubscriber(Subscriber<? super T> downstream, LastSeen<T> lastSeen) {
+      this.downstream = downstream;
+      this.lastSeen = lastSeen;
+    }
+
+    @Override public void onSubscribe(Subscription subscription) {
+      this.subscription = subscription;
+      downstream.onSubscribe(this);
+    }
+
+    @Override public void request(long amount) {
+      if (amount == 0) return;
+
+      if (first) {
+        first = false;
+
+        T value = lastSeen.value;
+        if (value != null) {
+          downstream.onNext(value);
+
+          if (amount != Long.MAX_VALUE && --amount == 0) {
+            return;
+          }
+        }
+      }
+      subscription.request(amount);
+    }
+
+    @Override public void cancel() {
+      subscription.cancel();
+    }
+
+    @Override public void onNext(T value) {
+      downstream.onNext(value);
+    }
+
+    @Override public void onComplete() {
+      downstream.onComplete();
+    }
+
+    @Override public void onError(Throwable t) {
+      downstream.onError(t);
+    }
+  }
+}
diff --git a/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/BriteDatabaseProvider.java b/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/BriteDatabaseProvider.java
index 00e8720..6b8b507 100644
--- a/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/BriteDatabaseProvider.java
+++ b/sqlbrite-support/src/main/java/com/squareup/sqlbrite3/support/BriteDatabaseProvider.java
@@ -78,6 +78,10 @@ public boolean isDisposed() {
 
                 BriteDatabase briteDatabase = openBriteDatabase();
                 e.onNext(briteDatabase);
+
+                /*if (!e.isDisposed()) {
+                    e.onComplete();
+                }*/
             }
         }).subscribeOn(mScheduler);
     }
