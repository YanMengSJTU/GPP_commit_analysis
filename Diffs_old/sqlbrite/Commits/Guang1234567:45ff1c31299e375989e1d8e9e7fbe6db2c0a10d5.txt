diff --git a/sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java b/sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java
index 82eda09..376e807 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java
@@ -18,7 +18,7 @@
 import android.app.Application;
 
 import com.example.sqlbrite.todo.controler.ViewModelModule;
-import com.example.sqlbrite.todo.db.DbModule;
+import com.example.sqlbrite.todo.model.DataSourceModule;
 import com.example.sqlbrite.todo.schedulers.SchedulerModule;
 
 import javax.inject.Singleton;
@@ -28,9 +28,9 @@
 
 @Module(
         includes = {
-                DbModule.class,
-                SchedulerModule.class,
-                ViewModelModule.class
+                DataSourceModule.class,
+                ViewModelModule.class,
+                SchedulerModule.class
         }
 )
 public final class TodoModule {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
index bf898be..5bf3323 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
@@ -1,15 +1,10 @@
 package com.example.sqlbrite.todo.controler;
 
 import android.arch.lifecycle.ViewModel;
-import android.arch.persistence.db.wcdb.WcdbUtils;
-import android.os.Environment;
 
-import com.example.sqlbrite.todo.db.TodoItem;
-import com.example.sqlbrite.todo.db.TodoItemDao;
-import com.example.sqlbrite.todo.db.TodoListDao;
+import com.example.sqlbrite.todo.model.MainDataSource;
+import com.example.sqlbrite.todo.model.local.db.TodoItem;
 import com.example.sqlbrite.todo.ui.ListsItem;
-import com.example.sqlbrite.todo.ui.ListsItemDao;
-import com.squareup.sqlbrite3.BriteDatabase;
 
 import java.io.File;
 import java.util.List;
@@ -25,57 +20,42 @@
 
 public class MainViewModel extends ViewModel {
 
-    BriteDatabase mBriteDatabaseb;
-
-    private final ListsItemDao mListsItemDao;
-
-    private final TodoListDao mTodoListDao;
-
-    private final TodoItemDao mTodoItemDao;
+    private final MainDataSource mDataSource;
 
     @Inject
-    public MainViewModel(ListsItemDao listsItemDao, TodoListDao todoListDao, TodoItemDao todoItemDao, BriteDatabase db) {
-        mListsItemDao = listsItemDao;
-        mTodoListDao = todoListDao;
-        mTodoItemDao = todoItemDao;
-        mBriteDatabaseb = db;
+    public MainViewModel(MainDataSource dataSource) {
+        mDataSource = dataSource;
     }
 
     public Observable<List<ListsItem>> createQueryListsItems() {
-        return mListsItemDao.createQueryListsItems(100); // 省内存
+        return mDataSource.createQueryListsItems(100); // 省内存
     }
 
     public boolean complete(long id, boolean complete) {
-        return mTodoItemDao.complete(id, complete);
+        return mDataSource.completeTodoitem(id, complete);
     }
 
     public Observable<Integer> createQueryItemCount(long listId) {
-        return mTodoItemDao.createQueryItemCount(listId);
+        return mDataSource.createQueryItemCount(listId);
     }
 
     public Observable<List<TodoItem>> createQueryTodoItemsByListId(long listId) {
-        return mTodoItemDao.createQueryTodoItemsByListId(listId);
+        return mDataSource.createQueryTodoItemsByListId(listId);
     }
 
     public Observable<String> createQueryListName(long listId) {
-        return mTodoListDao.createQueryListName(listId);
+        return mDataSource.createQueryListName(listId);
     }
 
     public long createNewOneTodoList(String name) {
-        return mTodoListDao.createNewOne(name);
+        return mDataSource.createNewOneTodoList(name);
     }
 
     public long createNewOneTodoItem(long listId, String description) {
-        return mTodoItemDao.createNewOne(listId, description);
+        return mDataSource.createNewOneTodoItem(listId, description);
     }
 
     public File exportDecryption() throws Exception {
-        File dir = Environment.getExternalStorageDirectory();
-        File dstFile = new File(dir, "todo-list-backup.db");
-        if (!dstFile.exists()) {
-            dstFile.createNewFile();
-        }
-        WcdbUtils.exportDecryption(mBriteDatabaseb.getReadableDatabase(), dstFile);
-        return dstFile;
+        return mDataSource.exportDecryption();
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/DataSourceModule.java b/sample/src/main/java/com/example/sqlbrite/todo/model/DataSourceModule.java
new file mode 100644
index 0000000..7f33c41
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/DataSourceModule.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.example.sqlbrite.todo.model;
+
+import com.example.sqlbrite.todo.model.local.db.DbModule;
+import com.example.sqlbrite.todo.model.local.db.TodoItemDao;
+import com.example.sqlbrite.todo.model.local.db.TodoListDao;
+import com.example.sqlbrite.todo.model.local.preferences.PreferencesModule;
+import com.example.sqlbrite.todo.model.remote.NetModule;
+import com.example.sqlbrite.todo.ui.ListsItemDao;
+import com.squareup.sqlbrite3.BriteDatabase;
+
+import javax.inject.Singleton;
+
+import dagger.Module;
+import dagger.Provides;
+
+@Module(
+        includes = {
+                DbModule.class,
+                PreferencesModule.class,
+                NetModule.class
+        }
+)
+public final class DataSourceModule {
+    @Provides
+    @Singleton
+    MainDataSource provideMainDataSource(BriteDatabase briteDatabaseb, ListsItemDao listsItemDao, TodoListDao todoListDao, TodoItemDao todoItemDao) {
+        return new MainRepository(briteDatabaseb, listsItemDao, todoListDao, todoItemDao);
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/MainDataSource.java b/sample/src/main/java/com/example/sqlbrite/todo/model/MainDataSource.java
new file mode 100644
index 0000000..5c04469
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/MainDataSource.java
@@ -0,0 +1,32 @@
+package com.example.sqlbrite.todo.model;
+
+import com.example.sqlbrite.todo.model.local.db.TodoItem;
+import com.example.sqlbrite.todo.ui.ListsItem;
+
+import java.io.File;
+import java.util.List;
+
+import io.reactivex.Observable;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/9 13:44
+ */
+
+public interface MainDataSource {
+    Observable<List<ListsItem>> createQueryListsItems(final int max);
+
+    boolean completeTodoitem(long itemId, boolean complete);
+
+    Observable<Integer> createQueryItemCount(long listId);
+
+    Observable<List<TodoItem>> createQueryTodoItemsByListId(long listId);
+
+    Observable<String> createQueryListName(long listId);
+
+    long createNewOneTodoList(String name);
+
+    long createNewOneTodoItem(long listId, String description);
+
+    File exportDecryption() throws Exception ;
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java b/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java
new file mode 100644
index 0000000..3808630
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java
@@ -0,0 +1,85 @@
+package com.example.sqlbrite.todo.model;
+
+import android.arch.persistence.db.wcdb.WcdbUtils;
+import android.os.Environment;
+
+import com.example.sqlbrite.todo.model.local.db.TodoItem;
+import com.example.sqlbrite.todo.model.local.db.TodoItemDao;
+import com.example.sqlbrite.todo.model.local.db.TodoListDao;
+import com.example.sqlbrite.todo.ui.ListsItem;
+import com.example.sqlbrite.todo.ui.ListsItemDao;
+import com.squareup.sqlbrite3.BriteDatabase;
+
+import java.io.File;
+import java.util.List;
+
+import io.reactivex.Observable;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/9 13:45
+ */
+
+public class MainRepository implements MainDataSource {
+
+    BriteDatabase mBriteDatabaseb;
+
+    private final ListsItemDao mListsItemDao;
+
+    private final TodoListDao mTodoListDao;
+
+    private final TodoItemDao mTodoItemDao;
+
+    public MainRepository(BriteDatabase briteDatabaseb, ListsItemDao listsItemDao, TodoListDao todoListDao, TodoItemDao todoItemDao) {
+        mBriteDatabaseb = briteDatabaseb;
+        mListsItemDao = listsItemDao;
+        mTodoListDao = todoListDao;
+        mTodoItemDao = todoItemDao;
+    }
+
+    @Override
+    public Observable<List<ListsItem>> createQueryListsItems(final int max) {
+        return mListsItemDao.createQueryListsItems(max); // 省内存
+    }
+
+    @Override
+    public boolean completeTodoitem(long itemId, boolean complete) {
+        return mTodoItemDao.complete(itemId, complete);
+    }
+
+    @Override
+    public Observable<Integer> createQueryItemCount(long listId) {
+        return mTodoItemDao.createQueryItemCount(listId);
+    }
+
+    @Override
+    public Observable<List<TodoItem>> createQueryTodoItemsByListId(long listId) {
+        return mTodoItemDao.createQueryTodoItemsByListId(listId);
+    }
+
+    @Override
+    public Observable<String> createQueryListName(long listId) {
+        return mTodoListDao.createQueryListName(listId);
+    }
+
+    @Override
+    public long createNewOneTodoList(String name) {
+        return mTodoListDao.createNewOne(name);
+    }
+
+    @Override
+    public long createNewOneTodoItem(long listId, String description) {
+        return mTodoItemDao.createNewOne(listId, description);
+    }
+
+    @Override
+    public File exportDecryption() throws Exception {
+        File dir = Environment.getExternalStorageDirectory();
+        File dstFile = new File(dir, "todo-list-backup.db");
+        if (!dstFile.exists()) {
+            dstFile.createNewFile();
+        }
+        WcdbUtils.exportDecryption(mBriteDatabaseb.getReadableDatabase(), dstFile);
+        return dstFile;
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/Db.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/Db.java
similarity index 96%
rename from sample/src/main/java/com/example/sqlbrite/todo/db/Db.java
rename to sample/src/main/java/com/example/sqlbrite/todo/model/local/db/Db.java
index 60a928b..fe6e17c 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/db/Db.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/Db.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.example.sqlbrite.todo.db;
+package com.example.sqlbrite.todo.model.local.db;
 
 import android.database.Cursor;
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/DbCallback.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java
similarity index 96%
rename from sample/src/main/java/com/example/sqlbrite/todo/db/DbCallback.java
rename to sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java
index a69d920..f28f87c 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/db/DbCallback.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java
@@ -13,13 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.example.sqlbrite.todo.db;
+package com.example.sqlbrite.todo.model.local.db;
 
 import android.arch.persistence.db.SupportSQLiteDatabase;
 import android.arch.persistence.db.SupportSQLiteOpenHelper;
-import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
 
 import static android.database.sqlite.SQLiteDatabase.CONFLICT_FAIL;
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbModule.java
similarity index 91%
rename from sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
rename to sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbModule.java
index 144f610..f3b85ca 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbModule.java
@@ -13,29 +13,22 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.example.sqlbrite.todo.db;
+package com.example.sqlbrite.todo.model.local.db;
 
 import android.app.Application;
 import android.arch.persistence.db.SupportSQLiteOpenHelper;
 import android.arch.persistence.db.SupportSQLiteOpenHelper.Configuration;
-import android.arch.persistence.db.SupportSQLiteOpenHelper.Factory;
-import android.arch.persistence.db.framework.FrameworkSQLiteOpenHelperFactory;
-import android.arch.persistence.db.sqlcipher.SqlcipherSQLiteOpenHelperFactory;
 import android.arch.persistence.db.wcdb.WcdbSQLiteOpenHelperFactory;
 
-import com.example.sqlbrite.todo.schedulers.SchedulerModule;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.example.sqlbrite.todo.ui.ListsItemDao;
 import com.squareup.sqlbrite3.BriteDatabase;
 import com.squareup.sqlbrite3.SqlBrite;
-import com.squareup.sqlbrite3.support.BriteDatabaseProvider;
-
-import dagger.Module;
-import dagger.Provides;
-import io.reactivex.schedulers.Schedulers;
 
 import javax.inject.Singleton;
 
+import dagger.Module;
+import dagger.Provides;
 import timber.log.Timber;
 
 @Module
@@ -119,11 +112,11 @@ BriteDatabase provideDatabase(SqlBrite sqlBrite, SupportSQLiteOpenHelper helper,
         return briteDatabase;
     }
 
-    @Provides
+    /*@Provides
     @Singleton
     BriteDatabaseProvider provideDatabaseProvider(SqlBrite sqlBrite, SupportSQLiteOpenHelper helper, SchedulerProvider schedulerProvider) {
         return new BriteDatabaseProvider(sqlBrite, helper, schedulerProvider.database());
-    }
+    }*/
 
     @Provides
     @Singleton
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoItem.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItem.java
similarity index 98%
rename from sample/src/main/java/com/example/sqlbrite/todo/db/TodoItem.java
rename to sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItem.java
index 7b244b9..ae1ba2d 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoItem.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItem.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.example.sqlbrite.todo.db;
+package com.example.sqlbrite.todo.model.local.db;
 
 import android.content.ContentValues;
 import android.database.Cursor;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoItemDao.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItemDao.java
similarity index 95%
rename from sample/src/main/java/com/example/sqlbrite/todo/db/TodoItemDao.java
rename to sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItemDao.java
index 0c3aa18..762bf0b 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoItemDao.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItemDao.java
@@ -1,4 +1,4 @@
-package com.example.sqlbrite.todo.db;
+package com.example.sqlbrite.todo.model.local.db;
 
 import android.content.ContentValues;
 import android.database.Cursor;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoList.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoList.java
similarity index 98%
rename from sample/src/main/java/com/example/sqlbrite/todo/db/TodoList.java
rename to sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoList.java
index f384cd5..9fdb202 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoList.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoList.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.example.sqlbrite.todo.db;
+package com.example.sqlbrite.todo.model.local.db;
 
 import android.content.ContentValues;
 import android.database.Cursor;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoListDao.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoListDao.java
similarity index 94%
rename from sample/src/main/java/com/example/sqlbrite/todo/db/TodoListDao.java
rename to sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoListDao.java
index d4475d1..26bc5db 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoListDao.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoListDao.java
@@ -1,4 +1,4 @@
-package com.example.sqlbrite.todo.db;
+package com.example.sqlbrite.todo.model.local.db;
 
 import android.content.ContentValues;
 import android.database.Cursor;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/preferences/PreferencesModule.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/preferences/PreferencesModule.java
new file mode 100644
index 0000000..0ec0957
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/preferences/PreferencesModule.java
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.example.sqlbrite.todo.model.local.preferences;
+
+import dagger.Module;
+
+@Module
+public final class PreferencesModule {
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/remote/NetModule.java b/sample/src/main/java/com/example/sqlbrite/todo/model/remote/NetModule.java
new file mode 100644
index 0000000..22e661d
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/remote/NetModule.java
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.example.sqlbrite.todo.model.remote;
+
+import dagger.Module;
+
+@Module
+public final class NetModule {
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
new file mode 100644
index 0000000..69826dd
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
@@ -0,0 +1,48 @@
+package com.example.sqlbrite.todo.ui;
+
+import android.arch.lifecycle.ViewModel;
+import android.arch.lifecycle.ViewModelProvider;
+import android.arch.lifecycle.ViewModelProviders;
+import android.content.Context;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+
+import com.example.sqlbrite.todo.TodoApp;
+
+import java.lang.reflect.ParameterizedType;
+
+import javax.inject.Inject;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/9 10:03
+ */
+
+public abstract class BaseViewModelFragment<VIEWMODEL extends ViewModel> extends Fragment {
+
+    @Inject
+    public ViewModelProvider.Factory mViewModelFactory;
+
+    private VIEWMODEL mViewModel;
+
+    @Override
+    public void onAttach(Context context) {
+        super.onAttach(context);
+        toInject(this);
+    }
+
+    protected abstract void toInject(BaseViewModelFragment<VIEWMODEL> self);
+
+    @Override
+    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        ParameterizedType type = (ParameterizedType) this.getClass().getGenericSuperclass();
+        Class viewModelClazz = (Class) type.getActualTypeArguments()[0];
+        mViewModel = (VIEWMODEL) ViewModelProviders.of(getActivity(), mViewModelFactory).get(viewModelClazz);
+    }
+
+    protected VIEWMODEL getViewModel() {
+        return mViewModel;
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsAdapter.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsAdapter.java
index d22ecdd..bac27b5 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsAdapter.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsAdapter.java
@@ -23,7 +23,7 @@
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
 import android.widget.CheckedTextView;
-import com.example.sqlbrite.todo.db.TodoItem;
+import com.example.sqlbrite.todo.model.local.db.TodoItem;
 import io.reactivex.functions.Consumer;
 import java.util.Collections;
 import java.util.List;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
index 557aa37..2314505 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
@@ -16,11 +16,9 @@
 package com.example.sqlbrite.todo.ui;
 
 import android.app.Activity;
-import android.arch.lifecycle.ViewModelProvider;
-import android.arch.lifecycle.ViewModelProviders;
+import android.content.Context;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
-import android.support.v4.app.Fragment;
 import android.support.v4.view.MenuItemCompat;
 import android.view.LayoutInflater;
 import android.view.Menu;
@@ -30,17 +28,14 @@
 import android.view.ViewGroup;
 import android.widget.ListView;
 
-import butterknife.BindView;
-import butterknife.ButterKnife;
-
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.MainViewModel;
-import com.example.sqlbrite.todo.db.TodoItemDao;
-import com.example.sqlbrite.todo.db.TodoListDao;
 import com.jakewharton.rxbinding2.widget.AdapterViewItemClickEvent;
 import com.jakewharton.rxbinding2.widget.RxAdapterView;
 
+import butterknife.BindView;
+import butterknife.ButterKnife;
 import io.reactivex.Observable;
 import io.reactivex.android.schedulers.AndroidSchedulers;
 import io.reactivex.disposables.CompositeDisposable;
@@ -48,15 +43,14 @@
 import io.reactivex.functions.Consumer;
 import io.reactivex.schedulers.Schedulers;
 
-import javax.inject.Inject;
-
 import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_IF_ROOM;
 import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_WITH_TEXT;
 
-public final class ItemsFragment extends Fragment {
+public final class ItemsFragment extends BaseViewModelFragment<MainViewModel> {
     private static final String KEY_LIST_ID = "list_id";
 
     public interface Listener {
+
         void onNewItemClicked(long listId);
     }
 
@@ -69,25 +63,14 @@ public static ItemsFragment newInstance(long listId) {
         return fragment;
     }
 
-/*
-  @Inject
-  TodoItemDao todoItemDao;
-  @Inject
-  TodoListDao todoListDao;
-*/
-
-    @Inject
-    ViewModelProvider.Factory mViewModelFactory;
-
-    //@Inject
-    MainViewModel mViewModel;
 
     @BindView(android.R.id.list)
     ListView listView;
+
     @BindView(android.R.id.empty)
     View emptyView;
-
     private Listener listener;
+
     private ItemsAdapter adapter;
     private CompositeDisposable disposables;
 
@@ -96,19 +79,24 @@ private long getListId() {
     }
 
     @Override
-    public void onAttach(Activity activity) {
+    public void onAttach(Context context) {
+        super.onAttach(context);
+        Activity activity = getActivity();
         if (!(activity instanceof Listener)) {
             throw new IllegalStateException("Activity must implement fragment Listener.");
         }
 
-        super.onAttach(activity);
-        TodoApp.getComponent(activity).inject(this);
         setHasOptionsMenu(true);
 
         listener = (Listener) activity;
         adapter = new ItemsAdapter(activity);
     }
 
+    @Override
+    protected void toInject(BaseViewModelFragment<MainViewModel> self) {
+        TodoApp.getComponent(getContext()).inject(this);
+    }
+
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         super.onCreateOptionsMenu(menu, inflater);
@@ -134,8 +122,6 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
     public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
 
-        mViewModel = ViewModelProviders.of(getActivity(), mViewModelFactory).get(MainViewModel.class);
-
         ButterKnife.bind(this, view);
         listView.setEmptyView(emptyView);
         listView.setAdapter(adapter);
@@ -146,7 +132,7 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
                     @Override
                     public void accept(AdapterViewItemClickEvent event) {
                         boolean newValue = !adapter.getItem(event.position()).complete();
-                        mViewModel.complete(event.id(), newValue);
+                        getViewModel().complete(event.id(), newValue);
                     }
                 });
     }
@@ -158,8 +144,8 @@ public void onResume() {
 
         disposables = new CompositeDisposable();
 
-        Observable<Integer> itemCount = mViewModel.createQueryItemCount(listId);
-        Observable<String> listName = mViewModel.createQueryListName(listId);
+        Observable<Integer> itemCount = getViewModel().createQueryItemCount(listId);
+        Observable<String> listName = getViewModel().createQueryListName(listId);
 
         disposables.add(
                 Observable.combineLatest(listName, itemCount, new BiFunction<String, Integer, String>() {
@@ -176,7 +162,7 @@ public void accept(String title) throws Exception {
                             }
                         }));
 
-        disposables.add(mViewModel.createQueryTodoItemsByListId(listId)
+        disposables.add(getViewModel().createQueryTodoItemsByListId(listId)
                 .observeOn(AndroidSchedulers.mainThread())
                 .subscribe(adapter));
     }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
index fc645a8..3cd32cf 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
@@ -18,6 +18,7 @@
 import android.app.Activity;
 import android.arch.lifecycle.ViewModelProvider;
 import android.arch.lifecycle.ViewModelProviders;
+import android.content.Context;
 import android.os.Bundle;
 import android.os.Environment;
 import android.support.annotation.Nullable;
@@ -37,6 +38,7 @@
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.MainViewModel;
+import com.squareup.sqlbrite3.BriteDatabase;
 
 import java.io.File;
 
@@ -52,7 +54,7 @@
 import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_IF_ROOM;
 import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_WITH_TEXT;
 
-public final class ListsFragment extends Fragment {
+public final class ListsFragment extends BaseViewModelFragment<MainViewModel> {
     private static final String TAG = "ListsFragment";
 
     interface Listener {
@@ -65,20 +67,6 @@ static ListsFragment newInstance() {
         return new ListsFragment();
     }
 
-/*
-    @Inject
-    BriteDatabase db;
-
-    @Inject
-    ListsItemDao mListsItemDao;
-*/
-
-    @Inject
-    ViewModelProvider.Factory mViewModelFactory;
-
-    //@Inject
-    MainViewModel mViewModel;
-
     @BindView(android.R.id.list)
     ListView listView;
     @BindView(android.R.id.empty)
@@ -91,19 +79,24 @@ static ListsFragment newInstance() {
     private Disposable disposable;
 
     @Override
-    public void onAttach(Activity activity) {
+    public void onAttach(Context context) {
+        super.onAttach(context);
+
+        Activity activity = getActivity();
         if (!(activity instanceof Listener)) {
             throw new IllegalStateException("Activity must implement fragment Listener.");
         }
-
-        super.onAttach(activity);
-        TodoApp.getComponent(activity).inject(this);
         setHasOptionsMenu(true);
 
         listener = (Listener) activity;
         adapter = new ListsAdapter(activity);
     }
 
+    @Override
+    protected void toInject(BaseViewModelFragment<MainViewModel> self) {
+        TodoApp.getComponent(self.getContext()).inject(this);
+    }
+
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         super.onCreateOptionsMenu(menu, inflater);
@@ -136,7 +129,7 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
     @OnClick(R.id.export_db)
     void onExportDB(View btn) {
         try {
-            File dstFile = mViewModel.exportDecryption();
+            File dstFile = getViewModel().exportDecryption();
             Toast.makeText(getContext(), "导出数据库成功!\n" + dstFile.getPath(), Toast.LENGTH_SHORT).show();
         } catch (Exception e) {
             Log.e(TAG, "导出数据库失败!", e);
@@ -152,7 +145,6 @@ void listClicked(long listId) {
     @Override
     public void onActivityCreated(@Nullable Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
-        mViewModel = ViewModelProviders.of(getActivity(), mViewModelFactory).get(MainViewModel.class);
     }
 
     @Override
@@ -167,7 +159,7 @@ public void onResume() {
         .subscribe(adapter);*/
 
 
-        disposable = mViewModel.createQueryListsItems() // 省内存
+        disposable = getViewModel().createQueryListsItems() // 省内存
                 .observeOn(AndroidSchedulers.mainThread())
                 .subscribe(adapter);
     }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
index 75fc3db..1ff4ca5 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
@@ -18,8 +18,8 @@
 import android.database.Cursor;
 import android.os.Parcelable;
 
-import com.example.sqlbrite.todo.db.Db;
-import com.example.sqlbrite.todo.db.TodoList;
+import com.example.sqlbrite.todo.model.local.db.Db;
+import com.example.sqlbrite.todo.model.local.db.TodoList;
 import com.google.auto.value.AutoValue;
 
 import io.reactivex.functions.Function;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
index 7fc9cf4..e2127ff 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
@@ -1,7 +1,7 @@
 package com.example.sqlbrite.todo.ui;
 
-import com.example.sqlbrite.todo.db.TodoItem;
-import com.example.sqlbrite.todo.db.TodoList;
+import com.example.sqlbrite.todo.model.local.db.TodoItem;
+import com.example.sqlbrite.todo.model.local.db.TodoList;
 import com.squareup.sqlbrite3.BriteDatabase;
 import com.squareup.sqlbrite3.SqlBrite;
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
index f5b8cb3..87c41b5 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
@@ -17,34 +17,39 @@
 
 import android.os.Bundle;
 import android.support.v4.app.FragmentActivity;
+
 import com.example.sqlbrite.todo.R;
 
 public final class MainActivity extends FragmentActivity
-    implements ListsFragment.Listener, ItemsFragment.Listener {
+        implements ListsFragment.Listener, ItemsFragment.Listener {
 
-  @Override protected void onCreate(Bundle savedInstanceState) {
-    super.onCreate(savedInstanceState);
-    if (savedInstanceState == null) {
-      getSupportFragmentManager().beginTransaction()
-          .add(android.R.id.content, ListsFragment.newInstance())
-          .commit();
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        if (savedInstanceState == null) {
+            getSupportFragmentManager().beginTransaction()
+                    .add(android.R.id.content, ListsFragment.newInstance())
+                    .commit();
+        }
     }
-  }
 
-  @Override public void onListClicked(long id) {
-    getSupportFragmentManager().beginTransaction()
-        .setCustomAnimations(R.anim.slide_in_right, R.anim.slide_out_left, R.anim.slide_in_left,
-            R.anim.slide_out_right)
-        .replace(android.R.id.content, ItemsFragment.newInstance(id))
-        .addToBackStack(null)
-        .commit();
-  }
+    @Override
+    public void onListClicked(long id) {
+        getSupportFragmentManager().beginTransaction()
+                .setCustomAnimations(R.anim.slide_in_right, R.anim.slide_out_left, R.anim.slide_in_left,
+                        R.anim.slide_out_right)
+                .replace(android.R.id.content, ItemsFragment.newInstance(id))
+                .addToBackStack(null)
+                .commit();
+    }
 
-  @Override public void onNewListClicked() {
-    NewListFragment.newInstance().show(getSupportFragmentManager(), "new-list");
-  }
+    @Override
+    public void onNewListClicked() {
+        NewListFragment.newInstance().show(getSupportFragmentManager(), "new-list");
+    }
 
-  @Override public void onNewItemClicked(long listId) {
-    NewItemFragment.newInstance(listId).show(getSupportFragmentManager(), "new-item");
-  }
+    @Override
+    public void onNewItemClicked(long listId) {
+        NewItemFragment.newInstance(listId).show(getSupportFragmentManager(), "new-item");
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
index 27b9f0a..33e1deb 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
@@ -32,7 +32,7 @@
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.MainViewModel;
-import com.example.sqlbrite.todo.db.TodoItemDao;
+import com.example.sqlbrite.todo.model.local.db.TodoItemDao;
 import com.jakewharton.rxbinding2.widget.RxTextView;
 
 import javax.inject.Inject;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
index 6d535d9..7668c05 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
@@ -32,7 +32,7 @@
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.MainViewModel;
-import com.example.sqlbrite.todo.db.TodoListDao;
+import com.example.sqlbrite.todo.model.local.db.TodoListDao;
 import com.jakewharton.rxbinding2.widget.RxTextView;
 
 import javax.inject.Inject;
