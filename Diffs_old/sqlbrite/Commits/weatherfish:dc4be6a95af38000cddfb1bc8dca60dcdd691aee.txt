diff --git a/.travis.yml b/.travis.yml
index 1d89f29..2a9f665 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -4,7 +4,7 @@ android:
   components:
     - tools
     - platform-tools
-    - build-tools-25.0.0
+    - build-tools-25.0.1
     - extra-android-m2repository
     - android-25
     - sys-img-armeabi-v7a-android-23
diff --git a/CHANGELOG.md b/CHANGELOG.md
index fa8125c..69b2aa6 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,28 @@
 Change Log
-=========
+==========
+
+Version 1.1.1 *(2016-12-20)*
+----------------------------
+
+ * Fix: Correct spelling of `getWritableDatabase()` to match `SQLiteOpenHelper`.
+
+
+Version 1.1.0 *(2016-12-16)*
+----------------------------
+
+ * New: Expose `getReadableDatabase()` and `getWriteableDatabase()` convenience methods.
+ * Fix: Do not cache instances of the readable and writable database internally as the framework
+   does this by default.
+
+
+Version 1.0.0 *(2016-12-02)*
+----------------------------
+
+ * RxJava dependency updated to 1.2.3.
+ * Restore `@WorkerThread` annotations to methods which do I/O. If you're using Java 8 with
+   Retrolambda or Jack you need to use version 2.3 or newer of the Android Gradle plugin to have
+   these annotations correctly handled by lint.
+
 
 Version 0.8.0 *(2016-10-21)*
 ----------------------------
diff --git a/README.md b/README.md
index 650508e..d7c6b89 100755
--- a/README.md
+++ b/README.md
@@ -12,7 +12,7 @@ Usage
 Create a `SqlBrite` instance which is an adapter for the library functionality.
 
 ```java
-SqlBrite sqlBrite = SqlBrite.create();
+SqlBrite sqlBrite = new SqlBrite.Builder().build();
 ```
 
 Pass a `SQLiteOpenHelper` instance and a `Scheduler` to create a `BriteDatabase`.
@@ -148,7 +148,7 @@ Download
 --------
 
 ```groovy
-compile 'com.squareup.sqlbrite:sqlbrite:0.8.0'
+compile 'com.squareup.sqlbrite:sqlbrite:1.1.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
diff --git a/build.gradle b/build.gradle
index acb457a..483e1e9 100644
--- a/build.gradle
+++ b/build.gradle
@@ -14,16 +14,16 @@ allprojects {
 ext {
   androidPlugin = 'com.android.tools.build:gradle:2.2.2'
   compileSdkVersion = 25
-  buildToolsVersion = '25.0.0'
+  buildToolsVersion = '25.0.1'
 
   // Android dependencies.
-  supportV4 = 'com.android.support:support-v4:25.0.0'
-  supportAnnotations = 'com.android.support:support-annotations:25.0.0'
+  supportV4 = 'com.android.support:support-v4:25.0.1'
+  supportAnnotations = 'com.android.support:support-annotations:25.0.1'
   supportTestRunner = 'com.android.support.test:runner:0.5'
 
   // Dagger dependencies.
-  dagger = 'com.google.dagger:dagger:2.7'
-  daggerCompiler = 'com.google.dagger:dagger-compiler:2.7'
+  dagger = 'com.google.dagger:dagger:2.8'
+  daggerCompiler = 'com.google.dagger:dagger-compiler:2.8'
 
   // Third-party dependencies.
   butterKnifeRuntime = 'com.jakewharton:butterknife:8.4.0'
@@ -31,7 +31,7 @@ ext {
   timber = 'com.jakewharton.timber:timber:4.3.1'
   autoValue = 'com.google.auto.value:auto-value:1.3'
   autoValueParcel = 'com.ryanharter.auto.value:auto-value-parcel:0.2.5'
-  rxJava = 'io.reactivex:rxjava:1.2.1'
+  rxJava = 'io.reactivex:rxjava:1.2.3'
   rxAndroid = 'io.reactivex:rxandroid:1.2.1'
   rxBinding = 'com.jakewharton.rxbinding:rxbinding:0.4.0'
   truth = 'com.google.truth:truth:0.30'
diff --git a/gradle.properties b/gradle.properties
index 5d02ee4..fbfb802 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.squareup.sqlbrite
-VERSION_NAME=0.8.1-SNAPSHOT
+VERSION_NAME=1.1.2-SNAPSHOT
 
 POM_DESCRIPTION=A lightweight wrapper around SQLiteOpenHelper which introduces reactive stream semantics to SQL operations.
 
diff --git a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BriteContentResolverTest.java b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BriteContentResolverTest.java
index 39fddac..b0f76ec 100644
--- a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BriteContentResolverTest.java
+++ b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BriteContentResolverTest.java
@@ -207,7 +207,9 @@ public void testBackpressureSupportedWhenSchedulerSlow() {
     scheduler.triggerActions();
 
     // Assert we got all the events from the queue plus the one buffered from backpressure.
-    for (int i = 0; i < RxRingBuffer.SIZE + 1; i++) {
+    // Note: Because of the rebatching request behavior of observeOn, the initial emission is
+    // counted against this amount which is why there is no +1 on SIZE.
+    for (int i = 0; i < RxRingBuffer.SIZE; i++) {
       o.assertCursor(); // Ignore contents, just assert we got notified.
     }
   }
diff --git a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BriteDatabaseTest.java b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BriteDatabaseTest.java
index d530d44..98f7cab 100644
--- a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BriteDatabaseTest.java
+++ b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/BriteDatabaseTest.java
@@ -1256,7 +1256,9 @@
     scheduler.triggerActions();
 
     // Assert we got all the events from the queue plus the one buffered from backpressure.
-    for (int i = 0; i < RxRingBuffer.SIZE + 1; i++) {
+    // Note: Because of the rebatching request behavior of observeOn, the initial emission is
+    // counted against this amount which is why there is no +1 on SIZE.
+    for (int i = 0; i < RxRingBuffer.SIZE; i++) {
       o.assertCursor(); // Ignore contents, just assert we got notified.
     }
   }
diff --git a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/QueryObservableTest.java b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/QueryObservableTest.java
index 03812aa..b8094b8 100644
--- a/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/QueryObservableTest.java
+++ b/sqlbrite/src/androidTest/java/com/squareup/sqlbrite/QueryObservableTest.java
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import rx.Observable;
 import rx.Observable.OnSubscribe;
+import rx.Subscriber;
 import rx.functions.Func1;
 import rx.observers.TestSubscriber;
 
@@ -22,13 +22,13 @@
   @Test public void mapToListThrowsFromQueryRun() {
     TestSubscriber<Object> testSubscriber = new TestSubscriber<>();
 
-    Observable.<Query>just(new Query() {
-      @Override public Cursor run() {
-        throw new IllegalStateException("test exception");
-      }
-    }).extend(new Func1<OnSubscribe<Query>, QueryObservable>() {
-      @Override public QueryObservable call(OnSubscribe<Query> func) {
-        return new QueryObservable(func);
+    new QueryObservable(new OnSubscribe<Query>() {
+      @Override public void call(Subscriber<? super Query> subscriber) {
+        subscriber.onNext(new Query() {
+          @Override public Cursor run() {
+            throw new IllegalStateException("test exception");
+          }
+        });
       }
     }).mapToList(new Func1<Cursor, Object>() {
       @Override public Object call(Cursor cursor) {
@@ -47,15 +47,15 @@
   @Test public void mapToListThrowsFromMapFunction() {
     TestSubscriber<Object> testSubscriber = new TestSubscriber<>();
 
-    Observable.<Query>just(new Query() {
-      @Override public Cursor run() {
-        MatrixCursor cursor = new MatrixCursor(new String[]{"col1"});
-        cursor.addRow(new Object[]{"value1"});
-        return cursor;
-      }
-    }).extend(new Func1<OnSubscribe<Query>, QueryObservable>() {
-      @Override public QueryObservable call(OnSubscribe<Query> func) {
-        return new QueryObservable(func);
+    new QueryObservable(new OnSubscribe<Query>() {
+      @Override public void call(Subscriber<? super Query> subscriber) {
+        subscriber.onNext(new Query() {
+          @Override public Cursor run() {
+            MatrixCursor cursor = new MatrixCursor(new String[]{"col1"});
+            cursor.addRow(new Object[]{"value1"});
+            return cursor;
+          }
+        });
       }
     }).mapToList(new Func1<Cursor, Object>() {
       @Override public Object call(Cursor cursor) {
diff --git a/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteDatabase.java b/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteDatabase.java
index 58561b2..a86d0db 100644
--- a/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteDatabase.java
+++ b/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteDatabase.java
@@ -27,6 +27,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.annotation.RequiresApi;
+import android.support.annotation.WorkerThread;
 import com.squareup.sqlbrite.SqlBrite.Query;
 import java.io.Closeable;
 import java.lang.annotation.Retention;
@@ -71,15 +72,15 @@
   private final Transaction transaction = new Transaction() {
     @Override public void markSuccessful() {
       if (logging) log("TXN SUCCESS %s", transactions.get());
-      getWriteableDatabase().setTransactionSuccessful();
+      getWritableDatabase().setTransactionSuccessful();
     }
 
     @Override public boolean yieldIfContendedSafely() {
-      return getWriteableDatabase().yieldIfContendedSafely();
+      return getWritableDatabase().yieldIfContendedSafely();
     }
 
     @Override public boolean yieldIfContendedSafely(long sleepAmount, TimeUnit sleepUnit) {
-      return getWriteableDatabase().yieldIfContendedSafely(sleepUnit.toMillis(sleepAmount));
+      return getWritableDatabase().yieldIfContendedSafely(sleepUnit.toMillis(sleepAmount));
     }
 
     @Override public void end() {
@@ -90,7 +91,7 @@
       SqliteTransaction newTransaction = transaction.parent;
       transactions.set(newTransaction);
       if (logging) log("TXN END %s", transaction);
-      getWriteableDatabase().endTransaction();
+      getWritableDatabase().endTransaction();
       // Send the triggers after ending the transaction in the DB.
       if (transaction.commit) {
         sendTableTrigger(transaction);
@@ -109,11 +110,6 @@
     }
   };
 
-  // Read and write guarded by 'databaseLock'. Lazily initialized. Use methods to access.
-  private volatile SQLiteDatabase readableDatabase;
-  private volatile SQLiteDatabase writeableDatabase;
-  private final Object databaseLock = new Object();
-
   private final Scheduler scheduler;
 
   // Package-private to avoid synthetic accessor method for 'transaction' instance.
@@ -134,33 +130,59 @@ public void setLoggingEnabled(boolean enabled) {
     logging = enabled;
   }
 
-  SQLiteDatabase getReadableDatabase() {
-    SQLiteDatabase db = readableDatabase;
-    if (db == null) {
-      synchronized (databaseLock) {
-        db = readableDatabase;
-        if (db == null) {
-          if (logging) log("Creating readable database");
-          db = readableDatabase = helper.getReadableDatabase();
-        }
-      }
-    }
-    return db;
+  /**
+   * Create and/or open a database.  This will be the same object returned by
+   * {@link SQLiteOpenHelper#getWritableDatabase} unless some problem, such as a full disk,
+   * requires the database to be opened read-only.  In that case, a read-only
+   * database object will be returned.  If the problem is fixed, a future call
+   * to {@link SQLiteOpenHelper#getWritableDatabase} may succeed, in which case the read-only
+   * database object will be closed and the read/write object will be returned
+   * in the future.
+   *
+   * <p class="caution">Like {@link SQLiteOpenHelper#getWritableDatabase}, this method may
+   * take a long time to return, so you should not call it from the
+   * application main thread, including from
+   * {@link android.content.ContentProvider#onCreate ContentProvider.onCreate()}.
+   *
+   * @throws android.database.sqlite.SQLiteException if the database cannot be opened
+   * @return a database object valid until {@link SQLiteOpenHelper#getWritableDatabase}
+   *     or {@link #close} is called.
+   */
+  @NonNull @CheckResult @WorkerThread
+  public SQLiteDatabase getReadableDatabase() {
+    return helper.getReadableDatabase();
   }
 
-  // Package-private to avoid synthetic accessor method for 'transaction' instance.
-  SQLiteDatabase getWriteableDatabase() {
-    SQLiteDatabase db = writeableDatabase;
-    if (db == null) {
-      synchronized (databaseLock) {
-        db = writeableDatabase;
-        if (db == null) {
-          if (logging) log("Creating writeable database");
-          db = writeableDatabase = helper.getWritableDatabase();
-        }
-      }
-    }
-    return db;
+
+  /** @deprecated Use {@link #getWritableDatabase()}. */
+  @Deprecated
+  @NonNull @CheckResult @WorkerThread
+  public SQLiteDatabase getWriteableDatabase() {
+    return helper.getWritableDatabase();
+  }
+
+  /**
+   * Create and/or open a database that will be used for reading and writing.
+   * The first time this is called, the database will be opened and
+   * {@link SQLiteOpenHelper#onCreate}, {@link SQLiteOpenHelper#onUpgrade}
+   * and/or {@link SQLiteOpenHelper#onOpen} will be called.
+   *
+   * <p>Once opened successfully, the database is cached, so you can
+   * call this method every time you need to write to the database.
+   * (Make sure to call {@link #close} when you no longer need the database.)
+   * Errors such as bad permissions or a full disk may cause this method
+   * to fail, but future attempts may succeed if the problem is fixed.</p>
+   *
+   * <p class="caution">Database upgrade may take a long time, you
+   * should not call this method from the application main thread, including
+   * from {@link android.content.ContentProvider#onCreate ContentProvider.onCreate()}.
+   *
+   * @throws android.database.sqlite.SQLiteException if the database cannot be opened for writing
+   * @return a read/write database object valid until {@link #close} is called
+   */
+  @NonNull @CheckResult @WorkerThread
+  public SQLiteDatabase getWritableDatabase() {
+    return helper.getWritableDatabase();
   }
 
   void sendTableTrigger(Set<String> tables) {
@@ -215,7 +237,7 @@ public Transaction newTransaction() {
     SqliteTransaction transaction = new SqliteTransaction(transactions.get());
     transactions.set(transaction);
     if (logging) log("TXN BEGIN %s", transaction);
-    getWriteableDatabase().beginTransactionWithListener(transaction);
+    getWritableDatabase().beginTransactionWithListener(transaction);
 
     return this.transaction;
   }
@@ -263,7 +285,7 @@ public Transaction newNonExclusiveTransaction() {
     SqliteTransaction transaction = new SqliteTransaction(transactions.get());
     transactions.set(transaction);
     if (logging) log("TXN BEGIN %s", transaction);
-    getWriteableDatabase().beginTransactionWithListenerNonExclusive(transaction);
+    getWritableDatabase().beginTransactionWithListenerNonExclusive(transaction);
 
     return this.transaction;
   }
@@ -274,11 +296,7 @@ public Transaction newNonExclusiveTransaction() {
    * well as attempting to create new ones for new subscriptions.
    */
   @Override public void close() {
-    synchronized (databaseLock) {
-      readableDatabase = null;
-      writeableDatabase = null;
-      helper.close();
-    }
+    helper.close();
   }
 
   /**
@@ -376,7 +394,7 @@ private QueryObservable createQuery(Func1<Set<String>, Boolean> tableFilter, Str
    *
    * @see SQLiteDatabase#rawQuery(String, String[])
    */
-  @CheckResult // TODO @WorkerThread
+  @CheckResult @WorkerThread
   public Cursor query(@NonNull String sql, @NonNull String... args) {
     long startNanos = nanoTime();
     Cursor cursor = getReadableDatabase().rawQuery(sql, args);
@@ -394,7 +412,7 @@ public Cursor query(@NonNull String sql, @NonNull String... args) {
    *
    * @see SQLiteDatabase#insert(String, String, ContentValues)
    */
-  // TODO @WorkerThread
+  @WorkerThread
   public long insert(@NonNull String table, @NonNull ContentValues values) {
     return insert(table, values, CONFLICT_NONE);
   }
@@ -404,10 +422,10 @@ public long insert(@NonNull String table, @NonNull ContentValues values) {
    *
    * @see SQLiteDatabase#insertWithOnConflict(String, String, ContentValues, int)
    */
-  // TODO @WorkerThread
+  @WorkerThread
   public long insert(@NonNull String table, @NonNull ContentValues values,
       @ConflictAlgorithm int conflictAlgorithm) {
-    SQLiteDatabase db = getWriteableDatabase();
+    SQLiteDatabase db = getWritableDatabase();
 
     if (logging) {
       log("INSERT\n  table: %s\n  values: %s\n  conflictAlgorithm: %s", table, values,
@@ -430,10 +448,10 @@ public long insert(@NonNull String table, @NonNull ContentValues values,
    *
    * @see SQLiteDatabase#delete(String, String, String[])
    */
-  // TODO @WorkerThread
+  @WorkerThread
   public int delete(@NonNull String table, @Nullable String whereClause,
       @Nullable String... whereArgs) {
-    SQLiteDatabase db = getWriteableDatabase();
+    SQLiteDatabase db = getWritableDatabase();
 
     if (logging) {
       log("DELETE\n  table: %s\n  whereClause: %s\n  whereArgs: %s", table, whereClause,
@@ -456,7 +474,7 @@ public int delete(@NonNull String table, @Nullable String whereClause,
    *
    * @see SQLiteDatabase#update(String, ContentValues, String, String[])
    */
-  // TODO @WorkerThread
+  @WorkerThread
   public int update(@NonNull String table, @NonNull ContentValues values,
       @Nullable String whereClause, @Nullable String... whereArgs) {
     return update(table, values, CONFLICT_NONE, whereClause, whereArgs);
@@ -468,11 +486,11 @@ public int update(@NonNull String table, @NonNull ContentValues values,
    *
    * @see SQLiteDatabase#updateWithOnConflict(String, ContentValues, String, String[], int)
    */
-  // TODO @WorkerThread
+  @WorkerThread
   public int update(@NonNull String table, @NonNull ContentValues values,
       @ConflictAlgorithm int conflictAlgorithm, @Nullable String whereClause,
       @Nullable String... whereArgs) {
-    SQLiteDatabase db = getWriteableDatabase();
+    SQLiteDatabase db = getWritableDatabase();
 
     if (logging) {
       log("UPDATE\n  table: %s\n  values: %s\n  whereClause: %s\n  whereArgs: %s\n  conflictAlgorithm: %s",
@@ -499,12 +517,11 @@ public int update(@NonNull String table, @NonNull ContentValues values,
    *
    * @see SQLiteDatabase#execSQL(String)
    */
-  // TODO @WorkerThread
+  @WorkerThread
   public void execute(String sql) {
     if (logging) log("EXECUTE\n  sql: %s", sql);
 
-    SQLiteDatabase db = getWriteableDatabase();
-    db.execSQL(sql);
+    getWritableDatabase().execSQL(sql);
   }
 
   /**
@@ -516,12 +533,11 @@ public void execute(String sql) {
    *
    * @see SQLiteDatabase#execSQL(String, Object[])
    */
-  // TODO @WorkerThread
+  @WorkerThread
   public void execute(String sql, Object... args) {
     if (logging) log("EXECUTE\n  sql: %s\n  args: %s", sql, Arrays.toString(args));
 
-    SQLiteDatabase db = getWriteableDatabase();
-    db.execSQL(sql, args);
+    getWritableDatabase().execSQL(sql, args);
   }
 
   /**
@@ -533,7 +549,7 @@ public void execute(String sql, Object... args) {
    *
    * @see SQLiteDatabase#execSQL(String)
    */
-  // TODO @WorkerThread
+  @WorkerThread
   public void executeAndTrigger(String table, String sql) {
     executeAndTrigger(Collections.singleton(table), sql);
   }
@@ -543,7 +559,7 @@ public void executeAndTrigger(String table, String sql) {
    *
    * @see BriteDatabase#executeAndTrigger(String, String)
    */
-  // TODO @WorkerThread
+  @WorkerThread
   public void executeAndTrigger(Set<String> tables, String sql) {
     execute(sql);
 
@@ -559,7 +575,7 @@ public void executeAndTrigger(Set<String> tables, String sql) {
    *
    * @see SQLiteDatabase#execSQL(String, Object[])
    */
-  // TODO @WorkerThread
+  @WorkerThread
   public void executeAndTrigger(String table, String sql, Object... args) {
     executeAndTrigger(Collections.singleton(table), sql, args);
   }
@@ -569,7 +585,7 @@ public void executeAndTrigger(String table, String sql, Object... args) {
    *
    * @see BriteDatabase#executeAndTrigger(String, String, Object...)
    */
-  // TODO @WorkerThread
+  @WorkerThread
   public void executeAndTrigger(Set<String> tables, String sql, Object... args) {
     execute(sql, args);
 
@@ -585,7 +601,7 @@ public void executeAndTrigger(Set<String> tables, String sql, Object... args) {
    *
    * @see SQLiteStatement#executeUpdateDelete()
    */
-  // TODO @WorkerThread
+  @WorkerThread
   @RequiresApi(Build.VERSION_CODES.HONEYCOMB)
   public int executeUpdateDelete(String table, SQLiteStatement statement) {
     return executeUpdateDelete(Collections.singleton(table), statement);
@@ -596,7 +612,7 @@ public int executeUpdateDelete(String table, SQLiteStatement statement) {
    *
    * @see BriteDatabase#executeUpdateDelete(String, SQLiteStatement)
    */
-  // TODO @WorkerThread
+  @WorkerThread
   @RequiresApi(Build.VERSION_CODES.HONEYCOMB)
   public int executeUpdateDelete(Set<String> tables, SQLiteStatement statement) {
     if (logging) log("EXECUTE\n %s", statement);
@@ -619,7 +635,7 @@ public int executeUpdateDelete(Set<String> tables, SQLiteStatement statement) {
    *
    * @see SQLiteStatement#executeInsert()
    */
-  // TODO @WorkerThread
+  @WorkerThread
   public long executeInsert(String table, SQLiteStatement statement) {
     return executeInsert(Collections.singleton(table), statement);
   }
@@ -629,7 +645,7 @@ public long executeInsert(String table, SQLiteStatement statement) {
    *
    * @see BriteDatabase#executeInsert(String, SQLiteStatement)
    */
-  // TODO @WorkerThread
+  @WorkerThread
   public long executeInsert(Set<String> tables, SQLiteStatement statement) {
     if (logging) log("EXECUTE\n %s", statement);
 
@@ -649,7 +665,7 @@ public long executeInsert(Set<String> tables, SQLiteStatement statement) {
      *
      * @see SQLiteDatabase#endTransaction()
      */
-    // TODO @WorkerThread
+    @WorkerThread
     void end();
 
     /**
@@ -660,7 +676,7 @@ public long executeInsert(Set<String> tables, SQLiteStatement statement) {
      *
      * @see SQLiteDatabase#setTransactionSuccessful()
      */
-    // TODO @WorkerThread
+    @WorkerThread
     void markSuccessful();
 
     /**
@@ -674,7 +690,7 @@ public long executeInsert(Set<String> tables, SQLiteStatement statement) {
      *
      * @see SQLiteDatabase#yieldIfContendedSafely()
      */
-    // TODO @WorkerThread
+    @WorkerThread
     boolean yieldIfContendedSafely();
 
     /**
@@ -691,13 +707,13 @@ public long executeInsert(Set<String> tables, SQLiteStatement statement) {
      *
      * @see SQLiteDatabase#yieldIfContendedSafely(long)
      */
-    // TODO @WorkerThread
+    @WorkerThread
     boolean yieldIfContendedSafely(long sleepAmount, TimeUnit sleepUnit);
 
     /**
      * Equivalent to calling {@link #end()}
      */
-    // TODO @WorkerThread
+    @WorkerThread
     @Override void close();
   }
 
diff --git a/sqlbrite/src/main/java/com/squareup/sqlbrite/SqlBrite.java b/sqlbrite/src/main/java/com/squareup/sqlbrite/SqlBrite.java
index 16513f9..c7d3b7e 100644
--- a/sqlbrite/src/main/java/com/squareup/sqlbrite/SqlBrite.java
+++ b/sqlbrite/src/main/java/com/squareup/sqlbrite/SqlBrite.java
@@ -21,6 +21,7 @@
 import android.support.annotation.CheckResult;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.annotation.WorkerThread;
 import android.util.Log;
 import java.util.List;
 import rx.Observable;
@@ -86,7 +87,7 @@ public static SqlBrite create(@NonNull Logger logger) {
   private final Logger logger;
   private final Transformer<Query, Query> queryTransformer;
 
-  private SqlBrite(@NonNull Logger logger, @NonNull Transformer<Query, Query> queryTransformer) {
+  SqlBrite(@NonNull Logger logger, @NonNull Transformer<Query, Query> queryTransformer) {
     this.logger = logger;
     this.queryTransformer = queryTransformer;
   }
@@ -182,7 +183,7 @@ private SqlBrite(@NonNull Logger logger, @NonNull Transformer<Query, Query> quer
      * underlying store and should either be treated as failure or ignored for retry at a later
      * time.
      */
-    @CheckResult // TODO @WorkerThread
+    @CheckResult @WorkerThread
     @Nullable
     public abstract Cursor run();
 
