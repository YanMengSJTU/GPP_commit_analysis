diff --git a/build.gradle b/build.gradle
index a361a8e..2e70b7b 100644
--- a/build.gradle
+++ b/build.gradle
@@ -37,7 +37,7 @@ allprojects {
 
 ext {
     // Android dependencies.
-    androidSupportVersion='27.0.0'
+    androidSupportVersion = '27.0.0'
     supportV4 = "com.android.support:support-v4:$androidSupportVersion"
     supportAnnotations = "com.android.support:support-annotations:$androidSupportVersion"
     supportTestRunner = 'com.android.support.test:runner:0.5'
@@ -64,13 +64,21 @@ ext {
     butterKnifeRuntime = 'com.jakewharton:butterknife:8.8.1'
     butterKnifeCompiler = 'com.jakewharton:butterknife-compiler:8.8.1'
     timber = 'com.jakewharton.timber:timber:4.6.0'
-    autoValue = 'com.google.auto.value:auto-value:1.5'
-    autoValueParcel = 'com.ryanharter.auto.value:auto-value-parcel:0.2.5'
+    autoValue = 'com.google.auto.value:auto-value:1.5.4'
+    autoValueGson = 'com.ryanharter.auto.value:auto-value-gson:0.7.0'
+    autoValueGsonAnnotations = 'com.ryanharter.auto.value:auto-value-gson-annotations:0.7.0'
+    autoValueParcel = 'com.ryanharter.auto.value:auto-value-parcel:0.2.6'
+    autoValueParcelAdapter = 'com.ryanharter.auto.value:auto-value-parcel-adapter:0.2.6'
     rxJava = 'io.reactivex.rxjava2:rxjava:2.1.3'
     rxAndroid = 'io.reactivex.rxjava2:rxandroid:2.0.1'
     rxBinding = 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
     junit = 'junit:junit:4.12'
     truth = 'com.google.truth:truth:0.36'
+    retrofit_runtime = 'com.squareup.retrofit2:retrofit:2.3.0'
+    retrofit_gson = 'com.squareup.retrofit2:converter-gson:2.3.0'
+    retrofit_mock = 'com.squareup.retrofit2:retrofit-mock:2.3.0'
+    retrofit_rxAdapter = "com.squareup.retrofit2:adapter-rxjava2:2.3.0"
+    okhttp_logging_interceptor = 'com.squareup.okhttp3:logging-interceptor:3.9.0'
 
     // Lint dependencies.
     lintApi = "com.android.tools.lint:lint-api:${versions.lint}"
diff --git a/sample/build.gradle b/sample/build.gradle
index d830854..1247c68 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -5,6 +5,7 @@ dependencies {
     implementation rootProject.ext.supportAnnotations
 
     implementation rootProject.ext.dagger
+    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
     annotationProcessor rootProject.ext.daggerCompiler
 
     implementation rootProject.ext.butterKnifeRuntime
@@ -16,6 +17,9 @@ dependencies {
 
     compileOnly rootProject.ext.autoValue
     annotationProcessor rootProject.ext.autoValue
+    compileOnly rootProject.ext.autoValueGsonAnnotations
+    annotationProcessor rootProject.ext.autoValueGson
+    compileOnly rootProject.ext.autoValueParcelAdapter
     annotationProcessor rootProject.ext.autoValueParcel
 
     implementation project(':sqlbrite')
@@ -32,6 +36,14 @@ dependencies {
     implementation rootProject.ext.androidArchViewModel
     implementation rootProject.ext.androidArchExtensions
 
+    implementation rootProject.ext.retrofit_runtime
+    implementation rootProject.ext.retrofit_gson
+    implementation rootProject.ext.retrofit_mock
+    implementation rootProject.ext.retrofit_rxAdapter
+    implementation rootProject.ext.okhttp_logging_interceptor
+
+    implementation 'com.android.support:multidex:1.0.3'
+
     compile 'com.gg.rxbase:rxbase:1.1.1'
 }
 
@@ -45,7 +57,8 @@ android {
     lintOptions {
         textOutput 'stdout'
         textReport true
-        ignore 'InvalidPackage' // Provided AutoValue pulls in Guava and friends. Doesn't end up in APK.
+        ignore 'InvalidPackage'
+        // Provided AutoValue pulls in Guava and friends. Doesn't end up in APK.
     }
 
     defaultConfig {
@@ -55,6 +68,16 @@ android {
 
         versionCode 1
         versionName '1.0'
+
+        multiDexEnabled true
+        javaCompileOptions {
+            annotationProcessorOptions {
+                arguments = [
+                        'autovaluegson.defaultCollectionsToEmpty'        : 'true',
+                        'autovaluegson.mutableAdaptersWithDefaultSetters': 'true'
+                ]
+            }
+        }
     }
 
     signingConfigs {
@@ -74,6 +97,8 @@ android {
     }
 }
 
+
+
 configurations.all {
     resolutionStrategy.eachDependency { DependencyResolveDetails details ->
         def requested = details.requested
diff --git a/sample/src/main/AndroidManifest.xml b/sample/src/main/AndroidManifest.xml
index aebba88..7944ab2 100644
--- a/sample/src/main/AndroidManifest.xml
+++ b/sample/src/main/AndroidManifest.xml
@@ -1,27 +1,36 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.example.sqlbrite.todo"
-    >
+          package="com.example.sqlbrite.todo">
 
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.READ_PHONE_STATE"/>
+    <uses-permission android:name="android.permission.INTERNET"/>
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
+    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>
+    <uses-permission android:name="android.permission.READ_LOGS"/>
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
+    <uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS"/>
 
     <application
-      android:label="@string/app_name"
-      android:name=".TodoApp"
-      android:allowBackup="false"
-      android:icon="@drawable/ic_launcher"
-      android:theme="@style/AppTheme"
-      >
-    <activity
-        android:name=".ui.MainActivity"
-        >
-      <intent-filter>
-        <action android:name="android.intent.action.MAIN"/>
+        android:name=".TodoApp"
+        android:allowBackup="false"
+        android:icon="@drawable/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme">
+        <activity android:name=".ui.SplashActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN"/>
 
-        <category android:name="android.intent.category.LAUNCHER"/>
-        <category android:name="android.intent.category.DEFAULT"/>
-      </intent-filter>
-    </activity>
+                <category android:name="android.intent.category.LAUNCHER"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+            </intent-filter>
+        </activity>
+        <activity android:name=".ui.MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN"/>
+            </intent-filter>
+        </activity>
+        <activity android:name=".ui.SystemSettingActivity">
+        </activity>
+    </application>
 
-  </application>
-</manifest>
+</manifest>
\ No newline at end of file
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java b/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
index 1857a80..7c2963a 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
@@ -16,20 +16,16 @@
 package com.example.sqlbrite.todo;
 
 import android.app.Application;
-import android.content.Context;
+import android.support.multidex.MultiDexApplication;
 
 import com.example.sqlbrite.todo.di.AppScopeComponent;
-import com.example.sqlbrite.todo.di.AppScopeModule;
-import com.example.sqlbrite.todo.di.DaggerAppScopeComponent;
 import com.example.sqlbrite.todo.di.InjectHelper;
-import com.example.sqlbrite.todo.di.UserScopeComponent;
 
 import timber.log.Timber;
 
-public final class TodoApp extends Application {
-    private AppScopeComponent mAppScopeComponent;
+public final class TodoApp extends MultiDexApplication {
 
-    private UserScopeComponent mUserScopeComponent;
+    private AppScopeComponent mAppScopeComponent;
 
     @Override
     public void onCreate() {
@@ -39,12 +35,7 @@ public void onCreate() {
             Timber.plant(new Timber.DebugTree());
         }
 
-        mAppScopeComponent = DaggerAppScopeComponent.builder().appScopeModule(new AppScopeModule(this)).build();
-
-        mUserScopeComponent = InjectHelper.createUserScopeComponent(this);
-    }
-
-    public static AppScopeComponent getAppScopeComponent(Context context) {
-        return ((TodoApp) context.getApplicationContext()).mAppScopeComponent;
+        mAppScopeComponent = InjectHelper.instance()
+                .init(this);
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/LoginViewControler.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/LoginViewControler.java
new file mode 100644
index 0000000..8d2ba3c
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/LoginViewControler.java
@@ -0,0 +1,59 @@
+package com.example.sqlbrite.todo.controler;
+
+import com.example.sqlbrite.todo.model.users.UserManager;
+import com.example.sqlbrite.todo.model.users.UserSession;
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
+import com.gg.rxbase.controller.RxBaseViewModel;
+
+import javax.inject.Inject;
+
+import io.reactivex.Completable;
+import io.reactivex.Single;
+import io.reactivex.functions.Action;
+import io.reactivex.functions.Consumer;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/6 14:40
+ */
+
+public class LoginViewControler {
+
+    private final UserManager mUserManager;
+    private final SchedulerProvider mSchedulerProvider;
+
+    private UserSession mUserSession = null;
+
+    @Inject
+    public LoginViewControler(UserManager userManager,
+                              SchedulerProvider schedulerProvider) {
+        mUserManager = userManager;
+        mSchedulerProvider = schedulerProvider;
+    }
+
+    public Single<UserSession> login(final String userId, final String password) {
+        return mUserManager.startSessionForUser(userId)
+                .observeOn(mSchedulerProvider.viewModel())
+                .doOnSuccess(new Consumer<UserSession>() {
+                    @Override
+                    public void accept(UserSession userSession) throws Exception {
+                        mUserSession = userSession;
+                    }
+                });
+    }
+
+    public boolean isUserSessionAlive() {
+        return mUserSession != null;
+    }
+
+    public Completable logout() {
+        return mUserManager.closeUserSession(mUserSession)
+                .observeOn(mSchedulerProvider.viewModel())
+                .doOnComplete(new Action() {
+                    @Override
+                    public void run() throws Exception {
+                        mUserSession = null;
+                    }
+                });
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
index e9ef00d..e235c5e 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
@@ -2,8 +2,6 @@
 
 import com.example.sqlbrite.todo.model.MainDataSource;
 import com.example.sqlbrite.todo.model.local.db.TodoItem;
-import com.example.sqlbrite.todo.model.users.UserManager;
-import com.example.sqlbrite.todo.model.users.UserSession;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.example.sqlbrite.todo.ui.ListsItem;
 import com.gg.rxbase.controller.RxBaseViewModel;
@@ -15,13 +13,7 @@
 
 import javax.inject.Inject;
 
-import dagger.Lazy;
 import io.reactivex.Observable;
-import io.reactivex.ObservableEmitter;
-import io.reactivex.ObservableOnSubscribe;
-import io.reactivex.functions.Consumer;
-import io.reactivex.functions.Function;
-import io.reactivex.functions.Predicate;
 
 /**
  * @author Guang1234567
@@ -30,22 +22,15 @@
 
 public class MainViewModel extends RxBaseViewModel {
 
-    private final MainDataSource mDataSource;
-    private final Lazy<Observable<UserManager>> mUserManager;
     private final SchedulerProvider mSchedulerProvider;
-
-    private UserSession mUserSession = UserSession.FAIL;
-
+    private final MainDataSource mDataSource;
     private Date mLastCreateTime;
 
     @Inject
     public MainViewModel(MainDataSource dataSource,
-                         Lazy<Observable<UserManager>> userManager,
                          SchedulerProvider schedulerProvider) {
         mDataSource = dataSource;
-        mUserManager = userManager;
         mSchedulerProvider = schedulerProvider;
-
         mLastCreateTime = new Date();
     }
 
@@ -88,54 +73,4 @@ public long createNewOneTodoItem(long listId, String description) {
     public File exportDecryption() throws Exception {
         return mDataSource.exportDecryption();
     }
-
-    public Observable<UserSession> login(final String userId, final String password) {
-        return mUserManager.get()
-                .observeOn(mSchedulerProvider.viewModel())
-                .filter(new Predicate<UserManager>() {
-                    @Override
-                    public boolean test(UserManager userManager) throws Exception {
-                        return UserSession.FAIL.equals(mUserSession);
-                    }
-                })
-                .map(new Function<UserManager, UserSession>() {
-                    @Override
-                    public UserSession apply(UserManager userManager) throws Exception {
-                        return userManager.login(userId, password);
-                    }
-                })
-                .doOnNext(new Consumer<UserSession>() {
-                    @Override
-                    public void accept(UserSession userSession) throws Exception {
-                        mUserSession = userSession;
-                    }
-                });
-    }
-
-    public Observable<UserSession> isUserSessionAlive() {
-        return Observable
-                .create(new ObservableOnSubscribe<UserSession>() {
-                    @Override
-                    public void subscribe(ObservableEmitter<UserSession> e) throws Exception {
-                        e.onNext(mUserSession);
-                        if (!e.isDisposed()) {
-                            e.onComplete();
-                        }
-                    }
-                })
-                .observeOn(mSchedulerProvider.viewModel())
-                .filter(new Predicate<UserSession>() {
-                    @Override
-                    public boolean test(UserSession session) throws Exception {
-                        return mUserSession.isAlive();
-                    }
-                });
-    }
-
-    public void logout() {
-        if (!UserSession.FAIL.equals(mUserSession)) {
-            mUserSession.logout();
-            mUserSession = UserSession.FAIL;
-        }
-    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/SystemSettingViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/SystemSettingViewModel.java
new file mode 100644
index 0000000..9326a3b
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/SystemSettingViewModel.java
@@ -0,0 +1,36 @@
+package com.example.sqlbrite.todo.controler;
+
+import com.example.sqlbrite.todo.model.users.UserManager;
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
+import com.gg.rxbase.controller.RxBaseViewModel;
+
+import javax.inject.Inject;
+
+import io.reactivex.Completable;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/6 14:40
+ */
+
+public class SystemSettingViewModel extends RxBaseViewModel {
+
+    private final UserManager mUserManager;
+    private final SchedulerProvider mSchedulerProvider;
+    private final LoginViewControler mloginViewModel;
+
+    @Inject
+    public SystemSettingViewModel(UserManager userManager,
+                                  SchedulerProvider schedulerProvider,
+                                  LoginViewControler loginViewModel) {
+        mUserManager = userManager;
+        mSchedulerProvider = schedulerProvider;
+        mloginViewModel = loginViewModel;
+    }
+
+
+    public Completable logout() {
+        return mloginViewModel.logout()
+                .compose(this.bindToLifecycle());
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java
index 875ac35..8d87988 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java
@@ -3,8 +3,10 @@
 import android.app.Activity;
 import android.arch.lifecycle.ViewModelProvider;
 
+import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.example.sqlbrite.todo.ui.MainActivity;
+import com.example.sqlbrite.todo.ui.SystemSettingActivity;
 
 import dagger.Component;
 
@@ -14,14 +16,18 @@
  */
 
 @ActivityScope
-@Component(modules = ActivityScopeModule.class, dependencies = {UserScopeComponent.class})
+@Component(modules = ActivityScopeModule.class, dependencies = UserScopeComponent.class)
 public interface ActivityScopeComponent {
 
     Activity activity();
 
     SchedulerProvider schedulerProvider();
 
+    GitHubApiInterface gitHubApiInterface();
+
     ViewModelProvider.Factory viewModelProviderFactory();
 
     void inject(MainActivity activity);
+
+    void inject(SystemSettingActivity activity);
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeModule.java
index 9dd6446..ceafd4d 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeModule.java
@@ -3,6 +3,7 @@
 import android.app.Activity;
 
 import com.example.sqlbrite.todo.di.model.UserScopeModelModule;
+import com.example.sqlbrite.todo.di.model.remote.NetModule;
 
 import dagger.Module;
 import dagger.Provides;
@@ -12,9 +13,7 @@
  * @date 2018/3/14 13:11
  */
 
-@Module(includes = {
-        UserScopeModelModule.class,
-})
+@Module
 public class ActivityScopeModule {
     private final Activity mActivity;
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
index 384fa31..3454672 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
@@ -17,13 +17,18 @@
 
 import android.app.Application;
 
+import com.example.sqlbrite.todo.controler.LoginViewControler;
+import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
 import com.example.sqlbrite.todo.model.users.UserManager;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
+import com.example.sqlbrite.todo.ui.SplashActivity;
 
+import javax.inject.Named;
 import javax.inject.Singleton;
 
 import dagger.Component;
-import io.reactivex.Observable;
+import okhttp3.OkHttpClient;
+import retrofit2.Retrofit;
 
 @Singleton
 @Component(modules = AppScopeModule.class)
@@ -33,5 +38,19 @@
 
     SchedulerProvider schedulerProvider();
 
-    Observable<UserManager> userManager();
+    Retrofit retrofit();
+
+    @Named("cached")
+    OkHttpClient okHttpClient();
+
+    @Named("non_cached")
+    OkHttpClient okHttpClientWithoutCache();
+
+    GitHubApiInterface gitHubApiInterface();
+
+    UserManager userManager();
+
+    LoginViewControler loginViewControler();
+
+    void inject(SplashActivity activity);
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeModule.java
index 010b6e4..c61a5e4 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeModule.java
@@ -18,8 +18,11 @@
 import android.app.Application;
 import android.content.Context;
 
+import com.example.sqlbrite.todo.controler.LoginViewControler;
 import com.example.sqlbrite.todo.di.model.AppScopeModelModule;
 import com.example.sqlbrite.todo.di.schedulers.SchedulerModule;
+import com.example.sqlbrite.todo.model.users.UserManager;
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 
 import javax.inject.Singleton;
 
@@ -33,21 +36,28 @@
         }
 )
 public final class AppScopeModule {
-    private final Application application;
+
+    private final Application mApplication;
 
     public AppScopeModule(Application application) {
-        this.application = application;
+        this.mApplication = application;
     }
 
     @Provides
     @Singleton
     Application provideApplication() {
-        return application;
+        return mApplication;
     }
 
     @Provides
     @Singleton
     public Context provideContext() {
-        return application;
+        return mApplication;
+    }
+
+    @Provides
+    @Singleton
+    public LoginViewControler provideLoginViewModel(UserManager userManager, SchedulerProvider schedulerProvider) {
+        return new LoginViewControler(userManager, schedulerProvider);
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/InjectHelper.java b/sample/src/main/java/com/example/sqlbrite/todo/di/InjectHelper.java
index 7231738..fea56f5 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/InjectHelper.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/InjectHelper.java
@@ -1,10 +1,18 @@
 package com.example.sqlbrite.todo.di;
 
 import android.app.Activity;
+import android.app.Application;
 import android.content.Context;
 import android.support.v4.app.Fragment;
 
-import com.example.sqlbrite.todo.TodoApp;
+import com.example.sqlbrite.todo.di.model.AppScopeModelModule;
+import com.example.sqlbrite.todo.di.model.UserScopeModelModule;
+import com.example.sqlbrite.todo.di.model.local.db.DbModule;
+import com.example.sqlbrite.todo.di.model.local.preferences.PreferencesModule;
+import com.example.sqlbrite.todo.di.model.remote.NetModule;
+import com.example.sqlbrite.todo.di.model.remote.TodoApiModule;
+import com.example.sqlbrite.todo.di.schedulers.SchedulerModule;
+import com.example.sqlbrite.todo.ui.BaseViewModelActivity;
 
 /**
  * @author Administrator
@@ -13,31 +21,54 @@
 
 public class InjectHelper {
 
-    public static FragmentScopeComponent createFragmentScopeComponent(Context context, Activity activity, Fragment fragment) {
-        context = context.getApplicationContext();
-        return DaggerFragmentScopeComponent.builder()
-                .activityScopeComponent(
-                        createActivityScopeComponent(context, activity)
-                )
-                .fragmentScopeModule(new FragmentScopeModule(fragment))
+    private static final InjectHelper INSTANCE = new InjectHelper();
+
+    public static InjectHelper instance() {
+        return INSTANCE;
+    }
+
+    private InjectHelper() {
+
+    }
+
+    private AppScopeComponent mAppScopeComponent;
+
+    public AppScopeComponent init(Application application) {
+        mAppScopeComponent = DaggerAppScopeComponent
+                .builder()
+                .appScopeModule(new AppScopeModule(application))
+                .netModule(new NetModule("https://www.github.com"))
+                .todoApiModule(new TodoApiModule())
                 .build();
+        return mAppScopeComponent;
     }
 
-    public static ActivityScopeComponent createActivityScopeComponent(Context context, Activity activity) {
-        context = context.getApplicationContext();
+    public AppScopeComponent getAppScopeComponent() {
+        return mAppScopeComponent;
+    }
+
+
+    public UserScopeComponent createUserScopeComponent(String userId) {
+        return DaggerUserScopeComponent.builder()
+                .appScopeComponent(getAppScopeComponent())
+                .dbModule(new DbModule(userId))
+                .preferencesModule(new PreferencesModule())
+                .build();
+    }
+
+    public ActivityScopeComponent createActivityScopeComponent(Activity activity) {
         return DaggerActivityScopeComponent.builder()
-                .userScopeComponent(createUserScopeComponent(context))
+                .userScopeComponent(getAppScopeComponent().userManager().getUserScopeComponent())
                 .activityScopeModule(new ActivityScopeModule(activity))
                 .build();
     }
 
-    public static UserScopeComponent createUserScopeComponent(Context context) {
-        context = context.getApplicationContext();
-        return DaggerUserScopeComponent.builder().appScopeComponent(createAppScopeComponent(context)).build();
-    }
 
-    public static AppScopeComponent createAppScopeComponent(Context context) {
-        context = context.getApplicationContext();
-        return TodoApp.getAppScopeComponent(context);
+    public FragmentScopeComponent createFragmentScopeComponent(Activity activity, Fragment fragment) {
+        ActivityScopeComponent activityScopeComponent = ((BaseViewModelActivity) activity).getActivityScopeComponent();
+        return DaggerFragmentScopeComponent.builder()
+                .activityScopeComponent(activityScopeComponent)
+                .fragmentScopeModule(new FragmentScopeModule(fragment))
+                .build();
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
index 5867043..98de2b8 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
@@ -2,6 +2,7 @@
 
 import android.arch.lifecycle.ViewModelProvider;
 
+import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 
 import dagger.Component;
@@ -12,5 +13,7 @@
 
     SchedulerProvider schedulerProvider();
 
+    GitHubApiInterface gitHubApiInterface();
+
     ViewModelProvider.Factory viewModelProviderFactory();
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeModule.java
index ef95432..af3bacb 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeModule.java
@@ -1,12 +1,12 @@
 package com.example.sqlbrite.todo.di;
 
-import com.example.sqlbrite.todo.di.controler.ViewModelModule;
+import com.example.sqlbrite.todo.di.controler.UserScopeViewModelModule;
 import com.example.sqlbrite.todo.di.model.UserScopeModelModule;
 
 import dagger.Module;
 
-@Module(includes = {UserScopeModelModule.class, ViewModelModule.class,})
-public final class UserScopeModule {
+@Module(includes = {UserScopeModelModule.class, UserScopeViewModelModule.class,})
+public abstract class UserScopeModule {
 
     public UserScopeModule() {
     }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/TodoViewModelFactory.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory.java
similarity index 90%
rename from sample/src/main/java/com/example/sqlbrite/todo/di/controler/TodoViewModelFactory.java
rename to sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory.java
index 952f93d..f8a6e35 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/TodoViewModelFactory.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelFactory.java
@@ -25,14 +25,13 @@
 
 import javax.inject.Inject;
 import javax.inject.Provider;
-import javax.inject.Singleton;
 
 @UserScope
-public class TodoViewModelFactory implements ViewModelProvider.Factory {
+public class UserScopeViewModelFactory implements ViewModelProvider.Factory {
     private final Map<Class<? extends ViewModel>, Provider<ViewModel>> creators;
 
     @Inject
-    public TodoViewModelFactory(Map<Class<? extends ViewModel>, Provider<ViewModel>> creators) {
+    public UserScopeViewModelFactory(Map<Class<? extends ViewModel>, Provider<ViewModel>> creators) {
         this.creators = creators;
     }
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ViewModelModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelModule.java
similarity index 51%
rename from sample/src/main/java/com/example/sqlbrite/todo/di/controler/ViewModelModule.java
rename to sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelModule.java
index 8d8c37c..81f2fc7 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/controler/ViewModelModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/controler/UserScopeViewModelModule.java
@@ -4,18 +4,25 @@
 import android.arch.lifecycle.ViewModelProvider;
 
 import com.example.sqlbrite.todo.controler.MainViewModel;
+import com.example.sqlbrite.todo.controler.SystemSettingViewModel;
 
 import dagger.Binds;
 import dagger.Module;
 import dagger.multibindings.IntoMap;
 
 @Module
-public abstract class ViewModelModule {
+public abstract class UserScopeViewModelModule {
+
     @Binds
     @IntoMap
     @ViewModelKey(MainViewModel.class)
     abstract ViewModel bindMainViewModel(MainViewModel viewModel);
 
     @Binds
-    abstract ViewModelProvider.Factory bindViewModelFactory(TodoViewModelFactory factory);
+    @IntoMap
+    @ViewModelKey(SystemSettingViewModel.class)
+    abstract ViewModel bindSystemSettingViewModel(SystemSettingViewModel viewModel);
+
+    @Binds
+    abstract ViewModelProvider.Factory bindViewModelFactory(UserScopeViewModelFactory factory);
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/AppScopeModelModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/AppScopeModelModule.java
index 3ae7488..b36e5ec 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/model/AppScopeModelModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/AppScopeModelModule.java
@@ -17,6 +17,8 @@
 
 import android.app.Application;
 
+import com.example.sqlbrite.todo.di.model.remote.NetModule;
+import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
 import com.example.sqlbrite.todo.model.users.UserManager;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 
@@ -26,18 +28,16 @@
 import dagger.Provides;
 import io.reactivex.Observable;
 
-@Module
+@Module(
+        includes = {
+                NetModule.class
+        }
+)
 public final class AppScopeModelModule {
 
     @Provides
     @Singleton
-    public UserManager provideUserManager(Application application, SchedulerProvider schedulerProvider) {
-        return new UserManager.UserManagerImpl(application, schedulerProvider);
-    }
-
-    @Provides
-    @Singleton
-    public Observable<UserManager> provideUserManagerObservable(UserManager userManager) {
-        return userManager.toObservable();
+    public UserManager provideUserManager(Application application, GitHubApiInterface gitHubApiInterface, SchedulerProvider schedulerProvider) {
+        return new UserManager.UserManagerImpl(application, gitHubApiInterface, schedulerProvider);
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/UserScopeModelModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/UserScopeModelModule.java
index f5b53f7..403b9d0 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/model/UserScopeModelModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/UserScopeModelModule.java
@@ -17,17 +17,14 @@
 
 import com.example.sqlbrite.todo.di.UserScope;
 import com.example.sqlbrite.todo.di.model.local.db.DbModule;
+import com.example.sqlbrite.todo.di.model.local.preferences.PreferencesModule;
 import com.example.sqlbrite.todo.model.MainDataSource;
 import com.example.sqlbrite.todo.model.MainRepository;
 import com.example.sqlbrite.todo.model.local.db.TodoItemDao;
 import com.example.sqlbrite.todo.model.local.db.TodoListDao;
-import com.example.sqlbrite.todo.di.model.local.preferences.PreferencesModule;
-import com.example.sqlbrite.todo.model.remote.NetModule;
 import com.example.sqlbrite.todo.ui.ListsItemDao;
 import com.squareup.sqlbrite3.BriteDatabase;
 
-import javax.inject.Singleton;
-
 import dagger.Module;
 import dagger.Provides;
 
@@ -35,7 +32,6 @@
         includes = {
                 DbModule.class,
                 PreferencesModule.class,
-                NetModule.class
         }
 )
 public final class UserScopeModelModule {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/db/DbModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/db/DbModule.java
index bbff2d2..9e16908 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/db/DbModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/db/DbModule.java
@@ -29,7 +29,7 @@
 import com.squareup.sqlbrite3.BriteDatabase;
 import com.squareup.sqlbrite3.SqlBrite;
 
-import javax.inject.Singleton;
+import javax.inject.Named;
 
 import dagger.Module;
 import dagger.Provides;
@@ -37,6 +37,20 @@
 
 @Module
 public final class DbModule {
+
+    private final String mDatabaseName;
+
+    public DbModule(String databaseName) {
+        mDatabaseName = databaseName;
+    }
+
+    @Provides
+    @UserScope
+    @Named("database_name")
+    String provideDatabaseName() {
+        return mDatabaseName;
+    }
+
     @Provides
     @UserScope
     SqlBrite provideSqlBrite() {
@@ -52,7 +66,7 @@ public void log(String message) {
 
     @Provides
     @UserScope
-    SupportSQLiteOpenHelper provideSupportSQLiteOpenHelper(Application application) {
+    SupportSQLiteOpenHelper provideSupportSQLiteOpenHelper(Application application, @Named("database_name") String databaseName) {
         // 1) android native sqlite, no cipher
         /*
         Configuration configuration = Configuration.builder(application)
@@ -100,7 +114,7 @@ SupportSQLiteOpenHelper provideSupportSQLiteOpenHelper(Application application)
 
         // 4) wcdb base on SQLCipher, has cipher
         Configuration configuration_wcdb_cipher = Configuration.builder(application)
-                .name("todo_wcdb_cipher.db")
+                .name("todo_wcdb_cipher_" + databaseName + ".db")
                 .callback(new DbCallback())
                 .build();
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/MyGsonTypeAdapterFactory.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/MyGsonTypeAdapterFactory.java
new file mode 100644
index 0000000..cc13d67
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/MyGsonTypeAdapterFactory.java
@@ -0,0 +1,17 @@
+package com.example.sqlbrite.todo.di.model.remote;
+
+import com.google.gson.TypeAdapterFactory;
+import com.ryanharter.auto.value.gson.GsonTypeAdapterFactory;
+
+/**
+ * @author lihanguang
+ * @date 2017/5/4 19:22:20
+ */
+
+@GsonTypeAdapterFactory
+abstract class MyGsonTypeAdapterFactory implements TypeAdapterFactory {
+
+    public static TypeAdapterFactory create() {
+        return new AutoValueGson_MyGsonTypeAdapterFactory();
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/NetModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/NetModule.java
index f0ea6c5..2479417 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/NetModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/NetModule.java
@@ -15,8 +15,96 @@
  */
 package com.example.sqlbrite.todo.di.model.remote;
 
+import android.app.Application;
+import android.content.Context;
+import android.content.SharedPreferences;
+
+import com.google.gson.FieldNamingPolicy;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.TypeAdapterFactory;
+import com.ryanharter.auto.value.gson.GenerateTypeAdapter;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
 import dagger.Module;
+import dagger.Provides;
+import okhttp3.Cache;
+import okhttp3.OkHttpClient;
+import retrofit2.Retrofit;
+import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;
+import retrofit2.converter.gson.GsonConverterFactory;
 
-@Module
+@Module(
+        includes = {
+                TodoApiModule.class
+        }
+)
 public final class NetModule {
+    private final static String TAG = "NetModule";
+
+    String mBaseUrl;
+
+    // Constructor needs one parameter to instantiate.
+    public NetModule(String baseUrl) {
+        this.mBaseUrl = baseUrl;
+    }
+
+    // Dagger will only look for methods annotated with @Provides
+    @Provides
+    @Singleton
+    // Application reference must come from AppScopeModule.class
+    SharedPreferences providesSharedPreferences(Application application) {
+        return application.getSharedPreferences(TAG, Context.MODE_PRIVATE);
+    }
+
+    @Provides
+    @Singleton
+    Cache provideOkHttpCache(Application application) {
+        int cacheSize = 10 * 1024 * 1024; // 10 MiB
+        Cache cache = new Cache(application.getCacheDir(), cacheSize);
+        return cache;
+    }
+
+    @Provides
+    @Singleton
+    TypeAdapterFactory provideTypeAdapterFactory() {
+        return MyGsonTypeAdapterFactory.create();
+    }
+
+    @Provides
+    @Singleton
+    Gson provideGson(TypeAdapterFactory typeAdapterFactory) {
+        GsonBuilder gsonBuilder = new GsonBuilder();
+        gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);
+        gsonBuilder.registerTypeAdapterFactory(typeAdapterFactory);
+        return gsonBuilder.create();
+    }
+
+    @Provides
+    @Singleton
+    @Named("cached")
+    OkHttpClient provideOkHttpClient(Cache cache) {
+        return new OkHttpClient.Builder().cache(cache).build();
+    }
+
+    @Provides
+    @Singleton
+    @Named("non_cached")
+    OkHttpClient provideOkHttpClientWithoutCache() {
+        return new OkHttpClient.Builder().build();
+    }
+
+    @Provides
+    @Singleton
+    Retrofit provideRetrofit(Gson gson, @Named("cached") OkHttpClient okHttpClient) {
+        Retrofit retrofit = new Retrofit.Builder()
+                .addConverterFactory(GsonConverterFactory.create(gson))
+                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
+                .baseUrl(mBaseUrl)
+                .client(okHttpClient)
+                .build();
+        return retrofit;
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/TodoApiModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/TodoApiModule.java
new file mode 100644
index 0000000..73f690c
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/remote/TodoApiModule.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.example.sqlbrite.todo.di.model.remote;
+
+import com.example.sqlbrite.todo.model.users.User;
+
+import java.util.List;
+import java.util.Observable;
+
+import javax.inject.Singleton;
+
+import dagger.Module;
+import dagger.Provides;
+import io.reactivex.Completable;
+import io.reactivex.Single;
+import retrofit2.Call;
+import retrofit2.Retrofit;
+import retrofit2.http.GET;
+import retrofit2.http.Path;
+
+@Module
+public final class TodoApiModule {
+
+    public interface GitHubApiInterface {
+        @GET("/login/{userId}")
+        Single<User> login(@Path("userId") String userId);
+
+        @GET("/logout/{userId}")
+        Completable logout(@Path("userId") String userId);
+    }
+
+    @Provides
+    @Singleton // needs to be consistent with the component scope
+    public GitHubApiInterface providesGitHubInterface(Retrofit retrofit) {
+        return retrofit.create(GitHubApiInterface.class);
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/remote/NetModule.java b/sample/src/main/java/com/example/sqlbrite/todo/model/remote/NetModule.java
deleted file mode 100644
index 22e661d..0000000
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/remote/NetModule.java
+++ /dev/null
@@ -1,22 +0,0 @@
-/*
- * Copyright (C) 2015 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.example.sqlbrite.todo.model.remote;
-
-import dagger.Module;
-
-@Module
-public final class NetModule {
-}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/users/User.java b/sample/src/main/java/com/example/sqlbrite/todo/model/users/User.java
new file mode 100644
index 0000000..5255c31
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/users/User.java
@@ -0,0 +1,29 @@
+package com.example.sqlbrite.todo.model.users;
+
+import com.google.auto.value.AutoValue;
+import com.google.gson.Gson;
+import com.google.gson.TypeAdapter;
+import com.google.gson.annotations.SerializedName;
+
+@AutoValue
+public abstract class User {
+
+    @SerializedName("id")
+    public abstract String id();
+
+    @SerializedName("name")
+    public abstract String name();
+
+    public static User create(String id, String name) {
+        return new AutoValue_User(id, name);
+    }
+
+    // The public static method returning a TypeAdapter<Foo> is what
+    // tells auto-value-gson to create a TypeAdapter for Foo.
+    public static TypeAdapter<User> typeAdapter(Gson gson) {
+        return new AutoValue_User.GsonTypeAdapter(gson)
+                .setDefaultId("id_NULL")
+                .setDefaultName("name_NULL");
+    }
+
+}
\ No newline at end of file
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserManager.java b/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserManager.java
index afbd20b..7d39f08 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserManager.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserManager.java
@@ -1,15 +1,19 @@
 package com.example.sqlbrite.todo.model.users;
 
 import android.app.Application;
-import android.support.annotation.NonNull;
 
+import com.example.sqlbrite.todo.di.InjectHelper;
+import com.example.sqlbrite.todo.di.UserScopeComponent;
+import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 
 import javax.inject.Inject;
 
-import io.reactivex.Observable;
-import io.reactivex.ObservableEmitter;
-import io.reactivex.ObservableOnSubscribe;
+import io.reactivex.Completable;
+import io.reactivex.Single;
+import io.reactivex.functions.Action;
+import io.reactivex.functions.Consumer;
+import io.reactivex.functions.Function;
 
 /**
  * @author Administrator
@@ -18,59 +22,70 @@
 
 public interface UserManager {
 
-    UserSession login(String userId, String password);
+    Single<UserSession> startSessionForUser(String username);
 
-    void logout();
+    UserScopeComponent getUserScopeComponent();
 
-    UserSession curSession();
-
-    Observable<UserManager> toObservable();
+    Completable closeUserSession(UserSession userSession);
 
     class UserManagerImpl implements UserManager {
 
+        private final GitHubApiInterface mGitHubApiInterface;
+
         private final SchedulerProvider mSchedulerProvider;
 
-        private UserSession mUserSession;
+        private UserScopeComponent mUserScopeComponent;
 
         @Inject
-        public UserManagerImpl(Application application, SchedulerProvider schedulerProvider) {
+        public UserManagerImpl(Application application, GitHubApiInterface gitHubApiInterface, SchedulerProvider schedulerProvider) {
+            mGitHubApiInterface = gitHubApiInterface;
             mSchedulerProvider = schedulerProvider;
-
-            mUserSession = UserSession.FAIL;
         }
 
-        @NonNull
         @Override
-        public UserSession login(String userId, String password) {
-            if (UserSession.FAIL.equals(mUserSession)) {
-                // TODO login here
-                mUserSession = UserSession.login(userId, password, this);
-            }
-            return mUserSession;
+        public Single<UserSession> startSessionForUser(String userId) {
+            return mGitHubApiInterface.login(userId)
+                    .subscribeOn(mSchedulerProvider.net())
+                    .onErrorReturnItem(User.create(userId, "伪造的人"))
+                    .observeOn(mSchedulerProvider.ui())
+                    .flatMap(new Function<User, Single<UserSession>>() {
+                        @Override
+                        public Single<UserSession> apply(User user) throws Exception {
+                            return Single.just(UserSession.create(user, UserManagerImpl.this));
+                        }
+                    })
+                    .doOnSuccess(new Consumer<UserSession>() {
+                        @Override
+                        public void accept(UserSession userSession) throws Exception {
+                            onStartUserSession(userSession);
+                        }
+                    });
         }
 
         @Override
-        public void logout() {
-            mUserSession = UserSession.FAIL;
+        public UserScopeComponent getUserScopeComponent() {
+            return mUserScopeComponent;
         }
 
-        @NonNull
         @Override
-        public UserSession curSession() {
-            return mUserSession;
+        public Completable closeUserSession(final UserSession userSession) {
+            return mGitHubApiInterface.logout(userSession.user().id())
+                    .subscribeOn(mSchedulerProvider.net())
+                    .observeOn(mSchedulerProvider.ui())
+                    .doOnComplete(new Action() {
+                        @Override
+                        public void run() throws Exception {
+                            oncloseUserSession(userSession);
+                        }
+                    });
         }
 
-        @Override
-        public Observable<UserManager> toObservable() {
-            return Observable.create(new ObservableOnSubscribe<UserManager>() {
-                @Override
-                public void subscribe(ObservableEmitter<UserManager> e) throws Exception {
-                    e.onNext(UserManagerImpl.this);
-                    if (!e.isDisposed()) {
-                        e.onComplete();
-                    }
-                }
-            });
+        private void onStartUserSession(UserSession userSession) {
+            mUserScopeComponent = InjectHelper.instance().createUserScopeComponent(userSession.user().id());
+        }
+
+        public void  oncloseUserSession(UserSession userSession) {
+            mUserScopeComponent = null;
         }
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserSession.java b/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserSession.java
index 38ae60f..1b305af 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserSession.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserSession.java
@@ -1,7 +1,11 @@
 package com.example.sqlbrite.todo.model.users;
 
+import com.example.sqlbrite.todo.di.UserScopeComponent;
 import com.google.auto.value.AutoValue;
 
+import io.reactivex.Completable;
+import io.reactivex.Single;
+
 /**
  * @author Administrator
  * @date 2018/3/14 18:42
@@ -10,55 +14,12 @@
 @AutoValue
 public abstract class UserSession {
 
-    public static final UserSession FAIL = new NullUserSession();
-
-    private boolean mIsAlive = false;
-
-    public abstract String name();
-
-    public abstract String token();
+    public abstract User user();
 
     abstract UserManager userManager();
 
-    static UserSession login(String name, String token, UserManager userManager) {
-        UserSession s =  new AutoValue_UserSession(name, token, userManager);
-        s.mIsAlive = true;
+    public static UserSession create(User user, UserManager userManager) {
+        UserSession s = new AutoValue_UserSession(user, userManager);
         return s;
     }
-
-    public void logout() {
-        UserManager mgr = userManager();
-        if (mgr != null) {
-            mgr.logout();
-        }
-
-        mIsAlive = false;
-    }
-
-    public boolean isAlive() {
-        return mIsAlive;
-    }
-
-    private static class NullUserSession extends UserSession {
-
-        @Override
-        public String name() {
-            return "";
-        }
-
-        @Override
-        public String token() {
-            return "";
-        }
-
-        @Override
-        UserManager userManager() {
-            return null;
-        }
-
-        @Override
-        public boolean equals(Object obj) {
-            return super.equals(obj) || obj == null;
-        }
-    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerProvider.java b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerProvider.java
index c8cd086..bb9d25e 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerProvider.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerProvider.java
@@ -32,4 +32,7 @@
 
     @NonNull
     Scheduler database();
+
+    @NonNull
+    Scheduler net();
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/TodoSchedulerProvider.java b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/TodoSchedulerProvider.java
index 27e9b86..1d1e9a7 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/TodoSchedulerProvider.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/TodoSchedulerProvider.java
@@ -59,4 +59,10 @@ public Scheduler viewModel() {
     public Scheduler database() {
         return Schedulers.io();
     }
+
+    @Override
+    @NonNull
+    public Scheduler net() {
+        return Schedulers.io();
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java
index d5eca7d..e7f7963 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java
@@ -5,9 +5,7 @@
 import android.arch.lifecycle.ViewModelProviders;
 import android.os.Bundle;
 
-import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.di.ActivityScopeComponent;
-import com.example.sqlbrite.todo.di.DaggerActivityScopeComponent;
 import com.example.sqlbrite.todo.di.InjectHelper;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.gg.rxbase.ui.RxBaseActivity;
@@ -23,6 +21,8 @@
 
 public abstract class BaseViewModelActivity<VIEWMODEL extends ViewModel> extends RxBaseActivity {
 
+    private ActivityScopeComponent mActivityScopeComponent;
+
     @Inject
     SchedulerProvider mSchedulerProvider;
 
@@ -34,16 +34,19 @@
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        toInject(
-                InjectHelper.createActivityScopeComponent(this, this)
-        );
+        mActivityScopeComponent = InjectHelper.instance().createActivityScopeComponent(this);
+        injectOnCreate(mActivityScopeComponent);
 
         ParameterizedType type = (ParameterizedType) this.getClass().getGenericSuperclass();
         Class viewModelClazz = (Class) type.getActualTypeArguments()[0];
         mViewModel = (VIEWMODEL) ViewModelProviders.of(this, mViewModelFactory).get(viewModelClazz);
     }
 
-    protected abstract void toInject(ActivityScopeComponent component);
+    public ActivityScopeComponent getActivityScopeComponent() {
+        return mActivityScopeComponent;
+    }
+
+    protected abstract void injectOnCreate(ActivityScopeComponent component);
 
     protected VIEWMODEL getViewModel() {
         return mViewModel;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
index c96ef89..f28d782 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelFragment.java
@@ -6,13 +6,8 @@
 import android.content.Context;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
-import android.support.v4.app.Fragment;
 
-import com.example.sqlbrite.todo.TodoApp;
-import com.example.sqlbrite.todo.di.DaggerActivityScopeComponent;
-import com.example.sqlbrite.todo.di.DaggerFragmentScopeComponent;
 import com.example.sqlbrite.todo.di.FragmentScopeComponent;
-import com.example.sqlbrite.todo.di.FragmentScopeModule;
 import com.example.sqlbrite.todo.di.InjectHelper;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.gg.rxbase.ui.RxBaseFragment;
@@ -28,6 +23,8 @@
 
 public abstract class BaseViewModelFragment<VIEWMODEL extends ViewModel> extends RxBaseFragment {
 
+    private FragmentScopeComponent mFragmentScopeComponent;
+
     @Inject
     SchedulerProvider mSchedulerProvider;
 
@@ -39,12 +36,15 @@
     @Override
     public void onAttach(Context context) {
         super.onAttach(context);
-        toInject(
-                InjectHelper.createFragmentScopeComponent(context, getActivity(), this)
-        );
+        mFragmentScopeComponent = InjectHelper.instance().createFragmentScopeComponent(getActivity(), this);
+        injectOnAttach(mFragmentScopeComponent);
+    }
+
+    protected FragmentScopeComponent getFragmentScopeComponent() {
+        return mFragmentScopeComponent;
     }
 
-    protected abstract void toInject(FragmentScopeComponent component);
+    protected abstract void injectOnAttach(FragmentScopeComponent component);
 
     @Override
     public void onActivityCreated(@Nullable Bundle savedInstanceState) {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
index 179b3fd..34ed182 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
@@ -96,7 +96,7 @@ public void onAttach(Context context) {
     }
 
     @Override
-    protected void toInject(FragmentScopeComponent component) {
+    protected void injectOnAttach(FragmentScopeComponent component) {
         component.inject(this);
     }
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
index 58c3221..5437f5a 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
@@ -17,6 +17,7 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.content.Intent;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
 import android.support.v4.view.MenuItemCompat;
@@ -83,7 +84,7 @@ public void onAttach(Context context) {
     }
 
     @Override
-    protected void toInject(FragmentScopeComponent component) {
+    protected void injectOnAttach(FragmentScopeComponent component) {
         component.inject(this);
     }
 
@@ -112,6 +113,18 @@ public boolean onMenuItemClick(MenuItem item) {
                 });
 
         MenuItemCompat.setShowAsAction(item, SHOW_AS_ACTION_IF_ROOM | SHOW_AS_ACTION_WITH_TEXT);
+
+        item = menu.add(R.string.setting)
+                .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
+                    @Override
+                    public boolean onMenuItemClick(MenuItem item) {
+                        Intent intent = new Intent(getContext(), SystemSettingActivity.class);
+                        startActivity(intent);
+                        return true;
+                    }
+                });
+
+        MenuItemCompat.setShowAsAction(item, SHOW_AS_ACTION_IF_ROOM | SHOW_AS_ACTION_WITH_TEXT);
     }
 
     private void exportDB() {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
index db25543..cecf13f 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
@@ -16,56 +16,25 @@
 package com.example.sqlbrite.todo.ui;
 
 import android.os.Bundle;
-import android.widget.Toast;
 
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.controler.MainViewModel;
 import com.example.sqlbrite.todo.di.ActivityScopeComponent;
-import com.example.sqlbrite.todo.model.users.UserSession;
-import com.trello.rxlifecycle2.android.ActivityEvent;
-
-import io.reactivex.Observable;
-import io.reactivex.ObservableSource;
-import io.reactivex.functions.Consumer;
-import io.reactivex.functions.Function;
 
 public final class MainActivity extends BaseViewModelActivity<MainViewModel>
         implements ListsFragment.Listener, ItemsFragment.Listener {
 
+    private static final String TAG = "MainActivity";
+
     @Override
     protected void onCreate(final Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        getViewModel()
-                .login("id_user_lucy", "pwd_1234567")
-                .compose(this.<UserSession>bindUntilEvent(ActivityEvent.DESTROY))
-                .flatMap(new Function<UserSession, Observable<UserSession>>() {
-                    @Override
-                    public Observable<UserSession> apply(UserSession userSession) throws Exception {
-                        return UserSession.FAIL.equals(userSession) ?
-                                Observable.<UserSession>error(new AssertionError())
-                                : Observable.just(userSession);
-                    }
-                })
-                .observeOn(getSchedulerProvider().ui())
-                .subscribe(new Consumer<UserSession>() {
-                               @Override
-                               public void accept(UserSession userSession) throws Exception {
-                                   Toast.makeText(MainActivity.this, "登陆成功!\n进入界面!", Toast.LENGTH_SHORT).show();
-
-                                   if (savedInstanceState == null) {
-                                       getSupportFragmentManager().beginTransaction()
-                                               .add(android.R.id.content, ListsFragment.newInstance())
-                                               .commit();
-                                   }
-                               }
-                           },
-                        new Consumer<Throwable>() {
-                            @Override
-                            public void accept(Throwable throwable) throws Exception {
-                                Toast.makeText(MainActivity.this, "登陆失败!", Toast.LENGTH_SHORT).show();
-                            }
-                        });
+        if (savedInstanceState == null) {
+            getSupportFragmentManager().beginTransaction()
+                    .add(android.R.id.content, ListsFragment.newInstance())
+                    .commit();
+        }
     }
 
     @Override
@@ -77,12 +46,11 @@ protected void onResume() {
     protected void onPause() {
         super.onPause();
         if (isFinishing()) {
-            getViewModel().logout();
         }
     }
 
     @Override
-    protected void toInject(ActivityScopeComponent component) {
+    protected void injectOnCreate(ActivityScopeComponent component) {
         component.inject(this);
     }
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
index 2f9417f..7a75850 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
@@ -75,7 +75,7 @@ private long getListId() {
     @Override
     public void onAttach(Activity context) {
         super.onAttach(context);
-        InjectHelper.createFragmentScopeComponent(context, getActivity(), this).inject(this);
+        InjectHelper.instance().createFragmentScopeComponent(getActivity(), this).inject(this);
     }
 
     @NonNull
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
index c2a7888..3f963ad 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
@@ -63,7 +63,7 @@ public static NewListFragment newInstance() {
     @Override
     public void onAttach(Context context) {
         super.onAttach(context);
-        InjectHelper.createFragmentScopeComponent(context, getActivity(), this).inject(this);
+        InjectHelper.instance().createFragmentScopeComponent(getActivity(), this).inject(this);
     }
 
     @NonNull
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/SplashActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/SplashActivity.java
new file mode 100644
index 0000000..a0d150a
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/SplashActivity.java
@@ -0,0 +1,69 @@
+package com.example.sqlbrite.todo.ui;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.util.Log;
+import android.widget.Toast;
+
+import com.example.sqlbrite.todo.R;
+import com.example.sqlbrite.todo.controler.LoginViewControler;
+import com.example.sqlbrite.todo.di.AppScopeComponent;
+import com.example.sqlbrite.todo.di.InjectHelper;
+import com.example.sqlbrite.todo.model.users.UserSession;
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
+import com.gg.rxbase.ui.RxBaseActivity;
+
+import javax.inject.Inject;
+
+import io.reactivex.functions.Action;
+import io.reactivex.functions.Consumer;
+
+public class SplashActivity extends RxBaseActivity {
+
+    private static final String TAG = "SplashActivity";
+
+    @Inject
+    LoginViewControler mViewModel;
+    @Inject SchedulerProvider mSchedulerProvider;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_splash);
+
+        AppScopeComponent appScopeComponent = InjectHelper.instance().getAppScopeComponent();
+        appScopeComponent.inject(this);
+
+        mViewModel
+                .login("user_id_lucy", "pwd_1234567")
+                .compose(this.<UserSession>bindToLifecycle())
+                .observeOn(mSchedulerProvider.ui())
+                .doFinally(new Action() {
+                    @Override
+                    public void run() throws Exception {
+                        finish();
+                    }
+                })
+                .subscribe(new Consumer<UserSession>() {
+                               @Override
+                               public void accept(UserSession userSession) throws Exception {
+                                   Toast.makeText(SplashActivity.this, "登陆成功!\n进入界面!", Toast.LENGTH_SHORT).show();
+
+                                   NaviToMain();
+                               }
+                           },
+                        new Consumer<Throwable>() {
+                            @Override
+                            public void accept(Throwable e) throws Exception {
+                                Toast.makeText(SplashActivity.this, "登陆失败!", Toast.LENGTH_SHORT).show();
+
+                                Log.e(TAG, "登陆失败!", e);
+                            }
+                        });
+
+    }
+
+    private void NaviToMain() {
+        startActivity(new Intent(this, MainActivity.class));
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/SystemSettingActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/SystemSettingActivity.java
new file mode 100644
index 0000000..bf4e998
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/SystemSettingActivity.java
@@ -0,0 +1,37 @@
+package com.example.sqlbrite.todo.ui;
+
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+
+import com.example.sqlbrite.todo.R;
+import com.example.sqlbrite.todo.controler.SystemSettingViewModel;
+import com.example.sqlbrite.todo.di.ActivityScopeComponent;
+
+import butterknife.BindView;
+import butterknife.ButterKnife;
+import butterknife.OnClick;
+
+public class SystemSettingActivity extends BaseViewModelActivity<SystemSettingViewModel> {
+
+    @BindView(R.id.btn_logout)
+    Button mBtnLogout;
+
+    @Override
+    protected void injectOnCreate(ActivityScopeComponent component) {
+        component.inject(this);
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_system_setting);
+
+        ButterKnife.bind(this);
+    }
+
+    @OnClick(R.id.btn_logout)
+    void listClicked(View v) {
+        getViewModel().logout();
+    }
+}
diff --git a/sample/src/main/res/layout/activity_splash.xml b/sample/src/main/res/layout/activity_splash.xml
new file mode 100644
index 0000000..3532170
--- /dev/null
+++ b/sample/src/main/res/layout/activity_splash.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context="com.example.sqlbrite.todo.ui.SplashActivity">
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:text="@string/logining"/>
+
+</FrameLayout>
diff --git a/sample/src/main/res/layout/activity_system_setting.xml b/sample/src/main/res/layout/activity_system_setting.xml
new file mode 100644
index 0000000..683e032
--- /dev/null
+++ b/sample/src/main/res/layout/activity_system_setting.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context="com.example.sqlbrite.todo.ui.SystemSettingActivity">
+
+    <Button
+        android:id="@+id/btn_logout"
+        android:layout_width="100dp"
+        android:layout_height="50dp"
+        android:layout_gravity="center_horizontal|bottom"
+        android:text="@string/logout"/>
+
+</FrameLayout>
diff --git a/sample/src/main/res/values/strings.xml b/sample/src/main/res/values/strings.xml
index 8538b40..cdbd7c2 100644
--- a/sample/src/main/res/values/strings.xml
+++ b/sample/src/main/res/values/strings.xml
@@ -1,12 +1,16 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
-  <string name="app_name">SqlBrite To-Do</string>
+    <string name="app_name">SqlBrite To-Do</string>
 
-  <string name="create">Create</string>
-  <string name="cancel">Cancel</string>
-  <string name="new_list">New List</string>
-  <string name="new_list_hint">Name</string>
-  <string name="new_item">New Item</string>
-  <string name="new_item_hint">Description</string>
-  <string name="export_db">Export DB</string>
+    <string name="create">Create</string>
+    <string name="cancel">Cancel</string>
+    <string name="new_list">New List</string>
+    <string name="new_list_hint">Name</string>
+    <string name="new_item">New Item</string>
+    <string name="new_item_hint">Description</string>
+    <string name="export_db">Export DB</string>
+    <string name="setting">Setting</string>
+    <string name="logining">logining...</string>
+    <string name="logout">logout</string>
+    <string name="login">login</string>
 </resources>
