diff --git a/build.gradle b/build.gradle
index 67a4745..f7a630a 100644
--- a/build.gradle
+++ b/build.gradle
@@ -34,11 +34,11 @@ allprojects {
     group = GROUP
     version = VERSION_NAME
 
-    gradle.projectsEvaluated {
+    /*gradle.projectsEvaluated {
         tasks.withType(JavaCompile) {
             options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
         }
-    }
+    }*/
 }
 
 ext {
@@ -85,6 +85,8 @@ ext {
     rxJava = 'io.reactivex.rxjava2:rxjava:2.1.3'
     rxAndroid = 'io.reactivex.rxjava2:rxandroid:2.0.1'
     rxBinding = 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
+    rxPreferences = 'com.f2prateek.rx.preferences2:rx-preferences:+'
+
     junit = 'junit:junit:4.12'
     truth = 'com.google.truth:truth:0.36'
     retrofit_runtime = 'com.squareup.retrofit2:retrofit:2.3.0'
diff --git a/sample/build.gradle b/sample/build.gradle
index e405e4a..b83e1cb 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -46,6 +46,7 @@ dependencies {
     implementation rootProject.ext.okhttp_logging_interceptor
 
     implementation rootProject.ext.rxbase
+    implementation rootProject.ext.rxPreferences
 }
 
 android {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java b/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
index 7c2963a..ba04ad6 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/TodoApp.java
@@ -16,17 +16,25 @@
 package com.example.sqlbrite.todo;
 
 import android.app.Application;
-import android.support.multidex.MultiDexApplication;
+import android.content.Context;
+import android.support.multidex.MultiDex;
 
 import com.example.sqlbrite.todo.di.AppScopeComponent;
 import com.example.sqlbrite.todo.di.InjectHelper;
 
 import timber.log.Timber;
 
-public final class TodoApp extends MultiDexApplication {
+public final class TodoApp extends Application {
 
     private AppScopeComponent mAppScopeComponent;
 
+    @Override
+    protected void attachBaseContext(Context base) {
+        super.attachBaseContext(base);
+
+        MultiDex.install(base);
+    }
+
     @Override
     public void onCreate() {
         super.onCreate();
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/LoginViewControler.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/LoginViewControler.java
index 8d2ba3c..714dce3 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/controler/LoginViewControler.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/LoginViewControler.java
@@ -3,14 +3,21 @@
 import com.example.sqlbrite.todo.model.users.UserManager;
 import com.example.sqlbrite.todo.model.users.UserSession;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
-import com.gg.rxbase.controller.RxBaseViewModel;
+
+import java.util.concurrent.Callable;
 
 import javax.inject.Inject;
 
 import io.reactivex.Completable;
+import io.reactivex.CompletableSource;
+import io.reactivex.Observable;
+import io.reactivex.ObservableEmitter;
+import io.reactivex.ObservableOnSubscribe;
 import io.reactivex.Single;
+import io.reactivex.SingleSource;
 import io.reactivex.functions.Action;
 import io.reactivex.functions.Consumer;
+import io.reactivex.functions.Function;
 
 /**
  * @author Guang1234567
@@ -32,8 +39,19 @@ public LoginViewControler(UserManager userManager,
     }
 
     public Single<UserSession> login(final String userId, final String password) {
-        return mUserManager.startSessionForUser(userId)
+        if (mUserSession != null) {
+            throw new AssertionError("Must logout firstly!");
+        }
+
+        return mUserManager.createSessionForUser(userId)
+                .subscribeOn(mSchedulerProvider.viewModel())
                 .observeOn(mSchedulerProvider.viewModel())
+                .flatMap(new Function<UserSession, SingleSource<UserSession>>() {
+                    @Override
+                    public SingleSource<UserSession> apply(UserSession userSession) throws Exception {
+                        return userSession.login(password);
+                    }
+                })
                 .doOnSuccess(new Consumer<UserSession>() {
                     @Override
                     public void accept(UserSession userSession) throws Exception {
@@ -42,13 +60,39 @@ public void accept(UserSession userSession) throws Exception {
                 });
     }
 
-    public boolean isUserSessionAlive() {
-        return mUserSession != null;
+    public Observable<UserSession> currentAliveUserSession() {
+        return Observable
+                .create(new ObservableOnSubscribe<UserSession>() {
+                    @Override
+                    public void subscribe(ObservableEmitter<UserSession> e) throws Exception {
+                        if (mUserSession != null && mUserSession.isAlive()) {
+                            e.onNext(mUserSession);
+                        }
+                    }
+                })
+                .subscribeOn(mSchedulerProvider.viewModel())
+                .observeOn(mSchedulerProvider.viewModel());
     }
 
     public Completable logout() {
-        return mUserManager.closeUserSession(mUserSession)
+        if (mUserSession == null) {
+            throw new AssertionError("Must login firstly!");
+        }
+        return Single
+                .fromCallable(new Callable<UserSession>() {
+                    @Override
+                    public UserSession call() throws Exception {
+                        return mUserSession;
+                    }
+                })
+                .subscribeOn(mSchedulerProvider.viewModel())
                 .observeOn(mSchedulerProvider.viewModel())
+                .flatMapCompletable(new Function<UserSession, CompletableSource>() {
+                    @Override
+                    public CompletableSource apply(UserSession userSession) throws Exception {
+                        return userSession.logout();
+                    }
+                })
                 .doOnComplete(new Action() {
                     @Override
                     public void run() throws Exception {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
index e235c5e..38d917d 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
@@ -2,6 +2,7 @@
 
 import com.example.sqlbrite.todo.model.MainDataSource;
 import com.example.sqlbrite.todo.model.local.db.TodoItem;
+import com.example.sqlbrite.todo.model.users.UserSession;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.example.sqlbrite.todo.ui.ListsItem;
 import com.gg.rxbase.controller.RxBaseViewModel;
@@ -22,20 +23,24 @@
 
 public class MainViewModel extends RxBaseViewModel {
 
-    private final SchedulerProvider mSchedulerProvider;
     private final MainDataSource mDataSource;
+    private final LoginViewControler mLoginViewControler;
+    private final SchedulerProvider mSchedulerProvider;
+
     private Date mLastCreateTime;
 
     @Inject
     public MainViewModel(MainDataSource dataSource,
+                         LoginViewControler loginViewControler,
                          SchedulerProvider schedulerProvider) {
         mDataSource = dataSource;
+        mLoginViewControler = loginViewControler;
         mSchedulerProvider = schedulerProvider;
         mLastCreateTime = new Date();
     }
 
-    public Date getLastCreateTime() {
-        return mLastCreateTime;
+    public Observable<UserSession> currentAliveUserSession() {
+        return mLoginViewControler.currentAliveUserSession();
     }
 
     public Observable<List<ListsItem>> createQueryListsItems() {
@@ -73,4 +78,8 @@ public long createNewOneTodoItem(long listId, String description) {
     public File exportDecryption() throws Exception {
         return mDataSource.exportDecryption();
     }
+
+    public Date getLastCreateTime() {
+        return mLastCreateTime;
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java
index 59476d5..a63690f 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java
@@ -3,7 +3,10 @@
 import android.app.Activity;
 import android.arch.lifecycle.ViewModelProvider;
 
+import com.example.sqlbrite.todo.controler.LoginViewControler;
 import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
+import com.example.sqlbrite.todo.model.users.LoginManager;
+import com.example.sqlbrite.todo.model.users.UserManager;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.example.sqlbrite.todo.ui.MainActivity;
 import com.example.sqlbrite.todo.ui.SystemSettingActivity;
@@ -27,6 +30,12 @@
 
     ViewModelProvider.Factory viewModelProviderFactory();
 
+    UserManager userManager();
+
+    LoginManager loginManager();
+
+    LoginViewControler loginViewControler();
+
     void inject(MainActivity activity);
 
     void inject(SystemSettingActivity activity);
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
index 3454672..09829cf 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
@@ -16,9 +16,11 @@
 package com.example.sqlbrite.todo.di;
 
 import android.app.Application;
+import android.arch.lifecycle.ViewModelProvider;
 
 import com.example.sqlbrite.todo.controler.LoginViewControler;
 import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
+import com.example.sqlbrite.todo.model.users.LoginManager;
 import com.example.sqlbrite.todo.model.users.UserManager;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 import com.example.sqlbrite.todo.ui.SplashActivity;
@@ -38,18 +40,20 @@
 
     SchedulerProvider schedulerProvider();
 
-    Retrofit retrofit();
+    /*Retrofit retrofit();
 
     @Named("cached")
     OkHttpClient okHttpClient();
 
     @Named("non_cached")
-    OkHttpClient okHttpClientWithoutCache();
+    OkHttpClient okHttpClientWithoutCache();*/
 
     GitHubApiInterface gitHubApiInterface();
 
     UserManager userManager();
 
+    LoginManager loginManager();
+
     LoginViewControler loginViewControler();
 
     void inject(SplashActivity activity);
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
index 98de2b8..7fdbd11 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
@@ -2,7 +2,10 @@
 
 import android.arch.lifecycle.ViewModelProvider;
 
+import com.example.sqlbrite.todo.controler.LoginViewControler;
 import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
+import com.example.sqlbrite.todo.model.users.LoginManager;
+import com.example.sqlbrite.todo.model.users.UserManager;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 
 import dagger.Component;
@@ -13,7 +16,13 @@
 
     SchedulerProvider schedulerProvider();
 
+    ViewModelProvider.Factory viewModelProviderFactory();
+
     GitHubApiInterface gitHubApiInterface();
 
-    ViewModelProvider.Factory viewModelProviderFactory();
+    UserManager userManager();
+
+    LoginManager loginManager();
+
+    LoginViewControler loginViewControler();
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/AppScopeModelModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/AppScopeModelModule.java
index b36e5ec..b75ff6c 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/model/AppScopeModelModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/AppScopeModelModule.java
@@ -15,10 +15,9 @@
  */
 package com.example.sqlbrite.todo.di.model;
 
-import android.app.Application;
-
 import com.example.sqlbrite.todo.di.model.remote.NetModule;
 import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
+import com.example.sqlbrite.todo.model.users.LoginManager;
 import com.example.sqlbrite.todo.model.users.UserManager;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 
@@ -26,7 +25,6 @@
 
 import dagger.Module;
 import dagger.Provides;
-import io.reactivex.Observable;
 
 @Module(
         includes = {
@@ -37,7 +35,13 @@
 
     @Provides
     @Singleton
-    public UserManager provideUserManager(Application application, GitHubApiInterface gitHubApiInterface, SchedulerProvider schedulerProvider) {
-        return new UserManager.UserManagerImpl(application, gitHubApiInterface, schedulerProvider);
+    public LoginManager provideLoginManager(GitHubApiInterface gitHubApiInterface, SchedulerProvider schedulerProvider) {
+        return new LoginManager.LoginManagerImpl(gitHubApiInterface, schedulerProvider);
+    }
+
+    @Provides
+    @Singleton
+    public UserManager provideUserManager(LoginManager loginManager, SchedulerProvider schedulerProvider) {
+        return new UserManager.UserManagerImpl(loginManager, schedulerProvider);
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/db/DbModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/db/DbModule.java
index 9e16908..8bea246 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/db/DbModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/db/DbModule.java
@@ -125,7 +125,7 @@ SupportSQLiteOpenHelper provideSupportSQLiteOpenHelper(Application application,
     @Provides
     @UserScope
     BriteDatabase provideDatabase(SqlBrite sqlBrite, SupportSQLiteOpenHelper helper, SchedulerProvider schedulerProvider) {
-        BriteDatabase briteDatabase = sqlBrite.wrapDatabaseHelper(helper, schedulerProvider.database());
+        BriteDatabase briteDatabase = sqlBrite.wrapDatabaseHelper(helper, schedulerProvider.io());
         briteDatabase.setLoggingEnabled(true);
         return briteDatabase;
     }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/users/LoginManager.java b/sample/src/main/java/com/example/sqlbrite/todo/model/users/LoginManager.java
new file mode 100644
index 0000000..eac0cc5
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/users/LoginManager.java
@@ -0,0 +1,54 @@
+package com.example.sqlbrite.todo.model.users;
+
+import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
+
+import java.util.Date;
+
+import javax.inject.Inject;
+
+import io.reactivex.Completable;
+import io.reactivex.Single;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/14 12:31
+ */
+
+public interface LoginManager {
+
+    Single<User> login(String userId, String password);
+
+    Completable logout(String userId);
+
+    class LoginManagerImpl implements LoginManager {
+
+        private final GitHubApiInterface mGitHubApiInterface;
+        private final SchedulerProvider mSchedulerProvider;
+
+        @Inject
+        public LoginManagerImpl(GitHubApiInterface gitHubApiInterface, SchedulerProvider schedulerProvider) {
+            mGitHubApiInterface = gitHubApiInterface;
+            mSchedulerProvider = schedulerProvider;
+        }
+
+        @Override
+        public Single<User> login(String userId, String password) {
+            return mGitHubApiInterface.login(userId)
+                    .subscribeOn(mSchedulerProvider.io())
+                    .onErrorReturnItem(
+                            User.builder()
+                                    .id(userId + "_伪造")
+                                    .name("伪造的人")
+                                    .timestamp(new Date())
+                                    .build()
+                    );
+        }
+
+        @Override
+        public Completable logout(String userId) {
+            return mGitHubApiInterface.logout(userId)
+                    .subscribeOn(mSchedulerProvider.io());
+        }
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/users/User.java b/sample/src/main/java/com/example/sqlbrite/todo/model/users/User.java
index 27f0328..ad337ed 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/users/User.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/users/User.java
@@ -1,6 +1,7 @@
 package com.example.sqlbrite.todo.model.users;
 
 import android.os.Parcelable;
+import android.support.annotation.Nullable;
 
 import com.example.sqlbrite.todo.model.autovalue.DateParcelTypeAdapter;
 import com.google.auto.value.AutoValue;
@@ -17,9 +18,11 @@
     @SerializedName("id")
     public abstract String id();
 
+    @Nullable
     @SerializedName("name")
     public abstract String name();
 
+    @Nullable
     @SerializedName("timestamp")
     @ParcelAdapter(DateParcelTypeAdapter.class)
     public abstract Date timestamp();
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserManager.java b/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserManager.java
index a6fbbcd..c7ca212 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserManager.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserManager.java
@@ -1,21 +1,19 @@
 package com.example.sqlbrite.todo.model.users;
 
-import android.app.Application;
-
 import com.example.sqlbrite.todo.di.InjectHelper;
 import com.example.sqlbrite.todo.di.UserScopeComponent;
-import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 
-import java.util.Date;
+import java.util.LinkedList;
+import java.util.List;
 
 import javax.inject.Inject;
 
 import io.reactivex.Completable;
 import io.reactivex.Single;
-import io.reactivex.functions.Action;
+import io.reactivex.SingleEmitter;
+import io.reactivex.SingleOnSubscribe;
 import io.reactivex.functions.Consumer;
-import io.reactivex.functions.Function;
 
 /**
  * @author Guang1234567
@@ -24,7 +22,9 @@
 
 public interface UserManager {
 
-    Single<UserSession> startSessionForUser(String username);
+    Single<UserSession> createSessionForUser(String userId);
+
+    Single<UserSession> startSessionForUser(UserSession userSession);
 
     UserScopeComponent getUserScopeComponent();
 
@@ -32,36 +32,34 @@
 
     class UserManagerImpl implements UserManager {
 
-        private final GitHubApiInterface mGitHubApiInterface;
+        private final LoginManager mLoginManager;
 
         private final SchedulerProvider mSchedulerProvider;
 
+        private List<UserSession> mAliveSessions;
+
         private UserScopeComponent mUserScopeComponent;
 
         @Inject
-        public UserManagerImpl(Application application, GitHubApiInterface gitHubApiInterface, SchedulerProvider schedulerProvider) {
-            mGitHubApiInterface = gitHubApiInterface;
+        public UserManagerImpl(LoginManager loginManager, SchedulerProvider schedulerProvider) {
+            mLoginManager = loginManager;
             mSchedulerProvider = schedulerProvider;
+            mAliveSessions = new LinkedList<>();
         }
 
         @Override
-        public Single<UserSession> startSessionForUser(String userId) {
-            return mGitHubApiInterface.login(userId)
-                    .subscribeOn(mSchedulerProvider.net())
-                    .onErrorReturnItem(
-                            User.builder()
-                                    .id(userId)
-                                    .name("伪造的人")
-                                    .timestamp(new Date())
-                                    .build()
-                    )
-                    .observeOn(mSchedulerProvider.ui())
-                    .flatMap(new Function<User, Single<UserSession>>() {
-                        @Override
-                        public Single<UserSession> apply(User user) throws Exception {
-                            return Single.just(UserSession.create(user, UserManagerImpl.this));
-                        }
-                    })
+        public Single<UserSession> createSessionForUser(final String userId) {
+            return Single.<UserSession>create(new SingleOnSubscribe<UserSession>() {
+                @Override
+                public void subscribe(SingleEmitter<UserSession> e) throws Exception {
+                    e.onSuccess(UserSession.create(userId, UserManagerImpl.this, mLoginManager));
+                }
+            });
+        }
+
+        @Override
+        public Single<UserSession> startSessionForUser(UserSession session) {
+            return Single.just(session)
                     .doOnSuccess(new Consumer<UserSession>() {
                         @Override
                         public void accept(UserSession userSession) throws Exception {
@@ -77,22 +75,23 @@ public UserScopeComponent getUserScopeComponent() {
 
         @Override
         public Completable closeUserSession(final UserSession userSession) {
-            return mGitHubApiInterface.logout(userSession.user().id())
-                    .subscribeOn(mSchedulerProvider.net())
-                    .observeOn(mSchedulerProvider.ui())
-                    .doOnComplete(new Action() {
+            return Single.just(userSession)
+                    .doOnSuccess(new Consumer<UserSession>() {
                         @Override
-                        public void run() throws Exception {
-                            oncloseUserSession(userSession);
+                        public void accept(UserSession userSession) throws Exception {
+                            onCloseUserSession(userSession);
                         }
-                    });
+                    })
+                    .toCompletable();
         }
 
         private void onStartUserSession(UserSession userSession) {
             mUserScopeComponent = InjectHelper.instance().createUserScopeComponent(userSession.user().id());
+            mAliveSessions.add(userSession);
         }
 
-        public void oncloseUserSession(UserSession userSession) {
+        public void onCloseUserSession(UserSession userSession) {
+            mAliveSessions.remove(userSession);
             mUserScopeComponent = null;
         }
     }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserSession.java b/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserSession.java
index b1bb262..6891af3 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserSession.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/users/UserSession.java
@@ -1,25 +1,102 @@
 package com.example.sqlbrite.todo.model.users;
 
-import com.example.sqlbrite.todo.di.UserScopeComponent;
-import com.google.auto.value.AutoValue;
-
 import io.reactivex.Completable;
 import io.reactivex.Single;
+import io.reactivex.SingleSource;
+import io.reactivex.functions.Action;
+import io.reactivex.functions.Function;
 
 /**
  * @author Guang1234567
  * @date 2018/3/14 18:42
  */
+public final class UserSession {
+
+    private User mUser;
+
+    private UserManager mUserManager;
 
-@AutoValue
-public abstract class UserSession {
+    private LoginManager mLoginManager;
 
-    public abstract User user();
+    private boolean mIsAlive;
 
-    abstract UserManager userManager();
+    UserSession(
+            User user,
+            UserManager userManager,
+            LoginManager loginManager) {
+        if (user == null) {
+            throw new NullPointerException("Null user");
+        }
+        mUser = user;
 
-    public static UserSession create(User user, UserManager userManager) {
-        UserSession s = new AutoValue_UserSession(user, userManager);
+        if (userManager == null) {
+            throw new NullPointerException("Null userManager");
+        }
+        mUserManager = userManager;
+
+        if (loginManager == null) {
+            throw new NullPointerException("Null loginManager");
+        }
+        mLoginManager = loginManager;
+
+        mIsAlive = false;
+    }
+
+    public User user() {
+        return mUser;
+    }
+
+    static UserSession create(String userId, UserManager userManager, LoginManager loginManager) {
+        UserSession s = new UserSession(User.builder().id(userId).build(), userManager, loginManager);
         return s;
     }
+
+    UserManager userManager() {
+        return mUserManager;
+    }
+
+    LoginManager loginManager() {
+        return mLoginManager;
+    }
+
+    public Single<UserSession> login(final String password) {
+        if (mIsAlive) {
+            throw new AssertionError("Must logout firstly!");
+        }
+
+        return userManager().startSessionForUser(UserSession.this)
+                .flatMap(new Function<UserSession, SingleSource<User>>() {
+                    @Override
+                    public SingleSource<User> apply(UserSession userSession) throws Exception {
+                        return loginManager().login(userSession.user().id(), password);
+                    }
+                })
+                .map(new Function<User, UserSession>() {
+                    @Override
+                    public UserSession apply(User user) throws Exception {
+                        UserSession.this.mUser = user;
+                        mIsAlive = true;
+                        return UserSession.this;
+                    }
+                });
+    }
+
+    public boolean isAlive() {
+        return mIsAlive;
+    }
+
+    public Completable logout() {
+        if (!mIsAlive) {
+            throw new AssertionError("Must login firstly!");
+        }
+
+        return loginManager().logout(user().id())
+                .andThen(userManager().closeUserSession(this))
+                .doOnComplete(new Action() {
+                    @Override
+                    public void run() throws Exception {
+                        mIsAlive = false;
+                    }
+                });
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerProvider.java b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerProvider.java
index bb9d25e..52aa0b3 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerProvider.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/SchedulerProvider.java
@@ -29,10 +29,4 @@
 
     @NonNull
     Scheduler viewModel();
-
-    @NonNull
-    Scheduler database();
-
-    @NonNull
-    Scheduler net();
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/TodoSchedulerProvider.java b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/TodoSchedulerProvider.java
index 1d1e9a7..0a7500a 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/schedulers/TodoSchedulerProvider.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/schedulers/TodoSchedulerProvider.java
@@ -53,16 +53,4 @@ public Scheduler ui() {
     public Scheduler viewModel() {
         return Schedulers.single();
     }
-
-    @Override
-    @NonNull
-    public Scheduler database() {
-        return Schedulers.io();
-    }
-
-    @Override
-    @NonNull
-    public Scheduler net() {
-        return Schedulers.io();
-    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
index cecf13f..8a88718 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
@@ -16,10 +16,14 @@
 package com.example.sqlbrite.todo.ui;
 
 import android.os.Bundle;
+import android.widget.Toast;
 
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.controler.MainViewModel;
 import com.example.sqlbrite.todo.di.ActivityScopeComponent;
+import com.example.sqlbrite.todo.model.users.UserSession;
+
+import io.reactivex.functions.Consumer;
 
 public final class MainActivity extends BaseViewModelActivity<MainViewModel>
         implements ListsFragment.Listener, ItemsFragment.Listener {
@@ -40,6 +44,16 @@ protected void onCreate(final Bundle savedInstanceState) {
     @Override
     protected void onResume() {
         super.onResume();
+
+        getViewModel().currentAliveUserSession()
+                .compose(this.<UserSession>bindToLifecycle())
+                .observeOn(getSchedulerProvider().ui())
+                .subscribe(new Consumer<UserSession>() {
+                    @Override
+                    public void accept(UserSession userSession) throws Exception {
+                        Toast.makeText(MainActivity.this, "当前用户 : " + userSession.user().id(), Toast.LENGTH_SHORT).show();
+                    }
+                });
     }
 
     @Override
