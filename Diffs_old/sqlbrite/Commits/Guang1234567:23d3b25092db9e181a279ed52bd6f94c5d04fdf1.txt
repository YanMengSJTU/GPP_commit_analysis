diff --git a/build.gradle b/build.gradle
index b938cd1..a361a8e 100644
--- a/build.gradle
+++ b/build.gradle
@@ -37,12 +37,14 @@ allprojects {
 
 ext {
     // Android dependencies.
-    supportV4 = 'com.android.support:support-v4:27.1.0'
-    supportAnnotations = 'com.android.support:support-annotations:27.1.0'
+    androidSupportVersion='27.0.0'
+    supportV4 = "com.android.support:support-v4:$androidSupportVersion"
+    supportAnnotations = "com.android.support:support-annotations:$androidSupportVersion"
     supportTestRunner = 'com.android.support.test:runner:0.5'
 
     // https://developer.android.com/topic/libraries/architecture/adding-components.html
     androidArchViewModel = 'android.arch.lifecycle:viewmodel:1.1.0'
+    androidArchExtensions = 'android.arch.lifecycle:extensions:1.1.0'
 
     supportSqlite = 'android.arch.persistence:db:1.0.0'
     supportSqliteFramework = 'android.arch.persistence:db-framework:1.0.0'
diff --git a/sample/build.gradle b/sample/build.gradle
index 3e15c2d..d830854 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -30,7 +30,7 @@ dependencies {
     implementation rootProject.ext.sqlbrite_wcdb_integration
 
     implementation rootProject.ext.androidArchViewModel
-    implementation "android.arch.lifecycle:extensions:1.1.0"
+    implementation rootProject.ext.androidArchExtensions
 
     compile 'com.gg.rxbase:rxbase:1.1.1'
 }
@@ -73,3 +73,14 @@ android {
         }
     }
 }
+
+configurations.all {
+    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
+        def requested = details.requested
+        if (requested.group == 'com.android.support') {
+            if (!requested.name.startsWith("multidex")) {
+                details.useVersion rootProject.ext.androidSupportVersion
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/sample/src/main/AndroidManifest.xml b/sample/src/main/AndroidManifest.xml
index ee8b95b..aebba88 100644
--- a/sample/src/main/AndroidManifest.xml
+++ b/sample/src/main/AndroidManifest.xml
@@ -10,6 +10,7 @@
       android:name=".TodoApp"
       android:allowBackup="false"
       android:icon="@drawable/ic_launcher"
+      android:theme="@style/AppTheme"
       >
     <activity
         android:name=".ui.MainActivity"
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/TodoComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/TodoComponent.java
index c2740d4..48fdd99 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/TodoComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/TodoComponent.java
@@ -17,6 +17,7 @@
 
 import com.example.sqlbrite.todo.ui.ItemsFragment;
 import com.example.sqlbrite.todo.ui.ListsFragment;
+import com.example.sqlbrite.todo.ui.MainActivity;
 import com.example.sqlbrite.todo.ui.NewItemFragment;
 import com.example.sqlbrite.todo.ui.NewListFragment;
 
@@ -28,6 +29,8 @@
 @Component(modules = TodoModule.class)
 public interface TodoComponent {
 
+    void inject(MainActivity activity);
+
     void inject(ListsFragment fragment);
 
     void inject(ItemsFragment fragment);
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
index 2ec3d9d..266ebc7 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
@@ -13,6 +13,9 @@
 import javax.inject.Inject;
 
 import io.reactivex.Observable;
+import io.reactivex.Single;
+import io.reactivex.SingleObserver;
+import io.reactivex.disposables.Disposable;
 
 /**
  * @author Guang1234567
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/MainDataSource.java b/sample/src/main/java/com/example/sqlbrite/todo/model/MainDataSource.java
index 5c04469..e4b80f5 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/MainDataSource.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/MainDataSource.java
@@ -7,6 +7,7 @@
 import java.util.List;
 
 import io.reactivex.Observable;
+import io.reactivex.Single;
 
 /**
  * @author Guang1234567
@@ -14,7 +15,8 @@
  */
 
 public interface MainDataSource {
-    Observable<List<ListsItem>> createQueryListsItems(final int max);
+
+    Observable<List<ListsItem>> createQueryListsItems(final long max);
 
     boolean completeTodoitem(long itemId, boolean complete);
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java b/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java
index 3808630..9e1d869 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java
@@ -2,6 +2,8 @@
 
 import android.arch.persistence.db.wcdb.WcdbUtils;
 import android.os.Environment;
+import android.support.annotation.Nullable;
+import android.support.annotation.VisibleForTesting;
 
 import com.example.sqlbrite.todo.model.local.db.TodoItem;
 import com.example.sqlbrite.todo.model.local.db.TodoItemDao;
@@ -9,11 +11,29 @@
 import com.example.sqlbrite.todo.ui.ListsItem;
 import com.example.sqlbrite.todo.ui.ListsItemDao;
 import com.squareup.sqlbrite3.BriteDatabase;
+import com.squareup.sqlbrite3.SqlBrite;
 
 import java.io.File;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
+import java.util.Map;
+
+import javax.inject.Inject;
 
 import io.reactivex.Observable;
+import io.reactivex.ObservableEmitter;
+import io.reactivex.ObservableOnSubscribe;
+import io.reactivex.ObservableSource;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.functions.Action;
+import io.reactivex.functions.Consumer;
+import io.reactivex.functions.Function;
+import io.reactivex.functions.Predicate;
+import io.reactivex.subjects.BehaviorSubject;
+import io.reactivex.subjects.Subject;
 
 /**
  * @author Guang1234567
@@ -22,7 +42,7 @@
 
 public class MainRepository implements MainDataSource {
 
-    BriteDatabase mBriteDatabaseb;
+    private BriteDatabase mBriteDatabaseb;
 
     private final ListsItemDao mListsItemDao;
 
@@ -30,16 +50,34 @@
 
     private final TodoItemDao mTodoItemDao;
 
+    final BehaviorSubject<List<ListsItem>> memory = BehaviorSubject.create();
+
+    @Inject
     public MainRepository(BriteDatabase briteDatabaseb, ListsItemDao listsItemDao, TodoListDao todoListDao, TodoItemDao todoItemDao) {
         mBriteDatabaseb = briteDatabaseb;
         mListsItemDao = listsItemDao;
         mTodoListDao = todoListDao;
         mTodoItemDao = todoItemDao;
+
+        Observable<List<ListsItem>> disk = mListsItemDao.createQueryListsItems(Long.MAX_VALUE,
+                new Predicate<SqlBrite.Query>() {
+                    @Override
+                    public boolean test(SqlBrite.Query query) throws Exception {
+                        return !memory.hasValue() || memory.hasObservers();
+                    }
+                })
+                .doOnNext(new Consumer<List<ListsItem>>() {
+                    @Override
+                    public void accept(List<ListsItem> listsItems) throws Exception {
+                        memory.onNext(listsItems);
+                    }
+                });
+        Disposable disposable = disk.subscribe();
     }
 
     @Override
-    public Observable<List<ListsItem>> createQueryListsItems(final int max) {
-        return mListsItemDao.createQueryListsItems(max); // 省内存
+    public Observable<List<ListsItem>> createQueryListsItems(final long max) {
+        return memory.take(max);
     }
 
     @Override
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java
new file mode 100644
index 0000000..331f76d
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/BaseViewModelActivity.java
@@ -0,0 +1,49 @@
+package com.example.sqlbrite.todo.ui;
+
+import android.arch.lifecycle.ViewModel;
+import android.arch.lifecycle.ViewModelProvider;
+import android.arch.lifecycle.ViewModelProviders;
+import android.os.Bundle;
+
+import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
+import com.gg.rxbase.ui.RxBaseActivity;
+
+import java.lang.reflect.ParameterizedType;
+
+import javax.inject.Inject;
+
+/**
+ * @author Administrator
+ * @date 2018/3/10 11:21
+ */
+
+public abstract class BaseViewModelActivity<VIEWMODEL extends ViewModel> extends RxBaseActivity {
+
+    @Inject
+    SchedulerProvider mSchedulerProvider;
+
+    @Inject
+    ViewModelProvider.Factory mViewModelFactory;
+
+    private VIEWMODEL mViewModel;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        toInject(this);
+
+        ParameterizedType type = (ParameterizedType) this.getClass().getGenericSuperclass();
+        Class viewModelClazz = (Class) type.getActualTypeArguments()[0];
+        mViewModel = (VIEWMODEL) ViewModelProviders.of(this, mViewModelFactory).get(viewModelClazz);
+    }
+
+    protected abstract void toInject(BaseViewModelActivity<VIEWMODEL> self);
+
+    protected VIEWMODEL getViewModel() {
+        return mViewModel;
+    }
+
+    public SchedulerProvider getSchedulerProvider() {
+        return mSchedulerProvider;
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
index 0825dc7..17b1e10 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
@@ -16,13 +16,9 @@
 package com.example.sqlbrite.todo.ui;
 
 import android.app.Activity;
-import android.arch.lifecycle.ViewModelProvider;
-import android.arch.lifecycle.ViewModelProviders;
 import android.content.Context;
 import android.os.Bundle;
-import android.os.Environment;
 import android.support.annotation.Nullable;
-import android.support.v4.app.Fragment;
 import android.support.v4.view.MenuItemCompat;
 import android.util.Log;
 import android.view.LayoutInflater;
@@ -31,29 +27,20 @@
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.ListAdapter;
 import android.widget.ListView;
 import android.widget.Toast;
 
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.MainViewModel;
-import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
-import com.squareup.sqlbrite3.BriteDatabase;
 import com.trello.rxlifecycle2.android.FragmentEvent;
 
 import java.io.File;
 import java.util.List;
 
-import javax.inject.Inject;
-
 import butterknife.BindView;
 import butterknife.ButterKnife;
-import butterknife.OnClick;
 import butterknife.OnItemClick;
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.disposables.Disposable;
 
 import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_IF_ROOM;
 import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_WITH_TEXT;
@@ -75,8 +62,6 @@ static ListsFragment newInstance() {
     ListView listView;
     @BindView(android.R.id.empty)
     View emptyView;
-    @BindView(R.id.export_db)
-    Button btnExportDB;
 
     private Listener listener;
     private ListsAdapter adapter;
@@ -113,7 +98,29 @@ public boolean onMenuItemClick(MenuItem item) {
                         return true;
                     }
                 });
+
         MenuItemCompat.setShowAsAction(item, SHOW_AS_ACTION_IF_ROOM | SHOW_AS_ACTION_WITH_TEXT);
+
+        item = menu.add(R.string.export_db)
+                .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
+                    @Override
+                    public boolean onMenuItemClick(MenuItem item) {
+                        exportDB();
+                        return true;
+                    }
+                });
+
+        MenuItemCompat.setShowAsAction(item, SHOW_AS_ACTION_IF_ROOM | SHOW_AS_ACTION_WITH_TEXT);
+    }
+
+    private void exportDB() {
+        try {
+            File dstFile = getViewModel().exportDecryption();
+            Toast.makeText(getContext(), "导出数据库成功!\n" + dstFile.getPath(), Toast.LENGTH_SHORT).show();
+        } catch (Exception e) {
+            Log.e(TAG, "导出数据库失败!", e);
+            Toast.makeText(getContext(), "导出数据库失败!", Toast.LENGTH_SHORT).show();
+        }
     }
 
     @Override
@@ -131,19 +138,6 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
         listView.setAdapter(adapter);
     }
 
-    @OnClick(R.id.export_db)
-    void onExportDB(View btn) {
-        try {
-            File dstFile = getViewModel().exportDecryption();
-            Toast.makeText(getContext(), "导出数据库成功!\n" + dstFile.getPath(), Toast.LENGTH_SHORT).show();
-
-            getActivity().finish();
-        } catch (Exception e) {
-            Log.e(TAG, "导出数据库失败!", e);
-            Toast.makeText(getContext(), "导出数据库失败!", Toast.LENGTH_SHORT).show();
-        }
-    }
-
     @OnItemClick(android.R.id.list)
     void listClicked(long listId) {
         listener.onListClicked(listId);
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
index 1ff4ca5..351f6fe 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
@@ -29,11 +29,11 @@
 
     public final static String ITEM_COUNT = "item_count";
 
-    abstract long id();
+    public abstract long id();
 
-    abstract String name();
+    public abstract String name();
 
-    abstract int itemCount();
+    public abstract int itemCount();
 
     public static Function<Cursor, ListsItem> MAPPER = new Function<Cursor, ListsItem>() {
         @Override
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
index e2127ff..53c60d9 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
@@ -12,6 +12,7 @@
 import io.reactivex.Observable;
 import io.reactivex.SingleSource;
 import io.reactivex.functions.Function;
+import io.reactivex.functions.Predicate;
 
 public class ListsItemDao {
 
@@ -40,17 +41,17 @@ public ListsItemDao(BriteDatabase database) {
             + " LEFT OUTER JOIN " + TodoItem.TABLE + " AS " + ALIAS_ITEM + " ON " + LIST_ID + " = " + ITEM_LIST_ID
             + " GROUP BY " + LIST_ID;
 
-    public Observable<List<ListsItem>> createQueryListsItems(final int max) {
+    public Observable<List<ListsItem>> createQueryListsItems(final long max, Predicate<SqlBrite.Query> filter) {
         return mDatabase.createQuery(TABLES, QUERY)
-                .flatMapSingle(new Function<SqlBrite.Query, SingleSource<List<ListsItem>>>() {
+                .filter(filter)
+                .flatMap(new Function<SqlBrite.Query, Observable<List<ListsItem>>>() {
                     @Override
-                    public SingleSource<List<ListsItem>> apply(SqlBrite.Query query) throws Exception {
+                    public Observable<List<ListsItem>> apply(SqlBrite.Query query) throws Exception {
                         return query.asRows(ListsItem.MAPPER)
                                 .take(max)
-                                .toList();
+                                .toList()
+                                .toObservable();
                     }
                 });
     }
-
-
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
index 5aafc3d..7d1598b 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
@@ -20,10 +20,12 @@
 import android.support.v7.app.AppCompatActivity;
 
 import com.example.sqlbrite.todo.R;
+import com.example.sqlbrite.todo.TodoApp;
+import com.example.sqlbrite.todo.controler.MainViewModel;
 import com.gg.rxbase.ui.RxBaseActivity;
 import com.trello.rxlifecycle2.components.support.RxFragmentActivity;
 
-public final class MainActivity extends RxFragmentActivity
+public final class MainActivity extends BaseViewModelActivity<MainViewModel>
         implements ListsFragment.Listener, ItemsFragment.Listener {
 
     @Override
@@ -36,6 +38,11 @@ protected void onCreate(Bundle savedInstanceState) {
         }
     }
 
+    @Override
+    protected void toInject(BaseViewModelActivity<MainViewModel> self) {
+        TodoApp.getComponent(this).inject(this);
+    }
+
     @Override
     public void onListClicked(long id) {
         getSupportFragmentManager().beginTransaction()
diff --git a/sample/src/main/res/layout/lists.xml b/sample/src/main/res/layout/lists.xml
index 6987112..6c9050e 100644
--- a/sample/src/main/res/layout/lists.xml
+++ b/sample/src/main/res/layout/lists.xml
@@ -3,8 +3,8 @@
 <FrameLayout
     xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
-    android:layout_height="match_parent"
->
+    android:layout_height="match_parent">
+
     <!-- TODO get nice empty view / icon -->
     <ImageView
         android:id="@android:id/empty"
@@ -17,11 +17,4 @@
         android:layout_width="match_parent"
         android:layout_height="match_parent"
     />
-
-    <Button
-        android:id="@+id/export_db"
-        android:layout_width="match_parent"
-        android:layout_height="50dp"
-        android:layout_gravity="bottom|center_horizontal"
-        android:text="导出数据库"/>
 </FrameLayout>
diff --git a/sample/src/main/res/values/colors.xml b/sample/src/main/res/values/colors.xml
new file mode 100644
index 0000000..2a12c47
--- /dev/null
+++ b/sample/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+</resources>
diff --git a/sample/src/main/res/values/strings.xml b/sample/src/main/res/values/strings.xml
index 50904cd..8538b40 100644
--- a/sample/src/main/res/values/strings.xml
+++ b/sample/src/main/res/values/strings.xml
@@ -8,4 +8,5 @@
   <string name="new_list_hint">Name</string>
   <string name="new_item">New Item</string>
   <string name="new_item_hint">Description</string>
+  <string name="export_db">Export DB</string>
 </resources>
diff --git a/sample/src/main/res/values/styles.xml b/sample/src/main/res/values/styles.xml
new file mode 100644
index 0000000..6f19b47
--- /dev/null
+++ b/sample/src/main/res/values/styles.xml
@@ -0,0 +1,11 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+</resources>
