diff --git a/sample/build.gradle b/sample/build.gradle
index 9a97ba8..e405e4a 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -22,7 +22,7 @@ dependencies {
     annotationProcessor rootProject.ext.autoValueGson
     implementation rootProject.ext.autoValueParcelAdapter
     annotationProcessor rootProject.ext.autoValueParcel
-    compileOnly rootProject.ext.autoValueCursorAnnotations
+    implementation rootProject.ext.autoValueCursorAnnotations
     annotationProcessor rootProject.ext.autoValueCursor
 
     implementation project(':sqlbrite')
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java
index ce878ed..67a7c6b 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java
@@ -27,7 +27,8 @@
       + "CREATE TABLE " + TodoList.TABLE + "("
       + TodoList.ID + " INTEGER NOT NULL PRIMARY KEY,"
       + TodoList.NAME + " TEXT NOT NULL,"
-      + TodoList.ARCHIVED + " INTEGER NOT NULL DEFAULT 0"
+      + TodoList.ARCHIVED + " INTEGER NOT NULL DEFAULT 0,"
+      + TodoList.CREATE_TIMESTAMP + " INTEGER NOT NULL DEFAULT 0"
       + ")";
   private static final String CREATE_ITEM = ""
       + "CREATE TABLE " + TodoItem.TABLE + "("
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItem.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItem.java
index 10c4400..e47952b 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItem.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItem.java
@@ -79,7 +79,7 @@ public ContentValues build() {
         return AutoValue_TodoItem.MAPPER_FUNCTION;
     }
 
-    public static TodoItem createFromCursor(Cursor cursor) {
+    public static TodoItem create(Cursor cursor) {
         return AutoValue_TodoItem.createFromCursor(cursor);
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItemDao.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItemDao.java
index 3993092..7549019 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItemDao.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItemDao.java
@@ -32,7 +32,7 @@ protected ContentValues toContentValues(TodoItem e) {
 
     @Override
     protected TodoItem createFromCursor(Cursor cursor) {
-        return TodoItem.createFromCursor(cursor);
+        return TodoItem.create(cursor);
     }
 
     @Override
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoList.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoList.java
index f41c5dd..9139610 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoList.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoList.java
@@ -20,9 +20,13 @@
 import android.os.Parcelable;
 import android.provider.BaseColumns;
 
+import com.example.sqlbrite.todo.model.autovalue.DateCursorTypeAdapter;
+import com.gabrielittner.auto.value.cursor.ColumnAdapter;
 import com.gabrielittner.auto.value.cursor.ColumnName;
 import com.google.auto.value.AutoValue;
 
+import java.util.Date;
+
 import io.reactivex.functions.Function;
 
 // Note: normally I wouldn't prefix table classes but I didn't want 'List' to be overloaded.
@@ -33,6 +37,7 @@
     public static final String ID = BaseColumns._ID;
     public static final String NAME = "name";
     public static final String ARCHIVED = "archived";
+    public static final String CREATE_TIMESTAMP = "create_timestamp";
 
     @ColumnName(ID)
     public abstract long id();
@@ -43,6 +48,10 @@
     @ColumnName(ARCHIVED)
     public abstract boolean archived();
 
+    @ColumnName(CREATE_TIMESTAMP)
+    @ColumnAdapter(DateCursorTypeAdapter.class)
+    public abstract Date createTimestamp();
+
     public static final class ContentValuesBuilder {
         private final ContentValues values = new ContentValues();
 
@@ -61,7 +70,16 @@ public ContentValuesBuilder archived(boolean archived) {
             return this;
         }
 
+        public ContentValuesBuilder createTimestamp(Date timestamp) {
+            new DateCursorTypeAdapter().toContentValues(values, CREATE_TIMESTAMP, timestamp);
+            return this;
+        }
+
         public ContentValues build() {
+            // default value
+            if (!values.containsKey(CREATE_TIMESTAMP)) {
+                createTimestamp(new Date());
+            }
             return values; // TODO defensive copy?
         }
     }
@@ -71,7 +89,7 @@ public ContentValues build() {
         return AutoValue_TodoList.MAPPER_FUNCTION;
     }
 
-    public static TodoList createFromCursor(Cursor cursor) {
+    public static TodoList create(Cursor cursor) {
         return AutoValue_TodoList.createFromCursor(cursor);
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoListDao.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoListDao.java
index 9edf010..acf7cb0 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoListDao.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoListDao.java
@@ -30,7 +30,7 @@ protected ContentValues toContentValues(TodoList e) {
 
     @Override
     protected TodoList createFromCursor(Cursor cursor) {
-        return TodoList.createFromCursor(cursor);
+        return TodoList.create(cursor);
     }
 
     @Override
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/users/User.java b/sample/src/main/java/com/example/sqlbrite/todo/model/users/User.java
index 5641a85..27f0328 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/users/User.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/users/User.java
@@ -39,10 +39,6 @@ public static Builder builder() {
         public abstract User build();
     }
 
-    public static User create(String id, String name, Date timestamp) {
-        return new AutoValue_User(id, name, timestamp);
-    }
-
     // The public static method returning a TypeAdapter<Foo> is what
     // tells auto-value-gson to create a TypeAdapter for Foo.
     public static TypeAdapter<User> typeAdapter(Gson gson) {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
index 34ed182..ea79c87 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
@@ -152,12 +152,13 @@ public void onResume() {
         Observable<String> listName = getViewModel().createQueryListName(listId);
 
         //disposables.add(
-        Observable.combineLatest(listName, itemCount, new BiFunction<String, Integer, String>() {
-            @Override
-            public String apply(String listName, Integer itemCount) {
-                return listName + " (" + itemCount + ")";
-            }
-        })
+        Observable
+                .combineLatest(listName, itemCount, new BiFunction<String, Integer, String>() {
+                    @Override
+                    public String apply(String listName, Integer itemCount) {
+                        return listName + " (" + itemCount + ")";
+                    }
+                })
                 .observeOn(getSchedulerProvider().ui())
                 .subscribe(new Consumer<String>() {
                     @Override
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsAdapter.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsAdapter.java
index 52c7608..98c2a92 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsAdapter.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsAdapter.java
@@ -23,6 +23,7 @@
 import android.widget.TextView;
 import io.reactivex.functions.Consumer;
 import java.util.Collections;
+import java.util.Date;
 import java.util.List;
 
 final class ListsAdapter extends BaseAdapter implements Consumer<List<ListsItem>> {
@@ -61,7 +62,7 @@ public ListsAdapter(Context context) {
     }
 
     ListsItem item = getItem(position);
-    ((TextView) convertView).setText(item.name() + " (" + item.itemCount() + ")");
+    ((TextView) convertView).setText(item.name() + " (" + item.itemCount() + ") " + String.valueOf(item.createTimestamp()));
 
     return convertView;
   }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
index 351f6fe..d48a008 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
@@ -18,10 +18,18 @@
 import android.database.Cursor;
 import android.os.Parcelable;
 
+import com.example.sqlbrite.todo.model.autovalue.DateCursorTypeAdapter;
 import com.example.sqlbrite.todo.model.local.db.Db;
+import com.example.sqlbrite.todo.model.local.db.TodoItem;
 import com.example.sqlbrite.todo.model.local.db.TodoList;
+import com.gabrielittner.auto.value.cursor.ColumnAdapter;
+import com.gabrielittner.auto.value.cursor.ColumnName;
 import com.google.auto.value.AutoValue;
 
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Date;
+
 import io.reactivex.functions.Function;
 
 @AutoValue
@@ -29,19 +37,32 @@
 
     public final static String ITEM_COUNT = "item_count";
 
+    public final static String ALIAS_LIST = "list";
+    public final static String ALIAS_ITEM = "item";
+
+    public final static String LIST_ID = ALIAS_LIST + "." + TodoList.ID;
+    public final static String LIST_NAME = ALIAS_LIST + "." + TodoList.NAME;
+    public final static String LIST_CREATE_TIMESTAMP = ALIAS_LIST + "." + TodoList.CREATE_TIMESTAMP;
+    public final static String ITEM_ID = ALIAS_ITEM + "." + TodoItem.ID;
+    public final static String ITEM_LIST_ID = ALIAS_ITEM + "." + TodoItem.LIST_ID;
+
+    public static Collection<String> TABLES = Arrays.asList(TodoList.TABLE, TodoItem.TABLE);
+
+    @ColumnName(TodoList.ID)
     public abstract long id();
 
+    @ColumnName(TodoList.NAME)
     public abstract String name();
 
+    @ColumnName(TodoList.CREATE_TIMESTAMP)
+    @ColumnAdapter(DateCursorTypeAdapter.class)
+    public abstract Date createTimestamp();
+
+    @ColumnName(ITEM_COUNT)
     public abstract int itemCount();
 
-    public static Function<Cursor, ListsItem> MAPPER = new Function<Cursor, ListsItem>() {
-        @Override
-        public ListsItem apply(Cursor cursor) {
-            long id = Db.getLong(cursor, TodoList.ID);
-            String name = Db.getString(cursor, TodoList.NAME);
-            int itemCount = Db.getInt(cursor, ITEM_COUNT);
-            return new AutoValue_ListsItem(id, name, itemCount);
-        }
-    };
+    // Optional: if your project includes RxJava 2 the extension will generate a Function<Cursor, User>
+    public static Function<Cursor, ListsItem> MAPPER_FUNCTION() {
+        return AutoValue_ListsItem.MAPPER_FUNCTION;
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
index efc9e56..597c723 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
@@ -26,27 +26,18 @@ public ListsItemDao(BriteDatabase database) {
     // 业务逻辑
     //------------------------------------------------------------
 
-    private static String ALIAS_LIST = "list";
-    private static String ALIAS_ITEM = "item";
-
-    private static String LIST_ID = ALIAS_LIST + "." + TodoList.ID;
-    private static String LIST_NAME = ALIAS_LIST + "." + TodoList.NAME;
-    private static String ITEM_ID = ALIAS_ITEM + "." + TodoItem.ID;
-    private static String ITEM_LIST_ID = ALIAS_ITEM + "." + TodoItem.LIST_ID;
-
-    public static Collection<String> TABLES = Arrays.asList(TodoList.TABLE, TodoItem.TABLE);
     public static String QUERY = ""
-            + "SELECT " + LIST_ID + ", " + LIST_NAME + ", COUNT(" + ITEM_ID + ") as " + ListsItem.ITEM_COUNT
-            + " FROM " + TodoList.TABLE + " AS " + ALIAS_LIST
-            + " LEFT OUTER JOIN " + TodoItem.TABLE + " AS " + ALIAS_ITEM + " ON " + LIST_ID + " = " + ITEM_LIST_ID
-            + " GROUP BY " + LIST_ID;
+            + "SELECT " + ListsItem.LIST_ID + ", " + ListsItem.LIST_NAME + ", COUNT(" + ListsItem.ITEM_ID + ") as " + ListsItem.ITEM_COUNT + ", " + ListsItem.LIST_CREATE_TIMESTAMP
+            + " FROM " + TodoList.TABLE + " AS " + ListsItem.ALIAS_LIST
+            + " LEFT OUTER JOIN " + TodoItem.TABLE + " AS " + ListsItem.ALIAS_ITEM + " ON " + ListsItem.LIST_ID + " = " + ListsItem.ITEM_LIST_ID
+            + " GROUP BY " + ListsItem.LIST_ID;
 
     public Observable<List<ListsItem>> createQueryListsItems(final long max) {
-        return mDatabase.createQuery(TABLES, QUERY)
+        return mDatabase.createQuery(ListsItem.TABLES, QUERY)
                 .flatMap(new Function<SqlBrite.Query, Observable<List<ListsItem>>>() {
                     @Override
                     public Observable<List<ListsItem>> apply(SqlBrite.Query query) throws Exception {
-                        return query.asRows(ListsItem.MAPPER)
+                        return query.asRows(ListsItem.MAPPER_FUNCTION())
                                 .take(max)
                                 .toList()
                                 .toObservable();
