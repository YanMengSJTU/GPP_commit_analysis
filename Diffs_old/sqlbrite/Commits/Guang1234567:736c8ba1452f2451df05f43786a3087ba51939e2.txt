diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/UserScopeModelModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/UserScopeModelModule.java
index 2331d5a..8b6f5f8 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/model/UserScopeModelModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/UserScopeModelModule.java
@@ -18,13 +18,17 @@
 import com.example.sqlbrite.todo.di.UserScope;
 import com.example.sqlbrite.todo.di.model.local.db.DbModule;
 import com.example.sqlbrite.todo.di.model.local.preferences.UserScopePreferencesModule;
+import com.example.sqlbrite.todo.model.DbMainRepository;
 import com.example.sqlbrite.todo.model.MainDataSource;
 import com.example.sqlbrite.todo.model.MainRepository;
+import com.example.sqlbrite.todo.model.MemoryMainRepository;
 import com.example.sqlbrite.todo.model.local.db.TodoItemDao;
 import com.example.sqlbrite.todo.model.local.db.TodoListDao;
 import com.example.sqlbrite.todo.ui.ListsItemDao;
 import com.squareup.sqlbrite3.BriteDatabase;
 
+import javax.inject.Named;
+
 import dagger.Module;
 import dagger.Provides;
 
@@ -35,9 +39,23 @@
         }
 )
 public final class UserScopeModelModule {
+
+    @Provides
+    @UserScope
+    DbMainRepository provideDbMainRepository(BriteDatabase briteDatabaseb, ListsItemDao listsItemDao, TodoListDao todoListDao, TodoItemDao todoItemDao) {
+        return new DbMainRepository(briteDatabaseb, listsItemDao, todoListDao, todoItemDao);
+    }
+
+    @Named("DbMainRepository")
+    @Provides
+    @UserScope
+    MemoryMainRepository provideMemoryMainRepository() {
+        return new MemoryMainRepository();
+    }
+
     @Provides
     @UserScope
-    MainDataSource provideMainDataSource(BriteDatabase briteDatabaseb, ListsItemDao listsItemDao, TodoListDao todoListDao, TodoItemDao todoItemDao) {
-        return new MainRepository(briteDatabaseb, listsItemDao, todoListDao, todoItemDao);
+    MainDataSource provideMainDataSource(DbMainRepository dbMainRepository, MemoryMainRepository memoryMainRepository) {
+        return new MainRepository(dbMainRepository, memoryMainRepository);
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/DbMainRepository.java b/sample/src/main/java/com/example/sqlbrite/todo/model/DbMainRepository.java
new file mode 100644
index 0000000..f52d839
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/DbMainRepository.java
@@ -0,0 +1,97 @@
+package com.example.sqlbrite.todo.model;
+
+import android.arch.persistence.db.wcdb.WcdbUtils;
+import android.os.Environment;
+
+import com.example.sqlbrite.todo.model.local.db.TodoItem;
+import com.example.sqlbrite.todo.model.local.db.TodoItemDao;
+import com.example.sqlbrite.todo.model.local.db.TodoListDao;
+import com.example.sqlbrite.todo.ui.ListsItem;
+import com.example.sqlbrite.todo.ui.ListsItemDao;
+import com.squareup.sqlbrite3.BriteDatabase;
+
+import java.io.File;
+import java.util.List;
+
+import javax.inject.Inject;
+
+import io.reactivex.Observable;
+import io.reactivex.functions.Consumer;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/9 13:45
+ */
+
+public class DbMainRepository implements MainDataSource {
+
+    private BriteDatabase mBriteDatabaseb;
+
+    private final ListsItemDao mListsItemDao;
+
+    private final TodoListDao mTodoListDao;
+
+    private final TodoItemDao mTodoItemDao;
+
+    @Inject
+    public DbMainRepository(BriteDatabase briteDatabaseb, ListsItemDao listsItemDao, TodoListDao todoListDao, TodoItemDao todoItemDao) {
+        mBriteDatabaseb = briteDatabaseb;
+        mListsItemDao = listsItemDao;
+        mTodoListDao = todoListDao;
+        mTodoItemDao = todoItemDao;
+    }
+
+    @Override
+    public Observable<List<ListsItem>> createQueryListsItems(final long max) {
+        return mListsItemDao
+                .createQueryListsItems(500)
+                .doOnNext(new Consumer<List<ListsItem>>() {
+                    @Override
+                    public void accept(List<ListsItem> listsItems) throws Exception {
+                        int i = 1;
+                    }
+                })
+                .take(max);
+    }
+
+    @Override
+    public Observable<Integer> createQueryItemCount(long listId) {
+        return mTodoItemDao.createQueryItemCount(listId);
+    }
+
+    @Override
+    public Observable<List<TodoItem>> createQueryTodoItemsByListId(long listId) {
+        return mTodoItemDao.createQueryTodoItemsByListId(listId);
+    }
+
+    @Override
+    public Observable<String> createQueryListName(long listId) {
+        return mTodoListDao.createQueryListName(listId);
+    }
+
+    @Override
+    public boolean completeTodoitem(long itemId, boolean complete) {
+        return mTodoItemDao.complete(itemId, complete);
+    }
+
+    @Override
+    public long createNewOneTodoList(String name) {
+        return mTodoListDao.createNewOne(name);
+    }
+
+    @Override
+    public long createNewOneTodoItem(long listId, String description) {
+        return mTodoItemDao.createNewOne(listId, description);
+    }
+
+    @Override
+    public File exportDecryption() throws Exception {
+        File dir = Environment.getExternalStorageDirectory();
+        File dstFile = new File(dir, "todo-list-backup.db");
+        if (!dstFile.exists()) {
+            dstFile.createNewFile();
+        }
+        WcdbUtils.exportDecryption(mBriteDatabaseb.getReadableDatabase(), dstFile);
+        return dstFile;
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/MainDataSource.java b/sample/src/main/java/com/example/sqlbrite/todo/model/MainDataSource.java
index e4b80f5..9facdf6 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/MainDataSource.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/MainDataSource.java
@@ -18,14 +18,14 @@
 
     Observable<List<ListsItem>> createQueryListsItems(final long max);
 
-    boolean completeTodoitem(long itemId, boolean complete);
-
     Observable<Integer> createQueryItemCount(long listId);
 
     Observable<List<TodoItem>> createQueryTodoItemsByListId(long listId);
 
     Observable<String> createQueryListName(long listId);
 
+    boolean completeTodoitem(long itemId, boolean complete);
+
     long createNewOneTodoList(String name);
 
     long createNewOneTodoItem(long listId, String description);
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java b/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java
index a1fbfad..9c120dc 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/MainRepository.java
@@ -1,15 +1,7 @@
 package com.example.sqlbrite.todo.model;
 
-import android.arch.persistence.db.wcdb.WcdbUtils;
-import android.os.Environment;
-
 import com.example.sqlbrite.todo.model.local.db.TodoItem;
-import com.example.sqlbrite.todo.model.local.db.TodoItemDao;
-import com.example.sqlbrite.todo.model.local.db.TodoListDao;
 import com.example.sqlbrite.todo.ui.ListsItem;
-import com.example.sqlbrite.todo.ui.ListsItemDao;
-import com.jakewharton.rx.ReplayingShare;
-import com.squareup.sqlbrite3.BriteDatabase;
 
 import java.io.File;
 import java.util.List;
@@ -17,8 +9,9 @@
 import javax.inject.Inject;
 
 import io.reactivex.Observable;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.functions.Action;
 import io.reactivex.functions.Consumer;
-import io.reactivex.subjects.BehaviorSubject;
 
 /**
  * @author Guang1234567
@@ -27,77 +20,98 @@
 
 public class MainRepository implements MainDataSource {
 
-    private BriteDatabase mBriteDatabaseb;
-
-    private final ListsItemDao mListsItemDao;
-
-    private final TodoListDao mTodoListDao;
+    private final DbMainRepository mDbMainRepository;
 
-    private final TodoItemDao mTodoItemDao;
+    private final MemoryMainRepository mMemoryMainRepository;
 
-    private final Observable<List<ListsItem>> QueryListsItems;
+    private final Observable mCreateQueryListsItems;
 
     @Inject
-    public MainRepository(BriteDatabase briteDatabaseb, ListsItemDao listsItemDao, TodoListDao todoListDao, TodoItemDao todoItemDao) {
-        mBriteDatabaseb = briteDatabaseb;
-        mListsItemDao = listsItemDao;
-        mTodoListDao = todoListDao;
-        mTodoItemDao = todoItemDao;
-
-        QueryListsItems = mListsItemDao
-                .createQueryListsItems(Long.MAX_VALUE)
+    public MainRepository(final DbMainRepository dbMainRepository, final MemoryMainRepository memoryMainRepository) {
+        mDbMainRepository = dbMainRepository;
+        mMemoryMainRepository = memoryMainRepository;
+
+        mCreateQueryListsItems = dbMainRepository.createQueryListsItems(Long.MAX_VALUE)
                 .doOnNext(new Consumer<List<ListsItem>>() {
                     @Override
                     public void accept(List<ListsItem> listsItems) throws Exception {
-                        int i = 1;
+                        memoryMainRepository.refreshListsItemsCache(listsItems);
                     }
                 })
-                .compose(ReplayingShare.<List<ListsItem>>instance()); // use ReplayingShare Transformer to memory cache, avoid expensive manipulate.
+                .share();
     }
 
     @Override
     public Observable<List<ListsItem>> createQueryListsItems(final long max) {
-        return QueryListsItems.take(max);
-    }
-
-    @Override
-    public boolean completeTodoitem(long itemId, boolean complete) {
-        return mTodoItemDao.complete(itemId, complete);
+        Observable<List<ListsItem>> memory = mMemoryMainRepository.createQueryListsItems(max);
+        final Disposable[] outterDisposable = new Disposable[1];
+        return memory
+                .doOnLifecycle(
+                        new Consumer<Disposable>() {
+                            @Override
+                            public void accept(Disposable disposable) throws Exception {
+                                if (!disposable.isDisposed()) {
+                                    outterDisposable[0] = mCreateQueryListsItems.subscribe();
+                                }
+                            }
+                        },
+                        new Action() {
+                            @Override
+                            public void run() throws Exception {
+                                if (outterDisposable[0] != null
+                                        && !outterDisposable[0].isDisposed()) {
+                                    outterDisposable[0].dispose();
+                                }
+                            }
+                        }
+                );
     }
 
     @Override
     public Observable<Integer> createQueryItemCount(long listId) {
-        return mTodoItemDao.createQueryItemCount(listId);
+        return mMemoryMainRepository.createQueryItemCount(listId)
+                .switchIfEmpty(mDbMainRepository.createQueryItemCount(listId));
     }
 
     @Override
     public Observable<List<TodoItem>> createQueryTodoItemsByListId(long listId) {
-        return mTodoItemDao.createQueryTodoItemsByListId(listId);
+        return mMemoryMainRepository.createQueryTodoItemsByListId(listId)
+                .switchIfEmpty(
+                        mDbMainRepository.createQueryTodoItemsByListId(listId)
+                                .doOnNext(new Consumer<List<TodoItem>>() {
+                                    @Override
+                                    public void accept(List<TodoItem> todoItems) throws Exception {
+                                        if (todoItems != null) {
+                                            mMemoryMainRepository.putTodoItemsCache(listId, todoItems);
+                                        }
+                                    }
+                                })
+                );
     }
 
     @Override
     public Observable<String> createQueryListName(long listId) {
-        return mTodoListDao.createQueryListName(listId);
+        return mMemoryMainRepository.createQueryListName(listId)
+                .switchIfEmpty(mDbMainRepository.createQueryListName(listId));
+    }
+
+    @Override
+    public boolean completeTodoitem(long itemId, boolean complete) {
+        return mDbMainRepository.completeTodoitem(itemId, complete);
     }
 
     @Override
     public long createNewOneTodoList(String name) {
-        return mTodoListDao.createNewOne(name);
+        return mDbMainRepository.createNewOneTodoList(name);
     }
 
     @Override
     public long createNewOneTodoItem(long listId, String description) {
-        return mTodoItemDao.createNewOne(listId, description);
+        return mDbMainRepository.createNewOneTodoItem(listId, description);
     }
 
     @Override
     public File exportDecryption() throws Exception {
-        File dir = Environment.getExternalStorageDirectory();
-        File dstFile = new File(dir, "todo-list-backup.db");
-        if (!dstFile.exists()) {
-            dstFile.createNewFile();
-        }
-        WcdbUtils.exportDecryption(mBriteDatabaseb.getReadableDatabase(), dstFile);
-        return dstFile;
+        return mDbMainRepository.exportDecryption();
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/MemoryMainRepository.java b/sample/src/main/java/com/example/sqlbrite/todo/model/MemoryMainRepository.java
new file mode 100644
index 0000000..f7b8843
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/MemoryMainRepository.java
@@ -0,0 +1,172 @@
+package com.example.sqlbrite.todo.model;
+
+import android.support.v4.util.LruCache;
+
+import com.example.sqlbrite.todo.model.local.db.TodoItem;
+import com.example.sqlbrite.todo.ui.ListsItem;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ConcurrentHashMap;
+
+import javax.inject.Inject;
+
+import io.reactivex.Observable;
+import io.reactivex.ObservableEmitter;
+import io.reactivex.ObservableOnSubscribe;
+import io.reactivex.ObservableSource;
+import io.reactivex.functions.Function;
+import io.reactivex.subjects.PublishSubject;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/9 13:45
+ */
+
+public class MemoryMainRepository implements MainDataSource {
+    private static final int DEFAULT_CACHE_SIZE = (10 /* MiB */ * 1024 * 1024);
+
+    private final Map<Long, ListsItem> mListsItemsCache;
+
+    private final PublishSubject<List<ListsItem>> mListsItemsCacheTrigger;
+
+    private final LruCache<Long, List<TodoItem>> mTodoItemsCache;
+
+    private final PublishSubject<List<ListsItem>> mTodoItemsCacheTrigger;
+
+    @Inject
+    public MemoryMainRepository() {
+        mListsItemsCache = new ConcurrentHashMap<>(100);
+        mListsItemsCacheTrigger = PublishSubject.create();
+
+        mTodoItemsCache = new LruCache<>(DEFAULT_CACHE_SIZE);
+        mTodoItemsCacheTrigger = PublishSubject.create();
+    }
+
+    protected void refreshListsItemsCache(List<ListsItem> newData) {
+        mListsItemsCache.clear();
+        if (newData != null && !newData.isEmpty()) {
+            Iterator<ListsItem> it = newData.iterator();
+            while (it.hasNext()) {
+                ListsItem item = it.next();
+                if (item != null) {
+                    mListsItemsCache.put(Long.valueOf(item.id()), item);
+                }
+            }
+
+            if (mListsItemsCacheTrigger.hasObservers()) {
+                mListsItemsCacheTrigger.onNext(newData);
+            }
+        }
+    }
+
+    protected void putTodoItemsCache(long listId, List<TodoItem> newData) throws IOException {
+        mTodoItemsCache.put(Long.valueOf(listId), newData);
+    }
+
+    private List<TodoItem> getTodoItemsCache(long listId) {
+        return mTodoItemsCache.get(Long.valueOf(listId));
+    }
+
+    @Override
+    public Observable<List<ListsItem>> createQueryListsItems(final long max) {
+        return mListsItemsCacheTrigger
+                .startWith(Observable.fromCallable(new Callable<List<ListsItem>>() {
+                    @Override
+                    public List<ListsItem> call() throws Exception {
+                        return new ArrayList<ListsItem>(mListsItemsCache.values())
+                                .subList(0, (int) Math.min(max, mListsItemsCache.size()));
+                    }
+                }));
+    }
+
+    @Override
+    public Observable<Integer> createQueryItemCount(long listId) {
+        return mListsItemsCacheTrigger
+                .flatMap(new Function<List<ListsItem>, ObservableSource<Integer>>() {
+                    @Override
+                    public ObservableSource<Integer> apply(List<ListsItem> newData) throws Exception {
+                        ListsItem item = mListsItemsCache.get(Long.valueOf(listId));
+                        if (item != null) {
+                            return Observable.just(item.itemCount());
+                        }
+                        return Observable.empty();
+                    }
+                })
+                .startWith(Observable.create(new ObservableOnSubscribe<Integer>() {
+                    @Override
+                    public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {
+                        ListsItem item = mListsItemsCache.get(Long.valueOf(listId));
+                        if (item != null) {
+                            emitter.onNext(item.itemCount());
+                        }
+                        emitter.onComplete();
+                    }
+                }));
+    }
+
+    @Override
+    public Observable<List<TodoItem>> createQueryTodoItemsByListId(long listId) {
+        return Observable
+                .create(new ObservableOnSubscribe<List<TodoItem>>() {
+                    @Override
+                    public void subscribe(ObservableEmitter<List<TodoItem>> emitter) throws Exception {
+                        List<TodoItem> todoItems = getTodoItemsCache(listId);
+                        if (todoItems != null) {
+                            emitter.onNext(todoItems);
+                        }
+                        emitter.onComplete();
+                    }
+                });
+    }
+
+    @Override
+    public Observable<String> createQueryListName(long listId) {
+        return mListsItemsCacheTrigger
+                .flatMap(new Function<List<ListsItem>, ObservableSource<String>>() {
+                    @Override
+                    public ObservableSource<String> apply(List<ListsItem> newData) throws Exception {
+                        ListsItem item = mListsItemsCache.get(Long.valueOf(listId));
+                        if (item != null) {
+                            return Observable.just(item.name());
+                        }
+                        return Observable.empty();
+                    }
+                })
+                .startWith(Observable.create(new ObservableOnSubscribe<String>() {
+                    @Override
+                    public void subscribe(ObservableEmitter<String> emitter) throws Exception {
+                        ListsItem item = mListsItemsCache.get(Long.valueOf(listId));
+                        if (item != null) {
+                            emitter.onNext(item.name());
+                        }
+                        emitter.onComplete();
+                    }
+                }));
+    }
+
+    @Override
+    public boolean completeTodoitem(long itemId, boolean complete) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public long createNewOneTodoList(String name) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public long createNewOneTodoItem(long listId, String description) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public File exportDecryption() throws Exception {
+        throw new UnsupportedOperationException();
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java
index d3152a1..7d58f6d 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/DbCallback.java
@@ -113,6 +113,16 @@ private void init() {
                     .description("New car")
                     .complete(true)
                     .build());
+
+            long bigDataListId = db.insert(TodoList.TABLE, CONFLICT_FAIL, new TodoList.ContentValuesBuilder()
+                    .name("Big Data")
+                    .build());
+            for (int i = 1; i <= 100000; i++) {
+                db.insert(TodoItem.TABLE, CONFLICT_FAIL, new TodoItem.ContentValuesBuilder().listId(bigDataListId)
+                        .description("Data " + String.valueOf(i))
+                        .complete(true)
+                        .build());
+            }
         });
 
         upgrateToVersion((2)).subscribe(db -> {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoListDao.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoListDao.java
index acf7cb0..f424f95 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoListDao.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoListDao.java
@@ -4,7 +4,6 @@
 import android.database.Cursor;
 
 import com.squareup.sqlbrite3.BriteDatabase;
-import com.squareup.sqlbrite3.SqlBrite;
 import com.squareup.sqlbrite3.support.dao.BriteDaoSupport;
 
 import io.reactivex.Observable;
@@ -53,18 +52,10 @@ protected String toTableName(Class<TodoList> clazz) {
 
     public Observable<String> createQueryListName(long listId) {
         return createQuery(getTableName(), TITLE_QUERY, listId)
-                .map(new Function<SqlBrite.Query, String>() {
+                .mapToOne(new Function<Cursor, String>() {
                     @Override
-                    public String apply(SqlBrite.Query query) {
-                        Cursor cursor = query.run();
-                        try {
-                            if (!cursor.moveToNext()) {
-                                throw new AssertionError("No rows");
-                            }
-                            return cursor.getString(0);
-                        } finally {
-                            cursor.close();
-                        }
+                    public String apply(Cursor cursor) throws Exception {
+                        return cursor.getString(0);
                     }
                 });
     }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsAdapter.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsAdapter.java
index bac27b5..7381209 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsAdapter.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsAdapter.java
@@ -23,59 +23,68 @@
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
 import android.widget.CheckedTextView;
+
 import com.example.sqlbrite.todo.model.local.db.TodoItem;
-import io.reactivex.functions.Consumer;
+
 import java.util.Collections;
 import java.util.List;
 
-final class ItemsAdapter extends BaseAdapter implements Consumer<List<TodoItem>> {
-  private final LayoutInflater inflater;
+import io.reactivex.functions.Consumer;
 
-  private List<TodoItem> items = Collections.emptyList();
+final class ItemsAdapter extends BaseAdapter implements Consumer<List<TodoItem>> {
+    private final LayoutInflater inflater;
 
-  public ItemsAdapter(Context context) {
-    inflater = LayoutInflater.from(context);
-  }
+    private List<TodoItem> items = Collections.emptyList();
 
-  @Override public void accept(List<TodoItem> items) {
-    this.items = items;
-    notifyDataSetChanged();
-  }
+    public ItemsAdapter(Context context) {
+        inflater = LayoutInflater.from(context);
+    }
 
-  @Override public int getCount() {
-    return items.size();
-  }
+    @Override
+    public void accept(List<TodoItem> items) {
+        this.items = items;
+        notifyDataSetChanged();
+    }
 
-  @Override public TodoItem getItem(int position) {
-    return items.get(position);
-  }
+    @Override
+    public int getCount() {
+        return items.size();
+    }
 
-  @Override public long getItemId(int position) {
-    return getItem(position).id();
-  }
+    @Override
+    public TodoItem getItem(int position) {
+        return items.get(position);
+    }
 
-  @Override public boolean hasStableIds() {
-    return true;
-  }
+    @Override
+    public long getItemId(int position) {
+        return getItem(position).id();
+    }
 
-  @Override public View getView(int position, View convertView, ViewGroup parent) {
-    if (convertView == null) {
-      convertView = inflater.inflate(android.R.layout.simple_list_item_multiple_choice, parent, false);
+    @Override
+    public boolean hasStableIds() {
+        return true;
     }
 
-    TodoItem item = getItem(position);
-    CheckedTextView textView = (CheckedTextView) convertView;
-    textView.setChecked(item.complete());
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        if (convertView == null) {
+            convertView = inflater.inflate(android.R.layout.simple_list_item_multiple_choice, parent, false);
+        }
 
-    CharSequence description = item.description();
-    if (item.complete()) {
-      SpannableString spannable = new SpannableString(description);
-      spannable.setSpan(new StrikethroughSpan(), 0, description.length(), 0);
-      description = spannable;
-    }
+        TodoItem item = getItem(position);
+        CheckedTextView textView = (CheckedTextView) convertView;
+        textView.setChecked(item.complete());
+
+        CharSequence description = item.description();
+        if (item.complete()) {
+            SpannableString spannable = new SpannableString(description);
+            spannable.setSpan(new StrikethroughSpan(), 0, description.length(), 0);
+            description = spannable;
+        }
 
-    textView.setText(description);
+        textView.setText(description);
 
-    return convertView;
-  }
+        return convertView;
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
index 01997d4..5b6b810 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
@@ -21,7 +21,6 @@
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.support.v7.view.menu.MenuView;
 import android.support.v7.widget.DividerItemDecoration;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
@@ -45,7 +44,6 @@
 
 import butterknife.BindView;
 import butterknife.ButterKnife;
-import butterknife.OnItemClick;
 import io.reactivex.functions.Consumer;
 import me.drakeet.multitype.ItemViewBinder;
 import me.drakeet.multitype.MultiTypeAdapter;
@@ -131,6 +129,24 @@ public boolean onMenuItemClick(MenuItem item) {
                 });
 
         item.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);
+
+        item = menu.add("Test")
+                .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
+                    @Override
+                    public boolean onMenuItemClick(MenuItem item) {
+                        getViewModel().createQueryListsItems() // 省内存
+                                .compose(ListsFragment.this.<List<ListsItem>>bindUntilEvent(FragmentEvent.PAUSE))
+                                .observeOn(getSchedulerProvider().ui())
+                                .subscribe(new Consumer<List<ListsItem>>() {
+                                    @Override
+                                    public void accept(List<ListsItem> listsItems) throws Exception {
+                                    }
+                                });
+                        return true;
+                    }
+                });
+
+        item.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);
     }
 
     private void exportDB() {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
index d48a008..4a7df95 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
@@ -19,7 +19,6 @@
 import android.os.Parcelable;
 
 import com.example.sqlbrite.todo.model.autovalue.DateCursorTypeAdapter;
-import com.example.sqlbrite.todo.model.local.db.Db;
 import com.example.sqlbrite.todo.model.local.db.TodoItem;
 import com.example.sqlbrite.todo.model.local.db.TodoList;
 import com.gabrielittner.auto.value.cursor.ColumnAdapter;
@@ -65,4 +64,25 @@
     public static Function<Cursor, ListsItem> MAPPER_FUNCTION() {
         return AutoValue_ListsItem.MAPPER_FUNCTION;
     }
+
+    @AutoValue.Builder
+    public abstract static class Builder {
+
+        public abstract Builder id(long id);
+
+        public abstract Builder name(String name);
+
+        public abstract Builder createTimestamp(Date createTimestamp);
+
+        public abstract Builder itemCount(int itemCount);
+
+        public abstract ListsItem build();
+
+    }
+
+    public static Builder builder() {
+        return new AutoValue_ListsItem.Builder();
+    }
+
+    public abstract Builder toBuilder();
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
index 597c723..41843c5 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
@@ -5,14 +5,10 @@
 import com.squareup.sqlbrite3.BriteDatabase;
 import com.squareup.sqlbrite3.SqlBrite;
 
-import java.util.Arrays;
-import java.util.Collection;
 import java.util.List;
 
 import io.reactivex.Observable;
-import io.reactivex.SingleSource;
 import io.reactivex.functions.Function;
-import io.reactivex.functions.Predicate;
 
 public class ListsItemDao {
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
index 07bb08f..2ec1111 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/MainActivity.java
@@ -26,6 +26,7 @@
 import com.example.sqlbrite.todo.model.users.UserSession;
 import com.google.gson.reflect.TypeToken;
 
+import java.util.Date;
 import java.util.List;
 
 import io.reactivex.Observable;
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/utils/ObjectMemorySizeFetcher.java b/sample/src/main/java/com/example/sqlbrite/todo/utils/ObjectMemorySizeFetcher.java
new file mode 100644
index 0000000..ebe0b12
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/utils/ObjectMemorySizeFetcher.java
@@ -0,0 +1,40 @@
+package com.example.sqlbrite.todo.utils;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.ObjectOutputStream;
+
+/**
+ * @author Administrator
+ * @date 2018/4/26 16:24
+ */
+
+public class ObjectMemorySizeFetcher {
+
+    public static final int sizeOf(Object object) throws IOException {
+
+        if (object == null)
+            return -1;
+
+        // Special output stream use to write the content
+        // of an output stream to an internal byte array.
+        ByteArrayOutputStream byteArrayOutputStream =
+                new ByteArrayOutputStream();
+
+        // Output stream that can write object
+        ObjectOutputStream objectOutputStream =
+                new ObjectOutputStream(byteArrayOutputStream);
+
+        // Write object and close the output stream
+        objectOutputStream.writeObject(object);
+        objectOutputStream.flush();
+        objectOutputStream.close();
+
+        // Get the byte array
+        byte[] byteArray = byteArrayOutputStream.toByteArray();
+
+        // TODO can the toByteArray() method return a
+        // null array ?
+        return byteArray == null ? 0 : byteArray.length;
+    }
+}
