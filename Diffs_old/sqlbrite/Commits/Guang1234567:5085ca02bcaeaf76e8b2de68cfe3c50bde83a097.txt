diff --git a/README.md b/README.md
index 7470149..9bff554 100755
--- a/README.md
+++ b/README.md
@@ -8,6 +8,15 @@ Something I added
 
 2. Integrate [wcdb][] into `SqlBrite`.
 
+2018-3-7 16:36:29
+---------
+
+1. Integrate [ViewModel library into Sample.
+
+> Smaple = rxjava + ViewModel + SqlBrite + Dagger
+
+2. Add `BriteDaoSupport` like `HibernateDaoSupport`, in order to provide some common **CRUD** function.
+
 
 Download
 --------
diff --git a/build.gradle b/build.gradle
index c2796b3..262079e 100644
--- a/build.gradle
+++ b/build.gradle
@@ -41,6 +41,9 @@ ext {
     supportAnnotations = 'com.android.support:support-annotations:27.0.0'
     supportTestRunner = 'com.android.support.test:runner:0.5'
 
+    // https://developer.android.com/topic/libraries/architecture/adding-components.html
+    androidArchViewModel = 'android.arch.lifecycle:viewmodel:1.1.0'
+
     supportSqlite = 'android.arch.persistence:db:1.0.0'
     supportSqliteFramework = 'android.arch.persistence:db-framework:1.0.0'
 
diff --git a/daosupport/src/main/java/com/squareup/sqlbrite3/support/dao/DbUtils.java b/daosupport/src/main/java/com/squareup/sqlbrite3/support/DbUtils.java
similarity index 94%
rename from daosupport/src/main/java/com/squareup/sqlbrite3/support/dao/DbUtils.java
rename to daosupport/src/main/java/com/squareup/sqlbrite3/support/DbUtils.java
index 35febd7..f7d2088 100644
--- a/daosupport/src/main/java/com/squareup/sqlbrite3/support/dao/DbUtils.java
+++ b/daosupport/src/main/java/com/squareup/sqlbrite3/support/DbUtils.java
@@ -1,4 +1,4 @@
-package com.squareup.sqlbrite3.support.dao;
+package com.squareup.sqlbrite3.support;
 
 import android.database.Cursor;
 
diff --git a/daosupport/src/main/java/com/squareup/sqlbrite3/support/dao/BriteDaoSupport.java b/daosupport/src/main/java/com/squareup/sqlbrite3/support/dao/BriteDaoSupport.java
index f7bbd39..b3d5e6b 100644
--- a/daosupport/src/main/java/com/squareup/sqlbrite3/support/dao/BriteDaoSupport.java
+++ b/daosupport/src/main/java/com/squareup/sqlbrite3/support/dao/BriteDaoSupport.java
@@ -22,11 +22,12 @@
  */
 
 public abstract class BriteDaoSupport<ENTITY> {
-    private BriteDatabase mDatabase;
 
-    private Class mEntityClazz;
+    private final BriteDatabase mDatabase;
 
-    private String mTableName;
+    private final Class mEntityClazz;
+
+    private final String mTableName;
 
     private final String SQL_QUERY;
 
@@ -36,24 +37,28 @@ public BriteDaoSupport(BriteDatabase database) {
         ParameterizedType type = (ParameterizedType) this.getClass().getGenericSuperclass();
         mEntityClazz = (Class) type.getActualTypeArguments()[0];
 
-        mTableName = getTableName(mEntityClazz);
+        mTableName = toTableName(mEntityClazz);
 
         SQL_QUERY = new StringBuilder("SELECT * FROM ").append(mTableName).toString();
     }
 
     final public long insert(ENTITY t) {
-        ContentValues cvsWithoutRowId = toContentValues(t);
-        cvsWithoutRowId.remove(BaseColumns._ID);
-        return mDatabase.insert(mTableName, CONFLICT_NONE, cvsWithoutRowId);
+        ContentValues cvs = toContentValues(t);
+        return insert(CONFLICT_NONE, cvs);
+    }
+
+    final protected long insert(int conflictAlgorithm, ContentValues cvs) {
+        cvs.remove(BaseColumns._ID);
+        return mDatabase.insert(mTableName, conflictAlgorithm, cvs);
     }
 
     final public int deleteById(long rowId) {
         return mDatabase.delete(mTableName, BaseColumns._ID + " = " + rowId);
     }
 
-    final protected int delete(@Nullable String whereClause,
+    final protected int delete(@NonNull final String table, @Nullable String whereClause,
                                @Nullable String... whereArgs) {
-        return mDatabase.delete(mTableName, whereClause, whereArgs);
+        return mDatabase.delete(table, whereClause, whereArgs);
     }
 
     final public int update(ENTITY t) {
@@ -61,12 +66,12 @@ final public int update(ENTITY t) {
                 CONFLICT_NONE,
                 toContentValues(t),
                 BaseColumns._ID + " = ?",
-                new String[]{String.valueOf(getRowId(t))});
+                new String[]{String.valueOf(toRowId(t))});
     }
 
-    protected int update(int conflictAlgorithm,
+    protected int update(@NonNull final String table, int conflictAlgorithm,
                          @NonNull ContentValues values, @Nullable String whereClause, @Nullable String... whereArgs) {
-        return mDatabase.update(mTableName,
+        return mDatabase.update(table,
                 conflictAlgorithm,
                 values,
                 whereClause,
@@ -104,9 +109,9 @@ final public ENTITY queryById(long rowId) {
 
     @CheckResult
     @NonNull
-    final protected QueryObservable createQuery(@NonNull String sql,
+    final protected QueryObservable createQuery(@NonNull final String table, @NonNull String sql,
                                                 @NonNull Object... args) {
-        return mDatabase.createQuery(mTableName, sql, args);
+        return mDatabase.createQuery(table, sql, args);
     }
 
     @CheckResult
@@ -116,11 +121,19 @@ final protected QueryObservable createQuery(@NonNull final Iterable<String> tabl
         return mDatabase.createQuery(tables, sql, args);
     }
 
+    final protected Class getEntityClazz() {
+        return mEntityClazz;
+    }
+
+    final protected String getTableName() {
+        return mTableName;
+    }
+
     protected abstract ContentValues toContentValues(ENTITY e);
 
     protected abstract ENTITY toEntity(Cursor cursor);
 
-    protected abstract long getRowId(ENTITY e);
+    protected abstract long toRowId(ENTITY e);
 
-    protected abstract String getTableName(Class<ENTITY> clazz);
+    protected abstract String toTableName(Class<ENTITY> clazz);
 }
diff --git a/sample/build.gradle b/sample/build.gradle
index 2d8a147..457cb50 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -25,9 +25,12 @@ dependencies {
     //implementation project(':sqlbrite-sqlcipher-integration')
     implementation rootProject.ext.supportSqlcipher
     implementation rootProject.ext.sqlbrite_sqlcipher_integration
-    //implementation project(':sqlbrite-wcdb-integration')
-    implementation rootProject.ext.supportWcdb
-    implementation rootProject.ext.sqlbrite_wcdb_integration
+    implementation project(':sqlbrite-wcdb-integration')
+    //implementation rootProject.ext.supportWcdb
+    //implementation rootProject.ext.sqlbrite_wcdb_integration
+
+    implementation rootProject.ext.androidArchViewModel
+    implementation "android.arch.lifecycle:extensions:1.1.0"
 }
 
 android {
diff --git a/sample/src/main/AndroidManifest.xml b/sample/src/main/AndroidManifest.xml
index cd8b9ac..ee8b95b 100644
--- a/sample/src/main/AndroidManifest.xml
+++ b/sample/src/main/AndroidManifest.xml
@@ -3,7 +3,9 @@
     package="com.example.sqlbrite.todo"
     >
 
-  <application
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+
+    <application
       android:label="@string/app_name"
       android:name=".TodoApp"
       android:allowBackup="false"
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/TodoComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/TodoComponent.java
index f53ca23..c2740d4 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/TodoComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/TodoComponent.java
@@ -19,18 +19,20 @@
 import com.example.sqlbrite.todo.ui.ListsFragment;
 import com.example.sqlbrite.todo.ui.NewItemFragment;
 import com.example.sqlbrite.todo.ui.NewListFragment;
-import dagger.Component;
+
 import javax.inject.Singleton;
 
+import dagger.Component;
+
 @Singleton
 @Component(modules = TodoModule.class)
 public interface TodoComponent {
 
-  void inject(ListsFragment fragment);
+    void inject(ListsFragment fragment);
 
-  void inject(ItemsFragment fragment);
+    void inject(ItemsFragment fragment);
 
-  void inject(NewItemFragment fragment);
+    void inject(NewItemFragment fragment);
 
-  void inject(NewListFragment fragment);
+    void inject(NewListFragment fragment);
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java b/sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java
index ce901bb..6d9ce55 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/TodoModule.java
@@ -16,24 +16,31 @@
 package com.example.sqlbrite.todo;
 
 import android.app.Application;
+
+import com.example.sqlbrite.todo.controler.ViewModelModule;
 import com.example.sqlbrite.todo.db.DbModule;
+
+import javax.inject.Singleton;
+
 import dagger.Module;
 import dagger.Provides;
-import javax.inject.Singleton;
 
 @Module(
-    includes = {
-        DbModule.class,
-    }
+        includes = {
+                DbModule.class,
+                ViewModelModule.class
+        }
 )
 public final class TodoModule {
-  private final Application application;
+    private final Application application;
 
-  TodoModule(Application application) {
-    this.application = application;
-  }
+    TodoModule(Application application) {
+        this.application = application;
+    }
 
-  @Provides @Singleton Application provideApplication() {
-    return application;
-  }
+    @Provides
+    @Singleton
+    Application provideApplication() {
+        return application;
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
new file mode 100644
index 0000000..c9bac04
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/MainViewModel.java
@@ -0,0 +1,82 @@
+package com.example.sqlbrite.todo.controler;
+
+import android.arch.lifecycle.ViewModel;
+import android.arch.persistence.db.wcdb.WcdbUtils;
+import android.os.Environment;
+
+import com.example.sqlbrite.todo.db.TodoItem;
+import com.example.sqlbrite.todo.db.TodoItemDao;
+import com.example.sqlbrite.todo.db.TodoListDao;
+import com.example.sqlbrite.todo.ui.ListsItem;
+import com.example.sqlbrite.todo.ui.ListsItemDao;
+import com.squareup.sqlbrite3.BriteDatabase;
+
+import java.io.File;
+import java.util.List;
+
+import javax.inject.Inject;
+
+import io.reactivex.Observable;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/6 14:40
+ */
+
+public class MainViewModel extends ViewModel {
+
+    @Inject
+    BriteDatabase mBriteDatabaseb;
+
+    private final ListsItemDao mListsItemDao;
+
+    private final TodoListDao mTodoListDao;
+
+    private final TodoItemDao mTodoItemDao;
+
+    @Inject
+    public MainViewModel(ListsItemDao listsItemDao, TodoListDao todoListDao, TodoItemDao todoItemDao, BriteDatabase db) {
+        mListsItemDao = listsItemDao;
+        mTodoListDao = todoListDao;
+        mTodoItemDao = todoItemDao;
+        mBriteDatabaseb = db;
+    }
+
+    public Observable<List<ListsItem>> createQueryListsItems() {
+        return mListsItemDao.createQueryListsItems(100); // 省内存
+    }
+
+    public boolean complete(long id, boolean complete) {
+        return mTodoItemDao.complete(id, complete);
+    }
+
+    public Observable<Integer> createQueryItemCount(long listId) {
+        return mTodoItemDao.createQueryItemCount(listId);
+    }
+
+    public Observable<List<TodoItem>> createQueryTodoItemsByListId(long listId) {
+        return mTodoItemDao.createQueryTodoItemsByListId(listId);
+    }
+
+    public Observable<String> createQueryListName(long listId) {
+        return mTodoListDao.createQueryListName(listId);
+    }
+
+    public long createNewOneTodoList(String name) {
+        return mTodoListDao.createNewOne(name);
+    }
+
+    public long createNewOneTodoItem(long listId, String description) {
+        return mTodoItemDao.createNewOne(listId, description);
+    }
+
+    public File exportDecryption() throws Exception {
+        File dir = Environment.getExternalStorageDirectory();
+        File dstFile = new File(dir, "todo-list-backup.db");
+        if (!dstFile.exists()) {
+            dstFile.createNewFile();
+        }
+        WcdbUtils.exportDecryption(mBriteDatabaseb.getReadableDatabase(), dstFile);
+        return dstFile;
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/TodoViewModelFactory.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/TodoViewModelFactory.java
new file mode 100644
index 0000000..72aa478
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/TodoViewModelFactory.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.example.sqlbrite.todo.controler;
+
+import android.arch.lifecycle.ViewModel;
+import android.arch.lifecycle.ViewModelProvider;
+
+import java.util.Map;
+
+import javax.inject.Inject;
+import javax.inject.Provider;
+import javax.inject.Singleton;
+
+@Singleton
+public class TodoViewModelFactory implements ViewModelProvider.Factory {
+    private final Map<Class<? extends ViewModel>, Provider<ViewModel>> creators;
+
+    @Inject
+    public TodoViewModelFactory(Map<Class<? extends ViewModel>, Provider<ViewModel>> creators) {
+        this.creators = creators;
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public <T extends ViewModel> T create(Class<T> modelClass) {
+        Provider<? extends ViewModel> creator = creators.get(modelClass);
+        if (creator == null) {
+            for (Map.Entry<Class<? extends ViewModel>, Provider<ViewModel>> entry : creators.entrySet()) {
+                if (modelClass.isAssignableFrom(entry.getKey())) {
+                    creator = entry.getValue();
+                    break;
+                }
+            }
+        }
+        if (creator == null) {
+            throw new IllegalArgumentException("unknown model class " + modelClass);
+        }
+        try {
+            return (T) creator.get();
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/ViewModelKey.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/ViewModelKey.java
new file mode 100644
index 0000000..7a88fbf
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/ViewModelKey.java
@@ -0,0 +1,19 @@
+package com.example.sqlbrite.todo.controler;
+
+import android.arch.lifecycle.ViewModel;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+import dagger.MapKey;
+
+@Documented
+@Target({ElementType.METHOD})
+@Retention(RetentionPolicy.RUNTIME)
+@MapKey
+@interface ViewModelKey {
+    Class<? extends ViewModel> value();
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/controler/ViewModelModule.java b/sample/src/main/java/com/example/sqlbrite/todo/controler/ViewModelModule.java
new file mode 100644
index 0000000..c324a0d
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/controler/ViewModelModule.java
@@ -0,0 +1,19 @@
+package com.example.sqlbrite.todo.controler;
+
+import android.arch.lifecycle.ViewModel;
+import android.arch.lifecycle.ViewModelProvider;
+
+import dagger.Binds;
+import dagger.Module;
+import dagger.multibindings.IntoMap;
+
+@Module
+public abstract class ViewModelModule {
+    @Binds
+    @IntoMap
+    @ViewModelKey(MainViewModel.class)
+    abstract ViewModel bindMainViewModel(MainViewModel viewModel);
+
+    @Binds
+    abstract ViewModelProvider.Factory bindViewModelFactory(TodoViewModelFactory factory);
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java b/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
index 48b257e..b6e815d 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
@@ -23,6 +23,7 @@
 import android.arch.persistence.db.sqlcipher.SqlcipherSQLiteOpenHelperFactory;
 import android.arch.persistence.db.wcdb.WcdbSQLiteOpenHelperFactory;
 
+import com.example.sqlbrite.todo.ui.ListsItemDao;
 import com.squareup.sqlbrite3.BriteDatabase;
 import com.squareup.sqlbrite3.SqlBrite;
 
@@ -126,4 +127,10 @@ TodoListDao provideTodoListDao(BriteDatabase db) {
     TodoItemDao provideTodoItemDao(BriteDatabase db) {
         return new TodoItemDao(db);
     }
+
+    @Provides
+    @Singleton
+    ListsItemDao provideListsItemDao(BriteDatabase db) {
+        return new ListsItemDao(db);
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoItemDao.java b/sample/src/main/java/com/example/sqlbrite/todo/db/TodoItemDao.java
index 85cfd1a..0c3aa18 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoItemDao.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/db/TodoItemDao.java
@@ -15,7 +15,7 @@
 import static android.database.sqlite.SQLiteDatabase.CONFLICT_NONE;
 
 /**
- * @author Administrator
+ * @author Guang1234567
  * @date 2018/3/5 18:04
  */
 
@@ -36,12 +36,12 @@ protected TodoItem toEntity(Cursor cursor) {
     }
 
     @Override
-    protected long getRowId(TodoItem e) {
+    protected long toRowId(TodoItem e) {
         return e.id();
     }
 
     @Override
-    protected String getTableName(Class<TodoItem> clazz) {
+    protected String toTableName(Class<TodoItem> clazz) {
         return TodoItem.TABLE;
     }
 
@@ -52,7 +52,7 @@ protected String getTableName(Class<TodoItem> clazz) {
 
 
     public boolean complete(long id, boolean complete) {
-        return update(CONFLICT_NONE,
+        return update(getTableName(), CONFLICT_NONE,
                 new TodoItem.Builder().complete(complete).build(), TodoItem.ID + " = ?",
                 String.valueOf(id)) > 0;
     }
@@ -67,8 +67,8 @@ public boolean complete(long id, boolean complete) {
             + TodoItem.LIST_ID
             + " = ?";
 
-    public Observable<Integer> itemCount(long listId) {
-        return createQuery(COUNT_QUERY, listId) //
+    public Observable<Integer> createQueryItemCount(long listId) {
+        return createQuery(getTableName(), COUNT_QUERY, listId) //
                 .map(new Function<SqlBrite.Query, Integer>() {
                     @Override
                     public Integer apply(SqlBrite.Query query) {
@@ -93,8 +93,16 @@ public Integer apply(SqlBrite.Query query) {
             + TodoItem.COMPLETE
             + " ASC";
 
-    public Observable<List<TodoItem>> createTodoItemsByListId(long listId) {
-        return createQuery(LIST_QUERY, listId)
+    public Observable<List<TodoItem>> createQueryTodoItemsByListId(long listId) {
+        return createQuery(getTableName(), LIST_QUERY, listId)
                 .mapToList(TodoItem.MAPPER);
     }
+
+    public long createNewOne(long listId, String description) {
+        return insert(CONFLICT_NONE,
+                new TodoItem.Builder()
+                        .listId(listId)
+                        .description(description)
+                        .build());
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoList.java b/sample/src/main/java/com/example/sqlbrite/todo/db/TodoList.java
index 5b40973..f384cd5 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoList.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/db/TodoList.java
@@ -20,7 +20,7 @@
 import android.os.Parcelable;
 
 import com.google.auto.value.AutoValue;
-import com.squareup.sqlbrite3.support.dao.DbUtils;
+import com.squareup.sqlbrite3.support.DbUtils;
 
 import io.reactivex.functions.Function;
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoListDao.java b/sample/src/main/java/com/example/sqlbrite/todo/db/TodoListDao.java
index e2424fc..d4475d1 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/db/TodoListDao.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/db/TodoListDao.java
@@ -3,19 +3,17 @@
 import android.content.ContentValues;
 import android.database.Cursor;
 
-import com.example.sqlbrite.todo.ui.ListsItem;
 import com.squareup.sqlbrite3.BriteDatabase;
 import com.squareup.sqlbrite3.SqlBrite;
 import com.squareup.sqlbrite3.support.dao.BriteDaoSupport;
 
-import java.util.List;
-
 import io.reactivex.Observable;
-import io.reactivex.SingleSource;
 import io.reactivex.functions.Function;
 
+import static android.database.sqlite.SQLiteDatabase.CONFLICT_NONE;
+
 /**
- * @author Administrator
+ * @author Guang1234567
  * @date 2018/3/5 17:22
  */
 
@@ -36,12 +34,12 @@ protected TodoList toEntity(Cursor cursor) {
     }
 
     @Override
-    protected long getRowId(TodoList e) {
+    protected long toRowId(TodoList e) {
         return e.id();
     }
 
     @Override
-    protected String getTableName(Class<TodoList> clazz) {
+    protected String toTableName(Class<TodoList> clazz) {
         return TodoList.TABLE;
     }
 
@@ -50,35 +48,28 @@ protected String getTableName(Class<TodoList> clazz) {
     // 业务逻辑
     //------------------------------------------------------------
 
-    public Observable<List<ListsItem>> createListsItemsQuery(final int max) {
-        return createQuery(ListsItem.TABLES, ListsItem.QUERY)
-                .flatMapSingle(new Function<SqlBrite.Query, SingleSource<List<ListsItem>>>() {
+    private static final String TITLE_QUERY =
+            "SELECT " + TodoList.NAME + " FROM " + TodoList.TABLE + " WHERE " + TodoList.ID + " = ?";
+
+    public Observable<String> createQueryListName(long listId) {
+        return createQuery(getTableName(), TITLE_QUERY, listId)
+                .map(new Function<SqlBrite.Query, String>() {
                     @Override
-                    public SingleSource<List<ListsItem>> apply(SqlBrite.Query query) throws Exception {
-                        return query.asRows(ListsItem.MAPPER)
-                                .take(max)
-                                .toList();
+                    public String apply(SqlBrite.Query query) {
+                        Cursor cursor = query.run();
+                        try {
+                            if (!cursor.moveToNext()) {
+                                throw new AssertionError("No rows");
+                            }
+                            return cursor.getString(0);
+                        } finally {
+                            cursor.close();
+                        }
                     }
                 });
     }
 
-    private static final String TITLE_QUERY =
-            "SELECT " + TodoList.NAME + " FROM " + TodoList.TABLE + " WHERE " + TodoList.ID + " = ?";
-
-    public Observable<String> listName(long listId) {
-        return createQuery(TITLE_QUERY, listId).map(new Function<SqlBrite.Query, String>() {
-            @Override
-            public String apply(SqlBrite.Query query) {
-                Cursor cursor = query.run();
-                try {
-                    if (!cursor.moveToNext()) {
-                        throw new AssertionError("No rows");
-                    }
-                    return cursor.getString(0);
-                } finally {
-                    cursor.close();
-                }
-            }
-        });
+    public long createNewOne(String name) {
+        return insert(CONFLICT_NONE, new TodoList.Builder().name(name).build());
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
index 8db57fb..557aa37 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ItemsFragment.java
@@ -16,7 +16,8 @@
 package com.example.sqlbrite.todo.ui;
 
 import android.app.Activity;
-import android.database.Cursor;
+import android.arch.lifecycle.ViewModelProvider;
+import android.arch.lifecycle.ViewModelProviders;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
@@ -28,141 +29,161 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ListView;
+
 import butterknife.BindView;
 import butterknife.ButterKnife;
+
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
-import com.example.sqlbrite.todo.db.Db;
-import com.example.sqlbrite.todo.db.TodoItem;
+import com.example.sqlbrite.todo.controler.MainViewModel;
 import com.example.sqlbrite.todo.db.TodoItemDao;
-import com.example.sqlbrite.todo.db.TodoList;
 import com.example.sqlbrite.todo.db.TodoListDao;
 import com.jakewharton.rxbinding2.widget.AdapterViewItemClickEvent;
 import com.jakewharton.rxbinding2.widget.RxAdapterView;
-import com.squareup.sqlbrite3.BriteDatabase;
+
 import io.reactivex.Observable;
 import io.reactivex.android.schedulers.AndroidSchedulers;
 import io.reactivex.disposables.CompositeDisposable;
 import io.reactivex.functions.BiFunction;
 import io.reactivex.functions.Consumer;
-import io.reactivex.functions.Function;
 import io.reactivex.schedulers.Schedulers;
+
 import javax.inject.Inject;
 
-import static android.database.sqlite.SQLiteDatabase.CONFLICT_NONE;
 import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_IF_ROOM;
 import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_WITH_TEXT;
-import static com.squareup.sqlbrite3.SqlBrite.Query;
 
 public final class ItemsFragment extends Fragment {
-  private static final String KEY_LIST_ID = "list_id";
+    private static final String KEY_LIST_ID = "list_id";
 
-  public interface Listener {
-    void onNewItemClicked(long listId);
-  }
+    public interface Listener {
+        void onNewItemClicked(long listId);
+    }
 
-  public static ItemsFragment newInstance(long listId) {
-    Bundle arguments = new Bundle();
-    arguments.putLong(KEY_LIST_ID, listId);
+    public static ItemsFragment newInstance(long listId) {
+        Bundle arguments = new Bundle();
+        arguments.putLong(KEY_LIST_ID, listId);
 
-    ItemsFragment fragment = new ItemsFragment();
-    fragment.setArguments(arguments);
-    return fragment;
-  }
+        ItemsFragment fragment = new ItemsFragment();
+        fragment.setArguments(arguments);
+        return fragment;
+    }
 
+/*
   @Inject
   TodoItemDao todoItemDao;
   @Inject
   TodoListDao todoListDao;
+*/
+
+    @Inject
+    ViewModelProvider.Factory mViewModelFactory;
 
-  @BindView(android.R.id.list) ListView listView;
-  @BindView(android.R.id.empty) View emptyView;
+    //@Inject
+    MainViewModel mViewModel;
 
-  private Listener listener;
-  private ItemsAdapter adapter;
-  private CompositeDisposable disposables;
+    @BindView(android.R.id.list)
+    ListView listView;
+    @BindView(android.R.id.empty)
+    View emptyView;
 
-  private long getListId() {
-    return getArguments().getLong(KEY_LIST_ID);
-  }
+    private Listener listener;
+    private ItemsAdapter adapter;
+    private CompositeDisposable disposables;
 
-  @Override public void onAttach(Activity activity) {
-    if (!(activity instanceof Listener)) {
-      throw new IllegalStateException("Activity must implement fragment Listener.");
+    private long getListId() {
+        return getArguments().getLong(KEY_LIST_ID);
     }
 
-    super.onAttach(activity);
-    TodoApp.getComponent(activity).inject(this);
-    setHasOptionsMenu(true);
-
-    listener = (Listener) activity;
-    adapter = new ItemsAdapter(activity);
-  }
-
-  @Override public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-    super.onCreateOptionsMenu(menu, inflater);
-
-    MenuItem item = menu.add(R.string.new_item)
-        .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
-          @Override public boolean onMenuItemClick(MenuItem item) {
-            listener.onNewItemClicked(getListId());
-            return true;
-          }
-        });
-    MenuItemCompat.setShowAsAction(item, SHOW_AS_ACTION_IF_ROOM | SHOW_AS_ACTION_WITH_TEXT);
-  }
-
-  @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
-      @Nullable Bundle savedInstanceState) {
-    return inflater.inflate(R.layout.items, container, false);
-  }
-
-  @Override
-  public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
-    super.onViewCreated(view, savedInstanceState);
-    ButterKnife.bind(this, view);
-    listView.setEmptyView(emptyView);
-    listView.setAdapter(adapter);
-
-    RxAdapterView.itemClickEvents(listView)
-        .observeOn(Schedulers.io())
-        .subscribe(new Consumer<AdapterViewItemClickEvent>() {
-          @Override public void accept(AdapterViewItemClickEvent event) {
-            boolean newValue = !adapter.getItem(event.position()).complete();
-            todoItemDao.complete(event.id(), newValue);
-          }
-        });
-  }
-
-  @Override public void onResume() {
-    super.onResume();
-    long listId = getListId();
-
-    disposables = new CompositeDisposable();
-
-    Observable<Integer> itemCount = todoItemDao.itemCount(listId);
-    Observable<String> listName = todoListDao.listName(listId);
-
-    disposables.add(
-        Observable.combineLatest(listName, itemCount, new BiFunction<String, Integer, String>() {
-          @Override public String apply(String listName, Integer itemCount) {
-            return listName + " (" + itemCount + ")";
-          }
-        })
-            .observeOn(AndroidSchedulers.mainThread())
-            .subscribe(new Consumer<String>() {
-              @Override public void accept(String title) throws Exception {
-                getActivity().setTitle(title);
-              }
-            }));
-
-    disposables.add(todoItemDao.createTodoItemsByListId(listId)
-        .observeOn(AndroidSchedulers.mainThread())
-        .subscribe(adapter));
-  }
-
-  @Override public void onPause() {
-    super.onPause();
-    disposables.dispose();
-  }
+    @Override
+    public void onAttach(Activity activity) {
+        if (!(activity instanceof Listener)) {
+            throw new IllegalStateException("Activity must implement fragment Listener.");
+        }
+
+        super.onAttach(activity);
+        TodoApp.getComponent(activity).inject(this);
+        setHasOptionsMenu(true);
+
+        listener = (Listener) activity;
+        adapter = new ItemsAdapter(activity);
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        super.onCreateOptionsMenu(menu, inflater);
+
+        MenuItem item = menu.add(R.string.new_item)
+                .setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
+                    @Override
+                    public boolean onMenuItemClick(MenuItem item) {
+                        listener.onNewItemClicked(getListId());
+                        return true;
+                    }
+                });
+        MenuItemCompat.setShowAsAction(item, SHOW_AS_ACTION_IF_ROOM | SHOW_AS_ACTION_WITH_TEXT);
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
+                             @Nullable Bundle savedInstanceState) {
+        return inflater.inflate(R.layout.items, container, false);
+    }
+
+    @Override
+    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+
+        mViewModel = ViewModelProviders.of(getActivity(), mViewModelFactory).get(MainViewModel.class);
+
+        ButterKnife.bind(this, view);
+        listView.setEmptyView(emptyView);
+        listView.setAdapter(adapter);
+
+        RxAdapterView.itemClickEvents(listView)
+                .observeOn(Schedulers.io())
+                .subscribe(new Consumer<AdapterViewItemClickEvent>() {
+                    @Override
+                    public void accept(AdapterViewItemClickEvent event) {
+                        boolean newValue = !adapter.getItem(event.position()).complete();
+                        mViewModel.complete(event.id(), newValue);
+                    }
+                });
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        long listId = getListId();
+
+        disposables = new CompositeDisposable();
+
+        Observable<Integer> itemCount = mViewModel.createQueryItemCount(listId);
+        Observable<String> listName = mViewModel.createQueryListName(listId);
+
+        disposables.add(
+                Observable.combineLatest(listName, itemCount, new BiFunction<String, Integer, String>() {
+                    @Override
+                    public String apply(String listName, Integer itemCount) {
+                        return listName + " (" + itemCount + ")";
+                    }
+                })
+                        .observeOn(AndroidSchedulers.mainThread())
+                        .subscribe(new Consumer<String>() {
+                            @Override
+                            public void accept(String title) throws Exception {
+                                getActivity().setTitle(title);
+                            }
+                        }));
+
+        disposables.add(mViewModel.createQueryTodoItemsByListId(listId)
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(adapter));
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        disposables.dispose();
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
index 06c33b4..fc645a8 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsFragment.java
@@ -16,26 +16,35 @@
 package com.example.sqlbrite.todo.ui;
 
 import android.app.Activity;
+import android.arch.lifecycle.ViewModelProvider;
+import android.arch.lifecycle.ViewModelProviders;
 import android.os.Bundle;
+import android.os.Environment;
 import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
 import android.support.v4.view.MenuItemCompat;
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.Button;
 import android.widget.ListView;
+import android.widget.Toast;
 
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
-import com.example.sqlbrite.todo.db.TodoListDao;
+import com.example.sqlbrite.todo.controler.MainViewModel;
+
+import java.io.File;
 
 import javax.inject.Inject;
 
 import butterknife.BindView;
 import butterknife.ButterKnife;
+import butterknife.OnClick;
 import butterknife.OnItemClick;
 import io.reactivex.android.schedulers.AndroidSchedulers;
 import io.reactivex.disposables.Disposable;
@@ -44,6 +53,8 @@
 import static android.support.v4.view.MenuItemCompat.SHOW_AS_ACTION_WITH_TEXT;
 
 public final class ListsFragment extends Fragment {
+    private static final String TAG = "ListsFragment";
+
     interface Listener {
         void onListClicked(long id);
 
@@ -54,13 +65,26 @@ static ListsFragment newInstance() {
         return new ListsFragment();
     }
 
+/*
+    @Inject
+    BriteDatabase db;
+
+    @Inject
+    ListsItemDao mListsItemDao;
+*/
+
     @Inject
-    TodoListDao todoListDao;
+    ViewModelProvider.Factory mViewModelFactory;
+
+    //@Inject
+    MainViewModel mViewModel;
 
     @BindView(android.R.id.list)
     ListView listView;
     @BindView(android.R.id.empty)
     View emptyView;
+    @BindView(R.id.export_db)
+    Button btnExportDB;
 
     private Listener listener;
     private ListsAdapter adapter;
@@ -109,11 +133,28 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
         listView.setAdapter(adapter);
     }
 
+    @OnClick(R.id.export_db)
+    void onExportDB(View btn) {
+        try {
+            File dstFile = mViewModel.exportDecryption();
+            Toast.makeText(getContext(), "导出数据库成功!\n" + dstFile.getPath(), Toast.LENGTH_SHORT).show();
+        } catch (Exception e) {
+            Log.e(TAG, "导出数据库失败!", e);
+            Toast.makeText(getContext(), "导出数据库失败!", Toast.LENGTH_SHORT).show();
+        }
+    }
+
     @OnItemClick(android.R.id.list)
     void listClicked(long listId) {
         listener.onListClicked(listId);
     }
 
+    @Override
+    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        mViewModel = ViewModelProviders.of(getActivity(), mViewModelFactory).get(MainViewModel.class);
+    }
+
     @Override
     public void onResume() {
         super.onResume();
@@ -126,7 +167,7 @@ public void onResume() {
         .subscribe(adapter);*/
 
 
-        disposable = todoListDao.createListsItemsQuery(5) // 省内存
+        disposable = mViewModel.createQueryListsItems() // 省内存
                 .observeOn(AndroidSchedulers.mainThread())
                 .subscribe(adapter);
     }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
index 1f70ee1..75fc3db 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItem.java
@@ -17,42 +17,31 @@
 
 import android.database.Cursor;
 import android.os.Parcelable;
+
 import com.example.sqlbrite.todo.db.Db;
-import com.example.sqlbrite.todo.db.TodoItem;
 import com.example.sqlbrite.todo.db.TodoList;
 import com.google.auto.value.AutoValue;
+
 import io.reactivex.functions.Function;
-import java.util.Arrays;
-import java.util.Collection;
 
 @AutoValue
 public abstract class ListsItem implements Parcelable {
-  private static String ALIAS_LIST = "list";
-  private static String ALIAS_ITEM = "item";
-
-  private static String LIST_ID = ALIAS_LIST + "." + TodoList.ID;
-  private static String LIST_NAME = ALIAS_LIST + "." + TodoList.NAME;
-  private static String ITEM_COUNT = "item_count";
-  private static String ITEM_ID = ALIAS_ITEM + "." + TodoItem.ID;
-  private static String ITEM_LIST_ID = ALIAS_ITEM + "." + TodoItem.LIST_ID;
-
-  public static Collection<String> TABLES = Arrays.asList(TodoList.TABLE, TodoItem.TABLE);
-  public static String QUERY = ""
-      + "SELECT " + LIST_ID + ", " + LIST_NAME + ", COUNT(" + ITEM_ID + ") as " + ITEM_COUNT
-      + " FROM " + TodoList.TABLE + " AS " + ALIAS_LIST
-      + " LEFT OUTER JOIN " + TodoItem.TABLE + " AS " + ALIAS_ITEM + " ON " + LIST_ID + " = " + ITEM_LIST_ID
-      + " GROUP BY " + LIST_ID;
-
-  abstract long id();
-  abstract String name();
-  abstract int itemCount();
-
-  public static Function<Cursor, ListsItem> MAPPER = new Function<Cursor, ListsItem>() {
-    @Override public ListsItem apply(Cursor cursor) {
-      long id = Db.getLong(cursor, TodoList.ID);
-      String name = Db.getString(cursor, TodoList.NAME);
-      int itemCount = Db.getInt(cursor, ITEM_COUNT);
-      return new AutoValue_ListsItem(id, name, itemCount);
-    }
-  };
+
+    public final static String ITEM_COUNT = "item_count";
+
+    abstract long id();
+
+    abstract String name();
+
+    abstract int itemCount();
+
+    public static Function<Cursor, ListsItem> MAPPER = new Function<Cursor, ListsItem>() {
+        @Override
+        public ListsItem apply(Cursor cursor) {
+            long id = Db.getLong(cursor, TodoList.ID);
+            String name = Db.getString(cursor, TodoList.NAME);
+            int itemCount = Db.getInt(cursor, ITEM_COUNT);
+            return new AutoValue_ListsItem(id, name, itemCount);
+        }
+    };
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
new file mode 100644
index 0000000..7fc9cf4
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/ListsItemDao.java
@@ -0,0 +1,56 @@
+package com.example.sqlbrite.todo.ui;
+
+import com.example.sqlbrite.todo.db.TodoItem;
+import com.example.sqlbrite.todo.db.TodoList;
+import com.squareup.sqlbrite3.BriteDatabase;
+import com.squareup.sqlbrite3.SqlBrite;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+
+import io.reactivex.Observable;
+import io.reactivex.SingleSource;
+import io.reactivex.functions.Function;
+
+public class ListsItemDao {
+
+    private final BriteDatabase mDatabase;
+
+    public ListsItemDao(BriteDatabase database) {
+        mDatabase = database;
+    }
+
+    //------------------------------------------------------------
+    // 业务逻辑
+    //------------------------------------------------------------
+
+    private static String ALIAS_LIST = "list";
+    private static String ALIAS_ITEM = "item";
+
+    private static String LIST_ID = ALIAS_LIST + "." + TodoList.ID;
+    private static String LIST_NAME = ALIAS_LIST + "." + TodoList.NAME;
+    private static String ITEM_ID = ALIAS_ITEM + "." + TodoItem.ID;
+    private static String ITEM_LIST_ID = ALIAS_ITEM + "." + TodoItem.LIST_ID;
+
+    public static Collection<String> TABLES = Arrays.asList(TodoList.TABLE, TodoItem.TABLE);
+    public static String QUERY = ""
+            + "SELECT " + LIST_ID + ", " + LIST_NAME + ", COUNT(" + ITEM_ID + ") as " + ListsItem.ITEM_COUNT
+            + " FROM " + TodoList.TABLE + " AS " + ALIAS_LIST
+            + " LEFT OUTER JOIN " + TodoItem.TABLE + " AS " + ALIAS_ITEM + " ON " + LIST_ID + " = " + ITEM_LIST_ID
+            + " GROUP BY " + LIST_ID;
+
+    public Observable<List<ListsItem>> createQueryListsItems(final int max) {
+        return mDatabase.createQuery(TABLES, QUERY)
+                .flatMapSingle(new Function<SqlBrite.Query, SingleSource<List<ListsItem>>>() {
+                    @Override
+                    public SingleSource<List<ListsItem>> apply(SqlBrite.Query query) throws Exception {
+                        return query.asRows(ListsItem.MAPPER)
+                                .take(max)
+                                .toList();
+                    }
+                });
+    }
+
+
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
index d584d97..27b9f0a 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewItemFragment.java
@@ -18,6 +18,8 @@
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Dialog;
+import android.arch.lifecycle.ViewModelProvider;
+import android.arch.lifecycle.ViewModelProviders;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.os.Bundle;
@@ -26,77 +28,96 @@
 import android.view.LayoutInflater;
 import android.view.View;
 import android.widget.EditText;
+
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
-import com.example.sqlbrite.todo.db.TodoItem;
+import com.example.sqlbrite.todo.controler.MainViewModel;
+import com.example.sqlbrite.todo.db.TodoItemDao;
 import com.jakewharton.rxbinding2.widget.RxTextView;
-import com.squareup.sqlbrite3.BriteDatabase;
+
+import javax.inject.Inject;
+
 import io.reactivex.Observable;
 import io.reactivex.functions.BiFunction;
 import io.reactivex.functions.Consumer;
 import io.reactivex.schedulers.Schedulers;
 import io.reactivex.subjects.PublishSubject;
-import javax.inject.Inject;
 
-import static android.database.sqlite.SQLiteDatabase.CONFLICT_NONE;
 import static butterknife.ButterKnife.findById;
 
 public final class NewItemFragment extends DialogFragment {
-  private static final String KEY_LIST_ID = "list_id";
-
-  public static NewItemFragment newInstance(long listId) {
-    Bundle arguments = new Bundle();
-    arguments.putLong(KEY_LIST_ID, listId);
-
-    NewItemFragment fragment = new NewItemFragment();
-    fragment.setArguments(arguments);
-    return fragment;
-  }
-
-  private final PublishSubject<String> createClicked = PublishSubject.create();
-
-  @Inject BriteDatabase db;
-
-  private long getListId() {
-    return getArguments().getLong(KEY_LIST_ID);
-  }
-
-  @Override public void onAttach(Activity activity) {
-    super.onAttach(activity);
-    TodoApp.getComponent(activity).inject(this);
-  }
-
-  @NonNull @Override public Dialog onCreateDialog(Bundle savedInstanceState) {
-    final Context context = getActivity();
-    View view = LayoutInflater.from(context).inflate(R.layout.new_item, null);
-
-    EditText name = findById(view, android.R.id.input);
-    Observable.combineLatest(createClicked, RxTextView.textChanges(name),
-        new BiFunction<String, CharSequence, String>() {
-          @Override public String apply(String ignored, CharSequence text) {
-            return text.toString();
-          }
-        }) //
-        .observeOn(Schedulers.io())
-        .subscribe(new Consumer<String>() {
-          @Override public void accept(String description) {
-            db.insert(TodoItem.TABLE, CONFLICT_NONE,
-                new TodoItem.Builder().listId(getListId()).description(description).build());
-          }
-        });
-
-    return new AlertDialog.Builder(context) //
-        .setTitle(R.string.new_item)
-        .setView(view)
-        .setPositiveButton(R.string.create, new DialogInterface.OnClickListener() {
-          @Override public void onClick(DialogInterface dialog, int which) {
-            createClicked.onNext("clicked");
-          }
-        })
-        .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
-          @Override public void onClick(@NonNull DialogInterface dialog, int which) {
-          }
-        })
-        .create();
-  }
+    private static final String KEY_LIST_ID = "list_id";
+
+    public static NewItemFragment newInstance(long listId) {
+        Bundle arguments = new Bundle();
+        arguments.putLong(KEY_LIST_ID, listId);
+
+        NewItemFragment fragment = new NewItemFragment();
+        fragment.setArguments(arguments);
+        return fragment;
+    }
+
+    private final PublishSubject<String> createClicked = PublishSubject.create();
+
+/*
+    @Inject
+    TodoItemDao todoItemDao;
+*/
+
+    @Inject
+    ViewModelProvider.Factory mViewModelFactory;
+
+    //@Inject
+    MainViewModel mViewModel;
+
+    private long getListId() {
+        return getArguments().getLong(KEY_LIST_ID);
+    }
+
+    @Override
+    public void onAttach(Activity activity) {
+        super.onAttach(activity);
+        TodoApp.getComponent(activity).inject(this);
+    }
+
+    @NonNull
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        mViewModel = ViewModelProviders.of(getActivity(), mViewModelFactory).get(MainViewModel.class);
+
+        final Context context = getActivity();
+        View view = LayoutInflater.from(context).inflate(R.layout.new_item, null);
+
+        EditText name = findById(view, android.R.id.input);
+        Observable.combineLatest(createClicked, RxTextView.textChanges(name),
+                new BiFunction<String, CharSequence, String>() {
+                    @Override
+                    public String apply(String ignored, CharSequence text) {
+                        return text.toString();
+                    }
+                }) //
+                .observeOn(Schedulers.io())
+                .subscribe(new Consumer<String>() {
+                    @Override
+                    public void accept(String description) {
+                        mViewModel.createNewOneTodoItem(getListId(), description);
+                    }
+                });
+
+        return new AlertDialog.Builder(context)
+                .setTitle(R.string.new_item)
+                .setView(view)
+                .setPositiveButton(R.string.create, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        createClicked.onNext("clicked");
+                    }
+                })
+                .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(@NonNull DialogInterface dialog, int which) {
+                    }
+                })
+                .create();
+    }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
index 5050419..6d535d9 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/ui/NewListFragment.java
@@ -18,6 +18,8 @@
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Dialog;
+import android.arch.lifecycle.ViewModelProvider;
+import android.arch.lifecycle.ViewModelProviders;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.os.Bundle;
@@ -26,65 +28,85 @@
 import android.view.LayoutInflater;
 import android.view.View;
 import android.widget.EditText;
+
 import com.example.sqlbrite.todo.R;
 import com.example.sqlbrite.todo.TodoApp;
-import com.example.sqlbrite.todo.db.TodoList;
+import com.example.sqlbrite.todo.controler.MainViewModel;
+import com.example.sqlbrite.todo.db.TodoListDao;
 import com.jakewharton.rxbinding2.widget.RxTextView;
-import com.squareup.sqlbrite3.BriteDatabase;
+
+import javax.inject.Inject;
+
 import io.reactivex.Observable;
 import io.reactivex.functions.BiFunction;
 import io.reactivex.functions.Consumer;
 import io.reactivex.schedulers.Schedulers;
 import io.reactivex.subjects.PublishSubject;
-import javax.inject.Inject;
 
-import static android.database.sqlite.SQLiteDatabase.CONFLICT_NONE;
 import static butterknife.ButterKnife.findById;
 
 public final class NewListFragment extends DialogFragment {
-  public static NewListFragment newInstance() {
-    return new NewListFragment();
-  }
+    public static NewListFragment newInstance() {
+        return new NewListFragment();
+    }
+
+    private final PublishSubject<String> createClicked = PublishSubject.create();
+
+/*
+    @Inject
+    TodoListDao todoListDao;
+*/
+
+    @Inject
+    ViewModelProvider.Factory mViewModelFactory;
 
-  private final PublishSubject<String> createClicked = PublishSubject.create();
+    //@Inject
+    MainViewModel mViewModel;
 
-  @Inject BriteDatabase db;
+    @Override
+    public void onAttach(Activity activity) {
+        super.onAttach(activity);
+        TodoApp.getComponent(activity).inject(this);
+    }
 
-  @Override public void onAttach(Activity activity) {
-    super.onAttach(activity);
-    TodoApp.getComponent(activity).inject(this);
-  }
+    @NonNull
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        mViewModel = ViewModelProviders.of(getActivity(), mViewModelFactory).get(MainViewModel.class);
 
-  @NonNull @Override public Dialog onCreateDialog(Bundle savedInstanceState) {
-    final Context context = getActivity();
-    View view = LayoutInflater.from(context).inflate(R.layout.new_list, null);
+        final Context context = getActivity();
+        View view = LayoutInflater.from(context).inflate(R.layout.new_list, null);
 
-    EditText name = findById(view, android.R.id.input);
-    Observable.combineLatest(createClicked, RxTextView.textChanges(name),
-        new BiFunction<String, CharSequence, String>() {
-          @Override public String apply(String ignored, CharSequence text) {
-            return text.toString();
-          }
-        }) //
-        .observeOn(Schedulers.io())
-        .subscribe(new Consumer<String>() {
-          @Override public void accept(String name) {
-            db.insert(TodoList.TABLE, CONFLICT_NONE, new TodoList.Builder().name(name).build());
-          }
-        });
+        EditText name = findById(view, android.R.id.input);
+        Observable.combineLatest(createClicked, RxTextView.textChanges(name),
+                new BiFunction<String, CharSequence, String>() {
+                    @Override
+                    public String apply(String ignored, CharSequence text) {
+                        return text.toString();
+                    }
+                }) //
+                .observeOn(Schedulers.io())
+                .subscribe(new Consumer<String>() {
+                    @Override
+                    public void accept(String name) {
+                        mViewModel.createNewOneTodoList(name);
+                    }
+                });
 
-    return new AlertDialog.Builder(context) //
-        .setTitle(R.string.new_list)
-        .setView(view)
-        .setPositiveButton(R.string.create, new DialogInterface.OnClickListener() {
-          @Override public void onClick(DialogInterface dialog, int which) {
-            createClicked.onNext("clicked");
-          }
-        })
-        .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
-          @Override public void onClick(@NonNull DialogInterface dialog, int which) {
-          }
-        })
-        .create();
-  }
+        return new AlertDialog.Builder(context)
+                .setTitle(R.string.new_list)
+                .setView(view)
+                .setPositiveButton(R.string.create, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        createClicked.onNext("clicked");
+                    }
+                })
+                .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(@NonNull DialogInterface dialog, int which) {
+                    }
+                })
+                .create();
+    }
 }
diff --git a/sample/src/main/res/layout/lists.xml b/sample/src/main/res/layout/lists.xml
index 04c4859..6987112 100644
--- a/sample/src/main/res/layout/lists.xml
+++ b/sample/src/main/res/layout/lists.xml
@@ -4,17 +4,24 @@
     xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    >
-  <!-- TODO get nice empty view / icon -->
-  <ImageView
-      android:id="@android:id/empty"
-      android:layout_width="wrap_content"
-      android:layout_height="wrap_content"
-      android:layout_gravity="center"
-      />
-  <ListView
-      android:id="@android:id/list"
-      android:layout_width="match_parent"
-      android:layout_height="match_parent"
-      />
+>
+    <!-- TODO get nice empty view / icon -->
+    <ImageView
+        android:id="@android:id/empty"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+    />
+    <ListView
+        android:id="@android:id/list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+    />
+
+    <Button
+        android:id="@+id/export_db"
+        android:layout_width="match_parent"
+        android:layout_height="50dp"
+        android:layout_gravity="bottom|center_horizontal"
+        android:text="导出数据库"/>
 </FrameLayout>
diff --git a/sqlbrite-sqlcipher-integration/src/main/java/android/arch/persistence/db/sqlcipher/SqlcipherUtils.java b/sqlbrite-sqlcipher-integration/src/main/java/android/arch/persistence/db/sqlcipher/SqlcipherUtils.java
new file mode 100644
index 0000000..c7ce2f4
--- /dev/null
+++ b/sqlbrite-sqlcipher-integration/src/main/java/android/arch/persistence/db/sqlcipher/SqlcipherUtils.java
@@ -0,0 +1,49 @@
+package android.arch.persistence.db.sqlcipher;
+
+import net.sqlcipher.database.SQLiteDatabase;
+
+import java.io.File;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/6 9:17
+ */
+
+public class SqlcipherUtils {
+
+    private SqlcipherUtils() {
+        throw new AssertionError("No instances.");
+    }
+
+    public static void exportEncryption(SQLiteDatabase db, String password, File dstFile) {
+        String sql = "ATTACH DATABASE '" + dstFile.getPath() + "' AS encrypted KEY '" + password + "';";
+        db.execSQL(sql);
+
+        db.beginTransaction();
+        try {
+            sql = "SELECT sqlcipher_export('encrypted');";
+            db.execSQL(sql);
+        } finally {
+            db.endTransaction();
+        }
+
+        sql = "DETACH DATABASE encrypted;";
+        db.execSQL(sql);
+    }
+
+    public static void exportDecryption(SQLiteDatabase db, File dstFile) {
+        String sql = "ATTACH DATABASE '" + dstFile.getPath() + "' AS plaintext KEY '';";
+        db.execSQL(sql);
+
+        db.beginTransaction();
+        try {
+            sql = "SELECT sqlcipher_export('plaintext');";
+            db.execSQL(sql);
+        } finally {
+            db.endTransaction();
+        }
+
+        sql = "DETACH DATABASE plaintext;";
+        db.execSQL(sql);
+    }
+}
diff --git a/sqlbrite-wcdb-integration/src/main/java/android/arch/persistence/db/wcdb/WcdbSQLiteDatabase.java b/sqlbrite-wcdb-integration/src/main/java/android/arch/persistence/db/wcdb/WcdbSQLiteDatabase.java
index 1545be2..bb6d2e7 100644
Binary files a/sqlbrite-wcdb-integration/src/main/java/android/arch/persistence/db/wcdb/WcdbSQLiteDatabase.java and b/sqlbrite-wcdb-integration/src/main/java/android/arch/persistence/db/wcdb/WcdbSQLiteDatabase.java differ
diff --git a/sqlbrite-wcdb-integration/src/main/java/android/arch/persistence/db/wcdb/WcdbUtils.java b/sqlbrite-wcdb-integration/src/main/java/android/arch/persistence/db/wcdb/WcdbUtils.java
new file mode 100644
index 0000000..d4ff121
--- /dev/null
+++ b/sqlbrite-wcdb-integration/src/main/java/android/arch/persistence/db/wcdb/WcdbUtils.java
@@ -0,0 +1,40 @@
+package android.arch.persistence.db.wcdb;
+
+import android.arch.persistence.db.SupportSQLiteDatabase;
+
+import com.tencent.wcdb.DatabaseUtils;
+
+import java.io.File;
+
+/**
+ * @author Guang1234567
+ * @date 2018/3/6 9:34
+ */
+
+public class WcdbUtils {
+
+    private WcdbUtils() {
+        throw new AssertionError("No instances.");
+    }
+
+    public static void exportDecryption(SupportSQLiteDatabase db, File dstFile) throws Exception {
+        // https://github.com/Tencent/wcdb/issues/36
+        // 先open了加密DB，得到 "db" 对象
+        // 将非加密DB挂载到 "db", "old" 代表着非加密DB
+        String sql = String.format("ATTACH DATABASE %s AS old KEY '';",
+                DatabaseUtils.sqlEscapeString(dstFile.getPath()));
+        db.execSQL(sql);
+
+        // 将数据从 "main"(加密db) 迁移到 "old"(非加密db)
+        db.beginTransaction();
+        try {
+            db.query("SELECT sqlcipher_export('old', 'main');");
+            db.setTransactionSuccessful();
+        } finally {
+            db.endTransaction();
+        }
+
+        // 将old脱离
+        db.execSQL("DETACH DATABASE old;");
+    }
+}
