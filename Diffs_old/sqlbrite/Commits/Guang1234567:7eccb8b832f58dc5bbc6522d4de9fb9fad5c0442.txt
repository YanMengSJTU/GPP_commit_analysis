diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java
index a63690f..d17ca47 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/ActivityScopeComponent.java
@@ -5,6 +5,7 @@
 
 import com.example.sqlbrite.todo.controler.LoginViewControler;
 import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
+import com.example.sqlbrite.todo.model.local.preferences.AppPrefs;
 import com.example.sqlbrite.todo.model.users.LoginManager;
 import com.example.sqlbrite.todo.model.users.UserManager;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
@@ -26,16 +27,8 @@
 
     SchedulerProvider schedulerProvider();
 
-    GitHubApiInterface gitHubApiInterface();
-
     ViewModelProvider.Factory viewModelProviderFactory();
 
-    UserManager userManager();
-
-    LoginManager loginManager();
-
-    LoginViewControler loginViewControler();
-
     void inject(MainActivity activity);
 
     void inject(SystemSettingActivity activity);
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
index 82acd36..d4d6d79 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/AppScopeComponent.java
@@ -21,6 +21,7 @@
 import com.example.sqlbrite.todo.TodoApp;
 import com.example.sqlbrite.todo.controler.LoginViewControler;
 import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
+import com.example.sqlbrite.todo.model.local.preferences.AppPrefs;
 import com.example.sqlbrite.todo.model.users.LoginManager;
 import com.example.sqlbrite.todo.model.users.UserManager;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
@@ -49,6 +50,8 @@
     @Named("non_cached")
     OkHttpClient okHttpClientWithoutCache();*/
 
+    AppPrefs appPrefs();
+
     GitHubApiInterface gitHubApiInterface();
 
     UserManager userManager();
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/InjectHelper.java b/sample/src/main/java/com/example/sqlbrite/todo/di/InjectHelper.java
index ecc9bdb..c47e575 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/InjectHelper.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/InjectHelper.java
@@ -2,16 +2,13 @@
 
 import android.app.Activity;
 import android.app.Application;
-import android.content.Context;
 import android.support.v4.app.Fragment;
 
-import com.example.sqlbrite.todo.di.model.AppScopeModelModule;
-import com.example.sqlbrite.todo.di.model.UserScopeModelModule;
 import com.example.sqlbrite.todo.di.model.local.db.DbModule;
-import com.example.sqlbrite.todo.di.model.local.preferences.PreferencesModule;
+import com.example.sqlbrite.todo.di.model.local.preferences.AppScopePreferencesModule;
+import com.example.sqlbrite.todo.di.model.local.preferences.UserScopePreferencesModule;
 import com.example.sqlbrite.todo.di.model.remote.NetModule;
 import com.example.sqlbrite.todo.di.model.remote.TodoApiModule;
-import com.example.sqlbrite.todo.di.schedulers.SchedulerModule;
 import com.example.sqlbrite.todo.ui.BaseViewModelActivity;
 
 /**
@@ -39,6 +36,7 @@ public AppScopeComponent init(Application application) {
                 .appScopeModule(new AppScopeModule(application))
                 .netModule(new NetModule("https://www.github.com"))
                 .todoApiModule(new TodoApiModule())
+                .appScopePreferencesModule(new AppScopePreferencesModule())
                 .build();
         return mAppScopeComponent;
     }
@@ -52,7 +50,7 @@ public UserScopeComponent createUserScopeComponent(String userId) {
         return DaggerUserScopeComponent.builder()
                 .appScopeComponent(getAppScopeComponent())
                 .dbModule(new DbModule(userId))
-                .preferencesModule(new PreferencesModule())
+                .userScopePreferencesModule(new UserScopePreferencesModule(userId))
                 .build();
     }
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
index 7fdbd11..baa6547 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/UserScopeComponent.java
@@ -2,10 +2,7 @@
 
 import android.arch.lifecycle.ViewModelProvider;
 
-import com.example.sqlbrite.todo.controler.LoginViewControler;
-import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
-import com.example.sqlbrite.todo.model.users.LoginManager;
-import com.example.sqlbrite.todo.model.users.UserManager;
+import com.example.sqlbrite.todo.model.local.preferences.UserPrefs;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 
 import dagger.Component;
@@ -18,11 +15,5 @@
 
     ViewModelProvider.Factory viewModelProviderFactory();
 
-    GitHubApiInterface gitHubApiInterface();
-
-    UserManager userManager();
-
-    LoginManager loginManager();
-
-    LoginViewControler loginViewControler();
+    UserPrefs userPrefs();
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/AppScopeModelModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/AppScopeModelModule.java
index b75ff6c..48dbcea 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/model/AppScopeModelModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/AppScopeModelModule.java
@@ -15,8 +15,10 @@
  */
 package com.example.sqlbrite.todo.di.model;
 
+import com.example.sqlbrite.todo.di.model.local.preferences.AppScopePreferencesModule;
 import com.example.sqlbrite.todo.di.model.remote.NetModule;
 import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
+import com.example.sqlbrite.todo.model.local.preferences.AppPrefs;
 import com.example.sqlbrite.todo.model.users.LoginManager;
 import com.example.sqlbrite.todo.model.users.UserManager;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
@@ -28,15 +30,16 @@
 
 @Module(
         includes = {
-                NetModule.class
+                NetModule.class,
+                AppScopePreferencesModule.class
         }
 )
 public final class AppScopeModelModule {
 
     @Provides
     @Singleton
-    public LoginManager provideLoginManager(GitHubApiInterface gitHubApiInterface, SchedulerProvider schedulerProvider) {
-        return new LoginManager.LoginManagerImpl(gitHubApiInterface, schedulerProvider);
+    public LoginManager provideLoginManager(GitHubApiInterface gitHubApiInterface, AppPrefs appPrefs, SchedulerProvider schedulerProvider) {
+        return new LoginManager.LoginManagerImpl(gitHubApiInterface, appPrefs, schedulerProvider);
     }
 
     @Provides
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/UserScopeModelModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/UserScopeModelModule.java
index 403b9d0..2331d5a 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/model/UserScopeModelModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/UserScopeModelModule.java
@@ -17,7 +17,7 @@
 
 import com.example.sqlbrite.todo.di.UserScope;
 import com.example.sqlbrite.todo.di.model.local.db.DbModule;
-import com.example.sqlbrite.todo.di.model.local.preferences.PreferencesModule;
+import com.example.sqlbrite.todo.di.model.local.preferences.UserScopePreferencesModule;
 import com.example.sqlbrite.todo.model.MainDataSource;
 import com.example.sqlbrite.todo.model.MainRepository;
 import com.example.sqlbrite.todo.model.local.db.TodoItemDao;
@@ -31,7 +31,7 @@
 @Module(
         includes = {
                 DbModule.class,
-                PreferencesModule.class,
+                UserScopePreferencesModule.class,
         }
 )
 public final class UserScopeModelModule {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/preferences/AppScopePreferencesModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/preferences/AppScopePreferencesModule.java
new file mode 100644
index 0000000..a037e30
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/preferences/AppScopePreferencesModule.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.example.sqlbrite.todo.di.model.local.preferences;
+
+import android.app.Application;
+import android.content.SharedPreferences;
+import android.support.v7.preference.PreferenceManager;
+
+import com.example.sqlbrite.todo.model.local.preferences.AppPrefs;
+import com.f2prateek.rx.preferences2.RxSharedPreferences;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import dagger.Module;
+import dagger.Provides;
+
+@Module
+public final class AppScopePreferencesModule {
+
+    @Provides
+    @Singleton
+    @Named("app_scope")
+    public SharedPreferences provideSharedPreferences(Application application) {
+        return PreferenceManager.getDefaultSharedPreferences(application);
+    }
+
+    @Provides
+    @Singleton
+    @Named("app_scope")
+    public RxSharedPreferences provideRxSharedPreferences(@Named("app_scope") SharedPreferences sharedPreferences) {
+        return RxSharedPreferences.create(sharedPreferences);
+    }
+
+    @Provides
+    @Singleton
+    public AppPrefs provideAppPrefs(@Named("app_scope") RxSharedPreferences sharedPreferences) {
+        return new AppPrefs(sharedPreferences);
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/preferences/PreferencesModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/preferences/PreferencesModule.java
deleted file mode 100644
index c9cb423..0000000
--- a/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/preferences/PreferencesModule.java
+++ /dev/null
@@ -1,22 +0,0 @@
-/*
- * Copyright (C) 2015 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.example.sqlbrite.todo.di.model.local.preferences;
-
-import dagger.Module;
-
-@Module
-public final class PreferencesModule {
-}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/preferences/UserScopePreferencesModule.java b/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/preferences/UserScopePreferencesModule.java
new file mode 100644
index 0000000..c13e083
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/di/model/local/preferences/UserScopePreferencesModule.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.example.sqlbrite.todo.di.model.local.preferences;
+
+import android.app.Application;
+import android.content.Context;
+import android.content.SharedPreferences;
+
+import com.example.sqlbrite.todo.di.UserScope;
+import com.example.sqlbrite.todo.model.local.preferences.UserPrefs;
+import com.f2prateek.rx.preferences2.RxSharedPreferences;
+
+import javax.inject.Named;
+
+import dagger.Module;
+import dagger.Provides;
+
+@Module
+public final class UserScopePreferencesModule {
+    private String mName;
+
+    public UserScopePreferencesModule(String name) {
+        mName = name;
+    }
+
+    @Provides
+    @UserScope
+    @Named("user_scope")
+    public SharedPreferences provideSharedPreferences(Application application) {
+        return application.getSharedPreferences(mName, Context.MODE_PRIVATE);
+    }
+
+    @Provides
+    @UserScope
+    @Named("user_scope")
+    public RxSharedPreferences provideRxSharedPreferences(@Named("user_scope") SharedPreferences sharedPreferences) {
+        return RxSharedPreferences.create(sharedPreferences);
+    }
+
+    @Provides
+    @UserScope
+    public UserPrefs provideUserPrefs(@Named("user_scope") RxSharedPreferences sharedPreferences) {
+        return new UserPrefs(sharedPreferences);
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/preferences/AppPrefs.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/preferences/AppPrefs.java
new file mode 100644
index 0000000..a6c1731
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/preferences/AppPrefs.java
@@ -0,0 +1,22 @@
+package com.example.sqlbrite.todo.model.local.preferences;
+
+import com.f2prateek.rx.preferences2.Preference;
+import com.f2prateek.rx.preferences2.RxSharedPreferences;
+
+/**
+ * @author Administrator
+ * @date 2018/3/21 12:35
+ */
+
+public class AppPrefs {
+
+    private final RxSharedPreferences mPreferences;
+
+    public AppPrefs(RxSharedPreferences preferences) {
+        mPreferences = preferences;
+    }
+
+    public Preference<String> lastLoginUserId() {
+        return mPreferences.getString("last_login_userid");
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/preferences/UserPrefs.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/preferences/UserPrefs.java
new file mode 100644
index 0000000..644fc6a
--- /dev/null
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/preferences/UserPrefs.java
@@ -0,0 +1,18 @@
+package com.example.sqlbrite.todo.model.local.preferences;
+
+import com.f2prateek.rx.preferences2.Preference;
+import com.f2prateek.rx.preferences2.RxSharedPreferences;
+
+/**
+ * @author Administrator
+ * @date 2018/3/21 12:36
+ */
+
+public class UserPrefs {
+
+    private final RxSharedPreferences mPreferences;
+
+    public UserPrefs(RxSharedPreferences preferences) {
+        mPreferences = preferences;
+    }
+}
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/users/LoginManager.java b/sample/src/main/java/com/example/sqlbrite/todo/model/users/LoginManager.java
index bd2fa52..57f8a32 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/users/LoginManager.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/users/LoginManager.java
@@ -1,6 +1,7 @@
 package com.example.sqlbrite.todo.model.users;
 
 import com.example.sqlbrite.todo.di.model.remote.TodoApiModule.GitHubApiInterface;
+import com.example.sqlbrite.todo.model.local.preferences.AppPrefs;
 import com.example.sqlbrite.todo.schedulers.SchedulerProvider;
 
 import java.util.Date;
@@ -9,6 +10,7 @@
 
 import io.reactivex.Completable;
 import io.reactivex.Single;
+import io.reactivex.functions.Consumer;
 
 /**
  * @author Guang1234567
@@ -24,11 +26,15 @@
     class LoginManagerImpl implements LoginManager {
 
         private final GitHubApiInterface mGitHubApiInterface;
+        private final AppPrefs mAppPrefs;
         private final SchedulerProvider mSchedulerProvider;
 
         @Inject
-        public LoginManagerImpl(GitHubApiInterface gitHubApiInterface, SchedulerProvider schedulerProvider) {
+        public LoginManagerImpl(GitHubApiInterface gitHubApiInterface,
+                                AppPrefs appPrefs,
+                                SchedulerProvider schedulerProvider) {
             mGitHubApiInterface = gitHubApiInterface;
+            mAppPrefs = appPrefs;
             mSchedulerProvider = schedulerProvider;
         }
 
@@ -42,7 +48,12 @@ public LoginManagerImpl(GitHubApiInterface gitHubApiInterface, SchedulerProvider
                                     .name("伪造的人")
                                     .timestamp(new Date())
                                     .build()
-                    );
+                    ).doOnSuccess(new Consumer<User>() {
+                        @Override
+                        public void accept(User user) throws Exception {
+                            mAppPrefs.lastLoginUserId().set(user.id());
+                        }
+                    });
         }
 
         @Override
