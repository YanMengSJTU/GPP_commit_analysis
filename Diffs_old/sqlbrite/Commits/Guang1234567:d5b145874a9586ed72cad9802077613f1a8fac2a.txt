diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItem.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItem.java
index ae1ba2d..65f439d 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItem.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItem.java
@@ -18,26 +18,32 @@
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.os.Parcelable;
+import android.provider.BaseColumns;
 
+import com.gabrielittner.auto.value.cursor.ColumnName;
 import com.google.auto.value.AutoValue;
 
 import io.reactivex.functions.Function;
 
 @AutoValue
-public abstract class TodoItem implements Parcelable {
+public abstract class TodoItem implements Parcelable, toContentValuesAble {
     public static final String TABLE = "todo_item";
 
-    public static final String ID = "_id";
+    public static final String ID = BaseColumns._ID;
     public static final String LIST_ID = "todo_list_id";
     public static final String DESCRIPTION = "description";
     public static final String COMPLETE = "complete";
 
+    @ColumnName(ID)
     public abstract long id();
 
+    @ColumnName(LIST_ID)
     public abstract long listId();
 
+    @ColumnName(DESCRIPTION)
     public abstract String description();
 
+    @ColumnName(COMPLETE)
     public abstract boolean complete();
 
     public static final class Builder {
@@ -68,27 +74,12 @@ public ContentValues build() {
         }
     }
 
-    static Function<Cursor, TodoItem> MAPPER = new Function<Cursor, TodoItem>() {
-        @Override
-        public TodoItem apply(Cursor cursor) {
-            return toEntity(cursor);
-        }
-    };
-
-    static TodoItem toEntity(Cursor cursor) {
-        long id = Db.getLong(cursor, ID);
-        long listId = Db.getLong(cursor, LIST_ID);
-        String description = Db.getString(cursor, DESCRIPTION);
-        boolean complete = Db.getBoolean(cursor, COMPLETE);
-        return new AutoValue_TodoItem(id, listId, description, complete);
+    // Optional: if your project includes RxJava 2 the extension will generate a Function<Cursor, User>
+    public static Function<Cursor, TodoItem> MAPPER_FUNCTION() {
+        return AutoValue_TodoItem.MAPPER_FUNCTION;
     }
 
-    ContentValues toContentValues() {
-        return new TodoItem.Builder()
-                .id(id())
-                .complete(complete())
-                .listId(listId())
-                .description(description())
-                .build();
+    public static TodoItem toEntity(Cursor cursor) {
+        return AutoValue_TodoItem.createFromCursor(cursor);
     }
 }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItemDao.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItemDao.java
index 762bf0b..021a051 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItemDao.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoItemDao.java
@@ -95,7 +95,7 @@ public Integer apply(SqlBrite.Query query) {
 
     public Observable<List<TodoItem>> createQueryTodoItemsByListId(long listId) {
         return createQuery(getTableName(), LIST_QUERY, listId)
-                .mapToList(TodoItem.MAPPER);
+                .mapToList(TodoItem.MAPPER_FUNCTION());
     }
 
     public long createNewOne(long listId, String description) {
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoList.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoList.java
index 17cee8a..52523bc 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoList.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/TodoList.java
@@ -18,19 +18,19 @@
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.os.Parcelable;
+import android.provider.BaseColumns;
 
 import com.gabrielittner.auto.value.cursor.ColumnName;
 import com.google.auto.value.AutoValue;
-import com.squareup.sqlbrite3.support.DbUtils;
 
 import io.reactivex.functions.Function;
 
 // Note: normally I wouldn't prefix table classes but I didn't want 'List' to be overloaded.
 @AutoValue
-public abstract class TodoList extends BaseEntity implements Parcelable {
+public abstract class TodoList implements Parcelable, toContentValuesAble {
     public static final String TABLE = "todo_list";
 
-    public static final String ID = "_id";
+    public static final String ID = BaseColumns._ID;
     public static final String NAME = "name";
     public static final String ARCHIVED = "archived";
 
@@ -66,15 +66,8 @@ public ContentValues build() {
         }
     }
 
-    static Function<Cursor, TodoList> MAPPER = new Function<Cursor, TodoList>() {
-        @Override
-        public TodoList apply(Cursor cursor) {
-            return toEntity(cursor);
-        }
-    };
-
     // Optional: if your project includes RxJava 2 the extension will generate a Function<Cursor, User>
-    public static Function<Cursor, TodoList> toEntity() {
+    public static Function<Cursor, TodoList> MAPPER_FUNCTION() {
         return AutoValue_TodoList.MAPPER_FUNCTION;
     }
 
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/BaseEntity.java b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/toContentValuesAble.java
similarity index 81%
rename from sample/src/main/java/com/example/sqlbrite/todo/model/local/db/BaseEntity.java
rename to sample/src/main/java/com/example/sqlbrite/todo/model/local/db/toContentValuesAble.java
index 31e2a69..02b5e77 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/BaseEntity.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/model/local/db/toContentValuesAble.java
@@ -11,9 +11,9 @@
  * @author lihanguang
  * @date 2016/2/23 17:47
  */
-abstract class BaseEntity {
+public interface toContentValuesAble {
     // Optional: When you include an abstract method that returns ContentValues and doesn't have
     // any parameters the extension will implement it for you
-    abstract ContentValues toContentValues();
+    ContentValues toContentValues();
 
 }
