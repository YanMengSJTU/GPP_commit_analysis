diff --git a/build.gradle b/build.gradle
index 889022d..f0db291 100644
--- a/build.gradle
+++ b/build.gradle
@@ -2,10 +2,7 @@ buildscript {
   ext.versions = [
       'minSdk': 14,
       'compileSdk': 29,
-      'kotlin': '1.3.50',
-      // latest as of now is 26.5.1, don't upgrade until rewriting BriteIssueRegistry
-      // because it has linter issues that stop the build
-      'lint': '26.0.1'
+      'lint': '26.5.1'
   ]
 
   repositories {
@@ -16,7 +13,6 @@ buildscript {
 
   dependencies {
     classpath 'com.android.tools.build:gradle:3.5.1'
-    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
   }
 }
 
@@ -42,7 +38,6 @@ ext {
   supportSqliteFramework = 'android.arch.persistence:db-framework:1.1.1'
 
   // Third-party dependencies.
-  kotlinStdLib = "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
   dagger = 'com.google.dagger:dagger:2.13'
   daggerCompiler = 'com.google.dagger:dagger-compiler:2.13'
   butterKnifeRuntime = 'com.jakewharton:butterknife:8.8.1'
diff --git a/sqlbrite-lint/build.gradle b/sqlbrite-lint/build.gradle
index 6760c20..60ceaf9 100644
--- a/sqlbrite-lint/build.gradle
+++ b/sqlbrite-lint/build.gradle
@@ -1,7 +1,6 @@
-apply plugin: 'kotlin'
+apply plugin: 'java'
 
 dependencies {
-  compileOnly rootProject.ext.kotlinStdLib
   compileOnly rootProject.ext.lintApi
 
   testImplementation rootProject.ext.junit
diff --git a/sqlbrite-lint/src/main/java/com/squareup/sqlbrite3/BriteIssueRegistry.java b/sqlbrite-lint/src/main/java/com/squareup/sqlbrite3/BriteIssueRegistry.java
new file mode 100644
index 0000000..2e08cf9
--- /dev/null
+++ b/sqlbrite-lint/src/main/java/com/squareup/sqlbrite3/BriteIssueRegistry.java
@@ -0,0 +1,18 @@
+package com.squareup.sqlbrite3;
+
+import com.android.annotations.NonNull;
+import com.android.tools.lint.client.api.IssueRegistry;
+import com.android.tools.lint.detector.api.Issue;
+
+import java.util.Collections;
+import java.util.List;
+
+@SuppressWarnings("UnstableApiUsage")
+public final class BriteIssueRegistry extends IssueRegistry {
+
+    @NonNull
+    @Override
+    public List<Issue> getIssues() {
+        return Collections.singletonList(SqlBriteArgCountDetector.ISSUE);
+    }
+}
diff --git a/sqlbrite-lint/src/main/java/com/squareup/sqlbrite3/BriteIssueRegistry.kt b/sqlbrite-lint/src/main/java/com/squareup/sqlbrite3/BriteIssueRegistry.kt
deleted file mode 100644
index ae91551..0000000
--- a/sqlbrite-lint/src/main/java/com/squareup/sqlbrite3/BriteIssueRegistry.kt
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (C) 2017 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.squareup.sqlbrite3
-
-import com.android.tools.lint.client.api.IssueRegistry
-
-class BriteIssueRegistry : IssueRegistry() {
-
-  override fun getIssues() = listOf(SqlBriteArgCountDetector.ISSUE)
-}
diff --git a/sqlbrite-lint/src/main/java/com/squareup/sqlbrite3/SqlBriteArgCountDetector.java b/sqlbrite-lint/src/main/java/com/squareup/sqlbrite3/SqlBriteArgCountDetector.java
new file mode 100644
index 0000000..fb29386
--- /dev/null
+++ b/sqlbrite-lint/src/main/java/com/squareup/sqlbrite3/SqlBriteArgCountDetector.java
@@ -0,0 +1,134 @@
+package com.squareup.sqlbrite3;
+
+import com.android.annotations.NonNull;
+import com.android.annotations.Nullable;
+import com.android.tools.lint.client.api.JavaEvaluator;
+import com.android.tools.lint.detector.api.Category;
+import com.android.tools.lint.detector.api.Detector;
+import com.android.tools.lint.detector.api.Implementation;
+import com.android.tools.lint.detector.api.Issue;
+import com.android.tools.lint.detector.api.JavaContext;
+import com.android.tools.lint.detector.api.Scope;
+import com.android.tools.lint.detector.api.Severity;
+import com.intellij.psi.PsiMethod;
+
+import org.jetbrains.uast.UCallExpression;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.EnumSet;
+import java.util.List;
+
+import static com.android.tools.lint.detector.api.ConstantEvaluator.evaluateString;
+
+@SuppressWarnings("UnstableApiUsage")
+public final class SqlBriteArgCountDetector extends Detector implements Detector.UastScanner {
+    @NonNull public static final Issue ISSUE = Issue.create(
+            "SqlBriteArgCount",
+            "Number of provided arguments doesn't match number " +
+                    "of arguments specified in query",
+            "When providing arguments to query you need to provide the same amount of " +
+                    "arguments that is specified in query.",
+            Category.MESSAGES,
+            9,
+            Severity.ERROR,
+            new Implementation(
+                    SqlBriteArgCountDetector.class,
+                    EnumSet.of(
+                            Scope.JAVA_FILE,
+                            Scope.TEST_SOURCES
+                    )
+            )
+    );
+
+    @NonNull private static final String BRITE_DATABASE = "com.squareup.sqlbrite3.BriteDatabase";
+    @NonNull private static final String QUERY_METHOD_NAME = "query";
+    @NonNull private static final String CREATE_QUERY_METHOD_NAME = "createQuery";
+
+    @NonNull
+    @Override
+    public List<String> getApplicableMethodNames() {
+        return Collections.unmodifiableList(
+                Arrays.asList(
+                        CREATE_QUERY_METHOD_NAME,
+                        QUERY_METHOD_NAME
+                )
+        );
+    }
+
+    @Override
+    public void visitMethod(
+            @NonNull JavaContext context,
+            @NonNull UCallExpression call,
+            @NonNull PsiMethod method
+    ) {
+        @NonNull final JavaEvaluator evaluator = context.getEvaluator();
+        if (evaluator.isMemberInClass(method, BRITE_DATABASE)) {
+            // Skip non varargs overloads.
+            if (!method.isVarArgs()) return;
+
+            // Position of sql parameter depends on method.
+            @Nullable final String sql = evaluateString(
+                    context,
+                    call.getValueArguments().get(
+                            isQueryMethod(call) ? 0 : 1
+                    ),
+                    true
+            );
+            if (sql == null) {
+                return;
+            }
+
+            final int argumentsCount =
+                    call.getValueArgumentCount() - (isQueryMethod(call) ? 1 : 2);
+            final int questionMarksCount = count(sql, '?');
+            if (argumentsCount != questionMarksCount) {
+                @NonNull final String requiredArguments =
+                        questionMarksCount + " " + pluralize(
+                                "argument",
+                                questionMarksCount
+                        );
+                @NonNull final String actualArguments =
+                        argumentsCount + " " + pluralize(
+                                "argument",
+                                argumentsCount
+                        );
+                context.report(
+                        ISSUE,
+                        call,
+                        context.getLocation(call),
+                        String.format(
+                                "Wrong argument count, query %s requires %s, but was provided %s",
+                                sql,
+                                requiredArguments,
+                                actualArguments
+                        )
+                );
+            }
+        }
+    }
+
+    private static boolean isQueryMethod(@NonNull UCallExpression call) {
+        return QUERY_METHOD_NAME.equals(call.getMethodName());
+    }
+
+    private static int count(@NonNull String source, char character) {
+        int count = 0;
+        for (int i = 0, l = source.length(); i < l; i++) {
+            final char element = source.charAt(i);
+            if (element == character) {
+                count++;
+            }
+        }
+        return count;
+    }
+
+    @NonNull
+    private static String pluralize(@NonNull String source, int count) {
+        if (count == 1) {
+            return source;
+        } else {
+            return source + "s";
+        }
+    }
+}
diff --git a/sqlbrite-lint/src/main/java/com/squareup/sqlbrite3/SqlBriteArgCountDetector.kt b/sqlbrite-lint/src/main/java/com/squareup/sqlbrite3/SqlBriteArgCountDetector.kt
deleted file mode 100644
index a353563..0000000
--- a/sqlbrite-lint/src/main/java/com/squareup/sqlbrite3/SqlBriteArgCountDetector.kt
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Copyright (C) 2017 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.squareup.sqlbrite3
-
-import com.android.tools.lint.detector.api.Category
-import com.android.tools.lint.detector.api.ConstantEvaluator.evaluateString
-import com.android.tools.lint.detector.api.Detector
-import com.android.tools.lint.detector.api.Implementation
-import com.android.tools.lint.detector.api.Issue
-import com.android.tools.lint.detector.api.JavaContext
-import com.android.tools.lint.detector.api.Scope.JAVA_FILE
-import com.android.tools.lint.detector.api.Scope.TEST_SOURCES
-import com.android.tools.lint.detector.api.Severity
-import com.intellij.psi.PsiMethod
-import org.jetbrains.uast.UCallExpression
-import java.util.EnumSet
-
-private const val BRITE_DATABASE = "com.squareup.sqlbrite3.BriteDatabase"
-private const val QUERY_METHOD_NAME = "query"
-private const val CREATE_QUERY_METHOD_NAME = "createQuery"
-
-class SqlBriteArgCountDetector : Detector(), Detector.UastScanner {
-
-  companion object {
-
-    val ISSUE: Issue = Issue.create(
-        "SqlBriteArgCount",
-        "Number of provided arguments doesn't match number " +
-            "of arguments specified in query",
-        "When providing arguments to query you need to provide the same amount of " +
-            "arguments that is specified in query.",
-        Category.MESSAGES,
-        9,
-        Severity.ERROR,
-        Implementation(SqlBriteArgCountDetector::class.java, EnumSet.of(JAVA_FILE, TEST_SOURCES)))
-  }
-
-  override fun getApplicableMethodNames() = listOf(CREATE_QUERY_METHOD_NAME, QUERY_METHOD_NAME)
-
-  override fun visitMethod(context: JavaContext, call: UCallExpression, method: PsiMethod) {
-    val evaluator = context.evaluator
-
-    if (evaluator.isMemberInClass(method, BRITE_DATABASE)) {
-      // Skip non varargs overloads.
-      if (!method.isVarArgs) return
-
-      // Position of sql parameter depends on method.
-      val sql = evaluateString(context,
-          call.valueArguments[if (call.isQueryMethod()) 0 else 1], true) ?: return
-
-      // Count only vararg arguments.
-      val argumentsCount = call.valueArgumentCount - if (call.isQueryMethod()) 1 else 2
-      val questionMarksCount = sql.count { it == '?' }
-      if (argumentsCount != questionMarksCount) {
-        val requiredArguments = "$questionMarksCount ${"argument".pluralize(questionMarksCount)}"
-        val actualArguments = "$argumentsCount ${"argument".pluralize(argumentsCount)}"
-        context.report(ISSUE, call, context.getLocation(call), "Wrong argument count, " +
-            "query $sql requires $requiredArguments, but was provided $actualArguments")
-      }
-    }
-  }
-
-  private fun UCallExpression.isQueryMethod() = methodName == QUERY_METHOD_NAME
-
-  private fun String.pluralize(count: Int) = if (count == 1) this else this + "s"
-}
\ No newline at end of file
diff --git a/sqlbrite-lint/src/test/java/com/squareup/sqlbrite3/SqlBriteArgCountDetectorTest.java b/sqlbrite-lint/src/test/java/com/squareup/sqlbrite3/SqlBriteArgCountDetectorTest.java
new file mode 100644
index 0000000..b32f27b
--- /dev/null
+++ b/sqlbrite-lint/src/test/java/com/squareup/sqlbrite3/SqlBriteArgCountDetectorTest.java
@@ -0,0 +1,171 @@
+package com.squareup.sqlbrite3;
+
+import com.android.tools.lint.checks.infrastructure.LintDetectorTest;
+
+import org.junit.Test;
+
+import static com.android.tools.lint.checks.infrastructure.TestFiles.java;
+import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;
+
+public final class SqlBriteArgCountDetectorTest {
+    @SuppressWarnings("UnstableApiUsage")
+    private static final LintDetectorTest.TestFile BRITE_DATABASE_STUB =
+            java(
+                    "package com.squareup.sqlbrite3;\n" +
+                            "\n" +
+                            "public final class BriteDatabase {\n" +
+                            "\n" +
+                            "  public void query(String sql, Object... args) {\n" +
+                            "  }\n" +
+                            "  \n" +
+                            "  public void createQuery(String table, String sql, Object... args) {\n" +
+                            "  }\n" +
+                            "  \n" +
+                            "  // simulate createQuery with SupportSQLiteQuery query parameter\n" +
+                            "  public void createQuery(String table, int something) {\n" +
+                            "  }\n" +
+                            "}\n"
+            );
+
+    @Test
+    public void cleanCaseWithWithQueryAsLiteral() {
+        lint().files(
+                BRITE_DATABASE_STUB,
+                java(
+                        "package test.pkg;\n" +
+                                "\n" +
+                                "import com.squareup.sqlbrite3.BriteDatabase;\n" +
+                                "\n" +
+                                "public class Test {\n" +
+                                "    private static final String QUERY = \"SELECT name FROM table WHERE id = ?\";\n" +
+                                "\n" +
+                                "    public void test() {\n" +
+                                "      BriteDatabase db = new BriteDatabase();\n" +
+                                "      db.query(QUERY, \"id\");\n" +
+                                "    }\n" +
+                                "\n" +
+                                "}\n"
+                )
+        )
+                .issues(SqlBriteArgCountDetector.ISSUE)
+                .run()
+                .expectClean();
+    }
+
+    @Test
+    public void cleanCaseWithQueryThatCantBeEvaluated() {
+        lint().files(
+                BRITE_DATABASE_STUB,
+                java(
+                        "package test.pkg;\n" +
+                                "\n" +
+                                "import com.squareup.sqlbrite3.BriteDatabase;\n" +
+                                "\n" +
+                                "public class Test {\n" +
+                                "    private static final String QUERY = \"SELECT name FROM table WHERE id = ?\";\n" +
+                                "\n" +
+                                "    public void test() {\n" +
+                                "      BriteDatabase db = new BriteDatabase();\n" +
+                                "      db.query(query(), \"id\");\n" +
+                                "    }\n" +
+                                "    private String query() {\n" +
+                                "      return QUERY + \" age = ?\";\n" +
+                                "    }\n" +
+                                "\n" +
+                                "}\n"
+                        )
+        )
+                .issues(SqlBriteArgCountDetector.ISSUE)
+                .run()
+                .expectClean();
+    }
+
+    @Test
+    public void cleanCaseWithNonVarargMethodCall() {
+        lint().files(
+                BRITE_DATABASE_STUB,
+                java(
+                        "package test.pkg;\n" +
+                                "\n" +
+                                "import com.squareup.sqlbrite3.BriteDatabase;\n" +
+                                "\n" +
+                                "public class Test {\n" +
+                                "    private static final String QUERY = \"SELECT name FROM table WHERE id = ?\";\n" +
+                                "\n" +
+                                "    public void test() {\n" +
+                                "      BriteDatabase db = new BriteDatabase();\n" +
+                                "      db.createQuery(\"table\", 42);\n" +
+                                "    }\n" +
+                                "\n" +
+                                "}\n"
+                )
+        )
+                .issues(SqlBriteArgCountDetector.ISSUE)
+                .run()
+                .expectClean();
+    }
+
+    @Test
+    public void queryMethodWithWrongNumberOfArguments() {
+        lint().files(
+                BRITE_DATABASE_STUB,
+                java(
+                        "package test.pkg;\n" +
+                                "\n" +
+                                "import com.squareup.sqlbrite3.BriteDatabase;\n" +
+                                "\n" +
+                                "public class Test {\n" +
+                                "    private static final String QUERY = \"SELECT name FROM table WHERE id = ?\";\n" +
+                                "\n" +
+                                "    public void test() {\n" +
+                                "      BriteDatabase db = new BriteDatabase();\n" +
+                                "      db.query(QUERY);\n" +
+                                "    }\n" +
+                                "\n" +
+                                "}\n"
+                )
+        )
+                .issues(SqlBriteArgCountDetector.ISSUE)
+                .run()
+                .expect(
+                        "src/test/pkg/Test.java:10: " +
+                                "Error: Wrong argument count, query SELECT name FROM table WHERE id = ?" +
+                                " requires 1 argument, but was provided 0 arguments [SqlBriteArgCount]\n" +
+                                "      db.query(QUERY);\n" +
+                                "      ~~~~~~~~~~~~~~~\n" +
+                                "1 errors, 0 warnings"
+                );
+    }
+
+    @Test
+    public void createQueryMethodWithWrongNumberOfArguments() {
+        lint().files(
+                BRITE_DATABASE_STUB,
+                java(
+                        "package test.pkg;\n" +
+                                "\n" +
+                                "import com.squareup.sqlbrite3.BriteDatabase;\n" +
+                                "\n" +
+                                "public class Test {\n" +
+                                "    private static final String QUERY = \"SELECT name FROM table WHERE id = ?\";\n" +
+                                "\n" +
+                                "    public void test() {\n" +
+                                "      BriteDatabase db = new BriteDatabase();\n" +
+                                "      db.createQuery(\"table\", QUERY);\n" +
+                                "    }\n" +
+                                "\n" +
+                                "}\n"
+                )
+        )
+                .issues(SqlBriteArgCountDetector.ISSUE)
+                .run()
+                .expect(
+                        "src/test/pkg/Test.java:10: " +
+                                "Error: Wrong argument count, query SELECT name FROM table WHERE id = ?" +
+                                " requires 1 argument, but was provided 0 arguments [SqlBriteArgCount]\n" +
+                                "      db.createQuery(\"table\", QUERY);\n" +
+                                "      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" +
+                                "1 errors, 0 warnings"
+                );
+    }
+}
diff --git a/sqlbrite-lint/src/test/java/com/squareup/sqlbrite3/SqlBriteArgCountDetectorTest.kt b/sqlbrite-lint/src/test/java/com/squareup/sqlbrite3/SqlBriteArgCountDetectorTest.kt
deleted file mode 100644
index c946983..0000000
--- a/sqlbrite-lint/src/test/java/com/squareup/sqlbrite3/SqlBriteArgCountDetectorTest.kt
+++ /dev/null
@@ -1,207 +0,0 @@
-/*
- * Copyright (C) 2017 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.squareup.sqlbrite3
-
-import com.android.tools.lint.checks.infrastructure.TestFiles.java
-import com.android.tools.lint.checks.infrastructure.TestLintTask.lint
-import org.junit.Test
-
-class SqlBriteArgCountDetectorTest {
-
-  companion object {
-    private val BRITE_DATABASE_STUB = java(
-        """
-      package com.squareup.sqlbrite3;
-
-      public final class BriteDatabase {
-
-        public void query(String sql, Object... args) {
-        }
-
-        public void createQuery(String table, String sql, Object... args) {
-        }
-
-        // simulate createQuery with SupportSQLiteQuery query parameter
-        public void createQuery(String table, int something) {
-        }
-      }
-      """.trimIndent()
-    )
-  }
-
-  @Test
-  fun cleanCaseWithWithQueryAsLiteral() {
-    lint().files(
-        BRITE_DATABASE_STUB,
-        java(
-            """
-              package test.pkg;
-
-              import com.squareup.sqlbrite3.BriteDatabase;
-
-              public class Test {
-                  private static final String QUERY = "SELECT name FROM table WHERE id = ?";
-
-                  public void test() {
-                    BriteDatabase db = new BriteDatabase();
-                    db.query(QUERY, "id");
-                  }
-
-              }
-            """.trimIndent()))
-        .issues(SqlBriteArgCountDetector.ISSUE)
-        .run()
-        .expectClean()
-  }
-
-  @Test
-  fun cleanCaseWithQueryAsBinaryExpression() {
-    lint().files(
-        BRITE_DATABASE_STUB,
-        java(
-            """
-              package test.pkg;
-
-              import com.squareup.sqlbrite3.BriteDatabase;
-
-              public class Test {
-                  private static final String QUERY = "SELECT name FROM table WHERE ";
-
-                  public void test() {
-                    BriteDatabase db = new BriteDatabase();
-                    db.query(QUERY + "id = ?", "id");
-                  }
-
-              }
-            """.trimIndent()))
-        .issues(SqlBriteArgCountDetector.ISSUE)
-        .run()
-        .expectClean()
-  }
-
-  @Test
-  fun cleanCaseWithQueryThatCantBeEvaluated() {
-    lint().files(
-        BRITE_DATABASE_STUB,
-        java(
-            """
-              package test.pkg;
-
-              import com.squareup.sqlbrite3.BriteDatabase;
-
-              public class Test {
-                  private static final String QUERY = "SELECT name FROM table WHERE id = ?";
-
-                  public void test() {
-                    BriteDatabase db = new BriteDatabase();
-                    db.query(query(), "id");
-                  }
-
-                  private String query() {
-                    return QUERY + " age = ?";
-                  }
-
-              }
-            """.trimIndent()))
-        .issues(SqlBriteArgCountDetector.ISSUE)
-        .run()
-        .expectClean()
-  }
-
-  @Test
-  fun cleanCaseWithNonVarargMethodCall() {
-    lint().files(
-        BRITE_DATABASE_STUB,
-        java(
-            """
-              package test.pkg;
-
-              import com.squareup.sqlbrite3.BriteDatabase;
-
-              public class Test {
-
-                  public void test() {
-                    BriteDatabase db = new BriteDatabase();
-                    db.createQuery("table", 42);
-                  }
-
-              }
-            """.trimIndent()))
-        .issues(SqlBriteArgCountDetector.ISSUE)
-        .run()
-        .expectClean()
-  }
-
-  @Test
-  fun queryMethodWithWrongNumberOfArguments() {
-    lint().files(
-        BRITE_DATABASE_STUB,
-        java(
-            """
-              package test.pkg;
-
-              import com.squareup.sqlbrite3.BriteDatabase;
-
-              public class Test {
-                  private static final String QUERY = "SELECT name FROM table WHERE id = ?";
-
-                  public void test() {
-                    BriteDatabase db = new BriteDatabase();
-                    db.query(QUERY);
-                  }
-
-              }
-            """.trimIndent()))
-        .issues(SqlBriteArgCountDetector.ISSUE)
-        .run()
-        .expect("src/test/pkg/Test.java:10: " +
-            "Error: Wrong argument count, query SELECT name FROM table WHERE id = ?" +
-            " requires 1 argument, but was provided 0 arguments [SqlBriteArgCount]\n" +
-            "      db.query(QUERY);\n" +
-            "      ~~~~~~~~~~~~~~~\n" +
-            "1 errors, 0 warnings")
-  }
-
-  @Test
-  fun createQueryMethodWithWrongNumberOfArguments() {
-    lint().files(
-        BRITE_DATABASE_STUB,
-        java(
-            """
-              package test.pkg;
-
-              import com.squareup.sqlbrite3.BriteDatabase;
-
-              public class Test {
-                  private static final String QUERY = "SELECT name FROM table WHERE id = ?";
-
-                  public void test() {
-                    BriteDatabase db = new BriteDatabase();
-                    db.createQuery("table", QUERY);
-                  }
-
-              }
-            """.trimIndent()))
-        .issues(SqlBriteArgCountDetector.ISSUE)
-        .run()
-        .expect("src/test/pkg/Test.java:10: " +
-            "Error: Wrong argument count, query SELECT name FROM table WHERE id = ?" +
-            " requires 1 argument, but was provided 0 arguments [SqlBriteArgCount]\n" +
-            "      db.createQuery(\"table\", QUERY);\n" +
-            "      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" +
-            "1 errors, 0 warnings")
-  }
-}
\ No newline at end of file
