diff --git a/README.md b/README.md
index 0a2b37a..0865b80 100755
--- a/README.md
+++ b/README.md
@@ -1,6 +1,8 @@
-SQLBrite
+SQLCipherBrite
 ========
 
+A fork of [SQLBrite][sqlbrite] to be used with SQLCipher.
+
 A lightweight wrapper around `SQLiteOpenHelper` and `ContentResolver` which introduces reactive
 stream semantics to queries.
 
@@ -178,3 +180,4 @@ License
 
  [snap]: https://oss.sonatype.org/content/repositories/snapshots/
  [sqldelight]: https://github.com/square/sqldelight/
+ [sqlbrite]: https://github.com/square/sqlbrite
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index 43c0dce..ac736b0 100644
--- a/build.gradle
+++ b/build.gradle
@@ -35,6 +35,7 @@ ext {
   truth = 'com.google.truth:truth:0.27'
   findbugsJsr305 = 'com.google.code.findbugs:jsr305:3.0.0'
   findbugsAnnotations = 'com.google.code.findbugs:annotations:3.0.0'
+  sqlCipher = 'net.zetetic:android-database-sqlcipher:3.3.1-2'
 }
 
 configurations {
diff --git a/gradle.properties b/gradle.properties
index 5bafe6b..394765a 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,16 +1,16 @@
-GROUP=com.squareup.sqlbrite
+GROUP=com.vexdev.sqlcipherbrite
 VERSION_NAME=0.6.3-SNAPSHOT
 
-POM_DESCRIPTION=A lightweight wrapper around SQLiteOpenHelper which introduces reactive stream semantics to SQL operations.
+POM_DESCRIPTION=A Fork of SQLBrite to be used with SQLCipher
 
-POM_URL=http://github.com/square/sqlbrite/
-POM_SCM_URL=http://github.com/square/sqlbrite/
-POM_SCM_CONNECTION=scm:git:git://github.com/square/sqlbrite.git
-POM_SCM_DEV_CONNECTION=scm:git:ssh://git@github.com/square/sqlbrite.git
+POM_URL=http://github.com/vexdev/sqlcipherbrite/
+POM_SCM_URL=http://github.com/vexdev/sqlcipherbrite/
+POM_SCM_CONNECTION=scm:git:git://github.com/vexdev/sqlcipherbrite.git
+POM_SCM_DEV_CONNECTION=scm:git:ssh://git@github.com/vexdev/sqlcipherbrite.git
 
 POM_LICENCE_NAME=The Apache Software License, Version 2.0
 POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
 POM_LICENCE_DIST=repo
 
-POM_DEVELOPER_ID=square
-POM_DEVELOPER_NAME=Square, Inc.
+POM_DEVELOPER_ID=vexdev
+POM_DEVELOPER_NAME=VexDev
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java b/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
index b5ea4fa..670df42 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/db/DbModule.java
@@ -15,19 +15,24 @@
  */
 package com.example.sqlbrite.todo.db;
 
-import android.app.Application;
-import android.database.sqlite.SQLiteOpenHelper;
 import com.squareup.sqlbrite.BriteDatabase;
 import com.squareup.sqlbrite.SqlBrite;
+
+import net.sqlcipher.database.SQLiteOpenHelper;
+
+import android.app.Application;
+
+import javax.inject.Singleton;
+
 import dagger.Module;
 import dagger.Provides;
-import javax.inject.Singleton;
 import rx.schedulers.Schedulers;
 import timber.log.Timber;
 
 @Module(complete = false, library = true)
 public final class DbModule {
-  @Provides @Singleton SQLiteOpenHelper provideOpenHelper(Application application) {
+  @Provides @Singleton
+  SQLiteOpenHelper provideOpenHelper(Application application) {
     return new DbOpenHelper(application);
   }
 
@@ -40,7 +45,7 @@
   }
 
   @Provides @Singleton BriteDatabase provideDatabase(SqlBrite sqlBrite, SQLiteOpenHelper helper) {
-    BriteDatabase db = sqlBrite.wrapDatabaseHelper(helper, Schedulers.io());
+    BriteDatabase db = sqlBrite.wrapDatabaseHelper(helper, Schedulers.io(), "password");
     db.setLoggingEnabled(true);
     return db;
   }
diff --git a/sample/src/main/java/com/example/sqlbrite/todo/db/DbOpenHelper.java b/sample/src/main/java/com/example/sqlbrite/todo/db/DbOpenHelper.java
index 00af8eb..877576c 100644
--- a/sample/src/main/java/com/example/sqlbrite/todo/db/DbOpenHelper.java
+++ b/sample/src/main/java/com/example/sqlbrite/todo/db/DbOpenHelper.java
@@ -15,9 +15,10 @@
  */
 package com.example.sqlbrite.todo.db;
 
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteOpenHelper;
+
 import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
 
 final class DbOpenHelper extends SQLiteOpenHelper {
   private static final int VERSION = 1;
diff --git a/sqlbrite/build.gradle b/sqlbrite/build.gradle
index fccb727..bcb00d8 100644
--- a/sqlbrite/build.gradle
+++ b/sqlbrite/build.gradle
@@ -10,6 +10,7 @@ apply from: rootProject.file('gradle/android-findbugs.gradle')
 dependencies {
   compile rootProject.ext.rxJava
   compile rootProject.ext.supportAnnotations
+  compile rootProject.ext.sqlCipher
 
   androidTestCompile rootProject.ext.supportTestRunner
   androidTestCompile(rootProject.ext.truth) {
diff --git a/sqlbrite/gradle.properties b/sqlbrite/gradle.properties
index ca532be..d958ae1 100644
--- a/sqlbrite/gradle.properties
+++ b/sqlbrite/gradle.properties
@@ -1,3 +1,3 @@
-POM_ARTIFACT_ID=sqlbrite
-POM_NAME=SqlBrite
+POM_ARTIFACT_ID=sqlcipherbrite
+POM_NAME=SqlCipherBrite
 POM_PACKAGING=aar
diff --git a/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteDatabase.java b/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteDatabase.java
index 696d70a..bc06c00 100644
--- a/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteDatabase.java
+++ b/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteDatabase.java
@@ -15,16 +15,19 @@
  */
 package com.squareup.sqlbrite;
 
+import com.squareup.sqlbrite.SqlBrite.Query;
+
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteOpenHelper;
+import net.sqlcipher.database.SQLiteTransactionListener;
+
 import android.content.ContentValues;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
-import android.database.sqlite.SQLiteTransactionListener;
 import android.support.annotation.CheckResult;
 import android.support.annotation.IntDef;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import com.squareup.sqlbrite.SqlBrite.Query;
+
 import java.io.Closeable;
 import java.lang.annotation.Retention;
 import java.util.Arrays;
@@ -32,6 +35,7 @@
 import java.util.LinkedHashSet;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
+
 import rx.Observable;
 import rx.Scheduler;
 import rx.functions.Action0;
@@ -99,16 +103,19 @@
   private volatile SQLiteDatabase readableDatabase;
   private volatile SQLiteDatabase writeableDatabase;
   private final Object databaseLock = new Object();
+  private final String password;
 
   private final Scheduler scheduler;
 
   // Package-private to avoid synthetic accessor method for 'transaction' instance.
   volatile boolean logging;
 
-  BriteDatabase(SQLiteOpenHelper helper, SqlBrite.Logger logger, Scheduler scheduler) {
+  BriteDatabase(SQLiteOpenHelper helper, SqlBrite.Logger logger, Scheduler scheduler,
+      String password) {
     this.helper = helper;
     this.logger = logger;
     this.scheduler = scheduler;
+    this.password = password;
   }
 
   /**
@@ -125,7 +132,7 @@ SQLiteDatabase getReadableDatabase() {
         db = readableDatabase;
         if (db == null) {
           if (logging) log("Creating readable database");
-          db = readableDatabase = helper.getReadableDatabase();
+          db = readableDatabase = helper.getReadableDatabase(this.password);
         }
       }
     }
@@ -140,7 +147,7 @@ SQLiteDatabase getWriteableDatabase() {
         db = writeableDatabase;
         if (db == null) {
           if (logging) log("Creating writeable database");
-          db = writeableDatabase = helper.getWritableDatabase();
+          db = writeableDatabase = helper.getWritableDatabase(this.password);
         }
       }
     }
diff --git a/sqlbrite/src/main/java/com/squareup/sqlbrite/SqlBrite.java b/sqlbrite/src/main/java/com/squareup/sqlbrite/SqlBrite.java
index 1728b67..39607e4 100644
--- a/sqlbrite/src/main/java/com/squareup/sqlbrite/SqlBrite.java
+++ b/sqlbrite/src/main/java/com/squareup/sqlbrite/SqlBrite.java
@@ -15,14 +15,17 @@
  */
 package com.squareup.sqlbrite;
 
+import net.sqlcipher.database.SQLiteOpenHelper;
+
 import android.content.ContentResolver;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteOpenHelper;
 import android.support.annotation.CheckResult;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.util.Log;
+
 import java.util.List;
+
 import rx.Observable;
 import rx.Observable.Operator;
 import rx.Scheduler;
@@ -55,7 +58,7 @@ private SqlBrite(@NonNull Logger logger) {
   }
 
   /**
-   * Wrap a {@link SQLiteOpenHelper} for observable queries.
+   * Wrap a {@link SQLiteOpenHelper} for observable queries on databases encrypted with SqlCipher.
    * <p>
    * While not strictly required, instances of this class assume that they will be the only ones
    * interacting with the underlying {@link SQLiteOpenHelper} and it is required for automatic
@@ -64,10 +67,11 @@ private SqlBrite(@NonNull Logger logger) {
    *
    * @param scheduler The {@link Scheduler} on which items from {@link BriteDatabase#createQuery}
    * will be emitted.
+   * @param password The password to be used for encryption
    */
   @CheckResult @NonNull public BriteDatabase wrapDatabaseHelper(@NonNull SQLiteOpenHelper helper,
-      @NonNull Scheduler scheduler) {
-    return new BriteDatabase(helper, logger, scheduler);
+      @NonNull Scheduler scheduler, @NonNull String password) {
+    return new BriteDatabase(helper, logger, scheduler, password);
   }
 
   /**
