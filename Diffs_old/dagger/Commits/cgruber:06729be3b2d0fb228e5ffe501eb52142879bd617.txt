diff --git a/core/src/main/java/dagger/internal/Linker.java b/core/src/main/java/dagger/internal/Linker.java
index 701d6c273..0fef0fe41 100644
--- a/core/src/main/java/dagger/internal/Linker.java
+++ b/core/src/main/java/dagger/internal/Linker.java
@@ -401,12 +401,15 @@ private DeferredBinding(String deferredKey, ClassLoader classLoader, Object requ
       this.classLoader = classLoader;
       this.mustHaveInjections = mustHaveInjections;
     }
+
     @Override public void injectMembers(Object t) {
       throw new UnsupportedOperationException("Deferred bindings must resolve first.");
     }
+
     @Override public void getDependencies(Set<Binding<?>> get, Set<Binding<?>> injectMembers) {
       throw new UnsupportedOperationException("Deferred bindings must resolve first.");
     }
+
     @Override public String toString() {
       return "DeferredBinding[deferredKey=" + deferredKey + "]";
     }
diff --git a/core/src/test/java/dagger/ExtensionWithSetBindingsTest.java b/core/src/test/java/dagger/ExtensionWithSetBindingsTest.java
index 0f604236b..30b4929b0 100644
--- a/core/src/test/java/dagger/ExtensionWithSetBindingsTest.java
+++ b/core/src/test/java/dagger/ExtensionWithSetBindingsTest.java
@@ -59,16 +59,16 @@
   @Test public void basicInjectionWithExtension() {
     ObjectGraph root = ObjectGraph.createWith(new TestingLoader(), new RootModule());
     RealSingleton rs = root.get(RealSingleton.class);
-    assertThat(rs.ints).contains(0, 1);
+    assertThat(rs.ints).containsOnly(0, 1);
 
     ObjectGraph extension = root.plus(new ExtensionModule());
     Main main = extension.get(Main.class);
-    assertThat(main.ints).contains(0, 1, 2, 3);
+    assertThat(main.ints).containsOnly(0, 1, 2, 3);
 
     // Second time around.
     ObjectGraph extension2 = root.plus(new ExtensionModule());
     Main main2 = extension2.get(Main.class);
-    assertThat(main2.ints).contains(0, 1, 4, 5);
+    assertThat(main2.ints).containsOnly(0, 1, 4, 5);
   }
 
   @Module(includes = ExtensionModule.class, overrides = true)
