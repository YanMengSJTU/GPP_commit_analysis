diff --git a/java/dagger/Component.java b/java/dagger/Component.java
index 25abeda8d..abf24b96f 100644
--- a/java/dagger/Component.java
+++ b/java/dagger/Component.java
@@ -199,7 +199,6 @@
  * on the dependency is bound as a provider. Note that <em>only</em> the bindings exposed as
  * provision methods are available through component dependencies.
  *
- * @author Gregory Kick
  * @since 2.0
  */
 @Retention(RUNTIME) // Allows runtimes to have specialized behavior interoperating with Dagger.
diff --git a/java/dagger/MembersInjector.java b/java/dagger/MembersInjector.java
index 9fb7d26b2..5e838894d 100644
--- a/java/dagger/MembersInjector.java
+++ b/java/dagger/MembersInjector.java
@@ -22,8 +22,6 @@
  *
  * @param <T> type to inject members of
  *
- * @author Bob Lee
- * @author Jesse Wilson
  * @since 2.0 (since 1.0 without the provision that {@link #injectMembers} cannot accept
  *      {@code null})
  */
diff --git a/java/dagger/Provides.java b/java/dagger/Provides.java
index de204557b..a60be3b64 100644
--- a/java/dagger/Provides.java
+++ b/java/dagger/Provides.java
@@ -40,8 +40,6 @@
  * allow injection into sites that are marked {@code @Nullable} as well. A component that
  * attempts to pair a {@code @Nullable} provision with a non-{@code @Nullable} injection site
  * will fail to compile.
- *
- * @author Bob Lee
  */
 @Documented @Target(METHOD) @Retention(RUNTIME)
 public @interface Provides {
diff --git a/java/dagger/Subcomponent.java b/java/dagger/Subcomponent.java
index 262327e5d..3b3921bcb 100644
--- a/java/dagger/Subcomponent.java
+++ b/java/dagger/Subcomponent.java
@@ -28,7 +28,6 @@
  * {@link Subcomponent}. The details of how to associate a subcomponent with a parent are described
  * in the documentation for {@link Component}.
  *
- * @author Gregory Kick
  * @since 2.0
  */
 @Retention(RUNTIME) // Allows runtimes to have specialized behavior interoperating with Dagger.
diff --git a/java/dagger/internal/Factory.java b/java/dagger/internal/Factory.java
index 4fa0399fa..9c03f81aa 100644
--- a/java/dagger/internal/Factory.java
+++ b/java/dagger/internal/Factory.java
@@ -31,9 +31,6 @@
  * as those created by {@link Inject} constructors, a new instance is not guaranteed by all
  * bindings. For example, {@link Provides} methods may be implemented in ways that return the same
  * instance for each call.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 public interface Factory<T> extends Provider<T> {
 }
diff --git a/java/dagger/internal/InstanceFactory.java b/java/dagger/internal/InstanceFactory.java
index c3d1f5675..3156fe877 100644
--- a/java/dagger/internal/InstanceFactory.java
+++ b/java/dagger/internal/InstanceFactory.java
@@ -28,9 +28,6 @@
  * {@link #get} will always return the same instance. As such, any scoping applied to this factory
  * is redundant and unnecessary. However, using this with {@link DoubleCheck#provider} is valid and
  * may be desired for testing or contractual guarantees.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 public final class InstanceFactory<T> implements Factory<T>, Lazy<T> {
   public static <T> Factory<T> create(T instance) {
diff --git a/java/dagger/internal/MapFactory.java b/java/dagger/internal/MapFactory.java
index b6f925a98..a580a1388 100644
--- a/java/dagger/internal/MapFactory.java
+++ b/java/dagger/internal/MapFactory.java
@@ -29,10 +29,6 @@
 /**
  * A {@link Factory} implementation used to implement {@link Map} bindings. This factory returns a
  * {@code Map<K, V>} when calling {@link #get} (as specified by {@link Factory}).
- *
- * @author Chenying Hou
- * @since 2.0
- *
  */
 public final class MapFactory<K, V> implements Factory<Map<K, V>> {
   private static final Provider<Map<Object, Object>> EMPTY =
diff --git a/java/dagger/internal/MapProviderFactory.java b/java/dagger/internal/MapProviderFactory.java
index 2458a3c05..0a5c115e6 100644
--- a/java/dagger/internal/MapProviderFactory.java
+++ b/java/dagger/internal/MapProviderFactory.java
@@ -28,9 +28,6 @@
 /**
  * A {@link Factory} implementation used to implement {@link Map} bindings. This factory returns a
  * {@code Map<K, Provider<V>>} when calling {@link #get} (as specified by {@link Factory}).
- *
- * @author Chenying Hou
- * @since 2.0
  */
 public final class MapProviderFactory<K, V>
     implements Factory<Map<K, Provider<V>>>, Lazy<Map<K, Provider<V>>> {
diff --git a/java/dagger/internal/MembersInjectors.java b/java/dagger/internal/MembersInjectors.java
index 08038cee6..aae068c08 100644
--- a/java/dagger/internal/MembersInjectors.java
+++ b/java/dagger/internal/MembersInjectors.java
@@ -23,9 +23,6 @@
 
 /**
  * Basic {@link MembersInjector} implementations used by the framework.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 public final class MembersInjectors {
   /**
diff --git a/java/dagger/internal/SetFactory.java b/java/dagger/internal/SetFactory.java
index b5a2ecd1e..3f3ad0d51 100644
--- a/java/dagger/internal/SetFactory.java
+++ b/java/dagger/internal/SetFactory.java
@@ -33,9 +33,6 @@
  * A {@link Factory} implementation used to implement {@link Set} bindings. This factory always
  * returns a new {@link Set} instance for each call to {@link #get} (as required by {@link Factory})
  * whose elements are populated by subsequent calls to their {@link Provider#get} methods.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 public final class SetFactory<T> implements Factory<Set<T>> {
   private static final Factory<Set<Object>> EMPTY_FACTORY = InstanceFactory.create(emptySet());
diff --git a/java/dagger/internal/codegen/Binding.java b/java/dagger/internal/codegen/Binding.java
index e43b0803c..6254b73ca 100644
--- a/java/dagger/internal/codegen/Binding.java
+++ b/java/dagger/internal/codegen/Binding.java
@@ -50,9 +50,6 @@
  * {@link Element} that generated the binding and the {@link DependencyRequest} instances that are
  * required to satisfy the binding, but leaves the specifics of the <i>mechanism</i> of the binding
  * to the subtypes.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 abstract class Binding extends BindingDeclaration implements dagger.model.Binding {
 
diff --git a/java/dagger/internal/codegen/BindingGraph.java b/java/dagger/internal/codegen/BindingGraph.java
index d75697be2..a76a1fb68 100644
--- a/java/dagger/internal/codegen/BindingGraph.java
+++ b/java/dagger/internal/codegen/BindingGraph.java
@@ -44,8 +44,6 @@
 
 /**
  * The canonical representation of a full-resolved graph.
- *
- * @author Gregory Kick
  */
 @AutoValue
 abstract class BindingGraph {
diff --git a/java/dagger/internal/codegen/BindingVariableNamer.java b/java/dagger/internal/codegen/BindingVariableNamer.java
index 311a83b5d..8537ea0cf 100644
--- a/java/dagger/internal/codegen/BindingVariableNamer.java
+++ b/java/dagger/internal/codegen/BindingVariableNamer.java
@@ -34,9 +34,6 @@
 /**
  * Suggests a variable name for a type based on a {@link Binding}. Prefer
  * {@link DependencyVariableNamer} for cases where a specific {@link DependencyRequest} is present.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 final class BindingVariableNamer {
   private static final TypeVisitor<Void, StringBuilder> TYPE_NAMER =
diff --git a/java/dagger/internal/codegen/BuilderValidator.java b/java/dagger/internal/codegen/BuilderValidator.java
index 40ac14810..2d6906f5d 100644
--- a/java/dagger/internal/codegen/BuilderValidator.java
+++ b/java/dagger/internal/codegen/BuilderValidator.java
@@ -45,8 +45,6 @@
 
 /**
  * Validates {@link dagger.Component.Builder} annotations.
- *
- * @author sameb@google.com (Sam Berlin)
  */
 class BuilderValidator {
 
diff --git a/java/dagger/internal/codegen/ComponentDescriptor.java b/java/dagger/internal/codegen/ComponentDescriptor.java
index 3d6099a85..92fee88b4 100644
--- a/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -76,9 +76,6 @@
 
 /**
  * The logical representation of a {@link Component} or {@link ProductionComponent} definition.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 @AutoValue
 abstract class ComponentDescriptor {
diff --git a/java/dagger/internal/codegen/ComponentGenerator.java b/java/dagger/internal/codegen/ComponentGenerator.java
index 74cdcd007..1b8086dfe 100644
--- a/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/java/dagger/internal/codegen/ComponentGenerator.java
@@ -30,9 +30,6 @@
 
 /**
  * Generates the implementation of the abstract types annotated with {@link Component}.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 final class ComponentGenerator extends SourceFileGenerator<BindingGraph> {
   private final DaggerTypes types;
diff --git a/java/dagger/internal/codegen/ComponentProcessingStep.java b/java/dagger/internal/codegen/ComponentProcessingStep.java
index 58aba2d94..3e63f3a10 100644
--- a/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -49,8 +49,6 @@
 /**
  * A {@link ProcessingStep} that is responsible for dealing with a component or production component
  * as part of the {@link ComponentProcessor}.
- *
- * @author Gregory Kick
  */
 final class ComponentProcessingStep implements ProcessingStep {
   private final Messager messager;
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index 47908d5c3..9462e33c8 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -46,9 +46,6 @@
  * implementation.
  *
  * TODO(gak): give this some better documentation
- *
- * @author Gregory Kick
- * @since 2.0
  */
 @AutoService(Processor.class)
 public final class ComponentProcessor extends BasicAnnotationProcessor {
diff --git a/java/dagger/internal/codegen/ComponentValidator.java b/java/dagger/internal/codegen/ComponentValidator.java
index 16ca3ac22..42e06f230 100644
--- a/java/dagger/internal/codegen/ComponentValidator.java
+++ b/java/dagger/internal/codegen/ComponentValidator.java
@@ -65,8 +65,6 @@
 /**
  * Performs superficial validation of the contract of the {@link Component} and {@link
  * ProductionComponent} annotations.
- *
- * @author Gregory Kick
  */
 final class ComponentValidator {
   private final DaggerElements elements;
diff --git a/java/dagger/internal/codegen/ConfigurationAnnotations.java b/java/dagger/internal/codegen/ConfigurationAnnotations.java
index a2bf673c4..d939bc595 100644
--- a/java/dagger/internal/codegen/ConfigurationAnnotations.java
+++ b/java/dagger/internal/codegen/ConfigurationAnnotations.java
@@ -55,8 +55,6 @@
 /**
  * Utility methods related to dagger configuration annotations (e.g.: {@link Component}
  * and {@link Module}).
- *
- * @author Gregory Kick
  */
 final class ConfigurationAnnotations {
 
diff --git a/java/dagger/internal/codegen/ContributionBinding.java b/java/dagger/internal/codegen/ContributionBinding.java
index 145ad64f5..1dae93bc5 100644
--- a/java/dagger/internal/codegen/ContributionBinding.java
+++ b/java/dagger/internal/codegen/ContributionBinding.java
@@ -52,9 +52,6 @@
 /**
  * An abstract class for a value object representing the mechanism by which a {@link Key} can be
  * contributed to a dependency graph.
- *
- * @author Jesse Beder
- * @since 2.0
  */
 abstract class ContributionBinding extends Binding implements HasContributionType {
 
diff --git a/java/dagger/internal/codegen/DependencyVariableNamer.java b/java/dagger/internal/codegen/DependencyVariableNamer.java
index 6cd03ef15..21f2d32af 100644
--- a/java/dagger/internal/codegen/DependencyVariableNamer.java
+++ b/java/dagger/internal/codegen/DependencyVariableNamer.java
@@ -32,9 +32,6 @@
  * with the {@link DependencyRequest}.  I.e. strips out words like "lazy" and "provider" if we
  * believe that those refer to {@link Lazy} and {@link Provider} rather than the type being
  * provided.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 //TODO(gak): develop the heuristics to get better names
 final class DependencyVariableNamer {
diff --git a/java/dagger/internal/codegen/ErrorMessages.java b/java/dagger/internal/codegen/ErrorMessages.java
index 520fb2b24..1dc019e73 100644
--- a/java/dagger/internal/codegen/ErrorMessages.java
+++ b/java/dagger/internal/codegen/ErrorMessages.java
@@ -40,9 +40,6 @@
 
 /**
  * The collection of error messages to be reported back to users.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 final class ErrorMessages {
   /*
diff --git a/java/dagger/internal/codegen/FactoryGenerator.java b/java/dagger/internal/codegen/FactoryGenerator.java
index 59376cdf9..d08e2fad5 100644
--- a/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/java/dagger/internal/codegen/FactoryGenerator.java
@@ -68,9 +68,6 @@
 /**
  * Generates {@link Factory} implementations from {@link ProvisionBinding} instances for
  * {@link Inject} constructors.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 final class FactoryGenerator extends SourceFileGenerator<ProvisionBinding> {
   private final Types types;
diff --git a/java/dagger/internal/codegen/Formatter.java b/java/dagger/internal/codegen/Formatter.java
index ce1a292f8..af8a183e3 100644
--- a/java/dagger/internal/codegen/Formatter.java
+++ b/java/dagger/internal/codegen/Formatter.java
@@ -27,8 +27,6 @@
  * representation.
  *
  * @param <T> the type of the object to be transformed.
- * @author Christian Gruber
- * @since 2.0
  */
 abstract class Formatter<T> implements Function<T, String> {
 
diff --git a/java/dagger/internal/codegen/FrameworkField.java b/java/dagger/internal/codegen/FrameworkField.java
index 88d1c4933..fdb9f6e59 100644
--- a/java/dagger/internal/codegen/FrameworkField.java
+++ b/java/dagger/internal/codegen/FrameworkField.java
@@ -40,9 +40,6 @@
  *   <li>{@code Producer<Widget>}
  *   <li>{@code Provider<Map<SomeMapKey, MapValue>>}.
  * </ul>
- *
- * @author Jesse Beder
- * @since 2.0
  */
 @AutoValue
 abstract class FrameworkField {
diff --git a/java/dagger/internal/codegen/InjectBindingRegistryImpl.java b/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
index 355d7503e..6688749f8 100644
--- a/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
+++ b/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
@@ -55,8 +55,6 @@
  * injection bindings from {@link Inject} fields and methods known to the annotation processor.
  * Note that this registry <b>does not</b> handle any explicit bindings (those from {@link Provides}
  * methods, {@link Component} dependencies, etc.).
- *
- * @author Gregory Kick
  */
 @Singleton
 final class InjectBindingRegistryImpl implements InjectBindingRegistry {
diff --git a/java/dagger/internal/codegen/InjectProcessingStep.java b/java/dagger/internal/codegen/InjectProcessingStep.java
index 1a4703196..5ea414ef3 100644
--- a/java/dagger/internal/codegen/InjectProcessingStep.java
+++ b/java/dagger/internal/codegen/InjectProcessingStep.java
@@ -31,9 +31,6 @@
 /**
  * An annotation processor for generating Dagger implementation code based on the {@link Inject}
  * annotation.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 final class InjectProcessingStep implements BasicAnnotationProcessor.ProcessingStep {
   private final InjectBindingRegistry injectBindingRegistry;
diff --git a/java/dagger/internal/codegen/InjectValidator.java b/java/dagger/internal/codegen/InjectValidator.java
index ff8a91afc..68d69bc54 100644
--- a/java/dagger/internal/codegen/InjectValidator.java
+++ b/java/dagger/internal/codegen/InjectValidator.java
@@ -66,9 +66,6 @@
 /**
  * A {@linkplain ValidationReport validator} for {@link Inject}-annotated elements and the types
  * that contain them.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 final class InjectValidator {
   private final Types types;
diff --git a/java/dagger/internal/codegen/InjectionAnnotations.java b/java/dagger/internal/codegen/InjectionAnnotations.java
index b8f7809a4..0a927ef57 100644
--- a/java/dagger/internal/codegen/InjectionAnnotations.java
+++ b/java/dagger/internal/codegen/InjectionAnnotations.java
@@ -33,9 +33,6 @@
 
 /**
  * Utilities relating to annotations defined in the {@code javax.inject} package.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 final class InjectionAnnotations {
   static Optional<AnnotationMirror> getQualifier(Element e) {
diff --git a/java/dagger/internal/codegen/MapKeyProcessingStep.java b/java/dagger/internal/codegen/MapKeyProcessingStep.java
index 80d892fbc..7bf3ab5df 100644
--- a/java/dagger/internal/codegen/MapKeyProcessingStep.java
+++ b/java/dagger/internal/codegen/MapKeyProcessingStep.java
@@ -38,9 +38,6 @@
 /**
  * The annotation processor responsible for validating the mapKey annotation and auto-generate
  * implementation of annotations marked with {@link MapKey @MapKey} where necessary.
- *
- * @author Chenying Hou
- * @since 2.0
  */
 public class MapKeyProcessingStep implements BasicAnnotationProcessor.ProcessingStep {
   private final Messager messager;
diff --git a/java/dagger/internal/codegen/MapKeyValidator.java b/java/dagger/internal/codegen/MapKeyValidator.java
index 965f58b2f..a1a69b912 100644
--- a/java/dagger/internal/codegen/MapKeyValidator.java
+++ b/java/dagger/internal/codegen/MapKeyValidator.java
@@ -32,9 +32,6 @@
 
 /**
  * A validator for {@link MapKey} annotations.
- *
- * @author Chenying Hou
- * @since 2.0
  */
 // TODO(dpb,gak): Should unwrapped MapKeys be required to have their single member be named "value"?
 final class MapKeyValidator {
diff --git a/java/dagger/internal/codegen/MembersInjectionBinding.java b/java/dagger/internal/codegen/MembersInjectionBinding.java
index f92d2e2c4..81f3f99f2 100644
--- a/java/dagger/internal/codegen/MembersInjectionBinding.java
+++ b/java/dagger/internal/codegen/MembersInjectionBinding.java
@@ -34,9 +34,6 @@
 
 /**
  * Represents the full members injection of a particular type.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 @AutoValue
 abstract class MembersInjectionBinding extends Binding {
diff --git a/java/dagger/internal/codegen/MembersInjectorGenerator.java b/java/dagger/internal/codegen/MembersInjectorGenerator.java
index 7f319f23d..13e3e1635 100644
--- a/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/java/dagger/internal/codegen/MembersInjectorGenerator.java
@@ -62,9 +62,6 @@
 
 /**
  * Generates {@link MembersInjector} implementations from {@link MembersInjectionBinding} instances.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 final class MembersInjectorGenerator extends SourceFileGenerator<MembersInjectionBinding> {
   private final Types types;
diff --git a/java/dagger/internal/codegen/MethodSignatureFormatter.java b/java/dagger/internal/codegen/MethodSignatureFormatter.java
index fc67351c2..893aa97d5 100644
--- a/java/dagger/internal/codegen/MethodSignatureFormatter.java
+++ b/java/dagger/internal/codegen/MethodSignatureFormatter.java
@@ -37,9 +37,6 @@
 
 /**
  * Formats the signature of an {@link ExecutableElement} suitable for use in error messages.
- *
- * @author Christian Gruber
- * @since 2.0
  */
 final class MethodSignatureFormatter extends Formatter<ExecutableElement> {
   private final Types types;
diff --git a/java/dagger/internal/codegen/ModuleValidator.java b/java/dagger/internal/codegen/ModuleValidator.java
index fafbb6629..4cbad8aca 100644
--- a/java/dagger/internal/codegen/ModuleValidator.java
+++ b/java/dagger/internal/codegen/ModuleValidator.java
@@ -89,9 +89,6 @@
 
 /**
  * A {@linkplain ValidationReport validator} for {@link Module}s or {@link ProducerModule}s.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 @Singleton
 final class ModuleValidator {
diff --git a/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index bdbe8c29d..33c77bd71 100644
--- a/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -75,9 +75,6 @@
 
 /**
  * Generates {@link Producer} implementations from {@link ProductionBinding} instances.
- *
- * @author Jesse Beder
- * @since 2.0
  */
 final class ProducerFactoryGenerator extends SourceFileGenerator<ProductionBinding> {
   private final Types types;
diff --git a/java/dagger/internal/codegen/ProducesMethodValidator.java b/java/dagger/internal/codegen/ProducesMethodValidator.java
index b2904370f..a49336fd1 100644
--- a/java/dagger/internal/codegen/ProducesMethodValidator.java
+++ b/java/dagger/internal/codegen/ProducesMethodValidator.java
@@ -42,9 +42,6 @@
 
 /**
  * A validator for {@link Produces} methods.
- *
- * @author Jesse Beder
- * @since 2.0
  */
 final class ProducesMethodValidator extends BindingMethodValidator {
 
diff --git a/java/dagger/internal/codegen/ProductionBinding.java b/java/dagger/internal/codegen/ProductionBinding.java
index fb6dbfabe..15deac730 100644
--- a/java/dagger/internal/codegen/ProductionBinding.java
+++ b/java/dagger/internal/codegen/ProductionBinding.java
@@ -32,9 +32,6 @@
 
 /**
  * A value object representing the mechanism by which a {@link Key} can be produced.
- *
- * @author Jesse Beder
- * @since 2.0
  */
 @AutoValue
 abstract class ProductionBinding extends ContributionBinding {
diff --git a/java/dagger/internal/codegen/ProvidesMethodValidator.java b/java/dagger/internal/codegen/ProvidesMethodValidator.java
index 5cf812204..8f7cf1a17 100644
--- a/java/dagger/internal/codegen/ProvidesMethodValidator.java
+++ b/java/dagger/internal/codegen/ProvidesMethodValidator.java
@@ -32,9 +32,6 @@
 
 /**
  * A validator for {@link Provides} methods.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 final class ProvidesMethodValidator extends BindingMethodValidator {
 
diff --git a/java/dagger/internal/codegen/ProvisionBinding.java b/java/dagger/internal/codegen/ProvisionBinding.java
index 33e10384d..09d29e18e 100644
--- a/java/dagger/internal/codegen/ProvisionBinding.java
+++ b/java/dagger/internal/codegen/ProvisionBinding.java
@@ -34,9 +34,6 @@
 
 /**
  * A value object representing the mechanism by which a {@link Key} can be provided.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 @AutoValue
 abstract class ProvisionBinding extends ContributionBinding {
diff --git a/java/dagger/internal/codegen/ResolvedBindings.java b/java/dagger/internal/codegen/ResolvedBindings.java
index 52142fafd..10b76a427 100644
--- a/java/dagger/internal/codegen/ResolvedBindings.java
+++ b/java/dagger/internal/codegen/ResolvedBindings.java
@@ -42,8 +42,6 @@
  * component. (this will only happen if a type has an {@code @Inject} constructor and members, the
  * component has a {@link ComponentDescriptor.ComponentMethodKind#MEMBERS_INJECTION members
  * injection method}, and the type is also requested normally.
- *
- * @author Gregory Kick
  */
 @AutoValue
 abstract class ResolvedBindings implements HasContributionType {
diff --git a/java/dagger/internal/codegen/SourceFileGenerationException.java b/java/dagger/internal/codegen/SourceFileGenerationException.java
index bc3391d00..445a8404f 100644
--- a/java/dagger/internal/codegen/SourceFileGenerationException.java
+++ b/java/dagger/internal/codegen/SourceFileGenerationException.java
@@ -30,9 +30,6 @@
  * <p>This exception <b>should not</b> be used to report detectable, logical errors as it may mask
  * other errors that might have been caught upon further processing.  Use a {@link ValidationReport}
  * for that.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 final class SourceFileGenerationException extends Exception {
   // TODO(ronshapiro): remove these unused values
diff --git a/java/dagger/internal/codegen/SourceFiles.java b/java/dagger/internal/codegen/SourceFiles.java
index 782a87268..b36493f9d 100644
--- a/java/dagger/internal/codegen/SourceFiles.java
+++ b/java/dagger/internal/codegen/SourceFiles.java
@@ -72,9 +72,6 @@
 
 /**
  * Utilities for generating files.
- *
- * @author Gregory Kick
- * @since 2.0
  */
 class SourceFiles {
 
diff --git a/java/dagger/producers/Produced.java b/java/dagger/producers/Produced.java
index 8ae80dcdd..5b7847f30 100644
--- a/java/dagger/producers/Produced.java
+++ b/java/dagger/producers/Produced.java
@@ -42,7 +42,7 @@
  *   }
  * </code></pre>
  *
- * @author Jesse Beder
+ * @since 2.0
  */
 @Beta
 @CheckReturnValue
diff --git a/java/dagger/producers/Producer.java b/java/dagger/producers/Producer.java
index 3c16df523..8485f8184 100644
--- a/java/dagger/producers/Producer.java
+++ b/java/dagger/producers/Producer.java
@@ -89,7 +89,7 @@
  *   Retrieved c
  * </code></pre>
  *
- * @author Jesse Beder
+ * @since 2.0
  */
 @Beta
 public interface Producer<T> {
diff --git a/java/dagger/producers/ProducerModule.java b/java/dagger/producers/ProducerModule.java
index ea4ea6812..e14d45030 100644
--- a/java/dagger/producers/ProducerModule.java
+++ b/java/dagger/producers/ProducerModule.java
@@ -28,7 +28,7 @@
 /**
  * Annotates a class that contributes {@link Produces} bindings to the production component.
  *
- * @author Jesse Beder
+ * @since 2.0
  */
 @Documented
 @Target(TYPE)
diff --git a/java/dagger/producers/Produces.java b/java/dagger/producers/Produces.java
index dc00f2444..df859adb1 100644
--- a/java/dagger/producers/Produces.java
+++ b/java/dagger/producers/Produces.java
@@ -31,7 +31,7 @@
  * to the value that the future produces; otherwise, the return type is bound to the returned value.
  * The production component will pass dependencies to the method as parameters.
  *
- * @author Jesse Beder
+ * @since 2.0
  */
 @Documented
 @Target(METHOD)
diff --git a/java/dagger/producers/ProductionComponent.java b/java/dagger/producers/ProductionComponent.java
index 074d01cf7..9af158838 100644
--- a/java/dagger/producers/ProductionComponent.java
+++ b/java/dagger/producers/ProductionComponent.java
@@ -72,7 +72,7 @@
  * provided executor will be used by the framework to schedule all producer methods (for this
  * component, and any {@link ProductionSubcomponent} it may have.
  *
- * @author Jesse Beder
+ * @since 2.0
  */
 @Documented
 @Target(TYPE)
diff --git a/java/dagger/producers/ProductionSubcomponent.java b/java/dagger/producers/ProductionSubcomponent.java
index 4fc453af1..60ce5dfc2 100644
--- a/java/dagger/producers/ProductionSubcomponent.java
+++ b/java/dagger/producers/ProductionSubcomponent.java
@@ -35,7 +35,7 @@
  * <code>{@literal @}Production Executor</code>, similar to {@link ProductionComponent}. Note that
  * this binding may be in an ancestor component.
  *
- * @author Jesse Beder
+ * @since 2.1
  */
 @Retention(RUNTIME) // Allows runtimes to have specialized behavior interoperating with Dagger.
 @Target(TYPE)
diff --git a/java/dagger/producers/internal/AbstractProducer.java b/java/dagger/producers/internal/AbstractProducer.java
index 5b31380f2..39abe991e 100644
--- a/java/dagger/producers/internal/AbstractProducer.java
+++ b/java/dagger/producers/internal/AbstractProducer.java
@@ -29,9 +29,6 @@
 
 /**
  * An abstract {@link Producer} implementation that memoizes the result of its compute method.
- *
- * @author Jesse Beder
- * @since 2.0
  */
 public abstract class AbstractProducer<T> implements Producer<T> {
   private final Provider<ProductionComponentMonitor> monitorProvider;
diff --git a/java/dagger/producers/internal/MapOfProducedProducer.java b/java/dagger/producers/internal/MapOfProducedProducer.java
index 6a50b22a9..10556d39f 100644
--- a/java/dagger/producers/internal/MapOfProducedProducer.java
+++ b/java/dagger/producers/internal/MapOfProducedProducer.java
@@ -37,8 +37,6 @@
  * A {@link Producer} implementation used to implement {@link Map} bindings. This producer returns a
  * {@code Map<K, Produced<V>>} which is populated by calls to the delegate {@link Producer#get}
  * methods.
- *
- * @author Jesse Beder
  */
 public final class MapOfProducedProducer<K, V> extends AbstractProducer<Map<K, Produced<V>>> {
   private final Map<K, Producer<V>> mapOfProducers;
diff --git a/java/dagger/producers/internal/MapOfProducerProducer.java b/java/dagger/producers/internal/MapOfProducerProducer.java
index 282cf86a1..ef1659224 100644
--- a/java/dagger/producers/internal/MapOfProducerProducer.java
+++ b/java/dagger/producers/internal/MapOfProducerProducer.java
@@ -29,8 +29,6 @@
 /**
  * A {@link Producer} implementation used to implement {@link Map} bindings. This factory returns an
  * immediate future of {@code Map<K, Producer<V>>} when calling {@link #get}.
- *
- * @author Jesse Beder
  */
 public final class MapOfProducerProducer<K, V> extends AbstractProducer<Map<K, Producer<V>>> {
   private final ImmutableMap<K, Producer<V>> contributingMap;
diff --git a/java/dagger/producers/internal/MapProducer.java b/java/dagger/producers/internal/MapProducer.java
index ca1650e08..52875ef71 100644
--- a/java/dagger/producers/internal/MapProducer.java
+++ b/java/dagger/producers/internal/MapProducer.java
@@ -35,8 +35,6 @@
 /**
  * A {@link Producer} implementation used to implement {@link Map} bindings. This producer returns a
  * {@code Map<K, V>} which is populated by calls to the delegate {@link Producer#get} methods.
- *
- * @author Jesse Beder
  */
 public final class MapProducer<K, V> extends AbstractProducer<Map<K, V>> {
   private final ImmutableMap<K, Producer<V>> mapOfProducers;
diff --git a/java/dagger/producers/internal/Producers.java b/java/dagger/producers/internal/Producers.java
index 3a603bebe..c98a8ca7e 100644
--- a/java/dagger/producers/internal/Producers.java
+++ b/java/dagger/producers/internal/Producers.java
@@ -36,9 +36,6 @@
 
 /**
  * Utility methods for use in generated producer code.
- *
- * @author Jesse Beder
- * @since 2.0
  */
 public final class Producers {
   /**
diff --git a/java/dagger/producers/internal/SetOfProducedProducer.java b/java/dagger/producers/internal/SetOfProducedProducer.java
index 0156887d5..60ccc7cc4 100644
--- a/java/dagger/producers/internal/SetOfProducedProducer.java
+++ b/java/dagger/producers/internal/SetOfProducedProducer.java
@@ -37,9 +37,6 @@
  * A {@link Producer} implementation used to implement {@link Set} bindings. This producer returns a
  * future {@code Set<Produced<T>>} whose elements are populated by subsequent calls to the delegate
  * {@link Producer#get} methods.
- *
- * @author Jesse Beder
- * @since 2.0
  */
 public final class SetOfProducedProducer<T> extends AbstractProducer<Set<Produced<T>>> {
   public static <T> Producer<Set<T>> empty() {
diff --git a/java/dagger/producers/internal/SetProducer.java b/java/dagger/producers/internal/SetProducer.java
index ff25ad709..12e196771 100644
--- a/java/dagger/producers/internal/SetProducer.java
+++ b/java/dagger/producers/internal/SetProducer.java
@@ -36,9 +36,6 @@
  * A {@link Producer} implementation used to implement {@link Set} bindings. This producer returns
  * a future {@link Set} whose elements are populated by subsequent calls to the delegate
  * {@link Producer#get} methods.
- *
- * @author Jesse Beder
- * @since 2.0
  */
 public final class SetProducer<T> extends AbstractProducer<Set<T>> {
   private static final Producer<Set<Object>> EMPTY_PRODUCER =
diff --git a/java/dagger/producers/monitoring/ProducerMonitor.java b/java/dagger/producers/monitoring/ProducerMonitor.java
index a7ead827d..c0379fdd3 100644
--- a/java/dagger/producers/monitoring/ProducerMonitor.java
+++ b/java/dagger/producers/monitoring/ProducerMonitor.java
@@ -72,7 +72,7 @@
  * <p>If any of the monitor's methods throw, then the exception will be logged and processing will
  * continue unaffected.
  *
- * @author Jesse Beder
+ * @since 2.1
  */
 public abstract class ProducerMonitor {
   /**
diff --git a/java/dagger/producers/monitoring/ProducerTimingRecorder.java b/java/dagger/producers/monitoring/ProducerTimingRecorder.java
index ae09cd4d8..90fe29ad9 100644
--- a/java/dagger/producers/monitoring/ProducerTimingRecorder.java
+++ b/java/dagger/producers/monitoring/ProducerTimingRecorder.java
@@ -32,7 +32,7 @@
  * update at nanosecond resolution. For example, {@link System#nanoTime()} would satisfy these
  * constraints.
  *
- * @author Jesse Beder
+ * @since 2.1
  */
 public abstract class ProducerTimingRecorder {
   /**
diff --git a/java/dagger/producers/monitoring/ProductionComponentMonitor.java b/java/dagger/producers/monitoring/ProductionComponentMonitor.java
index 17cce77ef..ca71ece3c 100644
--- a/java/dagger/producers/monitoring/ProductionComponentMonitor.java
+++ b/java/dagger/producers/monitoring/ProductionComponentMonitor.java
@@ -44,7 +44,7 @@
  * <p>If any of these methods throw, then the exception will be logged, and the framework will act
  * as though a no-op monitor was returned.
  *
- * @author Jesse Beder
+ * @since 2.1
  */
 public abstract class ProductionComponentMonitor {
   /** Returns a monitor for an individual {@linkplain Produces producer method}. */
diff --git a/java/dagger/producers/monitoring/ProductionComponentTimingRecorder.java b/java/dagger/producers/monitoring/ProductionComponentTimingRecorder.java
index 718d4d972..d82d8e1b8 100644
--- a/java/dagger/producers/monitoring/ProductionComponentTimingRecorder.java
+++ b/java/dagger/producers/monitoring/ProductionComponentTimingRecorder.java
@@ -30,7 +30,7 @@
  * <p>If any of these methods throw, then the exception will be logged, and the framework will act
  * as though a no-op timing recorder was returned.
  *
- * @author Jesse Beder
+ * @since 2.1
  */
 public interface ProductionComponentTimingRecorder {
   /** Returns a timing recorder for an individual {@linkplain Produces producer method}. */
diff --git a/java/dagger/producers/monitoring/TimingRecorders.java b/java/dagger/producers/monitoring/TimingRecorders.java
index 471d527c7..5fbe3e349 100644
--- a/java/dagger/producers/monitoring/TimingRecorders.java
+++ b/java/dagger/producers/monitoring/TimingRecorders.java
@@ -26,7 +26,7 @@
 /**
  * Utility methods relating to timing.
  *
- * @author Jesse Beder
+ * @since 2.1
  */
 // TODO(beder): Reduce the visibility of this class to package-private.
 @Beta
diff --git a/java/dagger/producers/monitoring/internal/Monitors.java b/java/dagger/producers/monitoring/internal/Monitors.java
index 24b1f4dea..13b438ade 100644
--- a/java/dagger/producers/monitoring/internal/Monitors.java
+++ b/java/dagger/producers/monitoring/internal/Monitors.java
@@ -29,8 +29,6 @@
 
 /**
  * Utility methods relating to monitoring, for use in generated producers code.
- *
- * @author Jesse Beder
  */
 public final class Monitors {
   private static final Logger logger = Logger.getLogger(Monitors.class.getName());
diff --git a/javatests/dagger/functional/cycle/Cycles.java b/javatests/dagger/functional/cycle/Cycles.java
index 488f5a0d0..f4faeab30 100644
--- a/javatests/dagger/functional/cycle/Cycles.java
+++ b/javatests/dagger/functional/cycle/Cycles.java
@@ -35,9 +35,6 @@
  * {@literal A ← (E ← D ← B ← C ← Provider<A>, Lazy<A>), (B ← C ← Provider<A>, Lazy<A>)}
  * {@literal S ← Provider<S>, Lazy<S>}
  * </pre>
- *
- * @author Tony Bentancur
- * @since 2.0
  */
 final class Cycles {
   private Cycles() {}
