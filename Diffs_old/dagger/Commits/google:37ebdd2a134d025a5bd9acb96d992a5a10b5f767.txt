diff --git a/java/dagger/internal/codegen/BindingGraph.java b/java/dagger/internal/codegen/BindingGraph.java
index a02cee2dc..2f548b2b7 100644
--- a/java/dagger/internal/codegen/BindingGraph.java
+++ b/java/dagger/internal/codegen/BindingGraph.java
@@ -35,8 +35,10 @@
 import dagger.model.Key;
 import dagger.model.RequestKind;
 import java.util.Collection;
+import java.util.List;
 import java.util.Map;
 import java.util.Optional;
+import java.util.Set;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
@@ -201,19 +203,19 @@ TypeElement componentTypeElement() {
 
   static BindingGraph create(
       ComponentDescriptor componentDescriptor,
-      ImmutableMap<Key, ResolvedBindings> resolvedContributionBindingsMap,
-      ImmutableMap<Key, ResolvedBindings> resolvedMembersInjectionBindings,
-      ImmutableList<BindingGraph> subgraphs,
-      ImmutableSet<ModuleDescriptor> ownedModules,
+      Map<Key, ResolvedBindings> resolvedContributionBindingsMap,
+      Map<Key, ResolvedBindings> resolvedMembersInjectionBindings,
+      List<BindingGraph> subgraphs,
+      Set<ModuleDescriptor> ownedModules,
       Optional<ExecutableElement> factoryMethod,
       boolean isFullBindingGraph) {
     checkForDuplicates(subgraphs);
     return new AutoValue_BindingGraph(
         componentDescriptor,
-        resolvedContributionBindingsMap,
-        resolvedMembersInjectionBindings,
-        subgraphs,
-        ownedModules,
+        ImmutableMap.copyOf(resolvedContributionBindingsMap),
+        ImmutableMap.copyOf(resolvedMembersInjectionBindings),
+        ImmutableList.copyOf(subgraphs),
+        ImmutableSet.copyOf(ownedModules),
         factoryMethod,
         isFullBindingGraph);
   }
diff --git a/java/dagger/internal/codegen/BindingGraphFactory.java b/java/dagger/internal/codegen/BindingGraphFactory.java
index 00efc791d..d96da8a74 100644
--- a/java/dagger/internal/codegen/BindingGraphFactory.java
+++ b/java/dagger/internal/codegen/BindingGraphFactory.java
@@ -40,7 +40,6 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.ImmutableSetMultimap;
 import com.google.common.collect.Iterables;
-import com.google.common.collect.Maps;
 import com.google.common.collect.Multimaps;
 import com.google.common.collect.Sets;
 import dagger.MembersInjector;
@@ -904,17 +903,11 @@ private void resolveDependencies(ResolvedBindings resolvedBindings) {
      * Returns all of the {@link ResolvedBindings} for {@link ContributionBinding}s from this and
      * all ancestor resolvers, indexed by {@link ResolvedBindings#key()}.
      */
-    ImmutableMap<Key, ResolvedBindings> getResolvedContributionBindings() {
-      ImmutableMap.Builder<Key, ResolvedBindings> builder = ImmutableMap.builder();
-      builder.putAll(resolvedContributionBindings);
-      if (parentResolver.isPresent()) {
-        ImmutableMap<Key, ResolvedBindings> parentBindings =
-            parentResolver.get().getResolvedContributionBindings();
-        Map<Key, ResolvedBindings> bindingsResolvedInParent =
-            Maps.difference(parentBindings, resolvedContributionBindings).entriesOnlyOnLeft();
-        builder.putAll(bindingsResolvedInParent);
-      }
-      return builder.build();
+    Map<Key, ResolvedBindings> getResolvedContributionBindings() {
+      Map<Key, ResolvedBindings> bindings = new LinkedHashMap<>();
+      parentResolver.ifPresent(parent -> bindings.putAll(parent.getResolvedContributionBindings()));
+      bindings.putAll(resolvedContributionBindings);
+      return bindings;
     }
 
     /**
