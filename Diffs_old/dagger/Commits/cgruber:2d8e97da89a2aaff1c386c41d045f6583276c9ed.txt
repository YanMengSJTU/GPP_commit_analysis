diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index e5168ac1b..34788aad9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -703,7 +703,7 @@ private void addSubcomponents() {
   private void initializeFrameworkTypes() {
     ImmutableList.Builder<Snippet> snippetsBuilder = ImmutableList.builder();
     for (BindingKey bindingKey : graph.resolvedBindings().keySet()) {
-      snippetsBuilder.add(initializeFrameworkType(bindingKey));
+      snippetsBuilder.addAll(initializeFrameworkType(bindingKey).asSet());
     }
     ImmutableList<Snippet> snippets = snippetsBuilder.build();
 
@@ -736,21 +736,21 @@ private void initializeFrameworkTypes() {
    * any place in any order.  By requiring a single snippet (often of concatenated snippets) we
    * ensure that things like local variables always behave as expected by the initialization logic.
    */
-  private Snippet initializeFrameworkType(BindingKey bindingKey) {
+  private Optional<Snippet> initializeFrameworkType(BindingKey bindingKey) {
     ResolvedBindings resolvedBindings = graph.resolvedBindings().get(bindingKey);
 
     // There's no field for inherited bindings.
     if (resolvedBindings.ownedBindings().isEmpty()) {
-      return Snippet.format("");
+      return Optional.absent();
     }
 
     switch (bindingKey.kind()) {
       case CONTRIBUTION:
         switch (resolvedBindings.contributionType()) {
           case SET:
-            return initializeSetMultibindings(resolvedBindings);
+            return Optional.of(initializeSetMultibindings(resolvedBindings));
           case MAP:
-            return initializeMapMultibindings(resolvedBindings);
+            return Optional.of(initializeMapMultibindings(resolvedBindings));
           case UNIQUE:
             return initializeUniqueContributionBinding(resolvedBindings);
           default:
@@ -816,32 +816,33 @@ private Snippet initializeMapMultibindings(ResolvedBindings resolvedBindings) {
     return Snippet.concat(initializationSnippets.build());
   }
 
-  private Snippet initializeUniqueContributionBinding(ResolvedBindings resolvedBindings) {
-    ImmutableList.Builder<Snippet> initializationSnippets = ImmutableList.builder();
-
+  private Optional<Snippet> initializeUniqueContributionBinding(ResolvedBindings resolvedBindings) {
     ContributionBinding binding = getOnlyElement(resolvedBindings.ownedContributionBindings());
-    if (!binding.factoryCreationStrategy().equals(ENUM_INSTANCE) || binding.scope().isPresent()) {
-      initializationSnippets.add(initializeDelegateFactoriesForUninitializedDependencies(binding));
-      initializationSnippets.add(
-          initializeMember(
-              resolvedBindings.bindingKey(), initializeFactoryForContributionBinding(binding)));
+    if (binding.factoryCreationStrategy().equals(ENUM_INSTANCE) && !binding.scope().isPresent()) {
+      return Optional.absent();
     }
 
-    return Snippet.concat(initializationSnippets.build());
+    return Optional.of(
+        Snippet.concat(
+            ImmutableList.of(
+                initializeDelegateFactoriesForUninitializedDependencies(binding),
+                initializeMember(
+                    resolvedBindings.bindingKey(),
+                    initializeFactoryForContributionBinding(binding)))));
   }
 
-  private Snippet initializeMembersInjectionBinding(ResolvedBindings resolvedBindings) {
-    ImmutableList.Builder<Snippet> initializationSnippets = ImmutableList.builder();
-
+  private Optional<Snippet> initializeMembersInjectionBinding(ResolvedBindings resolvedBindings) {
     MembersInjectionBinding binding = resolvedBindings.membersInjectionBinding().get();
-    if (!binding.injectionStrategy().equals(MembersInjectionBinding.Strategy.NO_OP)) {
-      initializationSnippets.add(initializeDelegateFactoriesForUninitializedDependencies(binding));
-      initializationSnippets.add(
-          initializeMember(
-              resolvedBindings.bindingKey(), initializeMembersInjectorForBinding(binding)));
+    if (binding.injectionStrategy().equals(MembersInjectionBinding.Strategy.NO_OP)) {
+      return Optional.absent();
     }
 
-    return Snippet.concat(initializationSnippets.build());
+    return Optional.of(
+        Snippet.concat(
+            ImmutableList.of(
+                initializeDelegateFactoriesForUninitializedDependencies(binding),
+                initializeMember(
+                    resolvedBindings.bindingKey(), initializeMembersInjectorForBinding(binding)))));
   }
 
   /**
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
index e3adecc8a..d318cd37c 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
@@ -71,7 +71,6 @@ public void testEmptyBuilder() {
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize(builder);",
         "  }",
         "",
         "  public static SimpleComponent.Builder builder() {",
@@ -82,10 +81,6 @@ public void testEmptyBuilder() {
         "    return builder().build();",
         "  }",
         "",
-        "  @SuppressWarnings(\"unchecked\")",
-        "  private void initialize(final Builder builder) {",
-        "  }",
-        "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
         "    return SomeInjectableType_Factory.create().get();",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index 3f400efbc..ba235258a 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -232,7 +232,6 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -243,10 +242,6 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "    return builder().build();",
         "  }",
         "",
-        "  @SuppressWarnings(\"unchecked\")",
-        "  private void initialize(final Builder builder) {",
-        "  }",
-        "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
         "    return SomeInjectableType_Factory.create().get();",
@@ -1825,7 +1820,6 @@ public void subcomponentOmitsInheritedBindings() {
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1836,9 +1830,6 @@ public void subcomponentOmitsInheritedBindings() {
         "    return builder().build();",
         "  }",
         "",
-        "  @SuppressWarnings(\"unchecked\")",
-        "  private void initialize(final Builder builder) {}",
-        "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
         "    return SomeInjectableType_Factory.create().get();",
@@ -1914,7 +1905,6 @@ public void subcomponentOmitsInheritedBindings() {
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1925,9 +1915,6 @@ public void subcomponentOmitsInheritedBindings() {
         "    return builder().build();",
         "  }",
         "",
-        "  @SuppressWarnings(\"unchecked\")",
-        "  private void initialize(final Builder builder) {}",
-        "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
         "    return SomeInjectableType_Factory.create().get();",
