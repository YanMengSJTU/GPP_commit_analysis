diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
index 5b61d06d2..3d28a9b3f 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -738,7 +738,6 @@ private void reportProviderMayNotDependOnProducer(Deque<ResolvedRequest> path) {
     private void reportMissingBinding(Deque<ResolvedRequest> path) {
       Key key = path.peek().request().key();
       BindingKey bindingKey = path.peek().request().bindingKey();
-      TypeMirror type = key.type();
       boolean requiresContributionMethod = !key.isValidImplicitProvisionKey(types);
       boolean requiresProvision = doesPathRequireProvisionOnly(path);
       StringBuilder errorMessage = new StringBuilder();
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectFieldValidator.java b/compiler/src/main/java/dagger/internal/codegen/InjectFieldValidator.java
index 91143de6e..e30678af7 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectFieldValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectFieldValidator.java
@@ -16,7 +16,6 @@
 package dagger.internal.codegen;
 
 import com.google.common.collect.ImmutableSet;
-
 import java.util.Set;
 import javax.inject.Inject;
 import javax.lang.model.element.AnnotationMirror;
diff --git a/compiler/src/main/java/dagger/internal/codegen/MapKeyValidator.java b/compiler/src/main/java/dagger/internal/codegen/MapKeyValidator.java
index d6aa2f21c..586a1e935 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MapKeyValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MapKeyValidator.java
@@ -28,7 +28,7 @@
 import static javax.lang.model.util.ElementFilter.methodsIn;
 
 /**
- * A {@link Validator} for {@link MapKey} annotations.
+ * A validator for {@link MapKey} annotations.
  *
  * @author Chenying Hou
  * @since 2.0
diff --git a/compiler/src/main/java/dagger/internal/codegen/MapKeys.java b/compiler/src/main/java/dagger/internal/codegen/MapKeys.java
index 4d79a28c8..fbbd8cf82 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MapKeys.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MapKeys.java
@@ -20,7 +20,6 @@
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.Iterables;
 import dagger.MapKey;
 import dagger.internal.codegen.writer.ClassName;
 import dagger.internal.codegen.writer.Snippet;
diff --git a/compiler/src/main/java/dagger/internal/codegen/MissingBindingSuggestions.java b/compiler/src/main/java/dagger/internal/codegen/MissingBindingSuggestions.java
index dcabab52d..4b6f0c33c 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MissingBindingSuggestions.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MissingBindingSuggestions.java
@@ -15,9 +15,7 @@
  */
 package dagger.internal.codegen;
 
-import com.google.auto.value.AutoValue;
 import com.google.common.collect.ImmutableList;
-
 import java.util.ArrayDeque;
 import java.util.Deque;
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index 3291c6dc1..0e1e5316a 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -29,7 +29,6 @@
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.Provides.Type;
-import dagger.internal.codegen.ContributionBinding.Kind;
 import dagger.internal.codegen.writer.ClassName;
 import dagger.internal.codegen.writer.ClassWriter;
 import dagger.internal.codegen.writer.ConstructorWriter;
diff --git a/compiler/src/test/java/dagger/internal/codegen/MissingBindingSuggestionsTest.java b/compiler/src/test/java/dagger/internal/codegen/MissingBindingSuggestionsTest.java
index 0ae01b40c..03ec35d9b 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MissingBindingSuggestionsTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MissingBindingSuggestionsTest.java
@@ -15,17 +15,14 @@
  */
 package dagger.internal.codegen;
 
-import com.google.common.base.Joiner;
 import com.google.common.collect.ImmutableList;
 import com.google.testing.compile.JavaFileObjects;
-import java.util.Arrays;
 import javax.tools.JavaFileObject;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
 import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 
 @RunWith(JUnit4.class)
diff --git a/producers/src/main/java/dagger/producers/Produced.java b/producers/src/main/java/dagger/producers/Produced.java
index 7edfee314..db5c133ff 100644
--- a/producers/src/main/java/dagger/producers/Produced.java
+++ b/producers/src/main/java/dagger/producers/Produced.java
@@ -64,7 +64,7 @@
 
   /** Returns a successful {@code Produced}, whose {@link #get} will return the given value. */
   public static <T> Produced<T> successful(@Nullable T value) {
-    return new Successful(value);
+    return new Successful<T>(value);
   }
 
   /**
@@ -72,7 +72,7 @@
    * {@code ExecutionException} with the given cause.
    */
   public static <T> Produced<T> failed(Throwable throwable) {
-    return new Failed(checkNotNull(throwable));
+    return new Failed<T>(checkNotNull(throwable));
   }
 
   private static final class Successful<T> extends Produced<T> {
@@ -90,7 +90,7 @@ private Successful(@Nullable T value) {
       if (o == this) {
         return true;
       } else if (o instanceof Successful) {
-        Successful that = (Successful) o;
+        Successful<?> that = (Successful<?>) o;
         return Objects.equal(this.value, that.value);
       } else {
         return false;
@@ -117,7 +117,7 @@ private Failed(Throwable throwable) {
       if (o == this) {
         return true;
       } else if (o instanceof Failed) {
-        Failed that = (Failed) o;
+        Failed<?> that = (Failed<?>) o;
         return this.throwable.equals(that.throwable);
       } else {
         return false;
diff --git a/producers/src/main/java/dagger/producers/internal/Producers.java b/producers/src/main/java/dagger/producers/internal/Producers.java
index c72c7eecc..65269b54e 100644
--- a/producers/src/main/java/dagger/producers/internal/Producers.java
+++ b/producers/src/main/java/dagger/producers/internal/Producers.java
@@ -51,12 +51,17 @@
   // TODO(user): Document what happens with an InterruptedException after you figure out how to
   // trigger one in a test.
   public static <T> ListenableFuture<Produced<T>> createFutureProduced(ListenableFuture<T> future) {
+    // TODO(dpb): Switch to Futures.catchAsync once guava_jdk5 gets to v19.
     return Futures.withFallback(
-        Futures.transform(future, new Function<T, Produced<T>>() {
-          @Override public Produced<T> apply(final T value) {
-            return Produced.successful(value);
-          }
-        }), Producers.<T>futureFallbackForProduced());
+        Futures.transform(
+            future,
+            new Function<T, Produced<T>>() {
+              @Override
+              public Produced<T> apply(final T value) {
+                return Produced.successful(value);
+              }
+            }),
+        Producers.<T>futureFallbackForProduced());
 
   }
 
diff --git a/producers/src/main/java/dagger/producers/internal/SetOfProducedProducer.java b/producers/src/main/java/dagger/producers/internal/SetOfProducedProducer.java
index ab886714d..2207d7c16 100644
--- a/producers/src/main/java/dagger/producers/internal/SetOfProducedProducer.java
+++ b/producers/src/main/java/dagger/producers/internal/SetOfProducedProducer.java
@@ -39,8 +39,8 @@
    * Returns a new producer that creates {@link Set} futures from the union of the given
    * {@link Producer} instances.
    */
-  public static <T> Producer<Set<Produced<T>>> create(
-      @SuppressWarnings("unchecked") Producer<Set<T>>... producers) {
+  @SafeVarargs
+  public static <T> Producer<Set<Produced<T>>> create(Producer<Set<T>>... producers) {
     return new SetOfProducedProducer<T>(ImmutableSet.copyOf(producers));
   }
 
diff --git a/producers/src/main/java/dagger/producers/internal/SetProducer.java b/producers/src/main/java/dagger/producers/internal/SetProducer.java
index ba3312882..0846f867d 100644
--- a/producers/src/main/java/dagger/producers/internal/SetProducer.java
+++ b/producers/src/main/java/dagger/producers/internal/SetProducer.java
@@ -37,8 +37,8 @@
    * Returns a new producer that creates {@link Set} futures from the union of the given
    * {@link Producer} instances.
    */
-  public static <T> Producer<Set<T>> create(
-      @SuppressWarnings("unchecked") Producer<Set<T>>... producers) {
+  @SafeVarargs
+  public static <T> Producer<Set<T>> create(Producer<Set<T>>... producers) {
     return new SetProducer<T>(ImmutableSet.copyOf(producers));
   }
 
diff --git a/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java b/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java
index 8e4e9b28b..74c1a8f6e 100644
--- a/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java
+++ b/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java
@@ -15,24 +15,27 @@
  */
 package dagger.producers.monitoring;
 
+import dagger.producers.Produces;
+
 /**
  * A hook for monitoring the execution of individual {@linkplain Produces producer methods}. See
  * {@link ProductionComponentMonitor} for how to install these monitors.
  *
  * <p>The lifecycle of the monitor is:
  * <ul>
- *   <li>{@link #methodStarting}
+ *   <li>{@link #methodStarting()}
  *   <li>The method is called
- *   <li>{@link #methodFinished}
+ *   <li>{@link #methodFinished()}
  *   <li>If the method returns a value, then:
  *   <ul>
- *     <li>{#succeeded} if the method returned normally; or
- *     <li>{#failed} if the method threw an exception.
+ *     <li>{@link #succeeded(Object)} if the method returned normally; or
+ *     <li>{@link #failed(Throwable)} if the method threw an exception.
  *   </ul>
  *   <li>If the method returns a future, then:
  *   <ul>
- *     <li>{#succeeded} if the method returned normally, and the future succeeded; or
- *     <li>{#failed} if the method threw an exception, or returned normally and the future failed.
+ *     <li>{@link #succeeded(Object)} if the method returned normally, and the future succeeded; or
+ *     <li>{@link #failed(Throwable)} if the method threw an exception, or returned normally and the
+ *         future failed.
  *   </ul>
  * </ul>
  *
@@ -45,33 +48,32 @@
   /**
    * Called when the producer method is about to start executing.
    *
-   * <p>When multiple monitors are installed, the order that each monitor will call
-   * {@code methodWillStart} is unspecified, but will remain consistent throughout the course of the
-   * execution of a component.
+   * <p>When multiple monitors are installed, the order that each monitor will call this method is
+   * unspecified, but will remain consistent throughout the course of the execution of a component.
    */
   public void methodStarting() {}
 
   /**
    * Called when the producer method has finished executing.
    *
-   * <p>When multiple monitors are installed, the {@code methodFinished} calls will be in the
-   * reverse order from the {@link #methodWillStart} calls.
+   * <p>When multiple monitors are installed, calls to this method will be in the reverse order from
+   * calls to {@link #methodStarting()}.
    */
   public void methodFinished() {}
 
   /**
    * Called when the producer’s future has completed successfully with a value.
    *
-   * <p>When multiple monitors are installed, the {@code futureSucceeded} calls will be in the
-   * reverse order from the {@link #methodWillStart} calls.
+   * <p>When multiple monitors are installed, calls to this method will be in the reverse order from
+   * calls to {@link #methodStarting()}.
    */
   public void succeeded(Object o) {}
 
   /**
    * Called when the producer's future has failed with an exception.
    *
-   * <p>When multiple monitors are installed, the {@code futureFailed} calls will be in the reverse
-   * order from the {@link #methodWillStart} calls.
+   * <p>When multiple monitors are installed, calls to this method will be in the reverse order from
+   * calls to {@link #methodStarting()}.
    */
   public void failed(Throwable t) {}
 }
diff --git a/producers/src/main/java/dagger/producers/monitoring/ProducerToken.java b/producers/src/main/java/dagger/producers/monitoring/ProducerToken.java
index 126a40d4e..5834206ee 100644
--- a/producers/src/main/java/dagger/producers/monitoring/ProducerToken.java
+++ b/producers/src/main/java/dagger/producers/monitoring/ProducerToken.java
@@ -15,6 +15,8 @@
  */
 package dagger.producers.monitoring;
 
+import dagger.producers.Produces;
+
 import static com.google.common.base.Preconditions.checkNotNull;
 
 /** A token that represents an individual {@linkplain Produces producer method}. */
diff --git a/producers/src/main/java/dagger/producers/monitoring/ProductionComponentMonitor.java b/producers/src/main/java/dagger/producers/monitoring/ProductionComponentMonitor.java
index 1a62dfa1f..4dc2903fa 100644
--- a/producers/src/main/java/dagger/producers/monitoring/ProductionComponentMonitor.java
+++ b/producers/src/main/java/dagger/producers/monitoring/ProductionComponentMonitor.java
@@ -15,6 +15,9 @@
  */
 package dagger.producers.monitoring;
 
+import dagger.producers.Produces;
+import dagger.producers.ProductionComponent;
+
 /**
  * A hook for monitoring execution of {@linkplain ProductionComponent production components}. To
  * install a {@code ProductionComponentMonitor}, contribute to a set binding of
diff --git a/producers/src/test/java/dagger/producers/monitoring/internal/MonitorsTest.java b/producers/src/test/java/dagger/producers/monitoring/internal/MonitorsTest.java
index 1e46173ae..ff63dc2bd 100644
--- a/producers/src/test/java/dagger/producers/monitoring/internal/MonitorsTest.java
+++ b/producers/src/test/java/dagger/producers/monitoring/internal/MonitorsTest.java
@@ -28,12 +28,10 @@
 import org.mockito.MockitoAnnotations;
 
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Mockito.any;
+import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.inOrder;
-import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
 
 @RunWith(JUnit4.class)
