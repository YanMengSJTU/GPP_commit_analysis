diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/SubcomponentsWithBoundExecutor.java b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/SubcomponentsWithBoundExecutor.java
index 0e0fae51d..138791826 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/SubcomponentsWithBoundExecutor.java
+++ b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/SubcomponentsWithBoundExecutor.java
@@ -124,6 +124,7 @@ static String fromChild(@FromParent String fromParent) {
     ListenableFuture<String> fromChild();
 
     GrandchildComponent.Builder newGrandchildComponentBuilder();
+    GrandchildComponentWithoutBuilder newGrandchildComponent();
 
     @ProductionSubcomponent.Builder
     interface Builder {
@@ -164,5 +165,11 @@ static String fromGranchild(@FromChild String fromChild) {
     }
   }
 
+  @ProductionSubcomponent(modules = GrandchildProducerModule.class)
+  interface GrandchildComponentWithoutBuilder {
+    @FromGrandchild
+    ListenableFuture<String> fromGrandchild();
+  }
+
   private SubcomponentsWithBoundExecutor() {}
 }
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/SubcomponentWithBoundExecutorTest.java b/compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/SubcomponentWithBoundExecutorTest.java
index 389a8d4b6..78cbadade 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/SubcomponentWithBoundExecutorTest.java
+++ b/compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/SubcomponentWithBoundExecutorTest.java
@@ -23,6 +23,7 @@
 import producerstest.subcomponent.SubcomponentsWithBoundExecutor.ChildComponent;
 import producerstest.subcomponent.SubcomponentsWithBoundExecutor.ExecutorModule;
 import producerstest.subcomponent.SubcomponentsWithBoundExecutor.GrandchildComponent;
+import producerstest.subcomponent.SubcomponentsWithBoundExecutor.GrandchildComponentWithoutBuilder;
 import producerstest.subcomponent.SubcomponentsWithBoundExecutor.ParentComponent;
 import producerstest.subcomponent.SubcomponentsWithBoundExecutor.ParentProductionComponent;
 
@@ -72,6 +73,15 @@ public void topLevelComponent_grandchild() throws Exception {
     assertThat(executionCount.get()).isEqualTo(2);
   }
 
+  @Test
+  public void topLevelComponent_grandchildWithoutBuilder() throws Exception {
+    ChildComponent child = parentComponent.newChildComponentBuilder().build();
+    GrandchildComponentWithoutBuilder grandchild = child.newGrandchildComponent();
+    assertThat(grandchild.fromGrandchild().get()).isEqualTo("grandchild:child:parent");
+    assertThat(executorConstructionCount.get()).isEqualTo(1);
+    assertThat(executionCount.get()).isEqualTo(2);
+  }
+
   @Test
   public void topLevelProductionComponent_child() throws Exception {
     ChildComponent child = parentProductionComponent.newChildComponentBuilder().build();
@@ -88,4 +98,13 @@ public void topLevelProductionComponent_grandchild() throws Exception {
     assertThat(executorConstructionCount.get()).isEqualTo(1);
     assertThat(executionCount.get()).isEqualTo(3);
   }
+
+  @Test
+  public void topLevelProductionComponent_grandchildWithoutBuilder() throws Exception {
+    ChildComponent child = parentProductionComponent.newChildComponentBuilder().build();
+    GrandchildComponentWithoutBuilder grandchild = child.newGrandchildComponent();
+    assertThat(grandchild.fromGrandchild().get()).isEqualTo("grandchild:child:parentproduction");
+    assertThat(executorConstructionCount.get()).isEqualTo(1);
+    assertThat(executionCount.get()).isEqualTo(3);
+  }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
index 23b88dc4e..2060f199b 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -595,6 +595,7 @@ private ComponentMethodDescriptor getDescriptorForComponentMethod(
           map.build(), buildMethod, element.getEnclosingElement().asType()));
     }
 
+    // TODO(beder): Remove the executor dependency when all clients have been updated.
     private Optional<TypeElement> createExecutorDependency(
         Kind componentKind, Optional<BuilderSpec> builderSpec) {
       if (!componentKind.isProducer()) {
@@ -602,10 +603,11 @@ private ComponentMethodDescriptor getDescriptorForComponentMethod(
       }
       TypeElement executorTypeElement = elements.getTypeElement(Executor.class.getCanonicalName());
       if (!builderSpec.isPresent()) {
-        // if there's no builder, we'll add an executor() method to the generated builder so it
-        // must be specified
-        // TODO(beder): Remove this behavior.
-        return Optional.of(executorTypeElement);
+        // if there's no builder on a component (not a subcomponent!), we'll add an executor()
+        // method to the generated builder so it must be specified
+        return componentKind.equals(Kind.PRODUCTION_COMPONENT)
+            ? Optional.of(executorTypeElement)
+            : Optional.<TypeElement>absent();
       }
       return builderSpec.get().methodMap().containsKey(executorTypeElement)
           ? Optional.of(executorTypeElement)
