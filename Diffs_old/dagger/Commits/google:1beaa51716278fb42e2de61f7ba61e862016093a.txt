diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
index 1dba92670..4c713bc60 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -253,8 +253,8 @@ private boolean validateResolvedBinding(
           if (contributionBindings.size() <= 1) {
             return true;
           }
-          ImmutableListMultimap<ContributionType, ContributionBinding> contributionsByType =
-              ContributionBinding.contributionTypesFor(contributionBindings);
+          ImmutableListMultimap<ContributionType, ? extends ContributionBinding>
+              contributionsByType = ContributionBinding.contributionTypesFor(contributionBindings);
           if (contributionsByType.keySet().size() > 1) {
             reportMultipleBindingTypes(path);
             return false;
@@ -326,7 +326,7 @@ private boolean validateNullability(
     private boolean hasDuplicateMapKeys(
         Deque<ResolvedRequest> path, Set<? extends ContributionBinding> mapBindings) {
       boolean hasDuplicateMapKeys = false;
-      for (Collection<ContributionBinding> mapBindingsForMapKey :
+      for (Collection<? extends ContributionBinding> mapBindingsForMapKey :
           indexMapBindingsByMapKey(mapBindings).asMap().values()) {
         if (mapBindingsForMapKey.size() > 1) {
           hasDuplicateMapKeys = true;
@@ -342,7 +342,7 @@ private boolean hasDuplicateMapKeys(
      */
     private boolean hasInconsistentMapKeyAnnotationTypes(
         Deque<ResolvedRequest> path, Set<? extends ContributionBinding> contributionBindings) {
-      ImmutableSetMultimap<Equivalence.Wrapper<DeclaredType>, ContributionBinding>
+      ImmutableSetMultimap<Equivalence.Wrapper<DeclaredType>, ? extends ContributionBinding>
           mapBindingsByAnnotationType = indexMapBindingsByAnnotationType(contributionBindings);
       if (mapBindingsByAnnotationType.keySet().size() > 1) {
         reportInconsistentMapKeyAnnotations(path, mapBindingsByAnnotationType);
@@ -799,7 +799,7 @@ private void reportMultipleBindingTypes(Deque<ResolvedRequest> path) {
       StringBuilder builder = new StringBuilder();
       new Formatter(builder)
           .format(ErrorMessages.MULTIPLE_BINDING_TYPES_FOR_KEY_FORMAT, formatRootRequestKey(path));
-      ImmutableListMultimap<ContributionType, ContributionBinding> bindingsByType =
+      ImmutableListMultimap<ContributionType, ? extends ContributionBinding> bindingsByType =
           ContributionBinding.contributionTypesFor(resolvedBinding.contributionBindings());
       for (ContributionType type :
           Ordering.natural().immutableSortedCopy(bindingsByType.keySet())) {
@@ -827,14 +827,16 @@ private void reportDuplicateMapKeys(
 
     private void reportInconsistentMapKeyAnnotations(
         Deque<ResolvedRequest> path,
-        Multimap<Equivalence.Wrapper<DeclaredType>, ContributionBinding>
+        Multimap<Equivalence.Wrapper<DeclaredType>, ? extends ContributionBinding>
             mapBindingsByAnnotationType) {
       StringBuilder builder =
           new StringBuilder(inconsistentMapKeyAnnotationsError(formatRootRequestKey(path)));
-      for (Map.Entry<Equivalence.Wrapper<DeclaredType>, Collection<ContributionBinding>> entry :
-          mapBindingsByAnnotationType.asMap().entrySet()) {
+      for (Map.Entry<
+              Equivalence.Wrapper<DeclaredType>,
+              ? extends Collection<? extends ContributionBinding>>
+          entry : mapBindingsByAnnotationType.asMap().entrySet()) {
         DeclaredType annotationType = entry.getKey().get();
-        Collection<ContributionBinding> bindings = entry.getValue();
+        Collection<? extends ContributionBinding> bindings = entry.getValue();
 
         builder
             .append('\n')
@@ -1112,4 +1114,3 @@ static ResolvedRequest create(DependencyRequest request, BindingGraph graph) {
         }
       };
 }
-
diff --git a/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java b/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java
index 379b65cdb..01913e431 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java
@@ -237,7 +237,7 @@ static ContributionType contributionTypeFor(Iterable<? extends ContributionBindi
    * {@link AnnotationValue#getValue()} on a single member or the whole {@link AnnotationMirror}
    * itself, depending on {@link MapKey#unwrapValue()}).
    */
-  static ImmutableSetMultimap<Object, ContributionBinding> indexMapBindingsByMapKey(
+  static ImmutableSetMultimap<Object, ? extends ContributionBinding> indexMapBindingsByMapKey(
       Set<? extends ContributionBinding> mapBindings) {
     return ImmutableSetMultimap.copyOf(
         Multimaps.index(
@@ -255,7 +255,7 @@ public Object apply(ContributionBinding mapBinding) {
   /**
    * Indexes map-multibindings by map key annotation type.
    */
-  static ImmutableSetMultimap<Wrapper<DeclaredType>, ContributionBinding>
+  static ImmutableSetMultimap<Wrapper<DeclaredType>, ? extends ContributionBinding>
       indexMapBindingsByAnnotationType(Set<? extends ContributionBinding> mapBindings) {
     return ImmutableSetMultimap.copyOf(
         Multimaps.index(
diff --git a/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java b/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java
index bd57fada4..111089066 100644
--- a/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java
+++ b/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java
@@ -188,7 +188,7 @@ public ProducerMonitor producerMonitorFor(ProducerToken token) {
     }
 
     static final class Factory implements ProductionComponentMonitor.Factory {
-      private final ImmutableList<ProductionComponentMonitor.Factory> delegates;
+      private final ImmutableList<? extends ProductionComponentMonitor.Factory> delegates;
 
       Factory(Iterable<? extends ProductionComponentMonitor.Factory> delegates) {
         this.delegates = ImmutableList.copyOf(delegates);
