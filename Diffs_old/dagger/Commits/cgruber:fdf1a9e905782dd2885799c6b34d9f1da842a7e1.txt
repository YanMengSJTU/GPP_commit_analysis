diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index b5212f6bf..bb75e14bd 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -60,8 +60,7 @@
   ClassName nameGeneratedType(BindingGraph input) {
     ClassName componentDefinitionClassName =
         ClassName.fromTypeElement(input.componentDescriptor().componentDefinitionType());
-    String componentName =
-        "Dagger" + componentDefinitionClassName.classFileName().replace('$', '_');
+    String componentName = "Dagger" + componentDefinitionClassName.classFileName('_');
     return componentDefinitionClassName.topLevelClassName().peerNamed(componentName);
   }
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/ClassName.java b/compiler/src/main/java/dagger/internal/codegen/writer/ClassName.java
index 0b2615e9a..5b7776853 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/ClassName.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/ClassName.java
@@ -95,11 +95,23 @@ public String canonicalName() {
     return fullyQualifiedName;
   }
 
+  /**
+   * Equivalent to {@link #classFileName(char) classFileName('$')}
+   */
   public String classFileName() {
+    return classFileName('$');
+  }
+
+  /**
+   * Returns the class name (excluding package).
+   *
+   * <p>The returned value includes the names of its enclosing classes (if any) but not the package
+   * name. e.g. {@code fromClass(Map.Entry.class).classFileName('_')} will return {@code Map_Entry}.
+   */
+  public String classFileName(char separator) {
     StringBuilder builder = new StringBuilder();
-    Joiner.on('$').appendTo(builder, enclosingSimpleNames());
-    if (!enclosingSimpleNames().isEmpty()) {
-      builder.append('$');
+    for (String enclosingSimpleName : enclosingSimpleNames) {
+      builder.append(enclosingSimpleName).append(separator);
     }
     return builder.append(simpleName()).toString();
   }
diff --git a/compiler/src/test/java/dagger/internal/codegen/writer/ClassNameTest.java b/compiler/src/test/java/dagger/internal/codegen/writer/ClassNameTest.java
index acf895e74..eff01b849 100644
--- a/compiler/src/test/java/dagger/internal/codegen/writer/ClassNameTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/writer/ClassNameTest.java
@@ -120,4 +120,9 @@
     assertThat(className.canonicalName()).isEqualTo(
         "dagger.internal.codegen.writer.ClassNameTest.OuterClass.InnerClass");
   }
+
+  @Test public void fromClass_classFileName() {
+    ClassName className = ClassName.fromClass(InnerClass.class);
+    assertThat(className.classFileName('_')).isEqualTo("ClassNameTest_OuterClass_InnerClass");
+  }
 }
