diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index a9d7ef0b4..a06c0b1ac 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -98,6 +98,7 @@ java_library(
         "MoreAnnotationValues.java",
         "MultibindingAnnotations.java",
         "OptionalType.java",
+        "ProcessingOptions.java",
         "RequestKinds.java",
         "Scopes.java",
         "SetType.java",
@@ -182,6 +183,7 @@ java_library(
     srcs = [
         "AnyBindingMethodValidator.java",
         "BindingGraphPlugins.java",
+        "BindingGraphValidator.java",
         "BindingMethodProcessingStep.java",
         "BindingMethodValidator.java",
         "BindsInstanceProcessingStep.java",
@@ -202,6 +204,7 @@ java_library(
         "MultibindsMethodValidator.java",
         "ProducesMethodValidator.java",
         "ProvidesMethodValidator.java",
+        "Validation.java",
         "ValidationReport.java",
     ],
     plugins = CODEGEN_PLUGINS,
@@ -348,12 +351,10 @@ java_library(
         "MapKeyProcessingStep.java",
         "ModuleProcessingStep.java",
         "ProcessingEnvironmentModule.java",
-        "ProcessingOptions.java",
         "SourceFileGeneratorsModule.java",
         "SpiModule.java",
         "SystemComponentsModule.java",
         "TopLevelImplementationComponent.java",
-        "Validation.java",
     ],
     plugins = CODEGEN_PLUGINS,
     resource_jars = [":processor_manifest_files.jar"],
diff --git a/java/dagger/internal/codegen/BindingGraphPlugins.java b/java/dagger/internal/codegen/BindingGraphPlugins.java
index d565afbf4..ae4ef961d 100644
--- a/java/dagger/internal/codegen/BindingGraphPlugins.java
+++ b/java/dagger/internal/codegen/BindingGraphPlugins.java
@@ -16,69 +16,49 @@
 
 package dagger.internal.codegen;
 
-import static com.google.common.base.Preconditions.checkNotNull;
 import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.ElementType.PARAMETER;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-import static javax.tools.Diagnostic.Kind.ERROR;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Maps;
-import dagger.internal.codegen.DiagnosticReporterFactory.DiagnosticReporterImpl;
-import dagger.model.BindingGraph;
+import com.google.common.collect.Sets;
 import dagger.spi.BindingGraphPlugin;
-import dagger.spi.DiagnosticReporter;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.processing.Filer;
-import javax.inject.Qualifier;
-import javax.inject.Singleton;
-import javax.tools.Diagnostic;
+import javax.inject.Inject;
 
-/** The set of SPI and validation plugins. */
-@Singleton
+/** Initializes {@link BindingGraphPlugin}s. */
 final class BindingGraphPlugins {
-
-  @Qualifier
-  @Retention(RUNTIME)
-  @Target({FIELD, PARAMETER, METHOD})
-  @interface TestingPlugins {}
-
   private final ImmutableSet<BindingGraphPlugin> plugins;
   private final Filer filer;
   private final DaggerTypes types;
   private final DaggerElements elements;
   private final Map<String, String> processingOptions;
-  private final DiagnosticReporterFactory diagnosticReporterFactory;
 
+  @Inject
   BindingGraphPlugins(
-      Iterable<BindingGraphPlugin> plugins,
+      @Validation Set<BindingGraphPlugin> validationPlugins,
+      ImmutableSet<BindingGraphPlugin> externalPlugins,
       Filer filer,
       DaggerTypes types,
       DaggerElements elements,
-      Map<String, String> processingOptions,
-      DiagnosticReporterFactory diagnosticReporterFactory) {
-    this.plugins = ImmutableSet.copyOf(plugins);
-    this.filer = checkNotNull(filer);
-    this.types = checkNotNull(types);
-    this.elements = checkNotNull(elements);
-    this.processingOptions = checkNotNull(processingOptions);
-    this.diagnosticReporterFactory = checkNotNull(diagnosticReporterFactory);
+      @ProcessingOptions Map<String, String> processingOptions) {
+    this.plugins = Sets.union(validationPlugins, externalPlugins).immutableCopy();
+    this.filer = filer;
+    this.types = types;
+    this.elements = elements;
+    this.processingOptions = processingOptions;
   }
 
   /** Returns {@link BindingGraphPlugin#supportedOptions()} from all the plugins. */
   ImmutableSet<String> allSupportedOptions() {
-    return plugins
-        .stream()
+    return plugins.stream()
         .flatMap(plugin -> plugin.supportedOptions().stream())
         .collect(toImmutableSet());
   }
 
   /** Initializes the plugins. */
+  // TODO(ronshapiro): Should we validate the uniqueness of plugin names?
   void initializePlugins() {
     plugins.forEach(this::initializePlugin);
   }
@@ -92,26 +72,4 @@ private void initializePlugin(BindingGraphPlugin plugin) {
       plugin.initOptions(Maps.filterKeys(processingOptions, supportedOptions::contains));
     }
   }
-
-  /**
-   * Calls {@link BindingGraphPlugin#visitGraph(BindingGraph, DiagnosticReporter)} on each of the
-   * SPI plugins
-   *
-   * @return the kinds of diagnostics that were reported
-   */
-  // TODO(ronshapiro): Should we validate the uniqueness of plugin names?
-  ImmutableSet<Diagnostic.Kind> visitGraph(BindingGraph graph) {
-    ImmutableSet.Builder<Diagnostic.Kind> diagnosticKinds = ImmutableSet.builder();
-    for (BindingGraphPlugin plugin : plugins) {
-      DiagnosticReporterImpl reporter = diagnosticReporterFactory.reporter(graph, plugin);
-      plugin.visitGraph(graph, reporter);
-      diagnosticKinds.addAll(reporter.reportedDiagnosticKinds());
-    }
-    return diagnosticKinds.build();
-  }
-
-  /** Returns {@code true} if any errors are reported by any of the plugins for {@code graph}. */
-  boolean pluginsReportErrors(BindingGraph graph) {
-    return visitGraph(graph).contains(ERROR);
-  }
 }
diff --git a/java/dagger/internal/codegen/BindingGraphValidationModule.java b/java/dagger/internal/codegen/BindingGraphValidationModule.java
index 06721e0d7..7bfe7af53 100644
--- a/java/dagger/internal/codegen/BindingGraphValidationModule.java
+++ b/java/dagger/internal/codegen/BindingGraphValidationModule.java
@@ -16,14 +16,13 @@
 
 package dagger.internal.codegen;
 
+import com.google.common.collect.ImmutableSet;
 import dagger.Binds;
 import dagger.Module;
 import dagger.Provides;
 import dagger.multibindings.IntoSet;
 import dagger.spi.BindingGraphPlugin;
-import java.util.Map;
 import java.util.Set;
-import javax.annotation.processing.Filer;
 import javax.inject.Singleton;
 
 /** Binds the set of {@link BindingGraphPlugin}s used to implement Dagger validation. */
@@ -83,37 +82,20 @@ BindingGraphPlugin provisionDependencyOnProducerBinding(
 
   @Provides
   @Singleton
-  @Validation
-  static BindingGraphPlugins validationPlugins(
+  @ModuleValidation
+  static BindingGraphValidator moduleBindingGraphValidator(
       @Validation Set<BindingGraphPlugin> validationPlugins,
-      Filer filer,
-      DaggerTypes types,
-      DaggerElements elements,
-      @ProcessingOptions Map<String, String> processingOptions,
-      DiagnosticReporterFactory diagnosticReporterFactory) {
-    return new BindingGraphPlugins(
-        validationPlugins, filer, types, elements, processingOptions, diagnosticReporterFactory);
+      ImmutableSet<BindingGraphPlugin> externalPlugins,
+      @ModuleValidation DiagnosticReporterFactory diagnosticReporterFactory) {
+    return new BindingGraphValidator(validationPlugins, externalPlugins, diagnosticReporterFactory);
   }
 
   @Provides
-  @Singleton
   @ModuleValidation
-  static BindingGraphPlugins moduleValidationPlugins(
-      @Validation Set<BindingGraphPlugin> validationPlugins,
-      Filer filer,
-      DaggerTypes types,
-      DaggerElements elements,
-      @ProcessingOptions Map<String, String> processingOptions,
-      DiagnosticReporterFactory diagnosticReporterFactory,
-      CompilerOptions compilerOptions) {
-    return new BindingGraphPlugins(
-        validationPlugins,
-        filer,
-        types,
-        elements,
-        processingOptions,
-        diagnosticReporterFactory
-            .treatingErrorsAs(compilerOptions.moduleBindingValidationType())
-            .withoutPrintingEntryPoints());
+  static DiagnosticReporterFactory moduleValidationDiagnosticReporterFactory(
+      DiagnosticReporterFactory diagnosticReporterFactory, CompilerOptions compilerOptions) {
+    return diagnosticReporterFactory
+        .treatingErrorsAs(compilerOptions.moduleBindingValidationType())
+        .withoutPrintingEntryPoints();
   }
 }
diff --git a/java/dagger/internal/codegen/BindingGraphValidator.java b/java/dagger/internal/codegen/BindingGraphValidator.java
new file mode 100644
index 000000000..df17b15b5
--- /dev/null
+++ b/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+import static javax.tools.Diagnostic.Kind.ERROR;
+
+import com.google.common.collect.ImmutableSet;
+import dagger.internal.codegen.DiagnosticReporterFactory.DiagnosticReporterImpl;
+import dagger.model.BindingGraph;
+import dagger.spi.BindingGraphPlugin;
+import java.util.Set;
+import javax.inject.Inject;
+import javax.inject.Singleton;
+
+/** Validates a {@link BindingGraph}. */
+@Singleton
+final class BindingGraphValidator {
+  private final ImmutableSet<BindingGraphPlugin> validationPlugins;
+  private final ImmutableSet<BindingGraphPlugin> externalPlugins;
+  private final DiagnosticReporterFactory diagnosticReporterFactory;
+
+  @Inject
+  BindingGraphValidator(
+      @Validation Set<BindingGraphPlugin> validationPlugins,
+      ImmutableSet<BindingGraphPlugin> externalPlugins,
+      DiagnosticReporterFactory diagnosticReporterFactory) {
+    this.validationPlugins = ImmutableSet.copyOf(validationPlugins);
+    this.externalPlugins = ImmutableSet.copyOf(externalPlugins);
+    this.diagnosticReporterFactory = checkNotNull(diagnosticReporterFactory);
+  }
+
+  /** Returns {@code true} if no errors are reported for {@code graph}. */
+  boolean isValid(BindingGraph graph) {
+    return isValid(validationPlugins, graph) && isValid(externalPlugins, graph);
+  }
+
+  private boolean isValid(ImmutableSet<BindingGraphPlugin> plugins, BindingGraph graph) {
+    boolean isValid = true;
+    for (BindingGraphPlugin plugin : plugins) {
+      DiagnosticReporterImpl reporter = diagnosticReporterFactory.reporter(graph, plugin);
+      plugin.visitGraph(graph, reporter);
+      if (reporter.reportedDiagnosticKinds().contains(ERROR)) {
+        isValid = false;
+      }
+    }
+    return isValid;
+  }
+}
diff --git a/java/dagger/internal/codegen/ComponentProcessingStep.java b/java/dagger/internal/codegen/ComponentProcessingStep.java
index 0f1cfaac3..ad25a6166 100644
--- a/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -53,8 +53,7 @@
   private final BindingGraphFactory bindingGraphFactory;
   private final SourceFileGenerator<BindingGraph> componentGenerator;
   private final BindingGraphConverter bindingGraphConverter;
-  private final BindingGraphPlugins validationPlugins;
-  private final BindingGraphPlugins spiPlugins;
+  private final BindingGraphValidator bindingGraphValidator;
   private final CompilerOptions compilerOptions;
   private ImmutableSet<Element> subcomponentElements;
   private ImmutableSet<Element> subcomponentBuilderElements;
@@ -72,8 +71,7 @@
       BindingGraphFactory bindingGraphFactory,
       SourceFileGenerator<BindingGraph> componentGenerator,
       BindingGraphConverter bindingGraphConverter,
-      @Validation BindingGraphPlugins validationPlugins,
-      BindingGraphPlugins spiPlugins,
+      BindingGraphValidator bindingGraphValidator,
       CompilerOptions compilerOptions) {
     super(MoreElements::asType);
     this.messager = messager;
@@ -84,8 +82,7 @@
     this.bindingGraphFactory = bindingGraphFactory;
     this.componentGenerator = componentGenerator;
     this.bindingGraphConverter = bindingGraphConverter;
-    this.validationPlugins = validationPlugins;
-    this.spiPlugins = spiPlugins;
+    this.bindingGraphValidator = bindingGraphValidator;
     this.compilerOptions = compilerOptions;
   }
 
@@ -154,8 +151,7 @@ protected void process(
 
   private boolean isValid(BindingGraph bindingGraph) {
     dagger.model.BindingGraph modelGraph = bindingGraphConverter.convert(bindingGraph);
-    return !validationPlugins.pluginsReportErrors(modelGraph)
-        && !spiPlugins.pluginsReportErrors(modelGraph);
+    return bindingGraphValidator.isValid(modelGraph);
   }
 
   private void generateComponent(BindingGraph bindingGraph) {
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index 28be5ff39..1f8b2ba93 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -27,7 +27,7 @@
 import dagger.Component;
 import dagger.Module;
 import dagger.Provides;
-import dagger.internal.codegen.BindingGraphPlugins.TestingPlugins;
+import dagger.internal.codegen.SpiModule.TestingPlugins;
 import dagger.spi.BindingGraphPlugin;
 import java.util.Arrays;
 import java.util.Optional;
@@ -52,9 +52,8 @@
   @Inject SourceFileGenerator<ProvisionBinding> factoryGenerator;
   @Inject SourceFileGenerator<MembersInjectionBinding> membersInjectorGenerator;
   @Inject ImmutableList<ProcessingStep> processingSteps;
-  @Inject BindingGraphPlugins spiPlugins;
+  @Inject BindingGraphPlugins bindingGraphPlugins;
   @Inject CompilerOptions compilerOptions;
-  @Inject @Validation BindingGraphPlugins validationPlugins;
   @Inject DaggerStatistics daggerStatistics;
 
   public ComponentProcessor() {
@@ -92,8 +91,7 @@ public SourceVersion getSupportedSourceVersion() {
   public Set<String> getSupportedOptions() {
     ImmutableSet.Builder<String> options = ImmutableSet.builder();
     options.addAll(CompilerOptions.SUPPORTED_OPTIONS);
-    options.addAll(spiPlugins.allSupportedOptions());
-    options.addAll(validationPlugins.allSupportedOptions());
+    options.addAll(bindingGraphPlugins.allSupportedOptions());
     if (compilerOptions.useGradleIncrementalProcessing()) {
       options.add("org.gradle.annotation.processing.isolating");
     }
@@ -109,8 +107,7 @@ public SourceVersion getSupportedSourceVersion() {
         .inject(this);
 
     daggerStatistics.processingStarted();
-    spiPlugins.initializePlugins();
-    validationPlugins.initializePlugins();
+    bindingGraphPlugins.initializePlugins();
     return processingSteps;
   }
 
diff --git a/java/dagger/internal/codegen/ModuleValidator.java b/java/dagger/internal/codegen/ModuleValidator.java
index 2477627f9..b3ac78c41 100644
--- a/java/dagger/internal/codegen/ModuleValidator.java
+++ b/java/dagger/internal/codegen/ModuleValidator.java
@@ -114,8 +114,7 @@
   private final ComponentDescriptor.Factory componentDescriptorFactory;
   private final BindingGraphFactory bindingGraphFactory;
   private final BindingGraphConverter bindingGraphConverter;
-  private final BindingGraphPlugins moduleValidationPlugins;
-  private final BindingGraphPlugins spiPlugins;
+  private final BindingGraphValidator bindingGraphValidator;
   private final CompilerOptions compilerOptions;
   private final Map<TypeElement, ValidationReport<TypeElement>> cache = new HashMap<>();
   private final Set<TypeElement> knownModules = new HashSet<>();
@@ -129,8 +128,7 @@
       ComponentDescriptor.Factory componentDescriptorFactory,
       BindingGraphFactory bindingGraphFactory,
       BindingGraphConverter bindingGraphConverter,
-      @ModuleValidation BindingGraphPlugins moduleValidationPlugins,
-      BindingGraphPlugins spiPlugins,
+      @ModuleValidation BindingGraphValidator bindingGraphValidator,
       CompilerOptions compilerOptions) {
     this.types = types;
     this.elements = elements;
@@ -139,8 +137,7 @@
     this.componentDescriptorFactory = componentDescriptorFactory;
     this.bindingGraphFactory = bindingGraphFactory;
     this.bindingGraphConverter = bindingGraphConverter;
-    this.moduleValidationPlugins = moduleValidationPlugins;
-    this.spiPlugins = spiPlugins;
+    this.bindingGraphValidator = bindingGraphValidator;
     this.compilerOptions = compilerOptions;
   }
 
@@ -594,9 +591,8 @@ private void validateModuleBindings(
     BindingGraph bindingGraph =
         bindingGraphConverter.convert(
             bindingGraphFactory.create(componentDescriptorFactory.forTypeElement(module)));
-    if (moduleValidationPlugins.pluginsReportErrors(bindingGraph)
-        || spiPlugins.pluginsReportErrors(bindingGraph)) {
-      // Since the plugins use a DiagnosticReporter to report errors, the ValdiationReport won't
+    if (!bindingGraphValidator.isValid(bindingGraph)) {
+      // Since the validator uses a DiagnosticReporter to report errors, the ValdiationReport won't
       // have any Items for them. We have to tell the ValidationReport that some errors were
       // reported for the subject.
       report.markDirty();
diff --git a/java/dagger/internal/codegen/SpiModule.java b/java/dagger/internal/codegen/SpiModule.java
index f36f508c9..a8f13e1a1 100644
--- a/java/dagger/internal/codegen/SpiModule.java
+++ b/java/dagger/internal/codegen/SpiModule.java
@@ -16,42 +16,40 @@
 
 package dagger.internal.codegen;
 
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
 import com.google.common.collect.ImmutableSet;
 import dagger.Module;
 import dagger.Provides;
-import dagger.internal.codegen.BindingGraphPlugins.TestingPlugins;
 import dagger.spi.BindingGraphPlugin;
-import java.util.Map;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 import java.util.Optional;
 import java.util.ServiceLoader;
-import javax.annotation.processing.Filer;
+import javax.inject.Qualifier;
 import javax.inject.Singleton;
 
-/** Contains the bindings for {@link BindingGraphPlugins} from external SPI providers. */
+/** Contains the bindings for {@link BindingGraphValidator} from external SPI providers. */
 @Module
 abstract class SpiModule {
   private SpiModule() {}
 
   @Provides
   @Singleton
-  static BindingGraphPlugins spiPlugins(
-      @TestingPlugins Optional<ImmutableSet<BindingGraphPlugin>> testingPlugins,
-      Filer filer,
-      DaggerTypes types,
-      DaggerElements elements,
-      @ProcessingOptions Map<String, String> processingOptions,
-      DiagnosticReporterFactory diagnosticReporterFactory) {
-    return new BindingGraphPlugins(
-        testingPlugins.orElseGet(SpiModule::loadPlugins),
-        filer,
-        types,
-        elements,
-        processingOptions,
-        diagnosticReporterFactory);
+  static ImmutableSet<BindingGraphPlugin> externalPlugins(
+      @TestingPlugins Optional<ImmutableSet<BindingGraphPlugin>> testingPlugins) {
+    return testingPlugins.orElseGet(
+        () ->
+            ImmutableSet.copyOf(
+                ServiceLoader.load(
+                    BindingGraphPlugin.class, BindingGraphValidator.class.getClassLoader())));
   }
 
-  private static ImmutableSet<BindingGraphPlugin> loadPlugins() {
-    return ImmutableSet.copyOf(
-        ServiceLoader.load(BindingGraphPlugin.class, BindingGraphPlugins.class.getClassLoader()));
-  }
+  @Qualifier
+  @Retention(RUNTIME)
+  @Target({FIELD, PARAMETER, METHOD})
+  @interface TestingPlugins {}
 }
