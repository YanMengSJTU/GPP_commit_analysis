diff --git a/java/dagger/internal/codegen/ComponentImplementation.java b/java/dagger/internal/codegen/ComponentImplementation.java
index 2eb46bc13..5bd94c736 100644
--- a/java/dagger/internal/codegen/ComponentImplementation.java
+++ b/java/dagger/internal/codegen/ComponentImplementation.java
@@ -38,7 +38,6 @@
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.FieldSpec;
 import com.squareup.javapoet.MethodSpec;
-import com.squareup.javapoet.ParameterSpec;
 import com.squareup.javapoet.TypeSpec;
 import dagger.internal.codegen.ModifiableBindingMethods.ModifiableBindingMethod;
 import dagger.model.DependencyRequest;
@@ -166,7 +165,6 @@
   // implicit
   private final SetMultimap<BindingRequest, DependencyRequest> multibindingContributionsMade =
       HashMultimap.create();
-  private ImmutableList<ParameterSpec> constructorParameters;
   private Optional<MethodSpec> configureInitializationMethod = Optional.empty();
 
   ComponentImplementation(
@@ -243,11 +241,6 @@ boolean isAbstract() {
     return superclassImplementation;
   }
 
-  /** Returns the constructor parameters. */
-  ImmutableList<ParameterSpec> constructorParameters() {
-    return constructorParameters;
-  }
-
   /**
    * Returns the {@link #configureInitializationMethod()} of the nearest supertype that defines one,
    * if any.
@@ -422,11 +415,6 @@ void addCancellableProducerKey(Key key) {
     cancellableProducerKeys.add(key);
   }
 
-  /** Records the constructor parameters for an instance of this component. */
-  void setConstructorParameters(ImmutableList<ParameterSpec> parameters) {
-    constructorParameters = parameters;
-  }
-
   /** Returns a new, unique field name for the component based on the given name. */
   String getUniqueFieldName(String name) {
     return componentFieldNames.getUniqueName(name);
diff --git a/java/dagger/internal/codegen/ComponentImplementationFactory.java b/java/dagger/internal/codegen/ComponentImplementationFactory.java
index 01d81cf1b..569d90306 100644
--- a/java/dagger/internal/codegen/ComponentImplementationFactory.java
+++ b/java/dagger/internal/codegen/ComponentImplementationFactory.java
@@ -430,17 +430,11 @@ final void addConstructor() {
       ImmutableList<ParameterSpec> constructorParameters = constructorParameters();
       MethodSpec.Builder constructor =
           constructorBuilder()
-              .addModifiers(componentImplementation.isAbstract() ? PROTECTED : PRIVATE)
-              .addParameters(constructorParameters);
-      componentImplementation.setConstructorParameters(constructorParameters);
-      componentImplementation
-          .superclassImplementation()
-          .ifPresent(
-              superclassImplementation ->
-                  constructor.addStatement(
-                      CodeBlock.of(
-                          "super($L)",
-                          parameterNames(superclassImplementation.constructorParameters()))));
+              .addModifiers(componentImplementation.isAbstract() ? PROTECTED : PRIVATE);
+
+      if (!componentImplementation.isAbstract()) {
+        constructor.addParameters(constructorParameters);
+      }
 
       Optional<MethodSpec.Builder> configureInitialization =
           partitions.isEmpty() || !componentImplementation.isAbstract()
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 00704b04e..606873a7e 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -101,7 +101,7 @@ public void missingBindings_fromComponentMethod() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    public final MissingInLeaf missingFromComponentMethod() {",
@@ -248,7 +248,7 @@ public void missingBindings_dependsOnMissingBinding() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    protected final Object getMissingInLeaf() {",
@@ -333,10 +333,10 @@ public void missingBindings_satisfiedInGreatAncestor() {
             "  protected DaggerGreatAncestor() {}",
             "",
             "  protected abstract class AncestorImpl extends DaggerAncestor {",
-            "    protected AncestorImpl() { super(); }",
+            "    protected AncestorImpl() {}",
             "",
             "    protected abstract class LeafImpl extends DaggerAncestor.LeafImpl {",
-            "      protected LeafImpl() { super(); }",
+            "      protected LeafImpl() {}",
             "",
             "      @Override",
             "      protected final Object getMissingInLeaf() {",
@@ -431,9 +431,7 @@ public void moduleInstanceDependency() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() {",
-            "      super();",
-            "    }",
+            "    protected LeafImpl() {}",
             "  }",
             "}");
     compilation = compile(filesToCompile.build());
@@ -485,9 +483,7 @@ public void moduleInstanceDependency() {
             "  }",
             "",
             "  protected final class AncestorImpl extends DaggerAncestor {",
-            "    private AncestorImpl() {",
-            "      super();",
-            "    }",
+            "    private AncestorImpl() {}",
             "",
             "    @Override",
             "    public Leaf leaf() {",
@@ -498,7 +494,6 @@ public void moduleInstanceDependency() {
             "      private TestModule testModule;",
             "",
             "      private LeafImpl() {",
-            "        super();",
             "        configureInitialization();",
             "        initialize();",
             "      }",
@@ -605,9 +600,7 @@ public void moduleInstanceDependency_withModuleParams() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() {",
-            "      super();",
-            "    }",
+            "    protected LeafImpl() {}",
             "  }",
             "}");
     compilation = compile(filesToCompile.build());
@@ -661,9 +654,7 @@ public void moduleInstanceDependency_withModuleParams() {
             "  }",
             "",
             "  protected final class AncestorImpl extends DaggerAncestor {",
-            "    private AncestorImpl() {",
-            "      super();",
-            "    }",
+            "    private AncestorImpl() {}",
             "",
             "    @Override",
             "    public Leaf leaf(TestModule module) {",
@@ -674,7 +665,6 @@ public void moduleInstanceDependency_withModuleParams() {
             "      private TestModule testModule;",
             "",
             "      private LeafImpl(TestModule module) {",
-            "        super();",
             "        configureInitialization();",
             "        initialize(module);",
             "      }",
@@ -724,7 +714,7 @@ public void generatedInstanceBinding() {
             "",
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
-            "  protected DaggerLeaf(Builder builder) {}",
+            "  protected DaggerLeaf() {}",
             "",
             "  public abstract static class Builder implements Leaf.Builder {}",
             "}");
@@ -758,9 +748,7 @@ public void generatedInstanceBinding() {
             "  protected abstract class LeafBuilder extends DaggerLeaf.Builder {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl(LeafBuilder builder) {",
-            "      super(builder);",
-            "    }",
+            "    protected LeafImpl() {}",
             "  }",
             "}");
     compilation = compile(filesToCompile.build());
@@ -812,9 +800,7 @@ public void generatedInstanceBinding() {
             "  }",
             "",
             "  protected final class AncestorImpl extends DaggerAncestor {",
-            "    private AncestorImpl() {",
-            "      super();",
-            "    }",
+            "    private AncestorImpl() {}",
             "",
             "    @Override",
             "    public Leaf.Builder leaf() {",
@@ -829,9 +815,7 @@ public void generatedInstanceBinding() {
             "    }",
             "",
             "    protected final class LeafImpl extends DaggerAncestor.LeafImpl {",
-            "      private LeafImpl(LeafBuilder builder) {",
-            "        super(builder);",
-            "      }",
+            "      private LeafImpl(LeafBuilder builder) {}",
             "    }",
             "  }",
             "}");
@@ -996,7 +980,7 @@ public void optionalBindings_satisfiedInAncestor() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    public final Optional<SatisfiedInAncestor> satisfiedInAncestor() {",
@@ -1087,7 +1071,7 @@ public void optionalBindings_satisfiedInGrandAncestor() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "  }",
             "}");
     compilation = compile(filesToCompile.build());
@@ -1134,10 +1118,10 @@ public void optionalBindings_satisfiedInGrandAncestor() {
             "  protected DaggerGreatAncestor() {}",
             "",
             "  protected abstract class AncestorImpl extends DaggerAncestor {",
-            "    protected AncestorImpl() { super(); }",
+            "    protected AncestorImpl() {}",
             "",
             "    protected abstract class LeafImpl extends DaggerAncestor.LeafImpl {",
-            "      protected LeafImpl() { super(); }",
+            "      protected LeafImpl() {}",
             "",
             "      @Override",
             "      public final Optional<SatisfiedInGrandAncestor> satisfiedInGrandAncestor() {",
@@ -1259,7 +1243,7 @@ public void optionalBindings_nonComponentMethodDependencySatisfiedInAncestor() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    protected final Optional<SatisfiedInAncestor>",
@@ -1345,7 +1329,7 @@ public void optionalBindings_boundInAncestorAndSatisfiedInGrandAncestor() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    public Optional<SatisfiedInGrandAncestor>",
@@ -1397,10 +1381,10 @@ public void optionalBindings_boundInAncestorAndSatisfiedInGrandAncestor() {
             "  protected DaggerGrandAncestor() {}",
             "",
             "  protected abstract class AncestorImpl extends DaggerAncestor {",
-            "    protected AncestorImpl() { super(); }",
+            "    protected AncestorImpl() {}",
             "",
             "    protected abstract class LeafImpl extends DaggerAncestor.LeafImpl {",
-            "      protected LeafImpl() { super(); }",
+            "      protected LeafImpl() {}",
             "",
             "      @Override",
             "      public final Optional<SatisfiedInGrandAncestor>",
@@ -1556,7 +1540,7 @@ public void setMultibindings_contributionsInAncestorOnly() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    public Set<InAncestor> contributionsInAncestor() {",
@@ -1680,7 +1664,7 @@ public void setMultibindings_contributionsInLeafAndAncestor() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    public Set<InEachSubcomponent> contributionsInEachSubcomponent() {",
@@ -1786,7 +1770,7 @@ public void setMultibindings_contributionsInLeafAndGrandAncestor() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "  }",
             "}");
     compilation = compile(filesToCompile.build());
@@ -1840,9 +1824,7 @@ public void setMultibindings_contributionsInLeafAndGrandAncestor() {
             "  protected DaggerGrandAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() {",
-            "      super();",
-            "    }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    public Set<InLeafAndGrandAncestor> contributionsInLeafAndGrandAncestor() {",
@@ -1973,7 +1955,7 @@ public void setMultibindings_nonComponentMethodDependency() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    protected Set<InAllSubcomponents> getSetOfInAllSubcomponents() {",
@@ -2083,7 +2065,7 @@ public void setMultibindings_newSubclass() {
             "  }",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    public final RequiresInAncestorSet missingWithSetDependency() {",
@@ -2207,9 +2189,7 @@ public void setMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    private Provider<Set<Multibound>> setOfMultiboundProvider;",
             "",
-            "    protected LeafImpl() { ",
-            "      super();",
-            "    }",
+            "    protected LeafImpl() {}",
             "",
             "    protected void configureInitialization() { ",
             "      initialize();",
@@ -2370,9 +2350,7 @@ public void setMultibindings_contributionsInLeafAndAncestor_frameworkInstances()
             "    private Provider<Set<InEachSubcomponent>> setOfInEachSubcomponentProvider = ",
             "        new DelegateFactory<>();",
             "",
-            "    protected LeafImpl() {",
-            "      super();",
-            "    }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    protected void configureInitialization() {",
@@ -2545,7 +2523,7 @@ public void mapMultibindings_contributionsInAncestorOnly() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    public Map<String, InAncestor> contributionsInAncestor() {",
@@ -2665,7 +2643,7 @@ public void mapMultibindings_contributionsInLeafAndAncestor() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    public Map<String, InEachSubcomponent> contributionsInEachSubcomponent() {",
@@ -2810,9 +2788,7 @@ public void mapMultibindings_contributionsInLeafAndAncestor_frameworkInstance()
             "    private Provider<Map<String, InEachSubcomponent>> ",
             "      mapOfStringAndInEachSubcomponentProvider = new DelegateFactory<>();",
             "",
-            "    protected LeafImpl() { ",
-            "      super();",
-            "    }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    protected void configureInitialization() { ",
@@ -2930,7 +2906,7 @@ public void mapMultibindings_contributionsInLeafAndGrandAncestor() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "  }",
             "}");
     compilation = compile(filesToCompile.build());
@@ -2983,10 +2959,10 @@ public void mapMultibindings_contributionsInLeafAndGrandAncestor() {
             "  protected DaggerGrandAncestor() {}",
             "",
             "  protected abstract class AncestorImpl extends DaggerAncestor {",
-            "    protected AncestorImpl() { super(); }",
+            "    protected AncestorImpl() {}",
             "",
             "    protected abstract class LeafImpl extends DaggerAncestor.LeafImpl {",
-            "      protected LeafImpl() { super(); }",
+            "      protected LeafImpl() {}",
             "",
             "      @Override",
             "      public Map<String, InLeafAndGrandAncestor>",
@@ -3113,9 +3089,7 @@ public void mapMultibindings_contributionsInLeafAndAncestorWithoutGuava() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() {",
-            "      super();",
-            "    }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    public Map<String, InEachSubcomponent> contributionsInEachSubcomponent() {",
@@ -3245,9 +3219,7 @@ public void mapMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    private Provider<Map<Integer, Multibound>> mapOfIntegerAndMultiboundProvider;",
             "",
-            "    protected LeafImpl() { ",
-            "      super();",
-            "    }",
+            "    protected LeafImpl() {}",
             "",
             "    protected void configureInitialization() { ",
             "      initialize();",
@@ -3375,7 +3347,7 @@ public void emptyMultibinds_set() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    public Set<Multibound> set() {",
@@ -3492,9 +3464,7 @@ public void emptyMultibinds_set_frameworkInstance() {
             "    private Provider<Set<Multibound>> setOfMultiboundProvider =",
             "        new DelegateFactory<>();",
             "",
-            "    protected LeafImpl() {",
-            "      super();",
-            "    }",
+            "    protected LeafImpl() {}",
             "",
             "    protected void configureInitialization() {",
             "      initialize();",
@@ -3619,7 +3589,7 @@ public void emptyMultibinds_map() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    public Map<Integer, Multibound> map() {",
@@ -3738,9 +3708,7 @@ public void emptyMultibinds_map_frameworkInstance() {
             "    private Provider<Map<Integer, Multibound>> mapOfIntegerAndMultiboundProvider =",
             "        new DelegateFactory<>()",
             "",
-            "    protected LeafImpl() {",
-            "      super();",
-            "    }",
+            "    protected LeafImpl() {}",
             "",
             "    protected void configureInitialization() {",
             "      initialize();",
@@ -3854,7 +3822,7 @@ public void provisionOverInjection_providedInAncestor() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    public final ProvidedInAncestor injectedInLeaf() {",
@@ -3941,7 +3909,7 @@ public void provisionOverInjection_providedInGrandAncestor() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "  }",
             "}");
     compilation = compile(filesToCompile.build());
@@ -3987,10 +3955,10 @@ public void provisionOverInjection_providedInGrandAncestor() {
             "  protected DaggerGrandAncestor() {}",
             "",
             "  protected abstract class AncestorImpl extends DaggerAncestor {",
-            "    protected AncestorImpl() { super(); }",
+            "    protected AncestorImpl() {}",
             "",
             "    protected abstract class LeafImpl extends DaggerAncestor.LeafImpl {",
-            "      protected LeafImpl() { super(); }",
+            "      protected LeafImpl() {}",
             "",
             "      @Override",
             "      public final ProvidedInGrandAncestor injectedInLeaf() {",
@@ -4106,9 +4074,7 @@ public void provisionOverInjection_indirectDependency() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() {",
-            "      super();",
-            "    }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    protected final ProvidedInAncestor getProvidedInAncestor() {",
@@ -4242,9 +4208,7 @@ public void provisionOverInjection_prunedIndirectDependency() {
             "  }",
             "",
             "  protected final class LeafImpl extends DaggerLeaf {",
-            "    private LeafImpl() {",
-            "      super();",
-            "    }",
+            "    private LeafImpl() {}",
             "",
             "    @Override",
             "    protected Object getPrunedDependency() {",
@@ -4330,9 +4294,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "",
             "  private Producer<Set<Response>> setOfResponseProducer;",
             "",
-            // TODO(b/72748365): Do configureInitialization methods render constructor parameters
-            // for AOT superimplementations useless?
-            "  protected DaggerLeaf(Builder builder) {}",
+            "  protected DaggerLeaf() {}",
             "",
             "  protected void configureInitialization(Builder builder) {",
             "    initialize(builder);",
@@ -4550,7 +4512,6 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "    private Producer<Set<Response>> setOfResponseProducer = new DelegateProducer<>();",
             "",
             "    private LeafImpl(LeafBuilder builder) {",
-            "      super(builder);",
             "      configureInitialization(builder);",
             "      initialize(builder);",
             "    }",
@@ -4756,9 +4717,7 @@ public void producesMethodInstalledInLeafAndAncestor() {
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf ",
             "      implements CancellationListener {",
-            "    protected LeafImpl() {",
-            "      super();",
-            "    }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    protected final Producer<Object> getObjectProducer() {",
@@ -4866,7 +4825,7 @@ public void lazyOfModifiableBinding() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    protected LeafImpl() { super(); }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    protected abstract Provider<MissingInLeaf> missingInLeafProvider() {",
@@ -5033,9 +4992,7 @@ public void missingBindingAccessInLeafAndAncestor() {
             "        providedInAncestorProvider = ",
             "            new DelegateFactory<>();",
             "",
-            "    protected LeafImpl() {",
-            "      super();",
-            "    }",
+            "    protected LeafImpl() {}",
             "",
             "    @Override",
             "    protected void configureInitialization() {",
