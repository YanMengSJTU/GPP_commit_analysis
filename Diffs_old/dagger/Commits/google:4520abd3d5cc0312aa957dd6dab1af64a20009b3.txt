diff --git a/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java b/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
index 3d23f588d..568e67044 100644
--- a/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
+++ b/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
@@ -178,7 +178,8 @@ void setSupertype() {
     }
 
     FieldSpec toFieldSpec(ComponentRequirement requirement) {
-      Modifier modifier = componentImplementation.isAbstract() ? PUBLIC : PRIVATE;
+      // Fields in an abstract creator class need to be visible from subclasses.
+      Modifier modifier = componentImplementation.isAbstract() ? PROTECTED : PRIVATE;
       return FieldSpec.builder(
               TypeName.get(requirement.type()), requirementNames.get(requirement), modifier)
           .build();
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index b7e955120..7e7753987 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -5582,9 +5582,9 @@ public void subcomponentBuilders() {
             "  }",
             "",
             "  public abstract static class Builder implements Leaf.Builder {",
-            "    public LeafModule leafModule;",
-            "    public Integer bindsInstance;",
-            "    public String inducedInSubclass;",
+            "    protected LeafModule leafModule;",
+            "    protected Integer bindsInstance;",
+            "    protected String inducedInSubclass;",
             "",
             "    @Override",
             "    public Builder bindsInstance(int boundInstance) {",
@@ -5853,8 +5853,8 @@ public void subcomponentBuilders_moduleWithUnusedInstanceBindings() {
             "  }",
             "",
             "  public abstract static class Builder implements Leaf.Builder {",
-            "    public ModuleWithUsedBinding moduleWithUsedBinding;",
-            "    public ModuleWithUnusedBinding moduleWithUnusedBinding;",
+            "    protected ModuleWithUsedBinding moduleWithUsedBinding;",
+            "    protected ModuleWithUnusedBinding moduleWithUnusedBinding;",
             "  }",
             "}");
     Compilation compilation = compile(filesToCompile.build());
@@ -6000,7 +6000,7 @@ public void subcomponentBuilders_repeatedModule() {
             "  }",
             "",
             "  public abstract static class Builder implements Leaf.Builder {",
-            "    public RepeatedModule repeatedModule;",
+            "    protected RepeatedModule repeatedModule;",
             "",
             "    @Override",
             "    public Builder repeatedModule(RepeatedModule repeatedModule) {",
@@ -7345,11 +7345,11 @@ public void componentBuilderFields_consistencyAcrossImplementations() {
             GENERATED_ANNOTATION,
             "public abstract class DaggerHasUnusedModuleLeaf implements HasUnusedModuleLeaf {",
             "  public abstract static class Builder implements HasUnusedModuleLeaf.Builder {",
-            "    public Mod mod;",
+            "    protected Mod mod;",
             "",
-            "    public b.Mod mod2;",
+            "    protected b.Mod mod2;",
             "",
-            "    public c.Mod mod3;",
+            "    protected c.Mod mod3;",
             "  }",
             "}");
     Compilation compilation = compile(filesToCompile.build());
