diff --git a/compiler/src/it/functional-tests/src/main/java/test/BasicAbstractClassComponent.java b/compiler/src/it/functional-tests/src/main/java/test/BasicAbstractClassComponent.java
index 78f77dfb8..ad32e2a42 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/BasicAbstractClassComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/BasicAbstractClassComponent.java
@@ -21,7 +21,7 @@
  * This component tests behavior equivalent to {@link BasicComponent}, but as an abstract class
  * rather than an interface.
  */
-@Component(modules = PrimitivesModule.class)
+@Component(modules = {PrimitivesModule.class, NullableModule.class})
 abstract class BasicAbstractClassComponent implements BasicComponent {
   void throwAParty() {
     throw new RuntimeException("Paaarrrrrtaaaaaaaay!");
diff --git a/compiler/src/it/functional-tests/src/main/java/test/BasicComponent.java b/compiler/src/it/functional-tests/src/main/java/test/BasicComponent.java
index a04607dd4..b9b54d914 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/BasicComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/BasicComponent.java
@@ -19,8 +19,9 @@
 import dagger.Lazy;
 import dagger.MembersInjector;
 import javax.inject.Provider;
+import test.NullableModule.Nullable;
 
-@Component(modules = PrimitivesModule.class)
+@Component(modules = {PrimitivesModule.class, NullableModule.class})
 interface BasicComponent extends Injector<Thing> {
   byte getByte();
   char getChar();
@@ -74,6 +75,10 @@
   Provider<InjectedThing> injectedThingProvider();
   Lazy<InjectedThing> lazyInjectedThing();
   MembersInjector<InjectedThing> injectedThingMembersInjector();
+  
+  @Nullable Object nullObject();
+  Provider<Object> nullObjectProvider();
+  Lazy<Object> lazyNullObject();
 
   TypeWithInheritedMembersInjection typeWithInheritedMembersInjection();
   MembersInjector<TypeWithInheritedMembersInjection>
diff --git a/compiler/src/it/functional-tests/src/main/java/test/NullableModule.java b/compiler/src/it/functional-tests/src/main/java/test/NullableModule.java
new file mode 100644
index 000000000..326401d00
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/NullableModule.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2016 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test;
+
+import dagger.Module;
+import dagger.Provides;
+
+@Module
+final class NullableModule {
+  /**
+   * A {@code Nullable} that isn't {@link javax.annotation.Nullable}, to ensure that Dagger can be
+   * built without depending on JSR-305.
+   */
+  @interface Nullable {}
+
+  @Provides
+  @Nullable
+  static Object nullObject() {
+    return null;
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java b/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
index fe9c6afe9..4514457c1 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
@@ -113,4 +113,11 @@
   @Theory public void inheritedMembersInjection(BasicComponent basicComponent) {
     assertThat(basicComponent.typeWithInheritedMembersInjection().thing).isNotNull();
   }
+  
+  @Theory
+  public void nullableInjection(BasicComponent basicComponent) {
+    assertThat(basicComponent.nullObject()).isNull();
+    assertThat(basicComponent.nullObjectProvider().get()).isNull();
+    assertThat(basicComponent.lazyNullObject().get()).isNull();
+  }
 }
diff --git a/core/src/main/java/dagger/Lazy.java b/core/src/main/java/dagger/Lazy.java
index e04cc03e3..075c5f405 100644
--- a/core/src/main/java/dagger/Lazy.java
+++ b/core/src/main/java/dagger/Lazy.java
@@ -21,10 +21,6 @@
  * the first call to {@code get()} and remembers that same value for all
  * subsequent calls to {@code get()}.
  *
- * <p>{@code null} is not a supported value.  Implementations of {@code Lazy}
- * are expected to throw {@link NullPointerException} if the computed value is
- * {@code null}.
- *
  * <h2>Example</h2>
  * The differences between <strong>direct injection</strong>, <strong>provider
  * injection</strong> and <strong>lazy injection</strong> are best demonstrated
@@ -148,8 +144,6 @@
   /**
    * Return the underlying value, computing the value if necessary. All calls to
    * the same {@code Lazy} instance will return the same result.
-   *
-   * @throws NullPointerException if the computed value is {@code null}.
    */
   T get();
 }
