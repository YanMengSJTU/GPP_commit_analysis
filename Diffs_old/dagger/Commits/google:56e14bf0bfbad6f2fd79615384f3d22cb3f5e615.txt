diff --git a/java/dagger/internal/codegen/ComponentDescriptorFactory.java b/java/dagger/internal/codegen/ComponentDescriptorFactory.java
index 57c308646..9c50a025d 100644
--- a/java/dagger/internal/codegen/ComponentDescriptorFactory.java
+++ b/java/dagger/internal/codegen/ComponentDescriptorFactory.java
@@ -48,6 +48,7 @@
 import dagger.model.Scope;
 import java.util.List;
 import java.util.Optional;
+import java.util.function.Predicate;
 import javax.inject.Inject;
 import javax.inject.Provider;
 import javax.lang.model.element.AnnotationMirror;
@@ -64,39 +65,56 @@
   private final DaggerTypes types;
   private final DependencyRequestFactory dependencyRequestFactory;
   private final ModuleDescriptor.Factory moduleDescriptorFactory;
-  private final CompilerOptions compilerOptions;
 
   @Inject
   ComponentDescriptorFactory(
       DaggerElements elements,
       DaggerTypes types,
       DependencyRequestFactory dependencyRequestFactory,
-      ModuleDescriptor.Factory moduleDescriptorFactory,
-      CompilerOptions compilerOptions) {
+      ModuleDescriptor.Factory moduleDescriptorFactory) {
     this.elements = elements;
     this.types = types;
     this.dependencyRequestFactory = dependencyRequestFactory;
     this.moduleDescriptorFactory = moduleDescriptorFactory;
-    this.compilerOptions = compilerOptions;
+  }
+
+  /** Returns a descriptor for a root component type. */
+  ComponentDescriptor rootComponentDescriptor(TypeElement typeElement) {
+    return create(
+        typeElement,
+        checkComponentKind(
+            typeElement, ComponentKind::isRoot, "%s must have a component annotation"));
+  }
+
+  /** Returns a descriptor for a subcomponent type. */
+  ComponentDescriptor subcomponentDescriptor(TypeElement typeElement) {
+    return create(
+        typeElement,
+        checkComponentKind(
+            typeElement, kind -> !kind.isRoot(), "%s must have a subcomponent annotation"));
   }
 
   /**
-   * Returns a component descriptor for a type.
-   *
-   * <p>The type must be annotated with a top-level component annotation unless ahead-of-time
-   * subcomponents are being generated or we are creating a descriptor for a module in order to
-   * validate its bindings.
+   * Returns a descriptor for a fictional component based on a module type in order to validate its
+   * bindings.
    */
-  ComponentDescriptor forTypeElement(TypeElement typeElement) {
+  ComponentDescriptor moduleComponentDescriptor(TypeElement typeElement) {
+    return create(
+        typeElement,
+        checkComponentKind(
+            typeElement, ComponentKind::isForModuleValidation, "%s must have a module annotation"));
+  }
+
+  private ComponentKind checkComponentKind(
+      TypeElement typeElement,
+      Predicate<ComponentKind> componentKindPredicate,
+      String errorMessageTemplate) {
     Optional<ComponentKind> kind = ComponentKind.forAnnotatedElement(typeElement);
     checkArgument(
-        kind.isPresent(),
-        "%s must have a component or subcomponent or module annotation",
+        kind.isPresent() && componentKindPredicate.test(kind.get()),
+        errorMessageTemplate,
         typeElement);
-    if (!compilerOptions.aheadOfTimeSubcomponents()) {
-      checkArgument(kind.get().isRoot(), "%s must be a top-level component.", typeElement);
-    }
-    return create(typeElement, kind.get());
+    return kind.get();
   }
 
   private ComponentDescriptor create(TypeElement typeElement, ComponentKind kind) {
@@ -136,8 +154,7 @@ private ComponentDescriptor create(TypeElement typeElement, ComponentKind kind)
     for (ModuleDescriptor module : transitiveModules) {
       for (SubcomponentDeclaration subcomponentDeclaration : module.subcomponentDeclarations()) {
         TypeElement subcomponent = subcomponentDeclaration.subcomponentType();
-        subcomponentsFromModules.add(
-            create(subcomponent, ComponentKind.forAnnotatedElement(subcomponent).get()));
+        subcomponentsFromModules.add(subcomponentDescriptor(subcomponent));
       }
     }
 
@@ -161,19 +178,17 @@ private ComponentDescriptor create(TypeElement typeElement, ComponentKind kind)
           case PRODUCTION_SUBCOMPONENT:
             subcomponentsByFactoryMethod.put(
                 componentMethodDescriptor,
-                create(
-                    MoreElements.asType(MoreTypes.asElement(resolvedMethod.getReturnType())),
-                    componentMethodDescriptor.kind().componentKind()));
+                subcomponentDescriptor(MoreTypes.asTypeElement(resolvedMethod.getReturnType())));
             break;
 
           case SUBCOMPONENT_BUILDER:
           case PRODUCTION_SUBCOMPONENT_BUILDER:
             subcomponentsByBuilderMethod.put(
                 componentMethodDescriptor,
-                create(
+                subcomponentDescriptor(
                     MoreElements.asType(
-                        MoreTypes.asElement(resolvedMethod.getReturnType()).getEnclosingElement()),
-                    componentMethodDescriptor.kind().componentKind()));
+                        MoreTypes.asElement(resolvedMethod.getReturnType())
+                            .getEnclosingElement())));
             break;
 
           default: // nothing special to do for other methods.
diff --git a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
index be5c0bd82..64590530c 100644
--- a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
@@ -114,7 +114,8 @@ protected void process(
     validationReport.report().printMessagesTo(messager);
     if (validationReport.report().isClean()) {
       new EmptyComponentGenerator(filer, elements, sourceVersion)
-          .generate(componentDescriptorFactory.forTypeElement(componentTypeElement), messager);
+          .generate(
+              componentDescriptorFactory.rootComponentDescriptor(componentTypeElement), messager);
     }
   }
 
diff --git a/java/dagger/internal/codegen/ComponentProcessingStep.java b/java/dagger/internal/codegen/ComponentProcessingStep.java
index 7786ecec0..646e50e26 100644
--- a/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -124,7 +124,8 @@ protected void process(
       if (!isClean(validationReport)) {
         return;
       }
-      ComponentDescriptor componentDescriptor = componentDescriptorFactory.forTypeElement(element);
+      ComponentDescriptor componentDescriptor =
+          componentDescriptorFactory.rootComponentDescriptor(element);
       ValidationReport<TypeElement> componentDescriptorReport =
           componentDescriptorValidator.validate(componentDescriptor);
       componentDescriptorReport.printMessagesTo(messager);
@@ -141,7 +142,8 @@ protected void process(
       if (!subcomponentIsClean(element)) {
         return;
       }
-      ComponentDescriptor componentDescriptor = componentDescriptorFactory.forTypeElement(element);
+      ComponentDescriptor componentDescriptor =
+          componentDescriptorFactory.subcomponentDescriptor(element);
       BindingGraph bindingGraph = bindingGraphFactory.create(componentDescriptor);
       if (isValid(bindingGraph)) {
         generateComponent(bindingGraph);
diff --git a/java/dagger/internal/codegen/DaggerKythePlugin.java b/java/dagger/internal/codegen/DaggerKythePlugin.java
index 164f0aa4d..bfdbc1227 100644
--- a/java/dagger/internal/codegen/DaggerKythePlugin.java
+++ b/java/dagger/internal/codegen/DaggerKythePlugin.java
@@ -61,7 +61,7 @@ public Void visitClassDef(JCClassDecl tree, Void p) {
     if (tree.sym != null
         && isAnyAnnotationPresent(tree.sym, Component.class, ProductionComponent.class)) {
       addNodesForGraph(
-          bindingGraphFactory.create(componentDescriptorFactory.forTypeElement(tree.sym)));
+          bindingGraphFactory.create(componentDescriptorFactory.rootComponentDescriptor(tree.sym)));
     }
     return super.visitClassDef(tree, p);
   }
diff --git a/java/dagger/internal/codegen/ModuleValidator.java b/java/dagger/internal/codegen/ModuleValidator.java
index 02aa7e01b..2749b4741 100644
--- a/java/dagger/internal/codegen/ModuleValidator.java
+++ b/java/dagger/internal/codegen/ModuleValidator.java
@@ -587,7 +587,9 @@ private void validateModuleBindings(
       TypeElement module, ValidationReport.Builder<TypeElement> report) {
     BindingGraph bindingGraph =
         bindingGraphConverter.convert(
-            bindingGraphFactory.create(componentDescriptorFactory.forTypeElement(module)), true);
+            bindingGraphFactory.create(
+                componentDescriptorFactory.moduleComponentDescriptor(module)),
+            true);
     if (!bindingGraphValidator.isValid(bindingGraph)) {
       // Since the validator uses a DiagnosticReporter to report errors, the ValdiationReport won't
       // have any Items for them. We have to tell the ValidationReport that some errors were
