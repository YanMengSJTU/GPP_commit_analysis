diff --git a/java/dagger/internal/codegen/DiagnosticReporterFactory.java b/java/dagger/internal/codegen/DiagnosticReporterFactory.java
index bef41faa3..cf94e5370 100644
--- a/java/dagger/internal/codegen/DiagnosticReporterFactory.java
+++ b/java/dagger/internal/codegen/DiagnosticReporterFactory.java
@@ -250,7 +250,7 @@ private void appendBracketPrefix(StringBuilder message, String prefix) {
       final ImmutableSet<DependencyEdge> entryPoints;
 
       DiagnosticInfo(MaybeBinding binding) {
-        entryPoints = graph.entryPointEdgesDependingOnBindingNode(binding);
+        entryPoints = graph.entryPointEdgesDependingOnBinding(binding);
         requests = requests(binding);
         dependencyTrace = dependencyTrace(binding, entryPoints);
       }
@@ -265,7 +265,7 @@ private void appendBracketPrefix(StringBuilder message, String prefix) {
         } else {
           // It's not an entry point, so it's part of a binding
           dagger.model.Binding binding = (dagger.model.Binding) source(dependencyEdge);
-          entryPoints = graph.entryPointEdgesDependingOnBindingNode(binding);
+          entryPoints = graph.entryPointEdgesDependingOnBinding(binding);
           dependencyTraceBuilder.addAll(dependencyTrace(binding, entryPoints));
         }
         dependencyTrace = dependencyTraceBuilder.build();
diff --git a/java/dagger/model/BindingGraph.java b/java/dagger/model/BindingGraph.java
index 80084a28c..865509c6e 100644
--- a/java/dagger/model/BindingGraph.java
+++ b/java/dagger/model/BindingGraph.java
@@ -186,14 +186,14 @@ public final ComponentNode rootComponentNode() {
    * Returns the edges for entry points that transitively depend on a binding or missing binding for
    * a key. Never returns an empty set.
    */
-  public final ImmutableSet<DependencyEdge> entryPointEdgesDependingOnBindingNode(
+  public final ImmutableSet<DependencyEdge> entryPointEdgesDependingOnBinding(
       MaybeBinding binding) {
     ImmutableNetwork<Node, DependencyEdge> dependencyGraph = dependencyGraph();
-    Network<Node, DependencyEdge> subgraphDependingOnBindingNode =
+    Network<Node, DependencyEdge> subgraphDependingOnBinding =
         inducedSubgraph(
             dependencyGraph, reachableNodes(transpose(dependencyGraph).asGraph(), binding));
     ImmutableSet<DependencyEdge> entryPointEdges =
-        intersection(entryPointEdges(), subgraphDependingOnBindingNode.edges()).immutableCopy();
+        intersection(entryPointEdges(), subgraphDependingOnBinding.edges()).immutableCopy();
     verify(!entryPointEdges.isEmpty(), "No entry points depend on binding %s", binding);
     return entryPointEdges;
   }
