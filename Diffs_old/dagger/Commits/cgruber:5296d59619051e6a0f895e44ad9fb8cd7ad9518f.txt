diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
index 210acaa55..2eb20921b 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -906,13 +906,13 @@ private void reportMissingBinding(Deque<ResolvedRequest> path) {
       StringBuilder errorMessage = requiresErrorMessageBase(path);
       ImmutableList<String> printableDependencyPath =
           FluentIterable.from(path)
+              .filter(Predicates.not(SYNTHETIC_BINDING))
               .transform(REQUEST_FROM_RESOLVED_REQUEST)
               .transform(dependencyRequestFormatter)
               .filter(Predicates.not(Predicates.equalTo("")))
               .toList()
               .reverse();
-      for (String dependency :
-          printableDependencyPath.subList(1, printableDependencyPath.size())) {
+      for (String dependency : Iterables.skip(printableDependencyPath, 1)) {
         errorMessage.append('\n').append(dependency);
       }
       for (String suggestion : MissingBindingSuggestions.forKey(topLevelGraph(),
@@ -1073,12 +1073,14 @@ private void reportCycle(
               CONTAINS_DEPENDENCY_CYCLE_FORMAT,
               componentType.getQualifiedName(),
               rootRequestElement.getSimpleName(),
-              Joiner.on("\n")
-                  .join(
-                      FluentIterable.from(requestPath)
-                          .transform(dependencyRequestFormatter)
-                          .filter(not(equalTo("")))
-                          .skip(1))),
+              FluentIterable.from(bindingPath) // TODO(dpb): Resolve with similar code above.
+                  .skip(1)
+                  .filter(Predicates.not(SYNTHETIC_BINDING))
+                  .transform(REQUEST_FROM_RESOLVED_REQUEST)
+                  .append(request)
+                  .transform(dependencyRequestFormatter)
+                  .filter(not(equalTo("")))
+                  .join(Joiner.on('\n'))),
           ERROR,
           rootRequestElement);
     }
@@ -1253,8 +1255,17 @@ static ResolvedRequest create(DependencyRequest request, BindingGraph graph) {
 
   private static final Function<ResolvedRequest, DependencyRequest> REQUEST_FROM_RESOLVED_REQUEST =
       new Function<ResolvedRequest, DependencyRequest>() {
-        @Override public DependencyRequest apply(ResolvedRequest resolvedRequest) {
+        @Override
+        public DependencyRequest apply(ResolvedRequest resolvedRequest) {
           return resolvedRequest.request();
         }
       };
+
+  private static final Predicate<ResolvedRequest> SYNTHETIC_BINDING =
+      new Predicate<ResolvedRequest>() {
+        @Override
+        public boolean apply(ResolvedRequest request) {
+          return request.binding().isSyntheticContribution();
+        }
+      };
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java b/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
index 6eae6ccd3..90e07ea7e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
@@ -239,6 +239,14 @@ boolean isMultibindingContribution() {
         && contributionBinding().contributionType().isMultibinding();
   }
 
+  /**
+   * {@code true} if this is a {@linkplain ContributionBinding#isSyntheticBinding() synthetic}
+   * contribution.
+   */
+  boolean isSyntheticContribution() {
+    return contributionBindings().size() == 1 && contributionBinding().isSyntheticBinding();
+  }
+
   /**
    * Returns the single contribution binding.
    *
diff --git a/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java b/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java
index e49c00d89..6fba4320c 100644
--- a/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java
@@ -312,10 +312,6 @@ public void cyclicDependencyNotBrokenByMapBinding() {
                 "          [parameter: test.Outer.A aParam]",
                 "      test.Outer.A.<init>(java.util.Map<java.lang.String,test.Outer.C> cMap)",
                 "          [parameter: java.util.Map<java.lang.String,test.Outer.C> cMap]",
-                "      test.Outer.A.<init>(java.util.Map<java.lang.String,test.Outer.C> cMap)",
-                "          [parameter: java.util.Map<java.lang.String,test.Outer.C> cMap]",
-                "      test.Outer.A.<init>(java.util.Map<java.lang.String,test.Outer.C> cMap)",
-                "          [parameter: java.util.Map<java.lang.String,test.Outer.C> cMap]",
                 "      test.Outer.CModule.c(test.Outer.C c)",
                 "          [parameter: test.Outer.C c]");
 
