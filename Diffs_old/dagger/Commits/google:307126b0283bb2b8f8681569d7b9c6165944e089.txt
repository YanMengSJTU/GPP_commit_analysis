diff --git a/compiler/src/it/producers-functional-tests/src/main/java/test/DependedProducerModule.java b/compiler/src/it/producers-functional-tests/src/main/java/test/DependedProducerModule.java
new file mode 100644
index 000000000..ad0c792a9
--- /dev/null
+++ b/compiler/src/it/producers-functional-tests/src/main/java/test/DependedProducerModule.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test;
+
+import com.google.common.base.Ascii;
+import com.google.common.collect.ImmutableList;
+import com.google.common.util.concurrent.Futures;
+import com.google.common.util.concurrent.ListenableFuture;
+import dagger.producers.ProducerModule;
+import dagger.producers.Produces;
+
+import java.util.List;
+
+@ProducerModule
+final class DependedProducerModule {
+
+  @Produces
+  int produceNumberOfGreetings() {
+    return 2;
+  }
+}
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/test/DependedProductionComponent.java b/compiler/src/it/producers-functional-tests/src/main/java/test/DependedProductionComponent.java
new file mode 100644
index 000000000..57f175812
--- /dev/null
+++ b/compiler/src/it/producers-functional-tests/src/main/java/test/DependedProductionComponent.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test;
+
+import com.google.common.util.concurrent.ListenableFuture;
+import dagger.producers.ProductionComponent;
+
+@ProductionComponent(modules = DependedProducerModule.class)
+interface DependedProductionComponent {
+  ListenableFuture<Integer> numGreetings();
+}
+
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/test/DependentComponent.java b/compiler/src/it/producers-functional-tests/src/main/java/test/DependentComponent.java
index d9e9d6e99..4b14f99b5 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/test/DependentComponent.java
+++ b/compiler/src/it/producers-functional-tests/src/main/java/test/DependentComponent.java
@@ -18,12 +18,11 @@
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.producers.ProductionComponent;
 
-import java.lang.String;
 import java.util.List;
 
 @ProductionComponent(
     modules = DependentProducerModule.class,
-    dependencies = DependedComponent.class)
+    dependencies = {DependedComponent.class, DependedProductionComponent.class})
 interface DependentComponent {
   ListenableFuture<List<String>> greetings();
 }
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/test/DependentProducerModule.java b/compiler/src/it/producers-functional-tests/src/main/java/test/DependentProducerModule.java
index 897a63d8f..234c088d3 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/test/DependentProducerModule.java
+++ b/compiler/src/it/producers-functional-tests/src/main/java/test/DependentProducerModule.java
@@ -27,8 +27,9 @@
 @ProducerModule
 final class DependentProducerModule {
   @Produces
-  ListenableFuture<List<String>> greetings(String greeting) {
-    List<String> greetings = ImmutableList.of(greeting, Ascii.toUpperCase(greeting));
+  ListenableFuture<List<String>> greetings(Integer numGreetings, String greeting) {
+    List<String> greetings = ImmutableList.of(
+        String.valueOf(numGreetings), greeting, Ascii.toUpperCase(greeting));
     return Futures.immediateFuture(greetings);
   }
 }
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/test/DependentTest.java b/compiler/src/it/producers-functional-tests/src/test/java/test/DependentTest.java
index 38e63b2e7..70413ae94 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/test/DependentTest.java
+++ b/compiler/src/it/producers-functional-tests/src/test/java/test/DependentTest.java
@@ -27,11 +27,14 @@
   @Test public void testDependentComponent() throws Exception {
     DependentComponent dependentComponent = Dagger_DependentComponent
         .builder()
+        .dependedProductionComponent(Dagger_DependedProductionComponent.builder()
+            .executor(MoreExecutors.directExecutor())
+            .build())
         .dependedComponent(Dagger_DependedComponent.create())
         .executor(MoreExecutors.directExecutor())
         .build();
     assertThat(dependentComponent).isNotNull();
     assertThat(dependentComponent.greetings().get()).containsExactly(
-        "Hello world!", "HELLO WORLD!");
+        "2", "Hello world!", "HELLO WORLD!");
   }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 75b766321..d1d1633e7 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -33,6 +33,7 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import com.google.common.util.concurrent.ListenableFuture;
 import dagger.Component;
 import dagger.Factory;
 import dagger.MapKey;
@@ -916,12 +917,13 @@ private Snippet initializeFactoryForProductionBinding(ProductionBinding binding,
       case COMPONENT_PRODUCTION:
         return Snippet.format(Joiner.on('\n').join(
             "new %s<%2$s>() {",
-            "  @Override public %2$s get() {",
-            "    return %3$s.%4$s();",
+            "  @Override public %3$s<%2$s> get() {",
+            "    return %4$s.%5$s();",
             "  }",
             "}"),
             ClassName.fromClass(Producer.class),
             TypeNames.forTypeMirror(binding.key().type()),
+            ClassName.fromClass(ListenableFuture.class),
             contributionFields.get(dependencyMethodIndex.get(binding.bindingElement())).name(),
             binding.bindingElement().getSimpleName().toString());
       case IMMEDIATE:
