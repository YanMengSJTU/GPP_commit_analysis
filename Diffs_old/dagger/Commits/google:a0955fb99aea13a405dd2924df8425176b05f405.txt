diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 99393474d..2e25cc21e 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -4668,6 +4668,208 @@ public void lazyOfModifiableBinding() {
         .hasSourceEquivalentTo(generatedAncestor);
   }
 
+  @Test
+  public void missingBindingAccessInLeafAndAncestor() {
+    ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
+    createAncillaryClasses(
+        filesToCompile, "Missing", "DependsOnMissing", "ProvidedInAncestor_InducesSetBinding");
+    filesToCompile.add(
+        JavaFileObjects.forSourceLines(
+            "test.LeafModule",
+            "package test;",
+            "",
+            "import dagger.Module;",
+            "import dagger.multibindings.IntoSet;",
+            "import dagger.Provides;",
+            "import javax.inject.Provider;",
+            "",
+            "@Module",
+            "class LeafModule {",
+            "  @Provides",
+            "  static DependsOnMissing test(",
+            "      Missing missing,",
+            "      Provider<Missing> missingProvider,",
+            "      ProvidedInAncestor_InducesSetBinding missingInLeaf) {",
+            "    return new DependsOnMissing();",
+            "  }",
+            "",
+            "  @Provides",
+            "  @IntoSet",
+            "  static Object unresolvedSetBinding(",
+            "      Missing missing, Provider<Missing> missingProvider) {",
+            "    return new Object();",
+            "  }",
+            "}"),
+        JavaFileObjects.forSourceLines(
+            "test.Leaf",
+            "package test;",
+            "",
+            "import dagger.Subcomponent;",
+            "import javax.inject.Provider;",
+            "",
+            "@Subcomponent(modules = LeafModule.class)",
+            "interface Leaf {",
+            "  DependsOnMissing instance();",
+            "  Provider<DependsOnMissing> frameworkInstance();",
+            "}"));
+    JavaFileObject generatedLeaf =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerLeaf",
+            "package test;",
+            "",
+            IMPORT_GENERATED_ANNOTATION,
+            "import javax.inject.Provider;",
+            "",
+            GENERATED_ANNOTATION,
+            "public abstract class DaggerLeaf implements Leaf {",
+            "  private LeafModule_TestFactory testProvider;",
+            "",
+            "  protected DaggerLeaf() {",
+            "    initialize();",
+            "  }",
+            "",
+            "  @SuppressWarnings(\"unchecked\")",
+            "  private void initialize() {",
+            "    this.testProvider =",
+            "        LeafModule_TestFactory.create(",
+            "            getMissingProvider(), getProvidedInAncestor_InducesSetBindingProvider());",
+            "  }",
+            "",
+            "  @Override",
+            "  public DependsOnMissing instance() {",
+            "    return LeafModule_TestFactory.proxyTest(",
+            "        getMissing(),",
+            "        getMissingProvider(),",
+            "        getProvidedInAncestor_InducesSetBinding());",
+            "  }",
+            "",
+            "  @Override",
+            "  public Provider<DependsOnMissing> frameworkInstance() {",
+            "    return testProvider;",
+            "  }",
+            "",
+            "  public abstract Missing getMissing();",
+            "  public abstract Provider<Missing> getMissingProvider();",
+            "  public abstract ProvidedInAncestor_InducesSetBinding",
+            "    getProvidedInAncestor_InducesSetBinding();",
+            "  public abstract Provider<ProvidedInAncestor_InducesSetBinding>",
+            "    getProvidedInAncestor_InducesSetBindingProvider();",
+            "}");
+    Compilation compilation = compile(filesToCompile.build());
+    assertThat(compilation).succeededWithoutWarnings();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerLeaf")
+        .hasSourceEquivalentTo(generatedLeaf);
+
+    filesToCompile.add(
+        JavaFileObjects.forSourceLines(
+            "test.AncestorModule",
+            "package test;",
+            "",
+            "import dagger.Module;",
+            "import dagger.multibindings.IntoSet;",
+            "import dagger.Provides;",
+            "import java.util.Set;",
+            "",
+            "@Module",
+            "interface AncestorModule {",
+            "  @Provides",
+            "  static ProvidedInAncestor_InducesSetBinding providedInAncestor(",
+            "      Set<Object> setThatInducesMissingBindingInChildSubclassImplementation) {",
+            "    return new ProvidedInAncestor_InducesSetBinding();",
+            "  }",
+            "",
+            "  @Provides",
+            "  @IntoSet",
+            "  static Object setContribution() {",
+            "    return new Object();",
+            "  }",
+            "}"),
+        JavaFileObjects.forSourceLines(
+            "test.Ancestor",
+            "package test;",
+            "",
+            "import dagger.Subcomponent;",
+            "",
+            "@Subcomponent(modules = AncestorModule.class)",
+            "interface Ancestor {",
+            "  Leaf leaf();",
+            "}"));
+    JavaFileObject generatedAncestor =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerLeaf",
+            "package test;",
+            "",
+            "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.SetFactory;",
+            "import java.util.Set;",
+            IMPORT_GENERATED_ANNOTATION,
+            "import javax.inject.Provider;",
+            "",
+            GENERATED_ANNOTATION,
+            "public abstract class DaggerAncestor implements Ancestor {",
+            "  protected DaggerAncestor() {}",
+            "",
+            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "    private LeafModule_UnresolvedSetBindingFactory unresolvedSetBindingProvider;",
+            "",
+            "    private Provider<Set<Object>> setOfObjectProvider;",
+            "",
+            "    private AncestorModule_ProvidedInAncestorFactory providedInAncestorProvider;",
+            "",
+            "    protected LeafImpl() {",
+            "      super();",
+            "      initialize();",
+            "    }",
+            "",
+            "    private Object getObject() {",
+            "      return LeafModule_UnresolvedSetBindingFactory.proxyUnresolvedSetBinding(",
+            "          getMissing(), getMissingProvider());",
+            "    }",
+            "",
+            "    @SuppressWarnings(\"unchecked\")",
+            "    private void initialize() {",
+            "      this.unresolvedSetBindingProvider =",
+            "          LeafModule_UnresolvedSetBindingFactory.create(getMissingProvider());",
+            "      this.setOfObjectProvider =",
+            "          SetFactory.<Object>builder(2, 0)",
+            "              .addProvider(AncestorModule_SetContributionFactory.create())",
+            "              .addProvider(unresolvedSetBindingProvider)",
+            "              .build();",
+            "      this.providedInAncestorProvider =",
+            "          AncestorModule_ProvidedInAncestorFactory.create(getSetOfObjectProvider());",
+            "    }",
+            "",
+            "    public Set<Object> getSetOfObject() {",
+            "      return ImmutableSet.<Object>of(",
+            "          AncestorModule_SetContributionFactory.proxySetContribution(), getObject());",
+            "    }",
+            "",
+            "    @Override",
+            "    public final ProvidedInAncestor_InducesSetBinding ",
+            "        getProvidedInAncestor_InducesSetBinding() {",
+            "      return AncestorModule_ProvidedInAncestorFactory.proxyProvidedInAncestor(",
+            "          getSetOfObject());",
+            "    }",
+            "",
+            "    public Provider<Set<Object>> getSetOfObjectProvider() {",
+            "      return setOfObjectProvider;",
+            "    }",
+            "",
+            "    @Override",
+            "    public final Provider<ProvidedInAncestor_InducesSetBinding>",
+            "        getProvidedInAncestor_InducesSetBindingProvider() {",
+            "      return providedInAncestorProvider;",
+            "    }",
+            "  }",
+           "}");
+    compilation = compile(filesToCompile.build());
+    assertThat(compilation).succeededWithoutWarnings();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerAncestor")
+        .hasSourceEquivalentTo(generatedAncestor);
+  }
+
   private void createAncillaryClasses(
       ImmutableList.Builder<JavaFileObject> filesBuilder, String... ancillaryClasses) {
     for (String className : ancillaryClasses) {
