diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/ChildComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/ChildComponent.java
new file mode 100644
index 000000000..badb7cac6
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/ChildComponent.java
@@ -0,0 +1,14 @@
+
+
+package test.subcomponent.repeat;
+
+import dagger.Subcomponent;
+
+import java.util.Set;
+
+@Subcomponent(modules = RepeatedModule.class)
+interface ChildComponent {
+  String getString();
+  Set<String> getMultiboundStrings();
+  OnlyUsedInChild getOnlyUsedInChild();
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/OnlyUsedInChild.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/OnlyUsedInChild.java
new file mode 100644
index 000000000..2dd8d20d3
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/OnlyUsedInChild.java
@@ -0,0 +1,5 @@
+package test.subcomponent.repeat;
+
+abstract class OnlyUsedInChild {
+
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/OnlyUsedInParent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/OnlyUsedInParent.java
new file mode 100644
index 000000000..cc22b1e05
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/OnlyUsedInParent.java
@@ -0,0 +1,5 @@
+package test.subcomponent.repeat;
+
+abstract class OnlyUsedInParent {
+
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/ParentComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/ParentComponent.java
new file mode 100644
index 000000000..91df02cc3
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/ParentComponent.java
@@ -0,0 +1,19 @@
+package test.subcomponent.repeat;
+
+import dagger.Component;
+
+import java.util.Set;
+
+@Component(modules = RepeatedModule.class)
+interface ParentComponent {
+  String getString();
+  Set<String> getMultiboundStrings();
+  OnlyUsedInParent getOnlyUsedInParent();
+
+  ChildComponent newChildComponent();
+
+  @Component.Builder
+  interface Builder {
+    ParentComponent build();
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/RepeatedModule.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/RepeatedModule.java
new file mode 100644
index 000000000..508a41b56
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/RepeatedModule.java
@@ -0,0 +1,25 @@
+package test.subcomponent.repeat;
+
+import static dagger.Provides.Type.SET;
+
+import dagger.Module;
+import dagger.Provides;
+
+@Module
+final class RepeatedModule {
+  @Provides String provideString() {
+    return "a string";
+  }
+
+  @Provides(type = SET) String contributeString() {
+    return "a string in a set";
+  }
+
+  @Provides OnlyUsedInParent provideOnlyUsedInParent() {
+    return new OnlyUsedInParent() {};
+  }
+
+  @Provides OnlyUsedInChild provideOnlyUsedInChild() {
+    return new OnlyUsedInChild() {};
+  }
+}
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index 54ac7e9ef..77115015e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -389,14 +389,21 @@ private MembersInjectionBinding rollUpMembersInjectionBindings(Key key) {
         Optional<Equivalence.Wrapper<AnnotationMirror>> bindingScope =
             provisionBinding.wrappedScope();
         for (RequestResolver requestResolver : getResolverLineage().reverse()) {
-          if (requestResolver.explicitProvisionBindings.containsValue(provisionBinding)
-              || (bindingScope.isPresent() && bindingScope.equals(requestResolver.targetScope))) {
+          if (requestResolver.explicitProvisionBindings.containsValue(provisionBinding)) {
+             return Optional.of(requestResolver);
+          }
+        }
+        // look for scope separately.  we do this for the case where @Singleton can appear twice
+        // in the â€  compatibility mode
+        for (RequestResolver requestResolver : getResolverLineage().reverse()) {
+          if (bindingScope.isPresent() && bindingScope.equals(requestResolver.targetScope)) {
             return Optional.of(requestResolver);
           }
         }
         return Optional.absent();
       }
 
+      /** Returns the resolver lineage from parent to child. */
       private ImmutableList<RequestResolver> getResolverLineage() {
         List<RequestResolver> resolverList = Lists.newArrayList();
         for (Optional<RequestResolver> currentResolver = Optional.of(this);
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 2a4dc4ab2..82903739a 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -457,7 +457,6 @@ private boolean requiresUserSuppliedDependents(BindingGraph input) {
       writeSubcomponent(componentWriter,
           MoreTypes.asDeclared(input.componentDescriptor().componentDefinitionType().asType()),
           proxyWriters,
-          componentContributionFields,
           memberSelectSnippets,
           multibindingContributionSnippets,
           subgraphEntry.getKey(),
@@ -470,7 +469,6 @@ private boolean requiresUserSuppliedDependents(BindingGraph input) {
   private void writeSubcomponent(ClassWriter componentWriter,
       DeclaredType containingComponent,
       Set<JavaWriter> proxyWriters,
-      Map<TypeElement, MemberSelect> parentContributionFields,
       ImmutableMap<BindingKey, MemberSelect> parentMemberSelectSnippets,
       ImmutableMap<ContributionBinding, Snippet> parentMultibindingContributionSnippets,
       ExecutableElement subcomponentFactoryMethod,
@@ -485,8 +483,7 @@ private void writeSubcomponent(ClassWriter componentWriter,
     constructorWriter.addModifiers(PRIVATE);
     constructorWriter.body();
 
-    Map<TypeElement, MemberSelect> componentContributionFields =
-        Maps.newHashMap(parentContributionFields);
+    Map<TypeElement, MemberSelect> componentContributionFields = Maps.newHashMap();
     ImmutableList.Builder<Snippet> subcomponentConstructorParameters = ImmutableList.builder();
 
     TypeMirror subcomponentType;
@@ -581,7 +578,6 @@ private void writeSubcomponent(ClassWriter componentWriter,
       writeSubcomponent(subcomponentWriter,
           MoreTypes.asDeclared(subgraph.componentDescriptor().componentDefinitionType().asType()),
           proxyWriters,
-          componentContributionFields,
           memberSelectSnippets,
           new ImmutableMap.Builder<ContributionBinding, Snippet>()
               .putAll(parentMultibindingContributionSnippets)
