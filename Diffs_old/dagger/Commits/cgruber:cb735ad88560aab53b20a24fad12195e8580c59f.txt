diff --git a/compiler/src/it/producers-functional-tests/src/main/java/test/SimpleProducerModule.java b/compiler/src/it/producers-functional-tests/src/main/java/test/SimpleProducerModule.java
index fa63d4822..92912785d 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/test/SimpleProducerModule.java
+++ b/compiler/src/it/producers-functional-tests/src/main/java/test/SimpleProducerModule.java
@@ -15,18 +15,69 @@
 */
 package test;
 
+import com.google.common.collect.ImmutableSet;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
+import java.util.Set;
+import javax.inject.Qualifier;
+
+import static dagger.producers.Produces.Type.SET;
+import static dagger.producers.Produces.Type.SET_VALUES;
 
 @ProducerModule
 final class SimpleProducerModule {
-  @Produces ListenableFuture<String> str() {
-    return Futures.immediateFuture("Hello, World!");
+  @Qualifier @interface Qual {
+    int value();
+  }
+
+  @Produces @Qual(0) String str() {
+    return "str";
+  }
+
+  @Produces @Qual(1) ListenableFuture<String> futureStr() {
+    return Futures.immediateFuture("future str");
+  }
+
+  @Produces @Qual(2) String strWithArg(int i) {
+    return "str with arg";
+  }
+
+  @Produces @Qual(3) ListenableFuture<String> futureStrWithArg(int i) {
+    return Futures.immediateFuture("future str with arg");
+  }
+
+  @Produces(type = SET) String setOfStrElement() {
+    return "set of str element";
+  }
+
+  @Produces(type = SET) ListenableFuture<String> setOfStrFutureElement() {
+    return Futures.immediateFuture("set of str element");
+  }
+
+  @Produces(type = SET) String setOfStrElementWithArg(int i) {
+    return "set of str element with arg";
+  }
+
+  @Produces(type = SET) ListenableFuture<String> setOfStrFutureElementWithArg(int i) {
+    return Futures.immediateFuture("set of str element with arg");
+  }
+
+  @Produces(type = SET_VALUES) Set<String> setOfStrValues() {
+    return ImmutableSet.of("set of str 1", "set of str 2");
+  }
+
+  @Produces(type = SET_VALUES) ListenableFuture<Set<String>> setOfStrFutureValues() {
+    return Futures.<Set<String>>immediateFuture(ImmutableSet.of("set of str 1", "set of str 2"));
+  }
+
+  @Produces(type = SET_VALUES) Set<String> setOfStrValuesWithArg(int i) {
+    return ImmutableSet.of("set of str with arg 1", "set of str with arg 2");
   }
 
-  @Produces int len(String str) {
-    return str.length();
+  @Produces(type = SET_VALUES) ListenableFuture<Set<String>> setOfStrFutureValuesWithArg(int i) {
+    return Futures.<Set<String>>immediateFuture(ImmutableSet.of(
+        "set of str with arg 1", "set of str with arg 2"));
   }
 }
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/test/ProducerFactoryTest.java b/compiler/src/it/producers-functional-tests/src/test/java/test/ProducerFactoryTest.java
index 3826b6ed0..5a37593d8 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/test/ProducerFactoryTest.java
+++ b/compiler/src/it/producers-functional-tests/src/test/java/test/ProducerFactoryTest.java
@@ -31,18 +31,18 @@
     SimpleProducerModule module = new SimpleProducerModule();
     Producer<String> producer =
         new SimpleProducerModule_StrFactory(module, MoreExecutors.directExecutor());
-    assertThat(producer.get().get()).isEqualTo("Hello, World!");
+    assertThat(producer.get().get()).isEqualTo("str");
   }
 
   @Test public void singleArgMethod() throws Exception {
     SimpleProducerModule module = new SimpleProducerModule();
-    SettableFuture<String> strFuture = SettableFuture.create();
-    Producer<String> strProducer = producerOfFuture(strFuture);
-    Producer<Integer> producer =
-        new SimpleProducerModule_LenFactory(module, MoreExecutors.directExecutor(), strProducer);
+    SettableFuture<Integer> intFuture = SettableFuture.create();
+    Producer<Integer> intProducer = producerOfFuture(intFuture);
+    Producer<String> producer = new SimpleProducerModule_StrWithArgFactory(
+        module, MoreExecutors.directExecutor(), intProducer);
     assertThat(producer.get().isDone()).isFalse();
-    strFuture.set("abcdef");
-    assertThat(producer.get().get()).isEqualTo(6);
+    intFuture.set(42);
+    assertThat(producer.get().get()).isEqualTo("str with arg");
   }
 
   private static <T> Producer<T> producerOfFuture(final ListenableFuture<T> future) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index 7277d50e1..a4bf62c82 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -334,23 +334,27 @@ private Snippet getInvocationSnippet(boolean wrapWithFuture, ProductionBinding b
     Snippet moduleSnippet = Snippet.format("module.%s(%s)",
         binding.bindingElement().getSimpleName(),
         makeParametersSnippet(parameterSnippets));
-    if (wrapWithFuture) {
-      moduleSnippet = Snippet.format("%s.immediateFuture(%s)",
-          ClassName.fromClass(Futures.class),
-          moduleSnippet);
-    }
+    final Snippet valueSnippet;
     if (binding.productionType().equals(Produces.Type.SET)) {
       if (binding.bindingKind().equals(ProductionBinding.Kind.FUTURE_PRODUCTION)) {
-        return Snippet.format("%s.createFutureSingletonSet(%s)",
+        valueSnippet = Snippet.format("%s.createFutureSingletonSet(%s)",
             ClassName.fromClass(Producers.class),
             moduleSnippet);
       } else {
-        return Snippet.format("%s.of(%s)",
+        valueSnippet = Snippet.format("%s.of(%s)",
             ClassName.fromClass(ImmutableSet.class),
             moduleSnippet);
       }
     } else {
-      return moduleSnippet;
+      valueSnippet = moduleSnippet;
+    }
+    if (wrapWithFuture) {
+      return Snippet.format("%s.<%s>immediateFuture(%s)",
+          ClassName.fromClass(Futures.class),
+          TypeNames.forTypeMirror(binding.key().type()),
+          valueSnippet);
+    } else {
+      return valueSnippet;
     }
   }
 
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
index 9e209bb00..01e6aa325 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
@@ -801,7 +801,7 @@ public void publicModuleNonPublicIncludes() {
         "        new AsyncFunction<List<Object>, String>() {",
         "          @SuppressWarnings(\"unchecked\")  // safe by specification",
         "          @Override public ListenableFuture<String> apply(List<Object> args) {",
-        "            return Futures.immediateFuture(module.produceString(",
+        "            return Futures.<String>immediateFuture(module.produceString(",
         "                (Integer) args.get(0),",
         "                (Produced<Double>) args.get(1),",
         "                cProducer,",
