diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 13e51df2a..468e32bbe 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -205,9 +205,10 @@ java_library(
 java_library(
     name = "binding_graph_validation",
     srcs = [
-        "BindingGraphValidationModule.java",
+        "BindingGraphPlugins.java",
         "DependencyCycleValidator.java",
         "DependsOnProductionExecutorValidator.java",
+        "DiagnosticReporterFactory.java",
         "DuplicateBindingsValidator.java",
         "IncompatiblyScopedBindingsValidator.java",
         "InjectBindingValidator.java",
@@ -322,15 +323,13 @@ java_library(
     srcs = [
         "BindingGraphConverter.java",
         "BindingGraphFactory.java",
-        "BindingGraphPlugins.java",
-        "BindingGraphPluginsModule.java",
+        "BindingGraphValidationModule.java",
         "BindingMethodValidatorsModule.java",
         "ComponentGenerator.java",
         "ComponentHjarProcessingStep.java",
         "ComponentImplementationFactory.java",
         "ComponentProcessingStep.java",
         "ComponentProcessor.java",
-        "DiagnosticReporterFactory.java",
         "InjectBindingRegistryImpl.java",
         "InjectProcessingStep.java",
         "MapKeyProcessingStep.java",
@@ -338,6 +337,7 @@ java_library(
         "ProcessingEnvironmentModule.java",
         "ProcessingOptions.java",
         "SourceFileGeneratorsModule.java",
+        "SpiModule.java",
         "SystemComponentsModule.java",
     ],
     plugins = CODEGEN_PLUGINS,
diff --git a/java/dagger/internal/codegen/BindingGraphValidationModule.java b/java/dagger/internal/codegen/BindingGraphValidationModule.java
index 63e1fa255..c35bc2e6c 100644
--- a/java/dagger/internal/codegen/BindingGraphValidationModule.java
+++ b/java/dagger/internal/codegen/BindingGraphValidationModule.java
@@ -18,8 +18,15 @@
 
 import dagger.Binds;
 import dagger.Module;
+import dagger.Provides;
 import dagger.multibindings.IntoSet;
 import dagger.spi.BindingGraphPlugin;
+import java.util.Map;
+import java.util.Set;
+import javax.annotation.processing.Filer;
+import javax.inject.Singleton;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.Types;
 
 /** Binds the set of {@link BindingGraphPlugin}s used to implement Dagger validation. */
 @Module
@@ -75,4 +82,18 @@ BindingGraphPlugin provisionDependencyOnProducerBinding(
   @IntoSet
   @Validation
   BindingGraphPlugin subcomponentFactoryMethod(SubcomponentFactoryMethodValidator validation);
+
+  @Provides
+  @Singleton
+  @Validation
+  static BindingGraphPlugins validationPlugins(
+      @Validation Set<BindingGraphPlugin> validationPlugins,
+      Filer filer,
+      Types types,
+      Elements elements,
+      @ProcessingOptions Map<String, String> processingOptions,
+      DiagnosticReporterFactory diagnosticReporterFactory) {
+    return new BindingGraphPlugins(
+        validationPlugins, filer, types, elements, processingOptions, diagnosticReporterFactory);
+  }
 }
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index f02c926e9..69187ec1c 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -119,7 +119,7 @@ public SourceVersion getSupportedSourceVersion() {
   @Component(
       modules = {
         ProcessingEnvironmentModule.class,
-        BindingGraphPluginsModule.class,
+        SpiModule.class,
         BindingGraphValidationModule.class,
         BindingMethodValidatorsModule.class,
         ProcessingStepsModule.class,
diff --git a/java/dagger/internal/codegen/BindingGraphPluginsModule.java b/java/dagger/internal/codegen/SpiModule.java
similarity index 71%
rename from java/dagger/internal/codegen/BindingGraphPluginsModule.java
rename to java/dagger/internal/codegen/SpiModule.java
index 0f34c7608..debf3df98 100644
--- a/java/dagger/internal/codegen/BindingGraphPluginsModule.java
+++ b/java/dagger/internal/codegen/SpiModule.java
@@ -24,16 +24,15 @@
 import java.util.Map;
 import java.util.Optional;
 import java.util.ServiceLoader;
-import java.util.Set;
 import javax.annotation.processing.Filer;
 import javax.inject.Singleton;
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
-/** Contains the bindings for {@link BindingGraphPlugins}. */
+/** Contains the bindings for {@link BindingGraphPlugins} from external SPI providers. */
 @Module
-abstract class BindingGraphPluginsModule {
-  private BindingGraphPluginsModule() {}
+abstract class SpiModule {
+  private SpiModule() {}
 
   @Provides
   @Singleton
@@ -45,7 +44,7 @@ static BindingGraphPlugins spiPlugins(
       @ProcessingOptions Map<String, String> processingOptions,
       DiagnosticReporterFactory diagnosticReporterFactory) {
     return new BindingGraphPlugins(
-        testingPlugins.orElseGet(BindingGraphPluginsModule::loadPlugins),
+        testingPlugins.orElseGet(SpiModule::loadPlugins),
         filer,
         types,
         elements,
@@ -53,20 +52,6 @@ static BindingGraphPlugins spiPlugins(
         diagnosticReporterFactory);
   }
 
-  @Provides
-  @Singleton
-  @Validation
-  static BindingGraphPlugins validationPlugins(
-      @Validation Set<BindingGraphPlugin> validationPlugins,
-      Filer filer,
-      Types types,
-      Elements elements,
-      @ProcessingOptions Map<String, String> processingOptions,
-      DiagnosticReporterFactory diagnosticReporterFactory) {
-    return new BindingGraphPlugins(
-        validationPlugins, filer, types, elements, processingOptions, diagnosticReporterFactory);
-  }
-
   private static ImmutableSet<BindingGraphPlugin> loadPlugins() {
     return ImmutableSet.copyOf(
         ServiceLoader.load(BindingGraphPlugin.class, BindingGraphPlugins.class.getClassLoader()));
