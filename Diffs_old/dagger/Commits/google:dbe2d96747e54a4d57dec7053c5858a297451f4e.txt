diff --git a/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java b/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
index 5e5e57478..e560706bb 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
@@ -142,7 +142,7 @@
       "Modules with type parameters must be abstract";
 
   static final String REFERENCED_MODULES_MUST_NOT_BE_ABSTRACT =
-      "%s is listed as a module, but is abstract";
+      "%s is listed as a module, but is an abstract class or interface";
 
   static final String REFERENCED_MODULE_NOT_ANNOTATED =
       "%s is listed as a module, but is not annotated with @%s";
diff --git a/compiler/src/main/java/dagger/internal/codegen/ModuleValidator.java b/compiler/src/main/java/dagger/internal/codegen/ModuleValidator.java
index f30ef9133..f2116b110 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ModuleValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ModuleValidator.java
@@ -35,6 +35,7 @@
 import java.util.Set;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.Element;
+import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.DeclaredType;
@@ -101,7 +102,9 @@
       
     validateModuleVisibility(subject, builder);
     validateMethodsWithSameName(builder, bindingMethodsByName);
-    validateProvidesOverrides(subject, builder, allMethodsByName, bindingMethodsByName);
+    if (subject.getKind() != ElementKind.INTERFACE) {
+      validateProvidesOverrides(subject, builder, allMethodsByName, bindingMethodsByName);
+    }
     validateModifiers(subject, builder);    
     validateReferencedModules(subject, builder);
     
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index c5841c8db..81cf0a2d1 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -92,14 +92,14 @@
         .withErrorContaining("is not annotated with @Module");
   }
 
-  @Test public void cannotReferToAbstractModules() {
+  private void checkCannotReferToModuleOfType(String moduleType) {
     JavaFileObject moduleFile = JavaFileObjects.forSourceLines("test.TestModule",
         "package test;",
         "",
         "import dagger.Module;",
         "",
         "@Module",
-        "abstract class TestModule {}");
+        moduleType + " TestModule {}");
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.BadComponent",
         "package test;",
         "",
@@ -114,6 +114,14 @@
             String.format(REFERENCED_MODULES_MUST_NOT_BE_ABSTRACT, "test.TestModule"));
   }
 
+  @Test public void cannotReferToAbstractClassModules() {
+    checkCannotReferToModuleOfType("abstract class");
+  }
+
+  @Test public void cannotReferToInterfaceModules() {
+    checkCannotReferToModuleOfType("interface");
+  }
+
   @Test public void doubleBindingFromResolvedModules() {
     JavaFileObject parent = JavaFileObjects.forSourceLines("test.ParentModule",
         "package test;",
