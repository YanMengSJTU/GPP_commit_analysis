diff --git a/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java b/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
index 2519ba792..d4f2a1c46 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
@@ -19,24 +19,23 @@
 import dagger.Multibindings;
 import dagger.Provides;
 import dagger.multibindings.ClassKey;
+import dagger.multibindings.ElementsIntoSet;
 import dagger.multibindings.IntKey;
 import dagger.multibindings.IntoMap;
 import dagger.multibindings.IntoSet;
 import dagger.multibindings.LongKey;
 import dagger.multibindings.StringKey;
+
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
+
 import javax.inject.Named;
 import javax.inject.Provider;
 
-import static dagger.Provides.Type.MAP;
-import static dagger.Provides.Type.SET;
-import static dagger.Provides.Type.SET_VALUES;
-
 @Module
 class MultibindingModule {
   @Provides
@@ -46,7 +45,8 @@ static String provideFooKey(@SuppressWarnings("unused") double doubleDependency)
     return "foo value";
   }
 
-  @Provides(type = MAP)
+  @Provides
+  @IntoMap
   @StringKey("foo @Provides(type)")
   static String provideFooProvidesTypeKey(@SuppressWarnings("unused") double doubleDependency) {
     return "foo @Provides(type) value";
@@ -85,12 +85,14 @@ static int provideSixToSet() {
     return 6;
   }
 
-  @Provides(type = SET)
+  @Provides
+  @IntoSet
   static int provideIntoSetWithProvidesType() {
     return -100;
   }
 
-  @Provides(type = SET_VALUES)
+  @Provides
+  @ElementsIntoSet
   static Set<Integer> provideElementsIntoSetWithProvidesType() {
     Set<Integer> set = new HashSet<>();
     set.add(-101);
