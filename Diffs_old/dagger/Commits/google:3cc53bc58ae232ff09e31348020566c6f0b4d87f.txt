diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index 7cb18f3e5..c54e0e5bf 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -2202,6 +2202,7 @@ public void unprocessedMembersInjectorNotes() {
                     "    extends LocalInjectMemberNoConstructor {",
                     "  @Inject ParentInjectMemberWithConstructor() {}",
                     "}")))
+        .withCompilerOptions("-Xlint:-processing")
         .processedWith(
             new ElementFilteringComponentProcessor(
                 Predicates.not(
@@ -2213,8 +2214,6 @@ public boolean apply(Element element) {
                             .contentEquals("test.inject");
                       }
                     })))
-        .compilesWithoutError();
-        /* TODO(b/23108801): Uncomment when compilesWithoutWarnings() is implemented.
         .compilesWithoutWarnings()
         .withNoteContaining(
             "Generating a MembersInjector or Factory for "
@@ -2232,7 +2231,6 @@ public boolean apply(Element element) {
                 + "Prefer to run the dagger processor over that class instead.")
         .and()
         .withNoteCount(3);
-         */
   }
 
   /**
diff --git a/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java b/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java
index 45eddac27..ca4925a4c 100644
--- a/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java
@@ -20,7 +20,6 @@
 import com.google.testing.compile.JavaFileObjects;
 import java.util.Arrays;
 import javax.tools.JavaFileObject;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -385,7 +384,8 @@ public void falsePositiveCyclicDependencyIndirectionDetected() {
         .onLine(28);
   }
 
-  @Ignore @Test public void cyclicDependencySimpleProviderIndirectionWarning() {
+  @Test
+  public void cyclicDependencySimpleProviderIndirectionWarning() {
     JavaFileObject component =
         JavaFileObjects.forSourceLines(
             "test.Outer",
@@ -437,14 +437,14 @@ public void falsePositiveCyclicDependencyIndirectionDetected() {
         .that(component)
         .withCompilerOptions("-Xlint:-processing", "-Xlint:-rawtypes")
         .processedWith(new ComponentProcessor())
-        .compilesWithoutError();
-    // TODO(dpb): Enable when testing warnings is released.
-    //  .withWarningContaining(expectedWarning)
-    //  .in(component)
-    //  .onLine(28);
+        .compilesWithoutError()
+        .withWarningContaining(expectedWarning)
+        .in(component)
+        .onLine(28);
   }
 
-  @Ignore @Test public void cyclicDependencySimpleProviderIndirectionWarningSuppressed() {
+  @Test
+  public void cyclicDependencySimpleProviderIndirectionWarningSuppressed() {
     JavaFileObject component =
         JavaFileObjects.forSourceLines(
             "test.Outer",
@@ -484,12 +484,9 @@ public void falsePositiveCyclicDependencyIndirectionDetected() {
         .that(component)
         .withCompilerOptions("-Xlint:-processing", "-Xlint:-rawtypes")
         .processedWith(new ComponentProcessor())
-        .compilesWithoutError();
-    // TODO(dpb): Enable when testing warnings is released.
-    //  .compilesWithoutWarnings();
+        .compilesWithoutWarnings();
   }
 
-  @Ignore
   @Test
   public void cyclicDependencySimpleProviderIndirectionWarningSuppressed_atDependencyRequest() {
     JavaFileObject component =
@@ -530,12 +527,9 @@ public void cyclicDependencySimpleProviderIndirectionWarningSuppressed_atDepende
         .that(component)
         .withCompilerOptions("-Xlint:-processing", "-Xlint:-rawtypes")
         .processedWith(new ComponentProcessor())
-        .compilesWithoutError();
-    // TODO(dpb): Enable when testing warnings is released.
-    //  .compilesWithoutWarnings();
+        .compilesWithoutWarnings();
   }
 
-  @Ignore
   @Test
   public void cyclicDependencySimpleProviderIndirectionWarningNotSuppressed_atDependencyRequest() {
     JavaFileObject component =
@@ -576,9 +570,8 @@ public void cyclicDependencySimpleProviderIndirectionWarningNotSuppressed_atDepe
         .that(component)
         .withCompilerOptions("-Xlint:-processing", "-Xlint:-rawtypes")
         .processedWith(new ComponentProcessor())
-        .compilesWithoutError();
-    // TODO(dpb): Enable when testing warnings is released.
-    //  .withWarningContaining("dependency cycle");
+        .compilesWithoutError()
+        .withWarningContaining("dependency cycle");
   }
 
   @Test public void duplicateExplicitBindings_ProvidesAndComponentProvision() {
diff --git a/pom.xml b/pom.xml
index 851aaea16..c2b1fd922 100644
--- a/pom.xml
+++ b/pom.xml
@@ -56,7 +56,7 @@
 
 
     <!-- Test Dependencies -->
-    <compile-testing.version>0.8</compile-testing.version>
+    <compile-testing.version>0.9</compile-testing.version>
     <junit.version>4.11</junit.version>
     <mockito.version>1.9.5</mockito.version>
     <truth.version>0.26</truth.version>
