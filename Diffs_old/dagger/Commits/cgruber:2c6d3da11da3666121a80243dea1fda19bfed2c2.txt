diff --git a/java/dagger/internal/codegen/ContributionBinding.java b/java/dagger/internal/codegen/ContributionBinding.java
index d8b94516b..ee18be5b7 100644
--- a/java/dagger/internal/codegen/ContributionBinding.java
+++ b/java/dagger/internal/codegen/ContributionBinding.java
@@ -183,16 +183,11 @@ boolean requiresModuleInstance() {
     return !modifiers.contains(ABSTRACT) && !modifiers.contains(STATIC);
   }
 
-  /**
-   * Returns {@code true} if {@link #bindingElement()} is present and is a method that returns a
-   * primitive type.
-   */
-  boolean contributesPrimitiveType() {
-    return bindingElement().isPresent()
-        && MoreElements.asExecutable(bindingElement().get())
-            .getReturnType()
-            .getKind()
-            .isPrimitive();
+  /** If {@link #bindingElement()} is a method that returns a primitive type, returns that type. */
+  Optional<TypeMirror> contributedPrimitiveType() {
+    return bindingElement()
+        .map(bindingElement -> MoreElements.asExecutable(bindingElement).getReturnType())
+        .filter(type -> type.getKind().isPrimitive());
   }
 
   /**
diff --git a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
index 1eb8fbb69..74494687c 100644
--- a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
@@ -16,7 +16,6 @@
 
 package dagger.internal.codegen;
 
-import static com.google.auto.common.MoreElements.asExecutable;
 import static com.google.common.base.CaseFormat.LOWER_CAMEL;
 import static com.google.common.base.CaseFormat.UPPER_CAMEL;
 import static com.google.common.base.CaseFormat.UPPER_UNDERSCORE;
@@ -173,9 +172,11 @@ private void createMethod(String name, DependencyRequest.Kind requestKind) {
 
   /** Returns the return type for the dependency request. */
   private TypeMirror returnType(DependencyRequest.Kind requestKind) {
-    return binding.contributesPrimitiveType() && requestKind.equals(DependencyRequest.Kind.INSTANCE)
-        ? asExecutable(binding.bindingElement().get()).getReturnType()
-        : accessibleType(requestKind.type(binding.contributedType(), types));
+    if (requestKind.equals(DependencyRequest.Kind.INSTANCE)
+        && binding.contributedPrimitiveType().isPresent()) {
+      return binding.contributedPrimitiveType().get();
+    }
+    return accessibleType(requestKind.type(binding.contributedType(), types));
   }
 
   /** Returns the method body for the dependency request. */
diff --git a/java/dagger/internal/codegen/ProvisionBinding.java b/java/dagger/internal/codegen/ProvisionBinding.java
index 466def54d..50b65fc8f 100644
--- a/java/dagger/internal/codegen/ProvisionBinding.java
+++ b/java/dagger/internal/codegen/ProvisionBinding.java
@@ -109,7 +109,7 @@ private static Builder builder() {
   abstract Builder toBuilder();
 
   boolean shouldCheckForNull(CompilerOptions compilerOptions) {
-    return !contributesPrimitiveType()
+    return !contributedPrimitiveType().isPresent()
         && !nullableType().isPresent()
         && compilerOptions.doCheckForNulls();
   }
