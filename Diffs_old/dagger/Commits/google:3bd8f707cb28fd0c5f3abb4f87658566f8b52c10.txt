diff --git a/java/dagger/android/AndroidInjection.java b/java/dagger/android/AndroidInjection.java
index 2f4fb4ca4..f3296c6cb 100644
--- a/java/dagger/android/AndroidInjection.java
+++ b/java/dagger/android/AndroidInjection.java
@@ -1,4 +1,4 @@
-  /*
+/*
  * Copyright (C) 2017 The Dagger Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -39,99 +39,71 @@
    * otherwise throws an {@link IllegalArgumentException}.
    *
    * @throws RuntimeException if the {@link Application} doesn't implement {@link
-   *     HasAndroidInjector} or {@link HasActivityInjector}.
+   *     HasAndroidInjector}.
    */
   public static void inject(Activity activity) {
     checkNotNull(activity, "activity");
     Application application = activity.getApplication();
-    AndroidInjector<? super Activity> injector;
-    if (application instanceof HasAndroidInjector) {
-      injector = ((HasAndroidInjector) application).androidInjector();
-      checkNotNull(injector, "%s.androidInjector() returned null", application.getClass());
-    } else if (application instanceof HasActivityInjector) {
-      injector = ((HasActivityInjector) application).activityInjector();
-      checkNotNull(injector, "%s.activityInjector() returned null", application.getClass());
-    } else {
+    if (!(application instanceof HasAndroidInjector)) {
       throw new RuntimeException(
           String.format(
-              "%s does not implement %s or %s",
+              "%s does not implement %s",
               application.getClass().getCanonicalName(),
-              HasAndroidInjector.class.getCanonicalName(),
-              HasActivityInjector.class.getCanonicalName()));
+              HasAndroidInjector.class.getCanonicalName()));
     }
 
-    injector.inject(activity);
+    inject(activity, (HasAndroidInjector) application);
   }
 
   /**
    * Injects {@code fragment} if an associated {@link AndroidInjector} implementation can be found,
    * otherwise throws an {@link IllegalArgumentException}.
    *
-   * <p>Uses the following algorithm to find the appropriate {@link AndroidInjector} to use to
-   * inject {@code fragment}:
+   * <p>Uses the following algorithm to find the appropriate {@code AndroidInjector<Fragment>} to
+   * use to inject {@code fragment}:
    *
    * <ol>
-   *   <li>Walks the parent-fragment hierarchy to find a fragment that implements {@link
-   *       HasAndroidInjector} or {@link HasFragmentInjector}, and if none do
+   *   <li>Walks the parent-fragment hierarchy to find the a fragment that implements {@link
+   *       HasAndroidInjector}, and if none do
    *   <li>Uses the {@code fragment}'s {@link Fragment#getActivity() activity} if it implements
-   *       {@link HasAndroidInjector} or {@link HasFragmentInjector}, and if not
-   *   <li>Uses the {@link android.app.Application} if it implements {@link HasAndroidInjector}
-   *       {@link HasFragmentInjector}.
+   *       {@link HasAndroidInjector}, and if not
+   *   <li>Uses the {@link android.app.Application} if it implements {@link HasAndroidInjector}.
    * </ol>
    *
-   * If none of them implement {@link HasAndroidInjector} or {@link HasFragmentInjector}, a {@link
-   * IllegalArgumentException} is thrown.
+   * If none of them implement {@link HasAndroidInjector}, a {@link IllegalArgumentException} is
+   * thrown.
    *
    * @throws IllegalArgumentException if no parent fragment, activity, or application implements
-   *     {@link HasAndroidInjector} or {@link HasFragmentInjector}.
+   *     {@link HasAndroidInjector}.
    */
   public static void inject(Fragment fragment) {
     checkNotNull(fragment, "fragment");
-
-    Object hasInjector = findHasFragmentInjector(fragment);
-    AndroidInjector<? super Fragment> injector;
-    if (hasInjector instanceof HasAndroidInjector) {
-      injector = ((HasAndroidInjector) hasInjector).androidInjector();
-      checkNotNull(injector, "%s.androidInjector() returned null", hasInjector.getClass());
-    } else if (hasInjector instanceof HasFragmentInjector) {
-      injector = ((HasFragmentInjector) hasInjector).fragmentInjector();
-      checkNotNull(injector, "%s.fragmentInjector() returned null", hasInjector.getClass());
-    } else {
-      throw new RuntimeException(
-          String.format(
-              "%s does not implement %s or %s",
-              hasInjector.getClass().getCanonicalName(),
-              HasAndroidInjector.class.getCanonicalName(),
-              HasFragmentInjector.class.getCanonicalName()));
-    }
-
+    HasAndroidInjector hasAndroidInjector = findHasAndroidInjectorForFragment(fragment);
     if (Log.isLoggable(TAG, DEBUG)) {
       Log.d(
           TAG,
           String.format(
               "An injector for %s was found in %s",
               fragment.getClass().getCanonicalName(),
-              hasInjector.getClass().getCanonicalName()));
+              hasAndroidInjector.getClass().getCanonicalName()));
     }
 
-    injector.inject(fragment);
+    inject(fragment, hasAndroidInjector);
   }
 
-  private static Object findHasFragmentInjector(Fragment fragment) {
+  private static HasAndroidInjector findHasAndroidInjectorForFragment(Fragment fragment) {
     Fragment parentFragment = fragment;
     while ((parentFragment = parentFragment.getParentFragment()) != null) {
-      if (parentFragment instanceof HasAndroidInjector
-          || parentFragment instanceof HasFragmentInjector) {
-        return parentFragment;
+      if (parentFragment instanceof HasAndroidInjector) {
+        return (HasAndroidInjector) parentFragment;
       }
     }
     Activity activity = fragment.getActivity();
-    if (activity instanceof HasAndroidInjector || activity instanceof HasFragmentInjector) {
-      return activity;
+    if (activity instanceof HasAndroidInjector) {
+      return (HasAndroidInjector) activity;
     }
-    Application application = activity.getApplication();
-    if (application instanceof HasAndroidInjector || application instanceof HasFragmentInjector) {
-      return application;
+    if (activity.getApplication() instanceof HasAndroidInjector) {
+      return (HasAndroidInjector) activity.getApplication();
     }
     throw new IllegalArgumentException(
         String.format("No injector was found for %s", fragment.getClass().getCanonicalName()));
@@ -142,28 +114,20 @@ private static Object findHasFragmentInjector(Fragment fragment) {
    * otherwise throws an {@link IllegalArgumentException}.
    *
    * @throws RuntimeException if the {@link Application} doesn't implement {@link
-   *     HasAndroidInjector} or {@link HasServiceInjector}.
+   *     HasAndroidInjector}.
    */
   public static void inject(Service service) {
     checkNotNull(service, "service");
     Application application = service.getApplication();
-    AndroidInjector<? super Service> injector;
-    if (application instanceof HasAndroidInjector) {
-      injector = ((HasAndroidInjector) application).androidInjector();
-      checkNotNull(injector, "%s.androidInjector() returned null", application.getClass());
-    } else if (application instanceof HasServiceInjector) {
-      injector = ((HasServiceInjector) application).serviceInjector();
-      checkNotNull(injector, "%s.serviceInjector() returned null", application.getClass());
-    } else {
+    if (!(application instanceof HasAndroidInjector)) {
       throw new RuntimeException(
           String.format(
-              "%s does not implement %s or %s",
+              "%s does not implement %s",
               application.getClass().getCanonicalName(),
-              HasAndroidInjector.class.getCanonicalName(),
-              HasServiceInjector.class.getCanonicalName()));
+              HasAndroidInjector.class.getCanonicalName()));
     }
 
-    injector.inject(service);
+    inject(service, (HasAndroidInjector) application);
   }
 
   /**
@@ -171,32 +135,21 @@ public static void inject(Service service) {
    * be found, otherwise throws an {@link IllegalArgumentException}.
    *
    * @throws RuntimeException if the {@link Application} from {@link
-   *     Context#getApplicationContext()} doesn't implement {@link HasAndroidInjector} or {@link
-   *     HasBroadcastReceiverInjector}.
+   *     Context#getApplicationContext()} doesn't implement {@link HasAndroidInjector}.
    */
   public static void inject(BroadcastReceiver broadcastReceiver, Context context) {
     checkNotNull(broadcastReceiver, "broadcastReceiver");
     checkNotNull(context, "context");
-
     Application application = (Application) context.getApplicationContext();
-    AndroidInjector<? super BroadcastReceiver> injector;
-    if (application instanceof HasAndroidInjector) {
-      injector = ((HasAndroidInjector) application).androidInjector();
-      checkNotNull(injector, "%s.androidInjector() returned null", application.getClass());
-    } else if (application instanceof HasBroadcastReceiverInjector) {
-      injector = ((HasBroadcastReceiverInjector) application).broadcastReceiverInjector();
-      checkNotNull(
-          injector, "%s.broadcastReceiverInjector() returned null", application.getClass());
-    } else {
+    if (!(application instanceof HasAndroidInjector)) {
       throw new RuntimeException(
           String.format(
-              "%s does not implement %s or %s",
+              "%s does not implement %s",
               application.getClass().getCanonicalName(),
-              HasAndroidInjector.class.getCanonicalName(),
-              HasBroadcastReceiverInjector.class.getCanonicalName()));
+              HasAndroidInjector.class.getCanonicalName()));
     }
 
-    injector.inject(broadcastReceiver);
+    inject(broadcastReceiver, (HasAndroidInjector) application);
   }
 
   /**
@@ -204,29 +157,28 @@ public static void inject(BroadcastReceiver broadcastReceiver, Context context)
    * found, otherwise throws an {@link IllegalArgumentException}.
    *
    * @throws RuntimeException if the {@link Application} doesn't implement {@link
-   *     HasAndroidInjector} or {@link HasContentProviderInjector}.
+   *     HasAndroidInjector}.
    */
   public static void inject(ContentProvider contentProvider) {
     checkNotNull(contentProvider, "contentProvider");
     Application application = (Application) contentProvider.getContext().getApplicationContext();
-
-    AndroidInjector<? super ContentProvider> injector;
-    if (application instanceof HasAndroidInjector) {
-      injector = ((HasAndroidInjector) application).androidInjector();
-      checkNotNull(injector, "%s.androidInjector() returned null", application.getClass());
-    } else if (application instanceof HasContentProviderInjector) {
-      injector = ((HasContentProviderInjector) application).contentProviderInjector();
-      checkNotNull(injector, "%s.contentProviderInjector() returned null", application.getClass());
-    } else {
+    if (!(application instanceof HasAndroidInjector)) {
       throw new RuntimeException(
           String.format(
-              "%s does not implement %s or %s",
+              "%s does not implement %s",
               application.getClass().getCanonicalName(),
-              HasAndroidInjector.class.getCanonicalName(),
-              HasBroadcastReceiverInjector.class.getCanonicalName()));
+              HasAndroidInjector.class.getCanonicalName()));
     }
 
-    injector.inject(contentProvider);
+    inject(contentProvider, (HasAndroidInjector) application);
+  }
+
+  private static void inject(Object target, HasAndroidInjector hasAndroidInjector) {
+    AndroidInjector<Object> androidInjector = hasAndroidInjector.androidInjector();
+    checkNotNull(
+        androidInjector, "%s.androidInjector() returned null", hasAndroidInjector.getClass());
+
+    androidInjector.inject(target);
   }
 
   private AndroidInjection() {}
diff --git a/java/dagger/android/HasActivityInjector.java b/java/dagger/android/HasActivityInjector.java
deleted file mode 100644
index 136bbad68..000000000
--- a/java/dagger/android/HasActivityInjector.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * Copyright (C) 2016 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.android;
-
-import android.app.Activity;
-import dagger.internal.Beta;
-
-/** Provides an {@link AndroidInjector} of {@link Activity}s. */
-@Beta
-public interface HasActivityInjector {
-
-  /** Returns an {@link AndroidInjector} of {@link Activity}s. */
-  AndroidInjector<Activity> activityInjector();
-}
diff --git a/java/dagger/android/HasBroadcastReceiverInjector.java b/java/dagger/android/HasBroadcastReceiverInjector.java
deleted file mode 100644
index b2aa99211..000000000
--- a/java/dagger/android/HasBroadcastReceiverInjector.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * Copyright (C) 2016 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.android;
-
-import android.content.BroadcastReceiver;
-import dagger.internal.Beta;
-
-/** Provides an {@link AndroidInjector} of {@link BroadcastReceiver}s. */
-@Beta
-public interface HasBroadcastReceiverInjector {
-
-  /** Returns an {@link AndroidInjector} of {@link BroadcastReceiver}s. */
-  AndroidInjector<BroadcastReceiver> broadcastReceiverInjector();
-}
diff --git a/java/dagger/android/HasContentProviderInjector.java b/java/dagger/android/HasContentProviderInjector.java
deleted file mode 100644
index 997ddb88c..000000000
--- a/java/dagger/android/HasContentProviderInjector.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * Copyright (C) 2016 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.android;
-
-import android.content.ContentProvider;
-import dagger.internal.Beta;
-
-/** Provides an {@link AndroidInjector} of {@link ContentProvider}s. */
-@Beta
-public interface HasContentProviderInjector {
-
-  /** Returns an {@link AndroidInjector} of {@link ContentProvider}s. */
-  AndroidInjector<ContentProvider> contentProviderInjector();
-}
diff --git a/java/dagger/android/HasFragmentInjector.java b/java/dagger/android/HasFragmentInjector.java
deleted file mode 100644
index 564f32d5d..000000000
--- a/java/dagger/android/HasFragmentInjector.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * Copyright (C) 2016 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.android;
-
-import android.app.Fragment;
-import dagger.internal.Beta;
-
-/** Provides an {@link AndroidInjector} of {@link Fragment}s. */
-@Beta
-public interface HasFragmentInjector {
-
-  /** Returns an {@link AndroidInjector} of {@link Fragment}s. */
-  AndroidInjector<Fragment> fragmentInjector();
-}
diff --git a/java/dagger/android/HasServiceInjector.java b/java/dagger/android/HasServiceInjector.java
deleted file mode 100644
index d1c6a6c2a..000000000
--- a/java/dagger/android/HasServiceInjector.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * Copyright (C) 2016 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.android;
-
-import android.app.Service;
-import dagger.internal.Beta;
-
-/** Provides an {@link AndroidInjector} of {@link Service}s. */
-@Beta
-public interface HasServiceInjector {
-
-  /** Returns an {@link AndroidInjector} of {@link Service}s. */
-  AndroidInjector<Service> serviceInjector();
-}
diff --git a/java/dagger/android/support/AndroidSupportInjection.java b/java/dagger/android/support/AndroidSupportInjection.java
index 1624345a1..a02937486 100644
--- a/java/dagger/android/support/AndroidSupportInjection.java
+++ b/java/dagger/android/support/AndroidSupportInjection.java
@@ -20,7 +20,6 @@
 import static dagger.internal.Preconditions.checkNotNull;
 
 import android.app.Activity;
-import android.app.Application;
 import android.support.v4.app.Fragment;
 import android.util.Log;
 import dagger.android.AndroidInjector;
@@ -36,76 +35,63 @@
    * Injects {@code fragment} if an associated {@link AndroidInjector} implementation can be found,
    * otherwise throws an {@link IllegalArgumentException}.
    *
-   * <p>Uses the following algorithm to find the appropriate {@link AndroidInjector} to use to
-   * inject {@code fragment}:
+   * <p>Uses the following algorithm to find the appropriate {@code AndroidInjector<Fragment>} to
+   * use to inject {@code fragment}:
    *
    * <ol>
-   *   <li>Walks the parent-fragment hierarchy to find a fragment that implements {@link
-   *       HasAndroidInjector} or {@link HasSupportFragmentInjector}, and if none do
+   *   <li>Walks the parent-fragment hierarchy to find the a fragment that implements {@link
+   *       HasAndroidInjector}, and if none do
    *   <li>Uses the {@code fragment}'s {@link Fragment#getActivity() activity} if it implements
-   *       {@link HasAndroidInjector} or {@link HasSupportFragmentInjector}, and if not
-   *   <li>Uses the {@link android.app.Application} if it implements {@link HasAndroidInjector}
-   *       {@link HasSupportFragmentInjector}.
+   *       {@link HasAndroidInjector}, and if not
+   *   <li>Uses the {@link android.app.Application} if it implements {@link HasAndroidInjector}.
    * </ol>
    *
-   * If none of them implement {@link HasAndroidInjector} or {@link HasSupportFragmentInjector}, a
-   * {@link IllegalArgumentException} is thrown.
+   * If none of them implement {@link HasAndroidInjector}, a {@link IllegalArgumentException} is
+   * thrown.
    *
    * @throws IllegalArgumentException if no parent fragment, activity, or application implements
-   *     {@link HasAndroidInjector} or {@link HasSupportFragmentInjector}.
+   *     {@link HasAndroidInjector}.
    */
   public static void inject(Fragment fragment) {
     checkNotNull(fragment, "fragment");
-
-    Object hasInjector = findHasSupportFragmentInjector(fragment);
-    AndroidInjector<? super Fragment> injector;
-    if (hasInjector instanceof HasAndroidInjector) {
-      injector = ((HasAndroidInjector) hasInjector).androidInjector();
-      checkNotNull(injector, "%s.androidInjector() returned null", hasInjector.getClass());
-    } else if (hasInjector instanceof HasSupportFragmentInjector) {
-      injector = ((HasSupportFragmentInjector) hasInjector).supportFragmentInjector();
-      checkNotNull(injector, "%s.supportFragmentInjector() returned null", hasInjector.getClass());
-    } else {
-      throw new RuntimeException(
-          String.format(
-              "%s does not implement %s or %s",
-              hasInjector.getClass().getCanonicalName(),
-              HasAndroidInjector.class.getCanonicalName(),
-              HasSupportFragmentInjector.class.getCanonicalName()));
-    }
-
+    HasAndroidInjector hasAndroidInjector = findHasAndroidInjectorForFragment(fragment);
     if (Log.isLoggable(TAG, DEBUG)) {
       Log.d(
           TAG,
           String.format(
               "An injector for %s was found in %s",
               fragment.getClass().getCanonicalName(),
-              hasInjector.getClass().getCanonicalName()));
+              hasAndroidInjector.getClass().getCanonicalName()));
     }
 
-    injector.inject(fragment);
+    inject(fragment, hasAndroidInjector);
   }
 
-  private static Object findHasSupportFragmentInjector(Fragment fragment) {
+  private static HasAndroidInjector findHasAndroidInjectorForFragment(Fragment fragment) {
     Fragment parentFragment = fragment;
     while ((parentFragment = parentFragment.getParentFragment()) != null) {
-      if (parentFragment instanceof HasAndroidInjector
-          || parentFragment instanceof HasSupportFragmentInjector) {
-        return parentFragment;
+      if (parentFragment instanceof HasAndroidInjector) {
+        return (HasAndroidInjector) parentFragment;
       }
     }
     Activity activity = fragment.getActivity();
-    if (activity instanceof HasAndroidInjector || activity instanceof HasSupportFragmentInjector) {
-      return activity;
+    if (activity instanceof HasAndroidInjector) {
+      return (HasAndroidInjector) activity;
     }
-    Application application = activity.getApplication();
-    if (application instanceof HasAndroidInjector
-        || application instanceof HasSupportFragmentInjector) {
-      return application;
+    if (activity.getApplication() instanceof HasAndroidInjector) {
+      return (HasAndroidInjector) activity.getApplication();
     }
     throw new IllegalArgumentException(
         String.format("No injector was found for %s", fragment.getClass().getCanonicalName()));
   }
 
+  private static void inject(Object target, HasAndroidInjector hasAndroidInjector) {
+    AndroidInjector<Object> androidInjector = hasAndroidInjector.androidInjector();
+    checkNotNull(
+        androidInjector, "%s.androidInjector() returned null", hasAndroidInjector.getClass());
+
+    androidInjector.inject(target);
+  }
+
   private AndroidSupportInjection() {}
 }
diff --git a/java/dagger/android/support/HasSupportFragmentInjector.java b/java/dagger/android/support/HasSupportFragmentInjector.java
deleted file mode 100644
index e80609ec5..000000000
--- a/java/dagger/android/support/HasSupportFragmentInjector.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * Copyright (C) 2017 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.android.support;
-
-import android.support.v4.app.Fragment;
-import dagger.android.AndroidInjector;
-import dagger.internal.Beta;
-
-/** Provides an {@link AndroidInjector} of {@link Fragment}s. */
-@Beta
-public interface HasSupportFragmentInjector {
-
-  /** Returns an {@link AndroidInjector} of {@link Fragment}s. */
-  AndroidInjector<Fragment> supportFragmentInjector();
-}
diff --git a/javatests/dagger/android/AndroidInjectionTest.java b/javatests/dagger/android/AndroidInjectionTest.java
index a175ada0b..fb14f0f9a 100644
--- a/javatests/dagger/android/AndroidInjectionTest.java
+++ b/javatests/dagger/android/AndroidInjectionTest.java
@@ -38,7 +38,7 @@
     String tag;
   }
 
-  private static AndroidInjector<Fragment> fakeFragmentInjector(String tag) {
+  private static AndroidInjector<Object> fakeFragmentInjector(String tag) {
     return instance -> {
       if (instance instanceof InjectableFragment) {
         ((InjectableFragment) instance).tag = tag;
@@ -46,10 +46,9 @@
     };
   }
 
-  public static class ApplicationInjectsFragment extends Application
-      implements HasFragmentInjector {
+  public static class ApplicationInjectsFragment extends Application implements HasAndroidInjector {
     @Override
-    public AndroidInjector<Fragment> fragmentInjector() {
+    public AndroidInjector<Object> androidInjector() {
       return fakeFragmentInjector("injected by app");
     }
   }
@@ -66,9 +65,9 @@ public void fragmentInjectedByApplication() {
     assertThat(fragment.tag).isEqualTo("injected by app");
   }
 
-  public static class ActivityInjectsFragment extends Activity implements HasFragmentInjector {
+  public static class ActivityInjectsFragment extends Activity implements HasAndroidInjector {
     @Override
-    public AndroidInjector<Fragment> fragmentInjector() {
+    public AndroidInjector<Object> androidInjector() {
       return fakeFragmentInjector("injected by activity");
     }
   }
@@ -86,9 +85,9 @@ public void fragmentInjectedByActivity() {
   }
 
   public static class ParentFragmentInjectsChildFragment extends Fragment
-      implements HasFragmentInjector {
+      implements HasAndroidInjector {
     @Override
-    public AndroidInjector<Fragment> fragmentInjector() {
+    public AndroidInjector<Object> androidInjector() {
       return fakeFragmentInjector("injected by parent fragment");
     }
   }
@@ -112,7 +111,7 @@ public void fragmentInjectedByParentFragment() {
   }
 
   @Test
-  public void injectActivity_applicationDoesntImplementHasActivityInjector() {
+  public void injectActivity_applicationDoesntImplementHasAndroidInjector() {
     Activity activity = Robolectric.setupActivity(Activity.class);
 
     try {
@@ -138,15 +137,9 @@ public void injectFragment_hasFragmentInjectorNotFound() {
     }
   }
 
-  private static class ApplicationReturnsNull extends Application
-      implements HasActivityInjector, HasFragmentInjector {
+  private static class ApplicationReturnsNull extends Application implements HasAndroidInjector {
     @Override
-    public AndroidInjector<Activity> activityInjector() {
-      return null;
-    }
-
-    @Override
-    public AndroidInjector<Fragment> fragmentInjector() {
+    public AndroidInjector<Object> androidInjector() {
       return null;
     }
   }
@@ -160,7 +153,7 @@ public void activityInjector_returnsNull() {
       AndroidInjection.inject(activity);
       fail();
     } catch (Exception e) {
-      assertThat(e).hasMessageThat().contains("activityInjector() returned null");
+      assertThat(e).hasMessageThat().contains("androidInjector() returned null");
     }
   }
 
@@ -174,7 +167,7 @@ public void fragmentInjector_returnsNull() {
       AndroidInjection.inject(fragment);
       fail();
     } catch (Exception e) {
-      assertThat(e).hasMessageThat().contains("fragmentInjector() returned null");
+      assertThat(e).hasMessageThat().contains("androidInjector() returned null");
     }
   }
 
diff --git a/javatests/dagger/android/support/AndroidSupportInjectionTest.java b/javatests/dagger/android/support/AndroidSupportInjectionTest.java
index 5deed63fa..25cc6df94 100644
--- a/javatests/dagger/android/support/AndroidSupportInjectionTest.java
+++ b/javatests/dagger/android/support/AndroidSupportInjectionTest.java
@@ -22,6 +22,7 @@
 import android.app.Application;
 import android.support.v4.app.Fragment;
 import dagger.android.AndroidInjector;
+import dagger.android.HasAndroidInjector;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
@@ -44,9 +45,9 @@ public void injectFragment_simpleApplication() {
   }
 
   private static class ApplicationReturnsNull extends Application
-      implements HasSupportFragmentInjector {
+      implements HasAndroidInjector {
     @Override
-    public AndroidInjector<Fragment> supportFragmentInjector() {
+    public AndroidInjector<Object> androidInjector() {
       return null;
     }
   }
@@ -61,7 +62,7 @@ public void fragmentInjector_returnsNull() {
       AndroidSupportInjection.inject(fragment);
       fail();
     } catch (Exception e) {
-      assertThat(e).hasMessageThat().contains("supportFragmentInjector() returned null");
+      assertThat(e).hasMessageThat().contains("androidInjector() returned null");
     }
   }
 
