diff --git a/android-testcase/src/main/java/dagger/android/testcase/DaggerActivityTestRule.java b/android-testcase/src/main/java/dagger/android/testcase/DaggerActivityTestRule.java
index a2407350e..ffaae8821 100644
--- a/android-testcase/src/main/java/dagger/android/testcase/DaggerActivityTestRule.java
+++ b/android-testcase/src/main/java/dagger/android/testcase/DaggerActivityTestRule.java
@@ -17,6 +17,7 @@
 {
 
     private static final String TAG = "ActivityTestRule";
+    private static final String DECORATOR_FIELD_PARTNAME = "decorator";
 
     private final Class<T> mActivityClass;
     private Instrumentation mInstrumentation;
@@ -63,22 +64,8 @@ protected Intent getActivityIntent()
      */
     protected void beforeActivityLaunched()
     {
-        // empty by default
-        try
-        {
-            apply(new Statement()
-            {
-                @Override
-                public void evaluate() throws Throwable
-                {
-                    Application application = getApplication();
-                    application.onCreate();
-                }
-            }, Description.EMPTY).evaluate();
-        } catch (Throwable throwable)
-        {
-            throwable.printStackTrace();
-        }
+        Application application = getApplication();
+        application.onCreate();
     }
 
     private Application getApplication()
@@ -137,11 +124,11 @@ private void resetFields(Application app, Class<?> clazz) throws Exception{
         for (Field f : declaredFields){
             try {
                 String name = f.getName().toLowerCase();
-                if (!name.contains("decorator") && !f.getType().isPrimitive())
+                if (!name.contains(DECORATOR_FIELD_PARTNAME) && !f.getType().isPrimitive())
                 {
                     f.setAccessible(true);
                     f.set(app, null);
-                }else if (name.contains("decorator")) {
+                }else if (name.contains(DECORATOR_FIELD_PARTNAME)) {
                     Object newDecoratorInstance = f.getType().getConstructors()[0].newInstance(app);
                     f.setAccessible(true);
                     f.set(app, newDecoratorInstance);
diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index 5a25f1b73..bdc325fc9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -155,7 +155,6 @@
   private final Map<BindingKey, MemberSelect> memberSelects = new HashMap<>();
   private final Map<BindingKey, MemberSelect> producerFromProviderMemberSelects = new HashMap<>();
   private final RequestFulfillmentRegistry requestFulfillmentRegistry;
-  protected TypeMirror application;
   protected final MethodSpec.Builder constructor = constructorBuilder().addModifiers(PRIVATE);
   protected Optional<ClassName> builderName = Optional.empty();
   private Map<Key, String> delegateFieldNames = new HashMap<>();
@@ -192,8 +191,7 @@
       ClassName name,
       BindingGraph graph,
       ImmutableMap<ComponentDescriptor, String> subcomponentNames,
-      OptionalFactories optionalFactories,
-      TypeMirror application) {
+      OptionalFactories optionalFactories) {
     this.types = types;
     this.elements = elements;
     this.keyFactory = keyFactory;
@@ -205,7 +203,6 @@
     this.optionalFactories = optionalFactories;
     this.requestFulfillmentRegistry =
         new RequestFulfillmentRegistry(graph.resolvedBindings(), this);
-    this.application = application;
   }
 
   protected AbstractComponentWriter(
@@ -218,8 +215,7 @@ protected AbstractComponentWriter(
         name,
         graph,
         parent.subcomponentNames,
-        parent.optionalFactories,
-        parent.application
+        parent.optionalFactories
     );
   }
 
@@ -1230,7 +1226,7 @@ private CodeBlock initializeFactoryForContributionBinding(ContributionBinding bi
 
       case SUBCOMPONENT_BUILDER:
 
-        final CodeBlock expression = getMemberSelectExpression(BindingKey.contribution(Key.builder(application).build()));
+        final CodeBlock expression = getMemberSelectExpression(BindingKey.contribution(Key.builder(graph.application().get()).build()));
 
         String subcomponentName =
             subcomponentNames.get(
diff --git a/compiler/src/main/java/dagger/internal/codegen/AppConfig.java b/compiler/src/main/java/dagger/internal/codegen/AppConfig.java
index f396cc8f7..46d206095 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AppConfig.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AppConfig.java
@@ -17,10 +17,12 @@
 
     private final TypeElement appClass;
     private final TypeElement baseAppClass;
+    private boolean debug;
 
-    public AppConfig(TypeElement appClass, TypeElement baseAppClass) {
+    public AppConfig(TypeElement appClass, TypeElement baseAppClass, boolean debug) {
         this.appClass = appClass;
         this.baseAppClass = baseAppClass;
+        this.debug = debug;
     }
 
     public TypeElement getAppClass() {
@@ -31,6 +33,10 @@ public TypeElement getBaseAppClass() {
         return baseAppClass;
     }
 
+    public boolean debug() {
+        return this.debug;
+    }
+
     static class Factory {
 
         private Elements elements;
@@ -42,7 +48,8 @@ public TypeElement getBaseAppClass() {
         public AppConfig create(Config config) {
             final TypeElement appClass = extractAppClassElement(config);
             final TypeElement baseAppClass = extractBaseAppClassElement(config);
-            return new AppConfig(appClass, baseAppClass);
+            boolean debug = config.debug();
+            return new AppConfig(appClass, baseAppClass, debug);
         }
 
         private TypeElement extractAppClassElement(Config config) {
@@ -66,6 +73,22 @@ private TypeElement extractBaseAppClassElement(Config config) {
         }
     }
 
+    static class Provider {
+        private AppConfig appConfig;
+
+        public void set(AppConfig appConfig) {
+            this.appConfig = appConfig;
+        }
+
+        public AppConfig get() {
+            return appConfig;
+        }
+
+        public boolean isSet() {
+            return appConfig != null;
+        }
+    }
+
     static class Validator {
 
         private final Elements elements;
diff --git a/compiler/src/main/java/dagger/internal/codegen/AppConfigProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/AppConfigProcessingStep.java
index 2ec191061..98decd435 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AppConfigProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AppConfigProcessingStep.java
@@ -1,32 +1,29 @@
 package dagger.internal.codegen;
 
-import com.google.auto.common.BasicAnnotationProcessor;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.SetMultimap;
 import dagger.Config;
 
 import javax.annotation.processing.Messager;
 import javax.lang.model.element.Element;
-import javax.lang.model.util.Elements;
-import javax.lang.model.util.Types;
 import java.lang.annotation.Annotation;
 import java.util.Set;
 
-/**
- * Created by Andy on 26.05.2017.
- */
 public class AppConfigProcessingStep implements BasicProcessor.ProcessingStep {
 
     private final Messager messager;
-    private final Elements elements;
-    private final Types types;
     private AppConfig.Validator validator;
+    private AppConfig.Factory factory;
+    private AppConfig.Provider appConfigProvider;
 
-    public AppConfigProcessingStep(Messager messager, Elements elements, Types types, AppConfig.Validator validator) {
+    public AppConfigProcessingStep(Messager messager,
+                                   AppConfig.Validator validator,
+                                   AppConfig.Factory factory,
+                                   AppConfig.Provider appConfigProvider) {
         this.messager = messager;
-        this.elements = elements;
-        this.types = types;
         this.validator = validator;
+        this.factory = factory;
+        this.appConfigProvider = appConfigProvider;
     }
 
     @Override
@@ -36,8 +33,22 @@ public AppConfigProcessingStep(Messager messager, Elements elements, Types types
 
     @Override
     public Set<Element> process(SetMultimap<Class<? extends Annotation>, Element> set, boolean anyElementsRejected) {
+
+        if (appConfigProvider.isSet()) {
+            return ImmutableSet.of();
+        }
+
         final Set<Element> elements = set.get(Config.class);
-        validator.validate(elements).printMessagesTo(messager);
+        final ValidationReport<Element> report = validator.validate(elements);
+        if (!report.isClean()) {
+            report.printMessagesTo(messager);
+        }else {
+            if (!elements.isEmpty()) {
+                final Element element = elements.iterator().next();
+                appConfigProvider.set(factory.create(element.getAnnotation(Config.class)));
+            }
+        }
+
         return ImmutableSet.of();
     }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ApplicationGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ApplicationGenerator.java
index a170f7a79..19ddab7f1 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ApplicationGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ApplicationGenerator.java
@@ -52,7 +52,7 @@ ClassName nameGeneratedType(DI input) {
         //builder.addField(TYPENAME_INJECTOR, FIELDNAME_INJECTOR, Modifier.PRIVATE);
 
         for (TypeElement component : components) {
-            final List<SpecComponentInfo> infos = ComponentInfo.forSpec(component, componentDescriptorFactory, bindingGraphFactory, di.getAppClass().asType());
+            final List<SpecComponentInfo> infos = ComponentInfo.forSpec(component, componentDescriptorFactory, bindingGraphFactory);
             final List<MethodSpec.Builder> methodBuilders = infos.stream()
                     .flatMap(info -> info.getMethods().stream())
                     .collect(Collectors.toList());
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index 5f1e84fcb..efd5b4499 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -33,14 +33,18 @@
 import static java.util.function.Predicate.isEqual;
 import static javax.lang.model.element.Modifier.ABSTRACT;
 
+import com.google.auto.common.AnnotationMirrors;
+import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
 import com.google.auto.value.AutoValue;
 import com.google.auto.value.extension.memoized.Memoized;
+import com.google.common.base.Equivalence;
 import com.google.common.base.Predicate;
 import com.google.common.base.VerifyException;
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
 import com.google.common.collect.*;
+import com.sun.tools.internal.ws.processor.modeler.annotation.WrapperInfo;
 import dagger.Reusable;
 import dagger.Subcomponent;
 import dagger.internal.codegen.ComponentDescriptor.BuilderRequirementMethod;
@@ -59,6 +63,7 @@
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
+import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.ElementFilter;
 import javax.lang.model.util.Elements;
@@ -73,6 +78,7 @@
   abstract ComponentDescriptor componentDescriptor();
   abstract ImmutableMap<BindingKey, ResolvedBindings> resolvedBindings();
   abstract ImmutableSet<BindingGraph> subgraphs();
+  abstract Equivalence.Wrapper<TypeMirror> application();
 
   /** Returns the resolved bindings for the dependencies of {@code binding}. */
   ImmutableSet<ResolvedBindings> resolvedDependencies(ContributionBinding binding) {
@@ -219,23 +225,26 @@ TypeElement componentType() {
     private final Key.Factory keyFactory;
     private final ProvisionBinding.Factory provisionBindingFactory;
     private final ProductionBinding.Factory productionBindingFactory;
+    private AppConfig.Provider appConfigProvider;
     private TypeMirror application;
 
     Factory(
-        Elements elements,
-        InjectBindingRegistry injectBindingRegistry,
-        Key.Factory keyFactory,
-        ProvisionBinding.Factory provisionBindingFactory,
-        ProductionBinding.Factory productionBindingFactory) {
+            Elements elements,
+            InjectBindingRegistry injectBindingRegistry,
+            Key.Factory keyFactory,
+            ProvisionBinding.Factory provisionBindingFactory,
+            ProductionBinding.Factory productionBindingFactory,
+            AppConfig.Provider appConfigProvider) {
       this.elements = elements;
       this.injectBindingRegistry = injectBindingRegistry;
       this.keyFactory = keyFactory;
       this.provisionBindingFactory = provisionBindingFactory;
       this.productionBindingFactory = productionBindingFactory;
+      this.appConfigProvider = appConfigProvider;
     }
 
-    BindingGraph create(ComponentDescriptor componentDescriptor, TypeMirror application) {
-      this.application = application;
+    BindingGraph create(ComponentDescriptor componentDescriptor) {
+      this.application = appConfigProvider.get().getAppClass().asType();
       return create(Optional.empty(), componentDescriptor);
     }
 
@@ -376,6 +385,7 @@ private BindingGraph create(Optional<Resolver> parentResolver, ComponentDescript
           componentDescriptor,
           requestResolver.getResolvedBindings(),
           subgraphs.build(),
+          MoreTypes.equivalence().wrap(application),
           requestResolver.getOwnedModules());
     }
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 2964a6115..8ee5e6bce 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -38,21 +38,18 @@
   private final Elements elements;
   private final Key.Factory keyFactory;
   private final CompilerOptions compilerOptions;
-  private TypeMirror applicationClassName;
 
   private ComponentGenerator(
           Filer filer,
           Elements elements,
           Types types,
           Key.Factory keyFactory,
-          CompilerOptions compilerOptions,
-          TypeMirror applicationClassName) {
+          CompilerOptions compilerOptions) {
     super(filer, elements);
     this.types = types;
     this.elements = elements;
     this.keyFactory = keyFactory;
     this.compilerOptions = compilerOptions;
-    this.applicationClassName = applicationClassName;
   }
 
   public static class Factory {
@@ -69,8 +66,8 @@ public Factory(Filer filer, Elements elements, Types types, Key.Factory keyFacto
       this.keyFactory = keyFactory;
       this.compilerOptions = compilerOptions;
     }
-    public ComponentGenerator createComponentGenerator(TypeMirror applicationClassName) {
-      return new ComponentGenerator(filer, elements, types, keyFactory, compilerOptions, applicationClassName);
+    public ComponentGenerator createComponentGenerator() {
+      return new ComponentGenerator(filer, elements, types, keyFactory, compilerOptions);
     }
   }
 
@@ -88,7 +85,7 @@ ClassName nameGeneratedType(BindingGraph input) {
   @Override
   Optional<TypeSpec.Builder> write(ClassName componentName, BindingGraph input) {
     return Optional.of(
-        new ComponentWriter(types, elements, keyFactory, compilerOptions, componentName, input, applicationClassName)
-            .write());
+        new ComponentWriter(types, elements, keyFactory, compilerOptions, componentName, input).write()
+    );
   }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentInfo.java b/compiler/src/main/java/dagger/internal/codegen/ComponentInfo.java
index d388c82a3..1209c126e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentInfo.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentInfo.java
@@ -26,9 +26,8 @@
 
     public static List<SpecComponentInfo> forSpec(TypeElement component,
                                                   ComponentDescriptor.Factory componentDescriptorFactory,
-                                                  BindingGraph.Factory bindingGraphFactory,
-                                                  TypeMirror application) {
-        return createSpecComponentInfo(component, componentDescriptorFactory, bindingGraphFactory, application)
+                                                  BindingGraph.Factory bindingGraphFactory) {
+        return createSpecComponentInfo(component, componentDescriptorFactory, bindingGraphFactory)
                 .stream()
                 .distinct()
                 .collect(Collectors.toList());
@@ -36,9 +35,8 @@
 
     public static List<GeneratorComponentInfo> forGenerator(TypeElement component,
                                                             ComponentDescriptor.Factory componentDescriptorFactory,
-                                                            BindingGraph.Factory bindingGraphFactory,
-                                                            TypeMirror application) {
-        return createGeneratorComponentInfo(component, componentDescriptorFactory, bindingGraphFactory, application)
+                                                            BindingGraph.Factory bindingGraphFactory) {
+        return createGeneratorComponentInfo(component, componentDescriptorFactory, bindingGraphFactory)
                 .stream()
                 .distinct()
                 .collect(Collectors.toList());
@@ -46,9 +44,8 @@
 
     public static List<TriggerComponentInfo> forTrigger(TypeElement component,
                                                         ComponentDescriptor.Factory componentDescriptorFactory,
-                                                        BindingGraph.Factory bindingGraphFactory,
-                                                        TypeMirror application) {
-        return createTriggerComponentInfo(component, componentDescriptorFactory, bindingGraphFactory, application)
+                                                        BindingGraph.Factory bindingGraphFactory) {
+        return createTriggerComponentInfo(component, componentDescriptorFactory, bindingGraphFactory)
                 .stream()
                 .distinct()
                 .collect(Collectors.toList());
@@ -56,11 +53,10 @@
 
     private static List<TriggerComponentInfo> createTriggerComponentInfo(TypeElement component,
                                                             ComponentDescriptor.Factory componentDescriptorFactory,
-                                                            BindingGraph.Factory bindingGraphFactory,
-                                                            TypeMirror application) {
+                                                            BindingGraph.Factory bindingGraphFactory) {
         List<TriggerComponentInfo> infos = new ArrayList<>();
         final ComponentDescriptor descriptor = componentDescriptorFactory.forComponent(component);
-        final BindingGraph bindingGraph = bindingGraphFactory.create(descriptor, application);
+        final BindingGraph bindingGraph = bindingGraphFactory.create(descriptor);
         final TriggerComponentInfo componentInfo = new TriggerComponentInfo(component, descriptor, bindingGraph);
         infos.add(componentInfo);
         for (BindingGraph subGraph : bindingGraph.subgraphs()) {
@@ -84,11 +80,10 @@
 
     private static List<SpecComponentInfo> createSpecComponentInfo(TypeElement component,
                                                          ComponentDescriptor.Factory componentDescriptorFactory,
-                                                         BindingGraph.Factory bindingGraphFactory,
-                                                         TypeMirror application) {
+                                                         BindingGraph.Factory bindingGraphFactory) {
         List<SpecComponentInfo> infos = new ArrayList<>();
         final ComponentDescriptor descriptor = componentDescriptorFactory.forComponent(component);
-        final BindingGraph bindingGraph = bindingGraphFactory.create(descriptor, application);
+        final BindingGraph bindingGraph = bindingGraphFactory.create(descriptor);
         infos.add(new SpecComponentInfo(component, descriptor, bindingGraph));
         for (BindingGraph graph : bindingGraph.subgraphs()) {
             infos.addAll(createSpecSubcomponentInfo(graph.componentDescriptor(), graph));
@@ -108,11 +103,10 @@
 
     private static List<GeneratorComponentInfo> createGeneratorComponentInfo(TypeElement component,
                                                                              ComponentDescriptor.Factory componentDescriptorFactory,
-                                                                             BindingGraph.Factory bindingGraphFactory,
-                                                                             TypeMirror application) {
+                                                                             BindingGraph.Factory bindingGraphFactory) {
         List<GeneratorComponentInfo> infos = new ArrayList<>();
         final ComponentDescriptor descriptor = componentDescriptorFactory.forComponent(component);
-        final BindingGraph bindingGraph = bindingGraphFactory.create(descriptor, application);
+        final BindingGraph bindingGraph = bindingGraphFactory.create(descriptor);
         infos.add(new GeneratorComponentInfo(component, descriptor, bindingGraph));
         for (BindingGraph subGraph : bindingGraph.subgraphs()) {
             infos.addAll(createGeneratorSubcomponentInfo(subGraph.componentDescriptor(), subGraph));
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java
index 7c018f411..c2c4f0bf7 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -58,13 +58,6 @@
   private final BindingGraph.Factory bindingGraphFactory;
   private final ComponentGenerator.Factory componentGeneratorFactory;
 
-  public static Set<TypeElement> allComponents = new HashSet<>();
-  public static TypeElement appClass;
-
-  public static boolean generatedAllComponents = true;
-  private final AppConfig.Factory appConfigFactory;
-  private static AppConfig appConfig;
-
   ComponentProcessingStep(
       ComponentDescriptor.Kind componentKind,
       Messager messager,
@@ -75,8 +68,7 @@
       BindingGraphValidator bindingGraphValidator,
       Factory componentDescriptorFactory,
       BindingGraph.Factory bindingGraphFactory,
-      ComponentGenerator.Factory componentGeneratorFactory,
-      AppConfig.Factory appConfigFactory) {
+      ComponentGenerator.Factory componentGeneratorFactory) {
     this.componentKind = componentKind;
     this.messager = messager;
     this.componentValidator = componentValidator;
@@ -87,13 +79,11 @@
     this.componentDescriptorFactory = componentDescriptorFactory;
     this.bindingGraphFactory = bindingGraphFactory;
     this.componentGeneratorFactory = componentGeneratorFactory;
-    this.appConfigFactory = appConfigFactory;
   }
 
   @Override
   public Set<Class<? extends Annotation>> annotations() {
     return ImmutableSet.of(
-        Config.class,
         Component.class,
         Component.Builder.class,
         ProductionComponent.class,
@@ -108,18 +98,6 @@
   public final ImmutableSet<Element> process(
       SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation, boolean anyElementsRejected) {
 
-    if (appClass == null) {
-      final Set<Element> elements = elementsByAnnotation.get(Config.class);
-      if (!elements.isEmpty()) {
-        final Iterator<Element> it = elements.iterator();
-        if (it.hasNext()) {
-          final Element e = it.next();
-          appConfig = appConfigFactory.create(e.getAnnotation(Config.class));
-          appClass = MoreElements.asType(e);
-        }
-      }
-    }
-
     ImmutableSet.Builder<Element> rejectedElements = ImmutableSet.builder();
 
     Map<Element, ValidationReport<TypeElement>> builderReportsByComponent =
@@ -161,7 +139,7 @@
               componentHierarchyValidator.validate(componentDescriptor);
           hierarchyReport.printMessagesTo(messager);
           if (hierarchyReport.isClean()) {
-            BindingGraph bindingGraph = bindingGraphFactory.create(componentDescriptor, appConfig.getAppClass().asType());
+            BindingGraph bindingGraph = bindingGraphFactory.create(componentDescriptor);
             ValidationReport<TypeElement> graphReport =
                 bindingGraphValidator.validate(bindingGraph);
             graphReport.printMessagesTo(messager);
@@ -170,7 +148,6 @@
             }
           }
         }
-        allComponents.add(componentTypeElement);
       } catch (TypeNotPresentException e) {
         rejectedElements.add(componentTypeElement);
       }
@@ -178,17 +155,11 @@
 
     final ImmutableSet<Element> failedElements = rejectedElements.build();
 
-    if (elements.isEmpty() && failedElements.isEmpty()) {
-      generatedAllComponents = true;
-    }
-
     return failedElements;
   }
 
   private void generateComponent(BindingGraph bindingGraph) {
-    final AppConfig appConfig = appConfigFactory.create(appClass.getAnnotation(Config.class));
-    final TypeMirror appClass = appConfig.getAppClass().asType();
-    componentGeneratorFactory.createComponentGenerator(appClass).generate(bindingGraph, messager);
+    componentGeneratorFactory.createComponentGenerator().generate(bindingGraph, messager);
   }
 
   private ImmutableSet<Element> getElementsFromAnnotations(
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index 608b8e0af..66ca845f5 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -52,6 +52,7 @@
   private MultipleSourceFileGenerator<ProvisionBinding> multipleGenerator;
   private InjectBindingRegistry injectBindingRegistry;
   private MembersInjectorGenerator membersInjectorGenerator;
+  private AppConfig.Provider appConfigProvider;
 
   @Override
   public SourceVersion getSupportedSourceVersion() {
@@ -166,12 +167,15 @@ public SourceVersion getSupportedSourceVersion() {
     ComponentDescriptor.Factory componentDescriptorFactory = new ComponentDescriptor.Factory(
             elements, types, dependencyRequestFactory, moduleDescriptorFactory);
 
+    appConfigProvider = new AppConfig.Provider();
+
     BindingGraph.Factory bindingGraphFactory = new BindingGraph.Factory(
             elements,
             injectBindingRegistry,
             keyFactory,
             provisionBindingFactory,
-            productionBindingFactory);
+            productionBindingFactory,
+            appConfigProvider);
 
     AnnotationCreatorGenerator annotationCreatorGenerator =
             new AnnotationCreatorGenerator(filer, elements);
@@ -195,6 +199,7 @@ public SourceVersion getSupportedSourceVersion() {
                     keyFactory);
 
     return ImmutableList.of(
+        new AppConfigProcessingStep(messager, new AppConfig.Validator(elements, types), new AppConfig.Factory(elements), appConfigProvider),
         new MapKeyProcessingStep(
             messager, types, mapKeyValidator, annotationCreatorGenerator, unwrappedMapKeyGenerator),
         new ForReleasableReferencesValidator(messager),
@@ -216,8 +221,7 @@ public SourceVersion getSupportedSourceVersion() {
             bindingGraphValidator,
             componentDescriptorFactory,
             bindingGraphFactory,
-            componentGeneratorFactory,
-            new AppConfig.Factory(elements)
+            componentGeneratorFactory
         ),
         producerModuleProcessingStep(
             messager,
@@ -236,13 +240,13 @@ public SourceVersion getSupportedSourceVersion() {
             bindingGraphValidator,
             componentDescriptorFactory,
             bindingGraphFactory,
-            componentGeneratorFactory,
-            new AppConfig.Factory(elements)),
+            componentGeneratorFactory),
         new BindingMethodProcessingStep(messager, anyBindingMethodValidator),
         new InjectorProcessingStep(
                 types,
                 messager,
-                new AppConfig.Factory(elements),
+                appConfigProvider,
+                testRegistry,
                 new InjectorGenerator(filer, elements, messager, componentDescriptorFactory,
                         bindingGraphFactory, new TestClassGenerator.Factory(filer, elements),
                         testRegistry, new Decorator.Factory(filer, elements, bindingGraphFactory, testRegistry)),
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
index 09afc5021..1d36014b8 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
@@ -59,8 +59,7 @@
           Key.Factory keyFactory,
           CompilerOptions compilerOptions,
           ClassName name,
-          BindingGraph graph,
-          TypeMirror applicationClassName) {
+          BindingGraph graph) {
     super(
         types,
         elements,
@@ -69,8 +68,7 @@
         name,
         graph,
         new UniqueSubcomponentNamesGenerator(graph).generate(),
-        new OptionalFactories(),
-        applicationClassName);
+        new OptionalFactories());
   }
 
   /**
@@ -207,7 +205,7 @@ public void postAddBuildMethod() {
     MethodSpec builderFactoryMethod =
             methodBuilder("builder")
                     .addModifiers(PUBLIC, STATIC)
-                    .addParameter(ClassName.get(application), "application")
+                    .addParameter(ClassName.get(graph.application().get()), "application")
                     .returns(
                             graph.componentDescriptor().builderSpec().isPresent()
                                     ? ClassName.get(
diff --git a/compiler/src/main/java/dagger/internal/codegen/Decorator.java b/compiler/src/main/java/dagger/internal/codegen/Decorator.java
index 7a4a056b3..3174e7ab4 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Decorator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Decorator.java
@@ -14,20 +14,17 @@
 import javax.lang.model.util.Elements;
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
 
 public class Decorator  extends SourceFileGenerator<ImmutableSet<BindingGraph>>{
 
     private BindingGraph.Factory factory;
-    private TypeMirror appClass;
     private ClassName testAppClassName;
     private TestRegistry testRegistry;
 
-    private Decorator(Filer filer, Elements elements, BindingGraph.Factory factory, TypeMirror appClass, ClassName testAppClassName, TestRegistry testRegistry) {
+    private Decorator(Filer filer, Elements elements, BindingGraph.Factory factory, ClassName testAppClassName, TestRegistry testRegistry) {
         super(filer, elements);
         this.factory = factory;
-        this.appClass = appClass;
         this.testAppClassName = testAppClassName;
         this.testRegistry = testRegistry;
     }
@@ -68,7 +65,7 @@ static ClassName className(BindingGraph input) {
         final BindingGraph bindingGraph = input.stream().findFirst().get();
 
         ComponentDescriptor topDescriptor = getTopDescriptor(bindingGraph.componentDescriptor());
-        final BindingGraph parentGraph = factory.create(topDescriptor, appClass);
+        final BindingGraph parentGraph = factory.create(topDescriptor);
         final String daggerBuilderClassName = TriggerComponentInfo.resolveBuilderName(bindingGraph, parentGraph);
 
         builder.addField(testAppClassName, "app", Modifier.PRIVATE);
@@ -92,6 +89,9 @@ static ClassName className(BindingGraph input) {
         final TypeSpec.Builder interfaceBuilder = TypeSpec.interfaceBuilder(name).addModifiers(Modifier.PUBLIC);
         for (ContributionBinding contributionBinding : bindingGraph.delegateRequirements()) {
             Util.createDelegateMethod(name, interfaceBuilder, contributionBinding);
+            if (!contributionBinding.dependencies().isEmpty()) {
+                Util.createMockInstanceMethod(name, interfaceBuilder, contributionBinding);
+            }
         }
         interfaceBuilder.addMethod(MethodSpec.methodBuilder("and")
                 .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
@@ -109,7 +109,7 @@ private void addDecoratorType(TypeSpec.Builder builder, String className, TypeNa
             final BindingGraph bindingGraph = it.next();
             final CodeBlock.Builder codeBuilder = CodeBlock.builder();
             ComponentDescriptor topDescriptor = getTopDescriptor(bindingGraph.componentDescriptor());
-            final BindingGraph parentGraph = factory.create(topDescriptor, appClass);
+            final BindingGraph parentGraph = factory.create(topDescriptor);
             final ClassName name = ClassName.bestGuess(TriggerComponentInfo.resolveBuilderName(bindingGraph, parentGraph));
             codeBuilder.beginControlFlow("if (builder instanceof $T)", name);
             codeBuilder.add(CodeBlock.of("$T impl = ($T) builder;\n", name, name));
@@ -119,6 +119,9 @@ private void addDecoratorType(TypeSpec.Builder builder, String className, TypeNa
                 if (counter == 0) {
                     Util.createDelegateField(builder, contributionBinding);
                     Util.createDelegateMethodImplementation(interfaceName, builder, contributionBinding);
+                    if (!contributionBinding.dependencies().isEmpty()) {
+                        Util.createMockMethodImplementation(interfaceName, builder, contributionBinding);
+                    }
                 }
                 final String delegateFieldName = Util.getDelegateFieldName(contributionBinding.key());
                 final ClassName delegateTypeName = Util.getDelegateTypeName(contributionBinding.key());
@@ -185,8 +188,8 @@ private static ComponentDescriptor getTopDescriptor(ComponentDescriptor descript
             this.testRegistry = testRegistry;
         }
 
-        public Decorator create(ClassName testAppClassName, TypeMirror appClass) {
-            return new Decorator(filer, elements, bindingGraphFactory, appClass, testAppClassName, testRegistry);
+        public Decorator create(ClassName testAppClassName) {
+            return new Decorator(filer, elements, bindingGraphFactory, testAppClassName, testRegistry);
         }
 
     }
diff --git a/compiler/src/main/java/dagger/internal/codegen/DecoratorGenerator.java b/compiler/src/main/java/dagger/internal/codegen/DecoratorGenerator.java
index 1f1bd2358..1235a55b8 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DecoratorGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DecoratorGenerator.java
@@ -59,7 +59,7 @@ ClassName nameGeneratedType(DI input) {
 
        components.stream()
                 .map(componentDescriptorFactory::forComponent)
-                .map(descriptor -> bindingGraphFactory.create(descriptor, input.getAppClass().asType()))
+                .map(bindingGraphFactory::create)
                 .flatMap(this::flatMapAllSubgraphs)
                 .filter(bindingGraph -> bindingGraph.componentDescriptor() != null && !bindingGraph.delegateRequirements().isEmpty())
                 .filter(distinctByKey(graph -> simpleVariableName(graph.componentDescriptor().componentDefinitionType())))
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencySpecGenerator.java b/compiler/src/main/java/dagger/internal/codegen/DependencySpecGenerator.java
index b807ecc8a..ef2ade75b 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DependencySpecGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DependencySpecGenerator.java
@@ -40,7 +40,7 @@ ClassName nameGeneratedType(DI input) {
                 .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT);
 
         input.getComponents().stream()
-                .flatMap(typeElement -> ComponentInfo.forSpec(typeElement, componentDescriptorFactory, bindingGraphFactory, input.getAppClass().asType())
+                .flatMap(typeElement -> ComponentInfo.forSpec(typeElement, componentDescriptorFactory, bindingGraphFactory)
                 .stream())
                 .collect(Collectors.toList())
                 .forEach(info -> info.process(builder));
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectorGenerator.java b/compiler/src/main/java/dagger/internal/codegen/InjectorGenerator.java
index 5c5c40396..8a49f2ca6 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectorGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectorGenerator.java
@@ -61,7 +61,7 @@ ClassName nameGeneratedType(DI input) {
         createDecoratorClasses(builder, components, appClass);
         for (TypeElement component : components) {
             final List<TriggerComponentInfo> infos =
-                    ComponentInfo.forTrigger(component, componentDescriptorFactory, bindingGraphFactory, input.getAppClass().asType());
+                    ComponentInfo.forTrigger(component, componentDescriptorFactory, bindingGraphFactory);
             infos.forEach(info -> info.process(builder));
         }
 
@@ -71,11 +71,11 @@ ClassName nameGeneratedType(DI input) {
     private void createDecoratorClasses(TypeSpec.Builder builder, Set<TypeElement> components, TypeElement appClass) {
         final ClassName appClassName = ClassName.get(appClass);
         ClassName testAppClassName = appClassName.topLevelClassName().peerClass("Test" + appClassName.simpleName());
-        final Decorator decorator = decoratorFactory.create(testAppClassName, appClass.asType());
+        final Decorator decorator = decoratorFactory.create(testAppClassName);
 
         final List<BindingGraph> graphs = components.stream()
                 .map(componentDescriptorFactory::forComponent)
-                .map(descriptor -> bindingGraphFactory.create(descriptor, appClass.asType()))
+                .map(bindingGraphFactory::create)
                 .flatMap(this::flatMapAllSubgraphs)
                 .filter(bindingGraph -> bindingGraph.componentDescriptor() != null && !bindingGraph.delegateRequirements().isEmpty())
                 .collect(Collectors.toList());
@@ -99,11 +99,11 @@ private void createDecoratorClasses(TypeSpec.Builder builder, Set<TypeElement> c
     private void createDecoratorClass(TypeSpec.Builder builder, ImmutableSet<BindingGraph> graphs,
                                       Decorator decorator, ClassName testAppClassName) {
         try {
-            messager.printMessage(Diagnostic.Kind.NOTE, "-----");
+            /*messager.printMessage(Diagnostic.Kind.NOTE, "-----");
             for (BindingGraph graph : graphs) {
                 messager.printMessage(Diagnostic.Kind.NOTE, String.valueOf(graph.componentType().getSimpleName().toString()));
             }
-            messager.printMessage(Diagnostic.Kind.NOTE, "-----");
+            messager.printMessage(Diagnostic.Kind.NOTE, "-----");*/
             decorator.generate(graphs);
             final Optional<BindingGraph> e = graphs.stream().findFirst();
             if (!e.isPresent()) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectorProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/InjectorProcessingStep.java
index 9e41cc702..e27d3b3c1 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectorProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectorProcessingStep.java
@@ -28,7 +28,8 @@
 
     private Types types;
     private final Messager messager;
-    private AppConfig.Factory appConfigFactory;
+    private TestRegistry testRegistry;
+    private final AppConfig.Provider appConfigProvider;
     private final InjectorGenerator injectorGenerator;
     private final ComponentDescriptor.Kind component;
     private final BindingGraph.Factory bindingGraphFactory;
@@ -42,7 +43,8 @@
     private DecoratorGenerator decoratorGenerator;
 
     public InjectorProcessingStep(Types types, Messager messager,
-                                  AppConfig.Factory appConfigFactory,
+                                  AppConfig.Provider appConfigProvider,
+                                  TestRegistry testRegistry,
                                   InjectorGenerator injectorGenerator,
                                   ComponentDescriptor.Kind component, BindingGraph.Factory bindingGraphFactory,
                                   ComponentDescriptor.Factory componentDescriptorFactory,
@@ -54,7 +56,8 @@ public InjectorProcessingStep(Types types, Messager messager,
                                   StubGenerator stubGenerator) {
         this.types = types;
         this.messager = messager;
-        this.appConfigFactory = appConfigFactory;
+        this.appConfigProvider = appConfigProvider;
+        this.testRegistry = testRegistry;
         this.injectorGenerator = injectorGenerator;
         this.component = component;
         this.bindingGraphFactory = bindingGraphFactory;
@@ -69,25 +72,19 @@ public InjectorProcessingStep(Types types, Messager messager,
 
     @Override
     public Set<? extends Class<? extends Annotation>> annotations() {
-        return ImmutableSet.of(Config.class, Component.class);
+        return ImmutableSet.of(Component.class);
     }
 
     @Override
     public Set<Element> process(SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation, boolean anyElementsRejected) {
 
-        final Iterator<Element> it = elementsByAnnotation.get(Config.class).iterator();
-        if (!it.hasNext()) {
-            return ImmutableSet.copyOf(elementsByAnnotation.values());
-        }
-
-        final Element config = it.next();
-        final Config configAnnotation = config.getAnnotation(Config.class);
-
         if(anyElementsRejected) {
             return ImmutableSet.copyOf(elementsByAnnotation.values());
         }
 
-        final AppConfig appConfig = appConfigFactory.create(configAnnotation);
+        final AppConfig appConfig = appConfigProvider.get();
+
+        testRegistry.setDebug(appConfig.debug());
 
         Set<Element> rejectedElements = new LinkedHashSet<>();
 
@@ -98,14 +95,14 @@ public InjectorProcessingStep(Types types, Messager messager,
         for (Element element : elementsByAnnotation.get(component.annotationType())) {
             TypeElement componentTypeElement = (TypeElement) element;
             ComponentDescriptor componentDescriptor = componentDescriptorFactory.forComponent(componentTypeElement);
-            BindingGraph bindingGraph = bindingGraphFactory.create(componentDescriptor, appConfig.getAppClass().asType());
+            BindingGraph bindingGraph = bindingGraphFactory.create(componentDescriptor);
             InjectorType injectorType = new InjectorType(componentTypeElement, bindingGraph, componentDescriptor);
             injectorTypeList.add(injectorType);
         }
         if (rejectedElements.isEmpty()) {
             for (TypeElement component : components) {
                 final ComponentDescriptor componentDescriptor = componentDescriptorFactory.forComponent(component);
-                final BindingGraph bindingGraph = bindingGraphFactory.create(componentDescriptor, appConfig.getAppClass().asType());
+                final BindingGraph bindingGraph = bindingGraphFactory.create(componentDescriptor);
                 final ImmutableSet<ComponentDescriptor> componentDescriptors = bindingGraph.componentDescriptors();
                 componentDescriptors
                         .stream()
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java b/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
index ef89fa930..5eefbb0dc 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
@@ -208,7 +208,7 @@ ProvisionBinding forProvidesMethod(
       return ProvisionBinding.builder()
           .contributionType(ContributionType.fromBindingMethod(providesMethod))
           .bindingElement(providesMethod)
-          .ignoreStubGeneration(providesMethod.getAnnotation(AllowStubGeneration.class) == null)
+          .ignoreStubGeneration(genericParameter || providesMethod.getAnnotation(AllowStubGeneration.class) == null)
           .contributingModule(contributedBy)
           .key(key)
           .genericParameter(genericParameter)
diff --git a/compiler/src/main/java/dagger/internal/codegen/TestClassGenerator.java b/compiler/src/main/java/dagger/internal/codegen/TestClassGenerator.java
index 0a11e2811..949ce0d16 100644
--- a/compiler/src/main/java/dagger/internal/codegen/TestClassGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/TestClassGenerator.java
@@ -35,6 +35,11 @@ ClassName nameGeneratedType(TestRegistry input) {
 
     @Override
     Optional<TypeSpec.Builder> write(ClassName generatedTypeName, TestRegistry input) {
+
+        if (!input.isDebug()) {
+            return Optional.empty();
+        }
+
         uniqueNameSet = new UniqueNameSet();
         final TypeSpec.Builder builder = TypeSpec.classBuilder(generatedTypeName);
         final Iterator<TestRegistry.EncodedClass> it = input.iterator();
diff --git a/compiler/src/main/java/dagger/internal/codegen/TestRegistry.java b/compiler/src/main/java/dagger/internal/codegen/TestRegistry.java
index be2bcd5f6..efdab2f6e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/TestRegistry.java
+++ b/compiler/src/main/java/dagger/internal/codegen/TestRegistry.java
@@ -18,6 +18,7 @@
 public class TestRegistry {
 
     private List<EncodedClass> encodedClasses = new ArrayList<>();
+    private boolean debug = false;
 
     public void addEncodedClass(ClassName className, JavaFile javaFile) throws IOException {
         final JavaFileObject javaFileObject = javaFile.toJavaFileObject();
@@ -39,6 +40,14 @@ public ClassName getClassName() {
         return Base64.getDecoder().decode(value);
     }
 
+    public void setDebug(boolean debug) {
+        this.debug = debug;
+    }
+
+    public boolean isDebug() {
+        return this.debug;
+    }
+
     public static class EncodedClass {
 
         public EncodedClass(String qualifiedName, String encoded) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/Util.java b/compiler/src/main/java/dagger/internal/codegen/Util.java
index 6d3e047c2..a9df3dca3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Util.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Util.java
@@ -20,6 +20,8 @@
 import static com.google.auto.common.MoreElements.hasModifiers;
 import static com.google.auto.common.MoreTypes.asDeclared;
 import static com.google.common.collect.Lists.asList;
+import static dagger.internal.codegen.SourceFiles.generateBindingFieldsForDependencies;
+import static dagger.internal.codegen.SourceFiles.simpleVariableName;
 import static java.util.stream.Collectors.collectingAndThen;
 import static java.util.stream.Collectors.toList;
 import static javax.lang.model.element.ElementKind.CONSTRUCTOR;
@@ -31,9 +33,8 @@
 import com.google.common.base.Function;
 import com.google.common.base.Joiner;
 import java.util.Optional;
-import com.google.common.collect.FluentIterable;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableSet;
+
+import com.google.common.collect.*;
 import com.squareup.javapoet.*;
 import dagger.*;
 import dagger.multibindings.ClassKey;
@@ -46,6 +47,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import java.util.stream.Collector;
+import javax.inject.Provider;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
@@ -571,6 +573,67 @@ public static void createDelegateMethod(TypeName generatedTypeName, TypeSpec.Bui
         }
     }
 
+    public static void createMockInstanceMethod(TypeName generatedTypeName, TypeSpec.Builder classBuilder, ContributionBinding binding) {
+        try {
+            if (bindingSupportsTestDelegate(binding)) {
+                final ClassName delegateType = getDelegateTypeName(binding.key());
+                final String methodName = getDelegateMethodName(delegateType);
+                final MethodSpec.Builder delegateMethodBuilder = MethodSpec.methodBuilder(methodName);
+                delegateMethodBuilder.addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT);
+                classBuilder.addMethod(delegateMethodBuilder
+                        .addParameter(
+                                ParameterizedTypeName.get(ClassName.get(Provider.class),
+                                ClassName.get(binding.contributedType())), "provider"
+                        ).returns(generatedTypeName)
+                        .build());
+            }
+        } catch (Exception e) {
+        }
+    }
+
+    public static void createMockMethodImplementation(TypeName generatedTypeName, TypeSpec.Builder classBuilder, ContributionBinding binding) {
+        try {
+            if (bindingSupportsTestDelegate(binding)) {
+                final String delegateFieldName = Util.getDelegateFieldName(binding.key());
+                final ClassName delegateType = getDelegateTypeName(binding.key());
+                final TypeName contributedTypeName = ClassName.get(binding.contributedType());
+                final ParameterizedTypeName providerType = ParameterizedTypeName.get(ClassName.get(Provider.class), contributedTypeName);
+                final String methodName = getDelegateMethodName(delegateType);
+                final MethodSpec.Builder delegateMethodBuilder = MethodSpec.methodBuilder(methodName);
+                delegateMethodBuilder.addModifiers(Modifier.PUBLIC);
+                final CodeBlock params = createParametersCodeBlock(binding);
+                classBuilder.addMethod(delegateMethodBuilder
+                        .returns(generatedTypeName)
+                        .addParameter(providerType, "provider", Modifier.FINAL)
+                        .addStatement("this.$L = new $T() {\n" +
+                                "   public $T get($L) { \n" +
+                                "       return provider.get();\n" +
+                                "   }\n" +
+                                "};", delegateFieldName, delegateType,
+                                contributedTypeName,
+                                     params)
+                        .addStatement("return this")
+                        .build());
+            }
+        } catch (Exception e) {
+        }
+    }
+
+    protected static CodeBlock createParametersCodeBlock(ContributionBinding binding) {
+        final ImmutableMap<BindingKey, FrameworkField> map = generateBindingFieldsForDependencies(binding);
+        return binding.explicitDependencies()
+                .stream()
+                .map(request -> createCodeBlock(request, map))
+                .collect(CodeBlocks.joiningCodeBlocks(","));
+    }
+
+    private static CodeBlock createCodeBlock(DependencyRequest request, ImmutableMap<BindingKey, FrameworkField> map) {
+        FrameworkField field = map.get(request.bindingKey());
+        TypeName type = request.kind() == DependencyRequest.Kind.INSTANCE ? field.type().typeArguments.get(0) : field.type();
+        return CodeBlock.of("$T $L", type, field.name());
+
+    }
+
     public static void createDelegateMethodImplementation(TypeName generatedTypeName, TypeSpec.Builder classBuilder, ContributionBinding binding) {
         try {
             if (bindingSupportsTestDelegate(binding)) {
diff --git a/core/src/main/java/dagger/Config.java b/core/src/main/java/dagger/Config.java
index 0273faa6c..ec83dea2a 100644
--- a/core/src/main/java/dagger/Config.java
+++ b/core/src/main/java/dagger/Config.java
@@ -13,4 +13,5 @@
 public @interface Config {
     Class<?> applicationClass();
     String baseApplicationClass() default "android.app.Application";
+    boolean debug() default false;
 }
diff --git a/core/src/main/java/dagger/ProvidesComponent.java b/core/src/main/java/dagger/ProvidesComponent.java
deleted file mode 100644
index 52aa468f8..000000000
--- a/core/src/main/java/dagger/ProvidesComponent.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package dagger;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.ElementType.TYPE;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-@Retention(RUNTIME)
-@Target(METHOD)
-@Documented
-public @interface ProvidesComponent {}
diff --git a/core/src/main/java/dagger/ProvidesModule.java b/core/src/main/java/dagger/ProvidesModule.java
deleted file mode 100644
index f87620177..000000000
--- a/core/src/main/java/dagger/ProvidesModule.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package dagger;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-@Retention(RUNTIME)
-@Target(METHOD)
-@Documented
-public @interface ProvidesModule {}
diff --git a/core/src/main/java/dagger/ProvidesSubcomponent.java b/core/src/main/java/dagger/ProvidesSubcomponent.java
deleted file mode 100644
index 7aeeceba9..000000000
--- a/core/src/main/java/dagger/ProvidesSubcomponent.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package dagger;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-@Retention(RUNTIME)
-@Target(METHOD)
-@Documented
-public @interface ProvidesSubcomponent {}
