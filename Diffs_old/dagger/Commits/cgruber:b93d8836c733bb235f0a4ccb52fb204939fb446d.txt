diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index 182c9a8d1..4741ef5b0 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -184,7 +184,7 @@ public boolean apply(DependencyRequest dependency) {
             getInvocationCodeBlock(
                 !returnsFuture, binding, providedTypeName, futureTransform.parameterCodeBlocks()));
     computeMethodBuilder.addStatement(
-        "return $T.transform($L, $L, executor)",
+        "return $T.transformAsync($L, $L, executor)",
         FUTURES, futureTransform.futureCodeBlock(), transformCodeBlock);
 
     factoryBuilder.addMethod(constructorBuilder.build());
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
index 87984c8bd..41fae8ad1 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
@@ -533,7 +533,7 @@ public void publicModuleNonPublicIncludes() {
             "",
             "  @Override protected ListenableFuture<String> compute(",
             "      final ProducerMonitor monitor) {",
-            "    return Futures.transform(",
+            "    return Futures.transformAsync(",
             "      Futures.<Void>immediateFuture(null),",
             "      new AsyncFunction<Void, String>() {",
             "        @Override public ListenableFuture<String> apply(Void ignoredVoidArg) {",
