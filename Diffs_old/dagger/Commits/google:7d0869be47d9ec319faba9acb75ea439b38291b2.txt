diff --git a/compiler/src/main/java/dagger/internal/codegen/ContributionType.java b/compiler/src/main/java/dagger/internal/codegen/ContributionType.java
index c4fbc23f1..72ba2862d 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ContributionType.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ContributionType.java
@@ -22,7 +22,6 @@
 import dagger.multibindings.ElementsIntoSet;
 import dagger.multibindings.IntoMap;
 import dagger.multibindings.IntoSet;
-import dagger.producers.Produces;
 import javax.lang.model.element.ExecutableElement;
 
 /**
@@ -71,19 +70,6 @@ private static ContributionType forProvisionType(Provides.Type provisionType) {
     }
   }
 
-  private static ContributionType forProductionType(Produces.Type productionType) {
-    switch (productionType) {
-      case SET:
-        return SET;
-      case SET_VALUES:
-        return SET_VALUES;
-      case UNIQUE:
-        return UNIQUE;
-      default:
-        throw new AssertionError("Unknown production type: " + productionType);
-    }
-  }
-
   /**
    * The contribution type from a binding method annotations. Presumes a well-formed binding method
    * (only one of @IntoSet, @IntoMap, @ElementsIntoSet, @Provides.type or @Produces.type. {@link
@@ -100,8 +86,6 @@ static ContributionType fromBindingMethod(ExecutableElement method) {
 
     if (isAnnotationPresent(method, Provides.class)) {
       return forProvisionType(method.getAnnotation(Provides.class).type());
-    } else if (isAnnotationPresent(method, Produces.class)) {
-      return forProductionType(method.getAnnotation(Produces.class).type());
     } else {
       return ContributionType.UNIQUE;
     }
diff --git a/compiler/src/test/java/dagger/internal/codegen/MultibindingTest.java b/compiler/src/test/java/dagger/internal/codegen/MultibindingTest.java
index 714122270..2ba66056b 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MultibindingTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MultibindingTest.java
@@ -90,34 +90,6 @@ public void providesWithTwoMultibindingAnnotations_failsToCompile() {
         .onLine(10);
   }
 
-  @Test
-  public void producesTypeAndAnnotationOnSameMethod_failsToCompile() {
-    JavaFileObject module =
-        JavaFileObjects.forSourceLines(
-            "test.MultibindingModule",
-            "package test;",
-            "",
-            "import static dagger.producers.Produces.Type.SET;",
-            "",
-            "import dagger.producers.ProducerModule;",
-            "import dagger.producers.Produces;",
-            "import dagger.multibindings.IntoSet;",
-            "",
-            "@ProducerModule",
-            "class MultibindingModule {",
-            "  @Produces(type = SET) @IntoSet Integer produceInt() { ",
-            "    return 1;",
-            "  }",
-            "}");
-
-    assertThat(module)
-        .processedWith(new ComponentProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Produces.type cannot be used with multibinding annotations")
-        .in(module)
-        .onLine(11);
-  }
-
   @Test
   public void appliedOnInvalidMethods_failsToCompile() {
     JavaFileObject component =
diff --git a/producers/src/main/java/dagger/producers/Produces.java b/producers/src/main/java/dagger/producers/Produces.java
index b7cf17a63..d133a5865 100644
--- a/producers/src/main/java/dagger/producers/Produces.java
+++ b/producers/src/main/java/dagger/producers/Produces.java
@@ -37,35 +37,4 @@
 @Target(METHOD)
 @Retention(RUNTIME)
 @Beta
-public @interface Produces {
-  /** The type of binding into which the return type of the annotated method contributes. */
-  @Deprecated
-  enum Type {
-    /**
-     * The method is the only one which can produce the value for the specified type. This is the
-     * default behavior.
-     */
-    UNIQUE,
-
-    /**
-     * The method's resulting type forms the generic type argument of a {@code Set<T>}, and the
-     * returned value or future is contributed to the set. The {@code Set<T>} produced from the
-     * accumulation of values will be immutable.
-     */
-    SET,
-
-    /**
-     * Like {@link #SET}, except the method's return type is either {@code Set<T>} or
-     * {@code Set<ListenableFuture<T>>}, where any values are contributed to the set. An example use
-     * is to provide a default empty set binding, which is otherwise not possible using
-     * {@link #SET}.
-     */
-    SET_VALUES;
-  }
-
-  /**
-   * @deprecated Use the multibinding annotations in {@link dagger.multibindings}.
-   */
-  @Deprecated
-  Type type() default Type.UNIQUE;
-}
+public @interface Produces {}
