diff --git a/core/src/main/java/dagger/ObjectGraph.java b/core/src/main/java/dagger/ObjectGraph.java
index e5d542833..a1736d2b8 100644
--- a/core/src/main/java/dagger/ObjectGraph.java
+++ b/core/src/main/java/dagger/ObjectGraph.java
@@ -184,8 +184,8 @@ private static ObjectGraph makeGraph(DaggerObjectGraph base, Loader plugin, Obje
           BindingsGroup addTo = moduleAdapter.overrides ? overrideBindings : baseBindings;
           moduleAdapter.getBindings(addTo, loadedModule.getValue());
         } catch (IllegalArgumentException e) {
-          throw new IllegalArgumentException(moduleAdapter.moduleClass.getSimpleName()
-              + " is an overriding module and cannot contribute set bindings.");
+          throw new IllegalArgumentException(
+              moduleAdapter.moduleClass.getSimpleName() + ": " + e.getMessage(), e);
         }
       }
 
diff --git a/core/src/test/java/dagger/ExtensionWithSetBindingsTest.java b/core/src/test/java/dagger/ExtensionWithSetBindingsTest.java
index 30b4929b0..2a629536c 100644
--- a/core/src/test/java/dagger/ExtensionWithSetBindingsTest.java
+++ b/core/src/test/java/dagger/ExtensionWithSetBindingsTest.java
@@ -28,6 +28,7 @@
 import static dagger.Provides.Type.SET;
 import static org.fest.assertions.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
 @RunWith(JUnit4.class)
@@ -56,6 +57,16 @@
     @Provides(type=SET) @Singleton Integer provideD() { return counter.getAndIncrement(); }
   }
 
+  @Module
+  static class EmptyModule {
+  }
+
+  @Module(library = true)
+  static class DuplicateModule {
+    @Provides @Singleton String provideFoo() { return "foo"; }
+    @Provides @Singleton String provideBar() { return "bar"; }
+  }
+
   @Test public void basicInjectionWithExtension() {
     ObjectGraph root = ObjectGraph.createWith(new TestingLoader(), new RootModule());
     RealSingleton rs = root.get(RealSingleton.class);
@@ -81,8 +92,16 @@
       ObjectGraph.createWith(new TestingLoader(), new RootModule()).plus(new TestModule());
       fail("Should throw exception.");
     } catch (IllegalArgumentException e) {
-      assertEquals("TestModule is an overriding module and cannot contribute set bindings.",
-          e.getMessage());
+      assertEquals("TestModule: Module overrides cannot contribute set bindings.", e.getMessage());
+    }
+  }
+
+  @Test public void duplicateBindingsInSecondaryModule() {
+    try {
+      ObjectGraph.createWith(new TestingLoader(), new EmptyModule(), new DuplicateModule());
+      fail("Should throw exception.");
+    } catch (IllegalArgumentException e) {
+      assertTrue(e.getMessage().startsWith("DuplicateModule: Duplicate"));
     }
   }
 }
