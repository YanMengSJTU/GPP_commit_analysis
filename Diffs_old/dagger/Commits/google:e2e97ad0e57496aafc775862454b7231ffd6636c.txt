diff --git a/compiler/src/it/functional-tests/pom.xml b/compiler/src/it/functional-tests/pom.xml
index ed87cc6ef..821b030d1 100644
--- a/compiler/src/it/functional-tests/pom.xml
+++ b/compiler/src/it/functional-tests/pom.xml
@@ -62,7 +62,6 @@ limitations under the License.
           <annotationProcessors>
             <annotationProcessor>dagger.internal.codegen.ComponentProcessor</annotationProcessor>
           </annotationProcessors>
-          <compilerArgument>-Adagger.nullableValidation=ERROR</compilerArgument>
         </configuration>
       </plugin>
       <plugin>
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index 167b59fd8..a298e8aff 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -200,7 +200,7 @@ private static ValidationType scopeValidationType(ProcessingEnvironment processi
   private static ValidationType nullableValidationType(ProcessingEnvironment processingEnv) {
     return validationTypeFor(processingEnv,
         NULLABLE_VALIDATION_KEY,
-        ValidationType.WARNING, // TODO(sameb): Change the default to ERROR
+        ValidationType.ERROR,
         EnumSet.of(ValidationType.ERROR, ValidationType.WARNING));
   }
 
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index 787a223a8..d9613ddb3 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -1275,7 +1275,6 @@
         "}");
     assertAbout(javaSources())
         .that(ImmutableList.of(aFile, bFile, aComponentFile, bComponentFile))
-        .withCompilerOptions("-Adagger.nullableValidation=ERROR")
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(generatedComponent);
diff --git a/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java b/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java
index f22bea130..7a67567e9 100644
--- a/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java
@@ -693,19 +693,18 @@
         "  A a();",
         "}");
     assertAbout(javaSources()).that(ImmutableList.of(NULLABLE, a, module, component))
-        .withCompilerOptions("-Adagger.nullableValidation=ERROR")
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(String.format(NULLABLE_TO_NON_NULLABLE, "java.lang.String",
             "@test.Nullable @Provides String test.TestModule.provideString()"));
-    
+
     // but if we disable the validation, then it compiles fine.
     assertAbout(javaSources()).that(ImmutableList.of(NULLABLE, a, module, component))
         .withCompilerOptions("-Adagger.nullableValidation=WARNING")
         .processedWith(new ComponentProcessor())
         .compilesWithoutError();
   }
-  
+
   @Test public void nullCheckForMembersInjectParam() {
     JavaFileObject a = JavaFileObjects.forSourceLines("test.A",
         "package test;",
@@ -736,19 +735,18 @@
         "  A a();",
         "}");
     assertAbout(javaSources()).that(ImmutableList.of(NULLABLE, a, module, component))
-        .withCompilerOptions("-Adagger.nullableValidation=ERROR")
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(String.format(NULLABLE_TO_NON_NULLABLE, "java.lang.String",
             "@test.Nullable @Provides String test.TestModule.provideString()"));
-    
+
     // but if we disable the validation, then it compiles fine.
     assertAbout(javaSources()).that(ImmutableList.of(NULLABLE, a, module, component))
         .withCompilerOptions("-Adagger.nullableValidation=WARNING")
         .processedWith(new ComponentProcessor())
         .compilesWithoutError();
   }
-  
+
   @Test public void nullCheckForVariable() {
     JavaFileObject a = JavaFileObjects.forSourceLines("test.A",
         "package test;",
@@ -779,19 +777,18 @@
         "  A a();",
         "}");
     assertAbout(javaSources()).that(ImmutableList.of(NULLABLE, a, module, component))
-        .withCompilerOptions("-Adagger.nullableValidation=ERROR")
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(String.format(NULLABLE_TO_NON_NULLABLE, "java.lang.String",
             "@test.Nullable @Provides String test.TestModule.provideString()"));
-    
+
     // but if we disable the validation, then it compiles fine.
     assertAbout(javaSources()).that(ImmutableList.of(NULLABLE, a, module, component))
         .withCompilerOptions("-Adagger.nullableValidation=WARNING")
         .processedWith(new ComponentProcessor())
         .compilesWithoutError();
   }
-  
+
   @Test public void nullCheckForComponentReturn() {
     JavaFileObject module = JavaFileObjects.forSourceLines("test.TestModule",
         "package test;",
@@ -812,13 +809,12 @@
         "interface TestComponent {",
         "  String string();",
         "}");
-    assertAbout(javaSources()).that(ImmutableList.of(NULLABLE, module, component))    
-        .withCompilerOptions("-Adagger.nullableValidation=ERROR")
+    assertAbout(javaSources()).that(ImmutableList.of(NULLABLE, module, component))
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(String.format(NULLABLE_TO_NON_NULLABLE, "java.lang.String",
             "@test.Nullable @Provides String test.TestModule.provideString()"));
-    
+
     // but if we disable the validation, then it compiles fine.
     assertAbout(javaSources()).that(ImmutableList.of(NULLABLE, module, component))
         .withCompilerOptions("-Adagger.nullableValidation=WARNING")
diff --git a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index 2cb78888f..fc716b4b8 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -411,7 +411,6 @@ private String formatModuleErrorMessage(String msg) {
         "  }",
         "}");
     assertAbout(javaSource()).that(moduleFile)
-        .withCompilerOptions("-Adagger.nullableValidation=ERROR")
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(factoryFile);
@@ -497,7 +496,6 @@ private String formatModuleErrorMessage(String msg) {
         "  }",
         "}");
     assertAbout(javaSources()).that(ImmutableList.of(moduleFile, NULLABLE))
-        .withCompilerOptions("-Adagger.nullableValidation=ERROR")
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(factoryFile);
@@ -604,7 +602,6 @@ private String formatModuleErrorMessage(String msg) {
         "}");
     assertAbout(javaSources()).that(
             ImmutableList.of(classXFile, moduleFile, QUALIFIER_A, QUALIFIER_B))
-        .withCompilerOptions("-Adagger.nullableValidation=ERROR")
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(listFactoryFile);
@@ -702,7 +699,6 @@ private String formatModuleErrorMessage(String msg) {
         "  }",
         "}");
     assertAbout(javaSource()).that(moduleFile)
-        .withCompilerOptions("-Adagger.nullableValidation=ERROR")
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(factoryFile);
@@ -1010,7 +1006,6 @@ public void genericSubclassedModule() {
         "  }",
         "}");
     assertAbout(javaSources()).that(ImmutableList.of(parent, numberChild, integerChild, component))
-        .withCompilerOptions("-Adagger.nullableValidation=ERROR")
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(listBFactory, numberFactory, integerFactory);
