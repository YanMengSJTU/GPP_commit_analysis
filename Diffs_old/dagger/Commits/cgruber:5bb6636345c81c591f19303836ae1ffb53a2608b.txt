diff --git a/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
index 4a489aab7..dc9d3f0f6 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
@@ -16,23 +16,23 @@
 
 package dagger.internal.codegen;
 
+import static com.squareup.javapoet.MethodSpec.constructorBuilder;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
 import static com.squareup.javapoet.TypeSpec.classBuilder;
-import static dagger.internal.codegen.TypeNames.SET_OF_FACTORIES;
+import static dagger.internal.codegen.TypeNames.PRODUCTION_COMPONENT_MONITOR_FACTORY;
 import static dagger.internal.codegen.TypeNames.providerOf;
+import static dagger.internal.codegen.TypeNames.setOf;
 import static javax.lang.model.element.Modifier.ABSTRACT;
-import static javax.lang.model.element.Modifier.FINAL;
-import static javax.lang.model.element.Modifier.PUBLIC;
+import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.STATIC;
 
 import com.google.common.base.Optional;
-import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeSpec;
 import dagger.Module;
-import dagger.Multibindings;
 import dagger.Provides;
+import dagger.multibindings.Multibinds;
 import dagger.producers.ProductionScope;
 import dagger.producers.monitoring.ProductionComponentMonitor;
 import dagger.producers.monitoring.internal.Monitors;
@@ -62,29 +62,36 @@ ClassName nameGeneratedType(TypeElement componentElement) {
   Optional<TypeSpec.Builder> write(ClassName generatedTypeName, TypeElement componentElement) {
     return Optional.of(
         classBuilder(generatedTypeName)
-            .addAnnotation(
-                AnnotationSpec.builder(Module.class)
-                    .build())
-            .addModifiers(FINAL)
-            .addType(
-                TypeSpec.interfaceBuilder("DefaultSetOfFactories")
-                    .addAnnotation(Multibindings.class)
-                    .addMethod(
-                        MethodSpec.methodBuilder("setOfFactories")
-                            .addModifiers(PUBLIC, ABSTRACT)
-                            .returns(SET_OF_FACTORIES)
-                            .build())
-                    .build())
-            .addMethod(
-                methodBuilder("monitor")
-                    .returns(ProductionComponentMonitor.class)
-                    .addModifiers(STATIC)
-                    .addAnnotation(Provides.class)
-                    .addAnnotation(ProductionScope.class)
-                    .addParameter(providerOf(ClassName.get(componentElement.asType())), "component")
-                    .addParameter(providerOf(SET_OF_FACTORIES), "factories")
-                    .addStatement(
-                        "return $T.createMonitorForComponent(component, factories)", Monitors.class)
-                    .build()));
+.addAnnotation(Module.class)
+            .addModifiers(ABSTRACT)
+            .addMethod(privateConstructor())
+            .addMethod(setOfFactories())
+            .addMethod(monitor(componentElement)));
+  }
+
+  private MethodSpec privateConstructor() {
+    return constructorBuilder().addModifiers(PRIVATE).build();
+  }
+
+  private MethodSpec setOfFactories() {
+    return methodBuilder("setOfFactories")
+        .addAnnotation(Multibinds.class)
+        .addModifiers(ABSTRACT)
+        .returns(setOf(PRODUCTION_COMPONENT_MONITOR_FACTORY))
+        .build();
+  }
+
+  private MethodSpec monitor(TypeElement componentElement) {
+    return methodBuilder("monitor")
+        .returns(ProductionComponentMonitor.class)
+        .addModifiers(STATIC)
+        .addAnnotation(Provides.class)
+        .addAnnotation(ProductionScope.class)
+        .addParameter(providerOf(ClassName.get(componentElement.asType())), "component")
+        .addParameter(
+            providerOf(setOf(PRODUCTION_COMPONENT_MONITOR_FACTORY)), "factories")
+        .addStatement(
+            "return $T.createMonitorForComponent(component, factories)", Monitors.class)
+        .build();
   }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/TypeNames.java b/compiler/src/main/java/dagger/internal/codegen/TypeNames.java
index c1e7883c0..9899952bd 100644
--- a/compiler/src/main/java/dagger/internal/codegen/TypeNames.java
+++ b/compiler/src/main/java/dagger/internal/codegen/TypeNames.java
@@ -78,6 +78,8 @@
   static final ClassName PRODUCED = ClassName.get(Produced.class);
   static final ClassName PRODUCER = ClassName.get(Producer.class);
   static final ClassName PRODUCERS = ClassName.get(Producers.class);
+  static final ClassName PRODUCTION_COMPONENT_MONITOR_FACTORY =
+      ClassName.get(ProductionComponentMonitor.Factory.class);
   static final ClassName PROVIDER = ClassName.get(Provider.class);
   static final ClassName PROVIDER_OF_LAZY = ClassName.get(ProviderOfLazy.class);
 
@@ -97,9 +99,6 @@
    */
   static final ClassName VOID_CLASS = ClassName.get(Void.class);
 
-  static final TypeName SET_OF_FACTORIES =
-      ParameterizedTypeName.get(Set.class, ProductionComponentMonitor.Factory.class);
-
   static ParameterizedTypeName abstractProducerOf(TypeName typeName) {
     return ParameterizedTypeName.get(ABSTRACT_PRODUCER, typeName);
   }
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 1ad716b58..1a1bb6474 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -297,14 +297,6 @@ public void simpleComponent() {
             "    }",
             "",
             "    @Deprecated",
-            "    public Builder testClass_SimpleComponent_MonitoringModule(",
-            "        TestClass_SimpleComponent_MonitoringModule",
-            "        testClass_SimpleComponent_MonitoringModule) {",
-            "      Preconditions.checkNotNull(testClass_SimpleComponent_MonitoringModule);",
-            "      return this;",
-            "    }",
-            "",
-            "    @Deprecated",
             "    public Builder testClass_SimpleComponent_ProductionExecutorModule(",
             "        TestClass_SimpleComponent_ProductionExecutorModule",
             "        testClass_SimpleComponent_ProductionExecutorModule) {",
