diff --git a/compiler/src/main/java/dagger/internal/codegen/OptionalFactories.java b/compiler/src/main/java/dagger/internal/codegen/OptionalFactories.java
index 864e620f5..4d608f8c7 100644
--- a/compiler/src/main/java/dagger/internal/codegen/OptionalFactories.java
+++ b/compiler/src/main/java/dagger/internal/codegen/OptionalFactories.java
@@ -36,6 +36,7 @@
 import com.google.common.base.Function;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
+import com.google.common.util.concurrent.MoreExecutors;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.FieldSpec;
@@ -53,6 +54,7 @@
 import java.util.Comparator;
 import java.util.Map;
 import java.util.TreeMap;
+import java.util.concurrent.Executor;
 import javax.inject.Provider;
 
 /** The nested class and static methods required by the component to implement optional bindings. */
@@ -324,15 +326,16 @@ private TypeSpec presentOptionalFactoryClass(PresentFactorySpec spec) {
   }
 
   /**
-   * An expression that uses {@link Futures#transform(ListenableFuture, Function)} to transform a
-   * {@code ListenableFuture<inputType>} into a {@code ListenableFuture<Optional<inputType>>}.
+   * An expression that uses {@link Futures#transform(ListenableFuture, Function, Executor)} to
+   * transform a {@code ListenableFuture<inputType>} into a {@code
+   * ListenableFuture<Optional<inputType>>}.
    *
    * @param inputFuture an expression of type {@code ListenableFuture<inputType>}
    */
   private static CodeBlock transformFutureToOptional(
       OptionalKind optionalKind, TypeName inputType, CodeBlock inputFuture) {
     return CodeBlock.of(
-        "$T.transform($L, $L)",
+        "$T.transform($L, $L, $T.directExecutor())",
         Futures.class,
         inputFuture,
         anonymousClassBuilder("")
@@ -347,7 +350,8 @@ private static CodeBlock transformFutureToOptional(
                     .addParameter(inputType, "input")
                     .addCode("return $L;", optionalKind.presentExpression(CodeBlock.of("input")))
                     .build())
-            .build());
+            .build(),
+        MoreExecutors.class);
   }
 
   /**
