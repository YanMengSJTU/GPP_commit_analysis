diff --git a/compiler/src/it/functional-tests/src/main/java/test/TestBooleanKey.java b/compiler/src/it/functional-tests/src/main/java/test/BooleanKey.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/TestBooleanKey.java
rename to compiler/src/it/functional-tests/src/main/java/test/BooleanKey.java
index a4883459a..4cef79e02 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/TestBooleanKey.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/BooleanKey.java
@@ -18,6 +18,6 @@
 import dagger.MapKey;
 
 @MapKey(unwrapValue = true)
-@interface TestBooleanKey {
+@interface BooleanKey {
   boolean value();
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/TestByteKey.java b/compiler/src/it/functional-tests/src/main/java/test/ByteKey.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/TestByteKey.java
rename to compiler/src/it/functional-tests/src/main/java/test/ByteKey.java
index 7ad25c4a2..8e739bd4a 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/TestByteKey.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/ByteKey.java
@@ -18,6 +18,6 @@
 import dagger.MapKey;
 
 @MapKey(unwrapValue = true)
-@interface TestByteKey {
+@interface ByteKey {
   byte value();
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/TestCharKey.java b/compiler/src/it/functional-tests/src/main/java/test/CharKey.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/TestCharKey.java
rename to compiler/src/it/functional-tests/src/main/java/test/CharKey.java
index a727551de..a4f4e29c8 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/TestCharKey.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/CharKey.java
@@ -18,6 +18,6 @@
 import dagger.MapKey;
 
 @MapKey(unwrapValue = true)
-@interface TestCharKey {
+@interface CharKey {
   char value();
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/MultibindingComponent.java b/compiler/src/it/functional-tests/src/main/java/test/MultibindingComponent.java
index 05542a40d..e82b95939 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/MultibindingComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/MultibindingComponent.java
@@ -16,6 +16,7 @@
 package test;
 
 import dagger.Component;
+import dagger.mapkeys.StringKey;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;
@@ -35,7 +36,7 @@
   Set<String> mapKeys();
   Collection<String> mapValues();
   Set<Integer> set();
-  Map<TestStringKey.NestedWrappedKey, String> nestedKeyMap();
+  Map<NestedAnnotationContainer.NestedWrappedKey, String> nestedKeyMap();
   Map<Class<? extends Number>, String> numberClassKeyMap();
   Map<Class<?>, String> classKeyMap();
   Map<Long, String> longKeyMap();
@@ -44,6 +45,6 @@
   Map<Byte, String> byteKeyMap();
   Map<Boolean, String> booleanKeyMap();
   Map<Character, String> characterKeyMap();
-  Map<TestStringKey, String> unwrappedAnnotationKeyMap();
-  Map<TestWrappedAnnotationKey, String> wrappedAnnotationKeyMap();
+  Map<StringKey, String> unwrappedAnnotationKeyMap();
+  Map<WrappedAnnotationKey, String> wrappedAnnotationKeyMap();
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java b/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
index 73d53fef3..96a0d2cd0 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
@@ -17,6 +17,10 @@
 
 import dagger.Module;
 import dagger.Provides;
+import dagger.mapkeys.ClassKey;
+import dagger.mapkeys.IntKey;
+import dagger.mapkeys.LongKey;
+import dagger.mapkeys.StringKey;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.Collection;
@@ -30,125 +34,129 @@
 @Module
 class MultibindingModule {
   @Provides(type = MAP)
-  @TestStringKey("foo")
-  String provideFooKey(double doubleDependency) {
+  @StringKey("foo")
+  static String provideFooKey(double doubleDependency) {
     return "foo value";
   }
 
   @Provides(type = MAP)
-  @TestStringKey("bar")
-  String provideBarKey() {
+  @StringKey("bar")
+  static String provideBarKey() {
     return "bar value";
   }
 
-  @Provides(type = SET) int provideFiveToSet() {
+  @Provides(type = SET)
+  static int provideFiveToSet() {
     return 5;
   }
 
-  @Provides(type = SET) int provideSixToSet() {
+  @Provides(type = SET)
+  static int provideSixToSet() {
     return 6;
   }
 
-  @Provides Set<String> provideMapKeys(Map<String, Provider<String>> map) {
+  @Provides
+  static Set<String> provideMapKeys(Map<String, Provider<String>> map) {
     return map.keySet();
   }
 
-  @Provides Collection<String> provideMapValues(Map<String, String> map) {
+  @Provides
+  static Collection<String> provideMapValues(Map<String, String> map) {
     return map.values();
   }
 
   @Provides(type = MAP)
-  @TestStringKey.NestedWrappedKey(Integer.class)
-  String valueForInteger() {
+  @NestedAnnotationContainer.NestedWrappedKey(Integer.class)
+  static String valueForInteger() {
     return "integer";
   }
 
   @Provides(type = MAP)
-  @TestStringKey.NestedWrappedKey(Long.class)
-  String valueForLong() {
+  @NestedAnnotationContainer.NestedWrappedKey(Long.class)
+  static String valueForLong() {
     return "long";
   }
 
   @Provides(type = MAP)
-  @TestClassKey(Integer.class)
-  String valueForClassInteger() {
+  @ClassKey(Integer.class)
+  static String valueForClassInteger() {
     return "integer";
   }
 
   @Provides(type = MAP)
-  @TestClassKey(Long.class)
-  String valueForClassLong() {
+  @ClassKey(Long.class)
+  static String valueForClassLong() {
     return "long";
   }
 
   @Provides(type = MAP)
-  @TestNumberClassKey(BigDecimal.class)
-  String valueForNumberClassBigDecimal() {
+  @NumberClassKey(BigDecimal.class)
+  static String valueForNumberClassBigDecimal() {
     return "bigdecimal";
   }
 
   @Provides(type = MAP)
-  @TestNumberClassKey(BigInteger.class)
-  String valueForNumberClassBigInteger() {
+  @NumberClassKey(BigInteger.class)
+  static String valueForNumberClassBigInteger() {
     return "biginteger";
   }
 
   @Provides(type = MAP)
-  @TestLongKey(longValue = 100)
-  String valueFor100Long() {
+  @LongKey(100)
+  static String valueFor100Long() {
     return "100 long";
   }
 
   @Provides(type = MAP)
-  @TestIntKey(100)
-  String valueFor100Int() {
+  @IntKey(100)
+  static String valueFor100Int() {
     return "100 int";
   }
 
   @Provides(type = MAP)
-  @TestShortKey(100)
-  String valueFor100Short() {
+  @ShortKey(100)
+  static String valueFor100Short() {
     return "100 short";
   }
 
   @Provides(type = MAP)
-  @TestByteKey(100)
-  String valueFor100Byte() {
+  @ByteKey(100)
+  static String valueFor100Byte() {
     return "100 byte";
   }
 
   @Provides(type = MAP)
-  @TestBooleanKey(true)
-  String valueForTrue() {
+  @BooleanKey(true)
+  static String valueForTrue() {
     return "true";
   }
 
   @Provides(type = MAP)
-  @TestCharKey('a')
-  String valueForA() {
+  @CharKey('a')
+  static String valueForA() {
     return "a char";
   }
 
   @Provides(type = MAP)
-  @TestCharKey('\n')
-  String valueForNewline() {
+  @CharKey('\n')
+  static String valueForNewline() {
     return "newline char";
   }
 
   @Provides(type = MAP)
-  @TestUnwrappedAnnotationKey(@TestStringKey("foo\n"))
-  String valueForUnwrappedAnnotationKeyFoo() {
+  @UnwrappedAnnotationKey(@StringKey("foo\n"))
+  static String valueForUnwrappedAnnotationKeyFoo() {
     return "foo annotation";
   }
 
   @Provides(type = MAP)
-  @TestWrappedAnnotationKey(
-    value = @TestStringKey("foo"),
+  @WrappedAnnotationKey(
+    value = @StringKey("foo"),
     integers = {1, 2, 3},
     annotations = {},
     classes = {Long.class, Integer.class}
   )
-  String valueForWrappedAnnotationKeyFoo() {
+  static String valueForWrappedAnnotationKeyFoo() {
     return "wrapped foo annotation";
   }
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/TestStringKey.java b/compiler/src/it/functional-tests/src/main/java/test/NestedAnnotationContainer.java
similarity index 89%
rename from compiler/src/it/functional-tests/src/main/java/test/TestStringKey.java
rename to compiler/src/it/functional-tests/src/main/java/test/NestedAnnotationContainer.java
index 9cdd5965a..c57b4ecf4 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/TestStringKey.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/NestedAnnotationContainer.java
@@ -17,9 +17,7 @@
 
 import dagger.MapKey;
 
-@MapKey(unwrapValue = true)
-public @interface TestStringKey {
-  String value();
+public final class NestedAnnotationContainer {
 
   @MapKey(unwrapValue = false)
   @interface NestedWrappedKey {
diff --git a/compiler/src/it/functional-tests/src/main/java/test/TestNumberClassKey.java b/compiler/src/it/functional-tests/src/main/java/test/NumberClassKey.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/TestNumberClassKey.java
rename to compiler/src/it/functional-tests/src/main/java/test/NumberClassKey.java
index 884c75e19..4164ae5cc 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/TestNumberClassKey.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/NumberClassKey.java
@@ -18,6 +18,6 @@
 import dagger.MapKey;
 
 @MapKey(unwrapValue = true)
-@interface TestNumberClassKey {
+@interface NumberClassKey {
   Class<? extends Number> value();
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/TestShortKey.java b/compiler/src/it/functional-tests/src/main/java/test/ShortKey.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/TestShortKey.java
rename to compiler/src/it/functional-tests/src/main/java/test/ShortKey.java
index a74f21041..01b3aa99d 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/TestShortKey.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/ShortKey.java
@@ -18,6 +18,6 @@
 import dagger.MapKey;
 
 @MapKey(unwrapValue = true)
-@interface TestShortKey {
+@interface ShortKey {
   short value();
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/TestIntKey.java b/compiler/src/it/functional-tests/src/main/java/test/TestIntKey.java
deleted file mode 100644
index 14b25cf5d..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/TestIntKey.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
-* Copyright (C) 2015 Google, Inc.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-package test;
-
-import dagger.MapKey;
-
-@MapKey(unwrapValue = true)
-@interface TestIntKey {
-  int value();
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/TestLongKey.java b/compiler/src/it/functional-tests/src/main/java/test/TestLongKey.java
deleted file mode 100644
index ba06ad0e1..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/TestLongKey.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
-* Copyright (C) 2015 Google, Inc.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-package test;
-
-import dagger.MapKey;
-
-@MapKey(unwrapValue = true)
-@interface TestLongKey {
-  long longValue(); // Tests that the unwrapped member can have any name.
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/TestUnwrappedAnnotationKey.java b/compiler/src/it/functional-tests/src/main/java/test/TestUnwrappedAnnotationKey.java
deleted file mode 100644
index a00372890..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/TestUnwrappedAnnotationKey.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
-* Copyright (C) 2015 Google, Inc.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-package test;
-
-import dagger.MapKey;
-
-@MapKey(unwrapValue = true)
-@interface TestUnwrappedAnnotationKey {
-  TestStringKey value();
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/TestClassKey.java b/compiler/src/it/functional-tests/src/main/java/test/UnwrappedAnnotationKey.java
similarity index 87%
rename from compiler/src/it/functional-tests/src/main/java/test/TestClassKey.java
rename to compiler/src/it/functional-tests/src/main/java/test/UnwrappedAnnotationKey.java
index 921259781..21ed95841 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/TestClassKey.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/UnwrappedAnnotationKey.java
@@ -16,8 +16,9 @@
 package test;
 
 import dagger.MapKey;
+import dagger.mapkeys.StringKey;
 
 @MapKey(unwrapValue = true)
-@interface TestClassKey {
-  Class<?> value();
+@interface UnwrappedAnnotationKey {
+  StringKey value();
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/TestWrappedAnnotationKey.java b/compiler/src/it/functional-tests/src/main/java/test/WrappedAnnotationKey.java
similarity index 82%
rename from compiler/src/it/functional-tests/src/main/java/test/TestWrappedAnnotationKey.java
rename to compiler/src/it/functional-tests/src/main/java/test/WrappedAnnotationKey.java
index 13c059058..5d6e86dc7 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/TestWrappedAnnotationKey.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/WrappedAnnotationKey.java
@@ -16,11 +16,13 @@
 package test;
 
 import dagger.MapKey;
+import dagger.mapkeys.ClassKey;
+import dagger.mapkeys.StringKey;
 
 @MapKey(unwrapValue = false)
-@interface TestWrappedAnnotationKey {
-  TestStringKey value();
+@interface WrappedAnnotationKey {
+  StringKey value();
   int[] integers();
-  TestClassKey[] annotations();
+  ClassKey[] annotations();
   Class<? extends Number>[] classes();
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/cycle/Cycles.java b/compiler/src/it/functional-tests/src/main/java/test/cycle/Cycles.java
index 7cfd10a08..8d67d92eb 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/cycle/Cycles.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/cycle/Cycles.java
@@ -20,10 +20,10 @@
 import dagger.Module;
 import dagger.Provides;
 import dagger.Subcomponent;
+import dagger.mapkeys.StringKey;
 import java.util.Map;
 import javax.inject.Inject;
 import javax.inject.Provider;
-import test.TestStringKey;
 
 import static dagger.Provides.Type.MAP;
 
@@ -120,13 +120,13 @@ private Cycles() {}
   @Module
   static class CycleMapModule {
     @Provides(type = MAP)
-    @TestStringKey("X")
+    @StringKey("X")
     static X x(X x) {
       return x;
     }
 
     @Provides(type = MAP)
-    @TestStringKey("Y")
+    @StringKey("Y")
     static Y y(Y y) {
       return y;
     }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildMultibindingModule.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildMultibindingModule.java
index 4b61cf072..ae02b9e6f 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildMultibindingModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildMultibindingModule.java
@@ -17,7 +17,7 @@
 
 import dagger.Module;
 import dagger.Provides;
-import test.TestStringKey;
+import dagger.mapkeys.StringKey;
 
 import static dagger.Provides.Type.MAP;
 import static dagger.Provides.Type.SET;
@@ -26,13 +26,13 @@
 class ChildMultibindingModule {
 
   @Provides(type = SET)
-  Object childObject() {
+  static Object childObject() {
     return "object provided by child";
   }
 
   @Provides(type = MAP)
-  @TestStringKey("child key")
-  Object childKeyObject() {
+  @StringKey("child key")
+  static Object childKeyObject() {
     return "object in child";
   }
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentMultibindingModule.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentMultibindingModule.java
index 61bad5ea3..e4ec173de 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentMultibindingModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentMultibindingModule.java
@@ -17,7 +17,7 @@
 
 import dagger.Module;
 import dagger.Provides;
-import test.TestStringKey;
+import dagger.mapkeys.StringKey;
 
 import static dagger.Provides.Type.MAP;
 import static dagger.Provides.Type.SET;
@@ -26,30 +26,30 @@
 class ParentMultibindingModule {
 
   @Provides(type = SET)
-  Object provideObject() {
+  static Object provideObject() {
     return "object provided by parent";
   }
 
   @Provides(type = SET)
-  String provideString() {
+  static String provideString() {
     return "string provided by parent";
   }
 
   @Provides(type = SET)
-  RequiresMultiboundObjects requiresMultiboundObjects(
+  static RequiresMultiboundObjects requiresMultiboundObjects(
       RequiresMultiboundObjects requiresMultiboundObjects) {
     return requiresMultiboundObjects;
   }
 
   @Provides(type = MAP)
-  @TestStringKey("parent key")
-  String parentKeyString() {
+  @StringKey("parent key")
+  static String parentKeyString() {
     return "string in parent";
   }
 
   @Provides(type = MAP)
-  @TestStringKey("parent key")
-  Object parentKeyObject() {
+  @StringKey("parent key")
+  static Object parentKeyObject() {
     return "object in parent";
   }
 }
diff --git a/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java b/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
index 66a429be1..7d756c108 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
@@ -15,6 +15,8 @@
 
 import com.google.auto.value.AutoAnnotation;
 import com.google.common.collect.ImmutableMap;
+import dagger.mapkeys.ClassKey;
+import dagger.mapkeys.StringKey;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.Map;
@@ -80,7 +82,7 @@ public void wrappedAnnotationKeyMap() {
         .isEqualTo(
             ImmutableMap.of(
                 testWrappedAnnotationKey(
-                    testStringKey("foo"), new int[] {1, 2, 3}, new TestClassKey[] {}, classes),
+                    testStringKey("foo"), new int[] {1, 2, 3}, new ClassKey[] {}, classes),
                 "wrapped foo annotation"));
   }
 
@@ -141,21 +143,18 @@ public void shortKeyMap() {
   }
 
   @AutoAnnotation
-  static TestStringKey testStringKey(String value) {
+  static StringKey testStringKey(String value) {
     return new AutoAnnotation_MultibindingTest_testStringKey(value);
   }
 
   @AutoAnnotation
-  static TestStringKey.NestedWrappedKey nestedWrappedKey(Class<?> value) {
+  static NestedAnnotationContainer.NestedWrappedKey nestedWrappedKey(Class<?> value) {
     return new AutoAnnotation_MultibindingTest_nestedWrappedKey(value);
   }
 
   @AutoAnnotation
-  static TestWrappedAnnotationKey testWrappedAnnotationKey(
-      TestStringKey value,
-      int[] integers,
-      TestClassKey[] annotations,
-      Class<? extends Number>[] classes) {
+  static WrappedAnnotationKey testWrappedAnnotationKey(
+      StringKey value, int[] integers, ClassKey[] annotations, Class<? extends Number>[] classes) {
     return new AutoAnnotation_MultibindingTest_testWrappedAnnotationKey(
         value, integers, annotations, classes);
   }
diff --git a/core/src/main/java/dagger/MapKey.java b/core/src/main/java/dagger/MapKey.java
index 2cea25b35..106c00183 100644
--- a/core/src/main/java/dagger/MapKey.java
+++ b/core/src/main/java/dagger/MapKey.java
@@ -34,19 +34,19 @@
  *
  * <p>Typically, the key annotation has a single member, whose value is used as the map key.
  *
- * <p>For example, to add an entry to a {@code Map<String, Integer>} with key "foo", you could use
- * an annotation called {@code @StringKey}:
+ * <p>For example, to add an entry to a {@code Map<SomeEnum, Integer>} with key
+ * {@code SomeEnum.FOO}, you could use an annotation called {@code @SomeEnumKey}:
  *
  * <pre><code>
  * {@literal @}MapKey
- * {@literal @}interface StringKey {
- *   String value();
+ * {@literal @}interface SomeEnumKey {
+ *   SomeEnum value();
  * }
  *
  * {@literal @}Module
  * class SomeModule {
  *   {@literal @}Provides(type = MAP)
- *   {@literal @}StringKey("foo")
+ *   {@literal @}SomeEnumKey(SomeEnum.FOO)
  *   Integer provideFooValue() {
  *     return 2;
  *   }
@@ -54,8 +54,8 @@
  *
  * class SomeInjectedType {
  *   {@literal @}Inject
- *   SomeInjectedType(Map<String, Integer> map) {
- *     assert map.get("foo") == 2;
+ *   SomeInjectedType(Map<SomeEnum, Integer> map) {
+ *     assert map.get(SomeEnum.FOO) == 2;
  *   }
  * }
  * </code></pre>
@@ -63,6 +63,9 @@
  * <p>If {@code unwrapValue} is true, the annotation's single member can be any type except an
  * array.
  *
+ * <p>See {@link dagger.mapkeys} for standard unwrapped map key annotations for keys that are boxed
+ * primitives, strings, or classes.
+ *
  * <h2>Annotations as keys</h2>
  *
  * <p>If {@link #unwrapValue} is false, then the annotation itself is used as the map key. For
diff --git a/core/src/main/java/dagger/mapkeys/ClassKey.java b/core/src/main/java/dagger/mapkeys/ClassKey.java
new file mode 100644
index 000000000..21497c681
--- /dev/null
+++ b/core/src/main/java/dagger/mapkeys/ClassKey.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.mapkeys;
+
+import dagger.MapKey;
+import java.lang.annotation.Documented;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.METHOD;
+
+/**
+ * A {@link MapKey} annotation for maps with {@code Class<?>} keys.
+ * 
+ * <p>If your map's keys can be constrained, consider using a custom annotation instead, with a
+ * member whose type is {@code Class<? extends Something>}.
+ */
+@Documented
+@Target(METHOD)
+@MapKey
+public @interface ClassKey {
+  Class<?> value();
+}
\ No newline at end of file
diff --git a/core/src/main/java/dagger/mapkeys/IntKey.java b/core/src/main/java/dagger/mapkeys/IntKey.java
new file mode 100644
index 000000000..011b49fe8
--- /dev/null
+++ b/core/src/main/java/dagger/mapkeys/IntKey.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.mapkeys;
+
+import dagger.MapKey;
+import java.lang.annotation.Documented;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.METHOD;
+
+/** A {@link MapKey} annotation for maps with {@code int} keys. */
+@Documented
+@Target(METHOD)
+@MapKey
+public @interface IntKey {
+  int value();
+}
\ No newline at end of file
diff --git a/core/src/main/java/dagger/mapkeys/LongKey.java b/core/src/main/java/dagger/mapkeys/LongKey.java
new file mode 100644
index 000000000..183b74d02
--- /dev/null
+++ b/core/src/main/java/dagger/mapkeys/LongKey.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.mapkeys;
+
+import dagger.MapKey;
+import java.lang.annotation.Documented;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.METHOD;
+
+/** A {@link MapKey} annotation for maps with {@code long} keys. */
+@Documented
+@Target(METHOD)
+@MapKey
+public @interface LongKey {
+  long value();
+}
\ No newline at end of file
diff --git a/core/src/main/java/dagger/mapkeys/StringKey.java b/core/src/main/java/dagger/mapkeys/StringKey.java
new file mode 100644
index 000000000..7455a9bc5
--- /dev/null
+++ b/core/src/main/java/dagger/mapkeys/StringKey.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.mapkeys;
+
+import dagger.MapKey;
+import java.lang.annotation.Documented;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.METHOD;
+
+/** A {@link MapKey} annotation for maps with {@link String} keys. */
+@Documented
+@Target(METHOD)
+@MapKey
+public @interface StringKey {
+  String value();
+}
\ No newline at end of file
