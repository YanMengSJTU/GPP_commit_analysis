diff --git a/compiler/src/it/functional-tests/src/main/java/test/staticprovides/AllStaticModule.java b/compiler/src/it/functional-tests/src/main/java/test/staticprovides/AllStaticModule.java
index 9c6953a41..f47d36c6a 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/staticprovides/AllStaticModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/staticprovides/AllStaticModule.java
@@ -16,13 +16,20 @@
 package test.staticprovides;
 
 import static dagger.Provides.Type.SET;
+import static dagger.Provides.Type.SET_VALUES;
+import static java.util.Collections.emptySet;
 
 import dagger.Module;
 import dagger.Provides;
+import java.util.Set;
 
 @Module
 final class AllStaticModule {
   @Provides(type = SET) static String contributeString() {
     return AllStaticModule.class + ".contributeString";
   }
+
+  @Provides(type = SET_VALUES) static Set<Integer> contibuteEmptyIntegerSet() {
+    return emptySet();
+  }
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/staticprovides/StaticTestComponent.java b/compiler/src/it/functional-tests/src/main/java/test/staticprovides/StaticTestComponent.java
index 9d3a94588..255f28c3a 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/staticprovides/StaticTestComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/staticprovides/StaticTestComponent.java
@@ -16,7 +16,6 @@
 package test.staticprovides;
 
 import dagger.Component;
-
 import java.util.Set;
 
 /**
@@ -25,4 +24,5 @@
 @Component(modules = {AllStaticModule.class, SomeStaticModule.class})
 interface StaticTestComponent {
   Set<String> getMultiboundStrings();
+  Set<Integer> getMultiboundIntegers();
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index d3a85b498..814e04d7e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -694,7 +694,8 @@ private void writeField(
       if (bindingKey.kind().equals(BindingKey.Kind.CONTRIBUTION)) {
         ContributionBinding contributionBinding =
             Iterables.getOnlyElement(resolvedBindings.contributionBindings());
-        if (contributionBinding instanceof ProvisionBinding) {
+        if (!contributionBinding.bindingType().isMultibinding()
+            && (contributionBinding instanceof ProvisionBinding)) {
           ProvisionBinding provisionBinding = (ProvisionBinding) contributionBinding;
           if (provisionBinding.factoryCreationStrategy().equals(ENUM_INSTANCE)
               && !provisionBinding.scope().isPresent()) {
@@ -945,7 +946,7 @@ private void initializeFrameworkTypes(BindingGraph input,
                   } else if (parentMultibindingContributionSnippets.containsKey(binding)) {
                     parameterSnippets.add(parentMultibindingContributionSnippets.get(binding));
                   } else {
-                    throw new IllegalStateException();
+                    throw new IllegalStateException(binding + " was not found in");
                   }
                 }
                 Snippet initializeSetSnippet = Snippet.format("%s.create(%s)",
