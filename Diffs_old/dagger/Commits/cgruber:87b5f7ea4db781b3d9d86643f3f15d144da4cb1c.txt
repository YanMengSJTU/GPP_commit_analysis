diff --git a/core/src/main/java/dagger/MapKey.java b/core/src/main/java/dagger/MapKey.java
index a169e0731..e41829e1e 100644
--- a/core/src/main/java/dagger/MapKey.java
+++ b/core/src/main/java/dagger/MapKey.java
@@ -64,7 +64,7 @@
  *
  * <p>If {@code unwrapValue} is true, the annotation's single member can be any type except an
  * array.
- *
+ * 
  * <p>See {@link dagger.multibindings} for standard unwrapped map key annotations for keys that are
  * boxed primitives, strings, or classes.
  *
@@ -101,6 +101,8 @@
  * <p>(Note that there must be a class {@code MyMapKeyImpl} that implements {@code MyMapKey} in
  * order to call {@link Map#get(Object)} on the provided map.)
  *
+ * @see <a href="http://google.github.io/dagger/multibindings#map-multibindings">Map
+ *      multibinding</a>
  */
 @Documented
 @Target(ANNOTATION_TYPE)
diff --git a/core/src/main/java/dagger/Multibindings.java b/core/src/main/java/dagger/Multibindings.java
index d02d4177b..b83324df5 100644
--- a/core/src/main/java/dagger/Multibindings.java
+++ b/core/src/main/java/dagger/Multibindings.java
@@ -21,6 +21,42 @@
 
 import static java.lang.annotation.ElementType.TYPE;
 
+/**
+ * Annotates interfaces that declare multibindings.
+ *
+ * <p>You can declare that a multibound set or map is bound by nesting a
+ * {@code @Multibindings}-annotated interface within a module, with methods that return the sets or
+ * maps you want to declare.
+ *
+ * <p>You do not have to use {@code @Multibindings} for sets or maps that have at least one
+ * contribution, but you do have to declare them if they may be empty.
+ *
+ * <pre><code>
+ * {@literal @Module}
+ * class MyModule {
+ *   {@literal @Multibindings}
+ *   interface MyMultibindings {
+ *     {@literal Set<Foo>} aSet();
+ *     {@literal @MyQualifier Set<Foo>} aQualifiedSet();
+ *     {@literal Map<String, Foo>} aMap();
+ *     {@literal @MyQualifier Map<String, Foo>} aQualifiedMap();
+ *   }
+ *
+ *   {@literal @Provides}
+ *   static Object usesMultibindings(
+ *       {@literal Set<Foo>} set, {@literal @MyQualifier Map<String, Foo>} map) {
+ *     return …
+ *   }
+ * }
+ * </code></pre>
+ *
+ * <p>All methods on the interface and any supertypes (except for methods on {@link Object}) are
+ * used to declare multibindings. The names of the interface and its methods are ignored. A given
+ * set or map multibinding can be declared any number of times without error. Dagger never
+ * implements the interface or calls any of its methods.
+ *
+ * @see <a href="http://google.github.io/dagger/multibindings">Multibindings</a>
+ */
 @Documented
 @Target(TYPE)
 @Beta
diff --git a/core/src/main/java/dagger/Provides.java b/core/src/main/java/dagger/Provides.java
index 264a8b016..7be82c012 100644
--- a/core/src/main/java/dagger/Provides.java
+++ b/core/src/main/java/dagger/Provides.java
@@ -60,6 +60,8 @@
      * method as parameters. The {@code Set<T>} produced from the accumulation of values will be
      * immutable.
      *
+     * @see <a href="http://google.github.io/dagger/multibindings#set-multibindings">Set
+     *      multibinding</a>
      */
     SET,
 
@@ -68,6 +70,8 @@
      * contributed to the set. An example use is to provide a default empty set binding, which is
      * otherwise not possible using {@link #SET}.
      *
+     * @see <a href="http://google.github.io/dagger/multibindings#set-multibindings">Set
+     *      multibinding</a>
      */
     SET_VALUES,
 
@@ -77,6 +81,8 @@
      * is contributed to the map as a key/value pair. The {@code Map<K, Provider<V>>} produced from
      * the accumulation of values will be immutable.
      *
+     * @see <a href="http://google.github.io/dagger/multibindings#map-multibindings">Map
+     *      multibinding</a>
      */
     @Beta
     MAP;
diff --git a/core/src/main/java/dagger/Reusable.java b/core/src/main/java/dagger/Reusable.java
index d5e7d89c2..b7b61d8d1 100644
--- a/core/src/main/java/dagger/Reusable.java
+++ b/core/src/main/java/dagger/Reusable.java
@@ -28,8 +28,7 @@
  * <p>{@code @Reusable} is useful when you want to limit the number of provisions of a type, but
  * there is no specific lifetime over which there must be only one instance.
  *
- * @see <a href="http://google.github.io/dagger/users-guide.html#reusable-scope">Reusable Scope
- * </a>
+ * @see <a href="http://google.github.io/dagger/users-guide.html#reusable-scope">Reusable Scope</a>
  */
 @Documented
 @Beta
diff --git a/core/src/main/java/dagger/multibindings/ElementsIntoSet.java b/core/src/main/java/dagger/multibindings/ElementsIntoSet.java
index 5d3e7dc8c..7e157399f 100644
--- a/core/src/main/java/dagger/multibindings/ElementsIntoSet.java
+++ b/core/src/main/java/dagger/multibindings/ElementsIntoSet.java
@@ -22,6 +22,14 @@
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
+/**
+ * The method's return type is {@code Set<T>} and all values are contributed to the set. The {@code
+ * Set<T>} produced from the accumulation of values will be immutable. An example use is to provide
+ * a default empty set binding, which is otherwise not possible using {@link IntoSet}.
+ *
+ * @see <a href="http://google.github.io/dagger/multibindings#set-multibindings">Set
+ *      multibinding</a>
+ */
 @Documented
 @Target(METHOD)
 @Retention(RUNTIME)
diff --git a/core/src/main/java/dagger/multibindings/IntoMap.java b/core/src/main/java/dagger/multibindings/IntoMap.java
index 4dc3427a3..a1e786eca 100644
--- a/core/src/main/java/dagger/multibindings/IntoMap.java
+++ b/core/src/main/java/dagger/multibindings/IntoMap.java
@@ -29,7 +29,8 @@
  * is contributed to the map as a key/value pair. The {@code Map<K, Provider<V>>} produced from
  * the accumulation of values will be immutable.
  *
- * @see <a href=google.github.io/dagger/multibindings#map-multibindings>Map multibinding</a>
+ * @see <a href="http://google.github.io/dagger/multibindings#map-multibindings">Map
+ *      multibinding</a>
  */
 @Documented
 @Target(METHOD)
diff --git a/core/src/main/java/dagger/multibindings/IntoSet.java b/core/src/main/java/dagger/multibindings/IntoSet.java
index c98a957a9..a7e3a7cdf 100644
--- a/core/src/main/java/dagger/multibindings/IntoSet.java
+++ b/core/src/main/java/dagger/multibindings/IntoSet.java
@@ -28,7 +28,8 @@
  * method as parameters. The {@code Set<T>} produced from the accumulation of values will be
  * immutable.
  *
- * @see <a href=google.github.io/dagger/multibindings#set-multibindings>Set multibinding</a>
+ * @see <a href="http://google.github.io/dagger/multibindings#set-multibindings">Set
+ *      multibinding</a>
  */
 @Documented
 @Target(METHOD)
diff --git a/core/src/main/java/dagger/multibindings/Multibinds.java b/core/src/main/java/dagger/multibindings/Multibinds.java
index d41a4dc92..48dd94257 100644
--- a/core/src/main/java/dagger/multibindings/Multibinds.java
+++ b/core/src/main/java/dagger/multibindings/Multibinds.java
@@ -21,6 +21,33 @@
 
 import static java.lang.annotation.ElementType.METHOD;
 
+/**
+ * Annotates abstract module methods that declare multibindings.
+ *
+ * <p>You can declare that a multibound set or map is bound by annotating an abstract module method
+ * that returns the set or map you want to declare with {@code @Multibinds}.
+ *
+ * <p>You do not have to use {@code @Multibinds} for sets or maps that have at least one
+ * contribution, but you do have to declare them if they may be empty.
+ *
+ * <pre><code>
+ *   {@literal @Module} abstract class MyModule {
+ *     {@literal @Multibinds Set<Foo> aSet();}
+ *     {@literal @Multibinds @MyQualifier Set<Foo> aQualifiedSet();}
+ *     {@literal @Multibinds Map<String, Foo> aMap();}
+ *     {@literal @Multibinds @MyQualifier Map<String, Foo> aQualifiedMap();}
+ *
+ *     {@literal @Provides}
+ *     {@literal static Object usesMultibindings(Set<Foo> set, @MyQualifier Map<String, Foo> map}) {
+ *       return …
+ *     }
+ *   }</code></pre>
+ *
+ * <p>A given set or map multibinding can be declared any number of times without error. Dagger
+ * never implements calls any {@code @Multibinds} methods.
+ *
+ * @see <a href="http://google.github.io/dagger/multibindings">Multibindings</a>
+ */
 @Documented
 @Target(METHOD)
 @Beta
diff --git a/core/src/main/java/dagger/multibindings/package-info.java b/core/src/main/java/dagger/multibindings/package-info.java
index 26fe0830c..e62974ddb 100644
--- a/core/src/main/java/dagger/multibindings/package-info.java
+++ b/core/src/main/java/dagger/multibindings/package-info.java
@@ -14,4 +14,11 @@
  * limitations under the License.
  */
 
+/**
+ * This package contains the API by which Dagger allows you to bind several objects into a
+ * collection that can be injected without depending directly on each of the individual bindings.
+ *
+ * @see <a href="http://google.github.io/dagger/multibindings">Multibindings in the Dagger
+ *      User's Guide</a>
+ */
 package dagger.multibindings;
