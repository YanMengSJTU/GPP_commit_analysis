diff --git a/java/dagger/internal/codegen/binding/BindingGraphConverter.java b/java/dagger/internal/codegen/binding/BindingGraphConverter.java
index 245c1a555..8dd6fea60 100644
--- a/java/dagger/internal/codegen/binding/BindingGraphConverter.java
+++ b/java/dagger/internal/codegen/binding/BindingGraphConverter.java
@@ -41,7 +41,9 @@
 import dagger.model.DependencyRequest;
 import java.util.ArrayDeque;
 import java.util.Deque;
+import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Set;
 import javax.inject.Inject;
 import javax.lang.model.element.ExecutableElement;
@@ -108,6 +110,8 @@ private ComponentNode rootComponentNode(Network<Node, Edge> network) {
     private final MutableNetwork<Node, Edge> network =
         NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();
     private final Set<BindingNode> bindings = new HashSet<>();
+    private final Map<ResolvedBindings, ImmutableSet<BindingNode>> resolvedBindingsMap =
+        new HashMap<>();
 
     /** Constructs a converter for a root (component, not subcomponent) binding graph. */
     private Converter(BindingDeclarationFormatter bindingDeclarationFormatter) {
@@ -307,6 +311,10 @@ private ResolvedBindings resolvedDependencies(
     }
 
     private ImmutableSet<BindingNode> bindingNodes(ResolvedBindings resolvedBindings) {
+      return resolvedBindingsMap.computeIfAbsent(resolvedBindings, this::uncachedBindingNodes);
+    }
+
+    private ImmutableSet<BindingNode> uncachedBindingNodes(ResolvedBindings resolvedBindings) {
       ImmutableSet.Builder<BindingNode> bindingNodes = ImmutableSet.builder();
       resolvedBindings
           .allBindings()
