diff --git a/compiler/pom.xml b/compiler/pom.xml
index 8b7120a5b..001b68767 100644
--- a/compiler/pom.xml
+++ b/compiler/pom.xml
@@ -40,6 +40,10 @@
       <groupId>com.google.auto</groupId>
       <artifactId>auto-common</artifactId>
     </dependency>
+    <dependency>
+      <groupId>com.google.auto</groupId>
+      <artifactId>auto-service</artifactId>
+    </dependency>
     <dependency>
       <groupId>com.squareup</groupId>
       <artifactId>javawriter</artifactId>
@@ -49,16 +53,11 @@
       <artifactId>guava</artifactId>
     </dependency>
 
-    <dependency>
-      <groupId>com.google.auto.service</groupId>
-      <artifactId>auto-service</artifactId>
-      <scope>provided</scope> <!-- to leave out of the all-deps jar -->
-    </dependency>
     <dependency>
       <groupId>com.google.auto.value</groupId>
       <artifactId>auto-value</artifactId>
       <version>1.0-rc1</version>
-      <scope>provided</scope> <!-- to leave out of the all-deps jar -->
+      <optional>true</optional>
     </dependency>
 
     <dependency>
@@ -102,6 +101,34 @@
 
   <build>
     <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <executions>
+          <execution>
+            <id>default-compile</id>
+            <goals><goal>compile</goal></goals>
+            <configuration>
+              <annotationProcessors>
+                <annotationProcessor>com.google.auto.value.processor.AutoValueProcessor</annotationProcessor>
+              </annotationProcessors>
+            </configuration>
+          </execution>
+          <execution>
+            <id>default-test-compile</id>
+            <goals><goal>testCompile</goal></goals>
+            <configuration>
+              <annotationProcessors>
+                <annotationProcessor>dagger.internal.codegen.ValidationProcessor</annotationProcessor>
+                <annotationProcessor>dagger.internal.codegen.InjectAdapterProcessor</annotationProcessor>
+                <annotationProcessor>dagger.internal.codegen.ModuleAdapterProcessor</annotationProcessor>
+                <annotationProcessor>dagger.internal.codegen.GraphAnalysisProcessor</annotationProcessor>
+              </annotationProcessors>
+            </configuration>
+          </execution>
+        </executions>
+      </plugin>
+
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-invoker-plugin</artifactId>
diff --git a/compiler/src/it/missing-at-inject-constructor/src/main/java/test/TestApp.java b/compiler/src/it/missing-at-inject-constructor/src/main/java/test/TestApp.java
index 43fda9f84..935218f8f 100644
--- a/compiler/src/it/missing-at-inject-constructor/src/main/java/test/TestApp.java
+++ b/compiler/src/it/missing-at-inject-constructor/src/main/java/test/TestApp.java
@@ -34,7 +34,7 @@ public static void main(String[] args) {
   
   static class Dependency {
     // missing @Inject Dependency() {}
-    public void doit() { throw new AssertionError(); }
+    public void doit() { throw AssertionError(); };
   }
   
   @Module(injects = TestApp.class)
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
index b551c51be..24d27ec92 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -154,7 +154,6 @@ ComponentDescriptor create(TypeElement componentDefinitionType) {
           new ImmutableSetMultimap.Builder<Key, ProvisionBinding>()
               .put(componentBinding.providedKey(), componentBinding);
 
-
       for (TypeElement componentDependency : componentDependencyTypes) {
         ProvisionBinding componentDependencyBinding =
             provisionBindingFactory.forComponent(componentDependency);
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 3fbea2496..b479c933b 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -45,7 +45,6 @@
 import dagger.internal.codegen.writer.Snippet;
 import dagger.internal.codegen.writer.StringLiteral;
 import dagger.internal.codegen.writer.TypeName;
-import dagger.internal.codegen.writer.VoidName;
 import dagger.internal.codegen.writer.TypeNames;
 import dagger.internal.codegen.writer.VoidName;
 import java.util.List;
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
index 013830eb8..87fc35115 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
@@ -39,7 +39,6 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 
-
 /**
  * Represents a request for a key at an injection point. Parameters to {@link Inject} constructors
  * or {@link Provides} methods are examples of key requests.
diff --git a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
index 8aafacd97..3adcb3ccf 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
@@ -76,7 +76,6 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
     return Optional.of(binding.bindingElement());
   }
 
-
   @Override
   JavaWriter write(ClassName generatedTypeName, ProvisionBinding binding) {
     TypeName providedTypeName = TypeNames.forTypeMirror(binding.providedKey().type());
@@ -89,7 +88,6 @@ JavaWriter write(ClassName generatedTypeName, ProvisionBinding binding) {
         ClassName.fromClass(Factory.class),
         providedTypeName));
 
-
     MethodWriter getMethodWriter = factoryWriter.addMethod(binding.providedKey().type(), "get");
     getMethodWriter.annotate(Override.class);
     getMethodWriter.addModifiers(PUBLIC);
diff --git a/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java b/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java
index ca305c7fa..f577a399e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java
@@ -289,7 +289,7 @@ void collectIncludesRecursively(
       TypeElement module, Map<String, TypeElement> result, Deque<String> path) {
     Map<String, Object> annotation = getAnnotation(Module.class, module);
     if (annotation == null) {
-      // TODO(tbroyer): pass annotation information
+      // TODO(user): pass annotation information
       throw new ModuleValidationException("No @Module on " + module, module);
     }
 
@@ -321,7 +321,7 @@ void collectIncludesRecursively(
     if (!annotation.get("addsTo").equals(Void.class)) seedModules.add(annotation.get("addsTo"));
     for (Object include : seedModules) {
       if (!(include instanceof TypeMirror)) {
-        // TODO(tbroyer): pass annotation information
+        // TODO(user): pass annotation information
         processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING,
             "Unexpected value for include: " + include + " in " + module, module);
         continue;
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java b/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java
index b222ff37b..955d5bd64 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java
@@ -191,17 +191,17 @@ private InjectedClass createInjectedClass(String injectedClassName) {
           break;
         case CONSTRUCTOR:
           if (constructor != null) {
-            // TODO(tbroyer): pass annotation information
+            // TODO(user): pass annotation information
             error("Too many injectable constructors on " + type.getQualifiedName(), member);
           } else if (isAbstract) {
-            // TODO(tbroyer): pass annotation information
+            // TODO(user): pass annotation information
             error("Abstract class " + type.getQualifiedName()
                 + " must not have an @Inject-annotated constructor.", member);
           }
           constructor = (ExecutableElement) member;
           break;
         default:
-          // TODO(tbroyer): pass annotation information
+          // TODO(user): pass annotation information
           error("Cannot inject " + elementToString(member), member);
           break;
       }
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/InjectProcessingStep.java
index 1a0959c3c..5779026f8 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectProcessingStep.java
@@ -51,7 +51,6 @@
   private final MembersInjectorGenerator membersInjectorWriter;
   private final InjectBindingRegistry injectBindingRegistry;
 
-
   InjectProcessingStep(Messager messager,
       InjectConstructorValidator constructorValidator,
       InjectFieldValidator fieldValidator,
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
index 773903b45..70c3363c2 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
@@ -113,7 +113,6 @@ JavaWriter write(ClassName injectorClassName, MembersInjectionBinding binding) {
         "  throw new NullPointerException(\"Cannot inject members into a null reference\");",
         "}"));
 
-
     Optional<TypeElement> supertype = supertype(binding.bindingElement());
     if (supertype.isPresent()) {
       ParameterizedTypeName supertypeMemebersInjectorType = ParameterizedTypeName.create(
diff --git a/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java
index ba3328a71..63f78068a 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java
@@ -116,7 +116,7 @@
         // CodeGenerationIncompleteException.
         Map<String, Object> parsedAnnotation = getAnnotation(Module.class, type);
 
-        //TODO(cgruber): Figure out an initial sizing of the StringWriter.
+        //TODO(user): Figure out an initial sizing of the StringWriter.
         StringWriter stringWriter = new StringWriter();
         String adapterName = adapterName(type, MODULE_ADAPTER_SUFFIX);
         generateModuleAdapter(stringWriter, adapterName, type, parsedAnnotation, providesTypes);
@@ -161,7 +161,7 @@ private void error(String msg, Element element) {
         case CLASS:
           break; // valid, move along
         default:
-          // TODO(tbroyer): pass annotation information
+          // TODO(user): pass annotation information
           error("Unexpected @Provides on " + elementToString(providerMethod), providerMethod);
           continue;
       }
@@ -303,7 +303,7 @@ private void generateModuleAdapter(Writer ioWriter, String adapterName, TypeElem
     StringBuilder includesField = new StringBuilder().append("{ ");
     for (Object include : includes) {
       if (!(include instanceof TypeMirror)) {
-        // TODO(tbroyer): pass annotation information
+        // TODO(user): pass annotation information
         processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING,
             "Unexpected value: " + include + " in includes of " + type, type);
         continue;
diff --git a/compiler/src/main/java/dagger/internal/codegen/Util.java b/compiler/src/main/java/dagger/internal/codegen/Util.java
index 826ddec01..1dbe27ba3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Util.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Util.java
@@ -150,7 +150,7 @@ public static void typeToString(final TypeMirror type, final StringBuilder resul
           throw new CodeGenerationIncompleteException(
               "Type reported as <any> is likely a not-yet generated parameterized type.");
         }
-        // TODO(cgruber): Figure out a strategy for non-FQCN cases.
+        // TODO(user): Figure out a strategy for non-FQCN cases.
         result.append(errorType.toString());
         return null;
       }
@@ -253,7 +253,7 @@ private static boolean lenientIsInstance(Class<?> expectedClass, Object value) {
     }
   }
 
-  // TODO(sgoldfed): better format for other types of elements?
+  // TODO(user): better format for other types of elements?
   static String elementToString(Element element) {
     switch (element.getKind()) {
       case FIELD:
@@ -337,7 +337,6 @@ public static boolean isCallableConstructor(ExecutableElement constructor) {
         || type.getModifiers().contains(Modifier.STATIC);
   }
 
-
   /**
    * Returns a user-presentable string like {@code coffee.CoffeeModule}.
    */
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
index f57e354b3..5f087dbca 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
@@ -179,7 +179,6 @@ public String toString() {
     }
   }
 
-
   static final class CompilationUnitContext implements Writable.Context {
     private final String packageName;
     private final ImmutableSortedSet<ClassName> visibleClasses;
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/MethodWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/MethodWriter.java
index d8d71c8e9..fcf444b1c 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/MethodWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/MethodWriter.java
@@ -14,7 +14,6 @@
 
 import static com.google.common.base.Preconditions.checkArgument;
 
-
 public class MethodWriter extends Modifiable implements HasClassReferences, Writable {
   private final TypeName returnType;
   private final String name;
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/Modifiable.java b/compiler/src/main/java/dagger/internal/codegen/writer/Modifiable.java
index 9840ef830..f0e7ab804 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/Modifiable.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/Modifiable.java
@@ -28,7 +28,6 @@ public AnnotationWriter annotate(Class<? extends Annotation> annotation) {
     return annotationWriter;
   }
 
-
   Appendable writeModifiers(Appendable appendable) throws IOException {
     for (Modifier modifier : modifiers) {
       appendable.append(modifier.toString()).append(' ');
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/TypeWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/TypeWriter.java
index 9405aca75..788c1b3b5 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/TypeWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/TypeWriter.java
@@ -5,7 +5,6 @@
 import java.util.List;
 import javax.lang.model.type.TypeMirror;
 
-
 /**
  * Only named types. Doesn't cover anonymous inner classes.
  */
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/VariableWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/VariableWriter.java
index 53339127c..44d1a11b7 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/VariableWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/VariableWriter.java
@@ -3,7 +3,6 @@
 import java.io.IOException;
 import java.util.Set;
 
-
 public class VariableWriter extends Modifiable implements Writable, HasClassReferences {
   private final TypeName type;
   private final String name;
diff --git a/compiler/src/test/java/dagger/internal/codegen/AnnotationMirrorsTest.java b/compiler/src/test/java/dagger/internal/codegen/AnnotationMirrorsTest.java
index 7138a197c..ed870a474 100644
--- a/compiler/src/test/java/dagger/internal/codegen/AnnotationMirrorsTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/AnnotationMirrorsTest.java
@@ -95,7 +95,6 @@
   @OuterWithValueArray({@DefaultingOuter(BLAH), @DefaultingOuter(FOO)})
   class TestValueArrayWithBlahFoo {}
 
-
   @Test public void testEquivalences() {
     EquivalenceTester<AnnotationMirror> tester =
         EquivalenceTester.of(AnnotationMirrors.equivalence());
diff --git a/compiler/src/test/java/dagger/internal/codegen/KeyTest.java b/compiler/src/test/java/dagger/internal/codegen/KeyTest.java
index 1f3dda556..5ef33933f 100644
--- a/compiler/src/test/java/dagger/internal/codegen/KeyTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/KeyTest.java
@@ -177,7 +177,7 @@ String provideQualifiedString() {
     TypeElement holder = elements.getTypeElement(PrimitiveTypes.class.getCanonicalName());
     List<ExecutableElement> methods = (List<ExecutableElement>) holder.getEnclosedElements();
 
-    // TODO(cgruber): Truth subject for TypeMirror and TypeElement
+    // TODO(user): Truth subject for TypeMirror and TypeElement
     TypeMirror intType = methods.get(0).getReturnType();
     ASSERT.that(intType.getKind().isPrimitive()).isTrue();
     TypeMirror integerType = methods.get(1).getReturnType();
diff --git a/compiler/src/test/java/dagger/tests/integration/codegen/ModuleAdapterGenerationTest.java b/compiler/src/test/java/dagger/tests/integration/codegen/ModuleAdapterGenerationTest.java
index 251eb8003..c9c8b0d92 100644
--- a/compiler/src/test/java/dagger/tests/integration/codegen/ModuleAdapterGenerationTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/codegen/ModuleAdapterGenerationTest.java
@@ -238,7 +238,6 @@
         .generatesSources(expectedModuleAdapter, expectedInjectAdapterA, expectedInjectAdapterB);
   }
 
-
   @Test public void providesHasParameterNamedModule() {
     JavaFileObject a = JavaFileObjects.forSourceString("A", Joiner.on("\n").join(
         "import javax.inject.Inject;",
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
index 8c4258c04..01207fd5b 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
@@ -30,7 +30,7 @@
 @RunWith(JUnit4.class)
 public final class PrimitiveInjectionTest {
 
-  // TODO(cgruber): Use @test.ForTest to qualify primitives once qualifier equivalence is working.
+  // TODO(user): Use @test.ForTest to qualify primitives once qualifier equivalence is working.
   /*
   JavaFileObject annotation = JavaFileObjects.forSourceLines("test.ForTest",
       "package test;",
@@ -40,7 +40,7 @@
       "}");
   */
 
-  // TODO(cgruber): Expand test to support more primitive types when b/15512877 is fixed.
+  // TODO(user): Expand test to support more primitive types when b/15512877 is fixed.
   JavaFileObject primitiveInjectable = JavaFileObjects.forSourceLines("test.PrimitiveInjectable",
       "package test;",
       "import javax.inject.Inject;",
diff --git a/compiler/src/test/java/dagger/tests/integration/validation/CyclicModuleIncludesTest.java b/compiler/src/test/java/dagger/tests/integration/validation/CyclicModuleIncludesTest.java
index 2a9fd1761..39fbcac82 100644
--- a/compiler/src/test/java/dagger/tests/integration/validation/CyclicModuleIncludesTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/validation/CyclicModuleIncludesTest.java
@@ -81,5 +81,4 @@
             .in(javaFile).onLine(14);
   }
 
-
 }
diff --git a/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest.java b/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest.java
index b189201e7..f135b02a4 100644
--- a/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest.java
@@ -56,7 +56,7 @@
       "}"));
 
   @Test public void withstandsMissingTypeReferencedInInjects() {
-    // TODO(cgruber): remove Foo (interface) from this when injects= analysis is fixed.
+    // TODO(user): remove Foo (interface) from this when injects= analysis is fixed.
     JavaFileObject module = JavaFileObjects.forSourceString("FooModule", Joiner.on("\n").join(
         "import dagger.Module;",
         "import dagger.Provides;",
diff --git a/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest.java b/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest.java
index 1d508657b..4b6148ffc 100644
--- a/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest.java
@@ -33,14 +33,14 @@
  * Integration tests for the validation processors related to the use
  * of Scoping Annotations.
  */
-// TODO(cgruber): Audit this class when http://github.com/google/compile-testing
+// TODO(user): Audit this class when http://github.com/google/compile-testing
 //                has error/warning counts and other warning predicates available.
 @RunWith(JUnit4.class)
 public class ScopeAnnotationUseTest {
   private static final String ABSTRACTION_SCOPING_TEXT =
       "Scoping annotations are only allowed on concrete types and @Provides methods:";
 
-  // TODO(cgruber): uncomment when http://github.com/google/compile-testing supports warnings.
+  // TODO(user): uncomment when http://github.com/google/compile-testing supports warnings.
   //private static final String MISUSED_SCOPE_TEXT =
   //    "Dagger will ignore scoping annotations on methods that are not @Provides methods:";
 
@@ -53,7 +53,7 @@
         "  @Inject public Test() { }",
         "}"));
 
-    // TODO(cgruber): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
+    // TODO(user): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
     ASSERT.about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
         //.and().hasNoWarnings();
@@ -69,7 +69,7 @@
         "  @Provides @Singleton public String provideString() { return \"\"; }",
         "}"));
 
-    // TODO(cgruber): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
+    // TODO(user): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
     ASSERT.about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
         //.and().hasNoWarnings();
@@ -83,7 +83,7 @@
         "  @Singleton void method() { }",
         "}"));
 
-    // TODO(cgruber): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
+    // TODO(user): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
     ASSERT.about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
         //.and().hasNoWarnings();
@@ -97,7 +97,7 @@
         "  @Singleton void method() { }",
         "}"));
 
-    // TODO(cgruber): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
+    // TODO(user): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
     ASSERT.about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
         //.and().hasNoWarnings();
@@ -110,7 +110,7 @@
         "  @Singleton void method() { }",
         "}"));
 
-    // TODO(cgruber): uncomment when http://github.com/google/compile-testing supports warnings.
+    // TODO(user): uncomment when http://github.com/google/compile-testing supports warnings.
     ASSERT.about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
         //.withWarningContaining(MISUSED_SCOPE_TEXT).in(sourceFile).onLine(3).atColumn(49).and()
@@ -125,7 +125,7 @@
         "  @Singleton void method() { }",
         "}"));
 
-    // TODO(cgruber): uncomment when http://github.com/google/compile-testing supports warnings.
+    // TODO(user): uncomment when http://github.com/google/compile-testing supports warnings.
     ASSERT.about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
         //.withWarningContaining(MISUSED_SCOPE_TEXT).in(sourceFile).onLine(4).atColumn(49).and()
@@ -249,4 +249,3 @@
         .withErrorContaining(singletonErrorText).in(sourceFile).onLine(6).atColumn(33);
   }
 }
-
diff --git a/core/src/main/java/dagger/Component.java b/core/src/main/java/dagger/Component.java
index cd676f142..abfc34880 100644
--- a/core/src/main/java/dagger/Component.java
+++ b/core/src/main/java/dagger/Component.java
@@ -30,7 +30,7 @@
  * {@code DaggerComponent_}.  For example, {@code @Component interface MyComponent {...}} will
  * produce an implementation named {@code DaggerComponent_MyComponent}.
  *
- * <h2>Component methods
+ * <h2>Component methods</h2>
  *
  * <p>Every type annotated with {@code @Component} must contain at least one abstract component
  * method. Component methods must either represent {@linkplain Provider provision} or
diff --git a/core/src/main/java/dagger/ObjectGraph.java b/core/src/main/java/dagger/ObjectGraph.java
index 6432c84e3..f9c84ae7b 100644
--- a/core/src/main/java/dagger/ObjectGraph.java
+++ b/core/src/main/java/dagger/ObjectGraph.java
@@ -29,12 +29,12 @@
 import dagger.internal.SetBinding;
 import dagger.internal.StaticInjection;
 import dagger.internal.ThrowingErrorHandler;
+import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
-
 /**
  * A graph of objects linked by their dependencies.
  *
@@ -141,7 +141,7 @@ public static ObjectGraph createWith(Loader loader, Object... modules) {
     return DaggerObjectGraph.makeGraph(null, loader, modules);
   }
 
-  // TODO(cgruber): Move this internal implementation of ObjectGraph into the internal package.
+  // TODO(user): Move this internal implementation of ObjectGraph into the internal package.
   static class DaggerObjectGraph extends ObjectGraph {
     private final DaggerObjectGraph base;
     private final Linker linker;
@@ -325,7 +325,6 @@ private void linkInjectableTypes() {
     }
   }
 
-
   /**
    * A BindingsGroup which fails when existing values are clobbered and sets aside
    * {@link SetBinding}.
diff --git a/core/src/main/java/dagger/internal/ArrayQueue.java b/core/src/main/java/dagger/internal/ArrayQueue.java
index 690b6d9e5..fbcc27e66 100644
--- a/core/src/main/java/dagger/internal/ArrayQueue.java
+++ b/core/src/main/java/dagger/internal/ArrayQueue.java
@@ -349,7 +349,6 @@ public boolean isEmpty() {
         return new QueueIterator();
     }
 
-
     private class QueueIterator implements Iterator<E> {
         /**
          * Index of element to be returned by subsequent call to next.
diff --git a/core/src/main/java/dagger/internal/BuiltInBinding.java b/core/src/main/java/dagger/internal/BuiltInBinding.java
index 0991c7a97..425c4ff94 100644
--- a/core/src/main/java/dagger/internal/BuiltInBinding.java
+++ b/core/src/main/java/dagger/internal/BuiltInBinding.java
@@ -15,7 +15,6 @@
  */
 package dagger.internal;
 
-
 /**
  * Injects a Provider or a MembersInjector.
  */
diff --git a/core/src/main/java/dagger/internal/Loader.java b/core/src/main/java/dagger/internal/Loader.java
index 35b5e6775..16e0e2322 100644
--- a/core/src/main/java/dagger/internal/Loader.java
+++ b/core/src/main/java/dagger/internal/Loader.java
@@ -18,7 +18,6 @@
 
 import java.lang.reflect.AccessibleObject;
 
-
 /**
  * Provides a point of configuration of the basic resolving functions within Dagger, namely
  * that of Module handling, injection binding creation, and static injection.  A plugin must
diff --git a/core/src/main/java/dagger/internal/ModuleAdapter.java b/core/src/main/java/dagger/internal/ModuleAdapter.java
index 2986ad66a..ba7bc7062 100644
--- a/core/src/main/java/dagger/internal/ModuleAdapter.java
+++ b/core/src/main/java/dagger/internal/ModuleAdapter.java
@@ -16,7 +16,6 @@
  */
 package dagger.internal;
 
-
 /**
  * Extracts bindings from an {@code @Module}-annotated class.
  */
diff --git a/core/src/main/java/dagger/internal/ReflectiveLoader.java b/core/src/main/java/dagger/internal/ReflectiveLoader.java
index 0272bf4b8..4d20522a0 100644
--- a/core/src/main/java/dagger/internal/ReflectiveLoader.java
+++ b/core/src/main/java/dagger/internal/ReflectiveLoader.java
@@ -16,7 +16,6 @@
  */
 package dagger.internal;
 
-
 import dagger.internal.loaders.ReflectiveAtInjectBinding;
 import dagger.internal.loaders.ReflectiveModuleAdapter;
 import dagger.internal.loaders.ReflectiveStaticInjection;
diff --git a/core/src/main/java/dagger/internal/StaticInjection.java b/core/src/main/java/dagger/internal/StaticInjection.java
index 92a73a48a..d9399a37a 100644
--- a/core/src/main/java/dagger/internal/StaticInjection.java
+++ b/core/src/main/java/dagger/internal/StaticInjection.java
@@ -16,7 +16,6 @@
  */
 package dagger.internal;
 
-
 /**
  * Injects the static fields of a class.
  */
diff --git a/core/src/main/java/dagger/internal/loaders/GeneratedAdapters.java b/core/src/main/java/dagger/internal/loaders/GeneratedAdapters.java
index 72a825aaf..3c126898b 100644
--- a/core/src/main/java/dagger/internal/loaders/GeneratedAdapters.java
+++ b/core/src/main/java/dagger/internal/loaders/GeneratedAdapters.java
@@ -16,7 +16,6 @@
  */
 package dagger.internal.loaders;
 
-
 /**
  * A single point for API used in common by Adapters and Adapter generators
  */
diff --git a/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter.java b/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter.java
index a9c28bada..a37ebb791 100644
--- a/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter.java
+++ b/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter.java
@@ -36,7 +36,6 @@
 import javax.inject.Provider;
 import javax.inject.Singleton;
 
-
 /**
  * @deprecated this is in place to temporarily support obfuscation needs and
  *     will not exist as of Dagger 2.0
diff --git a/core/src/test/java/dagger/InjectionTest.java b/core/src/test/java/dagger/InjectionTest.java
index ef5b275fe..884c43928 100644
--- a/core/src/test/java/dagger/InjectionTest.java
+++ b/core/src/test/java/dagger/InjectionTest.java
@@ -121,7 +121,6 @@
     assertThat(entryPoint.aProvider.get()).isNotSameAs(entryPoint.aProvider.get());
   }
 
-
   @Test public void singletons() {
     class TestEntryPoint {
       @Inject Provider<F> fProvider;
diff --git a/core/src/test/java/dagger/MembersInjectorTest.java b/core/src/test/java/dagger/MembersInjectorTest.java
index 5a0197f20..f8abe0de9 100644
--- a/core/src/test/java/dagger/MembersInjectorTest.java
+++ b/core/src/test/java/dagger/MembersInjectorTest.java
@@ -83,7 +83,6 @@
     assertThat(object.injected).isEqualTo("injected");
   }
 
-
   @Test public void injectionOfUnconstructableFails() {
     class TestEntryPoint {
       @Inject Unconstructable unconstructable;
diff --git a/core/src/test/java/dagger/SetBindingTest.java b/core/src/test/java/dagger/SetBindingTest.java
index 6a029060a..4474d217a 100644
--- a/core/src/test/java/dagger/SetBindingTest.java
+++ b/core/src/test/java/dagger/SetBindingTest.java
@@ -171,7 +171,7 @@
     assertEquals(set("string4", "string3"), ep.fooStrings);
   }
 
-  // TODO(cgruber): Move this into an example project.
+  // TODO(user): Move this into an example project.
   @Test public void sampleMultiBindingLogger() {
     class TestEntryPoint {
       @Inject Logger logger;
diff --git a/core/src/test/java/dagger/ThreadSafetyTest.java b/core/src/test/java/dagger/ThreadSafetyTest.java
index ba4986d73..a92d4c51a 100644
--- a/core/src/test/java/dagger/ThreadSafetyTest.java
+++ b/core/src/test/java/dagger/ThreadSafetyTest.java
@@ -45,7 +45,6 @@
   private final ExecutorService es = Executors.newFixedThreadPool(THREAD_COUNT);
   private final CountDownLatch latch = new CountDownLatch(THREAD_COUNT + 1);
 
-
   static class LazyEntryPoint {
     @Inject Lazy<Integer> lazy;
   }
diff --git a/core/src/test/java/dagger/internal/TestingLoader.java b/core/src/test/java/dagger/internal/TestingLoader.java
index 0767446a6..fd2996d1e 100644
--- a/core/src/test/java/dagger/internal/TestingLoader.java
+++ b/core/src/test/java/dagger/internal/TestingLoader.java
@@ -16,7 +16,6 @@
  */
 package dagger.internal;
 
-
 import dagger.internal.loaders.ReflectiveAtInjectBinding;
 import dagger.internal.loaders.ReflectiveStaticInjection;
 
