diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index 210ee33d9..003b98ee6 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -36,6 +36,7 @@
 import dagger.Subcomponent;
 import dagger.internal.codegen.BindingType.HasBindingType;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
+import dagger.internal.codegen.SourceElement.HasSourceElement;
 import dagger.producers.ProductionComponent;
 import java.util.ArrayDeque;
 import java.util.Collection;
@@ -58,6 +59,7 @@
 import static com.google.auto.common.MoreElements.getAnnotationMirror;
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Predicates.in;
+import static com.google.common.base.Predicates.not;
 import static com.google.common.base.Verify.verify;
 import static dagger.internal.codegen.BindingKey.Kind.CONTRIBUTION;
 import static dagger.internal.codegen.ComponentDescriptor.isComponentContributionMethod;
@@ -70,7 +72,6 @@
 import static dagger.internal.codegen.ContributionBinding.Kind.IS_SYNTHETIC_MULTIBINDING_KIND;
 import static dagger.internal.codegen.Key.indexByKey;
 import static dagger.internal.codegen.Scope.reusableScope;
-import static javax.lang.model.element.Modifier.STATIC;
 
 /**
  * The canonical representation of a full-resolved graph.
@@ -108,40 +109,34 @@
       };
 
   /**
-   * Returns the set of types necessary to implement the component, but are not part of the injected
-   * graph.  This includes modules and component dependencies.
+   * The types for which the component needs instances.
+   * <ul>
+   * <li>component dependencies
+   * <li>{@linkplain #ownedModules() owned modules} with instance bindings that are used in the
+   *     graph
+   * </ul>
    */
   ImmutableSet<TypeElement> componentRequirements() {
     return SUBGRAPH_TRAVERSER
         .preOrderTraversal(this)
-        .transformAndConcat(
-            new Function<BindingGraph, Iterable<ResolvedBindings>>() {
-              @Override
-              public Iterable<ResolvedBindings> apply(BindingGraph input) {
-                return input.resolvedBindings().values();
-              }
-            })
-        .transformAndConcat(
-            new Function<ResolvedBindings, Set<ContributionBinding>>() {
-              @Override
-              public Set<ContributionBinding> apply(ResolvedBindings input) {
-                return input.contributionBindings();
-              }
-            })
-        .transformAndConcat(
-            new Function<ContributionBinding, Set<TypeElement>>() {
-              @Override
-              public Set<TypeElement> apply(ContributionBinding input) {
-                return input.bindingElement().getModifiers().contains(STATIC)
-                    ? ImmutableSet.<TypeElement>of()
-                    : input.contributedBy().asSet();
-              }
-            })
+        .transformAndConcat(RESOLVED_BINDINGS)
+        .transformAndConcat(ResolvedBindings.CONTRIBUTION_BINDINGS)
+        .transform(HasSourceElement.SOURCE_ELEMENT)
+        .filter(not(SourceElement.IS_STATIC))
+        .transformAndConcat(SourceElement.CONTRIBUTING_CLASS)
         .filter(in(ownedModuleTypes()))
         .append(componentDescriptor().dependencies())
         .toSet();
   }
 
+  private static final Function<BindingGraph, Iterable<ResolvedBindings>> RESOLVED_BINDINGS =
+      new Function<BindingGraph, Iterable<ResolvedBindings>>() {
+        @Override
+        public Iterable<ResolvedBindings> apply(BindingGraph graph) {
+          return graph.resolvedBindings().values();
+        }
+      };
+
   /**
    * Returns the {@link ComponentDescriptor}s for this component and its subcomponents.
    */
diff --git a/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java b/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
index 00ded026b..14949b47d 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
@@ -16,6 +16,7 @@
 package dagger.internal.codegen;
 
 import com.google.auto.value.AutoValue;
+import com.google.common.base.Function;
 import com.google.common.base.Optional;
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableListMultimap;
@@ -28,6 +29,7 @@
 import dagger.internal.codegen.ContributionType.HasContributionType;
 import dagger.internal.codegen.Key.HasKey;
 import dagger.internal.codegen.SourceElement.HasSourceElement;
+import java.util.Set;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkState;
@@ -332,4 +334,12 @@ public ContributionType contributionType() {
   Class<?> frameworkClass() {
     return bindingType().frameworkClass();
   }
+
+  static final Function<ResolvedBindings, Set<ContributionBinding>> CONTRIBUTION_BINDINGS =
+      new Function<ResolvedBindings, Set<ContributionBinding>>() {
+        @Override
+        public Set<ContributionBinding> apply(ResolvedBindings resolvedBindings) {
+          return resolvedBindings.contributionBindings();
+        }
+      };
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/SourceElement.java b/compiler/src/main/java/dagger/internal/codegen/SourceElement.java
index b8bcf5263..c1205a82e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SourceElement.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SourceElement.java
@@ -17,7 +17,10 @@
 
 import com.google.auto.common.MoreTypes;
 import com.google.auto.value.AutoValue;
+import com.google.common.base.Function;
 import com.google.common.base.Optional;
+import com.google.common.base.Predicate;
+import java.util.Set;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementVisitor;
 import javax.lang.model.element.TypeElement;
@@ -25,6 +28,8 @@
 import javax.lang.model.util.SimpleElementVisitor6;
 import javax.lang.model.util.Types;
 
+import static javax.lang.model.element.Modifier.STATIC;
+
 /**
  * An {@link Element}, optionally contributed by a subtype of the type that encloses it.
  */
@@ -35,6 +40,14 @@
   interface HasSourceElement {
     /** The source element associated with this object. */
     SourceElement sourceElement();
+
+    Function<SourceElement.HasSourceElement, SourceElement> SOURCE_ELEMENT =
+        new Function<SourceElement.HasSourceElement, SourceElement>() {
+          @Override
+          public SourceElement apply(SourceElement.HasSourceElement hasSourceElement) {
+            return hasSourceElement.sourceElement();
+          }
+        };
   }
 
   /** The {@link Element} instance.. */
@@ -81,4 +94,20 @@ static SourceElement forElement(Element element) {
   static SourceElement forElement(Element element, TypeElement contributedBy) {
     return new AutoValue_SourceElement(element, Optional.of(contributedBy));
   }
+
+  static final Function<SourceElement, Set<TypeElement>> CONTRIBUTING_CLASS =
+      new Function<SourceElement, Set<TypeElement>>() {
+        @Override
+        public Set<TypeElement> apply(SourceElement sourceElement) {
+          return sourceElement.contributedBy().asSet();
+        }
+      };
+
+  static final Predicate<SourceElement> IS_STATIC =
+      new Predicate<SourceElement>() {
+        @Override
+        public boolean apply(SourceElement sourceElement) {
+          return sourceElement.element().getModifiers().contains(STATIC);
+        }
+      };
 }
