diff --git a/java/dagger/example/spi/BindingGraphVisualizer.java b/java/dagger/example/spi/BindingGraphVisualizer.java
index 8865c8de8..e83fa2e23 100644
--- a/java/dagger/example/spi/BindingGraphVisualizer.java
+++ b/java/dagger/example/spi/BindingGraphVisualizer.java
@@ -36,7 +36,7 @@
 import dagger.model.BindingGraph.MaybeBinding;
 import dagger.model.BindingGraph.MissingBinding;
 import dagger.model.BindingGraph.Node;
-import dagger.model.BindingGraph.SubcomponentBuilderBindingEdge;
+import dagger.model.BindingGraph.SubcomponentCreatorBindingEdge;
 import dagger.model.BindingKind;
 import dagger.model.ComponentPath;
 import dagger.spi.BindingGraphPlugin;
@@ -268,7 +268,7 @@ UUID nodeId(Node node) {
         dotEdge.addAttribute("lhead", clusterName(incidentNodes.target().componentPath()));
         dotEdge.addAttribute("ltail", clusterName(incidentNodes.source().componentPath()));
         dotEdge.addAttribute("taillabel", ((ChildFactoryMethodEdge) edge).factoryMethod());
-      } else if (edge instanceof SubcomponentBuilderBindingEdge) {
+      } else if (edge instanceof SubcomponentCreatorBindingEdge) {
         dotEdge.addAttribute("style", "dashed");
         dotEdge.addAttribute("lhead", clusterName(incidentNodes.target().componentPath()));
         dotEdge.addAttribute("taillabel", "subcomponent");
diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index a48b1cdef..74b6c695a 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -173,7 +173,7 @@ java_library(
         "ProvisionBinding.java",
         "ResolvedBindings.java",
         "SourceFiles.java",  # Consider splitting this up?
-        "SubcomponentBuilderBindingEdgeImpl.java",
+        "SubcomponentCreatorBindingEdgeImpl.java",
         "SubcomponentDeclaration.java",
     ],
     plugins = CODEGEN_PLUGINS,
@@ -315,8 +315,8 @@ java_library(
         "SetFactoryCreationExpression.java",
         "SimpleInvocationBindingExpression.java",
         "SimpleMethodBindingExpression.java",
-        "SubcomponentBuilderBindingExpression.java",
-        "SubcomponentBuilderProviderCreationExpression.java",
+        "SubcomponentCreatorBindingExpression.java",
+        "SubcomponentCreatorProviderCreationExpression.java",
         "SubcomponentNames.java",
         "SwitchingProviders.java",
         "TopLevel.java",
diff --git a/java/dagger/internal/codegen/BindingFactory.java b/java/dagger/internal/codegen/BindingFactory.java
index 4e1d9933a..5405bfd2d 100644
--- a/java/dagger/internal/codegen/BindingFactory.java
+++ b/java/dagger/internal/codegen/BindingFactory.java
@@ -43,7 +43,7 @@
 import static dagger.model.BindingKind.OPTIONAL;
 import static dagger.model.BindingKind.PRODUCTION;
 import static dagger.model.BindingKind.PROVISION;
-import static dagger.model.BindingKind.SUBCOMPONENT_BUILDER;
+import static dagger.model.BindingKind.SUBCOMPONENT_CREATOR;
 import static javax.lang.model.element.ElementKind.CONSTRUCTOR;
 import static javax.lang.model.element.ElementKind.METHOD;
 import static javax.lang.model.element.Modifier.PRIVATE;
@@ -339,7 +339,7 @@ ProvisionBinding boundInstanceBinding(ComponentRequirement requirement, Element
   }
 
   /**
-   * Returns a {@link dagger.model.BindingKind#SUBCOMPONENT_BUILDER} binding declared by a component
+   * Returns a {@link dagger.model.BindingKind#SUBCOMPONENT_CREATOR} binding declared by a component
    * method that returns a subcomponent builder. Use {{@link
    * #subcomponentCreatorBinding(ImmutableSet)}} for bindings declared using {@link
    * Module#subcomponents()}.
@@ -357,12 +357,12 @@ ProvisionBinding subcomponentCreatorBinding(
         .contributionType(ContributionType.UNIQUE)
         .bindingElement(subcomponentCreatorMethod)
         .key(key)
-        .kind(SUBCOMPONENT_BUILDER)
+        .kind(SUBCOMPONENT_CREATOR)
         .build();
   }
 
   /**
-   * Returns a {@link dagger.model.BindingKind#SUBCOMPONENT_BUILDER} binding declared using {@link
+   * Returns a {@link dagger.model.BindingKind#SUBCOMPONENT_CREATOR} binding declared using {@link
    * Module#subcomponents()}.
    */
   ProvisionBinding subcomponentCreatorBinding(
@@ -371,7 +371,7 @@ ProvisionBinding subcomponentCreatorBinding(
     return ProvisionBinding.builder()
         .contributionType(ContributionType.UNIQUE)
         .key(subcomponentDeclaration.key())
-        .kind(SUBCOMPONENT_BUILDER)
+        .kind(SUBCOMPONENT_CREATOR)
         .build();
   }
 
diff --git a/java/dagger/internal/codegen/BindingGraphConverter.java b/java/dagger/internal/codegen/BindingGraphConverter.java
index a7b7983a4..73b425d4e 100644
--- a/java/dagger/internal/codegen/BindingGraphConverter.java
+++ b/java/dagger/internal/codegen/BindingGraphConverter.java
@@ -22,7 +22,7 @@
 import static dagger.internal.codegen.DaggerStreams.instancesOf;
 import static dagger.internal.codegen.DaggerStreams.presentValues;
 import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
-import static dagger.model.BindingKind.SUBCOMPONENT_BUILDER;
+import static dagger.model.BindingKind.SUBCOMPONENT_CREATOR;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
@@ -109,12 +109,12 @@ protected void visitComponent(BindingGraph graph) {
         ImmutableSet<TypeElement> declaringModules = subcomponentDeclaringModules(resolvedBindings);
         for (BindingNode binding : bindingNodes(resolvedBindings)) {
           addBinding(binding);
-          if (binding.kind().equals(SUBCOMPONENT_BUILDER)
+          if (binding.kind().equals(SUBCOMPONENT_CREATOR)
               && binding.componentPath().equals(currentComponent.componentPath())) {
             network.addEdge(
                 binding,
                 subcomponentNode(binding.key().type(), graph),
-                new SubcomponentBuilderBindingEdgeImpl(declaringModules));
+                new SubcomponentCreatorBindingEdgeImpl(declaringModules));
           }
         }
       }
diff --git a/java/dagger/internal/codegen/BindingGraphFactory.java b/java/dagger/internal/codegen/BindingGraphFactory.java
index 5109f0ff8..9b2646078 100644
--- a/java/dagger/internal/codegen/BindingGraphFactory.java
+++ b/java/dagger/internal/codegen/BindingGraphFactory.java
@@ -30,7 +30,7 @@
 import static dagger.model.BindingKind.DELEGATE;
 import static dagger.model.BindingKind.INJECTION;
 import static dagger.model.BindingKind.OPTIONAL;
-import static dagger.model.BindingKind.SUBCOMPONENT_BUILDER;
+import static dagger.model.BindingKind.SUBCOMPONENT_CREATOR;
 import static dagger.model.RequestKind.MEMBERS_INJECTION;
 import static java.util.function.Predicate.isEqual;
 import static javax.lang.model.util.ElementFilter.methodsIn;
@@ -444,7 +444,7 @@ ResolvedBindings lookUpMembersInjectionBinding(Key requestKey) {
      * will be used to detect which subcomponents need to be resolved.
      */
     private void addSubcomponentToOwningResolver(ProvisionBinding subcomponentCreatorBinding) {
-      checkArgument(subcomponentCreatorBinding.kind().equals(SUBCOMPONENT_BUILDER));
+      checkArgument(subcomponentCreatorBinding.kind().equals(SUBCOMPONENT_CREATOR));
       Resolver owningResolver = getOwningResolver(subcomponentCreatorBinding).get();
 
       TypeElement builderType = MoreTypes.asTypeElement(subcomponentCreatorBinding.key().type());
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index 4c4cc7b69..3fa0b5dcc 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -338,8 +338,8 @@ private FrameworkInstanceCreationExpression frameworkInstanceCreationExpression(
             compilerOptions,
             graph);
 
-      case SUBCOMPONENT_BUILDER:
-        return new SubcomponentBuilderProviderCreationExpression(
+      case SUBCOMPONENT_CREATOR:
+        return new SubcomponentCreatorProviderCreationExpression(
             binding.key().type(), componentImplementation.getSubcomponentName(binding.key()));
 
       case INJECTION:
@@ -539,9 +539,9 @@ private BindingExpression instanceBindingExpression(ResolvedBindings resolvedBin
             new ComponentProvisionBindingExpression(
                 resolvedBindings, graph, componentRequirementExpressions, compilerOptions));
 
-      case SUBCOMPONENT_BUILDER:
+      case SUBCOMPONENT_CREATOR:
         return Optional.of(
-            new SubcomponentBuilderBindingExpression(
+            new SubcomponentCreatorBindingExpression(
                 resolvedBindings,
                 componentImplementation.getSubcomponentName(resolvedBindings.key())));
 
diff --git a/java/dagger/internal/codegen/ComponentDescriptor.java b/java/dagger/internal/codegen/ComponentDescriptor.java
index c486719b6..06aa17bcb 100644
--- a/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -335,9 +335,9 @@ TypeMirror resolvedReturnType(DaggerTypes types) {
     PRODUCTION,
     MEMBERS_INJECTION,
     SUBCOMPONENT,
-    SUBCOMPONENT_BUILDER,
+    SUBCOMPONENT_CREATOR,
     PRODUCTION_SUBCOMPONENT,
-    PRODUCTION_SUBCOMPONENT_BUILDER;
+    PRODUCTION_SUBCOMPONENT_CREATOR;
 
     /**
      * Returns the component kind associated with this component method, if it exists. Otherwise,
@@ -346,10 +346,10 @@ TypeMirror resolvedReturnType(DaggerTypes types) {
     ComponentKind componentKind() {
       switch (this) {
         case SUBCOMPONENT:
-        case SUBCOMPONENT_BUILDER:
+        case SUBCOMPONENT_CREATOR:
           return ComponentKind.SUBCOMPONENT;
         case PRODUCTION_SUBCOMPONENT:
-        case PRODUCTION_SUBCOMPONENT_BUILDER:
+        case PRODUCTION_SUBCOMPONENT_CREATOR:
           return ComponentKind.PRODUCTION_SUBCOMPONENT;
         default:
           throw new IllegalStateException("no component associated with method " + this);
diff --git a/java/dagger/internal/codegen/ComponentDescriptorFactory.java b/java/dagger/internal/codegen/ComponentDescriptorFactory.java
index c2226b8b0..f63fe2d8b 100644
--- a/java/dagger/internal/codegen/ComponentDescriptorFactory.java
+++ b/java/dagger/internal/codegen/ComponentDescriptorFactory.java
@@ -181,8 +181,8 @@ private ComponentDescriptor create(TypeElement typeElement, ComponentKind kind)
                 subcomponentDescriptor(MoreTypes.asTypeElement(resolvedMethod.getReturnType())));
             break;
 
-          case SUBCOMPONENT_BUILDER:
-          case PRODUCTION_SUBCOMPONENT_BUILDER:
+          case SUBCOMPONENT_CREATOR:
+          case PRODUCTION_SUBCOMPONENT_CREATOR:
             subcomponentsByBuilderMethod.put(
                 componentMethodDescriptor,
                 subcomponentDescriptor(
@@ -257,8 +257,8 @@ private ComponentMethodDescriptor getDescriptorForComponentMethod(
                   componentMethod, resolvedComponentMethod);
           return ComponentMethodDescriptor.forSubcomponentCreator(
               isAnnotationPresent(returnTypeElement, Subcomponent.Builder.class)
-                  ? ComponentMethodKind.SUBCOMPONENT_BUILDER
-                  : ComponentMethodKind.PRODUCTION_SUBCOMPONENT_BUILDER,
+                  ? ComponentMethodKind.SUBCOMPONENT_CREATOR
+                  : ComponentMethodKind.PRODUCTION_SUBCOMPONENT_CREATOR,
               dependencyRequest,
               componentMethod);
         }
diff --git a/java/dagger/internal/codegen/ContributionBinding.java b/java/dagger/internal/codegen/ContributionBinding.java
index 7de7372f1..4da1e4482 100644
--- a/java/dagger/internal/codegen/ContributionBinding.java
+++ b/java/dagger/internal/codegen/ContributionBinding.java
@@ -152,7 +152,7 @@ final boolean isSyntheticMultibinding() {
   final boolean requiresGeneratedInstance() {
     switch (kind()) {
       case COMPONENT:
-      case SUBCOMPONENT_BUILDER:
+      case SUBCOMPONENT_CREATOR:
         return true;
       default:
         return false;
diff --git a/java/dagger/internal/codegen/SubcomponentBuilderBindingEdgeImpl.java b/java/dagger/internal/codegen/SubcomponentCreatorBindingEdgeImpl.java
similarity index 83%
rename from java/dagger/internal/codegen/SubcomponentBuilderBindingEdgeImpl.java
rename to java/dagger/internal/codegen/SubcomponentCreatorBindingEdgeImpl.java
index 3035def7c..782feb87e 100644
--- a/java/dagger/internal/codegen/SubcomponentBuilderBindingEdgeImpl.java
+++ b/java/dagger/internal/codegen/SubcomponentCreatorBindingEdgeImpl.java
@@ -20,15 +20,15 @@
 import static java.util.stream.Collectors.joining;
 
 import com.google.common.collect.ImmutableSet;
-import dagger.model.BindingGraph.SubcomponentBuilderBindingEdge;
+import dagger.model.BindingGraph.SubcomponentCreatorBindingEdge;
 import javax.lang.model.element.TypeElement;
 
-/** An implementation of {@link SubcomponentBuilderBindingEdge}. */
-final class SubcomponentBuilderBindingEdgeImpl implements SubcomponentBuilderBindingEdge {
+/** An implementation of {@link SubcomponentCreatorBindingEdge}. */
+final class SubcomponentCreatorBindingEdgeImpl implements SubcomponentCreatorBindingEdge {
 
   private final ImmutableSet<TypeElement> declaringModules;
 
-  SubcomponentBuilderBindingEdgeImpl(Iterable<TypeElement> declaringModules) {
+  SubcomponentCreatorBindingEdgeImpl(Iterable<TypeElement> declaringModules) {
     this.declaringModules = ImmutableSet.copyOf(declaringModules);
   }
 
diff --git a/java/dagger/internal/codegen/SubcomponentBuilderBindingExpression.java b/java/dagger/internal/codegen/SubcomponentCreatorBindingExpression.java
similarity index 88%
rename from java/dagger/internal/codegen/SubcomponentBuilderBindingExpression.java
rename to java/dagger/internal/codegen/SubcomponentCreatorBindingExpression.java
index 2a2df28d8..552d39fe5 100644
--- a/java/dagger/internal/codegen/SubcomponentBuilderBindingExpression.java
+++ b/java/dagger/internal/codegen/SubcomponentCreatorBindingExpression.java
@@ -18,12 +18,12 @@
 
 import com.squareup.javapoet.ClassName;
 
-/** A binding expression for a subcomponent builder that just invokes the constructor. */
-final class SubcomponentBuilderBindingExpression extends SimpleInvocationBindingExpression {
+/** A binding expression for a subcomponent creator that just invokes the constructor. */
+final class SubcomponentCreatorBindingExpression extends SimpleInvocationBindingExpression {
   private final String subcomponentBuilderName;
   private final ContributionBinding binding;
 
-  SubcomponentBuilderBindingExpression(
+  SubcomponentCreatorBindingExpression(
       ResolvedBindings resolvedBindings, String subcomponentBuilderName) {
     super(resolvedBindings);
     this.subcomponentBuilderName = subcomponentBuilderName;
diff --git a/java/dagger/internal/codegen/SubcomponentBuilderProviderCreationExpression.java b/java/dagger/internal/codegen/SubcomponentCreatorProviderCreationExpression.java
similarity index 92%
rename from java/dagger/internal/codegen/SubcomponentBuilderProviderCreationExpression.java
rename to java/dagger/internal/codegen/SubcomponentCreatorProviderCreationExpression.java
index 90b9cdfe0..be7005c9a 100644
--- a/java/dagger/internal/codegen/SubcomponentBuilderProviderCreationExpression.java
+++ b/java/dagger/internal/codegen/SubcomponentCreatorProviderCreationExpression.java
@@ -23,13 +23,13 @@
 import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import javax.lang.model.type.TypeMirror;
 
-/** A {@link javax.inject.Provider} creation expression for a subcomponent builder.. */
-final class SubcomponentBuilderProviderCreationExpression
+/** A {@link javax.inject.Provider} creation expression for a subcomponent creator. */
+final class SubcomponentCreatorProviderCreationExpression
     implements FrameworkInstanceCreationExpression {
   private final String subcomponentName;
   private final TypeMirror subcomponentBuilderType;
 
-  SubcomponentBuilderProviderCreationExpression(
+  SubcomponentCreatorProviderCreationExpression(
       TypeMirror subcomponentBuilderType, String subcomponentName) {
     this.subcomponentName = subcomponentName;
     this.subcomponentBuilderType = subcomponentBuilderType;
diff --git a/java/dagger/model/BindingGraph.java b/java/dagger/model/BindingGraph.java
index 581458228..b2d42fcc8 100644
--- a/java/dagger/model/BindingGraph.java
+++ b/java/dagger/model/BindingGraph.java
@@ -79,7 +79,7 @@
  *
  * <p>There is a <b>subcomponent edge</b> for each parent-child component relationship in the graph.
  * The target node is the component node for the child component. For subcomponents defined by a
- * {@linkplain SubcomponentBuilderBindingEdge subcomponent builder binding} (either a method on the
+ * {@linkplain SubcomponentCreatorBindingEdge subcomponent builder binding} (either a method on the
  * component or a set of {@code @Module.subcomponents} annotation values), the source node is the
  * binding for the {@code @Subcomponent.Builder} type. For subcomponents defined by {@linkplain
  * ChildFactoryMethodEdge subcomponent factory methods}, the source node is the component node for
@@ -314,7 +314,7 @@ public final ComponentNode rootComponentNode() {
 
   /**
    * An edge in the binding graph. Either a {@link DependencyEdge}, a {@link
-   * ChildFactoryMethodEdge}, or a {@link SubcomponentBuilderBindingEdge}.
+   * ChildFactoryMethodEdge}, or a {@link SubcomponentCreatorBindingEdge}.
    */
   public interface Edge {}
 
@@ -350,15 +350,18 @@ public final ComponentNode rootComponentNode() {
 
   /**
    * An edge that represents the link between a parent component and a child subcomponent implied by
-   * a subcomponent builder binding. The {@linkplain com.google.common.graph.EndpointPair#source()
-   * source node} of this edge is a {@link Binding} for the subcomponent builder {@link Key} and the
-   * {@linkplain com.google.common.graph.EndpointPair#target() target node} is a {@link
-   * ComponentNode} for the child subcomponent.
+   * a subcomponent creator ({@linkplain dagger.Subcomponent.Builder builder} or {@linkplain
+   * dagger.Subcomponent.Factory factory}) binding.
+   *
+   * <p>The {@linkplain com.google.common.graph.EndpointPair#source() source node} of this edge is a
+   * {@link Binding} for the subcomponent creator {@link Key} and the {@linkplain
+   * com.google.common.graph.EndpointPair#target() target node} is a {@link ComponentNode} for the
+   * child subcomponent.
    */
-  public interface SubcomponentBuilderBindingEdge extends Edge {
+  public interface SubcomponentCreatorBindingEdge extends Edge {
     /**
      * The modules that {@linkplain Module#subcomponents() declare the subcomponent} that generated
-     * this edge. Empty if the parent component has a subcomponent builder method and there are no
+     * this edge. Empty if the parent component has a subcomponent creator method and there are no
      * declaring modules.
      */
     ImmutableSet<TypeElement> declaringModules();
diff --git a/java/dagger/model/BindingKind.java b/java/dagger/model/BindingKind.java
index 0c9bb35b8..3b749b62b 100644
--- a/java/dagger/model/BindingKind.java
+++ b/java/dagger/model/BindingKind.java
@@ -45,8 +45,8 @@
   /** A binding for a {@link dagger.MembersInjector} of a type. */
   MEMBERS_INJECTOR,
 
-  /** A binding for a subcomponent builder. */
-  SUBCOMPONENT_BUILDER,
+  /** A binding for a subcomponent creator. */
+  SUBCOMPONENT_CREATOR,
 
   /** A binding for a {@link dagger.BindsInstance}-annotated builder method. */
   BOUND_INSTANCE,
