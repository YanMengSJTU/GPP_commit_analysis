diff --git a/compiler/src/it/functional-tests/src/main/java/test/BasicAbstractClassComponent.java b/compiler/src/it/functional-tests/src/main/java/test/BasicAbstractClassComponent.java
deleted file mode 100644
index 473c085c4..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/BasicAbstractClassComponent.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test;
-
-import dagger.Component;
-
-/**
- * This component tests behavior equivalent to {@link BasicComponent}, but as an abstract class
- * rather than an interface.
- */
-@Component(modules = {PrimitivesModule.class, NullableModule.class})
-abstract class BasicAbstractClassComponent implements BasicComponent {
-  void throwAParty() {
-    throw new RuntimeException("Paaarrrrrtaaaaaaaay!");
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/BooleanKey.java b/compiler/src/it/functional-tests/src/main/java/test/BooleanKey.java
deleted file mode 100644
index 78fab2e45..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/BooleanKey.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test;
-
-import dagger.MapKey;
-
-@MapKey(unwrapValue = true)
-@interface BooleanKey {
-  boolean value();
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ByteKey.java b/compiler/src/it/functional-tests/src/main/java/test/ByteKey.java
deleted file mode 100644
index e04ee33dd..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/ByteKey.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test;
-
-import dagger.MapKey;
-
-@MapKey(unwrapValue = true)
-@interface ByteKey {
-  byte value();
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/CharKey.java b/compiler/src/it/functional-tests/src/main/java/test/CharKey.java
deleted file mode 100644
index 276ee6153..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/CharKey.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test;
-
-import dagger.MapKey;
-
-@MapKey(unwrapValue = true)
-@interface CharKey {
-  char value();
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ChildDoubleModule.java b/compiler/src/it/functional-tests/src/main/java/test/ChildDoubleModule.java
deleted file mode 100644
index 09a1e6b72..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/ChildDoubleModule.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package test;
-
-import dagger.Module;
-import dagger.Provides;
-import java.util.ArrayList;
-import java.util.List;
-
-@Module
-class ChildDoubleModule extends ParentModule<Double, String, List<Double>> {
-
-  @Provides Double provideDouble() {
-    return 3d;
-  }
-
-  @Provides List<Double> provideListOfDouble() {
-    List<Double> list = new ArrayList<>();
-    list.add(4d);
-    return list;
-  }
-
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ChildIntegerModule.java b/compiler/src/it/functional-tests/src/main/java/test/ChildIntegerModule.java
deleted file mode 100644
index ac9c61207..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/ChildIntegerModule.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package test;
-
-import dagger.Module;
-import dagger.Provides;
-import java.util.ArrayList;
-import java.util.List;
-
-@Module
-class ChildIntegerModule extends ParentModule<Integer, String, List<Integer>> {
-
-  @Provides Integer provideInteger() {
-    return 1;
-  }
-
-  @Provides List<Integer> provideListOfInteger() {
-    List<Integer> list = new ArrayList<>();
-    list.add(2);
-    return list;
-  }
-
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ComponentDependsOnGeneratedCode.java b/compiler/src/it/functional-tests/src/main/java/test/ComponentDependsOnGeneratedCode.java
deleted file mode 100644
index cdc693d0b..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/ComponentDependsOnGeneratedCode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test;
-
-import dagger.Component;
-
-/**
- * A component that indirectly depends on code generated by another processor, in this case
- * {@link com.google.auto.factory.AutoFactory}. Neither this type nor its immediately referenced
- * types are generated, but {@link NeedsFactory} depends on the generated
- * {@link NeedsFactory_SomethingFactory}.
- *
- */
-@Component
-interface ComponentDependsOnGeneratedCode {
-  NeedsFactory needsFactory();
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/NeedsFactory.java b/compiler/src/it/functional-tests/src/main/java/test/NeedsFactory.java
deleted file mode 100644
index a60345f31..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/NeedsFactory.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test;
-
-import com.google.auto.factory.AutoFactory;
-import javax.inject.Inject;
-
-class NeedsFactory {
-  @Inject
-  NeedsFactory(@SuppressWarnings("unused") NeedsFactory_SomethingFactory somethingFactory) {}
-
-  @AutoFactory
-  static class Something {}
-}
-
diff --git a/compiler/src/it/functional-tests/src/main/java/test/NestedAnnotationContainer.java b/compiler/src/it/functional-tests/src/main/java/test/NestedAnnotationContainer.java
deleted file mode 100644
index e5d3b6499..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/NestedAnnotationContainer.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test;
-
-import dagger.MapKey;
-
-public final class NestedAnnotationContainer {
-
-  @MapKey(unwrapValue = false)
-  @interface NestedWrappedKey {
-    Class<?> value();
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/NumberClassKey.java b/compiler/src/it/functional-tests/src/main/java/test/NumberClassKey.java
deleted file mode 100644
index 3980260ed..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/NumberClassKey.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test;
-
-import dagger.MapKey;
-
-@MapKey(unwrapValue = true)
-@interface NumberClassKey {
-  Class<? extends Number> value();
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ParentModule.java b/compiler/src/it/functional-tests/src/main/java/test/ParentModule.java
deleted file mode 100644
index 4d0f56266..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/ParentModule.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package test;
-
-import dagger.Module;
-import dagger.Provides;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Set;
-
-@Module
-abstract class ParentModule<A extends Number & Comparable<A>, B, C extends Iterable<A>> {
-  @Provides Iterable<A> provideIterableOfAWithC(A a, C c) {
-    List<A> list = new ArrayList<>();
-    list.add(a);
-    for (A elt : c) {
-      list.add(elt);
-    }
-    return list;
-  }
-
-  @Provides static char provideNonGenericBindingInParameterizedModule() {
-    return 'c';
-  }
-
-  @Provides
-  static List<Set<String>> provideStaticGenericTypeWithNoTypeParametersInParameterizedModule() {
-    return new ArrayList<>();
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ScopedGeneric.java b/compiler/src/it/functional-tests/src/main/java/test/ScopedGeneric.java
deleted file mode 100644
index 37d68e01e..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/ScopedGeneric.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package test;
-
-import javax.inject.Inject;
-import javax.inject.Singleton;
-
-@Singleton
-class ScopedGeneric<T> { 
-  final T t;  
-  @Inject ScopedGeneric(T t) {
-    this.t = t;
-  }  
-}
\ No newline at end of file
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ShortKey.java b/compiler/src/it/functional-tests/src/main/java/test/ShortKey.java
deleted file mode 100644
index 9cb8f3e86..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/ShortKey.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test;
-
-import dagger.MapKey;
-
-@MapKey(unwrapValue = true)
-@interface ShortKey {
-  short value();
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/SingletonGenericComponent.java b/compiler/src/it/functional-tests/src/main/java/test/SingletonGenericComponent.java
deleted file mode 100644
index 44a2cb553..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/SingletonGenericComponent.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package test;
-
-import dagger.Component;
-import javax.inject.Singleton;
-
-@Singleton
-@Component
-interface SingletonGenericComponent {
-  
-  ScopedGeneric<A> scopedGenericA();
-  ScopedGeneric<B> scopedGenericB();
-
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/Thing.java b/compiler/src/it/functional-tests/src/main/java/test/Thing.java
deleted file mode 100644
index 2099eba6c..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/Thing.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
-* Copyright (C) 2014 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test;
-
-import javax.inject.Inject;
-import test.sub.OtherThing;
-
-final class Thing {
-  @Inject Thing(@SuppressWarnings("unused") OtherThing unused) {}
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/UnwrappedAnnotationKey.java b/compiler/src/it/functional-tests/src/main/java/test/UnwrappedAnnotationKey.java
deleted file mode 100644
index 96d2cb289..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/UnwrappedAnnotationKey.java
+++ /dev/null
@@ -1,25 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test;
-
-import dagger.MapKey;
-import dagger.multibindings.StringKey;
-
-@MapKey(unwrapValue = true)
-@interface UnwrappedAnnotationKey {
-  StringKey value();
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/WrappedAnnotationKey.java b/compiler/src/it/functional-tests/src/main/java/test/WrappedAnnotationKey.java
deleted file mode 100644
index 50306d032..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/WrappedAnnotationKey.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test;
-
-import dagger.MapKey;
-import dagger.multibindings.ClassKey;
-import dagger.multibindings.StringKey;
-
-@MapKey(unwrapValue = false)
-@interface WrappedAnnotationKey {
-  StringKey value();
-  int[] integers();
-  ClassKey[] annotations();
-  Class<? extends Number>[] classes();
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/nullables/NullComponent.java b/compiler/src/it/functional-tests/src/main/java/test/nullables/NullComponent.java
deleted file mode 100644
index 464b5a2a0..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/nullables/NullComponent.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test.nullables;
-
-import dagger.Component;
-import javax.inject.Provider;
-
-@Component(modules = NullModule.class)
-interface NullComponent {
-  NullFoo nullFoo();
-  @Nullable String string();
-  Provider<String> stringProvider();
-  Number number();
-  Provider<Number> numberProvider();
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/nullables/NullComponentWithDependency.java b/compiler/src/it/functional-tests/src/main/java/test/nullables/NullComponentWithDependency.java
deleted file mode 100644
index b250af6f9..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/nullables/NullComponentWithDependency.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test.nullables;
-
-import dagger.Component;
-import javax.inject.Provider;
-
-@Component(dependencies = NullComponent.class)
-interface NullComponentWithDependency {
-  @Nullable String string();
-  Provider<String> stringProvider();
-  Number number();
-  Provider<Number> numberProvider();
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/nullables/NullModule.java b/compiler/src/it/functional-tests/src/main/java/test/nullables/NullModule.java
deleted file mode 100644
index dc827adfe..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/nullables/NullModule.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test.nullables;
-
-import dagger.Module;
-import dagger.Provides;
-
-@Module
-class NullModule {
-  Number numberValue = null;
-
-  @Nullable
-  @Provides
-  String provideNullableString() {
-    return null;
-  }
-
-  @Provides
-  Number provideNumber() {
-    return numberValue;
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/nullables/Nullable.java b/compiler/src/it/functional-tests/src/main/java/test/nullables/Nullable.java
deleted file mode 100644
index 86776406a..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/nullables/Nullable.java
+++ /dev/null
@@ -1,3 +0,0 @@
-package test.nullables;
-
-@interface Nullable {}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/sub/Exposed.java b/compiler/src/it/functional-tests/src/main/java/test/sub/Exposed.java
deleted file mode 100644
index 9195b33f9..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/sub/Exposed.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package test.sub;
-
-import javax.inject.Inject;
-import test.Generic;
-import test.Generic2;
-
-public class Exposed {
-  
-  @Inject public Generic2<PackagePrivate> gpp2;
-  @Inject public Generic2<PackagePrivateContainer.PublicEnclosed> gppc2;
-
-  public Generic<PackagePrivate> gpp;
-  public Generic<PackagePrivateContainer.PublicEnclosed> gppc;
-  
-  @Inject Exposed(Generic<PackagePrivate> gpp, Generic<PackagePrivateContainer.PublicEnclosed> gppc) {
-    this.gpp = gpp;
-    this.gppc = gppc;
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/sub/PackagePrivate.java b/compiler/src/it/functional-tests/src/main/java/test/sub/PackagePrivate.java
deleted file mode 100644
index 9af646a50..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/sub/PackagePrivate.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package test.sub;
-
-import javax.inject.Inject;
-
-class PackagePrivate {  
-  @Inject PackagePrivate() {}
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/sub/PackagePrivateContainer.java b/compiler/src/it/functional-tests/src/main/java/test/sub/PackagePrivateContainer.java
deleted file mode 100644
index 765b01504..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/sub/PackagePrivateContainer.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package test.sub;
-
-import javax.inject.Inject;
-
-class PackagePrivateContainer {  
-  public static class PublicEnclosed {
-    @Inject PublicEnclosed() {}
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/sub/PublicSubclass.java b/compiler/src/it/functional-tests/src/main/java/test/sub/PublicSubclass.java
deleted file mode 100644
index 586d55d93..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/sub/PublicSubclass.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package test.sub;
-
-import javax.inject.Inject;
-import test.Generic;
-
-public class PublicSubclass extends Generic<PackagePrivate> {
-  @Inject public PublicSubclass(PackagePrivate pp) {
-    super(pp);
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/sub/PublicSubclass2.java b/compiler/src/it/functional-tests/src/main/java/test/sub/PublicSubclass2.java
deleted file mode 100644
index c356fa8f0..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/sub/PublicSubclass2.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package test.sub;
-
-import javax.inject.Inject;
-import test.Generic;
-
-public class PublicSubclass2 extends Generic<PackagePrivateContainer.PublicEnclosed> {
-  @Inject public PublicSubclass2(PackagePrivateContainer.PublicEnclosed pp) {
-    super(pp);
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/OnlyUsedInChild.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/OnlyUsedInChild.java
deleted file mode 100644
index 2dd8d20d3..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/OnlyUsedInChild.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package test.subcomponent.repeat;
-
-abstract class OnlyUsedInChild {
-
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/OnlyUsedInParent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/OnlyUsedInParent.java
deleted file mode 100644
index cc22b1e05..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/OnlyUsedInParent.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package test.subcomponent.repeat;
-
-abstract class OnlyUsedInParent {
-
-}
diff --git a/compiler/src/it/functional-tests/src/test/java/test/DependsOnGeneratedCodeTest.java b/compiler/src/it/functional-tests/src/test/java/test/DependsOnGeneratedCodeTest.java
deleted file mode 100644
index 418f9f9fb..000000000
--- a/compiler/src/it/functional-tests/src/test/java/test/DependsOnGeneratedCodeTest.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test;
-
-import static com.google.common.truth.Truth.assertThat;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.JUnit4;
-
-/**
- * @see <a href="http://b/19435358">Bug 19435358</a>
- */
-@RunWith(JUnit4.class)
-public class DependsOnGeneratedCodeTest {
-  @Test public void testComponentDependsOnGeneratedCode() {
-    assertThat(DaggerComponentDependsOnGeneratedCode.create().needsFactory()).isNotNull();
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/test/java/test/NonComponentDependencyTest.java b/compiler/src/it/functional-tests/src/test/java/test/NonComponentDependencyTest.java
deleted file mode 100644
index 6ed6691a2..000000000
--- a/compiler/src/it/functional-tests/src/test/java/test/NonComponentDependencyTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test;
-
-import static com.google.common.truth.Truth.assertThat;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.JUnit4;
-
-@RunWith(JUnit4.class)
-public class NonComponentDependencyTest {
-  @Test public void testThing() {
-    NonComponentDependencyComponent component =
-        DaggerNonComponentDependencyComponent.builder()
-            .thingComponent(new NonComponentDependencyComponent.ThingComponentImpl())
-            .build();
-    assertThat(component).isNotNull();
-    assertThat(component.thingTwo()).isNotNull();
-  }
-}
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/SimpleTest.java b/compiler/src/it/producers-functional-tests/src/test/java/producerstest/SimpleTest.java
deleted file mode 100644
index 5c52e0382..000000000
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/SimpleTest.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package producerstest;
-
-import static com.google.common.truth.Truth.assertThat;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.JUnit4;
-
-@RunWith(JUnit4.class)
-public class SimpleTest {
-  @Test public void testSimpleComponent() throws Exception {
-    SimpleComponent simpleComponent = DaggerSimpleComponent.create();
-    assertThat(simpleComponent).isNotNull();
-    assertThat(simpleComponent.response().get().data()).isEqualTo("Hello, Request #5!");
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/A.java b/javatests/dagger/functional/A.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/A.java
rename to javatests/dagger/functional/A.java
index b6c27338b..c295dc1ef 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/A.java
+++ b/javatests/dagger/functional/A.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/AbstractMembersInjectingBaseClass.java b/javatests/dagger/functional/AbstractMembersInjectingBaseClass.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/AbstractMembersInjectingBaseClass.java
rename to javatests/dagger/functional/AbstractMembersInjectingBaseClass.java
index 7e9676888..fcab3184a 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/AbstractMembersInjectingBaseClass.java
+++ b/javatests/dagger/functional/AbstractMembersInjectingBaseClass.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/AbstractMiddleClassWithoutMembers.java b/javatests/dagger/functional/AbstractMiddleClassWithoutMembers.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/AbstractMiddleClassWithoutMembers.java
rename to javatests/dagger/functional/AbstractMiddleClassWithoutMembers.java
index 41bcddbdc..4ff55ebb3 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/AbstractMiddleClassWithoutMembers.java
+++ b/javatests/dagger/functional/AbstractMiddleClassWithoutMembers.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 abstract class AbstractMiddleClassWithoutMembers extends AbstractMembersInjectingBaseClass {
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/B.java b/javatests/dagger/functional/B.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/B.java
rename to javatests/dagger/functional/B.java
index 844f9d7cb..55d05af9d 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/B.java
+++ b/javatests/dagger/functional/B.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/BUILD b/javatests/dagger/functional/BUILD
similarity index 68%
rename from compiler/src/it/functional-tests/BUILD
rename to javatests/dagger/functional/BUILD
index 1e705697e..093b6abec 100644
--- a/compiler/src/it/functional-tests/BUILD
+++ b/javatests/dagger/functional/BUILD
@@ -20,47 +20,28 @@ package(default_visibility = ["//:src"])
 load(
     "//:build_defs.bzl",
     "DOCLINT_HTML_AND_SYNTAX",
-    "DOCLINT_REFERENCES",
     "PRE_JAVA_8_INFERENCE_OPTS",
 )
+load("//:test_defs.bzl", "GenJavaTests")
 
-# Sample code to be tested in functional tests.
-java_library(
-    name = "code_under_test",
-    testonly = 1,
+GenJavaTests(
+    name = "functional_tests",
     srcs = glob(
-        ["src/main/java/**/*.java"],
+        ["**/*.java"],
     ),
     javacopts = PRE_JAVA_8_INFERENCE_OPTS + DOCLINT_HTML_AND_SYNTAX,
     # NOTE: This should not depend on Guava or jsr305 to ensure that Dagger can be
-    # used without a Guava and jsr305 deps.
-    deps = [
-        "//:dagger_with_compiler",
-        "//third_party:auto_factory",
-        "//third_party:auto_value",
-        "//third_party:jsr330_inject",
+    # used without Guava and jsr305 deps.
+    test_only_deps = [
+        "//third_party:guava_testlib",
+        "//third_party:guava",
+        "//third_party:truth",
         "//third_party:junit",
     ],
-)
-
-load("//:test_defs.bzl", "GenJavaTests")
-
-GenJavaTests(
-    name = "test_lib",
-    srcs = glob(
-        ["src/test/java/**/*.java"],
-    ),
-    javacopts = PRE_JAVA_8_INFERENCE_OPTS + DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
     deps = [
-        ":code_under_test",
         "//:dagger_with_compiler",
+        "//third_party:auto_factory",
         "//third_party:auto_value",
-        "//third_party:guava",
-        "//third_party:guava_testlib",
         "//third_party:jsr330_inject",
-        "//third_party:junit",
-        "//third_party:truth",
     ],
 )
-
-test_suite(name = "AllTests")
diff --git a/javatests/dagger/functional/BasicAbstractClassComponent.java b/javatests/dagger/functional/BasicAbstractClassComponent.java
new file mode 100644
index 000000000..2bd849daf
--- /dev/null
+++ b/javatests/dagger/functional/BasicAbstractClassComponent.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import dagger.Component;
+
+/**
+ * This component tests behavior equivalent to {@link BasicComponent}, but as an abstract class
+ * rather than an interface.
+ */
+@Component(modules = {PrimitivesModule.class, NullableModule.class})
+abstract class BasicAbstractClassComponent implements BasicComponent {
+  void throwAParty() {
+    throw new RuntimeException("Paaarrrrrtaaaaaaaay!");
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/BasicComponent.java b/javatests/dagger/functional/BasicComponent.java
similarity index 75%
rename from compiler/src/it/functional-tests/src/main/java/test/BasicComponent.java
rename to javatests/dagger/functional/BasicComponent.java
index 6f068c51e..ac5f098eb 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/BasicComponent.java
+++ b/javatests/dagger/functional/BasicComponent.java
@@ -1,26 +1,26 @@
 /*
-* Copyright (C) 2014 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Copyright (C) 2014 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 
-package test;
+package dagger.functional;
 
 import dagger.Component;
 import dagger.Lazy;
 import dagger.MembersInjector;
+import dagger.functional.NullableModule.Nullable;
 import javax.inject.Provider;
-import test.NullableModule.Nullable;
 
 @Component(modules = {PrimitivesModule.class, NullableModule.class})
 interface BasicComponent extends Injector<Thing> {
diff --git a/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java b/javatests/dagger/functional/BasicTest.java
similarity index 77%
rename from compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
rename to javatests/dagger/functional/BasicTest.java
index 5b298e620..26f277e43 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
+++ b/javatests/dagger/functional/BasicTest.java
@@ -1,38 +1,38 @@
 /*
-* Copyright (C) 2014 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Copyright (C) 2014 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 
-package test;
+package dagger.functional;
 
 import static com.google.common.truth.Truth.assertThat;
-import static test.PrimitivesModule.BOUND_BOOLEAN;
-import static test.PrimitivesModule.BOUND_BOOLEAN_ARRAY;
-import static test.PrimitivesModule.BOUND_BYTE;
-import static test.PrimitivesModule.BOUND_BYTE_ARRAY;
-import static test.PrimitivesModule.BOUND_CHAR;
-import static test.PrimitivesModule.BOUND_CHAR_ARRAY;
-import static test.PrimitivesModule.BOUND_DOUBLE;
-import static test.PrimitivesModule.BOUND_DOUBLE_ARRAY;
-import static test.PrimitivesModule.BOUND_FLOAT;
-import static test.PrimitivesModule.BOUND_FLOAT_ARRAY;
-import static test.PrimitivesModule.BOUND_INT;
-import static test.PrimitivesModule.BOUND_INT_ARRAY;
-import static test.PrimitivesModule.BOUND_LONG;
-import static test.PrimitivesModule.BOUND_LONG_ARRAY;
-import static test.PrimitivesModule.BOUND_SHORT;
-import static test.PrimitivesModule.BOUND_SHORT_ARRAY;
+import static dagger.functional.PrimitivesModule.BOUND_BOOLEAN;
+import static dagger.functional.PrimitivesModule.BOUND_BOOLEAN_ARRAY;
+import static dagger.functional.PrimitivesModule.BOUND_BYTE;
+import static dagger.functional.PrimitivesModule.BOUND_BYTE_ARRAY;
+import static dagger.functional.PrimitivesModule.BOUND_CHAR;
+import static dagger.functional.PrimitivesModule.BOUND_CHAR_ARRAY;
+import static dagger.functional.PrimitivesModule.BOUND_DOUBLE;
+import static dagger.functional.PrimitivesModule.BOUND_DOUBLE_ARRAY;
+import static dagger.functional.PrimitivesModule.BOUND_FLOAT;
+import static dagger.functional.PrimitivesModule.BOUND_FLOAT_ARRAY;
+import static dagger.functional.PrimitivesModule.BOUND_INT;
+import static dagger.functional.PrimitivesModule.BOUND_INT_ARRAY;
+import static dagger.functional.PrimitivesModule.BOUND_LONG;
+import static dagger.functional.PrimitivesModule.BOUND_LONG_ARRAY;
+import static dagger.functional.PrimitivesModule.BOUND_SHORT;
+import static dagger.functional.PrimitivesModule.BOUND_SHORT_ARRAY;
 
 import dagger.Lazy;
 import javax.inject.Provider;
diff --git a/javatests/dagger/functional/BooleanKey.java b/javatests/dagger/functional/BooleanKey.java
new file mode 100644
index 000000000..28e1c086a
--- /dev/null
+++ b/javatests/dagger/functional/BooleanKey.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import dagger.MapKey;
+
+@MapKey(unwrapValue = true)
+@interface BooleanKey {
+  boolean value();
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/BoundedGenericComponent.java b/javatests/dagger/functional/BoundedGenericComponent.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/main/java/test/BoundedGenericComponent.java
rename to javatests/dagger/functional/BoundedGenericComponent.java
index 605bf0ae5..270316ea8 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/BoundedGenericComponent.java
+++ b/javatests/dagger/functional/BoundedGenericComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import dagger.Component;
 import java.util.ArrayList;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/BoundedGenericModule.java b/javatests/dagger/functional/BoundedGenericModule.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/main/java/test/BoundedGenericModule.java
rename to javatests/dagger/functional/BoundedGenericModule.java
index f24f46166..b630cd65b 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/BoundedGenericModule.java
+++ b/javatests/dagger/functional/BoundedGenericModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/BoundedGenerics.java b/javatests/dagger/functional/BoundedGenerics.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/main/java/test/BoundedGenerics.java
rename to javatests/dagger/functional/BoundedGenerics.java
index d433728aa..812cd0454 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/BoundedGenerics.java
+++ b/javatests/dagger/functional/BoundedGenerics.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import java.util.List;
 import javax.inject.Inject;
diff --git a/javatests/dagger/functional/ByteKey.java b/javatests/dagger/functional/ByteKey.java
new file mode 100644
index 000000000..f0ee7ecee
--- /dev/null
+++ b/javatests/dagger/functional/ByteKey.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import dagger.MapKey;
+
+@MapKey(unwrapValue = true)
+@interface ByteKey {
+  byte value();
+}
diff --git a/javatests/dagger/functional/CharKey.java b/javatests/dagger/functional/CharKey.java
new file mode 100644
index 000000000..3e1278529
--- /dev/null
+++ b/javatests/dagger/functional/CharKey.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import dagger.MapKey;
+
+@MapKey(unwrapValue = true)
+@interface CharKey {
+  char value();
+}
diff --git a/javatests/dagger/functional/ChildDoubleModule.java b/javatests/dagger/functional/ChildDoubleModule.java
new file mode 100644
index 000000000..cff8f0b7b
--- /dev/null
+++ b/javatests/dagger/functional/ChildDoubleModule.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import dagger.Module;
+import dagger.Provides;
+import java.util.ArrayList;
+import java.util.List;
+
+@Module
+class ChildDoubleModule extends ParentModule<Double, String, List<Double>> {
+
+  @Provides Double provideDouble() {
+    return 3d;
+  }
+
+  @Provides List<Double> provideListOfDouble() {
+    List<Double> list = new ArrayList<>();
+    list.add(4d);
+    return list;
+  }
+
+}
diff --git a/javatests/dagger/functional/ChildIntegerModule.java b/javatests/dagger/functional/ChildIntegerModule.java
new file mode 100644
index 000000000..45c7c1a4a
--- /dev/null
+++ b/javatests/dagger/functional/ChildIntegerModule.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import dagger.Module;
+import dagger.Provides;
+import java.util.ArrayList;
+import java.util.List;
+
+@Module
+class ChildIntegerModule extends ParentModule<Integer, String, List<Integer>> {
+
+  @Provides Integer provideInteger() {
+    return 1;
+  }
+
+  @Provides List<Integer> provideListOfInteger() {
+    List<Integer> list = new ArrayList<>();
+    list.add(2);
+    return list;
+  }
+
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ComplexGenerics.java b/javatests/dagger/functional/ComplexGenerics.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/main/java/test/ComplexGenerics.java
rename to javatests/dagger/functional/ComplexGenerics.java
index 272b29bec..9309583b3 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/ComplexGenerics.java
+++ b/javatests/dagger/functional/ComplexGenerics.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import dagger.Lazy;
 import javax.inject.Inject;
diff --git a/javatests/dagger/functional/ComponentDependsOnGeneratedCode.java b/javatests/dagger/functional/ComponentDependsOnGeneratedCode.java
new file mode 100644
index 000000000..9c44c5c90
--- /dev/null
+++ b/javatests/dagger/functional/ComponentDependsOnGeneratedCode.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import dagger.Component;
+
+/**
+ * A component that indirectly depends on code generated by another processor, in this case
+ * {@link com.google.auto.factory.AutoFactory}. Neither this type nor its immediately referenced
+ * types are generated, but {@link NeedsFactory} depends on the generated
+ * {@link NeedsFactory_SomethingFactory}.
+ *
+ */
+@Component
+interface ComponentDependsOnGeneratedCode {
+  NeedsFactory needsFactory();
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ComponentSupertypeDependsOnGeneratedCode.java b/javatests/dagger/functional/ComponentSupertypeDependsOnGeneratedCode.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/main/java/test/ComponentSupertypeDependsOnGeneratedCode.java
rename to javatests/dagger/functional/ComponentSupertypeDependsOnGeneratedCode.java
index 28fcf5fc8..a26292a34 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/ComponentSupertypeDependsOnGeneratedCode.java
+++ b/javatests/dagger/functional/ComponentSupertypeDependsOnGeneratedCode.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import dagger.Component;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ComponentSupertypeDependsOnGeneratedCodeInterface.java b/javatests/dagger/functional/ComponentSupertypeDependsOnGeneratedCodeInterface.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/ComponentSupertypeDependsOnGeneratedCodeInterface.java
rename to javatests/dagger/functional/ComponentSupertypeDependsOnGeneratedCodeInterface.java
index 325c44970..7744d1991 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/ComponentSupertypeDependsOnGeneratedCodeInterface.java
+++ b/javatests/dagger/functional/ComponentSupertypeDependsOnGeneratedCodeInterface.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 interface ComponentSupertypeDependsOnGeneratedCodeInterface {
   NeedsFactory_SomethingFactory somethingFactory();
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ComponentWithReusableBindings.java b/javatests/dagger/functional/ComponentWithReusableBindings.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/main/java/test/ComponentWithReusableBindings.java
rename to javatests/dagger/functional/ComponentWithReusableBindings.java
index ad1e4c881..17484c68a 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/ComponentWithReusableBindings.java
+++ b/javatests/dagger/functional/ComponentWithReusableBindings.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import dagger.Component;
 import dagger.Module;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ComponentsWithNestedModules.java b/javatests/dagger/functional/ComponentsWithNestedModules.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/main/java/test/ComponentsWithNestedModules.java
rename to javatests/dagger/functional/ComponentsWithNestedModules.java
index 48faad190..a42dd73cf 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/ComponentsWithNestedModules.java
+++ b/javatests/dagger/functional/ComponentsWithNestedModules.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import dagger.Component;
 import dagger.Module;
diff --git a/javatests/dagger/functional/DependsOnGeneratedCodeTest.java b/javatests/dagger/functional/DependsOnGeneratedCodeTest.java
new file mode 100644
index 000000000..ca7631ff5
--- /dev/null
+++ b/javatests/dagger/functional/DependsOnGeneratedCodeTest.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+/**
+ * @see <a href="http://b/19435358">Bug 19435358</a>
+ */
+@RunWith(JUnit4.class)
+public class DependsOnGeneratedCodeTest {
+  @Test public void testComponentDependsOnGeneratedCode() {
+    assertThat(DaggerComponentDependsOnGeneratedCode.create().needsFactory()).isNotNull();
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/Generic.java b/javatests/dagger/functional/Generic.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/Generic.java
rename to javatests/dagger/functional/Generic.java
index 72e8f1c5d..9e77efe08 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/Generic.java
+++ b/javatests/dagger/functional/Generic.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/Generic2.java b/javatests/dagger/functional/Generic2.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/Generic2.java
rename to javatests/dagger/functional/Generic2.java
index 0d353bf6b..f53c0f86c 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/Generic2.java
+++ b/javatests/dagger/functional/Generic2.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/GenericChild.java b/javatests/dagger/functional/GenericChild.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/main/java/test/GenericChild.java
rename to javatests/dagger/functional/GenericChild.java
index 3c42bc885..bb7330edf 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/GenericChild.java
+++ b/javatests/dagger/functional/GenericChild.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/GenericComponent.java b/javatests/dagger/functional/GenericComponent.java
similarity index 91%
rename from compiler/src/it/functional-tests/src/main/java/test/GenericComponent.java
rename to javatests/dagger/functional/GenericComponent.java
index 6ce8d89ac..239179b15 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/GenericComponent.java
+++ b/javatests/dagger/functional/GenericComponent.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import dagger.Component;
-import test.sub.Exposed;
-import test.sub.PublicSubclass;
+import dagger.functional.sub.Exposed;
+import dagger.functional.sub.PublicSubclass;
 
 @Component(modules = {ChildDoubleModule.class, ChildIntegerModule.class})
 interface GenericComponent {
diff --git a/compiler/src/it/functional-tests/src/main/java/test/GenericDoubleReferences.java b/javatests/dagger/functional/GenericDoubleReferences.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/GenericDoubleReferences.java
rename to javatests/dagger/functional/GenericDoubleReferences.java
index d70f9e25c..ff79a9829 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/GenericDoubleReferences.java
+++ b/javatests/dagger/functional/GenericDoubleReferences.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/GenericNoDeps.java b/javatests/dagger/functional/GenericNoDeps.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/GenericNoDeps.java
rename to javatests/dagger/functional/GenericNoDeps.java
index b569ecb3e..c3f38b4de 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/GenericNoDeps.java
+++ b/javatests/dagger/functional/GenericNoDeps.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/GenericParent.java b/javatests/dagger/functional/GenericParent.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/main/java/test/GenericParent.java
rename to javatests/dagger/functional/GenericParent.java
index 1f7a322f3..658530e52 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/GenericParent.java
+++ b/javatests/dagger/functional/GenericParent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import javax.inject.Inject;
 import javax.inject.Provider;
diff --git a/compiler/src/it/functional-tests/src/test/java/test/GenericTest.java b/javatests/dagger/functional/GenericTest.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/test/java/test/GenericTest.java
rename to javatests/dagger/functional/GenericTest.java
index 0bb10b20b..09c1fd4a1 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/GenericTest.java
+++ b/javatests/dagger/functional/GenericTest.java
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 
+import dagger.functional.sub.Exposed;
+import dagger.functional.sub.PublicSubclass;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
@@ -26,8 +28,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import test.sub.Exposed;
-import test.sub.PublicSubclass;
 
 @RunWith(JUnit4.class)
 public class GenericTest {
diff --git a/compiler/src/it/functional-tests/src/main/java/test/InjectedThing.java b/javatests/dagger/functional/InjectedThing.java
similarity index 99%
rename from compiler/src/it/functional-tests/src/main/java/test/InjectedThing.java
rename to javatests/dagger/functional/InjectedThing.java
index a262e87ae..c518faafc 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/InjectedThing.java
+++ b/javatests/dagger/functional/InjectedThing.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import dagger.Lazy;
 import dagger.MembersInjector;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/Injector.java b/javatests/dagger/functional/Injector.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/main/java/test/Injector.java
rename to javatests/dagger/functional/Injector.java
index e890640a2..d001f93b2 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/Injector.java
+++ b/javatests/dagger/functional/Injector.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import dagger.Lazy;
 import dagger.MembersInjector;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ModuleIncludesCollectedFromModuleSuperclasses.java b/javatests/dagger/functional/ModuleIncludesCollectedFromModuleSuperclasses.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/main/java/test/ModuleIncludesCollectedFromModuleSuperclasses.java
rename to javatests/dagger/functional/ModuleIncludesCollectedFromModuleSuperclasses.java
index 0b330a1f9..fb18b6ddf 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/ModuleIncludesCollectedFromModuleSuperclasses.java
+++ b/javatests/dagger/functional/ModuleIncludesCollectedFromModuleSuperclasses.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import dagger.Component;
 import dagger.Module;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ModuleWithConflictingNames.java b/javatests/dagger/functional/ModuleWithConflictingNames.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/main/java/test/ModuleWithConflictingNames.java
rename to javatests/dagger/functional/ModuleWithConflictingNames.java
index 2ec4f387d..43dd58e17 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/ModuleWithConflictingNames.java
+++ b/javatests/dagger/functional/ModuleWithConflictingNames.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/MultibindingComponent.java b/javatests/dagger/functional/MultibindingComponent.java
similarity index 70%
rename from compiler/src/it/functional-tests/src/main/java/test/MultibindingComponent.java
rename to javatests/dagger/functional/MultibindingComponent.java
index cd9aba794..60ed5cf0d 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/MultibindingComponent.java
+++ b/javatests/dagger/functional/MultibindingComponent.java
@@ -1,29 +1,29 @@
 /*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 
-package test;
+package dagger.functional;
 
 import dagger.Component;
+import dagger.functional.sub.ContributionsModule;
 import dagger.multibindings.StringKey;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;
 import javax.inject.Named;
 import javax.inject.Provider;
-import test.sub.ContributionsModule;
 
 @Component(
   modules = {MultibindingModule.class, MultibindsModule.class, ContributionsModule.class},
diff --git a/compiler/src/it/functional-tests/src/main/java/test/MultibindingDependency.java b/javatests/dagger/functional/MultibindingDependency.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/MultibindingDependency.java
rename to javatests/dagger/functional/MultibindingDependency.java
index d4dca4f32..424005107 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/MultibindingDependency.java
+++ b/javatests/dagger/functional/MultibindingDependency.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 interface MultibindingDependency {
   double doubleDependency();
diff --git a/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java b/javatests/dagger/functional/MultibindingModule.java
similarity index 87%
rename from compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
rename to javatests/dagger/functional/MultibindingModule.java
index 8bb18db55..e16762810 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
+++ b/javatests/dagger/functional/MultibindingModule.java
@@ -1,20 +1,20 @@
 /*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package test;
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java b/javatests/dagger/functional/MultibindingTest.java
similarity index 93%
rename from compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
rename to javatests/dagger/functional/MultibindingTest.java
index b4989734e..d99e46d12 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
+++ b/javatests/dagger/functional/MultibindingTest.java
@@ -1,18 +1,20 @@
 /*
  * Copyright (C) 2015 The Dagger Authors.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing, software distributed under the License
- * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
- * or implied. See the License for the specific language governing permissions and limitations under
- * the License.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import static com.google.common.truth.Truth.assertThat;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/MultibindsModule.java b/javatests/dagger/functional/MultibindsModule.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/main/java/test/MultibindsModule.java
rename to javatests/dagger/functional/MultibindsModule.java
index 7e213e61b..65ba7c82d 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/MultibindsModule.java
+++ b/javatests/dagger/functional/MultibindsModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import dagger.Module;
 import dagger.multibindings.Multibinds;
diff --git a/javatests/dagger/functional/NeedsFactory.java b/javatests/dagger/functional/NeedsFactory.java
new file mode 100644
index 000000000..2ea01ec69
--- /dev/null
+++ b/javatests/dagger/functional/NeedsFactory.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import com.google.auto.factory.AutoFactory;
+import javax.inject.Inject;
+
+class NeedsFactory {
+  @Inject
+  NeedsFactory(@SuppressWarnings("unused") NeedsFactory_SomethingFactory somethingFactory) {}
+
+  @AutoFactory
+  static class Something {}
+}
+
diff --git a/javatests/dagger/functional/NestedAnnotationContainer.java b/javatests/dagger/functional/NestedAnnotationContainer.java
new file mode 100644
index 000000000..a2b61fa13
--- /dev/null
+++ b/javatests/dagger/functional/NestedAnnotationContainer.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import dagger.MapKey;
+
+public final class NestedAnnotationContainer {
+
+  @MapKey(unwrapValue = false)
+  @interface NestedWrappedKey {
+    Class<?> value();
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/test/java/test/NestedTest.java b/javatests/dagger/functional/NestedTest.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/test/java/test/NestedTest.java
rename to javatests/dagger/functional/NestedTest.java
index 09d2cbedf..c1e21b23e 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/NestedTest.java
+++ b/javatests/dagger/functional/NestedTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import static com.google.common.truth.Truth.assertThat;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/NonComponentDependencyComponent.java b/javatests/dagger/functional/NonComponentDependencyComponent.java
similarity index 54%
rename from compiler/src/it/functional-tests/src/main/java/test/NonComponentDependencyComponent.java
rename to javatests/dagger/functional/NonComponentDependencyComponent.java
index f9f68ced5..ee679fae9 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/NonComponentDependencyComponent.java
+++ b/javatests/dagger/functional/NonComponentDependencyComponent.java
@@ -1,24 +1,24 @@
 /*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 
-package test;
+package dagger.functional;
 
 import dagger.Component;
+import dagger.functional.sub.OtherThing;
 import javax.inject.Inject;
-import test.sub.OtherThing;
 
 @Component(dependencies = {NonComponentDependencyComponent.ThingComponent.class})
 interface NonComponentDependencyComponent {
diff --git a/javatests/dagger/functional/NonComponentDependencyTest.java b/javatests/dagger/functional/NonComponentDependencyTest.java
new file mode 100644
index 000000000..436183fbb
--- /dev/null
+++ b/javatests/dagger/functional/NonComponentDependencyTest.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+@RunWith(JUnit4.class)
+public class NonComponentDependencyTest {
+  @Test public void testThing() {
+    NonComponentDependencyComponent component =
+        DaggerNonComponentDependencyComponent.builder()
+            .thingComponent(new NonComponentDependencyComponent.ThingComponentImpl())
+            .build();
+    assertThat(component).isNotNull();
+    assertThat(component.thingTwo()).isNotNull();
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/NullableModule.java b/javatests/dagger/functional/NullableModule.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/main/java/test/NullableModule.java
rename to javatests/dagger/functional/NullableModule.java
index f1545e47c..406024f17 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/NullableModule.java
+++ b/javatests/dagger/functional/NullableModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/javatests/dagger/functional/NumberClassKey.java b/javatests/dagger/functional/NumberClassKey.java
new file mode 100644
index 000000000..5909a9fb4
--- /dev/null
+++ b/javatests/dagger/functional/NumberClassKey.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import dagger.MapKey;
+
+@MapKey(unwrapValue = true)
+@interface NumberClassKey {
+  Class<? extends Number> value();
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/OuterClassBar.java b/javatests/dagger/functional/OuterClassBar.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/OuterClassBar.java
rename to javatests/dagger/functional/OuterClassBar.java
index 80106e7af..b455595b2 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/OuterClassBar.java
+++ b/javatests/dagger/functional/OuterClassBar.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import dagger.Component;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/OuterClassFoo.java b/javatests/dagger/functional/OuterClassFoo.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/OuterClassFoo.java
rename to javatests/dagger/functional/OuterClassFoo.java
index 73c68c2aa..213bd804c 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/OuterClassFoo.java
+++ b/javatests/dagger/functional/OuterClassFoo.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import dagger.Component;
 
diff --git a/javatests/dagger/functional/ParentModule.java b/javatests/dagger/functional/ParentModule.java
new file mode 100644
index 000000000..8bd4fea3e
--- /dev/null
+++ b/javatests/dagger/functional/ParentModule.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import dagger.Module;
+import dagger.Provides;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+
+@Module
+abstract class ParentModule<A extends Number & Comparable<A>, B, C extends Iterable<A>> {
+  @Provides Iterable<A> provideIterableOfAWithC(A a, C c) {
+    List<A> list = new ArrayList<>();
+    list.add(a);
+    for (A elt : c) {
+      list.add(elt);
+    }
+    return list;
+  }
+
+  @Provides static char provideNonGenericBindingInParameterizedModule() {
+    return 'c';
+  }
+
+  @Provides
+  static List<Set<String>> provideStaticGenericTypeWithNoTypeParametersInParameterizedModule() {
+    return new ArrayList<>();
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/PrimitivesModule.java b/javatests/dagger/functional/PrimitivesModule.java
similarity index 78%
rename from compiler/src/it/functional-tests/src/main/java/test/PrimitivesModule.java
rename to javatests/dagger/functional/PrimitivesModule.java
index acbf271df..7b7203bc4 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/PrimitivesModule.java
+++ b/javatests/dagger/functional/PrimitivesModule.java
@@ -1,4 +1,20 @@
-package test;
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ReferencesGeneric.java b/javatests/dagger/functional/ReferencesGeneric.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/ReferencesGeneric.java
rename to javatests/dagger/functional/ReferencesGeneric.java
index 453bdfb7e..c83dbcced 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/ReferencesGeneric.java
+++ b/javatests/dagger/functional/ReferencesGeneric.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ReleasableReferencesComponents.java b/javatests/dagger/functional/ReleasableReferencesComponents.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/main/java/test/ReleasableReferencesComponents.java
rename to javatests/dagger/functional/ReleasableReferencesComponents.java
index 597b91fdf..4717e8970 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/ReleasableReferencesComponents.java
+++ b/javatests/dagger/functional/ReleasableReferencesComponents.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
+import static dagger.functional.ReleasableReferencesComponents.Thing.thing;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
-import static test.ReleasableReferencesComponents.Thing.thing;
 
 import com.google.auto.value.AutoValue;
 import dagger.Component;
diff --git a/compiler/src/it/functional-tests/src/test/java/test/ReleasableReferencesComponentsTest.java b/javatests/dagger/functional/ReleasableReferencesComponentsTest.java
similarity index 93%
rename from compiler/src/it/functional-tests/src/test/java/test/ReleasableReferencesComponentsTest.java
rename to javatests/dagger/functional/ReleasableReferencesComponentsTest.java
index 5d46da763..2e30791f3 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/ReleasableReferencesComponentsTest.java
+++ b/javatests/dagger/functional/ReleasableReferencesComponentsTest.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import static com.google.common.truth.Truth.assertThat;
-import static test.ReleasableReferencesComponents.Thing.thing;
+import static dagger.functional.ReleasableReferencesComponents.Thing.thing;
 
 import com.google.auto.value.AutoAnnotation;
 import com.google.common.base.Function;
@@ -27,6 +27,20 @@
 import com.google.common.collect.Multimaps;
 import com.google.common.testing.GcFinalization;
 import com.google.common.testing.GcFinalization.FinalizationPredicate;
+import dagger.functional.ReleasableReferencesComponents.Child;
+import dagger.functional.ReleasableReferencesComponents.ChildModule;
+import dagger.functional.ReleasableReferencesComponents.ChildRegularScope;
+import dagger.functional.ReleasableReferencesComponents.ChildReleasableScope1;
+import dagger.functional.ReleasableReferencesComponents.ChildReleasableScope2;
+import dagger.functional.ReleasableReferencesComponents.ChildReleasableScope3;
+import dagger.functional.ReleasableReferencesComponents.Metadata1;
+import dagger.functional.ReleasableReferencesComponents.Parent;
+import dagger.functional.ReleasableReferencesComponents.ParentModule;
+import dagger.functional.ReleasableReferencesComponents.ParentRegularScope;
+import dagger.functional.ReleasableReferencesComponents.ParentReleasableScope1;
+import dagger.functional.ReleasableReferencesComponents.ParentReleasableScope2;
+import dagger.functional.ReleasableReferencesComponents.Thing;
+import dagger.functional.ReleasableReferencesComponents.ThingComponent;
 import dagger.releasablereferences.ReleasableReferenceManager;
 import dagger.releasablereferences.TypedReleasableReferenceManager;
 import java.lang.annotation.Annotation;
@@ -36,20 +50,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import test.ReleasableReferencesComponents.Child;
-import test.ReleasableReferencesComponents.ChildModule;
-import test.ReleasableReferencesComponents.ChildRegularScope;
-import test.ReleasableReferencesComponents.ChildReleasableScope1;
-import test.ReleasableReferencesComponents.ChildReleasableScope2;
-import test.ReleasableReferencesComponents.ChildReleasableScope3;
-import test.ReleasableReferencesComponents.Metadata1;
-import test.ReleasableReferencesComponents.Parent;
-import test.ReleasableReferencesComponents.ParentModule;
-import test.ReleasableReferencesComponents.ParentRegularScope;
-import test.ReleasableReferencesComponents.ParentReleasableScope1;
-import test.ReleasableReferencesComponents.ParentReleasableScope2;
-import test.ReleasableReferencesComponents.Thing;
-import test.ReleasableReferencesComponents.ThingComponent;
 
 @RunWith(JUnit4.class)
 public final class ReleasableReferencesComponentsTest {
diff --git a/compiler/src/it/functional-tests/src/test/java/test/ReusableTest.java b/javatests/dagger/functional/ReusableTest.java
similarity index 91%
rename from compiler/src/it/functional-tests/src/test/java/test/ReusableTest.java
rename to javatests/dagger/functional/ReusableTest.java
index 27aa425b6..8149ff46f 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/ReusableTest.java
+++ b/javatests/dagger/functional/ReusableTest.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import static com.google.common.truth.Truth.assertThat;
 
+import dagger.functional.ComponentWithReusableBindings.ChildOne;
+import dagger.functional.ComponentWithReusableBindings.ChildTwo;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import test.ComponentWithReusableBindings.ChildOne;
-import test.ComponentWithReusableBindings.ChildTwo;
 
 @RunWith(JUnit4.class)
 public class ReusableTest {
diff --git a/javatests/dagger/functional/ScopedGeneric.java b/javatests/dagger/functional/ScopedGeneric.java
new file mode 100644
index 000000000..da7e157e6
--- /dev/null
+++ b/javatests/dagger/functional/ScopedGeneric.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import javax.inject.Inject;
+import javax.inject.Singleton;
+
+@Singleton
+class ScopedGeneric<T> { 
+  final T t;  
+  @Inject ScopedGeneric(T t) {
+    this.t = t;
+  }  
+}
diff --git a/javatests/dagger/functional/ShortKey.java b/javatests/dagger/functional/ShortKey.java
new file mode 100644
index 000000000..3d81d8f39
--- /dev/null
+++ b/javatests/dagger/functional/ShortKey.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import dagger.MapKey;
+
+@MapKey(unwrapValue = true)
+@interface ShortKey {
+  short value();
+}
diff --git a/javatests/dagger/functional/SingletonGenericComponent.java b/javatests/dagger/functional/SingletonGenericComponent.java
new file mode 100644
index 000000000..adb610a81
--- /dev/null
+++ b/javatests/dagger/functional/SingletonGenericComponent.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import dagger.Component;
+import javax.inject.Singleton;
+
+@Singleton
+@Component
+interface SingletonGenericComponent {
+  
+  ScopedGeneric<A> scopedGenericA();
+  ScopedGeneric<B> scopedGenericB();
+
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/SomeQualifier.java b/javatests/dagger/functional/SomeQualifier.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/SomeQualifier.java
rename to javatests/dagger/functional/SomeQualifier.java
index 9ead648b3..126398cf1 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/SomeQualifier.java
+++ b/javatests/dagger/functional/SomeQualifier.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
diff --git a/javatests/dagger/functional/Thing.java b/javatests/dagger/functional/Thing.java
new file mode 100644
index 000000000..b51b96ac1
--- /dev/null
+++ b/javatests/dagger/functional/Thing.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2014 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import dagger.functional.sub.OtherThing;
+import javax.inject.Inject;
+
+final class Thing {
+  @Inject Thing(@SuppressWarnings("unused") OtherThing unused) {}
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/TypeWithInheritedMembersInjection.java b/javatests/dagger/functional/TypeWithInheritedMembersInjection.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/TypeWithInheritedMembersInjection.java
rename to javatests/dagger/functional/TypeWithInheritedMembersInjection.java
index 8bb6fcac4..b74f34842 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/TypeWithInheritedMembersInjection.java
+++ b/javatests/dagger/functional/TypeWithInheritedMembersInjection.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test;
+package dagger.functional;
 
 import javax.inject.Inject;
 
diff --git a/javatests/dagger/functional/UnwrappedAnnotationKey.java b/javatests/dagger/functional/UnwrappedAnnotationKey.java
new file mode 100644
index 000000000..e9298f2bb
--- /dev/null
+++ b/javatests/dagger/functional/UnwrappedAnnotationKey.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import dagger.MapKey;
+import dagger.multibindings.StringKey;
+
+@MapKey(unwrapValue = true)
+@interface UnwrappedAnnotationKey {
+  StringKey value();
+}
diff --git a/javatests/dagger/functional/WrappedAnnotationKey.java b/javatests/dagger/functional/WrappedAnnotationKey.java
new file mode 100644
index 000000000..02561115a
--- /dev/null
+++ b/javatests/dagger/functional/WrappedAnnotationKey.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import dagger.MapKey;
+import dagger.multibindings.ClassKey;
+import dagger.multibindings.StringKey;
+
+@MapKey(unwrapValue = false)
+@interface WrappedAnnotationKey {
+  StringKey value();
+  int[] integers();
+  ClassKey[] annotations();
+  Class<? extends Number>[] classes();
+}
diff --git a/compiler/src/it/functional-tests/src/test/java/test/binds/BindsCollectionsWithoutMultibindingsTest.java b/javatests/dagger/functional/binds/BindsCollectionsWithoutMultibindingsTest.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/test/java/test/binds/BindsCollectionsWithoutMultibindingsTest.java
rename to javatests/dagger/functional/binds/BindsCollectionsWithoutMultibindingsTest.java
index c9f5e93f6..f97dca7d8 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/binds/BindsCollectionsWithoutMultibindingsTest.java
+++ b/javatests/dagger/functional/binds/BindsCollectionsWithoutMultibindingsTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.binds;
+package dagger.functional.binds;
 
 import static com.google.common.truth.Truth.assertThat;
 
diff --git a/compiler/src/it/functional-tests/src/test/java/test/binds/BindsTest.java b/javatests/dagger/functional/binds/BindsTest.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/test/java/test/binds/BindsTest.java
rename to javatests/dagger/functional/binds/BindsTest.java
index 5835b361e..2881091f2 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/binds/BindsTest.java
+++ b/javatests/dagger/functional/binds/BindsTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.binds;
+package dagger.functional.binds;
 
 import static com.google.common.truth.Truth.assertThat;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/binds/Foo.java b/javatests/dagger/functional/binds/Foo.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/binds/Foo.java
rename to javatests/dagger/functional/binds/Foo.java
index 6835ebbba..12b0e4e44 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/binds/Foo.java
+++ b/javatests/dagger/functional/binds/Foo.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.binds;
+package dagger.functional.binds;
 
 /**
  * This is the type that will be bound.  We throw in generics just to complicate the test.
diff --git a/compiler/src/it/functional-tests/src/main/java/test/binds/FooOfObjects.java b/javatests/dagger/functional/binds/FooOfObjects.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/binds/FooOfObjects.java
rename to javatests/dagger/functional/binds/FooOfObjects.java
index bd3950c7b..c50f2fa09 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/binds/FooOfObjects.java
+++ b/javatests/dagger/functional/binds/FooOfObjects.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.binds;
+package dagger.functional.binds;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/binds/FooOfStrings.java b/javatests/dagger/functional/binds/FooOfStrings.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/binds/FooOfStrings.java
rename to javatests/dagger/functional/binds/FooOfStrings.java
index 0243e3a18..42fc704af 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/binds/FooOfStrings.java
+++ b/javatests/dagger/functional/binds/FooOfStrings.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.binds;
+package dagger.functional.binds;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/binds/InterfaceModule.java b/javatests/dagger/functional/binds/InterfaceModule.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/binds/InterfaceModule.java
rename to javatests/dagger/functional/binds/InterfaceModule.java
index 732c040c5..e9d36c0bd 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/binds/InterfaceModule.java
+++ b/javatests/dagger/functional/binds/InterfaceModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.binds;
+package dagger.functional.binds;
 
 import dagger.Binds;
 import dagger.Module;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/binds/SimpleBindingModule.java b/javatests/dagger/functional/binds/SimpleBindingModule.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/main/java/test/binds/SimpleBindingModule.java
rename to javatests/dagger/functional/binds/SimpleBindingModule.java
index ab0288e64..e1d522771 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/binds/SimpleBindingModule.java
+++ b/javatests/dagger/functional/binds/SimpleBindingModule.java
@@ -14,12 +14,13 @@
  * limitations under the License.
  */
 
-package test.binds;
+package dagger.functional.binds;
 
 import dagger.Binds;
 import dagger.Module;
 import dagger.Provides;
 import dagger.Reusable;
+import dagger.functional.SomeQualifier;
 import dagger.multibindings.ElementsIntoSet;
 import dagger.multibindings.IntKey;
 import dagger.multibindings.IntoMap;
@@ -31,7 +32,6 @@
 import java.util.TreeSet;
 import javax.inject.Named;
 import javax.inject.Singleton;
-import test.SomeQualifier;
 
 @Module(includes = InterfaceModule.class)
 abstract class SimpleBindingModule {
diff --git a/compiler/src/it/functional-tests/src/main/java/test/binds/TestComponent.java b/javatests/dagger/functional/binds/TestComponent.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/binds/TestComponent.java
rename to javatests/dagger/functional/binds/TestComponent.java
index 9379dff12..3299dc832 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/binds/TestComponent.java
+++ b/javatests/dagger/functional/binds/TestComponent.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package test.binds;
+package dagger.functional.binds;
 
 import dagger.Component;
+import dagger.functional.SomeQualifier;
 import java.util.Map;
 import java.util.Set;
 import javax.inject.Provider;
 import javax.inject.Singleton;
-import test.SomeQualifier;
 
 @Singleton
 @Component(modules = SimpleBindingModule.class)
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/BuildMethodCovariantReturn.java b/javatests/dagger/functional/builder/BuildMethodCovariantReturn.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/BuildMethodCovariantReturn.java
rename to javatests/dagger/functional/builder/BuildMethodCovariantReturn.java
index be522f5fa..b55981f4e 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/BuildMethodCovariantReturn.java
+++ b/javatests/dagger/functional/builder/BuildMethodCovariantReturn.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Component;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/BuildMethodCovariantReturnInherited.java b/javatests/dagger/functional/builder/BuildMethodCovariantReturnInherited.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/BuildMethodCovariantReturnInherited.java
rename to javatests/dagger/functional/builder/BuildMethodCovariantReturnInherited.java
index a02ddf75a..07ebbc8e6 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/BuildMethodCovariantReturnInherited.java
+++ b/javatests/dagger/functional/builder/BuildMethodCovariantReturnInherited.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Component;
 
diff --git a/compiler/src/it/functional-tests/src/test/java/test/builder/BuilderTest.java b/javatests/dagger/functional/builder/BuilderTest.java
similarity index 99%
rename from compiler/src/it/functional-tests/src/test/java/test/builder/BuilderTest.java
rename to javatests/dagger/functional/builder/BuilderTest.java
index 02ce6e43f..d5c066fd6 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/builder/BuilderTest.java
+++ b/javatests/dagger/functional/builder/BuilderTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/ByteModule.java b/javatests/dagger/functional/builder/ByteModule.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/ByteModule.java
rename to javatests/dagger/functional/builder/ByteModule.java
index feafdd0d6..4b6602f10 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/ByteModule.java
+++ b/javatests/dagger/functional/builder/ByteModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/DepComponent.java b/javatests/dagger/functional/builder/DepComponent.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/DepComponent.java
rename to javatests/dagger/functional/builder/DepComponent.java
index 1d18341f4..6e85c7a21 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/DepComponent.java
+++ b/javatests/dagger/functional/builder/DepComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Component;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/DoubleModule.java b/javatests/dagger/functional/builder/DoubleModule.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/DoubleModule.java
rename to javatests/dagger/functional/builder/DoubleModule.java
index 8cf226bef..d1be37c29 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/DoubleModule.java
+++ b/javatests/dagger/functional/builder/DoubleModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/FloatModule.java b/javatests/dagger/functional/builder/FloatModule.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/FloatModule.java
rename to javatests/dagger/functional/builder/FloatModule.java
index 0d3af1d31..d9990c0d9 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/FloatModule.java
+++ b/javatests/dagger/functional/builder/FloatModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/GenericParent.java b/javatests/dagger/functional/builder/GenericParent.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/GenericParent.java
rename to javatests/dagger/functional/builder/GenericParent.java
index beffe27a6..9563103dd 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/GenericParent.java
+++ b/javatests/dagger/functional/builder/GenericParent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 interface GenericParent<B> {  
   B subcomponentBuilder();
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/Grandchild.java b/javatests/dagger/functional/builder/Grandchild.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/Grandchild.java
rename to javatests/dagger/functional/builder/Grandchild.java
index 759b470df..45fe2130f 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/Grandchild.java
+++ b/javatests/dagger/functional/builder/Grandchild.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Subcomponent;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/IntModuleIncludingDoubleAndFloat.java b/javatests/dagger/functional/builder/IntModuleIncludingDoubleAndFloat.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/IntModuleIncludingDoubleAndFloat.java
rename to javatests/dagger/functional/builder/IntModuleIncludingDoubleAndFloat.java
index 69c12259d..37f5ad777 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/IntModuleIncludingDoubleAndFloat.java
+++ b/javatests/dagger/functional/builder/IntModuleIncludingDoubleAndFloat.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/LongModule.java b/javatests/dagger/functional/builder/LongModule.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/LongModule.java
rename to javatests/dagger/functional/builder/LongModule.java
index cb848a707..7b777ecb5 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/LongModule.java
+++ b/javatests/dagger/functional/builder/LongModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/MiddleChild.java b/javatests/dagger/functional/builder/MiddleChild.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/MiddleChild.java
rename to javatests/dagger/functional/builder/MiddleChild.java
index b606b7986..762e2a040 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/MiddleChild.java
+++ b/javatests/dagger/functional/builder/MiddleChild.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Subcomponent;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/MiddleScope.java b/javatests/dagger/functional/builder/MiddleScope.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/MiddleScope.java
rename to javatests/dagger/functional/builder/MiddleScope.java
index 8f0c8bb67..ac63626e2 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/MiddleScope.java
+++ b/javatests/dagger/functional/builder/MiddleScope.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/OtherMiddleChild.java b/javatests/dagger/functional/builder/OtherMiddleChild.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/OtherMiddleChild.java
rename to javatests/dagger/functional/builder/OtherMiddleChild.java
index a5871c6e8..7ecc01465 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/OtherMiddleChild.java
+++ b/javatests/dagger/functional/builder/OtherMiddleChild.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Subcomponent;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/ParentComponent.java b/javatests/dagger/functional/builder/ParentComponent.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/ParentComponent.java
rename to javatests/dagger/functional/builder/ParentComponent.java
index a9b8fc723..425ba9a04 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/ParentComponent.java
+++ b/javatests/dagger/functional/builder/ParentComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Component;
 import javax.inject.Singleton;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/ParentOfGenericComponent.java b/javatests/dagger/functional/builder/ParentOfGenericComponent.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/ParentOfGenericComponent.java
rename to javatests/dagger/functional/builder/ParentOfGenericComponent.java
index ad0c49193..daeb7d99f 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/ParentOfGenericComponent.java
+++ b/javatests/dagger/functional/builder/ParentOfGenericComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Component;
 import javax.inject.Singleton;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/PrivateConstructors.java b/javatests/dagger/functional/builder/PrivateConstructors.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/PrivateConstructors.java
rename to javatests/dagger/functional/builder/PrivateConstructors.java
index ccba16b74..e5e9aa6cd 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/PrivateConstructors.java
+++ b/javatests/dagger/functional/builder/PrivateConstructors.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Component;
 import dagger.Module;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/RequiresSubcomponentBuilder.java b/javatests/dagger/functional/builder/RequiresSubcomponentBuilder.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/RequiresSubcomponentBuilder.java
rename to javatests/dagger/functional/builder/RequiresSubcomponentBuilder.java
index 23bbaa904..a8dfa219d 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/RequiresSubcomponentBuilder.java
+++ b/javatests/dagger/functional/builder/RequiresSubcomponentBuilder.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import javax.inject.Inject;
 import javax.inject.Provider;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/StringModule.java b/javatests/dagger/functional/builder/StringModule.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/StringModule.java
rename to javatests/dagger/functional/builder/StringModule.java
index c1fb723fb..9fbaa5b43 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/StringModule.java
+++ b/javatests/dagger/functional/builder/StringModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/TestChildComponentWithBuilderAbstractClass.java b/javatests/dagger/functional/builder/TestChildComponentWithBuilderAbstractClass.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/TestChildComponentWithBuilderAbstractClass.java
rename to javatests/dagger/functional/builder/TestChildComponentWithBuilderAbstractClass.java
index 21d1ddd59..1527a44ee 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/TestChildComponentWithBuilderAbstractClass.java
+++ b/javatests/dagger/functional/builder/TestChildComponentWithBuilderAbstractClass.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Subcomponent;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/TestChildComponentWithBuilderInterface.java b/javatests/dagger/functional/builder/TestChildComponentWithBuilderInterface.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/TestChildComponentWithBuilderInterface.java
rename to javatests/dagger/functional/builder/TestChildComponentWithBuilderInterface.java
index 59e39e543..a02b1a176 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/TestChildComponentWithBuilderInterface.java
+++ b/javatests/dagger/functional/builder/TestChildComponentWithBuilderInterface.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Subcomponent;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/TestComponentWithBuilderAbstractClass.java b/javatests/dagger/functional/builder/TestComponentWithBuilderAbstractClass.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/TestComponentWithBuilderAbstractClass.java
rename to javatests/dagger/functional/builder/TestComponentWithBuilderAbstractClass.java
index da966cc6d..636c8f40f 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/TestComponentWithBuilderAbstractClass.java
+++ b/javatests/dagger/functional/builder/TestComponentWithBuilderAbstractClass.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Component;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/TestComponentWithBuilderInterface.java b/javatests/dagger/functional/builder/TestComponentWithBuilderInterface.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/TestComponentWithBuilderInterface.java
rename to javatests/dagger/functional/builder/TestComponentWithBuilderInterface.java
index 6cd556199..ba55090ad 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/TestComponentWithBuilderInterface.java
+++ b/javatests/dagger/functional/builder/TestComponentWithBuilderInterface.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Component;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/TestComponentWithGenericBuilderAbstractClass.java b/javatests/dagger/functional/builder/TestComponentWithGenericBuilderAbstractClass.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/TestComponentWithGenericBuilderAbstractClass.java
rename to javatests/dagger/functional/builder/TestComponentWithGenericBuilderAbstractClass.java
index d7603e9c8..5324957c4 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/TestComponentWithGenericBuilderAbstractClass.java
+++ b/javatests/dagger/functional/builder/TestComponentWithGenericBuilderAbstractClass.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Component;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/TestComponentWithGenericBuilderInterface.java b/javatests/dagger/functional/builder/TestComponentWithGenericBuilderInterface.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/main/java/test/builder/TestComponentWithGenericBuilderInterface.java
rename to javatests/dagger/functional/builder/TestComponentWithGenericBuilderInterface.java
index 5e8ca2400..8e30c7803 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builder/TestComponentWithGenericBuilderInterface.java
+++ b/javatests/dagger/functional/builder/TestComponentWithGenericBuilderInterface.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builder;
+package dagger.functional.builder;
 
 import dagger.Component;
 
diff --git a/compiler/src/it/functional-tests/src/test/java/test/builderbinds/BuilderBindsTest.java b/javatests/dagger/functional/builderbinds/BuilderBindsTest.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/test/java/test/builderbinds/BuilderBindsTest.java
rename to javatests/dagger/functional/builderbinds/BuilderBindsTest.java
index 01c73842e..4cafeac96 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/builderbinds/BuilderBindsTest.java
+++ b/javatests/dagger/functional/builderbinds/BuilderBindsTest.java
@@ -14,17 +14,17 @@
  * limitations under the License.
  */
 
-package test.builderbinds;
+package dagger.functional.builderbinds;
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
 
+import dagger.functional.builderbinds.TestComponent.Builder;
 import java.util.Arrays;
 import java.util.Collections;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import test.builderbinds.TestComponent.Builder;
 
 @RunWith(JUnit4.class)
 public final class BuilderBindsTest {
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builderbinds/BuilderSupertype.java b/javatests/dagger/functional/builderbinds/BuilderSupertype.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/builderbinds/BuilderSupertype.java
rename to javatests/dagger/functional/builderbinds/BuilderSupertype.java
index c965bc224..5828f9da8 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builderbinds/BuilderSupertype.java
+++ b/javatests/dagger/functional/builderbinds/BuilderSupertype.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builderbinds;
+package dagger.functional.builderbinds;
 
 import dagger.BindsInstance;
 import javax.inject.Named;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builderbinds/Nullable.java b/javatests/dagger/functional/builderbinds/Nullable.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/builderbinds/Nullable.java
rename to javatests/dagger/functional/builderbinds/Nullable.java
index 971eb0620..7924484e6 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builderbinds/Nullable.java
+++ b/javatests/dagger/functional/builderbinds/Nullable.java
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 
-package test.builderbinds;
+package dagger.functional.builderbinds;
 
 @interface Nullable {}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/builderbinds/TestComponent.java b/javatests/dagger/functional/builderbinds/TestComponent.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/main/java/test/builderbinds/TestComponent.java
rename to javatests/dagger/functional/builderbinds/TestComponent.java
index 75d470b9a..23a32b1d9 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builderbinds/TestComponent.java
+++ b/javatests/dagger/functional/builderbinds/TestComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.builderbinds;
+package dagger.functional.builderbinds;
 
 import dagger.BindsInstance;
 import dagger.Component;
diff --git a/compiler/src/it/functional-tests/src/test/java/test/cycle/CycleTest.java b/javatests/dagger/functional/cycle/CycleTest.java
similarity index 89%
rename from compiler/src/it/functional-tests/src/test/java/test/cycle/CycleTest.java
rename to javatests/dagger/functional/cycle/CycleTest.java
index 1a62597dd..2e3d0c94c 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/cycle/CycleTest.java
+++ b/javatests/dagger/functional/cycle/CycleTest.java
@@ -14,20 +14,20 @@
  * limitations under the License.
  */
 
-package test.cycle;
+package dagger.functional.cycle;
 
 import static com.google.common.truth.Truth.assertThat;
 
+import dagger.functional.cycle.Cycles.A;
+import dagger.functional.cycle.Cycles.C;
+import dagger.functional.cycle.Cycles.ChildCycleComponent;
+import dagger.functional.cycle.Cycles.CycleComponent;
+import dagger.functional.cycle.Cycles.CycleMapComponent;
+import dagger.functional.cycle.Cycles.S;
+import dagger.functional.cycle.Cycles.SelfCycleComponent;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import test.cycle.Cycles.A;
-import test.cycle.Cycles.C;
-import test.cycle.Cycles.ChildCycleComponent;
-import test.cycle.Cycles.CycleComponent;
-import test.cycle.Cycles.CycleMapComponent;
-import test.cycle.Cycles.S;
-import test.cycle.Cycles.SelfCycleComponent;
 
 @RunWith(JUnit4.class)
 public class CycleTest {
diff --git a/compiler/src/it/functional-tests/src/main/java/test/cycle/Cycles.java b/javatests/dagger/functional/cycle/Cycles.java
similarity index 99%
rename from compiler/src/it/functional-tests/src/main/java/test/cycle/Cycles.java
rename to javatests/dagger/functional/cycle/Cycles.java
index b78c4e76a..2f4cd28f4 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/cycle/Cycles.java
+++ b/javatests/dagger/functional/cycle/Cycles.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.cycle;
+package dagger.functional.cycle;
 
 import dagger.Binds;
 import dagger.Component;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/cycle/LongCycle.java b/javatests/dagger/functional/cycle/LongCycle.java
similarity index 99%
rename from compiler/src/it/functional-tests/src/main/java/test/cycle/LongCycle.java
rename to javatests/dagger/functional/cycle/LongCycle.java
index ed1518b35..1b3fb2484 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/cycle/LongCycle.java
+++ b/javatests/dagger/functional/cycle/LongCycle.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.cycle;
+package dagger.functional.cycle;
 
 import dagger.Component;
 import javax.inject.Inject;
diff --git a/compiler/src/it/functional-tests/src/test/java/test/cycle/LongCycleTest.java b/javatests/dagger/functional/cycle/LongCycleTest.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/test/java/test/cycle/LongCycleTest.java
rename to javatests/dagger/functional/cycle/LongCycleTest.java
index ce6293f93..fd5439556 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/cycle/LongCycleTest.java
+++ b/javatests/dagger/functional/cycle/LongCycleTest.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package test.cycle;
+package dagger.functional.cycle;
 
 import static com.google.common.truth.Truth.assertThat;
 
+import dagger.functional.cycle.LongCycle.LongCycleComponent;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import test.cycle.LongCycle.LongCycleComponent;
 
 @RunWith(JUnit4.class)
 public class LongCycleTest {
diff --git a/compiler/src/it/functional-tests/src/main/java/test/membersinject/ChildOfArrayOfParentOfStringArray.java b/javatests/dagger/functional/membersinject/ChildOfArrayOfParentOfStringArray.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/membersinject/ChildOfArrayOfParentOfStringArray.java
rename to javatests/dagger/functional/membersinject/ChildOfArrayOfParentOfStringArray.java
index de07ef9f8..61bef719c 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/membersinject/ChildOfArrayOfParentOfStringArray.java
+++ b/javatests/dagger/functional/membersinject/ChildOfArrayOfParentOfStringArray.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.membersinject;
+package dagger.functional.membersinject;
 
 class ChildOfArrayOfParentOfStringArray extends
     MembersInjectGenericParent<MembersInjectGenericParent<String[]>[]> {
diff --git a/compiler/src/it/functional-tests/src/main/java/test/membersinject/ChildOfPrimitiveIntArray.java b/javatests/dagger/functional/membersinject/ChildOfPrimitiveIntArray.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/membersinject/ChildOfPrimitiveIntArray.java
rename to javatests/dagger/functional/membersinject/ChildOfPrimitiveIntArray.java
index 9ba1ca349..154bcffd6 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/membersinject/ChildOfPrimitiveIntArray.java
+++ b/javatests/dagger/functional/membersinject/ChildOfPrimitiveIntArray.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.membersinject;
+package dagger.functional.membersinject;
 
 class ChildOfPrimitiveIntArray extends MembersInjectGenericParent<int[]> {
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/membersinject/ChildOfStringArray.java b/javatests/dagger/functional/membersinject/ChildOfStringArray.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/membersinject/ChildOfStringArray.java
rename to javatests/dagger/functional/membersinject/ChildOfStringArray.java
index e11dad1cd..d8bab7cf5 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/membersinject/ChildOfStringArray.java
+++ b/javatests/dagger/functional/membersinject/ChildOfStringArray.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.membersinject;
+package dagger.functional.membersinject;
 
 class ChildOfStringArray extends MembersInjectGenericParent<String[]> {
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/membersinject/MembersInjectComponent.java b/javatests/dagger/functional/membersinject/MembersInjectComponent.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/membersinject/MembersInjectComponent.java
rename to javatests/dagger/functional/membersinject/MembersInjectComponent.java
index 9fe099f33..ed261130e 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/membersinject/MembersInjectComponent.java
+++ b/javatests/dagger/functional/membersinject/MembersInjectComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.membersinject;
+package dagger.functional.membersinject;
 
 import dagger.Component;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/membersinject/MembersInjectGenericParent.java b/javatests/dagger/functional/membersinject/MembersInjectGenericParent.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/membersinject/MembersInjectGenericParent.java
rename to javatests/dagger/functional/membersinject/MembersInjectGenericParent.java
index 674da5052..351934898 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/membersinject/MembersInjectGenericParent.java
+++ b/javatests/dagger/functional/membersinject/MembersInjectGenericParent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.membersinject;
+package dagger.functional.membersinject;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/membersinject/MembersInjectModule.java b/javatests/dagger/functional/membersinject/MembersInjectModule.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/membersinject/MembersInjectModule.java
rename to javatests/dagger/functional/membersinject/MembersInjectModule.java
index fc31c772e..d60a7d1e8 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/membersinject/MembersInjectModule.java
+++ b/javatests/dagger/functional/membersinject/MembersInjectModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.membersinject;
+package dagger.functional.membersinject;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/test/java/test/membersinject/MembersInjectTest.java b/javatests/dagger/functional/membersinject/MembersInjectTest.java
similarity index 90%
rename from compiler/src/it/functional-tests/src/test/java/test/membersinject/MembersInjectTest.java
rename to javatests/dagger/functional/membersinject/MembersInjectTest.java
index e6e42c142..0617fd5e5 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/membersinject/MembersInjectTest.java
+++ b/javatests/dagger/functional/membersinject/MembersInjectTest.java
@@ -14,20 +14,20 @@
  * limitations under the License.
  */
 
-package test.membersinject;
+package dagger.functional.membersinject;
 
 import static com.google.common.truth.Truth.assertThat;
 
 import dagger.MembersInjector;
+import dagger.functional.multipackage.DaggerMembersInjectionVisibilityComponent;
+import dagger.functional.multipackage.MembersInjectionVisibilityComponent;
+import dagger.functional.multipackage.a.AGrandchild;
+import dagger.functional.multipackage.a.AParent;
+import dagger.functional.multipackage.b.BChild;
 import javax.inject.Provider;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import test.multipackage.DaggerMembersInjectionVisibilityComponent;
-import test.multipackage.MembersInjectionVisibilityComponent;
-import test.multipackage.a.AGrandchild;
-import test.multipackage.a.AParent;
-import test.multipackage.b.BChild;
 
 @RunWith(JUnit4.class)
 public class MembersInjectTest {
diff --git a/compiler/src/it/functional-tests/src/main/java/test/membersinject/NonRequestedChild.java b/javatests/dagger/functional/membersinject/NonRequestedChild.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/membersinject/NonRequestedChild.java
rename to javatests/dagger/functional/membersinject/NonRequestedChild.java
index 448c37df1..a06047397 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/membersinject/NonRequestedChild.java
+++ b/javatests/dagger/functional/membersinject/NonRequestedChild.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.membersinject;
+package dagger.functional.membersinject;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/membersinject/RawFrameworkTypes.java b/javatests/dagger/functional/membersinject/RawFrameworkTypes.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/membersinject/RawFrameworkTypes.java
rename to javatests/dagger/functional/membersinject/RawFrameworkTypes.java
index 88a473177..21806135a 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/membersinject/RawFrameworkTypes.java
+++ b/javatests/dagger/functional/membersinject/RawFrameworkTypes.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.membersinject;
+package dagger.functional.membersinject;
 
 import dagger.Lazy;
 import dagger.MembersInjector;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/FooComponent.java b/javatests/dagger/functional/multipackage/FooComponent.java
similarity index 85%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/FooComponent.java
rename to javatests/dagger/functional/multipackage/FooComponent.java
index afbc3f05f..ef5b8d591 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/FooComponent.java
+++ b/javatests/dagger/functional/multipackage/FooComponent.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package test.multipackage;
+package dagger.functional.multipackage;
 
 import dagger.Component;
+import dagger.functional.multipackage.a.AModule;
+import dagger.functional.multipackage.a.UsesInaccessible;
+import dagger.functional.multipackage.a.UsesInaccessibleInGenericsOnly;
+import dagger.functional.multipackage.sub.FooChildComponent;
 import java.util.Set;
-import test.multipackage.a.AModule;
-import test.multipackage.a.UsesInaccessible;
-import test.multipackage.a.UsesInaccessibleInGenericsOnly;
-import test.multipackage.sub.FooChildComponent;
 
 /**
  * A component that tests the interaction between subcomponents, multiple packages, and
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/MembersInjectionVisibilityComponent.java b/javatests/dagger/functional/multipackage/MembersInjectionVisibilityComponent.java
similarity index 79%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/MembersInjectionVisibilityComponent.java
rename to javatests/dagger/functional/multipackage/MembersInjectionVisibilityComponent.java
index 608255b9d..32b9c5ef4 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/MembersInjectionVisibilityComponent.java
+++ b/javatests/dagger/functional/multipackage/MembersInjectionVisibilityComponent.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package test.multipackage;
+package dagger.functional.multipackage;
 
 import dagger.Component;
-import test.multipackage.a.AGrandchild;
-import test.multipackage.a.AModule;
-import test.multipackage.a.AParent;
-import test.multipackage.b.BChild;
+import dagger.functional.multipackage.a.AGrandchild;
+import dagger.functional.multipackage.a.AModule;
+import dagger.functional.multipackage.a.AParent;
+import dagger.functional.multipackage.b.BChild;
 
 /**
  * A component that tests members injection across packages and subclasses.
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/MultibindsComponent.java b/javatests/dagger/functional/multipackage/MultibindsComponent.java
similarity index 88%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/MultibindsComponent.java
rename to javatests/dagger/functional/multipackage/MultibindsComponent.java
index b4ef7475b..dbeeed8ee 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/MultibindsComponent.java
+++ b/javatests/dagger/functional/multipackage/MultibindsComponent.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package test.multipackage;
+package dagger.functional.multipackage;
 
 import dagger.Component;
-import test.multipackage.a.AMultibindsModule;
-import test.multipackage.a.UsesInaccessible;
+import dagger.functional.multipackage.a.AMultibindsModule;
+import dagger.functional.multipackage.a.UsesInaccessible;
 
 /**
  * A component that tests the interaction between multiple packages and {@code @Multibinding}s.
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/AGrandchild.java b/javatests/dagger/functional/multipackage/a/AGrandchild.java
similarity index 93%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/a/AGrandchild.java
rename to javatests/dagger/functional/multipackage/a/AGrandchild.java
index 0aa46faed..ffb03d5c9 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/AGrandchild.java
+++ b/javatests/dagger/functional/multipackage/a/AGrandchild.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package test.multipackage.a;
+package dagger.functional.multipackage.a;
 
+import dagger.functional.multipackage.b.BChild;
 import javax.inject.Inject;
-import test.multipackage.b.BChild;
 
 public class AGrandchild extends BChild {
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/AModule.java b/javatests/dagger/functional/multipackage/a/AModule.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/a/AModule.java
rename to javatests/dagger/functional/multipackage/a/AModule.java
index 7095d98df..9f6a7c548 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/AModule.java
+++ b/javatests/dagger/functional/multipackage/a/AModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.multipackage.a;
+package dagger.functional.multipackage.a;
 
 import dagger.Binds;
 import dagger.Module;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/AMultibindsModule.java b/javatests/dagger/functional/multipackage/a/AMultibindsModule.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/a/AMultibindsModule.java
rename to javatests/dagger/functional/multipackage/a/AMultibindsModule.java
index 2ddd0d8e3..bcf28c9e4 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/AMultibindsModule.java
+++ b/javatests/dagger/functional/multipackage/a/AMultibindsModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.multipackage.a;
+package dagger.functional.multipackage.a;
 
 import dagger.Module;
 import dagger.multibindings.Multibinds;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/APackagePrivateObject.java b/javatests/dagger/functional/multipackage/a/APackagePrivateObject.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/a/APackagePrivateObject.java
rename to javatests/dagger/functional/multipackage/a/APackagePrivateObject.java
index 3e67bb088..f674b8206 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/APackagePrivateObject.java
+++ b/javatests/dagger/functional/multipackage/a/APackagePrivateObject.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.multipackage.a;
+package dagger.functional.multipackage.a;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/AParent.java b/javatests/dagger/functional/multipackage/a/AParent.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/a/AParent.java
rename to javatests/dagger/functional/multipackage/a/AParent.java
index 647ebdeda..de99ffdab 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/AParent.java
+++ b/javatests/dagger/functional/multipackage/a/AParent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.multipackage.a;
+package dagger.functional.multipackage.a;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/APublicObject.java b/javatests/dagger/functional/multipackage/a/APublicObject.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/a/APublicObject.java
rename to javatests/dagger/functional/multipackage/a/APublicObject.java
index 5262ec40e..6c8572169 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/APublicObject.java
+++ b/javatests/dagger/functional/multipackage/a/APublicObject.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.multipackage.a;
+package dagger.functional.multipackage.a;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/Inaccessible.java b/javatests/dagger/functional/multipackage/a/Inaccessible.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/a/Inaccessible.java
rename to javatests/dagger/functional/multipackage/a/Inaccessible.java
index e20d74f0e..30e286118 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/Inaccessible.java
+++ b/javatests/dagger/functional/multipackage/a/Inaccessible.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.multipackage.a;
+package dagger.functional.multipackage.a;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/UsesInaccessible.java b/javatests/dagger/functional/multipackage/a/UsesInaccessible.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/a/UsesInaccessible.java
rename to javatests/dagger/functional/multipackage/a/UsesInaccessible.java
index 3ee3a5e06..745bb1dc9 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/UsesInaccessible.java
+++ b/javatests/dagger/functional/multipackage/a/UsesInaccessible.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.multipackage.a;
+package dagger.functional.multipackage.a;
 
 import java.util.Map;
 import java.util.Set;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/UsesInaccessibleInGenericsOnly.java b/javatests/dagger/functional/multipackage/a/UsesInaccessibleInGenericsOnly.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/a/UsesInaccessibleInGenericsOnly.java
rename to javatests/dagger/functional/multipackage/a/UsesInaccessibleInGenericsOnly.java
index f212a0c66..a69aa56f5 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/UsesInaccessibleInGenericsOnly.java
+++ b/javatests/dagger/functional/multipackage/a/UsesInaccessibleInGenericsOnly.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.multipackage.a;
+package dagger.functional.multipackage.a;
 
 import java.util.Map;
 import java.util.Set;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/b/BChild.java b/javatests/dagger/functional/multipackage/b/BChild.java
similarity index 89%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/b/BChild.java
rename to javatests/dagger/functional/multipackage/b/BChild.java
index 6a62006b9..fe5da6677 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/b/BChild.java
+++ b/javatests/dagger/functional/multipackage/b/BChild.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package test.multipackage.b;
+package dagger.functional.multipackage.b;
 
+import dagger.functional.multipackage.a.AParent;
+import dagger.functional.multipackage.a.APublicObject;
 import javax.inject.Inject;
-import test.multipackage.a.AParent;
-import test.multipackage.a.APublicObject;
 
 public class BChild extends AParent {
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/b/BModule.java b/javatests/dagger/functional/multipackage/b/BModule.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/b/BModule.java
rename to javatests/dagger/functional/multipackage/b/BModule.java
index e9c5482fa..6edf4bfc9 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/b/BModule.java
+++ b/javatests/dagger/functional/multipackage/b/BModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.multipackage.b;
+package dagger.functional.multipackage.b;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/b/BPackagePrivateObject.java b/javatests/dagger/functional/multipackage/b/BPackagePrivateObject.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/b/BPackagePrivateObject.java
rename to javatests/dagger/functional/multipackage/b/BPackagePrivateObject.java
index bce3e4c71..b785a4aab 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/b/BPackagePrivateObject.java
+++ b/javatests/dagger/functional/multipackage/b/BPackagePrivateObject.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.multipackage.b;
+package dagger.functional.multipackage.b;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/c/CModule.java b/javatests/dagger/functional/multipackage/c/CModule.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/c/CModule.java
rename to javatests/dagger/functional/multipackage/c/CModule.java
index b137cee2f..df257addd 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/c/CModule.java
+++ b/javatests/dagger/functional/multipackage/c/CModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.multipackage.c;
+package dagger.functional.multipackage.c;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/d/DModule.java b/javatests/dagger/functional/multipackage/d/DModule.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/d/DModule.java
rename to javatests/dagger/functional/multipackage/d/DModule.java
index b638c84b2..c98d647db 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/d/DModule.java
+++ b/javatests/dagger/functional/multipackage/d/DModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.multipackage.d;
+package dagger.functional.multipackage.d;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/foo/Foo.java b/javatests/dagger/functional/multipackage/foo/Foo.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/foo/Foo.java
rename to javatests/dagger/functional/multipackage/foo/Foo.java
index f028f39b3..1c06aa5f8 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/foo/Foo.java
+++ b/javatests/dagger/functional/multipackage/foo/Foo.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.multipackage.foo;
+package dagger.functional.multipackage.foo;
 
 import java.util.Set;
 import javax.inject.Inject;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/grandsub/FooGrandchildComponent.java b/javatests/dagger/functional/multipackage/grandsub/FooGrandchildComponent.java
similarity index 83%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/grandsub/FooGrandchildComponent.java
rename to javatests/dagger/functional/multipackage/grandsub/FooGrandchildComponent.java
index 36c9b180f..171b92a0c 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/grandsub/FooGrandchildComponent.java
+++ b/javatests/dagger/functional/multipackage/grandsub/FooGrandchildComponent.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package test.multipackage.grandsub;
+package dagger.functional.multipackage.grandsub;
 
 import dagger.Subcomponent;
-import test.multipackage.d.DModule;
-import test.multipackage.foo.Foo;
+import dagger.functional.multipackage.d.DModule;
+import dagger.functional.multipackage.foo.Foo;
 
 @Subcomponent(modules = DModule.class)
 public interface FooGrandchildComponent {
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/sub/FooChildComponent.java b/javatests/dagger/functional/multipackage/sub/FooChildComponent.java
similarity index 75%
rename from compiler/src/it/functional-tests/src/main/java/test/multipackage/sub/FooChildComponent.java
rename to javatests/dagger/functional/multipackage/sub/FooChildComponent.java
index 56cf422bc..b4f138983 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/sub/FooChildComponent.java
+++ b/javatests/dagger/functional/multipackage/sub/FooChildComponent.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package test.multipackage.sub;
+package dagger.functional.multipackage.sub;
 
 import dagger.Subcomponent;
-import test.multipackage.b.BModule;
-import test.multipackage.c.CModule;
-import test.multipackage.foo.Foo;
-import test.multipackage.grandsub.FooGrandchildComponent;
+import dagger.functional.multipackage.b.BModule;
+import dagger.functional.multipackage.c.CModule;
+import dagger.functional.multipackage.foo.Foo;
+import dagger.functional.multipackage.grandsub.FooGrandchildComponent;
 
 @Subcomponent(modules = {BModule.class, CModule.class})
 public interface FooChildComponent {
diff --git a/javatests/dagger/functional/nullables/NullComponent.java b/javatests/dagger/functional/nullables/NullComponent.java
new file mode 100644
index 000000000..8d8d757b3
--- /dev/null
+++ b/javatests/dagger/functional/nullables/NullComponent.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.nullables;
+
+import dagger.Component;
+import javax.inject.Provider;
+
+@Component(modules = NullModule.class)
+interface NullComponent {
+  NullFoo nullFoo();
+  @Nullable String string();
+  Provider<String> stringProvider();
+  Number number();
+  Provider<Number> numberProvider();
+}
diff --git a/javatests/dagger/functional/nullables/NullComponentWithDependency.java b/javatests/dagger/functional/nullables/NullComponentWithDependency.java
new file mode 100644
index 000000000..dfb4b8243
--- /dev/null
+++ b/javatests/dagger/functional/nullables/NullComponentWithDependency.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.nullables;
+
+import dagger.Component;
+import javax.inject.Provider;
+
+@Component(dependencies = NullComponent.class)
+interface NullComponentWithDependency {
+  @Nullable String string();
+  Provider<String> stringProvider();
+  Number number();
+  Provider<Number> numberProvider();
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/nullables/NullFoo.java b/javatests/dagger/functional/nullables/NullFoo.java
similarity index 65%
rename from compiler/src/it/functional-tests/src/main/java/test/nullables/NullFoo.java
rename to javatests/dagger/functional/nullables/NullFoo.java
index 13f60fe78..b3f9a67af 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/nullables/NullFoo.java
+++ b/javatests/dagger/functional/nullables/NullFoo.java
@@ -1,20 +1,20 @@
 /*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 
-package test.nullables;
+package dagger.functional.nullables;
 
 import javax.inject.Inject;
 import javax.inject.Provider;
diff --git a/javatests/dagger/functional/nullables/NullModule.java b/javatests/dagger/functional/nullables/NullModule.java
new file mode 100644
index 000000000..00f35fd43
--- /dev/null
+++ b/javatests/dagger/functional/nullables/NullModule.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.nullables;
+
+import dagger.Module;
+import dagger.Provides;
+
+@Module
+class NullModule {
+  Number numberValue = null;
+
+  @Nullable
+  @Provides
+  String provideNullableString() {
+    return null;
+  }
+
+  @Provides
+  Number provideNumber() {
+    return numberValue;
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/test/java/test/nullables/NullabilityTest.java b/javatests/dagger/functional/nullables/NullabilityTest.java
similarity index 82%
rename from compiler/src/it/functional-tests/src/test/java/test/nullables/NullabilityTest.java
rename to javatests/dagger/functional/nullables/NullabilityTest.java
index 0bc859d09..e232d8534 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/nullables/NullabilityTest.java
+++ b/javatests/dagger/functional/nullables/NullabilityTest.java
@@ -1,20 +1,20 @@
 /*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 
-package test.nullables;
+package dagger.functional.nullables;
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
diff --git a/javatests/dagger/functional/nullables/Nullable.java b/javatests/dagger/functional/nullables/Nullable.java
new file mode 100644
index 000000000..cbfb98a9a
--- /dev/null
+++ b/javatests/dagger/functional/nullables/Nullable.java
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.nullables;
+
+@interface Nullable {}
diff --git a/compiler/src/it/producers-functional-tests/BUILD b/javatests/dagger/functional/producers/BUILD
similarity index 75%
rename from compiler/src/it/producers-functional-tests/BUILD
rename to javatests/dagger/functional/producers/BUILD
index 79e137ce1..4f6ee1384 100644
--- a/compiler/src/it/producers-functional-tests/BUILD
+++ b/javatests/dagger/functional/producers/BUILD
@@ -24,29 +24,15 @@ load(
     "JAVA_7_SOURCE_LEVEL",
     "PRE_JAVA_8_INFERENCE_OPTS",
 )
-
-# Sample code to be tested in functional tests.
-java_library(
-    name = "code_under_test",
-    srcs = glob(["src/main/java/**/*.java"]),
-    javacopts = PRE_JAVA_8_INFERENCE_OPTS + JAVA_7_SOURCE_LEVEL + DOCLINT_HTML_AND_SYNTAX,
-    deps = [
-        "//:producers_with_compiler",
-        "//third_party:auto_value",
-        "//third_party:guava",
-        "//third_party:jsr330_inject",
-    ],
-)
-
 load("//:test_defs.bzl", "GenJavaTests")
 
 GenJavaTests(
     name = "producers-functional-tests",
-    srcs = glob(["src/test/java/**/*.java"]),
+    srcs = glob(["**/*.java"]),
     javacopts = PRE_JAVA_8_INFERENCE_OPTS + JAVA_7_SOURCE_LEVEL + DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
     deps = [
-        ":code_under_test",
         "//:producers_with_compiler",
+        "//third_party:auto_value",
         "//third_party:guava",
         "//third_party:jsr330_inject",
         "//third_party:junit",
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedComponent.java b/javatests/dagger/functional/producers/DependedComponent.java
similarity index 95%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedComponent.java
rename to javatests/dagger/functional/producers/DependedComponent.java
index 81306c002..9a4947a18 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedComponent.java
+++ b/javatests/dagger/functional/producers/DependedComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest;
+package dagger.functional.producers;
 
 import dagger.Component;
 
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedModule.java b/javatests/dagger/functional/producers/DependedModule.java
similarity index 95%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedModule.java
rename to javatests/dagger/functional/producers/DependedModule.java
index 47b722d34..89ca4fcc7 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedModule.java
+++ b/javatests/dagger/functional/producers/DependedModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest;
+package dagger.functional.producers;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedProducerModule.java b/javatests/dagger/functional/producers/DependedProducerModule.java
similarity index 95%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedProducerModule.java
rename to javatests/dagger/functional/producers/DependedProducerModule.java
index b352c6bd3..c25d4e827 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedProducerModule.java
+++ b/javatests/dagger/functional/producers/DependedProducerModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest;
+package dagger.functional.producers;
 
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedProductionComponent.java b/javatests/dagger/functional/producers/DependedProductionComponent.java
similarity index 95%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedProductionComponent.java
rename to javatests/dagger/functional/producers/DependedProductionComponent.java
index 8fd6761c9..d5ebc4f50 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedProductionComponent.java
+++ b/javatests/dagger/functional/producers/DependedProductionComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest;
+package dagger.functional.producers;
 
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.producers.ProductionComponent;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependentComponent.java b/javatests/dagger/functional/producers/DependentComponent.java
similarity index 96%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependentComponent.java
rename to javatests/dagger/functional/producers/DependentComponent.java
index 0c8508eee..364676c5a 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependentComponent.java
+++ b/javatests/dagger/functional/producers/DependentComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest;
+package dagger.functional.producers;
 
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.producers.ProductionComponent;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependentProducerModule.java b/javatests/dagger/functional/producers/DependentProducerModule.java
similarity index 97%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependentProducerModule.java
rename to javatests/dagger/functional/producers/DependentProducerModule.java
index 8467ee144..56b66f55f 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependentProducerModule.java
+++ b/javatests/dagger/functional/producers/DependentProducerModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest;
+package dagger.functional.producers;
 
 import com.google.common.base.Ascii;
 import com.google.common.collect.ImmutableList;
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/DependentTest.java b/javatests/dagger/functional/producers/DependentTest.java
similarity index 75%
rename from compiler/src/it/producers-functional-tests/src/test/java/producerstest/DependentTest.java
rename to javatests/dagger/functional/producers/DependentTest.java
index 7298a4258..920d753a3 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/DependentTest.java
+++ b/javatests/dagger/functional/producers/DependentTest.java
@@ -1,20 +1,20 @@
 /*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 
-package producerstest;
+package dagger.functional.producers;
 
 import static com.google.common.truth.Truth.assertThat;
 
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/ExecutorModule.java b/javatests/dagger/functional/producers/ExecutorModule.java
similarity index 97%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/ExecutorModule.java
rename to javatests/dagger/functional/producers/ExecutorModule.java
index 92492471f..5f8bfbf10 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/ExecutorModule.java
+++ b/javatests/dagger/functional/producers/ExecutorModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest;
+package dagger.functional.producers;
 
 import com.google.common.util.concurrent.MoreExecutors;
 import dagger.Module;
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/ProducerFactoryTest.java b/javatests/dagger/functional/producers/ProducerFactoryTest.java
similarity index 99%
rename from compiler/src/it/producers-functional-tests/src/test/java/producerstest/ProducerFactoryTest.java
rename to javatests/dagger/functional/producers/ProducerFactoryTest.java
index 6da997702..d974613a3 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/ProducerFactoryTest.java
+++ b/javatests/dagger/functional/producers/ProducerFactoryTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest;
+package dagger.functional.producers;
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/ProvidesInProducerModule.java b/javatests/dagger/functional/producers/ProvidesInProducerModule.java
similarity index 97%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/ProvidesInProducerModule.java
rename to javatests/dagger/functional/producers/ProvidesInProducerModule.java
index 70617127d..6e3b41f91 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/ProvidesInProducerModule.java
+++ b/javatests/dagger/functional/producers/ProvidesInProducerModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest;
+package dagger.functional.producers;
 
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.MoreExecutors;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/Request.java b/javatests/dagger/functional/producers/Request.java
similarity index 95%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/Request.java
rename to javatests/dagger/functional/producers/Request.java
index 6a6cbba20..d4020c806 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/Request.java
+++ b/javatests/dagger/functional/producers/Request.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest;
+package dagger.functional.producers;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/Response.java b/javatests/dagger/functional/producers/Response.java
similarity index 95%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/Response.java
rename to javatests/dagger/functional/producers/Response.java
index 2e87cc440..ca5c0c2c6 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/Response.java
+++ b/javatests/dagger/functional/producers/Response.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest;
+package dagger.functional.producers;
 
 final class Response {
   private final String data;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/ResponseModule.java b/javatests/dagger/functional/producers/ResponseModule.java
similarity index 95%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/ResponseModule.java
rename to javatests/dagger/functional/producers/ResponseModule.java
index 3252ce36d..9a5e25d57 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/ResponseModule.java
+++ b/javatests/dagger/functional/producers/ResponseModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest;
+package dagger.functional.producers;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/ResponseProducerModule.java b/javatests/dagger/functional/producers/ResponseProducerModule.java
similarity index 98%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/ResponseProducerModule.java
rename to javatests/dagger/functional/producers/ResponseProducerModule.java
index 0b75e881c..7b76ae297 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/ResponseProducerModule.java
+++ b/javatests/dagger/functional/producers/ResponseProducerModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest;
+package dagger.functional.producers;
 
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/SimpleComponent.java b/javatests/dagger/functional/producers/SimpleComponent.java
similarity index 95%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/SimpleComponent.java
rename to javatests/dagger/functional/producers/SimpleComponent.java
index 0ac75a476..4b0af7f03 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/SimpleComponent.java
+++ b/javatests/dagger/functional/producers/SimpleComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest;
+package dagger.functional.producers;
 
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.producers.ProductionComponent;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/SimpleProducerModule.java b/javatests/dagger/functional/producers/SimpleProducerModule.java
similarity index 92%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/SimpleProducerModule.java
rename to javatests/dagger/functional/producers/SimpleProducerModule.java
index a06c059a9..b0c523da4 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/SimpleProducerModule.java
+++ b/javatests/dagger/functional/producers/SimpleProducerModule.java
@@ -1,20 +1,20 @@
 /*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package producerstest;
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.producers;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.util.concurrent.Futures;
diff --git a/javatests/dagger/functional/producers/SimpleTest.java b/javatests/dagger/functional/producers/SimpleTest.java
new file mode 100644
index 000000000..e20d09825
--- /dev/null
+++ b/javatests/dagger/functional/producers/SimpleTest.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.producers;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+@RunWith(JUnit4.class)
+public class SimpleTest {
+  @Test public void testSimpleComponent() throws Exception {
+    SimpleComponent simpleComponent = DaggerSimpleComponent.create();
+    assertThat(simpleComponent).isNotNull();
+    assertThat(simpleComponent.response().get().data()).isEqualTo("Hello, Request #5!");
+  }
+}
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/badexecutor/BadExecutorTest.java b/javatests/dagger/functional/producers/badexecutor/BadExecutorTest.java
similarity index 76%
rename from compiler/src/it/producers-functional-tests/src/test/java/producerstest/badexecutor/BadExecutorTest.java
rename to javatests/dagger/functional/producers/badexecutor/BadExecutorTest.java
index 39ff83e12..90bbca156 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/badexecutor/BadExecutorTest.java
+++ b/javatests/dagger/functional/producers/badexecutor/BadExecutorTest.java
@@ -1,4 +1,20 @@
-package producerstest.badexecutor;
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.producers.badexecutor;
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
@@ -7,13 +23,13 @@
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.ListeningExecutorService;
 import com.google.common.util.concurrent.MoreExecutors;
+import dagger.functional.producers.ExecutorModule;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.RejectedExecutionException;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import producerstest.ExecutorModule;
 
 /** This test verifies behavior when the executor throws {@link RejectedExecutionException}. */
 @RunWith(JUnit4.class)
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/badexecutor/ComponentDependency.java b/javatests/dagger/functional/producers/badexecutor/ComponentDependency.java
similarity index 93%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/badexecutor/ComponentDependency.java
rename to javatests/dagger/functional/producers/badexecutor/ComponentDependency.java
index 0844b0cbf..97974e5ff 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/badexecutor/ComponentDependency.java
+++ b/javatests/dagger/functional/producers/badexecutor/ComponentDependency.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.badexecutor;
+package dagger.functional.producers.badexecutor;
 
 import com.google.common.util.concurrent.ListenableFuture;
 
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/badexecutor/SimpleComponent.java b/javatests/dagger/functional/producers/badexecutor/SimpleComponent.java
similarity index 93%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/badexecutor/SimpleComponent.java
rename to javatests/dagger/functional/producers/badexecutor/SimpleComponent.java
index e13c47024..ea58125d6 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/badexecutor/SimpleComponent.java
+++ b/javatests/dagger/functional/producers/badexecutor/SimpleComponent.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package producerstest.badexecutor;
+package dagger.functional.producers.badexecutor;
 
 import com.google.common.util.concurrent.ListenableFuture;
+import dagger.functional.producers.ExecutorModule;
 import dagger.producers.ProductionComponent;
-import producerstest.ExecutorModule;
 
 /**
  * A component that contains entry points that exercise different execution paths, for verifying the
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/badexecutor/SimpleProducerModule.java b/javatests/dagger/functional/producers/badexecutor/SimpleProducerModule.java
similarity index 95%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/badexecutor/SimpleProducerModule.java
rename to javatests/dagger/functional/producers/badexecutor/SimpleProducerModule.java
index 24a5ae52b..f907fdaba 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/badexecutor/SimpleProducerModule.java
+++ b/javatests/dagger/functional/producers/badexecutor/SimpleProducerModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.badexecutor;
+package dagger.functional.producers.badexecutor;
 
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/binds/BindsProducersTest.java b/javatests/dagger/functional/producers/binds/BindsProducersTest.java
similarity index 98%
rename from compiler/src/it/producers-functional-tests/src/test/java/producerstest/binds/BindsProducersTest.java
rename to javatests/dagger/functional/producers/binds/BindsProducersTest.java
index 42ebe6889..ef2c6e06c 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/binds/BindsProducersTest.java
+++ b/javatests/dagger/functional/producers/binds/BindsProducersTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.binds;
+package dagger.functional.producers.binds;
 
 import static com.google.common.truth.Truth.assertThat;
 
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/binds/Foo.java b/javatests/dagger/functional/producers/binds/Foo.java
similarity index 94%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/binds/Foo.java
rename to javatests/dagger/functional/producers/binds/Foo.java
index 343e90ecb..4eb71fd36 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/binds/Foo.java
+++ b/javatests/dagger/functional/producers/binds/Foo.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.binds;
+package dagger.functional.producers.binds;
 
 /**
  * This is the type that will be bound.  We throw in generics just to complicate the test.
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/binds/FooOfStrings.java b/javatests/dagger/functional/producers/binds/FooOfStrings.java
similarity index 86%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/binds/FooOfStrings.java
rename to javatests/dagger/functional/producers/binds/FooOfStrings.java
index 1c0377b23..b94d907fe 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/binds/FooOfStrings.java
+++ b/javatests/dagger/functional/producers/binds/FooOfStrings.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package producerstest.binds;
+package dagger.functional.producers.binds;
 
 /**
  * This is not marked with {@link javax.inject.Inject @Inject} in order to test that {@link
- * dagger.Binds @Binds} properly translate to {@link dagger.internal.codegen.ProductionBinding}s
+ * dagger.Binds @Binds} properly translate to {@code dagger.internal.codegen.ProductionBinding}s
  * when the right-hand-side of the method is also a production binding. We force this by adding a
  * {@link dagger.producers.Produces @Produces} method to add it to the graph instead of relying on
- * the {@link dagger.internal.codegen.ProvisionBinding} that would be created by default with an
+ * the {@code dagger.internal.codegen.ProvisionBinding} that would be created by default with an
  * {@code @Inject} constructor.
  */
 final class FooOfStrings implements Foo<String> {}
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/binds/SimpleBindingModule.java b/javatests/dagger/functional/producers/binds/SimpleBindingModule.java
similarity index 99%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/binds/SimpleBindingModule.java
rename to javatests/dagger/functional/producers/binds/SimpleBindingModule.java
index 84b09689a..f2af277bb 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/binds/SimpleBindingModule.java
+++ b/javatests/dagger/functional/producers/binds/SimpleBindingModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.binds;
+package dagger.functional.producers.binds;
 
 import com.google.common.util.concurrent.MoreExecutors;
 import dagger.Binds;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/binds/SimpleBindsProductionComponent.java b/javatests/dagger/functional/producers/binds/SimpleBindsProductionComponent.java
similarity index 93%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/binds/SimpleBindsProductionComponent.java
rename to javatests/dagger/functional/producers/binds/SimpleBindsProductionComponent.java
index db72ca8b5..21cf66122 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/binds/SimpleBindsProductionComponent.java
+++ b/javatests/dagger/functional/producers/binds/SimpleBindsProductionComponent.java
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package producerstest.binds;
+package dagger.functional.producers.binds;
 
 import com.google.common.util.concurrent.ListenableFuture;
+import dagger.functional.producers.binds.SimpleBindingModule.SomeQualifier;
 import dagger.producers.Produced;
 import dagger.producers.Producer;
 import dagger.producers.ProductionComponent;
 import java.util.Map;
 import java.util.Set;
 import javax.inject.Singleton;
-import producerstest.binds.SimpleBindingModule.SomeQualifier;
 
 @Singleton
 @ProductionComponent(modules = SimpleBindingModule.class)
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/builder/DepComponent.java b/javatests/dagger/functional/producers/builder/DepComponent.java
similarity index 94%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/builder/DepComponent.java
rename to javatests/dagger/functional/producers/builder/DepComponent.java
index 1c72cdb66..c2811f12f 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/builder/DepComponent.java
+++ b/javatests/dagger/functional/producers/builder/DepComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.builder;
+package dagger.functional.producers.builder;
 
 import com.google.common.util.concurrent.ListenableFuture;
 
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/builder/IntModule.java b/javatests/dagger/functional/producers/builder/IntModule.java
similarity index 94%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/builder/IntModule.java
rename to javatests/dagger/functional/producers/builder/IntModule.java
index be7fb16ff..ed2bb9522 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/builder/IntModule.java
+++ b/javatests/dagger/functional/producers/builder/IntModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.builder;
+package dagger.functional.producers.builder;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/builder/ProductionComponentBuilderTest.java b/javatests/dagger/functional/producers/builder/ProductionComponentBuilderTest.java
similarity index 97%
rename from compiler/src/it/producers-functional-tests/src/test/java/producerstest/builder/ProductionComponentBuilderTest.java
rename to javatests/dagger/functional/producers/builder/ProductionComponentBuilderTest.java
index ece750fc7..7b33053b8 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/builder/ProductionComponentBuilderTest.java
+++ b/javatests/dagger/functional/producers/builder/ProductionComponentBuilderTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.builder;
+package dagger.functional.producers.builder;
 
 import static com.google.common.truth.Truth.assertThat;
 
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/builder/StringModule.java b/javatests/dagger/functional/producers/builder/StringModule.java
similarity index 94%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/builder/StringModule.java
rename to javatests/dagger/functional/producers/builder/StringModule.java
index 30e6eb9a1..6ad748f2d 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/builder/StringModule.java
+++ b/javatests/dagger/functional/producers/builder/StringModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.builder;
+package dagger.functional.producers.builder;
 
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/builder/TestComponentWithBuilder.java b/javatests/dagger/functional/producers/builder/TestComponentWithBuilder.java
similarity index 92%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/builder/TestComponentWithBuilder.java
rename to javatests/dagger/functional/producers/builder/TestComponentWithBuilder.java
index 2705a6573..91fb326a9 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/builder/TestComponentWithBuilder.java
+++ b/javatests/dagger/functional/producers/builder/TestComponentWithBuilder.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package producerstest.builder;
+package dagger.functional.producers.builder;
 
 import com.google.common.util.concurrent.ListenableFuture;
+import dagger.functional.producers.ExecutorModule;
 import dagger.producers.ProductionComponent;
-import producerstest.ExecutorModule;
 
 @ProductionComponent(
   modules = {ExecutorModule.class, StringModule.class, IntModule.class},
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/MonitoredComponent.java b/javatests/dagger/functional/producers/monitoring/MonitoredComponent.java
similarity index 90%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/MonitoredComponent.java
rename to javatests/dagger/functional/producers/monitoring/MonitoredComponent.java
index 27df6fb52..2df564554 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/MonitoredComponent.java
+++ b/javatests/dagger/functional/producers/monitoring/MonitoredComponent.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package producerstest.monitoring;
+package dagger.functional.producers.monitoring;
 
 import com.google.common.util.concurrent.ListenableFuture;
+import dagger.functional.producers.ExecutorModule;
 import dagger.producers.ProductionComponent;
-import producerstest.ExecutorModule;
 
 @ProductionComponent(
   modules = {ExecutorModule.class, MonitoringModule.class, StubModule.class, ServingModule.class}
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/MonitoringModule.java b/javatests/dagger/functional/producers/monitoring/MonitoringModule.java
similarity index 95%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/MonitoringModule.java
rename to javatests/dagger/functional/producers/monitoring/MonitoringModule.java
index 489b89a88..3c08255e6 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/MonitoringModule.java
+++ b/javatests/dagger/functional/producers/monitoring/MonitoringModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.monitoring;
+package dagger.functional.producers.monitoring;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/monitoring/MonitoringTest.java b/javatests/dagger/functional/producers/monitoring/MonitoringTest.java
similarity index 99%
rename from compiler/src/it/producers-functional-tests/src/test/java/producerstest/monitoring/MonitoringTest.java
rename to javatests/dagger/functional/producers/monitoring/MonitoringTest.java
index 921464a47..3c01198e5 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/monitoring/MonitoringTest.java
+++ b/javatests/dagger/functional/producers/monitoring/MonitoringTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.monitoring;
+package dagger.functional.producers.monitoring;
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
@@ -29,6 +29,7 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.SettableFuture;
+import dagger.functional.producers.ExecutorModule;
 import dagger.producers.monitoring.ProducerMonitor;
 import dagger.producers.monitoring.ProducerToken;
 import dagger.producers.monitoring.ProductionComponentMonitor;
@@ -43,7 +44,6 @@
 import org.mockito.InOrder;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
-import producerstest.ExecutorModule;
 
 /** Tests for production components using monitoring. */
 @RunWith(JUnit4.class)
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/ServingModule.java b/javatests/dagger/functional/producers/monitoring/ServingModule.java
similarity index 87%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/ServingModule.java
rename to javatests/dagger/functional/producers/monitoring/ServingModule.java
index caaefa60b..09c9cd19d 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/ServingModule.java
+++ b/javatests/dagger/functional/producers/monitoring/ServingModule.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package producerstest.monitoring;
+package dagger.functional.producers.monitoring;
 
 import com.google.common.util.concurrent.ListenableFuture;
+import dagger.functional.producers.monitoring.StubModule.ForServer1;
+import dagger.functional.producers.monitoring.StubModule.ForServer2;
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
 import javax.inject.Qualifier;
-import producerstest.monitoring.StubModule.ForServer1;
-import producerstest.monitoring.StubModule.ForServer2;
 
 @ProducerModule
 final class ServingModule {
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/StringStub.java b/javatests/dagger/functional/producers/monitoring/StringStub.java
similarity index 93%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/StringStub.java
rename to javatests/dagger/functional/producers/monitoring/StringStub.java
index 9503a74f4..2553e88c9 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/StringStub.java
+++ b/javatests/dagger/functional/producers/monitoring/StringStub.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.monitoring;
+package dagger.functional.producers.monitoring;
 
 import com.google.common.util.concurrent.ListenableFuture;
 
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/StubModule.java b/javatests/dagger/functional/producers/monitoring/StubModule.java
similarity index 95%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/StubModule.java
rename to javatests/dagger/functional/producers/monitoring/StubModule.java
index 0bc3bd681..3c5893cbf 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/StubModule.java
+++ b/javatests/dagger/functional/producers/monitoring/StubModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.monitoring;
+package dagger.functional.producers.monitoring;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/ThreadAccumulator.java b/javatests/dagger/functional/producers/monitoring/ThreadAccumulator.java
similarity index 95%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/ThreadAccumulator.java
rename to javatests/dagger/functional/producers/monitoring/ThreadAccumulator.java
index 2eb4abda7..3d95fb6f4 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/ThreadAccumulator.java
+++ b/javatests/dagger/functional/producers/monitoring/ThreadAccumulator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.monitoring;
+package dagger.functional.producers.monitoring;
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/ThreadModule.java b/javatests/dagger/functional/producers/monitoring/ThreadModule.java
similarity index 82%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/ThreadModule.java
rename to javatests/dagger/functional/producers/monitoring/ThreadModule.java
index 829d6c4a8..f55c3e067 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/ThreadModule.java
+++ b/javatests/dagger/functional/producers/monitoring/ThreadModule.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package producerstest.monitoring;
+package dagger.functional.producers.monitoring;
 
 import com.google.common.util.concurrent.ListenableFuture;
+import dagger.functional.producers.monitoring.ThreadQualifiers.Deferred;
+import dagger.functional.producers.monitoring.ThreadQualifiers.EntryPoint;
+import dagger.functional.producers.monitoring.ThreadQualifiers.Required;
 import dagger.producers.Producer;
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
-import producerstest.monitoring.ThreadQualifiers.Deferred;
-import producerstest.monitoring.ThreadQualifiers.EntryPoint;
-import producerstest.monitoring.ThreadQualifiers.Required;
 
 @ProducerModule
 final class ThreadModule {
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/ThreadMonitoredComponent.java b/javatests/dagger/functional/producers/monitoring/ThreadMonitoredComponent.java
similarity index 84%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/ThreadMonitoredComponent.java
rename to javatests/dagger/functional/producers/monitoring/ThreadMonitoredComponent.java
index bc565feaa..576cd7ff8 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/ThreadMonitoredComponent.java
+++ b/javatests/dagger/functional/producers/monitoring/ThreadMonitoredComponent.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package producerstest.monitoring;
+package dagger.functional.producers.monitoring;
 
 import com.google.common.util.concurrent.ListenableFuture;
+import dagger.functional.producers.ExecutorModule;
+import dagger.functional.producers.monitoring.ThreadQualifiers.EntryPoint;
 import dagger.producers.ProductionComponent;
 import javax.inject.Singleton;
-import producerstest.ExecutorModule;
-import producerstest.monitoring.ThreadQualifiers.EntryPoint;
 
 @Singleton
 @ProductionComponent(modules = {ExecutorModule.class, MonitoringModule.class, ThreadModule.class})
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/ThreadQualifiers.java b/javatests/dagger/functional/producers/monitoring/ThreadQualifiers.java
similarity index 95%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/ThreadQualifiers.java
rename to javatests/dagger/functional/producers/monitoring/ThreadQualifiers.java
index bfd415094..59ccbe468 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/monitoring/ThreadQualifiers.java
+++ b/javatests/dagger/functional/producers/monitoring/ThreadQualifiers.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.monitoring;
+package dagger.functional.producers.monitoring;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingComponent.java b/javatests/dagger/functional/producers/multibindings/MultibindingComponent.java
similarity index 79%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingComponent.java
rename to javatests/dagger/functional/producers/multibindings/MultibindingComponent.java
index e858bed68..fa5c6ee76 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingComponent.java
+++ b/javatests/dagger/functional/producers/multibindings/MultibindingComponent.java
@@ -14,21 +14,21 @@
  * limitations under the License.
  */
 
-package producerstest.multibindings;
+package dagger.functional.producers.multibindings;
 
 import com.google.common.util.concurrent.ListenableFuture;
+import dagger.functional.producers.ExecutorModule;
+import dagger.functional.producers.multibindings.Qualifiers.EmptyButDeclaredInModule;
+import dagger.functional.producers.multibindings.Qualifiers.EmptyButDeclaredInModuleAndProducerModule;
+import dagger.functional.producers.multibindings.Qualifiers.ObjCount;
+import dagger.functional.producers.multibindings.Qualifiers.OnlyProvisionMultibindings;
+import dagger.functional.producers.multibindings.Qualifiers.PossiblyThrowingMap;
+import dagger.functional.producers.multibindings.Qualifiers.PossiblyThrowingSet;
 import dagger.producers.Produced;
 import dagger.producers.Producer;
 import dagger.producers.ProductionComponent;
 import java.util.Map;
 import java.util.Set;
-import producerstest.ExecutorModule;
-import producerstest.multibindings.Qualifiers.EmptyButDeclaredInModule;
-import producerstest.multibindings.Qualifiers.EmptyButDeclaredInModuleAndProducerModule;
-import producerstest.multibindings.Qualifiers.ObjCount;
-import producerstest.multibindings.Qualifiers.OnlyProvisionMultibindings;
-import producerstest.multibindings.Qualifiers.PossiblyThrowingMap;
-import producerstest.multibindings.Qualifiers.PossiblyThrowingSet;
 
 @ProductionComponent(
   modules = {ExecutorModule.class, MultibindingProducerModule.class, MultibindingModule.class}
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingModule.java b/javatests/dagger/functional/producers/multibindings/MultibindingModule.java
similarity index 84%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingModule.java
rename to javatests/dagger/functional/producers/multibindings/MultibindingModule.java
index 969cb9fad..08ed6d7c3 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingModule.java
+++ b/javatests/dagger/functional/producers/multibindings/MultibindingModule.java
@@ -14,11 +14,14 @@
  * limitations under the License.
  */
 
-package producerstest.multibindings;
+package dagger.functional.producers.multibindings;
 
 import com.google.common.collect.ImmutableSet;
 import dagger.Module;
 import dagger.Provides;
+import dagger.functional.producers.multibindings.Qualifiers.EmptyButDeclaredInModule;
+import dagger.functional.producers.multibindings.Qualifiers.EmptyButDeclaredInModuleAndProducerModule;
+import dagger.functional.producers.multibindings.Qualifiers.OnlyProvisionMultibindings;
 import dagger.multibindings.ElementsIntoSet;
 import dagger.multibindings.IntKey;
 import dagger.multibindings.IntoMap;
@@ -27,9 +30,6 @@
 import dagger.multibindings.StringKey;
 import java.util.Map;
 import java.util.Set;
-import producerstest.multibindings.Qualifiers.EmptyButDeclaredInModule;
-import producerstest.multibindings.Qualifiers.EmptyButDeclaredInModuleAndProducerModule;
-import producerstest.multibindings.Qualifiers.OnlyProvisionMultibindings;
 
 @Module
 abstract class MultibindingModule {
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingProducerModule.java b/javatests/dagger/functional/producers/multibindings/MultibindingProducerModule.java
similarity index 89%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingProducerModule.java
rename to javatests/dagger/functional/producers/multibindings/MultibindingProducerModule.java
index ee23fa206..350733b2a 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingProducerModule.java
+++ b/javatests/dagger/functional/producers/multibindings/MultibindingProducerModule.java
@@ -14,11 +14,15 @@
  * limitations under the License.
  */
 
-package producerstest.multibindings;
+package dagger.functional.producers.multibindings;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
+import dagger.functional.producers.multibindings.Qualifiers.EmptyButDeclaredInModuleAndProducerModule;
+import dagger.functional.producers.multibindings.Qualifiers.ObjCount;
+import dagger.functional.producers.multibindings.Qualifiers.PossiblyThrowingMap;
+import dagger.functional.producers.multibindings.Qualifiers.PossiblyThrowingSet;
 import dagger.multibindings.ElementsIntoSet;
 import dagger.multibindings.IntKey;
 import dagger.multibindings.IntoMap;
@@ -29,10 +33,6 @@
 import dagger.producers.Produces;
 import java.util.Map;
 import java.util.Set;
-import producerstest.multibindings.Qualifiers.EmptyButDeclaredInModuleAndProducerModule;
-import producerstest.multibindings.Qualifiers.ObjCount;
-import producerstest.multibindings.Qualifiers.PossiblyThrowingMap;
-import producerstest.multibindings.Qualifiers.PossiblyThrowingSet;
 
 @ProducerModule
 abstract class MultibindingProducerModule {
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/multibindings/MultibindingTest.java b/javatests/dagger/functional/producers/multibindings/MultibindingTest.java
similarity index 99%
rename from compiler/src/it/producers-functional-tests/src/test/java/producerstest/multibindings/MultibindingTest.java
rename to javatests/dagger/functional/producers/multibindings/MultibindingTest.java
index 79f58fdce..9e5568baa 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/multibindings/MultibindingTest.java
+++ b/javatests/dagger/functional/producers/multibindings/MultibindingTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.multibindings;
+package dagger.functional.producers.multibindings;
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/Qualifiers.java b/javatests/dagger/functional/producers/multibindings/Qualifiers.java
similarity index 96%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/Qualifiers.java
rename to javatests/dagger/functional/producers/multibindings/Qualifiers.java
index 3a2f359e9..640430c5b 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/Qualifiers.java
+++ b/javatests/dagger/functional/producers/multibindings/Qualifiers.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.multibindings;
+package dagger.functional.producers.multibindings;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/optional/OptionalBindingComponents.java b/javatests/dagger/functional/producers/optional/OptionalBindingComponents.java
similarity index 99%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/optional/OptionalBindingComponents.java
rename to javatests/dagger/functional/producers/optional/OptionalBindingComponents.java
index 743b033e1..6a36127b0 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/optional/OptionalBindingComponents.java
+++ b/javatests/dagger/functional/producers/optional/OptionalBindingComponents.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.optional;
+package dagger.functional.producers.optional;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/optional/OptionalBindingComponentsAbsentTest.java b/javatests/dagger/functional/producers/optional/OptionalBindingComponentsAbsentTest.java
similarity index 92%
rename from compiler/src/it/producers-functional-tests/src/test/java/producerstest/optional/OptionalBindingComponentsAbsentTest.java
rename to javatests/dagger/functional/producers/optional/OptionalBindingComponentsAbsentTest.java
index c2d5ce530..4bb723462 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/optional/OptionalBindingComponentsAbsentTest.java
+++ b/javatests/dagger/functional/producers/optional/OptionalBindingComponentsAbsentTest.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package producerstest.optional;
+package dagger.functional.producers.optional;
 
 import static com.google.common.truth.Truth.assertThat;
 
+import dagger.functional.producers.optional.OptionalBindingComponents.AbsentOptionalBindingComponent;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import producerstest.optional.OptionalBindingComponents.AbsentOptionalBindingComponent;
 
 /** Tests for absent optional bindings. */
 @RunWith(JUnit4.class)
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/optional/OptionalBindingComponentsPresentTest.java b/javatests/dagger/functional/producers/optional/OptionalBindingComponentsPresentTest.java
similarity index 88%
rename from compiler/src/it/producers-functional-tests/src/test/java/producerstest/optional/OptionalBindingComponentsPresentTest.java
rename to javatests/dagger/functional/producers/optional/OptionalBindingComponentsPresentTest.java
index 8788e5236..030ccc669 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/optional/OptionalBindingComponentsPresentTest.java
+++ b/javatests/dagger/functional/producers/optional/OptionalBindingComponentsPresentTest.java
@@ -14,18 +14,18 @@
  * limitations under the License.
  */
 
-package producerstest.optional;
+package dagger.functional.producers.optional;
 
 import static com.google.common.truth.Truth.assertThat;
-import static producerstest.optional.OptionalBindingComponents.Value.QUALIFIED_VALUE;
-import static producerstest.optional.OptionalBindingComponents.Value.VALUE;
+import static dagger.functional.producers.optional.OptionalBindingComponents.Value.QUALIFIED_VALUE;
+import static dagger.functional.producers.optional.OptionalBindingComponents.Value.VALUE;
 
 import com.google.common.collect.ImmutableList;
+import dagger.functional.producers.optional.OptionalBindingComponents.OptionalBindingComponent;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameters;
-import producerstest.optional.OptionalBindingComponents.OptionalBindingComponent;
 
 /** Tests for present optional bindings. */
 @RunWith(Parameterized.class)
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/provisions/Provisions.java b/javatests/dagger/functional/producers/provisions/Provisions.java
similarity index 96%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/provisions/Provisions.java
rename to javatests/dagger/functional/producers/provisions/Provisions.java
index 779c7277e..e9f32f5ec 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/provisions/Provisions.java
+++ b/javatests/dagger/functional/producers/provisions/Provisions.java
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package producerstest.provisions;
+package dagger.functional.producers.provisions;
 
 import com.google.common.util.concurrent.ListenableFuture;
+import dagger.functional.producers.ExecutorModule;
 import dagger.producers.Producer;
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
 import dagger.producers.ProductionComponent;
 import javax.inject.Inject;
 import javax.inject.Qualifier;
-import producerstest.ExecutorModule;
 
 /** Tests for requesting provisions from producers. */
 final class Provisions {
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/provisions/ProvisionsTest.java b/javatests/dagger/functional/producers/provisions/ProvisionsTest.java
similarity index 83%
rename from compiler/src/it/producers-functional-tests/src/test/java/producerstest/provisions/ProvisionsTest.java
rename to javatests/dagger/functional/producers/provisions/ProvisionsTest.java
index 53543f962..06f307432 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/provisions/ProvisionsTest.java
+++ b/javatests/dagger/functional/producers/provisions/ProvisionsTest.java
@@ -14,16 +14,15 @@
  * limitations under the License.
  */
 
-package producerstest.provisions;
+package dagger.functional.producers.provisions;
 
 import static com.google.common.truth.Truth.assertThat;
 
+import dagger.functional.producers.provisions.Provisions.Output;
+import dagger.functional.producers.provisions.Provisions.TestComponent;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import producerstest.provisions.DaggerProvisions_TestComponent;
-import producerstest.provisions.Provisions.Output;
-import producerstest.provisions.Provisions.TestComponent;
 
 @RunWith(JUnit4.class)
 public final class ProvisionsTest {
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/scope/ScopeTest.java b/javatests/dagger/functional/producers/scope/ScopeTest.java
similarity index 96%
rename from compiler/src/it/producers-functional-tests/src/test/java/producerstest/scope/ScopeTest.java
rename to javatests/dagger/functional/producers/scope/ScopeTest.java
index 1cffdd306..aaa4219b5 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/scope/ScopeTest.java
+++ b/javatests/dagger/functional/producers/scope/ScopeTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.scope;
+package dagger.functional.producers.scope;
 
 import static com.google.common.truth.Truth.assertThat;
 
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/scope/ScopedModule.java b/javatests/dagger/functional/producers/scope/ScopedModule.java
similarity index 95%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/scope/ScopedModule.java
rename to javatests/dagger/functional/producers/scope/ScopedModule.java
index 5027a7b57..eec300bfb 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/scope/ScopedModule.java
+++ b/javatests/dagger/functional/producers/scope/ScopedModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.scope;
+package dagger.functional.producers.scope;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/scope/ScopedObject.java b/javatests/dagger/functional/producers/scope/ScopedObject.java
similarity index 94%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/scope/ScopedObject.java
rename to javatests/dagger/functional/producers/scope/ScopedObject.java
index cdb72d8d8..07eebd92b 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/scope/ScopedObject.java
+++ b/javatests/dagger/functional/producers/scope/ScopedObject.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.scope;
+package dagger.functional.producers.scope;
 
 import dagger.producers.ProductionScope;
 import javax.inject.Inject;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/scope/SetComponent.java b/javatests/dagger/functional/producers/scope/SetComponent.java
similarity index 90%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/scope/SetComponent.java
rename to javatests/dagger/functional/producers/scope/SetComponent.java
index a4bde48e8..8400b70a6 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/scope/SetComponent.java
+++ b/javatests/dagger/functional/producers/scope/SetComponent.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package producerstest.scope;
+package dagger.functional.producers.scope;
 
 import com.google.common.util.concurrent.ListenableFuture;
+import dagger.functional.producers.ExecutorModule;
 import dagger.producers.ProductionComponent;
 import java.util.Set;
-import producerstest.ExecutorModule;
 
 @ProductionComponent(modules = {ExecutorModule.class, ScopedModule.class, SetProducerModule.class})
 interface SetComponent {
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/scope/SetProducerModule.java b/javatests/dagger/functional/producers/scope/SetProducerModule.java
similarity index 96%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/scope/SetProducerModule.java
rename to javatests/dagger/functional/producers/scope/SetProducerModule.java
index 23a441815..f88c91b03 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/scope/SetProducerModule.java
+++ b/javatests/dagger/functional/producers/scope/SetProducerModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.scope;
+package dagger.functional.producers.scope;
 
 import dagger.multibindings.IntoSet;
 import dagger.producers.ProducerModule;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/ModuleSubcomponentsInterop.java b/javatests/dagger/functional/producers/subcomponent/ModuleSubcomponentsInterop.java
similarity index 96%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/ModuleSubcomponentsInterop.java
rename to javatests/dagger/functional/producers/subcomponent/ModuleSubcomponentsInterop.java
index 7c0c02f73..673be2b29 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/ModuleSubcomponentsInterop.java
+++ b/javatests/dagger/functional/producers/subcomponent/ModuleSubcomponentsInterop.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.subcomponent;
+package dagger.functional.producers.subcomponent;
 
 import dagger.Component;
 import dagger.Module;
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/MultiPackageSubcomponentTest.java b/javatests/dagger/functional/producers/subcomponent/MultiPackageSubcomponentTest.java
similarity index 84%
rename from compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/MultiPackageSubcomponentTest.java
rename to javatests/dagger/functional/producers/subcomponent/MultiPackageSubcomponentTest.java
index aca8ea165..482991d68 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/MultiPackageSubcomponentTest.java
+++ b/javatests/dagger/functional/producers/subcomponent/MultiPackageSubcomponentTest.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package producerstest.subcomponent;
+package dagger.functional.producers.subcomponent;
 
 import static com.google.common.truth.Truth.assertThat;
 
+import dagger.functional.producers.subcomponent.MultiPackageSubcomponents.ParentComponent;
+import dagger.functional.producers.subcomponent.sub.ChildComponent;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import producerstest.subcomponent.MultiPackageSubcomponents.ParentComponent;
-import producerstest.subcomponent.sub.ChildComponent;
 
 @RunWith(JUnit4.class)
 public final class MultiPackageSubcomponentTest {
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/MultiPackageSubcomponents.java b/javatests/dagger/functional/producers/subcomponent/MultiPackageSubcomponents.java
similarity index 89%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/MultiPackageSubcomponents.java
rename to javatests/dagger/functional/producers/subcomponent/MultiPackageSubcomponents.java
index afef85d1a..953bfff50 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/MultiPackageSubcomponents.java
+++ b/javatests/dagger/functional/producers/subcomponent/MultiPackageSubcomponents.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package producerstest.subcomponent;
+package dagger.functional.producers.subcomponent;
 
 import dagger.Component;
 import dagger.Module;
 import dagger.Provides;
-import producerstest.subcomponent.sub.ChildComponent;
+import dagger.functional.producers.subcomponent.sub.ChildComponent;
 
 final class MultiPackageSubcomponents {
   @Component(modules = IntModule.class)
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/ProducerModuleWithSubcomponentsTest.java b/javatests/dagger/functional/producers/subcomponent/ProducerModuleWithSubcomponentsTest.java
similarity index 90%
rename from compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/ProducerModuleWithSubcomponentsTest.java
rename to javatests/dagger/functional/producers/subcomponent/ProducerModuleWithSubcomponentsTest.java
index 24d43e5b6..756807139 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/ProducerModuleWithSubcomponentsTest.java
+++ b/javatests/dagger/functional/producers/subcomponent/ProducerModuleWithSubcomponentsTest.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package producerstest.subcomponent;
+package dagger.functional.producers.subcomponent;
 
 import static com.google.common.truth.Truth.assertThat;
 
+import dagger.functional.producers.subcomponent.UsesProducerModuleSubcomponents.ParentIncludesProductionSubcomponentTransitively;
 import dagger.producers.ProducerModule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import producerstest.subcomponent.UsesProducerModuleSubcomponents.ParentIncludesProductionSubcomponentTransitively;
 
 /** Tests for {@link ProducerModule#subcomponents()}. */
 @RunWith(JUnit4.class)
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/ProductionSubcomponentFromModuleAndFactoryMethod.java b/javatests/dagger/functional/producers/subcomponent/ProductionSubcomponentFromModuleAndFactoryMethod.java
similarity index 93%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/ProductionSubcomponentFromModuleAndFactoryMethod.java
rename to javatests/dagger/functional/producers/subcomponent/ProductionSubcomponentFromModuleAndFactoryMethod.java
index c9c067aba..128624726 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/ProductionSubcomponentFromModuleAndFactoryMethod.java
+++ b/javatests/dagger/functional/producers/subcomponent/ProductionSubcomponentFromModuleAndFactoryMethod.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package producerstest.subcomponent;
+package dagger.functional.producers.subcomponent;
 
 import dagger.Module;
 import dagger.Subcomponent;
+import dagger.functional.producers.ExecutorModule;
 import dagger.producers.ProducerModule;
 import dagger.producers.ProductionComponent;
 import dagger.producers.ProductionSubcomponent;
-import producerstest.ExecutorModule;
 
 /**
  * Tests for {@link Subcomponent}s which are defined with {@link Module#subcomponents()} and are
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/SubcomponentWithBoundExecutorTest.java b/javatests/dagger/functional/producers/subcomponent/SubcomponentWithBoundExecutorTest.java
similarity index 87%
rename from compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/SubcomponentWithBoundExecutorTest.java
rename to javatests/dagger/functional/producers/subcomponent/SubcomponentWithBoundExecutorTest.java
index 14ae444c8..6d176d7f5 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/SubcomponentWithBoundExecutorTest.java
+++ b/javatests/dagger/functional/producers/subcomponent/SubcomponentWithBoundExecutorTest.java
@@ -14,21 +14,21 @@
  * limitations under the License.
  */
 
-package producerstest.subcomponent;
+package dagger.functional.producers.subcomponent;
 
 import static com.google.common.truth.Truth.assertThat;
 
+import dagger.functional.producers.subcomponent.SubcomponentsWithBoundExecutor.ChildComponent;
+import dagger.functional.producers.subcomponent.SubcomponentsWithBoundExecutor.ExecutorModule;
+import dagger.functional.producers.subcomponent.SubcomponentsWithBoundExecutor.GrandchildComponent;
+import dagger.functional.producers.subcomponent.SubcomponentsWithBoundExecutor.GrandchildComponentWithoutBuilder;
+import dagger.functional.producers.subcomponent.SubcomponentsWithBoundExecutor.ParentComponent;
+import dagger.functional.producers.subcomponent.SubcomponentsWithBoundExecutor.ParentProductionComponent;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import producerstest.subcomponent.SubcomponentsWithBoundExecutor.ChildComponent;
-import producerstest.subcomponent.SubcomponentsWithBoundExecutor.ExecutorModule;
-import producerstest.subcomponent.SubcomponentsWithBoundExecutor.GrandchildComponent;
-import producerstest.subcomponent.SubcomponentsWithBoundExecutor.GrandchildComponentWithoutBuilder;
-import producerstest.subcomponent.SubcomponentsWithBoundExecutor.ParentComponent;
-import producerstest.subcomponent.SubcomponentsWithBoundExecutor.ParentProductionComponent;
 
 @RunWith(JUnit4.class)
 public final class SubcomponentWithBoundExecutorTest {
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/SubcomponentsWithBoundExecutor.java b/javatests/dagger/functional/producers/subcomponent/SubcomponentsWithBoundExecutor.java
similarity index 98%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/SubcomponentsWithBoundExecutor.java
rename to javatests/dagger/functional/producers/subcomponent/SubcomponentsWithBoundExecutor.java
index bbd418a58..f7059c751 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/SubcomponentsWithBoundExecutor.java
+++ b/javatests/dagger/functional/producers/subcomponent/SubcomponentsWithBoundExecutor.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.subcomponent;
+package dagger.functional.producers.subcomponent;
 
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.Component;
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/UsesProducerModuleSubcomponents.java b/javatests/dagger/functional/producers/subcomponent/UsesProducerModuleSubcomponents.java
similarity index 93%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/UsesProducerModuleSubcomponents.java
rename to javatests/dagger/functional/producers/subcomponent/UsesProducerModuleSubcomponents.java
index 07502ffeb..31253cc70 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/UsesProducerModuleSubcomponents.java
+++ b/javatests/dagger/functional/producers/subcomponent/UsesProducerModuleSubcomponents.java
@@ -14,9 +14,10 @@
  * limitations under the License.
  */
 
-package producerstest.subcomponent;
+package dagger.functional.producers.subcomponent;
 
 import com.google.common.util.concurrent.ListenableFuture;
+import dagger.functional.producers.ExecutorModule;
 import dagger.multibindings.IntoSet;
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
@@ -24,9 +25,8 @@
 import dagger.producers.ProductionSubcomponent;
 import java.util.Set;
 import javax.inject.Qualifier;
-import producerstest.ExecutorModule;
 
-/** Supporting types for {@link ProducerModuleWithSubcomponentsTest}. */
+/** Supporting types for {@code ProducerModuleWithSubcomponentsTest}. */
 @ProductionComponent(
   modules = UsesProducerModuleSubcomponents.ProducerModuleWithSubcomponents.class
 )
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/pruning/ParentDoesntUseProductionSubcomponent.java b/javatests/dagger/functional/producers/subcomponent/pruning/ParentDoesntUseProductionSubcomponent.java
similarity index 93%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/pruning/ParentDoesntUseProductionSubcomponent.java
rename to javatests/dagger/functional/producers/subcomponent/pruning/ParentDoesntUseProductionSubcomponent.java
index d16b1d063..bf931c19c 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/pruning/ParentDoesntUseProductionSubcomponent.java
+++ b/javatests/dagger/functional/producers/subcomponent/pruning/ParentDoesntUseProductionSubcomponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.subcomponent.pruning;
+package dagger.functional.producers.subcomponent.pruning;
 
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.multibindings.IntoSet;
@@ -26,14 +26,14 @@
 import javax.inject.Qualifier;
 
 /**
- * Supporting types for {@link ProductionSubcomponentOnlyRequestedBySiblingTest}. {@link ChildA} is
+ * Supporting types for {@code ProductionSubcomponentOnlyRequestedBySiblingTest}. {@link ChildA} is
  * a direct child of the top level component, but is only requested within its sibling, not directly
  * from its parent.
  */
 @ProductionComponent(
   modules = {
     ParentDoesntUseProductionSubcomponent.ParentModule.class,
-    producerstest.ExecutorModule.class
+    dagger.functional.producers.ExecutorModule.class
   }
 )
 interface ParentDoesntUseProductionSubcomponent {
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/pruning/ProductionSubcomponentOnlyRequestedBySiblingTest.java b/javatests/dagger/functional/producers/subcomponent/pruning/ProductionSubcomponentOnlyRequestedBySiblingTest.java
similarity index 88%
rename from compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/pruning/ProductionSubcomponentOnlyRequestedBySiblingTest.java
rename to javatests/dagger/functional/producers/subcomponent/pruning/ProductionSubcomponentOnlyRequestedBySiblingTest.java
index c579fb171..d17806100 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/pruning/ProductionSubcomponentOnlyRequestedBySiblingTest.java
+++ b/javatests/dagger/functional/producers/subcomponent/pruning/ProductionSubcomponentOnlyRequestedBySiblingTest.java
@@ -14,17 +14,17 @@
  * limitations under the License.
  */
 
-package producerstest.subcomponent.pruning;
+package dagger.functional.producers.subcomponent.pruning;
 
 import static com.google.common.truth.Truth.assertThat;
 
+import dagger.functional.producers.subcomponent.pruning.ParentDoesntUseProductionSubcomponent.ChildA;
+import dagger.functional.producers.subcomponent.pruning.ParentDoesntUseProductionSubcomponent.ChildB;
 import dagger.producers.ProducerModule;
 import dagger.producers.ProductionSubcomponent;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import producerstest.subcomponent.pruning.ParentDoesntUseProductionSubcomponent.ChildA;
-import producerstest.subcomponent.pruning.ParentDoesntUseProductionSubcomponent.ChildB;
 
 /**
  * Tests for {@link ProductionSubcomponent}s which are included with {@link
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/sub/ChildComponent.java b/javatests/dagger/functional/producers/subcomponent/sub/ChildComponent.java
similarity index 90%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/sub/ChildComponent.java
rename to javatests/dagger/functional/producers/subcomponent/sub/ChildComponent.java
index c49e1c08a..4dfb112d5 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/sub/ChildComponent.java
+++ b/javatests/dagger/functional/producers/subcomponent/sub/ChildComponent.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package producerstest.subcomponent.sub;
+package dagger.functional.producers.subcomponent.sub;
 
 import com.google.common.util.concurrent.ListenableFuture;
+import dagger.functional.producers.ExecutorModule;
 import dagger.producers.ProductionSubcomponent;
-import producerstest.ExecutorModule;
 
 @ProductionSubcomponent(modules = {ExecutorModule.class, ChildModule.class})
 public interface ChildComponent {
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/sub/ChildModule.java b/javatests/dagger/functional/producers/subcomponent/sub/ChildModule.java
similarity index 93%
rename from compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/sub/ChildModule.java
rename to javatests/dagger/functional/producers/subcomponent/sub/ChildModule.java
index c8d730f75..8994a8ad0 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/sub/ChildModule.java
+++ b/javatests/dagger/functional/producers/subcomponent/sub/ChildModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package producerstest.subcomponent.sub;
+package dagger.functional.producers.subcomponent.sub;
 
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/scope/BlueModule.java b/javatests/dagger/functional/scope/BlueModule.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/scope/BlueModule.java
rename to javatests/dagger/functional/scope/BlueModule.java
index ff4703152..e04bc7a32 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/scope/BlueModule.java
+++ b/javatests/dagger/functional/scope/BlueModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.scope;
+package dagger.functional.scope;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/scope/BlueScope.java b/javatests/dagger/functional/scope/BlueScope.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/scope/BlueScope.java
rename to javatests/dagger/functional/scope/BlueScope.java
index 969a51ebd..ecd0da51b 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/scope/BlueScope.java
+++ b/javatests/dagger/functional/scope/BlueScope.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.scope;
+package dagger.functional.scope;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/scope/GreenModule.java b/javatests/dagger/functional/scope/GreenModule.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/scope/GreenModule.java
rename to javatests/dagger/functional/scope/GreenModule.java
index a8d96057d..3f9248f21 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/scope/GreenModule.java
+++ b/javatests/dagger/functional/scope/GreenModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.scope;
+package dagger.functional.scope;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/scope/GreenScope.java b/javatests/dagger/functional/scope/GreenScope.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/scope/GreenScope.java
rename to javatests/dagger/functional/scope/GreenScope.java
index 485b06bc3..92bcc620f 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/scope/GreenScope.java
+++ b/javatests/dagger/functional/scope/GreenScope.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.scope;
+package dagger.functional.scope;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
diff --git a/compiler/src/it/functional-tests/src/test/java/test/scope/ScopeTest.java b/javatests/dagger/functional/scope/ScopeTest.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/test/java/test/scope/ScopeTest.java
rename to javatests/dagger/functional/scope/ScopeTest.java
index 7a3b1d94c..40c1fa91e 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/scope/ScopeTest.java
+++ b/javatests/dagger/functional/scope/ScopeTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.scope;
+package dagger.functional.scope;
 
 import static com.google.common.truth.Truth.assertThat;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/scope/ScopedComponent.java b/javatests/dagger/functional/scope/ScopedComponent.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/scope/ScopedComponent.java
rename to javatests/dagger/functional/scope/ScopedComponent.java
index 8ea281108..fa9b0da4a 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/scope/ScopedComponent.java
+++ b/javatests/dagger/functional/scope/ScopedComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.scope;
+package dagger.functional.scope;
 
 import dagger.Component;
 import java.util.Set;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/scope/TurquoiseModule.java b/javatests/dagger/functional/scope/TurquoiseModule.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/scope/TurquoiseModule.java
rename to javatests/dagger/functional/scope/TurquoiseModule.java
index ef6fb5455..780ecb26a 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/scope/TurquoiseModule.java
+++ b/javatests/dagger/functional/scope/TurquoiseModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.scope;
+package dagger.functional.scope;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/staticprovides/AllStaticModule.java b/javatests/dagger/functional/staticprovides/AllStaticModule.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/staticprovides/AllStaticModule.java
rename to javatests/dagger/functional/staticprovides/AllStaticModule.java
index 89b3f0eb3..fff63eec3 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/staticprovides/AllStaticModule.java
+++ b/javatests/dagger/functional/staticprovides/AllStaticModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.staticprovides;
+package dagger.functional.staticprovides;
 
 import static java.util.Collections.emptySet;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/staticprovides/SomeStaticModule.java b/javatests/dagger/functional/staticprovides/SomeStaticModule.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/staticprovides/SomeStaticModule.java
rename to javatests/dagger/functional/staticprovides/SomeStaticModule.java
index 56d10f9a6..ab65b58d6 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/staticprovides/SomeStaticModule.java
+++ b/javatests/dagger/functional/staticprovides/SomeStaticModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.staticprovides;
+package dagger.functional.staticprovides;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/test/java/test/staticprovides/StaticProvidesTest.java b/javatests/dagger/functional/staticprovides/StaticProvidesTest.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/test/java/test/staticprovides/StaticProvidesTest.java
rename to javatests/dagger/functional/staticprovides/StaticProvidesTest.java
index 76f3ba485..9d9952af1 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/staticprovides/StaticProvidesTest.java
+++ b/javatests/dagger/functional/staticprovides/StaticProvidesTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.staticprovides;
+package dagger.functional.staticprovides;
 
 import static com.google.common.truth.Truth.assertThat;
 import static com.google.common.truth.Truth.assertWithMessage;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/staticprovides/StaticTestComponent.java b/javatests/dagger/functional/staticprovides/StaticTestComponent.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/staticprovides/StaticTestComponent.java
rename to javatests/dagger/functional/staticprovides/StaticTestComponent.java
index 1a3e67799..4dced9102 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/staticprovides/StaticTestComponent.java
+++ b/javatests/dagger/functional/staticprovides/StaticTestComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.staticprovides;
+package dagger.functional.staticprovides;
 
 import dagger.Component;
 import java.util.Set;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/staticprovides/StaticTestComponentWithBuilder.java b/javatests/dagger/functional/staticprovides/StaticTestComponentWithBuilder.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/staticprovides/StaticTestComponentWithBuilder.java
rename to javatests/dagger/functional/staticprovides/StaticTestComponentWithBuilder.java
index 8ae132d39..c6e8f2ac8 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/staticprovides/StaticTestComponentWithBuilder.java
+++ b/javatests/dagger/functional/staticprovides/StaticTestComponentWithBuilder.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.staticprovides;
+package dagger.functional.staticprovides;
 
 import dagger.Component;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/sub/ContributionsModule.java b/javatests/dagger/functional/sub/ContributionsModule.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/main/java/test/sub/ContributionsModule.java
rename to javatests/dagger/functional/sub/ContributionsModule.java
index a72ab14aa..654e8f7db 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/sub/ContributionsModule.java
+++ b/javatests/dagger/functional/sub/ContributionsModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.sub;
+package dagger.functional.sub;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/javatests/dagger/functional/sub/Exposed.java b/javatests/dagger/functional/sub/Exposed.java
new file mode 100644
index 000000000..2c85db019
--- /dev/null
+++ b/javatests/dagger/functional/sub/Exposed.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.sub;
+
+import dagger.functional.Generic;
+import dagger.functional.Generic2;
+import javax.inject.Inject;
+
+public class Exposed {
+  
+  @Inject public Generic2<PackagePrivate> gpp2;
+  @Inject public Generic2<PackagePrivateContainer.PublicEnclosed> gppc2;
+
+  public Generic<PackagePrivate> gpp;
+  public Generic<PackagePrivateContainer.PublicEnclosed> gppc;
+  
+  @Inject Exposed(Generic<PackagePrivate> gpp, Generic<PackagePrivateContainer.PublicEnclosed> gppc) {
+    this.gpp = gpp;
+    this.gppc = gppc;
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/sub/OtherThing.java b/javatests/dagger/functional/sub/OtherThing.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/sub/OtherThing.java
rename to javatests/dagger/functional/sub/OtherThing.java
index 9597f570c..9150aaba2 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/sub/OtherThing.java
+++ b/javatests/dagger/functional/sub/OtherThing.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.sub;
+package dagger.functional.sub;
 
 import javax.inject.Inject;
 
diff --git a/javatests/dagger/functional/sub/PackagePrivate.java b/javatests/dagger/functional/sub/PackagePrivate.java
new file mode 100644
index 000000000..8220877d9
--- /dev/null
+++ b/javatests/dagger/functional/sub/PackagePrivate.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.sub;
+
+import javax.inject.Inject;
+
+class PackagePrivate {  
+  @Inject PackagePrivate() {}
+}
diff --git a/javatests/dagger/functional/sub/PackagePrivateContainer.java b/javatests/dagger/functional/sub/PackagePrivateContainer.java
new file mode 100644
index 000000000..f1b1033f9
--- /dev/null
+++ b/javatests/dagger/functional/sub/PackagePrivateContainer.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.sub;
+
+import javax.inject.Inject;
+
+class PackagePrivateContainer {  
+  public static class PublicEnclosed {
+    @Inject PublicEnclosed() {}
+  }
+}
diff --git a/javatests/dagger/functional/sub/PublicSubclass.java b/javatests/dagger/functional/sub/PublicSubclass.java
new file mode 100644
index 000000000..2ccd42ab3
--- /dev/null
+++ b/javatests/dagger/functional/sub/PublicSubclass.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.sub;
+
+import dagger.functional.Generic;
+import javax.inject.Inject;
+
+public class PublicSubclass extends Generic<PackagePrivate> {
+  @Inject public PublicSubclass(PackagePrivate pp) {
+    super(pp);
+  }
+}
diff --git a/javatests/dagger/functional/sub/PublicSubclass2.java b/javatests/dagger/functional/sub/PublicSubclass2.java
new file mode 100644
index 000000000..3d5f42970
--- /dev/null
+++ b/javatests/dagger/functional/sub/PublicSubclass2.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.sub;
+
+import dagger.functional.Generic;
+import javax.inject.Inject;
+
+public class PublicSubclass2 extends Generic<PackagePrivateContainer.PublicEnclosed> {
+  @Inject public PublicSubclass2(PackagePrivateContainer.PublicEnclosed pp) {
+    super(pp);
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/AnInterface.java b/javatests/dagger/functional/subcomponent/AnInterface.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/AnInterface.java
rename to javatests/dagger/functional/subcomponent/AnInterface.java
index 325bbb421..f0d9b4c48 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/AnInterface.java
+++ b/javatests/dagger/functional/subcomponent/AnInterface.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 interface AnInterface {
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/BoundAsSingleton.java b/javatests/dagger/functional/subcomponent/BoundAsSingleton.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/BoundAsSingleton.java
rename to javatests/dagger/functional/subcomponent/BoundAsSingleton.java
index b11cadf7d..9d14465dc 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/BoundAsSingleton.java
+++ b/javatests/dagger/functional/subcomponent/BoundAsSingleton.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildAbstractClassComponent.java b/javatests/dagger/functional/subcomponent/ChildAbstractClassComponent.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildAbstractClassComponent.java
rename to javatests/dagger/functional/subcomponent/ChildAbstractClassComponent.java
index b7abe9408..b9bcce22d 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildAbstractClassComponent.java
+++ b/javatests/dagger/functional/subcomponent/ChildAbstractClassComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Subcomponent;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponent.java b/javatests/dagger/functional/subcomponent/ChildComponent.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponent.java
rename to javatests/dagger/functional/subcomponent/ChildComponent.java
index 3353cf091..6d6fd8bd9 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponent.java
+++ b/javatests/dagger/functional/subcomponent/ChildComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Subcomponent;
 import java.util.Set;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponentRequiringModules.java b/javatests/dagger/functional/subcomponent/ChildComponentRequiringModules.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponentRequiringModules.java
rename to javatests/dagger/functional/subcomponent/ChildComponentRequiringModules.java
index 78a5c4a73..29b60e2c7 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponentRequiringModules.java
+++ b/javatests/dagger/functional/subcomponent/ChildComponentRequiringModules.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Subcomponent;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildModule.java b/javatests/dagger/functional/subcomponent/ChildModule.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildModule.java
rename to javatests/dagger/functional/subcomponent/ChildModule.java
index a86093a36..f11cefc56 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildModule.java
+++ b/javatests/dagger/functional/subcomponent/ChildModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildModuleWithParameters.java b/javatests/dagger/functional/subcomponent/ChildModuleWithParameters.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildModuleWithParameters.java
rename to javatests/dagger/functional/subcomponent/ChildModuleWithParameters.java
index fd6b7fddd..17f8471f0 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildModuleWithParameters.java
+++ b/javatests/dagger/functional/subcomponent/ChildModuleWithParameters.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Module;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildModuleWithState.java b/javatests/dagger/functional/subcomponent/ChildModuleWithState.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildModuleWithState.java
rename to javatests/dagger/functional/subcomponent/ChildModuleWithState.java
index 1952a27a1..49b266c9a 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildModuleWithState.java
+++ b/javatests/dagger/functional/subcomponent/ChildModuleWithState.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GenericParentComponent.java b/javatests/dagger/functional/subcomponent/GenericParentComponent.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/GenericParentComponent.java
rename to javatests/dagger/functional/subcomponent/GenericParentComponent.java
index 5b8414cea..f49083b76 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GenericParentComponent.java
+++ b/javatests/dagger/functional/subcomponent/GenericParentComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 interface GenericParentComponent<B> {  
   B subcomponent();
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildComponent.java b/javatests/dagger/functional/subcomponent/GrandchildComponent.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildComponent.java
rename to javatests/dagger/functional/subcomponent/GrandchildComponent.java
index 0fc79f979..5a1b7720c 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildComponent.java
+++ b/javatests/dagger/functional/subcomponent/GrandchildComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Subcomponent;
 import java.util.Set;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildModule.java b/javatests/dagger/functional/subcomponent/GrandchildModule.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildModule.java
rename to javatests/dagger/functional/subcomponent/GrandchildModule.java
index a261117a5..c61accf81 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildModule.java
+++ b/javatests/dagger/functional/subcomponent/GrandchildModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Binds;
 import dagger.Module;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ImplementsAnInterface.java b/javatests/dagger/functional/subcomponent/ImplementsAnInterface.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/ImplementsAnInterface.java
rename to javatests/dagger/functional/subcomponent/ImplementsAnInterface.java
index 8be798f42..a07025cd1 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ImplementsAnInterface.java
+++ b/javatests/dagger/functional/subcomponent/ImplementsAnInterface.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/ModuleWithSubcomponentsTest.java b/javatests/dagger/functional/subcomponent/ModuleWithSubcomponentsTest.java
similarity index 91%
rename from compiler/src/it/functional-tests/src/test/java/test/subcomponent/ModuleWithSubcomponentsTest.java
rename to javatests/dagger/functional/subcomponent/ModuleWithSubcomponentsTest.java
index 34dbf8825..06beae14d 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/ModuleWithSubcomponentsTest.java
+++ b/javatests/dagger/functional/subcomponent/ModuleWithSubcomponentsTest.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import static com.google.common.truth.Truth.assertThat;
 
 import dagger.Module;
+import dagger.functional.subcomponent.UsesModuleSubcomponents.ParentIncludesSubcomponentTransitively;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import test.subcomponent.UsesModuleSubcomponents.ParentIncludesSubcomponentTransitively;
 
 /** Tests for {@link Module#subcomponents()}. */
 @RunWith(JUnit4.class)
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/MultibindingSubcomponents.java b/javatests/dagger/functional/subcomponent/MultibindingSubcomponents.java
similarity index 99%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/MultibindingSubcomponents.java
rename to javatests/dagger/functional/subcomponent/MultibindingSubcomponents.java
index fa53807cb..99597711f 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/MultibindingSubcomponents.java
+++ b/javatests/dagger/functional/subcomponent/MultibindingSubcomponents.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Binds;
 import dagger.Component;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/NeedsAnInterface.java b/javatests/dagger/functional/subcomponent/NeedsAnInterface.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/NeedsAnInterface.java
rename to javatests/dagger/functional/subcomponent/NeedsAnInterface.java
index e1d983180..3efbad7af 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/NeedsAnInterface.java
+++ b/javatests/dagger/functional/subcomponent/NeedsAnInterface.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 class NeedsAnInterface {
   NeedsAnInterface(@SuppressWarnings("unused") AnInterface anInterface) {}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java b/javatests/dagger/functional/subcomponent/ParentComponent.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java
rename to javatests/dagger/functional/subcomponent/ParentComponent.java
index 38f298adf..4c0b60806 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java
+++ b/javatests/dagger/functional/subcomponent/ParentComponent.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Component;
+import dagger.functional.SomeQualifier;
 import javax.inject.Singleton;
-import test.SomeQualifier;
 
 @Component(modules = {ParentModule.class, UnresolvableChildComponentModule.class})
 @Singleton
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentGetters.java b/javatests/dagger/functional/subcomponent/ParentGetters.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentGetters.java
rename to javatests/dagger/functional/subcomponent/ParentGetters.java
index 6614ddfe5..928bff29a 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentGetters.java
+++ b/javatests/dagger/functional/subcomponent/ParentGetters.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import java.util.Set;
 import javax.inject.Provider;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentModule.java b/javatests/dagger/functional/subcomponent/ParentModule.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentModule.java
rename to javatests/dagger/functional/subcomponent/ParentModule.java
index dce3eadfa..8ce4b87e2 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentModule.java
+++ b/javatests/dagger/functional/subcomponent/ParentModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Binds;
 import dagger.Module;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentOfGenericComponent.java b/javatests/dagger/functional/subcomponent/ParentOfGenericComponent.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentOfGenericComponent.java
rename to javatests/dagger/functional/subcomponent/ParentOfGenericComponent.java
index edd3095cb..cc701f45e 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentOfGenericComponent.java
+++ b/javatests/dagger/functional/subcomponent/ParentOfGenericComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Component;
 import javax.inject.Singleton;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresSingletons.java b/javatests/dagger/functional/subcomponent/RequiresSingletons.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresSingletons.java
rename to javatests/dagger/functional/subcomponent/RequiresSingletons.java
index 2e9cadb57..8dc9b3d26 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresSingletons.java
+++ b/javatests/dagger/functional/subcomponent/RequiresSingletons.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/SingletonType.java b/javatests/dagger/functional/subcomponent/SingletonType.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/SingletonType.java
rename to javatests/dagger/functional/subcomponent/SingletonType.java
index 68a063600..9a6da6c5c 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/SingletonType.java
+++ b/javatests/dagger/functional/subcomponent/SingletonType.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import javax.inject.Inject;
 import javax.inject.Singleton;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/StaticChildModule.java b/javatests/dagger/functional/subcomponent/StaticChildModule.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/StaticChildModule.java
rename to javatests/dagger/functional/subcomponent/StaticChildModule.java
index 4896dd67a..fcd0cd55c 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/StaticChildModule.java
+++ b/javatests/dagger/functional/subcomponent/StaticChildModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/SubcomponentFromModuleAndFactoryMethod.java b/javatests/dagger/functional/subcomponent/SubcomponentFromModuleAndFactoryMethod.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/SubcomponentFromModuleAndFactoryMethod.java
rename to javatests/dagger/functional/subcomponent/SubcomponentFromModuleAndFactoryMethod.java
index 8a04944ab..b8b880698 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/SubcomponentFromModuleAndFactoryMethod.java
+++ b/javatests/dagger/functional/subcomponent/SubcomponentFromModuleAndFactoryMethod.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Component;
 import dagger.Module;
diff --git a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentMultibindingsTest.java b/javatests/dagger/functional/subcomponent/SubcomponentMultibindingsTest.java
similarity index 93%
rename from compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentMultibindingsTest.java
rename to javatests/dagger/functional/subcomponent/SubcomponentMultibindingsTest.java
index 3e0e52702..eeadbeb4d 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentMultibindingsTest.java
+++ b/javatests/dagger/functional/subcomponent/SubcomponentMultibindingsTest.java
@@ -14,24 +14,24 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import static com.google.common.truth.Truth.assertThat;
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
+import dagger.functional.subcomponent.MultibindingSubcomponents.BoundInChild;
+import dagger.functional.subcomponent.MultibindingSubcomponents.BoundInParent;
+import dagger.functional.subcomponent.MultibindingSubcomponents.BoundInParentAndChild;
+import dagger.functional.subcomponent.MultibindingSubcomponents.ParentWithProvisionHasChildWithProvision;
+import dagger.functional.subcomponent.MultibindingSubcomponents.ParentWithProvisionHasChildWithoutProvision;
+import dagger.functional.subcomponent.MultibindingSubcomponents.ParentWithoutProvisionHasChildWithProvision;
+import dagger.functional.subcomponent.MultibindingSubcomponents.ParentWithoutProvisionHasChildWithoutProvision;
+import dagger.functional.subcomponent.MultibindingSubcomponents.RequiresMultibindings;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import test.subcomponent.MultibindingSubcomponents.BoundInChild;
-import test.subcomponent.MultibindingSubcomponents.BoundInParent;
-import test.subcomponent.MultibindingSubcomponents.BoundInParentAndChild;
-import test.subcomponent.MultibindingSubcomponents.ParentWithProvisionHasChildWithProvision;
-import test.subcomponent.MultibindingSubcomponents.ParentWithProvisionHasChildWithoutProvision;
-import test.subcomponent.MultibindingSubcomponents.ParentWithoutProvisionHasChildWithProvision;
-import test.subcomponent.MultibindingSubcomponents.ParentWithoutProvisionHasChildWithoutProvision;
-import test.subcomponent.MultibindingSubcomponents.RequiresMultibindings;
 
 @RunWith(JUnit4.class)
 public class SubcomponentMultibindingsTest {
diff --git a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentTest.java b/javatests/dagger/functional/subcomponent/SubcomponentTest.java
similarity index 99%
rename from compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentTest.java
rename to javatests/dagger/functional/subcomponent/SubcomponentTest.java
index 9c7b2118c..68d19d3a7 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentTest.java
+++ b/javatests/dagger/functional/subcomponent/SubcomponentTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import static com.google.common.collect.Sets.intersection;
 import static com.google.common.truth.Truth.assertThat;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/Unbound.java b/javatests/dagger/functional/subcomponent/Unbound.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/Unbound.java
rename to javatests/dagger/functional/subcomponent/Unbound.java
index e4c2338d5..ae8062180 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/Unbound.java
+++ b/javatests/dagger/functional/subcomponent/Unbound.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnresolvableChildComponent.java b/javatests/dagger/functional/subcomponent/UnresolvableChildComponent.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnresolvableChildComponent.java
rename to javatests/dagger/functional/subcomponent/UnresolvableChildComponent.java
index a7d470212..57d9d0dbf 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnresolvableChildComponent.java
+++ b/javatests/dagger/functional/subcomponent/UnresolvableChildComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Subcomponent;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnresolvableChildComponentModule.java b/javatests/dagger/functional/subcomponent/UnresolvableChildComponentModule.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnresolvableChildComponentModule.java
rename to javatests/dagger/functional/subcomponent/UnresolvableChildComponentModule.java
index 34aa73e95..613e7e355 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnresolvableChildComponentModule.java
+++ b/javatests/dagger/functional/subcomponent/UnresolvableChildComponentModule.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Module;
 import dagger.Provides;
-import test.SomeQualifier;
+import dagger.functional.SomeQualifier;
 
 @Module
 final class UnresolvableChildComponentModule {
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnscopedType.java b/javatests/dagger/functional/subcomponent/UnscopedType.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnscopedType.java
rename to javatests/dagger/functional/subcomponent/UnscopedType.java
index 620df47b5..c16745778 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnscopedType.java
+++ b/javatests/dagger/functional/subcomponent/UnscopedType.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UsesModuleSubcomponents.java b/javatests/dagger/functional/subcomponent/UsesModuleSubcomponents.java
similarity index 98%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/UsesModuleSubcomponents.java
rename to javatests/dagger/functional/subcomponent/UsesModuleSubcomponents.java
index 9c7ba3111..bd240af66 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UsesModuleSubcomponents.java
+++ b/javatests/dagger/functional/subcomponent/UsesModuleSubcomponents.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent;
+package dagger.functional.subcomponent;
 
 import dagger.Component;
 import dagger.Module;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ChildComponent.java b/javatests/dagger/functional/subcomponent/hiding/ChildComponent.java
similarity index 74%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ChildComponent.java
rename to javatests/dagger/functional/subcomponent/hiding/ChildComponent.java
index 5f7c0258a..7cb4fcec5 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ChildComponent.java
+++ b/javatests/dagger/functional/subcomponent/hiding/ChildComponent.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package test.subcomponent.hiding;
+package dagger.functional.subcomponent.hiding;
 
 import dagger.Subcomponent;
 
-@Subcomponent(modules = test.subcomponent.hiding.b.CommonModuleName.class)
+@Subcomponent(modules = dagger.functional.subcomponent.hiding.b.CommonModuleName.class)
 interface ChildComponent {
   //ensure that t.s.h.a.CommonName gets bound in this component
-  test.subcomponent.hiding.a.CommonName aCommonName();
+  dagger.functional.subcomponent.hiding.a.CommonName aCommonName();
   //ensure that t.s.h.b.CommonName gets bound in this component
-  test.subcomponent.hiding.b.CommonName bCommonName();
+  dagger.functional.subcomponent.hiding.b.CommonName bCommonName();
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ParentComponent.java b/javatests/dagger/functional/subcomponent/hiding/ParentComponent.java
similarity index 80%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ParentComponent.java
rename to javatests/dagger/functional/subcomponent/hiding/ParentComponent.java
index ffbea8fe4..7458d82f9 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ParentComponent.java
+++ b/javatests/dagger/functional/subcomponent/hiding/ParentComponent.java
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package test.subcomponent.hiding;
+package dagger.functional.subcomponent.hiding;
 
 import dagger.Component;
 import javax.inject.Singleton;
 
-@Component(modules = test.subcomponent.hiding.a.CommonModuleName.class)
+@Component(modules = dagger.functional.subcomponent.hiding.a.CommonModuleName.class)
 @Singleton
 interface ParentComponent {
   // ensure that t.s.h.a.CommonName gets bound in this component
-  test.subcomponent.hiding.a.CommonName aCommonName();
+  dagger.functional.subcomponent.hiding.a.CommonName aCommonName();
 
   ChildComponent newChildComponent();
 }
diff --git a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/hiding/SubcomponentHidingTest.java b/javatests/dagger/functional/subcomponent/hiding/SubcomponentHidingTest.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/test/java/test/subcomponent/hiding/SubcomponentHidingTest.java
rename to javatests/dagger/functional/subcomponent/hiding/SubcomponentHidingTest.java
index 8b141fac0..398b8a701 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/hiding/SubcomponentHidingTest.java
+++ b/javatests/dagger/functional/subcomponent/hiding/SubcomponentHidingTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent.hiding;
+package dagger.functional.subcomponent.hiding;
 
 import static com.google.common.truth.Truth.assertThat;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/a/CommonModuleName.java b/javatests/dagger/functional/subcomponent/hiding/a/CommonModuleName.java
similarity index 93%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/a/CommonModuleName.java
rename to javatests/dagger/functional/subcomponent/hiding/a/CommonModuleName.java
index 8fbbd6f15..d13446c25 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/a/CommonModuleName.java
+++ b/javatests/dagger/functional/subcomponent/hiding/a/CommonModuleName.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent.hiding.a;
+package dagger.functional.subcomponent.hiding.a;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/a/CommonName.java b/javatests/dagger/functional/subcomponent/hiding/a/CommonName.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/a/CommonName.java
rename to javatests/dagger/functional/subcomponent/hiding/a/CommonName.java
index 864799f30..567fc3941 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/a/CommonName.java
+++ b/javatests/dagger/functional/subcomponent/hiding/a/CommonName.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent.hiding.a;
+package dagger.functional.subcomponent.hiding.a;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/b/CommonModuleName.java b/javatests/dagger/functional/subcomponent/hiding/b/CommonModuleName.java
similarity index 93%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/b/CommonModuleName.java
rename to javatests/dagger/functional/subcomponent/hiding/b/CommonModuleName.java
index 10f5a1f32..b05356f86 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/b/CommonModuleName.java
+++ b/javatests/dagger/functional/subcomponent/hiding/b/CommonModuleName.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent.hiding.b;
+package dagger.functional.subcomponent.hiding.b;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/b/CommonName.java b/javatests/dagger/functional/subcomponent/hiding/b/CommonName.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/b/CommonName.java
rename to javatests/dagger/functional/subcomponent/hiding/b/CommonName.java
index 21c1a115c..1136f64e0 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/b/CommonName.java
+++ b/javatests/dagger/functional/subcomponent/hiding/b/CommonName.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent.hiding.b;
+package dagger.functional.subcomponent.hiding.b;
 
 import javax.inject.Inject;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/pruning/ParentDoesntUseSubcomponent.java b/javatests/dagger/functional/subcomponent/pruning/ParentDoesntUseSubcomponent.java
similarity index 97%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/pruning/ParentDoesntUseSubcomponent.java
rename to javatests/dagger/functional/subcomponent/pruning/ParentDoesntUseSubcomponent.java
index 3126f13f3..516a52c10 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/pruning/ParentDoesntUseSubcomponent.java
+++ b/javatests/dagger/functional/subcomponent/pruning/ParentDoesntUseSubcomponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent.pruning;
+package dagger.functional.subcomponent.pruning;
 
 import dagger.Component;
 import dagger.Module;
diff --git a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/pruning/SubcomponentOnlyRequestedBySiblingTest.java b/javatests/dagger/functional/subcomponent/pruning/SubcomponentOnlyRequestedBySiblingTest.java
similarity index 89%
rename from compiler/src/it/functional-tests/src/test/java/test/subcomponent/pruning/SubcomponentOnlyRequestedBySiblingTest.java
rename to javatests/dagger/functional/subcomponent/pruning/SubcomponentOnlyRequestedBySiblingTest.java
index fb856a73d..40a784aaf 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/pruning/SubcomponentOnlyRequestedBySiblingTest.java
+++ b/javatests/dagger/functional/subcomponent/pruning/SubcomponentOnlyRequestedBySiblingTest.java
@@ -14,17 +14,17 @@
  * limitations under the License.
  */
 
-package test.subcomponent.pruning;
+package dagger.functional.subcomponent.pruning;
 
 import static com.google.common.truth.Truth.assertThat;
 
 import dagger.Module;
 import dagger.Subcomponent;
+import dagger.functional.subcomponent.pruning.ParentDoesntUseSubcomponent.ChildA;
+import dagger.functional.subcomponent.pruning.ParentDoesntUseSubcomponent.ChildB;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import test.subcomponent.pruning.ParentDoesntUseSubcomponent.ChildA;
-import test.subcomponent.pruning.ParentDoesntUseSubcomponent.ChildB;
 
 /**
  * Tests for {@link Subcomponent}s which are included with {@link Module#subcomponents()} but not
diff --git a/javatests/dagger/functional/subcomponent/repeat/OnlyUsedInChild.java b/javatests/dagger/functional/subcomponent/repeat/OnlyUsedInChild.java
new file mode 100644
index 000000000..b3318cf88
--- /dev/null
+++ b/javatests/dagger/functional/subcomponent/repeat/OnlyUsedInChild.java
@@ -0,0 +1,21 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.subcomponent.repeat;
+
+abstract class OnlyUsedInChild {
+
+}
diff --git a/javatests/dagger/functional/subcomponent/repeat/OnlyUsedInParent.java b/javatests/dagger/functional/subcomponent/repeat/OnlyUsedInParent.java
new file mode 100644
index 000000000..1e8d4cd93
--- /dev/null
+++ b/javatests/dagger/functional/subcomponent/repeat/OnlyUsedInParent.java
@@ -0,0 +1,21 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.subcomponent.repeat;
+
+abstract class OnlyUsedInParent {
+
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/OtherSubcomponentWithRepeatedModule.java b/javatests/dagger/functional/subcomponent/repeat/OtherSubcomponentWithRepeatedModule.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/OtherSubcomponentWithRepeatedModule.java
rename to javatests/dagger/functional/subcomponent/repeat/OtherSubcomponentWithRepeatedModule.java
index 31844a5ed..82cd021fd 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/OtherSubcomponentWithRepeatedModule.java
+++ b/javatests/dagger/functional/subcomponent/repeat/OtherSubcomponentWithRepeatedModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent.repeat;
+package dagger.functional.subcomponent.repeat;
 
 import dagger.Subcomponent;
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/ParentComponent.java b/javatests/dagger/functional/subcomponent/repeat/ParentComponent.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/ParentComponent.java
rename to javatests/dagger/functional/subcomponent/repeat/ParentComponent.java
index 6ecfd17cc..1578596c5 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/ParentComponent.java
+++ b/javatests/dagger/functional/subcomponent/repeat/ParentComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent.repeat;
+package dagger.functional.subcomponent.repeat;
 
 import dagger.Component;
 import java.util.Set;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/RepeatedModule.java b/javatests/dagger/functional/subcomponent/repeat/RepeatedModule.java
similarity index 96%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/RepeatedModule.java
rename to javatests/dagger/functional/subcomponent/repeat/RepeatedModule.java
index f4635e55e..55d7de9d4 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/RepeatedModule.java
+++ b/javatests/dagger/functional/subcomponent/repeat/RepeatedModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent.repeat;
+package dagger.functional.subcomponent.repeat;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/repeat/RepeatedModuleTest.java b/javatests/dagger/functional/subcomponent/repeat/RepeatedModuleTest.java
similarity index 92%
rename from compiler/src/it/functional-tests/src/test/java/test/subcomponent/repeat/RepeatedModuleTest.java
rename to javatests/dagger/functional/subcomponent/repeat/RepeatedModuleTest.java
index e4b21c1ba..1d7740b8a 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/repeat/RepeatedModuleTest.java
+++ b/javatests/dagger/functional/subcomponent/repeat/RepeatedModuleTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent.repeat;
+package dagger.functional.subcomponent.repeat;
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
@@ -59,7 +59,7 @@ public void repeatedModuleBuilderThrowsInSubcomponent() {
     } catch (UnsupportedOperationException expected) {
       assertThat(expected)
           .hasMessage(
-              "test.subcomponent.repeat.RepeatedModule cannot be set "
+              "dagger.functional.subcomponent.repeat.RepeatedModule cannot be set "
                   + "because it is inherited from the enclosing component");
     }
   }
@@ -76,7 +76,7 @@ public void repeatedModuleBuilderThrowsInGrandchildSubcomponent() {
     } catch (UnsupportedOperationException expected) {
       assertThat(expected)
           .hasMessage(
-              "test.subcomponent.repeat.RepeatedModule cannot be set "
+              "dagger.functional.subcomponent.repeat.RepeatedModule cannot be set "
                   + "because it is inherited from the enclosing component");
     }
   }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/SubcomponentWithRepeatedModule.java b/javatests/dagger/functional/subcomponent/repeat/SubcomponentWithRepeatedModule.java
similarity index 95%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/SubcomponentWithRepeatedModule.java
rename to javatests/dagger/functional/subcomponent/repeat/SubcomponentWithRepeatedModule.java
index 4a3dd061e..0762374bd 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/SubcomponentWithRepeatedModule.java
+++ b/javatests/dagger/functional/subcomponent/repeat/SubcomponentWithRepeatedModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent.repeat;
+package dagger.functional.subcomponent.repeat;
 
 import dagger.Subcomponent;
 import java.util.Set;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/SubcomponentWithoutRepeatedModule.java b/javatests/dagger/functional/subcomponent/repeat/SubcomponentWithoutRepeatedModule.java
similarity index 94%
rename from compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/SubcomponentWithoutRepeatedModule.java
rename to javatests/dagger/functional/subcomponent/repeat/SubcomponentWithoutRepeatedModule.java
index e7829a025..5930f5182 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/repeat/SubcomponentWithoutRepeatedModule.java
+++ b/javatests/dagger/functional/subcomponent/repeat/SubcomponentWithoutRepeatedModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.subcomponent.repeat;
+package dagger.functional.subcomponent.repeat;
 
 import dagger.Subcomponent;
 
diff --git a/compiler/src/it/tck/BUILD b/javatests/dagger/functional/tck/BUILD
similarity index 70%
rename from compiler/src/it/tck/BUILD
rename to javatests/dagger/functional/tck/BUILD
index c0979488c..5b13ebd46 100644
--- a/compiler/src/it/tck/BUILD
+++ b/javatests/dagger/functional/tck/BUILD
@@ -23,13 +23,12 @@ load(
     "DOCLINT_REFERENCES",
     "PRE_JAVA_8_INFERENCE_OPTS",
 )
+load("//:test_defs.bzl", "GenJavaTests")
 
-# Sample code to be tested in functional tests.
-java_library(
-    name = "code_under_test",
-    testonly = 1,
-    srcs = glob(["src/main/java/**/*.java"]),
-    javacopts = PRE_JAVA_8_INFERENCE_OPTS + DOCLINT_HTML_AND_SYNTAX + [
+GenJavaTests(
+    name = "tck_tests",
+    srcs = glob(["*.java"]),
+    javacopts = PRE_JAVA_8_INFERENCE_OPTS + DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES + [
         "-Adagger.privateMemberValidation=warning",
         "-Adagger.staticMemberValidation=warning",
         "-Adagger.ignorePrivateAndStaticInjectionForComponent=enabled",
@@ -41,20 +40,3 @@ java_library(
         "//third_party:junit",
     ],
 )
-
-load("//:test_defs.bzl", "GenJavaTests")
-
-GenJavaTests(
-    name = "tck_tests",
-    srcs = glob(["src/test/java/**/*.java"]),
-    javacopts = PRE_JAVA_8_INFERENCE_OPTS + DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
-    deps = [
-        ":code_under_test",
-        "//:dagger_with_compiler",
-        "//third_party:jsr330_inject",
-        "//third_party:jsr330_inject_tck",
-        "//third_party:junit",
-    ],
-)
-
-test_suite(name = "AllTests")
diff --git a/compiler/src/it/tck/src/main/java/test/tck/CarModule.java b/javatests/dagger/functional/tck/CarModule.java
similarity index 96%
rename from compiler/src/it/tck/src/main/java/test/tck/CarModule.java
rename to javatests/dagger/functional/tck/CarModule.java
index 6ef5d3811..3c44d60f9 100644
--- a/compiler/src/it/tck/src/main/java/test/tck/CarModule.java
+++ b/javatests/dagger/functional/tck/CarModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.tck;
+package dagger.functional.tck;
 
 import dagger.Binds;
 import dagger.Module;
diff --git a/compiler/src/it/tck/src/main/java/test/tck/CarShop.java b/javatests/dagger/functional/tck/CarShop.java
similarity index 96%
rename from compiler/src/it/tck/src/main/java/test/tck/CarShop.java
rename to javatests/dagger/functional/tck/CarShop.java
index 73f326d67..d9e64d6e3 100644
--- a/compiler/src/it/tck/src/main/java/test/tck/CarShop.java
+++ b/javatests/dagger/functional/tck/CarShop.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.tck;
+package dagger.functional.tck;
 
 import dagger.Component;
 import javax.inject.Singleton;
diff --git a/compiler/src/it/tck/src/main/java/test/tck/EngineModule.java b/javatests/dagger/functional/tck/EngineModule.java
similarity index 97%
rename from compiler/src/it/tck/src/main/java/test/tck/EngineModule.java
rename to javatests/dagger/functional/tck/EngineModule.java
index dd27dcb40..331b064ef 100644
--- a/compiler/src/it/tck/src/main/java/test/tck/EngineModule.java
+++ b/javatests/dagger/functional/tck/EngineModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.tck;
+package dagger.functional.tck;
 
 import dagger.MembersInjector;
 import dagger.Module;
diff --git a/compiler/src/it/tck/src/main/java/test/tck/FuelTankModule.java b/javatests/dagger/functional/tck/FuelTankModule.java
similarity index 96%
rename from compiler/src/it/tck/src/main/java/test/tck/FuelTankModule.java
rename to javatests/dagger/functional/tck/FuelTankModule.java
index 77f6a4172..b5f2800b6 100644
--- a/compiler/src/it/tck/src/main/java/test/tck/FuelTankModule.java
+++ b/javatests/dagger/functional/tck/FuelTankModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.tck;
+package dagger.functional.tck;
 
 import dagger.Module;
 import dagger.Provides;
diff --git a/compiler/src/it/tck/src/main/java/test/tck/SeatModule.java b/javatests/dagger/functional/tck/SeatModule.java
similarity index 96%
rename from compiler/src/it/tck/src/main/java/test/tck/SeatModule.java
rename to javatests/dagger/functional/tck/SeatModule.java
index e5a90c08e..c3574eaa8 100644
--- a/compiler/src/it/tck/src/main/java/test/tck/SeatModule.java
+++ b/javatests/dagger/functional/tck/SeatModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.tck;
+package dagger.functional.tck;
 
 import dagger.Binds;
 import dagger.Module;
diff --git a/compiler/src/it/tck/src/test/java/test/tck/TckTest.java b/javatests/dagger/functional/tck/TckTest.java
similarity index 97%
rename from compiler/src/it/tck/src/test/java/test/tck/TckTest.java
rename to javatests/dagger/functional/tck/TckTest.java
index e6d6301a0..a49972d5e 100644
--- a/compiler/src/it/tck/src/test/java/test/tck/TckTest.java
+++ b/javatests/dagger/functional/tck/TckTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.tck;
+package dagger.functional.tck;
 
 import junit.framework.Test;
 import org.atinject.tck.Tck;
diff --git a/compiler/src/it/tck/src/main/java/test/tck/TireModule.java b/javatests/dagger/functional/tck/TireModule.java
similarity index 96%
rename from compiler/src/it/tck/src/main/java/test/tck/TireModule.java
rename to javatests/dagger/functional/tck/TireModule.java
index 8b668eda2..e6b6d58a1 100644
--- a/compiler/src/it/tck/src/main/java/test/tck/TireModule.java
+++ b/javatests/dagger/functional/tck/TireModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.tck;
+package dagger.functional.tck;
 
 import dagger.Binds;
 import dagger.Module;
