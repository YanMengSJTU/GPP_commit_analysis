diff --git a/core/src/main/java/dagger/internal/DoubleCheckLazy.java b/core/src/main/java/dagger/internal/DoubleCheckLazy.java
index 29315d3af..6db11f381 100644
--- a/core/src/main/java/dagger/internal/DoubleCheckLazy.java
+++ b/core/src/main/java/dagger/internal/DoubleCheckLazy.java
@@ -25,30 +25,32 @@
  * @author Gregory Kick
  * @since 2.0
  */
+// TODO(gak): Unify the duplicated code between this and ScopedProvider.
 public final class DoubleCheckLazy<T> implements Lazy<T> {
+  private static final Object UNINITIALIZED = new Object();
+
   private final Provider<T> provider;
-  private volatile T instance = null;
+  private volatile Object instance = UNINITIALIZED;
 
   private DoubleCheckLazy(Provider<T> provider) {
     assert provider != null;
     this.provider = provider;
   }
 
+  @SuppressWarnings("unchecked") // cast only happens when result comes from the factory
   @Override
   public T get() {
-    T result = instance;
-    if (result == null) {
+    // to suppress it.
+    Object result = instance;
+    if (result == UNINITIALIZED) {
       synchronized (this) {
         result = instance;
-        if (result == null) {
+        if (result == UNINITIALIZED) {
           instance = result = provider.get();
-          if (result == null) {
-            throw new NullPointerException(provider + " returned null");
-          }
         }
       }
     }
-    return result;
+    return (T) result;
   }
 
   public static <T> Lazy<T> create(Provider<T> provider) {
diff --git a/core/src/test/java/dagger/internal/DoubleCheckLazyTest.java b/core/src/test/java/dagger/internal/DoubleCheckLazyTest.java
index 01790c787..684c2aff2 100644
--- a/core/src/test/java/dagger/internal/DoubleCheckLazyTest.java
+++ b/core/src/test/java/dagger/internal/DoubleCheckLazyTest.java
@@ -28,6 +28,7 @@
 import java.util.concurrent.Future;
 import java.util.concurrent.atomic.AtomicInteger;
 import javax.inject.Provider;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -65,7 +66,8 @@
     assert_().that(results.size()).is(1);
   }
 
-  @Test public void get_null() {
+  // TODO(gak): reenable this test once we can ensure that factories are no longer providing null
+  @Ignore @Test public void get_null() {
     Lazy<Object> lazy = DoubleCheckLazy.create(new Provider<Object> () {
       @Override public Object get() {
         return null;
