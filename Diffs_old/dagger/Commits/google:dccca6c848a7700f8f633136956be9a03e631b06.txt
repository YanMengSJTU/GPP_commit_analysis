diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
index a82afd347..e01cc2043 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -29,6 +29,7 @@
 import com.google.common.collect.SetMultimap;
 import com.google.common.collect.Sets;
 import dagger.Component;
+import dagger.MembersInjector;
 import dagger.Module;
 import dagger.Provides;
 import java.util.Deque;
@@ -109,8 +110,15 @@
    */
   abstract ImmutableMap<Key, MembersInjectionBinding> resolvedMembersInjectionBindings();
 
+  /** The package in which each {@link FrameworkKey} initialization must happen.  */
   abstract ImmutableSetMultimap<String, FrameworkKey> initializationByPackage();
 
+  /**
+   * The ordering of {@link FrameworkKey keys} that will allow all of the {@link Factory} and
+   * {@link MembersInjector} implementations to initialize properly.
+   */
+  abstract ImmutableList<FrameworkKey> initializationOrdering();
+
   static final class Factory {
     private final Elements elements;
     private final Types types;
@@ -268,7 +276,8 @@ ComponentDescriptor create(TypeElement componentDefinitionType)
           transitiveModules,
           resolvedProvisionBindings.build(),
           resolvedMembersInjectionBindings.build(),
-          initializationByPackageBuilder.build());
+          initializationByPackageBuilder.build(),
+          ImmutableList.copyOf(resolvedBindings.keySet()));
     }
 
     private void resolveRequest(DependencyRequest request,
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 6ac863032..32b71f861 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -15,7 +15,6 @@
  */
 package dagger.internal.codegen;
 
-import com.google.common.base.Ascii;
 import com.google.common.base.CaseFormat;
 import com.google.common.base.Function;
 import com.google.common.base.Functions;
@@ -91,7 +90,6 @@
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PUBLIC;
 import static javax.lang.model.element.Modifier.STATIC;
-import static javax.lang.model.element.Modifier.VOLATILE;
 import static javax.lang.model.type.TypeKind.VOID;
 /**
  * Generates the implementation of the abstract types annotated with {@link Component}.
@@ -122,16 +120,6 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
     return Optional.of(input.componentDefinitionType());
   }
 
-  // TODO(gak): consider a single-check variant for cases where we know that it's safe
-  private static final String DOUBLE_CHECK_FORMAT = Joiner.on('\n').join(
-      "if (%1$s == null) {",
-      "  synchronized (%3$s) {",
-      "    if (%1$s == null) {",
-      "      this.%1$s = %2$s;",
-      "    }",
-      "  }",
-      "}");
-
   @Override
   ImmutableSet<JavaWriter> write(ClassName componentName, ComponentDescriptor input) {
     ClassName componentDefinitionTypeName =
@@ -143,11 +131,6 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
     componentWriter.addModifiers(PUBLIC, FINAL);
     componentWriter.addImplementedType(componentDefinitionTypeName);
 
-    // TODO(gak): there's not actually an reason that we need all initialization on the same lock
-    FieldWriter initLock = componentWriter.addField(Object.class, "initLock");
-    initLock.addModifiers(PRIVATE, FINAL);
-    initLock.setInitializer("new %s()", ClassName.fromClass(Object.class));
-
     ClassWriter builderWriter = componentWriter.addNestedClass("Builder");
     builderWriter.addModifiers(PUBLIC, STATIC, FINAL);
 
@@ -232,8 +215,6 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
 
     ImmutableMap.Builder<FrameworkKey, Snippet> memberSelectSnippetsBuilder =
         ImmutableMap.builder();
-    ImmutableMap.Builder<FrameworkKey, String> initializeMethodNamesBuilder =
-        ImmutableMap.builder();
 
     for (Entry<String, Set<FrameworkKey>> packageEntry :
         Multimaps.asMap(input.initializationByPackage()).entrySet()) {
@@ -288,7 +269,6 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
 
         FieldWriter frameworkField = classWithFields.addField(frameworkTypeName, fieldName);
         frameworkField.addModifiers(fieldModifiers);
-        frameworkField.addModifiers(VOLATILE);
 
         ImmutableList<String> memberSelectTokens = new ImmutableList.Builder<String>()
             .addAll(proxySelector.asSet())
@@ -296,12 +276,6 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
             .build();
         memberSelectSnippetsBuilder.put(frameworkKey,
             Snippet.memberSelectSnippet(memberSelectTokens));
-        String memberSelectTokensAsString = Joiner.on('_').join(memberSelectTokens);
-        initializeMethodNamesBuilder.put(frameworkKey, "initialize"
-            + new StringBuilder(memberSelectTokensAsString.length())
-                .append(Ascii.toUpperCase(memberSelectTokensAsString.charAt(0)))
-                .append(memberSelectTokensAsString.substring(1))
-                .toString());
       }
     }
 
@@ -315,67 +289,64 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
     }
 
     ImmutableMap<FrameworkKey, Snippet> memberSelectSnippets = memberSelectSnippetsBuilder.build();
-    ImmutableMap<FrameworkKey, String> initializeMethodNames = initializeMethodNamesBuilder.build();
-
-    for (FrameworkKey frameworkKey : input.initializationByPackage().values()) {
-      Key key = frameworkKey.key();
-      Snippet memberSelectSnippet = memberSelectSnippets.get(frameworkKey);
-      String initializeMethodName = initializeMethodNames.get(frameworkKey);
 
+    List<List<FrameworkKey>> partitions = Lists.partition(input.initializationOrdering(), 100);
+    for (int i = 0; i < partitions.size(); i++) {
       MethodWriter initializeMethod =
-          componentWriter.addMethod(VoidName.VOID, initializeMethodName);
+          componentWriter.addMethod(VoidName.VOID, "initialize" + ((i == 0) ? "" : i));
       initializeMethod.addModifiers(PRIVATE);
+      constructorWriter.body().addSnippet("%s();", initializeMethod.name());
+
+      for (FrameworkKey frameworkKey : partitions.get(i)) {
+        Key key = frameworkKey.key();
+        Snippet memberSelectSnippet = memberSelectSnippets.get(frameworkKey);
 
-      if (frameworkKey.frameworkClass().equals(Provider.class)) {
-        Set<ProvisionBinding> bindings = resolvedProvisionBindings.get(key);
-        initializeDependenciesForBinding(initializeMethodNames, initializeMethod, bindings);
-        BindingsType bindingsType = ProvisionBinding.getBindingsType(bindings);
-        switch (bindingsType) {
-          case SET_BINDING:
-            ImmutableList.Builder<Snippet> setFactoryParameters = ImmutableList.builder();
-            for (ProvisionBinding binding : bindings) {
-              setFactoryParameters.add(initializeFactoryForBinding(binding,
-                  input.dependencyMethodIndex(), componentContributionFields,
+        if (frameworkKey.frameworkClass().equals(Provider.class)) {
+          Set<ProvisionBinding> bindings = resolvedProvisionBindings.get(key);
+          BindingsType bindingsType = ProvisionBinding.getBindingsType(bindings);
+          switch (bindingsType) {
+            case SET_BINDING:
+              ImmutableList.Builder<Snippet> setFactoryParameters = ImmutableList.builder();
+              for (ProvisionBinding binding : bindings) {
+                setFactoryParameters.add(initializeFactoryForBinding(binding,
+                    input.dependencyMethodIndex(), componentContributionFields,
+                    memberSelectSnippets));
+              }
+              Snippet initializeSetSnippet = Snippet.format("%s.create(%s)",
+                  ClassName.fromClass(SetFactory.class),
+                  Snippet.makeParametersSnippet(setFactoryParameters.build()));
+              initializeMethod.body().addSnippet("this.%s = %s;",
+                  memberSelectSnippet, initializeSetSnippet);
+              break;
+            case MAP_BINDING:
+              if (!bindings.isEmpty()) {
+                Snippet initializeMapSnippet =
+                    initializeMapBinding(componentContributionFields, input.dependencyMethodIndex(),
+                        memberSelectSnippets, bindings);
+                initializeMethod.body().addSnippet("this.%s = %s;",
+                    memberSelectSnippet, initializeMapSnippet);
+              }
+              break;
+            case SINGULAR_BINDING:
+              ProvisionBinding binding = Iterables.getOnlyElement(bindings);
+              initializeMethod.body().addSnippet("this.%s = %s;",
+                  memberSelectSnippet,
+                  initializeFactoryForBinding(binding, input.dependencyMethodIndex(),
+                      componentContributionFields, memberSelectSnippets));
+              break;
+            default:
+              throw new IllegalStateException();
+          }
+        } else if (frameworkKey.frameworkClass().equals(MembersInjector.class)) {
+          MembersInjectionBinding binding = resolvedMembersInjectionBindings.get(key);
+          initializeMethod.body().addSnippet("this.%s = %s;",
+              memberSelectSnippet,
+              initializeMembersInjectorForBinding(binding,
                   memberSelectSnippets));
-            }
-            Snippet initializeSetSnippet = Snippet.format("%s.create(%s)",
-                ClassName.fromClass(SetFactory.class),
-                Snippet.makeParametersSnippet(setFactoryParameters.build()));
-            initializeMethod.body().addSnippet(DOUBLE_CHECK_FORMAT,
-                memberSelectSnippet, initializeSetSnippet, initLock.name());
-            break;
-          case MAP_BINDING:
-            if (!bindings.isEmpty()) {
-              Snippet initializeMapSnippet =
-                  initializeMapBinding(componentContributionFields, input.dependencyMethodIndex(),
-                      memberSelectSnippets, bindings);
-              initializeMethod.body().addSnippet(DOUBLE_CHECK_FORMAT,
-                  memberSelectSnippet, initializeMapSnippet, initLock.name());
-            }
-            break;
-          case SINGULAR_BINDING:
-            ProvisionBinding binding = Iterables.getOnlyElement(bindings);
-            initializeMethod.body().addSnippet(DOUBLE_CHECK_FORMAT,
-                memberSelectSnippet,
-                initializeFactoryForBinding(binding, input.dependencyMethodIndex(),
-                    componentContributionFields, memberSelectSnippets),
-                initLock.name());
-            break;
-          default:
-            throw new IllegalStateException();
+        } else {
+          throw new IllegalStateException(
+              "unknown framework class: " + frameworkKey.frameworkClass());
         }
-      } else if (frameworkKey.frameworkClass().equals(MembersInjector.class)) {
-        MembersInjectionBinding binding = resolvedMembersInjectionBindings.get(key);
-        initializeDependenciesForBinding(initializeMethodNames, initializeMethod,
-            ImmutableList.of(binding));
-        initializeMethod.body().addSnippet(DOUBLE_CHECK_FORMAT,
-            memberSelectSnippet,
-            initializeMembersInjectorForBinding(binding,
-                memberSelectSnippets),
-            initLock.name());
-      } else {
-        throw new IllegalStateException(
-            "unknown framework class: " + frameworkKey.frameworkClass());
       }
     }
 
@@ -383,12 +354,11 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
       ExecutableElement requestElement = (ExecutableElement) interfaceRequest.requestElement();
       MethodWriter interfaceMethod = requestElement.getReturnType().getKind().equals(VOID)
           ? componentWriter.addMethod(VoidName.VOID, requestElement.getSimpleName().toString())
-          : componentWriter.addMethod(requestElement.getReturnType(),
-              requestElement.getSimpleName().toString());
+              : componentWriter.addMethod(requestElement.getReturnType(),
+                  requestElement.getSimpleName().toString());
       interfaceMethod.annotate(Override.class);
       interfaceMethod.addModifiers(PUBLIC);
       FrameworkKey frameworkKey = interfaceRequest.frameworkKey();
-      interfaceMethod.body().addSnippet("%s();", initializeMethodNames.get(frameworkKey));
       if (interfaceRequest.kind().equals(MEMBERS_INJECTOR)) {
         Snippet membersInjectorName = memberSelectSnippets.get(frameworkKey);
         VariableElement parameter = Iterables.getOnlyElement(requestElement.getParameters());
@@ -396,7 +366,7 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
         interfaceMethod.addParameter(
             TypeNames.forTypeMirror(parameter.asType()), parameterName.toString());
         interfaceMethod.body()
-            .addSnippet("%s.injectMembers(%s);", membersInjectorName, parameterName);
+        .addSnippet("%s.injectMembers(%s);", membersInjectorName, parameterName);
         if (!requestElement.getReturnType().getKind().equals(VOID)) {
           interfaceMethod.body().addSnippet("return %s;", parameterName);
         }
@@ -413,28 +383,6 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
         .build();
   }
 
-  // TODO(gak): integrate this into the DCL structure to avoid some superfluous (albeit cheap) null
-  // checks
-  private void initializeDependenciesForBinding(
-      ImmutableMap<FrameworkKey, String> initializeMethodNames, MethodWriter methodWriter,
-      Iterable<? extends Binding> bindings) {
-    ImmutableSet<FrameworkKey> dependencyKeys = FluentIterable.from(bindings)
-        .transformAndConcat(new Function<Binding, Iterable<DependencyRequest>>() {
-          @Override public Iterable<DependencyRequest> apply(Binding input) {
-            return input.implicitDependencies();
-          }
-        })
-        .transform(new Function<DependencyRequest, FrameworkKey>() {
-          @Override public FrameworkKey apply(DependencyRequest input) {
-            return input.frameworkKey();
-          }
-        })
-        .toSet();
-    for (FrameworkKey dependencyKey: dependencyKeys) {
-      methodWriter.body().addSnippet("%s();", initializeMethodNames.get(dependencyKey));
-    }
-  }
-
   private Snippet initializeFactoryForBinding(ProvisionBinding binding,
       ImmutableMap<ExecutableElement, TypeElement> dependencyMethodIndex,
       Map<TypeElement, FieldWriter> contributionFields,
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/MethodWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/MethodWriter.java
index fcf444b1c..eaae2eea1 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/MethodWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/MethodWriter.java
@@ -27,6 +27,10 @@
     this.body = Optional.absent();
   }
 
+  public String name() {
+    return name;
+  }
+
   public VariableWriter addParameter(Class<?> type, String name) {
     return addParameter(ClassName.fromClass(type), name);
   }
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index 31b3c361a..91a4fe954 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -120,11 +120,11 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private final Object initLock = new Object();",
-        "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;",
+        "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -135,31 +135,22 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeSomeInjectableTypeProvider() {",
-        "    if (someInjectableTypeProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (someInjectableTypeProvider == null) {",
-        "          this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
         "  }",
         "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
-        "    initializeSomeInjectableTypeProvider();",
         "    return someInjectableTypeProvider.get();",
         "  }",
         "",
         "  @Override",
         "  public Lazy<SomeInjectableType> lazySomeInjectableType() {",
-        "    initializeSomeInjectableTypeProvider();",
         "    return DoubleCheckLazy.create(someInjectableTypeProvider);",
         "  }",
         "",
         "  @Override",
         "  public Provider<SomeInjectableType> someInjectableTypeProvider() {",
-        "    initializeSomeInjectableTypeProvider();",
         "    return someInjectableTypeProvider;",
         "  }",
         "",
@@ -216,11 +207,11 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private final Object initLock = new Object();",
-        "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;",
+        "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -231,32 +222,23 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeSomeInjectableTypeProvider() {",
-        "    if (someInjectableTypeProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (someInjectableTypeProvider == null) {",
-        "          this.someInjectableTypeProvider =",
-        "              ScopedProvider.create(new SomeInjectableType$$Factory());",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.someInjectableTypeProvider =",
+        "        ScopedProvider.create(new SomeInjectableType$$Factory());",
         "  }",
         "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
-        "    initializeSomeInjectableTypeProvider();",
         "    return someInjectableTypeProvider.get();",
         "  }",
         "",
         "  @Override",
         "  public Lazy<SomeInjectableType> lazySomeInjectableType() {",
-        "    initializeSomeInjectableTypeProvider();",
         "    return DoubleCheckLazy.create(someInjectableTypeProvider);",
         "  }",
         "",
         "  @Override",
         "  public Provider<SomeInjectableType> someInjectableTypeProvider() {",
-        "    initializeSomeInjectableTypeProvider();",
         "    return someInjectableTypeProvider;",
         "  }",
         "",
@@ -349,12 +331,12 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_OuterType$SimpleComponent implements SimpleComponent {",
-        "  private final Object initLock = new Object();",
-        "  private volatile Provider<A> aProvider;",
-        "  private volatile MembersInjector<B> bMembersInjector;",
+        "  private Provider<A> aProvider;",
+        "  private MembersInjector<B> bMembersInjector;",
         "",
         "  private Dagger_OuterType$SimpleComponent(Builder builder) {",
         "    assert builder != null;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -365,36 +347,18 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeAProvider() {",
-        "    if (aProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (aProvider == null) {",
-        "          this.aProvider = new OuterType$A$$Factory();",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeBMembersInjector() {",
-        "    initializeAProvider();",
-        "    if (bMembersInjector == null) {",
-        "      synchronized (initLock) {",
-        "        if (bMembersInjector == null) {",
-        "          this.bMembersInjector = new OuterType$B$$MembersInjector(aProvider);",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.aProvider = new OuterType$A$$Factory();",
+        "    this.bMembersInjector = new OuterType$B$$MembersInjector(aProvider);",
         "  }",
         "",
         "  @Override",
         "  public A a() {",
-        "    initializeAProvider();",
         "    return aProvider.get();",
         "  }",
         "",
         "  @Override",
         "  public void inject(B b) {",
-        "    initializeBMembersInjector();",
         "    bMembersInjector.injectMembers(b);",
         "  }",
         "",
@@ -466,15 +430,15 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Object initLock = new Object();",
         "  private final TestModule testModule;",
-        "  private volatile Provider<C> cProvider;",
-        "  private volatile Provider<B> bProvider;",
-        "  private volatile Provider<A> aProvider;",
+        "  private Provider<C> cProvider;",
+        "  private Provider<B> bProvider;",
+        "  private Provider<A> aProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.testModule = builder.testModule;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -485,41 +449,14 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeCProvider() {",
-        "    if (cProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (cProvider == null) {",
-        "          this.cProvider = new C$$Factory();",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeBProvider() {",
-        "    initializeCProvider();",
-        "    if (bProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (bProvider == null) {",
-        "          this.bProvider = new TestModule$$BFactory(testModule, cProvider);",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeAProvider() {",
-        "    initializeBProvider();",
-        "    if (aProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (aProvider == null) {",
-        "          this.aProvider = new A$$Factory(bProvider);",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.cProvider = new C$$Factory();",
+        "    this.bProvider = new TestModule$$BFactory(testModule, cProvider);",
+        "    this.aProvider = new A$$Factory(bProvider);",
         "  }",
         "",
         "  @Override",
         "  public A a() {",
-        "    initializeAProvider();",
         "    return aProvider.get();",
         "  }",
         "",
@@ -588,7 +525,6 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Object initLock = new Object();",
         "  private final TestModule testModule;",
         "  private final DepModule depModule;",
         "",
@@ -697,15 +633,15 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Object initLock = new Object();",
         "  private final EmptySetModule emptySetModule;",
         "  private final SetModule setModule;",
-        "  private volatile Provider<Set<String>> setOfStringProvider;",
+        "  private Provider<Set<String>> setOfStringProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.emptySetModule = builder.emptySetModule;",
         "    this.setModule = builder.setModule;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -716,21 +652,14 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeSetOfStringProvider() {",
-        "    if (setOfStringProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (setOfStringProvider == null) {",
-        "          this.setOfStringProvider = SetFactory.create(",
-        "              new EmptySetModule$$EmptySetFactory(emptySetModule),",
-        "              new SetModule$$StringFactory(setModule));",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.setOfStringProvider =",
+        "        SetFactory.create(new EmptySetModule$$EmptySetFactory(emptySetModule),",
+        "            new SetModule$$StringFactory(setModule));",
         "  }",
         "",
         "  @Override",
         "  public Set<String> strings() {",
-        "    initializeSetOfStringProvider();",
         "    return setOfStringProvider.get();",
         "  }",
         "",
@@ -816,12 +745,12 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private final Object initLock = new Object();",
-        "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;",
-        "  private volatile MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
+        "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
+        "  private MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -832,37 +761,19 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeSomeInjectableTypeProvider() {",
-        "    if (someInjectableTypeProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (someInjectableTypeProvider == null) {",
-        "          this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeSomeInjectedTypeMembersInjector() {",
-        "    initializeSomeInjectableTypeProvider();",
-        "    if (someInjectedTypeMembersInjector == null) {",
-        "      synchronized (initLock) {",
-        "        if (someInjectedTypeMembersInjector == null) {",
-        "          this.someInjectedTypeMembersInjector =",
-        "              new SomeInjectedType$$MembersInjector(someInjectableTypeProvider);",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
+        "    this.someInjectedTypeMembersInjector =",
+        "        new SomeInjectedType$$MembersInjector(someInjectableTypeProvider);",
         "  }",
         "",
         "  @Override",
         "  public void inject(SomeInjectedType instance) {",
-        "    initializeSomeInjectedTypeMembersInjector();",
         "    someInjectedTypeMembersInjector.injectMembers(instance);",
         "  }",
         "",
         "  @Override",
         "  public SomeInjectedType injectAndReturn(SomeInjectedType instance) {",
-        "    initializeSomeInjectedTypeMembersInjector();",
         "    someInjectedTypeMembersInjector.injectMembers(instance);",
         "    return instance;",
         "  }",
@@ -914,12 +825,12 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private final Object initLock = new Object();",
-        "  private volatile Provider<SimpleComponent> simpleComponentProvider;",
-        "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;",
+        "  private Provider<SimpleComponent> simpleComponentProvider;",
+        "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -930,31 +841,14 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeSimpleComponentProvider() {",
-        "    if (simpleComponentProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (simpleComponentProvider == null) {",
-        "          this.simpleComponentProvider = InstanceFactory.<SimpleComponent>create(this);",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeSomeInjectableTypeProvider() {",
-        "    initializeSimpleComponentProvider();",
-        "    if (someInjectableTypeProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (someInjectableTypeProvider == null) {",
-        "          this.someInjectableTypeProvider =",
-        "              new SomeInjectableType$$Factory(simpleComponentProvider);",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.simpleComponentProvider = InstanceFactory.<SimpleComponent>create(this);",
+        "    this.someInjectableTypeProvider =",
+        "        new SomeInjectableType$$Factory(simpleComponentProvider);",
         "  }",
         "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
-        "    initializeSomeInjectableTypeProvider();",
         "    return someInjectableTypeProvider.get();",
         "  }",
         "",
@@ -1010,13 +904,13 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private final Object initLock = new Object();",
-        "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;",
-        "  private volatile MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
-        "  private volatile Provider<SomeInjectedType> someInjectedTypeProvider;",
+        "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
+        "  private MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
+        "  private Provider<SomeInjectedType> someInjectedTypeProvider;",
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1027,43 +921,16 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeSomeInjectableTypeProvider() {",
-        "    if (someInjectableTypeProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (someInjectableTypeProvider == null) {",
-        "          this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeSomeInjectedTypeMembersInjector() {",
-        "    initializeSomeInjectableTypeProvider();",
-        "    if (someInjectedTypeMembersInjector == null) {",
-        "      synchronized (initLock) {",
-        "        if (someInjectedTypeMembersInjector == null) {",
-        "          this.someInjectedTypeMembersInjector =",
-        "              new SomeInjectedType$$MembersInjector(someInjectableTypeProvider);",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeSomeInjectedTypeProvider() {",
-        "    initializeSomeInjectedTypeMembersInjector();",
-        "    if (someInjectedTypeProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (someInjectedTypeProvider == null) {",
-        "          this.someInjectedTypeProvider =",
-        "              new SomeInjectedType$$Factory(someInjectedTypeMembersInjector);",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
+        "    this.someInjectedTypeMembersInjector =",
+        "        new SomeInjectedType$$MembersInjector(someInjectableTypeProvider);",
+        "    this.someInjectedTypeProvider =",
+        "        new SomeInjectedType$$Factory(someInjectedTypeMembersInjector);",
         "  }",
         "",
         "  @Override",
         "  public SomeInjectedType createAndInject() {",
-        "    initializeSomeInjectedTypeProvider();",
         "    return someInjectedTypeProvider.get();",
         "  }",
         "",
@@ -1134,48 +1001,31 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_BComponent implements BComponent {",
-        "  private final Object initLock = new Object();",
         "  private final AComponent aComponent;",
-        "  private volatile Provider<A> aProvider;",
-        "  private volatile Provider<B> bProvider;",
+        "  private Provider<A> aProvider;",
+        "  private Provider<B> bProvider;",
         "",
         "  private Dagger_BComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.aComponent = builder.aComponent;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
         "    return new Builder();",
         "  }",
         "",
-        "  private void initializeAProvider() {",
-        "    if (aProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (aProvider == null) {",
-        "          this.aProvider = new Factory<A>() {",
+        "  private void initialize() {",
+        "    this.aProvider = new Factory<A>() {",
         "      @Override public A get() {",
         "        return aComponent.a();",
         "      }",
         "    };",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeBProvider() {",
-        "    initializeAProvider();",
-        "    if (bProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (bProvider == null) {",
-        "          this.bProvider = new B$$Factory(aProvider);",
-        "        }",
-        "      }",
-        "    }",
+        "    this.bProvider = new B$$Factory(aProvider);",
         "  }",
         "",
         "  @Override",
         "  public B b() {",
-        "    initializeBProvider();",
         "    return bProvider.get();",
         "  }",
         "",
@@ -1263,16 +1113,16 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Object initLock = new Object();",
         "  private final test.TestModule testModule;",
         "  private final TestModule testModule1;",
-        "  private volatile Provider<test.A> aProvider;",
-        "  private volatile Provider<A> aProvider1;",
+        "  private Provider<test.A> aProvider;",
+        "  private Provider<A> aProvider1;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.testModule = builder.testModule;",
         "    this.testModule1 = builder.testModule1;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1283,35 +1133,18 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeAProvider() {",
-        "    if (aProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (aProvider == null) {",
-        "          this.aProvider = new test.TestModule$$AFactory(testModule);",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeAProvider1() {",
-        "    if (aProvider1 == null) {",
-        "      synchronized (initLock) {",
-        "        if (aProvider1 == null) {",
-        "          this.aProvider1 = new TestModule$$AFactory(testModule1);",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.aProvider = new test.TestModule$$AFactory(testModule);",
+        "    this.aProvider1 = new TestModule$$AFactory(testModule1);",
         "  }",
         "",
         "  @Override",
         "  public test.A a() {",
-        "    initializeAProvider();",
         "    return aProvider.get();",
         "  }",
         "",
         "  @Override",
         "  public A otherA() {",
-        "    initializeAProvider1();",
         "    return aProvider1.get();",
         "  }",
         "",
@@ -1412,14 +1245,14 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Object initLock = new Object();",
-        "  private volatile Provider<C> cProvider;",
-        "  private volatile Provider<B> bProvider;",
-        "  private volatile Provider<A> aProvider;",
-        "  private volatile Provider<X> xProvider;",
+        "  private Provider<C> cProvider;",
+        "  private Provider<B> bProvider;",
+        "  private Provider<A> aProvider;",
+        "  private Provider<X> xProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1430,64 +1263,25 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeCProvider() {",
-        "    if (cProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (cProvider == null) {",
-        "          this.cProvider = new C$$Factory();",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeBProvider() {",
-        "    initializeCProvider();",
-        "    if (bProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (bProvider == null) {",
-        "          this.bProvider = new B$$Factory(cProvider);",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeAProvider() {",
-        "    initializeBProvider();",
-        "    if (aProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (aProvider == null) {",
-        "          this.aProvider = new A$$Factory(bProvider);",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeXProvider() {",
-        "    initializeCProvider();",
-        "    if (xProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (xProvider == null) {",
-        "          this.xProvider = new X$$Factory(cProvider);",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.cProvider = new C$$Factory();",
+        "    this.bProvider = new B$$Factory(cProvider);",
+        "    this.aProvider = new A$$Factory(bProvider);",
+        "    this.xProvider = new X$$Factory(cProvider);",
         "  }",
         "",
         "  @Override",
         "  public A a() {",
-        "    initializeAProvider();",
         "    return aProvider.get();",
         "  }",
         "",
         "  @Override",
         "  public C c() {",
-        "    initializeCProvider();",
         "    return cProvider.get();",
         "  }",
         "",
         "  @Override",
         "  public X x() {",
-        "    initializeXProvider();",
         "    return xProvider.get();",
         "  }",
         "",
@@ -1560,11 +1354,11 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private final Object initLock = new Object();",
-        "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;",
+        "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1575,19 +1369,12 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeSomeInjectableTypeProvider() {",
-        "    if (someInjectableTypeProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (someInjectableTypeProvider == null) {",
-        "          this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
         "  }",
         "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
-        "    initializeSomeInjectableTypeProvider();",
         "    return someInjectableTypeProvider.get();",
         "  }",
         "",
@@ -1660,42 +1447,35 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private final Object initLock = new Object();",
-        "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;",
+        "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
-        "  private Dagger_SimpleComponent(Builder builder) {  ",
+        "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
+        "    initialize();",
         "  }",
         "",
-        "  public static Builder builder() {  ",
+        "  public static Builder builder() {",
         "    return new Builder();",
         "  }",
         "",
-        "  public static SimpleComponent create() {  ",
+        "  public static SimpleComponent create() {",
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeSomeInjectableTypeProvider() {  ",
-        "    if (someInjectableTypeProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (someInjectableTypeProvider == null) {",
-        "          this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
         "  }",
         "",
         "  @Override",
-        "  public SomeInjectableType someInjectableType() {  ",
-        "    initializeSomeInjectableTypeProvider();",
+        "  public SomeInjectableType someInjectableType() {",
         "    return someInjectableTypeProvider.get();",
         "  }",
         "",
         "  public static final class Builder {",
-        "    private Builder() {  ",
+        "    private Builder() {",
         "    }",
-        "  ",
-        "    public SimpleComponent build() {  ",
+        "",
+        "    public SimpleComponent build() {",
         "      return new Dagger_SimpleComponent(this);",
         "    }",
         "  }",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index a8ad868d0..ea13e5202 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -43,7 +43,7 @@ public void mapBindingsWithEnumKey() {
                 "@Module",
                 "final class MapModuleOne {",
                 "  @Provides(type = MAP) @PathKey(PathEnum.ADMIN) Handler provideAdminHandler() {",
-                "    return new AdminHandler(); ",
+                "    return new AdminHandler();",
                 "  }",
                 "}");
     JavaFileObject mapModuleTwoFile =
@@ -59,7 +59,7 @@ public void mapBindingsWithEnumKey() {
                 "@Module",
                 "final class MapModuleTwo {",
                 "  @Provides(type = MAP) @PathKey(PathEnum.LOGIN) Handler provideLoginHandler() {",
-                "    return new LoginHandler(); ",
+                "    return new LoginHandler();",
                 "  }",
                 "}");
     JavaFileObject enumKeyFile = JavaFileObjects.forSourceLines("test.PathKey",
@@ -118,16 +118,16 @@ public void mapBindingsWithEnumKey() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Object initLock = new Object();",
         "  private final MapModuleOne mapModuleOne;",
         "  private final MapModuleTwo mapModuleTwo;",
-        "  private volatile Provider<Map<PathEnum, Provider<Handler>>>",
+        "  private Provider<Map<PathEnum, Provider<Handler>>>",
         "      mapOfPathEnumAndProviderOfHandlerProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.mapModuleOne = builder.mapModuleOne;",
         "    this.mapModuleTwo = builder.mapModuleTwo;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -138,25 +138,18 @@ public void mapBindingsWithEnumKey() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeMapOfPathEnumAndProviderOfHandlerProvider() {",
-        "    if (mapOfPathEnumAndProviderOfHandlerProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (mapOfPathEnumAndProviderOfHandlerProvider == null) {",
-        "          this.mapOfPathEnumAndProviderOfHandlerProvider =",
-        "              MapProviderFactory.<PathEnum, Handler>builder(2)",
-        "                  .put(test.PathEnum.ADMIN, ",
-        "                      new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
-        "                  .put(test.PathEnum.LOGIN,",
-        "                      new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
-        "                  .build();",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.mapOfPathEnumAndProviderOfHandlerProvider =",
+        "        MapProviderFactory.<PathEnum, Handler>builder(2)",
+        "            .put(test.PathEnum.ADMIN,",
+        "                new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
+        "            .put(test.PathEnum.LOGIN,",
+        "                new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
+        "            .build();",
         "  }",
         "",
         "  @Override",
         "  public Map<PathEnum, Provider<Handler>> dispatcher() {",
-        "    initializeMapOfPathEnumAndProviderOfHandlerProvider();",
         "    return mapOfPathEnumAndProviderOfHandlerProvider.get();",
         "  }",
         "",
@@ -291,16 +284,15 @@ public void mapBindingsWithStringKey() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Object initLock = new Object();",
         "  private final MapModuleOne mapModuleOne;",
         "  private final MapModuleTwo mapModuleTwo;",
-        "  private volatile Provider<Map<String, Provider<Handler>>>",
-        "      mapOfStringAndProviderOfHandlerProvider;",
+        "  private Provider<Map<String, Provider<Handler>>> mapOfStringAndProviderOfHandlerProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.mapModuleOne = builder.mapModuleOne;",
         "    this.mapModuleTwo = builder.mapModuleTwo;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -311,25 +303,16 @@ public void mapBindingsWithStringKey() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeMapOfStringAndProviderOfHandlerProvider() {",
-        "    if (mapOfStringAndProviderOfHandlerProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (mapOfStringAndProviderOfHandlerProvider == null) {",
-        "          this.mapOfStringAndProviderOfHandlerProvider =",
-        "              MapProviderFactory.<String, Handler>builder(2)",
-        "                .put(\"Admin\",",
-        "                    new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
-        "                .put(\"Login\",",
-        "                    new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
-        "                .build();",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.mapOfStringAndProviderOfHandlerProvider =",
+        "        MapProviderFactory.<String, Handler>builder(2)",
+        "            .put(\"Admin\", new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
+        "            .put(\"Login\", new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
+        "            .build();",
         "  }",
         "",
         "  @Override",
         "  public Map<String, Provider<Handler>> dispatcher() {",
-        "    initializeMapOfStringAndProviderOfHandlerProvider();",
         "    return mapOfStringAndProviderOfHandlerProvider.get();",
         "  }",
         "",
@@ -394,7 +377,7 @@ public void mapBindingsWithNonProviderValue() {
         "@Module",
         "final class MapModuleOne {",
         "  @Provides(type = MAP) @PathKey(PathEnum.ADMIN) Handler provideAdminHandler() {",
-        "    return new AdminHandler(); ",
+        "    return new AdminHandler();",
         "  }",
         "}");
     JavaFileObject mapModuleTwoFile = JavaFileObjects.forSourceLines("test.MapModuleTwo",
@@ -408,7 +391,7 @@ public void mapBindingsWithNonProviderValue() {
         "@Module",
         "final class MapModuleTwo {",
         "  @Provides(type = MAP) @PathKey(PathEnum.LOGIN) Handler provideLoginHandler() {",
-        "    return new LoginHandler(); ",
+        "    return new LoginHandler();",
         "  }",
         "}");
     JavaFileObject enumKeyFile = JavaFileObjects.forSourceLines("test.PathKey",
@@ -467,70 +450,52 @@ public void mapBindingsWithNonProviderValue() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Object initLock = new Object();",
         "  private final MapModuleOne mapModuleOne;",
         "  private final MapModuleTwo mapModuleTwo;",
-        "  private volatile Provider<Map<PathEnum, Provider<Handler>>>",
+        "  private Provider<Map<PathEnum, Provider<Handler>>>",
         "      mapOfPathEnumAndProviderOfHandlerProvider;",
-        "  private volatile Provider<Map<PathEnum, Handler>>",
-        "      mapOfPathEnumAndHandlerProvider;",
+        "  private Provider<Map<PathEnum, Handler>> mapOfPathEnumAndHandlerProvider;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {  ",
+        "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.mapModuleOne = builder.mapModuleOne;",
         "    this.mapModuleTwo = builder.mapModuleTwo;",
+        "    initialize();",
         "  }",
         "",
-        "  public static Builder builder() {  ",
+        "  public static Builder builder() {",
         "    return new Builder();",
         "  }",
         "",
-        "  public static TestComponent create() {  ",
+        "  public static TestComponent create() {",
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeMapOfPathEnumAndProviderOfHandlerProvider() {  ",
-        "    if (mapOfPathEnumAndProviderOfHandlerProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (mapOfPathEnumAndProviderOfHandlerProvider == null) {",
-        "          this.mapOfPathEnumAndProviderOfHandlerProvider =",
-        "              MapProviderFactory.<PathEnum, Handler>builder(2)",
-        "                  .put(test.PathEnum.ADMIN,",
-        "                      new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
-        "                  .put(test.PathEnum.LOGIN,",
-        "                      new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
-        "                  .build();",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeMapOfPathEnumAndHandlerProvider() {  ",
-        "    initializeMapOfPathEnumAndProviderOfHandlerProvider();",
-        "    if (mapOfPathEnumAndHandlerProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (mapOfPathEnumAndHandlerProvider == null) {",
-        "          this.mapOfPathEnumAndHandlerProvider =",
-        "              MapFactory.create(mapOfPathEnumAndProviderOfHandlerProvider);",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.mapOfPathEnumAndProviderOfHandlerProvider =",
+        "        MapProviderFactory.<PathEnum, Handler>builder(2)",
+        "            .put(test.PathEnum.ADMIN,",
+        "                new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
+        "            .put(test.PathEnum.LOGIN,",
+        "                new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
+        "            .build();",
+        "    this.mapOfPathEnumAndHandlerProvider =",
+        "        MapFactory.create(mapOfPathEnumAndProviderOfHandlerProvider);",
         "  }",
         "",
         "  @Override",
-        "  public Map<PathEnum, Handler> dispatcher() {  ",
-        "    initializeMapOfPathEnumAndHandlerProvider();",
+        "  public Map<PathEnum, Handler> dispatcher() {",
         "    return mapOfPathEnumAndHandlerProvider.get();",
         "  }",
         "",
         "  public static final class Builder {",
         "    private MapModuleOne mapModuleOne;",
         "    private MapModuleTwo mapModuleTwo;",
-        "  ",
-        "    private Builder() {  ",
+        "",
+        "    private Builder() {",
         "    }",
-        "  ",
-        "    public TestComponent build() {  ",
+        "",
+        "    public TestComponent build() {",
         "      if (mapModuleOne == null) {",
         "        this.mapModuleOne = new MapModuleOne();",
         "      }",
@@ -539,16 +504,16 @@ public void mapBindingsWithNonProviderValue() {
         "      }",
         "      return new Dagger_TestComponent(this);",
         "    }",
-        "  ",
-        "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {  ",
+        "",
+        "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
         "      if (mapModuleOne == null) {",
         "        throw new NullPointerException(\"mapModuleOne\");",
         "      }",
         "      this.mapModuleOne = mapModuleOne;",
         "      return this;",
         "    }",
-        "  ",
-        "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {  ",
+        "",
+        "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
         "      if (mapModuleTwo == null) {",
         "        throw new NullPointerException(\"mapModuleTwo\");",
         "      }",
@@ -610,53 +575,46 @@ public void injectMapWithoutMapBinding() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Object initLock = new Object();",
         "  private final MapModule mapModule;",
-        "  private volatile Provider<Map<String, String>> provideAMapProvider;",
+        "  private Provider<Map<String, String>> provideAMapProvider;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {  ",
+        "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.mapModule = builder.mapModule;",
+        "    initialize();",
         "  }",
         "",
-        "  public static Builder builder() {  ",
+        "  public static Builder builder() {",
         "    return new Builder();",
         "  }",
         "",
-        "  public static TestComponent create() {  ",
+        "  public static TestComponent create() {",
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeProvideAMapProvider() {  ",
-        "    if (provideAMapProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (provideAMapProvider == null) {",
-        "          this.provideAMapProvider = new MapModule$$ProvideAMapFactory(mapModule);",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.provideAMapProvider = new MapModule$$ProvideAMapFactory(mapModule);",
         "  }",
         "",
         "  @Override",
-        "  public Map<String, String> dispatcher() {  ",
-        "    initializeProvideAMapProvider();",
+        "  public Map<String, String> dispatcher() {",
         "    return provideAMapProvider.get();",
         "  }",
         "",
         "  public static final class Builder {",
         "    private MapModule mapModule;",
-        "  ",
-        "    private Builder() {  ",
+        "",
+        "    private Builder() {",
         "    }",
-        "  ",
-        "    public TestComponent build() {  ",
+        "",
+        "    public TestComponent build() {",
         "      if (mapModule == null) {",
         "        this.mapModule = new MapModule();",
         "      }",
         "      return new Dagger_TestComponent(this);",
         "    }",
-        "  ",
-        "    public Builder mapModule(MapModule mapModule) {  ",
+        "",
+        "    public Builder mapModule(MapModule mapModule) {",
         "      if (mapModule == null) {",
         "        throw new NullPointerException(\"mapModule\");",
         "      }",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
index adb142b85..64749c9aa 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -57,7 +57,7 @@ public void mapKeyCreatorFile() {
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public class PathKeyCreator {",
         "  @com.google.auto.value.AutoAnnotation",
-        "  public static PathKey create(PathEnum value, String relativePath) { ",
+        "  public static PathKey create(PathEnum value, String relativePath) {",
         "    return new AutoAnnotation_PathKeyCreator_create(value, relativePath);",
         "  }",
         "}");
@@ -85,7 +85,7 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "final class MapModuleOne {",
         "  @Provides(type = MAP) @PathKey(relativePath = \"AdminPath\", value = PathEnum.ADMIN)",
         "      Handler provideAdminHandler() {",
-        "    return new AdminHandler(); ",
+        "    return new AdminHandler();",
         "  }",
         "}");
     JavaFileObject mapModuleTwoFile =JavaFileObjects.forSourceLines("test.MapModuleTwo",
@@ -100,7 +100,7 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "final class MapModuleTwo {",
         "  @Provides(type = MAP) @PathKey(value = PathEnum.LOGIN, relativePath = \"LoginPath\")",
         "      Handler provideLoginHandler() {",
-        "    return new LoginHandler(); ",
+        "    return new LoginHandler();",
         "  }",
         "}");
     JavaFileObject enumKeyFile = JavaFileObjects.forSourceLines("test.PathKey",
@@ -159,16 +159,16 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Object initLock = new Object();",
         "  private final MapModuleOne mapModuleOne;",
         "  private final MapModuleTwo mapModuleTwo;",
-        "  private volatile Provider<Map<PathKey, Provider<Handler>>>",
+        "  private Provider<Map<PathKey, Provider<Handler>>>",
         "      mapOfPathKeyAndProviderOfHandlerProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.mapModuleOne = builder.mapModuleOne;",
         "    this.mapModuleTwo = builder.mapModuleTwo;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -179,25 +179,18 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeMapOfPathKeyAndProviderOfHandlerProvider() {",
-        "    if (mapOfPathKeyAndProviderOfHandlerProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (mapOfPathKeyAndProviderOfHandlerProvider == null) {",
-        "          this.mapOfPathKeyAndProviderOfHandlerProvider =",
-        "              MapProviderFactory.<PathKey, Handler>builder(2)",
-        "                  .put(PathKeyCreator.create(PathEnum.ADMIN, \"AdminPath\"),",
-        "                      new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
-        "                  .put(PathKeyCreator.create(PathEnum.LOGIN, \"LoginPath\"),",
-        "                      new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
-        "                  .build();",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.mapOfPathKeyAndProviderOfHandlerProvider =",
+        "        MapProviderFactory.<PathKey, Handler>builder(2)",
+        "            .put(PathKeyCreator.create(PathEnum.ADMIN, \"AdminPath\"),",
+        "                new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
+        "            .put(PathKeyCreator.create(PathEnum.LOGIN, \"LoginPath\"),",
+        "                new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
+        "            .build();",
         "  }",
         "",
         "  @Override",
         "  public Map<PathKey, Provider<Handler>> dispatcher() {",
-        "    initializeMapOfPathKeyAndProviderOfHandlerProvider();",
         "    return mapOfPathKeyAndProviderOfHandlerProvider.get();",
         "  }",
         "",
@@ -264,7 +257,7 @@ public void mapKeyComponentFileWithDefaultField() {
         "@Module",
         "final class MapModuleOne {",
         "  @Provides(type = MAP) @PathKey(value = PathEnum.ADMIN) Handler provideAdminHandler() {",
-        "    return new AdminHandler(); ",
+        "    return new AdminHandler();",
         "  }",
         "}");
     JavaFileObject mapModuleTwoFile =JavaFileObjects.forSourceLines("test.MapModuleTwo",
@@ -279,7 +272,7 @@ public void mapKeyComponentFileWithDefaultField() {
         "final class MapModuleTwo {",
         "  @Provides(type = MAP) @PathKey(value = PathEnum.LOGIN, relativePath = \"LoginPath\")",
         "      Handler provideLoginHandler() {",
-        "    return new LoginHandler(); ",
+        "    return new LoginHandler();",
         "  }",
         "}");
     JavaFileObject enumKeyFile = JavaFileObjects.forSourceLines("test.PathKey",
@@ -338,16 +331,16 @@ public void mapKeyComponentFileWithDefaultField() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Object initLock = new Object();",
         "  private final MapModuleOne mapModuleOne;",
         "  private final MapModuleTwo mapModuleTwo;",
-        "  private volatile Provider<Map<PathKey, Provider<Handler>>>",
+        "  private Provider<Map<PathKey, Provider<Handler>>>",
         "      mapOfPathKeyAndProviderOfHandlerProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.mapModuleOne = builder.mapModuleOne;",
         "    this.mapModuleTwo = builder.mapModuleTwo;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -358,25 +351,18 @@ public void mapKeyComponentFileWithDefaultField() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeMapOfPathKeyAndProviderOfHandlerProvider() {",
-        "    if (mapOfPathKeyAndProviderOfHandlerProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (mapOfPathKeyAndProviderOfHandlerProvider == null) {",
-        "          this.mapOfPathKeyAndProviderOfHandlerProvider =",
-        "              MapProviderFactory.<PathKey, Handler>builder(2)",
-        "                  .put(PathKeyCreator.create(PathEnum.ADMIN, \"DefaultPath\"),",
-        "                      new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
-        "                  .put(PathKeyCreator.create(PathEnum.LOGIN, \"LoginPath\"),",
-        "                      new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
-        "                  .build();",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.mapOfPathKeyAndProviderOfHandlerProvider =",
+        "        MapProviderFactory.<PathKey, Handler>builder(2)",
+        "            .put(PathKeyCreator.create(PathEnum.ADMIN, \"DefaultPath\"),",
+        "                new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
+        "            .put(PathKeyCreator.create(PathEnum.LOGIN, \"LoginPath\"),",
+        "                new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
+        "            .build();",
         "  }",
         "",
         "  @Override",
         "  public Map<PathKey, Provider<Handler>> dispatcher() {",
-        "    initializeMapOfPathKeyAndProviderOfHandlerProvider();",
         "    return mapOfPathKeyAndProviderOfHandlerProvider.get();",
         "  }",
         "",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
index 246599cb2..e6c119e5b 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
@@ -48,13 +48,13 @@ public void parentClass_noInjectedMembers() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Object initLock = new Object();",
-        "  private volatile MembersInjector<Parent> parentMembersInjector;",
-        "  private volatile MembersInjector<Child> childMembersInjector;",
-        "  private volatile Provider<Child> childProvider;",
+        "  private MembersInjector<Parent> parentMembersInjector;",
+        "  private MembersInjector<Child> childMembersInjector;",
+        "  private Provider<Child> childProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -65,42 +65,14 @@ public void parentClass_noInjectedMembers() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeParentMembersInjector() {",
-        "    if (parentMembersInjector == null) {",
-        "      synchronized (initLock) {",
-        "        if (parentMembersInjector == null) {",
-        "          this.parentMembersInjector = MembersInjectors.noOp();",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeChildMembersInjector() {",
-        "    initializeParentMembersInjector();",
-        "    if (childMembersInjector == null) {",
-        "      synchronized (initLock) {",
-        "        if (childMembersInjector == null) {",
-        "          this.childMembersInjector =",
-        "            MembersInjectors.delegatingTo(parentMembersInjector);",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeChildProvider() {",
-        "    initializeChildMembersInjector();",
-        "    if (childProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (childProvider == null) {",
-        "          this.childProvider = new Child$$Factory(childMembersInjector);",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.parentMembersInjector = MembersInjectors.noOp();",
+        "    this.childMembersInjector = MembersInjectors.delegatingTo(parentMembersInjector);",
+        "    this.childProvider = new Child$$Factory(childMembersInjector);",
         "  }",
         "",
         "  @Override",
         "  public Child child() {",
-        "    initializeChildProvider();",
         "    return childProvider.get();",
         "  }",
         "",
@@ -167,14 +139,14 @@ public void parentClass_injectedMembersInSupertype() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Object initLock = new Object();",
-        "  private volatile Provider<Dep> depProvider;",
-        "  private volatile MembersInjector<Parent> parentMembersInjector;",
-        "  private volatile MembersInjector<Child> childMembersInjector;",
-        "  private volatile Provider<Child> childProvider;",
+        "  private Provider<Dep> depProvider;",
+        "  private MembersInjector<Parent> parentMembersInjector;",
+        "  private MembersInjector<Child> childMembersInjector;",
+        "  private Provider<Child> childProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -185,53 +157,15 @@ public void parentClass_injectedMembersInSupertype() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeDepProvider() {",
-        "    if (depProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (depProvider == null) {",
-        "          this.depProvider = new Dep$$Factory();",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeParentMembersInjector() {",
-        "    initializeDepProvider();",
-        "    if (parentMembersInjector == null) {",
-        "      synchronized (initLock) {",
-        "        if (parentMembersInjector == null) {",
-        "          this.parentMembersInjector = new Parent$$MembersInjector(depProvider);",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeChildMembersInjector() {",
-        "    initializeParentMembersInjector();",
-        "    if (childMembersInjector == null) {",
-        "      synchronized (initLock) {",
-        "        if (childMembersInjector == null) {",
-        "          this.childMembersInjector =",
-        "              MembersInjectors.delegatingTo(parentMembersInjector);",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializeChildProvider() {",
-        "    initializeChildMembersInjector();",
-        "    if (childProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (childProvider == null) {",
-        "          this.childProvider = new Child$$Factory(childMembersInjector);",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.depProvider = new Dep$$Factory();",
+        "    this.parentMembersInjector = new Parent$$MembersInjector(depProvider);",
+        "    this.childMembersInjector = MembersInjectors.delegatingTo(parentMembersInjector);",
+        "    this.childProvider = new Child$$Factory(childMembersInjector);",
         "  }",
         "",
         "  @Override",
         "  public Child child() {",
-        "    initializeChildProvider();",
         "    return childProvider.get();",
         "  }",
         "",
diff --git a/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java b/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
index 46eb38ef0..c404cce56 100644
--- a/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
@@ -55,13 +55,13 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Object initLock = new Object();",
         "  private final Dagger_TestComponent__PackageProxy foreign_Proxy =",
         "      new Dagger_TestComponent__PackageProxy();",
-        "  private volatile Provider<PublicClass> publicClassProvider;",
+        "  private Provider<PublicClass> publicClassProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
+        "    initialize();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -72,31 +72,14 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initializeForeign_Proxy_nonPublicClassProvider() {",
-        "    if (foreign_Proxy.nonPublicClassProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (foreign_Proxy.nonPublicClassProvider == null) {",
-        "          this.foreign_Proxy.nonPublicClassProvider = new NonPublicClass$$Factory();",
-        "        }",
-        "      }",
-        "    }",
-        "  }",
-        "",
-        "  private void initializePublicClassProvider() {",
-        "    initializeForeign_Proxy_nonPublicClassProvider();",
-        "    if (publicClassProvider == null) {",
-        "      synchronized (initLock) {",
-        "        if (publicClassProvider == null) {",
-        "          this.publicClassProvider =",
-        "              new PublicClass$$Factory(foreign_Proxy.nonPublicClassProvider);",
-        "        }",
-        "      }",
-        "    }",
+        "  private void initialize() {",
+        "    this.foreign_Proxy.nonPublicClassProvider = new NonPublicClass$$Factory();",
+        "    this.publicClassProvider =",
+        "        new PublicClass$$Factory(foreign_Proxy.nonPublicClassProvider);",
         "  }",
         "",
         "  @Override",
         "  public PublicClass publicClass() {",
-        "    initializePublicClassProvider();",
         "    return publicClassProvider.get();",
         "  }",
         "",
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
index e9e5ad32b..8ed583d10 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
@@ -76,14 +76,14 @@
       "",
       "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
       "public final class Dagger_PrimitiveComponent implements PrimitiveComponent {",
-      "  private final Object initLock = new Object();",
       "  private final PrimitiveModule primitiveModule;",
-      "  private volatile Provider<Integer> primitiveIntProvider;",
-      "  private volatile Provider<PrimitiveInjectable> primitiveInjectableProvider;",
+      "  private Provider<Integer> primitiveIntProvider;",
+      "  private Provider<PrimitiveInjectable> primitiveInjectableProvider;",
       "",
       "  private Dagger_PrimitiveComponent(Builder builder) {",
       "    assert builder != null;",
       "    this.primitiveModule = builder.primitiveModule;",
+      "    initialize();",
       "  }",
       "",
       "  public static Builder builder() {",
@@ -94,38 +94,19 @@
       "    return builder().build();",
       "  }",
       "",
-      "  private void initializePrimitiveIntProvider() {",
-      "    if (primitiveIntProvider == null) {",
-      "      synchronized (initLock) {",
-      "        if (primitiveIntProvider == null) {",
-      "          this.primitiveIntProvider =",
-      "              new PrimitiveModule$$PrimitiveIntFactory(primitiveModule);",
-      "        }",
-      "      }",
-      "    }",
-      "  }",
-      "",
-      "  private void initializePrimitiveInjectableProvider() {",
-      "    initializePrimitiveIntProvider();",
-      "    if (primitiveInjectableProvider == null) {",
-      "      synchronized (initLock) {",
-      "        if (primitiveInjectableProvider == null) {",
-      "          this.primitiveInjectableProvider =",
-      "              new PrimitiveInjectable$$Factory(primitiveIntProvider);",
-      "        }",
-      "      }",
-      "    }",
+      "  private void initialize() {",
+      "    this.primitiveIntProvider = new PrimitiveModule$$PrimitiveIntFactory(primitiveModule);",
+      "    this.primitiveInjectableProvider =",
+      "        new PrimitiveInjectable$$Factory(primitiveIntProvider);",
       "  }",
       "",
       "  @Override",
       "  public int primitiveInt() {",
-      "    initializePrimitiveIntProvider();",
       "    return primitiveIntProvider.get();",
       "  }",
       "",
       "  @Override",
       "  public PrimitiveInjectable primitiveInjectable() {",
-      "    initializePrimitiveInjectableProvider();",
       "    return primitiveInjectableProvider.get();",
       "  }",
       "",
