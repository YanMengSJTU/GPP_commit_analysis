diff --git a/java/dagger/internal/codegen/ComponentValidator.java b/java/dagger/internal/codegen/ComponentValidator.java
index 0ca5d9734..773991516 100644
--- a/java/dagger/internal/codegen/ComponentValidator.java
+++ b/java/dagger/internal/codegen/ComponentValidator.java
@@ -80,7 +80,9 @@
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.ExecutableType;
 import javax.lang.model.type.TypeMirror;
+import javax.lang.model.type.TypeVisitor;
 import javax.lang.model.util.SimpleTypeVisitor6;
+import javax.lang.model.util.SimpleTypeVisitor8;
 
 /**
  * Performs superficial validation of the contract of the {@link Component} and {@link
@@ -484,35 +486,27 @@ private void validateSubcomponentCreatorMethod(
 
   private static <T extends Element> void validateComponentDependencies(
       ValidationReport.Builder<T> report, Iterable<TypeMirror> types) {
-    validateTypesAreDeclared(report, types, "component dependency");
     for (TypeMirror type : types) {
-      if (moduleAnnotation(MoreTypes.asTypeElement(type)).isPresent()) {
-        report.addError(
-            String.format("%s is a module, which cannot be a component dependency", type));
-      }
+      type.accept(CHECK_DEPENDENCY_TYPES, report);
     }
   }
 
-  private static <T extends Element> void validateTypesAreDeclared(
-      final ValidationReport.Builder<T> report, Iterable<TypeMirror> types, final String typeName) {
-    for (TypeMirror type : types) {
-      type.accept(
-          new SimpleTypeVisitor6<Void, Void>() {
-            @Override
-            protected Void defaultAction(TypeMirror e, Void aVoid) {
-              report.addError(String.format("%s is not a valid %s type", e, typeName));
-              return null;
-            }
-
-            @Override
-            public Void visitDeclared(DeclaredType t, Void aVoid) {
-              // Declared types are valid
-              return null;
-            }
-          },
-          null);
-    }
-  }
+  private static final TypeVisitor<Void, ValidationReport.Builder<?>> CHECK_DEPENDENCY_TYPES =
+      new SimpleTypeVisitor8<Void, ValidationReport.Builder<?>>() {
+        @Override
+        protected Void defaultAction(TypeMirror type, ValidationReport.Builder<?> report) {
+          report.addError(type + " is not a valid component dependency type");
+          return null;
+        }
+
+        @Override
+        public Void visitDeclared(DeclaredType type, ValidationReport.Builder<?> report) {
+          if (moduleAnnotation(MoreTypes.asTypeElement(type)).isPresent()) {
+            report.addError(type + " is a module, which cannot be a component dependency");
+          }
+          return null;
+        }
+      };
 
   private static Optional<AnnotationMirror> checkForAnnotations(
       TypeMirror type, final Set<? extends Class<? extends Annotation>> annotations) {
diff --git a/javatests/dagger/internal/codegen/ComponentValidationTest.java b/javatests/dagger/internal/codegen/ComponentValidationTest.java
index 2208b4a18..169a318a7 100644
--- a/javatests/dagger/internal/codegen/ComponentValidationTest.java
+++ b/javatests/dagger/internal/codegen/ComponentValidationTest.java
@@ -23,7 +23,6 @@
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
 import javax.tools.JavaFileObject;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -139,9 +138,7 @@ public void attemptToInjectWildcardGenerics() {
     assertThat(compilation).hadErrorContaining("wildcard type").inFile(testComponent).onLine(10);
   }
 
-  // TODO(b/34107586): Fix and enable test.
   @Test
-  @Ignore
   public void invalidComponentDependencies() {
     JavaFileObject testComponent =
         JavaFileObjects.forSourceLines(
