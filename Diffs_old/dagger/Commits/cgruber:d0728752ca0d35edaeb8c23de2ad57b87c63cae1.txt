diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
index fea2628a7..ceb8065bb 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -1074,7 +1074,9 @@ private void reportCycle(
       TypeElement componentType = MoreElements.asType(rootRequestElement.getEnclosingElement());
       reportBuilder.addItem(
           String.format(
-              ErrorMessages.CONTAINS_DEPENDENCY_CYCLE_FORMAT,
+              kind == WARNING
+                  ? ErrorMessages.CONTAINS_DEPENDENCY_CYCLE_WARNING_FORMAT
+                  : ErrorMessages.CONTAINS_DEPENDENCY_CYCLE_ERROR_FORMAT,
               componentType.getQualifiedName(),
               rootRequestElement.getSimpleName(),
               Joiner.on("\n")
diff --git a/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java b/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
index 3737805e0..ff2a720c3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
@@ -242,7 +242,13 @@ static String provisionMayNotDependOnProducerType(TypeMirror type) {
   static final String MEMBERS_INJECTION_WITH_UNBOUNDED_TYPE =
       "Type parameters must be bounded for members injection. %s required by %s, via:\n%s";
 
-  static final String CONTAINS_DEPENDENCY_CYCLE_FORMAT = "%s.%s() contains a dependency cycle:\n%s";
+  static final String CONTAINS_DEPENDENCY_CYCLE_ERROR_FORMAT =
+      "%s.%s() contains a dependency cycle:\n%s";
+
+  static final String CONTAINS_DEPENDENCY_CYCLE_WARNING_FORMAT =
+      "%s.%s() contains a dependency cycle. "
+          + "You can suppress this warning by annotating the component method, the component, or "
+          + "any dependency request in the cycle with @SuppressWarnings(\"dependency-cycle\"):\n%s";
 
   static final String MALFORMED_MODULE_METHOD_FORMAT =
       "Cannot generated a graph because method %s on module %s was malformed";
diff --git a/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java b/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java
index 663e0085d..d4f697393 100644
--- a/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java
@@ -420,20 +420,28 @@ public void falsePositiveCyclicDependencyIndirectionDetected() {
             "  }",
             "}");
 
-    /* String expectedWarning =
-     "test.Outer.CComponent.get() contains a dependency cycle:"
-     + "      test.Outer.C.<init>(javax.inject.Provider<test.Outer.A> aParam)"
-     + "          [parameter: javax.inject.Provider<test.Outer.A> aParam]"
-     + "      test.Outer.A.<init>(test.Outer.B bParam)"
-     + "          [parameter: test.Outer.B bParam]"
-     + "      test.Outer.B.<init>(test.Outer.C bParam, test.Outer.D dParam)"
-     + "          [parameter: test.Outer.C bParam]";
-     */
-    assertAbout(javaSource()) // TODO(cgruber): Implement warning checks.
+    String expectedWarning =
+        Joiner.on('\n')
+            .join(
+                "test.Outer.CComponent.get() contains a dependency cycle. "
+                    + "You can suppress this warning by annotating the component method, the "
+                    + "component, or any dependency request in the cycle with "
+                    + "@SuppressWarnings(\"dependency-cycle\"):",
+                "      test.Outer.C.<init>(javax.inject.Provider<test.Outer.A> aParam)",
+                "          [parameter: javax.inject.Provider<test.Outer.A> aParam]",
+                "      test.Outer.A.<init>(test.Outer.B bParam)",
+                "          [parameter: test.Outer.B bParam]",
+                "      test.Outer.B.<init>(test.Outer.C bParam, test.Outer.D dParam)",
+                "          [parameter: test.Outer.C bParam]");
+    assertAbout(javaSource())
         .that(component)
+        .withCompilerOptions("-Xlint:-processing", "-Xlint:-rawtypes")
         .processedWith(new ComponentProcessor())
         .compilesWithoutError();
-        //.withWarningContaining(expectedWarning).in(component).onLine(X);
+    // TODO(dpb): Enable when testing warnings is released.
+    //  .withWarningContaining(expectedWarning)
+    //  .in(component)
+    //  .onLine(28);
   }
 
   @Ignore @Test public void cyclicDependencySimpleProviderIndirectionWarningSuppressed() {
@@ -474,9 +482,57 @@ public void falsePositiveCyclicDependencyIndirectionDetected() {
 
     assertAbout(javaSource())
         .that(component)
+        .withCompilerOptions("-Xlint:-processing", "-Xlint:-rawtypes")
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError();
+    // TODO(dpb): Enable when testing warnings is released.
+    //  .compilesWithoutWarnings();
+  }
+
+  @Ignore
+  @Test
+  public void cyclicDependencySimpleProviderIndirectionWarningSuppressed_atDependencyRequest() {
+    JavaFileObject component =
+        JavaFileObjects.forSourceLines(
+            "test.Outer",
+            "package test;",
+            "",
+            "import dagger.Component;",
+            "import dagger.Module;",
+            "import dagger.Provides;",
+            "import javax.inject.Inject;",
+            "import javax.inject.Provider;",
+            "",
+            "final class Outer {",
+            "  static class A {",
+            "    @Inject A(B bParam) {}",
+            "  }",
+            "",
+            "  static class B {",
+            "    @Inject B(C bParam, D dParam) {}",
+            "  }",
+            "",
+            "  static class C {",
+            "    @Inject C(@SuppressWarnings(\"dependency-cycle\") Provider<A> aParam) {}",
+            "  }",
+            "",
+            "  static class D {",
+            "    @Inject D() {}",
+            "  }",
+            "",
+            "  @Component()",
+            "  interface CComponent {",
+            "    C get();",
+            "  }",
+            "}");
+
+    assertAbout(javaSource())
+        .that(component)
+        .withCompilerOptions("-Xlint:-processing", "-Xlint:-rawtypes")
         .processedWith(new ComponentProcessor())
         .compilesWithoutError();
-        //.compilesWithoutWarning(); //TODO(cgruber)
+    // TODO(dpb): Enable when testing warnings is released.
+    //  .compilesWithoutWarnings();
   }
   
   @Test public void duplicateExplicitBindings_ProvidesAndComponentProvision() {
