diff --git a/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index 3f2bef415..2e55ad9f1 100644
--- a/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -28,6 +28,7 @@
 import static dagger.internal.codegen.SourceFiles.generateBindingFieldsForDependencies;
 import static dagger.internal.codegen.SourceFiles.generatedClassNameForBinding;
 import static dagger.internal.codegen.SourceFiles.parameterizedGeneratedTypeNameForBinding;
+import static dagger.internal.codegen.javapoet.AnnotationSpecs.Suppression.FUTURE_RETURN_VALUE_IGNORED;
 import static dagger.internal.codegen.javapoet.AnnotationSpecs.Suppression.UNCHECKED;
 import static dagger.internal.codegen.javapoet.CodeBlocks.makeParametersCodeBlock;
 import static dagger.internal.codegen.javapoet.CodeBlocks.toParametersCodeBlock;
@@ -48,8 +49,8 @@
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
-import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.FieldSpec;
@@ -58,6 +59,7 @@
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
 import dagger.internal.codegen.javapoet.AnnotationSpecs;
+import dagger.internal.codegen.javapoet.AnnotationSpecs.Suppression;
 import dagger.internal.codegen.javapoet.TypeNames;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.model.DependencyRequest;
@@ -115,12 +117,6 @@ Element originatingElement(ProductionBinding binding) {
 
     TypeSpec.Builder factoryBuilder =
         classBuilder(generatedTypeName)
-            .addAnnotation(
-                // TODO(beder): examine if we can remove this or prevent subtypes of Future from
-                // being produced
-                AnnotationSpec.builder(SuppressWarnings.class)
-                    .addMember("value", "$S", "FutureReturnValueIgnored")
-                    .build())
             .addModifiers(PUBLIC, FINAL)
             .addTypeVariables(bindingTypeElementTypeVariableNames(binding));
 
@@ -550,4 +546,10 @@ private CodeBlock getInvocationCodeBlock(
       Iterable<? extends TypeMirror> thrownTypes) {
     return FluentIterable.from(thrownTypes).transform(TypeName::get);
   }
+
+  @Override
+  protected ImmutableSet<Suppression> warningSuppressions() {
+    // TODO(beder): examine if we can remove this or prevent subtypes of Future from being produced
+    return ImmutableSet.of(FUTURE_RETURN_VALUE_IGNORED);
+  }
 }
diff --git a/java/dagger/internal/codegen/SourceFileGenerator.java b/java/dagger/internal/codegen/SourceFileGenerator.java
index 7dddc2fcd..ad7c4dcfc 100644
--- a/java/dagger/internal/codegen/SourceFileGenerator.java
+++ b/java/dagger/internal/codegen/SourceFileGenerator.java
@@ -18,12 +18,17 @@
 
 import static com.google.auto.common.GeneratedAnnotations.generatedAnnotation;
 import static com.google.common.base.Preconditions.checkNotNull;
+import static dagger.internal.codegen.javapoet.AnnotationSpecs.Suppression.RAWTYPES;
+import static dagger.internal.codegen.javapoet.AnnotationSpecs.Suppression.UNCHECKED;
 
 import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableSet;
 import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.JavaFile;
 import com.squareup.javapoet.TypeSpec;
+import dagger.internal.codegen.javapoet.AnnotationSpecs;
+import dagger.internal.codegen.javapoet.AnnotationSpecs.Suppression;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import java.util.Optional;
 import javax.annotation.processing.Filer;
@@ -33,8 +38,8 @@
 
 /**
  * A template class that provides a framework for properly handling IO while generating source files
- * from an annotation processor.  Particularly, it makes a best effort to ensure that files that
- * fail to write successfully are deleted.
+ * from an annotation processor. Particularly, it makes a best effort to ensure that files that fail
+ * to write successfully are deleted.
  *
  * @param <T> The input type from which source is to be generated.
  */
@@ -80,8 +85,7 @@ void generate(T input) throws SourceFileGenerationException {
       // if the code above threw a SFGE, use that
       Throwables.propagateIfPossible(e, SourceFileGenerationException.class);
       // otherwise, throw a new one
-      throw new SourceFileGenerationException(
-          Optional.empty(), e, originatingElement(input));
+      throw new SourceFileGenerationException(Optional.empty(), e, originatingElement(input));
     }
   }
 
@@ -97,6 +101,15 @@ private JavaFile buildJavaFile(
                         .addMember("comments", "$S", GENERATED_COMMENTS)
                         .build());
     generatedAnnotation.ifPresent(typeSpecBuilder::addAnnotation);
+
+    // TODO(b/134590785): remove this and only suppress annotations locally, if necessary
+    typeSpecBuilder.addAnnotation(
+        AnnotationSpecs.suppressWarnings(
+            ImmutableSet.<Suppression>builder()
+                .addAll(warningSuppressions())
+                .add(UNCHECKED, RAWTYPES)
+                .build()));
+
     JavaFile.Builder javaFileBuilder =
         JavaFile.builder(generatedTypeName.packageName(), typeSpecBuilder.build())
             .skipJavaLangImports(true);
@@ -106,9 +119,7 @@ private JavaFile buildJavaFile(
     return javaFileBuilder.build();
   }
 
-  /**
-   * Implementations should return the {@link ClassName} for the top-level type to be generated.
-   */
+  /** Implementations should return the {@link ClassName} for the top-level type to be generated. */
   abstract ClassName nameGeneratedType(T input);
 
   /** Returns the originating element of the generating type. */
@@ -121,4 +132,10 @@ private JavaFile buildJavaFile(
   // TODO(ronshapiro): write() makes more sense in JavaWriter where all writers are mutable.
   // consider renaming to something like typeBuilder() which conveys the mutability of the result
   abstract Optional<TypeSpec.Builder> write(ClassName generatedTypeName, T input);
+
+  /** Returns {@link Suppression}s that are applied to files generated by this generator. */
+  // TODO(b/134590785): When suppressions are removed locally, remove this and inline the usages
+  protected ImmutableSet<Suppression> warningSuppressions() {
+    return ImmutableSet.of();
+  }
 }
diff --git a/java/dagger/internal/codegen/javapoet/AnnotationSpecs.java b/java/dagger/internal/codegen/javapoet/AnnotationSpecs.java
index cc0d7de0f..b66d266c2 100644
--- a/java/dagger/internal/codegen/javapoet/AnnotationSpecs.java
+++ b/java/dagger/internal/codegen/javapoet/AnnotationSpecs.java
@@ -16,34 +16,38 @@
 
 package dagger.internal.codegen.javapoet;
 
-import static com.google.common.base.Preconditions.checkNotNull;
+import static com.google.common.base.Preconditions.checkArgument;
 
-import com.google.common.base.Ascii;
-import com.google.common.base.Preconditions;
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import com.squareup.javapoet.AnnotationSpec;
-import java.util.Arrays;
 
 /** Static factories to create {@link AnnotationSpec}s. */
 public final class AnnotationSpecs {
   /** Values for an {@link SuppressWarnings} annotation. */
   public enum Suppression {
-    RAWTYPES,
-    UNCHECKED,
+    RAWTYPES("rawtypes"),
+    UNCHECKED("unchecked"),
+    FUTURE_RETURN_VALUE_IGNORED("FutureReturnValueIgnored"),
     ;
 
-    @Override
-    public String toString() {
-      return Ascii.toLowerCase(name());
+    private final String value;
+
+    Suppression(String value) {
+      this.value = value;
     }
   }
 
   /** Creates an {@link AnnotationSpec} for {@link SuppressWarnings}. */
   public static AnnotationSpec suppressWarnings(Suppression first, Suppression... rest) {
-    checkNotNull(first);
-    Arrays.stream(rest).forEach(Preconditions::checkNotNull);
+    return suppressWarnings(ImmutableSet.copyOf(Lists.asList(first, rest)));
+  }
+
+  /** Creates an {@link AnnotationSpec} for {@link SuppressWarnings}. */
+  public static AnnotationSpec suppressWarnings(ImmutableSet<Suppression> suppressions) {
+    checkArgument(!suppressions.isEmpty());
     AnnotationSpec.Builder builder = AnnotationSpec.builder(SuppressWarnings.class);
-    Lists.asList(first, rest).forEach(suppression -> builder.addMember("value", "$S", suppression));
+    suppressions.forEach(suppression -> builder.addMember("value", "$S", suppression.value));
     return builder.build();
   }
 
diff --git a/javatests/dagger/functional/MultibindingTest.java b/javatests/dagger/functional/MultibindingTest.java
index d99e46d12..3da3901ce 100644
--- a/javatests/dagger/functional/MultibindingTest.java
+++ b/javatests/dagger/functional/MultibindingTest.java
@@ -80,7 +80,7 @@ public void unwrappedAnnotationKeyMap() {
 
   @Test
   public void wrappedAnnotationKeyMap() {
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({"unchecked", "rawtypes"})
     Class<? extends Number>[] classes = new Class[] {Long.class, Integer.class};
     assertThat(multibindingComponent.wrappedAnnotationKeyMap())
         .containsExactly(
diff --git a/javatests/dagger/functional/membersinject/MembersInjectModule.java b/javatests/dagger/functional/membersinject/MembersInjectModule.java
index d60a7d1e8..6e182dd7f 100644
--- a/javatests/dagger/functional/membersinject/MembersInjectModule.java
+++ b/javatests/dagger/functional/membersinject/MembersInjectModule.java
@@ -26,7 +26,7 @@
   
   @Provides int[] provideIntArray() { return new int[10]; }
   
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings({"unchecked", "rawtypes"})
   @Provides MembersInjectGenericParent<String[]>[] provideFooArrayOfStringArray() { return new MembersInjectGenericParent[10]; }
 
 }
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java
index bb967b177..4625d8649 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java
@@ -22,7 +22,7 @@
 import static dagger.internal.codegen.Compilers.CLASS_PATH_WITHOUT_GUAVA_OPTION;
 import static dagger.internal.codegen.Compilers.compilerWithOptions;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 import static dagger.internal.codegen.GeneratedLines.GENERATION_OPTIONS_ANNOTATION;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 
@@ -79,7 +79,7 @@ public void setMultibindings_contributionsInLeaf() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -122,7 +122,7 @@ public void setMultibindings_contributionsInAncestorOnly() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -176,7 +176,7 @@ public void setMultibindings_contributionsInAncestorOnly() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -246,7 +246,7 @@ public void setMultibindings_contributionsInLeafAndAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -304,7 +304,7 @@ public void setMultibindings_contributionsInLeafAndAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -376,7 +376,7 @@ public void setMultibindings_contributionsInLeafAndGrandAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -414,7 +414,7 @@ public void setMultibindings_contributionsInLeafAndGrandAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -470,7 +470,7 @@ public void setMultibindings_contributionsInLeafAndGrandAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerGrandAncestor implements GrandAncestor {",
             "  protected DaggerGrandAncestor() {}",
             "",
@@ -545,7 +545,7 @@ public void setMultibindings_nonComponentMethodDependency() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -605,7 +605,7 @@ public void setMultibindings_nonComponentMethodDependency() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -653,7 +653,7 @@ public void setMultibindings_newSubclass() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -712,7 +712,7 @@ public void setMultibindings_newSubclass() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -789,7 +789,7 @@ public void setMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -852,7 +852,7 @@ public void setMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -918,7 +918,7 @@ public void missingMultibindingInLeaf_onlyContributionsInAncestor_notReModifiedI
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -970,7 +970,7 @@ public void missingMultibindingInLeaf_onlyContributionsInAncestor_notReModifiedI
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -1008,7 +1008,7 @@ public void missingMultibindingInLeaf_onlyContributionsInAncestor_notReModifiedI
             "",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
@@ -1107,7 +1107,7 @@ public void setMultibindings_contributionsInLeafAndAncestor_frameworkInstances()
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  private Provider<Set<InEachSubcomponent>> setOfInEachSubcomponentProvider;",
             "",
@@ -1180,7 +1180,7 @@ public void setMultibindings_contributionsInLeafAndAncestor_frameworkInstances()
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -1266,7 +1266,7 @@ public void mapMultibindings_contributionsInLeaf() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -1310,7 +1310,7 @@ public void mapMultibindings_contributionsInAncestorOnly() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -1364,7 +1364,7 @@ public void mapMultibindings_contributionsInAncestorOnly() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -1431,7 +1431,7 @@ public void mapMultibindings_contributionsInLeafAndAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -1488,7 +1488,7 @@ public void mapMultibindings_contributionsInLeafAndAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -1560,7 +1560,7 @@ public void mapMultibindings_contributionsInLeafAndAncestor_frameworkInstance()
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  private Provider<Map<String, InEachSubcomponent>> ",
             "    mapOfStringAndInEachSubcomponentProvider;",
@@ -1634,7 +1634,7 @@ public void mapMultibindings_contributionsInLeafAndAncestor_frameworkInstance()
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -1722,7 +1722,7 @@ public void mapMultibindings_contributionsInLeafAndGrandAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -1758,7 +1758,7 @@ public void mapMultibindings_contributionsInLeafAndGrandAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -1813,7 +1813,7 @@ public void mapMultibindings_contributionsInLeafAndGrandAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerGrandAncestor implements GrandAncestor {",
             "  protected DaggerGrandAncestor() {}",
             "",
@@ -1890,7 +1890,7 @@ public void mapMultibindings_contributionsInLeafAndAncestorWithoutGuava() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -1947,7 +1947,7 @@ public void mapMultibindings_contributionsInLeafAndAncestorWithoutGuava() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -2020,7 +2020,7 @@ public void mapMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -2083,7 +2083,7 @@ public void mapMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -2163,7 +2163,7 @@ public void emptyMultibinds_set() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -2216,7 +2216,7 @@ public void emptyMultibinds_set() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -2279,7 +2279,7 @@ public void emptyMultibinds_set_frameworkInstance() {
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -2334,7 +2334,7 @@ public void emptyMultibinds_set_frameworkInstance() {
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -2410,7 +2410,7 @@ public void emptyMultibinds_map() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -2465,7 +2465,7 @@ public void emptyMultibinds_map() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -2528,7 +2528,7 @@ public void emptyMultibinds_map_frameworkInstance() {
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -2585,7 +2585,7 @@ public void emptyMultibinds_map_frameworkInstance() {
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -2662,7 +2662,7 @@ public void bindsMissingDep_Multibindings() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -2761,7 +2761,7 @@ public void multibindingsAndFastInit() {
             "package test;",
             "",
             "@GenerationOptions(fastInit = true)",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 1bd221a61..7d3cc6343 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -19,7 +19,7 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.CompilerMode.AHEAD_OF_TIME_SUBCOMPONENTS_MODE;
 import static dagger.internal.codegen.Compilers.compilerWithOptions;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 import static dagger.internal.codegen.GeneratedLines.GENERATION_OPTIONS_ANNOTATION;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 
@@ -64,7 +64,7 @@ public void missingBindings_fromComponentMethod() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -109,7 +109,7 @@ public void missingBindings_fromComponentMethod() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -163,7 +163,7 @@ public void missingBindings_dependsOnBindingWithMatchingComponentMethod() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -215,7 +215,7 @@ public void missingBindings_dependsOnMissingBinding() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -264,7 +264,7 @@ public void missingBindings_dependsOnMissingBinding() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -351,7 +351,7 @@ public void missingBindings_satisfiedInGreatAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerGreatAncestor implements GreatAncestor {",
             "  protected DaggerGreatAncestor() {}",
             "",
@@ -409,7 +409,7 @@ public void moduleInstanceDependency() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -446,7 +446,7 @@ public void moduleInstanceDependency() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -478,7 +478,7 @@ public void moduleInstanceDependency() {
             "",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
@@ -572,7 +572,7 @@ public void moduleInstanceDependency_withModuleParams() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -609,7 +609,7 @@ public void moduleInstanceDependency_withModuleParams() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -642,7 +642,7 @@ public void moduleInstanceDependency_withModuleParams() {
             "import dagger.internal.Preconditions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
@@ -723,7 +723,7 @@ public void generatedInstanceBinding() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "}");
@@ -753,7 +753,7 @@ public void generatedInstanceBinding() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -788,7 +788,7 @@ public void generatedInstanceBinding() {
             "",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
@@ -893,7 +893,7 @@ public void prunedGeneratedInstanceBinding() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerMaybeLeaf implements MaybeLeaf {",
             "  protected DaggerMaybeLeaf() {}",
             "",
@@ -947,7 +947,7 @@ public void prunedGeneratedInstanceBinding() {
             "",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
@@ -1044,7 +1044,7 @@ public void optionalBindings_boundAndSatisfiedInSameSubcomponent() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerSub implements Sub {",
             "  protected DaggerSub() {}",
             "",
@@ -1099,7 +1099,7 @@ public void optionalBindings_satisfiedInAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -1153,7 +1153,7 @@ public void optionalBindings_satisfiedInAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -1217,7 +1217,7 @@ public void optionalBindings_satisfiedInGrandAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -1256,7 +1256,7 @@ public void optionalBindings_satisfiedInGrandAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -1309,7 +1309,7 @@ public void optionalBindings_satisfiedInGrandAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerGreatAncestor implements GreatAncestor {",
             "  protected DaggerGreatAncestor() {}",
             "",
@@ -1385,7 +1385,7 @@ public void optionalBindings_nonComponentMethodDependencySatisfiedInAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -1446,7 +1446,7 @@ public void optionalBindings_nonComponentMethodDependencySatisfiedInAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -1497,7 +1497,7 @@ public void optionalBindings_boundInAncestorAndSatisfiedInGrandAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -1544,7 +1544,7 @@ public void optionalBindings_boundInAncestorAndSatisfiedInGrandAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -1602,7 +1602,7 @@ public void optionalBindings_boundInAncestorAndSatisfiedInGrandAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerGrandAncestor implements GrandAncestor {",
             "  protected DaggerGrandAncestor() {}",
             "",
@@ -1666,7 +1666,7 @@ public void provisionOverInjection_providedInAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -1717,7 +1717,7 @@ public void provisionOverInjection_providedInAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -1771,7 +1771,7 @@ public void provisionOverInjection_providedInGrandAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -1808,7 +1808,7 @@ public void provisionOverInjection_providedInGrandAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -1856,7 +1856,7 @@ public void provisionOverInjection_providedInGrandAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerGrandAncestor implements GrandAncestor {",
             "  protected DaggerGrandAncestor() {}",
             "",
@@ -1924,7 +1924,7 @@ public void provisionOverInjection_indirectDependency() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -1979,7 +1979,7 @@ public void provisionOverInjection_indirectDependency() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -2037,7 +2037,7 @@ public void provisionOverInjection_prunedIndirectDependency() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -2087,7 +2087,7 @@ public void provisionOverInjection_prunedIndirectDependency() {
             "import dagger.internal.Preconditions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
@@ -2189,7 +2189,7 @@ public void provisionOverInjection_prunedDirectDependency_prunedInConcreteImplem
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -2241,7 +2241,7 @@ public void provisionOverInjection_prunedDirectDependency_prunedInConcreteImplem
             "import dagger.internal.Preconditions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
@@ -2338,7 +2338,7 @@ public void provisionOverInjection_prunedDirectDependency_prunedInAbstractImplem
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -2391,7 +2391,7 @@ public void provisionOverInjection_prunedDirectDependency_prunedInAbstractImplem
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -2429,7 +2429,7 @@ public void provisionOverInjection_prunedDirectDependency_prunedInAbstractImplem
             "",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
@@ -2533,7 +2533,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf, CancellationListener {",
             "  private Producer<Set<Response>> responsesEntryPoint;",
             "  private Producer<Response> responseProducer;",
@@ -2680,7 +2680,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root, CancellationListener {",
             "  private Provider<Executor> productionImplementationExecutorProvider;",
             "  private Provider<Root> rootProvider;",
@@ -2821,7 +2821,7 @@ public void lazyOfModifiableBinding() {
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -2876,7 +2876,7 @@ public void lazyOfModifiableBinding() {
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -2950,7 +2950,7 @@ public void missingBindingAccessInLeafAndAncestor() {
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  private Provider<DependsOnMissing> testProvider;",
             "",
@@ -3041,7 +3041,7 @@ public void missingBindingAccessInLeafAndAncestor() {
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -3181,7 +3181,7 @@ public void subcomponentBuilders() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  private Integer bindsInstance;",
             "  private LeafModule leafModule;",
@@ -3284,7 +3284,7 @@ public void subcomponentBuilders() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -3340,7 +3340,7 @@ public void subcomponentBuilders() {
             "import dagger.internal.Preconditions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
@@ -3472,7 +3472,7 @@ public void subcomponentBuilders_moduleWithUnusedInstanceBindings() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  private ModuleWithUsedBinding moduleWithUsedBinding;",
             "",
@@ -3534,7 +3534,7 @@ public void subcomponentBuilders_moduleWithUnusedInstanceBindings() {
             "",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
@@ -3635,7 +3635,7 @@ public void subcomponentBuilders_repeatedModule() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  private RepeatedModule repeatedModule;",
             "",
@@ -3689,7 +3689,7 @@ public void subcomponentBuilders_repeatedModule() {
             "import dagger.internal.Preconditions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  private final RepeatedModule repeatedModule;",
             "",
@@ -3796,7 +3796,7 @@ public void bindsWithMissingDependency() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -3841,7 +3841,7 @@ public void bindsWithMissingDependency() {
             "",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
@@ -3926,7 +3926,7 @@ public void bindsWithMissingDependency_pruned() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -3975,7 +3975,7 @@ public void bindsWithMissingDependency_pruned() {
             "",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
@@ -4074,7 +4074,7 @@ public void modifiedProducerFromProvider() {
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf, CancellationListener {",
             "  private Producer<DependsOnModifiedProducerFromProvider>",
             "      dependsOnModifiedProducerFromProviderEntryPoint;",
@@ -4177,7 +4177,7 @@ public void modifiedProducerFromProvider() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
@@ -4339,7 +4339,7 @@ public void modifiableBindingMethods_namesDedupedAcrossImplementations() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -4401,7 +4401,7 @@ public void modifiableBindingMethods_namesDedupedAcrossImplementations() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -4495,7 +4495,7 @@ public void subcomponentInducedFromAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerMaybeLeaf implements MaybeLeaf {",
             "  protected DaggerMaybeLeaf() {}",
             "",
@@ -4549,7 +4549,7 @@ public void subcomponentInducedFromAncestor() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
@@ -4631,7 +4631,7 @@ public void rootScopedAtInjectConstructor_effectivelyMissingInSubcomponent() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -4664,7 +4664,7 @@ public void rootScopedAtInjectConstructor_effectivelyMissingInSubcomponent() {
             "",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  protected final class LeafImpl extends DaggerLeaf {",
             "    @Override",
@@ -4728,7 +4728,7 @@ public void prunedModuleWithInstanceState() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
@@ -4778,7 +4778,7 @@ public void prunedModuleWithInstanceState() {
             "",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  protected final class LeafImpl extends DaggerLeaf {",
             "    @Override",
@@ -4846,7 +4846,7 @@ public void modifiableCycles() {
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  private Provider<A> aProvider;",
             "  private Provider<B> bProvider;",
@@ -4964,7 +4964,7 @@ public void componentBuilderFields_consistencyAcrossImplementations() {
             "import a.Mod;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerHasUnusedModuleLeaf implements HasUnusedModuleLeaf {",
             "  public abstract static class Builder implements HasUnusedModuleLeaf.Builder {",
             "    protected Mod mod;",
@@ -4997,7 +4997,7 @@ public void componentBuilderFields_consistencyAcrossImplementations() {
             "",
             "import a.Mod;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  private final class HasUnusedModuleLeafBuilder",
             "      extends DaggerHasUnusedModuleLeaf.Builder {",
@@ -5068,7 +5068,7 @@ public void dependencyExpressionCasting() {
             "package test;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  @Override",
             "  public Parameterized<ModifiableNonPublicSubclass> ",
@@ -5110,7 +5110,7 @@ public void multipleComponentMethodsForSameBindingRequest() {
             "package test;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  @Override",
             "  public final String string2() {",
@@ -5154,7 +5154,7 @@ public void multipleComponentMethodsForSameBindingRequest() {
             "test.DaggerRoot",
             "package test;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  protected final class LeafImpl extends DaggerLeaf {",
             "    private LeafImpl() {}",
@@ -5206,7 +5206,7 @@ public void boundInstanceUsedOnlyInInitialize() {
             "import javax.inject.Provider;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerSub implements Sub {",
             "  private Provider<String> stringProvider;",
             "",
@@ -5266,7 +5266,7 @@ public void packagePrivate_derivedFromFrameworkInstance_ComponentMethod() {
             "package test;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  private Provider<PackagePrivate> packagePrivateProvider;",
             "",
@@ -5355,7 +5355,7 @@ public void castModifiableMethodAccessedInFinalImplementation() {
             "package test;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected abstract Optional<PublicBaseType> getOptionalOfPublicBaseType();",
             "}");
@@ -5414,7 +5414,7 @@ public void castModifiableMethodAccessedInFinalImplementation() {
             "package test;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected Object getPackagePrivateSubtype() {",
             "    return getPackagePrivateSubtypeProvider().get();",
@@ -5455,7 +5455,7 @@ public void castModifiableMethodAccessedInFinalImplementation() {
             "test.DaggerRoot",
             "package test;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root {",
             "  protected final class AncestorImpl extends DaggerAncestor {",
             "    protected final class LeafImpl extends DaggerAncestor.LeafImpl {",
@@ -5524,7 +5524,7 @@ public void injectInLeaf_ProductionInRoot() {
             "package test;",
             "",
             GENERATION_OPTIONS_ANNOTATION,
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public abstract class DaggerLeaf implements Leaf, CancellationListener {",
             "",
             "  @SuppressWarnings(\"unchecked\")",
@@ -5605,7 +5605,7 @@ public void injectInLeaf_ProductionInRoot() {
             "test.DaggerRoot",
             "package test;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerRoot implements Root, CancellationListener {",
             "  private Producer<Dependency> dependencyProducer;",
             "  private Producer<Injected> replaceInjectWithProducesProducer;",
diff --git a/javatests/dagger/internal/codegen/ComponentBuilderTest.java b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
index f280bddfa..49b01d115 100644
--- a/javatests/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
@@ -20,7 +20,7 @@
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.COMPONENT_BUILDER;
 import static dagger.internal.codegen.ErrorMessages.creatorMessagesFor;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
@@ -87,7 +87,7 @@ public void testUsesBuildAndSetterNames() {
             "",
             "import dagger.internal.Preconditions;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  private static final class Builder implements TestComponent.Builder {",
             "    private TestModule testModule;",
diff --git a/javatests/dagger/internal/codegen/ComponentCreatorTest.java b/javatests/dagger/internal/codegen/ComponentCreatorTest.java
index 6f4ea8d70..e447fdfc6 100644
--- a/javatests/dagger/internal/codegen/ComponentCreatorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentCreatorTest.java
@@ -27,7 +27,7 @@
 import static dagger.internal.codegen.ComponentCreatorKind.FACTORY;
 import static dagger.internal.codegen.ComponentKind.COMPONENT;
 import static dagger.internal.codegen.ErrorMessages.componentMessagesFor;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 
 import com.google.common.collect.ImmutableList;
@@ -95,7 +95,7 @@ public void testEmptyCreator() {
             "test.DaggerSimpleComponent",
             "package test;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerSimpleComponent implements SimpleComponent {",
             "  private static final class Builder implements SimpleComponent.Builder {",
             "    @Override",
@@ -149,7 +149,7 @@ public void testCanInstantiateModulesUserCannotSet() {
             "",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  private final TestModule testModule;",
             "",
@@ -347,7 +347,7 @@ public void testCreatorWithBindsInstanceNoStaticCreateGenerated() {
                 "import dagger.internal.Preconditions;",
                 IMPORT_GENERATED_ANNOTATION,
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerSimpleComponent implements SimpleComponent {",
                 "  private final Object object;",
                 "",
@@ -448,7 +448,7 @@ public void testCreatorWithPrimitiveBindsInstance() {
                 "import dagger.internal.Preconditions;",
                 IMPORT_GENERATED_ANNOTATION,
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerSimpleComponent implements SimpleComponent {",
                 "  private final Integer i;",
                 "",
diff --git a/javatests/dagger/internal/codegen/ComponentFactoryTest.java b/javatests/dagger/internal/codegen/ComponentFactoryTest.java
index 403498bfc..e46ae5e6a 100644
--- a/javatests/dagger/internal/codegen/ComponentFactoryTest.java
+++ b/javatests/dagger/internal/codegen/ComponentFactoryTest.java
@@ -20,7 +20,7 @@
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.COMPONENT_FACTORY;
 import static dagger.internal.codegen.ErrorMessages.creatorMessagesFor;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
@@ -86,7 +86,7 @@ public void testUsesParameterNames() {
             "",
             "import dagger.internal.Preconditions;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  private static final class Factory implements TestComponent.Factory {",
             "    @Override",
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index 2b79b6f21..1ad0a51e9 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -21,7 +21,7 @@
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
 import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 import static dagger.internal.codegen.GeneratedLines.NPE_FROM_COMPONENT_METHOD;
 import static dagger.internal.codegen.GeneratedLines.NPE_FROM_PROVIDES_METHOD;
@@ -185,7 +185,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 IMPORT_GENERATED_ANNOTATION,
                 "import javax.inject.Provider;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerSimpleComponent implements SimpleComponent {")
             .addLinesIn(
                 FAST_INIT_MODE,
@@ -302,7 +302,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
             .addLines(
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerSimpleComponent implements SimpleComponent {")
             .addLinesIn(
                 FAST_INIT_MODE,
@@ -422,7 +422,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
             .addLines(
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerOuterType_SimpleComponent",
                 "    implements OuterType.SimpleComponent {",
                 "  private DaggerOuterType_SimpleComponent() {}",
@@ -506,7 +506,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 "import dagger.internal.Preconditions;",
                 IMPORT_GENERATED_ANNOTATION,
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private final TestModule testModule;",
                 "",
@@ -610,7 +610,7 @@ public void componentWithAbstractModule() {
             .addLines(
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private B getB() {",
                 "    return TestModule_BFactory.b(new C());",
@@ -708,7 +708,7 @@ public void componentWithAbstractModule() {
         "import dagger.internal.Preconditions;",
         IMPORT_GENERATED_ANNOTATION,
         "",
-        GENERATED_ANNOTATION,
+        GENERATED_CODE_ANNOTATIONS,
         "final class DaggerTestComponent implements TestComponent {",
         "  static final class Builder {",
         "",
@@ -893,7 +893,7 @@ public void subcomponentNotGeneratedIfNotUsedInGraph() {
             "import dagger.internal.Preconditions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerParent implements Parent {",
             "",
             "  private DaggerParent() {}",
@@ -1007,7 +1007,7 @@ public void testDefaultPackage() {
                 "",
                 "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerSimpleComponent implements SimpleComponent {",
                 "  @Override",
                 "  public void inject(SomeInjectedType instance) {",
@@ -1064,7 +1064,7 @@ public void testDefaultPackage() {
             "test.DaggerSimpleComponent",
             "package test;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerSimpleComponent implements SimpleComponent {",
             "  private Provider<SimpleComponent> simpleComponentProvider;",
             "",
@@ -1129,7 +1129,7 @@ public void testDefaultPackage() {
                 "",
                 "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerSimpleComponent implements SimpleComponent {",
                 "  @Override",
                 "  public SomeInjectedType createAndInject() {",
@@ -1198,7 +1198,7 @@ public void testDefaultPackage() {
             .addLines(
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerBComponent implements BComponent {")
             .addLinesIn(
                 DEFAULT_MODE,
@@ -1343,7 +1343,7 @@ public void testDefaultPackage() {
             "test.DaggerTestComponent",
             "package test;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  private final TestModule testModule;",
             "  private final other.test.TestModule testModule2;",
@@ -1469,7 +1469,7 @@ public void testDefaultPackage() {
             "import dagger.internal.Preconditions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerBComponent implements BComponent {",
             "  private final AComponent aComponent;",
             "",
@@ -1556,7 +1556,7 @@ public void testDefaultPackage() {
                 "",
                 IMPORT_GENERATED_ANNOTATION,
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private B getB() {",
                 "    return new B(new C());",
@@ -1637,7 +1637,7 @@ public void testDefaultPackage() {
             "",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerSimpleComponent implements SimpleComponent {",
             "  private DaggerSimpleComponent() {}",
             "",
@@ -1707,7 +1707,7 @@ public void testDefaultPackage() {
             "test.DaggerSimpleComponent",
             "package test;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerSimpleComponent implements SimpleComponent {",
             "  @Override",
             "  public SomeInjectableType someInjectableType() {",
@@ -2082,7 +2082,7 @@ public void unusedSubcomponents_dontResolveExtraBindingsInParentComponents() {
             "import dagger.internal.Preconditions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerParent implements Parent {",
             "  private DaggerParent() {",
             "  }",
@@ -2225,7 +2225,7 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "test.TestModule_NonNullableStringFactory",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "public final class TestModule_NonNullableStringFactory",
                 "    implements Factory<String> {",
                 "  @Override",
@@ -2245,7 +2245,7 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
             .addLines(
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  @Override",
                 "  public String nonNullableString() {",
@@ -2316,7 +2316,7 @@ public void nullCheckingIgnoredWhenProviderReturnsPrimitive() {
                 "test.TestModule_PrimitiveIntegerFactory",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "public final class TestModule_PrimitiveIntegerFactory",
                 "    implements Factory<Integer> {",
                 "",
@@ -2336,7 +2336,7 @@ public void nullCheckingIgnoredWhenProviderReturnsPrimitive() {
             .addLines(
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  @Override",
                 "  public Integer nonNullableInteger() {",
@@ -2412,7 +2412,7 @@ public void privateMethodUsedOnlyInChildDoesNotUseQualifiedThis() {
         JavaFileObjects.forSourceLines(
             "test.DaggerParent",
             "package test;",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerParent implements Parent {",
             "  private String getString() {",
             "    return TestModule_StringFactory.string(numberProvider.get());",
@@ -2482,7 +2482,7 @@ public void componentMethodInChildCallsComponentMethodInParent() {
         JavaFileObjects.forSourceLines(
             "test.DaggerParent",
             "package test;",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerParent implements Parent {",
             "  private final class ChildImpl implements Child {",
             "    @Override",
@@ -2549,7 +2549,7 @@ public void justInTimeAtInjectConstructor_hasGeneratedQualifier() {
             "test.DaggerTestComponent",
             "package test;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public Injected injected() {",
@@ -2622,7 +2622,7 @@ public void moduleHasGeneratedQualifier() {
             "test.DaggerTestComponent",
             "package test;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public String unqualified() {",
@@ -2676,7 +2676,7 @@ public void publicComponentType() {
                 "",
                 IMPORT_GENERATED_ANNOTATION,
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "public final class DaggerPublicComponent implements PublicComponent {",
                 "  private DaggerPublicComponent() {}",
                 "",
diff --git a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
index 85e2d7b9a..c4f3b2560 100644
--- a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
+++ b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
@@ -18,7 +18,7 @@
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 import static dagger.internal.codegen.GeneratedLines.NPE_FROM_COMPONENT_METHOD;
 
 import com.google.testing.compile.Compilation;
@@ -76,7 +76,7 @@ public void bindsInstance() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private final Integer i;",
                 "  private final List<String> list;",
@@ -174,7 +174,7 @@ public void instanceModuleMethod() {
             "import other.OtherPackageModule;",
             "import other.OtherPackageModule_LFactory;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  private final ParentModule parentModule;",
             "  private final OtherPackageModule otherPackageModule;",
@@ -247,7 +247,7 @@ public void componentInstances() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private final Dep dep;",
                 "",
@@ -361,7 +361,7 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private final ParentModule parentModule;",
                 "",
@@ -389,7 +389,7 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private final ParentModule parentModule;",
                 "",
diff --git a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
index 2f4aecf85..eca61c722 100644
--- a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
@@ -20,7 +20,7 @@
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
 import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.CompilationSubject;
@@ -144,7 +144,7 @@ public void toDoubleCheck() {
                 .addLines(
                     "package test;",
                     "",
-                    GENERATED_ANNOTATION,
+                    GENERATED_CODE_ANNOTATIONS,
                     "final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     FAST_INIT_MODE,
@@ -223,7 +223,7 @@ public void toSingleCheck() {
                 .addLines(
                     "package test;",
                     "",
-                    GENERATED_ANNOTATION,
+                    GENERATED_CODE_ANNOTATIONS,
                     "final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     FAST_INIT_MODE,
@@ -299,7 +299,7 @@ public void toUnscoped() {
                 .addLines(
                     "package test;",
                     "",
-                    GENERATED_ANNOTATION,
+                    GENERATED_CODE_ANNOTATIONS,
                     "final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     FAST_INIT_MODE,
@@ -402,7 +402,7 @@ public void castNeeded_rawTypes_Provider_get() {
                 .addLines(
                     "package test;",
                     "",
-                    GENERATED_ANNOTATION,
+                    GENERATED_CODE_ANNOTATIONS,
                     "final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     DEFAULT_MODE,
@@ -511,7 +511,7 @@ public void noCast_rawTypes_Provider_get_toInaccessibleType() {
                 .addLines(
                     "package test;",
                     "",
-                    GENERATED_ANNOTATION,
+                    GENERATED_CODE_ANNOTATIONS,
                     "final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     DEFAULT_MODE,
@@ -602,7 +602,7 @@ public void castedToRawType() {
                 .addLines(
                     "package test;",
                     "",
-                    GENERATED_ANNOTATION,
+                    GENERATED_CODE_ANNOTATIONS,
                     "final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     DEFAULT_MODE,
@@ -704,7 +704,7 @@ public void doubleBinds() {
                 .addLines(
                     "package test;",
                     "",
-                    GENERATED_ANNOTATION,
+                    GENERATED_CODE_ANNOTATIONS,
                     "final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     DEFAULT_MODE,
@@ -810,7 +810,7 @@ public void inlineFactoryOfInacessibleType() {
                 .addLines(
                     "package test;",
                     "",
-                    GENERATED_ANNOTATION,
+                    GENERATED_CODE_ANNOTATIONS,
                     "final class DaggerRequestsSubtypeAsProvider",
                     "    implements RequestsSubtypeAsProvider {")
                 .addLinesIn(
@@ -903,7 +903,7 @@ public void providerWhenBindsScopeGreaterThanDependencyScope() {
                 .addLines(
                     "package test;",
                     "",
-                    GENERATED_ANNOTATION,
+                    GENERATED_CODE_ANNOTATIONS,
                     "final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     DEFAULT_MODE,
diff --git a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
index 58ddb826a..ee42d57db 100644
--- a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
+++ b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
@@ -18,7 +18,7 @@
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 
 import com.google.testing.compile.Compilation;
@@ -84,7 +84,7 @@ public void simpleComponent() {
             "",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerSimpleComponent implements SimpleComponent {",
             "  private DaggerSimpleComponent() {}",
             "",
@@ -185,7 +185,7 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 IMPORT_GENERATED_ANNOTATION,
                 "import javax.inject.Provider;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerSimpleComponent implements SimpleComponent {",
                 "  private volatile Object scopedType = new MemoizedSentinel();",
                 "  private volatile Provider<DependsOnScoped> dependsOnScopedProvider;",
@@ -267,7 +267,7 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 IMPORT_GENERATED_ANNOTATION,
                 "import javax.inject.Provider;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerSimpleComponent implements SimpleComponent {",
                 "  private Provider<ScopedType> scopedTypeProvider;",
                 "  private Provider<DependsOnScoped> dependsOnScopedProvider;",
@@ -379,7 +379,7 @@ public void scopedBinding_onlyUsedInSubcomponent() {
                 "import dagger.internal.MemoizedSentinel;",
                 IMPORT_GENERATED_ANNOTATION,
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerSimpleComponent implements SimpleComponent {",
                 "  private volatile Object scopedType = new MemoizedSentinel();",
                 "",
@@ -440,7 +440,7 @@ public void scopedBinding_onlyUsedInSubcomponent() {
                 IMPORT_GENERATED_ANNOTATION,
                 "import javax.inject.Provider;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerSimpleComponent implements SimpleComponent {",
                 "  private Provider<ScopedType> scopedTypeProvider;",
                 "",
diff --git a/javatests/dagger/internal/codegen/GeneratedLines.java b/javatests/dagger/internal/codegen/GeneratedLines.java
index 2aa17acd1..84132f1d6 100644
--- a/javatests/dagger/internal/codegen/GeneratedLines.java
+++ b/javatests/dagger/internal/codegen/GeneratedLines.java
@@ -18,6 +18,7 @@
 
 import static dagger.internal.codegen.javapoet.CodeBlocks.stringLiteral;
 
+import com.google.common.base.Joiner;
 import com.squareup.javapoet.CodeBlock;
 
 /**
@@ -29,6 +30,12 @@
         + "value = \"dagger.internal.codegen.ComponentProcessor\", "
         + "comments = \"https://dagger.dev\")";
 
+  private static final String SUPPRESS_WARNINGS_ANNOTATION =
+      "@SuppressWarnings({\"unchecked\", \"rawtypes\"})";
+
+  public static final String GENERATED_CODE_ANNOTATIONS =
+      Joiner.on('\n').join(GENERATED_ANNOTATION, SUPPRESS_WARNINGS_ANNOTATION);
+
   public static final String IMPORT_GENERATED_ANNOTATION =
       isBeforeJava9()
           ? "import javax.annotation.Generated;"
diff --git a/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
index e6e970648..4f3e4031f 100644
--- a/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
@@ -21,7 +21,7 @@
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 
 import com.google.common.collect.ImmutableList;
@@ -137,7 +137,7 @@
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class GenericClass_Factory<T> implements Factory<GenericClass<T>> {",
             "  private final Provider<T> tProvider;",
             "",
@@ -186,7 +186,7 @@
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class GenericClass_Factory<A, B> implements Factory<GenericClass<A, B>> {",
             "  private final Provider<A> aProvider;",
             "  private final Provider<B> bProvider;",
@@ -237,7 +237,7 @@
             "import dagger.internal.Factory;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class GenericClass_Factory<T> implements Factory<GenericClass<T>> {",
             "  @SuppressWarnings(\"rawtypes\")",
             "  private static final GenericClass_Factory INSTANCE = new GenericClass_Factory();",
@@ -280,7 +280,7 @@
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class GenericClass_Factory<A, B> implements Factory<GenericClass<A, B>> {",
             "  private final Provider<A> aProvider;",
             "  private final Provider<B> bProvider;",
@@ -332,7 +332,7 @@
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class GenericClass_Factory<A extends Number & Comparable<A>,",
             "        B extends List<? extends String>,",
             "        C extends List<? super String>>",
@@ -401,7 +401,7 @@
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class GenericClass_Factory<A, B>",
             "    implements Factory<GenericClass<A, B>> {",
             "  private final Provider<A> aAndA2AndPaAndLaProvider;",
@@ -1021,7 +1021,7 @@
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class InjectConstructor_Factory ",
             "    implements Factory<InjectConstructor> {",
             "",
@@ -1068,7 +1068,7 @@
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class AllInjections_Factory implements Factory<AllInjections> {",
             "  private final Provider<String> sProvider;",
             "",
@@ -1118,7 +1118,7 @@ public void wildcardDependency() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class InjectConstructor_Factory ",
             "    implements Factory<InjectConstructor> {",
             "",
@@ -1170,7 +1170,7 @@ public void basicNameCollision() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class InjectConstructor_Factory ",
             "    implements Factory<InjectConstructor> {",
             "",
@@ -1227,7 +1227,7 @@ public void nestedNameCollision() {
             "import javax.inject.Provider;",
             "import other.pkg.Outer;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class InjectConstructor_Factory ",
             "    implements Factory<InjectConstructor> {",
             "",
@@ -1285,7 +1285,7 @@ public void samePackageNameCollision() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class InjectConstructor_Factory ",
             "    implements Factory<InjectConstructor> {",
             "",
@@ -1340,7 +1340,7 @@ public void noDeps() {
             "import dagger.internal.Factory;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class SimpleType_Factory implements Factory<SimpleType> {",
             "  private static final SimpleType_Factory INSTANCE = new SimpleType_Factory();",
             "",
@@ -1386,7 +1386,7 @@ public void noDeps() {
             "import dagger.internal.Factory;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class OuterType_A_Factory implements Factory<OuterType.A> {",
             "  private static final OuterType_A_Factory INSTANCE = new OuterType_A_Factory();",
             "",
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index ad48712ec..7a5c0c565 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -18,7 +18,7 @@
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
@@ -128,7 +128,7 @@ public void mapBindingsWithEnumKey() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private final MapModuleOne mapModuleOne;",
                 "  private final MapModuleTwo mapModuleTwo;",
@@ -205,7 +205,7 @@ public void mapBindingsWithEnumKey() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<Handler> provideAdminHandlerProvider;",
                 "  private Provider<Handler> provideLoginHandlerProvider;",
@@ -357,7 +357,7 @@ public void mapBindingsWithInaccessibleKeys() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<Map<Class<?>, Integer>> mapOfClassOfAndIntegerProvider;",
                 "",
@@ -443,7 +443,7 @@ public void mapBindingsWithInaccessibleKeys() {
                 "mapkeys.MapModule_ComplexKeyWithInaccessibleAnnotationValueMapKey",
                 "package mapkeys;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "public final class MapModule_ComplexKeyWithInaccessibleAnnotationValueMapKey {",
                 "  public static MapKeys.ComplexKey create() {",
                 "    return MapKeys_ComplexKeyCreator.createComplexKey(",
@@ -459,7 +459,7 @@ public void mapBindingsWithInaccessibleKeys() {
                 "mapkeys.MapModule_ClassKeyMapKey",
                 "package mapkeys;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "public final class MapModule_ClassKeyMapKey {",
                 "  public static Class<?> create() {",
                 "    return MapKeys.Inaccessible.class;",
@@ -536,7 +536,7 @@ public void mapBindingsWithStringKey() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private final MapModuleOne mapModuleOne;",
                 "  private final MapModuleTwo mapModuleTwo;",
@@ -613,7 +613,7 @@ public void mapBindingsWithStringKey() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<Handler> provideAdminHandlerProvider;",
                 "  private Provider<Handler> provideLoginHandlerProvider;",
@@ -737,7 +737,7 @@ public void mapBindingsWithWrappedKey() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private final MapModuleOne mapModuleOne;",
                 "  private final MapModuleTwo mapModuleTwo;",
@@ -823,7 +823,7 @@ public void mapBindingsWithWrappedKey() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<Handler> provideAdminHandlerProvider;",
                 "  private Provider<Handler> provideLoginHandlerProvider;",
@@ -951,7 +951,7 @@ public void mapBindingsWithNonProviderValue() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private final MapModuleOne mapModuleOne;",
                 "  private final MapModuleTwo mapModuleTwo;",
@@ -1002,7 +1002,7 @@ public void mapBindingsWithNonProviderValue() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<Handler> provideAdminHandlerProvider;",
                 "  private Provider<Handler> provideLoginHandlerProvider;",
@@ -1080,7 +1080,7 @@ public void injectMapWithoutMapBinding() {
             "test.DaggerTestComponent",
             "package test;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  private final MapModule mapModule;",
             "",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
index 11f6bc13c..aec0f055c 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
@@ -21,7 +21,7 @@
 import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
 import static dagger.internal.codegen.Compilers.CLASS_PATH_WITHOUT_GUAVA_OPTION;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.Compiler;
@@ -92,7 +92,7 @@ public void mapBindings() {
                 "",
                 "import dagger.internal.MapBuilder;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {")
             .addLinesIn(
                 FAST_INIT_MODE,
@@ -274,7 +274,7 @@ public void inaccessible() {
             "import other.UsesInaccessible;",
             "import other.UsesInaccessible_Factory;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public UsesInaccessible usesInaccessible() {",
@@ -337,7 +337,7 @@ public void subcomponentOmitsInheritedBindings() {
             "test.DaggerParent",
             "package test;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerParent implements Parent {",
             "  private final ParentModule parentModule;",
             "",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
index aa1a715aa..118bcff65 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
@@ -21,7 +21,7 @@
 import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
 import static dagger.internal.codegen.Compilers.compilerWithOptions;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
@@ -128,7 +128,7 @@ public void mapBindings() {
             .addLines(
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {")
             .addLinesIn(
                 FAST_INIT_MODE,
@@ -403,7 +403,7 @@ public void inaccessible() {
             "import other.UsesInaccessible;",
             "import other.UsesInaccessible_Factory;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public UsesInaccessible usesInaccessible() {",
@@ -466,7 +466,7 @@ public void subcomponentOmitsInheritedBindings() {
             "test.DaggerParent",
             "package test;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerParent implements Parent {",
             "  private final ParentModule parentModule;",
             "",
@@ -522,7 +522,7 @@ public void productionComponents() {
             "",
             "import dagger.producers.internal.CancellationListener;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent, "
                 + "CancellationListener {",
             "  @Override",
diff --git a/javatests/dagger/internal/codegen/MapKeyProcessorTest.java b/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
index 746c60d17..ffdb2bc18 100644
--- a/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -18,7 +18,7 @@
 
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 
 import com.google.auto.value.processor.AutoAnnotationProcessor;
@@ -73,7 +73,7 @@ public void mapKeyCreatorFile() {
             "import com.google.auto.value.AutoAnnotation;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class PathKeyCreator {",
             "  private PathKeyCreator() {}",
             "",
@@ -122,7 +122,7 @@ public void nestedMapKeyCreatorFile() {
             "import com.google.auto.value.AutoAnnotation;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class Container_PathKeyCreator {",
             "  private Container_PathKeyCreator() {}",
             "",
diff --git a/javatests/dagger/internal/codegen/MembersInjectionTest.java b/javatests/dagger/internal/codegen/MembersInjectionTest.java
index edaedaf19..07048e633 100644
--- a/javatests/dagger/internal/codegen/MembersInjectionTest.java
+++ b/javatests/dagger/internal/codegen/MembersInjectionTest.java
@@ -23,7 +23,7 @@
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
 import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 import static javax.tools.StandardLocation.CLASS_OUTPUT;
 
@@ -87,7 +87,7 @@ public void parentClass_noInjectedMembers() {
             "test.DaggerTestComponent",
             "package test;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public Child child() {",
@@ -147,7 +147,7 @@ public void parentClass_injectedMembersInSupertype() {
             "",
             "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public Child child() {",
@@ -192,7 +192,7 @@ public void parentClass_injectedMembersInSupertype() {
         IMPORT_GENERATED_ANNOTATION,
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        GENERATED_CODE_ANNOTATIONS,
         "public final class GenericClass_MembersInjector<A, B>",
         "    implements MembersInjector<GenericClass<A, B>> {",
         "  private final Provider<A> aProvider;",
@@ -279,7 +279,7 @@ public void parentClass_injectedMembersInSupertype() {
         IMPORT_GENERATED_ANNOTATION,
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        GENERATED_CODE_ANNOTATIONS,
         "public final class Child_MembersInjector<T>",
         "    implements MembersInjector<Child<T>> {",
         "  private final Provider<T> tAndXProvider;",
@@ -348,7 +348,7 @@ public void parentClass_injectedMembersInSupertype() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class FieldInjection_MembersInjector",
             "    implements MembersInjector<FieldInjection> {",
             "  private final Provider<String> stringProvider;",
@@ -416,7 +416,7 @@ public void parentClass_injectedMembersInSupertype() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class MethodInjection_MembersInjector",
             "     implements MembersInjector<MethodInjection> {",
             "",
@@ -491,7 +491,7 @@ public void mixedMemberInjection() {
         IMPORT_GENERATED_ANNOTATION,
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        GENERATED_CODE_ANNOTATIONS,
         "public final class MixedMemberInjection_MembersInjector",
         "    implements MembersInjector<MixedMemberInjection> {",
         "",
@@ -564,7 +564,7 @@ public void mixedMemberInjection() {
         IMPORT_GENERATED_ANNOTATION,
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        GENERATED_CODE_ANNOTATIONS,
         "public final class AllInjections_MembersInjector ",
         "    implements MembersInjector<AllInjections> {",
         "",
@@ -625,7 +625,7 @@ public void mixedMemberInjection() {
         IMPORT_GENERATED_ANNOTATION,
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        GENERATED_CODE_ANNOTATIONS,
         "public final class B_MembersInjector implements MembersInjector<B> {",
         "  private final Provider<String> sProvider;",
         "",
@@ -684,7 +684,7 @@ public void simpleComponentWithNesting() {
           IMPORT_GENERATED_ANNOTATION,
           "import javax.inject.Provider;",
           "",
-          GENERATED_ANNOTATION,
+        GENERATED_CODE_ANNOTATIONS,
           "public final class OuterType_B_MembersInjector",
           "    implements MembersInjector<OuterType.B> {",
           "  private final Provider<OuterType.A> aProvider;",
@@ -747,7 +747,7 @@ public void componentWithNestingAndGeneratedType() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class OuterType_B_MembersInjector",
             "    implements MembersInjector<OuterType.B> {",
             "  private final Provider<OuterType.A> aProvider;",
@@ -922,7 +922,7 @@ public void fieldInjectionForShadowedMember() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class Child_MembersInjector implements MembersInjector<Child> {",
             "  private final Provider<Foo> objectProvider;",
             "  private final Provider<Bar> objectProvider2;",
@@ -1097,7 +1097,7 @@ public void injectsPrimitive() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class InjectedType_MembersInjector ",
             "    implements MembersInjector<InjectedType> {",
             "  private final Provider<Integer> boxedIntAndPrimitiveIntProvider;",
@@ -1135,7 +1135,7 @@ public void injectsPrimitive() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class InjectedType_Factory implements Factory<InjectedType> {",
             "  private final Provider<Integer> boxedIntAndPrimitiveIntProvider;",
             "",
@@ -1236,7 +1236,7 @@ public void accessibility() {
                 IMPORT_GENERATED_ANNOTATION,
                 "import javax.inject.Provider;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "public final class Inaccessible_MembersInjector",
                 "    implements MembersInjector<Inaccessible> {",
                 "  private final Provider<Foo> fooProvider;",
@@ -1276,7 +1276,7 @@ public void accessibility() {
             "import other.UsesInaccessible;",
             "import other.UsesInaccessible_Factory;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  private Object getInaccessible() {",
             "    return injectInaccessible(Inaccessible_Factory.newInstance());",
@@ -1375,7 +1375,7 @@ public void accessibleRawType_ofInaccessibleType() {
                 "import other.UsesInaccessibles_Factory;",
                 "import other.UsesInaccessibles_MembersInjector;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {")
             .addLinesIn(
                 FAST_INIT_MODE,
@@ -1505,7 +1505,7 @@ public void publicSupertypeHiddenSubtype() {
             "import other.Supertype;",
             "import other.Supertype_MembersInjector;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  private Object getSubtype() {",
             "    return injectSubtype(Subtype_Factory.newInstance());",
diff --git a/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index 50c41edb0..d30d395d5 100644
--- a/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -24,7 +24,7 @@
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.DaggerModuleMethodSubject.Factory.assertThatMethodInUnannotatedClass;
 import static dagger.internal.codegen.DaggerModuleMethodSubject.Factory.assertThatModuleMethod;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 import static dagger.internal.codegen.GeneratedLines.NPE_FROM_PROVIDES_METHOD;
 
@@ -229,7 +229,7 @@ public void providesMethodReturnsProduced() {
             "import dagger.internal.Preconditions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class TestModule_ProvideStringFactory implements Factory<String> {",
             "  private final TestModule module;",
             "",
@@ -277,7 +277,7 @@ public void providesMethodReturnsProduced() {
             "import dagger.internal.Factory;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class TestModule_ProvideStringFactory implements Factory<String> {",
             "  private final TestModule module;",
             "",
@@ -323,7 +323,7 @@ public void providesMethodReturnsProduced() {
             "import dagger.internal.Factory;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class TestModule_ProvideStringFactory implements Factory<String> {",
             "  private final TestModule module;",
             "",
@@ -397,7 +397,7 @@ public void providesMethodReturnsProduced() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class TestModule_ProvideObjectsFactory",
             "    implements Factory<List<Object>> {",
             "  private final TestModule module;",
@@ -467,7 +467,7 @@ public void providesMethodReturnsProduced() {
             "import dagger.internal.Preconditions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class TestModule_ProvideStringFactory implements Factory<String> {",
             "  private final TestModule module;",
             "",
@@ -522,7 +522,7 @@ public void providesMethodReturnsProduced() {
             "import java.util.List;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class TestModule_ProvideWildcardListFactory implements "
                 + "Factory<List<List<?>>> {",
             "  private final TestModule module;",
@@ -575,7 +575,7 @@ public void providesMethodReturnsProduced() {
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class TestModule_ProvideStringsFactory implements Factory<Set<String>> {",
             "  private final TestModule module;",
             "",
@@ -886,7 +886,7 @@ public void genericSubclassedModule() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class ParentModule_ProvideListBFactory<A extends CharSequence,",
             "    B, C extends Number & Comparable<C>> implements Factory<List<B>> {",
             "  private final ParentModule<A, B, C> module;",
@@ -925,7 +925,7 @@ public void genericSubclassedModule() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class ParentModule_ProvideBElementFactory<A extends CharSequence,",
             "    B, C extends Number & Comparable<C>> implements Factory<B> {",
             "  private final ParentModule<A, B, C> module;",
@@ -965,7 +965,7 @@ public void genericSubclassedModule() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class ParentModule_ProvideBEntryFactory<A extends CharSequence,",
             "    B, C extends Number & Comparable<C>> implements Factory<B>> {",
             "  private final ParentModule<A, B, C> module;",
@@ -1004,7 +1004,7 @@ public void genericSubclassedModule() {
             "import dagger.internal.Preconditions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class ChildNumberModule_ProvideNumberFactory",
             "    implements Factory<Number> {",
             "  private final ChildNumberModule module;",
@@ -1037,7 +1037,7 @@ public void genericSubclassedModule() {
             "import dagger.internal.Preconditions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class ChildIntegerModule_ProvideIntegerFactory",
             "    implements Factory<Integer> {",
             "  private final ChildIntegerModule module;",
@@ -1111,7 +1111,7 @@ public void genericSubclassedModule() {
             "import java.util.Map;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class ParameterizedModule_ProvideMapStringNumberFactory",
             "    implements Factory<Map<String, Number>> {",
             "  private static final ParameterizedModule_ProvideMapStringNumberFactory INSTANCE =",
@@ -1141,7 +1141,7 @@ public void genericSubclassedModule() {
             "import dagger.internal.Preconditions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class ParameterizedModule_ProvideNonGenericTypeFactory",
             "    implements Factory<Object> {",
             "  private static final ParameterizedModule_ProvideNonGenericTypeFactory INSTANCE = ",
@@ -1172,7 +1172,7 @@ public void genericSubclassedModule() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "public final class ParameterizedModule_ProvideNonGenericTypeWithDepsFactory",
             "    implements Factory<String> {",
             "  private final Provider<Object> oProvider;",
@@ -1410,7 +1410,7 @@ public void proxyMethodsConflictWithOtherFactoryMethods() {
                 "test.TestModule_GetFactory",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "public final class TestModule_GetFactory implements Factory<Integer> {",
                 "  @Override",
                 "  public Integer get() {",
@@ -1433,7 +1433,7 @@ public void proxyMethodsConflictWithOtherFactoryMethods() {
                 "test.TestModule_CreateFactory",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "public final class TestModule_CreateFactory implements Factory<Boolean> {",
                 "  @Override",
                 "  public Boolean get() {",
diff --git a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
index b76516616..27ee4ac1f 100644
--- a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
@@ -20,7 +20,7 @@
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
 import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
 import static dagger.internal.codegen.Compilers.compilerWithOptions;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
@@ -110,7 +110,7 @@ public void inlinedOptionalBindings() {
                 "",
                 "import com.google.common.base.Optional;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {")
             .addLinesIn(
                 FAST_INIT_MODE,
@@ -250,7 +250,7 @@ public void requestForFuture() {
             "import com.google.common.base.Optional;",
             "import dagger.producers.internal.CancellationListener;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent, CancellationListener {",
             "  @Override",
             "  public ListenableFuture<Optional<Maybe>> maybe() {",
diff --git a/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
index 0b6ef8f58..a3f28f42f 100644
--- a/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
@@ -369,8 +369,8 @@ public void publicModuleNonPublicIncludes() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            "@SuppressWarnings(\"FutureReturnValueIgnored\")",
             GENERATED_ANNOTATION,
+            "@SuppressWarnings({\"FutureReturnValueIgnored\", \"unchecked\", \"rawtypes\"})",
             "public final class TestModule_ProduceStringFactory",
             "    extends AbstractProducesMethodProducer<Void, String> {",
             "  private final TestModule module;",
@@ -442,8 +442,8 @@ public void singleProducesMethodNoArgsFutureWithProducerName() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
-            "@SuppressWarnings(\"FutureReturnValueIgnored\")",
             GENERATED_ANNOTATION,
+            "@SuppressWarnings({\"FutureReturnValueIgnored\", \"unchecked\", \"rawtypes\"})",
             "public final class TestModule_ProduceStringFactory",
             "    extends AbstractProducesMethodProducer<Void, String> {",
             "  private final TestModule module;",
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 9a852c779..1d1e6cc09 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -20,7 +20,7 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 
 import com.google.testing.compile.Compilation;
@@ -248,7 +248,7 @@ public void simpleComponent() {
                 IMPORT_GENERATED_ANNOTATION,
                 "import javax.inject.Provider;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestClass_SimpleComponent",
                 "    implements TestClass.SimpleComponent, CancellationListener {",
                 "  private final TestClass.BModule bModule;",
@@ -443,7 +443,7 @@ public void simpleComponent() {
                 IMPORT_GENERATED_ANNOTATION,
                 "import javax.inject.Provider;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestClass_SimpleComponent",
                 "    implements TestClass.SimpleComponent, CancellationListener {",
                 "  private Producer<TestClass.A> aEntryPoint;",
@@ -651,7 +651,7 @@ public void productionScope_injectConstructor() {
             new JavaFileBuilder(compilerMode, "test.DaggerRoot")
                 .addLines(
                     "package test;",
-                    GENERATED_ANNOTATION,
+                    GENERATED_CODE_ANNOTATIONS,
                     "final class DaggerParent implements Parent, CancellationListener {",
                     "  private final class ChildImpl implements Child, CancellationListener {",
                     "    @Override",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
index 3fb0e9c7a..0f031cc02 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
@@ -19,7 +19,7 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.Compilers.CLASS_PATH_WITHOUT_GUAVA_OPTION;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 
 import com.google.testing.compile.Compilation;
@@ -96,7 +96,7 @@ public void setBindings() {
             "",
             "import dagger.internal.SetBuilder;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public Set<String> strings() {",
@@ -191,7 +191,7 @@ public void inaccessible() {
             "import other.UsesInaccessible;",
             "import other.UsesInaccessible_Factory;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  private Set getSetOfInaccessible2() {",
             "    return SetBuilder.newSetBuilder(1)",
@@ -266,7 +266,7 @@ public void subcomponentOmitsInheritedBindings() {
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerParent implements Parent {",
             "  private DaggerParent() {}",
             "",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
index 7a4739385..9f913ee3a 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
@@ -18,7 +18,7 @@
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 
 import com.google.testing.compile.Compilation;
@@ -99,7 +99,7 @@ public void setBindings() {
             "",
             "import com.google.common.collect.ImmutableSet;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public Set<String> strings() {",
@@ -203,7 +203,7 @@ public void inaccessible() {
             "import other.UsesInaccessible;",
             "import other.UsesInaccessible_Factory;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent {",
             "  private Set getSetOfInaccessible2() {",
             "    return ImmutableSet.copyOf(TestModule_EmptySetFactory.emptySet());",
@@ -274,7 +274,7 @@ public void subcomponentOmitsInheritedBindings() {
             "",
             "import com.google.common.collect.ImmutableSet;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerParent implements Parent {",
             "  private final class ChildImpl implements Child {",
             "    @Override",
@@ -333,7 +333,7 @@ public void productionComponents() {
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerTestComponent implements TestComponent, "
                 + "CancellationListener {",
             "  private DaggerTestComponent() {}",
diff --git a/javatests/dagger/internal/codegen/SubcomponentCreatorRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SubcomponentCreatorRequestFulfillmentTest.java
index de0067f4a..1576de152 100644
--- a/javatests/dagger/internal/codegen/SubcomponentCreatorRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentCreatorRequestFulfillmentTest.java
@@ -23,7 +23,7 @@
 import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.SUBCOMPONENT_BUILDER;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.SUBCOMPONENT_FACTORY;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 
 import com.google.common.collect.ImmutableList;
@@ -100,7 +100,7 @@ public void testInlinedSubcomponentCreators_componentMethod() {
             "",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerC implements C {",
             "  @Override",
             "  public Sub.Builder sBuilder() {",
diff --git a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
index ad08160c5..4cd6e9ed9 100644
--- a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -20,7 +20,7 @@
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
 import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 
 import com.google.testing.compile.Compilation;
@@ -463,7 +463,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
             .addLines(
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerParentComponent implements ParentComponent {")
             .addLinesIn(
                 DEFAULT_MODE,
@@ -663,7 +663,7 @@ public void multipleSubcomponentsWithSameSimpleNamesCanExistInSameComponent() {
             "",
             "import test.subpackage.Sub;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerParentComponent implements ParentComponent {",
             "  @Override",
             "  public Foo.Sub newInstanceSubcomponent() {",
@@ -746,7 +746,7 @@ public void subcomponentSimpleNamesDisambiguated() {
             "test.DaggerParentComponent",
             "package test;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerParentComponent implements ParentComponent {",
             "  @Override",
             "  public Sub newSubcomponent() {",
@@ -811,7 +811,7 @@ public void subcomponentSimpleNamesDisambiguatedInRoot() {
         JavaFileObjects.forSourceLines(
             "DaggerParentComponent",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerParentComponent implements ParentComponent {",
             "  @Override",
             "  public Sub newSubcomponent() {",
@@ -888,7 +888,7 @@ public void subcomponentImplNameUsesFullyQualifiedClassNameIfNecessary() {
             "",
             "import top1.a.b.c.d.E;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerParentComponent implements ParentComponent {",
             "  @Override",
             "  public E.F.Sub top1() {",
@@ -945,7 +945,7 @@ public void parentComponentNameShouldNotBeDisambiguatedWhenItConflictsWithASubco
             "test.DaggerC",
             "package test;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerC implements C {",
             "  @Override",
             "  public Foo.C newInstanceC() {",
@@ -1007,7 +1007,7 @@ public void subcomponentBuilderNamesShouldNotConflict() {
             "",
             IMPORT_GENERATED_ANNOTATION,
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
             "final class DaggerC implements C {",
             "  @Override",
             "  public C.Foo.Sub.Builder fooBuilder() {",
diff --git a/javatests/dagger/internal/codegen/SwitchingProviderTest.java b/javatests/dagger/internal/codegen/SwitchingProviderTest.java
index 2898f2e43..dbf30d17f 100644
--- a/javatests/dagger/internal/codegen/SwitchingProviderTest.java
+++ b/javatests/dagger/internal/codegen/SwitchingProviderTest.java
@@ -18,7 +18,7 @@
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_CODE_ANNOTATIONS;
 
 import com.google.common.collect.ImmutableList;
 import com.google.testing.compile.Compilation;
@@ -68,7 +68,7 @@ public void switchingProviderTest() {
         JavaFileObjects.forSourceLines(
             "test.DaggerTestComponent",
                 "package test;",
-                GENERATED_ANNOTATION,
+            GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
                 "    @SuppressWarnings(\"unchecked\")",
@@ -248,7 +248,7 @@ public void unscopedBinds() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private volatile Provider<String> sProvider;",
                 "",
@@ -333,7 +333,7 @@ public void scopedBinds() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private volatile Object charSequence = new MemoizedSentinel();",
                 "  private volatile Provider<CharSequence> cProvider;",
@@ -424,7 +424,7 @@ public void emptyMultibindings_avoidSwitchProviders() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  @Override",
                 "  public Provider<Set<String>> setProvider() {",
@@ -469,7 +469,7 @@ public void memberInjectors() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<MembersInjector<Foo>> fooMembersInjectorProvider;",
                 "",
@@ -540,7 +540,7 @@ public void optionals() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                GENERATED_ANNOTATION,
+                GENERATED_CODE_ANNOTATIONS,
                 "final class DaggerTestComponent implements TestComponent {",
                 "  @SuppressWarnings(\"rawtypes\")",
                 "  private static final Provider ABSENT_JDK_OPTIONAL_PROVIDER =",
