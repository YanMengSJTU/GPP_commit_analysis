diff --git a/java/dagger/internal/codegen/AbstractComponentWriter.java b/java/dagger/internal/codegen/AbstractComponentWriter.java
index 940f654a5..f760fec5d 100644
--- a/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -32,7 +32,6 @@
 import static dagger.internal.codegen.BindingType.PRODUCTION;
 import static dagger.internal.codegen.CodeBlocks.makeParametersCodeBlock;
 import static dagger.internal.codegen.ContributionBinding.Kind.INJECTION;
-import static dagger.internal.codegen.ErrorMessages.CANNOT_RETURN_NULL_FROM_NON_NULLABLE_COMPONENT_METHOD;
 import static dagger.internal.codegen.MapKeys.getMapKeyExpression;
 import static dagger.internal.codegen.MemberSelect.localField;
 import static dagger.internal.codegen.MoreAnnotationMirrors.getTypeValue;
@@ -76,7 +75,6 @@
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
 import dagger.internal.InstanceFactory;
-import dagger.internal.Preconditions;
 import dagger.internal.TypedReleasableReferenceManagerDecorator;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import dagger.internal.codegen.InjectionMethods.InjectionSiteMethod;
@@ -666,22 +664,17 @@ private CodeBlock factoryForContributionBindingInitialization(ContributionBindin
           TypeElement dependencyType = dependencyTypeForBinding(binding);
           String dependencyVariable = simpleVariableName(dependencyType);
           String componentMethod = binding.bindingElement().get().getSimpleName().toString();
-          CodeBlock callFactoryMethod =
-              CodeBlock.of("$L.$L()", dependencyVariable, componentMethod);
-          // TODO(sameb): This throws a very vague NPE right now.  The stack trace doesn't
+          // TODO(sameb): The Provider.get() throws a very vague NPE.  The stack trace doesn't
           // help to figure out what the method or return type is.  If we include a string
           // of the return type or method name in the error message, that can defeat obfuscation.
           // We can easily include the raw type (no generics) + annotation type (no values),
           // using .class & String.format -- but that wouldn't be the whole story.
           // What should we do?
-          CodeBlock getMethodBody =
-              !binding.nullableType().isPresent() && compilerOptions.doCheckForNulls()
-                  ? CodeBlock.of(
-                      "return $T.checkNotNull($L, $S);", // TODO(dpb): Extract these checkNotNulls.
-                      Preconditions.class,
-                      callFactoryMethod,
-                      CANNOT_RETURN_NULL_FROM_NON_NULLABLE_COMPONENT_METHOD)
-                  : CodeBlock.of("return $L;", callFactoryMethod);
+          CodeBlock invocation =
+              ComponentProvisionBindingExpression.maybeCheckForNull(
+                  (ProvisionBinding) binding,
+                  compilerOptions,
+                  CodeBlock.of("$L.$L()", dependencyVariable, componentMethod));
           ClassName dependencyClassName = ClassName.get(dependencyType);
           String factoryName =
               dependencyClassName.toString().replace('.', '_') + "_" + componentMethod;
@@ -690,7 +683,7 @@ private CodeBlock factoryForContributionBindingInitialization(ContributionBindin
                   .addAnnotation(Override.class)
                   .addModifiers(PUBLIC)
                   .returns(bindingKeyTypeName)
-                  .addCode(getMethodBody);
+                  .addStatement("return $L", invocation);
           if (binding.nullableType().isPresent()) {
             getMethod.addAnnotation(
                 ClassName.get(MoreTypes.asTypeElement(binding.nullableType().get())));
diff --git a/java/dagger/internal/codegen/BindingExpression.java b/java/dagger/internal/codegen/BindingExpression.java
index 2206e66ca..97b5b358e 100644
--- a/java/dagger/internal/codegen/BindingExpression.java
+++ b/java/dagger/internal/codegen/BindingExpression.java
@@ -161,6 +161,13 @@ private BindingExpression create(
               bindingExpression,
               ComponentRequirement.forDependency(provisionBinding.key().type()),
               componentRequirementFields);
+        case COMPONENT_PROVISION:
+          return new ComponentProvisionBindingExpression(
+              bindingExpression,
+              provisionBinding,
+              graph,
+              componentRequirementFields,
+              compilerOptions);
         case SUBCOMPONENT_BUILDER:
           return new SubcomponentBuilderBindingExpression(
               bindingExpression, subcomponentNames.get(resolvedBindings.bindingKey()));
diff --git a/java/dagger/internal/codegen/ComponentProvisionBindingExpression.java b/java/dagger/internal/codegen/ComponentProvisionBindingExpression.java
new file mode 100644
index 000000000..f05a7594f
--- /dev/null
+++ b/java/dagger/internal/codegen/ComponentProvisionBindingExpression.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+import static dagger.internal.codegen.ErrorMessages.CANNOT_RETURN_NULL_FROM_NON_NULLABLE_COMPONENT_METHOD;
+
+import com.google.auto.common.MoreElements;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import dagger.internal.Preconditions;
+import javax.lang.model.element.TypeElement;
+
+/** A binding expression for component provision methods. */
+final class ComponentProvisionBindingExpression extends SimpleInvocationBindingExpression {
+  private final ProvisionBinding binding;
+  private final BindingGraph bindingGraph;
+  private final ComponentRequirementFields componentRequirementFields;
+  private final CompilerOptions compilerOptions;
+
+  ComponentProvisionBindingExpression(
+      BindingExpression providerBindingExpression,
+      ProvisionBinding binding,
+      BindingGraph bindingGraph,
+      ComponentRequirementFields componentRequirementFields,
+      CompilerOptions compilerOptions) {
+    super(providerBindingExpression);
+    this.binding = checkNotNull(binding);
+    this.bindingGraph = checkNotNull(bindingGraph);
+    this.componentRequirementFields = checkNotNull(componentRequirementFields);
+    this.compilerOptions = checkNotNull(compilerOptions);
+  }
+
+  @Override
+  CodeBlock getInstanceDependencyExpression(
+      DependencyRequest.Kind requestKind, ClassName requestingClass) {
+    CodeBlock invocation =
+        CodeBlock.of(
+            "$L.$L()",
+            componentRequirementFields.getExpression(componentRequirement(), requestingClass),
+            binding.bindingElement().get().getSimpleName());
+    return maybeCheckForNull(binding, compilerOptions, invocation);
+  }
+
+  private ComponentRequirement componentRequirement() {
+    TypeElement componentDependency =
+        bindingGraph
+            .componentDescriptor()
+            .dependencyMethodIndex()
+            .get(MoreElements.asExecutable(binding.bindingElement().get()));
+    return ComponentRequirement.forDependency(componentDependency.asType());
+  }
+
+  static CodeBlock maybeCheckForNull(
+      ProvisionBinding binding, CompilerOptions compilerOptions, CodeBlock invocation) {
+    return binding.shouldCheckForNull(compilerOptions)
+        ? CodeBlock.of(
+            "$T.checkNotNull($L, $S)",
+            Preconditions.class,
+            invocation,
+            CANNOT_RETURN_NULL_FROM_NON_NULLABLE_COMPONENT_METHOD)
+        : invocation;
+  }
+}
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index d6b741b0b..bf6137779 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -1316,16 +1316,15 @@ public void testDefaultPackage() {
         "package test;",
         "",
         "import javax.inject.Inject;",
+        "import javax.inject.Provider;",
         "",
         "final class B {",
-        "  @Inject B(A a) {}",
+        "  @Inject B(Provider<A> a) {}",
         "}");
     JavaFileObject aComponentFile = JavaFileObjects.forSourceLines("test.AComponent",
         "package test;",
         "",
         "import dagger.Component;",
-        "import dagger.Lazy;",
-        "import javax.inject.Provider;",
         "",
         "@Component",
         "interface AComponent {",
@@ -1335,8 +1334,6 @@ public void testDefaultPackage() {
         "package test;",
         "",
         "import dagger.Component;",
-        "import dagger.Lazy;",
-        "import javax.inject.Provider;",
         "",
         "@Component(dependencies = AComponent.class)",
         "interface BComponent {",
@@ -1370,7 +1367,7 @@ public void testDefaultPackage() {
             "",
             "  @Override",
             "  public B b() {",
-            "    return new B(aProvider.get());",
+            "    return new B(aProvider);",
             "  }",
             "",
             "  public static final class Builder {",
diff --git a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
index e974f687c..0d35d7db3 100644
--- a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
+++ b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
@@ -251,6 +251,7 @@ public void componentInstances() {
             "",
             "interface Dep {",
             "  String string();",
+            "  Object object();",
             "}");
 
     JavaFileObject component =
@@ -267,6 +268,7 @@ public void componentInstances() {
             "",
             "  Dep dep();",
             "  String methodOnDep();",
+            "  Object otherMethodOnDep();",
             "}");
     JavaFileObject subcomponent =
         JavaFileObjects.forSourceLines(
@@ -292,14 +294,11 @@ public void componentInstances() {
                 "",
                 "import dagger.internal.Preconditions;",
                 "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private Dep dep;",
                 "",
-                "  private Provider<String> stringProvider;",
-                "",
                 "  private DaggerTestComponent(Builder builder) {",
                 "    initialize(builder);",
                 "  }",
@@ -311,7 +310,6 @@ public void componentInstances() {
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.dep = builder.dep;",
-                "    this.stringProvider = new test_Dep_string(builder.dep);",
                 "  }",
                 "",
                 "  @Override",
@@ -326,7 +324,14 @@ public void componentInstances() {
                 "",
                 "  @Override",
                 "  public String methodOnDep() {",
-                "    return stringProvider.get();",
+                "    return Preconditions.checkNotNull(",
+                "        dep.string(), " + NPE_FROM_COMPONENT_METHOD + " );",
+                "  }",
+                "",
+                "  @Override",
+                "  public Object otherMethodOnDep() {",
+                "    return Preconditions.checkNotNull(",
+                "        dep.object(), " + NPE_FROM_COMPONENT_METHOD + " );",
                 "  }",
                 "",
                 "  @Override",
@@ -353,20 +358,6 @@ public void componentInstances() {
                 "    }",
                 "  }",
                 "",
-                "  private static class test_Dep_string implements Provider<String> {",
-                "    private final Dep dep;",
-                "",
-                "    test_Dep_string(Dep dep) {",
-                "      this.dep = dep;",
-                "    }",
-                "",
-                "    @Override",
-                "    public String get() {",
-                "      return Preconditions.checkNotNull(",
-                "          dep.string(), " + NPE_FROM_COMPONENT_METHOD + ");",
-                "    }",
-                "  }",
-                "",
                 "  private final class TestSubcomponentImpl implements TestSubcomponent {",
                 "    private TestSubcomponentImpl() {}",
                 "",
