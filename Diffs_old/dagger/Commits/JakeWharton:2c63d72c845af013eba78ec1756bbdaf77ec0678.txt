diff --git a/reflect/reflect/src/main/java/dagger/reflect/BindsBinding.java b/reflect/reflect/src/main/java/dagger/reflect/BindsBinding.java
index a6b6748d1..3a7adcb2e 100644
--- a/reflect/reflect/src/main/java/dagger/reflect/BindsBinding.java
+++ b/reflect/reflect/src/main/java/dagger/reflect/BindsBinding.java
@@ -4,6 +4,7 @@
 import java.lang.reflect.Method;
 import org.jetbrains.annotations.Nullable;
 
+import static dagger.reflect.Util.validateVisibility;
 import static java.lang.reflect.Modifier.ABSTRACT;
 
 final class BindsBinding extends Binding<Object> {
@@ -28,8 +29,7 @@
           + method.getName());
     }
 
-    // TODO check visibility
-    method.setAccessible(true);
+    validateVisibility(method);
 
     // TODO validate scope
 
diff --git a/reflect/reflect/src/main/java/dagger/reflect/JustInTimeBinding.java b/reflect/reflect/src/main/java/dagger/reflect/JustInTimeBinding.java
index 736783a0d..1663a9ba7 100644
--- a/reflect/reflect/src/main/java/dagger/reflect/JustInTimeBinding.java
+++ b/reflect/reflect/src/main/java/dagger/reflect/JustInTimeBinding.java
@@ -6,6 +6,7 @@
 import javax.inject.Inject;
 
 import static dagger.reflect.Util.tryNewInstance;
+import static dagger.reflect.Util.validateVisibility;
 
 final class JustInTimeBinding extends Binding<Object> {
   private final Key key;
@@ -36,10 +37,7 @@
     if (constructor == null) {
       throw new IllegalStateException(targetClass + " has no @Inject constructor");
     }
-
-    // TODO check visibility
-    constructor.setAccessible(true);
-
+    validateVisibility(constructor);
     this.constructor = constructor;
 
     int parameterCount = constructor.getParameterTypes().length;
diff --git a/reflect/reflect/src/main/java/dagger/reflect/ProvidesBinding.java b/reflect/reflect/src/main/java/dagger/reflect/ProvidesBinding.java
index a191ad926..e475a7215 100644
--- a/reflect/reflect/src/main/java/dagger/reflect/ProvidesBinding.java
+++ b/reflect/reflect/src/main/java/dagger/reflect/ProvidesBinding.java
@@ -5,6 +5,7 @@
 import org.jetbrains.annotations.Nullable;
 
 import static dagger.reflect.Util.tryInvoke;
+import static dagger.reflect.Util.validateVisibility;
 
 final class ProvidesBinding extends Binding<Object> {
   private final Method method;
@@ -14,8 +15,7 @@
   }
 
   @Override protected Request[] initialize(@Nullable Annotation scope) {
-    // TODO check visibility
-    method.setAccessible(true);
+    validateVisibility(method);
 
     // TODO validate scope
 
diff --git a/reflect/reflect/src/main/java/dagger/reflect/Util.java b/reflect/reflect/src/main/java/dagger/reflect/Util.java
index fb4c2d12f..dd0c8c67e 100644
--- a/reflect/reflect/src/main/java/dagger/reflect/Util.java
+++ b/reflect/reflect/src/main/java/dagger/reflect/Util.java
@@ -1,15 +1,31 @@
 package dagger.reflect;
 
 import java.lang.annotation.Annotation;
+import java.lang.reflect.AccessibleObject;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Member;
 import java.lang.reflect.Method;
 import java.util.Arrays;
 import javax.inject.Qualifier;
 import javax.inject.Scope;
 import org.jetbrains.annotations.Nullable;
 
+import static java.lang.reflect.Modifier.PRIVATE;
+import static java.lang.reflect.Modifier.PROTECTED;
+import static java.lang.reflect.Modifier.PUBLIC;
+
 final class Util {
+  static <T extends AccessibleObject & Member> void validateVisibility(T target) {
+    int modifiers = target.getModifiers();
+    if ((modifiers & (PRIVATE | PROTECTED)) != 0) {
+      throw new IllegalStateException(target + " must be public or package-protected");
+    }
+    if ((modifiers & PUBLIC) == 0) {
+      target.setAccessible(true);
+    }
+  }
+
   static @Nullable Annotation findQualifier(Annotation[] annotations) {
     Annotation qualifier = null;
     for (Annotation annotation : annotations) {
