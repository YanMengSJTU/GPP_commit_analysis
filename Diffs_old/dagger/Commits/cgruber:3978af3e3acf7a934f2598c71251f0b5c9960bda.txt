diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
index 3ca0d32e9..a82afd347 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -277,7 +277,7 @@ private void resolveRequest(DependencyRequest request,
         ImmutableSetMultimap.Builder<Key, ProvisionBinding> resolvedProvisionsBindingBuilder,
         ImmutableMap.Builder<Key, MembersInjectionBinding> resolvedMembersInjectionBindingsBuilder)
             throws SourceFileGenerationException {
-      FrameworkKey frameworkKey = FrameworkKey.forDependencyRequest(request);
+      FrameworkKey frameworkKey = request.frameworkKey();
       Key requestKey = request.key();
       if (resolvedBindings.containsKey(frameworkKey)) {
         return;
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 4a2fe4505..6ac863032 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -387,7 +387,7 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
               requestElement.getSimpleName().toString());
       interfaceMethod.annotate(Override.class);
       interfaceMethod.addModifiers(PUBLIC);
-      FrameworkKey frameworkKey = FrameworkKey.forDependencyRequest(interfaceRequest);
+      FrameworkKey frameworkKey = interfaceRequest.frameworkKey();
       interfaceMethod.body().addSnippet("%s();", initializeMethodNames.get(frameworkKey));
       if (interfaceRequest.kind().equals(MEMBERS_INJECTOR)) {
         Snippet membersInjectorName = memberSelectSnippets.get(frameworkKey);
@@ -424,7 +424,11 @@ private void initializeDependenciesForBinding(
             return input.implicitDependencies();
           }
         })
-        .transform(FrameworkKey.REQUEST_TO_FRAMEWORK_KEY)
+        .transform(new Function<DependencyRequest, FrameworkKey>() {
+          @Override public FrameworkKey apply(DependencyRequest input) {
+            return input.frameworkKey();
+          }
+        })
         .toSet();
     for (FrameworkKey dependencyKey: dependencyKeys) {
       methodWriter.body().addSnippet("%s();", initializeMethodNames.get(dependencyKey));
@@ -457,7 +461,7 @@ private Snippet initializeFactoryForBinding(ProvisionBinding binding,
       }
       if (binding.memberInjectionRequest().isPresent()) {
         Snippet snippet = memberSelectSnippets.get(
-            FrameworkKey.forDependencyRequest(binding.memberInjectionRequest().get()));
+            binding.memberInjectionRequest().get().frameworkKey());
         if (snippet != null) {
           parameters.add(snippet);
         } else {
@@ -485,7 +489,7 @@ private static Snippet initializeMembersInjectorForBinding(
         return Snippet.format("%s.delegatingTo(%s)",
             ClassName.fromClass(MembersInjectors.class),
             memberSelectSnippets.get(
-                FrameworkKey.forDependencyRequest(parentInjectorRequest)));
+                parentInjectorRequest.frameworkKey()));
       } else {
         return Snippet.format("%s.noOp()",
             ClassName.fromClass(MembersInjectors.class));
@@ -504,7 +508,7 @@ private static Snippet initializeMembersInjectorForBinding(
       ImmutableMap<FrameworkKey, Snippet> memberSelectSnippets) {
     ImmutableList.Builder<Snippet> parameters = ImmutableList.builder();
     for (DependencyRequest dependency : dependencies) {
-      parameters.add(memberSelectSnippets.get(FrameworkKey.forDependencyRequest(dependency)));
+      parameters.add(memberSelectSnippets.get(dependency.frameworkKey()));
     }
     return parameters.build();
   }
@@ -520,8 +524,8 @@ private Snippet initializeMapBinding(
     if (isNonProviderMap(firstBinding)) {
       return Snippet.format("%s.create(%s)",
           ClassName.fromClass(MapFactory.class),
-          memberSelectSnippets.get(FrameworkKey.forDependencyRequest(
-              Iterables.getOnlyElement(firstBinding.dependencies()))));
+          memberSelectSnippets.get(Iterables.getOnlyElement(firstBinding.dependencies())
+              .frameworkKey()));
     } else {
       DeclaredType declaredMapType =
           Util.getDeclaredTypeOfMap(firstBinding.providedKey().type());
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
index eaaf9a8bb..feef7e2a4 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
@@ -65,6 +65,24 @@
   abstract Key key();
   abstract Element requestElement();
 
+  FrameworkKey frameworkKey() {
+    final Class<?> frameworkClass;
+    switch (kind()) {
+      case INSTANCE:
+      case LAZY:
+      case PROVIDER:
+        frameworkClass = Provider.class;
+        break;
+      case MEMBERS_INJECTOR:
+        checkArgument(key().isValidMembersInjectionKey());
+        frameworkClass = MembersInjector.class;
+        break;
+      default:
+        throw new AssertionError();
+    }
+    return FrameworkKey.create(this.key(), frameworkClass);
+  }
+
   static final class Factory {
     private final Elements elements;
     private final Types types;
@@ -86,7 +104,7 @@
           })
           .toSet();
     }
-    
+
     /**
      * Creates a DependencyRequest for implictMapBinding, this request's key will be
      * {@code Map<K, Provider<V>>}, this DependencyRequest is depended by the DependencyRequest
diff --git a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
index 58801b6d4..884c2a6d1 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
@@ -160,7 +160,7 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
     List<Snippet> parameters = Lists.newArrayList();
     for (DependencyRequest dependency : binding.dependencies()) {
       parameters.add(frameworkTypeUsageStatement(
-          Snippet.format(names.get(FrameworkKey.forDependencyRequest(dependency))),
+          Snippet.format(names.get(dependency.frameworkKey())),
           dependency.kind()));
     }
     Snippet parametersSnippet = makeParametersSnippet(parameters);
diff --git a/compiler/src/main/java/dagger/internal/codegen/FrameworkKey.java b/compiler/src/main/java/dagger/internal/codegen/FrameworkKey.java
index 0488e22d1..e82f17b88 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FrameworkKey.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FrameworkKey.java
@@ -16,11 +16,9 @@
 package dagger.internal.codegen;
 
 import com.google.auto.value.AutoValue;
-import com.google.common.base.Function;
 import dagger.MembersInjector;
 import javax.inject.Provider;
-
-import static com.google.common.base.Preconditions.checkArgument;
+import static com.google.common.base.Preconditions.checkNotNull;
 
 /**
  * A value object that pairs a {@link Key} with a framework class (e.g.: {@link Provider},
@@ -31,30 +29,8 @@
  */
 @AutoValue
 abstract class FrameworkKey {
-  static final Function<DependencyRequest, FrameworkKey> REQUEST_TO_FRAMEWORK_KEY =
-      new Function<DependencyRequest, FrameworkKey>() {
-        @Override public FrameworkKey apply(DependencyRequest input) {
-          return forDependencyRequest(input);
-        }
-      };
-
-  // TODO(gak): maybe just put this on DependencyRequest?
-  static FrameworkKey forDependencyRequest(DependencyRequest dependencyRequest) {
-    final Class<?> frameworkClass;
-    switch (dependencyRequest.kind()) {
-      case INSTANCE:
-      case LAZY:
-      case PROVIDER:
-        frameworkClass = Provider.class;
-        break;
-      case MEMBERS_INJECTOR:
-        checkArgument(!dependencyRequest.key().qualifier().isPresent());
-        frameworkClass = MembersInjector.class;
-        break;
-      default:
-        throw new AssertionError();
-    }
-    return new AutoValue_FrameworkKey(dependencyRequest.key(), frameworkClass);
+  static FrameworkKey create(Key key, Class<?> frameworkClass) {
+    return new AutoValue_FrameworkKey(checkNotNull(key), checkNotNull(frameworkClass));
   }
 
   static FrameworkKey forProvisionBinding(ProvisionBinding binding) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/GraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/GraphValidator.java
index b1cbdd136..03724b4ec 100644
--- a/compiler/src/main/java/dagger/internal/codegen/GraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/GraphValidator.java
@@ -212,7 +212,7 @@ private void resolveRequest(DependencyRequest request,
       Deque<FrameworkKey> cycleStack,
       Deque<DependencyRequest> dependencyPath) {
 
-    FrameworkKey frameworkKey = FrameworkKey.forDependencyRequest(request);
+    FrameworkKey frameworkKey = request.frameworkKey();
     if (cycleStack.contains(frameworkKey) && !isComponent(frameworkKey.key().type())) {
       resolvedBindings.add(frameworkKey); // it's present, but bad, and we report that.
       dependencyPath = Queues.newArrayDeque(dependencyPath); // copy
@@ -358,7 +358,7 @@ private void resolveRequest(DependencyRequest request,
         errorMessage.append(
             String.format(REQUIRES_AT_INJECT_CONSTRUCTOR_OR_PROVIDER_FORMAT, typeName));
       }
-      if (!key.qualifier().isPresent()
+      if (key.isValidMembersInjectionKey()
           && !bindingRegistry.getOrFindMembersInjectionBinding(key).injectionSites().isEmpty()) {
         errorMessage.append(" ").append(ErrorMessages.MEMBERS_INJECTION_DOES_NOT_IMPLY_PROVISION);
       }
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectBindingRegistry.java b/compiler/src/main/java/dagger/internal/codegen/InjectBindingRegistry.java
index cb8e3ffdd..bb3d2f4d0 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectBindingRegistry.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectBindingRegistry.java
@@ -172,7 +172,7 @@ MembersInjectionBinding getOrFindOrCreateMembersInjectionBinding(Key key)
 
   MembersInjectionBinding getOrFindMembersInjectionBinding(Key key) {
     checkNotNull(key);
-    checkArgument(!key.qualifier().isPresent());
+    checkArgument(key.isValidMembersInjectionKey());
     MembersInjectionBinding binding = membersInjectionBindingsByKey.get(key);
     if (binding == null) {
       TypeElement element = MoreElements.asType(types.asElement(key.type()));
diff --git a/compiler/src/main/java/dagger/internal/codegen/Key.java b/compiler/src/main/java/dagger/internal/codegen/Key.java
index 874e9f2e8..72fc6a3b0 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Key.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Key.java
@@ -15,8 +15,6 @@
  */
 package dagger.internal.codegen;
 
-import dagger.MapKey;
-
 import com.google.auto.common.MoreTypes;
 import com.google.auto.value.AutoValue;
 import com.google.common.base.Equivalence;
@@ -24,6 +22,7 @@
 import com.google.common.base.Objects;
 import com.google.common.base.Optional;
 import com.google.common.collect.Iterables;
+import dagger.MapKey;
 import dagger.Provides;
 import java.util.Map;
 import java.util.Set;
@@ -37,7 +36,9 @@
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.Elements;
+import javax.lang.model.util.SimpleTypeVisitor6;
 import javax.lang.model.util.Types;
+
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static dagger.internal.codegen.ConfigurationAnnotations.getMapKeys;
@@ -85,6 +86,16 @@ TypeMirror type() {
     return wrappedType().get();
   }
 
+  boolean isValidMembersInjectionKey() {
+    return !qualifier().isPresent()
+        && type().accept(new SimpleTypeVisitor6<Boolean, Void>(false) {
+          @Override
+          public Boolean visitDeclared(DeclaredType t, Void p) {
+            return t.getTypeArguments().isEmpty();
+          }
+        }, null);
+  }
+
   @Override
   public String toString() {
     return Objects.toStringHelper(Key.class)
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
index 3c6743486..3b38b57d1 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
@@ -129,7 +129,8 @@ ClassName nameGeneratedType(MembersInjectionBinding binding) {
     }
 
     ImmutableMap<FrameworkKey, String> names =
-        SourceFiles.generateFrameworkReferenceNamesForDependencies(ImmutableSet.copyOf(binding.dependencies()));
+        SourceFiles.generateFrameworkReferenceNamesForDependencies(
+            ImmutableSet.copyOf(binding.dependencies()));
 
     ImmutableMap.Builder<FrameworkKey, FieldWriter> dependencyFieldsBuilder =
         ImmutableMap.builder();
@@ -161,8 +162,7 @@ ClassName nameGeneratedType(MembersInjectionBinding binding) {
         case FIELD:
           DependencyRequest fieldDependency =
               Iterables.getOnlyElement(injectionSite.dependencies());
-          FieldWriter singleField = depedencyFields.get(FrameworkKey.forDependencyRequest(
-              fieldDependency));
+          FieldWriter singleField = depedencyFields.get(fieldDependency.frameworkKey());
           injectMembersWriter.body().addSnippet("instance.%s = %s;",
               injectionSite.element().getSimpleName(),
               frameworkTypeUsageStatement(Snippet.format(singleField.name()),
@@ -170,11 +170,11 @@ ClassName nameGeneratedType(MembersInjectionBinding binding) {
           break;
         case METHOD:
           ImmutableList.Builder<Snippet> parameters = ImmutableList.builder();
-          for (DependencyRequest methodDependnecy : injectionSite.dependencies()) {
+          for (DependencyRequest methodDependency : injectionSite.dependencies()) {
             FieldWriter field =
-            depedencyFields.get(FrameworkKey.forDependencyRequest(methodDependnecy));
+            depedencyFields.get(methodDependency.frameworkKey());
             parameters.add(frameworkTypeUsageStatement(Snippet.format(field.name()),
-                methodDependnecy.kind()));
+                methodDependency.kind()));
           }
           injectMembersWriter.body().addSnippet("instance.%s(%s);",
               injectionSite.element().getSimpleName(),
diff --git a/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java b/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
index 9b826f971..2eb0e9b31 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
@@ -146,7 +146,7 @@
             .orderValuesBy(DEPENDENCY_ORDERING);
     for (DependencyRequest dependency : dependencies) {
       dependenciesByKeyBuilder.put(
-          FrameworkKey.forDependencyRequest(dependency), dependency);
+          dependency.frameworkKey(), dependency);
     }
     ImmutableSetMultimap<FrameworkKey, DependencyRequest> dependenciesByKey =
         dependenciesByKeyBuilder.build();
