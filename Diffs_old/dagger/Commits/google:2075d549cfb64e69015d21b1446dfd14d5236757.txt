diff --git a/compiler/src/main/java/dagger/internal/codegen/MapKeyGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MapKeyGenerator.java
index 1ef674f6b..423d62615 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MapKeyGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MapKeyGenerator.java
@@ -20,16 +20,13 @@
 import com.google.auto.value.AutoValue;
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableSet;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
 import dagger.MapKey;
 import dagger.internal.codegen.MapKeyGenerator.MapKeyCreatorSpecification;
-import dagger.internal.codegen.writer.ClassName;
-import dagger.internal.codegen.writer.JavaWriter;
-import dagger.internal.codegen.writer.MethodWriter;
-import dagger.internal.codegen.writer.Snippet;
-import dagger.internal.codegen.writer.TypeName;
-import dagger.internal.codegen.writer.TypeNames;
-import dagger.internal.codegen.writer.TypeWriter;
 import java.util.LinkedHashSet;
 import java.util.Set;
 import javax.annotation.processing.Filer;
@@ -41,8 +38,10 @@
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.SimpleTypeVisitor6;
 
-import static dagger.internal.codegen.MapKeys.getMapKeyCreatorClassName;
-import static dagger.internal.codegen.writer.Snippet.makeParametersSnippet;
+import static com.squareup.javapoet.MethodSpec.methodBuilder;
+import static com.squareup.javapoet.TypeSpec.classBuilder;
+import static dagger.internal.codegen.CodeBlocks.makeParametersCodeBlock;
+import static dagger.internal.codegen.MapKeys.getJavapoetMapKeyCreatorClassName;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PUBLIC;
 import static javax.lang.model.element.Modifier.STATIC;
@@ -53,7 +52,7 @@
  *
  * @since 2.0
  */
-final class MapKeyGenerator extends JavaWriterSourceFileGenerator<MapKeyCreatorSpecification> {
+final class MapKeyGenerator extends JavaPoetSourceFileGenerator<MapKeyCreatorSpecification> {
 
   /**
    * Specification of the {@link MapKey} annotation and the annotation type to generate.
@@ -96,12 +95,7 @@ static MapKeyCreatorSpecification unwrappedMapKeyWithAnnotationValue(
 
   @Override
   ClassName nameGeneratedType(MapKeyCreatorSpecification mapKeyCreatorType) {
-    return getMapKeyCreatorClassName(mapKeyCreatorType.mapKeyElement());
-  }
-
-  @Override
-  Iterable<? extends Element> getOriginatingElements(MapKeyCreatorSpecification mapKeyCreatorType) {
-    return ImmutableSet.of(mapKeyCreatorType.mapKeyElement());
+    return getJavapoetMapKeyCreatorClassName(mapKeyCreatorType.mapKeyElement());
   }
 
   @Override
@@ -111,40 +105,41 @@ ClassName nameGeneratedType(MapKeyCreatorSpecification mapKeyCreatorType) {
   }
 
   @Override
-  ImmutableSet<JavaWriter> write(
+  Optional<TypeSpec.Builder> write(
       ClassName generatedTypeName, MapKeyCreatorSpecification mapKeyCreatorType) {
-    JavaWriter writer = JavaWriter.inPackage(generatedTypeName.packageName());
-    TypeWriter mapKeyCreatorWriter = writer.addClass(generatedTypeName.simpleName());
-    mapKeyCreatorWriter.addModifiers(PUBLIC, FINAL);
+    TypeSpec.Builder mapKeyCreatorBuilder =
+        classBuilder(generatedTypeName.simpleName()).addModifiers(PUBLIC, FINAL);
 
     for (TypeElement annotationElement :
         nestedAnnotationElements(mapKeyCreatorType.annotationElement())) {
-      writeCreateMethod(mapKeyCreatorWriter, annotationElement);
+      mapKeyCreatorBuilder.addMethod(buildCreateMethod(generatedTypeName, annotationElement));
     }
 
-    return ImmutableSet.of(writer);
+    return Optional.of(mapKeyCreatorBuilder);
   }
 
-  private void writeCreateMethod(TypeWriter mapKeyCreatorWriter, TypeElement annotationElement) {
-    MethodWriter createMethod =
-        mapKeyCreatorWriter.addMethod(
-            annotationElement.asType(), "create" + annotationElement.getSimpleName());
-
-    createMethod.annotate(AutoAnnotation.class);
-    createMethod.addModifiers(PUBLIC, STATIC);
+  private MethodSpec buildCreateMethod(
+      ClassName mapKeyGeneratedTypeName, TypeElement annotationElement) {
+    String createMethodName = "create" + annotationElement.getSimpleName();
+    MethodSpec.Builder createMethod =
+        methodBuilder(createMethodName)
+            .addAnnotation(AutoAnnotation.class)
+            .addModifiers(PUBLIC, STATIC)
+            .returns(TypeName.get(annotationElement.asType()));
 
-    ImmutableList.Builder<Snippet> parameters = ImmutableList.builder();
+    ImmutableList.Builder<CodeBlock> parameters = ImmutableList.builder();
     for (ExecutableElement annotationMember : methodsIn(annotationElement.getEnclosedElements())) {
       String parameterName = annotationMember.getSimpleName().toString();
-      TypeName parameterType = TypeNames.forTypeMirror(annotationMember.getReturnType());
+      TypeName parameterType = TypeName.get(annotationMember.getReturnType());
       createMethod.addParameter(parameterType, parameterName);
-      parameters.add(Snippet.format("%s", parameterName));
+      parameters.add(CodeBlocks.format("$L", parameterName));
     }
 
-    ClassName autoAnnotationClass = mapKeyCreatorWriter.name().peerNamed(
-        "AutoAnnotation_" + mapKeyCreatorWriter.name().simpleName() + "_" + createMethod.name());
-    createMethod.body().addSnippet(
-        "return new %s(%s);", autoAnnotationClass, makeParametersSnippet(parameters.build()));
+    ClassName autoAnnotationClass = mapKeyGeneratedTypeName.peerClass(
+        "AutoAnnotation_" + mapKeyGeneratedTypeName.simpleName() + "_" + createMethodName);
+    createMethod.addStatement(
+        "return new $T($L)", autoAnnotationClass, makeParametersCodeBlock(parameters.build()));
+    return createMethod.build();
   }
 
   private static Set<TypeElement> nestedAnnotationElements(TypeElement annotationElement) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/MapKeys.java b/compiler/src/main/java/dagger/internal/codegen/MapKeys.java
index fbbd8cf82..3bfd46916 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MapKeys.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MapKeys.java
@@ -48,6 +48,7 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static com.google.common.collect.Iterables.transform;
+import static dagger.internal.codegen.SourceFiles.classFileName;
 import static dagger.internal.codegen.writer.Snippet.makeParametersSnippet;
 import static javax.lang.model.util.ElementFilter.methodsIn;
 
@@ -132,6 +133,17 @@ public DeclaredType visitDeclared(DeclaredType t, Void p) {
     return keyTypeElementVisitor.visit(onlyElement.getReturnType());
   }
 
+  /**
+   * Returns the name of the generated class that contains the static {@code create} methods for a
+   * {@link MapKey} annotation type.
+   */
+  public static com.squareup.javapoet.ClassName getJavapoetMapKeyCreatorClassName(
+      TypeElement mapKeyType) {
+    com.squareup.javapoet.ClassName mapKeyTypeName =
+        com.squareup.javapoet.ClassName.get(mapKeyType);
+    return mapKeyTypeName.topLevelClassName().peerClass(classFileName(mapKeyTypeName) + "Creator");
+  }
+
   /**
    * Returns the name of the generated class that contains the static {@code create} methods for a
    * {@link MapKey} annotation type.
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
index c20383ffd..98e88ca99 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -26,6 +26,7 @@
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION_JAVAPOET;
 
 @RunWith(JUnit4.class)
 public class MapKeyProcessorTest {
@@ -58,7 +59,7 @@ public void mapKeyCreatorFile() {
             "import com.google.auto.value.AutoAnnotation;",
             "import javax.annotation.Generated;",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_ANNOTATION_JAVAPOET,
             "public final class PathKeyCreator {",
             "  @AutoAnnotation",
             "  public static PathKey createPathKey(PathEnum value, String relativePath) {",
@@ -103,12 +104,12 @@ public void nestedMapKeyCreatorFile() {
             "",
             "import com.google.auto.value.AutoAnnotation;",
             "import javax.annotation.Generated;",
-            "import test.Container.PathKey",
             "",
-            GENERATED_ANNOTATION,
+            GENERATED_ANNOTATION_JAVAPOET,
             "public final class Container$PathKeyCreator {",
             "  @AutoAnnotation",
-            "  public static PathKey createPathKey(PathEnum value, String relativePath) {",
+            "  public static Container.PathKey createPathKey("
+                + "PathEnum value, String relativePath) {",
             "    return new AutoAnnotation_Container$PathKeyCreator_createPathKey(",
             "        value, relativePath);",
             "  }",
