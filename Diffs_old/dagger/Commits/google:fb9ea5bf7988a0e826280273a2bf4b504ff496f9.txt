diff --git a/java/dagger/BindsOptionalOf.java b/java/dagger/BindsOptionalOf.java
index 35d59324e..9a356ffeb 100644
--- a/java/dagger/BindsOptionalOf.java
+++ b/java/dagger/BindsOptionalOf.java
@@ -43,33 +43,40 @@
  * <p>A {@code @BindsOptionalOf} method:
  *
  * <ul>
- * <li>must be {@code abstract}
- * <li>may have a {@linkplain Qualifier qualifier} annotation
- * <li>must not return {@code void}
- * <li>must not have parameters
- * <li>must not throw exceptions
- * <li>must not return an unqualified type with an {@link Inject @Inject}-annotated constructor,
- *     since such a type is always present
+ *   <li>must be {@code abstract}
+ *   <li>may have a {@linkplain Qualifier qualifier} annotation
+ *   <li>must not return {@code void}
+ *   <li>must not have parameters
+ *   <li>must not throw exceptions
+ *   <li>must not return an unqualified type with an {@link Inject @Inject}-annotated constructor,
+ *       since such a type is always present
  * </ul>
  *
  * <p>Other bindings may inject any of:
  *
  * <ul>
- * <li>{@code Optional<Foo>}
- * <li>{@code Optional<Provider<Foo>>}
- * <li>{@code Optional<Lazy<Foo>>}
- * <li>{@code Optional<Provider<Lazy<Foo>>>}
+ *   <li>{@code Optional<Foo>} (unless there is a {@code @Nullable} binding for {@code Foo}; see
+ *       below)
+ *   <li>{@code Optional<Provider<Foo>>}
+ *   <li>{@code Optional<Lazy<Foo>>}
+ *   <li>{@code Optional<Provider<Lazy<Foo>>>}
  * </ul>
  *
+ * <p>If there is a binding for {@code Foo}, and that binding is {@code @Nullable}, then it is a
+ * compile-time error to inject {@code Optional<Foo>}, because {@code Optional} cannot contain
+ * {@code null}. You can always inject the other forms, because {@link Provider} and {@link Lazy}
+ * can always return {@code null} from their {@code get()} methods.
+ *
  * <p>Explicit bindings for any of the above will conflict with a {@code @BindsOptionalOf} binding.
  *
  * <p>If the binding for {@code Foo} is a {@code @Produces} binding, then another {@code @Produces}
  * binding can depend on any of:
  *
  * <ul>
- * <li>{@code Optional<Foo>}
- * <li>{@code Optional<Producer<Foo>>}
- * <li>{@code Optional<Produced<Foo>>}
+ *   <li>{@code Optional<Foo>}
+ *       <!-- TODO(dpb): Update this once producers support nullability checks -->
+ *   <li>{@code Optional<Producer<Foo>>}
+ *   <li>{@code Optional<Produced<Foo>>}
  * </ul>
  *
  * <p>You can inject either {@code com.google.common.base.Optional} or {@code java.util.Optional}.
diff --git a/javatests/dagger/functional/guava/BUILD b/javatests/dagger/functional/guava/BUILD
index d7c0c7389..dd2c8921f 100644
--- a/javatests/dagger/functional/guava/BUILD
+++ b/javatests/dagger/functional/guava/BUILD
@@ -28,6 +28,7 @@ GenJavaTests(
         "//:dagger_with_compiler",
         "//third_party:auto_value",
         "//third_party:guava",
+        "//third_party:jsr305_annotations",
         "//third_party:jsr330_inject",
         "//third_party:junit",
         "//third_party:truth",
diff --git a/javatests/dagger/functional/guava/OptionalBindingComponents.java b/javatests/dagger/functional/guava/OptionalBindingComponents.java
index 548b2bcc2..ee58865c1 100644
--- a/javatests/dagger/functional/guava/OptionalBindingComponents.java
+++ b/javatests/dagger/functional/guava/OptionalBindingComponents.java
@@ -27,6 +27,7 @@
 import dagger.Provides;
 import dagger.Subcomponent;
 import java.lang.annotation.Retention;
+import javax.annotation.Nullable;
 import javax.inject.Inject;
 import javax.inject.Provider;
 import javax.inject.Qualifier;
@@ -75,6 +76,9 @@
     @BindsOptionalOf
     @SomeQualifier abstract InjectedThing qualifiedInjectedThing();
 
+    @BindsOptionalOf
+    abstract Object nullableObject();
+
     @Provides
     static Values values(
         Optional<Value> optionalInstance,
@@ -110,6 +114,12 @@ static Value value(Optional<Provider<Value>> cycle) {
     @SomeQualifier static Value qualifiedValue() {
       return Value.QUALIFIED_VALUE;
     }
+
+    @Provides
+    @Nullable
+    static Object nullableObject() {
+      return null;
+    }
   }
 
   /** Interface for components used to test optional bindings. */
@@ -118,6 +128,14 @@ static Value value(Optional<Provider<Value>> cycle) {
 
     @SomeQualifier
     Values qualifiedValues();
+
+    // Nullable bindings can satisfy optional bindings except for Optional<Foo>.
+
+    Optional<Provider<Object>> optionalNullableProvider();
+
+    Optional<Lazy<Object>> optionalNullableLazy();
+
+    Optional<Provider<Lazy<Object>>> optionalNullableLazyProvider();
   }
 
   @Component(modules = OptionalBindingModule.class)
diff --git a/javatests/dagger/functional/guava/OptionalBindingComponentsPresentTest.java b/javatests/dagger/functional/guava/OptionalBindingComponentsPresentTest.java
index cc0832a93..124320730 100644
--- a/javatests/dagger/functional/guava/OptionalBindingComponentsPresentTest.java
+++ b/javatests/dagger/functional/guava/OptionalBindingComponentsPresentTest.java
@@ -82,4 +82,19 @@ public void qualifiedOptionalLazyProvider() {
     assertThat(component.qualifiedValues().optionalLazyProvider().get().get().get())
         .isEqualTo(QUALIFIED_VALUE);
   }
+
+  @Test
+  public void optionalNullableProvider() {
+    assertThat(component.optionalNullableProvider().get().get()).isNull();
+  }
+
+  @Test
+  public void optionalNullableLazy() {
+    assertThat(component.optionalNullableLazy().get().get()).isNull();
+  }
+
+  @Test
+  public void optionalNullableLazyProvider() {
+    assertThat(component.optionalNullableLazyProvider().get().get().get()).isNull();
+  }
 }
diff --git a/javatests/dagger/functional/jdk8/BUILD b/javatests/dagger/functional/jdk8/BUILD
index 5cb4013bd..10108bec2 100644
--- a/javatests/dagger/functional/jdk8/BUILD
+++ b/javatests/dagger/functional/jdk8/BUILD
@@ -32,5 +32,6 @@ GenJavaTests(
     deps = [
         "//:dagger_with_compiler",
         "//third_party:auto_value",
+        "//third_party:jsr305_annotations",
     ],
 )
diff --git a/javatests/dagger/functional/jdk8/OptionalBindingComponents.java b/javatests/dagger/functional/jdk8/OptionalBindingComponents.java
index 04fafa2bd..0048f8b44 100644
--- a/javatests/dagger/functional/jdk8/OptionalBindingComponents.java
+++ b/javatests/dagger/functional/jdk8/OptionalBindingComponents.java
@@ -27,6 +27,7 @@
 import dagger.Subcomponent;
 import java.lang.annotation.Retention;
 import java.util.Optional;
+import javax.annotation.Nullable;
 import javax.inject.Inject;
 import javax.inject.Provider;
 import javax.inject.Qualifier;
@@ -75,6 +76,9 @@
     @BindsOptionalOf
     @SomeQualifier abstract InjectedThing qualifiedInjectedThing();
 
+    @BindsOptionalOf
+    abstract Object nullableObject();
+
     @Provides
     static Values values(
         Optional<Value> optionalInstance,
@@ -110,6 +114,12 @@ static Value value(Optional<Provider<Value>> cycle) {
     @SomeQualifier static Value qualifiedValue() {
       return Value.QUALIFIED_VALUE;
     }
+
+    @Provides
+    @Nullable
+    static Object nullableObject() {
+      return null;
+    }
   }
 
   /** Interface for components used to test optional bindings. */
@@ -118,6 +128,14 @@ static Value value(Optional<Provider<Value>> cycle) {
 
     @SomeQualifier
     Values qualifiedValues();
+
+    // Nullable bindings can satisfy optional bindings except for Optional<Foo>.
+
+    Optional<Provider<Object>> optionalNullableProvider();
+
+    Optional<Lazy<Object>> optionalNullableLazy();
+
+    Optional<Provider<Lazy<Object>>> optionalNullableLazyProvider();
   }
 
   @Component(modules = OptionalBindingModule.class)
diff --git a/javatests/dagger/functional/jdk8/OptionalBindingComponentsPresentTest.java b/javatests/dagger/functional/jdk8/OptionalBindingComponentsPresentTest.java
index f2a52ad80..50fbefe4e 100644
--- a/javatests/dagger/functional/jdk8/OptionalBindingComponentsPresentTest.java
+++ b/javatests/dagger/functional/jdk8/OptionalBindingComponentsPresentTest.java
@@ -83,4 +83,19 @@ public void qualifiedOptionalLazyProvider() {
     assertThat(component.qualifiedValues().optionalLazyProvider().get().get().get())
         .isEqualTo(QUALIFIED_VALUE);
   }
+
+  @Test
+  public void optionalNullableProvider() {
+    assertThat(component.optionalNullableProvider().get().get()).isNull();
+  }
+
+  @Test
+  public void optionalNullableLazy() {
+    assertThat(component.optionalNullableLazy().get().get()).isNull();
+  }
+
+  @Test
+  public void optionalNullableLazyProvider() {
+    assertThat(component.optionalNullableLazyProvider().get().get().get()).isNull();
+  }
 }
diff --git a/javatests/dagger/functional/producers/BUILD b/javatests/dagger/functional/producers/BUILD
index 44e1fba86..cf7abf30f 100644
--- a/javatests/dagger/functional/producers/BUILD
+++ b/javatests/dagger/functional/producers/BUILD
@@ -33,6 +33,7 @@ GenJavaTests(
         "//:producers_with_compiler",
         "//third_party:auto_value",
         "//third_party:guava",
+        "//third_party:jsr305_annotations",
         "//third_party:jsr330_inject",
         "//third_party:junit",
         "//third_party:mockito",
diff --git a/javatests/dagger/functional/producers/optional/OptionalBindingComponents.java b/javatests/dagger/functional/producers/optional/OptionalBindingComponents.java
index 6a36127b0..387108757 100644
--- a/javatests/dagger/functional/producers/optional/OptionalBindingComponents.java
+++ b/javatests/dagger/functional/producers/optional/OptionalBindingComponents.java
@@ -34,6 +34,7 @@
 import java.lang.annotation.Retention;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;
+import javax.annotation.Nullable;
 import javax.inject.Provider;
 import javax.inject.Qualifier;
 
@@ -79,6 +80,9 @@ static Executor executor() {
     @SomeQualifier
     abstract Value qualifiedValue();
 
+    @BindsOptionalOf
+    abstract Object nullableObject();
+
     @Produces
     static Values values(
         Optional<Value> optionalInstance,
@@ -112,6 +116,12 @@ static Value value() {
     static Value qualifiedValue() {
       return Value.QUALIFIED_VALUE;
     }
+
+    @Produces
+    @Nullable
+    static Object nullableObject() {
+      return null;
+    }
   }
 
   /** Binds {@link Value} using {@link Provider}s. */
@@ -127,6 +137,12 @@ static Value value() {
     static Value qualifiedValue() {
       return Value.QUALIFIED_VALUE;
     }
+
+    @Provides
+    @Nullable
+    static Object nullableObject() {
+      return null;
+    }
   }
 
   interface OptionalBindingComponent {
@@ -149,6 +165,11 @@ static Value qualifiedValue() {
 
     @SomeQualifier
     ListenableFuture<Optional<Produced<Value>>> qualifiedOptionalProduced();
+
+    // Nullable bindings can satisfy optional bindings except for Optional<Foo>.
+    ListenableFuture<Optional<Producer<Object>>> optionalNullableProducer();
+
+    ListenableFuture<Optional<Produced<Object>>> optionalNullableProduced();
   }
 
   @ProductionComponent(modules = {ExecutorModule.class, OptionalBindingModule.class})
diff --git a/javatests/dagger/functional/producers/optional/OptionalBindingComponentsPresentTest.java b/javatests/dagger/functional/producers/optional/OptionalBindingComponentsPresentTest.java
index 030ccc669..3e2afd464 100644
--- a/javatests/dagger/functional/producers/optional/OptionalBindingComponentsPresentTest.java
+++ b/javatests/dagger/functional/producers/optional/OptionalBindingComponentsPresentTest.java
@@ -40,7 +40,7 @@
           {DaggerOptionalBindingComponents_PresentOptionalProvisionBindingComponent.create()}
         });
   }
-  
+
   private final OptionalBindingComponent component;
 
   public OptionalBindingComponentsPresentTest(OptionalBindingComponent component) {
@@ -77,4 +77,14 @@ public void qualifiedOptionalProducer() throws Exception {
   public void qualifiedOptionalProduced() throws Exception {
     assertThat(component.qualifiedOptionalProduced().get().get().get()).isEqualTo(QUALIFIED_VALUE);
   }
+
+  @Test
+  public void optionalNullableProducer() throws Exception {
+    assertThat(component.optionalNullableProducer().get().get().get().get()).isNull();
+  }
+
+  @Test
+  public void optionalNullableProduced() throws Exception {
+    assertThat(component.optionalNullableProduced().get().get().get()).isNull();
+  }
 }
