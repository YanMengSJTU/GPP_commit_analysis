diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 848aed12b..4a01bd0f0 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -441,7 +441,7 @@ private static Snippet initializeMembersInjectorForBinding(
           Sets.union(binding.parentInjectorRequest().asSet(), binding.dependencies()),
           memberSelectSnippets);
       return Snippet.format("new %s(%s)",
-          membersInjectorNameForMembersInjectionBinding(binding).toString(),
+          membersInjectorNameForMembersInjectionBinding(binding),
           Joiner.on(", ").join(parameters));
     }
   }
@@ -462,6 +462,7 @@ private void writeEntry(ConstructorWriter constructorWriter, ProvisionBinding bi
         Iterables.getOnlyElement(getMapKeys(binding.bindingElement()));
     Map<? extends ExecutableElement, ? extends AnnotationValue> map =
         mapKeyAnnotationMirror.getElementValues();
+    // TODO(gak): this somewhat wrongly relies on the toString of AnnotationValue being valid java
     constructorWriter.body().addSnippet("    .put(%s, %s)",
         Iterables.getOnlyElement(map.entrySet()).getValue(), factory);
   }
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
index 5a3d6eed1..a02291580 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
@@ -11,14 +11,11 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Ordering;
 import com.google.common.collect.Sets;
-import com.google.common.escape.Escapers;
 import com.google.common.io.Closer;
 import dagger.internal.codegen.writer.Writable.Context;
 import java.io.IOException;
 import java.util.List;
 import java.util.Set;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
 import javax.annotation.processing.Filer;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.PackageElement;
@@ -76,18 +73,6 @@ public InterfaceWriter addInterface(String simpleName) {
     return writer;
   }
 
-  static ImmutableSet<ClassName> collectReferencedClasses(
-      Iterable<? extends HasClassReferences> iterable) {
-    return FluentIterable.from(iterable)
-        .transformAndConcat(new Function<HasClassReferences, Set<ClassName>>() {
-          @Override
-          public Set<ClassName> apply(HasClassReferences input) {
-            return input.referencedClasses();
-          }
-        })
-        .toSet();
-  }
-
   public Appendable write(Appendable appendable) throws IOException {
     appendable.append("package ").append(packageName).append(';').append("\n\n");
 
@@ -100,6 +85,7 @@ public Appendable write(Appendable appendable) throws IOException {
           }
         })
         .toSet();
+
     BiMap<String, ClassName> importedClassIndex = HashBiMap.create();
     // TODO(gak): check for collisions with types declared in this compilation unit too
     ImmutableSortedSet<ClassName> importCandidates = ImmutableSortedSet.<ClassName>naturalOrder()
@@ -230,27 +216,5 @@ private boolean isImported(ClassName className) {
           || (className.packageName().equals("java.lang")
               && className.enclosingSimpleNames().isEmpty());
     }
-
-    private static final String JAVA_IDENTIFIER_REGEX =
-        "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*";
-
-    @Override
-    public String compressTypesWithin(String snippet) {
-      // TODO(gak): deal with string literals
-      for (ClassName importedClass : visibleClasses) {
-        snippet = snippet.replace(importedClass.canonicalName(), importedClass.simpleName());
-      }
-      Pattern samePackagePattern = Pattern.compile(
-          packageName.replace(".", "\\.") + "\\.(" + JAVA_IDENTIFIER_REGEX + ")([^\\.])");
-      Matcher matcher = samePackagePattern.matcher(snippet);
-      StringBuffer buffer = new StringBuffer();
-      while (matcher.find()) {
-        matcher.appendReplacement(buffer, collidesWithVisibleClass(matcher.group(1))
-            ? Escapers.builder().addEscape('$', "\\$").build().escape(matcher.group())
-            : "$1$2");
-      }
-      matcher.appendTail(buffer);
-      return buffer.toString();
-    }
   }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/Snippet.java b/compiler/src/main/java/dagger/internal/codegen/writer/Snippet.java
index c7fc64470..7dd810e61 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/Snippet.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/Snippet.java
@@ -3,25 +3,33 @@
 import com.google.common.base.Function;
 import com.google.common.base.Joiner;
 import com.google.common.collect.FluentIterable;
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import java.io.IOException;
 import java.util.Collections;
+import java.util.Formatter;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 
 public final class Snippet implements HasClassReferences, Writable {
-  private final String value;
+  private final String format;
   private final ImmutableSet<TypeName> types;
+  private final ImmutableList<Object> args;
 
-  private Snippet(String value, ImmutableSet<TypeName> types) {
-    this.value = value;
+  private Snippet(String format, ImmutableSet<TypeName> types, ImmutableList<Object> args) {
+    this.format = format;
     this.types = types;
+    this.args = args;
   }
 
-  public String value() {
-    return value;
+  public String format() {
+    return format;
+  }
+
+  public ImmutableList<Object> args() {
+    return args;
   }
 
   public ImmutableSet<TypeName> types() {
@@ -30,7 +38,7 @@ public String value() {
 
   @Override
   public String toString() {
-    return value;
+    return Writables.writeToString(this);
   }
 
   @Override
@@ -47,11 +55,23 @@ public String toString() {
 
   @Override
   public Appendable write(Appendable appendable, Context context) throws IOException {
-    return appendable.append(context.compressTypesWithin(value));
+    ImmutableList.Builder<Object> formattedArgsBuilder = ImmutableList.builder();
+    for (Object arg : args) {
+      if (arg instanceof Writable) {
+        formattedArgsBuilder.add(((Writable) arg).write(new StringBuilder(), context).toString());
+      } else {
+        formattedArgsBuilder.add(arg);
+      }
+    }
+
+    @SuppressWarnings("resource") // intentionally don't close the formatter
+    Formatter formatter = new Formatter(appendable);
+    formatter.format(format, formattedArgsBuilder.build().toArray(new Object[0]));
+
+    return appendable;
   }
 
   public static Snippet format(String format, Object... args) {
-    String value = String.format(format, args);
     ImmutableSet.Builder<TypeName> types = ImmutableSet.builder();
     for (Object arg : args) {
       if (arg instanceof Snippet) {
@@ -64,7 +84,7 @@ public static Snippet format(String format, Object... args) {
         types.add(((HasTypeName) arg).name());
       }
     }
-    return new Snippet(value, types.build());
+    return new Snippet(format, types.build(), ImmutableList.copyOf(args));
   }
 
   public static Snippet format(String format, Iterable<? extends Object> args) {
@@ -80,16 +100,19 @@ public static Snippet makeParametersSnippet(List<Snippet> parameterSnippets) {
     Iterator<Snippet> iterator = parameterSnippets.iterator();
     StringBuilder stringBuilder = new StringBuilder();
     ImmutableSet.Builder<TypeName> typesBuilder = ImmutableSet.builder();
+    ImmutableList.Builder<Object> argsBuilder = ImmutableList.builder();
     if (iterator.hasNext()) {
       Snippet firstSnippet = iterator.next();
-      stringBuilder.append(firstSnippet.value());
+      stringBuilder.append(firstSnippet.format());
       typesBuilder.addAll(firstSnippet.types());
+      argsBuilder.addAll(firstSnippet.args());
     }
     while (iterator.hasNext()) {
       Snippet nextSnippet = iterator.next();
-      stringBuilder.append(", ").append(nextSnippet.value());
+      stringBuilder.append(", ").append(nextSnippet.format());
       typesBuilder.addAll(nextSnippet.types());
+      argsBuilder.addAll(nextSnippet.args());
     }
-    return new Snippet(stringBuilder.toString(), ImmutableSet.copyOf(typesBuilder.build()));
+    return new Snippet(stringBuilder.toString(), typesBuilder.build(), argsBuilder.build());
   }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/Writable.java b/compiler/src/main/java/dagger/internal/codegen/writer/Writable.java
index 2ef319744..84e4943a3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/Writable.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/Writable.java
@@ -6,7 +6,6 @@
 interface Writable {
   interface Context {
     String sourceReferenceForClassName(ClassName className);
-    String compressTypesWithin(String snippet);
     Context createSubcontext(Set<ClassName> newTypes);
   }
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/Writables.java b/compiler/src/main/java/dagger/internal/codegen/writer/Writables.java
index 8db7a2f6c..612e7ebf4 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/Writables.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/Writables.java
@@ -20,11 +20,6 @@ public String sourceReferenceForClassName(ClassName className) {
       return className.canonicalName();
     }
 
-    @Override
-    public String compressTypesWithin(String snippet) {
-      return snippet;
-    }
-
     @Override
     public Context createSubcontext(Set<ClassName> newTypes) {
       throw new UnsupportedOperationException();
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 9139adf3e..1958b3b24 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -81,8 +81,8 @@ public void mapBindingsWithEnumKey() {
         "    LOGIN;",
         "}");
 
-    JavaFileObject HandlerFile = JavaFileObjects.forSourceLines("test.Handler", 
-        "package test;", 
+    JavaFileObject HandlerFile = JavaFileObjects.forSourceLines("test.Handler",
+        "package test;",
         "",
         "interface Handler {}");
     JavaFileObject LoginHandlerFile = JavaFileObjects.forSourceLines("test.LoginHandler",
@@ -131,9 +131,9 @@ public void mapBindingsWithEnumKey() {
                 "    this.mapModuleTwo = builder.mapModuleTwo;",
                 "    this.mapOfPathEnumAndProviderOfHandlerProvider = ",
                 "        MapProviderFactory.<PathEnum, Handler>builder(2)",
-                "            .put(PathEnum.ADMIN, ",
+                "            .put(test.PathEnum.ADMIN, ",
                 "                new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
-                "            .put(PathEnum.LOGIN, ",
+                "            .put(test.PathEnum.LOGIN, ",
                 "                new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
                 "            .build();",
                 "  }",
@@ -187,7 +187,7 @@ public void mapBindingsWithEnumKey() {
                 "}",
                 "");
     ASSERT.about(javaSources())
-        .that(ImmutableList.of(mapModuleOneFile, 
+        .that(ImmutableList.of(mapModuleOneFile,
             mapModuleTwoFile,
             enumKeyFile,
             pathEnumFile,
@@ -247,7 +247,7 @@ public void mapBindingsWithStringKey() {
         "  String value();",
         "}");
     JavaFileObject HandlerFile = JavaFileObjects.forSourceLines("test.Handler",
-        "package test;", 
+        "package test;",
         "",
         "interface Handler {}");
     JavaFileObject LoginHandlerFile = JavaFileObjects.forSourceLines("test.LoginHandler",
@@ -296,7 +296,7 @@ public void mapBindingsWithStringKey() {
                 "    this.mapModuleOne = builder.mapModuleOne;",
                 "    this.mapModuleTwo = builder.mapModuleTwo;",
                 "    this.mapOfStringAndProviderOfHandlerProvider =",
-                "        MapProviderFactory.<java.lang.String, Handler>builder(2)",
+                "        MapProviderFactory.<String, Handler>builder(2)",
                 "            .put(\"Admin\", ",
                 "                new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
                 "            .put(\"Login\", ",
