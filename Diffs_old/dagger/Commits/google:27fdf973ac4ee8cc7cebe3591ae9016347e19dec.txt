diff --git a/java/dagger/internal/codegen/BindingGraphConverter.java b/java/dagger/internal/codegen/BindingGraphConverter.java
index 5a69b18b5..8adf293c2 100644
--- a/java/dagger/internal/codegen/BindingGraphConverter.java
+++ b/java/dagger/internal/codegen/BindingGraphConverter.java
@@ -212,16 +212,10 @@ private BindingNode bindingNode(
       return BindingNode.create(
           pathFromRootToAncestor(owningComponent),
           binding,
-          associatedDeclaringElements(resolvedBindings),
-          () -> bindingDeclarationFormatter.format(binding));
-    }
-
-    private Iterable<BindingDeclaration> associatedDeclaringElements(
-        ResolvedBindings resolvedBindings) {
-      return Iterables.concat(
           resolvedBindings.multibindingDeclarations(),
           resolvedBindings.optionalBindingDeclarations(),
-          resolvedBindings.subcomponentDeclarations());
+          resolvedBindings.subcomponentDeclarations(),
+          bindingDeclarationFormatter);
     }
 
     private MissingBinding missingBindingNode(ResolvedBindings dependencies) {
diff --git a/java/dagger/internal/codegen/BindingNode.java b/java/dagger/internal/codegen/BindingNode.java
index fb9b5e3a3..a7da0920c 100644
--- a/java/dagger/internal/codegen/BindingNode.java
+++ b/java/dagger/internal/codegen/BindingNode.java
@@ -21,6 +21,7 @@
 
 import com.google.auto.value.AutoValue;
 import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Iterables;
 import dagger.BindsOptionalOf;
 import dagger.Module;
 import dagger.model.BindingKind;
@@ -30,7 +31,6 @@
 import dagger.model.Scope;
 import dagger.multibindings.Multibinds;
 import java.util.Optional;
-import java.util.function.Supplier;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
 
@@ -45,18 +45,31 @@
   static BindingNode create(
       ComponentPath component,
       Binding delegate,
-      Iterable<BindingDeclaration> associatedDeclarations,
-      Supplier<String> toStringFunction) {
+      ImmutableSet<MultibindingDeclaration> multibindingDeclarations,
+      ImmutableSet<OptionalBindingDeclaration> optionalBindingDeclarations,
+      ImmutableSet<SubcomponentDeclaration> subcomponentDeclarations,
+      BindingDeclarationFormatter bindingDeclarationFormatter) {
     BindingNode node =
-        new AutoValue_BindingNode(component, delegate, ImmutableSet.copyOf(associatedDeclarations));
-    node.toStringFunction = checkNotNull(toStringFunction);
+        new AutoValue_BindingNode(
+            component,
+            delegate,
+            multibindingDeclarations,
+            optionalBindingDeclarations,
+            subcomponentDeclarations);
+    node.bindingDeclarationFormatter = checkNotNull(bindingDeclarationFormatter);
     return node;
   }
 
-  private Supplier<String> toStringFunction;
+  private BindingDeclarationFormatter bindingDeclarationFormatter;
 
   abstract Binding delegate();
 
+  abstract ImmutableSet<MultibindingDeclaration> multibindingDeclarations();
+
+  abstract ImmutableSet<OptionalBindingDeclaration> optionalBindingDeclarations();
+
+  abstract ImmutableSet<SubcomponentDeclaration> subcomponentDeclarations();
+
   /**
    * The {@link Element}s (other than the binding's {@link #bindingElement()}) that are associated
    * with the binding.
@@ -67,7 +80,10 @@ static BindingNode create(
    *   <li>{@linkplain Multibinds multibinding} declarations
    * </ul>
    */
-  abstract ImmutableSet<BindingDeclaration> associatedDeclarations();
+  final Iterable<BindingDeclaration> associatedDeclarations() {
+    return Iterables.concat(
+        multibindingDeclarations(), optionalBindingDeclarations(), subcomponentDeclarations());
+  }
 
   @Override
   public Key key() {
@@ -116,6 +132,6 @@ public BindingKind kind() {
 
   @Override
   public final String toString() {
-    return toStringFunction.get();
+    return bindingDeclarationFormatter.format(delegate());
   }
 }
