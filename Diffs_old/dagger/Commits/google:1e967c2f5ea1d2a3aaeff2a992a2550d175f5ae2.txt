diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
index 6cfcaccae..8851e4ff7 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -29,7 +29,6 @@
 import com.google.common.collect.SetMultimap;
 import com.google.common.collect.Sets;
 import dagger.Component;
-import dagger.MembersInjector;
 import dagger.Module;
 import dagger.Provides;
 import java.util.Deque;
@@ -105,12 +104,6 @@
 
   abstract ImmutableSetMultimap<String, FrameworkKey> initializationByPackage();
 
-  /**
-   * The ordering of {@link Key keys} that will allow all of the {@link Factory} and
-   * {@link MembersInjector} implementations to initialize properly.
-   */
-  abstract ImmutableList<FrameworkKey> initializationOrdering();
-
   static final class Factory {
     private final Elements elements;
     private final Types types;
@@ -261,8 +254,7 @@ ComponentDescriptor create(TypeElement componentDefinitionType)
           transitiveModules,
           resolvedProvisionBindings.build(),
           resolvedMembersInjectionBindings.build(),
-          initializationByPackageBuilder.build(),
-          ImmutableList.copyOf(resolvedBindings.keySet()));
+          initializationByPackageBuilder.build());
     }
 
     private void resolveRequest(DependencyRequest request,
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 7ea9b04e5..6d11411f1 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -15,6 +15,7 @@
  */
 package dagger.internal.codegen;
 
+import com.google.common.base.Ascii;
 import com.google.common.base.CaseFormat;
 import com.google.common.base.Function;
 import com.google.common.base.Functions;
@@ -90,6 +91,7 @@
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PUBLIC;
 import static javax.lang.model.element.Modifier.STATIC;
+import static javax.lang.model.element.Modifier.VOLATILE;
 import static javax.lang.model.type.TypeKind.VOID;
 /**
  * Generates the implementation of the abstract types annotated with {@link Component}.
@@ -120,6 +122,16 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
     return Optional.of(input.componentDefinitionType());
   }
 
+  // TODO(gak): consider a single-check variant for cases where we know that it's safe
+  private static final String DOUBLE_CHECK_FORMAT = Joiner.on('\n').join(
+      "if (%1$s == null) {",
+      "  synchronized (%3$s) {",
+      "    if (%1$s == null) {",
+      "      this.%1$s = %2$s;",
+      "    }",
+      "  }",
+      "}");
+
   @Override
   ImmutableSet<JavaWriter> write(ClassName componentName, ComponentDescriptor input) {
     ClassName componentDefinitionTypeName =
@@ -131,6 +143,11 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
     componentWriter.addModifiers(PUBLIC, FINAL);
     componentWriter.addImplementedType(componentDefinitionTypeName);
 
+    // TODO(gak): there's not actually an reason that we need all initialization on the same lock
+    FieldWriter initLock = componentWriter.addField(Object.class, "initLock");
+    initLock.addModifiers(PRIVATE, FINAL);
+    initLock.setInitializer("new %s()", ClassName.fromClass(Object.class));
+
     ClassWriter builderWriter = componentWriter.addNestedClass("Builder");
     builderWriter.addModifiers(PUBLIC, STATIC, FINAL);
 
@@ -162,8 +179,6 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
                   }
                 })));
 
-    ImmutableMap.Builder<FrameworkKey, Snippet> memberSelectSnippetsBuilder =
-        ImmutableMap.builder();
     ImmutableSet.Builder<JavaWriter> packageProxies = ImmutableSet.builder();
 
     ConstructorWriter constructorWriter = componentWriter.addConstructor();
@@ -215,6 +230,11 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
       }
     }
 
+    ImmutableMap.Builder<FrameworkKey, Snippet> memberSelectSnippetsBuilder =
+        ImmutableMap.builder();
+    ImmutableMap.Builder<FrameworkKey, String> initializeMethodNamesBuilder =
+        ImmutableMap.builder();
+
     for (Entry<String, Set<FrameworkKey>> packageEntry :
         Multimaps.asMap(input.initializationByPackage()).entrySet()) {
       String packageName = packageEntry.getKey();
@@ -229,7 +249,7 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
         // component gets the fields
         classWithFields = componentWriter;
         // private fields
-        fieldModifiers = EnumSet.of(PRIVATE, FINAL);
+        fieldModifiers = EnumSet.of(PRIVATE);
       } else {
         // create the proxy
         JavaWriter proxyWriter = JavaWriter.inPackage(packageName);
@@ -268,12 +288,20 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
 
         FieldWriter frameworkField = classWithFields.addField(frameworkTypeName, fieldName);
         frameworkField.addModifiers(fieldModifiers);
-
-        memberSelectSnippetsBuilder.put(frameworkKey, Snippet.memberSelectSnippet(
-            new ImmutableList.Builder<String>()
-                .addAll(proxySelector.asSet())
-                .add(frameworkField.name())
-                .build()));
+        frameworkField.addModifiers(VOLATILE);
+
+        ImmutableList<String> memberSelectTokens = new ImmutableList.Builder<String>()
+            .addAll(proxySelector.asSet())
+            .add(frameworkField.name())
+            .build();
+        memberSelectSnippetsBuilder.put(frameworkKey,
+            Snippet.memberSelectSnippet(memberSelectTokens));
+        String memberSelectTokensAsString = Joiner.on('_').join(memberSelectTokens);
+        initializeMethodNamesBuilder.put(frameworkKey, "initialize"
+            + new StringBuilder(memberSelectTokensAsString.length())
+                .append(Ascii.toUpperCase(memberSelectTokensAsString.charAt(0)))
+                .append(memberSelectTokensAsString.substring(1))
+                .toString());
       }
     }
 
@@ -287,11 +315,20 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
     }
 
     ImmutableMap<FrameworkKey, Snippet> memberSelectSnippets = memberSelectSnippetsBuilder.build();
-    for (FrameworkKey frameworkKey : input.initializationOrdering()) {
+    ImmutableMap<FrameworkKey, String> initializeMethodNames = initializeMethodNamesBuilder.build();
+
+    for (FrameworkKey frameworkKey : input.initializationByPackage().values()) {
       Key key = frameworkKey.key();
+      Snippet memberSelectSnippet = memberSelectSnippets.get(frameworkKey);
+      String initializeMethodName = initializeMethodNames.get(frameworkKey);
+
+      MethodWriter initializeMethod =
+          componentWriter.addMethod(VoidName.VOID, initializeMethodName);
+      initializeMethod.addModifiers(PRIVATE);
 
       if (frameworkKey.frameworkClass().equals(Provider.class)) {
         Set<ProvisionBinding> bindings = resolvedProvisionBindings.get(key);
+        initializeDependenciesForBinding(initializeMethodNames, initializeMethod, bindings);
         BindingsType bindingsType = ProvisionBinding.getBindingsType(bindings);
         switch (bindingsType) {
           case SET_BINDING:
@@ -300,56 +337,41 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
               setFactoryParameters.add(initializeFactoryForBinding(
                   binding, componentContributionFields, memberSelectSnippets));
             }
-            constructorWriter.body().addSnippet("this.%s = %s.create(%n%s);",
-                memberSelectSnippets.get(frameworkKey), ClassName.fromClass(SetFactory.class),
+            Snippet initializeSetSnippet = Snippet.format("%s.create(%s)",
+                ClassName.fromClass(SetFactory.class),
                 Snippet.makeParametersSnippet(setFactoryParameters.build()));
+            initializeMethod.body().addSnippet(DOUBLE_CHECK_FORMAT,
+                memberSelectSnippet, initializeSetSnippet, initLock.name());
             break;
           case MAP_BINDING:
             if (!bindings.isEmpty()) {
-              Iterator<ProvisionBinding> iterator = bindings.iterator();
-              // get type information from first binding in iterator
-              ProvisionBinding firstBinding = iterator.next();
-              if (isNonProviderMap(firstBinding)) {
-                constructorWriter.body().addSnippet("this.%s = %s.create(%s);",
-                    providerNames.get(key), ClassName.fromClass(MapFactory.class),
-                    providerNames.get(Iterables.getOnlyElement(firstBinding.dependencies()).key()));
-              } else {
-                DeclaredType declaredMapType =
-                    Util.getDeclaredTypeOfMap(firstBinding.providedKey().type());
-                TypeMirror mapKeyType = Util.getKeyTypeOfMap(declaredMapType);
-                TypeMirror mapValueType = Util.getProvideValueTypeOfMap(declaredMapType);
-                constructorWriter.body().addSnippet("this.%s = %s.<%s, %s>builder(%d)",
-                    providerNames.get(key),
-                    ClassName.fromClass(MapProviderFactory.class),
-                    TypeNames.forTypeMirror(mapKeyType),
-                    TypeNames.forTypeMirror(mapValueType),
-                    bindings.size());
-                writeEntry(constructorWriter, firstBinding, initializeFactoryForBinding(
-                    firstBinding, componentContributionFields, memberSelectSnippets));
-                while (iterator.hasNext()) {
-                  ProvisionBinding binding = iterator.next();
-                  writeEntry(constructorWriter, binding, initializeFactoryForBinding(binding,
-                      componentContributionFields, memberSelectSnippets));
-                }
-                constructorWriter.body().addSnippet("    .build();");
-              }
+              Snippet initializeMapSnippet =
+                  initializeMapBinding(componentContributionFields, memberSelectSnippets, bindings);
+              initializeMethod.body().addSnippet(DOUBLE_CHECK_FORMAT,
+                  memberSelectSnippet, initializeMapSnippet, initLock.name());
+
             }
             break;
           case SINGULAR_BINDING:
             ProvisionBinding binding = Iterables.getOnlyElement(bindings);
-            constructorWriter.body().addSnippet("this.%s = %s;",
-                memberSelectSnippets.get(frameworkKey),
+            initializeMethod.body().addSnippet(DOUBLE_CHECK_FORMAT,
+                memberSelectSnippet,
                 initializeFactoryForBinding(
-                    binding, componentContributionFields, memberSelectSnippets));
+                    binding, componentContributionFields, memberSelectSnippets),
+                initLock.name());
             break;
           default:
             throw new IllegalStateException();
         }
       } else if (frameworkKey.frameworkClass().equals(MembersInjector.class)) {
-        constructorWriter.body().addSnippet("this.%s = %s;",
-            memberSelectSnippets.get(frameworkKey),
-            initializeMembersInjectorForBinding(resolvedMembersInjectionBindings.get(key),
-                memberSelectSnippets));
+        MembersInjectionBinding binding = resolvedMembersInjectionBindings.get(key);
+        initializeDependenciesForBinding(initializeMethodNames, initializeMethod,
+            ImmutableList.of(binding));
+        initializeMethod.body().addSnippet(DOUBLE_CHECK_FORMAT,
+            memberSelectSnippet,
+            initializeMembersInjectorForBinding(binding,
+                memberSelectSnippets),
+            initLock.name());
       } else {
         throw new IllegalStateException(
             "unknown framework class: " + frameworkKey.frameworkClass());
@@ -365,6 +387,7 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
       interfaceMethod.annotate(Override.class);
       interfaceMethod.addModifiers(PUBLIC);
       FrameworkKey frameworkKey = FrameworkKey.forDependencyRequest(interfaceRequest);
+      interfaceMethod.body().addSnippet("%s();", initializeMethodNames.get(frameworkKey));
       if (interfaceRequest.kind().equals(MEMBERS_INJECTOR)) {
         Snippet membersInjectorName = memberSelectSnippets.get(frameworkKey);
         VariableElement parameter = Iterables.getOnlyElement(requestElement.getParameters());
@@ -389,6 +412,24 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
         .build();
   }
 
+  // TODO(gak): integrate this into the DCL structure to avoid some superfluous (albeit cheap) null
+  // checks
+  private void initializeDependenciesForBinding(
+      ImmutableMap<FrameworkKey, String> initializeMethodNames, MethodWriter methodWriter,
+      Iterable<? extends Binding> bindings) {
+    ImmutableSet<FrameworkKey> dependencyKeys = FluentIterable.from(bindings)
+        .transformAndConcat(new Function<Binding, Iterable<DependencyRequest>>() {
+          @Override public Iterable<DependencyRequest> apply(Binding input) {
+            return input.implicitDependencies();
+          }
+        })
+        .transform(FrameworkKey.REQUEST_TO_FRAMEWORK_KEY)
+        .toSet();
+    for (FrameworkKey dependencyKey: dependencyKeys) {
+      methodWriter.body().addSnippet("%s();", initializeMethodNames.get(dependencyKey));
+    }
+  }
+
   private Snippet initializeFactoryForBinding(ProvisionBinding binding,
       Map<TypeElement, FieldWriter> contributionFields,
       ImmutableMap<FrameworkKey, Snippet> memberSelectSnippets) {
@@ -466,8 +507,50 @@ private static Snippet initializeMembersInjectorForBinding(
     return parameters.build();
   }
 
+  private Snippet initializeMapBinding(
+      Map<TypeElement, FieldWriter> contributionFields,
+      ImmutableMap<FrameworkKey, Snippet> memberSelectSnippets,
+      Set<ProvisionBinding> bindings) {
+    Iterator<ProvisionBinding> iterator = bindings.iterator();
+    // get type information from first binding in iterator
+    ProvisionBinding firstBinding = iterator.next();
+    if (isNonProviderMap(firstBinding)) {
+      return Snippet.format("%s.create(%s)",
+          ClassName.fromClass(MapFactory.class),
+          memberSelectSnippets.get(FrameworkKey.forDependencyRequest(
+              Iterables.getOnlyElement(firstBinding.dependencies()))));
+    } else {
+      DeclaredType declaredMapType =
+          Util.getDeclaredTypeOfMap(firstBinding.providedKey().type());
+      TypeMirror mapKeyType = Util.getKeyTypeOfMap(declaredMapType);
+      TypeMirror mapValueType = Util.getProvideValueTypeOfMap(declaredMapType);
+      StringBuilder snippetFormatBuilder = new StringBuilder("%s.<%s, %s>builder(%d)");
+      for (int i = 0; i < bindings.size(); i++) {
+        snippetFormatBuilder.append("\n    .put(%s, %s)");
+      }
+      snippetFormatBuilder.append("\n    .build()");
+
+      List<Object> argsBuilder = Lists.newArrayList();
+      argsBuilder.add(ClassName.fromClass(MapProviderFactory.class));
+      argsBuilder.add(TypeNames.forTypeMirror(mapKeyType));
+      argsBuilder.add(TypeNames.forTypeMirror(mapValueType));
+      argsBuilder.add(bindings.size());
+
+      writeEntry(argsBuilder, firstBinding, initializeFactoryForBinding(
+          firstBinding, contributionFields, memberSelectSnippets));
+      while (iterator.hasNext()) {
+        ProvisionBinding binding = iterator.next();
+        writeEntry(argsBuilder, binding, initializeFactoryForBinding(
+            binding, contributionFields, memberSelectSnippets));
+      }
+
+      return Snippet.format(snippetFormatBuilder.toString(),
+          argsBuilder.toArray(new Object[0]));
+    }
+  }
+
   // add one map entry for map Provider in Constructor
-  private void writeEntry(ConstructorWriter constructorWriter, ProvisionBinding binding,
+  private void writeEntry(List<Object> argsBuilder, ProvisionBinding binding,
       Snippet factory) {
     AnnotationMirror mapKeyAnnotationMirror =
         Iterables.getOnlyElement(getMapKeys(binding.bindingElement()));
@@ -489,12 +572,13 @@ public Snippet apply(AnnotationValue value) {
       for (Snippet snippet : annotationValueNames) {
         snippets.add(snippet);
       }
-      constructorWriter.body().addSnippet("    .put(%sCreator.create(%s),%n         %s)",
+      argsBuilder.add(Snippet.format("%sCreator.create(%s)",
           TypeNames.forTypeMirror(mapKeyAnnotationMirror.getAnnotationType()),
-          Snippet.makeParametersSnippet(snippets.build()), factory);
+          Snippet.makeParametersSnippet(snippets.build())));
+      argsBuilder.add(factory);
     } else { // unwrapped key case
-      constructorWriter.body().addSnippet("    .put(%s, %s)",
-          getValueSnippet(Iterables.getOnlyElement(map.entrySet()).getValue()), factory);
+      argsBuilder.add(Iterables.getOnlyElement(map.entrySet()).getValue());
+      argsBuilder.add(factory);
     }
   }
 
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index 382f70c1d..9f98d4711 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -120,11 +120,11 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private final Provider<SomeInjectableType> someInjectableTypeProvider;",
+        "  private final Object initLock = new Object();",
+        "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -135,18 +135,31 @@
         "    return builder().build();",
         "  }",
         "",
+        "  private void initializeSomeInjectableTypeProvider() {",
+        "    if (someInjectableTypeProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (someInjectableTypeProvider == null) {",
+        "          this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
+        "    initializeSomeInjectableTypeProvider();",
         "    return someInjectableTypeProvider.get();",
         "  }",
         "",
         "  @Override",
         "  public Lazy<SomeInjectableType> lazySomeInjectableType() {",
+        "    initializeSomeInjectableTypeProvider();",
         "    return DoubleCheckLazy.create(someInjectableTypeProvider);",
         "  }",
         "",
         "  @Override",
         "  public Provider<SomeInjectableType> someInjectableTypeProvider() {",
+        "    initializeSomeInjectableTypeProvider();",
         "    return someInjectableTypeProvider;",
         "  }",
         "",
@@ -203,12 +216,11 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private final Provider<SomeInjectableType> someInjectableTypeProvider;",
+        "  private final Object initLock = new Object();",
+        "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.someInjectableTypeProvider =",
-        "        ScopedProvider.create(new SomeInjectableType$$Factory());",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -219,18 +231,32 @@
         "    return builder().build();",
         "  }",
         "",
+        "  private void initializeSomeInjectableTypeProvider() {",
+        "    if (someInjectableTypeProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (someInjectableTypeProvider == null) {",
+        "          this.someInjectableTypeProvider =",
+        "              ScopedProvider.create(new SomeInjectableType$$Factory());",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
+        "    initializeSomeInjectableTypeProvider();",
         "    return someInjectableTypeProvider.get();",
         "  }",
         "",
         "  @Override",
         "  public Lazy<SomeInjectableType> lazySomeInjectableType() {",
+        "    initializeSomeInjectableTypeProvider();",
         "    return DoubleCheckLazy.create(someInjectableTypeProvider);",
         "  }",
         "",
         "  @Override",
         "  public Provider<SomeInjectableType> someInjectableTypeProvider() {",
+        "    initializeSomeInjectableTypeProvider();",
         "    return someInjectableTypeProvider;",
         "  }",
         "",
@@ -323,13 +349,12 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_OuterType$SimpleComponent implements SimpleComponent {",
-        "  private final Provider<A> aProvider;",
-        "  private final MembersInjector<B> bMembersInjector;",
+        "  private final Object initLock = new Object();",
+        "  private volatile Provider<A> aProvider;",
+        "  private volatile MembersInjector<B> bMembersInjector;",
         "",
         "  private Dagger_OuterType$SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.aProvider = new OuterType$A$$Factory();",
-        "    this.bMembersInjector = new OuterType$B$$MembersInjector(aProvider);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -340,13 +365,36 @@
         "    return builder().build();",
         "  }",
         "",
+        "  private void initializeAProvider() {",
+        "    if (aProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (aProvider == null) {",
+        "          this.aProvider = new OuterType$A$$Factory();",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeBMembersInjector() {",
+        "    initializeAProvider();",
+        "    if (bMembersInjector == null) {",
+        "      synchronized (initLock) {",
+        "        if (bMembersInjector == null) {",
+        "          this.bMembersInjector = new OuterType$B$$MembersInjector(aProvider);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
         "  @Override",
         "  public A a() {",
+        "    initializeAProvider();",
         "    return aProvider.get();",
         "  }",
         "",
         "  @Override",
         "  public void inject(B b) {",
+        "    initializeBMembersInjector();",
         "    bMembersInjector.injectMembers(b);",
         "  }",
         "",
@@ -418,17 +466,15 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
+        "  private final Object initLock = new Object();",
         "  private final TestModule testModule;",
-        "  private final Provider<C> cProvider;",
-        "  private final Provider<B> bProvider;",
-        "  private final Provider<A> aProvider;",
+        "  private volatile Provider<C> cProvider;",
+        "  private volatile Provider<B> bProvider;",
+        "  private volatile Provider<A> aProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.testModule = builder.testModule;",
-        "    this.cProvider = new C$$Factory();",
-        "    this.bProvider = new TestModule$$BFactory(testModule, cProvider);",
-        "    this.aProvider = new A$$Factory(bProvider);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -439,14 +485,49 @@
         "    return builder().build();",
         "  }",
         "",
-        "  @Override public A a() {",
+        "  private void initializeCProvider() {",
+        "    if (cProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (cProvider == null) {",
+        "          this.cProvider = new C$$Factory();",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeBProvider() {",
+        "    initializeCProvider();",
+        "    if (bProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (bProvider == null) {",
+        "          this.bProvider = new TestModule$$BFactory(testModule, cProvider);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeAProvider() {",
+        "    initializeBProvider();",
+        "    if (aProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (aProvider == null) {",
+        "          this.aProvider = new A$$Factory(bProvider);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  @Override",
+        "  public A a() {",
+        "    initializeAProvider();",
         "    return aProvider.get();",
         "  }",
         "",
         "  public static final class Builder {",
         "    private TestModule testModule;",
         "",
-        "    private Builder() {}",
+        "    private Builder() {",
+        "    }",
         "",
         "    public TestComponent build() {",
         "      if (testModule == null) {",
@@ -507,6 +588,7 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
+        "  private final Object initLock = new Object();",
         "  private final TestModule testModule;",
         "  private final DepModule depModule;",
         "",
@@ -528,7 +610,8 @@
         "    private TestModule testModule;",
         "    private DepModule depModule;",
         "",
-        "    private Builder() {}",
+        "    private Builder() {",
+        "    }",
         "",
         "    public TestComponent build() {",
         "      if (testModule == null) {",
@@ -614,16 +697,15 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
+        "  private final Object initLock = new Object();",
         "  private final EmptySetModule emptySetModule;",
         "  private final SetModule setModule;",
-        "  private final Provider<Set<String>> setOfStringProvider;",
+        "  private volatile Provider<Set<String>> setOfStringProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.emptySetModule = builder.emptySetModule;",
         "    this.setModule = builder.setModule;",
-        "    this.setOfStringProvider = SetFactory.create(",
-        "    new EmptySetModule$$EmptySetFactory(emptySetModule), new SetModule$$StringFactory(setModule));",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -634,8 +716,21 @@
         "    return builder().build();",
         "  }",
         "",
+        "  private void initializeSetOfStringProvider() {",
+        "    if (setOfStringProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (setOfStringProvider == null) {",
+        "          this.setOfStringProvider = SetFactory.create(",
+        "              new EmptySetModule$$EmptySetFactory(emptySetModule),",
+        "              new SetModule$$StringFactory(setModule));",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
         "  @Override",
         "  public Set<String> strings() {",
+        "    initializeSetOfStringProvider();",
         "    return setOfStringProvider.get();",
         "  }",
         "",
@@ -721,14 +816,12 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private final Provider<SomeInjectableType> someInjectableTypeProvider;",
-        "  private final MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
+        "  private final Object initLock = new Object();",
+        "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;",
+        "  private volatile MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
-        "    this.someInjectedTypeMembersInjector =",
-        "        new SomeInjectedType$$MembersInjector(someInjectableTypeProvider);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -739,17 +832,44 @@
         "    return builder().build();",
         "  }",
         "",
-        "  @Override public void inject(SomeInjectedType instance) {",
+        "  private void initializeSomeInjectableTypeProvider() {",
+        "    if (someInjectableTypeProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (someInjectableTypeProvider == null) {",
+        "          this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeSomeInjectedTypeMembersInjector() {",
+        "    initializeSomeInjectableTypeProvider();",
+        "    if (someInjectedTypeMembersInjector == null) {",
+        "      synchronized (initLock) {",
+        "        if (someInjectedTypeMembersInjector == null) {",
+        "          this.someInjectedTypeMembersInjector =",
+        "              new SomeInjectedType$$MembersInjector(someInjectableTypeProvider);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  @Override",
+        "  public void inject(SomeInjectedType instance) {",
+        "    initializeSomeInjectedTypeMembersInjector();",
         "    someInjectedTypeMembersInjector.injectMembers(instance);",
         "  }",
         "",
-        "  @Override public SomeInjectedType injectAndReturn(SomeInjectedType instance) {",
+        "  @Override",
+        "  public SomeInjectedType injectAndReturn(SomeInjectedType instance) {",
+        "    initializeSomeInjectedTypeMembersInjector();",
         "    someInjectedTypeMembersInjector.injectMembers(instance);",
         "    return instance;",
         "  }",
         "",
         "  public static final class Builder {",
-        "    private Builder() {}",
+        "    private Builder() {",
+        "    }",
         "",
         "    public SimpleComponent build() {",
         "      return new Dagger_SimpleComponent(this);",
@@ -794,14 +914,12 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private final Provider<SimpleComponent> simpleComponentProvider;",
-        "  private final Provider<SomeInjectableType> someInjectableTypeProvider;",
+        "  private final Object initLock = new Object();",
+        "  private volatile Provider<SimpleComponent> simpleComponentProvider;",
+        "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.simpleComponentProvider = InstanceFactory.<SimpleComponent>create(this);",
-        "    this.someInjectableTypeProvider =",
-        "        new SomeInjectableType$$Factory(simpleComponentProvider);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -812,8 +930,31 @@
         "    return builder().build();",
         "  }",
         "",
+        "  private void initializeSimpleComponentProvider() {",
+        "    if (simpleComponentProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (simpleComponentProvider == null) {",
+        "          this.simpleComponentProvider = InstanceFactory.<SimpleComponent>create(this);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeSomeInjectableTypeProvider() {",
+        "    initializeSimpleComponentProvider();",
+        "    if (someInjectableTypeProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (someInjectableTypeProvider == null) {",
+        "          this.someInjectableTypeProvider =",
+        "              new SomeInjectableType$$Factory(simpleComponentProvider);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
+        "    initializeSomeInjectableTypeProvider();",
         "    return someInjectableTypeProvider.get();",
         "  }",
         "",
@@ -869,17 +1010,13 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private final Provider<SomeInjectableType> someInjectableTypeProvider;",
-        "  private final MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
-        "  private final Provider<SomeInjectedType> someInjectedTypeProvider;",
+        "  private final Object initLock = new Object();",
+        "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;",
+        "  private volatile MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
+        "  private volatile Provider<SomeInjectedType> someInjectedTypeProvider;",
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
-        "    this.someInjectedTypeMembersInjector =",
-        "        new SomeInjectedType$$MembersInjector(someInjectableTypeProvider);",
-        "    this.someInjectedTypeProvider =",
-        "        new SomeInjectedType$$Factory(someInjectedTypeMembersInjector);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -890,8 +1027,43 @@
         "    return builder().build();",
         "  }",
         "",
+        "  private void initializeSomeInjectableTypeProvider() {",
+        "    if (someInjectableTypeProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (someInjectableTypeProvider == null) {",
+        "          this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeSomeInjectedTypeMembersInjector() {",
+        "    initializeSomeInjectableTypeProvider();",
+        "    if (someInjectedTypeMembersInjector == null) {",
+        "      synchronized (initLock) {",
+        "        if (someInjectedTypeMembersInjector == null) {",
+        "          this.someInjectedTypeMembersInjector =",
+        "              new SomeInjectedType$$MembersInjector(someInjectableTypeProvider);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeSomeInjectedTypeProvider() {",
+        "    initializeSomeInjectedTypeMembersInjector();",
+        "    if (someInjectedTypeProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (someInjectedTypeProvider == null) {",
+        "          this.someInjectedTypeProvider =",
+        "              new SomeInjectedType$$Factory(someInjectedTypeMembersInjector);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
         "  @Override",
         "  public SomeInjectedType createAndInject() {",
+        "    initializeSomeInjectedTypeProvider();",
         "    return someInjectedTypeProvider.get();",
         "  }",
         "",
@@ -962,44 +1134,65 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_BComponent implements BComponent {",
+        "  private final Object initLock = new Object();",
         "  private final AComponent aComponent;",
-        "  private final Provider<A> aProvider;",
-        "  private final Provider<B> bProvider;",
+        "  private volatile Provider<A> aProvider;",
+        "  private volatile Provider<B> bProvider;",
         "",
-        "  private Dagger_BComponent(Builder builder) {  ",
+        "  private Dagger_BComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.aComponent = builder.aComponent;",
-        "    this.aProvider = new Factory<A>() {",
+        "  }",
+        "",
+        "  public static Builder builder() {",
+        "    return new Builder();",
+        "  }",
+        "",
+        "  private void initializeAProvider() {",
+        "    if (aProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (aProvider == null) {",
+        "          this.aProvider = new Factory<A>() {",
         "      @Override public A get() {",
         "        return aComponent.a();",
         "      }",
         "    };",
-        "    this.bProvider = new B$$Factory(aProvider);",
+        "        }",
+        "      }",
+        "    }",
         "  }",
         "",
-        "  public static Builder builder() {  ",
-        "    return new Builder();",
+        "  private void initializeBProvider() {",
+        "    initializeAProvider();",
+        "    if (bProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (bProvider == null) {",
+        "          this.bProvider = new B$$Factory(aProvider);",
+        "        }",
+        "      }",
+        "    }",
         "  }",
         "",
         "  @Override",
-        "  public B b() {  ",
+        "  public B b() {",
+        "    initializeBProvider();",
         "    return bProvider.get();",
         "  }",
         "",
         "  public static final class Builder {",
         "    private AComponent aComponent;",
-        "  ",
-        "    private Builder() {  ",
+        "",
+        "    private Builder() {",
         "    }",
-        "  ",
-        "    public BComponent build() {  ",
+        "",
+        "    public BComponent build() {",
         "      if (aComponent == null) {",
         "        throw new IllegalStateException(\"aComponent must be set\");",
         "      }",
         "      return new Dagger_BComponent(this);",
         "    }",
-        "  ",
-        "    public Builder aComponent(AComponent aComponent) {  ",
+        "",
+        "    public Builder aComponent(AComponent aComponent) {",
         "      if (aComponent == null) {",
         "        throw new NullPointerException(\"aComponent\");",
         "      }",
@@ -1070,17 +1263,16 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
+        "  private final Object initLock = new Object();",
         "  private final test.TestModule testModule;",
         "  private final TestModule testModule1;",
-        "  private final Provider<test.A> aProvider;",
-        "  private final Provider<A> aProvider1;",
+        "  private volatile Provider<test.A> aProvider;",
+        "  private volatile Provider<A> aProvider1;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.testModule = builder.testModule;",
         "    this.testModule1 = builder.testModule1;",
-        "    this.aProvider = new test.TestModule$$AFactory(testModule);",
-        "    this.aProvider1 = new TestModule$$AFactory(testModule1);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1091,11 +1283,35 @@
         "    return builder().build();",
         "  }",
         "",
-        "  @Override public test.A a() {",
+        "  private void initializeAProvider() {",
+        "    if (aProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (aProvider == null) {",
+        "          this.aProvider = new test.TestModule$$AFactory(testModule);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeAProvider1() {",
+        "    if (aProvider1 == null) {",
+        "      synchronized (initLock) {",
+        "        if (aProvider1 == null) {",
+        "          this.aProvider1 = new TestModule$$AFactory(testModule1);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  @Override",
+        "  public test.A a() {",
+        "    initializeAProvider();",
         "    return aProvider.get();",
         "  }",
         "",
-        "  @Override public A otherA() {",
+        "  @Override",
+        "  public A otherA() {",
+        "    initializeAProvider1();",
         "    return aProvider1.get();",
         "  }",
         "",
@@ -1103,7 +1319,8 @@
         "    private test.TestModule testModule;",
         "    private TestModule testModule1;",
         "",
-        "    private Builder() {}",
+        "    private Builder() {",
+        "    }",
         "",
         "    public TestComponent build() {",
         "      if (testModule == null) {",
@@ -1195,17 +1412,14 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Provider<C> cProvider;",
-        "  private final Provider<B> bProvider;",
-        "  private final Provider<A> aProvider;",
-        "  private final Provider<X> xProvider;",
+        "  private final Object initLock = new Object();",
+        "  private volatile Provider<C> cProvider;",
+        "  private volatile Provider<B> bProvider;",
+        "  private volatile Provider<A> aProvider;",
+        "  private volatile Provider<X> xProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.cProvider = new C$$Factory();",
-        "    this.bProvider = new B$$Factory(cProvider);",
-        "    this.aProvider = new A$$Factory(bProvider);",
-        "    this.xProvider = new X$$Factory(cProvider);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1216,20 +1430,70 @@
         "    return builder().build();",
         "  }",
         "",
-        "  @Override public A a() {",
+        "  private void initializeCProvider() {",
+        "    if (cProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (cProvider == null) {",
+        "          this.cProvider = new C$$Factory();",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeBProvider() {",
+        "    initializeCProvider();",
+        "    if (bProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (bProvider == null) {",
+        "          this.bProvider = new B$$Factory(cProvider);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeAProvider() {",
+        "    initializeBProvider();",
+        "    if (aProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (aProvider == null) {",
+        "          this.aProvider = new A$$Factory(bProvider);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeXProvider() {",
+        "    initializeCProvider();",
+        "    if (xProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (xProvider == null) {",
+        "          this.xProvider = new X$$Factory(cProvider);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  @Override",
+        "  public A a() {",
+        "    initializeAProvider();",
         "    return aProvider.get();",
         "  }",
         "",
-        "  @Override public C c() {",
+        "  @Override",
+        "  public C c() {",
+        "    initializeCProvider();",
         "    return cProvider.get();",
         "  }",
         "",
-        "  @Override public X x() {",
+        "  @Override",
+        "  public X x() {",
+        "    initializeXProvider();",
         "    return xProvider.get();",
         "  }",
         "",
         "  public static final class Builder {",
-        "    private Builder() {}",
+        "    private Builder() {",
+        "    }",
         "",
         "    public TestComponent build() {",
         "      return new Dagger_TestComponent(this);",
@@ -1296,11 +1560,11 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private final Provider<SomeInjectableType> someInjectableTypeProvider;",
+        "  private final Object initLock = new Object();",
+        "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1311,8 +1575,19 @@
         "    return builder().build();",
         "  }",
         "",
+        "  private void initializeSomeInjectableTypeProvider() {",
+        "    if (someInjectableTypeProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (someInjectableTypeProvider == null) {",
+        "          this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
+        "    initializeSomeInjectableTypeProvider();",
         "    return someInjectableTypeProvider.get();",
         "  }",
         "",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index ac3250aae..a8ad868d0 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -30,34 +30,38 @@
 
   @Test
   public void mapBindingsWithEnumKey() {
-    JavaFileObject mapModuleOneFile = JavaFileObjects.forSourceLines("test.MapModuleOne",
-        "package test;",
-        "",
-        "import static dagger.Provides.Type.MAP;",
-        "",
-        "import dagger.Module;",
-        "import dagger.Provides;",
-        "",
-        "@Module",
-        "final class MapModuleOne {",
-        "  @Provides(type = MAP) @PathKey(PathEnum.ADMIN) Handler provideAdminHandler() {",
-        "    return new AdminHandler(); ",
-        "  }",
-        "}");
-    JavaFileObject mapModuleTwoFile = JavaFileObjects.forSourceLines("test.MapModuleTwo",
-        "package test;",
-        "",
-        "import static dagger.Provides.Type.MAP;",
-        "",
-        "import dagger.Module;",
-        "import dagger.Provides;",
-        "",
-        "@Module",
-        "final class MapModuleTwo {",
-        "  @Provides(type = MAP) @PathKey(PathEnum.LOGIN) Handler provideLoginHandler() {",
-        "    return new LoginHandler(); ",
-        "  }",
-        "}");
+    JavaFileObject mapModuleOneFile =
+        JavaFileObjects
+            .forSourceLines("test.MapModuleOne",
+                "package test;",
+                "",
+                "import static dagger.Provides.Type.MAP;",
+                "",
+                "import dagger.Module;",
+                "import dagger.Provides;",
+                "",
+                "@Module",
+                "final class MapModuleOne {",
+                "  @Provides(type = MAP) @PathKey(PathEnum.ADMIN) Handler provideAdminHandler() {",
+                "    return new AdminHandler(); ",
+                "  }",
+                "}");
+    JavaFileObject mapModuleTwoFile =
+        JavaFileObjects
+            .forSourceLines("test.MapModuleTwo",
+                "package test;",
+                "",
+                "import static dagger.Provides.Type.MAP;",
+                "",
+                "import dagger.Module;",
+                "import dagger.Provides;",
+                "",
+                "@Module",
+                "final class MapModuleTwo {",
+                "  @Provides(type = MAP) @PathKey(PathEnum.LOGIN) Handler provideLoginHandler() {",
+                "    return new LoginHandler(); ",
+                "  }",
+                "}");
     JavaFileObject enumKeyFile = JavaFileObjects.forSourceLines("test.PathKey",
         "package test;",
         "import dagger.MapKey;",
@@ -76,6 +80,7 @@ public void mapBindingsWithEnumKey() {
         "    ADMIN,",
         "    LOGIN;",
         "}");
+
     JavaFileObject HandlerFile = JavaFileObjects.forSourceLines("test.Handler",
         "package test;",
         "",
@@ -113,22 +118,16 @@ public void mapBindingsWithEnumKey() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
+        "  private final Object initLock = new Object();",
         "  private final MapModuleOne mapModuleOne;",
         "  private final MapModuleTwo mapModuleTwo;",
-        "  private final Provider<Map<PathEnum, Provider<Handler>>> ",
+        "  private volatile Provider<Map<PathEnum, Provider<Handler>>>",
         "      mapOfPathEnumAndProviderOfHandlerProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.mapModuleOne = builder.mapModuleOne;",
         "    this.mapModuleTwo = builder.mapModuleTwo;",
-        "    this.mapOfPathEnumAndProviderOfHandlerProvider = ",
-        "        MapProviderFactory.<PathEnum, Handler>builder(2)",
-        "            .put(PathEnum.ADMIN, ",
-        "                new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
-        "            .put(PathEnum.LOGIN, ",
-        "                new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
-        "            .build();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -139,8 +138,25 @@ public void mapBindingsWithEnumKey() {
         "    return builder().build();",
         "  }",
         "",
+        "  private void initializeMapOfPathEnumAndProviderOfHandlerProvider() {",
+        "    if (mapOfPathEnumAndProviderOfHandlerProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (mapOfPathEnumAndProviderOfHandlerProvider == null) {",
+        "          this.mapOfPathEnumAndProviderOfHandlerProvider =",
+        "              MapProviderFactory.<PathEnum, Handler>builder(2)",
+        "                  .put(test.PathEnum.ADMIN, ",
+        "                      new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
+        "                  .put(test.PathEnum.LOGIN,",
+        "                      new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
+        "                  .build();",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
         "  @Override",
         "  public Map<PathEnum, Provider<Handler>> dispatcher() {",
+        "    initializeMapOfPathEnumAndProviderOfHandlerProvider();",
         "    return mapOfPathEnumAndProviderOfHandlerProvider.get();",
         "  }",
         "",
@@ -177,8 +193,7 @@ public void mapBindingsWithEnumKey() {
         "      return this;",
         "    }",
         "  }",
-        "}",
-        "");
+        "}");
     assert_().about(javaSources())
         .that(ImmutableList.of(mapModuleOneFile,
             mapModuleTwoFile,
@@ -190,39 +205,44 @@ public void mapBindingsWithEnumKey() {
             componentFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
-        .and().generatesSources(generatedComponent);
+        .and()
+        .generatesSources(generatedComponent);
   }
 
- @Test
- public void mapBindingsWithStringKey() {
-    JavaFileObject mapModuleOneFile = JavaFileObjects.forSourceLines("test.MapModuleOne",
-        "package test;",
-        "",
-        "import static dagger.Provides.Type.MAP;",
-        "",
-        "import dagger.Module;",
-        "import dagger.Provides;",
-        "",
-        "@Module",
-        "final class MapModuleOne {",
-        "  @Provides(type = MAP) @StringKey(\"Admin\") Handler provideAdminHandler() {",
-        "    return new AdminHandler();",
-        "  }",
-        "}");
-    JavaFileObject mapModuleTwoFile = JavaFileObjects.forSourceLines("test.MapModuleTwo",
-        "package test;",
-        "",
-        "import static dagger.Provides.Type.MAP;",
-        "",
-        "import dagger.Module;",
-        "import dagger.Provides;",
-        "",
-        "@Module",
-        "final class MapModuleTwo {",
-        "  @Provides(type = MAP) @StringKey(\"Login\") Handler provideLoginHandler() {",
-        "    return new LoginHandler();",
-        "  }",
-        "}");
+  @Test
+  public void mapBindingsWithStringKey() {
+    JavaFileObject mapModuleOneFile =
+        JavaFileObjects
+            .forSourceLines("test.MapModuleOne",
+                "package test;",
+                "",
+                "import static dagger.Provides.Type.MAP;",
+                "",
+                "import dagger.Module;",
+                "import dagger.Provides;",
+                "",
+                "@Module",
+                "final class MapModuleOne {",
+                "  @Provides(type = MAP) @StringKey(\"Admin\") Handler provideAdminHandler() {",
+                "    return new AdminHandler();",
+                "  }",
+                "}");
+    JavaFileObject mapModuleTwoFile =
+        JavaFileObjects
+            .forSourceLines("test.MapModuleTwo",
+                "package test;",
+                "",
+                "import static dagger.Provides.Type.MAP;",
+                "",
+                "import dagger.Module;",
+                "import dagger.Provides;",
+                "",
+                "@Module",
+                "final class MapModuleTwo {",
+                "  @Provides(type = MAP) @StringKey(\"Login\") Handler provideLoginHandler() {",
+                "    return new LoginHandler();",
+                "  }",
+                "}");
     JavaFileObject stringKeyFile = JavaFileObjects.forSourceLines("test.StringKey",
         "package test;",
         "import dagger.MapKey;",
@@ -271,23 +291,16 @@ public void mapBindingsWithStringKey() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
+        "  private final Object initLock = new Object();",
         "  private final MapModuleOne mapModuleOne;",
         "  private final MapModuleTwo mapModuleTwo;",
-        "  private final Provider<Map<String, Provider<Handler>>> ",
+        "  private volatile Provider<Map<String, Provider<Handler>>>",
         "      mapOfStringAndProviderOfHandlerProvider;",
         "",
-        "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.mapModuleOne = builder.mapModuleOne;",
         "    this.mapModuleTwo = builder.mapModuleTwo;",
-        "    this.mapOfStringAndProviderOfHandlerProvider =",
-        "        MapProviderFactory.<String, Handler>builder(2)",
-        "            .put(\"Admin\",",
-        "                new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
-        "            .put(\"Login\",",
-        "                new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
-        "            .build();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -298,8 +311,25 @@ public void mapBindingsWithStringKey() {
         "    return builder().build();",
         "  }",
         "",
+        "  private void initializeMapOfStringAndProviderOfHandlerProvider() {",
+        "    if (mapOfStringAndProviderOfHandlerProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (mapOfStringAndProviderOfHandlerProvider == null) {",
+        "          this.mapOfStringAndProviderOfHandlerProvider =",
+        "              MapProviderFactory.<String, Handler>builder(2)",
+        "                .put(\"Admin\",",
+        "                    new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
+        "                .put(\"Login\",",
+        "                    new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
+        "                .build();",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
         "  @Override",
         "  public Map<String, Provider<Handler>> dispatcher() {",
+        "    initializeMapOfStringAndProviderOfHandlerProvider();",
         "    return mapOfStringAndProviderOfHandlerProvider.get();",
         "  }",
         "",
@@ -347,7 +377,8 @@ public void mapBindingsWithStringKey() {
             componentFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
-        .and().generatesSources(generatedComponent);
+        .and()
+        .generatesSources(generatedComponent);
   }
 
   @Test
@@ -398,9 +429,9 @@ public void mapBindingsWithNonProviderValue() {
         "    ADMIN,",
         "    LOGIN;",
         "}");
-    JavaFileObject HandlerFile = JavaFileObjects.forSourceLines("test.Handler", 
-        "package test;", 
-        "", 
+    JavaFileObject HandlerFile = JavaFileObjects.forSourceLines("test.Handler",
+        "package test;",
+        "",
         "interface Handler {}");
     JavaFileObject LoginHandlerFile = JavaFileObjects.forSourceLines("test.LoginHandler",
         "package test;",
@@ -436,48 +467,70 @@ public void mapBindingsWithNonProviderValue() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
+        "  private final Object initLock = new Object();",
         "  private final MapModuleOne mapModuleOne;",
         "  private final MapModuleTwo mapModuleTwo;",
-        "  private final Provider<Map<PathEnum, Provider<Handler>>> ",
+        "  private volatile Provider<Map<PathEnum, Provider<Handler>>>",
         "      mapOfPathEnumAndProviderOfHandlerProvider;",
-        "  private final Provider<Map<PathEnum, Handler>> mapOfPathEnumAndHandlerProvider;",
+        "  private volatile Provider<Map<PathEnum, Handler>>",
+        "      mapOfPathEnumAndHandlerProvider;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private Dagger_TestComponent(Builder builder) {  ",
         "    assert builder != null;",
         "    this.mapModuleOne = builder.mapModuleOne;",
         "    this.mapModuleTwo = builder.mapModuleTwo;",
-        "    this.mapOfPathEnumAndProviderOfHandlerProvider = ",
-        "        MapProviderFactory.<PathEnum, Handler>builder(2)",
-        "            .put(PathEnum.ADMIN, ",
-        "                new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
-        "            .put(PathEnum.LOGIN, ",
-        "                new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
-        "            .build();",
-        "    this.mapOfPathEnumAndHandlerProvider = ",
-        "        MapFactory.create(mapOfPathEnumAndProviderOfHandlerProvider);",
         "  }",
         "",
-        "  public static Builder builder() {",
+        "  public static Builder builder() {  ",
         "    return new Builder();",
         "  }",
         "",
-        "  public static TestComponent create() {",
+        "  public static TestComponent create() {  ",
         "    return builder().build();",
         "  }",
         "",
+        "  private void initializeMapOfPathEnumAndProviderOfHandlerProvider() {  ",
+        "    if (mapOfPathEnumAndProviderOfHandlerProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (mapOfPathEnumAndProviderOfHandlerProvider == null) {",
+        "          this.mapOfPathEnumAndProviderOfHandlerProvider =",
+        "              MapProviderFactory.<PathEnum, Handler>builder(2)",
+        "                  .put(test.PathEnum.ADMIN,",
+        "                      new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
+        "                  .put(test.PathEnum.LOGIN,",
+        "                      new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
+        "                  .build();",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeMapOfPathEnumAndHandlerProvider() {  ",
+        "    initializeMapOfPathEnumAndProviderOfHandlerProvider();",
+        "    if (mapOfPathEnumAndHandlerProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (mapOfPathEnumAndHandlerProvider == null) {",
+        "          this.mapOfPathEnumAndHandlerProvider =",
+        "              MapFactory.create(mapOfPathEnumAndProviderOfHandlerProvider);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
         "  @Override",
-        "  public Map<PathEnum, Handler> dispatcher() {",
+        "  public Map<PathEnum, Handler> dispatcher() {  ",
+        "    initializeMapOfPathEnumAndHandlerProvider();",
         "    return mapOfPathEnumAndHandlerProvider.get();",
         "  }",
         "",
         "  public static final class Builder {",
         "    private MapModuleOne mapModuleOne;",
         "    private MapModuleTwo mapModuleTwo;",
-        "",
-        "    private Builder() {",
+        "  ",
+        "    private Builder() {  ",
         "    }",
-        "",
-        "    public TestComponent build() {",
+        "  ",
+        "    public TestComponent build() {  ",
         "      if (mapModuleOne == null) {",
         "        this.mapModuleOne = new MapModuleOne();",
         "      }",
@@ -486,16 +539,16 @@ public void mapBindingsWithNonProviderValue() {
         "      }",
         "      return new Dagger_TestComponent(this);",
         "    }",
-        "",
-        "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
+        "  ",
+        "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {  ",
         "      if (mapModuleOne == null) {",
         "        throw new NullPointerException(\"mapModuleOne\");",
         "      }",
         "      this.mapModuleOne = mapModuleOne;",
         "      return this;",
         "    }",
-        "",
-        "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
+        "  ",
+        "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {  ",
         "      if (mapModuleTwo == null) {",
         "        throw new NullPointerException(\"mapModuleTwo\");",
         "      }",
@@ -503,8 +556,7 @@ public void mapBindingsWithNonProviderValue() {
         "      return this;",
         "    }",
         "  }",
-        "}",
-        "");
+        "}");
     assert_().about(javaSources())
         .that(ImmutableList.of(mapModuleOneFile,
             mapModuleTwoFile,
@@ -515,8 +567,8 @@ public void mapBindingsWithNonProviderValue() {
             AdminHandlerFile,
             componentFile)).
         processedWith(new ComponentProcessor())
-        .compilesWithoutError()
-        .and().generatesSources(generatedComponent);
+            .compilesWithoutError()
+            .and().generatesSources(generatedComponent);
   }
 
   @Test
@@ -558,43 +610,53 @@ public void injectMapWithoutMapBinding() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
+        "  private final Object initLock = new Object();",
         "  private final MapModule mapModule;",
-        "  private final Provider<Map<String, String>> provideAMapProvider;",
+        "  private volatile Provider<Map<String, String>> provideAMapProvider;",
         "",
-        "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private Dagger_TestComponent(Builder builder) {  ",
         "    assert builder != null;",
         "    this.mapModule = builder.mapModule;",
-        "    this.provideAMapProvider = new MapModule$$ProvideAMapFactory(mapModule);",
         "  }",
         "",
-        "  public static Builder builder() {",
+        "  public static Builder builder() {  ",
         "    return new Builder();",
         "  }",
         "",
-        "  public static TestComponent create() {",
+        "  public static TestComponent create() {  ",
         "    return builder().build();",
         "  }",
         "",
+        "  private void initializeProvideAMapProvider() {  ",
+        "    if (provideAMapProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (provideAMapProvider == null) {",
+        "          this.provideAMapProvider = new MapModule$$ProvideAMapFactory(mapModule);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
         "  @Override",
-        "  public Map<String, String> dispatcher() {",
+        "  public Map<String, String> dispatcher() {  ",
+        "    initializeProvideAMapProvider();",
         "    return provideAMapProvider.get();",
         "  }",
         "",
         "  public static final class Builder {",
         "    private MapModule mapModule;",
-        "",
-        "    private Builder() {",
+        "  ",
+        "    private Builder() {  ",
         "    }",
-        "",
-        "    public TestComponent build() { ",
+        "  ",
+        "    public TestComponent build() {  ",
         "      if (mapModule == null) {",
         "        this.mapModule = new MapModule();",
         "      }",
         "      return new Dagger_TestComponent(this);",
         "    }",
-        "",
-        "    public Builder mapModule(MapModule mapModule) {",
+        "  ",
+        "    public Builder mapModule(MapModule mapModule) {  ",
         "      if (mapModule == null) {",
         "        throw new NullPointerException(\"mapModule\");",
         "      }",
@@ -607,4 +669,4 @@ public void injectMapWithoutMapBinding() {
         .processedWith(new ComponentProcessor()).compilesWithoutError()
         .and().generatesSources(generatedComponent);
   }
-}
\ No newline at end of file
+}
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
index 129fb46c5..adb142b85 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -159,22 +159,16 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
+        "  private final Object initLock = new Object();",
         "  private final MapModuleOne mapModuleOne;",
         "  private final MapModuleTwo mapModuleTwo;",
-        "  private final Provider<Map<PathKey, Provider<Handler>>> ",
+        "  private volatile Provider<Map<PathKey, Provider<Handler>>>",
         "      mapOfPathKeyAndProviderOfHandlerProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.mapModuleOne = builder.mapModuleOne;",
         "    this.mapModuleTwo = builder.mapModuleTwo;",
-        "    this.mapOfPathKeyAndProviderOfHandlerProvider = ",
-        "        MapProviderFactory.<PathKey, Handler>builder(2)",
-        "            .put(PathKeyCreator.create(PathEnum.ADMIN, \"AdminPath\"),",
-        "                 new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
-        "            .put(PathKeyCreator.create(PathEnum.LOGIN, \"LoginPath\"),",
-        "                 new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
-        "            .build();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -185,8 +179,25 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "    return builder().build();",
         "  }",
         "",
+        "  private void initializeMapOfPathKeyAndProviderOfHandlerProvider() {",
+        "    if (mapOfPathKeyAndProviderOfHandlerProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (mapOfPathKeyAndProviderOfHandlerProvider == null) {",
+        "          this.mapOfPathKeyAndProviderOfHandlerProvider =",
+        "              MapProviderFactory.<PathKey, Handler>builder(2)",
+        "                  .put(PathKeyCreator.create(PathEnum.ADMIN, \"AdminPath\"),",
+        "                      new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
+        "                  .put(PathKeyCreator.create(PathEnum.LOGIN, \"LoginPath\"),",
+        "                      new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
+        "                  .build();",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
         "  @Override",
         "  public Map<PathKey, Provider<Handler>> dispatcher() {",
+        "    initializeMapOfPathKeyAndProviderOfHandlerProvider();",
         "    return mapOfPathKeyAndProviderOfHandlerProvider.get();",
         "  }",
         "",
@@ -223,8 +234,7 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "      return this;",
         "    }",
         "  }",
-        "}",
-        "");
+        "}");
     assert_().about(javaSources())
         .that(ImmutableList.of(
             mapModuleOneFile,
@@ -328,22 +338,16 @@ public void mapKeyComponentFileWithDefaultField() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
+        "  private final Object initLock = new Object();",
         "  private final MapModuleOne mapModuleOne;",
         "  private final MapModuleTwo mapModuleTwo;",
-        "  private final Provider<Map<PathKey, Provider<Handler>>> ",
+        "  private volatile Provider<Map<PathKey, Provider<Handler>>>",
         "      mapOfPathKeyAndProviderOfHandlerProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
         "    this.mapModuleOne = builder.mapModuleOne;",
         "    this.mapModuleTwo = builder.mapModuleTwo;",
-        "    this.mapOfPathKeyAndProviderOfHandlerProvider = ",
-        "        MapProviderFactory.<PathKey, Handler>builder(2)",
-        "            .put(PathKeyCreator.create(PathEnum.ADMIN, \"DefaultPath\"),",
-        "                 new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
-        "            .put(PathKeyCreator.create(PathEnum.LOGIN, \"LoginPath\"),",
-        "                 new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
-        "            .build();",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -354,8 +358,25 @@ public void mapKeyComponentFileWithDefaultField() {
         "    return builder().build();",
         "  }",
         "",
+        "  private void initializeMapOfPathKeyAndProviderOfHandlerProvider() {",
+        "    if (mapOfPathKeyAndProviderOfHandlerProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (mapOfPathKeyAndProviderOfHandlerProvider == null) {",
+        "          this.mapOfPathKeyAndProviderOfHandlerProvider =",
+        "              MapProviderFactory.<PathKey, Handler>builder(2)",
+        "                  .put(PathKeyCreator.create(PathEnum.ADMIN, \"DefaultPath\"),",
+        "                      new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
+        "                  .put(PathKeyCreator.create(PathEnum.LOGIN, \"LoginPath\"),",
+        "                      new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
+        "                  .build();",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
         "  @Override",
         "  public Map<PathKey, Provider<Handler>> dispatcher() {",
+        "    initializeMapOfPathKeyAndProviderOfHandlerProvider();",
         "    return mapOfPathKeyAndProviderOfHandlerProvider.get();",
         "  }",
         "",
@@ -392,8 +413,7 @@ public void mapKeyComponentFileWithDefaultField() {
         "      return this;",
         "    }",
         "  }",
-        "}",
-        "");
+        "}");
     assert_().about(javaSources())
         .that(ImmutableList.of(
             mapModuleOneFile,
diff --git a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
index 178cb1c72..246599cb2 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
@@ -48,15 +48,13 @@ public void parentClass_noInjectedMembers() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final MembersInjector<Parent> parentMembersInjector;",
-        "  private final MembersInjector<Child> childMembersInjector;",
-        "  private final Provider<Child> childProvider;",
+        "  private final Object initLock = new Object();",
+        "  private volatile MembersInjector<Parent> parentMembersInjector;",
+        "  private volatile MembersInjector<Child> childMembersInjector;",
+        "  private volatile Provider<Child> childProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.parentMembersInjector = MembersInjectors.noOp();",
-        "    this.childMembersInjector = MembersInjectors.delegatingTo(parentMembersInjector);",
-        "    this.childProvider = new Child$$Factory(childMembersInjector);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -67,12 +65,48 @@ public void parentClass_noInjectedMembers() {
         "    return builder().build();",
         "  }",
         "",
-        "  @Override public Child child() {",
+        "  private void initializeParentMembersInjector() {",
+        "    if (parentMembersInjector == null) {",
+        "      synchronized (initLock) {",
+        "        if (parentMembersInjector == null) {",
+        "          this.parentMembersInjector = MembersInjectors.noOp();",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeChildMembersInjector() {",
+        "    initializeParentMembersInjector();",
+        "    if (childMembersInjector == null) {",
+        "      synchronized (initLock) {",
+        "        if (childMembersInjector == null) {",
+        "          this.childMembersInjector =",
+        "            MembersInjectors.delegatingTo(parentMembersInjector);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeChildProvider() {",
+        "    initializeChildMembersInjector();",
+        "    if (childProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (childProvider == null) {",
+        "          this.childProvider = new Child$$Factory(childMembersInjector);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  @Override",
+        "  public Child child() {",
+        "    initializeChildProvider();",
         "    return childProvider.get();",
         "  }",
         "",
         "  public static final class Builder {",
-        "    private Builder() {}",
+        "    private Builder() {",
+        "    }",
         "",
         "    public TestComponent build() {",
         "      return new Dagger_TestComponent(this);",
@@ -133,17 +167,14 @@ public void parentClass_injectedMembersInSupertype() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Provider<Dep> depProvider;",
-        "  private final MembersInjector<Parent> parentMembersInjector;",
-        "  private final MembersInjector<Child> childMembersInjector;",
-        "  private final Provider<Child> childProvider;",
+        "  private final Object initLock = new Object();",
+        "  private volatile Provider<Dep> depProvider;",
+        "  private volatile MembersInjector<Parent> parentMembersInjector;",
+        "  private volatile MembersInjector<Child> childMembersInjector;",
+        "  private volatile Provider<Child> childProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.depProvider = new Dep$$Factory();",
-        "    this.parentMembersInjector = new Parent$$MembersInjector(depProvider);",
-        "    this.childMembersInjector = MembersInjectors.delegatingTo(parentMembersInjector);",
-        "    this.childProvider = new Child$$Factory(childMembersInjector);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -154,12 +185,59 @@ public void parentClass_injectedMembersInSupertype() {
         "    return builder().build();",
         "  }",
         "",
-        "  @Override public Child child() {",
+        "  private void initializeDepProvider() {",
+        "    if (depProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (depProvider == null) {",
+        "          this.depProvider = new Dep$$Factory();",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeParentMembersInjector() {",
+        "    initializeDepProvider();",
+        "    if (parentMembersInjector == null) {",
+        "      synchronized (initLock) {",
+        "        if (parentMembersInjector == null) {",
+        "          this.parentMembersInjector = new Parent$$MembersInjector(depProvider);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeChildMembersInjector() {",
+        "    initializeParentMembersInjector();",
+        "    if (childMembersInjector == null) {",
+        "      synchronized (initLock) {",
+        "        if (childMembersInjector == null) {",
+        "          this.childMembersInjector =",
+        "              MembersInjectors.delegatingTo(parentMembersInjector);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializeChildProvider() {",
+        "    initializeChildMembersInjector();",
+        "    if (childProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (childProvider == null) {",
+        "          this.childProvider = new Child$$Factory(childMembersInjector);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  @Override",
+        "  public Child child() {",
+        "    initializeChildProvider();",
         "    return childProvider.get();",
         "  }",
         "",
         "  public static final class Builder {",
-        "    private Builder() {}",
+        "    private Builder() {",
+        "    }",
         "",
         "    public TestComponent build() {",
         "      return new Dagger_TestComponent(this);",
diff --git a/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java b/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
index 65915a093..46eb38ef0 100644
--- a/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
@@ -55,15 +55,13 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
+        "  private final Object initLock = new Object();",
         "  private final Dagger_TestComponent__PackageProxy foreign_Proxy =",
         "      new Dagger_TestComponent__PackageProxy();",
-        "  private final Provider<PublicClass> publicClassProvider;",
+        "  private volatile Provider<PublicClass> publicClassProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.foreign_Proxy.nonPublicClassProvider = new NonPublicClass$$Factory();",
-        "    this.publicClassProvider =",
-        "        new PublicClass$$Factory(foreign_Proxy.nonPublicClassProvider);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -74,12 +72,37 @@
         "    return builder().build();",
         "  }",
         "",
-        "  @Override public PublicClass publicClass() {",
+        "  private void initializeForeign_Proxy_nonPublicClassProvider() {",
+        "    if (foreign_Proxy.nonPublicClassProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (foreign_Proxy.nonPublicClassProvider == null) {",
+        "          this.foreign_Proxy.nonPublicClassProvider = new NonPublicClass$$Factory();",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  private void initializePublicClassProvider() {",
+        "    initializeForeign_Proxy_nonPublicClassProvider();",
+        "    if (publicClassProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (publicClassProvider == null) {",
+        "          this.publicClassProvider =",
+        "              new PublicClass$$Factory(foreign_Proxy.nonPublicClassProvider);",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  @Override",
+        "  public PublicClass publicClass() {",
+        "    initializePublicClassProvider();",
         "    return publicClassProvider.get();",
         "  }",
         "",
         "  public static final class Builder {",
-        "    private Builder() {}",
+        "    private Builder() {",
+        "    }",
         "",
         "    public TestComponent build() {",
         "      return new Dagger_TestComponent(this);",
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
index d0233b911..e9e5ad32b 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
@@ -76,16 +76,14 @@
       "",
       "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
       "public final class Dagger_PrimitiveComponent implements PrimitiveComponent {",
+      "  private final Object initLock = new Object();",
       "  private final PrimitiveModule primitiveModule;",
-      "  private final Provider<Integer> primitiveIntProvider;",
-      "  private final Provider<PrimitiveInjectable> primitiveInjectableProvider;",
+      "  private volatile Provider<Integer> primitiveIntProvider;",
+      "  private volatile Provider<PrimitiveInjectable> primitiveInjectableProvider;",
       "",
       "  private Dagger_PrimitiveComponent(Builder builder) {",
       "    assert builder != null;",
       "    this.primitiveModule = builder.primitiveModule;",
-      "    this.primitiveIntProvider = new PrimitiveModule$$PrimitiveIntFactory(primitiveModule);",
-      "    this.primitiveInjectableProvider =",
-      "        new PrimitiveInjectable$$Factory(primitiveIntProvider);",
       "  }",
       "",
       "  public static Builder builder() {",
@@ -96,13 +94,38 @@
       "    return builder().build();",
       "  }",
       "",
+      "  private void initializePrimitiveIntProvider() {",
+      "    if (primitiveIntProvider == null) {",
+      "      synchronized (initLock) {",
+      "        if (primitiveIntProvider == null) {",
+      "          this.primitiveIntProvider =",
+      "              new PrimitiveModule$$PrimitiveIntFactory(primitiveModule);",
+      "        }",
+      "      }",
+      "    }",
+      "  }",
+      "",
+      "  private void initializePrimitiveInjectableProvider() {",
+      "    initializePrimitiveIntProvider();",
+      "    if (primitiveInjectableProvider == null) {",
+      "      synchronized (initLock) {",
+      "        if (primitiveInjectableProvider == null) {",
+      "          this.primitiveInjectableProvider =",
+      "              new PrimitiveInjectable$$Factory(primitiveIntProvider);",
+      "        }",
+      "      }",
+      "    }",
+      "  }",
+      "",
       "  @Override",
       "  public int primitiveInt() {",
+      "    initializePrimitiveIntProvider();",
       "    return primitiveIntProvider.get();",
       "  }",
       "",
       "  @Override",
       "  public PrimitiveInjectable primitiveInjectable() {",
+      "    initializePrimitiveInjectableProvider();",
       "    return primitiveInjectableProvider.get();",
       "  }",
       "",
