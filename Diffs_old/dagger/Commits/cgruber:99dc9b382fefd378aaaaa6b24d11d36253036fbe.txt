diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
index 8851e4ff7..d8a20e774 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -72,10 +72,17 @@
   abstract TypeElement componentDefinitionType();
 
   /**
-   *  The set of component dependencies listed in {@link Component#dependencies}.
+   * The set of component dependencies listed in {@link Component#dependencies}.
    */
   abstract ImmutableSet<TypeElement> dependencies();
 
+  /**
+   * An index of the type to which this component holds a reference (the type listed in
+   * {@link Component#dependencies} as opposed to the enclosing type) for each method from a
+   * component dependency that can be used for binding.
+   */
+  abstract ImmutableMap<ExecutableElement, TypeElement> dependencyMethodIndex();
+
   /**
    * The list of {@link DependencyRequest} instances whose sources are methods on the component
    * definition type.  These are the user-requested dependencies.
@@ -154,14 +161,16 @@ ComponentDescriptor create(TypeElement componentDefinitionType)
       ProvisionBinding componentBinding =
           provisionBindingFactory.forComponent(componentDefinitionType);
 
-      ImmutableSetMultimap.Builder<Key, ProvisionBinding> bindingIndexBuilder =
+      ImmutableSetMultimap.Builder<Key, ProvisionBinding> explicitBindingIndexBuilder =
           new ImmutableSetMultimap.Builder<Key, ProvisionBinding>()
               .put(componentBinding.providedKey(), componentBinding);
+      ImmutableMap.Builder<ExecutableElement, TypeElement> dependencyMethodIndex =
+          ImmutableMap.builder();
 
       for (TypeElement componentDependency : componentDependencyTypes) {
         ProvisionBinding componentDependencyBinding =
             provisionBindingFactory.forComponent(componentDependency);
-        bindingIndexBuilder.put(
+        explicitBindingIndexBuilder.put(
             componentDependencyBinding.providedKey(), componentDependencyBinding);
         List<ExecutableElement> dependencyMethods =
             ElementFilter.methodsIn(elements.getAllMembers(componentDependency));
@@ -169,7 +178,9 @@ ComponentDescriptor create(TypeElement componentDefinitionType)
           if (isComponentProvisionMethod(dependencyMethod)) {
             ProvisionBinding componentMethodBinding =
                 provisionBindingFactory.forComponentMethod(dependencyMethod);
-            bindingIndexBuilder.put(componentMethodBinding.providedKey(), componentMethodBinding);
+            explicitBindingIndexBuilder
+                .put(componentMethodBinding.providedKey(), componentMethodBinding);
+            dependencyMethodIndex.put(dependencyMethod, componentDependency);
           }
         }
       }
@@ -182,12 +193,14 @@ ComponentDescriptor create(TypeElement componentDefinitionType)
           if (isAnnotationPresent(moduleMethod, Provides.class)) {
             ProvisionBinding providesMethodBinding =
                 provisionBindingFactory.forProvidesMethod(moduleMethod);
-            bindingIndexBuilder.put(providesMethodBinding.providedKey(), providesMethodBinding);
+            explicitBindingIndexBuilder
+                .put(providesMethodBinding.providedKey(), providesMethodBinding);
           }
         }
       }
 
-      ImmutableSetMultimap<Key, ProvisionBinding> explicitBindings = bindingIndexBuilder.build();
+      ImmutableSetMultimap<Key, ProvisionBinding> explicitBindings =
+          explicitBindingIndexBuilder.build();
 
       Set<MethodSignature> interfaceMethods = Sets.newHashSet();
 
@@ -250,6 +263,7 @@ ComponentDescriptor create(TypeElement componentDefinitionType)
       return new AutoValue_ComponentDescriptor(
           componentDefinitionType,
           componentDependencyTypes,
+          dependencyMethodIndex.build(),
           interfaceRequests,
           transitiveModules,
           resolvedProvisionBindings.build(),
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 6d11411f1..7d1be6e76 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -334,8 +334,9 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
           case SET_BINDING:
             ImmutableList.Builder<Snippet> setFactoryParameters = ImmutableList.builder();
             for (ProvisionBinding binding : bindings) {
-              setFactoryParameters.add(initializeFactoryForBinding(
-                  binding, componentContributionFields, memberSelectSnippets));
+              setFactoryParameters.add(initializeFactoryForBinding(binding,
+                  input.dependencyMethodIndex(), componentContributionFields,
+                  memberSelectSnippets));
             }
             Snippet initializeSetSnippet = Snippet.format("%s.create(%s)",
                 ClassName.fromClass(SetFactory.class),
@@ -346,7 +347,8 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
           case MAP_BINDING:
             if (!bindings.isEmpty()) {
               Snippet initializeMapSnippet =
-                  initializeMapBinding(componentContributionFields, memberSelectSnippets, bindings);
+                  initializeMapBinding(componentContributionFields, input.dependencyMethodIndex(),
+                      memberSelectSnippets, bindings);
               initializeMethod.body().addSnippet(DOUBLE_CHECK_FORMAT,
                   memberSelectSnippet, initializeMapSnippet, initLock.name());
 
@@ -356,8 +358,8 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
             ProvisionBinding binding = Iterables.getOnlyElement(bindings);
             initializeMethod.body().addSnippet(DOUBLE_CHECK_FORMAT,
                 memberSelectSnippet,
-                initializeFactoryForBinding(
-                    binding, componentContributionFields, memberSelectSnippets),
+                initializeFactoryForBinding(binding, input.dependencyMethodIndex(),
+                    componentContributionFields, memberSelectSnippets),
                 initLock.name());
             break;
           default:
@@ -431,6 +433,7 @@ private void initializeDependenciesForBinding(
   }
 
   private Snippet initializeFactoryForBinding(ProvisionBinding binding,
+      ImmutableMap<ExecutableElement, TypeElement> dependencyMethodIndex,
       Map<TypeElement, FieldWriter> contributionFields,
       ImmutableMap<FrameworkKey, Snippet> memberSelectSnippets) {
     if (binding.bindingKind().equals(COMPONENT)) {
@@ -446,7 +449,7 @@ private Snippet initializeFactoryForBinding(ProvisionBinding binding,
           "}"),
           ClassName.fromClass(Factory.class),
           TypeNames.forTypeMirror(binding.providedKey().type()),
-          contributionFields.get(binding.bindingTypeElement()).name(),
+          contributionFields.get(dependencyMethodIndex.get(binding.bindingElement())).name(),
           binding.bindingElement().getSimpleName().toString());
     } else {
       List<Snippet> parameters = Lists.newArrayListWithCapacity(binding.dependencies().size() + 1);
@@ -509,6 +512,7 @@ private static Snippet initializeMembersInjectorForBinding(
 
   private Snippet initializeMapBinding(
       Map<TypeElement, FieldWriter> contributionFields,
+      ImmutableMap<ExecutableElement, TypeElement> dependencyMethodIndex,
       ImmutableMap<FrameworkKey, Snippet> memberSelectSnippets,
       Set<ProvisionBinding> bindings) {
     Iterator<ProvisionBinding> iterator = bindings.iterator();
@@ -537,11 +541,11 @@ private Snippet initializeMapBinding(
       argsBuilder.add(bindings.size());
 
       writeEntry(argsBuilder, firstBinding, initializeFactoryForBinding(
-          firstBinding, contributionFields, memberSelectSnippets));
+          firstBinding, dependencyMethodIndex, contributionFields, memberSelectSnippets));
       while (iterator.hasNext()) {
         ProvisionBinding binding = iterator.next();
         writeEntry(argsBuilder, binding, initializeFactoryForBinding(
-            binding, contributionFields, memberSelectSnippets));
+            binding, dependencyMethodIndex, contributionFields, memberSelectSnippets));
       }
 
       return Snippet.format(snippetFormatBuilder.toString(),
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index 9f98d4711..31b3c361a 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -1507,7 +1507,7 @@
         .and().generatesSources(generatedComponent);
   }
 
-  @Test public void simpleComponent_redundantCompoentMethod() {
+  @Test public void simpleComponent_redundantComponentMethod() {
     JavaFileObject injectableTypeFile = JavaFileObjects.forSourceLines("test.SomeInjectableType",
         "package test;",
         "",
@@ -1606,4 +1606,104 @@
         .compilesWithoutError()
         .and().generatesSources(generatedComponent);
   }
+
+  @Test public void simpleComponent_inheritedComponentMethodDep() {
+    JavaFileObject injectableTypeFile = JavaFileObjects.forSourceLines("test.SomeInjectableType",
+        "package test;",
+        "",
+        "import javax.inject.Inject;",
+        "",
+        "final class SomeInjectableType {",
+        "  @Inject SomeInjectableType() {}",
+        "}");
+    JavaFileObject componentSupertype = JavaFileObjects.forSourceLines("test.Supertype",
+        "package test;",
+        "",
+        "import dagger.Component;",
+        "import dagger.Lazy;",
+        "",
+        "import javax.inject.Provider;",
+        "",
+        "@Component",
+        "interface Supertype {",
+        "  SomeInjectableType someInjectableType();",
+        "}");
+    JavaFileObject depComponentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
+        "package test;",
+        "",
+        "import dagger.Component;",
+        "import dagger.Lazy;",
+        "",
+        "import javax.inject.Provider;",
+        "",
+        "@Component",
+        "interface SimpleComponent extends Supertype {",
+        "}");
+    JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.ComponentWithDep",
+        "package test;",
+        "",
+        "import dagger.Component;",
+        "import dagger.Lazy;",
+        "",
+        "import javax.inject.Provider;",
+        "",
+        "@Component(dependencies = SimpleComponent.class)",
+        "interface ComponentWithDep {",
+        "  SomeInjectableType someInjectableType();",
+        "}");
+    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
+        "test.Dagger_SimpleComponent",
+        "package test;",
+        "",
+        "import javax.annotation.Generated;",
+        "import javax.inject.Provider;",
+        "",
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        "public final class Dagger_SimpleComponent implements SimpleComponent {",
+        "  private final Object initLock = new Object();",
+        "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;",
+        "",
+        "  private Dagger_SimpleComponent(Builder builder) {  ",
+        "    assert builder != null;",
+        "  }",
+        "",
+        "  public static Builder builder() {  ",
+        "    return new Builder();",
+        "  }",
+        "",
+        "  public static SimpleComponent create() {  ",
+        "    return builder().build();",
+        "  }",
+        "",
+        "  private void initializeSomeInjectableTypeProvider() {  ",
+        "    if (someInjectableTypeProvider == null) {",
+        "      synchronized (initLock) {",
+        "        if (someInjectableTypeProvider == null) {",
+        "          this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
+        "        }",
+        "      }",
+        "    }",
+        "  }",
+        "",
+        "  @Override",
+        "  public SomeInjectableType someInjectableType() {  ",
+        "    initializeSomeInjectableTypeProvider();",
+        "    return someInjectableTypeProvider.get();",
+        "  }",
+        "",
+        "  public static final class Builder {",
+        "    private Builder() {  ",
+        "    }",
+        "  ",
+        "    public SimpleComponent build() {  ",
+        "      return new Dagger_SimpleComponent(this);",
+        "    }",
+        "  }",
+        "}");
+    assert_().about(javaSources()).that(ImmutableList.of(
+            injectableTypeFile, componentSupertype, depComponentFile, componentFile))
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError()
+        .and().generatesSources(generatedComponent);
+  }
 }
