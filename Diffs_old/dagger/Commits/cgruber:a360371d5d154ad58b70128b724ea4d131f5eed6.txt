diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingComponent.java b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingComponent.java
index 8decb55fb..a9c9360bf 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingComponent.java
+++ b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingComponent.java
@@ -26,7 +26,9 @@
 import producerstest.multibindings.Qualifiers.PossiblyThrowingMap;
 import producerstest.multibindings.Qualifiers.PossiblyThrowingSet;
 
-@ProductionComponent(modules = {ExecutorModule.class, MultibindingProducerModule.class})
+@ProductionComponent(
+  modules = {ExecutorModule.class, MultibindingProducerModule.class, MultibindingModule.class}
+)
 interface MultibindingComponent {
   ListenableFuture<Set<String>> strs();
   ListenableFuture<Integer> strCount();
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingModule.java b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingModule.java
new file mode 100644
index 000000000..5c5834f54
--- /dev/null
+++ b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingModule.java
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2016 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package producerstest.multibindings;
+
+import com.google.common.collect.ImmutableSet;
+import dagger.Module;
+import dagger.Provides;
+import dagger.multibindings.ElementsIntoSet;
+import dagger.multibindings.IntKey;
+import dagger.multibindings.IntoMap;
+import dagger.multibindings.IntoSet;
+import java.util.Set;
+
+@Module
+final class MultibindingModule {
+  @Provides
+  @IntoSet
+  static String providedStr() {
+    return "providedStr";
+  }
+
+  @Provides
+  @ElementsIntoSet
+  static Set<String> providedStrs() {
+    return ImmutableSet.of("providedStr1", "providedStr2");
+  }
+
+  @Provides
+  @IntoMap
+  @IntKey(3)
+  static String providedValueFor3() {
+    return "provided three";
+  }
+}
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/multibindings/MultibindingTest.java b/compiler/src/it/producers-functional-tests/src/test/java/producerstest/multibindings/MultibindingTest.java
index 03aae67bb..3d9c4677c 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/multibindings/MultibindingTest.java
+++ b/compiler/src/it/producers-functional-tests/src/test/java/producerstest/multibindings/MultibindingTest.java
@@ -36,8 +36,17 @@
   public void setBinding() throws Exception {
     MultibindingComponent multibindingComponent = DaggerMultibindingComponent.create();
     assertThat(multibindingComponent.strs().get())
-        .containsExactly("foo", "foo1", "foo2", "bar", "bar1", "bar2");
-    assertThat(multibindingComponent.strCount().get()).isEqualTo(6);
+        .containsExactly(
+            "foo",
+            "foo1",
+            "foo2",
+            "bar",
+            "bar1",
+            "bar2",
+            "providedStr",
+            "providedStr1",
+            "providedStr2");
+    assertThat(multibindingComponent.strCount().get()).isEqualTo(9);
   }
 
   @Test
@@ -50,7 +59,10 @@ public void setBindingOfProduced() throws Exception {
             Produced.successful("foo2"),
             Produced.successful("bar"),
             Produced.successful("bar1"),
-            Produced.successful("bar2"));
+            Produced.successful("bar2"),
+            Produced.successful("providedStr"),
+            Produced.successful("providedStr1"),
+            Produced.successful("providedStr2"));
   }
 
   @Test
@@ -75,31 +87,36 @@ public void setBindingOfProducedWithFailures() throws Exception {
   public void mapBinding() throws Exception {
     MultibindingComponent multibindingComponent = DaggerMultibindingComponent.create();
     Map<Integer, String> map = multibindingComponent.map().get();
-    assertThat(map).hasSize(2);
+    assertThat(map).hasSize(3);
     assertThat(map).containsEntry(15, "fifteen");
     assertThat(map).containsEntry(42, "forty two");
+    assertThat(map).containsEntry(3, "provided three");
   }
 
   @Test
   public void mapOfProducerBinding() throws Exception {
     MultibindingComponent multibindingComponent = DaggerMultibindingComponent.create();
     Map<Integer, Producer<String>> map = multibindingComponent.mapOfProducer().get();
-    assertThat(map).hasSize(2);
+    assertThat(map).hasSize(3);
     assertThat(map).containsKey(15);
     assertThat(map.get(15).get().get()).isEqualTo("fifteen");
     assertThat(map).containsKey(42);
     assertThat(map.get(42).get().get()).isEqualTo("forty two");
+    assertThat(map).containsKey(3);
+    assertThat(map.get(3).get().get()).isEqualTo("provided three");
   }
 
   @Test
   public void mapOfProducedBinding() throws Exception {
     MultibindingComponent multibindingComponent = DaggerMultibindingComponent.create();
     Map<Integer, Produced<String>> map = multibindingComponent.mapOfProduced().get();
-    assertThat(map).hasSize(2);
+    assertThat(map).hasSize(3);
     assertThat(map).containsKey(15);
     assertThat(map.get(15).get()).isEqualTo("fifteen");
     assertThat(map).containsKey(42);
     assertThat(map.get(42).get()).isEqualTo("forty two");
+    assertThat(map).containsKey(3);
+    assertThat(map.get(3).get()).isEqualTo("provided three");
   }
 
   @Test
diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index 6d1437eda..031841ba1 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -1184,14 +1184,18 @@ private CodeBlock initializeFactoryForMapMultibinding(ContributionBinding bindin
       BindingKey bindingKey = frameworkDependency.bindingKey();
       ContributionBinding contributionBinding =
           graph.resolvedBindings().get(bindingKey).contributionBinding();
+      CodeBlock value =
+          potentiallyCast(
+              useRawTypes,
+              frameworkDependency.frameworkClass(),
+              getDependencyArgument(frameworkDependency));
+      if (binding.bindingType().frameworkClass().equals(Producer.class)
+          && frameworkDependency.frameworkClass().equals(Provider.class)) {
+        value = CodeBlock.of("$T.producerFromProvider($L)", PRODUCERS, value);
+      }
       codeBlocks.add(
           CodeBlock.of(
-              ".put($L, $L)",
-              getMapKeyExpression(contributionBinding.mapKey().get()),
-              potentiallyCast(
-                  useRawTypes,
-                  frameworkDependency.frameworkClass(),
-                  getDependencyArgument(frameworkDependency))));
+              ".put($L, $L)", getMapKeyExpression(contributionBinding.mapKey().get()), value));
     }
     codeBlocks.add(CodeBlock.of(".build()"));
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index e7140a247..45ebf760e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -435,6 +435,7 @@ ResolvedBindings lookUpBindings(DependencyRequest request) {
         return ImmutableSet.<Key>builder()
             .add(key)
             .addAll(keyFactory.implicitSetKeyFromProduced(key).asSet())
+            .addAll(keyFactory.implicitProviderMapKeyFromProducer(key).asSet())
             .build();
       }
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/Key.java b/compiler/src/main/java/dagger/internal/codegen/Key.java
index 8be35bdd5..7e39125f1 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Key.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Key.java
@@ -545,5 +545,13 @@ Key forProductionImplementationExecutor() {
       }
       return Optional.absent();
     }
+
+    /**
+     * Optionally extract a {@link Key} for a {@code Map<K, Provider<V>>} if the given key is for
+     * {@code Map<K, Producer<V>>}.
+     */
+    Optional<Key> implicitProviderMapKeyFromProducer(Key possibleMapOfProducerKey) {
+      return maybeRewrapMapValue(possibleMapOfProducerKey, Producer.class, Provider.class);
+    }
   }
 }
