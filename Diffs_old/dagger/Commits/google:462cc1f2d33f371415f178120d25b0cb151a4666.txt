diff --git a/compiler/src/it/functional-tests/src/main/java/test/binds/SimpleBindingModule.java b/compiler/src/it/functional-tests/src/main/java/test/binds/SimpleBindingModule.java
index 34c460763..ab0288e64 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/binds/SimpleBindingModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/binds/SimpleBindingModule.java
@@ -124,6 +124,24 @@ static Object provide789ForMap() {
     return "789-string";
   }
 
+  @Binds
+  @SomeQualifier
+  abstract int primitiveToPrimitive(int intValue);
+
+  @Binds
+  @IntoSet
+  abstract int intValueIntoSet(int intValue);
+
+  @Binds
+  @IntoMap
+  @IntKey(10)
+  abstract int intValueIntoMap(int intValue);
+
+  @Provides
+  static int intValue() {
+    return 100;
+  }
+
   @Binds
   @IntoMap
   @IntKey(123)
diff --git a/compiler/src/it/functional-tests/src/main/java/test/binds/TestComponent.java b/compiler/src/it/functional-tests/src/main/java/test/binds/TestComponent.java
index bada4b164..9379dff12 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/binds/TestComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/binds/TestComponent.java
@@ -51,4 +51,10 @@
   Map<Integer, Provider<Object>> integerProviderOfObjectMap();
 
   @SomeQualifier Map<Integer, Object> qualifiedIntegerObjectMap();
+
+  @SomeQualifier int uniquePrimitive();
+
+  Set<Integer> primitiveSet();
+
+  Map<Integer, Integer> primitiveValueMap();
 }
diff --git a/compiler/src/it/functional-tests/src/test/java/test/binds/BindsTest.java b/compiler/src/it/functional-tests/src/test/java/test/binds/BindsTest.java
index 2341e1ade..5835b361e 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/binds/BindsTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/binds/BindsTest.java
@@ -63,5 +63,8 @@ public void multibindings() {
     assertThat(component.integerProviderOfObjectMap().get(789).get()).isEqualTo("789-string");
 
     assertThat(component.qualifiedIntegerObjectMap()).hasSize(1);
+
+    assertThat(component.primitiveSet()).containsExactly(100);
+    assertThat(component.primitiveValueMap()).containsExactly(10, 100);
   }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindsMethodValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindsMethodValidator.java
index 3108e8a25..780963820 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindsMethodValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindsMethodValidator.java
@@ -73,7 +73,7 @@ private void checkParameters(ValidationReport.Builder<ExecutableElement> builder
     List<? extends VariableElement> parameters = method.getParameters();
     if (parameters.size() == 1) {
       VariableElement parameter = getOnlyElement(parameters);
-      TypeMirror leftHandSide = method.getReturnType();
+      TypeMirror leftHandSide = boxIfNecessary(method.getReturnType());
       TypeMirror rightHandSide = parameter.asType();
       ContributionType contributionType = ContributionType.fromBindingMethod(method);
       switch (contributionType) {
@@ -152,4 +152,11 @@ private TypeElement mapElement() {
   private TypeMirror unboundedWildcard() {
     return types.getWildcardType(null, null);
   }
+
+  private TypeMirror boxIfNecessary(TypeMirror maybePrimitive) {
+    if (maybePrimitive.getKind().isPrimitive()) {
+      return types.boxedClass(MoreTypes.asPrimitiveType(maybePrimitive)).asType();
+    }
+    return maybePrimitive;
+  }
 }
