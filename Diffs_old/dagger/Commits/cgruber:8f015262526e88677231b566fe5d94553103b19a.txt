diff --git a/java/dagger/android/AndroidInjection.java b/java/dagger/android/AndroidInjection.java
index 102a42910..2f4fb4ca4 100644
--- a/java/dagger/android/AndroidInjection.java
+++ b/java/dagger/android/AndroidInjection.java
@@ -1,4 +1,4 @@
-/*
+  /*
  * Copyright (C) 2017 The Dagger Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -39,79 +39,99 @@
    * otherwise throws an {@link IllegalArgumentException}.
    *
    * @throws RuntimeException if the {@link Application} doesn't implement {@link
-   *     HasActivityInjector}.
+   *     HasAndroidInjector} or {@link HasActivityInjector}.
    */
   public static void inject(Activity activity) {
     checkNotNull(activity, "activity");
     Application application = activity.getApplication();
-    if (!(application instanceof HasActivityInjector)) {
+    AndroidInjector<? super Activity> injector;
+    if (application instanceof HasAndroidInjector) {
+      injector = ((HasAndroidInjector) application).androidInjector();
+      checkNotNull(injector, "%s.androidInjector() returned null", application.getClass());
+    } else if (application instanceof HasActivityInjector) {
+      injector = ((HasActivityInjector) application).activityInjector();
+      checkNotNull(injector, "%s.activityInjector() returned null", application.getClass());
+    } else {
       throw new RuntimeException(
           String.format(
-              "%s does not implement %s",
+              "%s does not implement %s or %s",
               application.getClass().getCanonicalName(),
+              HasAndroidInjector.class.getCanonicalName(),
               HasActivityInjector.class.getCanonicalName()));
     }
 
-    AndroidInjector<Activity> activityInjector =
-        ((HasActivityInjector) application).activityInjector();
-    checkNotNull(activityInjector, "%s.activityInjector() returned null", application.getClass());
-
-    activityInjector.inject(activity);
+    injector.inject(activity);
   }
 
   /**
    * Injects {@code fragment} if an associated {@link AndroidInjector} implementation can be found,
    * otherwise throws an {@link IllegalArgumentException}.
    *
-   * <p>Uses the following algorithm to find the appropriate {@code AndroidInjector<Fragment>} to
-   * use to inject {@code fragment}:
+   * <p>Uses the following algorithm to find the appropriate {@link AndroidInjector} to use to
+   * inject {@code fragment}:
    *
    * <ol>
-   *   <li>Walks the parent-fragment hierarchy to find the a fragment that implements {@link
-   *       HasFragmentInjector}, and if none do
+   *   <li>Walks the parent-fragment hierarchy to find a fragment that implements {@link
+   *       HasAndroidInjector} or {@link HasFragmentInjector}, and if none do
    *   <li>Uses the {@code fragment}'s {@link Fragment#getActivity() activity} if it implements
-   *       {@link HasFragmentInjector}, and if not
-   *   <li>Uses the {@link android.app.Application} if it implements {@link HasFragmentInjector}.
+   *       {@link HasAndroidInjector} or {@link HasFragmentInjector}, and if not
+   *   <li>Uses the {@link android.app.Application} if it implements {@link HasAndroidInjector}
+   *       {@link HasFragmentInjector}.
    * </ol>
    *
-   * If none of them implement {@link HasFragmentInjector}, a {@link IllegalArgumentException} is
-   * thrown.
+   * If none of them implement {@link HasAndroidInjector} or {@link HasFragmentInjector}, a {@link
+   * IllegalArgumentException} is thrown.
    *
    * @throws IllegalArgumentException if no parent fragment, activity, or application implements
-   *     {@link HasFragmentInjector}.
+   *     {@link HasAndroidInjector} or {@link HasFragmentInjector}.
    */
   public static void inject(Fragment fragment) {
     checkNotNull(fragment, "fragment");
-    HasFragmentInjector hasFragmentInjector = findHasFragmentInjector(fragment);
+
+    Object hasInjector = findHasFragmentInjector(fragment);
+    AndroidInjector<? super Fragment> injector;
+    if (hasInjector instanceof HasAndroidInjector) {
+      injector = ((HasAndroidInjector) hasInjector).androidInjector();
+      checkNotNull(injector, "%s.androidInjector() returned null", hasInjector.getClass());
+    } else if (hasInjector instanceof HasFragmentInjector) {
+      injector = ((HasFragmentInjector) hasInjector).fragmentInjector();
+      checkNotNull(injector, "%s.fragmentInjector() returned null", hasInjector.getClass());
+    } else {
+      throw new RuntimeException(
+          String.format(
+              "%s does not implement %s or %s",
+              hasInjector.getClass().getCanonicalName(),
+              HasAndroidInjector.class.getCanonicalName(),
+              HasFragmentInjector.class.getCanonicalName()));
+    }
+
     if (Log.isLoggable(TAG, DEBUG)) {
       Log.d(
           TAG,
           String.format(
               "An injector for %s was found in %s",
               fragment.getClass().getCanonicalName(),
-              hasFragmentInjector.getClass().getCanonicalName()));
+              hasInjector.getClass().getCanonicalName()));
     }
 
-    AndroidInjector<Fragment> fragmentInjector = hasFragmentInjector.fragmentInjector();
-    checkNotNull(
-        fragmentInjector, "%s.fragmentInjector() returned null", hasFragmentInjector.getClass());
-
-    fragmentInjector.inject(fragment);
+    injector.inject(fragment);
   }
 
-  private static HasFragmentInjector findHasFragmentInjector(Fragment fragment) {
+  private static Object findHasFragmentInjector(Fragment fragment) {
     Fragment parentFragment = fragment;
     while ((parentFragment = parentFragment.getParentFragment()) != null) {
-      if (parentFragment instanceof HasFragmentInjector) {
-        return (HasFragmentInjector) parentFragment;
+      if (parentFragment instanceof HasAndroidInjector
+          || parentFragment instanceof HasFragmentInjector) {
+        return parentFragment;
       }
     }
     Activity activity = fragment.getActivity();
-    if (activity instanceof HasFragmentInjector) {
-      return (HasFragmentInjector) activity;
+    if (activity instanceof HasAndroidInjector || activity instanceof HasFragmentInjector) {
+      return activity;
     }
-    if (activity.getApplication() instanceof HasFragmentInjector) {
-      return (HasFragmentInjector) activity.getApplication();
+    Application application = activity.getApplication();
+    if (application instanceof HasAndroidInjector || application instanceof HasFragmentInjector) {
+      return application;
     }
     throw new IllegalArgumentException(
         String.format("No injector was found for %s", fragment.getClass().getCanonicalName()));
@@ -122,23 +142,28 @@ private static HasFragmentInjector findHasFragmentInjector(Fragment fragment) {
    * otherwise throws an {@link IllegalArgumentException}.
    *
    * @throws RuntimeException if the {@link Application} doesn't implement {@link
-   *     HasServiceInjector}.
+   *     HasAndroidInjector} or {@link HasServiceInjector}.
    */
   public static void inject(Service service) {
     checkNotNull(service, "service");
     Application application = service.getApplication();
-    if (!(application instanceof HasServiceInjector)) {
+    AndroidInjector<? super Service> injector;
+    if (application instanceof HasAndroidInjector) {
+      injector = ((HasAndroidInjector) application).androidInjector();
+      checkNotNull(injector, "%s.androidInjector() returned null", application.getClass());
+    } else if (application instanceof HasServiceInjector) {
+      injector = ((HasServiceInjector) application).serviceInjector();
+      checkNotNull(injector, "%s.serviceInjector() returned null", application.getClass());
+    } else {
       throw new RuntimeException(
           String.format(
-              "%s does not implement %s",
+              "%s does not implement %s or %s",
               application.getClass().getCanonicalName(),
+              HasAndroidInjector.class.getCanonicalName(),
               HasServiceInjector.class.getCanonicalName()));
     }
 
-    AndroidInjector<Service> serviceInjector = ((HasServiceInjector) application).serviceInjector();
-    checkNotNull(serviceInjector, "%s.serviceInjector() returned null", application.getClass());
-
-    serviceInjector.inject(service);
+    injector.inject(service);
   }
 
   /**
@@ -146,28 +171,32 @@ public static void inject(Service service) {
    * be found, otherwise throws an {@link IllegalArgumentException}.
    *
    * @throws RuntimeException if the {@link Application} from {@link
-   *     Context#getApplicationContext()} doesn't implement {@link HasBroadcastReceiverInjector}.
+   *     Context#getApplicationContext()} doesn't implement {@link HasAndroidInjector} or {@link
+   *     HasBroadcastReceiverInjector}.
    */
   public static void inject(BroadcastReceiver broadcastReceiver, Context context) {
     checkNotNull(broadcastReceiver, "broadcastReceiver");
     checkNotNull(context, "context");
+
     Application application = (Application) context.getApplicationContext();
-    if (!(application instanceof HasBroadcastReceiverInjector)) {
+    AndroidInjector<? super BroadcastReceiver> injector;
+    if (application instanceof HasAndroidInjector) {
+      injector = ((HasAndroidInjector) application).androidInjector();
+      checkNotNull(injector, "%s.androidInjector() returned null", application.getClass());
+    } else if (application instanceof HasBroadcastReceiverInjector) {
+      injector = ((HasBroadcastReceiverInjector) application).broadcastReceiverInjector();
+      checkNotNull(
+          injector, "%s.broadcastReceiverInjector() returned null", application.getClass());
+    } else {
       throw new RuntimeException(
           String.format(
-              "%s does not implement %s",
+              "%s does not implement %s or %s",
               application.getClass().getCanonicalName(),
+              HasAndroidInjector.class.getCanonicalName(),
               HasBroadcastReceiverInjector.class.getCanonicalName()));
     }
 
-    AndroidInjector<BroadcastReceiver> broadcastReceiverInjector =
-        ((HasBroadcastReceiverInjector) application).broadcastReceiverInjector();
-    checkNotNull(
-        broadcastReceiverInjector,
-        "%s.broadcastReceiverInjector() returned null",
-        application.getClass());
-
-    broadcastReceiverInjector.inject(broadcastReceiver);
+    injector.inject(broadcastReceiver);
   }
 
   /**
@@ -175,27 +204,29 @@ public static void inject(BroadcastReceiver broadcastReceiver, Context context)
    * found, otherwise throws an {@link IllegalArgumentException}.
    *
    * @throws RuntimeException if the {@link Application} doesn't implement {@link
-   *     HasContentProviderInjector}.
+   *     HasAndroidInjector} or {@link HasContentProviderInjector}.
    */
   public static void inject(ContentProvider contentProvider) {
     checkNotNull(contentProvider, "contentProvider");
     Application application = (Application) contentProvider.getContext().getApplicationContext();
-    if (!(application instanceof HasContentProviderInjector)) {
+
+    AndroidInjector<? super ContentProvider> injector;
+    if (application instanceof HasAndroidInjector) {
+      injector = ((HasAndroidInjector) application).androidInjector();
+      checkNotNull(injector, "%s.androidInjector() returned null", application.getClass());
+    } else if (application instanceof HasContentProviderInjector) {
+      injector = ((HasContentProviderInjector) application).contentProviderInjector();
+      checkNotNull(injector, "%s.contentProviderInjector() returned null", application.getClass());
+    } else {
       throw new RuntimeException(
           String.format(
-              "%s does not implement %s",
+              "%s does not implement %s or %s",
               application.getClass().getCanonicalName(),
-              HasContentProviderInjector.class.getCanonicalName()));
+              HasAndroidInjector.class.getCanonicalName(),
+              HasBroadcastReceiverInjector.class.getCanonicalName()));
     }
 
-    AndroidInjector<ContentProvider> contentProviderInjector =
-        ((HasContentProviderInjector) application).contentProviderInjector();
-    checkNotNull(
-        contentProviderInjector,
-        "%s.contentProviderInjector() returned null",
-        application.getClass());
-
-    contentProviderInjector.inject(contentProvider);
+    injector.inject(contentProvider);
   }
 
   private AndroidInjection() {}
diff --git a/java/dagger/android/DaggerActivity.java b/java/dagger/android/DaggerActivity.java
index 1fd9b9d12..43708f3c3 100644
--- a/java/dagger/android/DaggerActivity.java
+++ b/java/dagger/android/DaggerActivity.java
@@ -28,9 +28,9 @@
  * inject {@link Fragment}s attached to it.
  */
 @Beta
-public abstract class DaggerActivity extends Activity implements HasFragmentInjector {
+public abstract class DaggerActivity extends Activity implements HasAndroidInjector {
 
-  @Inject DispatchingAndroidInjector<Fragment> fragmentInjector;
+  @Inject DispatchingAndroidInjector<Object> androidInjector;
 
   @Override
   protected void onCreate(@Nullable Bundle savedInstanceState) {
@@ -39,7 +39,7 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
   }
 
   @Override
-  public AndroidInjector<Fragment> fragmentInjector() {
-    return fragmentInjector;
+  public AndroidInjector<Object> androidInjector() {
+    return androidInjector;
   }
 }
diff --git a/java/dagger/android/DaggerApplication.java b/java/dagger/android/DaggerApplication.java
index ca9ea4344..d09050b5f 100644
--- a/java/dagger/android/DaggerApplication.java
+++ b/java/dagger/android/DaggerApplication.java
@@ -16,36 +16,21 @@
 
 package dagger.android;
 
-import android.app.Activity;
 import android.app.Application;
-import android.app.Fragment;
-import android.app.Service;
-import android.content.BroadcastReceiver;
 import android.content.ContentProvider;
 import com.google.errorprone.annotations.ForOverride;
 import dagger.internal.Beta;
 import javax.inject.Inject;
 
 /**
- * An {@link Application} that injects its members and can be used to inject {@link Activity}s,
- * {@link Fragment}s, {@link Service}s, {@link BroadcastReceiver}s and {@link ContentProvider}s
- * attached to it. Injection is performed in {@link #onCreate()} or the first call to {@link
- * AndroidInjection#inject(ContentProvider)}, whichever happens first.
+ * An {@link Application} that injects its members and can be used to inject objects that the
+ * Android framework instantiates, such as Activitys, Fragments, or Services. Injection is performed
+ * in {@link #onCreate()} or the first call to {@link AndroidInjection#inject(ContentProvider)},
+ * whichever happens first.
  */
 @Beta
-public abstract class DaggerApplication extends Application
-    implements HasActivityInjector,
-        HasFragmentInjector,
-        HasServiceInjector,
-        HasBroadcastReceiverInjector,
-        HasContentProviderInjector {
-
-  @Inject DispatchingAndroidInjector<Activity> activityInjector;
-  @Inject DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector;
-  @Inject DispatchingAndroidInjector<Fragment> fragmentInjector;
-  @Inject DispatchingAndroidInjector<Service> serviceInjector;
-  @Inject DispatchingAndroidInjector<ContentProvider> contentProviderInjector;
-  private volatile boolean needToInject = true;
+public abstract class DaggerApplication extends Application implements HasAndroidInjector {
+  @Inject volatile DispatchingAndroidInjector<Object> androidInjector;
 
   @Override
   public void onCreate() {
@@ -69,14 +54,14 @@ public void onCreate() {
    * allowing for a partially-constructed instance to escape.
    */
   private void injectIfNecessary() {
-    if (needToInject) {
+    if (androidInjector == null) {
       synchronized (this) {
-        if (needToInject) {
+        if (androidInjector == null) {
           @SuppressWarnings("unchecked")
           AndroidInjector<DaggerApplication> applicationInjector =
               (AndroidInjector<DaggerApplication>) applicationInjector();
           applicationInjector.inject(this);
-          if (needToInject) {
+          if (androidInjector == null) {
             throw new IllegalStateException(
                 "The AndroidInjector returned from applicationInjector() did not inject the "
                     + "DaggerApplication");
@@ -86,37 +71,12 @@ private void injectIfNecessary() {
     }
   }
 
-  @Inject
-  void setInjected() {
-    needToInject = false;
-  }
-
-  @Override
-  public DispatchingAndroidInjector<Activity> activityInjector() {
-    return activityInjector;
-  }
-
-  @Override
-  public DispatchingAndroidInjector<Fragment> fragmentInjector() {
-    return fragmentInjector;
-  }
-
-  @Override
-  public DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector() {
-    return broadcastReceiverInjector;
-  }
-
   @Override
-  public DispatchingAndroidInjector<Service> serviceInjector() {
-    return serviceInjector;
-  }
-
-  // injectIfNecessary is called here but not on the other *Injector() methods because it is the
-  // only one that should be called (in AndroidInjection.inject(ContentProvider)) before
-  // Application.onCreate()
-  @Override
-  public AndroidInjector<ContentProvider> contentProviderInjector() {
+  public AndroidInjector<Object> androidInjector() {
+    // injectIfNecessary should already be called unless we are about to inject a ContentProvider,
+    // which can happen before Application.onCreate()
     injectIfNecessary();
-    return contentProviderInjector;
+
+    return androidInjector;
   }
 }
diff --git a/java/dagger/android/DaggerDialogFragment.java b/java/dagger/android/DaggerDialogFragment.java
index 00e65f256..3cbc0f1c9 100644
--- a/java/dagger/android/DaggerDialogFragment.java
+++ b/java/dagger/android/DaggerDialogFragment.java
@@ -33,9 +33,9 @@
  */
 @Deprecated
 @Beta
-public abstract class DaggerDialogFragment extends DialogFragment implements HasFragmentInjector {
+public abstract class DaggerDialogFragment extends DialogFragment implements HasAndroidInjector {
 
-  @Inject DispatchingAndroidInjector<Fragment> childFragmentInjector;
+  @Inject DispatchingAndroidInjector<Object> androidInjector;
 
   @Override
   public void onAttach(Context context) {
@@ -44,7 +44,7 @@ public void onAttach(Context context) {
   }
 
   @Override
-  public AndroidInjector<Fragment> fragmentInjector() {
-    return childFragmentInjector;
+  public AndroidInjector<Object> androidInjector() {
+    return androidInjector;
   }
 }
diff --git a/java/dagger/android/DaggerFragment.java b/java/dagger/android/DaggerFragment.java
index c95c457ce..187820b88 100644
--- a/java/dagger/android/DaggerFragment.java
+++ b/java/dagger/android/DaggerFragment.java
@@ -32,9 +32,9 @@
  */
 @Beta
 @Deprecated
-public abstract class DaggerFragment extends Fragment implements HasFragmentInjector {
+public abstract class DaggerFragment extends Fragment implements HasAndroidInjector {
 
-  @Inject DispatchingAndroidInjector<Fragment> childFragmentInjector;
+  @Inject DispatchingAndroidInjector<Object> androidInjector;
 
   @Override
   public void onAttach(Context context) {
@@ -43,7 +43,7 @@ public void onAttach(Context context) {
   }
 
   @Override
-  public AndroidInjector<Fragment> fragmentInjector() {
-    return childFragmentInjector;
+  public AndroidInjector<Object> androidInjector() {
+    return androidInjector;
   }
 }
diff --git a/java/dagger/android/HasAndroidInjector.java b/java/dagger/android/HasAndroidInjector.java
new file mode 100644
index 000000000..3b497182b
--- /dev/null
+++ b/java/dagger/android/HasAndroidInjector.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android;
+
+import dagger.internal.Beta;
+
+/** Provides an {@link AndroidInjector}. */
+@Beta
+public interface HasAndroidInjector {
+  /** Returns an {@link AndroidInjector}. */
+  AndroidInjector<Object> androidInjector();
+}
diff --git a/java/dagger/android/support/AndroidSupportInjection.java b/java/dagger/android/support/AndroidSupportInjection.java
index f5e206e60..1624345a1 100644
--- a/java/dagger/android/support/AndroidSupportInjection.java
+++ b/java/dagger/android/support/AndroidSupportInjection.java
@@ -20,9 +20,11 @@
 import static dagger.internal.Preconditions.checkNotNull;
 
 import android.app.Activity;
+import android.app.Application;
 import android.support.v4.app.Fragment;
 import android.util.Log;
 import dagger.android.AndroidInjector;
+import dagger.android.HasAndroidInjector;
 import dagger.internal.Beta;
 
 /** Injects core Android types from support libraries. */
@@ -31,62 +33,75 @@
   private static final String TAG = "dagger.android.support";
 
   /**
-   * Injects {@code fragment} if an associated {@link dagger.android.AndroidInjector} implementation
-   * can be found, otherwise throws an {@link IllegalArgumentException}.
+   * Injects {@code fragment} if an associated {@link AndroidInjector} implementation can be found,
+   * otherwise throws an {@link IllegalArgumentException}.
    *
-   * <p>Uses the following algorithm to find the appropriate {@code AndroidInjector<Fragment>} to
-   * use to inject {@code fragment}:
+   * <p>Uses the following algorithm to find the appropriate {@link AndroidInjector} to use to
+   * inject {@code fragment}:
    *
    * <ol>
-   *   <li>Walks the parent-fragment hierarchy to find the a fragment that implements {@link
-   *       HasSupportFragmentInjector}, and if none do
+   *   <li>Walks the parent-fragment hierarchy to find a fragment that implements {@link
+   *       HasAndroidInjector} or {@link HasSupportFragmentInjector}, and if none do
    *   <li>Uses the {@code fragment}'s {@link Fragment#getActivity() activity} if it implements
-   *       {@link HasSupportFragmentInjector}, and if not
-   *   <li>Uses the {@link android.app.Application} if it implements {@link
-   *       HasSupportFragmentInjector}.
+   *       {@link HasAndroidInjector} or {@link HasSupportFragmentInjector}, and if not
+   *   <li>Uses the {@link android.app.Application} if it implements {@link HasAndroidInjector}
+   *       {@link HasSupportFragmentInjector}.
    * </ol>
    *
-   * If none of them implement {@link HasSupportFragmentInjector}, a {@link
-   * IllegalArgumentException} is thrown.
+   * If none of them implement {@link HasAndroidInjector} or {@link HasSupportFragmentInjector}, a
+   * {@link IllegalArgumentException} is thrown.
    *
    * @throws IllegalArgumentException if no parent fragment, activity, or application implements
-   *     {@link HasSupportFragmentInjector}.
+   *     {@link HasAndroidInjector} or {@link HasSupportFragmentInjector}.
    */
   public static void inject(Fragment fragment) {
     checkNotNull(fragment, "fragment");
-    HasSupportFragmentInjector hasSupportFragmentInjector = findHasFragmentInjector(fragment);
+
+    Object hasInjector = findHasSupportFragmentInjector(fragment);
+    AndroidInjector<? super Fragment> injector;
+    if (hasInjector instanceof HasAndroidInjector) {
+      injector = ((HasAndroidInjector) hasInjector).androidInjector();
+      checkNotNull(injector, "%s.androidInjector() returned null", hasInjector.getClass());
+    } else if (hasInjector instanceof HasSupportFragmentInjector) {
+      injector = ((HasSupportFragmentInjector) hasInjector).supportFragmentInjector();
+      checkNotNull(injector, "%s.supportFragmentInjector() returned null", hasInjector.getClass());
+    } else {
+      throw new RuntimeException(
+          String.format(
+              "%s does not implement %s or %s",
+              hasInjector.getClass().getCanonicalName(),
+              HasAndroidInjector.class.getCanonicalName(),
+              HasSupportFragmentInjector.class.getCanonicalName()));
+    }
+
     if (Log.isLoggable(TAG, DEBUG)) {
       Log.d(
           TAG,
           String.format(
               "An injector for %s was found in %s",
               fragment.getClass().getCanonicalName(),
-              hasSupportFragmentInjector.getClass().getCanonicalName()));
+              hasInjector.getClass().getCanonicalName()));
     }
 
-    AndroidInjector<Fragment> fragmentInjector =
-        hasSupportFragmentInjector.supportFragmentInjector();
-    checkNotNull(
-        fragmentInjector,
-        "%s.supportFragmentInjector() returned null",
-        hasSupportFragmentInjector.getClass());
-
-    fragmentInjector.inject(fragment);
+    injector.inject(fragment);
   }
 
-  private static HasSupportFragmentInjector findHasFragmentInjector(Fragment fragment) {
+  private static Object findHasSupportFragmentInjector(Fragment fragment) {
     Fragment parentFragment = fragment;
     while ((parentFragment = parentFragment.getParentFragment()) != null) {
-      if (parentFragment instanceof HasSupportFragmentInjector) {
-        return (HasSupportFragmentInjector) parentFragment;
+      if (parentFragment instanceof HasAndroidInjector
+          || parentFragment instanceof HasSupportFragmentInjector) {
+        return parentFragment;
       }
     }
     Activity activity = fragment.getActivity();
-    if (activity instanceof HasSupportFragmentInjector) {
-      return (HasSupportFragmentInjector) activity;
+    if (activity instanceof HasAndroidInjector || activity instanceof HasSupportFragmentInjector) {
+      return activity;
     }
-    if (activity.getApplication() instanceof HasSupportFragmentInjector) {
-      return (HasSupportFragmentInjector) activity.getApplication();
+    Application application = activity.getApplication();
+    if (application instanceof HasAndroidInjector
+        || application instanceof HasSupportFragmentInjector) {
+      return application;
     }
     throw new IllegalArgumentException(
         String.format("No injector was found for %s", fragment.getClass().getCanonicalName()));
diff --git a/java/dagger/android/support/DaggerAppCompatActivity.java b/java/dagger/android/support/DaggerAppCompatActivity.java
index 4621e9a6d..ccc4faab2 100644
--- a/java/dagger/android/support/DaggerAppCompatActivity.java
+++ b/java/dagger/android/support/DaggerAppCompatActivity.java
@@ -18,12 +18,11 @@
 
 import android.os.Bundle;
 import android.support.annotation.Nullable;
-import android.support.v4.app.Fragment;
 import android.support.v7.app.AppCompatActivity;
 import dagger.android.AndroidInjection;
 import dagger.android.AndroidInjector;
 import dagger.android.DispatchingAndroidInjector;
-import dagger.android.HasFragmentInjector;
+import dagger.android.HasAndroidInjector;
 import dagger.internal.Beta;
 import javax.inject.Inject;
 
@@ -33,10 +32,9 @@
  */
 @Beta
 public abstract class DaggerAppCompatActivity extends AppCompatActivity
-    implements HasFragmentInjector, HasSupportFragmentInjector {
+    implements HasAndroidInjector {
 
-  @Inject DispatchingAndroidInjector<Fragment> supportFragmentInjector;
-  @Inject DispatchingAndroidInjector<android.app.Fragment> frameworkFragmentInjector;
+  @Inject DispatchingAndroidInjector<Object> androidInjector;
 
   @Override
   protected void onCreate(@Nullable Bundle savedInstanceState) {
@@ -45,12 +43,7 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
   }
 
   @Override
-  public AndroidInjector<Fragment> supportFragmentInjector() {
-    return supportFragmentInjector;
-  }
-
-  @Override
-  public AndroidInjector<android.app.Fragment> fragmentInjector() {
-    return frameworkFragmentInjector;
+  public AndroidInjector<Object> androidInjector() {
+    return androidInjector;
   }
 }
diff --git a/java/dagger/android/support/DaggerAppCompatDialogFragment.java b/java/dagger/android/support/DaggerAppCompatDialogFragment.java
index 6592c2387..1efaeec80 100644
--- a/java/dagger/android/support/DaggerAppCompatDialogFragment.java
+++ b/java/dagger/android/support/DaggerAppCompatDialogFragment.java
@@ -21,6 +21,7 @@
 import android.support.v7.app.AppCompatDialogFragment;
 import dagger.android.AndroidInjector;
 import dagger.android.DispatchingAndroidInjector;
+import dagger.android.HasAndroidInjector;
 import dagger.internal.Beta;
 import javax.inject.Inject;
 
@@ -31,9 +32,9 @@
  */
 @Beta
 public abstract class DaggerAppCompatDialogFragment extends AppCompatDialogFragment
-    implements HasSupportFragmentInjector {
+    implements HasAndroidInjector {
 
-  @Inject DispatchingAndroidInjector<Fragment> childFragmentInjector;
+  @Inject DispatchingAndroidInjector<Object> androidInjector;
 
   @Override
   public void onAttach(Context context) {
@@ -42,7 +43,7 @@ public void onAttach(Context context) {
   }
 
   @Override
-  public AndroidInjector<Fragment> supportFragmentInjector() {
-    return childFragmentInjector;
+  public AndroidInjector<Object> androidInjector() {
+    return androidInjector;
   }
 }
diff --git a/java/dagger/android/support/DaggerApplication.java b/java/dagger/android/support/DaggerApplication.java
index 294d2aad4..1cb3bd8dc 100644
--- a/java/dagger/android/support/DaggerApplication.java
+++ b/java/dagger/android/support/DaggerApplication.java
@@ -16,27 +16,15 @@
 
 package dagger.android.support;
 
-import android.support.v4.app.Fragment;
 import dagger.android.AndroidInjector;
-import dagger.android.DispatchingAndroidInjector;
-import javax.inject.Inject;
 
 /**
- * An {@link android.app.Application} that injects its members and can be used to inject {@link
- * android.app.Activity}s, {@linkplain android.app.Fragment framework fragments}, {@linkplain
- * Fragment support fragments}, {@link android.app.Service}s, {@link
- * android.content.BroadcastReceiver}s, and {@link android.content.ContentProvider}s attached to it.
+ * An {@link Application} that injects its members and can be used to inject classes that the
+ * Android framework instantiates. Injection is performed in {@link #onCreate()} or the first call
+ * to {@link AndroidInjection#inject(ContentProvider)}, whichever happens first.
  */
-public abstract class DaggerApplication extends dagger.android.DaggerApplication
-    implements HasSupportFragmentInjector {
-
-  @Inject DispatchingAndroidInjector<Fragment> supportFragmentInjector;
-
+// TODO(ronshapiro): deprecate and remove this class
+public abstract class DaggerApplication extends dagger.android.DaggerApplication {
   @Override
   protected abstract AndroidInjector<? extends DaggerApplication> applicationInjector();
-
-  @Override
-  public DispatchingAndroidInjector<Fragment> supportFragmentInjector() {
-    return supportFragmentInjector;
-  }
 }
diff --git a/java/dagger/android/support/DaggerDialogFragment.java b/java/dagger/android/support/DaggerDialogFragment.java
index 18feb6e39..69b90bc0c 100644
--- a/java/dagger/android/support/DaggerDialogFragment.java
+++ b/java/dagger/android/support/DaggerDialogFragment.java
@@ -21,6 +21,7 @@
 import android.support.v4.app.Fragment;
 import dagger.android.AndroidInjector;
 import dagger.android.DispatchingAndroidInjector;
+import dagger.android.HasAndroidInjector;
 import dagger.internal.Beta;
 import javax.inject.Inject;
 
@@ -30,10 +31,9 @@
  * its members will be injected again.
  */
 @Beta
-public abstract class DaggerDialogFragment extends DialogFragment
-    implements HasSupportFragmentInjector {
+public abstract class DaggerDialogFragment extends DialogFragment implements HasAndroidInjector {
 
-  @Inject DispatchingAndroidInjector<Fragment> childFragmentInjector;
+  @Inject DispatchingAndroidInjector<Object> androidInjector;
 
   @Override
   public void onAttach(Context context) {
@@ -42,7 +42,7 @@ public void onAttach(Context context) {
   }
 
   @Override
-  public AndroidInjector<Fragment> supportFragmentInjector() {
-    return childFragmentInjector;
+  public AndroidInjector<Object> androidInjector() {
+    return androidInjector;
   }
 }
diff --git a/java/dagger/android/support/DaggerFragment.java b/java/dagger/android/support/DaggerFragment.java
index c7335a88b..332cdaaa1 100644
--- a/java/dagger/android/support/DaggerFragment.java
+++ b/java/dagger/android/support/DaggerFragment.java
@@ -20,6 +20,7 @@
 import android.support.v4.app.Fragment;
 import dagger.android.AndroidInjector;
 import dagger.android.DispatchingAndroidInjector;
+import dagger.android.HasAndroidInjector;
 import dagger.internal.Beta;
 import javax.inject.Inject;
 
@@ -29,9 +30,9 @@
  * members will be injected again.
  */
 @Beta
-public abstract class DaggerFragment extends Fragment implements HasSupportFragmentInjector {
+public abstract class DaggerFragment extends Fragment implements HasAndroidInjector {
 
-  @Inject DispatchingAndroidInjector<Fragment> childFragmentInjector;
+  @Inject DispatchingAndroidInjector<Object> androidInjector;
 
   @Override
   public void onAttach(Context context) {
@@ -40,7 +41,7 @@ public void onAttach(Context context) {
   }
 
   @Override
-  public AndroidInjector<Fragment> supportFragmentInjector() {
-    return childFragmentInjector;
+  public AndroidInjector<Object> androidInjector() {
+    return androidInjector;
   }
 }
diff --git a/javatests/dagger/android/AndroidInjectionTest.java b/javatests/dagger/android/AndroidInjectionTest.java
index a24ff5b6c..19b6e8455 100644
--- a/javatests/dagger/android/AndroidInjectionTest.java
+++ b/javatests/dagger/android/AndroidInjectionTest.java
@@ -122,7 +122,7 @@ public void injectActivity_applicationDoesntImplementHasActivityInjector() {
     } catch (Exception e) {
       assertThat(e)
           .hasMessageThat()
-          .contains("Application does not implement dagger.android.HasActivityInjector");
+          .contains("Application does not implement dagger.android.HasAndroidInjector");
     }
   }
 
