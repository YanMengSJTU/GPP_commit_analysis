diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/AnInterface.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/AnInterface.java
new file mode 100644
index 000000000..8aaa015d1
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/AnInterface.java
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.subcomponent;
+
+interface AnInterface {
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildAbstractClassComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildAbstractClassComponent.java
new file mode 100644
index 000000000..6c061bc5c
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildAbstractClassComponent.java
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.subcomponent;
+
+import dagger.Subcomponent;
+
+@Subcomponent(modules = ChildModule.class)
+abstract class ChildAbstractClassComponent implements ChildComponent {
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildComponent.java
index 9ed4c714a..9f724edfc 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildComponent.java
@@ -26,4 +26,6 @@
   RequiresSingletons requiresSingleton();
 
   Set<Object> objectSet();
+
+  NeedsAnInterface needsAnInterface();
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildModule.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildModule.java
index b426f6386..b2885412f 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildModule.java
@@ -29,4 +29,12 @@
       }
     };
   }
+
+  @Provides AnInterface provideAnInterface(ImplementsAnInterface implementsAnInterface) {
+    return implementsAnInterface;
+  }
+
+  @Provides NeedsAnInterface provideNeedsAnInterface(AnInterface anInterface) {
+    return new NeedsAnInterface(anInterface);
+  }
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ImplementsAnInterface.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ImplementsAnInterface.java
new file mode 100644
index 000000000..ff3170cba
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ImplementsAnInterface.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.subcomponent;
+
+import javax.inject.Inject;
+
+class ImplementsAnInterface implements AnInterface {
+  @Inject ImplementsAnInterface() {}
+}
+
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/NeedsAnInterface.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/NeedsAnInterface.java
new file mode 100644
index 000000000..bccde8589
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/NeedsAnInterface.java
@@ -0,0 +1,20 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.subcomponent;
+
+class NeedsAnInterface {
+  NeedsAnInterface(AnInterface anInterface) {}
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java
index babf3ea34..91c0bd717 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java
@@ -29,6 +29,8 @@
 
   ChildComponent newChildComponent();
 
+  ChildAbstractClassComponent newChildAbstractClassComponent();
+
   ChildComponentRequiringModules newChildComponentRequiringModules(
       ChildModuleWithParameters cmwp,
       ChildModuleWithState childModuleWithState);
diff --git a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentTest.java b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentTest.java
index c0d01b19a..de0e508af 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentTest.java
@@ -19,64 +19,68 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
+import org.junit.experimental.theories.DataPoint;
+import org.junit.experimental.theories.Theories;
+import org.junit.experimental.theories.Theory;
 
 import static com.google.common.collect.Sets.intersection;
 import static com.google.common.truth.Truth.assertThat;
 
-@RunWith(JUnit4.class)
+@RunWith(Theories.class)
 public class SubcomponentTest {
-  @Test
-  public void scopePropagatesUpward_class() {
-    ParentComponent parentComponent = DaggerParentComponent.create();
-    assertThat(parentComponent.newChildComponent().requiresSingleton().singletonType())
-        .isSameAs(parentComponent.newChildComponent().requiresSingleton().singletonType());
-    assertThat(parentComponent.newChildComponent().requiresSingleton().singletonType())
-        .isSameAs(parentComponent.newChildComponent()
-            .newGrandchildComponent().requiresSingleton().singletonType());
+  private static final ParentComponent parentComponent = DaggerParentComponent.create();
+  @DataPoint
+  public static final ChildComponent childComponent = parentComponent.newChildComponent();;
+  @DataPoint
+  public static final ChildComponent childAbstractClassComponent =
+      parentComponent.newChildAbstractClassComponent();
+
+  @Theory
+  public void scopePropagatesUpward_class(ChildComponent childComponent) {
+    assertThat(childComponent.requiresSingleton().singletonType())
+        .isSameAs(childComponent.requiresSingleton().singletonType());
+    assertThat(childComponent.requiresSingleton().singletonType())
+        .isSameAs(childComponent.newGrandchildComponent().requiresSingleton().singletonType());
   }
 
-  @Test
-  public void scopePropagatesUpward_provides() {
-    ParentComponent parentComponent = DaggerParentComponent.create();
-    assertThat(parentComponent.newChildComponent()
+  @Theory
+  public void scopePropagatesUpward_provides(ChildComponent childComponent) {
+    assertThat(childComponent
         .requiresSingleton().unscopedTypeBoundAsSingleton())
-            .isSameAs(parentComponent.newChildComponent()
+            .isSameAs(childComponent
                 .requiresSingleton().unscopedTypeBoundAsSingleton());
-    assertThat(parentComponent.newChildComponent()
+    assertThat(childComponent
         .requiresSingleton().unscopedTypeBoundAsSingleton())
-            .isSameAs(parentComponent.newChildComponent().newGrandchildComponent()
+            .isSameAs(childComponent.newGrandchildComponent()
                 .requiresSingleton().unscopedTypeBoundAsSingleton());
   }
 
-  @Test
-  public void multibindingContributions() {
-    ParentComponent parentComponent = DaggerParentComponent.create();
+  @Theory
+  public void multibindingContributions(ChildComponent childComponent) {
     Set<Object> parentObjectSet = parentComponent.objectSet();
     assertThat(parentObjectSet).hasSize(2);
-    Set<Object> childObjectSet = parentComponent.newChildComponent().objectSet();
+    Set<Object> childObjectSet = childComponent.objectSet();
     assertThat(childObjectSet).hasSize(3);
     Set<Object> grandchildObjectSet =
-        parentComponent.newChildComponent().newGrandchildComponent().objectSet();
+        childComponent.newGrandchildComponent().objectSet();
     assertThat(grandchildObjectSet).hasSize(4);
     assertThat(intersection(parentObjectSet, childObjectSet)).hasSize(1);
     assertThat(intersection(parentObjectSet, grandchildObjectSet)).hasSize(1);
     assertThat(intersection(childObjectSet, grandchildObjectSet)).hasSize(1);
   }
 
-  @Test
-  public void unscopedProviders() {
-    ParentComponent parentComponent = DaggerParentComponent.create();
+  @Theory
+  public void unscopedProviders(ChildComponent childComponent) {
     assertThat(parentComponent.getUnscopedTypeProvider())
-        .isSameAs(parentComponent.newChildComponent().getUnscopedTypeProvider());
+        .isSameAs(childComponent.getUnscopedTypeProvider());
     assertThat(parentComponent.getUnscopedTypeProvider())
-        .isSameAs(parentComponent.newChildComponent()
+        .isSameAs(childComponent
             .newGrandchildComponent()
             .getUnscopedTypeProvider());
   }
 
-  @Test
-  public void passedModules() {
-    ParentComponent parentComponent = DaggerParentComponent.create();
+  @Theory
+  public void passedModules(ChildComponent childComponent) {
     ChildModuleWithState childModuleWithState = new ChildModuleWithState();
     ChildComponentRequiringModules childComponent1 =
         parentComponent.newChildComponentRequiringModules(
@@ -89,4 +93,9 @@ public void passedModules() {
     assertThat(childComponent1.getInt()).isEqualTo(0);
     assertThat(childComponent2.getInt()).isEqualTo(1);
   }
+
+  @Theory
+  public void dependenceisInASubcomponent(ChildComponent childComponent) {
+    assertThat(childComponent.newGrandchildComponent().needsAnInterface()).isNotNull();
+  }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index 69c9b3d74..a5a2038f3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -388,9 +388,9 @@ private MembersInjectionBinding rollUpMembersInjectionBindings(Key key) {
       private Optional<RequestResolver> getOwningResolver(ProvisionBinding provisionBinding) {
         Optional<Equivalence.Wrapper<AnnotationMirror>> bindingScope =
             provisionBinding.wrappedScope();
-        for (RequestResolver requestResolver : getResolverLineage()) {
-          if (bindingScope.equals(requestResolver.targetScope)
-              || requestResolver.explicitProvisionBindings.containsValue(provisionBinding)) {
+        for (RequestResolver requestResolver : getResolverLineage().reverse()) {
+          if (requestResolver.explicitProvisionBindings.containsValue(provisionBinding)
+              || (bindingScope.isPresent() && bindingScope.equals(requestResolver.targetScope))) {
             return Optional.of(requestResolver);
           }
         }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 1f0a94e8d..2e1538e4a 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -428,17 +428,27 @@ private void writeSubcomponent(ClassWriter componentWriter,
       ImmutableMap<ContributionBinding, Snippet> parentMultibindingContributionSnippets,
       ExecutableElement subcomponentFactoryMethod,
       BindingGraph subgraph) {
-    TypeName subcomponentType =
-        TypeNames.forTypeMirror(subcomponentFactoryMethod.getReturnType());
+    TypeMirror subcomponentType = subcomponentFactoryMethod.getReturnType();
+    TypeName subcomponentTypeName = TypeNames.forTypeMirror(subcomponentType);
 
     ClassWriter subcomponentWriter = componentWriter.addNestedClass(
-        subgraph.componentDescriptor().componentDefinitionType().getSimpleName()
-            + "Impl");
+        subgraph.componentDescriptor().componentDefinitionType().getSimpleName() + "Impl");
 
     subcomponentWriter.addModifiers(PRIVATE, FINAL);
-    subcomponentWriter.addImplementedType(subcomponentType);
+    Element subcomponentElement = MoreTypes.asElement(subcomponentType);
+    switch (subcomponentElement.getKind()) {
+      case CLASS:
+        checkState(subcomponentElement.getModifiers().contains(ABSTRACT));
+        subcomponentWriter.setSuperType(subcomponentTypeName);
+        break;
+      case INTERFACE:
+        subcomponentWriter.addImplementedType(subcomponentTypeName);
+        break;
+      default:
+        throw new IllegalStateException();
+    }
 
-    MethodWriter componentMethod = componentWriter.addMethod(subcomponentType,
+    MethodWriter componentMethod = componentWriter.addMethod(subcomponentTypeName,
         subcomponentFactoryMethod.getSimpleName().toString());
     componentMethod.addModifiers(PUBLIC);
     componentMethod.annotate(Override.class);
