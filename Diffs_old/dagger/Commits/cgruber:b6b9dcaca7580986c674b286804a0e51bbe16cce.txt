diff --git a/java/dagger/internal/codegen/BindingGraphConverter.java b/java/dagger/internal/codegen/BindingGraphConverter.java
index c132cb379..7c0525798 100644
--- a/java/dagger/internal/codegen/BindingGraphConverter.java
+++ b/java/dagger/internal/codegen/BindingGraphConverter.java
@@ -74,7 +74,7 @@
 
     ComponentKind componentKind = bindingGraph.componentDescriptor().kind();
     return BindingGraphProxies.bindingGraph(
-        traverser.network, componentKind.isForModuleValidation(), !componentKind.isRoot());
+        traverser.network, componentKind.isForModuleValidation());
   }
 
   // TODO(dpb): Example of BindingGraph logic applied to derived networks.
diff --git a/java/dagger/internal/codegen/ComponentNodeImpl.java b/java/dagger/internal/codegen/ComponentNodeImpl.java
index 0c24352e8..64bf8e7a2 100644
--- a/java/dagger/internal/codegen/ComponentNodeImpl.java
+++ b/java/dagger/internal/codegen/ComponentNodeImpl.java
@@ -34,7 +34,12 @@ static ComponentNode create(
   }
 
   @Override
-  public ImmutableSet<DependencyRequest> entryPoints() {
+  public final boolean isSubcomponent() {
+    return !componentDescriptor().kind().isRoot();
+  }
+
+  @Override
+  public final ImmutableSet<DependencyRequest> entryPoints() {
     return componentDescriptor().entryPointMethods().stream()
         .map(method -> method.dependencyRequest().get())
         .collect(toImmutableSet());
diff --git a/java/dagger/model/BindingGraph.java b/java/dagger/model/BindingGraph.java
index e02ad0dac..6c89ba452 100644
--- a/java/dagger/model/BindingGraph.java
+++ b/java/dagger/model/BindingGraph.java
@@ -89,10 +89,8 @@
 @AutoValue
 public abstract class BindingGraph {
 
-  static BindingGraph create(
-      Network<Node, Edge> network, boolean isModuleBindingGraph, boolean isPartialBindingGraph) {
-    return new AutoValue_BindingGraph(
-        ImmutableNetwork.copyOf(network), isModuleBindingGraph, isPartialBindingGraph);
+  static BindingGraph create(Network<Node, Edge> network, boolean isModuleBindingGraph) {
+    return new AutoValue_BindingGraph(ImmutableNetwork.copyOf(network), isModuleBindingGraph);
   }
 
   BindingGraph() {}
@@ -116,10 +114,12 @@ public final String toString() {
   public abstract boolean isModuleBindingGraph();
 
   /**
-   * Returns {@code true} if this graph was constructed with a root subcomponent in ahead-of-time
-   * subcomponents mode.
+   * Returns {@code true} if the {@link #rootComponentNode()} is a subcomponent. This occurs in
+   * ahead-of-time-subcomponents mode.
    */
-  public abstract boolean isPartialBindingGraph();
+  public final boolean isPartialBindingGraph() {
+    return rootComponentNode().isSubcomponent();
+  }
 
   /** Returns the bindings. */
   public final ImmutableSet<Binding> bindings() {
@@ -405,6 +405,12 @@ public final String toString() {
     @Override
     ComponentPath componentPath();
 
+    /**
+     * Returns {@code true} if the component is a {@code @Subcomponent} or
+     * {@code @ProductionSubcomponent}.
+     */
+    boolean isSubcomponent();
+
     /** The entry points on this component. */
     ImmutableSet<DependencyRequest> entryPoints();
 
diff --git a/java/dagger/model/BindingGraphProxies.java b/java/dagger/model/BindingGraphProxies.java
index cd7080636..4d514f328 100644
--- a/java/dagger/model/BindingGraphProxies.java
+++ b/java/dagger/model/BindingGraphProxies.java
@@ -29,8 +29,8 @@
 public final class BindingGraphProxies {
   /** Creates a new {@link BindingGraph}. */
   public static BindingGraph bindingGraph(
-      Network<Node, Edge> network, boolean isModuleBindingGraph, boolean isPartialBindingGraph) {
-    return BindingGraph.create(network, isModuleBindingGraph, isPartialBindingGraph);
+      Network<Node, Edge> network, boolean isModuleBindingGraph) {
+    return BindingGraph.create(network, isModuleBindingGraph);
   }
 
   /** Creates a new {@link MissingBinding}. */
