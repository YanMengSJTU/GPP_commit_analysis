diff --git a/java/dagger/internal/codegen/BindingGraphConverter.java b/java/dagger/internal/codegen/BindingGraphConverter.java
index 28cf9a14f..c51d66f7d 100644
--- a/java/dagger/internal/codegen/BindingGraphConverter.java
+++ b/java/dagger/internal/codegen/BindingGraphConverter.java
@@ -19,8 +19,6 @@
 import static com.google.auto.common.MoreTypes.asTypeElement;
 import static dagger.internal.codegen.BindingRequest.bindingRequest;
 import static dagger.internal.codegen.DaggerGraphs.unreachableNodes;
-import static dagger.internal.codegen.DaggerStreams.presentValues;
-import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
 import static dagger.model.BindingKind.SUBCOMPONENT_CREATOR;
 
 import com.google.common.collect.ImmutableSet;
@@ -103,7 +101,6 @@ protected void visitComponent(BindingGraph graph) {
       network.addNode(currentComponent);
 
       for (ResolvedBindings resolvedBindings : graph.resolvedBindings()) {
-        ImmutableSet<TypeElement> declaringModules = subcomponentDeclaringModules(resolvedBindings);
         for (BindingNode binding : bindingNodes(resolvedBindings)) {
           addBinding(binding);
           if (binding.kind().equals(SUBCOMPONENT_CREATOR)
@@ -111,7 +108,8 @@ protected void visitComponent(BindingGraph graph) {
             network.addEdge(
                 binding,
                 subcomponentNode(binding.key().type(), graph),
-                new SubcomponentCreatorBindingEdgeImpl(declaringModules));
+                new SubcomponentCreatorBindingEdgeImpl(
+                    resolvedBindings.subcomponentDeclarations()));
           }
         }
       }
@@ -229,15 +227,5 @@ private ComponentNode subcomponentNode(TypeMirror subcomponentBuilderType, Bindi
       return ComponentNodeImpl.create(
           componentPath().childPath(subcomponent.typeElement()), subcomponent);
     }
-
-    private ImmutableSet<TypeElement> subcomponentDeclaringModules(
-        ResolvedBindings resolvedBindings) {
-      return resolvedBindings
-          .subcomponentDeclarations()
-          .stream()
-          .map(SubcomponentDeclaration::contributingModule)
-          .flatMap(presentValues())
-          .collect(toImmutableSet());
-    }
   }
 }
diff --git a/java/dagger/internal/codegen/SubcomponentCreatorBindingEdgeImpl.java b/java/dagger/internal/codegen/SubcomponentCreatorBindingEdgeImpl.java
index 782feb87e..c97024ec5 100644
--- a/java/dagger/internal/codegen/SubcomponentCreatorBindingEdgeImpl.java
+++ b/java/dagger/internal/codegen/SubcomponentCreatorBindingEdgeImpl.java
@@ -17,6 +17,8 @@
 package dagger.internal.codegen;
 
 import static com.google.common.collect.Iterables.getOnlyElement;
+import static dagger.internal.codegen.DaggerStreams.presentValues;
+import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
 import static java.util.stream.Collectors.joining;
 
 import com.google.common.collect.ImmutableSet;
@@ -26,23 +28,27 @@
 /** An implementation of {@link SubcomponentCreatorBindingEdge}. */
 final class SubcomponentCreatorBindingEdgeImpl implements SubcomponentCreatorBindingEdge {
 
-  private final ImmutableSet<TypeElement> declaringModules;
+  private final ImmutableSet<SubcomponentDeclaration> subcomponentDeclarations;
 
-  SubcomponentCreatorBindingEdgeImpl(Iterable<TypeElement> declaringModules) {
-    this.declaringModules = ImmutableSet.copyOf(declaringModules);
+  SubcomponentCreatorBindingEdgeImpl(
+      ImmutableSet<SubcomponentDeclaration> subcomponentDeclarations) {
+    this.subcomponentDeclarations = subcomponentDeclarations;
   }
 
   @Override
   public ImmutableSet<TypeElement> declaringModules() {
-    return declaringModules;
+    return subcomponentDeclarations.stream()
+        .map(SubcomponentDeclaration::contributingModule)
+        .flatMap(presentValues())
+        .collect(toImmutableSet());
   }
 
   @Override
   public String toString() {
     return "subcomponent declared by "
-        + (declaringModules.size() == 1
-            ? getOnlyElement(declaringModules).getQualifiedName()
-            : declaringModules.stream()
+        + (subcomponentDeclarations.size() == 1
+            ? getOnlyElement(declaringModules()).getQualifiedName()
+            : declaringModules().stream()
                 .map(TypeElement::getQualifiedName)
                 .collect(joining(", ", "{", "}")));
   }
