diff --git a/java/dagger/internal/codegen/DependencyVariableNamer.java b/java/dagger/internal/codegen/DependencyVariableNamer.java
index b84d338db..161d5705f 100644
--- a/java/dagger/internal/codegen/DependencyVariableNamer.java
+++ b/java/dagger/internal/codegen/DependencyVariableNamer.java
@@ -20,7 +20,6 @@
 
 import com.google.common.base.Ascii;
 import com.google.common.base.CaseFormat;
-import com.google.common.base.Function;
 import dagger.Lazy;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -36,11 +35,10 @@
  * @since 2.0
  */
 //TODO(gak): develop the heuristics to get better names
-final class DependencyVariableNamer implements Function<DependencyRequest, String> {
+final class DependencyVariableNamer {
   private static final Pattern LAZY_PROVIDER_PATTERN = Pattern.compile("lazy(\\w+)Provider");
 
-  @Override
-  public String apply(DependencyRequest dependency) {
+  static String name(DependencyRequest dependency) {
     if (dependency.overriddenVariableName().isPresent()) {
       return dependency.overriddenVariableName().get();
     }
@@ -83,7 +81,7 @@ public String apply(DependencyRequest dependency) {
     }
   }
 
-  private String toLowerCamel(String name) {
+  private static String toLowerCamel(String name) {
     return CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, name);
   }
 }
diff --git a/java/dagger/internal/codegen/SourceFiles.java b/java/dagger/internal/codegen/SourceFiles.java
index 858f18445..3f0299ee1 100644
--- a/java/dagger/internal/codegen/SourceFiles.java
+++ b/java/dagger/internal/codegen/SourceFiles.java
@@ -36,12 +36,12 @@
 import static dagger.internal.codegen.TypeNames.SET_OF_PRODUCED_PRODUCER;
 import static dagger.internal.codegen.TypeNames.SET_PRODUCER;
 import static dagger.internal.codegen.Util.toImmutableList;
+import static dagger.internal.codegen.Util.toImmutableSet;
 import static java.util.Comparator.comparing;
 import static javax.lang.model.SourceVersion.isName;
 
 import com.google.common.base.CaseFormat;
 import com.google.common.base.Joiner;
-import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
@@ -126,7 +126,7 @@
   private static String fieldNameForDependency(ImmutableSet<DependencyRequest> dependencyRequests) {
     // collect together all of the names that we would want to call the provider
     ImmutableSet<String> dependencyNames =
-        FluentIterable.from(dependencyRequests).transform(new DependencyVariableNamer()).toSet();
+        dependencyRequests.stream().map(DependencyVariableNamer::name).collect(toImmutableSet());
 
     if (dependencyNames.size() == 1) {
       // if there's only one name, great! use it!
