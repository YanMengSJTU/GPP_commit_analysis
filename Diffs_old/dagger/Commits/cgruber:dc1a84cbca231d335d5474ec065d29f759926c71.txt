diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingDeclaration.java b/compiler/src/main/java/dagger/internal/codegen/BindingDeclaration.java
index 1c04441cd..7c2096668 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingDeclaration.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingDeclaration.java
@@ -17,8 +17,6 @@
 package dagger.internal.codegen;
 
 import static dagger.internal.codegen.Util.ENCLOSING_TYPE_ELEMENT;
-import static javax.lang.model.element.Modifier.ABSTRACT;
-import static javax.lang.model.element.Modifier.STATIC;
 
 import com.google.common.base.Function;
 import com.google.common.base.Optional;
@@ -26,7 +24,6 @@
 import dagger.internal.codegen.Key.HasKey;
 import java.util.Set;
 import javax.lang.model.element.Element;
-import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
 
 /** An object that declares or specifies a binding. */
@@ -72,30 +69,6 @@ public TypeElement apply(Element element) {
         }
       };
 
-  /**
-   * {@code true} if {@link #contributingModule()} is present and this is a nonabstract instance
-   * method.
-   */
-  boolean requiresModuleInstance() {
-    if (!bindingElement().isPresent() || !contributingModule().isPresent()) {
-      return false;
-    }
-    Set<Modifier> modifiers = bindingElement().get().getModifiers();
-    return !modifiers.contains(ABSTRACT) && !modifiers.contains(STATIC);
-  }
-
-  /**
-   * A predicate that passes for binding declarations for which {@link #requiresModuleInstance()} is
-   * {@code true}.
-   */
-  static final Predicate<BindingDeclaration> REQUIRES_MODULE_INSTANCE =
-      new Predicate<BindingDeclaration>() {
-        @Override
-        public boolean apply(BindingDeclaration bindingDeclaration) {
-          return bindingDeclaration.requiresModuleInstance();
-        }
-      };
-
   /**
    * A predicate that passes for binding declarations for which {@link #bindingElement()} is
    * present.
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index e184632b2..ab91f9db4 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -129,7 +129,7 @@
         .preOrderTraversal(this)
         .transformAndConcat(RESOLVED_BINDINGS)
         .transformAndConcat(ResolvedBindings.CONTRIBUTION_BINDINGS)
-        .filter(BindingDeclaration.REQUIRES_MODULE_INSTANCE)
+        .filter(ContributionBinding.REQUIRES_MODULE_INSTANCE)
         .transformAndConcat(BindingDeclaration.CONTRIBUTING_MODULE)
         .filter(in(ownedModuleTypes()))
         .append(componentDescriptor().dependencies())
diff --git a/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java b/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java
index eec00e88f..56bc049d7 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java
@@ -22,6 +22,8 @@
 import static dagger.internal.codegen.ContributionBinding.FactoryCreationStrategy.ENUM_INSTANCE;
 import static dagger.internal.codegen.MapKeys.unwrapValue;
 import static dagger.internal.codegen.MoreAnnotationMirrors.unwrapOptionalEquivalence;
+import static javax.lang.model.element.Modifier.ABSTRACT;
+import static javax.lang.model.element.Modifier.STATIC;
 
 import com.google.auto.common.MoreTypes;
 import com.google.common.base.Equivalence;
@@ -44,6 +46,7 @@
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.AnnotationValue;
 import javax.lang.model.element.Element;
+import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
@@ -167,6 +170,30 @@ static Kind forMultibindingKey(Key key) {
    */
   protected abstract Kind bindingKind();
 
+  /**
+   * {@code true} if {@link #contributingModule()} is present and this is a nonabstract instance
+   * method.
+   */
+  boolean requiresModuleInstance() {
+    if (!bindingElement().isPresent() || !contributingModule().isPresent()) {
+      return false;
+    }
+    Set<Modifier> modifiers = bindingElement().get().getModifiers();
+    return !modifiers.contains(ABSTRACT) && !modifiers.contains(STATIC);
+  }
+
+  /**
+   * A predicate that passes for binding declarations for which {@link #requiresModuleInstance()} is
+   * {@code true}.
+   */
+  static final Predicate<ContributionBinding> REQUIRES_MODULE_INSTANCE =
+      new Predicate<ContributionBinding>() {
+        @Override
+        public boolean apply(ContributionBinding bindingDeclaration) {
+          return bindingDeclaration.requiresModuleInstance();
+        }
+      };
+
   /**
    * The strategy for getting an instance of a factory for a {@link ContributionBinding}.
    */
