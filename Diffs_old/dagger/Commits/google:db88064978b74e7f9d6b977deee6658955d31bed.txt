diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ChildComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ChildComponent.java
index dcba676a6..b95502cf8 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ChildComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ChildComponent.java
@@ -17,7 +17,7 @@
 
 import dagger.Subcomponent;
 
-@Subcomponent
+@Subcomponent(modules = test.subcomponent.hiding.b.CommonModuleName.class)
 interface ChildComponent {
   //ensure that t.s.h.a.CommonName gets bound in this component
   test.subcomponent.hiding.a.CommonName aCommonName();
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ParentComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ParentComponent.java
index 1534702d3..d7c66a679 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ParentComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ParentComponent.java
@@ -18,7 +18,7 @@
 import dagger.Component;
 import javax.inject.Singleton;
 
-@Component(modules = ParentModule.class)
+@Component(modules = test.subcomponent.hiding.a.CommonModuleName.class)
 @Singleton
 interface ParentComponent {
   // ensure that t.s.h.a.CommonName gets bound in this component
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ParentModule.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ParentModule.java
deleted file mode 100644
index e4c5d8b0d..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/ParentModule.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package test.subcomponent.hiding;
-
-import dagger.Module;
-import dagger.Provides;
-
-@Module
-final class ParentModule {
-  @Provides String provideString() {
-    return "";
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/a/CommonModuleName.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/a/CommonModuleName.java
new file mode 100644
index 000000000..ad692896f
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/a/CommonModuleName.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.subcomponent.hiding.a;
+
+import dagger.Module;
+import dagger.Provides;
+
+@Module
+public class CommonModuleName {
+  @Provides String provideString() {
+    return "a";
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/a/CommonName.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/a/CommonName.java
index 69cba12fc..b2aefda06 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/a/CommonName.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/a/CommonName.java
@@ -18,5 +18,14 @@
 import javax.inject.Inject;
 
 public final class CommonName {
-  @Inject CommonName(@SuppressWarnings("unused") String s) {}
+  private final String s;
+
+  @Inject CommonName(String s) {
+    this.s = s;
+  }
+
+  @Override
+  public String toString() {
+    return s;
+  }
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/b/CommonModuleName.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/b/CommonModuleName.java
new file mode 100644
index 000000000..66deab5aa
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/b/CommonModuleName.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.subcomponent.hiding.b;
+
+import dagger.Module;
+import dagger.Provides;
+
+@Module
+public class CommonModuleName {
+  @Provides int provideString() {
+    return 1;
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/b/CommonName.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/b/CommonName.java
index 815eec47a..023cbdbf2 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/b/CommonName.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/hiding/b/CommonName.java
@@ -1,7 +1,31 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package test.subcomponent.hiding.b;
 
 import javax.inject.Inject;
 
 public final class CommonName {
-  @Inject CommonName(@SuppressWarnings("unused") String s) {}
+  private final int i;
+
+  @Inject CommonName(int i) {
+    this.i = i;
+  }
+
+  @Override
+  public String toString() {
+    return Integer.toString(i);
+  }
 }
diff --git a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/hiding/SubcomponentHidingTest.java b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/hiding/SubcomponentHidingTest.java
new file mode 100644
index 000000000..76e916d3e
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/hiding/SubcomponentHidingTest.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.subcomponent.hiding;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+import static com.google.common.truth.Truth.assertThat;
+
+@RunWith(JUnit4.class)
+public class SubcomponentHidingTest {
+  @Test public void moduleNameHiding() {
+    ParentComponent parent = Dagger_ParentComponent.create();
+    assertThat(parent.aCommonName().toString()).isEqualTo("a");
+    assertThat(parent.newChildComponent().aCommonName().toString()).isEqualTo("a");
+    assertThat(parent.newChildComponent().bCommonName().toString()).isEqualTo("1");
+  }
+}
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 1f4f74ebe..f76042d33 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -232,7 +232,7 @@ Snippet getSnippetFor(ClassName usingClass) {
 
     boolean requiresBuilder = false;
 
-    Map<TypeElement, FieldWriter> componentContributionFields = Maps.newHashMap();
+    Map<TypeElement, MemberSelect> componentContributionFields = Maps.newHashMap();
 
     for (Entry<TypeElement, String> entry : componentContributionNames.entrySet()) {
       TypeElement contributionElement = entry.getKey();
@@ -240,7 +240,8 @@ Snippet getSnippetFor(ClassName usingClass) {
       FieldWriter contributionField =
           componentWriter.addField(contributionElement, contributionName);
       contributionField.addModifiers(PRIVATE, FINAL);
-      componentContributionFields.put(contributionElement, contributionField);
+      componentContributionFields.put(contributionElement, MemberSelect.instanceSelect(
+          componentWriter.name(), Snippet.format(contributionField.name())));
       FieldWriter builderField = builderWriter.addField(contributionElement, contributionName);
       builderField.addModifiers(PRIVATE);
       constructorWriter.body()
@@ -324,7 +325,7 @@ Snippet getSnippetFor(ClassName usingClass) {
   private void writeSubcomponents(BindingGraph input,
       ClassWriter componentWriter,
       Set<JavaWriter> proxyWriters,
-      Map<TypeElement, FieldWriter> componentContributionFields,
+      Map<TypeElement, MemberSelect> componentContributionFields,
       ImmutableMap<BindingKey, MemberSelect> parentMemberSelectSnippets,
       ImmutableMap<ContributionBinding, Snippet> multibindingContributionSnippets) {
     for (Entry<ExecutableElement, BindingGraph> subgraphEntry : input.subgraphs().entrySet()) {
@@ -358,7 +359,7 @@ private void writeSubcomponents(BindingGraph input,
   private ImmutableMap<BindingKey, MemberSelect> writeSubcomponent(
       BindingGraph input, ClassWriter componentWriter,
       Set<JavaWriter> proxyWriters,
-      ImmutableMap<TypeElement, FieldWriter> parentContributionFields,
+      ImmutableMap<TypeElement, MemberSelect> parentContributionFields,
       ImmutableMap<ContributionBinding, Snippet> parentMultibindingContributionSnippets,
       ImmutableMap<BindingKey, MemberSelect> parentMemberSelectSnippets) {
     // the full set of types that calling code uses to construct a component instance
@@ -376,7 +377,7 @@ private void writeSubcomponents(BindingGraph input,
     ConstructorWriter constructorWriter = componentWriter.addConstructor();
     constructorWriter.addModifiers(PRIVATE);
 
-    Map<TypeElement, FieldWriter> componentContributionFields =
+    Map<TypeElement, MemberSelect> componentContributionFields =
         Maps.newHashMap(parentContributionFields);
 
     for (Entry<TypeElement, String> entry : componentContributionNames.entrySet()) {
@@ -389,7 +390,8 @@ private void writeSubcomponents(BindingGraph input,
             ClassName.fromTypeElement(entry.getKey())));
       }
       contributionField.addModifiers(PRIVATE, FINAL);
-      componentContributionFields.put(contributionElement, contributionField);
+      componentContributionFields.put(contributionElement, MemberSelect.instanceSelect(
+          componentWriter.name(), Snippet.format(contributionField.name())));
     }
 
     Map<BindingKey, MemberSelect> memberSelectSnippetsBuilder = Maps.newHashMap();
@@ -628,7 +630,7 @@ private void writeInterfaceMethods(BindingGraph input, ClassWriter componentWrit
   private void initializeFrameworkTypes(BindingGraph input,
       ClassWriter componentWriter,
       ConstructorWriter constructorWriter,
-      Map<TypeElement, FieldWriter> componentContributionFields,
+      Map<TypeElement, MemberSelect> componentContributionFields,
       ImmutableMap<BindingKey, MemberSelect> memberSelectSnippets,
       ImmutableMap<ContributionBinding, Snippet> parentMultibindingContributionSnippets,
       ImmutableMap<ContributionBinding, Snippet> multibindingContributionSnippets)
@@ -868,7 +870,7 @@ public String visitType(TypeElement e, Void p) {
   private Snippet initializeFactoryForProvisionBinding(ProvisionBinding binding,
       ClassName componentName,
       ImmutableMap<ExecutableElement, TypeElement> dependencyMethodIndex,
-      Map<TypeElement, FieldWriter> contributionFields,
+      Map<TypeElement, MemberSelect> contributionFields,
       ImmutableMap<BindingKey, MemberSelect> memberSelectSnippets) {
     switch(binding.bindingKind()) {
       case COMPONENT:
@@ -889,7 +891,8 @@ private Snippet initializeFactoryForProvisionBinding(ProvisionBinding binding,
             "}"),
             ClassName.fromClass(Factory.class),
             TypeNames.forTypeMirror(binding.key().type()),
-            contributionFields.get(dependencyMethodIndex.get(binding.bindingElement())).name(),
+            contributionFields.get(dependencyMethodIndex.get(binding.bindingElement()))
+                .getSnippetFor(componentName),
             binding.bindingElement().getSimpleName().toString(),
             nullableSnippet);
         } else {
@@ -913,7 +916,8 @@ private Snippet initializeFactoryForProvisionBinding(ProvisionBinding binding,
             "}"),
             ClassName.fromClass(Factory.class),
             TypeNames.forTypeMirror(binding.key().type()),
-            contributionFields.get(dependencyMethodIndex.get(binding.bindingElement())).name(),
+            contributionFields.get(dependencyMethodIndex.get(binding.bindingElement()))
+                .getSnippetFor(componentName),
             binding.bindingElement().getSimpleName().toString(),
             failMsg);
         }
@@ -922,8 +926,8 @@ private Snippet initializeFactoryForProvisionBinding(ProvisionBinding binding,
         List<Snippet> parameters =
             Lists.newArrayListWithCapacity(binding.dependencies().size() + 1);
         if (binding.bindingKind().equals(PROVISION)) {
-          parameters.add(
-              Snippet.format(contributionFields.get(binding.contributedBy().get()).name()));
+          parameters.add(contributionFields.get(binding.contributedBy().get())
+              .getSnippetFor(componentName));
         }
         if (binding.memberInjectionRequest().isPresent()) {
           parameters.add(memberSelectSnippets.get(
@@ -950,7 +954,7 @@ private Snippet initializeFactoryForProductionBinding(ProductionBinding binding,
       BindingGraph bindingGraph,
       ClassName componentName,
       ImmutableMap<ExecutableElement, TypeElement> dependencyMethodIndex,
-      Map<TypeElement, FieldWriter> contributionFields,
+      Map<TypeElement, MemberSelect> contributionFields,
       ImmutableMap<BindingKey, MemberSelect> memberSelectSnippets) {
     switch (binding.bindingKind()) {
       case COMPONENT_PRODUCTION:
@@ -963,15 +967,18 @@ private Snippet initializeFactoryForProductionBinding(ProductionBinding binding,
             ClassName.fromClass(Producer.class),
             TypeNames.forTypeMirror(binding.key().type()),
             ClassName.fromClass(ListenableFuture.class),
-            contributionFields.get(dependencyMethodIndex.get(binding.bindingElement())).name(),
+            contributionFields.get(dependencyMethodIndex.get(binding.bindingElement()))
+                .getSnippetFor(componentName),
             binding.bindingElement().getSimpleName().toString());
       case IMMEDIATE:
       case FUTURE_PRODUCTION:
         List<Snippet> parameters =
             Lists.newArrayListWithCapacity(binding.dependencies().size() + 2);
-        parameters.add(Snippet.format(contributionFields.get(binding.bindingTypeElement()).name()));
-        parameters.add(Snippet.format(contributionFields.get(
-            bindingGraph.componentDescriptor().executorDependency().get()).name()));
+        parameters.add(contributionFields.get(binding.bindingTypeElement())
+            .getSnippetFor(componentName));
+        parameters.add(contributionFields.get(
+            bindingGraph.componentDescriptor().executorDependency().get())
+                .getSnippetFor(componentName));
         parameters.addAll(getProducerDependencyParameters(
             bindingGraph, componentName, binding.dependencies(), memberSelectSnippets));
 
