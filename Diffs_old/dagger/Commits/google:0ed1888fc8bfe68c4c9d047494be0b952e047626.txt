diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index e3d3bc3dd..156f80649 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -133,7 +133,6 @@ java_library(
         "BindingNode.java",
         "BindingRequest.java",
         "BindingType.java",
-        "BindingVariableNamer.java",  # needs KeyVariableNamer
         "BindsTypeChecker.java",
         "ChildFactoryMethodEdgeImpl.java",
         "ComponentCreatorDescriptor.java",
diff --git a/java/dagger/internal/codegen/BindingVariableNamer.java b/java/dagger/internal/codegen/BindingVariableNamer.java
deleted file mode 100644
index 8e7600cec..000000000
--- a/java/dagger/internal/codegen/BindingVariableNamer.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Copyright (C) 2014 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.internal.codegen;
-
-import dagger.model.DependencyRequest;
-import dagger.model.Key;
-
-/**
- * Suggests a variable name for a type based on a {@link Binding}. Prefer
- * {@link DependencyVariableNamer} for cases where a specific {@link DependencyRequest} is present.
- */
-final class BindingVariableNamer {
-  private BindingVariableNamer() {}
-
-  static String name(Binding binding) {
-    Key key = binding.key();
-    if (binding instanceof ContributionBinding
-        && ((ContributionBinding) binding).contributionType().equals(ContributionType.SET)) {
-      key = key.toBuilder().type(SetType.from(key.type()).elementType()).build();
-    }
-    return KeyVariableNamer.name(key);
-  }
-}
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index 4161943a3..dad02af46 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -617,7 +617,6 @@ BindingExpression wrapInMethod(
       return bindingExpression;
     }
 
-    ContributionBinding binding = resolvedBindings.contributionBinding();
     BindingMethodImplementation methodImplementation =
         methodImplementation(resolvedBindings, request, bindingExpression);
     Optional<ComponentMethodDescriptor> matchingComponentMethod =
@@ -627,14 +626,14 @@ BindingExpression wrapInMethod(
         && (componentImplementation.superclassImplementation().isPresent()
             || !matchingComponentMethod.isPresent())) {
       return modifiableBindingExpressions.wrapInModifiableMethodBindingExpression(
-          binding, request, methodImplementation);
+          request, methodImplementation);
     } else if (matchingComponentMethod.isPresent()) {
       ComponentMethodDescriptor componentMethod = matchingComponentMethod.get();
       return new ComponentMethodBindingExpression(
           request, methodImplementation, componentImplementation, componentMethod, types);
     } else {
       return new PrivateMethodBindingExpression(
-          binding, request, methodImplementation, componentImplementation, types);
+          request, methodImplementation, componentImplementation, types);
     }
   }
 
diff --git a/java/dagger/internal/codegen/ComponentImplementation.java b/java/dagger/internal/codegen/ComponentImplementation.java
index 06d345c34..e9ea026ca 100644
--- a/java/dagger/internal/codegen/ComponentImplementation.java
+++ b/java/dagger/internal/codegen/ComponentImplementation.java
@@ -474,16 +474,6 @@ String getUniqueMethodName(BindingRequest request) {
     return uniqueMethodName(request, KeyVariableNamer.name(request.key()));
   }
 
-  /**
-   * Returns a new, unique method name for a getter method exposing the given binding for the given
-   * request.
-   */
-  String getUniqueMethodName(BindingRequest request, ContributionBinding binding) {
-    // TODO(user): Use a better name for @MapKey binding instances.
-    // TODO(user): Include the binding method as part of the method name.
-    return uniqueMethodName(request, BindingVariableNamer.name(binding));
-  }
-
   private String uniqueMethodName(BindingRequest request, String bindingName) {
     String baseMethodName =
         "get"
diff --git a/java/dagger/internal/codegen/DeferredModifiableBindingExpression.java b/java/dagger/internal/codegen/DeferredModifiableBindingExpression.java
index ac529f620..502b921c1 100644
--- a/java/dagger/internal/codegen/DeferredModifiableBindingExpression.java
+++ b/java/dagger/internal/codegen/DeferredModifiableBindingExpression.java
@@ -64,7 +64,7 @@
 
   @Override
   String chooseMethodName() {
-    return componentImplementation.getUniqueMethodName(request, binding);
+    return componentImplementation.getUniqueMethodName(request);
   }
 
   @Override
diff --git a/java/dagger/internal/codegen/DoubleCheckedMethodImplementation.java b/java/dagger/internal/codegen/DoubleCheckedMethodImplementation.java
index e14d44969..6b56c0e9c 100644
--- a/java/dagger/internal/codegen/DoubleCheckedMethodImplementation.java
+++ b/java/dagger/internal/codegen/DoubleCheckedMethodImplementation.java
@@ -69,7 +69,7 @@ CodeBlock implementation(Supplier<CodeBlock> simpleBindingExpression) {
   }
 
   private String createField() {
-    String name = componentImplementation.getUniqueFieldName(BindingVariableNamer.name(binding));
+    String name = componentImplementation.getUniqueFieldName(KeyVariableNamer.name(binding.key()));
     componentImplementation.addField(
         PRIVATE_METHOD_SCOPED_FIELD,
         FieldSpec.builder(TypeName.OBJECT, name, PRIVATE, VOLATILE)
diff --git a/java/dagger/internal/codegen/FrameworkField.java b/java/dagger/internal/codegen/FrameworkField.java
index c04dcf11f..6d29c5e0e 100644
--- a/java/dagger/internal/codegen/FrameworkField.java
+++ b/java/dagger/internal/codegen/FrameworkField.java
@@ -92,7 +92,7 @@ private static String frameworkFieldName(ResolvedBindings resolvedBindings) {
             : name;
       }
     }
-    return BindingVariableNamer.name(resolvedBindings.binding());
+    return KeyVariableNamer.name(resolvedBindings.key());
   }
 
   private static final ElementVisitor<String, Binding> BINDING_ELEMENT_NAME =
diff --git a/java/dagger/internal/codegen/KeyVariableNamer.java b/java/dagger/internal/codegen/KeyVariableNamer.java
index 675498424..15a2d3c88 100644
--- a/java/dagger/internal/codegen/KeyVariableNamer.java
+++ b/java/dagger/internal/codegen/KeyVariableNamer.java
@@ -33,9 +33,8 @@
 import javax.lang.model.util.SimpleTypeVisitor8;
 
 /**
- * Suggests a variable name for a type based on a {@link Key}. Prefer {@link BindingVariableNamer}
- * for cases where a specific {@link Binding} is present, or {@link DependencyVariableNamer} for
- * cases where a specific {@link DependencyRequest} is present.
+ * Suggests a variable name for a type based on a {@link Key}. Prefer {@link
+ * DependencyVariableNamer} for cases where a specific {@link DependencyRequest} is present.
  */
 final class KeyVariableNamer {
   private static final TypeVisitor<Void, StringBuilder> TYPE_NAMER =
@@ -80,6 +79,10 @@ public Void visitArray(ArrayType type, StringBuilder builder) {
   private KeyVariableNamer() {}
 
   static String name(Key key) {
+    if (key.multibindingContributionIdentifier().isPresent()) {
+      return key.multibindingContributionIdentifier().get().bindingElement();
+    }
+
     StringBuilder builder = new StringBuilder();
 
     if (key.qualifier().isPresent()) {
diff --git a/java/dagger/internal/codegen/ModifiableBindingExpressions.java b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
index 7e6e276d6..4a87ad04a 100644
--- a/java/dagger/internal/codegen/ModifiableBindingExpressions.java
+++ b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
@@ -454,13 +454,10 @@ private boolean resolvedInThisComponent(BindingRequest request) {
    * implementation.
    */
   BindingExpression wrapInModifiableMethodBindingExpression(
-      ContributionBinding binding,
-      BindingRequest request,
-      BindingMethodImplementation methodImplementation) {
+      BindingRequest request, BindingMethodImplementation methodImplementation) {
     ModifiableBindingType modifiableBindingType = getModifiableBindingType(request);
     checkState(modifiableBindingType.isModifiable());
     return new ModifiableConcreteMethodBindingExpression(
-        binding,
         request,
         modifiableBindingType,
         methodImplementation,
diff --git a/java/dagger/internal/codegen/ModifiableConcreteMethodBindingExpression.java b/java/dagger/internal/codegen/ModifiableConcreteMethodBindingExpression.java
index e3583430b..8f5e109c0 100644
--- a/java/dagger/internal/codegen/ModifiableConcreteMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/ModifiableConcreteMethodBindingExpression.java
@@ -31,7 +31,7 @@
  * <p>Dependents of this binding expression will just call the modifiable binding method.
  */
 final class ModifiableConcreteMethodBindingExpression extends MethodBindingExpression {
-  private final ContributionBinding binding;
+
   private final BindingRequest request;
   private final ModifiableBindingType modifiableBindingType;
   private final BindingMethodImplementation methodImplementation;
@@ -40,7 +40,6 @@
   private Optional<String> methodName = Optional.empty();
 
   ModifiableConcreteMethodBindingExpression(
-      ContributionBinding binding,
       BindingRequest request,
       ModifiableBindingType modifiableBindingType,
       BindingMethodImplementation methodImplementation,
@@ -48,7 +47,6 @@
       boolean bindingCannotBeModified,
       DaggerTypes types) {
     super(request, methodImplementation, componentImplementation, types);
-    this.binding = checkNotNull(binding);
     this.request = checkNotNull(request);
     this.modifiableBindingType = checkNotNull(modifiableBindingType);
     this.methodImplementation = checkNotNull(methodImplementation);
@@ -68,7 +66,7 @@ protected void addMethod() {
     }
 
     // Add the modifiable binding method to the component if we haven't already.
-    methodName = Optional.of(componentImplementation.getUniqueMethodName(request, binding));
+    methodName = Optional.of(componentImplementation.getUniqueMethodName(request));
     componentImplementation.addModifiableBindingMethod(
         modifiableBindingType,
         request,
diff --git a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
index 0d6fc666d..9e87b1d2d 100644
--- a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
@@ -30,20 +30,17 @@
  * <p>Dependents of this binding expression will just call the no-arg private method.
  */
 final class PrivateMethodBindingExpression extends MethodBindingExpression {
-  private final ContributionBinding binding;
   private final BindingRequest request;
   private final BindingMethodImplementation methodImplementation;
   private final ComponentImplementation componentImplementation;
   private String methodName;
 
   PrivateMethodBindingExpression(
-      ContributionBinding binding,
       BindingRequest request,
       BindingMethodImplementation methodImplementation,
       ComponentImplementation componentImplementation,
       DaggerTypes types) {
     super(request, methodImplementation, componentImplementation, types);
-    this.binding = checkNotNull(binding);
     this.request = checkNotNull(request);
     this.methodImplementation = checkNotNull(methodImplementation);
     this.componentImplementation = checkNotNull(componentImplementation);
@@ -53,7 +50,7 @@
   protected void addMethod() {
     if (methodName == null) {
       // Have to set methodName field before implementing the method in order to handle recursion.
-      methodName = componentImplementation.getUniqueMethodName(request, binding);
+      methodName = componentImplementation.getUniqueMethodName(request);
       // TODO(user): Fix the order that these generated methods are written to the component.
       componentImplementation.addMethod(
           PRIVATE_METHOD,
diff --git a/java/dagger/internal/codegen/SingleCheckedMethodImplementation.java b/java/dagger/internal/codegen/SingleCheckedMethodImplementation.java
index 18dc04dcb..0804a2060 100644
--- a/java/dagger/internal/codegen/SingleCheckedMethodImplementation.java
+++ b/java/dagger/internal/codegen/SingleCheckedMethodImplementation.java
@@ -80,7 +80,7 @@ private FieldSpec createField() {
     String name =
         componentImplementation.getUniqueFieldName(
             request.isRequestKind(RequestKind.INSTANCE)
-                ? BindingVariableNamer.name(binding)
+                ? KeyVariableNamer.name(binding.key())
                 : FrameworkField.forResolvedBindings(resolvedBindings, Optional.empty()).name());
 
     FieldSpec.Builder builder = FieldSpec.builder(fieldType(), name, PRIVATE, VOLATILE);
diff --git a/java/dagger/model/Key.java b/java/dagger/model/Key.java
index e543d2ab0..e24e50d2d 100644
--- a/java/dagger/model/Key.java
+++ b/java/dagger/model/Key.java
@@ -25,6 +25,7 @@
 import com.google.common.base.Equivalence;
 import com.google.common.base.Equivalence.Wrapper;
 import com.google.common.base.Joiner;
+import java.util.Objects;
 import java.util.Optional;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.ExecutableElement;
@@ -164,7 +165,8 @@ public abstract Builder multibindingContributionIdentifier(
    * @see #multibindingContributionIdentifier()
    */
   public static final class MultibindingContributionIdentifier {
-    private final String identifierString;
+    private final String module;
+    private final String bindingElement;
 
     /**
      * @deprecated This is only meant to be called from code in {@code dagger.internal.codegen}.
@@ -173,9 +175,17 @@ public abstract Builder multibindingContributionIdentifier(
     @Deprecated
     public MultibindingContributionIdentifier(
         ExecutableElement bindingMethod, TypeElement contributingModule) {
-      this.identifierString =
-          String.format(
-              "%s#%s", contributingModule.getQualifiedName(), bindingMethod.getSimpleName());
+      this.module = contributingModule.getQualifiedName().toString();
+      this.bindingElement = bindingMethod.getSimpleName().toString();
+    }
+
+    /**
+     * @deprecated This is only meant to be called from code in {@code dagger.internal.codegen}.
+     * It is not part of a specified API and may change at any point.
+     */
+    @Deprecated
+    public String bindingElement() {
+      return bindingElement;
     }
 
     /**
@@ -186,19 +196,21 @@ public MultibindingContributionIdentifier(
      */
     @Override
     public String toString() {
-      return identifierString;
+      return String.format("%s#%s", module, bindingElement);
     }
 
     @Override
     public boolean equals(Object obj) {
-      return obj instanceof MultibindingContributionIdentifier
-          && ((MultibindingContributionIdentifier) obj)
-              .identifierString.equals(this.identifierString);
+      if (obj instanceof MultibindingContributionIdentifier) {
+        MultibindingContributionIdentifier other = (MultibindingContributionIdentifier) obj;
+        return module.equals(other.module) && bindingElement.equals(other.bindingElement);
+      }
+      return false;
     }
 
     @Override
     public int hashCode() {
-      return identifierString.hashCode();
+      return Objects.hash(module, bindingElement);
     }
   }
 }
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 7a6d71fcb..148c06834 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -5445,7 +5445,7 @@ public void missingBindingAccessInLeafAndAncestor() {
             "      initialize();",
             "    }",
             "",
-            "    private Object getObject() {",
+            "    private Object getUnresolvedSetBinding() {",
             "      return LeafModule_UnresolvedSetBindingFactory.proxyUnresolvedSetBinding(",
             "          getMissing(), getMissingProvider());",
             "    }",
@@ -5467,7 +5467,8 @@ public void missingBindingAccessInLeafAndAncestor() {
             "",
             "    protected Set<Object> getSetOfObject() {",
             "      return ImmutableSet.<Object>of(",
-            "          AncestorModule_SetContributionFactory.proxySetContribution(), getObject());",
+            "          AncestorModule_SetContributionFactory.proxySetContribution(),",
+            "          getUnresolvedSetBinding());",
             "    }",
             "",
             "    @Override",
@@ -6665,16 +6666,14 @@ public void bindsMissingDep_Multibindings() {
             "",
             "  @Override",
             "  public Set<CharSequence> set() {",
-            "    return ImmutableSet.<CharSequence>of(getCharSequence());",
+            "    return ImmutableSet.<CharSequence>of(getBindsMultibindingWithMissingDep());",
             "  }",
             "",
             // The expected output here is subtle: the Key of
             // LeafModule.bindsMultibindingWithMissingDep() is Set<CharSequence>, but the binding
             // method should only be returning an individual CharSequence. Otherwise the
             // ImmutableSet factory method above will fail.
-            // TODO(b/117833324): It would be great to get this method name to match the binding
-            // element name
-            "  protected abstract CharSequence getCharSequence();",
+            "  protected abstract CharSequence getBindsMultibindingWithMissingDep();",
             "}");
     Compilation compilation = compile(filesToCompile.build());
     assertThat(compilation).succeededWithoutWarnings();
@@ -6807,14 +6806,14 @@ public void modifiableBindingMethods_namesDedupedAcrossImplementations() {
             "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() {}",
             "",
-            "    private Runnable getRunnable() {",
+            "    private Runnable getDepOnBarThing() {",
             "      return LeafModule_DepOnBarThingFactory.proxyDepOnBarThing(getThing2());",
             "    }",
             "",
             "    protected abstract Thing getThing2();",
             "",
             "    protected Set<Runnable> getSetOfRunnable() {",
-            "      return ImmutableSet.<Runnable>of(getRunnable());",
+            "      return ImmutableSet.<Runnable>of(getDepOnBarThing());",
             "    }",
             "",
             "    @Override",
@@ -6948,7 +6947,7 @@ public void subcomponentInducedFromAncestor() {
             "  protected abstract class MaybeLeafImpl extends DaggerMaybeLeaf {",
             "    protected MaybeLeafImpl() {}",
             "",
-            "    private Object getObject() {",
+            "    private Object getInducedSet() {",
             "      return InducedSubcomponentModule_InducedSetFactory.proxyInducedSet(",
             "          getInducedSubcomponentBuilder());",
             "    }",
@@ -6956,7 +6955,7 @@ public void subcomponentInducedFromAncestor() {
             "    protected abstract Object getInducedSubcomponentBuilder();",
             "",
             "    protected Set<Object> getSetOfObject() {",
-            "      return ImmutableSet.<Object>of(getObject());",
+            "      return ImmutableSet.<Object>of(getInducedSet());",
             "    }",
             "",
             "    @Override",
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index a761d52c0..0c9e7979d 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -137,7 +137,7 @@ public void mapBindingsWithEnumKey() {
                 "  private MapModuleOne mapModuleOne;",
                 "  private MapModuleTwo mapModuleTwo;",
                 "",
-                "  private Provider<Handler> getMapOfPathEnumAndProviderOfHandlerProvider() {",
+                "  private Provider<Handler> getProvideAdminHandlerProvider() {",
                 "    Object local = provideAdminHandlerProvider;",
                 "    if (local == null) {",
                 "      local = new SwitchingProvider<>(1);",
@@ -146,7 +146,7 @@ public void mapBindingsWithEnumKey() {
                 "    return (Provider<Handler>) local;",
                 "  }",
                 "",
-                "  private Provider<Handler> getMapOfPathEnumAndProviderOfHandlerProvider2() {",
+                "  private Provider<Handler> getProvideLoginHandlerProvider() {",
                 "    Object local = provideLoginHandlerProvider;",
                 "    if (local == null) {",
                 "      local = new SwitchingProvider<>(2);",
@@ -158,8 +158,8 @@ public void mapBindingsWithEnumKey() {
                 "  private Map<PathEnum, Provider<Handler>>",
                 "        getMapOfPathEnumAndProviderOfHandler() {",
                 "    return ImmutableMap.<PathEnum, Provider<Handler>>of(",
-                "        PathEnum.ADMIN, getMapOfPathEnumAndProviderOfHandlerProvider(),",
-                "        PathEnum.LOGIN, getMapOfPathEnumAndProviderOfHandlerProvider2());",
+                "        PathEnum.ADMIN, getProvideAdminHandlerProvider(),",
+                "        PathEnum.LOGIN, getProvideLoginHandlerProvider());",
                 "  }",
                 "",
                 "  @Override",
@@ -543,7 +543,7 @@ public void mapBindingsWithStringKey() {
                 "  private MapModuleOne mapModuleOne;",
                 "  private MapModuleTwo mapModuleTwo;",
                 "",
-                "  private Provider<Handler> getMapOfStringAndProviderOfHandlerProvider() {",
+                "  private Provider<Handler> getProvideAdminHandlerProvider() {",
                 "    Object local = provideAdminHandlerProvider;",
                 "    if (local == null) {",
                 "      local = new SwitchingProvider<>(1);",
@@ -552,7 +552,7 @@ public void mapBindingsWithStringKey() {
                 "    return (Provider<Handler>) local;",
                 "  }",
                 "",
-                "  private Provider<Handler> getMapOfStringAndProviderOfHandlerProvider2() {",
+                "  private Provider<Handler> getProvideLoginHandlerProvider() {",
                 "    Object local = provideLoginHandlerProvider;",
                 "    if (local == null) {",
                 "      local = new SwitchingProvider<>(2);",
@@ -564,8 +564,8 @@ public void mapBindingsWithStringKey() {
                 "  private Map<String, Provider<Handler>>",
                 "        getMapOfStringAndProviderOfHandler() {",
                 "    return ImmutableMap.<String, Provider<Handler>>of(",
-                "        \"Admin\", getMapOfStringAndProviderOfHandlerProvider(),",
-                "        \"Login\", getMapOfStringAndProviderOfHandlerProvider2());",
+                "        \"Admin\", getProvideAdminHandlerProvider(),",
+                "        \"Login\", getProvideLoginHandlerProvider());",
                 "  }",
                 "",
                 "  @Override",
@@ -747,33 +747,31 @@ public void mapBindingsWithWrappedKey() {
                 "    this.mapModuleTwo = builder.mapModuleTwo;",
                 "  }",
                 "",
-                "  private Provider<Handler>",
-                "        getMapOfWrappedClassKeyAndProviderOfHandlerProvider() {",
-                "        Object local = provideAdminHandlerProvider;",
-                "        if (local == null) {",
-                "          local = new SwitchingProvider<>(1);",
-                "          provideAdminHandlerProvider = (Provider<Handler>) local;",
-                "        }",
-                "        return (Provider<Handler>) local;",
+                "  private Provider<Handler> getProvideAdminHandlerProvider() {",
+                "    Object local = provideAdminHandlerProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(1);",
+                "      provideAdminHandlerProvider = (Provider<Handler>) local;",
+                "    }",
+                "    return (Provider<Handler>) local;",
                 "  }",
                 "",
-                "  private Provider<Handler>",
-                "        getMapOfWrappedClassKeyAndProviderOfHandlerProvider2() {",
-                "        Object local = provideLoginHandlerProvider;",
-                "        if (local == null) {",
-                "          local = new SwitchingProvider<>(2);",
-                "          provideLoginHandlerProvider = (Provider<Handler>) local;",
-                "        }",
-                "        return (Provider<Handler>) local;",
+                "  private Provider<Handler> getProvideLoginHandlerProvider() {",
+                "    Object local = provideLoginHandlerProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(2);",
+                "      provideLoginHandlerProvider = (Provider<Handler>) local;",
+                "    }",
+                "    return (Provider<Handler>) local;",
                 "  }",
                 "",
                 "  private Map<WrappedClassKey, Provider<Handler>>",
                 "      getMapOfWrappedClassKeyAndProviderOfHandler() {",
                 "    return ImmutableMap.<WrappedClassKey, Provider<Handler>>of(",
                 "        WrappedClassKeyCreator.createWrappedClassKey(Integer.class),",
-                "        getMapOfWrappedClassKeyAndProviderOfHandlerProvider(),",
+                "        getProvideAdminHandlerProvider(),",
                 "        WrappedClassKeyCreator.createWrappedClassKey(Long.class),",
-                "        getMapOfWrappedClassKeyAndProviderOfHandlerProvider2());",
+                "        getProvideLoginHandlerProvider());",
                 "  }",
                 "",
                 "  @Override",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
index 7d6f62ccc..a5d854893 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
@@ -101,7 +101,7 @@ public void mapBindings() {
                 "  private volatile Provider<Long> provideLong1Provider;",
                 "  private volatile Provider<Long> provideLong2Provider;",
                 "",
-                "  private Provider<Integer> getMapOfIntegerAndProviderOfIntegerProvider() {",
+                "  private Provider<Integer> getProvideIntProvider() {",
                 "    Object local = provideIntProvider;",
                 "    if (local == null) {",
                 "      local = new SwitchingProvider<>(0);",
@@ -110,7 +110,7 @@ public void mapBindings() {
                 "    return (Provider<Integer>) local;",
                 "  }",
                 "",
-                "  private Provider<Long> getMapOfLongAndProviderOfLongProvider() {",
+                "  private Provider<Long> getProvideLong0Provider() {",
                 "    Object local = provideLong0Provider;",
                 "    if (local == null) {",
                 "      local = new SwitchingProvider<>(1);",
@@ -119,7 +119,7 @@ public void mapBindings() {
                 "    return (Provider<Long>) local;",
                 "  }",
                 "",
-                "  private Provider<Long> getMapOfLongAndProviderOfLongProvider2() {",
+                "  private Provider<Long> getProvideLong1Provider() {",
                 "    Object local = provideLong1Provider;",
                 "    if (local == null) {",
                 "      local = new SwitchingProvider<>(2);",
@@ -128,7 +128,7 @@ public void mapBindings() {
                 "    return (Provider<Long>) local;",
                 "  }",
                 "",
-                "  private Provider<Long> getMapOfLongAndProviderOfLongProvider3() {",
+                "  private Provider<Long> getProvideLong2Provider() {",
                 "    Object local = provideLong2Provider;",
                 "    if (local == null) {",
                 "      local = new SwitchingProvider<>(3);",
@@ -160,7 +160,7 @@ public void mapBindings() {
                 "        0, MapModule_ProvideIntFactory.create());")
             .addLinesIn(
                 FAST_INIT_MODE,
-                "        0, getMapOfIntegerAndProviderOfIntegerProvider());")
+                "        0, getProvideIntProvider());")
             .addLines(
                 "  }",
                 "",
@@ -183,9 +183,9 @@ public void mapBindings() {
                 "        .put(2L, MapModule_ProvideLong2Factory.create())")
             .addLinesIn(
                 FAST_INIT_MODE,
-                "        .put(0L, getMapOfLongAndProviderOfLongProvider())",
-                "        .put(1L, getMapOfLongAndProviderOfLongProvider2())",
-                "        .put(2L, getMapOfLongAndProviderOfLongProvider3())")
+                "        .put(0L, getProvideLong0Provider())",
+                "        .put(1L, getProvideLong1Provider())",
+                "        .put(2L, getProvideLong2Provider())")
             .addLines( //
                 "        .build();", "  }")
             .addLinesIn(
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
index 343f2613d..79e7e8af9 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
@@ -136,7 +136,7 @@ public void mapBindings() {
                 "  private volatile Provider<Long> provideLong1Provider;",
                 "  private volatile Provider<Long> provideLong2Provider;",
                 "",
-                "  private Provider<Integer> getMapOfIntegerAndProviderOfIntegerProvider() {",
+                "  private Provider<Integer> getProvideIntProvider() {",
                 "    Object local = provideIntProvider;",
                 "    if (local == null) {",
                 "      local = new SwitchingProvider<>(0);",
@@ -145,7 +145,7 @@ public void mapBindings() {
                 "    return (Provider<Integer>) local;",
                 "  }",
                 "",
-                "  private Provider<Long> getMapOfLongAndProviderOfLongProvider() {",
+                "  private Provider<Long> getProvideLong0Provider() {",
                 "    Object local = provideLong0Provider;",
                 "    if (local == null) {",
                 "      local = new SwitchingProvider<>(1);",
@@ -154,7 +154,7 @@ public void mapBindings() {
                 "    return (Provider<Long>) local;",
                 "  }",
                 "",
-                "  private Provider<Long> getMapOfLongAndProviderOfLongProvider2() {",
+                "  private Provider<Long> getProvideLong1Provider() {",
                 "    Object local = provideLong1Provider;",
                 "    if (local == null) {",
                 "      local = new SwitchingProvider<>(2);",
@@ -163,7 +163,7 @@ public void mapBindings() {
                 "    return (Provider<Long>) local;",
                 "  }",
                 "",
-                "  private Provider<Long> getMapOfLongAndProviderOfLongProvider3() {",
+                "  private Provider<Long> getProvideLong2Provider() {",
                 "    Object local = provideLong2Provider;",
                 "    if (local == null) {",
                 "      local = new SwitchingProvider<>(3);",
@@ -195,7 +195,7 @@ public void mapBindings() {
                 "        0, MapModule_ProvideIntFactory.create());")
             .addLinesIn(
                 FAST_INIT_MODE,
-                "        0, getMapOfIntegerAndProviderOfIntegerProvider());")
+                "        0, getProvideIntProvider());")
             .addLines(
                 "  }",
                 "",
@@ -217,9 +217,9 @@ public void mapBindings() {
                 "      2L, MapModule_ProvideLong2Factory.create());")
             .addLinesIn(
                 FAST_INIT_MODE,
-                "      0L, getMapOfLongAndProviderOfLongProvider(),",
-                "      1L, getMapOfLongAndProviderOfLongProvider2(),",
-                "      2L, getMapOfLongAndProviderOfLongProvider3());")
+                "      0L, getProvideLong0Provider(),",
+                "      1L, getProvideLong1Provider(),",
+                "      2L, getProvideLong2Provider());")
             .addLines(
                 "  }",
                 "",
@@ -236,7 +236,7 @@ public void mapBindings() {
                 "    private volatile Provider<Long> provideLong5Provider;",
                 "    private SubImpl() {}",
                 "",
-                "    private Provider<Long> getMapOfLongAndProviderOfLongProvider() {",
+                "    private Provider<Long> getProvideLong3Provider() {",
                 "      Object local = provideLong3Provider;",
                 "      if (local == null) {",
                 "        local = new SwitchingProvider<>(0);",
@@ -245,7 +245,7 @@ public void mapBindings() {
                 "      return (Provider<Long>) local;",
                 "    }",
                 "",
-                "    private Provider<Long> getMapOfLongAndProviderOfLongProvider2() {",
+                "    private Provider<Long> getProvideLong4Provider() {",
                 "      Object local = provideLong4Provider;",
                 "      if (local == null) {",
                 "        local = new SwitchingProvider<>(1);",
@@ -254,7 +254,7 @@ public void mapBindings() {
                 "      return (Provider<Long>) local;",
                 "    }",
                 "",
-                "    private Provider<Long> getMapOfLongAndProviderOfLongProvider3() {",
+                "    private Provider<Long> getProvideLong5Provider() {",
                 "      Object local = provideLong5Provider;",
                 "      if (local == null) {",
                 "        local = new SwitchingProvider<>(2);",
@@ -288,15 +288,12 @@ public void mapBindings() {
                 "          .put(5L, SubcomponentMapModule_ProvideLong5Factory.create())")
             .addLinesIn(
                 FAST_INIT_MODE,
-                "          .put(0L, DaggerTestComponent.this",
-                "              .getMapOfLongAndProviderOfLongProvider())",
-                "          .put(1L, DaggerTestComponent.this",
-                "              .getMapOfLongAndProviderOfLongProvider2())",
-                "          .put(2L, DaggerTestComponent.this",
-                "              .getMapOfLongAndProviderOfLongProvider3())",
-                "          .put(3L, getMapOfLongAndProviderOfLongProvider())",
-                "          .put(4L, getMapOfLongAndProviderOfLongProvider2())",
-                "          .put(5L, getMapOfLongAndProviderOfLongProvider3())")
+                "          .put(0L, DaggerTestComponent.this.getProvideLong0Provider())",
+                "          .put(1L, DaggerTestComponent.this.getProvideLong1Provider())",
+                "          .put(2L, DaggerTestComponent.this.getProvideLong2Provider())",
+                "          .put(3L, getProvideLong3Provider())",
+                "          .put(4L, getProvideLong4Provider())",
+                "          .put(5L, getProvideLong5Provider())")
             .addLines( //
                 "          .build();", "    }")
             .addLinesIn(
