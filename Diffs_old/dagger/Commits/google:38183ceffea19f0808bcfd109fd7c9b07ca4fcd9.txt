diff --git a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
index 58ad71c2e..1eb8fbb69 100644
--- a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
@@ -223,7 +223,10 @@ private TypeSpec providerTypeSpec() {
   private String methodName(DependencyRequest.Kind dependencyKind) {
     // TODO(user): Use a better name for @MapKey binding instances.
     // TODO(user): Include the binding method as part of the method name.
-    return String.format("get%s%s", bindingName(), dependencyKindName(dependencyKind));
+    if (dependencyKind.equals(DependencyRequest.Kind.INSTANCE)) {
+      return "get" + bindingName();
+    }
+    return "get" + bindingName() + dependencyKindName(dependencyKind);
   }
 
   /** Returns the canonical name for the {@link Binding}. */
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index d0b117488..af55c3707 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -569,7 +569,7 @@ public void componentWithInvalidModule() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private B getBInstance() {",
+                "  private B getB() {",
                 "    return Preconditions.checkNotNull(",
                 "        testModule.b(new C()), " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
@@ -581,7 +581,7 @@ public void componentWithInvalidModule() {
                 "",
                 "  @Override",
                 "  public A a() {",
-                "    return new A(getBInstance());",
+                "    return new A(getB());",
                 "  }",
                 "",
                 "  public static final class Builder {",
@@ -688,14 +688,14 @@ public void componentWithAbstractModule() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private B getBInstance() {",
+                "  private B getB() {",
                 "    return Preconditions.checkNotNull(",
                 "        TestModule.b(new C()), " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
                 "",
                 "  @Override",
                 "  public A a() {",
-                "    return new A(getBInstance());",
+                "    return new A(getB());",
                 "  }",
                 "",
                 "  public static final class Builder {",
@@ -1822,12 +1822,12 @@ public void testDefaultPackage() {
                 "  public static TestComponent create() {",
                 "    return new Builder().build();",
                 "  }",
-                "  private B getBInstance() {",
+                "  private B getB() {",
                 "    return new B(c());",
                 "  }",
                 "  @Override",
                 "  public A a() {",
-                "    return new A(getBInstance());",
+                "    return new A(getB());",
                 "  }",
                 "",
                 "  @Override",
diff --git a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
index e27954f18..51d839322 100644
--- a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
+++ b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
@@ -488,14 +488,14 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Set<Object> getSetOfObjectInstance() {",
+                "  private Set<Object> getSetOfObject() {",
                 "    return ImmutableSet.<Object>of(Preconditions.checkNotNull(",
                 "        ParentModule.contribution(), " + NPE_FROM_PROVIDES_METHOD + "));",
                 "  }",
                 "",
-                "  private Object getObjectInstance() {",
+                "  private Object getObject() {",
                 "    return Preconditions.checkNotNull(",
-                "        parentModule.reliesOnMultibinding(getSetOfObjectInstance()),",
+                "        parentModule.reliesOnMultibinding(getSetOfObject()),",
                 "        " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
                 "",
@@ -509,7 +509,7 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "    return new Provider<Object>() {",
                 "      @Override",
                 "      public Object get() {",
-                "        return getObjectInstance();",
+                "        return getObject();",
                 "      }",
                 "    };",
                 "  }",
@@ -540,7 +540,7 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "  private final class TestSubcomponentImpl implements TestSubcomponent {",
                 "    private TestSubcomponentImpl() {}",
                 "",
-                "    private Set<Object> getSetOfObjectInstance() {",
+                "    private Set<Object> getSetOfObject() {",
                 "      return ImmutableSet.<Object>of(",
                 "          Preconditions.checkNotNull(",
                 "              ParentModule.contribution(), " + NPE_FROM_PROVIDES_METHOD + "),",
@@ -548,10 +548,10 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "              ChildModule.contribution(), " + NPE_FROM_PROVIDES_METHOD + "));",
                 "    }",
                 "",
-                "    private Object getObjectInstance() {",
+                "    private Object getObject() {",
                 "      return Preconditions.checkNotNull(",
                 "          DaggerTestComponent.this.parentModule.reliesOnMultibinding(",
-                "              getSetOfObjectInstance()),",
+                "              getSetOfObject()),",
                 "          " + NPE_FROM_PROVIDES_METHOD + ");",
                 "    }",
                 "",
@@ -560,7 +560,7 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "      return new Provider<Object>() {",
                 "        @Override",
                 "        public Object get() {",
-                "          return getObjectInstance();",
+                "          return getObject();",
                 "        }",
                 "      };",
                 "    }",
diff --git a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
index 5e5edae96..e4a1b25e3 100644
--- a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
+++ b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
@@ -199,7 +199,7 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private DependsOnScoped getDependsOnScopedInstance() {",
+                "  private DependsOnScoped getDependsOnScoped() {",
                 "    return new DependsOnScoped(scopedTypeProvider.get());",
                 "  }",
                 "",
@@ -207,7 +207,7 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 "    return new Provider<DependsOnScoped>() {",
                 "      @Override",
                 "      public DependsOnScoped get() {",
-                "        return getDependsOnScopedInstance();",
+                "        return getDependsOnScoped();",
                 "      }",
                 "    };",
                 "  }",
diff --git a/javatests/dagger/internal/codegen/InaccessibleTypeTest.java b/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
index 11fdaca02..e0248f407 100644
--- a/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
+++ b/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
@@ -111,12 +111,12 @@ public InaccessibleTypeTest(CompilerMode compilerMode) {
             "    return new Builder().build();",
             "  }",
             "",
-            "  private Object getNonPublicClass1Instance() {",
+            "  private Object getNonPublicClass1() {",
             "    return NonPublicClass1_Factory.newNonPublicClass1(",
             "        NoDepClass_Factory.newNoDepClass());",
             "  }",
             "",
-            "  private Object getNonPublicClass2Instance() {",
+            "  private Object getNonPublicClass2() {",
             "    return NonPublicClass2_Factory.newNonPublicClass2(",
             "        NoDepClass_Factory.newNoDepClass());",
             "  }",
@@ -124,8 +124,8 @@ public InaccessibleTypeTest(CompilerMode compilerMode) {
             "  @Override",
             "  public PublicClass publicClass() {",
             "    return PublicClass_Factory.newPublicClass(",
-            "        getNonPublicClass1Instance(), ",
-            "        getNonPublicClass2Instance(), ",
+            "        getNonPublicClass1(), ",
+            "        getNonPublicClass2(), ",
             "        NoDepClass_Factory.newNoDepClass());",
             "  }",
             "",
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 752e7194b..3fd494a6d 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -178,7 +178,7 @@ public void mapBindingsWithEnumKey() {
                 "  }",
                 "",
                 "  private Map<PathEnum, Provider<Handler>>",
-                "        getMapOfPathEnumAndProviderOfHandlerInstance() {",
+                "        getMapOfPathEnumAndProviderOfHandler() {",
                 "    return ImmutableMap.<PathEnum, Provider<Handler>>of(",
                 "        PathEnum.ADMIN, getMapOfPathEnumAndProviderOfHandlerProvider(),",
                 "        PathEnum.LOGIN, getMapOfPathEnumAndProviderOfHandlerProvider2());",
@@ -195,7 +195,7 @@ public void mapBindingsWithEnumKey() {
                 "    return new Provider<Map<PathEnum, Provider<Handler>>>() {",
                 "      @Override",
                 "      public Map<PathEnum, Provider<Handler>> get() {",
-                "        return getMapOfPathEnumAndProviderOfHandlerInstance();",
+                "        return getMapOfPathEnumAndProviderOfHandler();",
                 "      }",
                 "    };",
                 "  }",
@@ -466,7 +466,7 @@ public void mapBindingsWithInaccessibleKeys() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Map getMapOfPackagePrivateEnumAndIntegerInstance() {",
+                "  private Map getMapOfPackagePrivateEnumAndInteger() {",
                 "    return ImmutableMap.of(",
                 "        MapModule_EnumKeyFactory.mapKey(), MapModule.enumKey());",
                 "  }",
@@ -510,7 +510,7 @@ public void mapBindingsWithInaccessibleKeys() {
                 "",
                 "  @Override",
                 "  public Object inaccessibleEnum() {",
-                "    return getMapOfPackagePrivateEnumAndIntegerInstance();",
+                "    return getMapOfPackagePrivateEnumAndInteger();",
                 "  }",
                 "",
                 "  @Override",
@@ -723,7 +723,7 @@ public void mapBindingsWithStringKey() {
                 "  }",
                 "",
                 "  private Map<String, Provider<Handler>>",
-                "        getMapOfStringAndProviderOfHandlerInstance() {",
+                "        getMapOfStringAndProviderOfHandler() {",
                 "    return ImmutableMap.<String, Provider<Handler>>of(",
                 "        \"Admin\", getMapOfStringAndProviderOfHandlerProvider(),",
                 "        \"Login\", getMapOfStringAndProviderOfHandlerProvider2());",
@@ -740,7 +740,7 @@ public void mapBindingsWithStringKey() {
                 "    return new Provider<Map<String, Provider<Handler>>>() {",
                 "      @Override",
                 "      public Map<String, Provider<Handler>> get() {",
-                "        return getMapOfStringAndProviderOfHandlerInstance();",
+                "        return getMapOfStringAndProviderOfHandler();",
                 "      }",
                 "    };",
                 "  }",
@@ -995,7 +995,7 @@ public void mapBindingsWithWrappedKey() {
                 "  }",
                 "",
                 "  private Map<WrappedClassKey, Provider<Handler>>",
-                "      getMapOfWrappedClassKeyAndProviderOfHandlerInstance() {",
+                "      getMapOfWrappedClassKeyAndProviderOfHandler() {",
                 "    return ImmutableMap.<WrappedClassKey, Provider<Handler>>of(",
                 "        WrappedClassKeyCreator.createWrappedClassKey(Integer.class),",
                 "        getMapOfWrappedClassKeyAndProviderOfHandlerProvider(),",
@@ -1014,7 +1014,7 @@ public void mapBindingsWithWrappedKey() {
                 "    return new Provider<Map<WrappedClassKey, Provider<Handler>>>() {",
                 "      @Override",
                 "      public Map<WrappedClassKey, Provider<Handler>> get() {",
-                "        return getMapOfWrappedClassKeyAndProviderOfHandlerInstance();",
+                "        return getMapOfWrappedClassKeyAndProviderOfHandler();",
                 "      }",
                 "    };",
                 "  }",
@@ -1250,7 +1250,7 @@ public void mapBindingsWithNonProviderValue() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Map<PathEnum, Handler> getMapOfPathEnumAndHandlerInstance() {",
+                "  private Map<PathEnum, Handler> getMapOfPathEnumAndHandler() {",
                 "    return ImmutableMap.<PathEnum, Handler>of(",
                 "        PathEnum.ADMIN,",
                 "        Preconditions.checkNotNull(",
@@ -1272,7 +1272,7 @@ public void mapBindingsWithNonProviderValue() {
                 "    return new Provider<Map<PathEnum, Handler>>() {",
                 "      @Override",
                 "      public Map<PathEnum, Handler> get() {",
-                "        return getMapOfPathEnumAndHandlerInstance();",
+                "        return getMapOfPathEnumAndHandler();",
                 "      }",
                 "    };",
                 "  }",
diff --git a/javatests/dagger/internal/codegen/MembersInjectionTest.java b/javatests/dagger/internal/codegen/MembersInjectionTest.java
index 208bb3e40..4738d1f7e 100644
--- a/javatests/dagger/internal/codegen/MembersInjectionTest.java
+++ b/javatests/dagger/internal/codegen/MembersInjectionTest.java
@@ -1309,14 +1309,14 @@ public void accessibility() {
             "    return new Builder().build();",
             "  }",
             "",
-            "  private Object getInaccessibleInstance() {",
+            "  private Object getInaccessible() {",
             "    return injectInaccessible(Inaccessible_Factory.newInaccessible());",
             "  }",
             "",
             "  @Override",
             "  public UsesInaccessible usesInaccessible() {",
             "    return UsesInaccessible_Factory.newUsesInaccessible(",
-            "        getInaccessibleInstance());",
+            "        getInaccessible());",
             "  }",
             "",
             // TODO(ronshapiro): if possible, it would be great to rename "instance", but we
@@ -1559,13 +1559,13 @@ public void publicSupertypeHiddenSubtype() {
             "    return new Builder().build();",
             "  }",
             "",
-            "  private Object getSubtypeInstance() {",
+            "  private Object getSubtype() {",
             "    return injectSubtype(Subtype_Factory.newSubtype());",
             "  }",
             "",
             "  @Override",
             "  public InjectsSubtype injectsSubtype() {",
-            "    return InjectsSubtype_Factory.newInjectsSubtype(getSubtypeInstance());",
+            "    return InjectsSubtype_Factory.newInjectsSubtype(getSubtype());",
             "  }",
             "",
             "  @CanIgnoreReturnValue",
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index acce0c29a..8e3f0f5f9 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -270,7 +270,7 @@ public void simpleComponent() {
                 "    };",
                 "  }",
                 "",
-                "  private TestClass.B getBInstance() {",
+                "  private TestClass.B getB() {",
                 "    return Preconditions.checkNotNull(",
                 "        bModule.b(new TestClass.C()), " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
@@ -279,7 +279,7 @@ public void simpleComponent() {
                 "    return new Provider<TestClass.B>() {",
                 "      @Override",
                 "      public TestClass.B get() {",
-                "        return getBInstance();",
+                "        return getB();",
                 "      }",
                 "    };",
                 "  }",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
index c7e076e17..e051c2859 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
@@ -241,7 +241,7 @@ public void inaccessible() {
             "    return new Builder().build();",
             "  }",
             "",
-            "  private Set getSetOfInaccessible2Instance() {",
+            "  private Set getSetOfInaccessible2() {",
             "    return SetBuilder.newSetBuilder(1)",
             "        .addAll(Preconditions.checkNotNull(",
             "            TestModule_EmptySetFactory.proxyEmptySet(),",
@@ -253,7 +253,7 @@ public void inaccessible() {
             "  public UsesInaccessible usesInaccessible() {",
             "    return UsesInaccessible_Factory.newUsesInaccessible(",
             "        (Set) Collections.emptySet(),",
-            "        (Set) getSetOfInaccessible2Instance());",
+            "        (Set) getSetOfInaccessible2());",
             "  }",
             "",
             "  public static final class Builder {",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
index efbd88644..ba6555912 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
@@ -252,7 +252,7 @@ public void inaccessible() {
             "    return new Builder().build();",
             "  }",
             "",
-            "  private Set getSetOfInaccessible2Instance() {",
+            "  private Set getSetOfInaccessible2() {",
             "    return ImmutableSet.copyOf(",
             "        Preconditions.checkNotNull(",
             "            TestModule_EmptySetFactory.proxyEmptySet(),",
@@ -263,7 +263,7 @@ public void inaccessible() {
             "  public UsesInaccessible usesInaccessible() {",
             "    return UsesInaccessible_Factory.newUsesInaccessible(",
             "        (Set) ImmutableSet.of(),",
-            "        (Set) getSetOfInaccessible2Instance());",
+            "        (Set) getSetOfInaccessible2());",
             "  }",
             "",
             "  public static final class Builder {",
diff --git a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
index d9c7de008..42b11eec8 100644
--- a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -448,14 +448,14 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
             "      this.childModule = new ChildModule();",
             "    }",
             "",
-            "    private NeedsDep1 getNeedsDep1Instance() {",
+            "    private NeedsDep1 getNeedsDep1() {",
             "      return new NeedsDep1(DaggerParentComponent.this.dep1Provider.get());",
             "    }",
             "",
-            "    private A getAInstance() {",
+            "    private A getA() {",
             "      return injectA(",
             "          A_Factory.newA(",
-            "              getNeedsDep1Instance(),",
+            "              getNeedsDep1(),",
             "              DaggerParentComponent.this.dep1Provider.get(),",
             "              DaggerParentComponent.this.dep2Provider.get()));",
             "    }",
@@ -463,7 +463,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
             "    @Override",
             "    public Object getObject() {",
             "      return Preconditions.checkNotNull(",
-            "          childModule.provideObject(getAInstance()),",
+            "          childModule.provideObject(getA()),",
             "          " + NPE_FROM_PROVIDES_METHOD + ");",
             "    }",
             "",
