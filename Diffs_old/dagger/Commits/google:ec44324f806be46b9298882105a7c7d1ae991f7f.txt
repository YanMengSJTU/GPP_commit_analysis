diff --git a/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java b/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
index 6f8be978f..8bb18db55 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
@@ -43,13 +43,6 @@ static String provideFooKey(@SuppressWarnings("unused") double doubleDependency)
     return "foo value";
   }
 
-  @Provides
-  @IntoMap
-  @StringKey("foo @Provides(type)")
-  static String provideFooProvidesTypeKey(@SuppressWarnings("unused") double doubleDependency) {
-    return "foo @Provides(type) value";
-  }
-
   @Provides
   @IntoMap
   @StringKey("bar")
@@ -83,15 +76,9 @@ static int provideSixToSet() {
     return 6;
   }
 
-  @Provides
-  @IntoSet
-  static int provideIntoSetWithProvidesType() {
-    return -100;
-  }
-
   @Provides
   @ElementsIntoSet
-  static Set<Integer> provideElementsIntoSetWithProvidesType() {
+  static Set<Integer> provideElementsIntoSet() {
     Set<Integer> set = new HashSet<>();
     set.add(-101);
     set.add(-102);
diff --git a/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java b/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
index 0cb664293..89b75cb13 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
@@ -65,10 +65,9 @@ public MultibindingTest(MultibindingComponent multibindingComponent) {
 
   @Test public void map() {
     Map<String, String> map = multibindingComponent.map();
-    assertThat(map).hasSize(3);
+    assertThat(map).hasSize(2);
     assertThat(map).containsEntry("foo", "foo value");
     assertThat(map).containsEntry("bar", "bar value");
-    assertThat(map).containsEntry("foo @Provides(type)", "foo @Provides(type) value");
   }
 
   @Test public void mapOfArrays() {
@@ -82,18 +81,16 @@ public MultibindingTest(MultibindingComponent multibindingComponent) {
 
   @Test public void mapOfProviders() {
     Map<String, Provider<String>> mapOfProviders = multibindingComponent.mapOfProviders();
-    assertThat(mapOfProviders).hasSize(3);
+    assertThat(mapOfProviders).hasSize(2);
     assertThat(mapOfProviders.get("foo").get()).isEqualTo("foo value");
     assertThat(mapOfProviders.get("bar").get()).isEqualTo("bar value");
-    assertThat(mapOfProviders.get("foo @Provides(type)").get())
-        .isEqualTo("foo @Provides(type) value");
   }
 
   @Test public void mapKeysAndValues() {
     assertThat(multibindingComponent.mapKeys())
-        .containsExactly("foo", "bar", "foo @Provides(type)");
+        .containsExactly("foo", "bar");
     assertThat(multibindingComponent.mapValues())
-        .containsExactly("foo value", "bar value", "foo @Provides(type) value");
+        .containsExactly("foo value", "bar value");
   }
 
   @Test public void nestedKeyMap() {
@@ -164,7 +161,7 @@ public void shortKeyMap() {
 
   @Test public void setBindings() {
     assertThat(multibindingComponent.set())
-        .containsExactly(-90, -17, -1, 5, 6, 832, 1742, -100, -101, -102);
+        .containsExactly(-90, -17, -1, 5, 6, 832, 1742, -101, -102);
   }
 
   @Test
diff --git a/compiler/src/main/java/dagger/internal/codegen/ContributionType.java b/compiler/src/main/java/dagger/internal/codegen/ContributionType.java
index 72ba2862d..e3f8e37a3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ContributionType.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ContributionType.java
@@ -24,9 +24,7 @@
 import dagger.multibindings.IntoSet;
 import javax.lang.model.element.ExecutableElement;
 
-/**
- * Whether a binding or declaration is for a unique contribution or a map or set multibinding.
- */
+/** Whether a binding or declaration is for a unique contribution or a map or set multibinding. */
 enum ContributionType {
   /** Represents map bindings. */
   MAP,
@@ -38,41 +36,21 @@
   UNIQUE,
   ;
 
-  /**
-   * An object that is associated with a {@link ContributionType}.
-   */
+  /** An object that is associated with a {@link ContributionType}. */
   interface HasContributionType {
 
     /** The contribution type of this object. */
     ContributionType contributionType();
   }
 
-  /**
-   * {@code true} if this is for a multibinding.
-   */
+  /** {@code true} if this is for a multibinding. */
   boolean isMultibinding() {
     return !this.equals(UNIQUE);
   }
 
-  /** The contribution type for a given provision type. */
-  private static ContributionType forProvisionType(Provides.Type provisionType) {
-    switch (provisionType) {
-      case SET:
-        return SET;
-      case SET_VALUES:
-        return SET_VALUES;
-      case MAP:
-        return MAP;
-      case UNIQUE:
-        return UNIQUE;
-      default:
-        throw new AssertionError("Unknown provision type: " + provisionType);
-    }
-  }
-
   /**
    * The contribution type from a binding method annotations. Presumes a well-formed binding method
-   * (only one of @IntoSet, @IntoMap, @ElementsIntoSet, @Provides.type or @Produces.type. {@link
+   * (at most one of @IntoSet, @IntoMap, @ElementsIntoSet and @Provides.type). {@link
    * ProvidesMethodValidator} and {@link ProducesMethodValidator} validate correctness on their own.
    */
   static ContributionType fromBindingMethod(ExecutableElement method) {
@@ -83,11 +61,6 @@ static ContributionType fromBindingMethod(ExecutableElement method) {
     } else if (isAnnotationPresent(method, ElementsIntoSet.class)) {
       return ContributionType.SET_VALUES;
     }
-
-    if (isAnnotationPresent(method, Provides.class)) {
-      return forProvisionType(method.getAnnotation(Provides.class).type());
-    } else {
-      return ContributionType.UNIQUE;
-    }
+    return ContributionType.UNIQUE;
   }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/DaggerElements.java b/compiler/src/main/java/dagger/internal/codegen/DaggerElements.java
index fe0fa02b2..f88dcdecc 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DaggerElements.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DaggerElements.java
@@ -161,4 +161,12 @@ static boolean isAnnotationPresent(Element element, TypeMirror annotationType) {
         annotationClassNames.contains(
             MoreTypes.asTypeElement(annotation.getAnnotationType()).getQualifiedName().toString());
   }
+
+  static ImmutableSet<String> suppressedWarnings(Element element) {
+    SuppressWarnings suppressedWarnings = element.getAnnotation(SuppressWarnings.class);
+    if (suppressedWarnings == null) {
+      return ImmutableSet.of();
+    }
+    return ImmutableSet.copyOf(suppressedWarnings.value());
+  }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java b/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
index 5c45f66d0..9e398c4a6 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
@@ -24,7 +24,6 @@
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
 import dagger.Multibindings;
-import dagger.Provides;
 import dagger.multibindings.Multibinds;
 import dagger.releasablereferences.CanReleaseReferences;
 import dagger.releasablereferences.ForReleasableReferences;
@@ -655,9 +654,6 @@ static String moduleSubcomponentsDoesntHaveBuilder(
    *     through this method.
    */
   static String stripCommonTypePrefixes(String type) {
-    // Special case this enum's constants since they will be incredibly common.
-    type = type.replace(Provides.Type.class.getCanonicalName() + ".", "");
-
     // Do regex magic to remove common packages we care to shorten.
     Matcher matcher = COMMON_PACKAGE_PATTERN.matcher(type);
     StringBuilder result = new StringBuilder();
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducesMethodValidator.java b/compiler/src/main/java/dagger/internal/codegen/ProducesMethodValidator.java
index 3dd9e7ce2..bc71b08f1 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProducesMethodValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducesMethodValidator.java
@@ -45,8 +45,6 @@
  * @author Jesse Beder
  * @since 2.0
  */
-// TODO(beder): Consider unifying this with the ProvidesMethodValidator after Provides.Type and
-// Produces.Type are reconciled.
 final class ProducesMethodValidator extends BindingMethodValidator {
 
   ProducesMethodValidator(Elements elements, Types types) {
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index 6aff1c649..cfc8aa7fa 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -1183,8 +1183,6 @@ public void testDefaultPackage() {
     JavaFileObject emptySetModuleFile = JavaFileObjects.forSourceLines("test.EmptySetModule",
         "package test;",
         "",
-        "import static dagger.Provides.Type.SET_VALUES;",
-        "",
         "import dagger.Module;",
         "import dagger.Provides;",
         "import dagger.multibindings.ElementsIntoSet;",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
index 0cea3c2ab..a271187ef 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -148,8 +148,6 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
     JavaFileObject mapModuleTwoFile =JavaFileObjects.forSourceLines("test.MapModuleTwo",
         "package test;",
         "",
-        "import static dagger.Provides.Type.MAP;",
-        "",
         "import dagger.Module;",
         "import dagger.Provides;",
         "import dagger.multibindings.IntoMap;",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MultibindingTest.java b/compiler/src/test/java/dagger/internal/codegen/MultibindingTest.java
index 2ba66056b..dce0b65d2 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MultibindingTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MultibindingTest.java
@@ -16,6 +16,7 @@
 
 package dagger.internal.codegen;
 
+import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.JavaSourcesSubject.assertThat;
 
 import com.google.testing.compile.JavaFileObjects;
@@ -26,41 +27,6 @@
 
 @RunWith(JUnit4.class)
 public class MultibindingTest {
-  @Test
-  public void providesTypeAndAnnotationOnSameMethod_failsToCompile() {
-    JavaFileObject module =
-        JavaFileObjects.forSourceLines(
-            "test.MultibindingModule",
-            "package test;",
-            "",
-            "import static dagger.Provides.Type.SET;",
-            "import static dagger.Provides.Type.UNIQUE;",
-            "",
-            "import dagger.Module;",
-            "import dagger.Provides;",
-            "import dagger.multibindings.IntoSet;",
-            "",
-            "@Module",
-            "class MultibindingModule {",
-            "  @Provides(type = SET) @IntoSet Integer provideInt() { ",
-            "    return 1;",
-            "  }",
-            "  @Provides(type = UNIQUE) @IntoSet Integer provideConflictingMultibindingTypes() { ",
-            "    return 2;",
-            "  }",
-            "}");
-
-    assertThat(module)
-        .processedWith(new ComponentProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Provides.type cannot be used with multibinding annotations")
-        .in(module)
-        .onLine(12)
-        .and()
-        .withErrorContaining("@Provides.type cannot be used with multibinding annotations")
-        .in(module)
-        .onLine(15);
-  }
 
   @Test
   public void providesWithTwoMultibindingAnnotations_failsToCompile() {
diff --git a/core/src/main/java/dagger/Provides.java b/core/src/main/java/dagger/Provides.java
index 7e7baf78b..de204557b 100644
--- a/core/src/main/java/dagger/Provides.java
+++ b/core/src/main/java/dagger/Provides.java
@@ -19,7 +19,6 @@
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
-import dagger.internal.Beta;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
@@ -46,52 +45,4 @@
  */
 @Documented @Target(METHOD) @Retention(RUNTIME)
 public @interface Provides {
-  /** The type of binding into which the return type of the annotated method contributes. */
-  @Deprecated
-  enum Type {
-    /**
-     * The method is the only one which can produce the value for the specified return type. This
-     * is the default behavior.
-     */
-    UNIQUE,
-
-    /**
-     * The method's return type forms the generic type argument of a {@code Set<T>}, and the
-     * returned value is contributed to the set. The object graph will pass dependencies to the
-     * method as parameters. The {@code Set<T>} produced from the accumulation of values will be
-     * immutable.
-     *
-     * @see <a href="http://google.github.io/dagger/multibindings#set-multibindings">Set
-     *      multibinding</a>
-     */
-    SET,
-
-    /**
-     * Like {@link #SET}, except the method's return type is {@code Set<T>}, where any values are
-     * contributed to the set. An example use is to provide a default empty set binding, which is
-     * otherwise not possible using {@link #SET}.
-     *
-     * @see <a href="http://google.github.io/dagger/multibindings#set-multibindings">Set
-     *      multibinding</a>
-     */
-    SET_VALUES,
-
-    /**
-     * The method's return type forms the type argument for the value of a
-     * {@code Map<K, Provider<V>>}, and the combination of the annotated key and the returned value
-     * is contributed to the map as a key/value pair. The {@code Map<K, Provider<V>>} produced from
-     * the accumulation of values will be immutable.
-     *
-     * @see <a href="http://google.github.io/dagger/multibindings#map-multibindings">Map
-     *      multibinding</a>
-     */
-    @Beta
-    MAP;
-  }
-
-  /**
-   * @deprecated Use the multibinding annotations in {@link dagger.multibindings}.
-   */
-  @Deprecated
-  Type type() default Type.UNIQUE;
 }
