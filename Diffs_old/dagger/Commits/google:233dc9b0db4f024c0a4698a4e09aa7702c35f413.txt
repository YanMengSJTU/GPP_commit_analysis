diff --git a/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java b/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
index 04f8372cc..1732afe1a 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
@@ -148,6 +148,8 @@ static String inconsistentMapKeyAnnotationsError(String key) {
   static final String PRODUCES_METHOD_SET_VALUES_RETURN_SET =
       "@Produces methods of type set values must return a Set or ListenableFuture of Set";
 
+  static final String PRODUCES_METHOD_SCOPE = "@Produces methods may not have scope annotations.";
+
   static final String BINDING_METHOD_THROWS =
       "@%s methods may only throw unchecked exceptions or exceptions subclassing Exception";
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducesMethodValidator.java b/compiler/src/main/java/dagger/internal/codegen/ProducesMethodValidator.java
index 497be53d6..c6468fa6f 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProducesMethodValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducesMethodValidator.java
@@ -34,6 +34,7 @@
 import static dagger.internal.codegen.ErrorMessages.PRODUCES_METHOD_NULLABLE;
 import static dagger.internal.codegen.ErrorMessages.PRODUCES_METHOD_RAW_FUTURE;
 import static dagger.internal.codegen.ErrorMessages.PRODUCES_METHOD_RETURN_TYPE;
+import static dagger.internal.codegen.ErrorMessages.PRODUCES_METHOD_SCOPE;
 import static dagger.internal.codegen.ErrorMessages.PRODUCES_METHOD_SET_VALUES_RETURN_SET;
 
 /**
@@ -54,6 +55,7 @@
   protected void checkMethod(ValidationReport.Builder<ExecutableElement> builder) {
     super.checkMethod(builder);
     checkNullable(builder);
+    checkScope(builder);
   }
 
   /** Adds a warning if a {@link Produces @Produces} method is declared nullable. */
@@ -64,6 +66,13 @@ private void checkNullable(ValidationReport.Builder<ExecutableElement> builder)
     }
   }
 
+  /** Adds an error if a {@link Produces @Produces} method has a scope annotation. */
+  private void checkScope(ValidationReport.Builder<ExecutableElement> builder) {
+    if (!Scope.scopesOf(builder.getSubject()).isEmpty()) {
+      builder.addError(PRODUCES_METHOD_SCOPE);
+    }
+  }
+
   @Override
   protected String badReturnTypeMessage() {
     return formatErrorMessage(PRODUCES_METHOD_RETURN_TYPE);
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
index 2c783ef2f..59e50536a 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
@@ -41,6 +41,7 @@
 import static dagger.internal.codegen.ErrorMessages.BINDING_METHOD_WITH_SAME_NAME;
 import static dagger.internal.codegen.ErrorMessages.PRODUCES_METHOD_RAW_FUTURE;
 import static dagger.internal.codegen.ErrorMessages.PRODUCES_METHOD_RETURN_TYPE;
+import static dagger.internal.codegen.ErrorMessages.PRODUCES_METHOD_SCOPE;
 import static dagger.internal.codegen.ErrorMessages.PRODUCES_METHOD_SET_VALUES_RETURN_SET;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
@@ -197,6 +198,11 @@ public void producesMethodThrowsThrowable() {
                 + "Exception");
   }
 
+  @Test public void producesMethodWithScope() {
+    assertThatProductionModuleMethod("@Produces @Singleton String str() { return \"\"; }")
+        .hasError(PRODUCES_METHOD_SCOPE);
+  }
+
   @Test
   public void privateModule() {
     JavaFileObject moduleFile = JavaFileObjects.forSourceLines("test.Enclosing",
