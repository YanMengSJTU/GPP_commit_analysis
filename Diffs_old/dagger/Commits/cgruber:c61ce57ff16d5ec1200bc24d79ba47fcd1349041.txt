diff --git a/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java b/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
index 08433a988..00c93e6d0 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
@@ -18,10 +18,10 @@
 import dagger.Module;
 import dagger.Multibindings;
 import dagger.Provides;
-import dagger.mapkeys.ClassKey;
-import dagger.mapkeys.IntKey;
-import dagger.mapkeys.LongKey;
 import dagger.mapkeys.StringKey;
+import dagger.multibindings.ClassKey;
+import dagger.multibindings.IntKey;
+import dagger.multibindings.LongKey;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.Collection;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/WrappedAnnotationKey.java b/compiler/src/it/functional-tests/src/main/java/test/WrappedAnnotationKey.java
index 5d6e86dc7..4a50167b9 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/WrappedAnnotationKey.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/WrappedAnnotationKey.java
@@ -16,8 +16,8 @@
 package test;
 
 import dagger.MapKey;
-import dagger.mapkeys.ClassKey;
 import dagger.mapkeys.StringKey;
+import dagger.multibindings.ClassKey;
 
 @MapKey(unwrapValue = false)
 @interface WrappedAnnotationKey {
diff --git a/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java b/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
index e0ad8e651..ed52aa876 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
@@ -15,8 +15,8 @@
 
 import com.google.auto.value.AutoAnnotation;
 import com.google.common.collect.ImmutableMap;
-import dagger.mapkeys.ClassKey;
 import dagger.mapkeys.StringKey;
+import dagger.multibindings.ClassKey;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.Map;
@@ -154,7 +154,7 @@ public void shortKeyMap() {
   @Test public void complexQualifierSet() {
     assertThat(multibindingComponent.complexQualifierStringSet()).containsExactly("foo");
   }
-  
+
   @Test
   public void emptySet() {
     assertThat(multibindingComponent.emptySet()).isEmpty();
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingProducerModule.java b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingProducerModule.java
index d63da4d50..8e311f8fe 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingProducerModule.java
+++ b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/multibindings/MultibindingProducerModule.java
@@ -19,7 +19,7 @@
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.Multibindings;
-import dagger.mapkeys.IntKey;
+import dagger.multibindings.IntKey;
 import dagger.producers.Produced;
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
diff --git a/core/src/main/java/dagger/mapkeys/ClassKey.java b/core/src/main/java/dagger/multibindings/ClassKey.java
similarity index 97%
rename from core/src/main/java/dagger/mapkeys/ClassKey.java
rename to core/src/main/java/dagger/multibindings/ClassKey.java
index 5a0746da0..52dc16d0d 100644
--- a/core/src/main/java/dagger/mapkeys/ClassKey.java
+++ b/core/src/main/java/dagger/multibindings/ClassKey.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package dagger.mapkeys;
+package dagger.multibindings;
 
 import dagger.MapKey;
 import dagger.internal.Beta;
diff --git a/core/src/main/java/dagger/mapkeys/IntKey.java b/core/src/main/java/dagger/multibindings/IntKey.java
similarity index 96%
rename from core/src/main/java/dagger/mapkeys/IntKey.java
rename to core/src/main/java/dagger/multibindings/IntKey.java
index 90290f51b..766f6dc99 100644
--- a/core/src/main/java/dagger/mapkeys/IntKey.java
+++ b/core/src/main/java/dagger/multibindings/IntKey.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package dagger.mapkeys;
+package dagger.multibindings;
 
 import dagger.MapKey;
 import dagger.internal.Beta;
diff --git a/core/src/main/java/dagger/mapkeys/LongKey.java b/core/src/main/java/dagger/multibindings/LongKey.java
similarity index 96%
rename from core/src/main/java/dagger/mapkeys/LongKey.java
rename to core/src/main/java/dagger/multibindings/LongKey.java
index 3ffb360b3..9d9a40800 100644
--- a/core/src/main/java/dagger/mapkeys/LongKey.java
+++ b/core/src/main/java/dagger/multibindings/LongKey.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package dagger.mapkeys;
+package dagger.multibindings;
 
 import dagger.MapKey;
 import dagger.internal.Beta;
diff --git a/core/src/main/java/dagger/multibindings/package-info.java b/core/src/main/java/dagger/multibindings/package-info.java
new file mode 100644
index 000000000..26fe0830c
--- /dev/null
+++ b/core/src/main/java/dagger/multibindings/package-info.java
@@ -0,0 +1,17 @@
+/*
+ * Copyright (C) 2016 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.multibindings;
