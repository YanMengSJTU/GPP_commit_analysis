diff --git a/compiler/src/it/functional-tests/src/main/java/test/builderbinds/TestComponent.java b/compiler/src/it/functional-tests/src/main/java/test/builderbinds/TestComponent.java
index 7ecc83547..2fefb3f86 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/builderbinds/TestComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/builderbinds/TestComponent.java
@@ -25,6 +25,8 @@
 interface TestComponent {
   int count();
 
+  long l();
+
   @Named("input")
   String input();
 
@@ -39,6 +41,9 @@
     @BindsInstance
     Builder count(int count);
 
+    @BindsInstance
+    Builder l(long l);
+
     @BindsInstance
     Builder input(@Named("input") String input);
 
diff --git a/compiler/src/it/functional-tests/src/test/java/test/builderbinds/BuilderBindsTest.java b/compiler/src/it/functional-tests/src/test/java/test/builderbinds/BuilderBindsTest.java
index d71603e96..377369d41 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/builderbinds/BuilderBindsTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/builderbinds/BuilderBindsTest.java
@@ -33,6 +33,7 @@ public void builderBinds() {
     TestComponent component =
         DaggerTestComponent.builder()
             .count(5)
+            .l(10L)
             .input("foo")
             .nullableInput("bar")
             .listOfString(Arrays.asList("x", "y", "z"))
@@ -48,6 +49,7 @@ public void builderBindsNullableWithNull() {
     TestComponent component =
         DaggerTestComponent.builder()
             .count(5)
+            .l(10L)
             .input("foo")
             .nullableInput(null)
             .listOfString(Collections.<String>emptyList())
@@ -61,7 +63,7 @@ public void builderBindsNullableWithNull() {
   @Test
   public void builderBindsNonNullableWithNull() {
     try {
-      DaggerTestComponent.builder().count(5).input(null);
+      DaggerTestComponent.builder().count(5).l(10L).input(null);
       fail("expected NullPointerException");
     } catch (NullPointerException expected) {
     }
@@ -71,6 +73,7 @@ public void builderBindsNonNullableWithNull() {
   public void builderBindsPrimitiveNotSet() {
     try {
       DaggerTestComponent.builder()
+          .l(10L)
           .input("foo")
           .nullableInput("bar")
           .listOfString(Collections.<String>emptyList())
@@ -85,6 +88,7 @@ public void builderBindsNonNullableNotSet() {
     try {
       DaggerTestComponent.builder()
           .count(5)
+          .l(10L)
           .nullableInput("foo")
           .listOfString(Collections.<String>emptyList())
           .build();
@@ -98,6 +102,7 @@ public void builderBindsNullableNotSet() {
     TestComponent component =
         DaggerTestComponent.builder()
             .count(5)
+            .l(10L)
             .input("foo")
             .listOfString(Collections.<String>emptyList())
             .build();
diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index 15d0e9dc1..807d34b8e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -375,7 +375,7 @@ protected void addBuilder() {
     ImmutableMap.Builder<ComponentRequirement, FieldSpec> builderFields = ImmutableMap.builder();
     for (ComponentRequirement componentRequirement : graph.componentRequirements()) {
       String contributionName =
-          builderFieldNames.getUniqueName(simpleVariableName(componentRequirement.typeElement()));
+          builderFieldNames.getUniqueName(componentRequirement.variableName());
       FieldSpec builderField =
           FieldSpec.builder(TypeName.get(componentRequirement.type()), contributionName, PRIVATE)
               .build();
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
index ec805cb08..86f4a48ba 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -698,7 +698,8 @@ private ComponentRequirement requirementForBuilderMethod(
             dependencyRequestFactory.forRequiredResolvedVariable(
                 getOnlyElement(method.getParameters()),
                 getOnlyElement(resolvedType.getParameterTypes()));
-        return ComponentRequirement.forBinding(request.key(), request.isNullable());
+        return ComponentRequirement.forBinding(
+            request.key(), request.isNullable(), method.getSimpleName().toString());
       }
 
       TypeMirror type = getOnlyElement(resolvedType.getParameterTypes());
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentRequirement.java b/compiler/src/main/java/dagger/internal/codegen/ComponentRequirement.java
index 9fb7deb3a..428deef86 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentRequirement.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentRequirement.java
@@ -16,7 +16,9 @@
 
 package dagger.internal.codegen;
 
+import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
+import static dagger.internal.codegen.SourceFiles.simpleVariableName;
 import static dagger.internal.codegen.Util.componentCanMakeNewInstances;
 import static dagger.internal.codegen.Util.requiresAPassedInstance;
 
@@ -103,12 +105,16 @@ NullPolicy nullPolicy(Elements elements, Types types) {
   /** The key for this requirement, if one is available. */
   abstract Optional<Key> key();
 
+  /** Returns the name for this requirement that could be used as a variable. */
+  abstract String variableName();
+
   static ComponentRequirement forDependency(TypeMirror type) {
     return new AutoValue_ComponentRequirement(
         Kind.DEPENDENCY,
         MoreTypes.equivalence().wrap(checkNotNull(type)),
         Optional.empty(),
-        Optional.empty());
+        Optional.empty(),
+        simpleVariableName(MoreTypes.asTypeElement(type)));
   }
 
   static ComponentRequirement forModule(TypeMirror type) {
@@ -116,18 +122,24 @@ static ComponentRequirement forModule(TypeMirror type) {
         Kind.MODULE,
         MoreTypes.equivalence().wrap(checkNotNull(type)),
         Optional.empty(),
-        Optional.empty());
+        Optional.empty(),
+        simpleVariableName(MoreTypes.asTypeElement(type)));
   }
 
-  static ComponentRequirement forBinding(Key key, boolean nullable) {
+  static ComponentRequirement forBinding(Key key, boolean nullable, String variableName) {
     return new AutoValue_ComponentRequirement(
         Kind.BINDING,
         key.wrappedType(),
         nullable ? Optional.of(NullPolicy.ALLOW) : Optional.empty(),
-        Optional.of(key));
+        Optional.of(key),
+        variableName);
   }
 
   static ComponentRequirement forBinding(ContributionBinding binding) {
-    return forBinding(binding.key(), binding.nullableType().isPresent());
+    checkArgument(binding.bindingKind().equals(ContributionBinding.Kind.BUILDER_BINDING));
+    return forBinding(
+        binding.key(),
+        binding.nullableType().isPresent(),
+        binding.bindingElement().get().getSimpleName().toString());
   }
 }
