diff --git a/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
index 20b45fd53..203e28d80 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
@@ -17,6 +17,7 @@
 
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableSet;
+import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.FieldSpec;
 import com.squareup.javapoet.TypeSpec;
@@ -60,7 +61,9 @@ ClassName nameGeneratedType(TypeElement componentElement) {
   Optional<TypeSpec.Builder> write(ClassName generatedTypeName, TypeElement componentElement) {
     return Optional.of(
         classBuilder(generatedTypeName.simpleName())
-            .addAnnotation(Module.class)
+            .addAnnotation(
+                AnnotationSpec.builder(Module.class)
+                    .build())
             .addModifiers(FINAL)
 
             // TODO(beder): Replace this default set binding with EmptyCollections when it exists.
@@ -71,19 +74,15 @@ ClassName nameGeneratedType(TypeElement componentElement) {
                     .addAnnotation(PROVIDES_SET_VALUES)
                     .addStatement("return $T.of()", ClassName.get(ImmutableSet.class))
                     .build())
-
             .addField(
                 FieldSpec.builder(MonitorCache.class, "monitorCache", PRIVATE, FINAL)
                     .initializer("new $T()", MonitorCache.class)
                     .build())
-
             .addMethod(
                 methodBuilder("monitor")
                     .returns(ProductionComponentMonitor.class)
                     .addAnnotation(Provides.class)
-                    .addParameter(
-                        providerOf(ClassName.get(componentElement.asType())),
-                        "component")
+                    .addParameter(providerOf(ClassName.get(componentElement.asType())), "component")
                     .addParameter(providerOf(SET_OF_FACTORIES), "factories")
                     .addStatement("return monitorCache.monitor(component, factories)")
                     .build()));
