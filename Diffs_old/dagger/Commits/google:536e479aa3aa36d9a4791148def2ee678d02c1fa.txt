diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 98a8c8c1e..2297e9ac6 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -59,6 +59,7 @@
 import javax.lang.model.element.Name;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
+import javax.lang.model.util.Elements;
 
 import static com.google.common.base.CaseFormat.LOWER_CAMEL;
 import static dagger.internal.codegen.DependencyRequest.Kind.MEMBERS_INJECTOR;
@@ -83,10 +84,12 @@
  * @since 2.0
  */
 final class ComponentGenerator extends SourceFileGenerator<ComponentDescriptor> {
+  private final Elements elements;
   private final Key.Factory keyFactory;
 
-  ComponentGenerator(Filer filer, Key.Factory keyFactory) {
+  ComponentGenerator(Filer filer, Elements elements, Key.Factory keyFactory) {
     super(filer);
+    this.elements = elements;
     this.keyFactory = keyFactory;
   }
 
@@ -115,7 +118,10 @@ JavaWriter write(ClassName componentName, ComponentDescriptor input)  {
 
     JavaWriter writer = JavaWriter.inPackage(componentName.packageName());
     ClassWriter componentWriter = writer.addClass(componentName.simpleName());
-    componentWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getCanonicalName());
+    if (elements.getTypeElement(Generated.class.getCanonicalName()) != null) {
+      componentWriter.annotate(Generated.class)
+          .setValue(ComponentProcessor.class.getCanonicalName());
+    }
     componentWriter.addModifiers(PUBLIC, FINAL);
     componentWriter.addImplementedType(componentDefinitionTypeName);
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index c2f907f89..612368b03 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -89,11 +89,11 @@ public synchronized void init(ProcessingEnvironment processingEnv) {
         new ComponentDescriptor.Factory(elements, types, injectBindingRegistry,
             provisionBindingFactory, dependencyRequestFactory);
 
-    FactoryGenerator factoryGenerator = new FactoryGenerator(filer);
+    FactoryGenerator factoryGenerator = new FactoryGenerator(filer, elements);
     MembersInjectorGenerator membersInjectorGenerator =
         new MembersInjectorGenerator(filer, elements, types);
     ComponentGenerator componentGenerator =
-        new ComponentGenerator(filer, keyFactory);
+        new ComponentGenerator(filer, elements, keyFactory);
 
     this.processingSteps = ImmutableList.<ProcessingStep>of(
         new InjectProcessingStep(
diff --git a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
index 5c1f07e6a..fa7273cd0 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
@@ -39,6 +39,7 @@
 import javax.inject.Inject;
 import javax.inject.Provider;
 import javax.lang.model.element.Element;
+import javax.lang.model.util.Elements;
 
 import static dagger.internal.codegen.ProvisionBinding.Kind.PROVISION;
 import static dagger.internal.codegen.SourceFiles.factoryNameForProvisionBinding;
@@ -56,8 +57,11 @@
  * @since 2.0
  */
 final class FactoryGenerator extends SourceFileGenerator<ProvisionBinding> {
-  FactoryGenerator(Filer filer) {
+  private final Elements elements;
+
+  FactoryGenerator(Filer filer, Elements elements) {
     super(filer);
+    this.elements = elements;
   }
 
   @Override
@@ -82,7 +86,10 @@ JavaWriter write(ClassName generatedTypeName, ProvisionBinding binding) {
     JavaWriter writer = JavaWriter.inPackage(generatedTypeName.packageName());
 
     ClassWriter factoryWriter = writer.addClass(generatedTypeName.simpleName());
-    factoryWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getName());
+    if (elements.getTypeElement(Generated.class.getCanonicalName()) != null) {
+      factoryWriter.annotate(Generated.class)
+          .setValue(ComponentProcessor.class.getCanonicalName());
+    }
     factoryWriter.addModifiers(PUBLIC, FINAL);
     factoryWriter.addImplementedType(ParameterizedTypeName.create(
         ClassName.fromClass(Factory.class),
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
index 05970210b..43c00ed1e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
@@ -96,8 +96,10 @@ JavaWriter write(ClassName injectorClassName, MembersInjectionBinding binding) {
     JavaWriter writer = JavaWriter.inPackage(injectedClassName.packageName());
 
     ClassWriter injectorWriter = writer.addClass(injectorClassName.simpleName());
-    injectorWriter.annotate(Generated.class)
-        .setValue(ComponentProcessor.class.getCanonicalName());
+    if (elements.getTypeElement(Generated.class.getCanonicalName()) != null) {
+      injectorWriter.annotate(Generated.class)
+          .setValue(ComponentProcessor.class.getCanonicalName());
+    }
     injectorWriter.addModifiers(PUBLIC, FINAL);
     injectorWriter.addImplementedType(
         ParameterizedTypeName.create(MembersInjector.class, injectedClassName));
