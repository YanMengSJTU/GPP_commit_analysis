diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 35e778c8a..4d00320ed 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -235,6 +235,7 @@ java_library(
         "BindingExpression.java",
         "BindingMethodImplementation.java",
         "ComponentBindingExpressions.java",
+        "ComponentBuilderImplementation.java",
         "ComponentImplementation.java",
         "ComponentInstanceBindingExpression.java",
         "ComponentMethodBindingExpression.java",
@@ -252,7 +253,6 @@ java_library(
         "FrameworkFieldInitializer.java",
         "FrameworkInstanceBindingExpression.java",
         "FrameworkInstanceSupplier.java",
-        "GeneratedComponentBuilderModel.java",
         "GeneratedInstanceBindingExpression.java",
         "GwtCompatibility.java",
         "HjarSourceFileGenerator.java",
diff --git a/java/dagger/internal/codegen/GeneratedComponentBuilderModel.java b/java/dagger/internal/codegen/ComponentBuilderImplementation.java
similarity index 85%
rename from java/dagger/internal/codegen/GeneratedComponentBuilderModel.java
rename to java/dagger/internal/codegen/ComponentBuilderImplementation.java
index c03d0fdd1..0cf2da8cc 100644
--- a/java/dagger/internal/codegen/GeneratedComponentBuilderModel.java
+++ b/java/dagger/internal/codegen/ComponentBuilderImplementation.java
@@ -48,23 +48,23 @@
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
-/** Models the generated code for a component builder. */
-final class GeneratedComponentBuilderModel {
-  private final TypeSpec typeSpec;
+/** The implementation of a component builder type. */
+final class ComponentBuilderImplementation {
+  private final TypeSpec componentBuilderClass;
   private final ClassName name;
   private final ImmutableMap<ComponentRequirement, FieldSpec> builderFields;
 
-  private GeneratedComponentBuilderModel(
-      TypeSpec typeSpec,
+  private ComponentBuilderImplementation(
+      TypeSpec componentBuilderClass,
       ClassName name,
       ImmutableMap<ComponentRequirement, FieldSpec> builderFields) {
-    this.typeSpec = typeSpec;
+    this.componentBuilderClass = componentBuilderClass;
     this.name = name;
     this.builderFields = builderFields;
   }
 
-  TypeSpec typeSpec() {
-    return typeSpec;
+  TypeSpec componentBuilderClass() {
+    return componentBuilderClass;
   }
 
   ClassName name() {
@@ -75,29 +75,25 @@ ClassName name() {
     return builderFields;
   }
 
-  static Optional<GeneratedComponentBuilderModel> create(
+  static Optional<ComponentBuilderImplementation> create(
       ComponentImplementation componentImplementation,
       BindingGraph graph,
       Elements elements,
       Types types) {
-    return hasBuilder(graph.componentDescriptor())
+    return graph.componentDescriptor().hasBuilder()
         ? Optional.of(new Creator(componentImplementation, graph, elements, types).create())
         : Optional.empty();
   }
 
-  private static boolean hasBuilder(ComponentDescriptor component) {
-    return component.kind().isTopLevel() || component.builderSpec().isPresent();
-  }
-
   private static final class Creator {
-    private static final String NOOP_BUILDER_METHOD_JAVADOC =
+    static final String NOOP_BUILDER_METHOD_JAVADOC =
         "This module is declared, but an instance is not used in the component. This method is a "
             + "no-op. For more, see https://google.github.io/dagger/unused-modules.\n";
-    private final BindingGraph graph;
-    private final TypeSpec.Builder builder;
-    private final ComponentImplementation componentImplementation;
-    private final Elements elements;
-    private final Types types;
+    final BindingGraph graph;
+    final TypeSpec.Builder componentBuilderClass;
+    final ComponentImplementation componentImplementation;
+    final Elements elements;
+    final Types types;
 
     Creator(
         ComponentImplementation componentImplementation,
@@ -105,54 +101,57 @@ private static boolean hasBuilder(ComponentDescriptor component) {
         Elements elements,
         Types types) {
       this.componentImplementation = componentImplementation;
-      this.builder = classBuilder(componentImplementation.getBuilderName());
+      this.componentBuilderClass = classBuilder(componentImplementation.getBuilderName());
       this.graph = graph;
       this.elements = elements;
       this.types = types;
     }
 
-    GeneratedComponentBuilderModel create() {
+    ComponentBuilderImplementation create() {
       if (!componentImplementation.isNested()) {
-        builder.addModifiers(STATIC);
+        componentBuilderClass.addModifiers(STATIC);
       }
       if (builderSpec().isPresent()) {
         if (componentImplementation.isAbstract()) {
-          builder.addModifiers(PUBLIC);
+          componentBuilderClass.addModifiers(PUBLIC);
         } else {
-          builder.addModifiers(PRIVATE);
+          componentBuilderClass.addModifiers(PRIVATE);
         }
         setSupertype();
       } else {
-        builder.addModifiers(PUBLIC).addMethod(constructorBuilder().addModifiers(PRIVATE).build());
+        componentBuilderClass
+            .addModifiers(PUBLIC)
+            .addMethod(constructorBuilder().addModifiers(PRIVATE).build());
       }
 
       ImmutableMap<ComponentRequirement, FieldSpec> builderFields = builderFields(graph);
 
       if (componentImplementation.isAbstract()) {
-        builder.addModifiers(ABSTRACT);
+        componentBuilderClass.addModifiers(ABSTRACT);
       } else {
-        builder.addModifiers(FINAL);
-        builder.addMethod(buildMethod(builderFields)); // Can only instantiate concrete classes.
+        componentBuilderClass.addModifiers(FINAL);
+        // Can only instantiate concrete classes.
+        componentBuilderClass.addMethod(buildMethod(builderFields));
       }
 
-      builder
+      componentBuilderClass
           .addFields(builderFields.values())
           // TODO(ronshapiro): this should be switched with buildMethod(), but that currently breaks
           // compile-testing tests that rely on the order of the methods
           .addMethods(builderMethods(builderFields));
 
-      return new GeneratedComponentBuilderModel(
-          builder.build(), componentImplementation.getBuilderName(), builderFields);
+      return new ComponentBuilderImplementation(
+          componentBuilderClass.build(), componentImplementation.getBuilderName(), builderFields);
     }
 
     /** Set the superclass being extended or interface being implemented for this builder. */
-    private void setSupertype() {
+    void setSupertype() {
       if (componentImplementation.superclassImplementation().isPresent()) {
         // If there's a superclass, extend the Builder defined there.
-        builder.superclass(
+        componentBuilderClass.superclass(
             componentImplementation.superclassImplementation().get().getBuilderName());
       } else {
-        addSupertype(builder, builderSpec().get().builderDefinitionType());
+        addSupertype(componentBuilderClass, builderSpec().get().builderDefinitionType());
       }
     }
 
@@ -160,7 +159,7 @@ private void setSupertype() {
      * Computes fields for each of the {@linkplain BindingGraph#componentRequirements component
      * requirements}. Regardless of builder spec, there is always one field per requirement.
      */
-    private static ImmutableMap<ComponentRequirement, FieldSpec> builderFields(BindingGraph graph) {
+    static ImmutableMap<ComponentRequirement, FieldSpec> builderFields(BindingGraph graph) {
       UniqueNameSet fieldNames = new UniqueNameSet();
       ImmutableMap.Builder<ComponentRequirement, FieldSpec> builderFields = ImmutableMap.builder();
       for (ComponentRequirement componentRequirement : graph.componentRequirements()) {
@@ -172,7 +171,7 @@ private void setSupertype() {
       return builderFields.build();
     }
 
-    private MethodSpec buildMethod(ImmutableMap<ComponentRequirement, FieldSpec> builderFields) {
+    MethodSpec buildMethod(ImmutableMap<ComponentRequirement, FieldSpec> builderFields) {
       MethodSpec.Builder buildMethod;
       if (builderSpec().isPresent()) {
         ExecutableElement specBuildMethod = builderSpec().get().buildMethod();
@@ -219,7 +218,7 @@ private MethodSpec buildMethod(ImmutableMap<ComponentRequirement, FieldSpec> bui
      * Computes the methods that set each of parameters on the builder. If the {@link BuilderSpec}
      * is present, it will tailor the methods to match the spec.
      */
-    private ImmutableSet<MethodSpec> builderMethods(
+    ImmutableSet<MethodSpec> builderMethods(
         ImmutableMap<ComponentRequirement, FieldSpec> builderFields) {
       ImmutableSet<ComponentRequirement> componentRequirements = graph.componentRequirements();
       ImmutableSet.Builder<MethodSpec> methods = ImmutableSet.builder();
@@ -296,7 +295,7 @@ private MethodSpec buildMethod(ImmutableMap<ComponentRequirement, FieldSpec> bui
       return methods.build();
     }
 
-    private MethodSpec.Builder addBuilderMethodFromSpec(ExecutableElement method) {
+    MethodSpec.Builder addBuilderMethodFromSpec(ExecutableElement method) {
       TypeMirror returnType = method.getReturnType();
       MethodSpec.Builder builderMethod =
           methodBuilder(method.getSimpleName().toString())
@@ -311,14 +310,14 @@ private MethodSpec buildMethod(ImmutableMap<ComponentRequirement, FieldSpec> bui
       return builderMethod;
     }
 
-    private static void addBuilderMethodReturnStatementForSpec(
+    static void addBuilderMethodReturnStatementForSpec(
         ExecutableElement specMethod, MethodSpec.Builder builderMethod) {
       if (!specMethod.getReturnType().getKind().equals(VOID)) {
         builderMethod.addStatement("return this");
       }
     }
 
-    private Optional<BuilderSpec> builderSpec() {
+    Optional<BuilderSpec> builderSpec() {
       return graph.componentDescriptor().builderSpec();
     }
   }
diff --git a/java/dagger/internal/codegen/ComponentDescriptor.java b/java/dagger/internal/codegen/ComponentDescriptor.java
index 0c25ea96c..21c429b39 100644
--- a/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -352,6 +352,14 @@ private static boolean doesComponentMethodMatch(
   // interaction between the spec & generation
   abstract Optional<BuilderSpec> builderSpec();
 
+  /**
+   * Returns {@code true} for components that have a builder, either because the user {@linkplain
+   * #builderSpec() specified one} or because it's a top-level component.
+   */
+  boolean hasBuilder() {
+    return kind().isTopLevel() || builderSpec().isPresent();
+  }
+
   /**
    * Returns the {@link CancellationPolicy} for this component, or an empty optional if either the
    * component is not a production component or no {@code CancellationPolicy} annotation is present.
diff --git a/java/dagger/internal/codegen/ComponentImplementationFactory.java b/java/dagger/internal/codegen/ComponentImplementationFactory.java
index 21f611502..a3001aed4 100644
--- a/java/dagger/internal/codegen/ComponentImplementationFactory.java
+++ b/java/dagger/internal/codegen/ComponentImplementationFactory.java
@@ -106,12 +106,12 @@ ComponentImplementation createComponentImplementation(BindingGraph bindingGraph)
     ComponentImplementation componentImplementation =
         topLevelImplementation(componentName(bindingGraph.componentType()), bindingGraph);
     OptionalFactories optionalFactories = new OptionalFactories(componentImplementation);
-    Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel =
-        GeneratedComponentBuilderModel.create(
+    Optional<ComponentBuilderImplementation> componentBuilderImplementation =
+        ComponentBuilderImplementation.create(
             componentImplementation, bindingGraph, elements, types);
     ComponentRequirementFields componentRequirementFields =
         new ComponentRequirementFields(
-            bindingGraph, componentImplementation, generatedComponentBuilderModel);
+            bindingGraph, componentImplementation, componentBuilderImplementation);
     ComponentBindingExpressions bindingExpressions =
         new ComponentBindingExpressions(
             bindingGraph,
@@ -134,7 +134,7 @@ ComponentImplementation createComponentImplementation(BindingGraph bindingGraph)
               optionalFactories,
               bindingExpressions,
               componentRequirementFields,
-              generatedComponentBuilderModel)
+              componentBuilderImplementation)
           .build();
     } else {
       return new RootComponentImplementationBuilder(
@@ -143,7 +143,7 @@ ComponentImplementation createComponentImplementation(BindingGraph bindingGraph)
               optionalFactories,
               bindingExpressions,
               componentRequirementFields,
-              generatedComponentBuilderModel)
+              componentBuilderImplementation.get())
           .build();
     }
   }
@@ -166,7 +166,7 @@ ComponentImplementation topLevelImplementation(ClassName name, BindingGraph grap
     final ComponentRequirementFields componentRequirementFields;
     final ComponentImplementation componentImplementation;
     final OptionalFactories optionalFactories;
-    final Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel;
+    final Optional<ComponentBuilderImplementation> componentBuilderImplementation;
     boolean done;
 
     ComponentImplementationBuilder(
@@ -175,13 +175,13 @@ ComponentImplementation topLevelImplementation(ClassName name, BindingGraph grap
         OptionalFactories optionalFactories,
         ComponentBindingExpressions bindingExpressions,
         ComponentRequirementFields componentRequirementFields,
-        Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel) {
+        Optional<ComponentBuilderImplementation> componentBuilderImplementation) {
       this.graph = graph;
       this.componentImplementation = componentImplementation;
       this.optionalFactories = optionalFactories;
       this.bindingExpressions = bindingExpressions;
       this.componentRequirementFields = componentRequirementFields;
-      this.generatedComponentBuilderModel = generatedComponentBuilderModel;
+      this.componentBuilderImplementation = componentBuilderImplementation;
     }
 
     /**
@@ -195,8 +195,8 @@ final ComponentImplementation build() {
           "ComponentImplementationBuilder has already built the ComponentImplementation for [%s].",
           componentImplementation.name());
       setSupertype();
-      generatedComponentBuilderModel
-          .map(GeneratedComponentBuilderModel::typeSpec)
+      componentBuilderImplementation
+          .map(ComponentBuilderImplementation::componentBuilderClass)
           .ifPresent(this::addBuilderClass);
 
       getLocalAndInheritedMethods(
@@ -384,11 +384,11 @@ final ComponentImplementation buildChildImplementation(BindingGraph childGraph)
           compilerOptions.aheadOfTimeSubcomponents()
               ? abstractInnerSubcomponent(childGraph.componentDescriptor())
               : concreteSubcomponent(childGraph.componentDescriptor());
-      Optional<GeneratedComponentBuilderModel> childBuilderModel =
-          GeneratedComponentBuilderModel.create(childImplementation, childGraph, elements, types);
+      Optional<ComponentBuilderImplementation> childBuilderImplementation =
+          ComponentBuilderImplementation.create(childImplementation, childGraph, elements, types);
       ComponentRequirementFields childComponentRequirementFields =
           componentRequirementFields.forChildComponent(
-              childGraph, childImplementation, childBuilderModel);
+              childGraph, childImplementation, childBuilderImplementation);
       ComponentBindingExpressions childBindingExpressions =
           bindingExpressions.forChildComponent(
               childGraph, childImplementation, childComponentRequirementFields);
@@ -399,7 +399,7 @@ final ComponentImplementation buildChildImplementation(BindingGraph childGraph)
               optionalFactories,
               childBindingExpressions,
               childComponentRequirementFields,
-              childBuilderModel)
+              childBuilderImplementation)
           .build();
     }
 
@@ -477,9 +477,9 @@ final void addConstructor() {
 
     /** Returns the list of {@link ParameterSpec}s for the constructor. */
     final ImmutableList<ParameterSpec> constructorParameters() {
-      if (generatedComponentBuilderModel.isPresent()) {
+      if (componentBuilderImplementation.isPresent()) {
         return ImmutableList.of(
-            ParameterSpec.builder(generatedComponentBuilderModel.get().name(), "builder").build());
+            ParameterSpec.builder(componentBuilderImplementation.get().name(), "builder").build());
       } else if (componentImplementation.isAbstract() && componentImplementation.isNested()) {
         // If we're generating an abstract inner subcomponent, then we are not implementing module
         // instance bindings and have no need for factory method parameters.
@@ -499,25 +499,28 @@ final void addConstructor() {
 
   /** Builds a root component implementation. */
   private final class RootComponentImplementationBuilder extends ComponentImplementationBuilder {
+    private final ClassName componentBuilderClassName;
+
     RootComponentImplementationBuilder(
         BindingGraph graph,
         ComponentImplementation componentImplementation,
         OptionalFactories optionalFactories,
         ComponentBindingExpressions bindingExpressions,
         ComponentRequirementFields componentRequirementFields,
-        Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel) {
+        ComponentBuilderImplementation componentBuilderImplementation) {
       super(
           graph,
           componentImplementation,
           optionalFactories,
           bindingExpressions,
           componentRequirementFields,
-          generatedComponentBuilderModel);
+          Optional.of(componentBuilderImplementation));
+      this.componentBuilderClassName = componentBuilderImplementation.name();
     }
 
     @Override
     void addBuilderClass(TypeSpec builder) {
-      super.componentImplementation.addType(COMPONENT_BUILDER, builder);
+      componentImplementation.addType(COMPONENT_BUILDER, builder);
     }
 
     @Override
@@ -528,16 +531,16 @@ void addFactoryMethods() {
           methodBuilder("builder")
               .addModifiers(PUBLIC, STATIC)
               .returns(
-                  builderSpec().isPresent()
-                      ? ClassName.get(builderSpec().get().builderDefinitionType())
-                      : super.generatedComponentBuilderModel.get().name())
-              .addStatement("return new $T()", super.generatedComponentBuilderModel.get().name())
+                  builderSpec()
+                      .map(builderSpec -> ClassName.get(builderSpec.builderDefinitionType()))
+                      .orElse(componentBuilderClassName))
+              .addStatement("return new $T()", componentBuilderClassName)
               .build();
-      super.componentImplementation.addMethod(BUILDER_METHOD, builderFactoryMethod);
+      componentImplementation.addMethod(BUILDER_METHOD, builderFactoryMethod);
       if (canInstantiateAllRequirements()) {
         CharSequence buildMethodName =
             builderSpec().isPresent() ? builderSpec().get().buildMethod().getSimpleName() : "build";
-        super.componentImplementation.addMethod(
+        componentImplementation.addMethod(
             BUILDER_METHOD,
             methodBuilder("create")
                 .returns(ClassName.get(super.graph.componentType()))
@@ -548,13 +551,13 @@ void addFactoryMethods() {
     }
 
     Optional<ComponentDescriptor.BuilderSpec> builderSpec() {
-      return super.graph.componentDescriptor().builderSpec();
+      return graph.componentDescriptor().builderSpec();
     }
 
     /** {@code true} if all of the graph's required dependencies can be automatically constructed */
     boolean canInstantiateAllRequirements() {
       return !Iterables.any(
-          super.graph.componentRequirements(),
+          graph.componentRequirements(),
           dependency -> dependency.requiresAPassedInstance(elements, types));
     }
   }
@@ -575,14 +578,14 @@ boolean canInstantiateAllRequirements() {
         OptionalFactories optionalFactories,
         ComponentBindingExpressions bindingExpressions,
         ComponentRequirementFields componentRequirementFields,
-        Optional<GeneratedComponentBuilderModel> builder) {
+        Optional<ComponentBuilderImplementation> componentBuilderImplementation) {
       super(
           graph,
           componentImplementation,
           optionalFactories,
           bindingExpressions,
           componentRequirementFields,
-          builder);
+          componentBuilderImplementation);
       this.parent = parent;
     }
 
@@ -602,7 +605,7 @@ void addFactoryMethods() {
       if (!componentImplementation.isAbstract()) {
         // Use the parent's factory method to create this subcomponent if the
         // subcomponent was not added via {@link dagger.Module#subcomponents()}.
-        super.graph.factoryMethod().ifPresent(this::createSubcomponentFactoryMethod);
+        graph.factoryMethod().ifPresent(this::createSubcomponentFactoryMethod);
       }
     }
 
@@ -617,7 +620,7 @@ void createSubcomponentFactoryMethod(ExecutableElement factoryMethod) {
                   .addStatement(
                       "return new $T($L)",
                       componentImplementation.name(),
-                      getFactoryMethodParameterSpecs(super.graph).stream()
+                      getFactoryMethodParameterSpecs(graph).stream()
                           .map(param -> CodeBlock.of("$N", param))
                           .collect(toParametersCodeBlock()))
                   .build());
diff --git a/java/dagger/internal/codegen/ComponentRequirementFields.java b/java/dagger/internal/codegen/ComponentRequirementFields.java
index 946da190d..a98f04b53 100644
--- a/java/dagger/internal/codegen/ComponentRequirementFields.java
+++ b/java/dagger/internal/codegen/ComponentRequirementFields.java
@@ -47,33 +47,33 @@
       new HashMap<>();
   private final BindingGraph graph;
   private final ComponentImplementation componentImplementation;
-  private final Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel;
+  private final Optional<ComponentBuilderImplementation> componentBuilderImplementation;
 
   private ComponentRequirementFields(
       Optional<ComponentRequirementFields> parent,
       BindingGraph graph,
       ComponentImplementation componentImplementation,
-      Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel) {
+      Optional<ComponentBuilderImplementation> componentBuilderImplementation) {
     this.parent = parent;
     this.graph = graph;
     this.componentImplementation = componentImplementation;
-    this.generatedComponentBuilderModel = generatedComponentBuilderModel;
+    this.componentBuilderImplementation = componentBuilderImplementation;
   }
 
   ComponentRequirementFields(
       BindingGraph graph,
       ComponentImplementation componentImplementation,
-      Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel) {
-    this(Optional.empty(), graph, componentImplementation, generatedComponentBuilderModel);
+      Optional<ComponentBuilderImplementation> componentBuilderImplementation) {
+    this(Optional.empty(), graph, componentImplementation, componentBuilderImplementation);
   }
 
   /** Returns a new object representing the fields available from a child component of this one. */
   ComponentRequirementFields forChildComponent(
       BindingGraph graph,
       ComponentImplementation componentImplementation,
-      Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel) {
+      Optional<ComponentBuilderImplementation> componentBuilderImplementation) {
     return new ComponentRequirementFields(
-        Optional.of(this), graph, componentImplementation, generatedComponentBuilderModel);
+        Optional.of(this), graph, componentImplementation, componentBuilderImplementation);
   }
 
   /**
@@ -110,9 +110,9 @@ ComponentRequirementField getField(ComponentRequirement componentRequirement) {
 
   /** Returns a {@link ComponentRequirementField} for a {@link ComponentRequirement}. */
   private ComponentRequirementField create(ComponentRequirement requirement) {
-    if (generatedComponentBuilderModel.isPresent()) {
+    if (componentBuilderImplementation.isPresent()) {
       FieldSpec builderField =
-          generatedComponentBuilderModel.get().builderFields().get(requirement);
+          componentBuilderImplementation.get().builderFields().get(requirement);
       return new BuilderField(requirement, componentImplementation, builderField);
     } else if (graph.factoryMethod().isPresent()
         && graph.factoryMethodParameters().containsKey(requirement)) {
