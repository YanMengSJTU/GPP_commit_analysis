diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index 66203083e..6b944466b 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -133,7 +133,7 @@
   protected final CompilerOptions compilerOptions;
   protected final ClassName name;
   protected final BindingGraph graph;
-  protected final ImmutableMap<ComponentDescriptor, String> subcomponentImplNames;
+  protected final ImmutableMap<ComponentDescriptor, String> subcomponentNames;
   private final Map<BindingKey, InitializationState> initializationStates = new HashMap<>();
   protected TypeSpec.Builder component;
   private final UniqueNameSet componentFieldNames = new UniqueNameSet();
@@ -162,14 +162,14 @@
       CompilerOptions compilerOptions,
       ClassName name,
       BindingGraph graph,
-      ImmutableMap<ComponentDescriptor, String> subcomponentImplNames) {
+      ImmutableMap<ComponentDescriptor, String> subcomponentNames) {
     this.types = types;
     this.elements = elements;
     this.keyFactory = keyFactory;
     this.compilerOptions = compilerOptions;
     this.name = name;
     this.graph = graph;
-    this.subcomponentImplNames = subcomponentImplNames;
+    this.subcomponentNames = subcomponentNames;
   }
 
   protected final TypeElement componentDefinitionType() {
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
index d6492f41d..9e46214e5 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
@@ -116,8 +116,7 @@ public String apply(ComponentDescriptor componentDescriptor) {
           List<String> pieces = componentQualifiedNamePieces.get(component);
           String simpleName =
               QUALIFIED_NAME_JOINER.join(
-                      pieces.subList(Math.max(0, pieces.size() - levels - 1), pieces.size()))
-                  + "Impl";
+                  pieces.subList(Math.max(0, pieces.size() - levels - 1), pieces.size()));
           ComponentDescriptor conflict = generatedSimpleNames.put(simpleName, component);
           if (conflict != null) {
             // if the map previously contained an entry for the same simple name, stop early since
diff --git a/compiler/src/main/java/dagger/internal/codegen/SubcomponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/SubcomponentWriter.java
index 641fefd7f..17af901fe 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SubcomponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SubcomponentWriter.java
@@ -67,14 +67,14 @@ public SubcomponentWriter(
         parent.compilerOptions,
         subcomponentName(parent, subgraph),
         subgraph,
-        parent.subcomponentImplNames);
+        parent.subcomponentNames);
     this.parent = parent;
     this.subcomponentFactoryMethod = subcomponentFactoryMethod;
   }
 
   private static ClassName subcomponentName(AbstractComponentWriter parent, BindingGraph subgraph) {
     return parent.name.nestedClass(
-        parent.subcomponentImplNames.get(subgraph.componentDescriptor()));
+        parent.subcomponentNames.get(subgraph.componentDescriptor()) + "Impl");
   }
 
   @Override
@@ -128,7 +128,7 @@ protected void addBuilder() {
 
   @Override
   protected ClassName builderName() {
-    return name.peerClass(componentDefinitionTypeName().simpleName() + "Builder");
+    return name.peerClass(subcomponentNames.get(graph.componentDescriptor()) + "Builder");
   }
 
   @Override
diff --git a/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java b/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java
index a0ec1be51..c2d7d1d16 100644
--- a/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -768,7 +768,7 @@ public void subcomponentImplNameUsesFullyQualifiedClassNameIfNecessary() {
   public void parentComponentNameShouldNotBeDisambiguatedWhenItConflictsWithASubcomponent() {
     JavaFileObject parent =
         JavaFileObjects.forSourceLines(
-            "test.ParentComponent",
+            "test.C",
             "package test;",
             "",
             "import dagger.Component;",
@@ -790,7 +790,7 @@ public void parentComponentNameShouldNotBeDisambiguatedWhenItConflictsWithASubco
 
     JavaFileObject componentGeneratedFile =
         JavaFileObjects.forSourceLines(
-            "test.DaggerParentComponent",
+            "test.DaggerC",
             "package test;",
             "",
             "import javax.annotation.Generated;",
@@ -834,4 +834,113 @@ public void parentComponentNameShouldNotBeDisambiguatedWhenItConflictsWithASubco
         .and()
         .generatesSources(componentGeneratedFile);
   }
+
+  @Test
+  public void subcomponentBuilderNamesShouldNotConflict() {
+    JavaFileObject parent =
+        JavaFileObjects.forSourceLines(
+            "test.C",
+            "package test;",
+            "",
+            "import dagger.Component;",
+            "import dagger.Subcomponent;",
+            "",
+            "@Component",
+            "interface C {",
+            "  Foo.Sub.Builder fooBuilder();",
+            "  Bar.Sub.Builder barBuilder();",
+            "",
+            "  interface Foo {",
+            "    @Subcomponent",
+            "    interface Sub {",
+            "      @Subcomponent.Builder",
+            "      interface Builder {",
+            "        Sub build();",
+            "      }",
+            "    }",
+            "  }",
+            "",
+            "  interface Bar {",
+            "    @Subcomponent",
+            "    interface Sub {",
+            "      @Subcomponent.Builder",
+            "      interface Builder {",
+            "        Sub build();",
+            "      }",
+            "    }",
+            "  }",
+            "}");
+    JavaFileObject componentGeneratedFile =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerC",
+            "package test;",
+            "",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerC implements C {",
+            "  private DaggerC(Builder builder) {",
+            "    assert builder != null;",
+            "  }",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static C create() {",
+            "    return builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public C.Foo.Sub.Builder fooBuilder() {",
+            "    return new Foo_SubBuilder();",
+            "  }",
+            "",
+            "  @Override",
+            "  public C.Bar.Sub.Builder barBuilder() {",
+            "    return new Bar_SubBuilder();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public C build() {",
+            "      return new DaggerC(this);",
+            "    }",
+            "  }",
+            "",
+            "  private final class Foo_SubBuilder implements C.Foo.Sub.Builder {",
+            "    @Override",
+            "    public C.Foo.Sub build() {",
+            "      return new Foo_SubImpl(this);",
+            "    }",
+            "  }",
+            "",
+            "  private final class Foo_SubImpl implements C.Foo.Sub {",
+            "    private Foo_SubImpl(Foo_SubBuilder builder) {",
+            "      assert builder != null;",
+            "    }",
+            "  }",
+            "",
+            "  private final class Bar_SubBuilder implements C.Bar.Sub.Builder {",
+            "    @Override",
+            "    public C.Bar.Sub build() {",
+            "      return new Bar_SubImpl(this);",
+            "    }",
+            "  }",
+            "",
+            "  private final class Bar_SubImpl implements C.Bar.Sub {",
+            "    private Bar_SubImpl(Bar_SubBuilder builder) {",
+            "      assert builder != null;",
+            "    }",
+            "  }",
+            "}");
+
+    assertAbout(javaSources())
+        .that(ImmutableList.of(parent))
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(componentGeneratedFile);
+  }
 }
