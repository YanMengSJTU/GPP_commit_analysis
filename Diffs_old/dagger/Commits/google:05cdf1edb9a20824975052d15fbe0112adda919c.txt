diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index ccbf91b27..e5d0316e5 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -91,7 +91,6 @@
 import static dagger.internal.codegen.Binding.bindingPackageFor;
 import static dagger.internal.codegen.ComponentGenerator.MemberSelect.staticMethodInvocationWithCast;
 import static dagger.internal.codegen.ComponentGenerator.MemberSelect.staticSelect;
-import static dagger.internal.codegen.ContributionBinding.contributionTypeFor;
 import static dagger.internal.codegen.ContributionBinding.FactoryCreationStrategy.ENUM_INSTANCE;
 import static dagger.internal.codegen.ContributionBinding.Kind.PROVISION;
 import static dagger.internal.codegen.ErrorMessages.CANNOT_RETURN_NULL_FROM_NON_NULLABLE_COMPONENT_METHOD;
@@ -713,7 +712,7 @@ private Snippet initializeFrameworkType(BindingKey bindingKey) {
     
     switch (bindingKey.kind()) {
       case CONTRIBUTION:
-        switch (contributionTypeFor(resolvedBindings.contributionBindings())) {
+        switch (resolvedBindings.contributionType()) {
           case SET:
             return initializeSetMultibindings(resolvedBindings);
           case MAP:
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
index e21bc4e52..947b937c3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -299,7 +299,7 @@ private boolean validateResolvedBinding(
             return true;
           }
           ImmutableListMultimap<ContributionType, ContributionBinding> contributionsByType =
-              ContributionBinding.contributionTypesFor(contributionBindings);
+              resolvedBinding.contributionTypes();
           if (contributionsByType.keySet().size() > 1) {
             reportMultipleBindingTypes(path);
             return false;
@@ -845,7 +845,7 @@ private void reportMultipleBindingTypes(Deque<ResolvedRequest> path) {
       new Formatter(builder)
           .format(ErrorMessages.MULTIPLE_BINDING_TYPES_FOR_KEY_FORMAT, formatRootRequestKey(path));
       ImmutableListMultimap<ContributionType, ContributionBinding> bindingsByType =
-          ContributionBinding.contributionTypesFor(resolvedBinding.contributionBindings());
+          resolvedBinding.contributionTypes();
       for (ContributionType type :
           Ordering.natural().immutableSortedCopy(bindingsByType.keySet())) {
         builder.append(INDENT);
diff --git a/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java b/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java
index 831943f2a..f5c6f4ce9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java
@@ -21,11 +21,8 @@
 import com.google.common.base.Function;
 import com.google.common.base.Optional;
 import com.google.common.base.Predicate;
-import com.google.common.collect.ImmutableListMultimap;
 import com.google.common.collect.ImmutableSetMultimap;
-import com.google.common.collect.Iterables;
 import com.google.common.collect.Multimaps;
-import com.google.common.collect.Ordering;
 import com.google.common.collect.Sets;
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.Component;
@@ -33,7 +30,6 @@
 import dagger.Provides;
 import dagger.producers.Produces;
 import dagger.producers.ProductionComponent;
-import java.util.EnumSet;
 import java.util.Set;
 import javax.inject.Inject;
 import javax.lang.model.element.AnnotationMirror;
@@ -41,8 +37,6 @@
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.DeclaredType;
 
-import static com.google.common.base.Preconditions.checkArgument;
-import static com.google.common.base.Preconditions.checkNotNull;
 import static dagger.internal.codegen.MapKeys.getMapKey;
 import static dagger.internal.codegen.MapKeys.unwrapValue;
 import static javax.lang.model.element.Modifier.STATIC;
@@ -214,41 +208,6 @@ FactoryCreationStrategy factoryCreationStrategy() {
     }
   }
 
-  /**
-   * Returns the {@link ContributionType}s represented by a given {@link ContributionBinding}
-   * collection.
-   */
-  static <B extends ContributionBinding>
-      ImmutableListMultimap<ContributionType, B> contributionTypesFor(
-          Iterable<? extends B> bindings) {
-    ImmutableListMultimap.Builder<ContributionType, B> builder = ImmutableListMultimap.builder();
-    builder.orderKeysBy(Ordering.<ContributionType>natural());
-    for (B binding : bindings) {
-      builder.put(binding.contributionType(), binding);
-    }
-    return builder.build();
-  }
-
-  /**
-   * Returns a single {@link ContributionType} represented by a given collection of
-   * {@link ContributionBinding}s.
-   *
-   * @throws IllegalArgumentException if the given bindings are not all of one type
-   */
-  static ContributionType contributionTypeFor(Iterable<ContributionBinding> bindings) {
-    checkNotNull(bindings);
-    checkArgument(!Iterables.isEmpty(bindings), "no bindings");
-    Set<ContributionType> types = EnumSet.noneOf(ContributionType.class);
-    for (ContributionBinding binding : bindings) {
-      types.add(binding.contributionType());
-    }
-    if (types.size() > 1) {
-      throw new IllegalArgumentException(
-          String.format(ErrorMessages.MULTIPLE_CONTRIBUTION_TYPES_FORMAT, types));
-    }
-    return Iterables.getOnlyElement(types);
-  }
-
   /**
    * Indexes map-multibindings by map key (the result of calling
    * {@link AnnotationValue#getValue()} on a single member or the whole {@link AnnotationMirror}
diff --git a/compiler/src/main/java/dagger/internal/codegen/FrameworkField.java b/compiler/src/main/java/dagger/internal/codegen/FrameworkField.java
index 5c6c4c52c..d407d6568 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FrameworkField.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FrameworkField.java
@@ -18,7 +18,6 @@
 import com.google.auto.common.MoreTypes;
 import com.google.auto.value.AutoValue;
 import com.google.common.base.CaseFormat;
-import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import dagger.MembersInjector;
 import dagger.internal.codegen.writer.ClassName;
@@ -31,7 +30,6 @@
 import javax.lang.model.util.ElementKindVisitor6;
 
 import static com.google.common.collect.Iterables.getOnlyElement;
-import static dagger.internal.codegen.ContributionBinding.contributionTypeFor;
 
 /**
  * A value object that represents a field used by Dagger-generated code.
@@ -91,19 +89,17 @@ static FrameworkField createForResolvedBindings(ResolvedBindings resolvedBinding
     BindingKey bindingKey = resolvedBindings.bindingKey();
     switch (bindingKey.kind()) {
       case CONTRIBUTION:
-        ImmutableSet<ContributionBinding> contributionBindings =
-            resolvedBindings.contributionBindings();
-        switch (contributionTypeFor(contributionBindings)) {
+        switch (resolvedBindings.contributionType()) {
           case SET:
           case MAP:
             return createWithTypeFromKey(
-                FrameworkField.frameworkClassForResolvedBindings(resolvedBindings),
+                frameworkClassForResolvedBindings(resolvedBindings),
                 bindingKey,
                 KeyVariableNamer.INSTANCE.apply(bindingKey.key()));
           case UNIQUE:
-            ContributionBinding binding = getOnlyElement(contributionBindings);
+            ContributionBinding binding = getOnlyElement(resolvedBindings.contributionBindings());
             return createWithTypeFromKey(
-                FrameworkField.frameworkClassForResolvedBindings(resolvedBindings),
+                frameworkClassForResolvedBindings(resolvedBindings),
                 bindingKey,
                 BINDING_ELEMENT_NAME.visit(binding.bindingElement()));
           default:
diff --git a/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java b/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
index f95ce4a57..3ca6b623e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
@@ -18,14 +18,19 @@
 import com.google.auto.value.AutoValue;
 import com.google.common.base.Optional;
 import com.google.common.collect.FluentIterable;
+import com.google.common.collect.ImmutableListMultimap;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.ImmutableSetMultimap;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Multimap;
+import com.google.common.collect.Ordering;
+import dagger.internal.codegen.ContributionBinding.ContributionType;
+import java.util.EnumSet;
+import java.util.Set;
 
 import static com.google.common.base.Preconditions.checkArgument;
-import static dagger.internal.codegen.ContributionBinding.contributionTypeFor;
+import static com.google.common.base.Preconditions.checkState;
 
 /**
  * The collection of bindings that have been resolved for a binding key.
@@ -199,15 +204,44 @@ ResolvedBindings asInheritedIn(ComponentDescriptor owningComponent) {
    * {@code true} if this is a multibindings contribution.
    */
   boolean isMultibindings() {
-    return !contributionBindings().isEmpty()
-        && contributionTypeFor(contributionBindings()).isMultibinding();
+    return !contributionBindings().isEmpty() && contributionType().isMultibinding();
   }
 
   /**
    * {@code true} if this is a unique contribution binding.
    */
   boolean isUniqueContribution() {
-    return !contributionBindings().isEmpty()
-        && !contributionTypeFor(contributionBindings()).isMultibinding();
+    return !contributionBindings().isEmpty() && !contributionType().isMultibinding();
+  }
+
+  /**
+   * The contribution type for these bindings.
+   *
+   * @throws IllegalStateException if the bindings are not all of one contribution type
+   */
+  ContributionType contributionType() {
+    checkState(!contributionBindings().isEmpty(), "no bindings for %s", bindingKey());
+    Set<ContributionType> types = EnumSet.noneOf(ContributionType.class);
+    for (ContributionBinding binding : contributionBindings()) {
+      types.add(binding.contributionType());
+    }
+    if (types.size() > 1) {
+      throw new IllegalStateException(
+          String.format(ErrorMessages.MULTIPLE_CONTRIBUTION_TYPES_FORMAT, types));
+    }
+    return Iterables.getOnlyElement(types);
+  }
+
+  /**
+   * The {@link #contributionBindings()}, indexed by {@link ContributionType}.
+   */
+  ImmutableListMultimap<ContributionType, ContributionBinding> contributionTypes() {
+    ImmutableListMultimap.Builder<ContributionType, ContributionBinding> builder =
+        ImmutableListMultimap.builder();
+    builder.orderKeysBy(Ordering.<ContributionType>natural());
+    for (ContributionBinding binding : contributionBindings()) {
+      builder.put(binding.contributionType(), binding);
+    }
+    return builder.build();
   }
 }
