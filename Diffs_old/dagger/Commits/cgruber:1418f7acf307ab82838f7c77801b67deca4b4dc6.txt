diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/monitoring/MonitoringTest.java b/compiler/src/it/producers-functional-tests/src/test/java/producerstest/monitoring/MonitoringTest.java
index 375c90a19..6572215ff 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/monitoring/MonitoringTest.java
+++ b/compiler/src/it/producers-functional-tests/src/test/java/producerstest/monitoring/MonitoringTest.java
@@ -150,7 +150,7 @@ public void basicMonitoringWithFailure() throws Exception {
     }
   }
 
-  private static final class FakeProductionComponentMonitor implements ProductionComponentMonitor {
+  private static final class FakeProductionComponentMonitor extends ProductionComponentMonitor {
     final Map<ProducerToken, ProducerMonitor> monitors = new LinkedHashMap<>();
 
     @Override
diff --git a/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java b/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java
index f18046231..b59104286 100644
--- a/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java
+++ b/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java
@@ -136,4 +136,17 @@ public void onFailure(Throwable t) {
           }
         });
   }
+
+  private static final ProducerMonitor NO_OP =
+      new ProducerMonitor() {
+        @Override
+        public <T> void addCallbackTo(ListenableFuture<T> future) {
+          // overridden to avoid adding a do-nothing callback
+        }
+      };
+
+  /** Returns a monitor that does no monitoring. */
+  public static ProducerMonitor noOp() {
+    return NO_OP;
+  }
 }
diff --git a/producers/src/main/java/dagger/producers/monitoring/ProductionComponentMonitor.java b/producers/src/main/java/dagger/producers/monitoring/ProductionComponentMonitor.java
index 4dc2903fa..90e6d856a 100644
--- a/producers/src/main/java/dagger/producers/monitoring/ProductionComponentMonitor.java
+++ b/producers/src/main/java/dagger/producers/monitoring/ProductionComponentMonitor.java
@@ -45,12 +45,38 @@
  *
  * @author Jesse Beder
  */
-public interface ProductionComponentMonitor {
+public abstract class ProductionComponentMonitor {
   /** Returns a monitor for an individual {@linkplain Produces producer method}. */
-  ProducerMonitor producerMonitorFor(ProducerToken token);
+  public abstract ProducerMonitor producerMonitorFor(ProducerToken token);
 
-  public interface Factory {
+  private static final ProductionComponentMonitor NO_OP =
+      new ProductionComponentMonitor() {
+        @Override
+        public ProducerMonitor producerMonitorFor(ProducerToken token) {
+          return ProducerMonitor.noOp();
+        }
+      };
+
+  /** Returns a monitor that does no monitoring. */
+  public static ProductionComponentMonitor noOp() {
+    return NO_OP;
+  }
+
+  public abstract static class Factory {
     /** Creates a component-specific monitor when the component is created. */
-    ProductionComponentMonitor create(Object component);
+    public abstract ProductionComponentMonitor create(Object component);
+
+    private static final Factory NO_OP =
+        new Factory() {
+          @Override
+          public ProductionComponentMonitor create(Object component) {
+            return ProductionComponentMonitor.noOp();
+          }
+        };
+
+    /** Returns a factory that returns no-op monitors. */
+    public static Factory noOp() {
+      return NO_OP;
+    }
   }
 }
diff --git a/producers/src/main/java/dagger/producers/monitoring/TimingProductionComponentMonitor.java b/producers/src/main/java/dagger/producers/monitoring/TimingProductionComponentMonitor.java
index e6ae829a3..f84891ae6 100644
--- a/producers/src/main/java/dagger/producers/monitoring/TimingProductionComponentMonitor.java
+++ b/producers/src/main/java/dagger/producers/monitoring/TimingProductionComponentMonitor.java
@@ -25,7 +25,7 @@
  * <p>This assumes that the given recorders do not throw or return null; for example, by using
  * {@link TimingRecorders#delegatingProductionComponentTimingRecorderFactory}.
  */
-final class TimingProductionComponentMonitor implements ProductionComponentMonitor {
+final class TimingProductionComponentMonitor extends ProductionComponentMonitor {
   private final ProductionComponentTimingRecorder recorder;
   private final Ticker ticker;
   private final Stopwatch stopwatch;
@@ -41,7 +41,7 @@ public ProducerMonitor producerMonitorFor(ProducerToken token) {
     return new TimingProducerMonitor(recorder.producerTimingRecorderFor(token), ticker, stopwatch);
   }
 
-  static final class Factory implements ProductionComponentMonitor.Factory {
+  static final class Factory extends ProductionComponentMonitor.Factory {
     private final ProductionComponentTimingRecorder.Factory recorderFactory;
     private final Ticker ticker;
 
diff --git a/producers/src/main/java/dagger/producers/monitoring/internal/MonitorCache.java b/producers/src/main/java/dagger/producers/monitoring/internal/MonitorCache.java
index 2a76c5f71..681f2c0fc 100644
--- a/producers/src/main/java/dagger/producers/monitoring/internal/MonitorCache.java
+++ b/producers/src/main/java/dagger/producers/monitoring/internal/MonitorCache.java
@@ -52,7 +52,7 @@ public ProductionComponentMonitor monitor(
             result = monitor = factory.create(componentProvider.get());
           } catch (RuntimeException e) {
             logger.log(Level.SEVERE, "RuntimeException while constructing monitor factories.", e);
-            result = monitor = Monitors.noOpProductionComponentMonitor();
+            result = monitor = ProductionComponentMonitor.noOp();
           }
         }
       }
diff --git a/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java b/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java
index d0ff778f0..4d7d5b765 100644
--- a/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java
+++ b/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java
@@ -17,7 +17,6 @@
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
-import com.google.common.util.concurrent.ListenableFuture;
 import dagger.producers.monitoring.ProducerMonitor;
 import dagger.producers.monitoring.ProducerToken;
 import dagger.producers.monitoring.ProductionComponentMonitor;
@@ -46,7 +45,7 @@
   public static ProductionComponentMonitor.Factory delegatingProductionComponentMonitorFactory(
       Collection<? extends ProductionComponentMonitor.Factory> factories) {
     if (factories.isEmpty()) {
-      return noOpProductionComponentMonitorFactory();
+      return ProductionComponentMonitor.Factory.noOp();
     } else if (factories.size() == 1) {
       return new NonThrowingProductionComponentMonitor.Factory(Iterables.getOnlyElement(factories));
     } else {
@@ -59,7 +58,7 @@
    * that the delegate throws.
    */
   private static final class NonThrowingProductionComponentMonitor
-      implements ProductionComponentMonitor {
+      extends ProductionComponentMonitor {
     private final ProductionComponentMonitor delegate;
 
     NonThrowingProductionComponentMonitor(ProductionComponentMonitor delegate) {
@@ -70,14 +69,14 @@
     public ProducerMonitor producerMonitorFor(ProducerToken token) {
       try {
         ProducerMonitor monitor = delegate.producerMonitorFor(token);
-        return monitor == null ? noOpProducerMonitor() : new NonThrowingProducerMonitor(monitor);
+        return monitor == null ? ProducerMonitor.noOp() : new NonThrowingProducerMonitor(monitor);
       } catch (RuntimeException e) {
         logProducerMonitorForException(e, delegate, token);
-        return noOpProducerMonitor();
+        return ProducerMonitor.noOp();
       }
     }
 
-    static final class Factory implements ProductionComponentMonitor.Factory {
+    static final class Factory extends ProductionComponentMonitor.Factory {
       private final ProductionComponentMonitor.Factory delegate;
 
       Factory(ProductionComponentMonitor.Factory delegate) {
@@ -89,11 +88,11 @@ public ProductionComponentMonitor create(Object component) {
         try {
           ProductionComponentMonitor monitor = delegate.create(component);
           return monitor == null
-              ? noOpProductionComponentMonitor()
+              ? ProductionComponentMonitor.noOp()
               : new NonThrowingProductionComponentMonitor(monitor);
         } catch (RuntimeException e) {
           logCreateException(e, delegate, component);
-          return noOpProductionComponentMonitor();
+          return ProductionComponentMonitor.noOp();
         }
       }
     }
@@ -161,7 +160,7 @@ public void failed(Throwable t) {
    * that the delegates throw.
    */
   private static final class DelegatingProductionComponentMonitor
-      implements ProductionComponentMonitor {
+      extends ProductionComponentMonitor {
     private final ImmutableList<ProductionComponentMonitor> delegates;
 
     DelegatingProductionComponentMonitor(ImmutableList<ProductionComponentMonitor> delegates) {
@@ -183,7 +182,7 @@ public ProducerMonitor producerMonitorFor(ProducerToken token) {
       }
       ImmutableList<ProducerMonitor> monitors = monitorsBuilder.build();
       if (monitors.isEmpty()) {
-        return noOpProducerMonitor();
+        return ProducerMonitor.noOp();
       } else if (monitors.size() == 1) {
         return new NonThrowingProducerMonitor(Iterables.getOnlyElement(monitors));
       } else {
@@ -191,7 +190,7 @@ public ProducerMonitor producerMonitorFor(ProducerToken token) {
       }
     }
 
-    static final class Factory implements ProductionComponentMonitor.Factory {
+    static final class Factory extends ProductionComponentMonitor.Factory {
       private final ImmutableList<? extends ProductionComponentMonitor.Factory> delegates;
 
       Factory(Iterable<? extends ProductionComponentMonitor.Factory> delegates) {
@@ -213,7 +212,7 @@ public ProductionComponentMonitor create(Object component) {
         }
         ImmutableList<ProductionComponentMonitor> monitors = monitorsBuilder.build();
         if (monitors.isEmpty()) {
-          return noOpProductionComponentMonitor();
+          return ProductionComponentMonitor.noOp();
         } else if (monitors.size() == 1) {
           return new NonThrowingProductionComponentMonitor(Iterables.getOnlyElement(monitors));
         } else {
@@ -290,57 +289,17 @@ public void failed(Throwable t) {
     }
   }
 
-  /** Returns a monitor factory that returns no-op component monitors. */
-  public static ProductionComponentMonitor.Factory noOpProductionComponentMonitorFactory() {
-    return NO_OP_PRODUCTION_COMPONENT_MONITOR_FACTORY;
-  }
-
-  /** Returns a component monitor that returns no-op producer monitors. */
-  public static ProductionComponentMonitor noOpProductionComponentMonitor() {
-    return NO_OP_PRODUCTION_COMPONENT_MONITOR;
-  }
-
-  /** Returns a producer monitor that does nothing. */
-  public static ProducerMonitor noOpProducerMonitor() {
-    return NO_OP_PRODUCER_MONITOR;
-  }
-
   /** Returns a provider of a no-op component monitor. */
   public static Provider<ProductionComponentMonitor> noOpProductionComponentMonitorProvider() {
     return NO_OP_PRODUCTION_COMPONENT_MONITOR_PROVIDER;
   }
 
-  private static final ProductionComponentMonitor.Factory
-      NO_OP_PRODUCTION_COMPONENT_MONITOR_FACTORY =
-          new ProductionComponentMonitor.Factory() {
-            @Override
-            public ProductionComponentMonitor create(Object component) {
-              return noOpProductionComponentMonitor();
-            }
-          };
-
-  private static final ProductionComponentMonitor NO_OP_PRODUCTION_COMPONENT_MONITOR =
-      new ProductionComponentMonitor() {
-        @Override
-        public ProducerMonitor producerMonitorFor(ProducerToken token) {
-          return noOpProducerMonitor();
-        }
-      };
-
-  private static final ProducerMonitor NO_OP_PRODUCER_MONITOR =
-      new ProducerMonitor() {
-        @Override
-        public <T> void addCallbackTo(ListenableFuture<T> future) {
-          // overridden to avoid adding a do-nothing callback
-        }
-      };
-
   private static final Provider<ProductionComponentMonitor>
       NO_OP_PRODUCTION_COMPONENT_MONITOR_PROVIDER =
           new Provider() {
             @Override
             public ProductionComponentMonitor get() {
-              return noOpProductionComponentMonitor();
+              return ProductionComponentMonitor.noOp();
             }
           };
 
diff --git a/producers/src/test/java/dagger/producers/monitoring/internal/MonitorsTest.java b/producers/src/test/java/dagger/producers/monitoring/internal/MonitorsTest.java
index 224d8e0b6..31952c334 100644
--- a/producers/src/test/java/dagger/producers/monitoring/internal/MonitorsTest.java
+++ b/producers/src/test/java/dagger/producers/monitoring/internal/MonitorsTest.java
@@ -59,7 +59,7 @@ public void zeroMonitorsReturnsNoOp() {
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.<ProductionComponentMonitor.Factory>of());
-    assertThat(factory).isSameAs(Monitors.noOpProductionComponentMonitorFactory());
+    assertThat(factory).isSameAs(ProductionComponentMonitor.Factory.noOp());
   }
 
   @Test
@@ -68,7 +68,7 @@ public void singleMonitor_nullProductionComponentMonitor() {
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(mockProductionComponentMonitorFactory));
-    assertThat(factory.create(new Object())).isSameAs(Monitors.noOpProductionComponentMonitor());
+    assertThat(factory.create(new Object())).isSameAs(ProductionComponentMonitor.noOp());
   }
 
   @Test
@@ -79,7 +79,7 @@ public void singleMonitor_throwingProductionComponentMonitorFactory() {
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(mockProductionComponentMonitorFactory));
-    assertThat(factory.create(new Object())).isSameAs(Monitors.noOpProductionComponentMonitor());
+    assertThat(factory.create(new Object())).isSameAs(ProductionComponentMonitor.noOp());
   }
 
   @Test
@@ -93,7 +93,7 @@ public void singleMonitor_nullProducerMonitor() {
             ImmutableList.of(mockProductionComponentMonitorFactory));
     ProductionComponentMonitor monitor = factory.create(new Object());
     assertThat(monitor.producerMonitorFor(ProducerToken.create(Object.class)))
-        .isSameAs(Monitors.noOpProducerMonitor());
+        .isSameAs(ProducerMonitor.noOp());
   }
 
   @Test
@@ -108,7 +108,7 @@ public void singleMonitor_throwingProductionComponentMonitor() {
             ImmutableList.of(mockProductionComponentMonitorFactory));
     ProductionComponentMonitor monitor = factory.create(new Object());
     assertThat(monitor.producerMonitorFor(ProducerToken.create(Object.class)))
-        .isSameAs(Monitors.noOpProducerMonitor());
+        .isSameAs(ProducerMonitor.noOp());
   }
 
   @Test
@@ -222,7 +222,7 @@ public void multipleMonitors_nullProductionComponentMonitors() {
                 mockProductionComponentMonitorFactoryA,
                 mockProductionComponentMonitorFactoryB,
                 mockProductionComponentMonitorFactoryC));
-    assertThat(factory.create(new Object())).isSameAs(Monitors.noOpProductionComponentMonitor());
+    assertThat(factory.create(new Object())).isSameAs(ProductionComponentMonitor.noOp());
   }
 
   @Test
@@ -242,7 +242,7 @@ public void multipleMonitors_throwingProductionComponentMonitorFactories() {
                 mockProductionComponentMonitorFactoryA,
                 mockProductionComponentMonitorFactoryB,
                 mockProductionComponentMonitorFactoryC));
-    assertThat(factory.create(new Object())).isSameAs(Monitors.noOpProductionComponentMonitor());
+    assertThat(factory.create(new Object())).isSameAs(ProductionComponentMonitor.noOp());
   }
 
   @Test
