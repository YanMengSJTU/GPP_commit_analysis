diff --git a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentMultibindingsTest.java b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentMultibindingsTest.java
index 269782ad2..99ca1cd44 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentMultibindingsTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentMultibindingsTest.java
@@ -100,13 +100,12 @@ public void testParentWithoutProvisionHasChildWithoutProvision() {
                 .requiresMultibindingsBoundInChild())
         .isEqualTo(BOUND_IN_CHILD);
 
-    // TODO(b/26145104)
-    // assertThat(
-    //         parentWithoutProvisionHasChildWithoutProvision
-    //             .childWithoutProvision()
-    //             .grandchild()
-    //             .setOfRequiresMultibindingsInParentAndChild())
-    //     .containsExactly(BOUND_IN_PARENT_AND_CHILD);
+    assertThat(
+            parentWithoutProvisionHasChildWithoutProvision
+                .childWithoutProvision()
+                .grandchild()
+                .setOfRequiresMultibindingsInParentAndChild())
+        .containsExactly(BOUND_IN_PARENT_AND_CHILD);
   }
 
   @Test
@@ -166,21 +165,19 @@ public void testParentWithProvisionHasChildWithoutProvision() {
                 .requiresMultibindingsBoundInChild())
         .isEqualTo(BOUND_IN_CHILD);
 
-    // TODO(b/26145104)
-    // assertThat(
-    //         parentWithProvisionHasChildWithoutProvision
-    //             .childWithoutProvision()
-    //             .grandchild()
-    //             .requiresMultibindingsBoundInParentAndChild())
-    //     .isEqualTo(BOUND_IN_PARENT_AND_CHILD);
-
-    // TODO(b/26145104)
-    // assertThat(
-    //         parentWithProvisionHasChildWithoutProvision
-    //             .childWithoutProvision()
-    //             .grandchild()
-    //             .setOfRequiresMultibindingsInParentAndChild())
-    //     .containsExactly(BOUND_IN_PARENT_AND_CHILD);
+    assertThat(
+            parentWithProvisionHasChildWithoutProvision
+                .childWithoutProvision()
+                .grandchild()
+                .requiresMultibindingsBoundInParentAndChild())
+        .isEqualTo(BOUND_IN_PARENT_AND_CHILD);
+
+    assertThat(
+            parentWithProvisionHasChildWithoutProvision
+                .childWithoutProvision()
+                .grandchild()
+                .setOfRequiresMultibindingsInParentAndChild())
+        .containsExactly(BOUND_IN_PARENT_AND_CHILD);
   }
 
   @Test
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index 7290e951d..fffec346c 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -417,9 +417,9 @@ ResolvedBindings lookUpBindings(DependencyRequest request) {
       /**
        * Returns the component that "owns" {@code binding}.
        *
-       * <p>If {@code binding} is bound in an ancestor component, resolves {@code request} in that
-       * component. Returns the ancestor component in which it is bound, unless {@code binding}
-       * depends on local multibindings, in which case returns this component.
+       * <p>If {@code binding} is bound in an ancestor component, resolves {@code request} in this
+       * component's parent. Returns the ancestor component in which it is bound, unless
+       * {@code binding} depends on local multibindings, in which case returns this component.
        *
        * <p>If {@code binding} is not bound in an ancestor component, simply returns this component.
        */
@@ -432,13 +432,15 @@ private ComponentDescriptor getOwningComponent(
       }
 
       /**
-       * Returns {@code true} if {@code binding} is owned by an ancestor. If so, calls
-       * {@link #resolve(DependencyRequest) resolve(request)} on that component's resolver.
+       * Returns {@code true} if {@code binding} is owned by an ancestor. If so,
+       * {@linkplain #resolve(DependencyRequest) resolves} the request in this component's parent.
+       * Don't resolve directly in the owning component in case it depends on multibindings in any
+       * of its descendants.
        */
       private boolean isResolvedInParent(DependencyRequest request, ContributionBinding binding) {
         Optional<Resolver> owningResolver = getOwningResolver(binding);
         if (owningResolver.isPresent() && !owningResolver.get().equals(this)) {
-          owningResolver.get().resolve(request);
+          parentResolver.get().resolve(request);
           return true;
         } else {
           return false;
@@ -682,7 +684,6 @@ private boolean isMultibindingsWithLocalContributions(ResolvedBindings resolvedB
               && explicitBindings.containsKey(resolvedBindings.key());
         }
       }
-
     }
   }
 }
