diff --git a/android/pom.xml b/android/pom.xml
new file mode 100644
index 000000000..0402608c5
--- /dev/null
+++ b/android/pom.xml
@@ -0,0 +1,79 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ Copyright (C) 2016 Google, Inc.
+
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>com.google.dagger</groupId>
+    <artifactId>dagger-parent</artifactId>
+    <version>HEAD-SNAPSHOT</version>
+  </parent>
+
+  <artifactId>dagger-android</artifactId>
+  <name>Dagger for Android</name>
+
+  <packaging>aar</packaging>
+
+  <properties>
+    <java.version>1.6</java.version>
+  </properties>
+
+  <repositories>
+    <repository>
+      <id>android-support</id>
+      <url>file://${env.ANDROID_HOME}/extras/android/m2repository</url>
+    </repository>
+  </repositories>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.google.dagger</groupId>
+      <artifactId>dagger</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>com.google.android</groupId>
+      <artifactId>android</artifactId>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>com.android.support</groupId>
+      <artifactId>support-v4</artifactId>
+      <type>aar</type>
+    </dependency>
+    <dependency>
+      <groupId>com.android.support</groupId>
+      <artifactId>support-annotations</artifactId>
+    </dependency>
+  </dependencies>
+
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>com.simpligility.maven.plugins</groupId>
+        <artifactId>android-maven-plugin</artifactId>
+        <extensions>true</extensions>
+        <configuration>
+          <sdk>
+            <platform>24</platform>
+            <path>${env.ANDROID_HOME}</path>
+          </sdk>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+</project>
diff --git a/android/src/it/functional-tests/src/main/java/test/android/InScope.java b/android/src/it/functional-tests/src/main/java/test/android/InScope.java
new file mode 100644
index 000000000..6054add97
--- /dev/null
+++ b/android/src/it/functional-tests/src/main/java/test/android/InScope.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package test.android;
+
+import java.lang.annotation.Annotation;
+import javax.inject.Qualifier;
+
+@Qualifier
+@interface InScope {
+  Class<? extends Annotation> value();
+}
diff --git a/android/src/it/functional-tests/src/main/java/test/android/ReleaseWhenModerate.java b/android/src/it/functional-tests/src/main/java/test/android/ReleaseWhenModerate.java
new file mode 100644
index 000000000..b5b100251
--- /dev/null
+++ b/android/src/it/functional-tests/src/main/java/test/android/ReleaseWhenModerate.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package test.android;
+
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import dagger.android.ReleaseReferencesAt;
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+import javax.inject.Scope;
+
+@Documented
+@Retention(RUNTIME)
+@Target({TYPE, METHOD})
+@ReleaseReferencesAt(TRIM_MEMORY_MODERATE)
+@Scope
+@interface ReleaseWhenModerate {}
diff --git a/android/src/it/functional-tests/src/main/java/test/android/ReleaseWhenUiHidden.java b/android/src/it/functional-tests/src/main/java/test/android/ReleaseWhenUiHidden.java
new file mode 100644
index 000000000..b3dfd17aa
--- /dev/null
+++ b/android/src/it/functional-tests/src/main/java/test/android/ReleaseWhenUiHidden.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package test.android;
+
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import dagger.android.ReleaseReferencesAt;
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+import javax.inject.Scope;
+
+@Documented
+@Retention(RUNTIME)
+@Target({TYPE, METHOD})
+@ReleaseReferencesAt(TRIM_MEMORY_UI_HIDDEN)
+@Scope
+@interface ReleaseWhenUiHidden {}
diff --git a/android/src/it/functional-tests/src/main/java/test/android/TestComponent.java b/android/src/it/functional-tests/src/main/java/test/android/TestComponent.java
new file mode 100644
index 000000000..c46420d07
--- /dev/null
+++ b/android/src/it/functional-tests/src/main/java/test/android/TestComponent.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package test.android;
+
+import dagger.Component;
+import dagger.android.AndroidMemorySensitiveReferenceManager;
+import javax.inject.Singleton;
+
+@Singleton
+@ReleaseWhenUiHidden
+@ReleaseWhenModerate
+@Component(modules = TestModule.class)
+interface TestComponent {
+  AndroidMemorySensitiveReferenceManager manager();
+
+  @InScope(ReleaseWhenUiHidden.class)
+  Object releasedWhenUiHidden();
+
+  @InScope(ReleaseWhenModerate.class)
+  Object releasedWhenModerate();
+}
diff --git a/android/src/it/functional-tests/src/main/java/test/android/TestModule.java b/android/src/it/functional-tests/src/main/java/test/android/TestModule.java
new file mode 100644
index 000000000..7d7c59e6c
--- /dev/null
+++ b/android/src/it/functional-tests/src/main/java/test/android/TestModule.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package test.android;
+
+import dagger.Module;
+import dagger.Provides;
+
+@Module
+class TestModule {
+  int releasedWhenUiHiddenCalls;
+  int releasedWhenModerateCalls;
+
+  @Provides
+  @ReleaseWhenUiHidden
+  @InScope(ReleaseWhenUiHidden.class)
+  Object releasedWhenUiHidden() {
+    ++releasedWhenUiHiddenCalls;
+    return new Object();
+  }
+
+  @Provides
+  @ReleaseWhenModerate
+  @InScope(ReleaseWhenModerate.class)
+  Object releasedWhenModerate() {
+    ++releasedWhenModerateCalls;
+    return new Object();
+  }
+}
diff --git a/android/src/it/functional-tests/src/test/java/test/android/AndroidMemorySensitiveReferenceManagerTest.java b/android/src/it/functional-tests/src/test/java/test/android/AndroidMemorySensitiveReferenceManagerTest.java
new file mode 100644
index 000000000..bd95296fd
--- /dev/null
+++ b/android/src/it/functional-tests/src/test/java/test/android/AndroidMemorySensitiveReferenceManagerTest.java
@@ -0,0 +1,144 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package test.android;
+
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE;
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
+import static com.google.common.truth.Truth.assertThat;
+import static test.android.AndroidMemorySensitiveReferenceManagerTest.AllWeakReferencesCleared.allWeakReferencesCleared;
+
+import com.google.common.collect.ImmutableList;
+import com.google.common.testing.GcFinalization;
+import com.google.common.testing.GcFinalization.FinalizationPredicate;
+import java.lang.ref.WeakReference;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+/** Functional tests of {@link dagger.android.AndroidMemorySensitiveReferenceManager}. */
+@RunWith(JUnit4.class)
+public final class AndroidMemorySensitiveReferenceManagerTest {
+
+  private TestModule testModule;
+  private TestComponent component;
+
+  @Before
+  public void setUp() {
+    testModule = new TestModule();
+    component = DaggerTestComponent.builder().testModule(testModule).build();
+  }
+
+  @Test
+  public void scoped() {
+    assertThat(component.releasedWhenUiHidden()).isSameAs(component.releasedWhenUiHidden());
+    assertThat(component.releasedWhenModerate()).isSameAs(component.releasedWhenModerate());
+    assertThat(testModule.releasedWhenUiHiddenCalls).isEqualTo(1);
+    assertThat(testModule.releasedWhenModerateCalls).isEqualTo(1);
+  }
+
+  @Test
+  public void onTrimMemory_aboveThresholds() {
+    component.releasedWhenUiHidden();
+    component.releasedWhenModerate();
+
+    component.manager().onTrimMemory(TRIM_MEMORY_COMPLETE);
+    GcFinalization.awaitDone(
+        allWeakReferencesCleared(
+            component.releasedWhenUiHidden(), component.releasedWhenModerate()));
+
+    assertThat(component.releasedWhenUiHidden()).isSameAs(component.releasedWhenUiHidden());
+    assertThat(component.releasedWhenModerate()).isSameAs(component.releasedWhenModerate());
+    assertThat(testModule.releasedWhenUiHiddenCalls).isEqualTo(2);
+    assertThat(testModule.releasedWhenModerateCalls).isEqualTo(2);
+  }
+
+  @Test
+  public void onTrimMemory_atOneThresholdBelowAnother() {
+    component.releasedWhenUiHidden();
+    component.releasedWhenModerate();
+
+    component.manager().onTrimMemory(TRIM_MEMORY_UI_HIDDEN);
+    GcFinalization.awaitDone(allWeakReferencesCleared(component.releasedWhenUiHidden()));
+
+    assertThat(component.releasedWhenUiHidden()).isSameAs(component.releasedWhenUiHidden());
+    assertThat(component.releasedWhenModerate()).isSameAs(component.releasedWhenModerate());
+    assertThat(testModule.releasedWhenUiHiddenCalls).isEqualTo(2);
+    assertThat(testModule.releasedWhenModerateCalls).isEqualTo(1);
+  }
+
+  @Test
+  public void onTrimMemory_belowThresholds() {
+    component.releasedWhenUiHidden();
+    component.releasedWhenModerate();
+    assertThat(testModule.releasedWhenUiHiddenCalls).isEqualTo(1);
+    assertThat(testModule.releasedWhenModerateCalls).isEqualTo(1);
+
+    component.manager().onTrimMemory(TRIM_MEMORY_RUNNING_MODERATE);
+    GcFinalization.awaitDone(allWeakReferencesCleared(new Object()));
+
+    assertThat(component.releasedWhenUiHidden()).isSameAs(component.releasedWhenUiHidden());
+    assertThat(component.releasedWhenModerate()).isSameAs(component.releasedWhenModerate());
+    assertThat(testModule.releasedWhenUiHiddenCalls).isEqualTo(1);
+    assertThat(testModule.releasedWhenModerateCalls).isEqualTo(1);
+  }
+
+  @Test
+  public void onTrimMemory_restore() {
+    component.releasedWhenUiHidden();
+    component.releasedWhenModerate();
+    assertThat(testModule.releasedWhenUiHiddenCalls).isEqualTo(1);
+    assertThat(testModule.releasedWhenModerateCalls).isEqualTo(1);
+
+    component.manager().onTrimMemory(TRIM_MEMORY_UI_HIDDEN);
+    component.manager().onTrimMemory(TRIM_MEMORY_RUNNING_MODERATE);
+    GcFinalization.awaitDone(allWeakReferencesCleared(new Object()));
+
+    assertThat(component.releasedWhenUiHidden()).isSameAs(component.releasedWhenUiHidden());
+    assertThat(component.releasedWhenModerate()).isSameAs(component.releasedWhenModerate());
+    assertThat(testModule.releasedWhenUiHiddenCalls).isEqualTo(1);
+    assertThat(testModule.releasedWhenModerateCalls).isEqualTo(1);
+  }
+
+  static final class AllWeakReferencesCleared implements FinalizationPredicate {
+
+    private final ImmutableList<WeakReference<Object>> references;
+
+    AllWeakReferencesCleared(ImmutableList<WeakReference<Object>> references) {
+      this.references = references;
+    }
+
+    @Override
+    public boolean isDone() {
+      for (WeakReference<Object> reference : references) {
+        if (reference.get() != null) {
+          return false;
+        }
+      }
+      return true;
+    }
+
+    static AllWeakReferencesCleared allWeakReferencesCleared(Object... objects) {
+      ImmutableList.Builder<WeakReference<Object>> referencesBuilder = ImmutableList.builder();
+      for (Object object : objects) {
+        referencesBuilder.add(new WeakReference<>(object));
+      }
+      return new AllWeakReferencesCleared(referencesBuilder.build());
+    }
+  }
+}
diff --git a/android/src/main/AndroidManifest.xml b/android/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..5101105d1
--- /dev/null
+++ b/android/src/main/AndroidManifest.xml
@@ -0,0 +1,19 @@
+<!--
+ Copyright (C) 2016 Google, Inc.
+
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="dagger.android">
+  <uses-sdk android:minSdkVersion="15" android:targetSdkVersion="24" />
+</manifest>
diff --git a/android/src/main/java/dagger/android/AndroidMemorySensitiveReferenceManager.java b/android/src/main/java/dagger/android/AndroidMemorySensitiveReferenceManager.java
new file mode 100644
index 000000000..9a2587875
--- /dev/null
+++ b/android/src/main/java/dagger/android/AndroidMemorySensitiveReferenceManager.java
@@ -0,0 +1,72 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android;
+
+import dagger.internal.Beta;
+import dagger.internal.GwtIncompatible;
+import dagger.releasablereferences.TypedReleasableReferenceManager;
+import java.util.Set;
+import javax.inject.Inject;
+
+/**
+ * Releases references in {@link ReleaseReferencesAt} {@linkplain javax.inject.Scope scopes} in
+ * low-memory conditions.
+ *
+ * <p>In order to release references in low-memory conditions, inject an {@code
+ * AndroidMemorySensitiveReferenceManager} into your {@link android.app.Application} and delegate
+ * {@link android.app.Application#onTrimMemory(int)} to it.
+ *
+ * <p>For example:
+ *
+ * <pre>
+ *   class MyApplication extends Application {
+ *     {@literal @Inject} AndroidMemorySensitiveReferenceManager manager;
+ *
+ *     public void onTrimMemory(int level) {
+ *       manager.onTrimMemory(level);
+ *     }
+ *   }</pre>
+ */
+@Beta
+@GwtIncompatible
+public final class AndroidMemorySensitiveReferenceManager {
+
+  private final Set<TypedReleasableReferenceManager<ReleaseReferencesAt>> managers;
+
+  @Inject
+  AndroidMemorySensitiveReferenceManager(
+      Set<TypedReleasableReferenceManager<ReleaseReferencesAt>> managers) {
+    this.managers = managers;
+  }
+
+  /**
+   * Releases references for {@link ReleaseReferencesAt} scopes whose {@link
+   * ReleaseReferencesAt#value()} is less than or equal to {@code level}. Restores references for
+   * scopes whose {@link ReleaseReferencesAt#value()} is greater than {@code level}.
+   *
+   * @see android.app.Application#onTrimMemory(int)
+   */
+  public void onTrimMemory(int level) {
+    for (TypedReleasableReferenceManager<ReleaseReferencesAt> manager : managers) {
+      if (level >= manager.metadata().value()) {
+        manager.releaseStrongReferences();
+      } else {
+        manager.restoreStrongReferences();
+      }
+    }
+  }
+}
diff --git a/android/src/main/java/dagger/android/OnTrimMemoryValue.java b/android/src/main/java/dagger/android/OnTrimMemoryValue.java
new file mode 100644
index 000000000..9f918460e
--- /dev/null
+++ b/android/src/main/java/dagger/android/OnTrimMemoryValue.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android;
+
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE;
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW;
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE;
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
+import static java.lang.annotation.RetentionPolicy.SOURCE;
+
+import android.content.ComponentCallbacks2;
+import android.support.annotation.IntDef;
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+
+/**
+ * Annotates an integer element to indicate that its value should be one of the constants defined in
+ * {@link ComponentCallbacks2}.
+ */
+@Documented
+@Retention(SOURCE)
+@IntDef({
+  TRIM_MEMORY_BACKGROUND,
+  TRIM_MEMORY_COMPLETE,
+  TRIM_MEMORY_MODERATE,
+  TRIM_MEMORY_RUNNING_CRITICAL,
+  TRIM_MEMORY_RUNNING_CRITICAL,
+  TRIM_MEMORY_RUNNING_LOW,
+  TRIM_MEMORY_RUNNING_MODERATE,
+  TRIM_MEMORY_UI_HIDDEN
+})
+@interface OnTrimMemoryValue {}
diff --git a/android/src/main/java/dagger/android/ReleaseReferencesAt.java b/android/src/main/java/dagger/android/ReleaseReferencesAt.java
new file mode 100644
index 000000000..a0140e9af
--- /dev/null
+++ b/android/src/main/java/dagger/android/ReleaseReferencesAt.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android;
+
+import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
+
+import dagger.internal.Beta;
+import dagger.internal.GwtIncompatible;
+import dagger.releasablereferences.CanReleaseReferences;
+import java.lang.annotation.Documented;
+import java.lang.annotation.Target;
+
+/**
+ * Annotates {@linkplain javax.inject.Scope scopes} to associate them with a low-memory threshold
+ * level, as described in {@link android.app.Application#onTrimMemory(int)}.
+ *
+ * <p>For example:
+ *
+ * <pre>
+ *   {@literal @Documented}
+ *   {@literal @Retention}(RUNTIME)
+ *   {@literal @Target}({TYPE, METHOD})
+ *   {@literal @ReleaseReferencesAt}(TRIM_MEMORY_BACKGROUND)
+ *   {@literal @Scope}
+ *   public {@literal @interface} MyScope {}</pre>
+ *
+ * <p>Any scope annotated with {@code @ReleaseReferencesAt} can {@linkplain CanReleaseReferences
+ * release its references}.
+ *
+ * <p>In order to release references in low-memory conditions, inject an {@link
+ * AndroidMemorySensitiveReferenceManager} into your {@link android.app.Application} and delegate
+ * {@link android.app.Application#onTrimMemory(int)} to it.
+ */
+@Beta
+@Documented
+@GwtIncompatible
+@Target(ANNOTATION_TYPE)
+@CanReleaseReferences
+public @interface ReleaseReferencesAt {
+  /**
+   * If {@link AndroidMemorySensitiveReferenceManager#onTrimMemory(int)} is called with a value
+   * greater than or equal to this, the scope's references will be released. If it is called with a
+   * value less than this, the scope's references will be restored.
+   *
+   * <p>Use one of the constants defined in {@link android.content.ComponentCallbacks2}.
+   */
+  @OnTrimMemoryValue
+  int value();
+}
diff --git a/pom.xml b/pom.xml
index 21217f5b8..04f0ebd7f 100644
--- a/pom.xml
+++ b/pom.xml
@@ -33,6 +33,7 @@
   <url>https://github.com/square/dagger</url>
 
   <modules>
+    <module>android</module>
     <module>compiler</module>
     <module>core</module>
     <module>gwt</module>
@@ -240,6 +241,7 @@
         <activeByDefault>true</activeByDefault>
       </activation>
       <modules>
+        <module>android</module>
         <module>core</module>
         <module>compiler</module>
         <module>gwt</module>
