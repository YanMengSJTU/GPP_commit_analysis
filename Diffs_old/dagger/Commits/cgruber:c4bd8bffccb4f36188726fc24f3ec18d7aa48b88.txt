diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 72e761cbf..ecb2cfd20 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -49,7 +49,7 @@
       Types types,
       Key.Factory keyFactory,
       Diagnostic.Kind nullableValidationType) {
-    super(filer);
+    super(filer, elements);
     this.types = types;
     this.elements = elements;
     this.keyFactory = keyFactory;
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index c5fd2fd5e..078736090 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -103,14 +103,16 @@ public SourceVersion getSupportedSourceVersion() {
     Key.Factory keyFactory = new Key.Factory(types, elements);
 
     this.factoryGenerator =
-        new FactoryGenerator(filer, DependencyRequestMapper.FOR_PROVIDER, nullableDiagnosticType);
+        new FactoryGenerator(
+            filer, elements, DependencyRequestMapper.FOR_PROVIDER, nullableDiagnosticType);
     this.membersInjectorGenerator =
-        new MembersInjectorGenerator(filer, DependencyRequestMapper.FOR_PROVIDER);
+        new MembersInjectorGenerator(filer, elements, DependencyRequestMapper.FOR_PROVIDER);
     ComponentGenerator componentGenerator =
         new ComponentGenerator(filer, elements, types, keyFactory, nullableDiagnosticType);
     ProducerFactoryGenerator producerFactoryGenerator =
-        new ProducerFactoryGenerator(filer, DependencyRequestMapper.FOR_PRODUCER);
-    MonitoringModuleGenerator monitoringModuleGenerator = new MonitoringModuleGenerator(filer);
+        new ProducerFactoryGenerator(filer, elements, DependencyRequestMapper.FOR_PRODUCER);
+    MonitoringModuleGenerator monitoringModuleGenerator =
+        new MonitoringModuleGenerator(filer, elements);
 
     DependencyRequest.Factory dependencyRequestFactory =
         new DependencyRequest.Factory(elements, keyFactory);
@@ -139,7 +141,7 @@ public SourceVersion getSupportedSourceVersion() {
             provisionBindingFactory,
             productionBindingFactory);
 
-    MapKeyGenerator mapKeyGenerator = new MapKeyGenerator(filer);
+    MapKeyGenerator mapKeyGenerator = new MapKeyGenerator(filer, elements);
     ComponentHierarchyValidator componentHierarchyValidator = new ComponentHierarchyValidator();
     BindingGraphValidator bindingGraphValidator =
         new BindingGraphValidator(
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
index 10704c9ad..aeab5a746 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
@@ -147,7 +147,6 @@ protected ClassWriter createComponentClass() {
     javaWriters.add(javaWriter);
 
     ClassWriter componentWriter = javaWriter.addClass(name.simpleName());
-    componentWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getCanonicalName());
     componentWriter.addModifiers(PUBLIC, FINAL);
     componentWriter.setSupertype(componentDefinitionType());
     return componentWriter;
diff --git a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
index 2aa355e87..0fbfa7dde 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
@@ -49,6 +49,7 @@
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeParameterElement;
 import javax.lang.model.type.TypeMirror;
+import javax.lang.model.util.Elements;
 import javax.tools.Diagnostic;
 
 import static com.google.common.base.Preconditions.checkState;
@@ -75,9 +76,12 @@
   private final DependencyRequestMapper dependencyRequestMapper;
   private final Diagnostic.Kind nullableValidationType;
 
-  FactoryGenerator(Filer filer, DependencyRequestMapper dependencyRequestMapper,
+  FactoryGenerator(
+      Filer filer,
+      Elements elements,
+      DependencyRequestMapper dependencyRequestMapper,
       Diagnostic.Kind nullableValidationType) {
-    super(filer);
+    super(filer, elements);
     this.dependencyRequestMapper = dependencyRequestMapper;
     this.nullableValidationType = nullableValidationType;
   }
@@ -149,7 +153,6 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
         throw new AssertionError();
     }
 
-    factoryWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getName());
     factoryWriter.addModifiers(PUBLIC);
     factoryWriter.addImplementedType(
         ParameterizedTypeName.create(ClassName.fromClass(Factory.class), providedTypeName));
diff --git a/compiler/src/main/java/dagger/internal/codegen/MapKeyGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MapKeyGenerator.java
index 8d72e5e48..432f8f578 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MapKeyGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MapKeyGenerator.java
@@ -32,13 +32,13 @@
 import dagger.internal.codegen.writer.TypeWriter;
 import java.util.LinkedHashSet;
 import java.util.Set;
-import javax.annotation.Generated;
 import javax.annotation.processing.Filer;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.DeclaredType;
+import javax.lang.model.util.Elements;
 import javax.lang.model.util.SimpleTypeVisitor6;
 
 import static dagger.internal.codegen.MapKeys.getMapKeyCreatorClassName;
@@ -90,8 +90,8 @@ static MapKeyCreatorSpecification unwrappedMapKeyWithAnnotationValue(
     }
   }
 
-  MapKeyGenerator(Filer filer) {
-    super(filer);
+  MapKeyGenerator(Filer filer, Elements elements) {
+    super(filer, elements);
   }
 
   @Override
@@ -115,7 +115,6 @@ ClassName nameGeneratedType(MapKeyCreatorSpecification mapKeyCreatorType) {
       ClassName generatedTypeName, MapKeyCreatorSpecification mapKeyCreatorType) {
     JavaWriter writer = JavaWriter.inPackage(generatedTypeName.packageName());
     TypeWriter mapKeyCreatorWriter = writer.addClass(generatedTypeName.simpleName());
-    mapKeyCreatorWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getName());
     mapKeyCreatorWriter.addModifiers(PUBLIC, FINAL);
 
     for (TypeElement annotationElement :
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
index 3694d2e81..beb637682 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
@@ -55,6 +55,7 @@
 import javax.lang.model.type.ArrayType;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeVisitor;
+import javax.lang.model.util.Elements;
 import javax.lang.model.util.SimpleTypeVisitor7;
 
 import static com.google.auto.common.MoreElements.getPackage;
@@ -79,9 +80,8 @@
   private final DependencyRequestMapper dependencyRequestMapper;
 
   MembersInjectorGenerator(
-      Filer filer,
-      DependencyRequestMapper dependencyRequestMapper) {
-    super(filer);
+      Filer filer, Elements elements, DependencyRequestMapper dependencyRequestMapper) {
+    super(filer, elements);
     this.dependencyRequestMapper = dependencyRequestMapper;
   }
 
@@ -127,8 +127,6 @@ ClassName nameGeneratedType(MembersInjectionBinding binding) {
       typeParameters.add(TypeVariableName.fromTypeParameterElement(typeParameter));
     }
     injectorWriter.addTypeParameters(typeParameters);
-    injectorWriter.annotate(Generated.class)
-        .setValue(ComponentProcessor.class.getCanonicalName());
     injectorWriter.addModifiers(PUBLIC, FINAL);
     TypeName implementedType =
         ParameterizedTypeName.create(MembersInjector.class, injectedTypeName);
diff --git a/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
index a4e020b32..c6b3344da 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
@@ -35,6 +35,7 @@
 import javax.inject.Provider;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
+import javax.lang.model.util.Elements;
 
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.STATIC;
@@ -46,8 +47,8 @@
       ParameterizedTypeName.create(
           Set.class, ClassName.fromClass(ProductionComponentMonitor.Factory.class));
 
-  MonitoringModuleGenerator(Filer filer) {
-    super(filer);
+  MonitoringModuleGenerator(Filer filer, Elements elements) {
+    super(filer, elements);
   }
 
   @Override
@@ -69,7 +70,6 @@ ClassName nameGeneratedType(TypeElement componentElement) {
   ImmutableSet<JavaWriter> write(ClassName generatedTypeName, TypeElement componentElement) {
     JavaWriter writer = JavaWriter.inPackage(generatedTypeName.packageName());
     ClassWriter classWriter = writer.addClass(generatedTypeName.simpleName());
-    classWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getName());
     classWriter.annotate(Module.class);
     classWriter.addModifiers(FINAL);
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index 3c47d55ca..d66a865ba 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -51,6 +51,7 @@
 import javax.annotation.processing.Filer;
 import javax.lang.model.element.Element;
 import javax.lang.model.type.TypeMirror;
+import javax.lang.model.util.Elements;
 
 import static dagger.internal.codegen.SourceFiles.frameworkTypeUsageStatement;
 import static dagger.internal.codegen.SourceFiles.generatedClassNameForBinding;
@@ -70,8 +71,9 @@
 final class ProducerFactoryGenerator extends SourceFileGenerator<ProductionBinding> {
   private final DependencyRequestMapper dependencyRequestMapper;
 
-  ProducerFactoryGenerator(Filer filer, DependencyRequestMapper dependencyRequestMapper) {
-    super(filer);
+  ProducerFactoryGenerator(
+      Filer filer, Elements elements, DependencyRequestMapper dependencyRequestMapper) {
+    super(filer, elements);
     this.dependencyRequestMapper = dependencyRequestMapper;
   }
 
@@ -133,7 +135,6 @@ ClassName nameGeneratedType(ProductionBinding binding) {
         .addSnippet("assert executor != null;")
         .addSnippet("this.executor = executor;");
 
-    factoryWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getName());
     factoryWriter.addModifiers(PUBLIC);
     factoryWriter.addModifiers(FINAL);
     factoryWriter.setSuperclass(
diff --git a/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java b/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java
index 4b6efc0ea..4dc35ca2a 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java
@@ -27,6 +27,7 @@
 import java.io.IOException;
 import javax.annotation.processing.Filer;
 import javax.lang.model.element.Element;
+import javax.lang.model.util.Elements;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
@@ -41,9 +42,11 @@
  */
 abstract class SourceFileGenerator<T> {
   private final Filer filer;
+  private final boolean generatedAnnotationAvailable;
 
-  SourceFileGenerator(Filer filer) {
+  SourceFileGenerator(Filer filer, Elements elements) {
     this.filer = checkNotNull(filer);
+    generatedAnnotationAvailable = elements.getTypeElement("javax.annotation.Generated") != null;
   }
 
   final void generate(T input) throws SourceFileGenerationException {
@@ -53,6 +56,7 @@ final void generate(T input) throws SourceFileGenerationException {
     try {
       ImmutableSet<JavaWriter> writers = write(generatedTypeName, input);
       for (JavaWriter javaWriter : writers) {
+        javaWriter.markGenerated(generatedAnnotationAvailable);
         try {
           javaWriter.file(filer, originatingElements);
         } catch (IOException e) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/AnnotationWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/AnnotationWriter.java
index 8dbf27bc3..9ffab1871 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/AnnotationWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/AnnotationWriter.java
@@ -20,6 +20,7 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import java.io.IOException;
+import java.util.Iterator;
 import java.util.Map.Entry;
 import java.util.Set;
 import java.util.SortedMap;
@@ -59,12 +60,17 @@ public Appendable write(Appendable appendable, Context context) throws IOExcepti
     annotationName.write(appendable, context);
     if (!memberMap.isEmpty()) {
       appendable.append('(');
-      if (memberMap.size() == 1) {
-        Entry<String, Writable> onlyEntry = Iterables.getOnlyElement(memberMap.entrySet());
-        if (!onlyEntry.getKey().equals("value")) {
-          appendable.append(onlyEntry.getKey()).append(" = ");
+      boolean singleEntry = memberMap.size() == 1;
+      Iterator<Entry<String, Writable>> iterator = memberMap.entrySet().iterator();
+      while (iterator.hasNext()) {
+        Entry<String, Writable> member = iterator.next();
+        if (!singleEntry || !member.getKey().equals("value")) {
+          appendable.append(member.getKey()).append(" = ");
+        }
+        member.getValue().write(appendable, context);
+        if (iterator.hasNext()) {
+          appendable.append(",");
         }
-        onlyEntry.getValue().write(appendable, context);
       }
       appendable.append(')');
     }
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
index 5977371ac..674dd621e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
@@ -30,6 +30,7 @@
 import com.google.common.io.CharSource;
 import com.google.googlejavaformat.java.Formatter;
 import com.google.googlejavaformat.java.FormatterException;
+import dagger.internal.codegen.ComponentProcessor;
 import dagger.internal.codegen.writer.Writable.Context;
 import java.io.IOException;
 import java.io.Writer;
@@ -37,6 +38,7 @@
 import java.util.Deque;
 import java.util.List;
 import java.util.Set;
+import javax.annotation.Generated;
 import javax.annotation.processing.Filer;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.PackageElement;
@@ -101,6 +103,12 @@ public InterfaceWriter addInterface(String simpleName) {
     return writer;
   }
 
+  public void markGenerated(boolean generatedAnnotationAvailable) {
+    for (TypeWriter typeWriter : typeWriters) {
+      typeWriter.markGenerated(generatedAnnotationAvailable);
+    }
+  }
+
   public <A extends Appendable> A write(A appendable) throws IOException {
     if (!packageName.isEmpty()) {
       appendable.append("package ").append(packageName).append(";\n\n");
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/Modifiable.java b/compiler/src/main/java/dagger/internal/codegen/writer/Modifiable.java
index bb4c6ffd9..91072baf6 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/Modifiable.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/Modifiable.java
@@ -17,17 +17,25 @@
 
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
+import dagger.internal.codegen.ComponentProcessor;
 import dagger.internal.codegen.writer.Writable.Context;
 import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.util.EnumSet;
 import java.util.List;
 import java.util.Set;
+import javax.annotation.Generated;
 import javax.lang.model.element.Modifier;
 
 public abstract class Modifiable {
+
+  private static final String GENERATED_COMMENTS = "https://google.github.io/dagger";
+
   final Set<Modifier> modifiers;
   final List<AnnotationWriter> annotations;
+  // This is not intended to be widely used; handling comments should be deferred to
+  // when Javapoet is adopted
+  private String generatedComment;
 
   Modifiable() {
     this.modifiers = EnumSet.noneOf(Modifier.class);
@@ -52,6 +60,18 @@ public AnnotationWriter annotate(Class<? extends Annotation> annotation) {
     return annotate(ClassName.fromClass(annotation));
   }
 
+  public void markGenerated(boolean generatedAnnotationAvailable) {
+    if (generatedAnnotationAvailable) {
+      AnnotationWriter annotation = annotate(Generated.class);
+      annotation.setValue(ComponentProcessor.class.getName());
+      annotation.setMember("comments", GENERATED_COMMENTS);
+    } else {
+      generatedComment =
+          String.format(
+              "// Generated by %s (%s).", ComponentProcessor.class.getName(), GENERATED_COMMENTS);
+    }
+  }
+
   Appendable writeModifiers(Appendable appendable) throws IOException {
     for (Modifier modifier : modifiers) {
       appendable.append(modifier.toString()).append(' ');
@@ -63,6 +83,9 @@ Appendable writeAnnotations(Appendable appendable, Context context) throws IOExc
     for (AnnotationWriter annotationWriter : annotations) {
       annotationWriter.write(appendable, context).append('\n');
     }
+    if (generatedComment != null) {
+      appendable.append(generatedComment).append('\n');
+    }
     return appendable;
   }
 }
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
index cf0e69d33..e3adecc8a 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
@@ -25,6 +25,7 @@
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 /** Tests for {@link dagger.Component.Builder} */
 @RunWith(JUnit4.class)
@@ -66,7 +67,7 @@ public void testEmptyBuilder() {
         "import javax.annotation.Generated;",
         "import test.SimpleComponent",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
@@ -139,7 +140,7 @@ public void testUsesBuildAndSetterNames() {
         "import javax.inject.Provider;",
         "import test.TestComponent;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<String> stringProvider;",
         "",
@@ -241,7 +242,7 @@ public void testIgnoresModulesNotInApi() {
         "import javax.inject.Provider;",
         "import test.TestComponent;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<String> stringProvider;",
         "  private Provider<Integer> integerProvider;",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index 99e86148b..aefaf1275 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -47,6 +47,7 @@
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static dagger.internal.codegen.ErrorMessages.REFERENCED_MODULES_MUST_NOT_BE_ABSTRACT;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 import static javax.tools.StandardLocation.SOURCE_OUTPUT;
 
 @RunWith(JUnit4.class)
@@ -227,7 +228,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
@@ -312,7 +313,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
@@ -395,7 +396,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "import test.OuterType.B;",
         "import test.OuterType.SimpleComponent;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerOuterType_SimpleComponent implements SimpleComponent {",
         "  private MembersInjector<B> bMembersInjector;",
         "",
@@ -494,7 +495,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<B> bProvider;",
         "  private Provider<A> aProvider;",
@@ -629,7 +630,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "",
         "import javax.annotation.Generated;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "",
         "  private DaggerTestComponent(Builder builder) {",
@@ -854,7 +855,7 @@ public void subcomponentOmitsInheritedBindings() {
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
             "",
-            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+            GENERATED_ANNOTATION,
             "public final class DaggerParent implements Parent {",
             "  private Provider<Set<Object>> setOfObjectContribution1Provider;",
             "  private Provider<Set<Object>> setOfObjectProvider;",
@@ -1024,7 +1025,7 @@ public void subcomponentOmitsInheritedBindings() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Set<String>> setOfStringContribution1Provider;",
         "  private Provider<Set<String>> setOfStringContribution2Provider;",
@@ -1137,7 +1138,7 @@ public void subcomponentOmitsInheritedBindings() {
         "import dagger.MembersInjector;",
         "import javax.annotation.Generated;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
         "",
@@ -1216,7 +1217,7 @@ public void subcomponentOmitsInheritedBindings() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private Provider<SimpleComponent> simpleComponentProvider;",
         "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
@@ -1296,7 +1297,7 @@ public void subcomponentOmitsInheritedBindings() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
         "  private Provider<SomeInjectedType> someInjectedTypeProvider;",
@@ -1375,7 +1376,7 @@ public void subcomponentOmitsInheritedBindings() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
@@ -1468,7 +1469,7 @@ public void subcomponentOmitsInheritedBindings() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerBComponent implements BComponent {",
         "  private Provider<A> aProvider;",
         "  private Provider<B> bProvider;",
@@ -1585,7 +1586,7 @@ public void subcomponentOmitsInheritedBindings() {
         "import other.test.TestModule;",
         "import other.test.TestModule_AFactory;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<test.A> aProvider;",
         "  private Provider<A> aProvider1;",
@@ -1714,7 +1715,7 @@ public void subcomponentOmitsInheritedBindings() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<B> bProvider;",
         "  private Provider<A> aProvider;",
@@ -1821,7 +1822,7 @@ public void subcomponentOmitsInheritedBindings() {
         "",
         "import javax.annotation.Generated;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
@@ -1910,7 +1911,7 @@ public void subcomponentOmitsInheritedBindings() {
         "",
         "import javax.annotation.Generated;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
@@ -2118,7 +2119,7 @@ public void genericTestToLetMeDebugInEclipse() {
          "import javax.annotation.Generated;",
          "import javax.inject.Provider;",
          "",
-         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+         GENERATED_ANNOTATION,
          "public final class DaggerSimpleComponent implements SimpleComponent {",
          "  private Provider<D> dProvider;",
          "",
diff --git a/compiler/src/test/java/dagger/internal/codegen/GeneratedLines.java b/compiler/src/test/java/dagger/internal/codegen/GeneratedLines.java
new file mode 100644
index 000000000..08473a98f
--- /dev/null
+++ b/compiler/src/test/java/dagger/internal/codegen/GeneratedLines.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.internal.codegen;
+
+/**
+ * Common lines outputted during code generation.
+ */
+public final class GeneratedLines {
+  public static final String GENERATED_ANNOTATION =
+      "@Generated("
+          + "comments = \"https://google.github.io/dagger\", "
+          + "value = \"dagger.internal.codegen.ComponentProcessor\")";
+}
diff --git a/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java b/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java
index 635592214..9983c5674 100644
--- a/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java
@@ -24,6 +24,7 @@
 
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 @RunWith(JUnit4.class)
 public class InaccessibleTypeTest {
@@ -85,7 +86,7 @@
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "  @SuppressWarnings(\"rawtypes\")",
         "  private Provider nonPublicClass1Provider;",
@@ -210,7 +211,7 @@
             "import dagger.MembersInjector;",
             "import javax.annotation.Generated;",
             "",
-            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+            GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
             "  private MembersInjector<A> aMembersInjector;",
             "",
diff --git a/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
index ca0494e47..c915f3358 100644
--- a/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
@@ -39,6 +39,7 @@
 import static dagger.internal.codegen.ErrorMessages.QUALIFIER_ON_INJECT_CONSTRUCTOR;
 import static dagger.internal.codegen.ErrorMessages.STATIC_INJECT_FIELD;
 import static dagger.internal.codegen.ErrorMessages.STATIC_INJECT_METHOD;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 @RunWith(JUnit4.class)
 // TODO(gak): add tests for generation in the default package.
@@ -135,7 +136,7 @@
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class GenericClass_Factory<T> implements Factory<GenericClass<T>> {",
         "  private final Provider<T> tProvider;",
         "",
@@ -179,7 +180,7 @@
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class GenericClass_Factory<A, B> implements Factory<GenericClass<A, B>> {",
         "  private final MembersInjector<GenericClass<A, B>> membersInjector;",
         "",
@@ -222,7 +223,7 @@
         "import javax.annotation.Generated;",
         "",
         "@SuppressWarnings(\"rawtypes\")",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public enum GenericClass_Factory implements Factory<GenericClass> {",
         "  INSTANCE;",
         "",
@@ -259,7 +260,7 @@
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class GenericClass_Factory<A, B> implements Factory<GenericClass<A, B>> {",
         "  private final Provider<A> aProvider;",
         "  private final Provider<B> bProvider;",
@@ -307,7 +308,7 @@
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class GenericClass_Factory<A extends Number & Comparable<A>,",
         "        B extends List<? extends String>,",
         "        C extends List<? super String>>",
@@ -367,7 +368,7 @@
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class GenericClass_Factory<A, B> implements Factory<GenericClass<A, B>> {",
         "  private final Provider<A> aAndA2AndPaAndLaProvider;",
         "  private final Provider<A> qaProvider;",
@@ -717,7 +718,7 @@
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class InjectConstructor_Factory ",
         "    implements Factory<InjectConstructor> {",
         "",
@@ -761,7 +762,7 @@
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class AllInjections_Factory ",
         "    implements Factory<AllInjections> {",
         "",
@@ -815,7 +816,7 @@
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class B_Factory implements Factory<B> {",
         "",
         "  private final MembersInjector<B> membersInjector;",
@@ -861,7 +862,7 @@ public void wildcardDependency() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class InjectConstructor_Factory ",
         "    implements Factory<InjectConstructor> {",
         "",
@@ -909,7 +910,7 @@ public void basicNameCollision() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class InjectConstructor_Factory ",
         "    implements Factory<InjectConstructor> {",
         "",
@@ -961,7 +962,7 @@ public void nestedNameCollision() {
         "import javax.inject.Provider;",
         "import other.pkg.Outer;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class InjectConstructor_Factory ",
         "    implements Factory<InjectConstructor> {",
         "",
@@ -1015,7 +1016,7 @@ public void samePackageNameCollision() {
         "import javax.inject.Provider;",
         "import other.pkg.CommonName;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class InjectConstructor_Factory ",
         "    implements Factory<InjectConstructor> {",
         "",
@@ -1063,7 +1064,7 @@ public void noDeps() {
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public enum SimpleType_Factory implements Factory<SimpleType> {",
         "  INSTANCE;",
         "",
@@ -1108,7 +1109,7 @@ public void noDeps() {
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "import test.OuterType.A;",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public enum OuterType$A_Factory implements Factory<A> {",
         "  INSTANCE;",
         "",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 9e1b6dccd..ab2212722 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -25,6 +25,7 @@
 
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 @RunWith(JUnit4.class)
 public class MapBindingComponentProcessorTest {
@@ -117,7 +118,7 @@ public void mapBindingsWithEnumKey() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution2;",
@@ -277,7 +278,7 @@ public void mapBindingsWithStringKey() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfStringAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfStringAndProviderOfHandlerContribution2;",
@@ -444,7 +445,7 @@ public void mapBindingsWithWrappedKey() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfWrappedClassKeyAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfWrappedClassKeyAndProviderOfHandlerContribution2;",
@@ -616,7 +617,7 @@ public void mapBindingsWithNonProviderValue() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution2;",
@@ -742,7 +743,7 @@ public void injectMapWithoutMapBinding() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Map<String, String>> provideAMapProvider;",
         "",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
index 191ee6c12..c20383ffd 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -25,6 +25,7 @@
 
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 @RunWith(JUnit4.class)
 public class MapKeyProcessorTest {
@@ -57,7 +58,7 @@ public void mapKeyCreatorFile() {
             "import com.google.auto.value.AutoAnnotation;",
             "import javax.annotation.Generated;",
             "",
-            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+            GENERATED_ANNOTATION,
             "public final class PathKeyCreator {",
             "  @AutoAnnotation",
             "  public static PathKey createPathKey(PathEnum value, String relativePath) {",
@@ -104,7 +105,7 @@ public void nestedMapKeyCreatorFile() {
             "import javax.annotation.Generated;",
             "import test.Container.PathKey",
             "",
-            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+            GENERATED_ANNOTATION,
             "public final class Container$PathKeyCreator {",
             "  @AutoAnnotation",
             "  public static PathKey createPathKey(PathEnum value, String relativePath) {",
@@ -206,7 +207,7 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution2;",
@@ -382,7 +383,7 @@ public void mapKeyComponentFileWithDefaultField() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution2;",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
index 52be72ae9..6d6d767f7 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
@@ -33,6 +33,7 @@
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 import static javax.tools.StandardLocation.CLASS_OUTPUT;
 
 @RunWith(JUnit4.class)
@@ -71,7 +72,7 @@ public void parentClass_noInjectedMembers() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Child> childProvider;",
         "",
@@ -160,7 +161,7 @@ public void parentClass_injectedMembersInSupertype() {
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
             "",
-            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+            GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
             "  private MembersInjector<Child> childMembersInjector;",
             "  private Provider<Child> childProvider;",
@@ -226,7 +227,7 @@ public void parentClass_injectedMembersInSupertype() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class GenericClass_MembersInjector<A, B>",
         "    implements MembersInjector<GenericClass<A, B>> {",
         "  private final Provider<A> aProvider;",
@@ -319,7 +320,7 @@ public void parentClass_injectedMembersInSupertype() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class Child_MembersInjector<T>",
         "    implements MembersInjector<Child<T>> {",
         "  private final Provider<T> tAndXProvider;",
@@ -391,7 +392,7 @@ public void parentClass_injectedMembersInSupertype() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class FieldInjection_MembersInjector",
         "    implements MembersInjector<FieldInjection> {",
         "  private final Provider<String> stringProvider;",
@@ -461,7 +462,7 @@ public void parentClass_injectedMembersInSupertype() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class MethodInjection_MembersInjector",
         "     implements MembersInjector<MethodInjection> {",
         "",
@@ -540,7 +541,7 @@ public void mixedMemberInjection() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class MixedMemberInjection_MembersInjector",
         "    implements MembersInjector<MixedMemberInjection> {",
         "",
@@ -620,7 +621,7 @@ public void mixedMemberInjection() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class AllInjections_MembersInjector ",
         "    implements MembersInjector<AllInjections> {",
         "",
@@ -677,7 +678,7 @@ public void mixedMemberInjection() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class B_MembersInjector implements MembersInjector<B> {",
         "  private final Provider<String> sProvider;",
         "",
@@ -740,7 +741,7 @@ public void simpleComponentWithNesting() {
           "import test.OuterType.A;",
           "import test.OuterType.B;",
           "",
-          "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
           "public final class OuterType$B_MembersInjector implements MembersInjector<B> {",
           "  private final Provider<A> aProvider;",
           "",
@@ -807,7 +808,7 @@ public void componentWithNestingAndGeneratedType() {
             "import test.OuterType.A;",
             "import test.OuterType.B;",
             "",
-            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+            GENERATED_ANNOTATION,
             "public final class OuterType$B_MembersInjector implements MembersInjector<B> {",
             "  private final Provider<A> aProvider;",
             "",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index e8c0cf8a3..8cd99733a 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -38,6 +38,7 @@
 import static dagger.internal.codegen.ErrorMessages.PROVIDES_METHOD_SET_VALUES_RETURN_SET;
 import static dagger.internal.codegen.ErrorMessages.PROVIDES_METHOD_THROWS;
 import static dagger.internal.codegen.ErrorMessages.PROVIDES_OR_PRODUCES_METHOD_MULTIPLE_QUALIFIERS;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 @RunWith(JUnit4.class)
 public class ModuleFactoryGeneratorTest {
@@ -373,7 +374,7 @@ private String formatModuleErrorMessage(String msg) {
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class TestModule_ProvideStringFactory implements Factory<String> {",
         "  private final TestModule module;",
         "",
@@ -419,7 +420,7 @@ private String formatModuleErrorMessage(String msg) {
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class TestModule_ProvideStringFactory implements Factory<String> {",
         "  private final TestModule module;",
         "",
@@ -460,7 +461,7 @@ private String formatModuleErrorMessage(String msg) {
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class TestModule_ProvideStringFactory implements Factory<String> {",
         "  private final TestModule module;",
         "",
@@ -544,7 +545,7 @@ private String formatModuleErrorMessage(String msg) {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class TestModule_ProvideObjectsFactory implements Factory<List<Object>> {",
         "  private final TestModule module;",
         "  private final Provider<Object> aProvider;",
@@ -615,7 +616,7 @@ private String formatModuleErrorMessage(String msg) {
         "import java.util.Set;",
         "import javax.annotation.Generated;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class TestModule_ProvideStringFactory implements Factory<Set<String>> {",
         "  private final TestModule module;",
         "",
@@ -666,7 +667,7 @@ private String formatModuleErrorMessage(String msg) {
         "import java.util.Set;",
         "import javax.annotation.Generated;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class TestModule_ProvideWildcardListFactory implements "
             + "Factory<Set<List<List<?>>>> {",
         "  private final TestModule module;",
@@ -713,7 +714,7 @@ private String formatModuleErrorMessage(String msg) {
         "import java.util.Set;",
         "import javax.annotation.Generated;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class TestModule_ProvideStringsFactory implements Factory<Set<String>> {",
         "  private final TestModule module;",
         "",
@@ -987,7 +988,7 @@ public void genericSubclassedModule() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class ParentModule_ProvideListBFactory<A extends CharSequence,",
         "    B, C extends Number & Comparable<C>> implements Factory<List<B>> {",
         "  private final ParentModule<A, B, C> module;",
@@ -1022,7 +1023,7 @@ public void genericSubclassedModule() {
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class ChildNumberModule_ProvideNumberFactory implements Factory<Number> {",
         "  private final ChildNumberModule module;",
         "",
@@ -1051,7 +1052,7 @@ public void genericSubclassedModule() {
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
-        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        GENERATED_ANNOTATION,
         "public final class ChildIntegerModule_ProvideIntegerFactory",
         "    implements Factory<Integer> {",
         "  private final ChildIntegerModule module;",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
index c8b14ecd3..dd9e53863 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
@@ -38,6 +38,7 @@
 import static dagger.internal.codegen.ErrorMessages.PRODUCES_METHOD_SET_VALUES_RETURN_SET;
 import static dagger.internal.codegen.ErrorMessages.PRODUCES_METHOD_THROWS;
 import static dagger.internal.codegen.ErrorMessages.PROVIDES_OR_PRODUCES_METHOD_MULTIPLE_QUALIFIERS;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 @RunWith(JUnit4.class)
 public class ProducerModuleFactoryGeneratorTest {
@@ -509,7 +510,7 @@ public void publicModuleNonPublicIncludes() {
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
             "",
-            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+            GENERATED_ANNOTATION,
             "public final class TestModule_ProduceStringFactory extends AbstractProducer<String> {",
             "  private final TestModule module;",
             "  private final Executor executor;",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 5564e52ca..1437e6f8a 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -23,6 +23,7 @@
 
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 @RunWith(JUnit4.class)
 public class ProductionComponentProcessorTest {
@@ -146,7 +147,7 @@
             "import test.TestClass.BModule;",
             "import test.TestClass.SimpleComponent;",
             "",
-            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+            GENERATED_ANNOTATION,
             "public final class DaggerTestClass_SimpleComponent implements SimpleComponent {",
             "  private Provider<SimpleComponent> simpleComponentProvider;",
             "  private Provider<Set<Factory>> setOfFactoryContribution1Provider;",
diff --git a/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java b/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java
index c395ad13a..76287e946 100644
--- a/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -24,6 +24,7 @@
 
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 @RunWith(JUnit4.class)
 public final class SubcomponentValidationTest {
@@ -347,7 +348,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
             "",
-            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+            GENERATED_ANNOTATION,
             "public final class DaggerParentComponent implements ParentComponent {",
             "  private MembersInjector<Dep1> dep1MembersInjector;",
             "  private Provider<Dep1> dep1Provider;",
@@ -511,7 +512,7 @@ public void multipleSubcomponentsWithSameSimpleNamesCanExistInSameComponent() {
             "import test.Bar.Sub;",
             "import test.Foo;",
             "",
-            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+            GENERATED_ANNOTATION,
             "public final class DaggerParentComponent implements ParentComponent {",
             "  private DaggerParentComponent(Builder builder) {",
             "    assert builder != null;",
@@ -611,7 +612,7 @@ public void subcomponentSimpleNamesDisambiguated() {
             "import javax.annotation.Generated;",
             "import test.deep.many.levels.that.match.test.Sub;",
             "",
-            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+            GENERATED_ANNOTATION,
             "public final class DaggerParentComponent implements ParentComponent {",
             "  private DaggerParentComponent(Builder builder) {",
             "    assert builder != null;",
@@ -705,7 +706,7 @@ public void subcomponentImplNameUsesFullyQualifiedClassNameIfNecessary() {
             "import top1.a.b.c.d.E.F.Sub;",
             "import top2.a.b.c.d.E.F;",
             "",
-            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+            GENERATED_ANNOTATION,
             "public final class DaggerParentComponent implements ParentComponent {",
             "  private DaggerParentComponent(Builder builder) {",
             "    assert builder != null;",
@@ -781,7 +782,7 @@ public void parentComponentNameShouldNotBeDisambiguatedWhenItConflictsWithASubco
             "import javax.annotation.Generated;",
             "import test.Foo.C;",
             "",
-            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+            GENERATED_ANNOTATION,
             "public final class DaggerC implements test.C {",
             "  private DaggerC(Builder builder) {",
             "    assert builder != null;",
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
index 58fa26307..e4c662fc5 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
@@ -25,6 +25,7 @@
 
 import static com.google.common.truth.Truth.assert_;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 import static java.util.Arrays.asList;
 
 @RunWith(JUnit4.class)
@@ -74,7 +75,7 @@
       "import javax.annotation.Generated;",
       "import javax.inject.Provider;",
       "",
-      "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+      GENERATED_ANNOTATION,
       "public final class DaggerPrimitiveComponent implements PrimitiveComponent {",
       "  private Provider<Integer> primitiveIntProvider;",
       "  private Provider<PrimitiveInjectable> primitiveInjectableProvider;",
