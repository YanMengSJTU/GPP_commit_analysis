diff --git a/core/src/test/java/dagger/internal/DoubleCheckLazyTest.java b/core/src/test/java/dagger/internal/DoubleCheckLazyTest.java
index 684c2aff2..579e0405f 100644
--- a/core/src/test/java/dagger/internal/DoubleCheckLazyTest.java
+++ b/core/src/test/java/dagger/internal/DoubleCheckLazyTest.java
@@ -58,12 +58,12 @@
 
     List<Future<Object>> futures = executor.invokeAll(tasks);
 
-    assert_().that(provider.provisions.get()).is(1);
+    assert_().that(provider.provisions.get()).isEqualTo(1);
     Set<Object> results = Sets.newIdentityHashSet();
     for (Future<Object> future : futures) {
       results.add(future.get());
     }
-    assert_().that(results.size()).is(1);
+    assert_().that(results.size()).isEqualTo(1);
   }
 
   // TODO(gak): reenable this test once we can ensure that factories are no longer providing null
diff --git a/core/src/test/java/dagger/internal/ScopedProviderTest.java b/core/src/test/java/dagger/internal/ScopedProviderTest.java
index 30cdd4121..46ec6a1bf 100644
--- a/core/src/test/java/dagger/internal/ScopedProviderTest.java
+++ b/core/src/test/java/dagger/internal/ScopedProviderTest.java
@@ -59,8 +59,8 @@
         return i++;
       }
     });
-    assert_().that(scopedProvider.get()).is(0);
-    assert_().that(scopedProvider.get()).is(0);
-    assert_().that(scopedProvider.get()).is(0);
+    assert_().that(scopedProvider.get()).isEqualTo(0);
+    assert_().that(scopedProvider.get()).isEqualTo(0);
+    assert_().that(scopedProvider.get()).isEqualTo(0);
   }
 }
diff --git a/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java b/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java
index b7a17004a..e307166f5 100644
--- a/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java
+++ b/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java
@@ -51,8 +51,8 @@
         return Futures.immediateFuture(i++);
       }
     };
-    assertThat(producer.get().get()).is(0);
-    assertThat(producer.get().get()).is(0);
-    assertThat(producer.get().get()).is(0);
+    assertThat(producer.get().get()).isEqualTo(0);
+    assertThat(producer.get().get()).isEqualTo(0);
+    assertThat(producer.get().get()).isEqualTo(0);
   }
 }
