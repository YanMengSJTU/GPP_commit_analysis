diff --git a/java/dagger/internal/codegen/FactoryGenerator.java b/java/dagger/internal/codegen/FactoryGenerator.java
index ddbd09289..2984a9753 100644
--- a/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/java/dagger/internal/codegen/FactoryGenerator.java
@@ -118,7 +118,7 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
     factoryBuilder.addMethod(getMethod(binding));
     addCreateMethod(binding, factoryBuilder);
 
-    ProvisionMethod.create(binding).ifPresent(factoryBuilder::addMethod);
+    ProvisionMethod.create(binding, compilerOptions).ifPresent(factoryBuilder::addMethod);
     gwtIncompatibleAnnotation(binding).ifPresent(factoryBuilder::addAnnotation);
     mapKeyFactoryMethod(binding, types).ifPresent(factoryBuilder::addMethod);
 
diff --git a/java/dagger/internal/codegen/InjectionMethods.java b/java/dagger/internal/codegen/InjectionMethods.java
index e2377d803..cc0fe85d5 100644
--- a/java/dagger/internal/codegen/InjectionMethods.java
+++ b/java/dagger/internal/codegen/InjectionMethods.java
@@ -27,6 +27,7 @@
 import static dagger.internal.codegen.CodeBlocks.toConcatenatedCodeBlock;
 import static dagger.internal.codegen.ConfigurationAnnotations.getNullableType;
 import static dagger.internal.codegen.DaggerStreams.toImmutableList;
+import static dagger.internal.codegen.FactoryGenerator.checkNotNullProvidesMethod;
 import static dagger.internal.codegen.SourceFiles.generatedClassNameForBinding;
 import static dagger.internal.codegen.SourceFiles.membersInjectorNameForType;
 import static dagger.internal.codegen.TypeNames.rawTypeName;
@@ -110,11 +111,11 @@
     /**
      * Returns a method that invokes the binding's {@linkplain ProvisionBinding#bindingElement()
      * constructor} and injects the instance's members, if necessary. If {@link
-     * #shouldCreateInjectionMethod(ProvisionBinding) no method is necessary}, then {@link
-     * Optional#empty()} is returned.
+     * #shouldCreateInjectionMethod(ProvisionBinding, CompilerOptions)} no method is necessary},
+     * then {@link Optional#empty()} is returned.
      */
-    static Optional<MethodSpec> create(ProvisionBinding binding) {
-      if (!shouldCreateInjectionMethod(binding)) {
+    static Optional<MethodSpec> create(ProvisionBinding binding, CompilerOptions compilerOptions) {
+      if (!shouldCreateInjectionMethod(binding, compilerOptions)) {
         return Optional.empty();
       }
       ExecutableElement element = MoreElements.asExecutable(binding.bindingElement().get());
@@ -123,7 +124,11 @@
           return Optional.of(constructorProxy(element));
         case METHOD:
           return Optional.of(
-              methodProxy(element, methodName(element), ReceiverAccessibility.IGNORE));
+              methodProxy(
+                  element,
+                  methodName(element),
+                  ReceiverAccessibility.IGNORE,
+                  CheckNotNullPolicy.get(binding, compilerOptions)));
         default:
           throw new AssertionError(element);
       }
@@ -137,14 +142,15 @@ static CodeBlock invoke(
         ProvisionBinding binding,
         Function<DependencyRequest, CodeBlock> dependencyUsage,
         ClassName requestingClass,
-        Optional<CodeBlock> moduleReference) {
+        Optional<CodeBlock> moduleReference,
+        CompilerOptions compilerOptions) {
       ImmutableList.Builder<CodeBlock> arguments = ImmutableList.builder();
       moduleReference.ifPresent(arguments::add);
       arguments.addAll(
           injectionMethodArguments(
               binding.provisionDependencies(), dependencyUsage, requestingClass));
       return callInjectionMethod(
-          create(binding).get().name,
+          create(binding, compilerOptions).get().name,
           arguments.build(),
           generatedClassNameForBinding(binding),
           requestingClass);
@@ -171,19 +177,22 @@ private static MethodSpec constructorProxy(ExecutableElement constructor) {
      * Returns {@code true} if injecting an instance of {@code binding} from {@code callingPackage}
      * requires the use of an injection method.
      */
-    static boolean requiresInjectionMethod(ProvisionBinding binding, String callingPackage) {
+    static boolean requiresInjectionMethod(
+        ProvisionBinding binding, CompilerOptions compilerOptions, String callingPackage) {
       ExecutableElement method = MoreElements.asExecutable(binding.bindingElement().get());
       return !binding.injectionSites().isEmpty()
+          || binding.shouldCheckForNull(compilerOptions)
           || !isElementAccessibleFrom(method, callingPackage)
           || method
-              .getParameters()
-              .stream()
-              .map(VariableElement::asType)
-              .anyMatch(type -> !isRawTypeAccessible(type, callingPackage));
+          .getParameters()
+          .stream()
+          .map(VariableElement::asType)
+          .anyMatch(type -> !isRawTypeAccessible(type, callingPackage));
     }
 
-    private static boolean shouldCreateInjectionMethod(ProvisionBinding binding) {
-      return requiresInjectionMethod(binding, "dagger.should.never.exist");
+    private static boolean shouldCreateInjectionMethod(
+        ProvisionBinding binding, CompilerOptions compilerOptions) {
+      return requiresInjectionMethod(binding, compilerOptions, "dagger.should.never.exist");
     }
 
     /**
@@ -235,7 +244,8 @@ static MethodSpec create(InjectionSite injectionSite) {
           return methodProxy(
               MoreElements.asExecutable(injectionSite.element()),
               methodName,
-              ReceiverAccessibility.CAST_IF_NOT_PUBLIC);
+              ReceiverAccessibility.CAST_IF_NOT_PUBLIC,
+              CheckNotNullPolicy.IGNORE);
         case FIELD:
           return fieldProxy(MoreElements.asVariable(injectionSite.element()), methodName);
         default:
@@ -428,8 +438,25 @@ private static CodeBlock instanceWithPotentialCast(CodeBlock instance, TypeMirro
         : CodeBlock.of("(($T) $L)", instanceType, instance);
   }
 
+  private enum CheckNotNullPolicy {
+    IGNORE, CHECK_FOR_NULL;
+    CodeBlock checkForNull(CodeBlock maybeNull) {
+      if (this.equals(IGNORE)) {
+        return maybeNull;
+      }
+      return checkNotNullProvidesMethod(maybeNull);
+    }
+
+    static CheckNotNullPolicy get(ProvisionBinding binding, CompilerOptions compilerOptions) {
+      return binding.shouldCheckForNull(compilerOptions) ? CHECK_FOR_NULL : IGNORE;
+    }
+  }
+
   private static MethodSpec methodProxy(
-      ExecutableElement method, String methodName, ReceiverAccessibility receiverAccessibility) {
+      ExecutableElement method,
+      String methodName,
+      ReceiverAccessibility receiverAccessibility,
+      CheckNotNullPolicy checkNotNullPolicy) {
     TypeElement enclosingType = MoreElements.asType(method.getEnclosingElement());
     MethodSpec.Builder methodBuilder = methodBuilder(methodName).addModifiers(PUBLIC, STATIC);
 
@@ -446,18 +473,20 @@ private static MethodSpec methodProxy(
           .ifPresent(nullableType -> CodeBlocks.addAnnotation(methodBuilder, nullableType));
       methodBuilder.addCode("return ");
     }
+    CodeBlock.Builder proxyInvocation = CodeBlock.builder();
     if (method.getModifiers().contains(STATIC)) {
-      methodBuilder.addCode("$T", rawTypeName(TypeName.get(enclosingType.asType())));
+      proxyInvocation.add("$T", rawTypeName(TypeName.get(enclosingType.asType())));
     } else {
       copyTypeParameters(enclosingType, methodBuilder);
       // "instance" is guaranteed b/c it was the first name into the UniqueNameSet
-      methodBuilder.addCode(
+      proxyInvocation.add(
           receiverAccessibility.potentiallyCast(CodeBlock.of("instance"), enclosingType.asType()));
     }
     copyTypeParameters(method, methodBuilder);
     copyThrows(method, methodBuilder);
 
-    methodBuilder.addCode(".$N($L);", method.getSimpleName(), arguments);
+    proxyInvocation.add(".$N($L)", method.getSimpleName(), arguments);
+    methodBuilder.addCode(checkNotNullPolicy.checkForNull(proxyInvocation.build())).addCode(";");
     return methodBuilder.build();
   }
 
diff --git a/java/dagger/internal/codegen/ProvisionBinding.java b/java/dagger/internal/codegen/ProvisionBinding.java
index e027d4420..fca2144b0 100644
--- a/java/dagger/internal/codegen/ProvisionBinding.java
+++ b/java/dagger/internal/codegen/ProvisionBinding.java
@@ -108,8 +108,13 @@ private static Builder builder() {
 
   abstract Builder toBuilder();
 
+  private static final ImmutableSet<ContributionBinding.Kind> KINDS_TO_CHECK_FOR_NULL =
+      ImmutableSet.of(
+          ContributionBinding.Kind.PROVISION, ContributionBinding.Kind.COMPONENT_PROVISION);
+
   boolean shouldCheckForNull(CompilerOptions compilerOptions) {
-    return !contributedPrimitiveType().isPresent()
+    return KINDS_TO_CHECK_FOR_NULL.contains(bindingKind())
+        && !contributedPrimitiveType().isPresent()
         && !nullableType().isPresent()
         && compilerOptions.doCheckForNulls();
   }
diff --git a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java b/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
index 9f5c44fb0..bf4d464d8 100644
--- a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
@@ -20,8 +20,6 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static dagger.internal.codegen.Accessibility.isTypeAccessibleFrom;
 import static dagger.internal.codegen.CodeBlocks.toParametersCodeBlock;
-import static dagger.internal.codegen.ContributionBinding.Kind.INJECTION;
-import static dagger.internal.codegen.FactoryGenerator.checkNotNullProvidesMethod;
 import static dagger.internal.codegen.InjectionMethods.ProvisionMethod.requiresInjectionMethod;
 import static dagger.internal.codegen.TypeNames.rawTypeName;
 
@@ -75,7 +73,7 @@
   @Override
   Expression getInstanceDependencyExpression(
       DependencyRequest.Kind requestKind, ClassName requestingClass) {
-    return requiresInjectionMethod(provisionBinding, requestingClass.packageName())
+    return requiresInjectionMethod(provisionBinding, compilerOptions, requestingClass.packageName())
         ? invokeInjectionMethod(requestingClass)
         : invokeMethod(requestingClass);
   }
@@ -98,8 +96,7 @@ private Expression invokeMethod(ClassName requestingClass) {
         CodeBlock module =
             moduleReference(requestingClass)
                 .orElse(CodeBlock.of("$T", provisionBinding.bindingTypeElement().get()));
-        invocation = maybeCheckForNulls(
-            CodeBlock.of("$L.$L($L)", module, method.getSimpleName(), arguments));
+        invocation = CodeBlock.of("$L.$L($L)", module, method.getSimpleName(), arguments);
         break;
       default:
         throw new IllegalStateException();
@@ -120,12 +117,12 @@ private TypeName constructorTypeName(ClassName requestingClass) {
 
   private Expression invokeInjectionMethod(ClassName requestingClass) {
     return injectMembers(
-        maybeCheckForNulls(
-            ProvisionMethod.invoke(
-                provisionBinding,
-                request -> dependencyArgument(request, requestingClass),
-                requestingClass,
-                moduleReference(requestingClass))));
+        ProvisionMethod.invoke(
+            provisionBinding,
+            request -> dependencyArgument(request, requestingClass),
+            requestingClass,
+            moduleReference(requestingClass),
+            compilerOptions));
   }
 
   private CodeBlock dependencyArgument(DependencyRequest dependency, ClassName requestingClass) {
@@ -134,13 +131,6 @@ private CodeBlock dependencyArgument(DependencyRequest dependency, ClassName req
         .codeBlock();
   }
 
-  private CodeBlock maybeCheckForNulls(CodeBlock methodCall) {
-    return !provisionBinding.bindingKind().equals(INJECTION)
-            && provisionBinding.shouldCheckForNull(compilerOptions)
-        ? checkNotNullProvidesMethod(methodCall)
-        : methodCall;
-  }
-
   private Expression injectMembers(CodeBlock instance) {
     if (provisionBinding.injectionSites().isEmpty()) {
       return Expression.create(provisionBinding.key().type(), instance);
diff --git a/javatests/dagger/internal/codegen/ComponentBuilderTest.java b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
index 53ec28fa8..20f2a1436 100644
--- a/javatests/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
@@ -19,7 +19,6 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
-import static dagger.internal.codegen.GeneratedLines.NPE_FROM_PROVIDES_METHOD;
 
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
@@ -180,8 +179,7 @@ public void testUsesBuildAndSetterNames() {
             "",
             "  @Override",
             "  public String string() {",
-            "    return Preconditions.checkNotNull(",
-            "        testModule.string()," + NPE_FROM_PROVIDES_METHOD + ");",
+            "    return TestModule_StringFactory.proxyString(testModule);",
             "  }",
             "",
             "  private static final class Builder implements TestComponent.Builder {",
@@ -288,14 +286,12 @@ public void testIgnoresModulesNotInApi() {
             "",
             "  @Override",
             "  public String string() {",
-            "    return Preconditions.checkNotNull(",
-            "        testModule1.string()," + NPE_FROM_PROVIDES_METHOD + ");",
+            "    return TestModule1_StringFactory.proxyString(testModule1);",
             "  }",
             "",
             "  @Override",
             "  public Integer integer() {",
-            "    return Preconditions.checkNotNull(",
-            "        testModule2.integer()," + NPE_FROM_PROVIDES_METHOD + ");",
+            "    return TestModule2_IntegerFactory.proxyInteger(testModule2);",
             "  }",
             "",
             "  private static final class Builder implements TestComponent.Builder {",
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index f7426d43d..8554bf243 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -621,8 +621,7 @@ public void componentWithInvalidModule() {
                 "  }",
                 "",
                 "  private B getB() {",
-                "    return Preconditions.checkNotNull(",
-                "        testModule.b(new C()), " + NPE_FROM_PROVIDES_METHOD + ");",
+                "    return TestModule_BFactory.proxyB(testModule, new C());",
                 "  }",
                 "",
                 "  @SuppressWarnings(\"unchecked\")",
@@ -724,7 +723,6 @@ public void componentWithAbstractModule() {
             .addLines(
                 "package test;",
                 "",
-                "import dagger.internal.Preconditions;",
                 "import javax.annotation.Generated;",
                 "",
                 GENERATED_ANNOTATION,
@@ -740,8 +738,7 @@ public void componentWithAbstractModule() {
                 "  }",
                 "",
                 "  private B getB() {",
-                "    return Preconditions.checkNotNull(",
-                "        TestModule.b(new C()), " + NPE_FROM_PROVIDES_METHOD + ");",
+                "    return TestModule_BFactory.proxyB(new C());",
                 "  }",
                 "",
                 "  @Override",
@@ -1058,8 +1055,7 @@ public void subcomponentNotGeneratedIfNotUsedInGraph() {
             "",
             "  @Override",
             "  public String notSubcomponent() {",
-            "    return Preconditions.checkNotNull(",
-            "        ParentModule.notSubcomponent(), " + NPE_FROM_PROVIDES_METHOD + ");",
+            "    return ParentModule_NotSubcomponentFactory.proxyNotSubcomponent();",
             "  }",
             "",
             "  public static final class Builder {",
@@ -1597,7 +1593,6 @@ public void testDefaultPackage() {
             "",
             "import dagger.internal.Preconditions;",
             "import javax.annotation.Generated;",
-            "import other.test.TestModule_AFactory;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
@@ -1624,16 +1619,12 @@ public void testDefaultPackage() {
             "",
             "  @Override",
             "  public A a() {",
-            "    return Preconditions.checkNotNull(",
-            "        testModule.a(), " + NPE_FROM_PROVIDES_METHOD + ");",
+            "    return TestModule_AFactory.proxyA(testModule);",
             "  }",
             "",
             "  @Override",
             "  public other.test.A otherA() {",
-            "    return Preconditions.checkNotNull(",
-            "        TestModule_AFactory.proxyA(testModule2), "
-                + NPE_FROM_PROVIDES_METHOD
-                + ");",
+            "    return other.test.TestModule_AFactory.proxyA(testModule2);",
             "  }",
             "",
             "  public static final class Builder {",
@@ -2867,9 +2858,9 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "    return INSTANCE;",
                 "  }",
                 "",
-                "  /** Proxies {@link TestModule#nonNullableString()}. */",
                 "  public static String proxyNonNullableString() {",
-                "    return TestModule.nonNullableString();",
+                "    return Preconditions.checkNotNull(",
+                "        TestModule.nonNullableString(), " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
                 "}"));
 
@@ -2880,7 +2871,6 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "package test;",
                 "",
                 "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import dagger.internal.Preconditions",
                 "import javax.annotation.Generated;",
                 "",
                 GENERATED_ANNOTATION,
@@ -2897,8 +2887,7 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "",
                 "  @Override",
                 "  public String nonNullableString() {",
-                "    return Preconditions.checkNotNull(",
-                "        TestModule.nonNullableString(), " + NPE_FROM_PROVIDES_METHOD + ");",
+                "    return TestModule_NonNullableStringFactory.proxyNonNullableString());",
                 "  }",
                 "",
                 "  @Override",
diff --git a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
index 74d1385f7..63a1c0b5d 100644
--- a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
+++ b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
@@ -20,7 +20,6 @@
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 import static dagger.internal.codegen.GeneratedLines.NPE_FROM_COMPONENT_METHOD;
-import static dagger.internal.codegen.GeneratedLines.NPE_FROM_PROVIDES_METHOD;
 
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
@@ -489,14 +488,13 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "  }",
                 "",
                 "  private Set<Object> getSetOfObject() {",
-                "    return ImmutableSet.<Object>of(Preconditions.checkNotNull(",
-                "        ParentModule.contribution(), " + NPE_FROM_PROVIDES_METHOD + "));",
+                "    return ImmutableSet.<Object>of(",
+                "        ParentModule_ContributionFactory.proxyContribution());",
                 "  }",
                 "",
                 "  private Object getObject() {",
-                "    return Preconditions.checkNotNull(",
-                "        parentModule.reliesOnMultibinding(getSetOfObject()),",
-                "        " + NPE_FROM_PROVIDES_METHOD + ");",
+                "    return ParentModule_ReliesOnMultibindingFactory.proxyReliesOnMultibinding(",
+                "        parentModule, getSetOfObject());",
                 "  }",
                 "",
                 "  @SuppressWarnings(\"unchecked\")",
@@ -542,17 +540,13 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "",
                 "    private Set<Object> getSetOfObject() {",
                 "      return ImmutableSet.<Object>of(",
-                "          Preconditions.checkNotNull(",
-                "              ParentModule.contribution(), " + NPE_FROM_PROVIDES_METHOD + "),",
-                "          Preconditions.checkNotNull(",
-                "              ChildModule.contribution(), " + NPE_FROM_PROVIDES_METHOD + "));",
+                "          ParentModule_ContributionFactory.proxyContribution(),",
+                "          ChildModule_ContributionFactory.proxyContribution());",
                 "    }",
                 "",
                 "    private Object getObject() {",
-                "      return Preconditions.checkNotNull(",
-                "          DaggerTestComponent.this.parentModule.reliesOnMultibinding(",
-                "              getSetOfObject()),",
-                "          " + NPE_FROM_PROVIDES_METHOD + ");",
+                "      return ParentModule_ReliesOnMultibindingFactory.proxyReliesOnMultibinding(",
+                "          DaggerTestComponent.this.parentModule, getSetOfObject());",
                 "    }",
                 "",
                 "    @Override",
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 3fd494a6d..3d55e357e 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -21,7 +21,6 @@
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
-import static dagger.internal.codegen.GeneratedLines.NPE_FROM_PROVIDES_METHOD;
 
 import com.google.auto.value.processor.AutoAnnotationProcessor;
 import com.google.common.collect.ImmutableList;
@@ -161,8 +160,8 @@ public void mapBindingsWithEnumKey() {
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return Preconditions.checkNotNull(",
-                "            mapModuleOne.provideAdminHandler()," + NPE_FROM_PROVIDES_METHOD + ");",
+                "        return MapModuleOne_ProvideAdminHandlerFactory.proxyProvideAdminHandler(",
+                "            mapModuleOne));",
                 "      }",
                 "    };",
                 "  }",
@@ -171,8 +170,8 @@ public void mapBindingsWithEnumKey() {
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return Preconditions.checkNotNull(",
-                "            mapModuleTwo.provideLoginHandler()," + NPE_FROM_PROVIDES_METHOD + ");",
+                "        return MapModuleTwo_ProvideLoginHandlerFactory.proxyProvideLoginHandler(",
+                "            mapModuleTwo);",
                 "      }",
                 "    };",
                 "  }",
@@ -704,9 +703,8 @@ public void mapBindingsWithStringKey() {
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return Preconditions.checkNotNull(",
-                "            mapModuleOne.provideAdminHandler(),",
-                "            " + NPE_FROM_PROVIDES_METHOD + ");",
+                "        return MapModuleOne_ProvideAdminHandlerFactory.proxyProvideAdminHandler(",
+                "            mapModuleOne);",
                 "      }",
                 "    };",
                 "  }",
@@ -715,9 +713,8 @@ public void mapBindingsWithStringKey() {
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return Preconditions.checkNotNull(",
-                "            mapModuleTwo.provideLoginHandler(),",
-                "            " + NPE_FROM_PROVIDES_METHOD + ");",
+                "        return MapModuleTwo_ProvideLoginHandlerFactory.proxyProvideLoginHandler(",
+                "            mapModuleTwo);",
                 "      }",
                 "    };",
                 "  }",
@@ -977,8 +974,8 @@ public void mapBindingsWithWrappedKey() {
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return Preconditions.checkNotNull(",
-                "            mapModuleOne.provideAdminHandler()," + NPE_FROM_PROVIDES_METHOD + ");",
+                "        return MapModuleOne_ProvideAdminHandlerFactory.proxyProvideAdminHandler(",
+                "            mapModuleOne);",
                 "      }",
                 "    };",
                 "  }",
@@ -988,8 +985,8 @@ public void mapBindingsWithWrappedKey() {
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return Preconditions.checkNotNull(",
-                "            mapModuleTwo.provideLoginHandler()," + NPE_FROM_PROVIDES_METHOD + ");",
+                "        return MapModuleTwo_ProvideLoginHandlerFactory.proxyProvideLoginHandler(",
+                "            mapModuleTwo);",
                 "      }",
                 "    };",
                 "  }",
@@ -1253,12 +1250,11 @@ public void mapBindingsWithNonProviderValue() {
                 "  private Map<PathEnum, Handler> getMapOfPathEnumAndHandler() {",
                 "    return ImmutableMap.<PathEnum, Handler>of(",
                 "        PathEnum.ADMIN,",
-                "        Preconditions.checkNotNull(",
-                "            mapModuleOne.provideAdminHandler()," + NPE_FROM_PROVIDES_METHOD + "),",
+                "        MapModuleOne_ProvideAdminHandlerFactory.proxyProvideAdminHandler(",
+                "            mapModuleOne),",
                 "        PathEnum.LOGIN,",
-                "        Preconditions.checkNotNull(",
-                "            mapModuleTwo.provideLoginHandler(),",
-                "            " + NPE_FROM_PROVIDES_METHOD + "));",
+                "        MapModuleTwo_ProvideLoginHandlerFactory.proxyProvideLoginHandler(",
+                "            mapModuleTwo));",
                 "  }",
                 "",
                 "  @SuppressWarnings(\"unchecked\")",
@@ -1461,8 +1457,7 @@ public void injectMapWithoutMapBinding() {
             "",
             "  @Override",
             "  public Map<String, String> dispatcher() {",
-            "    return Preconditions.checkNotNull(",
-            "        mapModule.provideAMap(), " + NPE_FROM_PROVIDES_METHOD + ");",
+            "    return MapModule_ProvideAMapFactory.proxyProvideAMap(mapModule);",
             "  }",
             "",
             "  public static final class Builder {",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
index 1b4dc4f27..e11b1e620 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
@@ -20,7 +20,6 @@
 import static dagger.internal.codegen.Compilers.CLASS_PATH_WITHOUT_GUAVA_OPTION;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
-import static dagger.internal.codegen.GeneratedLines.NPE_FROM_PROVIDES_METHOD;
 
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.Compiler;
@@ -360,9 +359,8 @@ public void subcomponentOmitsInheritedBindings() {
             "    public Map<String, Object> objectMap() {",
             "      return Collections.<String, Object>singletonMap(",
             "          \"parent key\",",
-            "          Preconditions.checkNotNull(",
-            "              DaggerParent.this.parentModule.parentKeyObject(),",
-            "              " + NPE_FROM_PROVIDES_METHOD + "));",
+            "          ParentModule_ParentKeyObjectFactory.proxyParentKeyObject(",
+            "              DaggerParent.this.parentModule));",
             "    }",
             "  }",
             "}");
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
index 94e393fac..b586ca580 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
@@ -19,7 +19,6 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
-import static dagger.internal.codegen.GeneratedLines.NPE_FROM_PROVIDES_METHOD;
 
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
@@ -423,9 +422,8 @@ public void subcomponentOmitsInheritedBindings() {
             "    public Map<String, Object> objectMap() {",
             "      return ImmutableMap.<String, Object>of(",
             "          \"parent key\",",
-            "          Preconditions.checkNotNull(",
-            "              DaggerParent.this.parentModule.parentKeyObject(),",
-            "              " + NPE_FROM_PROVIDES_METHOD + ");",
+            "          ParentModule_ParentKeyObjectFactory.proxyParentKeyObject(",
+            "              DaggerParent.this.parentModule));",
             "    }",
             "  }",
             "}");
diff --git a/javatests/dagger/internal/codegen/MapKeyProcessorTest.java b/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
index 5c8d26736..001493b02 100644
--- a/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -20,7 +20,6 @@
 import static com.google.testing.compile.JavaSourcesSubject.assertThat;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
-import static dagger.internal.codegen.GeneratedLines.NPE_FROM_PROVIDES_METHOD;
 
 import com.google.auto.value.processor.AutoAnnotationProcessor;
 import com.google.common.collect.ImmutableList;
@@ -259,8 +258,8 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return Preconditions.checkNotNull(",
-                "            mapModuleOne.provideAdminHandler()," + NPE_FROM_PROVIDES_METHOD + ");",
+                "        return MapModuleOne_ProvideAdminHandlerFactory.proxyProvideAdminHandler(",
+                "            mapModuleOne);",
                 "      }",
                 "    };",
                 "  }",
@@ -269,8 +268,8 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return Preconditions.checkNotNull(",
-                "            mapModuleTwo.provideLoginHandler()," + NPE_FROM_PROVIDES_METHOD + ");",
+                "        return MapModuleTwo_ProvideLoginHandlerFactory.proxyProvideLoginHandler(",
+                "            mapModuleTwo);",
                 "      }",
                 "    };",
                 "  }",
@@ -527,8 +526,8 @@ public void mapKeyComponentFileWithDefaultField() {
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return Preconditions.checkNotNull(",
-                "            mapModuleOne.provideAdminHandler()," + NPE_FROM_PROVIDES_METHOD + ");",
+                "        return MapModuleOne_ProvideAdminHandlerFactory.proxyProvideAdminHandler(",
+                "            mapModuleOne);",
                 "      }",
                 "    };",
                 "  }",
@@ -537,8 +536,8 @@ public void mapKeyComponentFileWithDefaultField() {
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return Preconditions.checkNotNull(",
-                "            mapModuleTwo.provideLoginHandler()," + NPE_FROM_PROVIDES_METHOD + ");",
+                "        return MapModuleTwo_ProvideLoginHandlerFactory.proxyProvideLoginHandler(",
+                "            mapModuleTwo);",
                 "      }",
                 "    };",
                 "  }",
diff --git a/javatests/dagger/internal/codegen/MembersInjectionTest.java b/javatests/dagger/internal/codegen/MembersInjectionTest.java
index ffc08f211..ac2c377b6 100644
--- a/javatests/dagger/internal/codegen/MembersInjectionTest.java
+++ b/javatests/dagger/internal/codegen/MembersInjectionTest.java
@@ -26,7 +26,6 @@
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.ErrorMessages.INJECT_INTO_PRIVATE_CLASS;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
-import static dagger.internal.codegen.GeneratedLines.NPE_FROM_PROVIDES_METHOD;
 import static javax.tools.StandardLocation.CLASS_OUTPUT;
 
 import com.google.common.base.Joiner;
@@ -1464,9 +1463,7 @@ public void accessibleRawType_ofInaccessibleType() {
                 "      synchronized (local) {",
                 "        if (local == listOfInaccessible) {",
                 "          listOfInaccessible =",
-                "              Preconditions.checkNotNull(",
-                "                  InaccessiblesModule_InaccessiblesFactory.proxyInaccessibles(),",
-                "                  " + NPE_FROM_PROVIDES_METHOD + ");",
+                "              InaccessiblesModule_InaccessiblesFactory.proxyInaccessibles();",
                 "        }",
                 "        local = listOfInaccessible;",
                 "      }",
diff --git a/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index b30e3638a..6c05b2d6e 100644
--- a/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -273,7 +273,7 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  public static String proxyProvideString(TestModule instance) {",
-            "    return instance.provideString();",
+            "    return Preconditions.checkNotNull(instance.provideString(), " + NPE_LITERAL + ");",
             "  }",
             "}");
     assertAbout(javaSource()).that(moduleFile)
@@ -474,7 +474,8 @@ public void providesMethodReturnsProduced() {
             "",
             "  public static List<Object> proxyProvideObjects(",
             "      TestModule instance, Object a, Object b, MembersInjector<X> x) {",
-            "    return instance.provideObjects(a, b, x);",
+            "    return Preconditions.checkNotNull(",
+            "        instance.provideObjects(a, b, x), " + NPE_LITERAL + ");",
             "  }",
             "}");
     assertAbout(javaSources()).that(
@@ -525,7 +526,7 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  public static String proxyProvideString(TestModule instance) {",
-            "    return instance.provideString();",
+            "    return Preconditions.checkNotNull(instance.provideString(), " + NPE_LITERAL + ");",
             "  }",
             "}");
     assertAbout(javaSource()).that(moduleFile)
@@ -580,7 +581,8 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  public static List<List<?>> proxyProvideWildcardList(TestModule instance) {",
-            "    return instance.provideWildcardList();",
+            "    return Preconditions.checkNotNull(",
+            "        instance.provideWildcardList(), " + NPE_LITERAL + ");",
             "  }",
             "}");
     assertAbout(javaSource()).that(moduleFile)
@@ -631,7 +633,8 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  public static Set<String> proxyProvideStrings(TestModule instance) {",
-            "    return instance.provideStrings();",
+            "    return Preconditions.checkNotNull(",
+            "        instance.provideStrings(), " + NPE_LITERAL + ");",
             "  }",
             "}");
     assertAbout(javaSource()).that(moduleFile)
@@ -928,7 +931,7 @@ public void genericSubclassedModule() {
             "  public static <A extends CharSequence, B, C extends Number & Comparable<C>> List<B>",
             "      proxyProvideListB(",
             "          ParentModule<A, B, C> instance, B b) {",
-            "    return instance.provideListB(b);",
+            "    return Preconditions.checkNotNull(instance.provideListB(b), " + NPE_LITERAL + ");",
             "  }",
             "}");
     JavaFileObject bElementFactory =
@@ -967,7 +970,8 @@ public void genericSubclassedModule() {
             "  public static <A extends CharSequence, B, C extends Number & Comparable<C>>",
             "      B proxyProvideBElement(",
             "          ParentModule<A, B, C> instance, B b) {",
-            "        return instance.provideBElement(b);",
+            "    return Preconditions.checkNotNull(",
+            "        instance.provideBElement(b), " + NPE_LITERAL + ");",
             "  }",
             "}");
     JavaFileObject bEntryFactory =
@@ -1006,7 +1010,8 @@ public void genericSubclassedModule() {
             "  public static <A extends CharSequence, B, C extends Number & Comparable<C>>",
             "      B proxyProvideBEntry(",
             "          ParentModule<A, B, C> instance, B b) {",
-            "        return instance.provideBEntry(b);",
+            "    return Preconditions.checkNotNull(",
+            "        instance.provideBEntry(b), " + NPE_LITERAL + ");",
             "  }",
             "}");
     JavaFileObject numberFactory =
@@ -1037,7 +1042,7 @@ public void genericSubclassedModule() {
             "  }",
             "",
             "  public static Number proxyProvideNumber(ChildNumberModule instance) {",
-            "    return instance.provideNumber();",
+            "    return Preconditions.checkNotNull(instance.provideNumber(), " + NPE_LITERAL + ");",
             "  }",
             "}");
     JavaFileObject integerFactory =
@@ -1068,7 +1073,8 @@ public void genericSubclassedModule() {
             "  }",
             "",
             "  public static Integer proxyProvideInteger(ChildIntegerModule instance) {",
-            "    return instance.provideInteger();",
+            "    return Preconditions.checkNotNull(",
+            "        instance.provideInteger(), " + NPE_LITERAL + ");",
             "  }",
             "}");
     assertAbout(javaSources())
@@ -1138,7 +1144,8 @@ public void genericSubclassedModule() {
             "  }",
             "",
             "  public static Map<String, Number> proxyProvideMapStringNumber() {",
-            "    return ParameterizedModule.provideMapStringNumber();",
+            "    return Preconditions.checkNotNull(ParameterizedModule.provideMapStringNumber(),",
+            "        " + NPE_LITERAL + ");",
             "  }",
             "}");
 
@@ -1168,7 +1175,8 @@ public void genericSubclassedModule() {
             "  }",
             "",
             "  public static Object proxyProvideNonGenericType() {",
-            "    return ParameterizedModule.provideNonGenericType();",
+            "    return Preconditions.checkNotNull(ParameterizedModule.provideNonGenericType(),",
+            "        " + NPE_LITERAL + ");",
             "  }",
             "}");
 
@@ -1204,7 +1212,9 @@ public void genericSubclassedModule() {
             "  }",
             "",
             "  public static String proxyProvideNonGenericTypeWithDeps(Object o) {",
-            "    return ParameterizedModule.provideNonGenericTypeWithDeps(o);",
+            "    return Preconditions.checkNotNull(",
+            "        ParameterizedModule.provideNonGenericTypeWithDeps(o),",
+            "        " + NPE_LITERAL + ");",
             "  }",
             "}");
 
diff --git a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
index 4ad8f8211..1c2ac8501 100644
--- a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
@@ -110,7 +110,6 @@ public void inlinedOptionalBindings() {
             "",
             "import com.google.common.base.Optional;",
             "import dagger.Lazy;",
-            "import dagger.internal.Preconditions;",
             "import dagger.internal.ProviderOfLazy;",
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
@@ -132,9 +131,7 @@ public void inlinedOptionalBindings() {
             "",
             "  @Override",
             "  public Optional<Maybe> maybe() {",
-            "    return Optional.of(",
-            "        Preconditions.checkNotNull(",
-            "            Maybe.MaybeModule.provideMaybe(), " + NPE_FROM_PROVIDES + "));",
+            "    return Optional.of(Maybe_MaybeModule_ProvideMaybeFactory.proxyProvideMaybe());",
             "  }",
             "",
             "  @Override",
@@ -239,6 +236,7 @@ public void requestForFuture() {
             "import javax.annotation.Generated;",
             "import other.DefinitelyNot;",
             "import other.Maybe;",
+            "import other.Maybe_MaybeModule_ProvideMaybeFactory;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
@@ -254,8 +252,8 @@ public void requestForFuture() {
             "",
             "  @Override",
             "  public ListenableFuture<Optional<Maybe>> maybe() {",
-            "    return Futures.immediateFuture(Optional.of(Preconditions.checkNotNull(",
-            "        Maybe.MaybeModule.provideMaybe(), " + NPE_FROM_PROVIDES + ")));",
+            "    return Futures.immediateFuture(",
+            "        Optional.of(Maybe_MaybeModule_ProvideMaybeFactory.proxyProvideMaybe()));",
             "  }",
             "",
             "  @Override",
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 0a2007e58..219dea264 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -20,7 +20,6 @@
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
-import static dagger.internal.codegen.GeneratedLines.NPE_FROM_PROVIDES_METHOD;
 
 import com.google.common.collect.ImmutableList;
 import com.google.testing.compile.JavaFileObjects;
@@ -267,12 +266,9 @@ public void simpleComponent() {
                 "      synchronized (local) {",
                 "        if (local == productionImplementationExecutor) {",
                 "          productionImplementationExecutor =",
-                "              Preconditions.checkNotNull(",
-                "                  TestClass_SimpleComponent_ProductionExecutorModule.executor(",
-                "                      Preconditions.checkNotNull(",
-                "                          bModule.executor(),",
-                "                          " + NPE_FROM_PROVIDES_METHOD + ")),",
-                "                  " + NPE_FROM_PROVIDES_METHOD + ");",
+                "              TestClass_SimpleComponent_ProductionExecutorModule_ExecutorFactory",
+                "                  .proxyExecutor(",
+                "                      TestClass_BModule_ExecutorFactory.proxyExecutor(bModule));",
                 "        }",
                 "        local = productionImplementationExecutor;",
                 "      }",
@@ -295,11 +291,10 @@ public void simpleComponent() {
                 "      synchronized (local) {",
                 "        if (local == productionComponentMonitor) {",
                 "          productionComponentMonitor =",
-                "              Preconditions.checkNotNull(",
-                "                  TestClass_SimpleComponent_MonitoringModule.monitor(",
+                "              TestClass_SimpleComponent_MonitoringModule_MonitorFactory",
+                "                  .proxyMonitor(",
                 "                      simpleComponentProvider,",
-                "                      SetFactory.<ProductionComponentMonitor.Factory>empty()),",
-                "                  " + NPE_FROM_PROVIDES_METHOD + ");",
+                "                      SetFactory.<ProductionComponentMonitor.Factory>empty());",
                 "        }",
                 "        local = productionComponentMonitor;",
                 "      }",
@@ -318,8 +313,7 @@ public void simpleComponent() {
                 "  }",
                 "",
                 "  private TestClass.B getB() {",
-                "    return Preconditions.checkNotNull(",
-                "        bModule.b(new TestClass.C()), " + NPE_FROM_PROVIDES_METHOD + ");",
+                "    return TestClass_BModule_BFactory.proxyB(bModule, new TestClass.C());",
                 "  }",
                 "",
                 "  private Provider<TestClass.B> getBProvider() {",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
index e051c2859..e818cdfb4 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
@@ -118,10 +118,8 @@ public void setBindings() {
             "  @Override",
             "  public Set<String> strings() {",
             "    return SetBuilder.<String>newSetBuilder(2)",
-            "        .addAll(Preconditions.checkNotNull(",
-            "            EmptySetModule.emptySet(), " + NPE_FROM_PROVIDES + "))",
-            "        .add(Preconditions.checkNotNull(",
-            "            SetModule.string(), " + NPE_FROM_PROVIDES + "))",
+            "        .addAll(EmptySetModule_EmptySetFactory.proxyEmptySet())",
+            "        .add(SetModule_StringFactory.proxyString())",
             "        .build();",
             "  }",
             "",
@@ -220,7 +218,6 @@ public void inaccessible() {
             "test.DaggerTestComponent",
             "package test;",
             "",
-            "import dagger.internal.Preconditions;",
             "import dagger.internal.SetBuilder;",
             "import java.util.Collections;",
             "import java.util.Set;",
@@ -243,9 +240,7 @@ public void inaccessible() {
             "",
             "  private Set getSetOfInaccessible2() {",
             "    return SetBuilder.newSetBuilder(1)",
-            "        .addAll(Preconditions.checkNotNull(",
-            "            TestModule_EmptySetFactory.proxyEmptySet(),",
-            "            " + NPE_FROM_PROVIDES + "))",
+            "        .addAll(TestModule_EmptySetFactory.proxyEmptySet())",
             "        .build();",
             "  }",
             "",
@@ -360,8 +355,8 @@ public void subcomponentOmitsInheritedBindings() {
             "",
             "    @Override",
             "    public Set<Object> objectSet() {",
-            "      return Collections.<Object>singleton(Preconditions.checkNotNull(",
-            "          ParentModule.parentObject(), " + NPE_FROM_PROVIDES + "));",
+            "      return Collections.<Object>singleton(",
+            "          ParentModule_ParentObjectFactory.proxyParentObject());",
             "    }",
             "  }",
             "}");
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
index ba6555912..80f671336 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
@@ -120,10 +120,8 @@ public void setBindings() {
             "  @Override",
             "  public Set<String> strings() {",
             "    return ImmutableSet.<String>builder()",
-            "        .addAll(Preconditions.checkNotNull(",
-            "            EmptySetModule.emptySet(), " + NPE_FROM_PROVIDES + "))",
-            "        .add(Preconditions.checkNotNull(",
-            "            SetModule.string(), " + NPE_FROM_PROVIDES + "))",
+            "        .addAll(EmptySetModule_EmptySetFactory.proxyEmptySet())",
+            "        .add(SetModule_StringFactory.proxyString())",
             "        .build();",
             "  }",
             "",
@@ -135,9 +133,8 @@ public void setBindings() {
             "  @Override",
             "  public Set<Integer> onlyContributionIsElementsIntoSet() {",
             "    return ImmutableSet.<Integer>copyOf(",
-            "        Preconditions.checkNotNull(",
-            "            EmptySetModule.onlyContributionIsElementsIntoSet(),",
-            "            " + NPE_FROM_PROVIDES + "));",
+            "        EmptySetModule_OnlyContributionIsElementsIntoSetFactory",
+            "            .proxyOnlyContributionIsElementsIntoSet());",
             "  }",
             "",
             "  public static final class Builder {",
@@ -233,7 +230,6 @@ public void inaccessible() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
-            "import dagger.internal.Preconditions;",
             "import java.util.Set;",
             "import javax.annotation.Generated;",
             "import other.TestModule_EmptySetFactory;",
@@ -253,10 +249,7 @@ public void inaccessible() {
             "  }",
             "",
             "  private Set getSetOfInaccessible2() {",
-            "    return ImmutableSet.copyOf(",
-            "        Preconditions.checkNotNull(",
-            "            TestModule_EmptySetFactory.proxyEmptySet(),",
-            "            " + NPE_FROM_PROVIDES + "));",
+            "    return ImmutableSet.copyOf(TestModule_EmptySetFactory.proxyEmptySet());",
             "  }",
             "",
             "  @Override",
@@ -371,8 +364,8 @@ public void subcomponentOmitsInheritedBindings() {
             "",
             "    @Override",
             "    public Set<Object> objectSet() {",
-            "      return ImmutableSet.<Object>of(Preconditions.checkNotNull(",
-            "          ParentModule.parentObject(), " + NPE_FROM_PROVIDES + "));",
+            "      return ImmutableSet.<Object>of(",
+            "          ParentModule_ParentObjectFactory.proxyParentObject());",
             "    }",
             "  }",
             "}");
@@ -441,8 +434,7 @@ public void productionComponents() {
             "  public ListenableFuture<Set<String>> strings() {",
             "    return Futures.<Set<String>>immediateFuture(",
 
-            "        ImmutableSet.<String>copyOf(Preconditions.checkNotNull(",
-            "            EmptySetModule.emptySet(), " + NPE_FROM_PROVIDES + "));",
+            "        ImmutableSet.<String>copyOf(EmptySetModule_EmptySetFactory.proxyEmptySet());",
             "  }",
             "",
             "  public static final class Builder {",
diff --git a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
index 09a72cb26..32d4c412c 100644
--- a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -22,7 +22,6 @@
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
 import static dagger.internal.codegen.CompilerMode.EXPERIMENTAL_ANDROID_MODE;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
-import static dagger.internal.codegen.GeneratedLines.NPE_FROM_PROVIDES_METHOD;
 
 import com.google.common.collect.ImmutableList;
 import com.google.testing.compile.JavaFileObjects;
@@ -400,7 +399,6 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
                 DEFAULT_MODE,
                 "import dagger.internal.DoubleCheck;")
             .addLines(
-                "import dagger.internal.Preconditions;",
                 "import javax.annotation.Generated;")
             .addLinesIn(
                 DEFAULT_MODE,
@@ -543,9 +541,8 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
                 "",
                 "    @Override",
                 "    public Object getObject() {",
-                "      return Preconditions.checkNotNull(",
-                "          childModule.provideObject(getA()),",
-                "          " + NPE_FROM_PROVIDES_METHOD + ");",
+                "      return ChildModule_ProvideObjectFactory.proxyProvideObject(",
+                "          childModule, getA());",
                 "    }",
                 "",
                 "    @CanIgnoreReturnValue",
