diff --git a/compiler/src/it/producers-functional-tests/src/main/java/test/MultibindingProducerModule.java b/compiler/src/it/producers-functional-tests/src/main/java/test/MultibindingProducerModule.java
index 3531201c1..4651afcc6 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/test/MultibindingProducerModule.java
+++ b/compiler/src/it/producers-functional-tests/src/main/java/test/MultibindingProducerModule.java
@@ -36,7 +36,7 @@
   }
 
   @Produces(type = SET_VALUES) ListenableFuture<Set<String>> futureStrs() {
-    return Futures.immediateFuture((Set<String>) ImmutableSet.of("foo1", "foo2"));
+    return Futures.<Set<String>>immediateFuture(ImmutableSet.of("foo1", "foo2"));
   }
 
   @Produces(type = SET_VALUES) Set<String> strs() {
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index dde9f2823..c2f8adf06 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -297,7 +297,7 @@ private BindingGraph create(Optional<RequestResolver> parentResolver,
        *  component's resolver but will return an {@link Optional#absent} value.
        */
       ResolvedBindings lookUpBindings(DependencyRequest request) {
-        BindingKey bindingKey = BindingKey.forDependencyRequest(request);
+        BindingKey bindingKey = request.bindingKey();
         switch (bindingKey.kind()) {
           case CONTRIBUTION:
             // First, check for explicit keys (those from modules and components)
@@ -403,7 +403,8 @@ private MembersInjectionBinding rollUpMembersInjectionBindings(Key key) {
         Optional<Equivalence.Wrapper<AnnotationMirror>> bindingScope =
             provisionBinding.wrappedScope();
         for (RequestResolver requestResolver : getResolverLineage()) {
-          if (bindingScope.equals(requestResolver.targetScope)) {
+          if (bindingScope.equals(requestResolver.targetScope)
+              || requestResolver.explicitProvisionBindings.containsValue(provisionBinding)) {
             return Optional.of(requestResolver);
           }
         }
@@ -451,7 +452,7 @@ private MembersInjectionBinding rollUpMembersInjectionBindings(Key key) {
       }
 
       void resolve(DependencyRequest request) {
-        BindingKey bindingKey = BindingKey.forDependencyRequest(request);
+        BindingKey bindingKey = request.bindingKey();
 
         Optional<ResolvedBindings> previouslyResolvedBinding =
             getPreviouslyResolvedBindings(bindingKey);
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
index f74085e8e..6d1827a11 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -15,8 +15,6 @@
  */
 package dagger.internal.codegen;
 
-import javax.tools.Diagnostic;
-
 import com.google.auto.common.AnnotationMirrors;
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
@@ -55,6 +53,8 @@
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.SimpleTypeVisitor6;
 import javax.lang.model.util.Types;
+import javax.tools.Diagnostic;
+
 import static com.google.auto.common.MoreElements.getAnnotationMirror;
 import static com.google.auto.common.MoreTypes.isTypeOf;
 import static com.google.common.collect.Iterables.getOnlyElement;
@@ -121,8 +121,7 @@
         boolean visitResolvedRequest(Deque<ResolvedRequest> path) {
           ResolvedBindings binding = path.peek().binding();
           for (ResolvedRequest resolvedRequest : Iterables.skip(path, 1)) {
-            if (BindingKey.forDependencyRequest(resolvedRequest.request())
-                .equals(binding.bindingKey())) {
+            if (resolvedRequest.request().bindingKey().equals(binding.bindingKey())) {
               reportCycle(path, reportBuilder);
               return false;
             }
@@ -699,7 +698,7 @@ private void reportCycle(Deque<ResolvedRequest> path,
 
     static ResolvedRequest create(DependencyRequest request, BindingGraph graph) {
       return new AutoValue_BindingGraphValidator_ResolvedRequest(
-          request, graph.resolvedBindings().get(BindingKey.forDependencyRequest(request)));
+          request, graph.resolvedBindings().get(request.bindingKey()));
     }
   }
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingKey.java b/compiler/src/main/java/dagger/internal/codegen/BindingKey.java
index 473deba64..cd29d8d69 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingKey.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingKey.java
@@ -31,22 +31,6 @@
     CONTRIBUTION, MEMBERS_INJECTION;
   }
 
-  static BindingKey forDependencyRequest(DependencyRequest request) {
-    switch (request.kind()) {
-      case INSTANCE:
-      case LAZY:
-      case PROVIDER:
-      case PRODUCER:
-      case PRODUCED:
-      case FUTURE:
-        return BindingKey.create(Kind.CONTRIBUTION, request.key());
-      case MEMBERS_INJECTOR:
-        return BindingKey.create(Kind.MEMBERS_INJECTION, request.key());
-      default:
-        throw new AssertionError();
-    }
-  }
-
   static BindingKey create(Kind kind, Key key) {
     return new AutoValue_BindingKey(kind, key);
   }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index f8ffb17dd..678b72c93 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -35,9 +35,9 @@
 import com.google.common.collect.Sets;
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.Component;
-import dagger.Factory;
 import dagger.MapKey;
 import dagger.MembersInjector;
+import dagger.internal.Factory;
 import dagger.internal.InstanceFactory;
 import dagger.internal.MapFactory;
 import dagger.internal.MapProviderFactory;
@@ -258,15 +258,10 @@ Snippet getSnippetFor(ClassName usingClass) {
     for (Entry<TypeElement, String> entry : componentContributionNames.entrySet()) {
       TypeElement contributionElement = entry.getKey();
       String contributionName = entry.getValue();
-      FieldWriter contributionField =
-          componentWriter.addField(contributionElement, contributionName);
-      contributionField.addModifiers(PRIVATE, FINAL);
-      componentContributionFields.put(contributionElement, MemberSelect.instanceSelect(
-          componentWriter.name(), Snippet.format(contributionField.name())));
       FieldWriter builderField = builderWriter.addField(contributionElement, contributionName);
       builderField.addModifiers(PRIVATE);
-      constructorWriter.body()
-          .addSnippet("this.%1$s = builder.%1$s;", contributionField.name());
+      componentContributionFields.put(contributionElement, MemberSelect.instanceSelect(
+          componentWriter.name(), Snippet.format("builder.%s", builderField.name())));
       MethodWriter builderMethod = builderWriter.addMethod(builderWriter, contributionName);
       builderMethod.addModifiers(PUBLIC);
       builderMethod.addParameter(contributionElement, contributionName);
@@ -326,6 +321,7 @@ Snippet getSnippetFor(ClassName usingClass) {
     initializeFrameworkTypes(input,
         componentWriter,
         constructorWriter,
+        Optional.of(builderWriter.name()),
         componentContributionFields,
         memberSelectSnippets,
         ImmutableMap.<ContributionBinding, Snippet>of(),
@@ -447,6 +443,7 @@ private void writeSubcomponents(BindingGraph input,
     initializeFrameworkTypes(input,
         componentWriter,
         constructorWriter,
+        Optional.<ClassName>absent(),
         componentContributionFields,
         memberSelectSnippets,
         parentMultibindingContributionSnippets,
@@ -642,7 +639,7 @@ private void writeInterfaceMethods(BindingGraph input, ClassWriter componentWrit
                     requestElement.getSimpleName().toString());
         interfaceMethod.annotate(Override.class);
         interfaceMethod.addModifiers(PUBLIC);
-        BindingKey bindingKey = BindingKey.forDependencyRequest(interfaceRequest);
+        BindingKey bindingKey = interfaceRequest.bindingKey();
         switch(interfaceRequest.kind()) {
           case MEMBERS_INJECTOR:
             MemberSelect membersInjectorSelect = memberSelectSnippets.get(bindingKey);
@@ -695,6 +692,7 @@ private void writeInterfaceMethods(BindingGraph input, ClassWriter componentWrit
   private void initializeFrameworkTypes(BindingGraph input,
       ClassWriter componentWriter,
       ConstructorWriter constructorWriter,
+      Optional<ClassName> builderName,
       Map<TypeElement, MemberSelect> componentContributionFields,
       ImmutableMap<BindingKey, MemberSelect> memberSelectSnippets,
       ImmutableMap<ContributionBinding, Snippet> parentMultibindingContributionSnippets,
@@ -707,7 +705,12 @@ private void initializeFrameworkTypes(BindingGraph input,
           componentWriter.addMethod(VoidName.VOID, "initialize" + ((i == 0) ? "" : i));
       initializeMethod.body();
       initializeMethod.addModifiers(PRIVATE);
-      constructorWriter.body().addSnippet("%s();", initializeMethod.name());
+      if (builderName.isPresent()) {
+        initializeMethod.addParameter(builderName.get(), "builder").addModifiers(FINAL);
+        constructorWriter.body().addSnippet("%s(builder);", initializeMethod.name());
+      } else {
+        constructorWriter.body().addSnippet("%s();", initializeMethod.name());
+      }
 
       for (BindingKey bindingKey : partitions.get(i)) {
         Snippet memberSelectSnippet =
@@ -1074,7 +1077,7 @@ private static Snippet initializeMembersInjectorForBinding(
         DependencyRequest parentInjectorRequest = binding.parentInjectorRequest().get();
         return Snippet.format("%s.delegatingTo(%s)",
             ClassName.fromClass(MembersInjectors.class),
-            memberSelectSnippets.get(BindingKey.forDependencyRequest(parentInjectorRequest))
+            memberSelectSnippets.get(parentInjectorRequest.bindingKey())
                 .getSnippetFor(componentName));
       case INJECT_MEMBERS:
         List<Snippet> parameters = getDependencyParameters(
@@ -1099,7 +1102,7 @@ private static Snippet initializeMembersInjectorForBinding(
       BindingKey key = Iterables.getOnlyElement(FluentIterable.from(requestsForKey)
           .transform(new Function<DependencyRequest, BindingKey>() {
             @Override public BindingKey apply(DependencyRequest request) {
-              return BindingKey.forDependencyRequest(request);
+              return request.bindingKey();
             }
           })
           .toSet());
@@ -1119,7 +1122,7 @@ private static Snippet initializeMembersInjectorForBinding(
       BindingKey key = Iterables.getOnlyElement(FluentIterable.from(requestsForKey)
           .transform(new Function<DependencyRequest, BindingKey>() {
             @Override public BindingKey apply(DependencyRequest request) {
-              return BindingKey.forDependencyRequest(request);
+              return request.bindingKey();
             }
           }));
       ResolvedBindings resolvedBindings = bindingGraph.resolvedBindings().get(key);
@@ -1149,8 +1152,9 @@ private Snippet initializeMapBinding(
     if (isNonProviderMap(firstBinding)) {
       return Snippet.format("%s.create(%s)",
           ClassName.fromClass(MapFactory.class),
-          memberSelectSnippets.get(BindingKey.forDependencyRequest(
-              Iterables.getOnlyElement(firstBinding.dependencies()))).getSnippetFor(componentName));
+          memberSelectSnippets.get(
+              Iterables.getOnlyElement(firstBinding.dependencies()).bindingKey())
+                  .getSnippetFor(componentName));
     } else {
       DeclaredType mapType = asDeclared(firstBinding.key().type());
       TypeMirror mapKeyType = Util.getKeyTypeOfMap(mapType);
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
index c2c5c0178..9e36418fd 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
@@ -39,6 +39,7 @@
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
+
 import static com.google.auto.common.MoreTypes.isTypeOf;
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
@@ -76,14 +77,31 @@
 
   abstract Kind kind();
   abstract Key key();
+
+  BindingKey bindingKey() {
+    switch (kind()) {
+      case INSTANCE:
+      case LAZY:
+      case PROVIDER:
+      case PRODUCER:
+      case PRODUCED:
+      case FUTURE:
+        return BindingKey.create(BindingKey.Kind.CONTRIBUTION, key());
+      case MEMBERS_INJECTOR:
+        return BindingKey.create(BindingKey.Kind.MEMBERS_INJECTION, key());
+      default:
+        throw new AssertionError();
+    }
+  }
+
   abstract Element requestElement();
-  
+
   /**
    * Returns the possibly resolved type that contained the requesting element. For members injection
    * requests, this is the type itself.
    */
   abstract DeclaredType enclosingType();
-  
+
   /** Returns true if this request allows null objects. */
   abstract boolean isNullable();
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
index 205a724b7..28987e1d0 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
@@ -21,9 +21,9 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
-import dagger.Factory;
 import dagger.MembersInjector;
 import dagger.Provides.Type;
+import dagger.internal.Factory;
 import dagger.internal.codegen.writer.ClassName;
 import dagger.internal.codegen.writer.ClassWriter;
 import dagger.internal.codegen.writer.ConstructorWriter;
@@ -110,7 +110,7 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
     final Optional<ConstructorWriter> constructorWriter;
     List<TypeVariableName> typeParameters = Lists.newArrayList();
     for (TypeParameterElement typeParameter : binding.bindingTypeElement().getTypeParameters()) {
-     typeParameters.add(TypeVariableName.fromTypeParameterElement(typeParameter));          
+     typeParameters.add(TypeVariableName.fromTypeParameterElement(typeParameter));
     }
     switch (binding.factoryCreationStrategy()) {
       case ENUM_INSTANCE:
@@ -149,7 +149,6 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
     factoryWriter.addModifiers(PUBLIC);
     factoryWriter.addImplementedType(
         ParameterizedTypeName.create(ClassName.fromClass(Factory.class), providedTypeName));
-    
 
     MethodWriter getMethodWriter = factoryWriter.addMethod(providedTypeName, "get");
     getMethodWriter.annotate(Override.class);
@@ -178,7 +177,7 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
           .addSnippet("assert %s != null;", field.name())
           .addSnippet("this.%1$s = %1$s;", field.name());
     }
-    
+
     // If constructing a factory for @Inject or @Provides bindings, we use a static create method
     // so that generated components can avoid having to refer to the generic types
     // of the factory.  (Otherwise they may have visibility problems referring to the types.)
@@ -195,7 +194,7 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
         Map<String, TypeName> params = constructorWriter.isPresent()
             ? constructorWriter.get().parameters() : ImmutableMap.<String, TypeName>of();
         for (Map.Entry<String, TypeName> param : params.entrySet()) {
-          createMethodWriter.addParameter(param.getValue(), param.getKey());      
+          createMethodWriter.addParameter(param.getValue(), param.getKey());
         }
         switch (binding.factoryCreationStrategy()) {
           case ENUM_INSTANCE:
@@ -223,8 +222,7 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
     List<Snippet> parameters = Lists.newArrayList();
     for (DependencyRequest dependency : binding.dependencies()) {
       parameters.add(frameworkTypeUsageStatement(
-          Snippet.format(fields.get(BindingKey.forDependencyRequest(dependency)).name()),
-          dependency.kind()));
+          Snippet.format(fields.get(dependency.bindingKey()).name()), dependency.kind()));
     }
     Snippet parametersSnippet = makeParametersSnippet(parameters);
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
index 642d6e966..c4d0db6cc 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
@@ -189,7 +189,7 @@ ClassName nameGeneratedType(MembersInjectionBinding binding) {
           DependencyRequest fieldDependency =
               Iterables.getOnlyElement(injectionSite.dependencies());
           FieldWriter singleField = depedencyFields.get(
-              BindingKey.forDependencyRequest(fieldDependency));
+              fieldDependency.bindingKey());
           injectMembersWriter.body().addSnippet("instance.%s = %s;",
               injectionSite.element().getSimpleName(),
               frameworkTypeUsageStatement(Snippet.format(singleField.name()),
@@ -199,7 +199,7 @@ ClassName nameGeneratedType(MembersInjectionBinding binding) {
           ImmutableList.Builder<Snippet> parameters = ImmutableList.builder();
           for (DependencyRequest methodDependency : injectionSite.dependencies()) {
             FieldWriter field = depedencyFields.get(
-                BindingKey.forDependencyRequest(methodDependency));
+                methodDependency.bindingKey());
             parameters.add(frameworkTypeUsageStatement(Snippet.format(field.name()),
                 methodDependency.kind()));
           }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index 895dd647f..d4d55f8d3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -155,7 +155,7 @@ ClassName nameGeneratedType(ProductionBinding binding) {
       ParameterizedTypeName futureType = ParameterizedTypeName.create(
           ClassName.fromClass(ListenableFuture.class),
           asyncDependencyType(dependency));
-      String name = fields.get(BindingKey.forDependencyRequest(dependency)).name();
+      String name = fields.get(dependency.bindingKey()).name();
       Snippet futureAccess = Snippet.format("%s.get()", name);
       getMethodWriter.body().addSnippet("%s %sFuture = %s;",
           futureType,
@@ -170,8 +170,7 @@ ClassName nameGeneratedType(ProductionBinding binding) {
       ImmutableList.Builder<Snippet> parameterSnippets = ImmutableList.builder();
       for (DependencyRequest dependency : binding.dependencies()) {
         parameterSnippets.add(frameworkTypeUsageStatement(
-            Snippet.format(fields.get(BindingKey.forDependencyRequest(dependency)).name()),
-            dependency.kind()));
+            Snippet.format(fields.get(dependency.bindingKey()).name()), dependency.kind()));
       }
       final boolean wrapWithFuture = false;  // since submitToExecutor will create the future
       Snippet invocationSnippet = getInvocationSnippet(wrapWithFuture, binding,
@@ -204,7 +203,7 @@ ClassName nameGeneratedType(ProductionBinding binding) {
       if (asyncDependencies.size() == 1) {
         DependencyRequest asyncDependency = Iterables.getOnlyElement(asyncDependencies);
         futureSnippet = Snippet.format("%s",
-            fields.get(BindingKey.forDependencyRequest(asyncDependency)).name() + "Future");
+            fields.get(asyncDependency.bindingKey()).name() + "Future");
         String argName = asyncDependency.requestElement().getSimpleName().toString();
         ImmutableList.Builder<Snippet> parameterSnippets = ImmutableList.builder();
         for (DependencyRequest dependency : binding.dependencies()) {
@@ -214,7 +213,7 @@ ClassName nameGeneratedType(ProductionBinding binding) {
             parameterSnippets.add(Snippet.format("%s", argName));
           } else {
             parameterSnippets.add(frameworkTypeUsageStatement(
-                Snippet.format(fields.get(BindingKey.forDependencyRequest(dependency)).name()),
+                Snippet.format(fields.get(dependency.bindingKey()).name()),
                 dependency.kind()));
           }
         }
@@ -243,8 +242,7 @@ ClassName nameGeneratedType(ProductionBinding binding) {
                 .from(asyncDependencies)
                 .transform(new Function<DependencyRequest, String>() {
                   @Override public String apply(DependencyRequest dependency) {
-                    return fields.get(BindingKey.forDependencyRequest(dependency)).name()
-                        + "Future";
+                    return fields.get(dependency.bindingKey()).name() + "Future";
                   }
                 })));
         ImmutableList<Snippet> parameterSnippets = getParameterSnippets(binding, fields, "args");
@@ -316,8 +314,7 @@ private TypeName asyncDependencyType(DependencyRequest dependency) {
         argIndex++;
       } else {
         snippets.add(frameworkTypeUsageStatement(
-            Snippet.format(fields.get(BindingKey.forDependencyRequest(dependency)).name()),
-            dependency.kind()));
+            Snippet.format(fields.get(dependency.bindingKey()).name()), dependency.kind()));
       }
     }
     return snippets.build();
diff --git a/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java b/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
index 62e034181..bf208a63c 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
@@ -84,7 +84,7 @@ public int compare(DependencyRequest left, DependencyRequest right) {
         new ImmutableSetMultimap.Builder<BindingKey, DependencyRequest>().orderValuesBy(
             DEPENDENCY_ORDERING);
     for (DependencyRequest dependency : dependencies) {
-      BindingKey resolved = BindingKey.forDependencyRequest(dependency);
+      BindingKey resolved = dependency.bindingKey();
       // To get the proper unresolved type, we have to extract the proper type from the
       // request type again (because we're looking at the actual element's type).
       TypeMirror unresolvedType =
@@ -109,8 +109,7 @@ public int compare(DependencyRequest left, DependencyRequest right) {
         new ImmutableSetMultimap.Builder<BindingKey, DependencyRequest>().orderValuesBy(
             DEPENDENCY_ORDERING);
     for (DependencyRequest dependency : dependencies) {
-      dependenciesByKeyBuilder.put(
-          BindingKey.forDependencyRequest(dependency), dependency);
+      dependenciesByKeyBuilder.put(dependency.bindingKey(), dependency);
     }
     return dependenciesByKeyBuilder.build();
   }
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
index 51d7970d0..a13c98164 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
@@ -98,7 +98,9 @@ public InterfaceWriter addInterface(String simpleName) {
   }
 
   public Appendable write(Appendable appendable) throws IOException {
-    appendable.append("package ").append(packageName).append(';').append("\n\n");
+    if (!packageName.isEmpty()) {
+      appendable.append("package ").append(packageName).append(";\n\n");
+    }
 
     // write imports
     ImmutableSet<ClassName> classNames = FluentIterable.from(typeWriters)
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index b2fae4a13..af704ea2f 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -203,7 +203,7 @@
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -214,7 +214,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "  }",
         "",
         "  @Override",
@@ -289,7 +289,7 @@
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -300,7 +300,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.someInjectableTypeProvider =",
         "        ScopedProvider.create(SomeInjectableType$$Factory.create());",
         "  }",
@@ -371,7 +371,7 @@
         "",
         "  private Dagger_OuterType_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -382,7 +382,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.bMembersInjector =",
         "        OuterType$B$$MembersInjector.create(OuterType$A$$Factory.create());",
         "  }",
@@ -465,14 +465,12 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final TestModule testModule;",
         "  private Provider<B> bProvider;",
         "  private Provider<A> aProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.testModule = builder.testModule;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -483,8 +481,9 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
-        "    this.bProvider = TestModule$$BFactory.create(testModule, C$$Factory.create());",
+        "  private void initialize(final Builder builder) {",
+        "    this.bProvider = TestModule$$BFactory.create(builder.testModule,",
+        "        C$$Factory.create());",
         "    this.aProvider = A$$Factory.create(bProvider);",
         "  }",
         "",
@@ -600,21 +599,9 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final TestModule testModule;",
-        "  private final DepModule depModule;",
-        "  private final AlwaysIncluded alwaysIncluded;",
-        "  private final ParentTestIncluded parentTestIncluded;",
-        "  private final RefByDep refByDep;",
-        "  private final ParentDepIncluded parentDepIncluded;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.testModule = builder.testModule;",
-        "    this.depModule = builder.depModule;",
-        "    this.alwaysIncluded = builder.alwaysIncluded;",
-        "    this.parentTestIncluded = builder.parentTestIncluded;",
-        "    this.refByDep = builder.refByDep;",
-        "    this.parentDepIncluded = builder.parentDepIncluded;",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -722,6 +709,36 @@
         .and().generatesSources(generatedComponent);
   }
 
+  @Test public void testDefaultPackage() {
+    JavaFileObject aClass = JavaFileObjects.forSourceLines("AClass", "class AClass {}");
+    JavaFileObject bClass = JavaFileObjects.forSourceLines("BClass",
+        "import javax.inject.Inject;",
+        "",
+        "class BClass {",
+        "  @Inject BClass(AClass a) {}",
+        "}");
+    JavaFileObject aModule = JavaFileObjects.forSourceLines("AModule",
+        "import dagger.Module;",
+        "import dagger.Provides;",
+        "",
+        "@Module class AModule {",
+        "  @Provides AClass aClass() {",
+        "    return new AClass();",
+        "  }",
+        "}");
+    JavaFileObject component = JavaFileObjects.forSourceLines("SomeComponent",
+        "import dagger.Component;",
+        "",
+        "@Component(modules = AModule.class)",
+        "interface SomeComponent {",
+        "  BClass bClass();",
+        "}");
+    assertAbout(javaSources())
+        .that(ImmutableList.of(aModule, aClass, bClass, component))
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError();
+  }
+
   @Test public void setBindings() {
     JavaFileObject emptySetModuleFile = JavaFileObjects.forSourceLines("test.EmptySetModule",
         "package test;",
@@ -772,17 +789,13 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final EmptySetModule emptySetModule;",
-        "  private final SetModule setModule;",
         "  private Provider<Set<String>> setOfStringContribution1Provider;",
         "  private Provider<Set<String>> setOfStringContribution2Provider;",
         "  private Provider<Set<String>> setOfStringProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.emptySetModule = builder.emptySetModule;",
-        "    this.setModule = builder.setModule;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -793,10 +806,11 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.setOfStringContribution1Provider =",
-        "        EmptySetModule$$EmptySetFactory.create(emptySetModule);",
-        "    this.setOfStringContribution2Provider = SetModule$$StringFactory.create(setModule);",
+        "        EmptySetModule$$EmptySetFactory.create(builder.emptySetModule);",
+        "    this.setOfStringContribution2Provider =",
+        "        SetModule$$StringFactory.create(builder.setModule);",
         "    this.setOfStringProvider = SetFactory.create(",
         "        setOfStringContribution1Provider, setOfStringContribution2Provider);",
         "  }",
@@ -891,7 +905,7 @@
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -902,7 +916,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.someInjectedTypeMembersInjector =",
         "        SomeInjectedType$$MembersInjector.create(SomeInjectableType$$Factory.create());",
         "  }",
@@ -970,7 +984,7 @@
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -981,7 +995,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.simpleComponentProvider = InstanceFactory.<SimpleComponent>create(this);",
         "    this.someInjectableTypeProvider =",
         "        SomeInjectableType$$Factory.create(simpleComponentProvider);",
@@ -1049,7 +1063,7 @@
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1060,7 +1074,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.someInjectedTypeMembersInjector =",
         "        SomeInjectedType$$MembersInjector.create(SomeInjectableType$$Factory.create());",
         "    this.someInjectedTypeProvider =",
@@ -1126,7 +1140,7 @@
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1137,7 +1151,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.someInjectableTypeProvider =",
         "        SomeInjectableType$$Factory.create((MembersInjector) MembersInjectors.noOp());",
         "  }",
@@ -1208,30 +1222,28 @@
         "test.Dagger_BComponent",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_BComponent implements BComponent {",
-        "  private final AComponent aComponent;",
         "  private Provider<A> aProvider;",
         "  private Provider<B> bProvider;",
         "",
         "  private Dagger_BComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.aComponent = builder.aComponent;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
         "    return new Builder();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.aProvider = new Factory<A>() {",
         "      @Override public A get() {",
-        "        A provided = aComponent.a();",
+        "        A provided = builder.aComponent.a();",
         "        if (provided == null) {",
         "          throw new NullPointerException(" + NPE_LITERAL + ");",
         "        }",
@@ -1330,16 +1342,12 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final test.TestModule testModule;",
-        "  private final TestModule testModule1;",
         "  private Provider<test.A> aProvider;",
         "  private Provider<A> aProvider1;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.testModule = builder.testModule;",
-        "    this.testModule1 = builder.testModule1;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1350,9 +1358,9 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
-        "    this.aProvider = test.TestModule$$AFactory.create(testModule);",
-        "    this.aProvider1 = TestModule$$AFactory.create(testModule1);",
+        "  private void initialize(final Builder builder) {",
+        "    this.aProvider = test.TestModule$$AFactory.create(builder.testModule);",
+        "    this.aProvider1 = TestModule$$AFactory.create(builder.testModule1);",
         "  }",
         "",
         "  @Override",
@@ -1468,7 +1476,7 @@
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1479,7 +1487,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.bProvider = B$$Factory.create(C$$Factory.create());",
         "    this.aProvider = A$$Factory.create(bProvider);",
         "    this.xProvider = X$$Factory.create(C$$Factory.create());",
@@ -1570,7 +1578,7 @@
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1581,7 +1589,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {}",
+        "  private void initialize(final Builder builder) {}",
         "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
@@ -1658,7 +1666,7 @@
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1669,7 +1677,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {}",
+        "  private void initialize(final Builder builder) {}",
         "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
diff --git a/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
index 0f3586746..916f20057 100644
--- a/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
@@ -129,7 +129,7 @@
     JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass$$Factory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
@@ -173,8 +173,8 @@
     JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass$$Factory",
         "package test;",
         "",
-        "import dagger.Factory;",
         "import dagger.MembersInjector;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
@@ -216,7 +216,7 @@
     JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass$$Factory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
         "@SuppressWarnings(\"rawtypes\")",
@@ -253,7 +253,7 @@
     JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass$$Factory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
@@ -300,7 +300,7 @@
     JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass$$Factory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import java.util.List;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
@@ -360,8 +360,8 @@
     JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass$$Factory",
         "package test;",
         "",
-        "import dagger.Factory;",
         "import dagger.internal.DoubleCheckLazy;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
@@ -621,7 +621,7 @@
         "test.InjectConstructor$$Factory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
@@ -664,8 +664,8 @@
         "test.AllInjections$$Factory",
         "package test;",
         "",
-        "import dagger.Factory;",
         "import dagger.MembersInjector;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
@@ -719,8 +719,8 @@
         "test.B$$Factory",
         "package test;",
         "",
-        "import dagger.Factory;",
         "import dagger.MembersInjector;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
@@ -764,7 +764,7 @@ public void wildcardDependency() {
         "test.InjectConstructor$$Factory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import java.util.List;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
@@ -813,7 +813,7 @@ public void basicNameCollision() {
         "test.InjectConstructor$$Factory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
@@ -864,7 +864,7 @@ public void nestedNameCollision() {
         "test.InjectConstructor$$Factory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "import other.pkg.Outer;",
@@ -918,7 +918,7 @@ public void samePackageNameCollision() {
         "test.InjectConstructor$$Factory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "import other.pkg.CommonName;",
@@ -968,7 +968,7 @@ public void noDeps() {
     JavaFileObject factory = JavaFileObjects.forSourceLines("test.SimpleType$$Factory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
@@ -1013,7 +1013,7 @@ public void noDeps() {
         "test.OuterType$A$$Factory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "import test.OuterType.A;",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 4128b6828..fccfb3334 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -118,8 +118,6 @@ public void mapBindingsWithEnumKey() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final MapModuleOne mapModuleOne;",
-        "  private final MapModuleTwo mapModuleTwo;",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution2;",
         "  private Provider<Map<PathEnum, Provider<Handler>>>",
@@ -127,9 +125,7 @@ public void mapBindingsWithEnumKey() {
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.mapModuleOne = builder.mapModuleOne;",
-        "    this.mapModuleTwo = builder.mapModuleTwo;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -140,11 +136,11 @@ public void mapBindingsWithEnumKey() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.mapOfPathEnumAndProviderOfHandlerContribution1 =",
-        "        MapModuleOne$$ProvideAdminHandlerFactory.create(mapModuleOne);",
+        "        MapModuleOne$$ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
         "    this.mapOfPathEnumAndProviderOfHandlerContribution2 =",
-        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(mapModuleTwo);",
+        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
         "    this.mapOfPathEnumAndProviderOfHandlerProvider =",
         "        MapProviderFactory.<PathEnum, Handler>builder(2)",
         "            .put(test.PathEnum.ADMIN,",
@@ -290,8 +286,6 @@ public void mapBindingsWithStringKey() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final MapModuleOne mapModuleOne;",
-        "  private final MapModuleTwo mapModuleTwo;",
         "  private Provider<Handler> mapOfStringAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfStringAndProviderOfHandlerContribution2;",
         "  private Provider<Map<String, Provider<Handler>>>",
@@ -299,9 +293,7 @@ public void mapBindingsWithStringKey() {
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.mapModuleOne = builder.mapModuleOne;",
-        "    this.mapModuleTwo = builder.mapModuleTwo;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -312,11 +304,11 @@ public void mapBindingsWithStringKey() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.mapOfStringAndProviderOfHandlerContribution1 =",
-        "        MapModuleOne$$ProvideAdminHandlerFactory.create(mapModuleOne);",
+        "        MapModuleOne$$ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
         "    this.mapOfStringAndProviderOfHandlerContribution2 =",
-        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(mapModuleTwo);",
+        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
         "    this.mapOfStringAndProviderOfHandlerProvider =",
         "        MapProviderFactory.<String, Handler>builder(2)",
         "            .put(\"Admin\", mapOfStringAndProviderOfHandlerContribution1)",
@@ -463,8 +455,6 @@ public void mapBindingsWithNonProviderValue() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final MapModuleOne mapModuleOne;",
-        "  private final MapModuleTwo mapModuleTwo;",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution2;",
         "  private Provider<Map<PathEnum, Provider<Handler>>>",
@@ -473,9 +463,7 @@ public void mapBindingsWithNonProviderValue() {
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.mapModuleOne = builder.mapModuleOne;",
-        "    this.mapModuleTwo = builder.mapModuleTwo;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -486,11 +474,11 @@ public void mapBindingsWithNonProviderValue() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.mapOfPathEnumAndProviderOfHandlerContribution1 =",
-        "        MapModuleOne$$ProvideAdminHandlerFactory.create(mapModuleOne);",
+        "        MapModuleOne$$ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
         "    this.mapOfPathEnumAndProviderOfHandlerContribution2 =",
-        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(mapModuleTwo);",
+        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
         "    this.mapOfPathEnumAndProviderOfHandlerProvider =",
         "        MapProviderFactory.<PathEnum, Handler>builder(2)",
         "            .put(test.PathEnum.ADMIN,",
@@ -594,13 +582,11 @@ public void injectMapWithoutMapBinding() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final MapModule mapModule;",
         "  private Provider<Map<String, String>> provideAMapProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.mapModule = builder.mapModule;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -611,8 +597,8 @@ public void injectMapWithoutMapBinding() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
-        "    this.provideAMapProvider = MapModule$$ProvideAMapFactory.create(mapModule);",
+        "  private void initialize(final Builder builder) {",
+        "    this.provideAMapProvider = MapModule$$ProvideAMapFactory.create(builder.mapModule);",
         "  }",
         "",
         "  @Override",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
index 1b9fd0f12..7f0178c85 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -159,8 +159,6 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final MapModuleOne mapModuleOne;",
-        "  private final MapModuleTwo mapModuleTwo;",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution2;",
         "  private Provider<Map<PathKey, Provider<Handler>>>",
@@ -168,9 +166,7 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.mapModuleOne = builder.mapModuleOne;",
-        "    this.mapModuleTwo = builder.mapModuleTwo;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -181,11 +177,11 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.mapOfPathKeyAndProviderOfHandlerContribution1 =",
-        "        MapModuleOne$$ProvideAdminHandlerFactory.create(mapModuleOne);",
+        "        MapModuleOne$$ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
         "    this.mapOfPathKeyAndProviderOfHandlerContribution2 =",
-        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(mapModuleTwo);",
+        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
         "    this.mapOfPathKeyAndProviderOfHandlerProvider =",
         "        MapProviderFactory.<PathKey, Handler>builder(2)",
         "            .put(PathKeyCreator.create(PathEnum.ADMIN, \"AdminPath\"),",
@@ -337,8 +333,6 @@ public void mapKeyComponentFileWithDefaultField() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final MapModuleOne mapModuleOne;",
-        "  private final MapModuleTwo mapModuleTwo;",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution2;",
         "  private Provider<Map<PathKey, Provider<Handler>>>",
@@ -346,9 +340,7 @@ public void mapKeyComponentFileWithDefaultField() {
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.mapModuleOne = builder.mapModuleOne;",
-        "    this.mapModuleTwo = builder.mapModuleTwo;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -359,11 +351,11 @@ public void mapKeyComponentFileWithDefaultField() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.mapOfPathKeyAndProviderOfHandlerContribution1 =",
-        "        MapModuleOne$$ProvideAdminHandlerFactory.create(mapModuleOne);",
+        "        MapModuleOne$$ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
         "    this.mapOfPathKeyAndProviderOfHandlerContribution2 =",
-        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(mapModuleTwo);",
+        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
         "    this.mapOfPathKeyAndProviderOfHandlerProvider =",
         "        MapProviderFactory.<PathKey, Handler>builder(2)",
         "            .put(PathKeyCreator.create(PathEnum.ADMIN, \"DefaultPath\"),",
@@ -427,4 +419,4 @@ public void mapKeyComponentFileWithDefaultField() {
         .and()
         .generatesSources(generatedComponent);
   }
-}
\ No newline at end of file
+}
diff --git a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
index 19a2c29d0..f02a9fc1f 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
@@ -68,7 +68,7 @@ public void parentClass_noInjectedMembers() {
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -79,7 +79,7 @@ public void parentClass_noInjectedMembers() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.childProvider =",
         "        Child$$Factory.create((MembersInjector) MembersInjectors.noOp());",
         "  }",
@@ -158,7 +158,7 @@ public void parentClass_injectedMembersInSupertype() {
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -169,7 +169,7 @@ public void parentClass_injectedMembersInSupertype() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.parentMembersInjector = Parent$$MembersInjector.create(Dep$$Factory.create());",
         "    this.childMembersInjector = MembersInjectors.delegatingTo(parentMembersInjector);",
         "    this.childProvider = Child$$Factory.create(childMembersInjector);",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index 18b16575a..bfbf5b5a5 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -387,7 +387,7 @@ private String formatModuleErrorMessage(String msg) {
     JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProvideStringFactory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
@@ -433,7 +433,7 @@ private String formatModuleErrorMessage(String msg) {
     JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProvideStringFactory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
@@ -474,7 +474,7 @@ private String formatModuleErrorMessage(String msg) {
     JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProvideStringFactory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
@@ -555,8 +555,8 @@ private String formatModuleErrorMessage(String msg) {
         "TestModule$$ProvideObjectsFactory",
         "package test;",
         "",
-        "import dagger.Factory;",
         "import dagger.MembersInjector;",
+        "import dagger.internal.Factory;",
         "import java.util.List;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
@@ -627,7 +627,7 @@ private String formatModuleErrorMessage(String msg) {
     JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProvideStringFactory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import java.util.Collections;",
         "import java.util.Set;",
         "import javax.annotation.Generated;",
@@ -674,7 +674,7 @@ private String formatModuleErrorMessage(String msg) {
     JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProvideStringsFactory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import java.util.Set;",
         "import javax.annotation.Generated;",
         "",
@@ -914,7 +914,7 @@ public void genericSubclassedModule() {
         "test.ParentModule$$ProvidesListBFactory",
         "package test;", 
         "", 
-        "import dagger.Factory;", 
+        "import dagger.internal.Factory;",
         "import java.util.List;", 
         "import javax.annotation.Generated;", 
         "import javax.inject.Provider;", 
@@ -951,7 +951,7 @@ public void genericSubclassedModule() {
         "test.ChildNumberModule$$ProvideNumberFactory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
@@ -980,7 +980,7 @@ public void genericSubclassedModule() {
         "test.ChildIntegerModule$$ProvideIntegerFactory",
         "package test;",
         "",
-        "import dagger.Factory;",
+        "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
diff --git a/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java b/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
index a2b8e297f..a387f4221 100644
--- a/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
@@ -79,7 +79,7 @@
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -90,7 +90,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.foreign_Proxy.nonPublicClass1Provider =",
         "        NonPublicClass1$$Factory.create(NoDepClass$$Factory.create());",
         "    this.foreign_Proxy.nonPublicClass2Provider =",
@@ -205,7 +205,7 @@
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -216,7 +216,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.dMembersInjector = D$$MembersInjector.create(NoDepClass$$Factory.create());",
         "    this.foreign_Proxy.cMembersInjector =",
         "        C$$MembersInjector.create(dMembersInjector, NoDepClass$$Factory.create());",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
index a57b94749..381251de3 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -141,29 +141,23 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestClass_SimpleComponent implements SimpleComponent {",
-        "  private final AModule aModule;",
-        "  private final BModule bModule;",
-        "  private final Executor executor;",
         "  private Provider<B> bProvider;",
         "  private Producer<A> aProducer;",
         "",
         "  private Dagger_TestClass_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.aModule = builder.aModule;",
-        "    this.bModule = builder.bModule;",
-        "    this.executor = builder.executor;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
         "    return new Builder();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.bProvider = TestClass$BModule$$BFactory.create(",
-        "        bModule, TestClass$C$$Factory.create());",
+        "        builder.bModule, TestClass$C$$Factory.create());",
         "    this.aProducer = new TestClass$AModule$$AFactory(",
-        "        aModule, executor, Producers.producerFromProvider(bProvider));",
+        "        builder.aModule, builder.executor, Producers.producerFromProvider(bProvider));",
         "  }",
         "",
         "  @Override",
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
index 6ed0b5e5b..4def47a1e 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
@@ -76,14 +76,12 @@
       "",
       "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
       "public final class Dagger_PrimitiveComponent implements PrimitiveComponent {",
-      "  private final PrimitiveModule primitiveModule;",
       "  private Provider<Integer> primitiveIntProvider;",
       "  private Provider<PrimitiveInjectable> primitiveInjectableProvider;",
       "",
       "  private Dagger_PrimitiveComponent(Builder builder) {",
       "    assert builder != null;",
-      "    this.primitiveModule = builder.primitiveModule;",
-      "    initialize();",
+      "    initialize(builder);",
       "  }",
       "",
       "  public static Builder builder() {",
@@ -94,9 +92,9 @@
       "    return builder().build();",
       "  }",
       "",
-      "  private void initialize() {",
+      "  private void initialize(final Builder builder) {",
       "    this.primitiveIntProvider =",
-      "        PrimitiveModule$$PrimitiveIntFactory.create(primitiveModule);",
+      "        PrimitiveModule$$PrimitiveIntFactory.create(builder.primitiveModule);",
       "    this.primitiveInjectableProvider =",
       "        PrimitiveInjectable$$Factory.create(primitiveIntProvider);",
       "  }",
diff --git a/core/src/main/java/dagger/Factory.java b/core/src/main/java/dagger/internal/Factory.java
similarity index 98%
rename from core/src/main/java/dagger/Factory.java
rename to core/src/main/java/dagger/internal/Factory.java
index 74e2d0d12..3e2774cec 100644
--- a/core/src/main/java/dagger/Factory.java
+++ b/core/src/main/java/dagger/internal/Factory.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package dagger;
+package dagger.internal;
 
 import javax.inject.Inject;
 import javax.inject.Provider;
diff --git a/core/src/main/java/dagger/internal/InstanceFactory.java b/core/src/main/java/dagger/internal/InstanceFactory.java
index 7c4990b16..59b1fcb8b 100644
--- a/core/src/main/java/dagger/internal/InstanceFactory.java
+++ b/core/src/main/java/dagger/internal/InstanceFactory.java
@@ -15,8 +15,6 @@
  */
 package dagger.internal;
 
-import dagger.Factory;
-
 /**
  * A {@link Factory} implementation that returns a single instance for all invocations of
  * {@link #get}.
diff --git a/core/src/main/java/dagger/internal/MapFactory.java b/core/src/main/java/dagger/internal/MapFactory.java
index d3ff1f5c7..4dac1262b 100644
--- a/core/src/main/java/dagger/internal/MapFactory.java
+++ b/core/src/main/java/dagger/internal/MapFactory.java
@@ -15,7 +15,6 @@
  */
 package dagger.internal;
 
-import dagger.Factory;
 import java.util.Map;
 import java.util.Map.Entry;
 import javax.inject.Provider;
diff --git a/core/src/main/java/dagger/internal/MapProviderFactory.java b/core/src/main/java/dagger/internal/MapProviderFactory.java
index d85a4bd8f..00c0fd33a 100644
--- a/core/src/main/java/dagger/internal/MapProviderFactory.java
+++ b/core/src/main/java/dagger/internal/MapProviderFactory.java
@@ -15,7 +15,6 @@
  */
 package dagger.internal;
 
-import dagger.Factory;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import javax.inject.Provider;
diff --git a/core/src/main/java/dagger/internal/ScopedProvider.java b/core/src/main/java/dagger/internal/ScopedProvider.java
index 90a679a90..15917dd27 100644
--- a/core/src/main/java/dagger/internal/ScopedProvider.java
+++ b/core/src/main/java/dagger/internal/ScopedProvider.java
@@ -15,7 +15,6 @@
  */
 package dagger.internal;
 
-import dagger.Factory;
 import javax.inject.Provider;
 
 /**
diff --git a/core/src/main/java/dagger/internal/SetFactory.java b/core/src/main/java/dagger/internal/SetFactory.java
index 9ad6c9227..ecc43cb58 100644
--- a/core/src/main/java/dagger/internal/SetFactory.java
+++ b/core/src/main/java/dagger/internal/SetFactory.java
@@ -15,7 +15,6 @@
  */
 package dagger.internal;
 
-import dagger.Factory;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
diff --git a/core/src/test/java/dagger/internal/InstanceFactoryTest.java b/core/src/test/java/dagger/internal/InstanceFactoryTest.java
index dd8b1e2df..acaf20d79 100644
--- a/core/src/test/java/dagger/internal/InstanceFactoryTest.java
+++ b/core/src/test/java/dagger/internal/InstanceFactoryTest.java
@@ -15,7 +15,6 @@
  */
 package dagger.internal;
 
-import dagger.Factory;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
diff --git a/core/src/test/java/dagger/internal/MapProviderFactoryTest.java b/core/src/test/java/dagger/internal/MapProviderFactoryTest.java
index 337ebc112..b4496e926 100644
--- a/core/src/test/java/dagger/internal/MapProviderFactoryTest.java
+++ b/core/src/test/java/dagger/internal/MapProviderFactoryTest.java
@@ -15,7 +15,6 @@
  */
 package dagger.internal;
 
-import dagger.Factory;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
diff --git a/core/src/test/java/dagger/internal/ScopedProviderTest.java b/core/src/test/java/dagger/internal/ScopedProviderTest.java
index 46ec6a1bf..84b02c510 100644
--- a/core/src/test/java/dagger/internal/ScopedProviderTest.java
+++ b/core/src/test/java/dagger/internal/ScopedProviderTest.java
@@ -15,7 +15,6 @@
  */
 package dagger.internal;
 
-import dagger.Factory;
 import javax.inject.Provider;
 import org.junit.Ignore;
 import org.junit.Test;
diff --git a/core/src/test/java/dagger/internal/SetFactoryTest.java b/core/src/test/java/dagger/internal/SetFactoryTest.java
index 5f3edc7e3..fcd6f6efb 100644
--- a/core/src/test/java/dagger/internal/SetFactoryTest.java
+++ b/core/src/test/java/dagger/internal/SetFactoryTest.java
@@ -18,7 +18,6 @@
 import com.google.common.collect.ContiguousSet;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Range;
-import dagger.Factory;
 import java.util.LinkedHashSet;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
diff --git a/producers/src/test/java/dagger/producers/internal/SetProducerTest.java b/producers/src/test/java/dagger/producers/internal/SetProducerTest.java
index 0aafd77de..1f8ff7c3a 100644
--- a/producers/src/test/java/dagger/producers/internal/SetProducerTest.java
+++ b/producers/src/test/java/dagger/producers/internal/SetProducerTest.java
@@ -36,15 +36,15 @@
 public class SetProducerTest {
   @Test public void success() throws Exception {
     Producer<Set<Integer>> producer = SetProducer.create(
-        immediateProducer((Set<Integer>) ImmutableSet.of(1, 2)),
-        immediateProducer((Set<Integer>) ImmutableSet.of(5, 7)));
+        new ImmediateProducer<Set<Integer>>(ImmutableSet.of(1, 2)),
+        new ImmediateProducer<Set<Integer>>(ImmutableSet.of(5, 7)));
     assertThat(producer.get().get()).containsExactly(1, 2, 5, 7);
   }
 
   @Test public void delegateSetNpe() throws Exception {
     Producer<Set<Integer>> producer = SetProducer.create(
-        immediateProducer((Set<Integer>) ImmutableSet.of(1, 2)),
-        immediateProducer((Set<Integer>) null));
+        new ImmediateProducer<Set<Integer>>(ImmutableSet.of(1, 2)),
+        new ImmediateProducer<Set<Integer>>(null));
     ListenableFuture<Set<Integer>> future = producer.get();
     try {
       future.get();
@@ -56,8 +56,9 @@
 
   @Test public void delegateElementNpe() throws Exception {
     Producer<Set<Integer>> producer = SetProducer.create(
-        immediateProducer((Set<Integer>) ImmutableSet.of(1, 2)),
-        immediateProducer(Collections.singleton((Integer) null)));
+        new ImmediateProducer<Set<Integer>>(ImmutableSet.of(1, 2)),
+        new ImmediateProducer<Set<Integer>>(
+            Collections.<Integer>singleton(null)));
     ListenableFuture<Set<Integer>> future = producer.get();
     try {
       future.get();
@@ -78,8 +79,4 @@
       return Futures.immediateFuture(value);
     }
   }
-
-  private static <T> Producer<T> immediateProducer(T value) {
-    return new ImmediateProducer<T>(value);
-  }
 }
