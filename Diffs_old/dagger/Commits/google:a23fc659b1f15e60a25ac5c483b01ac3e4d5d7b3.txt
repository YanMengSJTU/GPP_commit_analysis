diff --git a/java/dagger/producers/internal/Producers.java b/java/dagger/producers/internal/Producers.java
index 2f3a68c4a..029bcb51a 100644
--- a/java/dagger/producers/internal/Producers.java
+++ b/java/dagger/producers/internal/Producers.java
@@ -123,9 +123,9 @@
    */
   public static <T> Producer<T> producerFromProvider(final Provider<T> provider) {
     checkNotNull(provider);
-    return new Producer<T>() {
+    return new AbstractProducer<T>() {
       @Override
-      public ListenableFuture<T> get() {
+      protected ListenableFuture<T> compute() {
         return Futures.immediateFuture(provider.get());
       }
     };
diff --git a/javatests/dagger/producers/internal/ProducersTest.java b/javatests/dagger/producers/internal/ProducersTest.java
index 8c4a256b2..910b73ca0 100644
--- a/javatests/dagger/producers/internal/ProducersTest.java
+++ b/javatests/dagger/producers/internal/ProducersTest.java
@@ -124,7 +124,7 @@ public void allAsSet_failure() throws Exception {
     }
   }
 
-  @Test public void producerFromProvider_doesntCache() throws Exception {
+  @Test public void producerFromProvider() throws Exception {
     Producer<Integer> producer = Producers.producerFromProvider(new Provider<Integer>() {
       int i = 0;
 
@@ -133,7 +133,7 @@ public void allAsSet_failure() throws Exception {
       }
     });
     assertThat(producer.get().get()).isEqualTo(0);
-    assertThat(producer.get().get()).isEqualTo(1);
-    assertThat(producer.get().get()).isEqualTo(2);
+    assertThat(producer.get().get()).isEqualTo(0);
+    assertThat(producer.get().get()).isEqualTo(0);
   }
 }
