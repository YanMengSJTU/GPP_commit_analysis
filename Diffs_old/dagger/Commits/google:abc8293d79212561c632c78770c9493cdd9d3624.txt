diff --git a/java/dagger/internal/SingleCheck.java b/java/dagger/internal/SingleCheck.java
index 4c8b6c220..d94a32353 100644
--- a/java/dagger/internal/SingleCheck.java
+++ b/java/dagger/internal/SingleCheck.java
@@ -39,18 +39,23 @@ private SingleCheck(Provider<T> provider) {
   @SuppressWarnings("unchecked") // cast only happens when result comes from the delegate provider
   @Override
   public T get() {
-    // provider is volatile and might become null after the check to instance == UNINITIALIZED, so
-    // retrieve the provider first, which should not be null if instance is UNINITIALIZED.
-    // This relies upon instance also being volatile so that the reads and writes of both variables
-    // cannot be reordered.
-    Provider<T> providerReference = provider;
-    if (instance == UNINITIALIZED) {
-      instance = providerReference.get();
-      // Null out the reference to the provider. We are never going to need it again, so we can make
-      // it eligible for GC.
-      provider = null;
+    Object local = instance;
+    if (local == UNINITIALIZED) {
+      // provider is volatile and might become null after the check, so retrieve the provider first
+      Provider<T> providerReference = provider;
+      if (providerReference == null) {
+        // The provider was null, so the instance must already be set
+        local = instance;
+      } else {
+        local = providerReference.get();
+        instance = local;
+
+        // Null out the reference to the provider. We are never going to need it again, so we can
+        // make it eligible for GC.
+        provider = null;
+      }
     }
-    return (T) instance;
+    return (T) local;
   }
 
   /** Returns a {@link Provider} that caches the value from the given delegate provider. */
diff --git a/java/dagger/internal/codegen/SingleCheckedMethodImplementation.java b/java/dagger/internal/codegen/SingleCheckedMethodImplementation.java
index a84f979c9..dc32cd199 100644
--- a/java/dagger/internal/codegen/SingleCheckedMethodImplementation.java
+++ b/java/dagger/internal/codegen/SingleCheckedMethodImplementation.java
@@ -57,23 +57,23 @@
 
   @Override
   CodeBlock body() {
-    CodeBlock.Builder builder = CodeBlock.builder();
-    if (isNullable()) {
-      builder.beginControlFlow("if ($N instanceof $T)", field.get(), MemoizedSentinel.class);
-    } else {
-      builder.beginControlFlow("if ($N == null)", field.get());
-    }
+    String fieldExpression = field.get().name.equals("local") ? "this.local" : field.get().name;
 
-    builder
-        .addStatement("$N = $L", field.get(), simpleBindingExpression())
-        .endControlFlow();
+    CodeBlock.Builder builder = CodeBlock.builder()
+        .addStatement("Object local = $N", fieldExpression);
 
     if (isNullable()) {
-      builder.addStatement("return ($T) $N", returnType(), field.get());
+      builder.beginControlFlow("if (local instanceof $T)", MemoizedSentinel.class);
     } else {
-      builder.addStatement("return $N", field.get());
+      builder.beginControlFlow("if (local == null)");
     }
-    return builder.build();
+
+    return builder
+        .addStatement("local = $L", simpleBindingExpression())
+        .addStatement("$N = ($T) local", fieldExpression, returnType())
+        .endControlFlow()
+        .addStatement("return ($T) local", returnType())
+        .build();
   }
 
   private FieldSpec createField() {
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index 038d33cb6..b96b7d86a 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -327,10 +327,12 @@ public void componentWithInvalidModule() {
                 "    return SomeInjectableType_Factory.create();")
             .addLinesIn(
                 EXPERIMENTAL_ANDROID_MODE, //
-                "    if (someInjectableTypeProvider == null) {",
-                "      someInjectableTypeProvider = new SwitchingProvider<>(0);",
+                "    Object local = someInjectableTypeProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(0);",
+                "      someInjectableTypeProvider = (Provider<SomeInjectableType>) local;",
                 "    }",
-                "    return someInjectableTypeProvider;")
+                "    return (Provider<SomeInjectableType>) local;")
             .addLines(
                 "  }",
                 "",
@@ -455,11 +457,16 @@ public void componentWithInvalidModule() {
                 "  public Provider<SomeInjectableType> someInjectableTypeProvider() {")
             .addLinesIn(
                 EXPERIMENTAL_ANDROID_MODE, //
-                "    if (someInjectableTypeProvider == null) {",
-                "      someInjectableTypeProvider = new SwitchingProvider<>(0);",
-                "    }")
-            .addLines(
-                "    return someInjectableTypeProvider;",
+                "    Object local = someInjectableTypeProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(0);",
+                "      someInjectableTypeProvider = (Provider<SomeInjectableType>) local;",
+                "    }",
+                "    return (Provider<SomeInjectableType>) local;")
+            .addLinesIn(
+                DEFAULT_MODE, //
+                "    return someInjectableTypeProvider;")
+            .addLines( //
                 "  }")
             .addLinesIn(
                 EXPERIMENTAL_ANDROID_MODE,
@@ -1303,10 +1310,12 @@ public void testDefaultPackage() {
                 "  private AComponent aComponent;",
                 "",
                 "  private Provider<A> getAProvider() {",
-                "    if (aProvider == null) {",
-                "      aProvider = new SwitchingProvider<>(0);",
+                "    Object local = aProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(0);",
+                "      aProvider = (Provider<A>) local;",
                 "    }",
-                "    return aProvider;",
+                "    return (Provider<A>) local;",
                 "  }")
             .addLines(
                 "  @SuppressWarnings(\"unchecked\")",
diff --git a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
index 921365fda..8840885a0 100644
--- a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
@@ -195,10 +195,12 @@ public void toDoubleCheck() {
                     "  }",
                     "",
                     "  private ReusableScoped getReusableScoped() {",
-                    "    if (reusableScoped == null) {",
-                    "      reusableScoped = new ReusableScoped();",
+                    "    Object local = reusableScoped;",
+                    "    if (local == null) {",
+                    "      local = new ReusableScoped();",
+                    "      reusableScoped = (ReusableScoped) local;",
                     "    }",
-                    "    return reusableScoped;",
+                    "    return (ReusableScoped) local;",
                     "  }",
                     "")
                 .addLines(
@@ -290,10 +292,12 @@ public void toSingleCheck() {
                     "  }",
                     "",
                     "  private ReusableScoped getReusableScoped() {",
-                    "    if (reusableScoped == null) {",
-                    "      reusableScoped = new ReusableScoped();",
+                    "    Object local = reusableScoped;",
+                    "    if (local == null) {",
+                    "      local = new ReusableScoped();",
+                    "      reusableScoped = (ReusableScoped) local;",
                     "    }",
-                    "    return reusableScoped;",
+                    "    return (ReusableScoped) local;",
                     "  }",
                     "")
                 .addLines(
@@ -383,17 +387,21 @@ public void toReleasableCheck() {
                     "  }",
                     "",
                     "  private ReusableScoped getReusableScoped() {",
-                    "    if (reusableScoped == null) {",
-                    "      reusableScoped = new ReusableScoped();",
+                    "    Object local = reusableScoped;",
+                    "    if (local == null) {",
+                    "      local = new ReusableScoped();",
+                    "      reusableScoped = (ReusableScoped) local;",
                     "    }",
-                    "    return reusableScoped;",
+                    "    return (ReusableScoped) local;",
                     "  }",
                     "",
                     "  private Provider<Unscoped> getUnscopedProvider() {",
-                    "    if (unscopedProvider == null) {",
-                    "      unscopedProvider = new SwitchingProvider<>(0);",
+                    "    Object local = unscopedProvider;",
+                    "    if (local == null) {",
+                    "      local = new SwitchingProvider<>(0);",
+                    "      unscopedProvider = (Provider<Unscoped>) local;",
                     "    }",
-                    "    return unscopedProvider;",
+                    "    return (Provider<Unscoped>) local;",
                     "  }",
                     "")
                 .addLines(
@@ -498,10 +506,12 @@ public void toUnscoped() {
                     "  }",
                     "",
                     "  private ReusableScoped getReusableScoped() {",
-                    "    if (reusableScoped == null) {",
-                    "      reusableScoped = new ReusableScoped();",
+                    "    Object local = reusableScoped;",
+                    "    if (local == null) {",
+                    "      local = new ReusableScoped();",
+                    "      reusableScoped = (ReusableScoped) local;",
                     "    }",
-                    "    return reusableScoped;",
+                    "    return (ReusableScoped) local;",
                     "  }",
                     "")
                 .addLines(
@@ -807,18 +817,22 @@ public void castedToRawType() {
                     "",
                     "  @Override",
                     "  public Provider<CharSequence> charSequence() {",
-                    "    if (charSequenceProvider == null) {",
-                    "      charSequenceProvider = new SwitchingProvider<>(0);",
+                    "    Object local = charSequenceProvider;",
+                    "    if (local == null) {",
+                    "      local = new SwitchingProvider<>(0);",
+                    "      charSequenceProvider = (Provider<CharSequence>) local;",
                     "    }",
-                    "    return charSequenceProvider;",
+                    "    return (Provider<CharSequence>) local;",
                     "  }",
                     "",
                     "  @Override",
                     "  public Provider<String> namedString() {",
-                    "    if (namedStringProvider == null) {",
-                    "      namedStringProvider = new SwitchingProvider<>(1);",
+                    "    Object local = namedStringProvider;",
+                    "    if (local == null) {",
+                    "      local = new SwitchingProvider<>(1);",
+                    "      namedStringProvider = (Provider<String>) local;",
                     "    }",
-                    "    return namedStringProvider;",
+                    "    return (Provider<String>) local;",
                     "  }",
                     "",
                     "  private final class SwitchingProvider<T> implements Provider<T> {",
@@ -909,18 +923,22 @@ public void doubleBinds() {
                     "",
                     "  @Override",
                     "  public Provider<CharSequence> charSequence() {",
-                    "    if (charSequenceProvider == null) {",
-                    "      charSequenceProvider = new SwitchingProvider<>(0);",
+                    "    Object local = charSequenceProvider;",
+                    "    if (local == null) {",
+                    "      local = new SwitchingProvider<>(0);",
+                    "      charSequenceProvider = (Provider<CharSequence>) local;",
                     "    }",
-                    "    return charSequenceProvider;",
+                    "    return (Provider<CharSequence>) local;",
                     "  }",
                     "",
                     "  @Override",
                     "  public Provider<Object> object() {",
-                    "    if (objectProvider == null) {",
-                    "      objectProvider = new SwitchingProvider<>(1);",
+                    "    Object local = objectProvider;",
+                    "    if (local == null) {",
+                    "      local = new SwitchingProvider<>(1);",
+                    "      objectProvider = (Provider<Object>) local;",
                     "    }",
-                    "    return objectProvider;",
+                    "    return (Provider<Object>) local;",
                     "  }",
                     "",
                     "  private final class SwitchingProvider<T> implements Provider<T> {",
@@ -1011,10 +1029,12 @@ public void inlineFactoryOfInacessibleType() {
                     "",
                     "  @Override",
                     "  public Provider<Supertype> supertypeProvider() {",
-                    "    if (toProvider == null) {",
-                    "      toProvider = new SwitchingProvider<>(0);",
+                    "    Object local = toProvider;",
+                    "    if (local == null) {",
+                    "      local = new SwitchingProvider<>(0);",
+                    "      toProvider = (Provider<Supertype>) local;",
                     "    }",
-                    "    return toProvider;",
+                    "    return (Provider<Supertype>) local;",
                     "  }",
                     "",
                     "  private final class SwitchingProvider<T> implements Provider<T> {",
@@ -1109,10 +1129,12 @@ public void providerWhenBindsScopeGreaterThanDependencyScope() {
                     "  private volatile String string;",
                     "",
                     "  private String getString() {",
-                    "    if (string == null) {",
-                    "      string = TestModule_ProvideStringFactory.proxyProvideString();",
+                    "    Object local = string;",
+                    "    if (local == null) {",
+                    "      local = TestModule_ProvideStringFactory.proxyProvideString();",
+                    "      string = (String) local;",
                     "    }",
-                    "    return string;",
+                    "    return (String) local;",
                     "  }",
                     "",
                     "  private Object getObject2() {",
@@ -1130,10 +1152,12 @@ public void providerWhenBindsScopeGreaterThanDependencyScope() {
                     "",
                     "  @Override",
                     "  public Provider<Object> getObject() {",
-                    "    if (bindStringProvider == null) {",
-                    "      bindStringProvider = new SwitchingProvider<>(0);",
+                    "    Object local = bindStringProvider;",
+                    "    if (local == null) {",
+                    "      local = new SwitchingProvider<>(0);",
+                    "      bindStringProvider = (Provider<Object>) local;",
                     "    }",
-                    "    return bindStringProvider;",
+                    "    return (Provider<Object>) local;",
                     "  }",
                     "",
                     "  private final class SwitchingProvider<T> implements Provider<T> {",
diff --git a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
index ae8729300..c3ae7ad7b 100644
--- a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
+++ b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
@@ -217,10 +217,12 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 "  }",
                 "",
                 "  private Provider<DependsOnScoped> getDependsOnScopedProvider() {",
-                "    if (dependsOnScopedProvider == null) {",
-                "      dependsOnScopedProvider = new SwitchingProvider<>(0);",
+                "    Object local = dependsOnScopedProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(0);",
+                "      dependsOnScopedProvider = (Provider<DependsOnScoped>) local;",
                 "    }",
-                "    return dependsOnScopedProvider;",
+                "    return (Provider<DependsOnScoped>) local;",
                 "  }",
                 "",
                 "  @Override",
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index a186b6d71..77baa5de9 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -141,17 +141,21 @@ public void mapBindingsWithEnumKey() {
                 "  private MapModuleTwo mapModuleTwo;",
                 "",
                 "  private Provider<Handler> getMapOfPathEnumAndProviderOfHandlerProvider() {",
-                "    if (provideAdminHandlerProvider == null) {",
-                "      provideAdminHandlerProvider = new SwitchingProvider<>(1);",
+                "    Object local = provideAdminHandlerProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(1);",
+                "      provideAdminHandlerProvider = (Provider<Handler>) local;",
                 "    }",
-                "    return provideAdminHandlerProvider;",
+                "    return (Provider<Handler>) local;",
                 "  }",
                 "",
                 "  private Provider<Handler> getMapOfPathEnumAndProviderOfHandlerProvider2() {",
-                "    if (provideLoginHandlerProvider == null) {",
-                "      provideLoginHandlerProvider = new SwitchingProvider<>(2);",
+                "    Object local = provideLoginHandlerProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(2);",
+                "      provideLoginHandlerProvider = (Provider<Handler>) local;",
                 "    }",
-                "    return provideLoginHandlerProvider;",
+                "    return (Provider<Handler>) local;",
                 "  }",
                 "",
                 "  private Map<PathEnum, Provider<Handler>>",
@@ -163,10 +167,13 @@ public void mapBindingsWithEnumKey() {
                 "",
                 "  @Override",
                 "  public Provider<Map<PathEnum, Provider<Handler>>> dispatcher() {",
-                "    if (mapOfPathEnumAndProviderOfHandlerProvider == null) {",
-                "      mapOfPathEnumAndProviderOfHandlerProvider = new SwitchingProvider<>(0);",
+                "    Object local = mapOfPathEnumAndProviderOfHandlerProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(0);",
+                "      mapOfPathEnumAndProviderOfHandlerProvider =",
+                "          (Provider<Map<PathEnum, Provider<Handler>>>) local;",
                 "    }",
-                "    return mapOfPathEnumAndProviderOfHandlerProvider;",
+                "    return (Provider<Map<PathEnum, Provider<Handler>>>) local;",
                 "  }",
                 "",
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
@@ -539,17 +546,21 @@ public void mapBindingsWithStringKey() {
                 "  private MapModuleTwo mapModuleTwo;",
                 "",
                 "  private Provider<Handler> getMapOfStringAndProviderOfHandlerProvider() {",
-                "    if (provideAdminHandlerProvider == null) {",
-                "      provideAdminHandlerProvider = new SwitchingProvider<>(1);",
+                "    Object local = provideAdminHandlerProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(1);",
+                "      provideAdminHandlerProvider = (Provider<Handler>) local;",
                 "    }",
-                "    return provideAdminHandlerProvider;",
+                "    return (Provider<Handler>) local;",
                 "  }",
                 "",
                 "  private Provider<Handler> getMapOfStringAndProviderOfHandlerProvider2() {",
-                "    if (provideLoginHandlerProvider == null) {",
-                "      provideLoginHandlerProvider = new SwitchingProvider<>(2);",
+                "    Object local = provideLoginHandlerProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(2);",
+                "      provideLoginHandlerProvider = (Provider<Handler>) local;",
                 "    }",
-                "    return provideLoginHandlerProvider;",
+                "    return (Provider<Handler>) local;",
                 "  }",
                 "",
                 "  private Map<String, Provider<Handler>>",
@@ -561,10 +572,13 @@ public void mapBindingsWithStringKey() {
                 "",
                 "  @Override",
                 "  public Provider<Map<String, Provider<Handler>>> dispatcher() {",
-                "    if (mapOfStringAndProviderOfHandlerProvider == null) {",
-                "      mapOfStringAndProviderOfHandlerProvider = new SwitchingProvider<>(0);",
+                "    Object local = mapOfStringAndProviderOfHandlerProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(0);",
+                "      mapOfStringAndProviderOfHandlerProvider =",
+                "          (Provider<Map<String, Provider<Handler>>>) local;",
                 "    }",
-                "    return mapOfStringAndProviderOfHandlerProvider;",
+                "    return (Provider<Map<String, Provider<Handler>>>) local;",
                 "  }",
                 "",
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
@@ -731,18 +745,22 @@ public void mapBindingsWithWrappedKey() {
                 "",
                 "  private Provider<Handler>",
                 "        getMapOfWrappedClassKeyAndProviderOfHandlerProvider() {",
-                "    if (provideAdminHandlerProvider == null) {",
-                "      provideAdminHandlerProvider = new SwitchingProvider<>(1);",
-                "    }",
-                "    return provideAdminHandlerProvider;",
+                "        Object local = provideAdminHandlerProvider;",
+                "        if (local == null) {",
+                "          local = new SwitchingProvider<>(1);",
+                "          provideAdminHandlerProvider = (Provider<Handler>) local;",
+                "        }",
+                "        return (Provider<Handler>) local;",
                 "  }",
                 "",
                 "  private Provider<Handler>",
                 "        getMapOfWrappedClassKeyAndProviderOfHandlerProvider2() {",
-                "    if (provideLoginHandlerProvider == null) {",
-                "      provideLoginHandlerProvider = new SwitchingProvider<>(2);",
-                "    }",
-                "    return provideLoginHandlerProvider;",
+                "        Object local = provideLoginHandlerProvider;",
+                "        if (local == null) {",
+                "          local = new SwitchingProvider<>(2);",
+                "          provideLoginHandlerProvider = (Provider<Handler>) local;",
+                "        }",
+                "        return (Provider<Handler>) local;",
                 "  }",
                 "",
                 "  private Map<WrappedClassKey, Provider<Handler>>",
@@ -762,11 +780,13 @@ public void mapBindingsWithWrappedKey() {
                 "",
                 "  @Override",
                 "  public Provider<Map<WrappedClassKey, Provider<Handler>>> dispatcher() {",
-                "    if (mapOfWrappedClassKeyAndProviderOfHandlerProvider == null) {",
+                "    Object local = mapOfWrappedClassKeyAndProviderOfHandlerProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(0);",
                 "      mapOfWrappedClassKeyAndProviderOfHandlerProvider =",
-                "          new SwitchingProvider<>(0);",
+                "          (Provider<Map<WrappedClassKey, Provider<Handler>>>) local;",
                 "    }",
-                "    return mapOfWrappedClassKeyAndProviderOfHandlerProvider;",
+                "    return (Provider<Map<WrappedClassKey, Provider<Handler>>>) local;",
                 "  }",
                 "",
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
@@ -945,10 +965,12 @@ public void mapBindingsWithNonProviderValue() {
                 "",
                 "  @Override",
                 "  public Provider<Map<PathEnum, Handler>> dispatcher() {",
-                "    if (mapOfPathEnumAndHandlerProvider == null) {",
-                "      mapOfPathEnumAndHandlerProvider = new SwitchingProvider<>(0);",
+                "    Object local = mapOfPathEnumAndHandlerProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(0);",
+                "      mapOfPathEnumAndHandlerProvider = (Provider<Map<PathEnum, Handler>>) local;",
                 "    }",
-                "    return mapOfPathEnumAndHandlerProvider;",
+                "    return (Provider<Map<PathEnum, Handler>>) local;",
                 "  }",
                 "",
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
index ea4321a91..86cab871d 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
@@ -106,31 +106,39 @@ public void mapBindings() {
                 "  private volatile Provider<Long> provideLong2Provider;",
                 "",
                 "  private Provider<Integer> getMapOfIntegerAndProviderOfIntegerProvider() {",
-                "    if (provideIntProvider == null) {",
-                "      provideIntProvider = new SwitchingProvider<>(0);",
+                "    Object local = provideIntProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(0);",
+                "      provideIntProvider = (Provider<Integer>) local;",
                 "    }",
-                "    return provideIntProvider;",
+                "    return (Provider<Integer>) local;",
                 "  }",
                 "",
                 "  private Provider<Long> getMapOfLongAndProviderOfLongProvider() {",
-                "    if (provideLong0Provider == null) {",
-                "      provideLong0Provider = new SwitchingProvider<>(1);",
+                "    Object local = provideLong0Provider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(1);",
+                "      provideLong0Provider = (Provider<Long>) local;",
                 "    }",
-                "    return provideLong0Provider;",
+                "    return (Provider<Long>) local;",
                 "  }",
                 "",
                 "  private Provider<Long> getMapOfLongAndProviderOfLongProvider2() {",
-                "    if (provideLong1Provider == null) {",
-                "      provideLong1Provider = new SwitchingProvider<>(2);",
+                "    Object local = provideLong1Provider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(2);",
+                "      provideLong1Provider = (Provider<Long>) local;",
                 "    }",
-                "    return provideLong1Provider;",
+                "    return (Provider<Long>) local;",
                 "  }",
                 "",
                 "  private Provider<Long> getMapOfLongAndProviderOfLongProvider3() {",
-                "    if (provideLong2Provider == null) {",
-                "      provideLong2Provider = new SwitchingProvider<>(3);",
+                "    Object local = provideLong2Provider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(3);",
+                "      provideLong2Provider = (Provider<Long>) local;",
                 "    }",
-                "    return provideLong2Provider;",
+                "    return (Provider<Long>) local;",
                 "  }")
             .addLines(
                 "  @Override",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
index b66dae78e..672c074e4 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
@@ -137,31 +137,39 @@ public void mapBindings() {
                 "  private volatile Provider<Long> provideLong2Provider;",
                 "",
                 "  private Provider<Integer> getMapOfIntegerAndProviderOfIntegerProvider() {",
-                "    if (provideIntProvider == null) {",
-                "      provideIntProvider = new SwitchingProvider<>(0);",
+                "    Object local = provideIntProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(0);",
+                "      provideIntProvider = (Provider<Integer>) local;",
                 "    }",
-                "    return provideIntProvider;",
+                "    return (Provider<Integer>) local;",
                 "  }",
                 "",
                 "  private Provider<Long> getMapOfLongAndProviderOfLongProvider() {",
-                "    if (provideLong0Provider == null) {",
-                "      provideLong0Provider = new SwitchingProvider<>(1);",
+                "    Object local = provideLong0Provider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(1);",
+                "      provideLong0Provider = (Provider<Long>) local;",
                 "    }",
-                "    return provideLong0Provider;",
+                "    return (Provider<Long>) local;",
                 "  }",
                 "",
                 "  private Provider<Long> getMapOfLongAndProviderOfLongProvider2() {",
-                "    if (provideLong1Provider == null) {",
-                "      provideLong1Provider = new SwitchingProvider<>(2);",
+                "    Object local = provideLong1Provider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(2);",
+                "      provideLong1Provider = (Provider<Long>) local;",
                 "    }",
-                "    return provideLong1Provider;",
+                "    return (Provider<Long>) local;",
                 "  }",
                 "",
                 "  private Provider<Long> getMapOfLongAndProviderOfLongProvider3() {",
-                "    if (provideLong2Provider == null) {",
-                "      provideLong2Provider = new SwitchingProvider<>(3);",
+                "    Object local = provideLong2Provider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(3);",
+                "      provideLong2Provider = (Provider<Long>) local;",
                 "    }",
-                "    return provideLong2Provider;",
+                "    return (Provider<Long>) local;",
                 "  }")
             .addLines(
                 "  @Override",
@@ -229,24 +237,30 @@ public void mapBindings() {
                 "    private SubImpl() {}",
                 "",
                 "    private Provider<Long> getMapOfLongAndProviderOfLongProvider() {",
-                "    if (provideLong3Provider == null) {",
-                "      provideLong3Provider = new SwitchingProvider<>(0);",
-                "    }",
-                "    return provideLong3Provider;",
+                "      Object local = provideLong3Provider;",
+                "      if (local == null) {",
+                "        local = new SwitchingProvider<>(0);",
+                "        provideLong3Provider = (Provider<Long>) local;",
+                "      }",
+                "      return (Provider<Long>) local;",
                 "    }",
                 "",
                 "    private Provider<Long> getMapOfLongAndProviderOfLongProvider2() {",
-                "    if (provideLong4Provider == null) {",
-                "      provideLong4Provider = new SwitchingProvider<>(1);",
-                "    }",
-                "    return provideLong4Provider;",
+                "      Object local = provideLong4Provider;",
+                "      if (local == null) {",
+                "        local = new SwitchingProvider<>(1);",
+                "        provideLong4Provider = (Provider<Long>) local;",
+                "      }",
+                "      return (Provider<Long>) local;",
                 "    }",
                 "",
                 "    private Provider<Long> getMapOfLongAndProviderOfLongProvider3() {",
-                "    if (provideLong5Provider == null) {",
-                "      provideLong5Provider = new SwitchingProvider<>(2);",
-                "    }",
-                "    return provideLong5Provider;",
+                "      Object local = provideLong5Provider;",
+                "      if (local == null) {",
+                "        local = new SwitchingProvider<>(2);",
+                "        provideLong5Provider = (Provider<Long>) local;",
+                "      }",
+                "      return (Provider<Long>) local;",
                 "    }")
             .addLines(
                 "    @Override",
diff --git a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
index c1f70fe1f..136e45063 100644
--- a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
@@ -121,10 +121,12 @@ public void inlinedOptionalBindings() {
                 "  private volatile Provider<Maybe> provideMaybeProvider;",
                 "",
                 "  private Provider<Maybe> getMaybeProvider() {",
-                "    if (provideMaybeProvider == null) {",
-                "      provideMaybeProvider = new SwitchingProvider<>(0);",
+                "    Object local = provideMaybeProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(0);",
+                "      provideMaybeProvider = (Provider<Maybe>) local;",
                 "    }",
-                "    return provideMaybeProvider;",
+                "    return (Provider<Maybe>) local;",
                 "  }")
             .addLines(
                 "  @Override",
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index ab260fbde..514095ef1 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -284,18 +284,23 @@ public void simpleComponent() {
                 "  }",
                 "",
                 "  private Provider<Executor> getProductionImplementationExecutorProvider() {",
-                "    if (executorProvider == null) {",
-                "      executorProvider = new SwitchingProvider<>(0);",
+                "    Object local = executorProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(0);",
+                "      executorProvider = (Provider<Executor>) local;",
                 "    }",
-                "    return executorProvider;",
+                "    return (Provider<Executor>) local;",
                 "  }",
                 "",
                 "  private Provider<Set<ProductionComponentMonitor.Factory>>",
                 "      getSetOfFactoryProvider() {",
-                "    if (setOfFactoryProvider == null) {",
-                "      setOfFactoryProvider = new SwitchingProvider<>(2);",
-                "    }",
-                "    return setOfFactoryProvider;",
+                "      Object local = setOfFactoryProvider;",
+                "      if (local == null) {",
+                "        local = new SwitchingProvider<>(2);",
+                "        setOfFactoryProvider =",
+                "            (Provider<Set<ProductionComponentMonitor.Factory>>) local;",
+                "      }",
+                "      return (Provider<Set<ProductionComponentMonitor.Factory>>) local;",
                 "  }",
                 "",
                 "  private ProductionComponentMonitor getProductionComponentMonitor() {",
@@ -317,10 +322,12 @@ public void simpleComponent() {
                 "",
                 "  private Provider<ProductionComponentMonitor>",
                 "      getProductionComponentMonitorProvider() {",
-                "    if (monitorProvider == null) {",
-                "      monitorProvider = new SwitchingProvider<>(1);",
-                "    }",
-                "    return monitorProvider;",
+                "      Object local = monitorProvider;",
+                "      if (local == null) {",
+                "        local = new SwitchingProvider<>(1);",
+                "        monitorProvider = (Provider<ProductionComponentMonitor>) local;",
+                "      }",
+                "      return (Provider<ProductionComponentMonitor>) local;",
                 "  }",
                 "",
                 "  private TestClass.B getB() {",
@@ -328,10 +335,12 @@ public void simpleComponent() {
                 "  }",
                 "",
                 "  private Provider<TestClass.B> getBProvider() {",
-                "    if (bProvider == null) {",
-                "      bProvider = new SwitchingProvider<>(3);",
+                "    Object local = bProvider;",
+                "    if (local == null) {",
+                "      local = new SwitchingProvider<>(3);",
+                "      bProvider = (Provider<TestClass.B>) local;",
                 "    }",
-                "    return bProvider;",
+                "    return (Provider<TestClass.B>) local;",
                 "  }",
                 "",
                 "  @SuppressWarnings(\"unchecked\")",
