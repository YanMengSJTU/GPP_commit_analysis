diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectorGenerator.java b/compiler/src/main/java/dagger/internal/codegen/InjectorGenerator.java
new file mode 100644
index 000000000..edcc0b69c
--- /dev/null
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectorGenerator.java
@@ -0,0 +1,35 @@
+package dagger.internal.codegen;
+
+import com.google.common.base.Optional;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.TypeSpec;
+
+import javax.annotation.processing.Filer;
+import javax.lang.model.element.Element;
+import javax.lang.model.util.Elements;
+
+/**
+ * Created by Andy on 05.05.2017.
+ */
+public class InjectorGenerator extends SourceFileGenerator<DI>{
+
+    InjectorGenerator(Filer filer, Elements elements) {
+        super(filer, elements);
+    }
+
+    @Override
+    ClassName nameGeneratedType(DI input) {
+        return input.getClassName();
+    }
+
+    @Override
+    Optional<? extends Element> getElementForErrorReporting(DI input) {
+        return Optional.of(input.getInjector());
+    }
+
+    @Override
+    Optional<TypeSpec.Builder> write(ClassName generatedTypeName, DI input) {
+        return null;
+    }
+
+}
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectorProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/InjectorProcessingStep.java
new file mode 100644
index 000000000..b78779497
--- /dev/null
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectorProcessingStep.java
@@ -0,0 +1,30 @@
+package dagger.internal.codegen;
+
+import com.google.auto.common.BasicAnnotationProcessor;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.SetMultimap;
+import dagger.Injector;
+import dagger.ProvidesComponent;
+
+import javax.annotation.processing.Messager;
+import javax.lang.model.element.Element;
+import java.lang.annotation.Annotation;
+import java.util.Set;
+
+/**
+ * Created by Andy on 05.05.2017.
+ */
+public class InjectorProcessingStep implements BasicAnnotationProcessor.ProcessingStep {
+    public InjectorProcessingStep(Messager messager, InjectorGenerator injectorGenerator, ComponentDescriptor.Kind component, BindingGraph.Factory bindingGraphFactory, ComponentDescriptor.Factory componentDescriptorFactory) {
+    }
+
+    @Override
+    public Set<? extends Class<? extends Annotation>> annotations() {
+        return ImmutableSet.of(ProvidesComponent.class, Injector.class);
+    }
+
+    @Override
+    public Set<Element> process(SetMultimap<Class<? extends Annotation>, Element> setMultimap) {
+        return null;
+    }
+}
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectorType.java b/compiler/src/main/java/dagger/internal/codegen/InjectorType.java
new file mode 100644
index 000000000..7670aec62
--- /dev/null
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectorType.java
@@ -0,0 +1,17 @@
+package dagger.internal.codegen;
+
+/**
+ * Created by Andy on 05.05.2017.
+ */
+public class InjectorType {
+
+    private BindingGraph bindingGraph;
+
+    public InjectorType(BindingGraph bindingGraph) {
+        this.bindingGraph = bindingGraph;
+    }
+
+    public BindingGraph getBindingGraph() {
+        return bindingGraph;
+    }
+}
diff --git a/compiler/src/main/java/dagger/internal/codegen/MultipleSourceFileGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MultipleSourceFileGenerator.java
new file mode 100644
index 000000000..ee9a1048e
--- /dev/null
+++ b/compiler/src/main/java/dagger/internal/codegen/MultipleSourceFileGenerator.java
@@ -0,0 +1,46 @@
+package dagger.internal.codegen;
+
+import com.google.common.base.Optional;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.TypeSpec;
+
+import javax.annotation.processing.Filer;
+import javax.lang.model.element.Element;
+import javax.lang.model.util.Elements;
+import java.util.Iterator;
+import java.util.List;
+
+public class MultipleSourceFileGenerator<T> extends SourceFileGenerator<T> {
+
+    private List<SourceFileGenerator<T>> generators;
+    private SourceFileGenerator<T> current;
+
+    MultipleSourceFileGenerator(Filer filer, Elements elements, List<SourceFileGenerator<T>> generators) {
+        super(filer, elements);
+        this.generators = generators;
+    }
+
+    @Override
+    ClassName nameGeneratedType(T input) {
+        return current.nameGeneratedType(input);
+    }
+
+    @Override
+    Optional<? extends Element> getElementForErrorReporting(T input) {
+        return current.getElementForErrorReporting(input);
+    }
+
+    @Override
+    Optional<TypeSpec.Builder> write(ClassName generatedTypeName, T input) {
+        return current.write(generatedTypeName, input);
+    }
+
+    @Override
+    void generate(T input) throws SourceFileGenerationException {
+        final Iterator<SourceFileGenerator<T>> it = generators.iterator();
+        while(it.hasNext()) {
+            current = it.next();
+            current.generate(input);
+        }
+    }
+}
diff --git a/compiler/src/main/java/dagger/internal/codegen/StubGenerator.java b/compiler/src/main/java/dagger/internal/codegen/StubGenerator.java
new file mode 100644
index 000000000..fe9f1b920
--- /dev/null
+++ b/compiler/src/main/java/dagger/internal/codegen/StubGenerator.java
@@ -0,0 +1,40 @@
+package dagger.internal.codegen;
+
+import com.google.auto.common.BasicAnnotationProcessor;
+import com.google.common.base.Optional;
+import com.google.common.collect.SetMultimap;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.TypeSpec;
+
+import javax.annotation.processing.Filer;
+import javax.lang.model.element.Element;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.Types;
+import java.lang.annotation.Annotation;
+import java.util.Set;
+
+
+public class StubGenerator extends SourceFileGenerator<ProvisionBinding> {
+
+    private final Types types;
+
+    StubGenerator(Filer filer, Elements elements, Types types) {
+        super(filer, elements);
+        this.types = types;
+    }
+
+    @Override
+    ClassName nameGeneratedType(ProvisionBinding input) {
+        return Util.getDelegateTypeName(input);
+    }
+
+    @Override
+    Optional<? extends Element> getElementForErrorReporting(ProvisionBinding input) {
+        return input.bindingElement();
+    }
+
+    @Override
+    Optional<TypeSpec.Builder> write(ClassName generatedTypeName, ProvisionBinding input) {
+        return null;
+    }
+}
