diff --git a/compiler/src/it/functional-tests/src/main/java/test/membersinject/NonRequestedChild.java b/compiler/src/it/functional-tests/src/main/java/test/membersinject/NonRequestedChild.java
new file mode 100644
index 000000000..108a1b58f
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/membersinject/NonRequestedChild.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.membersinject;
+
+import javax.inject.Inject;
+
+/**
+ * A class that should not be requested by any component, to ensure that we still generate a members
+ * injector for it.
+ */
+class NonRequestedChild extends MembersInjectGenericParent<String> {
+  @Inject
+  NonRequestedChild() {}
+}
diff --git a/compiler/src/it/functional-tests/src/test/java/test/membersinject/MembersInjectTest.java b/compiler/src/it/functional-tests/src/test/java/test/membersinject/MembersInjectTest.java
index d655c0f39..411ecb177 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/membersinject/MembersInjectTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/membersinject/MembersInjectTest.java
@@ -1,20 +1,22 @@
 /*
-* Copyright (C) 2015 Google, Inc.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package test.membersinject;
 
+import dagger.MembersInjector;
+import javax.inject.Provider;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -30,14 +32,14 @@
 public class MembersInjectTest {
   @Test public void testMembersInject_arrays() {
     MembersInjectComponent component = DaggerMembersInjectComponent.builder().build();
-    
+
     ChildOfStringArray childOfStringArray = new ChildOfStringArray();
     component.inject(childOfStringArray);
   }
 
   @Test public void testMembersInject_nestedArrays() {
     MembersInjectComponent component = DaggerMembersInjectComponent.builder().build();
-    
+
     ChildOfArrayOfParentOfStringArray childOfArrayOfParentOfStringArray =
         new ChildOfArrayOfParentOfStringArray();
     component.inject(childOfArrayOfParentOfStringArray);
@@ -45,11 +47,11 @@
 
   @Test public void testMembersInject_primitives() {
     MembersInjectComponent component = DaggerMembersInjectComponent.builder().build();
-    
+
     ChildOfPrimitiveIntArray childOfPrimitiveIntArray = new ChildOfPrimitiveIntArray();
     component.inject(childOfPrimitiveIntArray);
   }
-  
+
   @Test
   public void testMembersInject_overrides() {
     MembersInjectionVisibilityComponent component =
@@ -75,4 +77,19 @@ public void testMembersInject_overrides() {
     assertThat(aGrandchild.aGrandchildField()).isNotNull();
     assertThat(aGrandchild.aGrandchildMethod()).isNotNull();
   }
+
+  @Test
+  public void testNonRequestedMembersInjector() {
+    NonRequestedChild child = new NonRequestedChild();
+    Provider<String> provider =
+        new Provider<String>() {
+          @Override
+          public String get() {
+            return "field!";
+          }
+        };
+    MembersInjector<NonRequestedChild> injector = new NonRequestedChild_MembersInjector(provider);
+    injector.injectMembers(child);
+    assertThat(child.t).isEqualTo("field!");
+  }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/InjectProcessingStep.java
index e52567ada..61b19c96c 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectProcessingStep.java
@@ -48,7 +48,8 @@
   private final MembersInjectionBinding.Factory membersInjectionBindingFactory;
   private final InjectBindingRegistry injectBindingRegistry;
 
-  InjectProcessingStep(Messager messager,
+  InjectProcessingStep(
+      Messager messager,
       InjectConstructorValidator constructorValidator,
       InjectFieldValidator fieldValidator,
       InjectMethodValidator methodValidator,
@@ -91,6 +92,11 @@ public Void visitExecutableAsConstructor(ExecutableElement constructorElement, V
                 provisions.add(
                     provisionBindingFactory.forInjectConstructor(
                         constructorElement, Optional.<TypeMirror>absent()));
+                DeclaredType type =
+                    MoreTypes.asDeclared(constructorElement.getEnclosingElement().asType());
+                if (membersInjectionBindingFactory.hasInjectedMembers(type)) {
+                  membersInjectedTypes.add(type);
+                }
               }
 
               return null;
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
index 1212e5aa2..87b2ab187 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
@@ -159,6 +159,11 @@ MembersInjectionBinding unresolve(MembersInjectionBinding binding) {
       return forInjectedType(unresolved, Optional.<TypeMirror>absent());
     }
 
+    /** Returns true if the type has some injected members in itself or any of its super classes. */
+    boolean hasInjectedMembers(DeclaredType declaredType) {
+      return !getInjectionSites(declaredType).isEmpty();
+    }
+
     /**
      * Returns a MembersInjectionBinding for the given type. If {@code resolvedType} is present,
      * this will return a resolved binding, with the key & type resolved to the given type (using
