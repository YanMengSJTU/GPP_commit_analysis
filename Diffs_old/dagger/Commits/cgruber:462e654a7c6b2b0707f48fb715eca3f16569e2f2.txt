diff --git a/javatests/dagger/functional/BasicTest.java b/javatests/dagger/functional/BasicTest.java
index 26f277e43..39dee307d 100644
--- a/javatests/dagger/functional/BasicTest.java
+++ b/javatests/dagger/functional/BasicTest.java
@@ -56,8 +56,8 @@
     assertThat(basicComponent.getInt()).isEqualTo(BOUND_INT);
     assertThat(basicComponent.getLong()).isEqualTo(BOUND_LONG);
     assertThat(basicComponent.getBoolean()).isEqualTo(BOUND_BOOLEAN);
-    assertThat(basicComponent.getFloat()).isWithin(0).of(BOUND_FLOAT);
-    assertThat(basicComponent.getDouble()).isWithin(0).of(BOUND_DOUBLE);
+    assertThat(basicComponent.getFloat()).isEqualTo(BOUND_FLOAT);
+    assertThat(basicComponent.getDouble()).isEqualTo(BOUND_DOUBLE);
   }
 
   @Theory public void boxedPrimitives(BasicComponent basicComponent) {
@@ -67,8 +67,8 @@
     assertThat(basicComponent.getBoxedInt()).isEqualTo(new Integer(BOUND_INT));
     assertThat(basicComponent.getBoxedLong()).isEqualTo(new Long(BOUND_LONG));
     assertThat(basicComponent.getBoxedBoolean()).isEqualTo(new Boolean(BOUND_BOOLEAN));
-    assertThat(basicComponent.getBoxedFloat()).isWithin(0).of(BOUND_FLOAT);
-    assertThat(basicComponent.getBoxedDouble()).isWithin(0).of(BOUND_DOUBLE);
+    assertThat(basicComponent.getBoxedFloat()).isEqualTo(BOUND_FLOAT);
+    assertThat(basicComponent.getBoxedDouble()).isEqualTo(BOUND_DOUBLE);
   }
 
   @Theory public void boxedPrimitiveProviders(BasicComponent basicComponent) {
@@ -78,8 +78,8 @@
     assertThat(basicComponent.getIntProvider().get()).isEqualTo(new Integer(BOUND_INT));
     assertThat(basicComponent.getLongProvider().get()).isEqualTo(new Long(BOUND_LONG));
     assertThat(basicComponent.getBooleanProvider().get()).isEqualTo(new Boolean(BOUND_BOOLEAN));
-    assertThat(basicComponent.getFloatProvider().get()).isWithin(0).of(BOUND_FLOAT);
-    assertThat(basicComponent.getDoubleProvider().get()).isWithin(0).of(BOUND_DOUBLE);
+    assertThat(basicComponent.getFloatProvider().get()).isEqualTo(BOUND_FLOAT);
+    assertThat(basicComponent.getDoubleProvider().get()).isEqualTo(BOUND_DOUBLE);
   }
 
   @Theory public void primitiveArrays(BasicComponent basicComponent) {
diff --git a/javatests/dagger/functional/builder/BuilderTest.java b/javatests/dagger/functional/builder/BuilderTest.java
index d5c066fd6..75b15c4b0 100644
--- a/javatests/dagger/functional/builder/BuilderTest.java
+++ b/javatests/dagger/functional/builder/BuilderTest.java
@@ -45,8 +45,8 @@
     TestComponentWithBuilderInterface component = builder.build();
     assertThat(component.s()).isEqualTo("sam");
     assertThat(component.i()).isEqualTo(1);
-    assertThat(component.d()).isWithin(0).of(4.2d);
-    assertThat(component.f()).isWithin(0).of(5.5f);
+    assertThat(component.d()).isEqualTo(4.2d);
+    assertThat(component.f()).isEqualTo(5.5f);
     assertThat(component.l()).isEqualTo(6L);
   }
 
@@ -69,8 +69,8 @@
     TestComponentWithBuilderAbstractClass component = builder.build();
     assertThat(component.s()).isEqualTo("sam");
     assertThat(component.i()).isEqualTo(1);
-    assertThat(component.d()).isWithin(0).of(4.2d);
-    assertThat(component.f()).isWithin(0).of(5.5f);
+    assertThat(component.d()).isEqualTo(4.2d);
+    assertThat(component.f()).isEqualTo(5.5f);
     assertThat(component.l()).isEqualTo(6L);
   }
 
@@ -93,8 +93,8 @@
     TestComponentWithGenericBuilderInterface component = builder.build();
     assertThat(component.s()).isEqualTo("sam");
     assertThat(component.i()).isEqualTo(1);
-    assertThat(component.d()).isWithin(0).of(4.2d);
-    assertThat(component.f()).isWithin(0).of(5.5f);
+    assertThat(component.d()).isEqualTo(4.2d);
+    assertThat(component.f()).isEqualTo(5.5f);
     assertThat(component.l()).isEqualTo(6L);
   }
 
@@ -117,8 +117,8 @@
     TestComponentWithGenericBuilderAbstractClass component = builder.build();
     assertThat(component.s()).isEqualTo("sam");
     assertThat(component.i()).isEqualTo(1);
-    assertThat(component.d()).isWithin(0).of(4.2d);
-    assertThat(component.f()).isWithin(0).of(5.5f);
+    assertThat(component.d()).isEqualTo(4.2d);
+    assertThat(component.f()).isEqualTo(5.5f);
     assertThat(component.l()).isEqualTo(6L);
   }
   
@@ -137,8 +137,8 @@
     TestChildComponentWithBuilderInterface child1 = builder1.build();
     assertThat(child1.s()).isEqualTo("sam");
     assertThat(child1.i()).isEqualTo(1);
-    assertThat(child1.d()).isWithin(0).of(4.2d);
-    assertThat(child1.f()).isWithin(0).of(5.5f);
+    assertThat(child1.d()).isEqualTo(4.2d);
+    assertThat(child1.f()).isEqualTo(5.5f);
     assertThat(child1.l()).isEqualTo(6L);
     assertThat(child1.b()).isEqualTo((byte)7);
   }
@@ -159,8 +159,8 @@
     TestChildComponentWithBuilderAbstractClass child2 = builder2.build();
     assertThat(child2.s()).isEqualTo("tara");
     assertThat(child2.i()).isEqualTo(10);
-    assertThat(child2.d()).isWithin(0).of(4.2d);
-    assertThat(child2.f()).isWithin(0).of(5.5f);
+    assertThat(child2.d()).isEqualTo(4.2d);
+    assertThat(child2.f()).isEqualTo(5.5f);
     assertThat(child2.l()).isEqualTo(6L);
     assertThat(child2.b()).isEqualTo((byte)70);
   }
diff --git a/javatests/dagger/functional/producers/badexecutor/BadExecutorTest.java b/javatests/dagger/functional/producers/badexecutor/BadExecutorTest.java
index 90bbca156..e0484df54 100644
--- a/javatests/dagger/functional/producers/badexecutor/BadExecutorTest.java
+++ b/javatests/dagger/functional/producers/badexecutor/BadExecutorTest.java
@@ -86,6 +86,6 @@ public void rejectSingleArgFromComponentDepMethod() throws Exception {
 
   @Test
   public void doNotRejectComponentDepMethod() throws Exception {
-    assertThat(component.doubleDep().get()).isWithin(0).of(42.0);
+    assertThat(component.doubleDep().get()).isEqualTo(42.0);
   }
 }
diff --git a/javatests/dagger/functional/producers/builder/ProductionComponentBuilderTest.java b/javatests/dagger/functional/producers/builder/ProductionComponentBuilderTest.java
index 7b33053b8..14f153eac 100644
--- a/javatests/dagger/functional/producers/builder/ProductionComponentBuilderTest.java
+++ b/javatests/dagger/functional/producers/builder/ProductionComponentBuilderTest.java
@@ -36,7 +36,7 @@ public void successfulBuild() throws Exception {
             .strModule(new StringModule())
             .build();
     assertThat(component.s().get()).isEqualTo("arg: 42");
-    assertThat(component.d().get()).isWithin(0).of(15.3);
+    assertThat(component.d().get()).isEqualTo(15.3);
   }
 
   @Test
@@ -46,7 +46,7 @@ public void successfulBuild_withMissingZeroArgModule() throws Exception {
             .depComponent(depComponent(15.3))
             .build();
     assertThat(component.s().get()).isEqualTo("arg: 42");
-    assertThat(component.d().get()).isWithin(0).of(15.3);
+    assertThat(component.d().get()).isEqualTo(15.3);
   }
 
   @Test(expected = IllegalStateException.class)
