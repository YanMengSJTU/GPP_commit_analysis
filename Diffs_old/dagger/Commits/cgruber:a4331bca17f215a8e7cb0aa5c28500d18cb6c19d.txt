diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 95a5f7f98..37331e249 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -222,17 +222,8 @@ Snippet getSnippetFor(ClassName usingClass) {
     ClassWriter componentWriter = writer.addClass(componentName.simpleName());
     componentWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getCanonicalName());
     componentWriter.addModifiers(PUBLIC, FINAL);
-    switch (componentDefinitionType.getKind()) {
-      case CLASS:
-        checkState(componentDefinitionType.getModifiers().contains(ABSTRACT));
-        componentWriter.setSuperType(componentDefinitionTypeName);
-        break;
-      case INTERFACE:
-        componentWriter.addImplementedType(componentDefinitionTypeName);
-        break;
-      default:
-        throw new IllegalStateException();
-    }
+    checkState(componentDefinitionType.getModifiers().contains(ABSTRACT));
+    componentWriter.setSupertype(componentDefinitionType);
 
     Set<JavaWriter> javaWriters = Sets.newHashSet();
     javaWriters.add(writer);
@@ -282,17 +273,7 @@ private ClassWriter writeBuilder(BindingGraph input, ClassName componentApiName,
     builderWriter.addConstructor().addModifiers(PRIVATE);
     if (builderSpec.isPresent()) {
       builderWriter.addModifiers(PRIVATE);
-      TypeElement builderType = builderSpec.get().builderDefinitionType();
-      switch (builderType.getKind()) {
-        case CLASS:
-          builderWriter.setSuperType(builderType);
-          break;
-        case INTERFACE:
-          builderWriter.addImplementedType(builderType);
-          break;
-        default:
-          throw new IllegalStateException("not a class or interface: " + builderType);
-      }
+      builderWriter.setSupertype(builderSpec.get().builderDefinitionType());
     } else {
       builderWriter.addModifiers(PUBLIC);
     }
@@ -523,18 +504,9 @@ private void writeSubcomponent(ClassWriter componentWriter,
     componentMethod.annotate(Override.class);
 
     TypeName subcomponentTypeName = TypeNames.forTypeMirror(subcomponentType);
-    Element subcomponentElement = MoreTypes.asElement(subcomponentType);
-    switch (subcomponentElement.getKind()) {
-      case CLASS:
-        checkState(subcomponentElement.getModifiers().contains(ABSTRACT));
-        subcomponentWriter.setSuperType(subcomponentTypeName);
-        break;
-      case INTERFACE:
-        subcomponentWriter.addImplementedType(subcomponentTypeName);
-        break;
-      default:
-        throw new IllegalStateException();
-    }
+    TypeElement subcomponentElement = MoreTypes.asTypeElement(subcomponentType);
+    checkState(subcomponentElement.getModifiers().contains(ABSTRACT));
+    subcomponentWriter.setSupertype(subcomponentElement);
 
     Map<BindingKey, MemberSelect> memberSelectSnippetsBuilder = Maps.newHashMap();
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index d4d55f8d3..10565a1b7 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -120,7 +120,7 @@ ClassName nameGeneratedType(ProductionBinding binding) {
     factoryWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getName());
     factoryWriter.addModifiers(PUBLIC);
     factoryWriter.addModifiers(FINAL);
-    factoryWriter.setSuperType(
+    factoryWriter.setSuperclass(
         ParameterizedTypeName.create(AbstractProducer.class, providedTypeName));
 
     MethodWriter getMethodWriter = factoryWriter.addMethod(futureTypeName, "compute");
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/ClassWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/ClassWriter.java
index 20b373f40..95ddf0c39 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/ClassWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/ClassWriter.java
@@ -16,6 +16,7 @@
 package dagger.internal.codegen.writer;
 
 import com.google.common.base.Function;
+import com.google.common.base.Optional;
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
@@ -25,35 +26,61 @@
 import java.util.List;
 import java.util.Set;
 import javax.lang.model.element.Modifier;
+import javax.lang.model.element.TypeElement;
 
+import static com.google.common.base.Preconditions.checkState;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PROTECTED;
 import static javax.lang.model.element.Modifier.PUBLIC;
 
 public final class ClassWriter extends TypeWriter {
+  private Optional<TypeName> superclass;
   private final List<ConstructorWriter> constructorWriters;
   private final List<TypeVariableName> typeParameters;
 
   ClassWriter(ClassName className) {
     super(className);
+    this.superclass = Optional.absent();
     this.constructorWriters = Lists.newArrayList();
     this.typeParameters = Lists.newArrayList();
   }
 
+  public void setSuperclass(TypeName typeReference) {
+    checkState(!superclass.isPresent());
+    superclass = Optional.of(typeReference);
+  }
+
+  /**
+   * If {@code supertype} is a class, makes this class extend it; if it is an interface, makes this
+   * class implement it.
+   */
+  public void setSupertype(TypeElement supertype) {
+    switch (supertype.getKind()) {
+      case CLASS:
+        setSuperclass(ClassName.fromTypeElement(supertype));
+        break;
+      case INTERFACE:
+        addImplementedType(supertype);
+        break;
+      default:
+        throw new IllegalArgumentException(supertype + " must be a class or interface");
+    }
+  }
+
   public ConstructorWriter addConstructor() {
     ConstructorWriter constructorWriter = new ConstructorWriter(name.simpleName());
     constructorWriters.add(constructorWriter);
     return constructorWriter;
   }
-  
+
   public void addTypeParameter(TypeVariableName typeVariableName) {
     this.typeParameters.add(typeVariableName);
   }
-  
+
   public void addTypeParameters(Iterable<TypeVariableName> typeVariableNames) {
     Iterables.addAll(typeParameters, typeVariableNames);
   }
-  
+
   public List<TypeVariableName> typeParameters() {
     return ImmutableList.copyOf(typeParameters);
   }
@@ -70,9 +97,9 @@ public Appendable write(Appendable appendable, Context context) throws IOExcepti
     writeAnnotations(appendable, context);
     writeModifiers(appendable).append("class ").append(name.simpleName());
     Writables.join(", ", typeParameters, "<", ">", appendable, context);
-    if (supertype.isPresent()) {
+    if (superclass.isPresent()) {
       appendable.append(" extends ");
-      supertype.get().write(appendable, context);
+      superclass.get().write(appendable, context);
     }
     Writables.join(", ", implementedTypes, " implements ", "", appendable, context);
     appendable.append(" {");
@@ -114,7 +141,7 @@ private boolean isDefaultConstructor(ConstructorWriter constructorWriter) {
     @SuppressWarnings("unchecked")
     Iterable<? extends HasClassReferences> concat =
         Iterables.concat(nestedTypeWriters, fieldWriters.values(), constructorWriters,
-            methodWriters, implementedTypes, supertype.asSet(), annotations, typeParameters);
+            methodWriters, implementedTypes, superclass.asSet(), annotations, typeParameters);
     return FluentIterable.from(concat)
         .transformAndConcat(new Function<HasClassReferences, Set<ClassName>>() {
           @Override
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/EnumWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/EnumWriter.java
index f3dcd9a12..cb0d75e73 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/EnumWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/EnumWriter.java
@@ -126,8 +126,7 @@ private boolean isDefaultConstructor(ConstructorWriter constructorWriter) {
     @SuppressWarnings("unchecked")
     Iterable<? extends HasClassReferences> concat =
         Iterables.concat(nestedTypeWriters, constantWriters.values(), fieldWriters.values(),
-            constructorWriters,
-            methodWriters, implementedTypes, supertype.asSet(), annotations);
+            constructorWriters, methodWriters, implementedTypes, annotations);
     return FluentIterable.from(concat)
         .transformAndConcat(new Function<HasClassReferences, Set<ClassName>>() {
           @Override
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/InterfaceWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/InterfaceWriter.java
index 0db9ff864..5eac8a9ee 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/InterfaceWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/InterfaceWriter.java
@@ -52,13 +52,9 @@ public Appendable write(Appendable appendable, Context context) throws IOExcepti
       Joiner.on(", ").appendTo(appendable, typeVariables);
       appendable.append('>');
     }
-    if (supertype.isPresent()) {
-      appendable.append(" extends ");
-      supertype.get().write(appendable, context);
-    }
     Iterator<TypeName> implementedTypesIterator = implementedTypes.iterator();
     if (implementedTypesIterator.hasNext()) {
-      appendable.append(" implements ");
+      appendable.append(" extends ");
       implementedTypesIterator.next().write(appendable, context);
       while (implementedTypesIterator.hasNext()) {
         appendable.append(", ");
@@ -82,8 +78,7 @@ public Appendable write(Appendable appendable, Context context) throws IOExcepti
   public Set<ClassName> referencedClasses() {
     @SuppressWarnings("unchecked")
     Iterable<? extends HasClassReferences> concat =
-        Iterables.concat(nestedTypeWriters, methodWriters, implementedTypes, supertype.asSet(),
-            annotations);
+        Iterables.concat(nestedTypeWriters, methodWriters, implementedTypes, annotations);
     return FluentIterable.from(concat)
         .transformAndConcat(new Function<HasClassReferences, Set<ClassName>>() {
           @Override
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/TypeWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/TypeWriter.java
index 364b3a239..b13d0831e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/TypeWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/TypeWriter.java
@@ -15,7 +15,6 @@
  */
 package dagger.internal.codegen.writer;
 
-import com.google.common.base.Optional;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import java.util.List;
@@ -23,15 +22,12 @@
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.TypeMirror;
 
-import static com.google.common.base.Preconditions.checkState;
-
 /**
  * Only named types. Doesn't cover anonymous inner classes.
  */
 public abstract class TypeWriter /* ha ha */ extends Modifiable
     implements Writable, HasTypeName, HasClassReferences {
   final ClassName name;
-  Optional<TypeName> supertype;
   final List<TypeName> implementedTypes;
   final List<MethodWriter> methodWriters;
   final List<TypeWriter> nestedTypeWriters;
@@ -39,7 +35,6 @@
 
   TypeWriter(ClassName name) {
     this.name = name;
-    this.supertype = Optional.absent();
     this.implementedTypes = Lists.newArrayList();
     this.methodWriters = Lists.newArrayList();
     this.nestedTypeWriters = Lists.newArrayList();
@@ -91,15 +86,6 @@ public void addImplementedType(TypeElement typeElement) {
     implementedTypes.add(ClassName.fromTypeElement(typeElement));
   }
 
-  public void setSuperType(TypeName typeReference) {
-    checkState(!supertype.isPresent());
-    supertype = Optional.of(typeReference);
-  }
-
-  public void setSuperType(TypeElement typeElement) {
-    setSuperType(ClassName.fromTypeElement(typeElement));
-  }
-
   public FieldWriter addField(Class<?> type, String name) {
     return addField(ClassName.fromClass(type), name);
   }
