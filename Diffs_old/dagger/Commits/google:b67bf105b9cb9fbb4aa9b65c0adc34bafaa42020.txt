diff --git a/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java b/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
index 76a69eeed..fe9c6afe9 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
@@ -41,10 +41,10 @@
 @RunWith(Theories.class)
 public class BasicTest {
   @DataPoint
-  public static final BasicComponent basicComponent = Dagger_BasicComponent.create();
+  public static final BasicComponent basicComponent = DaggerBasicComponent.create();
   @DataPoint
   public static final BasicComponent abstractClassBasicComponent =
-      Dagger_BasicAbstractClassComponent.create();
+      DaggerBasicAbstractClassComponent.create();
 
   @Theory public void primitives(BasicComponent basicComponent) {
     assertThat(basicComponent.getByte()).isEqualTo(BOUND_BYTE);
diff --git a/compiler/src/it/functional-tests/src/test/java/test/GenericTest.java b/compiler/src/it/functional-tests/src/test/java/test/GenericTest.java
index 88be63f0e..f1c981f25 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/GenericTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/GenericTest.java
@@ -32,17 +32,17 @@
 public class GenericTest {
 
   @Test public void testGenericComponentCreate() {
-    GenericComponent component = Dagger_GenericComponent.create();
+    GenericComponent component = DaggerGenericComponent.create();
     assertThat(component).isNotNull();
   }
   
   @Test public void testGenericSimpleReferences() {
-    GenericComponent component = Dagger_GenericComponent.create();
+    GenericComponent component = DaggerGenericComponent.create();
     assertThat(component.referencesGeneric().genericA.t).isNotNull();    
   }
   
   @Test public void testGenericDoubleReferences() {
-    GenericComponent component = Dagger_GenericComponent.create();
+    GenericComponent component = DaggerGenericComponent.create();
     GenericDoubleReferences<A> doubleA = component.doubleGenericA();
     assertThat(doubleA.a).isNotNull();
     assertThat(doubleA.a2).isNotNull();
@@ -57,13 +57,13 @@
   }
   
   @Test public void complexGenerics() {
-    GenericComponent component = Dagger_GenericComponent.create();
+    GenericComponent component = DaggerGenericComponent.create();
     // validate these can be called w/o exceptions.
     component.complexGenerics();
   }
   
   @Test public void noDepsGenerics() {
-    GenericComponent component = Dagger_GenericComponent.create();
+    GenericComponent component = DaggerGenericComponent.create();
     // validate these can be called w/o exceptions.
     component.noDepsA();
     component.noDepsB();
@@ -71,7 +71,7 @@
   
   @Test public void boundedGenerics() {
     BoundedGenericModule expected = new BoundedGenericModule();
-    BoundedGenericComponent component = Dagger_BoundedGenericComponent.create();
+    BoundedGenericComponent component = DaggerBoundedGenericComponent.create();
     BoundedGenerics<Integer, ArrayList<String>, LinkedList<CharSequence>, Integer, List<Integer>>
         b1 = component.bounds1();
     assertEquals(expected.provideInteger(), b1.a);
@@ -90,7 +90,7 @@
   }
   
   @Test public void membersInjections() {
-    GenericComponent component = Dagger_GenericComponent.create();
+    GenericComponent component = DaggerGenericComponent.create();
     GenericChild<A> childA = new GenericChild<A>();
     component.injectA(childA);
     assertThat(childA.a).isNotNull();
@@ -113,7 +113,7 @@
   }
   
   @Test public void packagePrivateTypeParameterDependencies() {
-    GenericComponent component = Dagger_GenericComponent.create();
+    GenericComponent component = DaggerGenericComponent.create();
     Exposed exposed = component.exposed();
     assertThat(exposed.gpp.t).isNotNull();
     assertThat(exposed.gpp2).isNotNull();
@@ -121,13 +121,13 @@
   
   @SuppressWarnings("rawtypes")
   @Test public void publicSubclassWithPackagePrivateTypeParameterOfSuperclass() {
-    GenericComponent component = Dagger_GenericComponent.create();
+    GenericComponent component = DaggerGenericComponent.create();
     PublicSubclass publicSubclass = component.publicSubclass();
     assertThat(((Generic)publicSubclass).t).isNotNull();
   }
   
   @Test public void singletonScopesAppliesToEachResolvedType() {
-    SingletonGenericComponent component = Dagger_SingletonGenericComponent.create();
+    SingletonGenericComponent component = DaggerSingletonGenericComponent.create();
     ScopedGeneric<A> a = component.scopedGenericA();
     assertThat(a).isSameAs(component.scopedGenericA());
     assertThat(a.t).isNotNull();
@@ -140,7 +140,7 @@
   }
   
   @Test public void genericModules() {
-    GenericComponent component = Dagger_GenericComponent.create();
+    GenericComponent component = DaggerGenericComponent.create();
     assertThat(component.iterableInt()).containsExactly(1, 2).inOrder();
     assertThat(component.iterableDouble()).containsExactly(3d, 4d).inOrder();
     
diff --git a/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java b/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
index 23fb61bb7..04235b68b 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
@@ -26,7 +26,7 @@
 @RunWith(JUnit4.class)
 public class MultibindingTest {
   @Test public void testMultibindings() {
-    MultibindingComponent multibindingComponent = Dagger_MultibindingComponent.create();
+    MultibindingComponent multibindingComponent = DaggerMultibindingComponent.create();
     Map<String, String> map = multibindingComponent.map();
     assertThat(map).hasSize(2);
     assertThat(map).containsEntry("foo", "foo value");
diff --git a/compiler/src/it/functional-tests/src/test/java/test/NonComponentDependencyTest.java b/compiler/src/it/functional-tests/src/test/java/test/NonComponentDependencyTest.java
index 157acf999..37d3f7aec 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/NonComponentDependencyTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/NonComponentDependencyTest.java
@@ -25,7 +25,7 @@
 public class NonComponentDependencyTest {
   @Test public void testThing() {
     NonComponentDependencyComponent component =
-        Dagger_NonComponentDependencyComponent.builder()
+        DaggerNonComponentDependencyComponent.builder()
             .thingComponent(new NonComponentDependencyComponent.ThingComponentImpl())
             .build();
     assertThat(component).isNotNull();
diff --git a/compiler/src/it/functional-tests/src/test/java/test/membersinject/MembersInjectTest.java b/compiler/src/it/functional-tests/src/test/java/test/membersinject/MembersInjectTest.java
index 3b1127df5..1b382d8f7 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/membersinject/MembersInjectTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/membersinject/MembersInjectTest.java
@@ -22,14 +22,14 @@
 @RunWith(JUnit4.class)
 public class MembersInjectTest {
   @Test public void testMembersInject_arrays() {
-    MembersInjectComponent component = Dagger_MembersInjectComponent.builder().build();
+    MembersInjectComponent component = DaggerMembersInjectComponent.builder().build();
     
     ChildOfStringArray childOfStringArray = new ChildOfStringArray();
     component.inject(childOfStringArray);
   }
 
   @Test public void testMembersInject_nestedArrays() {
-    MembersInjectComponent component = Dagger_MembersInjectComponent.builder().build();
+    MembersInjectComponent component = DaggerMembersInjectComponent.builder().build();
     
     ChildOfArrayOfParentOfStringArray childOfArrayOfParentOfStringArray =
         new ChildOfArrayOfParentOfStringArray();
@@ -37,7 +37,7 @@
   }
 
   @Test public void testMembersInject_primitives() {
-    MembersInjectComponent component = Dagger_MembersInjectComponent.builder().build();
+    MembersInjectComponent component = DaggerMembersInjectComponent.builder().build();
     
     ChildOfPrimitiveIntArray childOfPrimitiveIntArray = new ChildOfPrimitiveIntArray();
     component.inject(childOfPrimitiveIntArray);
diff --git a/compiler/src/it/functional-tests/src/test/java/test/nullables/NullabilityTest.java b/compiler/src/it/functional-tests/src/test/java/test/nullables/NullabilityTest.java
index 5ad9efb7c..a0e1e22f5 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/nullables/NullabilityTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/nullables/NullabilityTest.java
@@ -26,7 +26,7 @@
 public class NullabilityTest {
   @Test public void testNullability_provides() {
     NullModule module = new NullModule();
-    NullComponent component = Dagger_NullComponent.builder().nullModule(module).build();
+    NullComponent component = DaggerNullComponent.builder().nullModule(module).build();
 
     // Can't construct NullFoo because it depends on Number, and Number was null.
     try {
@@ -80,7 +80,7 @@
       }
     };
     NullComponentWithDependency component =
-        Dagger_NullComponentWithDependency.builder().nullComponent(nullComponent).build();
+        DaggerNullComponentWithDependency.builder().nullComponent(nullComponent).build();
     validate(false, component.string(), component.stringProvider(), component.numberProvider());
     
     // Also validate that the component's number() method fails
diff --git a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentTest.java b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentTest.java
index 69fff735e..c0d01b19a 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentTest.java
@@ -27,7 +27,7 @@
 public class SubcomponentTest {
   @Test
   public void scopePropagatesUpward_class() {
-    ParentComponent parentComponent = Dagger_ParentComponent.create();
+    ParentComponent parentComponent = DaggerParentComponent.create();
     assertThat(parentComponent.newChildComponent().requiresSingleton().singletonType())
         .isSameAs(parentComponent.newChildComponent().requiresSingleton().singletonType());
     assertThat(parentComponent.newChildComponent().requiresSingleton().singletonType())
@@ -37,7 +37,7 @@ public void scopePropagatesUpward_class() {
 
   @Test
   public void scopePropagatesUpward_provides() {
-    ParentComponent parentComponent = Dagger_ParentComponent.create();
+    ParentComponent parentComponent = DaggerParentComponent.create();
     assertThat(parentComponent.newChildComponent()
         .requiresSingleton().unscopedTypeBoundAsSingleton())
             .isSameAs(parentComponent.newChildComponent()
@@ -50,7 +50,7 @@ public void scopePropagatesUpward_provides() {
 
   @Test
   public void multibindingContributions() {
-    ParentComponent parentComponent = Dagger_ParentComponent.create();
+    ParentComponent parentComponent = DaggerParentComponent.create();
     Set<Object> parentObjectSet = parentComponent.objectSet();
     assertThat(parentObjectSet).hasSize(2);
     Set<Object> childObjectSet = parentComponent.newChildComponent().objectSet();
@@ -65,7 +65,7 @@ public void multibindingContributions() {
 
   @Test
   public void unscopedProviders() {
-    ParentComponent parentComponent = Dagger_ParentComponent.create();
+    ParentComponent parentComponent = DaggerParentComponent.create();
     assertThat(parentComponent.getUnscopedTypeProvider())
         .isSameAs(parentComponent.newChildComponent().getUnscopedTypeProvider());
     assertThat(parentComponent.getUnscopedTypeProvider())
@@ -76,7 +76,7 @@ public void unscopedProviders() {
 
   @Test
   public void passedModules() {
-    ParentComponent parentComponent = Dagger_ParentComponent.create();
+    ParentComponent parentComponent = DaggerParentComponent.create();
     ChildModuleWithState childModuleWithState = new ChildModuleWithState();
     ChildComponentRequiringModules childComponent1 =
         parentComponent.newChildComponentRequiringModules(
diff --git a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/hiding/SubcomponentHidingTest.java b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/hiding/SubcomponentHidingTest.java
index 76e916d3e..27dcbb690 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/hiding/SubcomponentHidingTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/hiding/SubcomponentHidingTest.java
@@ -24,7 +24,7 @@
 @RunWith(JUnit4.class)
 public class SubcomponentHidingTest {
   @Test public void moduleNameHiding() {
-    ParentComponent parent = Dagger_ParentComponent.create();
+    ParentComponent parent = DaggerParentComponent.create();
     assertThat(parent.aCommonName().toString()).isEqualTo("a");
     assertThat(parent.newChildComponent().aCommonName().toString()).isEqualTo("a");
     assertThat(parent.newChildComponent().bCommonName().toString()).isEqualTo("1");
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/test/DependentTest.java b/compiler/src/it/producers-functional-tests/src/test/java/test/DependentTest.java
index 70413ae94..75c07c7a3 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/test/DependentTest.java
+++ b/compiler/src/it/producers-functional-tests/src/test/java/test/DependentTest.java
@@ -25,12 +25,12 @@
 @RunWith(JUnit4.class)
 public class DependentTest {
   @Test public void testDependentComponent() throws Exception {
-    DependentComponent dependentComponent = Dagger_DependentComponent
+    DependentComponent dependentComponent = DaggerDependentComponent
         .builder()
-        .dependedProductionComponent(Dagger_DependedProductionComponent.builder()
+        .dependedProductionComponent(DaggerDependedProductionComponent.builder()
             .executor(MoreExecutors.directExecutor())
             .build())
-        .dependedComponent(Dagger_DependedComponent.create())
+        .dependedComponent(DaggerDependedComponent.create())
         .executor(MoreExecutors.directExecutor())
         .build();
     assertThat(dependentComponent).isNotNull();
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/test/MultibindingTest.java b/compiler/src/it/producers-functional-tests/src/test/java/test/MultibindingTest.java
index d20de2384..20c86dc52 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/test/MultibindingTest.java
+++ b/compiler/src/it/producers-functional-tests/src/test/java/test/MultibindingTest.java
@@ -25,7 +25,7 @@
 @RunWith(JUnit4.class)
 public class MultibindingTest {
   @Test public void multibinding() throws Exception {
-    MultibindingComponent multibindingComponent = Dagger_MultibindingComponent.builder()
+    MultibindingComponent multibindingComponent = DaggerMultibindingComponent.builder()
         .executor(MoreExecutors.directExecutor())
         .build();
     assertThat(multibindingComponent.strs().get())
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/test/SimpleTest.java b/compiler/src/it/producers-functional-tests/src/test/java/test/SimpleTest.java
index de0ea89bd..f2b910e3c 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/test/SimpleTest.java
+++ b/compiler/src/it/producers-functional-tests/src/test/java/test/SimpleTest.java
@@ -25,7 +25,7 @@
 @RunWith(JUnit4.class)
 public class SimpleTest {
   @Test public void testSimpleComponent() throws Exception {
-    SimpleComponent simpleComponent = Dagger_SimpleComponent
+    SimpleComponent simpleComponent = DaggerSimpleComponent
         .builder()
         .executor(MoreExecutors.directExecutor())
         .build();
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 412a36fe1..f18ae164c 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -132,7 +132,7 @@ ClassName nameGeneratedType(BindingGraph input) {
     ClassName componentDefinitionClassName =
         ClassName.fromTypeElement(input.componentDescriptor().componentDefinitionType());
     String componentName =
-        "Dagger_" + componentDefinitionClassName.classFileName().replace('$', '_');
+        "Dagger" + componentDefinitionClassName.classFileName().replace('$', '_');
     return componentDefinitionClassName.topLevelClassName().peerNamed(componentName);
   }
 
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index af704ea2f..1faed549a 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -191,7 +191,7 @@
         "  Provider<SomeInjectableType> someInjectableTypeProvider();",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_SimpleComponent",
+        "test.DaggerSimpleComponent",
         "package test;",
         "",
         "import dagger.Lazy;",
@@ -200,8 +200,8 @@
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private Dagger_SimpleComponent(Builder builder) {",
+        "public final class DaggerSimpleComponent implements SimpleComponent {",
+        "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -237,7 +237,7 @@
         "    }",
         "",
         "    public SimpleComponent build() {",
-        "      return new Dagger_SimpleComponent(this);",
+        "      return new DaggerSimpleComponent(this);",
         "    }",
         "  }",
         "}");
@@ -274,7 +274,7 @@
         "  Provider<SomeInjectableType> someInjectableTypeProvider();",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_SimpleComponent",
+        "test.DaggerSimpleComponent",
         "package test;",
         "",
         "import dagger.Lazy;",
@@ -284,10 +284,10 @@
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_SimpleComponent implements SimpleComponent {",
+        "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
-        "  private Dagger_SimpleComponent(Builder builder) {",
+        "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -325,7 +325,7 @@
         "    }",
         "",
         "    public SimpleComponent build() {",
-        "      return new Dagger_SimpleComponent(this);",
+        "      return new DaggerSimpleComponent(this);",
         "    }",
         "  }",
         "}");
@@ -356,7 +356,7 @@
         "}");
 
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_OuterType_SimpleComponent",
+        "test.DaggerOuterType_SimpleComponent",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -366,10 +366,10 @@
         "import test.OuterType.SimpleComponent;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_OuterType_SimpleComponent implements SimpleComponent {",
+        "public final class DaggerOuterType_SimpleComponent implements SimpleComponent {",
         "  private MembersInjector<B> bMembersInjector;",
         "",
-        "  private Dagger_OuterType_SimpleComponent(Builder builder) {",
+        "  private DaggerOuterType_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -402,7 +402,7 @@
         "    }",
         "",
         "    public SimpleComponent build() {",
-        "      return new Dagger_OuterType_SimpleComponent(this);",
+        "      return new DaggerOuterType_SimpleComponent(this);",
         "    }",
         "  }",
         "}");
@@ -457,18 +457,18 @@
         "  A a();",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_TestComponent",
+        "test.DaggerTestComponent",
         "package test;",
         "",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
+        "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<B> bProvider;",
         "  private Provider<A> aProvider;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private DaggerTestComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -502,7 +502,7 @@
         "      if (testModule == null) {",
         "        this.testModule = new TestModule();",
         "      }",
-        "      return new Dagger_TestComponent(this);",
+        "      return new DaggerTestComponent(this);",
         "    }",
         "",
         "    public Builder testModule(TestModule testModule) {",
@@ -592,15 +592,15 @@
     // Generated code includes all includes, but excludes the parent modules.
     // The "always" module should only be listed once.
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_TestComponent",
+        "test.DaggerTestComponent",
         "package test;",
         "",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
+        "public final class DaggerTestComponent implements TestComponent {",
         "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private DaggerTestComponent(Builder builder) {",
         "    assert builder != null;",
         "  }",
         "",
@@ -642,7 +642,7 @@
         "      if (parentDepIncluded == null) {",
         "        this.parentDepIncluded = new ParentDepIncluded();",
         "      }",
-        "      return new Dagger_TestComponent(this);",
+        "      return new DaggerTestComponent(this);",
         "    }",
         "",
         "    public Builder testModule(TestModule testModule) {",
@@ -779,7 +779,7 @@
         "  Set<String> strings();",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_TestComponent",
+        "test.DaggerTestComponent",
         "package test;",
         "",
         "import dagger.internal.SetFactory;",
@@ -788,12 +788,12 @@
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
+        "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Set<String>> setOfStringContribution1Provider;",
         "  private Provider<Set<String>> setOfStringContribution2Provider;",
         "  private Provider<Set<String>> setOfStringProvider;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private DaggerTestComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -834,7 +834,7 @@
         "      if (setModule == null) {",
         "        this.setModule = new SetModule();",
         "      }",
-        "      return new Dagger_TestComponent(this);",
+        "      return new DaggerTestComponent(this);",
         "    }",
         "",
         "    public Builder emptySetModule(EmptySetModule emptySetModule) {",
@@ -893,17 +893,17 @@
         "  SomeInjectedType injectAndReturn(SomeInjectedType instance);",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_SimpleComponent",
+        "test.DaggerSimpleComponent",
         "package test;",
         "",
         "import dagger.MembersInjector;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_SimpleComponent implements SimpleComponent {",
+        "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
         "",
-        "  private Dagger_SimpleComponent(Builder builder) {",
+        "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -937,7 +937,7 @@
         "    }",
         "",
         "    public SimpleComponent build() {",
-        "      return new Dagger_SimpleComponent(this);",
+        "      return new DaggerSimpleComponent(this);",
         "    }",
         "  }",
         "}");
@@ -970,7 +970,7 @@
         "  SomeInjectableType someInjectableType();",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_SimpleComponent",
+        "test.DaggerSimpleComponent",
         "package test;",
         "",
         "import dagger.internal.InstanceFactory;",
@@ -978,11 +978,11 @@
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_SimpleComponent implements SimpleComponent {",
+        "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private Provider<SimpleComponent> simpleComponentProvider;",
         "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
-        "  private Dagger_SimpleComponent(Builder builder) {",
+        "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -1011,7 +1011,7 @@
         "    }",
         "",
         "    public SimpleComponent build() {",
-        "      return new Dagger_SimpleComponent(this);",
+        "      return new DaggerSimpleComponent(this);",
         "    }",
         "  }",
         "}");
@@ -1049,7 +1049,7 @@
         "  SomeInjectedType createAndInject();",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_SimpleComponent",
+        "test.DaggerSimpleComponent",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -1057,11 +1057,11 @@
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_SimpleComponent implements SimpleComponent {",
+        "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
         "  private Provider<SomeInjectedType> someInjectedTypeProvider;",
         "",
-        "  private Dagger_SimpleComponent(Builder builder) {",
+        "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -1091,7 +1091,7 @@
         "    }",
         "",
         "    public SimpleComponent build() {",
-        "      return new Dagger_SimpleComponent(this);",
+        "      return new DaggerSimpleComponent(this);",
         "    }",
         "  }",
         "}");
@@ -1126,7 +1126,7 @@
         "  SomeInjectableType someInjectableType();",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_SimpleComponent",
+        "test.DaggerSimpleComponent",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -1135,10 +1135,10 @@
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_SimpleComponent implements SimpleComponent {",
+        "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
-        "  private Dagger_SimpleComponent(Builder builder) {",
+        "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -1166,7 +1166,7 @@
         "    }",
         "",
         "    public SimpleComponent build() {",
-        "      return new Dagger_SimpleComponent(this);",
+        "      return new DaggerSimpleComponent(this);",
         "    }",
         "  }",
         "}");
@@ -1219,7 +1219,7 @@
         "  B b();",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_BComponent",
+        "test.DaggerBComponent",
         "package test;",
         "",
         "import dagger.internal.Factory;",
@@ -1227,11 +1227,11 @@
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_BComponent implements BComponent {",
+        "public final class DaggerBComponent implements BComponent {",
         "  private Provider<A> aProvider;",
         "  private Provider<B> bProvider;",
         "",
-        "  private Dagger_BComponent(Builder builder) {",
+        "  private DaggerBComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -1268,7 +1268,7 @@
         "      if (aComponent == null) {",
         "        throw new IllegalStateException(\"aComponent must be set\");",
         "      }",
-        "      return new Dagger_BComponent(this);",
+        "      return new DaggerBComponent(this);",
         "    }",
         "",
         "    public Builder aComponent(AComponent aComponent) {",
@@ -1331,7 +1331,7 @@
         "  other.test.A otherA();",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_TestComponent",
+        "test.DaggerTestComponent",
         "package test;",
         "",
         "import javax.annotation.Generated;",
@@ -1341,11 +1341,11 @@
         "import other.test.TestModule$$AFactory;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
+        "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<test.A> aProvider;",
         "  private Provider<A> aProvider1;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private DaggerTestComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -1387,7 +1387,7 @@
         "      if (testModule1 == null) {",
         "        this.testModule1 = new TestModule();",
         "      }",
-        "      return new Dagger_TestComponent(this);",
+        "      return new DaggerTestComponent(this);",
         "    }",
         "",
         "    public Builder testModule(test.TestModule testModule) {",
@@ -1462,19 +1462,19 @@
         "  X x();",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_TestComponent",
+        "test.DaggerTestComponent",
         "package test;",
         "",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
+        "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<B> bProvider;",
         "  private Provider<A> aProvider;",
         "  private Provider<X> xProvider;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private DaggerTestComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -1513,7 +1513,7 @@
         "    }",
         "",
         "    public TestComponent build() {",
-        "      return new Dagger_TestComponent(this);",
+        "      return new DaggerTestComponent(this);",
         "    }",
         "  }",
         "}");
@@ -1569,14 +1569,14 @@
         "interface SimpleComponent extends SupertypeA, SupertypeB {",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_SimpleComponent",
+        "test.DaggerSimpleComponent",
         "package test;",
         "",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private Dagger_SimpleComponent(Builder builder) {",
+        "public final class DaggerSimpleComponent implements SimpleComponent {",
+        "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -1601,7 +1601,7 @@
         "    }",
         "",
         "    public SimpleComponent build() {",
-        "      return new Dagger_SimpleComponent(this);",
+        "      return new DaggerSimpleComponent(this);",
         "    }",
         "  }",
         "}");
@@ -1657,14 +1657,14 @@
         "  SomeInjectableType someInjectableType();",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_SimpleComponent",
+        "test.DaggerSimpleComponent",
         "package test;",
         "",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private Dagger_SimpleComponent(Builder builder) {",
+        "public final class DaggerSimpleComponent implements SimpleComponent {",
+        "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -1689,7 +1689,7 @@
         "    }",
         "",
         "    public SimpleComponent build() {",
-        "      return new Dagger_SimpleComponent(this);",
+        "      return new DaggerSimpleComponent(this);",
         "    }",
         "  }",
         "}");
@@ -1791,17 +1791,17 @@ public void genericTestToLetMeDebugInEclipse() {
          "  Provider<B<A>> d2();",
          "}");
      JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-         "test.Dagger_SimpleComponent",
+         "test.DaggerSimpleComponent",
          "package test;",
          "",
          "import javax.annotation.Generated;",
          "import javax.inject.Provider;",
          "",
          "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-         "public final class Dagger_SimpleComponent implements SimpleComponent {",
+         "public final class DaggerSimpleComponent implements SimpleComponent {",
          "  private Provider<D> dProvider;",
          "",
-         "  private Dagger_SimpleComponent(Builder builder) {",
+         "  private DaggerSimpleComponent(Builder builder) {",
          "    assert builder != null;",
          "    initialize();",
          "  }",
@@ -1828,7 +1828,7 @@ public void genericTestToLetMeDebugInEclipse() {
          "    }",
          "",
          "    public SimpleComponent build() {",
-         "      return new Dagger_SimpleComponent(this);",
+         "      return new DaggerSimpleComponent(this);",
          "    }",
          "  }",
          "}");
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index fccfb3334..7593af507 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -108,7 +108,7 @@ public void mapBindingsWithEnumKey() {
         "interface TestComponent {",
         "  Map<PathEnum, Provider<Handler>> dispatcher();",
         "}");
-    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines("test.Dagger_TestComponent",
+    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines("test.DaggerTestComponent",
         "package test;",
         "",
         "import dagger.internal.MapProviderFactory;",
@@ -117,13 +117,13 @@ public void mapBindingsWithEnumKey() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
+        "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution2;",
         "  private Provider<Map<PathEnum, Provider<Handler>>>",
         "      mapOfPathEnumAndProviderOfHandlerProvider;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private DaggerTestComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -169,7 +169,7 @@ public void mapBindingsWithEnumKey() {
         "      if (mapModuleTwo == null) {",
         "        this.mapModuleTwo = new MapModuleTwo();",
         "      }",
-        "      return new Dagger_TestComponent(this);",
+        "      return new DaggerTestComponent(this);",
         "    }",
         "",
         "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
@@ -276,7 +276,7 @@ public void mapBindingsWithStringKey() {
         "interface TestComponent {",
         "  Map<String, Provider<Handler>> dispatcher();",
         "}");
-    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines("test.Dagger_TestComponent",
+    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines("test.DaggerTestComponent",
         "package test;",
         "",
         "import dagger.internal.MapProviderFactory;",
@@ -285,13 +285,13 @@ public void mapBindingsWithStringKey() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
+        "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfStringAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfStringAndProviderOfHandlerContribution2;",
         "  private Provider<Map<String, Provider<Handler>>>",
         "      mapOfStringAndProviderOfHandlerProvider;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private DaggerTestComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -335,7 +335,7 @@ public void mapBindingsWithStringKey() {
         "      if (mapModuleTwo == null) {",
         "        this.mapModuleTwo = new MapModuleTwo();",
         "      }",
-        "      return new Dagger_TestComponent(this);",
+        "      return new DaggerTestComponent(this);",
         "    }",
         "",
         "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
@@ -444,7 +444,7 @@ public void mapBindingsWithNonProviderValue() {
         "interface TestComponent {",
         "  Map<PathEnum, Handler> dispatcher();",
         "}");
-    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines("test.Dagger_TestComponent",
+    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines("test.DaggerTestComponent",
         "package test;",
         "",
         "import dagger.internal.MapFactory;",
@@ -454,14 +454,14 @@ public void mapBindingsWithNonProviderValue() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
+        "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution2;",
         "  private Provider<Map<PathEnum, Provider<Handler>>>",
         "      mapOfPathEnumAndProviderOfHandlerProvider;",
         "  private Provider<Map<PathEnum, Handler>> mapOfPathEnumAndHandlerProvider;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private DaggerTestComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -509,7 +509,7 @@ public void mapBindingsWithNonProviderValue() {
         "      if (mapModuleTwo == null) {",
         "        this.mapModuleTwo = new MapModuleTwo();",
         "      }",
-        "      return new Dagger_TestComponent(this);",
+        "      return new DaggerTestComponent(this);",
         "    }",
         "",
         "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
@@ -573,7 +573,7 @@ public void injectMapWithoutMapBinding() {
         "interface TestComponent {",
         "  Map<String, String> dispatcher();",
         "}");
-    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines("test.Dagger_TestComponent",
+    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines("test.DaggerTestComponent",
         "package test;",
         "",
         "import java.util.Map;",
@@ -581,10 +581,10 @@ public void injectMapWithoutMapBinding() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
+        "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Map<String, String>> provideAMapProvider;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private DaggerTestComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -616,7 +616,7 @@ public void injectMapWithoutMapBinding() {
         "      if (mapModule == null) {",
         "        this.mapModule = new MapModule();",
         "      }",
-        "      return new Dagger_TestComponent(this);",
+        "      return new DaggerTestComponent(this);",
         "    }",
         "",
         "    public Builder mapModule(MapModule mapModule) {",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
index 7f0178c85..1732b7d58 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -149,7 +149,7 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "interface TestComponent {",
         "  Map<PathKey, Provider<Handler>> dispatcher();",
         "}");
-    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines("test.Dagger_TestComponent",
+    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines("test.DaggerTestComponent",
         "package test;",
         "",
         "import dagger.internal.MapProviderFactory;",
@@ -158,13 +158,13 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
+        "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution2;",
         "  private Provider<Map<PathKey, Provider<Handler>>>",
         "      mapOfPathKeyAndProviderOfHandlerProvider;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private DaggerTestComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -210,7 +210,7 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "      if (mapModuleTwo == null) {",
         "        this.mapModuleTwo = new MapModuleTwo();",
         "      }",
-        "      return new Dagger_TestComponent(this);",
+        "      return new DaggerTestComponent(this);",
         "    }",
         "",
         "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
@@ -323,7 +323,7 @@ public void mapKeyComponentFileWithDefaultField() {
         "interface TestComponent {",
         "  Map<PathKey, Provider<Handler>> dispatcher();",
         "}");
-    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines("test.Dagger_TestComponent",
+    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines("test.DaggerTestComponent",
         "package test;",
         "",
         "import dagger.internal.MapProviderFactory;",
@@ -332,13 +332,13 @@ public void mapKeyComponentFileWithDefaultField() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
+        "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution2;",
         "  private Provider<Map<PathKey, Provider<Handler>>>",
         "      mapOfPathKeyAndProviderOfHandlerProvider;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private DaggerTestComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -384,7 +384,7 @@ public void mapKeyComponentFileWithDefaultField() {
         "      if (mapModuleTwo == null) {",
         "        this.mapModuleTwo = new MapModuleTwo();",
         "      }",
-        "      return new Dagger_TestComponent(this);",
+        "      return new DaggerTestComponent(this);",
         "    }",
         "",
         "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
index f02a9fc1f..0135e58e8 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
@@ -54,7 +54,7 @@ public void parentClass_noInjectedMembers() {
         "  Child child();",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_TestComponent",
+        "test.DaggerTestComponent",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -63,10 +63,10 @@ public void parentClass_noInjectedMembers() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
+        "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Child> childProvider;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private DaggerTestComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -94,7 +94,7 @@ public void parentClass_noInjectedMembers() {
         "    }",
         "",
         "    public TestComponent build() {",
-        "      return new Dagger_TestComponent(this);",
+        "      return new DaggerTestComponent(this);",
         "    }",
         "  }",
         "}");
@@ -142,7 +142,7 @@ public void parentClass_injectedMembersInSupertype() {
         "  Child child();",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_TestComponent",
+        "test.DaggerTestComponent",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -151,12 +151,12 @@ public void parentClass_injectedMembersInSupertype() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
+        "public final class DaggerTestComponent implements TestComponent {",
         "  private MembersInjector<Parent> parentMembersInjector;",
         "  private MembersInjector<Child> childMembersInjector;",
         "  private Provider<Child> childProvider;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private DaggerTestComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -185,7 +185,7 @@ public void parentClass_injectedMembersInSupertype() {
         "    }",
         "",
         "    public TestComponent build() {",
-        "      return new Dagger_TestComponent(this);",
+        "      return new DaggerTestComponent(this);",
         "    }",
         "  }",
         "}");
diff --git a/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java b/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
index a387f4221..956ff6cbe 100644
--- a/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
@@ -59,10 +59,10 @@
         "  PublicClass publicClass();",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_TestComponent",
+        "test.DaggerTestComponent",
         "package test;",
         "",
-        "import foreign.Dagger_TestComponent__PackageProxy;",
+        "import foreign.DaggerTestComponent__PackageProxy;",
         "import foreign.NoDepClass$$Factory;",
         "import foreign.NonPublicClass1$$Factory;",
         "import foreign.NonPublicClass2$$Factory;",
@@ -72,12 +72,12 @@
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final Dagger_TestComponent__PackageProxy foreign_Proxy =",
-        "      new Dagger_TestComponent__PackageProxy();",
+        "public final class DaggerTestComponent implements TestComponent {",
+        "  private final DaggerTestComponent__PackageProxy foreign_Proxy =",
+        "      new DaggerTestComponent__PackageProxy();",
         "  private Provider<PublicClass> publicClassProvider;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private DaggerTestComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -111,7 +111,7 @@
         "    }",
         "",
         "    public TestComponent build() {",
-        "      return new Dagger_TestComponent(this);",
+        "      return new DaggerTestComponent(this);",
         "    }",
         "  }",
         "}");
@@ -185,25 +185,25 @@
         "  void injectA(A a);",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_TestComponent",
+        "test.DaggerTestComponent",
         "package test;",
         "",
         "import dagger.MembersInjector;",
         "import foreign.B;",
         "import foreign.B$$MembersInjector;",
         "import foreign.C$$MembersInjector;",
-        "import foreign.Dagger_TestComponent__PackageProxy;",
+        "import foreign.DaggerTestComponent__PackageProxy;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
+        "public final class DaggerTestComponent implements TestComponent {",
         "  private MembersInjector<D> dMembersInjector;",
-        "  private final Dagger_TestComponent__PackageProxy foreign_Proxy =",
-        "      new Dagger_TestComponent__PackageProxy();",
+        "  private final DaggerTestComponent__PackageProxy foreign_Proxy =",
+        "      new DaggerTestComponent__PackageProxy();",
         "  private MembersInjector<B> bMembersInjector;",
         "  private MembersInjector<A> aMembersInjector;",
         "",
-        "  private Dagger_TestComponent(Builder builder) {",
+        "  private DaggerTestComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -236,7 +236,7 @@
         "    }",
         "",
         "    public TestComponent build() {",
-        "      return new Dagger_TestComponent(this);",
+        "      return new DaggerTestComponent(this);",
         "    }",
         "  }",
         "}");
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 381251de3..d30800df4 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -124,7 +124,7 @@
         "  }",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_TestClass_SimpleComponent",
+        "test.DaggerTestClass_SimpleComponent",
         "package test;",
         "",
         "import com.google.common.util.concurrent.ListenableFuture;",
@@ -140,11 +140,11 @@
         "import test.TestClass.SimpleComponent;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestClass_SimpleComponent implements SimpleComponent {",
+        "public final class DaggerTestClass_SimpleComponent implements SimpleComponent {",
         "  private Provider<B> bProvider;",
         "  private Producer<A> aProducer;",
         "",
-        "  private Dagger_TestClass_SimpleComponent(Builder builder) {",
+        "  private DaggerTestClass_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize(builder);",
         "  }",
@@ -183,7 +183,7 @@
         "      if (executor == null) {",
         "        throw new IllegalStateException(\"executor must be set\");",
         "      }",
-        "      return new Dagger_TestClass_SimpleComponent(this);",
+        "      return new DaggerTestClass_SimpleComponent(this);",
         "    }",
         "",
         "    public Builder aModule(AModule aModule) {",
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
index 4def47a1e..26c8e4e8c 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
@@ -68,18 +68,18 @@
       "}");
 
   JavaFileObject expectedComponent = JavaFileObjects.forSourceLines(
-      "test.Dagger_PrimitiveComponent",
+      "test.DaggerPrimitiveComponent",
       "package test;",
       "",
       "import javax.annotation.Generated;",
       "import javax.inject.Provider;",
       "",
       "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-      "public final class Dagger_PrimitiveComponent implements PrimitiveComponent {",
+      "public final class DaggerPrimitiveComponent implements PrimitiveComponent {",
       "  private Provider<Integer> primitiveIntProvider;",
       "  private Provider<PrimitiveInjectable> primitiveInjectableProvider;",
       "",
-      "  private Dagger_PrimitiveComponent(Builder builder) {",
+      "  private DaggerPrimitiveComponent(Builder builder) {",
       "    assert builder != null;",
       "    initialize(builder);",
       "  }",
@@ -119,7 +119,7 @@
       "      if (primitiveModule == null) {",
       "        this.primitiveModule = new PrimitiveModule();",
       "      }",
-      "      return new Dagger_PrimitiveComponent(this);",
+      "      return new DaggerPrimitiveComponent(this);",
       "    }",
       "",
       "    public Builder primitiveModule(PrimitiveModule primitiveModule) {",
diff --git a/core/src/main/java/dagger/Component.java b/core/src/main/java/dagger/Component.java
index eb0344749..637f60203 100644
--- a/core/src/main/java/dagger/Component.java
+++ b/core/src/main/java/dagger/Component.java
@@ -29,8 +29,8 @@
  * Annotates an interface or abstract class for which a fully-formed, dependency-injected
  * implementation is to be generated from a set of {@linkplain #modules}. The generated class will
  * have the name of the type annotated with {@code @Component} prepended with
- * {@code Dagger_}.  For example, {@code @Component interface MyComponent {...}} will
- * produce an implementation named {@code Dagger_MyComponent}.
+ * {@code Dagger}.  For example, {@code @Component interface MyComponent {...}} will
+ * produce an implementation named {@code DaggerMyComponent}.
  *
  * <h2>Component methods</h2>
  *
diff --git a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/DemoApplication.java b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/DemoApplication.java
index 23ac08fd8..72057332c 100644
--- a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/DemoApplication.java
+++ b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/DemoApplication.java
@@ -28,7 +28,7 @@
 
   @Override public void onCreate() {
     super.onCreate();
-    applicationComponent = Dagger_ApplicationComponent.builder()
+    applicationComponent = DaggerApplicationComponent.builder()
         .demoApplicationModule(new DemoApplicationModule(this))
         .build();
   }
diff --git a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ui/HomeActivity.java b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ui/HomeActivity.java
index f0bd87815..1f3bb7002 100644
--- a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ui/HomeActivity.java
+++ b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ui/HomeActivity.java
@@ -28,7 +28,7 @@
 
   HomeComponent component() {
     if (component == null) {
-      component = Dagger_HomeComponent.builder()
+      component = DaggerHomeComponent.builder()
           .applicationComponent(((DemoApplication) getApplication()).component())
           .activityModule(new ActivityModule(this))
           .build();
diff --git a/examples/android-simple/src/main/java/com/example/dagger/simple/DemoApplication.java b/examples/android-simple/src/main/java/com/example/dagger/simple/DemoApplication.java
index 0a08d987b..55402c654 100644
--- a/examples/android-simple/src/main/java/com/example/dagger/simple/DemoApplication.java
+++ b/examples/android-simple/src/main/java/com/example/dagger/simple/DemoApplication.java
@@ -40,7 +40,7 @@
 
   @Override public void onCreate() {
     super.onCreate();
-    component = Dagger_DemoApplication_ApplicationComponent.builder()
+    component = DaggerDemoApplication_ApplicationComponent.builder()
         .androidModule(new AndroidModule(this))
         .build();
     component().inject(this); // As of now, LocationManager should be injected into this.
diff --git a/examples/simple/src/main/java/coffee/CoffeeApp.java b/examples/simple/src/main/java/coffee/CoffeeApp.java
index 0789a86f1..b0a93ec3c 100644
--- a/examples/simple/src/main/java/coffee/CoffeeApp.java
+++ b/examples/simple/src/main/java/coffee/CoffeeApp.java
@@ -11,7 +11,7 @@
   }
 
   public static void main(String[] args) {
-    Coffee coffee = Dagger_CoffeeApp_Coffee.builder().build();
+    Coffee coffee = DaggerCoffeeApp_Coffee.builder().build();
     coffee.maker().brew();
   }
 }
diff --git a/producers/src/main/java/dagger/producers/Producer.java b/producers/src/main/java/dagger/producers/Producer.java
index cccf78376..fdf7dddcf 100644
--- a/producers/src/main/java/dagger/producers/Producer.java
+++ b/producers/src/main/java/dagger/producers/Producer.java
@@ -65,7 +65,7 @@
  * Suppose we instantiate the generated implementation of this component and call
  * {@code delayedC()}: <pre>   {@code
  *
- *   MyComponent component = Dagger_MyComponent
+ *   MyComponent component = DaggerMyComponent
  *       .builder()
  *       .executor(MoreExecutors.directExecutor())
  *       .build();
diff --git a/producers/src/main/java/dagger/producers/ProductionComponent.java b/producers/src/main/java/dagger/producers/ProductionComponent.java
index b6376b0b0..02ba7c879 100644
--- a/producers/src/main/java/dagger/producers/ProductionComponent.java
+++ b/producers/src/main/java/dagger/producers/ProductionComponent.java
@@ -29,8 +29,8 @@
  * Annotates an interface or abstract class for which a fully-formed, dependency-injected
  * implementation is to be generated from a set of {@linkplain #modules}. The generated class will
  * have the name of the type annotated with {@code @ProductionComponent} prepended with
- * {@code Dagger_}.  For example, {@code @ProductionComponent interface MyComponent {...}} will
- * produce an implementation named {@code Dagger_MyComponent}.
+ * {@code Dagger}.  For example, {@code @ProductionComponent interface MyComponent {...}} will
+ * produce an implementation named {@code DaggerMyComponent}.
  *
  * <p>Each {@link Produces} method that contributes to the component will be called at most once per
  * component instance, no matter how many times that binding is used as a dependency.
