diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
index a168088ab..129a3d255 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -38,7 +38,6 @@
 import dagger.internal.codegen.ComponentDescriptor.BuilderSpec;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import dagger.internal.codegen.ContributionBinding.BindingType;
-import dagger.internal.codegen.ValidationReport.Builder;
 import dagger.internal.codegen.writer.TypeNames;
 import java.util.ArrayDeque;
 import java.util.Collection;
@@ -121,7 +120,7 @@
       return reportBuilder.build();
     }
 
-    void validate(BindingGraph subject) {
+    void validateSubgraph(BindingGraph subject) {
       validateComponentScope(subject);
       validateDependencyScopes(subject);
       validateBuilders(subject);
@@ -136,7 +135,9 @@ void validate(BindingGraph subject) {
         }
       }
 
-      validateSubcomponents(subject);
+      for (BindingGraph subgraph : subject.subgraphs().values()) {
+        validateSubgraph(subgraph);
+      }
     }
 
     private void traverseRequest(
@@ -170,12 +171,6 @@ private void traverseRequest(
       }
     }
 
-    private void validateSubcomponents(BindingGraph graph) {
-      for (Entry<ExecutableElement, BindingGraph> subgraphEntry : graph.subgraphs().entrySet()) {
-        validate(subgraphEntry.getValue());
-      }
-    }
-
     /**
      * Validates that the set of bindings resolved is consistent with the type of the binding, and
      * returns true if the bindings are valid.
@@ -737,7 +732,7 @@ private void reportCycle(DependencyRequest request, Deque<ResolvedRequest> path)
   @Override
   public ValidationReport<BindingGraph> validate(final BindingGraph subject) {
     Validation validation = new Validation(subject);
-    validation.validate(subject);
+    validation.validateSubgraph(subject);
     return validation.buildReport();
   }
 
