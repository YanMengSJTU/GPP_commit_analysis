diff --git a/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java b/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
index 377ca0538..077840390 100644
--- a/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
+++ b/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
@@ -67,13 +67,14 @@
   }
 
   /** Returns a new creator implementation for the given component, if necessary. */
-  Optional<ComponentCreatorImplementation> create(ComponentImplementation componentImplementation) {
-    if (!componentImplementation.graph().componentDescriptor().hasCreator()) {
+  Optional<ComponentCreatorImplementation> create(
+      ComponentImplementation componentImplementation, BindingGraph graph) {
+    if (!componentImplementation.componentDescriptor().hasCreator()) {
       return Optional.empty();
     }
 
     Optional<ComponentCreatorDescriptor> creatorDescriptor =
-        componentImplementation.graph().componentDescriptor().creatorDescriptor();
+        componentImplementation.componentDescriptor().creatorDescriptor();
 
     if (componentImplementation.isAbstract()
         && (hasNoSetterMethods(creatorDescriptor)
@@ -91,7 +92,8 @@
 
     Builder builder =
         creatorDescriptor.isPresent()
-            ? new BuilderForCreatorDescriptor(componentImplementation, creatorDescriptor.get())
+            ? new BuilderForCreatorDescriptor(
+                componentImplementation, creatorDescriptor.get(), graph)
             : new BuilderForGeneratedRootComponentBuilder(componentImplementation);
     return Optional.of(builder.build());
   }
@@ -126,9 +128,9 @@ ComponentCreatorImplementation build() {
       return ComponentCreatorImplementation.create(classBuilder.build(), className, fields);
     }
 
-    /** Returns the binding graph for the component. */
-    final BindingGraph graph() {
-      return componentImplementation.graph();
+    /** Returns the descriptor for the component. */
+    final ComponentDescriptor componentDescriptor() {
+      return componentImplementation.componentDescriptor();
     }
 
     /**
@@ -286,7 +288,9 @@ private void addFactoryMethod() {
 
     MethodSpec factoryMethod() {
       MethodSpec.Builder factoryMethod = factoryMethodBuilder();
-      factoryMethod.returns(ClassName.get(graph().componentTypeElement())).addModifiers(PUBLIC);
+      factoryMethod
+          .returns(ClassName.get(componentDescriptor().typeElement()))
+          .addModifiers(PUBLIC);
 
       ImmutableMap<ComponentRequirement, String> factoryMethodParameters =
           factoryMethodParameters();
@@ -374,12 +378,15 @@ private CodeBlock newModuleInstance(ComponentRequirement requirement) {
   /** Builder for a creator type defined by a {@code ComponentCreatorDescriptor}. */
   private final class BuilderForCreatorDescriptor extends Builder {
     final ComponentCreatorDescriptor creatorDescriptor;
+    private final BindingGraph graph;
 
     BuilderForCreatorDescriptor(
         ComponentImplementation componentImplementation,
-        ComponentCreatorDescriptor creatorDescriptor) {
+        ComponentCreatorDescriptor creatorDescriptor,
+        BindingGraph graph) {
       super(componentImplementation);
       this.creatorDescriptor = creatorDescriptor;
+      this.graph = graph;
     }
 
     @Override
@@ -469,7 +476,7 @@ final boolean isRepeatedModule(ComponentRequirement requirement) {
      * Returns whether the given {@code requirement} is for a module type owned by the component.
      */
     private boolean isOwnedModule(ComponentRequirement requirement) {
-      return graph().ownedModuleTypes().contains(requirement.typeElement());
+      return graph.ownedModuleTypes().contains(requirement.typeElement());
     }
 
     private boolean hasBaseCreatorImplementation() {
@@ -525,7 +532,7 @@ protected void addConstructor() {
 
     @Override
     protected ImmutableSet<ComponentRequirement> setterMethods() {
-      return graph().componentDescriptor().dependenciesAndConcreteModules();
+      return componentDescriptor().dependenciesAndConcreteModules();
     }
 
     @Override
diff --git a/java/dagger/internal/codegen/ComponentImplementationBuilder.java b/java/dagger/internal/codegen/ComponentImplementationBuilder.java
index abd4342eb..19cf55b06 100644
--- a/java/dagger/internal/codegen/ComponentImplementationBuilder.java
+++ b/java/dagger/internal/codegen/ComponentImplementationBuilder.java
@@ -115,7 +115,8 @@ final ComponentImplementation build() {
         componentImplementation.name());
     setSupertype();
     componentImplementation.setCreatorImplementation(
-        componentCreatorImplementationFactory.create(componentImplementation));
+        componentCreatorImplementationFactory.create(
+            componentImplementation, componentImplementation.graph()));
     componentImplementation
         .creatorImplementation()
         .map(ComponentCreatorImplementation::spec)
