diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java b/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java
index cf01552cc..85b105657 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java
@@ -16,6 +16,7 @@
  */
 package dagger.internal.codegen;
 
+import com.google.auto.common.SuperficialValidation;
 import com.google.auto.service.AutoService;
 import com.squareup.javawriter.JavaWriter;
 import dagger.MembersInjector;
@@ -25,7 +26,6 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collection;
 import java.util.EnumSet;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
@@ -44,7 +44,6 @@
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
-import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.tools.Diagnostic;
 import javax.tools.JavaFileObject;
@@ -86,12 +85,7 @@
     for (Iterator<String> i = remainingTypeNames.iterator(); i.hasNext();) {
       InjectedClass injectedClass = createInjectedClass(i.next());
       // Verify that we have access to all types to be injected on this pass.
-      boolean missingDependentClasses =
-          !allTypesExist(injectedClass.fields)
-          || (injectedClass.constructor != null && !allTypesExist(injectedClass.constructor
-              .getParameters()))
-          || !allTypesExist(injectedClass.staticFields);
-      if (!missingDependentClasses) {
+      if (SuperficialValidation.validateElement(injectedClass.type)) {
         try {
           generateInjectionsForClass(injectedClass);
         } catch (IOException e) {
@@ -116,19 +110,6 @@ private void generateInjectionsForClass(InjectedClass injectedClass) throws IOEx
     }
   }
 
-  /**
-   * Return true if all element types are currently available in this code
-   * generation pass. Unavailable types will be of kind {@link TypeKind#ERROR}.
-   */
-  private boolean allTypesExist(Collection<? extends Element> elements) {
-    for (Element element : elements) {
-      if (element.asType().getKind() == TypeKind.ERROR) {
-        return false;
-      }
-    }
-    return true;
-  }
-
   private Set<String> findInjectedClassNames(RoundEnvironment env) {
     // First gather the set of classes that have @Inject-annotated members.
     Set<String> injectedTypeNames = new LinkedHashSet<String>();
