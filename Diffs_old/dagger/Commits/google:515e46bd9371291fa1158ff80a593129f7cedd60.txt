diff --git a/java/dagger/internal/codegen/DaggerStatistics.java b/java/dagger/internal/codegen/DaggerStatistics.java
index 790ec7654..5a2f0efea 100644
--- a/java/dagger/internal/codegen/DaggerStatistics.java
+++ b/java/dagger/internal/codegen/DaggerStatistics.java
@@ -21,6 +21,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
+import com.google.errorprone.annotations.CheckReturnValue;
 import java.time.Duration;
 
 /** Statistics collected over the course of Dagger annotation processing. */
@@ -42,24 +43,37 @@ static Builder builder() {
   /** List of statistics for processing rounds that the Dagger processor handled. */
   abstract ImmutableList<RoundStatistics> rounds();
 
+  /** Records the number of {@code @Inject} constructor factories generated in this compilation. */
+  abstract int injectFactoriesGenerated();
+
+  /** Records the number of {@link dagger.MembersInjector}s generated in this compilation. */
+  abstract int membersInjectorsGenerated();
+
   /** Builder for {@link DaggerStatistics}. */
   @AutoValue.Builder
+  @CanIgnoreReturnValue
   abstract static class Builder {
     /** Sets the given duration for the total time spent in Dagger processing. */
-    @CanIgnoreReturnValue
     abstract Builder setTotalProcessingTime(Duration totalProcessingTime);
 
     /** Returns a builder for adding processing round statistics. */
+    @CheckReturnValue
     abstract ImmutableList.Builder<RoundStatistics> roundsBuilder();
 
     /** Adds the given {@code round} statistics. */
-    @CanIgnoreReturnValue
     final Builder addRound(RoundStatistics round) {
       roundsBuilder().add(round);
       return this;
     }
 
+    /** Sets the number of {@code @Inject} constructor factories generated in this compilation. */
+    abstract Builder setInjectFactoriesGenerated(int count);
+
+    /** Sets the number of {@link dagger.MembersInjector}s generated in this compilation. */
+    abstract Builder setMembersInjectorsGenerated(int count);
+
     /** Creates a new {@link DaggerStatistics} instance. */
+    @CheckReturnValue
     abstract DaggerStatistics build();
   }
 
diff --git a/java/dagger/internal/codegen/DaggerStatisticsCollector.java b/java/dagger/internal/codegen/DaggerStatisticsCollector.java
index e14fbb759..b056ae131 100644
--- a/java/dagger/internal/codegen/DaggerStatisticsCollector.java
+++ b/java/dagger/internal/codegen/DaggerStatisticsCollector.java
@@ -41,6 +41,8 @@
   private DaggerStatistics.RoundStatistics.Builder roundBuilder = DaggerStatistics.roundBuilder();
 
   private final Optional<DaggerStatisticsRecorder> statisticsRecorder;
+  private int injectFactoriesGenerated;
+  private int membersInjectorsGenerated;
 
   @Inject
   DaggerStatisticsCollector(Ticker ticker, Optional<DaggerStatisticsRecorder> statisticsRecorder) {
@@ -79,12 +81,23 @@ void roundFinished() {
   void processingStopped() {
     checkState(totalRuntimeStopwatch.isRunning());
     totalRuntimeStopwatch.stop();
-    statisticsBuilder.setTotalProcessingTime(elapsedTime(totalRuntimeStopwatch));
+    statisticsBuilder
+        .setTotalProcessingTime(elapsedTime(totalRuntimeStopwatch))
+        .setInjectFactoriesGenerated(injectFactoriesGenerated)
+        .setMembersInjectorsGenerated(membersInjectorsGenerated);
 
     statisticsRecorder.ifPresent(
         recorder -> recorder.recordStatistics(statisticsBuilder.build()));
   }
 
+  void recordInjectFactoryGenerated() {
+    injectFactoriesGenerated++;
+  }
+
+  void recordMembersInjectorGenerated() {
+    membersInjectorsGenerated++;
+  }
+
   @SuppressWarnings("StopwatchNanosToDuration") // intentional
   private Duration elapsedTime(Stopwatch stopwatch) {
     // Using the java 7 method here as opposed to the Duration-returning version to avoid issues
diff --git a/java/dagger/internal/codegen/FactoryGenerator.java b/java/dagger/internal/codegen/FactoryGenerator.java
index d367bc532..31fe2007a 100644
--- a/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/java/dagger/internal/codegen/FactoryGenerator.java
@@ -35,6 +35,7 @@
 import static dagger.internal.codegen.javapoet.AnnotationSpecs.suppressWarnings;
 import static dagger.internal.codegen.javapoet.CodeBlocks.makeParametersCodeBlock;
 import static dagger.internal.codegen.javapoet.TypeNames.factoryOf;
+import static dagger.model.BindingKind.INJECTION;
 import static dagger.model.BindingKind.PROVISION;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
@@ -74,6 +75,7 @@
   private final DaggerTypes types;
   private final DaggerElements elements;
   private final CompilerOptions compilerOptions;
+  private final DaggerStatisticsCollector statisticsCollector;
 
   @Inject
   FactoryGenerator(
@@ -81,11 +83,13 @@
       SourceVersion sourceVersion,
       DaggerTypes types,
       DaggerElements elements,
-      CompilerOptions compilerOptions) {
+      CompilerOptions compilerOptions,
+      DaggerStatisticsCollector statisticsCollector) {
     super(filer, elements, sourceVersion);
     this.types = types;
     this.elements = elements;
     this.compilerOptions = compilerOptions;
+    this.statisticsCollector = statisticsCollector;
   }
 
   @Override
@@ -105,9 +109,15 @@ Element originatingElement(ProvisionBinding binding) {
     checkArgument(!binding.unresolved().isPresent());
     checkArgument(binding.bindingElement().isPresent());
 
-    return binding.factoryCreationStrategy().equals(DELEGATE)
-        ? Optional.empty()
-        : Optional.of(factoryBuilder(binding));
+    if (binding.factoryCreationStrategy().equals(DELEGATE)) {
+      return Optional.empty();
+    }
+
+    if (binding.kind().equals(INJECTION)) {
+      statisticsCollector.recordInjectFactoryGenerated();
+    }
+
+    return Optional.of(factoryBuilder(binding));
   }
 
   private TypeSpec.Builder factoryBuilder(ProvisionBinding binding) {
diff --git a/java/dagger/internal/codegen/MembersInjectorGenerator.java b/java/dagger/internal/codegen/MembersInjectorGenerator.java
index 4360af7f8..4ad709011 100644
--- a/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/java/dagger/internal/codegen/MembersInjectorGenerator.java
@@ -66,13 +66,19 @@
 final class MembersInjectorGenerator extends SourceFileGenerator<MembersInjectionBinding> {
   private final DaggerTypes types;
   private final DaggerElements elements;
+  private final DaggerStatisticsCollector statisticsCollector;
 
   @Inject
   MembersInjectorGenerator(
-      Filer filer, DaggerElements elements, DaggerTypes types, SourceVersion sourceVersion) {
+      Filer filer,
+      DaggerElements elements,
+      DaggerTypes types,
+      SourceVersion sourceVersion,
+      DaggerStatisticsCollector statisticsCollector) {
     super(filer, elements, sourceVersion);
     this.types = types;
     this.elements = elements;
+    this.statisticsCollector = statisticsCollector;
   }
 
   @Override
@@ -91,6 +97,9 @@ Element originatingElement(MembersInjectionBinding binding) {
     if (binding.injectionSites().isEmpty()) {
       return Optional.empty();
     }
+    
+    statisticsCollector.recordMembersInjectorGenerated();
+
     // We don't want to write out resolved bindings -- we want to write out the generic version.
     checkState(
         !binding.unresolved().isPresent(),
diff --git a/java/dagger/internal/codegen/dagger_statistics.proto b/java/dagger/internal/codegen/dagger_statistics.proto
index 273e47204..34edc4771 100644
--- a/java/dagger/internal/codegen/dagger_statistics.proto
+++ b/java/dagger/internal/codegen/dagger_statistics.proto
@@ -8,6 +8,8 @@ import "google/protobuf/duration.proto";
 message DaggerBuildStatistics {
   optional google.protobuf.Duration total_processing_time = 1;
   repeated DaggerRound rounds = 2;
+  optional int32 inject_factories_generated = 3;
+  optional int32 members_injectors_generated = 4;
 }
 
 // Duration of each Dagger ProcessingStep for a single annotation processing
