diff --git a/compiler/src/it/functional-tests/src/main/java/test/BoundedGenericModule.java b/compiler/src/it/functional-tests/src/main/java/test/BoundedGenericModule.java
index 800125aa1..963e0325c 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/BoundedGenericModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/BoundedGenericModule.java
@@ -20,6 +20,7 @@
 import dagger.Module;
 import dagger.Provides;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
@@ -44,18 +45,18 @@ Double provideDouble() {
 
   @Provides
   LinkedList<String> provideLinkedListString() {
-    return Lists.newLinkedList("linkedListOfString");
+    return BoundedGenericModule.newLinkedList("linkedListOfString");
   }
 
   @Provides
   LinkedList<CharSequence> provideLinkedListCharSeq() {
-    return Lists.<CharSequence>newLinkedList("linkedListOfCharSeq");
+    return BoundedGenericModule.<CharSequence>newLinkedList("linkedListOfCharSeq");
   }
 
   @Provides
   @SuppressWarnings("unchecked")
   LinkedList<Comparable<String>> provideArrayListOfComparableString() {
-    return Lists.<Comparable<String>>newLinkedList("arrayListOfComparableOfString");
+    return BoundedGenericModule.<Comparable<String>>newLinkedList("arrayListOfComparableOfString");
   }
 
   @Provides
@@ -67,4 +68,10 @@ Double provideDouble() {
   Set<Double> provideSetOfDouble() {
     return Sets.newHashSet(4d);
   }
+
+  private static <E> LinkedList<E> newLinkedList(E... elements) {
+    LinkedList<E> list = Lists.newLinkedList();
+    Collections.addAll(list, elements);
+    return list;
+  }
 }
