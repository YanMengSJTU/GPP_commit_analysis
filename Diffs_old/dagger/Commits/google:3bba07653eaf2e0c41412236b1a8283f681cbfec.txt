diff --git a/java/dagger/internal/codegen/ComponentImplementation.java b/java/dagger/internal/codegen/ComponentImplementation.java
index 1fa96a834..aa7f461dd 100644
--- a/java/dagger/internal/codegen/ComponentImplementation.java
+++ b/java/dagger/internal/codegen/ComponentImplementation.java
@@ -25,6 +25,7 @@
 import static com.squareup.javapoet.TypeSpec.classBuilder;
 import static dagger.internal.codegen.Accessibility.isTypeAccessibleFrom;
 import static dagger.internal.codegen.ComponentCreatorKind.BUILDER;
+import static java.util.stream.Collectors.toList;
 import static javax.lang.model.element.Modifier.ABSTRACT;
 
 import com.google.auto.value.AutoValue;
@@ -195,9 +196,7 @@ static ConfigureInitializationMethod create(
       MultimapBuilder.enumKeys(TypeSpecKind.class).arrayListValues().build();
   private final List<Supplier<TypeSpec>> switchingProviderSupplier = new ArrayList<>();
   private final ModifiableBindingMethods modifiableBindingMethods = new ModifiableBindingMethods();
-  // TODO(b/117833324): can this just be a Set instead of a SetMultimap? The values should be
-  // implicit
-  private final SetMultimap<BindingRequest, DependencyRequest> multibindingContributionsMade =
+  private final SetMultimap<BindingRequest, Key> multibindingContributionsMade =
       HashMultimap.create();
   private Optional<ConfigureInitializationMethod> configureInitializationMethod = Optional.empty();
   private final Map<ComponentRequirement, String> modifiableModuleMethods = new LinkedHashMap<>();
@@ -443,11 +442,6 @@ void addMethod(MethodSpecKind methodKind, MethodSpec methodSpec) {
     methodSpecsMap.put(methodKind, methodSpec);
   }
 
-  /** Adds the given methods to the component. */
-  void addMethods(MethodSpecKind methodKind, Iterable<MethodSpec> methodSpecs) {
-    methodSpecsMap.putAll(methodKind, methodSpecs);
-  }
-
   /** Adds the given annotation to the component. */
   void addAnnotation(AnnotationSpec annotation) {
     component.addAnnotation(annotation);
@@ -500,11 +494,6 @@ void addType(TypeSpecKind typeKind, TypeSpec typeSpec) {
     typeSpecsMap.put(typeKind, typeSpec);
   }
 
-  /** Adds the given types to the component. */
-  void addTypes(TypeSpecKind typeKind, Iterable<TypeSpec> typeSpecs) {
-    typeSpecsMap.putAll(typeKind, typeSpecs);
-  }
-
   /** Adds the type generated from the given child implementation. */
   void addChild(ComponentDescriptor child, ComponentImplementation childImplementation) {
     childImplementations.put(child.typeElement(), childImplementation);
@@ -740,7 +729,9 @@ void registerImplementedMultibinding(
     // We register a multibinding as implemented each time we request the multibinding expression,
     // so only modify the set of contributions once.
     if (!multibindingContributionsMade.containsKey(bindingRequest)) {
-      multibindingContributionsMade.putAll(bindingRequest, multibinding.dependencies());
+      multibindingContributionsMade.putAll(
+          bindingRequest,
+          multibinding.dependencies().stream().map(DependencyRequest::key).collect(toList()));
     }
   }
 
@@ -748,7 +739,7 @@ void registerImplementedMultibinding(
    * Returns the set of multibinding contributions associated with all superclass implementations of
    * a multibinding.
    */
-  ImmutableSet<DependencyRequest> superclassContributionsMade(BindingRequest bindingRequest) {
+  ImmutableSet<Key> superclassContributionsMade(BindingRequest bindingRequest) {
     return superclassImplementation
         .map(s -> s.getAllMultibindingContributions(bindingRequest))
         .orElse(ImmutableSet.of());
@@ -758,8 +749,7 @@ void registerImplementedMultibinding(
    * Returns the set of multibinding contributions associated with all implementations of a
    * multibinding.
    */
-  private ImmutableSet<DependencyRequest> getAllMultibindingContributions(
-      BindingRequest bindingRequest) {
+  private ImmutableSet<Key> getAllMultibindingContributions(BindingRequest bindingRequest) {
     return ImmutableSet.copyOf(
         Sets.union(
             multibindingContributionsMade.get(bindingRequest),
diff --git a/java/dagger/internal/codegen/ModifiableBindingExpressions.java b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
index 8919ed7d4..eb699e587 100644
--- a/java/dagger/internal/codegen/ModifiableBindingExpressions.java
+++ b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
@@ -19,6 +19,7 @@
 import static com.google.common.base.Preconditions.checkState;
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.BindingRequest.bindingRequest;
+import static java.util.stream.Collectors.toList;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PROTECTED;
 import static javax.lang.model.element.Modifier.PUBLIC;
@@ -440,7 +441,10 @@ private boolean shouldModifyImplementation(
         // Only modify a multibinding if there are new contributions.
         return !componentImplementation
             .superclassContributionsMade(request)
-            .containsAll(resolvedBindings.contributionBinding().dependencies());
+            .containsAll(
+                resolvedBindings.contributionBinding().dependencies().stream()
+                    .map(DependencyRequest::key)
+                    .collect(toList()));
 
       case INJECTION:
         return !resolvedBindings.contributionBinding().kind().equals(BindingKind.INJECTION);
diff --git a/java/dagger/internal/codegen/MultibindingExpression.java b/java/dagger/internal/codegen/MultibindingExpression.java
index 34a19ab02..d5439ec94 100644
--- a/java/dagger/internal/codegen/MultibindingExpression.java
+++ b/java/dagger/internal/codegen/MultibindingExpression.java
@@ -16,17 +16,16 @@
 
 package dagger.internal.codegen;
 
-import static dagger.internal.codegen.BindingRequest.bindingRequest;
-
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
-import com.google.common.collect.Sets.SetView;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import dagger.internal.codegen.ModifiableBindingMethods.ModifiableBindingMethod;
 import dagger.model.DependencyRequest;
+import dagger.model.Key;
 import dagger.model.RequestKind;
 import java.util.Optional;
+import java.util.Set;
 
 /** An abstract base class for multibinding {@link BindingExpression}s. */
 abstract class MultibindingExpression extends SimpleInvocationBindingExpression {
@@ -60,9 +59,11 @@ Expression getDependencyExpression(ClassName requestingClass) {
    * one implementation of a multibinding expression and all {@link DependencyRequest}s from the
    * argment are returned.
    */
-  protected SetView<DependencyRequest> getNewContributions(
+  protected Set<DependencyRequest> getNewContributions(
       ImmutableSet<DependencyRequest> dependencies) {
-    return Sets.difference(dependencies, superclassContributions());
+    ImmutableSet<Key> superclassContributions = superclassContributions();
+    return Sets.filter(
+        dependencies, dependency -> !superclassContributions.contains(dependency.key()));
   }
 
   /**
@@ -87,7 +88,7 @@ private BindingRequest bindingRequest() {
     return BindingRequest.bindingRequest(binding.key(), RequestKind.INSTANCE);
   }
 
-  private ImmutableSet<DependencyRequest> superclassContributions() {
+  private ImmutableSet<Key> superclassContributions() {
     return componentImplementation.superclassContributionsMade(bindingRequest());
   }
 }
diff --git a/java/dagger/internal/codegen/MultibindingFactoryCreationExpression.java b/java/dagger/internal/codegen/MultibindingFactoryCreationExpression.java
index e01d8d17a..43e69785a 100644
--- a/java/dagger/internal/codegen/MultibindingFactoryCreationExpression.java
+++ b/java/dagger/internal/codegen/MultibindingFactoryCreationExpression.java
@@ -57,9 +57,7 @@ protected final CodeBlock multibindingDependencyExpression(
 
   protected final ImmutableSet<FrameworkDependency> frameworkDependenciesToImplement() {
     ImmutableSet<Key> alreadyImplementedKeys =
-        componentImplementation.superclassContributionsMade(bindingRequest()).stream()
-            .map(dependency -> dependency.key())
-            .collect(toImmutableSet());
+        componentImplementation.superclassContributionsMade(bindingRequest());
     return binding.frameworkDependencies().stream()
         .filter(frameworkDependency -> !alreadyImplementedKeys.contains(frameworkDependency.key()))
         .collect(toImmutableSet());
