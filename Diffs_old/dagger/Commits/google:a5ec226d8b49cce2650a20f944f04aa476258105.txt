diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java
index ebb067d6f..504139aa2 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java
@@ -18,7 +18,7 @@
 import dagger.Component;
 import javax.inject.Singleton;
 
-@Component(modules = ParentModule.class)
+@Component(modules = {ParentModule.class, UnresolvableChildComponentModule.class})
 @Singleton
 interface ParentComponent extends ParentGetters {
   ChildComponent newChildComponent();
@@ -28,4 +28,10 @@
   ChildComponentRequiringModules newChildComponentRequiringModules(
       ChildModuleWithParameters cmwp,
       ChildModuleWithState childModuleWithState);
+
+  /**
+   * Requests a qualified version of this subcomponent builder, which does not install it as a
+   * subcomponent, but instead, uses the explicit binding of this qualified builder.
+   */
+  @SomeQualifier UnresolvableChildComponent.Builder unresolvableChildComponentBuilder();
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/SomeQualifier.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/SomeQualifier.java
new file mode 100644
index 000000000..83606e538
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/SomeQualifier.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2016 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.subcomponent;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import javax.inject.Qualifier;
+
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+@Documented
+@Retention(RUNTIME)
+@Qualifier
+@interface SomeQualifier {}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/Unbound.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/Unbound.java
new file mode 100644
index 000000000..c4cb79a5f
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/Unbound.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2016 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.subcomponent;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import javax.inject.Qualifier;
+
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * A qualifier representing an unbound type, to verify that the compiler does not attempt to
+ * generate code depending on it.
+ */
+@Documented
+@Retention(RUNTIME)
+@Qualifier
+@interface Unbound {}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnresolvableChildComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnresolvableChildComponent.java
new file mode 100644
index 000000000..8e19b5e86
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnresolvableChildComponent.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2016 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.subcomponent;
+
+import dagger.Subcomponent;
+
+/**
+ * A subcomponent that's not resolvable in any parent component, for testing that qualified methods
+ * on components that return subcomponents do not trigger actual subcomponents.
+ */
+@Subcomponent
+interface UnresolvableChildComponent {
+  /**
+   * Requests a type that is never bound in any component that this subcomponent might be installed
+   * in. If this subcomponent is ever attempted to be installed in a component, then it will produce
+   * a compiler error.
+   */
+  @Unbound
+  String unboundString();
+
+  @Subcomponent.Builder
+  interface Builder {
+    UnresolvableChildComponent build();
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnresolvableChildComponentModule.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnresolvableChildComponentModule.java
new file mode 100644
index 000000000..0c273f737
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnresolvableChildComponentModule.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2016 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.subcomponent;
+
+import dagger.Module;
+import dagger.Provides;
+
+@Module
+final class UnresolvableChildComponentModule {
+  /**
+   * Provides a qualified version of the {@link UnresolvableChildComponent}'s builder. If the
+   * subcomponent were actually installed in a component, this would be a duplicate binding; but
+   * since that doesn't happen, this binding is OK.
+   */
+  @Provides
+  @SomeQualifier
+  static UnresolvableChildComponent.Builder unresolvableChildComponentBuilder() {
+    return new UnresolvableChildComponent.Builder() {
+      @Override
+      public UnresolvableChildComponent build() {
+        return new UnresolvableChildComponent() {
+          @Override
+          public String unboundString() {
+            return "unbound";
+          }
+        };
+      }
+    };
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentTest.java b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentTest.java
index cb6292513..ee89254b0 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentTest.java
@@ -111,5 +111,11 @@ public void passedModules() {
   @Test
   public void dependenceisInASubcomponent() {
     assertThat(childComponent.newGrandchildComponent().needsAnInterface()).isNotNull();
-  }  
+  }
+
+  @Test
+  public void qualifiedSubcomponentIsBound() {
+    assertThat(parentComponent.unresolvableChildComponentBuilder().build().unboundString())
+        .isEqualTo("unbound");
+  }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
index 5d929868f..8552fe7e8 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -61,6 +61,7 @@
 import static dagger.internal.codegen.ConfigurationAnnotations.enclosedBuilders;
 import static dagger.internal.codegen.ConfigurationAnnotations.getComponentDependencies;
 import static dagger.internal.codegen.ConfigurationAnnotations.getComponentModules;
+import static dagger.internal.codegen.InjectionAnnotations.getQualifier;
 import static javax.lang.model.type.TypeKind.DECLARED;
 import static javax.lang.model.type.TypeKind.VOID;
 
@@ -501,21 +502,23 @@ private ComponentMethodDescriptor getDescriptorForComponentMethod(
               componentMethod,
               dependencyRequestFactory.forComponentMembersInjectionMethod(
                   componentMethod, resolvedComponentMethod));
-        } else if (isAnnotationPresent(MoreTypes.asElement(returnType), Subcomponent.class)) {
-          return ComponentMethodDescriptor.forSubcomponent(
-              ComponentMethodKind.SUBCOMPONENT, componentMethod);
-        } else if (isAnnotationPresent(
-            MoreTypes.asElement(returnType), ProductionSubcomponent.class)) {
-          return ComponentMethodDescriptor.forSubcomponent(
-              ComponentMethodKind.PRODUCTION_SUBCOMPONENT, componentMethod);
-        } else if (isAnnotationPresent(
-            MoreTypes.asElement(returnType), Subcomponent.Builder.class)) {
-          return ComponentMethodDescriptor.forSubcomponent(
-              ComponentMethodKind.SUBCOMPONENT_BUILDER, componentMethod);
-        } else if (isAnnotationPresent(
-            MoreTypes.asElement(returnType), ProductionSubcomponent.Builder.class)) {
-          return ComponentMethodDescriptor.forSubcomponent(
-              ComponentMethodKind.PRODUCTION_SUBCOMPONENT_BUILDER, componentMethod);
+        } else if (!getQualifier(componentMethod).isPresent()) {
+          if (isAnnotationPresent(MoreTypes.asElement(returnType), Subcomponent.class)) {
+            return ComponentMethodDescriptor.forSubcomponent(
+                ComponentMethodKind.SUBCOMPONENT, componentMethod);
+          } else if (isAnnotationPresent(
+              MoreTypes.asElement(returnType), ProductionSubcomponent.class)) {
+            return ComponentMethodDescriptor.forSubcomponent(
+                ComponentMethodKind.PRODUCTION_SUBCOMPONENT, componentMethod);
+          } else if (isAnnotationPresent(
+              MoreTypes.asElement(returnType), Subcomponent.Builder.class)) {
+            return ComponentMethodDescriptor.forSubcomponent(
+                ComponentMethodKind.SUBCOMPONENT_BUILDER, componentMethod);
+          } else if (isAnnotationPresent(
+              MoreTypes.asElement(returnType), ProductionSubcomponent.Builder.class)) {
+            return ComponentMethodDescriptor.forSubcomponent(
+                ComponentMethodKind.PRODUCTION_SUBCOMPONENT_BUILDER, componentMethod);
+          }
         }
       }
 
