diff --git a/core/src/main/java/dagger/MapKey.java b/core/src/main/java/dagger/MapKey.java
index c6bf6d70a..8699c42a0 100644
--- a/core/src/main/java/dagger/MapKey.java
+++ b/core/src/main/java/dagger/MapKey.java
@@ -15,6 +15,7 @@
  */
 package dagger;
 
+import dagger.internal.Beta;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
@@ -47,6 +48,7 @@
 @Documented
 @Target(ANNOTATION_TYPE)
 @Retention(RUNTIME)
+@Beta
 public @interface MapKey {
   /**
    * if {@code unwrapValue} is false, then the whole annotation will be the type and annotation
diff --git a/core/src/main/java/dagger/Provides.java b/core/src/main/java/dagger/Provides.java
index df4ad904d..b0524b4ef 100644
--- a/core/src/main/java/dagger/Provides.java
+++ b/core/src/main/java/dagger/Provides.java
@@ -16,6 +16,7 @@
  */
 package dagger;
 
+import dagger.internal.Beta;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
@@ -61,6 +62,7 @@
      * is contributed to the map as a key/value pair. The {@code Map<K, Provider<V>>} produced from
      * the accumulation of values will be immutable.
      */
+    @Beta
     MAP;
   }
 
diff --git a/core/src/main/java/dagger/internal/Beta.java b/core/src/main/java/dagger/internal/Beta.java
new file mode 100644
index 000000000..a0a82c659
--- /dev/null
+++ b/core/src/main/java/dagger/internal/Beta.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.internal;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+
+import static java.lang.annotation.RetentionPolicy.SOURCE;
+
+/**
+ * Signifies that a public API (public class, method or field) is subject to
+ * incompatible changes, or even removal, in a future release. An API bearing
+ * this annotation is exempt from any compatibility guarantees made by its
+ * containing library. Note that the presence of this annotation implies nothing
+ * about the quality or performance of the API in question, only the fact that
+ * it is not "API-frozen."
+ */
+@Documented
+@Retention(SOURCE)
+public @interface Beta {}
diff --git a/producers/src/main/java/dagger/producers/Produced.java b/producers/src/main/java/dagger/producers/Produced.java
index 137244bad..9019aa657 100644
--- a/producers/src/main/java/dagger/producers/Produced.java
+++ b/producers/src/main/java/dagger/producers/Produced.java
@@ -15,6 +15,7 @@
  */
 package dagger.producers;
 
+import dagger.internal.Beta;
 import java.util.concurrent.ExecutionException;
 
 /**
@@ -36,6 +37,7 @@
  *
  * @author Jesse Beder
  */
+@Beta
 public interface Produced<T> {
   /**
    * Returns the result of a production.
diff --git a/producers/src/main/java/dagger/producers/Producer.java b/producers/src/main/java/dagger/producers/Producer.java
index fdf7dddcf..5aeb4a03d 100644
--- a/producers/src/main/java/dagger/producers/Producer.java
+++ b/producers/src/main/java/dagger/producers/Producer.java
@@ -15,6 +15,7 @@
  */
 package dagger.producers;
 
+import dagger.internal.Beta;
 import com.google.common.util.concurrent.ListenableFuture;
 
 /**
@@ -86,6 +87,7 @@
  *
  * @author Jesse Beder
  */
+@Beta
 public interface Producer<T> {
   /**
    * Returns a future representing a running task that produces a value. Calling this method will
diff --git a/producers/src/main/java/dagger/producers/ProducerModule.java b/producers/src/main/java/dagger/producers/ProducerModule.java
index f86cf12a3..714e3fa3e 100644
--- a/producers/src/main/java/dagger/producers/ProducerModule.java
+++ b/producers/src/main/java/dagger/producers/ProducerModule.java
@@ -16,6 +16,7 @@
 package dagger.producers;
 
 import dagger.Module;
+import dagger.internal.Beta;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Target;
 
@@ -26,7 +27,9 @@
  *
  * @author Jesse Beder
  */
-@Documented @Target(TYPE)
+@Documented
+@Target(TYPE)
+@Beta
 public @interface ProducerModule {
   /**
    * Additional {@code @ProducerModule}- or {@link Module}-annotated classes from which this module
diff --git a/producers/src/main/java/dagger/producers/Produces.java b/producers/src/main/java/dagger/producers/Produces.java
index 6f77c3c2d..1b57bc39d 100644
--- a/producers/src/main/java/dagger/producers/Produces.java
+++ b/producers/src/main/java/dagger/producers/Produces.java
@@ -15,6 +15,7 @@
  */
 package dagger.producers;
 
+import dagger.internal.Beta;
 import com.google.common.util.concurrent.ListenableFuture;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Target;
@@ -29,7 +30,9 @@
  *
  * @author Jesse Beder
  */
-@Documented @Target(METHOD)
+@Documented
+@Target(METHOD)
+@Beta
 public @interface Produces {
   /** The type of binding into which the return type of the annotated method contributes. */
   enum Type {
diff --git a/producers/src/main/java/dagger/producers/ProductionComponent.java b/producers/src/main/java/dagger/producers/ProductionComponent.java
index 02ba7c879..e4fe125ba 100644
--- a/producers/src/main/java/dagger/producers/ProductionComponent.java
+++ b/producers/src/main/java/dagger/producers/ProductionComponent.java
@@ -18,6 +18,7 @@
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.Module;
 import dagger.Provides;
+import dagger.internal.Beta;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Target;
 import javax.inject.Inject;
@@ -61,11 +62,13 @@
  * <p>If a non-execution exception is thrown (e.g., an {@code InterruptedException} or
  * {@code CancellationException}), then exception is handled as in
  * {@link com.google.common.util.concurrent.Futures#transform}.
- * TODO(user): Explain this more thoroughly, and possibly update the javadocs of those utilities.
+ * <!-- TODO(user): Explain this more thoroughly, and update the javadocs of those utilities. -->
  *
  * @author Jesse Beder
  */
-@Documented @Target(TYPE)
+@Documented
+@Target(TYPE)
+@Beta
 public @interface ProductionComponent {
   /**
    * A list of classes annotated with {@link Module} or {@link ProducerModule} whose bindings are
