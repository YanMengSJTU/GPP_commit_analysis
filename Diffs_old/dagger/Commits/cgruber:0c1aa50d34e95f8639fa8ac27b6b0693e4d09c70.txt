diff --git a/java/dagger/internal/codegen/AbstractComponentWriter.java b/java/dagger/internal/codegen/AbstractComponentWriter.java
index f71041607..3eb0c0a7b 100644
--- a/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -76,7 +76,6 @@
 import com.squareup.javapoet.FieldSpec;
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.ParameterSpec;
-import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
 import dagger.internal.InstanceFactory;
@@ -852,12 +851,12 @@ private CodeBlock factoryForContributionBindingInitialization(ContributionBindin
                       "  }",
                       "}"),
               /* 1 */ PRODUCER,
-              /* 2 */ TypeName.get(binding.key().type()),
+              /* 2 */ binding.key().type(),
               /* 3 */ LISTENABLE_FUTURE,
               /* 4 */ getComponentContributionExpression(
                   ComponentRequirement.forDependency(dependencyType.asType())),
               /* 5 */ binding.bindingElement().get().getSimpleName(),
-              /* 6 */ TypeName.get(dependencyType.asType()),
+              /* 6 */ dependencyType,
               /* 7 */ simpleVariableName(dependencyType));
         }
 
@@ -1007,8 +1006,10 @@ private CodeBlock factoryForMapMultibindingInitialization(ContributionBinding bi
         CodeBlock.builder().add("$T.", frameworkMapFactoryClassName(binding.bindingType()));
     boolean useRawTypes = useRawType(binding);
     if (!useRawTypes) {
-      builderCall.add("<$T, $T>", TypeName.get(mapType.keyType()),
-          TypeName.get(mapType.unwrappedValueType(binding.bindingType().frameworkClass())));
+      builderCall.add(
+          "<$T, $T>",
+          mapType.keyType(),
+          mapType.unwrappedValueType(binding.bindingType().frameworkClass()));
     }
     builderCall.add("builder($L)", frameworkDependencies.size());
     codeBlocks.add(builderCall.build());
@@ -1139,10 +1140,9 @@ private CodeBlock factoryForSyntheticSetOfReleasableReferenceManagersInitializat
   private CodeBlock typedReleasableReferenceManagerDecoratorExpression(
       CodeBlock managerExpression, AnnotationMirror metadata) {
     return CodeBlock.of(
-        "new $T($L, $L)",
-        ParameterizedTypeName.get(
-            TYPED_RELEASABLE_REFERENCE_MANAGER_DECORATOR,
-            TypeName.get(metadata.getAnnotationType())),
+        "new $T<$T>($L, $L)",
+        TYPED_RELEASABLE_REFERENCE_MANAGER_DECORATOR,
+        metadata.getAnnotationType(),
         managerExpression,
         new AnnotationExpression(metadata).getAnnotationInstanceExpression());
   }
diff --git a/java/dagger/internal/codegen/AnnotationExpression.java b/java/dagger/internal/codegen/AnnotationExpression.java
index 6d3692636..61b472a2b 100644
--- a/java/dagger/internal/codegen/AnnotationExpression.java
+++ b/java/dagger/internal/codegen/AnnotationExpression.java
@@ -91,7 +91,7 @@ CodeBlock getValueExpression(TypeMirror valueType, AnnotationValue value) {
 
   @Override
   public CodeBlock visitEnumConstant(VariableElement c, AnnotationValue p) {
-    return CodeBlock.of("$T.$L", TypeName.get(c.getEnclosingElement().asType()), c.getSimpleName());
+    return CodeBlock.of("$T.$L", c.getEnclosingElement(), c.getSimpleName());
   }
 
   @Override
@@ -101,7 +101,7 @@ public CodeBlock visitAnnotation(AnnotationMirror a, AnnotationValue p) {
 
   @Override
   public CodeBlock visitType(TypeMirror t, AnnotationValue p) {
-    return CodeBlock.of("$T.class", TypeName.get(t));
+    return CodeBlock.of("$T.class", t);
   }
 
   @Override
diff --git a/java/dagger/internal/codegen/ComponentBuilder.java b/java/dagger/internal/codegen/ComponentBuilder.java
index c818891af..5767d7634 100644
--- a/java/dagger/internal/codegen/ComponentBuilder.java
+++ b/java/dagger/internal/codegen/ComponentBuilder.java
@@ -251,7 +251,7 @@ private MethodSpec buildMethod() {
                   .returns(builderName)
                   .addModifiers(PUBLIC)
                   .addParameter(
-                      ClassName.get(componentRequirement.type()), componentRequirementName);
+                      TypeName.get(componentRequirement.type()), componentRequirementName);
           if (componentRequirements.contains(componentRequirement)) {
             builderMethod.addStatement(
                 "this.$N = $T.checkNotNull($L)",
diff --git a/java/dagger/internal/codegen/SetBindingExpression.java b/java/dagger/internal/codegen/SetBindingExpression.java
index 71ef36788..4c2c2023e 100644
--- a/java/dagger/internal/codegen/SetBindingExpression.java
+++ b/java/dagger/internal/codegen/SetBindingExpression.java
@@ -23,7 +23,6 @@
 import com.google.common.collect.ImmutableSet;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
-import com.squareup.javapoet.TypeName;
 import dagger.internal.SetBuilder;
 import java.util.Collections;
 import java.util.Set;
@@ -147,9 +146,7 @@ protected CodeBlock explicitTypeParameter(ClassName requestingClass) {
       TypeMirror keyType = binding.key().type();
       return CodeBlock.of(
           "<$T>",
-          isTypeAccessibleFrom(keyType, requestingClass.packageName())
-              ? TypeName.get(keyType)
-              : ClassName.get(Set.class));
+          isTypeAccessibleFrom(keyType, requestingClass.packageName()) ? keyType : Set.class);
     }
     return CodeBlock.of("");
   }
