diff --git a/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java b/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
index f3779bf0c..271bafc94 100644
--- a/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
+++ b/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
@@ -58,6 +58,7 @@
         ActivitySubcomponent.class,
         ParentFragmentSubcomponent.class,
         ChildFragmentSubcomponent.class,
+        DialogFragmentSubcomponent.class,
         ServiceSubcomponent.class,
         IntentServiceSubcomponent.class,
         BroadcastReceiverSubcomponent.class,
@@ -89,6 +90,12 @@
       abstract AndroidInjector.Factory<? extends Fragment> bindFactoryForChildFragment(
           ChildFragmentSubcomponent.Builder builder);
 
+      @Binds
+      @IntoMap
+      @FragmentKey(TestDialogFragment.class)
+      abstract AndroidInjector.Factory<? extends Fragment> bindFactoryForDialogFragment(
+          DialogFragmentSubcomponent.Builder builder);
+
       @Binds
       @IntoMap
       @ServiceKey(TestService.class)
@@ -159,6 +166,21 @@
       abstract class Builder extends AndroidInjector.Builder<TestChildFragment> {}
     }
 
+    @Subcomponent(modules = DialogFragmentSubcomponent.DialogFragmentModule.class)
+    interface DialogFragmentSubcomponent extends AndroidInjector<TestDialogFragment> {
+      @Module
+      abstract class DialogFragmentModule {
+        @Provides
+        @IntoSet
+        static Class<?> addToComponentHierarchy() {
+          return DialogFragmentSubcomponent.class;
+        }
+      }
+
+      @Subcomponent.Builder
+      abstract class Builder extends AndroidInjector.Builder<TestDialogFragment> {}
+    }
+
     @Subcomponent(modules = ServiceModule.class)
     interface ServiceSubcomponent extends AndroidInjector<TestService> {
       @Subcomponent.Builder
diff --git a/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java b/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
index 6e60b4f92..9490f48e5 100644
--- a/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
+++ b/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
@@ -104,7 +104,7 @@
 
     @Subcomponent(modules = ActivitySubcomponent.ActivityModule.class)
     interface ActivitySubcomponent extends AndroidInjector<TestActivity> {
-      @Module(subcomponents = ParentFragmentSubcomponent.class)
+      @Module(subcomponents = {ParentFragmentSubcomponent.class, DialogFragmentSubcomponent.class})
       abstract class ActivityModule {
         @Provides
         @IntoSet
@@ -117,6 +117,12 @@
         @FragmentKey(TestParentFragment.class)
         abstract AndroidInjector.Factory<? extends Fragment> bindFactoryForParentFragment(
             ParentFragmentSubcomponent.Builder builder);
+
+        @Binds
+        @IntoMap
+        @FragmentKey(TestDialogFragment.class)
+        abstract AndroidInjector.Factory<? extends Fragment> bindFactoryForDialogFragment(
+            DialogFragmentSubcomponent.Builder builder);
       }
 
       @Subcomponent.Builder
@@ -157,6 +163,21 @@
           abstract class Builder extends AndroidInjector.Builder<TestChildFragment> {}
         }
       }
+
+      @Subcomponent(modules = DialogFragmentSubcomponent.DialogFragmentModule.class)
+      interface DialogFragmentSubcomponent extends AndroidInjector<TestDialogFragment> {
+        @Module
+        abstract class DialogFragmentModule {
+          @Provides
+          @IntoSet
+          static Class<?> addToComponentHierarchy() {
+            return DialogFragmentSubcomponent.class;
+          }
+        }
+
+        @Subcomponent.Builder
+        abstract class Builder extends AndroidInjector.Builder<TestDialogFragment> {}
+      }
     }
 
     @Subcomponent(modules = ServiceModule.class)
diff --git a/javatests/dagger/android/support/functional/InjectorsTest.java b/javatests/dagger/android/support/functional/InjectorsTest.java
index 578f19b10..4e27a624c 100644
--- a/javatests/dagger/android/support/functional/InjectorsTest.java
+++ b/javatests/dagger/android/support/functional/InjectorsTest.java
@@ -39,6 +39,7 @@
   private TestActivity activity;
   private TestParentFragment parentFragment;
   private TestChildFragment childFragment;
+  private TestDialogFragment dialogFragment;
   private TestService service;
   private TestIntentService intentService;
   private TestBroadcastReceiver broadcastReceiver;
@@ -54,6 +55,9 @@ public void setUp() {
     childFragment =
         (TestChildFragment)
             parentFragment.getChildFragmentManager().findFragmentByTag("child-fragment");
+    dialogFragment =
+        (TestParentFragment)
+            activity.getSupportFragmentManager().findFragmentByTag("dialog-fragment");
 
     service = Robolectric.buildService(TestService.class).create().get();
     intentService = Robolectric.buildIntentService(TestIntentService.class).create().get();
@@ -91,6 +95,13 @@ public void componentStructureFollowsControllerStructure() {
                 .ActivitySubcomponent.ParentFragmentSubcomponent.class,
             ComponentStructureFollowsControllerStructureApplication.ApplicationComponent
                 .ActivitySubcomponent.ParentFragmentSubcomponent.ChildFragmentSubcomponent.class);
+    assertThat(dialogFragment.componentHierarchy)
+        .containsExactly(
+            ComponentStructureFollowsControllerStructureApplication.ApplicationComponent.class,
+            ComponentStructureFollowsControllerStructureApplication.ApplicationComponent
+                .ActivitySubcomponent.class,
+            ComponentStructureFollowsControllerStructureApplication.ApplicationComponent
+                .ActivitySubcomponent.DialogFragmentSubcomponent.class);
 
     assertThat(service.componentHierarchy)
         .containsExactly(
@@ -136,6 +147,11 @@ public void allControllersAreDirectChildrenOfApplication() {
             AllControllersAreDirectChildrenOfApplication.ApplicationComponent.class,
             AllControllersAreDirectChildrenOfApplication.ApplicationComponent
                 .ChildFragmentSubcomponent.class);
+    assertThat(dialogFragment.componentHierarchy)
+        .containsExactly(
+            AllControllersAreDirectChildrenOfApplication.ApplicationComponent.class,
+            AllControllersAreDirectChildrenOfApplication.ApplicationComponent
+                .DialogFragmentSubcomponent.class);
 
     assertThat(service.componentHierarchy)
         .containsExactly(
@@ -178,6 +194,10 @@ public void usesGeneratedModules() {
         .containsExactly(
             UsesGeneratedModulesApplication.ApplicationComponent.class,
             UsesGeneratedModulesApplication.DummyChildFragmentSubcomponent.class);
+    assertThat(dialogFragment.componentHierarchy)
+        .containsExactly(
+            UsesGeneratedModulesApplication.ApplicationComponent.class,
+            UsesGeneratedModulesApplication.DummyDialogFragmentSubcomponent.class);
 
     assertThat(service.componentHierarchy)
         .containsExactly(
diff --git a/javatests/dagger/android/support/functional/TestActivity.java b/javatests/dagger/android/support/functional/TestActivity.java
index c4fda4293..58b2903fd 100644
--- a/javatests/dagger/android/support/functional/TestActivity.java
+++ b/javatests/dagger/android/support/functional/TestActivity.java
@@ -33,6 +33,7 @@ protected void onCreate(Bundle savedInstanceState) {
     getSupportFragmentManager()
         .beginTransaction()
         .add(new TestParentFragment(), "parent-fragment")
+        //.add(new TestDialogFragment(), "dialog-fragment")
         .commit();
   }
 }
diff --git a/javatests/dagger/android/support/functional/TestDialogFragment.java b/javatests/dagger/android/support/functional/TestDialogFragment.java
new file mode 100644
index 000000000..5d8ab9a54
--- /dev/null
+++ b/javatests/dagger/android/support/functional/TestDialogFragment.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android.support.functional;
+
+import dagger.android.DaggerDialogFragment;
+import java.util.Set;
+import javax.inject.Inject;
+
+public class TestDialogFragment extends DaggerDialogFragment {
+  @Inject Set<Class<?>> componentHierarchy;
+}
diff --git a/javatests/dagger/android/support/functional/UsesGeneratedModulesApplication.java b/javatests/dagger/android/support/functional/UsesGeneratedModulesApplication.java
index ff43e3959..bdc658b9e 100644
--- a/javatests/dagger/android/support/functional/UsesGeneratedModulesApplication.java
+++ b/javatests/dagger/android/support/functional/UsesGeneratedModulesApplication.java
@@ -61,6 +61,9 @@
     @ContributesAndroidInjector(modules = DummyChildFragmentSubcomponent.AddToHierarchy.class)
     abstract TestChildFragment contributeTestChildFragmentInjector();
 
+    @ContributesAndroidInjector(modules = DummyParentFragmentSubcomponent.AddToHierarchy.class)
+    abstract TestDialogFragment contributeTestDialogFragmentInjector();
+
     @ContributesAndroidInjector(modules = DummyServiceSubcomponent.AddToHierarchy.class)
     abstract TestService contributeTestServiceInjector();
 
@@ -120,6 +123,17 @@ static String provideScopedString() {
     }
   }
 
+  interface DummyDialogFragmentSubcomponent {
+    @Module
+    abstract class AddToHierarchy {
+      @Provides
+      @IntoSet
+      static Class<?> addDummyValueToComponentHierarchy() {
+        return DummyDialogFragmentSubcomponent.class;
+      }
+    }
+  }
+
   interface DummyServiceSubcomponent {
     @Module
     abstract class AddToHierarchy {
