diff --git a/java/dagger/android/support/AndroidSupportInjection.java b/java/dagger/android/support/AndroidSupportInjection.java
index 4fac2e62d..64e3537e2 100644
--- a/java/dagger/android/support/AndroidSupportInjection.java
+++ b/java/dagger/android/support/AndroidSupportInjection.java
@@ -38,14 +38,14 @@
    *
    * <ol>
    *   <li>Walks the parent-fragment hierarchy to find the a fragment that implements {@link
-   *       HasDispatchingFragmentInjector}, and if none do
+   *       HasDispatchingSupportFragmentInjector}, and if none do
    *   <li>Uses the {@code fragment}'s {@link Fragment#getActivity() activity} if it implements
-   *       {@link HasDispatchingFragmentInjector}, and if not
+   *       {@link HasDispatchingSupportFragmentInjector}, and if not
    *   <li>Uses the {@link android.app.Application} if it implements {@link
-   *       HasDispatchingFragmentInjector}.
+   *       HasDispatchingSupportFragmentInjector}.
    * </ol>
    *
-   * If none of them implement {@link HasDispatchingFragmentInjector}, a {@link
+   * If none of them implement {@link HasDispatchingSupportFragmentInjector}, a {@link
    * IllegalArgumentException} is thrown.
    *
    * @throws IllegalArgumentException if no {@code AndroidInjector.Factory<Fragment, ?>} is bound
@@ -53,38 +53,38 @@
    */
   public static void inject(Fragment fragment) {
     checkNotNull(fragment, "fragment");
-    HasDispatchingFragmentInjector hasDispatchingFragmentInjector =
+    HasDispatchingSupportFragmentInjector hasDispatchingSupportFragmentInjector =
         findHasFragmentInjector(fragment);
     Log.d(
         TAG,
         String.format(
             "An injector for %s was found in %s",
             fragment.getClass().getCanonicalName(),
-            hasDispatchingFragmentInjector.getClass().getCanonicalName()));
+            hasDispatchingSupportFragmentInjector.getClass().getCanonicalName()));
 
     DispatchingAndroidInjector<Fragment> fragmentInjector =
-        hasDispatchingFragmentInjector.fragmentInjector();
+        hasDispatchingSupportFragmentInjector.supportFragmentInjector();
     checkNotNull(
         fragmentInjector,
-        "%s.fragmentInjector() returned null",
-        hasDispatchingFragmentInjector.getClass().getCanonicalName());
+        "%s.supportFragmentInjector() returned null",
+        hasDispatchingSupportFragmentInjector.getClass().getCanonicalName());
 
     fragmentInjector.inject(fragment);
   }
 
-  private static HasDispatchingFragmentInjector findHasFragmentInjector(Fragment fragment) {
+  private static HasDispatchingSupportFragmentInjector findHasFragmentInjector(Fragment fragment) {
     Fragment parentFragment = fragment;
     while ((parentFragment = parentFragment.getParentFragment()) != null) {
-      if (parentFragment instanceof HasDispatchingFragmentInjector) {
-        return (HasDispatchingFragmentInjector) parentFragment;
+      if (parentFragment instanceof HasDispatchingSupportFragmentInjector) {
+        return (HasDispatchingSupportFragmentInjector) parentFragment;
       }
     }
     Activity activity = fragment.getActivity();
-    if (activity instanceof HasDispatchingFragmentInjector) {
-      return (HasDispatchingFragmentInjector) activity;
+    if (activity instanceof HasDispatchingSupportFragmentInjector) {
+      return (HasDispatchingSupportFragmentInjector) activity;
     }
-    if (activity.getApplication() instanceof HasDispatchingFragmentInjector) {
-      return (HasDispatchingFragmentInjector) activity.getApplication();
+    if (activity.getApplication() instanceof HasDispatchingSupportFragmentInjector) {
+      return (HasDispatchingSupportFragmentInjector) activity.getApplication();
     }
     throw new IllegalArgumentException(
         String.format("No injector was found for %s", fragment.getClass().getCanonicalName()));
diff --git a/java/dagger/android/support/AndroidSupportInjectionModule.java b/java/dagger/android/support/AndroidSupportInjectionModule.java
index ab12c3f11..eaa8ce817 100644
--- a/java/dagger/android/support/AndroidSupportInjectionModule.java
+++ b/java/dagger/android/support/AndroidSupportInjectionModule.java
@@ -16,9 +16,9 @@
 
 package dagger.android.support;
 
-import android.app.Activity;
-import android.app.Fragment;
+import android.support.v4.app.Fragment;
 import dagger.Module;
+import dagger.android.AndroidInjectionModule;
 import dagger.android.AndroidInjector;
 import dagger.internal.Beta;
 import dagger.multibindings.Multibinds;
@@ -30,15 +30,11 @@
  * component which will use these types.
  */
 @Beta
-@Module
+@Module(includes = AndroidInjectionModule.class)
 public abstract class AndroidSupportInjectionModule {
-  @Multibinds
-  abstract Map<Class<? extends Activity>, AndroidInjector.Factory<Activity, ?>>
-      activityInjectorFactories();
-
   @Multibinds
   abstract Map<Class<? extends Fragment>, AndroidInjector.Factory<Fragment, ?>>
-      fragmentInjectorFactories();
+      supportFragmentInjectorFactories();
 
   private AndroidSupportInjectionModule() {}
 }
diff --git a/java/dagger/android/support/DaggerAppCompatActivity.java b/java/dagger/android/support/DaggerAppCompatActivity.java
index 6cfba5317..12d6e421b 100644
--- a/java/dagger/android/support/DaggerAppCompatActivity.java
+++ b/java/dagger/android/support/DaggerAppCompatActivity.java
@@ -21,18 +21,20 @@
 import android.support.v7.app.AppCompatActivity;
 import dagger.android.AndroidInjection;
 import dagger.android.DispatchingAndroidInjector;
+import dagger.android.HasDispatchingFragmentInjector;
 import dagger.internal.Beta;
 import javax.inject.Inject;
 
 /**
  * An {@link AppCompatActivity} that injects its members in {@link #onCreate(Bundle)} and can be
- * used to inject {@link Fragment}s attached to it.
+ * used to inject {@code Fragment}s attached to it.
  */
 @Beta
 public abstract class DaggerAppCompatActivity extends AppCompatActivity
-    implements HasDispatchingFragmentInjector {
+    implements HasDispatchingFragmentInjector, HasDispatchingSupportFragmentInjector {
 
-  @Inject DispatchingAndroidInjector<Fragment> fragmentInjector;
+  @Inject DispatchingAndroidInjector<Fragment> supportFragmentInjector;
+  @Inject DispatchingAndroidInjector<android.app.Fragment> frameworkFragmentInjector;
 
   @Override
   protected void onCreate(Bundle savedInstanceState) {
@@ -41,7 +43,12 @@ protected void onCreate(Bundle savedInstanceState) {
   }
 
   @Override
-  public DispatchingAndroidInjector<Fragment> fragmentInjector() {
-    return fragmentInjector;
+  public DispatchingAndroidInjector<Fragment> supportFragmentInjector() {
+    return supportFragmentInjector;
+  }
+
+  @Override
+  public DispatchingAndroidInjector<android.app.Fragment> fragmentInjector() {
+    return frameworkFragmentInjector;
   }
 }
diff --git a/java/dagger/android/support/DaggerFragment.java b/java/dagger/android/support/DaggerFragment.java
index 8ceace046..40ce16fde 100644
--- a/java/dagger/android/support/DaggerFragment.java
+++ b/java/dagger/android/support/DaggerFragment.java
@@ -28,7 +28,8 @@
  * members will be injected again.
  */
 @Beta
-public abstract class DaggerFragment extends Fragment implements HasDispatchingFragmentInjector {
+public abstract class DaggerFragment extends Fragment implements
+    HasDispatchingSupportFragmentInjector {
 
   @Inject DispatchingAndroidInjector<Fragment> childFragmentInjector;
 
@@ -39,7 +40,7 @@ public void onAttach(Context context) {
   }
 
   @Override
-  public DispatchingAndroidInjector<Fragment> fragmentInjector() {
+  public DispatchingAndroidInjector<Fragment> supportFragmentInjector() {
     return childFragmentInjector;
   }
 }
diff --git a/java/dagger/android/support/HasDispatchingFragmentInjector.java b/java/dagger/android/support/HasDispatchingSupportFragmentInjector.java
similarity index 88%
rename from java/dagger/android/support/HasDispatchingFragmentInjector.java
rename to java/dagger/android/support/HasDispatchingSupportFragmentInjector.java
index 08d87808b..088854468 100644
--- a/java/dagger/android/support/HasDispatchingFragmentInjector.java
+++ b/java/dagger/android/support/HasDispatchingSupportFragmentInjector.java
@@ -22,8 +22,8 @@
 
 /** Provides a {@link DispatchingAndroidInjector} of {@link Fragment}s. */
 @Beta
-public interface HasDispatchingFragmentInjector {
+public interface HasDispatchingSupportFragmentInjector {
 
   /** Returns a {@link DispatchingAndroidInjector} of {@link Fragment}s. */
-  DispatchingAndroidInjector<Fragment> fragmentInjector();
+  DispatchingAndroidInjector<Fragment> supportFragmentInjector();
 }
diff --git a/javatests/dagger/android/support/AndroidSupportInjectionTest.java b/javatests/dagger/android/support/AndroidSupportInjectionTest.java
index b5835b853..87593af4c 100644
--- a/javatests/dagger/android/support/AndroidSupportInjectionTest.java
+++ b/javatests/dagger/android/support/AndroidSupportInjectionTest.java
@@ -45,9 +45,9 @@ public void injectFragment_simpleApplication() {
   }
 
   private static class ApplicationReturnsNull extends Application
-      implements HasDispatchingFragmentInjector {
+      implements HasDispatchingSupportFragmentInjector {
     @Override
-    public DispatchingAndroidInjector<Fragment> fragmentInjector() {
+    public DispatchingAndroidInjector<Fragment> supportFragmentInjector() {
       return null;
     }
   }
@@ -62,7 +62,7 @@ public void dispatchingFragmentInjector_returnsNull() {
       AndroidSupportInjection.inject(fragment);
       fail();
     } catch (Exception e) {
-      assertThat(e).hasMessageThat().contains("fragmentInjector() returned null");
+      assertThat(e).hasMessageThat().contains("supportFragmentInjector() returned null");
     }
   }
 
diff --git a/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java b/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
index 63a940f79..f171fcd8e 100644
--- a/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
+++ b/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
@@ -28,6 +28,7 @@
 import dagger.android.AndroidInjector;
 import dagger.android.DispatchingAndroidInjector;
 import dagger.android.HasDispatchingActivityInjector;
+import dagger.android.support.AndroidSupportInjectionModule;
 import dagger.android.support.FragmentKey;
 import dagger.multibindings.IntoMap;
 import dagger.multibindings.IntoSet;
@@ -48,7 +49,9 @@ public void onCreate() {
     return activityInjector;
   }
 
-  @Component(modules = ApplicationComponent.ApplicationModule.class)
+  @Component(
+    modules = {ApplicationComponent.ApplicationModule.class, AndroidSupportInjectionModule.class}
+  )
   interface ApplicationComponent {
     void inject(AllControllersAreDirectChildrenOfApplication application);
 
diff --git a/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java b/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
index 98f931548..4f78182a2 100644
--- a/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
+++ b/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
@@ -28,6 +28,7 @@
 import dagger.android.AndroidInjector;
 import dagger.android.DispatchingAndroidInjector;
 import dagger.android.HasDispatchingActivityInjector;
+import dagger.android.support.AndroidSupportInjectionModule;
 import dagger.android.support.FragmentKey;
 import dagger.multibindings.IntoMap;
 import dagger.multibindings.IntoSet;
@@ -49,7 +50,9 @@ public void onCreate() {
     return activityInjector;
   }
 
-  @Component(modules = ApplicationComponent.ApplicationModule.class)
+  @Component(
+      modules = {ApplicationComponent.ApplicationModule.class, AndroidSupportInjectionModule.class}
+  )
   interface ApplicationComponent {
     void inject(ComponentStructureFollowsControllerStructureApplication application);
 
