diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/MultiPackageSubcomponents.java b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/MultiPackageSubcomponents.java
new file mode 100644
index 000000000..b44e4e21d
--- /dev/null
+++ b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/MultiPackageSubcomponents.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2016 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package producerstest.subcomponent;
+
+import dagger.Component;
+import dagger.Module;
+import dagger.Provides;
+import producerstest.subcomponent.sub.ChildComponent;
+
+final class MultiPackageSubcomponents {
+  @Component(modules = IntModule.class)
+  interface ParentComponent {
+    ChildComponent.Builder childComponentBuilder();
+  }
+
+  @Module
+  static final class IntModule {
+    @Provides
+    static int i() {
+      return 42;
+    }
+  }
+
+  private MultiPackageSubcomponents() {}
+}
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/sub/ChildComponent.java b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/sub/ChildComponent.java
new file mode 100644
index 000000000..a53bb3564
--- /dev/null
+++ b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/sub/ChildComponent.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2016 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package producerstest.subcomponent.sub;
+
+import com.google.common.util.concurrent.ListenableFuture;
+import dagger.producers.ProductionSubcomponent;
+import java.util.concurrent.Executor;
+
+@ProductionSubcomponent(modules = ChildModule.class)
+public interface ChildComponent {
+  ListenableFuture<String> str();
+
+  @ProductionSubcomponent.Builder
+  interface Builder {
+    Builder executor(Executor executor);
+    ChildComponent build();
+  }
+}
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/sub/ChildModule.java b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/sub/ChildModule.java
new file mode 100644
index 000000000..43b79f4b5
--- /dev/null
+++ b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/subcomponent/sub/ChildModule.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2016 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package producerstest.subcomponent.sub;
+
+import dagger.producers.ProducerModule;
+import dagger.producers.Produces;
+
+@ProducerModule
+final class ChildModule {
+  @Produces
+  static String str(int n) {
+    return "Hello, World " + n;
+  }
+}
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/MultiPackageSubcomponentTest.java b/compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/MultiPackageSubcomponentTest.java
new file mode 100644
index 000000000..ad5c86d22
--- /dev/null
+++ b/compiler/src/it/producers-functional-tests/src/test/java/producerstest/subcomponent/MultiPackageSubcomponentTest.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2016 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package producerstest.subcomponent;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import com.google.common.util.concurrent.MoreExecutors;
+import java.util.concurrent.Executor;
+import producerstest.subcomponent.MultiPackageSubcomponents.ParentComponent;
+import producerstest.subcomponent.sub.ChildComponent;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+@RunWith(JUnit4.class)
+public final class MultiPackageSubcomponentTest {
+
+  @Test
+  public void childComponent() throws Exception {
+    Executor executor = MoreExecutors.directExecutor();
+    ParentComponent parent = DaggerMultiPackageSubcomponents_ParentComponent.create();
+    ChildComponent child = parent.childComponentBuilder().executor(executor).build();
+    assertThat(child.str().get()).isEqualTo("Hello, World 42");
+  }
+}
diff --git a/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
index 203e28d80..bb3794ca5 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
@@ -37,6 +37,7 @@
 import static dagger.internal.codegen.TypeNames.SET_OF_FACTORIES;
 import static dagger.internal.codegen.TypeNames.providerOf;
 import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.PUBLIC;
 import static javax.lang.model.element.Modifier.STATIC;
 import static javax.lang.model.element.Modifier.FINAL;
 
@@ -64,7 +65,7 @@ ClassName nameGeneratedType(TypeElement componentElement) {
             .addAnnotation(
                 AnnotationSpec.builder(Module.class)
                     .build())
-            .addModifiers(FINAL)
+            .addModifiers(PUBLIC, FINAL)
 
             // TODO(beder): Replace this default set binding with EmptyCollections when it exists.
             .addMethod(
