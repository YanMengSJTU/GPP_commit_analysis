diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index 8d9dd76ae..39d2e3a98 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -15,6 +15,8 @@
  */
 package dagger.internal.codegen;
 
+import static dagger.internal.codegen.ComponentDescriptor.isComponentProvisionMethod;
+
 import com.google.auto.common.MoreTypes;
 import com.google.auto.value.AutoValue;
 import com.google.common.base.Function;
@@ -116,7 +118,7 @@ BindingGraph create(ComponentDescriptor componentDescriptor) {
         List<ExecutableElement> dependencyMethods =
             ElementFilter.methodsIn(elements.getAllMembers(componentDependency));
         for (ExecutableElement method : dependencyMethods) {
-          if (isComponentProvisionMethod(method)) {
+          if (isComponentProvisionMethod(elements, method)) {
             // MembersInjection methods aren't "provided" explicitly, so ignore them.
             explicitBindingsBuilder.add(provisionBindingFactory.forComponentMethod(method));
           }
@@ -174,7 +176,7 @@ BindingGraph create(ComponentDescriptor componentDescriptor) {
       ImmutableSet.Builder<DependencyRequest> interfaceRequestsBuilder = ImmutableSet.builder();
       for (ExecutableElement componentMethod : methodsIn(elements.getAllMembers(componentType))) {
         if (componentMethod.getModifiers().contains(Modifier.ABSTRACT)) { // Elide Object.*;
-          if (isComponentProvisionMethod(componentMethod)) {
+          if (ComponentDescriptor.isComponentProvisionMethod(elements, componentMethod)) {
             interfaceRequestsBuilder.add(
                 dependencyRequestFactory.forComponentProvisionMethod(componentMethod));
           } else if (isComponentMembersInjectionMethod(componentMethod)) {
@@ -348,12 +350,5 @@ private State resolveDependencies(Iterable<DependencyRequest> dependencies) {
         return bindingState;
       }
     }
-
-    private boolean isComponentProvisionMethod(ExecutableElement method) {
-      return method.getParameters().isEmpty()
-          && !method.getReturnType().getKind().equals(VOID)
-          && !elements.getTypeElement(Object.class.getCanonicalName())
-              .equals(method.getEnclosingElement());
-    }
   }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
index 2ea440c55..8a6c71aa3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -96,7 +96,7 @@ ComponentDescriptor create(TypeElement componentDefinitionType) {
         List<ExecutableElement> dependencyMethods =
             ElementFilter.methodsIn(elements.getAllMembers(componentDependency));
         for (ExecutableElement dependencyMethod : dependencyMethods) {
-          if (isComponentProvisionMethod(dependencyMethod)) {
+          if (isComponentProvisionMethod(elements, dependencyMethod)) {
             ProvisionBinding componentMethodBinding =
                 provisionBindingFactory.forComponentMethod(dependencyMethod);
             explicitBindingIndexBuilder
@@ -112,10 +112,12 @@ ComponentDescriptor create(TypeElement componentDefinitionType) {
           componentDependencyTypes,
           dependencyMethodIndex.build());
     }
+  }
 
-    private static boolean isComponentProvisionMethod(ExecutableElement method) {
-      return method.getParameters().isEmpty()
-          && !method.getReturnType().getKind().equals(VOID);
-    }
+  static boolean isComponentProvisionMethod(Elements elements, ExecutableElement method) {
+    return method.getParameters().isEmpty()
+        && !method.getReturnType().getKind().equals(VOID)
+        && !elements.getTypeElement(Object.class.getCanonicalName())
+            .equals(method.getEnclosingElement());
   }
 }
