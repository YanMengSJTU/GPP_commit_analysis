diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java
index a6180763a..e94c48348 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -16,6 +16,7 @@
 package dagger.internal.codegen;
 
 import com.google.auto.common.MoreElements;
+import com.google.auto.common.SuperficialValidation;
 import dagger.Component;
 import dagger.internal.codegen.ComponentDescriptor.Factory;
 import java.util.Set;
@@ -52,16 +53,18 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
     Set<? extends Element> componentElements = roundEnv.getElementsAnnotatedWith(Component.class);
 
     for (Element element : componentElements) {
-      TypeElement componentTypeElement = MoreElements.asType(element);
-      ValidationReport<TypeElement> report =
-          componentValidator.validate(componentTypeElement);
-      report.printMessagesTo(messager);
+      if (SuperficialValidation.validateElement(element)) {
+        TypeElement componentTypeElement = MoreElements.asType(element);
+        ValidationReport<TypeElement> report =
+            componentValidator.validate(componentTypeElement);
+        report.printMessagesTo(messager);
 
-      if (report.isClean()) {
-        try {
-          componentGenerator.generate(componentDescriptorFactory.create(componentTypeElement));
-        } catch (SourceFileGenerationException e) {
-          e.printMessageTo(messager);
+        if (report.isClean()) {
+          try {
+            componentGenerator.generate(componentDescriptorFactory.create(componentTypeElement));
+          } catch (SourceFileGenerationException e) {
+            e.printMessageTo(messager);
+          }
         }
       }
     }
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/InjectProcessingStep.java
index 7e529b490..1a0959c3c 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectProcessingStep.java
@@ -16,6 +16,7 @@
 package dagger.internal.codegen;
 
 import com.google.auto.common.MoreElements;
+import com.google.auto.common.SuperficialValidation;
 import com.google.common.base.Function;
 import com.google.common.collect.ImmutableListMultimap;
 import com.google.common.collect.ImmutableSet;
@@ -78,48 +79,52 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
     final ImmutableSet.Builder<InjectionSite> memberInjectionSites = ImmutableSet.builder();
 
     for (Element injectElement : roundEnv.getElementsAnnotatedWith(Inject.class)) {
-      injectElement.accept(
-          new ElementKindVisitor6<Void, Void>() {
-            @Override
-            public Void visitExecutableAsConstructor(ExecutableElement constructorElement, Void v) {
-              ValidationReport<ExecutableElement> report =
-                  constructorValidator.validate(constructorElement);
-
-              report.printMessagesTo(messager);
-
-              if (report.isClean()) {
-                provisions.add(provisionBindingFactory.forInjectConstructor(constructorElement));
+      if (SuperficialValidation.validateElement(injectElement)) {
+        injectElement.accept(
+            new ElementKindVisitor6<Void, Void>() {
+              @Override
+              public Void visitExecutableAsConstructor(
+                  ExecutableElement constructorElement, Void v) {
+                ValidationReport<ExecutableElement> report =
+                    constructorValidator.validate(constructorElement);
+
+                report.printMessagesTo(messager);
+
+                if (report.isClean()) {
+                  provisions.add(provisionBindingFactory.forInjectConstructor(constructorElement));
+                }
+
+                return null;
               }
 
-              return null;
-            }
+              @Override
+              public Void visitVariableAsField(VariableElement fieldElement, Void p) {
+                ValidationReport<VariableElement> report = fieldValidator.validate(fieldElement);
 
-            @Override
-            public Void visitVariableAsField(VariableElement fieldElement, Void p) {
-              ValidationReport<VariableElement> report = fieldValidator.validate(fieldElement);
+                report.printMessagesTo(messager);
 
-              report.printMessagesTo(messager);
+                if (report.isClean()) {
+                  memberInjectionSites.add(injectionSiteFactory.forInjectField(fieldElement));
+                }
 
-              if (report.isClean()) {
-                memberInjectionSites.add(injectionSiteFactory.forInjectField(fieldElement));
+                return null;
               }
 
-              return null;
-            }
+              @Override
+              public Void visitExecutableAsMethod(ExecutableElement methodElement, Void p) {
+                ValidationReport<ExecutableElement> report =
+                    methodValidator.validate(methodElement);
 
-            @Override
-            public Void visitExecutableAsMethod(ExecutableElement methodElement, Void p) {
-              ValidationReport<ExecutableElement> report = methodValidator.validate(methodElement);
+                report.printMessagesTo(messager);
 
-              report.printMessagesTo(messager);
+                if (report.isClean()) {
+                  memberInjectionSites.add(injectionSiteFactory.forInjectMethod(methodElement));
+                }
 
-              if (report.isClean()) {
-                memberInjectionSites.add(injectionSiteFactory.forInjectMethod(methodElement));
+                return null;
               }
-
-              return null;
-            }
-          }, null);
+            }, null);
+      }
     }
 
     ImmutableListMultimap<TypeElement, InjectionSite> membersInjectionsByType =
diff --git a/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java
index 81b1240c0..0dca93377 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java
@@ -16,6 +16,7 @@
 package dagger.internal.codegen;
 
 import com.google.auto.common.MoreElements;
+import com.google.auto.common.SuperficialValidation;
 import com.google.common.base.Function;
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableSet;
@@ -47,6 +48,7 @@
   private final ProvidesMethodValidator providesMethodValidator;
   private final ProvisionBinding.Factory provisionBindingFactory;
   private final FactoryGenerator factoryGenerator;
+  private final Set<Element> processedModuleElements = Sets.newLinkedHashSet();
 
   ModuleProcessingStep(
       Messager messager,
@@ -79,47 +81,50 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
     ImmutableSet<ExecutableElement> validProvidesMethods = validProvidesMethodsBuilder.build();
 
     // process each module
-    for (Element moduleElement : roundEnv.getElementsAnnotatedWith(Module.class)) {
-      ValidationReport<TypeElement> report =
-          moduleValidator.validate(MoreElements.asType(moduleElement));
-      report.printMessagesTo(messager);
+    for (Element moduleElement :
+        Sets.difference(roundEnv.getElementsAnnotatedWith(Module.class), processedModuleElements)) {
+      if (SuperficialValidation.validateElement(moduleElement)) {
+        ValidationReport<TypeElement> report =
+            moduleValidator.validate(MoreElements.asType(moduleElement));
+        report.printMessagesTo(messager);
 
-      if (report.isClean()) {
-        ImmutableSet.Builder<ExecutableElement> moduleProvidesMethodsBuilder =
-            ImmutableSet.builder();
-        List<ExecutableElement> moduleMethods =
-            ElementFilter.methodsIn(moduleElement.getEnclosedElements());
-        for (ExecutableElement methodElement : moduleMethods) {
-          if (isAnnotationPresent(methodElement, Provides.class)) {
-            moduleProvidesMethodsBuilder.add(methodElement);
+        if (report.isClean()) {
+          ImmutableSet.Builder<ExecutableElement> moduleProvidesMethodsBuilder =
+              ImmutableSet.builder();
+          List<ExecutableElement> moduleMethods =
+              ElementFilter.methodsIn(moduleElement.getEnclosedElements());
+          for (ExecutableElement methodElement : moduleMethods) {
+            if (isAnnotationPresent(methodElement, Provides.class)) {
+              moduleProvidesMethodsBuilder.add(methodElement);
+            }
           }
-        }
-        ImmutableSet<ExecutableElement> moduleProvidesMethods =
-            moduleProvidesMethodsBuilder.build();
+          ImmutableSet<ExecutableElement> moduleProvidesMethods =
+              moduleProvidesMethodsBuilder.build();
 
-        if (Sets.difference(moduleProvidesMethods, validProvidesMethods).isEmpty()) {
-          // all of the provides methods in this module are valid!
-          // time to generate some factories!
-          ImmutableSet<ProvisionBinding> bindings = FluentIterable.from(moduleProvidesMethods)
-              .transform(new Function<ExecutableElement, ProvisionBinding>() {
-                @Override
-                public ProvisionBinding apply(ExecutableElement providesMethod) {
-                  return provisionBindingFactory.forProvidesMethod(providesMethod);
-                }
-              })
-              .toSet();
+          if (Sets.difference(moduleProvidesMethods, validProvidesMethods).isEmpty()) {
+            // all of the provides methods in this module are valid!
+            // time to generate some factories!
+            ImmutableSet<ProvisionBinding> bindings = FluentIterable.from(moduleProvidesMethods)
+                .transform(new Function<ExecutableElement, ProvisionBinding>() {
+                  @Override
+                  public ProvisionBinding apply(ExecutableElement providesMethod) {
+                    return provisionBindingFactory.forProvidesMethod(providesMethod);
+                  }
+                })
+                .toSet();
 
-          try {
-            for (ProvisionBinding binding : bindings) {
-              factoryGenerator.generate(binding);
+            try {
+              for (ProvisionBinding binding : bindings) {
+                factoryGenerator.generate(binding);
+              }
+            } catch (SourceFileGenerationException e) {
+              e.printMessageTo(messager);
             }
-          } catch (SourceFileGenerationException e) {
-            e.printMessageTo(messager);
           }
         }
+        processedModuleElements.add(moduleElement);
       }
     }
-
     return false;
   }
 }
