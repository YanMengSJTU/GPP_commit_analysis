diff --git a/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java b/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java
new file mode 100644
index 000000000..8e4e9b28b
--- /dev/null
+++ b/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java
@@ -0,0 +1,77 @@
+/*
+ * Copyright (C) 2015 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.producers.monitoring;
+
+/**
+ * A hook for monitoring the execution of individual {@linkplain Produces producer methods}. See
+ * {@link ProductionComponentMonitor} for how to install these monitors.
+ *
+ * <p>The lifecycle of the monitor is:
+ * <ul>
+ *   <li>{@link #methodStarting}
+ *   <li>The method is called
+ *   <li>{@link #methodFinished}
+ *   <li>If the method returns a value, then:
+ *   <ul>
+ *     <li>{#succeeded} if the method returned normally; or
+ *     <li>{#failed} if the method threw an exception.
+ *   </ul>
+ *   <li>If the method returns a future, then:
+ *   <ul>
+ *     <li>{#succeeded} if the method returned normally, and the future succeeded; or
+ *     <li>{#failed} if the method threw an exception, or returned normally and the future failed.
+ *   </ul>
+ * </ul>
+ *
+ * <p>If any of the monitor's methods throw, then the exception will be logged and processing will
+ * continue unaffected.
+ *
+ * @author Jesse Beder
+ */
+public abstract class ProducerMonitor {
+  /**
+   * Called when the producer method is about to start executing.
+   *
+   * <p>When multiple monitors are installed, the order that each monitor will call
+   * {@code methodWillStart} is unspecified, but will remain consistent throughout the course of the
+   * execution of a component.
+   */
+  public void methodStarting() {}
+
+  /**
+   * Called when the producer method has finished executing.
+   *
+   * <p>When multiple monitors are installed, the {@code methodFinished} calls will be in the
+   * reverse order from the {@link #methodWillStart} calls.
+   */
+  public void methodFinished() {}
+
+  /**
+   * Called when the producerâ€™s future has completed successfully with a value.
+   *
+   * <p>When multiple monitors are installed, the {@code futureSucceeded} calls will be in the
+   * reverse order from the {@link #methodWillStart} calls.
+   */
+  public void succeeded(Object o) {}
+
+  /**
+   * Called when the producer's future has failed with an exception.
+   *
+   * <p>When multiple monitors are installed, the {@code futureFailed} calls will be in the reverse
+   * order from the {@link #methodWillStart} calls.
+   */
+  public void failed(Throwable t) {}
+}
diff --git a/producers/src/main/java/dagger/producers/monitoring/ProducerToken.java b/producers/src/main/java/dagger/producers/monitoring/ProducerToken.java
new file mode 100644
index 000000000..126a40d4e
--- /dev/null
+++ b/producers/src/main/java/dagger/producers/monitoring/ProducerToken.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright (C) 2015 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.producers.monitoring;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+
+/** A token that represents an individual {@linkplain Produces producer method}. */
+public final class ProducerToken {
+  private final Class<?> classToken;
+
+  private ProducerToken(Class<?> classToken) {
+    this.classToken = classToken;
+  }
+
+  /**
+   * Creates a token for a class token that represents the generated factory for a producer method.
+   *
+   * <p><b>Do not use this!</b> This is intended to be called by generated code only, and its
+   * signature may change at any time.
+   */
+  public static ProducerToken create(Class<?> classToken) {
+    return new ProducerToken(checkNotNull(classToken));
+  }
+
+  /** Two tokens are equal if they represent the same method. */
+  @Override
+  public boolean equals(Object o) {
+    if (o == this) {
+      return true;
+    } else if (o instanceof ProducerToken) {
+      ProducerToken that = (ProducerToken) o;
+      return this.classToken.equals(that.classToken);
+    } else {
+      return false;
+    }
+  }
+
+  /** Returns an appropriate hash code to match {@link #equals). */
+  @Override
+  public int hashCode() {
+    return classToken.hashCode();
+  }
+
+  /** Returns a representation of the method. */
+  @Override
+  public String toString() {
+    return classToken.toString();
+  }
+}
diff --git a/producers/src/main/java/dagger/producers/monitoring/ProductionComponentMonitor.java b/producers/src/main/java/dagger/producers/monitoring/ProductionComponentMonitor.java
new file mode 100644
index 000000000..1a62dfa1f
--- /dev/null
+++ b/producers/src/main/java/dagger/producers/monitoring/ProductionComponentMonitor.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2015 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.producers.monitoring;
+
+/**
+ * A hook for monitoring execution of {@linkplain ProductionComponent production components}. To
+ * install a {@code ProductionComponentMonitor}, contribute to a set binding of
+ * {@code ProductionComponentMonitor.Factory}. The factory will be asked to create one monitor for
+ * the component, and the resulting single instance will be used to create individual monitors for
+ * producers.
+ *
+ * <p>For example: <pre><code>
+ *   {@literal @Module}
+ *   final class MyMonitorModule {
+ *     {@literal @Provides(type = SET)} ProductionComponentMonitor.Factory provideMonitorFactory(
+ *         MyProductionComponentMonitor.Factory monitorFactory) {
+ *       return monitorFactory;
+ *     }
+ *   }
+ *
+ *   {@literal @ProductionComponent(modules = {MyMonitorModule.class, MyProducerModule.class})}
+ *   interface MyComponent {
+ *     {@literal ListenableFuture<SomeType>} someType();
+ *   }
+ * </code></pre>
+ *
+ * <p>If any of these methods throw, then the exception will be logged, and the framework will act
+ * as though a no-op monitor was returned.
+ *
+ * @author Jesse Beder
+ */
+public interface ProductionComponentMonitor {
+  /** Returns a monitor for an individual {@linkplain Produces producer method}. */
+  ProducerMonitor producerMonitorFor(ProducerToken token);
+
+  public interface Factory {
+    /** Creates a component-specific monitor when the component is created. */
+    ProductionComponentMonitor create(Object component);
+  }
+}
diff --git a/producers/src/main/java/dagger/producers/monitoring/package-info.java b/producers/src/main/java/dagger/producers/monitoring/package-info.java
new file mode 100644
index 000000000..d10408706
--- /dev/null
+++ b/producers/src/main/java/dagger/producers/monitoring/package-info.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2015 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * This package provides hooks for monitoring producers.
+ *
+ * <p>The interfaces in this package are not stable. Do not use these interfaces unless you are
+ * prepared to be broken.
+ */
+package dagger.producers.monitoring;
