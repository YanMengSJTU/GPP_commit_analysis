diff --git a/java/dagger/internal/codegen/ComponentRequirement.java b/java/dagger/internal/codegen/ComponentRequirement.java
index 9ba30ec74..7047d9bbd 100644
--- a/java/dagger/internal/codegen/ComponentRequirement.java
+++ b/java/dagger/internal/codegen/ComponentRequirement.java
@@ -57,14 +57,24 @@
      * An object that is passed to a builder's {@link dagger.BindsInstance @BindsInstance} method.
      */
     BOUND_INSTANCE,
+    ;
+
+    boolean isBoundInstance() {
+      return equals(BOUND_INSTANCE);
+    }
+
+    boolean isModule() {
+      return equals(MODULE);
+    }
   }
 
   /** The kind of requirement. */
   abstract Kind kind();
 
   /** Returns true if this is a {@link Kind#BOUND_INSTANCE} requirement. */
+  // TODO(ronshapiro): consider removing this and inlining the usages
   final boolean isBoundInstance() {
-    return kind().equals(Kind.BOUND_INSTANCE);
+    return kind().isBoundInstance();
   }
 
   /**
@@ -125,7 +135,7 @@ NullPolicy nullPolicy(Elements elements, Types types) {
    * to be used within a component.
    */
   boolean requiresAPassedInstance(Elements elements, Types types) {
-    if (kind().equals(Kind.BOUND_INSTANCE)) {
+    if (isBoundInstance()) {
       // A user has explicitly defined in their component builder they will provide an instance.
       return true;
     }
diff --git a/java/dagger/internal/codegen/ComponentRequirementFields.java b/java/dagger/internal/codegen/ComponentRequirementFields.java
index 86587a592..fc07e486b 100644
--- a/java/dagger/internal/codegen/ComponentRequirementFields.java
+++ b/java/dagger/internal/codegen/ComponentRequirementFields.java
@@ -114,7 +114,7 @@ private ComponentRequirementField create(ComponentRequirement requirement) {
       ParameterSpec factoryParameter =
           ParameterSpec.get(graph.factoryMethodParameters().get(requirement));
       return new ComponentParameterField(requirement, componentImplementation, factoryParameter);
-    } else if (requirement.kind().equals(ComponentRequirement.Kind.MODULE)) {
+    } else if (requirement.kind().isModule()) {
       return new ComponentInstantiableField(requirement, componentImplementation);
     } else {
       throw new AssertionError(
