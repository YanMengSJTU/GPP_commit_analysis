diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index 7d8e8e044..707f96a64 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -190,8 +190,7 @@ private BindingGraph create(Optional<RequestResolver> parentResolver,
 
       ImmutableSet<DependencyRequest> componentMethodRequests =
           componentMethodRequests(componentMethods);
-      for (DependencyRequest componentMethodRequest :
-          componentMethodRequests) {
+      for (DependencyRequest componentMethodRequest : componentMethodRequests) {
         requestResolver.resolve(componentMethodRequest);
       }
 
@@ -336,14 +335,28 @@ private BindingGraph create(Optional<RequestResolver> parentResolver,
             }
           case MEMBERS_INJECTION:
             // no explicit deps for members injection, so just look it up
-            MembersInjectionBinding membersInjectionBinding =
-                injectBindingRegistry.getOrFindMembersInjectionBinding(bindingKey.key());
-            return Optional.of(ImmutableSet.of(membersInjectionBinding));
+            return Optional.of(ImmutableSet.of(rollUpMembersInjectionBindings(bindingKey.key())));
           default:
             throw new AssertionError();
         }
       }
 
+      private MembersInjectionBinding rollUpMembersInjectionBindings(Key key) {
+        MembersInjectionBinding membersInjectionBinding =
+            injectBindingRegistry.getOrFindMembersInjectionBinding(key);
+
+        if (membersInjectionBinding.injectionSites().isEmpty()
+            && membersInjectionBinding.parentInjectorRequest().isPresent()) {
+          MembersInjectionBinding parentBinding = rollUpMembersInjectionBindings(
+              membersInjectionBinding.parentInjectorRequest().get().key());
+          if (parentBinding.injectionSites().isEmpty()) {
+            return membersInjectionBinding.withoutParentInjectorRequest();
+          }
+        }
+
+        return membersInjectionBinding;
+      }
+
       private Optional<RequestResolver> getOwningResolver(ProvisionBinding provisionBinding) {
         Optional<Equivalence.Wrapper<AnnotationMirror>> bindingScope =
             provisionBinding.wrappedScope();
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index f76042d33..d0410bb71 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -457,20 +457,34 @@ private void writeFields(BindingGraph input,
     for (ResolvedBindings resolvedBindings : input.resolvedBindings().values()) {
       BindingKey bindingKey = resolvedBindings.bindingKey();
 
-      if (resolvedBindings.bindings().size() == 1
-          && bindingKey.kind().equals(BindingKey.Kind.CONTRIBUTION)) {
-        ContributionBinding contributionBinding =
-            Iterables.getOnlyElement(resolvedBindings.contributionBindings());
-        if (contributionBinding instanceof ProvisionBinding) {
-          ProvisionBinding provisionBinding = (ProvisionBinding) contributionBinding;
-          if (provisionBinding.factoryCreationStrategy().equals(ENUM_INSTANCE)
-              && !provisionBinding.scope().isPresent()) {
+      if (resolvedBindings.bindings().size() == 1) {
+        if (bindingKey.kind().equals(BindingKey.Kind.CONTRIBUTION)) {
+          ContributionBinding contributionBinding =
+              Iterables.getOnlyElement(resolvedBindings.contributionBindings());
+          if (contributionBinding instanceof ProvisionBinding) {
+            ProvisionBinding provisionBinding = (ProvisionBinding) contributionBinding;
+            if (provisionBinding.factoryCreationStrategy().equals(ENUM_INSTANCE)
+                && !provisionBinding.scope().isPresent()) {
+              enumBindingKeysBuilder.add(bindingKey);
+              // skip keys whose factories are enum instances and aren't scoped
+              memberSelectSnippetsBuilder.put(bindingKey,
+                  MemberSelect.staticSelect(
+                      factoryNameForProvisionBinding(provisionBinding),
+                      Snippet.format("create()")));
+              continue;
+            }
+          }
+        } else if (bindingKey.kind().equals(BindingKey.Kind.MEMBERS_INJECTION)) {
+          MembersInjectionBinding membersInjectionBinding =
+              Iterables.getOnlyElement(resolvedBindings.membersInjectionBindings());
+          if (membersInjectionBinding.injectionSites().isEmpty()
+              && !membersInjectionBinding.parentInjectorRequest().isPresent()) {
+            // TODO(gak): refactory to use enumBindingKeys throughout the generator
             enumBindingKeysBuilder.add(bindingKey);
-            // skip keys whose factories are enum instances and aren't scoped
             memberSelectSnippetsBuilder.put(bindingKey,
                 MemberSelect.staticSelect(
-                    factoryNameForProvisionBinding(provisionBinding),
-                    Snippet.format("create()")));
+                    ClassName.fromClass(MembersInjectors.class),
+                    Snippet.format("noOp()")));
             continue;
           }
         }
@@ -751,10 +765,13 @@ private void initializeFrameworkTypes(BindingGraph input,
           case MEMBERS_INJECTION:
             MembersInjectionBinding binding = Iterables.getOnlyElement(
                 input.resolvedBindings().get(bindingKey).membersInjectionBindings());
-            initializeMethod.body().addSnippet("this.%s = %s;",
-                memberSelectSnippet,
-                initializeMembersInjectorForBinding(
-                    componentWriter.name(), binding, memberSelectSnippets));
+            if (!binding.injectionSites().isEmpty()
+                || binding.parentInjectorRequest().isPresent()) {
+              initializeMethod.body().addSnippet("this.%s = %s;",
+                  memberSelectSnippet,
+                  initializeMembersInjectorForBinding(
+                      componentWriter.name(), binding, memberSelectSnippets));
+            }
             break;
           default:
             throw new AssertionError();
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
index 9868c661d..888c2aabe 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
@@ -60,6 +60,18 @@
 
   abstract Optional<DependencyRequest> parentInjectorRequest();
 
+  MembersInjectionBinding withoutParentInjectorRequest() {
+    return new AutoValue_MembersInjectionBinding(
+          key(),
+          dependencies(),
+          implicitDependencies(),
+          bindingPackage(),
+          hasNonDefaultTypeParameters(),
+          bindingElement(),
+          injectionSites(),
+          Optional.<DependencyRequest>absent());
+  }
+
   private static final Ordering<InjectionSite> INJECTION_ORDERING =
       new Ordering<InjectionSite>() {
         @Override
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index d9613ddb3..2a1c020cf 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -1115,15 +1115,12 @@
         "test.Dagger_SimpleComponent",
         "package test;",
         "",
-        "import dagger.MembersInjector;",
         "import dagger.internal.MembersInjectors;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private MembersInjector<AbstractGenericType<String>> abstractGenericTypeMembersInjector;",
-        "  private MembersInjector<SomeInjectableType> someInjectableTypeMembersInjector;",
         "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
@@ -1140,11 +1137,8 @@
         "  }",
         "",
         "  private void initialize() {",
-        "    this.abstractGenericTypeMembersInjector = MembersInjectors.noOp();",
-        "    this.someInjectableTypeMembersInjector = MembersInjectors.delegatingTo(",
-        "        abstractGenericTypeMembersInjector);",
         "    this.someInjectableTypeProvider =",
-        "        SomeInjectableType$$Factory.create(someInjectableTypeMembersInjector);",
+        "        SomeInjectableType$$Factory.create(MembersInjectors.noOp());",
         "  }",
         "",
         "  @Override",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
index fe330a201..cb8a8adf1 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
@@ -57,15 +57,12 @@ public void parentClass_noInjectedMembers() {
         "test.Dagger_TestComponent",
         "package test;",
         "",
-        "import dagger.MembersInjector;",
         "import dagger.internal.MembersInjectors;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private MembersInjector<Parent> parentMembersInjector;",
-        "  private MembersInjector<Child> childMembersInjector;",
         "  private Provider<Child> childProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
@@ -82,9 +79,7 @@ public void parentClass_noInjectedMembers() {
         "  }",
         "",
         "  private void initialize() {",
-        "    this.parentMembersInjector = MembersInjectors.noOp();",
-        "    this.childMembersInjector = MembersInjectors.delegatingTo(parentMembersInjector);",
-        "    this.childProvider = Child$$Factory.create(childMembersInjector);",
+        "    this.childProvider = Child$$Factory.create(MembersInjectors.noOp());",
         "  }",
         "",
         "  @Override",
