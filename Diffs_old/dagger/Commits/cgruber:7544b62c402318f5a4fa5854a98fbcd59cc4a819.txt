diff --git a/java/dagger/internal/codegen/AbstractComponentWriter.java b/java/dagger/internal/codegen/AbstractComponentWriter.java
index 27d4be699..67ddf8f4f 100644
--- a/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -320,7 +320,6 @@ private void addBuilder() {
     addBuilderClass(builder.typeSpec());
 
     constructor.addParameter(builderName(), "builder");
-    constructor.addStatement("assert builder != null");
   }
 
   /**
diff --git a/java/dagger/internal/codegen/FactoryGenerator.java b/java/dagger/internal/codegen/FactoryGenerator.java
index 864ba4df8..8d6b5133e 100644
--- a/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/java/dagger/internal/codegen/FactoryGenerator.java
@@ -311,7 +311,7 @@ private FieldSpec addConstructorParameterAndTypeField(
     factoryBuilder.addField(field);
     ParameterSpec parameter = ParameterSpec.builder(typeName, variableName).build();
     constructorBuilder.addParameter(parameter);
-    constructorBuilder.addCode("assert $1N != null; this.$2N = $1N;", parameter, field);
+    constructorBuilder.addCode("this.$N = $N;", field, parameter);
     return field;
   }
 }
diff --git a/java/dagger/internal/codegen/MembersInjectorGenerator.java b/java/dagger/internal/codegen/MembersInjectorGenerator.java
index 2cac1710d..5e8381ea2 100644
--- a/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/java/dagger/internal/codegen/MembersInjectorGenerator.java
@@ -180,8 +180,7 @@ ClassName nameGeneratedType(MembersInjectionBinding binding) {
 
       FieldSpec field = fieldBuilder.build();
       injectorTypeBuilder.addField(field);
-      constructorBuilder.addStatement("assert $N != null", field);
-      constructorBuilder.addStatement("this.$N = $N", field, field);
+      constructorBuilder.addStatement("this.$1N = $1N", field);
       dependencyFieldsBuilder.put(dependencyBindingKey, field);
       constructorInvocationParameters.add(CodeBlock.of("$N", field));
     }
diff --git a/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index 44d656b2c..7b9f0e059 100644
--- a/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -182,10 +182,6 @@ ClassName nameGeneratedType(ProductionBinding binding) {
             .addModifiers(PUBLIC)
             .addParameter(futureTransform.applyArgType(), futureTransform.applyArgName())
             .addExceptions(getThrownTypeNames(binding.thrownTypes()))
-            .addStatement(
-                "assert monitor != null : $S",
-                "apply() may only be called internally from compute(); "
-                    + "if it's called explicitly, the monitor might be null")
             .addCode(
                 getInvocationCodeBlock(
                     generatedTypeName,
@@ -203,10 +199,6 @@ ClassName nameGeneratedType(ProductionBinding binding) {
             .addAnnotation(Deprecated.class)
             .addAnnotation(Override.class)
             .addParameter(RUNNABLE, "runnable")
-            .addStatement(
-                "assert monitor != null : $S",
-                "execute() may only be called internally from compute(); "
-                    + "if it's called explicitly, the monitor might be null")
             .addStatement("monitor.ready()")
             .addStatement("executorProvider.get().execute(runnable)");
 
@@ -234,9 +226,7 @@ private static FieldSpec addFieldAndConstructorParameter(
   }
 
   private static void assignField(MethodSpec.Builder constructorBuilder, FieldSpec field) {
-    constructorBuilder
-        .addStatement("assert $N != null", field)
-        .addStatement("this.$1N = $1N", field);
+    constructorBuilder.addStatement("this.$1N = $1N", field);
   }
 
   /** Returns a list of dependencies that are generated asynchronously. */
diff --git a/javatests/dagger/internal/codegen/ComponentBuilderTest.java b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
index d3ae193b5..c9ea2c30e 100644
--- a/javatests/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
@@ -76,9 +76,7 @@ public void testEmptyBuilder() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerSimpleComponent implements SimpleComponent {",
-            "  private DaggerSimpleComponent(Builder builder) {",
-            "    assert builder != null;",
-            "  }",
+            "  private DaggerSimpleComponent(Builder builder) {}",
             "",
             "  public static SimpleComponent.Builder builder() {",
             "    return new Builder();",
@@ -154,7 +152,6 @@ public void testUsesBuildAndSetterNames() {
             "  private Provider<String> stringProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -262,7 +259,6 @@ public void testIgnoresModulesNotInApi() {
             "  private Provider<Integer> integerProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -457,7 +453,6 @@ public void testBuilderBindsInstanceNoCreateGenerated() {
             "  private Provider<Object> objectProvider;",
             "",
             "  private DaggerSimpleComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index 8ada8cfed..4884b4d66 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -263,9 +263,7 @@ public void componentWithInvalidModule() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerSimpleComponent implements SimpleComponent {",
-            "  private DaggerSimpleComponent(Builder builder) {",
-            "    assert builder != null;",
-            "  }",
+            "  private DaggerSimpleComponent(Builder builder) {}",
             "",
             "  public static Builder builder() {",
             "    return new Builder();",
@@ -347,7 +345,6 @@ public void componentWithInvalidModule() {
             "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
             "",
             "  private DaggerSimpleComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -430,7 +427,6 @@ public void componentWithInvalidModule() {
             "  private MembersInjector<OuterType.B> bMembersInjector;",
             "",
             "  private DaggerOuterType_SimpleComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -532,7 +528,6 @@ public void componentWithInvalidModule() {
             "  private Provider<A> aProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -651,7 +646,6 @@ public void componentWithAbstractModule() {
             "  private Provider<A> aProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -773,7 +767,6 @@ public void componentWithAbstractModule() {
         "public final class DaggerTestComponent implements TestComponent {",
         "",
         "  private DaggerTestComponent(Builder builder) {",
-        "    assert builder != null;",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -785,8 +778,7 @@ public void componentWithAbstractModule() {
         "  }",
         "",
         "  public static final class Builder {",
-        "    private Builder() {",
-        "    }",
+        "    private Builder() {}",
         "",
         "    public TestComponent build() {",
         "      return new DaggerTestComponent(this);",
@@ -967,9 +959,7 @@ public void subcomponentNotGeneratedIfNotUsedInGraph() {
             GENERATED_ANNOTATION,
             "public final class DaggerParent implements Parent {",
             "",
-            "  private DaggerParent(Builder builder) {",
-            "    assert builder != null;",
-            "  }",
+            "  private DaggerParent(Builder builder) {}",
             "",
             "  public static Builder builder() {",
             "    return new Builder();",
@@ -987,8 +977,7 @@ public void subcomponentNotGeneratedIfNotUsedInGraph() {
             "",
             "  public static final class Builder {",
             "",
-            "    private Builder() {",
-            "    }",
+            "    private Builder() {}",
             "",
             "    public Parent build() {",
             "      return new DaggerParent(this);",
@@ -1079,7 +1068,6 @@ public void testDefaultPackage() {
         "  private MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
         "",
         "  private DaggerSimpleComponent(Builder builder) {",
-        "    assert builder != null;",
         "    initialize(builder);",
         "  }",
         "",
@@ -1160,7 +1148,6 @@ public void testDefaultPackage() {
             "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
             "",
             "  private DaggerSimpleComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -1241,7 +1228,6 @@ public void testDefaultPackage() {
         "  private Provider<SomeInjectedType> someInjectedTypeProvider;",
         "",
         "  private DaggerSimpleComponent(Builder builder) {",
-        "    assert builder != null;",
         "    initialize(builder);",
         "  }",
         "",
@@ -1319,7 +1305,6 @@ public void testDefaultPackage() {
         "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
         "  private DaggerSimpleComponent(Builder builder) {",
-        "    assert builder != null;",
         "    initialize(builder);",
         "  }",
         "",
@@ -1413,7 +1398,6 @@ public void testDefaultPackage() {
             "  private Provider<B> bProvider;",
             "",
             "  private DaggerBComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -1530,7 +1514,6 @@ public void testDefaultPackage() {
         "  private Provider<other.test.A> aProvider2;",
         "",
         "  private DaggerTestComponent(Builder builder) {",
-        "    assert builder != null;",
         "    initialize(builder);",
         "  }",
         "",
@@ -1655,7 +1638,6 @@ public void testDefaultPackage() {
             "  private Provider<X> xProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -1755,9 +1737,7 @@ public void testDefaultPackage() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerSimpleComponent implements SimpleComponent {",
-            "  private DaggerSimpleComponent(Builder builder) {",
-            "    assert builder != null;",
-            "  }",
+            "  private DaggerSimpleComponent(Builder builder) {}",
             "",
             "  public static Builder builder() {",
             "    return new Builder();",
@@ -1773,8 +1753,7 @@ public void testDefaultPackage() {
             "  }",
             "",
             "  public static final class Builder {",
-            "    private Builder() {",
-            "    }",
+            "    private Builder() {}",
             "",
             "    public SimpleComponent build() {",
             "      return new DaggerSimpleComponent(this);",
@@ -1844,9 +1823,7 @@ public void testDefaultPackage() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerSimpleComponent implements SimpleComponent {",
-            "  private DaggerSimpleComponent(Builder builder) {",
-            "    assert builder != null;",
-            "  }",
+            "  private DaggerSimpleComponent(Builder builder) {}",
             "",
             "  public static Builder builder() {",
             "    return new Builder();",
@@ -2070,7 +2047,6 @@ public void genericTestToLetMeDebugInEclipse() {
          "  private Provider<D> dProvider;",
          "",
          "  private DaggerSimpleComponent(Builder builder) {",
-         "    assert builder != null;",
          "    initialize(builder);",
          "  }",
          "",
@@ -2346,7 +2322,6 @@ public void unusedSubcomponents_dontResolveExtraBindingsInParentComponents() {
             GENERATED_ANNOTATION,
             "public final class DaggerParent implements Parent {",
             "  private DaggerParent(Builder builder) {",
-            "    assert builder != null;",
             "  }",
             "",
             "  public static Builder builder() {",
@@ -2647,9 +2622,7 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    assert builder != null;",
-                "  }",
+                "  private DaggerTestComponent(Builder builder) {}",
                 "",
                 "  public static Builder builder() {",
                 "    return new Builder();",
diff --git a/javatests/dagger/internal/codegen/InaccessibleTypeTest.java b/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
index 4f2932e41..26fcc93d3 100644
--- a/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
+++ b/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
@@ -96,7 +96,6 @@
             "  private Provider<PublicClass> publicClassProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -227,7 +226,6 @@
             "  private MembersInjector<A> aMembersInjector;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
diff --git a/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
index bf557bdc8..e32da327f 100644
--- a/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
@@ -146,7 +146,6 @@
             "  private final Provider<T> tProvider;",
             "",
             "  public GenericClass_Factory(Provider<T> tProvider) {",
-            "    assert tProvider != null;",
             "    this.tProvider = tProvider;",
             "  }",
             "",
@@ -198,7 +197,6 @@
             "",
             "  public GenericClass_Factory(",
             "      MembersInjector<GenericClass<A, B>> genericClassMembersInjector) {",
-            "    assert genericClassMembersInjector != null;",
             "    this.genericClassMembersInjector = genericClassMembersInjector;",
             "  }",
             "",
@@ -285,9 +283,7 @@
             "  private final Provider<B> bProvider;",
             "",
             "  public GenericClass_Factory(Provider<A> aProvider, Provider<B> bProvider) {",
-            "    assert aProvider != null;",
             "    this.aProvider = aProvider;",
-            "    assert bProvider != null;",
             "    this.bProvider = bProvider;",
             "  }",
             "",
@@ -345,11 +341,8 @@
             "  public GenericClass_Factory(Provider<A> aProvider,",
             "      Provider<B> bProvider,",
             "      Provider<C> cProvider) {",
-            "    assert aProvider != null;",
             "    this.aProvider = aProvider;",
-            "    assert bProvider != null;",
             "    this.bProvider = bProvider;",
-            "    assert cProvider != null;",
             "    this.cProvider = cProvider;",
             "  }",
             "",
@@ -421,17 +414,11 @@
             "      Provider<String> qsProvider,",
             "      Provider<B> bAndB2AndPbAndLbProvider,",
             "      Provider<B> qbProvider) {",
-            "    assert aAndA2AndPaAndLaProvider != null;",
             "    this.aAndA2AndPaAndLaProvider = aAndA2AndPaAndLaProvider;",
-            "    assert qaProvider != null;",
             "    this.qaProvider = qaProvider;",
-            "    assert sAndS2AndPsAndLsProvider != null;",
             "    this.sAndS2AndPsAndLsProvider = sAndS2AndPsAndLsProvider;",
-            "    assert qsProvider != null;",
             "    this.qsProvider = qsProvider;",
-            "    assert bAndB2AndPbAndLbProvider != null;",
             "    this.bAndB2AndPbAndLbProvider = bAndB2AndPbAndLbProvider;",
-            "    assert qbProvider != null;",
             "    this.qbProvider = qbProvider;",
             "  }",
             "",
@@ -988,7 +975,6 @@
             "  private final Provider<String> sProvider;",
             "",
             "  public InjectConstructor_Factory(Provider<String> sProvider) {",
-            "    assert sProvider != null;",
             "    this.sProvider = sProvider;",
             "  }",
             "",
@@ -1041,9 +1027,7 @@
             "  public AllInjections_Factory(",
             "      MembersInjector<AllInjections> allInjectionsMembersInjector, ",
             "      Provider<String> sProvider) {",
-            "    assert allInjectionsMembersInjector != null;",
             "    this.allInjectionsMembersInjector = allInjectionsMembersInjector;",
-            "    assert sProvider != null;",
             "    this.sProvider = sProvider;",
             "  }",
             "",
@@ -1093,7 +1077,6 @@
             "  private final MembersInjector<B> bMembersInjector;",
             "",
             "  public B_Factory(MembersInjector<B> bMembersInjector) {",
-            "    assert bMembersInjector != null;",
             "    this.bMembersInjector = bMembersInjector;",
             "  }",
             "",
@@ -1139,7 +1122,6 @@ public void wildcardDependency() {
             "  private final Provider<List<?>> objectsProvider;",
             "",
             "  public InjectConstructor_Factory(Provider<List<?>> objectsProvider) {",
-            "    assert objectsProvider != null;",
             "    this.objectsProvider = objectsProvider;",
             "  }",
             "",
@@ -1192,7 +1174,6 @@ public void basicNameCollision() {
             "  private final Provider<other.pkg.Factory> factoryProvider;",
             "",
             "  public InjectConstructor_Factory(Provider<other.pkg.Factory> factoryProvider) {",
-            "    assert factoryProvider != null;",
             "    this.factoryProvider = factoryProvider;",
             "  }",
             "",
@@ -1249,7 +1230,6 @@ public void nestedNameCollision() {
             "  private final Provider<Outer.Factory> factoryProvider;",
             "",
             "  public InjectConstructor_Factory(Provider<Outer.Factory> factoryProvider) {",
-            "    assert factoryProvider != null;",
             "    this.factoryProvider = factoryProvider;",
             "  }",
             "",
@@ -1310,9 +1290,7 @@ public void samePackageNameCollision() {
             "  public InjectConstructor_Factory(",
             "      Provider<other.pkg.CommonName> otherPackageProvider,",
             "      Provider<CommonName> samePackageProvider) {",
-            "    assert otherPackageProvider != null;",
             "    this.otherPackageProvider = otherPackageProvider;",
-            "    assert samePackageProvider != null;",
             "    this.samePackageProvider = samePackageProvider;",
             "  }",
             "",
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 5c4f98214..bf46a3c0d 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -128,7 +128,6 @@ public void mapBindingsWithEnumKey() {
             "      mapOfPathEnumAndProviderOfHandlerProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -281,7 +280,6 @@ public void mapBindingsWithStringKey() {
             "      mapOfStringAndProviderOfHandlerProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -443,7 +441,6 @@ public void mapBindingsWithWrappedKey() {
             "      mapOfWrappedClassKeyAndProviderOfHandlerProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -611,7 +608,6 @@ public void mapBindingsWithNonProviderValue() {
             "  private Provider<Map<PathEnum, Handler>> mapOfPathEnumAndHandlerProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -726,7 +722,6 @@ public void injectMapWithoutMapBinding() {
         "  private Provider<Map<String, String>> provideAMapProvider;",
         "",
         "  private DaggerTestComponent(Builder builder) {",
-        "    assert builder != null;",
         "    initialize(builder);",
         "  }",
         "",
diff --git a/javatests/dagger/internal/codegen/MapKeyProcessorTest.java b/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
index 62fe2fdb6..4a72a5f01 100644
--- a/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -226,7 +226,6 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
             "      mapOfPathKeyAndProviderOfHandlerProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -401,7 +400,6 @@ public void mapKeyComponentFileWithDefaultField() {
             "      mapOfPathKeyAndProviderOfHandlerProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
diff --git a/javatests/dagger/internal/codegen/MembersInjectionTest.java b/javatests/dagger/internal/codegen/MembersInjectionTest.java
index f7787758e..9e568fcf2 100644
--- a/javatests/dagger/internal/codegen/MembersInjectionTest.java
+++ b/javatests/dagger/internal/codegen/MembersInjectionTest.java
@@ -79,7 +79,6 @@ public void parentClass_noInjectedMembers() {
         "  private Provider<Child> childProvider;",
         "",
         "  private DaggerTestComponent(Builder builder) {",
-        "    assert builder != null;",
         "    initialize(builder);",
         "  }",
         "",
@@ -169,7 +168,6 @@ public void parentClass_injectedMembersInSupertype() {
             "  private Provider<Child> childProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -236,9 +234,7 @@ public void parentClass_injectedMembersInSupertype() {
         "  private final Provider<B> bProvider;",
         "",
         "  public GenericClass_MembersInjector(Provider<A> aProvider, Provider<B> bProvider) {",
-        "    assert aProvider != null;",
         "    this.aProvider = aProvider;",
-        "    assert bProvider != null;",
         "    this.bProvider = bProvider;",
         "  }",
         "",
@@ -331,11 +327,8 @@ public void parentClass_injectedMembersInSupertype() {
         "",
         "  public Child_MembersInjector(",
         "      Provider<T> tAndXProvider, Provider<A> aAndYProvider, Provider<A2> a2Provider) {",
-        "    assert tAndXProvider != null;",
         "    this.tAndXProvider = tAndXProvider;",
-        "    assert aAndYProvider != null;",
         "    this.aAndYProvider = aAndYProvider;",
-        "    assert a2Provider != null;",
         "    this.a2Provider = a2Provider;",
         "  }",
         "",
@@ -401,7 +394,6 @@ public void parentClass_injectedMembersInSupertype() {
             "  private final Provider<String> stringProvider;",
             "",
             "  public FieldInjection_MembersInjector(Provider<String> stringProvider) {",
-            "    assert stringProvider != null;",
             "    this.stringProvider = stringProvider;",
             "  }",
             "",
@@ -473,7 +465,6 @@ public void parentClass_injectedMembersInSupertype() {
             "  private final Provider<String> stringProvider;",
             "",
             "  public MethodInjection_MembersInjector(Provider<String> stringProvider) {",
-            "    assert stringProvider != null;",
             "    this.stringProvider = stringProvider;",
             "  }",
             "",
@@ -557,9 +548,7 @@ public void mixedMemberInjection() {
         "  public MixedMemberInjection_MembersInjector(",
         "      Provider<String> stringAndSProvider,",
         "      Provider<Object> objectAndOProvider) {",
-        "    assert stringAndSProvider != null;",
         "    this.stringAndSProvider = stringAndSProvider;",
-        "    assert objectAndOProvider != null;",
         "    this.objectAndOProvider = objectAndOProvider;",
         "  }",
         "",
@@ -635,7 +624,6 @@ public void mixedMemberInjection() {
         "  private final Provider<String> sProvider;",
         "",
         "  public AllInjections_MembersInjector(Provider<String> sProvider) {",
-        "    assert sProvider != null;",
         "    this.sProvider = sProvider;",
         "  }",
         "",
@@ -694,7 +682,6 @@ public void mixedMemberInjection() {
         "  private final Provider<String> sProvider;",
         "",
         "  public B_MembersInjector(Provider<String> sProvider) {",
-        "    assert sProvider != null;",
         "    this.sProvider = sProvider;",
         "  }",
         "",
@@ -757,7 +744,6 @@ public void simpleComponentWithNesting() {
           "  private final Provider<OuterType.A> aProvider;",
           "",
           "  public OuterType_B_MembersInjector(Provider<OuterType.A> aProvider) {",
-          "    assert aProvider != null;",
           "    this.aProvider = aProvider;",
           "  }",
           "",
@@ -823,7 +809,6 @@ public void componentWithNestingAndGeneratedType() {
             "  private final Provider<OuterType.A> aProvider;",
             "",
             "  public OuterType_B_MembersInjector(Provider<OuterType.A> aProvider) {",
-            "    assert aProvider != null;",
             "    this.aProvider = aProvider;",
             "  }",
             "",
@@ -1000,9 +985,7 @@ public void fieldInjectionForShadowedMember() {
             "",
             "  public Child_MembersInjector(",
             "        Provider<Foo> objectProvider, Provider<Bar> objectProvider2) {",
-            "    assert objectProvider != null;",
             "    this.objectProvider = objectProvider;",
-            "    assert objectProvider2 != null;",
             "    this.objectProvider2 = objectProvider2;",
             "  }",
             "",
diff --git a/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index 3cd0a8658..b30e3638a 100644
--- a/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -261,7 +261,6 @@ public void providesMethodReturnsProduced() {
             "  private final TestModule module;",
             "",
             "  public TestModule_ProvideStringFactory(TestModule module) {",
-            "    assert module != null;",
             "    this.module = module;",
             "  }",
             "",
@@ -309,7 +308,6 @@ public void providesMethodReturnsProduced() {
             "  private final TestModule module;",
             "",
             "  public TestModule_ProvideStringFactory(TestModule module) {",
-            "    assert module != null;",
             "    this.module = module;",
             "  }",
             "",
@@ -356,7 +354,6 @@ public void providesMethodReturnsProduced() {
             "  private final TestModule module;",
             "",
             "  public TestModule_ProvideStringFactory(TestModule module) {",
-            "    assert module != null;",
             "    this.module = module;",
             "  }",
             "",
@@ -454,13 +451,9 @@ public void providesMethodReturnsProduced() {
             "      Provider<Object> aProvider,",
             "      Provider<Object> bProvider,",
             "      MembersInjector<X> xMembersInjector) {",
-            "    assert module != null;",
             "    this.module = module;",
-            "    assert aProvider != null;",
             "    this.aProvider = aProvider;",
-            "    assert bProvider != null;",
             "    this.bProvider = bProvider;",
-            "    assert xMembersInjector != null;",
             "    this.xMembersInjector = xMembersInjector;",
             "  }",
             "",
@@ -520,7 +513,6 @@ public void providesMethodReturnsProduced() {
             "  private final TestModule module;",
             "",
             "  public TestModule_ProvideStringFactory(TestModule module) {",
-            "    assert module != null;",
             "    this.module = module;",
             "  }",
             "",
@@ -575,7 +567,6 @@ public void providesMethodReturnsProduced() {
             "  private final TestModule module;",
             "",
             "  public TestModule_ProvideWildcardListFactory(TestModule module) {",
-            "    assert module != null;",
             "    this.module = module;",
             "  }",
             "",
@@ -628,7 +619,6 @@ public void providesMethodReturnsProduced() {
             "  private final TestModule module;",
             "",
             "  public TestModule_ProvideStringsFactory(TestModule module) {",
-            "    assert module != null;",
             "    this.module = module;",
             "  }",
             "",
@@ -920,9 +910,7 @@ public void genericSubclassedModule() {
             "",
             "  public ParentModule_ProvideListBFactory(",
             "        ParentModule<A, B, C> module, Provider<B> bProvider) {",
-            "    assert module != null;",
             "    this.module = module;",
-            "    assert bProvider != null;",
             "    this.bProvider = bProvider;",
             "  }",
             "",
@@ -961,9 +949,7 @@ public void genericSubclassedModule() {
             "",
             "  public ParentModule_ProvideBElementFactory(",
             "        ParentModule<A, B, C> module, Provider<B> bProvider) {",
-            "    assert module != null;",
             "    this.module = module;",
-            "    assert bProvider != null;",
             "    this.bProvider = bProvider;",
             "  }",
             "",
@@ -1002,9 +988,7 @@ public void genericSubclassedModule() {
             "",
             "  public ParentModule_ProvideBEntryFactory(",
             "        ParentModule<A, B, C> module, Provider<B> bProvider) {",
-            "    assert module != null;",
             "    this.module = module;",
-            "    assert bProvider != null;",
             "    this.bProvider = bProvider;",
             "  }",
             "",
@@ -1040,7 +1024,6 @@ public void genericSubclassedModule() {
             "  private final ChildNumberModule module;",
             "",
             "  public ChildNumberModule_ProvideNumberFactory(ChildNumberModule module) {",
-            "    assert module != null;",
             "    this.module = module;",
             "  }",
             "",
@@ -1072,7 +1055,6 @@ public void genericSubclassedModule() {
             "  private final ChildIntegerModule module;",
             "",
             "  public ChildIntegerModule_ProvideIntegerFactory(ChildIntegerModule module) {",
-            "    assert module != null;",
             "    this.module = module;",
             "  }",
             "",
@@ -1207,7 +1189,6 @@ public void genericSubclassedModule() {
             "",
             "  public ParameterizedModule_ProvideNonGenericTypeWithDepsFactory(",
             "      Provider<Object> oProvider) {",
-            "    assert oProvider != null;",
             "    this.oProvider = oProvider;",
             "  }",
             "",
diff --git a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
index e89e20110..69a834d26 100644
--- a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
@@ -124,7 +124,6 @@ public void inlinedOptionalBindings() {
             "      optionalOfProviderOfLazyOfDefinitelyNotProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -316,7 +315,6 @@ public void requestForFuture() {
             "    private Provider<Optional<DefinitelyNot>> optionalOfDefinitelyNotProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "      assert builder != null;",
             "      initialize(builder);",
             "    }",
             "",
diff --git a/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
index 066ed9792..f527c3634 100644
--- a/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
@@ -380,11 +380,8 @@ public void publicModuleNonPublicIncludes() {
             "    super(",
             "        monitorProvider,",
             "        ProducerToken.create(TestModule_ProduceStringFactory.class));",
-            "    assert module != null;",
             "    this.module = module;",
-            "    assert executorProvider != null;",
             "    this.executorProvider = executorProvider;",
-            "    assert monitorProvider != null;",
             "    this.monitorProvider = monitorProvider;",
             "  }",
             "",
@@ -395,9 +392,6 @@ public void publicModuleNonPublicIncludes() {
             "",
             "  @Deprecated",
             "  @Override public ListenableFuture<String> apply(Void ignoredVoidArg) {",
-            "    assert monitor != null :",
-            "        \"apply() may only be called internally from compute(); \"",
-            "        + \"if it's called explicitly, the monitor might be null\";",
             "    monitor.methodStarting();",
             "    try {",
             "      return TestModule_ProduceStringFactory.this.module.produceString();",
@@ -408,9 +402,6 @@ public void publicModuleNonPublicIncludes() {
             "",
             "  @Deprecated",
             "  @Override public void execute(Runnable runnable) {",
-            "    assert monitor != null :",
-            "        \"execute() may only be called internally from compute(); \"",
-            "        + \"if it's called explicitly, the monitor might be null\";",
             "    monitor.ready();",
             "    executorProvider.get().execute(runnable);",
             "  }",
@@ -471,11 +462,8 @@ public void singleProducesMethodNoArgsFutureWithProducerName() {
             "    super(",
             "        monitorProvider,",
             "        ProducerToken.create(\"test.TestModule#produceString\"));",
-            "    assert module != null;",
             "    this.module = module;",
-            "    assert executorProvider != null;",
             "    this.executorProvider = executorProvider;",
-            "    assert monitorProvider != null;",
             "    this.monitorProvider = monitorProvider;",
             "  }",
             "",
@@ -486,9 +474,6 @@ public void singleProducesMethodNoArgsFutureWithProducerName() {
             "",
             "  @Deprecated",
             "  @Override public ListenableFuture<String> apply(Void ignoredVoidArg) {",
-            "    assert monitor != null :",
-            "        \"apply() may only be called internally from compute(); \"",
-            "        + \"if it's called explicitly, the monitor might be null\";",
             "    monitor.methodStarting();",
             "    try {",
             "      return TestModule_ProduceStringFactory.this.module.produceString();",
@@ -499,9 +484,6 @@ public void singleProducesMethodNoArgsFutureWithProducerName() {
             "",
             "  @Deprecated",
             "  @Override public void execute(Runnable runnable) {",
-            "    assert monitor != null :",
-            "        \"execute() may only be called internally from compute(); \"",
-            "        + \"if it's called explicitly, the monitor might be null\";",
             "    monitor.ready();",
             "    executorProvider.get().execute(runnable);",
             "  }",
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index ac82d83a4..2977d4b8f 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -227,7 +227,6 @@ public void simpleComponent() {
             "  private Producer<TestClass.A> aProducer;",
             "",
             "  private DaggerTestClass_SimpleComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
index 694bbc937..4d1d08448 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
@@ -101,7 +101,6 @@ public void setBindings() {
             "  private Provider<Set<String>> setOfStringProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -245,7 +244,6 @@ public void inaccessible() {
             "  private Provider<UsesInaccessible> usesInaccessibleProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -364,7 +362,6 @@ public void subcomponentOmitsInheritedBindings() {
             "  private Provider<Object> parentKeyObjectProvider;",
             "",
             "  private DaggerParent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
index f7cb7eac9..1ca6843ad 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
@@ -101,7 +101,6 @@ public void setBindings() {
             "  private Provider<Set<Integer>> setOfIntegerProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -258,7 +257,6 @@ public void inaccessible() {
             "  private Provider<UsesInaccessible> usesInaccessibleProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -376,7 +374,6 @@ public void subcomponentOmitsInheritedBindings() {
             "  private Provider<Object> parentKeyObjectProvider;",
             "",
             "  private DaggerParent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -506,7 +503,6 @@ public void productionComponents() {
             "  private Provider<Set<String>> setOfStringProvider;",
             "",
             "  private DaggerTestComponent(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
diff --git a/javatests/dagger/internal/codegen/SubcomponentBuilderRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SubcomponentBuilderRequestFulfillmentTest.java
index 1eb5431eb..35494aa39 100644
--- a/javatests/dagger/internal/codegen/SubcomponentBuilderRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentBuilderRequestFulfillmentTest.java
@@ -82,7 +82,6 @@ public void testInlinedSubcomponentBuilders_componentMethod() {
             "  private Provider<UsesSubcomponent> usesSubcomponentProvider;",
             "",
             "  private DaggerC(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -132,9 +131,7 @@ public void testInlinedSubcomponentBuilders_componentMethod() {
             "  }",
             "",
             "  private final class SubImpl implements Sub {",
-            "    private SubImpl(SubBuilder builder) {",
-            "      assert builder != null;",
-            "    }",
+            "    private SubImpl(SubBuilder builder) {}",
             "  }",
             "}");
 
diff --git a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
index 4054a07e2..67d033b02 100644
--- a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -362,7 +362,6 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
             "  private Provider<Dep2> dep2Provider;",
             "",
             "  private DaggerParentComponent(Builder builder) {  ",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -520,7 +519,6 @@ public void multipleSubcomponentsWithSameSimpleNamesCanExistInSameComponent() {
             GENERATED_ANNOTATION,
             "public final class DaggerParentComponent implements ParentComponent {",
             "  private DaggerParentComponent(Builder builder) {",
-            "    assert builder != null;",
             "  }",
             "",
             "  public static Builder builder() {",
@@ -626,9 +624,7 @@ public void subcomponentSimpleNamesDisambiguated() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerParentComponent implements ParentComponent {",
-            "  private DaggerParentComponent(Builder builder) {",
-            "    assert builder != null;",
-            "  }",
+            "  private DaggerParentComponent(Builder builder) {}",
             "",
             "  public static Builder builder() {",
             "    return new Builder();",
@@ -710,9 +706,7 @@ public void subcomponentSimpleNamesDisambiguatedInRoot() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerParentComponent implements ParentComponent {",
-            "  private DaggerParentComponent(Builder builder) {",
-            "    assert builder != null;",
-            "  }",
+            "  private DaggerParentComponent(Builder builder) {}",
             "",
             "  public static Builder builder() {",
             "    return new Builder();",
@@ -808,9 +802,7 @@ public void subcomponentImplNameUsesFullyQualifiedClassNameIfNecessary() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerParentComponent implements ParentComponent {",
-            "  private DaggerParentComponent(Builder builder) {",
-            "    assert builder != null;",
-            "  }",
+            "  private DaggerParentComponent(Builder builder) {}",
             "",
             "  public static Builder builder() {",
             "    return new Builder();",
@@ -887,9 +879,7 @@ public void parentComponentNameShouldNotBeDisambiguatedWhenItConflictsWithASubco
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerC implements C {",
-            "  private DaggerC(Builder builder) {",
-            "    assert builder != null;",
-            "  }",
+            "  private DaggerC(Builder builder) {}",
             "",
             "  public static Builder builder() {",
             "    return new Builder();",
@@ -975,7 +965,6 @@ public void subcomponentBuilderNamesShouldNotConflict() {
             "  private Provider<C.Bar.Sub.Builder> barBuilderProvider;",
             "",
             "  private DaggerC(Builder builder) {",
-            "    assert builder != null;",
             "    initialize(builder);",
             "  }",
             "",
@@ -1032,9 +1021,7 @@ public void subcomponentBuilderNamesShouldNotConflict() {
             "  }",
             "",
             "  private final class F_SubImpl implements C.Foo.Sub {",
-            "    private F_SubImpl(F_SubBuilder builder) {",
-            "      assert builder != null;",
-            "    }",
+            "    private F_SubImpl(F_SubBuilder builder) {}",
             "  }",
             "",
             "  private final class B_SubBuilder implements C.Bar.Sub.Builder {",
@@ -1045,9 +1032,7 @@ public void subcomponentBuilderNamesShouldNotConflict() {
             "  }",
             "",
             "  private final class B_SubImpl implements C.Bar.Sub {",
-            "    private B_SubImpl(B_SubBuilder builder) {",
-            "      assert builder != null;",
-            "    }",
+            "    private B_SubImpl(B_SubBuilder builder) {}",
             "  }",
             "}");
 
