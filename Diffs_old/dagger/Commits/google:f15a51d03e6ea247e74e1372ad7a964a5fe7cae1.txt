diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/monitoring/MonitoringTest.java b/compiler/src/it/producers-functional-tests/src/test/java/producerstest/monitoring/MonitoringTest.java
index 3efb2b5b1..375c90a19 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/monitoring/MonitoringTest.java
+++ b/compiler/src/it/producers-functional-tests/src/test/java/producerstest/monitoring/MonitoringTest.java
@@ -84,6 +84,9 @@ public void basicMonitoring() throws Exception {
     ProducerMonitor requestDataMonitor = entries.get(2).getValue();
 
     InOrder inOrder = inOrder(requestDataMonitor, callServer1Monitor, callServer2Monitor);
+    inOrder.verify(callServer2Monitor).requested();
+    inOrder.verify(callServer1Monitor).requested();
+    inOrder.verify(requestDataMonitor).requested();
     inOrder.verify(requestDataMonitor).methodStarting();
     inOrder.verify(requestDataMonitor).methodFinished();
     inOrder.verify(requestDataMonitor).succeeded("Hello, World!");
@@ -124,6 +127,9 @@ public void basicMonitoringWithFailure() throws Exception {
     ProducerMonitor requestDataMonitor = entries.get(2).getValue();
 
     InOrder inOrder = inOrder(requestDataMonitor, callServer1Monitor, callServer2Monitor);
+    inOrder.verify(callServer2Monitor).requested();
+    inOrder.verify(callServer1Monitor).requested();
+    inOrder.verify(requestDataMonitor).requested();
     inOrder.verify(requestDataMonitor).methodStarting();
     inOrder.verify(requestDataMonitor).methodFinished();
     inOrder.verify(requestDataMonitor).succeeded("Hello, World!");
diff --git a/producers/src/main/java/dagger/producers/internal/AbstractProducer.java b/producers/src/main/java/dagger/producers/internal/AbstractProducer.java
index f7e8ec0e5..8c4fe0b40 100644
--- a/producers/src/main/java/dagger/producers/internal/AbstractProducer.java
+++ b/producers/src/main/java/dagger/producers/internal/AbstractProducer.java
@@ -60,6 +60,7 @@ protected AbstractProducer(
         result = instance;
         if (result == null) {
           ProducerMonitor monitor = monitorProvider.get().producerMonitorFor(token);
+          monitor.requested();
           instance = result = compute(monitor);
           if (result == null) {
             throw new NullPointerException("compute returned null");
diff --git a/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java b/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java
index 20551c3db..5d46cf235 100644
--- a/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java
+++ b/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java
@@ -18,6 +18,7 @@
 import com.google.common.util.concurrent.FutureCallback;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
+import dagger.producers.Producer;
 import dagger.producers.Produces;
 
 /**
@@ -26,6 +27,7 @@
  *
  * <p>The lifecycle of the monitor, under normal conditions, is:
  * <ul>
+ *   <li>{@link #requested()}
  *   <li>{@link #methodStarting()}
  *   <li>The method is called
  *   <li>{@link #methodFinished()}
@@ -46,6 +48,24 @@
  * immediately with the failed input's exception. If more than one input fails, an arbitrary failed
  * input's exception is used.
  *
+ * <p>For example, given an entry point A that depends on B, which depends on C, when the entry
+ * point A is called, this will trigger the following sequence of events, assuming all methods and
+ * futures complete successfully:
+ * <ul>
+ *   <li>A requested
+ *   <li>B requested
+ *   <li>C requested
+ *   <li>C methodStarting
+ *   <li>C methodFinished
+ *   <li>C succeeded
+ *   <li>B methodStarting
+ *   <li>B methodFinished
+ *   <li>B succeeded
+ *   <li>A methodStarting
+ *   <li>A methodFinished
+ *   <li>A succeeded
+ * </ul>
+ *
  * <p>If any of the monitor's methods throw, then the exception will be logged and processing will
  * continue unaffected.
  *
@@ -53,18 +73,30 @@
  */
 public abstract class ProducerMonitor {
   /**
-   * Called when the producer method is about to start executing.
+   * Called when the producer's output is requested; that is, when the first method is called that
+   * requires the production of this producer's output.
+   *
+   * <p>Note that if a method depends on {@link Producer Producer<T>}, then this does not count as
+   * requesting {@code T}; that is only triggered by calling {@link Producer#get()}.
    *
    * <p>When multiple monitors are installed, the order that each monitor will call this method is
    * unspecified, but will remain consistent throughout the course of the execution of a component.
    */
+  public void requested() {}
+
+  /**
+   * Called when the producer method is about to start executing.
+   *
+   * <p>When multiple monitors are installed, calls to this method will be in the reverse order from
+   * calls to {@link #requested()}.
+   */
   public void methodStarting() {}
 
   /**
    * Called when the producer method has finished executing.
    *
    * <p>When multiple monitors are installed, calls to this method will be in the reverse order from
-   * calls to {@link #methodStarting()}.
+   * calls to {@link #requested()}.
    */
   public void methodFinished() {}
 
@@ -72,7 +104,7 @@ public void methodFinished() {}
    * Called when the producerâ€™s future has completed successfully with a value.
    *
    * <p>When multiple monitors are installed, calls to this method will be in the reverse order from
-   * calls to {@link #methodStarting()}.
+   * calls to {@link #requested()}.
    */
   public void succeeded(Object o) {}
 
@@ -80,7 +112,7 @@ public void succeeded(Object o) {}
    * Called when the producer's future has failed with an exception.
    *
    * <p>When multiple monitors are installed, calls to this method will be in the reverse order from
-   * calls to {@link #methodStarting()}.
+   * calls to {@link #requested()}.
    */
   public void failed(Throwable t) {}
 
diff --git a/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java b/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java
index f27ce37b1..d0ff778f0 100644
--- a/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java
+++ b/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java
@@ -110,6 +110,15 @@ public ProductionComponentMonitor create(Object component) {
       this.delegate = delegate;
     }
 
+    @Override
+    public void requested() {
+      try {
+        delegate.requested();
+      } catch (RuntimeException e) {
+        logProducerMonitorMethodException(e, delegate, "requested");
+      }
+    }
+
     @Override
     public void methodStarting() {
       try {
@@ -225,6 +234,17 @@ public ProductionComponentMonitor create(Object component) {
       this.delegates = delegates;
     }
 
+    @Override
+    public void requested() {
+      for (ProducerMonitor delegate : delegates) {
+        try {
+          delegate.requested();
+        } catch (RuntimeException e) {
+          logProducerMonitorMethodException(e, delegate, "requested");
+        }
+      }
+    }
+
     @Override
     public void methodStarting() {
       for (ProducerMonitor delegate : delegates) {
diff --git a/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java b/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java
index 923ea70a1..6cb6bdbcc 100644
--- a/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java
+++ b/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java
@@ -94,6 +94,7 @@ public void monitor_success() throws Exception {
 
     ListenableFuture<Integer> future = producer.get();
     assertThat(future.isDone()).isFalse();
+    verify(monitor).requested();
     verify(monitor).addCallbackTo(any(ListenableFuture.class));
     delegateFuture.set(-42);
     assertThat(future.get()).isEqualTo(-42);
@@ -108,6 +109,7 @@ public void monitor_failure() throws Exception {
 
     ListenableFuture<Integer> future = producer.get();
     assertThat(future.isDone()).isFalse();
+    verify(monitor).requested();
     verify(monitor).addCallbackTo(any(ListenableFuture.class));
     Throwable t = new RuntimeException("monkey");
     delegateFuture.setException(t);
diff --git a/producers/src/test/java/dagger/producers/monitoring/internal/MonitorsTest.java b/producers/src/test/java/dagger/producers/monitoring/internal/MonitorsTest.java
index e7f42746b..224d8e0b6 100644
--- a/producers/src/test/java/dagger/producers/monitoring/internal/MonitorsTest.java
+++ b/producers/src/test/java/dagger/producers/monitoring/internal/MonitorsTest.java
@@ -121,11 +121,13 @@ public void singleMonitor_normalProducerMonitorSuccess() {
     ProducerMonitor producerMonitor =
         monitor.producerMonitorFor(ProducerToken.create(Object.class));
     Object o = new Object();
+    producerMonitor.requested();
     producerMonitor.methodStarting();
     producerMonitor.methodFinished();
     producerMonitor.succeeded(o);
 
     InOrder order = inOrder(mockProducerMonitor);
+    order.verify(mockProducerMonitor).requested();
     order.verify(mockProducerMonitor).methodStarting();
     order.verify(mockProducerMonitor).methodFinished();
     order.verify(mockProducerMonitor).succeeded(o);
@@ -142,11 +144,13 @@ public void singleMonitor_normalProducerMonitorFailure() {
     ProducerMonitor producerMonitor =
         monitor.producerMonitorFor(ProducerToken.create(Object.class));
     Throwable t = new RuntimeException("monkey");
+    producerMonitor.requested();
     producerMonitor.methodStarting();
     producerMonitor.methodFinished();
     producerMonitor.failed(t);
 
     InOrder order = inOrder(mockProducerMonitor);
+    order.verify(mockProducerMonitor).requested();
     order.verify(mockProducerMonitor).methodStarting();
     order.verify(mockProducerMonitor).methodFinished();
     order.verify(mockProducerMonitor).failed(t);
@@ -156,6 +160,7 @@ public void singleMonitor_normalProducerMonitorFailure() {
   @Test
   public void singleMonitor_throwingProducerMonitorSuccess() {
     setUpNormalSingleMonitor();
+    doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).requested();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).methodStarting();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).methodFinished();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).succeeded(any(Object.class));
@@ -166,11 +171,13 @@ public void singleMonitor_throwingProducerMonitorSuccess() {
     ProducerMonitor producerMonitor =
         monitor.producerMonitorFor(ProducerToken.create(Object.class));
     Object o = new Object();
+    producerMonitor.requested();
     producerMonitor.methodStarting();
     producerMonitor.methodFinished();
     producerMonitor.succeeded(o);
 
     InOrder order = inOrder(mockProducerMonitor);
+    order.verify(mockProducerMonitor).requested();
     order.verify(mockProducerMonitor).methodStarting();
     order.verify(mockProducerMonitor).methodFinished();
     order.verify(mockProducerMonitor).succeeded(o);
@@ -180,6 +187,7 @@ public void singleMonitor_throwingProducerMonitorSuccess() {
   @Test
   public void singleMonitor_throwingProducerMonitorFailure() {
     setUpNormalSingleMonitor();
+    doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).requested();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).methodStarting();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).methodFinished();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).failed(any(Throwable.class));
@@ -190,11 +198,13 @@ public void singleMonitor_throwingProducerMonitorFailure() {
     ProducerMonitor producerMonitor =
         monitor.producerMonitorFor(ProducerToken.create(Object.class));
     Throwable t = new RuntimeException("gorilla");
+    producerMonitor.requested();
     producerMonitor.methodStarting();
     producerMonitor.methodFinished();
     producerMonitor.failed(t);
 
     InOrder order = inOrder(mockProducerMonitor);
+    order.verify(mockProducerMonitor).requested();
     order.verify(mockProducerMonitor).methodStarting();
     order.verify(mockProducerMonitor).methodFinished();
     order.verify(mockProducerMonitor).failed(t);
@@ -254,11 +264,13 @@ public void multipleMonitors_someNullProductionComponentMonitors() {
         monitor.producerMonitorFor(ProducerToken.create(Object.class));
 
     Object o = new Object();
+    producerMonitor.requested();
     producerMonitor.methodStarting();
     producerMonitor.methodFinished();
     producerMonitor.succeeded(o);
 
     InOrder order = inOrder(mockProducerMonitorA);
+    order.verify(mockProducerMonitorA).requested();
     order.verify(mockProducerMonitorA).methodStarting();
     order.verify(mockProducerMonitorA).methodFinished();
     order.verify(mockProducerMonitorA).succeeded(o);
@@ -288,11 +300,13 @@ public void multipleMonitors_someThrowingProductionComponentMonitorFactories() {
         monitor.producerMonitorFor(ProducerToken.create(Object.class));
 
     Object o = new Object();
+    producerMonitor.requested();
     producerMonitor.methodStarting();
     producerMonitor.methodFinished();
     producerMonitor.succeeded(o);
 
     InOrder order = inOrder(mockProducerMonitorA);
+    order.verify(mockProducerMonitorA).requested();
     order.verify(mockProducerMonitorA).methodStarting();
     order.verify(mockProducerMonitorA).methodFinished();
     order.verify(mockProducerMonitorA).succeeded(o);
@@ -313,11 +327,15 @@ public void multipleMonitors_normalProductionComponentMonitorSuccess() {
         monitor.producerMonitorFor(ProducerToken.create(Object.class));
 
     Object o = new Object();
+    producerMonitor.requested();
     producerMonitor.methodStarting();
     producerMonitor.methodFinished();
     producerMonitor.succeeded(o);
 
     InOrder order = inOrder(mockProducerMonitorA, mockProducerMonitorB, mockProducerMonitorC);
+    order.verify(mockProducerMonitorA).requested();
+    order.verify(mockProducerMonitorB).requested();
+    order.verify(mockProducerMonitorC).requested();
     order.verify(mockProducerMonitorA).methodStarting();
     order.verify(mockProducerMonitorB).methodStarting();
     order.verify(mockProducerMonitorC).methodStarting();
@@ -344,11 +362,15 @@ public void multipleMonitors_normalProductionComponentMonitorFailure() {
         monitor.producerMonitorFor(ProducerToken.create(Object.class));
 
     Throwable t = new RuntimeException("chimpanzee");
+    producerMonitor.requested();
     producerMonitor.methodStarting();
     producerMonitor.methodFinished();
     producerMonitor.failed(t);
 
     InOrder order = inOrder(mockProducerMonitorA, mockProducerMonitorB, mockProducerMonitorC);
+    order.verify(mockProducerMonitorA).requested();
+    order.verify(mockProducerMonitorB).requested();
+    order.verify(mockProducerMonitorC).requested();
     order.verify(mockProducerMonitorA).methodStarting();
     order.verify(mockProducerMonitorB).methodStarting();
     order.verify(mockProducerMonitorC).methodStarting();
@@ -364,6 +386,7 @@ public void multipleMonitors_normalProductionComponentMonitorFailure() {
   @Test
   public void multipleMonitors_someThrowingProducerMonitorsSuccess() {
     setUpNormalMultipleMonitors();
+    doThrow(new RuntimeException("monkey")).when(mockProducerMonitorA).requested();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitorA).methodStarting();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitorB).methodFinished();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitorC).succeeded(any(Object.class));
@@ -378,11 +401,15 @@ public void multipleMonitors_someThrowingProducerMonitorsSuccess() {
         monitor.producerMonitorFor(ProducerToken.create(Object.class));
 
     Object o = new Object();
+    producerMonitor.requested();
     producerMonitor.methodStarting();
     producerMonitor.methodFinished();
     producerMonitor.succeeded(o);
 
     InOrder order = inOrder(mockProducerMonitorA, mockProducerMonitorB, mockProducerMonitorC);
+    order.verify(mockProducerMonitorA).requested();
+    order.verify(mockProducerMonitorB).requested();
+    order.verify(mockProducerMonitorC).requested();
     order.verify(mockProducerMonitorA).methodStarting();
     order.verify(mockProducerMonitorB).methodStarting();
     order.verify(mockProducerMonitorC).methodStarting();
@@ -398,6 +425,7 @@ public void multipleMonitors_someThrowingProducerMonitorsSuccess() {
   @Test
   public void multipleMonitors_someThrowingProducerMonitorsFailure() {
     setUpNormalMultipleMonitors();
+    doThrow(new RuntimeException("monkey")).when(mockProducerMonitorA).requested();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitorA).methodStarting();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitorB).methodFinished();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitorC).failed(any(Throwable.class));
@@ -412,11 +440,15 @@ public void multipleMonitors_someThrowingProducerMonitorsFailure() {
         monitor.producerMonitorFor(ProducerToken.create(Object.class));
 
     Throwable t = new RuntimeException("chimpanzee");
+    producerMonitor.requested();
     producerMonitor.methodStarting();
     producerMonitor.methodFinished();
     producerMonitor.failed(t);
 
     InOrder order = inOrder(mockProducerMonitorA, mockProducerMonitorB, mockProducerMonitorC);
+    order.verify(mockProducerMonitorA).requested();
+    order.verify(mockProducerMonitorB).requested();
+    order.verify(mockProducerMonitorC).requested();
     order.verify(mockProducerMonitorA).methodStarting();
     order.verify(mockProducerMonitorB).methodStarting();
     order.verify(mockProducerMonitorC).methodStarting();
