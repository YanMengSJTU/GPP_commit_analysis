diff --git a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
index 5f7451c6b..6b6bbf81c 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
@@ -41,12 +41,12 @@
   @Module(injects = ArrayInjectable.class)
   static class PrimitiveArrayModule {
     @Provides byte[] byteArray() { return new byte[] { Byte.MAX_VALUE }; }
-    @Provides int[] provideInt() { return new int[] { Integer.MAX_VALUE }; }
-    @Provides boolean[] provideBoolean() { return new boolean[] { true }; }
-    @Provides long[] provideLong() { return new long[] { Long.MAX_VALUE }; }
-    @Provides char[] provideChar() { return new char[] { Character.MAX_VALUE }; }
-    @Provides float[] provideFloat() { return new float[] { Float.MAX_VALUE }; }
-    @Provides double[] provideDouble() { return new double[] { Double.MAX_VALUE }; }
+    @Provides int[] intArray() { return new int[] { Integer.MAX_VALUE }; }
+    @Provides boolean[] booleanArray() { return new boolean[] { true }; }
+    @Provides long[] longArray() { return new long[] { Long.MAX_VALUE }; }
+    @Provides char[] charArray() { return new char[] { Character.MAX_VALUE }; }
+    @Provides float[] floatArray() { return new float[] { Float.MAX_VALUE }; }
+    @Provides double[] doubleArray() { return new double[] { Double.MAX_VALUE }; }
   }
 
   @Test public void primitiveArrayTypesAllInjected() {
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest.java
index 994c7800b..6a5ae37ce 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest.java
@@ -52,18 +52,18 @@
   @Test public void memberInject_WithoutProvidesMethod() {
     Foo foo = new Foo();
     ObjectGraph.create(FooModule.class).inject(foo);
-    ASSERT.that(foo.blah).equals("blah");
+    ASSERT.that(foo.blah).isEqualTo("blah");
   }
 
   @Test public void membersInject_WithProvidesMethod() {
     Foo foo = new Foo();
     ObjectGraph.create(ProvidingFooModule.class).inject(foo);
-    ASSERT.that(foo.blah).equals("blah");
+    ASSERT.that(foo.blah).isEqualTo("blah");
   }
 
   @Test public void get_WithProvidesMethod() {
     Foo foo = ObjectGraph.create(ProvidingFooModule.class).get(Foo.class);
-    ASSERT.that(foo.blah).equals("blah");
+    ASSERT.that(foo.blah).isEqualTo("blah");
   }
 
   static class Bar { }
