diff --git a/java/dagger/android/AndroidInjectionModule.java b/java/dagger/android/AndroidInjectionModule.java
index d7d7de15a..3910a0421 100644
--- a/java/dagger/android/AndroidInjectionModule.java
+++ b/java/dagger/android/AndroidInjectionModule.java
@@ -32,11 +32,11 @@
 @Module
 public abstract class AndroidInjectionModule {
   @Multibinds
-  abstract Map<Class<? extends Activity>, AndroidInjector.Factory<Activity, ?>>
+  abstract Map<Class<? extends Activity>, AndroidInjector.Factory<? extends Activity>>
       activityInjectorFactories();
 
   @Multibinds
-  abstract Map<Class<? extends Fragment>, AndroidInjector.Factory<Fragment, ?>>
+  abstract Map<Class<? extends Fragment>, AndroidInjector.Factory<? extends Fragment>>
       fragmentInjectorFactories();
 
   private AndroidInjectionModule() {}
diff --git a/java/dagger/android/AndroidInjector.java b/java/dagger/android/AndroidInjector.java
index 8bab214a1..3e05de68a 100644
--- a/java/dagger/android/AndroidInjector.java
+++ b/java/dagger/android/AndroidInjector.java
@@ -40,27 +40,25 @@
   /**
    * Creates {@link AndroidInjector}s for a concrete subtype of a core Android type.
    *
-   * @param <A> a core Android type
-   * @param <T> the concrete subtype of {@code I} to be injected
+   * @param <T> the concrete type to be injected
    */
-  interface Factory<A, T extends A> {
+  interface Factory<T> {
     /**
      * Creates an {@link AndroidInjector} for {@code instance}. This should be the same instance
      * that will be passed to {@link #inject(Object)}.
      */
-    AndroidInjector<T> create(A instance);
+    AndroidInjector<T> create(T instance);
   }
 
   /**
    * An adapter that lets the common {@link dagger.Subcomponent.Builder} pattern implement {@link
    * Factory}.
    *
-   * @param <A> a core Android type
-   * @param <T> the concrete subtype of {@code I} to be injected
+   * @param <T> the concrete type to be injected
    */
-  abstract class Builder<A, T extends A> implements AndroidInjector.Factory<A, T> {
+  abstract class Builder<T> implements AndroidInjector.Factory<T> {
     @Override
-    public final AndroidInjector<T> create(A instance) {
+    public final AndroidInjector<T> create(T instance) {
       seedInstance(instance);
       return build();
     }
@@ -73,7 +71,7 @@
      * <p>This should be the same instance that will be passed to {@link #inject(Object)}.
      */
     @BindsInstance
-    public abstract void seedInstance(A instance);
+    public abstract void seedInstance(T instance);
 
     /** Returns a newly-constructed {@link AndroidInjector}. */
     public abstract AndroidInjector<T> build();
diff --git a/java/dagger/android/DispatchingAndroidInjector.java b/java/dagger/android/DispatchingAndroidInjector.java
index 38132a2c0..b22f6ecd4 100644
--- a/java/dagger/android/DispatchingAndroidInjector.java
+++ b/java/dagger/android/DispatchingAndroidInjector.java
@@ -46,11 +46,12 @@
       "No injector factory bound for Class<%1$s>. Injector factories were bound for supertypes "
           + "of %1$s: %2$s. Did you mean to bind an injector factory for the subtype?";
 
-  private final Map<Class<? extends T>, Provider<AndroidInjector.Factory<T, ?>>> injectorFactories;
+  private final Map<Class<? extends T>, Provider<AndroidInjector.Factory<? extends T>>>
+      injectorFactories;
 
   @Inject
   DispatchingAndroidInjector(
-      Map<Class<? extends T>, Provider<AndroidInjector.Factory<T, ?>>> injectorFactories) {
+      Map<Class<? extends T>, Provider<AndroidInjector.Factory<? extends T>>> injectorFactories) {
     this.injectorFactories = injectorFactories;
   }
 
@@ -62,29 +63,28 @@
    *     inject instances of that class
    */
   public boolean maybeInject(T instance) {
-    Provider<AndroidInjector.Factory<T, ?>> factoryProvider =
+    Provider<AndroidInjector.Factory<? extends T>> factoryProvider =
         injectorFactories.get(instance.getClass());
     if (factoryProvider == null) {
       return false;
     }
 
-    AndroidInjector.Factory<T, ?> factory = factoryProvider.get();
-    AndroidInjector<?> wildcardInjector =
-        checkNotNull(
-            factory.create(instance),
-            "%s.create(I) should not return null.",
-            factory.getClass().getCanonicalName());
     @SuppressWarnings("unchecked")
-    AndroidInjector<T> injector = (AndroidInjector<T>) wildcardInjector;
-
+    AndroidInjector.Factory<T> factory = (AndroidInjector.Factory<T>) factoryProvider.get();
     try {
+      AndroidInjector<T> injector =
+          checkNotNull(
+              factory.create(instance),
+              "%s.create(I) should not return null.",
+              factory.getClass().getCanonicalName());
+
       injector.inject(instance);
       return true;
     } catch (ClassCastException e) {
       throw new InvalidInjectorBindingException(
           String.format(
-              "%s does not implement AndroidInjector<%s>",
-              injector.getClass().getCanonicalName(), instance.getClass().getCanonicalName()),
+              "%s does not implement AndroidInjector.Factory<%s>",
+              factory.getClass().getCanonicalName(), instance.getClass().getCanonicalName()),
           e);
     }
   }
diff --git a/java/dagger/android/processor/AndroidMapKeyValidator.java b/java/dagger/android/processor/AndroidMapKeyValidator.java
index 22b6e76af..da5639302 100644
--- a/java/dagger/android/processor/AndroidMapKeyValidator.java
+++ b/java/dagger/android/processor/AndroidMapKeyValidator.java
@@ -25,7 +25,7 @@
 import com.google.auto.common.BasicAnnotationProcessor.ProcessingStep;
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
-import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableBiMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.SetMultimap;
 import dagger.Binds;
@@ -52,9 +52,9 @@
  */
 final class AndroidMapKeyValidator implements ProcessingStep {
 
-  private static final ImmutableMap<Class<? extends Annotation>, String>
+  private static final ImmutableBiMap<Class<? extends Annotation>, String>
       ANNOTATIONS_AND_FRAMEWORK_TYPES =
-          ImmutableMap.of(
+          ImmutableBiMap.of(
               ActivityKey.class, "android.app.Activity",
               FragmentKey.class, "android.app.Fragment",
               dagger.android.support.FragmentKey.class, "android.support.v4.app.Fragment");
@@ -94,9 +94,8 @@ private void validateMethod(Class<? extends Annotation> annotation, ExecutableEl
       return;
     }
 
-    TypeMirror androidBaseType = androidTypeForMapKey(annotation);
     DeclaredType intendedReturnType =
-        injectorFactoryOf(androidBaseType, types.getWildcardType(null, null));
+        injectorFactoryOf(types.getWildcardType(androidTypeForMapKey(annotation), null));
     if (!MoreTypes.equivalence().equivalent(returnType, intendedReturnType)) {
       messager.printMessage(
           Kind.ERROR,
@@ -109,7 +108,7 @@ private void validateMethod(Class<? extends Annotation> annotation, ExecutableEl
     // @Binds methods should only have one parameter, but we can't guarantee the order of Processors
     // in javac, so do a basic check for valid form
     if (isAnnotationPresent(method, Binds.class) && method.getParameters().size() == 1) {
-      validateMapKeyMatchesBindsParameter(annotation, method, androidBaseType);
+      validateMapKeyMatchesBindsParameter(annotation, method);
     }
   }
 
@@ -123,40 +122,32 @@ private void validateMethod(Class<? extends Annotation> annotation, ExecutableEl
    * {@literal @Binds}
    * {@literal @IntoMap}
    * {@literal @ActivityKey(GreenActivity.class)}
-   * abstract AndroidInjector.Factory<Activity, ?> bindBlueActivity(
+   * abstract AndroidInjector.Factory<? extends Activity> bindBlueActivity(
    *     BlueActivityComponent.Builder builder);
    * }</pre>
    */
   private void validateMapKeyMatchesBindsParameter(
-      Class<? extends Annotation> annotation,
-      ExecutableElement method,
-      TypeMirror androidBaseType) {
+      Class<? extends Annotation> annotation, ExecutableElement method) {
     TypeMirror parameterType = getOnlyElement(method.getParameters()).asType();
     AnnotationMirror annotationMirror = getAnnotationMirror(method, annotation).get();
     TypeMirror mapKeyValue = (TypeMirror) getAnnotationValue(annotationMirror, "value").getValue();
-    if (!types.isAssignable(parameterType, injectorFactoryOf(androidBaseType, mapKeyValue))) {
+    if (!types.isAssignable(parameterType, injectorFactoryOf(mapKeyValue))) {
       messager.printMessage(
           Kind.ERROR,
-          String.format(
-              "%s does not implement AndroidInjector<%s, %s>",
-              parameterType, androidBaseType, mapKeyValue),
+          String.format("%s does not implement AndroidInjector<%s>", parameterType, mapKeyValue),
           method,
           annotationMirror);
     }
   }
 
-  private TypeMirror androidTypeForMapKey(Class<? extends Annotation> annotation) {
-
-    return elements.getTypeElement(ANNOTATIONS_AND_FRAMEWORK_TYPES.get(annotation)).asType();
+  private DeclaredType androidTypeForMapKey(Class<? extends Annotation> annotation) {
+    return types.getDeclaredType(
+        elements.getTypeElement(ANNOTATIONS_AND_FRAMEWORK_TYPES.get(annotation)));
   }
 
-  /**
-   * Returns a {@link DeclaredType} for {@code AndroidInjector<androidBaseType,
-   * implementationType>}.
-   */
-  private DeclaredType injectorFactoryOf(
-      TypeMirror androidBaseType, TypeMirror implementationType) {
-    return types.getDeclaredType(factoryElement(), androidBaseType, implementationType);
+  /** Returns a {@link DeclaredType} for {@code AndroidInjector.Factory<implementationType>}. */
+  private DeclaredType injectorFactoryOf(TypeMirror implementationType) {
+    return types.getDeclaredType(factoryElement(), implementationType);
   }
 
   private TypeElement factoryElement() {
diff --git a/java/dagger/android/support/AndroidSupportInjectionModule.java b/java/dagger/android/support/AndroidSupportInjectionModule.java
index eaa8ce817..6349afb67 100644
--- a/java/dagger/android/support/AndroidSupportInjectionModule.java
+++ b/java/dagger/android/support/AndroidSupportInjectionModule.java
@@ -33,7 +33,7 @@
 @Module(includes = AndroidInjectionModule.class)
 public abstract class AndroidSupportInjectionModule {
   @Multibinds
-  abstract Map<Class<? extends Fragment>, AndroidInjector.Factory<Fragment, ?>>
+  abstract Map<Class<? extends Fragment>, AndroidInjector.Factory<? extends Fragment>>
       supportFragmentInjectorFactories();
 
   private AndroidSupportInjectionModule() {}
diff --git a/javatests/dagger/android/AndroidInjectionTest.java b/javatests/dagger/android/AndroidInjectionTest.java
index a9eb315c4..43fb06242 100644
--- a/javatests/dagger/android/AndroidInjectionTest.java
+++ b/javatests/dagger/android/AndroidInjectionTest.java
@@ -46,9 +46,9 @@
         ImmutableMap.of(
             InjectableFragment.class,
             () ->
-                new Factory<Fragment, InjectableFragment>() {
+                new Factory<InjectableFragment>() {
                   @Override
-                  public AndroidInjector<InjectableFragment> create(Fragment fragment) {
+                  public AndroidInjector<InjectableFragment> create(InjectableFragment fragment) {
                     return f -> f.tag = tag;
                   }
                 }));
diff --git a/javatests/dagger/android/DispatchingAndroidInjectorTest.java b/javatests/dagger/android/DispatchingAndroidInjectorTest.java
index 69f94ec29..2d1e6132c 100644
--- a/javatests/dagger/android/DispatchingAndroidInjectorTest.java
+++ b/javatests/dagger/android/DispatchingAndroidInjectorTest.java
@@ -38,7 +38,7 @@
 
   @Before
   public void setup() {
-    Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<Activity, ?>>>
+    Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
         injectorFactories = new HashMap<>();
     injectorFactories.put(FooActivity.class, FooInjector.Factory::new);
     injectorFactories.put(ReturnsNullActivity.class, () -> null);
@@ -92,9 +92,9 @@ public void throwsIfClassMismatched() {
     @Override
     public void inject(FooActivity instance) {}
 
-    static class Factory implements AndroidInjector.Factory<Activity, FooActivity> {
+    static class Factory implements AndroidInjector.Factory<FooActivity> {
       @Override
-      public AndroidInjector<FooActivity> create(Activity activity) {
+      public AndroidInjector<FooActivity> create(FooActivity activity) {
         return new FooInjector();
       }
     }
diff --git a/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java b/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
index f171fcd8e..2813ccce5 100644
--- a/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
+++ b/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
@@ -72,19 +72,19 @@ public void onCreate() {
       @Binds
       @IntoMap
       @ActivityKey(TestActivity.class)
-      abstract AndroidInjector.Factory<Activity, ?> bindFactoryForTestActivity(
+      abstract AndroidInjector.Factory<? extends Activity> bindFactoryForTestActivity(
           ActivitySubcomponent.Builder builder);
 
       @Binds
       @IntoMap
       @FragmentKey(TestParentFragment.class)
-      abstract AndroidInjector.Factory<Fragment, ?> bindFactoryForParentFragment(
+      abstract AndroidInjector.Factory<? extends Fragment> bindFactoryForParentFragment(
           ParentFragmentSubcomponent.Builder builder);
 
       @Binds
       @IntoMap
       @FragmentKey(TestChildFragment.class)
-      abstract AndroidInjector.Factory<Fragment, ?> bindFactoryForChildFragment(
+      abstract AndroidInjector.Factory<? extends Fragment> bindFactoryForChildFragment(
           ChildFragmentSubcomponent.Builder builder);
     }
 
@@ -100,7 +100,7 @@ public void onCreate() {
       }
 
       @Subcomponent.Builder
-      abstract class Builder extends AndroidInjector.Builder<Activity, TestActivity> {}
+      abstract class Builder extends AndroidInjector.Builder<TestActivity> {}
     }
 
     @Subcomponent(modules = ParentFragmentSubcomponent.ParentFragmentModule.class)
@@ -115,7 +115,7 @@ public void onCreate() {
       }
 
       @Subcomponent.Builder
-      abstract class Builder extends AndroidInjector.Builder<Fragment, TestParentFragment> {}
+      abstract class Builder extends AndroidInjector.Builder<TestParentFragment> {}
     }
 
     @Subcomponent(modules = ChildFragmentSubcomponent.ChildFragmentModule.class)
@@ -130,7 +130,7 @@ public void onCreate() {
       }
 
       @Subcomponent.Builder
-      abstract class Builder extends AndroidInjector.Builder<Fragment, TestChildFragment> {}
+      abstract class Builder extends AndroidInjector.Builder<TestChildFragment> {}
     }
   }
 }
diff --git a/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java b/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
index 4f78182a2..6b7c44bd4 100644
--- a/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
+++ b/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
@@ -67,7 +67,7 @@ public void onCreate() {
       @Binds
       @IntoMap
       @ActivityKey(TestActivity.class)
-      abstract AndroidInjector.Factory<Activity, ?> bindFactoryForTestActivity(
+      abstract AndroidInjector.Factory<? extends Activity> bindFactoryForTestActivity(
           ActivitySubcomponent.Builder builder);
     }
 
@@ -84,12 +84,12 @@ public void onCreate() {
         @Binds
         @IntoMap
         @FragmentKey(TestParentFragment.class)
-        abstract AndroidInjector.Factory<Fragment, ?> bindFactoryForParentFragment(
+        abstract AndroidInjector.Factory<? extends Fragment> bindFactoryForParentFragment(
             ParentFragmentSubcomponent.Builder builder);
       }
 
       @Subcomponent.Builder
-      abstract class Builder extends AndroidInjector.Builder<Activity, TestActivity> {}
+      abstract class Builder extends AndroidInjector.Builder<TestActivity> {}
 
       @Subcomponent(modules = ParentFragmentSubcomponent.ParentFragmentModule.class)
       interface ParentFragmentSubcomponent extends AndroidInjector<TestParentFragment> {
@@ -104,12 +104,12 @@ public void onCreate() {
           @Binds
           @IntoMap
           @FragmentKey(TestChildFragment.class)
-          abstract AndroidInjector.Factory<Fragment, ?> bindFactoryForChildFragment(
+          abstract AndroidInjector.Factory<? extends Fragment> bindFactoryForChildFragment(
               ChildFragmentSubcomponent.Builder builder);
         }
 
         @Subcomponent.Builder
-        abstract class Builder extends AndroidInjector.Builder<Fragment, TestParentFragment> {}
+        abstract class Builder extends AndroidInjector.Builder<TestParentFragment> {}
 
         @Subcomponent(modules = ChildFragmentSubcomponent.ChildFragmentModule.class)
         interface ChildFragmentSubcomponent extends AndroidInjector<TestChildFragment> {
@@ -123,7 +123,7 @@ public void onCreate() {
           }
 
           @Subcomponent.Builder
-          abstract class Builder extends AndroidInjector.Builder<Fragment, TestChildFragment> {}
+          abstract class Builder extends AndroidInjector.Builder<TestChildFragment> {}
         }
       }
     }
