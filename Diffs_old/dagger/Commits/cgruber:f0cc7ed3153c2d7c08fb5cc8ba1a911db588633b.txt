diff --git a/compiler/src/main/java/dagger/internal/codegen/BindMethodValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindsMethodValidator.java
similarity index 81%
rename from compiler/src/main/java/dagger/internal/codegen/BindMethodValidator.java
rename to compiler/src/main/java/dagger/internal/codegen/BindsMethodValidator.java
index 453d5b099..2184a8b92 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindMethodValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindsMethodValidator.java
@@ -47,13 +47,13 @@
 /**
  * A {@linkplain ValidationReport validator} for {@link Bind} methods.
  */
-final class BindMethodValidator {
+final class BindsMethodValidator {
   private final Elements elements;
   private final Types types;
   private final LoadingCache<ExecutableElement, ValidationReport<ExecutableElement>>
       validationCache;
 
-  BindMethodValidator(Elements elements, Types types) {
+  BindsMethodValidator(Elements elements, Types types) {
     this.elements = checkNotNull(elements);
     this.types = checkNotNull(types);
     this.validationCache = CacheBuilder.newBuilder().build(new ValidationLoader());
@@ -62,13 +62,13 @@
   private final class ValidationLoader
       extends CacheLoader<ExecutableElement, ValidationReport<ExecutableElement>> {
     @Override
-    public ValidationReport<ExecutableElement> load(ExecutableElement bindMethodElement) {
+    public ValidationReport<ExecutableElement> load(ExecutableElement bindsMethodElement) {
       ValidationReport.Builder<ExecutableElement> builder =
-          ValidationReport.about(bindMethodElement);
+          ValidationReport.about(bindsMethodElement);
 
-      checkArgument(isAnnotationPresent(bindMethodElement, Binds.class));
+      checkArgument(isAnnotationPresent(bindsMethodElement, Binds.class));
 
-      Element enclosingElement = bindMethodElement.getEnclosingElement();
+      Element enclosingElement = bindsMethodElement.getEnclosingElement();
       if (!isAnnotationPresent(enclosingElement, Module.class)
           && !isAnnotationPresent(enclosingElement, ProducerModule.class)) {
         builder.addError(
@@ -79,42 +79,42 @@
                     "%s or @%s",
                     Module.class.getSimpleName(),
                     ProducerModule.class.getSimpleName())),
-            bindMethodElement);
+            bindsMethodElement);
       }
 
-      if (!bindMethodElement.getTypeParameters().isEmpty()) {
-        builder.addError(formatErrorMessage(BINDING_METHOD_TYPE_PARAMETER), bindMethodElement);
+      if (!bindsMethodElement.getTypeParameters().isEmpty()) {
+        builder.addError(formatErrorMessage(BINDING_METHOD_TYPE_PARAMETER), bindsMethodElement);
       }
 
-      Set<Modifier> modifiers = bindMethodElement.getModifiers();
+      Set<Modifier> modifiers = bindsMethodElement.getModifiers();
       if (!modifiers.contains(ABSTRACT)) {
-        builder.addError(formatErrorMessage(BIND_METHOD_NOT_ABSTRACT), bindMethodElement);
+        builder.addError(formatErrorMessage(BIND_METHOD_NOT_ABSTRACT), bindsMethodElement);
       }
-      TypeMirror returnType = bindMethodElement.getReturnType();
+      TypeMirror returnType = bindsMethodElement.getReturnType();
       validateReturnType(Binds.class, builder, returnType);
 
-      List<? extends VariableElement> parameters = bindMethodElement.getParameters();
+      List<? extends VariableElement> parameters = bindsMethodElement.getParameters();
       if (parameters.size() == 1) {
         VariableElement parameter = Iterables.getOnlyElement(parameters);
         if (!types.isAssignable(parameter.asType(), returnType)) {
           builder.addError(
-              formatErrorMessage(BIND_METHOD_ONE_ASSIGNABLE_PARAMETER), bindMethodElement);
+              formatErrorMessage(BIND_METHOD_ONE_ASSIGNABLE_PARAMETER), bindsMethodElement);
         }
       } else {
         builder.addError(
-            formatErrorMessage(BIND_METHOD_ONE_ASSIGNABLE_PARAMETER), bindMethodElement);
+            formatErrorMessage(BIND_METHOD_ONE_ASSIGNABLE_PARAMETER), bindsMethodElement);
       }
 
-      validateUncheckedThrows(elements, types, bindMethodElement, Binds.class, builder);
+      validateUncheckedThrows(elements, types, bindsMethodElement, Binds.class, builder);
 
-      validateMethodQualifiers(builder, bindMethodElement);
+      validateMethodQualifiers(builder, bindsMethodElement);
 
       return builder.build();
     }
   }
 
-  ValidationReport<ExecutableElement> validate(ExecutableElement bindMethodElement) {
-    return validationCache.getUnchecked(bindMethodElement);
+  ValidationReport<ExecutableElement> validate(ExecutableElement bindsMethodElement) {
+    return validationCache.getUnchecked(bindsMethodElement);
   }
 
   private String formatErrorMessage(String msg) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index 531849cb5..f808a49c1 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -84,7 +84,7 @@ public SourceVersion getSupportedSourceVersion() {
     MapKeyValidator mapKeyValidator = new MapKeyValidator();
     ProvidesMethodValidator providesMethodValidator = new ProvidesMethodValidator(elements, types);
     ProducesMethodValidator producesMethodValidator = new ProducesMethodValidator(elements, types);
-    BindMethodValidator bindMethodValidator = new BindMethodValidator(elements, types);
+    BindsMethodValidator bindsMethodValidator = new BindsMethodValidator(elements, types);
 
     Key.Factory keyFactory = new Key.Factory(types, elements);
 
@@ -172,7 +172,7 @@ public SourceVersion getSupportedSourceVersion() {
             moduleValidator,
             providesMethodValidator,
             provisionBindingFactory,
-            bindMethodValidator,
+            bindsMethodValidator,
             factoryGenerator),
         new ComponentProcessingStep(
             ComponentDescriptor.Kind.COMPONENT,
@@ -189,7 +189,7 @@ public SourceVersion getSupportedSourceVersion() {
             messager,
             moduleValidator,
             producesMethodValidator,
-            bindMethodValidator,
+            bindsMethodValidator,
             productionBindingFactory,
             producerFactoryGenerator),
         new ComponentProcessingStep(
diff --git a/compiler/src/main/java/dagger/internal/codegen/DelegateDeclaration.java b/compiler/src/main/java/dagger/internal/codegen/DelegateDeclaration.java
index 223688b44..78cc5d102 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DelegateDeclaration.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DelegateDeclaration.java
@@ -56,18 +56,18 @@ public ContributionType contributionType() {
     }
 
     DelegateDeclaration create(
-        ExecutableElement bindMethod, TypeElement contributingElement) {
-      checkArgument(MoreElements.isAnnotationPresent(bindMethod, Binds.class));
-      SourceElement sourceElement = SourceElement.forElement(bindMethod, contributingElement);
+        ExecutableElement bindsMethod, TypeElement contributingElement) {
+      checkArgument(MoreElements.isAnnotationPresent(bindsMethod, Binds.class));
+      SourceElement sourceElement = SourceElement.forElement(bindsMethod, contributingElement);
       ExecutableType resolvedMethod =
           MoreTypes.asExecutable(sourceElement.asMemberOfContributingType(types));
       DependencyRequest delegateRequest =
           dependencyRequestFactory.forRequiredResolvedVariable(
               MoreTypes.asDeclared(contributingElement.asType()),
-              Iterables.getOnlyElement(bindMethod.getParameters()),
+              Iterables.getOnlyElement(bindsMethod.getParameters()),
               Iterables.getOnlyElement(resolvedMethod.getParameterTypes()));
       return new AutoValue_DelegateDeclaration(
-          keyFactory.forBindMethod(sourceElement), sourceElement, delegateRequest);
+          keyFactory.forBindsMethod(sourceElement), sourceElement, delegateRequest);
     }
   }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/Key.java b/compiler/src/main/java/dagger/internal/codegen/Key.java
index 51f89f674..5ebb1c5e1 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Key.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Key.java
@@ -374,21 +374,21 @@ Key forMultibindingsMethod(
     }
 
     /** Returns the key bound by a {@link Binds} method. */
-    Key forBindMethod(SourceElement bindMethodElement) {
-      ExecutableElement method = MoreElements.asExecutable(bindMethodElement.element());
+    Key forBindsMethod(SourceElement bindsMethodElement) {
+      ExecutableElement method = MoreElements.asExecutable(bindsMethodElement.element());
       ExecutableType methodType =
-          MoreTypes.asExecutable(bindMethodElement.asMemberOfContributingType(types));
+          MoreTypes.asExecutable(bindsMethodElement.asMemberOfContributingType(types));
       checkArgument(isAnnotationPresent(method, Binds.class));
       TypeMirror returnType = normalize(types, methodType.getReturnType());
       return forMethod(method, returnType);
     }
 
     /** Returns the key for the single parameter of a {@link Binds} method. */
-    Key forBindParameter(SourceElement bindMethodElement) {
-      ExecutableElement method = MoreElements.asExecutable(bindMethodElement.element());
+    Key forBindParameter(SourceElement bindsMethodElement) {
+      ExecutableElement method = MoreElements.asExecutable(bindsMethodElement.element());
       VariableElement parameterElement = Iterables.getOnlyElement(method.getParameters());
       ExecutableType methodType =
-          MoreTypes.asExecutable(bindMethodElement.asMemberOfContributingType(types));
+          MoreTypes.asExecutable(bindsMethodElement.asMemberOfContributingType(types));
       checkArgument(isAnnotationPresent(method, Binds.class));
       TypeMirror parameterType = Iterables.getOnlyElement(methodType.getParameterTypes());
       return forQualifiedType(getQualifier(parameterElement), parameterType);
diff --git a/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java
index 642420591..4e095b944 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java
@@ -48,7 +48,7 @@
   private final Messager messager;
   private final ModuleValidator moduleValidator;
   private final ProvidesMethodValidator providesMethodValidator;
-  private final BindMethodValidator bindMethodValidator;
+  private final BindsMethodValidator bindsMethodValidator;
   private final ProvisionBinding.Factory provisionBindingFactory;
   private final FactoryGenerator factoryGenerator;
   private final Set<Element> processedModuleElements = Sets.newLinkedHashSet();
@@ -58,12 +58,12 @@
       ModuleValidator moduleValidator,
       ProvidesMethodValidator providesMethodValidator,
       ProvisionBinding.Factory provisionBindingFactory,
-      BindMethodValidator bindMethodValidator,
+      BindsMethodValidator bindsMethodValidator,
       FactoryGenerator factoryGenerator) {
     this.messager = messager;
     this.moduleValidator = moduleValidator;
     this.providesMethodValidator = providesMethodValidator;
-    this.bindMethodValidator = bindMethodValidator;
+    this.bindsMethodValidator = bindsMethodValidator;
     this.provisionBindingFactory = provisionBindingFactory;
     this.factoryGenerator = factoryGenerator;
   }
@@ -81,7 +81,7 @@
         validateProvidesMethods(elementsByAnnotation);
 
     // second, check and collect all bind methods
-    ImmutableSet<ExecutableElement> validBindMethods = validateBindMethods(elementsByAnnotation);
+    ImmutableSet<ExecutableElement> validBindsMethods = validateBindsMethods(elementsByAnnotation);
 
     // process each module
     for (Element moduleElement :
@@ -93,7 +93,7 @@
       if (report.isClean()) {
         ImmutableSet.Builder<ExecutableElement> moduleProvidesMethodsBuilder =
             ImmutableSet.builder();
-        ImmutableSet.Builder<ExecutableElement> moduleBindMethodsBuilder =
+        ImmutableSet.Builder<ExecutableElement> moduleBindsMethodsBuilder =
             ImmutableSet.builder();
         List<ExecutableElement> moduleMethods =
             ElementFilter.methodsIn(moduleElement.getEnclosedElements());
@@ -102,16 +102,16 @@
             moduleProvidesMethodsBuilder.add(methodElement);
           }
           if (isAnnotationPresent(methodElement, Binds.class)) {
-            moduleBindMethodsBuilder.add(methodElement);
+            moduleBindsMethodsBuilder.add(methodElement);
           }
         }
         ImmutableSet<ExecutableElement> moduleProvidesMethods =
             moduleProvidesMethodsBuilder.build();
-        ImmutableSet<ExecutableElement> moduleBindMethods =
-            moduleBindMethodsBuilder.build();
+        ImmutableSet<ExecutableElement> moduleBindsMethods =
+            moduleBindsMethodsBuilder.build();
 
         if (Sets.difference(moduleProvidesMethods, validProvidesMethods).isEmpty()
-            && Sets.difference(moduleBindMethods, validBindMethods).isEmpty()) {
+            && Sets.difference(moduleBindsMethods, validBindsMethods).isEmpty()) {
           // all of the provides and bind methods in this module are valid!
           // time to generate some factories!
           ImmutableSet<ProvisionBinding> bindings =
@@ -144,21 +144,21 @@ public ProvisionBinding apply(ExecutableElement providesMethod) {
   /* TODO(gak): Add an interface for Validators and combine these two methods and the ones in
    * ProducerModuleProcessingStep */
 
-  private ImmutableSet<ExecutableElement> validateBindMethods(
+  private ImmutableSet<ExecutableElement> validateBindsMethods(
       SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation) {
-    ImmutableSet.Builder<ExecutableElement> validBindMethodsBuilder = ImmutableSet.builder();
+    ImmutableSet.Builder<ExecutableElement> validBindsMethodsBuilder = ImmutableSet.builder();
     for (Element bindElement : elementsByAnnotation.get(Binds.class)) {
       if (bindElement.getKind().equals(METHOD)) {
-        ExecutableElement bindMethodElement = (ExecutableElement) bindElement;
+        ExecutableElement bindsMethodElement = (ExecutableElement) bindElement;
         ValidationReport<ExecutableElement> methodReport =
-            bindMethodValidator.validate(bindMethodElement);
+            bindsMethodValidator.validate(bindsMethodElement);
         methodReport.printMessagesTo(messager);
         if (methodReport.isClean()) {
-          validBindMethodsBuilder.add(bindMethodElement);
+          validBindsMethodsBuilder.add(bindsMethodElement);
         }
       }
     }
-    return validBindMethodsBuilder.build();
+    return validBindsMethodsBuilder.build();
   }
 
   private ImmutableSet<ExecutableElement> validateProvidesMethods(
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerModuleProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/ProducerModuleProcessingStep.java
index 3640468eb..fa8a8227d 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProducerModuleProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducerModuleProcessingStep.java
@@ -49,7 +49,7 @@
   private final Messager messager;
   private final ModuleValidator moduleValidator;
   private final ProducesMethodValidator producesMethodValidator;
-  private final BindMethodValidator bindMethodValidator;
+  private final BindsMethodValidator bindsMethodValidator;
   private final ProductionBinding.Factory productionBindingFactory;
   private final ProducerFactoryGenerator factoryGenerator;
   private final Set<Element> processedModuleElements = Sets.newLinkedHashSet();
@@ -58,13 +58,13 @@
       Messager messager,
       ModuleValidator moduleValidator,
       ProducesMethodValidator producesMethodValidator,
-      BindMethodValidator bindMethodValidator,
+      BindsMethodValidator bindsMethodValidator,
       ProductionBinding.Factory productionBindingFactory,
       ProducerFactoryGenerator factoryGenerator) {
     this.messager = messager;
     this.moduleValidator = moduleValidator;
     this.producesMethodValidator = producesMethodValidator;
-    this.bindMethodValidator = bindMethodValidator;
+    this.bindsMethodValidator = bindsMethodValidator;
     this.productionBindingFactory = productionBindingFactory;
     this.factoryGenerator = factoryGenerator;
   }
@@ -82,7 +82,7 @@
         validateProducesMethods(elementsByAnnotation);
 
     // second, check and collect all bind methods
-    ImmutableSet<ExecutableElement> validBindMethods = validateBindMethods(elementsByAnnotation);
+    ImmutableSet<ExecutableElement> validBindsMethods = validateBindsMethods(elementsByAnnotation);
 
     // process each module
     for (Element moduleElement :
@@ -96,7 +96,7 @@
         if (report.isClean()) {
           ImmutableSet.Builder<ExecutableElement> moduleProducesMethodsBuilder =
               ImmutableSet.builder();
-          ImmutableSet.Builder<ExecutableElement> moduleBindMethodsBuilder =
+          ImmutableSet.Builder<ExecutableElement> moduleBindsMethodsBuilder =
               ImmutableSet.builder();
           List<ExecutableElement> moduleMethods =
               ElementFilter.methodsIn(moduleElement.getEnclosedElements());
@@ -105,15 +105,15 @@
               moduleProducesMethodsBuilder.add(methodElement);
             }
             if (isAnnotationPresent(methodElement, Binds.class)) {
-              moduleBindMethodsBuilder.add(methodElement);
+              moduleBindsMethodsBuilder.add(methodElement);
             }
           }
           ImmutableSet<ExecutableElement> moduleProducesMethods =
               moduleProducesMethodsBuilder.build();
-          ImmutableSet<ExecutableElement> moduleBindMethods = moduleBindMethodsBuilder.build();
+          ImmutableSet<ExecutableElement> moduleBindsMethods = moduleBindsMethodsBuilder.build();
 
           if (Sets.difference(moduleProducesMethods, validProducesMethods).isEmpty()
-              && Sets.difference(moduleBindMethods, validBindMethods).isEmpty()) {
+              && Sets.difference(moduleBindsMethods, validBindsMethods).isEmpty()) {
             // all of the produces methods in this module are valid!
             // time to generate some factories!
             ImmutableSet<ProductionBinding> bindings =
@@ -162,20 +162,20 @@ public ProductionBinding apply(ExecutableElement producesMethod) {
     return validProducesMethodsBuilder.build();
   }
 
-  private ImmutableSet<ExecutableElement> validateBindMethods(
+  private ImmutableSet<ExecutableElement> validateBindsMethods(
       SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation) {
-    ImmutableSet.Builder<ExecutableElement> validBindMethodsBuilder = ImmutableSet.builder();
+    ImmutableSet.Builder<ExecutableElement> validBindsMethodsBuilder = ImmutableSet.builder();
     for (Element bindElement : elementsByAnnotation.get(Binds.class)) {
       if (bindElement.getKind().equals(METHOD)) {
-        ExecutableElement bindMethodElement = (ExecutableElement) bindElement;
+        ExecutableElement bindsMethodElement = (ExecutableElement) bindElement;
         ValidationReport<ExecutableElement> methodReport =
-            bindMethodValidator.validate(bindMethodElement);
+            bindsMethodValidator.validate(bindsMethodElement);
         methodReport.printMessagesTo(messager);
         if (methodReport.isClean()) {
-          validBindMethodsBuilder.add(bindMethodElement);
+          validBindsMethodsBuilder.add(bindsMethodElement);
         }
       }
     }
-    return validBindMethodsBuilder.build();
+    return validBindsMethodsBuilder.build();
   }
 }
diff --git a/compiler/src/test/java/dagger/internal/codegen/BindMethodValidatorTest.java b/compiler/src/test/java/dagger/internal/codegen/BindsMethodValidatorTest.java
similarity index 97%
rename from compiler/src/test/java/dagger/internal/codegen/BindMethodValidatorTest.java
rename to compiler/src/test/java/dagger/internal/codegen/BindsMethodValidatorTest.java
index 7354b1eb1..13aafff1f 100644
--- a/compiler/src/test/java/dagger/internal/codegen/BindMethodValidatorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/BindsMethodValidatorTest.java
@@ -31,7 +31,7 @@
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 @RunWith(Parameterized.class)
-public class BindMethodValidatorTest {
+public class BindsMethodValidatorTest {
   @Parameters
   public static Collection<Object[]> data() {
     return ImmutableList.copyOf(new Object[][] {{Module.class}, {ProducerModule.class}});
@@ -39,7 +39,7 @@
 
   private final Class<? extends Annotation> moduleAnnotation;
 
-  public BindMethodValidatorTest(Class<? extends Annotation> moduleAnnotation) {
+  public BindsMethodValidatorTest(Class<? extends Annotation> moduleAnnotation) {
     this.moduleAnnotation = moduleAnnotation;
   }
 
diff --git a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index f95e0a116..bd64e88e4 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -1382,10 +1382,10 @@ private CompileTester assertThatMethodCombination(String... methodLines) {
             .add("}")
             .build();
 
-    JavaFileObject bindMethodAndInstanceProvidesMethodModuleFile =
+    JavaFileObject bindsMethodAndInstanceProvidesMethodModuleFile =
         JavaFileObjects.forSourceLines("test.TestModule", moduleLines);
     return assertThat(
-            fooFile, fooImplFile, barFile, bazFile, bindMethodAndInstanceProvidesMethodModuleFile)
+            fooFile, fooImplFile, barFile, bazFile, bindsMethodAndInstanceProvidesMethodModuleFile)
         .processedWith(new ComponentProcessor());
   }
 }
