diff --git a/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java b/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java
index ec18fbf2e..d009f75da 100644
--- a/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java
@@ -15,13 +15,11 @@
  */
 package dagger.internal.codegen;
 
-import com.google.common.collect.ImmutableList;
 import dagger.Module;
-import dagger.ObjectGraph;
 import dagger.Provides;
 import dagger.internal.Binding;
-import dagger.internal.BindingsGroup;
 import dagger.internal.Binding.InvalidBindingException;
+import dagger.internal.BindingsGroup;
 import dagger.internal.Linker;
 import dagger.internal.ProblemDetector;
 import dagger.internal.ProvidesBinding;
@@ -177,12 +175,12 @@ private void error(String message, Element element) {
     // to make the linker happy.
     synchronized (linker) {
       BindingsGroup baseBindings = new BindingsGroup() {
-        @Override public final Binding<?> contributeSetBinding(String key, SetBinding<?> value) {
+        @Override public Binding<?> contributeSetBinding(String key, SetBinding<?> value) {
           return super.put(key, value);
         }
       };
       BindingsGroup overrideBindings = new BindingsGroup() {
-        @Override public final Binding<?> contributeSetBinding(String key, SetBinding<?> value) {
+        @Override public Binding<?> contributeSetBinding(String key, SetBinding<?> value) {
           throw new IllegalStateException("Module overrides cannot contribute set bindings.");
         }
       };
@@ -244,7 +242,7 @@ private void error(String message, Element element) {
               }
               try {
                 addTo.contributeProvidesBinding(key, binding);
-              } catch (IllegalStateException ise) { 
+              } catch (IllegalStateException ise) {
                 throw new ModuleValidationException(ise.getMessage(), providerMethod);
               }
               break;
diff --git a/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java
index f4b7882a6..bdba0f461 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java
@@ -332,7 +332,8 @@ private void generateModuleAdapter(Writer ioWriter, String adapterName, TypeElem
         switch (provides.type()) {
           case UNIQUE: {
             String key = GeneratorKeys.get(providerMethod);
-            writer.emitStatement("bindings.contributeProvidesBinding(%s, new %s(module))", JavaWriter.stringLiteral(key),
+            writer.emitStatement("bindings.contributeProvidesBinding(%s, new %s(module))",
+                JavaWriter.stringLiteral(key),
                 bindingClassName(providerMethod, methodToClassName, methodNameToNextId));
             break;
           }
diff --git a/core/src/main/java/dagger/ObjectGraph.java b/core/src/main/java/dagger/ObjectGraph.java
index d0d3c3b60..e5d542833 100644
--- a/core/src/main/java/dagger/ObjectGraph.java
+++ b/core/src/main/java/dagger/ObjectGraph.java
@@ -329,14 +329,14 @@ public StandardBindings() {
     public StandardBindings(List<SetBinding<?>> baseSetBindings) {
       setBindings = new ArrayList<SetBinding<?>>(baseSetBindings.size());
       for (SetBinding<?> sb : baseSetBindings) {
-        @SuppressWarnings("rawtypes")
+        @SuppressWarnings({ "rawtypes", "unchecked" })
         SetBinding<?> child = new SetBinding(sb);
         setBindings.add(child);
         put(child.provideKey, child);
       }
     }
 
-    @Override public final Binding<?> contributeSetBinding(String key, SetBinding<?> value) {
+    @Override public Binding<?> contributeSetBinding(String key, SetBinding<?> value) {
       setBindings.add(value);
       return super.put(key, value);
     }
@@ -350,7 +350,7 @@ public StandardBindings(List<SetBinding<?>> baseSetBindings) {
   private static final class OverridesBindings extends BindingsGroup {
     OverridesBindings() { }
 
-    @Override public final Binding<?> contributeSetBinding(String key, SetBinding<?> value) {
+    @Override public Binding<?> contributeSetBinding(String key, SetBinding<?> value) {
       throw new IllegalArgumentException("Module overrides cannot contribute set bindings.");
     }
   }
