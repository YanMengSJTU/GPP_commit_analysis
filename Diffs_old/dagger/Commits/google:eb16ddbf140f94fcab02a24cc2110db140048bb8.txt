diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index 3c4d73ff8..895dd647f 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -42,6 +42,7 @@
 import dagger.producers.Produced;
 import dagger.producers.Producer;
 import dagger.producers.Produces;
+import dagger.producers.internal.AbstractProducer;
 import dagger.producers.internal.Producers;
 import java.util.List;
 import java.util.concurrent.Callable;
@@ -56,6 +57,7 @@
 import static dagger.internal.codegen.writer.Snippet.makeParametersSnippet;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.PROTECTED;
 import static javax.lang.model.element.Modifier.PUBLIC;
 
 /**
@@ -118,12 +120,12 @@ ClassName nameGeneratedType(ProductionBinding binding) {
     factoryWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getName());
     factoryWriter.addModifiers(PUBLIC);
     factoryWriter.addModifiers(FINAL);
-    factoryWriter.addImplementedType(
-        ParameterizedTypeName.create(Producer.class, providedTypeName));
+    factoryWriter.setSuperType(
+        ParameterizedTypeName.create(AbstractProducer.class, providedTypeName));
 
-    MethodWriter getMethodWriter = factoryWriter.addMethod(futureTypeName, "get");
+    MethodWriter getMethodWriter = factoryWriter.addMethod(futureTypeName, "compute");
     getMethodWriter.annotate(Override.class);
-    getMethodWriter.addModifiers(PUBLIC);
+    getMethodWriter.addModifiers(PROTECTED);
 
     final ImmutableMap<BindingKey, FrameworkField> fields =
         SourceFiles.generateBindingFieldsForDependencies(
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/TypeWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/TypeWriter.java
index 69dba9f96..364b3a239 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/TypeWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/TypeWriter.java
@@ -23,6 +23,8 @@
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.TypeMirror;
 
+import static com.google.common.base.Preconditions.checkState;
+
 /**
  * Only named types. Doesn't cover anonymous inner classes.
  */
@@ -89,6 +91,15 @@ public void addImplementedType(TypeElement typeElement) {
     implementedTypes.add(ClassName.fromTypeElement(typeElement));
   }
 
+  public void setSuperType(TypeName typeReference) {
+    checkState(!supertype.isPresent());
+    supertype = Optional.of(typeReference);
+  }
+
+  public void setSuperType(TypeElement typeElement) {
+    setSuperType(ClassName.fromTypeElement(typeElement));
+  }
+
   public FieldWriter addField(Class<?> type, String name) {
     return addField(ClassName.fromClass(type), name);
   }
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
index 06868a827..83c96aca1 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
@@ -464,14 +464,14 @@ public void publicModuleNonPublicIncludes() {
         "",
         "import com.google.common.util.concurrent.Futures;",
         "import com.google.common.util.concurrent.ListenableFuture;",
-        "import dagger.producers.Producer;",
+        "import dagger.producers.internal.AbstractProducer;",
         "import dagger.producers.internal.Producers;",
         "import java.util.concurrent.Callable;",
         "import java.util.concurrent.Executor;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory implements Producer<String> {",
+        "public final class TestModule$$ProduceStringFactory extends AbstractProducer<String> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "",
@@ -482,7 +482,7 @@ public void publicModuleNonPublicIncludes() {
         "    this.executor = executor;",
         "  }",
         "",
-        "  @Override public ListenableFuture<String> get() {",
+        "  @Override protected ListenableFuture<String> compute() {",
         "    ListenableFuture<ListenableFuture<String>> future = Producers.submitToExecutor(",
         "      new Callable<ListenableFuture<String>>() {",
         "        @Override public ListenableFuture<String> call() {",
@@ -518,7 +518,7 @@ public void publicModuleNonPublicIncludes() {
         "",
         "import com.google.common.util.concurrent.Futures;",
         "import com.google.common.util.concurrent.ListenableFuture;",
-        "import dagger.producers.Producer;",
+        "import dagger.producers.internal.AbstractProducer;",
         "import dagger.producers.internal.Producers;",
         "import java.util.Set;",
         "import java.util.concurrent.Callable;",
@@ -526,7 +526,8 @@ public void publicModuleNonPublicIncludes() {
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory implements Producer<Set<String>> {",
+        "public final class TestModule$$ProduceStringFactory",
+        "    extends AbstractProducer<Set<String>> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "",
@@ -538,7 +539,7 @@ public void publicModuleNonPublicIncludes() {
         "  }",
         "",
         "  @Override",
-        "  public ListenableFuture<Set<String>> get() {  ",
+        "  protected ListenableFuture<Set<String>> compute() {  ",
         "    ListenableFuture<ListenableFuture<Set<String>>> future =",
         "        Producers.submitToExecutor(new Callable<ListenableFuture<Set<String>>>() {",
         "      @Override public ListenableFuture<Set<String>> call() {",
@@ -571,14 +572,14 @@ public void publicModuleNonPublicIncludes() {
         "package test;",
         "",
         "import com.google.common.util.concurrent.ListenableFuture;",
-        "import dagger.producers.Producer;",
+        "import dagger.producers.internal.AbstractProducer;",
         "import dagger.producers.internal.Producers;",
         "import java.util.concurrent.Callable;",
         "import java.util.concurrent.Executor;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory implements Producer<String> {",
+        "public final class TestModule$$ProduceStringFactory extends AbstractProducer<String> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "",
@@ -589,7 +590,7 @@ public void publicModuleNonPublicIncludes() {
         "    this.executor = executor;",
         "  }",
         "",
-        "  @Override public ListenableFuture<String> get() {",
+        "  @Override protected ListenableFuture<String> compute() {",
         "    ListenableFuture<String> future = Producers.submitToExecutor(",
         "      new Callable<String>() {",
         "        @Override public String call() {",
@@ -624,7 +625,7 @@ public void publicModuleNonPublicIncludes() {
         "",
         "import com.google.common.collect.ImmutableSet;",
         "import com.google.common.util.concurrent.ListenableFuture;",
-        "import dagger.producers.Producer;",
+        "import dagger.producers.internal.AbstractProducer;",
         "import dagger.producers.internal.Producers;",
         "import java.util.Set;",
         "import java.util.concurrent.Callable;",
@@ -632,7 +633,8 @@ public void publicModuleNonPublicIncludes() {
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory implements Producer<Set<String>> {",
+        "public final class TestModule$$ProduceStringFactory",
+        "    extends AbstractProducer<Set<String>> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "",
@@ -644,7 +646,7 @@ public void publicModuleNonPublicIncludes() {
         "  }",
         "",
         "  @Override",
-        "  public ListenableFuture<Set<String>> get() {  ",
+        "  protected ListenableFuture<Set<String>> compute() {  ",
         "    ListenableFuture<Set<String>> future =",
         "        Producers.submitToExecutor(new Callable<Set<String>>() {",
         "      @Override public Set<String> call() {",
@@ -686,6 +688,7 @@ public void publicModuleNonPublicIncludes() {
         "import com.google.common.util.concurrent.ListenableFuture;",
         "import dagger.producers.Produced;",
         "import dagger.producers.Producer;",
+        "import dagger.producers.internal.AbstractProducer;",
         "import dagger.producers.internal.Producers;",
         "import java.util.List;",
         "import java.util.concurrent.Executor;",
@@ -693,7 +696,7 @@ public void publicModuleNonPublicIncludes() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory implements Producer<String> {",
+        "public final class TestModule$$ProduceStringFactory extends AbstractProducer<String> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "  private final Producer<Integer> aProducer;",
@@ -722,7 +725,7 @@ public void publicModuleNonPublicIncludes() {
         "    this.dProvider = dProvider;",
         "  }",
         "",
-        "  @Override public ListenableFuture<String> get() {",
+        "  @Override protected ListenableFuture<String> compute() {",
         "    ListenableFuture<Integer> aProducerFuture = aProducer.get();",
         "    ListenableFuture<Produced<Double>> bProducerFuture =",
         "        Producers.createFutureProduced(bProducer.get());",
@@ -771,6 +774,7 @@ public void publicModuleNonPublicIncludes() {
         "import com.google.common.util.concurrent.ListenableFuture;",
         "import dagger.producers.Produced;",
         "import dagger.producers.Producer;",
+        "import dagger.producers.internal.AbstractProducer;",
         "import dagger.producers.internal.Producers;",
         "import java.util.List;",
         "import java.util.concurrent.Executor;",
@@ -778,7 +782,7 @@ public void publicModuleNonPublicIncludes() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory implements Producer<String> {",
+        "public final class TestModule$$ProduceStringFactory extends AbstractProducer<String> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "  private final Producer<Integer> aProducer;",
@@ -807,7 +811,7 @@ public void publicModuleNonPublicIncludes() {
         "    this.dProvider = dProvider;",
         "  }",
         "",
-        "  @Override public ListenableFuture<String> get() {",
+        "  @Override protected ListenableFuture<String> compute() {",
         "    ListenableFuture<Integer> aProducerFuture = aProducer.get();",
         "    ListenableFuture<Produced<Double>> bProducerFuture =",
         "        Producers.createFutureProduced(bProducer.get());",
@@ -852,11 +856,12 @@ public void publicModuleNonPublicIncludes() {
         "import com.google.common.util.concurrent.Futures;",
         "import com.google.common.util.concurrent.ListenableFuture;",
         "import dagger.producers.Producer;",
+        "import dagger.producers.internal.AbstractProducer;",
         "import java.util.concurrent.Executor;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory implements Producer<String> {",
+        "public final class TestModule$$ProduceStringFactory extends AbstractProducer<String> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "  private final Producer<Integer> aProducer;",
@@ -873,7 +878,7 @@ public void publicModuleNonPublicIncludes() {
         "    this.aProducer = aProducer;",
         "  }",
         "",
-        "  @Override public ListenableFuture<String> get() {",
+        "  @Override protected ListenableFuture<String> compute() {",
         "    ListenableFuture<Integer> aProducerFuture = aProducer.get();",
         "    return Futures.transform(aProducerFuture,",
         "        new AsyncFunction<Integer, String>() {",
@@ -910,7 +915,7 @@ public void publicModuleNonPublicIncludes() {
         "",
         "import com.google.common.util.concurrent.Futures;",
         "import com.google.common.util.concurrent.ListenableFuture;",
-        "import dagger.producers.Producer;",
+        "import dagger.producers.internal.AbstractProducer;",
         "import dagger.producers.internal.Producers;",
         "import java.io.IOException;",
         "import java.util.concurrent.Callable;",
@@ -918,7 +923,7 @@ public void publicModuleNonPublicIncludes() {
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory implements Producer<String> {",
+        "public final class TestModule$$ProduceStringFactory extends AbstractProducer<String> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "",
@@ -929,7 +934,7 @@ public void publicModuleNonPublicIncludes() {
         "    this.executor = executor;",
         "  }",
         "",
-        "  @Override public ListenableFuture<String> get() {",
+        "  @Override protected ListenableFuture<String> compute() {",
         "    ListenableFuture<ListenableFuture<String>> future = Producers.submitToExecutor(",
         "      new Callable<ListenableFuture<String>>() {",
         "        @Override public ListenableFuture<String> call()",
@@ -964,7 +969,7 @@ public void publicModuleNonPublicIncludes() {
         "package test;",
         "",
         "import com.google.common.util.concurrent.ListenableFuture;",
-        "import dagger.producers.Producer;",
+        "import dagger.producers.internal.AbstractProducer;",
         "import dagger.producers.internal.Producers;",
         "import java.io.IOException;",
         "import java.util.concurrent.Callable;",
@@ -972,7 +977,7 @@ public void publicModuleNonPublicIncludes() {
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory implements Producer<String> {",
+        "public final class TestModule$$ProduceStringFactory extends AbstractProducer<String> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "",
@@ -983,7 +988,7 @@ public void publicModuleNonPublicIncludes() {
         "    this.executor = executor;",
         "  }",
         "",
-        "  @Override public ListenableFuture<String> get() {",
+        "  @Override protected ListenableFuture<String> compute() {",
         "    ListenableFuture<String> future = Producers.submitToExecutor(",
         "      new Callable<String>() {",
         "        @Override public String call() throws IOException {",
@@ -1027,6 +1032,7 @@ public void publicModuleNonPublicIncludes() {
         "import com.google.common.util.concurrent.ListenableFuture;",
         "import dagger.producers.Produced;",
         "import dagger.producers.Producer;",
+        "import dagger.producers.internal.AbstractProducer;",
         "import dagger.producers.internal.Producers;",
         "import java.io.IOException;",
         "import java.util.List;",
@@ -1035,7 +1041,7 @@ public void publicModuleNonPublicIncludes() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory implements Producer<String> {",
+        "public final class TestModule$$ProduceStringFactory extends AbstractProducer<String> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "  private final Producer<Integer> aProducer;",
@@ -1064,7 +1070,7 @@ public void publicModuleNonPublicIncludes() {
         "    this.dProvider = dProvider;",
         "  }",
         "",
-        "  @Override public ListenableFuture<String> get() {",
+        "  @Override protected ListenableFuture<String> compute() {",
         "    ListenableFuture<Integer> aProducerFuture = aProducer.get();",
         "    ListenableFuture<Produced<Double>> bProducerFuture =",
         "        Producers.createFutureProduced(bProducer.get());",
@@ -1110,7 +1116,7 @@ public void publicModuleNonPublicIncludes() {
         "",
         "import com.google.common.util.concurrent.Futures;",
         "import com.google.common.util.concurrent.ListenableFuture;",
-        "import dagger.producers.Producer;",
+        "import dagger.producers.internal.AbstractProducer;",
         "import dagger.producers.internal.Producers;",
         "import java.io.IOException;",
         "import java.util.Set;",
@@ -1119,7 +1125,8 @@ public void publicModuleNonPublicIncludes() {
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory implements Producer<Set<String>> {",
+        "public final class TestModule$$ProduceStringFactory",
+        "    extends AbstractProducer<Set<String>> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "",
@@ -1131,7 +1138,7 @@ public void publicModuleNonPublicIncludes() {
         "  }",
         "",
         "  @Override",
-        "  public ListenableFuture<Set<String>> get() {  ",
+        "  protected ListenableFuture<Set<String>> compute() {  ",
         "    ListenableFuture<ListenableFuture<Set<String>>> future =",
         "        Producers.submitToExecutor(new Callable<ListenableFuture<Set<String>>>() {",
         "      @Override public ListenableFuture<Set<String>> call() throws IOException {",
diff --git a/producers/src/main/java/dagger/producers/internal/AbstractProducer.java b/producers/src/main/java/dagger/producers/internal/AbstractProducer.java
new file mode 100644
index 000000000..43659980b
--- /dev/null
+++ b/producers/src/main/java/dagger/producers/internal/AbstractProducer.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.producers.internal;
+
+import com.google.common.util.concurrent.ListenableFuture;
+import dagger.producers.Producer;
+
+/**
+ * An abstract {@link Producer} implementation that memoizes the result of its compute method.
+ *
+ * @author Jesse Beder
+ * @since 2.0
+ */
+public abstract class AbstractProducer<T> implements Producer<T> {
+  private volatile ListenableFuture<T> instance = null;
+
+  /** Computes this producer's future, which is then cached in {@link #get}. */
+  protected abstract ListenableFuture<T> compute();
+
+  @Override
+  public final ListenableFuture<T> get() {
+    // double-check idiom from EJ2: Item 71
+    ListenableFuture<T> result = instance;
+    if (result == null) {
+      synchronized (this) {
+        result = instance;
+        if (result == null) {
+          instance = result = compute();
+          if (result == null) {
+            throw new NullPointerException("compute returned null");
+          }
+        }
+      }
+    }
+    return result;
+  }
+}
diff --git a/producers/src/main/java/dagger/producers/internal/Producers.java b/producers/src/main/java/dagger/producers/internal/Producers.java
index e56ca7316..c850caa33 100644
--- a/producers/src/main/java/dagger/producers/internal/Producers.java
+++ b/producers/src/main/java/dagger/producers/internal/Producers.java
@@ -22,11 +22,15 @@
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.ListenableFutureTask;
 import dagger.producers.Produced;
+import dagger.producers.Producer;
 import java.util.Set;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Executor;
 import java.util.concurrent.RejectedExecutionException;
+import javax.inject.Provider;
+
+import static com.google.common.base.Preconditions.checkNotNull;
 
 /**
  * Utility methods for use in generated producer code.
@@ -103,5 +107,18 @@
     return future;
   }
 
+  /**
+   * Returns a producer that immediately executes the binding logic for the given provider every
+   * time it is called.
+   */
+  public static <T> Producer<T> producerFromProvider(final Provider<T> provider) {
+    checkNotNull(provider);
+    return new AbstractProducer<T>() {
+      @Override protected ListenableFuture<T> compute() {
+        return Futures.immediateFuture(provider.get());
+      }
+    };
+  }
+
   private Producers() {}
 }
diff --git a/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java b/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java
new file mode 100644
index 000000000..b7a17004a
--- /dev/null
+++ b/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2014 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.producers.internal;
+
+import com.google.common.util.concurrent.Futures;
+import com.google.common.util.concurrent.ListenableFuture;
+import dagger.producers.Producer;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+/**
+ * Tests {@link AbstractProducer}.
+ */
+@RunWith(JUnit4.class)
+public class AbstractProducerTest {
+  @Test public void get_nullPointerException() {
+    Producer<Object> producer = new AbstractProducer<Object>() {
+      @Override public ListenableFuture<Object> compute() {
+        return null;
+      }
+    };
+    try {
+      producer.get();
+      fail();
+    } catch (NullPointerException expected) {
+    }
+  }
+
+  @Test public void get() throws Exception {
+    Producer<Integer> producer = new AbstractProducer<Integer>() {
+      int i = 0;
+
+      @Override public ListenableFuture<Integer> compute() {
+        return Futures.immediateFuture(i++);
+      }
+    };
+    assertThat(producer.get().get()).is(0);
+    assertThat(producer.get().get()).is(0);
+    assertThat(producer.get().get()).is(0);
+  }
+}
diff --git a/producers/src/test/java/dagger/producers/internal/ProducersTest.java b/producers/src/test/java/dagger/producers/internal/ProducersTest.java
index ee2e0b9f6..43564089f 100644
--- a/producers/src/test/java/dagger/producers/internal/ProducersTest.java
+++ b/producers/src/test/java/dagger/producers/internal/ProducersTest.java
@@ -20,10 +20,12 @@
 import com.google.common.util.concurrent.MoreExecutors;
 import com.google.common.util.concurrent.SettableFuture;
 import dagger.producers.Produced;
+import dagger.producers.Producer;
 import java.util.Set;
 import java.util.concurrent.Callable;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
+import javax.inject.Provider;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -105,4 +107,17 @@
     assertThat(future.isDone()).isTrue();
     assertThat(future.get()).isEqualTo(42);
   }
+
+  @Test public void producerFromProvider() throws Exception {
+    Producer<Integer> producer = Producers.producerFromProvider(new Provider<Integer>() {
+      int i = 0;
+
+      @Override public Integer get() {
+        return i++;
+      }
+    });
+    assertThat(producer.get().get()).isEqualTo(0);
+    assertThat(producer.get().get()).isEqualTo(0);
+    assertThat(producer.get().get()).isEqualTo(0);
+  }
 }
