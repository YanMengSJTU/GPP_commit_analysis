diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index 0d5bdad38..80e6c1187 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -37,7 +37,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.Set;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
@@ -47,7 +46,6 @@
 
 import static com.google.auto.common.MoreElements.getAnnotationMirror;
 import static com.google.auto.common.MoreElements.isAnnotationPresent;
-import static com.google.common.base.Preconditions.checkState;
 import static dagger.internal.codegen.ComponentDescriptor.isComponentContributionMethod;
 import static dagger.internal.codegen.ComponentDescriptor.isComponentProductionMethod;
 import static dagger.internal.codegen.ComponentDescriptor.Kind.PRODUCTION_COMPONENT;
@@ -76,52 +74,6 @@
   abstract ImmutableMap<BindingKey, ResolvedBindings> resolvedBindings();
   abstract ImmutableMap<ExecutableElement, BindingGraph> subgraphs();
 
-  @AutoValue
-  abstract static class ResolvedBindings {
-    abstract BindingKey bindingKey();
-    abstract ImmutableSet<? extends Binding> ownedBindings();
-    abstract ImmutableSet<? extends Binding> bindings();
-
-    static ResolvedBindings create(
-        BindingKey bindingKey,
-        Set<? extends Binding> ownedBindings,
-        Set<? extends Binding> inheritedBindings) {
-      ImmutableSet<Binding> immutableOwnedBindings = ImmutableSet.copyOf(ownedBindings);
-      return new AutoValue_BindingGraph_ResolvedBindings(
-          bindingKey,
-          immutableOwnedBindings,
-          ImmutableSet.<Binding>builder()
-              .addAll(inheritedBindings)
-              .addAll(immutableOwnedBindings)
-              .build());
-    }
-
-    static ResolvedBindings create(
-        BindingKey bindingKey,
-        Binding... ownedBindings) {
-      ImmutableSet<Binding> bindings = ImmutableSet.copyOf(ownedBindings);
-      return new AutoValue_BindingGraph_ResolvedBindings(bindingKey, bindings, bindings);
-    }
-
-    @SuppressWarnings("unchecked")  // checked by validator
-    ImmutableSet<? extends ContributionBinding> ownedContributionBindings() {
-      checkState(bindingKey().kind().equals(BindingKey.Kind.CONTRIBUTION));
-      return (ImmutableSet<? extends ContributionBinding>) ownedBindings();
-    }
-
-    @SuppressWarnings("unchecked")  // checked by validator
-    ImmutableSet<? extends ContributionBinding> contributionBindings() {
-      checkState(bindingKey().kind().equals(BindingKey.Kind.CONTRIBUTION));
-      return (ImmutableSet<? extends ContributionBinding>) bindings();
-    }
-
-    @SuppressWarnings("unchecked")  // checked by validator
-    ImmutableSet<? extends MembersInjectionBinding> membersInjectionBindings() {
-      checkState(bindingKey().kind().equals(BindingKey.Kind.MEMBERS_INJECTION));
-      return (ImmutableSet<? extends MembersInjectionBinding>) bindings();
-    }
-  }
-
   static final class Factory {
     private final Elements elements;
     private final Types types;
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
index 96e963062..74080ff8e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -35,7 +35,6 @@
 import com.google.common.collect.Ordering;
 import com.google.common.collect.Sets;
 import dagger.Component;
-import dagger.internal.codegen.BindingGraph.ResolvedBindings;
 import dagger.internal.codegen.ComponentDescriptor.BuilderSpec;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import dagger.internal.codegen.ContributionBinding.BindingType;
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index b563b255f..3886ba1d8 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -46,7 +46,6 @@
 import dagger.internal.MembersInjectors;
 import dagger.internal.ScopedProvider;
 import dagger.internal.SetFactory;
-import dagger.internal.codegen.BindingGraph.ResolvedBindings;
 import dagger.internal.codegen.ComponentDescriptor.BuilderSpec;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import dagger.internal.codegen.ContributionBinding.BindingType;
diff --git a/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java b/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
new file mode 100644
index 000000000..e44ba4ca7
--- /dev/null
+++ b/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
@@ -0,0 +1,73 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.internal.codegen;
+
+import com.google.auto.value.AutoValue;
+import com.google.common.collect.ImmutableSet;
+import java.util.Set;
+
+import static com.google.common.base.Preconditions.checkState;
+
+/**
+ * The collection of bindings that have been resolved for a binding key.
+ *
+ * @author Gregory Kick
+ */
+@AutoValue
+abstract class ResolvedBindings {
+  abstract BindingKey bindingKey();
+  abstract ImmutableSet<? extends Binding> ownedBindings();
+  abstract ImmutableSet<? extends Binding> bindings();
+
+  static ResolvedBindings create(
+      BindingKey bindingKey,
+      Set<? extends Binding> ownedBindings,
+      Set<? extends Binding> inheritedBindings) {
+    ImmutableSet<Binding> immutableOwnedBindings = ImmutableSet.copyOf(ownedBindings);
+    return new AutoValue_ResolvedBindings(
+        bindingKey,
+        immutableOwnedBindings,
+        ImmutableSet.<Binding>builder()
+        .addAll(inheritedBindings)
+        .addAll(immutableOwnedBindings)
+        .build());
+  }
+
+  static ResolvedBindings create(
+      BindingKey bindingKey,
+      Binding... ownedBindings) {
+    ImmutableSet<Binding> bindings = ImmutableSet.copyOf(ownedBindings);
+    return new AutoValue_ResolvedBindings(bindingKey, bindings, bindings);
+  }
+
+  @SuppressWarnings("unchecked")  // checked by validator
+  ImmutableSet<? extends ContributionBinding> ownedContributionBindings() {
+    checkState(bindingKey().kind().equals(BindingKey.Kind.CONTRIBUTION));
+    return (ImmutableSet<? extends ContributionBinding>) ownedBindings();
+  }
+
+  @SuppressWarnings("unchecked")  // checked by validator
+  ImmutableSet<? extends ContributionBinding> contributionBindings() {
+    checkState(bindingKey().kind().equals(BindingKey.Kind.CONTRIBUTION));
+    return (ImmutableSet<? extends ContributionBinding>) bindings();
+  }
+
+  @SuppressWarnings("unchecked")  // checked by validator
+  ImmutableSet<? extends MembersInjectionBinding> membersInjectionBindings() {
+    checkState(bindingKey().kind().equals(BindingKey.Kind.MEMBERS_INJECTION));
+    return (ImmutableSet<? extends MembersInjectionBinding>) bindings();
+  }
+}
