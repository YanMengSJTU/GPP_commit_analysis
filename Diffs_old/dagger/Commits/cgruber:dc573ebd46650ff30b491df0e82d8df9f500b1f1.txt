diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index f93eb84c0..29c05a9ad 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -200,7 +200,6 @@ java_library(
         "InjectValidator.java",
         "MapKeyValidator.java",
         "MembersInjectionValidator.java",
-        "ModuleValidation.java",
         "ModuleValidator.java",
         "MultibindingAnnotationsProcessingStep.java",
         "MultibindsMethodValidator.java",
diff --git a/java/dagger/internal/codegen/BindingGraphValidationModule.java b/java/dagger/internal/codegen/BindingGraphValidationModule.java
index 7bfe7af53..63e1fa255 100644
--- a/java/dagger/internal/codegen/BindingGraphValidationModule.java
+++ b/java/dagger/internal/codegen/BindingGraphValidationModule.java
@@ -16,14 +16,10 @@
 
 package dagger.internal.codegen;
 
-import com.google.common.collect.ImmutableSet;
 import dagger.Binds;
 import dagger.Module;
-import dagger.Provides;
 import dagger.multibindings.IntoSet;
 import dagger.spi.BindingGraphPlugin;
-import java.util.Set;
-import javax.inject.Singleton;
 
 /** Binds the set of {@link BindingGraphPlugin}s used to implement Dagger validation. */
 @Module
@@ -79,23 +75,4 @@ BindingGraphPlugin provisionDependencyOnProducerBinding(
   @IntoSet
   @Validation
   BindingGraphPlugin subcomponentFactoryMethod(SubcomponentFactoryMethodValidator validation);
-
-  @Provides
-  @Singleton
-  @ModuleValidation
-  static BindingGraphValidator moduleBindingGraphValidator(
-      @Validation Set<BindingGraphPlugin> validationPlugins,
-      ImmutableSet<BindingGraphPlugin> externalPlugins,
-      @ModuleValidation DiagnosticReporterFactory diagnosticReporterFactory) {
-    return new BindingGraphValidator(validationPlugins, externalPlugins, diagnosticReporterFactory);
-  }
-
-  @Provides
-  @ModuleValidation
-  static DiagnosticReporterFactory moduleValidationDiagnosticReporterFactory(
-      DiagnosticReporterFactory diagnosticReporterFactory, CompilerOptions compilerOptions) {
-    return diagnosticReporterFactory
-        .treatingErrorsAs(compilerOptions.moduleBindingValidationType())
-        .withoutPrintingEntryPoints();
-  }
 }
diff --git a/java/dagger/internal/codegen/DiagnosticReporterFactory.java b/java/dagger/internal/codegen/DiagnosticReporterFactory.java
index ba4404222..9c6c13b21 100644
--- a/java/dagger/internal/codegen/DiagnosticReporterFactory.java
+++ b/java/dagger/internal/codegen/DiagnosticReporterFactory.java
@@ -32,6 +32,7 @@
 import static dagger.internal.codegen.DaggerStreams.instancesOf;
 import static dagger.internal.codegen.DaggerStreams.presentValues;
 import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
+import static dagger.internal.codegen.ValidationType.NONE;
 import static java.util.Collections.min;
 import static java.util.Comparator.comparing;
 import static java.util.Comparator.comparingInt;
@@ -74,41 +75,18 @@
   private final DaggerTypes types;
   private final Messager messager;
   private final DependencyRequestFormatter dependencyRequestFormatter;
-  private final ValidationType validationType;
-  private final boolean printingEntryPoints;
+  private final CompilerOptions compilerOptions;
 
   @Inject
   DiagnosticReporterFactory(
-      DaggerTypes types, Messager messager, DependencyRequestFormatter dependencyRequestFormatter) {
-    this(types, messager, dependencyRequestFormatter, ValidationType.ERROR, true);
-  }
-
-  private DiagnosticReporterFactory(
       DaggerTypes types,
       Messager messager,
       DependencyRequestFormatter dependencyRequestFormatter,
-      ValidationType validationType,
-      boolean printingEntryPoints) {
+      CompilerOptions compilerOptions) {
     this.types = types;
     this.messager = messager;
     this.dependencyRequestFormatter = dependencyRequestFormatter;
-    this.validationType = validationType;
-    this.printingEntryPoints = printingEntryPoints;
-  }
-
-  /** Returns a factory that treats all reported errors as some other kind instead. */
-  DiagnosticReporterFactory treatingErrorsAs(ValidationType validationType) {
-    if (validationType.equals(this.validationType)) {
-      return this;
-    }
-    return new DiagnosticReporterFactory(
-        types, messager, dependencyRequestFormatter, validationType, printingEntryPoints);
-  }
-
-  /** Returns a factory that does not print dependency traces from entry points to the error. */
-  DiagnosticReporterFactory withoutPrintingEntryPoints() {
-    return new DiagnosticReporterFactory(
-        types, messager, dependencyRequestFormatter, validationType, false);
+    this.compilerOptions = compilerOptions;
   }
 
   /** Creates a reporter for a binding graph and a plugin. */
@@ -251,11 +229,13 @@ private Node source(Edge edge) {
 
     void printMessage(
         Diagnostic.Kind diagnosticKind, CharSequence message, Element elementToReport) {
-      if (diagnosticKind.equals(ERROR)) {
-        if (!validationType.diagnosticKind().isPresent()) {
+      if (graph.isModuleBindingGraph()) {
+        if (compilerOptions.moduleBindingValidationType().equals(NONE)) {
           return;
         }
-        diagnosticKind = validationType.diagnosticKind().get();
+        if (diagnosticKind.equals(ERROR)) {
+          diagnosticKind = compilerOptions.moduleBindingValidationType().diagnosticKind().get();
+        }
       }
       reportedDiagnosticKinds.add(diagnosticKind);
       StringBuilder fullMessage = new StringBuilder();
@@ -312,12 +292,12 @@ private void appendBracketPrefix(StringBuilder message, String prefix) {
       @Override
       public String toString() {
         StringBuilder message =
-            printingEntryPoints
-                ? new StringBuilder(dependencyTrace.size() * 100 /* a guess heuristic */)
-                : new StringBuilder();
+            graph.isModuleBindingGraph()
+                ? new StringBuilder()
+                : new StringBuilder(dependencyTrace.size() * 100 /* a guess heuristic */);
 
-        // Print the dependency trace if we're printing entry points
-        if (printingEntryPoints) {
+        // Print the dependency trace unless it's a module binding graph
+        if (!graph.isModuleBindingGraph()) {
           dependencyTrace.forEach(
               edge ->
                   dependencyRequestFormatter.appendFormatLine(message, edge.dependencyRequest()));
@@ -332,7 +312,7 @@ public String toString() {
                 // if printing entry points, skip entry points and the traced request
                 .filter(
                     request ->
-                        !printingEntryPoints
+                        graph.isModuleBindingGraph()
                             || (!request.isEntryPoint() && !isTracedRequest(request)))
                 .map(request -> request.dependencyRequest().requestElement())
                 .flatMap(presentValues())
@@ -340,16 +320,16 @@ public String toString() {
         if (!requestsToPrint.isEmpty()) {
           message
               .append("\nIt is")
-              .append(printingEntryPoints ? " also " : " ")
+              .append(graph.isModuleBindingGraph() ? " " : " also ")
               .append("requested at:");
           for (Element request : requestsToPrint) {
             message.append("\n    ").append(elementToString(request));
           }
         }
 
-        // Print the remaining entry points, showing which component they're in, if we're printing
-        // entry points.
-        if (printingEntryPoints && entryPoints.size() > 1) {
+        // Print the remaining entry points, showing which component they're in, unless we're in a
+        // module binding graph
+        if (!graph.isModuleBindingGraph() && entryPoints.size() > 1) {
           message.append("\nThe following other entry points also depend on it:");
           entryPoints.stream()
               .filter(entryPoint -> !entryPoint.equals(getLast(dependencyTrace)))
diff --git a/java/dagger/internal/codegen/ModuleValidation.java b/java/dagger/internal/codegen/ModuleValidation.java
deleted file mode 100644
index 209ba6feb..000000000
--- a/java/dagger/internal/codegen/ModuleValidation.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- * Copyright (C) 2018 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.internal.codegen;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import javax.inject.Qualifier;
-
-/**
- * Qualifier annotation for the {@link dagger.spi.BindingGraphPlugin}s that are used to implement
- * core Dagger validation for module binding graphs.
- */
-@Documented
-@Retention(RetentionPolicy.RUNTIME)
-@Qualifier
-@interface ModuleValidation {}
diff --git a/java/dagger/internal/codegen/ModuleValidator.java b/java/dagger/internal/codegen/ModuleValidator.java
index 2749b4741..fdd0551d4 100644
--- a/java/dagger/internal/codegen/ModuleValidator.java
+++ b/java/dagger/internal/codegen/ModuleValidator.java
@@ -122,7 +122,7 @@
       ComponentDescriptorFactory componentDescriptorFactory,
       BindingGraphFactory bindingGraphFactory,
       BindingGraphConverter bindingGraphConverter,
-      @ModuleValidation BindingGraphValidator bindingGraphValidator,
+      BindingGraphValidator bindingGraphValidator,
       CompilerOptions compilerOptions) {
     this.types = types;
     this.elements = elements;
