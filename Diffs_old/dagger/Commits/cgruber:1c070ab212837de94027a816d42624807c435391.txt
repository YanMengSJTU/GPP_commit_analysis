diff --git a/compiler/src/it/functional-tests/src/main/java/test/membersinject/MembersInjectComponent.java b/compiler/src/it/functional-tests/src/main/java/test/membersinject/MembersInjectComponent.java
index 293504518..9fe099f33 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/membersinject/MembersInjectComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/membersinject/MembersInjectComponent.java
@@ -24,5 +24,6 @@
   void inject(ChildOfStringArray subfoo);
   void inject(ChildOfArrayOfParentOfStringArray subfoo);
   void inject(ChildOfPrimitiveIntArray subfoo);
+  void inject(RawFrameworkTypes rawFrameworkTypes);
 
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/membersinject/RawFrameworkTypes.java b/compiler/src/it/functional-tests/src/main/java/test/membersinject/RawFrameworkTypes.java
new file mode 100644
index 000000000..88a473177
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/membersinject/RawFrameworkTypes.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package test.membersinject;
+
+import dagger.Lazy;
+import dagger.MembersInjector;
+import javax.inject.Provider;
+
+// https://github.com/google/dagger/issues/419
+@SuppressWarnings({"rawtypes", "unused"})
+class RawFrameworkTypes {
+  void nonInjectMethodWithARawProvider(Provider rawProvider) {}
+  void nonInjectMethodWithARawLazy(Lazy rawLazy) {}
+  void nonInjectMethodWithARawMembersInjector(MembersInjector rawMembersInjector) {}
+}
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
index 07d99080a..9a50c3ccc 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
@@ -115,9 +115,14 @@
      * this kind that represents the dependency request.
      */
     Optional<KindAndType> from(TypeMirror type) {
-      return frameworkClass.isPresent() && isType(type) && isTypeOf(frameworkClass.get(), type)
-          ? Optional.of(this.ofType(getOnlyElement(asDeclared(type).getTypeArguments())))
-          : Optional.<KindAndType>absent();
+      if (frameworkClass.isPresent() && isType(type) && isTypeOf(frameworkClass.get(), type)) {
+        List<? extends TypeMirror> typeArguments = asDeclared(type).getTypeArguments();
+        if (typeArguments.isEmpty()) {
+          return Optional.absent();
+        }
+        return Optional.of(this.ofType(getOnlyElement(typeArguments)));
+      }
+      return Optional.<KindAndType>absent();
     }
 
     /**
diff --git a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
index 1eee259c5..34ee72c2f 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
@@ -18,6 +18,7 @@
 
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+import static com.google.testing.compile.JavaSourcesSubject.assertThat;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static dagger.internal.codegen.ErrorMessages.INJECT_INTO_PRIVATE_CLASS;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
@@ -1082,4 +1083,35 @@ public void fieldInjectionForShadowedMember() {
         .processedWith(new ComponentProcessor())
         .compilesWithoutError();
   }
+
+  @Test public void rawFrameworkTypes() {
+    JavaFileObject file =
+        JavaFileObjects.forSourceLines(
+            "test.RawFrameworkTypes",
+            "package test;",
+            "",
+            "import dagger.Component;",
+            "import javax.inject.Inject;",
+            "import javax.inject.Provider;",
+            "",
+            "class RawProviderField {",
+            "  @Inject Provider fieldWithRawProvider;",
+            "}",
+            "",
+            "class RawProviderParameter {",
+            "  @Inject void methodInjection(Provider rawProviderParameter) {}",
+            "}",
+            "",
+            "@Component",
+            "interface C {",
+            "  void inject(RawProviderField rawProviderField);",
+            "  void inject(RawProviderParameter rawProviderParameter);",
+            "}");
+    assertThat(file)
+        .processedWith(new ComponentProcessor())
+        .failsToCompile()
+        .withErrorContaining("javax.inject.Provider cannot be provided").in(file).onLine(17)
+        .and()
+        .withErrorContaining("javax.inject.Provider cannot be provided").in(file).onLine(18);
+  }
 }
