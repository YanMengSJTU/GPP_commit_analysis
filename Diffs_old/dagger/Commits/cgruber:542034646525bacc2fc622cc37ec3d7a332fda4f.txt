diff --git a/compiler/src/it/functional-tests/src/main/java/test/cycle/Cycles.java b/compiler/src/it/functional-tests/src/main/java/test/cycle/Cycles.java
index db4b6b5e2..b78c4e76a 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/cycle/Cycles.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/cycle/Cycles.java
@@ -30,13 +30,15 @@
 
 /**
  * Cycle classes used for testing cyclic dependencies.
- * A <- (E <- D <- B <- C <- Provider<A>, Lazy<A>), (B <- C <- Provider<A>, Lazy<A>)
- * S <- Provider<S>, Lazy<S>
+ *
+ * <pre>
+ * {@literal A ← (E ← D ← B ← C ← Provider<A>, Lazy<A>), (B ← C ← Provider<A>, Lazy<A>)}
+ * {@literal S ← Provider<S>, Lazy<S>}
+ * </pre>
  *
  * @author Tony Bentancur
  * @since 2.0
  */
-
 final class Cycles {
   private Cycles() {}
 
diff --git a/compiler/src/it/guava-functional-tests/src/main/java/test/optional/OptionalBindingComponents.java b/compiler/src/it/guava-functional-tests/src/main/java/test/optional/OptionalBindingComponents.java
index d130a5e6e..33d6918b9 100644
--- a/compiler/src/it/guava-functional-tests/src/main/java/test/optional/OptionalBindingComponents.java
+++ b/compiler/src/it/guava-functional-tests/src/main/java/test/optional/OptionalBindingComponents.java
@@ -31,11 +31,7 @@
 import javax.inject.Provider;
 import javax.inject.Qualifier;
 
-/**
- * Classes to support {@link OptionalBindingComponentsPresentTest}, {@link
- * OptionalBindingComponentsAbsentTest} and {@link
- * test.optional.a.OptionalBindingComponentsWithInaccessibleTypesTest}.
- */
+/** Classes to support testing {@code BindsOptionalOf} functionality. */
 public final class OptionalBindingComponents {
 
   /** A qualifier. */
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/binds/FooOfStrings.java b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/binds/FooOfStrings.java
index a0c89cd0f..1c0377b23 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/binds/FooOfStrings.java
+++ b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/binds/FooOfStrings.java
@@ -17,12 +17,11 @@
 package producerstest.binds;
 
 /**
- * This is not marked with {@link javax.inject.Inject @Inject} (like the {@link dagger.Provides
- * @Provides} version in {@link test.bind.FooOfStrings}), to test that {@link dagger.Binds @Binds}
- * properly translate to {@link dagger.internal.codegen.ProductionBinding}s when the right-hand-side
- * of the method is also a production binding. We force this by adding a {@link
- * dagger.producers.Produces @Produces} method to add it to the graph instead of relying on the
- * {@link dagger.internal.codegen.ProvisionBinding} that would be created by default with an {@code
- * @Inject} constructor.
+ * This is not marked with {@link javax.inject.Inject @Inject} in order to test that {@link
+ * dagger.Binds @Binds} properly translate to {@link dagger.internal.codegen.ProductionBinding}s
+ * when the right-hand-side of the method is also a production binding. We force this by adding a
+ * {@link dagger.producers.Produces @Produces} method to add it to the graph instead of relying on
+ * the {@link dagger.internal.codegen.ProvisionBinding} that would be created by default with an
+ * {@code @Inject} constructor.
  */
 final class FooOfStrings implements Foo<String> {}
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/optional/OptionalBindingComponents.java b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/optional/OptionalBindingComponents.java
index 60d31bb20..743b033e1 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/optional/OptionalBindingComponents.java
+++ b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/optional/OptionalBindingComponents.java
@@ -34,12 +34,10 @@
 import java.lang.annotation.Retention;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;
+import javax.inject.Provider;
 import javax.inject.Qualifier;
 
-/**
- * Classes to support {@link OptionalBindingComponentsAbsentTest} and {@link
- * OptionalBindingComponentsPresentTest}.
- */
+/** Classes to support testing {@code BindsOptionalOf} functionality. */
 final class OptionalBindingComponents {
 
   /** A qualifier. */
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
index 780065368..4147c84a9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -164,9 +164,8 @@ ResolvedRequest current() {
     }
 
     /**
-     * {@code true} if there is a dependency cycle, which means that the
-     * {@linkplain #currentDependencyRequest() current request}'s binding key occurs earlier in the
-     * path.
+     * {@code true} if there is a dependency cycle, which means that the current request's binding
+     * key occurs earlier in the path.
      */
     boolean hasCycle() {
       return keyPath.count(current().dependencyRequest().bindingKey()) > 1;
@@ -174,8 +173,7 @@ boolean hasCycle() {
 
     /**
      * If there is a cycle, the segment of the path that represents the cycle. The first request's
-     * and the last request's binding keys are equal. The last request is the {@linkplain
-     * #currentDependencyRequest() current request}.
+     * and the last request's binding keys are equal. The last request is the current request.
      *
      * @throws IllegalStateException if {@link #hasCycle()} is {@code false}
      */
@@ -206,8 +204,8 @@ void pop() {
     }
 
     /**
-     * Adds the {@linkplain #currentDependencyRequest() current request} to a set of visited
-     * requests, and returns {@code true} if the set didn't already contain it.
+     * Adds the current request to a set of visited requests, and returns {@code true} if the set
+     * didn't already contain it.
      */
     boolean visitCurrentDependencyRequest() {
       return resolvedDependencyRequests.add(current().dependencyRequest());
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingMethodValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingMethodValidator.java
index abe98cff0..89be40108 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingMethodValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingMethodValidator.java
@@ -460,7 +460,7 @@ private ExceptionSuperclass(Class<? extends Exception> superclass, String errorM
      * Adds an error if the method declares throws anything but an {@link Error} or an appropriate
      * subtype of {@link Exception}.
      *
-     * <p>This method is overridden in {@link #NONE}.
+     * <p>This method is overridden in {@link #NO_EXCEPTIONS}.
      */
     protected void checkThrows(
         BindingMethodValidator validator, ValidationReport.Builder<ExecutableElement> builder) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
index 970db28dd..3c44f06a9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -294,7 +294,7 @@ private static void addTransitiveModules(
   /**
    * All {@linkplain Subcomponent direct child} components that are declared by an entry point
    * method. This is equivalent to the set of values from {@link #subcomponentsByFactoryMethod()}
-   * and {@link #subcomponentsByBuilderMethod().
+   * and {@link #subcomponentsByBuilderMethod()}.
    */
   ImmutableSet<ComponentDescriptor> subcomponentsFromEntryPoints() {
     return ImmutableSet.<ComponentDescriptor>builder()
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java
index 3d4f062d6..46b07dce3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -188,9 +188,10 @@ private void generateComponent(BindingGraph bindingGraph) {
 
   /**
    * Returns true if the component's report is clean, its builder report is clean, and all
-   * referenced subcomponent reports & subcomponent builder reports are clean.
+   * referenced subcomponent reports and subcomponent builder reports are clean.
    */
-  private boolean isClean(ComponentValidationReport report,
+  private boolean isClean(
+      ComponentValidationReport report,
       Map<Element, ValidationReport<TypeElement>> builderReportsByComponent,
       Map<Element, ValidationReport<TypeElement>> reportsBySubcomponent,
       Map<Element, ValidationReport<TypeElement>> builderReportsBySubcomponent) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyRequestFormatter.java b/compiler/src/main/java/dagger/internal/codegen/DependencyRequestFormatter.java
index 3848f6727..3ed9fc84b 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DependencyRequestFormatter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DependencyRequestFormatter.java
@@ -78,9 +78,8 @@
   }
 
   /**
-   * A string representation of the dependency trace, starting with the
-   * {@linkplain DependencyPath#currentDependencyRequest() current request} and ending with the
-   * entry point, excluding {@linkplain DependencyRequest#isSynthetic() synthetic} requests.
+   * A string representation of the dependency trace, starting with the current request and ending
+   * with the entry point.
    */
   String toDependencyTrace(DependencyPath dependencyPath) {
     return Joiner.on('\n')
diff --git a/compiler/src/main/java/dagger/internal/codegen/Formatter.java b/compiler/src/main/java/dagger/internal/codegen/Formatter.java
index da3cb4789..ce1a292f8 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Formatter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Formatter.java
@@ -38,16 +38,16 @@
   public abstract String format(T object);
 
   /**
-   * Performs the transformation of an object into a string representation in
-   * conformity with the {@link Function}{@code <T, String>} contract, delegating
-   * to {@link #format(Object)}.
+   * Performs the transformation of an object into a string representation in conformity with the
+   * {@link Function}{@code <T, String>} contract, delegating to {@link #format(Object)}.
    *
-   * @deprecated Call {@link #format(T)} instead.  This method exists to make
-   * formatters easy to use when functions are required, but shouldn't be called directly.
+   * @deprecated Call {@link #format(Object)} instead. This method exists to make formatters easy to
+   *     use when functions are required, but shouldn't be called directly.
    */
   @SuppressWarnings("javadoc")
   @Deprecated
-  @Override final public String apply(T object) {
+  @Override
+  public final String apply(T object) {
     return format(object);
   }
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/Key.java b/compiler/src/main/java/dagger/internal/codegen/Key.java
index f1c004813..cefb4c9a0 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Key.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Key.java
@@ -109,9 +109,9 @@
    * #qualifier()}.
    *
    * <p>Each multibound map and set has a {@linkplain
-   * ProvisionBinding.Factory#syntheticMultibinding(DependencyRequest, Iterable) synthetic
-   * multibinding} that depends on the specific contributions to that map or set using keys that
-   * identify those multibinding contributions.
+   * ProvisionBinding.Factory#syntheticMultibinding(Key, Iterable) synthetic multibinding} that
+   * depends on the specific contributions to that map or set using keys that identify those
+   * multibinding contributions.
    *
    * <p>Absent except for multibinding contributions.
    */
@@ -281,7 +281,7 @@ public Boolean visitDeclared(DeclaredType type, Void ignored) {
    * {@inheritDoc}
    *
    * <p>The returned string is equal to another key's if and only if this key is {@link
-   * #equal(Object)} to it.
+   * #equals(Object)} to it.
    */
   @Override
   public String toString() {
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
index 24404c6aa..d6c73f0c9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
@@ -176,7 +176,7 @@ boolean hasInjectedMembers(DeclaredType declaredType) {
 
     /**
      * Returns a MembersInjectionBinding for the given type. If {@code resolvedType} is present,
-     * this will return a resolved binding, with the key & type resolved to the given type (using
+     * this will return a resolved binding, with the key and type resolved to the given type (using
      * {@link Types#asMemberOf(DeclaredType, Element)}).
      */
     MembersInjectionBinding forInjectedType(
diff --git a/compiler/src/main/java/dagger/internal/codegen/ModuleValidator.java b/compiler/src/main/java/dagger/internal/codegen/ModuleValidator.java
index 51e85504c..131b1f925 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ModuleValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ModuleValidator.java
@@ -247,7 +247,7 @@ private void validateReferencedModules(
   }
 
   /**
-   * Used by {@link ModuleValidator} & {@link ComponentValidator} to validate referenced modules.
+   * Used by {@link ModuleValidator} and {@link ComponentValidator} to validate referenced modules.
    */
   void validateReferencedModules(
       final TypeElement subject,
diff --git a/compiler/src/main/java/dagger/internal/codegen/MultibindingAnnotationsProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/MultibindingAnnotationsProcessingStep.java
index 26a4a36f2..61bb5ccfb 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MultibindingAnnotationsProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MultibindingAnnotationsProcessingStep.java
@@ -38,8 +38,8 @@
 import javax.tools.Diagnostic.Kind;
 
 /**
- * Processing step which verifies that {@link IntoSet @IntoSet}, {@link ElementsIntoSet
- * @ElementsIntoSet} and {@link IntoMap @IntoMap} are not present on invalid elements.
+ * Processing step that verifies that {@link IntoSet}, {@link ElementsIntoSet} and {@link IntoMap}
+ * are not present on invalid elements.
  */
 final class MultibindingAnnotationsProcessingStep implements ProcessingStep {
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/MultibindsMethodValidator.java b/compiler/src/main/java/dagger/internal/codegen/MultibindsMethodValidator.java
index fc0ace9ff..35ae26c00 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MultibindsMethodValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MultibindsMethodValidator.java
@@ -35,10 +35,7 @@
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
-/**
- * A validator for {@link Multibinds @Multibinds} methods or methods in {@link Multibindings
- * @Multibindings} interfaces.
- */
+/** A validator for {@link Multibinds} methods or methods in {@link Multibindings} interfaces. */
 class MultibindsMethodValidator extends BindingMethodValidator {
 
   /** Creates a validator for {@link Multibinds @Multibinds} methods. */
diff --git a/compiler/src/main/java/dagger/internal/codegen/OptionalFactories.java b/compiler/src/main/java/dagger/internal/codegen/OptionalFactories.java
index 989da3fae..864e620f5 100644
--- a/compiler/src/main/java/dagger/internal/codegen/OptionalFactories.java
+++ b/compiler/src/main/java/dagger/internal/codegen/OptionalFactories.java
@@ -96,7 +96,7 @@ CodeBlock absentOptionalProvider(ContributionBinding binding) {
   }
 
   /**
-   * Creates a method specification for a {@link Provider<Optional<T>>} that always returns an
+   * Creates a method specification for a {@code Provider<Optional<T>>} that always returns an
    * absent value.
    */
   private MethodSpec absentOptionalProviderMethod(OptionalKind optionalKind) {
@@ -122,7 +122,7 @@ private MethodSpec absentOptionalProviderMethod(OptionalKind optionalKind) {
   }
 
   /**
-   * Creates a field specification for a {@link Provider<Optional<T>>} that always returns an absent
+   * Creates a field specification for a {@code Provider<Optional<T>>} that always returns an absent
    * value.
    */
   private FieldSpec absentOptionalProviderField(OptionalKind optionalKind) {
@@ -295,7 +295,7 @@ private TypeSpec presentOptionalFactoryClass(PresentFactorySpec spec) {
         .addModifiers(PRIVATE, STATIC, FINAL)
         .addSuperinterface(spec.factoryType())
         .addJavadoc(
-            "A {@link $T} that uses a delegate {@code $T}.", spec.factoryType(), delegateField.type)
+            "A {@code $T} that uses a delegate {@code $T}.", spec.factoryType(), delegateField.type)
         .addField(delegateField)
         .addMethod(
             constructorBuilder()
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java b/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
index d913c4351..c3a3e88ea 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
@@ -115,11 +115,11 @@ private static Builder builder() {
 
     /**
      * Returns a ProvisionBinding for the given element. If {@code resolvedType} is present, this
-     * will return a resolved binding, with the key & type resolved to the given type (using
+     * will return a resolved binding, with the key and type resolved to the given type (using
      * {@link Types#asMemberOf(DeclaredType, Element)}).
      */
-    ProvisionBinding forInjectConstructor(ExecutableElement constructorElement,
-        Optional<TypeMirror> resolvedType) {
+    ProvisionBinding forInjectConstructor(
+        ExecutableElement constructorElement, Optional<TypeMirror> resolvedType) {
       checkNotNull(constructorElement);
       checkArgument(constructorElement.getKind().equals(CONSTRUCTOR));
       checkArgument(isAnnotationPresent(constructorElement, Inject.class));
diff --git a/compiler/src/main/java/dagger/internal/codegen/UnwrappedMapKeyGenerator.java b/compiler/src/main/java/dagger/internal/codegen/UnwrappedMapKeyGenerator.java
index 47a6293a0..86f8d84b9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/UnwrappedMapKeyGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/UnwrappedMapKeyGenerator.java
@@ -37,7 +37,7 @@
  *   }
  *
  *   {@literal @interface} Bar {
- *     Class<?> baz();
+ *     {@literal Class<?> baz();}
  *   }
  * </pre>
  *
@@ -47,7 +47,7 @@
  *   public final class FooCreator {
  *     private FooCreator() {}
  *
- *     public static Bar createBar(Class<?> baz) { … }
+ *     public static Bar createBar({@literal Class<?> baz}) { … }
  *   }
  * </pre>
  */
diff --git a/pom.xml b/pom.xml
index 692b49b02..8df415f51 100644
--- a/pom.xml
+++ b/pom.xml
@@ -198,6 +198,7 @@
           <windowtitle>Dagger Dependency Injection ${project.version} API</windowtitle>
           <doctitle>Dagger Dependency Injection ${project.version} API</doctitle>
           <docfilessubdirs>true</docfilessubdirs>
+          <additionalparam>-Xdoclint:html,reference,syntax</additionalparam>
         </configuration>
       </plugin>
     </plugins>
