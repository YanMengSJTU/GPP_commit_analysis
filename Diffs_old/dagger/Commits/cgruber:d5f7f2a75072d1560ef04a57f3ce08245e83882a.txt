diff --git a/java/dagger/internal/codegen/SingleCheckedMethodImplementation.java b/java/dagger/internal/codegen/SingleCheckedMethodImplementation.java
index 6fd39f6a5..a84f979c9 100644
--- a/java/dagger/internal/codegen/SingleCheckedMethodImplementation.java
+++ b/java/dagger/internal/codegen/SingleCheckedMethodImplementation.java
@@ -83,18 +83,26 @@ private FieldSpec createField() {
                 ? BindingVariableNamer.name(binding)
                 : FrameworkField.forResolvedBindings(resolvedBindings, Optional.empty()).name());
 
-    FieldSpec field =
-        // Nullable instances use `MemoizedSentinel` instead of `null` as the initialization value.
-        isNullable()
-            ? FieldSpec.builder(TypeName.OBJECT, name, PRIVATE, VOLATILE)
-                .initializer("new $T()", MemoizedSentinel.class)
-                .build()
-            : FieldSpec.builder(TypeName.get(returnType()), name, PRIVATE, VOLATILE).build();
+    FieldSpec.Builder builder = FieldSpec.builder(fieldType(), name, PRIVATE, VOLATILE);
+    if (isNullable()) {
+      builder.initializer("new $T()", MemoizedSentinel.class);
+    }
 
+    FieldSpec field = builder.build();
     generatedComponentModel.addField(PRIVATE_METHOD_SCOPED_FIELD, field);
     return field;
   }
 
+  private TypeName fieldType() {
+    if (isNullable()) {
+      // Nullable instances use `MemoizedSentinel` instead of `null` as the initialization value, so
+      // the field type must accept that and the return type
+      return TypeName.OBJECT;
+    }
+    TypeName returnType = TypeName.get(returnType());
+    return returnType.isPrimitive() ? returnType.box() : returnType;
+  }
+
   private boolean isNullable() {
     return requestKind.equals(INSTANCE) && binding.isNullable();
   }
diff --git a/javatests/dagger/functional/ComponentWithReusableBindings.java b/javatests/dagger/functional/ComponentWithReusableBindings.java
index 17484c68a..cd5408626 100644
--- a/javatests/dagger/functional/ComponentWithReusableBindings.java
+++ b/javatests/dagger/functional/ComponentWithReusableBindings.java
@@ -39,6 +39,9 @@
 
   ChildTwo childTwo();
 
+  // b/77150738
+  int primitive();
+
   @Subcomponent
   interface ChildOne {
     @InParent
@@ -72,5 +75,12 @@ static Object inParent() {
     static Object inChildren() {
       return new Object();
     }
+
+    // b/77150738
+    @Provides
+    @Reusable
+    static int primitive() {
+      return 0;
+    }
   }
 }
