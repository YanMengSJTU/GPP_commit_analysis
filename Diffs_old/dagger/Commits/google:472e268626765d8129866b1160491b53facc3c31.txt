diff --git a/java/dagger/internal/codegen/FactoryGenerator.java b/java/dagger/internal/codegen/FactoryGenerator.java
index de5a8a7c0..58833b79e 100644
--- a/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/java/dagger/internal/codegen/FactoryGenerator.java
@@ -30,6 +30,7 @@
 import static dagger.internal.codegen.GwtCompatibility.gwtIncompatibleAnnotation;
 import static dagger.internal.codegen.SourceFiles.bindingTypeElementTypeVariableNames;
 import static dagger.internal.codegen.SourceFiles.frameworkFieldUsages;
+import static dagger.internal.codegen.SourceFiles.frameworkTypeUsageStatement;
 import static dagger.internal.codegen.SourceFiles.generateBindingFieldsForDependencies;
 import static dagger.internal.codegen.SourceFiles.generatedClassNameForBinding;
 import static dagger.internal.codegen.SourceFiles.parameterizedGeneratedTypeNameForBinding;
@@ -116,7 +117,7 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
     factoryBuilder.addMethod(getMethod(binding));
     addCreateMethod(binding, factoryBuilder);
 
-    ProvisionMethod.create(binding, compilerOptions).ifPresent(factoryBuilder::addMethod);
+    factoryBuilder.addMethod(ProvisionMethod.create(binding, compilerOptions));
     gwtIncompatibleAnnotation(binding).ifPresent(factoryBuilder::addAnnotation);
 
     return factoryBuilder;
@@ -223,24 +224,21 @@ private MethodSpec getMethod(ProvisionBinding binding) {
             frameworkFieldUsages(binding.provisionDependencies(), frameworkFields).values());
 
     if (binding.kind().equals(PROVISION)) {
-      // TODO(dpb): take advantage of the code in InjectionMethods so this doesn't have to be
-      // duplicated
       binding
           .nullableType()
           .ifPresent(nullableType -> CodeBlocks.addAnnotation(getMethodBuilder, nullableType));
-      CodeBlock methodCall =
-          CodeBlock.of(
-              "$L.$L($L)",
-              binding.requiresModuleInstance()
-                  ? "module"
-                  : CodeBlock.of("$T", ClassName.get(binding.bindingTypeElement().get())),
-              binding.bindingElement().get().getSimpleName(),
-              parametersCodeBlock);
       getMethodBuilder.addStatement(
           "return $L",
-          binding.shouldCheckForNull(compilerOptions)
-              ? checkNotNullProvidesMethod(methodCall)
-              : methodCall);
+          ProvisionMethod.invoke(
+              binding,
+              request ->
+                  frameworkTypeUsageStatement(
+                      CodeBlock.of("$N", frameworkFields.get(request.key())), request.kind()),
+              nameGeneratedType(binding),
+              binding.requiresModuleInstance()
+                  ? Optional.of(CodeBlock.of("module"))
+                  : Optional.empty(),
+              compilerOptions));
     } else if (!binding.injectionSites().isEmpty()) {
       CodeBlock instance = CodeBlock.of("instance");
       getMethodBuilder
diff --git a/java/dagger/internal/codegen/InjectionMethods.java b/java/dagger/internal/codegen/InjectionMethods.java
index 8e829baa5..5d6e0c0ac 100644
--- a/java/dagger/internal/codegen/InjectionMethods.java
+++ b/java/dagger/internal/codegen/InjectionMethods.java
@@ -112,25 +112,19 @@
 
     /**
      * Returns a method that invokes the binding's {@linkplain ProvisionBinding#bindingElement()
-     * constructor} and injects the instance's members, if necessary. If {@link
-     * #shouldCreateInjectionMethod(ProvisionBinding, CompilerOptions)} no method is necessary},
-     * then {@link Optional#empty()} is returned.
+     * constructor} and injects the instance's members.
      */
-    static Optional<MethodSpec> create(ProvisionBinding binding, CompilerOptions compilerOptions) {
-      if (!shouldCreateInjectionMethod(binding, compilerOptions)) {
-        return Optional.empty();
-      }
+    static MethodSpec create(ProvisionBinding binding, CompilerOptions compilerOptions) {
       ExecutableElement element = MoreElements.asExecutable(binding.bindingElement().get());
       switch (element.getKind()) {
         case CONSTRUCTOR:
-          return Optional.of(constructorProxy(element));
+          return constructorProxy(element);
         case METHOD:
-          return Optional.of(
-              methodProxy(
-                  element,
-                  methodName(element),
-                  ReceiverAccessibility.IGNORE,
-                  CheckNotNullPolicy.get(binding, compilerOptions)));
+          return methodProxy(
+              element,
+              methodName(element),
+              ReceiverAccessibility.IGNORE,
+              CheckNotNullPolicy.get(binding, compilerOptions));
         default:
           throw new AssertionError(element);
       }
@@ -152,7 +146,7 @@ static CodeBlock invoke(
           injectionMethodArguments(
               binding.provisionDependencies(), dependencyUsage, requestingClass));
       return callInjectionMethod(
-          create(binding, compilerOptions).get().name,
+          create(binding, compilerOptions).name,
           arguments.build(),
           generatedClassNameForBinding(binding),
           requestingClass);
@@ -192,11 +186,6 @@ static boolean requiresInjectionMethod(
           .anyMatch(type -> !isRawTypeAccessible(type, callingPackage));
     }
 
-    private static boolean shouldCreateInjectionMethod(
-        ProvisionBinding binding, CompilerOptions compilerOptions) {
-      return requiresInjectionMethod(binding, compilerOptions, "dagger.should.never.exist");
-    }
-
     /**
      * Returns the name of the {@code static} method that wraps {@code method}. For methods that are
      * associated with {@code @Inject} constructors, the method will also inject all {@link
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index 0d858ed01..038d33cb6 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -2553,8 +2553,7 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "    implements Factory<String> {",
                 "  @Override",
                 "  public String get() {",
-                "    return Preconditions.checkNotNull(",
-                "        TestModule.nonNullableString(), " + NPE_FROM_PROVIDES_METHOD + ");",
+                "    return proxyNonNullableString();",
                 "  }",
                 "",
                 "  public static String proxyNonNullableString() {",
@@ -2646,7 +2645,7 @@ public void nullCheckingIgnoredWhenProviderReturnsPrimitive() {
                 "",
                 "  @Override",
                 "  public Integer get() {",
-                "    return TestModule.primitiveInteger();",
+                "    return proxyPrimitiveInteger();",
                 "  }",
                 "",
                 "  public static int proxyPrimitiveInteger() {",
diff --git a/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index 3aa583787..34adab965 100644
--- a/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -266,7 +266,7 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public String get() {",
-            "    return Preconditions.checkNotNull(module.provideString(), " + NPE_LITERAL + ");",
+            "    return proxyProvideString(module);",
             "  }",
             "",
             "  public static TestModule_ProvideStringFactory create(TestModule module) {",
@@ -313,7 +313,7 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public String get() {",
-            "    return module.provideString();",
+            "    return proxyProvideString(module);",
             "  }",
             "",
             "  public static TestModule_ProvideStringFactory create(TestModule module) {",
@@ -361,7 +361,7 @@ public void providesMethodReturnsProduced() {
             "  @Override",
             "  @Nullable",
             "  public String get() {",
-            "    return module.provideString();",
+            "    return proxyProvideString(module);",
             "  }",
             "",
             "  public static TestModule_ProvideStringFactory create(TestModule module) {",
@@ -459,10 +459,8 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public List<Object> get() {",
-            "    return Preconditions.checkNotNull(",
-            "        module.provideObjects(",
-            "            aProvider.get(), bProvider.get(), xInjectorProvider.get()),",
-            "             " + NPE_LITERAL + ");",
+            "    return proxyProvideObjects(",
+            "        module, aProvider.get(), bProvider.get(), xInjectorProvider.get());",
             "  }",
             "",
             "  public static TestModule_ProvideObjectsFactory create(",
@@ -520,7 +518,7 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public String get() {",
-            "    return Preconditions.checkNotNull(module.provideString(), " + NPE_LITERAL + ");",
+            "    return proxyProvideString(module);",
             "  }",
             "",
             "  public static TestModule_ProvideStringFactory create(TestModule module) {",
@@ -574,8 +572,7 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public List<List<?>> get() {",
-            "    return Preconditions.checkNotNull(",
-            "        module.provideWildcardList(), " + NPE_LITERAL + ");",
+            "    return proxyProvideWildcardList(module);",
             "  }",
             "",
             "  public static TestModule_ProvideWildcardListFactory create(TestModule module) {",
@@ -627,7 +624,7 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public Set<String> get() {",
-            "    return Preconditions.checkNotNull(module.provideStrings(), " + NPE_LITERAL + ");",
+            "    return proxyProvideStrings(module);",
             "  }",
             "",
             "  public static TestModule_ProvideStringsFactory create(TestModule module) {",
@@ -921,8 +918,7 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public List<B> get() {  ",
-            "    return Preconditions.checkNotNull(module.provideListB(bProvider.get()),",
-            "        " + NPE_LITERAL + ");",
+            "    return proxyProvideListB(module, bProvider.get());",
             "  }",
             "",
             "  public static <A extends CharSequence, B, C extends Number & Comparable<C>>",
@@ -932,8 +928,7 @@ public void genericSubclassedModule() {
             "  }",
             "",
             "  public static <A extends CharSequence, B, C extends Number & Comparable<C>> List<B>",
-            "      proxyProvideListB(",
-            "          ParentModule<A, B, C> instance, B b) {",
+            "      proxyProvideListB(ParentModule<A, B, C> instance, B b) {",
             "    return Preconditions.checkNotNull(instance.provideListB(b), " + NPE_LITERAL + ");",
             "  }",
             "}");
@@ -961,8 +956,7 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public B get() {  ",
-            "    return Preconditions.checkNotNull(",
-            "        module.provideBElement(bProvider.get()), " + NPE_LITERAL + ");",
+            "    return proxyProvideBElement(module, bProvider.get());",
             "  }",
             "",
             "  public static <A extends CharSequence, B, C extends Number & Comparable<C>>",
@@ -1002,8 +996,7 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public B get() {  ",
-            "    return Preconditions.checkNotNull(module.provideBEntry(bProvider.get()), ",
-            "        " + NPE_LITERAL + ");",
+            "    return proxyProvideBEntry(module, bProvider.get());",
             "  }",
             "",
             "  public static <A extends CharSequence, B, C extends Number & Comparable<C>>",
@@ -1039,7 +1032,7 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public Number get() {  ",
-            "    return Preconditions.checkNotNull(module.provideNumber(), " + NPE_LITERAL + ");",
+            "    return proxyProvideNumber(module);",
             "  }",
             "",
             "  public static ChildNumberModule_ProvideNumberFactory create(",
@@ -1071,7 +1064,7 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public Integer get() {  ",
-            "    return Preconditions.checkNotNull(module.provideInteger(), " + NPE_LITERAL + ");",
+            "    return proxyProvideInteger(module);",
             "  }",
             "",
             "  public static ChildIntegerModule_ProvideIntegerFactory create(",
@@ -1142,8 +1135,7 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public Map<String, Number> get() {",
-            "    return Preconditions.checkNotNull(ParameterizedModule.provideMapStringNumber(),",
-            "        " + NPE_LITERAL + ");",
+            "    return proxyProvideMapStringNumber();",
             "  }",
             "",
             "  public static ParameterizedModule_ProvideMapStringNumberFactory create() {",
@@ -1173,8 +1165,7 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public Object get() {",
-            "    return Preconditions.checkNotNull(ParameterizedModule.provideNonGenericType(),",
-            "        " + NPE_LITERAL + ");",
+            "    return proxyProvideNonGenericType();",
             "  }",
             "",
             "  public static ParameterizedModule_ProvideNonGenericTypeFactory create() {",
@@ -1209,9 +1200,7 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public String get() {",
-            "    return Preconditions.checkNotNull(",
-            "        ParameterizedModule.provideNonGenericTypeWithDeps(oProvider.get()),",
-            "        " + NPE_LITERAL + ");",
+            "    return proxyProvideNonGenericTypeWithDeps(oProvider.get());",
             "  }",
             "",
             "  public static ParameterizedModule_ProvideNonGenericTypeWithDepsFactory create(",
