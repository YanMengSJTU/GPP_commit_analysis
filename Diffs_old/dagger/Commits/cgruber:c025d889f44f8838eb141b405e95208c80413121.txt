diff --git a/javatests/dagger/functional/cycle/CycleTest.java b/javatests/dagger/functional/cycle/CycleTest.java
index 2e3d0c94c..d489bc65f 100644
--- a/javatests/dagger/functional/cycle/CycleTest.java
+++ b/javatests/dagger/functional/cycle/CycleTest.java
@@ -19,6 +19,7 @@
 import static com.google.common.truth.Truth.assertThat;
 
 import dagger.functional.cycle.Cycles.A;
+import dagger.functional.cycle.Cycles.BindsCycleComponent;
 import dagger.functional.cycle.Cycles.C;
 import dagger.functional.cycle.Cycles.ChildCycleComponent;
 import dagger.functional.cycle.Cycles.CycleComponent;
@@ -89,4 +90,14 @@ public void providerMapIndirectionCycle() {
     assertThat(cycleMapComponent.y().mapOfProvidersOfY.get("Y").get().mapOfProvidersOfY).hasSize(1);
     assertThat(cycleMapComponent.y().mapOfProvidersOfY).hasSize(1);
   }
+
+  /**
+   * Tests that a cycle where a {@code @Binds} binding depends on a binding that has to be deferred
+   * works.
+   */
+  @Test
+  public void cycleWithDeferredBinds() {
+    BindsCycleComponent bindsCycleComponent = DaggerCycles_BindsCycleComponent.create();
+    assertThat(bindsCycleComponent.bar()).isNotNull();
+  }
 }
diff --git a/javatests/dagger/functional/cycle/Cycles.java b/javatests/dagger/functional/cycle/Cycles.java
index 2f4cd28f4..488f5a0d0 100644
--- a/javatests/dagger/functional/cycle/Cycles.java
+++ b/javatests/dagger/functional/cycle/Cycles.java
@@ -172,4 +172,26 @@ static Object provideObjectWithCycle(@SuppressWarnings("unused") Provider<Object
     @SuppressWarnings("dependency-cycle")
     Object object();
   }
+
+  interface Foo {}
+
+  static class Bar implements Foo {
+    @Inject
+    Bar(Provider<Foo> fooProvider) {}
+  }
+
+  /**
+   * A component with a cycle in which a {@code @Binds} binding depends on the binding that has to
+   * be deferred.
+   */
+  @Component(modules = BindsCycleModule.class)
+  interface BindsCycleComponent {
+    Bar bar();
+  }
+
+  @Module
+  abstract static class BindsCycleModule {
+    @Binds
+    abstract Foo foo(Bar bar);
+  }
 }
