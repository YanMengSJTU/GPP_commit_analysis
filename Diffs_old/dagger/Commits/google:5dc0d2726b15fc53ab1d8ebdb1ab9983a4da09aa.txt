diff --git a/compiler/src/main/java/dagger/internal/codegen/AnnotationMirrors.java b/compiler/src/main/java/dagger/internal/codegen/AnnotationMirrors.java
index f7b67d6fd..2588d6157 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AnnotationMirrors.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AnnotationMirrors.java
@@ -17,10 +17,10 @@
 
 import com.google.auto.common.MoreTypes;
 import com.google.common.base.Equivalence;
-import com.google.common.base.Objects;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -76,16 +76,17 @@
       @Override protected boolean doEquivalent(AnnotationMirror left, AnnotationMirror right) {
         return MoreTypes.equivalence()
             .equivalent(left.getAnnotationType(), right.getAnnotationType())
-            && AnnotationValues.equivalence().pairwise().equivalent(
-                getAnnotationValuesWithDefaults(left),
-                getAnnotationValuesWithDefaults(right));
+                && AnnotationValues.equivalence().pairwise().equivalent(
+                    getAnnotationValuesWithDefaults(left),
+                    getAnnotationValuesWithDefaults(right));
       }
 
       @Override protected int doHash(AnnotationMirror annotation) {
         DeclaredType type = annotation.getAnnotationType();
         Iterable<AnnotationValue> annotationValues = getAnnotationValuesWithDefaults(annotation);
-        return Objects.hashCode(type,
-            AnnotationValues.equivalence().pairwise().hash(annotationValues));
+        return Arrays.hashCode(new int[] {
+            MoreTypes.equivalence().hash(type),
+            AnnotationValues.equivalence().pairwise().hash(annotationValues)});
       }
     };
 
@@ -95,8 +96,8 @@
    * states that instance/reference equality is not the proper test.
    *
    * Note: The contract of this equivalence is not quite that described in the javadoc, as
-   * hashcode values returned by {@link Equivalence#hash(T)} are not the same as would
-   * be returned from {@link AnnotationMirror#hashCode()}, though the proper invariants
+   * hash code values returned by {@link Equivalence#hash} are not the same as would
+   * be returned from {@link AnnotationMirror#hashCode}, though the proper invariants
    * relating hashCode() and equals() hold for {@code hash(T)} and {@code equivalent(T, T)}.
    */
   static Equivalence<AnnotationMirror> equivalence() {
diff --git a/compiler/src/main/java/dagger/internal/codegen/AnnotationValues.java b/compiler/src/main/java/dagger/internal/codegen/AnnotationValues.java
index 4897ee6b4..d578180fe 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AnnotationValues.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AnnotationValues.java
@@ -15,10 +15,12 @@
  */
 package dagger.internal.codegen;
 
+import com.google.auto.common.MoreTypes;
 import com.google.common.base.Equivalence;
 import java.util.List;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.AnnotationValue;
+import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.SimpleAnnotationValueVisitor6;
 
 /**
@@ -67,6 +69,7 @@ public Boolean visitArray(List<? extends AnnotationValue> left, AnnotationValue
                       return false; // Not an annotation mirror, so can't be equal to such.
                     }
 
+                    @SuppressWarnings("unchecked") // safe covariant cast
                     @Override public Boolean visitArray(
                         List<? extends AnnotationValue> right ,
                         List<? extends AnnotationValue> left) {
@@ -75,6 +78,21 @@ public Boolean visitArray(List<? extends AnnotationValue> left, AnnotationValue
                     }
                   }, left);
             }
+
+            @Override
+            public Boolean visitType(TypeMirror left, AnnotationValue right) {
+              return right.accept(
+                  new SimpleAnnotationValueVisitor6<Boolean, TypeMirror>() {
+                    @Override protected Boolean defaultAction(
+                        Object ignored, TypeMirror alsoIgnored) {
+                      return false; // Not an annotation mirror, so can't be equal to such.
+                    }
+
+                    @Override public Boolean visitType(TypeMirror right, TypeMirror left) {
+                      return MoreTypes.equivalence().equivalent(left, right);
+                    }
+                  }, left);
+            }
           }, right);
         }
 
@@ -90,6 +108,10 @@ public Boolean visitArray(List<? extends AnnotationValue> left, AnnotationValue
               return AnnotationValues.equivalence().pairwise().hash((List<AnnotationValue>) values);
             }
 
+            @Override public Integer visitType(TypeMirror value, Void ignore) {
+              return MoreTypes.equivalence().hash(value);
+            }
+
             @Override protected Integer defaultAction(Object value, Void ignored) {
               return value.hashCode();
             }
diff --git a/compiler/src/test/java/dagger/internal/codegen/AnnotationMirrorsTest.java b/compiler/src/test/java/dagger/internal/codegen/AnnotationMirrorsTest.java
index ed870a474..fe8db4056 100644
--- a/compiler/src/test/java/dagger/internal/codegen/AnnotationMirrorsTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/AnnotationMirrorsTest.java
@@ -45,6 +45,11 @@
     this.elements = compilationRule.getElements();
   }
 
+  @interface SimpleAnnotation {}
+
+  @SimpleAnnotation class SimplyAnnotated {}
+  @SimpleAnnotation class AlsoSimplyAnnotated {}
+
   enum SimpleEnum{
     BLAH, FOO
   }
@@ -65,8 +70,6 @@
   @DefaultingOuter(BLAH) class TestWithDefaultingOuterBlah {}
   @DefaultingOuter(FOO) class TestWithDefaultingOuterFoo {}
 
-  @interface SimpleAnnotation {}
-
   @interface AnnotatedOuter {
     DefaultingOuter value();
   }
@@ -99,6 +102,10 @@
     EquivalenceTester<AnnotationMirror> tester =
         EquivalenceTester.of(AnnotationMirrors.equivalence());
 
+    tester.addEquivalenceGroup(
+        annotationOn(SimplyAnnotated.class),
+        annotationOn(AlsoSimplyAnnotated.class));
+
     tester.addEquivalenceGroup(
         annotationOn(TestClassBlah.class),
         annotationOn(TestClassBlah2.class));
