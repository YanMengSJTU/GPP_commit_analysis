diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponent.java
index e5247c4a1..96e4bcb1f 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponent.java
@@ -17,9 +17,12 @@
 
 import dagger.Subcomponent;
 import java.util.Set;
+import javax.inject.Provider;
 
 @Subcomponent(modules = ChildModule.class)
 interface ChildComponent {
+  Provider<UnscopedType> getUnscopedTypeProvider();
+
   RequiresSingleton requiresSingleton();
 
   Set<Object> objectSet();
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildComponent.java
index d1332a27c..388d66960 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildComponent.java
@@ -17,9 +17,13 @@
 
 import dagger.Subcomponent;
 import java.util.Set;
+import javax.inject.Provider;
 
 @Subcomponent(modules = GrandchildModule.class)
 interface GrandchildComponent {
+  Provider<UnscopedType> getUnscopedTypeProvider();
+
   RequiresSingleton requiresSingleton();
+
   Set<Object> objectSet();
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java
index 6bf9bd15a..ec9a79941 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java
@@ -17,11 +17,14 @@
 
 import dagger.Component;
 import java.util.Set;
+import javax.inject.Provider;
 import javax.inject.Singleton;
 
 @Component(modules = ParentModule.class)
 @Singleton
 interface ParentComponent {
+  Provider<UnscopedType> getUnscopedTypeProvider();
+
   SingletonType getSingletonType();
 
   Set<Object> objectSet();
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnscopedType.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnscopedType.java
new file mode 100644
index 000000000..89c00855f
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/UnscopedType.java
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.subcomponent;
+
+import javax.inject.Inject;
+
+final class UnscopedType {
+  @Inject UnscopedType(@SuppressWarnings("unused") SingletonType singletonType) {}
+}
diff --git a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentScopeTest.java b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentScopeTest.java
index 3d6079b22..3f75547ce 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentScopeTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentScopeTest.java
@@ -26,7 +26,7 @@
 @RunWith(JUnit4.class)
 public class SubcomponentScopeTest {
   @Test
-  public void testSingletonPropagatesUpward() {
+  public void singletonPropagatesUpward() {
     ParentComponent parentComponent = Dagger_ParentComponent.create();
     SingletonType singletonType = parentComponent.getSingletonType();
     assertThat(parentComponent.newChildComponent().requiresSingleton().singletonType())
@@ -38,7 +38,7 @@ public void testSingletonPropagatesUpward() {
   }
 
   @Test
-  public void testMultibindingContributions() {
+  public void multibindingContributions() {
     ParentComponent parentComponent = Dagger_ParentComponent.create();
     Set<Object> parentObjectSet = parentComponent.objectSet();
     assertThat(parentObjectSet).hasSize(2);
@@ -51,4 +51,15 @@ public void testMultibindingContributions() {
     assertThat(intersection(parentObjectSet, grandchildObjectSet)).hasSize(1);
     assertThat(intersection(childObjectSet, grandchildObjectSet)).hasSize(1);
   }
+
+  @Test
+  public void unscopedProviders() {
+    ParentComponent parentComponent = Dagger_ParentComponent.create();
+    assertThat(parentComponent.getUnscopedTypeProvider())
+        .isSameAs(parentComponent.newChildComponent().getUnscopedTypeProvider());
+    assertThat(parentComponent.getUnscopedTypeProvider())
+        .isSameAs(parentComponent.newChildComponent()
+            .newGrandchildComponent()
+            .getUnscopedTypeProvider());
+  }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index 362a21dfc..7d8e8e044 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -45,9 +45,9 @@
 import static com.google.auto.common.MoreElements.getAnnotationMirror;
 import static com.google.auto.common.MoreElements.isAnnotationPresent;
 import static com.google.common.base.Preconditions.checkState;
-import static dagger.internal.codegen.ComponentDescriptor.Kind.PRODUCTION_COMPONENT;
 import static dagger.internal.codegen.ComponentDescriptor.isComponentContributionMethod;
 import static dagger.internal.codegen.ComponentDescriptor.isComponentProductionMethod;
+import static dagger.internal.codegen.ComponentDescriptor.Kind.PRODUCTION_COMPONENT;
 import static dagger.internal.codegen.ConfigurationAnnotations.getComponentDependencies;
 import static dagger.internal.codegen.ConfigurationAnnotations.getComponentModules;
 import static dagger.internal.codegen.ConfigurationAnnotations.getTransitiveModules;
@@ -383,11 +383,28 @@ private BindingGraph create(Optional<RequestResolver> parentResolver,
         return explicitBindingsForKey.build();
       }
 
+      private Optional<ResolvedBindings> getPreviouslyResolvedBindings(
+          final BindingKey bindingKey) {
+        Optional<ResolvedBindings> result = Optional.fromNullable(resolvedBindings.get(bindingKey));
+        if (result.isPresent()) {
+          return result;
+        } else if (parentResolver.isPresent()) {
+          return parentResolver.get().getPreviouslyResolvedBindings(bindingKey);
+        } else {
+          return Optional.absent();
+        }
+      }
+
       void resolve(DependencyRequest request) {
         BindingKey bindingKey = BindingKey.forDependencyRequest(request);
 
-        ResolvedBindings previouslyResolvedBinding = resolvedBindings.get(bindingKey);
-        if (previouslyResolvedBinding != null) {
+        Optional<ResolvedBindings> previouslyResolvedBinding =
+            getPreviouslyResolvedBindings(bindingKey);
+        if (previouslyResolvedBinding.isPresent()
+            && !(bindingKey.kind().equals(BindingKey.Kind.CONTRIBUTION)
+                && !previouslyResolvedBinding.get().contributionBindings().isEmpty()
+                && ContributionBinding.bindingTypeFor(
+                    previouslyResolvedBinding.get().contributionBindings()).isMultibinding())) {
           return;
         }
 
@@ -402,7 +419,9 @@ void resolve(DependencyRequest request) {
           Optional<? extends ImmutableSet<? extends Binding>> bindings = lookUpBindings(request);
           if (bindings.isPresent()) {
             for (Binding binding : bindings.get()) {
-              resolveDependencies(binding.implicitDependencies());
+              for (DependencyRequest dependency : binding.implicitDependencies()) {
+                resolve(dependency);
+              }
             }
             resolvedBindings.put(bindingKey, ResolvedBindings.create(bindingKey, bindings.get()));
           }
@@ -410,12 +429,6 @@ void resolve(DependencyRequest request) {
           cycleStack.pop();
         }
       }
-
-      private void resolveDependencies(Iterable<DependencyRequest> dependencies) {
-        for (DependencyRequest dependency : dependencies) {
-          resolve(dependency);
-        }
-      }
     }
   }
 }
