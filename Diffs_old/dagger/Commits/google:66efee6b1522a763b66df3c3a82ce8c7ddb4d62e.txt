diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 7d1be6e76..4a2fe4505 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -351,7 +351,6 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
                       memberSelectSnippets, bindings);
               initializeMethod.body().addSnippet(DOUBLE_CHECK_FORMAT,
                   memberSelectSnippet, initializeMapSnippet, initLock.name());
-
             }
             break;
           case SINGULAR_BINDING:
diff --git a/compiler/src/main/java/dagger/internal/codegen/GraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/GraphValidator.java
index 0b564e059..b1cbdd136 100644
--- a/compiler/src/main/java/dagger/internal/codegen/GraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/GraphValidator.java
@@ -358,7 +358,8 @@ private void resolveRequest(DependencyRequest request,
         errorMessage.append(
             String.format(REQUIRES_AT_INJECT_CONSTRUCTOR_OR_PROVIDER_FORMAT, typeName));
       }
-      if (!bindingRegistry.getOrFindMembersInjectionBinding(key).injectionSites().isEmpty()) {
+      if (!key.qualifier().isPresent()
+          && !bindingRegistry.getOrFindMembersInjectionBinding(key).injectionSites().isEmpty()) {
         errorMessage.append(" ").append(ErrorMessages.MEMBERS_INJECTION_DOES_NOT_IMPLY_PROVISION);
       }
       dependencyPath = Queues.newArrayDeque(dependencyPath); // copy
@@ -378,16 +379,20 @@ private boolean isComponent(TypeMirror type) {
     return MoreElements.isAnnotationPresent(types.asElement(type), Component.class);
   }
 
-  private static boolean isComponentProvisionMethod(ExecutableElement method) {
+  private boolean isComponentProvisionMethod(ExecutableElement method) {
     return method.getParameters().isEmpty()
-        && !method.getReturnType().getKind().equals(VOID);
+        && !method.getReturnType().getKind().equals(VOID)
+        && !elements.getTypeElement(Object.class.getCanonicalName())
+            .equals(method.getEnclosingElement());
   }
 
-  private static boolean isComponentMembersInjectionMethod(ExecutableElement method) {
+  private boolean isComponentMembersInjectionMethod(ExecutableElement method) {
     List<? extends VariableElement> parameters = method.getParameters();
     TypeMirror returnType = method.getReturnType();
     return parameters.size() == 1
         && (returnType.getKind().equals(VOID)
-            || MoreTypes.equivalence().equivalent(returnType, parameters.get(0).asType()));
+            || MoreTypes.equivalence().equivalent(returnType, parameters.get(0).asType()))
+        && !elements.getTypeElement(Object.class.getCanonicalName())
+            .equals(method.getEnclosingElement());
   }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectBindingRegistry.java b/compiler/src/main/java/dagger/internal/codegen/InjectBindingRegistry.java
index a03e309c9..cb8e3ffdd 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectBindingRegistry.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectBindingRegistry.java
@@ -119,7 +119,9 @@ void registerMembersInjectionBinding(MembersInjectionBinding binding) {
 
   Optional<ProvisionBinding> getOrFindProvisionBinding(Key key) {
     checkNotNull(key);
-    checkArgument(!key.qualifier().isPresent());
+    if (key.qualifier().isPresent()) {
+      return Optional.absent();
+    }
     Optional<ProvisionBinding> binding = Optional.fromNullable(provisionBindingsByKey.get(key));
     if (binding.isPresent()) {
       return binding;
