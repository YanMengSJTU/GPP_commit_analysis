diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index e3258e575..f5f49ffd2 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -94,11 +94,14 @@ public synchronized void init(ProcessingEnvironment processingEnv) {
     MembersInjectorGenerator membersInjectorGenerator =
         new MembersInjectorGenerator(filer, elements, types);
     ComponentGenerator componentGenerator = new ComponentGenerator(filer);
+    ProducerFactoryGenerator producerFactoryGenerator = new ProducerFactoryGenerator(filer);
 
     DependencyRequest.Factory dependencyRequestFactory =
         new DependencyRequest.Factory(types, keyFactory);
     ProvisionBinding.Factory provisionBindingFactory =
         new ProvisionBinding.Factory(elements, types, keyFactory, dependencyRequestFactory);
+    ProductionBinding.Factory productionBindingFactory =
+        new ProductionBinding.Factory(elements, types, keyFactory, dependencyRequestFactory);
 
     MembersInjectionBinding.Factory membersInjectionBindingFactory =
         new MembersInjectionBinding.Factory(elements, types, keyFactory, dependencyRequestFactory);
@@ -148,7 +151,9 @@ public synchronized void init(ProcessingEnvironment processingEnv) {
         new ProducerModuleProcessingStep(
             messager,
             producerModuleValidator,
-            producesMethodValidator));
+            producesMethodValidator,
+            productionBindingFactory,
+            producerFactoryGenerator));
   }
 
   @Override
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
new file mode 100644
index 000000000..f8784d6be
--- /dev/null
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -0,0 +1,115 @@
+/*
+ * Copyright (C) 2014 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.internal.codegen;
+
+import com.google.auto.common.MoreTypes;
+import com.google.common.base.Optional;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.util.concurrent.ListenableFuture;
+import dagger.Provides.Type;
+import dagger.internal.codegen.writer.ClassName;
+import dagger.internal.codegen.writer.ClassWriter;
+import dagger.internal.codegen.writer.ConstructorWriter;
+import dagger.internal.codegen.writer.JavaWriter;
+import dagger.internal.codegen.writer.MethodWriter;
+import dagger.internal.codegen.writer.ParameterizedTypeName;
+import dagger.internal.codegen.writer.TypeName;
+import dagger.internal.codegen.writer.TypeNames;
+import dagger.producers.Producer;
+import java.util.concurrent.Executor;
+import javax.annotation.Generated;
+import javax.annotation.processing.Filer;
+import javax.lang.model.element.Element;
+import javax.lang.model.type.TypeMirror;
+
+import static dagger.internal.codegen.SourceFiles.factoryNameForProductionBinding;
+import static javax.lang.model.element.Modifier.FINAL;
+import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.PUBLIC;
+
+/**
+ * Generates {@link Producer} implementations from {@link ProductionBinding} instances.
+ *
+ * @author Jesse Beder
+ * @since 2.0
+ */
+final class ProducerFactoryGenerator extends SourceFileGenerator<ProductionBinding> {
+  ProducerFactoryGenerator(Filer filer) {
+    super(filer);
+  }
+
+  @Override
+  ClassName nameGeneratedType(ProductionBinding binding) {
+    return factoryNameForProductionBinding(binding);
+  }
+
+  @Override
+  Iterable<? extends Element> getOriginatingElements(ProductionBinding binding) {
+    return ImmutableSet.of(binding.bindingElement());
+  }
+
+  @Override
+  Optional<? extends Element> getElementForErrorReporting(ProductionBinding binding) {
+    return Optional.of(binding.bindingElement());
+  }
+
+  @Override
+  ImmutableSet<JavaWriter> write(ClassName generatedTypeName, ProductionBinding binding) {
+    TypeMirror keyType = binding.productionType().equals(Type.MAP)
+        ? Util.getProvidedValueTypeOfMap(MoreTypes.asDeclared(binding.key().type()))
+        : binding.key().type();
+    TypeName providedTypeName = TypeNames.forTypeMirror(keyType);
+    TypeName futureTypeName = ParameterizedTypeName.create(
+        ClassName.fromClass(ListenableFuture.class), providedTypeName);
+    JavaWriter writer = JavaWriter.inPackage(generatedTypeName.packageName());
+
+    ClassWriter factoryWriter = writer.addClass(generatedTypeName.simpleName());
+    ConstructorWriter constructorWriter = factoryWriter.addConstructor();
+    constructorWriter.addModifiers(PUBLIC);
+
+    factoryWriter.addField(binding.bindingTypeElement(), "module")
+        .addModifiers(PRIVATE, FINAL);
+    constructorWriter.addParameter(binding.bindingTypeElement(), "module");
+    constructorWriter.body()
+        .addSnippet("assert module != null;")
+        .addSnippet("this.module = module;");
+
+    factoryWriter.addField(Executor.class, "executor")
+        .addModifiers(PRIVATE, FINAL);
+    constructorWriter.addParameter(Executor.class, "executor");
+    constructorWriter.body()
+        .addSnippet("assert executor != null;")
+        .addSnippet("this.executor = executor;");
+
+    factoryWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getName());
+    factoryWriter.addModifiers(PUBLIC);
+    factoryWriter.addModifiers(FINAL);
+    factoryWriter.addImplementedType(
+        ParameterizedTypeName.create(Producer.class, providedTypeName));
+
+    // TODO(user): Add dependencies.
+
+    MethodWriter getMethodWriter = factoryWriter.addMethod(futureTypeName, "get");
+    getMethodWriter.annotate(Override.class);
+    getMethodWriter.addModifiers(PUBLIC);
+
+    // TODO(user): Implement this method.
+    getMethodWriter.body().addSnippet("return null;");
+
+    // TODO(gak): write a sensible toString
+    return ImmutableSet.of(writer);
+  }
+}
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerModuleProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/ProducerModuleProcessingStep.java
index 3bbf02585..1da33ec94 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProducerModuleProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducerModuleProcessingStep.java
@@ -17,17 +17,22 @@
 
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.SuperficialValidation;
+import com.google.common.base.Function;
+import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
+import java.util.List;
 import java.util.Set;
 import javax.annotation.processing.Messager;
 import javax.annotation.processing.RoundEnvironment;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
+import javax.lang.model.util.ElementFilter;
 
+import static com.google.auto.common.MoreElements.isAnnotationPresent;
 import static javax.lang.model.element.ElementKind.METHOD;
 
 /**
@@ -41,15 +46,21 @@
   private final Messager messager;
   private final ModuleValidator moduleValidator;
   private final ProducesMethodValidator producesMethodValidator;
+  private final ProductionBinding.Factory productionBindingFactory;
+  private final ProducerFactoryGenerator factoryGenerator;
   private final Set<Element> processedModuleElements = Sets.newLinkedHashSet();
 
   ProducerModuleProcessingStep(
       Messager messager,
       ModuleValidator moduleValidator,
-      ProducesMethodValidator producesMethodValidator) {
+      ProducesMethodValidator producesMethodValidator,
+      ProductionBinding.Factory productionBindingFactory,
+      ProducerFactoryGenerator factoryGenerator) {
     this.messager = messager;
     this.moduleValidator = moduleValidator;
     this.producesMethodValidator = producesMethodValidator;
+    this.productionBindingFactory = productionBindingFactory;
+    this.factoryGenerator = factoryGenerator;
   }
 
   @Override
@@ -67,7 +78,6 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
         }
       }
     }
-    @SuppressWarnings("unused")
     ImmutableSet<ExecutableElement> validProducesMethods = validProducesMethodsBuilder.build();
 
     // process each module
@@ -78,7 +88,42 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
         ValidationReport<TypeElement> report =
             moduleValidator.validate(MoreElements.asType(moduleElement));
         report.printMessagesTo(messager);
-        // TODO(user): Validate @Produces methods and generate factories.
+
+        if (report.isClean()) {
+          ImmutableSet.Builder<ExecutableElement> moduleProducesMethodsBuilder =
+              ImmutableSet.builder();
+          List<ExecutableElement> moduleMethods =
+              ElementFilter.methodsIn(moduleElement.getEnclosedElements());
+          for (ExecutableElement methodElement : moduleMethods) {
+            if (isAnnotationPresent(methodElement, Produces.class)) {
+              moduleProducesMethodsBuilder.add(methodElement);
+            }
+          }
+          ImmutableSet<ExecutableElement> moduleProducesMethods =
+              moduleProducesMethodsBuilder.build();
+
+          if (Sets.difference(moduleProducesMethods, validProducesMethods).isEmpty()) {
+            // all of the produces methods in this module are valid!
+            // time to generate some factories!
+            ImmutableSet<ProductionBinding> bindings = FluentIterable.from(moduleProducesMethods)
+                .transform(new Function<ExecutableElement, ProductionBinding>() {
+                  @Override
+                  public ProductionBinding apply(ExecutableElement producesMethod) {
+                    return productionBindingFactory.forProducesMethod(producesMethod);
+                  }
+                })
+                .toSet();
+
+            try {
+              for (ProductionBinding binding : bindings) {
+                factoryGenerator.generate(binding);
+              }
+            } catch (SourceFileGenerationException e) {
+              e.printMessageTo(messager);
+            }
+          }
+        }
+
         processedModuleElements.add(moduleElement);
       }
     }
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
index b8c76adb2..048403ed9 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
@@ -444,4 +444,91 @@ public void publicModuleNonPublicIncludes() {
             + "test.NonPublicModule1 and test.NonPublicModule2 public.")
         .in(publicModuleFile).onLine(8);
   }
+
+  @Test public void singleProducesMethodNoArgsFuture() {
+    JavaFileObject moduleFile = JavaFileObjects.forSourceLines("test.TestModule",
+        "package test;",
+        "",
+        "import com.google.common.util.concurrent.ListenableFuture;",
+        "import dagger.producers.ProducerModule;",
+        "import dagger.producers.Produces;",
+        "",
+        "@ProducerModule",
+        "final class TestModule {",
+        "  @Produces ListenableFuture<String> produceString() {",
+        "    return null;",
+        "  }",
+        "}");
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProduceStringFactory",
+        "package test;",
+        "",
+        "import com.google.common.util.concurrent.ListenableFuture;",
+        "import dagger.producers.Producer;",
+        "import java.util.concurrent.Executor;",
+        "import javax.annotation.Generated;",
+        "",
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        "public final class TestModule$$ProduceStringFactory implements Producer<String> {",
+        "  private final TestModule module;",
+        "  private final Executor executor;",
+        "",
+        "  public TestModule$$ProduceStringFactory(TestModule module, Executor executor) {",
+        "    assert module != null;",
+        "    this.module = module;",
+        "    assert executor != null;",
+        "    this.executor = executor;",
+        "  }",
+        "",
+        "  @Override public ListenableFuture<String> get() {",
+        "    return null;",
+        "  }",
+        "}");
+    assertAbout(javaSource()).that(moduleFile)
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError()
+        .and().generatesSources(factoryFile);
+  }
+
+  @Test public void singleProducesMethodNoArgsNoFuture() {
+    JavaFileObject moduleFile = JavaFileObjects.forSourceLines("test.TestModule",
+        "package test;",
+        "",
+        "import dagger.producers.ProducerModule;",
+        "import dagger.producers.Produces;",
+        "",
+        "@ProducerModule",
+        "final class TestModule {",
+        "  @Produces String produceString() {",
+        "    return \"\";",
+        "  }",
+        "}");
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProduceStringFactory",
+        "package test;",
+        "",
+        "import com.google.common.util.concurrent.ListenableFuture;",
+        "import dagger.producers.Producer;",
+        "import java.util.concurrent.Executor;",
+        "import javax.annotation.Generated;",
+        "",
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        "public final class TestModule$$ProduceStringFactory implements Producer<String> {",
+        "  private final TestModule module;",
+        "  private final Executor executor;",
+        "",
+        "  public TestModule$$ProduceStringFactory(TestModule module, Executor executor) {",
+        "    assert module != null;",
+        "    this.module = module;",
+        "    assert executor != null;",
+        "    this.executor = executor;",
+        "  }",
+        "",
+        "  @Override public ListenableFuture<String> get() {",
+        "    return null;",
+        "  }",
+        "}");
+    assertAbout(javaSource()).that(moduleFile)
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError()
+        .and().generatesSources(factoryFile);
+  }
 }
