diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index ecb2cfd20..72e761cbf 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -49,7 +49,7 @@
       Types types,
       Key.Factory keyFactory,
       Diagnostic.Kind nullableValidationType) {
-    super(filer, elements);
+    super(filer);
     this.types = types;
     this.elements = elements;
     this.keyFactory = keyFactory;
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index 078736090..c5fd2fd5e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -103,16 +103,14 @@ public SourceVersion getSupportedSourceVersion() {
     Key.Factory keyFactory = new Key.Factory(types, elements);
 
     this.factoryGenerator =
-        new FactoryGenerator(
-            filer, elements, DependencyRequestMapper.FOR_PROVIDER, nullableDiagnosticType);
+        new FactoryGenerator(filer, DependencyRequestMapper.FOR_PROVIDER, nullableDiagnosticType);
     this.membersInjectorGenerator =
-        new MembersInjectorGenerator(filer, elements, DependencyRequestMapper.FOR_PROVIDER);
+        new MembersInjectorGenerator(filer, DependencyRequestMapper.FOR_PROVIDER);
     ComponentGenerator componentGenerator =
         new ComponentGenerator(filer, elements, types, keyFactory, nullableDiagnosticType);
     ProducerFactoryGenerator producerFactoryGenerator =
-        new ProducerFactoryGenerator(filer, elements, DependencyRequestMapper.FOR_PRODUCER);
-    MonitoringModuleGenerator monitoringModuleGenerator =
-        new MonitoringModuleGenerator(filer, elements);
+        new ProducerFactoryGenerator(filer, DependencyRequestMapper.FOR_PRODUCER);
+    MonitoringModuleGenerator monitoringModuleGenerator = new MonitoringModuleGenerator(filer);
 
     DependencyRequest.Factory dependencyRequestFactory =
         new DependencyRequest.Factory(elements, keyFactory);
@@ -141,7 +139,7 @@ public SourceVersion getSupportedSourceVersion() {
             provisionBindingFactory,
             productionBindingFactory);
 
-    MapKeyGenerator mapKeyGenerator = new MapKeyGenerator(filer, elements);
+    MapKeyGenerator mapKeyGenerator = new MapKeyGenerator(filer);
     ComponentHierarchyValidator componentHierarchyValidator = new ComponentHierarchyValidator();
     BindingGraphValidator bindingGraphValidator =
         new BindingGraphValidator(
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
index aeab5a746..10704c9ad 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
@@ -147,6 +147,7 @@ protected ClassWriter createComponentClass() {
     javaWriters.add(javaWriter);
 
     ClassWriter componentWriter = javaWriter.addClass(name.simpleName());
+    componentWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getCanonicalName());
     componentWriter.addModifiers(PUBLIC, FINAL);
     componentWriter.setSupertype(componentDefinitionType());
     return componentWriter;
diff --git a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
index 0fbfa7dde..2aa355e87 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
@@ -49,7 +49,6 @@
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeParameterElement;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 import javax.tools.Diagnostic;
 
 import static com.google.common.base.Preconditions.checkState;
@@ -76,12 +75,9 @@
   private final DependencyRequestMapper dependencyRequestMapper;
   private final Diagnostic.Kind nullableValidationType;
 
-  FactoryGenerator(
-      Filer filer,
-      Elements elements,
-      DependencyRequestMapper dependencyRequestMapper,
+  FactoryGenerator(Filer filer, DependencyRequestMapper dependencyRequestMapper,
       Diagnostic.Kind nullableValidationType) {
-    super(filer, elements);
+    super(filer);
     this.dependencyRequestMapper = dependencyRequestMapper;
     this.nullableValidationType = nullableValidationType;
   }
@@ -153,6 +149,7 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
         throw new AssertionError();
     }
 
+    factoryWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getName());
     factoryWriter.addModifiers(PUBLIC);
     factoryWriter.addImplementedType(
         ParameterizedTypeName.create(ClassName.fromClass(Factory.class), providedTypeName));
diff --git a/compiler/src/main/java/dagger/internal/codegen/MapKeyGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MapKeyGenerator.java
index 432f8f578..8d72e5e48 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MapKeyGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MapKeyGenerator.java
@@ -32,13 +32,13 @@
 import dagger.internal.codegen.writer.TypeWriter;
 import java.util.LinkedHashSet;
 import java.util.Set;
+import javax.annotation.Generated;
 import javax.annotation.processing.Filer;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.DeclaredType;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.SimpleTypeVisitor6;
 
 import static dagger.internal.codegen.MapKeys.getMapKeyCreatorClassName;
@@ -90,8 +90,8 @@ static MapKeyCreatorSpecification unwrappedMapKeyWithAnnotationValue(
     }
   }
 
-  MapKeyGenerator(Filer filer, Elements elements) {
-    super(filer, elements);
+  MapKeyGenerator(Filer filer) {
+    super(filer);
   }
 
   @Override
@@ -115,6 +115,7 @@ ClassName nameGeneratedType(MapKeyCreatorSpecification mapKeyCreatorType) {
       ClassName generatedTypeName, MapKeyCreatorSpecification mapKeyCreatorType) {
     JavaWriter writer = JavaWriter.inPackage(generatedTypeName.packageName());
     TypeWriter mapKeyCreatorWriter = writer.addClass(generatedTypeName.simpleName());
+    mapKeyCreatorWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getName());
     mapKeyCreatorWriter.addModifiers(PUBLIC, FINAL);
 
     for (TypeElement annotationElement :
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
index beb637682..3694d2e81 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
@@ -55,7 +55,6 @@
 import javax.lang.model.type.ArrayType;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeVisitor;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.SimpleTypeVisitor7;
 
 import static com.google.auto.common.MoreElements.getPackage;
@@ -80,8 +79,9 @@
   private final DependencyRequestMapper dependencyRequestMapper;
 
   MembersInjectorGenerator(
-      Filer filer, Elements elements, DependencyRequestMapper dependencyRequestMapper) {
-    super(filer, elements);
+      Filer filer,
+      DependencyRequestMapper dependencyRequestMapper) {
+    super(filer);
     this.dependencyRequestMapper = dependencyRequestMapper;
   }
 
@@ -127,6 +127,8 @@ ClassName nameGeneratedType(MembersInjectionBinding binding) {
       typeParameters.add(TypeVariableName.fromTypeParameterElement(typeParameter));
     }
     injectorWriter.addTypeParameters(typeParameters);
+    injectorWriter.annotate(Generated.class)
+        .setValue(ComponentProcessor.class.getCanonicalName());
     injectorWriter.addModifiers(PUBLIC, FINAL);
     TypeName implementedType =
         ParameterizedTypeName.create(MembersInjector.class, injectedTypeName);
diff --git a/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
index c6b3344da..a4e020b32 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
@@ -35,7 +35,6 @@
 import javax.inject.Provider;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
-import javax.lang.model.util.Elements;
 
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.STATIC;
@@ -47,8 +46,8 @@
       ParameterizedTypeName.create(
           Set.class, ClassName.fromClass(ProductionComponentMonitor.Factory.class));
 
-  MonitoringModuleGenerator(Filer filer, Elements elements) {
-    super(filer, elements);
+  MonitoringModuleGenerator(Filer filer) {
+    super(filer);
   }
 
   @Override
@@ -70,6 +69,7 @@ ClassName nameGeneratedType(TypeElement componentElement) {
   ImmutableSet<JavaWriter> write(ClassName generatedTypeName, TypeElement componentElement) {
     JavaWriter writer = JavaWriter.inPackage(generatedTypeName.packageName());
     ClassWriter classWriter = writer.addClass(generatedTypeName.simpleName());
+    classWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getName());
     classWriter.annotate(Module.class);
     classWriter.addModifiers(FINAL);
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index d66a865ba..3c47d55ca 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -51,7 +51,6 @@
 import javax.annotation.processing.Filer;
 import javax.lang.model.element.Element;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 
 import static dagger.internal.codegen.SourceFiles.frameworkTypeUsageStatement;
 import static dagger.internal.codegen.SourceFiles.generatedClassNameForBinding;
@@ -71,9 +70,8 @@
 final class ProducerFactoryGenerator extends SourceFileGenerator<ProductionBinding> {
   private final DependencyRequestMapper dependencyRequestMapper;
 
-  ProducerFactoryGenerator(
-      Filer filer, Elements elements, DependencyRequestMapper dependencyRequestMapper) {
-    super(filer, elements);
+  ProducerFactoryGenerator(Filer filer, DependencyRequestMapper dependencyRequestMapper) {
+    super(filer);
     this.dependencyRequestMapper = dependencyRequestMapper;
   }
 
@@ -135,6 +133,7 @@ ClassName nameGeneratedType(ProductionBinding binding) {
         .addSnippet("assert executor != null;")
         .addSnippet("this.executor = executor;");
 
+    factoryWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getName());
     factoryWriter.addModifiers(PUBLIC);
     factoryWriter.addModifiers(FINAL);
     factoryWriter.setSuperclass(
diff --git a/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java b/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java
index 4dc35ca2a..4b6efc0ea 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java
@@ -27,7 +27,6 @@
 import java.io.IOException;
 import javax.annotation.processing.Filer;
 import javax.lang.model.element.Element;
-import javax.lang.model.util.Elements;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
@@ -42,11 +41,9 @@
  */
 abstract class SourceFileGenerator<T> {
   private final Filer filer;
-  private final boolean generatedAnnotationAvailable;
 
-  SourceFileGenerator(Filer filer, Elements elements) {
+  SourceFileGenerator(Filer filer) {
     this.filer = checkNotNull(filer);
-    generatedAnnotationAvailable = elements.getTypeElement("javax.annotation.Generated") != null;
   }
 
   final void generate(T input) throws SourceFileGenerationException {
@@ -56,7 +53,6 @@ final void generate(T input) throws SourceFileGenerationException {
     try {
       ImmutableSet<JavaWriter> writers = write(generatedTypeName, input);
       for (JavaWriter javaWriter : writers) {
-        javaWriter.markGenerated(generatedAnnotationAvailable);
         try {
           javaWriter.file(filer, originatingElements);
         } catch (IOException e) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/AnnotationWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/AnnotationWriter.java
index 9ffab1871..8dbf27bc3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/AnnotationWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/AnnotationWriter.java
@@ -20,7 +20,6 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import java.io.IOException;
-import java.util.Iterator;
 import java.util.Map.Entry;
 import java.util.Set;
 import java.util.SortedMap;
@@ -60,17 +59,12 @@ public Appendable write(Appendable appendable, Context context) throws IOExcepti
     annotationName.write(appendable, context);
     if (!memberMap.isEmpty()) {
       appendable.append('(');
-      boolean singleEntry = memberMap.size() == 1;
-      Iterator<Entry<String, Writable>> iterator = memberMap.entrySet().iterator();
-      while (iterator.hasNext()) {
-        Entry<String, Writable> member = iterator.next();
-        if (!singleEntry || !member.getKey().equals("value")) {
-          appendable.append(member.getKey()).append(" = ");
-        }
-        member.getValue().write(appendable, context);
-        if (iterator.hasNext()) {
-          appendable.append(",");
+      if (memberMap.size() == 1) {
+        Entry<String, Writable> onlyEntry = Iterables.getOnlyElement(memberMap.entrySet());
+        if (!onlyEntry.getKey().equals("value")) {
+          appendable.append(onlyEntry.getKey()).append(" = ");
         }
+        onlyEntry.getValue().write(appendable, context);
       }
       appendable.append(')');
     }
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
index 674dd621e..5977371ac 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
@@ -30,7 +30,6 @@
 import com.google.common.io.CharSource;
 import com.google.googlejavaformat.java.Formatter;
 import com.google.googlejavaformat.java.FormatterException;
-import dagger.internal.codegen.ComponentProcessor;
 import dagger.internal.codegen.writer.Writable.Context;
 import java.io.IOException;
 import java.io.Writer;
@@ -38,7 +37,6 @@
 import java.util.Deque;
 import java.util.List;
 import java.util.Set;
-import javax.annotation.Generated;
 import javax.annotation.processing.Filer;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.PackageElement;
@@ -103,12 +101,6 @@ public InterfaceWriter addInterface(String simpleName) {
     return writer;
   }
 
-  public void markGenerated(boolean generatedAnnotationAvailable) {
-    for (TypeWriter typeWriter : typeWriters) {
-      typeWriter.markGenerated(generatedAnnotationAvailable);
-    }
-  }
-
   public <A extends Appendable> A write(A appendable) throws IOException {
     if (!packageName.isEmpty()) {
       appendable.append("package ").append(packageName).append(";\n\n");
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/Modifiable.java b/compiler/src/main/java/dagger/internal/codegen/writer/Modifiable.java
index 91072baf6..bb4c6ffd9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/Modifiable.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/Modifiable.java
@@ -17,25 +17,17 @@
 
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
-import dagger.internal.codegen.ComponentProcessor;
 import dagger.internal.codegen.writer.Writable.Context;
 import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.util.EnumSet;
 import java.util.List;
 import java.util.Set;
-import javax.annotation.Generated;
 import javax.lang.model.element.Modifier;
 
 public abstract class Modifiable {
-
-  private static final String GENERATED_COMMENTS = "https://google.github.io/dagger";
-
   final Set<Modifier> modifiers;
   final List<AnnotationWriter> annotations;
-  // This is not intended to be widely used; handling comments should be deferred to
-  // when Javapoet is adopted
-  private String generatedComment;
 
   Modifiable() {
     this.modifiers = EnumSet.noneOf(Modifier.class);
@@ -60,18 +52,6 @@ public AnnotationWriter annotate(Class<? extends Annotation> annotation) {
     return annotate(ClassName.fromClass(annotation));
   }
 
-  public void markGenerated(boolean generatedAnnotationAvailable) {
-    if (generatedAnnotationAvailable) {
-      AnnotationWriter annotation = annotate(Generated.class);
-      annotation.setValue(ComponentProcessor.class.getName());
-      annotation.setMember("comments", GENERATED_COMMENTS);
-    } else {
-      generatedComment =
-          String.format(
-              "// Generated by %s (%s).", ComponentProcessor.class.getName(), GENERATED_COMMENTS);
-    }
-  }
-
   Appendable writeModifiers(Appendable appendable) throws IOException {
     for (Modifier modifier : modifiers) {
       appendable.append(modifier.toString()).append(' ');
@@ -83,9 +63,6 @@ Appendable writeAnnotations(Appendable appendable, Context context) throws IOExc
     for (AnnotationWriter annotationWriter : annotations) {
       annotationWriter.write(appendable, context).append('\n');
     }
-    if (generatedComment != null) {
-      appendable.append(generatedComment).append('\n');
-    }
     return appendable;
   }
 }
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
index e3adecc8a..cf0e69d33 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
@@ -25,7 +25,6 @@
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 /** Tests for {@link dagger.Component.Builder} */
 @RunWith(JUnit4.class)
@@ -67,7 +66,7 @@ public void testEmptyBuilder() {
         "import javax.annotation.Generated;",
         "import test.SimpleComponent",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
@@ -140,7 +139,7 @@ public void testUsesBuildAndSetterNames() {
         "import javax.inject.Provider;",
         "import test.TestComponent;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<String> stringProvider;",
         "",
@@ -242,7 +241,7 @@ public void testIgnoresModulesNotInApi() {
         "import javax.inject.Provider;",
         "import test.TestComponent;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<String> stringProvider;",
         "  private Provider<Integer> integerProvider;",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index aefaf1275..99e86148b 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -47,7 +47,6 @@
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static dagger.internal.codegen.ErrorMessages.REFERENCED_MODULES_MUST_NOT_BE_ABSTRACT;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 import static javax.tools.StandardLocation.SOURCE_OUTPUT;
 
 @RunWith(JUnit4.class)
@@ -228,7 +227,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
@@ -313,7 +312,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
@@ -396,7 +395,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "import test.OuterType.B;",
         "import test.OuterType.SimpleComponent;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerOuterType_SimpleComponent implements SimpleComponent {",
         "  private MembersInjector<B> bMembersInjector;",
         "",
@@ -495,7 +494,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<B> bProvider;",
         "  private Provider<A> aProvider;",
@@ -630,7 +629,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "",
         "import javax.annotation.Generated;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "",
         "  private DaggerTestComponent(Builder builder) {",
@@ -855,7 +854,7 @@ public void subcomponentOmitsInheritedBindings() {
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
             "public final class DaggerParent implements Parent {",
             "  private Provider<Set<Object>> setOfObjectContribution1Provider;",
             "  private Provider<Set<Object>> setOfObjectProvider;",
@@ -1025,7 +1024,7 @@ public void subcomponentOmitsInheritedBindings() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Set<String>> setOfStringContribution1Provider;",
         "  private Provider<Set<String>> setOfStringContribution2Provider;",
@@ -1138,7 +1137,7 @@ public void subcomponentOmitsInheritedBindings() {
         "import dagger.MembersInjector;",
         "import javax.annotation.Generated;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
         "",
@@ -1217,7 +1216,7 @@ public void subcomponentOmitsInheritedBindings() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private Provider<SimpleComponent> simpleComponentProvider;",
         "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
@@ -1297,7 +1296,7 @@ public void subcomponentOmitsInheritedBindings() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
         "  private Provider<SomeInjectedType> someInjectedTypeProvider;",
@@ -1376,7 +1375,7 @@ public void subcomponentOmitsInheritedBindings() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
         "",
@@ -1469,7 +1468,7 @@ public void subcomponentOmitsInheritedBindings() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerBComponent implements BComponent {",
         "  private Provider<A> aProvider;",
         "  private Provider<B> bProvider;",
@@ -1586,7 +1585,7 @@ public void subcomponentOmitsInheritedBindings() {
         "import other.test.TestModule;",
         "import other.test.TestModule_AFactory;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<test.A> aProvider;",
         "  private Provider<A> aProvider1;",
@@ -1715,7 +1714,7 @@ public void subcomponentOmitsInheritedBindings() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<B> bProvider;",
         "  private Provider<A> aProvider;",
@@ -1822,7 +1821,7 @@ public void subcomponentOmitsInheritedBindings() {
         "",
         "import javax.annotation.Generated;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
@@ -1911,7 +1910,7 @@ public void subcomponentOmitsInheritedBindings() {
         "",
         "import javax.annotation.Generated;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerSimpleComponent implements SimpleComponent {",
         "  private DaggerSimpleComponent(Builder builder) {",
         "    assert builder != null;",
@@ -2119,7 +2118,7 @@ public void genericTestToLetMeDebugInEclipse() {
          "import javax.annotation.Generated;",
          "import javax.inject.Provider;",
          "",
-         GENERATED_ANNOTATION,
+         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
          "public final class DaggerSimpleComponent implements SimpleComponent {",
          "  private Provider<D> dProvider;",
          "",
diff --git a/compiler/src/test/java/dagger/internal/codegen/GeneratedLines.java b/compiler/src/test/java/dagger/internal/codegen/GeneratedLines.java
deleted file mode 100644
index 08473a98f..000000000
--- a/compiler/src/test/java/dagger/internal/codegen/GeneratedLines.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/*
- * Copyright (C) 2015 Google, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package dagger.internal.codegen;
-
-/**
- * Common lines outputted during code generation.
- */
-public final class GeneratedLines {
-  public static final String GENERATED_ANNOTATION =
-      "@Generated("
-          + "comments = \"https://google.github.io/dagger\", "
-          + "value = \"dagger.internal.codegen.ComponentProcessor\")";
-}
diff --git a/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java b/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java
index 9983c5674..635592214 100644
--- a/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java
@@ -24,7 +24,6 @@
 
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 @RunWith(JUnit4.class)
 public class InaccessibleTypeTest {
@@ -86,7 +85,7 @@
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "  @SuppressWarnings(\"rawtypes\")",
         "  private Provider nonPublicClass1Provider;",
@@ -211,7 +210,7 @@
             "import dagger.MembersInjector;",
             "import javax.annotation.Generated;",
             "",
-            GENERATED_ANNOTATION,
+            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
             "public final class DaggerTestComponent implements TestComponent {",
             "  private MembersInjector<A> aMembersInjector;",
             "",
diff --git a/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
index c915f3358..ca0494e47 100644
--- a/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
@@ -39,7 +39,6 @@
 import static dagger.internal.codegen.ErrorMessages.QUALIFIER_ON_INJECT_CONSTRUCTOR;
 import static dagger.internal.codegen.ErrorMessages.STATIC_INJECT_FIELD;
 import static dagger.internal.codegen.ErrorMessages.STATIC_INJECT_METHOD;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 @RunWith(JUnit4.class)
 // TODO(gak): add tests for generation in the default package.
@@ -136,7 +135,7 @@
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class GenericClass_Factory<T> implements Factory<GenericClass<T>> {",
         "  private final Provider<T> tProvider;",
         "",
@@ -180,7 +179,7 @@
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class GenericClass_Factory<A, B> implements Factory<GenericClass<A, B>> {",
         "  private final MembersInjector<GenericClass<A, B>> membersInjector;",
         "",
@@ -223,7 +222,7 @@
         "import javax.annotation.Generated;",
         "",
         "@SuppressWarnings(\"rawtypes\")",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public enum GenericClass_Factory implements Factory<GenericClass> {",
         "  INSTANCE;",
         "",
@@ -260,7 +259,7 @@
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class GenericClass_Factory<A, B> implements Factory<GenericClass<A, B>> {",
         "  private final Provider<A> aProvider;",
         "  private final Provider<B> bProvider;",
@@ -308,7 +307,7 @@
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class GenericClass_Factory<A extends Number & Comparable<A>,",
         "        B extends List<? extends String>,",
         "        C extends List<? super String>>",
@@ -368,7 +367,7 @@
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class GenericClass_Factory<A, B> implements Factory<GenericClass<A, B>> {",
         "  private final Provider<A> aAndA2AndPaAndLaProvider;",
         "  private final Provider<A> qaProvider;",
@@ -718,7 +717,7 @@
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class InjectConstructor_Factory ",
         "    implements Factory<InjectConstructor> {",
         "",
@@ -762,7 +761,7 @@
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class AllInjections_Factory ",
         "    implements Factory<AllInjections> {",
         "",
@@ -816,7 +815,7 @@
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class B_Factory implements Factory<B> {",
         "",
         "  private final MembersInjector<B> membersInjector;",
@@ -862,7 +861,7 @@ public void wildcardDependency() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class InjectConstructor_Factory ",
         "    implements Factory<InjectConstructor> {",
         "",
@@ -910,7 +909,7 @@ public void basicNameCollision() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class InjectConstructor_Factory ",
         "    implements Factory<InjectConstructor> {",
         "",
@@ -962,7 +961,7 @@ public void nestedNameCollision() {
         "import javax.inject.Provider;",
         "import other.pkg.Outer;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class InjectConstructor_Factory ",
         "    implements Factory<InjectConstructor> {",
         "",
@@ -1016,7 +1015,7 @@ public void samePackageNameCollision() {
         "import javax.inject.Provider;",
         "import other.pkg.CommonName;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class InjectConstructor_Factory ",
         "    implements Factory<InjectConstructor> {",
         "",
@@ -1064,7 +1063,7 @@ public void noDeps() {
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public enum SimpleType_Factory implements Factory<SimpleType> {",
         "  INSTANCE;",
         "",
@@ -1109,7 +1108,7 @@ public void noDeps() {
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "import test.OuterType.A;",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public enum OuterType$A_Factory implements Factory<A> {",
         "  INSTANCE;",
         "",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index ab2212722..9e1b6dccd 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -25,7 +25,6 @@
 
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 @RunWith(JUnit4.class)
 public class MapBindingComponentProcessorTest {
@@ -118,7 +117,7 @@ public void mapBindingsWithEnumKey() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution2;",
@@ -278,7 +277,7 @@ public void mapBindingsWithStringKey() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfStringAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfStringAndProviderOfHandlerContribution2;",
@@ -445,7 +444,7 @@ public void mapBindingsWithWrappedKey() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfWrappedClassKeyAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfWrappedClassKeyAndProviderOfHandlerContribution2;",
@@ -617,7 +616,7 @@ public void mapBindingsWithNonProviderValue() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution2;",
@@ -743,7 +742,7 @@ public void injectMapWithoutMapBinding() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Map<String, String>> provideAMapProvider;",
         "",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
index c20383ffd..191ee6c12 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -25,7 +25,6 @@
 
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 @RunWith(JUnit4.class)
 public class MapKeyProcessorTest {
@@ -58,7 +57,7 @@ public void mapKeyCreatorFile() {
             "import com.google.auto.value.AutoAnnotation;",
             "import javax.annotation.Generated;",
             "",
-            GENERATED_ANNOTATION,
+            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
             "public final class PathKeyCreator {",
             "  @AutoAnnotation",
             "  public static PathKey createPathKey(PathEnum value, String relativePath) {",
@@ -105,7 +104,7 @@ public void nestedMapKeyCreatorFile() {
             "import javax.annotation.Generated;",
             "import test.Container.PathKey",
             "",
-            GENERATED_ANNOTATION,
+            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
             "public final class Container$PathKeyCreator {",
             "  @AutoAnnotation",
             "  public static PathKey createPathKey(PathEnum value, String relativePath) {",
@@ -207,7 +206,7 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution2;",
@@ -383,7 +382,7 @@ public void mapKeyComponentFileWithDefaultField() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution2;",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
index 6d6d767f7..52be72ae9 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
@@ -33,7 +33,6 @@
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 import static javax.tools.StandardLocation.CLASS_OUTPUT;
 
 @RunWith(JUnit4.class)
@@ -72,7 +71,7 @@ public void parentClass_noInjectedMembers() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "  private Provider<Child> childProvider;",
         "",
@@ -161,7 +160,7 @@ public void parentClass_injectedMembersInSupertype() {
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
             "public final class DaggerTestComponent implements TestComponent {",
             "  private MembersInjector<Child> childMembersInjector;",
             "  private Provider<Child> childProvider;",
@@ -227,7 +226,7 @@ public void parentClass_injectedMembersInSupertype() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class GenericClass_MembersInjector<A, B>",
         "    implements MembersInjector<GenericClass<A, B>> {",
         "  private final Provider<A> aProvider;",
@@ -320,7 +319,7 @@ public void parentClass_injectedMembersInSupertype() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Child_MembersInjector<T>",
         "    implements MembersInjector<Child<T>> {",
         "  private final Provider<T> tAndXProvider;",
@@ -392,7 +391,7 @@ public void parentClass_injectedMembersInSupertype() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class FieldInjection_MembersInjector",
         "    implements MembersInjector<FieldInjection> {",
         "  private final Provider<String> stringProvider;",
@@ -462,7 +461,7 @@ public void parentClass_injectedMembersInSupertype() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class MethodInjection_MembersInjector",
         "     implements MembersInjector<MethodInjection> {",
         "",
@@ -541,7 +540,7 @@ public void mixedMemberInjection() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class MixedMemberInjection_MembersInjector",
         "    implements MembersInjector<MixedMemberInjection> {",
         "",
@@ -621,7 +620,7 @@ public void mixedMemberInjection() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class AllInjections_MembersInjector ",
         "    implements MembersInjector<AllInjections> {",
         "",
@@ -678,7 +677,7 @@ public void mixedMemberInjection() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class B_MembersInjector implements MembersInjector<B> {",
         "  private final Provider<String> sProvider;",
         "",
@@ -741,7 +740,7 @@ public void simpleComponentWithNesting() {
           "import test.OuterType.A;",
           "import test.OuterType.B;",
           "",
-        GENERATED_ANNOTATION,
+          "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
           "public final class OuterType$B_MembersInjector implements MembersInjector<B> {",
           "  private final Provider<A> aProvider;",
           "",
@@ -808,7 +807,7 @@ public void componentWithNestingAndGeneratedType() {
             "import test.OuterType.A;",
             "import test.OuterType.B;",
             "",
-            GENERATED_ANNOTATION,
+            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
             "public final class OuterType$B_MembersInjector implements MembersInjector<B> {",
             "  private final Provider<A> aProvider;",
             "",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index 8cd99733a..e8c0cf8a3 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -38,7 +38,6 @@
 import static dagger.internal.codegen.ErrorMessages.PROVIDES_METHOD_SET_VALUES_RETURN_SET;
 import static dagger.internal.codegen.ErrorMessages.PROVIDES_METHOD_THROWS;
 import static dagger.internal.codegen.ErrorMessages.PROVIDES_OR_PRODUCES_METHOD_MULTIPLE_QUALIFIERS;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 @RunWith(JUnit4.class)
 public class ModuleFactoryGeneratorTest {
@@ -374,7 +373,7 @@ private String formatModuleErrorMessage(String msg) {
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class TestModule_ProvideStringFactory implements Factory<String> {",
         "  private final TestModule module;",
         "",
@@ -420,7 +419,7 @@ private String formatModuleErrorMessage(String msg) {
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class TestModule_ProvideStringFactory implements Factory<String> {",
         "  private final TestModule module;",
         "",
@@ -461,7 +460,7 @@ private String formatModuleErrorMessage(String msg) {
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class TestModule_ProvideStringFactory implements Factory<String> {",
         "  private final TestModule module;",
         "",
@@ -545,7 +544,7 @@ private String formatModuleErrorMessage(String msg) {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class TestModule_ProvideObjectsFactory implements Factory<List<Object>> {",
         "  private final TestModule module;",
         "  private final Provider<Object> aProvider;",
@@ -616,7 +615,7 @@ private String formatModuleErrorMessage(String msg) {
         "import java.util.Set;",
         "import javax.annotation.Generated;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class TestModule_ProvideStringFactory implements Factory<Set<String>> {",
         "  private final TestModule module;",
         "",
@@ -667,7 +666,7 @@ private String formatModuleErrorMessage(String msg) {
         "import java.util.Set;",
         "import javax.annotation.Generated;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class TestModule_ProvideWildcardListFactory implements "
             + "Factory<Set<List<List<?>>>> {",
         "  private final TestModule module;",
@@ -714,7 +713,7 @@ private String formatModuleErrorMessage(String msg) {
         "import java.util.Set;",
         "import javax.annotation.Generated;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class TestModule_ProvideStringsFactory implements Factory<Set<String>> {",
         "  private final TestModule module;",
         "",
@@ -988,7 +987,7 @@ public void genericSubclassedModule() {
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class ParentModule_ProvideListBFactory<A extends CharSequence,",
         "    B, C extends Number & Comparable<C>> implements Factory<List<B>> {",
         "  private final ParentModule<A, B, C> module;",
@@ -1023,7 +1022,7 @@ public void genericSubclassedModule() {
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class ChildNumberModule_ProvideNumberFactory implements Factory<Number> {",
         "  private final ChildNumberModule module;",
         "",
@@ -1052,7 +1051,7 @@ public void genericSubclassedModule() {
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
-        GENERATED_ANNOTATION,
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class ChildIntegerModule_ProvideIntegerFactory",
         "    implements Factory<Integer> {",
         "  private final ChildIntegerModule module;",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
index dd9e53863..c8b14ecd3 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
@@ -38,7 +38,6 @@
 import static dagger.internal.codegen.ErrorMessages.PRODUCES_METHOD_SET_VALUES_RETURN_SET;
 import static dagger.internal.codegen.ErrorMessages.PRODUCES_METHOD_THROWS;
 import static dagger.internal.codegen.ErrorMessages.PROVIDES_OR_PRODUCES_METHOD_MULTIPLE_QUALIFIERS;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 @RunWith(JUnit4.class)
 public class ProducerModuleFactoryGeneratorTest {
@@ -510,7 +509,7 @@ public void publicModuleNonPublicIncludes() {
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
             "public final class TestModule_ProduceStringFactory extends AbstractProducer<String> {",
             "  private final TestModule module;",
             "  private final Executor executor;",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 1437e6f8a..5564e52ca 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -23,7 +23,6 @@
 
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 @RunWith(JUnit4.class)
 public class ProductionComponentProcessorTest {
@@ -147,7 +146,7 @@
             "import test.TestClass.BModule;",
             "import test.TestClass.SimpleComponent;",
             "",
-            GENERATED_ANNOTATION,
+            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
             "public final class DaggerTestClass_SimpleComponent implements SimpleComponent {",
             "  private Provider<SimpleComponent> simpleComponentProvider;",
             "  private Provider<Set<Factory>> setOfFactoryContribution1Provider;",
diff --git a/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java b/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java
index 76287e946..c395ad13a 100644
--- a/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -24,7 +24,6 @@
 
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 @RunWith(JUnit4.class)
 public final class SubcomponentValidationTest {
@@ -348,7 +347,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
             "",
-            GENERATED_ANNOTATION,
+            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
             "public final class DaggerParentComponent implements ParentComponent {",
             "  private MembersInjector<Dep1> dep1MembersInjector;",
             "  private Provider<Dep1> dep1Provider;",
@@ -512,7 +511,7 @@ public void multipleSubcomponentsWithSameSimpleNamesCanExistInSameComponent() {
             "import test.Bar.Sub;",
             "import test.Foo;",
             "",
-            GENERATED_ANNOTATION,
+            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
             "public final class DaggerParentComponent implements ParentComponent {",
             "  private DaggerParentComponent(Builder builder) {",
             "    assert builder != null;",
@@ -612,7 +611,7 @@ public void subcomponentSimpleNamesDisambiguated() {
             "import javax.annotation.Generated;",
             "import test.deep.many.levels.that.match.test.Sub;",
             "",
-            GENERATED_ANNOTATION,
+            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
             "public final class DaggerParentComponent implements ParentComponent {",
             "  private DaggerParentComponent(Builder builder) {",
             "    assert builder != null;",
@@ -706,7 +705,7 @@ public void subcomponentImplNameUsesFullyQualifiedClassNameIfNecessary() {
             "import top1.a.b.c.d.E.F.Sub;",
             "import top2.a.b.c.d.E.F;",
             "",
-            GENERATED_ANNOTATION,
+            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
             "public final class DaggerParentComponent implements ParentComponent {",
             "  private DaggerParentComponent(Builder builder) {",
             "    assert builder != null;",
@@ -782,7 +781,7 @@ public void parentComponentNameShouldNotBeDisambiguatedWhenItConflictsWithASubco
             "import javax.annotation.Generated;",
             "import test.Foo.C;",
             "",
-            GENERATED_ANNOTATION,
+            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
             "public final class DaggerC implements test.C {",
             "  private DaggerC(Builder builder) {",
             "    assert builder != null;",
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
index e4c662fc5..58fa26307 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
@@ -25,7 +25,6 @@
 
 import static com.google.common.truth.Truth.assert_;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 import static java.util.Arrays.asList;
 
 @RunWith(JUnit4.class)
@@ -75,7 +74,7 @@
       "import javax.annotation.Generated;",
       "import javax.inject.Provider;",
       "",
-      GENERATED_ANNOTATION,
+      "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
       "public final class DaggerPrimitiveComponent implements PrimitiveComponent {",
       "  private Provider<Integer> primitiveIntProvider;",
       "  private Provider<PrimitiveInjectable> primitiveInjectableProvider;",
