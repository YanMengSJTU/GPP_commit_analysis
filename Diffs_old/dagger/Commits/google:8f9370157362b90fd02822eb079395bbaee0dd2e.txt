diff --git a/javatests/dagger/producers/monitoring/TimingProductionComponentMonitorTest.java b/javatests/dagger/producers/monitoring/TimingProductionComponentMonitorTest.java
index e6b3a8ec1..5c443a4a0 100644
--- a/javatests/dagger/producers/monitoring/TimingProductionComponentMonitorTest.java
+++ b/javatests/dagger/producers/monitoring/TimingProductionComponentMonitorTest.java
@@ -16,7 +16,7 @@
 
 package dagger.producers.monitoring;
 
-import static org.mockito.ArgumentMatchers.nullable;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
@@ -46,7 +46,7 @@
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
-    when(productionComponentTimingRecorderFactory.create(nullable(Object.class)))
+    when(productionComponentTimingRecorderFactory.create(any(Object.class)))
         .thenReturn(productionComponentTimingRecorder);
     when(
             productionComponentTimingRecorder.producerTimingRecorderFor(
diff --git a/javatests/dagger/producers/monitoring/TimingRecordersTest.java b/javatests/dagger/producers/monitoring/TimingRecordersTest.java
index ef72f24b6..eefcb01c8 100644
--- a/javatests/dagger/producers/monitoring/TimingRecordersTest.java
+++ b/javatests/dagger/producers/monitoring/TimingRecordersTest.java
@@ -17,6 +17,7 @@
 package dagger.producers.monitoring;
 
 import static com.google.common.truth.Truth.assertThat;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.ArgumentMatchers.nullable;
 import static org.mockito.Mockito.doThrow;
@@ -73,8 +74,7 @@ public void zeroRecordersReturnsNoOp() {
 
   @Test
   public void singleRecorder_nullProductionComponentTimingRecorder() {
-    when(mockProductionComponentTimingRecorderFactory.create(nullable(Object.class)))
-        .thenReturn(null);
+    when(mockProductionComponentTimingRecorderFactory.create(any(Object.class))).thenReturn(null);
     ProductionComponentTimingRecorder.Factory factory =
         TimingRecorders.delegatingProductionComponentTimingRecorderFactory(
             ImmutableList.of(mockProductionComponentTimingRecorderFactory));
@@ -84,7 +84,7 @@ public void singleRecorder_nullProductionComponentTimingRecorder() {
 
   @Test
   public void singleRecorder_throwingProductionComponentTimingRecorderFactory() {
-    when(mockProductionComponentTimingRecorderFactory.create(nullable(Object.class)))
+    when(mockProductionComponentTimingRecorderFactory.create(any(Object.class)))
         .thenThrow(new RuntimeException("monkey"));
     ProductionComponentTimingRecorder.Factory factory =
         TimingRecorders.delegatingProductionComponentTimingRecorderFactory(
@@ -95,7 +95,7 @@ public void singleRecorder_throwingProductionComponentTimingRecorderFactory() {
 
   @Test
   public void singleRecorder_nullProducerTimingRecorder() {
-    when(mockProductionComponentTimingRecorderFactory.create(nullable(Object.class)))
+    when(mockProductionComponentTimingRecorderFactory.create(any(Object.class)))
         .thenReturn(mockProductionComponentTimingRecorder);
     when(mockProductionComponentTimingRecorder.producerTimingRecorderFor(
             nullable(ProducerToken.class)))
@@ -110,7 +110,7 @@ public void singleRecorder_nullProducerTimingRecorder() {
 
   @Test
   public void singleRecorder_throwingProductionComponentTimingRecorder() {
-    when(mockProductionComponentTimingRecorderFactory.create(nullable(Object.class)))
+    when(mockProductionComponentTimingRecorderFactory.create(any(Object.class)))
         .thenReturn(mockProductionComponentTimingRecorder);
     when(mockProductionComponentTimingRecorder.producerTimingRecorderFor(
             nullable(ProducerToken.class)))
@@ -186,12 +186,9 @@ public void singleRecorder_throwingProducerTimingRecorderSuccess() {
 
   @Test
   public void multipleRecorders_nullProductionComponentTimingRecorders() {
-    when(mockProductionComponentTimingRecorderFactoryA.create(nullable(Object.class)))
-        .thenReturn(null);
-    when(mockProductionComponentTimingRecorderFactoryB.create(nullable(Object.class)))
-        .thenReturn(null);
-    when(mockProductionComponentTimingRecorderFactoryC.create(nullable(Object.class)))
-        .thenReturn(null);
+    when(mockProductionComponentTimingRecorderFactoryA.create(any(Object.class))).thenReturn(null);
+    when(mockProductionComponentTimingRecorderFactoryB.create(any(Object.class))).thenReturn(null);
+    when(mockProductionComponentTimingRecorderFactoryC.create(any(Object.class))).thenReturn(null);
     ProductionComponentTimingRecorder.Factory factory =
         TimingRecorders.delegatingProductionComponentTimingRecorderFactory(
             ImmutableList.of(
@@ -204,11 +201,11 @@ public void multipleRecorders_nullProductionComponentTimingRecorders() {
 
   @Test
   public void multipleRecorders_throwingProductionComponentTimingRecorderFactories() {
-    when(mockProductionComponentTimingRecorderFactoryA.create(nullable(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryA.create(any(Object.class)))
         .thenThrow(new RuntimeException("monkey"));
-    when(mockProductionComponentTimingRecorderFactoryB.create(nullable(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryB.create(any(Object.class)))
         .thenThrow(new RuntimeException("monkey"));
-    when(mockProductionComponentTimingRecorderFactoryC.create(nullable(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryC.create(any(Object.class)))
         .thenThrow(new RuntimeException("monkey"));
     ProductionComponentTimingRecorder.Factory factory =
         TimingRecorders.delegatingProductionComponentTimingRecorderFactory(
@@ -222,12 +219,10 @@ public void multipleRecorders_throwingProductionComponentTimingRecorderFactories
 
   @Test
   public void multipleRecorders_someNullProductionComponentTimingRecorders() {
-    when(mockProductionComponentTimingRecorderFactoryA.create(nullable(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryA.create(any(Object.class)))
         .thenReturn(mockProductionComponentTimingRecorderA);
-    when(mockProductionComponentTimingRecorderFactoryB.create(nullable(Object.class)))
-        .thenReturn(null);
-    when(mockProductionComponentTimingRecorderFactoryC.create(nullable(Object.class)))
-        .thenReturn(null);
+    when(mockProductionComponentTimingRecorderFactoryB.create(any(Object.class))).thenReturn(null);
+    when(mockProductionComponentTimingRecorderFactoryC.create(any(Object.class))).thenReturn(null);
     when(mockProductionComponentTimingRecorderA.producerTimingRecorderFor(
             nullable(ProducerToken.class)))
         .thenReturn(mockProducerTimingRecorderA);
@@ -252,11 +247,11 @@ public void multipleRecorders_someNullProductionComponentTimingRecorders() {
 
   @Test
   public void multipleRecorders_someThrowingProductionComponentTimingRecorderFactories() {
-    when(mockProductionComponentTimingRecorderFactoryA.create(nullable(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryA.create(any(Object.class)))
         .thenReturn(mockProductionComponentTimingRecorderA);
-    when(mockProductionComponentTimingRecorderFactoryB.create(nullable(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryB.create(any(Object.class)))
         .thenThrow(new RuntimeException("monkey"));
-    when(mockProductionComponentTimingRecorderFactoryC.create(nullable(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryC.create(any(Object.class)))
         .thenThrow(new RuntimeException("monkey"));
     when(mockProductionComponentTimingRecorderA.producerTimingRecorderFor(
             nullable(ProducerToken.class)))
@@ -348,7 +343,7 @@ public void multipleRecorders_someThrowingProducerTimingRecordersSuccess() {
   }
 
   private void setUpNormalSingleRecorder() {
-    when(mockProductionComponentTimingRecorderFactory.create(nullable(Object.class)))
+    when(mockProductionComponentTimingRecorderFactory.create(any(Object.class)))
         .thenReturn(mockProductionComponentTimingRecorder);
     when(mockProductionComponentTimingRecorder.producerTimingRecorderFor(
             nullable(ProducerToken.class)))
@@ -356,11 +351,11 @@ private void setUpNormalSingleRecorder() {
   }
 
   private void setUpNormalMultipleRecorders() {
-    when(mockProductionComponentTimingRecorderFactoryA.create(nullable(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryA.create(any(Object.class)))
         .thenReturn(mockProductionComponentTimingRecorderA);
-    when(mockProductionComponentTimingRecorderFactoryB.create(nullable(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryB.create(any(Object.class)))
         .thenReturn(mockProductionComponentTimingRecorderB);
-    when(mockProductionComponentTimingRecorderFactoryC.create(nullable(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryC.create(any(Object.class)))
         .thenReturn(mockProductionComponentTimingRecorderC);
     when(mockProductionComponentTimingRecorderA.producerTimingRecorderFor(
             nullable(ProducerToken.class)))
diff --git a/javatests/dagger/producers/monitoring/internal/MonitorsTest.java b/javatests/dagger/producers/monitoring/internal/MonitorsTest.java
index 513de23e4..ada4e335b 100644
--- a/javatests/dagger/producers/monitoring/internal/MonitorsTest.java
+++ b/javatests/dagger/producers/monitoring/internal/MonitorsTest.java
@@ -17,6 +17,7 @@
 package dagger.producers.monitoring.internal;
 
 import static com.google.common.truth.Truth.assertThat;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.nullable;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.inOrder;
@@ -65,7 +66,7 @@ public void zeroMonitorsReturnsNoOp() {
 
   @Test
   public void singleMonitor_nullProductionComponentMonitor() {
-    when(mockProductionComponentMonitorFactory.create(nullable(Object.class))).thenReturn(null);
+    when(mockProductionComponentMonitorFactory.create(any(Object.class))).thenReturn(null);
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(mockProductionComponentMonitorFactory));
@@ -76,7 +77,7 @@ public void singleMonitor_nullProductionComponentMonitor() {
   public void singleMonitor_throwingProductionComponentMonitorFactory() {
     doThrow(new RuntimeException("monkey"))
         .when(mockProductionComponentMonitorFactory)
-        .create(nullable(Object.class));
+        .create(any(Object.class));
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(mockProductionComponentMonitorFactory));
@@ -85,7 +86,7 @@ public void singleMonitor_throwingProductionComponentMonitorFactory() {
 
   @Test
   public void singleMonitor_nullProducerMonitor() {
-    when(mockProductionComponentMonitorFactory.create(nullable(Object.class)))
+    when(mockProductionComponentMonitorFactory.create(any(Object.class)))
         .thenReturn(mockProductionComponentMonitor);
     when(mockProductionComponentMonitor.producerMonitorFor(nullable(ProducerToken.class)))
         .thenReturn(null);
@@ -99,7 +100,7 @@ public void singleMonitor_nullProducerMonitor() {
 
   @Test
   public void singleMonitor_throwingProductionComponentMonitor() {
-    when(mockProductionComponentMonitorFactory.create(nullable(Object.class)))
+    when(mockProductionComponentMonitorFactory.create(any(Object.class)))
         .thenReturn(mockProductionComponentMonitor);
     doThrow(new RuntimeException("monkey"))
         .when(mockProductionComponentMonitor)
@@ -193,9 +194,7 @@ public void singleMonitor_throwingProducerMonitorFailure() {
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).requested();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).methodStarting();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).methodFinished();
-    doThrow(new RuntimeException("monkey"))
-        .when(mockProducerMonitor)
-        .failed(nullable(Throwable.class));
+    doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).failed(any(Throwable.class));
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(mockProductionComponentMonitorFactory));
@@ -218,9 +217,9 @@ public void singleMonitor_throwingProducerMonitorFailure() {
 
   @Test
   public void multipleMonitors_nullProductionComponentMonitors() {
-    when(mockProductionComponentMonitorFactoryA.create(nullable(Object.class))).thenReturn(null);
-    when(mockProductionComponentMonitorFactoryB.create(nullable(Object.class))).thenReturn(null);
-    when(mockProductionComponentMonitorFactoryC.create(nullable(Object.class))).thenReturn(null);
+    when(mockProductionComponentMonitorFactoryA.create(any(Object.class))).thenReturn(null);
+    when(mockProductionComponentMonitorFactoryB.create(any(Object.class))).thenReturn(null);
+    when(mockProductionComponentMonitorFactoryC.create(any(Object.class))).thenReturn(null);
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(
@@ -234,13 +233,13 @@ public void multipleMonitors_nullProductionComponentMonitors() {
   public void multipleMonitors_throwingProductionComponentMonitorFactories() {
     doThrow(new RuntimeException("monkey"))
         .when(mockProductionComponentMonitorFactoryA)
-        .create(nullable(Object.class));
+        .create(any(Object.class));
     doThrow(new RuntimeException("monkey"))
         .when(mockProductionComponentMonitorFactoryB)
-        .create(nullable(Object.class));
+        .create(any(Object.class));
     doThrow(new RuntimeException("monkey"))
         .when(mockProductionComponentMonitorFactoryC)
-        .create(nullable(Object.class));
+        .create(any(Object.class));
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(
@@ -252,10 +251,10 @@ public void multipleMonitors_throwingProductionComponentMonitorFactories() {
 
   @Test
   public void multipleMonitors_someNullProductionComponentMonitors() {
-    when(mockProductionComponentMonitorFactoryA.create(nullable(Object.class)))
+    when(mockProductionComponentMonitorFactoryA.create(any(Object.class)))
         .thenReturn(mockProductionComponentMonitorA);
-    when(mockProductionComponentMonitorFactoryB.create(nullable(Object.class))).thenReturn(null);
-    when(mockProductionComponentMonitorFactoryC.create(nullable(Object.class))).thenReturn(null);
+    when(mockProductionComponentMonitorFactoryB.create(any(Object.class))).thenReturn(null);
+    when(mockProductionComponentMonitorFactoryC.create(any(Object.class))).thenReturn(null);
     when(mockProductionComponentMonitorA.producerMonitorFor(nullable(ProducerToken.class)))
         .thenReturn(mockProducerMonitorA);
     ProductionComponentMonitor.Factory factory =
@@ -284,14 +283,14 @@ public void multipleMonitors_someNullProductionComponentMonitors() {
 
   @Test
   public void multipleMonitors_someThrowingProductionComponentMonitorFactories() {
-    when(mockProductionComponentMonitorFactoryA.create(nullable(Object.class)))
+    when(mockProductionComponentMonitorFactoryA.create(any(Object.class)))
         .thenReturn(mockProductionComponentMonitorA);
     doThrow(new RuntimeException("monkey"))
         .when(mockProductionComponentMonitorFactoryB)
-        .create(nullable(Object.class));
+        .create(any(Object.class));
     doThrow(new RuntimeException("monkey"))
         .when(mockProductionComponentMonitorFactoryC)
-        .create(nullable(Object.class));
+        .create(any(Object.class));
     when(mockProductionComponentMonitorA.producerMonitorFor(nullable(ProducerToken.class)))
         .thenReturn(mockProducerMonitorA);
     ProductionComponentMonitor.Factory factory =
@@ -435,9 +434,7 @@ public void multipleMonitors_someThrowingProducerMonitorsFailure() {
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitorA).requested();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitorA).methodStarting();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitorB).methodFinished();
-    doThrow(new RuntimeException("monkey"))
-        .when(mockProducerMonitorC)
-        .failed(nullable(Throwable.class));
+    doThrow(new RuntimeException("monkey")).when(mockProducerMonitorC).failed(any(Throwable.class));
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(
@@ -471,18 +468,18 @@ public void multipleMonitors_someThrowingProducerMonitorsFailure() {
   }
 
   private void setUpNormalSingleMonitor() {
-    when(mockProductionComponentMonitorFactory.create(nullable(Object.class)))
+    when(mockProductionComponentMonitorFactory.create(any(Object.class)))
         .thenReturn(mockProductionComponentMonitor);
     when(mockProductionComponentMonitor.producerMonitorFor(nullable(ProducerToken.class)))
         .thenReturn(mockProducerMonitor);
   }
 
   private void setUpNormalMultipleMonitors() {
-    when(mockProductionComponentMonitorFactoryA.create(nullable(Object.class)))
+    when(mockProductionComponentMonitorFactoryA.create(any(Object.class)))
         .thenReturn(mockProductionComponentMonitorA);
-    when(mockProductionComponentMonitorFactoryB.create(nullable(Object.class)))
+    when(mockProductionComponentMonitorFactoryB.create(any(Object.class)))
         .thenReturn(mockProductionComponentMonitorB);
-    when(mockProductionComponentMonitorFactoryC.create(nullable(Object.class)))
+    when(mockProductionComponentMonitorFactoryC.create(any(Object.class)))
         .thenReturn(mockProductionComponentMonitorC);
     when(mockProductionComponentMonitorA.producerMonitorFor(nullable(ProducerToken.class)))
         .thenReturn(mockProducerMonitorA);
