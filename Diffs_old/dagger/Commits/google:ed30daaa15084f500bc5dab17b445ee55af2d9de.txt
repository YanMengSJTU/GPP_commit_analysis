diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index 807d34b8e..0a7828496 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -59,7 +59,6 @@
 import static dagger.internal.codegen.TypeNames.MAP_PROVIDER_FACTORY;
 import static dagger.internal.codegen.TypeNames.MEMBERS_INJECTORS;
 import static dagger.internal.codegen.TypeNames.PRODUCER;
-import static dagger.internal.codegen.TypeNames.PRODUCERS;
 import static dagger.internal.codegen.TypeNames.REFERENCE_RELEASING_PROVIDER;
 import static dagger.internal.codegen.TypeNames.REFERENCE_RELEASING_PROVIDER_MANAGER;
 import static dagger.internal.codegen.TypeNames.SET_FACTORY;
@@ -1056,10 +1055,11 @@ private CodeBlock initializeProducersFromProviderDependencies(Binding binding) {
         producerFromProviderMemberSelects.put(frameworkDependency.bindingKey(), memberSelect);
         initializations.add(
             CodeBlock.of(
-                "this.$L = $T.producerFromProvider($L);",
+                "this.$L = $L;",
                 memberSelect.getExpressionFor(name),
-                PRODUCERS,
-                getMemberSelectExpression(frameworkDependency.bindingKey())));
+                requestFulfillmentRegistry
+                    .getRequestFulfillment(frameworkDependency.bindingKey())
+                    .getSnippetForFrameworkDependency(frameworkDependency, name)));
       }
     }
     return CodeBlocks.concat(initializations.build());
@@ -1231,10 +1231,13 @@ private CodeBlock initializeFactoryForContributionBinding(ContributionBinding bi
         }
 
       case SYNTHETIC_MAP:
+        FrameworkDependency frameworkDependency = getOnlyElement(binding.frameworkDependencies());
         return CodeBlock.of(
             "$T.create($L)",
             mapFactoryClassName(binding),
-            getMemberSelectExpression(getOnlyElement(binding.explicitDependencies()).bindingKey()));
+            requestFulfillmentRegistry
+                .getRequestFulfillment(frameworkDependency.bindingKey())
+                .getSnippetForFrameworkDependency(frameworkDependency, name));
 
       case SYNTHETIC_MULTIBOUND_SET:
         return initializeFactoryForSetMultibinding(binding);
@@ -1296,20 +1299,22 @@ private CodeBlock initializeMembersInjectorForBinding(MembersInjectionBinding bi
   private ImmutableList<CodeBlock> getDependencyArguments(Binding binding) {
     ImmutableList.Builder<CodeBlock> parameters = ImmutableList.builder();
     for (FrameworkDependency frameworkDependency : binding.frameworkDependencies()) {
-      parameters.add(getDependencyArgument(frameworkDependency).getExpressionFor(name));
+      parameters.add(getDependencyArgument(frameworkDependency));
     }
     return parameters.build();
   }
 
-  /** Returns the member select to use as an argument for a dependency. */
-  private MemberSelect getDependencyArgument(FrameworkDependency frameworkDependency) {
+  /** Returns the expression to use as an argument for a dependency. */
+  private CodeBlock getDependencyArgument(FrameworkDependency frameworkDependency) {
     BindingKey requestedKey = frameworkDependency.bindingKey();
     ResolvedBindings resolvedBindings = graph.resolvedBindings().get(requestedKey);
     if (resolvedBindings.frameworkClass().equals(Provider.class)
         && frameworkDependency.frameworkClass().equals(Producer.class)) {
-      return producerFromProviderMemberSelects.get(requestedKey);
+      return producerFromProviderMemberSelects.get(requestedKey).getExpressionFor(name);
     } else {
-      return getMemberSelect(requestedKey);
+      RequestFulfillment requestFulfillment =
+          requestFulfillmentRegistry.getRequestFulfillment(requestedKey);
+      return requestFulfillment.getSnippetForFrameworkDependency(frameworkDependency, name);
     }
   }
 
@@ -1352,7 +1357,7 @@ private CodeBlock initializeFactoryForSetMultibinding(ContributionBinding bindin
           potentiallyCast(
               useRawTypes,
               frameworkDependency.frameworkClass(),
-              getDependencyArgument(frameworkDependency).getExpressionFor(name)));
+              getDependencyArgument(frameworkDependency)));
     }
     builder.add("builder($L, $L)", individualProviders, setProviders);
     builder.add(builderMethodCalls.build());
@@ -1382,7 +1387,7 @@ private CodeBlock initializeFactoryForMapMultibinding(ContributionBinding bindin
           potentiallyCast(
               useRawTypes,
               frameworkDependency.frameworkClass(),
-              getDependencyArgument(frameworkDependency).getExpressionFor(name));
+              getDependencyArgument(frameworkDependency));
       codeBlocks.add(
           CodeBlock.of(
               ".put($L, $L)", getMapKeyExpression(contributionBinding.mapKey().get()), value));
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
index 7838d09f3..fb0420218 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
@@ -301,18 +301,30 @@ protected KindAndType defaultAction(TypeMirror otherType, Void p) {
     }
 
     /**
-     * Creates a implicit {@link DependencyRequest} for {@code mapOfFactoryKey}.
+     * Creates a implicit {@link DependencyRequest} for a {@link Provider} of {@code
+     * mapOfFactoryKey}.
      *
      * @param mapOfFactoryKey a key equivalent to {@code mapOfValueRequest}'s key, whose type is
      *     {@code Map<K, Provider<V>>} or {@code Map<K, Producer<V>>}
      */
-    DependencyRequest forImplicitMapBinding(Key mapOfFactoryKey) {
+    DependencyRequest providerForImplicitMapBinding(Key mapOfFactoryKey) {
       return DependencyRequest.builder()
           .kind(Kind.PROVIDER)
           .key(mapOfFactoryKey)
           .build();
     }
 
+    /**
+     * Creates a implicit {@link DependencyRequest} for a {@link Producer} of {@code
+     * mapOfFactoryKey}.
+     *
+     * @param mapOfFactoryKey a key equivalent to {@code mapOfValueRequest}'s key, whose type is
+     *     {@code Map<K, Provider<V>>} or {@code Map<K, Producer<V>>}
+     */
+    DependencyRequest producerForImplicitMapBinding(Key mapOfFactoryKey) {
+      return DependencyRequest.builder().kind(Kind.PRODUCER).key(mapOfFactoryKey).build();
+    }
+
     /**
      * Creates a synthetic dependency request for one individual {@code multibindingContribution}.
      */
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorRequestFulfillment.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorRequestFulfillment.java
index bece3fad9..4f9e9550c 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorRequestFulfillment.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorRequestFulfillment.java
@@ -40,4 +40,11 @@ public CodeBlock getSnippetForDependencyRequest(
     checkArgument(request.kind().equals(Kind.MEMBERS_INJECTOR));
     return membersInjectorFieldSelect.getExpressionFor(requestingClass);
   }
+
+  @Override
+  CodeBlock getSnippetForFrameworkDependency(
+      FrameworkDependency frameworkDependency, ClassName requestingClass) {
+    checkArgument(frameworkDependency.bindingType().equals(BindingType.MEMBERS_INJECTION));
+    return membersInjectorFieldSelect.getExpressionFor(requestingClass);
+  }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerFieldRequestFulfillment.java b/compiler/src/main/java/dagger/internal/codegen/ProducerFieldRequestFulfillment.java
index 872110657..a0c61c85c 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProducerFieldRequestFulfillment.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducerFieldRequestFulfillment.java
@@ -18,6 +18,7 @@
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static dagger.internal.codegen.BindingKey.Kind.CONTRIBUTION;
+import static dagger.internal.codegen.BindingType.PRODUCTION;
 
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
@@ -38,4 +39,14 @@ public CodeBlock getSnippetForDependencyRequest(
     return FrameworkType.PRODUCER.to(
         request.kind(), producerFieldSelect.getExpressionFor(requestingClass));
   }
+
+  @Override
+  CodeBlock getSnippetForFrameworkDependency(
+      FrameworkDependency frameworkDependency, ClassName requestingClass) {
+    checkArgument(
+        frameworkDependency.bindingType().equals(PRODUCTION),
+        "%s is not a production dependency",
+        frameworkDependency);
+    return producerFieldSelect.getExpressionFor(requestingClass);
+  }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProductionBinding.java b/compiler/src/main/java/dagger/internal/codegen/ProductionBinding.java
index 3f3bd5c27..dd9f3a18b 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProductionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProductionBinding.java
@@ -187,7 +187,7 @@ ProductionBinding syntheticMapOfValuesOrProducedBinding(Key mapOfValuesOrProduce
           "%s is not a key for of Map<K, V> or Map<K, Produced<V>>",
           mapOfValuesOrProducedKey);
       DependencyRequest requestForMapOfProducers =
-          dependencyRequestFactory.forImplicitMapBinding(mapOfProducersKey.get());
+          dependencyRequestFactory.producerForImplicitMapBinding(mapOfProducersKey.get());
       return ProductionBinding.builder()
           .contributionType(ContributionType.UNIQUE)
           .key(mapOfValuesOrProducedKey)
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProviderFieldRequestFulfillment.java b/compiler/src/main/java/dagger/internal/codegen/ProviderFieldRequestFulfillment.java
index 642b9f74a..d17c2e54a 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProviderFieldRequestFulfillment.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProviderFieldRequestFulfillment.java
@@ -21,6 +21,7 @@
 
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
+import dagger.producers.internal.Producers;
 
 /** Fulfills requests for {@link ProvisionBinding} instances. */
 final class ProviderFieldRequestFulfillment extends RequestFulfillment {
@@ -38,4 +39,22 @@ public CodeBlock getSnippetForDependencyRequest(
     return FrameworkType.PROVIDER.to(
         request.kind(), providerFieldSelect.getExpressionFor(requestingClass));
   }
+
+  @Override
+  CodeBlock getSnippetForFrameworkDependency(
+      FrameworkDependency frameworkDependency, ClassName requestingClass) {
+    switch (frameworkDependency.bindingType()) {
+      case PROVISION:
+        return providerFieldSelect.getExpressionFor(requestingClass);
+      case MEMBERS_INJECTION:
+        throw new IllegalArgumentException();
+      case PRODUCTION:
+        return CodeBlock.of(
+            "$T.producerFromProvider($L)",
+            Producers.class,
+            providerFieldSelect.getExpressionFor(requestingClass));
+      default:
+        throw new AssertionError();
+    }
+  }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java b/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
index 818c73c5b..5de760e93 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
@@ -217,7 +217,7 @@ ProvisionBinding syntheticMapOfValuesBinding(Key mapOfValuesKey) {
       Optional<Key> mapOfProvidersKey = keyFactory.implicitMapProviderKeyFrom(mapOfValuesKey);
       checkArgument(mapOfProvidersKey.isPresent(), "%s is not a key for Map<K, V>", mapOfValuesKey);
       DependencyRequest requestForMapOfProviders =
-          dependencyRequestFactory.forImplicitMapBinding(mapOfProvidersKey.get());
+          dependencyRequestFactory.providerForImplicitMapBinding(mapOfProvidersKey.get());
       return ProvisionBinding.builder()
           .contributionType(ContributionType.UNIQUE)
           .key(mapOfValuesKey)
diff --git a/compiler/src/main/java/dagger/internal/codegen/RequestFulfillment.java b/compiler/src/main/java/dagger/internal/codegen/RequestFulfillment.java
index 40764ee7b..db296c066 100644
--- a/compiler/src/main/java/dagger/internal/codegen/RequestFulfillment.java
+++ b/compiler/src/main/java/dagger/internal/codegen/RequestFulfillment.java
@@ -43,4 +43,11 @@ final BindingKey bindingKey() {
    */
   abstract CodeBlock getSnippetForDependencyRequest(
       DependencyRequest request, ClassName requestingClass);
+
+  /**
+   * Returns the {@link CodeBlock} that references the {@link FrameworkDependency} as accessed from
+   * the {@code requestingClass}.
+   */
+  abstract CodeBlock getSnippetForFrameworkDependency(
+      FrameworkDependency frameworkDependency, ClassName requestingClass);
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/SimpleMethodRequestFulfillment.java b/compiler/src/main/java/dagger/internal/codegen/SimpleMethodRequestFulfillment.java
index add65fd31..8c7fb6dfb 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SimpleMethodRequestFulfillment.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SimpleMethodRequestFulfillment.java
@@ -77,6 +77,12 @@ CodeBlock getSnippetForDependencyRequest(DependencyRequest request, ClassName re
     }
   }
 
+  @Override
+  CodeBlock getSnippetForFrameworkDependency(
+      FrameworkDependency frameworkDependency, ClassName requestingClass) {
+    return providerDelegate.getSnippetForFrameworkDependency(frameworkDependency, requestingClass);
+  }
+
   private CodeBlock invokeMethodOrProxy(ClassName requestingClass) {
     ExecutableElement bindingElement = asExecutable(provisionBinding.bindingElement().get());
     return requiresProxyAccess(bindingElement, requestingClass.packageName())
