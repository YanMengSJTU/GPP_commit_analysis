diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java b/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
index 5977371ac..4fa5a3fc9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/JavaWriter.java
@@ -26,13 +26,9 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Ordering;
 import com.google.common.collect.Sets;
-import com.google.common.io.CharSink;
-import com.google.common.io.CharSource;
-import com.google.googlejavaformat.java.Formatter;
-import com.google.googlejavaformat.java.FormatterException;
+import com.google.common.io.Closer;
 import dagger.internal.codegen.writer.Writable.Context;
 import java.io.IOException;
-import java.io.Writer;
 import java.util.ArrayDeque;
 import java.util.Deque;
 import java.util.List;
@@ -101,7 +97,7 @@ public InterfaceWriter addInterface(String simpleName) {
     return writer;
   }
 
-  public <A extends Appendable> A write(A appendable) throws IOException {
+  public Appendable write(Appendable appendable) throws IOException {
     if (!packageName.isEmpty()) {
       appendable.append("package ").append(packageName).append(";\n\n");
     }
@@ -177,19 +173,20 @@ public void file(Filer filer, Iterable<? extends Element> originatingElements)
 
   public void file(Filer filer, CharSequence name,  Iterable<? extends Element> originatingElements)
       throws IOException {
-    final JavaFileObject sourceFile = filer.createSourceFile(name,
+    JavaFileObject sourceFile = filer.createSourceFile(name,
         Iterables.toArray(originatingElements, Element.class));
+    Closer closer = Closer.create();
     try {
-      new Formatter().formatSource(
-          CharSource.wrap(write(new StringBuilder())),
-          new CharSink() {
-            @Override public Writer openStream() throws IOException {
-              return sourceFile.openWriter();
-            }
-          });
-    } catch (FormatterException e) {
-      throw new IllegalStateException(
-          "The writer produced code that could not be parsed by the formatter", e);
+      write(closer.register(sourceFile.openWriter()));
+    } catch (Exception e) {
+      try {
+        sourceFile.delete();
+      } catch (Exception e2) {
+        // couldn't delete the file
+      }
+      throw closer.rethrow(e);
+    } finally {
+      closer.close();
     }
   }
 
