diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index 3152c3fd1..ec90b08e6 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -61,7 +61,9 @@ public SourceVersion getSupportedSourceVersion() {
   public Set<String> getSupportedOptions() {
     return ImmutableSet.of(
         DISABLE_INTER_COMPONENT_SCOPE_VALIDATION_KEY,
-        NULLABLE_VALIDATION_KEY
+        NULLABLE_VALIDATION_KEY,
+        PRIVATE_MEMBER_VALIDATION_TYPE_KEY,
+        STATIC_MEMBER_VALIDATION_TYPE_KEY
     );
   }
 
@@ -84,8 +86,12 @@ public SourceVersion getSupportedSourceVersion() {
     KeyFormatter keyFormatter = new KeyFormatter();
 
     InjectConstructorValidator injectConstructorValidator = new InjectConstructorValidator();
-    InjectFieldValidator injectFieldValidator = new InjectFieldValidator();
-    InjectMethodValidator injectMethodValidator = new InjectMethodValidator();
+    InjectFieldValidator injectFieldValidator = new InjectFieldValidator(
+        privateMemberValidationType(processingEnv).diagnosticKind().get(),
+        staticMemberValidationType(processingEnv).diagnosticKind().get());
+    InjectMethodValidator injectMethodValidator = new InjectMethodValidator(
+        privateMemberValidationType(processingEnv).diagnosticKind().get(),
+        staticMemberValidationType(processingEnv).diagnosticKind().get());
     ModuleValidator moduleValidator = new ModuleValidator(types, elements, methodSignatureFormatter,
         Module.class, Provides.class);
     ProvidesMethodValidator providesMethodValidator = new ProvidesMethodValidator(elements);
@@ -212,6 +218,12 @@ protected void postProcess() {
 
   private static final String NULLABLE_VALIDATION_KEY = "dagger.nullableValidation";
 
+  private static final String PRIVATE_MEMBER_VALIDATION_TYPE_KEY =
+      "dagger.privateMemberValidation";
+
+  private static final String STATIC_MEMBER_VALIDATION_TYPE_KEY =
+      "dagger.staticMemberValidation";
+
   private static ValidationType scopeValidationType(ProcessingEnvironment processingEnv) {
     return valueOf(processingEnv,
         DISABLE_INTER_COMPONENT_SCOPE_VALIDATION_KEY,
@@ -226,6 +238,20 @@ private static ValidationType nullableValidationType(ProcessingEnvironment proce
         EnumSet.of(ValidationType.ERROR, ValidationType.WARNING));
   }
 
+  private static ValidationType privateMemberValidationType(ProcessingEnvironment processingEnv) {
+    return valueOf(processingEnv,
+        PRIVATE_MEMBER_VALIDATION_TYPE_KEY,
+        ValidationType.ERROR,
+        EnumSet.of(ValidationType.ERROR, ValidationType.WARNING));
+  }
+
+  private static ValidationType staticMemberValidationType(ProcessingEnvironment processingEnv) {
+    return valueOf(processingEnv,
+        STATIC_MEMBER_VALIDATION_TYPE_KEY,
+        ValidationType.ERROR,
+        EnumSet.of(ValidationType.ERROR, ValidationType.WARNING));
+  }
+
   private static <T extends Enum<T>> T valueOf(ProcessingEnvironment processingEnv, String key,
       T defaultValue, Set<T> validValues) {
     Map<String, String> options = processingEnv.getOptions();
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectFieldValidator.java b/compiler/src/main/java/dagger/internal/codegen/InjectFieldValidator.java
index 2cab868a0..91143de6e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectFieldValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectFieldValidator.java
@@ -16,11 +16,13 @@
 package dagger.internal.codegen;
 
 import com.google.common.collect.ImmutableSet;
+
 import java.util.Set;
 import javax.inject.Inject;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.VariableElement;
+import javax.tools.Diagnostic.Kind;
 
 import static dagger.internal.codegen.ErrorMessages.FINAL_INJECT_FIELD;
 import static dagger.internal.codegen.ErrorMessages.MULTIPLE_QUALIFIERS;
@@ -38,6 +40,15 @@
  * @since 2.0
  */
 final class InjectFieldValidator {
+  private Kind privateMemberValidationKind;
+  private Kind staticMemberValidationKind;
+  
+  public InjectFieldValidator(
+      Kind privateMemberValidationKind, Kind staticMemberValidationKind) {
+    this.privateMemberValidationKind = privateMemberValidationKind;
+    this.staticMemberValidationKind = staticMemberValidationKind;
+  }
+
   ValidationReport<VariableElement> validate(VariableElement fieldElement) {
     ValidationReport.Builder<VariableElement> builder = ValidationReport.about(fieldElement);
     Set<Modifier> modifiers = fieldElement.getModifiers();
@@ -46,11 +57,11 @@
     }
 
     if (modifiers.contains(PRIVATE)) {
-      builder.addError(PRIVATE_INJECT_FIELD, fieldElement);
+      builder.addItem(PRIVATE_INJECT_FIELD, privateMemberValidationKind, fieldElement);
     }
 
     if (modifiers.contains(STATIC)) {
-      builder.addError(STATIC_INJECT_FIELD, fieldElement);
+      builder.addItem(STATIC_INJECT_FIELD, staticMemberValidationKind, fieldElement);
     }
     
     ImmutableSet<? extends AnnotationMirror> qualifiers = getQualifiers(fieldElement);
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectMethodValidator.java b/compiler/src/main/java/dagger/internal/codegen/InjectMethodValidator.java
index da90524ed..a716b7d81 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectMethodValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectMethodValidator.java
@@ -22,6 +22,7 @@
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.VariableElement;
+import javax.tools.Diagnostic.Kind;
 
 import static dagger.internal.codegen.ErrorMessages.ABSTRACT_INJECT_METHOD;
 import static dagger.internal.codegen.ErrorMessages.GENERIC_INJECT_METHOD;
@@ -40,6 +41,15 @@
  * @since 2.0
  */
 final class InjectMethodValidator {
+  private Kind privateMemberValidationKind;
+  private Kind staticMemberValidationKind;
+  
+  public InjectMethodValidator(
+      Kind privateMemberValidationKind, Kind staticMemberValidationKind) {
+    this.privateMemberValidationKind = privateMemberValidationKind;
+    this.staticMemberValidationKind = staticMemberValidationKind;
+  }
+
   ValidationReport<ExecutableElement> validate(ExecutableElement methodElement) {
     ValidationReport.Builder<ExecutableElement> builder = ValidationReport.about(methodElement);
     Set<Modifier> modifiers = methodElement.getModifiers();
@@ -48,11 +58,11 @@
     }
 
     if (modifiers.contains(PRIVATE)) {
-      builder.addError(PRIVATE_INJECT_METHOD, methodElement);
+      builder.addItem(PRIVATE_INJECT_METHOD, privateMemberValidationKind, methodElement);
     }
     
     if (modifiers.contains(STATIC)) {
-      builder.addError(STATIC_INJECT_METHOD, methodElement);
+      builder.addItem(STATIC_INJECT_METHOD, staticMemberValidationKind, methodElement);
     }
 
     if (!methodElement.getTypeParameters().isEmpty()) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
index 4f48d8d59..d11d7ef3e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
@@ -43,6 +43,8 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
+import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.STATIC;
 
 /**
  * Represents the full members injection of a particular type. This does not pay attention to
@@ -163,7 +165,7 @@ private InjectionSite injectionSiteForInjectField(VariableElement fieldElement,
           ImmutableSet.of(dependencyRequestFactory.forRequiredResolvedVariable(
               containingType, fieldElement, resolved)));
     }
-
+  
     /** Returns an unresolved version of this binding. */
     MembersInjectionBinding unresolve(MembersInjectionBinding binding) {
       checkState(binding.hasNonDefaultTypeParameters());
@@ -198,14 +200,14 @@ MembersInjectionBinding forInjectedType(DeclaredType type, Optional<TypeMirror>
                   @Override
                   public Optional<InjectionSite> visitExecutableAsMethod(ExecutableElement e,
                       Void p) {
-                    return isAnnotationPresent(e, Inject.class)
+                    return isAnnotationPresent(e, Inject.class) && modifiersSupported(e)
                         ? Optional.of(injectionSiteForInjectMethod(e, resolved))
                         : Optional.<InjectionSite>absent();
                   }
 
                   @Override
                   public Optional<InjectionSite> visitVariableAsField(VariableElement e, Void p) {
-                    return isAnnotationPresent(e, Inject.class)
+                    return isAnnotationPresent(e, Inject.class) && modifiersSupported(e)
                         ? Optional.of(injectionSiteForInjectField(e, resolved))
                         : Optional.<InjectionSite>absent();
                   }
@@ -243,5 +245,9 @@ MembersInjectionBinding forInjectedType(DeclaredType type, Optional<TypeMirror>
           injectionSites,
           parentInjectorRequest);
     }
+    
+    protected boolean modifiersSupported(Element e) {
+      return !e.getModifiers().contains(PRIVATE) && !e.getModifiers().contains(STATIC);
+    }
   }
 }
diff --git a/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
index 6c6be0e4a..ca0494e47 100644
--- a/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
@@ -519,7 +519,7 @@
         .withErrorContaining(FINAL_INJECT_FIELD).in(file).onLine(6);
   }
 
-  @Test public void privateInjectField() {
+  @Test public void privateInjectFieldError() {
     JavaFileObject file = JavaFileObjects.forSourceLines("test.PrivateInjectField",
         "package test;",
         "",
@@ -534,7 +534,22 @@
         .withErrorContaining(PRIVATE_INJECT_FIELD).in(file).onLine(6);
   }
   
-  @Test public void staticInjectField() {
+  @Test public void privateInjectFieldWarning() {
+    JavaFileObject file = JavaFileObjects.forSourceLines("test.PrivateInjectField",
+        "package test;",
+        "",
+        "import javax.inject.Inject;",
+        "",
+        "class PrivateInjectField {",
+        "  @Inject private String s;",
+        "}");
+    assertAbout(javaSource()).that(file)
+        .withCompilerOptions("-Adagger.privateMemberValidation=WARNING")
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError(); // TODO: Verify warning message when supported
+  }
+  
+  @Test public void staticInjectFieldError() {
     JavaFileObject file = JavaFileObjects.forSourceLines("test.StaticInjectField",
         "package test;",
         "",
@@ -548,6 +563,21 @@
         .failsToCompile()
         .withErrorContaining(STATIC_INJECT_FIELD).in(file).onLine(6);
   }
+  
+  @Test public void staticInjectFieldWarning() {
+    JavaFileObject file = JavaFileObjects.forSourceLines("test.StaticInjectField",
+        "package test;",
+        "",
+        "import javax.inject.Inject;",
+        "",
+        "class StaticInjectField {",
+        "  @Inject static String s;",
+        "}");
+    assertAbout(javaSource()).that(file)
+        .withCompilerOptions("-Adagger.staticMemberValidation=WARNING")
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError(); // TODO: Verify warning message when supported
+  }
 
   @Test public void multipleQualifiersOnField() {
     JavaFileObject file = JavaFileObjects.forSourceLines("test.MultipleQualifierInjectField",
@@ -579,14 +609,14 @@
         .withErrorContaining(ABSTRACT_INJECT_METHOD).in(file).onLine(6);
   }
 
-  @Test public void privateInjectMethod() {
+  @Test public void privateInjectMethodError() {
     JavaFileObject file = JavaFileObjects.forSourceLines("test.PrivateInjectMethod",
         "package test;",
         "",
         "import javax.inject.Inject;",
         "",
         "class PrivateInjectMethod {",
-        "  @Inject private void method();",
+        "  @Inject private void method(){}",
         "}");
     assertAbout(javaSource()).that(file)
         .processedWith(new ComponentProcessor())
@@ -594,20 +624,50 @@
         .withErrorContaining(PRIVATE_INJECT_METHOD).in(file).onLine(6);
   }
   
-  @Test public void staticInjectMethod() {
+  @Test public void privateInjectMethodWarning() {
+    JavaFileObject file = JavaFileObjects.forSourceLines("test.PrivateInjectMethod",
+        "package test;",
+        "",
+        "import javax.inject.Inject;",
+        "",
+        "class PrivateInjectMethod {",
+        "  @Inject private void method(){}",
+        "}");
+    assertAbout(javaSource()).that(file)
+        .withCompilerOptions("-Adagger.privateMemberValidation=WARNING")
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError(); // TODO: Verify warning message when supported
+  }
+  
+  @Test public void staticInjectMethodError() {
     JavaFileObject file = JavaFileObjects.forSourceLines("test.StaticInjectMethod",
         "package test;",
         "",
         "import javax.inject.Inject;",
         "",
         "class StaticInjectMethod {",
-        "  @Inject static void method();",
+        "  @Inject static void method(){}",
         "}");
     assertAbout(javaSource()).that(file)
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(STATIC_INJECT_METHOD).in(file).onLine(6);
   }
+  
+  @Test public void staticInjectMethodWarning() {
+    JavaFileObject file = JavaFileObjects.forSourceLines("test.StaticInjectMethod",
+        "package test;",
+        "",
+        "import javax.inject.Inject;",
+        "",
+        "class StaticInjectMethod {",
+        "  @Inject static void method(){}",
+        "}");
+    assertAbout(javaSource()).that(file)
+        .withCompilerOptions("-Adagger.staticMemberValidation=WARNING")
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError(); // TODO: Verify warning message when supported
+  }
 
   @Test public void genericInjectMethod() {
     JavaFileObject file = JavaFileObjects.forSourceLines("test.GenericInjectMethod",
