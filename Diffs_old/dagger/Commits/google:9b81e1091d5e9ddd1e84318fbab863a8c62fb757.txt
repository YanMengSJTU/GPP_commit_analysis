diff --git a/compiler/src/it/functional-tests/src/test/java/test/staticprovides/StaticProvidesTest.java b/compiler/src/it/functional-tests/src/test/java/test/staticprovides/StaticProvidesTest.java
index 53185f8fc..3fb1c2e96 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/staticprovides/StaticProvidesTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/staticprovides/StaticProvidesTest.java
@@ -15,14 +15,17 @@
  */
 package test.staticprovides;
 
-import static com.google.common.truth.Truth.assertThat;
-
 import com.google.common.collect.ImmutableSet;
-
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.util.Arrays;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
+import static com.google.common.truth.Truth.assertThat;
+import static com.google.common.truth.Truth.assertWithMessage;
+
 @RunWith(JUnit4.class)
 public class StaticProvidesTest {
   private final StaticTestComponent component = DaggerStaticTestComponent.create();
@@ -33,4 +36,21 @@
         SomeStaticModule.class + ".contributeStringFromAStaticMethod",
         SomeStaticModule.class + ".contributeStringFromAnInstanceMethod"));
   }
+
+  @Test public void allStaticProvidesModules_noFieldInComponentBuilder() {
+    for (Field field : DaggerStaticTestComponent.Builder.class.getDeclaredFields()) {
+      assertWithMessage(field.getName())
+          .that(field.getType()).isNotEqualTo(AllStaticModule.class);
+    }
+  }
+
+  @Test public void allStaticProvidesModules_deprecatedMethodInComponentBuilder() {
+    for (Method method : DaggerStaticTestComponent.Builder.class.getDeclaredMethods()) {
+      if (Arrays.asList(method.getParameterTypes()).contains(AllStaticModule.class)) {
+        assertWithMessage(method.getName())
+            .that(method.isAnnotationPresent(Deprecated.class))
+            .isTrue();
+      }
+    }
+  }
 }
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/test/ProducerFactoryTest.java b/compiler/src/it/producers-functional-tests/src/test/java/test/ProducerFactoryTest.java
index 45e298a05..4c347318a 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/test/ProducerFactoryTest.java
+++ b/compiler/src/it/producers-functional-tests/src/test/java/test/ProducerFactoryTest.java
@@ -15,14 +15,23 @@
 */
 package test;
 
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.inOrder;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.when;
+
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.MoreExecutors;
 import com.google.common.util.concurrent.SettableFuture;
+
 import dagger.producers.Producer;
 import dagger.producers.monitoring.ProducerMonitor;
 import dagger.producers.monitoring.ProducerToken;
 import dagger.producers.monitoring.ProductionComponentMonitor;
-import java.util.concurrent.ExecutionException;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -31,13 +40,7 @@
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static com.google.common.truth.Truth.assertThat;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.inOrder;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
+import java.util.concurrent.ExecutionException;
 
 @RunWith(JUnit4.class)
 public class ProducerFactoryTest {
@@ -53,10 +56,9 @@ public void setUpMocks() {
   @Test
   public void noArgMethod() throws Exception {
     ProducerToken token = ProducerToken.create(SimpleProducerModule_StrFactory.class);
-    SimpleProducerModule module = new SimpleProducerModule();
     Producer<String> producer =
         new SimpleProducerModule_StrFactory(
-            componentMonitor, module, MoreExecutors.directExecutor());
+            componentMonitor, MoreExecutors.directExecutor());
     assertThat(producer.get().get()).isEqualTo("str");
     InOrder order = inOrder(componentMonitor, monitor);
     order.verify(componentMonitor).producerMonitorFor(token);
@@ -67,12 +69,11 @@ public void noArgMethod() throws Exception {
   }
 
   @Test public void singleArgMethod() throws Exception {
-    SimpleProducerModule module = new SimpleProducerModule();
     SettableFuture<Integer> intFuture = SettableFuture.create();
     Producer<Integer> intProducer = producerOfFuture(intFuture);
     Producer<String> producer =
         new SimpleProducerModule_StrWithArgFactory(
-            componentMonitor, module, MoreExecutors.directExecutor(), intProducer);
+            componentMonitor, MoreExecutors.directExecutor(), intProducer);
     assertThat(producer.get().isDone()).isFalse();
     intFuture.set(42);
     assertThat(producer.get().get()).isEqualTo("str with arg");
@@ -82,13 +83,12 @@ public void noArgMethod() throws Exception {
   public void successMonitor() throws Exception {
     ProducerToken token = ProducerToken.create(SimpleProducerModule_SettableFutureStrFactory.class);
 
-    SimpleProducerModule module = new SimpleProducerModule();
     SettableFuture<String> strFuture = SettableFuture.create();
     SettableFuture<SettableFuture<String>> strFutureFuture = SettableFuture.create();
     Producer<SettableFuture<String>> strFutureProducer = producerOfFuture(strFutureFuture);
     Producer<String> producer =
         new SimpleProducerModule_SettableFutureStrFactory(
-            componentMonitor, module, MoreExecutors.directExecutor(), strFutureProducer);
+            componentMonitor, MoreExecutors.directExecutor(), strFutureProducer);
     assertThat(producer.get().isDone()).isFalse();
 
     InOrder order = inOrder(componentMonitor, monitor);
@@ -110,13 +110,12 @@ public void successMonitor() throws Exception {
   public void failureMonitor() throws Exception {
     ProducerToken token = ProducerToken.create(SimpleProducerModule_SettableFutureStrFactory.class);
 
-    SimpleProducerModule module = new SimpleProducerModule();
     SettableFuture<String> strFuture = SettableFuture.create();
     SettableFuture<SettableFuture<String>> strFutureFuture = SettableFuture.create();
     Producer<SettableFuture<String>> strFutureProducer = producerOfFuture(strFutureFuture);
     Producer<String> producer =
         new SimpleProducerModule_SettableFutureStrFactory(
-            componentMonitor, module, MoreExecutors.directExecutor(), strFutureProducer);
+            componentMonitor, MoreExecutors.directExecutor(), strFutureProducer);
     assertThat(producer.get().isDone()).isFalse();
 
     InOrder order = inOrder(componentMonitor, monitor);
@@ -144,10 +143,9 @@ public void failureMonitor() throws Exception {
   public void failureMonitorDueToThrowingProducer() throws Exception {
     ProducerToken token = ProducerToken.create(SimpleProducerModule_ThrowingProducerFactory.class);
 
-    SimpleProducerModule module = new SimpleProducerModule();
     Producer<String> producer =
         new SimpleProducerModule_ThrowingProducerFactory(
-            componentMonitor, module, MoreExecutors.directExecutor());
+            componentMonitor, MoreExecutors.directExecutor());
     assertThat(producer.get().isDone()).isTrue();
 
     InOrder order = inOrder(componentMonitor, monitor);
@@ -168,9 +166,8 @@ public void failureMonitorDueToThrowingProducer() throws Exception {
 
   @Test
   public void nullComponentMonitor() throws Exception {
-    SimpleProducerModule module = new SimpleProducerModule();
     Producer<String> producer =
-        new SimpleProducerModule_StrFactory(null, module, MoreExecutors.directExecutor());
+        new SimpleProducerModule_StrFactory(null, MoreExecutors.directExecutor());
     assertThat(producer.get().get()).isEqualTo("str");
     verifyZeroInteractions(componentMonitor, monitor);
   }
@@ -180,10 +177,9 @@ public void nullMonitor() throws Exception {
     when(componentMonitor.producerMonitorFor(any(ProducerToken.class))).thenReturn(null);
 
     ProducerToken token = ProducerToken.create(SimpleProducerModule_StrFactory.class);
-    SimpleProducerModule module = new SimpleProducerModule();
     Producer<String> producer =
         new SimpleProducerModule_StrFactory(
-            componentMonitor, module, MoreExecutors.directExecutor());
+            componentMonitor, MoreExecutors.directExecutor());
     assertThat(producer.get().get()).isEqualTo("str");
     verify(componentMonitor).producerMonitorFor(token);
     verifyZeroInteractions(monitor);
diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index 10d4214b9..05973af36 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -110,6 +110,7 @@
 import static dagger.internal.codegen.Util.getProvidedValueTypeOfMap;
 import static dagger.internal.codegen.Util.isMapWithNonProvidedValues;
 import static dagger.internal.codegen.writer.Snippet.memberSelectSnippet;
+import static dagger.internal.codegen.writer.Snippet.nullCheck;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PUBLIC;
@@ -226,7 +227,7 @@ protected MemberSelect getMemberSelect(BindingKey key) {
   protected Optional<MemberSelect> getMultibindingContributionSnippet(ContributionBinding binding) {
     return Optional.fromNullable(multibindingContributionSnippets.get(binding));
   }
-  
+
   /**
    * Returns the initialization state of the factory field for a binding key in this component.
    */
@@ -303,8 +304,16 @@ protected void addBuilder() {
     constructorWriter.addParameter(builderWriter, "builder");
     constructorWriter.body().addSnippet("assert builder != null;");
 
+    builderFields = addBuilderMethods(builderWriter, builderSpec, buildMethod);
+    buildMethod.body().addSnippet("return new %s(this);", name);
+  }
+
+  private ImmutableMap<TypeElement, FieldWriter> addBuilderMethods(
+      ClassWriter builderWriter, Optional<BuilderSpec> builderSpec, MethodWriter buildMethod) {
     ImmutableMap.Builder<TypeElement, FieldWriter> builderFieldsBuilder = ImmutableMap.builder();
-    for (TypeElement contributionElement : graph.componentRequirements()) {
+    ImmutableSet<TypeElement> componentRequirements = graph.componentRequirements();
+
+    for (TypeElement contributionElement : componentRequirements) {
       String contributionName = simpleVariableName(contributionElement);
       FieldWriter builderField = builderWriter.addField(contributionElement, contributionName);
       builderField.addModifiers(PRIVATE);
@@ -344,10 +353,7 @@ protected void addBuilder() {
       builderMethod.addParameter(contributionElement, contributionName);
       builderMethod
           .body()
-          .addSnippet("if (%s == null) {", contributionName)
-          .addSnippet(
-              "  throw new NullPointerException(%s);", StringLiteral.forValue(contributionName))
-          .addSnippet("}")
+          .addSnippet(nullCheck(contributionName))
           .addSnippet("this.%s = %s;", builderField.name(), contributionName);
       if (!builderMethod.returnType().equals(VoidName.VOID)) {
         builderMethod.body().addSnippet("return this;");
@@ -359,7 +365,7 @@ protected void addBuilder() {
        * component requirements that are in the builder spec but _not_ owned by the component must
        * be inherited. */
       for (TypeElement inheritedRequirement :
-          Sets.difference(builderSpec.get().methodMap().keySet(), graph.componentRequirements())) {
+          Sets.difference(builderSpec.get().methodMap().keySet(), componentRequirements)) {
         MethodWriter builderMethod =
             addBuilderMethodFromSpec(
                 builderWriter, builderSpec.get().methodMap().get(inheritedRequirement));
@@ -375,10 +381,23 @@ protected void addBuilder() {
                     "%s cannot be set because it is inherited from the enclosing component"),
                 ClassName.fromTypeElement(inheritedRequirement));
       }
+    } else {
+      for (TypeElement ownedButNotRequired :
+          Sets.difference(graph.ownedModuleTypes(), componentRequirements)) {
+        String contributionName = simpleVariableName(ownedButNotRequired);
+        MethodWriter builderMethod =
+            builderWriter.addMethod(builderWriter, contributionName);
+        builderMethod.addModifiers(PUBLIC);
+        builderMethod.annotate(Deprecated.class);
+        builderMethod.addParameter(ownedButNotRequired, contributionName);
+        builderMethod.body()
+            .addSnippet("// This module is declared, but not used in the component. "
+                + "This method is a no-op")
+            .addSnippet(nullCheck(contributionName))
+            .addSnippet("return this;");
+      }
     }
-
-    builderFields = builderFieldsBuilder.build();
-    buildMethod.body().addSnippet("return new %s(this);", name);
+    return builderFieldsBuilder.build();
   }
 
   private MethodWriter addBuilderMethodFromSpec(
@@ -966,7 +985,9 @@ private Snippet initializeFactoryForProductionBinding(ProductionBinding binding)
             Lists.newArrayListWithCapacity(binding.dependencies().size() + 3);
         // TODO(beder): Pass the actual ProductionComponentMonitor.
         parameters.add(Snippet.format("null"));
-        parameters.add(getComponentContributionSnippet(binding.bindingTypeElement()));
+        if (!binding.bindingElement().getModifiers().contains(STATIC)) {
+          parameters.add(getComponentContributionSnippet(binding.bindingTypeElement()));
+        }
         parameters.add(
             getComponentContributionSnippet(
                 graph.componentDescriptor().executorDependency().get()));
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index 6c40ee0b1..c468046ca 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -18,6 +18,7 @@
 import com.google.auto.common.MoreTypes;
 import com.google.auto.value.AutoValue;
 import com.google.common.base.Equivalence;
+import com.google.common.base.Function;
 import com.google.common.base.Optional;
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
@@ -29,6 +30,7 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import com.google.common.collect.TreeTraverser;
 import dagger.Component;
 import dagger.Subcomponent;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
@@ -51,13 +53,16 @@
 import javax.lang.model.util.Elements;
 
 import static com.google.auto.common.MoreElements.getAnnotationMirror;
+import static com.google.common.base.Predicates.in;
 import static com.google.common.base.Verify.verify;
+import static dagger.internal.codegen.BindingKey.Kind.CONTRIBUTION;
 import static dagger.internal.codegen.ComponentDescriptor.isComponentContributionMethod;
 import static dagger.internal.codegen.ComponentDescriptor.isComponentProductionMethod;
 import static dagger.internal.codegen.ComponentDescriptor.Kind.PRODUCTION_COMPONENT;
 import static dagger.internal.codegen.ConfigurationAnnotations.getComponentDependencies;
 import static dagger.internal.codegen.MembersInjectionBinding.Strategy.INJECT_MEMBERS;
 import static dagger.internal.codegen.MembersInjectionBinding.Strategy.NO_OP;
+import static javax.lang.model.element.Modifier.STATIC;
 
 /**
  * The canonical representation of a full-resolved graph.
@@ -86,17 +91,47 @@
         .toSet();
   }
 
+  private static final TreeTraverser<BindingGraph> SUBGRAPH_TRAVERSER =
+      new TreeTraverser<BindingGraph>() {
+        @Override
+        public Iterable<BindingGraph> children(BindingGraph node) {
+          return node.subgraphs().values();
+        }
+      };
+
   /**
    * Returns the set of types necessary to implement the component, but are not part of the injected
    * graph.  This includes modules, component dependencies and an {@link Executor} in the case of
    * {@link ProductionComponent}.
    */
   ImmutableSet<TypeElement> componentRequirements() {
-    return new ImmutableSet.Builder<TypeElement>()
-        .addAll(ownedModuleTypes())
-        .addAll(componentDescriptor().dependencies())
-        .addAll(componentDescriptor().executorDependency().asSet())
-        .build();
+    return SUBGRAPH_TRAVERSER.preOrderTraversal(this)
+        .transformAndConcat(new Function<BindingGraph, Iterable<ResolvedBindings>>() {
+          @Override
+          public Iterable<ResolvedBindings> apply(BindingGraph input) {
+            return input.resolvedBindings().values();
+          }
+        })
+        .transformAndConcat(new Function<ResolvedBindings, Set<? extends ContributionBinding>>() {
+          @Override
+          public Set<? extends ContributionBinding> apply(ResolvedBindings input) {
+            return (input.bindingKey().kind().equals(CONTRIBUTION))
+                ? input.contributionBindings()
+                : ImmutableSet.<ContributionBinding>of();
+          }
+        })
+        .transformAndConcat(new Function<ContributionBinding, Set<TypeElement>>() {
+          @Override
+          public Set<TypeElement> apply(ContributionBinding input) {
+            return input.bindingElement().getModifiers().contains(STATIC)
+                ? ImmutableSet.<TypeElement>of()
+                : input.contributedBy().asSet();
+          }
+        })
+        .filter(in(ownedModuleTypes()))
+        .append(componentDescriptor().dependencies())
+        .append(componentDescriptor().executorDependency().asSet())
+        .toSet();
   }
 
   ImmutableSet<TypeElement> availableDependencies() {
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index 4a81f538d..f0f4ae1ab 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -64,6 +64,7 @@
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PROTECTED;
 import static javax.lang.model.element.Modifier.PUBLIC;
+import static javax.lang.model.element.Modifier.STATIC;
 
 /**
  * Generates {@link Producer} implementations from {@link ProductionBinding} instances.
@@ -119,11 +120,14 @@ ClassName nameGeneratedType(ProductionBinding binding) {
             ClassName.fromClass(ProducerToken.class),
             factoryWriter.name());
 
-    factoryWriter.addField(binding.bindingTypeElement(), "module").addModifiers(PRIVATE, FINAL);
-    constructorWriter.addParameter(binding.bindingTypeElement(), "module");
-    constructorWriter.body()
-        .addSnippet("assert module != null;")
-        .addSnippet("this.module = module;");
+    if (!binding.bindingElement().getModifiers().contains(STATIC)) {
+      factoryWriter.addField(binding.bindingTypeElement(), "module")
+          .addModifiers(PRIVATE, FINAL);
+      constructorWriter.addParameter(binding.bindingTypeElement(), "module");
+      constructorWriter.body()
+          .addSnippet("assert module != null;")
+          .addSnippet("this.module = module;");
+    }
 
     factoryWriter.addField(Executor.class, "executor")
         .addModifiers(PRIVATE, FINAL);
@@ -383,6 +387,13 @@ static InvocationSnippets create(
    */
   private InvocationSnippets getInvocationSnippets(
       boolean wrapWithFuture, ProductionBinding binding, ImmutableList<Snippet> parameterSnippets) {
+     Snippet moduleSnippet = Snippet.format("%s.%s(%s)",
+        binding.bindingElement().getModifiers().contains(STATIC)
+            ? ClassName.fromTypeElement(binding.bindingTypeElement())
+            : "module",
+        binding.bindingElement().getSimpleName(),
+        makeParametersSnippet(parameterSnippets));
+
     // NOTE(beder): We don't worry about catching exeptions from the monitor methods themselves
     // because we'll wrap all monitoring in non-throwing monitors before we pass them to the
     // factories.
@@ -398,12 +409,11 @@ private InvocationSnippets getInvocationSnippets(
             Joiner.on('\n')
                 .join(
                     "try {",
-                    "  value = module.%s(%s);",
+                    "  value = %s;",
                     "} finally {",
                     "  if (monitor != null) { monitor.methodFinished(); }",
                     "}"),
-            binding.bindingElement().getSimpleName(),
-            makeParametersSnippet(parameterSnippets)));
+            moduleSnippet));
     final Snippet valueSnippet;
     if (binding.productionType().equals(Produces.Type.SET)) {
       if (binding.bindingKind().equals(ProductionBinding.Kind.FUTURE_PRODUCTION)) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/Snippet.java b/compiler/src/main/java/dagger/internal/codegen/writer/Snippet.java
index 5c0c75989..b23f831a5 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/Snippet.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/Snippet.java
@@ -110,6 +110,16 @@ public static Snippet memberSelectSnippet(Iterable<? extends Object> selectors)
         selectors);
   }
 
+  public static Snippet nullCheck(Object thingToCheck) {
+    return format("if (%s == null) { throw new NullPointerException();} ", thingToCheck);
+  }
+
+  public static Snippet nullCheck(Object thingToCheck, String message) {
+    return format("if (%s == null) { throw new NullPointerException(%s);} ",
+        thingToCheck,
+        StringLiteral.forValue(message));
+  }
+
   public static Snippet makeParametersSnippet(Iterable<Snippet> parameterSnippets) {
     Iterator<Snippet> iterator = parameterSnippets.iterator();
     StringBuilder stringBuilder = new StringBuilder();
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
index de59af6ec..187712abb 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
@@ -29,10 +29,10 @@
 /** Tests for {@link dagger.Component.Builder} */
 @RunWith(JUnit4.class)
 public class ComponentBuilderTest {
-  
+
   private static final ErrorMessages.ComponentBuilderMessages MSGS =
       ErrorMessages.ComponentBuilderMessages.INSTANCE;
-  
+
   @Test
   public void testEmptyBuilder() {
     JavaFileObject injectableTypeFile = JavaFileObjects.forSourceLines("test.SomeInjectableType",
@@ -57,7 +57,7 @@ public void testEmptyBuilder() {
         "  @Component.Builder",
         "  static interface Builder {",
         "     SimpleComponent build();",
-        "  }",        
+        "  }",
         "}");
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
         "test.DaggerSimpleComponent",
@@ -101,7 +101,7 @@ public void testEmptyBuilder() {
         .compilesWithoutError()
         .and().generatesSources(generatedComponent);
   }
-  
+
   @Test
   public void testUsesBuildAndSetterNames() {
     JavaFileObject moduleFile = JavaFileObjects.forSourceLines("test.TestModule",
@@ -178,7 +178,7 @@ public void testUsesBuildAndSetterNames() {
         "    @Override",
         "    public Builder setTestModule(TestModule testModule) {",
         "      if (testModule == null) {",
-        "        throw new NullPointerException(\"testModule\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.testModule = testModule;",
         "      return this;",
@@ -191,7 +191,7 @@ public void testUsesBuildAndSetterNames() {
         .compilesWithoutError()
         .and().generatesSources(generatedComponent);
   }
-  
+
   @Test
   public void testIgnoresModulesNotInApi() {
     JavaFileObject module1 = JavaFileObjects.forSourceLines("test.TestModule1",
@@ -290,7 +290,7 @@ public void testIgnoresModulesNotInApi() {
         "    @Override",
         "    public Builder testModule1(TestModule1 testModule1) {",
         "      if (testModule1 == null) {",
-        "        throw new NullPointerException(\"testModule1\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.testModule1 = testModule1;",
         "      return this;",
@@ -303,7 +303,7 @@ public void testIgnoresModulesNotInApi() {
         .compilesWithoutError()
         .and().generatesSources(generatedComponent);
   }
-  
+
   @Test
   public void testMoreThanOneBuilderFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -323,7 +323,7 @@ public void testMoreThanOneBuilderFails() {
         "  @Component.Builder",
         "  interface Builder2 {",
         "     SimpleComponent build();",
-        "  }",           
+        "  }",
         "}");
     assertAbout(javaSource()).that(componentFile)
         .processedWith(new ComponentProcessor())
@@ -332,7 +332,7 @@ public void testMoreThanOneBuilderFails() {
             "[test.SimpleComponent.Builder, test.SimpleComponent.Builder2]"))
         .in(componentFile);
   }
-  
+
   @Test
   public void testBuilderGenericsFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -347,7 +347,7 @@ public void testBuilderGenericsFails() {
         "  @Component.Builder",
         "  interface Builder<T> {",
         "     SimpleComponent build();",
-        "  }",           
+        "  }",
         "}");
     assertAbout(javaSource()).that(componentFile)
         .processedWith(new ComponentProcessor())
@@ -355,7 +355,7 @@ public void testBuilderGenericsFails() {
         .withErrorContaining(MSGS.generics())
         .in(componentFile);
   }
-  
+
   @Test
   public void testBuilderNotInComponentFails() {
     JavaFileObject builder = JavaFileObjects.forSourceLines("test.Builder",
@@ -371,7 +371,7 @@ public void testBuilderNotInComponentFails() {
         .withErrorContaining(MSGS.mustBeInComponent())
         .in(builder);
   }
-  
+
   @Test
   public void testBuilderMissingBuildMethodFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -392,7 +392,7 @@ public void testBuilderMissingBuildMethodFails() {
         .withErrorContaining(MSGS.missingBuildMethod())
         .in(componentFile);
   }
-  
+
   @Test
   public void testPrivateBuilderFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -413,7 +413,7 @@ public void testPrivateBuilderFails() {
         .withErrorContaining(MSGS.isPrivate())
         .in(componentFile);
   }
-  
+
   @Test
   public void testNonStaticBuilderFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -434,7 +434,7 @@ public void testNonStaticBuilderFails() {
         .withErrorContaining(MSGS.mustBeStatic())
         .in(componentFile);
   }
-  
+
   @Test
   public void testNonAbstractBuilderFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -454,7 +454,7 @@ public void testNonAbstractBuilderFails() {
         .failsToCompile()
         .withErrorContaining(MSGS.mustBeAbstract());
   }
-  
+
   @Test
   public void testBuilderOneCxtorWithArgsFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -477,7 +477,7 @@ public void testBuilderOneCxtorWithArgsFails() {
         .withErrorContaining(MSGS.cxtorOnlyOneAndNoArgs())
         .in(componentFile);
   }
-  
+
   @Test
   public void testBuilderMoreThanOneCxtorFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -501,7 +501,7 @@ public void testBuilderMoreThanOneCxtorFails() {
         .withErrorContaining(MSGS.cxtorOnlyOneAndNoArgs())
         .in(componentFile);
   }
-  
+
   @Test
   public void testBuilderEnumFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -522,7 +522,7 @@ public void testBuilderEnumFails() {
         .withErrorContaining(MSGS.mustBeClassOrInterface())
         .in(componentFile);
   }
-  
+
   @Test
   public void testBuilderBuildReturnsWrongTypeFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -545,7 +545,7 @@ public void testBuilderBuildReturnsWrongTypeFails() {
         .withErrorContaining(MSGS.buildMustReturnComponentType())
             .in(componentFile).onLine(11);
   }
-  
+
   @Test
   public void testInheritedBuilderBuildReturnsWrongTypeFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -571,7 +571,7 @@ public void testInheritedBuilderBuildReturnsWrongTypeFails() {
             String.format(MSGS.inheritedBuildMustReturnComponentType(), "build"))
             .in(componentFile).onLine(14);
   }
-  
+
   @Test
   public void testTwoBuildMethodsFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -595,7 +595,7 @@ public void testTwoBuildMethodsFails() {
         .withErrorContaining(String.format(MSGS.twoBuildMethods(), "build()"))
             .in(componentFile).onLine(12);
   }
-  
+
   @Test
   public void testInheritedTwoBuildMethodsFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -622,7 +622,7 @@ public void testInheritedTwoBuildMethodsFails() {
             String.format(MSGS.inheritedTwoBuildMethods(), "create()", "build()"))
             .in(componentFile).onLine(15);
   }
-  
+
   @Test
   public void testMoreThanOneArgFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -649,7 +649,7 @@ public void testMoreThanOneArgFails() {
         .and().withErrorContaining(MSGS.methodsMustTakeOneArg())
             .in(componentFile).onLine(13);
   }
-  
+
   @Test
   public void testInheritedMoreThanOneArgFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -677,7 +677,7 @@ public void testInheritedMoreThanOneArgFails() {
                 "set1(java.lang.String,java.lang.Integer)"))
             .in(componentFile).onLine(15);
   }
-  
+
   @Test
   public void testSetterReturningNonVoidOrBuilderFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -701,7 +701,7 @@ public void testSetterReturningNonVoidOrBuilderFails() {
         .withErrorContaining(MSGS.methodsMustReturnVoidOrBuilder())
             .in(componentFile).onLine(12);
   }
-  
+
   @Test
   public void testInheritedSetterReturningNonVoidOrBuilderFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -727,9 +727,9 @@ public void testInheritedSetterReturningNonVoidOrBuilderFails() {
         .withErrorContaining(
             String.format(MSGS.inheritedMethodsMustReturnVoidOrBuilder(),
                 "set(java.lang.Integer)"))
-            .in(componentFile).onLine(15);    
+            .in(componentFile).onLine(15);
   }
-  
+
   @Test
   public void testGenericsOnSetterMethodFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -753,7 +753,7 @@ public void testGenericsOnSetterMethodFails() {
         .withErrorContaining(MSGS.methodsMayNotHaveTypeParameters())
             .in(componentFile).onLine(12);
   }
-  
+
   @Test
   public void testGenericsOnInheritedSetterMethodFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -778,9 +778,9 @@ public void testGenericsOnInheritedSetterMethodFails() {
         .failsToCompile()
         .withErrorContaining(
             String.format(MSGS.inheritedMethodsMayNotHaveTypeParameters(), "<T>set(T)"))
-            .in(componentFile).onLine(15);    
+            .in(componentFile).onLine(15);
   }
-  
+
   @Test
   public void testMultipleSettersPerTypeFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -807,7 +807,7 @@ public void testMultipleSettersPerTypeFails() {
                   "java.lang.String", "[set1(java.lang.String), set2(java.lang.String)]"))
             .in(componentFile).onLine(10);
   }
-  
+
   @Test
   public void testMultipleSettersPerTypeIncludingResolvedGenericsFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -837,7 +837,7 @@ public void testMultipleSettersPerTypeIncludingResolvedGenericsFails() {
                   "java.lang.String", "[set1(T), set2(java.lang.String)]"))
             .in(componentFile).onLine(14);
   }
-  
+
   @Test
   public void testExtraSettersFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
@@ -864,9 +864,9 @@ public void testExtraSettersFails() {
                   "[void test.SimpleComponent.Builder.set1(String),"
                   + " void test.SimpleComponent.Builder.set2(Integer)]"))
             .in(componentFile).onLine(10);
-    
+
   }
-  
+
   @Test
   public void testMissingSettersFail() {
     JavaFileObject moduleFile = JavaFileObjects.forSourceLines("test.TestModule",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index 873720270..66c79d08f 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -525,7 +525,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "",
         "    public Builder testModule(TestModule testModule) {",
         "      if (testModule == null) {",
-        "        throw new NullPointerException(\"testModule\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.testModule = testModule;",
         "      return this;",
@@ -631,83 +631,58 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "  }",
         "",
         "  public static final class Builder {",
-        "    private TestModule testModule;",
-        "    private ParentTestIncluded parentTestIncluded;",
-        "    private AlwaysIncluded alwaysIncluded;",
-        "    private DepModule depModule;",
-        "    private ParentDepIncluded parentDepIncluded;",
-        "    private RefByDep refByDep;",
-        "",
         "    private Builder() {",
         "    }",
         "",
         "    public TestComponent build() {",
-        "      if (testModule == null) {",
-        "        this.testModule = new TestModule();",
-        "      }",
-        "      if (parentTestIncluded == null) {",
-        "        this.parentTestIncluded = new ParentTestIncluded();",
-        "      }",
-        "      if (alwaysIncluded == null) {",
-        "        this.alwaysIncluded = new AlwaysIncluded();",
-        "      }",
-        "      if (depModule == null) {",
-        "        this.depModule = new DepModule();",
-        "      }",
-        "      if (parentDepIncluded == null) {",
-        "        this.parentDepIncluded = new ParentDepIncluded();",
-        "      }",
-        "      if (refByDep == null) {",
-        "        this.refByDep = new RefByDep();",
-        "      }",
         "      return new DaggerTestComponent(this);",
         "    }",
         "",
+        "    @Deprecated",
         "    public Builder testModule(TestModule testModule) {",
         "      if (testModule == null) {",
-        "        throw new NullPointerException(\"testModule\");",
+        "        throw new NullPointerException();",
         "      }",
-        "      this.testModule = testModule;",
         "      return this;",
         "    }",
         "",
+        "    @Deprecated",
         "    public Builder parentTestIncluded(ParentTestIncluded parentTestIncluded) {",
         "      if (parentTestIncluded == null) {",
-        "        throw new NullPointerException(\"parentTestIncluded\");",
+        "        throw new NullPointerException();",
         "      }",
-        "      this.parentTestIncluded = parentTestIncluded;",
         "      return this;",
         "    }",
         "",
+        "    @Deprecated",
         "    public Builder alwaysIncluded(AlwaysIncluded alwaysIncluded) {",
         "      if (alwaysIncluded == null) {",
-        "        throw new NullPointerException(\"alwaysIncluded\");",
+        "        throw new NullPointerException();",
         "      }",
-        "      this.alwaysIncluded = alwaysIncluded;",
         "      return this;",
         "    }",
         "",
+        "    @Deprecated",
         "    public Builder depModule(DepModule depModule) {",
         "      if (depModule == null) {",
-        "        throw new NullPointerException(\"depModule\");",
+        "        throw new NullPointerException();",
         "      }",
-        "      this.depModule = depModule;",
         "      return this;",
         "    }",
         "",
+        "    @Deprecated",
         "    public Builder parentDepIncluded(ParentDepIncluded parentDepIncluded) {",
         "      if (parentDepIncluded == null) {",
-        "        throw new NullPointerException(\"parentDepIncluded\");",
+        "        throw new NullPointerException();",
         "      }",
-        "      this.parentDepIncluded = parentDepIncluded;",
         "      return this;",
         "    }",
         "",
+        "    @Deprecated",
         "    public Builder refByDep(RefByDep refByDep) {",
         "      if (refByDep == null) {",
-        "        throw new NullPointerException(\"refByDep\");",
+        "        throw new NullPointerException();",
         "      }",
-        "      this.refByDep = refByDep;",
         "      return this;",
         "    }",
         "  }",
@@ -933,7 +908,7 @@ public void generatedModuleInSubcomponent() {
         "",
         "    public Builder emptySetModule(EmptySetModule emptySetModule) {",
         "      if (emptySetModule == null) {",
-        "        throw new NullPointerException(\"emptySetModule\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.emptySetModule = emptySetModule;",
         "      return this;",
@@ -941,7 +916,7 @@ public void generatedModuleInSubcomponent() {
         "",
         "    public Builder setModule(SetModule setModule) {",
         "      if (setModule == null) {",
-        "        throw new NullPointerException(\"setModule\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.setModule = setModule;",
         "      return this;",
@@ -1368,7 +1343,7 @@ public void generatedModuleInSubcomponent() {
         "",
         "    public Builder aComponent(AComponent aComponent) {",
         "      if (aComponent == null) {",
-        "        throw new NullPointerException(\"aComponent\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.aComponent = aComponent;",
         "      return this;",
@@ -1487,7 +1462,7 @@ public void generatedModuleInSubcomponent() {
         "",
         "    public Builder testModule(test.TestModule testModule) {",
         "      if (testModule == null) {",
-        "        throw new NullPointerException(\"testModule\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.testModule = testModule;",
         "      return this;",
@@ -1495,7 +1470,7 @@ public void generatedModuleInSubcomponent() {
         "",
         "    public Builder testModule(TestModule testModule) {",
         "      if (testModule == null) {",
-        "        throw new NullPointerException(\"testModule\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.testModule1 = testModule;",
         "      return this;",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 9e7f0665f..5f488c814 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -175,7 +175,7 @@ public void mapBindingsWithEnumKey() {
         "",
         "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
         "      if (mapModuleOne == null) {",
-        "        throw new NullPointerException(\"mapModuleOne\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.mapModuleOne = mapModuleOne;",
         "      return this;",
@@ -183,7 +183,7 @@ public void mapBindingsWithEnumKey() {
         "",
         "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
         "      if (mapModuleTwo == null) {",
-        "        throw new NullPointerException(\"mapModuleTwo\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.mapModuleTwo = mapModuleTwo;",
         "      return this;",
@@ -332,7 +332,7 @@ public void mapBindingsWithStringKey() {
         "",
         "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
         "      if (mapModuleOne == null) {",
-        "        throw new NullPointerException(\"mapModuleOne\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.mapModuleOne = mapModuleOne;",
         "      return this;",
@@ -340,7 +340,7 @@ public void mapBindingsWithStringKey() {
         "",
         "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
         "      if (mapModuleTwo == null) {",
-        "        throw new NullPointerException(\"mapModuleTwo\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.mapModuleTwo = mapModuleTwo;",
         "      return this;",
@@ -500,7 +500,7 @@ public void mapBindingsWithWrappedKey() {
         "",
         "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
         "      if (mapModuleOne == null) {",
-        "        throw new NullPointerException(\"mapModuleOne\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.mapModuleOne = mapModuleOne;",
         "      return this;",
@@ -508,7 +508,7 @@ public void mapBindingsWithWrappedKey() {
         "",
         "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
         "      if (mapModuleTwo == null) {",
-        "        throw new NullPointerException(\"mapModuleTwo\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.mapModuleTwo = mapModuleTwo;",
         "      return this;",
@@ -674,7 +674,7 @@ public void mapBindingsWithNonProviderValue() {
         "",
         "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
         "      if (mapModuleOne == null) {",
-        "        throw new NullPointerException(\"mapModuleOne\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.mapModuleOne = mapModuleOne;",
         "      return this;",
@@ -682,7 +682,7 @@ public void mapBindingsWithNonProviderValue() {
         "",
         "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
         "      if (mapModuleTwo == null) {",
-        "        throw new NullPointerException(\"mapModuleTwo\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.mapModuleTwo = mapModuleTwo;",
         "      return this;",
@@ -779,7 +779,7 @@ public void injectMapWithoutMapBinding() {
         "",
         "    public Builder mapModule(MapModule mapModule) {",
         "      if (mapModule == null) {",
-        "        throw new NullPointerException(\"mapModule\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.mapModule = mapModule;",
         "      return this;",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
index 70f6479d5..bc8a2660e 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -264,7 +264,7 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "",
         "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
         "      if (mapModuleOne == null) {",
-        "        throw new NullPointerException(\"mapModuleOne\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.mapModuleOne = mapModuleOne;",
         "      return this;",
@@ -272,7 +272,7 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "",
         "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
         "      if (mapModuleTwo == null) {",
-        "        throw new NullPointerException(\"mapModuleTwo\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.mapModuleTwo = mapModuleTwo;",
         "      return this;",
@@ -439,7 +439,7 @@ public void mapKeyComponentFileWithDefaultField() {
         "",
         "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
         "      if (mapModuleOne == null) {",
-        "        throw new NullPointerException(\"mapModuleOne\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.mapModuleOne = mapModuleOne;",
         "      return this;",
@@ -447,7 +447,7 @@ public void mapKeyComponentFileWithDefaultField() {
         "",
         "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
         "      if (mapModuleTwo == null) {",
-        "        throw new NullPointerException(\"mapModuleTwo\");",
+        "        throw new NullPointerException();",
         "      }",
         "      this.mapModuleTwo = mapModuleTwo;",
         "      return this;",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 4128539eb..e30b5d864 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -123,103 +123,100 @@
         "    ListenableFuture<A> a();",
         "  }",
         "}");
-    JavaFileObject generatedComponent =
-        JavaFileObjects.forSourceLines(
-            "test.DaggerTestClass_SimpleComponent",
-            "package test;",
-            "",
-            "import com.google.common.util.concurrent.ListenableFuture;",
-            "import dagger.producers.Producer;",
-            "import dagger.producers.internal.Producers;",
-            "import java.util.concurrent.Executor;",
-            "import javax.annotation.Generated;",
-            "import javax.inject.Provider;",
-            "import test.TestClass.A;",
-            "import test.TestClass.AModule;",
-            "import test.TestClass.B;",
-            "import test.TestClass.BModule;",
-            "import test.TestClass.SimpleComponent;",
-            "",
-            "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-            "public final class DaggerTestClass_SimpleComponent implements SimpleComponent {",
-            "  private Provider<B> bProvider;",
-            "  private Producer<A> aProducer;",
-            "",
-            "  private DaggerTestClass_SimpleComponent(Builder builder) {",
-            "    assert builder != null;",
-            "    initialize(builder);",
-            "  }",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  private void initialize(final Builder builder) {",
-            "    this.bProvider = TestClass$BModule_BFactory.create(",
-            "        builder.bModule, TestClass$C_Factory.create());",
-            "    this.aProducer = new TestClass$AModule_AFactory(",
-            "        null,",
-            "        builder.aModule,",
-            "        builder.executor,",
-            "        Producers.producerFromProvider(bProvider));",
-            "  }",
-            "",
-            "  @Override",
-            "  public ListenableFuture<A> a() {",
-            "    return aProducer.get();",
-            "  }",
-            "",
-            "  public static final class Builder {",
-            "    private AModule aModule;",
-            "    private BModule bModule;",
-            "    private Executor executor;",
-            "",
-            "    private Builder() {",
-            "    }",
-            "",
-            "    public SimpleComponent build() {",
-            "      if (aModule == null) {",
-            "        this.aModule = new AModule();",
-            "      }",
-            "      if (bModule == null) {",
-            "        this.bModule = new BModule();",
-            "      }",
-            "      if (executor == null) {",
-            "        throw new IllegalStateException(\"executor must be set\");",
-            "      }",
-            "      return new DaggerTestClass_SimpleComponent(this);",
-            "    }",
-            "",
-            "    public Builder aModule(AModule aModule) {",
-            "      if (aModule == null) {",
-            "        throw new NullPointerException(\"aModule\");",
-            "      }",
-            "      this.aModule = aModule;",
-            "      return this;",
-            "    }",
-            "",
-            "    public Builder bModule(BModule bModule) {",
-            "      if (bModule == null) {",
-            "        throw new NullPointerException(\"bModule\");",
-            "      }",
-            "      this.bModule = bModule;",
-            "      return this;",
-            "    }",
-            "",
-            "    public Builder executor(Executor executor) {",
-            "      if (executor == null) {",
-            "        throw new NullPointerException(\"executor\");",
-            "      }",
-            "      this.executor = executor;",
-            "      return this;",
-            "    }",
-            "  }",
-            "}");
-    assertAbout(javaSource())
-        .that(component)
+    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
+        "test.DaggerTestClass_SimpleComponent",
+        "package test;",
+        "",
+        "import com.google.common.util.concurrent.ListenableFuture;",
+        "import dagger.producers.Producer;",
+        "import dagger.producers.internal.Producers;",
+        "import java.util.concurrent.Executor;",
+        "import javax.annotation.Generated;",
+        "import javax.inject.Provider;",
+        "import test.TestClass.A;",
+        "import test.TestClass.AModule;",
+        "import test.TestClass.B;",
+        "import test.TestClass.BModule;",
+        "import test.TestClass.SimpleComponent;",
+        "",
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        "public final class DaggerTestClass_SimpleComponent implements SimpleComponent {",
+        "  private Provider<B> bProvider;",
+        "  private Producer<A> aProducer;",
+        "",
+        "  private DaggerTestClass_SimpleComponent(Builder builder) {",
+        "    assert builder != null;",
+        "    initialize(builder);",
+        "  }",
+        "",
+        "  public static Builder builder() {",
+        "    return new Builder();",
+        "  }",
+        "",
+        "  private void initialize(final Builder builder) {",
+        "    this.bProvider = TestClass$BModule_BFactory.create(",
+        "        builder.bModule, TestClass$C_Factory.create());",
+        "    this.aProducer = new TestClass$AModule_AFactory(",
+		"        null,",
+		"        builder.aModule,",
+		"        builder.executor,",
+		"        Producers.producerFromProvider(bProvider));",
+		"  }",
+        "",
+        "  @Override",
+        "  public ListenableFuture<A> a() {",
+        "    return aProducer.get();",
+        "  }",
+        "",
+        "  public static final class Builder {",
+        "    private BModule bModule;",
+        "    private AModule aModule;",
+        "    private Executor executor;",
+        "",
+        "    private Builder() {",
+        "    }",
+        "",
+        "    public SimpleComponent build() {",
+        "      if (bModule == null) {",
+        "        this.bModule = new BModule();",
+        "      }",
+        "      if (aModule == null) {",
+        "        this.aModule = new AModule();",
+        "      }",
+        "      if (executor == null) {",
+        "        throw new IllegalStateException(\"executor must be set\");",
+        "      }",
+        "      return new DaggerTestClass_SimpleComponent(this);",
+        "    }",
+        "",
+        "    public Builder bModule(BModule bModule) {",
+        "      if (bModule == null) {",
+        "        throw new NullPointerException();",
+        "      }",
+        "      this.bModule = bModule;",
+        "      return this;",
+        "    }",
+        "",
+        "    public Builder aModule(AModule aModule) {",
+        "      if (aModule == null) {",
+        "        throw new NullPointerException();",
+        "      }",
+        "      this.aModule = aModule;",
+        "      return this;",
+        "    }",
+        "",
+        "    public Builder executor(Executor executor) {",
+        "      if (executor == null) {",
+        "        throw new NullPointerException();",
+        "      }",
+        "      this.executor = executor;",
+        "      return this;",
+        "    }",
+        "  }",
+        "}");
+    assertAbout(javaSource()).that(component)
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
-        .and()
-        .generatesSources(generatedComponent);
+        .and().generatesSources(generatedComponent);
   }
 }
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
index 349b2feee..40545039c 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
@@ -124,7 +124,7 @@
       "",
       "    public Builder primitiveModule(PrimitiveModule primitiveModule) {",
       "      if (primitiveModule == null) {",
-      "        throw new NullPointerException(\"primitiveModule\");",
+      "        throw new NullPointerException();",
       "      }",
       "      this.primitiveModule = primitiveModule;",
       "      return this;",
