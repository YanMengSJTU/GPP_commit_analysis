diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentProcessingStep.java
new file mode 100644
index 000000000..d54a04254
--- /dev/null
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentProcessingStep.java
@@ -0,0 +1,70 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.internal.codegen;
+
+import com.google.auto.common.BasicAnnotationProcessor.ProcessingStep;
+import com.google.common.collect.SetMultimap;
+import java.lang.annotation.Annotation;
+import java.util.Set;
+import javax.annotation.processing.Messager;
+import javax.lang.model.element.Element;
+
+/**
+ * A {@link ProcessingStep} that is responsible for dealing with a component or production component
+ * as part of the {@link ComponentProcessor}.
+ */
+abstract class AbstractComponentProcessingStep implements ProcessingStep {
+
+  private final Messager messager;
+  private final BindingGraphValidator bindingGraphValidator;
+  private final BindingGraph.Factory bindingGraphFactory;
+  private final ComponentGenerator componentGenerator;
+
+  AbstractComponentProcessingStep(
+      Messager messager,
+      BindingGraphValidator bindingGraphValidator,
+      BindingGraph.Factory bindingGraphFactory,
+      ComponentGenerator componentGenerator) {
+    this.messager = messager;
+    this.bindingGraphValidator = bindingGraphValidator;
+    this.bindingGraphFactory = bindingGraphFactory;
+    this.componentGenerator = componentGenerator;
+  }
+
+  @Override
+  public final void process(
+      SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation) {
+    for (ComponentDescriptor componentDescriptor : componentDescriptors(elementsByAnnotation)) {
+      BindingGraph bindingGraph = bindingGraphFactory.create(componentDescriptor);
+      ValidationReport<BindingGraph> graphReport = bindingGraphValidator.validate(bindingGraph);
+      graphReport.printMessagesTo(messager);
+      if (graphReport.isClean()) {
+        try {
+          componentGenerator.generate(bindingGraph);
+        } catch (SourceFileGenerationException e) {
+          e.printMessageTo(messager);
+        }
+      }
+    }
+  }
+
+  /**
+   * Returns a {@link ComponentDescriptor} for each valid component element for which an
+   * implementation class should be generated.
+   */
+  protected abstract Set<ComponentDescriptor> componentDescriptors(
+      SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation);
+}
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java
index 2d9fbab38..461dcd7fb 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -37,16 +37,13 @@
  *
  * @author Gregory Kick
  */
-final class ComponentProcessingStep implements ProcessingStep {
+final class ComponentProcessingStep extends AbstractComponentProcessingStep {
   private final Messager messager;
   private final ComponentValidator componentValidator;
   private final ComponentValidator subcomponentValidator;
   private final BuilderValidator componentBuilderValidator;
   private final BuilderValidator subcomponentBuilderValidator;
-  private final BindingGraphValidator bindingGraphValidator;
   private final ComponentDescriptor.Factory componentDescriptorFactory;
-  private final BindingGraph.Factory bindingGraphFactory;
-  private final ComponentGenerator componentGenerator;
 
   ComponentProcessingStep(
       Messager messager,
@@ -57,17 +54,18 @@
       BindingGraphValidator bindingGraphValidator,
       Factory componentDescriptorFactory,
       BindingGraph.Factory bindingGraphFactory,
-      ComponentGenerator componentGenerator
-  ) {
+      ComponentGenerator componentGenerator) {
+    super(
+        messager,
+        bindingGraphValidator,
+        bindingGraphFactory,
+        componentGenerator);
     this.messager = messager;
     this.componentValidator = componentValidator;
     this.subcomponentValidator = subcomponentValidator;
     this.componentBuilderValidator = componentBuilderValidator;
     this.subcomponentBuilderValidator = subcomponentBuilderValidator;
-    this.bindingGraphValidator = bindingGraphValidator;
     this.componentDescriptorFactory = componentDescriptorFactory;
-    this.bindingGraphFactory = bindingGraphFactory;
-    this.componentGenerator = componentGenerator;
   }
 
   @Override
@@ -77,19 +75,25 @@
   }
 
   @Override
-  public void process(SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation) {
+  protected ImmutableSet<ComponentDescriptor> componentDescriptors(
+      SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation) {
     Map<Element, ValidationReport<TypeElement>> builderReportsByComponent =
         processComponentBuilders(elementsByAnnotation.get(Component.Builder.class));
-    Set<? extends Element> subcomponentBuilderElements =
-        elementsByAnnotation.get(Subcomponent.Builder.class);
+    Set<Element> subcomponentBuilderElements = elementsByAnnotation.get(Subcomponent.Builder.class);
     Map<Element, ValidationReport<TypeElement>> builderReportsBySubcomponent =
         processSubcomponentBuilders(subcomponentBuilderElements);
-    Set<? extends Element> subcomponentElements = elementsByAnnotation.get(Subcomponent.class);
+    Set<Element> subcomponentElements = elementsByAnnotation.get(Subcomponent.class);
     Map<Element, ValidationReport<TypeElement>> reportsBySubcomponent =
         processSubcomponents(subcomponentElements, subcomponentBuilderElements);
-    Set<? extends Element> componentElements = elementsByAnnotation.get(Component.class);
-    processComponents(componentElements, builderReportsByComponent, subcomponentElements,
-        reportsBySubcomponent, subcomponentBuilderElements, builderReportsBySubcomponent);
+    Set<Element> componentElements = elementsByAnnotation.get(Component.class);
+
+    return componentDescriptors(
+        componentElements,
+        builderReportsByComponent,
+        subcomponentElements,
+        reportsBySubcomponent,
+        subcomponentBuilderElements,
+        builderReportsBySubcomponent);
   }
 
   private Map<Element, ValidationReport<TypeElement>> processComponentBuilders(
@@ -129,35 +133,26 @@ public void process(SetMultimap<Class<? extends Annotation>, Element> elementsBy
     return reportsBySubcomponent;
   }
 
-  private void processComponents(
-      Set<? extends Element> componentElements,
+  private ImmutableSet<ComponentDescriptor> componentDescriptors(
+      Set<Element> componentElements,
       Map<Element, ValidationReport<TypeElement>> builderReportsByComponent,
-      Set<? extends Element> subcomponentElements,
+      Set<Element> subcomponentElements,
       Map<Element, ValidationReport<TypeElement>> reportsBySubcomponent,
-      Set<? extends Element> subcomponentBuilderElements,
+      Set<Element> subcomponentBuilderElements,
       Map<Element, ValidationReport<TypeElement>> builderReportsBySubcomponent) {
+    ImmutableSet.Builder<ComponentDescriptor> componentDescriptors = ImmutableSet.builder();
     for (Element element : componentElements) {
       TypeElement componentTypeElement = MoreElements.asType(element);
-      ComponentValidationReport report = componentValidator.validate(
-          componentTypeElement, subcomponentElements, subcomponentBuilderElements);
+      ComponentValidationReport report =
+          componentValidator.validate(
+              componentTypeElement, subcomponentElements, subcomponentBuilderElements);
       report.report().printMessagesTo(messager);
-      if (isClean(report, builderReportsByComponent, reportsBySubcomponent,
-          builderReportsBySubcomponent)) {
-        ComponentDescriptor componentDescriptor =
-            componentDescriptorFactory.forComponent(componentTypeElement);
-        BindingGraph bindingGraph = bindingGraphFactory.create(componentDescriptor);
-        ValidationReport<BindingGraph> graphReport =
-            bindingGraphValidator.validate(bindingGraph);
-        graphReport.printMessagesTo(messager);
-        if (graphReport.isClean()) {
-          try {
-            componentGenerator.generate(bindingGraph);
-          } catch (SourceFileGenerationException e) {
-            e.printMessageTo(messager);
-          }
-        }
+      if (isClean(
+          report, builderReportsByComponent, reportsBySubcomponent, builderReportsBySubcomponent)) {
+        componentDescriptors.add(componentDescriptorFactory.forComponent(componentTypeElement));
       }
     }
+    return componentDescriptors.build();
   }
 
   /**
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index 4cbde8dee..63c043478 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -173,8 +173,7 @@ public SourceVersion getSupportedSourceVersion() {
             bindingGraphValidator,
             componentDescriptorFactory,
             bindingGraphFactory,
-            componentGenerator
-        ),
+            componentGenerator),
         new ProducerModuleProcessingStep(
             messager,
             producerModuleValidator,
@@ -187,8 +186,7 @@ public SourceVersion getSupportedSourceVersion() {
             bindingGraphValidator,
             componentDescriptorFactory,
             bindingGraphFactory,
-            componentGenerator
-        ));
+            componentGenerator));
   }
 
   @Override
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProductionComponentProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/ProductionComponentProcessingStep.java
index 667a80b86..a424d12b4 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProductionComponentProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProductionComponentProcessingStep.java
@@ -32,13 +32,10 @@
  *
  * @author Jesse Beder
  */
-final class ProductionComponentProcessingStep implements ProcessingStep {
+final class ProductionComponentProcessingStep extends AbstractComponentProcessingStep {
   private final Messager messager;
   private final ProductionComponentValidator componentValidator;
-  private final BindingGraphValidator bindingGraphValidator;
   private final ComponentDescriptor.Factory componentDescriptorFactory;
-  private final BindingGraph.Factory bindingGraphFactory;
-  private final ComponentGenerator componentGenerator;
 
   ProductionComponentProcessingStep(
       Messager messager,
@@ -46,14 +43,15 @@
       BindingGraphValidator bindingGraphValidator,
       ComponentDescriptor.Factory componentDescriptorFactory,
       BindingGraph.Factory bindingGraphFactory,
-      ComponentGenerator componentGenerator
-  ) {
+      ComponentGenerator componentGenerator) {
+    super(
+        messager,
+        bindingGraphValidator,
+        bindingGraphFactory,
+        componentGenerator);
     this.messager = messager;
     this.componentValidator = componentValidator;
-    this.bindingGraphValidator = bindingGraphValidator;
     this.componentDescriptorFactory = componentDescriptorFactory;
-    this.bindingGraphFactory = bindingGraphFactory;
-    this.componentGenerator = componentGenerator;
   }
 
   @Override
@@ -62,29 +60,20 @@
   }
 
   @Override
-  public void process(SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation) {
-    Set<? extends Element> componentElements = elementsByAnnotation.get(ProductionComponent.class);
-
+  protected ImmutableSet<ComponentDescriptor> componentDescriptors(
+      SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation) {
+    ImmutableSet.Builder<ComponentDescriptor> componentDescriptors = ImmutableSet.builder();
+    Set<Element> componentElements = elementsByAnnotation.get(ProductionComponent.class);
     for (Element element : componentElements) {
       TypeElement componentTypeElement = MoreElements.asType(element);
       ValidationReport<TypeElement> componentReport =
           componentValidator.validate(componentTypeElement);
       componentReport.printMessagesTo(messager);
       if (componentReport.isClean()) {
-        ComponentDescriptor componentDescriptor =
-            componentDescriptorFactory.forProductionComponent(componentTypeElement);
-        BindingGraph bindingGraph = bindingGraphFactory.create(componentDescriptor);
-        ValidationReport<BindingGraph> graphReport =
-            bindingGraphValidator.validate(bindingGraph);
-        graphReport.printMessagesTo(messager);
-        if (graphReport.isClean()) {
-          try {
-            componentGenerator.generate(bindingGraph);
-          } catch (SourceFileGenerationException e) {
-            e.printMessageTo(messager);
-          }
-        }
+        componentDescriptors.add(
+            componentDescriptorFactory.forProductionComponent(componentTypeElement));
       }
     }
+    return componentDescriptors.build();
   }
 }
