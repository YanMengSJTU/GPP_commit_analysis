diff --git a/java/dagger/internal/codegen/ComponentProcessingStep.java b/java/dagger/internal/codegen/ComponentProcessingStep.java
index 7c4679cfa..3dfa78e21 100644
--- a/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -23,7 +23,6 @@
 import static dagger.internal.codegen.binding.ComponentCreatorAnnotation.allCreatorAnnotations;
 import static dagger.internal.codegen.binding.ComponentCreatorAnnotation.rootComponentCreatorAnnotations;
 import static dagger.internal.codegen.binding.ComponentCreatorAnnotation.subcomponentCreatorAnnotations;
-import static dagger.internal.codegen.compileroption.ValidationType.NONE;
 import static java.util.Collections.disjoint;
 
 import com.google.auto.common.BasicAnnotationProcessor.ProcessingStep;
@@ -40,7 +39,6 @@
 import dagger.internal.codegen.binding.BindingGraphFactory;
 import dagger.internal.codegen.binding.ComponentDescriptor;
 import dagger.internal.codegen.binding.ComponentDescriptorFactory;
-import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.validation.BindingGraphValidator;
 import dagger.internal.codegen.validation.ComponentCreatorValidator;
 import dagger.internal.codegen.validation.ComponentDescriptorValidator;
@@ -71,7 +69,6 @@
   private final SourceFileGenerator<BindingGraph> componentGenerator;
   private final BindingGraphConverter bindingGraphConverter;
   private final BindingGraphValidator bindingGraphValidator;
-  private final CompilerOptions compilerOptions;
   private ImmutableSet<Element> subcomponentElements;
   private ImmutableSet<Element> subcomponentCreatorElements;
   private ImmutableMap<Element, ValidationReport<TypeElement>> creatorReportsByComponent;
@@ -88,8 +85,7 @@
       BindingGraphFactory bindingGraphFactory,
       SourceFileGenerator<BindingGraph> componentGenerator,
       BindingGraphConverter bindingGraphConverter,
-      BindingGraphValidator bindingGraphValidator,
-      CompilerOptions compilerOptions) {
+      BindingGraphValidator bindingGraphValidator) {
     super(MoreElements::asType);
     this.messager = messager;
     this.componentValidator = componentValidator;
@@ -100,7 +96,6 @@
     this.componentGenerator = componentGenerator;
     this.bindingGraphConverter = bindingGraphConverter;
     this.bindingGraphValidator = bindingGraphValidator;
-    this.compilerOptions = compilerOptions;
   }
 
   @Override
@@ -159,7 +154,7 @@ private void processRootComponent(TypeElement component) {
   }
 
   private void processSubcomponent(TypeElement subcomponent) {
-    if (compilerOptions.fullBindingGraphValidationType(subcomponent).equals(NONE)) {
+    if (!bindingGraphValidator.shouldDoFullBindingGraphValidation(subcomponent)) {
       return;
     }
     if (!isSubcomponentValid(subcomponent)) {
@@ -240,9 +235,8 @@ private boolean isSubcomponentValid(Element subcomponentElement) {
 
   @CanIgnoreReturnValue
   private boolean validateFullBindingGraph(ComponentDescriptor componentDescriptor) {
-    if (compilerOptions
-        .fullBindingGraphValidationType(componentDescriptor.typeElement())
-        .equals(NONE)) {
+    TypeElement component = componentDescriptor.typeElement();
+    if (!bindingGraphValidator.shouldDoFullBindingGraphValidation(component)) {
       return true;
     }
     BindingGraph fullBindingGraph = bindingGraphFactory.create(componentDescriptor, true);
diff --git a/java/dagger/internal/codegen/compileroption/CompilerOptions.java b/java/dagger/internal/codegen/compileroption/CompilerOptions.java
index d3565be21..8c0947665 100644
--- a/java/dagger/internal/codegen/compileroption/CompilerOptions.java
+++ b/java/dagger/internal/codegen/compileroption/CompilerOptions.java
@@ -64,12 +64,14 @@ public final boolean doCheckForNulls() {
 
   public abstract boolean useGradleIncrementalProcessing();
 
+  public abstract ValidationType fullBindingGraphValidationType();
+
   /**
-   * Returns the validation that should be done for the full binding graph for the element.
+   * If {@code true}, each plugin will visit the full binding graph for the given element.
    *
    * @throws IllegalArgumentException if {@code element} is not a module or (sub)component
    */
-  public abstract ValidationType fullBindingGraphValidationType(TypeElement element);
+  public abstract boolean pluginsVisitFullBindingGraphs(TypeElement element);
 
   public abstract Diagnostic.Kind moduleHasDifferentScopesDiagnosticKind();
 
diff --git a/java/dagger/internal/codegen/compileroption/JavacPluginCompilerOptions.java b/java/dagger/internal/codegen/compileroption/JavacPluginCompilerOptions.java
index 475e992fd..145493184 100644
--- a/java/dagger/internal/codegen/compileroption/JavacPluginCompilerOptions.java
+++ b/java/dagger/internal/codegen/compileroption/JavacPluginCompilerOptions.java
@@ -90,10 +90,15 @@ public boolean useGradleIncrementalProcessing() {
   }
 
   @Override
-  public ValidationType fullBindingGraphValidationType(TypeElement element) {
+  public ValidationType fullBindingGraphValidationType() {
     return NONE;
   }
 
+  @Override
+  public boolean pluginsVisitFullBindingGraphs(TypeElement element) {
+    return false;
+  }
+
   @Override
   public Diagnostic.Kind moduleHasDifferentScopesDiagnosticKind() {
     return NOTE;
diff --git a/java/dagger/internal/codegen/compileroption/ProcessingEnvironmentCompilerOptions.java b/java/dagger/internal/codegen/compileroption/ProcessingEnvironmentCompilerOptions.java
index 46c450a22..bb36e8e72 100644
--- a/java/dagger/internal/codegen/compileroption/ProcessingEnvironmentCompilerOptions.java
+++ b/java/dagger/internal/codegen/compileroption/ProcessingEnvironmentCompilerOptions.java
@@ -28,6 +28,7 @@
 import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Feature.FLOATING_BINDS_METHODS;
 import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Feature.FORMAT_GENERATED_SOURCE;
 import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Feature.IGNORE_PRIVATE_AND_STATIC_INJECTION_FOR_COMPONENT;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Feature.PLUGINS_VISIT_FULL_BINDING_GRAPHS;
 import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Feature.WARN_IF_INJECTION_FACTORY_NOT_GENERATED_UPSTREAM;
 import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Feature.WRITE_PRODUCER_NAME_IN_TOKEN;
 import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.KeyOnlyOption.HEADER_COMPILATION;
@@ -140,12 +141,13 @@ public boolean useGradleIncrementalProcessing() {
   }
 
   @Override
-  public ValidationType fullBindingGraphValidationType(TypeElement element) {
-    return fullBindingGraphValidationType();
+  public ValidationType fullBindingGraphValidationType() {
+    return parseOption(FULL_BINDING_GRAPH_VALIDATION);
   }
 
-  private ValidationType fullBindingGraphValidationType() {
-    return parseOption(FULL_BINDING_GRAPH_VALIDATION);
+  @Override
+  public boolean pluginsVisitFullBindingGraphs(TypeElement component) {
+    return isEnabled(PLUGINS_VISIT_FULL_BINDING_GRAPHS);
   }
 
   @Override
@@ -264,6 +266,8 @@ public String toString() {
 
     EMIT_MODIFIABLE_METADATA_ANNOTATIONS(ENABLED),
 
+    PLUGINS_VISIT_FULL_BINDING_GRAPHS,
+
     FLOATING_BINDS_METHODS,
     ;
 
diff --git a/java/dagger/internal/codegen/validation/BindingGraphValidator.java b/java/dagger/internal/codegen/validation/BindingGraphValidator.java
index 5646b7359..ae1cedb01 100644
--- a/java/dagger/internal/codegen/validation/BindingGraphValidator.java
+++ b/java/dagger/internal/codegen/validation/BindingGraphValidator.java
@@ -20,12 +20,15 @@
 import static javax.tools.Diagnostic.Kind.ERROR;
 
 import com.google.common.collect.ImmutableSet;
+import dagger.internal.codegen.compileroption.CompilerOptions;
+import dagger.internal.codegen.compileroption.ValidationType;
 import dagger.internal.codegen.validation.DiagnosticReporterFactory.DiagnosticReporterImpl;
 import dagger.model.BindingGraph;
 import dagger.spi.BindingGraphPlugin;
 import java.util.Set;
 import javax.inject.Inject;
 import javax.inject.Singleton;
+import javax.lang.model.element.TypeElement;
 
 /** Validates a {@link BindingGraph}. */
 @Singleton
@@ -33,31 +36,73 @@
   private final ImmutableSet<BindingGraphPlugin> validationPlugins;
   private final ImmutableSet<BindingGraphPlugin> externalPlugins;
   private final DiagnosticReporterFactory diagnosticReporterFactory;
+  private final CompilerOptions compilerOptions;
 
   @Inject
   BindingGraphValidator(
       @Validation Set<BindingGraphPlugin> validationPlugins,
       ImmutableSet<BindingGraphPlugin> externalPlugins,
-      DiagnosticReporterFactory diagnosticReporterFactory) {
+      DiagnosticReporterFactory diagnosticReporterFactory,
+      CompilerOptions compilerOptions) {
     this.validationPlugins = ImmutableSet.copyOf(validationPlugins);
     this.externalPlugins = ImmutableSet.copyOf(externalPlugins);
     this.diagnosticReporterFactory = checkNotNull(diagnosticReporterFactory);
+    this.compilerOptions = compilerOptions;
+  }
+
+  /** Returns {@code true} if validation or analysis is required on the full binding graph. */
+  public boolean shouldDoFullBindingGraphValidation(TypeElement component) {
+    return requiresFullBindingGraphValidation()
+        || compilerOptions.pluginsVisitFullBindingGraphs(component);
+  }
+
+  private boolean requiresFullBindingGraphValidation() {
+    return !compilerOptions.fullBindingGraphValidationType().equals(ValidationType.NONE);
   }
 
   /** Returns {@code true} if no errors are reported for {@code graph}. */
   public boolean isValid(BindingGraph graph) {
-    return isValid(validationPlugins, graph) && isValid(externalPlugins, graph);
+    return validate(graph) && visitPlugins(graph);
+  }
+
+  /** Returns {@code true} if validation plugins report no errors. */
+  private boolean validate(BindingGraph graph) {
+    if (graph.isFullBindingGraph() && !requiresFullBindingGraphValidation()) {
+      return true;
+    }
+
+    boolean errorsAsWarnings =
+        graph.isFullBindingGraph()
+        && compilerOptions.fullBindingGraphValidationType().equals(ValidationType.WARNING);
+
+    return runPlugins(validationPlugins, graph, errorsAsWarnings);
+  }
+
+  /** Returns {@code true} if external plugins report no errors. */
+  private boolean visitPlugins(BindingGraph graph) {
+    TypeElement component = graph.rootComponentNode().componentPath().currentComponent();
+    if (graph.isFullBindingGraph()
+        // TODO(b/135938915): Consider not visiting plugins if only
+        // fullBindingGraphValidation is enabled.
+        && !requiresFullBindingGraphValidation()
+        && !compilerOptions.pluginsVisitFullBindingGraphs(component)) {
+      return true;
+    }
+    return runPlugins(externalPlugins, graph, /*errorsAsWarnings=*/ false);
   }
 
-  private boolean isValid(ImmutableSet<BindingGraphPlugin> plugins, BindingGraph graph) {
-    boolean isValid = true;
+  /** Returns {@code false} if any of the plugins reported an error. */
+  private boolean runPlugins(
+      ImmutableSet<BindingGraphPlugin> plugins, BindingGraph graph, boolean errorsAsWarnings) {
+    boolean isClean = true;
     for (BindingGraphPlugin plugin : plugins) {
-      DiagnosticReporterImpl reporter = diagnosticReporterFactory.reporter(graph, plugin);
+      DiagnosticReporterImpl reporter =
+          diagnosticReporterFactory.reporter(graph, plugin, errorsAsWarnings);
       plugin.visitGraph(graph, reporter);
       if (reporter.reportedDiagnosticKinds().contains(ERROR)) {
-        isValid = false;
+        isClean = false;
       }
     }
-    return isValid;
+    return isClean;
   }
 }
diff --git a/java/dagger/internal/codegen/validation/DiagnosticReporterFactory.java b/java/dagger/internal/codegen/validation/DiagnosticReporterFactory.java
index 3148b7b69..0b7688d21 100644
--- a/java/dagger/internal/codegen/validation/DiagnosticReporterFactory.java
+++ b/java/dagger/internal/codegen/validation/DiagnosticReporterFactory.java
@@ -25,7 +25,6 @@
 import static com.google.common.collect.Iterables.transform;
 import static com.google.common.collect.Lists.asList;
 import static dagger.internal.codegen.base.ElementFormatter.elementToString;
-import static dagger.internal.codegen.compileroption.ValidationType.NONE;
 import static dagger.internal.codegen.extension.DaggerGraphs.shortestPath;
 import static dagger.internal.codegen.extension.DaggerStreams.instancesOf;
 import static dagger.internal.codegen.extension.DaggerStreams.presentValues;
@@ -53,7 +52,6 @@
 import dagger.internal.codegen.base.Formatter;
 import dagger.internal.codegen.binding.DependencyRequestFormatter;
 import dagger.internal.codegen.compileroption.CompilerOptions;
-import dagger.internal.codegen.compileroption.ValidationType;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.BindingGraph;
 import dagger.model.BindingGraph.ChildFactoryMethodEdge;
@@ -83,7 +81,6 @@
   private final Messager messager;
   private final DependencyRequestFormatter dependencyRequestFormatter;
   private final ElementFormatter elementFormatter;
-  private final CompilerOptions compilerOptions;
 
   @Inject
   DiagnosticReporterFactory(
@@ -96,12 +93,12 @@
     this.messager = messager;
     this.dependencyRequestFormatter = dependencyRequestFormatter;
     this.elementFormatter = elementFormatter;
-    this.compilerOptions = compilerOptions;
   }
 
   /** Creates a reporter for a binding graph and a plugin. */
-  DiagnosticReporterImpl reporter(BindingGraph graph, BindingGraphPlugin plugin) {
-    return new DiagnosticReporterImpl(graph, plugin.pluginName());
+  DiagnosticReporterImpl reporter(
+      BindingGraph graph, BindingGraphPlugin plugin, boolean reportErrorsAsWarnings) {
+    return new DiagnosticReporterImpl(graph, plugin.pluginName(), reportErrorsAsWarnings);
   }
 
   private static <K, V> Function<K, V> memoize(Function<K, V> uncached) {
@@ -141,12 +138,14 @@ DiagnosticReporterImpl reporter(BindingGraph graph, BindingGraphPlugin plugin) {
     private final BindingGraph graph;
     private final String plugin;
     private final TypeElement rootComponent;
+    private final boolean reportErrorsAsWarnings;
     private final ImmutableSet.Builder<Diagnostic.Kind> reportedDiagnosticKinds =
         ImmutableSet.builder();
 
-    DiagnosticReporterImpl(BindingGraph graph, String plugin) {
+    DiagnosticReporterImpl(BindingGraph graph, String plugin, boolean reportErrorsAsWarnings) {
       this.graph = graph;
       this.plugin = plugin;
+      this.reportErrorsAsWarnings = reportErrorsAsWarnings;
       this.rootComponent = graph.rootComponentNode().componentPath().currentComponent();
     }
 
@@ -241,15 +240,8 @@ void printMessage(
         Diagnostic.Kind diagnosticKind,
         CharSequence message,
         @NullableDecl Element elementToReport) {
-      if (graph.isFullBindingGraph()) {
-        ValidationType validationType =
-            compilerOptions.fullBindingGraphValidationType(rootComponent);
-        if (validationType.equals(NONE)) {
-          return;
-        }
-        if (diagnosticKind.equals(ERROR)) {
-          diagnosticKind = validationType.diagnosticKind().get();
-        }
+      if (diagnosticKind.equals(ERROR) && reportErrorsAsWarnings) {
+        diagnosticKind = Diagnostic.Kind.WARNING;
       }
       reportedDiagnosticKinds.add(diagnosticKind);
       StringBuilder fullMessage = new StringBuilder();
diff --git a/java/dagger/internal/codegen/validation/ModuleValidator.java b/java/dagger/internal/codegen/validation/ModuleValidator.java
index 92c53b541..a1dc71b01 100644
--- a/java/dagger/internal/codegen/validation/ModuleValidator.java
+++ b/java/dagger/internal/codegen/validation/ModuleValidator.java
@@ -31,7 +31,6 @@
 import static dagger.internal.codegen.base.Util.reentrantComputeIfAbsent;
 import static dagger.internal.codegen.binding.ComponentCreatorAnnotation.getCreatorAnnotations;
 import static dagger.internal.codegen.binding.ConfigurationAnnotations.getSubcomponentCreator;
-import static dagger.internal.codegen.compileroption.ValidationType.NONE;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 import static dagger.internal.codegen.langmodel.DaggerElements.getAnnotationMirror;
 import static dagger.internal.codegen.langmodel.DaggerElements.isAnyAnnotationPresent;
@@ -61,7 +60,6 @@
 import dagger.internal.codegen.binding.ComponentDescriptorFactory;
 import dagger.internal.codegen.binding.MethodSignatureFormatter;
 import dagger.internal.codegen.binding.ModuleKind;
-import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.BindingGraph;
@@ -126,7 +124,6 @@
   private final BindingGraphFactory bindingGraphFactory;
   private final BindingGraphConverter bindingGraphConverter;
   private final BindingGraphValidator bindingGraphValidator;
-  private final CompilerOptions compilerOptions;
   private final Map<TypeElement, ValidationReport<TypeElement>> cache = new HashMap<>();
   private final Set<TypeElement> knownModules = new HashSet<>();
 
@@ -139,8 +136,7 @@
       ComponentDescriptorFactory componentDescriptorFactory,
       BindingGraphFactory bindingGraphFactory,
       BindingGraphConverter bindingGraphConverter,
-      BindingGraphValidator bindingGraphValidator,
-      CompilerOptions compilerOptions) {
+      BindingGraphValidator bindingGraphValidator) {
     this.types = types;
     this.elements = elements;
     this.anyBindingMethodValidator = anyBindingMethodValidator;
@@ -149,7 +145,6 @@
     this.bindingGraphFactory = bindingGraphFactory;
     this.bindingGraphConverter = bindingGraphConverter;
     this.bindingGraphValidator = bindingGraphValidator;
-    this.compilerOptions = compilerOptions;
   }
 
   /**
@@ -245,7 +240,7 @@ public void addKnownModules(Collection<TypeElement> modules) {
     validateSelfCycles(module, builder);
 
     if (builder.build().isClean()
-        && !compilerOptions.fullBindingGraphValidationType(module).equals(NONE)) {
+        && bindingGraphValidator.shouldDoFullBindingGraphValidation(module)) {
       validateModuleBindings(module, builder);
     }
 
diff --git a/javatests/dagger/internal/codegen/DependencyCycleValidationTest.java b/javatests/dagger/internal/codegen/DependencyCycleValidationTest.java
index 1081f7d4f..4a4e0a51d 100644
--- a/javatests/dagger/internal/codegen/DependencyCycleValidationTest.java
+++ b/javatests/dagger/internal/codegen/DependencyCycleValidationTest.java
@@ -106,8 +106,7 @@ public void cyclicDependencyWithModuleBindingValidation() {
 
     Compilation compilation =
         daggerCompiler()
-            .withOptions(
-                "-Adagger.fullBindingGraphValidation=ERROR")
+            .withOptions("-Adagger.fullBindingGraphValidation=ERROR")
             .compile(SIMPLE_CYCLIC_DEPENDENCY);
     assertThat(compilation).failed();
 
diff --git a/javatests/dagger/internal/codegen/FullBindingGraphValidationTest.java b/javatests/dagger/internal/codegen/FullBindingGraphValidationTest.java
index 9bb6803e5..944e30794 100644
--- a/javatests/dagger/internal/codegen/FullBindingGraphValidationTest.java
+++ b/javatests/dagger/internal/codegen/FullBindingGraphValidationTest.java
@@ -62,8 +62,7 @@ public void moduleWithErrors_validationTypeNone() {
   public void moduleWithErrors_validationTypeError() {
     Compilation compilation =
         daggerCompiler()
-            .withOptions(
-                "-Adagger.fullBindingGraphValidation=ERROR")
+            .withOptions("-Adagger.fullBindingGraphValidation=ERROR")
             .compile(MODULE_WITH_ERRORS);
 
     assertThat(compilation).failed();
@@ -80,8 +79,7 @@ public void moduleWithErrors_validationTypeError() {
   public void moduleWithErrors_validationTypeWarning() {
     Compilation compilation =
         daggerCompiler()
-            .withOptions(
-                "-Adagger.fullBindingGraphValidation=WARNING")
+            .withOptions("-Adagger.fullBindingGraphValidation=WARNING")
             .compile(MODULE_WITH_ERRORS);
 
     assertThat(compilation).succeeded();
@@ -116,8 +114,7 @@ public void includesModuleWithErrors_validationTypeNone() {
   public void includesModuleWithErrors_validationTypeError() {
     Compilation compilation =
         daggerCompiler()
-            .withOptions(
-                "-Adagger.fullBindingGraphValidation=ERROR")
+            .withOptions("-Adagger.fullBindingGraphValidation=ERROR")
             .compile(MODULE_WITH_ERRORS, INCLUDES_MODULE_WITH_ERRORS);
 
     assertThat(compilation).failed();
@@ -139,8 +136,7 @@ public void includesModuleWithErrors_validationTypeError() {
   public void includesModuleWithErrors_validationTypeWarning() {
     Compilation compilation =
         daggerCompiler()
-            .withOptions(
-                "-Adagger.fullBindingGraphValidation=WARNING")
+            .withOptions("-Adagger.fullBindingGraphValidation=WARNING")
             .compile(MODULE_WITH_ERRORS, INCLUDES_MODULE_WITH_ERRORS);
 
     assertThat(compilation).succeeded();
@@ -203,8 +199,7 @@ public void moduleIncludingModuleWithCombinedErrors_validationTypeNone() {
   public void moduleIncludingModuleWithCombinedErrors_validationTypeError() {
     Compilation compilation =
         daggerCompiler()
-            .withOptions(
-                "-Adagger.fullBindingGraphValidation=ERROR")
+            .withOptions("-Adagger.fullBindingGraphValidation=ERROR")
             .compile(A_MODULE, COMBINED_WITH_A_MODULE_HAS_ERRORS);
 
     assertThat(compilation).failed();
@@ -221,8 +216,7 @@ public void moduleIncludingModuleWithCombinedErrors_validationTypeError() {
   public void moduleIncludingModuleWithCombinedErrors_validationTypeWarning() {
     Compilation compilation =
         daggerCompiler()
-            .withOptions(
-                "-Adagger.fullBindingGraphValidation=WARNING")
+            .withOptions("-Adagger.fullBindingGraphValidation=WARNING")
             .compile(A_MODULE, COMBINED_WITH_A_MODULE_HAS_ERRORS);
 
     assertThat(compilation).succeeded();
@@ -271,8 +265,7 @@ public void subcomponentWithErrors_validationTypeNone() {
   public void subcomponentWithErrors_validationTypeError() {
     Compilation compilation =
         daggerCompiler()
-            .withOptions(
-                "-Adagger.fullBindingGraphValidation=ERROR")
+            .withOptions("-Adagger.fullBindingGraphValidation=ERROR")
             .compile(SUBCOMPONENT_WITH_ERRORS, A_MODULE);
 
     assertThat(compilation).failed();
@@ -289,8 +282,7 @@ public void subcomponentWithErrors_validationTypeError() {
   public void subcomponentWithErrors_validationTypeWarning() {
     Compilation compilation =
         daggerCompiler()
-            .withOptions(
-                "-Adagger.fullBindingGraphValidation=WARNING")
+            .withOptions("-Adagger.fullBindingGraphValidation=WARNING")
             .compile(SUBCOMPONENT_WITH_ERRORS, A_MODULE);
 
     assertThat(compilation).succeeded();
@@ -327,8 +319,7 @@ public void moduleWithSubcomponentWithErrors_validationTypeNone() {
   public void moduleWithSubcomponentWithErrors_validationTypeError() {
     Compilation compilation =
         daggerCompiler()
-            .withOptions(
-                "-Adagger.fullBindingGraphValidation=ERROR")
+            .withOptions("-Adagger.fullBindingGraphValidation=ERROR")
             .compile(MODULE_WITH_SUBCOMPONENT_WITH_ERRORS, SUBCOMPONENT_WITH_ERRORS, A_MODULE);
 
     assertThat(compilation).failed();
@@ -351,8 +342,7 @@ public void moduleWithSubcomponentWithErrors_validationTypeError() {
   public void moduleWithSubcomponentWithErrors_validationTypeWarning() {
     Compilation compilation =
         daggerCompiler()
-            .withOptions(
-                "-Adagger.fullBindingGraphValidation=WARNING")
+            .withOptions("-Adagger.fullBindingGraphValidation=WARNING")
             .compile(MODULE_WITH_SUBCOMPONENT_WITH_ERRORS, SUBCOMPONENT_WITH_ERRORS, A_MODULE);
 
     assertThat(compilation).succeeded();
@@ -419,8 +409,7 @@ public void moduleWithSubcomponentWithCombinedErrors_validationTypeNone() {
   public void moduleWithSubcomponentWithCombinedErrors_validationTypeError() {
     Compilation compilation =
         daggerCompiler()
-            .withOptions(
-                "-Adagger.fullBindingGraphValidation=ERROR")
+            .withOptions("-Adagger.fullBindingGraphValidation=ERROR")
             .compile(COMBINED_WITH_A_SUBCOMPONENT_HAS_ERRORS, A_SUBCOMPONENT, A_MODULE);
 
     assertThat(compilation).failed();
@@ -437,8 +426,7 @@ public void moduleWithSubcomponentWithCombinedErrors_validationTypeError() {
   public void moduleWithSubcomponentWithCombinedErrors_validationTypeWarning() {
     Compilation compilation =
         daggerCompiler()
-            .withOptions(
-                "-Adagger.fullBindingGraphValidation=WARNING")
+            .withOptions("-Adagger.fullBindingGraphValidation=WARNING")
             .compile(COMBINED_WITH_A_SUBCOMPONENT_HAS_ERRORS, A_SUBCOMPONENT, A_MODULE);
 
     assertThat(compilation).succeeded();
diff --git a/javatests/dagger/internal/codegen/MapMultibindingValidationTest.java b/javatests/dagger/internal/codegen/MapMultibindingValidationTest.java
index 87882a31b..5e5c4eb1f 100644
--- a/javatests/dagger/internal/codegen/MapMultibindingValidationTest.java
+++ b/javatests/dagger/internal/codegen/MapMultibindingValidationTest.java
@@ -73,8 +73,7 @@ public void duplicateMapKeys_UnwrappedMapKey() {
 
     compilation =
         daggerCompiler()
-            .withOptions(
-                "-Adagger.fullBindingGraphValidation=ERROR")
+            .withOptions("-Adagger.fullBindingGraphValidation=ERROR")
             .compile(module);
     assertThat(compilation).failed();
     assertThat(compilation)
@@ -267,8 +266,7 @@ public void inconsistentMapKeyAnnotations() {
 
     compilation =
         daggerCompiler()
-            .withOptions(
-                "-Adagger.fullBindingGraphValidation=ERROR")
+            .withOptions("-Adagger.fullBindingGraphValidation=ERROR")
             .compile(module, stringKeyTwoFile);
     assertThat(compilation).failed();
     assertThat(compilation)
diff --git a/javatests/dagger/internal/codegen/PluginsVisitFullBindingGraphTest.java b/javatests/dagger/internal/codegen/PluginsVisitFullBindingGraphTest.java
new file mode 100644
index 000000000..b7664639c
--- /dev/null
+++ b/javatests/dagger/internal/codegen/PluginsVisitFullBindingGraphTest.java
@@ -0,0 +1,143 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static com.google.testing.compile.Compiler.javac;
+import static dagger.internal.codegen.TestUtils.endsWithMessage;
+import static javax.tools.Diagnostic.Kind.ERROR;
+
+import com.google.testing.compile.Compilation;
+import com.google.testing.compile.Compiler;
+import com.google.testing.compile.JavaFileObjects;
+import dagger.model.BindingGraph;
+import dagger.spi.BindingGraphPlugin;
+import dagger.spi.DiagnosticReporter;
+import java.util.regex.Pattern;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+/** Tests for -Adagger.pluginsVisitFullBindingGraph. */
+@RunWith(JUnit4.class)
+public final class PluginsVisitFullBindingGraphTest {
+  private static final JavaFileObject MODULE_WITHOUT_ERRORS =
+      JavaFileObjects.forSourceLines(
+          "test.ModuleWithoutErrors",
+          "package test;",
+          "",
+          "import dagger.Binds;",
+          "import dagger.Module;",
+          "",
+          "@Module",
+          "interface ModuleWithoutErrors {",
+          "  @Binds Object object(String string);",
+          "}");
+
+  private static final JavaFileObject MODULE_WITH_ERRORS =
+      JavaFileObjects.forSourceLines(
+          "test.ModuleWithErrors",
+          "package test;",
+          "",
+          "import dagger.Binds;",
+          "import dagger.Module;",
+          "",
+          "@Module",
+          "interface ModuleWithErrors {",
+          "  @Binds Object object1(String string);",
+          "  @Binds Object object2(Long l);",
+          "}");
+
+  private static final Pattern PLUGIN_ERROR_MESSAGE =
+      endsWithMessage(
+          "[dagger.internal.codegen.PluginsVisitFullBindingGraphTest.ErrorPlugin] Error!");
+
+  @Test
+  public void testNoFlags() {
+    Compilation compilation = daggerCompiler().compile(MODULE_WITH_ERRORS);
+    assertThat(compilation).succeeded();
+  }
+
+  @Test
+  public void testWithVisitPlugins() {
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions("-Adagger.pluginsVisitFullBindingGraphs=Enabled")
+            .compile(MODULE_WITH_ERRORS);
+
+    assertThat(compilation).failed();
+    assertThat(compilation).hadErrorCount(1);
+    assertThat(compilation)
+        .hadErrorContainingMatch(PLUGIN_ERROR_MESSAGE)
+        .inFile(MODULE_WITH_ERRORS)
+        .onLineContaining("interface ModuleWithErrors");
+  }
+
+  @Test
+  public void testWithValidationNone() {
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions("-Adagger.fullBindingGraphValidation=NONE")
+            .compile(MODULE_WITHOUT_ERRORS);
+    assertThat(compilation).succeeded();
+  }
+
+  @Test
+  public void testWithValidationError() {
+    // Test that pluginsVisitFullBindingGraph is enabled with fullBindingGraphValidation.
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions("-Adagger.fullBindingGraphValidation=ERROR")
+            .compile(MODULE_WITHOUT_ERRORS);
+
+    assertThat(compilation).failed();
+    assertThat(compilation).hadErrorCount(1);
+    assertThat(compilation)
+        .hadErrorContainingMatch(PLUGIN_ERROR_MESSAGE)
+        .inFile(MODULE_WITHOUT_ERRORS)
+        .onLineContaining("interface ModuleWithoutErrors");
+  }
+
+  @Test
+  public void testWithValidationErrorAndVisitPlugins() {
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions("-Adagger.fullBindingGraphValidation=ERROR")
+            .withOptions("-Adagger.pluginsVisitFullBindingGraphs=Enabled")
+            .compile(MODULE_WITHOUT_ERRORS);
+
+    assertThat(compilation).failed();
+    assertThat(compilation).hadErrorCount(1);
+    assertThat(compilation)
+        .hadErrorContainingMatch(PLUGIN_ERROR_MESSAGE)
+        .inFile(MODULE_WITHOUT_ERRORS)
+        .onLineContaining("interface ModuleWithoutErrors");
+  }
+
+  /** A test plugin that just reports each component with the given {@link Diagnostic.Kind}. */
+  private static final class ErrorPlugin implements BindingGraphPlugin {
+    @Override
+    public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter) {
+      diagnosticReporter.reportComponent(ERROR, bindingGraph.rootComponentNode(), "Error!");
+    }
+  }
+
+  private static Compiler daggerCompiler() {
+    return javac().withProcessors(ComponentProcessor.forTesting(new ErrorPlugin()));
+  }
+}
diff --git a/javatests/dagger/internal/codegen/ScopingValidationTest.java b/javatests/dagger/internal/codegen/ScopingValidationTest.java
index 15beebaaa..9efcc2a59 100644
--- a/javatests/dagger/internal/codegen/ScopingValidationTest.java
+++ b/javatests/dagger/internal/codegen/ScopingValidationTest.java
@@ -243,8 +243,7 @@ public void componentWithScopeIncludesIncompatiblyScopedBindings_Fail() {
 
     compilation =
         daggerCompiler()
-            .withOptions(
-                "-Adagger.fullBindingGraphValidation=ERROR")
+            .withOptions("-Adagger.fullBindingGraphValidation=ERROR")
             .compile(componentFile, scopeFile, scopeWithAttribute, typeFile, moduleFile);
     // The @Inject binding for ScopedType should not appear here, but the @Singleton binding should.
     assertThat(compilation)
