diff --git a/examples/simple/src/main/java/coffee/CoffeeApp.java b/examples/simple/src/main/java/coffee/CoffeeApp.java
index b0a93ec3c..2fe9bb825 100644
--- a/examples/simple/src/main/java/coffee/CoffeeApp.java
+++ b/examples/simple/src/main/java/coffee/CoffeeApp.java
@@ -1,17 +1,21 @@
 package coffee;
 
 import dagger.Component;
+
 import javax.inject.Singleton;
 
 public class CoffeeApp {
-  @Singleton
-  @Component(modules = { DripCoffeeModule.class })
-  public interface Coffee {
-    CoffeeMaker maker();
-  }
+    @Singleton
+    @Component(modules = {DripCoffeeModule.class})
+    public interface Coffee {
+        CoffeeMaker maker();
+    }
+
+
 
-  public static void main(String[] args) {
-    Coffee coffee = DaggerCoffeeApp_Coffee.builder().build();
-    coffee.maker().brew();
-  }
+    public static void main(String[] args) {
+        Coffee coffee = DaggerCoffeeApp_Coffee.builder().build();
+//        Coffee2 coffee2=DaggerCoffeeApp_Coffee.builder().build();
+        coffee.maker().brew();
+    }
 }
diff --git a/examples/simple/src/main/java/demo1/Mian.java b/examples/simple/src/main/java/demo1/Mian.java
new file mode 100644
index 000000000..693cbc95a
--- /dev/null
+++ b/examples/simple/src/main/java/demo1/Mian.java
@@ -0,0 +1,12 @@
+package demo1;
+
+/**
+ * Created by Wang on 15/12/4.
+ */
+public class Mian {
+    public static void main(String[] args) {
+        VehicleComponent component = DaggerVehicleComponent.builder().vehicleModule(new VehicleModule()).build();
+        Vehicle vehicle = component.provideVehicle();
+        System.out.println(vehicle.getSpeed());
+    }
+}
diff --git a/examples/simple/src/main/java/demo1/Motor.java b/examples/simple/src/main/java/demo1/Motor.java
new file mode 100644
index 000000000..b9ba16b80
--- /dev/null
+++ b/examples/simple/src/main/java/demo1/Motor.java
@@ -0,0 +1,26 @@
+package demo1;
+
+/**
+ * Created by Wang on 15/12/4.
+ */
+
+public class Motor {
+
+    private int rpm;
+
+    public Motor(){
+        this.rpm = 0;
+    }
+
+    public int getRpm(){
+        return rpm;
+    }
+
+    public void accelerate(int value){
+        rpm = rpm + value;
+    }
+
+    public void brake(){
+        rpm = 0;
+    }
+}
\ No newline at end of file
diff --git a/examples/simple/src/main/java/demo1/Vehicle.java b/examples/simple/src/main/java/demo1/Vehicle.java
new file mode 100644
index 000000000..2d818895e
--- /dev/null
+++ b/examples/simple/src/main/java/demo1/Vehicle.java
@@ -0,0 +1,25 @@
+package demo1;
+
+/**
+ * Created by Wang on 15/12/4.
+ */
+public class Vehicle {
+
+    private Motor motor;
+
+    public Vehicle(Motor motor){
+        this.motor = motor;
+    }
+
+    public void increaseSpeed(int value){
+        motor.accelerate(value);
+    }
+
+    public void stop(){
+        motor.brake();
+    }
+
+    public int getSpeed(){
+        return motor.getRpm();
+    }
+}
\ No newline at end of file
diff --git a/examples/simple/src/main/java/demo1/VehicleComponent.java b/examples/simple/src/main/java/demo1/VehicleComponent.java
new file mode 100644
index 000000000..f6167cce0
--- /dev/null
+++ b/examples/simple/src/main/java/demo1/VehicleComponent.java
@@ -0,0 +1,14 @@
+package demo1;
+
+import dagger.Component;
+
+import javax.inject.Singleton;
+
+/**
+ * Created by Wang on 15/12/4.
+ */
+@Singleton
+@Component(modules = {VehicleModule.class})
+public interface VehicleComponent {
+    Vehicle provideVehicle();
+}
diff --git a/examples/simple/src/main/java/demo1/VehicleModule.java b/examples/simple/src/main/java/demo1/VehicleModule.java
new file mode 100644
index 000000000..de9a4f292
--- /dev/null
+++ b/examples/simple/src/main/java/demo1/VehicleModule.java
@@ -0,0 +1,25 @@
+package demo1;
+
+import dagger.Module;
+import dagger.Provides;
+
+import javax.inject.Singleton;
+
+/**
+ * Created by Wang on 15/12/4.
+ */
+@Module
+public class VehicleModule {
+
+    @Provides
+    @Singleton
+    Motor provideMotor() {
+        return new Motor();
+    }
+    @Provides
+    @Singleton
+    Vehicle provideVehicle(){
+        return new Vehicle(new Motor());
+    }
+
+}
