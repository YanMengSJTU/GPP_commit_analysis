diff --git a/compiler/src/it/functional-tests/src/main/java/test/MultibindingComponent.java b/compiler/src/it/functional-tests/src/main/java/test/MultibindingComponent.java
index e82b95939..7cad3bd1a 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/MultibindingComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/MultibindingComponent.java
@@ -20,6 +20,7 @@
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;
+import javax.inject.Named;
 import javax.inject.Provider;
 import test.sub.ContributionsModule;
 
@@ -47,4 +48,5 @@
   Map<Character, String> characterKeyMap();
   Map<StringKey, String> unwrappedAnnotationKeyMap();
   Map<WrappedAnnotationKey, String> wrappedAnnotationKeyMap();
+  @Named("complexQualifier") Set<String> complexQualifierStringSet();
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java b/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
index 96a0d2cd0..f356850b3 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
@@ -26,6 +26,7 @@
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;
+import javax.inject.Named;
 import javax.inject.Provider;
 
 import static dagger.Provides.Type.MAP;
@@ -159,4 +160,10 @@ static String valueForUnwrappedAnnotationKeyFoo() {
   static String valueForWrappedAnnotationKeyFoo() {
     return "wrapped foo annotation";
   }
+
+  @Provides(type = SET)
+  @Named("complexQualifier")
+  static String valueForComplexQualifierSet() {
+    return "foo";
+  }
 }
diff --git a/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java b/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
index 7d756c108..5e06f848f 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/MultibindingTest.java
@@ -142,6 +142,10 @@ public void shortKeyMap() {
     assertThat(multibindingComponent.set()).containsExactly(-90, -17, -1, 5, 6, 832, 1742);
   }
 
+  @Test public void complexQualifierSet() {
+    assertThat(multibindingComponent.complexQualifierStringSet()).containsExactly("foo");
+  }
+
   @AutoAnnotation
   static StringKey testStringKey(String value) {
     return new AutoAnnotation_MultibindingTest_testStringKey(value);
diff --git a/compiler/src/main/java/dagger/internal/codegen/KeyVariableNamer.java b/compiler/src/main/java/dagger/internal/codegen/KeyVariableNamer.java
index c32d50806..5fe12b102 100644
--- a/compiler/src/main/java/dagger/internal/codegen/KeyVariableNamer.java
+++ b/compiler/src/main/java/dagger/internal/codegen/KeyVariableNamer.java
@@ -39,10 +39,7 @@ public String apply(Key key) {
     StringBuilder builder = new StringBuilder();
 
     if (key.qualifier().isPresent()) {
-      if (!key.qualifier().get().getElementValues().isEmpty()) {
-        // TODO(gak): obviously we need to support this
-        throw new UnsupportedOperationException();
-      }
+      // TODO(gak): Use a better name for fields with qualifiers with members.
       builder.append(key.qualifier().get().getAnnotationType().asElement().getSimpleName());
     }
 
