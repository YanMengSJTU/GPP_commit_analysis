diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index db0609b8c..b5194a9ff 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -357,20 +357,15 @@ State resolve(DependencyRequest request) {
               }
             case MEMBERS_INJECTOR:
               // no explicit deps for members injection, so just look it up
-              Optional<MembersInjectionBinding> membersInjectionBinding = Optional.fromNullable(
-                  injectBindingRegistry.getOrFindMembersInjectionBinding(requestKey));
-              if (membersInjectionBinding.isPresent()) {
-                // found a binding, resolve its deps and then mark it resolved
-                State bindingState =
-                    resolveDependencies(membersInjectionBinding.get().implicitDependencies());
-                resolvedBindings.put(frameworkKey,
-                    ResolvedBindings.createForMembersInjectionBindings(
-                        bindingState,
-                        ImmutableSet.copyOf(membersInjectionBinding.asSet())));
-                return bindingState;
-              } else {
-                return State.MISSING;
-              }
+              MembersInjectionBinding membersInjectionBinding =
+                  injectBindingRegistry.getOrFindMembersInjectionBinding(requestKey);
+              State bindingState =
+                  resolveDependencies(membersInjectionBinding.implicitDependencies());
+              resolvedBindings.put(frameworkKey,
+                  ResolvedBindings.createForMembersInjectionBindings(
+                      bindingState,
+                      ImmutableSet.of(membersInjectionBinding)));
+              return bindingState;
             default:
               throw new AssertionError();
           }
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
index 0cf61d8f9..29fededd3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
@@ -132,8 +132,7 @@ DependencyRequest forComponentMembersInjectionMethod(ExecutableElement membersIn
 
     DependencyRequest forMembersInjectedType(TypeElement type) {
       return new AutoValue_DependencyRequest(Kind.MEMBERS_INJECTOR,
-          // TODO(gak): handle this better
-          keyFactory.forMembersInjectedType(types.erasure(type.asType())),
+          keyFactory.forMembersInjectedType(type.asType()),
           type);
     }
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/Key.java b/compiler/src/main/java/dagger/internal/codegen/Key.java
index d8b6ea5dc..8f41e7e95 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Key.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Key.java
@@ -244,9 +244,11 @@ Key forComponent(TypeMirror type) {
     }
 
     Key forMembersInjectedType(TypeMirror type) {
+      // TODO(gak): handle the type of the MembersInjection<Foo> field better
+      // (instead of just erasing the key type)
       return new AutoValue_Key(
           Optional.<Equivalence.Wrapper<AnnotationMirror>>absent(),
-          MoreTypes.equivalence().wrap(normalize(type)));
+          MoreTypes.equivalence().wrap(types.erasure(normalize(type))));
     }
 
     Key forQualifiedType(Optional<AnnotationMirror> qualifier, TypeMirror type) {
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index 4c70d6dbe..2bcf3b5d3 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -22,7 +22,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.assert_;
+import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 
@@ -36,7 +36,7 @@
         "",
         "@Component",
         "final class NotAComponent {}");
-    assert_().about(javaSource()).that(componentFile)
+    assertAbout(javaSource()).that(componentFile)
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining("interface");
@@ -52,7 +52,7 @@
         "enum NotAComponent {",
         "  INSTANCE",
         "}");
-    assert_().about(javaSource()).that(componentFile)
+    assertAbout(javaSource()).that(componentFile)
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining("interface");
@@ -66,7 +66,7 @@
         "",
         "@Component",
         "@interface NotAComponent {}");
-    assert_().about(javaSource()).that(componentFile)
+    assertAbout(javaSource()).that(componentFile)
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining("interface");
@@ -80,7 +80,7 @@
         "",
         "@Component(modules = Object.class)",
         "interface NotAComponent {}");
-    assert_().about(javaSource()).that(componentFile)
+    assertAbout(javaSource()).that(componentFile)
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining("is not annotated with @Module");
@@ -160,7 +160,7 @@
         "    }",
         "  }",
         "}");
-    assert_().about(javaSources()).that(ImmutableList.of(injectableTypeFile, componentFile))
+    assertAbout(javaSources()).that(ImmutableList.of(injectableTypeFile, componentFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(generatedComponent);
@@ -248,7 +248,7 @@
         "    }",
         "  }",
         "}");
-    assert_().about(javaSources()).that(ImmutableList.of(injectableTypeFile, componentFile))
+    assertAbout(javaSources()).that(ImmutableList.of(injectableTypeFile, componentFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(generatedComponent);
@@ -367,7 +367,7 @@
         "    }",
         "  }",
         "}");
-    assert_().about(javaSources()).that(ImmutableList.of(nestedTypesFile))
+    assertAbout(javaSources()).that(ImmutableList.of(nestedTypesFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(aFactory, bMembersInjector, generatedComponent);
@@ -476,7 +476,7 @@
         "    }",
         "  }",
         "}");
-    assert_().about(javaSources())
+    assertAbout(javaSources())
         .that(ImmutableList.of(aFile, bFile, cFile, moduleFile, componentFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
@@ -570,7 +570,7 @@
         "    }",
         "  }",
         "}");
-    assert_().about(javaSources())
+    assertAbout(javaSources())
         .that(ImmutableList.of(moduleFile, depModuleFile, componentFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
@@ -691,7 +691,7 @@
         "    }",
         "  }",
         "}");
-    assert_().about(javaSources())
+    assertAbout(javaSources())
         .that(ImmutableList.of(emptySetModuleFile, setModuleFile, componentFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
@@ -778,7 +778,7 @@
         "    }",
         "  }",
         "}");
-    assert_().about(javaSources())
+    assertAbout(javaSources())
         .that(ImmutableList.of(injectableTypeFile, injectedTypeFile, componentFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
@@ -852,7 +852,7 @@
         "    }",
         "  }",
         "}");
-    assert_().about(javaSources()).that(ImmutableList.of(injectableTypeFile, componentFile))
+    assertAbout(javaSources()).that(ImmutableList.of(injectableTypeFile, componentFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(generatedComponent);
@@ -932,13 +932,93 @@
         "    }",
         "  }",
         "}");
-    assert_().about(javaSources())
+    assertAbout(javaSources())
         .that(ImmutableList.of(injectableTypeFile, injectedTypeFile, componentFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(generatedComponent);
   }
 
+  @Test public void injectionWithGenericBaseClass() {
+    JavaFileObject genericType = JavaFileObjects.forSourceLines("test.AbstractGenericType",
+        "package test;",
+        "",
+        "abstract class AbstractGenericType<T> {",
+        "}");
+    JavaFileObject injectableTypeFile = JavaFileObjects.forSourceLines("test.SomeInjectableType",
+        "package test;",
+        "",
+        "import javax.inject.Inject;",
+        "",
+        "final class SomeInjectableType extends AbstractGenericType<String> {",
+        "  @Inject SomeInjectableType() {}",
+        "}");
+    JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
+        "package test;",
+        "",
+        "import dagger.Component;",
+        "",
+        "@Component",
+        "interface SimpleComponent {",
+        "  SomeInjectableType someInjectableType();",
+        "}");
+    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
+        "test.Dagger_SimpleComponent",
+        "package test;",
+        "",
+        "import dagger.MembersInjector;",
+        "import dagger.internal.MembersInjectors;",
+        "import javax.annotation.Generated;",
+        "import javax.inject.Provider;",
+        "",
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        "public final class Dagger_SimpleComponent implements SimpleComponent {",
+        "  private MembersInjector<AbstractGenericType> abstractGenericTypeMembersInjector;",
+        "  private MembersInjector<SomeInjectableType> someInjectableTypeMembersInjector;",
+        "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
+        "",
+        "  private Dagger_SimpleComponent(Builder builder) {",
+        "    assert builder != null;",
+        "    initialize();",
+        "  }",
+        "",
+        "  public static Builder builder() {",
+        "    return new Builder();",
+        "  }",
+        "",
+        "  public static SimpleComponent create() {",
+        "    return builder().build();",
+        "  }",
+        "",
+        "  private void initialize() {",
+        "    this.abstractGenericTypeMembersInjector = MembersInjectors.noOp();",
+        "    this.someInjectableTypeMembersInjector = MembersInjectors.delegatingTo(",
+        "        abstractGenericTypeMembersInjector);",
+        "    this.someInjectableTypeProvider =",
+        "        new SomeInjectableType$$Factory(someInjectableTypeMembersInjector);",
+        "  }",
+        "",
+        "  @Override",
+        "  public SomeInjectableType someInjectableType() {",
+        "    return someInjectableTypeProvider.get();",
+        "  }",
+        "",
+        "  public static final class Builder {",
+        "    private Builder() {",
+        "    }",
+        "",
+        "    public SimpleComponent build() {",
+        "      return new Dagger_SimpleComponent(this);",
+        "    }",
+        "  }",
+        "}");
+    assertAbout(javaSources())
+        .that(ImmutableList.of(genericType, injectableTypeFile, componentFile))
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError()
+        .and().generatesSources(generatedComponent);
+  }
+
   @Test public void componentDependency() {
     JavaFileObject aFile = JavaFileObjects.forSourceLines("test.A",
         "package test;",
@@ -1040,7 +1120,7 @@
         "    }",
         "  }",
         "}");
-    assert_().about(javaSources())
+    assertAbout(javaSources())
         .that(ImmutableList.of(aFile, bFile, aComponentFile, bComponentFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
@@ -1171,7 +1251,7 @@
         "    }",
         "  }",
         "}");
-    assert_().about(javaSources())
+    assertAbout(javaSources())
         .that(ImmutableList.of(aFile, otherAFile, moduleFile, otherModuleFile, componentFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
@@ -1281,7 +1361,7 @@
         "    }",
         "  }",
         "}");
-    assert_().about(javaSources())
+    assertAbout(javaSources())
         .that(ImmutableList.of(aFile, bFile, cFile, xFile, componentFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
@@ -1369,7 +1449,7 @@
         "    }",
         "  }",
         "}");
-    assert_().about(javaSources()).that(ImmutableList.of(
+    assertAbout(javaSources()).that(ImmutableList.of(
             injectableTypeFile, componentSupertypeAFile, componentSupertypeBFile, componentFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
@@ -1457,7 +1537,7 @@
         "    }",
         "  }",
         "}");
-    assert_().about(javaSources()).that(ImmutableList.of(
+    assertAbout(javaSources()).that(ImmutableList.of(
             injectableTypeFile, componentSupertype, depComponentFile, componentFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
