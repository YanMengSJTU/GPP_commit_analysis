diff --git a/java/dagger/internal/codegen/BindingGraph.java b/java/dagger/internal/codegen/BindingGraph.java
index ad6f080dc..1eec2ee97 100644
--- a/java/dagger/internal/codegen/BindingGraph.java
+++ b/java/dagger/internal/codegen/BindingGraph.java
@@ -89,7 +89,7 @@ final ResolvedBindings resolvedBindings(RequestKind requestKind, Key key) {
    * <ul>
    *   <li>{@code @ForReleasableReferences(scope)} {@link ReleasableReferenceManager}
    *   <li>{@code @ForReleasableReferences(scope)} {@code TypedReleasableReferenceManager<M>}, where
-   *       {@code M} is the releasable-references metatadata type for {@code scope}
+   *       {@code M} is the releasable-references metadata type for {@code scope}
    *   <li>{@code Set<ReleasableReferenceManager>}
    *   <li>{@code Set<TypedReleasableReferenceManager<M>>}, where {@code M} is the metadata type for
    *       the scope
@@ -196,10 +196,7 @@ TypeElement componentType() {
     if (factoryMethod().isPresent()) {
       factoryMethodParameters().keySet().forEach(requirements::add);
     }
-    componentDescriptor()
-        .dependencies()
-        .stream()
-        .forEach(requirements::add);
+    requirements.addAll(componentDescriptor().dependencies());
     if (componentDescriptor().builderSpec().isPresent()) {
       componentDescriptor()
           .builderSpec()
diff --git a/java/dagger/internal/codegen/DaggerGraphs.java b/java/dagger/internal/codegen/DaggerGraphs.java
index 066668fc8..f0471da49 100644
--- a/java/dagger/internal/codegen/DaggerGraphs.java
+++ b/java/dagger/internal/codegen/DaggerGraphs.java
@@ -49,12 +49,11 @@
     }
 
     Map<N, N> visitedNodeToPathPredecessor = new HashMap<>(); // encodes shortest path tree
-    Queue<N> currentNodes = new ArrayDeque<N>();
-    Queue<N> nextNodes = new ArrayDeque<N>();
     for (N node : successors) {
       visitedNodeToPathPredecessor.put(node, nodeU);
     }
-    currentNodes.addAll(successors);
+    Queue<N> currentNodes = new ArrayDeque<N>(successors);
+    Queue<N> nextNodes = new ArrayDeque<N>();
 
     // Perform a breadth-first traversal starting with the successors of nodeU.
     while (!currentNodes.isEmpty()) {
diff --git a/java/dagger/internal/codegen/GeneratedComponentModel.java b/java/dagger/internal/codegen/GeneratedComponentModel.java
index 8f8dde15c..636b5a181 100644
--- a/java/dagger/internal/codegen/GeneratedComponentModel.java
+++ b/java/dagger/internal/codegen/GeneratedComponentModel.java
@@ -43,8 +43,8 @@
 final class GeneratedComponentModel {
   /** A type of field that this component model can generate. */
   // TODO(user, dpb): Move component requirements and reference managers to top? The order should
-  // be component requirements, referencemanagers, framework fields, private method fields, ... etc
-  static enum FieldSpecKind {
+  // be component requirements, reference managers, framework fields, private method fields, ... etc
+  enum FieldSpecKind {
 
     /**
      * A field for the lock and cached value for {@linkplain PrivateMethodBindingExpression
@@ -68,14 +68,14 @@
   /** A type of method that this component model can generate. */
   // TODO(user, dpb): Change the oder to constructor, initialize, component, then private
   // (including MIM and AOMâ€”why treat those separately?).
-  static enum MethodSpecKind {
+  enum MethodSpecKind {
     /** The component constructor. */
     CONSTRUCTOR,
 
     /** A builder method for the component. (Only used by the root component.) */
     BUILDER_METHOD,
 
-    /** A private method that wraps depenency expressions. */
+    /** A private method that wraps dependency expressions. */
     PRIVATE_METHOD,
 
     /** An initialization method that initializes component requirements and framework types. */
@@ -92,7 +92,7 @@
   }
 
   /** A type of nested class that this component model can generate. */
-  static enum TypeSpecKind {
+  enum TypeSpecKind {
     /** A factory class for a present optional binding. */
     PRESENT_FACTORY,
 
