diff --git a/java/dagger/internal/codegen/Expression.java b/java/dagger/internal/codegen/Expression.java
index 0678cd7f4..c38fd5795 100644
--- a/java/dagger/internal/codegen/Expression.java
+++ b/java/dagger/internal/codegen/Expression.java
@@ -47,11 +47,19 @@ static Expression create(TypeMirror type, CodeBlock expression) {
     return new Expression(type, expression);
   }
 
+  /**
+   * Creates a new {@link Expression} with a {@link TypeMirror}, {@linkplain CodeBlock#of(String,
+   * Object[]) format, and arguments}.
+   */
+  static Expression create(TypeMirror type, String format, Object... args) {
+    return create(type, CodeBlock.of(format, args));
+  }
+
   /** Returns a new expression that casts the current expression to {@code newType}. */
   // TODO(ronshapiro): consider overloads that take a Types and Elements and only cast if necessary,
   // or just embedding a Types/Elements instance in an Expression.
   Expression castTo(TypeMirror newType) {
-    return Expression.create(newType, CodeBlock.of("($T) $L", newType, codeBlock));
+    return create(newType, "($T) $L", newType, codeBlock);
   }
 
   /** The {@link TypeMirror type} to which the expression evaluates. */
diff --git a/java/dagger/internal/codegen/SubcomponentBuilderBindingExpression.java b/java/dagger/internal/codegen/SubcomponentBuilderBindingExpression.java
index 08b618051..2a2df28d8 100644
--- a/java/dagger/internal/codegen/SubcomponentBuilderBindingExpression.java
+++ b/java/dagger/internal/codegen/SubcomponentBuilderBindingExpression.java
@@ -17,7 +17,6 @@
 package dagger.internal.codegen;
 
 import com.squareup.javapoet.ClassName;
-import com.squareup.javapoet.CodeBlock;
 
 /** A binding expression for a subcomponent builder that just invokes the constructor. */
 final class SubcomponentBuilderBindingExpression extends SimpleInvocationBindingExpression {
@@ -33,7 +32,6 @@
 
   @Override
   Expression getDependencyExpression(ClassName requestingClass) {
-    return Expression.create(
-        binding.key().type(), CodeBlock.of("new $LBuilder()", subcomponentBuilderName));
+    return Expression.create(binding.key().type(), "new $LBuilder()", subcomponentBuilderName);
   }
 }
diff --git a/javatests/dagger/internal/codegen/ExpressionTest.java b/javatests/dagger/internal/codegen/ExpressionTest.java
index ba8a589ce..a8203796d 100644
--- a/javatests/dagger/internal/codegen/ExpressionTest.java
+++ b/javatests/dagger/internal/codegen/ExpressionTest.java
@@ -19,7 +19,6 @@
 import static com.google.common.truth.Truth.assertThat;
 
 import com.google.testing.compile.CompilationRule;
-import com.squareup.javapoet.CodeBlock;
 import javax.lang.model.type.TypeMirror;
 import org.junit.Rule;
 import org.junit.Test;
@@ -38,7 +37,7 @@
   public void castTo() {
     TypeMirror subtype = type(Subtype.class);
     TypeMirror supertype = type(Supertype.class);
-    Expression expression = Expression.create(subtype, CodeBlock.of("new $T() {}", subtype));
+    Expression expression = Expression.create(subtype, "new $T() {}", subtype);
 
     Expression castTo = expression.castTo(supertype);
 
