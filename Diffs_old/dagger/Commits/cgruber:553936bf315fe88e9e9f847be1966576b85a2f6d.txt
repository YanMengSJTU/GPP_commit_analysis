diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index d4436bd38..dd4ab51ff 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -1067,8 +1067,7 @@ private Snippet initializeMembersInjectorForBinding(MembersInjectionBinding bind
         BindingKey key = Iterables.getOnlyElement(requestedBindingKeys);
         ResolvedBindings resolvedBindings = graph.resolvedBindings().get(key);
         Snippet frameworkSnippet = getMemberSelect(key).getSnippetWithRawTypeCastFor(name);
-        if (FrameworkField.frameworkClassForResolvedBindings(resolvedBindings)
-                .equals(Provider.class)
+        if (resolvedBindings.frameworkClass().equals(Provider.class)
             && frameworkClass.equals(Producer.class)) {
           parameters.add(
               Snippet.format(
diff --git a/compiler/src/main/java/dagger/internal/codegen/Binding.java b/compiler/src/main/java/dagger/internal/codegen/Binding.java
index af40109c6..49e67a7b1 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Binding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Binding.java
@@ -118,10 +118,6 @@ public boolean apply(Binding binding) {
   /** The {@link Key} that is provided by this binding. */
   protected abstract Key key();
 
-  BindingKey bindingKey() {
-    return BindingKey.create(bindingType().bindingKeyKind(), key());
-  }
-
   /** Returns the {@link Element} instance that is responsible for declaring the binding. */
   abstract Element bindingElement();
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/FrameworkField.java b/compiler/src/main/java/dagger/internal/codegen/FrameworkField.java
index d407d6568..3f4605401 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FrameworkField.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FrameworkField.java
@@ -18,7 +18,6 @@
 import com.google.auto.common.MoreTypes;
 import com.google.auto.value.AutoValue;
 import com.google.common.base.CaseFormat;
-import com.google.common.collect.Iterables;
 import dagger.MembersInjector;
 import dagger.internal.codegen.writer.ClassName;
 import dagger.internal.codegen.writer.ParameterizedTypeName;
@@ -38,27 +37,21 @@
  * @since 2.0
  */
 @AutoValue
+// TODO(gak): Reexamine the this class and how consistently we're using it and its creation methods.
 abstract class FrameworkField {
-  // TODO(gak): reexamine the this class and how consistently we're using it and its creation
-  // methods
-  static FrameworkField createWithTypeFromKey(
-      Class<?> frameworkClass, BindingKey bindingKey, String name) {
+  static FrameworkField createWithTypeFromKey(Class<?> frameworkClass, Key key, String name) {
     String suffix = frameworkClass.getSimpleName();
-    ParameterizedTypeName frameworkType = ParameterizedTypeName.create(
-        ClassName.fromClass(frameworkClass),
-        TypeNames.forTypeMirror(bindingKey.key().type()));
-    return new AutoValue_FrameworkField(frameworkClass, frameworkType, bindingKey,
-        name.endsWith(suffix) ? name : name + suffix);
+    ParameterizedTypeName frameworkType =
+        ParameterizedTypeName.create(
+            ClassName.fromClass(frameworkClass), TypeNames.forTypeMirror(key.type()));
+    return new AutoValue_FrameworkField(
+        frameworkType, name.endsWith(suffix) ? name : name + suffix);
   }
 
-  private static FrameworkField createForMapBindingContribution(
-      Class<?> frameworkClass, BindingKey bindingKey, String name) {
-    TypeMirror mapValueType =
-        MoreTypes.asDeclared(bindingKey.key().type()).getTypeArguments().get(1);
-    return new AutoValue_FrameworkField(frameworkClass,
-        (ParameterizedTypeName) TypeNames.forTypeMirror(mapValueType),
-        bindingKey,
-        name);
+  private static FrameworkField createForMapBindingContribution(Key key, String name) {
+    TypeMirror mapValueType = MoreTypes.asDeclared(key.type()).getTypeArguments().get(1);
+    return new AutoValue_FrameworkField(
+        (ParameterizedTypeName) TypeNames.forTypeMirror(mapValueType), name);
   }
 
   static FrameworkField createForSyntheticContributionBinding(
@@ -66,8 +59,7 @@ static FrameworkField createForSyntheticContributionBinding(
     switch (contributionBinding.contributionType()) {
       case MAP:
         return createForMapBindingContribution(
-            contributionBinding.frameworkClass(),
-            contributionBinding.bindingKey(),
+            contributionBinding.key(),
             KeyVariableNamer.INSTANCE.apply(contributionBinding.key())
                 + "Contribution"
                 + contributionNumber);
@@ -76,7 +68,7 @@ static FrameworkField createForSyntheticContributionBinding(
       case UNIQUE:
         return createWithTypeFromKey(
             contributionBinding.frameworkClass(),
-            contributionBinding.bindingKey(),
+            contributionBinding.key(),
             KeyVariableNamer.INSTANCE.apply(contributionBinding.key())
                 + "Contribution"
                 + contributionNumber);
@@ -93,14 +85,14 @@ static FrameworkField createForResolvedBindings(ResolvedBindings resolvedBinding
           case SET:
           case MAP:
             return createWithTypeFromKey(
-                frameworkClassForResolvedBindings(resolvedBindings),
-                bindingKey,
+                resolvedBindings.frameworkClass(),
+                bindingKey.key(),
                 KeyVariableNamer.INSTANCE.apply(bindingKey.key()));
           case UNIQUE:
             ContributionBinding binding = getOnlyElement(resolvedBindings.contributionBindings());
             return createWithTypeFromKey(
-                frameworkClassForResolvedBindings(resolvedBindings),
-                bindingKey,
+                resolvedBindings.frameworkClass(),
+                bindingKey.key(),
                 BINDING_ELEMENT_NAME.visit(binding.bindingElement()));
           default:
             throw new AssertionError();
@@ -108,7 +100,7 @@ static FrameworkField createForResolvedBindings(ResolvedBindings resolvedBinding
       case MEMBERS_INJECTION:
         return createWithTypeFromKey(
             MembersInjector.class,
-            bindingKey,
+            bindingKey.key(),
             CaseFormat.UPPER_CAMEL.to(
                 CaseFormat.LOWER_CAMEL,
                 resolvedBindings
@@ -141,22 +133,6 @@ public String visitType(TypeElement e, Void p) {
         }
       };
 
-  static Class<?> frameworkClassForResolvedBindings(ResolvedBindings resolvedBindings) {
-    switch (resolvedBindings.bindingKey().kind()) {
-      case CONTRIBUTION:
-        return Iterables.any(
-                resolvedBindings.contributionBindings(), Binding.isOfType(Binding.Type.PRODUCTION))
-            ? Binding.Type.PRODUCTION.frameworkClass()
-            : Binding.Type.PROVISION.frameworkClass();
-      case MEMBERS_INJECTION:
-        return MembersInjector.class;
-      default:
-        throw new AssertionError();
-    }
-  }
-
-  abstract Class<?> frameworkClass();
   abstract ParameterizedTypeName frameworkType();
-  abstract BindingKey bindingKey();
   abstract String name();
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java b/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
index 079ecb767..a0b7f9208 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
@@ -25,6 +25,7 @@
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.Ordering;
+import dagger.MembersInjector;
 import dagger.internal.codegen.ContributionBinding.ContributionType;
 import java.util.EnumSet;
 import java.util.Set;
@@ -266,4 +267,20 @@ ContributionType contributionType() {
         throw new IllegalArgumentException();
     }
   }
+
+  /**
+   * The framework class associated with these bindings.
+   */
+  Class<?> frameworkClass() {
+    switch (bindingKey().kind()) {
+      case CONTRIBUTION:
+        return Iterables.any(contributionBindings(), Binding.isOfType(Binding.Type.PRODUCTION))
+            ? Binding.Type.PRODUCTION.frameworkClass()
+            : Binding.Type.PROVISION.frameworkClass();
+      case MEMBERS_INJECTION:
+        return MembersInjector.class;
+      default:
+        throw new AssertionError();
+    }
+  }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java b/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
index 56ca8512b..69543eca3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
@@ -147,8 +147,9 @@ public int compare(DependencyRequest left, DependencyRequest right) {
       if (dependencyNames.size() == 1) {
         // if there's only one name, great! use it!
         String name = Iterables.getOnlyElement(dependencyNames);
-        bindingFields.put(bindingKey,
-            FrameworkField.createWithTypeFromKey(frameworkClass, bindingKey, name));
+        bindingFields.put(
+            bindingKey,
+            FrameworkField.createWithTypeFromKey(frameworkClass, bindingKey.key(), name));
       } else {
         // in the event that a field is being used for a bunch of deps with different names,
         // add all the names together with "And"s in the middle. E.g.: stringAndS
@@ -159,8 +160,10 @@ public int compare(DependencyRequest left, DependencyRequest right) {
           compositeNameBuilder.append("And").append(
               CaseFormat.LOWER_CAMEL.to(UPPER_CAMEL, namesIterator.next()));
         }
-        bindingFields.put(bindingKey, FrameworkField.createWithTypeFromKey(
-            frameworkClass, bindingKey, compositeNameBuilder.toString()));
+        bindingFields.put(
+            bindingKey,
+            FrameworkField.createWithTypeFromKey(
+                frameworkClass, bindingKey.key(), compositeNameBuilder.toString()));
       }
     }
     return bindingFields.build();
diff --git a/compiler/src/test/java/dagger/internal/codegen/BindingFieldTest.java b/compiler/src/test/java/dagger/internal/codegen/BindingFieldTest.java
index eaaa595d3..b8349156d 100644
--- a/compiler/src/test/java/dagger/internal/codegen/BindingFieldTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/BindingFieldTest.java
@@ -64,26 +64,21 @@ private ExecutableElement getXConstructor() {
     Key key = keyFactory.forInjectConstructorWithResolvedType(
         getXConstructor().getEnclosingElement().asType());
     TypeName xClass = TypeNames.forTypeMirror(key.type());
-    assertThat(FrameworkField.createWithTypeFromKey(Provider.class,
-            BindingKey.create(BindingKey.Kind.CONTRIBUTION, key), "test")
-        .frameworkType())
-        .isEqualTo(ParameterizedTypeName.create(
-            ClassName.fromClass(Provider.class), xClass));
-    assertThat(FrameworkField.createWithTypeFromKey(MembersInjector.class,
-            BindingKey.create(BindingKey.Kind.MEMBERS_INJECTION, key), "test")
-        .frameworkType())
-        .isEqualTo(ParameterizedTypeName.create(
-            ClassName.fromClass(MembersInjector.class), xClass));
+    assertThat(FrameworkField.createWithTypeFromKey(Provider.class, key, "test").frameworkType())
+        .isEqualTo(ParameterizedTypeName.create(ClassName.fromClass(Provider.class), xClass));
+    assertThat(
+            FrameworkField.createWithTypeFromKey(MembersInjector.class, key, "test")
+                .frameworkType())
+        .isEqualTo(
+            ParameterizedTypeName.create(ClassName.fromClass(MembersInjector.class), xClass));
   }
 
   @Test public void nameSuffix() {
     Key key = keyFactory.forInjectConstructorWithResolvedType(
         getXConstructor().getEnclosingElement().asType());
-    assertThat(FrameworkField.createWithTypeFromKey(Provider.class,
-            BindingKey.create(BindingKey.Kind.CONTRIBUTION, key), "foo").name())
+    assertThat(FrameworkField.createWithTypeFromKey(Provider.class, key, "foo").name())
         .isEqualTo("fooProvider");
-    assertThat(FrameworkField.createWithTypeFromKey(Provider.class,
-            BindingKey.create(BindingKey.Kind.CONTRIBUTION, key), "fooProvider").name())
+    assertThat(FrameworkField.createWithTypeFromKey(Provider.class, key, "fooProvider").name())
         .isEqualTo("fooProvider");
 
   }
