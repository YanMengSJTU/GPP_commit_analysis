diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
index c6cdcb73d..e1105682c 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -683,9 +683,9 @@ private void reportMultipleBindingTypes(Deque<ResolvedRequest> path) {
       new Formatter(builder).format(ErrorMessages.MULTIPLE_BINDING_TYPES_FOR_KEY_FORMAT,
           keyFormatter.format(path.peek().request().key()));
       ImmutableListMultimap<BindingType, ContributionBinding> bindingsByType =
-          ContributionBinding.bindingTypesFor(resolvedBinding.contributionBindings());
-      for (BindingType type :
-          Ordering.natural().immutableSortedCopy(bindingsByType.keySet())) {
+          ContributionBinding.<ContributionBinding>bindingTypesFor(
+              resolvedBinding.contributionBindings());
+      for (BindingType type : Ordering.natural().immutableSortedCopy(bindingsByType.keySet())) {
         builder.append(INDENT);
         builder.append(formatBindingType(type));
         builder.append(" bindings:\n");
diff --git a/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java b/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
index 28ce3c31a..609f034c5 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
@@ -37,7 +37,7 @@ static ResolvedBindings create(
       BindingKey bindingKey,
       Set<? extends Binding> ownedBindings,
       Set<? extends Binding> inheritedBindings) {
-    ImmutableSet<Binding> immutableOwnedBindings = ImmutableSet.copyOf(ownedBindings);
+    ImmutableSet<Binding> immutableOwnedBindings = ImmutableSet.<Binding>copyOf(ownedBindings);
     return new AutoValue_ResolvedBindings(
         bindingKey,
         immutableOwnedBindings,
diff --git a/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java b/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java
index 13430c670..4b6efc0ea 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java
@@ -48,7 +48,8 @@
 
   final void generate(T input) throws SourceFileGenerationException {
     ClassName generatedTypeName = nameGeneratedType(input);
-    ImmutableSet<Element> originatingElements = ImmutableSet.copyOf(getOriginatingElements(input));
+    ImmutableSet<Element> originatingElements =
+        ImmutableSet.<Element>copyOf(getOriginatingElements(input));
     try {
       ImmutableSet<JavaWriter> writers = write(generatedTypeName, input);
       for (JavaWriter javaWriter : writers) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/writer/ParameterizedTypeName.java b/compiler/src/main/java/dagger/internal/codegen/writer/ParameterizedTypeName.java
index 63cf3dd95..e46a96186 100644
--- a/compiler/src/main/java/dagger/internal/codegen/writer/ParameterizedTypeName.java
+++ b/compiler/src/main/java/dagger/internal/codegen/writer/ParameterizedTypeName.java
@@ -31,7 +31,7 @@
 
   ParameterizedTypeName(ClassName type, Iterable<? extends TypeName> parameters) {
     this.type = type;
-    this.parameters = ImmutableList.copyOf(parameters);
+    this.parameters = ImmutableList.<TypeName>copyOf(parameters);
   }
   
   public ClassName type() {
