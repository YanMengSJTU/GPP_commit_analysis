diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java
index 851f2d6e4..933ebd332 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -151,11 +151,7 @@
   }
 
   private void generateComponent(BindingGraph bindingGraph) {
-    try {
-      componentGenerator.generate(bindingGraph);
-    } catch (SourceFileGenerationException e) {
-      e.printMessageTo(messager);
-    }
+    componentGenerator.generate(bindingGraph, messager);
   }
 
   private ImmutableSet<Element> getElementsFromAnnotations(
diff --git a/compiler/src/main/java/dagger/internal/codegen/MapKeyProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/MapKeyProcessingStep.java
index c59715b50..2dfe472c1 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MapKeyProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MapKeyProcessingStep.java
@@ -19,19 +19,19 @@
 import static dagger.internal.codegen.MapKeyGenerator.MapKeyCreatorSpecification.unwrappedMapKeyWithAnnotationValue;
 import static dagger.internal.codegen.MapKeyGenerator.MapKeyCreatorSpecification.wrappedMapKey;
 import static dagger.internal.codegen.MapKeys.getUnwrappedMapKeyType;
+import static javax.lang.model.element.ElementKind.ANNOTATION_TYPE;
+import static javax.lang.model.util.ElementFilter.typesIn;
 
 import com.google.auto.common.BasicAnnotationProcessor;
-import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.SetMultimap;
 import dagger.MapKey;
-import dagger.internal.codegen.MapKeyGenerator.MapKeyCreatorSpecification;
 import java.lang.annotation.Annotation;
 import java.util.Set;
 import javax.annotation.processing.Messager;
 import javax.lang.model.element.Element;
-import javax.lang.model.element.ElementKind;
+import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.util.Types;
 
@@ -67,33 +67,26 @@
   @Override
   public Set<Element> process(
       SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation) {
-    for (Element element : elementsByAnnotation.get(MapKey.class)) {
-      ValidationReport<Element> mapKeyReport = mapKeyValidator.validate(element);
+    for (TypeElement mapKeyAnnotation : typesIn(elementsByAnnotation.get(MapKey.class))) {
+      ValidationReport<Element> mapKeyReport = mapKeyValidator.validate(mapKeyAnnotation);
       mapKeyReport.printMessagesTo(messager);
 
       if (mapKeyReport.isClean()) {
-        MapKey mapkey = element.getAnnotation(MapKey.class);
+        MapKey mapkey = mapKeyAnnotation.getAnnotation(MapKey.class);
         if (mapkey.unwrapValue()) {
           DeclaredType keyType =
-              getUnwrappedMapKeyType(MoreTypes.asDeclared(element.asType()), types);
-          if (keyType.asElement().getKind() == ElementKind.ANNOTATION_TYPE) {
-            writeCreatorClass(
+              getUnwrappedMapKeyType(MoreTypes.asDeclared(mapKeyAnnotation.asType()), types);
+          if (keyType.asElement().getKind().equals(ANNOTATION_TYPE)) {
+            mapKeyGenerator.generate(
                 unwrappedMapKeyWithAnnotationValue(
-                    MoreElements.asType(element), MoreTypes.asTypeElement(keyType)));
+                    mapKeyAnnotation, MoreTypes.asTypeElement(keyType)),
+                messager);
           }
         } else {
-          writeCreatorClass(wrappedMapKey(MoreElements.asType(element)));
+          mapKeyGenerator.generate(wrappedMapKey(mapKeyAnnotation), messager);
         }
       }
     }
     return ImmutableSet.of();
   }
-
-  private void writeCreatorClass(MapKeyCreatorSpecification mapKeyCreatorType) {
-    try {
-      mapKeyGenerator.generate(mapKeyCreatorType);
-    } catch (SourceFileGenerationException e) {
-      e.printMessageTo(messager);
-    }
-  }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java
index 2d99ece96..b7b94d67d 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java
@@ -148,11 +148,7 @@ static ModuleProcessingStep producerModuleProcessingStep(
           for (ModuleMethodFactoryGenerator generator : moduleMethodFactoryGenerators) {
             for (ExecutableElement method :
                 elementsWithAnnotation(moduleMethods, generator.factoryMethodAnnotation())) {
-              try {
-                generator.generate(method, moduleElement);
-              } catch (SourceFileGenerationException e) {
-                e.printMessageTo(messager);
-              }
+              generator.generate(method, moduleElement, messager);
             }
           }
         }
@@ -197,8 +193,7 @@ private boolean moduleMethodsAreValid(
     Class<? extends Annotation> factoryMethodAnnotation();
 
     /** Generates the factory source file for the given method and module. */
-    void generate(ExecutableElement method, TypeElement moduleElement)
-        throws SourceFileGenerationException;
+    void generate(ExecutableElement method, TypeElement moduleElement, Messager messager);
   }
 
   private static final class ProvisionModuleMethodFactoryGenerator
@@ -219,9 +214,9 @@ void generate(ExecutableElement method, TypeElement moduleElement)
     }
 
     @Override
-    public void generate(ExecutableElement method, TypeElement moduleElement)
-        throws SourceFileGenerationException {
-      factoryGenerator.generate(provisionBindingFactory.forProvidesMethod(method, moduleElement));
+    public void generate(ExecutableElement method, TypeElement moduleElement, Messager messager) {
+      factoryGenerator.generate(
+          provisionBindingFactory.forProvidesMethod(method, moduleElement), messager);
     }
   }
 
@@ -244,10 +239,9 @@ public void generate(ExecutableElement method, TypeElement moduleElement)
     }
 
     @Override
-    public void generate(ExecutableElement method, TypeElement moduleElement)
-        throws SourceFileGenerationException {
+    public void generate(ExecutableElement method, TypeElement moduleElement, Messager messager) {
       producerFactoryGenerator.generate(
-          productionBindingFactory.forProducesMethod(method, moduleElement));
+          productionBindingFactory.forProducesMethod(method, moduleElement), messager);
     }
   }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleProcessingStep.java
index 03e229ddb..1bd095e29 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleProcessingStep.java
@@ -50,11 +50,7 @@
   public Set<Element> process(
       SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation) {
     for (Element element : elementsByAnnotation.values()) {
-      try {
-        monitoringModuleGenerator.generate(MoreElements.asType(element));
-      } catch (SourceFileGenerationException e) {
-        e.printMessageTo(messager);
-      }
+      monitoringModuleGenerator.generate(MoreElements.asType(element), messager);
     }
     return ImmutableSet.of();
   }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProductionExecutorModuleProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/ProductionExecutorModuleProcessingStep.java
index 3b5722378..d508a51e8 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProductionExecutorModuleProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProductionExecutorModuleProcessingStep.java
@@ -50,11 +50,7 @@
   public Set<Element> process(
       SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation) {
     for (Element element : elementsByAnnotation.values()) {
-      try {
-        productionExecutorModuleGenerator.generate(MoreElements.asType(element));
-      } catch (SourceFileGenerationException e) {
-        e.printMessageTo(messager);
-      }
+      productionExecutorModuleGenerator.generate(MoreElements.asType(element), messager);
     }
     return ImmutableSet.of();
   }
diff --git a/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java b/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java
index 7c41b1c53..4c7e0bc86 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java
@@ -33,6 +33,7 @@
 import java.io.Writer;
 import javax.annotation.Generated;
 import javax.annotation.processing.Filer;
+import javax.annotation.processing.Messager;
 import javax.lang.model.element.Element;
 import javax.lang.model.util.Elements;
 import javax.tools.JavaFileObject;
@@ -61,6 +62,18 @@
     generatedAnnotationAvailable = elements.getTypeElement("javax.annotation.Generated") != null;
   }
 
+  /**
+   * Generates a source file to be compiled for {@code T}. Writes any generation exception to {@code
+   * messager} and does not throw.
+   */
+  void generate(T input, Messager messager) {
+    try {
+      generate(input);
+    } catch (SourceFileGenerationException e) {
+      e.printMessageTo(messager);
+    }
+  }
+
   /** Generates a source file to be compiled for {@code T}. */
   void generate(T input) throws SourceFileGenerationException {
     ClassName generatedTypeName = nameGeneratedType(input);
