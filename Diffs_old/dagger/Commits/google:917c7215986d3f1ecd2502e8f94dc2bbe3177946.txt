diff --git a/compiler/src/main/java/dagger/internal/codegen/Binding.java b/compiler/src/main/java/dagger/internal/codegen/Binding.java
index ffa3bedf5..ef52b04a9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Binding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Binding.java
@@ -42,6 +42,22 @@
  * @since 2.0
  */
 abstract class Binding {
+  static Optional<String> bindingPackageFor(Iterable<? extends Binding> bindings) {
+    ImmutableSet.Builder<String> bindingPackagesBuilder = ImmutableSet.builder();
+    for (Binding binding : bindings) {
+      bindingPackagesBuilder.addAll(binding.bindingPackage().asSet());
+    }
+    ImmutableSet<String> bindingPackages = bindingPackagesBuilder.build();
+    switch (bindingPackages.size()) {
+      case 0:
+        return Optional.absent();
+      case 1:
+        return Optional.of(bindingPackages.iterator().next());
+      default:
+        throw new IllegalArgumentException();
+    }
+  }
+
   /** The {@link Key} that is provided by this binding. */
   protected abstract Key key();
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 24f3e15af..a771ec1b9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -80,6 +80,7 @@
 
 import static com.google.auto.common.MoreTypes.asDeclared;
 import static com.google.common.base.CaseFormat.LOWER_CAMEL;
+import static dagger.internal.codegen.Binding.bindingPackageFor;
 import static dagger.internal.codegen.ConfigurationAnnotations.getMapKeys;
 import static dagger.internal.codegen.DependencyRequest.Kind.MEMBERS_INJECTOR;
 import static dagger.internal.codegen.ProvisionBinding.FactoryCreationStrategy.ENUM_INSTANCE;
@@ -253,23 +254,8 @@ static ProxyClassAndField create(ClassWriter proxyWriter, FieldWriter proxyField
       }
 
       ImmutableSet<? extends Binding> bindings = resolvedBindings.bindings();
-      ImmutableSet.Builder<String> bindingPackagesBuilder = ImmutableSet.builder();
-      for (Binding binding : bindings) {
-        bindingPackagesBuilder.addAll(binding.bindingPackage().asSet());
-      }
-      ImmutableSet<String> bindingPackages = bindingPackagesBuilder.build();
 
-      final String bindingPackage;
-      switch (bindingPackages.size()) {
-        case 0:
-          bindingPackage = componentName.packageName();
-          break;
-        case 1:
-          bindingPackage = bindingPackages.iterator().next();
-          break;
-        default:
-          throw new IllegalStateException();
-      }
+      String bindingPackage = bindingPackageFor(bindings).or(componentName.packageName());
 
       final Optional<String> proxySelector;
       final TypeWriter classWithFields;
@@ -295,8 +281,8 @@ static ProxyClassAndField create(ClassWriter proxyWriter, FieldWriter proxyField
           proxyWriter.addModifiers(PUBLIC, FINAL);
           // create the field for the proxy in the component
           FieldWriter proxyFieldWriter =
-              componentWriter.addField(proxyWriter.name(), bindingPackage.replace('.', '_')
-                  + "_Proxy");
+              componentWriter.addField(proxyWriter.name(),
+                  bindingPackage.replace('.', '_') + "_Proxy");
           proxyFieldWriter.addModifiers(PRIVATE, FINAL);
           proxyFieldWriter.setInitializer("new %s()", proxyWriter.name());
           proxyClassAndField = ProxyClassAndField.create(proxyWriter, proxyFieldWriter);
diff --git a/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java b/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java
index 57089a36d..394bacc7f 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java
@@ -18,8 +18,10 @@
 import com.google.common.collect.ImmutableListMultimap;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Ordering;
+import java.util.EnumSet;
 import java.util.Set;
 
+import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 
 /**
@@ -63,18 +65,15 @@
    */
   static BindingType bindingTypeFor(Iterable<? extends ContributionBinding> bindings) {
     checkNotNull(bindings);
-    switch (Iterables.size(bindings)) {
-      case 0:
-        throw new IllegalArgumentException("no bindings");
-      case 1:
-        return Iterables.getOnlyElement(bindings).bindingType();
-      default:
-        Set<BindingType> types = bindingTypesFor(bindings).keySet();
-        if (types.size() > 1) {
-          throw new IllegalArgumentException(
-              String.format(ErrorMessages.MULTIPLE_BINDING_TYPES_FORMAT, types));
-        }
-        return Iterables.getOnlyElement(types);
+    checkArgument(!Iterables.isEmpty(bindings), "no bindings");
+    Set<BindingType> types = EnumSet.noneOf(BindingType.class);
+    for (ContributionBinding binding : bindings) {
+      types.add(binding.bindingType());
     }
+    if (types.size() > 1) {
+      throw new IllegalArgumentException(
+          String.format(ErrorMessages.MULTIPLE_BINDING_TYPES_FORMAT, types));
+    }
+    return Iterables.getOnlyElement(types);
   }
 }
