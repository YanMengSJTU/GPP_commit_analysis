diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index 6c60484f6..be36c9bfb 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -115,7 +115,7 @@ public SourceVersion getSupportedSourceVersion() {
         new ProductionExecutorModuleGenerator(filer, elements);
 
     DependencyRequest.Factory dependencyRequestFactory =
-        new DependencyRequest.Factory(elements, keyFactory);
+        new DependencyRequest.Factory(keyFactory);
     ProvisionBinding.Factory provisionBindingFactory =
         new ProvisionBinding.Factory(elements, types, keyFactory, dependencyRequestFactory);
     ProductionBinding.Factory productionBindingFactory =
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
index be829f1db..07d99080a 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
@@ -23,7 +23,6 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
 import static com.google.common.collect.Iterables.getOnlyElement;
-import static javax.lang.model.util.ElementFilter.constructorsIn;
 
 import com.google.auto.common.MoreTypes;
 import com.google.auto.value.AutoValue;
@@ -40,7 +39,6 @@
 import dagger.internal.codegen.DependencyRequest.Factory.KindAndType;
 import dagger.producers.Produced;
 import dagger.producers.Producer;
-import dagger.producers.internal.AbstractProducer;
 import java.util.List;
 import javax.annotation.CheckReturnValue;
 import javax.inject.Inject;
@@ -48,14 +46,12 @@
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.ErrorType;
 import javax.lang.model.type.ExecutableType;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.SimpleTypeVisitor7;
 
 /**
@@ -201,11 +197,9 @@ public boolean apply(DependencyRequest request) {
    * which may mean that the type will be generated in a later round of processing.
    */
   static final class Factory {
-    private final Elements elements;
     private final Key.Factory keyFactory;
 
-    Factory(Elements elements, Key.Factory keyFactory) {
-      this.elements = elements;
+    Factory(Key.Factory keyFactory) {
       this.keyFactory = keyFactory;
     }
 
@@ -371,15 +365,14 @@ DependencyRequest forProductionImplementationExecutor() {
           .build();
     }
 
-    DependencyRequest forProductionComponentMonitorProvider() {
-      TypeElement element = elements.getTypeElement(AbstractProducer.class.getCanonicalName());
-      for (ExecutableElement constructor : constructorsIn(element.getEnclosedElements())) {
-        if (constructor.getParameters().size() == 2) {
-          // the 2-arg constructor has the appropriate dependency as its first arg
-          return forRequiredVariable(constructor.getParameters().get(0), Optional.of("monitor"));
-        }
-      }
-      throw new AssertionError("expected 2-arg constructor in AbstractProducer");
+    DependencyRequest forProductionComponentMonitor() {
+      Key key = keyFactory.forProductionComponentMonitor();
+      return DependencyRequest.builder()
+          .kind(Kind.PROVIDER)
+          .key(key)
+          .requestElement(MoreTypes.asElement(key.type()))
+          .overriddenVariableName(Optional.of("monitor"))
+          .build();
     }
 
     private DependencyRequest newDependencyRequest(
diff --git a/compiler/src/main/java/dagger/internal/codegen/Key.java b/compiler/src/main/java/dagger/internal/codegen/Key.java
index 7745ab5d7..fd3de007c 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Key.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Key.java
@@ -49,6 +49,7 @@
 import dagger.producers.Producer;
 import dagger.producers.Production;
 import dagger.producers.internal.ProductionImplementation;
+import dagger.producers.monitoring.ProductionComponentMonitor;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.Executor;
@@ -508,6 +509,12 @@ Key forProductionImplementationExecutor() {
           getClassElement(Executor.class).asType());
     }
 
+    Key forProductionComponentMonitor() {
+      return forQualifiedType(
+          Optional.<AnnotationMirror>absent(),
+          getClassElement(ProductionComponentMonitor.class).asType());
+    }
+
     /**
      * If {@code requestKey} is for a {@code Map<K, V>} or {@code Map<K, Produced<V>>}, returns keys
      * for {@code Map<K, Provider<V>>} and {@code Map<K, Producer<V>>} (if Dagger-Producers is on
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProductionBinding.java b/compiler/src/main/java/dagger/internal/codegen/ProductionBinding.java
index a1c3af826..4dba30056 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProductionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProductionBinding.java
@@ -128,7 +128,7 @@ ProductionBinding forProducesMethod(
       DependencyRequest executorRequest =
           dependencyRequestFactory.forProductionImplementationExecutor();
       DependencyRequest monitorRequest =
-          dependencyRequestFactory.forProductionComponentMonitorProvider();
+          dependencyRequestFactory.forProductionComponentMonitor();
       Kind kind = MoreTypes.isTypeOf(ListenableFuture.class, producesMethod.getReturnType())
           ? Kind.FUTURE_PRODUCTION
           : Kind.IMMEDIATE;
diff --git a/compiler/src/test/java/dagger/internal/codegen/DependencyRequestMapperTest.java b/compiler/src/test/java/dagger/internal/codegen/DependencyRequestMapperTest.java
index 162305408..40a12db0b 100644
--- a/compiler/src/test/java/dagger/internal/codegen/DependencyRequestMapperTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/DependencyRequestMapperTest.java
@@ -58,7 +58,7 @@
     this.types = compilationRule.getTypes();
     this.elements = compilationRule.getElements();
     this.keyFactory = new Key.Factory(types, elements);
-    this.dependencyRequestFactory = new DependencyRequest.Factory(elements, keyFactory);
+    this.dependencyRequestFactory = new DependencyRequest.Factory(keyFactory);
   }
 
   private List<? extends VariableElement> sampleProviderParameters() {
