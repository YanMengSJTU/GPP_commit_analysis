diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
index 5bf939f7f..967ed8ff2 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -223,6 +223,12 @@ ComponentDescriptor create(TypeElement componentDefinitionType) {
               if (injectBinding.isPresent()) {
                 requestsToResolve.addAll(injectBinding.get().dependencies());
                 resolvedProvisionBindings.put(key, injectBinding.get());
+                if (injectBinding.get().requiresMemberInjection()) {
+                  DependencyRequest forMembersInjectedType =
+                      dependencyRequestFactory.forMembersInjectedType(
+                          injectBinding.get().providedKey().type());
+                  requestsToResolve.add(forMembersInjectedType);
+                }
               } else {
                 // TODO(gak): support this
                 throw new UnsupportedOperationException(
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 44b857116..a8d5588fc 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -176,6 +176,9 @@ private void writeImports(JavaWriter writer, ClassName factoryClassName,
       if (binding.provisionType().equals(SET) || binding.provisionType().equals(SET_VALUES)) {
         importsBuilder.add(ClassName.fromClass(SetFactory.class));
       }
+      if (binding.requiresMemberInjection()) {
+        importsBuilder.add(ClassName.fromClass(MembersInjector.class));
+      }
       for (TypeElement referencedType : MoreTypes.referencedTypes(binding.providedKey().type())) {
         ClassName className = ClassName.fromTypeElement(referencedType);
         if (!className.packageName().equals("java.lang")
@@ -291,6 +294,15 @@ private static String initializeFactoryForBinding(JavaWriter writer, ProvisionBi
       if (binding.bindingKind().equals(PROVISION)) {
         parameters.add(moduleNames.get(binding.bindingTypeElement()));
       }
+      if (binding.requiresMemberInjection()) {
+        String membersInjectorName =
+            membersInjectorNames.get(Key.create(binding.providedKey().type()));
+        if (membersInjectorName != null) {
+          parameters.add(membersInjectorName);
+        } else {
+	    throw new UnsupportedOperationException("Non-generated MembersInjector");
+        }
+      }
       parameters.addAll(
           getDependencyParameters(binding.dependencies(), providerNames, membersInjectorNames));
       return String.format(
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
index 6cdbaf7ba..35d0d44ff 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
@@ -113,6 +113,11 @@ DependencyRequest forComponentMembersInjectionMethod(ExecutableElement membersIn
           membersInjectionMethod);
     }
 
+    DependencyRequest forMembersInjectedType(TypeMirror type) {
+      return new AutoValue_DependencyRequest(Kind.MEMBERS_INJECTOR, Key.create(type),
+          types.asElement(type));
+    }
+
     private DependencyRequest newDependencyRequest(Element requestElement, TypeMirror type,
         Optional<AnnotationMirror> qualifier) {
       if (elements.getTypeElement(Provider.class.getCanonicalName())
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index e6640f1a1..7d13efcca 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -482,4 +482,64 @@
         .compilesWithoutError()
         .and().generatesSources(generatedComponent);
   }
+
+  @Test public void membersInjectionInsideProvision() {
+    JavaFileObject injectableTypeFile = JavaFileObjects.forSourceLines("test.SomeInjectableType",
+        "package test;",
+        "",
+        "import javax.inject.Inject;",
+        "",
+        "final class SomeInjectableType {",
+        "  @Inject SomeInjectableType() {}",
+        "}");
+    JavaFileObject injectedTypeFile = JavaFileObjects.forSourceLines("test.SomeInjectedType",
+        "package test;",
+        "",
+        "import javax.inject.Inject;",
+        "",
+        "final class SomeInjectedType {",
+        "  @Inject SomeInjectableType injectedField;",
+        "  @Inject SomeInjectedType() {}",
+        "}");
+    JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
+        "package test;",
+        "",
+        "import dagger.Component;",
+        "",
+        "@Component",
+        "interface SimpleComponent {",
+        "  SomeInjectedType createAndInject();",
+        "}");
+    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
+        "test.Dagger_SimpleComponent",
+        "package test;",
+        "",
+        "import dagger.MembersInjector;",
+        "import javax.annotation.Generated;",
+        "import javax.inject.Provider;",
+        "",
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        "public final class Dagger_SimpleComponent implements SimpleComponent {",
+        "  private final Provider<SomeInjectableType> someInjectableTypeProvider;",
+        "  private final Provider<SomeInjectedType> someInjectedTypeProvider;",
+        "  private final MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
+        "",
+        "  public Dagger_SimpleComponent() {",
+        "    this.someInjectableTypeProvider = new SomeInjectableType$$Factory();",
+        "    this.someInjectedTypeMembersInjector = ",
+        "        new SomeInjectedType$$MembersInjector(someInjectableTypeProvider);",
+        "    this.someInjectedTypeProvider = ",
+        "        new SomeInjectedType$$Factory(someInjectedTypeMembersInjector);",
+        "  }",
+        "",
+        "  @Override public SomeInjectedType createAndInject() {",
+        "    return someInjectedTypeProvider.get();",
+        "  }",
+        "}");
+    ASSERT.about(javaSources())
+        .that(ImmutableList.of(injectableTypeFile, injectedTypeFile, componentFile))
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError()
+        .and().generatesSources(generatedComponent);
+  }
 }
