diff --git a/java/dagger/internal/codegen/BindingGraphConverter.java b/java/dagger/internal/codegen/BindingGraphConverter.java
index 5b91edf2c..a2cc7990f 100644
--- a/java/dagger/internal/codegen/BindingGraphConverter.java
+++ b/java/dagger/internal/codegen/BindingGraphConverter.java
@@ -21,6 +21,7 @@
 import static dagger.internal.codegen.DaggerGraphs.unreachableNodes;
 import static dagger.model.BindingKind.SUBCOMPONENT_CREATOR;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import com.google.common.graph.MutableNetwork;
@@ -32,6 +33,7 @@
 import dagger.model.BindingGraph.MissingBinding;
 import dagger.model.BindingGraph.Node;
 import dagger.model.BindingGraphProxies;
+import dagger.model.ComponentPath;
 import dagger.model.DependencyRequest;
 import javax.inject.Inject;
 import javax.lang.model.element.ExecutableElement;
@@ -77,15 +79,20 @@ private ComponentNode rootComponentNode(Network<Node, Edge> network) {
   }
 
   private final class Traverser extends ComponentTreeTraverser {
-
     private final MutableNetwork<Node, Edge> network =
         NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();
+    private final boolean isRootSubcomponent;
+    private final boolean isFullBindingGraph;
 
+    private final ComponentPath rootComponentPath;
     private ComponentNode parentComponent;
     private ComponentNode currentComponent;
 
     Traverser(BindingGraph graph) {
       super(graph);
+      rootComponentPath = ComponentPath.create(ImmutableList.of(graph.componentTypeElement()));
+      isRootSubcomponent = graph.componentDescriptor().isSubcomponent();
+      isFullBindingGraph = graph.isFullBindingGraph();
     }
 
     @Override
@@ -213,7 +220,12 @@ private BindingNode bindingNode(
     }
 
     private MissingBinding missingBindingNode(ResolvedBindings dependencies) {
-      return BindingGraphProxies.missingBindingNode(componentPath(), dependencies.key());
+      // TODO(b/117833324): Revisit whether limiting missing binding nodes to the root component is
+      // necessary to limit the amount of missing binding nodes in the network, or if perhaps *all*
+      // missing binding nodes should be structured this way.
+      return BindingGraphProxies.missingBindingNode(
+          isRootSubcomponent && !isFullBindingGraph ? rootComponentPath : componentPath(),
+          dependencies.key());
     }
 
     private ComponentNode subcomponentNode(TypeMirror subcomponentBuilderType, BindingGraph graph) {
