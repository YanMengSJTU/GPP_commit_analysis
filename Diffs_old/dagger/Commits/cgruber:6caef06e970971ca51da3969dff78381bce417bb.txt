diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index 1f8b2ba93..df8834abc 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -55,6 +55,7 @@
   @Inject BindingGraphPlugins bindingGraphPlugins;
   @Inject CompilerOptions compilerOptions;
   @Inject DaggerStatistics daggerStatistics;
+  @Inject ModuleDescriptor.Factory moduleDescriptorFactory;
 
   public ComponentProcessor() {
     this.testingPlugins = Optional.empty();
@@ -188,5 +189,6 @@ protected void postRound(RoundEnvironment roundEnv) {
         e.printMessageTo(processingEnv.getMessager());
       }
     }
+    moduleDescriptorFactory.clearCache();
   }
 }
diff --git a/java/dagger/internal/codegen/ModuleDescriptor.java b/java/dagger/internal/codegen/ModuleDescriptor.java
index d352f863a..4be952fe3 100644
--- a/java/dagger/internal/codegen/ModuleDescriptor.java
+++ b/java/dagger/internal/codegen/ModuleDescriptor.java
@@ -26,6 +26,7 @@
 import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
 import static dagger.internal.codegen.ModuleAnnotation.moduleAnnotation;
 import static dagger.internal.codegen.SourceFiles.classFileName;
+import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
 import static javax.lang.model.type.TypeKind.DECLARED;
 import static javax.lang.model.type.TypeKind.NONE;
 import static javax.lang.model.util.ElementFilter.methodsIn;
@@ -45,9 +46,12 @@
 import dagger.model.Key;
 import dagger.multibindings.Multibinds;
 import dagger.producers.Produces;
+import java.util.HashMap;
 import java.util.LinkedHashSet;
+import java.util.Map;
 import java.util.Set;
 import javax.inject.Inject;
+import javax.inject.Singleton;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.TypeMirror;
@@ -95,6 +99,7 @@
         .collect(toImmutableSet());
   }
 
+  @Singleton
   static final class Factory {
     private final DaggerElements elements;
     private final BindingFactory bindingFactory;
@@ -102,6 +107,7 @@
     private final DelegateDeclaration.Factory bindingDelegateDeclarationFactory;
     private final SubcomponentDeclaration.Factory subcomponentDeclarationFactory;
     private final OptionalBindingDeclaration.Factory optionalBindingDeclarationFactory;
+    private final Map<TypeElement, ModuleDescriptor> cache = new HashMap<>();
 
     @Inject
     Factory(
@@ -120,6 +126,10 @@
     }
 
     ModuleDescriptor create(TypeElement moduleElement) {
+      return reentrantComputeIfAbsent(cache, moduleElement, this::createUncached);
+    }
+
+    ModuleDescriptor createUncached(TypeElement moduleElement) {
       ImmutableSet.Builder<ContributionBinding> bindings = ImmutableSet.builder();
       ImmutableSet.Builder<DelegateDeclaration> delegates = ImmutableSet.builder();
       ImmutableSet.Builder<MultibindingDeclaration> multibindingDeclarations =
@@ -209,5 +219,10 @@ private String implicitlyIncludedModuleName(ExecutableElement method) {
           + "_"
           + LOWER_CAMEL.to(UPPER_CAMEL, method.getSimpleName().toString());
     }
+
+    /** Releases references to any {@link ModuleDescriptor}s that this factory is retaining. */
+    void clearCache() {
+      cache.clear();
+    }
   }
 }
