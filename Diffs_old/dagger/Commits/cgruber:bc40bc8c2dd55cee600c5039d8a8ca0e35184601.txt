diff --git a/WORKSPACE b/WORKSPACE
index c819ffb7e..bf7669619 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -109,8 +109,8 @@ maven_jar(
 
 maven_jar(
     name = "com_google_testing_compile_compile_testing",
-    artifact = "com.google.testing.compile:compile-testing:0.12",
-    sha1 = "b4c935fbb20788d462fbad7235fc9f94314d964b",
+    artifact = "com.google.testing.compile:compile-testing:0.14",
+    sha1 = "3d9e885e2dfe4e6ceabc4402419abf3879c7429e",
 )
 
 maven_jar(
diff --git a/javatests/dagger/internal/codegen/ComponentBuilderTest.java b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
index 20f2a1436..d3d347dcc 100644
--- a/javatests/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
@@ -80,25 +80,8 @@ public void testEmptyBuilder() {
             "test.DaggerSimpleComponent",
             "package test;",
             "",
-            "import javax.annotation.Generated;",
-            "",
             GENERATED_ANNOTATION,
             "public final class DaggerSimpleComponent implements SimpleComponent {",
-            "  private DaggerSimpleComponent(Builder builder) {}",
-            "",
-            "  public static SimpleComponent.Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static SimpleComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
-            "  @Override",
-            "  public SomeInjectableType someInjectableType() {",
-            "    return new SomeInjectableType();",
-            "  }",
-            "",
             "  private static final class Builder implements SimpleComponent.Builder {",
             "    @Override",
             "    public SimpleComponent build() {",
@@ -113,7 +96,7 @@ public void testEmptyBuilder() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerSimpleComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -154,34 +137,9 @@ public void testUsesBuildAndSetterNames() {
             "package test;",
             "",
             "import dagger.internal.Preconditions;",
-            "import javax.annotation.Generated;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private TestModule testModule;",
-            "",
-            "  private DaggerTestComponent(Builder builder) {",
-            "    initialize(builder);",
-            "  }",
-            "",
-            "  public static TestComponent.Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().create();",
-            "  }",
-            "",
-            "  @SuppressWarnings(\"unchecked\")",
-            "  private void initialize(final Builder builder) {",
-            "    this.testModule = builder.testModule;",
-            "  }",
-            "",
-            "  @Override",
-            "  public String string() {",
-            "    return TestModule_StringFactory.proxyString(testModule);",
-            "  }",
-            "",
             "  private static final class Builder implements TestComponent.Builder {",
             "    private TestModule testModule;",
             "",
@@ -205,7 +163,7 @@ public void testUsesBuildAndSetterNames() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index 8554bf243..6a6920043 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -366,41 +366,15 @@ public void componentWithInvalidModule() {
             .addLines(
                 "package test;",
                 "",
-                "import dagger.Lazy;",
-                "import dagger.internal.DoubleCheck;")
-            .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
-                "import dagger.internal.MemoizedSentinel;")
-            .addLines(
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerSimpleComponent implements SimpleComponent {")
             .addLinesIn(
                 EXPERIMENTAL_ANDROID_MODE,
-                "  private volatile Object someInjectableType = new MemoizedSentinel();",
-                "",
-                "  private DaggerSimpleComponent(Builder builder) {}")
+                "  private volatile Object someInjectableType = new MemoizedSentinel();")
             .addLinesIn(
                 DEFAULT_MODE,
                 "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
                 "",
-                "  private DaggerSimpleComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }")
-            .addLines(
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "")
-            .addLinesIn(
-                DEFAULT_MODE,
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.someInjectableTypeProvider =",
@@ -453,14 +427,6 @@ public void componentWithInvalidModule() {
                 DEFAULT_MODE,
                 "    return someInjectableTypeProvider;")
             .addLines(
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
                 "  }",
                 "}")
             .build();
@@ -471,7 +437,7 @@ public void componentWithInvalidModule() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerSimpleComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test public void simpleComponentWithNesting() {
@@ -500,22 +466,11 @@ public void componentWithInvalidModule() {
             .addLines(
                 "package test;",
                 "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerOuterType_SimpleComponent",
                 "    implements OuterType.SimpleComponent {",
                 "  private DaggerOuterType_SimpleComponent(Builder builder) {}",
                 "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static OuterType.SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  @Override",
                 "  public OuterType.A a() {",
                 "    return new OuterType.A();",
@@ -531,15 +486,6 @@ public void componentWithInvalidModule() {
                 "    OuterType_B_MembersInjector.injectA(instance, a());",
                 "    return instance;",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public OuterType.SimpleComponent build() {",
-                "      return new DaggerOuterType_SimpleComponent(this);",
-                "    }",
-                "  }",
                 "}")
             .build();
 
@@ -548,7 +494,7 @@ public void componentWithInvalidModule() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerOuterType_SimpleComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test public void componentWithModule() {
@@ -608,18 +554,6 @@ public void componentWithInvalidModule() {
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private TestModule testModule;",
                 "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  private B getB() {",
                 "    return TestModule_BFactory.proxyB(testModule, new C());",
                 "  }",
@@ -637,8 +571,6 @@ public void componentWithInvalidModule() {
                 "  public static final class Builder {",
                 "    private TestModule testModule;",
                 "",
-                "    private Builder() {}",
-                "",
                 "    public TestComponent build() {",
                 "      if (testModule == null) {",
                 "        this.testModule = new TestModule();",
@@ -661,7 +593,7 @@ public void componentWithInvalidModule() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -723,20 +655,8 @@ public void componentWithAbstractModule() {
             .addLines(
                 "package test;",
                 "",
-                "import javax.annotation.Generated;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  private B getB() {",
                 "    return TestModule_BFactory.proxyB(new C());",
                 "  }",
@@ -745,15 +665,6 @@ public void componentWithAbstractModule() {
                 "  public A a() {",
                 "    return new A(getB());",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
                 "}")
             .build();
 
@@ -764,7 +675,7 @@ public void componentWithAbstractModule() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test public void transitiveModuleDeps() {
@@ -844,21 +755,7 @@ public void componentWithAbstractModule() {
         "",
         GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
-        "",
-        "  private DaggerTestComponent(Builder builder) {",
-        "  }",
-        "",
-        "  public static Builder builder() {",
-        "    return new Builder();",
-        "  }",
-        "",
-        "  public static TestComponent create() {",
-        "    return new Builder().build();",
-        "  }",
-        "",
         "  public static final class Builder {",
-        "    private Builder() {}",
-        "",
         "    public TestComponent build() {",
         "      return new DaggerTestComponent(this);",
         "    }",
@@ -916,7 +813,7 @@ public void componentWithAbstractModule() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -1153,20 +1050,9 @@ public void testDefaultPackage() {
                 "package test;",
                 "",
                 "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  @Override",
                 "  public void inject(SomeInjectedType instance) {",
                 "    injectSomeInjectedType(instance);",
@@ -1183,14 +1069,6 @@ public void testDefaultPackage() {
                 "        instance, new SomeInjectableType());",
                 "    return instance;",
                 "  }",
-                "  public static final class Builder {",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
                 "}")
             .build();
 
@@ -1201,7 +1079,7 @@ public void testDefaultPackage() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerSimpleComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test public void componentInjection() {
@@ -1230,26 +1108,10 @@ public void testDefaultPackage() {
             "test.DaggerSimpleComponent",
             "package test;",
             "",
-            "import dagger.internal.InstanceFactory;",
-            "import javax.annotation.Generated;",
-            "import javax.inject.Provider;",
-            "",
             GENERATED_ANNOTATION,
             "public final class DaggerSimpleComponent implements SimpleComponent {",
             "  private Provider<SimpleComponent> simpleComponentProvider;",
             "",
-            "  private DaggerSimpleComponent(Builder builder) {",
-            "    initialize(builder);",
-            "  }",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static SimpleComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @SuppressWarnings(\"unchecked\")",
             "  private void initialize(final Builder builder) {",
             "    this.simpleComponentProvider = InstanceFactory.<SimpleComponent>create(this);",
@@ -1264,15 +1126,6 @@ public void testDefaultPackage() {
             "  public Provider<SimpleComponent> selfProvider() {",
             "    return simpleComponentProvider;",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {",
-            "    }",
-            "",
-            "    public SimpleComponent build() {",
-            "      return new DaggerSimpleComponent(this);",
-            "    }",
-            "  }",
             "}");
     Compilation compilation =
         daggerCompiler()
@@ -1281,7 +1134,7 @@ public void testDefaultPackage() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerSimpleComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test public void membersInjectionInsideProvision() {
@@ -1319,20 +1172,9 @@ public void testDefaultPackage() {
                 "package test;",
                 "",
                 "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  @Override",
                 "  public SomeInjectedType createAndInject() {",
                 "    return injectSomeInjectedType(",
@@ -1345,15 +1187,6 @@ public void testDefaultPackage() {
                 "        instance, new SomeInjectableType());",
                 "    return instance;",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
                 "}")
             .build();
 
@@ -1364,73 +1197,7 @@ public void testDefaultPackage() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerSimpleComponent")
-        .hasSourceEquivalentTo(generatedComponent);
-  }
-
-  @Test public void injectionWithGenericBaseClass() {
-    JavaFileObject genericType = JavaFileObjects.forSourceLines("test.AbstractGenericType",
-        "package test;",
-        "",
-        "abstract class AbstractGenericType<T> {",
-        "}");
-    JavaFileObject injectableTypeFile = JavaFileObjects.forSourceLines("test.SomeInjectableType",
-        "package test;",
-        "",
-        "import javax.inject.Inject;",
-        "",
-        "final class SomeInjectableType extends AbstractGenericType<String> {",
-        "  @Inject SomeInjectableType() {}",
-        "}");
-    JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
-        "package test;",
-        "",
-        "import dagger.Component;",
-        "",
-        "@Component",
-        "interface SimpleComponent {",
-        "  SomeInjectableType someInjectableType();",
-        "}");
-    JavaFileObject generatedComponent =
-        JavaFileObjects.forSourceLines(
-            "test.DaggerSimpleComponent",
-            "package test;",
-            "",
-            "import javax.annotation.Generated;",
-            "",
-            GENERATED_ANNOTATION,
-            "public final class DaggerSimpleComponent implements SimpleComponent {",
-            "  private DaggerSimpleComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static SimpleComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
-            "  @Override",
-            "  public SomeInjectableType someInjectableType() {",
-            "    return new SomeInjectableType();",
-            "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {",
-            "    }",
-            "",
-            "    public SimpleComponent build() {",
-            "      return new DaggerSimpleComponent(this);",
-            "    }",
-            "  }",
-            "}");
-    Compilation compilation =
-        daggerCompiler()
-            .withOptions(compilerMode.javacopts())
-            .compile(genericType, injectableTypeFile, componentFile);
-    assertThat(compilation).succeeded();
-    assertThat(compilation)
-        .generatedSourceFile("test.DaggerSimpleComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test public void componentDependency() {
@@ -1474,22 +1241,10 @@ public void testDefaultPackage() {
             "test.DaggerBComponent",
             "package test;",
             "",
-            "import dagger.internal.Preconditions;",
-            "import javax.annotation.Generated;",
-            "import javax.inject.Provider;",
-            "",
             GENERATED_ANNOTATION,
             "public final class DaggerBComponent implements BComponent {",
             "  private Provider<A> aProvider;",
             "",
-            "  private DaggerBComponent(Builder builder) {",
-            "    initialize(builder);",
-            "  }",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
             "  @SuppressWarnings(\"unchecked\")",
             "  private void initialize(final Builder builder) {",
             "    this.aProvider = new test_AComponent_a(builder.aComponent);",
@@ -1503,9 +1258,6 @@ public void testDefaultPackage() {
             "  public static final class Builder {",
             "    private AComponent aComponent;",
             "",
-            "    private Builder() {",
-            "    }",
-            "",
             "    public BComponent build() {",
             "      if (aComponent == null) {",
             "        throw new IllegalStateException(AComponent.class.getCanonicalName()",
@@ -1541,7 +1293,7 @@ public void testDefaultPackage() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerBComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test public void moduleNameCollision() {
@@ -1591,26 +1343,11 @@ public void testDefaultPackage() {
             "test.DaggerTestComponent",
             "package test;",
             "",
-            "import dagger.internal.Preconditions;",
-            "import javax.annotation.Generated;",
-            "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
             "  private TestModule testModule;",
             "  private other.test.TestModule testModule2;",
             "",
-            "  private DaggerTestComponent(Builder builder) {",
-            "    initialize(builder);",
-            "  }",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @SuppressWarnings(\"unchecked\")",
             "  private void initialize(final Builder builder) {",
             "    this.testModule = builder.testModule;",
@@ -1631,9 +1368,6 @@ public void testDefaultPackage() {
             "    private TestModule testModule;",
             "    private other.test.TestModule testModule2;",
             "",
-            "    private Builder() {",
-            "    }",
-            "",
             "    public TestComponent build() {",
             "      if (testModule == null) {",
             "        this.testModule = new TestModule();",
@@ -1662,7 +1396,7 @@ public void testDefaultPackage() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test public void ignoresDependencyMethodsFromObject() {
@@ -1738,18 +1472,6 @@ public void testDefaultPackage() {
             "public final class DaggerBComponent implements BComponent {",
             "  private AComponent aComponent;",
             "",
-            "  private DaggerBComponent(Builder builder) {",
-            "    initialize(builder);",
-            "  }",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static BComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @SuppressWarnings(\"unchecked\")",
             "  private void initialize(final Builder builder) {",
             "    this.aComponent = builder.aComponent;",
@@ -1767,25 +1489,6 @@ public void testDefaultPackage() {
             "            aComponent.someClassInjection(),",
             "            \"Cannot return null from a non-@Nullable component method\"));",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private AComponent aComponent;",
-            "",
-            "    private Builder() {}",
-            "",
-            "    public BComponent build() {",
-            "      if (aComponent == null) {",
-            "        throw new IllegalStateException(",
-            "            AComponent.class.getCanonicalName() + \" must be set\");",
-            "      }",
-            "      return new DaggerBComponent(this);",
-            "    }",
-            "",
-            "    public Builder aComponent(AComponent aComponent) {",
-            "      this.aComponent = Preconditions.checkNotNull(aComponent);",
-            "      return this;",
-            "    }",
-            "  }",
             "}");
 
     Compilation compilation =
@@ -1795,7 +1498,7 @@ public void testDefaultPackage() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerBComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test public void resolutionOrder() {
@@ -1855,18 +1558,10 @@ public void testDefaultPackage() {
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
                 "  private B getB() {",
                 "    return new B(c());",
                 "  }",
+                "",
                 "  @Override",
                 "  public A a() {",
                 "    return new A(getB());",
@@ -1881,15 +1576,6 @@ public void testDefaultPackage() {
                 "  public X x() {",
                 "    return new X(c());",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
                 "}")
             .build();
 
@@ -1900,7 +1586,7 @@ public void testDefaultPackage() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test public void simpleComponent_redundantComponentMethod() {
@@ -2003,8 +1689,6 @@ public void testDefaultPackage() {
         "package test;",
         "",
         "import dagger.Component;",
-        "import dagger.Lazy;",
-        "import javax.inject.Provider;",
         "",
         "@Component",
         "interface Supertype {",
@@ -2014,64 +1698,30 @@ public void testDefaultPackage() {
         "package test;",
         "",
         "import dagger.Component;",
-        "import dagger.Lazy;",
-        "import javax.inject.Provider;",
         "",
         "@Component",
         "interface SimpleComponent extends Supertype {",
         "}");
-    JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.ComponentWithDep",
-        "package test;",
-        "",
-        "import dagger.Component;",
-        "import dagger.Lazy;",
-        "import javax.inject.Provider;",
-        "",
-        "@Component(dependencies = SimpleComponent.class)",
-        "interface ComponentWithDep {",
-        "  SomeInjectableType someInjectableType();",
-        "}");
     JavaFileObject generatedComponent =
         JavaFileObjects.forSourceLines(
             "test.DaggerSimpleComponent",
             "package test;",
             "",
-            "import javax.annotation.Generated;",
-            "",
             GENERATED_ANNOTATION,
             "public final class DaggerSimpleComponent implements SimpleComponent {",
-            "  private DaggerSimpleComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static SimpleComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public SomeInjectableType someInjectableType() {",
             "    return new SomeInjectableType();",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {",
-            "    }",
-            "",
-            "    public SimpleComponent build() {",
-            "      return new DaggerSimpleComponent(this);",
-            "    }",
-            "  }",
             "}");
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
-            .compile(injectableTypeFile, componentSupertype, depComponentFile, componentFile);
+            .compile(injectableTypeFile, componentSupertype, depComponentFile);
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerSimpleComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test public void wildcardGenericsRequiresAtProvides() {
@@ -2215,100 +1865,6 @@ public void componentSupertypeDependsOnGeneratedType() {
     assertThat(compilation).generatedSourceFile("test.DaggerSimpleComponent");
   }
 
-  @Test
-  @Ignore // modify this test as necessary while debugging for your situation.
-  @SuppressWarnings("unused")
-  public void genericTestToLetMeDebugInEclipse() {
-    JavaFileObject aFile = JavaFileObjects.forSourceLines("test.A",
-        "package test;",
-        "",
-         "import javax.inject.Inject;",
-         "",
-         "public final class A {",
-         "  @Inject A() {}",
-         "}");
-     JavaFileObject bFile = JavaFileObjects.forSourceLines("test.B",
-         "package test;",
-         "",
-         "import javax.inject.Inject;",
-         "import javax.inject.Provider;",
-         "",
-         "public class B<T> {",
-         "  @Inject B() {}",
-         "}");
-     JavaFileObject dFile = JavaFileObjects.forSourceLines("test.sub.D",
-         "package test.sub;",
-         "",
-         "import javax.inject.Inject;",
-         "import javax.inject.Provider;",
-         "import test.B;",
-         "",
-         "public class D {",
-         "  @Inject D(B<A.InA> ba) {}",
-         "}");
-     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
-         "package test;",
-         "",
-         "import dagger.Component;",
-         "import dagger.Lazy;",
-         "",
-         "import javax.inject.Provider;",
-         "",
-         "@Component",
-         "interface SimpleComponent {",
-         "  B<A> d();",
-         "  Provider<B<A>> d2();",
-         "}");
-     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-         "test.DaggerSimpleComponent",
-         "package test;",
-         "",
-         "import javax.annotation.Generated;",
-         "import javax.inject.Provider;",
-         "",
-         GENERATED_ANNOTATION,
-         "public final class DaggerSimpleComponent implements SimpleComponent {",
-         "  private Provider<D> dProvider;",
-         "",
-         "  private DaggerSimpleComponent(Builder builder) {",
-         "    initialize(builder);",
-         "  }",
-         "",
-         "  public static Builder builder() {",
-         "    return new Builder();",
-         "  }",
-         "",
-         "  public static SimpleComponent create() {",
-         "    return new Builder().build();",
-         "  }",
-         "",
-         "  @SuppressWarnings(\"unchecked\")",
-         "  private void initialize(final Builder builder) {",
-         "    this.dProvider = new D_Factory(B_Factory.INSTANCE);",
-         "  }",
-         "",
-         "  @Override",
-         "  public D d() {",
-         "    return dProvider.get();",
-         "  }",
-         "",
-         "  public static final class Builder {",
-         "    private Builder() {",
-         "    }",
-         "",
-         "    public SimpleComponent build() {",
-         "      return new DaggerSimpleComponent(this);",
-         "    }",
-         "  }",
-         "}");
-    Compilation compilation =
-        daggerCompiler().withOptions(compilerMode.javacopts()).compile(aFile, bFile, componentFile);
-    assertThat(compilation).succeeded();
-    assertThat(compilation)
-        .generatedSourceFile("test.DaggerSimpleComponent")
-        .hasSourceEquivalentTo(generatedComponent);
-   }
-
   /**
    * We warn when generating a {@link MembersInjector} for a type post-hoc (i.e., if Dagger wasn't
    * invoked when compiling the type). But Dagger only generates {@link MembersInjector}s for types
@@ -2833,31 +2389,20 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
     assertThat(compilation).succeededWithoutWarnings();
     assertThat(compilation)
         .generatedSourceFile("test.TestModule_NonNullableStringFactory")
-        .hasSourceEquivalentTo(
+        .containsElementsIn(
             JavaFileObjects.forSourceLines(
                 "test.TestModule_NonNullableStringFactory",
                 "package test;",
                 "",
-                "import dagger.internal.Factory;",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class TestModule_NonNullableStringFactory",
                 "    implements Factory<String> {",
-                "  private static final TestModule_NonNullableStringFactory INSTANCE =",
-                "      new TestModule_NonNullableStringFactory();",
-                "",
                 "  @Override",
                 "  public String get() {",
                 "    return Preconditions.checkNotNull(",
                 "        TestModule.nonNullableString(), " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
                 "",
-                "  public static Factory<String> create() {",
-                "    return INSTANCE;",
-                "  }",
-                "",
                 "  public static String proxyNonNullableString() {",
                 "    return Preconditions.checkNotNull(",
                 "        TestModule.nonNullableString(), " + NPE_FROM_PROVIDES_METHOD + ");",
@@ -2870,21 +2415,8 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
             .addLines(
                 "package test;",
                 "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  @Override",
                 "  public String nonNullableString() {",
                 "    return TestModule_NonNullableStringFactory.proxyNonNullableString());",
@@ -2900,19 +2432,12 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "    InjectsMember_MembersInjector.injectMember(instance, nonNullableString());",
                 "    return instance;",
                 "  }",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
                 "}")
             .build();
 
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -2955,29 +2480,20 @@ public void nullCheckingIgnoredWhenProviderReturnsPrimitive() {
     assertThat(compilation).succeededWithoutWarnings();
     assertThat(compilation)
         .generatedSourceFile("test.TestModule_PrimitiveIntegerFactory")
-        .hasSourceEquivalentTo(
+        .containsElementsIn(
             JavaFileObjects.forSourceLines(
                 "test.TestModule_PrimitiveIntegerFactory",
                 "package test;",
                 "",
-                "import dagger.internal.Factory;",
-                "import javax.annotation.Generated;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class TestModule_PrimitiveIntegerFactory",
                 "    implements Factory<Integer> {",
-                "  private static final TestModule_PrimitiveIntegerFactory INSTANCE =",
-                "      new TestModule_PrimitiveIntegerFactory();",
                 "",
                 "  @Override",
                 "  public Integer get() {",
                 "    return TestModule.primitiveInteger();",
                 "  }",
                 "",
-                "  public static Factory<Integer> create() {",
-                "    return INSTANCE;",
-                "  }",
-                "",
                 "  public static int proxyPrimitiveInteger() {",
                 "    return TestModule.primitiveInteger();",
                 "  }",
@@ -2989,21 +2505,8 @@ public void nullCheckingIgnoredWhenProviderReturnsPrimitive() {
             .addLines(
                 "package test;",
                 "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  @Override",
                 "  public Integer nonNullableInteger() {",
                 "    return TestModule.primitiveInteger();",
@@ -3019,20 +2522,12 @@ public void nullCheckingIgnoredWhenProviderReturnsPrimitive() {
                 "    InjectsMember_MembersInjector.injectMember(instance, nonNullableInteger());",
                 "    return instance;",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
                 "}")
             .build();
 
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   private static Compiler daggerCompiler(Processor... extraProcessors) {
diff --git a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
index 63a1c0b5d..0121acc59 100644
--- a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
+++ b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
@@ -71,28 +71,16 @@ public void bindsInstance() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(
+        .containsElementsIn(
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import dagger.internal.Preconditions;",
-                "import java.util.List;",
-                "import javax.annotation.Generated;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private Integer i;",
                 "  private List<String> list;",
                 "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static TestComponent.Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.i = builder.i;",
@@ -190,8 +178,6 @@ public void instanceModuleMethod() {
             "test.DaggerTestComponent",
             "package test;",
             "",
-            "import dagger.internal.Preconditions;",
-            "import javax.annotation.Generated;",
             "import other.OtherPackageModule;",
             "import other.OtherPackageModule_LFactory;",
             "",
@@ -200,24 +186,6 @@ public void instanceModuleMethod() {
             "  private ParentModule parentModule;",
             "  private OtherPackageModule otherPackageModule;",
             "",
-            "  private DaggerTestComponent(Builder builder) {",
-            "    initialize(builder);",
-            "  }",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
-            "  @SuppressWarnings(\"unchecked\")",
-            "  private void initialize(final Builder builder) {",
-            "    this.parentModule = builder.parentModule;",
-            "    this.otherPackageModule = builder.otherPackageModule;",
-            "  }",
-            "",
             "  @Override",
             "  public int i() {",
             "    return parentModule.i();",
@@ -227,37 +195,10 @@ public void instanceModuleMethod() {
             "  public long l() {",
             "    return OtherPackageModule_LFactory.proxyL(otherPackageModule);",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private ParentModule parentModule;",
-            "    private OtherPackageModule otherPackageModule;",
-            "",
-            "    private Builder() {}",
-            "",
-            "    public TestComponent build() {",
-            "      if (parentModule == null) {",
-            "        this.parentModule = new ParentModule();",
-            "      }",
-            "      if (otherPackageModule == null) {",
-            "        this.otherPackageModule = new OtherPackageModule();",
-            "      }",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "",
-            "    public Builder parentModule(ParentModule parentModule) {",
-            "      this.parentModule = Preconditions.checkNotNull(parentModule);",
-            "      return this;",
-            "    }",
-            "",
-            "    public Builder otherPackageModule(OtherPackageModule otherPackageModule) {",
-            "      this.otherPackageModule = Preconditions.checkNotNull(otherPackageModule);",
-            "      return this;",
-            "    }",
-            "  }",
             "}");
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -308,26 +249,15 @@ public void componentInstances() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(
+        .containsElementsIn(
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private Dep dep;",
                 "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.dep = builder.dep;",
@@ -363,8 +293,6 @@ public void componentInstances() {
                 "  public static final class Builder {",
                 "    private Dep dep;",
                 "",
-                "    private Builder() {}",
-                "",
                 "    public TestComponent build() {",
                 "      if (dep == null) {",
                 "        throw new IllegalStateException(",
@@ -465,79 +393,21 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import com.google.common.collect.ImmutableSet;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Set;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private ParentModule parentModule;",
                 "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Set<Object> getSetOfObject() {",
-                "    return ImmutableSet.<Object>of(",
-                "        ParentModule_ContributionFactory.proxyContribution());",
-                "  }",
-                "",
-                "  private Object getObject() {",
-                "    return ParentModule_ReliesOnMultibindingFactory.proxyReliesOnMultibinding(",
-                "        parentModule, getSetOfObject());",
-                "  }",
-                "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.parentModule = builder.parentModule;",
                 "  }",
                 "",
                 "  @Override",
-                "  public Provider<Object> dependsOnMultibinding() {",
-                "    return new Provider<Object>() {",
-                "      @Override",
-                "      public Object get() {",
-                "        return getObject();",
-                "      }",
-                "    };",
-                "  }",
-                "",
-                "  @Override",
                 "  public TestSubcomponent subcomponent() {",
                 "    return new TestSubcomponentImpl();",
                 "  }",
                 "",
-                "  public static final class Builder {",
-                "    private ParentModule parentModule;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      if (parentModule == null) {",
-                "        this.parentModule = new ParentModule();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder parentModule(ParentModule parentModule) {",
-                "      this.parentModule = Preconditions.checkNotNull(parentModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "",
                 "  private final class TestSubcomponentImpl implements TestSubcomponent {",
-                "    private TestSubcomponentImpl() {}",
-                "",
                 "    private Set<Object> getSetOfObject() {",
                 "      return ImmutableSet.<Object>of(",
                 "          ParentModule_ContributionFactory.proxyContribution(),",
@@ -548,16 +418,6 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "      return ParentModule_ReliesOnMultibindingFactory.proxyReliesOnMultibinding(",
                 "          DaggerTestComponent.this.parentModule, getSetOfObject());",
                 "    }",
-                "",
-                "    @Override",
-                "    public Provider<Object> dependsOnMultibinding() {",
-                "      return new Provider<Object>() {",
-                "        @Override",
-                "        public Object get() {",
-                "          return getObject();",
-                "        }",
-                "      };",
-                "    }",
                 "  }",
                 "}");
         break;
@@ -567,29 +427,9 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import dagger.internal.Preconditions;",
-                "import dagger.internal.SetFactory;",
-                "import java.util.Set;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private ParentModule parentModule;",
-                "  private Provider<Set<Object>> setOfObjectProvider;",
-                "  private Provider<Object> reliesOnMultibindingProvider;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
                 "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
@@ -604,42 +444,11 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "  }",
                 "",
                 "  @Override",
-                "  public Provider<Object> dependsOnMultibinding() {",
-                "    return reliesOnMultibindingProvider;",
-                "  }",
-                "",
-                "  @Override",
                 "  public TestSubcomponent subcomponent() {",
                 "    return new TestSubcomponentImpl();",
                 "  }",
                 "",
-                "  public static final class Builder {",
-                "    private ParentModule parentModule;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      if (parentModule == null) {",
-                "        this.parentModule = new ParentModule();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder parentModule(ParentModule parentModule) {",
-                "      this.parentModule = Preconditions.checkNotNull(parentModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "",
                 "  private final class TestSubcomponentImpl implements TestSubcomponent {",
-                "    private Provider<Set<Object>> setOfObjectProvider;",
-                "",
-                "    private Provider<Object> reliesOnMultibindingProvider;",
-                "",
-                "    private TestSubcomponentImpl() {",
-                "      initialize();",
-                "    }",
-                "",
                 "    @SuppressWarnings(\"unchecked\")",
                 "    private void initialize() {",
                 "      this.setOfObjectProvider =",
@@ -651,11 +460,6 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "          ParentModule_ReliesOnMultibindingFactory.create(",
                 "              DaggerTestComponent.this.parentModule, setOfObjectProvider);",
                 "    }",
-                "",
-                "    @Override",
-                "    public Provider<Object> dependsOnMultibinding() {",
-                "      return reliesOnMultibindingProvider;",
-                "    }",
                 "  }",
                 "}");
     }
@@ -666,6 +470,6 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 }
diff --git a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
index aa506e141..43bdb0321 100644
--- a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
@@ -168,60 +168,14 @@ public void toDoubleCheck() {
 
     assertThatCompilationWithModule(module)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(
+        .containsElementsIn(
             compilerMode
                 .javaFileBuilder("test.DaggerTestComponent")
                 .addLines(
                     "package test;",
                     "",
-                    "import dagger.internal.DoubleCheck;")
-                .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
-                    "import dagger.internal.MemoizedSentinel;")
-                .addLines(
-                    "import dagger.internal.ReferenceReleasingProvider;",
-                    "import dagger.internal.ReferenceReleasingProviderManager;")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "import dagger.internal.SingleCheck;")
-                .addLines(
-                    "import dagger.releasablereferences.ReleasableReferenceManager;",
-                    "import javax.annotation.Generated;",
-                    "import javax.inject.Provider;",
-                    "",
                     GENERATED_ANNOTATION,
                     "public final class DaggerTestComponent implements TestComponent {")
-                .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
-                    "  private volatile Object regularScoped = new MemoizedSentinel();",
-                    "  private volatile Object reusableScoped = new MemoizedSentinel();")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "  private Provider<RegularScoped> regularScopedProvider;",
-                    "  private Provider<ReusableScoped> reusableScopedProvider;")
-                .addLines(
-                    "  private Provider<Object> reusableProvider;",
-                    "  private Provider<ReleasableScoped> releasableScopedProvider;",
-                    "  private Provider<Object> releasableProvider;",
-                    "  private Provider<Object> unscopedProvider;",
-                    "  private Provider<ReleasableReferenceManager>",
-                    "      forReleasableReferencesReleasableReferenceManagerProvider;",
-                    "  private final ReferenceReleasingProviderManager customScopeReferences =",
-                    "      new ReferenceReleasingProviderManager(",
-                    "          ReleasableScoped.CustomScope.class);",
-                    "",
-                    "  private DaggerTestComponent(Builder builder) {",
-                    "    initialize(builder);",
-                    "  }",
-                    "",
-                    "  public static Builder builder() {",
-                    "    return new Builder();",
-                    "  }",
-                    "",
-                    "  public static TestComponent create() {",
-                    "    return new Builder().build();",
-                    "  }",
-                    "")
                 .addLinesIn(
                     EXPERIMENTAL_ANDROID_MODE,
                     "  private RegularScoped getRegularScoped() {",
@@ -284,45 +238,6 @@ public void toDoubleCheck() {
                     "          }",
                     "        };",
                     "  }",
-                    "",
-                    "  @Override",
-                    "  public Object regular() {")
-                .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
-                    "    return getRegularScoped();")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "    return regularScopedProvider.get();")
-                .addLines(
-                    "  }",
-                    "",
-                    "  @Override",
-                    "  public Object reusable() {",
-                    "    return reusableProvider.get();",
-                    "  }",
-                    "",
-                    "  @Override",
-                    "  public Object releasable() {",
-                    "    return releasableProvider.get();",
-                    "  }",
-                    "",
-                    "  @Override",
-                    "  public Object unscoped() {",
-                    "    return unscopedProvider.get();",
-                    "  }",
-                    "",
-                    "  @Override",
-                    "  public ReleasableReferenceManager releasableReferenceManager() {",
-                    "    return forReleasableReferencesReleasableReferenceManagerProvider.get();",
-                    "  }",
-                    "",
-                    "  public static final class Builder {",
-                    "    private Builder() {}",
-                    "",
-                    "    public TestComponent build() {",
-                    "      return new DaggerTestComponent(this);",
-                    "    }",
-                    "  }",
                     "}")
                 .build());
   }
@@ -355,58 +270,14 @@ public void toSingleCheck() {
 
     assertThatCompilationWithModule(module)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(
+        .containsElementsIn(
             compilerMode
                 .javaFileBuilder("test.DaggerTestComponent")
                 .addLines(
                     "package test;",
-                    "")
-                .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
-                    "import dagger.internal.MemoizedSentinel;")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "import dagger.internal.DoubleCheck;")
-                .addLines(
-                    "import dagger.internal.ReferenceReleasingProvider;",
-                    "import dagger.internal.ReferenceReleasingProviderManager;",
-                    "import dagger.internal.SingleCheck;",
-                    "import dagger.releasablereferences.ReleasableReferenceManager;",
-                    "import javax.annotation.Generated;",
-                    "import javax.inject.Provider;",
                     "",
                     GENERATED_ANNOTATION,
                     "public final class DaggerTestComponent implements TestComponent {")
-                .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
-                    "  private volatile Object regularScoped = new MemoizedSentinel();",
-                    "  private volatile Object reusableScoped = new MemoizedSentinel();")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "  private Provider<RegularScoped> regularScopedProvider;",
-                    "  private Provider<ReusableScoped> reusableScopedProvider;")
-                .addLines(
-                    "  private Provider<ReleasableScoped> releasableScopedProvider;",
-                    "  private Provider<Object> releasableProvider;",
-                    "  private Provider<Object> unscopedProvider;",
-                    "  private Provider<ReleasableReferenceManager>",
-                    "      forReleasableReferencesReleasableReferenceManagerProvider;",
-                    "  private final ReferenceReleasingProviderManager customScopeReferences =",
-                    "      new ReferenceReleasingProviderManager(",
-                    "          ReleasableScoped.CustomScope.class);",
-                    "",
-                    "  private DaggerTestComponent(Builder builder) {",
-                    "    initialize(builder);",
-                    "  }",
-                    "",
-                    "  public static Builder builder() {",
-                    "    return new Builder();",
-                    "  }",
-                    "",
-                    "  public static TestComponent create() {",
-                    "    return new Builder().build();",
-                    "  }",
-                    "")
                 .addLinesIn(
                     EXPERIMENTAL_ANDROID_MODE,
                     "  private RegularScoped getRegularScoped() {",
@@ -454,51 +325,6 @@ public void toSingleCheck() {
                     "          }",
                     "        };",
                     "  }",
-                    "",
-                    "  @Override",
-                    "  public Object regular() {")
-                .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
-                    "    return getRegularScoped();")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "    return regularScopedProvider.get();")
-                .addLines(
-                    "  }",
-                    "",
-                    "  @Override",
-                    "  public Object reusable() {")
-                .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
-                    "    return getReusableScoped();")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "    return reusableScopedProvider.get();")
-                .addLines(
-                    "  }",
-                    "",
-                    "  @Override",
-                    "  public Object releasable() {",
-                    "    return releasableProvider.get();",
-                    "  }",
-                    "",
-                    "  @Override",
-                    "  public Object unscoped() {",
-                    "    return unscopedProvider.get();",
-                    "  }",
-                    "",
-                    "  @Override",
-                    "  public ReleasableReferenceManager releasableReferenceManager() {",
-                    "    return forReleasableReferencesReleasableReferenceManagerProvider.get();",
-                    "  }",
-                    "",
-                    "  public static final class Builder {",
-                    "    private Builder() {}",
-                    "",
-                    "    public TestComponent build() {",
-                    "      return new DaggerTestComponent(this);",
-                    "    }",
-                    "  }",
                     "}")
                 .build());
   }
@@ -530,60 +356,14 @@ public void toReleasableCheck() {
 
     assertThatCompilationWithModule(module)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(
+        .containsElementsIn(
             compilerMode
                 .javaFileBuilder("test.DaggerTestComponent")
                 .addLines(
                     "package test;",
-                    "")
-                .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
-                    "import dagger.internal.MemoizedSentinel;")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "import dagger.internal.DoubleCheck;")
-                .addLines(
-                    "import dagger.internal.ReferenceReleasingProvider;",
-                    "import dagger.internal.ReferenceReleasingProviderManager;")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "import dagger.internal.SingleCheck;")
-                .addLines(
-                    "import dagger.releasablereferences.ReleasableReferenceManager;",
-                    "import javax.annotation.Generated;",
-                    "import javax.inject.Provider;",
                     "",
                     GENERATED_ANNOTATION,
                     "public final class DaggerTestComponent implements TestComponent {")
-                .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
-                    "  private volatile Object regularScoped = new MemoizedSentinel();",
-                    "  private volatile Object reusableScoped = new MemoizedSentinel();")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "  private Provider<RegularScoped> regularScopedProvider;",
-                    "  private Provider<ReusableScoped> reusableScopedProvider;")
-                .addLines(
-                    "  private Provider<ReleasableScoped> releasableScopedProvider;",
-                    "  private Provider<Object> unscopedProvider;",
-                    "  private Provider<ReleasableReferenceManager>",
-                    "      forReleasableReferencesReleasableReferenceManagerProvider;",
-                    "  private final ReferenceReleasingProviderManager customScopeReferences =",
-                    "      new ReferenceReleasingProviderManager(",
-                    "          ReleasableScoped.CustomScope.class);",
-                    "",
-                    "  private DaggerTestComponent(Builder builder) {",
-                    "    initialize(builder);",
-                    "  }",
-                    "",
-                    "  public static Builder builder() {",
-                    "    return new Builder();",
-                    "  }",
-                    "",
-                    "  public static TestComponent create() {",
-                    "    return new Builder().build();",
-                    "  }",
-                    "")
                 .addLinesIn(
                     EXPERIMENTAL_ANDROID_MODE,
                     "  private RegularScoped getRegularScoped() {",
@@ -630,51 +410,6 @@ public void toReleasableCheck() {
                     "          }",
                     "        };",
                     "  }",
-                    "",
-                    "  @Override",
-                    "  public Object regular() {")
-                .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
-                    "    return getRegularScoped();")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "    return regularScopedProvider.get();")
-                .addLines(
-                    "  }",
-                    "",
-                    "  @Override",
-                    "  public Object reusable() {")
-                .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
-                    "    return getReusableScoped();")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "    return reusableScopedProvider.get();")
-                .addLines(
-                    "  }",
-                    "",
-                    "  @Override",
-                    "  public Object releasable() {",
-                    "    return releasableScopedProvider.get();",
-                    "  }",
-                    "",
-                    "  @Override",
-                    "  public Object unscoped() {",
-                    "    return unscopedProvider.get();",
-                    "  }",
-                    "",
-                    "  @Override",
-                    "  public ReleasableReferenceManager releasableReferenceManager() {",
-                    "    return forReleasableReferencesReleasableReferenceManagerProvider.get();",
-                    "  }",
-                    "",
-                    "  public static final class Builder {",
-                    "    private Builder() {}",
-                    "",
-                    "    public TestComponent build() {",
-                    "      return new DaggerTestComponent(this);",
-                    "    }",
-                    "  }",
                     "}")
                 .build());
   }
@@ -706,59 +441,14 @@ public void toUnscoped() {
 
     assertThatCompilationWithModule(module)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(
+        .containsElementsIn(
             compilerMode
                 .javaFileBuilder("test.DaggerTestComponent")
                 .addLines(
                     "package test;",
-                    "")
-                .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
-                    "import dagger.internal.MemoizedSentinel;")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "import dagger.internal.DoubleCheck;")
-                .addLines(
-                    "import dagger.internal.ReferenceReleasingProvider;",
-                    "import dagger.internal.ReferenceReleasingProviderManager;")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "import dagger.internal.SingleCheck;")
-                .addLines(
-                    "import dagger.releasablereferences.ReleasableReferenceManager;",
-                    "import javax.annotation.Generated;",
-                    "import javax.inject.Provider;",
                     "",
                     GENERATED_ANNOTATION,
                     "public final class DaggerTestComponent implements TestComponent {")
-                .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
-                    "  private volatile Object regularScoped = new MemoizedSentinel();",
-                    "  private volatile Object reusableScoped = new MemoizedSentinel();")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "  private Provider<RegularScoped> regularScopedProvider;",
-                    "  private Provider<ReusableScoped> reusableScopedProvider;")
-                .addLines(
-                    "  private Provider<ReleasableScoped> releasableScopedProvider;",
-                    "  private Provider<ReleasableReferenceManager>",
-                    "      forReleasableReferencesReleasableReferenceManagerProvider;",
-                    "  private final ReferenceReleasingProviderManager customScopeReferences =",
-                    "      new ReferenceReleasingProviderManager(",
-                    "          ReleasableScoped.CustomScope.class);",
-                    "",
-                    "  private DaggerTestComponent(Builder builder) {",
-                    "    initialize(builder);",
-                    "  }",
-                    "",
-                    "  public static Builder builder() {",
-                    "    return new Builder();",
-                    "  }",
-                    "",
-                    "  public static TestComponent create() {",
-                    "    return new Builder().build();",
-                    "  }",
-                    "")
                 .addLinesIn(
                     EXPERIMENTAL_ANDROID_MODE,
                     "  private RegularScoped getRegularScoped() {",
@@ -802,51 +492,6 @@ public void toUnscoped() {
                     "          }",
                     "        };",
                     "  }",
-                    "",
-                    "  @Override",
-                    "  public Object regular() {")
-                .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
-                    "    return getRegularScoped();")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "    return regularScopedProvider.get();")
-                .addLines(
-                    "  }",
-                    "",
-                    "  @Override",
-                    "  public Object reusable() {")
-                .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
-                    "    return getReusableScoped();")
-                .addLinesIn(
-                    DEFAULT_MODE,
-                    "    return reusableScopedProvider.get();")
-                .addLines(
-                    "  }",
-                    "",
-                    "  @Override",
-                    "  public Object releasable() {",
-                    "    return releasableScopedProvider.get();",
-                    "  }",
-                    "",
-                    "  @Override",
-                    "  public Object unscoped() {",
-                    "    return new Unscoped();",
-                    "  }",
-                    "",
-                    "  @Override",
-                    "  public ReleasableReferenceManager releasableReferenceManager() {",
-                    "    return forReleasableReferencesReleasableReferenceManagerProvider.get();",
-                    "  }",
-                    "",
-                    "  public static final class Builder {",
-                    "    private Builder() {}",
-                    "",
-                    "    public TestComponent build() {",
-                    "      return new DaggerTestComponent(this);",
-                    "    }",
-                    "  }",
                     "}")
                 .build());
   }
@@ -902,7 +547,7 @@ public void castNeeded_rawTypes_Provider_get() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(
+        .containsElementsIn(
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
                 "package test;",
@@ -918,18 +563,6 @@ public void castNeeded_rawTypes_Provider_get() {
                 "  @SuppressWarnings(\"rawtypes\")",
                 "  private Provider subtypeProvider;",
                 "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.subtypeProvider = DoubleCheck.provider(Subtype_Factory.create());",
@@ -939,14 +572,6 @@ public void castNeeded_rawTypes_Provider_get() {
                 "  public Supertype supertype() {",
                 "    return (Supertype) subtypeProvider.get();",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
                 "}"));
   }
 
@@ -1010,14 +635,11 @@ public void noCast_rawTypes_Provider_get_toInaccessibleType() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(
+        .containsElementsIn(
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import dagger.internal.DoubleCheck;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
                 "import other.Subtype_Factory;",
                 "import other.UsesSupertype;",
                 "import other.UsesSupertype_Factory;",
@@ -1027,36 +649,11 @@ public void noCast_rawTypes_Provider_get_toInaccessibleType() {
                 "  @SuppressWarnings(\"rawtypes\")",
                 "  private Provider subtypeProvider;",
                 "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.subtypeProvider = DoubleCheck.provider(Subtype_Factory.create());",
-                "  }",
-                "",
                 "  @Override",
                 "  public UsesSupertype usesSupertype() {",
                 //   can't cast the provider.get() to a type that's not accessible
                 "    return UsesSupertype_Factory.newUsesSupertype(subtypeProvider.get());",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
                 "}"));
   }
 
@@ -1109,26 +706,14 @@ public void castedToRawType() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(
+        .containsElementsIn(
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
                 "",
                 "package test;",
                 "",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  @Override",
                 "  public Provider<CharSequence> charSequence() {",
                 "    return (Provider) TestModule_ProvideStringFactory.create();",
@@ -1144,14 +729,6 @@ public void castedToRawType() {
                 "  public Provider<String> namedString() {",
                 "    return TestModule_ProvideStringFactory.create();",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
                 "}"));
   }
 
@@ -1202,41 +779,21 @@ public void inlineFactoryOfInacessibleType() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerRequestsSubtypeAsProvider")
-        .hasSourceEquivalentTo(
+        .containsElementsIn(
             JavaFileObjects.forSourceLines(
                 "test.DaggerRequestsSubtypeAsProvider",
                 "package test;",
                 "",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
                 "import other.Subtype_Factory;",
                 "import other.Supertype;",
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerRequestsSubtypeAsProvider ",
                 "    implements RequestsSubtypeAsProvider {",
-                "  private DaggerRequestsSubtypeAsProvider(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static RequestsSubtypeAsProvider create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  @Override",
                 "  public Provider<Supertype> supertypeProvider() {",
                 "    return (Provider) Subtype_Factory.create();",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public RequestsSubtypeAsProvider build() {",
-                "      return new DaggerRequestsSubtypeAsProvider(this);",
-                "    }",
-                "  }",
                 "}"));
   }
 
diff --git a/javatests/dagger/internal/codegen/InaccessibleTypeTest.java b/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
index 1f31a1493..79d69951f 100644
--- a/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
+++ b/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
@@ -16,11 +16,12 @@
 
 package dagger.internal.codegen;
 
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
-import com.google.common.collect.ImmutableList;
+import com.google.common.collect.FluentIterable;
+import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
 import java.util.Collection;
 import javax.tools.JavaFileObject;
@@ -97,20 +98,9 @@ public InaccessibleTypeTest(CompilerMode compilerMode) {
             "import foreign.NonPublicClass2_Factory;",
             "import foreign.PublicClass;",
             "import foreign.PublicClass_Factory;",
-            "import javax.annotation.Generated;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private DaggerTestComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  private Object getNonPublicClass1() {",
             "    return NonPublicClass1_Factory.newNonPublicClass1(",
             "        NoDepClass_Factory.newNoDepClass());",
@@ -128,35 +118,26 @@ public InaccessibleTypeTest(CompilerMode compilerMode) {
             "        getNonPublicClass2(), ",
             "        NoDepClass_Factory.newNoDepClass());",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "  }",
             "}");
-    assertAbout(javaSources())
-        .that(
-            ImmutableList.of(
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions(
+                FluentIterable.from(compilerMode.javacopts())
+                    .append(
+                        "-Xlint:-processing",
+                        "-Xlint:rawtypes",
+                        "-Xlint:unchecked",
+                        "-Xlint:-classfile"))
+            .compile(
                 noDepClassFile,
                 publicClassFile,
                 nonPublicClass1File,
                 nonPublicClass2File,
-                componentFile))
-        .withCompilerOptions(
-            compilerMode
-                .javacopts()
-                .append(
-                    "-Xlint:-processing",
-                    "-Xlint:rawtypes",
-                    "-Xlint:unchecked",
-                    "-Xlint:-classfile"))
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(generatedComponent);
+                componentFile);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerTestComponent")
+        .containsElementsIn(generatedComponent);
   }
 
   @Test public void memberInjectedType() {
@@ -220,23 +201,11 @@ public InaccessibleTypeTest(CompilerMode compilerMode) {
             "test.DaggerTestComponent",
             "package test;",
             "",
-            "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
             "import foreign.B_MembersInjector;",
             "import foreign.C_MembersInjector;",
-            "import javax.annotation.Generated;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private DaggerTestComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public void injectA(A a) {",
             "    injectA2(a);",
@@ -250,31 +219,22 @@ public InaccessibleTypeTest(CompilerMode compilerMode) {
             "    A_MembersInjector.injectDep(instance, new NoDepClass());",
             "    return instance;",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {",
-            "    }",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "  }",
             "}");
-    assertAbout(javaSources())
-        .that(
-            ImmutableList.of(
-                noDepClassFile, aClassFile, bClassFile, cClassFile, dClassFile, componentFile))
-        .withCompilerOptions(
-            compilerMode
-                .javacopts()
-                .append(
-                    "-Xlint:-processing",
-                    "-Xlint:rawtypes",
-                    "-Xlint:unchecked",
-                    "-Xlint:-classfile"))
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(generatedComponent);
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions(
+                FluentIterable.from(compilerMode.javacopts())
+                    .append(
+                        "-Xlint:-processing",
+                        "-Xlint:rawtypes",
+                        "-Xlint:unchecked",
+                        "-Xlint:-classfile"))
+            .compile(
+                noDepClassFile,
+                aClassFile, bClassFile, cClassFile, dClassFile, componentFile);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerTestComponent")
+        .containsElementsIn(generatedComponent);
   }
 }
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 3d55e357e..e973c0c44 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -22,7 +22,6 @@
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
-import com.google.auto.value.processor.AutoAnnotationProcessor;
 import com.google.common.collect.ImmutableList;
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
@@ -132,30 +131,11 @@ public void mapBindingsWithEnumKey() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import com.google.common.collect.ImmutableMap;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private MapModuleOne mapModuleOne;",
-                "",
                 "  private MapModuleTwo mapModuleTwo;",
                 "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  private Provider<Handler> getMapOfPathEnumAndProviderOfHandlerProvider() {",
                 "    return new Provider<Handler>() {",
                 "      @Override",
@@ -183,12 +163,6 @@ public void mapBindingsWithEnumKey() {
                 "        PathEnum.LOGIN, getMapOfPathEnumAndProviderOfHandlerProvider2());",
                 "  }",
                 "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.mapModuleOne = builder.mapModuleOne;",
-                "    this.mapModuleTwo = builder.mapModuleTwo;",
-                "  }",
-                "",
                 "  @Override",
                 "  public Provider<Map<PathEnum, Provider<Handler>>> dispatcher() {",
                 "    return new Provider<Map<PathEnum, Provider<Handler>>>() {",
@@ -198,34 +172,6 @@ public void mapBindingsWithEnumKey() {
                 "      }",
                 "    };",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private MapModuleOne mapModuleOne;",
-                "",
-                "    private MapModuleTwo mapModuleTwo;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      if (mapModuleOne == null) {",
-                "        this.mapModuleOne = new MapModuleOne();",
-                "      }",
-                "      if (mapModuleTwo == null) {",
-                "        this.mapModuleTwo = new MapModuleTwo();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-                "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
-                "      return this;",
-                "    }",
-                "",
-                "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-                "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
-                "      return this;",
-                "    }",
-                "  }",
                 "}");
         break;
       default:
@@ -234,12 +180,6 @@ public void mapBindingsWithEnumKey() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import dagger.internal.MapProviderFactory;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<Handler> provideAdminHandlerProvider;",
@@ -247,18 +187,6 @@ public void mapBindingsWithEnumKey() {
                 "  private Provider<Map<PathEnum, Provider<Handler>>>",
                 "      mapOfPathEnumAndProviderOfHandlerProvider;",
                 "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.provideAdminHandlerProvider =",
@@ -276,39 +204,12 @@ public void mapBindingsWithEnumKey() {
                 "  public Provider<Map<PathEnum, Provider<Handler>>> dispatcher() {",
                 "    return mapOfPathEnumAndProviderOfHandlerProvider;",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private MapModuleOne mapModuleOne;",
-                "    private MapModuleTwo mapModuleTwo;",
-                "",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public TestComponent build() {",
-                "      if (mapModuleOne == null) {",
-                "        this.mapModuleOne = new MapModuleOne();",
-                "      }",
-                "      if (mapModuleTwo == null) {",
-                "        this.mapModuleTwo = new MapModuleTwo();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-                "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
-                "      return this;",
-                "    }",
-                "",
-                "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-                "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
-                "      return this;",
-                "    }",
-                "  }",
                 "}");
     }
-    assertAbout(javaSources())
-        .that(
-            ImmutableList.of(
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions(compilerMode.javacopts())
+            .compile(
                 mapModuleOneFile,
                 mapModuleTwoFile,
                 enumKeyFile,
@@ -316,12 +217,11 @@ public void mapBindingsWithEnumKey() {
                 HandlerFile,
                 LoginHandlerFile,
                 AdminHandlerFile,
-                componentFile))
-        .withCompilerOptions(compilerMode.javacopts())
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(generatedComponent);
+                componentFile);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerTestComponent")
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -425,24 +325,11 @@ public void mapBindingsWithInaccessibleKeys() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(
+        .containsElementsIn(
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import com.google.common.collect.ImmutableMap;",
-                "import dagger.internal.MapFactory;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "import mapkeys.MapKeys;",
-                "import mapkeys.MapModule;",
-                "import mapkeys.MapModule_ClassKeyFactory;",
-                "import mapkeys.MapModule_ComplexKeyWithInaccessibleAnnotationValueFactory;",
-                "import mapkeys.MapModule_ComplexKeyWithInaccessibleArrayValueFactory;",
-                "import mapkeys.MapModule_ComplexKeyWithInaccessibleValueFactory;",
-                "import mapkeys.MapModule_EnumKeyFactory;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<Map<Class<?>, Integer>> mapOfClassOfAndIntegerProvider;",
@@ -453,18 +340,6 @@ public void mapBindingsWithInaccessibleKeys() {
                 "  private Provider<Map<MapKeys.ComplexKey, Integer>>",
                 "      mapOfComplexKeyAndIntegerProvider;",
                 "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  private Map getMapOfPackagePrivateEnumAndInteger() {",
                 "    return ImmutableMap.of(",
                 "        MapModule_EnumKeyFactory.mapKey(), MapModule.enumKey());",
@@ -532,43 +407,25 @@ public void mapBindingsWithInaccessibleKeys() {
                 "  public Provider<Map<MapKeys.ComplexKey, Integer>> complexKeyProvider() {",
                 "    return mapOfComplexKeyAndIntegerProvider;",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
                 "}"));
     assertThat(compilation)
         .generatedSourceFile(
             "mapkeys.MapModule_ComplexKeyWithInaccessibleAnnotationValueFactory")
-        .hasSourceEquivalentTo(
+        .containsElementsIn(
             JavaFileObjects.forSourceLines(
                 "mapkeys.MapModule_ComplexKeyWithInaccessibleAnnotationValueFactory",
                 "package mapkeys;",
                 "",
-                "import dagger.internal.Factory;",
-                "import javax.annotation.Generated;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class",
                 "    MapModule_ComplexKeyWithInaccessibleAnnotationValueFactory",
                 "        implements Factory<Integer> {",
-                "  private static final",
-                "    MapModule_ComplexKeyWithInaccessibleAnnotationValueFactory INSTANCE =",
-                "      new MapModule_ComplexKeyWithInaccessibleAnnotationValueFactory();",
                 "",
                 "  @Override",
                 "  public Integer get() {",
                 "    return MapModule.complexKeyWithInaccessibleAnnotationValue();",
                 "  }",
                 "",
-                "  public static Factory<Integer> create() {",
-                "    return INSTANCE;",
-                "  }",
-                "",
                 "  public static MapKeys.ComplexKey mapKey() {",
                 "    return MapKeys_ComplexKeyCreator.createComplexKey(",
                 "        new Class[] {String.class},",
@@ -578,28 +435,18 @@ public void mapBindingsWithInaccessibleKeys() {
                 "}"));
     assertThat(compilation)
         .generatedSourceFile("mapkeys.MapModule_ClassKeyFactory")
-        .hasSourceEquivalentTo(
+        .containsElementsIn(
             JavaFileObjects.forSourceLines(
                 "mapkeys.MapModule_ClassKeyFactory",
                 "package mapkeys;",
                 "",
-                "import dagger.internal.Factory;",
-                "import javax.annotation.Generated;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class MapModule_ClassKeyFactory implements Factory<Integer> {",
-                "  private static final MapModule_ClassKeyFactory INSTANCE = ",
-                "      new MapModule_ClassKeyFactory();",
-                "",
                 "  @Override",
                 "  public Integer get() {",
                 "    return MapModule.classKey();",
                 "  }",
                 "",
-                "  public static Factory<Integer> create() {",
-                "    return INSTANCE;",
-                "  }",
-                "",
                 "  public static Class<?> mapKey() {",
                 "    return MapKeys.Inaccessible.class;",
                 "  }",
@@ -675,30 +522,11 @@ public void mapBindingsWithStringKey() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import com.google.common.collect.ImmutableMap;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private MapModuleOne mapModuleOne;",
-                "",
                 "  private MapModuleTwo mapModuleTwo;",
                 "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  private Provider<Handler> getMapOfStringAndProviderOfHandlerProvider() {",
                 "    return new Provider<Handler>() {",
                 "      @Override",
@@ -726,12 +554,6 @@ public void mapBindingsWithStringKey() {
                 "        \"Login\", getMapOfStringAndProviderOfHandlerProvider2());",
                 "  }",
                 "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.mapModuleOne = builder.mapModuleOne;",
-                "    this.mapModuleTwo = builder.mapModuleTwo;",
-                "  }",
-                "",
                 "  @Override",
                 "  public Provider<Map<String, Provider<Handler>>> dispatcher() {",
                 "    return new Provider<Map<String, Provider<Handler>>>() {",
@@ -741,34 +563,6 @@ public void mapBindingsWithStringKey() {
                 "      }",
                 "    };",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private MapModuleOne mapModuleOne;",
-                "",
-                "    private MapModuleTwo mapModuleTwo;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      if (mapModuleOne == null) {",
-                "        this.mapModuleOne = new MapModuleOne();",
-                "      }",
-                "      if (mapModuleTwo == null) {",
-                "        this.mapModuleTwo = new MapModuleTwo();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-                "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
-                "      return this;",
-                "    }",
-                "",
-                "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-                "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
-                "      return this;",
-                "    }",
-                "  }",
                 "}");
         break;
       default:
@@ -777,12 +571,6 @@ public void mapBindingsWithStringKey() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import dagger.internal.MapProviderFactory;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<Handler> provideAdminHandlerProvider;",
@@ -790,18 +578,6 @@ public void mapBindingsWithStringKey() {
                 "  private Provider<Map<String, Provider<Handler>>>",
                 "      mapOfStringAndProviderOfHandlerProvider;",
                 "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.provideAdminHandlerProvider =",
@@ -819,50 +595,22 @@ public void mapBindingsWithStringKey() {
                 "  public Provider<Map<String, Provider<Handler>>> dispatcher() {",
                 "    return mapOfStringAndProviderOfHandlerProvider;",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private MapModuleOne mapModuleOne;",
-                "    private MapModuleTwo mapModuleTwo;",
-                "",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public TestComponent build() {",
-                "      if (mapModuleOne == null) {",
-                "        this.mapModuleOne = new MapModuleOne();",
-                "      }",
-                "      if (mapModuleTwo == null) {",
-                "        this.mapModuleTwo = new MapModuleTwo();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-                "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
-                "      return this;",
-                "    }",
-                "",
-                "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-                "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
-                "      return this;",
-                "    }",
-                "  }",
                 "}");
     }
-    assertAbout(javaSources())
-        .that(
-            ImmutableList.of(
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions(compilerMode.javacopts())
+            .compile(
                 mapModuleOneFile,
                 mapModuleTwoFile,
                 HandlerFile,
                 LoginHandlerFile,
                 AdminHandlerFile,
-                componentFile))
-        .withCompilerOptions(compilerMode.javacopts())
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(generatedComponent);
+                componentFile);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerTestComponent")
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -945,30 +693,11 @@ public void mapBindingsWithWrappedKey() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import com.google.common.collect.ImmutableMap;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private MapModuleOne mapModuleOne;",
-                "",
                 "  private MapModuleTwo mapModuleTwo;",
                 "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  private Provider<Handler>",
                 "        getMapOfWrappedClassKeyAndProviderOfHandlerProvider() {",
                 "    return new Provider<Handler>() {",
@@ -1015,34 +744,6 @@ public void mapBindingsWithWrappedKey() {
                 "      }",
                 "    };",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private MapModuleOne mapModuleOne;",
-                "",
-                "    private MapModuleTwo mapModuleTwo;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      if (mapModuleOne == null) {",
-                "        this.mapModuleOne = new MapModuleOne();",
-                "      }",
-                "      if (mapModuleTwo == null) {",
-                "        this.mapModuleTwo = new MapModuleTwo();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-                "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
-                "      return this;",
-                "    }",
-                "",
-                "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-                "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
-                "      return this;",
-                "    }",
-                "  }",
                 "}");
         break;
       default:
@@ -1051,12 +752,6 @@ public void mapBindingsWithWrappedKey() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import dagger.internal.MapProviderFactory;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<Handler> provideAdminHandlerProvider;",
@@ -1064,18 +759,6 @@ public void mapBindingsWithWrappedKey() {
                 "  private Provider<Map<WrappedClassKey, Provider<Handler>>>",
                 "      mapOfWrappedClassKeyAndProviderOfHandlerProvider;",
                 "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.provideAdminHandlerProvider =",
@@ -1095,51 +778,23 @@ public void mapBindingsWithWrappedKey() {
                 "  public Provider<Map<WrappedClassKey, Provider<Handler>>> dispatcher() {",
                 "    return mapOfWrappedClassKeyAndProviderOfHandlerProvider;",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private MapModuleOne mapModuleOne;",
-                "    private MapModuleTwo mapModuleTwo;",
-                "",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public TestComponent build() {",
-                "      if (mapModuleOne == null) {",
-                "        this.mapModuleOne = new MapModuleOne();",
-                "      }",
-                "      if (mapModuleTwo == null) {",
-                "        this.mapModuleTwo = new MapModuleTwo();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-                "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
-                "      return this;",
-                "    }",
-                "",
-                "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-                "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
-                "      return this;",
-                "    }",
-                "  }",
                 "}");
     }
-    assertAbout(javaSources())
-        .that(
-            ImmutableList.of(
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions(compilerMode.javacopts())
+            .compile(
                 mapModuleOneFile,
                 mapModuleTwoFile,
                 wrappedClassKeyFile,
                 HandlerFile,
                 LoginHandlerFile,
                 AdminHandlerFile,
-                componentFile))
-        .withCompilerOptions(compilerMode.javacopts())
-        .processedWith(new ComponentProcessor(), new AutoAnnotationProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(generatedComponent);
+                componentFile);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerTestComponent")
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -1223,30 +878,11 @@ public void mapBindingsWithNonProviderValue() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import com.google.common.collect.ImmutableMap;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private MapModuleOne mapModuleOne;",
-                "",
                 "  private MapModuleTwo mapModuleTwo;",
                 "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  private Map<PathEnum, Handler> getMapOfPathEnumAndHandler() {",
                 "    return ImmutableMap.<PathEnum, Handler>of(",
                 "        PathEnum.ADMIN,",
@@ -1257,12 +893,6 @@ public void mapBindingsWithNonProviderValue() {
                 "            mapModuleTwo));",
                 "  }",
                 "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.mapModuleOne = builder.mapModuleOne;",
-                "    this.mapModuleTwo = builder.mapModuleTwo;",
-                "  }",
-                "",
                 "  @Override",
                 "  public Provider<Map<PathEnum, Handler>> dispatcher() {",
                 "    return new Provider<Map<PathEnum, Handler>>() {",
@@ -1272,34 +902,6 @@ public void mapBindingsWithNonProviderValue() {
                 "      }",
                 "    };",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private MapModuleOne mapModuleOne;",
-                "",
-                "    private MapModuleTwo mapModuleTwo;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      if (mapModuleOne == null) {",
-                "        this.mapModuleOne = new MapModuleOne();",
-                "      }",
-                "      if (mapModuleTwo == null) {",
-                "        this.mapModuleTwo = new MapModuleTwo();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-                "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
-                "      return this;",
-                "    }",
-                "",
-                "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-                "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
-                "      return this;",
-                "    }",
-                "  }",
                 "}");
         break;
       default:
@@ -1308,30 +910,12 @@ public void mapBindingsWithNonProviderValue() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import dagger.internal.MapFactory;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<Handler> provideAdminHandlerProvider;",
                 "  private Provider<Handler> provideLoginHandlerProvider;",
                 "  private Provider<Map<PathEnum, Handler>> mapOfPathEnumAndHandlerProvider;",
                 "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.provideAdminHandlerProvider =",
@@ -1349,39 +933,12 @@ public void mapBindingsWithNonProviderValue() {
                 "  public Provider<Map<PathEnum, Handler>> dispatcher() {",
                 "    return mapOfPathEnumAndHandlerProvider;",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private MapModuleOne mapModuleOne;",
-                "    private MapModuleTwo mapModuleTwo;",
-                "",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public TestComponent build() {",
-                "      if (mapModuleOne == null) {",
-                "        this.mapModuleOne = new MapModuleOne();",
-                "      }",
-                "      if (mapModuleTwo == null) {",
-                "        this.mapModuleTwo = new MapModuleTwo();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-                "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
-                "      return this;",
-                "    }",
-                "",
-                "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-                "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
-                "      return this;",
-                "    }",
-                "  }",
                 "}");
     }
-    assertAbout(javaSources())
-        .that(
-            ImmutableList.of(
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions(compilerMode.javacopts())
+            .compile(
                 mapModuleOneFile,
                 mapModuleTwoFile,
                 enumKeyFile,
@@ -1389,12 +946,11 @@ public void mapBindingsWithNonProviderValue() {
                 HandlerFile,
                 LoginHandlerFile,
                 AdminHandlerFile,
-                componentFile))
-        .withCompilerOptions(compilerMode.javacopts())
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(generatedComponent);
+                componentFile);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerTestComponent")
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -1430,62 +986,23 @@ public void injectMapWithoutMapBinding() {
             "test.DaggerTestComponent",
             "package test;",
             "",
-            "import dagger.internal.Preconditions;",
-            "import java.util.Map;",
-            "import javax.annotation.Generated;",
-            "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
             "  private MapModule mapModule;",
             "",
-            "  private DaggerTestComponent(Builder builder) {",
-            "    initialize(builder);",
-            "  }",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
-            "  @SuppressWarnings(\"unchecked\")",
-            "  private void initialize(final Builder builder) {",
-            "    this.mapModule = builder.mapModule;",
-            "  }",
-            "",
             "  @Override",
             "  public Map<String, String> dispatcher() {",
             "    return MapModule_ProvideAMapFactory.proxyProvideAMap(mapModule);",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private MapModule mapModule;",
-            "",
-            "    private Builder() {",
-            "    }",
-            "",
-            "    public TestComponent build() {",
-            "      if (mapModule == null) {",
-            "        this.mapModule = new MapModule();",
-            "      }",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "",
-            "    public Builder mapModule(MapModule mapModule) {",
-            "      this.mapModule = Preconditions.checkNotNull(mapModule);",
-            "      return this;",
-            "    }",
-            "  }",
             "}");
-    assertAbout(javaSources())
-        .that(ImmutableList.of(mapModuleFile, componentFile))
-        .withCompilerOptions(compilerMode.javacopts())
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(generatedComponent);
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions(compilerMode.javacopts())
+            .compile(mapModuleFile, componentFile);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerTestComponent")
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
index e11b1e620..a8e609b74 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
@@ -92,23 +92,9 @@ public void mapBindings() {
             "package test;",
             "",
             "import dagger.internal.MapBuilder;",
-            "import java.util.Collections;",
-            "import java.util.Map;",
-            "import javax.annotation.Generated;",
-            "import javax.inject.Provider;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private DaggerTestComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public Map<String, String> strings() {",
             "    return Collections.<String, String>emptyMap();",
@@ -147,20 +133,12 @@ public void mapBindings() {
             "        .put(2L, MapModule_ProvideLong2Factory.create())",
             "        .build();",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "  }",
             "}");
     Compilation compilation = daggerCompilerWithoutGuava().compile(mapModuleFile, componentFile);
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -216,44 +194,20 @@ public void inaccessible() {
             "test.DaggerTestComponent",
             "package test;",
             "",
-            "import java.util.Collections;",
-            "import java.util.Map;",
-            "import javax.annotation.Generated;",
-            "import other.UsesInaccessible;",
-            "import other.UsesInaccessible_Factory;",
-            "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private DaggerTestComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public UsesInaccessible usesInaccessible() {",
             "    return UsesInaccessible_Factory.newUsesInaccessible(",
             "        (Map) Collections.emptyMap());",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "  }",
             "}");
     Compilation compilation =
         daggerCompilerWithoutGuava().compile(module, inaccessible, usesInaccessible, componentFile);
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -303,58 +257,11 @@ public void subcomponentOmitsInheritedBindings() {
             "test.DaggerParent",
             "package test;",
             "",
-            "import dagger.internal.Preconditions;",
-            "import java.util.Collections;",
-            "import java.util.Map;",
-            "import javax.annotation.Generated;",
-            "",
             GENERATED_ANNOTATION,
             "public final class DaggerParent implements Parent {",
             "  private ParentModule parentModule;",
             "",
-            "  private DaggerParent(Builder builder) {",
-            "    initialize(builder);",
-            "  }",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static Parent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
-            "  @SuppressWarnings(\"unchecked\")",
-            "  private void initialize(final Builder builder) {",
-            "    this.parentModule = builder.parentModule;",
-            "  }",
-            "",
-            "  @Override",
-            "  public Child child() {",
-            "    return new ChildImpl();",
-            "  }",
-            "",
-            "  public static final class Builder {",
-            "    private ParentModule parentModule;",
-            "",
-            "    private Builder() {}",
-            "",
-            "    public Parent build() {",
-            "      if (parentModule == null) {",
-            "        this.parentModule = new ParentModule();",
-            "      }",
-            "      return new DaggerParent(this);",
-            "    }",
-            "",
-            "    public Builder parentModule(ParentModule parentModule) {",
-            "      this.parentModule = Preconditions.checkNotNull(parentModule);",
-            "      return this;",
-            "    }",
-            "  }",
-            "",
             "  private final class ChildImpl implements Child {",
-            "    private ChildImpl() {}",
-            "",
             "    @Override",
             "    public Map<String, Object> objectMap() {",
             "      return Collections.<String, Object>singletonMap(",
@@ -369,7 +276,7 @@ public void subcomponentOmitsInheritedBindings() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerParent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   private Compiler daggerCompilerWithoutGuava() {
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
index b586ca580..e3a2ca38d 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
@@ -124,23 +124,8 @@ public void mapBindings() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import com.google.common.collect.ImmutableMap;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
                 "  @Override",
                 "  public Map<String, String> strings() {",
                 "    return ImmutableMap.<String, String>of();",
@@ -183,14 +168,6 @@ public void mapBindings() {
                 "    return new SubImpl();",
                 "  }",
                 "",
-                "  public static final class Builder {",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
                 "  private final class SubImpl implements Sub {",
                 "    private SubImpl() {}",
                 "",
@@ -226,7 +203,7 @@ public void mapBindings() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -279,36 +256,12 @@ public void inaccessible() {
             "test.DaggerTestComponent",
             "package test;",
             "",
-            "import com.google.common.collect.ImmutableMap;",
-            "import java.util.Map;",
-            "import javax.annotation.Generated;",
-            "import other.UsesInaccessible;",
-            "import other.UsesInaccessible_Factory;",
-            "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private DaggerTestComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public UsesInaccessible usesInaccessible() {",
             "    return UsesInaccessible_Factory.newUsesInaccessible((Map) ImmutableMap.of());",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "  }",
             "}");
     Compilation compilation =
         daggerCompiler()
@@ -317,7 +270,7 @@ public void inaccessible() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -366,58 +319,11 @@ public void subcomponentOmitsInheritedBindings() {
             "test.DaggerParent",
             "package test;",
             "",
-            "import com.google.common.collect.ImmutableMap;",
-            "import dagger.internal.Preconditions;",
-            "import java.util.Map;",
-            "import javax.annotation.Generated;",
-            "",
             GENERATED_ANNOTATION,
             "public final class DaggerParent implements Parent {",
             "  private ParentModule parentModule;",
             "",
-            "  private DaggerParent(Builder builder) {",
-            "    initialize(builder);",
-            "  }",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static Parent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
-            "  @SuppressWarnings(\"unchecked\")",
-            "  private void initialize(final Builder builder) {",
-            "    this.parentModule = builder.parentModule;",
-            "  }",
-            "",
-            "  @Override",
-            "  public Child child() {",
-            "    return new ChildImpl();",
-            "  }",
-            "",
-            "  public static final class Builder {",
-            "    private ParentModule parentModule;",
-            "",
-            "    private Builder() {}",
-            "",
-            "    public Parent build() {",
-            "      if (parentModule == null) {",
-            "        this.parentModule = new ParentModule();",
-            "      }",
-            "      return new DaggerParent(this);",
-            "    }",
-            "",
-            "    public Builder parentModule(ParentModule parentModule) {",
-            "      this.parentModule = Preconditions.checkNotNull(parentModule);",
-            "      return this;",
-            "    }",
-            "  }",
-            "",
             "  private final class ChildImpl implements Child {",
-            "    private ChildImpl() {}",
-            "",
             "    @Override",
             "    public Map<String, Object> objectMap() {",
             "      return ImmutableMap.<String, Object>of(",
@@ -433,7 +339,7 @@ public void subcomponentOmitsInheritedBindings() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerParent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -467,46 +373,13 @@ public void productionComponents() {
             "test.DaggerTestComponent",
             "package test;",
             "",
-            "import com.google.common.collect.ImmutableMap;",
-            "import com.google.common.util.concurrent.Futures;",
-            "import com.google.common.util.concurrent.ListenableFuture;",
-            "import dagger.internal.Preconditions;",
-            "import java.util.Map;",
-            "import javax.annotation.Generated;",
-            "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private DaggerTestComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public ListenableFuture<Map<String, String>> stringMap() {",
             "    return Futures.<Map<String, String>>immediateFuture(",
             "        ImmutableMap.<String, String>of());",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "",
-            "    @Deprecated",
-            "    public Builder testComponent_ProductionExecutorModule(",
-            "        TestComponent_ProductionExecutorModule",
-            "            testComponent_ProductionExecutorModule) {",
-            "      Preconditions.checkNotNull(testComponent_ProductionExecutorModule);",
-            "      return this;",
-            "    }",
-            "  }",
             "}");
     Compilation compilation =
         daggerCompiler()
@@ -515,6 +388,6 @@ public void productionComponents() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 }
diff --git a/javatests/dagger/internal/codegen/MapKeyProcessorTest.java b/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
index 001493b02..a529d4ac0 100644
--- a/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -17,12 +17,17 @@
 package dagger.internal.codegen;
 
 import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.JavaSourcesSubject.assertThat;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
+import static dagger.internal.codegen.CompilerMode.EXPERIMENTAL_ANDROID_MODE;
+import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 import com.google.auto.value.processor.AutoAnnotationProcessor;
 import com.google.common.collect.ImmutableList;
+import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
 import java.util.Collection;
 import javax.tools.JavaFileObject;
@@ -222,64 +227,15 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "interface TestComponent {",
         "  Map<PathKey, Provider<Handler>> dispatcher();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
+    JavaFileObject generatedComponent =
+        new JavaFileBuilder(compilerMode, "test.DaggerTestComponent")
+            .addLines(
                 "package test;",
                 "",
-                "import com.google.common.collect.ImmutableMap;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
                 GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private MapModuleOne mapModuleOne;",
-                "",
-                "  private MapModuleTwo mapModuleTwo;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Provider<Handler> getMapOfPathKeyAndProviderOfHandlerProvider() {",
-                "    return new Provider<Handler>() {",
-                "      @Override",
-                "      public Handler get() {",
-                "        return MapModuleOne_ProvideAdminHandlerFactory.proxyProvideAdminHandler(",
-                "            mapModuleOne);",
-                "      }",
-                "    };",
-                "  }",
-                "",
-                "  private Provider<Handler> getMapOfPathKeyAndProviderOfHandlerProvider2() {",
-                "    return new Provider<Handler>() {",
-                "      @Override",
-                "      public Handler get() {",
-                "        return MapModuleTwo_ProvideLoginHandlerFactory.proxyProvideLoginHandler(",
-                "            mapModuleTwo);",
-                "      }",
-                "    };",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.mapModuleOne = builder.mapModuleOne;",
-                "    this.mapModuleTwo = builder.mapModuleTwo;",
-                "  }",
-                "",
+                "public final class DaggerTestComponent implements TestComponent {")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
                 "  @Override",
                 "  public Map<PathKey, Provider<Handler>> dispatcher() {",
                 "    return ImmutableMap.<PathKey, Provider<Handler>>of(",
@@ -287,74 +243,9 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
                 "        getMapOfPathKeyAndProviderOfHandlerProvider(),",
                 "        PathKeyCreator.createPathKey(PathEnum.LOGIN, \"LoginPath\"),",
                 "        getMapOfPathKeyAndProviderOfHandlerProvider2());",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private MapModuleOne mapModuleOne;",
-                "",
-                "    private MapModuleTwo mapModuleTwo;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      if (mapModuleOne == null) {",
-                "        this.mapModuleOne = new MapModuleOne();",
-                "      }",
-                "      if (mapModuleTwo == null) {",
-                "        this.mapModuleTwo = new MapModuleTwo();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-                "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
-                "      return this;",
-                "    }",
-                "",
-                "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-                "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.common.collect.ImmutableMap;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private Provider<Handler> provideAdminHandlerProvider;",
-                "  private Provider<Handler> provideLoginHandlerProvider;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.provideAdminHandlerProvider =",
-                "        MapModuleOne_ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
-                "    this.provideLoginHandlerProvider =",
-                "        MapModuleTwo_ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                DEFAULT_MODE,
                 "  @Override",
                 "  public Map<PathKey, Provider<Handler>> dispatcher() {",
                 "    return ImmutableMap.<PathKey, Provider<Handler>>of(",
@@ -362,40 +253,13 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
                 "        provideAdminHandlerProvider,",
                 "        PathKeyCreator.createPathKey(PathEnum.LOGIN, \"LoginPath\"),",
                 "        provideLoginHandlerProvider);",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private MapModuleOne mapModuleOne;",
-                "    private MapModuleTwo mapModuleTwo;",
-                "",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public TestComponent build() {",
-                "      if (mapModuleOne == null) {",
-                "        this.mapModuleOne = new MapModuleOne();",
-                "      }",
-                "      if (mapModuleTwo == null) {",
-                "        this.mapModuleTwo = new MapModuleTwo();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-                "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
-                "      return this;",
-                "    }",
-                "",
-                "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-                "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-    }
-    assertAbout(javaSources())
-        .that(
-            ImmutableList.of(
+                "  }")
+            .addLines("}")
+            .build();
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions(compilerMode.javacopts())
+            .compile(
                 mapModuleOneFile,
                 mapModuleTwoFile,
                 enumKeyFile,
@@ -403,12 +267,11 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
                 handlerFile,
                 loginHandlerFile,
                 adminHandlerFile,
-                componentFile))
-        .withCompilerOptions(compilerMode.javacopts())
-        .processedWith(new ComponentProcessor(), new AutoAnnotationProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(generatedComponent);
+                componentFile);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerTestComponent")
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -490,64 +353,15 @@ public void mapKeyComponentFileWithDefaultField() {
         "interface TestComponent {",
         "  Map<PathKey, Provider<Handler>> dispatcher();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
+    JavaFileObject generatedComponent =
+        new JavaFileBuilder(compilerMode, "test.DaggerTestComponent")
+            .addLines(
                 "package test;",
                 "",
-                "import com.google.common.collect.ImmutableMap;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
                 GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private MapModuleOne mapModuleOne;",
-                "",
-                "  private MapModuleTwo mapModuleTwo;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Provider<Handler> getMapOfPathKeyAndProviderOfHandlerProvider() {",
-                "    return new Provider<Handler>() {",
-                "      @Override",
-                "      public Handler get() {",
-                "        return MapModuleOne_ProvideAdminHandlerFactory.proxyProvideAdminHandler(",
-                "            mapModuleOne);",
-                "      }",
-                "    };",
-                "  }",
-                "",
-                "  private Provider<Handler> getMapOfPathKeyAndProviderOfHandlerProvider2() {",
-                "    return new Provider<Handler>() {",
-                "      @Override",
-                "      public Handler get() {",
-                "        return MapModuleTwo_ProvideLoginHandlerFactory.proxyProvideLoginHandler(",
-                "            mapModuleTwo);",
-                "      }",
-                "    };",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.mapModuleOne = builder.mapModuleOne;",
-                "    this.mapModuleTwo = builder.mapModuleTwo;",
-                "  }",
-                "",
+                "public final class DaggerTestComponent implements TestComponent {")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
                 "  @Override",
                 "  public Map<PathKey, Provider<Handler>> dispatcher() {",
                 "    return ImmutableMap.<PathKey, Provider<Handler>>of(",
@@ -555,74 +369,9 @@ public void mapKeyComponentFileWithDefaultField() {
                 "        getMapOfPathKeyAndProviderOfHandlerProvider(),",
                 "        PathKeyCreator.createPathKey(PathEnum.LOGIN, \"LoginPath\"),",
                 "        getMapOfPathKeyAndProviderOfHandlerProvider2());",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private MapModuleOne mapModuleOne;",
-                "",
-                "    private MapModuleTwo mapModuleTwo;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      if (mapModuleOne == null) {",
-                "        this.mapModuleOne = new MapModuleOne();",
-                "      }",
-                "      if (mapModuleTwo == null) {",
-                "        this.mapModuleTwo = new MapModuleTwo();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-                "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
-                "      return this;",
-                "    }",
-                "",
-                "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-                "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.common.collect.ImmutableMap;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private Provider<Handler> provideAdminHandlerProvider;",
-                "  private Provider<Handler> provideLoginHandlerProvider;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.provideAdminHandlerProvider =",
-                "        MapModuleOne_ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
-                "    this.provideLoginHandlerProvider =",
-                "        MapModuleTwo_ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                DEFAULT_MODE,
                 "  @Override",
                 "  public Map<PathKey, Provider<Handler>> dispatcher() {",
                 "    return ImmutableMap.<PathKey, Provider<Handler>>of(",
@@ -630,40 +379,13 @@ public void mapKeyComponentFileWithDefaultField() {
                 "        provideAdminHandlerProvider,",
                 "        PathKeyCreator.createPathKey(PathEnum.LOGIN, \"LoginPath\"),",
                 "        provideLoginHandlerProvider);",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private MapModuleOne mapModuleOne;",
-                "    private MapModuleTwo mapModuleTwo;",
-                "",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public TestComponent build() {",
-                "      if (mapModuleOne == null) {",
-                "        this.mapModuleOne = new MapModuleOne();",
-                "      }",
-                "      if (mapModuleTwo == null) {",
-                "        this.mapModuleTwo = new MapModuleTwo();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-                "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
-                "      return this;",
-                "    }",
-                "",
-                "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-                "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-    }
-    assertAbout(javaSources())
-        .that(
-            ImmutableList.of(
+                "  }")
+            .addLines("}")
+            .build();
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions(compilerMode.javacopts())
+            .compile(
                 mapModuleOneFile,
                 mapModuleTwoFile,
                 enumKeyFile,
@@ -671,12 +393,11 @@ public void mapKeyComponentFileWithDefaultField() {
                 handlerFile,
                 loginHandlerFile,
                 adminHandlerFile,
-                componentFile))
-        .withCompilerOptions(compilerMode.javacopts())
-        .processedWith(new ComponentProcessor(), new AutoAnnotationProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(generatedComponent);
+                componentFile);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerTestComponent")
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
diff --git a/javatests/dagger/internal/codegen/MembersInjectionTest.java b/javatests/dagger/internal/codegen/MembersInjectionTest.java
index ac2c377b6..5f5c8b2dc 100644
--- a/javatests/dagger/internal/codegen/MembersInjectionTest.java
+++ b/javatests/dagger/internal/codegen/MembersInjectionTest.java
@@ -88,41 +88,22 @@ public void parentClass_noInjectedMembers() {
             "test.DaggerTestComponent",
             "package test;",
             "",
-            "import javax.annotation.Generated;",
-            "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private DaggerTestComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public Child child() {",
             "    return new Child();",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {",
-            "    }",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "  }",
             "}");
-    assertAbout(javaSources())
-        .that(ImmutableList.of(childFile, parentFile, componentFile))
-        .withCompilerOptions(compilerMode.javacopts())
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(generatedComponent);
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions(compilerMode.javacopts())
+            .compile(childFile, parentFile, componentFile);
+
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerTestComponent")
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -166,20 +147,9 @@ public void parentClass_injectedMembersInSupertype() {
             "package test;",
             "",
             "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-            "import javax.annotation.Generated;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private DaggerTestComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public Child child() {",
             "    return injectChild(Child_Factory.newChild());",
@@ -190,23 +160,16 @@ public void parentClass_injectedMembersInSupertype() {
             "    Parent_MembersInjector.injectDep(instance, new Dep());",
             "    return instance;",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "  }",
             "}");
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions(compilerMode.javacopts())
+            .compile(childFile, parentFile, depFile, componentFile);
 
-    assertAbout(javaSources())
-        .that(ImmutableList.of(childFile, parentFile, depFile, componentFile))
-        .withCompilerOptions(compilerMode.javacopts())
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(generatedComponent);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerTestComponent")
+        .containsElementsIn(generatedComponent);
   }
 
   @Test public void fieldAndMethodGenerics() {
@@ -1301,16 +1264,6 @@ public void accessibility() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private DaggerTestComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  private Object getInaccessible() {",
             "    return injectInaccessible(Inaccessible_Factory.newInaccessible());",
             "  }",
@@ -1330,18 +1283,10 @@ public void accessibility() {
             "    Inaccessible_MembersInjector.injectMethod(instance, Foo_Factory.newFoo());",
             "    return instance;",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "  }",
             "}");
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -1409,21 +1354,7 @@ public void accessibleRawType_ofInaccessibleType() {
             .addLines(
                 "package test;",
                 "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;")
-            .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
-                "import dagger.internal.MemoizedSentinel;")
-            .addLinesIn(
-                DEFAULT_MODE,
-                "import dagger.internal.DoubleCheck;")
-            .addLines(
-                "import dagger.internal.Preconditions;",
-                "import java.util.List;",
-                "import javax.annotation.Generated;")
-            .addLinesIn(
-                DEFAULT_MODE,
-                "import javax.inject.Provider;")
-            .addLines(
+                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
                 "import other.InaccessiblesModule;",
                 "import other.InaccessiblesModule_InaccessiblesFactory;",
                 "import other.UsesInaccessibles;",
@@ -1436,27 +1367,6 @@ public void accessibleRawType_ofInaccessibleType() {
                 EXPERIMENTAL_ANDROID_MODE,
                 "  private volatile Object listOfInaccessible = new MemoizedSentinel();",
                 "",
-                "  private DaggerTestComponent(Builder builder) {}")
-            .addLinesIn(
-                DEFAULT_MODE,
-                "  @SuppressWarnings(\"rawtypes\")",
-                "  private Provider inaccessiblesProvider;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }")
-            .addLines(
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "")
-            .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
                 "  private List getListOfInaccessible() {",
                 "    Object local = listOfInaccessible;",
                 "    if (local instanceof MemoizedSentinel) {",
@@ -1472,6 +1382,9 @@ public void accessibleRawType_ofInaccessibleType() {
                 "  }")
             .addLinesIn(
                 DEFAULT_MODE,
+                "  @SuppressWarnings(\"rawtypes\")",
+                "  private Provider inaccessiblesProvider;",
+                "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.inaccessiblesProvider =",
@@ -1498,25 +1411,11 @@ public void accessibleRawType_ofInaccessibleType() {
             .addLines(
                 "    return instance;",
                 "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder inaccessiblesModule(InaccessiblesModule inaccessiblesModule) {",
-                "      Preconditions.checkNotNull(inaccessiblesModule);",
-                "      return this;",
-                "    }",
-                "  }",
                 "}")
             .build();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -1584,7 +1483,6 @@ public void publicSupertypeHiddenSubtype() {
             "package test;",
             "",
             "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-            "import javax.annotation.Generated;",
             "import other.Foo_Factory;",
             "import other.InjectsSubtype;",
             "import other.InjectsSubtype_Factory;",
@@ -1594,16 +1492,6 @@ public void publicSupertypeHiddenSubtype() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private DaggerTestComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  private Object getSubtype() {",
             "    return injectSubtype(Subtype_Factory.newSubtype());",
             "  }",
@@ -1619,18 +1507,10 @@ public void publicSupertypeHiddenSubtype() {
             "        (Supertype) instance, Foo_Factory.newFoo());",
             "    return instance;",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "  }",
             "}");
 
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 }
diff --git a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
index 1c2ac8501..79a4e2e9d 100644
--- a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
@@ -109,26 +109,9 @@ public void inlinedOptionalBindings() {
             "package test;",
             "",
             "import com.google.common.base.Optional;",
-            "import dagger.Lazy;",
-            "import dagger.internal.ProviderOfLazy;",
-            "import javax.annotation.Generated;",
-            "import javax.inject.Provider;",
-            "import other.DefinitelyNot;",
-            "import other.Maybe;",
-            "import other.Maybe_MaybeModule_ProvideMaybeFactory;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private DaggerTestComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public Optional<Maybe> maybe() {",
             "    return Optional.of(Maybe_MaybeModule_ProvideMaybeFactory.proxyProvideMaybe());",
@@ -150,14 +133,6 @@ public void inlinedOptionalBindings() {
             "      providerOfLazyOfDefinitelyNot() {",
             "    return Optional.absent();",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "  }",
             "}");
     Compilation compilation =
         daggerCompiler()
@@ -166,7 +141,7 @@ public void inlinedOptionalBindings() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -230,26 +205,9 @@ public void requestForFuture() {
             "package test;",
             "",
             "import com.google.common.base.Optional;",
-            "import com.google.common.util.concurrent.Futures;",
-            "import com.google.common.util.concurrent.ListenableFuture;",
-            "import dagger.internal.Preconditions;",
-            "import javax.annotation.Generated;",
-            "import other.DefinitelyNot;",
-            "import other.Maybe;",
-            "import other.Maybe_MaybeModule_ProvideMaybeFactory;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private DaggerTestComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public ListenableFuture<Optional<Maybe>> maybe() {",
             "    return Futures.immediateFuture(",
@@ -260,22 +218,6 @@ public void requestForFuture() {
             "  public ListenableFuture<Optional<DefinitelyNot>> definitelyNot() {",
             "    return Futures.immediateFuture(Optional.<DefinitelyNot>absent());",
 
-            "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "",
-            "    @Deprecated",
-            "    public Builder testComponent_ProductionExecutorModule(",
-            "        TestComponent_ProductionExecutorModule",
-            "            testComponent_ProductionExecutorModule) {",
-            "      Preconditions.checkNotNull(testComponent_ProductionExecutorModule);",
-            "      return this;",
-            "    }",
             "  }",
             "}");
 
@@ -286,6 +228,6 @@ public void requestForFuture() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 }
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
index e818cdfb4..3e3f5f70c 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
@@ -97,24 +97,10 @@ public void setBindings() {
             "test.DaggerTestComponent",
             "package test;",
             "",
-            "import dagger.internal.Preconditions;",
             "import dagger.internal.SetBuilder;",
-            "import java.util.Collections;",
-            "import java.util.Set;",
-            "import javax.annotation.Generated;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private DaggerTestComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public Set<String> strings() {",
             "    return SetBuilder.<String>newSetBuilder(2)",
@@ -127,28 +113,13 @@ public void setBindings() {
             "  public Set<Object> objects() {",
             "    return Collections.<Object>emptySet();",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {",
-            "    }",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "",
-            "    @Deprecated",
-            "    public Builder setModule(SetModule setModule) {",
-            "      Preconditions.checkNotNull(setModule);",
-            "      return this;",
-            "    }",
-            "  }",
             "}");
     Compilation compilation =
         daggerCompilerWithoutGuava().compile(emptySetModuleFile, setModuleFile, componentFile);
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -219,25 +190,12 @@ public void inaccessible() {
             "package test;",
             "",
             "import dagger.internal.SetBuilder;",
-            "import java.util.Collections;",
-            "import java.util.Set;",
-            "import javax.annotation.Generated;",
             "import other.TestModule_EmptySetFactory;",
             "import other.UsesInaccessible;",
             "import other.UsesInaccessible_Factory;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private DaggerTestComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  private Set getSetOfInaccessible2() {",
             "    return SetBuilder.newSetBuilder(1)",
             "        .addAll(TestModule_EmptySetFactory.proxyEmptySet())",
@@ -250,14 +208,6 @@ public void inaccessible() {
             "        (Set) Collections.emptySet(),",
             "        (Set) getSetOfInaccessible2());",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "  }",
             "}");
     Compilation compilation =
         daggerCompilerWithoutGuava()
@@ -265,7 +215,7 @@ public void inaccessible() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
index 80f671336..052ff5f46 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
@@ -101,22 +101,9 @@ public void setBindings() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
-            "import dagger.internal.Preconditions;",
-            "import java.util.Set;",
-            "import javax.annotation.Generated;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private DaggerTestComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public Set<String> strings() {",
             "    return ImmutableSet.<String>builder()",
@@ -136,21 +123,6 @@ public void setBindings() {
             "        EmptySetModule_OnlyContributionIsElementsIntoSetFactory",
             "            .proxyOnlyContributionIsElementsIntoSet());",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {",
-            "    }",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "",
-            "    @Deprecated",
-            "    public Builder setModule(SetModule setModule) {",
-            "      Preconditions.checkNotNull(setModule);",
-            "      return this;",
-            "    }",
-            "  }",
             "}");
     Compilation compilation =
         daggerCompiler()
@@ -159,7 +131,7 @@ public void setBindings() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -230,24 +202,12 @@ public void inaccessible() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
-            "import java.util.Set;",
-            "import javax.annotation.Generated;",
             "import other.TestModule_EmptySetFactory;",
             "import other.UsesInaccessible;",
             "import other.UsesInaccessible_Factory;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private DaggerTestComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  private Set getSetOfInaccessible2() {",
             "    return ImmutableSet.copyOf(TestModule_EmptySetFactory.proxyEmptySet());",
             "  }",
@@ -258,14 +218,6 @@ public void inaccessible() {
             "        (Set) ImmutableSet.of(),",
             "        (Set) getSetOfInaccessible2());",
             "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "  }",
             "}");
     Compilation compilation =
         daggerCompiler()
@@ -274,7 +226,7 @@ public void inaccessible() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -324,44 +276,10 @@ public void subcomponentOmitsInheritedBindings() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
-            "import dagger.internal.Preconditions;",
-            "import java.util.Set;",
-            "import javax.annotation.Generated;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerParent implements Parent {",
-            "  private DaggerParent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static Parent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
-            "  @Override",
-            "  public Child child() {",
-            "    return new ChildImpl();",
-            "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public Parent build() {",
-            "      return new DaggerParent(this);",
-            "    }",
-            "",
-            "    @Deprecated",
-            "    public Builder parentModule(ParentModule parentModule) {",
-            "      Preconditions.checkNotNull(parentModule);",
-            "      return this;",
-            "    }",
-            "  }",
-            "",
             "  private final class ChildImpl implements Child {",
-            "    private ChildImpl() {}",
-            "",
             "    @Override",
             "    public Set<Object> objectSet() {",
             "      return ImmutableSet.<Object>of(",
@@ -374,7 +292,7 @@ public void subcomponentOmitsInheritedBindings() {
     assertThat(compilation).succeeded();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerParent")
-        .hasSourceEquivalentTo(generatedComponent);
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
diff --git a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
index 32d4c412c..da2c04cd8 100644
--- a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -17,13 +17,16 @@
 package dagger.internal.codegen;
 
 import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.JavaSourcesSubject.assertThat;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
 import static dagger.internal.codegen.CompilerMode.EXPERIMENTAL_ANDROID_MODE;
+import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 import com.google.common.collect.ImmutableList;
+import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
 import java.util.Collection;
 import javax.tools.JavaFileObject;
@@ -390,47 +393,9 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
             .javaFileBuilder("test.DaggerParentComponent")
             .addLines(
                 "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;")
-            .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
-                "import dagger.internal.MemoizedSentinel;")
-            .addLinesIn(
-                DEFAULT_MODE,
-                "import dagger.internal.DoubleCheck;")
-            .addLines(
-                "import javax.annotation.Generated;")
-            .addLinesIn(
-                DEFAULT_MODE,
-                "import javax.inject.Provider;")
-            .addLines(
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerParentComponent implements ParentComponent {")
-            .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
-                "  private volatile Object dep1 = new MemoizedSentinel();",
-                "  private volatile Object dep2 = new MemoizedSentinel();",
-                "",
-                "  private DaggerParentComponent(Builder builder) {}")
-            .addLinesIn(
-                DEFAULT_MODE,
-                "  private Provider<Dep1> dep1Provider;",
-                "  private Provider<Dep2> dep2Provider;",
-                "",
-                "  private DaggerParentComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }")
-            .addLines(
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static ParentComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "")
             .addLinesIn(
                 DEFAULT_MODE,
                 "  @SuppressWarnings(\"unchecked\")",
@@ -499,13 +464,6 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
                 "    return instance;",
                 "  }")
             .addLines(
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public ParentComponent build() {",
-                "      return new DaggerParentComponent(this);",
-                "    }",
-                "  }",
                 "",
                 "  private final class ChildComponentImpl implements ChildComponent {",
                 "    private final ChildModule childModule;",
@@ -553,21 +511,22 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
                 "  }",
                 "}")
             .build();
-    assertAbout(javaSources())
-        .that(
-            ImmutableList.of(
+
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions(compilerMode.javacopts())
+            .compile(
                 parentComponentFile,
                 childComponentFile,
                 childModuleFile,
                 aFile,
                 needsDep1File,
                 dep1File,
-                dep2File))
-        .withCompilerOptions(compilerMode.javacopts())
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(generatedComponent);
+                dep2File);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerParentComponent")
+        .containsElementsIn(generatedComponent);
   }
 
   @Test
@@ -630,22 +589,10 @@ public void multipleSubcomponentsWithSameSimpleNamesCanExistInSameComponent() {
             "test.DaggerParentComponent",
             "package test;",
             "",
-            "import javax.annotation.Generated;",
             "import test.subpackage.Sub;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerParentComponent implements ParentComponent {",
-            "  private DaggerParentComponent(Builder builder) {",
-            "  }",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static ParentComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public Foo.Sub newFooSubcomponent() {",
             "    return new F_SubImpl();",
@@ -657,48 +604,37 @@ public void multipleSubcomponentsWithSameSimpleNamesCanExistInSameComponent() {
             "  }",
             "",
             "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
             "    public ParentComponent build() {",
             "      return new DaggerParentComponent(this);",
             "    }",
             "  }",
             "",
             "  private final class F_SubImpl implements Foo.Sub {",
-            "",
-            "    private F_SubImpl() {}",
-            "",
             "    @Override",
             "    public Bar.Sub newBarSubcomponent() {",
             "      return new B_SubImpl();",
             "    }",
             "",
             "    private final class B_SubImpl implements Bar.Sub {",
-            "",
-            "      private B_SubImpl() {}",
-            "",
             "      @Override",
             "      public Sub newSubcomponentInSubpackage() {",
             "        return new ts_SubImpl();",
             "      }",
             "",
-            "      private final class ts_SubImpl implements Sub {",
-            "        private ts_SubImpl() {}",
-            "      }",
+            "      private final class ts_SubImpl implements Sub {}",
             "    }",
             "  }",
-            "  private final class NoConflictImpl implements NoConflict {",
-            "    private NoConflictImpl() {}",
-            "  }",
+            "",
+            "  private final class NoConflictImpl implements NoConflict {}",
             "}");
-
-    assertAbout(javaSources())
-        .that(ImmutableList.of(parent, foo, bar, baz, noConflict))
-        .withCompilerOptions(compilerMode.javacopts())
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(componentGeneratedFile);
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions(compilerMode.javacopts())
+            .compile(parent, foo, bar, baz, noConflict);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerParentComponent")
+        .containsElementsIn(componentGeneratedFile);
   }
 
   @Test
@@ -738,37 +674,20 @@ public void subcomponentSimpleNamesDisambiguated() {
             "test.DaggerParentComponent",
             "package test;",
             "",
-            "import javax.annotation.Generated;",
-            "",
             GENERATED_ANNOTATION,
             "public final class DaggerParentComponent implements ParentComponent {",
-            "  private DaggerParentComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static ParentComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public Sub newSubcomponent() {",
             "    return new t_SubImpl();",
             "  }",
             "",
             "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
             "    public ParentComponent build() {",
             "      return new DaggerParentComponent(this);",
             "    }",
             "  }",
             "",
             "  private final class t_SubImpl implements Sub {",
-            "",
-            "    private t_SubImpl() {}",
-            "",
             "    @Override",
             "    public test.deep.many.levels.that.match.test.Sub newDeepSubcomponent() {",
             "      return new tdmltmt_SubImpl();",
@@ -780,14 +699,12 @@ public void subcomponentSimpleNamesDisambiguated() {
             "    }",
             "  }",
             "}");
-
-    assertAbout(javaSources())
-        .that(ImmutableList.of(parent, sub, deepSub))
-        .withCompilerOptions(compilerMode.javacopts())
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(componentGeneratedFile);
+    Compilation compilation =
+        daggerCompiler().withOptions(compilerMode.javacopts()).compile(parent, sub, deepSub);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerParentComponent")
+        .containsElementsIn(componentGeneratedFile);
   }
 
   @Test
@@ -821,33 +738,14 @@ public void subcomponentSimpleNamesDisambiguatedInRoot() {
     JavaFileObject componentGeneratedFile =
         JavaFileObjects.forSourceLines(
             "DaggerParentComponent",
-            "import javax.annotation.Generated;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerParentComponent implements ParentComponent {",
-            "  private DaggerParentComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static ParentComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public Sub newSubcomponent() {",
             "    return new $_SubImpl();",
             "  }",
             "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public ParentComponent build() {",
-            "      return new DaggerParentComponent(this);",
-            "    }",
-            "  }",
-            "",
             "  private final class $_SubImpl implements Sub {",
             "    private $_SubImpl() {}",
             "",
@@ -864,13 +762,12 @@ public void subcomponentSimpleNamesDisambiguatedInRoot() {
             "}",
             "");
 
-    assertAbout(javaSources())
-        .that(ImmutableList.of(parent, sub, deepSub))
-        .withCompilerOptions(compilerMode.javacopts())
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(componentGeneratedFile);
+    Compilation compilation =
+        daggerCompiler().withOptions(compilerMode.javacopts()).compile(parent, sub, deepSub);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("DaggerParentComponent")
+        .containsElementsIn(componentGeneratedFile);
   }
 
   @Test
@@ -917,21 +814,10 @@ public void subcomponentImplNameUsesFullyQualifiedClassNameIfNecessary() {
             "test.DaggerParentComponent",
             "package test;",
             "",
-            "import javax.annotation.Generated;",
             "import top1.a.b.c.d.E;",
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerParentComponent implements ParentComponent {",
-            "  private DaggerParentComponent(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static ParentComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public E.F.Sub top1() {",
             "    return new F_SubImpl();",
@@ -942,14 +828,6 @@ public void subcomponentImplNameUsesFullyQualifiedClassNameIfNecessary() {
             "    return new F2_SubImpl();",
             "  }",
             "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public ParentComponent build() {",
-            "      return new DaggerParentComponent(this);",
-            "    }",
-            "  }",
-            "",
             "  private final class F_SubImpl implements E.F.Sub {",
             "    private F_SubImpl() {}",
             "  }",
@@ -958,13 +836,12 @@ public void subcomponentImplNameUsesFullyQualifiedClassNameIfNecessary() {
             "  }",
             "}");
 
-    assertAbout(javaSources())
-        .that(ImmutableList.of(parent, top1, top2))
-        .withCompilerOptions(compilerMode.javacopts())
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(componentGeneratedFile);
+    Compilation compilation =
+        daggerCompiler().withOptions(compilerMode.javacopts()).compile(parent, top1, top2);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerParentComponent")
+        .containsElementsIn(componentGeneratedFile);
   }
 
   @Test
@@ -996,45 +873,24 @@ public void parentComponentNameShouldNotBeDisambiguatedWhenItConflictsWithASubco
             "test.DaggerC",
             "package test;",
             "",
-            "import javax.annotation.Generated;",
-            "",
             GENERATED_ANNOTATION,
             "public final class DaggerC implements C {",
-            "  private DaggerC(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static C create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public Foo.C newFooC() {",
             "    return new F_CImpl();",
             "  }",
             "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public C build() {",
-            "      return new DaggerC(this);",
-            "    }",
-            "  }",
-            "",
-            "  private final class F_CImpl implements Foo.C {",
-            "    private F_CImpl() {}",
-            "  }",
+            "  private final class F_CImpl implements Foo.C {}",
             "}");
 
-    assertAbout(javaSources())
-        .that(ImmutableList.of(parent, subcomponentWithSameSimpleNameAsParent))
-        .withCompilerOptions(compilerMode.javacopts())
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(componentGeneratedFile);
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions(compilerMode.javacopts())
+            .compile(parent, subcomponentWithSameSimpleNameAsParent);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerC")
+        .containsElementsIn(componentGeneratedFile);
   }
 
   @Test
@@ -1081,17 +937,6 @@ public void subcomponentBuilderNamesShouldNotConflict() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerC implements C {",
-            "",
-            "  private DaggerC(Builder builder) {}",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static C create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
             "  @Override",
             "  public C.Foo.Sub.Builder fooBuilder() {",
             "    return new F_SubBuilder();",
@@ -1102,14 +947,6 @@ public void subcomponentBuilderNamesShouldNotConflict() {
             "    return new B_SubBuilder();",
             "  }",
             "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public C build() {",
-            "      return new DaggerC(this);",
-            "    }",
-            "  }",
-            "",
             // TODO(user): Reverse the order of subcomponent and builder so that subcomponent
             // comes first.
             "  private final class F_SubBuilder implements C.Foo.Sub.Builder {",
@@ -1134,14 +971,12 @@ public void subcomponentBuilderNamesShouldNotConflict() {
             "    private B_SubImpl(B_SubBuilder builder) {}",
             "  }",
             "}");
-
-    assertAbout(javaSources())
-        .that(ImmutableList.of(parent))
-        .withCompilerOptions(compilerMode.javacopts())
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(componentGeneratedFile);
+    Compilation compilation =
+        daggerCompiler().withOptions(compilerMode.javacopts()).compile(parent);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerC")
+        .containsElementsIn(componentGeneratedFile);
   }
 
   @Test
