diff --git a/java/dagger/android/androidx/AndroidManifest.xml b/java/dagger/android/androidx/AndroidManifest.xml
new file mode 100644
index 000000000..5708e3246
--- /dev/null
+++ b/java/dagger/android/androidx/AndroidManifest.xml
@@ -0,0 +1,19 @@
+<!--
+  ~ Copyright (C) 2017 The Dagger Authors.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~ http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+  package="dagger.android.androidx">
+  <uses-sdk android:minSdkVersion="14" />
+</manifest>
diff --git a/java/dagger/android/androidx/AndroidxInjection.java b/java/dagger/android/androidx/AndroidxInjection.java
new file mode 100644
index 000000000..e2b5a74ed
--- /dev/null
+++ b/java/dagger/android/androidx/AndroidxInjection.java
@@ -0,0 +1,98 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android.androidx;
+
+import static android.util.Log.DEBUG;
+import static dagger.internal.Preconditions.checkNotNull;
+
+import android.app.Activity;
+import android.util.Log;
+
+import androidx.fragment.app.Fragment;
+import dagger.android.AndroidInjector;
+import dagger.android.support.HasSupportFragmentInjector;
+import dagger.internal.Beta;
+
+/** Injects core Android types from support libraries. */
+@Beta
+public final class AndroidxInjection {
+  private static final String TAG = "dagger.android.androidx";
+
+  /**
+   * Injects {@code fragment} if an associated {@link AndroidInjector} implementation
+   * can be found, otherwise throws an {@link IllegalArgumentException}.
+   *
+   * <p>Uses the following algorithm to find the appropriate {@code AndroidInjector<Fragment>} to
+   * use to inject {@code fragment}:
+   *
+   * <ol>
+   *   <li>Walks the parent-fragment hierarchy to find the a fragment that implements {@link
+   *       HasAndroidxFragmentInjector}, and if none do
+   *   <li>Uses the {@code fragment}'s {@link Fragment#getActivity() activity} if it implements
+   *       {@link HasAndroidxFragmentInjector}, and if not
+   *   <li>Uses the {@link android.app.Application} if it implements {@link
+   *       HasSupportFragmentInjector}.
+   * </ol>
+   *
+   * If none of them implement {@link HasAndroidxFragmentInjector}, a {@link
+   * IllegalArgumentException} is thrown.
+   *
+   * @throws IllegalArgumentException if no parent fragment, activity, or application implements
+   *     {@link HasSupportFragmentInjector}.
+   */
+  public static void inject(Fragment fragment) {
+    checkNotNull(fragment, "fragment");
+    HasAndroidxFragmentInjector hasAndroidxFragmentInjector = findHasFragmentInjector(fragment);
+    if (Log.isLoggable(TAG, DEBUG)) {
+      Log.d(
+          TAG,
+          String.format(
+              "An injector for %s was found in %s",
+              fragment.getClass().getCanonicalName(),
+                  hasAndroidxFragmentInjector.getClass().getCanonicalName()));
+    }
+
+    AndroidInjector<Fragment> fragmentInjector =
+            hasAndroidxFragmentInjector.androidxFragmentInjector();
+    checkNotNull(
+        fragmentInjector,
+        "%s.supportFragmentInjector() returned null",
+            hasAndroidxFragmentInjector.getClass());
+
+    fragmentInjector.inject(fragment);
+  }
+
+  private static HasAndroidxFragmentInjector findHasFragmentInjector(Fragment fragment) {
+    Fragment parentFragment = fragment;
+    while ((parentFragment = parentFragment.getParentFragment()) != null) {
+      if (parentFragment instanceof HasSupportFragmentInjector) {
+        return (HasAndroidxFragmentInjector) parentFragment;
+      }
+    }
+    Activity activity = fragment.getActivity();
+    if (activity instanceof HasSupportFragmentInjector) {
+      return (HasAndroidxFragmentInjector) activity;
+    }
+    if (activity.getApplication() instanceof HasSupportFragmentInjector) {
+      return (HasAndroidxFragmentInjector) activity.getApplication();
+    }
+    throw new IllegalArgumentException(
+        String.format("No injector was found for %s", fragment.getClass().getCanonicalName()));
+  }
+
+  private AndroidxInjection() {}
+}
diff --git a/java/dagger/android/androidx/AndroidxInjectionModule.java b/java/dagger/android/androidx/AndroidxInjectionModule.java
new file mode 100644
index 000000000..b651388f4
--- /dev/null
+++ b/java/dagger/android/androidx/AndroidxInjectionModule.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android.androidx;
+
+import androidx.fragment.app.Fragment;
+import dagger.Module;
+import dagger.android.AndroidInjectionModule;
+import dagger.android.AndroidInjector;
+import dagger.internal.Beta;
+import dagger.multibindings.Multibinds;
+import java.util.Map;
+
+/**
+ * Configures bindings to ensure the usability of {@code dagger.android} and {@code
+ * dagger.android.androidx} framework classes. This module should be installed in the root-most
+ * component which will use these types.
+ */
+@Beta
+@Module(includes = AndroidInjectionModule.class)
+public abstract class AndroidxInjectionModule {
+  @Multibinds
+  abstract Map<Class<? extends Fragment>, AndroidInjector.Factory<? extends Fragment>>
+      supportFragmentInjectorFactories();
+
+  @Multibinds
+  abstract Map<String, AndroidInjector.Factory<? extends Fragment>>
+      supportFragmentInjectorFactoriesWithStringKeys();
+
+  private AndroidxInjectionModule() {}
+}
diff --git a/java/dagger/android/androidx/DaggerAppCompatActivity.java b/java/dagger/android/androidx/DaggerAppCompatActivity.java
new file mode 100644
index 000000000..aa008d235
--- /dev/null
+++ b/java/dagger/android/androidx/DaggerAppCompatActivity.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android.androidx;
+
+import android.os.Bundle;
+
+import androidx.annotation.Nullable;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.fragment.app.Fragment;
+import dagger.android.AndroidInjection;
+import dagger.android.AndroidInjector;
+import dagger.android.DispatchingAndroidInjector;
+import dagger.android.HasFragmentInjector;
+import dagger.android.support.HasSupportFragmentInjector;
+import dagger.internal.Beta;
+import javax.inject.Inject;
+
+/**
+ * An {@link AppCompatActivity} that injects its members in {@link #onCreate(Bundle)} and can be
+ * used to inject {@code Fragment}s attached to it.
+ */
+@Beta
+public abstract class DaggerAppCompatActivity extends AppCompatActivity
+    implements HasAndroidxFragmentInjector {
+
+  @Inject DispatchingAndroidInjector<Fragment> androidxtFragmentInjector;
+
+  @Override
+  protected void onCreate(@Nullable Bundle savedInstanceState) {
+    AndroidInjection.inject(this);
+    super.onCreate(savedInstanceState);
+  }
+
+  @Override
+  public AndroidInjector<Fragment> androidxFragmentInjector() {
+    return androidxtFragmentInjector;
+  }
+
+
+}
diff --git a/java/dagger/android/androidx/DaggerAppCompatDialogFragment.java b/java/dagger/android/androidx/DaggerAppCompatDialogFragment.java
new file mode 100644
index 000000000..a772b0a41
--- /dev/null
+++ b/java/dagger/android/androidx/DaggerAppCompatDialogFragment.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android.androidx;
+
+import android.content.Context;
+
+import androidx.appcompat.app.AppCompatDialogFragment;
+import androidx.fragment.app.Fragment;
+import dagger.android.AndroidInjector;
+import dagger.android.DispatchingAndroidInjector;
+import dagger.internal.Beta;
+import javax.inject.Inject;
+
+/**
+ * An {@link AppCompatDialogFragment} that injects its members in {@link #onAttach(Context)} and can
+ * be used to inject child {@link Fragment}s attached to it. Note that when this fragment gets
+ * reattached, its members will be injected again.
+ */
+@Beta
+public abstract class DaggerAppCompatDialogFragment extends AppCompatDialogFragment
+    implements HasAndroidxFragmentInjector {
+
+  @Inject DispatchingAndroidInjector<Fragment> childFragmentInjector;
+
+  @Override
+  public void onAttach(Context context) {
+    AndroidxInjection.inject(this);
+    super.onAttach(context);
+  }
+
+  @Override
+  public AndroidInjector<Fragment> androidxFragmentInjector() {
+    return childFragmentInjector;
+  }
+}
diff --git a/java/dagger/android/androidx/DaggerApplication.java b/java/dagger/android/androidx/DaggerApplication.java
new file mode 100644
index 000000000..9dc66af66
--- /dev/null
+++ b/java/dagger/android/androidx/DaggerApplication.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android.androidx;
+
+import androidx.fragment.app.Fragment;
+import dagger.android.AndroidInjector;
+import dagger.android.DispatchingAndroidInjector;
+import dagger.android.support.HasSupportFragmentInjector;
+
+import javax.inject.Inject;
+
+/**
+ * An {@link android.app.Application} that injects its members and can be used to inject {@link
+ * android.app.Activity}s, {@linkplain androidx.fragment.app.Fragment framework fragments}, {@linkplain
+ * Fragment support fragments}, {@link android.app.Service}s, {@link
+ * android.content.BroadcastReceiver}s, and {@link android.content.ContentProvider}s attached to it.
+ */
+public abstract class DaggerApplication extends dagger.android.DaggerApplication
+    implements HasAndroidxFragmentInjector {
+
+  @Inject DispatchingAndroidInjector<Fragment> supportFragmentInjector;
+
+  @Override
+  protected abstract AndroidInjector<? extends DaggerApplication> applicationInjector();
+
+  @Override
+  public DispatchingAndroidInjector<Fragment> androidxFragmentInjector() {
+    return supportFragmentInjector;
+  }
+
+}
diff --git a/java/dagger/android/androidx/DaggerDialogFragment.java b/java/dagger/android/androidx/DaggerDialogFragment.java
new file mode 100644
index 000000000..1fb03d067
--- /dev/null
+++ b/java/dagger/android/androidx/DaggerDialogFragment.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android.androidx;
+
+import android.content.Context;
+
+import androidx.fragment.app.DialogFragment;
+import androidx.fragment.app.Fragment;
+import dagger.android.AndroidInjector;
+import dagger.android.DispatchingAndroidInjector;
+import dagger.android.support.AndroidSupportInjection;
+import dagger.android.support.HasSupportFragmentInjector;
+import dagger.internal.Beta;
+import javax.inject.Inject;
+
+/**
+ * A {@link DialogFragment} that injects its members in {@link #onAttach(Context)} and can be used
+ * to inject child {@link Fragment}s attached to it. Note that when this fragment gets reattached,
+ * its members will be injected again.
+ */
+@Beta
+public abstract class DaggerDialogFragment extends DialogFragment
+    implements HasAndroidxFragmentInjector {
+
+  @Inject DispatchingAndroidInjector<Fragment> childFragmentInjector;
+
+  @Override
+  public void onAttach(Context context) {
+    AndroidxInjection.inject(this);
+    super.onAttach(context);
+  }
+
+  @Override
+  public AndroidInjector<Fragment> androidxFragmentInjector() {
+    return childFragmentInjector;
+  }
+}
diff --git a/java/dagger/android/androidx/DaggerFragment.java b/java/dagger/android/androidx/DaggerFragment.java
new file mode 100644
index 000000000..b3b4884c4
--- /dev/null
+++ b/java/dagger/android/androidx/DaggerFragment.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android.androidx;
+
+import android.content.Context;
+
+import androidx.fragment.app.Fragment;
+import dagger.android.AndroidInjector;
+import dagger.android.DispatchingAndroidInjector;
+import dagger.internal.Beta;
+import javax.inject.Inject;
+
+/**
+ * A {@link Fragment} that injects its members in {@link #onAttach(Context)} and can be used to
+ * inject child {@link Fragment}s attached to it. Note that when this fragment gets reattached, its
+ * members will be injected again.
+ */
+@Beta
+public abstract class DaggerFragment extends Fragment implements HasAndroidxFragmentInjector {
+
+  @Inject DispatchingAndroidInjector<Fragment> childFragmentInjector;
+
+  @Override
+  public void onAttach(Context context) {
+    AndroidxInjection.inject(this);
+    super.onAttach(context);
+  }
+
+  @Override
+  public AndroidInjector<Fragment> androidxFragmentInjector() {
+    return childFragmentInjector;
+  }
+
+
+}
diff --git a/java/dagger/android/androidx/FragmentKey.java b/java/dagger/android/androidx/FragmentKey.java
new file mode 100644
index 000000000..f181ffbca
--- /dev/null
+++ b/java/dagger/android/androidx/FragmentKey.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android.androidx;
+
+import static java.lang.annotation.ElementType.METHOD;
+
+import androidx.fragment.app.Fragment;
+import dagger.MapKey;
+import dagger.internal.Beta;
+import java.lang.annotation.Documented;
+import java.lang.annotation.Target;
+
+/** {@link MapKey} annotation to key bindings by a type of a {@link Fragment}. */
+@Beta
+@MapKey
+@Documented
+@Target(METHOD)
+public @interface FragmentKey {
+  Class<? extends Fragment> value();
+}
diff --git a/java/dagger/android/androidx/HasAndroidxFragmentInjector.java b/java/dagger/android/androidx/HasAndroidxFragmentInjector.java
new file mode 100644
index 000000000..2d3cfa6f2
--- /dev/null
+++ b/java/dagger/android/androidx/HasAndroidxFragmentInjector.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android.androidx;
+
+import androidx.fragment.app.Fragment;
+import dagger.android.AndroidInjector;
+import dagger.internal.Beta;
+
+/** Provides an {@link AndroidInjector} of {@link Fragment}s. */
+@Beta
+public interface HasAndroidxFragmentInjector {
+
+  /** Returns an {@link AndroidInjector} of {@link Fragment}s. */
+  AndroidInjector<Fragment> androidxFragmentInjector();
+}
diff --git a/java/dagger/android/androidx/package-info.java b/java/dagger/android/androidx/package-info.java
new file mode 100644
index 000000000..fbaeebe74
--- /dev/null
+++ b/java/dagger/android/androidx/package-info.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+@CheckReturnValue
+package dagger.android.androidx;
+
+/**
+ * Additions to the APIs in {@link dagger.android} for use with the <a
+ * href="https://developer.android.com/topic/libraries/support-library">Android support
+ * libraries</a>.
+ */
+
+import com.google.errorprone.annotations.CheckReturnValue;
