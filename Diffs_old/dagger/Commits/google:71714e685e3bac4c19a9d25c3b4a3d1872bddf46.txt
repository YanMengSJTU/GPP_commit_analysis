diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index 34183ef2a..15845651c 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -785,6 +785,8 @@ private void initializeFrameworkTypes() {
 
   private Optional<CodeBlock> initializeContributionBinding(BindingKey bindingKey) {
     ContributionBinding binding = graph.resolvedBindings().get(bindingKey).contributionBinding();
+    /* We have some duplication in the branches below b/c initializeDeferredDependencies must be
+     * called before we get the code block that initializes the member. */
     switch (binding.factoryCreationStrategy()) {
       case DELEGATE:
         CodeBlock delegatingCodeBlock = CodeBlock.of(
@@ -794,11 +796,14 @@ private void initializeFrameworkTypes() {
                 Iterables.getOnlyElement(binding.dependencies()).bindingKey())
                     .getExpressionFor(name));
         return Optional.of(
-            initializeMember(
-                bindingKey,
-                binding.scope().isPresent()
-                    ? decorateForScope(delegatingCodeBlock, binding.scope().get())
-                    : delegatingCodeBlock));
+            CodeBlocks.concat(
+                ImmutableList.of(
+                    initializeDeferredDependencies(binding),
+                    initializeMember(
+                        bindingKey,
+                        binding.scope().isPresent()
+                            ? decorateForScope(delegatingCodeBlock, binding.scope().get())
+                            : delegatingCodeBlock))));
       case ENUM_INSTANCE:
         if (!binding.scope().isPresent()) {
           return Optional.absent();
