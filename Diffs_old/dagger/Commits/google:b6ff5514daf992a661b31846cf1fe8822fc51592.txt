diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponentWithMultibindings.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponentWithMultibindings.java
deleted file mode 100644
index 9ed266aec..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponentWithMultibindings.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (C) 2015 Google, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package test.subcomponent;
-
-import dagger.Subcomponent;
-
-@Subcomponent(modules = ChildMultibindingModule.class)
-interface ChildComponentWithMultibindings {
-  RequiresMultibindingsInChild requiresMultibindingsInChild();
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildMultibindingModule.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildMultibindingModule.java
deleted file mode 100644
index ae02b9e6f..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildMultibindingModule.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (C) 2015 Google, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package test.subcomponent;
-
-import dagger.Module;
-import dagger.Provides;
-import dagger.mapkeys.StringKey;
-
-import static dagger.Provides.Type.MAP;
-import static dagger.Provides.Type.SET;
-
-@Module
-class ChildMultibindingModule {
-
-  @Provides(type = SET)
-  static Object childObject() {
-    return "object provided by child";
-  }
-
-  @Provides(type = MAP)
-  @StringKey("child key")
-  static Object childKeyObject() {
-    return "object in child";
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/MultibindingSubcomponents.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/MultibindingSubcomponents.java
new file mode 100644
index 000000000..49f1c9d34
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/MultibindingSubcomponents.java
@@ -0,0 +1,201 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.subcomponent;
+
+import dagger.Component;
+import dagger.Module;
+import dagger.Provides;
+import dagger.Subcomponent;
+import dagger.mapkeys.StringKey;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
+import javax.inject.Inject;
+
+import static dagger.Provides.Type.MAP;
+import static dagger.Provides.Type.SET;
+
+final class MultibindingSubcomponents {
+
+  /** Multibindings for this type are bound only in the parent component. */
+  enum BoundInParent {
+    INSTANCE;
+  }
+
+  /** Multibindings for this type are bound only in the child component. */
+  enum BoundInChild {
+    INSTANCE;
+  }
+
+  /** Multibindings for this type are bound in the parent component and the child component. */
+  enum BoundInParentAndChild {
+    IN_PARENT,
+    IN_CHILD;
+  }
+
+  static final class RequiresMultibindings<T> {
+    private final Set<T> set;
+    private final Map<String, T> map;
+
+    @Inject
+    RequiresMultibindings(Set<T> set, Map<String, T> map) {
+      this.set = set;
+      this.map = map;
+    }
+
+    Set<T> set() {
+      return set;
+    }
+
+    Map<String, T> map() {
+      return map;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+      return obj instanceof RequiresMultibindings<?>
+          && set.equals(((RequiresMultibindings<?>) obj).set)
+          && map.equals(((RequiresMultibindings<?>) obj).map);
+    }
+
+    @Override
+    public int hashCode() {
+      return Objects.hash(set, map);
+    }
+
+    @Override
+    public String toString() {
+      return String.format(
+          "%s{set=%s, map=%s}", RequiresMultibindings.class.getSimpleName(), set, map);
+    }
+  }
+
+  @Module
+  static final class ParentMultibindingModule {
+
+    @Provides(type = SET)
+    static BoundInParent onlyInParentElement() {
+      return BoundInParent.INSTANCE;
+    }
+
+    @Provides(type = MAP)
+    @StringKey("parent key")
+    static BoundInParent onlyInParentEntry() {
+      return BoundInParent.INSTANCE;
+    }
+
+    @Provides(type = SET)
+    static BoundInParentAndChild inParentAndChildElement() {
+      return BoundInParentAndChild.IN_PARENT;
+    }
+
+    @Provides(type = MAP)
+    @StringKey("parent key")
+    static BoundInParentAndChild inParentAndChildEntry() {
+      return BoundInParentAndChild.IN_PARENT;
+    }
+
+    @Provides(type = SET)
+    static RequiresMultibindings<BoundInParentAndChild> requiresMultibindingsInParentAndChild(
+        RequiresMultibindings<BoundInParentAndChild> requiresMultibindingsInParentAndChild) {
+      return requiresMultibindingsInParentAndChild;
+    }
+  }
+
+  @Module
+  static final class ChildMultibindingModule {
+
+    @Provides(type = SET)
+    static BoundInParentAndChild inParentAndChildElement() {
+      return BoundInParentAndChild.IN_CHILD;
+    }
+
+    @Provides(type = MAP)
+    @StringKey("child key")
+    static BoundInParentAndChild inParentAndChildEntry() {
+      return BoundInParentAndChild.IN_CHILD;
+    }
+
+    @Provides(type = SET)
+    static BoundInChild onlyInChildElement() {
+      return BoundInChild.INSTANCE;
+    }
+
+    @Provides(type = MAP)
+    @StringKey("child key")
+    static BoundInChild onlyInChildEntry() {
+      return BoundInChild.INSTANCE;
+    }
+  }
+
+  interface ProvidesBoundInParent {
+    RequiresMultibindings<BoundInParent> requiresMultibindingsBoundInParent();
+  }
+
+  interface ProvidesBoundInChild {
+    RequiresMultibindings<BoundInChild> requiresMultibindingsBoundInChild();
+  }
+
+  interface ProvidesBoundInParentAndChild {
+    RequiresMultibindings<BoundInParentAndChild> requiresMultibindingsBoundInParentAndChild();
+  }
+
+  interface ProvidesSetOfRequiresMultibindings {
+    Set<RequiresMultibindings<BoundInParentAndChild>> setOfRequiresMultibindingsInParentAndChild();
+  }
+
+  interface ParentWithProvision extends ProvidesBoundInParent, ProvidesBoundInParentAndChild {}
+
+  interface HasChildWithProvision {
+    ChildWithProvision childWithProvision();
+  }
+
+  interface HasChildWithoutProvision {
+    ChildWithoutProvision childWithoutProvision();
+  }
+
+  @Component(modules = ParentMultibindingModule.class)
+  interface ParentWithoutProvisionHasChildWithoutProvision extends HasChildWithoutProvision {}
+
+  @Component(modules = ParentMultibindingModule.class)
+  interface ParentWithoutProvisionHasChildWithProvision extends HasChildWithProvision {}
+
+  @Component(modules = ParentMultibindingModule.class)
+  interface ParentWithProvisionHasChildWithoutProvision
+      extends ParentWithProvision, HasChildWithoutProvision {}
+
+  @Component(modules = ParentMultibindingModule.class)
+  interface ParentWithProvisionHasChildWithProvision
+      extends ParentWithProvision, HasChildWithProvision {}
+
+  @Subcomponent(modules = ChildMultibindingModule.class)
+  interface ChildWithoutProvision {
+    Grandchild grandchild();
+  }
+
+  @Subcomponent(modules = ChildMultibindingModule.class)
+  interface ChildWithProvision
+      extends ProvidesBoundInParent, ProvidesBoundInParentAndChild, ProvidesBoundInChild,
+          ProvidesSetOfRequiresMultibindings {
+
+    Grandchild grandchild();
+  }
+
+  @Subcomponent
+  interface Grandchild
+      extends ProvidesBoundInParent, ProvidesBoundInParentAndChild, ProvidesBoundInChild,
+          ProvidesSetOfRequiresMultibindings {}
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponentWithMultibindings.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponentWithMultibindings.java
deleted file mode 100644
index 46fe8835c..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponentWithMultibindings.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (C) 2015 Google, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package test.subcomponent;
-
-import dagger.Component;
-
-@Component(modules = ParentMultibindingModule.class)
-interface ParentComponentWithMultibindings extends ParentComponentWithoutMultibindings {
-  RequiresMultibindingsInParent requiresMultibindingsInParent();
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponentWithoutMultibindings.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponentWithoutMultibindings.java
deleted file mode 100644
index 3d4431ca9..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponentWithoutMultibindings.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (C) 2015 Google, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package test.subcomponent;
-
-import dagger.Component;
-
-@Component(modules = ParentMultibindingModule.class)
-interface ParentComponentWithoutMultibindings {
-  ChildComponentWithMultibindings childComponent();
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentMultibindingModule.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentMultibindingModule.java
deleted file mode 100644
index e4ec173de..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentMultibindingModule.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright (C) 2015 Google, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package test.subcomponent;
-
-import dagger.Module;
-import dagger.Provides;
-import dagger.mapkeys.StringKey;
-
-import static dagger.Provides.Type.MAP;
-import static dagger.Provides.Type.SET;
-
-@Module
-class ParentMultibindingModule {
-
-  @Provides(type = SET)
-  static Object provideObject() {
-    return "object provided by parent";
-  }
-
-  @Provides(type = SET)
-  static String provideString() {
-    return "string provided by parent";
-  }
-
-  @Provides(type = SET)
-  static RequiresMultiboundObjects requiresMultiboundObjects(
-      RequiresMultiboundObjects requiresMultiboundObjects) {
-    return requiresMultiboundObjects;
-  }
-
-  @Provides(type = MAP)
-  @StringKey("parent key")
-  static String parentKeyString() {
-    return "string in parent";
-  }
-
-  @Provides(type = MAP)
-  @StringKey("parent key")
-  static Object parentKeyObject() {
-    return "object in parent";
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresMultibindingsInChild.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresMultibindingsInChild.java
deleted file mode 100644
index 4ec0469de..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresMultibindingsInChild.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * Copyright (C) 2015 Google, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package test.subcomponent;
-
-import java.util.Set;
-import javax.inject.Inject;
-
-class RequiresMultibindingsInChild extends RequiresMultibindingsInParent {
-
-  @Inject
-  RequiresMultibindingsInChild(
-      RequiresMultiboundObjects requiresMultiboundObjects,
-      RequiresMultiboundStrings requiresMultiboundStrings,
-      Set<RequiresMultiboundObjects> setOfRequiresMultiboundObjects) {
-    super(requiresMultiboundObjects, requiresMultiboundStrings, setOfRequiresMultiboundObjects);
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresMultibindingsInParent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresMultibindingsInParent.java
deleted file mode 100644
index a48d38bfa..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresMultibindingsInParent.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * Copyright (C) 2015 Google, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package test.subcomponent;
-
-import java.util.Set;
-import javax.inject.Inject;
-
-class RequiresMultibindingsInParent {
-  private final RequiresMultiboundObjects requiresMultiboundObjects;
-  private final RequiresMultiboundStrings requiresMultiboundStrings;
-  private final Set<RequiresMultiboundObjects> setOfRequiresMultiboundObjects;
-
-  @Inject
-  RequiresMultibindingsInParent(
-      RequiresMultiboundObjects requiresMultiboundObjects,
-      RequiresMultiboundStrings requiresMultiboundStrings,
-      Set<RequiresMultiboundObjects> setOfRequiresMultiboundObjects) {
-    this.requiresMultiboundObjects = requiresMultiboundObjects;
-    this.requiresMultiboundStrings = requiresMultiboundStrings;
-    this.setOfRequiresMultiboundObjects = setOfRequiresMultiboundObjects;
-  }
-
-  RequiresMultiboundObjects requiresMultiboundObjects() {
-    return requiresMultiboundObjects;
-  }
-
-  RequiresMultiboundStrings requiresMultiboundStrings() {
-    return requiresMultiboundStrings;
-  }
-
-  Set<RequiresMultiboundObjects> setOfRequiresMultiboundObjects() {
-    return setOfRequiresMultiboundObjects;
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresMultiboundObjects.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresMultiboundObjects.java
deleted file mode 100644
index d787153e3..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresMultiboundObjects.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Copyright (C) 2015 Google, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package test.subcomponent;
-
-import java.util.Map;
-import java.util.Set;
-import javax.inject.Inject;
-
-class RequiresMultiboundObjects {
-  private final Set<Object> setOfObjects;
-  private final Map<String, Object> mapOfObjects;
-
-  @Inject
-  RequiresMultiboundObjects(Set<Object> setOfObjects, Map<String, Object> mapOfObjects) {
-    this.setOfObjects = setOfObjects;
-    this.mapOfObjects = mapOfObjects;
-  }
-
-  Set<Object> setOfObjects() {
-    return setOfObjects;
-  }
-
-  Map<String, Object> mapOfObjects() {
-    return mapOfObjects;
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresMultiboundStrings.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresMultiboundStrings.java
deleted file mode 100644
index 410bdf2c0..000000000
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresMultiboundStrings.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Copyright (C) 2015 Google, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package test.subcomponent;
-
-import java.util.Map;
-import java.util.Set;
-import javax.inject.Inject;
-
-class RequiresMultiboundStrings {
-  private final Set<String> setOfStrings;
-  private final Map<String, String> mapOfStrings;
-
-  @Inject
-  RequiresMultiboundStrings(Set<String> setOfStrings, Map<String, String> mapOfStrings) {
-    this.setOfStrings = setOfStrings;
-    this.mapOfStrings = mapOfStrings;
-  }
-
-  Set<String> setOfStrings() {
-    return setOfStrings;
-  }
-
-  Map<String, String> mapOfStrings() {
-    return mapOfStrings;
-  }
-}
diff --git a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentMultibindingsTest.java b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentMultibindingsTest.java
index f57a77831..269782ad2 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentMultibindingsTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentMultibindingsTest.java
@@ -15,75 +15,228 @@
  */
 package test.subcomponent;
 
-import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
-import java.util.Collection;
+import com.google.common.collect.ImmutableSet;
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-
-import static com.google.common.collect.Iterables.getOnlyElement;
-import static com.google.common.truth.Truth.assertWithMessage;
-
-@RunWith(Parameterized.class)
+import org.junit.runners.JUnit4;
+import test.subcomponent.MultibindingSubcomponents.BoundInChild;
+import test.subcomponent.MultibindingSubcomponents.BoundInParent;
+import test.subcomponent.MultibindingSubcomponents.BoundInParentAndChild;
+import test.subcomponent.MultibindingSubcomponents.ParentWithProvisionHasChildWithProvision;
+import test.subcomponent.MultibindingSubcomponents.ParentWithProvisionHasChildWithoutProvision;
+import test.subcomponent.MultibindingSubcomponents.ParentWithoutProvisionHasChildWithProvision;
+import test.subcomponent.MultibindingSubcomponents.ParentWithoutProvisionHasChildWithoutProvision;
+import test.subcomponent.MultibindingSubcomponents.RequiresMultibindings;
+
+import static com.google.common.truth.Truth.assertThat;
+
+@RunWith(JUnit4.class)
 public class SubcomponentMultibindingsTest {
 
-  @Parameters(name = "{0}")
-  public static Collection<Object[]> parameters() {
-    return ImmutableList.of(
-        new Object[] {DaggerParentComponentWithMultibindings.create()},
-        new Object[] {DaggerParentComponentWithoutMultibindings.create()});
+  private static final RequiresMultibindings<BoundInParent> BOUND_IN_PARENT =
+      new RequiresMultibindings<>(
+          ImmutableSet.of(BoundInParent.INSTANCE),
+          ImmutableMap.of("parent key", BoundInParent.INSTANCE));
+
+  private static final RequiresMultibindings<BoundInChild> BOUND_IN_CHILD =
+      new RequiresMultibindings<>(
+          ImmutableSet.of(BoundInChild.INSTANCE),
+          ImmutableMap.of("child key", BoundInChild.INSTANCE));
+
+  private static final RequiresMultibindings<BoundInParentAndChild> BOUND_IN_PARENT_AND_CHILD =
+      new RequiresMultibindings<>(
+          ImmutableSet.of(BoundInParentAndChild.IN_PARENT, BoundInParentAndChild.IN_CHILD),
+          ImmutableMap.of(
+              "parent key", BoundInParentAndChild.IN_PARENT,
+              "child key", BoundInParentAndChild.IN_CHILD));
+
+  private static final RequiresMultibindings<BoundInParentAndChild>
+      BOUND_IN_PARENT_AND_CHILD_PROVIDED_BY_PARENT =
+          new RequiresMultibindings<>(
+              ImmutableSet.of(BoundInParentAndChild.IN_PARENT),
+              ImmutableMap.of("parent key", BoundInParentAndChild.IN_PARENT));
+
+  private ParentWithoutProvisionHasChildWithoutProvision
+      parentWithoutProvisionHasChildWithoutProvision;
+  private ParentWithoutProvisionHasChildWithProvision parentWithoutProvisionHasChildWithProvision;
+  private ParentWithProvisionHasChildWithoutProvision parentWithProvisionHasChildWithoutProvision;
+  private ParentWithProvisionHasChildWithProvision parentWithProvisionHasChildWithProvision;
+
+  @Before
+  public void setUp() {
+    parentWithoutProvisionHasChildWithoutProvision =
+        DaggerMultibindingSubcomponents_ParentWithoutProvisionHasChildWithoutProvision.create();
+    parentWithoutProvisionHasChildWithProvision =
+        DaggerMultibindingSubcomponents_ParentWithoutProvisionHasChildWithProvision.create();
+    parentWithProvisionHasChildWithoutProvision =
+        DaggerMultibindingSubcomponents_ParentWithProvisionHasChildWithoutProvision.create();
+    parentWithProvisionHasChildWithProvision =
+        DaggerMultibindingSubcomponents_ParentWithProvisionHasChildWithProvision.create();
   }
 
-  private ParentComponentWithoutMultibindings parent;
-
-  public SubcomponentMultibindingsTest(ParentComponentWithoutMultibindings parentComponent) {
-    this.parent = parentComponent;
+  @Test
+  public void testParentWithoutProvisionHasChildWithoutProvision() {
+    // Child
+    assertThat(
+            parentWithoutProvisionHasChildWithoutProvision
+                .childWithoutProvision()
+                .grandchild()
+                .requiresMultibindingsBoundInParent())
+        .isEqualTo(BOUND_IN_PARENT);
+
+    // Grandchild
+    assertThat(
+            parentWithoutProvisionHasChildWithoutProvision
+                .childWithoutProvision()
+                .grandchild()
+                .requiresMultibindingsBoundInParentAndChild())
+        .isEqualTo(BOUND_IN_PARENT_AND_CHILD);
+    assertThat(
+            parentWithoutProvisionHasChildWithoutProvision
+                .childWithoutProvision()
+                .grandchild()
+                .requiresMultibindingsBoundInChild())
+        .isEqualTo(BOUND_IN_CHILD);
+
+    // TODO(b/26145104)
+    // assertThat(
+    //         parentWithoutProvisionHasChildWithoutProvision
+    //             .childWithoutProvision()
+    //             .grandchild()
+    //             .setOfRequiresMultibindingsInParentAndChild())
+    //     .containsExactly(BOUND_IN_PARENT_AND_CHILD);
   }
 
   @Test
-  public void testMultibindingsInSubcomponents() {
-    RequiresMultibindingsInChild requiresMultibindingsInChild =
-        parent.childComponent().requiresMultibindingsInChild();
-
-    assertWithMessage("requiresMultiboundObjects.setOfObjects")
-        .that(requiresMultibindingsInChild.requiresMultiboundObjects().setOfObjects())
-        .containsExactly("object provided by parent", "object provided by child");
-
-    assertWithMessage("requiresMultiboundObjects.mapOfObjects")
-        .that(requiresMultibindingsInChild.requiresMultiboundObjects().mapOfObjects())
-        .isEqualTo(
-            ImmutableMap.of("parent key", "object in parent", "child key", "object in child"));
-
-    assertWithMessage("requiresMultiboundStrings")
-        .that(requiresMultibindingsInChild.requiresMultiboundStrings().setOfStrings())
-        .containsExactly("string provided by parent");
-
-    assertWithMessage("requiresMultiboundStrings.mapOfStrings")
-        .that(requiresMultibindingsInChild.requiresMultiboundStrings().mapOfStrings())
-        .isEqualTo(ImmutableMap.of("parent key", "string in parent"));
+  public void testParentWithoutProvisionHasChildWithProvision() {
+    // Child
+    assertThat(
+            parentWithoutProvisionHasChildWithProvision
+                .childWithProvision()
+                .grandchild()
+                .requiresMultibindingsBoundInParent())
+        .isEqualTo(BOUND_IN_PARENT);
+
+    // Grandchild
+    assertThat(
+            parentWithoutProvisionHasChildWithProvision
+                .childWithProvision()
+                .grandchild()
+                .requiresMultibindingsBoundInParentAndChild())
+        .isEqualTo(BOUND_IN_PARENT_AND_CHILD);
+    assertThat(
+            parentWithoutProvisionHasChildWithProvision
+                .childWithProvision()
+                .grandchild()
+                .requiresMultibindingsBoundInChild())
+        .isEqualTo(BOUND_IN_CHILD);
+
+    assertThat(
+            parentWithoutProvisionHasChildWithProvision
+                .childWithProvision()
+                .grandchild()
+                .setOfRequiresMultibindingsInParentAndChild())
+        .containsExactly(BOUND_IN_PARENT_AND_CHILD);
   }
 
   @Test
-  public void testOverriddenMultibindingsInSubcomponents() {
-    RequiresMultibindingsInChild requiresMultibindingsInChild =
-        parent.childComponent().requiresMultibindingsInChild();
-
-    assertWithMessage("setOfRequiresMultiboundObjects")
-        .that(requiresMultibindingsInChild.setOfRequiresMultiboundObjects())
-        .hasSize(1);
-
-    RequiresMultiboundObjects onlyElementInMultiboundRequiresMultiboundObjects =
-        getOnlyElement(requiresMultibindingsInChild.setOfRequiresMultiboundObjects());
-
-    assertWithMessage("setOfRequiresMultiboundObjects[only].setOfObjects")
-        .that(onlyElementInMultiboundRequiresMultiboundObjects.setOfObjects())
-        .containsExactly("object provided by parent", "object provided by child");
+  public void testParentWithProvisionHasChildWithoutProvision() {
+    // Parent
+    assertThat(parentWithProvisionHasChildWithoutProvision.requiresMultibindingsBoundInParent())
+        .isEqualTo(BOUND_IN_PARENT);
+
+    assertThat(
+            parentWithProvisionHasChildWithoutProvision
+                .requiresMultibindingsBoundInParentAndChild())
+        .isEqualTo(BOUND_IN_PARENT_AND_CHILD_PROVIDED_BY_PARENT);
+
+    // Grandchild
+    assertThat(
+            parentWithProvisionHasChildWithoutProvision
+                .childWithoutProvision()
+                .grandchild()
+                .requiresMultibindingsBoundInParent())
+        .isEqualTo(BOUND_IN_PARENT);
+    assertThat(
+            parentWithProvisionHasChildWithoutProvision
+                .childWithoutProvision()
+                .grandchild()
+                .requiresMultibindingsBoundInChild())
+        .isEqualTo(BOUND_IN_CHILD);
+
+    // TODO(b/26145104)
+    // assertThat(
+    //         parentWithProvisionHasChildWithoutProvision
+    //             .childWithoutProvision()
+    //             .grandchild()
+    //             .requiresMultibindingsBoundInParentAndChild())
+    //     .isEqualTo(BOUND_IN_PARENT_AND_CHILD);
+
+    // TODO(b/26145104)
+    // assertThat(
+    //         parentWithProvisionHasChildWithoutProvision
+    //             .childWithoutProvision()
+    //             .grandchild()
+    //             .setOfRequiresMultibindingsInParentAndChild())
+    //     .containsExactly(BOUND_IN_PARENT_AND_CHILD);
+  }
 
-    assertWithMessage("setOfRequiresMultiboundObjects[only].mapOfObjects")
-        .that(onlyElementInMultiboundRequiresMultiboundObjects.mapOfObjects())
-        .isEqualTo(
-            ImmutableMap.of("parent key", "object in parent", "child key", "object in child"));
+  @Test
+  public void testParentWithProvisionHasChildWithProvision() {
+    // Parent
+    assertThat(parentWithProvisionHasChildWithProvision.requiresMultibindingsBoundInParent())
+        .isEqualTo(BOUND_IN_PARENT);
+
+    // Child
+    assertThat(
+            parentWithProvisionHasChildWithProvision
+                .childWithProvision()
+                .requiresMultibindingsBoundInParent())
+        .isEqualTo(BOUND_IN_PARENT);
+    assertThat(
+            parentWithProvisionHasChildWithProvision
+                .childWithProvision()
+                .requiresMultibindingsBoundInChild())
+        .isEqualTo(BOUND_IN_CHILD);
+    assertThat(
+            parentWithProvisionHasChildWithProvision
+                .childWithProvision()
+                .requiresMultibindingsBoundInParentAndChild())
+        .isEqualTo(BOUND_IN_PARENT_AND_CHILD);
+
+    assertThat(
+            parentWithProvisionHasChildWithProvision
+                .childWithProvision()
+                .setOfRequiresMultibindingsInParentAndChild())
+        .containsExactly(BOUND_IN_PARENT_AND_CHILD);
+
+    // Grandchild
+    assertThat(
+            parentWithProvisionHasChildWithProvision
+                .childWithProvision()
+                .grandchild()
+                .requiresMultibindingsBoundInParent())
+        .isEqualTo(BOUND_IN_PARENT);
+    assertThat(
+            parentWithProvisionHasChildWithProvision
+                .childWithProvision()
+                .grandchild()
+                .requiresMultibindingsBoundInChild())
+        .isEqualTo(BOUND_IN_CHILD);
+    assertThat(
+            parentWithProvisionHasChildWithProvision
+                .childWithProvision()
+                .grandchild()
+                .requiresMultibindingsBoundInParentAndChild())
+        .isEqualTo(BOUND_IN_PARENT_AND_CHILD);
+
+    assertThat(
+            parentWithProvisionHasChildWithProvision
+                .childWithProvision()
+                .grandchild()
+                .setOfRequiresMultibindingsInParentAndChild())
+        .containsExactly(BOUND_IN_PARENT_AND_CHILD);
   }
 }
