diff --git a/compiler/pom.xml b/compiler/pom.xml
index f9cf29f31..af4eaa067 100644
--- a/compiler/pom.xml
+++ b/compiler/pom.xml
@@ -45,6 +45,13 @@
       <artifactId>guava</artifactId>
     </dependency>
 
+    <dependency>
+      <groupId>com.google.auto.value</groupId>
+      <artifactId>auto-value</artifactId>
+      <version>1.0-rc1</version>
+      <optional>true</optional>
+    </dependency>
+
     <dependency>
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>
@@ -89,7 +96,9 @@
             <id>default-compile</id>
             <goals><goal>compile</goal></goals>
             <configuration>
-              <compilerArgument>-proc:none</compilerArgument>
+              <annotationProcessors>
+                <annotationProcessor>com.google.auto.value.processor.AutoValueProcessor</annotationProcessor>
+              </annotationProcessors>
             </configuration>
           </execution>
           <execution>
diff --git a/compiler/src/main/java/dagger/internal/codegen/Util.java b/compiler/src/main/java/dagger/internal/codegen/Util.java
index d4c62b0c1..db6e79641 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Util.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Util.java
@@ -37,7 +37,6 @@
 import javax.lang.model.type.PrimitiveType;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVariable;
-import javax.lang.model.type.UnionType;
 import javax.lang.model.type.WildcardType;
 import javax.lang.model.util.SimpleAnnotationValueVisitor6;
 import javax.lang.model.util.SimpleTypeVisitor6;
@@ -152,16 +151,6 @@ public static void typeToString(final TypeMirror type, final StringBuilder resul
         result.append(errorType.toString());
         return null;
       }
-      public Void visitUnion(UnionType unionType, Void v) {
-        List<? extends TypeMirror> alternatives = unionType.getAlternatives();
-        for (int i = 0; i < alternatives.size(); i++) {
-          if (i != 0) {
-            result.append(" & ");
-          }
-          typeToString(alternatives.get(i), result, innerClassSeparator);
-        }
-        return null;
-      }
       public Void visitWildcard(WildcardType wildcardType, Void v) {
         result.append("?");
         if (wildcardType.getExtendsBound() != null) {
diff --git a/compiler/src/test/java/dagger/internal/codegen/MirrorsTest.java b/compiler/src/test/java/dagger/internal/codegen/MirrorsTest.java
index 689951d8e..bef6c228e 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MirrorsTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MirrorsTest.java
@@ -15,10 +15,6 @@
  */
 package dagger.internal.codegen;
 
-import static javax.lang.model.type.TypeKind.NONE;
-import static javax.lang.model.type.TypeKind.VOID;
-import static org.truth0.Truth.ASSERT;
-
 import com.google.common.base.Function;
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableList;
@@ -26,12 +22,10 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.testing.EquivalenceTester;
 import com.google.testing.compile.CompilationRule;
-
 import java.lang.annotation.Annotation;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
@@ -46,12 +40,15 @@
 import javax.lang.model.util.ElementFilter;
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
-
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
+import static javax.lang.model.type.TypeKind.NONE;
+import static javax.lang.model.type.TypeKind.VOID;
+import static org.truth0.Truth.ASSERT;
+
 /**
  * Tests {@link Mirrors}.
  */
@@ -71,7 +68,7 @@ public void equivalence() {
         types.getDeclaredType(mapElement, objectType, objectType);
     TypeMirror mapType = mapElement.asType();
     WildcardType wildcard = types.getWildcardType(null, null);
-    EquivalenceTester<TypeMirror> tester = EquivalenceTester.of(Mirrors.equivalence())
+    EquivalenceTester<TypeMirror> tester = EquivalenceTester.<TypeMirror>of(Mirrors.equivalence())
         .addEquivalenceGroup(types.getNullType())
         .addEquivalenceGroup(types.getNoType(NONE))
         .addEquivalenceGroup(types.getNoType(VOID))
diff --git a/pom.xml b/pom.xml
index 2305f863e..1d8d53a1f 100644
--- a/pom.xml
+++ b/pom.xml
@@ -50,7 +50,7 @@
     <junit.version>4.10</junit.version>
     <fest.version>1.4</fest.version>
     <truth.version>0.13</truth.version>
-    <compile-testing.version>0.4</compile-testing.version>
+    <compile-testing.version>0.5</compile-testing.version>
   </properties>
 
   <scm>
