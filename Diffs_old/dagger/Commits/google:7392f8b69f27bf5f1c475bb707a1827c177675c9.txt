diff --git a/java/dagger/internal/codegen/ModifiableBindingExpressions.java b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
index 0f67cc01e..4481f3e54 100644
--- a/java/dagger/internal/codegen/ModifiableBindingExpressions.java
+++ b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
@@ -382,12 +382,7 @@ private boolean shouldModifyImplementation(
           // if the binding is modifiable and is resolved as a provision binding in a superclass
           // but later resolved as a production binding, we can't take the same shortcut as before.
           if (componentImplementation.superclassImplementation().isPresent()) {
-            BindingGraph superclassGraph =
-                componentImplementation.superclassImplementation().get().graph();
-            ResolvedBindings superclassBindings = superclassGraph.resolvedBindings(request);
-            return superclassBindings != null
-                && resolvedBindings != null
-                && !superclassBindings.bindingType().equals(resolvedBindings.bindingType());
+            return bindingTypeChanged(request, resolvedBindings);
           }
           return false;
 
@@ -460,6 +455,19 @@ private boolean shouldModifyImplementation(
     }
   }
 
+  /**
+   * Returns {@code true} if the {@link BindingType} for {@code request} is not the same in this
+   * implementation and it's superclass implementation.
+   */
+  private boolean bindingTypeChanged(BindingRequest request, ResolvedBindings resolvedBindings) {
+    BindingGraph superclassGraph =
+        componentImplementation.superclassImplementation().get().graph();
+    ResolvedBindings superclassBindings = superclassGraph.resolvedBindings(request);
+    return superclassBindings != null
+        && resolvedBindings != null
+        && !superclassBindings.bindingType().equals(resolvedBindings.bindingType());
+  }
+
   /**
    * Returns true if the binding can be resolved by the graph for this component or any parent
    * component.
