diff --git a/compiler/src/main/java/dagger/internal/codegen/GraphVisualizer.java b/compiler/src/main/java/dagger/internal/codegen/GraphVisualizer.java
index bfa9418c7..a0fe29ce7 100644
--- a/compiler/src/main/java/dagger/internal/codegen/GraphVisualizer.java
+++ b/compiler/src/main/java/dagger/internal/codegen/GraphVisualizer.java
@@ -19,11 +19,11 @@
 import java.io.IOException;
 import java.util.Comparator;
 import java.util.HashSet;
-import java.util.TreeSet;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeMap;
+import java.util.TreeSet;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -125,7 +125,7 @@ String shortName(String key) {
     return result.toString();
   }
 
-  /** A Comparator for BindingsGroup so we can insure a consistent ordering of output. */
+  /** A Comparator for Bindings so we can insure a consistent ordering of output. */
   private static class BindingComparator implements Comparator<Binding<?>> {
     @Override
     public int compare(Binding<?> left, Binding<?> right) {
diff --git a/core/src/main/java/dagger/internal/BindingsGroup.java b/core/src/main/java/dagger/internal/BindingsGroup.java
index 4bd21b735..861f7de86 100644
--- a/core/src/main/java/dagger/internal/BindingsGroup.java
+++ b/core/src/main/java/dagger/internal/BindingsGroup.java
@@ -16,7 +16,7 @@
  */
 package dagger.internal;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
@@ -26,7 +26,7 @@
  * the initial set of bindings for a graph (from provides methods).
  */
 public abstract class BindingsGroup {
-  private final Map<String, Binding<?>> bindings = new HashMap<String, Binding<?>>();
+  private final Map<String, Binding<?>> bindings = new LinkedHashMap<String, Binding<?>>();
 
   public abstract Binding<?> contributeSetBinding(String key, SetBinding<?> value);
 
diff --git a/core/src/main/java/dagger/internal/Keys.java b/core/src/main/java/dagger/internal/Keys.java
index 0a2a78759..fb65cc67b 100644
--- a/core/src/main/java/dagger/internal/Keys.java
+++ b/core/src/main/java/dagger/internal/Keys.java
@@ -35,7 +35,7 @@
  *       qualified by the annotation.
  *   <li>{@code members/com.square.Foo}: injects members of Foo.
  * </ol>
- * BindingsGroup from {@code @Provides} methods are of the first two types. BindingsGroup
+ * Bindings from {@code @Provides} methods are of the first two types. BindingsGroup
  * created from {@code @Inject}-annotated members of a class are of the first
  * and last types.
  */
diff --git a/core/src/main/java/dagger/internal/Linker.java b/core/src/main/java/dagger/internal/Linker.java
index 27a64d32d..134163965 100644
--- a/core/src/main/java/dagger/internal/Linker.java
+++ b/core/src/main/java/dagger/internal/Linker.java
@@ -38,7 +38,7 @@
    */
   private final Linker base;
 
-  /** BindingsGroup requiring a call to attach(). May contain deferred bindings. */
+  /** Bindings requiring a call to attach(). May contain deferred bindings. */
   private final Queue<Binding<?>> toLink = new LinkedList<Binding<?>>();
 
   /** True unless calls to requestBinding() were unable to satisfy the binding. */
diff --git a/core/src/main/java/dagger/internal/SetBinding.java b/core/src/main/java/dagger/internal/SetBinding.java
index 92d02adf6..af3729061 100644
--- a/core/src/main/java/dagger/internal/SetBinding.java
+++ b/core/src/main/java/dagger/internal/SetBinding.java
@@ -103,7 +103,8 @@ public int size() {
   @Override public Set<T> get() {
     List<T> result = new ArrayList<T>();
     for (SetBinding<T> setBinding = this; setBinding != null; setBinding = setBinding.parent) {
-      for (Binding<?> contributor : setBinding.contributors) {
+      for (int i = 0, size = setBinding.contributors.size(); i < size; i++) {
+        Binding<?> contributor = setBinding.contributors.get(i);
         Object contribution = contributor.get(); // Let runtime exceptions through.
         if (contributor.provideKey.equals(provideKey)) {
           result.addAll((Set<T>) contribution);
@@ -130,11 +131,11 @@ public int size() {
     boolean first = true;
     StringBuilder builder = new StringBuilder("SetBinding[");
     for (SetBinding<T> setBinding = this; setBinding != null; setBinding = setBinding.parent) {
-      for (Binding<?> contributor : setBinding.contributors) {
+      for (int i = 0, size = setBinding.contributors.size(); i < size; i++) {
         if (!first) {
           builder.append(",");
         }
-        builder.append(contributor);
+        builder.append(setBinding.contributors.get(i));
         first = false;
       }
     }
