diff --git a/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
index bb3794ca5..c72c616cd 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
@@ -16,16 +16,16 @@
 package dagger.internal.codegen;
 
 import com.google.common.base.Optional;
-import com.google.common.collect.ImmutableSet;
 import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
-import com.squareup.javapoet.FieldSpec;
+import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeSpec;
 import dagger.Module;
+import dagger.Multibindings;
 import dagger.Provides;
+import dagger.producers.ProductionScope;
 import dagger.producers.monitoring.ProductionComponentMonitor;
-import dagger.producers.monitoring.internal.MonitorCache;
-
+import dagger.producers.monitoring.internal.Monitors;
 import javax.annotation.processing.Filer;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
@@ -33,13 +33,12 @@
 
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
 import static com.squareup.javapoet.TypeSpec.classBuilder;
-import static dagger.internal.codegen.AnnotationSpecs.PROVIDES_SET_VALUES;
 import static dagger.internal.codegen.TypeNames.SET_OF_FACTORIES;
 import static dagger.internal.codegen.TypeNames.providerOf;
-import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.ABSTRACT;
+import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PUBLIC;
 import static javax.lang.model.element.Modifier.STATIC;
-import static javax.lang.model.element.Modifier.FINAL;
 
 /** Generates a monitoring module for use with production components. */
 final class MonitoringModuleGenerator extends JavaPoetSourceFileGenerator<TypeElement> {
@@ -65,27 +64,26 @@ ClassName nameGeneratedType(TypeElement componentElement) {
             .addAnnotation(
                 AnnotationSpec.builder(Module.class)
                     .build())
-            .addModifiers(PUBLIC, FINAL)
-
-            // TODO(beder): Replace this default set binding with EmptyCollections when it exists.
-            .addMethod(
-                methodBuilder("defaultSetOfFactories")
-                    .returns(SET_OF_FACTORIES)
-                    .addModifiers(STATIC)
-                    .addAnnotation(PROVIDES_SET_VALUES)
-                    .addStatement("return $T.of()", ClassName.get(ImmutableSet.class))
-                    .build())
-            .addField(
-                FieldSpec.builder(MonitorCache.class, "monitorCache", PRIVATE, FINAL)
-                    .initializer("new $T()", MonitorCache.class)
+            .addModifiers(FINAL)
+            .addType(
+                TypeSpec.interfaceBuilder("DefaultSetOfFactories")
+                    .addAnnotation(Multibindings.class)
+                    .addMethod(
+                        MethodSpec.methodBuilder("setOfFactories")
+                            .addModifiers(PUBLIC, ABSTRACT)
+                            .returns(SET_OF_FACTORIES)
+                            .build())
                     .build())
             .addMethod(
                 methodBuilder("monitor")
                     .returns(ProductionComponentMonitor.class)
+                    .addModifiers(STATIC)
                     .addAnnotation(Provides.class)
+                    .addAnnotation(ProductionScope.class)
                     .addParameter(providerOf(ClassName.get(componentElement.asType())), "component")
                     .addParameter(providerOf(SET_OF_FACTORIES), "factories")
-                    .addStatement("return monitorCache.monitor(component, factories)")
+                    .addStatement(
+                        "return $T.createMonitorForComponent(component, factories)", Monitors.class)
                     .build()));
   }
 }
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 9090fb58e..ffda289a7 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -259,7 +259,6 @@ public void dependsOnProductionExecutor() {
             "import dagger.producers.Producer;",
             "import dagger.producers.internal.Producers;",
             "import dagger.producers.monitoring.ProductionComponentMonitor;",
-            "import java.util.Set;",
             "import java.util.concurrent.Executor;",
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
@@ -270,7 +269,6 @@ public void dependsOnProductionExecutor() {
             "  private Provider<Executor> simpleComponentProvider;",
             "  private Provider<Executor> executorProvider;",
             "  private Provider<TestClass.SimpleComponent> simpleComponentProvider2;",
-            "  private Provider<Set<ProductionComponentMonitor.Factory>> setOfFactoryProvider;",
             "  private Provider<ProductionComponentMonitor> monitorProvider;",
             "  private Provider<TestClass.B> bProvider;",
             "  private Producer<TestClass.A> aProducer;",
@@ -294,14 +292,11 @@ public void dependsOnProductionExecutor() {
             "                 .create(simpleComponentProvider));",
             "    this.simpleComponentProvider2 =",
             "        InstanceFactory.<TestClass.SimpleComponent>create(this);",
-            "    this.setOfFactoryProvider = SetFactory.create(",
-            "        TestClass$SimpleComponent_MonitoringModule_DefaultSetOfFactoriesFactory",
-            "            .create());",
             "    this.monitorProvider =",
-            "        TestClass$SimpleComponent_MonitoringModule_MonitorFactory.create(",
-            "            builder.testClass$SimpleComponent_MonitoringModule,",
-            "            simpleComponentProvider2,",
-            "            setOfFactoryProvider);",
+            "        ScopedProvider.create(",
+            "            TestClass$SimpleComponent_MonitoringModule_MonitorFactory.create(",
+            "                simpleComponentProvider2,",
+            "                SetFactory.<ProductionComponentMonitor.Factory>create());",
             "    this.bProvider = TestClass$BModule_BFactory.create(",
             "        builder.bModule, TestClass$C_Factory.create());",
             "    this.aProducer = new TestClass$AModule_AFactory(",
@@ -317,8 +312,6 @@ public void dependsOnProductionExecutor() {
             "  }",
             "",
             "  public static final class Builder {",
-            "    private TestClass$SimpleComponent_MonitoringModule",
-            "        testClass$SimpleComponent_MonitoringModule;",
             "    private TestClass.BModule bModule;",
             "    private TestClass.AModule aModule;",
             "    private Executor executor;",
@@ -327,10 +320,6 @@ public void dependsOnProductionExecutor() {
             "    }",
             "",
             "    public TestClass.SimpleComponent build() {",
-            "      if (testClass$SimpleComponent_MonitoringModule == null) {",
-            "        this.testClass$SimpleComponent_MonitoringModule =",
-            "            new TestClass$SimpleComponent_MonitoringModule();",
-            "      }",
             "      if (bModule == null) {",
             "        this.bModule = new TestClass.BModule();",
             "      }",
@@ -354,11 +343,11 @@ public void dependsOnProductionExecutor() {
             "      return this;",
             "    }",
             "",
+            "    @Deprecated",
             "    public Builder testClass$SimpleComponent_MonitoringModule(",
             "        TestClass$SimpleComponent_MonitoringModule",
             "        testClass$SimpleComponent_MonitoringModule) {",
-            "      this.testClass$SimpleComponent_MonitoringModule =",
-            "          Preconditions.checkNotNull(testClass$SimpleComponent_MonitoringModule);",
+            "      Preconditions.checkNotNull(testClass$SimpleComponent_MonitoringModule);",
             "      return this;",
             "    }",
             "",
diff --git a/producers/src/main/java/dagger/producers/monitoring/internal/MonitorCache.java b/producers/src/main/java/dagger/producers/monitoring/internal/MonitorCache.java
deleted file mode 100644
index 681f2c0fc..000000000
--- a/producers/src/main/java/dagger/producers/monitoring/internal/MonitorCache.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (C) 2015 Google, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package dagger.producers.monitoring.internal;
-
-import dagger.producers.monitoring.ProductionComponentMonitor;
-import java.util.Set;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import javax.inject.Provider;
-
-/**
- * A class that provides a {@link ProductionComponentMonitor} for use in production components.
- *
- * <p>This caches the underlying the monitor, since we want a single instance for each component.
- */
-public final class MonitorCache {
-  private static final Logger logger = Logger.getLogger(MonitorCache.class.getName());
-
-  private volatile ProductionComponentMonitor monitor;
-
-  /**
-   * Returns the underlying monitor. This will only actually compute the monitor the first time it
-   * is called; subsequent calls will simply return the cached value, so the arguments to this
-   * method are ignored. It is expected (though not checked) that this method is called with
-   * equivalent arguments each time (like a {@link dagger.Provides @Provides} method would).
-   */
-  public ProductionComponentMonitor monitor(
-      Provider<?> componentProvider,
-      Provider<Set<ProductionComponentMonitor.Factory>> monitorFactorySetProvider) {
-    ProductionComponentMonitor result = monitor;
-    if (result == null) {
-      synchronized (this) {
-        result = monitor;
-        if (result == null) {
-          try {
-            ProductionComponentMonitor.Factory factory =
-                Monitors.delegatingProductionComponentMonitorFactory(
-                    monitorFactorySetProvider.get());
-            result = monitor = factory.create(componentProvider.get());
-          } catch (RuntimeException e) {
-            logger.log(Level.SEVERE, "RuntimeException while constructing monitor factories.", e);
-            result = monitor = ProductionComponentMonitor.noOp();
-          }
-        }
-      }
-    }
-    return result;
-  }
-}
diff --git a/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java b/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java
index 4d7d5b765..ce48907e8 100644
--- a/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java
+++ b/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java
@@ -21,6 +21,7 @@
 import dagger.producers.monitoring.ProducerToken;
 import dagger.producers.monitoring.ProductionComponentMonitor;
 import java.util.Collection;
+import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.inject.Provider;
@@ -53,6 +54,23 @@
     }
   }
 
+  /**
+   * Creates a new monitor for the given component, from a set of monitor factories. This will not
+   * throw a {@link RuntimeException} or return null.
+   */
+  public static ProductionComponentMonitor createMonitorForComponent(
+      Provider<?> componentProvider,
+      Provider<Set<ProductionComponentMonitor.Factory>> monitorFactorySetProvider) {
+    try {
+      ProductionComponentMonitor.Factory factory =
+          delegatingProductionComponentMonitorFactory(monitorFactorySetProvider.get());
+      return factory.create(componentProvider.get());
+    } catch (RuntimeException e) {
+      logger.log(Level.SEVERE, "RuntimeException while constructing monitor factories.", e);
+      return ProductionComponentMonitor.noOp();
+    }
+  }
+
   /**
    * A component monitor that delegates to a single monitor, and catches and logs all exceptions
    * that the delegate throws.
