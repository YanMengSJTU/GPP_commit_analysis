diff --git a/compiler/src/it/functional-tests/src/main/java/test/cycle/Cycles.java b/compiler/src/it/functional-tests/src/main/java/test/cycle/Cycles.java
index 63bf45c87..d422245f6 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/cycle/Cycles.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/cycle/Cycles.java
@@ -15,6 +15,7 @@
  */
 package test.cycle;
 
+import dagger.Binds;
 import dagger.Component;
 import dagger.Lazy;
 import dagger.Module;
@@ -22,7 +23,9 @@
 import dagger.Subcomponent;
 import dagger.multibindings.IntoMap;
 import dagger.multibindings.StringKey;
+
 import java.util.Map;
+
 import javax.inject.Inject;
 import javax.inject.Provider;
 
@@ -117,20 +120,16 @@ private Cycles() {}
   }
 
   @Module
-  static class CycleMapModule {
-    @Provides
+  abstract static class CycleMapModule {
+    @Binds
     @IntoMap
     @StringKey("X")
-    static X x(X x) {
-      return x;
-    }
+    abstract X x(X x);
 
-    @Provides
+    @Binds
     @IntoMap
     @StringKey("Y")
-    static Y y(Y y) {
-      return y;
-    }
+    abstract Y y(Y y);
   }
 
   @SuppressWarnings("dependency-cycle")
diff --git a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/AModule.java b/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/AModule.java
index cede7c36a..8b0fe52b2 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/AModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/multipackage/a/AModule.java
@@ -16,29 +16,30 @@
 
 package test.multipackage.a;
 
+import dagger.Binds;
 import dagger.Module;
 import dagger.Provides;
 import dagger.multibindings.ElementsIntoSet;
 import dagger.multibindings.IntoMap;
 import dagger.multibindings.IntoSet;
 import dagger.multibindings.StringKey;
+
 import java.util.HashSet;
 import java.util.Set;
+
 import javax.inject.Inject;
 
 @Module
-public final class AModule {
+public abstract class AModule {
   @Provides
   @IntoSet
   static String provideString() {
     return "a";
   }
 
-  @Provides
+  @Binds
   @IntoSet
-  static Inaccessible provideInaccessible(Inaccessible inaccessible) {
-    return inaccessible;
-  }
+  abstract Inaccessible provideInaccessible(Inaccessible inaccessible);
 
   @Provides
   @ElementsIntoSet
@@ -46,12 +47,10 @@ static Inaccessible provideInaccessible(Inaccessible inaccessible) {
     return new HashSet<>();
   }
 
-  @Provides
+  @Binds
   @IntoMap
   @StringKey("inaccessible")
-  static Inaccessible provideInaccessibleToMap(Inaccessible inaccessible) {
-    return inaccessible;
-  }
+  abstract Inaccessible provideInaccessibleToMap(Inaccessible inaccessible);
 
   static class Inaccessible {
     @Inject Inaccessible() {}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/MultibindingSubcomponents.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/MultibindingSubcomponents.java
index 14abce625..62c31928d 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/MultibindingSubcomponents.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/MultibindingSubcomponents.java
@@ -15,6 +15,7 @@
  */
 package test.subcomponent;
 
+import dagger.Binds;
 import dagger.Component;
 import dagger.Module;
 import dagger.Provides;
@@ -22,9 +23,11 @@
 import dagger.multibindings.IntoMap;
 import dagger.multibindings.IntoSet;
 import dagger.multibindings.StringKey;
+
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
+
 import javax.inject.Inject;
 
 final class MultibindingSubcomponents {
@@ -83,7 +86,7 @@ public String toString() {
   }
 
   @Module
-  static final class ParentMultibindingModule {
+  abstract static class ParentMultibindingModule {
 
     @Provides
     @IntoSet
@@ -113,13 +116,11 @@ static BoundInParentAndChild inParentAndChildEntry() {
 
     /* This is not static because otherwise we have no tests that cover the case where a
      * subcomponent uses a module instance installed onto a parent component. */
-    @Provides
+    @Binds
     @IntoSet
-    static RequiresMultibindings<BoundInParentAndChild>
+    abstract RequiresMultibindings<BoundInParentAndChild>
         requiresMultibindingsInParentAndChildElement(
-            RequiresMultibindings<BoundInParentAndChild> requiresMultibindingsInParentAndChild) {
-      return requiresMultibindingsInParentAndChild;
-    }
+            RequiresMultibindings<BoundInParentAndChild> requiresMultibindingsInParentAndChild);
   }
 
   @Module
