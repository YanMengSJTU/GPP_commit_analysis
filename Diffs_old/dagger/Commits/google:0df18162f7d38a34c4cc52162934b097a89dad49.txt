diff --git a/javatests/dagger/functional/binds/BindsCollectionsWithoutMultibindingsTest.java b/javatests/dagger/functional/binds/BindsCollectionsWithoutMultibindingsTest.java
index f97dca7d8..90b1bbc9b 100644
--- a/javatests/dagger/functional/binds/BindsCollectionsWithoutMultibindingsTest.java
+++ b/javatests/dagger/functional/binds/BindsCollectionsWithoutMultibindingsTest.java
@@ -18,7 +18,6 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import com.google.common.collect.ImmutableMap;
 import dagger.Binds;
 import dagger.Component;
 import dagger.Module;
@@ -71,9 +70,8 @@ public void works() {
 
     assertThat(component.set()).containsExactly("binds", "set");
     assertThat(component.map())
-        .containsExactlyEntriesIn(
-            ImmutableMap.of(
-                "binds", "map",
-                "without", "multibindings"));
+        .containsExactly(
+            "binds", "map",
+            "without", "multibindings");
   }
 }
diff --git a/javatests/dagger/functional/binds/BindsTest.java b/javatests/dagger/functional/binds/BindsTest.java
index 2881091f2..11695bcfe 100644
--- a/javatests/dagger/functional/binds/BindsTest.java
+++ b/javatests/dagger/functional/binds/BindsTest.java
@@ -18,7 +18,6 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import com.google.common.collect.ImmutableMap;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -55,8 +54,7 @@ public void multibindings() {
     assertThat(component.charSequences()).hasSize(5);
 
     assertThat(component.integerObjectMap())
-        .containsExactlyEntriesIn(
-            ImmutableMap.of(123, "123-string", 456, "456-string", 789, "789-string"));
+        .containsExactly(123, "123-string", 456, "456-string", 789, "789-string");
     assertThat(component.integerProviderOfObjectMap()).hasSize(3);
     assertThat(component.integerProviderOfObjectMap().get(123).get()).isEqualTo("123-string");
     assertThat(component.integerProviderOfObjectMap().get(456).get()).isEqualTo("456-string");
diff --git a/javatests/dagger/functional/builderbinds/BuilderBindsTest.java b/javatests/dagger/functional/builderbinds/BuilderBindsTest.java
index 4cafeac96..b5e5225d1 100644
--- a/javatests/dagger/functional/builderbinds/BuilderBindsTest.java
+++ b/javatests/dagger/functional/builderbinds/BuilderBindsTest.java
@@ -19,9 +19,9 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
 
+import com.google.common.collect.ImmutableList;
 import dagger.functional.builderbinds.TestComponent.Builder;
 import java.util.Arrays;
-import java.util.Collections;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -54,7 +54,7 @@ public void builderBindsNullableWithNull() {
             .l(10L)
             .input("foo")
             .nullableInput(null)
-            .listOfString(Collections.<String>emptyList());
+            .listOfString(ImmutableList.of());
     builder.boundInSubtype(20);
     TestComponent component = builder.build();
 
@@ -81,7 +81,7 @@ public void builderBindsPrimitiveNotSet() {
               .l(10L)
               .input("foo")
               .nullableInput("bar")
-              .listOfString(Collections.<String>emptyList());
+              .listOfString(ImmutableList.of());
       builder.boundInSubtype(20);
       builder.build();
       fail("expected IllegalStateException");
@@ -97,7 +97,7 @@ public void builderBindsNonNullableNotSet() {
               .count(5)
               .l(10L)
               .nullableInput("foo")
-              .listOfString(Collections.<String>emptyList());
+              .listOfString(ImmutableList.of());
       builder.boundInSubtype(20);
       builder.build();
       fail("expected IllegalStateException");
@@ -108,11 +108,7 @@ public void builderBindsNonNullableNotSet() {
   @Test
   public void builderBindsNullableNotSet() {
     Builder builder =
-        DaggerTestComponent.builder()
-            .count(5)
-            .l(10L)
-            .input("foo")
-            .listOfString(Collections.<String>emptyList());
+        DaggerTestComponent.builder().count(5).l(10L).input("foo").listOfString(ImmutableList.of());
     builder.boundInSubtype(20);
     TestComponent component = builder.build();
     assertThat(component.count()).isEqualTo(5);
diff --git a/javatests/dagger/functional/gwt/GwtIncompatiblesTest.java b/javatests/dagger/functional/gwt/GwtIncompatiblesTest.java
index c038e1dc1..f6f6c41c3 100644
--- a/javatests/dagger/functional/gwt/GwtIncompatiblesTest.java
+++ b/javatests/dagger/functional/gwt/GwtIncompatiblesTest.java
@@ -37,7 +37,7 @@ public void testIncompatible() {
   }
 
   private void assertGwtIncompatible(Class<?> clazz) {
-    boolean gwtIncompatible = clazz.getAnnotation(GwtIncompatible.class) != null;
+    boolean gwtIncompatible = clazz.isAnnotationPresent(GwtIncompatible.class);
     if (!gwtIncompatible) {
       throw new AssertionError(clazz.getCanonicalName() + " is not @GwtIncompatible");
     }
diff --git a/javatests/dagger/functional/producers/ProducerFactoryTest.java b/javatests/dagger/functional/producers/ProducerFactoryTest.java
index b3980704c..7b6520351 100644
--- a/javatests/dagger/functional/producers/ProducerFactoryTest.java
+++ b/javatests/dagger/functional/producers/ProducerFactoryTest.java
@@ -155,7 +155,7 @@ public void failureMonitor() throws Exception {
       producer.get().get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).isSameAs(t);
+      assertThat(e).hasCauseThat().isSameAs(t);
       order.verify(monitor).failed(t);
     }
 
diff --git a/javatests/dagger/functional/producers/badexecutor/BadExecutorTest.java b/javatests/dagger/functional/producers/badexecutor/BadExecutorTest.java
index e0484df54..e8fb3c5d8 100644
--- a/javatests/dagger/functional/producers/badexecutor/BadExecutorTest.java
+++ b/javatests/dagger/functional/producers/badexecutor/BadExecutorTest.java
@@ -60,7 +60,7 @@ public void rejectNoArgMethod() throws Exception {
       component.noArgStr().get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).isInstanceOf(RejectedExecutionException.class);
+      assertThat(e).hasCauseThat().isInstanceOf(RejectedExecutionException.class);
     }
   }
 
@@ -70,7 +70,7 @@ public void rejectSingleArgMethod() throws Exception {
       component.singleArgInt().get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).isInstanceOf(RejectedExecutionException.class);
+      assertThat(e).hasCauseThat().isInstanceOf(RejectedExecutionException.class);
     }
   }
 
@@ -80,7 +80,7 @@ public void rejectSingleArgFromComponentDepMethod() throws Exception {
       component.singleArgBool().get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).isInstanceOf(RejectedExecutionException.class);
+      assertThat(e).hasCauseThat().isInstanceOf(RejectedExecutionException.class);
     }
   }
 
diff --git a/javatests/dagger/functional/producers/binds/BindsProducersTest.java b/javatests/dagger/functional/producers/binds/BindsProducersTest.java
index ef2c6e06c..a8c61fee4 100644
--- a/javatests/dagger/functional/producers/binds/BindsProducersTest.java
+++ b/javatests/dagger/functional/producers/binds/BindsProducersTest.java
@@ -18,7 +18,6 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import com.google.common.collect.ImmutableMap;
 import dagger.producers.Produced;
 import dagger.producers.Producer;
 import java.util.Map;
@@ -57,9 +56,8 @@ public void multibindings() throws Exception {
     assertThat(component.charSequences().get()).hasSize(5);
 
     assertThat(component.integerObjectMap().get())
-        .containsExactlyEntriesIn(
-            ImmutableMap.of(
-                123, "123-string", 456, "456-string", 789, "789-string", -1, "provision-string"));
+        .containsExactly(
+            123, "123-string", 456, "456-string", 789, "789-string", -1, "provision-string");
 
     Map<Integer, Producer<Object>> integerProducerOfObjectMap =
         component.integerProducerOfObjectMap().get();
@@ -70,12 +68,11 @@ public void multibindings() throws Exception {
     assertThat(integerProducerOfObjectMap.get(-1).get().get()).isEqualTo("provision-string");
 
     assertThat(component.integerProducedOfObjectMap().get())
-        .containsExactlyEntriesIn(
-            ImmutableMap.of(
-                123, Produced.successful("123-string"),
-                456, Produced.successful("456-string"),
-                789, Produced.successful("789-string"),
-                -1, Produced.successful("provision-string")));
+        .containsExactly(
+            123, Produced.successful("123-string"),
+            456, Produced.successful("456-string"),
+            789, Produced.successful("789-string"),
+            -1, Produced.successful("provision-string"));
 
     assertThat(component.qualifiedIntegerObjectMap().get()).hasSize(1);
   }
diff --git a/javatests/dagger/functional/producers/gwt/GwtIncompatiblesTest.java b/javatests/dagger/functional/producers/gwt/GwtIncompatiblesTest.java
index 0ca3dc417..d484c8caf 100644
--- a/javatests/dagger/functional/producers/gwt/GwtIncompatiblesTest.java
+++ b/javatests/dagger/functional/producers/gwt/GwtIncompatiblesTest.java
@@ -31,7 +31,7 @@ public void testIncompatible() {
   }
 
   private void assertGwtIncompatible(Class<?> clazz) {
-    boolean gwtIncompatible = clazz.getAnnotation(GwtIncompatible.class) != null;
+    boolean gwtIncompatible = clazz.isAnnotationPresent(GwtIncompatible.class);
     if (!gwtIncompatible) {
       throw new AssertionError(clazz.getCanonicalName() + " is not @GwtIncompatible");
     }
diff --git a/javatests/dagger/functional/producers/provisions/Provisions.java b/javatests/dagger/functional/producers/provisions/Provisions.java
index e9f32f5ec..16f333761 100644
--- a/javatests/dagger/functional/producers/provisions/Provisions.java
+++ b/javatests/dagger/functional/producers/provisions/Provisions.java
@@ -56,12 +56,12 @@
   static final class TestModule {
     @Produces @First static WrappedProducer<InjectedClass> firstProducer(
         Producer<InjectedClass> injectedClass) {
-      return new WrappedProducer<InjectedClass>(injectedClass);
+      return new WrappedProducer<>(injectedClass);
     }
 
     @Produces @Second static WrappedProducer<InjectedClass> secondProducer(
         Producer<InjectedClass> injectedClass) {
-      return new WrappedProducer<InjectedClass>(injectedClass);
+      return new WrappedProducer<>(injectedClass);
     }
 
     @Produces static Output output(
diff --git a/javatests/dagger/internal/codegen/DaggerModuleMethodSubject.java b/javatests/dagger/internal/codegen/DaggerModuleMethodSubject.java
index 18107c97a..c01da44c2 100644
--- a/javatests/dagger/internal/codegen/DaggerModuleMethodSubject.java
+++ b/javatests/dagger/internal/codegen/DaggerModuleMethodSubject.java
@@ -74,7 +74,7 @@ public DaggerModuleMethodSubject createSubject(FailureMetadata failureMetadata,
     }
   }
 
-  private ImmutableList.Builder<String> imports =
+  private final ImmutableList.Builder<String> imports =
       new ImmutableList.Builder<String>()
           .add(
               // explicitly import Module so it's not ambiguous with java.lang.Module
diff --git a/javatests/dagger/producers/ProducedTest.java b/javatests/dagger/producers/ProducedTest.java
index f344f9dc7..c2028f2f6 100644
--- a/javatests/dagger/producers/ProducedTest.java
+++ b/javatests/dagger/producers/ProducedTest.java
@@ -44,7 +44,7 @@
       Produced.failed(cause).get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).isSameAs(cause);
+      assertThat(e).hasCauseThat().isSameAs(cause);
     }
   }
 
diff --git a/javatests/dagger/producers/internal/AbstractProducesMethodProducerTest.java b/javatests/dagger/producers/internal/AbstractProducesMethodProducerTest.java
index 82258956d..ab09ace2e 100644
--- a/javatests/dagger/producers/internal/AbstractProducesMethodProducerTest.java
+++ b/javatests/dagger/producers/internal/AbstractProducesMethodProducerTest.java
@@ -101,7 +101,7 @@ public void monitor_failure() throws Exception {
       future.get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).isSameAs(t);
+      assertThat(e).hasCauseThat().isSameAs(t);
     }
     verify(monitor).failed(t);
     verifyNoMoreInteractions(monitor);
diff --git a/javatests/dagger/producers/internal/MapOfProducerProducerTest.java b/javatests/dagger/producers/internal/MapOfProducerProducerTest.java
index 3420ffcb6..11fa2d3d2 100644
--- a/javatests/dagger/producers/internal/MapOfProducerProducerTest.java
+++ b/javatests/dagger/producers/internal/MapOfProducerProducerTest.java
@@ -61,7 +61,7 @@ public void failingContributionDoesNotFailMap() throws Exception {
       map.get(42).get().get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).isSameAs(cause);
+      assertThat(e).hasCauseThat().isSameAs(cause);
     }
   }
 }
diff --git a/javatests/dagger/producers/internal/MapProducerTest.java b/javatests/dagger/producers/internal/MapProducerTest.java
index d94c4625b..72bd9eb9a 100644
--- a/javatests/dagger/producers/internal/MapProducerTest.java
+++ b/javatests/dagger/producers/internal/MapProducerTest.java
@@ -55,7 +55,7 @@ public void failingContribution() throws Exception {
       mapProducer.get().get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).isSameAs(cause);
+      assertThat(e).hasCauseThat().isSameAs(cause);
     }
   }
 }
diff --git a/javatests/dagger/producers/internal/ProducersTest.java b/javatests/dagger/producers/internal/ProducersTest.java
index b6a5480f5..1cfe12106 100644
--- a/javatests/dagger/producers/internal/ProducersTest.java
+++ b/javatests/dagger/producers/internal/ProducersTest.java
@@ -49,7 +49,8 @@
     ListenableFuture<String> future = Futures.immediateFailedFuture(new RuntimeException("monkey"));
     ListenableFuture<Produced<String>> producedFuture = Producers.createFutureProduced(future);
     assertThat(producedFuture.isDone()).isTrue();
-    assertThat(getProducedException(producedFuture.get()).getCause())
+    assertThat(getProducedException(producedFuture.get()))
+        .hasCauseThat()
         .hasMessageThat()
         .isEqualTo("monkey");
   }
@@ -68,7 +69,8 @@
     assertThat(producedFuture.isDone()).isFalse();
     future.cancel(false);
     assertThat(producedFuture.isCancelled()).isFalse();
-    assertThat(getProducedException(producedFuture.get()).getCause())
+    assertThat(getProducedException(producedFuture.get()))
+        .hasCauseThat()
         .isInstanceOf(CancellationException.class);
   }
 
@@ -96,7 +98,7 @@
       setFuture.get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).hasMessageThat().isEqualTo("monkey");
+      assertThat(e).hasCauseThat().hasMessageThat().isEqualTo("monkey");
     }
   }
 
@@ -122,7 +124,7 @@ public void allAsSet_failure() throws Exception {
       future.get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).hasMessageThat().isEqualTo("gorilla");
+      assertThat(e).hasCauseThat().hasMessageThat().isEqualTo("gorilla");
     }
   }
 
diff --git a/javatests/dagger/producers/internal/SetOfProducedProducerTest.java b/javatests/dagger/producers/internal/SetOfProducedProducerTest.java
index e189c0838..4dffd74e9 100644
--- a/javatests/dagger/producers/internal/SetOfProducedProducerTest.java
+++ b/javatests/dagger/producers/internal/SetOfProducedProducerTest.java
@@ -73,7 +73,8 @@ public void delegateNpe() throws Exception {
     Results<Integer> results = Results.create(producer.get().get());
     assertThat(results.successes).isEmpty();
     assertThat(results.failures).hasSize(1);
-    assertThat(Iterables.getOnlyElement(results.failures).getCause())
+    assertThat(Iterables.getOnlyElement(results.failures))
+        .hasCauseThat()
         .isInstanceOf(NullPointerException.class);
   }
 
@@ -86,7 +87,8 @@ public void delegateSetNpe() throws Exception {
     Results<Integer> results = Results.create(producer.get().get());
     assertThat(results.successes).isEmpty();
     assertThat(results.failures).hasSize(1);
-    assertThat(Iterables.getOnlyElement(results.failures).getCause())
+    assertThat(Iterables.getOnlyElement(results.failures))
+        .hasCauseThat()
         .isInstanceOf(NullPointerException.class);
   }
 
@@ -100,7 +102,8 @@ public void delegateElementNpe() throws Exception {
     Results<Integer> results = Results.create(producer.get().get());
     assertThat(results.successes).isEmpty();
     assertThat(results.failures).hasSize(1);
-    assertThat(Iterables.getOnlyElement(results.failures).getCause())
+    assertThat(Iterables.getOnlyElement(results.failures))
+        .hasCauseThat()
         .isInstanceOf(NullPointerException.class);
   }
 
@@ -115,7 +118,8 @@ public void oneOfDelegateElementNpe() throws Exception {
     Results<Integer> results = Results.create(producer.get().get());
     assertThat(results.successes).containsExactly(2, 5);
     assertThat(results.failures).hasSize(1);
-    assertThat(Iterables.getOnlyElement(results.failures).getCause())
+    assertThat(Iterables.getOnlyElement(results.failures))
+        .hasCauseThat()
         .isInstanceOf(NullPointerException.class);
   }
 
diff --git a/javatests/dagger/producers/internal/SetProducerTest.java b/javatests/dagger/producers/internal/SetProducerTest.java
index 0788242c4..2bfd51abe 100644
--- a/javatests/dagger/producers/internal/SetProducerTest.java
+++ b/javatests/dagger/producers/internal/SetProducerTest.java
@@ -56,7 +56,7 @@ public void delegateNpe() throws Exception {
       future.get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).isInstanceOf(NullPointerException.class);
+      assertThat(e).hasCauseThat().isInstanceOf(NullPointerException.class);
     }
   }
 
@@ -71,7 +71,7 @@ public void delegateSetNpe() throws Exception {
       future.get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).isInstanceOf(NullPointerException.class);
+      assertThat(e).hasCauseThat().isInstanceOf(NullPointerException.class);
     }
   }
 
@@ -88,7 +88,7 @@ public void delegateElementNpe() throws Exception {
       future.get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).isInstanceOf(NullPointerException.class);
+      assertThat(e).hasCauseThat().isInstanceOf(NullPointerException.class);
     }
   }
 }
