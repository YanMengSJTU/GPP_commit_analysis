diff --git a/compiler/src/it/functional-tests/src/main/java/test/cycle/LongCycle.java b/compiler/src/it/functional-tests/src/main/java/test/cycle/LongCycle.java
new file mode 100644
index 000000000..b4f61e096
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/cycle/LongCycle.java
@@ -0,0 +1,132 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.cycle;
+
+import dagger.Component;
+import javax.inject.Inject;
+import javax.inject.Provider;
+
+final class LongCycle {
+  static class Class1 { @Inject Class1(Class2 class2) {} }
+  static class Class2 { @Inject Class2(Class3 class3) {} }
+  static class Class3 { @Inject Class3(Class4 class4) {} }
+  static class Class4 { @Inject Class4(Class5 class5) {} }
+  static class Class5 { @Inject Class5(Class6 class6) {} }
+  static class Class6 { @Inject Class6(Class7 class7) {} }
+  static class Class7 { @Inject Class7(Class8 class8) {} }
+  static class Class8 { @Inject Class8(Class9 class9) {} }
+  static class Class9 { @Inject Class9(Class10 class10) {} }
+  static class Class10 { @Inject Class10(Class11 class11) {} }
+  static class Class11 { @Inject Class11(Class12 class12) {} }
+  static class Class12 { @Inject Class12(Class13 class13) {} }
+  static class Class13 { @Inject Class13(Class14 class14) {} }
+  static class Class14 { @Inject Class14(Class15 class15) {} }
+  static class Class15 { @Inject Class15(Class16 class16) {} }
+  static class Class16 { @Inject Class16(Class17 class17) {} }
+  static class Class17 { @Inject Class17(Class18 class18) {} }
+  static class Class18 { @Inject Class18(Class19 class19) {} }
+  static class Class19 { @Inject Class19(Class20 class20) {} }
+  static class Class20 { @Inject Class20(Class21 class21) {} }
+  static class Class21 { @Inject Class21(Class22 class22) {} }
+  static class Class22 { @Inject Class22(Class23 class23) {} }
+  static class Class23 { @Inject Class23(Class24 class24) {} }
+  static class Class24 { @Inject Class24(Class25 class25) {} }
+  static class Class25 { @Inject Class25(Class26 class26) {} }
+  static class Class26 { @Inject Class26(Class27 class27) {} }
+  static class Class27 { @Inject Class27(Class28 class28) {} }
+  static class Class28 { @Inject Class28(Class29 class29) {} }
+  static class Class29 { @Inject Class29(Class30 class30) {} }
+  static class Class30 { @Inject Class30(Class31 class31) {} }
+  static class Class31 { @Inject Class31(Class32 class32) {} }
+  static class Class32 { @Inject Class32(Class33 class33) {} }
+  static class Class33 { @Inject Class33(Class34 class34) {} }
+  static class Class34 { @Inject Class34(Class35 class35) {} }
+  static class Class35 { @Inject Class35(Class36 class36) {} }
+  static class Class36 { @Inject Class36(Class37 class37) {} }
+  static class Class37 { @Inject Class37(Class38 class38) {} }
+  static class Class38 { @Inject Class38(Class39 class39) {} }
+  static class Class39 { @Inject Class39(Class40 class40) {} }
+  static class Class40 { @Inject Class40(Class41 class41) {} }
+  static class Class41 { @Inject Class41(Class42 class42) {} }
+  static class Class42 { @Inject Class42(Class43 class43) {} }
+  static class Class43 { @Inject Class43(Class44 class44) {} }
+  static class Class44 { @Inject Class44(Class45 class45) {} }
+  static class Class45 { @Inject Class45(Class46 class46) {} }
+  static class Class46 { @Inject Class46(Class47 class47) {} }
+  static class Class47 { @Inject Class47(Class48 class48) {} }
+  static class Class48 { @Inject Class48(Class49 class49) {} }
+  static class Class49 { @Inject Class49(Class50 class50) {} }
+  static class Class50 { @Inject Class50(Class51 class51) {} }
+  static class Class51 { @Inject Class51(Class52 class52) {} }
+  static class Class52 { @Inject Class52(Class53 class53) {} }
+  static class Class53 { @Inject Class53(Class54 class54) {} }
+  static class Class54 { @Inject Class54(Class55 class55) {} }
+  static class Class55 { @Inject Class55(Class56 class56) {} }
+  static class Class56 { @Inject Class56(Class57 class57) {} }
+  static class Class57 { @Inject Class57(Class58 class58) {} }
+  static class Class58 { @Inject Class58(Class59 class59) {} }
+  static class Class59 { @Inject Class59(Class60 class60) {} }
+  static class Class60 { @Inject Class60(Class61 class61) {} }
+  static class Class61 { @Inject Class61(Class62 class62) {} }
+  static class Class62 { @Inject Class62(Class63 class63) {} }
+  static class Class63 { @Inject Class63(Class64 class64) {} }
+  static class Class64 { @Inject Class64(Class65 class65) {} }
+  static class Class65 { @Inject Class65(Class66 class66) {} }
+  static class Class66 { @Inject Class66(Class67 class67) {} }
+  static class Class67 { @Inject Class67(Class68 class68) {} }
+  static class Class68 { @Inject Class68(Class69 class69) {} }
+  static class Class69 { @Inject Class69(Class70 class70) {} }
+  static class Class70 { @Inject Class70(Class71 class71) {} }
+  static class Class71 { @Inject Class71(Class72 class72) {} }
+  static class Class72 { @Inject Class72(Class73 class73) {} }
+  static class Class73 { @Inject Class73(Class74 class74) {} }
+  static class Class74 { @Inject Class74(Class75 class75) {} }
+  static class Class75 { @Inject Class75(Class76 class76) {} }
+  static class Class76 { @Inject Class76(Class77 class77) {} }
+  static class Class77 { @Inject Class77(Class78 class78) {} }
+  static class Class78 { @Inject Class78(Class79 class79) {} }
+  static class Class79 { @Inject Class79(Class80 class80) {} }
+  static class Class80 { @Inject Class80(Class81 class81) {} }
+  static class Class81 { @Inject Class81(Class82 class82) {} }
+  static class Class82 { @Inject Class82(Class83 class83) {} }
+  static class Class83 { @Inject Class83(Class84 class84) {} }
+  static class Class84 { @Inject Class84(Class85 class85) {} }
+  static class Class85 { @Inject Class85(Class86 class86) {} }
+  static class Class86 { @Inject Class86(Class87 class87) {} }
+  static class Class87 { @Inject Class87(Class88 class88) {} }
+  static class Class88 { @Inject Class88(Class89 class89) {} }
+  static class Class89 { @Inject Class89(Class90 class90) {} }
+  static class Class90 { @Inject Class90(Class91 class91) {} }
+  static class Class91 { @Inject Class91(Class92 class92) {} }
+  static class Class92 { @Inject Class92(Class93 class93) {} }
+  static class Class93 { @Inject Class93(Class94 class94) {} }
+  static class Class94 { @Inject Class94(Class95 class95) {} }
+  static class Class95 { @Inject Class95(Class96 class96) {} }
+  static class Class96 { @Inject Class96(Class97 class97) {} }
+  static class Class97 { @Inject Class97(Class98 class98) {} }
+  static class Class98 { @Inject Class98(Class99 class99) {} }
+  static class Class99 { @Inject Class99(Class100 class100) {} }
+  static class Class100 { @Inject Class100(Class101 class101) {} }
+  static class Class101 { @Inject Class101(Provider<Class1> class1Provider) {} }
+
+  @SuppressWarnings("dependency-cycle")
+  @Component
+  interface LongCycleComponent {
+    Class1 class1();
+  }
+
+  private LongCycle() {}
+}
diff --git a/compiler/src/it/functional-tests/src/test/java/test/cycle/LongCycleTest.java b/compiler/src/it/functional-tests/src/test/java/test/cycle/LongCycleTest.java
new file mode 100644
index 000000000..e50eaee69
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/test/java/test/cycle/LongCycleTest.java
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.cycle;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+import test.cycle.LongCycle.LongCycleComponent;
+
+import static com.google.common.truth.Truth.assertThat;
+
+@RunWith(JUnit4.class)
+public class LongCycleTest {
+  
+  /**
+   * Tests a cycle long enough that the real factory is created in a separate initialize method from
+   * the delegate factory.
+   */
+  @Test
+  public void longCycle() {
+    LongCycleComponent longCycleComponent = DaggerLongCycle_LongCycleComponent.create();
+    assertThat(longCycleComponent.class1()).isNotNull();
+  }
+
+  /**
+   * Fails if {@link LongCycleComponent} doesn't have a long enough cycle to make sure the real
+   * factory is created in a separate method from the delegate factory.
+   */
+  @Test
+  public void longCycleHasMoreThanOneInitializeMethod() throws NoSuchMethodException {
+    DaggerLongCycle_LongCycleComponent.class
+        .getDeclaredMethod("initialize1", DaggerLongCycle_LongCycleComponent.Builder.class);
+  }
+}
diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index 52d327b30..d6bffaeaa 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -17,7 +17,6 @@
 
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
-import com.google.common.base.Function;
 import com.google.common.base.Joiner;
 import com.google.common.base.Optional;
 import com.google.common.base.Predicates;
@@ -61,6 +60,7 @@
 import dagger.producers.internal.SetProducer;
 import java.util.Collection;
 import java.util.EnumSet;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.List;
@@ -89,6 +89,9 @@
 import static com.google.common.base.CaseFormat.UPPER_CAMEL;
 import static com.google.common.base.Preconditions.checkState;
 import static com.google.common.collect.Iterables.getOnlyElement;
+import static dagger.internal.codegen.AbstractComponentWriter.InitializationState.DELEGATED;
+import static dagger.internal.codegen.AbstractComponentWriter.InitializationState.INITIALIZED;
+import static dagger.internal.codegen.AbstractComponentWriter.InitializationState.UNINITIALIZED;
 import static dagger.internal.codegen.Binding.bindingPackageFor;
 import static dagger.internal.codegen.ComponentGenerator.MemberSelect.staticMethodInvocationWithCast;
 import static dagger.internal.codegen.ComponentGenerator.MemberSelect.staticSelect;
@@ -126,14 +129,13 @@
   protected final Set<JavaWriter> javaWriters = new LinkedHashSet<>();
   protected final ClassName name;
   protected final BindingGraph graph;
+  private final Map<String, ProxyClassAndField> packageProxies = new HashMap<>();
+  private final Map<BindingKey, InitializationState> initializationStates = new HashMap<>();
   protected ClassWriter componentWriter;
-  private final Map<String, ProxyClassAndField> packageProxies = Maps.newHashMap();
   private ImmutableMap<BindingKey, MemberSelect> memberSelectSnippets;
   private ImmutableMap<ContributionBinding, MemberSelect> multibindingContributionSnippets;
   private ImmutableSet<BindingKey> enumBindingKeys;
   protected ConstructorWriter constructorWriter;
-  private final Set<BindingKey> bindingKeysWithInitializedProviders = Sets.newHashSet();
-  private final Set<BindingKey> bindingKeysWithDelegates = Sets.newHashSet();
   protected Optional<ClassName> builderName = Optional.absent();
 
   /**
@@ -224,9 +226,18 @@ protected MemberSelect getMemberSelect(BindingKey key) {
   protected Optional<MemberSelect> getMultibindingContributionSnippet(ContributionBinding binding) {
     return Optional.fromNullable(multibindingContributionSnippets.get(binding));
   }
+  
+  /**
+   * Returns the initialization state of the factory field for a binding key in this component.
+   */
+  protected InitializationState getInitializationState(BindingKey bindingKey) {
+    return initializationStates.containsKey(bindingKey)
+        ? initializationStates.get(bindingKey)
+        : UNINITIALIZED;
+  }
 
-  protected boolean isProviderInitialized(BindingKey bindingKey) {
-    return bindingKeysWithInitializedProviders.contains(bindingKey);
+  private void setInitializationState(BindingKey bindingKey, InitializationState state) {
+    initializationStates.put(bindingKey, state);
   }
 
   ImmutableSet<JavaWriter> write() {
@@ -677,9 +688,7 @@ private void initializeFrameworkTypes() {
       } else {
         constructorWriter.body().addSnippet("%s();", initializeMethod.name());
       }
-      bindingKeysWithDelegates.clear();
       for (BindingKey bindingKey : partitions.get(i)) {
-        Snippet memberSelectSnippet = getMemberSelectSnippet(bindingKey);
         ResolvedBindings resolvedBindings = graph.resolvedBindings().get(bindingKey);
         switch (bindingKey.kind()) {
           case CONTRIBUTION:
@@ -710,9 +719,7 @@ private void initializeFrameworkTypes() {
                             ? ClassName.fromClass(SetFactory.class)
                             : ClassName.fromClass(SetProducer.class),
                         Snippet.makeParametersSnippet(parameterSnippets.build()));
-                initializeMethod
-                    .body()
-                    .addSnippet("this.%s = %s;", memberSelectSnippet, initializeSetSnippet);
+                initializeMember(initializeMethod, bindingKey, initializeSetSnippet);
                 break;
               case MAP:
                 if (Sets.filter(bindings, Predicates.instanceOf(ProductionBinding.class))
@@ -734,14 +741,8 @@ private void initializeFrameworkTypes() {
                               initializeFactoryForProvisionBinding(provisionBinding));
                     }
                   }
-                  if (!provisionBindings.isEmpty()) {
-                    initializeMethod
-                        .body()
-                        .addSnippet(
-                            "this.%s = %s;",
-                            memberSelectSnippet,
-                            initializeMapBinding(provisionBindings));
-                  }
+                  initializeMember(
+                      initializeMethod, bindingKey, initializeMapBinding(provisionBindings));
                 } else {
                   // TODO(beder): Implement producer map bindings.
                   throw new IllegalStateException("producer map bindings not implemented yet");
@@ -752,24 +753,20 @@ private void initializeFrameworkTypes() {
                   ContributionBinding binding = Iterables.getOnlyElement(bindings);
                   if (binding instanceof ProvisionBinding) {
                     ProvisionBinding provisionBinding = (ProvisionBinding) binding;
-                    initializeDelegateFactories(binding, initializeMethod);
                     if (!provisionBinding.factoryCreationStrategy().equals(ENUM_INSTANCE)
                         || provisionBinding.scope().isPresent()) {
-                      initializeMethod
-                          .body()
-                          .addSnippet(
-                              "this.%s = %s;",
-                              memberSelectSnippet,
-                              initializeFactoryForProvisionBinding(provisionBinding));
+                      initializeDelegateFactories(binding, initializeMethod);
+                      initializeMember(
+                          initializeMethod,
+                          bindingKey,
+                          initializeFactoryForProvisionBinding(provisionBinding));
                     }
                   } else if (binding instanceof ProductionBinding) {
                     ProductionBinding productionBinding = (ProductionBinding) binding;
-                    initializeMethod
-                        .body()
-                        .addSnippet(
-                            "this.%s = %s;",
-                            memberSelectSnippet,
-                            initializeFactoryForProductionBinding(productionBinding));
+                    initializeMember(
+                        initializeMethod,
+                        bindingKey,
+                        initializeFactoryForProductionBinding(productionBinding));
                   } else {
                     throw new AssertionError();
                   }
@@ -784,55 +781,60 @@ private void initializeFrameworkTypes() {
                 Iterables.getOnlyElement(resolvedBindings.membersInjectionBindings());
             if (!binding.injectionStrategy().equals(MembersInjectionBinding.Strategy.NO_OP)) {
               initializeDelegateFactories(binding, initializeMethod);
-              initializeMethod
-                  .body()
-                  .addSnippet(
-                      "this.%s = %s;",
-                      memberSelectSnippet,
-                      initializeMembersInjectorForBinding(binding));
+              initializeMember(
+                  initializeMethod, bindingKey, initializeMembersInjectorForBinding(binding));
             }
             break;
           default:
             throw new AssertionError();
         }
-        bindingKeysWithInitializedProviders.add(bindingKey);
-      }
-      for (BindingKey key : bindingKeysWithDelegates) {
-        initializeMethod
-            .body()
-            .addSnippet(
-                "%s.setDelegatedProvider(%s);",
-                delegateFactoryVariableSnippet(key),
-                getMemberSelectSnippet(key));
       }
     }
   }
 
   private void initializeDelegateFactories(Binding binding, MethodWriter initializeMethod) {
     for (Collection<DependencyRequest> requestsForKey :
-        SourceFiles.indexDependenciesByUnresolvedKey(types, binding.dependencies())
-            .asMap()
-            .values()) {
+        indexDependenciesByUnresolvedKey(types, binding.dependencies()).asMap().values()) {
       BindingKey dependencyKey =
           Iterables.getOnlyElement(
-                  FluentIterable.from(requestsForKey)
-                      .transform(DependencyRequest.BINDING_KEY_FUNCTION)
-                      .toSet());
+              FluentIterable.from(requestsForKey)
+                  .transform(DependencyRequest.BINDING_KEY_FUNCTION)
+                  .toSet());
       if (!getMemberSelect(dependencyKey).staticMember()
-          && !isProviderInitialized(dependencyKey)
-          && !bindingKeysWithDelegates.contains(dependencyKey)) {
+          && getInitializationState(dependencyKey).equals(UNINITIALIZED)) {
         initializeMethod
             .body()
             .addSnippet(
-                "%s %s = new %s();",
-                ClassName.fromClass(DelegateFactory.class),
-                delegateFactoryVariableSnippet(dependencyKey),
+                "this.%s = new %s();",
+                getMemberSelectSnippet(dependencyKey),
                 ClassName.fromClass(DelegateFactory.class));
-        bindingKeysWithDelegates.add(dependencyKey);
+        setInitializationState(dependencyKey, DELEGATED);
       }
     }
   }
 
+  private void initializeMember(
+      MethodWriter initializeMethod, BindingKey bindingKey, Snippet initializationSnippet) {
+    Snippet memberSelect = getMemberSelectSnippet(bindingKey);
+    Snippet delegateFactoryVariable = delegateFactoryVariableSnippet(bindingKey);
+    if (getInitializationState(bindingKey).equals(DELEGATED)) {
+      initializeMethod
+          .body()
+          .addSnippet(
+              "%1$s %2$s = (%1$s) %3$s;",
+              ClassName.fromClass(DelegateFactory.class),
+              delegateFactoryVariable,
+              memberSelect);
+    }
+    initializeMethod.body().addSnippet("this.%s = %s;", memberSelect, initializationSnippet);
+    if (getInitializationState(bindingKey).equals(DELEGATED)) {
+      initializeMethod
+          .body()
+          .addSnippet("%s.setDelegatedProvider(%s);", delegateFactoryVariable, memberSelect);
+    }
+    setInitializationState(bindingKey, INITIALIZED);
+  }
+
   private Snippet delegateFactoryVariableSnippet(BindingKey key) {
     return Snippet.format("%sDelegate", getMemberSelectSnippet(key).toString().replace('.', '_'));
   }
@@ -1008,11 +1010,7 @@ private Snippet initializeMembersInjectorForBinding(MembersInjectionBinding bind
       }
       if (!requestedBindingKeys.isEmpty()) {
         BindingKey key = Iterables.getOnlyElement(requestedBindingKeys);
-        if (bindingKeysWithDelegates.contains(key)) {
-          parameters.add(delegateFactoryVariableSnippet(key));
-        } else {
-          parameters.add(getMemberSelect(key).getSnippetWithRawTypeCastFor(name));
-        }
+        parameters.add(getMemberSelect(key).getSnippetWithRawTypeCastFor(name));
       }
     }
     return parameters.build();
@@ -1093,4 +1091,18 @@ private Snippet initializeMapBinding(Set<ProvisionBinding> bindings) {
   private static String simpleVariableName(TypeElement typeElement) {
     return UPPER_CAMEL.to(LOWER_CAMEL, typeElement.getSimpleName().toString());
   }
+
+  /**
+   * Initialization state for a factory field.
+   */
+  enum InitializationState {
+    /** The field is {@code null}. */
+    UNINITIALIZED,
+
+    /** The field is set to a {@link DelegateFactory}. */
+    DELEGATED,
+
+    /** The field is set to an undelegated factory. */
+    INITIALIZED;
+  }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/SubcomponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/SubcomponentWriter.java
index 3aab845aa..8cb31b92d 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SubcomponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SubcomponentWriter.java
@@ -40,6 +40,7 @@
 
 import static com.google.common.base.CaseFormat.LOWER_CAMEL;
 import static com.google.common.base.Verify.verify;
+import static dagger.internal.codegen.AbstractComponentWriter.InitializationState.UNINITIALIZED;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PUBLIC;
@@ -72,8 +73,11 @@ private static String subcomponentSimpleName(BindingGraph subgraph) {
   }
   
   @Override
-  protected boolean isProviderInitialized(BindingKey bindingKey) {
-    return super.isProviderInitialized(bindingKey) || parent.isProviderInitialized(bindingKey);
+  protected InitializationState getInitializationState(BindingKey bindingKey) {
+    InitializationState initializationState = super.getInitializationState(bindingKey);
+    return initializationState.equals(UNINITIALIZED)
+        ? parent.getInitializationState(bindingKey)
+        : initializationState;
   }
 
   @Override
