diff --git a/java/dagger/internal/codegen/BindingGraphConverter.java b/java/dagger/internal/codegen/BindingGraphConverter.java
index 8adf293c2..28cf9a14f 100644
--- a/java/dagger/internal/codegen/BindingGraphConverter.java
+++ b/java/dagger/internal/codegen/BindingGraphConverter.java
@@ -219,8 +219,7 @@ private BindingNode bindingNode(
     }
 
     private MissingBinding missingBindingNode(ResolvedBindings dependencies) {
-      return BindingGraphProxies.missingBindingNode(
-          pathFromRootToAncestor(dependencies.resolvingComponent()), dependencies.key());
+      return BindingGraphProxies.missingBindingNode(componentPath(), dependencies.key());
     }
 
     private ComponentNode subcomponentNode(TypeMirror subcomponentBuilderType, BindingGraph graph) {
diff --git a/java/dagger/internal/codegen/BindingGraphFactory.java b/java/dagger/internal/codegen/BindingGraphFactory.java
index cdcac2eb2..51d4f2803 100644
--- a/java/dagger/internal/codegen/BindingGraphFactory.java
+++ b/java/dagger/internal/codegen/BindingGraphFactory.java
@@ -20,7 +20,6 @@
 import static com.google.auto.common.MoreTypes.isTypeOf;
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
-import static com.google.common.base.Verify.verify;
 import static com.google.common.collect.Iterables.isEmpty;
 import static dagger.internal.codegen.ComponentDescriptor.isComponentContributionMethod;
 import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
@@ -212,19 +211,9 @@ private BindingGraph create(
       }
     }
 
-    ImmutableMap<Key, ResolvedBindings> resolvedContributionBindingsMap =
-        requestResolver.getResolvedContributionBindings();
-    for (ResolvedBindings resolvedBindings : resolvedContributionBindingsMap.values()) {
-      verify(
-          resolvedBindings.resolvingComponent().equals(componentDescriptor.typeElement()),
-          "%s is not owned by %s",
-          resolvedBindings,
-          componentDescriptor);
-    }
-
     return BindingGraph.create(
         componentDescriptor,
-        resolvedContributionBindingsMap,
+        requestResolver.getResolvedContributionBindings(),
         requestResolver.getResolvedMembersInjectionBindings(),
         subgraphs.build(),
         requestResolver.getOwnedModules(),
@@ -399,7 +388,6 @@ ResolvedBindings lookUpBindings(Key requestKey) {
 
       return ResolvedBindings.forContributionBindings(
           requestKey,
-          componentDescriptor,
           indexBindingsByOwningComponent(requestKey, ImmutableSet.copyOf(bindings)),
           multibindingDeclarations,
           subcomponentDeclarations,
@@ -435,7 +423,7 @@ ResolvedBindings lookUpMembersInjectionBinding(Key requestKey) {
       return binding.isPresent()
           ? ResolvedBindings.forMembersInjectionBinding(
               requestKey, componentDescriptor, binding.get())
-          : ResolvedBindings.noBindings(requestKey, componentDescriptor);
+          : ResolvedBindings.noBindings(requestKey);
     }
 
     /**
@@ -882,9 +870,7 @@ void resolve(Key key) {
             && getLocalExplicitBindings(key).isEmpty()) {
           /* Cache the inherited parent component's bindings in case resolving at the parent found
            * bindings in some component between this one and the previously-resolved one. */
-          ResolvedBindings inheritedBindings =
-              getPreviouslyResolvedBindings(key).get().asInheritedIn(componentDescriptor);
-          resolvedContributionBindings.put(key, inheritedBindings);
+          resolvedContributionBindings.put(key, getPreviouslyResolvedBindings(key).get());
           return;
         }
       }
@@ -921,13 +907,9 @@ private void resolveDependencies(ResolvedBindings resolvedBindings) {
       if (parentResolver.isPresent()) {
         ImmutableMap<Key, ResolvedBindings> parentBindings =
             parentResolver.get().getResolvedContributionBindings();
-        Collection<ResolvedBindings> bindingsResolvedInParent =
-            Maps.difference(parentBindings, resolvedContributionBindings)
-                .entriesOnlyOnLeft()
-                .values();
-        for (ResolvedBindings resolvedInParent : bindingsResolvedInParent) {
-          builder.put(resolvedInParent.key(), resolvedInParent.asInheritedIn(componentDescriptor));
-        }
+        Map<Key, ResolvedBindings> bindingsResolvedInParent =
+            Maps.difference(parentBindings, resolvedContributionBindings).entriesOnlyOnLeft();
+        builder.putAll(bindingsResolvedInParent);
       }
       return builder.build();
     }
diff --git a/java/dagger/internal/codegen/ResolvedBindings.java b/java/dagger/internal/codegen/ResolvedBindings.java
index 295c3ea6a..d9d11a296 100644
--- a/java/dagger/internal/codegen/ResolvedBindings.java
+++ b/java/dagger/internal/codegen/ResolvedBindings.java
@@ -52,20 +52,15 @@
    */
   abstract Key key();
 
-  /** The component in which these bindings were resolved. */
-  abstract TypeElement resolvingComponent();
-
   /**
-   * The contribution bindings for {@link #key()} that were resolved in {@link
-   * #resolvingComponent()} or its ancestor components, indexed by the component that owns the
-   * binding.
+   * The {@link ContributionBinding}s for {@link #key()} indexed by the component that owns the
+   * binding. Each key in the multimap is a part of the same component ancestry.
    */
   abstract ImmutableSetMultimap<TypeElement, ContributionBinding> allContributionBindings();
 
   /**
-   * The members-injection bindings for {@link #key()} that were resolved in {@link
-   * #resolvingComponent()} or its ancestor components, indexed by the component that owns the
-   * binding.
+   * The {@link MembersInjectionBinding}s for {@link #key()} indexed by the component that owns the
+   * binding.  Each key in the map is a part of the same component ancestry.
    */
   abstract ImmutableMap<TypeElement, MembersInjectionBinding> allMembersInjectionBindings();
 
@@ -164,14 +159,12 @@ final TypeElement owningComponent(ContributionBinding binding) {
   /** Creates a {@link ResolvedBindings} for contribution bindings. */
   static ResolvedBindings forContributionBindings(
       Key key,
-      ComponentDescriptor owningComponent,
       Multimap<TypeElement, ContributionBinding> contributionBindings,
       Iterable<MultibindingDeclaration> multibindings,
       Iterable<SubcomponentDeclaration> subcomponentDeclarations,
       Iterable<OptionalBindingDeclaration> optionalBindingDeclarations) {
     return new AutoValue_ResolvedBindings(
         key,
-        owningComponent.typeElement(),
         ImmutableSetMultimap.copyOf(contributionBindings),
         ImmutableMap.of(),
         ImmutableSet.copyOf(multibindings),
@@ -188,7 +181,6 @@ static ResolvedBindings forMembersInjectionBinding(
       MembersInjectionBinding ownedMembersInjectionBinding) {
     return new AutoValue_ResolvedBindings(
         key,
-        owningComponent.typeElement(),
         ImmutableSetMultimap.of(),
         ImmutableMap.of(owningComponent.typeElement(), ownedMembersInjectionBinding),
         ImmutableSet.of(),
@@ -199,10 +191,9 @@ static ResolvedBindings forMembersInjectionBinding(
   /**
    * Creates a {@link ResolvedBindings} appropriate for when there are no bindings for the key.
    */
-  static ResolvedBindings noBindings(Key key, ComponentDescriptor owningComponent) {
+  static ResolvedBindings noBindings(Key key) {
     return new AutoValue_ResolvedBindings(
         key,
-        owningComponent.typeElement(),
         ImmutableSetMultimap.of(),
         ImmutableMap.of(),
         ImmutableSet.of(),
@@ -210,21 +201,6 @@ static ResolvedBindings noBindings(Key key, ComponentDescriptor owningComponent)
         ImmutableSet.of());
   }
 
-  /**
-   * Returns a {@code ResolvedBindings} with the same {@link #key()} and {@link #allBindings()} as
-   * this one, but whose {@link #resolvingComponent()} is changed.
-   */
-  ResolvedBindings asInheritedIn(ComponentDescriptor resolvingComponent) {
-    return new AutoValue_ResolvedBindings(
-        key(),
-        resolvingComponent.typeElement(),
-        allContributionBindings(),
-        allMembersInjectionBindings(),
-        multibindingDeclarations(),
-        subcomponentDeclarations(),
-        optionalBindingDeclarations());
-  }
-
   /**
    * {@code true} if this is a multibinding contribution.
    */
