diff --git a/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java b/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
index 104fb4956..bcf108701 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
@@ -121,8 +121,8 @@
   static final String PROVIDES_METHOD_WITH_SAME_NAME =
       "Cannot have more than one @Provides method with the same name in a single module";
   
-  static final String UNWRAP_MAPKEY =
-      "unwrapValue = true is not yet supported";
+  static final String WRAP_MAPKEY =
+      "unwrapValue = false is not yet supported";
   
   /* collection binding errors */
   static final String NON_SETBINDING =
diff --git a/compiler/src/main/java/dagger/internal/codegen/MapKeyValidator.java b/compiler/src/main/java/dagger/internal/codegen/MapKeyValidator.java
index ae03651bf..7835f6770 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MapKeyValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MapKeyValidator.java
@@ -18,7 +18,7 @@
 import dagger.MapKey;
 import javax.lang.model.element.Element;
 
-import static dagger.internal.codegen.ErrorMessages.UNWRAP_MAPKEY;
+import static dagger.internal.codegen.ErrorMessages.WRAP_MAPKEY;
 
 /**
  * A {@link Validator} for {@link MapKey} Annotation.
@@ -32,8 +32,8 @@
     ValidationReport.Builder<Element> builder =
         ValidationReport.Builder.about(element);
     MapKey mapkey = element.getAnnotation(MapKey.class);
-    if (mapkey.unwrapValue()) {
-      builder.addItem(UNWRAP_MAPKEY, element);
+    if (!mapkey.unwrapValue()) {
+      builder.addItem(WRAP_MAPKEY, element);
     }
     return builder.build();
   }
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index cb423f11a..256727a7e 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -68,7 +68,7 @@ public void mapBindingsWithEnumKey() {
         "import java.lang.annotation.Retention;",
         "import static java.lang.annotation.RetentionPolicy.RUNTIME;",
         "",
-        "@MapKey(unwrapValue = false)",
+        "@MapKey(unwrapValue = true)",
         "@Retention(RUNTIME)",
         "public @interface PathKey {",
         "  PathEnum value();",
@@ -241,7 +241,7 @@ public void mapBindingsWithStringKey() {
         "import java.lang.annotation.Retention;",
         "import static java.lang.annotation.RetentionPolicy.RUNTIME;",
         "",
-        "@MapKey(unwrapValue = false)",
+        "@MapKey(unwrapValue = true)",
         "@Retention(RUNTIME)",
         "public @interface StringKey {",
         "  String value();",
diff --git a/core/src/main/java/dagger/MapKey.java b/core/src/main/java/dagger/MapKey.java
index 9401b04c9..5657245d0 100644
--- a/core/src/main/java/dagger/MapKey.java
+++ b/core/src/main/java/dagger/MapKey.java
@@ -44,10 +44,10 @@
 @Retention(RUNTIME)
 public @interface MapKey {
   /**
-   * if {@code unwrapValue} is true, then the whole annotation will be the type and annotation
-   * instances will be the keys. If {@code unwrapValue} is false, the value() type of key type
-   * annotation will be the key type for mapbinding and the value instances will be the keys.
-   * Currently only support {@code unwrapValue} to be false.
+   * if {@code unwrapValue} is false, then the whole annotation will be the type and annotation
+   * instances will be the keys. If {@code unwrapValue} is true, the value() type of key type
+   * annotation will be the key type for injected map and the value instances will be the keys.
+   * Currently only support {@code unwrapValue} to be true.
    */
   boolean unwrapValue();
 }
