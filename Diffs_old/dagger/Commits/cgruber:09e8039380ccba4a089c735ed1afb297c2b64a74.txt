diff --git a/compiler/src/test/java/dagger/internal/codegen/AnnotationMirrorsTest.java b/compiler/src/test/java/dagger/internal/codegen/AnnotationMirrorsTest.java
index e5faa0842..55b058594 100644
--- a/compiler/src/test/java/dagger/internal/codegen/AnnotationMirrorsTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/AnnotationMirrorsTest.java
@@ -28,7 +28,7 @@
 import org.junit.runners.JUnit4;
 
 import static com.google.common.collect.Iterables.getOnlyElement;
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static dagger.internal.codegen.AnnotationMirrorsTest.SimpleEnum.BLAH;
 import static dagger.internal.codegen.AnnotationMirrorsTest.SimpleEnum.FOO;
 
@@ -157,7 +157,7 @@
   @Stringy("foo") class StringySet {}
 
   @Test public void testGetDefaultValuesUnset() {
-    ASSERT.that(annotationOn(StringyUnset.class).getElementValues()).isEmpty();
+    assert_().that(annotationOn(StringyUnset.class).getElementValues()).isEmpty();
     Iterable<AnnotationValue> values = AnnotationMirrors.getAnnotationValuesWithDefaults(
         annotationOn(StringyUnset.class));
     String value = getOnlyElement(values).accept(new SimpleAnnotationValueVisitor6<String, Void>() {
@@ -165,7 +165,7 @@
             return value;
           }
         }, null);
-    ASSERT.that(value).isEqualTo("default");
+    assert_().that(value).isEqualTo("default");
   }
 
   @Test public void testGetDefaultValuesSet() {
@@ -176,7 +176,7 @@
             return value;
           }
         }, null);
-    ASSERT.that(value).isEqualTo("foo");
+    assert_().that(value).isEqualTo("foo");
   }
 
   private AnnotationMirror annotationOn(Class<?> clazz) {
diff --git a/compiler/src/test/java/dagger/internal/codegen/ClassNameTest.java b/compiler/src/test/java/dagger/internal/codegen/ClassNameTest.java
index f3dcbec74..d61fe4340 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ClassNameTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ClassNameTest.java
@@ -27,7 +27,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static org.junit.Assert.fail;
 
 @RunWith(JUnit4.class)
@@ -35,7 +35,7 @@
   @Rule public CompilationRule compilationRule = new CompilationRule();
 
   @Test public void bestGuessForString_simpleClass() {
-    ASSERT.that(ClassName.bestGuessFromString(String.class.getName()))
+    assert_().that(ClassName.bestGuessFromString(String.class.getName()))
         .isEqualTo(ClassName.create("java.lang", "String"));
   }
 
@@ -44,20 +44,20 @@
   }
 
   @Test public void bestGuessForString_nestedClass() {
-    ASSERT.that(ClassName.bestGuessFromString(Map.Entry.class.getCanonicalName()))
+    assert_().that(ClassName.bestGuessFromString(Map.Entry.class.getCanonicalName()))
         .isEqualTo(ClassName.create("java.util", ImmutableList.of("Map"), "Entry"));
-    ASSERT.that(ClassName.bestGuessFromString(OuterClass.InnerClass.class.getCanonicalName()))
+    assert_().that(ClassName.bestGuessFromString(OuterClass.InnerClass.class.getCanonicalName()))
         .isEqualTo(
             ClassName.create("dagger.internal.codegen",
                 ImmutableList.of("ClassNameTest", "OuterClass"), "InnerClass"));
   }
 
   @Test public void bestGuessForString_defaultPackage() {
-    ASSERT.that(ClassName.bestGuessFromString("SomeClass"))
+    assert_().that(ClassName.bestGuessFromString("SomeClass"))
         .isEqualTo(ClassName.create("", "SomeClass"));
-    ASSERT.that(ClassName.bestGuessFromString("SomeClass.Nested"))
+    assert_().that(ClassName.bestGuessFromString("SomeClass.Nested"))
         .isEqualTo(ClassName.create("", ImmutableList.of("SomeClass"), "Nested"));
-    ASSERT.that(ClassName.bestGuessFromString("SomeClass.Nested.EvenMore"))
+    assert_().that(ClassName.bestGuessFromString("SomeClass.Nested.EvenMore"))
         .isEqualTo(ClassName.create("", ImmutableList.of("SomeClass", "Nested"), "EvenMore"));
   }
 
@@ -79,7 +79,7 @@
   @Test public void classNameFromTypeElement() {
     Elements elements = compilationRule.getElements();
     TypeElement element = elements.getTypeElement(Object.class.getCanonicalName());
-    ASSERT.that(ClassName.fromTypeElement(element).canonicalName())
+    assert_().that(ClassName.fromTypeElement(element).canonicalName())
         .isEqualTo("java.lang.Object");
   }
 
@@ -88,7 +88,7 @@
     TypeElement element = elements.getTypeElement(ClassNameTest.class.getCanonicalName());
     ClassName className = ClassName.fromTypeElement(element);
     ClassName peerName = className.peerNamed("Foo");
-    ASSERT.that(peerName.canonicalName())
+    assert_().that(peerName.canonicalName())
         .isEqualTo("dagger.internal.codegen.Foo");
   }
 
@@ -97,7 +97,7 @@
     TypeElement element = elements.getTypeElement(OuterClass.class.getCanonicalName());
     ClassName className = ClassName.fromTypeElement(element);
     ClassName peerName = className.peerNamed("Foo");
-    ASSERT.that(peerName.canonicalName())
+    assert_().that(peerName.canonicalName())
         .isEqualTo("dagger.internal.codegen.ClassNameTest.Foo");
   }
 
@@ -106,7 +106,7 @@
     TypeElement element = elements.getTypeElement(InnerClass.class.getCanonicalName());
     ClassName className = ClassName.fromTypeElement(element);
     ClassName peerName = className.peerNamed("Foo");
-    ASSERT.that(peerName.canonicalName())
+    assert_().that(peerName.canonicalName())
         .isEqualTo("dagger.internal.codegen.ClassNameTest.OuterClass.Foo");
   }
 }
diff --git a/compiler/src/test/java/dagger/internal/codegen/ElementUtilTest.java b/compiler/src/test/java/dagger/internal/codegen/ElementUtilTest.java
index 3d7264528..2f638f21c 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ElementUtilTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ElementUtilTest.java
@@ -26,7 +26,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static org.junit.Assert.fail;
 
 @RunWith(JUnit4.class)
@@ -36,7 +36,7 @@
   @Test public void asTypeElement() {
     Element typeElement =
         compilation.getElements().getTypeElement(String.class.getCanonicalName());
-    ASSERT.that(MoreElements.asType(typeElement)).isEqualTo(typeElement);
+    assert_().that(MoreElements.asType(typeElement)).isEqualTo(typeElement);
   }
 
   @Test public void asTypeElement_notATypeElement() {
diff --git a/compiler/src/test/java/dagger/internal/codegen/KeyTest.java b/compiler/src/test/java/dagger/internal/codegen/KeyTest.java
index 5ef33933f..2946e5ffd 100644
--- a/compiler/src/test/java/dagger/internal/codegen/KeyTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/KeyTest.java
@@ -40,7 +40,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static dagger.Provides.Type.SET;
 import static dagger.Provides.Type.SET_VALUES;
 
@@ -66,7 +66,7 @@
         compilationRule.getElements().getTypeElement(InjectedClass.class.getCanonicalName());
     ExecutableElement constructor =
         Iterables.getOnlyElement(ElementFilter.constructorsIn(typeElement.getEnclosedElements()));
-    ASSERT.that(keyFactory.forInjectConstructor(constructor))
+    assert_().that(keyFactory.forInjectConstructor(constructor))
         .isEqualTo(keyFactory.forType(typeElement.asType()));
   }
 
@@ -81,7 +81,7 @@
         elements.getTypeElement(ProvidesMethodModule.class.getCanonicalName());
     ExecutableElement providesMethod =
         Iterables.getOnlyElement(ElementFilter.methodsIn(moduleElement.getEnclosedElements()));
-    ASSERT.that(keyFactory.forProvidesMethod(providesMethod))
+    assert_().that(keyFactory.forProvidesMethod(providesMethod))
         .isEqualTo(keyFactory.forType(stringType));
   }
 
@@ -101,9 +101,9 @@
     ExecutableElement providesMethod =
         Iterables.getOnlyElement(ElementFilter.methodsIn(moduleElement.getEnclosedElements()));
     Key key = keyFactory.forProvidesMethod(providesMethod);
-    ASSERT.that(MoreTypes.equivalence().wrap(key.qualifier().get().getAnnotationType()))
+    assert_().that(MoreTypes.equivalence().wrap(key.qualifier().get().getAnnotationType()))
         .isEqualTo(MoreTypes.equivalence().wrap(qualifierElement.asType()));
-    ASSERT.that(key.wrappedType()).isEqualTo(MoreTypes.equivalence().wrap(stringType));
+    assert_().that(key.wrappedType()).isEqualTo(MoreTypes.equivalence().wrap(stringType));
   }
 
   @Test public void qualifiedKeyEquivalents() {
@@ -121,7 +121,7 @@
     AnnotationMirror qualifier = Iterables.getOnlyElement(injectionField.getAnnotationMirrors());
     Key injectionKey = keyFactory.forQualifiedType(Optional.<AnnotationMirror>of(qualifier), type);
 
-    ASSERT.that(provisionKey).isEqualTo(injectionKey);
+    assert_().that(provisionKey).isEqualTo(injectionKey);
   }
 
   @Module(library = true)
@@ -152,7 +152,7 @@ String provideQualifiedString() {
         elements.getTypeElement(SetProvidesMethodsModule.class.getCanonicalName());
     for (ExecutableElement providesMethod
         : ElementFilter.methodsIn(moduleElement.getEnclosedElements())) {
-      ASSERT.that(keyFactory.forProvidesMethod(providesMethod))
+      assert_().that(keyFactory.forProvidesMethod(providesMethod))
           .isEqualTo(keyFactory.forType(setOfStringsType));
     }
   }
@@ -179,13 +179,13 @@ String provideQualifiedString() {
 
     // TODO(user): Truth subject for TypeMirror and TypeElement
     TypeMirror intType = methods.get(0).getReturnType();
-    ASSERT.that(intType.getKind().isPrimitive()).isTrue();
+    assert_().that(intType.getKind().isPrimitive()).isTrue();
     TypeMirror integerType = methods.get(1).getReturnType();
-    ASSERT.that(integerType.getKind().isPrimitive()).isFalse();
-    ASSERT.that(types.isSameType(intType, integerType)).named("type equality").isFalse();
+    assert_().that(integerType.getKind().isPrimitive()).isFalse();
+    assert_().that(types.isSameType(intType, integerType)).named("type equality").isFalse();
 
     Key intKey = keyFactory.forType(intType);
     Key integerKey = keyFactory.forType(integerType);
-    ASSERT.that(intKey).isEqualTo(integerKey);
+    assert_().that(intKey).isEqualTo(integerKey);
   }
 }
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 1958b3b24..cb423f11a 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -22,7 +22,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 
 @RunWith(JUnit4.class)
@@ -186,7 +186,7 @@ public void mapBindingsWithEnumKey() {
                 "  }",
                 "}",
                 "");
-    ASSERT.about(javaSources())
+    assert_().about(javaSources())
         .that(ImmutableList.of(mapModuleOneFile,
             mapModuleTwoFile,
             enumKeyFile,
@@ -352,7 +352,7 @@ public void mapBindingsWithStringKey() {
                 "  }",
                 "}");
 
-    ASSERT.about(javaSources())
+    assert_().about(javaSources())
         .that(ImmutableList.of(mapModuleOneFile,
             mapModuleTwoFile,
             stringKeyFile,
diff --git a/compiler/src/test/java/dagger/internal/codegen/ModuleProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ModuleProcessorTest.java
index c48282c42..76eee3c6f 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ModuleProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ModuleProcessorTest.java
@@ -22,7 +22,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static dagger.internal.codegen.ErrorMessages.PROVIDES_METHOD_ABSTRACT;
@@ -52,7 +52,7 @@
         "    return \"\";",
         "  }",
         "}");
-    ASSERT.about(javaSource()).that(moduleFile)
+    assert_().about(javaSource()).that(moduleFile)
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(PROVIDES_METHOD_NOT_IN_MODULE);
@@ -69,7 +69,7 @@
         "abstract class TestModule {",
         "  @Provides abstract String provideString();",
         "}");
-    ASSERT.about(javaSource()).that(moduleFile)
+    assert_().about(javaSource()).that(moduleFile)
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(PROVIDES_METHOD_ABSTRACT);
@@ -88,7 +88,7 @@
         "    return \"\";",
         "  }",
         "}");
-    ASSERT.about(javaSource()).that(moduleFile)
+    assert_().about(javaSource()).that(moduleFile)
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(PROVIDES_METHOD_PRIVATE);
@@ -107,7 +107,7 @@
         "    return \"\";",
         "  }",
         "}");
-    ASSERT.about(javaSource()).that(moduleFile)
+    assert_().about(javaSource()).that(moduleFile)
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(PROVIDES_METHOD_STATIC);
@@ -124,7 +124,7 @@
         "final class TestModule {",
         "  @Provides void provideNothing() {}",
         "}");
-    ASSERT.about(javaSource()).that(moduleFile)
+    assert_().about(javaSource()).that(moduleFile)
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(PROVIDES_METHOD_MUST_RETURN_A_VALUE);
@@ -143,7 +143,7 @@
         "    return \"\";",
         "  }",
         "}");
-    ASSERT.about(javaSource()).that(moduleFile)
+    assert_().about(javaSource()).that(moduleFile)
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(PROVIDES_METHOD_TYPE_PARAMETER);
@@ -166,7 +166,7 @@
         "    return null;",
         "  }",
         "}");
-    ASSERT.about(javaSource()).that(moduleFile)
+    assert_().about(javaSource()).that(moduleFile)
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(PROVIDES_METHOD_RETURN_TYPE);
@@ -189,7 +189,7 @@
         "    return null;",
         "  }",
         "}");
-    ASSERT.about(javaSource()).that(moduleFile)
+    assert_().about(javaSource()).that(moduleFile)
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(PROVIDES_METHOD_SET_VALUES_RAW_SET);
@@ -212,7 +212,7 @@
         "    return null;",
         "  }",
         "}");
-    ASSERT.about(javaSource()).that(moduleFile)
+    assert_().about(javaSource()).that(moduleFile)
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(PROVIDES_METHOD_SET_VALUES_RETURN_SET);
@@ -250,7 +250,7 @@
         "    return module.provideString();",
         "  }",
         "}");
-    ASSERT.about(javaSource()).that(moduleFile)
+    assert_().about(javaSource()).that(moduleFile)
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(factoryFile);
@@ -324,7 +324,7 @@
         "    return module.provideObjects(aProvider.get(), bProvider.get());",
         "  }",
         "}");
-    ASSERT.about(javaSources()).that(ImmutableList.of(moduleFile, QUALIFIER_A, QUALIFIER_B))
+    assert_().about(javaSources()).that(ImmutableList.of(moduleFile, QUALIFIER_A, QUALIFIER_B))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(listFactoryFile);
@@ -366,7 +366,7 @@
         "    return Collections.singleton(module.provideString());",
         "  }",
         "}");
-    ASSERT.about(javaSource()).that(moduleFile)
+    assert_().about(javaSource()).that(moduleFile)
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(factoryFile);
@@ -408,7 +408,7 @@
         "    return module.provideStrings();",
         "  }",
         "}");
-    ASSERT.about(javaSource()).that(moduleFile)
+    assert_().about(javaSource()).that(moduleFile)
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(factoryFile);
@@ -431,7 +431,7 @@
         "    return \"\";",
         "  }",
         "}");
-    ASSERT.about(javaSource()).that(moduleFile)
+    assert_().about(javaSource()).that(moduleFile)
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(PROVIDES_METHOD_WITH_SAME_NAME).in(moduleFile).onLine(8)
@@ -474,7 +474,7 @@ public void providedTypes() {
         "    return null;",
         "  }",
         "}");
-    ASSERT.about(javaSource()).that(moduleFile)
+    assert_().about(javaSource()).that(moduleFile)
         .processedWith(new ComponentProcessor())
         .compilesWithoutError();
   }
diff --git a/compiler/src/test/java/dagger/internal/codegen/writer/TypeNamesTest.java b/compiler/src/test/java/dagger/internal/codegen/writer/TypeNamesTest.java
index 6830e62f5..c637b7ced 100644
--- a/compiler/src/test/java/dagger/internal/codegen/writer/TypeNamesTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/writer/TypeNamesTest.java
@@ -12,7 +12,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 
 @RunWith(JUnit4.class)
 public class TypeNamesTest {
@@ -28,11 +28,11 @@ private TypeMirror getType(Class<?> clazz) {
 
   @Test
   public void forTypeMirror_basicTypes() {
-    ASSERT.that(TypeNames.forTypeMirror(getType(Object.class)))
+    assert_().that(TypeNames.forTypeMirror(getType(Object.class)))
         .isEqualTo(ClassName.fromClass(Object.class));
-    ASSERT.that(TypeNames.forTypeMirror(getType(Charset.class)))
+    assert_().that(TypeNames.forTypeMirror(getType(Charset.class)))
         .isEqualTo(ClassName.fromClass(Charset.class));
-    ASSERT.that(TypeNames.forTypeMirror(getType(TypeNamesTest.class)))
+    assert_().that(TypeNames.forTypeMirror(getType(TypeNamesTest.class)))
         .isEqualTo(ClassName.fromClass(TypeNamesTest.class));
   }
 
@@ -40,45 +40,45 @@ public void forTypeMirror_basicTypes() {
   public void forTypeMirror_parameterizedType() {
     DeclaredType setType =
         compilation.getTypes().getDeclaredType(getElement(Set.class), getType(Object.class));
-    ASSERT.that(TypeNames.forTypeMirror(setType))
+    assert_().that(TypeNames.forTypeMirror(setType))
         .isEqualTo(ParameterizedTypeName.create(Set.class, ClassName.fromClass(Object.class)));
   }
 
   @Test
   public void forTypeMirror_primitive() {
-    ASSERT.that(TypeNames.forTypeMirror(compilation.getTypes().getPrimitiveType(TypeKind.BOOLEAN)))
+    assert_().that(TypeNames.forTypeMirror(compilation.getTypes().getPrimitiveType(TypeKind.BOOLEAN)))
         .isEqualTo(PrimitiveName.BOOLEAN);
-    ASSERT.that(TypeNames.forTypeMirror(compilation.getTypes().getPrimitiveType(TypeKind.BYTE)))
+    assert_().that(TypeNames.forTypeMirror(compilation.getTypes().getPrimitiveType(TypeKind.BYTE)))
         .isEqualTo(PrimitiveName.BYTE);
-    ASSERT.that(TypeNames.forTypeMirror(compilation.getTypes().getPrimitiveType(TypeKind.SHORT)))
+    assert_().that(TypeNames.forTypeMirror(compilation.getTypes().getPrimitiveType(TypeKind.SHORT)))
         .isEqualTo(PrimitiveName.SHORT);
-    ASSERT.that(TypeNames.forTypeMirror(compilation.getTypes().getPrimitiveType(TypeKind.INT)))
+    assert_().that(TypeNames.forTypeMirror(compilation.getTypes().getPrimitiveType(TypeKind.INT)))
         .isEqualTo(PrimitiveName.INT);
-    ASSERT.that(TypeNames.forTypeMirror(compilation.getTypes().getPrimitiveType(TypeKind.LONG)))
+    assert_().that(TypeNames.forTypeMirror(compilation.getTypes().getPrimitiveType(TypeKind.LONG)))
         .isEqualTo(PrimitiveName.LONG);
-    ASSERT.that(TypeNames.forTypeMirror(compilation.getTypes().getPrimitiveType(TypeKind.CHAR)))
+    assert_().that(TypeNames.forTypeMirror(compilation.getTypes().getPrimitiveType(TypeKind.CHAR)))
         .isEqualTo(PrimitiveName.CHAR);
-    ASSERT.that(TypeNames.forTypeMirror(compilation.getTypes().getPrimitiveType(TypeKind.FLOAT)))
+    assert_().that(TypeNames.forTypeMirror(compilation.getTypes().getPrimitiveType(TypeKind.FLOAT)))
         .isEqualTo(PrimitiveName.FLOAT);
-    ASSERT.that(TypeNames.forTypeMirror(compilation.getTypes().getPrimitiveType(TypeKind.DOUBLE)))
+    assert_().that(TypeNames.forTypeMirror(compilation.getTypes().getPrimitiveType(TypeKind.DOUBLE)))
         .isEqualTo(PrimitiveName.DOUBLE);
   }
 
   @Test
   public void forTypeMirror_arrays() {
-    ASSERT.that(TypeNames.forTypeMirror(compilation.getTypes().getArrayType(getType(Object.class))))
+    assert_().that(TypeNames.forTypeMirror(compilation.getTypes().getArrayType(getType(Object.class))))
         .isEqualTo(new ArrayTypeName(ClassName.fromClass(Object.class)));
   }
 
   @Test
   public void forTypeMirror_void() {
-    ASSERT.that(TypeNames.forTypeMirror(compilation.getTypes().getNoType(TypeKind.VOID)))
+    assert_().that(TypeNames.forTypeMirror(compilation.getTypes().getNoType(TypeKind.VOID)))
         .isEqualTo(VoidName.VOID);
   }
 
   @Test
   public void forTypeMirror_null() {
-    ASSERT.that(TypeNames.forTypeMirror(compilation.getTypes().getNullType()))
+    assert_().that(TypeNames.forTypeMirror(compilation.getTypes().getNullType()))
         .isEqualTo(NullName.NULL);
   }
 }
diff --git a/compiler/src/test/java/dagger/tests/integration/codegen/InjectAdapterGenerationTest.java b/compiler/src/test/java/dagger/tests/integration/codegen/InjectAdapterGenerationTest.java
index 3e7cc064e..8dacf9592 100644
--- a/compiler/src/test/java/dagger/tests/integration/codegen/InjectAdapterGenerationTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/codegen/InjectAdapterGenerationTest.java
@@ -23,7 +23,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static dagger.tests.integration.ProcessorTestUtils.daggerProcessors;
 
@@ -71,7 +71,7 @@
             "  }",
             "}"));
 
-    ASSERT.about(javaSource()).that(sourceFile).processedWith(daggerProcessors())
+    assert_().about(javaSource()).that(sourceFile).processedWith(daggerProcessors())
         .compilesWithoutError().and()
         .generatesSources(expectedModuleAdapter, expectedInjectAdapter);
 
diff --git a/compiler/src/test/java/dagger/tests/integration/codegen/ModuleAdapterGenerationTest.java b/compiler/src/test/java/dagger/tests/integration/codegen/ModuleAdapterGenerationTest.java
index c9c8b0d92..d4f6ec639 100644
--- a/compiler/src/test/java/dagger/tests/integration/codegen/ModuleAdapterGenerationTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/codegen/ModuleAdapterGenerationTest.java
@@ -23,7 +23,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static dagger.tests.integration.ProcessorTestUtils.daggerProcessors;
@@ -120,7 +120,7 @@
             "  }",
             "}"));
 
-    ASSERT.about(javaSource()).that(sourceFile).processedWith(daggerProcessors())
+    assert_().about(javaSource()).that(sourceFile).processedWith(daggerProcessors())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedModuleAdapter, expectedInjectAdapter);
@@ -232,7 +232,7 @@
             "    object.name = name.get();", // Inject field.
             "  }",
             "}"));
-    ASSERT.about(javaSource()).that(sourceFile).processedWith(daggerProcessors())
+    assert_().about(javaSource()).that(sourceFile).processedWith(daggerProcessors())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedModuleAdapter, expectedInjectAdapterA, expectedInjectAdapterB);
@@ -253,7 +253,7 @@
         "@Module(injects = B.class)",
         "class BModule { @Provides B b(A module) { return new B(); }}"));
 
-    ASSERT.about(javaSources()).that(asList(a, b, module)).processedWith(daggerProcessors())
+    assert_().about(javaSources()).that(asList(a, b, module)).processedWith(daggerProcessors())
         .compilesWithoutError();
   }
 
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
index a9af97fa1..d0233b911 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
@@ -23,7 +23,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static java.util.Arrays.asList;
 
@@ -130,7 +130,7 @@
       "}");
 
   @Test public void primitiveArrayTypesAllInjected() {
-    ASSERT.about(javaSources())
+    assert_().about(javaSources())
         .that(asList(component, primitiveInjectable, primitiveModule))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest.java
index 1ba88be98..7e38052c5 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest.java
@@ -24,7 +24,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 
 @RunWith(JUnit4.class)
 public final class SimpleInjectionTest {
@@ -52,18 +52,18 @@
   @Test public void memberInject_WithoutProvidesMethod() {
     Foo foo = new Foo();
     ObjectGraph.create(FooModule.class).inject(foo);
-    ASSERT.that(foo.blah).isEqualTo("blah");
+    assert_().that(foo.blah).isEqualTo("blah");
   }
 
   @Test public void membersInject_WithProvidesMethod() {
     Foo foo = new Foo();
     ObjectGraph.create(ProvidingFooModule.class).inject(foo);
-    ASSERT.that(foo.blah).isEqualTo("blah");
+    assert_().that(foo.blah).isEqualTo("blah");
   }
 
   @Test public void get_WithProvidesMethod() {
     Foo foo = ObjectGraph.create(ProvidingFooModule.class).get(Foo.class);
-    ASSERT.that(foo.blah).isEqualTo("blah");
+    assert_().that(foo.blah).isEqualTo("blah");
   }
 
   static class Bar { }
@@ -84,7 +84,7 @@
 
   @Test public void membersInject_WithProvidedNonInjectable() {
     Bar bar = ObjectGraph.create(ProvidingBarModule.class).get(Bar.class);
-    ASSERT.that(bar).isNotNull();
+    assert_().that(bar).isNotNull();
   }
 
 }
diff --git a/compiler/src/test/java/dagger/tests/integration/validation/CyclicDependencyTest.java b/compiler/src/test/java/dagger/tests/integration/validation/CyclicDependencyTest.java
index 027a1457f..bc03d96f0 100644
--- a/compiler/src/test/java/dagger/tests/integration/validation/CyclicDependencyTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/validation/CyclicDependencyTest.java
@@ -23,7 +23,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static dagger.tests.integration.ProcessorTestUtils.daggerProcessors;
 
@@ -51,7 +51,7 @@
         "  static class TestModule { }",
         "}"));
 
-    ASSERT.about(javaSource()).that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
+    assert_().about(javaSource()).that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
         .withErrorContaining("0. CyclicDeps$Foo bound by").in(sourceFile).onLine(17).and()
         .withErrorContaining("1. CyclicDeps$Bar bound by").in(sourceFile).onLine(17).and()
         .withErrorContaining("2. CyclicDeps$Blah bound by").in(sourceFile).onLine(17);
@@ -75,7 +75,7 @@
         "  }",
         "}"));
 
-    ASSERT.about(javaSource()).that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
+    assert_().about(javaSource()).that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
         .withErrorContaining("0. CyclicDeps$A bound by Provides").in(sourceFile).onLine(9).and()
         .withErrorContaining("1. CyclicDeps$D bound by Provides").in(sourceFile).onLine(9).and()
         .withErrorContaining("2. CyclicDeps$C bound by Provides").in(sourceFile).onLine(9).and()
diff --git a/compiler/src/test/java/dagger/tests/integration/validation/CyclicModuleIncludesTest.java b/compiler/src/test/java/dagger/tests/integration/validation/CyclicModuleIncludesTest.java
index 39fbcac82..708097e2e 100644
--- a/compiler/src/test/java/dagger/tests/integration/validation/CyclicModuleIncludesTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/validation/CyclicModuleIncludesTest.java
@@ -23,7 +23,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static dagger.tests.integration.ProcessorTestUtils.daggerProcessors;
 
@@ -48,13 +48,13 @@
           "}"));
 
   @Test public void cyclicModuleSelfIncludes() {
-    ASSERT.about(javaSource()).that(javaFile).processedWith(daggerProcessors()).failsToCompile()
+    assert_().about(javaSource()).that(javaFile).processedWith(daggerProcessors()).failsToCompile()
         .withErrorContaining("CyclicModules.SelfReferencingModule includes itself directly")
             .in(javaFile).onLine(4);
   }
 
   @Test public void cyclicModuleIncludes_full_cycle() {
-    ASSERT.about(javaSource()).that(javaFile).processedWith(daggerProcessors()).failsToCompile()
+    assert_().about(javaSource()).that(javaFile).processedWith(daggerProcessors()).failsToCompile()
         .withErrorContaining("0. CyclicModules.Rock included by CyclicModules.Paper")
             .in(javaFile).onLine(6).and()
         .withErrorContaining("1. CyclicModules.Paper included by CyclicModules.Scissors")
@@ -68,7 +68,7 @@
   }
 
   @Test public void cyclicModuleIncludes_initial_inclusion() {
-    ASSERT.about(javaSource()).that(javaFile).processedWith(daggerProcessors()).failsToCompile()
+    assert_().about(javaSource()).that(javaFile).processedWith(daggerProcessors()).failsToCompile()
         .withErrorContaining("0. CyclicModules.Rock included by CyclicModules.Paper")
             .in(javaFile).onLine(6).and()
         .withErrorContaining("0. CyclicModules.Paper included by CyclicModules.Scissors")
diff --git a/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest.java b/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest.java
index f135b02a4..2bd19cdca 100644
--- a/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest.java
@@ -32,7 +32,7 @@
 import org.junit.runners.JUnit4;
 
 import static com.google.common.collect.Iterables.concat;
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static dagger.tests.integration.ProcessorTestUtils.daggerProcessors;
 import static java.util.Arrays.asList;
@@ -68,7 +68,7 @@
         "  }",
         "}"));
 
-    ASSERT.about(javaSources()).that(asList(foo, main, module))
+    assert_().about(javaSources()).that(asList(foo, main, module))
         .processedWith(concat(asList(new FooImplGenerator()), daggerProcessors()))
         .compilesWithoutError();
   }
@@ -85,7 +85,7 @@
         "  }",
         "}"));
 
-    ASSERT.about(javaSources()).that(asList(foo, module, main))
+    assert_().about(javaSources()).that(asList(foo, module, main))
         .processedWith(concat(daggerProcessors(), asList(new FooImplGenerator())))
         .compilesWithoutError();
   }
@@ -106,7 +106,7 @@
         "  }",
         "}"));
 
-    ASSERT.about(javaSources()).that(asList(foo, module, main))
+    assert_().about(javaSources()).that(asList(foo, module, main))
         .processedWith(concat(daggerProcessors(), asList(new FooImplGenerator())))
         .compilesWithoutError();
   }
@@ -127,10 +127,10 @@
         "  }",
         "}"));
 
-    ASSERT.about(javaSources()).that(asList(foo, module, main))
+    assert_().about(javaSources()).that(asList(foo, module, main))
         .processedWith(new FooImplGenerator())
         .compilesWithoutError();
-    ASSERT.about(javaSources()).that(asList(foo, module, main))
+    assert_().about(javaSources()).that(asList(foo, module, main))
         .processedWith(concat(daggerProcessors(), asList(new FooImplGenerator())))
         .failsToCompile()
         .withErrorContaining("Could not find types required by provides methods for [FooModule]");
@@ -150,7 +150,7 @@
         "class FooModule {",
         "}"));
 
-    ASSERT.about(javaSources()).that(asList(foo, module, main))
+    assert_().about(javaSources()).that(asList(foo, module, main))
         .processedWith(concat(daggerProcessors(), asList(new FooImplGenerator())))
         .compilesWithoutError();
   }
@@ -166,7 +166,7 @@
         "    return impl;",
         "  }",
         "}"));
-    ASSERT.about(javaSources()).that(asList(foo, module, main))
+    assert_().about(javaSources()).that(asList(foo, module, main))
         .processedWith(new FooImplGenerator())
         .compilesWithoutError();
   }
diff --git a/compiler/src/test/java/dagger/tests/integration/validation/LibraryModuleTest.java b/compiler/src/test/java/dagger/tests/integration/validation/LibraryModuleTest.java
index 80d01dc84..36e3ed36e 100644
--- a/compiler/src/test/java/dagger/tests/integration/validation/LibraryModuleTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/validation/LibraryModuleTest.java
@@ -24,7 +24,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static dagger.tests.integration.ProcessorTestUtils.daggerProcessors;
@@ -42,7 +42,7 @@
         "    return \"string\";",
         "  }",
         "}"));
-    ASSERT.about(javaSource())
+    assert_().about(javaSource())
         .that(source).processedWith(daggerProcessors()).compilesWithoutError();
   }
 
@@ -57,7 +57,7 @@
         "    return \"string\";",
         "  }",
         "}"));
-    ASSERT.about(javaSource()).that(source).processedWith(daggerProcessors()).failsToCompile()
+    assert_().about(javaSource()).that(source).processedWith(daggerProcessors()).failsToCompile()
         .withErrorContaining("Graph validation failed:").in(source).onLine(5).and()
         .withErrorContaining("You have these unused @Provider methods:").in(source).onLine(5).and()
         .withErrorContaining("1. TestModule.string()").in(source).onLine(5).and()
@@ -76,7 +76,7 @@
         "    return new Foo() {};",
         "  }",
         "}"));
-    ASSERT.about(javaSources()).that(Arrays.asList(foo, module))
+    assert_().about(javaSources()).that(Arrays.asList(foo, module))
         .processedWith(daggerProcessors())
         .compilesWithoutError();
   }
@@ -93,7 +93,7 @@
         "    return new Foo() {};",
         "  }",
         "}"));
-    ASSERT.about(javaSources()).that(Arrays.asList(foo, module))
+    assert_().about(javaSources()).that(Arrays.asList(foo, module))
         .processedWith(daggerProcessors())
         .compilesWithoutError();
   }
diff --git a/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest.java b/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest.java
index 4b6148ffc..8cca1daaf 100644
--- a/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest.java
@@ -23,7 +23,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static dagger.tests.integration.ProcessorTestUtils.daggerProcessors;
@@ -54,7 +54,7 @@
         "}"));
 
     // TODO(user): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
-    ASSERT.about(javaSource())
+    assert_().about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
         //.and().hasNoWarnings();
   }
@@ -70,7 +70,7 @@
         "}"));
 
     // TODO(user): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
-    ASSERT.about(javaSource())
+    assert_().about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
         //.and().hasNoWarnings();
   }
@@ -84,7 +84,7 @@
         "}"));
 
     // TODO(user): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
-    ASSERT.about(javaSource())
+    assert_().about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
         //.and().hasNoWarnings();
   }
@@ -98,7 +98,7 @@
         "}"));
 
     // TODO(user): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
-    ASSERT.about(javaSource())
+    assert_().about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
         //.and().hasNoWarnings();
   }
@@ -111,7 +111,7 @@
         "}"));
 
     // TODO(user): uncomment when http://github.com/google/compile-testing supports warnings.
-    ASSERT.about(javaSource())
+    assert_().about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
         //.withWarningContaining(MISUSED_SCOPE_TEXT).in(sourceFile).onLine(3).atColumn(49).and()
         //.withWarningContaining("Test.method()").in(sourceFile).onLine(3).atColumn(49);
@@ -126,7 +126,7 @@
         "}"));
 
     // TODO(user): uncomment when http://github.com/google/compile-testing supports warnings.
-    ASSERT.about(javaSource())
+    assert_().about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
         //.withWarningContaining(MISUSED_SCOPE_TEXT).in(sourceFile).onLine(4).atColumn(49).and()
         //.withWarningContaining("Test.method()").in(sourceFile).onLine(4).atColumn(49);
@@ -141,7 +141,7 @@
         "  @Singleton interface TestType { }",
         "}"));
 
-    ASSERT.about(javaSource())
+    assert_().about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
         .withErrorContaining(ABSTRACTION_SCOPING_TEXT).in(sourceFile).onLine(5).atColumn(14).and()
         .withErrorContaining("Test.TestType").in(sourceFile).onLine(5).atColumn(14);
@@ -156,7 +156,7 @@
         "  @Singleton abstract class TestType { }",
         "}"));
 
-    ASSERT.about(javaSource())
+    assert_().about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
         .withErrorContaining(ABSTRACTION_SCOPING_TEXT).in(sourceFile).onLine(5).atColumn(23).and()
         .withErrorContaining("Test.TestType").in(sourceFile).onLine(5).atColumn(23);
@@ -173,7 +173,7 @@
         "  @Module(injects = Test.class) class TestModule { }",
         "}"));
 
-    ASSERT.about(javaSource())
+    assert_().about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
         .withErrorContaining(ABSTRACTION_SCOPING_TEXT).in(sourceFile).onLine(5).atColumn(21).and()
         .withErrorContaining("Test.field").in(sourceFile).onLine(5).atColumn(21);
@@ -190,7 +190,7 @@
         "  @Provides String provideString(@Singleton int intParam) { return \"\"; }",
         "}"));
 
-    ASSERT.about(javaSource())
+    assert_().about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
         .withErrorContaining(ABSTRACTION_SCOPING_TEXT).in(sourceFile).onLine(7).atColumn(49).and()
         .withErrorContaining("intParam").in(sourceFile).onLine(7).atColumn(49);
@@ -222,7 +222,7 @@
 
     String error = "Only one scoping annotation is allowed per element: ";
 
-    ASSERT.about(javaSources()).that(asList(annotation, module, injectable))
+    assert_().about(javaSources()).that(asList(annotation, module, injectable))
         .processedWith(daggerProcessors()).failsToCompile()
         .withErrorContaining(error + "MyModule.method()").in(module).onLine(6).atColumn(40).and()
         .withErrorContaining(error + "Injectable").in(injectable).onLine(4).atColumn(1);
@@ -242,7 +242,7 @@
         + "Singleton annotations have no effect on constructors. "
         + "Did you mean to annotate the class?";
 
-    ASSERT.about(javaSource())
+    assert_().about(javaSource())
         .that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
         .withErrorContaining(ABSTRACTION_SCOPING_TEXT).in(sourceFile).onLine(5).atColumn(29).and()
         .withErrorContaining("Test.Test()").in(sourceFile).onLine(5).atColumn(29).and()
diff --git a/compiler/src/test/java/dagger/tests/integration/validation/SimpleMissingDependencyTest.java b/compiler/src/test/java/dagger/tests/integration/validation/SimpleMissingDependencyTest.java
index 4b58d28c8..e0907a939 100644
--- a/compiler/src/test/java/dagger/tests/integration/validation/SimpleMissingDependencyTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/validation/SimpleMissingDependencyTest.java
@@ -23,7 +23,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static dagger.tests.integration.ProcessorTestUtils.daggerProcessors;
 
@@ -45,7 +45,7 @@
         "  }",
         "}"));
 
-    ASSERT.about(javaSource())
+    assert_().about(javaSource())
         .that(file).processedWith(daggerProcessors())
         .failsToCompile()
         .withErrorContaining("MissingDep$Dependency could not be bound").in(file).onLine(9).and()
diff --git a/core/src/test/java/dagger/internal/DoubleCheckLazyTest.java b/core/src/test/java/dagger/internal/DoubleCheckLazyTest.java
index cc8f6c7fd..01790c787 100644
--- a/core/src/test/java/dagger/internal/DoubleCheckLazyTest.java
+++ b/core/src/test/java/dagger/internal/DoubleCheckLazyTest.java
@@ -32,7 +32,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static org.junit.Assert.fail;
 
 @RunWith(JUnit4.class)
@@ -57,12 +57,12 @@
 
     List<Future<Object>> futures = executor.invokeAll(tasks);
 
-    ASSERT.that(provider.provisions.get()).is(1);
+    assert_().that(provider.provisions.get()).is(1);
     Set<Object> results = Sets.newIdentityHashSet();
     for (Future<Object> future : futures) {
       results.add(future.get());
     }
-    ASSERT.that(results.size()).is(1);
+    assert_().that(results.size()).is(1);
   }
 
   @Test public void get_null() {
diff --git a/core/src/test/java/dagger/internal/InstanceFactoryTest.java b/core/src/test/java/dagger/internal/InstanceFactoryTest.java
index 0f6d91482..dd8b1e2df 100644
--- a/core/src/test/java/dagger/internal/InstanceFactoryTest.java
+++ b/core/src/test/java/dagger/internal/InstanceFactoryTest.java
@@ -22,7 +22,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 
 @RunWith(JUnit4.class)
 public final class InstanceFactoryTest {
@@ -31,9 +31,9 @@
   @Test public void instanceFactory() {
     Object instance = new Object();
     Factory<Object> factory = InstanceFactory.create(instance);
-    ASSERT.that(factory.get()).isEqualTo(instance);
-    ASSERT.that(factory.get()).isEqualTo(instance);
-    ASSERT.that(factory.get()).isEqualTo(instance);
+    assert_().that(factory.get()).isEqualTo(instance);
+    assert_().that(factory.get()).isEqualTo(instance);
+    assert_().that(factory.get()).isEqualTo(instance);
   }
 
   @Test public void create_throwsNullPointerException() {
diff --git a/core/src/test/java/dagger/internal/MapProviderFactoryTest.java b/core/src/test/java/dagger/internal/MapProviderFactoryTest.java
index 2688f8e31..e14402172 100644
--- a/core/src/test/java/dagger/internal/MapProviderFactoryTest.java
+++ b/core/src/test/java/dagger/internal/MapProviderFactoryTest.java
@@ -26,7 +26,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 
 @RunWith(JUnit4.class)
 @SuppressWarnings("unchecked")
@@ -69,7 +69,7 @@ public void iterationOrder() {
     expectedMap.put("three", p3);
     expectedMap.put("one", p5);
     expectedMap.put("four", p4);
-    ASSERT.that(factory.get().entrySet()).iteratesAs(expectedMap.entrySet());
+    assert_().that(factory.get().entrySet()).iteratesAs(expectedMap.entrySet());
   }
 
   private static Provider<Integer> incrementingIntegerProvider(int seed) {
diff --git a/core/src/test/java/dagger/internal/ScopedProviderTest.java b/core/src/test/java/dagger/internal/ScopedProviderTest.java
index 078eda460..7d2e4ba79 100644
--- a/core/src/test/java/dagger/internal/ScopedProviderTest.java
+++ b/core/src/test/java/dagger/internal/ScopedProviderTest.java
@@ -21,7 +21,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 import static org.junit.Assert.fail;
 
 /**
@@ -57,8 +57,8 @@
         return i++;
       }
     });
-    ASSERT.that(scopedProvider.get()).is(0);
-    ASSERT.that(scopedProvider.get()).is(0);
-    ASSERT.that(scopedProvider.get()).is(0);
+    assert_().that(scopedProvider.get()).is(0);
+    assert_().that(scopedProvider.get()).is(0);
+    assert_().that(scopedProvider.get()).is(0);
   }
 }
diff --git a/core/src/test/java/dagger/internal/SetFactoryTest.java b/core/src/test/java/dagger/internal/SetFactoryTest.java
index 1b581b8bc..8f2df0c81 100644
--- a/core/src/test/java/dagger/internal/SetFactoryTest.java
+++ b/core/src/test/java/dagger/internal/SetFactoryTest.java
@@ -30,7 +30,7 @@
 import org.junit.runners.JUnit4;
 
 import static com.google.common.collect.DiscreteDomain.integers;
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assert_;
 
 @RunWith(JUnit4.class)
 @SuppressWarnings("unchecked")
@@ -94,9 +94,9 @@ public void invokesProvidersEverytTime() {
         incrementingIntegerProvider(0),
         incrementingIntegerProvider(10),
         incrementingIntegerProvider(20));
-    ASSERT.that(factory.get()).has().exactly(0, 10, 20);
-    ASSERT.that(factory.get()).has().exactly(1, 11, 21);
-    ASSERT.that(factory.get()).has().exactly(2, 12, 22);
+    assert_().that(factory.get()).has().exactly(0, 10, 20);
+    assert_().that(factory.get()).has().exactly(1, 11, 21);
+    assert_().that(factory.get()).has().exactly(2, 12, 22);
   }
 
   @Test
@@ -105,7 +105,7 @@ public void iterationOrder() {
         integerSetProvider(Range.closed(5, 9)),
         integerSetProvider(Range.closed(3, 6)),
         integerSetProvider(Range.closed(0, 5)));
-    ASSERT.that(factory.get()).iteratesAs(5, 6, 7, 8, 9, 3, 4, 0, 1, 2);
+    assert_().that(factory.get()).iteratesAs(5, 6, 7, 8, 9, 3, 4, 0, 1, 2);
   }
 
   private static Provider<Set<Integer>> incrementingIntegerProvider(int seed) {
