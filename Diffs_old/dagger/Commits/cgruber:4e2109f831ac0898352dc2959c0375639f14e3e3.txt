diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index dde9f2823..c047696c1 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -297,7 +297,7 @@ private BindingGraph create(Optional<RequestResolver> parentResolver,
        *  component's resolver but will return an {@link Optional#absent} value.
        */
       ResolvedBindings lookUpBindings(DependencyRequest request) {
-        BindingKey bindingKey = BindingKey.forDependencyRequest(request);
+        BindingKey bindingKey = request.bindingKey();
         switch (bindingKey.kind()) {
           case CONTRIBUTION:
             // First, check for explicit keys (those from modules and components)
@@ -451,7 +451,7 @@ private MembersInjectionBinding rollUpMembersInjectionBindings(Key key) {
       }
 
       void resolve(DependencyRequest request) {
-        BindingKey bindingKey = BindingKey.forDependencyRequest(request);
+        BindingKey bindingKey = request.bindingKey();
 
         Optional<ResolvedBindings> previouslyResolvedBinding =
             getPreviouslyResolvedBindings(bindingKey);
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
index f74085e8e..6d1827a11 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -15,8 +15,6 @@
  */
 package dagger.internal.codegen;
 
-import javax.tools.Diagnostic;
-
 import com.google.auto.common.AnnotationMirrors;
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
@@ -55,6 +53,8 @@
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.SimpleTypeVisitor6;
 import javax.lang.model.util.Types;
+import javax.tools.Diagnostic;
+
 import static com.google.auto.common.MoreElements.getAnnotationMirror;
 import static com.google.auto.common.MoreTypes.isTypeOf;
 import static com.google.common.collect.Iterables.getOnlyElement;
@@ -121,8 +121,7 @@
         boolean visitResolvedRequest(Deque<ResolvedRequest> path) {
           ResolvedBindings binding = path.peek().binding();
           for (ResolvedRequest resolvedRequest : Iterables.skip(path, 1)) {
-            if (BindingKey.forDependencyRequest(resolvedRequest.request())
-                .equals(binding.bindingKey())) {
+            if (resolvedRequest.request().bindingKey().equals(binding.bindingKey())) {
               reportCycle(path, reportBuilder);
               return false;
             }
@@ -699,7 +698,7 @@ private void reportCycle(Deque<ResolvedRequest> path,
 
     static ResolvedRequest create(DependencyRequest request, BindingGraph graph) {
       return new AutoValue_BindingGraphValidator_ResolvedRequest(
-          request, graph.resolvedBindings().get(BindingKey.forDependencyRequest(request)));
+          request, graph.resolvedBindings().get(request.bindingKey()));
     }
   }
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingKey.java b/compiler/src/main/java/dagger/internal/codegen/BindingKey.java
index 473deba64..cd29d8d69 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingKey.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingKey.java
@@ -31,22 +31,6 @@
     CONTRIBUTION, MEMBERS_INJECTION;
   }
 
-  static BindingKey forDependencyRequest(DependencyRequest request) {
-    switch (request.kind()) {
-      case INSTANCE:
-      case LAZY:
-      case PROVIDER:
-      case PRODUCER:
-      case PRODUCED:
-      case FUTURE:
-        return BindingKey.create(Kind.CONTRIBUTION, request.key());
-      case MEMBERS_INJECTOR:
-        return BindingKey.create(Kind.MEMBERS_INJECTION, request.key());
-      default:
-        throw new AssertionError();
-    }
-  }
-
   static BindingKey create(Kind kind, Key key) {
     return new AutoValue_BindingKey(kind, key);
   }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index f8ffb17dd..6bf8f2864 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -642,7 +642,7 @@ private void writeInterfaceMethods(BindingGraph input, ClassWriter componentWrit
                     requestElement.getSimpleName().toString());
         interfaceMethod.annotate(Override.class);
         interfaceMethod.addModifiers(PUBLIC);
-        BindingKey bindingKey = BindingKey.forDependencyRequest(interfaceRequest);
+        BindingKey bindingKey = interfaceRequest.bindingKey();
         switch(interfaceRequest.kind()) {
           case MEMBERS_INJECTOR:
             MemberSelect membersInjectorSelect = memberSelectSnippets.get(bindingKey);
@@ -1074,7 +1074,7 @@ private static Snippet initializeMembersInjectorForBinding(
         DependencyRequest parentInjectorRequest = binding.parentInjectorRequest().get();
         return Snippet.format("%s.delegatingTo(%s)",
             ClassName.fromClass(MembersInjectors.class),
-            memberSelectSnippets.get(BindingKey.forDependencyRequest(parentInjectorRequest))
+            memberSelectSnippets.get(parentInjectorRequest.bindingKey())
                 .getSnippetFor(componentName));
       case INJECT_MEMBERS:
         List<Snippet> parameters = getDependencyParameters(
@@ -1099,7 +1099,7 @@ private static Snippet initializeMembersInjectorForBinding(
       BindingKey key = Iterables.getOnlyElement(FluentIterable.from(requestsForKey)
           .transform(new Function<DependencyRequest, BindingKey>() {
             @Override public BindingKey apply(DependencyRequest request) {
-              return BindingKey.forDependencyRequest(request);
+              return request.bindingKey();
             }
           })
           .toSet());
@@ -1119,7 +1119,7 @@ private static Snippet initializeMembersInjectorForBinding(
       BindingKey key = Iterables.getOnlyElement(FluentIterable.from(requestsForKey)
           .transform(new Function<DependencyRequest, BindingKey>() {
             @Override public BindingKey apply(DependencyRequest request) {
-              return BindingKey.forDependencyRequest(request);
+              return request.bindingKey();
             }
           }));
       ResolvedBindings resolvedBindings = bindingGraph.resolvedBindings().get(key);
@@ -1149,8 +1149,9 @@ private Snippet initializeMapBinding(
     if (isNonProviderMap(firstBinding)) {
       return Snippet.format("%s.create(%s)",
           ClassName.fromClass(MapFactory.class),
-          memberSelectSnippets.get(BindingKey.forDependencyRequest(
-              Iterables.getOnlyElement(firstBinding.dependencies()))).getSnippetFor(componentName));
+          memberSelectSnippets.get(
+              Iterables.getOnlyElement(firstBinding.dependencies()).bindingKey())
+                  .getSnippetFor(componentName));
     } else {
       DeclaredType mapType = asDeclared(firstBinding.key().type());
       TypeMirror mapKeyType = Util.getKeyTypeOfMap(mapType);
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
index c2c5c0178..9e36418fd 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
@@ -39,6 +39,7 @@
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
+
 import static com.google.auto.common.MoreTypes.isTypeOf;
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
@@ -76,14 +77,31 @@
 
   abstract Kind kind();
   abstract Key key();
+
+  BindingKey bindingKey() {
+    switch (kind()) {
+      case INSTANCE:
+      case LAZY:
+      case PROVIDER:
+      case PRODUCER:
+      case PRODUCED:
+      case FUTURE:
+        return BindingKey.create(BindingKey.Kind.CONTRIBUTION, key());
+      case MEMBERS_INJECTOR:
+        return BindingKey.create(BindingKey.Kind.MEMBERS_INJECTION, key());
+      default:
+        throw new AssertionError();
+    }
+  }
+
   abstract Element requestElement();
-  
+
   /**
    * Returns the possibly resolved type that contained the requesting element. For members injection
    * requests, this is the type itself.
    */
   abstract DeclaredType enclosingType();
-  
+
   /** Returns true if this request allows null objects. */
   abstract boolean isNullable();
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
index 205a724b7..d8a0b9b5e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
@@ -110,7 +110,7 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
     final Optional<ConstructorWriter> constructorWriter;
     List<TypeVariableName> typeParameters = Lists.newArrayList();
     for (TypeParameterElement typeParameter : binding.bindingTypeElement().getTypeParameters()) {
-     typeParameters.add(TypeVariableName.fromTypeParameterElement(typeParameter));          
+     typeParameters.add(TypeVariableName.fromTypeParameterElement(typeParameter));
     }
     switch (binding.factoryCreationStrategy()) {
       case ENUM_INSTANCE:
@@ -149,7 +149,6 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
     factoryWriter.addModifiers(PUBLIC);
     factoryWriter.addImplementedType(
         ParameterizedTypeName.create(ClassName.fromClass(Factory.class), providedTypeName));
-    
 
     MethodWriter getMethodWriter = factoryWriter.addMethod(providedTypeName, "get");
     getMethodWriter.annotate(Override.class);
@@ -178,7 +177,7 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
           .addSnippet("assert %s != null;", field.name())
           .addSnippet("this.%1$s = %1$s;", field.name());
     }
-    
+
     // If constructing a factory for @Inject or @Provides bindings, we use a static create method
     // so that generated components can avoid having to refer to the generic types
     // of the factory.  (Otherwise they may have visibility problems referring to the types.)
@@ -195,7 +194,7 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
         Map<String, TypeName> params = constructorWriter.isPresent()
             ? constructorWriter.get().parameters() : ImmutableMap.<String, TypeName>of();
         for (Map.Entry<String, TypeName> param : params.entrySet()) {
-          createMethodWriter.addParameter(param.getValue(), param.getKey());      
+          createMethodWriter.addParameter(param.getValue(), param.getKey());
         }
         switch (binding.factoryCreationStrategy()) {
           case ENUM_INSTANCE:
@@ -223,8 +222,7 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
     List<Snippet> parameters = Lists.newArrayList();
     for (DependencyRequest dependency : binding.dependencies()) {
       parameters.add(frameworkTypeUsageStatement(
-          Snippet.format(fields.get(BindingKey.forDependencyRequest(dependency)).name()),
-          dependency.kind()));
+          Snippet.format(fields.get(dependency.bindingKey()).name()), dependency.kind()));
     }
     Snippet parametersSnippet = makeParametersSnippet(parameters);
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
index 642d6e966..c4d0db6cc 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
@@ -189,7 +189,7 @@ ClassName nameGeneratedType(MembersInjectionBinding binding) {
           DependencyRequest fieldDependency =
               Iterables.getOnlyElement(injectionSite.dependencies());
           FieldWriter singleField = depedencyFields.get(
-              BindingKey.forDependencyRequest(fieldDependency));
+              fieldDependency.bindingKey());
           injectMembersWriter.body().addSnippet("instance.%s = %s;",
               injectionSite.element().getSimpleName(),
               frameworkTypeUsageStatement(Snippet.format(singleField.name()),
@@ -199,7 +199,7 @@ ClassName nameGeneratedType(MembersInjectionBinding binding) {
           ImmutableList.Builder<Snippet> parameters = ImmutableList.builder();
           for (DependencyRequest methodDependency : injectionSite.dependencies()) {
             FieldWriter field = depedencyFields.get(
-                BindingKey.forDependencyRequest(methodDependency));
+                methodDependency.bindingKey());
             parameters.add(frameworkTypeUsageStatement(Snippet.format(field.name()),
                 methodDependency.kind()));
           }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index 895dd647f..d4d55f8d3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -155,7 +155,7 @@ ClassName nameGeneratedType(ProductionBinding binding) {
       ParameterizedTypeName futureType = ParameterizedTypeName.create(
           ClassName.fromClass(ListenableFuture.class),
           asyncDependencyType(dependency));
-      String name = fields.get(BindingKey.forDependencyRequest(dependency)).name();
+      String name = fields.get(dependency.bindingKey()).name();
       Snippet futureAccess = Snippet.format("%s.get()", name);
       getMethodWriter.body().addSnippet("%s %sFuture = %s;",
           futureType,
@@ -170,8 +170,7 @@ ClassName nameGeneratedType(ProductionBinding binding) {
       ImmutableList.Builder<Snippet> parameterSnippets = ImmutableList.builder();
       for (DependencyRequest dependency : binding.dependencies()) {
         parameterSnippets.add(frameworkTypeUsageStatement(
-            Snippet.format(fields.get(BindingKey.forDependencyRequest(dependency)).name()),
-            dependency.kind()));
+            Snippet.format(fields.get(dependency.bindingKey()).name()), dependency.kind()));
       }
       final boolean wrapWithFuture = false;  // since submitToExecutor will create the future
       Snippet invocationSnippet = getInvocationSnippet(wrapWithFuture, binding,
@@ -204,7 +203,7 @@ ClassName nameGeneratedType(ProductionBinding binding) {
       if (asyncDependencies.size() == 1) {
         DependencyRequest asyncDependency = Iterables.getOnlyElement(asyncDependencies);
         futureSnippet = Snippet.format("%s",
-            fields.get(BindingKey.forDependencyRequest(asyncDependency)).name() + "Future");
+            fields.get(asyncDependency.bindingKey()).name() + "Future");
         String argName = asyncDependency.requestElement().getSimpleName().toString();
         ImmutableList.Builder<Snippet> parameterSnippets = ImmutableList.builder();
         for (DependencyRequest dependency : binding.dependencies()) {
@@ -214,7 +213,7 @@ ClassName nameGeneratedType(ProductionBinding binding) {
             parameterSnippets.add(Snippet.format("%s", argName));
           } else {
             parameterSnippets.add(frameworkTypeUsageStatement(
-                Snippet.format(fields.get(BindingKey.forDependencyRequest(dependency)).name()),
+                Snippet.format(fields.get(dependency.bindingKey()).name()),
                 dependency.kind()));
           }
         }
@@ -243,8 +242,7 @@ ClassName nameGeneratedType(ProductionBinding binding) {
                 .from(asyncDependencies)
                 .transform(new Function<DependencyRequest, String>() {
                   @Override public String apply(DependencyRequest dependency) {
-                    return fields.get(BindingKey.forDependencyRequest(dependency)).name()
-                        + "Future";
+                    return fields.get(dependency.bindingKey()).name() + "Future";
                   }
                 })));
         ImmutableList<Snippet> parameterSnippets = getParameterSnippets(binding, fields, "args");
@@ -316,8 +314,7 @@ private TypeName asyncDependencyType(DependencyRequest dependency) {
         argIndex++;
       } else {
         snippets.add(frameworkTypeUsageStatement(
-            Snippet.format(fields.get(BindingKey.forDependencyRequest(dependency)).name()),
-            dependency.kind()));
+            Snippet.format(fields.get(dependency.bindingKey()).name()), dependency.kind()));
       }
     }
     return snippets.build();
diff --git a/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java b/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
index 62e034181..bf208a63c 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
@@ -84,7 +84,7 @@ public int compare(DependencyRequest left, DependencyRequest right) {
         new ImmutableSetMultimap.Builder<BindingKey, DependencyRequest>().orderValuesBy(
             DEPENDENCY_ORDERING);
     for (DependencyRequest dependency : dependencies) {
-      BindingKey resolved = BindingKey.forDependencyRequest(dependency);
+      BindingKey resolved = dependency.bindingKey();
       // To get the proper unresolved type, we have to extract the proper type from the
       // request type again (because we're looking at the actual element's type).
       TypeMirror unresolvedType =
@@ -109,8 +109,7 @@ public int compare(DependencyRequest left, DependencyRequest right) {
         new ImmutableSetMultimap.Builder<BindingKey, DependencyRequest>().orderValuesBy(
             DEPENDENCY_ORDERING);
     for (DependencyRequest dependency : dependencies) {
-      dependenciesByKeyBuilder.put(
-          BindingKey.forDependencyRequest(dependency), dependency);
+      dependenciesByKeyBuilder.put(dependency.bindingKey(), dependency);
     }
     return dependenciesByKeyBuilder.build();
   }
