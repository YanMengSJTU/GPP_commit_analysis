diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index aa0cae688..31ef80248 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -106,7 +106,7 @@
 import static dagger.internal.codegen.TypeNames.SET_FACTORY;
 import static dagger.internal.codegen.TypeNames.SET_OF_PRODUCED_PRODUCER;
 import static dagger.internal.codegen.TypeNames.SET_PRODUCER;
-import static dagger.internal.codegen.TypeNames.SIMPLE_LAZILY_INITIALIZED_PROVIDER;
+import static dagger.internal.codegen.TypeNames.SINGLE_CHECK;
 import static dagger.internal.codegen.TypeNames.STRING;
 import static dagger.internal.codegen.TypeNames.UNSUPPORTED_OPERATION_EXCEPTION;
 import static dagger.internal.codegen.TypeNames.providerOf;
@@ -1055,9 +1055,10 @@ private CodeBlock initializeFactoryForContributionBinding(ContributionBinding bi
   }
 
   private CodeBlock decorateForScope(CodeBlock factoryCreate, Scope scope) {
-    return scope.equals(reusableScope(elements))
-        ? CodeBlock.of("$T.create($L)", SIMPLE_LAZILY_INITIALIZED_PROVIDER, factoryCreate)
-        : CodeBlock.of("$T.provider($L)", DOUBLE_CHECK, factoryCreate);
+    return CodeBlock.of(
+        "$T.provider($L)",
+        scope.equals(reusableScope(elements)) ? SINGLE_CHECK : DOUBLE_CHECK,
+        factoryCreate);
   }
 
   private CodeBlock nullableAnnotation(Optional<DeclaredType> nullableType) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/TypeNames.java b/compiler/src/main/java/dagger/internal/codegen/TypeNames.java
index b88c6caa0..8135f4416 100644
--- a/compiler/src/main/java/dagger/internal/codegen/TypeNames.java
+++ b/compiler/src/main/java/dagger/internal/codegen/TypeNames.java
@@ -31,7 +31,7 @@
 import dagger.internal.MapProviderFactory;
 import dagger.internal.MembersInjectors;
 import dagger.internal.SetFactory;
-import dagger.internal.SimpleLazilyInitializedProvider;
+import dagger.internal.SingleCheck;
 import dagger.producers.Produced;
 import dagger.producers.Producer;
 import dagger.producers.internal.AbstractProducer;
@@ -77,8 +77,7 @@
   static final ClassName PRODUCER = ClassName.get(Producer.class);
   static final ClassName PRODUCERS = ClassName.get(Producers.class);
   static final ClassName PROVIDER = ClassName.get(Provider.class);
-  static final ClassName SIMPLE_LAZILY_INITIALIZED_PROVIDER =
-      ClassName.get(SimpleLazilyInitializedProvider.class);
+  static final ClassName SINGLE_CHECK = ClassName.get(SingleCheck.class);
   static final ClassName SET = ClassName.get(Set.class);
   static final ClassName SET_FACTORY = ClassName.get(SetFactory.class);
   static final ClassName SET_OF_PRODUCED_PRODUCER = ClassName.get(SetOfProducedProducer.class);
diff --git a/core/src/main/java/dagger/internal/SimpleLazilyInitializedProvider.java b/core/src/main/java/dagger/internal/SingleCheck.java
similarity index 86%
rename from core/src/main/java/dagger/internal/SimpleLazilyInitializedProvider.java
rename to core/src/main/java/dagger/internal/SingleCheck.java
index e9fd64c1b..3a9a14766 100644
--- a/core/src/main/java/dagger/internal/SimpleLazilyInitializedProvider.java
+++ b/core/src/main/java/dagger/internal/SingleCheck.java
@@ -24,13 +24,13 @@
  * A {@link Provider} implementation that memoizes the result of a {@link Factory} instance using
  * simple lazy initialization, not the double-checked lock pattern.
  */
-public final class SimpleLazilyInitializedProvider<T> implements Provider<T>, Lazy<T> {
+public final class SingleCheck<T> implements Provider<T>, Lazy<T> {
   private static final Object UNINITIALIZED = new Object();
 
   private volatile Factory<T> factory;
   private volatile Object instance = UNINITIALIZED;
 
-  private SimpleLazilyInitializedProvider(Factory<T> factory) {
+  private SingleCheck(Factory<T> factory) {
     assert factory != null;
     this.factory = factory;
   }
@@ -53,7 +53,7 @@ public T get() {
   }
 
   /** Returns a new provider for the given factory. */
-  public static <T> Provider<T> create(Factory<T> factory) {
-    return new SimpleLazilyInitializedProvider<T>(checkNotNull(factory));
+  public static <T> Provider<T> provider(Factory<T> factory) {
+    return new SingleCheck<T>(checkNotNull(factory));
   }
 }
diff --git a/core/src/test/java/dagger/internal/SimpleLazilyInitializedProviderTest.java b/core/src/test/java/dagger/internal/SingleCheckTest.java
similarity index 86%
rename from core/src/test/java/dagger/internal/SimpleLazilyInitializedProviderTest.java
rename to core/src/test/java/dagger/internal/SingleCheckTest.java
index c1fd61c19..3bc2075cf 100644
--- a/core/src/test/java/dagger/internal/SimpleLazilyInitializedProviderTest.java
+++ b/core/src/test/java/dagger/internal/SingleCheckTest.java
@@ -23,19 +23,19 @@
 import static com.google.common.truth.Truth.assertThat;
 
 /**
- * Tests {@link SimpleLazilyInitializedProvider}.
+ * Tests {@link SingleCheck}.
  */
 @RunWith(JUnit4.class)
-public class SimpleLazilyInitializedProviderTest {
+public class SingleCheckTest {
   @Test(expected = NullPointerException.class)
   public void create_nullPointerException() {
-    SimpleLazilyInitializedProvider.create(null);
+    SingleCheck.provider(null);
   }
 
   @Test
   public void get() {
     Provider<Integer> provider =
-        SimpleLazilyInitializedProvider.create(
+        SingleCheck.provider(
             new Factory<Integer>() {
               int i = 0;
 
