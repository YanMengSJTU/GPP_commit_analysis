diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index cf068bb43..80c9ab3c9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -761,13 +761,7 @@ private void initializeDelegateFactories(Binding binding, MethodWriter initializ
       BindingKey dependencyKey =
           Iterables.getOnlyElement(
                   FluentIterable.from(requestsForKey)
-                      .transform(
-                          new Function<DependencyRequest, BindingKey>() {
-                            @Override
-                            public BindingKey apply(DependencyRequest request) {
-                              return request.bindingKey();
-                            }
-                          })
+                      .transform(DependencyRequest.BINDING_KEY_FUNCTION)
                       .toSet());
       if (!getMemberSelect(dependencyKey).staticMember()
           && !isProviderInitialized(dependencyKey)
@@ -986,19 +980,10 @@ private TypeMirror typeMirrorAsMemberOf(TypeElement bindingTypeElement, Element
   private List<Snippet> getProducerDependencyParameters(Binding binding) {
     ImmutableList.Builder<Snippet> parameters = ImmutableList.builder();
     for (Collection<DependencyRequest> requestsForKey :
-        SourceFiles.indexDependenciesByUnresolvedKey(types, binding.dependencies())
-            .asMap()
-            .values()) {
-      BindingKey key =
-          Iterables.getOnlyElement(
-              FluentIterable.from(requestsForKey)
-                  .transform(
-                      new Function<DependencyRequest, BindingKey>() {
-                        @Override
-                        public BindingKey apply(DependencyRequest request) {
-                          return request.bindingKey();
-                        }
-                      }));
+        SourceFiles.indexDependenciesByUnresolvedKey(
+            types, binding.dependencies()).asMap().values()) {
+      BindingKey key = Iterables.getOnlyElement(FluentIterable.from(requestsForKey)
+          .transform(DependencyRequest.BINDING_KEY_FUNCTION));
       ResolvedBindings resolvedBindings = graph.resolvedBindings().get(key);
       Class<?> frameworkClass =
           DependencyRequestMapper.FOR_PRODUCER.getFrameworkClass(requestsForKey);
@@ -1054,4 +1039,3 @@ private static String simpleVariableName(TypeElement typeElement) {
     return UPPER_CAMEL.to(LOWER_CAMEL, typeElement.getSimpleName().toString());
   }
 }
-
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
index 64f804da1..5af9a82c5 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
@@ -57,6 +57,13 @@
 // TODO(gak): Set bindings and the permutations thereof need to be addressed
 @AutoValue
 abstract class DependencyRequest {
+  static Function<DependencyRequest, BindingKey> BINDING_KEY_FUNCTION =
+      new Function<DependencyRequest, BindingKey>() {
+        @Override public BindingKey apply(DependencyRequest request) {
+          return request.bindingKey();
+        }
+      };
+
   enum Kind {
     /** A default request for an instance.  E.g.: {@code Blah} */
     INSTANCE,
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index 10565a1b7..7277d50e1 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -240,9 +240,10 @@ ClassName nameGeneratedType(ProductionBinding binding) {
             ClassName.fromClass(Object.class),
             Joiner.on(",").join(FluentIterable
                 .from(asyncDependencies)
-                .transform(new Function<DependencyRequest, String>() {
-                  @Override public String apply(DependencyRequest dependency) {
-                    return fields.get(dependency.bindingKey()).name() + "Future";
+                .transform(DependencyRequest.BINDING_KEY_FUNCTION)
+                .transform(new Function<BindingKey, String>() {
+                  @Override public String apply(BindingKey dependencyBindingKey) {
+                    return fields.get(dependencyBindingKey).name() + "Future";
                   }
                 })));
         ImmutableList<Snippet> parameterSnippets = getParameterSnippets(binding, fields, "args");
