diff --git a/java/dagger/internal/codegen/DaggerTypes.java b/java/dagger/internal/codegen/DaggerTypes.java
index db483760d..cf161f6b2 100644
--- a/java/dagger/internal/codegen/DaggerTypes.java
+++ b/java/dagger/internal/codegen/DaggerTypes.java
@@ -34,6 +34,7 @@
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.ArrayType;
 import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.ErrorType;
 import javax.lang.model.type.ExecutableType;
 import javax.lang.model.type.NoType;
 import javax.lang.model.type.NullType;
@@ -158,9 +159,27 @@ protected final TypeMirror accessibleType(TypeMirror type, ClassName requestingC
    * javax.lang.model.type.ErrorType}.
    */
   static void checkTypePresent(TypeMirror type) {
-    if (type.getKind().equals(TypeKind.ERROR)) {
-      throw new TypeNotPresentException(type.toString(), null);
-    }
+    type.accept(
+        // TODO(ronshapiro): Extract a base class that visits all components of a complex type
+        // and put it in auto.common
+        new SimpleTypeVisitor8<Void, Void>() {
+          @Override
+          public Void visitArray(ArrayType arrayType, Void p) {
+            return arrayType.getComponentType().accept(this, p);
+          }
+
+          @Override
+          public Void visitDeclared(DeclaredType declaredType, Void p) {
+            declaredType.getTypeArguments().forEach(t -> t.accept(this, p));
+            return null;
+          }
+
+          @Override
+          public Void visitError(ErrorType errorType, Void p) {
+            throw new TypeNotPresentException(type.toString(), null);
+          }
+        },
+        null);
   }
 
   private static final ImmutableSet<Class<?>> FUTURE_TYPES =
diff --git a/javatests/dagger/functional/NeedsProviderOfFactory.java b/javatests/dagger/functional/NeedsProviderOfFactory.java
new file mode 100644
index 000000000..efbd73df8
--- /dev/null
+++ b/javatests/dagger/functional/NeedsProviderOfFactory.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional;
+
+import com.google.auto.factory.AutoFactory;
+import dagger.Component;
+import javax.inject.Inject;
+import javax.inject.Provider;
+
+// b/73455487
+class NeedsProviderOfFactory {
+  static class InjectsProviderOfFactory {
+    @Inject
+    InjectsProviderOfFactory(
+        Provider<NeedsProviderOfFactory_SomethingFactory> provider) {}
+  }
+
+  @Component
+  interface ExposesFactoryAsProvider {
+    InjectsProviderOfFactory injectsProviderOfFactory();
+  }
+
+  @AutoFactory
+  static class Something {}
+}
