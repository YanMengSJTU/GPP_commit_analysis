diff --git a/compiler/src/it/producers-functional-tests/src/main/java/test/MultibindingProducerModule.java b/compiler/src/it/producers-functional-tests/src/main/java/test/MultibindingProducerModule.java
index 3531201c1..4651afcc6 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/test/MultibindingProducerModule.java
+++ b/compiler/src/it/producers-functional-tests/src/main/java/test/MultibindingProducerModule.java
@@ -36,7 +36,7 @@
   }
 
   @Produces(type = SET_VALUES) ListenableFuture<Set<String>> futureStrs() {
-    return Futures.immediateFuture((Set<String>) ImmutableSet.of("foo1", "foo2"));
+    return Futures.<Set<String>>immediateFuture(ImmutableSet.of("foo1", "foo2"));
   }
 
   @Produces(type = SET_VALUES) Set<String> strs() {
diff --git a/producers/src/test/java/dagger/producers/internal/SetProducerTest.java b/producers/src/test/java/dagger/producers/internal/SetProducerTest.java
index 0aafd77de..1f8ff7c3a 100644
--- a/producers/src/test/java/dagger/producers/internal/SetProducerTest.java
+++ b/producers/src/test/java/dagger/producers/internal/SetProducerTest.java
@@ -36,15 +36,15 @@
 public class SetProducerTest {
   @Test public void success() throws Exception {
     Producer<Set<Integer>> producer = SetProducer.create(
-        immediateProducer((Set<Integer>) ImmutableSet.of(1, 2)),
-        immediateProducer((Set<Integer>) ImmutableSet.of(5, 7)));
+        new ImmediateProducer<Set<Integer>>(ImmutableSet.of(1, 2)),
+        new ImmediateProducer<Set<Integer>>(ImmutableSet.of(5, 7)));
     assertThat(producer.get().get()).containsExactly(1, 2, 5, 7);
   }
 
   @Test public void delegateSetNpe() throws Exception {
     Producer<Set<Integer>> producer = SetProducer.create(
-        immediateProducer((Set<Integer>) ImmutableSet.of(1, 2)),
-        immediateProducer((Set<Integer>) null));
+        new ImmediateProducer<Set<Integer>>(ImmutableSet.of(1, 2)),
+        new ImmediateProducer<Set<Integer>>(null));
     ListenableFuture<Set<Integer>> future = producer.get();
     try {
       future.get();
@@ -56,8 +56,9 @@
 
   @Test public void delegateElementNpe() throws Exception {
     Producer<Set<Integer>> producer = SetProducer.create(
-        immediateProducer((Set<Integer>) ImmutableSet.of(1, 2)),
-        immediateProducer(Collections.singleton((Integer) null)));
+        new ImmediateProducer<Set<Integer>>(ImmutableSet.of(1, 2)),
+        new ImmediateProducer<Set<Integer>>(
+            Collections.<Integer>singleton(null)));
     ListenableFuture<Set<Integer>> future = producer.get();
     try {
       future.get();
@@ -78,8 +79,4 @@
       return Futures.immediateFuture(value);
     }
   }
-
-  private static <T> Producer<T> immediateProducer(T value) {
-    return new ImmediateProducer<T>(value);
-  }
 }
