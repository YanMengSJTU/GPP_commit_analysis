diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
index 6735fd25c..f2a24384f 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
@@ -49,7 +49,6 @@ public void testEmptyBuilder() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -303,7 +302,6 @@ public void testMoreThanOneBuilderFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -332,7 +330,6 @@ public void testBuilderGenericsFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -371,7 +368,6 @@ public void testBuilderMissingBuildMethodFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -392,7 +388,6 @@ public void testPrivateBuilderFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -413,7 +408,6 @@ public void testNonStaticBuilderFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -434,7 +428,6 @@ public void testNonAbstractBuilderFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -454,7 +447,6 @@ public void testBuilderOneCxtorWithArgsFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -477,7 +469,6 @@ public void testBuilderMoreThanOneCxtorFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -501,7 +492,6 @@ public void testBuilderEnumFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -522,7 +512,6 @@ public void testBuilderBuildReturnsWrongTypeFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -536,7 +525,7 @@ public void testBuilderBuildReturnsWrongTypeFails() {
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(MSGS.buildMustReturnComponentType())
-            .in(componentFile).onLine(11);
+            .in(componentFile).onLine(10);
   }
 
   @Test
@@ -545,7 +534,6 @@ public void testInheritedBuilderBuildReturnsWrongTypeFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -562,7 +550,7 @@ public void testInheritedBuilderBuildReturnsWrongTypeFails() {
         .failsToCompile()
         .withErrorContaining(
             String.format(MSGS.inheritedBuildMustReturnComponentType(), "build"))
-            .in(componentFile).onLine(14);
+            .in(componentFile).onLine(13);
   }
 
   @Test
@@ -571,7 +559,6 @@ public void testTwoBuildMethodsFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -586,7 +573,7 @@ public void testTwoBuildMethodsFails() {
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(String.format(MSGS.twoBuildMethods(), "build()"))
-            .in(componentFile).onLine(12);
+            .in(componentFile).onLine(11);
   }
 
   @Test
@@ -595,7 +582,6 @@ public void testInheritedTwoBuildMethodsFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -613,7 +599,7 @@ public void testInheritedTwoBuildMethodsFails() {
         .failsToCompile()
         .withErrorContaining(
             String.format(MSGS.inheritedTwoBuildMethods(), "create()", "build()"))
-            .in(componentFile).onLine(15);
+            .in(componentFile).onLine(14);
   }
 
   @Test
@@ -622,7 +608,6 @@ public void testMoreThanOneArgFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -638,9 +623,9 @@ public void testMoreThanOneArgFails() {
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(MSGS.methodsMustTakeOneArg())
-            .in(componentFile).onLine(12)
+            .in(componentFile).onLine(11)
         .and().withErrorContaining(MSGS.methodsMustTakeOneArg())
-            .in(componentFile).onLine(13);
+            .in(componentFile).onLine(12);
   }
 
   @Test
@@ -649,7 +634,6 @@ public void testInheritedMoreThanOneArgFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -668,7 +652,7 @@ public void testInheritedMoreThanOneArgFails() {
         .withErrorContaining(
             String.format(MSGS.inheritedMethodsMustTakeOneArg(),
                 "set1(java.lang.String,java.lang.Integer)"))
-            .in(componentFile).onLine(15);
+            .in(componentFile).onLine(14);
   }
 
   @Test
@@ -677,7 +661,6 @@ public void testSetterReturningNonVoidOrBuilderFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -692,7 +675,7 @@ public void testSetterReturningNonVoidOrBuilderFails() {
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(MSGS.methodsMustReturnVoidOrBuilder())
-            .in(componentFile).onLine(12);
+            .in(componentFile).onLine(11);
   }
 
   @Test
@@ -701,7 +684,6 @@ public void testInheritedSetterReturningNonVoidOrBuilderFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -720,7 +702,7 @@ public void testInheritedSetterReturningNonVoidOrBuilderFails() {
         .withErrorContaining(
             String.format(MSGS.inheritedMethodsMustReturnVoidOrBuilder(),
                 "set(java.lang.Integer)"))
-            .in(componentFile).onLine(15);
+            .in(componentFile).onLine(14);
   }
 
   @Test
@@ -729,7 +711,6 @@ public void testGenericsOnSetterMethodFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -744,7 +725,7 @@ public void testGenericsOnSetterMethodFails() {
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(MSGS.methodsMayNotHaveTypeParameters())
-            .in(componentFile).onLine(12);
+            .in(componentFile).onLine(11);
   }
 
   @Test
@@ -753,7 +734,6 @@ public void testGenericsOnInheritedSetterMethodFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -771,7 +751,7 @@ public void testGenericsOnInheritedSetterMethodFails() {
         .failsToCompile()
         .withErrorContaining(
             String.format(MSGS.inheritedMethodsMayNotHaveTypeParameters(), "<T>set(T)"))
-            .in(componentFile).onLine(15);
+            .in(componentFile).onLine(14);
   }
 
   @Test
@@ -780,7 +760,6 @@ public void testMultipleSettersPerTypeFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -798,7 +777,7 @@ public void testMultipleSettersPerTypeFails() {
         .withErrorContaining(
             String.format(MSGS.manyMethodsForType(),
                   "java.lang.String", "[set1(java.lang.String), set2(java.lang.String)]"))
-            .in(componentFile).onLine(10);
+            .in(componentFile).onLine(9);
   }
 
   @Test
@@ -807,7 +786,6 @@ public void testMultipleSettersPerTypeIncludingResolvedGenericsFails() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -828,7 +806,7 @@ public void testMultipleSettersPerTypeIncludingResolvedGenericsFails() {
         .withErrorContaining(
             String.format(MSGS.manyMethodsForType(),
                   "java.lang.String", "[set1(T), set2(java.lang.String)]"))
-            .in(componentFile).onLine(14);
+            .in(componentFile).onLine(13);
   }
 
   @Test
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index ed2d68f18..25ff4dc0f 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -210,7 +210,6 @@
         "",
         "import dagger.Component;",
         "import dagger.Lazy;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -474,7 +473,6 @@
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component(modules = TestModule.class)",
@@ -592,7 +590,6 @@ public void componentWithAbstractModule() {
             "package test;",
             "",
             "import dagger.Component;",
-            "",
             "import javax.inject.Provider;",
             "",
             "@Component(modules = TestModule.class)",
@@ -716,7 +713,6 @@ public void componentWithAbstractModule() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component(modules = TestModule.class)",
@@ -1093,7 +1089,6 @@ public void subcomponentOmitsInheritedBindings() {
         "",
         "import dagger.Component;",
         "import java.util.Set;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component(modules = {EmptySetModule.class, SetModule.class})",
@@ -1206,7 +1201,6 @@ public void subcomponentOmitsInheritedBindings() {
         "",
         "import dagger.Component;",
         "import dagger.Lazy;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -1285,7 +1279,6 @@ public void subcomponentOmitsInheritedBindings() {
         "",
         "import dagger.Component;",
         "import dagger.Lazy;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -1524,7 +1517,6 @@ public void subcomponentOmitsInheritedBindings() {
         "",
         "import dagger.Component;",
         "import dagger.Lazy;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -1536,7 +1528,6 @@ public void subcomponentOmitsInheritedBindings() {
         "",
         "import dagger.Component;",
         "import dagger.Lazy;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component(dependencies = AComponent.class)",
@@ -1644,7 +1635,6 @@ public void subcomponentOmitsInheritedBindings() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component(modules = {TestModule.class, other.test.TestModule.class})",
@@ -1767,7 +1757,6 @@ public void subcomponentOmitsInheritedBindings() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -1854,7 +1843,6 @@ public void subcomponentOmitsInheritedBindings() {
         "",
         "import dagger.Component;",
         "import dagger.Lazy;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -1866,7 +1854,6 @@ public void subcomponentOmitsInheritedBindings() {
         "",
         "import dagger.Component;",
         "import dagger.Lazy;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -1878,7 +1865,6 @@ public void subcomponentOmitsInheritedBindings() {
         "",
         "import dagger.Component;",
         "import dagger.Lazy;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -1939,7 +1925,6 @@ public void subcomponentOmitsInheritedBindings() {
         "",
         "import dagger.Component;",
         "import dagger.Lazy;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -1951,7 +1936,6 @@ public void subcomponentOmitsInheritedBindings() {
         "",
         "import dagger.Component;",
         "import dagger.Lazy;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
@@ -1962,7 +1946,6 @@ public void subcomponentOmitsInheritedBindings() {
         "",
         "import dagger.Component;",
         "import dagger.Lazy;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component(dependencies = SimpleComponent.class)",
@@ -2042,7 +2025,6 @@ public void subcomponentOmitsInheritedBindings() {
         "",
         "import dagger.Component;",
         "import dagger.Lazy;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
diff --git a/compiler/src/test/java/dagger/internal/codegen/GraphValidationScopingTest.java b/compiler/src/test/java/dagger/internal/codegen/GraphValidationScopingTest.java
index 9a63c1352..f4e1e49d2 100644
--- a/compiler/src/test/java/dagger/internal/codegen/GraphValidationScopingTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/GraphValidationScopingTest.java
@@ -348,7 +348,7 @@
         .failsToCompile()
         .withErrorContaining(errorMessage);
   }
-  
+
   @Test
   public void reusableNotAllowedOnComponent() {
     JavaFileObject someComponent =
diff --git a/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java b/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java
index 8a2eb5bc6..1d97a29d9 100644
--- a/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java
@@ -588,7 +588,7 @@ public void falsePositiveCyclicDependencyIndirectionDetected() {
         .failsToCompile()
         .withErrorContaining(expectedError).in(component).onLine(24);
   }
-  
+
   @Test
   public void duplicateExplicitBindings_ProvidesVsBinds() {
     JavaFileObject component =
@@ -638,7 +638,7 @@ public void duplicateExplicitBindings_ProvidesVsBinds() {
         .in(component)
         .onLine(28);
   }
-  
+
   @Test public void duplicateExplicitBindings_MultipleProvisionTypes() {
     JavaFileObject component = JavaFileObjects.forSourceLines("test.Outer",
         "package test;",
@@ -740,6 +740,8 @@ public void duplicateExplicitBindings_UniqueBindingAndMultibindingDeclaration()
             "test.Outer",
             "package test;",
             "",
+            "import static java.lang.annotation.RetentionPolicy.RUNTIME;",
+            "",
             "import dagger.Component;",
             "import dagger.Module;",
             "import dagger.Multibindings;",
@@ -749,8 +751,6 @@ public void duplicateExplicitBindings_UniqueBindingAndMultibindingDeclaration()
             "import java.util.Map;",
             "import java.util.Set;",
             "",
-            "import static java.lang.annotation.RetentionPolicy.RUNTIME;",
-            "",
             "final class Outer {",
             "  @Module",
             "  static class TestModule1 {",
@@ -804,7 +804,7 @@ public void duplicateExplicitBindings_UniqueBindingAndMultibindingDeclaration()
         .in(component)
         .onLine(36);
   }
-  
+
   @Test public void duplicateBindings_TruncateAfterLimit() {
     JavaFileObject component = JavaFileObjects.forSourceLines("test.Outer",
         "package test;",
@@ -1410,7 +1410,7 @@ public void bindsMethodAppearsInTrace() {
         .and()
         .withErrorContaining(shortErrorMessage).in(shortLifetime);
   }
-  
+
   @Test
   public void subcomponentBindingConflictsWithParent() {
     JavaFileObject parentChildConflict =
@@ -1437,7 +1437,7 @@ public void subcomponentBindingConflictsWithParent() {
             "import javax.inject.Qualifier;",
             "",
             "@Qualifier @interface ChildGrandchildConflict {}");
-    
+
     /* Some annotation processor implementations do not report more than one error per element. So
      * separate parents for testing parent-conflicts-with-child and
      * parent-conflicts-with-grandchild.
@@ -1640,7 +1640,7 @@ public void subcomponentBindingConflictsWithParentWithNullableViolationAsWarning
         .in(parentConflictsWithChild)
         .onLine(9);
   }
-  
+
   @Test
   public void bindingUsedOnlyInSubcomponentDependsOnBindingOnlyInSubcomponent() {
     JavaFileObject parent =
@@ -1694,7 +1694,7 @@ public void bindingUsedOnlyInSubcomponentDependsOnBindingOnlyInSubcomponent() {
         .in(parent)
         .onLine(4);
   }
-  
+
   @Test
   public void multibindingContributionBetweenAncestorComponentAndEntrypointComponent() {
     JavaFileObject parent =
diff --git a/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java b/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java
index e83d5a5e5..df427c5a5 100644
--- a/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java
@@ -67,7 +67,6 @@
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import foreign.PublicClass;",
         "import javax.inject.Provider;",
         "",
@@ -197,7 +196,6 @@
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index e21df157a..7f167647d 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -392,7 +392,6 @@ public void providesMethodReturnsProduced() {
         "import dagger.MembersInjector;",
         "import dagger.Module;",
         "import dagger.Provides;",
-        "",
         "import java.util.Arrays;",
         "import java.util.List;",
         "",
@@ -1118,7 +1117,6 @@ public void genericSubclassedModule() {
         "",
         "import dagger.Module;",
         "import dagger.Provides;",
-        "",
         "import javax.annotation.Nullable;",
         "import javax.inject.Singleton;",
         "",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MultibindingTest.java b/compiler/src/test/java/dagger/internal/codegen/MultibindingTest.java
index e22ffaba2..714122270 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MultibindingTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MultibindingTest.java
@@ -33,13 +33,13 @@ public void providesTypeAndAnnotationOnSameMethod_failsToCompile() {
             "test.MultibindingModule",
             "package test;",
             "",
+            "import static dagger.Provides.Type.SET;",
+            "import static dagger.Provides.Type.UNIQUE;",
+            "",
             "import dagger.Module;",
             "import dagger.Provides;",
             "import dagger.multibindings.IntoSet;",
             "",
-            "import static dagger.Provides.Type.SET;",
-            "import static dagger.Provides.Type.UNIQUE;",
-            "",
             "@Module",
             "class MultibindingModule {",
             "  @Provides(type = SET) @IntoSet Integer provideInt() { ",
@@ -97,12 +97,12 @@ public void producesTypeAndAnnotationOnSameMethod_failsToCompile() {
             "test.MultibindingModule",
             "package test;",
             "",
+            "import static dagger.producers.Produces.Type.SET;",
+            "",
             "import dagger.producers.ProducerModule;",
             "import dagger.producers.Produces;",
             "import dagger.multibindings.IntoSet;",
             "",
-            "import static dagger.producers.Produces.Type.SET;",
-            "",
             "@ProducerModule",
             "class MultibindingModule {",
             "  @Produces(type = SET) @IntoSet Integer produceInt() { ",
@@ -127,7 +127,6 @@ public void appliedOnInvalidMethods_failsToCompile() {
             "",
             "import java.util.Set;",
             "import java.util.Map;",
-            "",
             "import dagger.Component;",
             "import dagger.multibindings.IntoSet;",
             "import dagger.multibindings.ElementsIntoSet;",
@@ -145,16 +144,16 @@ public void appliedOnInvalidMethods_failsToCompile() {
         .withErrorContaining(
             "Multibinding annotations may only be on @Provides, @Produces, or @Binds methods")
         .in(component)
-        .onLine(12)
+        .onLine(11)
         .and()
         .withErrorContaining(
             "Multibinding annotations may only be on @Provides, @Produces, or @Binds methods")
         .in(component)
-        .onLine(13)
+        .onLine(12)
         .and()
         .withErrorContaining(
             "Multibinding annotations may only be on @Provides, @Produces, or @Binds methods")
         .in(component)
-        .onLine(14);
+        .onLine(13);
   }
 }
diff --git a/compiler/src/test/java/dagger/internal/codegen/MultibindingsValidatorTest.java b/compiler/src/test/java/dagger/internal/codegen/MultibindingsValidatorTest.java
index 1be3658ba..95248e4c3 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MultibindingsValidatorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MultibindingsValidatorTest.java
@@ -50,7 +50,7 @@
           "",
           "@Qualifier",
           "@interface OtherQualifier {}");
-  
+
   @Test
   public void abstractClass() {
     JavaFileObject testModule =
@@ -201,7 +201,7 @@ public void notWithinModule() {
         .in(testModule)
         .onLine(9);
   }
-  
+
   @Test
   public void voidMethod() {
     assertThatMultibindingsMethod("void voidMethod();")
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
index 733e16717..0a979bce3 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
@@ -47,7 +47,7 @@
 
 @RunWith(JUnit4.class)
 public class ProducerModuleFactoryGeneratorTest {
-  
+
   private String formatErrorMessage(String msg) {
     return String.format(msg, "Produces");
   }
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProductionGraphValidationTest.java b/compiler/src/test/java/dagger/internal/codegen/ProductionGraphValidationTest.java
index e47178faa..96d573b1a 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProductionGraphValidationTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProductionGraphValidationTest.java
@@ -347,7 +347,7 @@ public void monitoringDependsOnProduction() {
         .in(component)
         .onLine(37);
   }
-  
+
   @Test
   public void cycleNotBrokenByMap() {
     JavaFileObject component =
diff --git a/compiler/src/test/java/dagger/internal/codegen/SubcomponentBuilderValidationTest.java b/compiler/src/test/java/dagger/internal/codegen/SubcomponentBuilderValidationTest.java
index 0e8e61cf0..3cb0e16be 100644
--- a/compiler/src/test/java/dagger/internal/codegen/SubcomponentBuilderValidationTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/SubcomponentBuilderValidationTest.java
@@ -30,23 +30,22 @@
 /** Tests for {@link dagger.Subcomponent.Builder} validation. */
 @RunWith(JUnit4.class)
 public class SubcomponentBuilderValidationTest {
-  
+
   private static final ErrorMessages.SubcomponentBuilderMessages MSGS =
       new ErrorMessages.SubcomponentBuilderMessages();
-  
+
   @Test
   public void testRefSubcomponentAndSubBuilderFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.ParentComponent",
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
         "interface ParentComponent {",
         "  ChildComponent child();",
-        "  ChildComponent.Builder builder();",        
+        "  ChildComponent.Builder builder();",
         "}");
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
         "package test;",
@@ -67,20 +66,19 @@ public void testRefSubcomponentAndSubBuilderFails() {
             "test.ChildComponent", "[child(), builder()]"))
         .in(componentFile);
   }
-  
+
   @Test
   public void testRefSubBuilderTwiceFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.ParentComponent",
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
         "interface ParentComponent {",
         "  ChildComponent.Builder builder1();",
-        "  ChildComponent.Builder builder2();",        
+        "  ChildComponent.Builder builder2();",
         "}");
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
         "package test;",
@@ -101,19 +99,18 @@ public void testRefSubBuilderTwiceFails() {
             "test.ChildComponent", "[builder1(), builder2()]"))
         .in(componentFile);
   }
-  
+
   @Test
   public void testMoreThanOneBuilderFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.ParentComponent",
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
         "interface ParentComponent {",
-        "  ChildComponent.Builder1 build();",        
+        "  ChildComponent.Builder1 build();",
         "}");
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
         "package test;",
@@ -139,19 +136,18 @@ public void testMoreThanOneBuilderFails() {
             "[test.ChildComponent.Builder1, test.ChildComponent.Builder2]"))
         .in(childComponentFile);
   }
-  
+
   @Test
   public void testBuilderGenericsFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.ParentComponent",
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
         "interface ParentComponent {",
-        "  ChildComponent.Builder1 build();",        
+        "  ChildComponent.Builder1 build();",
         "}");
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
         "package test;",
@@ -163,7 +159,7 @@ public void testBuilderGenericsFails() {
         "  @Subcomponent.Builder",
         "  interface Builder<T> {",
         "     ChildComponent build();",
-        "  }",           
+        "  }",
         "}");
     assertAbout(javaSources()).that(ImmutableList.of(componentFile, childComponentFile))
         .processedWith(new ComponentProcessor())
@@ -171,7 +167,7 @@ public void testBuilderGenericsFails() {
         .withErrorContaining(MSGS.generics())
         .in(childComponentFile);
   }
-  
+
   @Test
   public void testBuilderNotInComponentFails() {
     JavaFileObject builder = JavaFileObjects.forSourceLines("test.Builder",
@@ -187,19 +183,18 @@ public void testBuilderNotInComponentFails() {
         .withErrorContaining(MSGS.mustBeInComponent())
         .in(builder);
   }
-  
+
   @Test
   public void testBuilderMissingBuildMethodFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.ParentComponent",
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
         "interface ParentComponent {",
-        "  ChildComponent.Builder1 build();",        
+        "  ChildComponent.Builder1 build();",
         "}");
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
         "package test;",
@@ -217,7 +212,7 @@ public void testBuilderMissingBuildMethodFails() {
         .withErrorContaining(MSGS.missingBuildMethod())
         .in(childComponentFile);
   }
-  
+
   @Test
   public void testPrivateBuilderFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -236,7 +231,7 @@ public void testPrivateBuilderFails() {
         .withErrorContaining(MSGS.isPrivate())
         .in(childComponentFile);
   }
-  
+
   @Test
   public void testNonStaticBuilderFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -255,7 +250,7 @@ public void testNonStaticBuilderFails() {
         .withErrorContaining(MSGS.mustBeStatic())
         .in(childComponentFile);
   }
-  
+
   @Test
   public void testNonAbstractBuilderFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -274,7 +269,7 @@ public void testNonAbstractBuilderFails() {
         .withErrorContaining(MSGS.mustBeAbstract())
         .in(childComponentFile);
   }
-  
+
   @Test
   public void testBuilderOneCxtorWithArgsFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -295,7 +290,7 @@ public void testBuilderOneCxtorWithArgsFails() {
         .withErrorContaining(MSGS.cxtorOnlyOneAndNoArgs())
         .in(childComponentFile);
   }
-  
+
   @Test
   public void testBuilderMoreThanOneCxtorFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -317,7 +312,7 @@ public void testBuilderMoreThanOneCxtorFails() {
         .withErrorContaining(MSGS.cxtorOnlyOneAndNoArgs())
         .in(childComponentFile);
   }
-  
+
   @Test
   public void testBuilderEnumFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -336,7 +331,7 @@ public void testBuilderEnumFails() {
         .withErrorContaining(MSGS.mustBeClassOrInterface())
         .in(childComponentFile);
   }
-  
+
   @Test
   public void testBuilderBuildReturnsWrongTypeFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -357,7 +352,7 @@ public void testBuilderBuildReturnsWrongTypeFails() {
         .withErrorContaining(MSGS.buildMustReturnComponentType())
             .in(childComponentFile).onLine(9);
   }
-  
+
   @Test
   public void testInheritedBuilderBuildReturnsWrongTypeFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -381,7 +376,7 @@ public void testInheritedBuilderBuildReturnsWrongTypeFails() {
             String.format(MSGS.inheritedBuildMustReturnComponentType(), "build"))
             .in(childComponentFile).onLine(12);
   }
-  
+
   @Test
   public void testTwoBuildMethodsFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -403,7 +398,7 @@ public void testTwoBuildMethodsFails() {
         .withErrorContaining(String.format(MSGS.twoBuildMethods(), "build()"))
             .in(childComponentFile).onLine(10);
   }
-  
+
   @Test
   public void testInheritedTwoBuildMethodsFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -428,7 +423,7 @@ public void testInheritedTwoBuildMethodsFails() {
             String.format(MSGS.inheritedTwoBuildMethods(), "create()", "build()"))
             .in(childComponentFile).onLine(13);
   }
-  
+
   @Test
   public void testMoreThanOneArgFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -453,7 +448,7 @@ public void testMoreThanOneArgFails() {
         .and().withErrorContaining(MSGS.methodsMustTakeOneArg())
             .in(childComponentFile).onLine(11);
   }
-  
+
   @Test
   public void testInheritedMoreThanOneArgFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -479,7 +474,7 @@ public void testInheritedMoreThanOneArgFails() {
                 "set1(java.lang.String,java.lang.Integer)"))
             .in(childComponentFile).onLine(13);
   }
-  
+
   @Test
   public void testSetterReturningNonVoidOrBuilderFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -501,7 +496,7 @@ public void testSetterReturningNonVoidOrBuilderFails() {
         .withErrorContaining(MSGS.methodsMustReturnVoidOrBuilder())
             .in(childComponentFile).onLine(10);
   }
-  
+
   @Test
   public void testInheritedSetterReturningNonVoidOrBuilderFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -525,9 +520,9 @@ public void testInheritedSetterReturningNonVoidOrBuilderFails() {
         .withErrorContaining(
             String.format(MSGS.inheritedMethodsMustReturnVoidOrBuilder(),
                 "set(java.lang.Integer)"))
-            .in(childComponentFile).onLine(13);    
+            .in(childComponentFile).onLine(13);
   }
-  
+
   @Test
   public void testGenericsOnSetterMethodFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -549,7 +544,7 @@ public void testGenericsOnSetterMethodFails() {
         .withErrorContaining(MSGS.methodsMayNotHaveTypeParameters())
             .in(childComponentFile).onLine(10);
   }
-  
+
   @Test
   public void testGenericsOnInheritedSetterMethodFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -572,9 +567,9 @@ public void testGenericsOnInheritedSetterMethodFails() {
         .failsToCompile()
         .withErrorContaining(
             String.format(MSGS.inheritedMethodsMayNotHaveTypeParameters(), "<T>set(T)"))
-            .in(childComponentFile).onLine(13);    
+            .in(childComponentFile).onLine(13);
   }
-  
+
   @Test
   public void testMultipleSettersPerTypeFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -599,7 +594,7 @@ public void testMultipleSettersPerTypeFails() {
                   "java.lang.String", "[set1(java.lang.String), set2(java.lang.String)]"))
             .in(childComponentFile).onLine(8);
   }
-  
+
   @Test
   public void testMultipleSettersPerTypeIncludingResolvedGenericsFails() {
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
@@ -627,19 +622,18 @@ public void testMultipleSettersPerTypeIncludingResolvedGenericsFails() {
                   "java.lang.String", "[set1(T), set2(java.lang.String)]"))
             .in(childComponentFile).onLine(12);
   }
-  
+
   @Test
   public void testExtraSettersFails() {
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.ParentComponent",
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
         "interface ParentComponent {",
-        "  ChildComponent.Builder build();",        
+        "  ChildComponent.Builder build();",
         "}");
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
         "package test;",
@@ -663,9 +657,8 @@ public void testExtraSettersFails() {
                   "[void test.ChildComponent.Builder.set1(String),"
                   + " void test.ChildComponent.Builder.set2(Integer)]"))
             .in(childComponentFile).onLine(8);
-    
   }
-  
+
   @Test
   public void testMissingSettersFail() {
     JavaFileObject moduleFile = JavaFileObjects.forSourceLines("test.TestModule",
@@ -704,12 +697,11 @@ public void testMissingSettersFail() {
         "package test;",
         "",
         "import dagger.Component;",
-        "",
         "import javax.inject.Provider;",
         "",
         "@Component",
         "interface ParentComponent {",
-        "  ChildComponent.Builder build();",        
+        "  ChildComponent.Builder build();",
         "}");
     JavaFileObject childComponentFile = JavaFileObjects.forSourceLines("test.ChildComponent",
         "package test;",
