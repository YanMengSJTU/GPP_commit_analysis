diff --git a/compiler/src/main/java/dagger/internal/codegen/Binding.java b/compiler/src/main/java/dagger/internal/codegen/Binding.java
index 4b05e88aa..edb8ad6b3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Binding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Binding.java
@@ -91,9 +91,9 @@ public TypeElement visitType(TypeElement e, Void p) {
 
   /**
    * The set of {@link DependencyRequest dependencies} required to satisfy this binding. This is a
-   * superset of {@link #dependencies()}.
+   * superset of {@link #dependencies()}.  This returns an unmodifiable set.
    */
-  abstract ImmutableSet<DependencyRequest> implicitDependencies();
+  abstract Set<DependencyRequest> implicitDependencies();
 
   /**
    * Returns the name of the package in which this binding must be managed. E.g.: a binding
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
index 1b10497bc..1f5417936 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -63,6 +63,7 @@
 
 import static com.google.auto.common.MoreElements.getAnnotationMirror;
 import static com.google.auto.common.MoreTypes.isTypeOf;
+import static com.google.common.base.Verify.verify;
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.ConfigurationAnnotations.getComponentDependencies;
 import static dagger.internal.codegen.ErrorMessages.INDENT;
@@ -127,39 +128,41 @@
         subject.componentDescriptor().componentMethods()) {
       Optional<DependencyRequest> entryPoint = componentMethod.dependencyRequest();
       if (entryPoint.isPresent()) {
-        traverseRequest(entryPoint.get(), new ArrayDeque<ResolvedRequest>(), subject,
-            reportBuilder);
+        traverseRequest(entryPoint.get(), new ArrayDeque<ResolvedRequest>(),
+            Sets.<BindingKey>newHashSet(), subject, reportBuilder);
       }
     }
 
     validateSubcomponents(subject, reportBuilder);
-
     return reportBuilder.build();
   }
 
   private void traverseRequest(
       DependencyRequest request,
       Deque<ResolvedRequest> bindingPath,
+      Set<BindingKey> keysInPath,
       BindingGraph graph,
       ValidationReport.Builder<BindingGraph> reportBuilder) {
+    verify(bindingPath.size() == keysInPath.size(),
+        "mismatched path vs keys -- (%s vs %s)", bindingPath, keysInPath);
     BindingKey requestKey = request.bindingKey();
-    for (ResolvedRequest pathElement : bindingPath) {
-      if (pathElement.request().bindingKey().equals(requestKey)) {
-        reportCycle(request, bindingPath, reportBuilder);
-        return;
-      }
+    if (keysInPath.contains(requestKey)) {
+      reportCycle(request, bindingPath, reportBuilder);
+      return;
     }
 
     ResolvedRequest resolvedRequest = ResolvedRequest.create(request, graph);
     bindingPath.push(resolvedRequest);
+    keysInPath.add(requestKey);
     validateResolvedBinding(bindingPath, resolvedRequest.binding(), reportBuilder);
 
     for (Binding binding : resolvedRequest.binding().bindings()) {
       for (DependencyRequest nextRequest : binding.implicitDependencies()) {
-        traverseRequest(nextRequest, bindingPath, graph, reportBuilder);
+        traverseRequest(nextRequest, bindingPath, keysInPath, graph, reportBuilder);
       }
     }
     bindingPath.poll();
+    keysInPath.remove(requestKey);
   }
 
   private void validateSubcomponents(BindingGraph graph,
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java b/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
index 89383a292..aec51f038 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
@@ -24,6 +24,7 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
 import dagger.Provides;
+import java.util.Set;
 import javax.inject.Inject;
 import javax.inject.Provider;
 import javax.lang.model.element.AnnotationMirror;
@@ -63,11 +64,14 @@
 @AutoValue
 abstract class ProvisionBinding extends ContributionBinding {
   @Override
-  ImmutableSet<DependencyRequest> implicitDependencies() {
-    return new ImmutableSet.Builder<DependencyRequest>()
-        .addAll(memberInjectionRequest().asSet())
-        .addAll(dependencies())
-        .build();
+  Set<DependencyRequest> implicitDependencies() {
+    // Optimization: If we don't need the memberInjectionRequest, don't create more objects.
+    if (!memberInjectionRequest().isPresent()) {
+      return dependencies();
+    } else {
+      // Optimization: Avoid creating an ImmutableSet+Builder just to union two things together.
+      return Sets.union(memberInjectionRequest().asSet(), dependencies());
+    }
   }
 
   enum Kind {
