diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingMethodValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingMethodValidator.java
index 99d6627e6..f719273d9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingMethodValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingMethodValidator.java
@@ -17,6 +17,9 @@
 
 import com.google.common.base.Function;
 import com.google.common.base.Joiner;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
@@ -27,6 +30,7 @@
 import dagger.multibindings.IntoMap;
 import dagger.producers.Produces;
 import java.lang.annotation.Annotation;
+import javax.annotation.processing.Messager;
 import javax.inject.Qualifier;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.ExecutableElement;
@@ -65,8 +69,8 @@
 import static javax.lang.model.type.TypeKind.TYPEVAR;
 import static javax.lang.model.type.TypeKind.VOID;
 
-/** A {@link Validator} for methods that represent binding declarations. */
-abstract class BindingMethodValidator extends Validator<ExecutableElement> {
+/** A validator for methods that represent binding declarations. */
+abstract class BindingMethodValidator {
 
   private final Elements elements;
   private final Types types;
@@ -74,6 +78,18 @@
   private final ImmutableList<Class<? extends Annotation>> enclosingElementAnnotations;
   private final Abstractness abstractness;
   private final ExceptionSuperclass exceptionSuperclass;
+  private final LoadingCache<ExecutableElement, ValidationReport<ExecutableElement>> cache =
+      CacheBuilder.newBuilder()
+          .build(
+              new CacheLoader<ExecutableElement, ValidationReport<ExecutableElement>>() {
+                @Override
+                public ValidationReport<ExecutableElement> load(ExecutableElement method) {
+                  ValidationReport.Builder<ExecutableElement> builder =
+                      ValidationReport.about(method);
+                  checkMethod(builder);
+                  return builder.build();
+                }
+              });
 
   /**
    * Creates a validator object.
@@ -120,12 +136,29 @@ protected BindingMethodValidator(
     this.abstractness = abstractness;
     this.exceptionSuperclass = exceptionSuperclass;
   }
+  
+  /** The annotation that identifies methods validated by this object. */
+  Class<? extends Annotation> methodAnnotation() {
+    return methodAnnotation;
+  }
+
+  /** Returns a {@link ValidationReport} for {@code method}. */
+  final ValidationReport<ExecutableElement> validate(ExecutableElement method) {
+    return cache.getUnchecked(method);
+  }
 
-  @Override
-  public final ValidationReport<ExecutableElement> validate(ExecutableElement method) {
-    ValidationReport.Builder<ExecutableElement> builder = ValidationReport.about(method);
-    checkMethod(builder);
-    return builder.build();
+  /** Prints validation reports to {@code messager}, and returns valid methods. */
+  final ImmutableSet<ExecutableElement> validate(
+      Messager messager, Iterable<? extends ExecutableElement> methods) {
+    ImmutableSet.Builder<ExecutableElement> validMethods = ImmutableSet.builder();
+    for (ExecutableElement method : methods) {
+      ValidationReport<ExecutableElement> report = validate(method);
+      report.printMessagesTo(messager);
+      if (report.isClean()) {
+        validMethods.add(method);
+      }
+    }
+    return validMethods.build();
   }
 
   /** Checks the method for validity. Adds errors to {@code builder}. */
diff --git a/compiler/src/main/java/dagger/internal/codegen/CachingValidator.java b/compiler/src/main/java/dagger/internal/codegen/CachingValidator.java
deleted file mode 100644
index fe5aaf180..000000000
--- a/compiler/src/main/java/dagger/internal/codegen/CachingValidator.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- * Copyright (C) 2016 Google, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package dagger.internal.codegen;
-
-import com.google.common.cache.CacheBuilder;
-import com.google.common.cache.CacheLoader;
-import com.google.common.cache.LoadingCache;
-import javax.lang.model.element.Element;
-
-/** A decorator for {@link Validator}s that caches validation reports. */
-final class CachingValidator<T extends Element> extends Validator<T> {
-
-  private final LoadingCache<T, ValidationReport<T>> cache;
-
-  /** A {@link Validator} that caches validation reports from {@code validator}. */
-  static <T extends Element> CachingValidator<T> caching(Validator<T> validator) {
-    return new CachingValidator<T>(validator);
-  }
-
-  private CachingValidator(final Validator<T> validator) {
-    this.cache =
-        CacheBuilder.newBuilder()
-            .build(
-                new CacheLoader<T, ValidationReport<T>>() {
-                  @Override
-                  public ValidationReport<T> load(T key) {
-                    return validator.validate(key);
-                  }
-                });
-  }
-
-  @Override
-  public ValidationReport<T> validate(T element) {
-    return cache.getUnchecked(element);
-  }
-}
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index 987631409..70a12928f 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -23,7 +23,6 @@
 import javax.annotation.processing.Messager;
 import javax.annotation.processing.Processor;
 import javax.lang.model.SourceVersion;
-import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
@@ -85,8 +84,7 @@ public SourceVersion getSupportedSourceVersion() {
     MapKeyValidator mapKeyValidator = new MapKeyValidator();
     ProvidesMethodValidator providesMethodValidator = new ProvidesMethodValidator(elements, types);
     ProducesMethodValidator producesMethodValidator = new ProducesMethodValidator(elements, types);
-    Validator<ExecutableElement> bindsMethodValidator =
-        CachingValidator.caching(new BindsMethodValidator(elements, types));
+    BindsMethodValidator bindsMethodValidator = new BindsMethodValidator(elements, types);
 
     Key.Factory keyFactory = new Key.Factory(types, elements);
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java
index 2172e00e8..44712190b 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java
@@ -16,26 +16,23 @@
 package dagger.internal.codegen;
 
 import com.google.auto.common.BasicAnnotationProcessor.ProcessingStep;
-import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.SetMultimap;
 import com.google.common.collect.Sets;
-import dagger.Binds;
 import dagger.Module;
 import dagger.Provides;
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
 import java.lang.annotation.Annotation;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
 import javax.annotation.processing.Messager;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 
+import static com.google.auto.common.MoreElements.isAnnotationPresent;
 import static dagger.internal.codegen.Util.elementsWithAnnotation;
-import static dagger.internal.codegen.Util.isAnyAnnotationPresent;
 import static javax.lang.model.util.ElementFilter.methodsIn;
 import static javax.lang.model.util.ElementFilter.typesIn;
 
@@ -57,7 +54,7 @@
       final ProvisionBinding.Factory provisionBindingFactory,
       FactoryGenerator factoryGenerator,
       ProvidesMethodValidator providesMethodValidator,
-      Validator<ExecutableElement> bindsMethodValidator) {
+      BindsMethodValidator bindsMethodValidator) {
     return new ModuleProcessingStep<>(
         messager,
         Module.class,
@@ -71,8 +68,7 @@ public ProvisionBinding bindingForModuleMethod(
           }
         },
         factoryGenerator,
-        ImmutableMap.of(
-            Provides.class, providesMethodValidator, Binds.class, bindsMethodValidator));
+        ImmutableSet.of(providesMethodValidator, bindsMethodValidator));
   }
 
   /**
@@ -85,7 +81,7 @@ public ProvisionBinding bindingForModuleMethod(
       final ProductionBinding.Factory productionBindingFactory,
       ProducerFactoryGenerator producerFactoryGenerator,
       ProducesMethodValidator producesMethodValidator,
-      Validator<ExecutableElement> bindsMethodValidator) {
+      BindsMethodValidator bindsMethodValidator) {
     return new ModuleProcessingStep<>(
         messager,
         ProducerModule.class,
@@ -99,8 +95,7 @@ public ProductionBinding bindingForModuleMethod(
           }
         },
         producerFactoryGenerator,
-        ImmutableMap.of(
-            Produces.class, producesMethodValidator, Binds.class, bindsMethodValidator));
+        ImmutableSet.of(producesMethodValidator, bindsMethodValidator));
   }
 
   private final Messager messager;
@@ -109,8 +104,7 @@ public ProductionBinding bindingForModuleMethod(
   private final Class<? extends Annotation> factoryMethodAnnotation;
   private final ModuleMethodBindingFactory<B> moduleMethodBindingFactory;
   private final SourceFileGenerator<B> factoryGenerator;
-  private final ImmutableMap<Class<? extends Annotation>, Validator<ExecutableElement>>
-      methodValidators;
+  private final ImmutableSet<? extends BindingMethodValidator> methodValidators;
   private final Set<TypeElement> processedModuleElements = Sets.newLinkedHashSet();
 
   /**
@@ -127,22 +121,24 @@ public ProductionBinding bindingForModuleMethod(
       Class<? extends Annotation> factoryMethodAnnotation,
       ModuleMethodBindingFactory<B> moduleMethodBindingFactory,
       SourceFileGenerator<B> factoryGenerator,
-      Map<Class<? extends Annotation>, Validator<ExecutableElement>> methodValidators) {
+      Iterable<? extends BindingMethodValidator> methodValidators) {
     this.messager = messager;
     this.moduleAnnotation = moduleAnnotation;
     this.moduleValidator = moduleValidator;
     this.factoryMethodAnnotation = factoryMethodAnnotation;
     this.moduleMethodBindingFactory = moduleMethodBindingFactory;
     this.factoryGenerator = factoryGenerator;
-    this.methodValidators = ImmutableMap.copyOf(methodValidators);
+    this.methodValidators = ImmutableSet.copyOf(methodValidators);
   }
 
   @Override
   public Set<? extends Class<? extends Annotation>> annotations() {
-    return new ImmutableSet.Builder<Class<? extends Annotation>>()
-        .add(moduleAnnotation)
-        .addAll(methodValidators.keySet())
-        .build();
+    ImmutableSet.Builder<Class<? extends Annotation>> annotations = ImmutableSet.builder();
+    annotations.add(moduleAnnotation);
+    for (BindingMethodValidator validator : methodValidators) {
+      annotations.add(validator.methodAnnotation());
+    }
+    return annotations.build();
   }
 
   @Override
@@ -176,12 +172,10 @@ public ProductionBinding bindingForModuleMethod(
   private ImmutableSet<ExecutableElement> validMethods(
       SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation) {
     ImmutableSet.Builder<ExecutableElement> validMethods = ImmutableSet.builder();
-    for (Map.Entry<Class<? extends Annotation>, Validator<ExecutableElement>> entry :
-        methodValidators.entrySet()) {
-      Class<? extends Annotation> methodAnnotation = entry.getKey();
-      Validator<ExecutableElement> validator = entry.getValue();
+    for (BindingMethodValidator validator : methodValidators) {
       validMethods.addAll(
-          validator.validate(messager, methodsIn(elementsByAnnotation.get(methodAnnotation))));
+          validator.validate(
+              messager, methodsIn(elementsByAnnotation.get(validator.methodAnnotation()))));
     }
     return validMethods.build();
   }
@@ -193,9 +187,12 @@ public ProductionBinding bindingForModuleMethod(
   private boolean moduleMethodsAreValid(
       ImmutableSet<ExecutableElement> validMethods, Iterable<ExecutableElement> moduleMethods) {
     for (ExecutableElement methodElement : moduleMethods) {
-      if (isAnyAnnotationPresent(methodElement, methodValidators.keySet())
-          && !validMethods.contains(methodElement)) {
-        return false;
+      if (!validMethods.contains(methodElement)) {
+        for (BindingMethodValidator validator : methodValidators) {
+          if (isAnnotationPresent(methodElement, validator.methodAnnotation())) {
+            return false;
+          }
+        }
       }
     }
     return true;
diff --git a/compiler/src/main/java/dagger/internal/codegen/Validator.java b/compiler/src/main/java/dagger/internal/codegen/Validator.java
deleted file mode 100644
index 835e4e851..000000000
--- a/compiler/src/main/java/dagger/internal/codegen/Validator.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Copyright (C) 2016 Google, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package dagger.internal.codegen;
-
-import com.google.common.collect.ImmutableSet;
-import javax.annotation.processing.Messager;
-import javax.lang.model.element.Element;
-
-/** An object that produces a {@link ValidationReport} for an element. */
-abstract class Validator<T extends Element> {
-  /** Returns a {@link ValidationReport} for {@code element}. */
-  abstract ValidationReport<T> validate(T element);
-
-  /** Prints validation reports to {@code messager}, and returns valid elements. */
-  final ImmutableSet<T> validate(Messager messager, Iterable<? extends T> elements) {
-    ImmutableSet.Builder<T> validElements = ImmutableSet.builder();
-    for (T element : elements) {
-      ValidationReport<T> elementReport = validate(element);
-      elementReport.printMessagesTo(messager);
-      if (elementReport.isClean()) {
-        validElements.add(element);
-      }
-    }
-    return validElements.build();
-  }
-}
