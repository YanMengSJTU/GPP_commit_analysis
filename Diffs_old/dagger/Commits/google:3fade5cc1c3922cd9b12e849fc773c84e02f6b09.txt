diff --git a/java/dagger/internal/codegen/Proxies.java b/java/dagger/internal/codegen/Proxies.java
index 800e3272d..6a1041d8c 100644
--- a/java/dagger/internal/codegen/Proxies.java
+++ b/java/dagger/internal/codegen/Proxies.java
@@ -25,7 +25,6 @@
 import static dagger.internal.codegen.Accessibility.isElementPubliclyAccessible;
 import static dagger.internal.codegen.Accessibility.isRawTypeAccessible;
 import static dagger.internal.codegen.Accessibility.isRawTypePubliclyAccessible;
-import static dagger.internal.codegen.Accessibility.isTypePubliclyAccessible;
 import static dagger.internal.codegen.CodeBlocks.javadocLinkTo;
 import static dagger.internal.codegen.CodeBlocks.makeParametersCodeBlock;
 import static dagger.internal.codegen.TypeNames.rawTypeName;
@@ -227,7 +226,7 @@ private static CodeBlock copyParameters(
       ImmutableList.Builder<CodeBlock> argumentsBuilder) {
     for (VariableElement parameter : method.getParameters()) {
       TypeMirror parameterType = parameter.asType();
-      boolean useObject = !isTypePubliclyAccessible(parameterType);
+      boolean useObject = !isRawTypePubliclyAccessible(parameterType);
       TypeName typeName = useObject ? TypeName.OBJECT : TypeName.get(parameterType);
       String name = nameSet.getUniqueName(parameter.getSimpleName().toString());
       argumentsBuilder.add(
diff --git a/java/dagger/internal/codegen/SimpleMethodRequestFulfillment.java b/java/dagger/internal/codegen/SimpleMethodRequestFulfillment.java
index bb17c1504..e70593836 100644
--- a/java/dagger/internal/codegen/SimpleMethodRequestFulfillment.java
+++ b/java/dagger/internal/codegen/SimpleMethodRequestFulfillment.java
@@ -19,6 +19,7 @@
 import static com.google.auto.common.MoreElements.asExecutable;
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkState;
+import static dagger.internal.codegen.Accessibility.isRawTypeAccessible;
 import static dagger.internal.codegen.Accessibility.isTypeAccessibleFrom;
 import static dagger.internal.codegen.CodeBlocks.makeParametersCodeBlock;
 import static dagger.internal.codegen.Proxies.proxyName;
@@ -111,7 +112,20 @@ private CodeBlock invokeProxyMethod(ClassName requestingClass) {
         provisionBinding
             .explicitDependencies()
             .stream()
-            .map(request -> getDependencySnippet(requestingClass, request))
+            .map(
+                request -> {
+                  CodeBlock snippet = getDependencySnippet(requestingClass, request);
+                  TypeMirror requestElementType = request.requestElement().get().asType();
+                  /* If the type is accessible, use the snippet.  If only the raw type is
+                   * accessible, cast it to the raw type.  If the type is completely inaccessible,
+                   * the proxy will have an Object method parameter, so we can again, just use the
+                   * snippet. */
+                  return isTypeAccessibleFrom(requestElementType, requestingClass.packageName())
+                          || !isRawTypeAccessible(requestElementType, requestingClass.packageName())
+                      ? snippet
+                      : CodeBlock.of(
+                          "($T) $L", rawTypeName(TypeName.get(requestElementType)), snippet);
+                })
             .collect(collectingAndThen(toList(), CodeBlocks::makeParametersCodeBlock)));
   }
 
diff --git a/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index 8d02a499c..2af869205 100644
--- a/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -479,8 +479,8 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  public static List<Object> proxyProvideObjects(",
-            "      TestModule instance, Object a, Object b, Object x) {",
-            "    return instance.provideObjects(a, b, (MembersInjector<X>) x);",
+            "      TestModule instance, Object a, Object b, MembersInjector<X> x) {",
+            "    return instance.provideObjects(a, b, x);",
             "  }",
             "}");
     assertAbout(javaSources()).that(
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
index 640a955b8..42dc1e7c5 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
@@ -223,6 +223,7 @@ public void inaccessible() {
             "import dagger.internal.SetBuilder;",
             "import dagger.internal.SetFactory;",
             "import java.util.Collections;",
+            "import java.util.Set;",
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
             "import other.TestModule_EmptySetFactory;",
@@ -262,8 +263,8 @@ public void inaccessible() {
             "  @Override",
             "  public UsesInaccessible usesInaccessible() {",
             "    return UsesInaccessible_Factory.newUsesInaccessible(",
-            "        Collections.emptySet(),",
-            "        SetBuilder.newSetBuilder(1)",
+            "        (Set) Collections.emptySet(),",
+            "        (Set) SetBuilder.newSetBuilder(1)",
             "            .addAll(TestModule_EmptySetFactory.proxyEmptySet())",
             "            .build());",
             "  }",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
index cdef59c6e..bda5d290d 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
@@ -234,6 +234,7 @@ public void inaccessible() {
             "import com.google.common.collect.ImmutableSet;",
             "import dagger.internal.Factory;",
             "import dagger.internal.SetFactory;",
+            "import java.util.Set;",
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
             "import other.TestModule_EmptySetFactory;",
@@ -273,8 +274,8 @@ public void inaccessible() {
             "  @Override",
             "  public UsesInaccessible usesInaccessible() {",
             "    return UsesInaccessible_Factory.newUsesInaccessible(",
-            "        ImmutableSet.of(),",
-            "        ImmutableSet.copyOf(TestModule_EmptySetFactory.proxyEmptySet()));",
+            "        (Set) ImmutableSet.of(),",
+            "        (Set) ImmutableSet.copyOf(TestModule_EmptySetFactory.proxyEmptySet()));",
             "  }",
             "",
             "  public static final class Builder {",
