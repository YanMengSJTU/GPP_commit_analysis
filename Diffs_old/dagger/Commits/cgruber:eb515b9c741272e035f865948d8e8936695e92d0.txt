diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
index ddddf9cf0..9ec96ff74 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -21,7 +21,6 @@
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.ImmutableSetMultimap;
 import dagger.Component;
 import java.util.List;
 import javax.lang.model.element.AnnotationMirror;
@@ -85,12 +84,10 @@
   static final class Factory {
     private final Elements elements;
     private final Types types;
-    private final ProvisionBinding.Factory provisionBindingFactory;
 
-    Factory(Elements elements, Types types, ProvisionBinding.Factory provisionBindingFactory) {
+    Factory(Elements elements, Types types) {
       this.elements = elements;
       this.types = types;
-      this.provisionBindingFactory = provisionBindingFactory;
     }
 
     ComponentDescriptor create(TypeElement componentDefinitionType) {
@@ -99,28 +96,14 @@ ComponentDescriptor create(TypeElement componentDefinitionType) {
       ImmutableSet<TypeElement> componentDependencyTypes =
           MoreTypes.asTypeElements(types, getComponentDependencies(componentMirror));
 
-      ProvisionBinding componentBinding =
-          provisionBindingFactory.forComponent(componentDefinitionType);
-
-      ImmutableSetMultimap.Builder<Key, ProvisionBinding> explicitBindingIndexBuilder =
-          new ImmutableSetMultimap.Builder<Key, ProvisionBinding>()
-              .put(componentBinding.key(), componentBinding);
       ImmutableMap.Builder<ExecutableElement, TypeElement> dependencyMethodIndex =
           ImmutableMap.builder();
 
       for (TypeElement componentDependency : componentDependencyTypes) {
-        ProvisionBinding componentDependencyBinding =
-            provisionBindingFactory.forComponent(componentDependency);
-        explicitBindingIndexBuilder.put(
-            componentDependencyBinding.key(), componentDependencyBinding);
         List<ExecutableElement> dependencyMethods =
             ElementFilter.methodsIn(elements.getAllMembers(componentDependency));
         for (ExecutableElement dependencyMethod : dependencyMethods) {
           if (isComponentProvisionMethod(elements, dependencyMethod)) {
-            ProvisionBinding componentMethodBinding =
-                provisionBindingFactory.forComponentMethod(dependencyMethod);
-            explicitBindingIndexBuilder
-                .put(componentMethodBinding.key(), componentMethodBinding);
             dependencyMethodIndex.put(dependencyMethod, componentDependency);
           }
         }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index 0b1f208cd..7299098ba 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -99,7 +99,7 @@ public SourceVersion getSupportedSourceVersion() {
         membersInjectionBindingFactory, membersInjectorGenerator);
 
     ComponentDescriptor.Factory componentDescriptorFactory =
-        new ComponentDescriptor.Factory(elements, types, provisionBindingFactory);
+        new ComponentDescriptor.Factory(elements, types);
 
     BindingGraph.Factory bindingGraphFactory = new BindingGraph.Factory(
         elements, types, injectBindingRegistry, keyFactory, dependencyRequestFactory,
@@ -158,7 +158,7 @@ protected void postProcess() {
   private static ScopeCycleValidation disableInterComponentScopeValidation(
       ProcessingEnvironment processingEnv) {
     Map<String, String> options = processingEnv.getOptions();
-    if(options.containsKey(DISABLE_INTER_COMPONENT_SCOPE_VALIDATION_KEY)) {
+    if (options.containsKey(DISABLE_INTER_COMPONENT_SCOPE_VALIDATION_KEY)) {
       try {
         return ScopeCycleValidation.valueOf(
             options.get(DISABLE_INTER_COMPONENT_SCOPE_VALIDATION_KEY).toUpperCase());
