diff --git a/java/dagger/android/BUILD b/java/dagger/android/BUILD
index 8752b5ba9..195bc8e6e 100644
--- a/java/dagger/android/BUILD
+++ b/java/dagger/android/BUILD
@@ -38,6 +38,8 @@ android_library(
     deps = [
         "//:dagger_with_compiler",
         "//third_party:auto_value",
+        "//third_party:error_prone_annotations",
+        "//third_party:jsr305_annotations",
         "@androidsdk//com.android.support:support-annotations-25.0.0",
     ],
 )
diff --git a/java/dagger/android/DispatchingAndroidInjector.java b/java/dagger/android/DispatchingAndroidInjector.java
index b22f6ecd4..277b83b9e 100644
--- a/java/dagger/android/DispatchingAndroidInjector.java
+++ b/java/dagger/android/DispatchingAndroidInjector.java
@@ -20,6 +20,7 @@
 
 import android.app.Activity;
 import android.app.Fragment;
+import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import dagger.internal.Beta;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -62,6 +63,7 @@
    * @throws InvalidInjectorBindingException if the injector factory bound for a class does not
    *     inject instances of that class
    */
+  @CanIgnoreReturnValue
   public boolean maybeInject(T instance) {
     Provider<AndroidInjector.Factory<? extends T>> factoryProvider =
         injectorFactories.get(instance.getClass());
diff --git a/java/dagger/android/package-info.java b/java/dagger/android/package-info.java
new file mode 100644
index 000000000..085c5ee87
--- /dev/null
+++ b/java/dagger/android/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+@CheckReturnValue
+package dagger.android;
+
+/**
+ * APIs to assist with using Dagger on Android devices. It includes common code to perform injection
+ * as well as Android-specific extensions to {@link dagger.releasablereferences}.
+ */
+import javax.annotation.CheckReturnValue;
diff --git a/java/dagger/android/support/BUILD b/java/dagger/android/support/BUILD
index 143b1fde6..d6a7405be 100644
--- a/java/dagger/android/support/BUILD
+++ b/java/dagger/android/support/BUILD
@@ -32,6 +32,7 @@ android_library(
     deps = [
         "//:dagger_with_compiler",
         "//java/dagger/android",
+        "//third_party:jsr305_annotations",
         "@androidsdk//com.android.support:appcompat-v7-25.0.0",
         "@androidsdk//com.android.support:support-annotations-25.0.0",
         "@androidsdk//com.android.support:support-v4-25.0.0",
diff --git a/java/dagger/android/support/package-info.java b/java/dagger/android/support/package-info.java
new file mode 100644
index 000000000..f1f82e9a2
--- /dev/null
+++ b/java/dagger/android/support/package-info.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+@CheckReturnValue
+package dagger.android.support;
+
+/**
+ * Additions to the APIs in {@link dagger.android} for use with the <a
+ * href="https://developer.android.com/topic/libraries/support-library">Android support
+ * libraries</a>.
+ */
+import javax.annotation.CheckReturnValue;
