diff --git a/compiler/src/it/functional-tests/src/main/java/test/BasicAbstractClassComponent.java b/compiler/src/it/functional-tests/src/main/java/test/BasicAbstractClassComponent.java
new file mode 100644
index 000000000..78f77dfb8
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/BasicAbstractClassComponent.java
@@ -0,0 +1,29 @@
+/*
+* Copyright (C) 2015 Google, Inc.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+* http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+package test;
+
+import dagger.Component;
+
+/**
+ * This component tests behavior equivalent to {@link BasicComponent}, but as an abstract class
+ * rather than an interface.
+ */
+@Component(modules = PrimitivesModule.class)
+abstract class BasicAbstractClassComponent implements BasicComponent {
+  void throwAParty() {
+    throw new RuntimeException("Paaarrrrrtaaaaaaaay!");
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java b/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
index c3bfa98fa..76a69eeed 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
@@ -15,9 +15,10 @@
 */
 package test;
 
-import org.junit.Test;
+import org.junit.experimental.theories.DataPoint;
+import org.junit.experimental.theories.Theories;
+import org.junit.experimental.theories.Theory;
 import org.junit.runner.RunWith;
-import org.junit.runners.JUnit4;
 
 import static com.google.common.truth.Truth.assertThat;
 import static test.PrimitivesModule.BOUND_BOOLEAN;
@@ -37,10 +38,15 @@
 import static test.PrimitivesModule.BOUND_SHORT;
 import static test.PrimitivesModule.BOUND_SHORT_ARRAY;
 
-@RunWith(JUnit4.class)
+@RunWith(Theories.class)
 public class BasicTest {
-  @Test public void primitives() {
-    BasicComponent basicComponent = Dagger_BasicComponent.create();
+  @DataPoint
+  public static final BasicComponent basicComponent = Dagger_BasicComponent.create();
+  @DataPoint
+  public static final BasicComponent abstractClassBasicComponent =
+      Dagger_BasicAbstractClassComponent.create();
+
+  @Theory public void primitives(BasicComponent basicComponent) {
     assertThat(basicComponent.getByte()).isEqualTo(BOUND_BYTE);
     assertThat(basicComponent.getChar()).isEqualTo(BOUND_CHAR);
     assertThat(basicComponent.getShort()).isEqualTo(BOUND_SHORT);
@@ -51,8 +57,7 @@
     assertThat(basicComponent.getDouble()).isEqualTo(BOUND_DOUBLE);
   }
 
-  @Test public void boxedPrimitives() {
-    BasicComponent basicComponent = Dagger_BasicComponent.create();
+  @Theory public void boxedPrimitives(BasicComponent basicComponent) {
     assertThat(basicComponent.getBoxedByte()).isEqualTo(new Byte(BOUND_BYTE));
     assertThat(basicComponent.getBoxedChar()).isEqualTo(new Character(BOUND_CHAR));
     assertThat(basicComponent.getBoxedShort()).isEqualTo(new Short(BOUND_SHORT));
@@ -63,8 +68,7 @@
     assertThat(basicComponent.getBoxedDouble()).isEqualTo(new Double(BOUND_DOUBLE));
   }
 
-  @Test public void boxedPrimitiveProviders() {
-    BasicComponent basicComponent = Dagger_BasicComponent.create();
+  @Theory public void boxedPrimitiveProviders(BasicComponent basicComponent) {
     assertThat(basicComponent.getByteProvider().get()).isEqualTo(new Byte(BOUND_BYTE));
     assertThat(basicComponent.getCharProvider().get()).isEqualTo(new Character(BOUND_CHAR));
     assertThat(basicComponent.getShortProvider().get()).isEqualTo(new Short(BOUND_SHORT));
@@ -75,8 +79,7 @@
     assertThat(basicComponent.getDoubleProvider().get()).isEqualTo(new Double(BOUND_DOUBLE));
   }
 
-  @Test public void primitiveArrays() {
-    BasicComponent basicComponent = Dagger_BasicComponent.create();
+  @Theory public void primitiveArrays(BasicComponent basicComponent) {
     assertThat(basicComponent.getByteArray()).isSameAs(BOUND_BYTE_ARRAY);
     assertThat(basicComponent.getCharArray()).isSameAs(BOUND_CHAR_ARRAY);
     assertThat(basicComponent.getShortArray()).isSameAs(BOUND_SHORT_ARRAY);
@@ -87,8 +90,7 @@
     assertThat(basicComponent.getDoubleArray()).isSameAs(BOUND_DOUBLE_ARRAY);
   }
 
-  @Test public void primitiveArrayProviders() {
-    BasicComponent basicComponent = Dagger_BasicComponent.create();
+  @Theory public void primitiveArrayProviders(BasicComponent basicComponent) {
     assertThat(basicComponent.getByteArrayProvider().get()).isSameAs(BOUND_BYTE_ARRAY);
     assertThat(basicComponent.getCharArrayProvider().get()).isSameAs(BOUND_CHAR_ARRAY);
     assertThat(basicComponent.getShortArrayProvider().get()).isSameAs(BOUND_SHORT_ARRAY);
@@ -99,19 +101,16 @@
     assertThat(basicComponent.getDoubleArrayProvider().get()).isSameAs(BOUND_DOUBLE_ARRAY);
   }
 
-  @Test public void noOpMembersInjection() {
-    BasicComponent basicComponent = Dagger_BasicComponent.create();
+  @Theory public void noOpMembersInjection(BasicComponent basicComponent) {
     Object object = new Object();
     assertThat(basicComponent.noOpMembersInjection(object)).isSameAs(object);
   }
 
-  @Test public void basicObject_noDeps() {
-    BasicComponent basicComponent = Dagger_BasicComponent.create();
+  @Theory public void basicObject_noDeps(BasicComponent basicComponent) {
     assertThat(basicComponent.thing()).isNotNull();
   }
 
-  @Test public void inheritedMembersInjection() {
-    BasicComponent basicComponent = Dagger_BasicComponent.create();
+  @Theory public void inheritedMembersInjection(BasicComponent basicComponent) {
     assertThat(basicComponent.typeWithInheritedMembersInjection().thing).isNotNull();
   }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 72540b0bf..f35ebba6e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -90,6 +90,7 @@
 
 import static com.google.auto.common.MoreTypes.asDeclared;
 import static com.google.common.base.CaseFormat.LOWER_CAMEL;
+import static com.google.common.base.Preconditions.checkState;
 import static com.google.common.base.Verify.verify;
 import static dagger.internal.codegen.Binding.bindingPackageFor;
 import static dagger.internal.codegen.ConfigurationAnnotations.getMapKeys;
@@ -102,6 +103,7 @@
 import static dagger.internal.codegen.SourceFiles.frameworkTypeUsageStatement;
 import static dagger.internal.codegen.SourceFiles.membersInjectorNameForMembersInjectionBinding;
 import static dagger.internal.codegen.Util.componentCanMakeNewInstances;
+import static javax.lang.model.element.Modifier.ABSTRACT;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PUBLIC;
@@ -199,15 +201,26 @@ Snippet getSnippetFor(ClassName usingClass) {
 
   @Override
   ImmutableSet<JavaWriter> write(ClassName componentName, BindingGraph input) {
+    TypeElement componentDefinitionType = input.componentDescriptor().componentDefinitionType();
     ClassName componentDefinitionTypeName =
-        ClassName.fromTypeElement(input.componentDescriptor().componentDefinitionType());
+        ClassName.fromTypeElement(componentDefinitionType);
 
     JavaWriter writer = JavaWriter.inPackage(componentName.packageName());
 
     ClassWriter componentWriter = writer.addClass(componentName.simpleName());
     componentWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getCanonicalName());
     componentWriter.addModifiers(PUBLIC, FINAL);
-    componentWriter.addImplementedType(componentDefinitionTypeName);
+    switch (componentDefinitionType.getKind()) {
+      case CLASS:
+        checkState(componentDefinitionType.getModifiers().contains(ABSTRACT));
+        componentWriter.setSuperType(componentDefinitionTypeName);
+        break;
+      case INTERFACE:
+        componentWriter.addImplementedType(componentDefinitionTypeName);
+        break;
+      default:
+        throw new IllegalStateException();
+    }
 
     Set<JavaWriter> javaWriters = Sets.newHashSet();
     javaWriters.add(writer);
