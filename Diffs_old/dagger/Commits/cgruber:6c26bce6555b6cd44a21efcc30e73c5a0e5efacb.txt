diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectConstructorFactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/InjectConstructorFactoryGenerator.java
index d4b8652c6..f5aa2baa5 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectConstructorFactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectConstructorFactoryGenerator.java
@@ -15,16 +15,6 @@
  */
 package dagger.internal.codegen;
 
-import static com.squareup.javawriter.JavaWriter.stringLiteral;
-import static com.squareup.javawriter.JavaWriter.type;
-import static dagger.internal.codegen.SourceFiles.collectImportsFromDependencies;
-import static dagger.internal.codegen.SourceFiles.flattenVariableMap;
-import static dagger.internal.codegen.SourceFiles.generateProviderNames;
-import static dagger.internal.codegen.SourceFiles.providerUsageStatement;
-import static javax.lang.model.element.Modifier.FINAL;
-import static javax.lang.model.element.Modifier.PRIVATE;
-import static javax.lang.model.element.Modifier.PUBLIC;
-
 import com.google.common.base.Function;
 import com.google.common.base.Functions;
 import com.google.common.base.Joiner;
@@ -38,21 +28,30 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Ordering;
 import com.squareup.javawriter.JavaWriter;
-
 import dagger.Factory;
 import dagger.MembersInjector;
-
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.EnumSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-
 import javax.annotation.Generated;
 import javax.annotation.processing.Filer;
 import javax.inject.Inject;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
 
+import static com.squareup.javawriter.JavaWriter.stringLiteral;
+import static com.squareup.javawriter.JavaWriter.type;
+import static dagger.internal.codegen.SourceFiles.collectImportsFromDependencies;
+import static dagger.internal.codegen.SourceFiles.flattenVariableMap;
+import static dagger.internal.codegen.SourceFiles.generateProviderNames;
+import static dagger.internal.codegen.SourceFiles.providerUsageStatement;
+import static javax.lang.model.element.Modifier.FINAL;
+import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.PUBLIC;
+
 /**
  * Generates {@link Factory} implementations from {@link ProvisionBinding} instances for
  * {@link Inject} constructors.
@@ -92,15 +91,16 @@ void write(ClassName factoryClassName, JavaWriter writer, ProvisionBinding bindi
 
     writer.emitPackage(factoryClassName.packageName());
 
-    FluentIterable<ClassName> importsBuilder = FluentIterable.from(
-        collectImportsFromDependencies(factoryClassName, binding.dependencies()))
-            .append(ClassName.fromClass(Factory.class))
-            .append(ClassName.fromClass(Generated.class));
+    List<ClassName> importsBuilder = new ArrayList<ClassName>();
+    importsBuilder.addAll(collectImportsFromDependencies(factoryClassName, binding.dependencies()));
+    importsBuilder.add(ClassName.fromClass(Factory.class));
+    importsBuilder.add(ClassName.fromClass(Generated.class));
     if (binding.requiresMemberInjection()) {
-      importsBuilder = importsBuilder.append(ClassName.fromClass(MembersInjector.class));
+      importsBuilder.add(ClassName.fromClass(MembersInjector.class));
     }
-    ImmutableSortedSet<String> imports = importsBuilder.transform(Functions.toStringFunction())
-            .toSortedSet(Ordering.natural());
+    ImmutableSortedSet<String> imports = FluentIterable.from(importsBuilder)
+        .transform(Functions.toStringFunction())
+        .toSortedSet(Ordering.natural());
     writer.emitImports(imports).emitEmptyLine();
 
     writer.emitAnnotation(Generated.class, stringLiteral(InjectProcessor.class.getName()))
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
index 5df0f33ff..c4555454c 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
@@ -15,17 +15,6 @@
  */
 package dagger.internal.codegen;
 
-import static com.squareup.javawriter.JavaWriter.stringLiteral;
-import static com.squareup.javawriter.JavaWriter.type;
-import static dagger.internal.codegen.SourceFiles.DEPENDENCY_ORDERING;
-import static dagger.internal.codegen.SourceFiles.collectImportsFromDependencies;
-import static dagger.internal.codegen.SourceFiles.flattenVariableMap;
-import static dagger.internal.codegen.SourceFiles.generateProviderNames;
-import static dagger.internal.codegen.SourceFiles.providerUsageStatement;
-import static javax.lang.model.element.Modifier.FINAL;
-import static javax.lang.model.element.Modifier.PRIVATE;
-import static javax.lang.model.element.Modifier.PUBLIC;
-
 import com.google.common.base.Function;
 import com.google.common.base.Functions;
 import com.google.common.base.Joiner;
@@ -38,15 +27,14 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Ordering;
 import com.squareup.javawriter.JavaWriter;
-
 import dagger.MembersInjector;
-
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.EnumSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
-
 import javax.annotation.Generated;
 import javax.annotation.processing.Filer;
 import javax.lang.model.element.Element;
@@ -55,6 +43,17 @@
 import javax.lang.model.element.Name;
 import javax.lang.model.element.VariableElement;
 
+import static com.squareup.javawriter.JavaWriter.stringLiteral;
+import static com.squareup.javawriter.JavaWriter.type;
+import static dagger.internal.codegen.SourceFiles.DEPENDENCY_ORDERING;
+import static dagger.internal.codegen.SourceFiles.collectImportsFromDependencies;
+import static dagger.internal.codegen.SourceFiles.flattenVariableMap;
+import static dagger.internal.codegen.SourceFiles.generateProviderNames;
+import static dagger.internal.codegen.SourceFiles.providerUsageStatement;
+import static javax.lang.model.element.Modifier.FINAL;
+import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.PUBLIC;
+
 /**
  * Generates {@link MembersInjector} implementations from {@link MembersInjectionBinding} instances.
  *
@@ -108,12 +107,13 @@ void write(ClassName injectorClassName, JavaWriter writer, MembersInjectorDescri
         })
         .toSortedSet(DEPENDENCY_ORDERING);
 
-    ImmutableSortedSet<String> imports =
-        FluentIterable.from(collectImportsFromDependencies(injectorClassName, dependencies))
-            .append(ClassName.fromClass(MembersInjector.class))
-            .append(ClassName.fromClass(Generated.class))
-            .transform(Functions.toStringFunction())
-            .toSortedSet(Ordering.natural());
+    List<ClassName> importsBuilder = new ArrayList<ClassName>();
+    importsBuilder.addAll(collectImportsFromDependencies(injectorClassName, dependencies));
+    importsBuilder.add(ClassName.fromClass(MembersInjector.class));
+    importsBuilder.add(ClassName.fromClass(Generated.class));
+    ImmutableSortedSet<String> imports = FluentIterable.from(importsBuilder)
+        .transform(Functions.toStringFunction())
+        .toSortedSet(Ordering.natural());
     writer.emitImports(imports).emitEmptyLine();
 
     writer.emitJavadoc("A {@link MembersInjector} implementation for {@link %s}.",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ClassNameTest.java b/compiler/src/test/java/dagger/internal/codegen/ClassNameTest.java
index 60cd73410..8895aff5e 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ClassNameTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ClassNameTest.java
@@ -15,17 +15,15 @@
  */
 package dagger.internal.codegen;
 
-import static org.junit.Assert.fail;
-import static org.truth0.Truth.ASSERT;
-
 import com.google.common.collect.ImmutableList;
-
 import java.util.Map;
-
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
+import static org.junit.Assert.fail;
+import static org.truth0.Truth.ASSERT;
+
 @RunWith(JUnit4.class)
 public class ClassNameTest {
   @Test public void bestGuessForString_simpleClass() {
@@ -33,12 +31,17 @@
         .isEqualTo(ClassName.create("java.lang", "String"));
   }
 
+  static class OuterClass {
+    static class InnerClass {}
+  }
+
   @Test public void bestGuessForString_nestedClass() {
     ASSERT.that(ClassName.bestGuessFromString(Map.Entry.class.getCanonicalName()))
         .isEqualTo(ClassName.create("java.util", ImmutableList.of("Map"), "Entry"));
-    ASSERT.that(ClassName.bestGuessFromString(ProcessBuilder.Redirect.Type.class.getCanonicalName()))
+    ASSERT.that(ClassName.bestGuessFromString(OuterClass.InnerClass.class.getCanonicalName()))
         .isEqualTo(
-            ClassName.create("java.lang", ImmutableList.of("ProcessBuilder", "Redirect"), "Type"));
+            ClassName.create("dagger.internal.codegen",
+                ImmutableList.of("ClassNameTest", "OuterClass"), "InnerClass"));
   }
 
   @Test public void bestGuessForString_defaultPackage() {
