diff --git a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
index 2b14fbe00..3625f1b06 100644
--- a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
@@ -83,8 +83,14 @@ Expression getComponentMethodExpression(DependencyRequest request, ClassName req
   @Override
   Expression getDependencyExpression(
       DependencyRequest.Kind requestKind, ClassName requestingClass) {
+    Optional<ComponentMethodDescriptor> componentMethod = findComponentMethod(requestKind);
+    if (requestKind.equals(DependencyRequest.Kind.INSTANCE)
+        && binding.dependencies().isEmpty()
+        && !componentMethod.isPresent()) {
+      return delegate.getDependencyExpression(requestKind, requestingClass);
+    }
+
     if (!methodNames.containsKey(requestKind)) {
-      Optional<ComponentMethodDescriptor> componentMethod = findComponentMethod(requestKind);
       String name =
           componentMethod.isPresent()
               ? componentMethod.get().methodElement().getSimpleName().toString()
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index 4b08f2547..b67a93cb6 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -597,13 +597,9 @@ public void componentWithInvalidModule() {
                 "  }")
             .addLinesIn(
                 EXPERIMENTAL_ANDROID_MODE,
-                "  private C getCInstance() {",
-                "    return new C();",
-                "  }",
-                "",
                 "  private B getBInstance() {",
                 "    return Preconditions.checkNotNull(",
-                "        testModule.b(getCInstance()), " + NPE_FROM_PROVIDES_METHOD + ");",
+                "        testModule.b(new C()), " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
                 "",
                 "  @SuppressWarnings(\"unchecked\")",
@@ -733,13 +729,9 @@ public void componentWithAbstractModule() {
                 "  }")
             .addLinesIn(
                 EXPERIMENTAL_ANDROID_MODE,
-                "  private C getCInstance() {",
-                "    return new C();",
-                "  }",
-                "",
                 "  private B getBInstance() {",
                 "    return Preconditions.checkNotNull(",
-                "        TestModule.b(getCInstance()), " + NPE_FROM_PROVIDES_METHOD + ");",
+                "        TestModule.b(new C()), " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
                 "",
                 "  @Override",
@@ -1174,11 +1166,6 @@ public void testDefaultPackage() {
                 "",
                 "  public static SimpleComponent create() {",
                 "    return new Builder().build();",
-                "  }")
-            .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
-                "  private SomeInjectableType getSomeInjectableTypeInstance() {",
-                "    return new SomeInjectableType();",
                 "  }",
                 "",
                 "  @Override",
@@ -1194,28 +1181,9 @@ public void testDefaultPackage() {
                 "  @CanIgnoreReturnValue",
                 "  private SomeInjectedType injectSomeInjectedType(SomeInjectedType instance) {",
                 "    SomeInjectedType_MembersInjector.injectInjectedField(",
-                "        instance, getSomeInjectableTypeInstance());",
-                "    return instance;",
-                "  }")
-            .addLinesIn(
-                DEFAULT_MODE,
-                "  @Override",
-                "  public void inject(SomeInjectedType instance) {",
-                "    injectSomeInjectedType(instance);",
-                "  }",
-                "",
-                "  @Override",
-                "  public SomeInjectedType injectAndReturn(SomeInjectedType instance) {",
-                "    return injectSomeInjectedType(instance);",
-                "  }",
-                "",
-                "  @CanIgnoreReturnValue",
-                "  private SomeInjectedType injectSomeInjectedType(SomeInjectedType instance) {",
-                "    SomeInjectedType_MembersInjector.injectInjectedField(",
                 "        instance, new SomeInjectableType());",
                 "    return instance;",
-                "  }")
-            .addLines(
+                "  }",
                 "  public static final class Builder {",
                 "    private Builder() {",
                 "    }",
@@ -1364,11 +1332,6 @@ public void testDefaultPackage() {
                 "",
                 "  public static SimpleComponent create() {",
                 "    return new Builder().build();",
-                "  }")
-            .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
-                "  private SomeInjectableType getSomeInjectableTypeInstance() {",
-                "    return new SomeInjectableType();",
                 "  }",
                 "",
                 "  @Override",
@@ -1380,24 +1343,10 @@ public void testDefaultPackage() {
                 "  @CanIgnoreReturnValue",
                 "  private SomeInjectedType injectSomeInjectedType(SomeInjectedType instance) {",
                 "    SomeInjectedType_MembersInjector.injectInjectedField(",
-                "        instance, getSomeInjectableTypeInstance());",
+                "        instance, new SomeInjectableType());",
                 "    return instance;",
-                "  }")
-            .addLinesIn(
-                DEFAULT_MODE,
-                "  @Override",
-                "  public SomeInjectedType createAndInject() {",
-                "    return injectSomeInjectedType(",
-                "        SomeInjectedType_Factory.newSomeInjectedType());",
                 "  }",
                 "",
-                "  @CanIgnoreReturnValue",
-                "  private SomeInjectedType injectSomeInjectedType(SomeInjectedType instance) {",
-                "    SomeInjectedType_MembersInjector.injectInjectedField(",
-                "        instance, new SomeInjectableType());",
-                "    return instance;",
-                "  }")
-            .addLines(
                 "  public static final class Builder {",
                 "    private Builder() {",
                 "    }",
diff --git a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
index e00a7858a..e27954f18 100644
--- a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
+++ b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
@@ -488,13 +488,9 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Object getObjectInstance2() {",
-                "    return Preconditions.checkNotNull(",
-                "        ParentModule.contribution(), " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
                 "  private Set<Object> getSetOfObjectInstance() {",
-                "    return ImmutableSet.<Object>of(getObjectInstance2());",
+                "    return ImmutableSet.<Object>of(Preconditions.checkNotNull(",
+                "        ParentModule.contribution(), " + NPE_FROM_PROVIDES_METHOD + "));",
                 "  }",
                 "",
                 "  private Object getObjectInstance() {",
@@ -544,18 +540,12 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "  private final class TestSubcomponentImpl implements TestSubcomponent {",
                 "    private TestSubcomponentImpl() {}",
                 "",
-                "    private Object getObjectInstance2() {",
-                "      return Preconditions.checkNotNull(",
-                "          ParentModule.contribution(), " + NPE_FROM_PROVIDES_METHOD + ");",
-                "    }",
-                "",
-                "    private Object getObjectInstance3() {",
-                "      return Preconditions.checkNotNull(",
-                "          ChildModule.contribution(), " + NPE_FROM_PROVIDES_METHOD + ");",
-                "    }",
-                "",
                 "    private Set<Object> getSetOfObjectInstance() {",
-                "      return ImmutableSet.<Object>of(getObjectInstance2(), getObjectInstance3());",
+                "      return ImmutableSet.<Object>of(",
+                "          Preconditions.checkNotNull(",
+                "              ParentModule.contribution(), " + NPE_FROM_PROVIDES_METHOD + "),",
+                "          Preconditions.checkNotNull(",
+                "              ChildModule.contribution(), " + NPE_FROM_PROVIDES_METHOD + "));",
                 "    }",
                 "",
                 "    private Object getObjectInstance() {",
diff --git a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
index 9ecb01d75..5e5edae96 100644
--- a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
+++ b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
@@ -76,81 +76,40 @@ public void simpleComponent() {
             "interface SimpleComponent {",
             "  DependsOnInjected dependsOnInjected();",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
-                "package test;",
-                "",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private InjectedType getInjectedTypeInstance() {",
-                "    return new InjectedType();",
-                "  }",
-                "",
-                "  @Override",
-                "  public DependsOnInjected dependsOnInjected() {",
-                "    return new DependsOnInjected(getInjectedTypeInstance());",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
-                "package test;",
-                "",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public DependsOnInjected dependsOnInjected() {",
-                "    return new DependsOnInjected(new InjectedType());",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerSimpleComponent",
+            "package test;",
+            "",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerSimpleComponent implements SimpleComponent {",
+            "  private DaggerSimpleComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static SimpleComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public DependsOnInjected dependsOnInjected() {",
+            "    return new DependsOnInjected(new InjectedType());",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {",
+            "    }",
+            "",
+            "    public SimpleComponent build() {",
+            "      return new DaggerSimpleComponent(this);",
+            "    }",
+            "  }",
+            "}");
+
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
diff --git a/javatests/dagger/internal/codegen/InaccessibleTypeTest.java b/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
index 2aea035a3..cbcbce28f 100644
--- a/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
+++ b/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
@@ -95,7 +95,6 @@ public InaccessibleTypeTest(CompilerMode compilerMode) {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import foreign.NoDepClass;",
                 "import foreign.NoDepClass_Factory;",
                 "import foreign.NonPublicClass1_Factory;",
                 "import foreign.NonPublicClass2_Factory;",
@@ -115,16 +114,14 @@ public InaccessibleTypeTest(CompilerMode compilerMode) {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private NoDepClass getNoDepClassInstance() {",
-                "    return NoDepClass_Factory.newNoDepClass();",
-                "  }",
-                "",
                 "  private Object getNonPublicClass1Instance() {",
-                "    return NonPublicClass1_Factory.newNonPublicClass1(getNoDepClassInstance());",
+                "    return NonPublicClass1_Factory.newNonPublicClass1(",
+                "        NoDepClass_Factory.newNoDepClass());",
                 "  }",
                 "",
                 "  private Object getNonPublicClass2Instance() {",
-                "    return NonPublicClass2_Factory.newNonPublicClass2(getNoDepClassInstance());",
+                "    return NonPublicClass2_Factory.newNonPublicClass2(",
+                "        NoDepClass_Factory.newNoDepClass());",
                 "  }",
                 "",
                 "  @Override",
@@ -132,7 +129,7 @@ public InaccessibleTypeTest(CompilerMode compilerMode) {
                 "    return PublicClass_Factory.newPublicClass(",
                 "        getNonPublicClass1Instance(), ",
                 "        getNonPublicClass2Instance(), ",
-                "        getNoDepClassInstance());",
+                "        NoDepClass_Factory.newNoDepClass());",
                 "  }",
                 "",
                 "  public static final class Builder {",
@@ -267,105 +264,51 @@ public InaccessibleTypeTest(CompilerMode compilerMode) {
         "interface TestComponent {",
         "  void injectA(A a);",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import foreign.B_MembersInjector;",
-                "import foreign.C_MembersInjector;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private NoDepClass getNoDepClassInstance() {",
-                "    return new NoDepClass();",
-                "  }",
-                "",
-                "  @Override",
-                "  public void injectA(A a) {",
-                "    injectA2(a);",
-                "  }",
-                "",
-                "  @CanIgnoreReturnValue",
-                "  private A injectA2(A instance) {",
-                "    D_MembersInjector.injectDep(instance, getNoDepClassInstance());",
-                "    C_MembersInjector.injectDep(instance, getNoDepClassInstance());",
-                "    B_MembersInjector.injectDep(instance, getNoDepClassInstance());",
-                "    A_MembersInjector.injectDep(instance, getNoDepClassInstance());",
-                "    return instance;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import foreign.B_MembersInjector;",
-                "import foreign.C_MembersInjector;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public void injectA(A a) {",
-                "    injectA2(a);",
-                "  }",
-                "",
-                "  @CanIgnoreReturnValue",
-                "  private A injectA2(A instance) {",
-                "    D_MembersInjector.injectDep(instance, new NoDepClass());",
-                "    C_MembersInjector.injectDep(instance, new NoDepClass());",
-                "    B_MembersInjector.injectDep(instance, new NoDepClass());",
-                "    A_MembersInjector.injectDep(instance, new NoDepClass());",
-                "    return instance;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
+            "import foreign.B_MembersInjector;",
+            "import foreign.C_MembersInjector;",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private DaggerTestComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public void injectA(A a) {",
+            "    injectA2(a);",
+            "  }",
+            "",
+            "  @CanIgnoreReturnValue",
+            "  private A injectA2(A instance) {",
+            "    D_MembersInjector.injectDep(instance, new NoDepClass());",
+            "    C_MembersInjector.injectDep(instance, new NoDepClass());",
+            "    B_MembersInjector.injectDep(instance, new NoDepClass());",
+            "    A_MembersInjector.injectDep(instance, new NoDepClass());",
+            "    return instance;",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {",
+            "    }",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "  }",
+            "}");
     assertAbout(javaSources())
         .that(
             ImmutableList.of(
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index ae1c95c5c..2a3b4ec10 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -157,32 +157,22 @@ public void mapBindingsWithEnumKey() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Handler getMapOfPathEnumAndProviderOfHandlerInstance2() {",
-                "    return Preconditions.checkNotNull(",
-                "        mapModuleOne.provideAdminHandler(),",
-                "        " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
                 "  private Provider<Handler> getMapOfPathEnumAndProviderOfHandlerProvider() {",
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return getMapOfPathEnumAndProviderOfHandlerInstance2();",
+                "        return Preconditions.checkNotNull(",
+                "            mapModuleOne.provideAdminHandler()," + NPE_FROM_PROVIDES_METHOD + ");",
                 "      }",
                 "    };",
                 "  }",
                 "",
-                "  private Handler getMapOfPathEnumAndProviderOfHandlerInstance3() {",
-                "    return Preconditions.checkNotNull(",
-                "        mapModuleTwo.provideLoginHandler(),",
-                "        " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
                 "  private Provider<Handler> getMapOfPathEnumAndProviderOfHandlerProvider2() {",
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return getMapOfPathEnumAndProviderOfHandlerInstance3();",
+                "        return Preconditions.checkNotNull(",
+                "            mapModuleTwo.provideLoginHandler()," + NPE_FROM_PROVIDES_METHOD + ");",
                 "      }",
                 "    };",
                 "  }",
@@ -706,32 +696,24 @@ public void mapBindingsWithStringKey() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Handler getMapOfStringAndProviderOfHandlerInstance2() {",
-                "    return Preconditions.checkNotNull(",
-                "        mapModuleOne.provideAdminHandler(),",
-                "        " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
                 "  private Provider<Handler> getMapOfStringAndProviderOfHandlerProvider() {",
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return getMapOfStringAndProviderOfHandlerInstance2();",
+                "        return Preconditions.checkNotNull(",
+                "            mapModuleOne.provideAdminHandler(),",
+                "            " + NPE_FROM_PROVIDES_METHOD + ");",
                 "      }",
                 "    };",
                 "  }",
                 "",
-                "  private Handler getMapOfStringAndProviderOfHandlerInstance3() {",
-                "    return Preconditions.checkNotNull(",
-                "        mapModuleTwo.provideLoginHandler(),",
-                "        " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
                 "  private Provider<Handler> getMapOfStringAndProviderOfHandlerProvider2() {",
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return getMapOfStringAndProviderOfHandlerInstance3();",
+                "        return Preconditions.checkNotNull(",
+                "            mapModuleTwo.provideLoginHandler(),",
+                "            " + NPE_FROM_PROVIDES_METHOD + ");",
                 "      }",
                 "    };",
                 "  }",
@@ -986,34 +968,24 @@ public void mapBindingsWithWrappedKey() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Handler getMapOfWrappedClassKeyAndProviderOfHandlerInstance2() {",
-                "    return Preconditions.checkNotNull(",
-                "        mapModuleOne.provideAdminHandler(),",
-                "        " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
                 "  private Provider<Handler>",
                 "        getMapOfWrappedClassKeyAndProviderOfHandlerProvider() {",
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return getMapOfWrappedClassKeyAndProviderOfHandlerInstance2();",
+                "        return Preconditions.checkNotNull(",
+                "            mapModuleOne.provideAdminHandler()," + NPE_FROM_PROVIDES_METHOD + ");",
                 "      }",
                 "    };",
                 "  }",
                 "",
-                "  private Handler getMapOfWrappedClassKeyAndProviderOfHandlerInstance3() {",
-                "    return Preconditions.checkNotNull(",
-                "        mapModuleTwo.provideLoginHandler(),",
-                "        " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
                 "  private Provider<Handler>",
                 "        getMapOfWrappedClassKeyAndProviderOfHandlerProvider2() {",
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return getMapOfWrappedClassKeyAndProviderOfHandlerInstance3();",
+                "        return Preconditions.checkNotNull(",
+                "            mapModuleTwo.provideLoginHandler()," + NPE_FROM_PROVIDES_METHOD + ");",
                 "      }",
                 "    };",
                 "  }",
@@ -1274,22 +1246,15 @@ public void mapBindingsWithNonProviderValue() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Handler getMapOfPathEnumAndProviderOfHandlerInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        mapModuleOne.provideAdminHandler(),",
-                "        " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
-                "  private Handler getMapOfPathEnumAndProviderOfHandlerInstance2() {",
-                "    return Preconditions.checkNotNull(",
-                "        mapModuleTwo.provideLoginHandler(),",
-                "        " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
                 "  private Map<PathEnum, Handler> getMapOfPathEnumAndHandlerInstance() {",
                 "    return ImmutableMap.<PathEnum, Handler>of(",
-                "        PathEnum.ADMIN, getMapOfPathEnumAndProviderOfHandlerInstance(),",
-                "        PathEnum.LOGIN, getMapOfPathEnumAndProviderOfHandlerInstance2());",
+                "        PathEnum.ADMIN,",
+                "        Preconditions.checkNotNull(",
+                "            mapModuleOne.provideAdminHandler()," + NPE_FROM_PROVIDES_METHOD + "),",
+                "        PathEnum.LOGIN,",
+                "        Preconditions.checkNotNull(",
+                "            mapModuleTwo.provideLoginHandler(),",
+                "            " + NPE_FROM_PROVIDES_METHOD + "));",
                 "  }",
                 "",
                 "  @SuppressWarnings(\"unchecked\")",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
index 89bb431d6..fbeb8941b 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
@@ -113,36 +113,20 @@ public void mapBindings() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private int getMapOfIntegerAndProviderOfIntegerInstance() {",
-                "    return MapModule.provideInt();",
-                "  }",
-                "",
                 "  private Provider<Integer> getMapOfIntegerAndProviderOfIntegerProvider() {",
                 "    return new Provider<Integer>() {",
                 "      @Override",
                 "      public Integer get() {",
-                "        return getMapOfIntegerAndProviderOfIntegerInstance();",
+                "        return MapModule.provideInt();",
                 "      }",
                 "    };",
                 "  }",
                 "",
-                "  private long getMapOfLongAndProviderOfLongInstance() {",
-                "    return MapModule.provideLong0();",
-                "  }",
-                "",
-                "  private long getMapOfLongAndProviderOfLongInstance2() {",
-                "    return MapModule.provideLong1();",
-                "  }",
-                "",
-                "  private long getMapOfLongAndProviderOfLongInstance3() {",
-                "    return MapModule.provideLong2();",
-                "  }",
-                "",
                 "  private Provider<Long> getMapOfLongAndProviderOfLongProvider() {",
                 "    return new Provider<Long>() {",
                 "      @Override",
                 "      public Long get() {",
-                "        return getMapOfLongAndProviderOfLongInstance();",
+                "        return MapModule.provideLong0();",
                 "      }",
                 "    };",
                 "  }",
@@ -151,7 +135,7 @@ public void mapBindings() {
                 "    return new Provider<Long>() {",
                 "      @Override",
                 "      public Long get() {",
-                "        return getMapOfLongAndProviderOfLongInstance2();",
+                "        return MapModule.provideLong1();",
                 "      }",
                 "    };",
                 "  }",
@@ -160,7 +144,7 @@ public void mapBindings() {
                 "    return new Provider<Long>() {",
                 "      @Override",
                 "      public Long get() {",
-                "        return getMapOfLongAndProviderOfLongInstance3();",
+                "        return MapModule.provideLong2();",
                 "      }",
                 "    };",
                 "  }",
@@ -178,7 +162,7 @@ public void mapBindings() {
                 "  @Override",
                 "  public Map<Integer, Integer> ints() {",
                 "    return Collections.<Integer, Integer>singletonMap(",
-                "        0, getMapOfIntegerAndProviderOfIntegerInstance());",
+                "        0, MapModule.provideInt());",
                 "  }",
                 "",
                 "  @Override",
@@ -190,9 +174,9 @@ public void mapBindings() {
                 "  @Override",
                 "  public Map<Long, Long> longs() {",
                 "    return MapBuilder.<Long, Long>newMapBuilder(3)",
-                "        .put(0L, getMapOfLongAndProviderOfLongInstance())",
-                "        .put(1L, getMapOfLongAndProviderOfLongInstance2())",
-                "        .put(2L, getMapOfLongAndProviderOfLongInstance3())",
+                "        .put(0L, MapModule.provideLong0())",
+                "        .put(1L, MapModule.provideLong1())",
+                "        .put(2L, MapModule.provideLong2())",
                 "        .build();",
                 "  }",
                 "",
@@ -428,149 +412,74 @@ public void subcomponentOmitsInheritedBindings() {
             "interface Child {",
             "  Map<String, Object> objectMap();",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerParent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Collections;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerParent implements Parent {",
-                "  private ParentModule parentModule;",
-                "",
-                "  private DaggerParent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static Parent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Object getMapOfStringAndProviderOfObjectInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        parentModule.parentKeyObject(), " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.parentModule = builder.parentModule;",
-                "  }",
-                "",
-                "  @Override",
-                "  public Child child() {",
-                "    return new ChildImpl();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private ParentModule parentModule;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public Parent build() {",
-                "      if (parentModule == null) {",
-                "        this.parentModule = new ParentModule();",
-                "      }",
-                "      return new DaggerParent(this);",
-                "    }",
-                "",
-                "    public Builder parentModule(ParentModule parentModule) {",
-                "      this.parentModule = Preconditions.checkNotNull(parentModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "",
-                "  private final class ChildImpl implements Child {",
-                "    private ChildImpl() {}",
-                "",
-                "    @Override",
-                "    public Map<String, Object> objectMap() {",
-                "      return Collections.<String, Object>singletonMap(",
-                "          \"parent key\",",
-                "          DaggerParent.this.getMapOfStringAndProviderOfObjectInstance());",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerParent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Collections;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerParent implements Parent {",
-                "  private ParentModule parentModule;",
-                "",
-                "  private DaggerParent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static Parent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.parentModule = builder.parentModule;",
-                "  }",
-                "",
-                "  @Override",
-                "  public Child child() {",
-                "    return new ChildImpl();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private ParentModule parentModule;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public Parent build() {",
-                "      if (parentModule == null) {",
-                "        this.parentModule = new ParentModule();",
-                "      }",
-                "      return new DaggerParent(this);",
-                "    }",
-                "",
-                "    public Builder parentModule(ParentModule parentModule) {",
-                "      this.parentModule = Preconditions.checkNotNull(parentModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "",
-                "  private final class ChildImpl implements Child {",
-                "    private ChildImpl() {}",
-                "",
-                "    @Override",
-                "    public Map<String, Object> objectMap() {",
-                "      return Collections.<String, Object>singletonMap(",
-                "          \"parent key\",",
-                "          Preconditions.checkNotNull(",
-                "              DaggerParent.this.parentModule.parentKeyObject(),",
-                "              " + NPE_FROM_PROVIDES_METHOD + "));",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerParent",
+            "package test;",
+            "",
+            "import dagger.internal.Preconditions;",
+            "import java.util.Collections;",
+            "import java.util.Map;",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerParent implements Parent {",
+            "  private ParentModule parentModule;",
+            "",
+            "  private DaggerParent(Builder builder) {",
+            "    initialize(builder);",
+            "  }",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static Parent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @SuppressWarnings(\"unchecked\")",
+            "  private void initialize(final Builder builder) {",
+            "    this.parentModule = builder.parentModule;",
+            "  }",
+            "",
+            "  @Override",
+            "  public Child child() {",
+            "    return new ChildImpl();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private ParentModule parentModule;",
+            "",
+            "    private Builder() {}",
+            "",
+            "    public Parent build() {",
+            "      if (parentModule == null) {",
+            "        this.parentModule = new ParentModule();",
+            "      }",
+            "      return new DaggerParent(this);",
+            "    }",
+            "",
+            "    public Builder parentModule(ParentModule parentModule) {",
+            "      this.parentModule = Preconditions.checkNotNull(parentModule);",
+            "      return this;",
+            "    }",
+            "  }",
+            "",
+            "  private final class ChildImpl implements Child {",
+            "    private ChildImpl() {}",
+            "",
+            "    @Override",
+            "    public Map<String, Object> objectMap() {",
+            "      return Collections.<String, Object>singletonMap(",
+            "          \"parent key\",",
+            "          Preconditions.checkNotNull(",
+            "              DaggerParent.this.parentModule.parentKeyObject(),",
+            "              " + NPE_FROM_PROVIDES_METHOD + "));",
+            "    }",
+            "  }",
+            "}");
+
     Compilation compilation = daggerCompilerWithoutGuava().compile(parent, parentModule, child);
     assertThat(compilation).succeeded();
     assertThat(compilation)
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
index 606d17427..ce512fefa 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
@@ -145,36 +145,20 @@ public void mapBindings() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private int getMapOfIntegerAndProviderOfIntegerInstance() {",
-                "    return MapModule.provideInt();",
-                "  }",
-                "",
                 "  private Provider<Integer> getMapOfIntegerAndProviderOfIntegerProvider() {",
                 "    return new Provider<Integer>() {",
                 "      @Override",
                 "      public Integer get() {",
-                "        return getMapOfIntegerAndProviderOfIntegerInstance();",
+                "        return MapModule.provideInt();",
                 "      }",
                 "    };",
                 "  }",
                 "",
-                "  private long getMapOfLongAndProviderOfLongInstance() {",
-                "    return MapModule.provideLong0();",
-                "  }",
-                "",
-                "  private long getMapOfLongAndProviderOfLongInstance2() {",
-                "    return MapModule.provideLong1();",
-                "  }",
-                "",
-                "  private long getMapOfLongAndProviderOfLongInstance3() {",
-                "    return MapModule.provideLong2();",
-                "  }",
-                "",
                 "  private Provider<Long> getMapOfLongAndProviderOfLongProvider() {",
                 "    return new Provider<Long>() {",
                 "      @Override",
                 "      public Long get() {",
-                "        return getMapOfLongAndProviderOfLongInstance();",
+                "        return MapModule.provideLong0();",
                 "      }",
                 "    };",
                 "  }",
@@ -183,7 +167,7 @@ public void mapBindings() {
                 "    return new Provider<Long>() {",
                 "      @Override",
                 "      public Long get() {",
-                "        return getMapOfLongAndProviderOfLongInstance2();",
+                "        return MapModule.provideLong1();",
                 "      }",
                 "    };",
                 "  }",
@@ -192,7 +176,7 @@ public void mapBindings() {
                 "    return new Provider<Long>() {",
                 "      @Override",
                 "      public Long get() {",
-                "        return getMapOfLongAndProviderOfLongInstance3();",
+                "        return MapModule.provideLong2();",
                 "      }",
                 "    };",
                 "  }",
@@ -209,8 +193,7 @@ public void mapBindings() {
                 "",
                 "  @Override",
                 "  public Map<Integer, Integer> ints() {",
-                "    return ImmutableMap.<Integer, Integer>of(",
-                "        0, getMapOfIntegerAndProviderOfIntegerInstance());",
+                "    return ImmutableMap.<Integer, Integer>of(0, MapModule.provideInt());",
                 "  }",
                 "",
                 "  @Override",
@@ -222,9 +205,9 @@ public void mapBindings() {
                 "  @Override",
                 "  public Map<Long, Long> longs() {",
                 "    return ImmutableMap.<Long, Long>of(",
-                "        0L, getMapOfLongAndProviderOfLongInstance(),",
-                "        1L, getMapOfLongAndProviderOfLongInstance2(),",
-                "        2L, getMapOfLongAndProviderOfLongInstance3());",
+                "        0L, MapModule.provideLong0(),",
+                "        1L, MapModule.provideLong1(),",
+                "        2L, MapModule.provideLong2());",
                 "  }",
                 "",
                 "  @Override",
@@ -251,35 +234,11 @@ public void mapBindings() {
                 "  private final class SubImpl implements Sub {",
                 "    private SubImpl() {}",
                 "",
-                "    private long getMapOfLongAndProviderOfLongInstance() {",
-                "      return MapModule.provideLong0();",
-                "    }",
-                "",
-                "    private long getMapOfLongAndProviderOfLongInstance2() {",
-                "      return MapModule.provideLong1();",
-                "    }",
-                "",
-                "    private long getMapOfLongAndProviderOfLongInstance3() {",
-                "      return MapModule.provideLong2();",
-                "    }",
-                "",
-                "    private long getMapOfLongAndProviderOfLongInstance4() {",
-                "      return SubcomponentMapModule.provideLong3();",
-                "    }",
-                "",
-                "    private long getMapOfLongAndProviderOfLongInstance5() {",
-                "      return SubcomponentMapModule.provideLong4();",
-                "    }",
-                "",
-                "    private long getMapOfLongAndProviderOfLongInstance6() {",
-                "      return SubcomponentMapModule.provideLong5();",
-                "    }",
-                "",
                 "    private Provider<Long> getMapOfLongAndProviderOfLongProvider() {",
                 "      return new Provider<Long>() {",
                 "        @Override",
                 "        public Long get() {",
-                "          return getMapOfLongAndProviderOfLongInstance();",
+                "          return MapModule.provideLong0();",
                 "        }",
                 "      };",
                 "    }",
@@ -288,7 +247,7 @@ public void mapBindings() {
                 "      return new Provider<Long>() {",
                 "        @Override",
                 "        public Long get() {",
-                "          return getMapOfLongAndProviderOfLongInstance2();",
+                "          return MapModule.provideLong1();",
                 "        }",
                 "      };",
                 "    }",
@@ -297,7 +256,7 @@ public void mapBindings() {
                 "      return new Provider<Long>() {",
                 "        @Override",
                 "        public Long get() {",
-                "          return getMapOfLongAndProviderOfLongInstance3();",
+                "          return MapModule.provideLong2();",
                 "        }",
                 "      };",
                 "    }",
@@ -306,7 +265,7 @@ public void mapBindings() {
                 "      return new Provider<Long>() {",
                 "        @Override",
                 "        public Long get() {",
-                "          return getMapOfLongAndProviderOfLongInstance4();",
+                "          return SubcomponentMapModule.provideLong3();",
                 "        }",
                 "      };",
                 "    }",
@@ -315,7 +274,7 @@ public void mapBindings() {
                 "      return new Provider<Long>() {",
                 "        @Override",
                 "        public Long get() {",
-                "          return getMapOfLongAndProviderOfLongInstance5();",
+                "          return SubcomponentMapModule.provideLong4();",
                 "        }",
                 "      };",
                 "    }",
@@ -324,7 +283,7 @@ public void mapBindings() {
                 "      return new Provider<Long>() {",
                 "        @Override",
                 "        public Long get() {",
-                "          return getMapOfLongAndProviderOfLongInstance6();",
+                "          return SubcomponentMapModule.provideLong5();",
                 "        }",
                 "      };",
                 "    }",
@@ -332,12 +291,12 @@ public void mapBindings() {
                 "    @Override",
                 "    public Map<Long, Long> longs() {",
                 "      return ImmutableMap.<Long, Long>builder()",
-                "          .put(0L, getMapOfLongAndProviderOfLongInstance())",
-                "          .put(1L, getMapOfLongAndProviderOfLongInstance2())",
-                "          .put(2L, getMapOfLongAndProviderOfLongInstance3())",
-                "          .put(3L, getMapOfLongAndProviderOfLongInstance4())",
-                "          .put(4L, getMapOfLongAndProviderOfLongInstance5())",
-                "          .put(5L, getMapOfLongAndProviderOfLongInstance6())",
+                "          .put(0L, MapModule.provideLong0())",
+                "          .put(1L, MapModule.provideLong1())",
+                "          .put(2L, MapModule.provideLong2())",
+                "          .put(3L, SubcomponentMapModule.provideLong3())",
+                "          .put(4L, SubcomponentMapModule.provideLong4())",
+                "          .put(5L, SubcomponentMapModule.provideLong5())",
                 "          .build();",
                 "    }",
                 "",
@@ -599,149 +558,74 @@ public void subcomponentOmitsInheritedBindings() {
             "interface Child {",
             "  Map<String, Object> objectMap();",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerParent",
-                "package test;",
-                "",
-                "import com.google.common.collect.ImmutableMap;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerParent implements Parent {",
-                "  private ParentModule parentModule;",
-                "",
-                "  private DaggerParent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static Parent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Object getMapOfStringAndProviderOfObjectInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        parentModule.parentKeyObject(), " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.parentModule = builder.parentModule;",
-                "  }",
-                "",
-                "  @Override",
-                "  public Child child() {",
-                "    return new ChildImpl();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private ParentModule parentModule;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public Parent build() {",
-                "      if (parentModule == null) {",
-                "        this.parentModule = new ParentModule();",
-                "      }",
-                "      return new DaggerParent(this);",
-                "    }",
-                "",
-                "    public Builder parentModule(ParentModule parentModule) {",
-                "      this.parentModule = Preconditions.checkNotNull(parentModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "",
-                "  private final class ChildImpl implements Child {",
-                "    private ChildImpl() {}",
-                "",
-                "    @Override",
-                "    public Map<String, Object> objectMap() {",
-                "      return ImmutableMap.<String, Object>of(",
-                "          \"parent key\",",
-                "          DaggerParent.this.getMapOfStringAndProviderOfObjectInstance());",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerParent",
-                "package test;",
-                "",
-                "import com.google.common.collect.ImmutableMap;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerParent implements Parent {",
-                "  private ParentModule parentModule;",
-                "",
-                "  private DaggerParent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static Parent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.parentModule = builder.parentModule;",
-                "  }",
-                "",
-                "  @Override",
-                "  public Child child() {",
-                "    return new ChildImpl();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private ParentModule parentModule;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public Parent build() {",
-                "      if (parentModule == null) {",
-                "        this.parentModule = new ParentModule();",
-                "      }",
-                "      return new DaggerParent(this);",
-                "    }",
-                "",
-                "    public Builder parentModule(ParentModule parentModule) {",
-                "      this.parentModule = Preconditions.checkNotNull(parentModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "",
-                "  private final class ChildImpl implements Child {",
-                "    private ChildImpl() {}",
-                "",
-                "    @Override",
-                "    public Map<String, Object> objectMap() {",
-                "      return ImmutableMap.<String, Object>of(",
-                "          \"parent key\",",
-                "          Preconditions.checkNotNull(",
-                "              DaggerParent.this.parentModule.parentKeyObject(),",
-                "              " + NPE_FROM_PROVIDES_METHOD + ");",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerParent",
+            "package test;",
+            "",
+            "import com.google.common.collect.ImmutableMap;",
+            "import dagger.internal.Preconditions;",
+            "import java.util.Map;",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerParent implements Parent {",
+            "  private ParentModule parentModule;",
+            "",
+            "  private DaggerParent(Builder builder) {",
+            "    initialize(builder);",
+            "  }",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static Parent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @SuppressWarnings(\"unchecked\")",
+            "  private void initialize(final Builder builder) {",
+            "    this.parentModule = builder.parentModule;",
+            "  }",
+            "",
+            "  @Override",
+            "  public Child child() {",
+            "    return new ChildImpl();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private ParentModule parentModule;",
+            "",
+            "    private Builder() {}",
+            "",
+            "    public Parent build() {",
+            "      if (parentModule == null) {",
+            "        this.parentModule = new ParentModule();",
+            "      }",
+            "      return new DaggerParent(this);",
+            "    }",
+            "",
+            "    public Builder parentModule(ParentModule parentModule) {",
+            "      this.parentModule = Preconditions.checkNotNull(parentModule);",
+            "      return this;",
+            "    }",
+            "  }",
+            "",
+            "  private final class ChildImpl implements Child {",
+            "    private ChildImpl() {}",
+            "",
+            "    @Override",
+            "    public Map<String, Object> objectMap() {",
+            "      return ImmutableMap.<String, Object>of(",
+            "          \"parent key\",",
+            "          Preconditions.checkNotNull(",
+            "              DaggerParent.this.parentModule.parentKeyObject(),",
+            "              " + NPE_FROM_PROVIDES_METHOD + ");",
+            "    }",
+            "  }",
+            "}");
+
     Compilation compilation =
         daggerCompiler().withOptions(compilerMode.javacopts()).compile(parent, parentModule, child);
     assertThat(compilation).succeeded();
diff --git a/javatests/dagger/internal/codegen/MapKeyProcessorTest.java b/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
index da7631351..5c8d26736 100644
--- a/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -255,32 +255,22 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Handler getMapOfPathKeyAndProviderOfHandlerInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        mapModuleOne.provideAdminHandler(),",
-                "        " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
                 "  private Provider<Handler> getMapOfPathKeyAndProviderOfHandlerProvider() {",
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return getMapOfPathKeyAndProviderOfHandlerInstance();",
+                "        return Preconditions.checkNotNull(",
+                "            mapModuleOne.provideAdminHandler()," + NPE_FROM_PROVIDES_METHOD + ");",
                 "      }",
                 "    };",
                 "  }",
                 "",
-                "  private Handler getMapOfPathKeyAndProviderOfHandlerInstance2() {",
-                "    return Preconditions.checkNotNull(",
-                "        mapModuleTwo.provideLoginHandler(),",
-                "        " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
                 "  private Provider<Handler> getMapOfPathKeyAndProviderOfHandlerProvider2() {",
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return getMapOfPathKeyAndProviderOfHandlerInstance2();",
+                "        return Preconditions.checkNotNull(",
+                "            mapModuleTwo.provideLoginHandler()," + NPE_FROM_PROVIDES_METHOD + ");",
                 "      }",
                 "    };",
                 "  }",
@@ -533,32 +523,22 @@ public void mapKeyComponentFileWithDefaultField() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Handler getMapOfPathKeyAndProviderOfHandlerInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        mapModuleOne.provideAdminHandler(),",
-                "        " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
                 "  private Provider<Handler> getMapOfPathKeyAndProviderOfHandlerProvider() {",
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return getMapOfPathKeyAndProviderOfHandlerInstance();",
+                "        return Preconditions.checkNotNull(",
+                "            mapModuleOne.provideAdminHandler()," + NPE_FROM_PROVIDES_METHOD + ");",
                 "      }",
                 "    };",
                 "  }",
                 "",
-                "  private Handler getMapOfPathKeyAndProviderOfHandlerInstance2() {",
-                "    return Preconditions.checkNotNull(",
-                "        mapModuleTwo.provideLoginHandler(),",
-                "        " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
                 "  private Provider<Handler> getMapOfPathKeyAndProviderOfHandlerProvider2() {",
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return getMapOfPathKeyAndProviderOfHandlerInstance2();",
+                "        return Preconditions.checkNotNull(",
+                "            mapModuleTwo.provideLoginHandler()," + NPE_FROM_PROVIDES_METHOD + ");",
                 "      }",
                 "    };",
                 "  }",
diff --git a/javatests/dagger/internal/codegen/MembersInjectionTest.java b/javatests/dagger/internal/codegen/MembersInjectionTest.java
index 80fca28d1..8c51d630a 100644
--- a/javatests/dagger/internal/codegen/MembersInjectionTest.java
+++ b/javatests/dagger/internal/codegen/MembersInjectionTest.java
@@ -158,94 +158,46 @@ public void parentClass_injectedMembersInSupertype() {
         "interface TestComponent {",
         "  Child child();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Dep getDepInstance() {",
-                "    return new Dep();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Child child() {",
-                "    return injectChild(Child_Factory.newChild());",
-                "  }",
-                "",
-                "  @CanIgnoreReturnValue",
-                "  private Child injectChild(Child instance) {",
-                "    Parent_MembersInjector.injectDep(instance, getDepInstance());",
-                "    return instance;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Child child() {",
-                "    return injectChild(Child_Factory.newChild());",
-                "  }",
-                "",
-                "  @CanIgnoreReturnValue",
-                "  private Child injectChild(Child instance) {",
-                "    Parent_MembersInjector.injectDep(instance, new Dep());",
-                "    return instance;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private DaggerTestComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Child child() {",
+            "    return injectChild(Child_Factory.newChild());",
+            "  }",
+            "",
+            "  @CanIgnoreReturnValue",
+            "  private Child injectChild(Child instance) {",
+            "    Parent_MembersInjector.injectDep(instance, new Dep());",
+            "    return instance;",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "  }",
+            "}");
+
     assertAbout(javaSources())
         .that(ImmutableList.of(childFile, parentFile, depFile, componentFile))
         .withCompilerOptions(compilerMode.javacopts())
@@ -1360,10 +1312,6 @@ public void accessibility() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Object getFooInstance() {",
-                "    return Foo_Factory.newFoo();",
-                "  }",
-                "",
                 "  private Object getInaccessibleInstance() {",
                 "    return injectInaccessible(Inaccessible_Factory.newInaccessible());",
                 "  }",
@@ -1379,8 +1327,8 @@ public void accessibility() {
                 // any parent component
                 "  @CanIgnoreReturnValue",
                 "  private Object injectInaccessible(Object instance) {",
-                "    Inaccessible_MembersInjector.injectFoo(instance, getFooInstance());",
-                "    Inaccessible_MembersInjector.injectMethod(instance, getFooInstance());",
+                "    Inaccessible_MembersInjector.injectFoo(instance, Foo_Factory.newFoo());",
+                "    Inaccessible_MembersInjector.injectMethod(instance, Foo_Factory.newFoo());",
                 "    return instance;",
                 "  }",
                 "",
@@ -1670,10 +1618,6 @@ public void publicSupertypeHiddenSubtype() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Object getFooInstance() {",
-                "    return Foo_Factory.newFoo();",
-                "  }",
-                "",
                 "  private Object getSubtypeInstance() {",
                 "    return injectSubtype(Subtype_Factory.newSubtype());",
                 "  }",
@@ -1685,7 +1629,8 @@ public void publicSupertypeHiddenSubtype() {
                 "",
                 "  @CanIgnoreReturnValue",
                 "  private Object injectSubtype(Object instance) {",
-                "    Supertype_MembersInjector.injectT((Supertype) instance, getFooInstance());",
+                "    Supertype_MembersInjector.injectT(",
+                "        (Supertype) instance, Foo_Factory.newFoo());",
                 "    return instance;",
                 "  }",
                 "",
diff --git a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
index bc985529b..dae6ceb48 100644
--- a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
@@ -132,17 +132,12 @@ public void inlinedOptionalBindings() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Maybe getMaybeInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        Maybe.MaybeModule.provideMaybe(),",
-                "        " + NPE_FROM_PROVIDES + ");",
-                "  }",
-                "",
                 "  private Provider<Maybe> getMaybeProvider() {",
                 "    return new Provider<Maybe>() {",
                 "      @Override",
                 "      public Maybe get() {",
-                "        return getMaybeInstance();",
+                "        return Preconditions.checkNotNull(",
+                "            Maybe.MaybeModule.provideMaybe(), " + NPE_FROM_PROVIDES + ");",
                 "      }",
                 "    };",
                 "  }",
@@ -153,7 +148,8 @@ public void inlinedOptionalBindings() {
                 "",
                 "  @Override",
                 "  public Optional<Maybe> maybe() {",
-                "    return Optional.of(getMaybeInstance());",
+                "    return Optional.of(Preconditions.checkNotNull(",
+                "        Maybe.MaybeModule.provideMaybe()," + NPE_FROM_PROVIDES + "));",
                 "  }",
                 "",
                 "  @Override",
@@ -307,123 +303,60 @@ public void requestForFuture() {
             "  ListenableFuture<Optional<Maybe>> maybe();",
             "  ListenableFuture<Optional<DefinitelyNot>> definitelyNot();",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.common.base.Optional;",
-                "import com.google.common.util.concurrent.Futures;",
-                "import com.google.common.util.concurrent.ListenableFuture;",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "import other.DefinitelyNot;",
-                "import other.Maybe;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Maybe getMaybeInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        Maybe.MaybeModule.provideMaybe(),",
-                "        " + NPE_FROM_PROVIDES + ");",
-                "  }",
-                "",
-                "  @Override",
-                "  public ListenableFuture<Optional<Maybe>> maybe() {",
-                "    return Futures.immediateFuture(Optional.of(getMaybeInstance()));",
-                "  }",
-                "",
-                "  @Override",
-                "  public ListenableFuture<Optional<DefinitelyNot>> definitelyNot() {",
-                "    return Futures.immediateFuture(Optional.<DefinitelyNot>absent());",
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import com.google.common.base.Optional;",
+            "import com.google.common.util.concurrent.Futures;",
+            "import com.google.common.util.concurrent.ListenableFuture;",
+            "import dagger.internal.Preconditions;",
+            "import javax.annotation.Generated;",
+            "import other.DefinitelyNot;",
+            "import other.Maybe;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private DaggerTestComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public ListenableFuture<Optional<Maybe>> maybe() {",
+            "    return Futures.immediateFuture(Optional.of(Preconditions.checkNotNull(",
+            "        Maybe.MaybeModule.provideMaybe(), " + NPE_FROM_PROVIDES + ")));",
+            "  }",
+            "",
+            "  @Override",
+            "  public ListenableFuture<Optional<DefinitelyNot>> definitelyNot() {",
+            "    return Futures.immediateFuture(Optional.<DefinitelyNot>absent());",
 
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder testComponent_ProductionExecutorModule(",
-                "        TestComponent_ProductionExecutorModule",
-                "            testComponent_ProductionExecutorModule) {",
-                "      Preconditions.checkNotNull(testComponent_ProductionExecutorModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.common.base.Optional;",
-                "import com.google.common.util.concurrent.Futures;",
-                "import com.google.common.util.concurrent.ListenableFuture;",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "import other.DefinitelyNot;",
-                "import other.Maybe;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public ListenableFuture<Optional<Maybe>> maybe() {",
-                "    return Futures.immediateFuture(Optional.of(Preconditions.checkNotNull(",
-                "        Maybe.MaybeModule.provideMaybe(), " + NPE_FROM_PROVIDES + ")));",
-                "  }",
-                "",
-                "  @Override",
-                "  public ListenableFuture<Optional<DefinitelyNot>> definitelyNot() {",
-                "    return Futures.immediateFuture(Optional.<DefinitelyNot>absent());",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "",
+            "    @Deprecated",
+            "    public Builder testComponent_ProductionExecutorModule(",
+            "        TestComponent_ProductionExecutorModule",
+            "            testComponent_ProductionExecutorModule) {",
+            "      Preconditions.checkNotNull(testComponent_ProductionExecutorModule);",
+            "      return this;",
+            "    }",
+            "  }",
+            "}");
 
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder testComponent_ProductionExecutorModule(",
-                "        TestComponent_ProductionExecutorModule",
-                "            testComponent_ProductionExecutorModule) {",
-                "      Preconditions.checkNotNull(testComponent_ProductionExecutorModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-    }
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index f2eedcc25..acce0c29a 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -242,15 +242,10 @@ public void simpleComponent() {
                 "public final class DaggerTestClass_SimpleComponent",
                 "    implements TestClass.SimpleComponent {",
                 "  private TestClass.BModule bModule;",
-                "",
                 "  private Provider<Executor> executorProvider2;",
-                "",
                 "  private Provider<TestClass.SimpleComponent> simpleComponentProvider;",
-                "",
                 "  private Provider<ProductionComponentMonitor> monitorProvider;",
-                "",
                 "  private Producer<TestClass.B> bProducer;",
-                "",
                 "  private Producer<TestClass.A> aProducer;",
                 "",
                 "  private DaggerTestClass_SimpleComponent(Builder builder) {",
@@ -265,27 +260,19 @@ public void simpleComponent() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Executor getProductionExecutorInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        bModule.executor(), " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
                 "  private Provider<Executor> getProductionExecutorProvider() {",
                 "    return new Provider<Executor>() {",
                 "      @Override",
                 "      public Executor get() {",
-                "        return getProductionExecutorInstance();",
+                "        return Preconditions.checkNotNull(",
+                "            bModule.executor(), " + NPE_FROM_PROVIDES_METHOD + ");",
                 "      }",
                 "    };",
                 "  }",
                 "",
-                "  private TestClass.C getCInstance() {",
-                "    return new TestClass.C();",
-                "  }",
-                "",
                 "  private TestClass.B getBInstance() {",
                 "    return Preconditions.checkNotNull(",
-                "        bModule.b(getCInstance()), " + NPE_FROM_PROVIDES_METHOD + ");",
+                "        bModule.b(new TestClass.C()), " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
                 "",
                 "  private Provider<TestClass.B> getBProvider() {",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
index 79006cb76..a58eea147 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
@@ -92,125 +92,59 @@ public void setBindings() {
         "  Set<String> strings();",
         "  Set<Object> objects();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import dagger.internal.SetBuilder;",
-                "import java.util.Collections;",
-                "import java.util.Set;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Set<String> getSetOfStringInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        EmptySetModule.emptySet(), " + NPE_FROM_PROVIDES + ");",
-                "  }",
-                "",
-                "  private String getStringInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        SetModule.string(), " + NPE_FROM_PROVIDES + ");",
-                "  }",
-                "",
-                "  @Override",
-                "  public Set<String> strings() {",
-                "    return SetBuilder.<String>newSetBuilder(2)",
-                "        .addAll(getSetOfStringInstance())",
-                "        .add(getStringInstance())",
-                "        .build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Set<Object> objects() {",
-                "    return Collections.<Object>emptySet();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder setModule(SetModule setModule) {",
-                "      Preconditions.checkNotNull(setModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import dagger.internal.SetBuilder;",
-                "import java.util.Collections;",
-                "import java.util.Set;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Set<String> strings() {",
-                "    return SetBuilder.<String>newSetBuilder(2)",
-                "        .addAll(Preconditions.checkNotNull(",
-                "            EmptySetModule.emptySet(), " + NPE_FROM_PROVIDES + "))",
-                "        .add(Preconditions.checkNotNull(",
-                "            SetModule.string(), " + NPE_FROM_PROVIDES + "))",
-                "        .build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Set<Object> objects() {",
-                "    return Collections.<Object>emptySet();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder setModule(SetModule setModule) {",
-                "      Preconditions.checkNotNull(setModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import dagger.internal.Preconditions;",
+            "import dagger.internal.SetBuilder;",
+            "import java.util.Collections;",
+            "import java.util.Set;",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private DaggerTestComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Set<String> strings() {",
+            "    return SetBuilder.<String>newSetBuilder(2)",
+            "        .addAll(Preconditions.checkNotNull(",
+            "            EmptySetModule.emptySet(), " + NPE_FROM_PROVIDES + "))",
+            "        .add(Preconditions.checkNotNull(",
+            "            SetModule.string(), " + NPE_FROM_PROVIDES + "))",
+            "        .build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Set<Object> objects() {",
+            "    return Collections.<Object>emptySet();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {",
+            "    }",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "",
+            "    @Deprecated",
+            "    public Builder setModule(SetModule setModule) {",
+            "      Preconditions.checkNotNull(setModule);",
+            "      return this;",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompilerWithoutGuava().compile(emptySetModuleFile, setModuleFile, componentFile);
     assertThat(compilation).succeeded();
@@ -310,15 +244,11 @@ public void inaccessible() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Set getSetOfInaccessible2Instance2() {",
-                "    return Preconditions.checkNotNull(",
-                "        TestModule_EmptySetFactory.proxyEmptySet(),",
-                "        " + NPE_FROM_PROVIDES + ");",
-                "  }",
-                "",
                 "  private Set getSetOfInaccessible2Instance() {",
                 "    return SetBuilder.newSetBuilder(1)",
-                "        .addAll(getSetOfInaccessible2Instance2())",
+                "        .addAll(Preconditions.checkNotNull(",
+                "            TestModule_EmptySetFactory.proxyEmptySet(),",
+                "            " + NPE_FROM_PROVIDES + "))",
                 "        .build();",
                 "  }",
                 "",
@@ -435,118 +365,58 @@ public void subcomponentOmitsInheritedBindings() {
             "interface Child {",
             "  Set<Object> objectSet();",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerParent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Collections;",
-                "import java.util.Set;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerParent implements Parent {",
-                "  private DaggerParent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static Parent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Child child() {",
-                "    return new ChildImpl();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public Parent build() {",
-                "      return new DaggerParent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder parentModule(ParentModule parentModule) {",
-                "      Preconditions.checkNotNull(parentModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "",
-                "  private final class ChildImpl implements Child {",
-                "    private ChildImpl() {}",
-                "",
-                "    private Object getObjectInstance() {",
-                "      return Preconditions.checkNotNull(",
-                "          ParentModule.parentObject(), " + NPE_FROM_PROVIDES + ");",
-                "    }",
-                "",
-                "    @Override",
-                "    public Set<Object> objectSet() {",
-                "      return Collections.<Object>singleton(getObjectInstance());",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerParent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Collections;",
-                "import java.util.Set;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerParent implements Parent {",
-                "  private DaggerParent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static Parent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Child child() {",
-                "    return new ChildImpl();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public Parent build() {",
-                "      return new DaggerParent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder parentModule(ParentModule parentModule) {",
-                "      Preconditions.checkNotNull(parentModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "",
-                "  private final class ChildImpl implements Child {",
-                "    private ChildImpl() {}",
-                "",
-                "    @Override",
-                "    public Set<Object> objectSet() {",
-                "      return Collections.<Object>singleton(Preconditions.checkNotNull(",
-                "          ParentModule.parentObject(), " + NPE_FROM_PROVIDES + "));",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerParent",
+            "package test;",
+            "",
+            "import dagger.internal.Preconditions;",
+            "import java.util.Collections;",
+            "import java.util.Set;",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerParent implements Parent {",
+            "  private DaggerParent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static Parent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Child child() {",
+            "    return new ChildImpl();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public Parent build() {",
+            "      return new DaggerParent(this);",
+            "    }",
+            "",
+            "    @Deprecated",
+            "    public Builder parentModule(ParentModule parentModule) {",
+            "      Preconditions.checkNotNull(parentModule);",
+            "      return this;",
+            "    }",
+            "  }",
+            "",
+            "  private final class ChildImpl implements Child {",
+            "    private ChildImpl() {}",
+            "",
+            "    @Override",
+            "    public Set<Object> objectSet() {",
+            "      return Collections.<Object>singleton(Preconditions.checkNotNull(",
+            "          ParentModule.parentObject(), " + NPE_FROM_PROVIDES + "));",
+            "    }",
+            "  }",
+            "}");
+
     Compilation compilation = daggerCompilerWithoutGuava().compile(parent, parentModule, child);
     assertThat(compilation).succeeded();
     assertThat(compilation)
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
index bb980c6a3..671554590 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
@@ -95,142 +95,66 @@ public void setBindings() {
         "  Set<Object> objects();",
         "  Set<Integer> onlyContributionIsElementsIntoSet();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.common.collect.ImmutableSet;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Set;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Set<String> getSetOfStringInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        EmptySetModule.emptySet(), " + NPE_FROM_PROVIDES + ");",
-                "  }",
-                "",
-                "  private String getStringInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        SetModule.string(), " + NPE_FROM_PROVIDES + ");",
-                "  }",
-                "",
-                "  private Set<Integer> getSetOfIntegerInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        EmptySetModule.onlyContributionIsElementsIntoSet(),",
-                "        " + NPE_FROM_PROVIDES + ");",
-                "  }",
-                "",
-                "  @Override",
-                "  public Set<String> strings() {",
-                "    return ImmutableSet.<String>builder()",
-                "        .addAll(getSetOfStringInstance())",
-                "        .add(getStringInstance())",
-                "        .build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Set<Object> objects() {",
-                "    return ImmutableSet.<Object>of();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Set<Integer> onlyContributionIsElementsIntoSet() {",
-                "    return ImmutableSet.<Integer>copyOf(getSetOfIntegerInstance());",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder setModule(SetModule setModule) {",
-                "      Preconditions.checkNotNull(setModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.common.collect.ImmutableSet;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Set;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Set<String> strings() {",
-                "    return ImmutableSet.<String>builder()",
-                "        .addAll(Preconditions.checkNotNull(",
-                "            EmptySetModule.emptySet(), " + NPE_FROM_PROVIDES + "))",
-                "        .add(Preconditions.checkNotNull(",
-                "            SetModule.string(), " + NPE_FROM_PROVIDES + "))",
-                "        .build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Set<Object> objects() {",
-                "    return ImmutableSet.<Object>of();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Set<Integer> onlyContributionIsElementsIntoSet() {",
-                "    return ImmutableSet.<Integer>copyOf(",
-                "        Preconditions.checkNotNull(",
-                "            EmptySetModule.onlyContributionIsElementsIntoSet(),",
-                "            " + NPE_FROM_PROVIDES + "));",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder setModule(SetModule setModule) {",
-                "      Preconditions.checkNotNull(setModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.Preconditions;",
+            "import java.util.Set;",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private DaggerTestComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Set<String> strings() {",
+            "    return ImmutableSet.<String>builder()",
+            "        .addAll(Preconditions.checkNotNull(",
+            "            EmptySetModule.emptySet(), " + NPE_FROM_PROVIDES + "))",
+            "        .add(Preconditions.checkNotNull(",
+            "            SetModule.string(), " + NPE_FROM_PROVIDES + "))",
+            "        .build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Set<Object> objects() {",
+            "    return ImmutableSet.<Object>of();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Set<Integer> onlyContributionIsElementsIntoSet() {",
+            "    return ImmutableSet.<Integer>copyOf(",
+            "        Preconditions.checkNotNull(",
+            "            EmptySetModule.onlyContributionIsElementsIntoSet(),",
+            "            " + NPE_FROM_PROVIDES + "));",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {",
+            "    }",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "",
+            "    @Deprecated",
+            "    public Builder setModule(SetModule setModule) {",
+            "      Preconditions.checkNotNull(setModule);",
+            "      return this;",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
@@ -331,14 +255,11 @@ public void inaccessible() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Set getSetOfInaccessible2Instance2() {",
-                "    return Preconditions.checkNotNull(",
-                "        TestModule_EmptySetFactory.proxyEmptySet(),",
-                "        " + NPE_FROM_PROVIDES + ");",
-                "  }",
-                "",
                 "  private Set getSetOfInaccessible2Instance() {",
-                "    return ImmutableSet.copyOf(getSetOfInaccessible2Instance2());",
+                "    return ImmutableSet.copyOf(",
+                "        Preconditions.checkNotNull(",
+                "            TestModule_EmptySetFactory.proxyEmptySet(),",
+                "            " + NPE_FROM_PROVIDES + "));",
                 "  }",
                 "",
                 "  @Override",
@@ -453,118 +374,57 @@ public void subcomponentOmitsInheritedBindings() {
             "interface Child {",
             "  Set<Object> objectSet();",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerParent",
-                "package test;",
-                "",
-                "import com.google.common.collect.ImmutableSet;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Set;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerParent implements Parent {",
-                "  private DaggerParent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static Parent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Child child() {",
-                "    return new ChildImpl();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public Parent build() {",
-                "      return new DaggerParent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder parentModule(ParentModule parentModule) {",
-                "      Preconditions.checkNotNull(parentModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "",
-                "  private final class ChildImpl implements Child {",
-                "    private ChildImpl() {}",
-                "",
-                "    private Object getObjectInstance() {",
-                "      return Preconditions.checkNotNull(",
-                "          ParentModule.parentObject(), " + NPE_FROM_PROVIDES + ");",
-                "    }",
-                "",
-                "    @Override",
-                "    public Set<Object> objectSet() {",
-                "      return ImmutableSet.<Object>of(getObjectInstance());",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerParent",
-                "package test;",
-                "",
-                "import com.google.common.collect.ImmutableSet;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Set;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerParent implements Parent {",
-                "  private DaggerParent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static Parent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Child child() {",
-                "    return new ChildImpl();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public Parent build() {",
-                "      return new DaggerParent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder parentModule(ParentModule parentModule) {",
-                "      Preconditions.checkNotNull(parentModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "",
-                "  private final class ChildImpl implements Child {",
-                "    private ChildImpl() {}",
-                "",
-                "    @Override",
-                "    public Set<Object> objectSet() {",
-                "      return ImmutableSet.<Object>of(Preconditions.checkNotNull(",
-                "          ParentModule.parentObject(), " + NPE_FROM_PROVIDES + "));",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerParent",
+            "package test;",
+            "",
+            "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.Preconditions;",
+            "import java.util.Set;",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerParent implements Parent {",
+            "  private DaggerParent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static Parent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Child child() {",
+            "    return new ChildImpl();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public Parent build() {",
+            "      return new DaggerParent(this);",
+            "    }",
+            "",
+            "    @Deprecated",
+            "    public Builder parentModule(ParentModule parentModule) {",
+            "      Preconditions.checkNotNull(parentModule);",
+            "      return this;",
+            "    }",
+            "  }",
+            "",
+            "  private final class ChildImpl implements Child {",
+            "    private ChildImpl() {}",
+            "",
+            "    @Override",
+            "    public Set<Object> objectSet() {",
+            "      return ImmutableSet.<Object>of(Preconditions.checkNotNull(",
+            "          ParentModule.parentObject(), " + NPE_FROM_PROVIDES + "));",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompiler().withOptions(compilerMode.javacopts()).compile(parent, parentModule, child);
     assertThat(compilation).succeeded();
@@ -602,112 +462,55 @@ public void productionComponents() {
         "interface TestComponent {",
         "  ListenableFuture<Set<String>> strings();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.common.collect.ImmutableSet;",
-                "import com.google.common.util.concurrent.Futures;",
-                "import com.google.common.util.concurrent.ListenableFuture;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Set;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Set<String> getSetOfStringInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        EmptySetModule.emptySet(), " + NPE_FROM_PROVIDES + ");",
-                "  }",
-                "",
-                "  @Override",
-                "  public ListenableFuture<Set<String>> strings() {",
-                "    return Futures.<Set<String>>immediateFuture(",
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import com.google.common.collect.ImmutableSet;",
+            "import com.google.common.util.concurrent.Futures;",
+            "import com.google.common.util.concurrent.ListenableFuture;",
+            "import dagger.internal.Preconditions;",
+            "import java.util.Set;",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private DaggerTestComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public ListenableFuture<Set<String>> strings() {",
+            "    return Futures.<Set<String>>immediateFuture(",
 
-                "        ImmutableSet.<String>copyOf(getSetOfStringInstance()));",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder testComponent_ProductionExecutorModule(",
-                "        TestComponent_ProductionExecutorModule",
-                "            testComponent_ProductionExecutorModule) {",
-                "      Preconditions.checkNotNull(testComponent_ProductionExecutorModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.common.collect.ImmutableSet;",
-                "import com.google.common.util.concurrent.Futures;",
-                "import com.google.common.util.concurrent.ListenableFuture;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Set;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public ListenableFuture<Set<String>> strings() {",
-                "    return Futures.<Set<String>>immediateFuture(",
+            "        ImmutableSet.<String>copyOf(Preconditions.checkNotNull(",
+            "            EmptySetModule.emptySet(), " + NPE_FROM_PROVIDES + "));",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "",
+            "    @Deprecated",
+            "    public Builder testComponent_ProductionExecutorModule(",
+            "        TestComponent_ProductionExecutorModule",
+            "            testComponent_ProductionExecutorModule) {",
+            "      Preconditions.checkNotNull(testComponent_ProductionExecutorModule);",
+            "      return this;",
+            "    }",
+            "  }",
+            "}");
 
-                "        ImmutableSet.<String>copyOf(Preconditions.checkNotNull(",
-                "            EmptySetModule.emptySet(), " + NPE_FROM_PROVIDES + "));",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder testComponent_ProductionExecutorModule(",
-                "        TestComponent_ProductionExecutorModule",
-                "            testComponent_ProductionExecutorModule) {",
-                "      Preconditions.checkNotNull(testComponent_ProductionExecutorModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-    }
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
