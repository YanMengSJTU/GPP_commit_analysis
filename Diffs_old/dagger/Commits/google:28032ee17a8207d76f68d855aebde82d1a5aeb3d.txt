diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index fd585f23b..c298b85dc 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -40,7 +40,6 @@
 import dagger.internal.codegen.ComponentDescriptor.BuilderSpec;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import dagger.internal.codegen.ComponentGenerator.MemberSelect;
-import dagger.internal.codegen.ComponentGenerator.ProxyClassAndField;
 import dagger.internal.codegen.writer.ClassName;
 import dagger.internal.codegen.writer.ClassWriter;
 import dagger.internal.codegen.writer.ConstructorWriter;
@@ -52,26 +51,22 @@
 import dagger.internal.codegen.writer.StringLiteral;
 import dagger.internal.codegen.writer.TypeName;
 import dagger.internal.codegen.writer.TypeNames;
-import dagger.internal.codegen.writer.TypeWriter;
 import dagger.internal.codegen.writer.VoidName;
 import dagger.producers.Producer;
 import dagger.producers.internal.Producers;
 import dagger.producers.internal.SetOfProducedProducer;
 import dagger.producers.internal.SetProducer;
 import java.util.Collection;
-import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import javax.annotation.Generated;
 import javax.inject.Provider;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.Modifier;
 import javax.lang.model.element.Name;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
@@ -96,9 +91,9 @@
 import static dagger.internal.codegen.Binding.bindingPackageFor;
 import static dagger.internal.codegen.ComponentGenerator.MemberSelect.staticMethodInvocationWithCast;
 import static dagger.internal.codegen.ComponentGenerator.MemberSelect.staticSelect;
+import static dagger.internal.codegen.ContributionBinding.contributionTypeFor;
 import static dagger.internal.codegen.ContributionBinding.FactoryCreationStrategy.ENUM_INSTANCE;
 import static dagger.internal.codegen.ContributionBinding.Kind.PROVISION;
-import static dagger.internal.codegen.ContributionBinding.contributionTypeFor;
 import static dagger.internal.codegen.ErrorMessages.CANNOT_RETURN_NULL_FROM_NON_NULLABLE_COMPONENT_METHOD;
 import static dagger.internal.codegen.MapKeys.getMapKeySnippet;
 import static dagger.internal.codegen.MembersInjectionBinding.Strategy.NO_OP;
@@ -133,7 +128,6 @@
   protected final Set<JavaWriter> javaWriters = new LinkedHashSet<>();
   protected final ClassName name;
   protected final BindingGraph graph;
-  private final Map<String, ProxyClassAndField> packageProxies = new HashMap<>();
   private final Map<BindingKey, InitializationState> initializationStates = new HashMap<>();
   private final Map<Binding, InitializationState> contributionInitializationStates =
       new HashMap<>();
@@ -480,45 +474,9 @@ private void addField(ResolvedBindings resolvedBindings) {
       return;
     }
 
-    String bindingPackage = bindingPackageFor(resolvedBindings.bindings()).or(name.packageName());
-
-    final Optional<String> proxySelector;
-    final TypeWriter classWithFields;
-    final Set<Modifier> fieldModifiers;
-
-    if (bindingPackage.equals(name.packageName())) {
-      // no proxy
-      proxySelector = Optional.absent();
-      // component gets the fields
-      classWithFields = componentWriter;
-      // private fields
-      fieldModifiers = EnumSet.of(PRIVATE);
-    } else {
-      // get or create the proxy
-      ProxyClassAndField proxyClassAndField = packageProxies.get(bindingPackage);
-      if (proxyClassAndField == null) {
-        JavaWriter proxyJavaWriter = JavaWriter.inPackage(bindingPackage);
-        javaWriters.add(proxyJavaWriter);
-        ClassWriter proxyWriter = proxyJavaWriter.addClass(name.simpleName() + "_PackageProxy");
-        proxyWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getCanonicalName());
-        proxyWriter.addModifiers(PUBLIC, FINAL);
-        // create the field for the proxy in the component
-        FieldWriter proxyFieldWriter =
-            componentWriter.addField(
-                proxyWriter.name(), bindingPackage.replace('.', '_') + "_Proxy");
-        proxyFieldWriter.addModifiers(PRIVATE, FINAL);
-        proxyFieldWriter.setInitializer("new %s()", proxyWriter.name());
-        proxyClassAndField = ProxyClassAndField.create(proxyWriter, proxyFieldWriter);
-        packageProxies.put(bindingPackage, proxyClassAndField);
-      }
-      // add the field for the member select
-      proxySelector = Optional.of(proxyClassAndField.proxyFieldWriter().name());
-      // proxy gets the fields
-      classWithFields = proxyClassAndField.proxyWriter();
-      // public fields in the proxy
-      fieldModifiers = EnumSet.of(PUBLIC);
-    }
-
+    Optional<String> bindingPackage = bindingPackageFor(resolvedBindings.bindings());
+    boolean useRawType = bindingPackage.isPresent()
+        && !bindingPackage.get().equals(name.packageName());
     if (bindingKey.kind().equals(BindingKey.Kind.CONTRIBUTION)) {
       ImmutableSet<ContributionBinding> contributionBindings =
           resolvedBindings.contributionBindings();
@@ -534,13 +492,10 @@ private void addField(ResolvedBindings resolvedBindings) {
                   FrameworkField.createForSyntheticContributionBinding(
                       contributionNumber, contributionBinding);
               FieldWriter contributionField =
-                  classWithFields.addField(
-                      contributionBindingField.frameworkType(), contributionBindingField.name());
-              contributionField.addModifiers(fieldModifiers);
+                  addFrameworkField(useRawType, contributionBindingField);
 
               ImmutableList<String> contributionSelectTokens =
                   new ImmutableList.Builder<String>()
-                      .addAll(proxySelector.asSet())
                       .add(contributionField.name())
                       .build();
               multibindingContributionSnippets.put(
@@ -553,13 +508,10 @@ private void addField(ResolvedBindings resolvedBindings) {
     }
 
     FrameworkField bindingField = FrameworkField.createForResolvedBindings(resolvedBindings);
-    FieldWriter frameworkField =
-        classWithFields.addField(bindingField.frameworkType(), bindingField.name());
-    frameworkField.addModifiers(fieldModifiers);
+    FieldWriter frameworkField = addFrameworkField(useRawType, bindingField);
 
     ImmutableList<String> memberSelectTokens =
         new ImmutableList.Builder<String>()
-            .addAll(proxySelector.asSet())
             .add(frameworkField.name())
             .build();
     memberSelectSnippets.put(
@@ -567,6 +519,21 @@ private void addField(ResolvedBindings resolvedBindings) {
         MemberSelect.instanceSelect(name, Snippet.memberSelectSnippet(memberSelectTokens)));
   }
 
+  private FieldWriter addFrameworkField(boolean useRawType,
+      FrameworkField contributionBindingField) {
+    FieldWriter contributionField =
+        componentWriter.addField(
+            useRawType
+                ? contributionBindingField.frameworkType().type()
+                : contributionBindingField.frameworkType(),
+            contributionBindingField.name());
+    contributionField.addModifiers(PRIVATE);
+    if (useRawType) {
+      contributionField.annotate(SuppressWarnings.class).setValue("rawtypes");
+    }
+    return contributionField;
+  }
+
   /**
    * If {@code resolvedBindings} is an unscoped provision binding with no factory arguments or a
    * no-op members injection binding, then we don't need a field to hold its factory. In that case,
@@ -720,6 +687,11 @@ private void initializeFrameworkTypes() {
     for (int i = 0; i < partitions.size(); i++) {
       MethodWriter initializeMethod =
           componentWriter.addMethod(VoidName.VOID, "initialize" + ((i == 0) ? "" : i));
+      /* TODO(gak): Strictly speaking, we only need the suppression here if we are also initializing
+       * a raw field in this method, but the structure of this code makes it awkward to pass that
+       * bit through.  This will be cleaned up when we no longer separate fields and initilization
+       * as we do now. */
+      initializeMethod.annotate(SuppressWarnings.class).setValue("unchecked");
       for (Snippet snippet : partitions.get(i)) {
         initializeMethod.body().addSnippet(snippet);
       }
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
index 20bafff65..cf0e69d33 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
@@ -81,6 +81,7 @@ public void testEmptyBuilder() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "  }",
         "",
@@ -155,6 +156,7 @@ public void testUsesBuildAndSetterNames() {
         "    return builder().create();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.stringProvider = TestModule_StringFactory.create(builder.testModule);",
         "  }",
@@ -257,6 +259,7 @@ public void testIgnoresModulesNotInApi() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.stringProvider = TestModule1_StringFactory.create(builder.testModule1);",
         "    this.integerProvider = TestModule2_IntegerFactory.create(builder.testModule2);",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index 94e48e2c8..39365e44a 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -232,6 +232,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "  }",
         "",
@@ -318,6 +319,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.someInjectableTypeProvider =",
         "        ScopedProvider.create(SomeInjectableType_Factory.create());",
@@ -400,6 +402,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.bMembersInjector =",
         "        OuterType$B_MembersInjector.create(OuterType$A_Factory.create());",
@@ -499,6 +502,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.bProvider = TestModule_BFactory.create(builder.testModule,",
         "        C_Factory.create());",
@@ -875,6 +879,7 @@ public void generatedModuleInSubcomponent() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.setOfStringContribution1Provider =",
         "        EmptySetModule_EmptySetFactory.create(builder.emptySetModule);",
@@ -985,6 +990,7 @@ public void generatedModuleInSubcomponent() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.someInjectedTypeMembersInjector =",
         "        SomeInjectedType_MembersInjector.create(SomeInjectableType_Factory.create());",
@@ -1064,6 +1070,7 @@ public void generatedModuleInSubcomponent() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.simpleComponentProvider = InstanceFactory.<SimpleComponent>create(this);",
         "    this.someInjectableTypeProvider =",
@@ -1143,6 +1150,7 @@ public void generatedModuleInSubcomponent() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.someInjectedTypeMembersInjector =",
         "        SomeInjectedType_MembersInjector.create(SomeInjectableType_Factory.create());",
@@ -1220,6 +1228,7 @@ public void generatedModuleInSubcomponent() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.someInjectableTypeProvider =",
         "        SomeInjectableType_Factory.create((MembersInjector) MembersInjectors.noOp());",
@@ -1309,6 +1318,7 @@ public void generatedModuleInSubcomponent() {
         "    return new Builder();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.aProvider = new Factory<A>() {",
         "      private final AComponent aComponent = builder.aComponent;",
@@ -1429,6 +1439,7 @@ public void generatedModuleInSubcomponent() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.aProvider = test.TestModule_AFactory.create(builder.testModule);",
         "    this.aProvider1 = TestModule_AFactory.create(builder.testModule1);",
@@ -1558,6 +1569,7 @@ public void generatedModuleInSubcomponent() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.bProvider = B_Factory.create(C_Factory.create());",
         "    this.aProvider = A_Factory.create(bProvider);",
@@ -1660,6 +1672,7 @@ public void generatedModuleInSubcomponent() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {}",
         "",
         "  @Override",
@@ -1748,6 +1761,7 @@ public void generatedModuleInSubcomponent() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {}",
         "",
         "  @Override",
@@ -1957,6 +1971,7 @@ public void genericTestToLetMeDebugInEclipse() {
          "    return builder().build();",
          "  }",
          "",
+         "  @SuppressWarnings(\"unchecked\")",
          "  private void initialize(final Builder builder) {",
          "    this.dProvider = new D_Factory(B_Factory.INSTANCE);",
          "  }",
diff --git a/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java b/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java
similarity index 84%
rename from compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
rename to compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java
index 8df80d19b..045c6d229 100644
--- a/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package dagger.internal.codegen;
 
 import com.google.common.collect.ImmutableList;
@@ -7,12 +22,12 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import static com.google.common.truth.Truth.assert_;
+import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 
 @RunWith(JUnit4.class)
-public class PackageProxyTest {
-  @Test public void basicPackageProxy() {
+public class InaccessibleTypeTest {
+  @Test public void basicInjectedType() {
     JavaFileObject noDepClassFile = JavaFileObjects.forSourceLines("foreign.NoDepClass",
         "package foreign;",
         "",
@@ -62,7 +77,6 @@
         "test.DaggerTestComponent",
         "package test;",
         "",
-        "import foreign.DaggerTestComponent_PackageProxy;",
         "import foreign.NoDepClass_Factory;",
         "import foreign.NonPublicClass1_Factory;",
         "import foreign.NonPublicClass2_Factory;",
@@ -73,8 +87,10 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
-        "  private final DaggerTestComponent_PackageProxy foreign_Proxy =",
-        "      new DaggerTestComponent_PackageProxy();",
+        "  @SuppressWarnings(\"rawtypes\")",
+        "  private Provider nonPublicClass1Provider;",
+        "  @SuppressWarnings(\"rawtypes\")",
+        "  private Provider nonPublicClass2Provider;",
         "  private Provider<PublicClass> publicClassProvider;",
         "",
         "  private DaggerTestComponent(Builder builder) {",
@@ -90,14 +106,15 @@
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
-        "    this.foreign_Proxy.nonPublicClass1Provider =",
+        "    this.nonPublicClass1Provider =",
         "        NonPublicClass1_Factory.create(NoDepClass_Factory.create());",
-        "    this.foreign_Proxy.nonPublicClass2Provider =",
+        "    this.nonPublicClass2Provider =",
         "        NonPublicClass2_Factory.create(NoDepClass_Factory.create());",
         "    this.publicClassProvider = PublicClass_Factory.create(",
-        "        foreign_Proxy.nonPublicClass1Provider,",
-        "        foreign_Proxy.nonPublicClass2Provider,",
+        "        nonPublicClass1Provider,",
+        "        nonPublicClass2Provider,",
         "        NoDepClass_Factory.create());",
         "  }",
         "",
@@ -115,19 +132,20 @@
         "    }",
         "  }",
         "}");
-    assert_().about(javaSources())
+    assertAbout(javaSources())
         .that(ImmutableList.of(
             noDepClassFile,
             publicClassFile,
             nonPublicClass1File,
             nonPublicClass2File,
             componentFile))
+        .withCompilerOptions("-Xlint", "-Werror:rawtypes,unchecked")
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(generatedComponent);
   }
 
-  @Test public void memberInjectionPackageProxy() {
+  @Test public void memberInjectedType() {
     JavaFileObject noDepClassFile = JavaFileObjects.forSourceLines("test.NoDepClass",
         "package test;",
         "",
@@ -209,6 +227,7 @@
             "    return builder().build();",
             "  }",
             "",
+            "  @SuppressWarnings(\"unchecked\")",
             "  private void initialize(final Builder builder) {",
             "     this.aMembersInjector = A_MembersInjector.create(NoDepClass_Factory.create());",
             "  }",
@@ -227,7 +246,7 @@
             "    }",
             "  }",
             "}");
-    assert_().about(javaSources())
+    assertAbout(javaSources())
         .that(ImmutableList.of(
             noDepClassFile,
             aClassFile,
@@ -235,6 +254,7 @@
             cClassFile,
             dClassFile,
             componentFile))
+        .withCompilerOptions("-Xlint", "-Werror:rawtypes,unchecked")
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(generatedComponent);
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 5f488c814..9e1b6dccd 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -137,6 +137,7 @@ public void mapBindingsWithEnumKey() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.mapOfPathEnumAndProviderOfHandlerContribution1 =",
         "        MapModuleOne_ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
@@ -296,6 +297,7 @@ public void mapBindingsWithStringKey() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.mapOfStringAndProviderOfHandlerContribution1 =",
         "        MapModuleOne_ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
@@ -462,6 +464,7 @@ public void mapBindingsWithWrappedKey() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.mapOfWrappedClassKeyAndProviderOfHandlerContribution1 =",
         "        MapModuleOne_ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
@@ -634,6 +637,7 @@ public void mapBindingsWithNonProviderValue() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.mapOfPathEnumAndProviderOfHandlerContribution1 =",
         "        MapModuleOne_ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
@@ -755,6 +759,7 @@ public void injectMapWithoutMapBinding() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.provideAMapProvider = MapModule_ProvideAMapFactory.create(builder.mapModule);",
         "  }",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
index bc8a2660e..191ee6c12 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -226,6 +226,7 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.mapOfPathKeyAndProviderOfHandlerContribution1 =",
         "        MapModuleOne_ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
@@ -401,6 +402,7 @@ public void mapKeyComponentFileWithDefaultField() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.mapOfPathKeyAndProviderOfHandlerContribution1 =",
         "        MapModuleOne_ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
index 7925bd222..7c2c50bde 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
@@ -87,6 +87,7 @@ public void parentClass_noInjectedMembers() {
         "    return builder().build();",
         "  }",
         "",
+        "  @SuppressWarnings(\"unchecked\")",
         "  private void initialize(final Builder builder) {",
         "    this.childProvider =",
         "        Child_Factory.create((MembersInjector) MembersInjectors.noOp());",
@@ -176,6 +177,7 @@ public void parentClass_injectedMembersInSupertype() {
             "    return builder().build();",
             "  }",
             "",
+            "  @SuppressWarnings(\"unchecked\")",
             "  private void initialize(final Builder builder) {",
             "    this.childMembersInjector = Child_MembersInjector.create(Dep_Factory.create());",
             "    this.childProvider = Child_Factory.create(childMembersInjector);",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
index c8d92061a..a8e39b28a 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -163,6 +163,7 @@
             "    return new Builder();",
             "  }",
             "",
+            "  @SuppressWarnings(\"unchecked\")",
             "  private void initialize(final Builder builder) {",
             "    this.simpleComponentProvider = InstanceFactory.<SimpleComponent>create(this);",
             "    this.setOfFactoryContribution1Provider =",
diff --git a/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java b/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java
index 01040f6a2..e8500d7de 100644
--- a/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -18,7 +18,6 @@
 import com.google.common.collect.ImmutableList;
 import com.google.testing.compile.JavaFileObjects;
 import javax.tools.JavaFileObject;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -358,6 +357,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
             "    return builder().build();",
             "  }",
             "",
+            "  @SuppressWarnings(\"unchecked\")",
             "  private void initialize(final Builder builder) {  ",
             "    this.dep1MembersInjector = Dep1_MembersInjector.create();",
             "    this.dep1Provider = Dep1_Factory.create(dep1MembersInjector);",
@@ -402,7 +402,8 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
             "      this.childModule = new ChildModule();",
             "      initialize();",
             "    }",
-            "  ",
+            "",
+            "    @SuppressWarnings(\"unchecked\")",
             "    private void initialize() {  ",
             "      this.aMembersInjector = A_MembersInjector.create();",
             "      this.needsDep1Provider = NeedsDep1_Factory.create(",
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
index 40545039c..58fa26307 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
@@ -92,6 +92,7 @@
       "    return builder().build();",
       "  }",
       "",
+      "  @SuppressWarnings(\"unchecked\")",
       "  private void initialize(final Builder builder) {",
       "    this.primitiveIntProvider =",
       "        PrimitiveModule_PrimitiveIntFactory.create(builder.primitiveModule);",
