diff --git a/core/src/main/java/dagger/ObjectGraph.java b/core/src/main/java/dagger/ObjectGraph.java
index 6ff83df7b..03b3d8c9a 100644
--- a/core/src/main/java/dagger/ObjectGraph.java
+++ b/core/src/main/java/dagger/ObjectGraph.java
@@ -28,7 +28,6 @@
 import dagger.internal.StaticInjection;
 import dagger.internal.ThrowingErrorHandler;
 import dagger.internal.UniqueMap;
-import java.util.Arrays;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -181,8 +180,8 @@ private static ObjectGraph makeGraph(DaggerObjectGraph base, Loader plugin, Obje
           return super.put(key, value);
         }
       };
-      Map<ModuleAdapter<?>, Object> loadedModules =
-          Modules.loadModules(plugin, Arrays.asList(modules));
+
+      Map<ModuleAdapter<?>, Object> loadedModules = Modules.loadModules(plugin, modules);
       for (Entry<ModuleAdapter<?>, Object> loadedModule : loadedModules.entrySet()) {
         @SuppressWarnings("unchecked")
         ModuleAdapter<Object> moduleAdapter = (ModuleAdapter<Object>) loadedModule.getKey();
diff --git a/core/src/main/java/dagger/internal/ModuleAdapter.java b/core/src/main/java/dagger/internal/ModuleAdapter.java
index 43f814b4c..dfe09b236 100644
--- a/core/src/main/java/dagger/internal/ModuleAdapter.java
+++ b/core/src/main/java/dagger/internal/ModuleAdapter.java
@@ -61,7 +61,7 @@ protected T newModule() {
   }
 
   @Override
-  final public boolean equals(Object obj) {
+  public final boolean equals(Object obj) {
     if (obj == this) {
       return true;
     } else if (obj instanceof ModuleAdapter<?>) {
diff --git a/core/src/main/java/dagger/internal/Modules.java b/core/src/main/java/dagger/internal/Modules.java
index 5458a5a2f..8b269f57f 100644
--- a/core/src/main/java/dagger/internal/Modules.java
+++ b/core/src/main/java/dagger/internal/Modules.java
@@ -18,7 +18,6 @@
 
 
 import java.util.LinkedHashMap;
-import java.util.List;
 import java.util.Map;
 
 /**
@@ -33,16 +32,16 @@ private Modules() { }
    * modules.
    */
   public static Map<ModuleAdapter<?>, Object> loadModules(Loader loader,
-      List<Object> seedModulesOrClasses) {
+      Object[] seedModulesOrClasses) {
     Map<ModuleAdapter<?>, Object> seedAdapters =
-        new LinkedHashMap<ModuleAdapter<?>, Object>(seedModulesOrClasses.size());
-    for (Object moduleOrClass : seedModulesOrClasses) {
-      if (moduleOrClass instanceof Class<?>) {
-        ModuleAdapter<?> moduleAdapter = loader.getModuleAdapter((Class<?>) moduleOrClass);
-        seedAdapters.put(moduleAdapter, moduleAdapter.newModule());
+        new LinkedHashMap<ModuleAdapter<?>, Object>(seedModulesOrClasses.length);
+    for (int i = 0; i < seedModulesOrClasses.length; i++) {
+      if (seedModulesOrClasses[i] instanceof Class<?>) {
+        ModuleAdapter<?> adapter = loader.getModuleAdapter((Class<?>) seedModulesOrClasses[i]);
+        seedAdapters.put(adapter, adapter.newModule());
       } else {
-        ModuleAdapter<?> moduleAdapter = loader.getModuleAdapter(moduleOrClass.getClass());
-        seedAdapters.put(moduleAdapter, moduleOrClass);
+        ModuleAdapter<?> adapter = loader.getModuleAdapter(seedModulesOrClasses[i].getClass());
+        seedAdapters.put(adapter, seedModulesOrClasses[i]);
       }
     }
 
