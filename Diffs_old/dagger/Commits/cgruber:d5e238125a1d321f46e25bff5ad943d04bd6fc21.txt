diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 73a499e88..81de37ca9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -15,8 +15,8 @@
  */
 package dagger.internal.codegen;
 
-import com.google.auto.common.MoreTypes;
 import com.google.auto.common.MoreElements;
+import com.google.auto.common.MoreTypes;
 import com.google.common.base.CaseFormat;
 import com.google.common.base.Function;
 import com.google.common.base.Functions;
@@ -26,7 +26,6 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.ImmutableSetMultimap;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
@@ -55,7 +54,6 @@
 import dagger.internal.codegen.writer.TypeNames;
 import dagger.internal.codegen.writer.TypeWriter;
 import dagger.internal.codegen.writer.VoidName;
-import java.util.Collection;
 import java.util.EnumSet;
 import java.util.Iterator;
 import java.util.List;
@@ -83,6 +81,7 @@
 import static com.google.common.base.CaseFormat.LOWER_CAMEL;
 import static dagger.internal.codegen.ConfigurationAnnotations.getMapKeys;
 import static dagger.internal.codegen.DependencyRequest.Kind.MEMBERS_INJECTOR;
+import static dagger.internal.codegen.ProvisionBinding.FactoryCreationStrategy.ENUM_INSTANCE;
 import static dagger.internal.codegen.ProvisionBinding.Kind.COMPONENT;
 import static dagger.internal.codegen.ProvisionBinding.Kind.COMPONENT_PROVISION;
 import static dagger.internal.codegen.ProvisionBinding.Kind.INJECTION;
@@ -164,8 +163,6 @@ ClassName nameGeneratedType(BindingGraph input) {
                   }
                 })));
 
-    ImmutableSet.Builder<JavaWriter> packageProxies = ImmutableSet.builder();
-
     ConstructorWriter constructorWriter = componentWriter.addConstructor();
     constructorWriter.addModifiers(PRIVATE);
     constructorWriter.addParameter(builderWriter, "builder");
@@ -218,18 +215,50 @@ ClassName nameGeneratedType(BindingGraph input) {
     ImmutableMap.Builder<Key, Snippet> memberSelectSnippetsBuilder =
         ImmutableMap.builder();
 
-    ImmutableSetMultimap.Builder<String, Key> initializationByPackageBuilder =
-        indexInitializations(input, componentDefinitionTypeName);
+    ImmutableSet.Builder<JavaWriter> proxyWriters = ImmutableSet.builder();
+    Map<String, ClassWriter> packageProxies = Maps.newHashMap();
+
+    for (Entry<Key, ResolvedBindings> resolvedBindingsEntry : input.resolvedBindings().entrySet()) {
+      Key key = resolvedBindingsEntry.getKey();
+
+      ImmutableSet<? extends Binding> bindings = resolvedBindingsEntry.getValue().bindings();
+      if (bindings.size() == 1) {
+        Binding onlyBinding = bindings.iterator().next();
+        if (onlyBinding instanceof ProvisionBinding) {
+          ProvisionBinding provisionBinding = ((ProvisionBinding) onlyBinding);
+          if (provisionBinding.factoryCreationStrategy().equals(ENUM_INSTANCE)
+              && !provisionBinding.scope().isPresent()) {
+            // skip keys whose factories are enum instances and aren't scoped
+            memberSelectSnippetsBuilder.put(key, Snippet.format("%s.INSTANCE",
+                factoryNameForProvisionBinding(provisionBinding)));
+            continue;
+          }
+        }
+      }
+
+      ImmutableSet.Builder<String> bindingPackagesBuilder = ImmutableSet.builder();
+      for (Binding binding : bindings) {
+        bindingPackagesBuilder.addAll(binding.bindingPackage().asSet());
+      }
+      ImmutableSet<String> bindingPackages = bindingPackagesBuilder.build();
 
-    for (Entry<String, Collection<Key>> packageEntry :
-        initializationByPackageBuilder.build().asMap().entrySet()) {
-      String packageName = packageEntry.getKey();
+      final String bindingPackage;
+      switch (bindingPackages.size()) {
+        case 0:
+          bindingPackage = componentName.packageName();
+          break;
+        case 1:
+          bindingPackage = bindingPackages.iterator().next();
+          break;
+        default:
+          throw new IllegalStateException();
+      }
 
       final Optional<String> proxySelector;
       final TypeWriter classWithFields;
       final Set<Modifier> fieldModifiers;
 
-      if (packageName.equals(componentName.packageName())) {
+      if (bindingPackage.equals(componentName.packageName())) {
         // no proxy
         proxySelector = Optional.absent();
         // component gets the fields
@@ -237,15 +266,18 @@ ClassName nameGeneratedType(BindingGraph input) {
         // private fields
         fieldModifiers = EnumSet.of(PRIVATE);
       } else {
-        // create the proxy
-        JavaWriter proxyWriter = JavaWriter.inPackage(packageName);
-        packageProxies.add(proxyWriter);
-        TypeWriter proxyClassWriter =
-            proxyWriter.addClass(componentName.simpleName() + "__PackageProxy");
+        // get or create the proxy
+        ClassWriter proxyClassWriter = packageProxies.get(bindingPackage);
+        if (proxyClassWriter == null) {
+          JavaWriter proxyWriter = JavaWriter.inPackage(bindingPackage);
+          proxyWriters.add(proxyWriter);
+          proxyClassWriter = proxyWriter.addClass(componentName.simpleName() + "__PackageProxy");
+          packageProxies.put(bindingPackage, proxyClassWriter);
+        }
         proxyClassWriter.addModifiers(PUBLIC, FINAL);
         // create the field for the proxy in the component
         FieldWriter proxyField =
-            componentWriter.addField(proxyClassWriter.name(), packageName.replace('.', '_')
+            componentWriter.addField(proxyClassWriter.name(), bindingPackage.replace('.', '_')
                 + "_Proxy");
         proxyField.addModifiers(PRIVATE, FINAL);
         proxyField.setInitializer("new %s()", proxyClassWriter.name());
@@ -257,23 +289,21 @@ ClassName nameGeneratedType(BindingGraph input) {
         fieldModifiers = EnumSet.of(PUBLIC);
       }
 
-      for (Key key : packageEntry.getValue()) {
-        TypeName frameworkTypeName = ParameterizedTypeName.create(
-            ClassName.fromClass(key.kind().frameworkClass()),
-            TypeNames.forTypeMirror(key.type()));
+      TypeName frameworkTypeName = ParameterizedTypeName.create(
+          ClassName.fromClass(key.kind().frameworkClass()),
+          TypeNames.forTypeMirror(key.type()));
 
-        String fieldName = framekworkTypeNames.get(key);
+      String fieldName = framekworkTypeNames.get(key);
 
-        FieldWriter frameworkField = classWithFields.addField(frameworkTypeName, fieldName);
-        frameworkField.addModifiers(fieldModifiers);
+      FieldWriter frameworkField = classWithFields.addField(frameworkTypeName, fieldName);
+      frameworkField.addModifiers(fieldModifiers);
 
-        ImmutableList<String> memberSelectTokens = new ImmutableList.Builder<String>()
-            .addAll(proxySelector.asSet())
-            .add(frameworkField.name())
-            .build();
-        memberSelectSnippetsBuilder.put(key,
-            Snippet.memberSelectSnippet(memberSelectTokens));
-      }
+      ImmutableList<String> memberSelectTokens = new ImmutableList.Builder<String>()
+          .addAll(proxySelector.asSet())
+          .add(frameworkField.name())
+          .build();
+      memberSelectSnippetsBuilder.put(key,
+          Snippet.memberSelectSnippet(memberSelectTokens));
     }
 
     buildMethod.body().addSnippet("return new %s(this);", componentWriter.name());
@@ -291,6 +321,7 @@ ClassName nameGeneratedType(BindingGraph input) {
     for (int i = 0; i < partitions.size(); i++) {
       MethodWriter initializeMethod =
           componentWriter.addMethod(VoidName.VOID, "initialize" + ((i == 0) ? "" : i));
+      initializeMethod.body();
       initializeMethod.addModifiers(PRIVATE);
       constructorWriter.body().addSnippet("%s();", initializeMethod.name());
 
@@ -329,11 +360,14 @@ ClassName nameGeneratedType(BindingGraph input) {
                 break;
               case UNIQUE:
                 ProvisionBinding binding = Iterables.getOnlyElement(bindings);
-                initializeMethod.body().addSnippet("this.%s = %s;",
-                    memberSelectSnippet,
-                    initializeFactoryForBinding(binding,
-                        input.componentDescriptor().dependencyMethodIndex(),
-                        componentContributionFields, memberSelectSnippets));
+                if (!binding.factoryCreationStrategy().equals(ENUM_INSTANCE)
+                    || binding.scope().isPresent()) {
+                  initializeMethod.body().addSnippet("this.%s = %s;",
+                      memberSelectSnippet,
+                      initializeFactoryForBinding(binding,
+                          input.componentDescriptor().dependencyMethodIndex(),
+                          componentContributionFields, memberSelectSnippets));
+                }
                 break;
               default:
                 throw new IllegalStateException();
@@ -387,37 +421,11 @@ ClassName nameGeneratedType(BindingGraph input) {
     }
 
     return new ImmutableSet.Builder<JavaWriter>()
-        .addAll(packageProxies.build())
+        .addAll(proxyWriters.build())
         .add(writer)
         .build();
   }
 
-  private ImmutableSetMultimap.Builder<String, Key> indexInitializations(BindingGraph input,
-      ClassName componentName) {
-    ImmutableSetMultimap.Builder<String, Key> initializationByPackageBuilder =
-        ImmutableSetMultimap.builder();
-    for (Entry<Key, ResolvedBindings> resolvedBindingEntry : input.resolvedBindings().entrySet()) {
-      ImmutableSet.Builder<String> bindingPackagesBuilder = ImmutableSet.builder();
-      for (Binding binding : resolvedBindingEntry.getValue().bindings()) {
-        bindingPackagesBuilder.addAll(binding.bindingPackage().asSet());
-      }
-      ImmutableSet<String> bindingPackages = bindingPackagesBuilder.build();
-      final String bindingPackage;
-      switch (bindingPackages.size()) {
-        case 0:
-          bindingPackage = componentName.packageName();
-          break;
-        case 1:
-          bindingPackage = bindingPackages.iterator().next();
-          break;
-        default:
-          throw new IllegalStateException();
-      }
-      initializationByPackageBuilder.put(bindingPackage, resolvedBindingEntry.getKey());
-    }
-    return initializationByPackageBuilder;
-  }
-
   private ImmutableMap<Key, String> generateFrameworkTypeNames(BindingGraph graph) {
     ImmutableMap.Builder<Key, String> names = ImmutableMap.builder();
     for (Entry<Key, ResolvedBindings> entry : graph.resolvedBindings().entrySet()) {
@@ -510,14 +518,15 @@ private Snippet initializeFactoryForBinding(ProvisionBinding binding,
         parameters.add(memberSelectSnippets.get(binding.memberInjectionRequest().get().key()));
       }
       parameters.addAll(getDependencyParameters(binding.dependencies(), memberSelectSnippets));
+
       return binding.scope().isPresent()
           ? Snippet.format("%s.create(new %s(%s))",
               ClassName.fromClass(ScopedProvider.class),
               factoryNameForProvisionBinding(binding),
-              Joiner.on(", ").join(parameters))
+              Snippet.makeParametersSnippet(parameters))
           : Snippet.format("new %s(%s)",
               factoryNameForProvisionBinding(binding),
-              Joiner.on(", ").join(parameters));
+              Snippet.makeParametersSnippet(parameters));
     }
   }
 
@@ -541,7 +550,7 @@ private static Snippet initializeMembersInjectorForBinding(
           memberSelectSnippets);
       return Snippet.format("new %s(%s)",
           membersInjectorNameForMembersInjectionBinding(binding),
-          Joiner.on(", ").join(parameters));
+          Snippet.makeParametersSnippet(parameters));
     }
   }
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
index 9954c8c0f..a51b66c80 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
@@ -50,7 +50,6 @@
 import javax.lang.model.type.TypeMirror;
 
 import static dagger.Provides.Type.SET;
-import static dagger.internal.codegen.ProvisionBinding.Kind.INJECTION;
 import static dagger.internal.codegen.ProvisionBinding.Kind.PROVISION;
 import static dagger.internal.codegen.SourceFiles.factoryNameForProvisionBinding;
 import static dagger.internal.codegen.SourceFiles.frameworkTypeUsageStatement;
@@ -90,7 +89,6 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
   @Override
   ImmutableSet<JavaWriter> write(ClassName generatedTypeName, ProvisionBinding binding) {
     TypeMirror keyType = binding.provisionType().equals(Type.MAP)
-
         ? Util.getProvidedValueTypeOfMap(MoreTypes.asDeclared(binding.key().type()))
         : binding.key().type();
     TypeName providedTypeName = TypeNames.forTypeMirror(keyType);
@@ -101,29 +99,35 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
     // TODO(gak): stop doing this weird thing with the optional when javawriter lets me put fields
     // in arbitrary places
     Optional<FieldWriter> loggerField = Optional.absent();
-    if (binding.bindingKind().equals(INJECTION) && binding.implicitDependencies().isEmpty()) {
-      EnumWriter enumWriter = writer.addEnum(generatedTypeName.simpleName());
-      enumWriter.addConstant("INSTANCE");
-      constructorWriter = Optional.absent();
-      factoryWriter = enumWriter;
-    } else {
-      ClassWriter classWriter = writer.addClass(generatedTypeName.simpleName());
-      classWriter.addModifiers(FINAL);
-      constructorWriter = Optional.of(classWriter.addConstructor());
-      constructorWriter.get().addModifiers(PUBLIC);
-      factoryWriter = classWriter;
-      if (binding.bindingKind().equals(PROVISION)) {
-        loggerField = Optional.of(factoryWriter.addField(Logger.class, "logger"));
-        loggerField.get().addModifiers(PRIVATE, STATIC, FINAL);
-        loggerField.get().setInitializer("%s.getLogger(%s.class.getCanonicalName())",
-            ClassName.fromClass(Logger.class), factoryWriter.name());
-
-        factoryWriter.addField(binding.bindingTypeElement(), "module").addModifiers(PRIVATE, FINAL);
-        constructorWriter.get().addParameter(binding.bindingTypeElement(), "module");
-        constructorWriter.get().body()
-            .addSnippet("assert module != null;")
-            .addSnippet("this.module = module;");
-      }
+    switch (binding.factoryCreationStrategy()) {
+      case ENUM_INSTANCE:
+        EnumWriter enumWriter = writer.addEnum(generatedTypeName.simpleName());
+        enumWriter.addConstant("INSTANCE");
+        constructorWriter = Optional.absent();
+        factoryWriter = enumWriter;
+        break;
+      case CLASS_CONSTRUCTOR:
+        ClassWriter classWriter = writer.addClass(generatedTypeName.simpleName());
+        classWriter.addModifiers(FINAL);
+        constructorWriter = Optional.of(classWriter.addConstructor());
+        constructorWriter.get().addModifiers(PUBLIC);
+        factoryWriter = classWriter;
+        if (binding.bindingKind().equals(PROVISION)) {
+          loggerField = Optional.of(factoryWriter.addField(Logger.class, "logger"));
+          loggerField.get().addModifiers(PRIVATE, STATIC, FINAL);
+          loggerField.get().setInitializer("%s.getLogger(%s.class.getCanonicalName())",
+              ClassName.fromClass(Logger.class), factoryWriter.name());
+
+          factoryWriter.addField(binding.bindingTypeElement(), "module")
+              .addModifiers(PRIVATE, FINAL);
+          constructorWriter.get().addParameter(binding.bindingTypeElement(), "module");
+          constructorWriter.get().body()
+              .addSnippet("assert module != null;")
+              .addSnippet("this.module = module;");
+        }
+        break;
+      default:
+        throw new AssertionError();
     }
 
     factoryWriter.annotate(Generated.class).setValue(ComponentProcessor.class.getName());
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java b/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
index 6eaa59687..d7c112a3c 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
@@ -47,6 +47,7 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static dagger.internal.codegen.InjectionAnnotations.getScopeAnnotation;
+import static dagger.internal.codegen.ProvisionBinding.Kind.INJECTION;
 import static javax.lang.model.element.ElementKind.CONSTRUCTOR;
 import static javax.lang.model.element.ElementKind.FIELD;
 import static javax.lang.model.element.ElementKind.METHOD;
@@ -155,6 +156,17 @@ static BindingType bindingTypeFor(Iterable<ProvisionBinding> bindings) {
     }
   }
 
+  enum FactoryCreationStrategy {
+    ENUM_INSTANCE,
+    CLASS_CONSTRUCTOR,
+  }
+
+  FactoryCreationStrategy factoryCreationStrategy() {
+    return (bindingKind().equals(INJECTION) && implicitDependencies().isEmpty())
+        ? FactoryCreationStrategy.ENUM_INSTANCE
+        : FactoryCreationStrategy.CLASS_CONSTRUCTOR;
+  }
+
   static final class Factory {
     private final Elements elements;
     private final Types types;
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index d6cee23d3..ce5631cbd 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -120,8 +120,6 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
-        "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize();",
@@ -136,22 +134,21 @@
         "  }",
         "",
         "  private void initialize() {",
-        "    this.someInjectableTypeProvider = SomeInjectableType$$Factory.INSTANCE;",
         "  }",
         "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
-        "    return someInjectableTypeProvider.get();",
+        "    return SomeInjectableType$$Factory.INSTANCE.get();",
         "  }",
         "",
         "  @Override",
         "  public Lazy<SomeInjectableType> lazySomeInjectableType() {",
-        "    return DoubleCheckLazy.create(someInjectableTypeProvider);",
+        "    return DoubleCheckLazy.create(SomeInjectableType$$Factory.INSTANCE);",
         "  }",
         "",
         "  @Override",
         "  public Provider<SomeInjectableType> someInjectableTypeProvider() {",
-        "    return someInjectableTypeProvider;",
+        "    return SomeInjectableType$$Factory.INSTANCE;",
         "  }",
         "",
         "  public static final class Builder {",
@@ -325,14 +322,12 @@
         "",
         "import dagger.MembersInjector;",
         "import javax.annotation.Generated;",
-        "import javax.inject.Provider;",
         "import test.OuterType.A;",
         "import test.OuterType.B;",
         "import test.OuterType.SimpleComponent;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_OuterType$SimpleComponent implements SimpleComponent {",
-        "  private Provider<A> aProvider;",
         "  private MembersInjector<B> bMembersInjector;",
         "",
         "  private Dagger_OuterType$SimpleComponent(Builder builder) {",
@@ -349,13 +344,13 @@
         "  }",
         "",
         "  private void initialize() {",
-        "    this.aProvider = OuterType$A$$Factory.INSTANCE;",
-        "    this.bMembersInjector = new OuterType$B$$MembersInjector(aProvider);",
+        "    this.bMembersInjector =",
+        "        new OuterType$B$$MembersInjector(OuterType$A$$Factory.INSTANCE);",
         "  }",
         "",
         "  @Override",
         "  public A a() {",
-        "    return aProvider.get();",
+        "    return OuterType$A$$Factory.INSTANCE.get();",
         "  }",
         "",
         "  @Override",
@@ -432,7 +427,6 @@
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
         "  private final TestModule testModule;",
-        "  private Provider<C> cProvider;",
         "  private Provider<B> bProvider;",
         "  private Provider<A> aProvider;",
         "",
@@ -451,8 +445,7 @@
         "  }",
         "",
         "  private void initialize() {",
-        "    this.cProvider = C$$Factory.INSTANCE;",
-        "    this.bProvider = new TestModule$$BFactory(testModule, cProvider);",
+        "    this.bProvider = new TestModule$$BFactory(testModule, C$$Factory.INSTANCE);",
         "    this.aProvider = new A$$Factory(bProvider);",
         "  }",
         "",
@@ -742,11 +735,9 @@
         "",
         "import dagger.MembersInjector;",
         "import javax.annotation.Generated;",
-        "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
         "  private MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
@@ -763,9 +754,8 @@
         "  }",
         "",
         "  private void initialize() {",
-        "    this.someInjectableTypeProvider = SomeInjectableType$$Factory.INSTANCE;",
         "    this.someInjectedTypeMembersInjector =",
-        "        new SomeInjectedType$$MembersInjector(someInjectableTypeProvider);",
+        "        new SomeInjectedType$$MembersInjector(SomeInjectableType$$Factory.INSTANCE);",
         "  }",
         "",
         "  @Override",
@@ -905,7 +895,6 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
         "  private MembersInjector<SomeInjectedType> someInjectedTypeMembersInjector;",
         "  private Provider<SomeInjectedType> someInjectedTypeProvider;",
         "",
@@ -923,9 +912,8 @@
         "  }",
         "",
         "  private void initialize() {",
-        "    this.someInjectableTypeProvider = SomeInjectableType$$Factory.INSTANCE;",
         "    this.someInjectedTypeMembersInjector =",
-        "        new SomeInjectedType$$MembersInjector(someInjectableTypeProvider);",
+        "        new SomeInjectedType$$MembersInjector(SomeInjectableType$$Factory.INSTANCE);",
         "    this.someInjectedTypeProvider =",
         "        new SomeInjectedType$$Factory(someInjectedTypeMembersInjector);",
         "  }",
@@ -1246,7 +1234,6 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private Provider<C> cProvider;",
         "  private Provider<B> bProvider;",
         "  private Provider<A> aProvider;",
         "  private Provider<X> xProvider;",
@@ -1265,10 +1252,9 @@
         "  }",
         "",
         "  private void initialize() {",
-        "    this.cProvider = C$$Factory.INSTANCE;",
-        "    this.bProvider = new B$$Factory(cProvider);",
+        "    this.bProvider = new B$$Factory(C$$Factory.INSTANCE);",
         "    this.aProvider = new A$$Factory(bProvider);",
-        "    this.xProvider = new X$$Factory(cProvider);",
+        "    this.xProvider = new X$$Factory(C$$Factory.INSTANCE);",
         "  }",
         "",
         "  @Override",
@@ -1278,7 +1264,7 @@
         "",
         "  @Override",
         "  public C c() {",
-        "    return cProvider.get();",
+        "    return C$$Factory.INSTANCE.get();",
         "  }",
         "",
         "  @Override",
@@ -1351,12 +1337,9 @@
         "package test;",
         "",
         "import javax.annotation.Generated;",
-        "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
-        "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize();",
@@ -1370,13 +1353,11 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
-        "    this.someInjectableTypeProvider = SomeInjectableType$$Factory.INSTANCE;",
-        "  }",
+        "  private void initialize() {}",
         "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
-        "    return someInjectableTypeProvider.get();",
+        "    return SomeInjectableType$$Factory.INSTANCE.get();",
         "  }",
         "",
         "  public static final class Builder {",
@@ -1444,12 +1425,9 @@
         "package test;",
         "",
         "import javax.annotation.Generated;",
-        "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
-        "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
-        "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
         "    initialize();",
@@ -1463,13 +1441,11 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
-        "    this.someInjectableTypeProvider = SomeInjectableType$$Factory.INSTANCE;",
-        "  }",
+        "  private void initialize() {}",
         "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
-        "    return someInjectableTypeProvider.get();",
+        "    return SomeInjectableType$$Factory.INSTANCE.get();",
         "  }",
         "",
         "  public static final class Builder {",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
index d6a2c0ede..2c80a64b3 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
@@ -139,7 +139,6 @@ public void parentClass_injectedMembersInSupertype() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private Provider<Dep> depProvider;",
         "  private MembersInjector<Parent> parentMembersInjector;",
         "  private MembersInjector<Child> childMembersInjector;",
         "  private Provider<Child> childProvider;",
@@ -158,8 +157,7 @@ public void parentClass_injectedMembersInSupertype() {
         "  }",
         "",
         "  private void initialize() {",
-        "    this.depProvider = Dep$$Factory.INSTANCE;",
-        "    this.parentMembersInjector = new Parent$$MembersInjector(depProvider);",
+        "    this.parentMembersInjector = new Parent$$MembersInjector(Dep$$Factory.INSTANCE);",
         "    this.childMembersInjector = MembersInjectors.delegatingTo(parentMembersInjector);",
         "    this.childProvider = new Child$$Factory(childMembersInjector);",
         "  }",
diff --git a/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java b/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
index 4e370a0f4..6f799ece3 100644
--- a/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
@@ -13,13 +13,21 @@
 @RunWith(JUnit4.class)
 public class PackageProxyTest {
   @Test public void testPackageProxy() {
+    JavaFileObject noDepClassFile = JavaFileObjects.forSourceLines("foreign.NoDepClass",
+        "package foreign;",
+        "",
+        "import javax.inject.Inject;",
+        "",
+        "public final class NoDepClass {",
+        "  @Inject NoDepClass() {}",
+        "}");
     JavaFileObject publicClassFile = JavaFileObjects.forSourceLines("foreign.PublicClass",
         "package foreign;",
         "",
         "import javax.inject.Inject;",
         "",
         "public final class PublicClass {",
-        "  @Inject PublicClass(NonPublicClass dep) {}",
+        "  @Inject PublicClass(NonPublicClass dep1, NoDepClass dep2) {}",
         "}");
     JavaFileObject nonPublicClassFile = JavaFileObjects.forSourceLines("foreign.NonPublicClass",
         "package foreign;",
@@ -27,7 +35,7 @@
         "import javax.inject.Inject;",
         "",
         "final class NonPublicClass {",
-        "  @Inject NonPublicClass() {}",
+        "  @Inject NonPublicClass(NoDepClass dep) {}",
         "}");
 
     JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.TestComponent",
@@ -47,6 +55,7 @@
         "package test;",
         "",
         "import foreign.Dagger_TestComponent__PackageProxy;",
+        "import foreign.NoDepClass$$Factory;",
         "import foreign.NonPublicClass$$Factory;",
         "import foreign.PublicClass;",
         "import foreign.PublicClass$$Factory;",
@@ -73,9 +82,10 @@
         "  }",
         "",
         "  private void initialize() {",
-        "    this.foreign_Proxy.nonPublicClassProvider = NonPublicClass$$Factory.INSTANCE;",
-        "    this.publicClassProvider =",
-        "        new PublicClass$$Factory(foreign_Proxy.nonPublicClassProvider);",
+        "    this.foreign_Proxy.nonPublicClassProvider =",
+        "        new NonPublicClass$$Factory(NoDepClass$$Factory.INSTANCE);",
+        "    this.publicClassProvider = new PublicClass$$Factory(",
+        "        foreign_Proxy.nonPublicClassProvider, NoDepClass$$Factory.INSTANCE);",
         "  }",
         "",
         "  @Override",
@@ -93,7 +103,7 @@
         "  }",
         "}");
     assert_().about(javaSources())
-        .that(ImmutableList.of(publicClassFile, nonPublicClassFile, componentFile))
+        .that(ImmutableList.of(noDepClassFile, publicClassFile, nonPublicClassFile, componentFile))
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
         .and().generatesSources(generatedComponent);
