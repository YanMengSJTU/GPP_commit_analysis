diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingDeclaration.java b/compiler/src/main/java/dagger/internal/codegen/BindingDeclaration.java
index 8bb460855..77fe5bb98 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingDeclaration.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingDeclaration.java
@@ -30,7 +30,7 @@
    * The {@link Element} that declares the binding. Absent for bindings without identifying
    * declarations.
    */
-  abstract Optional<Element> bindingElement();
+  abstract Optional<? extends Element> bindingElement();
 
   /**
    * The type enclosing the {@link #bindingElement()}, or {@link Optional#absent()} if {@link
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
index 352cc36fd..ed4c2a335 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
@@ -61,7 +61,7 @@
 @AutoValue
 abstract class MembersInjectionBinding extends Binding {
   @Override
-  Optional<Element> bindingElement() {
+  Optional<? extends Element> bindingElement() {
     return Optional.of(membersInjectedType());
   }
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/SubcomponentDeclaration.java b/compiler/src/main/java/dagger/internal/codegen/SubcomponentDeclaration.java
index bdf24222f..a6563d90c 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SubcomponentDeclaration.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SubcomponentDeclaration.java
@@ -26,7 +26,6 @@
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableSet;
 import javax.lang.model.element.AnnotationMirror;
-import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 
@@ -43,6 +42,9 @@
   @Override
   public abstract Key key();
 
+  @Override
+  abstract Optional<? extends ExecutableElement> bindingElement();
+
   /**
    * The type element that defines the {@link dagger.Subcomponent} or {@link
    * dagger.producers.ProductionSubcomponent} for this declaration.
@@ -67,10 +69,10 @@ public Factory(Key.Factory keyFactory) {
           MoreTypes.asTypeElements(getModuleSubcomponents(moduleAnnotation))) {
         declarations.add(
             new AutoValue_SubcomponentDeclaration(
-                Optional.<Element>of(subcomponentAttribute),
                 Optional.of(module),
                 keyFactory.forSubcomponentBuilder(
                     getSubcomponentBuilder(subcomponent).get().asType()),
+                Optional.of(subcomponentAttribute),
                 subcomponent,
                 moduleAnnotation));
       }
