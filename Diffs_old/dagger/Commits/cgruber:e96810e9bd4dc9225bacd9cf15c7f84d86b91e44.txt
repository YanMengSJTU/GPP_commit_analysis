diff --git a/java/dagger/internal/codegen/BindingRequest.java b/java/dagger/internal/codegen/BindingRequest.java
index 5bf1d9319..5245d6fcc 100644
--- a/java/dagger/internal/codegen/BindingRequest.java
+++ b/java/dagger/internal/codegen/BindingRequest.java
@@ -95,7 +95,9 @@ final TypeName typeName() {
   /** Returns a name that can be used for the kind of request this is. */
   final String kindName() {
     Object requestKindObject =
-        requestKind().isPresent() ? requestKind().get() : frameworkType().get();
+        requestKind().isPresent()
+            ? requestKind().get()
+            : frameworkType().get().frameworkClass().getSimpleName();
     return requestKindObject.toString();
   }
 }
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 631de512b..48ded6b8a 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -3361,7 +3361,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "        ResponseProducerModule_ResponseFactory.create(",
             "            getExecutorProvider(),",
             "            getProductionComponentMonitorProvider(),",
-            "            getResponseDependencyProducernode());",
+            "            getResponseDependencyProducer());",
             "    this.setOfResponseProducer =",
             // TODO(b/72748365): This initialization should be encapsulated in a method to be
             // modified.
@@ -3380,8 +3380,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "  public abstract Provider<ProductionComponentMonitor>",
             "      getProductionComponentMonitorProvider();",
             "",
-            // TODO(b/72748365): Why is the CamelCase wrong at 'node' here.
-            "  public abstract Producer<ResponseDependency> getResponseDependencyProducernode();",
+            "  public abstract Producer<ResponseDependency> getResponseDependencyProducer();",
             "",
             "  @Override",
             "  public void onProducerFutureCancelled(boolean mayInterruptIfRunning) {",
@@ -3572,7 +3571,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "    }",
             "",
             "    @Override",
-            "    public Producer<ResponseDependency> getResponseDependencyProducernode() {",
+            "    public Producer<ResponseDependency> getResponseDependencyProducer() {",
             "      return DaggerRoot.this.responseDependencyProducer;",
             "    }",
             "",
