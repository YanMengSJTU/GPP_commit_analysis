diff --git a/compiler/src/main/java/dagger/internal/codegen/CompilerOptions.java b/compiler/src/main/java/dagger/internal/codegen/CompilerOptions.java
index f7e9b2132..b979128ac 100644
--- a/compiler/src/main/java/dagger/internal/codegen/CompilerOptions.java
+++ b/compiler/src/main/java/dagger/internal/codegen/CompilerOptions.java
@@ -37,6 +37,7 @@
   abstract Diagnostic.Kind staticMemberValidationKind();
   abstract boolean ignorePrivateAndStaticInjectionForComponent();
   abstract ValidationType scopeCycleValidationType();
+  abstract boolean warnIfInjectionFactoryNotGeneratedUpstream();
 
   static Builder builder() {
     return new AutoValue_CompilerOptions.Builder();
@@ -56,6 +57,8 @@ static CompilerOptions create(ProcessingEnvironment processingEnv, Elements elem
             ignorePrivateAndStaticInjectionForComponent(processingEnv)
                 .equals(FeatureStatus.DISABLED))
         .scopeCycleValidationType(scopeValidationType(processingEnv))
+        .warnIfInjectionFactoryNotGeneratedUpstream(
+            warnIfInjectionFactoryNotGeneratedUpstream(processingEnv).equals(FeatureStatus.ENABLED))
         .build();
   }
 
@@ -69,6 +72,8 @@ static CompilerOptions create(ProcessingEnvironment processingEnv, Elements elem
     Builder ignorePrivateAndStaticInjectionForComponent(
         boolean ignorePrivateAndStaticInjectionForComponent);
     Builder scopeCycleValidationType(ValidationType type);
+    Builder warnIfInjectionFactoryNotGeneratedUpstream(
+        boolean warnIfInjectionFactoryNotGeneratedUpstream);
     CompilerOptions build();
   }
 
@@ -83,6 +88,9 @@ Builder ignorePrivateAndStaticInjectionForComponent(
 
   static final String STATIC_MEMBER_VALIDATION_TYPE_KEY = "dagger.staticMemberValidation";
 
+  static final String WARN_IF_INJECTION_FACTORY_NOT_GENERATED_UPSTREAM_KEY =
+      "dagger.warnIfInjectionFactoryNotGeneratedUpstream";
+
   /**
    * If true, Dagger will generate factories and components even if some members-injected types
    * have private or static {@code @Inject}-annotated members.
@@ -99,6 +107,7 @@ Builder ignorePrivateAndStaticInjectionForComponent(
         NULLABLE_VALIDATION_KEY,
         PRIVATE_MEMBER_VALIDATION_TYPE_KEY,
         STATIC_MEMBER_VALIDATION_TYPE_KEY,
+        WARN_IF_INJECTION_FACTORY_NOT_GENERATED_UPSTREAM_KEY,
         IGNORE_PRIVATE_AND_STATIC_INJECTION_FOR_COMPONENT);
 
   private static FeatureStatus writeProducerNameInToken(ProcessingEnvironment processingEnv) {
@@ -150,6 +159,15 @@ private static FeatureStatus ignorePrivateAndStaticInjectionForComponent(
         EnumSet.allOf(FeatureStatus.class));
   }
 
+  private static FeatureStatus warnIfInjectionFactoryNotGeneratedUpstream(
+      ProcessingEnvironment processingEnv) {
+    return valueOf(
+        processingEnv,
+        WARN_IF_INJECTION_FACTORY_NOT_GENERATED_UPSTREAM_KEY,
+        FeatureStatus.DISABLED,
+        EnumSet.allOf(FeatureStatus.class));
+  }
+
   private static <T extends Enum<T>> T valueOf(
       ProcessingEnvironment processingEnv, String key, T defaultValue, Set<T> validValues) {
     Map<String, String> options = processingEnv.getOptions();
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index 931664330..b47fbf983 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -156,7 +156,8 @@ public SourceVersion getSupportedSourceVersion() {
             injectValidator,
             keyFactory,
             provisionBindingFactory,
-            membersInjectionBindingFactory);
+            membersInjectionBindingFactory,
+            compilerOptions);
 
     ModuleDescriptor.Factory moduleDescriptorFactory =
         new ModuleDescriptor.Factory(
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectBindingRegistry.java b/compiler/src/main/java/dagger/internal/codegen/InjectBindingRegistry.java
index 5b87629e8..2169c4ba5 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectBindingRegistry.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectBindingRegistry.java
@@ -63,6 +63,7 @@
   private final Key.Factory keyFactory;
   private final ProvisionBinding.Factory provisionBindingFactory;
   private final MembersInjectionBinding.Factory membersInjectionBindingFactory;
+  private final CompilerOptions compilerOptions;
 
   final class BindingsCollection<B extends Binding> {
     private final BindingType bindingType;
@@ -105,7 +106,8 @@ void tryRegisterBinding(B binding, boolean warnIfNotAlreadyGenerated) {
     void tryToGenerateBinding(B binding, boolean warnIfNotAlreadyGenerated) {
       if (shouldGenerateBinding(binding, generatedClassNameForBinding(binding))) {
         bindingsRequiringGeneration.offer(binding);
-        if (warnIfNotAlreadyGenerated) {
+        if (compilerOptions.warnIfInjectionFactoryNotGeneratedUpstream()
+            && warnIfNotAlreadyGenerated) {
           messager.printMessage(
               Kind.NOTE,
               String.format(
@@ -152,7 +154,8 @@ private void tryToCacheBinding(B binding) {
       InjectValidator injectValidator,
       Key.Factory keyFactory,
       ProvisionBinding.Factory provisionBindingFactory,
-      MembersInjectionBinding.Factory membersInjectionBindingFactory) {
+      MembersInjectionBinding.Factory membersInjectionBindingFactory,
+      CompilerOptions compilerOptions) {
     this.elements = elements;
     this.types = types;
     this.messager = messager;
@@ -160,6 +163,7 @@ private void tryToCacheBinding(B binding) {
     this.keyFactory = keyFactory;
     this.provisionBindingFactory = provisionBindingFactory;
     this.membersInjectionBindingFactory = membersInjectionBindingFactory;
+    this.compilerOptions = compilerOptions;
   }
 
   /**
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index cfc8aa7fa..b095819e5 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -2354,7 +2354,9 @@ public void genericTestToLetMeDebugInEclipse() {
   public void unprocessedMembersInjectorNotes() {
     Compilation compilation =
         javac()
-            .withOptions("-Xlint:-processing")
+            .withOptions(
+                "-Xlint:-processing",
+                 "-Adagger.warnIfInjectionFactoryNotGeneratedUpstream=enabled")
             .withProcessors(
                 new ElementFilteringComponentProcessor(
                     Predicates.not(
@@ -2842,6 +2844,11 @@ public SourceVersion getSupportedSourceVersion() {
       return componentProcessor.getSupportedSourceVersion();
     }
 
+    @Override
+    public Set<String> getSupportedOptions() {
+      return componentProcessor.getSupportedOptions();
+    }
+
     @Override
     public boolean process(
         Set<? extends TypeElement> annotations, final RoundEnvironment roundEnv) {
