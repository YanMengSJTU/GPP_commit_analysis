diff --git a/compiler/src/it/functional-tests/src/main/java/test/BasicComponent.java b/compiler/src/it/functional-tests/src/main/java/test/BasicComponent.java
index cd9dbdbf1..2a0eab6ba 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/BasicComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/BasicComponent.java
@@ -16,6 +16,7 @@
 package test;
 
 import dagger.Component;
+import javax.inject.Provider;
 
 @Component(modules = PrimitivesModule.class)
 interface BasicComponent {
@@ -37,6 +38,15 @@
   Float getBoxedFloat();
   Double getBoxedDouble();
 
+  Provider<Byte> getByteProvider();
+  Provider<Character> getCharProvider();
+  Provider<Short> getShortProvider();
+  Provider<Integer> getIntProvider();
+  Provider<Long> getLongProvider();
+  Provider<Boolean> getBooleanProvider();
+  Provider<Float> getFloatProvider();
+  Provider<Double> getDoubleProvider();
+
   byte[] getByteArray();
   char[] getCharArray();
   short[] getShortArray();
@@ -46,6 +56,15 @@
   float[] getFloatArray();
   double[] getDoubleArray();
 
+  Provider<byte[]> getByteArrayProvider();
+  Provider<char[]> getCharArrayProvider();
+  Provider<short[]> getShortArrayProvider();
+  Provider<int[]> getIntArrayProvider();
+  Provider<long[]> getLongArrayProvider();
+  Provider<boolean[]> getBooleanArrayProvider();
+  Provider<float[]> getFloatArrayProvider();
+  Provider<double[]> getDoubleArrayProvider();
+
   Object noOpMembersInjection(Object obviouslyDoesNotHaveMembersToInject);
 
   Thing thing();
diff --git a/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java b/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
index 45dd924ae..c3bfa98fa 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
@@ -63,6 +63,18 @@
     assertThat(basicComponent.getBoxedDouble()).isEqualTo(new Double(BOUND_DOUBLE));
   }
 
+  @Test public void boxedPrimitiveProviders() {
+    BasicComponent basicComponent = Dagger_BasicComponent.create();
+    assertThat(basicComponent.getByteProvider().get()).isEqualTo(new Byte(BOUND_BYTE));
+    assertThat(basicComponent.getCharProvider().get()).isEqualTo(new Character(BOUND_CHAR));
+    assertThat(basicComponent.getShortProvider().get()).isEqualTo(new Short(BOUND_SHORT));
+    assertThat(basicComponent.getIntProvider().get()).isEqualTo(new Integer(BOUND_INT));
+    assertThat(basicComponent.getLongProvider().get()).isEqualTo(new Long(BOUND_LONG));
+    assertThat(basicComponent.getBooleanProvider().get()).isEqualTo(new Boolean(BOUND_BOOLEAN));
+    assertThat(basicComponent.getFloatProvider().get()).isEqualTo(new Float(BOUND_FLOAT));
+    assertThat(basicComponent.getDoubleProvider().get()).isEqualTo(new Double(BOUND_DOUBLE));
+  }
+
   @Test public void primitiveArrays() {
     BasicComponent basicComponent = Dagger_BasicComponent.create();
     assertThat(basicComponent.getByteArray()).isSameAs(BOUND_BYTE_ARRAY);
@@ -75,6 +87,18 @@
     assertThat(basicComponent.getDoubleArray()).isSameAs(BOUND_DOUBLE_ARRAY);
   }
 
+  @Test public void primitiveArrayProviders() {
+    BasicComponent basicComponent = Dagger_BasicComponent.create();
+    assertThat(basicComponent.getByteArrayProvider().get()).isSameAs(BOUND_BYTE_ARRAY);
+    assertThat(basicComponent.getCharArrayProvider().get()).isSameAs(BOUND_CHAR_ARRAY);
+    assertThat(basicComponent.getShortArrayProvider().get()).isSameAs(BOUND_SHORT_ARRAY);
+    assertThat(basicComponent.getIntArrayProvider().get()).isSameAs(BOUND_INT_ARRAY);
+    assertThat(basicComponent.getLongArrayProvider().get()).isSameAs(BOUND_LONG_ARRAY);
+    assertThat(basicComponent.getBooleanArrayProvider().get()).isSameAs(BOUND_BOOLEAN_ARRAY);
+    assertThat(basicComponent.getFloatArrayProvider().get()).isSameAs(BOUND_FLOAT_ARRAY);
+    assertThat(basicComponent.getDoubleArrayProvider().get()).isSameAs(BOUND_DOUBLE_ARRAY);
+  }
+
   @Test public void noOpMembersInjection() {
     BasicComponent basicComponent = Dagger_BasicComponent.create();
     Object object = new Object();
diff --git a/compiler/src/it/producers-functional-tests/pom.xml b/compiler/src/it/producers-functional-tests/pom.xml
index b8e8972e8..33c48efe5 100644
--- a/compiler/src/it/producers-functional-tests/pom.xml
+++ b/compiler/src/it/producers-functional-tests/pom.xml
@@ -66,8 +66,8 @@ limitations under the License.
         <artifactId>maven-compiler-plugin</artifactId>
         <version>3.1</version>
         <configuration>
-          <source>1.7</source>
-          <target>1.7</target>
+          <source>1.6</source>
+          <target>1.6</target>
           <annotationProcessors>
             <annotationProcessor>dagger.internal.codegen.ComponentProcessor</annotationProcessor>
           </annotationProcessors>
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
index 213811749..f74085e8e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -682,7 +682,7 @@ private void reportCycle(Deque<ResolvedRequest> path,
     DependencyRequest rootRequest = path.getLast().request();
     TypeElement componentType =
         MoreElements.asType(rootRequest.requestElement().getEnclosingElement());
-    // TODO(user): Restructure to provide a hint for the start and end of the cycle.
+    // TODO(cgruber): Restructure to provide a hint for the start and end of the cycle.
     reportBuilder.addItem(
         String.format(ErrorMessages.CONTAINS_DEPENDENCY_CYCLE_FORMAT,
             componentType.getQualifiedName(),
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyRequestFormatter.java b/compiler/src/main/java/dagger/internal/codegen/DependencyRequestFormatter.java
index dd97665df..0e5f1f240 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DependencyRequestFormatter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DependencyRequestFormatter.java
@@ -48,8 +48,8 @@
     this.types = types;
   }
 
-  // TODO(user): Sweep this class for TypeMirror.toString() usage and do some preventive format.
-  // TODO(user): consider returning a small structure containing strings to be indented later.
+  // TODO(cgruber): Sweep this class for TypeMirror.toString() usage and do some preventive format.
+  // TODO(cgruber): consider returning a small structure containing strings to be indented later.
   @Override public String format(final DependencyRequest request) {
     Element requestElement = request.requestElement();
     Optional<AnnotationMirror> qualifier = InjectionAnnotations.getQualifier(requestElement);
@@ -65,7 +65,7 @@
           appendEnclosingTypeAndMemberName(method, builder).append("()\n")
               .append(INDENT).append(INDENT).append("[component method with return type: ");
           if (qualifier.isPresent()) {
-            // TODO(user) use chenying's annotation mirror stringifier
+            // TODO(cgruber) use chenying's annotation mirror stringifier
             builder.append(qualifier.get()).append(' ');
           }
           builder.append(method.getReturnType()).append(']');
@@ -115,7 +115,7 @@
               .append(INDENT).append(INDENT).append("[injected field of type: ");
         }
         if (qualifier.isPresent()) {
-          // TODO(user) use chenying's annotation mirror stringifier
+          // TODO(cgruber) use chenying's annotation mirror stringifier
           builder.append(qualifier.get()).append(' ');
         }
         builder.append(resolvedVariableType)
diff --git a/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java b/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
index c0af683f7..e5b657bee 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
@@ -240,7 +240,7 @@
    * (and possibly parameterized) type, and should NOT be used with
    * arbitrary text, especially prose error messages.
    *
-   * TODO(user): Tighten these to take type representations (mirrors
+   * TODO(cgruber): Tighten these to take type representations (mirrors
    *     and elements) to avoid accidental mis-use by running errors
    *     through this method.
    */
@@ -260,7 +260,7 @@ static String stripCommonTypePrefixes(String type) {
     return result.toString();
   }
 
-  //TODO(user): Extract Formatter and do something less stringy.
+  //TODO(cgruber): Extract Formatter and do something less stringy.
   static String format(AnnotationMirror annotation) {
     return stripCommonTypePrefixes(annotation.toString());
   }
diff --git a/compiler/src/main/java/dagger/internal/codegen/KeyFormatter.java b/compiler/src/main/java/dagger/internal/codegen/KeyFormatter.java
index 7e342876e..d2e62fcab 100644
--- a/compiler/src/main/java/dagger/internal/codegen/KeyFormatter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/KeyFormatter.java
@@ -26,10 +26,10 @@
   @Override public String format(Key request) {
     StringBuilder builder = new StringBuilder();
     if (request.qualifier().isPresent()) {
-      builder.append(request.qualifier()); // TODO(user): Use AnnotationMirrorFormatter.
+      builder.append(request.qualifier()); // TODO(cgruber): Use AnnotationMirrorFormatter.
       builder.append(' ');
     }
-    builder.append(request.type()); // TODO(user): Use TypeMirrorFormatter.
+    builder.append(request.type()); // TODO(cgruber): Use TypeMirrorFormatter.
     return builder.toString();
   }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/MethodSignatureFormatter.java b/compiler/src/main/java/dagger/internal/codegen/MethodSignatureFormatter.java
index 71ddfe6d6..9f8514df8 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MethodSignatureFormatter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MethodSignatureFormatter.java
@@ -62,7 +62,7 @@ public String format(ExecutableElement method, Optional<DeclaredType> container)
       type = MoreElements.asType(container.get().asElement());
     }
 
-    // TODO(user): AnnotationMirror formatter.
+    // TODO(cgruber): AnnotationMirror formatter.
     List<? extends AnnotationMirror> annotations = method.getAnnotationMirrors();
     if (!annotations.isEmpty()) {
       Iterator<? extends AnnotationMirror> annotationIterator = annotations.iterator();
diff --git a/compiler/src/main/java/dagger/internal/codegen/Util.java b/compiler/src/main/java/dagger/internal/codegen/Util.java
index 34df7eac9..2b633b33b 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Util.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Util.java
@@ -50,7 +50,7 @@ public static TypeMirror getProvidedValueTypeOfMap(DeclaredType mapType) {
     return MoreTypes.asDeclared(mapType.getTypeArguments().get(1)).getTypeArguments().get(0);
   }
 
-  // TODO(user): Consider an object that holds and exposes the various parts of a Map type.
+  // TODO(cgruber): Consider an object that holds and exposes the various parts of a Map type.
   /**
    * returns the value type for a {@link Map} type like Map<K, V>}.
    */
diff --git a/compiler/src/test/java/dagger/internal/codegen/KeyTest.java b/compiler/src/test/java/dagger/internal/codegen/KeyTest.java
index 461c6c3c8..dde52f754 100644
--- a/compiler/src/test/java/dagger/internal/codegen/KeyTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/KeyTest.java
@@ -205,7 +205,7 @@ String provideQualifiedString() {
     ExecutableElement integerMethod = Iterables.getOnlyElement(
         ElementFilter.methodsIn(boxedPrimitiveHolder.getEnclosedElements()));
 
-    // TODO(user): Truth subject for TypeMirror and TypeElement
+    // TODO(cgruber): Truth subject for TypeMirror and TypeElement
     TypeMirror intType = intMethod.getReturnType();
     assertThat(intType.getKind().isPrimitive()).isTrue();
     TypeMirror integerType = integerMethod.getReturnType();
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
index 9a561e9ad..6ed0b5e5b 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
@@ -30,7 +30,7 @@
 @RunWith(JUnit4.class)
 public final class PrimitiveInjectionTest {
 
-  // TODO(user): Use @test.ForTest to qualify primitives once qualifier equivalence is working.
+  // TODO(cgruber): Use @test.ForTest to qualify primitives once qualifier equivalence is working.
   /*
   JavaFileObject annotation = JavaFileObjects.forSourceLines("test.ForTest",
       "package test;",
@@ -40,7 +40,7 @@
       "}");
   */
 
-  // TODO(user): Expand test to support more primitive types when b/15512877 is fixed.
+  // TODO(cgruber): Expand test to support more primitive types when b/15512877 is fixed.
   JavaFileObject primitiveInjectable = JavaFileObjects.forSourceLines("test.PrimitiveInjectable",
       "package test;",
       "import javax.inject.Inject;",
diff --git a/core/src/main/java/dagger/Module.java b/core/src/main/java/dagger/Module.java
index 33c10857b..d566c5876 100644
--- a/core/src/main/java/dagger/Module.java
+++ b/core/src/main/java/dagger/Module.java
@@ -93,6 +93,6 @@
    * this property and it is present for compatibility with Dagger 1.x during
    * migrations.
    */
-  // TODO(user): Deprecate this property.
+  // TODO(cgruber): Deprecate this property.
   boolean library() default true;
 }
diff --git a/deploy_website.sh b/deploy_website.sh
old mode 100644
new mode 100755
diff --git a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/DemoApplication.java b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/DemoApplication.java
index 2b65da692..71a003089 100644
--- a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/DemoApplication.java
+++ b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/DemoApplication.java
@@ -17,12 +17,13 @@
 
 import android.app.Application;
 import android.location.LocationManager;
+import javax.inject.Singleton;
 import javax.inject.Inject;
 
 public class DemoApplication extends Application {
   private ApplicationComponent applicationComponent;
 
-  // TODO(user): Figure out a better example of something one might inject into the app.
+  // TODO(cgruber): Figure out a better example of something one might inject into the app.
   @Inject LocationManager locationManager; // to illustrate injecting somethign into the app.
 
   @Override public void onCreate() {
