diff --git a/compiler/src/main/java/dagger/internal/codegen/Binding.java b/compiler/src/main/java/dagger/internal/codegen/Binding.java
index 44faf5f3b..4481739ef 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Binding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Binding.java
@@ -15,6 +15,7 @@
  */
 package dagger.internal.codegen;
 
+import com.google.auto.common.MoreElements;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.ImmutableSetMultimap;
 
@@ -37,7 +38,7 @@
 
   /** The type enclosing the binding {@link #bindingElement()}. */
   TypeElement enclosingType() {
-    return ElementUtil.asTypeElement(bindingElement().getEnclosingElement());
+    return MoreElements.asType(bindingElement().getEnclosingElement());
   }
 
   /**
diff --git a/compiler/src/main/java/dagger/internal/codegen/ElementUtil.java b/compiler/src/main/java/dagger/internal/codegen/ElementUtil.java
deleted file mode 100644
index 3597b653e..000000000
--- a/compiler/src/main/java/dagger/internal/codegen/ElementUtil.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Copyright (C) 2014 Google, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package dagger.internal.codegen;
-
-import javax.lang.model.element.Element;
-import javax.lang.model.element.ElementKind;
-import javax.lang.model.element.ElementVisitor;
-import javax.lang.model.element.TypeElement;
-import javax.lang.model.util.SimpleElementVisitor6;
-
-/**
- * A collection of utilities for working with {@link Element} instances.
- *
- * @author Gregory Kick
- * @since 2.0
- */
-final class ElementUtil {
-  private static final ElementVisitor<TypeElement, Void> TYPE_ELEMENT_VISITOR =
-      new SimpleElementVisitor6<TypeElement, Void>() {
-        @Override
-        protected TypeElement defaultAction(Element e, Void p) {
-          throw new IllegalArgumentException();
-        }
-
-        @Override
-        public TypeElement visitType(TypeElement e, Void p) {
-          return e;
-        }
-      };
-
-  /**
-   * Returns the given {@link Element} as a {@link TypeElement} or throws
-   * {@link IllegalArgumentException} if the element is not of the correct
-   * {@linkplain ElementKind kind}.
-   */
-  static TypeElement asTypeElement(Element e) {
-    return e.accept(TYPE_ELEMENT_VISITOR, null);
-  }
-
-  private ElementUtil() {}
-}
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectConstructorValidator.java b/compiler/src/main/java/dagger/internal/codegen/InjectConstructorValidator.java
index c2ea00fa3..4776e0228 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectConstructorValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectConstructorValidator.java
@@ -29,6 +29,7 @@
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.STATIC;
 
+import com.google.auto.common.MoreElements;
 import com.google.common.base.Predicate;
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableSet;
@@ -68,7 +69,7 @@
     }
 
     TypeElement enclosingElement =
-        ElementUtil.asTypeElement(constructorElement.getEnclosingElement());
+        MoreElements.asType(constructorElement.getEnclosingElement());
     Set<Modifier> typeModifiers = enclosingElement.getModifiers();
 
     if (typeModifiers.contains(PRIVATE)) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/Mirrors.java b/compiler/src/main/java/dagger/internal/codegen/Mirrors.java
index ad110df49..5e1317552 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Mirrors.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Mirrors.java
@@ -22,6 +22,7 @@
 import static javax.lang.model.type.TypeKind.TYPEVAR;
 import static javax.lang.model.type.TypeKind.WILDCARD;
 
+import com.google.auto.common.MoreElements;
 import com.google.common.base.Equivalence;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.ImmutableSet.Builder;
@@ -264,7 +265,7 @@ public Void visitArray(ArrayType t, Builder<TypeElement> p) {
 
       @Override
       public Void visitDeclared(DeclaredType t, Builder<TypeElement> p) {
-        p.add(ElementUtil.asTypeElement(t.asElement()));
+        p.add(MoreElements.asType(t.asElement()));
         for (TypeMirror typeArgument : t.getTypeArguments()) {
           typeArgument.accept(this, p);
         }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ModuleProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ModuleProcessor.java
index 8d341e8ea..3e3272bfb 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ModuleProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ModuleProcessor.java
@@ -17,6 +17,7 @@
 
 import static javax.lang.model.element.ElementKind.METHOD;
 
+import com.google.auto.common.MoreElements;
 import com.google.common.base.Function;
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableSet;
@@ -94,7 +95,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
     // process each module
     for (Element moduleElement : roundEnv.getElementsAnnotatedWith(Module.class)) {
       ValidationReport<TypeElement> report =
-          moduleValidator.validate(ElementUtil.asTypeElement(moduleElement));
+          moduleValidator.validate(MoreElements.asType(moduleElement));
       report.printMessagesTo(messager);
 
       if (report.isClean()) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java b/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
index 329fcbd79..3d9c2b676 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
@@ -23,6 +23,7 @@
 import static javax.lang.model.element.ElementKind.FIELD;
 import static javax.lang.model.element.ElementKind.METHOD;
 
+import com.google.auto.common.MoreElements;
 import com.google.auto.value.AutoValue;
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableSet;
@@ -81,7 +82,7 @@ ProvisionBinding forInjectConstructor(ExecutableElement constructorElement) {
           key,
           getScopeAnnotation(constructorElement.getEnclosingElement()),
           requiresMemeberInjection(
-              ElementUtil.asTypeElement(constructorElement.getEnclosingElement())),
+              MoreElements.asType(constructorElement.getEnclosingElement())),
           false);
     }
 
diff --git a/compiler/src/test/java/dagger/internal/codegen/ElementUtilTest.java b/compiler/src/test/java/dagger/internal/codegen/ElementUtilTest.java
index 0cf99d282..f52f71efa 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ElementUtilTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ElementUtilTest.java
@@ -18,6 +18,7 @@
 import static org.junit.Assert.fail;
 import static org.truth0.Truth.ASSERT;
 
+import com.google.auto.common.MoreElements;
 import com.google.testing.compile.CompilationRule;
 
 import javax.lang.model.element.Element;
@@ -37,7 +38,7 @@
   @Test public void asTypeElement() {
     Element typeElement =
         compilation.getElements().getTypeElement(String.class.getCanonicalName());
-    ASSERT.that(ElementUtil.asTypeElement(typeElement)).is(typeElement);
+    ASSERT.that(MoreElements.asType(typeElement)).is(typeElement);
   }
 
   @Test public void asTypeElement_notATypeElement() {
@@ -45,7 +46,7 @@
         compilation.getElements().getTypeElement(String.class.getCanonicalName());
     for (ExecutableElement e : ElementFilter.methodsIn(typeElement.getEnclosedElements())) {
       try {
-        ElementUtil.asTypeElement(e);
+        MoreElements.asType(e);
         fail();
       } catch (IllegalArgumentException expected) {
       }
