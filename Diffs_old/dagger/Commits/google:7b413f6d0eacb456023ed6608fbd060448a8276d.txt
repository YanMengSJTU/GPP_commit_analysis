diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 70971b15b..e79b3d45f 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -192,12 +192,12 @@ java_library(
         "AbstractComponentWriter.java",
         "AnnotationCreatorGenerator.java",
         "BindingExpression.java",
-        "BoundInstanceBindingExpression.java",
         "ComponentBindingExpressions.java",
         "ComponentBuilder.java",
         "ComponentGenerator.java",
         "ComponentInstanceBindingExpression.java",
         "ComponentProvisionBindingExpression.java",
+        "ComponentRequirementBindingExpression.java",
         "ComponentRequirementField.java",
         "ComponentRequirementFields.java",
         "ComponentWriter.java",
diff --git a/java/dagger/internal/codegen/BindingGraph.java b/java/dagger/internal/codegen/BindingGraph.java
index 15ef307f7..bb2412ceb 100644
--- a/java/dagger/internal/codegen/BindingGraph.java
+++ b/java/dagger/internal/codegen/BindingGraph.java
@@ -25,6 +25,7 @@
 import static dagger.internal.codegen.ComponentDescriptor.Kind.PRODUCTION_COMPONENT;
 import static dagger.internal.codegen.ComponentDescriptor.isComponentContributionMethod;
 import static dagger.internal.codegen.ComponentDescriptor.isComponentProductionMethod;
+import static dagger.internal.codegen.ComponentRequirement.Kind.BOUND_INSTANCE;
 import static dagger.internal.codegen.ContributionBinding.Kind.SYNTHETIC_MULTIBOUND_KINDS;
 import static dagger.internal.codegen.ContributionBinding.Kind.SYNTHETIC_OPTIONAL_BINDING;
 import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
@@ -188,7 +189,7 @@ TypeElement componentType() {
           .requirementMethods()
           .stream()
           .map(BuilderRequirementMethod::requirement)
-          .filter(req -> req.kind().equals(ComponentRequirement.Kind.BINDING))
+          .filter(req -> req.kind().equals(BOUND_INSTANCE))
           .forEach(requirements::add);
     }
     return requirements.build();
@@ -274,7 +275,7 @@ private BindingGraph create(
       if (componentDescriptor.builderSpec().isPresent()) {
         for (BuilderRequirementMethod method :
             componentDescriptor.builderSpec().get().requirementMethods()) {
-          if (method.requirement().kind().equals(ComponentRequirement.Kind.BINDING)) {
+          if (method.requirement().kind().equals(BOUND_INSTANCE)) {
             explicitBindingsBuilder.add(provisionBindingFactory.forBuilderBinding(method));
           }
         }
diff --git a/java/dagger/internal/codegen/BindingGraphValidator.java b/java/dagger/internal/codegen/BindingGraphValidator.java
index b7a264e5e..e51652b92 100644
--- a/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -27,6 +27,7 @@
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.BindingType.PRODUCTION;
 import static dagger.internal.codegen.BindingType.PROVISION;
+import static dagger.internal.codegen.ComponentRequirement.Kind.BOUND_INSTANCE;
 import static dagger.internal.codegen.ConfigurationAnnotations.getComponentAnnotation;
 import static dagger.internal.codegen.ConfigurationAnnotations.getComponentDependencies;
 import static dagger.internal.codegen.ContributionBinding.Kind.INJECTION;
@@ -387,8 +388,7 @@ private void validateBuilders(BindingGraph graph) {
       ImmutableSet<BuilderRequirementMethod> declaredSetters =
           spec.requirementMethods()
               .stream()
-              .filter(
-                  method -> !method.requirement().kind().equals(ComponentRequirement.Kind.BINDING))
+              .filter(method -> !method.requirement().kind().equals(BOUND_INSTANCE))
               .collect(toImmutableSet());
       ImmutableSet<ComponentRequirement> declaredRequirements =
           declaredSetters
@@ -433,8 +433,7 @@ private void validateBuilders(BindingGraph graph) {
       Map<Equivalence.Wrapper<TypeMirror>, List<ExecutableElement>> declaredRequirementsByType =
           spec.requirementMethods()
               .stream()
-              .filter(
-                  method -> !method.requirement().kind().equals(ComponentRequirement.Kind.BINDING))
+              .filter(method -> !method.requirement().kind().equals(BOUND_INSTANCE))
               .collect(
                   groupingBy(
                       method -> method.requirement().wrappedType(),
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index 21e3c4b4b..78a44dce2 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -386,7 +386,7 @@ private BindingExpression inlineProvisionBindingExpression(
               bindingExpression, provisionBinding, generatedComponentModel.name(), types);
 
         case COMPONENT_DEPENDENCY:
-          return new BoundInstanceBindingExpression(
+          return new ComponentRequirementBindingExpression(
               bindingExpression,
               ComponentRequirement.forDependency(provisionBinding.key().type()),
               componentRequirementFields,
@@ -435,9 +435,9 @@ private BindingExpression inlineProvisionBindingExpression(
               graph, bindingExpression, componentBindingExpressions, types, elements);
 
         case BOUND_INSTANCE:
-          return new BoundInstanceBindingExpression(
+          return new ComponentRequirementBindingExpression(
               bindingExpression,
-              ComponentRequirement.forBinding(provisionBinding),
+              ComponentRequirement.forBoundInstance(provisionBinding),
               componentRequirementFields,
               types);
 
diff --git a/java/dagger/internal/codegen/ComponentDescriptor.java b/java/dagger/internal/codegen/ComponentDescriptor.java
index 756163706..ef88ae9db 100644
--- a/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -696,7 +696,7 @@ private ComponentRequirement requirementForBuilderMethod(
             dependencyRequestFactory.forRequiredResolvedVariable(
                 getOnlyElement(method.getParameters()),
                 getOnlyElement(resolvedType.getParameterTypes()));
-        return ComponentRequirement.forBinding(
+        return ComponentRequirement.forBoundInstance(
             request.key(), request.isNullable(), method.getSimpleName().toString());
       }
 
diff --git a/java/dagger/internal/codegen/ComponentRequirement.java b/java/dagger/internal/codegen/ComponentRequirement.java
index 9a22c1220..756a02de7 100644
--- a/java/dagger/internal/codegen/ComponentRequirement.java
+++ b/java/dagger/internal/codegen/ComponentRequirement.java
@@ -19,7 +19,6 @@
 import static com.google.auto.common.MoreElements.getLocalAndInheritedMethods;
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
-import static dagger.internal.codegen.ContributionBinding.Kind.BOUND_INSTANCE;
 import static dagger.internal.codegen.DaggerElements.isAnyAnnotationPresent;
 import static dagger.internal.codegen.SourceFiles.simpleVariableName;
 import static dagger.internal.codegen.Util.componentCanMakeNewInstances;
@@ -49,10 +48,14 @@
   enum Kind {
     /** A type listed in the component's {@code dependencies} attribute. */
     DEPENDENCY,
+
     /** A type listed in the component or subcomponent's {@code modules} attribute. */
     MODULE,
-    /** An object key that can be bound to an instance provided to the builder. */
-    BINDING,
+
+    /**
+     * An object that is passed to a builder's {@link dagger.BindsInstance @BindsInstance} method.
+     */
+    BOUND_INSTANCE,
   }
 
   /** The kind of requirement. */
@@ -105,7 +108,7 @@ NullPolicy nullPolicy(Elements elements, Types types) {
             ? NullPolicy.NEW
             : requiresAPassedInstance(elements, types) ? NullPolicy.THROW : NullPolicy.ALLOW;
       case DEPENDENCY:
-      case BINDING:
+      case BOUND_INSTANCE:
         return NullPolicy.THROW;
     }
     throw new AssertionError();
@@ -116,7 +119,7 @@ NullPolicy nullPolicy(Elements elements, Types types) {
    * to be used within a component.
    */
   boolean requiresAPassedInstance(Elements elements, Types types) {
-    if (kind().equals(ComponentRequirement.Kind.BINDING)) {
+    if (kind().equals(Kind.BOUND_INSTANCE)) {
       // A user has explicitly defined in their component builder they will provide an instance.
       return true;
     }
@@ -170,18 +173,18 @@ static ComponentRequirement forModule(TypeMirror type) {
         simpleVariableName(MoreTypes.asTypeElement(type)));
   }
 
-  static ComponentRequirement forBinding(Key key, boolean nullable, String variableName) {
+  static ComponentRequirement forBoundInstance(Key key, boolean nullable, String variableName) {
     return new AutoValue_ComponentRequirement(
-        Kind.BINDING,
+        Kind.BOUND_INSTANCE,
         MoreTypes.equivalence().wrap(key.type()),
         nullable ? Optional.of(NullPolicy.ALLOW) : Optional.empty(),
         Optional.of(key),
         variableName);
   }
 
-  static ComponentRequirement forBinding(ContributionBinding binding) {
-    checkArgument(binding.bindingKind().equals(BOUND_INSTANCE));
-    return forBinding(
+  static ComponentRequirement forBoundInstance(ContributionBinding binding) {
+    checkArgument(binding.bindingKind().equals(ContributionBinding.Kind.BOUND_INSTANCE));
+    return forBoundInstance(
         binding.key(),
         binding.nullableType().isPresent(),
         binding.bindingElement().get().getSimpleName().toString());
diff --git a/java/dagger/internal/codegen/BoundInstanceBindingExpression.java b/java/dagger/internal/codegen/ComponentRequirementBindingExpression.java
similarity index 83%
rename from java/dagger/internal/codegen/BoundInstanceBindingExpression.java
rename to java/dagger/internal/codegen/ComponentRequirementBindingExpression.java
index 4177022ae..d2d579430 100644
--- a/java/dagger/internal/codegen/BoundInstanceBindingExpression.java
+++ b/java/dagger/internal/codegen/ComponentRequirementBindingExpression.java
@@ -17,17 +17,17 @@
 package dagger.internal.codegen;
 
 import com.squareup.javapoet.ClassName;
-import dagger.Component;
 
 /**
  * A binding expression for instances bound with {@link dagger.BindsInstance} and instances of
- * {@link Component#dependencies() component dependencies}.
+ * {@linkplain dagger.Component#dependencies() component} and {@linkplain
+ * dagger.producers.ProductionComponent#dependencies() production component dependencies}.
  */
-final class BoundInstanceBindingExpression extends SimpleInvocationBindingExpression {
+final class ComponentRequirementBindingExpression extends SimpleInvocationBindingExpression {
   private final ComponentRequirement componentRequirement;
   private final ComponentRequirementFields componentRequirementFields;
 
-  BoundInstanceBindingExpression(
+  ComponentRequirementBindingExpression(
       BindingExpression delegate,
       ComponentRequirement componentRequirement,
       ComponentRequirementFields componentRequirementFields,
diff --git a/java/dagger/internal/codegen/ComponentRequirementField.java b/java/dagger/internal/codegen/ComponentRequirementField.java
index 60846c24e..df99621f3 100644
--- a/java/dagger/internal/codegen/ComponentRequirementField.java
+++ b/java/dagger/internal/codegen/ComponentRequirementField.java
@@ -29,8 +29,8 @@
 /**
  * A factory for expressions of {@link ComponentRequirement}s in the generated component. This is
  * <em>not</em> a {@link BindingExpression}, since {@link ComponentRequirement}s do not have a
- * {@link BindingKey}. See {@link BoundInstanceBindingExpression} for binding expressions that are
- * themselves a binding.
+ * {@link BindingKey}. See {@link ComponentRequirementBindingExpression} for binding expressions
+ * that are themselves a binding.
  */
 abstract class ComponentRequirementField {
   private final ComponentRequirement componentRequirement;
diff --git a/java/dagger/internal/codegen/ProviderOrProducerFieldInitializer.java b/java/dagger/internal/codegen/ProviderOrProducerFieldInitializer.java
index 928e27c89..6c6933275 100644
--- a/java/dagger/internal/codegen/ProviderOrProducerFieldInitializer.java
+++ b/java/dagger/internal/codegen/ProviderOrProducerFieldInitializer.java
@@ -226,7 +226,7 @@ private CodeBlock factoryForContributionBindingInitialization(ContributionBindin
             InstanceFactory.class,
             binding.nullableType().isPresent() ? "createNullable" : "create",
             componentRequirementFields.getExpressionDuringInitialization(
-                ComponentRequirement.forBinding(binding), generatedComponentModel.name()));
+                ComponentRequirement.forBoundInstance(binding), generatedComponentModel.name()));
 
       case INJECTION:
       case PROVISION:
