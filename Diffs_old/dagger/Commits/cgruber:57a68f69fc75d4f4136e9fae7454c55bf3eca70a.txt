diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index c047696c1..c2f8adf06 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -403,7 +403,8 @@ private MembersInjectionBinding rollUpMembersInjectionBindings(Key key) {
         Optional<Equivalence.Wrapper<AnnotationMirror>> bindingScope =
             provisionBinding.wrappedScope();
         for (RequestResolver requestResolver : getResolverLineage()) {
-          if (bindingScope.equals(requestResolver.targetScope)) {
+          if (bindingScope.equals(requestResolver.targetScope)
+              || requestResolver.explicitProvisionBindings.containsValue(provisionBinding)) {
             return Optional.of(requestResolver);
           }
         }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 6bf8f2864..a3d1d5d7f 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -258,15 +258,10 @@ Snippet getSnippetFor(ClassName usingClass) {
     for (Entry<TypeElement, String> entry : componentContributionNames.entrySet()) {
       TypeElement contributionElement = entry.getKey();
       String contributionName = entry.getValue();
-      FieldWriter contributionField =
-          componentWriter.addField(contributionElement, contributionName);
-      contributionField.addModifiers(PRIVATE, FINAL);
-      componentContributionFields.put(contributionElement, MemberSelect.instanceSelect(
-          componentWriter.name(), Snippet.format(contributionField.name())));
       FieldWriter builderField = builderWriter.addField(contributionElement, contributionName);
       builderField.addModifiers(PRIVATE);
-      constructorWriter.body()
-          .addSnippet("this.%1$s = builder.%1$s;", contributionField.name());
+      componentContributionFields.put(contributionElement, MemberSelect.instanceSelect(
+          componentWriter.name(), Snippet.format("builder.%s", builderField.name())));
       MethodWriter builderMethod = builderWriter.addMethod(builderWriter, contributionName);
       builderMethod.addModifiers(PUBLIC);
       builderMethod.addParameter(contributionElement, contributionName);
@@ -326,6 +321,7 @@ Snippet getSnippetFor(ClassName usingClass) {
     initializeFrameworkTypes(input,
         componentWriter,
         constructorWriter,
+        Optional.of(builderWriter.name()),
         componentContributionFields,
         memberSelectSnippets,
         ImmutableMap.<ContributionBinding, Snippet>of(),
@@ -447,6 +443,7 @@ private void writeSubcomponents(BindingGraph input,
     initializeFrameworkTypes(input,
         componentWriter,
         constructorWriter,
+        Optional.<ClassName>absent(),
         componentContributionFields,
         memberSelectSnippets,
         parentMultibindingContributionSnippets,
@@ -695,6 +692,7 @@ private void writeInterfaceMethods(BindingGraph input, ClassWriter componentWrit
   private void initializeFrameworkTypes(BindingGraph input,
       ClassWriter componentWriter,
       ConstructorWriter constructorWriter,
+      Optional<ClassName> builderName,
       Map<TypeElement, MemberSelect> componentContributionFields,
       ImmutableMap<BindingKey, MemberSelect> memberSelectSnippets,
       ImmutableMap<ContributionBinding, Snippet> parentMultibindingContributionSnippets,
@@ -707,7 +705,12 @@ private void initializeFrameworkTypes(BindingGraph input,
           componentWriter.addMethod(VoidName.VOID, "initialize" + ((i == 0) ? "" : i));
       initializeMethod.body();
       initializeMethod.addModifiers(PRIVATE);
-      constructorWriter.body().addSnippet("%s();", initializeMethod.name());
+      if (builderName.isPresent()) {
+        initializeMethod.addParameter(builderName.get(), "builder").addModifiers(FINAL);
+        constructorWriter.body().addSnippet("%s(builder);", initializeMethod.name());
+      } else {
+        constructorWriter.body().addSnippet("%s();", initializeMethod.name());
+      }
 
       for (BindingKey bindingKey : partitions.get(i)) {
         Snippet memberSelectSnippet =
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index b2fae4a13..e0c34b99f 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -203,7 +203,7 @@
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -214,7 +214,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "  }",
         "",
         "  @Override",
@@ -289,7 +289,7 @@
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -300,7 +300,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.someInjectableTypeProvider =",
         "        ScopedProvider.create(SomeInjectableType$$Factory.create());",
         "  }",
@@ -371,7 +371,7 @@
         "",
         "  private Dagger_OuterType_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -382,7 +382,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.bMembersInjector =",
         "        OuterType$B$$MembersInjector.create(OuterType$A$$Factory.create());",
         "  }",
@@ -465,14 +465,12 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final TestModule testModule;",
         "  private Provider<B> bProvider;",
         "  private Provider<A> aProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.testModule = builder.testModule;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -483,8 +481,9 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
-        "    this.bProvider = TestModule$$BFactory.create(testModule, C$$Factory.create());",
+        "  private void initialize(final Builder builder) {",
+        "    this.bProvider = TestModule$$BFactory.create(builder.testModule,",
+        "        C$$Factory.create());",
         "    this.aProvider = A$$Factory.create(bProvider);",
         "  }",
         "",
@@ -600,21 +599,9 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final TestModule testModule;",
-        "  private final DepModule depModule;",
-        "  private final AlwaysIncluded alwaysIncluded;",
-        "  private final ParentTestIncluded parentTestIncluded;",
-        "  private final RefByDep refByDep;",
-        "  private final ParentDepIncluded parentDepIncluded;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.testModule = builder.testModule;",
-        "    this.depModule = builder.depModule;",
-        "    this.alwaysIncluded = builder.alwaysIncluded;",
-        "    this.parentTestIncluded = builder.parentTestIncluded;",
-        "    this.refByDep = builder.refByDep;",
-        "    this.parentDepIncluded = builder.parentDepIncluded;",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -772,17 +759,13 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final EmptySetModule emptySetModule;",
-        "  private final SetModule setModule;",
         "  private Provider<Set<String>> setOfStringContribution1Provider;",
         "  private Provider<Set<String>> setOfStringContribution2Provider;",
         "  private Provider<Set<String>> setOfStringProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.emptySetModule = builder.emptySetModule;",
-        "    this.setModule = builder.setModule;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -793,10 +776,11 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.setOfStringContribution1Provider =",
-        "        EmptySetModule$$EmptySetFactory.create(emptySetModule);",
-        "    this.setOfStringContribution2Provider = SetModule$$StringFactory.create(setModule);",
+        "        EmptySetModule$$EmptySetFactory.create(builder.emptySetModule);",
+        "    this.setOfStringContribution2Provider =",
+        "        SetModule$$StringFactory.create(builder.setModule);",
         "    this.setOfStringProvider = SetFactory.create(",
         "        setOfStringContribution1Provider, setOfStringContribution2Provider);",
         "  }",
@@ -891,7 +875,7 @@
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -902,7 +886,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.someInjectedTypeMembersInjector =",
         "        SomeInjectedType$$MembersInjector.create(SomeInjectableType$$Factory.create());",
         "  }",
@@ -970,7 +954,7 @@
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -981,7 +965,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.simpleComponentProvider = InstanceFactory.<SimpleComponent>create(this);",
         "    this.someInjectableTypeProvider =",
         "        SomeInjectableType$$Factory.create(simpleComponentProvider);",
@@ -1049,7 +1033,7 @@
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1060,7 +1044,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.someInjectedTypeMembersInjector =",
         "        SomeInjectedType$$MembersInjector.create(SomeInjectableType$$Factory.create());",
         "    this.someInjectedTypeProvider =",
@@ -1126,7 +1110,7 @@
         "",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1137,7 +1121,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.someInjectableTypeProvider =",
         "        SomeInjectableType$$Factory.create((MembersInjector) MembersInjectors.noOp());",
         "  }",
@@ -1214,24 +1198,22 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_BComponent implements BComponent {",
-        "  private final AComponent aComponent;",
         "  private Provider<A> aProvider;",
         "  private Provider<B> bProvider;",
         "",
         "  private Dagger_BComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.aComponent = builder.aComponent;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
         "    return new Builder();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.aProvider = new Factory<A>() {",
         "      @Override public A get() {",
-        "        A provided = aComponent.a();",
+        "        A provided = builder.aComponent.a();",
         "        if (provided == null) {",
         "          throw new NullPointerException(" + NPE_LITERAL + ");",
         "        }",
@@ -1330,16 +1312,12 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final test.TestModule testModule;",
-        "  private final TestModule testModule1;",
         "  private Provider<test.A> aProvider;",
         "  private Provider<A> aProvider1;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.testModule = builder.testModule;",
-        "    this.testModule1 = builder.testModule1;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1350,9 +1328,9 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
-        "    this.aProvider = test.TestModule$$AFactory.create(testModule);",
-        "    this.aProvider1 = TestModule$$AFactory.create(testModule1);",
+        "  private void initialize(final Builder builder) {",
+        "    this.aProvider = test.TestModule$$AFactory.create(builder.testModule);",
+        "    this.aProvider1 = TestModule$$AFactory.create(builder.testModule1);",
         "  }",
         "",
         "  @Override",
@@ -1468,7 +1446,7 @@
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1479,7 +1457,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.bProvider = B$$Factory.create(C$$Factory.create());",
         "    this.aProvider = A$$Factory.create(bProvider);",
         "    this.xProvider = X$$Factory.create(C$$Factory.create());",
@@ -1570,7 +1548,7 @@
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1581,7 +1559,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {}",
+        "  private void initialize(final Builder builder) {}",
         "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
@@ -1658,7 +1636,7 @@
         "public final class Dagger_SimpleComponent implements SimpleComponent {",
         "  private Dagger_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -1669,7 +1647,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {}",
+        "  private void initialize(final Builder builder) {}",
         "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 4128b6828..fccfb3334 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -118,8 +118,6 @@ public void mapBindingsWithEnumKey() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final MapModuleOne mapModuleOne;",
-        "  private final MapModuleTwo mapModuleTwo;",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution2;",
         "  private Provider<Map<PathEnum, Provider<Handler>>>",
@@ -127,9 +125,7 @@ public void mapBindingsWithEnumKey() {
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.mapModuleOne = builder.mapModuleOne;",
-        "    this.mapModuleTwo = builder.mapModuleTwo;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -140,11 +136,11 @@ public void mapBindingsWithEnumKey() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.mapOfPathEnumAndProviderOfHandlerContribution1 =",
-        "        MapModuleOne$$ProvideAdminHandlerFactory.create(mapModuleOne);",
+        "        MapModuleOne$$ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
         "    this.mapOfPathEnumAndProviderOfHandlerContribution2 =",
-        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(mapModuleTwo);",
+        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
         "    this.mapOfPathEnumAndProviderOfHandlerProvider =",
         "        MapProviderFactory.<PathEnum, Handler>builder(2)",
         "            .put(test.PathEnum.ADMIN,",
@@ -290,8 +286,6 @@ public void mapBindingsWithStringKey() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final MapModuleOne mapModuleOne;",
-        "  private final MapModuleTwo mapModuleTwo;",
         "  private Provider<Handler> mapOfStringAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfStringAndProviderOfHandlerContribution2;",
         "  private Provider<Map<String, Provider<Handler>>>",
@@ -299,9 +293,7 @@ public void mapBindingsWithStringKey() {
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.mapModuleOne = builder.mapModuleOne;",
-        "    this.mapModuleTwo = builder.mapModuleTwo;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -312,11 +304,11 @@ public void mapBindingsWithStringKey() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.mapOfStringAndProviderOfHandlerContribution1 =",
-        "        MapModuleOne$$ProvideAdminHandlerFactory.create(mapModuleOne);",
+        "        MapModuleOne$$ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
         "    this.mapOfStringAndProviderOfHandlerContribution2 =",
-        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(mapModuleTwo);",
+        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
         "    this.mapOfStringAndProviderOfHandlerProvider =",
         "        MapProviderFactory.<String, Handler>builder(2)",
         "            .put(\"Admin\", mapOfStringAndProviderOfHandlerContribution1)",
@@ -463,8 +455,6 @@ public void mapBindingsWithNonProviderValue() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final MapModuleOne mapModuleOne;",
-        "  private final MapModuleTwo mapModuleTwo;",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathEnumAndProviderOfHandlerContribution2;",
         "  private Provider<Map<PathEnum, Provider<Handler>>>",
@@ -473,9 +463,7 @@ public void mapBindingsWithNonProviderValue() {
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.mapModuleOne = builder.mapModuleOne;",
-        "    this.mapModuleTwo = builder.mapModuleTwo;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -486,11 +474,11 @@ public void mapBindingsWithNonProviderValue() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.mapOfPathEnumAndProviderOfHandlerContribution1 =",
-        "        MapModuleOne$$ProvideAdminHandlerFactory.create(mapModuleOne);",
+        "        MapModuleOne$$ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
         "    this.mapOfPathEnumAndProviderOfHandlerContribution2 =",
-        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(mapModuleTwo);",
+        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
         "    this.mapOfPathEnumAndProviderOfHandlerProvider =",
         "        MapProviderFactory.<PathEnum, Handler>builder(2)",
         "            .put(test.PathEnum.ADMIN,",
@@ -594,13 +582,11 @@ public void injectMapWithoutMapBinding() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final MapModule mapModule;",
         "  private Provider<Map<String, String>> provideAMapProvider;",
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.mapModule = builder.mapModule;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -611,8 +597,8 @@ public void injectMapWithoutMapBinding() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
-        "    this.provideAMapProvider = MapModule$$ProvideAMapFactory.create(mapModule);",
+        "  private void initialize(final Builder builder) {",
+        "    this.provideAMapProvider = MapModule$$ProvideAMapFactory.create(builder.mapModule);",
         "  }",
         "",
         "  @Override",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
index 1b9fd0f12..7f0178c85 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -159,8 +159,6 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final MapModuleOne mapModuleOne;",
-        "  private final MapModuleTwo mapModuleTwo;",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution2;",
         "  private Provider<Map<PathKey, Provider<Handler>>>",
@@ -168,9 +166,7 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.mapModuleOne = builder.mapModuleOne;",
-        "    this.mapModuleTwo = builder.mapModuleTwo;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -181,11 +177,11 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.mapOfPathKeyAndProviderOfHandlerContribution1 =",
-        "        MapModuleOne$$ProvideAdminHandlerFactory.create(mapModuleOne);",
+        "        MapModuleOne$$ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
         "    this.mapOfPathKeyAndProviderOfHandlerContribution2 =",
-        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(mapModuleTwo);",
+        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
         "    this.mapOfPathKeyAndProviderOfHandlerProvider =",
         "        MapProviderFactory.<PathKey, Handler>builder(2)",
         "            .put(PathKeyCreator.create(PathEnum.ADMIN, \"AdminPath\"),",
@@ -337,8 +333,6 @@ public void mapKeyComponentFileWithDefaultField() {
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestComponent implements TestComponent {",
-        "  private final MapModuleOne mapModuleOne;",
-        "  private final MapModuleTwo mapModuleTwo;",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution1;",
         "  private Provider<Handler> mapOfPathKeyAndProviderOfHandlerContribution2;",
         "  private Provider<Map<PathKey, Provider<Handler>>>",
@@ -346,9 +340,7 @@ public void mapKeyComponentFileWithDefaultField() {
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.mapModuleOne = builder.mapModuleOne;",
-        "    this.mapModuleTwo = builder.mapModuleTwo;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -359,11 +351,11 @@ public void mapKeyComponentFileWithDefaultField() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.mapOfPathKeyAndProviderOfHandlerContribution1 =",
-        "        MapModuleOne$$ProvideAdminHandlerFactory.create(mapModuleOne);",
+        "        MapModuleOne$$ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
         "    this.mapOfPathKeyAndProviderOfHandlerContribution2 =",
-        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(mapModuleTwo);",
+        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
         "    this.mapOfPathKeyAndProviderOfHandlerProvider =",
         "        MapProviderFactory.<PathKey, Handler>builder(2)",
         "            .put(PathKeyCreator.create(PathEnum.ADMIN, \"DefaultPath\"),",
@@ -427,4 +419,4 @@ public void mapKeyComponentFileWithDefaultField() {
         .and()
         .generatesSources(generatedComponent);
   }
-}
\ No newline at end of file
+}
diff --git a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
index 19a2c29d0..f02a9fc1f 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
@@ -68,7 +68,7 @@ public void parentClass_noInjectedMembers() {
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -79,7 +79,7 @@ public void parentClass_noInjectedMembers() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.childProvider =",
         "        Child$$Factory.create((MembersInjector) MembersInjectors.noOp());",
         "  }",
@@ -158,7 +158,7 @@ public void parentClass_injectedMembersInSupertype() {
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -169,7 +169,7 @@ public void parentClass_injectedMembersInSupertype() {
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.parentMembersInjector = Parent$$MembersInjector.create(Dep$$Factory.create());",
         "    this.childMembersInjector = MembersInjectors.delegatingTo(parentMembersInjector);",
         "    this.childProvider = Child$$Factory.create(childMembersInjector);",
diff --git a/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java b/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
index a2b8e297f..a387f4221 100644
--- a/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
@@ -79,7 +79,7 @@
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -90,7 +90,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.foreign_Proxy.nonPublicClass1Provider =",
         "        NonPublicClass1$$Factory.create(NoDepClass$$Factory.create());",
         "    this.foreign_Proxy.nonPublicClass2Provider =",
@@ -205,7 +205,7 @@
         "",
         "  private Dagger_TestComponent(Builder builder) {",
         "    assert builder != null;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
@@ -216,7 +216,7 @@
         "    return builder().build();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.dMembersInjector = D$$MembersInjector.create(NoDepClass$$Factory.create());",
         "    this.foreign_Proxy.cMembersInjector =",
         "        C$$MembersInjector.create(dMembersInjector, NoDepClass$$Factory.create());",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
index a57b94749..381251de3 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -141,29 +141,23 @@
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class Dagger_TestClass_SimpleComponent implements SimpleComponent {",
-        "  private final AModule aModule;",
-        "  private final BModule bModule;",
-        "  private final Executor executor;",
         "  private Provider<B> bProvider;",
         "  private Producer<A> aProducer;",
         "",
         "  private Dagger_TestClass_SimpleComponent(Builder builder) {",
         "    assert builder != null;",
-        "    this.aModule = builder.aModule;",
-        "    this.bModule = builder.bModule;",
-        "    this.executor = builder.executor;",
-        "    initialize();",
+        "    initialize(builder);",
         "  }",
         "",
         "  public static Builder builder() {",
         "    return new Builder();",
         "  }",
         "",
-        "  private void initialize() {",
+        "  private void initialize(final Builder builder) {",
         "    this.bProvider = TestClass$BModule$$BFactory.create(",
-        "        bModule, TestClass$C$$Factory.create());",
+        "        builder.bModule, TestClass$C$$Factory.create());",
         "    this.aProducer = new TestClass$AModule$$AFactory(",
-        "        aModule, executor, Producers.producerFromProvider(bProvider));",
+        "        builder.aModule, builder.executor, Producers.producerFromProvider(bProvider));",
         "  }",
         "",
         "  @Override",
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
index 6ed0b5e5b..4def47a1e 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
@@ -76,14 +76,12 @@
       "",
       "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
       "public final class Dagger_PrimitiveComponent implements PrimitiveComponent {",
-      "  private final PrimitiveModule primitiveModule;",
       "  private Provider<Integer> primitiveIntProvider;",
       "  private Provider<PrimitiveInjectable> primitiveInjectableProvider;",
       "",
       "  private Dagger_PrimitiveComponent(Builder builder) {",
       "    assert builder != null;",
-      "    this.primitiveModule = builder.primitiveModule;",
-      "    initialize();",
+      "    initialize(builder);",
       "  }",
       "",
       "  public static Builder builder() {",
@@ -94,9 +92,9 @@
       "    return builder().build();",
       "  }",
       "",
-      "  private void initialize() {",
+      "  private void initialize(final Builder builder) {",
       "    this.primitiveIntProvider =",
-      "        PrimitiveModule$$PrimitiveIntFactory.create(primitiveModule);",
+      "        PrimitiveModule$$PrimitiveIntFactory.create(builder.primitiveModule);",
       "    this.primitiveInjectableProvider =",
       "        PrimitiveInjectable$$Factory.create(primitiveIntProvider);",
       "  }",
