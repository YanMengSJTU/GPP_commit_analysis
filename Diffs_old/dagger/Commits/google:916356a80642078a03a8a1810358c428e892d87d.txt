diff --git a/BUILD b/BUILD
index 1e91418de..651372aef 100644
--- a/BUILD
+++ b/BUILD
@@ -59,8 +59,8 @@ jarjar_library(
         "//java/dagger/internal/codegen:base",
         "//java/dagger/internal/codegen:binding",
         "//java/dagger/internal/codegen:binding_graph_validation",
+        "//java/dagger/internal/codegen:jdk-and-guava-extras",
         "//java/dagger/internal/codegen:processor",
-        "//java/dagger/internal/codegen:shared-with-spi",
         "//java/dagger/internal/codegen:validation",
         "//java/dagger/internal/codegen:writing",
         "//java/dagger/model:internal-proxies",
@@ -76,8 +76,8 @@ jarjar_library(
         "//java/dagger/internal/codegen:libbase-src.jar",
         "//java/dagger/internal/codegen:libbinding-src.jar",
         "//java/dagger/internal/codegen:libbinding_graph_validation-src.jar",
+        "//java/dagger/internal/codegen:libjdk-and-guava-extras-src.jar",
         "//java/dagger/internal/codegen:libprocessor-src.jar",
-        "//java/dagger/internal/codegen:libshared-with-spi-src.jar",
         "//java/dagger/internal/codegen:libvalidation-src.jar",
         "//java/dagger/internal/codegen:libwriting-src.jar",
         "//java/dagger/errorprone:liberrorprone-src.jar",
@@ -87,7 +87,7 @@ jarjar_library(
 jarjar_library(
     name = "shaded_spi",
     jars = [
-        "//java/dagger/internal/codegen:shared-with-spi",
+        "//java/dagger/internal/codegen:jdk-and-guava-extras",
         "//java/dagger/model",
         "//java/dagger/spi",
         "@com_google_auto_auto_common//jar",
@@ -98,7 +98,7 @@ jarjar_library(
 jarjar_library(
     name = "shaded_spi_src",
     jars = [
-        "//java/dagger/internal/codegen:libshared-with-spi-src.jar",
+        "//java/dagger/internal/codegen:libjdk-and-guava-extras-src.jar",
         "//java/dagger/model:libmodel-src.jar",
         "//java/dagger/spi:libspi-src.jar",
     ],
diff --git a/java/dagger/android/processor/DuplicateAndroidInjectorsChecker.java b/java/dagger/android/processor/DuplicateAndroidInjectorsChecker.java
index 23b90c92e..a19c5efaa 100644
--- a/java/dagger/android/processor/DuplicateAndroidInjectorsChecker.java
+++ b/java/dagger/android/processor/DuplicateAndroidInjectorsChecker.java
@@ -77,7 +77,7 @@ private void validateMapKeyUniqueness(
       DiagnosticReporter diagnosticReporter) {
     ImmutableSet<Binding> injectorFactories =
         injectorMapDependencies(dispatchingAndroidInjector, graph)
-            .flatMap(injectorFactoryMap -> dependencies(injectorFactoryMap, graph))
+            .flatMap(injectorFactoryMap -> graph.requestedBindings(injectorFactoryMap).stream())
             .collect(collectingAndThen(toList(), ImmutableSet::copyOf));
 
     ImmutableListMultimap.Builder<String, Binding> mapKeyIndex = ImmutableListMultimap.builder();
@@ -107,19 +107,12 @@ private void validateMapKeyUniqueness(
     }
   }
 
-  private Stream<Binding> dependencies(Binding binding, BindingGraph graph) {
-    return graph.network().successors(binding).stream()
-        // TODO(ronshapiro): reuse DaggerStreams.instancesOf()?
-        .filter(Binding.class::isInstance)
-        .map(Binding.class::cast);
-  }
-
   /**
    * Returns a stream of the dependencies of {@code binding} that have a key type of {@code Map<K,
    * Provider<AndroidInjector.Factory<?>>}.
    */
   private Stream<Binding> injectorMapDependencies(Binding binding, BindingGraph graph) {
-    return dependencies(binding, graph)
+    return graph.requestedBindings(binding).stream()
         .filter(requestedBinding -> requestedBinding.kind().equals(BindingKind.MULTIBOUND_MAP))
         .filter(
             requestedBinding -> {
diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 468e32bbe..1d3e32af1 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -53,15 +53,19 @@ CODEGEN_SHARED_DEPS = [
 ]
 
 CODEGEN_DEPS = CODEGEN_SHARED_DEPS + [
-    ":shared-with-spi",
+    ":jdk-and-guava-extras",
     "@google_bazel_common//third_party/java/guava",
 ]
 
-# Code that is shared with the dagger.model and dagger.spi packages. This code is merged into both
+# Extra features for the JDK and Guava. This code is merged into both
 # the dagger-compiler and dagger-spi artifacts that are sent to Maven
 java_library(
-    name = "shared-with-spi",
-    srcs = ["DaggerStreams.java"],
+    name = "jdk-and-guava-extras",
+    srcs = [
+        "DaggerGraphs.java",
+        "DaggerStreams.java",
+        "Optionals.java",
+    ],
     plugins = CODEGEN_PLUGINS,
     tags = ["maven:merged"],
     deps = [
@@ -79,7 +83,6 @@ java_library(
         "CompilerOptions.java",
         "ContributionType.java",
         "DaggerElements.java",
-        "DaggerGraphs.java",
         "DaggerStatistics.java",
         "DaggerTypes.java",
         "DiagnosticFormatting.java",
@@ -95,7 +98,6 @@ java_library(
         "MoreAnnotationValues.java",
         "MultibindingAnnotations.java",
         "OptionalType.java",
-        "Optionals.java",
         "RequestKinds.java",
         "Scopes.java",
         "SetType.java",
diff --git a/java/dagger/internal/codegen/DaggerGraphs.java b/java/dagger/internal/codegen/DaggerGraphs.java
index e9f384247..dda6c118c 100644
--- a/java/dagger/internal/codegen/DaggerGraphs.java
+++ b/java/dagger/internal/codegen/DaggerGraphs.java
@@ -23,7 +23,6 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.graph.Graph;
 import com.google.common.graph.SuccessorsFunction;
-import dagger.model.BindingGraph.Node;
 import java.util.ArrayDeque;
 import java.util.HashMap;
 import java.util.Map;
@@ -31,7 +30,7 @@
 import java.util.Set;
 
 /** Utility methods for {@link com.google.common.graph} types. */
-final class DaggerGraphs {
+public final class DaggerGraphs {
   /**
    * Returns a shortest path from {@code nodeU} to {@code nodeV} in {@code graph} as a list of the
    * nodes visited in sequence, including both {@code nodeU} and {@code nodeV}. (Note that there may
@@ -44,7 +43,7 @@
    * @throws IllegalArgumentException if {@code nodeU} or {@code nodeV} is not present in {@code
    *     graph}
    */
-  static <N> ImmutableList<N> shortestPath(SuccessorsFunction<N> graph, N nodeU, N nodeV) {
+  public static <N> ImmutableList<N> shortestPath(SuccessorsFunction<N> graph, N nodeU, N nodeV) {
     if (nodeU.equals(nodeV)) {
       return ImmutableList.of(nodeU);
     }
@@ -91,7 +90,7 @@
   }
 
   /** Returns the nodes in a graph that are not reachable from a node. */
-  static ImmutableSet<Node> unreachableNodes(Graph<Node> graph, Node node) {
+  public static <N> ImmutableSet<N> unreachableNodes(Graph<N> graph, N node) {
     return ImmutableSet.copyOf(difference(graph.nodes(), reachableNodes(graph, node)));
   }
 
diff --git a/java/dagger/internal/codegen/DependsOnProductionExecutorValidator.java b/java/dagger/internal/codegen/DependsOnProductionExecutorValidator.java
index b4f4eb5f5..0717406b2 100644
--- a/java/dagger/internal/codegen/DependsOnProductionExecutorValidator.java
+++ b/java/dagger/internal/codegen/DependsOnProductionExecutorValidator.java
@@ -16,7 +16,6 @@
 
 package dagger.internal.codegen;
 
-import static dagger.internal.codegen.DaggerStreams.instancesOf;
 import static javax.tools.Diagnostic.Kind.ERROR;
 
 import dagger.model.BindingGraph;
@@ -54,10 +53,7 @@ public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticR
     Key productionExecutorKey = keyFactory.forProductionExecutor();
 
     bindingGraph.bindings(productionExecutorKey).stream()
-        .flatMap(
-            productionExecutorBinding ->
-                bindingGraph.network().predecessors(productionExecutorBinding).stream())
-        .flatMap(instancesOf(dagger.model.Binding.class))
+        .flatMap(productionExecutor -> bindingGraph.requestingBindings(productionExecutor).stream())
         .filter(binding -> !binding.key().equals(productionImplementationExecutorKey))
         .forEach(binding -> reportError(diagnosticReporter, binding));
   }
diff --git a/java/dagger/internal/codegen/DuplicateBindingsValidator.java b/java/dagger/internal/codegen/DuplicateBindingsValidator.java
index acea15cbc..926ea6086 100644
--- a/java/dagger/internal/codegen/DuplicateBindingsValidator.java
+++ b/java/dagger/internal/codegen/DuplicateBindingsValidator.java
@@ -20,7 +20,6 @@
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static com.google.common.collect.Maps.filterValues;
 import static com.google.common.collect.Maps.transformValues;
-import static dagger.internal.codegen.DaggerStreams.instancesOf;
 import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
 import static dagger.internal.codegen.DaggerStreams.toImmutableSetMultimap;
 import static dagger.internal.codegen.Formatter.INDENT;
@@ -215,9 +214,8 @@ private void formatDeclarations(
     if (bindingDeclarationFormatter.canFormat(bindingNode.delegate())) {
       declarations.add(bindingNode.delegate());
     } else {
-      graph.network().successors(binding).stream()
-          .flatMap(instancesOf(dagger.model.Binding.class))
-          .flatMap(dependency -> declarations(graph, dependency).stream())
+      graph.requestedBindings(binding).stream()
+          .flatMap(requestedBinding -> declarations(graph, requestedBinding).stream())
           .forEach(declarations::add);
     }
     return declarations.build();
diff --git a/java/dagger/internal/codegen/MapMultibindingValidator.java b/java/dagger/internal/codegen/MapMultibindingValidator.java
index 53aa40fcd..346d27145 100644
--- a/java/dagger/internal/codegen/MapMultibindingValidator.java
+++ b/java/dagger/internal/codegen/MapMultibindingValidator.java
@@ -18,7 +18,6 @@
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.Multimaps.filterKeys;
-import static dagger.internal.codegen.DaggerStreams.instancesOf;
 import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
 import static dagger.internal.codegen.DaggerStreams.toImmutableSetMultimap;
 import static dagger.internal.codegen.Formatter.INDENT;
@@ -124,8 +123,8 @@ public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticR
   private ImmutableSet<ContributionBinding> mapBindingContributions(
       dagger.model.Binding binding, BindingGraph bindingGraph) {
     checkArgument(binding.kind().equals(MULTIBOUND_MAP));
-    return bindingGraph.network().successors(binding).stream()
-        .flatMap(instancesOf(BindingNode.class))
+    return bindingGraph.requestedBindings(binding).stream()
+        .map(b -> (BindingNode) b)
         .map(b -> (ContributionBinding) b.delegate())
         .collect(toImmutableSet());
   }
diff --git a/java/dagger/model/BUILD b/java/dagger/model/BUILD
index a2c91a0e7..f91b9141d 100644
--- a/java/dagger/model/BUILD
+++ b/java/dagger/model/BUILD
@@ -39,7 +39,7 @@ java_library(
     javacopts = DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
     deps = [
         "//java/dagger:core",
-        "//java/dagger/internal/codegen:shared-with-spi",
+        "//java/dagger/internal/codegen:jdk-and-guava-extras",
         "//java/dagger/producers",
         "@google_bazel_common//third_party/java/auto:common",
         "@google_bazel_common//third_party/java/auto:value",
diff --git a/java/dagger/model/BindingGraph.java b/java/dagger/model/BindingGraph.java
index 865509c6e..d5bc78755 100644
--- a/java/dagger/model/BindingGraph.java
+++ b/java/dagger/model/BindingGraph.java
@@ -198,6 +198,37 @@ public final ComponentNode rootComponentNode() {
     return entryPointEdges;
   }
 
+  /** Returns the bindings that directly request a given binding as a dependency. */
+  public final ImmutableSet<Binding> requestingBindings(MaybeBinding binding) {
+    return network().predecessors(binding).stream()
+        .flatMap(instancesOf(Binding.class))
+        .collect(toImmutableSet());
+  }
+
+  /**
+   * Returns the bindings that a given binding directly request as a dependency. Does not include
+   * any {@link MissingBinding}s.
+   *
+   * @see #requestedMaybeMissingBindings(Binding)
+   */
+  public final ImmutableSet<Binding> requestedBindings(Binding binding) {
+    return network().successors(binding).stream()
+        .flatMap(instancesOf(Binding.class))
+        .collect(toImmutableSet());
+  }
+
+  /**
+   * Returns the bindings or missing bindings that a given binding directly requests as a
+   * dependency.
+   *
+   * @see #requestedBindings(Binding)
+   */
+  public final ImmutableSet<MaybeBinding> requestedMaybeMissingBindings(Binding binding) {
+    return network().successors(binding).stream()
+        .flatMap(instancesOf(MaybeBinding.class))
+        .collect(toImmutableSet());
+  }
+
   // TODO(dpb): Make public. Cache.
   private ImmutableNetwork<Node, DependencyEdge> dependencyGraph() {
     MutableNetwork<Node, DependencyEdge> dependencyGraph =
diff --git a/java/dagger/model/testing/BUILD b/java/dagger/model/testing/BUILD
index 4e8b62d53..f76145c58 100644
--- a/java/dagger/model/testing/BUILD
+++ b/java/dagger/model/testing/BUILD
@@ -29,7 +29,7 @@ java_library(
     srcs = glob(["*.java"]),
     javacopts = DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
     deps = [
-        "//java/dagger/internal/codegen:shared-with-spi",
+        "//java/dagger/internal/codegen:jdk-and-guava-extras",
         "//java/dagger/model",
         "@google_bazel_common//third_party/java/auto:value",
         "@google_bazel_common//third_party/java/checker_framework:annotations",
diff --git a/java/dagger/model/testing/BindingGraphSubject.java b/java/dagger/model/testing/BindingGraphSubject.java
index a10e3a32c..f251eb5e2 100644
--- a/java/dagger/model/testing/BindingGraphSubject.java
+++ b/java/dagger/model/testing/BindingGraphSubject.java
@@ -137,9 +137,7 @@ public void dependsOnBindingWithKey(String qualifier, String type) {
     }
 
     private void dependsOnBindingWithKeyString(String keyString) {
-      if (actualBindingGraph().network().successors(actual()).stream()
-          .filter(node -> node instanceof Binding)
-          .map(node -> (Binding) node)
+      if (actualBindingGraph().requestedBindings(actual()).stream()
           .noneMatch(binding -> binding.key().toString().equals(keyString))) {
         fail("depends on binding with key", keyString);
       }
