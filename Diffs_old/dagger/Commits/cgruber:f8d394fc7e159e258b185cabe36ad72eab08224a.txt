diff --git a/java/dagger/internal/codegen/CompilerOptions.java b/java/dagger/internal/codegen/CompilerOptions.java
index 8ff16cbb5..44d926184 100644
--- a/java/dagger/internal/codegen/CompilerOptions.java
+++ b/java/dagger/internal/codegen/CompilerOptions.java
@@ -32,6 +32,22 @@
 @AutoValue
 abstract class CompilerOptions {
   abstract boolean usesProducers();
+
+  /**
+   * Returns true if the experimental Android mode is enabled.
+   *
+   * <p><b>Warning: Do Not use! This flag is for internal, experimental use only!</b>
+   *
+   * <p> Issues related to this flag will not be supported. This flag could break your build, cause
+   * memory leaks in your app, or cause other unknown issues at runtime.
+   *
+   * <p>If enabled, the generated code will attempt to more aggressively inline creation logic for
+   * bindings inside of the component rather than in a separate factory class. Enabling this flag
+   * should reduced the class loading and the number of eagerly initialized fields, at the cost of
+   * potential memory leaks and higher per-provision instantiation time. Due to very slow
+   * classloading on Android, these trade-offs are potentially advantageous.
+   */
+  abstract boolean experimentalAndroidMode();
   abstract boolean writeProducerNameInToken();
   abstract Diagnostic.Kind nullableValidationKind();
 
@@ -52,6 +68,8 @@ static Builder builder() {
   static CompilerOptions create(ProcessingEnvironment processingEnv, Elements elements) {
     return builder()
         .usesProducers(elements.getTypeElement(Produces.class.getCanonicalName()) != null)
+        .experimentalAndroidMode(experimentalAndroidMode(processingEnv)
+            .equals(FeatureStatus.ENABLED))
         .writeProducerNameInToken(
             writeProducerNameInToken(processingEnv).equals(FeatureStatus.ENABLED))
         .nullableValidationKind(nullableValidationType(processingEnv).diagnosticKind().get())
@@ -71,6 +89,7 @@ static CompilerOptions create(ProcessingEnvironment processingEnv, Elements elem
   @AutoValue.Builder
   interface Builder {
     Builder usesProducers(boolean usesProduces);
+    Builder experimentalAndroidMode(boolean experimentalAndroidMode);
     Builder writeProducerNameInToken(boolean writeProducerNameInToken);
     Builder nullableValidationKind(Diagnostic.Kind kind);
     Builder privateMemberValidationKind(Diagnostic.Kind kind);
@@ -83,6 +102,8 @@ Builder warnIfInjectionFactoryNotGeneratedUpstream(
     CompilerOptions build();
   }
 
+  static final String EXPERIMENTAL_ANDROID_MODE = "dagger.experimentalAndroidMode";
+
   static final String WRITE_PRODUCER_NAME_IN_TOKEN_KEY = "dagger.writeProducerNameInToken";
 
   static final String DISABLE_INTER_COMPONENT_SCOPE_VALIDATION_KEY =
@@ -107,14 +128,24 @@ Builder warnIfInjectionFactoryNotGeneratedUpstream(
   static final String IGNORE_PRIVATE_AND_STATIC_INJECTION_FOR_COMPONENT =
       "dagger.ignorePrivateAndStaticInjectionForComponent";
 
-  static final ImmutableSet<String> SUPPORTED_OPTIONS = ImmutableSet.of(
-        WRITE_PRODUCER_NAME_IN_TOKEN_KEY,
-        DISABLE_INTER_COMPONENT_SCOPE_VALIDATION_KEY,
-        NULLABLE_VALIDATION_KEY,
-        PRIVATE_MEMBER_VALIDATION_TYPE_KEY,
-        STATIC_MEMBER_VALIDATION_TYPE_KEY,
-        WARN_IF_INJECTION_FACTORY_NOT_GENERATED_UPSTREAM_KEY,
-        IGNORE_PRIVATE_AND_STATIC_INJECTION_FOR_COMPONENT);
+  static final ImmutableSet<String> SUPPORTED_OPTIONS =
+      ImmutableSet.of(
+          EXPERIMENTAL_ANDROID_MODE,
+          WRITE_PRODUCER_NAME_IN_TOKEN_KEY,
+          DISABLE_INTER_COMPONENT_SCOPE_VALIDATION_KEY,
+          NULLABLE_VALIDATION_KEY,
+          PRIVATE_MEMBER_VALIDATION_TYPE_KEY,
+          STATIC_MEMBER_VALIDATION_TYPE_KEY,
+          WARN_IF_INJECTION_FACTORY_NOT_GENERATED_UPSTREAM_KEY,
+          IGNORE_PRIVATE_AND_STATIC_INJECTION_FOR_COMPONENT);
+
+  private static FeatureStatus experimentalAndroidMode(ProcessingEnvironment processingEnv) {
+    return valueOf(
+        processingEnv,
+        EXPERIMENTAL_ANDROID_MODE,
+        FeatureStatus.DISABLED,
+        EnumSet.allOf(FeatureStatus.class));
+  }
 
   private static FeatureStatus writeProducerNameInToken(ProcessingEnvironment processingEnv) {
     return valueOf(
diff --git a/javatests/dagger/internal/codegen/BUILD b/javatests/dagger/internal/codegen/BUILD
index 0fa9a8b1e..824d0749e 100644
--- a/javatests/dagger/internal/codegen/BUILD
+++ b/javatests/dagger/internal/codegen/BUILD
@@ -23,6 +23,7 @@ load("//:test_defs.bzl", "GenJavaTests")
 GenJavaTests(
     name = "compiler_tests",
     srcs = glob(["*.java"]),
+    functional = False,
     javacopts = DOCLINT_HTML_AND_SYNTAX,
     deps = [
         "//java/dagger:core",
diff --git a/test_defs.bzl b/test_defs.bzl
index 4c86d3543..5bffec20f 100644
--- a/test_defs.bzl
+++ b/test_defs.bzl
@@ -12,11 +12,17 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+# Defines a set of build variants and the list of extra javacopts to build with.
+# The key will be appended to the generated test names to ensure uniqueness.
+BUILD_VARIANTS = {
+    "_ExperimentalAndroidMode": ["-Adagger.experimentalAndroidMode=enabled"]
+}
+
+# TODO(user): split into two functions for functional vs non-functional tests?
 def GenJavaTests(name, srcs, deps, test_only_deps=None, plugins=None, javacopts=None,
-                 lib_javacopts=None, test_javacopts=None):
-  _GenTests(native.java_library, native.java_test, name, srcs, deps, test_only_deps=test_only_deps,
-            plugins=plugins, javacopts=javacopts, lib_javacopts=lib_javacopts,
-            test_javacopts=test_javacopts)
+                 lib_javacopts=None, test_javacopts=None, functional=True):
+  _GenTests(native.java_library, native.java_test, name, srcs, deps, test_only_deps,
+            plugins, javacopts, lib_javacopts, test_javacopts, functional)
 
 def GenRobolectricTests(name, srcs, deps, test_only_deps=None, plugins=None, javacopts=None,
                         lib_javacopts=None, test_javacopts=None):
@@ -24,7 +30,20 @@ def GenRobolectricTests(name, srcs, deps, test_only_deps=None, plugins=None, jav
   pass
 
 def _GenTests(library_rule_type, test_rule_type, name, srcs, deps, test_only_deps=None,
-              plugins=None, javacopts=None, lib_javacopts=None, test_javacopts=None):
+              plugins=None, javacopts=None, lib_javacopts=None, test_javacopts=None,
+              functional=True):
+  _gen_tests(library_rule_type, test_rule_type, name, srcs, deps, test_only_deps,
+             plugins, javacopts, lib_javacopts, test_javacopts)
+
+  if functional:
+    for (suffix, extra_javacopts) in BUILD_VARIANTS.items():
+      _gen_tests(library_rule_type, test_rule_type, name, srcs, deps, test_only_deps,
+                 plugins, javacopts, lib_javacopts, test_javacopts, suffix, extra_javacopts)
+
+
+def _gen_tests(library_rule_type, test_rule_type, name, srcs, deps, test_only_deps,
+               plugins, javacopts, lib_javacopts, test_javacopts, suffix="",
+               extra_javacopts=None):
   test_files = []
   supporting_files = []
   for src in srcs:
@@ -36,16 +55,19 @@ def _GenTests(library_rule_type, test_rule_type, name, srcs, deps, test_only_dep
   if not test_only_deps:
     test_only_deps = []
 
+  if not extra_javacopts:
+    extra_javacopts = []
+
   test_deps = test_only_deps + deps
-  if len(supporting_files) > 0:
-    supporting_files_name = name + "_lib"
+  if supporting_files:
+    supporting_files_name = name + suffix + "_lib"
     test_deps.append(":" + supporting_files_name)
     library_rule_type(
         name = supporting_files_name,
         deps = deps,
         srcs = supporting_files,
         plugins = plugins,
-        javacopts = (javacopts or []) + (lib_javacopts or []),
+        javacopts = extra_javacopts + (javacopts or []) + (lib_javacopts or []),
         testonly = 1,
     )
 
@@ -56,10 +78,10 @@ def _GenTests(library_rule_type, test_rule_type, name, srcs, deps, test_only_dep
       prefix_path = "javatests/"
     test_class = (PACKAGE_NAME + "/" + test_name).rpartition(prefix_path)[2].replace("/",".")
     test_rule_type(
-        name = test_name,
+        name = test_name + suffix,
         deps = test_deps,
         srcs = [test_file],
         plugins = plugins,
-        javacopts = (javacopts or []) + (test_javacopts or []),
+        javacopts = extra_javacopts + (javacopts or []) + (test_javacopts or []),
         test_class = test_class,
     )
