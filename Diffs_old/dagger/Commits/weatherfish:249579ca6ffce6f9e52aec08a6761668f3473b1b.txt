diff --git a/.travis.yml b/.travis.yml
index e7626a7f5..621d4eac7 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -36,12 +36,7 @@ before_install:
   - export PATH=$M2_HOME/bin:$PATH
   - mvn --version
 
-install:
-  - mvn -B -P!standard-with-extra-repos -U install clean --fail-never --quiet -DskipTests=true -Dinvoker.skip=true
-
-script:
-  - bazel test --test_output errors //...
-  - mvn -B -P!standard-with-extra-repos -U verify --fail-at-end -Dsource.skip=true -Dmaven.javadoc.skip=true
+script: bazel test --test_output errors //...
 
 env:
   global:
@@ -61,4 +56,4 @@ branches:
 
 cache:
   directories:
-    - $HOME/.m2
+    - $HOME/.cache/bazel
diff --git a/README.md b/README.md
index e918767a0..7ec8bcc10 100644
--- a/README.md
+++ b/README.md
@@ -155,11 +155,10 @@ the GitHub project's master branch.
     See the License for the specific language governing permissions and
     limitations under the License.
 
-
 [20api]: http://google.github.io/dagger/api/2.0/
 [community]: https://plus.google.com/communities/111933036769103367883
 [dagger-snap]: https://oss.sonatype.org/content/repositories/snapshots/com/google/dagger/
-[databinding]: https://developer.android.com/topic/libraries/data-binding/index.html
+[databinding]: https://developer.android.com/topic/libraries/data-binding/
 [gaktalk]: https://www.youtube.com/watch?v=oK_XtfXPkqw
 [latestapi]: http://google.github.io/dagger/api/latest/
 [mavenbadge-svg]: https://maven-badges.herokuapp.com/maven-central/com.google.dagger/dagger/badge.svg
diff --git a/compiler/pom.xml b/compiler/pom.xml
deleted file mode 100644
index 1a7ab7df3..000000000
--- a/compiler/pom.xml
+++ /dev/null
@@ -1,224 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
- Copyright (C) 2012 The Dagger Authors.
-
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.google.dagger</groupId>
-    <artifactId>dagger-parent</artifactId>
-    <version>HEAD-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>dagger-compiler</artifactId>
-  <name>Dagger Compiler</name>
-  <description>
-    Tools to generate Dagger injection and module adapters from annotated code and validate them.
-  </description>
-
-  <dependencies>
-    <dependency>
-      <groupId>${project.groupId}</groupId>
-      <artifactId>dagger</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>${project.groupId}</groupId>
-      <artifactId>dagger-producers</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>com.google.auto</groupId>
-      <artifactId>auto-common</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>com.google.errorprone</groupId>
-      <artifactId>error_prone_annotations</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>com.google.guava</groupId>
-      <artifactId>guava</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>com.google.code.findbugs</groupId>
-      <artifactId>jsr305</artifactId>
-      <optional>true</optional>
-    </dependency>
-    <dependency>
-      <groupId>com.google.googlejavaformat</groupId>
-      <artifactId>google-java-format</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>com.google.auto.service</groupId>
-      <artifactId>auto-service</artifactId>
-      <scope>provided</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.auto.value</groupId>
-      <artifactId>auto-value</artifactId>
-      <scope>provided</scope>
-    </dependency>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>${project.groupId}</groupId>
-      <artifactId>dagger</artifactId>
-      <classifier>tests</classifier>
-      <version>${project.version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.testing.compile</groupId>
-      <artifactId>compile-testing</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.guava</groupId>
-      <artifactId>guava-testlib</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.squareup</groupId>
-      <artifactId>javapoet</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>org.mockito</groupId>
-      <artifactId>mockito-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.truth</groupId>
-      <artifactId>truth</artifactId>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <configuration>
-          <source>1.8</source>
-          <target>1.8</target>
-          <compilerArgument>-Xlint:all</compilerArgument>
-          <showWarnings>true</showWarnings>
-          <showDeprecation>true</showDeprecation>
-        </configuration>
-        <executions>
-          <execution>
-            <id>default-compile</id>
-            <goals><goal>compile</goal></goals>
-            <configuration>
-              <annotationProcessors>
-                <annotationProcessor>com.google.auto.value.processor.AutoValueProcessor</annotationProcessor>
-                <annotationProcessor>com.google.auto.service.processor.AutoServiceProcessor</annotationProcessor>
-              </annotationProcessors>
-            </configuration>
-          </execution>
-          <execution>
-            <id>default-test-compile</id>
-            <goals><goal>testCompile</goal></goals>
-            <configuration>
-              <annotationProcessors>
-                <annotationProcessor>dagger.internal.codegen.ComponentProcessor</annotationProcessor>
-              </annotationProcessors>
-            </configuration>
-          </execution>
-        </executions>
-      </plugin>
-      <plugin>
-        <artifactId>maven-invoker-plugin</artifactId>
-        <configuration>
-          <addTestClassPath>true</addTestClassPath>
-          <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>
-          <cloneClean>true</cloneClean>
-          <profiles>
-            <profile>!sonatype-oss-release</profile>
-          </profiles>
-          <pomIncludes>
-            <pomInclude>*/pom.xml</pomInclude>
-          </pomIncludes>
-          <localRepositoryPath>${project.build.directory}/it-repo</localRepositoryPath>
-          <streamLogs>true</streamLogs>
-        </configuration>
-        <executions>
-          <execution>
-            <id>integration-test</id>
-            <goals>
-              <goal>install</goal>
-              <goal>run</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-shade-plugin</artifactId>
-        <version>2.4.3</version>
-        <executions>
-          <execution>
-            <phase>package</phase>
-            <goals>
-              <goal>shade</goal>
-            </goals>
-            <configuration>
-              <minimizeJar>true</minimizeJar>
-              <artifactSet>
-                <excludes>
-                  <!-- guava which has a consistent API and whose public types we vend in producers -->
-                  <exclude>com.google.guava</exclude>
-                  <!-- annotation processors dagger uses to be built, not to operate -->
-                  <exclude>com.google.auto.service</exclude>
-                  <exclude>com.google.auto.value</exclude>
-                  <!-- projects should depend on api projects directly -->
-                  <exclude>com.google.dagger:dagger</exclude>
-                  <exclude>com.google.dagger:dagger-producers</exclude>
-                  <exclude>javax.inject</exclude>
-                </excludes>
-              </artifactSet>
-              <relocations>
-                <relocation>
-                  <pattern>com.google.auto.common</pattern>
-                  <shadedPattern>dagger.shaded.auto.common</shadedPattern>
-                </relocation>
-              </relocations>
-              <filters>
-                <filter>
-                  <artifact>*:*</artifact>
-                  <excludes>
-                    <exclude>META-INF/*.SF</exclude>
-                    <exclude>META-INF/*.DSA</exclude>
-                    <exclude>META-INF/*.RSA</exclude>
-                  </excludes>
-                </filter>
-                <!-- https://github.com/google/google-java-format/issues/114 -->
-                <filter>
-                  <artifact>com.google.errorprone:javac</artifact>
-                  <includes>
-                    <include>**</include>
-                  </includes>
-                </filter>
-              </filters>
-            </configuration>
-          </execution>
-        </executions>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/compiler/src/it/functional-tests/pom.xml b/compiler/src/it/functional-tests/pom.xml
deleted file mode 100644
index 9bf20565a..000000000
--- a/compiler/src/it/functional-tests/pom.xml
+++ /dev/null
@@ -1,85 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-Copyright (C) 2014 The Dagger Authors.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
--->
-<project
-    xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>com.google.dagger</groupId>
-    <artifactId>dagger-parent</artifactId>
-    <version>HEAD-SNAPSHOT</version>
-  </parent>
-  <groupId>dagger.tests</groupId>
-  <artifactId>functional-tests</artifactId>
-  <name>Functional Tests</name>
-  <dependencies>
-    <dependency>
-      <groupId>com.google.dagger</groupId>
-      <artifactId>dagger</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>com.google.dagger</groupId>
-      <artifactId>dagger-compiler</artifactId>
-      <version>${project.version}</version>
-      <optional>true</optional>
-    </dependency>
-    <dependency>
-      <groupId>javax.inject</groupId>
-      <artifactId>javax.inject-tck</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>com.google.auto.value</groupId>
-      <artifactId>auto-value</artifactId>
-      <scope>provided</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.auto.factory</groupId>
-      <artifactId>auto-factory</artifactId>
-      <scope>provided</scope>
-    </dependency>
-
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.truth</groupId>
-      <artifactId>truth</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.guava</groupId>
-      <artifactId>guava-testlib</artifactId>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-  <build>
-    <plugins>
-      <plugin>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>3.1</version>
-        <configuration>
-          <source>1.7</source>
-          <target>1.7</target>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ReleasableReferencesComponents.java b/compiler/src/it/functional-tests/src/main/java/test/ReleasableReferencesComponents.java
index 84b1bb1e4..597b91fdf 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/ReleasableReferencesComponents.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/ReleasableReferencesComponents.java
@@ -19,6 +19,7 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 import static test.ReleasableReferencesComponents.Thing.thing;
 
+import com.google.auto.value.AutoValue;
 import dagger.Component;
 import dagger.Module;
 import dagger.Provides;
@@ -82,10 +83,7 @@
     Child child();
   }
 
-  // TODO(ronshapiro): investigate the maven-compiler-plugin bug that is blocking javac from
-  // recognizing @AutoValue when it is imported instead of fully-qualified
-  // http://bugs.java.com/view_bug.do?bug_id=7101822
-  @com.google.auto.value.AutoValue
+  @AutoValue
   abstract static class Thing {
     abstract int count();
 
diff --git a/compiler/src/it/guava-functional-tests/pom.xml b/compiler/src/it/guava-functional-tests/pom.xml
deleted file mode 100644
index 6bf0fc074..000000000
--- a/compiler/src/it/guava-functional-tests/pom.xml
+++ /dev/null
@@ -1,76 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-Copyright (C) 2016 The Dagger Authors.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
--->
-<project
-    xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>com.google.dagger</groupId>
-    <artifactId>dagger-parent</artifactId>
-    <version>HEAD-SNAPSHOT</version>
-  </parent>
-  <groupId>dagger.tests</groupId>
-  <artifactId>guava-functional-tests</artifactId>
-  <name>Guava Functional Tests</name>
-  <dependencies>
-    <dependency>
-      <groupId>com.google.dagger</groupId>
-      <artifactId>dagger</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>com.google.dagger</groupId>
-      <artifactId>dagger-compiler</artifactId>
-      <version>${project.version}</version>
-      <optional>true</optional>
-    </dependency>
-    <dependency>
-      <groupId>com.google.auto.value</groupId>
-      <artifactId>auto-value</artifactId>
-      <scope>provided</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.auto.factory</groupId>
-      <artifactId>auto-factory</artifactId>
-      <scope>provided</scope>
-    </dependency>
-
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.truth</groupId>
-      <artifactId>truth</artifactId>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-  <build>
-    <plugins>
-      <plugin>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>3.1</version>
-        <configuration>
-          <source>1.7</source>
-          <target>1.7</target>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/compiler/src/it/producers-functional-tests/pom.xml b/compiler/src/it/producers-functional-tests/pom.xml
deleted file mode 100644
index 0bf75f6a7..000000000
--- a/compiler/src/it/producers-functional-tests/pom.xml
+++ /dev/null
@@ -1,84 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-Copyright (C) 2014 The Dagger Authors.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
--->
-<project
-    xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>com.google.dagger</groupId>
-    <artifactId>dagger-parent</artifactId>
-    <version>HEAD-SNAPSHOT</version>
-  </parent>
-  <groupId>dagger.tests</groupId>
-  <artifactId>producers-functional-tests</artifactId>
-  <name>Producers Functional Tests</name>
-  <dependencies>
-    <dependency>
-      <groupId>com.google.guava</groupId>
-      <artifactId>guava</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>com.google.dagger</groupId>
-      <artifactId>dagger</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>com.google.dagger</groupId>
-      <artifactId>dagger-producers</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>com.google.dagger</groupId>
-      <artifactId>dagger-compiler</artifactId>
-      <version>${project.version}</version>
-      <optional>true</optional>
-    </dependency>
-    <dependency>
-      <groupId>com.google.auto.value</groupId>
-      <artifactId>auto-value</artifactId>
-      <scope>provided</scope>
-    </dependency>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.truth</groupId>
-      <artifactId>truth</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.mockito</groupId>
-      <artifactId>mockito-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-  <build>
-    <plugins>
-      <plugin>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>3.1</version>
-        <configuration>
-          <source>1.7</source>
-          <target>1.7</target>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/compiler/src/it/tck/pom.xml b/compiler/src/it/tck/pom.xml
deleted file mode 100644
index 0bc1b455f..000000000
--- a/compiler/src/it/tck/pom.xml
+++ /dev/null
@@ -1,70 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-Copyright (C) 2014 The Dagger Authors.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
--->
-<project
-    xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>com.google.dagger</groupId>
-    <artifactId>dagger-parent</artifactId>
-    <version>HEAD-SNAPSHOT</version>
-  </parent>
-  <groupId>dagger.tests</groupId>
-  <artifactId>tck</artifactId>
-  <name>TCK</name>
-  <dependencies>
-    <dependency>
-      <groupId>com.google.dagger</groupId>
-      <artifactId>dagger</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>com.google.dagger</groupId>
-      <artifactId>dagger-compiler</artifactId>
-      <version>${project.version}</version>
-      <optional>true</optional>
-    </dependency>
-    <dependency>
-      <groupId>javax.inject</groupId>
-      <artifactId>javax.inject-tck</artifactId>
-    </dependency>
-
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-  <build>
-    <plugins>
-      <plugin>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>3.1</version>
-        <configuration>
-          <source>1.7</source>
-          <target>1.7</target>
-          <compilerArgs>
-            <arg>-Adagger.privateMemberValidation=warning</arg>
-            <arg>-Adagger.staticMemberValidation=warning</arg>
-            <arg>-Adagger.ignorePrivateAndStaticInjectionForComponent=enabled</arg>
-          </compilerArgs>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index 795a5e185..7ff49b5b8 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -71,6 +71,7 @@
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PUBLIC;
+import static javax.lang.model.element.Modifier.STATIC;
 import static javax.lang.model.type.TypeKind.DECLARED;
 import static javax.lang.model.type.TypeKind.VOID;
 
@@ -1106,9 +1107,9 @@ private CodeBlock initializeFactoryForContributionBinding(ContributionBinding bi
         {
           TypeElement dependencyType = dependencyTypeForBinding(binding);
           String dependencyVariable = simpleVariableName(dependencyType);
+          String componentMethod = binding.bindingElement().get().getSimpleName().toString();
           CodeBlock callFactoryMethod =
-              CodeBlock.of(
-                  "$L.$L()", dependencyVariable, binding.bindingElement().get().getSimpleName());
+              CodeBlock.of("$L.$L()", dependencyVariable, componentMethod);
           // TODO(sameb): This throws a very vague NPE right now.  The stack trace doesn't
           // help to figure out what the method or return type is.  If we include a string
           // of the return type or method name in the error message, that can defeat obfuscation.
@@ -1124,26 +1125,36 @@ private CodeBlock initializeFactoryForContributionBinding(ContributionBinding bi
                       Preconditions.class,
                       callFactoryMethod,
                       CANNOT_RETURN_NULL_FROM_NON_NULLABLE_COMPONENT_METHOD);
+          ClassName dependencyClassName = ClassName.get(dependencyType);
+          String factoryName =
+              dependencyClassName.toString().replaceAll("\\.", "_") + "_" + componentMethod;
+          MethodSpec.Builder getMethod =
+              methodBuilder("get")
+                  .addAnnotation(Override.class)
+                  .addModifiers(PUBLIC)
+                  .returns(bindingKeyTypeName)
+                  .addCode(getMethodBody);
+          if (binding.nullableType().isPresent()) {
+            getMethod.addAnnotation(
+                ClassName.get(MoreTypes.asTypeElement(binding.nullableType().get())));
+          }
+          component.addType(
+              TypeSpec.classBuilder(factoryName)
+                  .addSuperinterface(providerOf(bindingKeyTypeName))
+                  .addModifiers(PRIVATE, STATIC)
+                  .addField(dependencyClassName, dependencyVariable, PRIVATE, FINAL)
+                  .addMethod(
+                      constructorBuilder()
+                          .addParameter(dependencyClassName, dependencyVariable)
+                          .addStatement("this.$1L = $1L", dependencyVariable)
+                          .build())
+                  .addMethod(getMethod.build())
+                  .build());
           return CodeBlock.of(
-              Joiner.on('\n')
-                  .join(
-                      "new $1L<$2T>() {",
-                      "  private final $5T $6L = $3L;",
-                      "  $4L@Override public $2T get() {",
-                      "    $7L",
-                      "  }",
-                      "}"),
-              // TODO(ronshapiro): Until we remove Factory, fully qualify the import so it doesn't
-              // conflict with anyone that has Factory as an inner type of a component (like
-              // AndroidInjector.Factory
-              /* 1 */ "dagger.internal.Factory",
-              /* 2 */ bindingKeyTypeName,
-              /* 3 */ getComponentContributionExpression(
-                  ComponentRequirement.forDependency(dependencyType.asType())),
-              /* 4 */ nullableAnnotation(binding.nullableType()),
-              /* 5 */ TypeName.get(dependencyType.asType()),
-              /* 6 */ dependencyVariable,
-              /* 7 */ getMethodBody);
+              "new $L($L)",
+              factoryName,
+              getComponentContributionExpression(
+                  ComponentRequirement.forDependency(dependencyType.asType())));
         }
 
       case SUBCOMPONENT_BUILDER:
@@ -1282,12 +1293,6 @@ private CodeBlock decorateForScope(CodeBlock factoryCreate, Scope scope) {
     }
   }
 
-  private CodeBlock nullableAnnotation(Optional<DeclaredType> nullableType) {
-    return nullableType.isPresent()
-        ? CodeBlock.of("@$T ", TypeName.get(nullableType.get()))
-        : CodeBlock.of("");
-  }
-
   private CodeBlock initializeMembersInjectorForBinding(MembersInjectionBinding binding) {
     return binding.injectionSites().isEmpty()
         ? CodeBlock.of("$T.noOp()", MEMBERS_INJECTORS)
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentRequirement.java b/compiler/src/main/java/dagger/internal/codegen/ComponentRequirement.java
index 428deef86..d281c93f8 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentRequirement.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentRequirement.java
@@ -93,7 +93,7 @@ NullPolicy nullPolicy(Elements elements, Types types) {
       case MODULE:
         return componentCanMakeNewInstances(typeElement())
             ? NullPolicy.NEW
-            : requiresAPassedInstance(elements, types, typeElement())
+            : requiresAPassedInstance(elements, types, this)
                 ? NullPolicy.THROW
                 : NullPolicy.ALLOW;
       case BINDING:
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
index 577362213..a4101eb90 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
@@ -191,6 +191,6 @@ protected void addFactoryMethods() {
   private boolean canInstantiateAllRequirements() {
     return !Iterables.any(
         graph.componentRequirements(),
-        dependency -> requiresAPassedInstance(elements, types, dependency.typeElement()));
+        dependency -> requiresAPassedInstance(elements, types, dependency));
   }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/OptionalFactories.java b/compiler/src/main/java/dagger/internal/codegen/OptionalFactories.java
index 864e620f5..4d608f8c7 100644
--- a/compiler/src/main/java/dagger/internal/codegen/OptionalFactories.java
+++ b/compiler/src/main/java/dagger/internal/codegen/OptionalFactories.java
@@ -36,6 +36,7 @@
 import com.google.common.base.Function;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
+import com.google.common.util.concurrent.MoreExecutors;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.FieldSpec;
@@ -53,6 +54,7 @@
 import java.util.Comparator;
 import java.util.Map;
 import java.util.TreeMap;
+import java.util.concurrent.Executor;
 import javax.inject.Provider;
 
 /** The nested class and static methods required by the component to implement optional bindings. */
@@ -324,15 +326,16 @@ private TypeSpec presentOptionalFactoryClass(PresentFactorySpec spec) {
   }
 
   /**
-   * An expression that uses {@link Futures#transform(ListenableFuture, Function)} to transform a
-   * {@code ListenableFuture<inputType>} into a {@code ListenableFuture<Optional<inputType>>}.
+   * An expression that uses {@link Futures#transform(ListenableFuture, Function, Executor)} to
+   * transform a {@code ListenableFuture<inputType>} into a {@code
+   * ListenableFuture<Optional<inputType>>}.
    *
    * @param inputFuture an expression of type {@code ListenableFuture<inputType>}
    */
   private static CodeBlock transformFutureToOptional(
       OptionalKind optionalKind, TypeName inputType, CodeBlock inputFuture) {
     return CodeBlock.of(
-        "$T.transform($L, $L)",
+        "$T.transform($L, $L, $T.directExecutor())",
         Futures.class,
         inputFuture,
         anonymousClassBuilder("")
@@ -347,7 +350,8 @@ private static CodeBlock transformFutureToOptional(
                     .addParameter(inputType, "input")
                     .addCode("return $L;", optionalKind.presentExpression(CodeBlock.of("input")))
                     .build())
-            .build());
+            .build(),
+        MoreExecutors.class);
   }
 
   /**
diff --git a/compiler/src/main/java/dagger/internal/codegen/Util.java b/compiler/src/main/java/dagger/internal/codegen/Util.java
index 0c6046e37..84407a753 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Util.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Util.java
@@ -43,10 +43,17 @@
  */
 final class Util {
   /**
-   * Returns true if the passed {@link TypeElement} requires a passed instance in order to be used
-   * within a component.
+   * Returns true if the passed {@link ComponentRequirement} requires a passed instance in order
+   * to be used within a component.
    */
-  static boolean requiresAPassedInstance(Elements elements, Types types, TypeElement typeElement) {
+  static boolean requiresAPassedInstance(
+      Elements elements, Types types, ComponentRequirement componentRequirement) {
+    if (componentRequirement.kind() == ComponentRequirement.Kind.BINDING) {
+      // A user has explicitly defined in their component builder they will provide an instance.
+      return true;
+    }
+
+    TypeElement typeElement = componentRequirement.typeElement();
     ImmutableSet<ExecutableElement> methods =
         getLocalAndInheritedMethods(typeElement, types, elements);
     boolean foundInstanceMethod = false;
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
index f5af32957..e241dcc26 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
@@ -420,6 +420,88 @@ public void testBuilderMissingBuildMethodFails() {
         .in(componentFile);
   }
 
+  @Test
+  public void testBuilderBindsInstanceNoCreateGenerated() {
+    JavaFileObject componentFile =
+        JavaFileObjects.forSourceLines(
+            "test.SimpleComponent",
+            "package test;",
+            "",
+            "import dagger.BindsInstance;",
+            "import dagger.Component;",
+            "import javax.inject.Provider;",
+            "",
+            "@Component",
+            "interface SimpleComponent {",
+            "  Object object();",
+            "",
+            "  @Component.Builder",
+            "  interface Builder {",
+            "    @BindsInstance Builder object(Object object);",
+            "    SimpleComponent build();",
+            "  }",
+            "}");
+
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerSimpleComponent",
+            "package test;",
+            "",
+            "import dagger.internal.InstanceFactory;",
+            "import dagger.internal.Preconditions;",
+            "import javax.annotation.Generated;",
+            "import javax.inject.Provider;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerSimpleComponent implements SimpleComponent {",
+            "  private Provider<Object> objectProvider;",
+            "",
+            "  private DaggerSimpleComponent(Builder builder) {",
+            "    assert builder != null;",
+            "    initialize(builder);",
+            "  }",
+            "",
+            "  public static SimpleComponent.Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  @SuppressWarnings(\"unchecked\")",
+            "  private void initialize(final Builder builder) {",
+            "    this.objectProvider = InstanceFactory.create(builder.object);",
+            "  }",
+            "",
+            "  @Override",
+            "  public Object object() {",
+            "    return objectProvider.get();",
+            "  }",
+            "",
+            "  private static final class Builder implements SimpleComponent.Builder {",
+            "    private Object object;",
+            "",
+            "    @Override",
+            "    public SimpleComponent build() {",
+            "      if (object == null) {",
+            "        throw new IllegalStateException(",
+            "            Object.class.getCanonicalName() + \" must be set\")",
+            "      }",
+            "      return new DaggerSimpleComponent(this);",
+            "    }",
+            "",
+            "    @Override",
+            "    public Builder object(Object object) {",
+            "      this.object = Preconditions.checkNotNull(object);",
+            "      return this;",
+            "    }",
+            "  }",
+            "}");
+    assertAbout(javaSource())
+        .that(componentFile)
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(generatedComponent);
+  }
+
   @Test
   public void testPrivateBuilderFails() {
     JavaFileObject componentFile =
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index 74e1b9e57..cd4dba515 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -1685,12 +1685,7 @@ public void testDefaultPackage() {
             "",
             "  @SuppressWarnings(\"unchecked\")",
             "  private void initialize(final Builder builder) {",
-            "    this.aProvider = new dagger.internal.Factory<A>() {",
-            "      private final AComponent aComponent = builder.aComponent;",
-            "      @Override public A get() {",
-            "        return Preconditions.checkNotNull(aComponent.a(), " + NPE_LITERAL + ");",
-            "      }",
-            "    };",
+            "    this.aProvider = new test_AComponent_a(builder.aComponent);",
             "    this.bProvider = B_Factory.create(aProvider);",
             "  }",
             "",
@@ -1718,6 +1713,19 @@ public void testDefaultPackage() {
             "      return this;",
             "    }",
             "  }",
+            "",
+            "  private static class test_AComponent_a implements Provider<A> {",
+            "    private final AComponent aComponent;",
+            "    ",
+            "    test_AComponent_a(AComponent aComponent) {",
+            "        this.aComponent = aComponent;",
+            "    }",
+            "    ",
+            "    @Override()",
+            "    public A get() {",
+            "      return Preconditions.checkNotNull(aComponent.a(), " + NPE_LITERAL + ");",
+            "    }",
+            "  }",
             "}");
     Compilation compilation =
         daggerCompiler().compile(aFile, bFile, aComponentFile, bComponentFile);
diff --git a/core/pom.xml b/core/pom.xml
deleted file mode 100644
index 4641a5f5c..000000000
--- a/core/pom.xml
+++ /dev/null
@@ -1,132 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
- Copyright (C) 2012 The Dagger Authors.
-
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.google.dagger</groupId>
-    <artifactId>dagger-parent</artifactId>
-    <version>HEAD-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>dagger</artifactId>
-  <name>Dagger</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>javax.inject</groupId>
-      <artifactId>javax.inject</artifactId>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.guava</groupId>
-      <artifactId>guava</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.truth</groupId>
-      <artifactId>truth</artifactId>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <configuration>
-          <compilerArgument>-Xlint:all</compilerArgument>
-          <showWarnings>true</showWarnings>
-          <showDeprecation>true</showDeprecation>
-        </configuration>
-        <executions>
-          <execution>
-            <id>default-compile</id>
-            <goals>
-              <goal>compile</goal>
-            </goals>
-            <configuration>
-              <source>1.7</source>
-              <target>1.7</target>
-            </configuration>
-          </execution>
-          <execution>
-            <id>default-testCompile</id>
-            <goals>
-              <goal>testCompile</goal>
-            </goals>
-            <configuration>
-              <source>1.8</source>
-              <target>1.8</target>
-            </configuration>
-          </execution>
-        </executions>
-      </plugin>
-      <plugin>
-        <groupId>org.codehaus.mojo</groupId>
-        <artifactId>animal-sniffer-maven-plugin</artifactId>
-        <version>1.8</version><!-- 1.9+ requires JDK7 on the build machine -->
-        <executions>
-          <execution>
-            <id>sniff-api</id>
-            <goals><goal>check</goal></goals>
-          </execution>
-        </executions>
-        <configuration>
-          <signature>
-            <groupId>org.codehaus.mojo.signature</groupId>
-            <artifactId>java16</artifactId>
-            <version>1.0</version>
-          </signature>
-        </configuration>
-      </plugin>
-      <plugin>
-        <artifactId>maven-javadoc-plugin</artifactId>
-        <configuration>
-          <excludePackageNames>dagger.internal:dagger.internal.*</excludePackageNames>
-        </configuration>
-      </plugin>
-      <plugin>
-        <artifactId>maven-source-plugin</artifactId>
-        <executions>
-          <execution>
-            <id>attach-sources</id>
-            <phase>generate-resources</phase>
-            <goals>
-              <goal>jar-no-fork</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-      <plugin>
-        <artifactId>maven-jar-plugin</artifactId>
-        <executions>
-          <execution>
-            <goals>
-              <goal>test-jar</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/core/src/main/java/dagger/multibindings/Multibinds.java b/core/src/main/java/dagger/multibindings/Multibinds.java
index 4ce886c5a..5f5adccee 100644
--- a/core/src/main/java/dagger/multibindings/Multibinds.java
+++ b/core/src/main/java/dagger/multibindings/Multibinds.java
@@ -47,7 +47,7 @@
  *   }</code></pre>
  *
  * <p>A given set or map multibinding can be declared any number of times without error. Dagger
- * never implements calls any {@code @Multibinds} methods.
+ * never implements or calls any {@code @Multibinds} methods.
  *
  * @see <a href="http://google.github.io/dagger/multibindings">Multibindings</a>
  */
diff --git a/gwt/pom.xml b/gwt/pom.xml
deleted file mode 100644
index a182efe64..000000000
--- a/gwt/pom.xml
+++ /dev/null
@@ -1,49 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
- Copyright (C) 2015 The Dagger Authors.
-
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.google.dagger</groupId>
-    <artifactId>dagger-parent</artifactId>
-    <version>HEAD-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>dagger-gwt</artifactId>
-  <name>Dagger GWT integration</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>${project.groupId}</groupId>
-      <artifactId>dagger</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>${project.groupId}</groupId>
-      <artifactId>dagger</artifactId>
-      <classifier>sources</classifier>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>javax.inject</groupId>
-      <artifactId>javax.inject</artifactId>
-      <classifier>sources</classifier>
-    </dependency>
-  </dependencies>
-</project>
diff --git a/java/dagger/android/AndroidInjection.java b/java/dagger/android/AndroidInjection.java
index 2a6554565..990bd9208 100644
--- a/java/dagger/android/AndroidInjection.java
+++ b/java/dagger/android/AndroidInjection.java
@@ -21,6 +21,9 @@
 import android.app.Activity;
 import android.app.Application;
 import android.app.Fragment;
+import android.app.Service;
+import android.content.BroadcastReceiver;
+import android.content.Context;
 import android.util.Log;
 import dagger.internal.Beta;
 
@@ -34,8 +37,8 @@
    * found, otherwise throws an {@link IllegalArgumentException}.
    *
    * @throws RuntimeException if the {@link Application} doesn't implement {@link
-   *     HasDispatchingActivityInjector}, or if no {@code AndroidInjector.Factory<Activity, ?>} is
-   *     bound for {@code activity}.
+   *     HasDispatchingActivityInjector}, or if no {@code AndroidInjector.Factory<? extends
+   *     Activity>} is bound for {@code activity}.
    */
   public static void inject(Activity activity) {
     checkNotNull(activity, "activity");
@@ -77,8 +80,8 @@ public static void inject(Activity activity) {
    * If none of them implement {@link HasDispatchingFragmentInjector}, a {@link
    * IllegalArgumentException} is thrown.
    *
-   * @throws IllegalArgumentException if no {@code AndroidInjector.Factory<Fragment, ?>} is bound
-   *     for {@code fragment}.
+   * @throws IllegalArgumentException if no {@code AndroidInjector.Factory<? extends Fragment>} is
+   *     bound for {@code fragment}.
    */
   public static void inject(Fragment fragment) {
     checkNotNull(fragment, "fragment");
@@ -119,5 +122,65 @@ private static HasDispatchingFragmentInjector findHasFragmentInjector(Fragment f
         String.format("No injector was found for %s", fragment.getClass().getCanonicalName()));
   }
 
+  /**
+   * Injects {@code service} if an associated {@link AndroidInjector.Factory} implementation can be
+   * found, otherwise throws an {@link IllegalArgumentException}.
+   *
+   * @throws RuntimeException if the {@link Application} doesn't implement {@link
+   *     HasDispatchingServiceInjector}, or if no {@code AndroidInjector.Factory<? extends Service>}
+   *     is bound for {@code service}.
+   */
+  public static void inject(Service service) {
+    checkNotNull(service, "service");
+    Application application = service.getApplication();
+    if (!(application instanceof HasDispatchingServiceInjector)) {
+      throw new RuntimeException(
+          String.format(
+              "%s does not implement %s",
+              application.getClass().getCanonicalName(),
+              HasDispatchingServiceInjector.class.getCanonicalName()));
+    }
+
+    DispatchingAndroidInjector<Service> serviceInjector =
+        ((HasDispatchingServiceInjector) application).serviceInjector();
+    checkNotNull(
+        serviceInjector,
+        "%s.serviceInjector() returned null",
+        application.getClass().getCanonicalName());
+
+    serviceInjector.inject(service);
+  }
+
+  /**
+   * Injects {@code broadcastReceiver} if an associated {@link AndroidInjector.Factory}
+   * implementation can be found, otherwise throws an {@link IllegalArgumentException}.
+   *
+   * @throws RuntimeException if the {@link Application} from {@link
+   *     Context#getApplicationContext()} doesn't implement {@link
+   *     HasDispatchingBroadcastReceiverInjector}, or if no {@code AndroidInjector.Factory<? extends
+   *     BroadcastReceiver>} is bound for {@code broadcastReceiver}.
+   */
+  public static void inject(BroadcastReceiver broadcastReceiver, Context context) {
+    checkNotNull(broadcastReceiver, "broadcastReceiver");
+    checkNotNull(context, "context");
+    Application application = (Application) context.getApplicationContext();
+    if (!(application instanceof HasDispatchingBroadcastReceiverInjector)) {
+      throw new RuntimeException(
+          String.format(
+              "%s does not implement %s",
+              application.getClass().getCanonicalName(),
+              HasDispatchingBroadcastReceiverInjector.class.getCanonicalName()));
+    }
+
+    DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector =
+        ((HasDispatchingBroadcastReceiverInjector) application).broadcastReceiverInjector();
+    checkNotNull(
+        broadcastReceiverInjector,
+        "%s.broadcastReceiverInjector() returned null",
+        application.getClass().getCanonicalName());
+
+    broadcastReceiverInjector.inject(broadcastReceiver);
+  }
+
   private AndroidInjection() {}
 }
diff --git a/java/dagger/android/AndroidInjectionModule.java b/java/dagger/android/AndroidInjectionModule.java
index 3910a0421..9fc359a6e 100644
--- a/java/dagger/android/AndroidInjectionModule.java
+++ b/java/dagger/android/AndroidInjectionModule.java
@@ -18,6 +18,8 @@
 
 import android.app.Activity;
 import android.app.Fragment;
+import android.app.Service;
+import android.content.BroadcastReceiver;
 import dagger.Module;
 import dagger.internal.Beta;
 import dagger.multibindings.Multibinds;
@@ -39,5 +41,14 @@
   abstract Map<Class<? extends Fragment>, AndroidInjector.Factory<? extends Fragment>>
       fragmentInjectorFactories();
 
+  @Multibinds
+  abstract Map<Class<? extends Service>, AndroidInjector.Factory<? extends Service>>
+      serviceInjectorFactories();
+
+  @Multibinds
+  abstract Map<
+          Class<? extends BroadcastReceiver>, AndroidInjector.Factory<? extends BroadcastReceiver>>
+      broadcastReceiverInjectorFactories();
+
   private AndroidInjectionModule() {}
 }
diff --git a/java/dagger/android/AndroidInjector.java b/java/dagger/android/AndroidInjector.java
index 3e05de68a..260ecd231 100644
--- a/java/dagger/android/AndroidInjector.java
+++ b/java/dagger/android/AndroidInjector.java
@@ -21,8 +21,8 @@
 
 /**
  * Performs members-injection for a concrete subtype of a <a
- * href="https://developer.android.com/guide/components/index.html">core Android type</a> (e.g.,
- * {@link android.app.Activity} or {@link android.app.Fragment}).
+ * href="https://developer.android.com/guide/components/">core Android type</a> (e.g., {@link
+ * android.app.Activity} or {@link android.app.Fragment}).
  *
  * <p>Commonly implemented by {@link dagger.Subcomponent}-annotated types whose {@link
  * dagger.Subcomponent.Builder} extends {@link Builder}.
diff --git a/java/dagger/android/BUILD b/java/dagger/android/BUILD
index 8752b5ba9..195bc8e6e 100644
--- a/java/dagger/android/BUILD
+++ b/java/dagger/android/BUILD
@@ -38,6 +38,8 @@ android_library(
     deps = [
         "//:dagger_with_compiler",
         "//third_party:auto_value",
+        "//third_party:error_prone_annotations",
+        "//third_party:jsr305_annotations",
         "@androidsdk//com.android.support:support-annotations-25.0.0",
     ],
 )
diff --git a/java/dagger/android/BroadcastReceiverKey.java b/java/dagger/android/BroadcastReceiverKey.java
new file mode 100644
index 000000000..942577ac1
--- /dev/null
+++ b/java/dagger/android/BroadcastReceiverKey.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android;
+
+import static java.lang.annotation.ElementType.METHOD;
+
+import android.content.BroadcastReceiver;
+import dagger.MapKey;
+import dagger.internal.Beta;
+import java.lang.annotation.Target;
+
+/** {@link MapKey} annotation to key bindings by a type of a {@link BroadcastReceiver}. */
+@Beta
+@MapKey
+@Target(METHOD)
+public @interface BroadcastReceiverKey {
+  Class<? extends BroadcastReceiver> value();
+}
diff --git a/java/dagger/android/DaggerBroadcastReceiver.java b/java/dagger/android/DaggerBroadcastReceiver.java
new file mode 100644
index 000000000..601c5a31e
--- /dev/null
+++ b/java/dagger/android/DaggerBroadcastReceiver.java
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.support.annotation.CallSuper;
+
+/**
+ * A {@link BroadcastReceiver} that injects its members in the first call to {@link
+ * #onReceive(Context, Intent)}.
+ *
+ * <p>This class should only be used for {@link BroadcastReceiver}s that are declared in an {@code
+ * AndroidManifest.xml}. If, instead, the {@link BroadcastReceiver} is created in code, prefer
+ * constructor injection.
+ *
+ * <p>Note: this class is <em>not thread safe</em> and should not be used with multiple {@link
+ * android.os.Handler}s in calls to {@link Context#registerReceiver(BroadcastReceiver,
+ * android.content.IntentFilter, String, android.os.Handler)}. Injection is performed on each
+ * invocation to {@link #onReceive(Context, Intent)} which could result in inconsistent views of
+ * injected dependencies across threads.
+ *
+ * <p>Subclasses should override {@link #onReceive(Context, Intent)} and call {@code
+ * super.onReceive(context, intent)} immediately to ensure injection is performed immediately.
+ */
+public abstract class DaggerBroadcastReceiver extends BroadcastReceiver {
+  @CallSuper
+  @Override
+  public void onReceive(Context context, Intent intent) {
+    AndroidInjection.inject(this, context);
+  }
+}
diff --git a/java/dagger/android/DaggerIntentService.java b/java/dagger/android/DaggerIntentService.java
new file mode 100644
index 000000000..865d18948
--- /dev/null
+++ b/java/dagger/android/DaggerIntentService.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android;
+
+import android.app.IntentService;
+
+/** An {@link IntentService} that injects its members in {@link #onCreate()}. */
+public abstract class DaggerIntentService extends IntentService {
+  public DaggerIntentService(String name) {
+    super(name);
+  }
+
+  @Override
+  public void onCreate() {
+    AndroidInjection.inject(this);
+    super.onCreate();
+  }
+}
diff --git a/java/dagger/android/DaggerService.java b/java/dagger/android/DaggerService.java
new file mode 100644
index 000000000..8b37c1b76
--- /dev/null
+++ b/java/dagger/android/DaggerService.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android;
+
+import android.app.Service;
+
+/** A {@link Service} that injects its members in {@link #onCreate()}. */
+public abstract class DaggerService extends Service {
+  @Override
+  public void onCreate() {
+    AndroidInjection.inject(this);
+    super.onCreate();
+  }
+}
diff --git a/java/dagger/android/DispatchingAndroidInjector.java b/java/dagger/android/DispatchingAndroidInjector.java
index b22f6ecd4..277b83b9e 100644
--- a/java/dagger/android/DispatchingAndroidInjector.java
+++ b/java/dagger/android/DispatchingAndroidInjector.java
@@ -20,6 +20,7 @@
 
 import android.app.Activity;
 import android.app.Fragment;
+import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import dagger.internal.Beta;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -62,6 +63,7 @@
    * @throws InvalidInjectorBindingException if the injector factory bound for a class does not
    *     inject instances of that class
    */
+  @CanIgnoreReturnValue
   public boolean maybeInject(T instance) {
     Provider<AndroidInjector.Factory<? extends T>> factoryProvider =
         injectorFactories.get(instance.getClass());
diff --git a/java/dagger/android/HasDispatchingBroadcastReceiverInjector.java b/java/dagger/android/HasDispatchingBroadcastReceiverInjector.java
new file mode 100644
index 000000000..aa21d3e10
--- /dev/null
+++ b/java/dagger/android/HasDispatchingBroadcastReceiverInjector.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android;
+
+import android.content.BroadcastReceiver;
+import dagger.internal.Beta;
+
+/** Provides a {@link DispatchingAndroidInjector} of {@link BroadcastReceiver}s. */
+@Beta
+public interface HasDispatchingBroadcastReceiverInjector {
+
+  /** Returns a {@link DispatchingAndroidInjector} of {@link BroadcastReceiver}s. */
+  DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector();
+}
diff --git a/java/dagger/android/HasDispatchingServiceInjector.java b/java/dagger/android/HasDispatchingServiceInjector.java
new file mode 100644
index 000000000..b25dd77bf
--- /dev/null
+++ b/java/dagger/android/HasDispatchingServiceInjector.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android;
+
+import android.app.Service;
+import dagger.internal.Beta;
+
+/** Provides a {@link DispatchingAndroidInjector} of {@link Service}s. */
+@Beta
+public interface HasDispatchingServiceInjector {
+
+  /** Returns a {@link DispatchingAndroidInjector} of {@link Service}s. */
+  DispatchingAndroidInjector<Service> serviceInjector();
+}
diff --git a/java/dagger/android/ServiceKey.java b/java/dagger/android/ServiceKey.java
new file mode 100644
index 000000000..1461a98e5
--- /dev/null
+++ b/java/dagger/android/ServiceKey.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android;
+
+import static java.lang.annotation.ElementType.METHOD;
+
+import android.app.Service;
+import dagger.MapKey;
+import dagger.internal.Beta;
+import java.lang.annotation.Target;
+
+/** {@link MapKey} annotation to key bindings by a type of a {@link Service}. */
+@Beta
+@MapKey
+@Target(METHOD)
+public @interface ServiceKey {
+  Class<? extends Service> value();
+}
diff --git a/java/dagger/android/package-info.java b/java/dagger/android/package-info.java
new file mode 100644
index 000000000..085c5ee87
--- /dev/null
+++ b/java/dagger/android/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+@CheckReturnValue
+package dagger.android;
+
+/**
+ * APIs to assist with using Dagger on Android devices. It includes common code to perform injection
+ * as well as Android-specific extensions to {@link dagger.releasablereferences}.
+ */
+import javax.annotation.CheckReturnValue;
diff --git a/java/dagger/android/processor/AndroidMapKeyValidator.java b/java/dagger/android/processor/AndroidMapKeyValidator.java
index 4b8240ff8..eedc504c0 100644
--- a/java/dagger/android/processor/AndroidMapKeyValidator.java
+++ b/java/dagger/android/processor/AndroidMapKeyValidator.java
@@ -21,58 +21,91 @@
 import static com.google.auto.common.MoreElements.getAnnotationMirror;
 import static com.google.auto.common.MoreElements.isAnnotationPresent;
 import static com.google.common.collect.Iterables.getOnlyElement;
+import static java.util.stream.Collectors.toMap;
+import static javax.lang.model.util.ElementFilter.methodsIn;
 
 import com.google.auto.common.BasicAnnotationProcessor.ProcessingStep;
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
-import com.google.common.collect.ImmutableBiMap;
+import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.SetMultimap;
 import dagger.Binds;
-import dagger.android.ActivityKey;
+import dagger.MapKey;
 import dagger.android.AndroidInjector;
-import dagger.android.FragmentKey;
 import java.lang.annotation.Annotation;
+import java.util.List;
 import java.util.Set;
+import java.util.stream.Stream;
 import javax.annotation.processing.Messager;
 import javax.inject.Qualifier;
+import javax.inject.Scope;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
+import javax.lang.model.type.WildcardType;
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 import javax.tools.Diagnostic.Kind;
 
 /**
- * Validates the correctness of {@link ActivityKey}, {@link FragmentKey} and {@link
- * dagger.android.support.FragmentKey} methods.
+ * Validates the correctness of {@link dagger.MapKey}s in {@code dagger.android} and {@code
+ * dagger.android.support} methods.
  */
 final class AndroidMapKeyValidator implements ProcessingStep {
-
-  private static final ImmutableBiMap<Class<? extends Annotation>, String>
-      ANNOTATIONS_AND_FRAMEWORK_TYPES =
-          ImmutableBiMap.of(
-              ActivityKey.class, "android.app.Activity",
-              FragmentKey.class, "android.app.Fragment",
-              dagger.android.support.FragmentKey.class, "android.support.v4.app.Fragment");
   private static final String LINK_TO_DOCS = "google.github.io/dagger/android";
 
   private final Elements elements;
   private final Types types;
   private final Messager messager;
+  private final ImmutableMap<Class<? extends Annotation>, TypeMirror> annotationsAndFrameworkTypes;
 
   AndroidMapKeyValidator(Elements elements, Types types, Messager messager) {
     this.elements = elements;
     this.types = types;
     this.messager = messager;
+    this.annotationsAndFrameworkTypes = annotationsAndFrameworkTypes(elements);
+  }
+
+  private ImmutableMap<Class<? extends Annotation>, TypeMirror> annotationsAndFrameworkTypes(
+      Elements elements) {
+    return ImmutableMap.copyOf(
+        Stream.of(
+                elements.getPackageElement("dagger.android"),
+                elements.getPackageElement("dagger.android.support"))
+            .filter(element -> element != null)
+            .flatMap(element -> element.getEnclosedElements().stream())
+            .filter(element -> isAnnotationPresent(element, MapKey.class))
+            .filter(element -> element.getAnnotation(MapKey.class).unwrapValue())
+            .flatMap(AndroidMapKeyValidator::classForAnnotationElement)
+            .collect(toMap(key -> key, key -> mapKeyValue(key, elements))));
+  }
+
+  @SuppressWarnings("unchecked")
+  private static Stream<Class<? extends Annotation>> classForAnnotationElement(Element element) {
+    try {
+      return Stream.of((Class<? extends Annotation>)
+          Class.forName(MoreElements.asType(element).getQualifiedName().toString()));
+    } catch (ClassNotFoundException e) {
+      return Stream.of();
+    }
+  }
+
+  private static TypeMirror mapKeyValue(Class<? extends Annotation> annotation, Elements elements) {
+    List<ExecutableElement> mapKeyMethods =
+        methodsIn(elements.getTypeElement(annotation.getCanonicalName()).getEnclosedElements());
+    TypeMirror returnType = getOnlyElement(mapKeyMethods).getReturnType();
+    // TODO(ronshapiro): replace with MoreTypes.asWildcard() when auto-common 0.9 is released
+    return ((WildcardType) getOnlyElement(MoreTypes.asDeclared(returnType).getTypeArguments()))
+        .getExtendsBound();
   }
 
   @Override
   public Set<? extends Class<? extends Annotation>> annotations() {
-    return ANNOTATIONS_AND_FRAMEWORK_TYPES.keySet();
+    return annotationsAndFrameworkTypes.keySet();
   }
 
   @Override
@@ -94,8 +127,23 @@ private void validateMethod(Class<? extends Annotation> annotation, ExecutableEl
       return;
     }
 
-    DeclaredType intendedReturnType =
-        injectorFactoryOf(types.getWildcardType(androidTypeForMapKey(annotation), null));
+    TypeMirror frameworkType = annotationsAndFrameworkTypes.get(annotation);
+
+    if (!getAnnotatedAnnotations(method, Scope.class).isEmpty()) {
+      SuppressWarnings suppressedWarnings = method.getAnnotation(SuppressWarnings.class);
+      if (suppressedWarnings == null
+          || !ImmutableSet.copyOf(suppressedWarnings.value())
+              .contains("dagger.android.ScopedInjectorFactory")) {
+        messager.printMessage(
+            Kind.ERROR,
+            String.format(
+                "%s bindings should not be scoped. Scoping this method may leak instances of %s. ",
+                AndroidInjector.Factory.class.getCanonicalName(), frameworkType),
+            method);
+      }
+    }
+
+    DeclaredType intendedReturnType = injectorFactoryOf(types.getWildcardType(frameworkType, null));
     if (!MoreTypes.equivalence().equivalent(returnType, intendedReturnType)) {
       messager.printMessage(
           Kind.ERROR,
@@ -140,11 +188,6 @@ private void validateMapKeyMatchesBindsParameter(
     }
   }
 
-  private DeclaredType androidTypeForMapKey(Class<? extends Annotation> annotation) {
-    return types.getDeclaredType(
-        elements.getTypeElement(ANNOTATIONS_AND_FRAMEWORK_TYPES.get(annotation)));
-  }
-
   /** Returns a {@link DeclaredType} for {@code AndroidInjector.Factory<implementationType>}. */
   private DeclaredType injectorFactoryOf(TypeMirror implementationType) {
     return types.getDeclaredType(factoryElement(), implementationType);
diff --git a/java/dagger/android/support/BUILD b/java/dagger/android/support/BUILD
index 143b1fde6..d6a7405be 100644
--- a/java/dagger/android/support/BUILD
+++ b/java/dagger/android/support/BUILD
@@ -32,6 +32,7 @@ android_library(
     deps = [
         "//:dagger_with_compiler",
         "//java/dagger/android",
+        "//third_party:jsr305_annotations",
         "@androidsdk//com.android.support:appcompat-v7-25.0.0",
         "@androidsdk//com.android.support:support-annotations-25.0.0",
         "@androidsdk//com.android.support:support-v4-25.0.0",
diff --git a/java/dagger/android/support/package-info.java b/java/dagger/android/support/package-info.java
new file mode 100644
index 000000000..f1f82e9a2
--- /dev/null
+++ b/java/dagger/android/support/package-info.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+@CheckReturnValue
+package dagger.android.support;
+
+/**
+ * Additions to the APIs in {@link dagger.android} for use with the <a
+ * href="https://developer.android.com/topic/libraries/support-library">Android support
+ * libraries</a>.
+ */
+import javax.annotation.CheckReturnValue;
diff --git a/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java b/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
index 2813ccce5..f595e3a74 100644
--- a/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
+++ b/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
@@ -18,6 +18,8 @@
 
 import android.app.Activity;
 import android.app.Application;
+import android.app.Service;
+import android.content.BroadcastReceiver;
 import android.support.v4.app.Fragment;
 import dagger.Binds;
 import dagger.Component;
@@ -26,17 +28,28 @@
 import dagger.Subcomponent;
 import dagger.android.ActivityKey;
 import dagger.android.AndroidInjector;
+import dagger.android.BroadcastReceiverKey;
 import dagger.android.DispatchingAndroidInjector;
 import dagger.android.HasDispatchingActivityInjector;
+import dagger.android.HasDispatchingBroadcastReceiverInjector;
+import dagger.android.HasDispatchingServiceInjector;
+import dagger.android.ServiceKey;
 import dagger.android.support.AndroidSupportInjectionModule;
 import dagger.android.support.FragmentKey;
+import dagger.android.support.functional.AllControllersAreDirectChildrenOfApplication.ApplicationComponent.BroadcastReceiverSubcomponent.BroadcastReceiverModule;
+import dagger.android.support.functional.AllControllersAreDirectChildrenOfApplication.ApplicationComponent.IntentServiceSubcomponent.IntentServiceModule;
+import dagger.android.support.functional.AllControllersAreDirectChildrenOfApplication.ApplicationComponent.ServiceSubcomponent.ServiceModule;
 import dagger.multibindings.IntoMap;
 import dagger.multibindings.IntoSet;
 import javax.inject.Inject;
 
 public final class AllControllersAreDirectChildrenOfApplication extends Application
-    implements HasDispatchingActivityInjector {
+    implements HasDispatchingActivityInjector,
+        HasDispatchingServiceInjector,
+        HasDispatchingBroadcastReceiverInjector {
   @Inject DispatchingAndroidInjector<Activity> activityInjector;
+  @Inject DispatchingAndroidInjector<Service> serviceInjector;
+  @Inject DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector;
 
   @Override
   public void onCreate() {
@@ -49,6 +62,16 @@ public void onCreate() {
     return activityInjector;
   }
 
+  @Override
+  public DispatchingAndroidInjector<Service> serviceInjector() {
+    return serviceInjector;
+  }
+
+  @Override
+  public DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector() {
+    return broadcastReceiverInjector;
+  }
+
   @Component(
     modules = {ApplicationComponent.ApplicationModule.class, AndroidSupportInjectionModule.class}
   )
@@ -59,7 +82,10 @@ public void onCreate() {
       subcomponents = {
         ActivitySubcomponent.class,
         ParentFragmentSubcomponent.class,
-        ChildFragmentSubcomponent.class
+        ChildFragmentSubcomponent.class,
+        ServiceSubcomponent.class,
+        IntentServiceSubcomponent.class,
+        BroadcastReceiverSubcomponent.class,
       }
     )
     abstract class ApplicationModule {
@@ -86,6 +112,24 @@ public void onCreate() {
       @FragmentKey(TestChildFragment.class)
       abstract AndroidInjector.Factory<? extends Fragment> bindFactoryForChildFragment(
           ChildFragmentSubcomponent.Builder builder);
+
+      @Binds
+      @IntoMap
+      @ServiceKey(TestService.class)
+      abstract AndroidInjector.Factory<? extends Service> bindFactoryForService(
+          ServiceSubcomponent.Builder b);
+
+      @Binds
+      @IntoMap
+      @ServiceKey(TestIntentService.class)
+      abstract AndroidInjector.Factory<? extends Service> bindFactoryForIntentService(
+          IntentServiceSubcomponent.Builder b);
+
+      @Binds
+      @IntoMap
+      @BroadcastReceiverKey(TestBroadcastReceiver.class)
+      abstract AndroidInjector.Factory<? extends BroadcastReceiver> bindFactoryForBroadcastReceiver(
+          BroadcastReceiverSubcomponent.Builder b);
     }
 
     @Subcomponent(modules = ActivitySubcomponent.ActivityModule.class)
@@ -132,5 +176,50 @@ public void onCreate() {
       @Subcomponent.Builder
       abstract class Builder extends AndroidInjector.Builder<TestChildFragment> {}
     }
+
+    @Subcomponent(modules = ServiceModule.class)
+    interface ServiceSubcomponent extends AndroidInjector<TestService> {
+      @Subcomponent.Builder
+      abstract class Builder extends AndroidInjector.Builder<TestService> {}
+
+      @Module
+      abstract class ServiceModule {
+        @Provides
+        @IntoSet
+        static Class<?> addToComponentHierarchy() {
+          return ServiceSubcomponent.class;
+        }
+      }
+    }
+
+    @Subcomponent(modules = IntentServiceModule.class)
+    interface IntentServiceSubcomponent extends AndroidInjector<TestIntentService> {
+      @Subcomponent.Builder
+      abstract class Builder extends AndroidInjector.Builder<TestIntentService> {}
+
+      @Module
+      abstract class IntentServiceModule {
+        @Provides
+        @IntoSet
+        static Class<?> addToComponentHierarchy() {
+          return IntentServiceSubcomponent.class;
+        }
+      }
+    }
+
+    @Subcomponent(modules = BroadcastReceiverModule.class)
+    interface BroadcastReceiverSubcomponent extends AndroidInjector<TestBroadcastReceiver> {
+      @Subcomponent.Builder
+      abstract class Builder extends AndroidInjector.Builder<TestBroadcastReceiver> {}
+
+      @Module
+      abstract class BroadcastReceiverModule {
+        @Provides
+        @IntoSet
+        static Class<?> addToComponentHierarchy() {
+          return BroadcastReceiverSubcomponent.class;
+        }
+      }
+    }
   }
 }
diff --git a/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java b/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
index 6b7c44bd4..705b9b3a6 100644
--- a/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
+++ b/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
@@ -18,6 +18,8 @@
 
 import android.app.Activity;
 import android.app.Application;
+import android.app.Service;
+import android.content.BroadcastReceiver;
 import android.support.v4.app.Fragment;
 import dagger.Binds;
 import dagger.Component;
@@ -26,17 +28,28 @@
 import dagger.Subcomponent;
 import dagger.android.ActivityKey;
 import dagger.android.AndroidInjector;
+import dagger.android.BroadcastReceiverKey;
 import dagger.android.DispatchingAndroidInjector;
 import dagger.android.HasDispatchingActivityInjector;
+import dagger.android.HasDispatchingBroadcastReceiverInjector;
+import dagger.android.HasDispatchingServiceInjector;
+import dagger.android.ServiceKey;
 import dagger.android.support.AndroidSupportInjectionModule;
 import dagger.android.support.FragmentKey;
+import dagger.android.support.functional.ComponentStructureFollowsControllerStructureApplication.ApplicationComponent.BroadcastReceiverSubcomponent.BroadcastReceiverModule;
+import dagger.android.support.functional.ComponentStructureFollowsControllerStructureApplication.ApplicationComponent.IntentServiceSubcomponent.IntentServiceModule;
+import dagger.android.support.functional.ComponentStructureFollowsControllerStructureApplication.ApplicationComponent.ServiceSubcomponent.ServiceModule;
 import dagger.multibindings.IntoMap;
 import dagger.multibindings.IntoSet;
 import javax.inject.Inject;
 
 public final class ComponentStructureFollowsControllerStructureApplication extends Application
-    implements HasDispatchingActivityInjector {
+    implements HasDispatchingActivityInjector,
+        HasDispatchingServiceInjector,
+        HasDispatchingBroadcastReceiverInjector {
   @Inject DispatchingAndroidInjector<Activity> activityInjector;
+  @Inject DispatchingAndroidInjector<Service> serviceInjector;
+  @Inject DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector;
 
   @Override
   public void onCreate() {
@@ -50,13 +63,30 @@ public void onCreate() {
     return activityInjector;
   }
 
+  @Override
+  public DispatchingAndroidInjector<Service> serviceInjector() {
+    return serviceInjector;
+  }
+
+  @Override
+  public DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector() {
+    return broadcastReceiverInjector;
+  }
+
   @Component(
-      modules = {ApplicationComponent.ApplicationModule.class, AndroidSupportInjectionModule.class}
+    modules = {ApplicationComponent.ApplicationModule.class, AndroidSupportInjectionModule.class}
   )
   interface ApplicationComponent {
     void inject(ComponentStructureFollowsControllerStructureApplication application);
 
-    @Module(subcomponents = ActivitySubcomponent.class)
+    @Module(
+      subcomponents = {
+        ActivitySubcomponent.class,
+        ServiceSubcomponent.class,
+        IntentServiceSubcomponent.class,
+        BroadcastReceiverSubcomponent.class,
+      }
+    )
     abstract class ApplicationModule {
       @Provides
       @IntoSet
@@ -69,6 +99,24 @@ public void onCreate() {
       @ActivityKey(TestActivity.class)
       abstract AndroidInjector.Factory<? extends Activity> bindFactoryForTestActivity(
           ActivitySubcomponent.Builder builder);
+
+      @Binds
+      @IntoMap
+      @ServiceKey(TestService.class)
+      abstract AndroidInjector.Factory<? extends Service> bindFactoryForService(
+          ServiceSubcomponent.Builder b);
+
+      @Binds
+      @IntoMap
+      @ServiceKey(TestIntentService.class)
+      abstract AndroidInjector.Factory<? extends Service> bindFactoryForIntentService(
+          IntentServiceSubcomponent.Builder b);
+
+      @Binds
+      @IntoMap
+      @BroadcastReceiverKey(TestBroadcastReceiver.class)
+      abstract AndroidInjector.Factory<? extends BroadcastReceiver> bindFactoryForBroadcastReceiver(
+          BroadcastReceiverSubcomponent.Builder b);
     }
 
     @Subcomponent(modules = ActivitySubcomponent.ActivityModule.class)
@@ -127,5 +175,50 @@ public void onCreate() {
         }
       }
     }
+
+    @Subcomponent(modules = ServiceModule.class)
+    interface ServiceSubcomponent extends AndroidInjector<TestService> {
+      @Subcomponent.Builder
+      abstract class Builder extends AndroidInjector.Builder<TestService> {}
+
+      @Module
+      abstract class ServiceModule {
+        @Provides
+        @IntoSet
+        static Class<?> addToComponentHierarchy() {
+          return ServiceSubcomponent.class;
+        }
+      }
+    }
+
+    @Subcomponent(modules = IntentServiceModule.class)
+    interface IntentServiceSubcomponent extends AndroidInjector<TestIntentService> {
+      @Subcomponent.Builder
+      abstract class Builder extends AndroidInjector.Builder<TestIntentService> {}
+
+      @Module
+      abstract class IntentServiceModule {
+        @Provides
+        @IntoSet
+        static Class<?> addToComponentHierarchy() {
+          return IntentServiceSubcomponent.class;
+        }
+      }
+    }
+
+    @Subcomponent(modules = BroadcastReceiverModule.class)
+    interface BroadcastReceiverSubcomponent extends AndroidInjector<TestBroadcastReceiver> {
+      @Subcomponent.Builder
+      abstract class Builder extends AndroidInjector.Builder<TestBroadcastReceiver> {}
+
+      @Module
+      abstract class BroadcastReceiverModule {
+        @Provides
+        @IntoSet
+        static Class<?> addToComponentHierarchy() {
+          return BroadcastReceiverSubcomponent.class;
+        }
+      }
+    }
   }
 }
diff --git a/javatests/dagger/android/support/functional/InjectorsTest.java b/javatests/dagger/android/support/functional/InjectorsTest.java
index cc1b0b4a7..bf3a85b73 100644
--- a/javatests/dagger/android/support/functional/InjectorsTest.java
+++ b/javatests/dagger/android/support/functional/InjectorsTest.java
@@ -18,12 +18,14 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
+import android.content.Intent;
 import android.content.res.Configuration;
 import org.robolectric.RobolectricTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.Config;
 
@@ -37,6 +39,9 @@
   private TestActivity activity;
   private TestParentFragment parentFragment;
   private TestChildFragment childFragment;
+  private TestService service;
+  private TestIntentService intentService;
+  private TestBroadcastReceiver broadcastReceiver;
 
   @Before
   public void setUp() {
@@ -48,6 +53,12 @@ public void setUp() {
     childFragment =
         (TestChildFragment)
             parentFragment.getChildFragmentManager().findFragmentByTag("child-fragment");
+
+    service = Robolectric.buildService(TestService.class).create().get();
+    intentService = Robolectric.buildIntentService(TestIntentService.class).create().get();
+
+    broadcastReceiver = new TestBroadcastReceiver();
+    broadcastReceiver.onReceive(RuntimeEnvironment.application, new Intent());
   }
 
   @Test
@@ -78,6 +89,23 @@ public void componentStructureFollowsControllerStructure() {
             ComponentStructureFollowsControllerStructureApplication.ApplicationComponent
                 .ActivitySubcomponent.ParentFragmentSubcomponent.ChildFragmentSubcomponent.class);
 
+    assertThat(service.componentHierarchy)
+        .containsExactly(
+            ComponentStructureFollowsControllerStructureApplication.ApplicationComponent.class,
+            ComponentStructureFollowsControllerStructureApplication.ApplicationComponent
+                .ServiceSubcomponent.class);
+    assertThat(intentService.componentHierarchy)
+        .containsExactly(
+            ComponentStructureFollowsControllerStructureApplication.ApplicationComponent.class,
+            ComponentStructureFollowsControllerStructureApplication.ApplicationComponent
+                .IntentServiceSubcomponent.class);
+
+    assertThat(broadcastReceiver.componentHierarchy)
+        .containsExactly(
+            ComponentStructureFollowsControllerStructureApplication.ApplicationComponent.class,
+            ComponentStructureFollowsControllerStructureApplication.ApplicationComponent
+                .BroadcastReceiverSubcomponent.class);
+
     changeConfiguration();
   }
 
@@ -100,6 +128,23 @@ public void AllControllersAreDirectChildrenOfApplication() {
             AllControllersAreDirectChildrenOfApplication.ApplicationComponent
                 .ChildFragmentSubcomponent.class);
 
+    assertThat(service.componentHierarchy)
+        .containsExactly(
+            AllControllersAreDirectChildrenOfApplication.ApplicationComponent.class,
+            AllControllersAreDirectChildrenOfApplication.ApplicationComponent
+                .ServiceSubcomponent.class);
+    assertThat(intentService.componentHierarchy)
+        .containsExactly(
+            AllControllersAreDirectChildrenOfApplication.ApplicationComponent.class,
+            AllControllersAreDirectChildrenOfApplication.ApplicationComponent
+                .IntentServiceSubcomponent.class);
+
+    assertThat(broadcastReceiver.componentHierarchy)
+        .containsExactly(
+            AllControllersAreDirectChildrenOfApplication.ApplicationComponent.class,
+            AllControllersAreDirectChildrenOfApplication.ApplicationComponent
+                .BroadcastReceiverSubcomponent.class);
+
     changeConfiguration();
   }
 
diff --git a/javatests/dagger/android/support/functional/TestBroadcastReceiver.java b/javatests/dagger/android/support/functional/TestBroadcastReceiver.java
new file mode 100644
index 000000000..edf93fef1
--- /dev/null
+++ b/javatests/dagger/android/support/functional/TestBroadcastReceiver.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android.support.functional;
+
+import dagger.android.DaggerBroadcastReceiver;
+import java.util.Set;
+import javax.inject.Inject;
+
+public final class TestBroadcastReceiver extends DaggerBroadcastReceiver {
+  @Inject Set<Class<?>> componentHierarchy;
+}
diff --git a/javatests/dagger/android/support/functional/TestIntentService.java b/javatests/dagger/android/support/functional/TestIntentService.java
new file mode 100644
index 000000000..dc301d493
--- /dev/null
+++ b/javatests/dagger/android/support/functional/TestIntentService.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android.support.functional;
+
+import android.content.Intent;
+import dagger.android.DaggerIntentService;
+import java.util.Set;
+import javax.inject.Inject;
+
+public final class TestIntentService extends DaggerIntentService {
+  @Inject Set<Class<?>> componentHierarchy;
+
+  public TestIntentService(String name) {
+    super(name);
+  }
+
+  @Override
+  protected void onHandleIntent(Intent intent) {}
+}
diff --git a/javatests/dagger/android/support/functional/TestService.java b/javatests/dagger/android/support/functional/TestService.java
new file mode 100644
index 000000000..d3c6dc1cc
--- /dev/null
+++ b/javatests/dagger/android/support/functional/TestService.java
@@ -0,0 +1,77 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android.support.functional;
+
+import android.content.Intent;
+import android.os.IBinder;
+import android.os.IInterface;
+import android.os.Parcel;
+import android.os.RemoteException;
+import dagger.android.DaggerService;
+import java.io.FileDescriptor;
+import java.util.Set;
+import javax.inject.Inject;
+
+public final class TestService extends DaggerService {
+  @Inject Set<Class<?>> componentHierarchy;
+
+  @Override
+  public IBinder onBind(Intent intent) {
+    return new MockBinder();
+  }
+
+  private static class MockBinder implements IBinder {
+    @Override
+    public String getInterfaceDescriptor() throws RemoteException {
+      return null;
+    }
+
+    @Override
+    public boolean pingBinder() {
+      return false;
+    }
+
+    @Override
+    public boolean isBinderAlive() {
+      return false;
+    }
+
+    @Override
+    public IInterface queryLocalInterface(String descriptor) {
+      return null;
+    }
+
+    @Override
+    public void dump(FileDescriptor fd, String[] args) throws RemoteException {}
+
+    @Override
+    public void dumpAsync(FileDescriptor fd, String[] args) throws RemoteException {}
+
+    @Override
+    public boolean transact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
+      return false;
+    }
+
+    @Override
+    public void linkToDeath(DeathRecipient recipient, int flags) throws RemoteException {}
+
+    @Override
+    public boolean unlinkToDeath(DeathRecipient recipient, int flags) {
+      return false;
+    }
+  }
+}
diff --git a/pom.xml b/pom.xml
deleted file mode 100644
index 8c7a198f3..000000000
--- a/pom.xml
+++ /dev/null
@@ -1,234 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Copyright (C) 2012 The Dagger Authors.
-
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>org.sonatype.oss</groupId>
-    <artifactId>oss-parent</artifactId>
-    <version>7</version>
-  </parent>
-
-  <groupId>com.google.dagger</groupId>
-  <artifactId>dagger-parent</artifactId>
-  <packaging>pom</packaging>
-  <version>HEAD-SNAPSHOT</version>
-  <name>Dagger (Parent)</name>
-  <description>A fast dependency injector for Android and Java.</description>
-  <url>https://github.com/google/dagger</url>
-
-  <modules>
-    <module>compiler</module>
-    <module>core</module>
-    <module>gwt</module>
-    <!-- examples are handled in a default profile (see below) -->
-    <module>producers</module>
-  </modules>
-
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    <android.support.version>24.2.0</android.support.version>
-    <android.latest.version>25</android.latest.version>
-  </properties>
-
-  <scm>
-    <url>http://github.com/google/dagger/</url>
-    <connection>scm:git:git://github.com/google/dagger.git</connection>
-    <developerConnection>scm:git:ssh://git@github.com/google/dagger.git</developerConnection>
-    <tag>HEAD</tag>
-  </scm>
-
-  <issueManagement>
-    <system>GitHub Issues</system>
-    <url>http://github.com/google/dagger/issues</url>
-  </issueManagement>
-
-  <licenses>
-    <license>
-      <name>Apache 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-    </license>
-  </licenses>
-
-  <organization>
-    <name>Google, Inc.</name>
-    <url>http://www.google.com</url>
-  </organization>
-
-  <dependencyManagement>
-    <dependencies>
-      <dependency>
-        <groupId>javax.inject</groupId>
-        <artifactId>javax.inject</artifactId>
-        <version>1</version>
-      </dependency>
-      <dependency>
-        <groupId>javax.inject</groupId>
-        <artifactId>javax.inject</artifactId>
-        <classifier>sources</classifier>
-        <version>1</version>
-      </dependency>
-      <dependency>
-        <groupId>javax.inject</groupId>
-        <artifactId>javax.inject-tck</artifactId>
-        <version>1</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.code.findbugs</groupId>
-        <artifactId>jsr305</artifactId>
-        <version>3.0.1</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.guava</groupId>
-        <artifactId>guava</artifactId>
-        <version>20.0-rc1</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.guava</groupId>
-        <artifactId>guava-testlib</artifactId>
-        <version>20.0-rc1</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.googlejavaformat</groupId>
-        <artifactId>google-java-format</artifactId>
-        <version>1.3</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.auto</groupId>
-        <artifactId>auto-common</artifactId>
-        <version>0.8</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.auto.factory</groupId>
-        <artifactId>auto-factory</artifactId>
-        <version>1.0-beta3</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.auto.service</groupId>
-        <artifactId>auto-service</artifactId>
-        <version>1.0-rc2</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.auto.value</groupId>
-        <artifactId>auto-value</artifactId>
-        <version>1.4-rc1</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.errorprone</groupId>
-        <artifactId>error_prone_annotations</artifactId>
-        <version>2.0.12</version>
-      </dependency>
-      <dependency>
-        <groupId>junit</groupId>
-        <artifactId>junit</artifactId>
-        <version>4.11</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.testing.compile</groupId>
-        <artifactId>compile-testing</artifactId>
-        <version>0.10</version>
-      </dependency>
-      <dependency>
-        <groupId>org.mockito</groupId>
-        <artifactId>mockito-core</artifactId>
-        <version>1.9.5</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.truth</groupId>
-        <artifactId>truth</artifactId>
-        <version>0.30</version>
-      </dependency>
-      <dependency>
-        <groupId>com.squareup</groupId>
-        <artifactId>javapoet</artifactId>
-        <version>1.7.0</version>
-      </dependency>
-    </dependencies>
-  </dependencyManagement>
-
-  <build>
-    <pluginManagement>
-      <plugins>
-        <plugin>
-          <artifactId>maven-invoker-plugin</artifactId>
-          <version>1.7</version>
-        </plugin>
-        <plugin>
-          <artifactId>maven-compiler-plugin</artifactId>
-          <version>3.1</version>
-        </plugin>
-        <plugin>
-          <artifactId>maven-jar-plugin</artifactId>
-          <version>2.5</version>
-        </plugin>
-      </plugins>
-    </pluginManagement>
-
-    <plugins>
-      <plugin>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <configuration>
-          <source>1.7</source>
-          <target>1.7</target>
-          <compilerArgument>-Xlint:all</compilerArgument>
-          <showWarnings>true</showWarnings>
-          <showDeprecation>true</showDeprecation>
-        </configuration>
-      </plugin>
-
-      <plugin>
-        <artifactId>maven-release-plugin</artifactId>
-        <version>2.3.2</version><!--$NO-MVN-MAN-VER$-->
-        <configuration>
-          <autoVersionSubmodules>true</autoVersionSubmodules>
-        </configuration>
-      </plugin>
-
-      <plugin>
-        <artifactId>maven-javadoc-plugin</artifactId>
-        <version>2.10.4</version>
-        <configuration>
-          <windowtitle>Dagger Dependency Injection ${project.version} API</windowtitle>
-          <doctitle>Dagger Dependency Injection ${project.version} API</doctitle>
-          <docfilessubdirs>true</docfilessubdirs>
-          <additionalparam>-Xdoclint:html,reference,syntax</additionalparam>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-
-  <!--
-    A profile which when switched off excludes example modules.  By default the profile
-    is on and invokes examples.  However, when processing javadocs, it is switched off
-    omitting the example code from the javadoc.
-  -->
-  <profiles>
-    <profile>
-      <id>examples</id>
-      <activation>
-        <activeByDefault>true</activeByDefault>
-      </activation>
-      <modules>
-        <module>core</module>
-        <module>compiler</module>
-        <module>gwt</module>
-        <module>examples</module>
-        <module>producers</module>
-      </modules>
-    </profile>
-  </profiles>
-</project>
diff --git a/producers/pom.xml b/producers/pom.xml
deleted file mode 100644
index 67aafefd6..000000000
--- a/producers/pom.xml
+++ /dev/null
@@ -1,68 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
- Copyright (C) 2014 The Dagger Authors.
-
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.google.dagger</groupId>
-    <artifactId>dagger-parent</artifactId>
-    <version>HEAD-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>dagger-producers</artifactId>
-  <name>Dagger Production Graphs</name>
-  <description>
-    An asynchronous dependency injection system that extends JSR-330.
-  </description>
-
-  <dependencies>
-    <dependency>
-      <groupId>${project.groupId}</groupId>
-      <artifactId>dagger</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>com.google.code.findbugs</groupId>
-      <artifactId>jsr305</artifactId>
-      <optional>true</optional>
-    </dependency>
-    <dependency>
-      <groupId>com.google.guava</groupId>
-      <artifactId>guava</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.truth</groupId>
-      <artifactId>truth</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.guava</groupId>
-      <artifactId>guava-testlib</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.mockito</groupId>
-      <artifactId>mockito-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-</project>
diff --git a/producers/src/main/java/dagger/producers/internal/MapOfProducedProducer.java b/producers/src/main/java/dagger/producers/internal/MapOfProducedProducer.java
index f86408393..7aace23a2 100644
--- a/producers/src/main/java/dagger/producers/internal/MapOfProducedProducer.java
+++ b/producers/src/main/java/dagger/producers/internal/MapOfProducedProducer.java
@@ -84,7 +84,8 @@ private MapOfProducedProducer(Producer<Map<K, Producer<V>>> mapProducerProducer)
                 },
                 directExecutor());
           }
-        });
+        },
+        directExecutor());
   }
 
   private static final Function<
diff --git a/producers/src/main/java/dagger/producers/internal/MapProducer.java b/producers/src/main/java/dagger/producers/internal/MapProducer.java
index d02c9ca90..33eb76e8c 100644
--- a/producers/src/main/java/dagger/producers/internal/MapProducer.java
+++ b/producers/src/main/java/dagger/producers/internal/MapProducer.java
@@ -79,7 +79,8 @@ private MapProducer(Producer<Map<K, Producer<V>>> mapProducerProducer) {
                 },
                 directExecutor());
           }
-        });
+        },
+        directExecutor());
   }
 
   private static final Function<
diff --git a/producers/src/main/java/dagger/producers/internal/SetOfProducedProducer.java b/producers/src/main/java/dagger/producers/internal/SetOfProducedProducer.java
index a7e060d95..0156887d5 100644
--- a/producers/src/main/java/dagger/producers/internal/SetOfProducedProducer.java
+++ b/producers/src/main/java/dagger/producers/internal/SetOfProducedProducer.java
@@ -17,6 +17,7 @@
 package dagger.producers.internal;
 
 import static com.google.common.base.Preconditions.checkNotNull;
+import static com.google.common.util.concurrent.MoreExecutors.directExecutor;
 import static dagger.internal.DaggerCollections.hasDuplicates;
 import static dagger.internal.DaggerCollections.presizedList;
 
@@ -169,6 +170,7 @@ private SetOfProducedProducer(
             }
             return builder.build();
           }
-        });
+        },
+        directExecutor());
   }
 }
diff --git a/tools/bazel.rc b/tools/bazel.rc
new file mode 100644
index 000000000..de078cce9
--- /dev/null
+++ b/tools/bazel.rc
@@ -0,0 +1,2 @@
+# Include debug info in the compiled jars
+build --javacopt=-g
\ No newline at end of file
diff --git a/util/deploy-to-maven-central.sh b/util/deploy-to-maven-central.sh
index 1cd368938..359dce3a1 100755
--- a/util/deploy-to-maven-central.sh
+++ b/util/deploy-to-maven-central.sh
@@ -10,11 +10,16 @@ key=$1
 version_name=$2
 shift 2
 
-if [[ ! $version_name =~ ^2\. ]]; then
+if [[ ! "$version_name" =~ ^2\. ]]; then
   echo 'Version name must begin with "2."'
   exit 2
 fi
 
+if [[ "$version_name" =~ " " ]]; then
+  echo "Version name must not have any spaces"
+  exit 3
+fi
+
 #validate key
 keystatus=$(gpg --list-keys | grep ${key} | awk '{print $1}')
 if [ "${keystatus}" != "pub" ]; then
@@ -37,6 +42,7 @@ git clone --quiet --branch gh-pages \
     https://github.com/google/dagger gh-pages > /dev/null
 cd gh-pages
 unzip ../bazel-genfiles/user-docs.jar -d api/$version_name
+rm -rf api/$version_name/META-INF/
 git add api/$version_name
 git commit -m "$version_name docs"
 git push origin gh-pages
diff --git a/util/generate-latest-docs.sh b/util/generate-latest-docs.sh
index e534adc46..b5a4c54b2 100755
--- a/util/generate-latest-docs.sh
+++ b/util/generate-latest-docs.sh
@@ -18,6 +18,7 @@ if [ "$TRAVIS_REPO_SLUG" == "google/dagger" ] && \
   git rm -rf api/latest
   mkdir -p api
   unzip ../bazel-genfiles/user-docs.jar -d api/latest
+  rm -rf api/latest/META-INF/
   git add -f api/latest
   git commit -m "Lastest javadoc on successful travis build $TRAVIS_BUILD_NUMBER auto-pushed to gh-pages"
   git push -fq origin gh-pages > /dev/null
