diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java
index a12abb888..4d026cdb7 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java
@@ -39,7 +39,7 @@
   @Test
   public void setMultibindings_contributionsInLeaf() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "InLeaf");
+    createSimplePackagePrivateClasses(filesToCompile, "InLeaf");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -99,7 +99,7 @@ public void setMultibindings_contributionsInLeaf() {
   @Test
   public void setMultibindings_contributionsInAncestorOnly() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "InAncestor");
+    createSimplePackagePrivateClasses(filesToCompile, "InAncestor");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -196,7 +196,7 @@ public void setMultibindings_contributionsInAncestorOnly() {
   @Test
   public void setMultibindings_contributionsInLeafAndAncestor() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "InEachSubcomponent");
+    createSimplePackagePrivateClasses(filesToCompile, "InEachSubcomponent");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -326,7 +326,7 @@ public void setMultibindings_contributionsInLeafAndAncestor() {
   @Test
   public void setMultibindings_contributionsInLeafAndGrandAncestor() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "InLeafAndGrandAncestor");
+    createSimplePackagePrivateClasses(filesToCompile, "InLeafAndGrandAncestor");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -493,7 +493,8 @@ public void setMultibindings_contributionsInLeafAndGrandAncestor() {
   @Test
   public void setMultibindings_nonComponentMethodDependency() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "InAllSubcomponents", "RequresInAllSubcomponentsSet");
+    createSimplePackagePrivateClasses(
+        filesToCompile, "InAllSubcomponents", "RequresInAllSubcomponentsSet");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -627,7 +628,7 @@ public void setMultibindings_nonComponentMethodDependency() {
   @Test
   public void setMultibindings_newSubclass() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "InAncestor", "RequiresInAncestorSet");
+    createSimplePackagePrivateClasses(filesToCompile, "InAncestor", "RequiresInAncestorSet");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -737,7 +738,7 @@ public void setMultibindings_newSubclass() {
   @Test
   public void setMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstanceFromAncestor() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(
+    createSimplePackagePrivateClasses(
         filesToCompile, "Multibound", "MissingInLeaf_WillDependOnFrameworkInstance");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
@@ -883,7 +884,7 @@ public void setMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
   @Test
   public void setMultibindings_contributionsInLeafAndAncestor_frameworkInstances() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "InEachSubcomponent");
+    createSimplePackagePrivateClasses(filesToCompile, "InEachSubcomponent");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -1047,7 +1048,7 @@ public void setMultibindings_contributionsInLeafAndAncestor_frameworkInstances()
   @Test
   public void mapMultibindings_contributionsInLeaf() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "InLeaf");
+    createSimplePackagePrivateClasses(filesToCompile, "InLeaf");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -1111,7 +1112,7 @@ public void mapMultibindings_contributionsInLeaf() {
   @Test
   public void mapMultibindings_contributionsInAncestorOnly() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "InAncestor");
+    createSimplePackagePrivateClasses(filesToCompile, "InAncestor");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -1208,7 +1209,7 @@ public void mapMultibindings_contributionsInAncestorOnly() {
   @Test
   public void mapMultibindings_contributionsInLeafAndAncestor() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "InEachSubcomponent");
+    createSimplePackagePrivateClasses(filesToCompile, "InEachSubcomponent");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -1335,7 +1336,7 @@ public void mapMultibindings_contributionsInLeafAndAncestor() {
   @Test
   public void mapMultibindings_contributionsInLeafAndAncestor_frameworkInstance() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "InEachSubcomponent");
+    createSimplePackagePrivateClasses(filesToCompile, "InEachSubcomponent");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -1499,7 +1500,7 @@ public void mapMultibindings_contributionsInLeafAndAncestor_frameworkInstance()
   @Test
   public void mapMultibindings_contributionsInLeafAndGrandAncestor() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "InLeafAndGrandAncestor");
+    createSimplePackagePrivateClasses(filesToCompile, "InLeafAndGrandAncestor");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -1667,7 +1668,7 @@ public void mapMultibindings_contributionsInLeafAndGrandAncestor() {
   @Test
   public void mapMultibindings_contributionsInLeafAndAncestorWithoutGuava() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "InEachSubcomponent");
+    createSimplePackagePrivateClasses(filesToCompile, "InEachSubcomponent");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -1794,7 +1795,7 @@ public void mapMultibindings_contributionsInLeafAndAncestorWithoutGuava() {
   @Test
   public void mapMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstanceFromAncestor() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(
+    createSimplePackagePrivateClasses(
         filesToCompile, "Multibound", "MissingInLeaf_WillDependOnFrameworkInstance");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
@@ -1942,7 +1943,7 @@ public void mapMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
   @Test
   public void emptyMultibinds_set() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "Multibound");
+    createSimplePackagePrivateClasses(filesToCompile, "Multibound");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.LeafModule",
@@ -2056,7 +2057,7 @@ public void emptyMultibinds_set() {
   @Test
   public void emptyMultibinds_set_frameworkInstance() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "Multibound");
+    createSimplePackagePrivateClasses(filesToCompile, "Multibound");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.LeafModule",
@@ -2189,7 +2190,7 @@ public void emptyMultibinds_set_frameworkInstance() {
   @Test
   public void emptyMultibinds_map() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "Multibound");
+    createSimplePackagePrivateClasses(filesToCompile, "Multibound");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.LeafModule",
@@ -2305,7 +2306,7 @@ public void emptyMultibinds_map() {
   @Test
   public void emptyMultibinds_map_frameworkInstance() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "Multibound");
+    createSimplePackagePrivateClasses(filesToCompile, "Multibound");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.LeafModule",
@@ -2503,7 +2504,7 @@ public void bindsMissingDep_Multibindings() {
   @Test
   public void multibindingsAndFastInit() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "PackagePrivate");
+    createSimplePackagePrivateClasses(filesToCompile, "PackagePrivate");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.MultibindingModule",
@@ -2629,7 +2630,7 @@ public void multibindingsAndFastInit() {
   }
 
   // TODO(ronshapiro): remove copies from AheadOfTimeSubcomponents*Test classes
-  private void createAncillaryClasses(
+  private void createSimplePackagePrivateClasses(
       ImmutableList.Builder<JavaFileObject> filesBuilder, String... ancillaryClasses) {
     for (String className : ancillaryClasses) {
       filesBuilder.add(
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 16d83c36e..aa9a7c509 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -42,7 +42,7 @@
   @Test
   public void missingBindings_fromComponentMethod() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "MissingInLeaf");
+    createSimplePackagePrivateClasses(filesToCompile, "MissingInLeaf");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -128,7 +128,7 @@ public void missingBindings_fromComponentMethod() {
   @Test
   public void missingBindings_dependsOnBindingWithMatchingComponentMethod() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "MissingInLeaf");
+    createSimplePackagePrivateClasses(filesToCompile, "MissingInLeaf");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -178,7 +178,7 @@ public void missingBindings_dependsOnBindingWithMatchingComponentMethod() {
   @Test
   public void missingBindings_dependsOnMissingBinding() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "MissingInLeaf");
+    createSimplePackagePrivateClasses(filesToCompile, "MissingInLeaf");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -280,7 +280,7 @@ public void missingBindings_dependsOnMissingBinding() {
   @Test
   public void missingBindings_satisfiedInGreatAncestor() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "MissingInLeaf");
+    createSimplePackagePrivateClasses(filesToCompile, "MissingInLeaf");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -987,7 +987,7 @@ public void prunedGeneratedInstanceBinding() {
   @Test
   public void optionalBindings_boundAndSatisfiedInSameSubcomponent() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "SatisfiedInSub");
+    createSimplePackagePrivateClasses(filesToCompile, "SatisfiedInSub");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Sub",
@@ -1055,7 +1055,7 @@ public void optionalBindings_boundAndSatisfiedInSameSubcomponent() {
   @Test
   public void optionalBindings_satisfiedInAncestor() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "SatisfiedInAncestor");
+    createSimplePackagePrivateClasses(filesToCompile, "SatisfiedInAncestor");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -1164,7 +1164,7 @@ public void optionalBindings_satisfiedInAncestor() {
   @Test
   public void optionalBindings_satisfiedInGrandAncestor() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "SatisfiedInGrandAncestor");
+    createSimplePackagePrivateClasses(filesToCompile, "SatisfiedInGrandAncestor");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -1312,7 +1312,7 @@ public void optionalBindings_satisfiedInGrandAncestor() {
   @Test
   public void optionalBindings_nonComponentMethodDependencySatisfiedInAncestor() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(
+    createSimplePackagePrivateClasses(
         filesToCompile, "SatisfiedInAncestor", "RequiresOptionalSatisfiedInAncestor");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
@@ -1436,7 +1436,7 @@ public void optionalBindings_nonComponentMethodDependencySatisfiedInAncestor() {
   @Test
   public void optionalBindings_boundInAncestorAndSatisfiedInGrandAncestor() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "SatisfiedInGrandAncestor");
+    createSimplePackagePrivateClasses(filesToCompile, "SatisfiedInGrandAncestor");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -1951,7 +1951,7 @@ public void provisionOverInjection_indirectDependency() {
   @Test
   public void provisionOverInjection_prunedIndirectDependency() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "PrunedDependency");
+    createSimplePackagePrivateClasses(filesToCompile, "PrunedDependency");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.InjectsPrunedDependency",
@@ -2429,7 +2429,7 @@ public void provisionOverInjection_prunedDirectDependency_prunedInAbstractImplem
   @Test
   public void productionSubcomponentAndModifiableFrameworkInstance() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "Response", "ResponseDependency");
+    createSimplePackagePrivateClasses(filesToCompile, "Response", "ResponseDependency");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -2742,7 +2742,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
   @Test
   public void lazyOfModifiableBinding() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "MissingInLeaf");
+    createSimplePackagePrivateClasses(filesToCompile, "MissingInLeaf");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Leaf",
@@ -2848,7 +2848,7 @@ public void lazyOfModifiableBinding() {
   @Test
   public void missingBindingAccessInLeafAndAncestor() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(
+    createSimplePackagePrivateClasses(
         filesToCompile, "Missing", "DependsOnMissing", "ProvidedInAncestor_InducesSetBinding");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
@@ -3061,7 +3061,7 @@ public void missingBindingAccessInLeafAndAncestor() {
   @Test
   public void subcomponentBuilders() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "InducesDependenciesOnBuilderFields");
+    createSimplePackagePrivateClasses(filesToCompile, "InducesDependenciesOnBuilderFields");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.LeafModule",
@@ -3357,7 +3357,7 @@ public void subcomponentBuilders() {
   @Test
   public void subcomponentBuilders_moduleWithUnusedInstanceBindings() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "Used", "Unused");
+    createSimplePackagePrivateClasses(filesToCompile, "Used", "Unused");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.ModuleWithUsedBinding",
@@ -3706,7 +3706,7 @@ public void subcomponentBuilders_repeatedModule() {
   @Test
   public void bindsWithMissingDependency() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "MissingInLeaf");
+    createSimplePackagePrivateClasses(filesToCompile, "MissingInLeaf");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.LeafModule",
@@ -3824,7 +3824,7 @@ public void bindsWithMissingDependency() {
   @Test
   public void bindsWithMissingDependency_pruned() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "MissingInLeaf");
+    createSimplePackagePrivateClasses(filesToCompile, "MissingInLeaf");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.LeafModule",
@@ -3964,7 +3964,7 @@ public void bindsWithMissingDependency_pruned() {
   @Test
   public void modifiedProducerFromProvider() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "DependsOnModifiedProducerFromProvider");
+    createSimplePackagePrivateClasses(filesToCompile, "DependsOnModifiedProducerFromProvider");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.LeafModule",
@@ -4379,7 +4379,7 @@ public void modifiableBindingMethods_namesDedupedAcrossImplementations() {
   @Test
   public void subcomponentInducedFromAncestor() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "Inducer");
+    createSimplePackagePrivateClasses(filesToCompile, "Inducer");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.InducedSubcomponent",
@@ -4523,7 +4523,7 @@ public void subcomponentInducedFromAncestor() {
   @Test
   public void rootScopedAtInjectConstructor_effectivelyMissingInSubcomponent() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "ProvidesMethodRootScoped");
+    createSimplePackagePrivateClasses(filesToCompile, "ProvidesMethodRootScoped");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.RootScope",
@@ -4612,7 +4612,7 @@ public void rootScopedAtInjectConstructor_effectivelyMissingInSubcomponent() {
   @Test
   public void prunedModuleWithInstanceState() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "Pruned");
+    createSimplePackagePrivateClasses(filesToCompile, "Pruned");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.Modified",
@@ -5218,7 +5218,7 @@ public void packagePrivate_derivedFromFrameworkInstance_ComponentMethod() {
   @Test
   public void castModifiableMethodAccessedInFinalImplementation() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(filesToCompile, "PackagePrivate");
+    createSimplePackagePrivateClasses(filesToCompile, "PackagePrivate");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
             "test.PublicBaseType",
@@ -5404,7 +5404,7 @@ public void castModifiableMethodAccessedInFinalImplementation() {
   }
 
   // TODO(ronshapiro): remove copies from AheadOfTimeSubcomponents*Test classes
-  private void createAncillaryClasses(
+  private void createSimplePackagePrivateClasses(
       ImmutableList.Builder<JavaFileObject> filesBuilder, String... ancillaryClasses) {
     for (String className : ancillaryClasses) {
       filesBuilder.add(
