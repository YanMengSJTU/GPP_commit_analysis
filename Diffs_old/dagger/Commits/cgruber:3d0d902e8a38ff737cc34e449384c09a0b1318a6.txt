diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index 667a1d0b1..34183ef2a 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -1125,38 +1125,40 @@ private CodeBlock initializeFactoryForSetMultibinding(ContributionBinding bindin
               ? setType.unwrappedElementType(Produced.class)
               : setType.elementType());
     }
-    builder.add("builder()");
+    int individualProviders = 0;
+    int setProviders = 0;
+    CodeBlock.Builder builderMethodCalls = CodeBlock.builder();
     for (FrameworkDependency frameworkDependency : frameworkDependenciesForBinding(binding)) {
-      builder.add(
-          ".$L($L)",
-          setFactoryBuilderMethodName(frameworkDependency),
+      ContributionType contributionType =
+          graph.resolvedBindings().get(frameworkDependency.bindingKey()).contributionType();
+      String methodName;
+      switch (contributionType) {
+        case SET:
+          individualProviders++;
+          methodName = "add";
+          break;
+        case SET_VALUES:
+          setProviders++;
+          methodName = "addSet";
+          break;
+        default:
+          throw new AssertionError(frameworkDependency + " is not a set multibinding");
+      }
+
+      builderMethodCalls.add(
+          ".$L$L($L)",
+          methodName,
+          frameworkDependency.frameworkClass().getSimpleName(),
           potentiallyCast(
               useRawTypes,
               frameworkDependency.frameworkClass(),
               getDependencyArgument(frameworkDependency)));
     }
+    builder.add("builder($L, $L)", individualProviders, setProviders);
+    builder.add(builderMethodCalls.build());
     return builder.add(".build()").build();
   }
 
-  /**
-   * The method name which will add a provider for {@code binding} to the {@link
-   * dagger.internal.SetFactory.Builder}, {@link SetProducer.Builder} or {@link
-   * dagger.producers.internal.SetOfProducedProducer.Builder}.
-   */
-  private String setFactoryBuilderMethodName(FrameworkDependency frameworkDependency) {
-    ContributionType contributionType =
-        graph.resolvedBindings().get(frameworkDependency.bindingKey()).contributionType();
-    String frameworkClassName = frameworkDependency.frameworkClass().getSimpleName();
-    switch (contributionType) {
-      case SET:
-        return "add" + frameworkClassName;
-      case SET_VALUES:
-        return "addSet" + frameworkClassName;
-      default:
-        throw new AssertionError(frameworkDependency + " is not a set multibinding");
-    }
-  }
-
   private CodeBlock initializeFactoryForMapMultibinding(ContributionBinding binding) {
     ImmutableSet<FrameworkDependency> frameworkDependencies =
         FrameworkDependency.frameworkDependenciesForBinding(binding);
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index 23bb551d5..6f9e7e2e0 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -1000,7 +1000,7 @@ public void subcomponentOmitsInheritedBindings() {
             "",
             "    @SuppressWarnings(\"unchecked\")",
             "    private void initialize() {",
-            "      this.setOfObjectProvider = SetFactory.<Object>builder()",
+            "      this.setOfObjectProvider = SetFactory.<Object>builder(1, 0)",
             "          .addProvider(ParentModule_ParentObjectFactory.create()).build();",
             "      this.mapOfStringAndProviderOfObjectProvider =",
             "          MapProviderFactory.<String, Object>builder(1)",
@@ -1135,7 +1135,7 @@ public void subcomponentOmitsInheritedBindings() {
             "    this.stringProvider =",
             "        SetModule_StringFactory.create(builder.setModule);",
             "    this.setOfStringProvider = ",
-            "        SetFactory.<String>builder()",
+            "        SetFactory.<String>builder(1, 1)",
             "            .addSetProvider(emptySetProvider)",
             "            .addProvider(stringProvider)",
             "            .build();",
diff --git a/core/src/main/java/dagger/internal/Collections.java b/core/src/main/java/dagger/internal/DaggerCollections.java
similarity index 67%
rename from core/src/main/java/dagger/internal/Collections.java
rename to core/src/main/java/dagger/internal/DaggerCollections.java
index 136e8e0bb..e317c28b7 100644
--- a/core/src/main/java/dagger/internal/Collections.java
+++ b/core/src/main/java/dagger/internal/DaggerCollections.java
@@ -15,16 +15,46 @@
  */
 package dagger.internal;
 
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Set;
 
-final class Collections {
+/**
+ * Collection utility methods in service of Dagger internal classes. <em>Do not use</em> in client
+ * code.
+ */
+public final class DaggerCollections {
   /**
    * The maximum value for a signed 32-bit integer that is equal to a power of 2.
    */
   private static final int MAX_POWER_OF_TWO = 1 << (Integer.SIZE - 2);
 
-  private Collections() {
+  private DaggerCollections() {}
+
+  /**
+   * Returns a new list that is pre-sized to {@code size}, or {@link Collections#emptyList()} if
+   * empty. The list returned is never intended to grow beyond {@code size}, so adding to a list
+   * when the size is 0 is an error.
+   */
+  public static <T> List<T> presizedList(int size) {
+    if (size == 0) {
+      return Collections.emptyList();
+    }
+    return new ArrayList<T>(size);
+  }
+
+  /**
+   * Returns true if at least one pair of items in {@code list} are equals.
+   */
+  public static boolean hasDuplicates(List<?> list) {
+    if (list.size() < 2) {
+      return false;
+    }
+    Set<Object> asSet = new HashSet<Object>(list);
+    return list.size() != asSet.size();
   }
 
   /**
diff --git a/core/src/main/java/dagger/internal/MapFactory.java b/core/src/main/java/dagger/internal/MapFactory.java
index 4dac1262b..b0364ba01 100644
--- a/core/src/main/java/dagger/internal/MapFactory.java
+++ b/core/src/main/java/dagger/internal/MapFactory.java
@@ -19,7 +19,7 @@
 import java.util.Map.Entry;
 import javax.inject.Provider;
 
-import static dagger.internal.Collections.newLinkedHashMapWithExpectedSize;
+import static dagger.internal.DaggerCollections.newLinkedHashMapWithExpectedSize;
 import static java.util.Collections.unmodifiableMap;
 
 /**
diff --git a/core/src/main/java/dagger/internal/MapProviderFactory.java b/core/src/main/java/dagger/internal/MapProviderFactory.java
index b5c96e702..141a77bf0 100644
--- a/core/src/main/java/dagger/internal/MapProviderFactory.java
+++ b/core/src/main/java/dagger/internal/MapProviderFactory.java
@@ -20,7 +20,7 @@
 import java.util.Map;
 import javax.inject.Provider;
 
-import static dagger.internal.Collections.newLinkedHashMapWithExpectedSize;
+import static dagger.internal.DaggerCollections.newLinkedHashMapWithExpectedSize;
 import static java.util.Collections.unmodifiableMap;
 
 /**
diff --git a/core/src/main/java/dagger/internal/SetFactory.java b/core/src/main/java/dagger/internal/SetFactory.java
index 95b41a542..d4e89f9a8 100644
--- a/core/src/main/java/dagger/internal/SetFactory.java
+++ b/core/src/main/java/dagger/internal/SetFactory.java
@@ -16,12 +16,13 @@
 package dagger.internal;
 
 import java.util.ArrayList;
-import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 import javax.inject.Provider;
 
-import static dagger.internal.Collections.newHashSetWithExpectedSize;
+import static dagger.internal.DaggerCollections.hasDuplicates;
+import static dagger.internal.DaggerCollections.newHashSetWithExpectedSize;
+import static dagger.internal.DaggerCollections.presizedList;
 import static dagger.internal.Preconditions.checkNotNull;
 import static java.util.Collections.emptySet;
 import static java.util.Collections.unmodifiableSet;
@@ -48,13 +49,27 @@
     return (Factory) EMPTY_FACTORY;
   }
 
-  public static <T> SetFactory.Builder<T> builder() {
-    return new Builder<T>();
+  /**
+   * Constructs a new {@link Builder} for a {@link SetFactory} with {@code individualProviderSize}
+   * individual {@code Provider<T>} and {@code setProviderSize} {@code Provider<Set<T>>} instances.
+   */
+  public static <T> Builder<T> builder(int individualProviderSize, int setProviderSize) {
+    return new Builder<T>(individualProviderSize, setProviderSize);
   }
 
+  /**
+   * A builder to accumulate {@code Provider<T>} and {@code Provider<Set<T>>} instances. These are
+   * only intended to be single-use and from within generated code. Do <em>NOT</em> add providers
+   * after calling {@link #build()}.
+   */
   public static final class Builder<T> {
-    private final List<Provider<T>> individualProviders = new ArrayList<Provider<T>>();
-    private final List<Provider<Set<T>>> setProviders = new ArrayList<Provider<Set<T>>>();
+    private final List<Provider<T>> individualProviders;
+    private final List<Provider<Set<T>>> setProviders;
+
+    private Builder(int individualProviderSize, int setProviderSize) {
+      individualProviders = presizedList(individualProviderSize);
+      setProviders = presizedList(setProviderSize);
+    }
 
     public Builder<T> addProvider(Provider<T> individualProvider) {
       assert individualProvider != null : "Codegen error? Null provider";
@@ -74,20 +89,10 @@
       assert !hasDuplicates(setProviders)
           : "Codegen error?  Duplicates in the provider list";
 
-      return new SetFactory<T>(
-          new ArrayList<Provider<T>>(individualProviders),
-          new ArrayList<Provider<Set<T>>>(setProviders));
+      return new SetFactory<T>(individualProviders, setProviders);
     }
   }
 
-  /**
-   * Returns true if at least one pair of items in (@code original) are equals.
-   */
-  private static boolean hasDuplicates(List<? extends Object> original) {
-    Set<Object> asSet = new HashSet<Object>(original);
-    return original.size() != asSet.size();
-  }
-
   private final List<Provider<T>> individualProviders;
   private final List<Provider<Set<T>>> setProviders;
 
diff --git a/core/src/test/java/dagger/internal/SetFactoryTest.java b/core/src/test/java/dagger/internal/SetFactoryTest.java
index 9b5ad90df..b6d5d78ab 100644
--- a/core/src/test/java/dagger/internal/SetFactoryTest.java
+++ b/core/src/test/java/dagger/internal/SetFactoryTest.java
@@ -37,7 +37,7 @@
   @Test
   public void providerReturnsNull() {
     Factory<Set<Integer>> factory =
-        SetFactory.<Integer>builder().addSetProvider(providerOf((Set<Integer>) null)).build();
+        SetFactory.<Integer>builder(0, 1).addSetProvider(providerOf((Set<Integer>) null)).build();
     thrown.expect(NullPointerException.class);
     factory.get();
   }
@@ -45,7 +45,7 @@ public void providerReturnsNull() {
   @Test
   public void providerReturnsNullSet() {
     Factory<Set<Integer>> factory =
-        SetFactory.<Integer>builder().addProvider(providerOf((Integer) null)).build();
+        SetFactory.<Integer>builder(1, 0).addProvider(providerOf((Integer) null)).build();
     thrown.expect(NullPointerException.class);
     factory.get();
   }
@@ -54,7 +54,7 @@ public void providerReturnsNullSet() {
   public void providerReturnsSetWithNullElement() {
     Set<Integer> set = new LinkedHashSet<Integer>(Arrays.asList(1, null, 3));
     Factory<Set<Integer>> factory =
-        SetFactory.<Integer>builder().addSetProvider(providerOf(set)).build();
+        SetFactory.<Integer>builder(0, 1).addSetProvider(providerOf(set)).build();
     thrown.expect(NullPointerException.class);
     factory.get();
   }
@@ -62,7 +62,7 @@ public void providerReturnsSetWithNullElement() {
   @Test
   public void invokesProvidersEveryTime() {
     Factory<Set<Integer>> factory =
-        SetFactory.<Integer>builder()
+        SetFactory.<Integer>builder(2, 2)
             .addProvider(incrementingIntegerProvider(0))
             .addProvider(incrementingIntegerProvider(10))
             .addSetProvider(incrementingIntegerSetProvider(20))
diff --git a/producers/src/main/java/dagger/producers/internal/SetOfProducedProducer.java b/producers/src/main/java/dagger/producers/internal/SetOfProducedProducer.java
index 297d8be86..39712fac6 100644
--- a/producers/src/main/java/dagger/producers/internal/SetOfProducedProducer.java
+++ b/producers/src/main/java/dagger/producers/internal/SetOfProducedProducer.java
@@ -28,6 +28,8 @@
 import java.util.concurrent.ExecutionException;
 
 import static com.google.common.base.Preconditions.checkNotNull;
+import static dagger.internal.DaggerCollections.hasDuplicates;
+import static dagger.internal.DaggerCollections.presizedList;
 
 /**
  * A {@link Producer} implementation used to implement {@link Set} bindings. This producer returns a
@@ -42,13 +44,27 @@
     return SetProducer.create();
   }
 
-  public static <T> SetOfProducedProducer.Builder<T> builder() {
-    return new Builder<T>();
+  /**
+   * Constructs a new {@link Builder} for a {@link SetProducer} with {@code individualProducerSize}
+   * individual {@code Producer<T>} and {@code setProducerSize} {@code Producer<Set<T>>} instances.
+   */
+  public static <T> Builder<T> builder(int individualProducerSize, int setProducerSize) {
+    return new Builder<T>(individualProducerSize, setProducerSize);
   }
 
+  /**
+   * A builder to accumulate {@code Producer<T>} and {@code Producer<Set<T>>} instances. These are
+   * only intended to be single-use and from within generated code. Do <em>NOT</em> add producers
+   * after calling {@link #build()}.
+   */
   public static final class Builder<T> {
-    private final List<Producer<T>> individualProducers = new ArrayList<Producer<T>>();
-    private final List<Producer<Set<T>>> setProducers = new ArrayList<Producer<Set<T>>>();
+    private final List<Producer<T>> individualProducers;
+    private final List<Producer<Set<T>>> setProducers;
+
+    private Builder(int individualProducerSize, int setProducerSize) {
+      individualProducers = presizedList(individualProducerSize);
+      setProducers = presizedList(setProducerSize);
+    }
 
     public Builder<T> addProducer(Producer<T> individualProducer) {
       assert individualProducer != null : "Codegen error? Null producer";
@@ -68,24 +84,15 @@
       assert !hasDuplicates(setProducers)
           : "Codegen error?  Duplicates in the producer list";
 
-      return new SetOfProducedProducer<T>(
-          ImmutableSet.<Producer<T>>copyOf(individualProducers),
-          ImmutableSet.<Producer<Set<T>>>copyOf(setProducers));
+      return new SetOfProducedProducer<T>(individualProducers, setProducers);
     }
   }
 
-  /**
-   * Returns true if at least one pair of items in (@code original) are equals.
-   */
-  private static boolean hasDuplicates(List<? extends Object> original) {
-    return original.size() != ImmutableSet.copyOf(original).size();
-  }
-
-  private final ImmutableSet<Producer<T>> individualProducers;
-  private final ImmutableSet<Producer<Set<T>>> setProducers;
+  private final List<Producer<T>> individualProducers;
+  private final List<Producer<Set<T>>> setProducers;
 
   private SetOfProducedProducer(
-      ImmutableSet<Producer<T>> individualProducers, ImmutableSet<Producer<Set<T>>> setProducers) {
+      List<Producer<T>> individualProducers, List<Producer<Set<T>>> setProducers) {
     this.individualProducers = individualProducers;
     this.setProducers = setProducers;
   }
diff --git a/producers/src/main/java/dagger/producers/internal/SetProducer.java b/producers/src/main/java/dagger/producers/internal/SetProducer.java
index 7a5010d5a..b9189d29a 100644
--- a/producers/src/main/java/dagger/producers/internal/SetProducer.java
+++ b/producers/src/main/java/dagger/producers/internal/SetProducer.java
@@ -26,6 +26,8 @@
 import java.util.Set;
 
 import static com.google.common.base.Preconditions.checkNotNull;
+import static dagger.internal.DaggerCollections.hasDuplicates;
+import static dagger.internal.DaggerCollections.presizedList;
 
 /**
  * A {@link Producer} implementation used to implement {@link Set} bindings. This producer returns
@@ -49,13 +51,27 @@
     return (Producer) EMPTY_PRODUCER;
   }
 
-  public static <T> SetProducer.Builder<T> builder() {
-    return new Builder<T>();
+  /**
+   * Constructs a new {@link Builder} for a {@link SetProducer} with {@code individualProducerSize}
+   * individual {@code Producer<T>} and {@code setProducerSize} {@code Producer<Set<T>>} instances.
+   */
+  public static <T> Builder<T> builder(int individualProducerSize, int setProducerSize) {
+    return new Builder<T>(individualProducerSize, setProducerSize);
   }
 
+  /**
+   * A builder to accumulate {@code Producer<T>} and {@code Producer<Set<T>>} instances. These are
+   * only intended to be single-use and from within generated code. Do <em>NOT</em> add producers
+   * after calling {@link #build()}.
+   */
   public static final class Builder<T> {
-    private final List<Producer<T>> individualProducers = new ArrayList<Producer<T>>();
-    private final List<Producer<Set<T>>> setProducers = new ArrayList<Producer<Set<T>>>();
+    private final List<Producer<T>> individualProducers;
+    private final List<Producer<Set<T>>> setProducers;
+
+    private Builder(int individualProducerSize, int setProducerSize) {
+      individualProducers = presizedList(individualProducerSize);
+      setProducers = presizedList(setProducerSize);
+    }
 
     public Builder<T> addProducer(Producer<T> individualProducer) {
       assert individualProducer != null : "Codegen error? Null producer";
@@ -75,23 +91,15 @@
       assert !hasDuplicates(setProducers)
           : "Codegen error?  Duplicates in the producer list";
 
-      return new SetProducer<T>(
-          ImmutableSet.copyOf(individualProducers), ImmutableSet.copyOf(setProducers));
+      return new SetProducer<T>(individualProducers, setProducers);
     }
   }
 
-  /**
-   * Returns true if at least one pair of items in (@code original) are equals.
-   */
-  private static boolean hasDuplicates(List<? extends Object> original) {
-    return original.size() != ImmutableSet.copyOf(original).size();
-  }
-
-  private final ImmutableSet<Producer<T>> individualProducers;
-  private final ImmutableSet<Producer<Set<T>>> setProducers;
+  private final List<Producer<T>> individualProducers;
+  private final List<Producer<Set<T>>> setProducers;
 
   private SetProducer(
-      ImmutableSet<Producer<T>> individualProducers, ImmutableSet<Producer<Set<T>>> setProducers) {
+      List<Producer<T>> individualProducers, List<Producer<Set<T>>> setProducers) {
     this.individualProducers = individualProducers;
     this.setProducers = setProducers;
   }
diff --git a/producers/src/test/java/dagger/producers/internal/SetOfProducedProducerTest.java b/producers/src/test/java/dagger/producers/internal/SetOfProducedProducerTest.java
index c8b8f59c4..1f87a6f99 100644
--- a/producers/src/test/java/dagger/producers/internal/SetOfProducedProducerTest.java
+++ b/producers/src/test/java/dagger/producers/internal/SetOfProducedProducerTest.java
@@ -38,7 +38,7 @@
   @Test
   public void success() throws Exception {
     Producer<Set<Produced<Integer>>> producer =
-        SetOfProducedProducer.<Integer>builder()
+        SetOfProducedProducer.<Integer>builder(1, 1)
             .addProducer(Producers.immediateProducer(1))
             .addSetProducer(Producers.<Set<Integer>>immediateProducer(ImmutableSet.of(5, 7)))
             .build();
@@ -53,7 +53,7 @@ public void success() throws Exception {
   public void failure() throws Exception {
     RuntimeException e = new RuntimeException("monkey");
     Producer<Set<Produced<Integer>>> producer =
-        SetOfProducedProducer.<Integer>builder()
+        SetOfProducedProducer.<Integer>builder(1, 1)
             .addSetProducer(Producers.<Set<Integer>>immediateProducer(ImmutableSet.of(1, 2)))
             .addProducer(Producers.<Integer>immediateFailedProducer(e))
             .build();
@@ -65,7 +65,7 @@ public void failure() throws Exception {
   @Test
   public void delegateNpe() throws Exception {
     Producer<Set<Produced<Integer>>> producer =
-        SetOfProducedProducer.<Integer>builder()
+        SetOfProducedProducer.<Integer>builder(1, 0)
             .addProducer(Producers.<Integer>immediateProducer(null))
             .build();
     Results<Integer> results = Results.create(producer.get().get());
@@ -78,7 +78,7 @@ public void delegateNpe() throws Exception {
   @Test
   public void delegateSetNpe() throws Exception {
     Producer<Set<Produced<Integer>>> producer =
-        SetOfProducedProducer.<Integer>builder()
+        SetOfProducedProducer.<Integer>builder(0, 1)
             .addSetProducer(Producers.<Set<Integer>>immediateProducer(null))
             .build();
     Results<Integer> results = Results.create(producer.get().get());
@@ -91,7 +91,7 @@ public void delegateSetNpe() throws Exception {
   @Test
   public void delegateElementNpe() throws Exception {
     Producer<Set<Produced<Integer>>> producer =
-        SetOfProducedProducer.<Integer>builder()
+        SetOfProducedProducer.<Integer>builder(0, 1)
             .addSetProducer(
                 Producers.<Set<Integer>>immediateProducer(Collections.<Integer>singleton(null)))
             .build();
@@ -105,7 +105,7 @@ public void delegateElementNpe() throws Exception {
   @Test
   public void oneOfDelegateElementNpe() throws Exception {
     Producer<Set<Produced<Integer>>> producer =
-        SetOfProducedProducer.<Integer>builder()
+        SetOfProducedProducer.<Integer>builder(0, 1)
             .addSetProducer(
                 Producers.<Set<Integer>>immediateProducer(
                     Sets.newHashSet(Arrays.asList(5, 2, null))))
diff --git a/producers/src/test/java/dagger/producers/internal/SetProducerTest.java b/producers/src/test/java/dagger/producers/internal/SetProducerTest.java
index 158c37785..da250945e 100644
--- a/producers/src/test/java/dagger/producers/internal/SetProducerTest.java
+++ b/producers/src/test/java/dagger/producers/internal/SetProducerTest.java
@@ -36,7 +36,7 @@
   @Test
   public void success() throws Exception {
     Producer<Set<Integer>> producer =
-        SetProducer.<Integer>builder()
+        SetProducer.<Integer>builder(1, 1)
             .addProducer(Producers.immediateProducer(1))
             .addSetProducer(Producers.<Set<Integer>>immediateProducer(ImmutableSet.of(5, 7)))
             .build();
@@ -46,7 +46,7 @@ public void success() throws Exception {
   @Test
   public void delegateNpe() throws Exception {
     Producer<Set<Integer>> producer =
-        SetProducer.<Integer>builder()
+        SetProducer.<Integer>builder(1, 0)
             .addProducer(Producers.<Integer>immediateProducer(null))
             .build();
     ListenableFuture<Set<Integer>> future = producer.get();
@@ -61,7 +61,7 @@ public void delegateNpe() throws Exception {
   @Test
   public void delegateSetNpe() throws Exception {
     Producer<Set<Integer>> producer =
-        SetProducer.<Integer>builder()
+        SetProducer.<Integer>builder(0, 1)
             .addSetProducer(Producers.<Set<Integer>>immediateProducer(null))
             .build();
     ListenableFuture<Set<Integer>> future = producer.get();
@@ -76,7 +76,7 @@ public void delegateSetNpe() throws Exception {
   @Test
   public void delegateElementNpe() throws Exception {
     Producer<Set<Integer>> producer =
-        SetProducer.<Integer>builder()
+        SetProducer.<Integer>builder(0, 2)
             .addSetProducer(Producers.<Set<Integer>>immediateProducer(ImmutableSet.of(1, 2)))
             .addSetProducer(
                 Producers.<Set<Integer>>immediateProducer(Collections.<Integer>singleton(null)))
