diff --git a/compiler/src/it/producers-functional-tests/src/test/java/test/ProducerFactoryTest.java b/compiler/src/it/producers-functional-tests/src/test/java/test/ProducerFactoryTest.java
index 3342ec9f5..3826b6ed0 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/test/ProducerFactoryTest.java
+++ b/compiler/src/it/producers-functional-tests/src/test/java/test/ProducerFactoryTest.java
@@ -30,7 +30,7 @@
   @Test public void noArgMethod() throws Exception {
     SimpleProducerModule module = new SimpleProducerModule();
     Producer<String> producer =
-        new SimpleProducerModule$$StrFactory(module, MoreExecutors.directExecutor());
+        new SimpleProducerModule_StrFactory(module, MoreExecutors.directExecutor());
     assertThat(producer.get().get()).isEqualTo("Hello, World!");
   }
 
@@ -39,7 +39,7 @@
     SettableFuture<String> strFuture = SettableFuture.create();
     Producer<String> strProducer = producerOfFuture(strFuture);
     Producer<Integer> producer =
-        new SimpleProducerModule$$LenFactory(module, MoreExecutors.directExecutor(), strProducer);
+        new SimpleProducerModule_LenFactory(module, MoreExecutors.directExecutor(), strProducer);
     assertThat(producer.get().isDone()).isFalse();
     strFuture.set("abcdef");
     assertThat(producer.get().get()).isEqualTo(6);
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 2a9f434a7..3f69f1623 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -587,7 +587,7 @@ private void writeField(
         JavaWriter proxyJavaWriter = JavaWriter.inPackage(bindingPackage);
         proxyWriters.add(proxyJavaWriter);
         ClassWriter proxyWriter =
-            proxyJavaWriter.addClass(componentWriter.name().simpleName() + "__PackageProxy");
+            proxyJavaWriter.addClass(componentWriter.name().simpleName() + "_PackageProxy");
         proxyWriter.annotate(Generated.class)
             .setValue(ComponentProcessor.class.getCanonicalName());
         proxyWriter.addModifiers(PUBLIC, FINAL);
diff --git a/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java b/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
index b18362230..57c815b23 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
@@ -192,7 +192,7 @@ static ClassName factoryNameForProvisionBinding(ProvisionBinding binding) {
       case INJECTION:
       case PROVISION:
         return enclosingClassName.topLevelClassName().peerNamed(
-            enclosingClassName.classFileName() + "$$" + factoryPrefix(binding) + "Factory");
+            enclosingClassName.classFileName() + "_" + factoryPrefix(binding) + "Factory");
       case SYNTHETIC_PROVISON:
         throw new IllegalArgumentException();
       default:
@@ -240,7 +240,7 @@ static ClassName factoryNameForProductionBinding(ProductionBinding binding) {
       case IMMEDIATE:
       case FUTURE_PRODUCTION:
         return enclosingClassName.topLevelClassName().peerNamed(
-            enclosingClassName.classFileName() + "$$" + factoryPrefix(binding) + "Factory");
+            enclosingClassName.classFileName() + "_" + factoryPrefix(binding) + "Factory");
       default:
         throw new AssertionError();
     }
@@ -264,7 +264,7 @@ static TypeName parameterizedMembersInjectorNameForMembersInjectionBinding(
   static ClassName membersInjectorNameForMembersInjectionBinding(MembersInjectionBinding binding) {
     ClassName injectedClassName = ClassName.fromTypeElement(binding.bindingElement());
     return injectedClassName.topLevelClassName().peerNamed(
-        injectedClassName.classFileName() + "$$MembersInjector");
+        injectedClassName.classFileName() + "_MembersInjector");
   }
 
   private static String factoryPrefix(ProvisionBinding binding) {
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index 1faed549a..175dd1969 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -219,17 +219,17 @@
         "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
-        "    return SomeInjectableType$$Factory.create().get();",
+        "    return SomeInjectableType_Factory.create().get();",
         "  }",
         "",
         "  @Override",
         "  public Lazy<SomeInjectableType> lazySomeInjectableType() {",
-        "    return DoubleCheckLazy.create(SomeInjectableType$$Factory.create());",
+        "    return DoubleCheckLazy.create(SomeInjectableType_Factory.create());",
         "  }",
         "",
         "  @Override",
         "  public Provider<SomeInjectableType> someInjectableTypeProvider() {",
-        "    return SomeInjectableType$$Factory.create();",
+        "    return SomeInjectableType_Factory.create();",
         "  }",
         "",
         "  public static final class Builder {",
@@ -302,7 +302,7 @@
         "",
         "  private void initialize(final Builder builder) {",
         "    this.someInjectableTypeProvider =",
-        "        ScopedProvider.create(SomeInjectableType$$Factory.create());",
+        "        ScopedProvider.create(SomeInjectableType_Factory.create());",
         "  }",
         "",
         "  @Override",
@@ -384,12 +384,12 @@
         "",
         "  private void initialize(final Builder builder) {",
         "    this.bMembersInjector =",
-        "        OuterType$B$$MembersInjector.create(OuterType$A$$Factory.create());",
+        "        OuterType$B_MembersInjector.create(OuterType$A_Factory.create());",
         "  }",
         "",
         "  @Override",
         "  public A a() {",
-        "    return OuterType$A$$Factory.create().get();",
+        "    return OuterType$A_Factory.create().get();",
         "  }",
         "",
         "  @Override",
@@ -482,9 +482,9 @@
         "  }",
         "",
         "  private void initialize(final Builder builder) {",
-        "    this.bProvider = TestModule$$BFactory.create(builder.testModule,",
-        "        C$$Factory.create());",
-        "    this.aProvider = A$$Factory.create(bProvider);",
+        "    this.bProvider = TestModule_BFactory.create(builder.testModule,",
+        "        C_Factory.create());",
+        "    this.aProvider = A_Factory.create(bProvider);",
         "  }",
         "",
         "  @Override",
@@ -808,9 +808,9 @@
         "",
         "  private void initialize(final Builder builder) {",
         "    this.setOfStringContribution1Provider =",
-        "        EmptySetModule$$EmptySetFactory.create(builder.emptySetModule);",
+        "        EmptySetModule_EmptySetFactory.create(builder.emptySetModule);",
         "    this.setOfStringContribution2Provider =",
-        "        SetModule$$StringFactory.create(builder.setModule);",
+        "        SetModule_StringFactory.create(builder.setModule);",
         "    this.setOfStringProvider = SetFactory.create(",
         "        setOfStringContribution1Provider, setOfStringContribution2Provider);",
         "  }",
@@ -918,7 +918,7 @@
         "",
         "  private void initialize(final Builder builder) {",
         "    this.someInjectedTypeMembersInjector =",
-        "        SomeInjectedType$$MembersInjector.create(SomeInjectableType$$Factory.create());",
+        "        SomeInjectedType_MembersInjector.create(SomeInjectableType_Factory.create());",
         "  }",
         "",
         "  @Override",
@@ -998,7 +998,7 @@
         "  private void initialize(final Builder builder) {",
         "    this.simpleComponentProvider = InstanceFactory.<SimpleComponent>create(this);",
         "    this.someInjectableTypeProvider =",
-        "        SomeInjectableType$$Factory.create(simpleComponentProvider);",
+        "        SomeInjectableType_Factory.create(simpleComponentProvider);",
         "  }",
         "",
         "  @Override",
@@ -1076,9 +1076,9 @@
         "",
         "  private void initialize(final Builder builder) {",
         "    this.someInjectedTypeMembersInjector =",
-        "        SomeInjectedType$$MembersInjector.create(SomeInjectableType$$Factory.create());",
+        "        SomeInjectedType_MembersInjector.create(SomeInjectableType_Factory.create());",
         "    this.someInjectedTypeProvider =",
-        "        SomeInjectedType$$Factory.create(someInjectedTypeMembersInjector);",
+        "        SomeInjectedType_Factory.create(someInjectedTypeMembersInjector);",
         "  }",
         "",
         "  @Override",
@@ -1153,7 +1153,7 @@
         "",
         "  private void initialize(final Builder builder) {",
         "    this.someInjectableTypeProvider =",
-        "        SomeInjectableType$$Factory.create((MembersInjector) MembersInjectors.noOp());",
+        "        SomeInjectableType_Factory.create((MembersInjector) MembersInjectors.noOp());",
         "  }",
         "",
         "  @Override",
@@ -1250,7 +1250,7 @@
         "        return provided;",
         "      }",
         "    };",
-        "    this.bProvider = B$$Factory.create(aProvider);",
+        "    this.bProvider = B_Factory.create(aProvider);",
         "  }",
         "",
         "  @Override",
@@ -1338,7 +1338,7 @@
         "import javax.inject.Provider;",
         "import other.test.A;",
         "import other.test.TestModule;",
-        "import other.test.TestModule$$AFactory;",
+        "import other.test.TestModule_AFactory;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
@@ -1359,8 +1359,8 @@
         "  }",
         "",
         "  private void initialize(final Builder builder) {",
-        "    this.aProvider = test.TestModule$$AFactory.create(builder.testModule);",
-        "    this.aProvider1 = TestModule$$AFactory.create(builder.testModule1);",
+        "    this.aProvider = test.TestModule_AFactory.create(builder.testModule);",
+        "    this.aProvider1 = TestModule_AFactory.create(builder.testModule1);",
         "  }",
         "",
         "  @Override",
@@ -1488,9 +1488,9 @@
         "  }",
         "",
         "  private void initialize(final Builder builder) {",
-        "    this.bProvider = B$$Factory.create(C$$Factory.create());",
-        "    this.aProvider = A$$Factory.create(bProvider);",
-        "    this.xProvider = X$$Factory.create(C$$Factory.create());",
+        "    this.bProvider = B_Factory.create(C_Factory.create());",
+        "    this.aProvider = A_Factory.create(bProvider);",
+        "    this.xProvider = X_Factory.create(C_Factory.create());",
         "  }",
         "",
         "  @Override",
@@ -1500,7 +1500,7 @@
         "",
         "  @Override",
         "  public C c() {",
-        "    return C$$Factory.create().get();",
+        "    return C_Factory.create().get();",
         "  }",
         "",
         "  @Override",
@@ -1593,7 +1593,7 @@
         "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
-        "    return SomeInjectableType$$Factory.create().get();",
+        "    return SomeInjectableType_Factory.create().get();",
         "  }",
         "",
         "  public static final class Builder {",
@@ -1681,7 +1681,7 @@
         "",
         "  @Override",
         "  public SomeInjectableType someInjectableType() {",
-        "    return SomeInjectableType$$Factory.create().get();",
+        "    return SomeInjectableType_Factory.create().get();",
         "  }",
         "",
         "  public static final class Builder {",
@@ -1815,7 +1815,7 @@ public void genericTestToLetMeDebugInEclipse() {
          "  }",
          "",
          "  private void initialize() {",
-         "    this.dProvider = new D$$Factory(B$$Factory.INSTANCE);",
+         "    this.dProvider = new D_Factory(B_Factory.INSTANCE);",
          "  }",
          "",
          "  @Override",
diff --git a/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
index 916f20057..6310b1d16 100644
--- a/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
@@ -126,7 +126,7 @@
         "class GenericClass<T> {",
         "  @Inject GenericClass(T t) {}",
         "}");
-    JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass$$Factory",
+    JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass_Factory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
@@ -134,10 +134,10 @@
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class GenericClass$$Factory<T> implements Factory<GenericClass<T>> {",
+        "public final class GenericClass_Factory<T> implements Factory<GenericClass<T>> {",
         "  private final Provider<T> tProvider;",
         "",
-        "  public GenericClass$$Factory(Provider<T> tProvider) {",
+        "  public GenericClass_Factory(Provider<T> tProvider) {",
         "    assert tProvider != null;",
         "    this.tProvider = tProvider;",
         "  }",
@@ -148,7 +148,7 @@
         "  }",
         "",
         "  public static <T> Factory<GenericClass<T>> create(Provider<T> tProvider) {",
-        "    return new GenericClass$$Factory<T>(tProvider);",
+        "    return new GenericClass_Factory<T>(tProvider);",
         "  }",
         "}");
     assertAbout(javaSource()).that(file)
@@ -170,7 +170,7 @@
         "",
         " @Inject void register(B b) {}",
         "}");
-    JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass$$Factory",
+    JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass_Factory",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -178,10 +178,10 @@
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class GenericClass$$Factory<A, B> implements Factory<GenericClass<A, B>> {",
+        "public final class GenericClass_Factory<A, B> implements Factory<GenericClass<A, B>> {",
         "  private final MembersInjector<GenericClass<A, B>> membersInjector;",
         "",
-        "  public GenericClass$$Factory(MembersInjector<GenericClass<A, B>> membersInjector) {",
+        "  public GenericClass_Factory(MembersInjector<GenericClass<A, B>> membersInjector) {",
         "    assert membersInjector != null;",
         "    this.membersInjector = membersInjector;",
         "  }",
@@ -195,7 +195,7 @@
         "",
         "  public static <A, B> Factory<GenericClass<A, B>> create(",
         "      MembersInjector<GenericClass<A, B>> membersInjector) {",
-        "    return new GenericClass$$Factory<A, B>(membersInjector);",
+        "    return new GenericClass_Factory<A, B>(membersInjector);",
         "  }",
         "}");
     assertAbout(javaSource()).that(file)
@@ -213,7 +213,7 @@
         "class GenericClass<T> {",
         "  @Inject GenericClass() {}",
         "}");
-    JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass$$Factory",
+    JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass_Factory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
@@ -221,7 +221,7 @@
         "",
         "@SuppressWarnings(\"rawtypes\")",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public enum GenericClass$$Factory implements Factory<GenericClass> {",
+        "public enum GenericClass_Factory implements Factory<GenericClass> {",
         "  INSTANCE;",
         "",
         "  @Override",
@@ -250,7 +250,7 @@
         "class GenericClass<A, B> {",
         "  @Inject GenericClass(A a, B b) {}",
         "}");
-    JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass$$Factory",
+    JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass_Factory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
@@ -258,11 +258,11 @@
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class GenericClass$$Factory<A, B> implements Factory<GenericClass<A, B>> {",
+        "public final class GenericClass_Factory<A, B> implements Factory<GenericClass<A, B>> {",
         "  private final Provider<A> aProvider;",
         "  private final Provider<B> bProvider;",
         "",
-        "  public GenericClass$$Factory(Provider<A> aProvider, Provider<B> bProvider) {",
+        "  public GenericClass_Factory(Provider<A> aProvider, Provider<B> bProvider) {",
         "    assert aProvider != null;",
         "    this.aProvider = aProvider;",
         "    assert bProvider != null;",
@@ -276,7 +276,7 @@
         "",
         "  public static <A, B> Factory<GenericClass<A, B>> create(",
         "      Provider<A> aProvider, Provider<B> bProvider) {",
-        "    return new GenericClass$$Factory<A, B>(aProvider, bProvider);",
+        "    return new GenericClass_Factory<A, B>(aProvider, bProvider);",
         "  }",
         "}");
     assertAbout(javaSource()).that(file)
@@ -297,7 +297,7 @@
         "    C extends List<? super String>> {",
         "  @Inject GenericClass(A a, B b, C c) {}",
         "}");
-    JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass$$Factory",
+    JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass_Factory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
@@ -306,7 +306,7 @@
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class GenericClass$$Factory<A extends Number & Comparable<A>,",
+        "public final class GenericClass_Factory<A extends Number & Comparable<A>,",
         "        B extends List<? extends String>,",
         "        C extends List<? super String>>",
         "    implements Factory<GenericClass<A, B, C>> {",
@@ -314,7 +314,7 @@
         "  private final Provider<B> bProvider;",
         "  private final Provider<C> cProvider;",
         "",
-        "  public GenericClass$$Factory(Provider<A> aProvider,",
+        "  public GenericClass_Factory(Provider<A> aProvider,",
         "      Provider<B> bProvider,",
         "      Provider<C> cProvider) {",
         "    assert aProvider != null;",
@@ -334,7 +334,7 @@
         "      B extends List<? extends String>,",
         "      C extends List<? super String>> Factory<GenericClass<A, B, C>> create(",
         "          Provider<A> aProvider, Provider<B> bProvider, Provider<C> cProvider) {",
-        "    return new GenericClass$$Factory<A, B, C>(aProvider, bProvider, cProvider);",
+        "    return new GenericClass_Factory<A, B, C>(aProvider, bProvider, cProvider);",
         "  }",
         "}");
     assertAbout(javaSource()).that(file)
@@ -357,7 +357,7 @@
         "                       @QualifierA String qs, Lazy<String> ls,",
         "                       B b, B b2, Provider<B> pb, @QualifierA B qb, Lazy<B> lb) {}",
         "}");
-    JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass$$Factory",
+    JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass_Factory",
         "package test;",
         "",
         "import dagger.internal.DoubleCheckLazy;",
@@ -366,7 +366,7 @@
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class GenericClass$$Factory<A, B> implements Factory<GenericClass<A, B>> {",
+        "public final class GenericClass_Factory<A, B> implements Factory<GenericClass<A, B>> {",
         "  private final Provider<A> aAndA2AndPaAndLaProvider;",
         "  private final Provider<A> qaProvider;",
         "  private final Provider<String> sAndS2AndPsAndLsProvider;",
@@ -374,7 +374,7 @@
         "  private final Provider<B> bAndB2AndPbAndLbProvider;",
         "  private final Provider<B> qbProvider;",
         "",
-        "  public GenericClass$$Factory(Provider<A> aAndA2AndPaAndLaProvider,",
+        "  public GenericClass_Factory(Provider<A> aAndA2AndPaAndLaProvider,",
         "      Provider<A> qaProvider,", 
         "      Provider<String> sAndS2AndPsAndLsProvider,",
         "      Provider<String> qsProvider,",
@@ -421,7 +421,7 @@
         "      Provider<String> qsProvider,",
         "      Provider<B> bAndB2AndPbAndLbProvider,",
         "      Provider<B> qbProvider) {",
-        "    return new GenericClass$$Factory<A, B>(",
+        "    return new GenericClass_Factory<A, B>(",
         "        aAndA2AndPaAndLaProvider,",
         "        qaProvider,",
         "        sAndS2AndPsAndLsProvider,",
@@ -618,7 +618,7 @@
         "  @Inject InjectConstructor(String s) {}",
         "}");
     JavaFileObject expected = JavaFileObjects.forSourceLines(
-        "test.InjectConstructor$$Factory",
+        "test.InjectConstructor_Factory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
@@ -626,12 +626,12 @@
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class InjectConstructor$$Factory ",
+        "public final class InjectConstructor_Factory ",
         "    implements Factory<InjectConstructor> {",
         "",
         "  private final Provider<String> sProvider;",
         "",
-        "  public InjectConstructor$$Factory(Provider<String> sProvider) {",
+        "  public InjectConstructor_Factory(Provider<String> sProvider) {",
         "    assert sProvider != null;",
         "    this.sProvider = sProvider;",
         "  }",
@@ -641,7 +641,7 @@
         "  }",
         "",
         "  public static Factory<InjectConstructor> create(Provider<String> sProvider) {",
-        "    return new InjectConstructor$$Factory(sProvider);",
+        "    return new InjectConstructor_Factory(sProvider);",
         "  }",
         "}");
     assertAbout(javaSource()).that(file).processedWith(new ComponentProcessor())
@@ -661,7 +661,7 @@
         "  @Inject void s(String s) {}",
         "}");
     JavaFileObject expectedFactory = JavaFileObjects.forSourceLines(
-        "test.AllInjections$$Factory",
+        "test.AllInjections_Factory",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -670,13 +670,13 @@
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class AllInjections$$Factory ",
+        "public final class AllInjections_Factory ",
         "    implements Factory<AllInjections> {",
         "",
         "  private final MembersInjector<AllInjections> membersInjector;",
         "  private final Provider<String> sProvider;",
         "",
-        "  public AllInjections$$Factory(MembersInjector<AllInjections> membersInjector, ",
+        "  public AllInjections_Factory(MembersInjector<AllInjections> membersInjector, ",
         "      Provider<String> sProvider) {",
         "    assert membersInjector != null;",
         "    this.membersInjector = membersInjector;",
@@ -693,7 +693,7 @@
         "  public static Factory<AllInjections> create(",
         "      MembersInjector<AllInjections> membersInjector, ",
         "      Provider<String> sProvider) {",
-        "    return new AllInjections$$Factory(membersInjector, sProvider);",
+        "    return new AllInjections_Factory(membersInjector, sProvider);",
         "  }",
         "}");
     assertAbout(javaSource()).that(file).processedWith(new ComponentProcessor())
@@ -716,7 +716,7 @@
         "  @Inject B() {}",
         "}");
     JavaFileObject expectedFactory = JavaFileObjects.forSourceLines(
-        "test.B$$Factory",
+        "test.B_Factory",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -724,11 +724,11 @@
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class B$$Factory implements Factory<B> {",
+        "public final class B_Factory implements Factory<B> {",
         "",
         "  private final MembersInjector<B> membersInjector;",
         "",
-        "  public B$$Factory(MembersInjector<B> membersInjector) {",
+        "  public B_Factory(MembersInjector<B> membersInjector) {",
         "    assert membersInjector != null;",
         "    this.membersInjector = membersInjector;",
         "  }",
@@ -740,7 +740,7 @@
         "  }",
         "",
         "  public static Factory<B> create(MembersInjector<B> membersInjector) {",
-        "    return new B$$Factory(membersInjector);",
+        "    return new B_Factory(membersInjector);",
         "  }",
         "}");
     assertAbout(javaSources()).that(ImmutableList.of(aFile, bFile))
@@ -761,7 +761,7 @@ public void wildcardDependency() {
         "  @Inject InjectConstructor(List<? extends Object> objects) {}",
         "}");
     JavaFileObject expected = JavaFileObjects.forSourceLines(
-        "test.InjectConstructor$$Factory",
+        "test.InjectConstructor_Factory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
@@ -770,12 +770,12 @@ public void wildcardDependency() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class InjectConstructor$$Factory ",
+        "public final class InjectConstructor_Factory ",
         "    implements Factory<InjectConstructor> {",
         "",
         "  private final Provider<List<? extends Object>> objectsProvider;",
         "",
-        "  public InjectConstructor$$Factory(Provider<List<? extends Object>> objectsProvider) {",
+        "  public InjectConstructor_Factory(Provider<List<? extends Object>> objectsProvider) {",
         "    assert objectsProvider != null;",
         "    this.objectsProvider = objectsProvider;",
         "  }",
@@ -786,7 +786,7 @@ public void wildcardDependency() {
         "",
         "  public static Factory<InjectConstructor> create(",
         "      Provider<List<? extends Object>> objectsProvider) {",
-        "    return new InjectConstructor$$Factory(objectsProvider);",
+        "    return new InjectConstructor_Factory(objectsProvider);",
         "  }",
         "}");
     assertAbout(javaSource()).that(file).processedWith(new ComponentProcessor())
@@ -810,7 +810,7 @@ public void basicNameCollision() {
         "  @Inject InjectConstructor(Factory factory) {}",
         "}");
     JavaFileObject expected = JavaFileObjects.forSourceLines(
-        "test.InjectConstructor$$Factory",
+        "test.InjectConstructor_Factory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
@@ -818,12 +818,12 @@ public void basicNameCollision() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class InjectConstructor$$Factory ",
+        "public final class InjectConstructor_Factory ",
         "    implements Factory<InjectConstructor> {",
         "",
         "  private final Provider<other.pkg.Factory> factoryProvider;",
         "",
-        "  public InjectConstructor$$Factory(Provider<other.pkg.Factory> factoryProvider) {",
+        "  public InjectConstructor_Factory(Provider<other.pkg.Factory> factoryProvider) {",
         "    assert factoryProvider != null;",
         "    this.factoryProvider = factoryProvider;",
         "  }",
@@ -834,7 +834,7 @@ public void basicNameCollision() {
         "",
         "  public static Factory<InjectConstructor> create(",
         "      Provider<other.pkg.Factory> factoryProvider) {",
-        "    return new InjectConstructor$$Factory(factoryProvider);",
+        "    return new InjectConstructor_Factory(factoryProvider);",
         "  }",
         "}");
     assertAbout(javaSources()).that(ImmutableList.of(factoryFile, file))
@@ -861,7 +861,7 @@ public void nestedNameCollision() {
         "  @Inject InjectConstructor(Outer.Factory factory) {}",
         "}");
     JavaFileObject expected = JavaFileObjects.forSourceLines(
-        "test.InjectConstructor$$Factory",
+        "test.InjectConstructor_Factory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
@@ -870,12 +870,12 @@ public void nestedNameCollision() {
         "import other.pkg.Outer;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class InjectConstructor$$Factory ",
+        "public final class InjectConstructor_Factory ",
         "    implements Factory<InjectConstructor> {",
         "",
         "  private final Provider<Outer.Factory> factoryProvider;",
         "",
-        "  public InjectConstructor$$Factory(Provider<Outer.Factory> factoryProvider) {",
+        "  public InjectConstructor_Factory(Provider<Outer.Factory> factoryProvider) {",
         "    assert factoryProvider != null;",
         "    this.factoryProvider = factoryProvider;",
         "  }",
@@ -886,7 +886,7 @@ public void nestedNameCollision() {
         "",
         "  public static Factory<InjectConstructor> create(",
         "      Provider<Outer.Factory> factoryProvider) {",
-        "    return new InjectConstructor$$Factory(factoryProvider);",
+        "    return new InjectConstructor_Factory(factoryProvider);",
         "  }",
         "}");
     assertAbout(javaSources()).that(ImmutableList.of(factoryFile, file))
@@ -915,7 +915,7 @@ public void samePackageNameCollision() {
         "  @Inject InjectConstructor(other.pkg.CommonName otherPackage, CommonName samePackage) {}",
         "}");
     JavaFileObject expected = JavaFileObjects.forSourceLines(
-        "test.InjectConstructor$$Factory",
+        "test.InjectConstructor_Factory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
@@ -924,13 +924,13 @@ public void samePackageNameCollision() {
         "import other.pkg.CommonName;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class InjectConstructor$$Factory ",
+        "public final class InjectConstructor_Factory ",
         "    implements Factory<InjectConstructor> {",
         "",
         "  private final Provider<CommonName> otherPackageProvider;",
         "  private final Provider<test.CommonName> samePackageProvider;",
         "",
-        "  public InjectConstructor$$Factory(Provider<CommonName> otherPackageProvider,",
+        "  public InjectConstructor_Factory(Provider<CommonName> otherPackageProvider,",
         "      Provider<test.CommonName> samePackageProvider) {",
         "    assert otherPackageProvider != null;",
         "    this.otherPackageProvider = otherPackageProvider;",
@@ -945,7 +945,7 @@ public void samePackageNameCollision() {
         "  public static Factory<InjectConstructor> create(",
         "      Provider<CommonName> otherPackageProvider,",
         "      Provider<test.CommonName> samePackageProvider) {",
-        "    return new InjectConstructor$$Factory(otherPackageProvider, samePackageProvider);",
+        "    return new InjectConstructor_Factory(otherPackageProvider, samePackageProvider);",
         "  }",
         "}");
     assertAbout(javaSources())
@@ -965,14 +965,14 @@ public void noDeps() {
         "final class SimpleType {",
         "  @Inject SimpleType() {}",
         "}");
-    JavaFileObject factory = JavaFileObjects.forSourceLines("test.SimpleType$$Factory",
+    JavaFileObject factory = JavaFileObjects.forSourceLines("test.SimpleType_Factory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public enum SimpleType$$Factory implements Factory<SimpleType> {",
+        "public enum SimpleType_Factory implements Factory<SimpleType> {",
         "  INSTANCE;",
         "",
         "  @Override public SimpleType get() {",
@@ -1010,14 +1010,14 @@ public void noDeps() {
         "  }",
         "}");
     JavaFileObject aFactory = JavaFileObjects.forSourceLines(
-        "test.OuterType$A$$Factory",
+        "test.OuterType$A_Factory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "import test.OuterType.A;",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public enum OuterType$A$$Factory implements Factory<A> {",
+        "public enum OuterType$A_Factory implements Factory<A> {",
         "  INSTANCE;",
         "",
         "  @Override public A get() {",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 7593af507..0c10d1984 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -138,9 +138,9 @@ public void mapBindingsWithEnumKey() {
         "",
         "  private void initialize(final Builder builder) {",
         "    this.mapOfPathEnumAndProviderOfHandlerContribution1 =",
-        "        MapModuleOne$$ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
+        "        MapModuleOne_ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
         "    this.mapOfPathEnumAndProviderOfHandlerContribution2 =",
-        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
+        "        MapModuleTwo_ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
         "    this.mapOfPathEnumAndProviderOfHandlerProvider =",
         "        MapProviderFactory.<PathEnum, Handler>builder(2)",
         "            .put(test.PathEnum.ADMIN,",
@@ -306,9 +306,9 @@ public void mapBindingsWithStringKey() {
         "",
         "  private void initialize(final Builder builder) {",
         "    this.mapOfStringAndProviderOfHandlerContribution1 =",
-        "        MapModuleOne$$ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
+        "        MapModuleOne_ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
         "    this.mapOfStringAndProviderOfHandlerContribution2 =",
-        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
+        "        MapModuleTwo_ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
         "    this.mapOfStringAndProviderOfHandlerProvider =",
         "        MapProviderFactory.<String, Handler>builder(2)",
         "            .put(\"Admin\", mapOfStringAndProviderOfHandlerContribution1)",
@@ -476,9 +476,9 @@ public void mapBindingsWithNonProviderValue() {
         "",
         "  private void initialize(final Builder builder) {",
         "    this.mapOfPathEnumAndProviderOfHandlerContribution1 =",
-        "        MapModuleOne$$ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
+        "        MapModuleOne_ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
         "    this.mapOfPathEnumAndProviderOfHandlerContribution2 =",
-        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
+        "        MapModuleTwo_ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
         "    this.mapOfPathEnumAndProviderOfHandlerProvider =",
         "        MapProviderFactory.<PathEnum, Handler>builder(2)",
         "            .put(test.PathEnum.ADMIN,",
@@ -598,7 +598,7 @@ public void injectMapWithoutMapBinding() {
         "  }",
         "",
         "  private void initialize(final Builder builder) {",
-        "    this.provideAMapProvider = MapModule$$ProvideAMapFactory.create(builder.mapModule);",
+        "    this.provideAMapProvider = MapModule_ProvideAMapFactory.create(builder.mapModule);",
         "  }",
         "",
         "  @Override",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
index 1732b7d58..6025b738b 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -179,9 +179,9 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "",
         "  private void initialize(final Builder builder) {",
         "    this.mapOfPathKeyAndProviderOfHandlerContribution1 =",
-        "        MapModuleOne$$ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
+        "        MapModuleOne_ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
         "    this.mapOfPathKeyAndProviderOfHandlerContribution2 =",
-        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
+        "        MapModuleTwo_ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
         "    this.mapOfPathKeyAndProviderOfHandlerProvider =",
         "        MapProviderFactory.<PathKey, Handler>builder(2)",
         "            .put(PathKeyCreator.create(PathEnum.ADMIN, \"AdminPath\"),",
@@ -353,9 +353,9 @@ public void mapKeyComponentFileWithDefaultField() {
         "",
         "  private void initialize(final Builder builder) {",
         "    this.mapOfPathKeyAndProviderOfHandlerContribution1 =",
-        "        MapModuleOne$$ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
+        "        MapModuleOne_ProvideAdminHandlerFactory.create(builder.mapModuleOne);",
         "    this.mapOfPathKeyAndProviderOfHandlerContribution2 =",
-        "        MapModuleTwo$$ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
+        "        MapModuleTwo_ProvideLoginHandlerFactory.create(builder.mapModuleTwo);",
         "    this.mapOfPathKeyAndProviderOfHandlerProvider =",
         "        MapProviderFactory.<PathKey, Handler>builder(2)",
         "            .put(PathKeyCreator.create(PathEnum.ADMIN, \"DefaultPath\"),",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
index 0135e58e8..25762ea94 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
@@ -81,7 +81,7 @@ public void parentClass_noInjectedMembers() {
         "",
         "  private void initialize(final Builder builder) {",
         "    this.childProvider =",
-        "        Child$$Factory.create((MembersInjector) MembersInjectors.noOp());",
+        "        Child_Factory.create((MembersInjector) MembersInjectors.noOp());",
         "  }",
         "",
         "  @Override",
@@ -170,9 +170,9 @@ public void parentClass_injectedMembersInSupertype() {
         "  }",
         "",
         "  private void initialize(final Builder builder) {",
-        "    this.parentMembersInjector = Parent$$MembersInjector.create(Dep$$Factory.create());",
+        "    this.parentMembersInjector = Parent_MembersInjector.create(Dep_Factory.create());",
         "    this.childMembersInjector = MembersInjectors.delegatingTo(parentMembersInjector);",
-        "    this.childProvider = Child$$Factory.create(childMembersInjector);",
+        "    this.childProvider = Child_Factory.create(childMembersInjector);",
         "  }",
         "",
         "  @Override",
@@ -209,7 +209,7 @@ public void parentClass_injectedMembersInSupertype() {
         "",
         " @Inject void register(B b) {}",
         "}");
-    JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass$$MembersInjector",
+    JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass_MembersInjector",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -217,12 +217,12 @@ public void parentClass_injectedMembersInSupertype() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class GenericClass$$MembersInjector<A, B>",
+        "public final class GenericClass_MembersInjector<A, B>",
         "    implements MembersInjector<GenericClass<A, B>> {",
         "  private final Provider<A> aProvider;",
         "  private final Provider<B> bProvider;",
         "",
-        "  public GenericClass$$MembersInjector(Provider<A> aProvider, Provider<B> bProvider) {",
+        "  public GenericClass_MembersInjector(Provider<A> aProvider, Provider<B> bProvider) {",
         "    assert aProvider != null;",
         "    this.aProvider = aProvider;",
         "    assert bProvider != null;",
@@ -240,7 +240,7 @@ public void parentClass_injectedMembersInSupertype() {
         "",
         "  public static <A, B> MembersInjector<GenericClass<A, B>> create(",
         "      Provider<A> aProvider, Provider<B> bProvider) {",
-        "    return new GenericClass$$MembersInjector<A, B>(aProvider, bProvider);",
+        "    return new GenericClass_MembersInjector<A, B>(aProvider, bProvider);",
         "  }",
         "}");
     assertAbout(javaSource()).that(file)
@@ -289,7 +289,7 @@ public void parentClass_injectedMembersInSupertype() {
         "",
         "  @Inject Child() {}",
         "}");
-    JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass$$MembersInjector",
+    JavaFileObject expected = JavaFileObjects.forSourceLines("test.GenericClass_MembersInjector",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -297,13 +297,13 @@ public void parentClass_injectedMembersInSupertype() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Child$$MembersInjector<T>",
+        "public final class Child_MembersInjector<T>",
         "    implements MembersInjector<Child<T>> {",
         "  private final MembersInjector<Parent<T, A>> supertypeInjector;",
         "  private final Provider<A> aProvider;",
         "  private final Provider<T> tProvider;",
         "",
-        "  public Child$$MembersInjector(",
+        "  public Child_MembersInjector(",
         "      MembersInjector<Parent<T, A>> supertypeInjector, ",
         "      Provider<A> aProvider, Provider<T> tProvider) {",
         "    assert supertypeInjector != null;",
@@ -327,7 +327,7 @@ public void parentClass_injectedMembersInSupertype() {
         "  public static <T> MembersInjector<Child<T>> create(",
         "      MembersInjector<Parent<T, A>> supertypeInjector, ",
         "      Provider<A> aProvider, Provider<T> tProvider) {",
-        "    return new Child$$MembersInjector<T>(supertypeInjector, aProvider, tProvider);",
+        "    return new Child_MembersInjector<T>(supertypeInjector, aProvider, tProvider);",
         "  }",
         "}");
     assertAbout(javaSources()).that(ImmutableList.of(a, a2, parent, child))
@@ -349,7 +349,7 @@ public void parentClass_injectedMembersInSupertype() {
         "  @Inject Lazy<String> lazyString;",
         "  @Inject Provider<String> stringProvider;",
         "}");
-    JavaFileObject expected = JavaFileObjects.forSourceLines("test.FieldInjection$$MembersInjector",
+    JavaFileObject expected = JavaFileObjects.forSourceLines("test.FieldInjection_MembersInjector",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -358,12 +358,12 @@ public void parentClass_injectedMembersInSupertype() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class FieldInjection$$MembersInjector ",
+        "public final class FieldInjection_MembersInjector ",
         "    implements MembersInjector<FieldInjection> {",
         "",
         "  private final Provider<String> stringProvider;",
         "",
-        "  public FieldInjection$$MembersInjector(Provider<String> stringProvider) {",
+        "  public FieldInjection_MembersInjector(Provider<String> stringProvider) {",
         "    assert stringProvider != null;",
         "    this.stringProvider = stringProvider;",
         "  }",
@@ -379,7 +379,7 @@ public void parentClass_injectedMembersInSupertype() {
         "",
         "  public static MembersInjector<FieldInjection> create(",
         "      Provider<String> stringProvider) {",
-        "    return new FieldInjection$$MembersInjector(stringProvider);",
+        "    return new FieldInjection_MembersInjector(stringProvider);",
         "  }",
         "}");
     assertAbout(javaSource()).that(file).processedWith(new ComponentProcessor())
@@ -402,7 +402,7 @@ public void parentClass_injectedMembersInSupertype() {
         "      String string, Lazy<String> lazyString, Provider<String> stringProvider) {}",
         "}");
     JavaFileObject expected = JavaFileObjects.forSourceLines(
-        "test.MethodInjection$$MembersInjector",
+        "test.MethodInjection_MembersInjector",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -411,12 +411,12 @@ public void parentClass_injectedMembersInSupertype() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class MethodInjection$$MembersInjector ",
+        "public final class MethodInjection_MembersInjector ",
         "    implements MembersInjector<MethodInjection> {",
         "",
         "  private final Provider<String> stringProvider;",
         "",
-        "  public MethodInjection$$MembersInjector(Provider<String> stringProvider) {",
+        "  public MethodInjection_MembersInjector(Provider<String> stringProvider) {",
         "    assert stringProvider != null;",
         "    this.stringProvider = stringProvider;",
         "  }",
@@ -433,7 +433,7 @@ public void parentClass_injectedMembersInSupertype() {
         "",
         "  public static MembersInjector<MethodInjection> create(",
         "      Provider<String> stringProvider) {",
-        "    return new MethodInjection$$MembersInjector(stringProvider);",
+        "    return new MethodInjection_MembersInjector(stringProvider);",
         "  }",
         "}");
     assertAbout(javaSource()).that(file).processedWith(new ComponentProcessor())
@@ -456,7 +456,7 @@ public void parentClass_injectedMembersInSupertype() {
         "  @Inject void setObject(Object o) {}",
         "}");
     JavaFileObject expected = JavaFileObjects.forSourceLines(
-        "test.MixedMemberInjection$$MembersInjector",
+        "test.MixedMemberInjection_MembersInjector",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -464,13 +464,13 @@ public void parentClass_injectedMembersInSupertype() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class MixedMemberInjection$$MembersInjector ",
+        "public final class MixedMemberInjection_MembersInjector ",
         "    implements MembersInjector<MixedMemberInjection> {",
         "",
         "  private final Provider<String> stringAndSProvider;",
         "  private final Provider<Object> objectAndOProvider;",
         "",
-        "  public MixedMemberInjection$$MembersInjector(Provider<String> stringAndSProvider,",
+        "  public MixedMemberInjection_MembersInjector(Provider<String> stringAndSProvider,",
         "      Provider<Object> objectAndOProvider) {",
         "    assert stringAndSProvider != null;",
         "    this.stringAndSProvider = stringAndSProvider;",
@@ -491,7 +491,7 @@ public void parentClass_injectedMembersInSupertype() {
         "  public static MembersInjector<MixedMemberInjection> create(",
         "      Provider<String> stringAndSProvider,",
         "      Provider<Object> objectAndOProvider) {",
-        "    return new MixedMemberInjection$$MembersInjector(",
+        "    return new MixedMemberInjection_MembersInjector(",
         "        stringAndSProvider, objectAndOProvider);",
         "  }",
         "}");
@@ -512,7 +512,7 @@ public void parentClass_injectedMembersInSupertype() {
         "  @Inject void s(String s) {}",
         "}");
     JavaFileObject expectedMembersInjector = JavaFileObjects.forSourceLines(
-        "test.AllInjections$$MembersInjector",
+        "test.AllInjections_MembersInjector",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -520,12 +520,12 @@ public void parentClass_injectedMembersInSupertype() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class AllInjections$$MembersInjector ",
+        "public final class AllInjections_MembersInjector ",
         "    implements MembersInjector<AllInjections> {",
         "",
         "  private final Provider<String> sProvider;",
         "",
-        "  public AllInjections$$MembersInjector(Provider<String> sProvider) {",
+        "  public AllInjections_MembersInjector(Provider<String> sProvider) {",
         "    assert sProvider != null;",
         "    this.sProvider = sProvider;",
         "  }",
@@ -539,7 +539,7 @@ public void parentClass_injectedMembersInSupertype() {
         "  }",
         "",
         "  public static MembersInjector<AllInjections> create(Provider<String> sProvider) {",
-        "    return new AllInjections$$MembersInjector(sProvider);",
+        "    return new AllInjections_MembersInjector(sProvider);",
         "  }",
         "}");
     assertAbout(javaSource()).that(file).processedWith(new ComponentProcessor())
@@ -562,7 +562,7 @@ public void parentClass_injectedMembersInSupertype() {
         "  @Inject String s;",
         "}");
     JavaFileObject expectedMembersInjector = JavaFileObjects.forSourceLines(
-        "test.AllInjections$$MembersInjector",
+        "test.AllInjections_MembersInjector",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -570,13 +570,13 @@ public void parentClass_injectedMembersInSupertype() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class B$$MembersInjector ",
+        "public final class B_MembersInjector ",
         "    implements MembersInjector<B> {",
         "",
         "  private final MembersInjector<A> supertypeInjector;",
         "  private final Provider<String> sProvider;",
         "",
-        "  public B$$MembersInjector(MembersInjector<A> supertypeInjector,",
+        "  public B_MembersInjector(MembersInjector<A> supertypeInjector,",
         "      Provider<String> sProvider) {",
         "    assert supertypeInjector != null;",
         "    this.supertypeInjector = supertypeInjector;",
@@ -595,7 +595,7 @@ public void parentClass_injectedMembersInSupertype() {
         "  public static MembersInjector<B> create(",
         "      MembersInjector<A> supertypeInjector,",
         "      Provider<String> sProvider) {",
-        "    return new B$$MembersInjector(supertypeInjector, sProvider);",
+        "    return new B_MembersInjector(supertypeInjector, sProvider);",
         "  }",
         "}");
     assertAbout(javaSources()).that(ImmutableList.of(aFile, bFile))
@@ -624,7 +624,7 @@ public void parentClass_injectedMembersInSupertype() {
         "  }",
         "}");
     JavaFileObject bMembersInjector = JavaFileObjects.forSourceLines(
-        "test.OuterType$B$$MembersInjector",
+        "test.OuterType$B_MembersInjector",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -634,10 +634,10 @@ public void parentClass_injectedMembersInSupertype() {
         "import test.OuterType.B;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class OuterType$B$$MembersInjector implements MembersInjector<B> {",
+        "public final class OuterType$B_MembersInjector implements MembersInjector<B> {",
         "  private final Provider<A> aProvider;",
         "",
-        "  public OuterType$B$$MembersInjector(Provider<A> aProvider) {",
+        "  public OuterType$B_MembersInjector(Provider<A> aProvider) {",
         "    assert aProvider != null;",
         "    this.aProvider = aProvider;",
         "  }",
@@ -651,7 +651,7 @@ public void parentClass_injectedMembersInSupertype() {
         "  }",
         "",
         "  public static MembersInjector<B> create(Provider<A> aProvider) {",
-        "    return new OuterType$B$$MembersInjector(aProvider);",
+        "    return new OuterType$B_MembersInjector(aProvider);",
         "  }",
         "}");
     assertAbout(javaSources()).that(ImmutableList.of(nestedTypesFile))
diff --git a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index bfbf5b5a5..56a51df7b 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -384,17 +384,17 @@ private String formatModuleErrorMessage(String msg) {
         "    return \"\";",
         "  }",
         "}");
-    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProvideStringFactory",
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule_ProvideStringFactory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProvideStringFactory implements Factory<String> {",
+        "public final class TestModule_ProvideStringFactory implements Factory<String> {",
         "  private final TestModule module;",
         "",
-        "  public TestModule$$ProvideStringFactory(TestModule module) {",
+        "  public TestModule_ProvideStringFactory(TestModule module) {",
         "    assert module != null;",
         "    this.module = module;",
         "  }",
@@ -408,7 +408,7 @@ private String formatModuleErrorMessage(String msg) {
         "  }",
         "",
         "  public static Factory<String> create(TestModule module) {",
-        "    return new TestModule$$ProvideStringFactory(module);",
+        "    return new TestModule_ProvideStringFactory(module);",
         "  }",
         "}");
     assertAbout(javaSource()).that(moduleFile)
@@ -430,17 +430,17 @@ private String formatModuleErrorMessage(String msg) {
         "    return \"\";",
         "  }",
         "}");
-    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProvideStringFactory",
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule_ProvideStringFactory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProvideStringFactory implements Factory<String> {",
+        "public final class TestModule_ProvideStringFactory implements Factory<String> {",
         "  private final TestModule module;",
         "",
-        "  public TestModule$$ProvideStringFactory(TestModule module) {",
+        "  public TestModule_ProvideStringFactory(TestModule module) {",
         "    assert module != null;",
         "    this.module = module;",
         "  }",
@@ -450,7 +450,7 @@ private String formatModuleErrorMessage(String msg) {
         "  }",
         "",
         "  public static Factory<String> create(TestModule module) {",
-        "    return new TestModule$$ProvideStringFactory(module);",
+        "    return new TestModule_ProvideStringFactory(module);",
         "  }",
         "}");
     assertAbout(javaSource()).that(moduleFile)
@@ -471,17 +471,17 @@ private String formatModuleErrorMessage(String msg) {
         "final class TestModule {",
         "  @Provides @Nullable String provideString() { return null; }",
         "}");
-    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProvideStringFactory",
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule_ProvideStringFactory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProvideStringFactory implements Factory<String> {",
+        "public final class TestModule_ProvideStringFactory implements Factory<String> {",
         "  private final TestModule module;",
         "",
-        "  public TestModule$$ProvideStringFactory(TestModule module) {",
+        "  public TestModule_ProvideStringFactory(TestModule module) {",
         "    assert module != null;",
         "    this.module = module;",
         "  }",
@@ -493,7 +493,7 @@ private String formatModuleErrorMessage(String msg) {
         "  }",
         "",
         "  public static Factory<String> create(TestModule module) {",
-        "    return new TestModule$$ProvideStringFactory(module);",
+        "    return new TestModule_ProvideStringFactory(module);",
         "  }",
         "}");
     assertAbout(javaSources()).that(ImmutableList.of(moduleFile, NULLABLE))
@@ -552,7 +552,7 @@ private String formatModuleErrorMessage(String msg) {
         "  }",
         "}");
     JavaFileObject listFactoryFile = JavaFileObjects.forSourceLines(
-        "TestModule$$ProvideObjectsFactory",
+        "TestModule_ProvideObjectsFactory",
         "package test;",
         "",
         "import dagger.MembersInjector;",
@@ -562,13 +562,13 @@ private String formatModuleErrorMessage(String msg) {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProvideObjectsFactory implements Factory<List<Object>> {",
+        "public final class TestModule_ProvideObjectsFactory implements Factory<List<Object>> {",
         "  private final TestModule module;",
         "  private final Provider<Object> aProvider;",
         "  private final Provider<Object> bProvider;",
         "  private final MembersInjector<X> xMembersInjector;",
         "",
-        "  public TestModule$$ProvideObjectsFactory(",
+        "  public TestModule_ProvideObjectsFactory(",
         "      TestModule module,",
         "      Provider<Object> aProvider,",
         "      Provider<Object> bProvider,",
@@ -597,7 +597,7 @@ private String formatModuleErrorMessage(String msg) {
         "      Provider<Object> aProvider,",
         "      Provider<Object> bProvider,",
         "      MembersInjector<X> xMembersInjector) {",
-        "    return new TestModule$$ProvideObjectsFactory(",
+        "    return new TestModule_ProvideObjectsFactory(",
         "        module, aProvider, bProvider, xMembersInjector);",
         "  }",
         "}");
@@ -624,7 +624,7 @@ private String formatModuleErrorMessage(String msg) {
         "    return \"\";",
         "  }",
         "}");
-    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProvideStringFactory",
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule_ProvideStringFactory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
@@ -633,10 +633,10 @@ private String formatModuleErrorMessage(String msg) {
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProvideStringFactory implements Factory<Set<String>> {",
+        "public final class TestModule_ProvideStringFactory implements Factory<Set<String>> {",
         "  private final TestModule module;",
         "",
-        "  public TestModule$$ProvideStringFactory(TestModule module) {",
+        "  public TestModule_ProvideStringFactory(TestModule module) {",
         "    assert module != null;",
         "    this.module = module;",
         "  }",
@@ -646,7 +646,7 @@ private String formatModuleErrorMessage(String msg) {
         "  }",
         "",
         "  public static Factory<Set<String>> create(TestModule module) {",
-        "    return new TestModule$$ProvideStringFactory(module);",
+        "    return new TestModule_ProvideStringFactory(module);",
         "  }",
         "}");
     assertAbout(javaSource()).that(moduleFile)
@@ -671,7 +671,7 @@ private String formatModuleErrorMessage(String msg) {
         "    return null;",
         "  }",
         "}");
-    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProvideStringsFactory",
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule_ProvideStringsFactory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
@@ -679,10 +679,10 @@ private String formatModuleErrorMessage(String msg) {
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProvideStringsFactory implements Factory<Set<String>> {",
+        "public final class TestModule_ProvideStringsFactory implements Factory<Set<String>> {",
         "  private final TestModule module;",
         "",
-        "  public TestModule$$ProvideStringsFactory(TestModule module) {",
+        "  public TestModule_ProvideStringsFactory(TestModule module) {",
         "    assert module != null;",
         "    this.module = module;",
         "  }",
@@ -696,7 +696,7 @@ private String formatModuleErrorMessage(String msg) {
         "  }",
         "",
         "  public static Factory<Set<String>> create(TestModule module) {",
-        "    return new TestModule$$ProvideStringsFactory(module);",
+        "    return new TestModule_ProvideStringsFactory(module);",
         "  }",
         "}");
     assertAbout(javaSource()).that(moduleFile)
@@ -911,7 +911,7 @@ public void genericSubclassedModule() {
         "  List<Integer> integerList();",
         "}");
     JavaFileObject listBFactory = JavaFileObjects.forSourceLines(
-        "test.ParentModule$$ProvidesListBFactory",
+        "test.ParentModule_ProvidesListBFactory",
         "package test;", 
         "", 
         "import dagger.internal.Factory;",
@@ -920,12 +920,12 @@ public void genericSubclassedModule() {
         "import javax.inject.Provider;", 
         "", 
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")", 
-        "public final class ParentModule$$ProvideListBFactory<A extends CharSequence,",
+        "public final class ParentModule_ProvideListBFactory<A extends CharSequence,",
         "    B, C extends Number & Comparable<C>> implements Factory<List<B>> {", 
         "  private final ParentModule<A, B, C> module;", 
         "  private final Provider<B> bProvider;", 
         "", 
-        "  public ParentModule$$ProvideListBFactory(",
+        "  public ParentModule_ProvideListBFactory(",
         "        ParentModule<A, B, C> module, Provider<B> bProvider) {", 
         "    assert module != null;", 
         "    this.module = module;", 
@@ -944,21 +944,21 @@ public void genericSubclassedModule() {
         "", 
         "  public static <A extends CharSequence, B, C extends Number & Comparable<C>>",
         "      Factory<List<B>> create(ParentModule<A, B, C> module, Provider<B> bProvider) {",
-        "    return new ParentModule$$ProvideListBFactory<A, B, C>(module, bProvider);", 
+        "    return new ParentModule_ProvideListBFactory<A, B, C>(module, bProvider);", 
         "  }", 
         "}");
     JavaFileObject numberFactory = JavaFileObjects.forSourceLines(
-        "test.ChildNumberModule$$ProvideNumberFactory",
+        "test.ChildNumberModule_ProvideNumberFactory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class ChildNumberModule$$ProvideNumberFactory implements Factory<Number> {",
+        "public final class ChildNumberModule_ProvideNumberFactory implements Factory<Number> {",
         "  private final ChildNumberModule module;",
         "",
-        "  public ChildNumberModule$$ProvideNumberFactory(ChildNumberModule module) {",
+        "  public ChildNumberModule_ProvideNumberFactory(ChildNumberModule module) {",
         "    assert module != null;",
         "    this.module = module;",
         "  }",
@@ -973,22 +973,22 @@ public void genericSubclassedModule() {
         "  }",
         "",
         "  public static Factory<Number> create(ChildNumberModule module) {",
-        "    return new ChildNumberModule$$ProvideNumberFactory(module);",
+        "    return new ChildNumberModule_ProvideNumberFactory(module);",
         "  }",
         "}");
     JavaFileObject integerFactory = JavaFileObjects.forSourceLines(
-        "test.ChildIntegerModule$$ProvideIntegerFactory",
+        "test.ChildIntegerModule_ProvideIntegerFactory",
         "package test;",
         "",
         "import dagger.internal.Factory;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class ChildIntegerModule$$ProvideIntegerFactory",
+        "public final class ChildIntegerModule_ProvideIntegerFactory",
         "    implements Factory<Integer> {",
         "  private final ChildIntegerModule module;",
         "",
-        "  public ChildIntegerModule$$ProvideIntegerFactory(ChildIntegerModule module) {",
+        "  public ChildIntegerModule_ProvideIntegerFactory(ChildIntegerModule module) {",
         "    assert module != null;",
         "    this.module = module;",
         "  }",
@@ -1003,7 +1003,7 @@ public void genericSubclassedModule() {
         "  }",
         "",
         "  public static Factory<Integer> create(ChildIntegerModule module) {",
-        "    return new ChildIntegerModule$$ProvideIntegerFactory(module);",
+        "    return new ChildIntegerModule_ProvideIntegerFactory(module);",
         "  }",
         "}");
     assertAbout(javaSources()).that(ImmutableList.of(parent, numberChild, integerChild, component))
diff --git a/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java b/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
index 956ff6cbe..40ceb7ede 100644
--- a/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/PackageProxyTest.java
@@ -62,19 +62,19 @@
         "test.DaggerTestComponent",
         "package test;",
         "",
-        "import foreign.DaggerTestComponent__PackageProxy;",
-        "import foreign.NoDepClass$$Factory;",
-        "import foreign.NonPublicClass1$$Factory;",
-        "import foreign.NonPublicClass2$$Factory;",
+        "import foreign.DaggerTestComponent_PackageProxy;",
+        "import foreign.NoDepClass_Factory;",
+        "import foreign.NonPublicClass1_Factory;",
+        "import foreign.NonPublicClass2_Factory;",
         "import foreign.PublicClass;",
-        "import foreign.PublicClass$$Factory;",
+        "import foreign.PublicClass_Factory;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
-        "  private final DaggerTestComponent__PackageProxy foreign_Proxy =",
-        "      new DaggerTestComponent__PackageProxy();",
+        "  private final DaggerTestComponent_PackageProxy foreign_Proxy =",
+        "      new DaggerTestComponent_PackageProxy();",
         "  private Provider<PublicClass> publicClassProvider;",
         "",
         "  private DaggerTestComponent(Builder builder) {",
@@ -92,13 +92,13 @@
         "",
         "  private void initialize(final Builder builder) {",
         "    this.foreign_Proxy.nonPublicClass1Provider =",
-        "        NonPublicClass1$$Factory.create(NoDepClass$$Factory.create());",
+        "        NonPublicClass1_Factory.create(NoDepClass_Factory.create());",
         "    this.foreign_Proxy.nonPublicClass2Provider =",
-        "        NonPublicClass2$$Factory.create(NoDepClass$$Factory.create());",
-        "    this.publicClassProvider = PublicClass$$Factory.create(",
+        "        NonPublicClass2_Factory.create(NoDepClass_Factory.create());",
+        "    this.publicClassProvider = PublicClass_Factory.create(",
         "        foreign_Proxy.nonPublicClass1Provider,",
         "        foreign_Proxy.nonPublicClass2Provider,",
-        "        NoDepClass$$Factory.create());",
+        "        NoDepClass_Factory.create());",
         "  }",
         "",
         "  @Override",
@@ -190,16 +190,16 @@
         "",
         "import dagger.MembersInjector;",
         "import foreign.B;",
-        "import foreign.B$$MembersInjector;",
-        "import foreign.C$$MembersInjector;",
-        "import foreign.DaggerTestComponent__PackageProxy;",
+        "import foreign.B_MembersInjector;",
+        "import foreign.C_MembersInjector;",
+        "import foreign.DaggerTestComponent_PackageProxy;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class DaggerTestComponent implements TestComponent {",
         "  private MembersInjector<D> dMembersInjector;",
-        "  private final DaggerTestComponent__PackageProxy foreign_Proxy =",
-        "      new DaggerTestComponent__PackageProxy();",
+        "  private final DaggerTestComponent_PackageProxy foreign_Proxy =",
+        "      new DaggerTestComponent_PackageProxy();",
         "  private MembersInjector<B> bMembersInjector;",
         "  private MembersInjector<A> aMembersInjector;",
         "",
@@ -217,13 +217,13 @@
         "  }",
         "",
         "  private void initialize(final Builder builder) {",
-        "    this.dMembersInjector = D$$MembersInjector.create(NoDepClass$$Factory.create());",
+        "    this.dMembersInjector = D_MembersInjector.create(NoDepClass_Factory.create());",
         "    this.foreign_Proxy.cMembersInjector =",
-        "        C$$MembersInjector.create(dMembersInjector, NoDepClass$$Factory.create());",
-        "    this.bMembersInjector = B$$MembersInjector.create(",
-        "        foreign_Proxy.cMembersInjector, NoDepClass$$Factory.create());",
-        "    this.aMembersInjector = A$$MembersInjector.create(",
-        "        bMembersInjector, NoDepClass$$Factory.create());",
+        "        C_MembersInjector.create(dMembersInjector, NoDepClass_Factory.create());",
+        "    this.bMembersInjector = B_MembersInjector.create(",
+        "        foreign_Proxy.cMembersInjector, NoDepClass_Factory.create());",
+        "    this.aMembersInjector = A_MembersInjector.create(",
+        "        bMembersInjector, NoDepClass_Factory.create());",
         "  }",
         "",
         "  @Override",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
index 5719bf3c5..0878f42a4 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
@@ -460,7 +460,7 @@ public void publicModuleNonPublicIncludes() {
         "    return null;",
         "  }",
         "}");
-    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProduceStringFactory",
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule_ProduceStringFactory",
         "package test;",
         "",
         "import com.google.common.util.concurrent.Futures;",
@@ -472,11 +472,11 @@ public void publicModuleNonPublicIncludes() {
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory extends AbstractProducer<String> {",
+        "public final class TestModule_ProduceStringFactory extends AbstractProducer<String> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "",
-        "  public TestModule$$ProduceStringFactory(TestModule module, Executor executor) {",
+        "  public TestModule_ProduceStringFactory(TestModule module, Executor executor) {",
         "    assert module != null;",
         "    this.module = module;",
         "    assert executor != null;",
@@ -514,7 +514,7 @@ public void publicModuleNonPublicIncludes() {
         "    return null;",
         "  }",
         "}");
-    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProduceStringFactory",
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule_ProduceStringFactory",
         "package test;",
         "",
         "import com.google.common.util.concurrent.Futures;",
@@ -527,12 +527,12 @@ public void publicModuleNonPublicIncludes() {
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory",
+        "public final class TestModule_ProduceStringFactory",
         "    extends AbstractProducer<Set<String>> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "",
-        "  public TestModule$$ProduceStringFactory(TestModule module, Executor executor) {  ",
+        "  public TestModule_ProduceStringFactory(TestModule module, Executor executor) {  ",
         "    assert module != null;",
         "    this.module = module;",
         "    assert executor != null;",
@@ -569,7 +569,7 @@ public void publicModuleNonPublicIncludes() {
         "    return \"\";",
         "  }",
         "}");
-    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProduceStringFactory",
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule_ProduceStringFactory",
         "package test;",
         "",
         "import com.google.common.util.concurrent.ListenableFuture;",
@@ -580,11 +580,11 @@ public void publicModuleNonPublicIncludes() {
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory extends AbstractProducer<String> {",
+        "public final class TestModule_ProduceStringFactory extends AbstractProducer<String> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "",
-        "  public TestModule$$ProduceStringFactory(TestModule module, Executor executor) {",
+        "  public TestModule_ProduceStringFactory(TestModule module, Executor executor) {",
         "    assert module != null;",
         "    this.module = module;",
         "    assert executor != null;",
@@ -621,7 +621,7 @@ public void publicModuleNonPublicIncludes() {
         "    return \"\";",
         "  }",
         "}");
-    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProduceStringFactory",
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule_ProduceStringFactory",
         "package test;",
         "",
         "import com.google.common.collect.ImmutableSet;",
@@ -634,12 +634,12 @@ public void publicModuleNonPublicIncludes() {
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory",
+        "public final class TestModule_ProduceStringFactory",
         "    extends AbstractProducer<Set<String>> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "",
-        "  public TestModule$$ProduceStringFactory(TestModule module, Executor executor) {  ",
+        "  public TestModule_ProduceStringFactory(TestModule module, Executor executor) {  ",
         "    assert module != null;",
         "    this.module = module;",
         "    assert executor != null;",
@@ -681,7 +681,7 @@ public void publicModuleNonPublicIncludes() {
         "    return null;",
         "  }",
         "}");
-    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProduceStringFactory",
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule_ProduceStringFactory",
         "package test;",
         "",
         "import com.google.common.util.concurrent.AsyncFunction;",
@@ -697,7 +697,7 @@ public void publicModuleNonPublicIncludes() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory extends AbstractProducer<String> {",
+        "public final class TestModule_ProduceStringFactory extends AbstractProducer<String> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "  private final Producer<Integer> aProducer;",
@@ -705,7 +705,7 @@ public void publicModuleNonPublicIncludes() {
         "  private final Producer<Object> cProducer;",
         "  private final Provider<Boolean> dProvider;",
         "",
-        "  public TestModule$$ProduceStringFactory(",
+        "  public TestModule_ProduceStringFactory(",
         "      TestModule module,",
         "      Executor executor,",
         "      Producer<Integer> aProducer,",
@@ -767,7 +767,7 @@ public void publicModuleNonPublicIncludes() {
         "    return \"\";",
         "  }",
         "}");
-    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProduceStringFactory",
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule_ProduceStringFactory",
         "package test;",
         "",
         "import com.google.common.util.concurrent.AsyncFunction;",
@@ -783,7 +783,7 @@ public void publicModuleNonPublicIncludes() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory extends AbstractProducer<String> {",
+        "public final class TestModule_ProduceStringFactory extends AbstractProducer<String> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "  private final Producer<Integer> aProducer;",
@@ -791,7 +791,7 @@ public void publicModuleNonPublicIncludes() {
         "  private final Producer<Object> cProducer;",
         "  private final Provider<Boolean> dProvider;",
         "",
-        "  public TestModule$$ProduceStringFactory(",
+        "  public TestModule_ProduceStringFactory(",
         "      TestModule module,",
         "      Executor executor,",
         "      Producer<Integer> aProducer,",
@@ -850,7 +850,7 @@ public void publicModuleNonPublicIncludes() {
         "    return null;",
         "  }",
         "}");
-    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProduceStringFactory",
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule_ProduceStringFactory",
         "package test;",
         "",
         "import com.google.common.util.concurrent.AsyncFunction;",
@@ -862,12 +862,12 @@ public void publicModuleNonPublicIncludes() {
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory extends AbstractProducer<String> {",
+        "public final class TestModule_ProduceStringFactory extends AbstractProducer<String> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "  private final Producer<Integer> aProducer;",
         "",
-        "  public TestModule$$ProduceStringFactory(",
+        "  public TestModule_ProduceStringFactory(",
         "      TestModule module,",
         "      Executor executor,",
         "      Producer<Integer> aProducer) {",
@@ -911,7 +911,7 @@ public void publicModuleNonPublicIncludes() {
         "    return null;",
         "  }",
         "}");
-    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProduceStringFactory",
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule_ProduceStringFactory",
         "package test;",
         "",
         "import com.google.common.util.concurrent.Futures;",
@@ -924,11 +924,11 @@ public void publicModuleNonPublicIncludes() {
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory extends AbstractProducer<String> {",
+        "public final class TestModule_ProduceStringFactory extends AbstractProducer<String> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "",
-        "  public TestModule$$ProduceStringFactory(TestModule module, Executor executor) {",
+        "  public TestModule_ProduceStringFactory(TestModule module, Executor executor) {",
         "    assert module != null;",
         "    this.module = module;",
         "    assert executor != null;",
@@ -966,7 +966,7 @@ public void publicModuleNonPublicIncludes() {
         "    return \"\";",
         "  }",
         "}");
-    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProduceStringFactory",
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule_ProduceStringFactory",
         "package test;",
         "",
         "import com.google.common.util.concurrent.ListenableFuture;",
@@ -978,11 +978,11 @@ public void publicModuleNonPublicIncludes() {
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory extends AbstractProducer<String> {",
+        "public final class TestModule_ProduceStringFactory extends AbstractProducer<String> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "",
-        "  public TestModule$$ProduceStringFactory(TestModule module, Executor executor) {",
+        "  public TestModule_ProduceStringFactory(TestModule module, Executor executor) {",
         "    assert module != null;",
         "    this.module = module;",
         "    assert executor != null;",
@@ -1025,7 +1025,7 @@ public void publicModuleNonPublicIncludes() {
         "    return null;",
         "  }",
         "}");
-    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProduceStringFactory",
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule_ProduceStringFactory",
         "package test;",
         "",
         "import com.google.common.util.concurrent.AsyncFunction;",
@@ -1042,7 +1042,7 @@ public void publicModuleNonPublicIncludes() {
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory extends AbstractProducer<String> {",
+        "public final class TestModule_ProduceStringFactory extends AbstractProducer<String> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "  private final Producer<Integer> aProducer;",
@@ -1050,7 +1050,7 @@ public void publicModuleNonPublicIncludes() {
         "  private final Producer<Object> cProducer;",
         "  private final Provider<Boolean> dProvider;",
         "",
-        "  public TestModule$$ProduceStringFactory(",
+        "  public TestModule_ProduceStringFactory(",
         "      TestModule module,",
         "      Executor executor,",
         "      Producer<Integer> aProducer,",
@@ -1112,7 +1112,7 @@ public void publicModuleNonPublicIncludes() {
         "    return null;",
         "  }",
         "}");
-    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule$$ProduceStringFactory",
+    JavaFileObject factoryFile = JavaFileObjects.forSourceLines("TestModule_ProduceStringFactory",
         "package test;",
         "",
         "import com.google.common.util.concurrent.Futures;",
@@ -1126,12 +1126,12 @@ public void publicModuleNonPublicIncludes() {
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class TestModule$$ProduceStringFactory",
+        "public final class TestModule_ProduceStringFactory",
         "    extends AbstractProducer<Set<String>> {",
         "  private final TestModule module;",
         "  private final Executor executor;",
         "",
-        "  public TestModule$$ProduceStringFactory(TestModule module, Executor executor) {  ",
+        "  public TestModule_ProduceStringFactory(TestModule module, Executor executor) {  ",
         "    assert module != null;",
         "    this.module = module;",
         "    assert executor != null;",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
index d30800df4..b5ebd972b 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -154,9 +154,9 @@
         "  }",
         "",
         "  private void initialize(final Builder builder) {",
-        "    this.bProvider = TestClass$BModule$$BFactory.create(",
-        "        builder.bModule, TestClass$C$$Factory.create());",
-        "    this.aProducer = new TestClass$AModule$$AFactory(",
+        "    this.bProvider = TestClass$BModule_BFactory.create(",
+        "        builder.bModule, TestClass$C_Factory.create());",
+        "    this.aProducer = new TestClass$AModule_AFactory(",
         "        builder.aModule, builder.executor, Producers.producerFromProvider(bProvider));",
         "  }",
         "",
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
index 26c8e4e8c..349b2feee 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
@@ -94,9 +94,9 @@
       "",
       "  private void initialize(final Builder builder) {",
       "    this.primitiveIntProvider =",
-      "        PrimitiveModule$$PrimitiveIntFactory.create(builder.primitiveModule);",
+      "        PrimitiveModule_PrimitiveIntFactory.create(builder.primitiveModule);",
       "    this.primitiveInjectableProvider =",
-      "        PrimitiveInjectable$$Factory.create(primitiveIntProvider);",
+      "        PrimitiveInjectable_Factory.create(primitiveIntProvider);",
       "  }",
       "",
       "  @Override",
