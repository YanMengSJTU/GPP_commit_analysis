diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 0c6855c6a..69a4a0521 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -557,8 +557,8 @@ private static Snippet initializeMembersInjectorForBinding(
   private static List<Snippet> getDependencyParameters(Iterable<DependencyRequest> dependencies,
       ImmutableMap<Key, Snippet> memberSelectSnippets) {
     ImmutableList.Builder<Snippet> parameters = ImmutableList.builder();
-    for (DependencyRequest dependency : dependencies) {
-      parameters.add(memberSelectSnippets.get(dependency.key()));
+    for (Key dependencyKey : SourceFiles.indexDependenciesByKey(dependencies).keySet()) {
+      parameters.add(memberSelectSnippets.get(dependencyKey));
     }
     return parameters.build();
   }
diff --git a/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java b/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
index 6a0a04a86..dfd68f090 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
@@ -59,6 +59,17 @@ public int compare(DependencyRequest left, DependencyRequest right) {
     }
   };
 
+  static ImmutableSetMultimap<Key, DependencyRequest> indexDependenciesByKey(
+      Iterable<? extends DependencyRequest> dependencies) {
+    ImmutableSetMultimap.Builder<Key, DependencyRequest> dependenciesByKeyBuilder =
+        new ImmutableSetMultimap.Builder<Key, DependencyRequest>().orderValuesBy(
+            DEPENDENCY_ORDERING);
+    for (DependencyRequest dependency : dependencies) {
+      dependenciesByKeyBuilder.put(dependency.key(), dependency);
+    }
+    return dependenciesByKeyBuilder.build();
+  }
+
   /**
    * This method generates names for the {@link Provider} references necessary for all of the
    * bindings. It is responsible for the following:
@@ -74,14 +85,8 @@ public int compare(DependencyRequest left, DependencyRequest right) {
    */
   static ImmutableMap<Key, String> generateFrameworkReferenceNamesForDependencies(
       Iterable<? extends DependencyRequest> dependencies) {
-    ImmutableSetMultimap.Builder<Key, DependencyRequest> dependenciesByKeyBuilder =
-        new ImmutableSetMultimap.Builder<Key, DependencyRequest>().orderValuesBy(
-            DEPENDENCY_ORDERING);
-    for (DependencyRequest dependency : dependencies) {
-      dependenciesByKeyBuilder.put(dependency.key(), dependency);
-    }
     ImmutableSetMultimap<Key, DependencyRequest> dependenciesByKey =
-        dependenciesByKeyBuilder.build();
+        indexDependenciesByKey(dependencies);
     Map<Key, Collection<DependencyRequest>> dependenciesByKeyMap = dependenciesByKey.asMap();
     ImmutableMap.Builder<Key, String> providerNames = ImmutableMap.builder();
     for (Entry<Key, Collection<DependencyRequest>> entry : dependenciesByKeyMap.entrySet()) {
diff --git a/compiler/src/test/java/dagger/internal/codegen/MultipleRequestTest.java b/compiler/src/test/java/dagger/internal/codegen/MultipleRequestTest.java
new file mode 100644
index 000000000..27e720d01
--- /dev/null
+++ b/compiler/src/test/java/dagger/internal/codegen/MultipleRequestTest.java
@@ -0,0 +1,119 @@
+/*
+ * Copyright (C) 2014 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.internal.codegen;
+
+import com.google.common.collect.ImmutableList;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+import static com.google.common.truth.Truth.assert_;
+import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+
+@RunWith(JUnit4.class)
+public class MultipleRequestTest {
+  private static final JavaFileObject DEP_FILE = JavaFileObjects.forSourceLines("test.Dep",
+      "package test;",
+      "",
+      "import javax.inject.Inject;",
+      "",
+      "class Dep {",
+      "  @Inject Dep() {}",
+      "}");
+
+  @Test public void multipleRequests_constructor() {
+    assert_().about(javaSources())
+        .that(ImmutableList.of(
+            DEP_FILE,
+            JavaFileObjects.forSourceLines("test.ConstructorInjectsMultiple",
+                "package test;",
+                "",
+                "import javax.inject.Inject;",
+                "",
+                "class ConstructorInjectsMultiple {",
+                "  @Inject ConstructorInjectsMultiple(Dep d1, Dep d2) {}",
+                "}"),
+            JavaFileObjects.forSourceLines("test.SimpleComponent",
+                "package test;",
+                "",
+                "import dagger.Component;",
+                "",
+                "@Component",
+                "interface SimpleComponent {",
+                "  ConstructorInjectsMultiple get();",
+                "}")))
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError();
+  }
+
+  @Test public void multipleRequests_field() {
+    assert_().about(javaSources())
+        .that(ImmutableList.of(
+            DEP_FILE,
+            JavaFileObjects.forSourceLines("test.FieldInjectsMultiple",
+                "package test;",
+                "",
+                "import javax.inject.Inject;",
+                "",
+                "class FieldInjectsMultiple {",
+                "  @Inject Dep d1;",
+                "  @Inject Dep d2;",
+                "  @Inject FieldInjectsMultiple() {}",
+                "}"),
+            JavaFileObjects.forSourceLines("test.SimpleComponent",
+                "package test;",
+                "",
+                "import dagger.Component;",
+                "",
+                "@Component",
+                "interface SimpleComponent {",
+                "  FieldInjectsMultiple get();",
+                "}")))
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError();
+  }
+
+  @Test public void multipleRequests_providesMethod() {
+    assert_().about(javaSources())
+        .that(ImmutableList.of(
+            DEP_FILE,
+            JavaFileObjects.forSourceLines("test.FieldInjectsMultiple",
+                "package test;",
+                "",
+                "import dagger.Module;",
+                "import dagger.Provides;",
+                "",
+                "@Module",
+                "class SimpleModule {",
+                "  @Provides Object provide(Dep d1, Dep d2) {",
+                "    return null;",
+                "  }",
+                "}"),
+            JavaFileObjects.forSourceLines("test.SimpleComponent",
+                "package test;",
+                "",
+                "import dagger.Component;",
+                "",
+                "@Component(modules = SimpleModule.class)",
+                "interface SimpleComponent {",
+                "  Object get();",
+                "}")))
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError();
+  }
+}
