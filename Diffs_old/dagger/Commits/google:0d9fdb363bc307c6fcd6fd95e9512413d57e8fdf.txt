diff --git a/BUILD b/BUILD
index d8897ef37..83743df06 100644
--- a/BUILD
+++ b/BUILD
@@ -53,48 +53,6 @@ load("@google_bazel_common//tools/jarjar:jarjar.bzl", "jarjar_library")
 
 SHADE_RULES = ["rule com.google.auto.common.** dagger.shaded.auto.common.@1"]
 
-jarjar_library(
-    name = "shaded_compiler",
-    jars = [
-        "//java/dagger/internal/codegen:processor",
-        "//java/dagger/internal/codegen/base",
-        "//java/dagger/internal/codegen/binding",
-        "//java/dagger/internal/codegen/bindinggraphvalidation",
-        "//java/dagger/internal/codegen/compileroption",
-        "//java/dagger/internal/codegen/extension",
-        "//java/dagger/internal/codegen/javapoet",
-        "//java/dagger/internal/codegen/kotlin",
-        "//java/dagger/internal/codegen/langmodel",
-        "//java/dagger/internal/codegen/statistics",
-        "//java/dagger/internal/codegen/validation",
-        "//java/dagger/internal/codegen/writing",
-        "//java/dagger/model:internal-proxies",
-        "//java/dagger/errorprone",
-        "@com_google_auto_auto_common//jar",
-    ],
-    rules = SHADE_RULES,
-)
-
-jarjar_library(
-    name = "shaded_compiler_src",
-    jars = [
-        "//java/dagger/internal/codegen:libprocessor-src.jar",
-        "//java/dagger/internal/codegen/base:libbase-src.jar",
-        "//java/dagger/internal/codegen/binding:libbinding-src.jar",
-        "//java/dagger/internal/codegen/bindinggraphvalidation:libbindinggraphvalidation-src.jar",
-        "//java/dagger/internal/codegen/compileroption:libcompileroption-src.jar",
-        "//java/dagger/internal/codegen/extension:libextension-src.jar",
-        "//java/dagger/internal/codegen/javapoet:libjavapoet-src.jar",
-        "//java/dagger/internal/codegen/kotlin:libkotlin-src.jar",
-        "//java/dagger/internal/codegen/langmodel:liblangmodel-src.jar",
-        "//java/dagger/internal/codegen/statistics:libstatistics-src.jar",
-        "//java/dagger/internal/codegen/validation:libvalidation-src.jar",
-        "//java/dagger/internal/codegen/writing:libwriting-src.jar",
-        # TODO(ronshapiro): is there a generated src.jar for protos in Bazel?
-        "//java/dagger/errorprone:liberrorprone-src.jar",
-    ],
-)
-
 jarjar_library(
     name = "shaded_android_processor",
     jars = [
diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 4b52b422d..426096962 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -17,48 +17,46 @@
 
 package(default_visibility = ["//:src"])
 
-load("@google_bazel_common//tools/javadoc:javadoc.bzl", "javadoc_library")
-load("//tools:maven.bzl", "POM_VERSION", "pom_file")
-
-DAGGER_DEPS = [
-    "//java/dagger/internal/codegen/base",
-    "//java/dagger/internal/codegen/binding",
-    "//java/dagger/internal/codegen/bindinggraphvalidation",
-    "//java/dagger/internal/codegen/compileroption",
-    "//java/dagger/internal/codegen/extension",
-    "//java/dagger/internal/codegen/javapoet",
-    "//java/dagger/internal/codegen/kotlin",
-    "//java/dagger/internal/codegen/langmodel",
-    "//java/dagger/internal/codegen/statistics",
-    "//java/dagger/internal/codegen/validation",
-    "//java/dagger/internal/codegen/writing",
-]
+load("//tools:maven.bzl", "POM_VERSION", "gen_maven_artifact")
 
 java_library(
     name = "processor",
-    srcs = glob(["*.java"]),
+    srcs = glob(
+        ["*.java"],
+        exclude = ["package-info.java"],
+    ),
     plugins = [
         "//java/dagger/internal/codegen/bootstrap",
     ],
     tags = ["maven_coordinates=com.google.dagger:dagger-compiler:" + POM_VERSION],
-    deps = DAGGER_DEPS + [
+    deps = [
         ":package_info",
+        "//java/dagger:core",
+        "//java/dagger/internal/codegen/base",
+        "//java/dagger/internal/codegen/binding",
+        "//java/dagger/internal/codegen/bindinggraphvalidation",
+        "//java/dagger/internal/codegen/compileroption",
+        "//java/dagger/internal/codegen/extension",
+        "//java/dagger/internal/codegen/javapoet",
+        "//java/dagger/internal/codegen/kotlin",
+        "//java/dagger/internal/codegen/langmodel",
+        "//java/dagger/internal/codegen/statistics",
+        "//java/dagger/internal/codegen/validation",
+        "//java/dagger/internal/codegen/writing",
+        "//java/dagger/model:internal-proxies",
+        "//java/dagger/producers",
+        "//java/dagger/spi",
+        "@google_bazel_common//third_party/java/auto:common",
         "@google_bazel_common//third_party/java/auto:service",
         "@google_bazel_common//third_party/java/auto:value",
-        "@google_bazel_common//third_party/java/auto:common",
         "@google_bazel_common//third_party/java/checker_framework_annotations",
         "@google_bazel_common//third_party/java/error_prone:annotations",
         "@google_bazel_common//third_party/java/google_java_format",
+        "@google_bazel_common//third_party/java/guava",
+        "@google_bazel_common//third_party/java/incap",
         "@google_bazel_common//third_party/java/javapoet",
-        "@bazel_tools//tools/jdk:langtools-neverlink",
         "@google_bazel_common//third_party/java/jsr250_annotations",
         "@google_bazel_common//third_party/java/jsr330_inject",
-        "//java/dagger:core",
-        "//java/dagger/producers",
-        "//java/dagger/spi",
-        "//java/dagger/model:internal-proxies",
-        "@google_bazel_common//third_party/java/incap",
-        "@google_bazel_common//third_party/java/guava",
     ],
 )
 
@@ -69,20 +67,29 @@ java_library(
     deps = ["@google_bazel_common//third_party/java/error_prone:annotations"],
 )
 
-pom_file(
-    name = "pom",
+gen_maven_artifact(
+    name = "artifact",
     artifact_id = "dagger-compiler",
     artifact_name = "Dagger Compiler",
-    targets = DAGGER_DEPS + [":processor"],
-)
-
-# The javadocs should only include ComponentProcessor.java, since that is the only class used
-# externally. Specifically, ComponentProcessor.forTesting() is required for testing SPI plugins.
-javadoc_library(
-    name = "codegen-javadoc",
-    srcs = ["ComponentProcessor.java"],
-    root_packages = ["dagger.internal.codegen"],
-    deps = [":processor"],
+    artifact_target = ":processor",
+    javadoc_root_packages = ["dagger.internal.codegen"],
+    # The javadocs should only include ComponentProcessor.java, since that is the only class used
+    # externally. Specifically, ComponentProcessor.forTesting() is required for testing SPI plugins.
+    javadoc_srcs = ["ComponentProcessor.java"],
+    deps = [
+        ":package_info",
+        "//java/dagger/internal/codegen/base",
+        "//java/dagger/internal/codegen/binding",
+        "//java/dagger/internal/codegen/bindinggraphvalidation",
+        "//java/dagger/internal/codegen/compileroption",
+        "//java/dagger/internal/codegen/javapoet",
+        "//java/dagger/internal/codegen/kotlin",
+        "//java/dagger/internal/codegen/langmodel",
+        "//java/dagger/internal/codegen/statistics",
+        "//java/dagger/internal/codegen/validation",
+        "//java/dagger/internal/codegen/writing",
+        "//java/dagger/model:internal-proxies",
+    ],
 )
 
 java_plugin(
diff --git a/java/dagger/internal/codegen/compileroption/BUILD b/java/dagger/internal/codegen/compileroption/BUILD
index 0de4c1917..1c4e1fcc4 100644
--- a/java/dagger/internal/codegen/compileroption/BUILD
+++ b/java/dagger/internal/codegen/compileroption/BUILD
@@ -27,7 +27,6 @@ java_library(
         "//java/dagger/internal/codegen/extension",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/producers",
-        "@bazel_tools//tools/jdk:langtools-neverlink",
         "@google_bazel_common//third_party/java/auto:common",
         "@google_bazel_common//third_party/java/google_java_format",
         "@google_bazel_common//third_party/java/guava",
diff --git a/java/dagger/producers/BUILD b/java/dagger/producers/BUILD
index ad065a1b9..891926d07 100644
--- a/java/dagger/producers/BUILD
+++ b/java/dagger/producers/BUILD
@@ -23,7 +23,7 @@ load(
     "DOCLINT_REFERENCES",
     "SOURCE_7_TARGET_7",
 )
-load("//tools:maven.bzl", "pom_file", "POM_VERSION")
+load("//tools:maven.bzl", "POM_VERSION", "gen_maven_artifact")
 
 # Work around b/70476182 which prevents Kythe from connecting :producers to the .java files it
 # contains.
@@ -53,22 +53,15 @@ java_library(
     ],
 )
 
-pom_file(
-    name = "pom",
+gen_maven_artifact(
+    name = "artifact",
     artifact_id = "dagger-producers",
     artifact_name = "Dagger Producers",
-    targets = [":producers"],
-)
-
-load("@google_bazel_common//tools/javadoc:javadoc.bzl", "javadoc_library")
-
-javadoc_library(
-    name = "producers-javadoc",
-    srcs = SRCS,
-    exclude_packages = [
+    artifact_target = ":producers",
+    javadoc_exclude_packages = [
         "dagger.producers.internal",
         "dagger.producers.monitoring.internal",
     ],
-    root_packages = ["dagger.producers"],
-    deps = [":producers"],
+    javadoc_root_packages = ["dagger.producers"],
+    javadoc_srcs = SRCS,
 )
diff --git a/java/dagger/spi/BUILD b/java/dagger/spi/BUILD
index c5f5570a7..fb02754da 100644
--- a/java/dagger/spi/BUILD
+++ b/java/dagger/spi/BUILD
@@ -12,9 +12,6 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-load("@google_bazel_common//tools/jarjar:jarjar.bzl", "jarjar_library")
-load("@google_bazel_common//tools/javadoc:javadoc.bzl", "javadoc_library")
-
 # Description:
 #   The Service Provider Interface for Dagger's binding graph model
 
@@ -25,7 +22,7 @@ load(
     "DOCLINT_HTML_AND_SYNTAX",
     "DOCLINT_REFERENCES",
 )
-load("//tools:maven.bzl", "POM_VERSION", "pom_file")
+load("//tools:maven.bzl", "POM_VERSION", "gen_maven_artifact")
 
 filegroup(
     name = "spi-srcs",
@@ -50,50 +47,21 @@ java_library(
     ],
 )
 
-javadoc_library(
-    name = "spi-javadoc",
-    srcs = [
-        ":spi-srcs",
-        "//java/dagger/model:model-srcs",
-    ],
-    root_packages = [
+gen_maven_artifact(
+    name = "artifact",
+    artifact_id = "dagger-spi",
+    artifact_name = "Dagger SPI",
+    artifact_target = ":spi",
+    javadoc_root_packages = [
         "dagger.model",
         "dagger.spi",
     ],
-    deps = [
-        ":spi",
-        "//java/dagger/model",
+    javadoc_srcs = [
+        ":spi-srcs",
+        "//java/dagger/model:model-srcs",
     ],
-)
-
-jarjar_library(
-    name = "shaded_spi",
-    jars = [
-        # TODO(user): Look into why this depends on internal/codegen/extension, and how this
-        # doesn't break gradle users since maven doesn't know to pull in the codegen dependency.
+    deps = [
         "//java/dagger/internal/codegen/extension",
         "//java/dagger/model",
-        "//java/dagger/spi",
-        "@com_google_auto_auto_common//jar",
-    ],
-    rules = ["rule com.google.auto.common.** dagger.shaded.auto.common.@1"],
-)
-
-jarjar_library(
-    name = "shaded_spi_src",
-    jars = [
-        "//java/dagger/internal/codegen/extension:libextension-src.jar",
-        "//java/dagger/model:libmodel-src.jar",
-        "//java/dagger/spi:libspi-src.jar",
-    ],
-)
-
-pom_file(
-    name = "pom",
-    artifact_id = "dagger-spi",
-    artifact_name = "Dagger SPI",
-    targets = [
-        "//java/dagger/model",
-        ":spi",
     ],
 )
diff --git a/tools/maven.bzl b/tools/maven.bzl
index 4a930489c..b84bf425c 100644
--- a/tools/maven.bzl
+++ b/tools/maven.bzl
@@ -16,6 +16,9 @@
 """
 
 load("@google_bazel_common//tools/maven:pom_file.bzl", default_pom_file = "pom_file")
+load(":maven_info.bzl", "MavenInfo", "collect_maven_info")
+load("@google_bazel_common//tools/javadoc:javadoc.bzl", "javadoc_library")
+load("@google_bazel_common//tools/jarjar:jarjar.bzl", "jarjar_library")
 
 def pom_file(name, targets, artifact_name, artifact_id, packaging = None, **kwargs):
     default_pom_file(
@@ -36,3 +39,129 @@ def pom_file(name, targets, artifact_name, artifact_id, packaging = None, **kwar
     )
 
 POM_VERSION = "${project.version}"
+
+_SHADE_RULES = ["rule com.google.auto.common.** dagger.shaded.auto.common.@1"]
+
+def gen_maven_artifact(
+        name,
+        artifact_name,
+        artifact_id,
+        artifact_target,
+        pom_name = "pom",
+        packaging = None,
+        javadoc_srcs = None,
+        javadoc_root_packages = None,
+        javadoc_exclude_packages = None,
+        javadoc_android_api_level = None,
+        deps = None):
+    """Generates the files required for a maven artifact.
+
+    This macro generates the following targets:
+        * ":pom": The pom file for the given target and deps
+        * ":<NAME>": The class jar file for the given target and deps
+        * ":<NAME>-src": The sources jar file for the given target and deps
+        * ":<NAME>-javadoc": The javadocs jar file for the given target and deps
+        * ":<NAME>-validation": Validates the target and deps.
+
+    "<NAME>-validation" validates a few things. First, it validates that the
+    given "target" is a maven artifact (i.e. the "tags" attribute contains
+    "maven_coordinates=..."). Second, it calculates the list of transitive
+    dependencies of the target that are not owned by another maven artifact,
+    and validates that the given "deps" matches exactly.
+
+    Args:
+      name: The name associated with the various output targets.
+      artifact_target: The target containing the maven_coordinates.
+      artifact_name: The name of the maven artifact.
+      artifact_id: The id of the maven artifact.
+      packaging: The packaging of the maven artifact.
+      pom_name: The name of the pome file (or "pom" if absent).
+      javadoc_srcs: The srcs for the javadocs.
+      javadoc_root_packages: The root packages for the javadocs.
+      javadoc_exclude_packages: The packages to exclude from the javadocs.
+      javadoc_android_api_level: The android api level for the javadocs.
+      deps: The required deps to include with the target.
+    """
+    _validate_maven_deps(
+        name = name + "-validation",
+        target = artifact_target,
+        deps = deps,
+    )
+
+    artifact_targets = [artifact_target] + (deps or [])
+
+    pom_file(
+        name = pom_name,
+        artifact_id = artifact_id,
+        artifact_name = artifact_name,
+        packaging = packaging,
+        targets = artifact_targets,
+    )
+
+    javadoc_library(
+        name = name + "-javadoc",
+        srcs = javadoc_srcs,
+        root_packages = javadoc_root_packages,
+        exclude_packages = javadoc_exclude_packages,
+        android_api_level = javadoc_android_api_level,
+        deps = artifact_targets,
+    )
+
+    jarjar_library(
+        name = name,
+        jars = artifact_targets,
+        rules = _SHADE_RULES,
+    )
+
+    jarjar_library(
+        name = name + "-src",
+        jars = [_src_jar(dep) for dep in artifact_targets],
+    )
+
+def _src_jar(target):
+    if target.startswith(":"):
+        target = Label("//" + native.package_name() + target)
+    else:
+        target = Label(target)
+    return "//%s:lib%s-src.jar" % (target.package, target.name)
+
+def _validate_maven_deps_impl(ctx):
+    """Validates the given Maven target and deps
+
+    Validates that the given "target" is a maven artifact (i.e. the "tags"
+    attribute contains "maven_coordinates=..."). Second, it calculates the
+    list of transitive dependencies of the target that are not owned by
+    another maven artifact, and validates that the given "deps" matches
+    exactly.
+    """
+    target = ctx.attr.target
+    if not target[MavenInfo].maven_artifacts:
+        fail("\t[Error]: %s is not a maven artifact" % target.label)
+
+    deps = [dep.label for dep in getattr(ctx.attr, "deps", [])]
+
+    all_transitive_deps = target[MavenInfo].all_transitive_deps.to_list()
+    maven_transitive_deps = target[MavenInfo].maven_transitive_deps.to_list()
+    required_deps = [dep for dep in all_transitive_deps if dep not in maven_transitive_deps]
+
+    missing_deps = [str(dep) for dep in required_deps if dep not in deps]
+    if missing_deps:
+        fail("\t[Error]: Found missing deps: \n\t\t" + "\n\t\t".join(missing_deps))
+
+    extra_deps = [str(dep) for dep in deps if dep not in required_deps]
+    if extra_deps:
+        fail("\t[Error]: Found extra deps: \n\t\t" + "\n\t\t".join(extra_deps))
+
+_validate_maven_deps = rule(
+    implementation = _validate_maven_deps_impl,
+    attrs = {
+        "target": attr.label(
+            doc = "The target to generate a maven artifact for.",
+            aspects = [collect_maven_info],
+            mandatory = True,
+        ),
+        "deps": attr.label_list(
+            doc = "The required dependencies of the target, if any.",
+        ),
+    },
+)
diff --git a/tools/maven_info.bzl b/tools/maven_info.bzl
new file mode 100644
index 000000000..b7fc8d225
--- /dev/null
+++ b/tools/maven_info.bzl
@@ -0,0 +1,93 @@
+# Copyright (C) 2019 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+"""Skylark rules to collect Maven artifacts information.
+"""
+
+
+# TODO(b/142057516): Unfork this file once we've settled on a more general API.
+MavenInfo = provider(
+    fields = {
+        "maven_artifacts": """
+        The Maven coordinates for the artifacts that are exported by this target: i.e. the target
+        itself and its transitively exported targets.
+        """,
+        "maven_dependencies": """
+        The Maven coordinates of the direct dependencies, and the transitively exported targets, of
+        this target.
+        """,
+        "all_transitive_deps": """
+        All transitive deps of the target.
+        """,
+        "maven_transitive_deps": """
+        All transitive deps that are included in some maven dependency.
+        """,
+    },
+)
+
+_EMPTY_MAVEN_INFO = MavenInfo(
+    maven_artifacts = depset(),
+    maven_dependencies = depset(),
+    maven_transitive_deps = depset(),
+    all_transitive_deps = depset(),
+)
+
+_MAVEN_COORDINATES_PREFIX = "maven_coordinates="
+
+def _maven_artifacts(targets):
+    return [target[MavenInfo].maven_artifacts for target in targets if MavenInfo in target]
+
+def _collect_maven_info_impl(target, ctx):
+    tags = getattr(ctx.rule.attr, "tags", [])
+    deps = getattr(ctx.rule.attr, "deps", [])
+    exports = getattr(ctx.rule.attr, "exports", [])
+
+    maven_artifacts = []
+    for tag in tags:
+        if tag in ("maven:compile_only", "maven:shaded"):
+            return [_EMPTY_MAVEN_INFO]
+        if tag.startswith(_MAVEN_COORDINATES_PREFIX):
+            maven_artifacts.append(tag[len(_MAVEN_COORDINATES_PREFIX):])
+
+    all_deps = [dep.label for dep in (deps + exports)]
+    all_transitive_deps = [dep[MavenInfo].all_transitive_deps for dep in (deps + exports)]
+
+    maven_deps = []
+    maven_transitive_deps = []
+    for dep in (deps + exports):
+        # If the dep is itself a maven artifact, add it and all of its transitive deps.
+        # Otherwise, just propagate its transitive maven deps.
+        if dep[MavenInfo].maven_artifacts or dep[MavenInfo] == _EMPTY_MAVEN_INFO:
+            maven_deps.append(dep.label)
+            maven_transitive_deps.append(dep[MavenInfo].all_transitive_deps)
+        else:
+            maven_transitive_deps.append(dep[MavenInfo].maven_transitive_deps)
+
+    return [MavenInfo(
+        maven_artifacts = depset(maven_artifacts, transitive = _maven_artifacts(exports)),
+        maven_dependencies = depset([], transitive = _maven_artifacts(deps + exports)),
+        maven_transitive_deps = depset(maven_deps, transitive = maven_transitive_deps),
+        all_transitive_deps = depset(all_deps, transitive = all_transitive_deps),
+    )]
+
+collect_maven_info = aspect(
+    attr_aspects = [
+        "deps",
+        "exports",
+    ],
+    doc = """
+    Collects the Maven information for targets, their dependencies, and their transitive exports.
+    """,
+    implementation = _collect_maven_info_impl,
+)
+
diff --git a/util/execute-deploy.sh b/util/execute-deploy.sh
index 982d4d9e0..5abb1e468 100755
--- a/util/execute-deploy.sh
+++ b/util/execute-deploy.sh
@@ -49,21 +49,21 @@ deploy_library \
   gwt/pom.xml
 
 deploy_library \
-  shaded_compiler.jar \
-  shaded_compiler_src.jar \
-  java/dagger/internal/codegen/codegen-javadoc.jar \
+  java/dagger/internal/codegen/artifact.jar \
+  java/dagger/internal/codegen/artifact-src.jar \
+  java/dagger/internal/codegen/artifact-javadoc.jar \
   java/dagger/internal/codegen/pom.xml
 
 deploy_library \
-  java/dagger/producers/libproducers.jar \
-  java/dagger/producers/libproducers-src.jar \
-  java/dagger/producers/producers-javadoc.jar \
+  java/dagger/producers/artifact.jar \
+  java/dagger/producers/artifact-src.jar \
+  java/dagger/producers/artifact-javadoc.jar \
   java/dagger/producers/pom.xml
 
 deploy_library \
-  java/dagger/spi/shaded_spi.jar \
-  java/dagger/spi/shaded_spi_src.jar \
-  java/dagger/spi/spi-javadoc.jar \
+  java/dagger/spi/artifact.jar \
+  java/dagger/spi/artifact-src.jar \
+  java/dagger/spi/artifact-javadoc.jar \
   java/dagger/spi/pom.xml
 
 deploy_library \
