diff --git a/compiler/src/main/java/dagger/internal/codegen/MapKeys.java b/compiler/src/main/java/dagger/internal/codegen/MapKeys.java
index 17643d2d1..099397369 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MapKeys.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MapKeys.java
@@ -88,7 +88,7 @@
     checkArgument(
         mapKeyAnnotation != null, "%s is not annotated with @MapKey", mapKey.getAnnotationType());
     return mapKeyAnnotation.unwrapValue()
-        ? Optional.of(getOnlyElement(mapKey.getElementValues().values()))
+        ? Optional.of(getOnlyElement(getAnnotationValuesWithDefaults(mapKey).values()))
         : Optional.<AnnotationValue>absent();
   }
 
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
index 388a26ad0..a26866ae8 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -24,6 +24,7 @@
 import org.junit.runners.JUnit4;
 
 import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourcesSubject.assertThat;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
@@ -477,4 +478,45 @@ public void mapKeyComponentFileWithDefaultField() {
         .and()
         .generatesSources(generatedComponent);
   }
+
+  @Test
+  public void mapKeyWithDefaultValue() {
+    JavaFileObject module =
+        JavaFileObjects.forSourceLines(
+            "test.MapModule",
+            "package test;",
+            "",
+            "import dagger.Module;",
+            "import dagger.Provides;",
+            "import dagger.multibindings.IntoMap;",
+            "",
+            "@Module",
+            "final class MapModule {",
+            "  @Provides",
+            "  @IntoMap",
+            "  @BoolKey int provideFalseValue() {",
+            "    return -1;",
+            "  }",
+            "",
+            "  @Provides",
+            "  @IntoMap",
+            "  @BoolKey(true) int provideTrueValue() {",
+            "    return 1;",
+            "  }",
+            "}");
+    JavaFileObject mapKey =
+        JavaFileObjects.forSourceLines(
+            "test.BoolKey",
+            "package test;",
+            "",
+            "import dagger.MapKey;",
+            "",
+            "@MapKey",
+            "@interface BoolKey {",
+            "  boolean value() default false;",
+            "}");
+    assertThat(module, mapKey)
+        .processedWith(new ComponentProcessor(), new AutoAnnotationProcessor())
+        .compilesWithoutError();
+  }
 }
