diff --git a/java/dagger/internal/DelegateFactory.java b/java/dagger/internal/DelegateFactory.java
index 416c2a172..4ec047ca8 100644
--- a/java/dagger/internal/DelegateFactory.java
+++ b/java/dagger/internal/DelegateFactory.java
@@ -16,8 +16,6 @@
 
 package dagger.internal;
 
-import static dagger.internal.Preconditions.checkNotNull;
-
 import javax.inject.Provider;
 
 /**
@@ -36,26 +34,14 @@ public T get() {
     return delegate.get();
   }
 
-  // TODO(ronshapiro): remove this once we can reasonably expect generated code is no longer using
-  // this method
-  @Deprecated
   public void setDelegatedProvider(Provider<T> delegate) {
-    setDelegate(this, delegate);
-  }
-
-  /**
-   * Sets {@code delegateFactory}'s delegate provider to {@code delegate}.
-   *
-   * <p>{@code delegateFactory} must be an instance of {@link DelegateFactory}, otherwise this
-   * method will throw a {@link ClassCastException}.
-   */
-  public static <T> void setDelegate(Provider<T> delegateFactory, Provider<T> delegate) {
-    checkNotNull(delegate);
-    DelegateFactory<T> asDelegateFactory = (DelegateFactory<T>) delegateFactory;
-    if (asDelegateFactory.delegate != null) {
+    if (delegate == null) {
+      throw new IllegalArgumentException();
+    }
+    if (this.delegate != null) {
       throw new IllegalStateException();
     }
-    asDelegateFactory.delegate = delegate;
+    this.delegate = delegate;
   }
 }
 
diff --git a/java/dagger/internal/codegen/FrameworkFieldInitializer.java b/java/dagger/internal/codegen/FrameworkFieldInitializer.java
index 51106e801..a95b461c2 100644
--- a/java/dagger/internal/codegen/FrameworkFieldInitializer.java
+++ b/java/dagger/internal/codegen/FrameworkFieldInitializer.java
@@ -107,10 +107,29 @@ private void initializeField() {
         CodeBlock fieldInitialization = frameworkInstanceCreationExpression.creationExpression();
         CodeBlock initCode = CodeBlock.of("this.$N = $L;", getOrCreateField(), fieldInitialization);
 
-        if (isReplacingSuperclassFrameworkInstance()
-            || fieldInitializationState == InitializationState.DELEGATED) {
-          codeBuilder.add(
-              "$T.setDelegate($N, $L);", delegateType(), fieldSpec, fieldInitialization);
+        if (isReplacingSuperclassFrameworkInstance()) {
+          // TODO(ronshapiro): can we have DELEGATED share this branch? If we allow the FieldSpec
+          // to be modified in the ComponentImplementation, we can give it the same initializer to a
+          // delegate factory
+          CodeBlock delegateFactoryVariable = CodeBlock.of("$NDelegate", fieldSpec);
+          // TODO(ronshapiro): Use a type parameter here. Or even better, can a static method that
+          // accepts the delegate factory and the delegated instance infer the type parameters?
+          // And then we also don't need a cast.
+          codeBuilder
+              .add("$1T $2L = ($1T) $3N;", delegateType(), delegateFactoryVariable, fieldSpec)
+              .add(
+                  "$L.$N($L);",
+                  delegateFactoryVariable,
+                  setDelegateMethodName(),
+                  fieldInitialization);
+        } else if (fieldInitializationState == InitializationState.DELEGATED) {
+          // If we were recursively invoked, set the delegate factory as part of our initialization
+          CodeBlock delegateFactoryVariable = CodeBlock.of("$NDelegate", fieldSpec);
+          codeBuilder
+              .add(
+                  "$1T $2L = ($1T) $3N;", DelegateFactory.class, delegateFactoryVariable, fieldSpec)
+              .add(initCode)
+              .add("$L.setDelegatedProvider($N);", delegateFactoryVariable, fieldSpec);
         } else {
           codeBuilder.add(initCode);
         }
@@ -123,7 +142,7 @@ private void initializeField() {
         // We were recursively invoked, so create a delegate factory instead
         fieldInitializationState = InitializationState.DELEGATED;
         componentImplementation.addInitialization(
-            CodeBlock.of("this.$N = new $T<>();", getOrCreateField(), delegateType()));
+            CodeBlock.of("this.$N = new $T<>();", getOrCreateField(), DelegateFactory.class));
         break;
 
       case DELEGATED:
@@ -207,6 +226,10 @@ private boolean isReplacingSuperclassFrameworkInstance() {
     return isProvider() ? DelegateFactory.class : DelegateProducer.class;
   }
 
+  private String setDelegateMethodName() {
+    return isProvider() ? "setDelegatedProvider" : "setDelegatedProducer";
+  }
+
   private boolean isProvider() {
     return resolvedBindings.bindingType().equals(BindingType.PROVISION)
         && frameworkInstanceCreationExpression
diff --git a/java/dagger/producers/internal/DelegateProducer.java b/java/dagger/producers/internal/DelegateProducer.java
index 55ab3a705..896c3669a 100644
--- a/java/dagger/producers/internal/DelegateProducer.java
+++ b/java/dagger/producers/internal/DelegateProducer.java
@@ -16,8 +16,6 @@
 
 package dagger.producers.internal;
 
-import static dagger.internal.Preconditions.checkNotNull;
-
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.internal.DoubleCheck;
 import dagger.producers.Producer;
@@ -35,26 +33,14 @@
     return delegate.get();
   }
 
-  // TODO(ronshapiro): remove this once we can reasonably expect generated code is no longer using
-  // this method
-  @Deprecated
   public void setDelegatedProducer(Producer<T> delegate) {
-    setDelegate(this, delegate);
-  }
-
-  /**
-   * Sets {@code delegateProducer}'s delegate producer to {@code delegate}.
-   *
-   * <p>{@code delegateProducer} must be an instance of {@link DelegateProducer}, otherwise this
-   * method will throw a {@link ClassCastException}.
-   */
-  public static <T> void setDelegate(Producer<T> delegateProducer, Producer<T> delegate) {
-    checkNotNull(delegate);
-    DelegateProducer<T> asDelegateProducer = (DelegateProducer<T>) delegateProducer;
-    if (asDelegateProducer.delegate != null) {
+    if (delegate == null) {
+      throw new IllegalArgumentException();
+    }
+    if (this.delegate != null) {
       throw new IllegalStateException();
     }
-    asDelegateProducer.delegate = (CancellableProducer<T>) delegate;
+    this.delegate = (CancellableProducer<T>) (CancellableProducer) delegate;
   }
 
   @Override
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 452d761ce..331535f92 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -2362,8 +2362,9 @@ public void setMultibindings_contributionsInLeafAndAncestor_frameworkInstances()
             "",
             "    @SuppressWarnings(\"unchecked\")",
             "    private void initialize() {",
-            "      DelegateFactory.setDelegate(",
-            "          setOfInEachSubcomponentProvider,",
+            "      DelegateFactory setOfInEachSubcomponentProviderDelegate =",
+            "          (DelegateFactory) setOfInEachSubcomponentProvider;",
+            "      setOfInEachSubcomponentProviderDelegate.setDelegatedProvider(",
             "          SetFactory.<InEachSubcomponent>builder(0, 2)",
             "              .addCollectionProvider(super.contributionsInEachSubcomponent())",
             "              .addCollectionProvider(",
@@ -2799,8 +2800,9 @@ public void mapMultibindings_contributionsInLeafAndAncestor_frameworkInstance()
             "",
             "    @SuppressWarnings(\"unchecked\")",
             "    private void initialize() { ",
-            "      DelegateFactory.setDelegate(",
-            "          mapOfStringAndInEachSubcomponentProvider,",
+            "      DelegateFactory mapOfStringAndInEachSubcomponentProviderDelegate =",
+            "          (DelegateFactory) mapOfStringAndInEachSubcomponentProvider;",
+            "      mapOfStringAndInEachSubcomponentProviderDelegate.setDelegatedProvider(",
             "          MapFactory.<String, InEachSubcomponent>builder(2)",
             "              .putAll(super.contributionsInEachSubcomponent())",
             "              .put(",
@@ -3471,8 +3473,9 @@ public void emptyMultibinds_set_frameworkInstance() {
             "",
             "    @SuppressWarnings(\"unchecked\")",
             "    private void initialize() {",
-            "      DelegateFactory.setDelegate(",
-            "          setOfMultiboundProvider,",
+            "      DelegateFactory setOfMultiboundProviderDelegate = ",
+            "          (DelegateFactory) setOfMultiboundProvider;",
+            "      setOfMultiboundProviderDelegate.setDelegatedProvider(",
             "          SetFactory.<Multibound>builder(1, 0)",
             "              .addProvider(AncestorModule_FromAncestorFactory.create())",
             "              .build());",
@@ -3714,8 +3717,9 @@ public void emptyMultibinds_map_frameworkInstance() {
             "",
             "    @SuppressWarnings(\"unchecked\")",
             "    private void initialize() {",
-            "      DelegateFactory.setDelegate(",
-            "          mapOfIntegerAndMultiboundProvider,",
+            "      DelegateFactory mapOfIntegerAndMultiboundProviderDelegate =",
+            "          (DelegateFactory) mapOfIntegerAndMultiboundProvider;",
+            "      mapOfIntegerAndMultiboundProviderDelegate.setDelegatedProvider(",
             "          MapFactory.<Integer, Multibound>builder(1)",
             "              .put(111, AncestorModule_FromAncestorFactory.create())",
             "              .build());",
@@ -4515,8 +4519,9 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "",
             "    @SuppressWarnings(\"unchecked\")",
             "    private void initialize(final LeafBuilder builder) {",
-            "      DelegateProducer.setDelegate(",
-            "          setOfResponseProducer,",
+            "      DelegateProducer setOfResponseProducerDelegate = ",
+            "          (DelegateProducer) setOfResponseProducer;",
+            "      setOfResponseProducerDelegate.setDelegatedProducer(",
             "          SetProducer.<Response>builder(1, 1)",
             "              .addCollectionProducer(super.getSetOfResponseProducer())",
             "              .addProducer(DaggerRoot.this.responseProducer)",
@@ -5010,8 +5015,9 @@ public void missingBindingAccessInLeafAndAncestor() {
             "              .addProvider(AncestorModule_SetContributionFactory.create())",
             "              .addProvider(unresolvedSetBindingProvider)",
             "              .build();",
-            "      DelegateFactory.setDelegate(",
-            "          providedInAncestorProvider,",
+            "      DelegateFactory providedInAncestorProviderDelegate =",
+            "          (DelegateFactory) providedInAncestorProvider;",
+            "      providedInAncestorProviderDelegate.setDelegatedProvider(",
             "          AncestorModule_ProvidedInAncestorFactory.create(getSetOfObjectProvider()));",
 
             "    }",
