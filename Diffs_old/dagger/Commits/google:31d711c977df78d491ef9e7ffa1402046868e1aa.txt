diff --git a/.gitignore b/.gitignore
index 30a6443bf..74bd27df1 100644
--- a/.gitignore
+++ b/.gitignore
@@ -29,3 +29,11 @@ obj
 dependency-reduced-pom.xml
 
 gen-external-apklibs
+
+bazel-bin
+bazel-genfiles
+bazel-out
+bazel-testlogs
+bazel-dagger
+
+*.pyc
diff --git a/.travis.yml b/.travis.yml
index 44bfc7c4e..8560e1661 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,5 +1,20 @@
 language: android
 
+os: linux
+dist: precise
+sudo: required
+addons:
+  apt:
+    sources:
+      # https://github.com/bazelbuild/bazel/issues/1821#issuecomment-262870638
+      - sourceline: "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8"
+        key_url: "https://storage.googleapis.com/bazel-apt/doc/apt-key.pub.gpg"
+      - ubuntu-toolchain-r-test
+    packages:
+      - oracle-java8-installer
+      - libstdc++-4.9-dev # https://github.com/nodegit/nodegit/issues/853
+      - bazel=0.4.3
+
 jdk:
   - &jdk_for_publishing oraclejdk8
 
@@ -13,6 +28,7 @@ android:
     - extra-android-m2repository
 
 before_install:
+  - echo "ANDROID_HOME = \"$ANDROID_HOME\"" > WORKSPACE.user.bzl
   - sudo rm -f /etc/mavenrc
   - wget http://www.us.apache.org/dist/maven/maven-3/3.1.1/binaries/apache-maven-3.1.1-bin.tar.gz
   - tar -zxvf apache-maven-3.1.1-bin.tar.gz
@@ -21,9 +37,13 @@ before_install:
   - export PATH=$M2_HOME/bin:$PATH
   - mvn --version
 
-install: mvn -B -P!standard-with-extra-repos -U install clean --fail-never --quiet -DskipTests=true -Dinvoker.skip=true
+install:
+  - bazel build //...
+  - mvn -B -P!standard-with-extra-repos -U install clean --fail-never --quiet -DskipTests=true -Dinvoker.skip=true
 
-script: mvn -B -P!standard-with-extra-repos -U verify --fail-at-end -Dsource.skip=true -Dmaven.javadoc.skip=true
+script:
+  - bazel test //...
+  - mvn -B -P!standard-with-extra-repos -U verify --fail-at-end -Dsource.skip=true -Dmaven.javadoc.skip=true
 
 env:
   global:
diff --git a/BUILD b/BUILD
new file mode 100644
index 000000000..b77025b94
--- /dev/null
+++ b/BUILD
@@ -0,0 +1,40 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+package(default_visibility = ["//visibility:public"])
+
+package_group(
+    name = "src",
+    packages = ["//..."],
+)
+
+py_test(
+    name = "maven_sha1_test",
+    srcs = ["tools/maven_sha1_test.py"],
+    data = [":WORKSPACE"],
+)
+
+java_library(
+    name = "dagger_with_compiler",
+    exported_plugins = ["//compiler:component-codegen"],
+    exports = ["//core"],
+)
+
+java_library(
+    name = "producers_with_compiler",
+    exports = [
+        ":dagger_with_compiler",
+        "//producers",
+    ],
+)
diff --git a/WORKSPACE b/WORKSPACE
new file mode 100644
index 000000000..d8860f003
--- /dev/null
+++ b/WORKSPACE
@@ -0,0 +1,150 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Every user should create a WORKSPACE.user.bzl file and declare the path to their $ANDROID_HOME
+# directory. If you don't want to compile //android, you can remove the android related targets in
+# the WORKSPACE
+load("/WORKSPACE.user", "ANDROID_HOME")
+
+android_sdk_repository(
+    name = "androidsdk",
+    api_level = 25,
+    build_tools_version = "25.0.2",
+    path = ANDROID_HOME,
+)
+
+bind(
+    name = "android_sdk_for_testing",
+    actual = "@androidsdk//:files",
+)
+
+maven_jar(
+    name = "javax_annotations_jsr250_api",
+    artifact = "javax.annotation:jsr250-api:1.0",
+    sha1 = "5025422767732a1ab45d93abfea846513d742dcf",
+)
+
+maven_jar(
+    name = "com_google_code_findbugs_jsr305",
+    artifact = "com.google.code.findbugs:jsr305:3.0.1",
+    sha1 = "f7be08ec23c21485b9b5a1cf1654c2ec8c58168d",
+)
+
+maven_jar(
+    name = "javax_inject_javax_inject",
+    artifact = "javax.inject:javax.inject:1",
+    sha1 = "6975da39a7040257bd51d21a231b76c915872d38",
+)
+
+maven_jar(
+    name = "javax_inject_javax_inject_tck",
+    artifact = "javax.inject:javax.inject-tck:1",
+    sha1 = "bb0090d50219c265be40fcc8e034dae37fa7be99",
+)
+
+maven_jar(
+    name = "com_google_guava_guava",
+    artifact = "com.google.guava:guava:21.0-rc1",
+    sha1 = "ea4681eb116c7335370adaad583010e0681cc53b",
+)
+
+maven_jar(
+    name = "com_google_guava_guava_testlib",
+    artifact = "com.google.guava:guava-testlib:21.0-rc1",
+    sha1 = "13f0f0dce4e710bb0bb791bd07f6e9858670a865",
+)
+
+maven_jar(
+    name = "com_google_googlejavaformat_google_java_format",
+    artifact = "com.google.googlejavaformat:google-java-format:jar:all-deps:1.1",
+    sha1 = "cf47e1c32fa8ccc75fa3f1e2331317a866c8bd0a",
+)
+
+maven_jar(
+    name = "com_google_auto_auto_common",
+    artifact = "com.google.auto:auto-common:0.8",
+    sha1 = "c6f7af0e57b9d69d81b05434ef9f3c5610d498c4",
+)
+
+maven_jar(
+    name = "com_google_auto_factory_auto_factory",
+    artifact = "com.google.auto.factory:auto-factory:1.0-beta3",
+    sha1 = "99b2ffe0e41abbd4cc42bf3836276e7174c4929d",
+)
+
+maven_jar(
+    name = "com_squareup_javawriter",
+    artifact = "com.squareup:javawriter:2.5.1",
+    sha1 = "54c87b3d91238e5b58e1a436d4916eee680ec959",
+)
+
+maven_jar(
+    name = "com_google_auto_service_auto_service",
+    artifact = "com.google.auto.service:auto-service:1.0-rc2",
+    sha1 = "51033a5b8fcf7039159e35b6878f106ccd5fb35f",
+)
+
+maven_jar(
+    name = "com_google_auto_value_auto_value",
+    artifact = "com.google.auto.value:auto-value:1.4-rc1",
+    sha1 = "9347939002003a7a3c3af48271fc2c18734528a4",
+)
+
+maven_jar(
+    name = "com_google_errorprone_error_prone_annotations",
+    artifact = "com.google.errorprone:error_prone_annotations:2.0.12",
+    sha1 = "8530d22d4ae8419e799d5a5234e0d2c0dcf15d4b",
+)
+
+maven_jar(
+    name = "junit_junit",
+    artifact = "junit:junit:4.11",
+    sha1 = "4e031bb61df09069aeb2bffb4019e7a5034a4ee0",
+)
+
+maven_jar(
+    name = "com_google_testing_compile_compile_testing",
+    artifact = "com.google.testing.compile:compile-testing:0.10",
+    sha1 = "51e6189be9d2861d1eb22b4009c8f3430319490c",
+)
+
+maven_jar(
+    name = "org_mockito_mockito_core",
+    artifact = "org.mockito:mockito-core:1.9.5",
+    sha1 = "c3264abeea62c4d2f367e21484fbb40c7e256393",
+)
+
+maven_jar(
+    name = "org_hamcrest_hamcrest_core",
+    artifact = "org.hamcrest:hamcrest-core:1.1",
+    sha1 = "860340562250678d1a344907ac75754e259cdb14",
+)
+
+maven_jar(
+    name = "org_objenesis_objenesis",
+    artifact = "org.objenesis:objenesis:1.0",
+    sha1 = "9b473564e792c2bdf1449da1f0b1b5bff9805704",
+)
+
+maven_jar(
+    name = "com_google_truth_truth",
+    artifact = "com.google.truth:truth:0.30",
+    sha1 = "9d591b5a66eda81f0b88cf1c748ab8853d99b18b",
+)
+
+maven_jar(
+    name = "com_squareup_javapoet",
+    artifact = "com.squareup:javapoet:1.7.0",
+    sha1 = "4fdcf1fc27c1a8f55d1109df986c923152f07759",
+)
diff --git a/android/BUILD b/android/BUILD
new file mode 100644
index 000000000..6c0714ec9
--- /dev/null
+++ b/android/BUILD
@@ -0,0 +1,25 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   Public Dagger API for Android
+
+package(default_visibility = ["//:src"])
+
+android_library(
+    name = "android",
+    exports = [
+        "//android/src/main/java/dagger/android",
+    ],
+)
diff --git a/android/src/it/functional-tests/src/main/java/test/android/BUILD b/android/src/it/functional-tests/src/main/java/test/android/BUILD
new file mode 100644
index 000000000..9675854e3
--- /dev/null
+++ b/android/src/it/functional-tests/src/main/java/test/android/BUILD
@@ -0,0 +1,39 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   Functional test code for Dagger-Android
+
+package(default_visibility = ["//:src"])
+
+load(
+    "//:build_defs.bzl",
+    "DOCLINT_HTML_AND_SYNTAX",
+    "PRE_JAVA_8_INFERENCE_OPTS",
+    "JAVA_6_SOURCE_LEVEL",
+)
+
+# Sample code to be tested in functional tests.
+android_library(
+    name = "android",
+    testonly = 1,
+    srcs = glob(["*.java"]),
+    javacopts = PRE_JAVA_8_INFERENCE_OPTS + JAVA_6_SOURCE_LEVEL + DOCLINT_HTML_AND_SYNTAX,
+    # NOTE: This should not depend on Guava or jsr305 to ensure that Dagger can be
+    # used without a Guava and jsr305 deps.
+    deps = [
+        "//:dagger_with_compiler",
+        "//android",
+    ],
+)
diff --git a/android/src/it/functional-tests/src/test/java/test/android/AndroidMemorySensitiveReferenceManagerTest.java b/android/src/it/functional-tests/src/test/java/test/android/AndroidMemorySensitiveReferenceManagerTest.java
index bd95296fd..348376243 100644
--- a/android/src/it/functional-tests/src/test/java/test/android/AndroidMemorySensitiveReferenceManagerTest.java
+++ b/android/src/it/functional-tests/src/test/java/test/android/AndroidMemorySensitiveReferenceManagerTest.java
@@ -25,14 +25,14 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.testing.GcFinalization;
 import com.google.common.testing.GcFinalization.FinalizationPredicate;
+import org.robolectric.RobolectricTestRunner;
 import java.lang.ref.WeakReference;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.junit.runners.JUnit4;
 
 /** Functional tests of {@link dagger.android.AndroidMemorySensitiveReferenceManager}. */
-@RunWith(JUnit4.class)
+@RunWith(RobolectricTestRunner.class)
 public final class AndroidMemorySensitiveReferenceManagerTest {
 
   private TestModule testModule;
diff --git a/android/src/it/functional-tests/src/test/java/test/android/BUILD b/android/src/it/functional-tests/src/test/java/test/android/BUILD
new file mode 100644
index 000000000..0b40b2636
--- /dev/null
+++ b/android/src/it/functional-tests/src/test/java/test/android/BUILD
@@ -0,0 +1,40 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   Functional test code for Dagger-Android
+
+package(default_visibility = ["//:src"])
+
+load(
+    "//:build_defs.bzl",
+    "DOCLINT_HTML_AND_SYNTAX",
+    "PRE_JAVA_8_INFERENCE_OPTS",
+)
+load("//:test_defs.bzl", "GenRobolectricTests")
+
+GenRobolectricTests(
+    name = "android_tests",
+    srcs = glob(["*.java"]),
+    javacopts = PRE_JAVA_8_INFERENCE_OPTS + DOCLINT_HTML_AND_SYNTAX,
+    deps = [
+        "//third_party:guava",
+        "//third_party:guava_testlib",
+        "//third_party:junit",
+        "//third_party:truth",
+        "//android/src/it/functional-tests/src/main/java/test/android",
+    ],
+)
+
+test_suite(name = "AllTests")
diff --git a/android/src/main/java/dagger/android/BUILD b/android/src/main/java/dagger/android/BUILD
new file mode 100644
index 000000000..a156ed133
--- /dev/null
+++ b/android/src/main/java/dagger/android/BUILD
@@ -0,0 +1,37 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   Public Dagger API for Android
+
+package(default_visibility = ["//:src"])
+
+load(
+    "//:build_defs.bzl",
+    "DOCLINT_HTML_AND_SYNTAX",
+    "DOCLINT_REFERENCES",
+    "JAVA_6_SOURCE_LEVEL",
+    "PRE_JAVA_8_INFERENCE_OPTS",
+)
+
+android_library(
+    name = "android",
+    srcs = glob(["*.java"]),
+    javacopts = PRE_JAVA_8_INFERENCE_OPTS + JAVA_6_SOURCE_LEVEL + DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
+    deps = [
+        "@androidsdk//com.android.support:support-annotations-24.2.0",
+        "//third_party:auto_value",
+        "//:dagger_with_compiler",
+    ],
+)
diff --git a/build_defs.bzl b/build_defs.bzl
new file mode 100644
index 000000000..9b0447c0c
--- /dev/null
+++ b/build_defs.bzl
@@ -0,0 +1,29 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+"""This file defines constants useful across the Dagger build."""
+
+DOCLINT_HTML_AND_SYNTAX = ["-Xdoclint:html,syntax"]
+
+DOCLINT_REFERENCES = ["-Xdoclint:reference"]
+
+JAVA_6_SOURCE_LEVEL = ["-source 1.6"]
+
+JAVA_7_SOURCE_LEVEL = ["-source 1.7"]
+
+PRE_JAVA_8_INFERENCE_OPTS = [
+    "-XDusePolyAttribution=false",
+    "-XDuseStrictMethodClashCheck=false",
+    "-XDuseGraphInference=false",
+]
diff --git a/compiler/BUILD b/compiler/BUILD
new file mode 100644
index 000000000..a9fc844d7
--- /dev/null
+++ b/compiler/BUILD
@@ -0,0 +1,95 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   A JSR-330 compliant dependency injection system for android and java
+
+package(default_visibility = ["//:src"])
+
+load("//:build_defs.bzl", "DOCLINT_HTML_AND_SYNTAX", "DOCLINT_REFERENCES")
+
+COMPILER_SRCS = glob(
+    ["src/main/java/**/*.java"],
+)
+
+COMPILER_PLUGINS = [
+    # TODO(cgruber): Enable Beta checker.
+]
+
+COMPILER_SHARED_DEPS = [
+    "//third_party:auto_service",
+    "//third_party:auto_value",
+    "//third_party:auto_common",
+    "//third_party:error_prone_annotations",
+    "//third_party:google_java_format",
+    "//third_party:javapoet",
+    "@local_jdk//:lib/tools.jar",
+    "//third_party:jsr305_annotations",
+    "//third_party:jsr330_inject",
+    "//core",
+    "//producers",
+]
+
+java_library(
+    name = "compiler",
+    srcs = COMPILER_SRCS,
+    javacopts = DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
+    plugins = COMPILER_PLUGINS,
+    deps = COMPILER_SHARED_DEPS + [
+        "//third_party:guava"
+    ],
+)
+
+
+java_plugin(
+    name = "component-codegen",
+    generates_api = 1,
+    processor_class = "dagger.internal.codegen.ComponentProcessor",
+    deps = [":compiler"],
+)
+
+load("//:test_defs.bzl", "GenJavaTests")
+
+GenJavaTests(
+    name = "compiler_tests",
+    srcs = glob(["src/test/java/**/*.java"]),
+    javacopts = DOCLINT_HTML_AND_SYNTAX,
+    plugins = [":component-codegen"],
+    deps = [
+        ":compiler",
+        "//third_party:auto_common",
+        "//third_party:auto_value",
+        "//third_party:compile_testing",
+        "//third_party:javapoet",
+        "//third_party:jsr330_inject",
+        "//third_party:junit",
+        "//third_party:mockito",
+        "//third_party:truth",
+        "//core",
+        "//producers",
+        "//third_party:guava",
+    ],
+)
+
+test_suite(name = "AllTests")
+
+test_suite(
+    name = "UnitAndFunctionalTests",
+    tests = [
+        ":AllTests",
+        "//compiler/src/it/functional-tests:AllTests",
+        "//compiler/src/it/producers-functional-tests:AllTests",
+        "//compiler/src/it/tck:AllTests",
+    ],
+)
diff --git a/compiler/src/it/functional-tests/BUILD b/compiler/src/it/functional-tests/BUILD
new file mode 100644
index 000000000..8e334ac42
--- /dev/null
+++ b/compiler/src/it/functional-tests/BUILD
@@ -0,0 +1,68 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   Functional tests for Dagger
+
+package(default_visibility = ["//:src"])
+
+load(
+    "//:build_defs.bzl",
+    "DOCLINT_HTML_AND_SYNTAX",
+    "DOCLINT_REFERENCES",
+    "PRE_JAVA_8_INFERENCE_OPTS",
+)
+
+# Sample code to be tested in functional tests.
+java_library(
+    name = "code_under_test",
+    testonly = 1,
+    srcs = glob(
+        ["src/main/java/**/*.java"],
+    ),
+    javacopts = PRE_JAVA_8_INFERENCE_OPTS + DOCLINT_HTML_AND_SYNTAX,
+    # NOTE: This should not depend on Guava or jsr305 to ensure that Dagger can be
+    # used without a Guava and jsr305 deps.
+    deps = [
+        "//third_party:auto_factory",
+        "//third_party:auto_value",
+        "//:dagger_with_compiler",
+        "//third_party:jsr330_inject",
+        "//third_party:junit",
+    ],
+)
+
+
+load("//:test_defs.bzl", "GenJavaTests")
+
+GenJavaTests(
+    name = "test_lib",
+    srcs = glob(
+        ["src/test/java/**/*.java"],
+    ),
+    javacopts = PRE_JAVA_8_INFERENCE_OPTS + DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
+    deps = [
+        ":code_under_test",
+        "//third_party:guava_testlib",
+        "//third_party:guava",
+        "//third_party:auto_value",
+        "//:dagger_with_compiler",
+        "//third_party:jsr330_inject",
+        "//third_party:junit",
+        "//third_party:truth",
+    ],
+)
+
+
+test_suite(name = "AllTests")
diff --git a/compiler/src/it/guava-functional-tests/BUILD b/compiler/src/it/guava-functional-tests/BUILD
new file mode 100644
index 000000000..24c8eb6a9
--- /dev/null
+++ b/compiler/src/it/guava-functional-tests/BUILD
@@ -0,0 +1,53 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   Functional tests for Dagger that depend on Guava
+
+package(default_visibility = ["//:src"])
+
+load("//:build_defs.bzl", "DOCLINT_HTML_AND_SYNTAX", "PRE_JAVA_8_INFERENCE_OPTS")
+
+java_library(
+    name = "code_under_test",
+    testonly = 1,
+    srcs = glob(["src/main/java/**/*.java"]),
+    javacopts = PRE_JAVA_8_INFERENCE_OPTS + DOCLINT_HTML_AND_SYNTAX,
+    deps = [
+        "//third_party:guava",
+        "//third_party:auto_value",
+        "//:dagger_with_compiler",
+        "//third_party:jsr330_inject",
+        "//third_party:junit",
+    ],
+)
+
+load("//:test_defs.bzl", "GenJavaTests")
+
+GenJavaTests(
+    name = "guava_functional_tests",
+    srcs = glob(["src/test/java/**/*.java"]),
+    javacopts = PRE_JAVA_8_INFERENCE_OPTS + DOCLINT_HTML_AND_SYNTAX,
+    deps = [
+        ":code_under_test",
+        "//third_party:guava",
+        "//third_party:auto_value",
+        "//:dagger_with_compiler",
+        "//third_party:jsr330_inject",
+        "//third_party:junit",
+        "//third_party:truth",
+    ],
+)
+
+test_suite(name = "AllTests")
diff --git a/compiler/src/it/producers-functional-tests/BUILD b/compiler/src/it/producers-functional-tests/BUILD
new file mode 100644
index 000000000..b9154cbda
--- /dev/null
+++ b/compiler/src/it/producers-functional-tests/BUILD
@@ -0,0 +1,58 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   Functional tests for Dagger Producers
+
+package(default_visibility = ["//:src"])
+
+load(
+    "//:build_defs.bzl",
+    "DOCLINT_HTML_AND_SYNTAX",
+    "DOCLINT_REFERENCES",
+    "JAVA_7_SOURCE_LEVEL",
+    "PRE_JAVA_8_INFERENCE_OPTS",
+)
+
+# Sample code to be tested in functional tests.
+java_library(
+    name = "code_under_test",
+    srcs = glob(["src/main/java/**/*.java"]),
+    javacopts = PRE_JAVA_8_INFERENCE_OPTS + JAVA_7_SOURCE_LEVEL + DOCLINT_HTML_AND_SYNTAX,
+    deps = [
+        "//third_party:guava",
+        "//third_party:auto_value",
+        "//:producers_with_compiler",
+        "//third_party:jsr330_inject",
+    ],
+)
+
+load("//:test_defs.bzl", "GenJavaTests")
+
+GenJavaTests(
+    name = "producers-functional-tests",
+    srcs = glob(["src/test/java/**/*.java"]),
+    javacopts = PRE_JAVA_8_INFERENCE_OPTS + JAVA_7_SOURCE_LEVEL + DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
+    deps = [
+        ":code_under_test",
+        "//third_party:guava",
+        "//:producers_with_compiler",
+        "//third_party:jsr330_inject",
+        "//third_party:junit",
+        "//third_party:mockito",
+        "//third_party:truth",
+    ],
+)
+
+test_suite(name = "AllTests")
diff --git a/compiler/src/it/tck/BUILD b/compiler/src/it/tck/BUILD
new file mode 100644
index 000000000..c0979488c
--- /dev/null
+++ b/compiler/src/it/tck/BUILD
@@ -0,0 +1,60 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#  TCK tests for Dagger
+
+package(default_visibility = ["//:src"])
+
+load(
+    "//:build_defs.bzl",
+    "DOCLINT_HTML_AND_SYNTAX",
+    "DOCLINT_REFERENCES",
+    "PRE_JAVA_8_INFERENCE_OPTS",
+)
+
+# Sample code to be tested in functional tests.
+java_library(
+    name = "code_under_test",
+    testonly = 1,
+    srcs = glob(["src/main/java/**/*.java"]),
+    javacopts = PRE_JAVA_8_INFERENCE_OPTS + DOCLINT_HTML_AND_SYNTAX + [
+        "-Adagger.privateMemberValidation=warning",
+        "-Adagger.staticMemberValidation=warning",
+        "-Adagger.ignorePrivateAndStaticInjectionForComponent=enabled",
+    ],
+    deps = [
+        "//:dagger_with_compiler",
+        "//third_party:jsr330_inject",
+        "//third_party:jsr330_inject_tck",
+        "//third_party:junit",
+    ],
+)
+
+load("//:test_defs.bzl", "GenJavaTests")
+
+GenJavaTests(
+    name = "tck_tests",
+    srcs = glob(["src/test/java/**/*.java"]),
+    javacopts = PRE_JAVA_8_INFERENCE_OPTS + DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
+    deps = [
+        ":code_under_test",
+        "//:dagger_with_compiler",
+        "//third_party:jsr330_inject",
+        "//third_party:jsr330_inject_tck",
+        "//third_party:junit",
+    ],
+)
+
+test_suite(name = "AllTests")
diff --git a/core/BUILD b/core/BUILD
new file mode 100644
index 000000000..bd2407ecd
--- /dev/null
+++ b/core/BUILD
@@ -0,0 +1,44 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   A JSR-330 compliant dependency injection system for android and java
+
+package(default_visibility = ["//:src"])
+
+load("//:build_defs.bzl", "DOCLINT_HTML_AND_SYNTAX", "DOCLINT_REFERENCES")
+load("//:test_defs.bzl", "GenJavaTests")
+
+java_library(
+    name = "core",
+    plugins = [
+        # TODO(cgruber): Enable Beta checker.
+    ],
+    exports = ["//core/src/main/java/dagger:core"],
+)
+
+GenJavaTests(
+    name = "core_tests",
+    srcs = glob(["src/test/java/**/*.java"]),
+    javacopts = DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
+    deps = [
+        ":core",
+        "//third_party:guava",
+        "//third_party:jsr330_inject",
+        "//third_party:junit",
+        "//third_party:truth",
+    ],
+)
+
+test_suite(name = "AllTests")
diff --git a/core/src/main/java/dagger/BUILD b/core/src/main/java/dagger/BUILD
new file mode 100644
index 000000000..bf28e6584
--- /dev/null
+++ b/core/src/main/java/dagger/BUILD
@@ -0,0 +1,33 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   A JSR-330 compliant dependency injection system for android and java
+
+package(default_visibility = ["//:src"])
+
+load(
+    "//:build_defs.bzl",
+    "DOCLINT_HTML_AND_SYNTAX",
+    "JAVA_6_SOURCE_LEVEL",
+    "PRE_JAVA_8_INFERENCE_OPTS",
+)
+
+java_library(
+    name = "core",
+    srcs = glob(["**/*.java"]),
+    javacopts = PRE_JAVA_8_INFERENCE_OPTS + JAVA_6_SOURCE_LEVEL + DOCLINT_HTML_AND_SYNTAX,
+    exports = ["//third_party:jsr330_inject"],
+    deps = ["//third_party:jsr330_inject"],
+)
diff --git a/core/src/main/java/dagger/internal/doc-files/ReferenceReleasingProvider-statemachine.png b/core/src/main/java/dagger/internal/doc-files/ReferenceReleasingProvider-statemachine.png
new file mode 100644
index 000000000..8195dc0f0
Binary files /dev/null and b/core/src/main/java/dagger/internal/doc-files/ReferenceReleasingProvider-statemachine.png differ
diff --git a/core/src/main/java/dagger/releasablereferences/doc-files/ReleasableReferenceManager-statemachine.png b/core/src/main/java/dagger/releasablereferences/doc-files/ReleasableReferenceManager-statemachine.png
new file mode 100644
index 000000000..6400f1d23
Binary files /dev/null and b/core/src/main/java/dagger/releasablereferences/doc-files/ReleasableReferenceManager-statemachine.png differ
diff --git a/producers/BUILD b/producers/BUILD
new file mode 100644
index 000000000..66f9c10b3
--- /dev/null
+++ b/producers/BUILD
@@ -0,0 +1,64 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   An asynchronous dependency injection system that extends JSR-330.
+
+package(default_visibility = ["//:src"])
+
+load(
+    "//:build_defs.bzl",
+    "DOCLINT_HTML_AND_SYNTAX",
+    "DOCLINT_REFERENCES",
+    "JAVA_6_SOURCE_LEVEL",
+    "JAVA_7_SOURCE_LEVEL",
+    "PRE_JAVA_8_INFERENCE_OPTS",
+)
+
+java_library(
+    name = "producers",
+    srcs = glob(["src/main/java/**/*.java"]),
+    javacopts = PRE_JAVA_8_INFERENCE_OPTS + JAVA_6_SOURCE_LEVEL + DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
+    plugins = [
+        # TODO(cgruber): Enable Beta checker.
+    ],
+    exports = [
+        # TODO(dpb): Don't export any of Guava.
+        "//third_party:guava",
+        "//third_party:jsr330_inject",
+    ],
+    deps = [
+        "//third_party:guava",
+        "//third_party:jsr305_annotations",
+        "//third_party:jsr330_inject",
+        "//core",
+    ],
+)
+
+
+load("//:test_defs.bzl", "GenJavaTests")
+
+GenJavaTests(
+    name = "produces_tests",
+    srcs = glob(["src/test/java/**/*.java"]),
+    javacopts = PRE_JAVA_8_INFERENCE_OPTS + JAVA_7_SOURCE_LEVEL,
+    deps = [
+        ":producers",
+        "//third_party:guava",
+        "//third_party:junit",
+        "//third_party:mockito",
+        "//third_party:truth",
+        "//third_party:guava_testlib",
+    ],
+)
diff --git a/test_defs.bzl b/test_defs.bzl
new file mode 100644
index 000000000..20ae62146
--- /dev/null
+++ b/test_defs.bzl
@@ -0,0 +1,55 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+def GenJavaTests(name, srcs, deps, plugins = None, javacopts = None):
+  _GenTests(native.java_library, native.java_test, name, srcs, deps, plugins, javacopts)
+
+def GenRobolectricTests(name, srcs, deps, plugins = None, javacopts = None):
+  # TODO(ronshapiro): enable these when Bazel supports robolectric tests
+  pass
+
+def _GenTests(
+    library_rule_type, test_rule_type, name, srcs, deps, plugins = None, javacopts = None):
+  test_files = []
+  supporting_files = []
+  for src in srcs:
+    if src.endswith("Test.java"):
+      test_files.append(src)
+    else:
+      supporting_files.append(src)
+
+  test_deps = [] + deps
+  if len(supporting_files) > 0:
+    supporting_files_name = name + "_lib"
+    test_deps.append(":" + supporting_files_name)
+    library_rule_type(
+        name = supporting_files_name,
+        deps = deps,
+        srcs = supporting_files,
+        plugins = plugins,
+        javacopts = javacopts,
+        testonly = 1,
+    )
+
+  for test_file in test_files:
+    test_name = test_file.replace(".java", "")
+    test_class = (PACKAGE_NAME + "/" + test_name).rpartition("src/test/java/")[2].replace("/",".")
+    test_rule_type(
+        name = test_name,
+        deps = test_deps,
+        srcs = [test_file],
+        plugins = plugins,
+        javacopts = javacopts,
+        test_class = test_class,
+    )
diff --git a/third_party/BUILD b/third_party/BUILD
new file mode 100644
index 000000000..27c31fb1b
--- /dev/null
+++ b/third_party/BUILD
@@ -0,0 +1,177 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+package(default_visibility = ["//visibility:public"])
+
+java_library(
+    name = "jsr_250",
+    exports = ["@javax_annotations_jsr250_api//jar"],
+)
+
+java_library(
+    name = "jsr305_annotations",
+    exports = ["@com_google_code_findbugs_jsr305//jar"],
+)
+
+java_library(
+    name = "jsr330_inject",
+    exports = ["@javax_inject_javax_inject//jar"],
+)
+
+java_library(
+    name = "jsr330_inject_tck",
+    exports = ["@javax_inject_javax_inject_tck//jar"],
+)
+
+java_library(
+    name = "error_prone_annotations",
+    tags = ["compile_time_dep"],
+    exports = ["@com_google_errorprone_error_prone_annotations//jar"],
+)
+
+java_library(
+    name = "junit",
+    exports = ["@junit_junit//jar"],
+)
+
+java_library(
+    name = "truth",
+    exports = ["@com_google_truth_truth//jar"],
+)
+
+java_library(
+    name = "guava",
+    exports = ["@com_google_guava_guava//jar"],
+)
+
+java_library(
+    name = "guava_testlib",
+    exports = ["@com_google_guava_guava_testlib//jar"],
+)
+
+java_library(
+    name = "auto_common",
+    exports = ["@com_google_auto_auto_common//jar"],
+)
+
+java_plugin(
+    name = "auto_value_processor",
+    processor_class = "com.google.auto.value.processor.AutoValueProcessor",
+    visibility = ["//visibility:private"],
+    deps = [
+        ":auto_common",
+        ":auto_service",
+        "//third_party:guava",
+        "@com_google_auto_value_auto_value//jar",
+    ],
+)
+
+java_plugin(
+    name = "auto_annotation_processor",
+    processor_class = "com.google.auto.value.processor.AutoAnnotationProcessor",
+    visibility = ["//visibility:private"],
+    deps = [
+        ":auto_common",
+        ":auto_service",
+        "//third_party:guava",
+        "@com_google_auto_value_auto_value//jar",
+    ],
+)
+
+java_library(
+    name = "auto_value",
+    exported_plugins = [
+        ":auto_value_processor",
+        ":auto_annotation_processor",
+    ],
+    tags = ["compile_time_dep"],
+    exports = [
+        ":jsr_250",
+        "@com_google_auto_value_auto_value//jar",
+    ],
+)
+
+java_plugin(
+    name = "auto_factory_processor",
+    processor_class = "com.google.auto.factory.processor.AutoFactoryProcessor",
+    visibility = ["//visibility:private"],
+    deps = [
+        ":auto_common",
+        ":auto_service",
+        "//third_party:guava",
+        "@com_google_auto_factory_auto_factory//jar",
+        "@com_squareup_javawriter//jar",
+    ],
+)
+
+java_library(
+    name = "auto_factory",
+    exported_plugins = [":auto_factory_processor"],
+    exports = ["@com_google_auto_factory_auto_factory//jar"],
+)
+
+java_plugin(
+    name = "auto_service_processor",
+    processor_class = "com.google.auto.service.processor.AutoServiceProcessor",
+    visibility = ["//visibility:private"],
+    deps = [
+        ":auto_common",
+        "//third_party:guava",
+        "@com_google_auto_service_auto_service//jar",
+    ],
+)
+
+java_library(
+    name = "auto_service",
+    exported_plugins = [":auto_service_processor"],
+    tags = ["compile_time_dep"],
+    exports = ["@com_google_auto_service_auto_service//jar"],
+)
+
+java_library(
+    name = "google_java_format",
+    exports = ["@com_google_googlejavaformat_google_java_format//jar"],
+)
+
+java_library(
+    name = "javapoet",
+    exports = ["@com_squareup_javapoet//jar"],
+)
+
+java_library(
+    name = "mockito",
+    testonly = 1,
+    exports = ["@org_mockito_mockito_core//jar"],
+    runtime_deps = [
+        "@org_hamcrest_hamcrest_core//jar",
+        "@org_objenesis_objenesis//jar",
+    ],
+)
+
+java_library(
+    name = "compile_testing",
+    testonly = 1,
+    exports = [
+        "@com_google_testing_compile_compile_testing//jar",
+    ],
+    runtime_deps = [
+        ":auto_value",
+        ":jsr305_annotations",
+        "//third_party:error_prone_annotations",
+        "//third_party:guava",
+        "//third_party:junit",
+        "//third_party:truth",
+        "@local_jdk//:lib/tools.jar",
+    ],
+)
diff --git a/tools/maven_sha1_test.py b/tools/maven_sha1_test.py
new file mode 100644
index 000000000..c999dfafa
--- /dev/null
+++ b/tools/maven_sha1_test.py
@@ -0,0 +1,42 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import ast
+import unittest
+
+class WorkspaceVisitor(ast.NodeVisitor):
+  def __init__(self):
+    self.missing_sha1 = []
+
+  def visit_Call(self, rule):
+    if rule.func.id == 'maven_jar':
+      name = None
+      for parameter in rule.keywords:
+        if parameter.arg == 'sha1':
+          return
+        if parameter.arg == 'name':
+          name = parameter.value.s
+      self.missing_sha1.append(name)
+
+class MavenSha1Test(unittest.TestCase):
+  def test_each_maven_jar_rule_has_sha1(self):
+    with open('WORKSPACE', 'r') as workspace:
+      visitor = WorkspaceVisitor()
+      visitor.visit(ast.parse(workspace.read()))
+      if len(visitor.missing_sha1) > 0:
+        missing = ', '.join(visitor.missing_sha1)
+        self.fail('%s did not specify a sha1' % missing)
+
+if __name__ == '__main__':
+  unittest.main()
diff --git a/util/maven/__init__.py b/util/maven/__init__.py
new file mode 100644
index 000000000..e69de29bb
diff --git a/util/maven/generate_poms.py b/util/maven/generate_poms.py
new file mode 100644
index 000000000..c9dcc42ee
--- /dev/null
+++ b/util/maven/generate_poms.py
@@ -0,0 +1,109 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import os
+from subprocess import check_output
+import sys
+from workspace_parser import maven_artifacts
+from xml_formatting import generate_pom
+
+def _shell(command):
+  output = check_output(command,
+                        shell=True,
+                        stderr=open(os.devnull)).strip()
+  return output.splitlines()
+
+def deps_of(label):
+  return _shell(
+      """bazel query 'let deps = labels(deps, {0}) in
+      $deps except attr(tags, compile_time_dep, $deps)'""".format(label))
+
+def exports_for(label):
+  return _shell('bazel query "labels(exports, %s)"' % label)
+
+def pom_deps(label):
+  accumulated_deps = set()
+  for dep in deps_of(label):
+    if dep.startswith("@local_jdk//:"): continue
+    if dep.startswith(('//:', '//third_party:')):
+      for export in exports_for(dep):
+        accumulated_deps.add(export)
+        accumulated_deps.update(pom_deps(export))
+    else:
+      accumulated_deps.add(dep)
+
+  return accumulated_deps
+
+
+GROUP = 'com.google.dagger'
+
+METADATA = {
+    '//core/src/main/java/dagger:core': {
+        'name': 'Dagger',
+        'artifact': 'dagger',
+        'alias': '//core:core',
+    },
+    '//compiler:compiler': {
+        'name': 'Dagger Compiler',
+        'artifact': 'dagger-compiler',
+    },
+    '//producers:producers': {
+        'name': 'Dagger Producers',
+        'artifact': 'dagger-producers',
+    },
+    '//android/src/main/java/dagger/android:android': {
+        'name': 'Dagger Android',
+        'artifact': 'dagger-android',
+        'alias': '//android:android',
+        'packaging': 'aar',
+    },
+}
+
+class UnknownDependencyException(Exception): pass
+
+def main():
+  if len(sys.argv) <= 3:
+    print 'Usage: %s <version> <target_for_pom>...' % sys.argv[0]
+    sys.exit(1)
+
+  version = sys.argv[1]
+  artifacts = maven_artifacts()
+  artifacts['@androidsdk//com.android.support:support-annotations-24.2.0'] = (
+      'com.android.support:support-annotations:24.2.0'
+  )
+
+  for label, metadata in METADATA.iteritems():
+    artifacts[label] = (
+        'com.google.dagger:%s:%s' % (metadata['artifact'], version)
+    )
+    if 'alias' in metadata:
+      artifacts[metadata['alias']] = artifacts[label]
+
+  def artifact_for_dep(label):
+    if label in artifacts:
+      return artifacts[label]
+    raise UnknownDependencyException('No artifact found for %s' % label)
+
+  for arg in sys.argv[2:]:
+    metadata = METADATA[arg]
+    with open('%s.pom.xml' % metadata['artifact'], 'w') as pom_file:
+      pom_file.write(
+          generate_pom(
+              artifacts[arg],
+              metadata,
+              map(artifact_for_dep, pom_deps(arg)),
+              version))
+
+if __name__ == '__main__':
+  main()
diff --git a/util/maven/workspace_parser.py b/util/maven/workspace_parser.py
new file mode 100644
index 000000000..47e24483a
--- /dev/null
+++ b/util/maven/workspace_parser.py
@@ -0,0 +1,37 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import ast
+
+class WorkspaceVisitor(ast.NodeVisitor):
+  def __init__(self):
+    self.artifacts = {}
+
+  def visit_Call(self, rule):
+    if rule.func.id is not 'maven_jar': return
+    name = None
+    artifact = None
+    for keyword in rule.keywords:
+      if keyword.arg == 'name':
+        name = keyword.value.s
+      if keyword.arg == 'artifact':
+        artifact = keyword.value.s
+    self.artifacts['@%s//jar:jar' % name] = artifact
+
+def maven_artifacts():
+  visitor = WorkspaceVisitor()
+  with open('WORKSPACE', 'r') as workspace:
+    visitor.visit(ast.parse(workspace.read()))
+
+  return visitor.artifacts
diff --git a/util/maven/xml_formatting.py b/util/maven/xml_formatting.py
new file mode 100644
index 000000000..54ee89a0f
--- /dev/null
+++ b/util/maven/xml_formatting.py
@@ -0,0 +1,102 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+DEP_BLOCK = """
+<dependency>
+  <groupId>%s</groupId>
+  <artifactId>%s</artifactId>
+  <version>%s</version>
+</dependency>
+""".strip()
+
+def maven_dependency_xml(artifact_string):
+  group, artifact = artifact_string.split(':')[0:2]
+  version = artifact_string.split(':')[-1]
+  formatted = DEP_BLOCK % (group, artifact, version)
+  return '\n'.join(['    %s' %x for x in formatted.split('\n')])
+
+POM_OUTLINE = """<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ Copyright (C) 2012 The Dagger Authors.
+
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>org.sonatype.oss</groupId>
+    <artifactId>oss-parent</artifactId>
+    <version>7</version>
+  </parent>
+
+  <groupId>com.google.dagger</groupId>
+  <artifactId>{artifact}</artifactId>
+  <name>{name}</name>
+  <version>{version}</version>
+  <description>A fast dependency injector for Android and Java.</description>
+  <url>https://github.com/google/dagger</url>
+  <packaging>{packaging}</packaging>
+
+  <scm>
+    <url>http://github.com/google/dagger/</url>
+    <connection>scm:git:git://github.com/google/dagger.git</connection>
+    <developerConnection>scm:git:ssh://git@github.com/google/dagger.git</developerConnection>
+    <tag>HEAD</tag>
+  </scm>
+
+  <issueManagement>
+    <system>GitHub Issues</system>
+    <url>http://github.com/google/dagger/issues</url>
+  </issueManagement>
+
+  <licenses>
+    <license>
+      <name>Apache 2.0</name>
+      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
+    </license>
+  </licenses>
+
+  <organization>
+    <name>Google, Inc.</name>
+    <url>http://www.google.com</url>
+  </organization>
+
+  <dependencies>
+{deps}
+  </dependencies>
+</project>
+"""
+
+def generate_pom(artifact_string, metadata, deps, version):
+  artifact = artifact_string.split(':')[1]
+  # accounts for classifiers in artifact string
+  version = artifact_string.split(':')[-1]
+
+  return POM_OUTLINE.format(
+      artifact = artifact,
+      name = metadata['name'],
+      version = version,
+      packaging = metadata.get('packaging', 'jar'),
+      deps = '\n'.join(map(maven_dependency_xml, deps)))
