diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index 39b4fc4c3..e2aa8ab1e 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -54,6 +54,7 @@
 import java.util.Arrays;
 import java.util.Optional;
 import java.util.Set;
+import javax.annotation.processing.ProcessingEnvironment;
 import javax.annotation.processing.Processor;
 import javax.annotation.processing.RoundEnvironment;
 import javax.inject.Inject;
@@ -122,7 +123,7 @@ public SourceVersion getSupportedSourceVersion() {
   @Override
   protected Iterable<? extends ProcessingStep> initSteps() {
     ProcessorComponent.builder()
-        .processingEnvironmentModule(new ProcessingEnvironmentModule(processingEnv))
+        .processingEnvironment(processingEnv)
         .testingPlugins(testingPlugins)
         .build()
         .inject(this);
@@ -158,7 +159,8 @@ static Builder builder() {
     @CanIgnoreReturnValue
     @Component.Builder
     interface Builder {
-      Builder processingEnvironmentModule(ProcessingEnvironmentModule module);
+      @BindsInstance
+      Builder processingEnvironment(ProcessingEnvironment processingEnv);
 
       @BindsInstance
       Builder testingPlugins(
diff --git a/java/dagger/internal/codegen/ProcessingEnvironmentModule.java b/java/dagger/internal/codegen/ProcessingEnvironmentModule.java
index d50e8e6f8..f98709fa1 100644
--- a/java/dagger/internal/codegen/ProcessingEnvironmentModule.java
+++ b/java/dagger/internal/codegen/ProcessingEnvironmentModule.java
@@ -16,9 +16,8 @@
 
 package dagger.internal.codegen;
 
-import static com.google.common.base.Preconditions.checkNotNull;
-
 import com.google.googlejavaformat.java.filer.FormattingFiler;
+import dagger.Binds;
 import dagger.Module;
 import dagger.Provides;
 import dagger.Reusable;
@@ -39,27 +38,25 @@
 
 /** Bindings that depend on the {@link ProcessingEnvironment}. */
 @Module
-final class ProcessingEnvironmentModule {
-
-  private final ProcessingEnvironment processingEnvironment;
-
-  ProcessingEnvironmentModule(ProcessingEnvironment processingEnvironment) {
-    this.processingEnvironment = checkNotNull(processingEnvironment);
-  }
+interface ProcessingEnvironmentModule {
+  @Binds
+  @Reusable // to avoid parsing options more than once
+  CompilerOptions bindCompilerOptions(
+      ProcessingEnvironmentCompilerOptions processingEnvironmentCompilerOptions);
 
   @Provides
   @ProcessingOptions
-  Map<String, String> processingOptions() {
+  static Map<String, String> processingOptions(ProcessingEnvironment processingEnvironment) {
     return processingEnvironment.getOptions();
   }
 
   @Provides
-  Messager messager() {
+  static Messager messager(ProcessingEnvironment processingEnvironment) {
     return processingEnvironment.getMessager();
   }
 
   @Provides
-  Filer filer(CompilerOptions compilerOptions) {
+  static Filer filer(CompilerOptions compilerOptions, ProcessingEnvironment processingEnvironment) {
     if (compilerOptions.headerCompilation() || !compilerOptions.formatGeneratedSource()) {
       return processingEnvironment.getFiler();
     } else {
@@ -68,34 +65,29 @@ Filer filer(CompilerOptions compilerOptions) {
   }
 
   @Provides
-  Types types() {
+  static Types types(ProcessingEnvironment processingEnvironment) {
     return processingEnvironment.getTypeUtils();
   }
 
   @Provides
-  SourceVersion sourceVersion() {
+  static SourceVersion sourceVersion(ProcessingEnvironment processingEnvironment) {
     return processingEnvironment.getSourceVersion();
   }
 
   @Provides
-  DaggerElements daggerElements() {
+  static DaggerElements daggerElements(ProcessingEnvironment processingEnvironment) {
     return new DaggerElements(processingEnvironment);
   }
 
   @Provides
-  @Reusable // to avoid parsing options more than once
-  CompilerOptions compilerOptions() {
-    return ProcessingEnvironmentCompilerOptions.create(processingEnvironment);
-  }
-
-  @Provides
-  Optional<DaggerStatisticsRecorder> daggerStatisticsRecorder() {
+  static Optional<DaggerStatisticsRecorder> daggerStatisticsRecorder(
+      ProcessingEnvironment processingEnvironment) {
     return Optional.empty();
   }
 
   @Provides
   @ProcessorClassLoader
-  ClassLoader processorClassloader() {
+  static ClassLoader processorClassloader(ProcessingEnvironment processingEnvironment) {
     return BindingGraphPlugin.class.getClassLoader();
   }
 
diff --git a/java/dagger/internal/codegen/compileroption/BUILD b/java/dagger/internal/codegen/compileroption/BUILD
index b83e4bf97..0de4c1917 100644
--- a/java/dagger/internal/codegen/compileroption/BUILD
+++ b/java/dagger/internal/codegen/compileroption/BUILD
@@ -25,6 +25,7 @@ java_library(
     deps = [
         "//java/dagger:core",
         "//java/dagger/internal/codegen/extension",
+        "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/producers",
         "@bazel_tools//tools/jdk:langtools-neverlink",
         "@google_bazel_common//third_party/java/auto:common",
diff --git a/java/dagger/internal/codegen/compileroption/ProcessingEnvironmentCompilerOptions.java b/java/dagger/internal/codegen/compileroption/ProcessingEnvironmentCompilerOptions.java
index bb36e8e72..bee255791 100644
--- a/java/dagger/internal/codegen/compileroption/ProcessingEnvironmentCompilerOptions.java
+++ b/java/dagger/internal/codegen/compileroption/ProcessingEnvironmentCompilerOptions.java
@@ -51,6 +51,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
+import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.producers.Produces;
 import java.util.Arrays;
 import java.util.EnumSet;
@@ -60,23 +61,24 @@
 import java.util.Set;
 import java.util.stream.Stream;
 import javax.annotation.processing.ProcessingEnvironment;
+import javax.inject.Inject;
 import javax.lang.model.element.TypeElement;
 import javax.tools.Diagnostic;
 
 /** {@link CompilerOptions} for the given {@link ProcessingEnvironment}. */
 public final class ProcessingEnvironmentCompilerOptions extends CompilerOptions {
-  /** Returns a valid {@link CompilerOptions} parsed from the processing environment. */
-  public static CompilerOptions create(ProcessingEnvironment processingEnvironment) {
-    return new ProcessingEnvironmentCompilerOptions(processingEnvironment).checkValid();
-  }
-
   private final ProcessingEnvironment processingEnvironment;
+  private final DaggerElements daggerElements;
   private final Map<EnumOption<?>, Object> enumOptions = new HashMap<>();
   private final Map<EnumOption<?>, ImmutableMap<String, ? extends Enum<?>>> allCommandLineOptions =
       new HashMap<>();
 
-  private ProcessingEnvironmentCompilerOptions(ProcessingEnvironment processingEnvironment) {
+  @Inject
+  ProcessingEnvironmentCompilerOptions(
+      ProcessingEnvironment processingEnvironment, DaggerElements daggerElements) {
     this.processingEnvironment = processingEnvironment;
+    this.daggerElements = daggerElements;
+    checkValid();
   }
 
   @Override
diff --git a/java/dagger/internal/codegen/langmodel/DaggerElements.java b/java/dagger/internal/codegen/langmodel/DaggerElements.java
index d40a4877f..63c5e1ddf 100644
--- a/java/dagger/internal/codegen/langmodel/DaggerElements.java
+++ b/java/dagger/internal/codegen/langmodel/DaggerElements.java
@@ -28,6 +28,7 @@
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
 import com.google.common.collect.FluentIterable;
+import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import com.google.common.graph.Traverser;
@@ -421,6 +422,14 @@ public PackageElement getPackageElement(CharSequence name) {
     return elements.getElementValuesWithDefaults(a);
   }
 
+  /** Returns a map of annotation values keyed by attribute name. */
+  public Map<String, ? extends AnnotationValue> getElementValuesWithDefaultsByName(
+      AnnotationMirror a) {
+    ImmutableMap.Builder<String, AnnotationValue> builder = ImmutableMap.builder();
+    getElementValuesWithDefaults(a).forEach((k, v) -> builder.put(k.getSimpleName().toString(), v));
+    return builder.build();
+  }
+
   @Override
   public String getDocComment(Element e) {
     return elements.getDocComment(e);
