diff --git a/producers/src/main/java/dagger/producers/Producer.java b/producers/src/main/java/dagger/producers/Producer.java
index eb159bbf6..b6103d272 100644
--- a/producers/src/main/java/dagger/producers/Producer.java
+++ b/producers/src/main/java/dagger/producers/Producer.java
@@ -18,6 +18,8 @@
 import dagger.internal.Beta;
 import com.google.common.util.concurrent.ListenableFuture;
 
+import javax.annotation.CheckReturnValue;
+
 /**
  * An interface that represents the production of a type {@code T}. You can also inject
  * {@code Producer<T>} instead of {@code T}, which will delay the execution of any code that
@@ -100,5 +102,6 @@
    * <p>If the key is bound to a {@link Produces} method, then calling this method multiple times
    * will return the same future.
    */
+  @CheckReturnValue
   ListenableFuture<T> get();
 }
diff --git a/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java b/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java
index 6cb6bdbcc..5eb1ea790 100644
--- a/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java
+++ b/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java
@@ -63,6 +63,7 @@ public ProductionComponentMonitor get() {
   }
 
   @Test
+  @SuppressWarnings("CheckReturnValue")
   public void get_nullPointerException() {
     Producer<Object> producer = new DelegateProducer<>(componentMonitorProvider, null);
     try {
