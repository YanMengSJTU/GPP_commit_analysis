diff --git a/compiler/src/main/java/dagger/internal/codegen/GraphVisualizer.java b/compiler/src/main/java/dagger/internal/codegen/GraphVisualizer.java
index a9a90fe8e..26394b6bd 100644
--- a/compiler/src/main/java/dagger/internal/codegen/GraphVisualizer.java
+++ b/compiler/src/main/java/dagger/internal/codegen/GraphVisualizer.java
@@ -17,7 +17,9 @@
 
 import dagger.internal.Binding;
 import java.io.IOException;
+import java.util.Comparator;
 import java.util.HashSet;
+import java.util.TreeSet;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Set;
@@ -49,7 +51,7 @@ public void write(Map<String, Binding<?>> bindings, GraphVizWriter writer) throw
     for (Map.Entry<Binding<?>, String> entry : namesIndex.entrySet()) {
       Binding<?> sourceBinding = entry.getKey();
       String sourceName = entry.getValue();
-      Set<Binding<?>> dependencies = new HashSet<Binding<?>>();
+      Set<Binding<?>> dependencies = new TreeSet<Binding<?>>(new BindingComparator());
       sourceBinding.getDependencies(dependencies, dependencies);
       for (Binding<?> targetBinding : dependencies) {
         String targetName = namesIndex.get(targetBinding);
@@ -122,4 +124,16 @@ String shortName(String key) {
 
     return result.toString();
   }
+
+  /** A Comparator for Bindings so we can insure a consistent ordering of output. */
+  private static class BindingComparator implements Comparator<Binding<?>> {
+    @Override
+    public int compare(Binding<?> left, Binding<?> right) {
+      return getStringForBinding(left).compareTo(getStringForBinding(right));
+    }
+
+    private String getStringForBinding(Binding<?> binding) {
+      return binding == null ? "" : binding.toString();
+    }
+  }
 }
