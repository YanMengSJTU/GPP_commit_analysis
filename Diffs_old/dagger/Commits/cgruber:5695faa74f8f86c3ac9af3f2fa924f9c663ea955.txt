diff --git a/compiler/src/test/java/dagger/tests/integration/codegen/dagger1/InjectAdapterGenerationTest.java b/compiler/src/test/java/dagger/tests/integration/codegen/dagger1/InjectAdapterGenerationTest.java
index 257f99d8e..703cf83d3 100644
--- a/compiler/src/test/java/dagger/tests/integration/codegen/dagger1/InjectAdapterGenerationTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/codegen/dagger1/InjectAdapterGenerationTest.java
@@ -49,7 +49,7 @@
             "  private static final Class<?>[] INCLUDES = {};",
             "  public Basic$AModule$$ModuleAdapter() {",
             "    super(Basic.AModule.class, INJECTS, STATIC_INJECTIONS, false, INCLUDES,",
-            "      true, false);",
+            "      true, true);",
             "  }",
             "  @Override public Basic.AModule newModule() {",
             "    return new Basic.AModule();",
diff --git a/compiler/src/test/java/dagger/tests/integration/codegen/dagger1/ModuleAdapterGenerationTest.java b/compiler/src/test/java/dagger/tests/integration/codegen/dagger1/ModuleAdapterGenerationTest.java
index 17dfa7ce0..12ef23f0c 100644
--- a/compiler/src/test/java/dagger/tests/integration/codegen/dagger1/ModuleAdapterGenerationTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/codegen/dagger1/ModuleAdapterGenerationTest.java
@@ -70,7 +70,7 @@
         "  private static final Class<?>[] STATIC_INJECTIONS = {};",
         "  private static final Class<?>[] INCLUDES = {};",
         "  public Field$AModule$$ModuleAdapter() {",
-        "    super(Field.AModule.class, INJECTS, STATIC_INJECTIONS, false, INCLUDES, true, false);",
+        "    super(Field.AModule.class, INJECTS, STATIC_INJECTIONS, false, INCLUDES, true, true);",
         "  }",
         "  @Override public Field.AModule newModule() {",
         "    return new Field.AModule();",
@@ -85,7 +85,7 @@
         "    public NameProvidesAdapter(Field.AModule module) {",
         "      super(\"java.lang.String\", NOT_SINGLETON, \"Field.AModule\", \"name\");",
         "      this.module = module;",
-        "      setLibrary(false);",
+        "      setLibrary(true);",
         "    }",
         "    @Override public String get() {",
         "      return module.name();", // corresponds to @Provides method
@@ -151,7 +151,7 @@
         "  private static final Class<?>[] STATIC_INJECTIONS = {};",
         "  private static final Class<?>[] INCLUDES = {};",
         "  public Field$AModule$$ModuleAdapter() {",
-        "    super(Field.AModule.class, INJECTS, STATIC_INJECTIONS, false, INCLUDES, true, false);",
+        "    super(Field.AModule.class, INJECTS, STATIC_INJECTIONS, false, INCLUDES, true, true);",
         "  }",
         "  @Override public Field.AModule newModule() {",
         "    return new Field.AModule();",
@@ -166,7 +166,7 @@
         "    public NameProvidesAdapter(Field.AModule module) {",
         "      super(\"java.lang.String\", NOT_SINGLETON, \"Field.AModule\", \"name\");",
         "      this.module = module;",
-        "      setLibrary(false);",
+        "      setLibrary(true);",
         "    }",
         "    @Override public String get() {",
         "      return module.name();", // corresponds to @Provides method
diff --git a/core/src/main/java/dagger/Module.java b/core/src/main/java/dagger/Module.java
index 1e28f4fd6..33c10857b 100644
--- a/core/src/main/java/dagger/Module.java
+++ b/core/src/main/java/dagger/Module.java
@@ -89,7 +89,10 @@
    * included bindings are not necessary. If you provide bindings that are not
    * used by this module's graph, then you must declare {@code library = true}.
    *
-   * <p>This is intended to help you detect dead code.
+   * <p>This is intended to help you detect dead code.  As of 2.0 Dagger ignores
+   * this property and it is present for compatibility with Dagger 1.x during
+   * migrations.
    */
-  boolean library() default false;
+  // TODO(user): Deprecate this property.
+  boolean library() default true;
 }
diff --git a/core/src/test/java/dagger/SetBindingTest.java b/core/src/test/java/dagger/SetBindingTest.java
index 4474d217a..268c1162b 100644
--- a/core/src/test/java/dagger/SetBindingTest.java
+++ b/core/src/test/java/dagger/SetBindingTest.java
@@ -286,7 +286,7 @@ public String provideString() {
       }
     }
 
-    @Module
+    @Module(library = false)
     class SetModule2 {
       @Provides(type = SET)
       public String provideString() {
@@ -301,7 +301,7 @@ public String provideString() {
         new TestModule(), new SetModule1(), new SetModule2());
     try {
       graph.validate();
-      fail();
+      fail("Should have failed validation.");
     } catch (IllegalStateException expected) {}
   }
 
diff --git a/core/src/test/java/dagger/UnusedProviderTest.java b/core/src/test/java/dagger/UnusedProviderTest.java
index c6af6a3aa..377eec46b 100644
--- a/core/src/test/java/dagger/UnusedProviderTest.java
+++ b/core/src/test/java/dagger/UnusedProviderTest.java
@@ -47,7 +47,7 @@
     class BagOfMoney {
     }
 
-    @Module(injects = EntryPoint.class) class TestModule {
+    @Module(injects = EntryPoint.class, library = false) class TestModule {
       @Provides BagOfMoney providesMoney() {
         return new BagOfMoney();
       }
@@ -83,7 +83,7 @@
   }
 
   @Test public void unusedSetBinding() throws Exception {
-    @Module
+    @Module(library = false)
     class TestModule {
       @Provides(type = Provides.Type.SET) String provideA() {
         throw new AssertionError();
@@ -99,7 +99,7 @@
   }
 
   @Test public void unusedSetValuesBinding() throws Exception {
-    @Module
+    @Module(library = false)
     class TestModule {
       @Provides(type = Provides.Type.SET_VALUES) Set<String> provideA() {
         throw new AssertionError();
