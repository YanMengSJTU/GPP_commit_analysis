diff --git a/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java b/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
index 6f1766612..2519ba792 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/MultibindingModule.java
@@ -24,14 +24,12 @@
 import dagger.multibindings.IntoSet;
 import dagger.multibindings.LongKey;
 import dagger.multibindings.StringKey;
-
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
-
 import javax.inject.Named;
 import javax.inject.Provider;
 
@@ -44,13 +42,13 @@
   @Provides
   @IntoMap
   @StringKey("foo")
-  static String provideFooKey(double doubleDependency) {
+  static String provideFooKey(@SuppressWarnings("unused") double doubleDependency) {
     return "foo value";
   }
 
   @Provides(type = MAP)
   @StringKey("foo @Provides(type)")
-  static String provideFooProvidesTypeKey(double doubleDependency) {
+  static String provideFooProvidesTypeKey(@SuppressWarnings("unused") double doubleDependency) {
     return "foo @Provides(type) value";
   }
 
@@ -64,7 +62,7 @@ static String provideBarKey() {
   @Provides
   @IntoMap
   @StringKey("foo")
-  static String[] provideFooArrayValue(double doubleDependency) {
+  static String[] provideFooArrayValue(@SuppressWarnings("unused") double doubleDependency) {
     return new String[] {"foo1", "foo2"};
   }
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/NeedsFactory.java b/compiler/src/it/functional-tests/src/main/java/test/NeedsFactory.java
index b78907382..cfe7cec03 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/NeedsFactory.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/NeedsFactory.java
@@ -19,7 +19,8 @@
 import javax.inject.Inject;
 
 class NeedsFactory {
-  @Inject NeedsFactory(NeedsFactory_SomethingFactory somethingFactory) {}
+  @Inject
+  NeedsFactory(@SuppressWarnings("unused") NeedsFactory_SomethingFactory somethingFactory) {}
 
   @AutoFactory
   static class Something {}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/cycle/LongCycle.java b/compiler/src/it/functional-tests/src/main/java/test/cycle/LongCycle.java
index b4f61e096..0562ad610 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/cycle/LongCycle.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/cycle/LongCycle.java
@@ -19,6 +19,8 @@
 import javax.inject.Inject;
 import javax.inject.Provider;
 
+// Each nested class's constructor has an intentionally unused parameter.
+@SuppressWarnings("unused")
 final class LongCycle {
   static class Class1 { @Inject Class1(Class2 class2) {} }
   static class Class2 { @Inject Class2(Class3 class3) {} }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/sub/ContributionsModule.java b/compiler/src/it/functional-tests/src/main/java/test/sub/ContributionsModule.java
index 953012ca6..d0b7b64c0 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/sub/ContributionsModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/sub/ContributionsModule.java
@@ -28,7 +28,7 @@
 public final class ContributionsModule {
   @Provides
   @IntoSet
-  static int contributeAnInt(double doubleDependency) {
+  static int contributeAnInt(@SuppressWarnings("unused") double doubleDependency) {
     return 1742;
   }
 
diff --git a/compiler/src/it/functional-tests/src/main/java/test/sub/OtherThing.java b/compiler/src/it/functional-tests/src/main/java/test/sub/OtherThing.java
index 94935171f..1abea0f11 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/sub/OtherThing.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/sub/OtherThing.java
@@ -18,5 +18,6 @@
 import javax.inject.Inject;
 
 public final class OtherThing {
-  @Inject public OtherThing(int i) {}
+  @Inject
+  public OtherThing(@SuppressWarnings("unused") int i) {}
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/NeedsAnInterface.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/NeedsAnInterface.java
index bccde8589..7a5acb048 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/NeedsAnInterface.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/NeedsAnInterface.java
@@ -16,5 +16,5 @@
 package test.subcomponent;
 
 class NeedsAnInterface {
-  NeedsAnInterface(AnInterface anInterface) {}
+  NeedsAnInterface(@SuppressWarnings("unused") AnInterface anInterface) {}
 }
diff --git a/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java b/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
index cc3c52584..ba2f38391 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/BasicTest.java
@@ -55,8 +55,8 @@
     assertThat(basicComponent.getInt()).isEqualTo(BOUND_INT);
     assertThat(basicComponent.getLong()).isEqualTo(BOUND_LONG);
     assertThat(basicComponent.getBoolean()).isEqualTo(BOUND_BOOLEAN);
-    assertThat(basicComponent.getFloat()).isEqualTo(BOUND_FLOAT);
-    assertThat(basicComponent.getDouble()).isEqualTo(BOUND_DOUBLE);
+    assertThat(basicComponent.getFloat()).isWithin(0).of(BOUND_FLOAT);
+    assertThat(basicComponent.getDouble()).isWithin(0).of(BOUND_DOUBLE);
   }
 
   @Theory public void boxedPrimitives(BasicComponent basicComponent) {
@@ -66,8 +66,8 @@
     assertThat(basicComponent.getBoxedInt()).isEqualTo(new Integer(BOUND_INT));
     assertThat(basicComponent.getBoxedLong()).isEqualTo(new Long(BOUND_LONG));
     assertThat(basicComponent.getBoxedBoolean()).isEqualTo(new Boolean(BOUND_BOOLEAN));
-    assertThat(basicComponent.getBoxedFloat()).isEqualTo(new Float(BOUND_FLOAT));
-    assertThat(basicComponent.getBoxedDouble()).isEqualTo(new Double(BOUND_DOUBLE));
+    assertThat(basicComponent.getBoxedFloat()).isWithin(0).of(BOUND_FLOAT);
+    assertThat(basicComponent.getBoxedDouble()).isWithin(0).of(BOUND_DOUBLE);
   }
 
   @Theory public void boxedPrimitiveProviders(BasicComponent basicComponent) {
@@ -77,8 +77,8 @@
     assertThat(basicComponent.getIntProvider().get()).isEqualTo(new Integer(BOUND_INT));
     assertThat(basicComponent.getLongProvider().get()).isEqualTo(new Long(BOUND_LONG));
     assertThat(basicComponent.getBooleanProvider().get()).isEqualTo(new Boolean(BOUND_BOOLEAN));
-    assertThat(basicComponent.getFloatProvider().get()).isEqualTo(new Float(BOUND_FLOAT));
-    assertThat(basicComponent.getDoubleProvider().get()).isEqualTo(new Double(BOUND_DOUBLE));
+    assertThat(basicComponent.getFloatProvider().get()).isWithin(0).of(BOUND_FLOAT);
+    assertThat(basicComponent.getDoubleProvider().get()).isWithin(0).of(BOUND_DOUBLE);
   }
 
   @Theory public void primitiveArrays(BasicComponent basicComponent) {
diff --git a/compiler/src/it/functional-tests/src/test/java/test/builder/BuilderTest.java b/compiler/src/it/functional-tests/src/test/java/test/builder/BuilderTest.java
index 46f5388ec..af7233a0e 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/builder/BuilderTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/builder/BuilderTest.java
@@ -45,7 +45,7 @@
     assertThat(component.s()).isEqualTo("sam");
     assertThat(component.i()).isEqualTo(1);
     assertThat(component.d()).isWithin(0).of(4.2d);
-    assertThat(component.f()).isEqualTo(5.5f);
+    assertThat(component.f()).isWithin(0).of(5.5f);
     assertThat(component.l()).isEqualTo(6L);
   }
 
@@ -69,7 +69,7 @@
     assertThat(component.s()).isEqualTo("sam");
     assertThat(component.i()).isEqualTo(1);
     assertThat(component.d()).isWithin(0).of(4.2d);
-    assertThat(component.f()).isEqualTo(5.5f);
+    assertThat(component.f()).isWithin(0).of(5.5f);
     assertThat(component.l()).isEqualTo(6L);
   }
 
@@ -93,7 +93,7 @@
     assertThat(component.s()).isEqualTo("sam");
     assertThat(component.i()).isEqualTo(1);
     assertThat(component.d()).isWithin(0).of(4.2d);
-    assertThat(component.f()).isEqualTo(5.5f);
+    assertThat(component.f()).isWithin(0).of(5.5f);
     assertThat(component.l()).isEqualTo(6L);
   }
 
@@ -117,7 +117,7 @@
     assertThat(component.s()).isEqualTo("sam");
     assertThat(component.i()).isEqualTo(1);
     assertThat(component.d()).isWithin(0).of(4.2d);
-    assertThat(component.f()).isEqualTo(5.5f);
+    assertThat(component.f()).isWithin(0).of(5.5f);
     assertThat(component.l()).isEqualTo(6L);
   }
   
@@ -137,7 +137,7 @@
     assertThat(child1.s()).isEqualTo("sam");
     assertThat(child1.i()).isEqualTo(1);
     assertThat(child1.d()).isWithin(0).of(4.2d);
-    assertThat(child1.f()).isEqualTo(5.5f);
+    assertThat(child1.f()).isWithin(0).of(5.5f);
     assertThat(child1.l()).isEqualTo(6L);
     assertThat(child1.b()).isEqualTo((byte)7);
   }
@@ -159,7 +159,7 @@
     assertThat(child2.s()).isEqualTo("tara");
     assertThat(child2.i()).isEqualTo(10);
     assertThat(child2.d()).isWithin(0).of(4.2d);
-    assertThat(child2.f()).isEqualTo(5.5f);
+    assertThat(child2.f()).isWithin(0).of(5.5f);
     assertThat(child2.l()).isEqualTo(6L);
     assertThat(child2.b()).isEqualTo((byte)70);
   }
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedComponent.java b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedComponent.java
index a80ea4968..0d4dc13fd 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedComponent.java
+++ b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedComponent.java
@@ -15,7 +15,6 @@
  */
 package producerstest;
 
-import com.google.common.util.concurrent.ListenableFuture;
 import dagger.Component;
 
 @Component(modules = DependedModule.class)
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedProducerModule.java b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedProducerModule.java
index fe47c9973..bd1bc7a6b 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedProducerModule.java
+++ b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/DependedProducerModule.java
@@ -15,15 +15,9 @@
  */
 package producerstest;
 
-import com.google.common.base.Ascii;
-import com.google.common.collect.ImmutableList;
-import com.google.common.util.concurrent.Futures;
-import com.google.common.util.concurrent.ListenableFuture;
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
 
-import java.util.List;
-
 @ProducerModule
 final class DependedProducerModule {
 
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/ResponseProducerModule.java b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/ResponseProducerModule.java
index 02fa7e91f..b250a53ba 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/ResponseProducerModule.java
+++ b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/ResponseProducerModule.java
@@ -40,11 +40,11 @@
   static ListenableFuture<String> intermediateGreeting(
       // TODO(beder): Allow Producer and Provider of the same type (which would force the binding
       // to be a provision binding), and add validation for that.
-      String greeting,
+      @SuppressWarnings("unused") String greeting,
       Producer<String> greetingProducer,
-      Produced<String> greetingProduced,
-      Provider<Integer> requestNumberProvider,
-      Lazy<Integer> requestNumberLazy) {
+      @SuppressWarnings("unused") Produced<String> greetingProduced,
+      @SuppressWarnings("unused") Provider<Integer> requestNumberProvider,
+      @SuppressWarnings("unused") Lazy<Integer> requestNumberLazy) {
     return greetingProducer.get();
   }
 
diff --git a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/SimpleProducerModule.java b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/SimpleProducerModule.java
index 7e335cc3b..da58db06c 100644
--- a/compiler/src/it/producers-functional-tests/src/main/java/producerstest/SimpleProducerModule.java
+++ b/compiler/src/it/producers-functional-tests/src/main/java/producerstest/SimpleProducerModule.java
@@ -69,48 +69,57 @@ static String str() {
 
   @Produces
   @Qual(2)
-  static String strWithArg(int i) {
+  static String strWithArg(@SuppressWarnings("unused") int i) {
     return "str with arg";
   }
 
   @Produces
   @Qual(3)
-  static ListenableFuture<String> futureStrWithArg(int i) {
+  static ListenableFuture<String> futureStrWithArg(@SuppressWarnings("unused") int i) {
     return Futures.immediateFuture("future str with arg");
   }
 
   @Produces
   @Qual(4)
+  @SuppressWarnings("unused") // unthrown exception for test
   static String strThrowingException() throws IOException {
     return "str throwing exception";
   }
 
   @Produces
   @Qual(5)
+  @SuppressWarnings("unused") // unthrown exception for test
   static ListenableFuture<String> futureStrThrowingException() throws IOException {
     return Futures.immediateFuture("future str throwing exception");
   }
 
   @Produces
   @Qual(6)
+  @SuppressWarnings("unused") // unthrown exception for test, unused parameter for test
   static String strWithArgThrowingException(int i) throws IOException {
     return "str with arg throwing exception";
   }
 
   @Produces
   @Qual(7)
+  @SuppressWarnings("unused") // unthrown exception for test, unused parameter for test
   static ListenableFuture<String> futureStrWithArgThrowingException(int i) throws IOException {
     return Futures.immediateFuture("future str with arg throwing exception");
   }
 
   @Produces
   @Qual(8)
-  static String strWithArgs(int i, Produced<Double> b, Producer<Object> c, Provider<Boolean> d) {
+  static String strWithArgs(
+      @SuppressWarnings("unused") int i,
+      @SuppressWarnings("unused") Produced<Double> b,
+      @SuppressWarnings("unused") Producer<Object> c,
+      @SuppressWarnings("unused") Provider<Boolean> d) {
     return "str with args";
   }
 
   @Produces
   @Qual(9)
+  @SuppressWarnings("unused") // unthrown exception for test, unused parameters for test
   static String strWithArgsThrowingException(
       int i, Produced<Double> b, Producer<Object> c, Provider<Boolean> d) throws IOException {
     return "str with args throwing exception";
@@ -119,12 +128,16 @@ static String strWithArgsThrowingException(
   @Produces
   @Qual(10)
   static ListenableFuture<String> futureStrWithArgs(
-      int i, Produced<Double> b, Producer<Object> c, Provider<Boolean> d) {
+      @SuppressWarnings("unused") int i,
+      @SuppressWarnings("unused") Produced<Double> b,
+      @SuppressWarnings("unused") Producer<Object> c,
+      @SuppressWarnings("unused") Provider<Boolean> d) {
     return Futures.immediateFuture("future str with args");
   }
 
   @Produces
   @Qual(11)
+  @SuppressWarnings("unused") // unthrown exception for test, unused parameter for test
   static ListenableFuture<String> futureStrWithArgsThrowingException(
       int i, Produced<Double> b, Producer<Object> c, Provider<Boolean> d) throws IOException {
     return Futures.immediateFuture("str with args throwing exception");
@@ -133,9 +146,14 @@ static String strWithArgsThrowingException(
   @Produces
   @Qual(12)
   static String strWithFrameworkTypeArgs(
-      @Qual(1) int i, @Qual(1) Provider<Integer> iProvider, @Qual(1) Lazy<Integer> iLazy,
-      @Qual(2) int j, @Qual(2) Produced<Integer> jProduced, @Qual(2) Producer<Integer> jProducer,
-      @Qual(3) Produced<Integer> kProduced, @Qual(3) Producer<Integer> kProducer) {
+      @SuppressWarnings("unused") @Qual(1) int i,
+      @SuppressWarnings("unused") @Qual(1) Provider<Integer> iProvider,
+      @SuppressWarnings("unused") @Qual(1) Lazy<Integer> iLazy,
+      @SuppressWarnings("unused") @Qual(2) int j,
+      @SuppressWarnings("unused") @Qual(2) Produced<Integer> jProduced,
+      @SuppressWarnings("unused") @Qual(2) Producer<Integer> jProducer,
+      @SuppressWarnings("unused") @Qual(3) Produced<Integer> kProduced,
+      @SuppressWarnings("unused") @Qual(3) Producer<Integer> kProducer) {
     return "str with framework type args";
   }
 
@@ -149,6 +167,7 @@ static String setOfStrElement() {
 
   @Produces
   @IntoSet
+  @SuppressWarnings("unused") // unthrown exception for test
   static String setOfStrElementThrowingException() throws IOException {
     return "set of str element throwing exception";
   }
@@ -161,30 +180,33 @@ static String setOfStrElementThrowingException() throws IOException {
 
   @Produces
   @IntoSet
+  @SuppressWarnings("unused") // unthrown exception for test
   static ListenableFuture<String> setOfStrFutureElementThrowingException() throws IOException {
     return Futures.immediateFuture("set of str element throwing exception");
   }
 
   @Produces
   @IntoSet
-  static String setOfStrElementWithArg(int i) {
+  static String setOfStrElementWithArg(@SuppressWarnings("unused") int i) {
     return "set of str element with arg";
   }
 
   @Produces
   @IntoSet
+  @SuppressWarnings("unused") // unthrown exception for test, unused parameter for test
   static String setOfStrElementWithArgThrowingException(int i) throws IOException {
     return "set of str element with arg throwing exception";
   }
 
   @Produces
   @IntoSet
-  static ListenableFuture<String> setOfStrFutureElementWithArg(int i) {
+  static ListenableFuture<String> setOfStrFutureElementWithArg(@SuppressWarnings("unused") int i) {
     return Futures.immediateFuture("set of str element with arg");
   }
 
   @Produces
   @IntoSet
+  @SuppressWarnings("unused") // unthrown exception for test, unused parameter for test
   static ListenableFuture<String> setOfStrFutureElementWithArgThrowingException(int i)
       throws IOException {
     return Futures.immediateFuture("set of str element with arg throwing exception");
@@ -198,6 +220,7 @@ static String setOfStrElementWithArgThrowingException(int i) throws IOException
 
   @Produces
   @ElementsIntoSet
+  @SuppressWarnings("unused") // unthrown exception for test
   static Set<String> setOfStrValuesThrowingException() throws IOException {
     return ImmutableSet.of("set of str 1", "set of str 2 throwing exception");
   }
@@ -210,6 +233,7 @@ static String setOfStrElementWithArgThrowingException(int i) throws IOException
 
   @Produces
   @ElementsIntoSet
+  @SuppressWarnings("unused") // unthrown exception for test
   static ListenableFuture<Set<String>> setOfStrFutureValuesThrowingException() throws IOException {
     return Futures.<Set<String>>immediateFuture(
         ImmutableSet.of("set of str 1", "set of str 2 throwing exception"));
@@ -217,25 +241,28 @@ static String setOfStrElementWithArgThrowingException(int i) throws IOException
 
   @Produces
   @ElementsIntoSet
-  static Set<String> setOfStrValuesWithArg(int i) {
+  static Set<String> setOfStrValuesWithArg(@SuppressWarnings("unused") int i) {
     return ImmutableSet.of("set of str with arg 1", "set of str with arg 2");
   }
 
   @Produces
   @ElementsIntoSet
+  @SuppressWarnings("unused") // unthrown exception for test, unused parameter for test
   static Set<String> setOfStrValuesWithArgThrowingException(int i) throws IOException {
     return ImmutableSet.of("set of str with arg 1", "set of str with arg 2 throwing exception");
   }
 
   @Produces
   @ElementsIntoSet
-  static ListenableFuture<Set<String>> setOfStrFutureValuesWithArg(int i) {
+  static ListenableFuture<Set<String>> setOfStrFutureValuesWithArg(
+      @SuppressWarnings("unused") int i) {
     return Futures.<Set<String>>immediateFuture(
         ImmutableSet.of("set of str with arg 1", "set of str with arg 2"));
   }
 
   @Produces
   @ElementsIntoSet
+  @SuppressWarnings("unused") // unthrown exception for test, unused parameter for test
   static ListenableFuture<Set<String>> setOfStrFutureValuesWithArgThrowingException(int i)
       throws IOException {
     return Futures.<Set<String>>immediateFuture(
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/badexecutor/BadExecutorTest.java b/compiler/src/it/producers-functional-tests/src/test/java/producerstest/badexecutor/BadExecutorTest.java
index 0e4d44d39..1f0db70b2 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/badexecutor/BadExecutorTest.java
+++ b/compiler/src/it/producers-functional-tests/src/test/java/producerstest/badexecutor/BadExecutorTest.java
@@ -70,6 +70,6 @@ public void rejectSingleArgFromComponentDepMethod() throws Exception {
 
   @Test
   public void doNotRejectComponentDepMethod() throws Exception {
-    assertThat(component.doubleDep().get()).isEqualTo(42.0);
+    assertThat(component.doubleDep().get()).isWithin(0).of(42.0);
   }
 }
diff --git a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/builder/ProductionComponentBuilderTest.java b/compiler/src/it/producers-functional-tests/src/test/java/producerstest/builder/ProductionComponentBuilderTest.java
index 10e5f4fac..396bef65f 100644
--- a/compiler/src/it/producers-functional-tests/src/test/java/producerstest/builder/ProductionComponentBuilderTest.java
+++ b/compiler/src/it/producers-functional-tests/src/test/java/producerstest/builder/ProductionComponentBuilderTest.java
@@ -35,7 +35,7 @@ public void successfulBuild() throws Exception {
             .strModule(new StringModule())
             .build();
     assertThat(component.s().get()).isEqualTo("arg: 42");
-    assertThat(component.d().get()).isEqualTo(15.3);
+    assertThat(component.d().get()).isWithin(0).of(15.3);
   }
 
   @Test
@@ -45,7 +45,7 @@ public void successfulBuild_withMissingZeroArgModule() throws Exception {
             .depComponent(depComponent(15.3))
             .build();
     assertThat(component.s().get()).isEqualTo("arg: 42");
-    assertThat(component.d().get()).isEqualTo(15.3);
+    assertThat(component.d().get()).isWithin(0).of(15.3);
   }
 
   @Test(expected = IllegalStateException.class)
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentValidator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentValidator.java
index 4fd5f414b..f20bc8db6 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentValidator.java
@@ -240,7 +240,7 @@ public ComponentValidationReport validate(final TypeElement subject,
         getAnnotationMirror(subject, componentKind.annotationType()).get();
     ImmutableList<TypeMirror> moduleTypes = getComponentModules(componentMirror);
     moduleValidator.validateReferencedModules(
-        subject, componentMirror, builder, moduleTypes, componentKind.moduleKinds());
+        subject, builder, moduleTypes, componentKind.moduleKinds());
 
     // Make sure we validate any subcomponents we're referencing, unless we know we validated
     // them already in this pass.
diff --git a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
index a9350edfe..5396285b9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
@@ -29,7 +29,6 @@
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
 import com.squareup.javapoet.TypeVariableName;
-import dagger.Provides;
 import dagger.internal.Factory;
 import dagger.internal.MembersInjectors;
 import dagger.internal.Preconditions;
diff --git a/compiler/src/main/java/dagger/internal/codegen/ModuleValidator.java b/compiler/src/main/java/dagger/internal/codegen/ModuleValidator.java
index 5057dba7e..4d56bbe7d 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ModuleValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ModuleValidator.java
@@ -165,7 +165,7 @@ private void validateReferencedModules(
     // Validate that all the modules we include are valid for inclusion.
     AnnotationMirror mirror = getAnnotationMirror(subject, moduleKind.moduleAnnotation()).get();
     ImmutableList<TypeMirror> includes = getModuleIncludes(mirror);
-    validateReferencedModules(subject, mirror, builder, includes, ImmutableSet.of(moduleKind));
+    validateReferencedModules(subject, builder, includes, ImmutableSet.of(moduleKind));
   }
 
   private static ImmutableSet<? extends Class<? extends Annotation>> includedModuleClasses(
@@ -187,7 +187,6 @@ private void validateReferencedModules(
    */
   void validateReferencedModules(
       final TypeElement subject,
-      final AnnotationMirror moduleAnnotation,
       final ValidationReport.Builder<TypeElement> builder,
       ImmutableList<TypeMirror> includes,
       ImmutableSet<ModuleDescriptor.Kind> validModuleKinds) {
diff --git a/compiler/src/test/java/dagger/internal/codegen/DependencyRequestMapperTest.java b/compiler/src/test/java/dagger/internal/codegen/DependencyRequestMapperTest.java
index 856bc0f2a..2bc5fc017 100644
--- a/compiler/src/test/java/dagger/internal/codegen/DependencyRequestMapperTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/DependencyRequestMapperTest.java
@@ -130,15 +130,22 @@ private DependencyRequest dependencyRequestForProduced() {
 
   @Module
   static final class ProvidesMethodModule {
-    @Provides String provideString(
-        Integer a, Lazy<Integer> b, Provider<Integer> c, MembersInjector<Y> d) {
+    @Provides
+    static String provideString(
+        @SuppressWarnings("unused") Integer a,
+        @SuppressWarnings("unused") Lazy<Integer> b,
+        @SuppressWarnings("unused") Provider<Integer> c,
+        @SuppressWarnings("unused") MembersInjector<Y> d) {
       throw new UnsupportedOperationException();
     }
   }
 
   @ProducerModule
   static final class ProducesMethodModule {
-    @Produces String produceString(Producer<Integer> a, Produced<Integer> b) {
+    @Produces
+    static String produceString(
+        @SuppressWarnings("unused") Producer<Integer> a,
+        @SuppressWarnings("unused") Produced<Integer> b) {
       return null;
     }
   }
diff --git a/compiler/src/test/java/dagger/internal/codegen/MethodSignatureFormatterTest.java b/compiler/src/test/java/dagger/internal/codegen/MethodSignatureFormatterTest.java
index 45791c75c..62d688561 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MethodSignatureFormatterTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MethodSignatureFormatterTest.java
@@ -43,7 +43,11 @@
     static class InnerClass {
       @Foo(bar = String.class)
       @Singleton
-      String foo(@SuppressWarnings("unused") int a, ImmutableList<Boolean> blah) { return "foo"; }
+      String foo(
+          @SuppressWarnings("unused") int a,
+          @SuppressWarnings("unused") ImmutableList<Boolean> blah) {
+        return "foo";
+      }
     }
   }
 
diff --git a/core/src/main/java/dagger/internal/SetFactory.java b/core/src/main/java/dagger/internal/SetFactory.java
index 90dbb23eb..b17156cfe 100644
--- a/core/src/main/java/dagger/internal/SetFactory.java
+++ b/core/src/main/java/dagger/internal/SetFactory.java
@@ -51,7 +51,7 @@
 
   @SuppressWarnings({"unchecked", "rawtypes"}) // safe covariant cast
   public static <T> Factory<Set<T>> create() {
-    return (Factory<Set<T>>) (Factory) EMPTY_FACTORY;
+    return (Factory) EMPTY_FACTORY;
   }
 
   /**
diff --git a/producers/src/main/java/dagger/producers/internal/MapOfProducedProducer.java b/producers/src/main/java/dagger/producers/internal/MapOfProducedProducer.java
index 7217e8c11..a0ba0c51a 100644
--- a/producers/src/main/java/dagger/producers/internal/MapOfProducedProducer.java
+++ b/producers/src/main/java/dagger/producers/internal/MapOfProducedProducer.java
@@ -108,7 +108,6 @@ private MapOfProducedProducer(Producer<Map<K, Producer<V>>> mapProducerProducer)
   private static <K, V>
       Function<Map.Entry<K, Producer<V>>, ListenableFuture<Map.Entry<K, Produced<V>>>>
           entryUnwrapper() {
-    return (Function<Map.Entry<K, Producer<V>>, ListenableFuture<Map.Entry<K, Produced<V>>>>)
-        (Function) ENTRY_UNWRAPPER;
+    return (Function) ENTRY_UNWRAPPER;
   }
 }
diff --git a/producers/src/main/java/dagger/producers/internal/MapOfProducerProducer.java b/producers/src/main/java/dagger/producers/internal/MapOfProducerProducer.java
index 18338d055..013266f2d 100644
--- a/producers/src/main/java/dagger/producers/internal/MapOfProducerProducer.java
+++ b/producers/src/main/java/dagger/producers/internal/MapOfProducerProducer.java
@@ -24,6 +24,7 @@
 import java.util.Map;
 
 import static com.google.common.base.Preconditions.checkNotNull;
+import static com.google.common.collect.Maps.newLinkedHashMapWithExpectedSize;
 
 /**
  * A {@link Producer} implementation used to implement {@link Map} bindings. This factory returns an
@@ -62,17 +63,15 @@ private MapOfProducerProducer(ImmutableMap<K, Producer<V>> contributingMap) {
    * A builder to help build the {@link MapOfProducerProducer}
    */
   public static final class Builder<K, V> {
-    private final ImmutableMap.Builder<K, Producer<V>> mapBuilder;
+    private final Map<K, Producer<V>> mapBuilder;
 
     private Builder(int size) {
-      // TODO(beder): It would be nice to use the size, but ImmutableMap doesn't allow a pre-sized
-      // map, and Dagger's internal Collections implementation is package-private.
-      this.mapBuilder = ImmutableMap.builder();
+      this.mapBuilder = newLinkedHashMapWithExpectedSize(size);
     }
 
     /** Returns a new {@link MapOfProducerProducer}. */
     public MapOfProducerProducer<K, V> build() {
-      return new MapOfProducerProducer<K, V>(mapBuilder.build());
+      return new MapOfProducerProducer<K, V>(ImmutableMap.copyOf(mapBuilder));
     }
 
     /** Associates k with producerOfValue in {@code Builder}. */
diff --git a/producers/src/main/java/dagger/producers/internal/MapProducer.java b/producers/src/main/java/dagger/producers/internal/MapProducer.java
index 61d6a28ac..61b7cfdbd 100644
--- a/producers/src/main/java/dagger/producers/internal/MapProducer.java
+++ b/producers/src/main/java/dagger/producers/internal/MapProducer.java
@@ -100,7 +100,6 @@ private MapProducer(Producer<Map<K, Producer<V>>> mapProducerProducer) {
   @SuppressWarnings({"unchecked", "rawtypes"}) // bivariate implementation
   private static <K, V>
       Function<Map.Entry<K, Producer<V>>, ListenableFuture<Map.Entry<K, V>>> entryUnwrapper() {
-    return (Function<Map.Entry<K, Producer<V>>, ListenableFuture<Map.Entry<K, V>>>)
-        (Function) ENTRY_UNWRAPPER;
+    return (Function) ENTRY_UNWRAPPER;
   }
 }
diff --git a/producers/src/main/java/dagger/producers/internal/SetProducer.java b/producers/src/main/java/dagger/producers/internal/SetProducer.java
index 271d31b4d..090010d65 100644
--- a/producers/src/main/java/dagger/producers/internal/SetProducer.java
+++ b/producers/src/main/java/dagger/producers/internal/SetProducer.java
@@ -44,7 +44,7 @@
 
   @SuppressWarnings({"unchecked", "rawtypes"}) // safe covariant cast
   public static <T> Producer<Set<T>> create() {
-    return (Producer<Set<T>>) (Producer) EMPTY_PRODUCER;
+    return (Producer) EMPTY_PRODUCER;
   }
 
   /**
diff --git a/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java b/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java
index 402b566e9..2d2bc8734 100644
--- a/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java
+++ b/producers/src/main/java/dagger/producers/monitoring/ProducerMonitor.java
@@ -81,6 +81,8 @@
    *
    * <p>When multiple monitors are installed, the order that each monitor will call this method is
    * unspecified, but will remain consistent throughout the course of the execution of a component.
+   *
+   * <p>This implementation is a no-op.
    */
   public void requested() {}
 
@@ -89,6 +91,8 @@ public void requested() {}
    *
    * <p>When multiple monitors are installed, calls to this method will be in the reverse order from
    * calls to {@link #requested()}.
+   *
+   * <p>This implementation is a no-op.
    */
   public void methodStarting() {}
 
@@ -98,6 +102,8 @@ public void methodStarting() {}
    *
    * <p>When multiple monitors are installed, calls to this method will be in the reverse order from
    * calls to {@link #requested()}.
+   *
+   * <p>This implementation is a no-op.
    */
   public void methodFinished() {}
 
@@ -106,16 +112,20 @@ public void methodFinished() {}
    *
    * <p>When multiple monitors are installed, calls to this method will be in the reverse order from
    * calls to {@link #requested()}.
+   *
+   * <p>This implementation is a no-op.
    */
-  public void succeeded(Object o) {}
+  public void succeeded(@SuppressWarnings("unused") Object value) {}
 
   /**
    * Called when the producer's future has failed with an exception.
    *
    * <p>When multiple monitors are installed, calls to this method will be in the reverse order from
    * calls to {@link #requested()}.
+   *
+   * <p>This implementation is a no-op.
    */
-  public void failed(Throwable t) {}
+  public void failed(@SuppressWarnings("unused") Throwable t) {}
 
   /**
    * Adds this monitor's completion methods as a callback to the future. This is only intended to be
diff --git a/producers/src/main/java/dagger/producers/monitoring/ProductionComponentMonitor.java b/producers/src/main/java/dagger/producers/monitoring/ProductionComponentMonitor.java
index af3164bac..8adebdc1d 100644
--- a/producers/src/main/java/dagger/producers/monitoring/ProductionComponentMonitor.java
+++ b/producers/src/main/java/dagger/producers/monitoring/ProductionComponentMonitor.java
@@ -66,7 +66,7 @@ public static ProductionComponentMonitor noOp() {
     /** Creates a component-specific monitor when the component is created. */
     public abstract ProductionComponentMonitor create(Object component);
 
-    private static final Factory NO_OP =
+    private static final Factory NO_OP_FACTORY =
         new Factory() {
           @Override
           public ProductionComponentMonitor create(Object component) {
@@ -76,7 +76,7 @@ public ProductionComponentMonitor create(Object component) {
 
     /** Returns a factory that returns no-op monitors. */
     public static Factory noOp() {
-      return NO_OP;
+      return NO_OP_FACTORY;
     }
   }
 }
diff --git a/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java b/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java
index ce48907e8..b4e28b6af 100644
--- a/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java
+++ b/producers/src/main/java/dagger/producers/monitoring/internal/Monitors.java
@@ -314,7 +314,7 @@ public void failed(Throwable t) {
 
   private static final Provider<ProductionComponentMonitor>
       NO_OP_PRODUCTION_COMPONENT_MONITOR_PROVIDER =
-          new Provider() {
+          new Provider<ProductionComponentMonitor>() {
             @Override
             public ProductionComponentMonitor get() {
               return ProductionComponentMonitor.noOp();
diff --git a/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java b/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java
index 5eb1ea790..8bb8b7574 100644
--- a/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java
+++ b/producers/src/test/java/dagger/producers/internal/AbstractProducerTest.java
@@ -24,17 +24,17 @@
 import dagger.producers.monitoring.ProductionComponentMonitor;
 import java.util.concurrent.ExecutionException;
 import javax.inject.Provider;
-import org.mockito.Mock;
-import org.mockito.Mockito;
-import org.mockito.MockitoAnnotations;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
+import org.mockito.Mock;
+import org.mockito.Mockito;
+import org.mockito.MockitoAnnotations;
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
-import static org.mockito.Mockito.any;
+import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
@@ -96,7 +96,7 @@ public void monitor_success() throws Exception {
     ListenableFuture<Integer> future = producer.get();
     assertThat(future.isDone()).isFalse();
     verify(monitor).requested();
-    verify(monitor).addCallbackTo(any(ListenableFuture.class));
+    verify(monitor).addCallbackTo(anyListenableFuture());
     delegateFuture.set(-42);
     assertThat(future.get()).isEqualTo(-42);
     verify(monitor).succeeded(-42);
@@ -111,7 +111,7 @@ public void monitor_failure() throws Exception {
     ListenableFuture<Integer> future = producer.get();
     assertThat(future.isDone()).isFalse();
     verify(monitor).requested();
-    verify(monitor).addCallbackTo(any(ListenableFuture.class));
+    verify(monitor).addCallbackTo(anyListenableFuture());
     Throwable t = new RuntimeException("monkey");
     delegateFuture.setException(t);
     try {
@@ -124,6 +124,10 @@ public void monitor_failure() throws Exception {
     verifyNoMoreInteractions(monitor);
   }
 
+  private ListenableFuture<?> anyListenableFuture() {
+    return any(ListenableFuture.class);
+  }
+
   @Test(expected = NullPointerException.class)
   public void monitor_null() throws Exception {
     new DelegateProducer<>(null, Futures.immediateFuture(42));
diff --git a/producers/src/test/java/dagger/producers/internal/ProducersTest.java b/producers/src/test/java/dagger/producers/internal/ProducersTest.java
index c654b64c6..d0d4bf326 100644
--- a/producers/src/test/java/dagger/producers/internal/ProducersTest.java
+++ b/producers/src/test/java/dagger/producers/internal/ProducersTest.java
@@ -70,8 +70,8 @@
 
   private <T> ExecutionException getProducedException(Produced<T> produced) {
     try {
-      T unused = produced.get();
-      throw new IllegalArgumentException("produced did not throw");
+      T value = produced.get();
+      throw new IllegalArgumentException("produced did not throw, but returned " + value);
     } catch (ExecutionException e) {
       return e;
     }
