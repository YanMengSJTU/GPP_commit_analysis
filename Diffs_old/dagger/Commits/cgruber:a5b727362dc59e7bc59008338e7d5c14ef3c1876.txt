diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index bfadd30e7..dd86b9223 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -33,6 +33,7 @@
 import static dagger.model.BindingKind.DELEGATE;
 import static dagger.model.BindingKind.MULTIBOUND_MAP;
 import static dagger.model.BindingKind.MULTIBOUND_SET;
+import static javax.lang.model.element.Modifier.ABSTRACT;
 
 import com.google.auto.common.MoreTypes;
 import com.google.common.collect.ImmutableList;
@@ -71,7 +72,8 @@
   private final ModifiableBindingExpressions modifiableBindingExpressions;
   private final Map<BindingRequest, BindingExpression> expressions = new HashMap<>();
 
-  @Inject ComponentBindingExpressions(
+  @Inject
+  ComponentBindingExpressions(
       @ParentComponent Optional<ComponentBindingExpressions> parent,
       BindingGraph graph,
       ComponentImplementation componentImplementation,
@@ -174,8 +176,7 @@ Expression getDependencyArgumentExpression(
 
     TypeMirror dependencyType = dependencyRequest.key().type();
     BindingRequest bindingRequest = bindingRequest(dependencyRequest);
-    Expression dependencyExpression =
-        getDependencyExpression(bindingRequest, requestingClass);
+    Expression dependencyExpression = getDependencyExpression(bindingRequest, requestingClass);
 
     if (compilerOptions.aheadOfTimeSubcomponents()) {
       TypeMirror requestedType =
@@ -205,14 +206,25 @@ Expression getDependencyArgumentExpression(
   MethodSpec getComponentMethod(ComponentMethodDescriptor componentMethod) {
     checkArgument(componentMethod.dependencyRequest().isPresent());
     BindingRequest request = bindingRequest(componentMethod.dependencyRequest().get());
-    return MethodSpec.overriding(
+    MethodSpec.Builder method =
+        MethodSpec.overriding(
             componentMethod.methodElement(),
             MoreTypes.asDeclared(graph.componentTypeElement().asType()),
-            types)
-        .addCode(
-            getBindingExpression(request)
-                .getComponentMethodImplementation(componentMethod, componentImplementation))
-        .build();
+            types);
+    // Even though this is not used if the method is abstract, we need to invoke the binding
+    // expression in order for the side of effect of the method being added to the
+    // ComponentImplementation
+    CodeBlock methodBody =
+        getBindingExpression(request)
+            .getComponentMethodImplementation(componentMethod, componentImplementation);
+    if (!componentImplementation.superclassImplementation().isPresent()
+        && !modifiableBindingExpressions
+            .getModifiableBindingType(request)
+            .hasBaseClassImplementation()
+        && !componentImplementation.getModifiableBindingMethod(request).isPresent()) {
+      return method.addModifiers(ABSTRACT).build();
+    }
+    return method.addCode(methodBody).build();
   }
 
   /** Returns the {@link BindingExpression} for the given {@link BindingRequest}. */
