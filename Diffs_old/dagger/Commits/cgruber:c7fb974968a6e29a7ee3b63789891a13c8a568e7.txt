diff --git a/BUILD b/BUILD
index a204e6ad3..180cb6ac9 100644
--- a/BUILD
+++ b/BUILD
@@ -19,13 +19,7 @@ package_group(
     packages = ["//..."],
 )
 
-load("//tools:javadoc.bzl", "javadoc_library")
-
-py_test(
-    name = "maven_sha1_test",
-    srcs = ["maven_sha1_test.py"],
-    data = ["WORKSPACE"],
-)
+load("@google_bazel_common//tools/javadoc:javadoc.bzl", "javadoc_library")
 
 java_library(
     name = "dagger_with_compiler",
@@ -55,12 +49,13 @@ android_library(
     ],
 )
 
-load("//tools:jarjar.bzl", "jarjar_library")
+load("@google_bazel_common//tools/jarjar:jarjar.bzl", "jarjar_library")
+
+SHADE_RULES = ["rule com.google.auto.common.** dagger.shaded.auto.common.@1"]
 
 jarjar_library(
     name = "shaded_compiler",
-    rules_file = "shade_rules.txt",
-    deps = [
+    jars = [
         "//java/dagger/internal/codegen:base",
         "//java/dagger/internal/codegen:binding",
         "//java/dagger/internal/codegen:internal_validation",
@@ -71,12 +66,12 @@ jarjar_library(
         "//java/dagger/model:internal-proxies",
         "@com_google_auto_auto_common//jar",
     ],
+    rules = SHADE_RULES,
 )
 
 jarjar_library(
     name = "shaded_compiler_src",
-    rules_file = "merge_all_rules.txt",
-    deps = [
+    jars = [
         "//java/dagger/internal/codegen:libbase-src.jar",
         "//java/dagger/internal/codegen:libbinding-src.jar",
         "//java/dagger/internal/codegen:libinternal_validation-src.jar",
@@ -89,19 +84,18 @@ jarjar_library(
 
 jarjar_library(
     name = "shaded_spi",
-    rules_file = "shade_rules.txt",
-    deps = [
+    jars = [
         "//java/dagger/internal/codegen:shared-with-spi",
         "//java/dagger/model",
         "//java/dagger/spi",
         "@com_google_auto_auto_common//jar",
     ],
+    rules = SHADE_RULES,
 )
 
 jarjar_library(
     name = "shaded_spi_src",
-    rules_file = "merge_all_rules.txt",
-    deps = [
+    jars = [
         "//java/dagger/internal/codegen:libshared-with-spi-src.jar",
         "//java/dagger/model:libmodel-src.jar",
         "//java/dagger/spi:libspi-src.jar",
@@ -126,20 +120,20 @@ javadoc_library(
 
 jarjar_library(
     name = "shaded_android_processor",
-    rules_file = "shade_rules.txt",
-    deps = [
+    jars = [
         "//java/dagger/android/processor",
         "@com_google_auto_auto_common//jar",
     ],
+    rules = SHADE_RULES,
 )
 
 jarjar_library(
     name = "shaded_grpc_server_processor",
-    rules_file = "shade_rules.txt",
-    deps = [
+    jars = [
         "//java/dagger/grpc/server/processor",
         "@com_google_auto_auto_common//jar",
     ],
+    rules = SHADE_RULES,
 )
 
 # coalesced javadocs used for the gh-pages site
diff --git a/WORKSPACE b/WORKSPACE
index fc67247a9..f27e36f2f 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -12,205 +12,12 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-android_sdk_repository(
-    name = "androidsdk",
-    api_level = 26,
-    build_tools_version = "26.0.2",
-)
-
-bind(
-    name = "android_sdk_for_testing",
-    actual = "@androidsdk//:files",
-)
-
-maven_jar(
-    name = "javax_annotation_jsr250_api",
-    artifact = "javax.annotation:jsr250-api:1.0",
-    sha1 = "5025422767732a1ab45d93abfea846513d742dcf",
-)
-
-maven_jar(
-    name = "com_google_code_findbugs_jsr305",
-    artifact = "com.google.code.findbugs:jsr305:3.0.1",
-    sha1 = "f7be08ec23c21485b9b5a1cf1654c2ec8c58168d",
-)
-
-maven_jar(
-    name = "javax_inject_javax_inject",
-    artifact = "javax.inject:javax.inject:1",
-    sha1 = "6975da39a7040257bd51d21a231b76c915872d38",
-)
-
-maven_jar(
-    name = "javax_inject_javax_inject_tck",
-    artifact = "javax.inject:javax.inject-tck:1",
-    sha1 = "bb0090d50219c265be40fcc8e034dae37fa7be99",
-)
-
-maven_jar(
-    name = "com_google_guava_guava",
-    artifact = "com.google.guava:guava:23.3-jre",
-    sha1 = "9124c2675a9de3ba953f66d62339cf62f8e1a143",
-)
-
-maven_jar(
-    name = "com_google_guava_guava_testlib",
-    artifact = "com.google.guava:guava-testlib:23.3-jre",
-    sha1 = "5dd4cc9849497042d84b782f8a1eed2b7dae290c",
-)
-
-maven_jar(
-    name = "com_google_errorprone_javac",
-    artifact = "com.google.errorprone:javac-shaded:9-dev-r4023-3",
-    sha1 = "72b688efd290280a0afde5f9892b0fde6f362d1d",
-)
-
-maven_jar(
-    name = "com_google_googlejavaformat_google_java_format",
-    artifact = "com.google.googlejavaformat:google-java-format:1.4",
-    sha1 = "c2f8925850e17caa6da0ed1891a9e9de9414c062",
-)
-
-maven_jar(
-    name = "com_google_auto_auto_common",
-    artifact = "com.google.auto:auto-common:0.10",
-    sha1 = "c8f153ebe04a17183480ab4016098055fb474364",
-)
-
-maven_jar(
-    name = "com_google_auto_factory_auto_factory",
-    artifact = "com.google.auto.factory:auto-factory:1.0-beta5",
-    sha1 = "78b93b2334d0e2fb0d65c00127d4dcce261a83fc",
-)
-
-maven_jar(
-    name = "com_google_auto_service_auto_service",
-    artifact = "com.google.auto.service:auto-service:1.0-rc4",
-    sha1 = "44954d465f3b9065388bbd2fc08a3eb8fd07917c",
-)
-
-maven_jar(
-    name = "com_google_auto_value_auto_value",
-    artifact = "com.google.auto.value:auto-value:1.4-rc1",
-    sha1 = "9347939002003a7a3c3af48271fc2c18734528a4",
-)
-
-maven_jar(
-    name = "com_google_errorprone_error_prone_annotations",
-    artifact = "com.google.errorprone:error_prone_annotations:2.1.3",
-    sha1 = "39b109f2cd352b2d71b52a3b5a1a9850e1dc304b",
-)
-
-maven_jar(
-    name = "junit_junit",
-    artifact = "junit:junit:4.11",
-    sha1 = "4e031bb61df09069aeb2bffb4019e7a5034a4ee0",
-)
-
-maven_jar(
-    name = "com_google_testing_compile_compile_testing",
-    artifact = "com.google.testing.compile:compile-testing:0.14",
-    sha1 = "3d9e885e2dfe4e6ceabc4402419abf3879c7429e",
-)
-
-maven_jar(
-    name = "org_mockito_mockito_core",
-    artifact = "org.mockito:mockito-core:1.9.5",
-    sha1 = "c3264abeea62c4d2f367e21484fbb40c7e256393",
-)
-
-maven_jar(
-    name = "org_hamcrest_hamcrest_core",
-    artifact = "org.hamcrest:hamcrest-core:1.3",
-    sha1 = "42a25dc3219429f0e5d060061f71acb49bf010a0",
-)
-
-maven_jar(
-    name = "org_objenesis_objenesis",
-    artifact = "org.objenesis:objenesis:1.0",
-    sha1 = "9b473564e792c2bdf1449da1f0b1b5bff9805704",
-)
-
-maven_jar(
-    name = "com_google_truth_truth",
-    artifact = "com.google.truth:truth:0.40",
-    sha1 = "0d74e716afec045cc4a178dbbfde2a8314ae5574",
-)
-
-maven_jar(
-    name = "com_google_truth_extensions_truth_java8_extension",
-    artifact = "com.google.truth.extensions:truth-java8-extension:0.40",
-    sha1 = "636e49d675bc28e0b3ae0edd077d6acbbb159166",
-)
-
-maven_jar(
-    name = "com_squareup_javapoet",
-    artifact = "com.squareup:javapoet:1.8.0",
-    sha1 = "e858dc62ef484048540d27d36f3ec2177a3fa9b1",
-)
-
-maven_jar(
-    name = "io_grpc_grpc_core",
-    artifact = "io.grpc:grpc-core:1.2.0",
-    sha1 = "f12a213e2b59a0615df2cc9bed35dc15fd2fee37",
-)
-
-maven_jar(
-    name = "io_grpc_grpc_netty",
-    artifact = "io.grpc:grpc-netty:1.2.0",
-    sha1 = "e2682d2dc052898f87433e7a6d03d104ef98df74",
-)
-
-maven_jar(
-    name = "io_grpc_grpc_context",
-    artifact = "io.grpc:grpc-context:1.2.0",
-    sha1 = "1932db544cbb427bc18f902c7ebbb3f7e44991df",
-)
-
-maven_jar(
-    name = "io_grpc_grpc_protobuf",
-    artifact = "io.grpc:grpc-protobuf:1.2.0",
-    sha1 = "2676852d2dbd20155d9b1a940a456eae5b7445f0",
-)
-
-maven_jar(
-    name = "io_grpc_grpc_stub",
-    artifact = "io.grpc:grpc-stub:1.2.0",
-    sha1 = "964dda53b3085bfd17c7aaf51495f9efc8bda36c",
-)
-
-maven_jar(
-    name = "io_grpc_grpc_all",
-    artifact = "io.grpc:grpc-all:1.2.0",
-    sha1 = "f32006a1245dfa2d68bf92a1b4cc01831889c95b",
-)
-
-maven_jar(
-    name = "com_google_protobuf_protobuf_java",
-    artifact = "com.google.protobuf:protobuf-java:3.5.0",
-    sha1 = "200fb936907fbab5e521d148026f6033d4aa539e",
-)
-
-http_archive(
-    name = "com_google_protobuf",
-    sha256 = "cef7f1b5a7c5fba672bec2a319246e8feba471f04dcebfe362d55930ee7c1c30",
-    strip_prefix = "protobuf-3.5.0",
-    urls = ["https://github.com/google/protobuf/archive/v3.5.0.zip"],
-)
-
 http_archive(
-    name = "com_google_protobuf_java",
-    sha256 = "cef7f1b5a7c5fba672bec2a319246e8feba471f04dcebfe362d55930ee7c1c30",
-    strip_prefix = "protobuf-3.5.0",
-    urls = ["https://github.com/google/protobuf/archive/v3.5.0.zip"],
+    name = "google_bazel_common",
+    strip_prefix = "bazel-common-aafb9b64f25f66b5ab6b9b991331160ef4130626",
+    urls = ["https://github.com/google/bazel-common/archive/aafb9b64f25f66b5ab6b9b991331160ef4130626.zip"],
 )
 
-load("//tools:jarjar.bzl", "jarjar_deps")
+load("@google_bazel_common//:workspace_defs.bzl", "google_common_workspace_rules")
 
-jarjar_deps()
-
-maven_jar(
-    name = "org_checkerframework_checker_compat_qual",
-    artifact = "org.checkerframework:checker-compat-qual:2.3.0",
-    sha1 = "69cb4fea55a9d89b8827d107f17c985cc1a76052",
-)
+google_common_workspace_rules()
diff --git a/gwt/BUILD b/gwt/BUILD
index b348e06b3..da730138f 100644
--- a/gwt/BUILD
+++ b/gwt/BUILD
@@ -17,8 +17,34 @@
 
 package(default_visibility = ["//:src"])
 
+load("//tools:maven.bzl", "pom_file", "POM_VERSION")
+
 java_library(
     name = "gwt",
     resource_strip_prefix = "gwt/",
     resources = glob(["**/*.gwt.xml"]),
+    tags = ["maven_coordinates=com.google.dagger:dagger-gwt:" + POM_VERSION],
+    exports = [
+        ":manual_deps",
+        "//java/dagger:core",
+    ],
+)
+
+java_library(
+    name = "manual_deps",
+    tags = [
+        "maven_coordinates=com.google.dagger:dagger:%s:jar:sources" % POM_VERSION,
+        "maven_coordinates=javax.inject:javax.inject:1:jar:sources",
+    ],
+    visibility = ["//visibility:private"],
+)
+
+pom_file(
+    name = "pom",
+    artifact_id = "dagger-gwt",
+    artifact_name = "Dagger GWT",
+    targets = [
+        ":gwt",
+        ":manual_deps",
+    ],
 )
diff --git a/java/dagger/BUILD b/java/dagger/BUILD
index ee1ebeaea..5f5cfbf67 100644
--- a/java/dagger/BUILD
+++ b/java/dagger/BUILD
@@ -22,21 +22,30 @@ load(
     "DOCLINT_HTML_AND_SYNTAX",
     "SOURCE_7_TARGET_7",
 )
+load("//tools:maven.bzl", "POM_VERSION", "pom_file")
 
 java_library(
     name = "core",
     srcs = glob(["**/*.java"]),
     javacopts = SOURCE_7_TARGET_7 + DOCLINT_HTML_AND_SYNTAX,
+    tags = ["maven_coordinates=com.google.dagger:dagger:" + POM_VERSION],
     exports = ["@google_bazel_common//third_party/java/jsr330_inject"],
     deps = ["@google_bazel_common//third_party/java/jsr330_inject"],
 )
 
+pom_file(
+    name = "pom",
+    artifact_id = "dagger",
+    artifact_name = "Dagger",
+    targets = [":core"],
+)
+
 filegroup(
     name = "javadoc-srcs",
     srcs = glob(["**/*"]),
 )
 
-load("//tools:javadoc.bzl", "javadoc_library")
+load("@google_bazel_common//tools/javadoc:javadoc.bzl", "javadoc_library")
 
 javadoc_library(
     name = "core-javadoc",
diff --git a/java/dagger/android/BUILD b/java/dagger/android/BUILD
index 1de231d88..cb2aa8c17 100644
--- a/java/dagger/android/BUILD
+++ b/java/dagger/android/BUILD
@@ -23,6 +23,7 @@ load(
     "DOCLINT_REFERENCES",
     "SOURCE_7_TARGET_7",
 )
+load("//tools:maven.bzl", "pom_file", "POM_VERSION")
 
 # Work around b/70476182 which prevents Kythe from connecting :producers to the .java files it
 # contains.
@@ -39,15 +40,43 @@ android_library(
     javacopts = SOURCE_7_TARGET_7 + DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
     manifest = "AndroidManifest.xml",
     proguard_specs = ["proguard.cfg"],
+    tags = ["maven_coordinates=com.google.dagger:dagger-android:" + POM_VERSION],
     deps = [
+        ":manual-maven-deps",
         "//:dagger_with_compiler",
-        "@androidsdk//com.android.support:support-annotations-25.0.0",
         "@google_bazel_common//third_party/java/auto:value",
         "@google_bazel_common//third_party/java/error_prone:annotations",
     ],
 )
 
-load("//tools:javadoc.bzl", "javadoc_library")
+# Our pom.xml generator does not have a way to add manual maven deps. This target exports the
+# targets that don't have the necessary maven_coordinates tags.
+android_library(
+    name = "manual-maven-deps",
+    tags = ["maven_coordinates=com.android.support:support-annotations:25.0.0"],
+    visibility = ["//visibility:private"],
+    exports = [
+        "@androidsdk//com.android.support:support-annotations-25.0.0",
+    ],
+)
+
+pom_file(
+    name = "pom",
+    artifact_id = "dagger-android",
+    artifact_name = "Dagger Android",
+    packaging = "aar",
+    targets = [":android"],
+)
+
+# b/37741866 and https://github.com/google/dagger/issues/715
+pom_file(
+    name = "jarimpl-pom",
+    artifact_id = "dagger-android-jarimpl",
+    artifact_name = "Dagger Android",
+    targets = [":android"],
+)
+
+load("@google_bazel_common//tools/javadoc:javadoc.bzl", "javadoc_library")
 
 javadoc_library(
     name = "android-javadoc",
diff --git a/java/dagger/android/processor/BUILD b/java/dagger/android/processor/BUILD
index 2abcf59a5..565b1b8a3 100644
--- a/java/dagger/android/processor/BUILD
+++ b/java/dagger/android/processor/BUILD
@@ -22,6 +22,7 @@ load(
     "DOCLINT_HTML_AND_SYNTAX",
     "DOCLINT_REFERENCES",
 )
+load("//tools:maven.bzl", "pom_file", "POM_VERSION")
 
 filegroup(
     name = "srcs",
@@ -32,18 +33,45 @@ java_library(
     name = "processor",
     srcs = [":srcs"],
     javacopts = DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
+    tags = ["maven_coordinates=com.google.dagger:dagger-android-processor:" + POM_VERSION],
     deps = [
-        "@google_bazel_common//third_party:guava",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/auto:service",
         "@google_bazel_common//third_party/java/auto:value",
         "@google_bazel_common//third_party/java/auto:common",
         "@google_bazel_common//third_party/java/javapoet",
-        "@google_bazel_common//third_party:google_java_format",
+        "@google_bazel_common//third_party/java/google_java_format",
         "//java/dagger:core",
         # https://github.com/bazelbuild/bazel/issues/2517
+        ":dagger-android-jars",
+    ],
+)
+
+# https://github.com/bazelbuild/bazel/issues/2517
+# This target serves two (related) purposes:
+# 1. Bazel does not allow a java_library to depend on an android_library, even if that java_library
+# will be used in a java_plugin.
+# 2. It stores the metadata for the "jarimpl" targets that we use to work-around Gradle not loading
+# aar artifacts that are declared as deps of an annotation processor. Our pom.xml generator reads
+# the tags and includes them apppropriately.
+java_import(
+    name = "dagger-android-jars",
+    jars = [
         "//java/dagger/android:libandroid.jar",
         "//java/dagger/android/support:libsupport.jar",
     ],
+    tags = [
+        "maven_coordinates=com.google.dagger:dagger-android-jarimpl:" + POM_VERSION,
+        "maven_coordinates=com.google.dagger:dagger-android-support-jarimpl:" + POM_VERSION,
+    ],
+    visibility = ["//visibility:private"],
+)
+
+pom_file(
+    name = "pom",
+    artifact_id = "dagger-android-processor",
+    artifact_name = "Dagger Android Processor",
+    targets = [":processor"],
 )
 
 java_plugin(
@@ -53,7 +81,7 @@ java_plugin(
     deps = [":processor"],
 )
 
-load("//tools:javadoc.bzl", "javadoc_library")
+load("@google_bazel_common//tools/javadoc:javadoc.bzl", "javadoc_library")
 
 javadoc_library(
     name = "processor-javadoc",
diff --git a/java/dagger/android/support/BUILD b/java/dagger/android/support/BUILD
index c2da09955..e4b06560f 100644
--- a/java/dagger/android/support/BUILD
+++ b/java/dagger/android/support/BUILD
@@ -18,6 +18,7 @@
 package(default_visibility = ["//:src"])
 
 load("//:build_defs.bzl", "SOURCE_7_TARGET_7")
+load("//tools:maven.bzl", "pom_file", "POM_VERSION")
 
 filegroup(
     name = "support-srcs",
@@ -29,17 +30,49 @@ android_library(
     srcs = glob(["*.java"]),
     javacopts = SOURCE_7_TARGET_7,
     manifest = "AndroidManifest.xml",
+    tags = ["maven_coordinates=com.google.dagger:dagger-android-support:" + POM_VERSION],
     deps = [
+        ":manual-maven-deps",
         "//:dagger_with_compiler",
         "//java/dagger/android",
+        "@google_bazel_common//third_party/java/error_prone:annotations",
+    ],
+)
+
+# Our pom.xml generator does not have a way to add manual maven deps. This target exports the
+# targets that don't have the necessary maven_coordinates tags.
+android_library(
+    name = "manual-maven-deps",
+    tags = [
+        "maven_coordinates=com.android.support:appcompat-v7:25.0.0",
+        "maven_coordinates=com.android.support:support-annotations:25.0.0",
+        "maven_coordinates=com.android.support:support-fragment:25.0.0",
+    ],
+    visibility = ["//visibility:private"],
+    exports = [
         "@androidsdk//com.android.support:appcompat-v7-25.0.0",
         "@androidsdk//com.android.support:support-annotations-25.0.0",
         "@androidsdk//com.android.support:support-fragment-25.0.0",
-        "@google_bazel_common//third_party/java/error_prone:annotations",
     ],
 )
 
-load("//tools:javadoc.bzl", "javadoc_library")
+pom_file(
+    name = "pom",
+    artifact_id = "dagger-android-support",
+    artifact_name = "Dagger Android Support",
+    packaging = "aar",
+    targets = [":support"],
+)
+
+# b/37741866 and https://github.com/google/dagger/issues/715
+pom_file(
+    name = "jarimpl-pom",
+    artifact_id = "dagger-android-support-jarimpl",
+    artifact_name = "Dagger Android Support",
+    targets = [":support"],
+)
+
+load("@google_bazel_common//tools/javadoc:javadoc.bzl", "javadoc_library")
 
 javadoc_library(
     name = "support-javadoc",
diff --git a/java/dagger/example/spi/BUILD b/java/dagger/example/spi/BUILD
index f41f62f67..84b4a87d8 100644
--- a/java/dagger/example/spi/BUILD
+++ b/java/dagger/example/spi/BUILD
@@ -23,9 +23,9 @@ java_plugin(
     deps = [
         "//java/dagger/model",
         "//java/dagger/spi",
-        "@google_bazel_common//third_party:guava",
         "@google_bazel_common//third_party/java/auto:service",
         "@google_bazel_common//third_party/java/error_prone:annotations",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/javapoet",
     ],
 )
diff --git a/java/dagger/grpc/server/BUILD b/java/dagger/grpc/server/BUILD
index 0ebfb612b..1c57807c7 100644
--- a/java/dagger/grpc/server/BUILD
+++ b/java/dagger/grpc/server/BUILD
@@ -3,6 +3,7 @@
 package(default_visibility = ["//:src"])
 
 load("//:build_defs.bzl", "DOCLINT_HTML_AND_SYNTAX", "DOCLINT_REFERENCES")
+load("//tools:maven.bzl", "pom_file", "POM_VERSION")
 
 ANNOTATIONS_SRCS = [
     "CallScoped.java",
@@ -14,6 +15,7 @@ java_library(
     name = "annotations",
     srcs = ANNOTATIONS_SRCS,
     javacopts = DOCLINT_HTML_AND_SYNTAX,
+    tags = ["maven_coordinates=com.google.dagger:dagger-grpc-server-annotations:" + POM_VERSION],
     deps = [
         "@google_bazel_common//third_party/java/jsr330_inject",
     ],
@@ -28,26 +30,41 @@ java_library(
     ),
     exported_plugins = ["//java/dagger/grpc/server/processor:plugin"],
     javacopts = DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
+    tags = ["maven_coordinates=com.google.dagger:dagger-grpc-server:" + POM_VERSION],
     exports = [":annotations"],
     deps = [
         "//:dagger_with_compiler",
-        "@google_bazel_common//third_party:guava",
-        "@google_bazel_common//third_party:protobuf",
         "@google_bazel_common//third_party/java/auto:value",
         "@google_bazel_common//third_party/java/grpc:context",
         "@google_bazel_common//third_party/java/grpc:core",
         "@google_bazel_common//third_party/java/grpc:netty",
         "@google_bazel_common//third_party/java/grpc:protobuf",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/jsr330_inject",
+        "@google_bazel_common//third_party/java/protobuf",
     ],
 )
 
+pom_file(
+    name = "annotations-pom",
+    artifact_id = "dagger-grpc-server-annotations",
+    artifact_name = "Dagger gRPC Server Annotations",
+    targets = [":annotations"],
+)
+
+pom_file(
+    name = "server-pom",
+    artifact_id = "dagger-grpc-server",
+    artifact_name = "Dagger gRPC Server",
+    targets = [":server"],
+)
+
 filegroup(
     name = "javadoc-srcs",
     srcs = glob(["*.java"]),
 )
 
-load("//tools:javadoc.bzl", "javadoc_library")
+load("@google_bazel_common//tools/javadoc:javadoc.bzl", "javadoc_library")
 
 javadoc_library(
     name = "javadoc",
diff --git a/java/dagger/grpc/server/processor/BUILD b/java/dagger/grpc/server/processor/BUILD
index cbcef51bb..ce02b0635 100644
--- a/java/dagger/grpc/server/processor/BUILD
+++ b/java/dagger/grpc/server/processor/BUILD
@@ -1,23 +1,32 @@
 package(default_visibility = ["//:src"])
 
 load("//:build_defs.bzl", "DOCLINT_HTML_AND_SYNTAX")
+load("//tools:maven.bzl", "pom_file", "POM_VERSION")
 
 java_library(
     name = "processor",
     srcs = glob(["*.java"]),
     javacopts = DOCLINT_HTML_AND_SYNTAX,
+    tags = ["maven_coordinates=com.google.dagger:dagger-grpc-server-processor:" + POM_VERSION],
     deps = [
         "//:dagger_with_compiler",
         "//java/dagger/grpc/server:annotations",
-        "@google_bazel_common//third_party:google_java_format",
-        "@google_bazel_common//third_party:guava",
         "@google_bazel_common//third_party/java/auto:common",
         "@google_bazel_common//third_party/java/auto:service",
+        "@google_bazel_common//third_party/java/google_java_format",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/javapoet",
         "@google_bazel_common//third_party/java/jsr250_annotations",
     ],
 )
 
+pom_file(
+    name = "pom",
+    artifact_id = "dagger-grpc-server-processor",
+    artifact_name = "Dagger gRPC Server Processor",
+    targets = [":processor"],
+)
+
 java_plugin(
     name = "plugin",
     generates_api = 1,
@@ -30,7 +39,7 @@ filegroup(
     srcs = glob(["*.java"]),
 )
 
-load("//tools:javadoc.bzl", "javadoc_library")
+load("@google_bazel_common//tools/javadoc:javadoc.bzl", "javadoc_library")
 
 javadoc_library(
     name = "javadoc",
diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 8b4cf7c0f..5b568508c 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -18,6 +18,7 @@
 package(default_visibility = ["//:src"])
 
 load("//:build_defs.bzl", "DOCLINT_HTML_AND_SYNTAX", "DOCLINT_REFERENCES")
+load("//tools:maven.bzl", "pom_file", "POM_VERSION")
 
 EXPERIMENTAL_VISUALIZER_SRCS = ["BindingNetworkVisualizer.java"]
 
@@ -38,7 +39,7 @@ CODEGEN_SHARED_DEPS = [
     "@google_bazel_common//third_party/java/auto:value",
     "@google_bazel_common//third_party/java/auto:common",
     "@google_bazel_common//third_party/java/error_prone:annotations",
-    "@google_bazel_common//third_party:google_java_format",
+    "@google_bazel_common//third_party/java/google_java_format",
     "@google_bazel_common//third_party/java/javapoet",
     "@local_jdk//:lib/tools.jar",
     "@google_bazel_common//third_party/java/jsr250_annotations",
@@ -51,7 +52,7 @@ CODEGEN_SHARED_DEPS = [
 ]
 
 CODEGEN_DEPS = CODEGEN_SHARED_DEPS + [
-    "@google_bazel_common//third_party:guava",
+    "@google_bazel_common//third_party/java/guava",
     ":shared-with-spi",
 ]
 
@@ -63,7 +64,7 @@ java_library(
     plugins = CODEGEN_PLUGINS,
     tags = ["maven:merged"],
     deps = [
-        "@google_bazel_common//third_party:guava",
+        "@google_bazel_common//third_party/java/guava",
     ],
 )
 
@@ -314,6 +315,7 @@ java_library(
         "ProductionExecutorModuleProcessingStep.java",
     ],
     plugins = CODEGEN_PLUGINS,
+    tags = ["maven_coordinates=com.google.dagger:dagger-compiler:" + POM_VERSION],
     deps = CODEGEN_DEPS + [
         ":base",
         ":binding",
@@ -323,6 +325,20 @@ java_library(
     ],
 )
 
+pom_file(
+    name = "pom",
+    artifact_id = "dagger-compiler",
+    artifact_name = "Dagger Compiler",
+    targets = [
+        ":processor",
+        ":base",
+        ":binding",
+        ":internal_validation",
+        ":writing",
+        ":validation",
+    ],
+)
+
 java_library(
     name = "kythe",
     srcs = KYTHE_SRCS,
@@ -330,19 +346,29 @@ java_library(
     deps = [
         ":base",
         ":binding",
+        ":kythe_plugin",
         ":processor",
         ":validation",
         "//java/dagger:core",
         "//java/dagger/model",
         "//java/dagger/producers",
         "@bazel_tools//third_party/java/jdk/langtools:javac",
-        "@google_bazel_common//third_party:guava",
-        "@google_bazel_common//third_party:kythe_plugin",
         "@google_bazel_common//third_party/java/auto:common",
         "@google_bazel_common//third_party/java/auto:service",
+        "@google_bazel_common//third_party/java/guava",
     ],
 )
 
+# A _deploy.jar consisting of the java_librarys in https://github.com/google/kythe needed to build a
+# Kythe plugin
+# TODO(ronshapiro): replace this with a http_archive of the next release in
+# https://github.com/google/kythe/releases
+java_import(
+    name = "kythe_plugin",
+    jars = ["kythe_plugin_deploy.jar"],
+    neverlink = 1,
+)
+
 java_import(
     name = "bootstrap_compiler",
     jars = ["bootstrap_compiler_deploy.jar"],
@@ -357,7 +383,7 @@ java_plugin(
     deps = [":bootstrap_compiler"],
 )
 
-load("//tools:javadoc.bzl", "javadoc_library")
+load("@google_bazel_common//tools/javadoc:javadoc.bzl", "javadoc_library")
 
 javadoc_library(
     name = "codegen-javadoc",
diff --git a/third_party/kythe_plugin_deploy.jar b/java/dagger/internal/codegen/kythe_plugin_deploy.jar
similarity index 100%
rename from third_party/kythe_plugin_deploy.jar
rename to java/dagger/internal/codegen/kythe_plugin_deploy.jar
diff --git a/java/dagger/model/BUILD b/java/dagger/model/BUILD
index 430573661..a2c91a0e7 100644
--- a/java/dagger/model/BUILD
+++ b/java/dagger/model/BUILD
@@ -41,10 +41,10 @@ java_library(
         "//java/dagger:core",
         "//java/dagger/internal/codegen:shared-with-spi",
         "//java/dagger/producers",
-        "@google_bazel_common//third_party:guava",
         "@google_bazel_common//third_party/java/auto:common",
         "@google_bazel_common//third_party/java/auto:value",
         "@google_bazel_common//third_party/java/error_prone:annotations",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/jsr330_inject",
     ],
 )
@@ -55,6 +55,6 @@ java_library(
     tags = ["maven:merged"],
     deps = [
         ":model",
-        "@google_bazel_common//third_party:guava",
+        "@google_bazel_common//third_party/java/guava",
     ],
 )
diff --git a/java/dagger/model/testing/BUILD b/java/dagger/model/testing/BUILD
index 9ef3dd102..4e8b62d53 100644
--- a/java/dagger/model/testing/BUILD
+++ b/java/dagger/model/testing/BUILD
@@ -31,9 +31,9 @@ java_library(
     deps = [
         "//java/dagger/internal/codegen:shared-with-spi",
         "//java/dagger/model",
-        "@google_bazel_common//third_party:guava",
         "@google_bazel_common//third_party/java/auto:value",
         "@google_bazel_common//third_party/java/checker_framework:annotations",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/truth",
     ],
 )
diff --git a/java/dagger/producers/BUILD b/java/dagger/producers/BUILD
index 05855ba3f..3af069b1b 100644
--- a/java/dagger/producers/BUILD
+++ b/java/dagger/producers/BUILD
@@ -23,6 +23,7 @@ load(
     "DOCLINT_REFERENCES",
     "SOURCE_7_TARGET_7",
 )
+load("//tools:maven.bzl", "pom_file", "POM_VERSION")
 
 # Work around b/70476182 which prevents Kythe from connecting :producers to the .java files it
 # contains.
@@ -37,21 +38,29 @@ java_library(
     name = "producers",
     srcs = SRCS,
     javacopts = SOURCE_7_TARGET_7 + DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
+    tags = ["maven_coordinates=com.google.dagger:dagger-producers:" + POM_VERSION],
     exports = [
         # TODO(dpb): Don't export any of Guava.
-        "@google_bazel_common//third_party:guava",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/jsr330_inject",
     ],
     deps = [
         "//java/dagger:core",
-        "@google_bazel_common//third_party:guava",
         "@google_bazel_common//third_party/java/checker_framework:annotations",
         "@google_bazel_common//third_party/java/error_prone:annotations",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/jsr330_inject",
     ],
 )
 
-load("//tools:javadoc.bzl", "javadoc_library")
+pom_file(
+    name = "pom",
+    artifact_id = "dagger-producers",
+    artifact_name = "Dagger Producers",
+    targets = [":producers"],
+)
+
+load("@google_bazel_common//tools/javadoc:javadoc.bzl", "javadoc_library")
 
 javadoc_library(
     name = "producers-javadoc",
diff --git a/java/dagger/spi/BUILD b/java/dagger/spi/BUILD
index 726d1367e..fb4fcc148 100644
--- a/java/dagger/spi/BUILD
+++ b/java/dagger/spi/BUILD
@@ -28,16 +28,29 @@ filegroup(
     srcs = glob(["*.java"]),
 )
 
+load("//tools:maven.bzl", "pom_file", "POM_VERSION")
+
 java_library(
     name = "spi",
     srcs = [":spi-srcs"],
     javacopts = DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
+    tags = ["maven_coordinates=com.google.dagger:dagger-spi:" + POM_VERSION],
     deps = [
         "//java/dagger:core",
         "//java/dagger/model",
-        "@google_bazel_common//third_party:guava",
         "@google_bazel_common//third_party/java/auto:value",
         "@google_bazel_common//third_party/java/error_prone:annotations",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/jsr330_inject",
     ],
 )
+
+pom_file(
+    name = "pom",
+    artifact_id = "dagger-spi",
+    artifact_name = "Dagger SPI",
+    targets = [
+        "//java/dagger/model",
+        ":spi",
+    ],
+)
diff --git a/javatests/dagger/BUILD b/javatests/dagger/BUILD
index f123b18eb..83257e800 100644
--- a/javatests/dagger/BUILD
+++ b/javatests/dagger/BUILD
@@ -26,7 +26,7 @@ GenJavaTests(
     javacopts = DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
     deps = [
         "//java/dagger:core",
-        "@google_bazel_common//third_party:guava",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/jsr330_inject",
         "@google_bazel_common//third_party/java/junit",
         "@google_bazel_common//third_party/java/truth",
diff --git a/javatests/dagger/android/BUILD b/javatests/dagger/android/BUILD
index e08ba95c3..7ff690ce2 100644
--- a/javatests/dagger/android/BUILD
+++ b/javatests/dagger/android/BUILD
@@ -27,7 +27,7 @@ GenRobolectricTests(
     deps = [
         "//:dagger_with_compiler",
         "//java/dagger/android",
-        "@google_bazel_common//third_party:guava",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/junit",
         "@google_bazel_common//third_party/java/truth",
     ],
diff --git a/javatests/dagger/android/functional/BUILD b/javatests/dagger/android/functional/BUILD
index ffa81b043..fe80b6d47 100644
--- a/javatests/dagger/android/functional/BUILD
+++ b/javatests/dagger/android/functional/BUILD
@@ -45,7 +45,7 @@ GenRobolectricTests(
     javacopts = DOCLINT_HTML_AND_SYNTAX,
     deps = [
         ":code_under_test",
-        "@google_bazel_common//third_party:guava",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/guava:testlib",
         "@google_bazel_common//third_party/java/junit",
         "@google_bazel_common//third_party/java/truth",
diff --git a/javatests/dagger/android/support/BUILD b/javatests/dagger/android/support/BUILD
index b87633dd9..9b87d849b 100644
--- a/javatests/dagger/android/support/BUILD
+++ b/javatests/dagger/android/support/BUILD
@@ -30,7 +30,7 @@ GenRobolectricTests(
         "//java/dagger/android/support",
         "@androidsdk//com.android.support:appcompat-v7-25.0.0",
         "@androidsdk//com.android.support:support-fragment-25.0.0",
-        "@google_bazel_common//third_party:guava",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/junit",
         "@google_bazel_common//third_party/java/truth",
     ],
diff --git a/javatests/dagger/android/support/functional/BUILD b/javatests/dagger/android/support/functional/BUILD
index 8ee502825..85c658ca0 100644
--- a/javatests/dagger/android/support/functional/BUILD
+++ b/javatests/dagger/android/support/functional/BUILD
@@ -31,7 +31,7 @@ android_library(
         "//:dagger_with_compiler",
         "@androidsdk//com.android.support:appcompat-v7-25.0.0",
         "@androidsdk//com.android.support:support-fragment-25.0.0",
-        "@google_bazel_common//third_party:guava",
+        "@google_bazel_common//third_party/java/guava",
     ],
 )
 
diff --git a/javatests/dagger/functional/BUILD b/javatests/dagger/functional/BUILD
index 2612ef908..bf6e066cb 100644
--- a/javatests/dagger/functional/BUILD
+++ b/javatests/dagger/functional/BUILD
@@ -38,7 +38,7 @@ GenJavaTests(
     # used without Guava and jsr305 deps.
     test_only_deps = [
         "@google_bazel_common//third_party/java/guava:testlib",
-        "@google_bazel_common//third_party:guava",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/truth",
         "@google_bazel_common//third_party/java/junit",
     ],
diff --git a/javatests/dagger/functional/guava/BUILD b/javatests/dagger/functional/guava/BUILD
index cd21449f3..66492eb74 100644
--- a/javatests/dagger/functional/guava/BUILD
+++ b/javatests/dagger/functional/guava/BUILD
@@ -26,8 +26,8 @@ GenJavaTests(
     javacopts = DOCLINT_HTML_AND_SYNTAX,
     deps = [
         "//:dagger_with_compiler",
-        "@google_bazel_common//third_party:guava",
         "@google_bazel_common//third_party/java/auto:value",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/jsr305_annotations",
         "@google_bazel_common//third_party/java/jsr330_inject",
         "@google_bazel_common//third_party/java/junit",
diff --git a/javatests/dagger/functional/jdk8/BUILD b/javatests/dagger/functional/jdk8/BUILD
index bf10ae689..6b76ba3a7 100644
--- a/javatests/dagger/functional/jdk8/BUILD
+++ b/javatests/dagger/functional/jdk8/BUILD
@@ -25,7 +25,7 @@ GenJavaTests(
     srcs = glob(["**/*.java"]),
     javacopts = DOCLINT_HTML_AND_SYNTAX,
     test_only_deps = [
-        "@google_bazel_common//third_party:guava",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/junit",
         "@google_bazel_common//third_party/java/truth:truth8",
     ],
diff --git a/javatests/dagger/functional/producers/BUILD b/javatests/dagger/functional/producers/BUILD
index cb40330cc..2b3db633f 100644
--- a/javatests/dagger/functional/producers/BUILD
+++ b/javatests/dagger/functional/producers/BUILD
@@ -31,8 +31,8 @@ GenJavaTests(
     javacopts = SOURCE_7_TARGET_7 + DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
     deps = [
         "//:producers_with_compiler",
-        "@google_bazel_common//third_party:guava",
         "@google_bazel_common//third_party/java/auto:value",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/jsr305_annotations",
         "@google_bazel_common//third_party/java/jsr330_inject",
         "@google_bazel_common//third_party/java/junit",
diff --git a/javatests/dagger/functional/spi/BUILD b/javatests/dagger/functional/spi/BUILD
index 6b932a180..b88a841f1 100644
--- a/javatests/dagger/functional/spi/BUILD
+++ b/javatests/dagger/functional/spi/BUILD
@@ -25,8 +25,8 @@ java_plugin(
     deps = [
         "//java/dagger/model",
         "//java/dagger/spi",
-        "@google_bazel_common//third_party:guava",
         "@google_bazel_common//third_party/java/auto:service",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/javapoet",
     ],
 )
@@ -49,6 +49,6 @@ GenJavaTests(
     deps = [
         ":test_lib",
         "//:dagger_with_compiler",
-        "@google_bazel_common//third_party:guava",
+        "@google_bazel_common//third_party/java/guava",
     ],
 )
diff --git a/javatests/dagger/internal/codegen/BUILD b/javatests/dagger/internal/codegen/BUILD
index f47de1e27..14634f6df 100644
--- a/javatests/dagger/internal/codegen/BUILD
+++ b/javatests/dagger/internal/codegen/BUILD
@@ -37,10 +37,11 @@ GenJavaTests(
         "//java/dagger/model/testing",
         "//java/dagger/producers",
         "//java/dagger/spi",
-        "@google_bazel_common//third_party:guava",
+        "@com_google_auto_value_auto_value//jar",  # For AutoAnnotationProcessor
         "@google_bazel_common//third_party/java/auto:common",
         "@google_bazel_common//third_party/java/auto:value",
         "@google_bazel_common//third_party/java/compile_testing",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/javapoet",
         "@google_bazel_common//third_party/java/jsr250_annotations",
         "@google_bazel_common//third_party/java/jsr330_inject",
diff --git a/javatests/dagger/producers/BUILD b/javatests/dagger/producers/BUILD
index 0442d585c..58a8987c0 100644
--- a/javatests/dagger/producers/BUILD
+++ b/javatests/dagger/producers/BUILD
@@ -31,7 +31,7 @@ GenJavaTests(
     javacopts = SOURCE_7_TARGET_7 + DOCLINT_REFERENCES + DOCLINT_HTML_AND_SYNTAX,
     deps = [
         "//java/dagger/producers",
-        "@google_bazel_common//third_party:guava",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/guava:testlib",
         "@google_bazel_common//third_party/java/junit",
         "@google_bazel_common//third_party/java/mockito",
diff --git a/javatests/dagger/spi/BUILD b/javatests/dagger/spi/BUILD
index 23bc0125d..a94461b07 100644
--- a/javatests/dagger/spi/BUILD
+++ b/javatests/dagger/spi/BUILD
@@ -34,9 +34,9 @@ GenJavaTests(
         "//java/dagger/internal/codegen:processor",
         "//java/dagger/model",
         "//java/dagger/spi",
-        "@google_bazel_common//third_party:guava",
         "@google_bazel_common//third_party/java/auto:service",
         "@google_bazel_common//third_party/java/compile_testing",
+        "@google_bazel_common//third_party/java/guava",
         "@google_bazel_common//third_party/java/jsr330_inject",
         "@google_bazel_common//third_party/java/junit",
         "@google_bazel_common//third_party/java/truth",
diff --git a/maven_sha1_test.py b/maven_sha1_test.py
deleted file mode 100644
index c999dfafa..000000000
--- a/maven_sha1_test.py
+++ /dev/null
@@ -1,42 +0,0 @@
-# Copyright (C) 2017 The Dagger Authors.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import ast
-import unittest
-
-class WorkspaceVisitor(ast.NodeVisitor):
-  def __init__(self):
-    self.missing_sha1 = []
-
-  def visit_Call(self, rule):
-    if rule.func.id == 'maven_jar':
-      name = None
-      for parameter in rule.keywords:
-        if parameter.arg == 'sha1':
-          return
-        if parameter.arg == 'name':
-          name = parameter.value.s
-      self.missing_sha1.append(name)
-
-class MavenSha1Test(unittest.TestCase):
-  def test_each_maven_jar_rule_has_sha1(self):
-    with open('WORKSPACE', 'r') as workspace:
-      visitor = WorkspaceVisitor()
-      visitor.visit(ast.parse(workspace.read()))
-      if len(visitor.missing_sha1) > 0:
-        missing = ', '.join(visitor.missing_sha1)
-        self.fail('%s did not specify a sha1' % missing)
-
-if __name__ == '__main__':
-  unittest.main()
diff --git a/merge_all_rules.txt b/merge_all_rules.txt
deleted file mode 100644
index 345c532e8..000000000
--- a/merge_all_rules.txt
+++ /dev/null
@@ -1 +0,0 @@
-# an empty rules file causes jarjar to merge all of the jar contents without any renaming
diff --git a/shade_rules.txt b/shade_rules.txt
deleted file mode 100644
index 968e53209..000000000
--- a/shade_rules.txt
+++ /dev/null
@@ -1 +0,0 @@
-rule com.google.auto.common.** dagger.shaded.auto.common.@1
diff --git a/test_defs.bzl b/test_defs.bzl
index 8757733c9..0869038aa 100644
--- a/test_defs.bzl
+++ b/test_defs.bzl
@@ -18,85 +18,155 @@ BUILD_VARIANTS = {
     "FastInit": ["-Adagger.fastInit=enabled"],
     "ExperimentalAndroidMode2": ["-Adagger.experimentalAndroidMode2=enabled"],
     "ExperimentalAheadOfTimeComponents": ["-Adagger.experimentalAheadOfTimeComponents=enabled"],
-    "FastInitAndAheadOfTimeComponents": ["-Adagger.fastInit=enabled",
-                                         "-Adagger.experimentalAheadOfTimeComponents=enabled"],
+    "FastInitAndAheadOfTimeComponents": [
+        "-Adagger.fastInit=enabled",
+        "-Adagger.experimentalAheadOfTimeComponents=enabled",
+    ],
 }
 
+# TODO(ronshapiro): convert this to use bazel_common
 # TODO(user): split into two functions for functional vs non-functional tests?
-def GenJavaTests(name, srcs, deps, test_only_deps=None, plugins=None, javacopts=None,
-                 lib_javacopts=None, test_javacopts=None, functional=True):
-  _GenTests(native.java_library, native.java_test, name, srcs, deps, test_only_deps,
-            plugins, javacopts, lib_javacopts, test_javacopts, functional)
+def GenJavaTests(
+        name,
+        srcs,
+        deps,
+        test_only_deps = None,
+        plugins = None,
+        javacopts = None,
+        lib_javacopts = None,
+        test_javacopts = None,
+        functional = True):
+    _GenTests(
+        native.java_library,
+        native.java_test,
+        name,
+        srcs,
+        deps,
+        test_only_deps,
+        plugins,
+        javacopts,
+        lib_javacopts,
+        test_javacopts,
+        functional,
+    )
 
-def GenRobolectricTests(name, srcs, deps, test_only_deps=None, plugins=None, javacopts=None,
-                        lib_javacopts=None, test_javacopts=None):
-  # TODO(ronshapiro): enable these when Bazel supports robolectric tests
+def GenRobolectricTests(
+        name,
+        srcs,
+        deps,
+        test_only_deps = None,
+        plugins = None,
+        javacopts = None,
+        lib_javacopts = None,
+        test_javacopts = None):
+    # TODO(ronshapiro): enable these when Bazel supports robolectric tests
   pass
 
-def _GenTests(library_rule_type, test_rule_type, name, srcs, deps, test_only_deps=None,
-              plugins=None, javacopts=None, lib_javacopts=None, test_javacopts=None,
-              functional=True):
-  _gen_tests(library_rule_type, test_rule_type, name, srcs, deps, test_only_deps,
-             plugins, javacopts, lib_javacopts, test_javacopts)
-
-  if functional:
-    for (variant_name, extra_javacopts) in BUILD_VARIANTS.items():
-      variant_javacopts = (javacopts or []) + extra_javacopts
-      _gen_tests(library_rule_type, test_rule_type, name, srcs, deps, test_only_deps,
-                 plugins, variant_javacopts, lib_javacopts, test_javacopts, variant_name)
+def _GenTests(
+        library_rule_type,
+        test_rule_type,
+        name,
+        srcs,
+        deps,
+        test_only_deps = None,
+        plugins = None,
+        javacopts = None,
+        lib_javacopts = None,
+        test_javacopts = None,
+        functional = True):
+    _gen_tests(
+        library_rule_type,
+        test_rule_type,
+        name,
+        srcs,
+        deps,
+        test_only_deps,
+        plugins,
+        javacopts,
+        lib_javacopts,
+        test_javacopts,
+    )
 
-def _gen_tests(library_rule_type, test_rule_type, name, srcs, deps, test_only_deps,
-               plugins, javacopts, lib_javacopts, test_javacopts, variant_name=None):
-  if variant_name:
-    suffix = "_" + variant_name
-    tags = [variant_name]
-    # Add jvm_flags so that the mode can be accessed from within tests.
-    jvm_flags = ["-Ddagger.mode=" + variant_name]
-  else:
-    suffix = ""
-    tags = []
-    jvm_flags = []
+    if functional:
+        for (variant_name, extra_javacopts) in BUILD_VARIANTS.items():
+            variant_javacopts = (javacopts or []) + extra_javacopts
+            _gen_tests(
+                library_rule_type,
+                test_rule_type,
+                name,
+                srcs,
+                deps,
+                test_only_deps,
+                plugins,
+                variant_javacopts,
+                lib_javacopts,
+                test_javacopts,
+                variant_name,
+            )
 
-  test_files = []
-  supporting_files = []
+def _gen_tests(
+        library_rule_type,
+        test_rule_type,
+        name,
+        srcs,
+        deps,
+        test_only_deps,
+        plugins,
+        javacopts,
+        lib_javacopts,
+        test_javacopts,
+        variant_name = None):
+    if variant_name:
+        suffix = "_" + variant_name
+        tags = [variant_name]
 
-  for src in srcs:
-    if src.endswith("Test.java"):
-      test_files.append(src)
+        # Add jvm_flags so that the mode can be accessed from within tests.
+        jvm_flags = ["-Ddagger.mode=" + variant_name]
     else:
-      supporting_files.append(src)
+        suffix = ""
+        tags = []
+        jvm_flags = []
 
-  if not test_only_deps:
-    test_only_deps = []
+    test_files = []
+    supporting_files = []
 
-  test_deps = test_only_deps + deps
-  if supporting_files:
-    supporting_files_name = name + suffix + "_lib"
-    test_deps.append(":" + supporting_files_name)
-    library_rule_type(
-        name = supporting_files_name,
-        deps = deps,
-        srcs = supporting_files,
-        plugins = plugins,
-        javacopts = (javacopts or []) + (lib_javacopts or []),
-        tags = tags,
-        testonly = 1,
-    )
+    for src in srcs:
+        if src.endswith("Test.java"):
+            test_files.append(src)
+        else:
+            supporting_files.append(src)
 
-  for test_file in test_files:
-    test_name = test_file.replace(".java", "")
-    prefix_path = "src/test/java/"
-    package_name = native.package_name()
-    if package_name.find("javatests/") != -1:
-      prefix_path = "javatests/"
-    test_class = (package_name + "/" + test_name).rpartition(prefix_path)[2].replace("/",".")
-    test_rule_type(
-        name = test_name + suffix,
-        deps = test_deps,
-        srcs = [test_file],
-        plugins = plugins,
-        javacopts = (javacopts or []) + (test_javacopts or []),
-        jvm_flags = jvm_flags,
-        tags = tags,
-        test_class = test_class,
-    )
+    if not test_only_deps:
+        test_only_deps = []
+
+    test_deps = test_only_deps + deps
+    if supporting_files:
+        supporting_files_name = name + suffix + "_lib"
+        test_deps.append(":" + supporting_files_name)
+        library_rule_type(
+            name = supporting_files_name,
+            testonly = 1,
+            srcs = supporting_files,
+            javacopts = (javacopts or []) + (lib_javacopts or []),
+            plugins = plugins,
+            tags = tags,
+            deps = deps,
+        )
+
+    for test_file in test_files:
+        test_name = test_file.replace(".java", "")
+        prefix_path = "src/test/java/"
+        package_name = native.package_name()
+        if package_name.find("javatests/") != -1:
+            prefix_path = "javatests/"
+        test_class = (package_name + "/" + test_name).rpartition(prefix_path)[2].replace("/", ".")
+        test_rule_type(
+            name = test_name + suffix,
+            srcs = [test_file],
+            javacopts = (javacopts or []) + (test_javacopts or []),
+            jvm_flags = jvm_flags,
+            plugins = plugins,
+            tags = tags,
+            test_class = test_class,
+            deps = test_deps,
+        )
diff --git a/third_party/BUILD b/third_party/BUILD
deleted file mode 100644
index 4c305c2db..000000000
--- a/third_party/BUILD
+++ /dev/null
@@ -1,250 +0,0 @@
-# Copyright (C) 2017 The Dagger Authors.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-package(default_visibility = ["//visibility:public"])
-
-java_library(
-    name = "jsr250_annotations",
-    exports = ["@javax_annotation_jsr250_api//jar"],
-)
-
-java_library(
-    name = "jsr305_annotations",
-    exports = ["@com_google_code_findbugs_jsr305//jar"],
-)
-
-java_library(
-    name = "jsr330_inject",
-    exports = ["@javax_inject_javax_inject//jar"],
-)
-
-java_library(
-    name = "jsr330_inject_tck",
-    exports = ["@javax_inject_javax_inject_tck//jar"],
-)
-
-java_library(
-    name = "error_prone_annotations",
-    tags = ["maven:compile_only"],
-    exports = ["@com_google_errorprone_error_prone_annotations//jar"],
-)
-
-java_library(
-    name = "junit",
-    testonly = 1,
-    exports = [
-        "@junit_junit//jar",
-        "@org_hamcrest_hamcrest_core//jar",
-    ],
-)
-
-java_library(
-    name = "truth",
-    testonly = 1,
-    exports = ["@com_google_truth_truth//jar"],
-)
-
-java_library(
-    name = "truth8",
-    testonly = 1,
-    exports = [
-        ":truth",
-        "@com_google_truth_extensions_truth_java8_extension//jar",
-    ],
-)
-
-java_library(
-    name = "guava",
-    exports = ["@com_google_guava_guava//jar"],
-)
-
-java_library(
-    name = "guava_testlib",
-    testonly = 1,
-    exports = ["@com_google_guava_guava_testlib//jar"],
-)
-
-java_library(
-    name = "auto_common",
-    tags = ["maven:shaded"],
-    exports = ["@com_google_auto_auto_common//jar"],
-)
-
-java_plugin(
-    name = "auto_value_processor",
-    processor_class = "com.google.auto.value.processor.AutoValueProcessor",
-    visibility = ["//visibility:private"],
-    deps = [
-        ":auto_common",
-        ":auto_service",
-        "@com_google_auto_value_auto_value//jar",
-        "@google_bazel_common//third_party:guava",
-    ],
-)
-
-java_plugin(
-    name = "auto_annotation_processor",
-    processor_class = "com.google.auto.value.processor.AutoAnnotationProcessor",
-    visibility = ["//visibility:private"],
-    deps = [
-        ":auto_common",
-        ":auto_service",
-        "@com_google_auto_value_auto_value//jar",
-        "@google_bazel_common//third_party:guava",
-    ],
-)
-
-java_library(
-    name = "auto_value",
-    exported_plugins = [
-        ":auto_value_processor",
-        ":auto_annotation_processor",
-    ],
-    tags = ["maven:compile_only"],
-    exports = [
-        ":jsr250_annotations",
-        "@com_google_auto_value_auto_value//jar",
-    ],
-)
-
-java_plugin(
-    name = "auto_factory_processor",
-    generates_api = 1,
-    processor_class = "com.google.auto.factory.processor.AutoFactoryProcessor",
-    visibility = ["//visibility:private"],
-    deps = [
-        ":auto_common",
-        ":auto_service",
-        ":javapoet",
-        "@com_google_auto_factory_auto_factory//jar",
-        "@google_bazel_common//third_party:guava",
-    ],
-)
-
-java_library(
-    name = "auto_factory",
-    exported_plugins = [":auto_factory_processor"],
-    exports = ["@com_google_auto_factory_auto_factory//jar"],
-)
-
-java_plugin(
-    name = "auto_service_processor",
-    processor_class = "com.google.auto.service.processor.AutoServiceProcessor",
-    visibility = ["//visibility:private"],
-    deps = [
-        ":auto_common",
-        "@com_google_auto_service_auto_service//jar",
-        "@google_bazel_common//third_party:guava",
-    ],
-)
-
-java_library(
-    name = "auto_service",
-    exported_plugins = [":auto_service_processor"],
-    tags = ["maven:compile_only"],
-    exports = ["@com_google_auto_service_auto_service//jar"],
-)
-
-java_library(
-    name = "google_java_format",
-    exports = [
-        "@com_google_googlejavaformat_google_java_format//jar",
-    ],
-    runtime_deps = [
-        ":guava",
-        "@com_google_errorprone_javac//jar",
-    ],
-)
-
-java_library(
-    name = "javapoet",
-    exports = ["@com_squareup_javapoet//jar"],
-)
-
-java_library(
-    name = "mockito",
-    testonly = 1,
-    exports = ["@org_mockito_mockito_core//jar"],
-    runtime_deps = [
-        "@org_hamcrest_hamcrest_core//jar",
-        "@org_objenesis_objenesis//jar",
-    ],
-)
-
-java_library(
-    name = "grpc",
-    exports = ["@io_grpc_grpc_all//jar"],
-)
-
-java_library(
-    name = "grpc_core",
-    exports = ["@io_grpc_grpc_core//jar"],
-)
-
-java_library(
-    name = "grpc_netty",
-    exports = ["@io_grpc_grpc_netty//jar"],
-)
-
-java_library(
-    name = "grpc_context",
-    exports = ["@io_grpc_grpc_context//jar"],
-)
-
-java_library(
-    name = "grpc_protobuf",
-    exports = ["@io_grpc_grpc_protobuf//jar"],
-)
-
-java_library(
-    name = "grpc_stub",
-    exports = ["@io_grpc_grpc_stub//jar"],
-)
-
-java_library(
-    name = "protobuf",
-    exports = ["@com_google_protobuf_protobuf_java//jar"],
-)
-
-java_library(
-    name = "compile_testing",
-    testonly = 1,
-    exports = [
-        "@com_google_testing_compile_compile_testing//jar",
-    ],
-    runtime_deps = [
-        ":auto_value",
-        ":jsr305_annotations",
-        "@google_bazel_common//third_party:error_prone_annotations",
-        "@google_bazel_common//third_party:guava",
-        "@google_bazel_common//third_party:junit",
-        "@google_bazel_common//third_party:truth",
-        "@local_jdk//:lib/tools.jar",
-    ],
-)
-
-java_library(
-    name = "checker_framework_annotations",
-    exports = ["@org_checkerframework_checker_compat_qual//jar"],
-)
-
-# A _deploy.jar consisting of the java_librarys in https://github.com/google/kythe needed to build a
-# Kythe plugin
-# TODO(ronshapiro): replace this with a http_archive of the next release in
-# https://github.com/google/kythe/releases
-java_import(
-    name = "kythe_plugin",
-    jars = ["kythe_plugin_deploy.jar"],
-    neverlink = 1,
-)
diff --git a/tools/BUILD b/tools/BUILD
index 6f1a53feb..dff2cde9c 100644
--- a/tools/BUILD
+++ b/tools/BUILD
@@ -17,49 +17,4 @@
 
 package(default_visibility = ["//:src"])
 
-sh_binary(
-    name = "jarjar_library_impl",
-    srcs = ["jarjar_library_impl.sh"],
-)
-
-sh_test(
-    name = "jarjar_library_impl_test",
-    srcs = ["jarjar_library_impl_test.sh"],
-    args = ["$(JAVABASE)"],
-    data = [
-        ":jarjar_deploy.jar",
-        ":jarjar_library_impl",
-        "//tools/testdata:bar",
-        "//tools/testdata:bar_with_dupe_file",
-        "//tools/testdata:foo",
-        "//tools/testdata:foo_with_dupe_file",
-        "@local_jdk//:bin/jar",
-        "@local_jdk//:bin/java",
-        "@local_jdk//:jre",
-    ],
-    toolchains = ["@bazel_tools//tools/jdk:current_java_runtime"],
-)
-
-java_binary(
-    name = "jarjar",
-    main_class = "org.pantsbuild.jarjar.Main",
-    runtime_deps = [
-        "@javax_annotation_jsr250_api//jar",
-        "@javax_enterprise_cdi_api//jar",
-        "@javax_inject_javax_inject//jar",
-        "@org_apache_ant_ant//jar",
-        "@org_apache_ant_ant_launcher//jar",
-        "@org_apache_maven_maven_artifact//jar",
-        "@org_apache_maven_maven_model//jar",
-        "@org_apache_maven_maven_plugin_api//jar",
-        "@org_codehaus_plexus_plexus_classworlds//jar",
-        "@org_codehaus_plexus_plexus_component_annotations//jar",
-        "@org_codehaus_plexus_plexus_utils//jar",
-        "@org_eclipse_sisu_org_eclipse_sisu_inject//jar",
-        "@org_eclipse_sisu_org_eclipse_sisu_plexus//jar",
-        "@org_ow2_asm_asm//jar",
-        "@org_ow2_asm_asm_commons//jar",
-        "@org_ow2_asm_asm_tree//jar",
-        "@org_pantsbuild_jarjar//jar",
-    ],
-)
+exports_files(["pom-template.xml"])
diff --git a/tools/bazel.rc b/tools/bazel.rc
index de078cce9..c930d8e25 100644
--- a/tools/bazel.rc
+++ b/tools/bazel.rc
@@ -1,2 +1,6 @@
 # Include debug info in the compiled jars
-build --javacopt=-g
\ No newline at end of file
+build --javacopt=-g
+
+# Disable The Guava Beta Checker.
+# TODO(ronshapiro): explore how much work it would be to reenable this
+build  --javacopt="-Xep:BetaApi:OFF"
diff --git a/tools/jarjar.bzl b/tools/jarjar.bzl
deleted file mode 100644
index baf9b5858..000000000
--- a/tools/jarjar.bzl
+++ /dev/null
@@ -1,141 +0,0 @@
-# Copyright (C) 2017 The Dagger Authors.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-def jarjar_deps():
-  """
-  Deps that are necessary to build jarjar_binary() but aren't used in the regular build process for
-  Dagger, so they are organized separately from the workspace file.
-  """
-  native.maven_jar(
-      name = "org_codehaus_plexus_plexus_utils",
-      artifact = "org.codehaus.plexus:plexus-utils:3.0.20",
-      sha1 = "e121ed37af8ee3928952f6d8a303de24e019aab0",
-  )
-
-  native.maven_jar(
-      name = "org_eclipse_sisu_org_eclipse_sisu_plexus",
-      artifact = "org.eclipse.sisu:org.eclipse.sisu.plexus:0.3.0",
-      sha1 = "3f53953a998d03b9b0f7d5098f63119e434af0ef",
-  )
-
-  native.maven_jar(
-      name = "org_apache_ant_ant_launcher",
-      artifact = "org.apache.ant:ant-launcher:1.9.6",
-      sha1 = "d75dd4c39ba06401f20e7afffb861d268baec6bc",
-  )
-
-  native.maven_jar(
-      name = "org_apache_maven_maven_plugin_api",
-      artifact = "org.apache.maven:maven-plugin-api:3.3.3",
-      sha1 = "3b78a7e40707be313c4d5449ba514c9747e1c731",
-  )
-
-  native.maven_jar(
-      name = "org_eclipse_sisu_org_eclipse_sisu_inject",
-      artifact = "org.eclipse.sisu:org.eclipse.sisu.inject:0.3.0",
-      sha1 = "6c25adce9ca9af097728ed57834e8807e3b6e2b5",
-  )
-
-  native.maven_jar(
-      name = "org_ow2_asm_asm",
-      artifact = "org.ow2.asm:asm:5.0.4",
-      sha1 = "0da08b8cce7bbf903602a25a3a163ae252435795",
-  )
-
-  native.maven_jar(
-      name = "org_ow2_asm_asm_tree",
-      artifact = "org.ow2.asm:asm-tree:5.0.4",
-      sha1 = "396ce0c07ba2b481f25a70195c7c94922f0d1b0b",
-  )
-
-  native.maven_jar(
-      name = "javax_enterprise_cdi_api",
-      artifact = "javax.enterprise:cdi-api:1.0",
-      sha1 = "44c453f60909dfc223552ace63e05c694215156b",
-  )
-
-  native.maven_jar(
-      name = "org_ow2_asm_asm_commons",
-      artifact = "org.ow2.asm:asm-commons:5.0.4",
-      sha1 = "5a556786086c23cd689a0328f8519db93821c04c",
-  )
-
-  native.maven_jar(
-      name = "org_apache_maven_maven_model",
-      artifact = "org.apache.maven:maven-model:3.3.3",
-      sha1 = "73ba535c2e3a1381aeab131598010b3a723d4b47",
-  )
-
-  native.maven_jar(
-      name = "org_apache_maven_maven_artifact",
-      artifact = "org.apache.maven:maven-artifact:3.3.3",
-      sha1 = "d9f439dfef726e54eebb390ff38dd27356901528",
-  )
-
-  native.maven_jar(
-      name = "org_pantsbuild_jarjar",
-      artifact = "org.pantsbuild:jarjar:1.6.3",
-      sha1 = "cf54d4b142f5409c394095181c8d308a81869622",
-  )
-
-  native.maven_jar(
-      name = "org_codehaus_plexus_plexus_classworlds",
-      artifact = "org.codehaus.plexus:plexus-classworlds:2.5.2",
-      sha1 = "4abb111bfdace5b8167db4c0ef74644f3f88f142",
-  )
-
-  native.maven_jar(
-      name = "org_apache_ant_ant",
-      artifact = "org.apache.ant:ant:1.9.6",
-      sha1 = "80e2063b01bab3c79c2d84e4ed5e73868394c85a",
-  )
-
-  native.maven_jar(
-      name = "org_codehaus_plexus_plexus_component_annotations",
-      artifact = "org.codehaus.plexus:plexus-component-annotations:1.5.5",
-      sha1 = "c72f2660d0cbed24246ddb55d7fdc4f7374d2078",
-  )
-
-def jarjar_library(name, deps, rules_file):
-  """
-  Combines `deps` into one jar file named <name>.jar and jarjar with the rules specified in
-  `rules_file`.
-
-  See: https://github.com/pantsbuild/jarjar
-  """
-  native.genrule(
-      name = name,
-      srcs = deps + [
-          rules_file,
-          "//tools:jarjar_deploy.jar",
-      ],
-      tools = [
-          "//tools:jarjar_library_impl",
-          "@local_jdk//:bin/jar",
-          "@local_jdk//:bin/java",
-          "@local_jdk//:jre",
-      ],
-      outs = [name + ".jar"],
-      cmd = """
-      export JAVA_HOME=$(JAVABASE)
-      $(location //tools:jarjar_library_impl) $@ "{deps}" {rules} \
-        $(location //tools:jarjar_deploy.jar) \
-        $$(readlink $(location @local_jdk//:bin/jar)) \
-        $$(readlink $(location @local_jdk//:bin/java)) \
-        $(@D)
-      """.format(
-          deps=" ".join(["$(location %s)" % dep for dep in deps]),
-          rules="$(location %s)" % rules_file),
-      toolchains = ["@bazel_tools//tools/jdk:current_java_runtime"],
-  )
diff --git a/tools/jarjar_library_impl.sh b/tools/jarjar_library_impl.sh
deleted file mode 100755
index e576d08f6..000000000
--- a/tools/jarjar_library_impl.sh
+++ /dev/null
@@ -1,56 +0,0 @@
-#!/usr/bin/env bash
-
-# Copyright (C) 2017 The Dagger Authors.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-if [[ ! $JAVA_HOME =~ ^/ ]]; then
-  JAVA_HOME=$(readlink -f $JAVA_HOME)
-fi
-
-OUT=$1
-DEPS=$2
-RULES_FILE=$3
-JARJAR=$4
-JAR_BINARY=$5
-JAVA_BINARY=$6
-TMPDIR=$7/combined
-
-mkdir -p $TMPDIR
-for dep in $DEPS; do
-  unzip -qq -B $dep -d $TMPDIR
-done
-pushd $TMPDIR &>/dev/null
-
-# Concatenate similar files in META-INF/services
-for file in META-INF/services/*; do
-  original=$(echo $file | sed s/"~[0-9]*$"//)
-  if [[ "$file" != "$original" ]]; then
-    cat $file >> $original
-    rm $file
-  fi
-done
-
-rm META-INF/MANIFEST.MF*
-rm -rf META-INF/maven/
-duplicate_files=$(find * -type f -regex ".*~[0-9]*$")
-if [[ -n "$duplicate_files" ]]; then
-  echo "Error: duplicate files in merged jar: $duplicate_files"
-  exit 1
-fi
-$JAR_BINARY cf combined.jar *
-
-popd &>/dev/null
-
-$JAVA_BINARY -jar $JARJAR process $RULES_FILE $TMPDIR/combined.jar $OUT
-rm -rf $TMPDIR
diff --git a/tools/jarjar_library_impl_test.sh b/tools/jarjar_library_impl_test.sh
deleted file mode 100755
index edc65d44c..000000000
--- a/tools/jarjar_library_impl_test.sh
+++ /dev/null
@@ -1,60 +0,0 @@
-#!/usr/bin/env bash
-
-# Copyright (C) 2017 The Dagger Authors.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-
-export JAVA_HOME=$(readlink -f $1)
-
-set -eu
-
-JAR_BINARY="$(readlink external/local_jdk/bin/jar)"
-JAVA_BINARY="$(readlink external/local_jdk/bin/java)"
-
-report_bad_output() {
-  $JAR_BINARY tf output.jar
-  echo $1
-  exit 1
-}
-
-ROOT=$TEST_SRCDIR/$TEST_WORKSPACE
-
-cd $TEST_TMPDIR
-
-echo "rule foo.** baz.@1" > rules_file
-
-$ROOT/tools/jarjar_library_impl.sh \
-  "output.jar" \
-  "$ROOT/tools/testdata/libfoo.jar $ROOT/tools/testdata/libbar.jar" \
-  "rules_file" \
-  "$ROOT/tools/jarjar_deploy.jar" \
-  "$JAR_BINARY" \
-  "$JAVA_BINARY" \
-  "."
-if $JAR_BINARY  tf output.jar | grep -F -q foo/Foo.class; then
-  report_bad_output "Expected foo/Foo.class to be renamed to baz/Foo.class"
-elif ! $JAR_BINARY tf output.jar | grep -F -q baz/Foo.class; then
-  report_bad_output "Expected baz/Foo.class to be in the output jar"
-fi
-
-if $ROOT/tools/jarjar_library_impl.sh \
-  "output.jar" \
-  "$ROOT/tools/testdata/libfoo_with_dupe_file.jar $ROOT/tools/testdata/libbar_with_dupe_file.jar" \
-  "rules_file" \
-  "$ROOT/tools/jarjar_deploy.jar" \
-  "$JAR_BINARY" \
-  "$JAVA_BINARY" \
-  "."; then
-  report_bad_output 'Expected duplicate file "dupe"'
-fi
diff --git a/tools/javadoc.bzl b/tools/javadoc.bzl
deleted file mode 100644
index e9bc2b4e3..000000000
--- a/tools/javadoc.bzl
+++ /dev/null
@@ -1,120 +0,0 @@
-# Copyright (C) 2017 The Dagger Authors.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-_EXTERNAL_JAVADOC_LINKS = [
-    "https://docs.oracle.com/javase/8/docs/api/",
-    "https://developer.android.com/reference/",
-    "https://google.github.io/guava/releases/23.3-jre/api/docs/",
-    "https://docs.oracle.com/javaee/7/api/",
-]
-
-def _check_non_empty(value, name):
-  if not value:
-    fail("%s must be non-empty" % name)
-
-def _android_jar(android_api_level):
-  if android_api_level == -1:
-    return None
-  return Label("@androidsdk//:platforms/android-%s/android.jar" % android_api_level)
-
-def _javadoc_library(ctx):
-  _check_non_empty(ctx.attr.root_packages, "root_packages")
-
-  inputs = []
-  for src_attr in ctx.attr.srcs:
-    inputs.extend(src_attr.files.to_list())
-
-  classpath = depset()
-  for dep in ctx.attr.deps:
-    for transitive_dep in dep.java.transitive_deps:
-      classpath += [transitive_dep]
-  if ctx.attr._android_jar:
-    classpath += ctx.attr._android_jar.files
-
-  inputs += classpath.to_list()
-
-  include_packages = " ".join(ctx.attr.root_packages)
-  javadoc_command = [
-      ctx.file._javadoc_binary.path,
-      '-sourcepath $(find * -type d -name "*java" -print0 | tr "\\0" :)',
-      include_packages,
-      "-use",
-      "-subpackages", include_packages,
-      "-encoding UTF8",
-      "-classpath", ":".join([jar.path for jar in classpath.to_list()]),
-      "-notimestamp",
-      '-bottom "Copyright &copy; 2012&ndash;2017 The Dagger Authors. All rights reserved."',
-      "-d tmp",
-      "-Xdoclint:-missing",
-      "-quiet",
-  ]
-
-  if ctx.attr.doctitle:
-    javadoc_command.append('-doctitle "%s"' % ctx.attr.doctitle)
-
-  if ctx.attr.exclude_packages:
-    javadoc_command.append("-exclude %s" % ":".join(ctx.attr.exclude_packages))
-
-  for link in _EXTERNAL_JAVADOC_LINKS:
-    javadoc_command.append("-linkoffline {0} {0}".format(link))
-
-  jar_command = "%s cf %s -C tmp ." % (ctx.file._jar_binary.path, ctx.outputs.jar.path)
-
-  ctx.action(
-      inputs = inputs + ctx.files._jdk,
-      command = "%s && %s" % (" ".join(javadoc_command), jar_command),
-      outputs = [ctx.outputs.jar])
-
-javadoc_library = rule(
-    attrs = {
-        "srcs": attr.label_list(allow_files = True),
-        "deps": attr.label_list(),
-        "doctitle": attr.string(default = ""),
-        "root_packages": attr.string_list(),
-        "exclude_packages": attr.string_list(),
-        "android_api_level": attr.int(default = -1),
-        "_android_jar": attr.label(
-            default = _android_jar,
-            allow_single_file = True,
-        ),
-        "_javadoc_binary": attr.label(
-            default = Label("@local_jdk//:bin/javadoc"),
-            allow_single_file = True,
-        ),
-        "_jar_binary": attr.label(
-            default = Label("@local_jdk//:bin/jar"),
-            allow_single_file = True,
-        ),
-        "_jdk": attr.label(
-            default = Label("@local_jdk//:jdk-default"),
-            allow_files = True,
-        ),
-    },
-    outputs = {"jar": "%{name}.jar"},
-    implementation = _javadoc_library,
-)
-"""
-Generates a Javadoc jar path/to/target/<name>.jar.
-
-Arguments:
-  srcs: source files to process
-  deps: targets that contain references to other types referenced in Javadoc. This can be the
-      java_library/android_library target(s) for the same sources
-  root_packages: Java packages to include in generated Javadoc. Any subpackages not listed in
-      exclude_packages will be included as well
-  exclude_packages: Java packages to exclude from generated Javadoc
-  android_api_level: If Android APIs are used, the API level to compile against to generate
-      Javadoc
-  doctitle: title for Javadoc's index.html. See javadoc -doctitle
-"""
diff --git a/tools/maven.bzl b/tools/maven.bzl
new file mode 100644
index 000000000..4a930489c
--- /dev/null
+++ b/tools/maven.bzl
@@ -0,0 +1,38 @@
+# Copyright (C) 2018 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+"""Macros to simplify generating maven files.
+"""
+
+load("@google_bazel_common//tools/maven:pom_file.bzl", default_pom_file = "pom_file")
+
+def pom_file(name, targets, artifact_name, artifact_id, packaging = None, **kwargs):
+    default_pom_file(
+        name = name,
+        targets = targets,
+        preferred_group_ids = [
+            "com.google.dagger",
+            "com.google",
+        ],
+        template_file = "//tools:pom-template.xml",
+        substitutions = {
+            "{artifact_name}": artifact_name,
+            "{artifact_id}": artifact_id,
+            "{packaging}": packaging or "jar",
+        },
+        excluded_artifacts = ["com.google.auto:auto-common"],
+        **kwargs
+    )
+
+POM_VERSION = "${project.version}"
diff --git a/tools/pom-template.xml b/tools/pom-template.xml
new file mode 100644
index 000000000..39ed62d1d
--- /dev/null
+++ b/tools/pom-template.xml
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ Copyright (C) 2018 The Dagger Authors.
+
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>org.sonatype.oss</groupId>
+    <artifactId>oss-parent</artifactId>
+    <version>7</version>
+  </parent>
+
+  <groupId>com.google.dagger</groupId>
+  <artifactId>{artifact_id}</artifactId>
+  <name>{artifact_name}</name>
+  <version>{pom_version}</version>
+  <description>A fast dependency injector for Android and Java.</description>
+  <url>https://github.com/google/dagger</url>
+  <packaging>{packaging}</packaging>
+
+  <scm>
+    <url>http://github.com/google/dagger/</url>
+    <connection>scm:git:git://github.com/google/dagger.git</connection>
+    <developerConnection>scm:git:ssh://git@github.com/google/dagger.git</developerConnection>
+    <tag>HEAD</tag>
+  </scm>
+
+  <issueManagement>
+    <system>GitHub Issues</system>
+    <url>http://github.com/google/dagger/issues</url>
+  </issueManagement>
+
+  <licenses>
+    <license>
+      <name>Apache 2.0</name>
+      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
+    </license>
+  </licenses>
+
+  <organization>
+    <name>Google, Inc.</name>
+    <url>http://www.google.com</url>
+  </organization>
+
+  <dependencies>
+{generated_bzl_deps}
+  </dependencies>
+</project>
diff --git a/tools/testdata/BUILD b/tools/testdata/BUILD
deleted file mode 100644
index 721961285..000000000
--- a/tools/testdata/BUILD
+++ /dev/null
@@ -1,44 +0,0 @@
-# Copyright (C) 2017 The Dagger Authors.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-# Description:
-#   Tools for Dagger
-
-package(default_visibility = ["//:src"])
-
-java_library(
-    name = "foo",
-    srcs = ["Foo.java"],
-    deps = ["@google_bazel_common//third_party/java/auto:service"],
-)
-
-java_library(
-    name = "foo_with_dupe_file",
-    srcs = ["Foo.java"],
-    resources = ["dupe"],
-    deps = ["@google_bazel_common//third_party/java/auto:service"],
-)
-
-java_library(
-    name = "bar",
-    srcs = ["Bar.java"],
-    deps = ["@google_bazel_common//third_party/java/auto:service"],
-)
-
-java_library(
-    name = "bar_with_dupe_file",
-    srcs = ["Bar.java"],
-    resources = ["dupe"],
-    deps = ["@google_bazel_common//third_party/java/auto:service"],
-)
diff --git a/tools/testdata/Bar.java b/tools/testdata/Bar.java
deleted file mode 100644
index e040e39fd..000000000
--- a/tools/testdata/Bar.java
+++ /dev/null
@@ -1,22 +0,0 @@
-/*
- * Copyright (C) 2017 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package bar;
-
-import com.google.auto.service.AutoService;
-
-@AutoService(Object.class)
-class Bar {}
diff --git a/tools/testdata/Foo.java b/tools/testdata/Foo.java
deleted file mode 100644
index f2305c83a..000000000
--- a/tools/testdata/Foo.java
+++ /dev/null
@@ -1,22 +0,0 @@
-/*
- * Copyright (C) 2017 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package foo;
-
-import com.google.auto.service.AutoService;
-
-@AutoService(Object.class)
-class Foo {}
diff --git a/tools/testdata/dupe b/tools/testdata/dupe
deleted file mode 100644
index b68619fc0..000000000
--- a/tools/testdata/dupe
+++ /dev/null
@@ -1 +0,0 @@
-duped data file
diff --git a/util/deploy-to-maven-central.sh b/util/deploy-to-maven-central.sh
index 63471807f..5acb866ad 100755
--- a/util/deploy-to-maven-central.sh
+++ b/util/deploy-to-maven-central.sh
@@ -50,5 +50,13 @@ for generated_pom_file in dagger*pom.xml; do
   rm "${generated_pom_file}.asc"
 done
 
+release_branch="release_${version_name}"
+git checkout -b "${release_branch}"
+# Set the version string that is used as a tag in all of our libraries. If another repo depends on
+# a versioned tag of Dagger, their java_library.tags should match the versioned release.
+sed -i s/'${project.version}'/"${version_name}"/g tools/maven.bzl
+git commit -m "${version_name}"
+git push origin "${release_branch}"
+
 git tag -a -m "Dagger ${version_name}" dagger-"${version_name}"
 git push origin tag dagger-"${version_name}"
diff --git a/util/execute-deploy.sh b/util/execute-deploy.sh
index 82f2c1871..d1a8919e9 100755
--- a/util/execute-deploy.sh
+++ b/util/execute-deploy.sh
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/bin/bash
 
 set -eu
 
@@ -7,46 +7,32 @@ readonly VERSION_NAME="$2"
 shift 2
 readonly EXTRA_MAVEN_ARGS=("$@")
 
-python $(dirname $0)/maven/generate_poms.py $VERSION_NAME \
-  //java/dagger:core \
-  //gwt:gwt \
-  //java/dagger/internal/codegen:processor \
-  //java/dagger/producers:producers \
-  //java/dagger/model:model \
-  //java/dagger/android:android \
-  //java/dagger/android:libandroid.jar \
-  //java/dagger/android/support:libsupport.jar \
-  //java/dagger/android/support:support \
-  //java/dagger/android/processor:processor \
-  //java/dagger/grpc/server:server \
-  //java/dagger/grpc/server:annotations \
-  //java/dagger/grpc/server/processor:processor
-
-library_output_file() {
-  library=$1
-  library_output=bazel-bin/$library
-  if [[ ! -e $library_output ]]; then
-     library_output=bazel-genfiles/$library
+bazel_output_file() {
+  local library=$1
+  local output_file=bazel-bin/$library
+  if [[ ! -e $output_file ]]; then
+     output_file=bazel-genfiles/$library
   fi
-  if [[ ! -e $library_output ]]; then
+  if [[ ! -e $output_file ]]; then
     echo "Could not find bazel output file for $library"
     exit 1
   fi
-  echo -n $library_output
+  echo -n $output_file
 }
 
 deploy_library() {
-  library=$1
-  srcjar=$2
-  javadoc=$3
-  pomfile=$4
-  bazel build $library $srcjar $javadoc
+  local library=$1
+  local srcjar=$2
+  local javadoc=$3
+  local pomfile=$4
+  bazel build --define=pom_version="$VERSION_NAME" \
+    $library $srcjar $javadoc $pomfile
 
   mvn $MVN_GOAL \
-    -Dfile=$(library_output_file $library) \
-    -Djavadoc=$(library_output_file $javadoc) \
-    -DpomFile=$pomfile \
-    -Dsources=$(library_output_file $srcjar) \
+    -Dfile=$(bazel_output_file $library) \
+    -Djavadoc=$(bazel_output_file $javadoc) \
+    -DpomFile=$(bazel_output_file $pomfile) \
+    -Dsources=$(bazel_output_file $srcjar) \
     "${EXTRA_MAVEN_ARGS[@]:+${EXTRA_MAVEN_ARGS[@]}}"
 }
 
@@ -54,78 +40,78 @@ deploy_library \
   java/dagger/libcore.jar \
   java/dagger/libcore-src.jar \
   java/dagger/core-javadoc.jar \
-  dagger.pom.xml
+  java/dagger/pom.xml
 
 deploy_library \
   gwt/libgwt.jar \
   gwt/libgwt.jar \
   gwt/libgwt.jar \
-  dagger-gwt.pom.xml
+  gwt/pom.xml
 
 deploy_library \
   shaded_compiler.jar \
   shaded_compiler_src.jar \
   java/dagger/internal/codegen/codegen-javadoc.jar \
-  dagger-compiler.pom.xml
+  java/dagger/internal/pom.xml
 
 deploy_library \
   java/dagger/producers/libproducers.jar \
   java/dagger/producers/libproducers-src.jar \
   java/dagger/producers/producers-javadoc.jar \
-  dagger-producers.pom.xml
+  java/dagger/producers/pom.xml
 
 deploy_library \
   shaded_spi.jar \
   shaded_spi_src.jar \
   spi-javadoc.jar \
-  dagger-spi.pom.xml
+  java/dagger/spi/pom.xml
 
 deploy_library \
   java/dagger/android/android.aar \
   java/dagger/android/libandroid-src.jar \
   java/dagger/android/android-javadoc.jar \
-  dagger-android.pom.xml
+  java/dagger/android/pom.xml
 
 # b/37741866 and https://github.com/google/dagger/issues/715
 deploy_library \
   java/dagger/android/libandroid.jar \
   java/dagger/android/libandroid-src.jar \
   java/dagger/android/android-javadoc.jar \
-  dagger-android-jarimpl.pom.xml
+  java/dagger/android/jarimpl-pom.xml
 
 deploy_library \
   java/dagger/android/support/support.aar \
   java/dagger/android/support/libsupport-src.jar \
   java/dagger/android/support/support-javadoc.jar \
-  dagger-android-support.pom.xml
+  java/dagger/android/support/pom.xml
 
 # b/37741866 and https://github.com/google/dagger/issues/715
 deploy_library \
   java/dagger/android/support/libsupport.jar \
   java/dagger/android/support/libsupport-src.jar \
   java/dagger/android/support/support-javadoc.jar \
-  dagger-android-support-jarimpl.pom.xml
+  java/dagger/android/support/jarimpl-pom.xml
 
 deploy_library \
   shaded_android_processor.jar \
   java/dagger/android/processor/libprocessor-src.jar \
   java/dagger/android/processor/processor-javadoc.jar \
-  dagger-android-processor.pom.xml
+  java/dagger/android/processor/pom.xml
 
 deploy_library \
   java/dagger/grpc/server/libserver.jar \
   java/dagger/grpc/server/libserver-src.jar \
   java/dagger/grpc/server/javadoc.jar \
-  dagger-grpc-server.pom.xml
+  java/dagger/grpc/server/server-pom.xml
 
 deploy_library \
   java/dagger/grpc/server/libannotations.jar \
   java/dagger/grpc/server/libannotations-src.jar \
   java/dagger/grpc/server/javadoc.jar \
-  dagger-grpc-server-annotations.pom.xml
+  java/dagger/grpc/server/annotations-pom.xml
 
 deploy_library \
   shaded_grpc_server_processor.jar \
   java/dagger/grpc/server/processor/libprocessor-src.jar \
   java/dagger/grpc/server/processor/javadoc.jar \
-  dagger-grpc-server-processor.pom.xml
+  java/dagger/grpc/server/processor/pom.xml
diff --git a/util/maven/__init__.py b/util/maven/__init__.py
deleted file mode 100644
index e69de29bb..000000000
diff --git a/util/maven/generate_poms.py b/util/maven/generate_poms.py
deleted file mode 100644
index cd4c3c682..000000000
--- a/util/maven/generate_poms.py
+++ /dev/null
@@ -1,175 +0,0 @@
-# Copyright (C) 2017 The Dagger Authors.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-import re
-from subprocess import check_output
-import sys
-from workspace_parser import maven_artifacts
-from xml_formatting import generate_pom
-
-
-def _shell(command):
-  output = check_output(command,
-                        shell=True,
-                        stderr=open(os.devnull)).strip()
-  return output.splitlines()
-
-def deps_of(label):
-  return _shell(
-      """bazel query 'let deps = labels(deps, {0}) in $deps
-      except attr(tags, "maven:(compile_only|merged|shaded)", $deps)
-      '""".format(label))
-
-def exports_for(label):
-  return _shell('bazel query "labels(exports, %s)"' % label)
-
-def pom_deps(label):
-  accumulated_deps = set()
-  for dep in deps_of(label):
-    if dep.startswith("@local_jdk//:"): continue
-    if dep.startswith(('//:', '@google_bazel_common//third_party:')):
-      for export in exports_for(dep):
-        accumulated_deps.add(export)
-        accumulated_deps.update(pom_deps(export))
-    else:
-      accumulated_deps.add(dep)
-
-  return accumulated_deps
-
-
-GROUP = 'com.google.dagger'
-
-METADATA = {
-    '//java/dagger:core': {
-        'name': 'Dagger',
-        'artifact': 'dagger',
-    },
-    '//gwt:gwt': {
-        'name': 'Dagger GWT',
-        'artifact': 'dagger-gwt',
-        'manual_dependencies': [
-            'com.google.dagger:dagger:${project.version}',
-            'com.google.dagger:dagger:${project.version}:jar:sources',
-            'javax.inject:javax.inject:1:jar:sources',
-        ],
-    },
-    '//java/dagger/internal/codegen:processor': {
-        'name': 'Dagger Compiler',
-        'artifact': 'dagger-compiler',
-    },
-    '//java/dagger/producers:producers': {
-        'name': 'Dagger Producers',
-        'artifact': 'dagger-producers',
-    },
-    '//java/dagger/model:model': {
-        'name': 'Dagger SPI',
-        'artifact': 'dagger-spi',
-    },
-    '//java/dagger/spi:spi': {
-        'name': 'Dagger SPI',
-        'artifact': 'dagger-spi',
-    },
-    '//java/dagger/android:android': {
-        'name': 'Dagger Android',
-        'artifact': 'dagger-android',
-        'packaging': 'aar',
-    },
-    '//java/dagger/android/support:support': {
-        'name': 'Dagger Android Support',
-        'artifact': 'dagger-android-support',
-        'packaging': 'aar',
-    },
-    '//java/dagger/android/processor:processor': {
-        'name': 'Dagger Android Processor',
-        'artifact': 'dagger-android-processor',
-    },
-    '//java/dagger/grpc/server:server': {
-        'name': 'Dagger gRPC Server',
-        'artifact': 'dagger-grpc-server',
-    },
-    '//java/dagger/grpc/server:annotations': {
-        'name': 'Dagger gRPC Server annotations',
-        'artifact': 'dagger-grpc-server-annotations',
-    },
-    '//java/dagger/grpc/server/processor:processor': {
-        'name': 'Dagger gRPC Server processor',
-        'artifact': 'dagger-grpc-server-processor',
-    },
-    # b/37741866 and https://github.com/google/dagger/issues/715
-    '//java/dagger/android:libandroid.jar': {
-        'name': 'Dagger Android (Jar Impl)',
-        'artifact': 'dagger-android-jarimpl',
-    },
-    '//java/dagger/android/support:libsupport.jar': {
-        'name': 'Dagger Android Support (Jar Impl)',
-        'artifact': 'dagger-android-support-jarimpl',
-    },
-}
-
-def dependencies_comparator(first, second):
-  if first == second:
-    return 0
-
-  first = first.split(':')
-  second = second.split(':')
-
-  if first[0] == GROUP and second[0] != GROUP:
-    return -1
-  if second[0] == GROUP and first[0] != GROUP:
-    return 1
-
-  # Compare each item in the list: first sort by group, then artifact
-  if first < second:
-    return -1
-  else:
-    return 1
-
-class UnknownDependencyException(Exception): pass
-
-
-def main():
-  if len(sys.argv) < 3:
-    print 'Usage: %s <version> <target_for_pom>...' % sys.argv[0]
-    sys.exit(1)
-
-  version = sys.argv[1]
-  artifacts = maven_artifacts()
-
-  android_sdk_pattern = re.compile(
-      r'@androidsdk//([a-z.-]*):([a-z0-9-]*)-([0-9.]*)')
-
-  for label, metadata in METADATA.iteritems():
-    artifacts[label] = (
-        'com.google.dagger:%s:%s' % (metadata['artifact'], version)
-    )
-
-  def artifact_for_dep(label):
-    if label in artifacts:
-      return artifacts[label]
-    match = android_sdk_pattern.match(label)
-    if match:
-      return ':'.join(match.groups())
-    raise UnknownDependencyException('No artifact found for %s' % label)
-
-  for arg in sys.argv[2:]:
-    metadata = METADATA[arg]
-    with open('%s.pom.xml' % metadata['artifact'], 'w') as pom_file:
-      deps = map(artifact_for_dep, pom_deps(arg))
-      deps = list(set(deps)) # remove duplicates
-      deps.sort(cmp=dependencies_comparator)
-      pom_file.write(generate_pom(artifacts[arg], metadata, deps, version))
-
-if __name__ == '__main__':
-  main()
diff --git a/util/maven/workspace_parser.py b/util/maven/workspace_parser.py
deleted file mode 100644
index 47e24483a..000000000
--- a/util/maven/workspace_parser.py
+++ /dev/null
@@ -1,37 +0,0 @@
-# Copyright (C) 2017 The Dagger Authors.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import ast
-
-class WorkspaceVisitor(ast.NodeVisitor):
-  def __init__(self):
-    self.artifacts = {}
-
-  def visit_Call(self, rule):
-    if rule.func.id is not 'maven_jar': return
-    name = None
-    artifact = None
-    for keyword in rule.keywords:
-      if keyword.arg == 'name':
-        name = keyword.value.s
-      if keyword.arg == 'artifact':
-        artifact = keyword.value.s
-    self.artifacts['@%s//jar:jar' % name] = artifact
-
-def maven_artifacts():
-  visitor = WorkspaceVisitor()
-  with open('WORKSPACE', 'r') as workspace:
-    visitor.visit(ast.parse(workspace.read()))
-
-  return visitor.artifacts
diff --git a/util/maven/xml_formatting.py b/util/maven/xml_formatting.py
deleted file mode 100644
index 4e8cbb717..000000000
--- a/util/maven/xml_formatting.py
+++ /dev/null
@@ -1,118 +0,0 @@
-# Copyright (C) 2017 The Dagger Authors.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import textwrap
-
-DEP_BLOCK = """
-<dependency>
-  <groupId>%s</groupId>
-  <artifactId>%s</artifactId>
-  <version>%s</version>
-</dependency>
-""".strip()
-
-CLASSIFIER_DEP_BLOCK = """
-<dependency>
-  <groupId>%s</groupId>
-  <artifactId>%s</artifactId>
-  <version>%s</version>
-  <type>%s</type>
-  <classifier>%s</classifier>
-</dependency>
-""".strip()
-
-
-def maven_dependency_xml(artifact_string):
-  if artifact_string.count(':') is 2:
-    format_string = DEP_BLOCK
-  else:
-    format_string = CLASSIFIER_DEP_BLOCK
-  formatted = format_string % tuple(artifact_string.split(':'))
-  return '\n'.join(['    %s' %x for x in formatted.split('\n')])
-
-POM_OUTLINE = """<?xml version="1.0" encoding="UTF-8"?>
-<!--
- Copyright (C) 2012 The Dagger Authors.
-
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>org.sonatype.oss</groupId>
-    <artifactId>oss-parent</artifactId>
-    <version>7</version>
-  </parent>
-
-  <groupId>{group}</groupId>
-  <artifactId>{artifact}</artifactId>
-  <name>{name}</name>
-  <version>{version}</version>
-  <description>A fast dependency injector for Android and Java.</description>
-  <url>https://github.com/google/dagger</url>
-  <packaging>{packaging}</packaging>
-
-  <scm>
-    <url>http://github.com/google/dagger/</url>
-    <connection>scm:git:git://github.com/google/dagger.git</connection>
-    <developerConnection>scm:git:ssh://git@github.com/google/dagger.git</developerConnection>
-    <tag>HEAD</tag>
-  </scm>
-
-  <issueManagement>
-    <system>GitHub Issues</system>
-    <url>http://github.com/google/dagger/issues</url>
-  </issueManagement>
-
-  <licenses>
-    <license>
-      <name>Apache 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-    </license>
-  </licenses>
-
-  <organization>
-    <name>Google, Inc.</name>
-    <url>http://www.google.com</url>
-  </organization>
-
-  <dependencies>
-{deps}
-  </dependencies>
-</project>
-"""
-
-def generate_pom(artifact_string, metadata, deps, version):
-  group, artifact, version = artifact_string.split(':')
-
-  deps = deps + metadata.get('manual_dependencies', [])
-
-  return POM_OUTLINE.format(
-      group=group,
-      artifact=artifact,
-      name=metadata['name'],
-      version=version,
-      packaging=metadata.get('packaging', 'jar'),
-      deps='\n'.join(map(maven_dependency_xml, deps)))
