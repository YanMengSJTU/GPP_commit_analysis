diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponent.java
index 1e9549231..e5247c4a1 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildComponent.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package test.subcomponent;
 
 import dagger.Subcomponent;
@@ -5,7 +20,9 @@
 
 @Subcomponent(modules = ChildModule.class)
 interface ChildComponent {
-  String string();
+  RequiresSingleton requiresSingleton();
 
   Set<Object> objectSet();
+
+  GrandchildComponent newGrandchildComponent();
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildModule.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildModule.java
index 53cb00ccb..ef28bd47a 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ChildModule.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package test.subcomponent;
 
 import dagger.Module;
@@ -7,10 +22,6 @@
 
 @Module
 final class ChildModule {
-  @Provides String stringRequiresSingleton(SingletonType singletonType) {
-    return singletonType.toString();
-  }
-
   @Provides(type = SET) Object provideUnscopedObject() {
     return new Object() {
       @Override public String toString() {
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildComponent.java
new file mode 100644
index 000000000..d1332a27c
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildComponent.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.subcomponent;
+
+import dagger.Subcomponent;
+import java.util.Set;
+
+@Subcomponent(modules = GrandchildModule.class)
+interface GrandchildComponent {
+  RequiresSingleton requiresSingleton();
+  Set<Object> objectSet();
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildModule.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildModule.java
new file mode 100644
index 000000000..b426f6386
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/GrandchildModule.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.subcomponent;
+
+import dagger.Module;
+import dagger.Provides;
+
+import static dagger.Provides.Type.SET;
+
+@Module
+final class GrandchildModule {
+  @Provides(type = SET) Object provideUnscopedObject() {
+    return new Object() {
+      @Override public String toString() {
+        return "unscoped in grandchild";
+      }
+    };
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java
index b28debfee..6bf9bd15a 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentComponent.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package test.subcomponent;
 
 import dagger.Component;
@@ -7,7 +22,9 @@
 @Component(modules = ParentModule.class)
 @Singleton
 interface ParentComponent {
-  ChildComponent newChildComponent();
+  SingletonType getSingletonType();
 
   Set<Object> objectSet();
+
+  ChildComponent newChildComponent();
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentModule.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentModule.java
index 0a753d290..3ac07b086 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/ParentModule.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package test.subcomponent;
 
 import dagger.Module;
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresSingleton.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresSingleton.java
new file mode 100644
index 000000000..d7813f1cd
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/RequiresSingleton.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package test.subcomponent;
+
+import javax.inject.Inject;
+
+final class RequiresSingleton {
+  private final SingletonType singletonType;
+
+  @Inject RequiresSingleton(SingletonType singletonType) {
+    this.singletonType = singletonType;
+  }
+
+  SingletonType singletonType() {
+    return singletonType;
+  }
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/SingletonType.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/SingletonType.java
index 7d0c98b6a..663e858a9 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/SingletonType.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/SingletonType.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package test.subcomponent;
 
 import javax.inject.Inject;
diff --git a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentScopeTest.java b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentScopeTest.java
index 2d98d1f84..3d6079b22 100644
--- a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentScopeTest.java
+++ b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/SubcomponentScopeTest.java
@@ -1,12 +1,26 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package test.subcomponent;
 
-import java.util.Collections;
-import java.util.IdentityHashMap;
 import java.util.Set;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
+import static com.google.common.collect.Sets.intersection;
 import static com.google.common.truth.Truth.assertThat;
 
 @RunWith(JUnit4.class)
@@ -14,8 +28,13 @@
   @Test
   public void testSingletonPropagatesUpward() {
     ParentComponent parentComponent = Dagger_ParentComponent.create();
-    assertThat(parentComponent.newChildComponent().string())
-        .isEqualTo(parentComponent.newChildComponent().string());
+    SingletonType singletonType = parentComponent.getSingletonType();
+    assertThat(parentComponent.newChildComponent().requiresSingleton().singletonType())
+        .isSameAs(singletonType);
+    assertThat(parentComponent.newChildComponent()
+        .newGrandchildComponent()
+        .requiresSingleton().singletonType())
+            .isSameAs(singletonType);
   }
 
   @Test
@@ -25,9 +44,11 @@ public void testMultibindingContributions() {
     assertThat(parentObjectSet).hasSize(2);
     Set<Object> childObjectSet = parentComponent.newChildComponent().objectSet();
     assertThat(childObjectSet).hasSize(3);
-    Set<Object> identitySet = Collections.newSetFromMap(new IdentityHashMap<Object, Boolean>());
-    identitySet.addAll(parentObjectSet);
-    identitySet.addAll(childObjectSet);
-    assertThat(identitySet).hasSize(4);
+    Set<Object> grandchildObjectSet =
+        parentComponent.newChildComponent().newGrandchildComponent().objectSet();
+    assertThat(grandchildObjectSet).hasSize(4);
+    assertThat(intersection(parentObjectSet, childObjectSet)).hasSize(1);
+    assertThat(intersection(parentObjectSet, grandchildObjectSet)).hasSize(1);
+    assertThat(intersection(childObjectSet, grandchildObjectSet)).hasSize(1);
   }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index d67f1cc0f..75b766321 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -289,6 +289,22 @@ static ProxyClassAndField create(ClassWriter proxyWriter, FieldWriter proxyField
 
     writeInterfaceMethods(input, componentWriter, memberSelectSnippets, enumBindingKeys);
 
+    writeSubcomponents(input,
+        componentWriter,
+        proxyWriters,
+        componentContributionFields,
+        memberSelectSnippets,
+        multibindingContributionSnippets);
+
+    return memberSelectSnippets;
+  }
+
+  private void writeSubcomponents(BindingGraph input,
+      ClassWriter componentWriter,
+      Set<JavaWriter> proxyWriters,
+      Map<TypeElement, FieldWriter> componentContributionFields,
+      ImmutableMap<BindingKey, Snippet> memberSelectSnippets,
+      ImmutableMap<ContributionBinding, Snippet> multibindingContributionSnippets) {
     for (Entry<ExecutableElement, BindingGraph> subgraphEntry : input.subgraphs().entrySet()) {
       TypeName componentType =
           TypeNames.forTypeMirror(subgraphEntry.getKey().getReturnType());
@@ -315,8 +331,6 @@ static ProxyClassAndField create(ClassWriter proxyWriter, FieldWriter proxyField
       componentMethod.body().addSnippet("return new %s();",
           subcomponentWriter.name());
     }
-
-    return memberSelectSnippets;
   }
 
   private ImmutableMap<BindingKey, Snippet> writeSubcomponent(
@@ -393,6 +407,17 @@ static ProxyClassAndField create(ClassWriter proxyWriter, FieldWriter proxyField
         multibindingContributionSnippets);
 
     writeInterfaceMethods(input, componentWriter, memberSelectSnippets, enumBindingKeys);
+
+    writeSubcomponents(input,
+        componentWriter,
+        proxyWriters,
+        componentContributionFields,
+        memberSelectSnippets,
+        new ImmutableMap.Builder<ContributionBinding, Snippet>()
+            .putAll(parentMultibindingContributionSnippets)
+            .putAll(multibindingContributionSnippets)
+            .build());
+
     return memberSelectSnippets;
   }
 
diff --git a/core/src/main/java/dagger/Subcomponent.java b/core/src/main/java/dagger/Subcomponent.java
index c47b58982..1775050c5 100644
--- a/core/src/main/java/dagger/Subcomponent.java
+++ b/core/src/main/java/dagger/Subcomponent.java
@@ -21,7 +21,7 @@
 import static java.lang.annotation.ElementType.TYPE;
 
 /**
- * A component that inherits the bindings from a parent {@link Component}.
+ * A component that inherits the bindings from a parent {@link Component} or {@link Subcomponent}.
  *
  * <p>Subcomponent implementations only exist in the context of a parent and are associated with
  * parents using factory methods on the component.  Simply add a method that returns the
