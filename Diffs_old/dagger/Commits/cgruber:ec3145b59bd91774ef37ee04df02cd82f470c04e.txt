diff --git a/java/dagger/internal/codegen/Binding.java b/java/dagger/internal/codegen/Binding.java
index 46e8b7560..7cb233ea6 100644
--- a/java/dagger/internal/codegen/Binding.java
+++ b/java/dagger/internal/codegen/Binding.java
@@ -82,6 +82,11 @@ boolean requiresModuleInstance() {
   /** The {@link BindingType} of this binding. */
   abstract BindingType bindingType();
 
+  /** The {@link FrameworkType} of this binding. */
+  final FrameworkType frameworkType() {
+    return FrameworkType.forBindingType(bindingType());
+  }
+
   /**
    * The explicit set of {@link DependencyRequest dependencies} required to satisfy this binding as
    * defined by the user-defined injection sites.
diff --git a/java/dagger/internal/codegen/DelegatingFrameworkInstanceCreationExpression.java b/java/dagger/internal/codegen/DelegatingFrameworkInstanceCreationExpression.java
index 5d5f4635f..a0ac3211f 100644
--- a/java/dagger/internal/codegen/DelegatingFrameworkInstanceCreationExpression.java
+++ b/java/dagger/internal/codegen/DelegatingFrameworkInstanceCreationExpression.java
@@ -22,6 +22,7 @@
 
 import com.squareup.javapoet.CodeBlock;
 import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
+import dagger.model.DependencyRequest;
 
 /** A framework instance creation expression for a {@link dagger.Binds @Binds} binding. */
 final class DelegatingFrameworkInstanceCreationExpression
@@ -42,12 +43,13 @@
 
   @Override
   public CodeBlock creationExpression() {
-    FrameworkDependency frameworkDependency = getOnlyElement(binding.frameworkDependencies());
+    DependencyRequest dependency = getOnlyElement(binding.dependencies());
     return CodeBlocks.cast(
         componentBindingExpressions
             .getDependencyExpression(
-                bindingRequest(frameworkDependency), componentImplementation.name())
+                bindingRequest(dependency.key(), binding.frameworkType()),
+                componentImplementation.name())
             .codeBlock(),
-        frameworkDependency.frameworkClass());
+        binding.frameworkType().frameworkClass());
   }
 }
diff --git a/java/dagger/internal/codegen/MapFactoryCreationExpression.java b/java/dagger/internal/codegen/MapFactoryCreationExpression.java
index 0fff44b87..30eb2b540 100644
--- a/java/dagger/internal/codegen/MapFactoryCreationExpression.java
+++ b/java/dagger/internal/codegen/MapFactoryCreationExpression.java
@@ -20,9 +20,9 @@
 import static dagger.internal.codegen.MapKeys.getMapKeyExpression;
 import static dagger.internal.codegen.SourceFiles.mapFactoryClassName;
 
-import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.squareup.javapoet.CodeBlock;
+import dagger.model.DependencyRequest;
 import dagger.producers.Produced;
 import dagger.producers.Producer;
 import javax.inject.Provider;
@@ -67,19 +67,18 @@ public CodeBlock creationExpression() {
       builder.add("<$T, $T>", mapType.keyType(), valueType);
     }
 
-    ImmutableList<FrameworkDependency> frameworkDependencies = binding.frameworkDependencies();
-    builder.add("builder($L)", frameworkDependencies.size());
+    builder.add("builder($L)", binding.dependencies().size());
 
     superContributions()
         .ifPresent(superContributions -> builder.add(".putAll($L)", superContributions));
 
-    for (FrameworkDependency frameworkDependency : frameworkDependenciesToImplement()) {
+    for (DependencyRequest dependency : dependenciesToImplement()) {
       ContributionBinding contributionBinding =
-          graph.contributionBindings().get(frameworkDependency.key()).contributionBinding();
+          graph.contributionBindings().get(dependency.key()).contributionBinding();
       builder.add(
           ".put($L, $L)",
           getMapKeyExpression(contributionBinding, componentImplementation.name(), elements),
-          multibindingDependencyExpression(frameworkDependency));
+          multibindingDependencyExpression(dependency));
     }
     builder.add(".build()");
 
diff --git a/java/dagger/internal/codegen/MultibindingFactoryCreationExpression.java b/java/dagger/internal/codegen/MultibindingFactoryCreationExpression.java
index 43e69785a..bc47fe117 100644
--- a/java/dagger/internal/codegen/MultibindingFactoryCreationExpression.java
+++ b/java/dagger/internal/codegen/MultibindingFactoryCreationExpression.java
@@ -23,6 +23,7 @@
 import com.squareup.javapoet.CodeBlock;
 import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import dagger.internal.codegen.ModifiableBindingMethods.ModifiableBindingMethod;
+import dagger.model.DependencyRequest;
 import dagger.model.Key;
 import java.util.Optional;
 
@@ -43,28 +44,29 @@
   }
 
   /** Returns the expression for a dependency of this multibinding. */
-  protected final CodeBlock multibindingDependencyExpression(
-      FrameworkDependency frameworkDependency) {
+  protected final CodeBlock multibindingDependencyExpression(DependencyRequest dependency) {
     CodeBlock expression =
         componentBindingExpressions
             .getDependencyExpression(
-                BindingRequest.bindingRequest(frameworkDependency), componentImplementation.name())
+                BindingRequest.bindingRequest(dependency.key(), binding.frameworkType()),
+                componentImplementation.name())
             .codeBlock();
+
     return useRawType()
-        ? CodeBlocks.cast(expression, frameworkDependency.frameworkClass())
+        ? CodeBlocks.cast(expression, binding.frameworkType().frameworkClass())
         : expression;
   }
 
-  protected final ImmutableSet<FrameworkDependency> frameworkDependenciesToImplement() {
+  protected final ImmutableSet<DependencyRequest> dependenciesToImplement() {
     ImmutableSet<Key> alreadyImplementedKeys =
         componentImplementation.superclassContributionsMade(bindingRequest());
-    return binding.frameworkDependencies().stream()
-        .filter(frameworkDependency -> !alreadyImplementedKeys.contains(frameworkDependency.key()))
+    return binding.dependencies().stream()
+        .filter(dependency -> !alreadyImplementedKeys.contains(dependency.key()))
         .collect(toImmutableSet());
   }
 
   protected Optional<CodeBlock> superContributions() {
-    if (frameworkDependenciesToImplement().size() == binding.frameworkDependencies().size()) {
+    if (dependenciesToImplement().size() == binding.dependencies().size()) {
       return Optional.empty();
     }
     ModifiableBindingMethod superMethod =
@@ -74,9 +76,7 @@ protected final CodeBlock multibindingDependencyExpression(
 
   /** The binding request for this framework instance. */
   protected final BindingRequest bindingRequest() {
-    return BindingRequest.bindingRequest(
-        binding.key(),
-        binding instanceof ProvisionBinding ? FrameworkType.PROVIDER : FrameworkType.PRODUCER_NODE);
+    return BindingRequest.bindingRequest(binding.key(), binding.frameworkType());
   }
 
   /**
diff --git a/java/dagger/internal/codegen/OptionalFactoryInstanceCreationExpression.java b/java/dagger/internal/codegen/OptionalFactoryInstanceCreationExpression.java
index 9d53c0ec4..ba9e25f0f 100644
--- a/java/dagger/internal/codegen/OptionalFactoryInstanceCreationExpression.java
+++ b/java/dagger/internal/codegen/OptionalFactoryInstanceCreationExpression.java
@@ -52,7 +52,8 @@ public CodeBlock creationExpression() {
             binding,
             componentBindingExpressions
                 .getDependencyExpression(
-                    bindingRequest(getOnlyElement(binding.frameworkDependencies())),
+                    bindingRequest(
+                        getOnlyElement(binding.dependencies()).key(), binding.frameworkType()),
                     componentImplementation.name())
                 .codeBlock());
   }
diff --git a/java/dagger/internal/codegen/SetFactoryCreationExpression.java b/java/dagger/internal/codegen/SetFactoryCreationExpression.java
index d69f4a29b..971209170 100644
--- a/java/dagger/internal/codegen/SetFactoryCreationExpression.java
+++ b/java/dagger/internal/codegen/SetFactoryCreationExpression.java
@@ -20,6 +20,7 @@
 import static dagger.internal.codegen.SourceFiles.setFactoryClassName;
 
 import com.squareup.javapoet.CodeBlock;
+import dagger.model.DependencyRequest;
 import dagger.producers.Produced;
 import java.util.Optional;
 
@@ -69,9 +70,9 @@ public CodeBlock creationExpression() {
       setProviders++;
     }
 
-    for (FrameworkDependency frameworkDependency : frameworkDependenciesToImplement()) {
+    for (DependencyRequest dependency : dependenciesToImplement()) {
       ContributionType contributionType =
-          graph.contributionBindings().get(frameworkDependency.key()).contributionType();
+          graph.contributionBindings().get(dependency.key()).contributionType();
       String methodNamePrefix;
       switch (contributionType) {
         case SET:
@@ -83,14 +84,14 @@ public CodeBlock creationExpression() {
           methodNamePrefix = "addCollection";
           break;
         default:
-          throw new AssertionError(frameworkDependency + " is not a set multibinding");
+          throw new AssertionError(dependency + " is not a set multibinding");
       }
 
       builderMethodCalls.add(
           ".$N$N($L)",
           methodNamePrefix,
           methodNameSuffix,
-          multibindingDependencyExpression(frameworkDependency));
+          multibindingDependencyExpression(dependency));
     }
     builder.add("builder($L, $L)", individualProviders, setProviders);
     builder.add(builderMethodCalls.build());
