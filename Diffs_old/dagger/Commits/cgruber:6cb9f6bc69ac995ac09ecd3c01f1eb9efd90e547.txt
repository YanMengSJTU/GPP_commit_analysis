diff --git a/java/dagger/internal/codegen/ComponentTreeTraverser.java b/java/dagger/internal/codegen/ComponentTreeTraverser.java
index 98896f4de..545ec9922 100644
--- a/java/dagger/internal/codegen/ComponentTreeTraverser.java
+++ b/java/dagger/internal/codegen/ComponentTreeTraverser.java
@@ -19,6 +19,7 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkState;
 import static com.google.common.base.Verify.verify;
+import static dagger.internal.codegen.DaggerStreams.toImmutableList;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterators;
@@ -42,6 +43,9 @@
   /** The path from the root graph to the currently visited graph. */
   private final Deque<BindingGraph> bindingGraphPath = new ArrayDeque<>();
 
+  /** The {@link ComponentPath} for each component in {@link #bindingGraphPath}. */
+  private final Deque<ComponentPath> componentPaths = new ArrayDeque<>();
+
   /** Constructs a traverser for a root (component, not subcomponent) binding graph. */
   public ComponentTreeTraverser(BindingGraph rootGraph, CompilerOptions compilerOptions) {
     checkArgument(
@@ -50,6 +54,7 @@ public ComponentTreeTraverser(BindingGraph rootGraph, CompilerOptions compilerOp
         "only root graphs can be traversed, not %s",
         rootGraph.componentTypeElement().getQualifiedName());
     bindingGraphPath.add(rootGraph);
+    componentPaths.add(ComponentPath.create(ImmutableList.of(rootGraph.componentTypeElement())));
   }
 
   /**
@@ -59,6 +64,7 @@ public ComponentTreeTraverser(BindingGraph rootGraph, CompilerOptions compilerOp
    */
   public final void traverseComponents() {
     checkState(bindingGraphPath.size() == 1);
+    checkState(componentPaths.size() == 1);
     visitComponent(bindingGraphPath.getFirst());
   }
 
@@ -101,10 +107,17 @@ protected void visitComponent(BindingGraph graph) {
 
     for (BindingGraph child : graph.subgraphs()) {
       bindingGraphPath.addLast(child);
+      ComponentPath childPath =
+          ComponentPath.create(
+              bindingGraphPath.stream()
+                  .map(BindingGraph::componentTypeElement)
+                  .collect(toImmutableList()));
+      componentPaths.addLast(childPath);
       try {
         visitComponent(child);
       } finally {
         verify(bindingGraphPath.removeLast().equals(child));
+        verify(componentPaths.removeLast().equals(childPath));
       }
     }
   }
@@ -140,11 +153,7 @@ protected void visitEntryPoint(DependencyRequest entryPoint, BindingGraph graph)
    * component.
    */
   protected final ComponentPath componentPath() {
-    ImmutableList.Builder<TypeElement> path = ImmutableList.builder();
-    for (BindingGraph graph : bindingGraphPath) {
-      path.add(graph.componentTypeElement());
-    }
-    return ComponentPath.create(path.build());
+    return componentPaths.getLast();
   }
 
   /**
@@ -152,11 +161,9 @@ protected final ComponentPath componentPath() {
    * component.
    */
   protected final ComponentPath pathFromRootToAncestor(TypeElement ancestor) {
-    ImmutableList.Builder<TypeElement> path = ImmutableList.builder();
-    for (TypeElement component : componentPath().components()) {
-      path.add(component);
-      if (component.equals(ancestor)) {
-        return ComponentPath.create(path.build());
+    for (ComponentPath componentPath : componentPaths) {
+      if (componentPath.currentComponent().equals(ancestor)) {
+        return componentPath;
       }
     }
     throw new IllegalArgumentException(
diff --git a/java/dagger/model/ComponentPath.java b/java/dagger/model/ComponentPath.java
index 6bcbc9dfd..5a74c7a51 100644
--- a/java/dagger/model/ComponentPath.java
+++ b/java/dagger/model/ComponentPath.java
@@ -21,6 +21,7 @@
 import static java.util.stream.Collectors.joining;
 
 import com.google.auto.value.AutoValue;
+import com.google.auto.value.extension.memoized.Memoized;
 import com.google.common.collect.ImmutableList;
 import javax.lang.model.element.TypeElement;
 
@@ -47,7 +48,8 @@ public final TypeElement rootComponent() {
   }
 
   /** Returns the component at the end of the path. */
-  public final TypeElement currentComponent() {
+  @Memoized
+  public TypeElement currentComponent() {
     return getLast(components());
   }
 
@@ -66,6 +68,7 @@ public final TypeElement parentComponent() {
    *
    * @throws IllegalStateException if the current graph is the {@linkplain #atRoot() root component}
    */
+  // TODO(ronshapiro): consider memoizing this
   public final ComponentPath parent() {
     checkState(!atRoot());
     return create(components().subList(0, components().size() - 1));
@@ -88,4 +91,11 @@ public final boolean atRoot() {
   public final String toString() {
     return components().stream().map(TypeElement::getQualifiedName).collect(joining(" â†’ "));
   }
+
+  @Memoized
+  @Override
+  public abstract int hashCode();
+
+  @Override
+  public abstract boolean equals(Object obj);
 }
