diff --git a/java/dagger/internal/codegen/BindingExpression.java b/java/dagger/internal/codegen/BindingExpression.java
index a6e05025b..9ac6edc7f 100644
--- a/java/dagger/internal/codegen/BindingExpression.java
+++ b/java/dagger/internal/codegen/BindingExpression.java
@@ -73,8 +73,6 @@ CodeBlock getModifiableBindingMethodImplementation(
       ComponentImplementation component,
       DaggerTypes types) {
     Expression dependencyExpression = getDependencyExpression(component.name());
-    BindingRequest request = modifiableBindingMethod.request();
-    TypeMirror requestedType = request.requestedType(request.key().type(), types);
 
     // It's possible to have a case where a modifiable component method delegates to another
     // binding method from an enclosing class that is not itself a component method. In that case,
@@ -100,12 +98,10 @@ CodeBlock getModifiableBindingMethodImplementation(
     //
     // This isn't necessary for getComponentMethodImplementation() because that's only used for
     // non-modifiable bindings
-    if (!types.isAssignable(dependencyExpression.type(), requestedType)
-        // TODO(ronshapiro): perhaps instead of needing to compute the requested type and then check
-        // for assignablility, ModifiableBindingMethod should have a TypeMirror property for the
-        // return type
-        && isTypeAccessibleFrom(requestedType, component.name().packageName())) {
-      dependencyExpression = dependencyExpression.castTo(requestedType);
+    TypeMirror returnType = modifiableBindingMethod.returnType();
+    if (!types.isAssignable(dependencyExpression.type(), returnType)
+       && isTypeAccessibleFrom(returnType, component.name().packageName())) {
+      dependencyExpression = dependencyExpression.castTo(returnType);
     }
 
     return CodeBlock.of("return $L;", dependencyExpression.codeBlock());
diff --git a/java/dagger/internal/codegen/BindingMethodImplementation.java b/java/dagger/internal/codegen/BindingMethodImplementation.java
index 387aa6658..9fc28d031 100644
--- a/java/dagger/internal/codegen/BindingMethodImplementation.java
+++ b/java/dagger/internal/codegen/BindingMethodImplementation.java
@@ -78,19 +78,10 @@ final TypeMirror returnType() {
       return binding.contributedPrimitiveType().get();
     }
 
-    TypeMirror requestedType = request.requestedType(binding.contributedType(), types);
-
     if (matchingComponentMethod().isPresent()) {
       // Component methods are part of the user-defined API, and thus we must use the user-defined
-      // type. If the return type of the method is a primitive, use that since the key type is 
-      // always boxed. We still use the requestedType if the return type is not a primitive, as
-      // opposed to componentMethodReturnType, since that will have all type variables from
-      // component supertypes resolved.
-      TypeMirror componentMethodReturnType =
-          matchingComponentMethod().get().methodElement().getReturnType();
-      return componentMethodReturnType.getKind().isPrimitive()
-          ? componentMethodReturnType
-          : requestedType;
+      // type.
+      return matchingComponentMethod().get().resolvedReturnType(types);
     }
 
     // If the component is abstract, this method may be overridden by another implementation in a
@@ -98,6 +89,7 @@ final TypeMirror returnType() {
     // overridable, we use the publicly accessible type. If the type is final, we don't need to 
     // worry about this, and instead just need to check accessibility of the file we're about to
     // write
+    TypeMirror requestedType = request.requestedType(binding.contributedType(), types);
     return component.isAbstract()
         ? types.publiclyAccessibleType(requestedType)
         : types.accessibleType(requestedType, component.name());
diff --git a/java/dagger/internal/codegen/BindingRequest.java b/java/dagger/internal/codegen/BindingRequest.java
index 76f342ac4..85f231ec3 100644
--- a/java/dagger/internal/codegen/BindingRequest.java
+++ b/java/dagger/internal/codegen/BindingRequest.java
@@ -82,14 +82,6 @@ final boolean isRequestKind(RequestKind requestKind) {
     return requestKind.equals(requestKind().orElse(null));
   }
 
-  /**
-   * Returns the {@link Accessibility#isTypePubliclyAccessible(TypeMirror)} publicly accessible
-   * type} of this request.
-   */
-  final TypeMirror publiclyAccessibleRequestType(DaggerTypes types) {
-    return types.publiclyAccessibleType(requestedType(key().type(), types));
-  }
-
   final TypeMirror requestedType(TypeMirror contributedType, DaggerTypes types) {
     if (requestKind().isPresent()) {
       return requestType(requestKind().get(), contributedType, types);
diff --git a/java/dagger/internal/codegen/ComponentDescriptor.java b/java/dagger/internal/codegen/ComponentDescriptor.java
index 6eecaa699..7422149cd 100644
--- a/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -20,6 +20,7 @@
 import static com.google.auto.common.MoreTypes.asTypeElement;
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
+import static com.google.common.base.Preconditions.checkState;
 import static com.google.common.base.Verify.verify;
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static com.google.common.collect.Sets.immutableEnumSet;
@@ -477,6 +478,22 @@ static ComponentMethodDescriptor forSubcomponentBuilder(
         ExecutableElement methodElement) {
       return create(kind, Optional.of(dependencyRequestForBuilder), methodElement);
     }
+
+    /**
+     * Returns the return type of {@link #methodElement()} as resolved in the {@link
+     * ComponentDescriptor#typeElement() component type}. If there are no type variables in the
+     * return type, this is the equivalent of {@code methodElement().getReturnType()}.
+     */
+    TypeMirror resolvedReturnType(DaggerTypes types) {
+      checkState(dependencyRequest().isPresent());
+
+      TypeMirror returnType = methodElement().getReturnType();
+      if (returnType.getKind().isPrimitive() || returnType.getKind().equals(VOID)) {
+        return returnType;
+      }
+      return BindingRequest.bindingRequest(dependencyRequest().get())
+          .requestedType(dependencyRequest().get().key().type(), types);
+    }
   }
 
   enum ComponentMethodKind {
diff --git a/java/dagger/internal/codegen/ComponentImplementation.java b/java/dagger/internal/codegen/ComponentImplementation.java
index 147c4e86e..d7e913338 100644
--- a/java/dagger/internal/codegen/ComponentImplementation.java
+++ b/java/dagger/internal/codegen/ComponentImplementation.java
@@ -379,9 +379,10 @@ void addMethods(MethodSpecKind methodKind, Iterable<MethodSpec> methodSpecs) {
   void addModifiableBindingMethod(
       ModifiableBindingType type,
       BindingRequest request,
+      TypeMirror returnType,
       MethodSpec methodSpec,
       boolean finalized) {
-    modifiableBindingMethods.addMethod(type, request, methodSpec, finalized);
+    modifiableBindingMethods.addMethod(type, request, returnType, methodSpec, finalized);
     methodSpecsMap.put(MethodSpecKind.MODIFIABLE_BINDING_METHOD, methodSpec);
   }
 
@@ -393,9 +394,10 @@ void addModifiableBindingMethod(
   void registerModifiableBindingMethod(
       ModifiableBindingType type,
       BindingRequest request,
+      TypeMirror returnType,
       MethodSpec methodSpec,
       boolean finalized) {
-    modifiableBindingMethods.addMethod(type, request, methodSpec, finalized);
+    modifiableBindingMethods.addMethod(type, request, returnType, methodSpec, finalized);
   }
 
   /** Adds the implementation for the given {@link ModifiableBindingMethod} to the component. */
diff --git a/java/dagger/internal/codegen/ModifiableAbstractMethodBindingExpression.java b/java/dagger/internal/codegen/ModifiableAbstractMethodBindingExpression.java
index e9e2787d6..2dd875d3b 100644
--- a/java/dagger/internal/codegen/ModifiableAbstractMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/ModifiableAbstractMethodBindingExpression.java
@@ -91,6 +91,7 @@ private void addUnimplementedMethod() {
       componentImplementation.addModifiableBindingMethod(
           modifiableBindingType,
           request,
+          returnType,
           MethodSpec.methodBuilder(methodName.get())
               .addModifiers(PROTECTED, ABSTRACT)
               .returns(TypeName.get(returnType))
@@ -115,13 +116,11 @@ private static TypeMirror returnType(
       BindingRequest bindingRequest,
       Optional<ComponentMethodDescriptor> matchingComponentMethod,
       DaggerTypes types) {
-    TypeMirror requestedType = bindingRequest.requestedType(bindingRequest.key().type(), types);
     if (matchingComponentMethod.isPresent()) {
-      TypeMirror returnType =
-          matchingComponentMethod.get().dependencyRequest().get().requestElement().get().asType();
-      return returnType.getKind().isPrimitive() ? returnType : requestedType;
+      return matchingComponentMethod.get().resolvedReturnType(types);
     }
 
+    TypeMirror requestedType = bindingRequest.requestedType(bindingRequest.key().type(), types);
     return types.publiclyAccessibleType(requestedType);
   }
 
diff --git a/java/dagger/internal/codegen/ModifiableBindingExpressions.java b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
index 854e08545..ebddd49e6 100644
--- a/java/dagger/internal/codegen/ModifiableBindingExpressions.java
+++ b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
@@ -72,6 +72,7 @@ ModifiableBindingType registerComponentMethodIfModifiable(
       componentImplementation.registerModifiableBindingMethod(
           modifiableBindingType,
           request,
+          componentMethod.resolvedReturnType(types),
           method,
           newModifiableBindingWillBeFinalized(modifiableBindingType, request));
     }
diff --git a/java/dagger/internal/codegen/ModifiableBindingMethods.java b/java/dagger/internal/codegen/ModifiableBindingMethods.java
index d83a5fc9b..6183ae4d9 100644
--- a/java/dagger/internal/codegen/ModifiableBindingMethods.java
+++ b/java/dagger/internal/codegen/ModifiableBindingMethods.java
@@ -20,7 +20,9 @@
 import static com.google.common.base.Preconditions.checkState;
 import static dagger.internal.codegen.DaggerStreams.toImmutableList;
 
+import com.google.auto.common.MoreTypes;
 import com.google.auto.value.AutoValue;
+import com.google.common.base.Equivalence;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -28,6 +30,7 @@
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
+import javax.lang.model.type.TypeMirror;
 
 /**
  * A registry for those methods which each wrap a binding whose definition may be modified across
@@ -44,12 +47,17 @@
 
   /** Register a method encapsulating a modifiable binding. */
   void addMethod(
-      ModifiableBindingType type, BindingRequest request, MethodSpec method, boolean finalized) {
+      ModifiableBindingType type,
+      BindingRequest request,
+      TypeMirror returnType,
+      MethodSpec method,
+      boolean finalized) {
     checkArgument(type.isModifiable());
     if (finalized) {
       finalizedMethods.add(request);
     }
-    methods.put(request, ModifiableBindingMethod.create(type, request, method, finalized));
+    methods.put(
+        request, ModifiableBindingMethod.create(type, request, returnType, method, finalized));
   }
 
   /** Returns all {@link ModifiableBindingMethod}s that have not been marked as finalized. */
@@ -88,23 +96,34 @@ boolean finalized(ModifiableBindingMethod method) {
     private static ModifiableBindingMethod create(
         ModifiableBindingType type,
         BindingRequest request,
+        TypeMirror returnType,
         MethodSpec methodSpec,
         boolean finalized) {
       return new AutoValue_ModifiableBindingMethods_ModifiableBindingMethod(
-          type, request, methodSpec, finalized);
+          type, request, MoreTypes.equivalence().wrap(returnType), methodSpec, finalized);
     }
 
     /** Create a {@ModifiableBindingMethod} representing an implementation of an existing method. */
     static ModifiableBindingMethod implement(
         ModifiableBindingMethod unimplementedMethod, MethodSpec methodSpec, boolean finalized) {
       return new AutoValue_ModifiableBindingMethods_ModifiableBindingMethod(
-          unimplementedMethod.type(), unimplementedMethod.request(), methodSpec, finalized);
+          unimplementedMethod.type(),
+          unimplementedMethod.request(),
+          unimplementedMethod.returnTypeWrapper(),
+          methodSpec,
+          finalized);
     }
 
     abstract ModifiableBindingType type();
 
     abstract BindingRequest request();
 
+    final TypeMirror returnType() {
+      return returnTypeWrapper().get();
+    }
+
+    abstract Equivalence.Wrapper<TypeMirror> returnTypeWrapper();
+
     abstract MethodSpec methodSpec();
 
     abstract boolean finalized();
diff --git a/java/dagger/internal/codegen/ModifiableConcreteMethodBindingExpression.java b/java/dagger/internal/codegen/ModifiableConcreteMethodBindingExpression.java
index 429cd5ec0..e3583430b 100644
--- a/java/dagger/internal/codegen/ModifiableConcreteMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/ModifiableConcreteMethodBindingExpression.java
@@ -72,6 +72,7 @@ protected void addMethod() {
     componentImplementation.addModifiableBindingMethod(
         modifiableBindingType,
         request,
+        methodImplementation.returnType(),
         methodBuilder(methodName.get())
             .addModifiers(bindingCannotBeModified ? PRIVATE : PROTECTED)
             .returns(TypeName.get(methodImplementation.returnType()))
