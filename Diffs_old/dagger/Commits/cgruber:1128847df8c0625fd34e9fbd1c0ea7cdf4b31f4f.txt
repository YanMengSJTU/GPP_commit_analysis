diff --git a/javatests/dagger/functional/cycle/DoubleCheckCycleTest.java b/javatests/dagger/functional/cycle/DoubleCheckCycleTest.java
index 4eaf2d924..868f3d25b 100644
--- a/javatests/dagger/functional/cycle/DoubleCheckCycleTest.java
+++ b/javatests/dagger/functional/cycle/DoubleCheckCycleTest.java
@@ -17,11 +17,17 @@
 package dagger.functional.cycle;
 
 import static com.google.common.truth.Truth.assertThat;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 import static org.junit.Assert.fail;
 
-import dagger.functional.cycle.DoubleCheckCycles.FailingReentrantModule;
-import dagger.functional.cycle.DoubleCheckCycles.NonReentrantModule;
-import dagger.functional.cycle.DoubleCheckCycles.ReentrantModule;
+import dagger.Component;
+import dagger.Module;
+import dagger.Provides;
+import java.lang.annotation.Retention;
+import java.util.concurrent.atomic.AtomicInteger;
+import javax.inject.Provider;
+import javax.inject.Qualifier;
+import javax.inject.Singleton;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -30,47 +36,114 @@
 public class DoubleCheckCycleTest {
   // TODO(b/77916397): Migrate remaining tests in DoubleCheckTest to functional tests in this class.
 
+  /** A qualifier for a reentrant scoped binding. */
+  @Retention(RUNTIME)
+  @Qualifier
+  @interface Reentrant {}
+
+  /** A module to be overridden in each test. */
+  @Module
+  static class OverrideModule {
+    @Provides
+    @Singleton
+    Object provideObject() {
+      throw new IllegalStateException("This method should be overridden in tests");
+    }
+
+    @Provides
+    @Singleton
+    @Reentrant
+    Object provideReentrantObject(@Reentrant Provider<Object> provider) {
+      throw new IllegalStateException("This method should be overridden in tests");
+    }
+  }
+
+  @Singleton
+  @Component(modules = OverrideModule.class)
+  interface TestComponent {
+    Object getObject();
+    @Reentrant Object getReentrantObject();
+  }
+
   @Test
   public void testNonReentrant() {
-    NonReentrantModule module = new NonReentrantModule();
-    DoubleCheckCycles.TestComponent component =
-        DaggerDoubleCheckCycles_TestComponent.builder().nonReentrantModule(module).build();
-
-    assertThat(module.callCount).isEqualTo(0);
-    Object first = component.getNonReentrant();
-    assertThat(module.callCount).isEqualTo(1);
-    Object second = component.getNonReentrant();
-    assertThat(module.callCount).isEqualTo(1);
+    AtomicInteger callCount = new AtomicInteger(0);
+
+    // Provides a non-reentrant binding. The provides method should only be called once.
+    DoubleCheckCycleTest.TestComponent component =
+        DaggerDoubleCheckCycleTest_TestComponent.builder()
+            .overrideModule(
+                new OverrideModule() {
+                  @Override Object provideObject() {
+                    callCount.getAndIncrement();
+                    return new Object();
+                  }
+                })
+            .build();
+
+    assertThat(callCount.get()).isEqualTo(0);
+    Object first = component.getObject();
+    assertThat(callCount.get()).isEqualTo(1);
+    Object second = component.getObject();
+    assertThat(callCount.get()).isEqualTo(1);
     assertThat(first).isSameAs(second);
   }
 
   @Test
   public void testReentrant() {
-    ReentrantModule module = new ReentrantModule();
-    DoubleCheckCycles.TestComponent component =
-        DaggerDoubleCheckCycles_TestComponent.builder().reentrantModule(module).build();
-
-    assertThat(module.callCount).isEqualTo(0);
-    Object first = component.getReentrant();
-    assertThat(module.callCount).isEqualTo(2);
-    Object second = component.getReentrant();
-    assertThat(module.callCount).isEqualTo(2);
+    AtomicInteger callCount = new AtomicInteger(0);
+
+    // Provides a reentrant binding. Even though it's scoped, the provides method is called twice.
+    // In this case, we allow it since the same instance is returned on the second call.
+    DoubleCheckCycleTest.TestComponent component =
+        DaggerDoubleCheckCycleTest_TestComponent.builder()
+            .overrideModule(
+                new OverrideModule() {
+                  @Override Object provideReentrantObject(Provider<Object> provider) {
+                    if (callCount.incrementAndGet() == 1) {
+                      return provider.get();
+                    }
+                    return new Object();
+                  }
+                })
+            .build();
+
+    assertThat(callCount.get()).isEqualTo(0);
+    Object first = component.getReentrantObject();
+    assertThat(callCount.get()).isEqualTo(2);
+    Object second = component.getReentrantObject();
+    assertThat(callCount.get()).isEqualTo(2);
     assertThat(first).isSameAs(second);
   }
 
   @Test
   public void testFailingReentrant() {
-    FailingReentrantModule module = new FailingReentrantModule();
-    DoubleCheckCycles.TestComponent component =
-        DaggerDoubleCheckCycles_TestComponent.builder().failingReentrantModule(module).build();
+    AtomicInteger callCount = new AtomicInteger(0);
+
+    // Provides a failing reentrant binding. Even though it's scoped, the provides method is called
+    // twice. In this case we throw an exception since a different instance is provided on the
+    // second call.
+    DoubleCheckCycleTest.TestComponent component =
+        DaggerDoubleCheckCycleTest_TestComponent.builder()
+            .overrideModule(
+                new OverrideModule() {
+                  @Override Object provideReentrantObject(Provider<Object> provider) {
+                    if (callCount.incrementAndGet() == 1) {
+                      provider.get();
+                      return new Object();
+                    }
+                    return new Object();
+                  }
+                })
+            .build();
 
-    assertThat(module.callCount).isEqualTo(0);
+    assertThat(callCount.get()).isEqualTo(0);
     try {
-      component.getFailingReentrant();
+      component.getReentrantObject();
       fail("Expected IllegalStateException");
     } catch (IllegalStateException e) {
       assertThat(e).hasMessageThat().contains("Scoped provider was invoked recursively");
     }
-    assertThat(module.callCount).isEqualTo(2);
+    assertThat(callCount.get()).isEqualTo(2);
   }
 }
diff --git a/javatests/dagger/functional/cycle/DoubleCheckCycles.java b/javatests/dagger/functional/cycle/DoubleCheckCycles.java
deleted file mode 100644
index bffb9f77c..000000000
--- a/javatests/dagger/functional/cycle/DoubleCheckCycles.java
+++ /dev/null
@@ -1,117 +0,0 @@
-/*
- * Copyright (C) 2017 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.functional.cycle;
-
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-import dagger.Component;
-import dagger.Module;
-import dagger.Provides;
-import java.lang.annotation.Retention;
-import javax.inject.Provider;
-import javax.inject.Qualifier;
-import javax.inject.Singleton;
-
-/**
- * A functional test for scoped providers that recursively call {@link Provider#get()} during
- * construction (b/28829473).
- */
-interface DoubleCheckCycles {
-
-  /** A qualifier for a non-reentrant scoped binding. */
-  @Qualifier
-  @Retention(RUNTIME)
-  @interface NonReentrant {}
-
-  /** Provides a non-reentrant scoped binding. The provides method should only be called once. */
-  @Module
-  final class NonReentrantModule {
-    int callCount;
-
-    @Provides
-    @Singleton
-    @NonReentrant
-    Object provideNonReentrant() {
-      callCount++;
-      return new Object();
-    }
-  }
-
-  /** A qualifier for a reentrant scoped binding. */
-  @Qualifier
-  @Retention(RUNTIME)
-  @interface Reentrant {}
-
-  /**
-   * Provides a reentrant scoped binding. The provides method is actually called twice even though
-   * it's scoped, but we allow this since the same instance is returned both times.
-   */
-  @Module
-  final class ReentrantModule {
-    int callCount;
-
-    @Provides
-    @Singleton
-    @Reentrant
-    Object provideReentrant(@Reentrant Provider<Object> provider) {
-      callCount++;
-      if (callCount == 1) {
-        return provider.get();
-      }
-      return new Object();
-    }
-  }
-
-  /** A qualifier for a failing reentrant scoped binding. */
-  @Qualifier
-  @Retention(RUNTIME)
-  @interface FailingReentrant {}
-
-  /**
-   * Provides a failing reentrant scoped binding. Similar to the other reentrant module, the
-   * provides method is called twice. However, in this case we throw since a different instance is
-   * provided for each call.
-   */
-  @Module
-  final class FailingReentrantModule {
-    int callCount;
-
-    @Provides
-    @Singleton
-    @FailingReentrant
-    Object provideFailingReentrantA(@FailingReentrant Provider<Object> provider) {
-      callCount++;
-      if (callCount == 1) {
-        provider.get();
-        return new Object();
-      }
-      return new Object();
-    }
-  }
-
-  @Singleton
-  @Component(modules = {
-    NonReentrantModule.class,
-    ReentrantModule.class,
-    FailingReentrantModule.class,
-  })
-  interface TestComponent {
-    @NonReentrant Object getNonReentrant();
-    @Reentrant Object getReentrant();
-    @FailingReentrant Object getFailingReentrant();
-  }
-}
