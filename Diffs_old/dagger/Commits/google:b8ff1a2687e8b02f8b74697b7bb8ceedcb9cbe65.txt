diff --git a/producers/src/main/java/dagger/producers/internal/Producers.java b/producers/src/main/java/dagger/producers/internal/Producers.java
index 270338393..c850caa33 100644
--- a/producers/src/main/java/dagger/producers/internal/Producers.java
+++ b/producers/src/main/java/dagger/producers/internal/Producers.java
@@ -17,6 +17,7 @@
 
 import com.google.common.base.Function;
 import com.google.common.collect.ImmutableSet;
+import com.google.common.util.concurrent.FutureFallback;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.ListenableFutureTask;
@@ -51,43 +52,34 @@
   // TODO(user): Document what happens with an InterruptedException after you figure out how to
   // trigger one in a test.
   public static <T> ListenableFuture<Produced<T>> createFutureProduced(ListenableFuture<T> future) {
-    return Futures.catching(
-        Futures.transform(future, Producers.<T>wrapValueInProduced()),
-        Throwable.class,
-        Producers.<T>futureFallbackForProduced());
+    return Futures.withFallback(
+        Futures.transform(future, new Function<T, Produced<T>>() {
+          @Override public Produced<T> apply(final T value) {
+            return new Produced<T>() {
+              @Override public T get() {
+                return value;
+              }
+            };
+          }
+        }), Producers.<T>futureFallbackForProduced());
 
   }
 
-  private static final Function<Object, Produced<Object>> WRAP_VALUE_IN_PRODUCED =
-      new Function<Object, Produced<Object>>() {
-    @Override public Produced<Object> apply(final Object value) {
-      return new Produced<Object>() {
-        @Override public Object get() {
-          return value;
-        }
-      };
-    }
-  };
-
-  @SuppressWarnings({"unchecked", "rawtypes"})  // bivariant implementation
-  private static <T> Function<T, Produced<T>> wrapValueInProduced() {
-    return (Function) WRAP_VALUE_IN_PRODUCED;
-  }
-
-  private static final Function<Throwable, Produced<Object>> FUTURE_FALLBACK_FOR_PRODUCED =
-      new Function<Throwable, Produced<Object>>() {
-    @Override public Produced<Object> apply(final Throwable t) {
-      return new Produced<Object>() {
+  private static final FutureFallback<Produced<Object>> FUTURE_FALLBACK_FOR_PRODUCED =
+      new FutureFallback<Produced<Object>>() {
+    @Override public ListenableFuture<Produced<Object>> create(final Throwable t) {
+      Produced<Object> produced = new Produced<Object>() {
         @Override public Object get() throws ExecutionException {
           throw new ExecutionException(t);
         }
       };
+      return Futures.immediateFuture(produced);
     }
   };
 
   @SuppressWarnings({"unchecked", "rawtypes"})  // bivariant implementation
-  private static <T> Function<Throwable, Produced<T>> futureFallbackForProduced() {
-    return (Function) FUTURE_FALLBACK_FOR_PRODUCED;
+  private static <T> FutureFallback<Produced<T>> futureFallbackForProduced() {
+    return (FutureFallback) FUTURE_FALLBACK_FOR_PRODUCED;
   }
 
   /**
