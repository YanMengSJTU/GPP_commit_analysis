diff --git a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
index a51b66c80..d52a9c849 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
@@ -15,9 +15,7 @@
  */
 package dagger.internal.codegen;
 
-import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
-import com.google.common.base.Joiner;
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
@@ -34,14 +32,12 @@
 import dagger.internal.codegen.writer.MethodWriter;
 import dagger.internal.codegen.writer.ParameterizedTypeName;
 import dagger.internal.codegen.writer.Snippet;
-import dagger.internal.codegen.writer.StringLiteral;
 import dagger.internal.codegen.writer.TypeName;
 import dagger.internal.codegen.writer.TypeNames;
 import dagger.internal.codegen.writer.TypeWriter;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map.Entry;
-import java.util.logging.Logger;
 import javax.annotation.Generated;
 import javax.annotation.processing.Filer;
 import javax.inject.Inject;
@@ -57,7 +53,6 @@
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PUBLIC;
-import static javax.lang.model.element.Modifier.STATIC;
 
 /**
  * Generates {@link Factory} implementations from {@link ProvisionBinding} instances for
@@ -96,9 +91,6 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
 
     final TypeWriter factoryWriter;
     final Optional<ConstructorWriter> constructorWriter;
-    // TODO(gak): stop doing this weird thing with the optional when javawriter lets me put fields
-    // in arbitrary places
-    Optional<FieldWriter> loggerField = Optional.absent();
     switch (binding.factoryCreationStrategy()) {
       case ENUM_INSTANCE:
         EnumWriter enumWriter = writer.addEnum(generatedTypeName.simpleName());
@@ -113,11 +105,6 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
         constructorWriter.get().addModifiers(PUBLIC);
         factoryWriter = classWriter;
         if (binding.bindingKind().equals(PROVISION)) {
-          loggerField = Optional.of(factoryWriter.addField(Logger.class, "logger"));
-          loggerField.get().addModifiers(PRIVATE, STATIC, FINAL);
-          loggerField.get().setInitializer("%s.getLogger(%s.class.getCanonicalName())",
-              ClassName.fromClass(Logger.class), factoryWriter.name());
-
           factoryWriter.addField(binding.bindingTypeElement(), "module")
               .addModifiers(PRIVATE, FINAL);
           constructorWriter.get().addParameter(binding.bindingTypeElement(), "module");
@@ -187,28 +174,15 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
     Snippet parametersSnippet = makeParametersSnippet(parameters);
 
     if (binding.bindingKind().equals(PROVISION)) {
-      TypeMirror providesMethodReturnType =
-          MoreElements.asExecutable(binding.bindingElement()).getReturnType();
-      getMethodWriter.body().addSnippet("%s result = module.%s(%s);",
-          TypeNames.forTypeMirror(providesMethodReturnType),
-          binding.bindingElement().getSimpleName(), parametersSnippet);
-      if (!providesMethodReturnType.getKind().isPrimitive()) {
-        getMethodWriter.body().addSnippet(Joiner.on('\n').join(
-            "if (result == null) {",
-            "  %s.warning(%s);",
-            "}"),
-            loggerField.get().name(),
-            StringLiteral.forValue(String.format(
-                "%s.%s provided null. "
-                    + "This is not allowed and will soon throw a NullPointerException.",
-                    binding.bindingTypeElement().getQualifiedName(),
-                    binding.bindingElement())));
-      }
       if (binding.provisionType().equals(SET)) {
-        getMethodWriter.body().addSnippet("return %s.singleton(result);",
-            ClassName.fromClass(Collections.class));
+        getMethodWriter.body().addSnippet("return %s.singleton(module.%s(%s));",
+            ClassName.fromClass(Collections.class),
+            binding.bindingElement().getSimpleName(),
+            parametersSnippet);
       } else {
-        getMethodWriter.body().addSnippet("return result;");
+        getMethodWriter.body().addSnippet("return module.%s(%s);",
+            binding.bindingElement().getSimpleName(),
+            parametersSnippet);
       }
     } else if (binding.memberInjectionRequest().isPresent()) {
       getMethodWriter.body().addSnippet("%1$s instance = new %1$s(%2$s);",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index cdf270a1d..35cfa5fa2 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -235,13 +235,10 @@
         "package test;",
         "",
         "import dagger.Factory;",
-        "import java.util.logging.Logger;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class TestModule$$ProvideStringFactory implements Factory<String> {",
-        "  private static final Logger logger =",
-        "      Logger.getLogger(TestModule$$ProvideStringFactory.class.getCanonicalName());",
         "  private final TestModule module;",
         "",
         "  public TestModule$$ProvideStringFactory(TestModule module) {",
@@ -250,13 +247,7 @@
         "  }",
         "",
         "  @Override public String get() {",
-        "    String result =  module.provideString();",
-        "    if (result == null) {",
-        "      logger.warning("
-            + "\"test.TestModule.provideString() provided null. "
-            + "This is not allowed and will soon throw a NullPointerException.\");",
-        "    }",
-        "    return result;",
+        "    return module.provideString();",
         "  }",
         "}");
     assert_().about(javaSource()).that(moduleFile)
@@ -310,14 +301,11 @@
         "",
         "import dagger.Factory;",
         "import java.util.List;",
-        "import java.util.logging.Logger;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class TestModule$$ProvideObjectsFactory implements Factory<List<Object>> {",
-        "  private static final Logger logger =",
-        "      Logger.getLogger(TestModule$$ProvideObjectsFactory.class.getCanonicalName());",
         "  private final TestModule module;",
         "  private final Provider<Object> aProvider;",
         "  private final Provider<Object> bProvider;",
@@ -333,13 +321,7 @@
         "  }",
         "",
         "  @Override public List<Object> get() {",
-        "    List<Object> result = module.provideObjects(aProvider.get(), bProvider.get());",
-        "    if (result == null) {",
-        "      logger.warning("
-            + "\"test.TestModule.provideObjects(java.lang.Object,java.lang.Object) provided null. "
-            + "This is not allowed and will soon throw a NullPointerException.\");",
-        "    }",
-        "    return result;",
+        "    return module.provideObjects(aProvider.get(), bProvider.get());",
         "  }",
         "}");
     assert_().about(javaSources()).that(ImmutableList.of(moduleFile, QUALIFIER_A, QUALIFIER_B))
@@ -370,13 +352,10 @@
         "import dagger.Factory;",
         "import java.util.Collections;",
         "import java.util.Set;",
-        "import java.util.logging.Logger;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class TestModule$$ProvideStringFactory implements Factory<Set<String>> {",
-        "  private static final Logger logger =",
-        "      Logger.getLogger(TestModule$$ProvideStringFactory.class.getCanonicalName());",
         "  private final TestModule module;",
         "",
         "  public TestModule$$ProvideStringFactory(TestModule module) {",
@@ -385,13 +364,7 @@
         "  }",
         "",
         "  @Override public Set<String> get() {",
-        "    String result =  module.provideString();",
-        "    if (result == null) {",
-        "      logger.warning("
-            + "\"test.TestModule.provideString() provided null. "
-            + "This is not allowed and will soon throw a NullPointerException.\");",
-        "    }",
-        "    return Collections.singleton(result);",
+        "    return Collections.singleton(module.provideString());",
         "  }",
         "}");
     assert_().about(javaSource()).that(moduleFile)
@@ -421,13 +394,10 @@
         "",
         "import dagger.Factory;",
         "import java.util.Set;",
-        "import java.util.logging.Logger;",
         "import javax.annotation.Generated;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
         "public final class TestModule$$ProvideStringsFactory implements Factory<Set<String>> {",
-        "  private static final Logger logger =",
-        "      Logger.getLogger(TestModule$$ProvideStringsFactory.class.getCanonicalName());",
         "  private final TestModule module;",
         "",
         "  public TestModule$$ProvideStringsFactory(TestModule module) {",
@@ -436,13 +406,7 @@
         "  }",
         "",
         "  @Override public Set<String> get() {",
-        "    Set<String> result = module.provideStrings();",
-        "    if (result == null) {",
-        "      logger.warning("
-            + "\"test.TestModule.provideStrings() provided null. "
-            + "This is not allowed and will soon throw a NullPointerException.\");",
-        "    }",
-        "    return result;",
+        "    return module.provideStrings();",
         "  }",
         "}");
     assert_().about(javaSource()).that(moduleFile)
