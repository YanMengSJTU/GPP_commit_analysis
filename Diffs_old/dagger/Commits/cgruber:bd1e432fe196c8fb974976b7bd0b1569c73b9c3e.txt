diff --git a/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java b/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java
index 07ce587c5..b57fcb3a1 100644
--- a/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java
@@ -140,16 +140,22 @@
             "  }",
             "}");
     assertAbout(javaSources())
-        .that(ImmutableList.of(
-            noDepClassFile,
-            publicClassFile,
-            nonPublicClass1File,
-            nonPublicClass2File,
-            componentFile))
-        .withCompilerOptions("-Xlint:-processing", "-Xlint:rawtypes", "-Xlint:unchecked", "-Werror")
+        .that(
+            ImmutableList.of(
+                noDepClassFile,
+                publicClassFile,
+                nonPublicClass1File,
+                nonPublicClass2File,
+                componentFile))
+        .withCompilerOptions(
+            "-Xlint:-processing",
+            "-Xlint:rawtypes",
+            "-Xlint:unchecked",
+            "-Werror")
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
-        .and().generatesSources(generatedComponent);
+        .and()
+        .generatesSources(generatedComponent);
   }
 
   @Test public void memberInjectedType() {
@@ -253,16 +259,17 @@
             "  }",
             "}");
     assertAbout(javaSources())
-        .that(ImmutableList.of(
-            noDepClassFile,
-            aClassFile,
-            bClassFile,
-            cClassFile,
-            dClassFile,
-            componentFile))
-        .withCompilerOptions("-Xlint:-processing", "-Xlint:rawtypes", "-Xlint:unchecked", "-Werror")
+        .that(
+            ImmutableList.of(
+                noDepClassFile, aClassFile, bClassFile, cClassFile, dClassFile, componentFile))
+        .withCompilerOptions(
+            "-Xlint:-processing",
+            "-Xlint:rawtypes",
+            "-Xlint:unchecked",
+            "-Werror")
         .processedWith(new ComponentProcessor())
         .compilesWithoutError()
-        .and().generatesSources(generatedComponent);
+        .and()
+        .generatesSources(generatedComponent);
   }
 }
