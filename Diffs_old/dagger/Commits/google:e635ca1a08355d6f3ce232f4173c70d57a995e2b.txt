diff --git a/java/dagger/internal/codegen/ComponentRequirementExpressions.java b/java/dagger/internal/codegen/ComponentRequirementExpressions.java
index 03bdb36f3..1b22b6cf7 100644
--- a/java/dagger/internal/codegen/ComponentRequirementExpressions.java
+++ b/java/dagger/internal/codegen/ComponentRequirementExpressions.java
@@ -323,11 +323,15 @@ public CodeBlock getExpression(ClassName requestingClass) {
 
     @Override
     public CodeBlock getModifiableModuleMethodExpression(ClassName requestingClass) {
-      return CodeBlock.of(
-          "throw new UnsupportedOperationException($T.class + $S)",
-          module.typeElement(),
-          " has been pruned from the final resolved binding graph. If this exception is thrown, "
-              + "it is a Dagger bug, so please report it!");
+      return CodeBlock.builder()
+          .add(
+              "// $L has been pruned from the final resolved binding graph. The result of this "
+                  + "method should never be used, but it may be called in an initialize() method "
+                  + "when creating a framework instance of a now-pruned binding. Those framework "
+                  + "instances should never be used.\n",
+              module.typeElement())
+          .add("return null")
+          .build();
     }
   }
 }
diff --git a/javatests/dagger/functional/aot/PrunedFrameworkInstanceWithModuleInstanceTest.java b/javatests/dagger/functional/aot/PrunedFrameworkInstanceWithModuleInstanceTest.java
new file mode 100644
index 000000000..f995789bf
--- /dev/null
+++ b/javatests/dagger/functional/aot/PrunedFrameworkInstanceWithModuleInstanceTest.java
@@ -0,0 +1,83 @@
+/*
+ * Copyright (C) 2019 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.aot;
+
+import dagger.Component;
+import dagger.Module;
+import dagger.Provides;
+import dagger.Subcomponent;
+import javax.inject.Inject;
+import javax.inject.Provider;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+@RunWith(JUnit4.class)
+public class PrunedFrameworkInstanceWithModuleInstanceTest {
+  static class Pruned {}
+
+  static class InjectsPruned {
+    @Inject
+    InjectsPruned(Provider<Pruned> pruned) {}
+  }
+
+  @Module
+  static class InstanceStateModule {
+    @Provides
+    /* intentionally not static */ Pruned pruned() {
+      return new Pruned();
+    }
+  }
+
+  @Subcomponent(modules = InstanceStateModule.class)
+  interface LeafWithoutCreator {
+    InjectsPruned injectsPruned();
+  }
+
+  @Subcomponent(modules = InstanceStateModule.class)
+  interface LeafWithCreator {
+    InjectsPruned injectsPruned();
+
+    @Subcomponent.Builder
+    interface Builder {
+      Builder module(InstanceStateModule module);
+      LeafWithCreator build();
+    }
+  }
+
+  @Module
+  interface RootModule {
+    @Provides
+    static InjectsPruned pruneBindingWithInstanceState() {
+      return new InjectsPruned(null);
+    }
+  }
+
+  @Component(modules = RootModule.class)
+  interface Root {
+    LeafWithoutCreator leafWithoutCreator(InstanceStateModule pruned);
+    LeafWithCreator.Builder leafWithCreator();
+  }
+
+  @Test
+  public void prunedBindingWithModuleInstance_doesntThrowDuringInitialization() {
+    Root root = DaggerPrunedFrameworkInstanceWithModuleInstanceTest_Root.create();
+
+    Object unused = root.leafWithoutCreator(new InstanceStateModule()).injectsPruned();
+    unused = root.leafWithCreator().module(new InstanceStateModule()).build().injectsPruned();
+  }
+}
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 3e120df62..37f0ded14 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -4704,9 +4704,6 @@ public void prunedModuleWithInstanceState() {
             "  Leaf leaf();",
             "}"));
 
-    String exceptionText =
-        " has been pruned from the final resolved binding graph. If this exception is thrown, it "
-            + "is a Dagger bug, so please report it!";
     JavaFileObject generatedRoot =
         JavaFileObjects.forSourceLines(
             "test.DaggerRoot",
@@ -4724,8 +4721,7 @@ public void prunedModuleWithInstanceState() {
             "",
             "    @Override",
             "    protected LeafModule leafModule() {",
-            "      throw new UnsupportedOperationException(",
-            "          LeafModule.class + \"" + exceptionText + "\");",
+            "      return null;",
             "    }",
             "  }",
             "}");
