diff --git a/java/dagger/internal/codegen/FrameworkFieldInitializer.java b/java/dagger/internal/codegen/FrameworkFieldInitializer.java
index a95b461c2..ae81fe58a 100644
--- a/java/dagger/internal/codegen/FrameworkFieldInitializer.java
+++ b/java/dagger/internal/codegen/FrameworkFieldInitializer.java
@@ -218,7 +218,7 @@ private boolean isReplacingSuperclassFrameworkInstance() {
                 superclassImplementation.getModifiableBindingMethod(
                     BindingRequest.bindingRequest(
                         resolvedBindings.key(),
-                        FrameworkType.forBindingType(resolvedBindings.bindingType()))))
+                        isProvider() ? FrameworkType.PROVIDER : FrameworkType.PRODUCER_NODE)))
         .isPresent();
   }
 
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 197ec7e6d..80e621a0b 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -6421,6 +6421,266 @@ public void bindsWithMissingDependency_pruned() {
         .hasSourceEquivalentTo(generatedRoot);
   }
 
+  @Test
+  public void modifiedProducerFromProvider() {
+    ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
+    createAncillaryClasses(filesToCompile, "DependsOnModifiedProducerFromProvider");
+    filesToCompile.add(
+        JavaFileObjects.forSourceLines(
+            "test.LeafModule",
+            "package test;",
+            "",
+            "import dagger.multibindings.IntoSet;",
+            "import dagger.producers.ProducerModule;",
+            "import dagger.producers.Produces;",
+            "import dagger.Provides;",
+            "import java.util.Set;",
+            "",
+            "@ProducerModule",
+            "interface LeafModule {",
+            "  @Produces",
+            "  static DependsOnModifiedProducerFromProvider dependsOnModified(Set<String> set) {",
+            "    return new DependsOnModifiedProducerFromProvider();",
+            "  }",
+            "}"),
+        JavaFileObjects.forSourceLines(
+            "test.Leaf",
+            "package test;",
+            "",
+            "import dagger.producers.Producer;",
+            "import dagger.producers.ProductionSubcomponent;",
+            "import java.util.Set;",
+            "",
+            "@ProductionSubcomponent(modules = LeafModule.class)",
+            "interface Leaf {",
+            "  Producer<DependsOnModifiedProducerFromProvider>",
+            "      dependsOnModifiedProducerFromProvider();",
+            "}"));
+
+    JavaFileObject generatedLeaf =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerLeaf",
+            "package test;",
+            "",
+            "import dagger.producers.Producer;",
+            "import dagger.producers.internal.CancellationListener;",
+            "import dagger.producers.internal.Producers;",
+            "import dagger.producers.monitoring.ProductionComponentMonitor;",
+            "import java.util.Set;",
+            "import java.util.concurrent.Executor;",
+            IMPORT_GENERATED_ANNOTATION,
+            "import javax.inject.Provider;",
+            "",
+            GENERATED_ANNOTATION,
+            "public abstract class DaggerLeaf implements Leaf, CancellationListener {",
+            "  private Producer<DependsOnModifiedProducerFromProvider>",
+            "      dependsOnModifiedProducerFromProviderEntryPoint;",
+            "  private LeafModule_DependsOnModifiedFactory dependsOnModifiedProducer;",
+            "",
+            "  protected DaggerLeaf() {}",
+            "",
+            "  protected void configureInitialization() {",
+            "    initialize();",
+            "  }",
+            "",
+            "  @SuppressWarnings(\"unchecked\")",
+            "  private void initialize() {",
+            "    this.dependsOnModifiedProducer =",
+            "        LeafModule_DependsOnModifiedFactory.create(",
+            "            getProductionImplementationExecutorProvider(),",
+            "            getProductionComponentMonitorProvider(),",
+            "            getSetOfStringProducer());",
+            "    this.dependsOnModifiedProducerFromProviderEntryPoint =",
+            "        Producers.entryPointViewOf(",
+            "            getDependsOnModifiedProducerFromProviderProducer(), this);",
+            "  }",
+            "",
+            "  @Override",
+            "  public Producer<DependsOnModifiedProducerFromProvider> ",
+            "      dependsOnModifiedProducerFromProvider() {",
+            "    return dependsOnModifiedProducerFromProviderEntryPoint;",
+            "  }",
+            "",
+            "  protected abstract Provider<Executor> ",
+            "      getProductionImplementationExecutorProvider();",
+            "",
+            "  protected abstract Provider<ProductionComponentMonitor>",
+            "      getProductionComponentMonitorProvider();",
+            "",
+            "  protected abstract Producer<Set<String>> getSetOfStringProducer();",
+            "",
+            "  protected Producer getDependsOnModifiedProducerFromProviderProducer() {",
+            "    return dependsOnModifiedProducer;",
+            "  }",
+            "",
+            "  @Override",
+            "  public void onProducerFutureCancelled(boolean mayInterruptIfRunning) {",
+            "    Producers.cancel(",
+            "      getDependsOnModifiedProducerFromProviderProducer(), mayInterruptIfRunning);",
+            "  }",
+            "}");
+    Compilation compilation = compile(filesToCompile.build());
+    assertThat(compilation).succeededWithoutWarnings();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerLeaf")
+        .hasSourceEquivalentTo(generatedLeaf);
+
+    filesToCompile.add(
+        JavaFileObjects.forSourceLines(
+            "test.RootModule",
+            "package test;",
+            "",
+            "import dagger.multibindings.IntoSet;",
+            "import dagger.Module;",
+            "import dagger.Provides;",
+            "import dagger.producers.Production;",
+            "import java.util.Set;",
+            "import java.util.concurrent.Executor;",
+            "",
+            "@Module",
+            "interface RootModule {",
+            "  @Provides",
+            "  @IntoSet",
+            "  static String induceModificationInLeaf() {",
+            "    return new String();",
+            "  }",
+            "",
+            "  @Provides",
+            "  @Production",
+            "  static Executor productionExecutor() {",
+            "    return null;",
+            "  }",
+            "}"),
+        JavaFileObjects.forSourceLines(
+            "test.Root",
+            "package test;",
+            "",
+            "import dagger.Component;",
+            "",
+            "@Component(modules = RootModule.class)",
+            "interface Root {",
+            "  Leaf leaf();",
+            "}"));
+    JavaFileObject generatedRoot =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerRoot",
+            "package test;",
+            "",
+            "import dagger.internal.DelegateFactory;",
+            "import dagger.internal.DoubleCheck;",
+            "import dagger.internal.InstanceFactory;",
+            "import dagger.internal.SetFactory;",
+            "import dagger.producers.Producer;",
+            "import dagger.producers.internal.CancellationListener;",
+            "import dagger.producers.internal.DelegateProducer;",
+            "import dagger.producers.internal.Producers;",
+            "import dagger.producers.monitoring.ProductionComponentMonitor;",
+            "import java.util.Set;",
+            "import java.util.concurrent.Executor;",
+            IMPORT_GENERATED_ANNOTATION,
+            "import javax.inject.Provider;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerRoot implements Root {",
+            "  private DaggerRoot(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static Root create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Leaf leaf() {",
+            "    return new LeafImpl();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public Root build() {",
+            "      return new DaggerRoot(this);",
+            "    }",
+            "  }",
+            "",
+            "  protected final class LeafImpl extends DaggerLeaf implements CancellationListener {",
+            "    private Provider<Executor> productionImplementationExecutorProvider =",
+            "        new DelegateFactory<>();",
+            "    private Provider<Leaf> leafProvider;",
+            "    private Provider<ProductionComponentMonitor> monitorProvider =",
+            "        new DelegateFactory<>();",
+            "    private Provider<Set<String>> setOfStringProvider;",
+            "    private Producer<Set<String>> setOfStringProducer = new DelegateProducer<>();",
+            "",
+            "    private LeafImpl() {",
+            "      configureInitialization();",
+            "      initialize();",
+            "    }",
+            "",
+            "    @SuppressWarnings(\"unchecked\")",
+            "    private void initialize() {",
+            "      DelegateFactory productionImplementationExecutorProviderDelegate =",
+            "          (DelegateFactory) productionImplementationExecutorProvider;",
+            "      productionImplementationExecutorProviderDelegate.setDelegatedProvider(",
+            "          DoubleCheck.provider(",
+            "          (Provider) RootModule_ProductionExecutorFactory.create()));",
+            "      this.leafProvider = InstanceFactory.create((Leaf) this);",
+            "      DelegateFactory monitorProviderDelegate = (DelegateFactory) monitorProvider;",
+            "      monitorProviderDelegate.setDelegatedProvider(",
+            "          DoubleCheck.provider(",
+            "              Leaf_MonitoringModule_MonitorFactory.create(",
+            "                  leafProvider, getSetOfFactoryProvider())));",
+            "      this.setOfStringProvider =",
+            "          SetFactory.<String>builder(1, 0)",
+            "              .addProvider(RootModule_InduceModificationInLeafFactory.create())",
+            "              .build();",
+            "      DelegateProducer setOfStringProducerDelegate = ",
+            "          (DelegateProducer) setOfStringProducer;",
+            "      setOfStringProducerDelegate.setDelegatedProducer(",
+            "          Producers.producerFromProvider(getSetOfStringProvider()));",
+            "    }",
+            "",
+            "    @Override",
+            "    protected Provider<Executor> getProductionImplementationExecutorProvider() {",
+            "      return productionImplementationExecutorProvider;",
+            "    }",
+            "",
+            "    protected Provider<Set<ProductionComponentMonitor.Factory>> ",
+            "        getSetOfFactoryProvider() {",
+            "      return SetFactory.<ProductionComponentMonitor.Factory>empty();",
+            "    }",
+            "",
+            "    @Override",
+            "    protected Provider<ProductionComponentMonitor> ",
+            "        getProductionComponentMonitorProvider() {",
+            "      return monitorProvider;",
+            "    }",
+            "",
+            "    protected Provider<Set<String>> getSetOfStringProvider() {",
+            "      return setOfStringProvider;",
+            "    }",
+            "",
+            "    @Override",
+            "    protected Producer<Set<String>> getSetOfStringProducer() {",
+            "      return setOfStringProducer;",
+            "    }",
+            "",
+            "    @Override",
+            "    public void onProducerFutureCancelled(boolean mayInterruptIfRunning) {",
+            "      super.onProducerFutureCancelled(mayInterruptIfRunning);",
+            "      Producers.cancel(getSetOfStringProducer(), mayInterruptIfRunning);",
+            "    }",
+            "  }",
+            "}");
+    compilation = compile(filesToCompile.build());
+    assertThat(compilation).succeededWithoutWarnings();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerRoot")
+        .hasSourceEquivalentTo(generatedRoot);
+  }
+
   private void createAncillaryClasses(
       ImmutableList.Builder<JavaFileObject> filesBuilder, String... ancillaryClasses) {
     for (String className : ancillaryClasses) {
