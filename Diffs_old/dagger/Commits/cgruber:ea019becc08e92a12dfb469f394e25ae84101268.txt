diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index d26365dc8..66203083e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -36,6 +36,7 @@
 import dagger.internal.DelegateFactory;
 import dagger.internal.MapFactory;
 import dagger.internal.MapProviderFactory;
+import dagger.internal.Preconditions;
 import dagger.internal.SetFactory;
 import dagger.internal.codegen.ComponentDescriptor.BuilderSpec;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
@@ -73,12 +74,11 @@
 import static dagger.internal.codegen.AbstractComponentWriter.InitializationState.UNINITIALIZED;
 import static dagger.internal.codegen.AnnotationSpecs.SUPPRESS_WARNINGS_UNCHECKED;
 import static dagger.internal.codegen.CodeBlocks.makeParametersCodeBlock;
-import static dagger.internal.codegen.CodeBlocks.nullCheck;
 import static dagger.internal.codegen.ContributionBinding.FactoryCreationStrategy.ENUM_INSTANCE;
 import static dagger.internal.codegen.ContributionBinding.Kind.PROVISION;
 import static dagger.internal.codegen.ErrorMessages.CANNOT_RETURN_NULL_FROM_NON_NULLABLE_COMPONENT_METHOD;
-import static dagger.internal.codegen.MapKeys.getMapKeyExpression;
 import static dagger.internal.codegen.FrameworkDependency.frameworkDependenciesForBinding;
+import static dagger.internal.codegen.MapKeys.getMapKeyExpression;
 import static dagger.internal.codegen.MemberSelect.emptyFrameworkMapFactory;
 import static dagger.internal.codegen.MemberSelect.emptySetProvider;
 import static dagger.internal.codegen.MemberSelect.localField;
@@ -372,11 +372,13 @@ private void addBuilderMethods(
             parameterNames.getUniqueName(
                 Iterables.getOnlyElement(specMethod.getParameters()).getSimpleName());
         builderMethod.addParameter(ClassName.get(builderMethodType), parameterName);
-        builderMethod.addCode(nullCheck(parameterName));
         if (graph.componentRequirements().contains(builderMethodType)) {
           // required type
           builderMethod.addStatement(
-              "this.$N = $L", builderFields.get(builderMethodType), parameterName);
+              "this.$N = $T.checkNotNull($L)",
+              builderFields.get(builderMethodType),
+              Preconditions.class,
+              parameterName);
           addBuilderMethodReturnStatementForSpec(specMethod, builderMethod);
         } else if (graph.ownedModuleTypes().contains(builderMethodType)) {
           // owned, but not required
@@ -400,12 +402,17 @@ private void addBuilderMethods(
             methodBuilder(componentRequirementName)
                 .returns(builderName.get())
                 .addModifiers(PUBLIC)
-                .addParameter(ClassName.get(componentRequirement), componentRequirementName)
-                .addCode(nullCheck(componentRequirementName));
+                .addParameter(ClassName.get(componentRequirement), componentRequirementName);
         if (graph.componentRequirements().contains(componentRequirement)) {
           builderMethod.addStatement(
-              "this.$N = $L", builderFields.get(componentRequirement), componentRequirementName);
+              "this.$N = $T.checkNotNull($L)",
+              builderFields.get(componentRequirement),
+              Preconditions.class,
+              componentRequirementName);
         } else {
+          builderMethod.addStatement("$T.checkNotNull($L)",
+              Preconditions.class,
+              componentRequirementName);
           builderMethod.addJavadoc("@deprecated " + NOOP_BUILDER_METHOD_JAVADOC);
           builderMethod.addAnnotation(Deprecated.class);
         }
@@ -868,15 +875,8 @@ private CodeBlock initializeFactoryForContributionBinding(ContributionBinding bi
               binding.nullableType().isPresent()
                       || compilerOptions.nullableValidationKind().equals(Diagnostic.Kind.WARNING)
                   ? CodeBlocks.format("return $L;", callFactoryMethod)
-                  : CodeBlocks.format(
-                      Joiner.on('\n')
-                          .join(
-                              "$T provided = $L;",
-                              "if (provided == null) {",
-                              "  throw new NullPointerException($S);",
-                              "}",
-                              "return provided;"),
-                      bindingKeyTypeName,
+                  : CodeBlocks.format("return $T.checkNotNull($L, $S);",
+                      Preconditions.class,
                       callFactoryMethod,
                       CANNOT_RETURN_NULL_FROM_NON_NULLABLE_COMPONENT_METHOD);
           return CodeBlocks.format(
diff --git a/compiler/src/main/java/dagger/internal/codegen/CodeBlocks.java b/compiler/src/main/java/dagger/internal/codegen/CodeBlocks.java
index 626308d79..047f455af 100644
--- a/compiler/src/main/java/dagger/internal/codegen/CodeBlocks.java
+++ b/compiler/src/main/java/dagger/internal/codegen/CodeBlocks.java
@@ -17,7 +17,6 @@
 
 import com.google.common.base.Function;
 import com.google.common.collect.FluentIterable;
-import com.google.common.collect.ImmutableList;
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.ParameterSpec;
 import java.util.Iterator;
@@ -57,10 +56,6 @@ static CodeBlock join(Iterable<CodeBlock> codeBlocks, String delimiter) {
     return builder.build();
   }
 
-  static CodeBlock nullCheck(String thingToCheck) {
-    return format("if ($L == null) { throw new NullPointerException(); } ", thingToCheck);
-  }
-
   static FluentIterable<CodeBlock> toCodeBlocks(Iterable<? extends TypeMirror> typeMirrors) {
     return FluentIterable.from(typeMirrors).transform(TYPE_MIRROR_TO_CODE_BLOCK);
   }
diff --git a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
index e4a5761bb..ce97a2ce3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
@@ -30,6 +30,8 @@
 import com.squareup.javapoet.TypeSpec;
 import com.squareup.javapoet.TypeVariableName;
 import dagger.internal.Factory;
+import dagger.internal.MembersInjectors;
+import dagger.internal.Preconditions;
 import java.util.Collections;
 import java.util.List;
 import javax.annotation.processing.Filer;
@@ -245,22 +247,17 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
         }
         getMethodBuilder.addStatement("return $L", providesMethodInvocation);
       } else {
-        String failMsg = CANNOT_RETURN_NULL_FROM_NON_NULLABLE_PROVIDES_METHOD;
-        getMethodBuilder
-            .addStatement(
-                "$T provided = $L", getMethodBuilder.build().returnType, providesMethodInvocation)
-            .addCode("if (provided == null) { ")
-            .addStatement("throw new $T($S)", NullPointerException.class, failMsg)
-            .addCode("}")
-            .addStatement("return provided");
+        getMethodBuilder.addStatement("return $T.checkNotNull($L, $S)",
+            Preconditions.class,
+            providesMethodInvocation,
+            CANNOT_RETURN_NULL_FROM_NON_NULLABLE_PROVIDES_METHOD);
       }
     } else if (binding.membersInjectionRequest().isPresent()) {
-      getMethodBuilder.addStatement(
-          "$1T instance = new $1T($2L)", providedTypeName, parametersCodeBlock);
-      getMethodBuilder.addStatement(
-          "$L.injectMembers(instance)",
-          fields.get(binding.membersInjectionRequest().get().bindingKey()).name());
-      getMethodBuilder.addStatement("return instance");
+      getMethodBuilder.addStatement("return $T.injectMembers($L, new $T($L))",
+          MembersInjectors.class,
+          fields.get(binding.membersInjectionRequest().get().bindingKey()).name(),
+          providedTypeName,
+          parametersCodeBlock);
     } else {
       getMethodBuilder.addStatement("return new $T($L)", providedTypeName, parametersCodeBlock);
     }
diff --git a/compiler/src/main/java/dagger/internal/codegen/SubcomponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/SubcomponentWriter.java
index 61a7fb638..641fefd7f 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SubcomponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SubcomponentWriter.java
@@ -25,6 +25,7 @@
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
+import dagger.internal.Preconditions;
 import dagger.internal.codegen.ComponentDescriptor.BuilderSpec;
 import java.util.List;
 import java.util.Set;
@@ -41,7 +42,6 @@
 import static com.squareup.javapoet.TypeSpec.classBuilder;
 import static dagger.internal.codegen.AbstractComponentWriter.InitializationState.UNINITIALIZED;
 import static dagger.internal.codegen.CodeBlocks.makeParametersCodeBlock;
-import static dagger.internal.codegen.CodeBlocks.nullCheck;
 import static dagger.internal.codegen.MemberSelect.localField;
 import static dagger.internal.codegen.TypeSpecs.addSupertype;
 import static javax.lang.model.element.Modifier.FINAL;
@@ -184,8 +184,10 @@ private void writeSubcomponentWithoutBuilder(
         String actualModuleName = contributionField.name;
         constructor
             .addParameter(moduleType, actualModuleName)
-            .addCode(nullCheck(actualModuleName))
-            .addStatement("this.$1L = $1L", actualModuleName);
+            .addStatement(
+                "this.$1L = $2T.checkNotNull($1L)",
+                actualModuleName,
+                Preconditions.class);
 
         MemberSelect moduleSelect = localField(name, actualModuleName);
         componentContributionFields.put(moduleTypeElement, moduleSelect);
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
index 05f510121..2a39030b4 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
@@ -130,6 +130,7 @@ public void testUsesBuildAndSetterNames() {
         "test.DaggerTestComponent",
         "package test;",
         "",
+        "import dagger.internal.Preconditions;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
@@ -173,10 +174,7 @@ public void testUsesBuildAndSetterNames() {
         "",
         "    @Override",
         "    public Builder setTestModule(TestModule testModule) {",
-        "      if (testModule == null) {",
-        "        throw new NullPointerException();",
-        "      }",
-        "      this.testModule = testModule;",
+        "      this.testModule = Preconditions.checkNotNull(testModule);",
         "      return this;",
         "    }",
         "  }",
@@ -231,6 +229,7 @@ public void testIgnoresModulesNotInApi() {
         "test.DaggerTestComponent",
         "package test;",
         "",
+        "import dagger.internal.Preconditions;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
@@ -285,10 +284,7 @@ public void testIgnoresModulesNotInApi() {
         "",
         "    @Override",
         "    public Builder testModule1(TestModule1 testModule1) {",
-        "      if (testModule1 == null) {",
-        "        throw new NullPointerException();",
-        "      }",
-        "      this.testModule1 = testModule1;",
+        "      this.testModule1 = Preconditions.checkNotNull(testModule1);",
         "      return this;",
         "    }",
         "  }",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index 8cdbe7441..7cb18f3e5 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -484,6 +484,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "test.DaggerTestComponent",
         "package test;",
         "",
+        "import dagger.internal.Preconditions;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
@@ -531,10 +532,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "    }",
         "",
         "    public Builder testModule(TestModule testModule) {",
-        "      if (testModule == null) {",
-        "        throw new NullPointerException();",
-        "      }",
-        "      this.testModule = testModule;",
+        "      this.testModule = Preconditions.checkNotNull(testModule);",
         "      return this;",
         "    }",
         "  }",
@@ -620,6 +618,7 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "test.DaggerTestComponent",
         "package test;",
         "",
+        "import dagger.internal.Preconditions;",
         "import javax.annotation.Generated;",
         "",
         GENERATED_ANNOTATION,
@@ -647,49 +646,37 @@ private void checkCannotReferToModuleOfType(String moduleType) {
         "",
         "    @Deprecated",
         "    public Builder testModule(TestModule testModule) {",
-        "      if (testModule == null) {",
-        "        throw new NullPointerException();",
-        "      }",
+        "      Preconditions.checkNotNull(testModule)",
         "      return this;",
         "    }",
         "",
         "    @Deprecated",
         "    public Builder parentTestIncluded(ParentTestIncluded parentTestIncluded) {",
-        "      if (parentTestIncluded == null) {",
-        "        throw new NullPointerException();",
-        "      }",
+        "      Preconditions.checkNotNull(parentTestIncluded)",
         "      return this;",
         "    }",
         "",
         "    @Deprecated",
         "    public Builder alwaysIncluded(AlwaysIncluded alwaysIncluded) {",
-        "      if (alwaysIncluded == null) {",
-        "        throw new NullPointerException();",
-        "      }",
+        "      Preconditions.checkNotNull(alwaysIncluded)",
         "      return this;",
         "    }",
         "",
         "    @Deprecated",
         "    public Builder depModule(DepModule depModule) {",
-        "      if (depModule == null) {",
-        "        throw new NullPointerException();",
-        "      }",
+        "      Preconditions.checkNotNull(depModule)",
         "      return this;",
         "    }",
         "",
         "    @Deprecated",
         "    public Builder parentDepIncluded(ParentDepIncluded parentDepIncluded) {",
-        "      if (parentDepIncluded == null) {",
-        "        throw new NullPointerException();",
-        "      }",
+        "      Preconditions.checkNotNull(parentDepIncluded)",
         "      return this;",
         "    }",
         "",
         "    @Deprecated",
         "    public Builder refByDep(RefByDep refByDep) {",
-        "      if (refByDep == null) {",
-        "        throw new NullPointerException();",
-        "      }",
+        "      Preconditions.checkNotNull(refByDep)",
         "      return this;",
         "    }",
         "  }",
@@ -841,6 +828,7 @@ public void subcomponentOmitsInheritedBindings() {
             "",
             "import dagger.internal.MapFactory;",
             "import dagger.internal.MapProviderFactory;",
+            "import dagger.internal.Preconditions;",
             "import dagger.internal.SetFactory;",
             "import java.util.Map;",
             "import java.util.Set;",
@@ -888,10 +876,7 @@ public void subcomponentOmitsInheritedBindings() {
             "    }",
             "",
             "    public Builder parentModule(ParentModule parentModule) {",
-            "      if (parentModule == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.parentModule = parentModule;",
+            "      this.parentModule = Preconditions.checkNotNull(parentModule);",
             "      return this;",
             "    }",
             "  }",
@@ -1011,6 +996,7 @@ public void subcomponentOmitsInheritedBindings() {
             "test.DaggerTestComponent",
             "package test;",
             "",
+            "import dagger.internal.Preconditions;",
             "import dagger.internal.SetFactory;",
             "import java.util.Set;",
             "import javax.annotation.Generated;",
@@ -1068,18 +1054,12 @@ public void subcomponentOmitsInheritedBindings() {
             "    }",
             "",
             "    public Builder emptySetModule(EmptySetModule emptySetModule) {",
-            "      if (emptySetModule == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.emptySetModule = emptySetModule;",
+            "      this.emptySetModule = Preconditions.checkNotNull(emptySetModule);",
             "      return this;",
             "    }",
             "",
             "    public Builder setModule(SetModule setModule) {",
-            "      if (setModule == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.setModule = setModule;",
+            "      this.setModule = Preconditions.checkNotNull(setModule);",
             "      return this;",
             "    }",
             "  }",
@@ -1456,6 +1436,7 @@ public void subcomponentOmitsInheritedBindings() {
         "package test;",
         "",
         "import dagger.internal.Factory;",
+        "import dagger.internal.Preconditions;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
@@ -1478,11 +1459,7 @@ public void subcomponentOmitsInheritedBindings() {
         "    this.aProvider = new Factory<A>() {",
         "      private final AComponent aComponent = builder.aComponent;",
         "      @Override public A get() {",
-        "        A provided = aComponent.a();",
-        "        if (provided == null) {",
-        "          throw new NullPointerException(" + NPE_LITERAL + ");",
-        "        }",
-        "        return provided;",
+        "        return Preconditions.checkNotNull(aComponent.a(), " + NPE_LITERAL + ");",
         "      }",
         "    };",
         "    this.bProvider = B_Factory.create(aProvider);",
@@ -1508,10 +1485,7 @@ public void subcomponentOmitsInheritedBindings() {
         "    }",
         "",
         "    public Builder aComponent(AComponent aComponent) {",
-        "      if (aComponent == null) {",
-        "        throw new NullPointerException();",
-        "      }",
-        "      this.aComponent = aComponent;",
+        "      this.aComponent = Preconditions.checkNotNull(aComponent);",
         "      return this;",
         "    }",
         "  }",
@@ -1570,6 +1544,7 @@ public void subcomponentOmitsInheritedBindings() {
         "test.DaggerTestComponent",
         "package test;",
         "",
+        "import dagger.internal.Preconditions;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
@@ -1625,18 +1600,12 @@ public void subcomponentOmitsInheritedBindings() {
         "    }",
         "",
         "    public Builder testModule(TestModule testModule) {",
-        "      if (testModule == null) {",
-        "        throw new NullPointerException();",
-        "      }",
-        "      this.testModule = testModule;",
+        "      this.testModule = Preconditions.checkNotNull(testModule);",
         "      return this;",
         "    }",
         "",
         "    public Builder testModule(other.test.TestModule testModule) {",
-        "      if (testModule == null) {",
-        "        throw new NullPointerException();",
-        "      }",
-        "      this.testModule2 = testModule;",
+        "      this.testModule2 = Preconditions.checkNotNull(testModule);",
         "      return this;",
         "    }",
         "  }",
diff --git a/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
index de998be5f..a4b796e76 100644
--- a/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
@@ -180,6 +180,7 @@
             "",
             "import dagger.MembersInjector;",
             "import dagger.internal.Factory;",
+            "import dagger.internal.MembersInjectors;",
             "import javax.annotation.Generated;",
             "",
             GENERATED_ANNOTATION,
@@ -194,9 +195,8 @@
             "",
             "  @Override",
             "  public GenericClass<A, B> get() {",
-            "    GenericClass<A, B> instance = new GenericClass<A, B>();",
-            "    genericClassMembersInjector.injectMembers(instance);",
-            "    return instance;",
+            "    return MembersInjectors.injectMembers(",
+            "        genericClassMembersInjector, new GenericClass<A, B>());",
             "  }",
             "",
             "  public static <A, B> Factory<GenericClass<A, B>> create(",
@@ -290,7 +290,7 @@
         .compilesWithoutError()
         .and().generatesSources(expected);
   }
-  
+
   @Test public void boundedGenerics() {
     JavaFileObject file = JavaFileObjects.forSourceLines("test.GenericClass",
         "package test;",
@@ -381,7 +381,7 @@
         "  private final Provider<B> qbProvider;",
         "",
         "  public GenericClass_Factory(Provider<A> aAndA2AndPaAndLaProvider,",
-        "      Provider<A> qaProvider,", 
+        "      Provider<A> qaProvider,",
         "      Provider<String> sAndS2AndPsAndLsProvider,",
         "      Provider<String> qsProvider,",
         "      Provider<B> bAndB2AndPbAndLbProvider,",
@@ -414,7 +414,7 @@
         "      qsProvider.get(),",
         "      DoubleCheckLazy.create(sAndS2AndPsAndLsProvider),",
         "      bAndB2AndPbAndLbProvider.get(),",
-        "      bAndB2AndPbAndLbProvider.get(),", 
+        "      bAndB2AndPbAndLbProvider.get(),",
         "      bAndB2AndPbAndLbProvider,",
         "      qbProvider.get(),",
         "      DoubleCheckLazy.create(bAndB2AndPbAndLbProvider));",
@@ -422,7 +422,7 @@
         "",
         "  public static <A, B> Factory<GenericClass<A, B>> create(",
         "      Provider<A> aAndA2AndPaAndLaProvider,",
-        "      Provider<A> qaProvider,", 
+        "      Provider<A> qaProvider,",
         "      Provider<String> sAndS2AndPsAndLsProvider,",
         "      Provider<String> qsProvider,",
         "      Provider<B> bAndB2AndPbAndLbProvider,",
@@ -537,7 +537,7 @@
         .failsToCompile()
         .withErrorContaining(PRIVATE_INJECT_FIELD).in(file).onLine(6);
   }
-  
+
   @Test public void privateInjectFieldWarning() {
     JavaFileObject file = JavaFileObjects.forSourceLines("test.PrivateInjectField",
         "package test;",
@@ -552,7 +552,7 @@
         .processedWith(new ComponentProcessor())
         .compilesWithoutError(); // TODO: Verify warning message when supported
   }
-  
+
   @Test public void staticInjectFieldError() {
     JavaFileObject file = JavaFileObjects.forSourceLines("test.StaticInjectField",
         "package test;",
@@ -567,7 +567,7 @@
         .failsToCompile()
         .withErrorContaining(STATIC_INJECT_FIELD).in(file).onLine(6);
   }
-  
+
   @Test public void staticInjectFieldWarning() {
     JavaFileObject file = JavaFileObjects.forSourceLines("test.StaticInjectField",
         "package test;",
@@ -627,7 +627,7 @@
         .failsToCompile()
         .withErrorContaining(PRIVATE_INJECT_METHOD).in(file).onLine(6);
   }
-  
+
   @Test public void privateInjectMethodWarning() {
     JavaFileObject file = JavaFileObjects.forSourceLines("test.PrivateInjectMethod",
         "package test;",
@@ -642,7 +642,7 @@
         .processedWith(new ComponentProcessor())
         .compilesWithoutError(); // TODO: Verify warning message when supported
   }
-  
+
   @Test public void staticInjectMethodError() {
     JavaFileObject file = JavaFileObjects.forSourceLines("test.StaticInjectMethod",
         "package test;",
@@ -657,7 +657,7 @@
         .failsToCompile()
         .withErrorContaining(STATIC_INJECT_METHOD).in(file).onLine(6);
   }
-  
+
   @Test public void staticInjectMethodWarning() {
     JavaFileObject file = JavaFileObjects.forSourceLines("test.StaticInjectMethod",
         "package test;",
@@ -859,6 +859,7 @@
             "",
             "import dagger.MembersInjector;",
             "import dagger.internal.Factory;",
+            "import dagger.internal.MembersInjectors;",
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
             "",
@@ -879,9 +880,8 @@
             "  }",
             "",
             "  @Override public AllInjections get() {",
-            "    AllInjections instance = new AllInjections(sProvider.get());",
-            "    allInjectionsMembersInjector.injectMembers(instance);",
-            "    return instance;",
+            "    return MembersInjectors.injectMembers(",
+            "        allInjectionsMembersInjector, new AllInjections(sProvider.get()));",
             "  }",
             "",
             "  public static Factory<AllInjections> create(",
@@ -916,6 +916,7 @@
             "",
             "import dagger.MembersInjector;",
             "import dagger.internal.Factory;",
+            "import dagger.internal.MembersInjectors;",
             "import javax.annotation.Generated;",
             "",
             GENERATED_ANNOTATION,
@@ -929,9 +930,7 @@
             "  }",
             "",
             "  @Override public B get() {",
-            "    B instance = new B();",
-            "    bMembersInjector.injectMembers(instance);",
-            "    return instance;",
+            "    return MembersInjectors.injectMembers(bMembersInjector, new B());",
             "  }",
             "",
             "  public static Factory<B> create(MembersInjector<B> bMembersInjector) {",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 1d70c289d..058c25bf2 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -116,6 +116,7 @@ public void mapBindingsWithEnumKey() {
             "package test;",
             "",
             "import dagger.internal.MapProviderFactory;",
+            "import dagger.internal.Preconditions;",
             "import java.util.Map;",
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
@@ -176,18 +177,12 @@ public void mapBindingsWithEnumKey() {
             "    }",
             "",
             "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-            "      if (mapModuleOne == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.mapModuleOne = mapModuleOne;",
+            "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
             "      return this;",
             "    }",
             "",
             "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-            "      if (mapModuleTwo == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.mapModuleTwo = mapModuleTwo;",
+            "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
             "      return this;",
             "    }",
             "  }",
@@ -276,6 +271,7 @@ public void mapBindingsWithStringKey() {
             "package test;",
             "",
             "import dagger.internal.MapProviderFactory;",
+            "import dagger.internal.Preconditions;",
             "import java.util.Map;",
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
@@ -336,18 +332,12 @@ public void mapBindingsWithStringKey() {
             "    }",
             "",
             "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-            "      if (mapModuleOne == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.mapModuleOne = mapModuleOne;",
+            "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
             "      return this;",
             "    }",
             "",
             "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-            "      if (mapModuleTwo == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.mapModuleTwo = mapModuleTwo;",
+            "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
             "      return this;",
             "    }",
             "  }",
@@ -445,6 +435,7 @@ public void mapBindingsWithWrappedKey() {
             "package test;",
             "",
             "import dagger.internal.MapProviderFactory;",
+            "import dagger.internal.Preconditions;",
             "import java.util.Map;",
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
@@ -507,18 +498,12 @@ public void mapBindingsWithWrappedKey() {
             "    }",
             "",
             "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-            "      if (mapModuleOne == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.mapModuleOne = mapModuleOne;",
+            "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
             "      return this;",
             "    }",
             "",
             "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-            "      if (mapModuleTwo == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.mapModuleTwo = mapModuleTwo;",
+            "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
             "      return this;",
             "    }",
             "  }",
@@ -619,6 +604,7 @@ public void mapBindingsWithNonProviderValue() {
             "",
             "import dagger.internal.MapFactory;",
             "import dagger.internal.MapProviderFactory;",
+            "import dagger.internal.Preconditions;",
             "import java.util.Map;",
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
@@ -682,18 +668,12 @@ public void mapBindingsWithNonProviderValue() {
             "    }",
             "",
             "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-            "      if (mapModuleOne == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.mapModuleOne = mapModuleOne;",
+            "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
             "      return this;",
             "    }",
             "",
             "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-            "      if (mapModuleTwo == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.mapModuleTwo = mapModuleTwo;",
+            "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
             "      return this;",
             "    }",
             "  }",
@@ -743,6 +723,7 @@ public void injectMapWithoutMapBinding() {
     JavaFileObject generatedComponent = JavaFileObjects.forSourceLines("test.DaggerTestComponent",
         "package test;",
         "",
+        "import dagger.internal.Preconditions;",
         "import java.util.Map;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
@@ -788,10 +769,7 @@ public void injectMapWithoutMapBinding() {
         "    }",
         "",
         "    public Builder mapModule(MapModule mapModule) {",
-        "      if (mapModule == null) {",
-        "        throw new NullPointerException();",
-        "      }",
-        "      this.mapModule = mapModule;",
+        "      this.mapModule = Preconditions.checkNotNull(mapModule);",
         "      return this;",
         "    }",
         "  }",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
index 83de1564b..1fbd7fd11 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -209,6 +209,7 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
             "package test;",
             "",
             "import dagger.internal.MapProviderFactory;",
+            "import dagger.internal.Preconditions;",
             "import java.util.Map;",
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
@@ -271,18 +272,12 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
             "    }",
             "",
             "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-            "      if (mapModuleOne == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.mapModuleOne = mapModuleOne;",
+            "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
             "      return this;",
             "    }",
             "",
             "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-            "      if (mapModuleTwo == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.mapModuleTwo = mapModuleTwo;",
+            "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
             "      return this;",
             "    }",
             "  }",
@@ -387,6 +382,7 @@ public void mapKeyComponentFileWithDefaultField() {
             "package test;",
             "",
             "import dagger.internal.MapProviderFactory;",
+            "import dagger.internal.Preconditions;",
             "import java.util.Map;",
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
@@ -449,18 +445,12 @@ public void mapKeyComponentFileWithDefaultField() {
             "    }",
             "",
             "    public Builder mapModuleOne(MapModuleOne mapModuleOne) {",
-            "      if (mapModuleOne == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.mapModuleOne = mapModuleOne;",
+            "      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);",
             "      return this;",
             "    }",
             "",
             "    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {",
-            "      if (mapModuleTwo == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.mapModuleTwo = mapModuleTwo;",
+            "      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);",
             "      return this;",
             "    }",
             "  }",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index cda08be2d..39d439196 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -372,6 +372,7 @@ private String formatModuleErrorMessage(String msg) {
         "package test;",
         "",
         "import dagger.internal.Factory;",
+        "import dagger.internal.Preconditions;",
         "import javax.annotation.Generated;",
         "",
         GENERATED_ANNOTATION,
@@ -384,11 +385,7 @@ private String formatModuleErrorMessage(String msg) {
         "  }",
         "",
         "  @Override public String get() {",
-        "    String provided = module.provideString();",
-        "    if (provided == null) {",
-        "      throw new NullPointerException(" + NPE_LITERAL + ");",
-        "    }",
-        "    return provided;",
+        "    return Preconditions.checkNotNull(module.provideString(), " + NPE_LITERAL + ");",
         "  }",
         "",
         "  public static Factory<String> create(TestModule module) {",
@@ -541,6 +538,7 @@ private String formatModuleErrorMessage(String msg) {
         "",
         "import dagger.MembersInjector;",
         "import dagger.internal.Factory;",
+        "import dagger.internal.Preconditions;",
         "import java.util.List;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
@@ -568,12 +566,9 @@ private String formatModuleErrorMessage(String msg) {
         "  }",
         "",
         "  @Override public List<Object> get() {",
-        "    List<Object> provided =",
-        "        module.provideObjects(aProvider.get(), bProvider.get(), xMembersInjector);",
-        "    if (provided == null) {",
-        "      throw new NullPointerException(" + NPE_LITERAL + ");",
-        "    }",
-        "    return provided;",
+        "    return Preconditions.checkNotNull(",
+        "        module.provideObjects(aProvider.get(), bProvider.get(), xMembersInjector),",
+        "        " + NPE_LITERAL + ");",
         "  }",
         "",
         "  public static Factory<List<Object>> create(",
@@ -711,6 +706,7 @@ private String formatModuleErrorMessage(String msg) {
         "package test;",
         "",
         "import dagger.internal.Factory;",
+        "import dagger.internal.Preconditions;",
         "import java.util.Set;",
         "import javax.annotation.Generated;",
         "",
@@ -724,11 +720,7 @@ private String formatModuleErrorMessage(String msg) {
         "  }",
         "",
         "  @Override public Set<String> get() {",
-        "    Set<String> provided = module.provideStrings();",
-        "    if (provided == null) {",
-        "      throw new NullPointerException(" + NPE_LITERAL + ");",
-        "    }",
-        "    return provided;",
+        "    return Preconditions.checkNotNull(module.provideStrings(), " + NPE_LITERAL + ");",
         "  }",
         "",
         "  public static Factory<Set<String>> create(TestModule module) {",
@@ -999,6 +991,7 @@ public void genericSubclassedModule() {
             "package test;",
             "",
             "import dagger.internal.Factory;",
+            "import dagger.internal.Preconditions;",
             "import java.util.List;",
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
@@ -1019,11 +1012,8 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public List<B> get() {  ",
-            "    List<B> provided = module.provideListB(bProvider.get());",
-            "    if (provided == null) {",
-            "      throw new NullPointerException(" + NPE_LITERAL + ");",
-            "    }",
-            "    return provided;",
+            "    return Preconditions.checkNotNull(module.provideListB(bProvider.get()),",
+            "        " + NPE_LITERAL + ");",
             "  }",
             "",
             "  public static <A extends CharSequence, B, C extends Number & Comparable<C>>",
@@ -1072,6 +1062,7 @@ public void genericSubclassedModule() {
             "package test;",
             "",
             "import dagger.internal.Factory;",
+            "import dagger.internal.Preconditions;",
             "import javax.annotation.Generated;",
             "import javax.inject.Provider;",
             "",
@@ -1091,11 +1082,8 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public B get() {  ",
-            "    B provided = module.provideBEntry(bProvider.get());",
-            "    if (provided == null) {",
-            "      throw new NullPointerException(" + NPE_LITERAL + ");",
-            "    }",
-            "    return provided;",
+            "    return Preconditions.checkNotNull(module.provideBEntry(bProvider.get()), ",
+            "        " + NPE_LITERAL + ");",
             "  }",
             "",
             "  public static <A extends CharSequence, B, C extends Number & Comparable<C>>",
@@ -1108,6 +1096,7 @@ public void genericSubclassedModule() {
         "package test;",
         "",
         "import dagger.internal.Factory;",
+        "import dagger.internal.Preconditions;",
         "import javax.annotation.Generated;",
         "",
         GENERATED_ANNOTATION,
@@ -1121,11 +1110,7 @@ public void genericSubclassedModule() {
         "",
         "  @Override",
         "  public Number get() {  ",
-        "    Number provided = module.provideNumber();",
-        "    if (provided == null) {",
-        "      throw new NullPointerException(" + NPE_LITERAL + ");",
-        "    }",
-        "    return provided;",
+        "    return Preconditions.checkNotNull(module.provideNumber(), " + NPE_LITERAL + ");",
         "  }",
         "",
         "  public static Factory<Number> create(ChildNumberModule module) {",
@@ -1137,6 +1122,7 @@ public void genericSubclassedModule() {
         "package test;",
         "",
         "import dagger.internal.Factory;",
+        "import dagger.internal.Preconditions;",
         "import javax.annotation.Generated;",
         "",
         GENERATED_ANNOTATION,
@@ -1151,11 +1137,7 @@ public void genericSubclassedModule() {
         "",
         "  @Override",
         "  public Integer get() {  ",
-        "    Integer provided = module.provideInteger();",
-        "    if (provided == null) {",
-        "      throw new NullPointerException(" + NPE_LITERAL + ");",
-        "    }",
-        "    return provided;",
+        "    return Preconditions.checkNotNull(module.provideInteger(), " + NPE_LITERAL + ");",
         "  }",
         "",
         "  public static Factory<Integer> create(ChildIntegerModule module) {",
@@ -1204,6 +1186,7 @@ public void genericSubclassedModule() {
             "package test;",
             "",
             "import dagger.internal.Factory;",
+            "import dagger.internal.Preconditions;",
             "import java.util.Map;",
             "import javax.annotation.Generated;",
             "",
@@ -1214,11 +1197,8 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public Map<String, Number> get() {",
-            "    Map<String, Number> provided = ParameterizedModule.provideMapStringNumber();",
-            "    if (provided == null) {",
-            "      throw new NullPointerException(" + NPE_LITERAL + ");",
-            "    }",
-            "    return provided;",
+            "    return Preconditions.checkNotNull(ParameterizedModule.provideMapStringNumber(),",
+            "        " + NPE_LITERAL + ");",
             "  }",
             "",
             "  public static Factory<Map<String, Number>> create() {",
@@ -1232,6 +1212,7 @@ public void genericSubclassedModule() {
             "package test;",
             "",
             "import dagger.internal.Factory;",
+            "import dagger.internal.Preconditions;",
             "import javax.annotation.Generated;",
             "",
             GENERATED_ANNOTATION,
@@ -1241,11 +1222,8 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public Object get() {",
-            "    Object provided = ParameterizedModule.provideNonGenericType();",
-            "    if (provided == null) {",
-            "      throw new NullPointerException(" + NPE_LITERAL + ");",
-            "    }",
-            "    return provided;",
+            "    return Preconditions.checkNotNull(ParameterizedModule.provideNonGenericType(),",
+            "        " + NPE_LITERAL + ");",
             "  }",
             "",
             "  public static Factory<Object> create() {",
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 3db6dc00f..9090fb58e 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -253,6 +253,7 @@ public void dependsOnProductionExecutor() {
             "",
             "import com.google.common.util.concurrent.ListenableFuture;",
             "import dagger.internal.InstanceFactory;",
+            "import dagger.internal.Preconditions;",
             "import dagger.internal.ScopedProvider;",
             "import dagger.internal.SetFactory;",
             "import dagger.producers.Producer;",
@@ -289,8 +290,8 @@ public void dependsOnProductionExecutor() {
             "        InstanceFactory.<Executor>create(builder.executor);",
             "     this.executorProvider =",
             "         ScopedProvider.create(",
-            "             TestClass$SimpleComponent_ProductionExecutorModule_ExecutorFactory.create(",
-            "                 simpleComponentProvider));",
+            "             TestClass$SimpleComponent_ProductionExecutorModule_ExecutorFactory",
+            "                 .create(simpleComponentProvider));",
             "    this.simpleComponentProvider2 =",
             "        InstanceFactory.<TestClass.SimpleComponent>create(this);",
             "    this.setOfFactoryProvider = SetFactory.create(",
@@ -344,29 +345,20 @@ public void dependsOnProductionExecutor() {
             "    }",
             "",
             "    public Builder aModule(TestClass.AModule aModule) {",
-            "      if (aModule == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.aModule = aModule;",
+            "      this.aModule = Preconditions.checkNotNull(aModule);",
             "      return this;",
             "    }",
             "",
             "    public Builder bModule(TestClass.BModule bModule) {",
-            "      if (bModule == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.bModule = bModule;",
+            "      this.bModule = Preconditions.checkNotNull(bModule);",
             "      return this;",
             "    }",
             "",
             "    public Builder testClass$SimpleComponent_MonitoringModule(",
             "        TestClass$SimpleComponent_MonitoringModule",
             "        testClass$SimpleComponent_MonitoringModule) {",
-            "      if (testClass$SimpleComponent_MonitoringModule == null) {",
-            "        throw new NullPointerException();",
-            "      }",
             "      this.testClass$SimpleComponent_MonitoringModule =",
-            "          testClass$SimpleComponent_MonitoringModule;",
+            "          Preconditions.checkNotNull(testClass$SimpleComponent_MonitoringModule);",
             "      return this;",
             "    }",
             "",
@@ -374,17 +366,12 @@ public void dependsOnProductionExecutor() {
             "    public Builder testClass$SimpleComponent_ProductionExecutorModule(",
             "        TestClass$SimpleComponent_ProductionExecutorModule",
             "        testClass$SimpleComponent_ProductionExecutorModule) {",
-            "      if (testClass$SimpleComponent_ProductionExecutorModule == null) {",
-            "        throw new NullPointerException();",
-            "      }",
+            "      Preconditions.checkNotNull(testClass$SimpleComponent_ProductionExecutorModule);",
             "      return this;",
             "    }",
             "",
             "    public Builder executor(Executor executor) {",
-            "      if (executor == null) {",
-            "        throw new NullPointerException();",
-            "      }",
-            "      this.executor = executor;",
+            "      this.executor = Preconditions.checkNotNull(executor);",
             "      return this;",
             "    }",
             "  }",
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
index e4c662fc5..ae438514a 100644
--- a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
+++ b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
@@ -72,6 +72,7 @@
       "test.DaggerPrimitiveComponent",
       "package test;",
       "",
+      "import dagger.internal.Preconditions;",
       "import javax.annotation.Generated;",
       "import javax.inject.Provider;",
       "",
@@ -125,10 +126,7 @@
       "    }",
       "",
       "    public Builder primitiveModule(PrimitiveModule primitiveModule) {",
-      "      if (primitiveModule == null) {",
-      "        throw new NullPointerException();",
-      "      }",
-      "      this.primitiveModule = primitiveModule;",
+      "      this.primitiveModule = Preconditions.checkNotNull(primitiveModule);",
       "      return this;",
       "    }",
       "  }",
diff --git a/core/src/main/java/dagger/internal/MembersInjectors.java b/core/src/main/java/dagger/internal/MembersInjectors.java
index ee4c7b4cf..5be2b8ee2 100644
--- a/core/src/main/java/dagger/internal/MembersInjectors.java
+++ b/core/src/main/java/dagger/internal/MembersInjectors.java
@@ -18,6 +18,8 @@
 import dagger.MembersInjector;
 import javax.inject.Inject;
 
+import static dagger.internal.Preconditions.checkNotNull;
+
 /**
  * Basic {@link MembersInjector} implementations used by the framework.
  *
@@ -25,6 +27,16 @@
  * @since 2.0
  */
 public final class MembersInjectors {
+  /**
+   * Injects members into {@code instance} using {@code membersInjector}.  This method is a
+   * convenience for cases in which you would want to chain members injection, but can't because
+   * {@link MembersInjector#injectMembers} returns {@code void}.
+   */
+  public static <T> T injectMembers(MembersInjector<T> membersInjector, T instance) {
+    membersInjector.injectMembers(instance);
+    return instance;
+  }
+
   /**
    * Returns a {@link MembersInjector} implementation that injects no members
    *
@@ -40,9 +52,7 @@
     INSTANCE;
 
     @Override public void injectMembers(Object instance) {
-      if (instance == null) {
-        throw new NullPointerException();
-      }
+      checkNotNull(instance);
     }
   }
 
@@ -56,7 +66,7 @@
    */
   @SuppressWarnings("unchecked")
   public static <T> MembersInjector<T> delegatingTo(MembersInjector<? super T> delegate) {
-    return (MembersInjector<T>) delegate;
+    return (MembersInjector<T>) checkNotNull(delegate);
   }
 
   private MembersInjectors() {}
diff --git a/core/src/main/java/dagger/internal/Preconditions.java b/core/src/main/java/dagger/internal/Preconditions.java
new file mode 100644
index 000000000..1877cd0eb
--- /dev/null
+++ b/core/src/main/java/dagger/internal/Preconditions.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright (C) 2016 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.internal;
+
+/**
+ * An adaptation of Guava's {@code com.google.common.base.Preconditions} that is specially tailored
+ * to support checks applied in Dagger's generated code.
+ */
+public final class Preconditions {
+  /**
+   * Ensures that an object reference passed as a parameter to the calling method is not null.
+   *
+   * @param reference an object reference
+   * @return the non-null reference that was validated
+   * @throws NullPointerException if {@code reference} is null
+   */
+  public static <T> T checkNotNull(T reference) {
+    if (reference == null) {
+      throw new NullPointerException();
+    }
+    return reference;
+  }
+
+  /**
+   * Ensures that an object reference passed as a parameter to the calling method is not null.
+   *
+   * @param reference an object reference
+   * @param errorMessage the exception message to use if the check fails
+   * @return the non-null reference that was validated
+   * @throws NullPointerException if {@code reference} is null
+   */
+  public static <T> T checkNotNull(T reference, String errorMessage) {
+    if (reference == null) {
+      throw new NullPointerException(errorMessage);
+    }
+    return reference;
+  }
+
+  private Preconditions() {}
+}
+
