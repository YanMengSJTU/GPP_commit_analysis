diff --git a/compiler/src/it/functional-tests/pom.xml b/compiler/src/it/functional-tests/pom.xml
index a7dbbc8b1..821b030d1 100644
--- a/compiler/src/it/functional-tests/pom.xml
+++ b/compiler/src/it/functional-tests/pom.xml
@@ -33,12 +33,12 @@ limitations under the License.
       <artifactId>dagger</artifactId>
       <version>${project.version}</version>
     </dependency>
-      <dependency>
-        <groupId>com.google.dagger</groupId>
-        <artifactId>dagger-compiler</artifactId>
-        <version>${project.version}</version>
-        <optional>true</optional>
-      </dependency>
+    <dependency>
+      <groupId>com.google.dagger</groupId>
+      <artifactId>dagger-compiler</artifactId>
+      <version>${project.version}</version>
+      <optional>true</optional>
+    </dependency>
 
     <dependency>
       <groupId>junit</groupId>
@@ -50,10 +50,6 @@ limitations under the License.
       <artifactId>truth</artifactId>
       <scope>test</scope>
     </dependency>
-    <dependency>
-      <groupId>com.google.guava</groupId>
-      <artifactId>guava</artifactId>
-    </dependency>
   </dependencies>
   <build>
     <plugins>
diff --git a/compiler/src/it/functional-tests/src/main/java/test/BoundedGenericModule.java b/compiler/src/it/functional-tests/src/main/java/test/BoundedGenericModule.java
index 963e0325c..6bd7be4fb 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/BoundedGenericModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/BoundedGenericModule.java
@@ -15,12 +15,10 @@
  */
 package test;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 import dagger.Module;
 import dagger.Provides;
 import java.util.ArrayList;
-import java.util.Collections;
+import java.util.HashSet;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
@@ -40,38 +38,44 @@ Double provideDouble() {
 
   @Provides
   ArrayList<String> provideArrayListString() {
-    return Lists.newArrayList("arrayListOfString");
+    ArrayList<String> list = new ArrayList<>();
+    list.add("arrayListOfString");
+    return list;
   }
 
   @Provides
   LinkedList<String> provideLinkedListString() {
-    return BoundedGenericModule.newLinkedList("linkedListOfString");
+    LinkedList<String> list = new LinkedList<>();
+    list.add("linkedListOfString");
+    return list;
   }
 
   @Provides
   LinkedList<CharSequence> provideLinkedListCharSeq() {
-    return BoundedGenericModule.<CharSequence>newLinkedList("linkedListOfCharSeq");
+    LinkedList<CharSequence> list = new LinkedList<>();
+    list.add("linkedListOfCharSeq");
+    return list;
   }
 
   @Provides
   @SuppressWarnings("unchecked")
   LinkedList<Comparable<String>> provideArrayListOfComparableString() {
-    return BoundedGenericModule.<Comparable<String>>newLinkedList("arrayListOfComparableOfString");
+    LinkedList<Comparable<String>> list = new LinkedList<>();
+    list.add("arrayListOfComparableOfString");
+    return list;
   }
 
   @Provides
   List<Integer> provideListOfInteger() {
-    return Lists.newArrayList(3);
+    LinkedList<Integer> list = new LinkedList<>();
+    list.add(3);
+    return list;
   }
 
   @Provides
   Set<Double> provideSetOfDouble() {
-    return Sets.newHashSet(4d);
-  }
-
-  private static <E> LinkedList<E> newLinkedList(E... elements) {
-    LinkedList<E> list = Lists.newLinkedList();
-    Collections.addAll(list, elements);
-    return list;
+    Set<Double> set = new HashSet<>();
+    set.add(4d);
+    return set;
   }
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ChildDoubleModule.java b/compiler/src/it/functional-tests/src/main/java/test/ChildDoubleModule.java
index ba46f2098..09a1e6b72 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/ChildDoubleModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/ChildDoubleModule.java
@@ -1,19 +1,21 @@
 package test;
 
-import com.google.common.collect.ImmutableList;
 import dagger.Module;
 import dagger.Provides;
+import java.util.ArrayList;
 import java.util.List;
 
 @Module
 class ChildDoubleModule extends ParentModule<Double, String, List<Double>> {
-  
+
   @Provides Double provideDouble() {
     return 3d;
   }
-  
+
   @Provides List<Double> provideListOfDouble() {
-    return ImmutableList.of(4d);
+    List<Double> list = new ArrayList<>();
+    list.add(4d);
+    return list;
   }
 
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ChildIntegerModule.java b/compiler/src/it/functional-tests/src/main/java/test/ChildIntegerModule.java
index a724cdf82..ac9c61207 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/ChildIntegerModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/ChildIntegerModule.java
@@ -1,19 +1,21 @@
 package test;
 
-import com.google.common.collect.ImmutableList;
 import dagger.Module;
 import dagger.Provides;
+import java.util.ArrayList;
 import java.util.List;
 
 @Module
 class ChildIntegerModule extends ParentModule<Integer, String, List<Integer>> {
-  
+
   @Provides Integer provideInteger() {
     return 1;
   }
-  
+
   @Provides List<Integer> provideListOfInteger() {
-    return ImmutableList.of(2);
+    List<Integer> list = new ArrayList<>();
+    list.add(2);
+    return list;
   }
 
 }
diff --git a/compiler/src/it/functional-tests/src/main/java/test/ParentModule.java b/compiler/src/it/functional-tests/src/main/java/test/ParentModule.java
index d9958ba3f..a161abaa8 100644
--- a/compiler/src/it/functional-tests/src/main/java/test/ParentModule.java
+++ b/compiler/src/it/functional-tests/src/main/java/test/ParentModule.java
@@ -1,12 +1,18 @@
 package test;
 
-import com.google.common.collect.ImmutableList;
 import dagger.Module;
 import dagger.Provides;
+import java.util.ArrayList;
+import java.util.List;
 
 @Module
 abstract class ParentModule<A extends Number & Comparable<A>, B, C extends Iterable<A>> {
   @Provides Iterable<A> provideIterableOfAWithC(A a, C c) {
-    return new ImmutableList.Builder<A>().add(a).addAll(c).build();
+    List<A> list = new ArrayList<>();
+    list.add(a);
+    for (A elt : c) {
+      list.add(elt);
+    }
+    return list;
   }
 }
