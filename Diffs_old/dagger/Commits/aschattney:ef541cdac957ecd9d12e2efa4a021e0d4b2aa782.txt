diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
index 3eceffff5..7981af31f 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
@@ -69,7 +69,7 @@
 @AutoValue
 abstract class DependencyRequest {
 
-  enum Kind {
+    enum Kind {
     /** A default request for an instance.  E.g.: {@code Blah} */
     INSTANCE,
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
index a207aaa3f..db82996c6 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
@@ -159,8 +159,7 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
               factoryBuilder,
               constructorBuilder.get());
         }
-        for (Map.Entry<BindingKey, FrameworkField> entry :
-            generateBindingFieldsForDependencies(binding).entrySet()) {
+        for (Map.Entry<BindingKey, FrameworkField> entry : generateBindingFieldsForDependencies(binding).entrySet()) {
           BindingKey bindingKey = entry.getKey();
           FrameworkField bindingField = entry.getValue();
           FieldSpec field =
diff --git a/compiler/src/main/java/dagger/internal/codegen/StubGenerator.java b/compiler/src/main/java/dagger/internal/codegen/StubGenerator.java
index a0d4bf6b7..88b1ad237 100644
--- a/compiler/src/main/java/dagger/internal/codegen/StubGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/StubGenerator.java
@@ -5,8 +5,10 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.SetMultimap;
 import com.squareup.javapoet.*;
+import dagger.Lazy;
 
 import javax.annotation.processing.Filer;
+import javax.inject.Provider;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.util.Elements;
@@ -14,7 +16,10 @@
 import java.lang.annotation.Annotation;
 import java.util.*;
 
+import static dagger.internal.codegen.SourceFiles.DEPENDENCY_ORDERING;
+import static dagger.internal.codegen.SourceFiles.frameworkTypeUsageStatement;
 import static dagger.internal.codegen.SourceFiles.generateBindingFieldsForDependencies;
+import static dagger.internal.codegen.TypeNames.*;
 
 
 public class StubGenerator extends SourceFileGenerator<ProvisionBinding> {
@@ -40,7 +45,8 @@ ClassName nameGeneratedType(ProvisionBinding input) {
     Optional<TypeSpec.Builder> write(ClassName generatedTypeName, ProvisionBinding input) {
         final MethodSpec.Builder methodBuilder = MethodSpec.methodBuilder("get");
         methodBuilder.addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT);
-        methodBuilder.returns(ClassName.get(input.contributedType()));
+        final TypeName contributedTypeName = ClassName.get(input.contributedType());
+        methodBuilder.returns(contributedTypeName);
         List<ParameterSpec> parameterSpecList = new ArrayList<>();
         HashMap<BindingKey, FrameworkField> fields = new HashMap<>();
         for (Map.Entry<BindingKey, FrameworkField> entry : generateBindingFieldsForDependencies(input).entrySet()) {
@@ -50,12 +56,38 @@ ClassName nameGeneratedType(ProvisionBinding input) {
 
         for (DependencyRequest request : input.explicitDependencies()) {
             final FrameworkField frameworkField = fields.get(request.bindingKey());
-            TypeName typeName = request.kind() == DependencyRequest.Kind.INSTANCE ? frameworkField.type().typeArguments.get(0) : frameworkField.type();
-            parameterSpecList.add(ParameterSpec.builder(typeName, frameworkField.name()).build());
+            TypeName typeName = request.kind() == DependencyRequest.Kind.INSTANCE ?
+                    frameworkField.type().typeArguments.get(0) :
+                    frameworkTypeUsageStatement(frameworkField.type().typeArguments.get(0), request.kind());
+
+            final String name = request.kind() == DependencyRequest.Kind.INSTANCE ?
+                    frameworkField.name().replaceAll("Provider$", "") :
+                    frameworkField.name();
+            parameterSpecList.add(ParameterSpec.builder(typeName, name).build());
         }
 
         return Optional.of(TypeSpec.interfaceBuilder(generatedTypeName)
                 .addModifiers(Modifier.PUBLIC)
                 .addMethod(methodBuilder.addParameters(parameterSpecList).build()));
     }
+
+    static TypeName frameworkTypeUsageStatement(TypeName type, DependencyRequest.Kind dependencyKind) {
+        switch (dependencyKind) {
+            case LAZY:
+                return ParameterizedTypeName.get(LAZY, type);
+            case INSTANCE:
+                return type;
+            case PROVIDER:
+                return ParameterizedTypeName.get(PROVIDER, type);
+            case PRODUCER:
+                return ParameterizedTypeName.get(PRODUCER, type);
+            case MEMBERS_INJECTOR:
+                return ParameterizedTypeName.get(MEMBERS_INJECTOR, type);
+            case PROVIDER_OF_LAZY:
+                return ParameterizedTypeName.get(PROVIDER_OF_LAZY, type);
+            default:
+                return ParameterizedTypeName.get(PROVIDER, type);
+        }
+    }
+
 }
diff --git a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ActivityModule.java b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ActivityModule.java
index 72b901137..a5761280f 100644
--- a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ActivityModule.java
+++ b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ActivityModule.java
@@ -62,7 +62,12 @@ public String bString() {
   @Provides
   @Named("AnyString")
   public String cString() {
-    return "B";
+    return "C";
+  }
+
+  @Provides
+  public String dString() {
+    return "D";
   }
 
   @Provides
diff --git a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/SomeClass.java b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/SomeClass.java
index d812b0a64..3fdcea951 100644
--- a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/SomeClass.java
+++ b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/SomeClass.java
@@ -1,5 +1,7 @@
 package com.example.dagger.activitygraphs;
 
+import dagger.Lazy;
+
 import javax.inject.Inject;
 import javax.inject.Named;
 import java.util.Set;
@@ -10,7 +12,7 @@
 public class SomeClass {
 
     @Inject
-    public SomeClass() {
+    public SomeClass(Lazy<String> lazy) {
 
     }
 
diff --git a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ui/HomeActivity.java b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ui/HomeActivity.java
index 08c88df79..149c52b83 100644
--- a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ui/HomeActivity.java
+++ b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ui/HomeActivity.java
@@ -22,9 +22,11 @@
 import com.example.dagger.activitygraphs.ActivityModule;
 import com.example.dagger.activitygraphs.DemoApplication;
 import com.example.dagger.activitygraphs.SomeClass;
+import dagger.Lazy;
 
 import javax.inject.Inject;
 import javax.inject.Named;
+import javax.inject.Provider;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -35,13 +37,13 @@
   private HomeComponent component;
 
   @Inject
-  SomeClass someClass;
+  Lazy<SomeClass> someClass;
 
   @Inject
-  List<String> list;
+  Lazy<List<String>> list;
 
   @Inject
-  Map<String, String> map;
+  Lazy<Map<String, String>> map;
 
   HomeComponent component() {
     if (component == null) {
