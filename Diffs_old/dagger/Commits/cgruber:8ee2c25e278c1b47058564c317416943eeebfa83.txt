diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
index 4d2a74298..3aadd6a3d 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -333,13 +333,12 @@ private void traverseRequest(DependencyRequest request, DependencyPath path) {
           validateResolvedBinding(path);
 
           // Validate all dependencies within the component that owns the binding.
-          for (Map.Entry<ComponentDescriptor, Collection<Binding>> entry :
-              path.currentBinding().bindingsByComponent().asMap().entrySet()) {
+          for (Map.Entry<ComponentDescriptor, ? extends Binding> entry :
+              path.currentBinding().bindingsByComponent()) {
             Validation validation = validationForComponent(entry.getKey());
-            for (Binding binding : entry.getValue()) {
-              for (DependencyRequest nextRequest : binding.implicitDependencies()) {
-                validation.traverseRequest(nextRequest, path);
-              }
+            Binding binding = entry.getValue();
+            for (DependencyRequest nextRequest : binding.implicitDependencies()) {
+              validation.traverseRequest(nextRequest, path);
             }
           }
         }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java b/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
index f0e0d4155..40f1e5e93 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
@@ -19,6 +19,7 @@
 import com.google.common.base.Function;
 import com.google.common.base.Optional;
 import com.google.common.collect.FluentIterable;
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableListMultimap;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
@@ -28,6 +29,7 @@
 import dagger.internal.codegen.BindingType.HasBindingType;
 import dagger.internal.codegen.ContributionType.HasContributionType;
 import dagger.internal.codegen.Key.HasKey;
+import java.util.Map;
 import java.util.Set;
 
 import static com.google.common.base.Preconditions.checkArgument;
@@ -98,14 +100,15 @@ public Key key() {
         throw new AssertionError(bindingKey());
     }
   }
-  
+
   /**
-   * All bindings for {@link #bindingKey()}, indexed by the component in which they were resolved.
+   * All bindings for {@link #bindingKey()}, together with the component in which they were
+   * resolved.
    */
-  ImmutableSetMultimap<ComponentDescriptor, Binding> bindingsByComponent() {
-    return new ImmutableSetMultimap.Builder<ComponentDescriptor, Binding>()
-        .putAll(allContributionBindings())
-        .putAll(allMembersInjectionBindings().entrySet())
+  ImmutableList<Map.Entry<ComponentDescriptor, ? extends Binding>> bindingsByComponent() {
+    return new ImmutableList.Builder<Map.Entry<ComponentDescriptor, ? extends Binding>>()
+        .addAll(allContributionBindings().entries())
+        .addAll(allMembersInjectionBindings().entrySet())
         .build();
   }
 
