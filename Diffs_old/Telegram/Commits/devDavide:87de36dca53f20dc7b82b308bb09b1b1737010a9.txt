diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
index 317fbb7db..49e884ac1 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
@@ -48,6 +48,7 @@
     private Map<Option,Vote> newVotes;
     private OnVoteChangeListener onVoteChangeListener;
     private UsersDecisionVotes usersDecisionVotes;
+    private int currentUserId;
 
     private boolean firstVotePerformed;
 
@@ -70,7 +71,9 @@ public void voteChanges(boolean areThereChangesToSave) {
     }
 
     public void setData(UsersDecisionVotes usersDecisionVotes, int currentUserId) {
+        this.firstVotePerformed = false;
         this.usersDecisionVotes = usersDecisionVotes;
+        this.currentUserId = currentUserId;
         this.votes = usersDecisionVotes.getVotes(currentUserId);
         this.newVotes = new HashMap<>();
         this.originalVotes = new ArrayList<>();
@@ -133,18 +136,31 @@ public void onClick(View v) {
                 vote.setVoteTime(new Date());
                 if (vote.isVote() != null && vote.isVote().equals(originalVotes.get(position))) {
                     newVotes.remove(o);
-                    ;
                 } else {
+                    newVotes.remove(o);
                     newVotes.put(o, vote);
                 }
-                firstVotePerformed = true;
+                // update data structure
                 Log.d(LOG_TAG, "item [" + position + "] selected[" + optionCheckBox.isChecked() + "] ");
                 usersDecisionVotes.setVote(vote.getUserId(), o, vote);
+
+                firstVotePerformed = true;
+
+                // notify data set has changed
                 onVoteChangeListener.voteChanges(!newVotes.isEmpty());
                 notifyDataSetChanged();
             }
         });
 
+        if (firstVotePerformed && vote.isVote() == null){
+            // on first vote set to false all null votes
+            vote.setVote(false);
+            vote.setVoteTime(new Date());
+
+            usersDecisionVotes.setVote(vote.getUserId(), o, vote);
+            newVotes.put(o,vote);
+        }
+
 
         final int positiveVoteCount = usersDecisionVotes.getPositiveVoteCount(o);
         final int negativeVoteCount = usersDecisionVotes.getNegativeVoteCount(o);
@@ -155,12 +171,11 @@ public void onClick(View v) {
         StackedBar stackedBarStackedBar = new StackedBar(getContext(), usersDecisionVotes.getUsers().size(),
                 positiveVoteCount, negativeVoteCount);
         stackedBarContainer.addView(stackedBarStackedBar, ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT);
-        if (vote.isVote() == null && !firstVotePerformed){
+        if (vote.isVote() == null){
             optionCheckBox.setBackgroundColor(VOTED_NOT_SET_COLOR);
         }
         optionCheckBox.setChecked(vote.isVote() != null && vote.isVote());
 
-
         View.OnClickListener openOptionDetailOnClickLister = new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -188,7 +203,6 @@ private String formatVoteCount(int positiveVoteCount) {
         return "(" + positiveVoteCount + ")";
     }
 
-
     public Collection<Vote> getNewVotes() {
         return newVotes.values();
     }
