diff --git a/README-kr.md b/README-kr.md
new file mode 100644
index 000000000..6cce2d9de
--- /dev/null
+++ b/README-kr.md
@@ -0,0 +1,97 @@
+## Lunagram (ALPHA VERSION)
+
+루나그램은 코스모스 지갑이 내장되어있는 텔레그램 기반 메신저입니다. 루나그램 지갑은 코스모스 아톰 전송, 스테이킹, 그리고 거버넌스 투표 등의 기능을 지원합니다.
+
+유저는 본인의 텔레그램 계정의 `bio` 항목을 코스모스 주소로 변경하여 코스모스 주소와 텔레그램 계정을 연동할 수 있습니다.
+
+**참고: 텔레그램 bio를 코스모스 주소로 바꾸게 되면 모든 텔레그램 유저에게 코스모스 주소가 공개됩니다. 이런 행동에 따른 위험이 존재할 수 있으니 보안에 유의하시기 바랍니다.**
+
+또한 루나그램 월렛은 LMI(Lunagram Message Interface)를 통한 송금 요청을 지원합니다. 봇 개발자는 하단에 설명되어있는 표준 인터페이스를 통해서 봇 기능에 코스모스 결재 기능을 사용할 수 있습니다.
+
+## Lunagram Message Interface, LMI
+
+### 개요
+
+루나민트 메시지 인터페이스(LMI, Lunamint Message Interface)는 텔레그램 봇과 외부 애플리케이션이 루나민트 애플리케이션을 통해 송금과 서명을 할 수 있게하는 표준 메시지 포맷입니다.
+
+요청자가 다음과 같은 메시지를 사용자에게 전송하게 되면, Lunagram은 해당 메시지를 분석하여 상황에 맞는 Instance Button을 표시합니다. 사용자는 해당 버튼을 누르면 요청된 LMI message에 따른 송금 또는 서명을 진행할 수 있습니다.
+
+### LMI 포맷
+
+**샘플 LMI 메시지**
+
+```
+lmi::1::MX+MCwHCi98HZm/4Zxk03dhX18/opY3CdL2/llztzDZJkMxwm3vXbBArnrxpmxS3l8UT3r4Ya4EDBu9wuL1owE2CkybJxuhLJn9hf13M1/VayKJLH0GLaekQmGtm1wLEh1PYd4Ne3OZp+/fWAQITjoOfffiFlwlY4htSl5h2zQHQ6QulURGnwf4iR2TWJKnXAM46v1EL9qOOkIU5TfBdNHLPqyDdgvdawDKcZjbx2M0W3bpZiPxDYASBVuyAxFR2MFfnidRnQ5neS1thW1vYRhjLi5aOyXAUHtUSXhNHCElnOxKzTI7zfd2vFB/k31pLqRgcAMUuw7fgGZilSVoFX2CdFn8gcKNVEA6STXU+lHMV2OxvFsnwBoMhSv9mBxsloJot+Q3inj3fV5LX+5FT43MpsHAxeCR26YNtTCjafSU=
+```
+
+위 LMI 메시지는 3개의 파트로 나뉩니다: `lmi(프리픽스)::1(버전)::message(암호화된 메시지)`
+
+**참고**
+1. LMI 메시지의 포맷은 위에 정의된 규칙을 따라야합니다.
+2. LMI message 내의 `message` 필드는 AES/CBC/PKCS5Padding로 암호화하여야 합니다. (Encryption key = `lunagram`, Encryption iv = `evqndl&wgvhvaoz!`)
+
+LMI 메시지의 `message` 필드는 다음과 같은 포맷을 이용해주세요:
+
+```{
+ "action": "send",
+ "requester_t_id": “lunagrambot”,
+ "tx": {
+  “from”: "cosmos17v0fff40qfwp8l8ruhyjuvh39t8j7qarhkwjpd”,
+  "to": "cosmos17v0fff40qfwp8l8ruhyjuvh39t8j7qarhkwjpd",
+  "denom": “stake”,
+  "amount": “10”,
+  "memo": “blah~blah~”
+ },
+ "callback": {
+  "url": "https://lunatestcallback/",
+  "endpoint": "deposit“,
+  "custom_fields": {
+   “custom_field1”: “It’s custom field1”,
+   “custom_field2”: “It’s custom field2”
+  }
+ }
+}
+```
+
+
+필드 | 타입 | 설명 
+------|------|---------
+action | String | `send` 또는 `sign`
+requester_t_id | String | LMI message를 보내는 사람의 텔레그램 ID
+tx.from | String | (선택) 토큰을 보내는 유저의 코스모스 주소
+tx.to | String | 토큰을 받는 유저의 코스모스 주소
+tx.denom | String | 토큰 식별자
+tx.amount | String | 토큰 수량
+tx.memo | String | (선택) 트랜잭션의 메모
+callback.url | String | 사용자의 action이 완료된 후 callback을 받을 callback base url. 이 필드의 끝은 반드시 `/`로 끝나야 합니다. 콜백은 https 주소만 지원합니다.
+callback.endpoint | String | Callback url의 endpoint. `usr/deposit` 처럼 endpoint의 full path를 기입해주세요.
+callback.custom_field | json object / any type | 사용자의 action이 완료된 후, 루나그램 앱은 `custom_field` 내용을 지정된 callback url에 전송합니다.
+
+### LMI Callback
+
+**HTTPS / POST / Content-Type: application/json**
+
+사용자가 액션을 완료한 경우, Lunagram 애플리케이션은 `custom_field` 내용을 `lmi_version:1`과 함께 지정된 url에 callback으로 전송합니다.
+
+만약 `custom_field`에 포함된 메시지가 다음과 같을 경우:
+
+```
+"custom_field": {
+ “custom_field1”: “It’s custom field1”,
+ “custom_field2”: “It’s custom field2”
+}
+```
+
+Callback으로 받게 될 데이터는 다음과 같습니다:
+
+```
+{
+ “lmi_version”:1,
+ “custom_field1”: “It’s custom field1”,
+ “custom_field2”: “It’s custom field2”
+}
+```
+
+### 경고
+
+Callback은 전송 성공을 보장하지 않습니다. 토큰 전송의 경우, callback은 이중 확인 용도로만 사용되어야 합니다. 모든 토큰 전송 결과는 블록체인에 기록된 데이터를 통해 확인하셔야 합니다.
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 8554426d4..da8c61941 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           xmlns:tools="http://schemas.android.com/tools"
-    package="com.telemint.messenger"
+    package="com.lunamint.lunagram"
     android:installLocation="auto">
 
     <supports-screens android:anyDensity="true"
@@ -24,7 +24,6 @@
     <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
     <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
-    <uses-permission android:name="android.permission.RECEIVE_SMS" />
     <uses-permission android:name="android.permission.WAKE_LOCK" />
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
     <uses-permission android:name="android.permission.GET_ACCOUNTS" />
@@ -70,8 +69,8 @@
         android:name="org.telegram.messenger.ApplicationLoader"
         android:allowBackup="false"
         android:hardwareAccelerated="@bool/useHardwareAcceleration"
-        android:icon="@drawable/ic_launcher"
-        android:roundIcon="@drawable/ic_launcher"
+        android:icon="@mipmap/ic_launcher"
+        android:roundIcon="@mipmap/ic_launcher_round"
         android:largeHeap="true"
         android:theme="@style/Theme.TMessages.Start"
         android:manageSpaceActivity="org.telegram.ui.ExternalActionActivity"
@@ -138,7 +137,7 @@
                 <data android:host="t.me" android:scheme="http" />
                 <data android:host="t.me" android:scheme="https" />
             </intent-filter>
-            <intent-filter android:icon="@drawable/ic_launcher" android:priority="1">
+            <intent-filter android:icon="@mipmap/ic_launcher" android:priority="1">
                 <action android:name="android.intent.action.VIEW" />
                 <category android:name="android.intent.category.BROWSABLE" />
                 <category android:name="android.intent.category.DEFAULT" />
@@ -154,7 +153,7 @@
             android:excludeFromRecents="true"
             android:stateNotNeeded="true"
             android:theme="@style/Theme.TMessages.Transparent">
-            <intent-filter android:icon="@drawable/ic_launcher" android:priority="1">
+            <intent-filter android:icon="@mipmap/ic_launcher" android:priority="1">
                 <action android:name="android.intent.action.VIEW" />
                 <category android:name="android.intent.category.BROWSABLE" />
                 <category android:name="android.intent.category.DEFAULT" />
@@ -166,7 +165,7 @@
             android:configChanges="keyboard|keyboardHidden|orientation|screenSize"
             android:hardwareAccelerated="@bool/useHardwareAcceleration"
             android:windowSoftInputMode="adjustPan">
-            <intent-filter android:icon="@drawable/ic_launcher">
+            <intent-filter android:icon="@mipmap/ic_launcher">
                 <action android:name="org.telegram.passport.AUTHORIZE"/>
                 <category android:name="android.intent.category.DEFAULT"/>
             </intent-filter>
@@ -208,6 +207,103 @@
 				  android:taskAffinity="${applicationId}.voip_feedback"
                   android:excludeFromRecents="true"
                 android:theme="@style/Theme.TMessages.TransparentWithAlerts"/>
+        <activity
+            android:name=".ui.CreateAccountActivity"
+            android:launchMode="singleTask">
+        </activity>
+        <activity
+            android:name=".ui.DeleteAccountActivity"
+            android:launchMode="singleTask">
+        </activity>
+        <activity
+            android:name=".ui.SendCoinActivity"
+            android:launchMode="singleTask"
+            android:screenOrientation="portrait"
+            android:windowSoftInputMode="stateAlwaysHidden"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name=".ui.SelectTokenActivity"
+            android:launchMode="singleTask"
+            android:screenOrientation="portrait"
+            android:windowSoftInputMode="stateAlwaysHidden"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name=".ui.TransactionHistoryActivity"
+            android:launchMode="singleTask"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name=".ui.StakingActivity"
+            android:launchMode="singleTask"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name=".ui.ValidatorListActivity"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name=".ui.ValidatorInfoActivity"
+            android:launchMode="singleTask"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name=".ui.StakeCoinActivity"
+            android:launchMode="singleTask"
+            android:windowSoftInputMode="stateAlwaysHidden"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name=".ui.ManageWalletActivity"
+            android:launchMode="singleTask"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name=".ui.TransactionDetailActivity"
+            android:launchMode="singleTask"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name=".ui.GovernanceActivity"
+            android:launchMode="singleTask"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name=".ui.ProposalDetailActivity"
+            android:launchMode="singleTask"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name=".ui.VoteActivity"
+            android:launchMode="singleTask"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name=".ui.ClaimRewardActivity"
+            android:launchMode="singleTask"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name=".ui.QrCodeActivity"
+            android:launchMode="singleTask"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name=".ui.SettingsActivity"
+            android:launchMode="singleTask"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name=".ui.EnableFingerprintActivity"
+            android:launchMode="singleTask"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name=".ui.SelectNodeActivity"
+            android:launchMode="singleTask"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
 
         <receiver
             android:name="org.telegram.messenger.AutoMessageHeardReceiver"
@@ -363,13 +459,15 @@
         <!--<meta-data android:name="com.google.android.gms.wallet.api.enabled" android:value="true" />-->
 
         <meta-data android:name="com.google.android.gms.car.notification.SmallIcon" android:resource="@drawable/ic_player" />
-        <meta-data android:name="com.google.android.gms.car.application" android:resource="@xml/automotive_app_desc" />
 
         <meta-data android:name="com.google.android.gms.vision.DEPENDENCIES" android:value="face" />
 
         <meta-data android:name="com.samsung.android.icon_container.has_icon_container" android:value="true"/>
         <meta-data android:name="android.max_aspect" android:value="2.5" />
 
+        <meta-data
+            android:name="io.fabric.ApiKey"
+            android:value="1c357f44695bf02003ba38da1282cb0e4c52877f" />
     </application>
 
 </manifest>
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/BuildVars.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/BuildVars.java
new file mode 100644
index 000000000..97b710081
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/BuildVars.java
@@ -0,0 +1,83 @@
+/*
+ * This is the source code of Lunagram for Android v. 1.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright {company_name}, 2019.
+ */
+
+package com.lunamint.lunagram;
+
+import java.util.Locale;
+
+public class BuildVars {
+
+    private final static String INSTALL_URL = "https://play.google.com/store/apps/details?id=com.lunamint.lunagram";
+
+    //Todo: translation
+    private static String lunagramSupportMessages[] = {
+            "This message includes features that are available only in lunagram.\n\nPlease install or update the app in the Google Play Store.\n\n" + INSTALL_URL,
+            "이 메시지에는 lunagram 에서만 사용할 수 있는 기능이 포함되어 있습니다.\n\n구글플레이스토어에서 앱을 설치 또는 업데이트하고 이용해주세요.\n\n" + INSTALL_URL
+    };
+
+    public static String lunagramUnsupportedMessages[] = {
+            "This message contains a request that is not supported by the current version of Lunagram.",
+            "이 메시지는 현재 버전의 Lunagram에서 지원하지 않는 요청을 포함하고 있습니다."
+    };
+
+    public static String getLunagramSupportedMessage() {
+        return getLunagramSupportMessage();
+    }
+
+    public static String getLunagramSupportedMessage(String msg) {
+        for (String lunagramSupportMessage : lunagramSupportMessages) {
+            if (msg.contains(lunagramSupportMessage)) return lunagramSupportMessage;
+        }
+        return "";
+    }
+
+    public static boolean containLunagramSupportedMessage(String msg) {
+        for (String lunagramSupportMessage : lunagramSupportMessages) {
+            if (msg.contains(lunagramSupportMessage)) return true;
+        }
+        return false;
+    }
+
+    private static String getLunagramSupportMessage() {
+        String msg;
+        switch (getLanguage()) {
+            case "en":
+                msg = lunagramSupportMessages[0];
+                break;
+            case "ko":
+                msg = lunagramSupportMessages[1];
+                break;
+            default:
+                msg = lunagramSupportMessages[0];
+        }
+        return msg;
+    }
+
+    public static String getLunagramUnsupportedMessage() {
+        return getLunagramUnsupportMessage();
+    }
+
+    private static String getLunagramUnsupportMessage() {
+        String msg;
+        switch (getLanguage()) {
+            case "en":
+                msg = lunagramUnsupportedMessages[0];
+                break;
+            case "ko":
+                msg = lunagramUnsupportedMessages[1];
+                break;
+            default:
+                msg = lunagramUnsupportedMessages[0];
+        }
+        return msg;
+    }
+
+    private static String getLanguage() {
+        return Locale.getDefault().getLanguage();
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/secure/Secure.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/secure/Secure.java
new file mode 100644
index 000000000..641e28b89
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/secure/Secure.java
@@ -0,0 +1,112 @@
+package com.lunamint.lunagram.secure;
+
+import android.content.Context;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.Signature;
+import android.provider.Settings;
+import android.util.Base64;
+
+import com.lunamint.lunagram.BuildConfig;
+
+import java.io.File;
+import java.io.IOException;
+import java.security.MessageDigest;
+
+public class Secure {
+
+    private final static String DEBUG_SIGNATURE = "vx0O7E87XhRclmzJVsB2IVNUua0=";
+    private final static String RELEASE_SIGNATURE = "5fIH753Ipe+a2XyDh8jvtit1LiE=";
+
+    public static boolean isRooted() {
+
+        String buildTags = android.os.Build.TAGS;
+        if (buildTags != null && buildTags.contains("test-keys")) {
+            return true;
+        }
+
+        try {
+            String[] paths = {"/system/app/Superuser.apk", "/sbin/su", "/system/bin/su", "/system/xbin/su", "/data/local/xbin/su", "/data/local/bin/su", "/system/sd/xbin/su",
+                    "/system/bin/failsafe/su", "/data/local/su", "/su/bin/su"};
+            for (String path : paths) {
+                if (new File(path).exists()) {
+                    return true;
+                }
+            }
+        } catch (Exception e1) {
+        }
+
+        boolean canExecute = isRootAvailable();
+
+        return canExecute;
+    }
+
+    public static boolean isAdbEnabled(Context context) {
+        return Settings.Secure.getInt(context.getContentResolver(), Settings.Global.ADB_ENABLED, 0) == 1;
+    }
+
+    public static boolean isValidSignature(Context context) {
+        String correctSignature = BuildConfig.DEBUG ? DEBUG_SIGNATURE : RELEASE_SIGNATURE;
+        String sig = "";
+        try {
+            PackageInfo pi = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_SIGNATURES);
+
+            for (Signature signature : pi.signatures) {
+                MessageDigest md;
+                md = MessageDigest.getInstance("SHA");
+
+                md.update(signature.toByteArray());
+                sig = new String(Base64.encode(md.digest(), 0));
+            }
+
+            return sig.contains(correctSignature) ? true : false;
+        } catch (Exception e) {
+            return false;
+        }
+    }
+
+    public static boolean isRootAvailable() {
+        Process p = null;
+        try {
+            p = Runtime.getRuntime().exec(new String[]{"su"});
+            writeCommandToConsole(p, "exit 0");
+            int result = p.waitFor();
+            if (result != 0)
+                throw new Exception("err " + result);
+            return true;
+        } catch (IOException e) {
+        } catch (Exception e) {
+        } finally {
+            if (p != null)
+                p.destroy();
+        }
+        return false;
+    }
+
+    private static String writeCommandToConsole(Process proc, String command) throws Exception {
+        byte[] tmpArray = new byte[1024];
+        proc.getOutputStream().write((command + "\n").getBytes());
+        proc.getOutputStream().flush();
+        int bytesRead = 0;
+        if (proc.getErrorStream().available() > 0) {
+            if ((bytesRead = proc.getErrorStream().read(tmpArray)) > 1) {
+                throw new Exception(new String(tmpArray, 0, bytesRead));
+
+            }
+        }
+        if (proc.getInputStream().available() > 0) {
+            bytesRead = proc.getInputStream().read(tmpArray);
+        }
+        return new String(tmpArray);
+    }
+
+    //Todo: need to implement version checking.
+    public static boolean checkAppVersion() {
+        if (true) {
+            return true;
+        } else {
+            return false;
+        }
+
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/secure/SecureKeyStore.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/secure/SecureKeyStore.java
new file mode 100644
index 000000000..3f625fe35
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/secure/SecureKeyStore.java
@@ -0,0 +1,216 @@
+package com.lunamint.lunagram.secure;
+
+import android.content.Context;
+import android.os.Build;
+import android.security.KeyPairGeneratorSpec;
+import android.security.keystore.KeyGenParameterSpec;
+import android.security.keystore.KeyProperties;
+import android.util.Base64;
+
+import java.io.IOException;
+import java.math.BigInteger;
+import java.security.GeneralSecurityException;
+import java.security.InvalidKeyException;
+import java.security.KeyPairGenerator;
+import java.security.KeyStore;
+import java.security.KeyStoreException;
+import java.security.NoSuchAlgorithmException;
+import java.security.UnrecoverableEntryException;
+import java.security.cert.CertificateException;
+import java.security.spec.RSAKeyGenParameterSpec;
+import java.util.Calendar;
+import java.util.Date;
+
+import javax.crypto.BadPaddingException;
+import javax.crypto.Cipher;
+import javax.crypto.IllegalBlockSizeException;
+import javax.crypto.NoSuchPaddingException;
+import javax.security.auth.x500.X500Principal;
+
+import static java.security.spec.RSAKeyGenParameterSpec.F4;
+
+
+public class SecureKeyStore {
+    private static volatile SecureKeyStore Instance = null;
+    private static final String kProvider = "AndroidKeyStore";
+    private static final int KEY_LENGTH_BIT = 2048;
+    private static final int VALIDITY_YEARS = 100;
+    private static final String ALGORITHM = KeyProperties.KEY_ALGORITHM_RSA + "/" + KeyProperties.BLOCK_MODE_ECB + "/" + KeyProperties.ENCRYPTION_PADDING_RSA_PKCS1;
+    private static final String CHARSET = "utf-8";
+
+    private boolean isSupported = false;
+    private KeyStore.Entry keyEntry;
+
+    public static SecureKeyStore getInstance() {
+        SecureKeyStore walletManagerInstance = Instance;
+        if (walletManagerInstance == null) {
+            synchronized (SecureKeyStore.class) {
+                walletManagerInstance = Instance;
+                if (walletManagerInstance == null) {
+                    Instance = walletManagerInstance = new SecureKeyStore();
+                }
+            }
+        }
+        return walletManagerInstance;
+    }
+
+    public void init(Context appContext) {
+
+        if (isSupported) return;
+
+        String alias = appContext.getPackageName() + ".secure";
+
+        try {
+            KeyStore ks = KeyStore.getInstance(kProvider);
+            ks.load(null);
+            if (ks.containsAlias(alias)) {
+                isSupported = true;
+                return;
+            }
+
+        } catch (KeyStoreException e) {
+            e.printStackTrace();
+        } catch (CertificateException e) {
+            e.printStackTrace();
+        } catch (NoSuchAlgorithmException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP_MR1) {
+            try {
+                KeyPairGenerator kpg = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_RSA, kProvider);
+                kpg.initialize(new KeyGenParameterSpec.Builder(alias,
+                        KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
+                        .setAlgorithmParameterSpec(new RSAKeyGenParameterSpec(KEY_LENGTH_BIT, F4))
+                        .setBlockModes(KeyProperties.BLOCK_MODE_CBC)
+                        .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_PKCS1)
+                        .setDigests(KeyProperties.DIGEST_SHA512,
+                                KeyProperties.DIGEST_SHA384,
+                                KeyProperties.DIGEST_SHA256)
+                        .setUserAuthenticationRequired(false)
+                        .build());
+
+                kpg.generateKeyPair();
+                isSupported = true;
+            } catch (GeneralSecurityException e) {
+                e.printStackTrace();
+                isSupported = false;
+            }
+        } else if (Build.VERSION.SDK_INT > Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            try {
+                Calendar cal = Calendar.getInstance();
+                Date now = cal.getTime();
+
+                cal.add(Calendar.YEAR, VALIDITY_YEARS);
+                Date end = cal.getTime();
+
+                KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA", kProvider);
+                kpg.initialize(new KeyPairGeneratorSpec.Builder(appContext)
+                        .setAlias(alias)
+                        .setStartDate(now)
+                        .setEndDate(end)
+                        .setSerialNumber(BigInteger.ONE)
+                        .setSubject(new X500Principal("CN=" + alias))
+                        .build());
+
+                kpg.generateKeyPair();
+                isSupported = true;
+            } catch (GeneralSecurityException e) {
+                e.printStackTrace();
+                isSupported = false;
+            }
+        }
+    }
+
+    public boolean isSupported() {
+        return isSupported;
+    }
+
+    public String encrypt(Context appContext, String text) {
+        if (!isSupported) return null;
+
+        String alias = appContext.getPackageName() + ".secure";
+
+        try {
+            if (keyEntry == null) {
+                KeyStore ks = KeyStore.getInstance(kProvider);
+                ks.load(null);
+                keyEntry = ks.getEntry(alias, null);
+            }
+
+            if (keyEntry != null) {
+                Cipher cipher = Cipher.getInstance(ALGORITHM);
+                cipher.init(Cipher.ENCRYPT_MODE, ((KeyStore.PrivateKeyEntry) keyEntry).getCertificate().getPublicKey());
+
+                byte[] encrypted = cipher.doFinal(text.getBytes(CHARSET));
+                return Base64.encodeToString(encrypted, Base64.DEFAULT);
+            }
+        } catch (KeyStoreException e) {
+            e.printStackTrace();
+        } catch (CertificateException e) {
+            e.printStackTrace();
+        } catch (NoSuchAlgorithmException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (UnrecoverableEntryException e) {
+            e.printStackTrace();
+        } catch (NoSuchPaddingException e) {
+            e.printStackTrace();
+        } catch (IllegalBlockSizeException e) {
+            e.printStackTrace();
+        } catch (BadPaddingException e) {
+            e.printStackTrace();
+        } catch (InvalidKeyException e) {
+            e.printStackTrace();
+        }
+
+        return null;
+    }
+
+    public String decrypt(Context appContext, String text) {
+        if (!isSupported) return null;
+
+        String alias = appContext.getPackageName() + ".secure";
+
+        try {
+            if (keyEntry == null) {
+                KeyStore ks = KeyStore.getInstance(kProvider);
+                ks.load(null);
+                keyEntry = ks.getEntry(alias, null);
+            }
+
+            if (keyEntry != null) {
+                Cipher cipher = Cipher.getInstance(ALGORITHM);
+                cipher.init(Cipher.DECRYPT_MODE, ((KeyStore.PrivateKeyEntry) keyEntry).getPrivateKey());
+
+                byte[] base64EncryptedBytes = Base64.decode(text.getBytes(CHARSET), Base64.DEFAULT);
+                return new String(cipher.doFinal(base64EncryptedBytes));
+            }
+        } catch (KeyStoreException e) {
+            e.printStackTrace();
+        } catch (CertificateException e) {
+            e.printStackTrace();
+        } catch (NoSuchAlgorithmException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (UnrecoverableEntryException e) {
+            e.printStackTrace();
+        } catch (NoSuchPaddingException e) {
+            e.printStackTrace();
+        } catch (IllegalBlockSizeException e) {
+            e.printStackTrace();
+        } catch (BadPaddingException e) {
+            e.printStackTrace();
+        } catch (InvalidKeyException e) {
+            e.printStackTrace();
+        } catch (IllegalArgumentException e) {
+            e.printStackTrace();
+        }
+
+        return "";
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/ClaimRewardActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/ClaimRewardActivity.java
new file mode 100644
index 000000000..76bc11e36
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/ClaimRewardActivity.java
@@ -0,0 +1,514 @@
+package com.lunamint.lunagram.ui;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ScrollView;
+import android.widget.Toast;
+
+import com.google.gson.JsonObject;
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.secure.SecureKeyStore;
+import com.lunamint.lunagram.ui.component.DefaultButton;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+import com.lunamint.lunagram.ui.view.DefaultFormView;
+import com.lunamint.lunagram.ui.view.FeeFormView;
+import com.lunamint.lunagram.ui.view.TxProgressView;
+import com.lunamint.wallet.ApiUtils;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.LcdService;
+import com.lunamint.wallet.WalletManager;
+import com.lunamint.wallet.model.AccountStatus;
+import com.lunamint.wallet.model.BlockInfo;
+import com.lunamint.wallet.model.CmdResult;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.model.SendResult;
+import com.lunamint.wallet.model.tx.DefaultHistory;
+import com.lunamint.wallet.utils.AnimUtil;
+import com.lunamint.wallet.utils.CmdResultChecker;
+import com.lunamint.wallet.utils.FileUtil;
+import com.lunamint.wallet.utils.NetworkUtil;
+import com.lunamint.wallet.utils.NumberFormatter;
+import com.lunamint.wallet.utils.Parser;
+import com.lunamint.wallet.utils.TimeUtil;
+import com.lunamint.wallet.utils.TokenUtil;
+import com.lunamint.wallet.utils.VarifyUtil;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.math.BigDecimal;
+import java.util.ArrayList;
+
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
+public class ClaimRewardActivity extends LunagramBaseActivity {
+
+    private final int GET_TRANSACTION_RESULT_MAX_TRY_COUNT = 7;
+    private final int GET_TRANSACTION_RESULT_DELAY = 3000;
+
+    private int step = 0;
+    private boolean isSending = false;
+    private long currentTimeMillis = 0;
+    private boolean needToGoNext = false;
+
+    private ArrayList<Coin> coins;
+
+    private String accountName = "";
+    private String address = "";
+    private String rewards = "";
+    private AccountStatus accountStatus;
+
+    private String hash = "";
+    private int requestBlockHeight = -1;
+
+    private ScrollView scrollView;
+    private FrameLayout contentsLayout;
+    private FeeFormView feeFormView;
+    private DefaultFormView passwordFormView;
+    private TxProgressView txProgressView;
+
+    private DefaultButton nextButton;
+
+    private View currentView;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("claimReward", R.string.claimReward));
+
+        accountName = getIntent().getStringExtra("accountName");
+        address = getIntent().getStringExtra("address");
+        rewards = getIntent().getStringExtra("rewards");
+
+        LinearLayout mainLayout = new LinearLayout(this);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+
+        scrollView = new ScrollView(this);
+        mainLayout.addView(scrollView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 0, 1.0f));
+
+        contentsLayout = new FrameLayout(this);
+        scrollView.addView(contentsLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        nextButton = new DefaultButton(this, 4, true, LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue, onClickNextListener);
+        mainLayout.addView(nextButton, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 20, 6, 20, 20));
+
+        setContentView(mainLayout);
+
+        showFeeFormView();
+
+        getBalance();
+    }
+
+    @Override
+    protected void onPause() {
+        clearPasswordForm();
+        super.onPause();
+    }
+
+    @Override
+    protected void onCheckFingerprintDone() {
+        super.onCheckFingerprintDone();
+        if (passwordFormView == null) return;
+
+        SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        String pwd = SecureKeyStore.getInstance().decrypt(getApplicationContext(), pref.getString("W-" + accountName.replaceAll(" ", ""), ""));
+        passwordFormView.setValue(pwd);
+        passwordFormView.clearFocus();
+
+        if (pwd.length() > 0) varifyPassword(pwd);
+    }
+
+    @Override
+    protected void handleMessage(Message msg) {
+        super.handleMessage(msg);
+        CmdResult cmdResult = ((CmdResult) msg.getData().getSerializable("result"));
+        switch (msg.what) {
+            case WalletManager.MAKE_TX_CLAIM_REWARD:
+                onTransactionCreatedResult(cmdResult);
+                break;
+            case WalletManager.TX_SIGN:
+                onTransactionSignedResult(cmdResult);
+                break;
+        }
+    }
+
+    private void getBalance() {
+        if (!VarifyUtil.isValidCosmosAddress(address)) return;
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getBalances(address).enqueue(new Callback<ArrayList<Coin>>() {
+            @Override
+            public void onResponse(Call<ArrayList<Coin>> call, Response<ArrayList<Coin>> response) {
+                if (response.code() == 200) {
+                    coins = response.body();
+                    if (needToGoNext) {
+                        needToGoNext = false;
+                        hideProgress();
+                        if (feeFormView != null) varifyFee(feeFormView.getValueOrigin());
+                    }
+                    if (response.body() != null)
+                        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.balanceChanged, response);
+                } else {
+                    showNodeConnectionErrorAlert();
+                }
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<Coin>> call, Throwable t) {
+                if (NetworkUtil.isNetworkAvailable(ClaimRewardActivity.this)) {
+                    showNodeConnectionErrorAlert();
+                } else {
+                    Toast.makeText(ClaimRewardActivity.this, LocaleController.getString("networkError", R.string.networkError), Toast.LENGTH_LONG).show();
+                }
+                finish();
+            }
+        });
+    }
+
+    private void getAccountStatus() {
+        isSending = true;
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getAccountStatus(address).enqueue(new Callback<AccountStatus>() {
+            @Override
+            public void onResponse(Call<AccountStatus> call, Response<AccountStatus> response) {
+                if (response.code() == 200) {
+                    accountStatus = response.body();
+                    makeTransactionClaimReward();
+                } else {
+                    step = 4;
+                    showPasswordFormView(true);
+                    if (passwordFormView != null)
+                        passwordFormView.showError(LocaleController.getString("failedLoadAccountError", R.string.failedLoadAccountError));
+                    isSending = false;
+                }
+            }
+
+            @Override
+            public void onFailure(Call<AccountStatus> call, Throwable t) {
+                if (NetworkUtil.isNetworkAvailable(ClaimRewardActivity.this)) {
+                    showNodeConnectionErrorAlert();
+                } else {
+                    step = 4;
+                    showPasswordFormView(true);
+                    if (passwordFormView != null)
+                        passwordFormView.showError(LocaleController.getString("failedLoadAccountError", R.string.failedLoadAccountError));
+                }
+                isSending = false;
+            }
+        });
+    }
+
+    private void signTransaction() {
+        if (txProgressView == null || accountStatus == null) return;
+
+        String txPath = getFilesDir() + "/" + FileUtil.getTxFileName(currentTimeMillis);
+
+        WalletManager.getInstance().sign(new ResultHandler(this), accountName, passwordFormView.getValue(), txPath, accountStatus);
+    }
+
+    private void send(JsonObject signedTx) {
+        LcdService lcdService = ApiUtils.getLcdService();
+
+        if (signedTx != null) {
+            lcdService.sendTransaction(signedTx).enqueue(new Callback<SendResult>() {
+                @Override
+                public void onResponse(Call<SendResult> call, Response<SendResult> response) {
+                    if (response.code() == 200 && response.body() != null) {
+                        hash = response.body().getHash();
+                        getLatestBlock();
+                    } else {
+                        String err;
+                        try {
+                            String errorBody = "";
+                            if (response.errorBody() != null)
+                                errorBody = response.errorBody().string();
+                            err = LocaleController.getString("failedClaimReward", R.string.failedClaimReward) + "\nCode = " + String.valueOf(response.code()) + "\n" + errorBody;
+                        } catch (Exception e) {
+                            err = LocaleController.getString("unsupportTx", R.string.unsupportTx);
+                        }
+                        if (txProgressView != null) txProgressView.showError(err);
+                        onSendFinished();
+                    }
+
+                }
+
+                @Override
+                public void onFailure(Call<SendResult> call, Throwable t) {
+                    if (txProgressView == null) return;
+                    if (NetworkUtil.isNetworkAvailable(ClaimRewardActivity.this)) {
+                        showNodeConnectionErrorAlert();
+                    } else {
+                        Toast.makeText(ClaimRewardActivity.this, LocaleController.getString("networkError", R.string.networkError), Toast.LENGTH_LONG).show();
+                    }
+                    onSendFinished();
+                }
+            });
+        } else {
+            if (txProgressView != null)
+                txProgressView.showError(LocaleController.getString("nullPointerTx", R.string.nullPointerTx));
+            onSendFinished();
+        }
+    }
+
+    private void getLatestBlock() {
+        new Handler().postDelayed(new Runnable() {
+            public void run() {
+                LcdService lcdService = ApiUtils.getLcdService();
+                lcdService.getLatestBlock().enqueue(new Callback<BlockInfo>() {
+                    @Override
+                    public void onResponse(Call<BlockInfo> call, Response<BlockInfo> response) {
+                        if (response.code() == 200 && response.body() != null && response.body().getBlock() != null && response.body().getBlock().getHeader() != null) {
+                            if (requestBlockHeight < 0)
+                                requestBlockHeight = response.body().getBlock().getHeader().getHeight();
+
+                            if (requestBlockHeight + GET_TRANSACTION_RESULT_MAX_TRY_COUNT <= response.body().getBlock().getHeader().getHeight()) {
+                                txProgressView.showError(LocaleController.getString("failedClaimReward", R.string.failedClaimReward) + "\n\nRequest block height : " + requestBlockHeight + "\nLast checked block height : " + response.body().getBlock().getHeader().getHeight());
+                                onSendFinished();
+                            } else {
+                                getTransactionResult();
+                            }
+
+                        } else {
+                            txProgressView.showError(LocaleController.getString("failedClaimReward", R.string.failedClaimReward));
+                            onSendFinished();
+                        }
+                    }
+
+                    @Override
+                    public void onFailure(Call<BlockInfo> call, Throwable t) {
+                        if (txProgressView == null) return;
+                        if (NetworkUtil.isNetworkAvailable(ClaimRewardActivity.this)) {
+                            txProgressView.showError(LocaleController.getString("failedClaimReward", R.string.failedClaimReward));
+                        } else {
+                            txProgressView.showError(LocaleController.getString("networkError", R.string.networkError));
+                        }
+                        onSendFinished();
+                    }
+                });
+            }
+        }, GET_TRANSACTION_RESULT_DELAY);
+    }
+
+    private void getTransactionResult() {
+        if (hash == null || hash.equals("")) {
+            txProgressView.showError(LocaleController.getString("failedStake", R.string.failedStake));
+            return;
+        }
+
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getTransactionDetail(hash).enqueue(new Callback<DefaultHistory>() {
+            @Override
+            public void onResponse(Call<DefaultHistory> call, Response<DefaultHistory> response) {
+                if (response.errorBody() != null) {
+                    try {
+                        if (response.errorBody().string().contains("not found")) {
+                            getLatestBlock();
+                        } else {
+                            txProgressView.showError(LocaleController.getString("failedClaimReward", R.string.failedClaimReward));
+                            onSendFinished();
+                        }
+                    } catch (Exception e) {
+                        txProgressView.showError(LocaleController.getString("failedClaimReward", R.string.failedClaimReward));
+                        onSendFinished();
+                    }
+                } else {
+                    if (response.code() == 200 && response.body() != null) {
+                        updateTxProgress(response.body().getResult(), response.body().getHash());
+                        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.transactionCreated, response.body().getHash());
+                        FileUtil.deleteTx(ClaimRewardActivity.this, currentTimeMillis);
+                    } else {
+                        txProgressView.showError(LocaleController.getString("failedClaimReward", R.string.failedClaimReward));
+                    }
+                    onSendFinished();
+                }
+            }
+
+            @Override
+            public void onFailure(Call<DefaultHistory> call, Throwable t) {
+                if (txProgressView == null) return;
+                if (NetworkUtil.isNetworkAvailable(ClaimRewardActivity.this)) {
+                    txProgressView.showError(LocaleController.getString("failedClaimReward", R.string.failedClaimReward));
+                } else {
+                    txProgressView.showError(LocaleController.getString("networkError", R.string.networkError));
+                }
+                onSendFinished();
+            }
+        });
+    }
+
+    private void makeTransactionClaimReward() {
+        if (passwordFormView == null) return;
+
+        WalletManager.getInstance().makeTxClaimReward(new ResultHandler(this), address, passwordFormView.getValue(), feeFormView.getValue());
+    }
+
+    private void onTransactionCreatedResult(CmdResult cmdResult) {
+        String errMsg = CmdResultChecker.checkCmdResult(cmdResult);
+
+        if (errMsg == null) {
+            setCurrentTimeMillis();
+            if (FileUtil.writeTx(ClaimRewardActivity.this, currentTimeMillis, cmdResult.getData())) {
+                signTransaction();
+            } else {
+                if (txProgressView != null)
+                    txProgressView.showError(LocaleController.getString("failedCreateTx", R.string.failedCreateTx));
+                isSending = false;
+            }
+        } else {
+            step = 1;
+            showPasswordFormView(true);
+            if (passwordFormView != null) passwordFormView.showError(errMsg);
+            isSending = false;
+        }
+    }
+
+    private void onTransactionSignedResult(CmdResult cmdResult) {
+        String err = CmdResultChecker.checkCmdResult(cmdResult);
+
+        if (err == null) {
+            JsonObject tx = Parser.getRawTransaction(cmdResult.getData());
+            if (tx != null) {
+                clearPasswordForm();
+                send(tx);
+                return;
+            } else {
+                err = LocaleController.getString("unsupportTx", R.string.unsupportTx);
+            }
+        }
+        step = 1;
+        showPasswordFormView(true);
+        if (passwordFormView != null) passwordFormView.showError(err);
+        isSending = false;
+    }
+
+    private void clearPasswordForm() {
+        if (passwordFormView == null) return;
+        passwordFormView.clear();
+    }
+
+    private void varifyFee(String fee) {
+        if (feeFormView == null) return;
+        if (coins == null) {
+            needToGoNext = true;
+            showProgress();
+            return;
+        }
+        if (fee.length() != 0) {
+            try {
+                BigDecimal bamount = new BigDecimal(fee);
+                if (bamount.compareTo(new BigDecimal("0.0005")) < 0) {
+                    feeFormView.showError(LocaleController.getString("feeNotEnoughError", R.string.feeNotEnoughError));
+                } else if (bamount.compareTo(BigDecimal.ONE) == 1) {
+                    feeFormView.showError(LocaleController.getString("feeInvalidError", R.string.feeInvalidError));
+                } else {
+                    if (bamount.compareTo(new BigDecimal(TokenUtil.getCoin(coins, Blockchain.getInstance().getReserveDenom()).getAmount())) < 1) {
+                        scrollView.smoothScrollTo(0, 0);
+                        hideKeyboard();
+                        step = 1;
+                        showPasswordFormView(false);
+                        if (hasPassword() && isEnabledFingerprint(accountName)) checkFingerprint();
+                    } else {
+                        feeFormView.showError(LocaleController.getString("notEnoughBalance", R.string.notEnoughBalance));
+                    }
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+                feeFormView.showError(LocaleController.getString("amountInvalidError", R.string.amountInvalidError));
+            }
+        } else {
+            feeFormView.showError(LocaleController.getString("amountEmptyError", R.string.amountEmptyError));
+        }
+    }
+
+    private void varifyPassword(String pwd) {
+        if (passwordFormView == null) return;
+        if (pwd == null || pwd.length() < 8) {
+            passwordFormView.showError(LocaleController.getString("pwdInvalidError", R.string.pwdInvalidError));
+        } else {
+            step = 2;
+            showTxProgressView();
+            getAccountStatus();
+        }
+    }
+
+    private void showFeeFormView() {
+        hideKeyboard();
+        feeFormView = new FeeFormView(this);
+        contentsLayout.addView(feeFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        AnimUtil.changeView(currentView, feeFormView, false);
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        currentView = feeFormView;
+    }
+
+    private void showPasswordFormView(boolean isMoveToBack) {
+        if (passwordFormView == null) {
+            passwordFormView = new DefaultFormView(this, true, true, false, LocaleController.getString("password", R.string.password), LocaleController.getString("differentWalletsDifferentPasswords", R.string.differentWalletsDifferentPasswords), null, null);
+            contentsLayout.addView(passwordFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(passwordFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, passwordFormView, false);
+        }
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        if (!isEnabledFingerprint(accountName)) passwordFormView.setFocus();
+        currentView = passwordFormView;
+    }
+
+    private void showTxProgressView() {
+        hideKeyboard();
+        txProgressView = new TxProgressView(this);
+        contentsLayout.addView(txProgressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        AnimUtil.changeView(currentView, txProgressView, false);
+        nextButton.update(LocaleController.getString("done", R.string.done), R.drawable.btn_grey);
+        currentView = txProgressView;
+    }
+
+    private void updateTxProgress(boolean result, String txHash) {
+        if (txProgressView == null) return;
+        txProgressView.update(TxProgressView.TYPE_CLAIM_REWARDS, result, txHash, null, null, null, NumberFormatter.getNumber(rewards), NumberFormatter.getNumber(feeFormView.getValueOrigin()), "", address);
+    }
+
+    private void onSendFinished() {
+        isSending = false;
+        nextButton.update(LocaleController.getString("done", R.string.done), R.drawable.btn_radius4_blue);
+    }
+
+    private boolean hasPassword() {
+        SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        String pwd = pref.getString("W-" + accountName.replaceAll(" ", ""), "");
+        return !pwd.equals("");
+    }
+
+    private void setCurrentTimeMillis() {
+        currentTimeMillis = TimeUtil.getCurrentTimeMillis();
+    }
+
+    private View.OnClickListener onClickNextListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            switch (step) {
+                case 0:
+                    if (feeFormView != null) varifyFee(feeFormView.getValueOrigin());
+                    break;
+                case 1:
+                    if (passwordFormView != null) varifyPassword(passwordFormView.getValue());
+                    break;
+                case 2:
+                    if (!isSending) finish();
+                    break;
+            }
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/CreateAccountActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/CreateAccountActivity.java
new file mode 100644
index 000000000..011e5aadc
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/CreateAccountActivity.java
@@ -0,0 +1,531 @@
+package com.lunamint.lunagram.ui;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.Message;
+import android.view.MenuItem;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.FrameLayout;
+import android.widget.RelativeLayout;
+import android.widget.ScrollView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.secure.SecureKeyStore;
+import com.lunamint.lunagram.ui.component.DefaultButton;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+import com.lunamint.lunagram.ui.view.DefaultFormView;
+import com.lunamint.lunagram.ui.view.CreateWalletWarningView;
+import com.lunamint.lunagram.ui.view.SeedConfirmView;
+import com.lunamint.lunagram.ui.view.SelectWalletTypeFormView;
+import com.lunamint.lunagram.ui.view.TelegramTransferOnboardingView;
+import com.lunamint.wallet.model.AccountInfo;
+import com.lunamint.wallet.model.AccountInfoWithSeed;
+import com.lunamint.wallet.WalletManager;
+import com.lunamint.wallet.model.CmdResult;
+import com.lunamint.wallet.utils.AnimUtil;
+import com.lunamint.wallet.utils.Parser;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.support.fingerprint.FingerprintManagerCompat;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.util.ArrayList;
+
+public class CreateAccountActivity extends LunagramBaseActivity {
+
+    public final static int TYPE_CREATE_NEW_ACCOUNT = 0;
+    public final static int TYPE_IMPORT_EXISTING_WALLET = 1;
+
+    private int step = 0;
+
+    private int type = -1;
+
+    private boolean isFirstAccount = false;
+
+    private String seed;
+    private String accountName = "";
+
+    private ScrollView scrollView;
+    private FrameLayout contentsLayout;
+    private SelectWalletTypeFormView selectWalletTypeFormView;
+    private DefaultFormView walletNameFormView;
+    private DefaultFormView seedFormView;
+    private DefaultFormView passwordFormView;
+    private DefaultFormView repeatPasswordFormView;
+    private CreateWalletWarningView warningView;
+    private SeedConfirmView seedConfirmView;
+    private TelegramTransferOnboardingView telegramTransferOnboardingView;
+
+    private DefaultButton nextButton;
+
+    private View currentView;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("createWallet", R.string.createWallet));
+        if(getWindow() != null) getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);
+
+        isFirstAccount = getIntent().getBooleanExtra("isFirstAccount", false);
+
+        RelativeLayout mainLayout = new RelativeLayout(this);
+
+        scrollView = new ScrollView(this);
+        mainLayout.addView(scrollView, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        contentsLayout = new FrameLayout(this);
+        contentsLayout.setPadding(0, 0, 0, AndroidUtilities.dp(70));
+        scrollView.addView(contentsLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        selectWalletTypeFormView = new SelectWalletTypeFormView(this, new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startCreateWallet(v.getId());
+            }
+        });
+        contentsLayout.addView(selectWalletTypeFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        nextButton = new DefaultButton(this, 12, true, LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue, onClickNextListener);
+        mainLayout.addView(nextButton, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 20, 6, 20, 20));
+        ((RelativeLayout.LayoutParams) nextButton.getLayoutParams()).addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
+        nextButton.setVisibility(View.INVISIBLE);
+
+        currentView = selectWalletTypeFormView;
+
+        setContentView(mainLayout);
+    }
+
+    @Override
+    protected void onPause() {
+        clearForm();
+        super.onPause();
+    }
+
+    @Override
+    protected void onDestroy() {
+        if (seedFormView != null) seedFormView.clear();
+        super.onDestroy();
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if (item.getItemId() == android.R.id.home) {
+            moveToBack();
+        }
+        return false;
+    }
+
+    @Override
+    public void onBackPressed() {
+        moveToBack();
+    }
+
+    @Override
+    protected void handleMessage(Message msg) {
+        super.handleMessage(msg);
+        CmdResult cmdResult = ((CmdResult) msg.getData().getSerializable("result"));
+        switch (msg.what) {
+            case WalletManager.GET_ACCOUNT_LIST:
+                onGetAccountListResult(cmdResult);
+                break;
+            case WalletManager.CREATE_ACCOUNT:
+                onCreateAccountResult(cmdResult);
+                break;
+        }
+    }
+
+    private void startCreateWallet(int type) {
+        this.type = type;
+
+        if (this.type == CreateAccountActivity.TYPE_CREATE_NEW_ACCOUNT) {
+            showWalletNameForm(false);
+        } else {
+            showWarningSeedView(false);
+        }
+        if (selectWalletTypeFormView != null) contentsLayout.removeView(selectWalletTypeFormView);
+        selectWalletTypeFormView = null;
+    }
+
+    private void createAccount() {
+        if (walletNameFormView == null) return;
+        showProgress();
+        if (type == CreateAccountActivity.TYPE_CREATE_NEW_ACCOUNT) {
+            WalletManager.getInstance().createAccount(new ResultHandler(this), walletNameFormView.getValue(), passwordFormView.getValue());
+        } else {
+            WalletManager.getInstance().createAccount(new ResultHandler(this), seedFormView.getValue().replaceAll("\n", ""), walletNameFormView.getValue(), passwordFormView.getValue());
+        }
+    }
+
+    private void clearForm() {
+        if (passwordFormView != null) passwordFormView.clear();
+        if (repeatPasswordFormView != null) repeatPasswordFormView.clear();
+    }
+
+    private void onGetAccountListResult(CmdResult cmdResult) {
+        String err_msg = null;
+
+        if (cmdResult == null) {
+            err_msg = LocaleController.getString("unknownError", R.string.unknownError);
+        } else if (cmdResult.getErrMsg() != null && !cmdResult.getErrMsg().contains("no such file or directory")) {
+            err_msg = cmdResult.getErrMsg();
+        } else {
+            String requestName = accountName.replaceAll(" ", "");
+            ArrayList<AccountInfo> accountList = Parser.getAccountList(cmdResult.getData());
+            for (AccountInfo accountInfo : accountList) {
+                String name = accountInfo.getName().replaceAll(" ", "");
+                if (name.equals(requestName)) {
+                    err_msg = LocaleController.getString("accountNameInvalidError", R.string.accountNameInvalidError);
+                }
+            }
+        }
+
+        if (err_msg == null) {
+            if (type == CreateAccountActivity.TYPE_CREATE_NEW_ACCOUNT) {
+                step = 1;
+            } else {
+                step = 3;
+            }
+            showPasswordFormView(false);
+
+        } else {
+            if (walletNameFormView != null) walletNameFormView.showError(err_msg);
+        }
+        hideProgress();
+    }
+
+    private void onCreateAccountResult(CmdResult cmdResult) {
+        hideProgress();
+        if (cmdResult == null) {
+            if (repeatPasswordFormView != null)
+                repeatPasswordFormView.showError(LocaleController.getString("unknownError", R.string.unknownError));
+        } else if (cmdResult.getErrMsg() != null) {
+            if (repeatPasswordFormView != null)
+                repeatPasswordFormView.showError(cmdResult.getErrMsg());
+        } else {
+            AccountInfoWithSeed accountInfo;
+            if (type == CreateAccountActivity.TYPE_CREATE_NEW_ACCOUNT) {
+                accountInfo = Parser.getAccountInfoWithSeed(cmdResult.getData(), true);
+            } else {
+                accountInfo = Parser.getAccountInfoWithSeed(cmdResult.getData(), false);
+            }
+            if (accountInfo != null) {
+                hideKeyboard();
+                if (type == CreateAccountActivity.TYPE_CREATE_NEW_ACCOUNT) {
+                    step = 3;
+                    seed = accountInfo.getSeed();
+                    showWarningSeedView(false);
+                } else {
+                    step = 5;
+                    showOnboardingView(false);
+                }
+
+                if (Build.VERSION.SDK_INT >= 23 && SecureKeyStore.getInstance().isSupported()) {
+                    try {
+                        FingerprintManagerCompat fingerprintManager = FingerprintManagerCompat.from(ApplicationLoader.applicationContext);
+                        if (fingerprintManager.isHardwareDetected()) {
+                            String encrypted = SecureKeyStore.getInstance().encrypt(getApplicationContext(), passwordFormView.getValue());
+                            SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                            pref.edit().putString("W-" + accountInfo.getName().replaceAll(" ", ""), encrypted).commit();
+                        }
+                    } catch (Throwable e) {
+                        // ignore
+                    }
+                }
+
+                if (isFirstAccount)
+                    NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.accountChanged);
+            } else {
+                if (repeatPasswordFormView != null)
+                    repeatPasswordFormView.showError(LocaleController.getString("unknownError", R.string.unknownError));
+            }
+
+            cmdResult.clear();
+        }
+
+        clearForm();
+    }
+
+    private void varifyAccountName(String accountName) {
+        showProgress();
+        if (accountName == null || accountName.length() <= 0) {
+            if (walletNameFormView != null)
+                walletNameFormView.showError(LocaleController.getString("accountNameEmptyError", R.string.accountNameEmptyError));
+            hideProgress();
+            return;
+        }
+        this.accountName = accountName;
+        WalletManager.getInstance().getAccountList(new ResultHandler(this));
+    }
+
+    private void varifySeed(String seed) {
+        if (seed == null || seed.length() == 0) {
+            if (seedFormView != null)
+                seedFormView.showError(LocaleController.getString("seedInvalidError", R.string.seedInvalidError));
+        } else {
+            step = 2;
+            showWalletNameForm(false);
+        }
+    }
+
+    private void varifyPassword(String pwd) {
+        if (passwordFormView == null) return;
+        if (pwd == null || pwd.length() < 8) {
+            passwordFormView.showError(LocaleController.getString("pwdInvalidError", R.string.pwdInvalidError));
+        } else {
+            if (type == CreateAccountActivity.TYPE_CREATE_NEW_ACCOUNT) {
+                step = 2;
+            } else {
+                step = 4;
+            }
+            showPasswordRepeatFormView(false);
+        }
+    }
+
+    private void varifyRepeatPassword(String pwd) {
+        if (passwordFormView == null) return;
+        if (!passwordFormView.getValue().equals(pwd)) {
+            if (repeatPasswordFormView != null)
+                repeatPasswordFormView.showError(LocaleController.getString("passwordNotMatchError", R.string.passwordNotMatchError));
+        } else {
+            createAccount();
+        }
+    }
+
+    private void showSeedForm(boolean isMoveToBack) {
+        if (seedFormView == null) {
+            seedFormView = new DefaultFormView(this, true, true, true, LocaleController.getString("inputWordSeed", R.string.inputWordSeed), LocaleController.getString("inputSeedDesc", R.string.inputSeedDesc), null, null);
+            contentsLayout.addView(seedFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(seedFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, seedFormView, false);
+        }
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        seedFormView.setFocus();
+        currentView = seedFormView;
+    }
+
+    private void showWalletNameForm(boolean isMoveToBack) {
+        if (walletNameFormView == null) {
+            walletNameFormView = new DefaultFormView(this, true, false, false, LocaleController.getString("walletName", R.string.walletName), LocaleController.getString("chooseYourWallet", R.string.chooseYourWallet), null, null);
+            contentsLayout.addView(walletNameFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(walletNameFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, walletNameFormView, false);
+            if (type == CreateAccountActivity.TYPE_CREATE_NEW_ACCOUNT)
+                AnimUtil.showView(nextButton);
+        }
+
+        walletNameFormView.setFocus();
+        currentView = walletNameFormView;
+    }
+
+    private void showPasswordFormView(boolean isMoveToBack) {
+        if (passwordFormView == null) {
+            passwordFormView = new DefaultFormView(CreateAccountActivity.this, true, true, false, LocaleController.getString("setPassword", R.string.setPassword), LocaleController.getString("enterPassword", R.string.enterPassword), null, null);
+            contentsLayout.addView(passwordFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(passwordFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, passwordFormView, false);
+        }
+        passwordFormView.setFocus();
+        currentView = passwordFormView;
+
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+    }
+
+    private void showPasswordRepeatFormView(boolean isMoveToBack) {
+        if (repeatPasswordFormView == null) {
+            repeatPasswordFormView = new DefaultFormView(this, true, true, false, LocaleController.getString("repeatPassword", R.string.repeatPassword), LocaleController.getString("doubleCheckPassword", R.string.doubleCheckPassword), null, null);
+            contentsLayout.addView(repeatPasswordFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(repeatPasswordFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, repeatPasswordFormView, false);
+        }
+        repeatPasswordFormView.setFocus();
+        currentView = repeatPasswordFormView;
+
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+    }
+
+    private void showWarningSeedView(boolean isMoveToBack) {
+        if (warningView == null) {
+            if (type == CreateAccountActivity.TYPE_IMPORT_EXISTING_WALLET) {
+                AnimUtil.showView(nextButton);
+            }
+            warningView = new CreateWalletWarningView(this, type);
+            contentsLayout.addView(warningView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(warningView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, warningView, false);
+        }
+
+        currentView = warningView;
+
+        nextButton.update(LocaleController.getString("iUnderstand", R.string.iUnderstand), R.drawable.btn_radius4_red);
+    }
+
+    private void showSeedConfirmView(boolean isMoveToBack) {
+        if (seedConfirmView == null) {
+            seedConfirmView = new SeedConfirmView(this, seed);
+            contentsLayout.addView(seedConfirmView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(seedConfirmView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, seedConfirmView, false);
+        }
+        currentView = seedConfirmView;
+
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+    }
+
+    private void showOnboardingView(boolean isMoveToBack) {
+        if (telegramTransferOnboardingView == null) {
+            telegramTransferOnboardingView = new TelegramTransferOnboardingView(this);
+            contentsLayout.addView(telegramTransferOnboardingView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(telegramTransferOnboardingView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, telegramTransferOnboardingView, false);
+        }
+
+        currentView = telegramTransferOnboardingView;
+
+        nextButton.update(LocaleController.getString("done", R.string.done), R.drawable.btn_radius4_blue);
+    }
+
+    private void moveToBack() {
+        if (type == CreateAccountActivity.TYPE_CREATE_NEW_ACCOUNT) {
+            switch (step) {
+                case 0:
+                    finish();
+                    break;
+                case 1:
+                    step = 0;
+                    showWalletNameForm(true);
+                    break;
+                case 2:
+                    step = 1;
+                    showPasswordFormView(true);
+                    break;
+                case 5:
+                    finish();
+                    break;
+            }
+        } else {
+            switch (step) {
+                case 0:
+                    finish();
+                    break;
+                case 1:
+                    step = 0;
+                    showWarningSeedView(true);
+                    break;
+                case 2:
+                    step = 1;
+                    showSeedForm(true);
+                    break;
+                case 3:
+                    step = 2;
+                    showWalletNameForm(true);
+                    break;
+                case 4:
+                    step = 3;
+                    showPasswordFormView(true);
+                    break;
+                case 5:
+                    finish();
+                    break;
+            }
+        }
+    }
+
+    private View.OnClickListener onClickNextListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            if (type == CreateAccountActivity.TYPE_CREATE_NEW_ACCOUNT) {
+                switch (step) {
+                    case 0:
+                        if (walletNameFormView != null)
+                            varifyAccountName(walletNameFormView.getValue());
+                        break;
+                    case 1:
+                        if (passwordFormView != null)
+                            varifyPassword(passwordFormView.getValue());
+                        break;
+                    case 2:
+                        if (repeatPasswordFormView != null)
+                            varifyRepeatPassword(repeatPasswordFormView.getValue());
+                        break;
+                    case 3:
+                        scrollView.smoothScrollTo(0, 0);
+                        step = 4;
+                        showSeedConfirmView(false);
+                        seed = "";
+                        break;
+                    case 4:
+                        scrollView.smoothScrollTo(0, 0);
+                        step = 5;
+                        showOnboardingView(false);
+                        break;
+                    case 5:
+                        finish();
+                        break;
+                }
+            } else {
+                switch (step) {
+                    case 0:
+                        step = 1;
+                        showSeedForm(false);
+                        break;
+                    case 1:
+                        if (seedFormView != null)
+                            varifySeed(seedFormView.getValue());
+                        break;
+                    case 2:
+                        if (walletNameFormView != null)
+                            varifyAccountName(walletNameFormView.getValue());
+                        break;
+                    case 3:
+                        if (passwordFormView != null)
+                            varifyPassword(passwordFormView.getValue());
+                        break;
+                    case 4:
+                        if (repeatPasswordFormView != null)
+                            varifyRepeatPassword(repeatPasswordFormView.getValue());
+                        break;
+                    case 5:
+                        finish();
+                        break;
+                }
+            }
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/DeleteAccountActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/DeleteAccountActivity.java
new file mode 100644
index 000000000..eeeeafb0e
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/DeleteAccountActivity.java
@@ -0,0 +1,175 @@
+package com.lunamint.lunagram.ui;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.os.Message;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.RelativeLayout;
+import android.widget.ScrollView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.secure.SecureKeyStore;
+import com.lunamint.lunagram.ui.component.DefaultButton;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+import com.lunamint.lunagram.ui.view.DefaultFormView;
+import com.lunamint.wallet.WalletManager;
+import com.lunamint.wallet.model.CmdResult;
+import com.lunamint.wallet.utils.AnimUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class DeleteAccountActivity extends LunagramBaseActivity {
+
+    private String accountName;
+
+    private ScrollView scrollView;
+    private FrameLayout contentsLayout;
+    private DefaultFormView passwordFormView;
+
+    private DefaultButton nextButton;
+
+    private View currentView;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("deleteWallet", R.string.deleteWallet));
+
+        accountName = getIntent().getStringExtra("accountName");
+
+        RelativeLayout mainLayout = new RelativeLayout(this);
+
+        scrollView = new ScrollView(this);
+        mainLayout.addView(scrollView, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        contentsLayout = new FrameLayout(this);
+        contentsLayout.setPadding(0, 0, 0, AndroidUtilities.dp(70));
+        scrollView.addView(contentsLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        nextButton = new DefaultButton(this, 12, true, LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue, onClickNextListener);
+        mainLayout.addView(nextButton, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 20, 6, 20, 20));
+        ((RelativeLayout.LayoutParams) nextButton.getLayoutParams()).addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
+
+        setContentView(mainLayout);
+
+        showPasswordFormView(false);
+        if (hasPassword() && isEnabledFingerprint(accountName)) checkFingerprint();
+    }
+
+    @Override
+    protected void onPause() {
+        clearForm();
+        super.onPause();
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+    }
+
+    @Override
+    protected void onCheckFingerprintDone() {
+        super.onCheckFingerprintDone();
+        if (passwordFormView == null) return;
+
+        SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        String pwd = SecureKeyStore.getInstance().decrypt(getApplicationContext(), pref.getString("W-" + accountName.replaceAll(" ", ""), ""));
+        passwordFormView.setValue(pwd);
+        passwordFormView.clearFocus();
+
+        if (pwd.length() > 0) varifyPassword(pwd);
+    }
+
+    @Override
+    protected void handleMessage(Message msg) {
+        super.handleMessage(msg);
+        CmdResult cmdResult = ((CmdResult) msg.getData().getSerializable("result"));
+        switch (msg.what) {
+            case WalletManager.DELETE_ACCOUNT:
+                onDeleteAccountResult(cmdResult);
+                break;
+        }
+    }
+
+    private void deleteAccount() {
+        if (passwordFormView == null || accountName == null || accountName.equals("")) return;
+        showProgress();
+        WalletManager.getInstance().deleteAccount(new ResultHandler(this), accountName, passwordFormView.getValue());
+    }
+
+    private void clearForm() {
+        if (passwordFormView != null) passwordFormView.clear();
+    }
+
+    private void onDeleteAccountResult(CmdResult cmdResult) {
+        hideProgress();
+
+        clearForm();
+
+        if (cmdResult == null) {
+            if (passwordFormView != null)
+                passwordFormView.showError(LocaleController.getString("unknownError", R.string.unknownError));
+        } else if (cmdResult.getErrMsg() != null) {
+            if (cmdResult.getErrMsg().contains("Key deleted forever")) {
+                SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                pref.edit().remove("W-" + accountName.replaceAll(" ", "")).commit();
+
+                NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.accountChanged);
+
+                finish();
+            } else if (cmdResult.getErrMsg().contains("invalid account password")) {
+                if (passwordFormView != null)
+                    passwordFormView.showError(LocaleController.getString("incorrectPassword", R.string.incorrectPassword));
+            }
+            cmdResult.clear();
+        }
+    }
+
+    private void varifyPassword(String pwd) {
+        if (passwordFormView == null) return;
+        if (pwd == null || pwd.length() < 8) {
+            passwordFormView.showError(LocaleController.getString("pwdInvalidError", R.string.pwdInvalidError));
+        } else {
+            deleteAccount();
+        }
+    }
+
+    private void showPasswordFormView(boolean isMoveToBack) {
+        if (passwordFormView == null) {
+            passwordFormView = new DefaultFormView(DeleteAccountActivity.this, true, true, false, LocaleController.getString("setPassword", R.string.setPassword), LocaleController.getString("enterPassword", R.string.enterPassword), null, null);
+            contentsLayout.addView(passwordFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(passwordFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, passwordFormView, false);
+        }
+        if (!isEnabledFingerprint(accountName)) passwordFormView.setFocus();
+        currentView = passwordFormView;
+
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+    }
+
+    private boolean hasPassword() {
+        SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        String pwd = pref.getString("W-" + accountName.replaceAll(" ", ""), "");
+        return !pwd.equals("");
+    }
+
+    private View.OnClickListener onClickNextListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            if (passwordFormView != null)
+                varifyPassword(passwordFormView.getValue());
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/EnableFingerprintActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/EnableFingerprintActivity.java
new file mode 100644
index 000000000..a5909fac5
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/EnableFingerprintActivity.java
@@ -0,0 +1,108 @@
+package com.lunamint.lunagram.ui;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ScrollView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.secure.SecureKeyStore;
+import com.lunamint.lunagram.ui.component.DefaultButton;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+import com.lunamint.lunagram.ui.view.DefaultFormView;
+import com.lunamint.wallet.utils.AnimUtil;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class EnableFingerprintActivity extends LunagramBaseActivity {
+
+
+    private String accountName = "";
+
+    private FrameLayout contentsLayout;
+    private DefaultFormView passwordFormView;
+
+    private DefaultButton nextButton;
+
+    private View currentView;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("enableFingerprint", R.string.enableFingerprint));
+
+        accountName = getIntent().getStringExtra("accountName");
+
+        LinearLayout mainLayout = new LinearLayout(this);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+
+        ScrollView scrollView = new ScrollView(this);
+        mainLayout.addView(scrollView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 0, 1.0f));
+
+        contentsLayout = new FrameLayout(this);
+        scrollView.addView(contentsLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        nextButton = new DefaultButton(this, 4, true, LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue, onClickNextListener);
+        mainLayout.addView(nextButton, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 20, 6, 20, 20));
+
+        setContentView(mainLayout);
+
+        showPasswordFormView(false);
+    }
+
+    @Override
+    protected void onPause() {
+        clearPasswordForm();
+        super.onPause();
+    }
+
+    private void clearPasswordForm() {
+        if (passwordFormView == null) return;
+        passwordFormView.clear();
+    }
+
+    private void varifyPassword(String pwd) {
+        if (passwordFormView == null) return;
+        if (pwd == null || pwd.length() < 8) {
+            passwordFormView.showError(LocaleController.getString("pwdInvalidError", R.string.pwdInvalidError));
+        } else {
+            SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+            if (SecureKeyStore.getInstance().decrypt(getApplicationContext(), pref.getString("W-" + accountName.replaceAll(" ", ""), "")).equals(passwordFormView.getValue())) {
+                setEnabledFingerprint(accountName, true);
+                hideKeyboard();
+                finish();
+            } else {
+                passwordFormView.showError(LocaleController.getString("incorrectPassword", R.string.incorrectPassword));
+            }
+        }
+    }
+
+    private void showPasswordFormView(boolean isMoveToBack) {
+        if (passwordFormView == null) {
+            passwordFormView = new DefaultFormView(this, true, true, false, LocaleController.getString("password", R.string.password), LocaleController.getString("differentWalletsDifferentPasswords", R.string.differentWalletsDifferentPasswords), null, null);
+            contentsLayout.addView(passwordFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(passwordFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, passwordFormView, false);
+        }
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        passwordFormView.setFocus();
+        currentView = passwordFormView;
+    }
+
+    private View.OnClickListener onClickNextListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            if (passwordFormView != null) varifyPassword(passwordFormView.getValue());
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/GovernanceActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/GovernanceActivity.java
new file mode 100644
index 000000000..6c7582f41
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/GovernanceActivity.java
@@ -0,0 +1,43 @@
+package com.lunamint.lunagram.ui;
+
+import android.os.Bundle;
+import android.support.design.widget.TabLayout;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.view.ViewPager;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.adapter.GovernancePagerAdapter;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+
+import org.telegram.messenger.LocaleController;
+
+public class GovernanceActivity extends LunagramBaseActivity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        setContentView(R.layout.fragment_viewpager);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("governance", R.string.governance));
+
+        TabLayout tabLayout = (TabLayout) findViewById(R.id.tab_layout);
+        tabLayout.setSelectedTabIndicatorColor(ActivityCompat.getColor(this, R.color.tab_indicator));
+        tabLayout.setTabTextColors(ActivityCompat.getColor(this, R.color.tab_text), ActivityCompat.getColor(this, R.color.tab_text_selected));
+
+        ViewPager viewPager = (ViewPager) findViewById(R.id.viewpager);
+
+        GovernancePagerAdapter adapter = new GovernancePagerAdapter(getSupportFragmentManager(), getIntent().getStringExtra("accountName"), getIntent().getStringExtra("address"));
+        viewPager.setAdapter(adapter);
+        viewPager.setOffscreenPageLimit(3);
+        viewPager.setBackgroundColor(ActivityCompat.getColor(this, R.color.bg_default));
+
+        tabLayout.setupWithViewPager(viewPager);
+        String[] tabText = {LocaleController.getString("active", R.string.active), LocaleController.getString("complete", R.string.complete), LocaleController.getString("pending", R.string.pending)};
+
+        for (int i = 0; tabText.length > i; i++) {
+            tabLayout.getTabAt(i).setText(tabText[i]);
+        }
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/ManageWalletActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/ManageWalletActivity.java
new file mode 100644
index 000000000..5416f38d3
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/ManageWalletActivity.java
@@ -0,0 +1,199 @@
+package com.lunamint.lunagram.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.graphics.drawable.ColorDrawable;
+import android.os.Bundle;
+import android.os.Message;
+import android.view.Gravity;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.ProgressBar;
+import android.widget.Toast;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.adapter.AccountListAdapter;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+import com.lunamint.wallet.model.AccountInfo;
+import com.lunamint.wallet.WalletManager;
+import com.lunamint.wallet.model.CmdResult;
+import com.lunamint.wallet.utils.Parser;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.ui.ActionBar.AlertDialog;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.util.ArrayList;
+
+public class ManageWalletActivity extends LunagramBaseActivity {
+
+    private ArrayList<AccountInfo> accountList;
+
+    private AccountListAdapter accountListAdapter;
+
+    private ListView listView;
+    private LinearLayout loadingLayout;
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        getMenuInflater().inflate(R.menu.menu_plus, menu);
+        return true;
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if (item.getItemId() == R.id.action_plus) {
+            showCreateAccountActivity();
+            return true;
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("wallets", R.string.wallets));
+
+        LinearLayout mainLayout = new LinearLayout(this);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+
+        FrameLayout frameLayout = new FrameLayout(this);
+        mainLayout.addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        listView = new ListView(this);
+        listView.setOnItemClickListener(onItemClickListener);
+        listView.setOnItemLongClickListener(onItemLongClickListener);
+        listView.setDivider(new ColorDrawable(0x88E4E9FE));
+        listView.setDividerHeight(AndroidUtilities.dp(1));
+        frameLayout.addView(listView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        listView.setVisibility(View.INVISIBLE);
+
+        accountListAdapter = new AccountListAdapter(this, 0, accountList);
+        listView.setAdapter(accountListAdapter);
+
+        loadingLayout = new LinearLayout(this);
+        loadingLayout.setGravity(Gravity.CENTER);
+        frameLayout.addView(loadingLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        ProgressBar progressBar = new ProgressBar(this);
+        loadingLayout.addView(progressBar, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        setContentView(mainLayout);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        getAccountList();
+    }
+
+    @Override
+    protected void handleMessage(Message msg) {
+        super.handleMessage(msg);
+        CmdResult cmdResult = ((CmdResult) msg.getData().getSerializable("result"));
+        switch (msg.what) {
+            case WalletManager.GET_ACCOUNT_LIST:
+                onGetAccountListResult(cmdResult);
+                break;
+        }
+    }
+
+    private void getAccountList() {
+        if(loadingLayout == null) return;
+        loadingLayout.setVisibility(View.VISIBLE);
+        listView.setVisibility(View.INVISIBLE);
+
+        WalletManager.getInstance().getAccountList(new ResultHandler(this));
+    }
+
+    private void onGetAccountListResult(CmdResult cmdResult) {
+        if (cmdResult == null) {
+            Toast.makeText(ManageWalletActivity.this, LocaleController.getString("unknownError", R.string.unknownError), Toast.LENGTH_LONG).show();
+        } else if (cmdResult.getErrMsg() != null) {
+            Toast.makeText(ManageWalletActivity.this, cmdResult.getErrMsg(), Toast.LENGTH_LONG).show();
+        } else {
+            accountList = Parser.getAccountList(cmdResult.getData());
+            update();
+        }
+    }
+
+    private void update() {
+        if (accountListAdapter != null) {
+            accountListAdapter.update(accountList);
+            accountListAdapter.notifyDataSetChanged();
+        }
+        if(loadingLayout == null) return;
+        loadingLayout.setVisibility(View.INVISIBLE);
+        listView.setVisibility(View.VISIBLE);
+    }
+
+    private void copyAddress(String address) {
+        if (address == null) return;
+        android.content.ClipboardManager clipboard = (android.content.ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);
+        android.content.ClipData clip = android.content.ClipData.newPlainText(LocaleController.getString("copyMyAddressTitle", R.string.copyMyAddressTitle), address);
+        if (clipboard != null) {
+            clipboard.setPrimaryClip(clip);
+            Toast.makeText(this, LocaleController.getString("addressCopied", R.string.addressCopied), Toast.LENGTH_LONG).show();
+        }
+    }
+
+    private void showAccountSettingDialog(final int position) {
+        AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        builder.setItems(new CharSequence[]{LocaleController.getString("deleteWallet", R.string.deleteWallet), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialogInterface, int i) {
+                if (accountList == null) return;
+                if (i == 0) {
+                    showDeleteAccountActivity(accountList.get(position).getName());
+                } else {
+                    copyAddress(accountList.get(position).getAddress());
+                }
+            }
+        });
+        builder.create().show();
+    }
+
+    private void showCreateAccountActivity() {
+        Intent intent = new Intent(this, CreateAccountActivity.class);
+        startActivity(intent);
+    }
+
+    private void showDeleteAccountActivity(String accountName) {
+        Intent intent = new Intent(this, DeleteAccountActivity.class);
+        intent.putExtra("accountName", accountName);
+        startActivity(intent);
+    }
+
+    ListView.OnItemClickListener onItemClickListener = new AdapterView.OnItemClickListener() {
+        @Override
+        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+            preferences.edit().putString("currentAccountName", accountList.get(position).getName()).commit();
+            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.accountChanged);
+            finish();
+        }
+    };
+
+    AdapterView.OnItemLongClickListener onItemLongClickListener = new AdapterView.OnItemLongClickListener() {
+        @Override
+        public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
+            showAccountSettingDialog(position);
+            return true;
+        }
+    };
+
+
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/ProposalDetailActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/ProposalDetailActivity.java
new file mode 100644
index 000000000..2efb06461
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/ProposalDetailActivity.java
@@ -0,0 +1,75 @@
+package com.lunamint.lunagram.ui;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.LinearLayout;
+import android.widget.ScrollView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.component.DefaultButton;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+import com.lunamint.lunagram.ui.view.ProposalDetailView;
+import com.lunamint.wallet.model.Proposal;
+
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class ProposalDetailActivity extends LunagramBaseActivity {
+
+    private String accountName;
+    private String address;
+    private Proposal proposal;
+
+    private LinearLayout mainLayout;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("proposalDetail", R.string.proposalDetail));
+
+        accountName = getIntent().getStringExtra("accountName");
+        address = getIntent().getStringExtra("address");
+        proposal = (Proposal) getIntent().getSerializableExtra("proposal");
+
+        mainLayout = new LinearLayout(this);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        setContentView(mainLayout);
+
+        ScrollView scrollView = new ScrollView(this);
+        mainLayout.addView(scrollView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 1, 1.0f));
+
+        scrollView.addView(new ProposalDetailView(this, proposal));
+        createVoteButton();
+
+    }
+
+    private void createVoteButton() {
+        if (proposal != null && proposal.getProposalStatus().equals("DepositPeriod"))
+            return;
+
+        if (proposal != null && proposal.getProposalStatus().equals("VotingPeriod")) {
+            DefaultButton voteButton = new DefaultButton(this, 4, true, LocaleController.getString("vote", R.string.vote), R.drawable.btn_radius4_blue, new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    showVoteActivity();
+                }
+            });
+            mainLayout.addView(voteButton, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 20, 6, 20, 20));
+
+        } else {
+            DefaultButton voteButton = new DefaultButton(this, 4, true, LocaleController.getString("votingFinished", R.string.votingFinished), R.drawable.btn_grey, null);
+            mainLayout.addView(voteButton, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 20, 6, 20, 20));
+        }
+    }
+
+    private void showVoteActivity() {
+        Intent intent = new Intent(this, VoteActivity.class);
+        intent.putExtra("accountName", accountName);
+        intent.putExtra("address", address);
+        intent.putExtra("proposalId", proposal.getProposalId());
+        startActivity(intent);
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/QrCodeActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/QrCodeActivity.java
new file mode 100644
index 000000000..01c71db69
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/QrCodeActivity.java
@@ -0,0 +1,61 @@
+package com.lunamint.lunagram.ui;
+
+import android.graphics.Bitmap;
+import android.os.Bundle;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.google.zxing.BarcodeFormat;
+import com.journeyapps.barcodescanner.BarcodeEncoder;
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class QrCodeActivity extends LunagramBaseActivity {
+
+    private String address;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("qrCode", R.string.qrCode));
+
+        address = getIntent().getStringExtra("address");
+
+        LinearLayout mainLayout = new LinearLayout(this);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.setGravity(Gravity.CENTER_HORIZONTAL);
+        setContentView(mainLayout);
+
+        ImageView qrcodeImageview = new ImageView(this);
+        mainLayout.addView(qrcodeImageview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 52, 0, 0));
+
+        Bitmap qrcodeImage = getQrcodeImage(AndroidUtilities.dp(156));
+        if (qrcodeImage != null) qrcodeImageview.setImageBitmap(qrcodeImage);
+
+        TextView addressTextview = new TextView(this);
+        addressTextview.setGravity(Gravity.CENTER);
+        addressTextview.setTextSize(0, AndroidUtilities.dp(14));
+        addressTextview.setTextColor(ActivityCompat.getColor(this, R.color.charcoal));
+        addressTextview.setText(address);
+        mainLayout.addView(addressTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 48, 24, 48, 0));
+    }
+
+    private Bitmap getQrcodeImage(int size) {
+        try {
+            BarcodeEncoder barcodeEncoder = new BarcodeEncoder();
+            return barcodeEncoder.encodeBitmap(address, BarcodeFormat.QR_CODE, size, size);
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/SelectNodeActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/SelectNodeActivity.java
new file mode 100644
index 000000000..0f35e0cd1
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/SelectNodeActivity.java
@@ -0,0 +1,193 @@
+package com.lunamint.lunagram.ui;
+
+import android.graphics.drawable.ColorDrawable;
+import android.os.Bundle;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.adapter.SelectNodeAdapter;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+import com.lunamint.wallet.ApiUtils;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.LcdService;
+import com.lunamint.wallet.LunaService;
+import com.lunamint.wallet.model.BlockchainInfo;
+import com.lunamint.wallet.utils.NetworkUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.util.ArrayList;
+
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
+public class SelectNodeActivity extends LunagramBaseActivity {
+
+    private BlockchainInfo blockchainInfo;
+
+    private SelectNodeAdapter selectNodeAdapter;
+
+    private ListView listView;
+    private LinearLayout loadingLayout;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("selectNode", R.string.selectNode));
+
+        LinearLayout mainLayout = new LinearLayout(this);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.setBackgroundColor(ActivityCompat.getColor(this, R.color.bg_default));
+
+        FrameLayout frameLayout = new FrameLayout(this);
+        mainLayout.addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        listView = new ListView(this);
+        listView.setOnItemClickListener(onItemClickListener);
+        listView.setDivider(new ColorDrawable(0x88E4E9FE));
+        listView.setDividerHeight(AndroidUtilities.dp(1));
+        frameLayout.addView(listView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        listView.setVisibility(View.INVISIBLE);
+
+        selectNodeAdapter = new SelectNodeAdapter(this, 0, null);
+        listView.setAdapter(selectNodeAdapter);
+
+        loadingLayout = new LinearLayout(this);
+        loadingLayout.setGravity(Gravity.CENTER);
+        frameLayout.addView(loadingLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        ProgressBar progressBar = new ProgressBar(this);
+        loadingLayout.addView(progressBar, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        setContentView(mainLayout);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        getBlockchainInfo();
+    }
+
+    private void getBlockchainInfo() {
+        if (!NetworkUtil.isNetworkAvailable(this)) {
+            showNetworkErrorAlert();
+            return;
+        }
+
+        LunaService lunaService = ApiUtils.getLunaService();
+        lunaService.getBlockchainInfo().enqueue(new Callback<ArrayList<BlockchainInfo>>() {
+            @Override
+            public void onResponse(Call<ArrayList<BlockchainInfo>> call, Response<ArrayList<BlockchainInfo>> response) {
+                if (response.code() == 200 && response.body() != null) {
+                    for (BlockchainInfo blockchainInfo : response.body()) {
+                        if (blockchainInfo.getChainId().equals(Blockchain.getInstance().getChainId())) {
+                            searchIdx = 0;
+                            SelectNodeActivity.this.blockchainInfo = blockchainInfo;
+                            checkNodeStatus();
+                            return;
+                        }
+                    }
+
+                    showError(LocaleController.getString("noHasNode", R.string.noHasNode));
+                } else {
+                    showError(LocaleController.getString("internalServerError", R.string.internalServerError) + "\nStatus code :" + response.code());
+                }
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<BlockchainInfo>> call, Throwable t) {
+
+                if (!NetworkUtil.isNetworkAvailable(SelectNodeActivity.this))
+                    showNetworkErrorAlert();
+            }
+        });
+    }
+
+    private int searchIdx;
+
+    private void checkNodeStatus() {
+        if (blockchainInfo == null || blockchainInfo.getList() == null) {
+            update();
+            return;
+        }
+        if (searchIdx == blockchainInfo.getList().size()) {
+            update();
+            return;
+        }
+        LcdService lcdService = ApiUtils.getLcdService(blockchainInfo.getList().get(searchIdx).getLcd());
+        lcdService.getNodeStatus().enqueue(new Callback<Boolean>() {
+            @Override
+            public void onResponse(Call<Boolean> call, Response<Boolean> response) {
+                if (response.code() == 200 && response.body() != null) {
+                    blockchainInfo.getList().get(searchIdx).setActive(!response.body());
+                } else {
+                    blockchainInfo.getList().get(searchIdx).setActive(false);
+                }
+                searchIdx++;
+                checkNodeStatus();
+            }
+
+            @Override
+            public void onFailure(Call<Boolean> call, Throwable t) {
+                blockchainInfo.getList().get(searchIdx).setActive(false);
+                searchIdx++;
+                checkNodeStatus();
+            }
+        });
+    }
+
+    private void update() {
+        if (selectNodeAdapter != null && blockchainInfo != null) {
+            selectNodeAdapter.update(blockchainInfo);
+            selectNodeAdapter.notifyDataSetChanged();
+
+            loadingLayout.setVisibility(View.GONE);
+            listView.setVisibility(View.VISIBLE);
+        } else {
+            showError(LocaleController.getString("noHasNode", R.string.noHasNode));
+        }
+    }
+
+    private void showError(String msg) {
+        if (loadingLayout == null) return;
+        listView.setVisibility(View.GONE);
+        loadingLayout.removeAllViews();
+
+        TextView errorTextview = new TextView(this);
+        errorTextview.setTextSize(0, AndroidUtilities.dp(16));
+        errorTextview.setTextColor(ActivityCompat.getColor(this, R.color.manatee));
+        errorTextview.setGravity(Gravity.CENTER);
+        errorTextview.setText(msg);
+        loadingLayout.addView(errorTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+    }
+
+    ListView.OnItemClickListener onItemClickListener = new AdapterView.OnItemClickListener() {
+        @Override
+        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+            if (blockchainInfo == null || blockchainInfo.getList() == null) return;
+            Blockchain.getInstance().changeNode(blockchainInfo.getList().get(position).getName(),
+                    blockchainInfo.getList().get(position).getNode(),
+                    blockchainInfo.getList().get(position).getLcd(),
+                    blockchainInfo.getReserveDenom().getOrigin(),
+                    blockchainInfo.getReserveDenom().getDisplayName());
+            finish();
+
+            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.nodeChanged);
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/SelectTokenActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/SelectTokenActivity.java
new file mode 100644
index 000000000..a8dba995b
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/SelectTokenActivity.java
@@ -0,0 +1,70 @@
+package com.lunamint.lunagram.ui;
+
+import android.content.Intent;
+import android.graphics.drawable.ColorDrawable;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.adapter.TokenListAdapter;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+import com.lunamint.wallet.model.Coin;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.util.ArrayList;
+
+public class SelectTokenActivity extends LunagramBaseActivity {
+
+    public static final int REQUEST_CODE_SELECT_TOKEN = 10;
+
+    private ArrayList<Coin> coins;
+
+    @SuppressWarnings("unchecked")
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("selectToken", R.string.selectToken));
+
+        coins = (ArrayList<Coin>) getIntent().getSerializableExtra("coins");
+
+        LinearLayout mainLayout = new LinearLayout(this);
+
+        ListView listView = new ListView(this);
+        listView.setOnItemClickListener(onItemClickListener);
+        listView.setDivider(new ColorDrawable(0x88E4E9FE));
+        listView.setDividerHeight(AndroidUtilities.dp(1));
+        mainLayout.addView(listView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        TokenListAdapter tokenListAdapter = new TokenListAdapter(this, 0, coins);
+        listView.setAdapter(tokenListAdapter);
+
+        setContentView(mainLayout);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+    }
+
+    ListView.OnItemClickListener onItemClickListener = new AdapterView.OnItemClickListener() {
+        @Override
+        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+            finishWithResult(coins.get(position));
+        }
+    };
+
+    private void finishWithResult(Coin coin) {
+        Intent resultIntent = new Intent();
+        resultIntent.putExtra("coin", coin);
+        setResult(SelectTokenActivity.REQUEST_CODE_SELECT_TOKEN, resultIntent);
+        finish();
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/SendCoinActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/SendCoinActivity.java
new file mode 100644
index 000000000..8e1dea18e
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/SendCoinActivity.java
@@ -0,0 +1,958 @@
+package com.lunamint.lunagram.ui;
+
+import android.app.Activity;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.graphics.Rect;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.text.TextUtils;
+import android.view.MenuItem;
+import android.view.View;
+import android.view.ViewTreeObserver;
+import android.widget.FrameLayout;
+import android.widget.RelativeLayout;
+import android.widget.ScrollView;
+import android.widget.Toast;
+
+import com.google.gson.JsonObject;
+import com.google.zxing.integration.android.IntentIntegrator;
+import com.google.zxing.integration.android.IntentResult;
+import com.lunamint.lunagram.BuildVars;
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.secure.SecureKeyStore;
+import com.lunamint.lunagram.ui.component.DefaultButton;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+import com.lunamint.lunagram.ui.view.AmountWithTokenFormView;
+import com.lunamint.lunagram.ui.view.DefaultFormView;
+import com.lunamint.lunagram.ui.view.FeeFormView;
+import com.lunamint.lunagram.ui.view.TxConfirmView;
+import com.lunamint.lunagram.ui.view.TxProgressView;
+import com.lunamint.wallet.ApiUtils;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.LcdService;
+import com.lunamint.wallet.WalletManager;
+import com.lunamint.wallet.model.AccountInfo;
+import com.lunamint.wallet.model.AccountStatus;
+import com.lunamint.wallet.model.BlockInfo;
+import com.lunamint.wallet.model.CmdResult;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.model.LMessage;
+import com.lunamint.wallet.model.SendResult;
+import com.lunamint.wallet.model.tx.DefaultHistory;
+import com.lunamint.wallet.utils.AnimUtil;
+import com.lunamint.wallet.utils.CmdResultChecker;
+import com.lunamint.wallet.utils.FileUtil;
+import com.lunamint.wallet.utils.NetworkUtil;
+import com.lunamint.wallet.utils.NumberFormatter;
+import com.lunamint.wallet.utils.Parser;
+import com.lunamint.wallet.utils.TimeUtil;
+import com.lunamint.wallet.utils.TokenUtil;
+import com.lunamint.wallet.utils.VarifyUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.SendMessagesHelper;
+import org.telegram.messenger.UserConfig;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.AlertDialog;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.io.IOException;
+import java.io.Serializable;
+import java.math.BigDecimal;
+import java.util.ArrayList;
+
+import okhttp3.ResponseBody;
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
+public class SendCoinActivity extends LunagramBaseActivity {
+
+    private final int GET_TRANSACTION_RESULT_MAX_TRY_COUNT = 7;
+    private final int GET_TRANSACTION_RESULT_DELAY = 3000;
+
+    private int step = 0;
+    private boolean isSending = false;
+    private long currentTimeMillis = 0;
+    private boolean needToGoNext = false;
+
+    private boolean isEditable = true;
+
+    private boolean isRequestSelectToken = false;
+    private ArrayList<Coin> coins;
+
+    private LMessage lm;
+
+    private JsonObject tx;
+
+    private String tokenName = "";
+    private String accountName = "";
+    private String fromAddress = "";
+    private String toAddress = "";
+    private AccountStatus accountStatus;
+    private String memo = "";
+
+    private String hash = "";
+    private int requestBlockHeight = -1;
+
+    private int tAccount = -1;
+    private int tUserId = -1;
+
+    private FrameLayout contentsLayout;
+    private ScrollView scrollView;
+    private AmountWithTokenFormView amountWithTokenFormView;
+    private DefaultFormView addressFormView;
+    private FeeFormView feeFormView;
+    private DefaultFormView memoFormView;
+    private DefaultFormView passwordFormView;
+    private TxConfirmView txConfirmView;
+    private TxProgressView txProgressView;
+
+    private DefaultButton nextButton;
+
+    private View currentView;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("send", R.string.send));
+
+        Serializable serializable = getIntent().getSerializableExtra("lm");
+        if (serializable != null) {
+            lm = (LMessage) serializable;
+            tokenName = lm.getDenom();
+            toAddress = lm.getTo();
+        } else {
+            tokenName = getIntent().getStringExtra("token_name");
+            accountName = getIntent().getStringExtra("account_name");
+            fromAddress = getIntent().getStringExtra("address");
+            toAddress = getIntent().getStringExtra("to_address");
+            tAccount = getIntent().getIntExtra("t_account", -1);
+            tUserId = getIntent().getIntExtra("t_user_id", -1);
+        }
+
+        RelativeLayout mainLayout = new RelativeLayout(this);
+
+        scrollView = new ScrollView(this);
+        mainLayout.addView(scrollView, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        contentsLayout = new FrameLayout(this);
+        contentsLayout.setPadding(0, 0, 0, AndroidUtilities.dp(70));
+        scrollView.addView(contentsLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        boolean isNeedScanner = false;
+        String amount = "";
+        if (toAddress == null) isNeedScanner = true;
+        if (lm != null) {
+            amount = lm.getAmount();
+            memo = lm.getMemo();
+            isEditable = false;
+        }
+
+        if (tokenName == null || tokenName.length() < 3) {
+            tokenName = Blockchain.getInstance().getReserveDenom();
+        }
+        Coin coin = new Coin();
+        coin.setDenom(tokenName);
+        coin.setAmount("");
+
+        if (WalletManager.getInstance().activatedSend) {
+            nextButton = new DefaultButton(this, 4, true, LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue, onClickNextListener);
+        } else {
+            nextButton = new DefaultButton(this, 4, true, LocaleController.getString("next", R.string.next), R.drawable.btn_grey, onClickNextListener);
+        }
+
+        nextButton.setOnClickListener(onClickNextListener);
+        mainLayout.addView(nextButton, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 20, 6, 20, 20, RelativeLayout.ALIGN_PARENT_BOTTOM));
+        setContentView(mainLayout);
+
+        showAmountFormView(false, coin, amount);
+        getBalance();
+
+        if (!WalletManager.getInstance().activatedSend) showErrorDialog();
+
+        setupKeyboardListener();
+    }
+
+    @Override
+    protected void onPause() {
+        clearPasswordForm();
+        super.onPause();
+        if (step == 5) {
+            step = 4;
+            showPasswordFormView(true);
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        if (currentTimeMillis > 0) FileUtil.deleteTx(SendCoinActivity.this, currentTimeMillis);
+        super.onDestroy();
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if (item.getItemId() == android.R.id.home) {
+            moveToBack();
+        }
+        return false;
+    }
+
+    @Override
+    public void onBackPressed() {
+        moveToBack();
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (requestCode == SelectTokenActivity.REQUEST_CODE_SELECT_TOKEN) {
+            try {
+                Coin coin = (Coin) data.getSerializableExtra("coin");
+                if (coin != null) {
+                    tokenName = coin.getDenom();
+                    updateBalance(coin);
+                }
+            } catch (Exception e) {
+                // ignore
+            }
+        } else {
+            IntentResult result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data);
+            if (result != null) {
+                if (result.getContents() != null) {
+                    String address = result.getContents();
+                    if (VarifyUtil.isValidCosmosAddress(address) && addressFormView != null) {
+                        addressFormView.setValue(address);
+                    } else {
+                        Toast.makeText(SendCoinActivity.this, LocaleController.getString("cosmosAddressInvalidError", R.string.cosmosAddressInvalidError), Toast.LENGTH_LONG).show();
+                    }
+                }
+
+            } else {
+                super.onActivityResult(requestCode, resultCode, data);
+            }
+        }
+    }
+
+    @Override
+    protected void onCheckFingerprintDone() {
+        super.onCheckFingerprintDone();
+        if (passwordFormView == null) return;
+
+        SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        String pwd = SecureKeyStore.getInstance().decrypt(getApplicationContext(), pref.getString("W-" + accountName.replaceAll(" ", ""), ""));
+        passwordFormView.setValue(pwd);
+        passwordFormView.clearFocus();
+
+        if (pwd.length() > 0) varifyPassword(pwd);
+    }
+
+    @Override
+    protected void handleMessage(Message msg) {
+        super.handleMessage(msg);
+        CmdResult cmdResult = ((CmdResult) msg.getData().getSerializable("result"));
+        switch (msg.what) {
+            case WalletManager.GET_ACCOUNT_LIST:
+                onGetAccountListResult(cmdResult);
+                break;
+            case WalletManager.MAKE_TX_SEND:
+                onTransactionCreatedResult(cmdResult);
+                break;
+            case WalletManager.TX_SIGN:
+                onTransactionSignedResult(cmdResult);
+                break;
+        }
+    }
+
+    private void setupKeyboardListener() {
+        if (scrollView == null) return;
+        scrollView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
+            @Override
+            public void onGlobalLayout() {
+                if (scrollView == null) return;
+                Rect r = new Rect();
+                scrollView.getWindowVisibleDisplayFrame(r);
+
+                if (Math.abs(scrollView.getRootView().getHeight() - (r.bottom - r.top)) > 100) {
+                    onKeyboardShow();
+                }
+            }
+        });
+    }
+
+    private void onKeyboardShow() {
+        if (scrollView == null || amountWithTokenFormView == null || step > 0) return;
+        scrollView.post(new Runnable() {
+            public void run() {
+                scrollView.smoothScrollTo(0, amountWithTokenFormView.getCardPositionY());
+            }
+        });
+    }
+
+    private void loadAccountInfo() {
+        WalletManager.getInstance().getAccountList(new ResultHandler(this));
+    }
+
+    private void sendTelegramMessage(String txHash) {
+        if (amountWithTokenFormView == null) return;
+        if (tAccount >= 0 && tUserId >= 0) {
+            TLRPC.User user = UserConfig.getInstance(tAccount).getCurrentUser();
+            String username;
+            if (user != null && !TextUtils.isEmpty(user.username)) {
+                username = "@" + user.username;
+            } else {
+                username = LocaleController.getString("anonymousUser", R.string.anonymousUser);
+            }
+
+            String msg = "[" + LocaleController.getString("send", R.string.send) + "]\n\n";
+            msg = msg + LocaleController.getString("from", R.string.from) + " : " + username + " (" + Parser.getShotAddressForDisplay(fromAddress) + ")\n\n";
+            msg = msg + LocaleController.getString("to", R.string.to) + " : " + Parser.getShotAddressForDisplay(addressFormView.getValue()) + "\n\n";
+            msg = msg + LocaleController.getString("amount", R.string.amount) + " : " + NumberFormatter.getNumber(amountWithTokenFormView.getValueOrigin()) + TokenUtil.getTokenDisplayName(tokenName) + "\n\n";
+            msg = msg + LocaleController.getString("chain", R.string.chain) + " : " + Blockchain.getInstance().getChainId();
+            msg = msg + "\n\n" + LocaleController.getString("cosmosTxHash", R.string.cosmosTxHash) + " : " + txHash;
+            msg = msg + "\n\n" + BuildVars.getLunagramSupportedMessage();
+
+            SendMessagesHelper.getInstance(tAccount).sendMessage(msg, tUserId, null, null, false, null, null, null);
+        }
+    }
+
+    private void signTransaction() {
+        if (passwordFormView == null || accountStatus == null) return;
+
+        String txPath = getFilesDir() + "/" + FileUtil.getTxFileName(currentTimeMillis);
+
+        WalletManager.getInstance().sign(new ResultHandler(this), fromAddress, passwordFormView.getValue(), txPath, accountStatus);
+    }
+
+    private void send() {
+        if (tx != null) {
+            LcdService lcdService = ApiUtils.getLcdService();
+            lcdService.sendTransaction(tx).enqueue(new retrofit2.Callback<SendResult>() {
+                @Override
+                public void onResponse(Call<SendResult> call, Response<SendResult> response) {
+                    if (response.code() == 200 && response.body() != null) {
+                        hash = response.body().getHash();
+                        getLatestBlock();
+                    } else {
+                        String err;
+                        try {
+                            if (response.errorBody() != null) {
+                                err = LocaleController.getString("internalServerError", R.string.internalServerError) + "\n" + response.errorBody().string();
+                            } else {
+                                err = LocaleController.getString("internalServerError", R.string.internalServerError);
+                            }
+                        } catch (IOException e) {
+                            e.printStackTrace();
+                            err = LocaleController.getString("internalServerError", R.string.internalServerError);
+                        }
+
+                        if (txProgressView != null)
+                            txProgressView.showError(err);
+                        onSendFinished();
+                    }
+                }
+
+                @Override
+                public void onFailure(Call<SendResult> call, Throwable t) {
+                    if (txProgressView == null) return;
+                    if (NetworkUtil.isNetworkAvailable(SendCoinActivity.this)) {
+                        showNodeConnectionErrorAlert();
+                    } else {
+                        txProgressView.showError(LocaleController.getString("networkError", R.string.networkError));
+                    }
+                    onSendFinished();
+                }
+            });
+        } else {
+            if (txProgressView != null)
+                txProgressView.showError(LocaleController.getString("nullPointerTx", R.string.nullPointerTx));
+            onSendFinished();
+        }
+    }
+
+    private void getLatestBlock() {
+        new Handler().postDelayed(new Runnable() {
+            public void run() {
+                LcdService lcdService = ApiUtils.getLcdService();
+                lcdService.getLatestBlock().enqueue(new Callback<BlockInfo>() {
+                    @Override
+                    public void onResponse(Call<BlockInfo> call, Response<BlockInfo> response) {
+                        if (response.code() == 200 && response.body() != null && response.body().getBlock() != null && response.body().getBlock().getHeader() != null) {
+                            if (requestBlockHeight < 0)
+                                requestBlockHeight = response.body().getBlock().getHeader().getHeight();
+
+                            if (requestBlockHeight + GET_TRANSACTION_RESULT_MAX_TRY_COUNT <= response.body().getBlock().getHeader().getHeight()) {
+                                txProgressView.showError(LocaleController.getString("failedSend", R.string.failedSend) + "\n\nRequest block height : " + requestBlockHeight + "\nLast checked block height : " + response.body().getBlock().getHeader().getHeight());
+                                onSendFinished();
+                            } else {
+                                getTransactionResult();
+                            }
+
+                        } else {
+                            txProgressView.showError(LocaleController.getString("failedSend", R.string.failedSend));
+                            onSendFinished();
+                        }
+                    }
+
+                    @Override
+                    public void onFailure(Call<BlockInfo> call, Throwable t) {
+                        if (txProgressView == null) return;
+                        if (NetworkUtil.isNetworkAvailable(SendCoinActivity.this)) {
+                            txProgressView.showError(LocaleController.getString("failedSend", R.string.failedSend));
+                        } else {
+                            txProgressView.showError(LocaleController.getString("networkError", R.string.networkError));
+                        }
+                        onSendFinished();
+                    }
+                });
+            }
+        }, GET_TRANSACTION_RESULT_DELAY);
+    }
+
+    private void getTransactionResult() {
+        if (hash == null || hash.equals("")) {
+            txProgressView.showError(LocaleController.getString("failedSend", R.string.failedSend));
+            return;
+        }
+
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getTransactionDetail(hash).enqueue(new Callback<DefaultHistory>() {
+            @Override
+            public void onResponse(Call<DefaultHistory> call, Response<DefaultHistory> response) {
+                if (response.errorBody() != null) {
+                    try {
+                        if (response.errorBody().string().contains("not found")) {
+                            getLatestBlock();
+                        } else {
+                            txProgressView.showError(LocaleController.getString("failedSend", R.string.failedSend));
+                            onSendFinished();
+                        }
+                    } catch (Exception e) {
+                        txProgressView.showError(LocaleController.getString("failedSend", R.string.failedSend));
+                        onSendFinished();
+                    }
+                } else {
+                    if (response.code() == 200 && response.body() != null) {
+                        if (txProgressView != null)
+                            txProgressView.update(TxProgressView.TYPE_SEND, response.body().getResult(), response.body().getHash(), fromAddress, addressFormView.getValue(), tokenName, NumberFormatter.getNumber(amountWithTokenFormView.getValueOrigin()), NumberFormatter.getNumber(feeFormView.getValueOrigin()), memoFormView.getValue(), fromAddress);
+
+                        sendTelegramMessage(response.body().getHash());
+                        sendResultToCallback();
+                        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.transactionCreated, response.body().getHash());
+                        FileUtil.deleteTx(SendCoinActivity.this, currentTimeMillis);
+                    } else {
+                        txProgressView.showError(LocaleController.getString("failedSend", R.string.failedSend));
+                    }
+                    onSendFinished();
+                }
+            }
+
+            @Override
+            public void onFailure(Call<DefaultHistory> call, Throwable t) {
+                if (txProgressView == null) return;
+                if (NetworkUtil.isNetworkAvailable(SendCoinActivity.this)) {
+                    txProgressView.showError(LocaleController.getString("failedSend", R.string.failedSend));
+                } else {
+                    txProgressView.showError(LocaleController.getString("networkError", R.string.networkError));
+                }
+                onSendFinished();
+            }
+        });
+    }
+
+    private void getBalance() {
+        if (accountName == null || accountName.equals("")) {
+            loadAccountInfo();
+            return;
+        }
+        if (!VarifyUtil.isValidCosmosAddress(fromAddress)) return;
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getBalances(fromAddress).enqueue(new Callback<ArrayList<Coin>>() {
+            @Override
+            public void onResponse(Call<ArrayList<Coin>> call, Response<ArrayList<Coin>> response) {
+                if (response.code() == 200) {
+                    updateBalance(response);
+                    coins = response.body();
+                    if (isRequestSelectToken) showSelectTokenActivity();
+                    if (needToGoNext) {
+                        needToGoNext = false;
+                        hideProgress();
+                        if (amountWithTokenFormView != null)
+                            varifyAmount(amountWithTokenFormView.getValueOrigin());
+                    }
+
+                    if (response.body() != null)
+                        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.balanceChanged, response);
+                } else {
+                    showNodeConnectionErrorAlert();
+                }
+                hideProgress();
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<Coin>> call, Throwable t) {
+                if (NetworkUtil.isNetworkAvailable(SendCoinActivity.this)) {
+                    showNodeConnectionErrorAlert();
+                } else {
+                    Toast.makeText(SendCoinActivity.this, LocaleController.getString("networkError", R.string.networkError), Toast.LENGTH_LONG).show();
+                    finish();
+                }
+            }
+        });
+    }
+
+    private void getAccountStatus() {
+        isSending = true;
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getAccountStatus(fromAddress).enqueue(new Callback<AccountStatus>() {
+            @Override
+            public void onResponse(Call<AccountStatus> call, Response<AccountStatus> response) {
+                if (response.code() == 200) {
+                    accountStatus = response.body();
+                    makeTransactionSend();
+                } else {
+                    step = 4;
+                    showPasswordFormView(true);
+                    if (passwordFormView != null)
+                        passwordFormView.showError(LocaleController.getString("failedLoadAccountError", R.string.failedLoadAccountError));
+                    isSending = false;
+                }
+            }
+
+            @Override
+            public void onFailure(Call<AccountStatus> call, Throwable t) {
+                if (NetworkUtil.isNetworkAvailable(SendCoinActivity.this)) {
+                    showNodeConnectionErrorAlert();
+                } else {
+                    step = 4;
+                    showPasswordFormView(true);
+                    if (passwordFormView != null)
+                        passwordFormView.showError(LocaleController.getString("failedLoadAccountError", R.string.failedLoadAccountError));
+                }
+                isSending = false;
+            }
+        });
+    }
+
+    private void updateBalance(Response<ArrayList<Coin>> response) {
+        if (amountWithTokenFormView != null)
+            amountWithTokenFormView.update(Parser.getCoinFromName(response, tokenName));
+    }
+
+    private void updateBalance(Coin coin) {
+        if (amountWithTokenFormView != null)
+            amountWithTokenFormView.update(coin);
+    }
+
+    private void makeTransactionSend() {
+        if (tx != null && currentTimeMillis > 0)
+            FileUtil.deleteTx(SendCoinActivity.this, currentTimeMillis);
+        if (accountName.equals("")) {
+            Toast.makeText(SendCoinActivity.this, LocaleController.getString("loadingAccountInfoError", R.string.loadingAccountInfoError), Toast.LENGTH_LONG).show();
+            return;
+        }
+        if (amountWithTokenFormView == null) return;
+
+        WalletManager.getInstance().makeTxSend(new ResultHandler(this), fromAddress, addressFormView.getValue(), amountWithTokenFormView.getValue(), feeFormView.getValue(), tokenName, memoFormView.getValue());
+    }
+
+    //Todo: toast message remove
+    private void sendResultToCallback() {
+        if (lm == null) return;
+
+        JsonObject callbackBody = lm.getCallbackBody();
+        if (callbackBody == null) {
+            Toast.makeText(SendCoinActivity.this, "can not get custom_field. please check custom_field is corrected.", Toast.LENGTH_LONG).show();
+            return;
+        }
+
+        LcdService callbackService = ApiUtils.getCallbackService(lm.getCallbackUrl());
+        callbackService.sendResultToCallback(lm.getCallbackEndpoint(), lm.getCallbackBody()).enqueue(new Callback<ResponseBody>() {
+            @Override
+            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
+                Toast.makeText(SendCoinActivity.this, "sendResultToCallback()\n" + lm.getCallbackUrl() + lm.getCallbackEndpoint() + "\nresult code = " + response.code(), Toast.LENGTH_LONG).show();
+            }
+
+            @Override
+            public void onFailure(Call<ResponseBody> call, Throwable t) {
+                Toast.makeText(SendCoinActivity.this, "sendResultToCallback() result onFailure\n" + lm.getCallbackUrl() + lm.getCallbackEndpoint(), Toast.LENGTH_LONG).show();
+            }
+        });
+    }
+
+    private void onGetAccountListResult(CmdResult cmdResult) {
+        if (cmdResult == null) {
+            Toast.makeText(SendCoinActivity.this, LocaleController.getString("unknownError", R.string.unknownError), Toast.LENGTH_LONG).show();
+        } else if (cmdResult.getErrMsg() != null) {
+            Toast.makeText(SendCoinActivity.this, cmdResult.getErrMsg(), Toast.LENGTH_LONG).show();
+        } else {
+            ArrayList<AccountInfo> accountList = Parser.getAccountList(cmdResult.getData());
+            if (accountList != null && accountList.size() != 0) {
+                int accountIdx = 0;
+                String currentAccountName = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getString("currentAccountName", "");
+                for (int i = 0; accountList.size() > i; i++) {
+                    if (accountList.get(i).getName().equals(currentAccountName)) {
+                        accountIdx = i;
+                        break;
+                    }
+                }
+                accountName = accountList.get(accountIdx).getName();
+                fromAddress = accountList.get(accountIdx).getAddress();
+                getBalance();
+            }
+        }
+    }
+
+    private void onTransactionCreatedResult(CmdResult cmdResult) {
+        String errMsg = CmdResultChecker.checkCmdResult(cmdResult);
+
+        if (errMsg == null) {
+            setCurrentTimeMillis();
+            if (FileUtil.writeTx(SendCoinActivity.this, currentTimeMillis, cmdResult.getData())) {
+                signTransaction();
+            } else {
+                step = 4;
+                showPasswordFormView(true);
+                if (passwordFormView != null)
+                    passwordFormView.showError(LocaleController.getString("failedCreateTx", R.string.failedCreateTx));
+                isSending = false;
+            }
+        } else {
+            step = 4;
+            showPasswordFormView(true);
+            if (passwordFormView != null) passwordFormView.showError(errMsg);
+            isSending = false;
+        }
+    }
+
+    private void onTransactionSignedResult(CmdResult cmdResult) {
+        String err = CmdResultChecker.checkCmdResult(cmdResult);
+
+        if (err == null) {
+            tx = Parser.getRawTransaction(cmdResult.getData());
+            if (tx != null) {
+                send();
+                clearPasswordForm();
+                return;
+            } else {
+                err = LocaleController.getString("unsupportTx", R.string.unsupportTx);
+            }
+        }
+
+        step = 4;
+        showPasswordFormView(true);
+        if (passwordFormView != null) passwordFormView.showError(err);
+        isSending = false;
+    }
+
+    private void clearPasswordForm() {
+        if (passwordFormView == null) return;
+        passwordFormView.clear();
+    }
+
+    private void varifyAmount(String amount) {
+        if (amountWithTokenFormView == null) return;
+        if (coins == null) {
+            needToGoNext = true;
+            showProgress();
+            return;
+        }
+        if (amount.length() != 0) {
+            try {
+                BigDecimal bamount = new BigDecimal(amount);
+                if (bamount.compareTo(BigDecimal.ZERO) < 1) {
+                    amountWithTokenFormView.showError(LocaleController.getString("amountInvalidError", R.string.amountInvalidError));
+                } else {
+                    if (bamount.compareTo(new BigDecimal(TokenUtil.getCoin(coins, tokenName).getAmount())) < 1) {
+                        scrollView.smoothScrollTo(0, 0);
+                        step = 1;
+                        showAddressFormView(false);
+                    } else {
+                        amountWithTokenFormView.showError(LocaleController.getString("notEnoughBalance", R.string.notEnoughBalance));
+                    }
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+                amountWithTokenFormView.showError(LocaleController.getString("amountInvalidError", R.string.amountInvalidError));
+            }
+        } else {
+            amountWithTokenFormView.showError(LocaleController.getString("amountEmptyError", R.string.amountEmptyError));
+        }
+    }
+
+    private void varifyAddress(String address) {
+        if (addressFormView == null) return;
+        if (address.length() == 0) {
+            addressFormView.showError(LocaleController.getString("addressEmptyError", R.string.addressEmptyError));
+        } else if (!VarifyUtil.isValidCosmosAddress(address)) {
+            addressFormView.showError(LocaleController.getString("addressInvalidError", R.string.addressInvalidError));
+        } else {
+            step = 2;
+            showMemoFormView(false);
+        }
+    }
+
+    private void varifyMemo(String memo) {
+        if (memo.length() > 30) {
+            memoFormView.showError(LocaleController.getString("invalidMemoError", R.string.invalidMemoError));
+        } else {
+            step = 3;
+            showFeeFormView(false);
+        }
+    }
+
+    private void varifyFee(String fee) {
+        if (amountWithTokenFormView == null || feeFormView == null) return;
+        if (fee.length() != 0) {
+            try {
+                BigDecimal bamount = new BigDecimal(fee);
+                if (bamount.compareTo(new BigDecimal("0.0005")) < 0) {
+                    feeFormView.showError(LocaleController.getString("feeNotEnoughError", R.string.feeNotEnoughError));
+                } else if (bamount.compareTo(BigDecimal.ONE) == 1) {
+                    feeFormView.showError(LocaleController.getString("feeInvalidError", R.string.feeInvalidError));
+                } else {
+                    bamount = bamount.add(new BigDecimal(amountWithTokenFormView.getValueOrigin()));
+                    if (bamount.compareTo(new BigDecimal(TokenUtil.getCoin(coins, tokenName).getAmount())) < 1) {
+                        scrollView.smoothScrollTo(0, 0);
+                        hideKeyboard();
+                        step = 4;
+                        showPasswordFormView(false);
+                        if (hasPassword() && isEnabledFingerprint(accountName)) checkFingerprint();
+                    } else {
+                        feeFormView.showError(LocaleController.getString("notEnoughBalance", R.string.notEnoughBalance));
+                    }
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+                feeFormView.showError(LocaleController.getString("amountInvalidError", R.string.amountInvalidError));
+            }
+        } else {
+            feeFormView.showError(LocaleController.getString("amountEmptyError", R.string.amountEmptyError));
+        }
+    }
+
+    private void varifyPassword(String pwd) {
+        if (passwordFormView == null) return;
+        if (pwd == null || pwd.length() < 8) {
+            passwordFormView.showError(LocaleController.getString("pwdInvalidError", R.string.pwdInvalidError));
+        } else {
+            step = 5;
+            showTxConfirmView();
+            if (txConfirmView != null)
+                txConfirmView.update(TxProgressView.TYPE_SEND, null, fromAddress, addressFormView.getValue(), tokenName, NumberFormatter.getNumber(amountWithTokenFormView.getValueOrigin()), NumberFormatter.getNumber(feeFormView.getValueOrigin()), memoFormView.getValue(), fromAddress);
+        }
+    }
+
+    private void showAmountFormView(boolean isMoveToBack, Coin coin, String amount) {
+        hideKeyboard();
+        if (amountWithTokenFormView == null) {
+            amountWithTokenFormView = new AmountWithTokenFormView(this, isEditable, coin, amount, new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    showSelectTokenActivity();
+                }
+            });
+            contentsLayout.addView(amountWithTokenFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(amountWithTokenFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, amountWithTokenFormView, false);
+        }
+
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        currentView = amountWithTokenFormView;
+    }
+
+    private void showAddressFormView(boolean isMoveToBack) {
+        if (addressFormView == null) {
+            addressFormView = new DefaultFormView(this, isEditable, false, false, LocaleController.getString("address", R.string.address), LocaleController.getString("doubleCheckAddress", R.string.doubleCheckAddress), toAddress, null);
+            contentsLayout.addView(addressFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(addressFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, addressFormView, false);
+        }
+
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        if (isEditable) addressFormView.setFocus();
+        currentView = addressFormView;
+    }
+
+    private void showMemoFormView(boolean isMoveToBack) {
+        if (memoFormView == null) {
+            memoFormView = new DefaultFormView(this, isEditable, false, false, LocaleController.getString("memo", R.string.memo), LocaleController.getString("ifNeedMemo", R.string.ifNeedMemo), memo, "Optional");
+            contentsLayout.addView(memoFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(memoFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, memoFormView, false);
+        }
+
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        if (isEditable) memoFormView.setFocus();
+        currentView = memoFormView;
+    }
+
+    private void showFeeFormView(boolean isMoveToBack) {
+        hideKeyboard();
+        if (feeFormView == null) {
+            feeFormView = new FeeFormView(this);
+            contentsLayout.addView(feeFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(feeFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, feeFormView, false);
+        }
+
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        currentView = feeFormView;
+    }
+
+    private void showPasswordFormView(boolean isMoveToBack) {
+        if (passwordFormView == null) {
+            passwordFormView = new DefaultFormView(this, true, true, false, LocaleController.getString("password", R.string.password), LocaleController.getString("differentWalletsDifferentPasswords", R.string.differentWalletsDifferentPasswords), null, null);
+            contentsLayout.addView(passwordFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(passwordFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, passwordFormView, false);
+        }
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        if (!isEnabledFingerprint(accountName)) passwordFormView.setFocus();
+        currentView = passwordFormView;
+    }
+
+    private void showTxConfirmView() {
+        hideKeyboard();
+        if (txConfirmView != null) contentsLayout.removeView(txConfirmView);
+
+        txConfirmView = new TxConfirmView(this, LocaleController.getString("confirmSend", R.string.confirmSend));
+        contentsLayout.addView(txConfirmView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        AnimUtil.changeView(currentView, txConfirmView, false);
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        currentView = txConfirmView;
+    }
+
+    private void showTxProgressView() {
+        hideKeyboard();
+        txProgressView = new TxProgressView(this);
+        contentsLayout.addView(txProgressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        AnimUtil.changeView(currentView, txProgressView, false);
+        nextButton.update(LocaleController.getString("done", R.string.done), R.drawable.btn_grey);
+        currentView = txProgressView;
+    }
+
+    private void showSelectTokenActivity() {
+        if (coins == null) {
+            showProgress();
+            isRequestSelectToken = true;
+            return;
+        }
+        isRequestSelectToken = false;
+
+        Intent intent = new Intent(SendCoinActivity.this, SelectTokenActivity.class);
+        intent.putExtra("coins", coins);
+        startActivityForResult(intent, SelectTokenActivity.REQUEST_CODE_SELECT_TOKEN);
+    }
+
+    private void showErrorDialog() {
+        AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+        builder.setMessage(LocaleController.getString("sendDisabled", R.string.sendDisabled));
+        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                finish();
+            }
+        });
+        builder.create().show();
+    }
+
+    private void onSendFinished() {
+        isSending = false;
+        nextButton.update(LocaleController.getString("done", R.string.done), R.drawable.btn_radius4_blue);
+    }
+
+    private boolean hasPassword() {
+        SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        String pwd = pref.getString("W-" + accountName.replaceAll(" ", ""), "");
+        return !pwd.equals("");
+    }
+
+    private void setCurrentTimeMillis() {
+        currentTimeMillis = TimeUtil.getCurrentTimeMillis();
+    }
+
+    private void moveToBack() {
+        switch (step) {
+            case 0:
+                finish();
+                break;
+            case 1:
+                step = 0;
+                showAmountFormView(true, null, null);
+                break;
+            case 2:
+                step = 1;
+                showAddressFormView(true);
+                break;
+            case 3:
+                step = 2;
+                showMemoFormView(true);
+                break;
+            case 4:
+                step = 3;
+                showFeeFormView(true);
+                break;
+            case 5:
+                step = 4;
+                showPasswordFormView(true);
+                break;
+        }
+    }
+
+    View.OnClickListener onClickNextListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            switch (step) {
+                case 0:
+                    if (amountWithTokenFormView != null)
+                        varifyAmount(amountWithTokenFormView.getValueOrigin());
+                    break;
+                case 1:
+                    if (addressFormView != null) varifyAddress(addressFormView.getValue());
+                    break;
+                case 2:
+                    if (memoFormView != null) varifyMemo(memoFormView.getValue());
+                    break;
+                case 3:
+                    if (feeFormView != null) varifyFee(feeFormView.getValueOrigin());
+                    break;
+                case 4:
+                    if (passwordFormView != null) varifyPassword(passwordFormView.getValue());
+                    break;
+                case 5:
+                    step = 6;
+                    showTxProgressView();
+                    getAccountStatus();
+                    break;
+                case 6:
+                    if (!isSending) finish();
+                    break;
+            }
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/SettingsActivity.java
new file mode 100644
index 000000000..6907c5409
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/SettingsActivity.java
@@ -0,0 +1,165 @@
+package com.lunamint.lunagram.ui;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.graphics.drawable.ColorDrawable;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.v4.app.ActivityCompat;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.adapter.SettingsAdapter;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.model.Setting;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.support.fingerprint.FingerprintManagerCompat;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class SettingsActivity extends LunagramBaseActivity {
+
+    boolean canUseFingerprint = false;
+
+    private String accountName;
+
+    private SettingsAdapter settingsAdapter;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("settings", R.string.settings));
+
+        accountName = getIntent().getStringExtra("accountName");
+
+        LinearLayout mainLayout = new LinearLayout(this);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.setBackgroundColor(ActivityCompat.getColor(this, R.color.bg_default));
+
+        ListView listView = new ListView(this);
+        listView.setOnItemClickListener(onItemClickListener);
+        listView.setDivider(new ColorDrawable(0x88E4E9FE));
+        listView.setDividerHeight(AndroidUtilities.dp(1));
+        mainLayout.addView(listView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        if (Build.VERSION.SDK_INT >= 23) {
+            FingerprintManagerCompat fingerprintManager = FingerprintManagerCompat.from(ApplicationLoader.applicationContext);
+            if (fingerprintManager.isHardwareDetected() && fingerprintManager.hasEnrolledFingerprints()) {
+                if (hasPassword()) canUseFingerprint = true;
+            }
+        }
+
+        settingsAdapter = new SettingsAdapter(this, 0, canUseFingerprint);
+        listView.setAdapter(settingsAdapter);
+
+        setContentView(mainLayout);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        update();
+    }
+
+    private boolean hasPassword() {
+        SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        String pwd = pref.getString("W-" + accountName.replaceAll(" ", ""), "");
+        return !pwd.equals("");
+    }
+
+    private String getCurrentNodeName() {
+        return Blockchain.getInstance().getNodeName();
+    }
+
+    private void update() {
+        if (settingsAdapter != null) {
+            Setting setting = new Setting();
+            setting.setEnabledFingerprint(isEnabledFingerprint(accountName));
+            setting.setNode(getCurrentNodeName());
+            settingsAdapter.update(setting);
+            settingsAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private void changeFingerprintSetting() {
+        if (isEnabledFingerprint(accountName)) {
+            setEnabledFingerprint(accountName, false);
+            update();
+        } else {
+            showEnableFingerprintActivity();
+        }
+    }
+
+    private void showEnableFingerprintActivity() {
+        Intent intent = new Intent(this, EnableFingerprintActivity.class);
+        intent.putExtra("accountName", accountName);
+        startActivity(intent);
+    }
+
+    private void showLunagramTwitter() {
+        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://twitter.com/LunagramApp"));
+        startActivity(intent);
+    }
+
+    private void showTerms() {
+        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://lunagram.io/policy"));
+        startActivity(intent);
+    }
+
+    private void sendFeedback() {
+        Intent intent = new Intent(Intent.ACTION_SEND);
+        intent.setType("plain/text");
+        intent.putExtra(Intent.EXTRA_EMAIL, new String[]{"support@lunamint.com"});
+        startActivity(Intent.createChooser(intent, LocaleController.getString("ChooseEmail", R.string.chooseEmailApp)));
+    }
+
+    ListView.OnItemClickListener onItemClickListener = new AdapterView.OnItemClickListener() {
+        @Override
+        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+            if (canUseFingerprint) {
+                switch (position) {
+                    case 0:
+                        changeFingerprintSetting();
+                        break;
+                    case 1:
+                        showSelectNodeActivity();
+                        break;
+                    case 2:
+                        showLunagramTwitter();
+                        break;
+                    case 3:
+                        showTerms();
+                        break;
+                    case 4:
+                        sendFeedback();
+                        break;
+                }
+            } else {
+                switch (position) {
+                    case 0:
+                        showSelectNodeActivity();
+                        break;
+                    case 1:
+                        showLunagramTwitter();
+                        break;
+                    case 2:
+                        showTerms();
+                        break;
+                    case 3:
+                        sendFeedback();
+                        break;
+                }
+            }
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/StakeCoinActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/StakeCoinActivity.java
new file mode 100644
index 000000000..194896aa0
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/StakeCoinActivity.java
@@ -0,0 +1,945 @@
+package com.lunamint.lunagram.ui;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.util.Log;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ScrollView;
+import android.widget.Toast;
+
+import com.google.gson.JsonObject;
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.secure.SecureKeyStore;
+import com.lunamint.lunagram.ui.component.DefaultButton;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+import com.lunamint.lunagram.ui.view.AmountFormView;
+import com.lunamint.lunagram.ui.view.DefaultFormView;
+import com.lunamint.lunagram.ui.view.FeeFormView;
+import com.lunamint.lunagram.ui.view.SelectValidatorFormView;
+import com.lunamint.lunagram.ui.view.TxConfirmView;
+import com.lunamint.lunagram.ui.view.TxProgressView;
+import com.lunamint.wallet.ApiUtils;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.LcdService;
+import com.lunamint.wallet.WalletManager;
+import com.lunamint.wallet.model.AccountStatus;
+import com.lunamint.wallet.model.BlockInfo;
+import com.lunamint.wallet.model.CmdResult;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.model.SendResult;
+import com.lunamint.wallet.model.StakingInfo;
+import com.lunamint.wallet.model.tx.DefaultHistory;
+import com.lunamint.wallet.utils.AnimUtil;
+import com.lunamint.wallet.utils.CmdResultChecker;
+import com.lunamint.wallet.utils.FileUtil;
+import com.lunamint.wallet.utils.NetworkUtil;
+import com.lunamint.wallet.utils.NumberFormatter;
+import com.lunamint.wallet.utils.Parser;
+import com.lunamint.wallet.utils.TimeUtil;
+import com.lunamint.wallet.utils.VarifyUtil;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.math.BigDecimal;
+import java.util.ArrayList;
+
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
+public class StakeCoinActivity extends LunagramBaseActivity {
+
+    public final static int TYPE_STAKE = 0;
+    public final static int TYPE_UNSTAKE = 1;
+    public final static int TYPE_REDELEGATE = 2;
+
+    private final int GET_TRANSACTION_RESULT_MAX_TRY_COUNT = 7;
+    private final int GET_TRANSACTION_RESULT_DELAY = 3000;
+
+    private int type;
+    private int step = 0;
+    private boolean isSending = false;
+    private long currentTimeMillis = 0;
+
+    private Coin availableCoin;
+
+    private JsonObject tx;
+
+    private String accountName = "";
+    private String fromAddress = "";
+    private String validatorName = "";
+    private String validatorAddress = "";
+    private String redelegateValidatorName = "";
+    private String redelegateValidatorAddress = "";
+    private AccountStatus accountStatus;
+
+    private String hash = "";
+    private int requestBlockHeight = -1;
+
+    private ScrollView scrollView;
+
+    private FrameLayout contentsLayout;
+    private SelectValidatorFormView selectValidatorFormView;
+    private AmountFormView amountFormView;
+    private FeeFormView feeFormView;
+    private DefaultFormView passwordFormView;
+    private TxConfirmView txConfirmView;
+    private TxProgressView txProgressView;
+
+    private DefaultButton nextButton;
+
+    private View currentView;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        type = getIntent().getIntExtra("type", 0);
+        accountName = getIntent().getStringExtra("accountName");
+        fromAddress = getIntent().getStringExtra("address");
+        validatorName = getIntent().getStringExtra("validatorName");
+        validatorAddress = getIntent().getStringExtra("validatorAddress");
+
+        if (getSupportActionBar() != null) getSupportActionBar().setTitle(getActionbarTitle());
+
+        LinearLayout mainLayout = new LinearLayout(this);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+
+        scrollView = new ScrollView(this);
+        mainLayout.addView(scrollView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 0, 1.f));
+
+        contentsLayout = new FrameLayout(this);
+        scrollView.addView(contentsLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        nextButton = new DefaultButton(this, 4, true, LocaleController.getString("next", R.string.next), R.drawable.btn_grey, onClickNextListener);
+        mainLayout.addView(nextButton, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 20, 6, 20, 20));
+
+        setContentView(mainLayout);
+
+        showSelectValidatorFormView(false);
+
+        if (type == StakeCoinActivity.TYPE_STAKE) {
+            getBalance();
+        } else {
+            getStake();
+        }
+    }
+
+    @Override
+    protected void onPause() {
+        clearPasswordForm();
+        super.onPause();
+        if (step == 4) {
+            step = 3;
+            showPasswordFormView(true);
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        if (currentTimeMillis > 0) FileUtil.deleteTx(StakeCoinActivity.this, currentTimeMillis);
+        super.onDestroy();
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if (item.getItemId() == android.R.id.home) {
+            moveToBack();
+        }
+        return false;
+    }
+
+    @Override
+    public void onBackPressed() {
+        moveToBack();
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (resultCode == RESULT_OK) {
+            switch (requestCode) {
+                case ValidatorListActivity.ACTIVITY_RESULT_OK:
+                    if (type != StakeCoinActivity.TYPE_REDELEGATE) {
+                        validatorName = data.getStringExtra("validatorName");
+                        validatorAddress = data.getStringExtra("validatorAddress");
+                        selectValidatorFormView.updateValidator(validatorName);
+                    } else {
+                        redelegateValidatorName = data.getStringExtra("validatorName");
+                        redelegateValidatorAddress = data.getStringExtra("validatorAddress");
+                        if (redelegateValidatorAddress.length() > 0) {
+                            selectValidatorFormView.updateRedelegateValidator(redelegateValidatorName);
+                            nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+                        } else {
+                            selectValidatorFormView.updateRedelegateValidator(null);
+                            nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_grey);
+                        }
+                    }
+                    break;
+            }
+        }
+    }
+
+    @Override
+    protected void onCheckFingerprintDone() {
+        super.onCheckFingerprintDone();
+        if (passwordFormView == null) return;
+
+        SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        String pwd = SecureKeyStore.getInstance().decrypt(getApplicationContext(), pref.getString("W-" + accountName.replaceAll(" ", ""), ""));
+        passwordFormView.setValue(pwd);
+        passwordFormView.clearFocus();
+
+        if (pwd.length() > 0) varifyPassword(pwd);
+    }
+
+    @Override
+    protected void handleMessage(Message msg) {
+        super.handleMessage(msg);
+        CmdResult cmdResult = ((CmdResult) msg.getData().getSerializable("result"));
+        switch (msg.what) {
+            case WalletManager.MAKE_TX_STAKE:
+                onTransactionCreatedResult(cmdResult);
+                break;
+            case WalletManager.MAKE_TX_UNSTAKE:
+                onTransactionCreatedResult(cmdResult);
+                break;
+            case WalletManager.MAKE_TX_REDELEGATE:
+                onTransactionCreatedResult(cmdResult);
+                break;
+            case WalletManager.TX_SIGN:
+                onTransactionSignedResult(cmdResult);
+                break;
+        }
+    }
+
+    private void signTransaction() {
+        if (passwordFormView == null || accountStatus == null) return;
+        isSending = true;
+
+        String txPath = getFilesDir() + "/" + FileUtil.getTxFileName(currentTimeMillis);
+
+        WalletManager.getInstance().sign(new ResultHandler(this), accountName, passwordFormView.getValue(), txPath, accountStatus);
+    }
+
+    private void makeTransactionStake() {
+        if (tx != null && currentTimeMillis > 0)
+            FileUtil.deleteTx(StakeCoinActivity.this, currentTimeMillis);
+        if (amountFormView == null) return;
+
+        WalletManager.getInstance().makeTransactionStake(new ResultHandler(this), fromAddress, passwordFormView.getValue(), validatorAddress, amountFormView.getValue(), feeFormView.getValue(), Blockchain.getInstance().getReserveDenom());
+    }
+
+    private void makeTransactionUnstake() {
+        if (tx != null && currentTimeMillis > 0)
+            FileUtil.deleteTx(StakeCoinActivity.this, currentTimeMillis);
+        if (amountFormView == null) return;
+
+        WalletManager.getInstance().makeTransactionUnstake(new ResultHandler(this), fromAddress, passwordFormView.getValue(), validatorAddress, amountFormView.getValue(), feeFormView.getValue(), Blockchain.getInstance().getReserveDenom());
+    }
+
+    private void makeTransactionRedelegate() {
+        if (tx != null && currentTimeMillis > 0)
+            FileUtil.deleteTx(StakeCoinActivity.this, currentTimeMillis);
+        if (amountFormView == null) return;
+
+        WalletManager.getInstance().makeTransactionRedelegate(new ResultHandler(this), fromAddress, passwordFormView.getValue(), validatorAddress, redelegateValidatorAddress, amountFormView.getValue(), feeFormView.getValue(), Blockchain.getInstance().getReserveDenom());
+    }
+
+    private void onTransactionCreatedResult(CmdResult cmdResult) {
+        String errMsg = CmdResultChecker.checkCmdResult(cmdResult);
+        if (errMsg == null) {
+            setCurrentTimeMillis();
+            if (FileUtil.writeTx(StakeCoinActivity.this, currentTimeMillis, cmdResult.getData())) {
+                signTransaction();
+            } else {
+                step = 3;
+                showPasswordFormView(true);
+                if (passwordFormView != null)
+                    passwordFormView.showError(LocaleController.getString("failedCreateTx", R.string.failedCreateTx));
+                isSending = false;
+            }
+        } else {
+            step = 3;
+            showPasswordFormView(true);
+            if (passwordFormView != null) passwordFormView.showError(errMsg);
+            isSending = false;
+        }
+    }
+
+    private void onTransactionSignedResult(CmdResult cmdResult) {
+        String err = CmdResultChecker.checkCmdResult(cmdResult);
+
+        if (err == null) {
+            tx = Parser.getRawTransaction(cmdResult.getData());
+            if (tx != null) {
+                send();
+                clearPasswordForm();
+                return;
+            } else {
+                err = LocaleController.getString("unsupportTx", R.string.unsupportTx);
+            }
+        }
+        step = 3;
+        showPasswordFormView(true);
+        if (passwordFormView != null) passwordFormView.showError(err);
+        isSending = false;
+    }
+
+    private void send() {
+        if (tx != null) {
+            LcdService lcdService = ApiUtils.getLcdService();
+            lcdService.sendTransaction(tx).enqueue(new Callback<SendResult>() {
+                @Override
+                public void onResponse(Call<SendResult> call, Response<SendResult> response) {
+                    if (response.code() == 200 && response.body() != null) {
+                        hash = response.body().getHash();
+                        getLatestBlock();
+                    } else {
+                        String err;
+                        try {
+                            if (response.errorBody() != null && response.errorBody().string().contains("existing unbonding delegation found")) {
+                                err = LocaleController.getString("aleadyUnbondingError", R.string.aleadyUnbondingError);
+                            } else {
+                                if (response.code() == 400 && response.errorBody() == null) {
+                                    err = LocaleController.getString("unsupportTx", R.string.unsupportTx);
+                                } else {
+                                    err = LocaleController.getString("failedStake", R.string.failedStake) + "\nCode = " + response.code() + "\n" + response.errorBody().string();
+                                }
+                            }
+                        } catch (Exception e) {
+                            e.printStackTrace();
+                            err = LocaleController.getString("unsupportTx", R.string.unsupportTx);
+                        }
+                        if (txProgressView != null) txProgressView.showError(err);
+                        onSendFinished();
+                    }
+                }
+
+                @Override
+                public void onFailure(Call<SendResult> call, Throwable t) {
+                    if (txProgressView == null) return;
+                    if (NetworkUtil.isNetworkAvailable(StakeCoinActivity.this)) {
+                        showNodeConnectionErrorAlert();
+                    } else {
+                        txProgressView.showError(LocaleController.getString("networkError", R.string.networkError));
+                    }
+                    onSendFinished();
+                }
+            });
+        } else {
+            if (txProgressView != null)
+                txProgressView.showError(LocaleController.getString("nullPointerTx", R.string.nullPointerTx));
+            onSendFinished();
+        }
+    }
+
+    private void getLatestBlock() {
+        new Handler().postDelayed(new Runnable() {
+            public void run() {
+                LcdService lcdService = ApiUtils.getLcdService();
+                lcdService.getLatestBlock().enqueue(new Callback<BlockInfo>() {
+                    @Override
+                    public void onResponse(Call<BlockInfo> call, Response<BlockInfo> response) {
+                        if (response.code() == 200 && response.body() != null && response.body().getBlock() != null && response.body().getBlock().getHeader() != null) {
+                            if (requestBlockHeight < 0)
+                                requestBlockHeight = response.body().getBlock().getHeader().getHeight();
+
+                            if (requestBlockHeight + GET_TRANSACTION_RESULT_MAX_TRY_COUNT <= response.body().getBlock().getHeader().getHeight()) {
+                                txProgressView.showError(LocaleController.getString("failedStake", R.string.failedStake) + "\n\nRequest block height : " + requestBlockHeight + "\nLast checked block height : " + response.body().getBlock().getHeader().getHeight());
+                                onSendFinished();
+                            } else {
+                                getTransactionResult();
+                            }
+
+                        } else {
+                            txProgressView.showError(LocaleController.getString("failedStake", R.string.failedStake));
+                            onSendFinished();
+                        }
+                    }
+
+                    @Override
+                    public void onFailure(Call<BlockInfo> call, Throwable t) {
+                        if (txProgressView == null) return;
+                        if (NetworkUtil.isNetworkAvailable(StakeCoinActivity.this)) {
+                            txProgressView.showError(LocaleController.getString("failedStake", R.string.failedStake));
+                        } else {
+                            txProgressView.showError(LocaleController.getString("networkError", R.string.networkError));
+                        }
+                        onSendFinished();
+                    }
+                });
+            }
+        }, GET_TRANSACTION_RESULT_DELAY);
+    }
+
+    private void getTransactionResult() {
+        if (hash == null || hash.equals("")) {
+            txProgressView.showError(LocaleController.getString("failedStake", R.string.failedStake));
+            return;
+        }
+
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getTransactionDetail(hash).enqueue(new Callback<DefaultHistory>() {
+            @Override
+            public void onResponse(Call<DefaultHistory> call, Response<DefaultHistory> response) {
+                if (response.errorBody() != null) {
+                    try {
+                        if (response.errorBody().string().contains("not found")) {
+                            getLatestBlock();
+                        } else {
+                            txProgressView.showError(LocaleController.getString("failedStake", R.string.failedStake));
+                            onSendFinished();
+                        }
+                    } catch (Exception e) {
+                        txProgressView.showError(LocaleController.getString("failedStake", R.string.failedStake));
+                        onSendFinished();
+                    }
+                } else {
+                    if (response.code() == 200 && response.body() != null) {
+                        updateTxProgress(response.body().getResult(), response.body().getHash());
+                        FileUtil.deleteTx(StakeCoinActivity.this, currentTimeMillis);
+                        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.stakingChanged);
+                    } else {
+                        txProgressView.showError(LocaleController.getString("failedStake", R.string.failedStake));
+                    }
+                    onSendFinished();
+                }
+            }
+
+            @Override
+            public void onFailure(Call<DefaultHistory> call, Throwable t) {
+                if (txProgressView == null) return;
+                if (NetworkUtil.isNetworkAvailable(StakeCoinActivity.this)) {
+                    txProgressView.showError(LocaleController.getString("failedStake", R.string.failedStake));
+                } else {
+                    txProgressView.showError(LocaleController.getString("networkError", R.string.networkError));
+                }
+                onSendFinished();
+            }
+        });
+    }
+
+    private void clearPasswordForm() {
+        if (passwordFormView == null) return;
+        passwordFormView.clear();
+    }
+
+    private void getBalance() {
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getBalances(fromAddress).enqueue(new Callback<ArrayList<Coin>>() {
+            @Override
+            public void onResponse(Call<ArrayList<Coin>> call, Response<ArrayList<Coin>> response) {
+                updateBalance(response);
+                if (response.code() == 200)
+                    NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.balanceChanged, response);
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<Coin>> call, Throwable t) {
+                if (t.getMessage().contains("End of input at")) {
+                    updateBalanceEmpty();
+                } else {
+                    if (NetworkUtil.isNetworkAvailable(StakeCoinActivity.this)) {
+                        showNodeConnectionErrorAlert();
+                    } else {
+                        Toast.makeText(StakeCoinActivity.this, LocaleController.getString("networkError", R.string.networkError), Toast.LENGTH_LONG).show();
+                    }
+                }
+            }
+        });
+    }
+
+    private void getStake() {
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getStakingInfo(fromAddress, validatorAddress).enqueue(new Callback<StakingInfo>() {
+            @Override
+            public void onResponse(Call<StakingInfo> call, Response<StakingInfo> response) {
+                updateStake(response);
+            }
+
+            @Override
+            public void onFailure(Call<StakingInfo> call, Throwable t) {
+                if (t.getMessage().contains("End of input at")) {
+                    updateBalanceEmpty();
+                } else {
+                    if (NetworkUtil.isNetworkAvailable(StakeCoinActivity.this)) {
+                        showNodeConnectionErrorAlert();
+                    } else {
+                        Toast.makeText(StakeCoinActivity.this, LocaleController.getString("networkError", R.string.networkError), Toast.LENGTH_LONG).show();
+                    }
+                }
+            }
+        });
+    }
+
+    private void getAccountStatus() {
+        isSending = true;
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getAccountStatus(fromAddress).enqueue(new Callback<AccountStatus>() {
+            @Override
+            public void onResponse(Call<AccountStatus> call, Response<AccountStatus> response) {
+                if (response.code() == 200) {
+                    accountStatus = response.body();
+                    if (type == StakeCoinActivity.TYPE_STAKE) {
+                        makeTransactionStake();
+                    } else if (type == StakeCoinActivity.TYPE_UNSTAKE) {
+                        makeTransactionUnstake();
+                    } else {
+                        makeTransactionRedelegate();
+                    }
+                } else {
+                    step = 3;
+                    showPasswordFormView(true);
+                    if (passwordFormView != null)
+                        passwordFormView.showError(LocaleController.getString("failedLoadAccountError", R.string.failedLoadAccountError));
+                    isSending = false;
+                }
+            }
+
+            @Override
+            public void onFailure(Call<AccountStatus> call, Throwable t) {
+                if (NetworkUtil.isNetworkAvailable(StakeCoinActivity.this)) {
+                    showNodeConnectionErrorAlert();
+                } else {
+                    step = 3;
+                    showPasswordFormView(true);
+                    if (passwordFormView != null)
+                        passwordFormView.showError(LocaleController.getString("failedLoadAccountError", R.string.failedLoadAccountError));
+                }
+                isSending = false;
+            }
+        });
+    }
+
+    private void updateBalance(Response<ArrayList<Coin>> response) {
+        if (response != null) {
+            switch (response.code()) {
+                case 200:
+                    ArrayList<Coin> coins = response.body();
+                    if (coins != null && coins.size() > 0) {
+                        boolean hashReserveCoin = false;
+                        for (int i = 0; coins.size() > i; i++) {
+                            if (coins.get(i).getDenom().equals(Blockchain.getInstance().getReserveDenom())) {
+                                availableCoin = coins.get(i);
+                                updateAvailableCoin();
+                                hashReserveCoin = true;
+                            }
+                        }
+                        if (!hashReserveCoin) {
+                            availableCoin = getZeroAmountCoin();
+                            updateAvailableCoin();
+                        }
+                    } else {
+                        availableCoin = getZeroAmountCoin();
+                        updateAvailableCoin();
+                    }
+                    break;
+                default:
+                    availableCoin = getZeroAmountCoin();
+                    updateAvailableCoin();
+                    break;
+            }
+        } else {
+            availableCoin = getZeroAmountCoin();
+            updateAvailableCoin();
+        }
+    }
+
+    private void updateBalanceEmpty() {
+        availableCoin = getZeroAmountCoin();
+        updateAvailableCoin();
+    }
+
+    private void updateStake(Response<StakingInfo> response) {
+        if (response != null) {
+            switch (response.code()) {
+                case 200:
+                    StakingInfo responseCoin = response.body();
+                    if (responseCoin != null) {
+                        Coin coin = new Coin();
+                        coin.setDenom(Blockchain.getInstance().getReserveDenom());
+                        coin.setAmount(responseCoin.getShares() + "");
+                        availableCoin = coin;
+                        updateAvailableCoin();
+                    } else {
+                        availableCoin = getZeroAmountCoin();
+                        updateAvailableCoin();
+                    }
+                    break;
+                default:
+                    availableCoin = getZeroAmountCoin();
+                    updateAvailableCoin();
+                    break;
+            }
+        } else {
+            availableCoin = getZeroAmountCoin();
+            updateAvailableCoin();
+        }
+    }
+
+    private void updateAvailableCoin() {
+        if (amountFormView == null) return;
+        amountFormView.update(availableCoin);
+    }
+
+    private void updateTxProgress(boolean result, String txHash) {
+        if (txProgressView == null) return;
+        switch (type) {
+            case StakeCoinActivity.TYPE_STAKE:
+                txProgressView.update(TxProgressView.TYPE_STAKE, result, txHash, "", validatorName, Blockchain.getInstance().getReserveDenom(), NumberFormatter.getNumber(amountFormView.getValueOrigin()), NumberFormatter.getNumber(feeFormView.getValueOrigin()), "", fromAddress);
+                break;
+            case StakeCoinActivity.TYPE_UNSTAKE:
+                txProgressView.update(TxProgressView.TYPE_UNSTAKE, result, txHash, "", validatorName, Blockchain.getInstance().getReserveDenom(), NumberFormatter.getNumber(amountFormView.getValueOrigin()), NumberFormatter.getNumber(feeFormView.getValueOrigin()), "", fromAddress);
+                break;
+            case StakeCoinActivity.TYPE_REDELEGATE:
+                txProgressView.update(TxProgressView.TYPE_REDELEGATE, result, txHash, validatorName, redelegateValidatorName, Blockchain.getInstance().getReserveDenom(), NumberFormatter.getNumber(amountFormView.getValueOrigin()), NumberFormatter.getNumber(feeFormView.getValueOrigin()), "", fromAddress);
+                break;
+        }
+    }
+
+    private void varifyValidator() {
+        if (VarifyUtil.isValidValidator(this, type, validatorAddress, redelegateValidatorAddress)) {
+            step = 1;
+            showAmountFormView(false);
+        }
+    }
+
+    private void varifyAmount(String amount) {
+        if (amountFormView == null || availableCoin == null) return;
+        if (amount.length() != 0) {
+            try {
+                BigDecimal bamount = new BigDecimal(amount);
+                if (bamount.compareTo(BigDecimal.ZERO) < 1) {
+                    amountFormView.showError(LocaleController.getString("amountInvalidError", R.string.amountInvalidError));
+                } else {
+                    if (bamount.compareTo(new BigDecimal(availableCoin.getAmount())) < 1) {
+                        //scrollView.smoothScrollTo(0, 0);
+                        hideKeyboard();
+                        step = 2;
+                        showFeeFormView(false);
+                    } else {
+                        amountFormView.showError(LocaleController.getString("notEnoughBalance", R.string.notEnoughBalance));
+                    }
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+                amountFormView.showError(LocaleController.getString("amountInvalidError", R.string.amountInvalidError));
+            }
+        } else {
+            amountFormView.showError(LocaleController.getString("amountEmptyError", R.string.amountEmptyError));
+        }
+    }
+
+    private void varifyFee(String fee) {
+        if (amountFormView == null || feeFormView == null) return;
+        if (type == StakeCoinActivity.TYPE_STAKE) {
+            if (fee.length() != 0) {
+                try {
+                    BigDecimal bamount = new BigDecimal(fee);
+                    if (bamount.compareTo(new BigDecimal("0.0005")) < 0) {
+                        feeFormView.showError(LocaleController.getString("feeNotEnoughError", R.string.feeNotEnoughError));
+                    } else if (bamount.compareTo(BigDecimal.ONE) == 1) {
+                        feeFormView.showError(LocaleController.getString("feeInvalidError", R.string.feeInvalidError));
+                    } else {
+                        bamount = bamount.add(new BigDecimal(amountFormView.getValueOrigin()));
+                        if (bamount.compareTo(new BigDecimal(availableCoin.getAmount())) < 1) {
+                            scrollView.smoothScrollTo(0, 0);
+                            hideKeyboard();
+                            step = 3;
+                            showPasswordFormView(false);
+                            if (hasPassword() && isEnabledFingerprint(accountName))
+                                checkFingerprint();
+                        } else {
+                            feeFormView.showError(LocaleController.getString("notEnoughBalance", R.string.notEnoughBalance));
+                        }
+                    }
+                } catch (Exception e) {
+                    e.printStackTrace();
+                    feeFormView.showError(LocaleController.getString("amountInvalidError", R.string.amountInvalidError));
+                }
+            } else {
+                feeFormView.showError(LocaleController.getString("amountEmptyError", R.string.amountEmptyError));
+            }
+        } else {
+            BigDecimal bamount = new BigDecimal(fee);
+            if (bamount.compareTo(new BigDecimal("0.0005")) < 0) {
+                feeFormView.showError(LocaleController.getString("feeNotEnoughError", R.string.feeNotEnoughError));
+            } else if (bamount.compareTo(BigDecimal.ONE) == 1) {
+                feeFormView.showError(LocaleController.getString("feeInvalidError", R.string.feeInvalidError));
+            } else {
+                hideKeyboard();
+                step = 3;
+                showPasswordFormView(false);
+                if (hasPassword() && isEnabledFingerprint(accountName)) checkFingerprint();
+            }
+        }
+    }
+
+    private void varifyPassword(String pwd) {
+        if (passwordFormView == null) return;
+        if (pwd == null || pwd.length() < 8) {
+            passwordFormView.showError(LocaleController.getString("pwdInvalidError", R.string.pwdInvalidError));
+        } else {
+            step = 4;
+            showTxConfirmView();
+            if (txConfirmView != null) {
+                switch (type) {
+                    case StakeCoinActivity.TYPE_STAKE:
+                        txConfirmView.update(TxProgressView.TYPE_STAKE, null, "", validatorName, Blockchain.getInstance().getReserveDenom(), NumberFormatter.getNumber(amountFormView.getValueOrigin()), NumberFormatter.getNumber(feeFormView.getValueOrigin()), "", fromAddress);
+                        break;
+                    case StakeCoinActivity.TYPE_UNSTAKE:
+                        txConfirmView.update(TxProgressView.TYPE_UNSTAKE, null, "", validatorName, Blockchain.getInstance().getReserveDenom(), NumberFormatter.getNumber(amountFormView.getValueOrigin()), NumberFormatter.getNumber(feeFormView.getValueOrigin()), "", fromAddress);
+                        break;
+                    case StakeCoinActivity.TYPE_REDELEGATE:
+                        txConfirmView.update(TxProgressView.TYPE_REDELEGATE, null, validatorName, redelegateValidatorName, Blockchain.getInstance().getReserveDenom(), NumberFormatter.getNumber(amountFormView.getValueOrigin()), NumberFormatter.getNumber(feeFormView.getValueOrigin()), "", fromAddress);
+                        break;
+                }
+            }
+        }
+    }
+
+    private void showSelectValidatorFormView(boolean isMoveToBack) {
+        if (selectValidatorFormView == null) {
+            selectValidatorFormView = new SelectValidatorFormView(this, type, validatorName, new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    if (type == StakeCoinActivity.TYPE_REDELEGATE)
+                        showValidatorListActivity(ValidatorListActivity.TYPE_SELECT_VALIDATOR_FROM_ALL);
+
+                    /*if (type == StakeCoinActivity.TYPE_STAKE || type == StakeCoinActivity.TYPE_REDELEGATE) {
+                        showValidatorListActivity(ValidatorListActivity.TYPE_SELECT_VALIDATOR_FROM_ALL);
+                    } else {
+                        showValidatorListActivity(ValidatorListActivity.TYPE_SELECT_VALIDATOR_FROM_MY);
+                    }*/
+                }
+            });
+            contentsLayout.addView(selectValidatorFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(selectValidatorFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, selectValidatorFormView, false);
+        }
+
+        if (type == StakeCoinActivity.TYPE_REDELEGATE) {
+            if (redelegateValidatorAddress.equals("")) {
+                nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_grey);
+            } else {
+                nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+            }
+        } else {
+            if (validatorAddress.equals("")) {
+                nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_grey);
+            } else {
+                nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+            }
+
+        }
+        currentView = selectValidatorFormView;
+    }
+
+    private void showAmountFormView(boolean isMoveToBack) {
+
+        if (amountFormView == null) {
+            String title = "";
+            String desc = "";
+            switch (type) {
+                case StakeCoinActivity.TYPE_STAKE:
+                    title = LocaleController.getString("amountToStake", R.string.amountToStake);
+                    desc = LocaleController.getString("enterAmountStake", R.string.enterAmountStake);
+                    break;
+                case StakeCoinActivity.TYPE_UNSTAKE:
+                    title = LocaleController.getString("amountToUntake", R.string.amountToUntake);
+                    desc = LocaleController.getString("enterAmountUnstake", R.string.enterAmountUnstake);
+                    break;
+                case StakeCoinActivity.TYPE_REDELEGATE:
+                    title = LocaleController.getString("amountToRestake", R.string.amountToRestake);
+                    desc = LocaleController.getString("enterAmountRestake", R.string.enterAmountRestake);
+                    break;
+            }
+            amountFormView = new AmountFormView(this, true, title, desc, availableCoin, "");
+            contentsLayout.addView(amountFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(amountFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, amountFormView, false);
+        }
+
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        currentView = amountFormView;
+    }
+
+    private void showFeeFormView(boolean isMoveToBack) {
+        hideKeyboard();
+        if (feeFormView == null) {
+            feeFormView = new FeeFormView(this);
+            contentsLayout.addView(feeFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(feeFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, feeFormView, false);
+        }
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        currentView = feeFormView;
+    }
+
+    private void showPasswordFormView(boolean isMoveToBack) {
+        if (passwordFormView == null) {
+            passwordFormView = new DefaultFormView(this, true, true, false, LocaleController.getString("password", R.string.password), LocaleController.getString("differentWalletsDifferentPasswords", R.string.differentWalletsDifferentPasswords), null, null);
+            contentsLayout.addView(passwordFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(passwordFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, passwordFormView, false);
+        }
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        if (!isEnabledFingerprint(accountName)) passwordFormView.setFocus();
+        currentView = passwordFormView;
+    }
+
+    private void showTxConfirmView() {
+        hideKeyboard();
+        if (txConfirmView != null) contentsLayout.removeView(txConfirmView);
+
+        String title = "";
+        switch (type) {
+            case StakeCoinActivity.TYPE_STAKE:
+                title = LocaleController.getString("confirmStaking", R.string.confirmStaking);
+                break;
+            case StakeCoinActivity.TYPE_UNSTAKE:
+                title = LocaleController.getString("confirmStaking", R.string.confirmUnstake);
+                break;
+            case StakeCoinActivity.TYPE_REDELEGATE:
+                title = LocaleController.getString("confirmStaking", R.string.confirmRestake);
+                break;
+        }
+        txConfirmView = new TxConfirmView(this, title);
+        contentsLayout.addView(txConfirmView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        AnimUtil.changeView(currentView, txConfirmView, false);
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        currentView = txConfirmView;
+    }
+
+    private void showTxProgressView() {
+        hideKeyboard();
+        txProgressView = new TxProgressView(this);
+        contentsLayout.addView(txProgressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        AnimUtil.changeView(currentView, txProgressView, false);
+        nextButton.update(LocaleController.getString("done", R.string.done), R.drawable.btn_grey);
+        currentView = txProgressView;
+    }
+
+    private Coin getZeroAmountCoin() {
+        Coin coin = new Coin();
+        coin.setDenom(Blockchain.getInstance().getReserveDenom());
+        coin.setAmount("0");
+        return coin;
+    }
+
+    private String getActionbarTitle() {
+        String title = "";
+        switch (type) {
+            case StakeCoinActivity.TYPE_STAKE:
+                title = LocaleController.getString("stake", R.string.stake);
+                break;
+            case StakeCoinActivity.TYPE_UNSTAKE:
+                title = LocaleController.getString("unstake", R.string.unstake);
+                break;
+            case StakeCoinActivity.TYPE_REDELEGATE:
+                title = LocaleController.getString("redelegate", R.string.redelegate);
+                break;
+        }
+        return title;
+    }
+
+    private void showValidatorListActivity(int type) {
+        Intent intent = new Intent(StakeCoinActivity.this, ValidatorListActivity.class);
+        intent.putExtra("type", type);
+        intent.putExtra("accountName", accountName);
+        intent.putExtra("address", fromAddress);
+        startActivityForResult(intent, 200);
+    }
+
+    private void onSendFinished() {
+        isSending = false;
+        nextButton.update(LocaleController.getString("done", R.string.done), R.drawable.btn_radius4_blue);
+    }
+
+    private boolean hasPassword() {
+        SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        String pwd = pref.getString("W-" + accountName.replaceAll(" ", ""), "");
+        return !pwd.equals("");
+    }
+
+    private void setCurrentTimeMillis() {
+        currentTimeMillis = TimeUtil.getCurrentTimeMillis();
+    }
+
+    private void moveToBack() {
+        switch (step) {
+            case 0:
+                finish();
+                break;
+            case 1:
+                step = 0;
+                showSelectValidatorFormView(true);
+                break;
+            case 2:
+                step = 1;
+                showAmountFormView(true);
+                break;
+            case 3:
+                step = 2;
+                showFeeFormView(true);
+                break;
+            case 4:
+                step = 3;
+                showPasswordFormView(true);
+                break;
+        }
+    }
+
+    private View.OnClickListener onClickNextListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            switch (step) {
+                case 0:
+                    varifyValidator();
+                    break;
+                case 1:
+                    if (amountFormView != null) varifyAmount(amountFormView.getValueOrigin());
+                    break;
+                case 2:
+                    if (feeFormView != null) varifyFee(feeFormView.getValueOrigin());
+                    break;
+                case 3:
+                    if (passwordFormView != null) varifyPassword(passwordFormView.getValue());
+                    break;
+                case 4:
+                    step = 5;
+                    showTxProgressView();
+                    getAccountStatus();
+                    break;
+                case 5:
+                    if (!isSending) finish();
+                    break;
+            }
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/StakingActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/StakingActivity.java
new file mode 100644
index 000000000..e14faa72c
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/StakingActivity.java
@@ -0,0 +1,339 @@
+package com.lunamint.lunagram.ui;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Handler;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.ScrollView;
+import android.widget.Toast;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.component.DefaultButton;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+import com.lunamint.lunagram.ui.view.ClaimRewardCardView;
+import com.lunamint.lunagram.ui.view.StakeToolsView;
+import com.lunamint.lunagram.ui.view.StakingStatusCardView;
+import com.lunamint.lunagram.ui.view.StakingToolsCardView;
+import com.lunamint.wallet.ApiUtils;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.LcdService;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.model.StakingInfo;
+import com.lunamint.wallet.model.Unbonding;
+import com.lunamint.wallet.model.UnbondingEntries;
+import com.lunamint.wallet.utils.NetworkUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.io.IOException;
+import java.math.BigDecimal;
+import java.util.ArrayList;
+
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
+public class StakingActivity extends LunagramBaseActivity {
+
+    private static int GET_REWARD_DELAY = 20000;
+
+    private boolean isLoadingRewards = false;
+    private boolean isRecursive = false;
+
+    private String address;
+    private String accountName;
+
+    private Coin reward;
+
+    private StakingStatusCardView stakingStatusCardView;
+    private ClaimRewardCardView claimRewardCardView;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("staking", R.string.staking));
+
+        accountName = getIntent().getStringExtra("accountName");
+        address = getIntent().getStringExtra("address");
+
+        RelativeLayout mainLayout = new RelativeLayout(this);
+        mainLayout.setBackgroundColor(ActivityCompat.getColor(this, R.color.bg_default));
+
+        ScrollView scrollView = new ScrollView(this);
+        mainLayout.addView(scrollView, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        LinearLayout contentsLayout = new LinearLayout(this);
+        contentsLayout.setOrientation(LinearLayout.VERTICAL);
+        contentsLayout.setGravity(Gravity.CENTER_HORIZONTAL);
+        contentsLayout.setClipToPadding(false);
+        contentsLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(20));
+        scrollView.addView(contentsLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        stakingStatusCardView = new StakingStatusCardView(this, new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                switch (v.getId()) {
+                    case 0:
+                        showValidatorListActivity(ValidatorListActivity.TYPE_VIEW_MY_VALIDATORS);
+                        break;
+                    case 1:
+                        showValidatorListActivity(ValidatorListActivity.TYPE_VIEW_UNSTAKING_VALIDATORS);
+                        break;
+                }
+            }
+        });
+        contentsLayout.addView(stakingStatusCardView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+
+        claimRewardCardView = new ClaimRewardCardView(this, new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (reward == null) {
+                    Toast.makeText(StakingActivity.this, LocaleController.getString("notEnoughClaimReward", R.string.notEnoughClaimReward), Toast.LENGTH_LONG).show();
+                } else {
+                    BigDecimal rw = new BigDecimal(reward.getAmount());
+                    if (rw.compareTo(BigDecimal.ZERO) == 0) {
+                        Toast.makeText(StakingActivity.this, LocaleController.getString("notEnoughClaimReward", R.string.notEnoughClaimReward), Toast.LENGTH_LONG).show();
+                    } else {
+                        showClaimRewardActivity();
+                    }
+                }
+            }
+        });
+        contentsLayout.addView(claimRewardCardView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+
+        StakeToolsView stakeToolsView = new StakeToolsView(this, accountName, address);
+        contentsLayout.addView(stakeToolsView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+
+        StakingToolsCardView stakingToolsCardView = new StakingToolsCardView(this, onClickListener);
+        contentsLayout.addView(stakingToolsCardView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 80));
+
+        setContentView(mainLayout);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        getStakingInfo();
+        getUnbondingInfo();
+    }
+
+    @Override
+    protected void onDestroy() {
+        claimRewardCardView = null;
+        super.onDestroy();
+    }
+
+    private void getStakingInfo() {
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getDelegations(address).enqueue(new Callback<ArrayList<StakingInfo>>() {
+            @Override
+            public void onResponse(Call<ArrayList<StakingInfo>> call, Response<ArrayList<StakingInfo>> response) {
+                if (response.code() == 200) {
+                    ArrayList<StakingInfo> stakingInfos = response.body();
+                    update(stakingInfos);
+                } else if (response.code() == 400) {
+                    update(null);
+                } else {
+                    try {
+                        if (response.errorBody() != null) {
+                            if (response.errorBody().string().contains("no delegation for this")) {
+                                update(null);
+                            } else {
+                                Toast.makeText(StakingActivity.this, LocaleController.getString("internalServerError", R.string.internalServerError) + "\n" + response.errorBody().string(), Toast.LENGTH_LONG).show();
+                            }
+                        } else {
+                            Toast.makeText(StakingActivity.this, LocaleController.getString("unknownError", R.string.unknownError), Toast.LENGTH_LONG).show();
+                        }
+                    } catch (IOException e) {
+                        Toast.makeText(StakingActivity.this, LocaleController.getString("unknownError", R.string.unknownError), Toast.LENGTH_LONG).show();
+                    }
+                }
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<StakingInfo>> call, Throwable t) {
+                if (NetworkUtil.isNetworkAvailable(StakingActivity.this)) {
+                    showNodeConnectionErrorAlert();
+                } else {
+                    Toast.makeText(StakingActivity.this, LocaleController.getString("networkError", R.string.networkError), Toast.LENGTH_LONG).show();
+                }
+            }
+        });
+    }
+
+    private void getUnbondingInfo() {
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getUnbondingDelegations(address).enqueue(new Callback<ArrayList<Unbonding>>() {
+            @Override
+            public void onResponse(Call<ArrayList<Unbonding>> call, Response<ArrayList<Unbonding>> response) {
+                if (response.code() == 200) {
+                    ArrayList<Unbonding> unbondingInfos = response.body();
+                    updateUnbonding(unbondingInfos);
+                } else if (response.code() == 400) {
+                    updateUnbonding(null);
+                } else {
+                    try {
+                        if (response.errorBody() != null) {
+                            if (response.errorBody().string().contains("no delegation for this")) {
+                                updateUnbonding(null);
+                            } else {
+                                Toast.makeText(StakingActivity.this, LocaleController.getString("internalServerError", R.string.internalServerError) + "\n" + response.errorBody().string(), Toast.LENGTH_LONG).show();
+                            }
+                        } else {
+                            Toast.makeText(StakingActivity.this, LocaleController.getString("unknownError", R.string.unknownError), Toast.LENGTH_LONG).show();
+                        }
+                    } catch (IOException e) {
+                        Toast.makeText(StakingActivity.this, LocaleController.getString("unknownError", R.string.unknownError), Toast.LENGTH_LONG).show();
+                    }
+                }
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<Unbonding>> call, Throwable t) {
+            }
+        });
+    }
+
+    private void getRewards() {
+        if (isLoadingRewards || claimRewardCardView == null) return;
+        isLoadingRewards = true;
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getRewards(address).enqueue(new Callback<ArrayList<Coin>>() {
+            @Override
+            public void onResponse(Call<ArrayList<Coin>> call, Response<ArrayList<Coin>> response) {
+                updateClaimReward(response.body(), true);
+                isLoadingRewards = false;
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<Coin>> call, Throwable t) {
+                if (NetworkUtil.isNetworkAvailable(StakingActivity.this)) {
+                    showNodeConnectionErrorAlert();
+                }
+                isLoadingRewards = false;
+            }
+        });
+    }
+
+    private void update(ArrayList<StakingInfo> stakingInfos) {
+        double stakingAmount = 0;
+
+        if (stakingInfos != null) {
+            for (int i = 0; stakingInfos.size() > i; i++) {
+                stakingAmount = stakingAmount + stakingInfos.get(i).getShares();
+            }
+        }
+
+        Coin coin = new Coin();
+        coin.setAmount(stakingAmount + "");
+        coin.setDenom(Blockchain.getInstance().getReserveDenom());
+
+        stakingStatusCardView.updateStaking(coin);
+
+        if (!isRecursive && stakingAmount > 0) {
+            isRecursive = true;
+            getRewards();
+        } else {
+            if (!isRecursive) updateClaimReward(null, false);
+        }
+    }
+
+    private void updateUnbonding(ArrayList<Unbonding> unbondingInfos) {
+        BigDecimal unbondingAmount = null;
+
+        if (unbondingInfos != null) {
+            for (Unbonding unbonding : unbondingInfos) {
+                for (UnbondingEntries entries : unbonding.getEntries()) {
+                    if (unbondingAmount == null) unbondingAmount = new BigDecimal("0");
+                    unbondingAmount = unbondingAmount.add(entries.getBalance());
+                }
+            }
+        }
+
+        Coin coin = new Coin();
+        if (unbondingAmount != null) {
+            coin.setAmount(unbondingAmount.toString());
+        } else {
+            coin.setAmount("0");
+        }
+
+        coin.setDenom(Blockchain.getInstance().getReserveDenom());
+        stakingStatusCardView.updateUnstaking(coin);
+    }
+
+    private void delayGetRewards() {
+        new Handler().postDelayed(new Runnable() {
+            public void run() {
+                getRewards();
+            }
+        }, GET_REWARD_DELAY);
+    }
+
+    private void updateClaimReward(ArrayList<Coin> response, boolean isRecursive) {
+        if (claimRewardCardView == null || isFinishing()) return;
+
+        BigDecimal amount = new BigDecimal("0");
+        if (response != null) {
+            for (Coin coin : response) {
+                if (coin.getDenom().equals(Blockchain.getInstance().getReserveDenom()))
+                    amount = amount.add(new BigDecimal(coin.getAmountOrigin()));
+            }
+        }
+
+        reward = new Coin();
+        reward.setAmount(amount.toString());
+        reward.setDenom(Blockchain.getInstance().getReserveDenom());
+
+        claimRewardCardView.update(reward);
+
+        if (isRecursive) delayGetRewards();
+    }
+
+    private void showValidatorListActivity(int type) {
+        Intent intent = new Intent(StakingActivity.this, ValidatorListActivity.class);
+        intent.putExtra("type", type);
+        intent.putExtra("accountName", accountName);
+        intent.putExtra("address", address);
+        startActivity(intent);
+    }
+
+    private void showTransactionHistoryActivity() {
+        Intent intent = new Intent(StakingActivity.this, TransactionHistoryActivity.class);
+        intent.putExtra("startType", TransactionHistoryActivity.TYPE_STAKING);
+        intent.putExtra("address", address);
+        startActivity(intent);
+    }
+
+    private void showClaimRewardActivity() {
+        Intent intent = new Intent(StakingActivity.this, ClaimRewardActivity.class);
+        intent.putExtra("accountName", accountName);
+        intent.putExtra("address", address);
+        intent.putExtra("rewards", reward.getAmount());
+        startActivity(intent);
+    }
+
+    private View.OnClickListener onClickListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            switch (v.getId()) {
+                case 0:
+                    showValidatorListActivity(ValidatorListActivity.TYPE_VIEW_MY_VALIDATORS);
+                    break;
+                case 1:
+                    showValidatorListActivity(ValidatorListActivity.TYPE_VIEW_VALIDATORS);
+                    break;
+                case 2:
+                    showTransactionHistoryActivity();
+                    break;
+            }
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/TransactionDetailActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/TransactionDetailActivity.java
new file mode 100644
index 000000000..e372bc887
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/TransactionDetailActivity.java
@@ -0,0 +1,235 @@
+package com.lunamint.lunagram.ui;
+
+import android.graphics.Typeface;
+import android.os.Bundle;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ProgressBar;
+import android.widget.ScrollView;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+import com.lunamint.lunagram.ui.view.TransactionClaimRewardDetailView;
+import com.lunamint.lunagram.ui.view.TransactionSendDetailView;
+import com.lunamint.lunagram.ui.view.TransactionStakeDetailView;
+import com.lunamint.lunagram.ui.view.TransactionVoteDetailView;
+import com.lunamint.wallet.ApiUtils;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.LcdService;
+import com.lunamint.wallet.model.tx.DefaultHistory;
+import com.lunamint.wallet.utils.BigDecimalUtil;
+import com.lunamint.wallet.utils.NetworkUtil;
+import com.lunamint.wallet.utils.NumberFormatter;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
+public class TransactionDetailActivity extends LunagramBaseActivity {
+
+    private String myAddress = "";
+    private String txHash = "";
+
+    private LinearLayout mainLayout;
+    private LinearLayout loadingLayout;
+    private TextView errorTextview;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("transactionDetail", R.string.transactionDetail));
+
+        myAddress = getIntent().getStringExtra("address");
+        txHash = getIntent().getStringExtra("hash");
+
+        FrameLayout frameLayout = new FrameLayout(this);
+
+        ScrollView scrollView = new ScrollView(this);
+        frameLayout.addView(scrollView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        mainLayout = new LinearLayout(this);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        scrollView.addView(mainLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        mainLayout.setVisibility(View.GONE);
+
+        loadingLayout = new LinearLayout(this);
+        loadingLayout.setGravity(Gravity.CENTER);
+        frameLayout.addView(loadingLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        ProgressBar progressBar = new ProgressBar(this);
+        loadingLayout.addView(progressBar, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        errorTextview = new TextView(this);
+        errorTextview.setTextColor(ActivityCompat.getColor(this, R.color.payneGrey));
+        errorTextview.setTextSize(0, AndroidUtilities.dp(16));
+        errorTextview.setGravity(Gravity.CENTER);
+        errorTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        frameLayout.addView(errorTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 500, 20, 10, 20, 36));
+        errorTextview.setVisibility(View.GONE);
+
+        setContentView(frameLayout);
+
+        getTransactionDetail();
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+    }
+
+    private void getTransactionDetail() {
+        if (txHash == null || txHash.equals("")) {
+            update(null);
+            return;
+        }
+
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getTransactionDetail(txHash).enqueue(new Callback<DefaultHistory>() {
+            @Override
+            public void onResponse(Call<DefaultHistory> call, Response<DefaultHistory> response) {
+                if (response.code() == 200) {
+                    update(response.body());
+                } else {
+                    update(null);
+                }
+            }
+
+            @Override
+            public void onFailure(Call<DefaultHistory> call, Throwable t) {
+                if (NetworkUtil.isNetworkAvailable(TransactionDetailActivity.this)) {
+                    showNodeConnectionErrorAlert();
+                } else {
+                    Toast.makeText(TransactionDetailActivity.this, LocaleController.getString("networkError", R.string.networkError), Toast.LENGTH_LONG).show();
+                }
+            }
+        });
+    }
+
+    private void update(DefaultHistory result) {
+        if (mainLayout == null) return;
+        TextView titleTextview = new TextView(this);
+        titleTextview.setTextColor(ActivityCompat.getColor(this, R.color.charcoal));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(32));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+
+        loadingLayout.setVisibility(View.GONE);
+        if (result != null) {
+            View transactionSendDetailView = null;
+            String feeAmount = "0";
+
+            try {
+                if (result.getTx().getValue().getFee().getAmount() != null && result.getTx().getValue().getFee().getAmount().size() > 0)
+                    feeAmount = result.getTx().getValue().getFee().getAmount().get(0).getAmount();
+
+                switch (result.getTx().getValue().getMsg().get(0).getType()) {
+                    case "cosmos-sdk/MsgSend":
+                        String to = result.getTx().getValue().getMsg().get(0).getValue().get("to_address").getAsString();
+                        if (myAddress != null && !myAddress.equals("") && myAddress.equals(to)) {
+                            titleTextview.setText(LocaleController.getString("receive", R.string.receive));
+                        } else {
+                            titleTextview.setText(LocaleController.getString("send", R.string.send));
+                        }
+
+                        transactionSendDetailView = new TransactionSendDetailView(this,
+                                TransactionSendDetailView.TYPE_RESULT,
+                                true,
+                                result.getResult(),
+                                result.getHash(),
+                                result.getTx().getValue().getMsg().get(0).getValue().get("from_address").getAsString(),
+                                to,
+                                result.getTx().getValue().getMsg().get(0).getValue().get("amount").getAsJsonArray().get(0).getAsJsonObject().get("denom").getAsString(),
+                                NumberFormatter.getNumber(BigDecimalUtil.getNumberNano(result.getTx().getValue().getMsg().get(0).getValue().get("amount").getAsJsonArray().get(0).getAsJsonObject().get("amount").getAsString(), "4")),
+                                NumberFormatter.getNumber(BigDecimalUtil.getNumberNano(feeAmount, "4")),
+                                result.getTx().getValue().getMemo(),
+                                myAddress);
+                        break;
+                    case "cosmos-sdk/MsgDelegate":
+                        titleTextview.setText(LocaleController.getString("delegate", R.string.delegate));
+                        transactionSendDetailView = new TransactionStakeDetailView(this,
+                                TransactionSendDetailView.TYPE_RESULT,
+                                result.getResult(),
+                                result.getHash(),
+                                result.getTx().getValue().getMsg().get(0).getValue().get("validator_address").getAsString(),
+                                result.getTx().getValue().getMsg().get(0).getValue().getAsJsonObject("amount").get("denom").getAsString(),
+                                NumberFormatter.getNumber(BigDecimalUtil.getNumberNano(result.getTx().getValue().getMsg().get(0).getValue().getAsJsonObject("amount").get("amount").getAsString(), "4")),
+                                NumberFormatter.getNumber(BigDecimalUtil.getNumberNano(feeAmount, "4")));
+                        break;
+                    case "cosmos-sdk/MsgUndelegate":
+                        titleTextview.setText(LocaleController.getString("unstake", R.string.unstake));
+                        transactionSendDetailView = new TransactionStakeDetailView(this,
+                                TransactionSendDetailView.TYPE_RESULT,
+                                result.getResult(),
+                                result.getHash(),
+                                result.getTx().getValue().getMsg().get(0).getValue().get("validator_address").getAsString(),
+                                result.getTx().getValue().getMsg().get(0).getValue().getAsJsonObject("amount").get("denom").getAsString(),
+                                NumberFormatter.getNumber(BigDecimalUtil.getNumberNano(result.getTx().getValue().getMsg().get(0).getValue().getAsJsonObject("amount").get("amount").getAsString(), "4")),
+                                NumberFormatter.getNumber(BigDecimalUtil.getNumberNano(feeAmount, "4")));
+                        break;
+                    case "cosmos-sdk/MsgBeginRedelegate":
+                        titleTextview.setText(LocaleController.getString("redelegate", R.string.redelegate));
+                        transactionSendDetailView = new TransactionSendDetailView(this,
+                                TransactionSendDetailView.TYPE_RESULT,
+                                false,
+                                result.getResult(),
+                                result.getHash(),
+                                result.getTx().getValue().getMsg().get(0).getValue().get("delegator_address").getAsString(),
+                                result.getTx().getValue().getMsg().get(0).getValue().get("validator_dst_address").getAsString(),
+                                result.getTx().getValue().getMsg().get(0).getValue().getAsJsonObject("amount").get("denom").getAsString(),
+                                NumberFormatter.getNumber(BigDecimalUtil.getNumberNano(result.getTx().getValue().getMsg().get(0).getValue().getAsJsonObject("amount").get("amount").getAsString(), "4")),
+                                NumberFormatter.getNumber(BigDecimalUtil.getNumberNano(feeAmount, "4")),
+                                result.getTx().getValue().getMemo(),
+                                myAddress);
+                        break;
+                    case "cosmos-sdk/MsgWithdrawDelegationReward":
+                        titleTextview.setText(LocaleController.getString("claimReward", R.string.claimReward));
+                        transactionSendDetailView = new TransactionClaimRewardDetailView(this,
+                                TransactionSendDetailView.TYPE_RESULT,
+                                result.getResult(),
+                                result.getHash(),
+                                null,
+                                NumberFormatter.getNumber(BigDecimalUtil.getNumberNano(feeAmount, "4")));
+                        break;
+                    case "cosmos-sdk/MsgVote":
+                        titleTextview.setText(LocaleController.getString("vote", R.string.vote));
+                        transactionSendDetailView = new TransactionVoteDetailView(this,
+                                TransactionSendDetailView.TYPE_RESULT,
+                                result.getResult(),
+                                result.getHash(),
+                                result.getTx().getValue().getMsg().get(0).getValue().get("proposal_id").getAsString(),
+                                result.getTx().getValue().getMsg().get(0).getValue().get("option").getAsString(),
+                                NumberFormatter.getNumber(BigDecimalUtil.getNumberNano(feeAmount, "4")));
+                        break;
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+
+            if (transactionSendDetailView != null) {
+                mainLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 20, 20, 20, 36));
+
+                mainLayout.addView(transactionSendDetailView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+                mainLayout.setVisibility(View.VISIBLE);
+                errorTextview.setVisibility(View.GONE);
+            } else {
+                errorTextview.setText(LocaleController.getString("failedGetTransactionError", R.string.failedGetTransactionError));
+                errorTextview.setVisibility(View.VISIBLE);
+                mainLayout.setVisibility(View.GONE);
+            }
+        } else {
+            errorTextview.setText(LocaleController.getString("failedGetTransactionError", R.string.failedGetTransactionError));
+            errorTextview.setVisibility(View.VISIBLE);
+            mainLayout.setVisibility(View.GONE);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/TransactionHistoryActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/TransactionHistoryActivity.java
new file mode 100644
index 000000000..45f06bfc7
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/TransactionHistoryActivity.java
@@ -0,0 +1,50 @@
+package com.lunamint.lunagram.ui;
+
+import android.os.Bundle;
+import android.support.design.widget.TabLayout;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.view.ViewPager;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.adapter.TransactionHistoryPagerAdapter;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+
+import org.telegram.messenger.LocaleController;
+
+public class TransactionHistoryActivity extends LunagramBaseActivity {
+
+    public static final int TYPE_TRANSFER = 0;
+    public static final int TYPE_STAKING = 1;
+    public static final int TYPE_GOVERNANCE = 2;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("transactionHistory", R.string.transactionHistory));
+
+        setContentView(R.layout.fragment_viewpager);
+
+        TabLayout tabLayout = findViewById(R.id.tab_layout);
+        tabLayout.setSelectedTabIndicatorColor(ActivityCompat.getColor(this, R.color.tab_indicator));
+        tabLayout.setTabTextColors(ActivityCompat.getColor(this, R.color.tab_text), ActivityCompat.getColor(this, R.color.tab_text_selected));
+
+        ViewPager viewPager = findViewById(R.id.viewpager);
+
+        TransactionHistoryPagerAdapter adapter = new TransactionHistoryPagerAdapter(getSupportFragmentManager(), getIntent().getStringExtra("address"));
+        viewPager.setAdapter(adapter);
+        viewPager.setOffscreenPageLimit(3);
+        viewPager.setBackgroundColor(ActivityCompat.getColor(this, R.color.bg_default));
+
+        tabLayout.setupWithViewPager(viewPager);
+        String[] tabText = {LocaleController.getString("transfer", R.string.transfer), LocaleController.getString("staking", R.string.staking), LocaleController.getString("governance", R.string.governance)};
+
+        for (int i = 0; tabText.length > i; i++) {
+            tabLayout.getTabAt(i).setText(tabText[i]);
+        }
+
+        viewPager.setCurrentItem(getIntent().getIntExtra("startType", 0));
+
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/ValidatorInfoActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/ValidatorInfoActivity.java
new file mode 100644
index 000000000..817fbb5a5
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/ValidatorInfoActivity.java
@@ -0,0 +1,281 @@
+package com.lunamint.lunagram.ui;
+
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.v4.app.ActivityCompat;
+import android.view.View;
+import android.widget.LinearLayout;
+import android.widget.ScrollView;
+import android.widget.Toast;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.component.DefaultButton;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+import com.lunamint.lunagram.ui.view.StakingStatusCardView;
+import com.lunamint.lunagram.ui.view.ValidatorProfileView;
+import com.lunamint.wallet.ApiUtils;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.LcdService;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.model.StakingInfo;
+import com.lunamint.wallet.model.Unbonding;
+import com.lunamint.wallet.model.UnbondingEntries;
+import com.lunamint.wallet.model.Validator;
+import com.lunamint.wallet.utils.NetworkUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.ActionBar.AlertDialog;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.io.IOException;
+import java.math.BigDecimal;
+import java.util.ArrayList;
+
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
+public class ValidatorInfoActivity extends LunagramBaseActivity {
+
+    private String accountName;
+    private String address;
+    private double totalPower;
+    private Validator validatorInfo;
+
+    private ValidatorProfileView validatorProfileView;
+    private StakingStatusCardView myStakingInfoView;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("validator", R.string.validator));
+
+        accountName = getIntent().getStringExtra("accountName");
+        address = getIntent().getStringExtra("address");
+        totalPower = getIntent().getDoubleExtra("totalPower", 0);
+        validatorInfo = (Validator) getIntent().getSerializableExtra("validatorInfo");
+
+        LinearLayout mainLayout = new LinearLayout(this);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.setBackgroundColor(ActivityCompat.getColor(this, R.color.bg_default));
+
+        ScrollView scrollView = new ScrollView(this);
+        mainLayout.addView(scrollView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 0, 1.0f));
+
+        LinearLayout contentsLayout = new LinearLayout(this);
+        contentsLayout.setOrientation(LinearLayout.VERTICAL);
+        contentsLayout.setClipToPadding(false);
+        scrollView.addView(contentsLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        validatorProfileView = new ValidatorProfileView(this, onClickListener);
+        myStakingInfoView = new StakingStatusCardView(this, null);
+
+        contentsLayout.addView(validatorProfileView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        contentsLayout.addView(myStakingInfoView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 20, 0, 20, 20));
+
+        LinearLayout buttonLayout = new LinearLayout(this);
+        buttonLayout.setOrientation(LinearLayout.HORIZONTAL);
+        buttonLayout.setClipToPadding(false);
+        buttonLayout.setPadding(AndroidUtilities.dp(20), 0, AndroidUtilities.dp(20), AndroidUtilities.dp(20));
+        mainLayout.addView(buttonLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        DefaultButton unstakeButton = new DefaultButton(this, 4, true, LocaleController.getString("unstake", R.string.unstake), R.drawable.btn_radius4_dark_blue, new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                showSelectDelegateTypeDialog();
+            }
+        });
+        buttonLayout.addView(unstakeButton, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
+
+        int stakeButtonBg;
+        if (validatorInfo != null && !validatorInfo.getJailed()) {
+            stakeButtonBg = R.drawable.btn_radius4_blue;
+        } else {
+            stakeButtonBg = R.drawable.btn_grey;
+        }
+        DefaultButton stakeButton = new DefaultButton(this, 4, true, LocaleController.getString("stake", R.string.stake), stakeButtonBg, new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                showStakeCoinActivity(StakeCoinActivity.TYPE_STAKE);
+            }
+        });
+        buttonLayout.addView(stakeButton, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
+
+        update();
+        setContentView(mainLayout);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        getStakingInfo();
+        getUnbondingInfo();
+    }
+
+    private View.OnClickListener onClickListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            switch (v.getId()) {
+                case ValidatorProfileView.ACTION_SHOW_HISTORY:
+                    showTransactionHistoryActivity();
+                    break;
+                case ValidatorProfileView.ACTION_SHOW_WEBSITE:
+                    showWebsite();
+                    break;
+            }
+        }
+    };
+
+    private void showSelectDelegateTypeDialog() {
+        AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        builder.setItems(new CharSequence[]{LocaleController.getString("unstake", R.string.unstake), LocaleController.getString("redelegate", R.string.redelegate)}, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialogInterface, int i) {
+                if (i == 0) {
+                    showStakeCoinActivity(StakeCoinActivity.TYPE_UNSTAKE);
+                } else {
+                    showStakeCoinActivity(StakeCoinActivity.TYPE_REDELEGATE);
+                }
+            }
+        });
+        builder.create().show();
+    }
+
+    private void showStakeCoinActivity(int type) {
+        if (type == StakeCoinActivity.TYPE_STAKE && validatorInfo.getJailed()) {
+            Toast.makeText(ValidatorInfoActivity.this, LocaleController.getString("jailedValidatorError", R.string.jailedValidatorError), Toast.LENGTH_LONG).show();
+            return;
+        }
+
+        Intent intent = new Intent(ValidatorInfoActivity.this, StakeCoinActivity.class);
+        intent.putExtra("type", type);
+        intent.putExtra("accountName", accountName);
+        intent.putExtra("address", address);
+        intent.putExtra("validatorName", validatorInfo.getDescription().getMoniker());
+        intent.putExtra("validatorAddress", validatorInfo.getOperatorAddress());
+        startActivity(intent);
+    }
+
+    private void showTransactionHistoryActivity() {
+        Intent intent = new Intent(ValidatorInfoActivity.this, TransactionHistoryActivity.class);
+        intent.putExtra("startType", TransactionHistoryActivity.TYPE_STAKING);
+        intent.putExtra("address", address);
+        startActivity(intent);
+    }
+
+    private void showWebsite() {
+        if (validatorInfo == null || validatorInfo.getDescription() == null || validatorInfo.getDescription().getWebsite() == null || !validatorInfo.getDescription().getWebsite().contains("http"))
+            return;
+        String url = validatorInfo.getDescription().getWebsite();
+        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+        startActivity(intent);
+    }
+
+    private void getStakingInfo() {
+
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getStakingInfo(address, validatorInfo.getOperatorAddress()).enqueue(new Callback<StakingInfo>() {
+            @Override
+            public void onResponse(Call<StakingInfo> call, Response<StakingInfo> response) {
+                if (response.code() == 200) {
+                    StakingInfo data = response.body();
+                    if (data != null) {
+                        updateMyStakingInfo(data.getShares());
+                    } else {
+                        updateMyStakingInfo(0);
+                    }
+                } else if (response.code() == 400) {
+                    updateMyStakingInfo(0);
+                } else {
+                    try {
+                        if (response.errorBody() != null && response.errorBody().string().contains("no delegation for this")) {
+                            updateMyStakingInfo(0);
+                        } else {
+                            Toast.makeText(ValidatorInfoActivity.this, LocaleController.getString("internalServerError", R.string.internalServerError), Toast.LENGTH_LONG).show();
+                        }
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                        Toast.makeText(ValidatorInfoActivity.this, LocaleController.getString("unknownError", R.string.unknownError), Toast.LENGTH_LONG).show();
+                    }
+                }
+            }
+
+            @Override
+            public void onFailure(Call<com.lunamint.wallet.model.StakingInfo> call, Throwable t) {
+                if (NetworkUtil.isNetworkAvailable(ValidatorInfoActivity.this)) {
+                    showNodeConnectionErrorAlert();
+                } else {
+                    Toast.makeText(ValidatorInfoActivity.this, LocaleController.getString("networkError", R.string.networkError), Toast.LENGTH_LONG).show();
+                }
+            }
+        });
+    }
+
+    private void getUnbondingInfo() {
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getUnbondingDelegation(address, validatorInfo.getOperatorAddress()).enqueue(new Callback<Unbonding>() {
+            @Override
+            public void onResponse(Call<Unbonding> call, Response<Unbonding> response) {
+                if (response.code() == 200 && response.body() != null) {
+                    Unbonding unbondingInfos = response.body();
+                    updateUnbonding(unbondingInfos.getEntries());
+                } else if (response.code() == 400) {
+                    updateUnbonding(null);
+                } else {
+                    try {
+                        if (response.errorBody() != null && response.errorBody().string().contains("no unbonding delegation found")) {
+                            updateUnbonding(null);
+                        } else {
+                            Toast.makeText(ValidatorInfoActivity.this, LocaleController.getString("internalServerError", R.string.internalServerError) + "\n" + response.errorBody().string(), Toast.LENGTH_LONG).show();
+                        }
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                        Toast.makeText(ValidatorInfoActivity.this, LocaleController.getString("unknownError", R.string.unknownError), Toast.LENGTH_LONG).show();
+                    }
+                }
+            }
+
+            @Override
+            public void onFailure(Call<Unbonding> call, Throwable t) {
+                Toast.makeText(ValidatorInfoActivity.this, LocaleController.getString("networkError", R.string.networkError), Toast.LENGTH_LONG).show();
+            }
+        });
+    }
+
+    private void update() {
+        if (validatorInfo == null) return;
+        validatorProfileView.update(validatorInfo, totalPower);
+    }
+
+    private void updateMyStakingInfo(double amount) {
+        Coin coin = new Coin();
+        coin.setAmount(amount + "");
+        coin.setDenom(Blockchain.getInstance().getReserveDenom());
+        myStakingInfoView.updateStaking(coin);
+    }
+
+    private void updateUnbonding(ArrayList<UnbondingEntries> unbondingEntries) {
+        BigDecimal amount = null;
+        if (unbondingEntries != null) {
+            for (UnbondingEntries entries : unbondingEntries) {
+                if (amount == null) amount = new BigDecimal("0");
+                amount = amount.add(entries.getBalance());
+            }
+        }
+
+        Coin coin = new Coin();
+        if (amount != null) {
+            coin.setAmount(amount.toString());
+        } else {
+            coin.setAmount("0");
+        }
+        coin.setDenom(Blockchain.getInstance().getReserveDenom());
+
+        myStakingInfoView.updateUnstaking(coin);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/ValidatorListActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/ValidatorListActivity.java
new file mode 100644
index 000000000..165ebe5ed
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/ValidatorListActivity.java
@@ -0,0 +1,440 @@
+package com.lunamint.lunagram.ui;
+
+import android.content.Intent;
+import android.graphics.Typeface;
+import android.os.Bundle;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.adapter.ValidatorListAdapter;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+import com.lunamint.wallet.ApiUtils;
+import com.lunamint.wallet.LcdService;
+import com.lunamint.wallet.model.StakingInfo;
+import com.lunamint.wallet.model.Unbonding;
+import com.lunamint.wallet.model.UnbondingEntries;
+import com.lunamint.wallet.model.Validator;
+import com.lunamint.wallet.utils.NetworkUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.ActionBar.AlertDialog;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.io.IOException;
+import java.math.BigDecimal;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
+public class ValidatorListActivity extends LunagramBaseActivity {
+
+    public static final int ACTIVITY_RESULT_OK = 200;
+
+    public static final int TYPE_VIEW_VALIDATORS = 0;
+    public static final int TYPE_VIEW_MY_VALIDATORS = 1;
+    public static final int TYPE_VIEW_UNSTAKING_VALIDATORS = 2;
+    public static final int TYPE_STAKE = 3;
+    public static final int TYPE_UNSTAKE = 4;
+    public static final int TYPE_REDELEGATE = 5;
+    public static final int TYPE_SELECT_VALIDATOR_FROM_ALL = 6;
+    public static final int TYPE_SELECT_VALIDATOR_FROM_MY = 7;
+
+    private int type;
+    private String accountName;
+    private String address;
+    private ArrayList<Validator> validatorList;
+
+    private ValidatorListAdapter validatorListAdapter;
+
+    private TextView totalValidatorTextview;
+
+    private LinearLayout contentsLayout;
+    private LinearLayout loadingLayout;
+
+    private Comparator<Validator> comparator = new Comparator<Validator>() {
+        @Override
+        public int compare(Validator o1, Validator o2) {
+            return Float.compare(o2.getDelegatorShares(), o1.getDelegatorShares());
+        }
+    };
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        type = getIntent().getIntExtra("type", 0);
+        accountName = getIntent().getStringExtra("accountName");
+        address = getIntent().getStringExtra("address");
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(getActionbarTitle());
+
+        LinearLayout mainLayout = new LinearLayout(this);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.setBackgroundColor(ActivityCompat.getColor(this, R.color.bg_default));
+
+        if (type != ValidatorListActivity.TYPE_STAKE && type != ValidatorListActivity.TYPE_SELECT_VALIDATOR_FROM_ALL && type != ValidatorListActivity.TYPE_SELECT_VALIDATOR_FROM_MY) {
+            LinearLayout totalValidatorsLayout = new LinearLayout(this);
+            totalValidatorsLayout.setOrientation(LinearLayout.HORIZONTAL);
+            totalValidatorsLayout.setGravity(Gravity.CENTER_VERTICAL);
+            totalValidatorsLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(22), AndroidUtilities.dp(20), AndroidUtilities.dp(12));
+            mainLayout.addView(totalValidatorsLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+            TextView balanceTitleTextview = new TextView(this);
+            balanceTitleTextview.setTextSize(0, AndroidUtilities.dp(16));
+            balanceTitleTextview.setTextColor(ActivityCompat.getColor(this, R.color.charcoal));
+            balanceTitleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+            balanceTitleTextview.setText(LocaleController.getString("validators", R.string.validators));
+            totalValidatorsLayout.addView(balanceTitleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 4, 0));
+
+            totalValidatorTextview = new TextView(this);
+            totalValidatorTextview.setTextSize(0, AndroidUtilities.dp(16));
+            totalValidatorTextview.setTextColor(ActivityCompat.getColor(this, R.color.medium_slate_blue));
+            totalValidatorTextview.setTypeface(Typeface.DEFAULT_BOLD);
+            totalValidatorsLayout.addView(totalValidatorTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+        }
+
+        FrameLayout frameLayout = new FrameLayout(this);
+        mainLayout.addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 0, 1.0f));
+
+        contentsLayout = new LinearLayout(this);
+        contentsLayout.setOrientation(LinearLayout.VERTICAL);
+        frameLayout.addView(contentsLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        ListView listView = new ListView(this);
+        validatorListAdapter = new ValidatorListAdapter(this, 0, validatorList);
+        listView.setAdapter(validatorListAdapter);
+        listView.setOnItemClickListener(onItemClickListener);
+        contentsLayout.addView(listView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 0, 1.0f));
+
+        contentsLayout.setVisibility(View.INVISIBLE);
+
+        loadingLayout = new LinearLayout(this);
+        loadingLayout.setGravity(Gravity.CENTER);
+        frameLayout.addView(loadingLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        ProgressBar progressBar = new ProgressBar(this);
+        loadingLayout.addView(progressBar, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        setContentView(mainLayout);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        getAllValidators();
+    }
+
+    private void getAllValidators() {
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getValidators().enqueue(new Callback<ArrayList<Validator>>() {
+            @Override
+            public void onResponse(Call<ArrayList<Validator>> call, Response<ArrayList<Validator>> response) {
+                if (response.code() == 200) {
+                    validatorList = response.body();
+                    if (validatorList != null) Collections.sort(validatorList, comparator);
+                    if (type != ValidatorListActivity.TYPE_VIEW_UNSTAKING_VALIDATORS) {
+                        getStakingInfo();
+                    } else {
+                        getUnbondingInfo();
+                    }
+                } else {
+                    update(null, null);
+                    String err = "";
+                    try {
+                        if (response.errorBody() != null) err = response.errorBody().string();
+                    } catch (IOException e) {
+                        // ignore
+                    }
+
+                    Toast.makeText(ValidatorListActivity.this, LocaleController.getString("internalServerError", R.string.internalServerError) + "\n" + err, Toast.LENGTH_LONG).show();
+                }
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<Validator>> call, Throwable t) {
+                if (NetworkUtil.isNetworkAvailable(ValidatorListActivity.this)) {
+                    showNodeConnectionErrorAlert();
+                } else {
+                    Toast.makeText(ValidatorListActivity.this, LocaleController.getString("networkError", R.string.networkError), Toast.LENGTH_LONG).show();
+                }
+            }
+        });
+    }
+
+
+    AdapterView.OnItemClickListener onItemClickListener = new AdapterView.OnItemClickListener() {
+        @Override
+        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+            if (validatorList == null) return;
+            switch (type) {
+                case ValidatorListActivity.TYPE_VIEW_VALIDATORS:
+                    showValidatorInfoActivity(validatorList.get(position));
+                    break;
+                case ValidatorListActivity.TYPE_VIEW_MY_VALIDATORS:
+                    showValidatorInfoActivity(validatorList.get(position));
+                    break;
+                case ValidatorListActivity.TYPE_VIEW_UNSTAKING_VALIDATORS:
+                    break;
+                case ValidatorListActivity.TYPE_STAKE:
+                    showStakeCoinActivity(validatorList.get(position), StakeCoinActivity.TYPE_STAKE);
+                    break;
+                case ValidatorListActivity.TYPE_UNSTAKE:
+                    showStakeCoinActivity(validatorList.get(position), StakeCoinActivity.TYPE_UNSTAKE);
+                    break;
+                case ValidatorListActivity.TYPE_REDELEGATE:
+                    showStakeCoinActivity(validatorList.get(position), StakeCoinActivity.TYPE_REDELEGATE);
+                    break;
+                case ValidatorListActivity.TYPE_SELECT_VALIDATOR_FROM_ALL:
+                    finishWithResult(validatorList.get(position));
+                    break;
+                case ValidatorListActivity.TYPE_SELECT_VALIDATOR_FROM_MY:
+                    finishWithResult(validatorList.get(position));
+                    break;
+            }
+        }
+    };
+
+    private void showValidatorInfoActivity(Validator validator) {
+        if (validatorListAdapter == null) return;
+        Intent intent = new Intent(ValidatorListActivity.this, ValidatorInfoActivity.class);
+        intent.putExtra("accountName", accountName);
+        intent.putExtra("address", address);
+        intent.putExtra("totalPower", validatorListAdapter.getTotalPower());
+        intent.putExtra("validatorInfo", validator);
+        startActivity(intent);
+    }
+
+    private void showStakeCoinActivity(Validator validator, int type) {
+        if (type == StakeCoinActivity.TYPE_STAKE && validator.getJailed()) {
+            Toast.makeText(ValidatorListActivity.this, LocaleController.getString("jailedValidatorError", R.string.jailedValidatorError), Toast.LENGTH_LONG).show();
+            return;
+        }
+        Intent intent = new Intent(ValidatorListActivity.this, StakeCoinActivity.class);
+        intent.putExtra("type", type);
+        intent.putExtra("accountName", accountName);
+        intent.putExtra("address", address);
+        intent.putExtra("validatorName", validator.getDescription().getMoniker());
+        intent.putExtra("validatorAddress", validator.getOperatorAddress());
+        startActivity(intent);
+
+        if (this.type != ValidatorListActivity.TYPE_VIEW_VALIDATORS && this.type != ValidatorListActivity.TYPE_VIEW_MY_VALIDATORS && this.type != ValidatorListActivity.TYPE_VIEW_UNSTAKING_VALIDATORS) {
+            finish();
+        }
+    }
+
+    private void getStakingInfo() {
+        if (validatorList == null || validatorList.size() == 0) {
+            update(null, null);
+            return;
+        }
+
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getDelegations(address).enqueue(new Callback<ArrayList<StakingInfo>>() {
+            @Override
+            public void onResponse(Call<ArrayList<StakingInfo>> call, Response<ArrayList<StakingInfo>> response) {
+
+                if (response.code() == 200) {
+                    ArrayList<StakingInfo> data = response.body();
+                    update(data, null);
+                } else if (response.code() == 400) {
+                    update(null, null);
+                } else {
+                    update(null, null);
+                    try {
+                        if (response.errorBody() != null && !response.errorBody().string().contains("no delegation for this"))
+                            Toast.makeText(ValidatorListActivity.this, LocaleController.getString("internalServerError", R.string.internalServerError) + "\n" + response.errorBody().string(), Toast.LENGTH_LONG).show();
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                        Toast.makeText(ValidatorListActivity.this, LocaleController.getString("unknownError", R.string.unknownError), Toast.LENGTH_LONG).show();
+                    }
+
+                }
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<StakingInfo>> call, Throwable t) {
+                update(null, null);
+                if (!NetworkUtil.isNetworkAvailable(ValidatorListActivity.this))
+                    Toast.makeText(ValidatorListActivity.this, LocaleController.getString("unknownError", R.string.unknownError), Toast.LENGTH_LONG).show();
+            }
+        });
+    }
+
+    private void getUnbondingInfo() {
+        if (validatorList == null || validatorList.size() == 0) {
+            update(null, null);
+            return;
+        }
+
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getUnbondingDelegations(address).enqueue(new Callback<ArrayList<Unbonding>>() {
+            @Override
+            public void onResponse(Call<ArrayList<Unbonding>> call, Response<ArrayList<Unbonding>> response) {
+
+                if (response.code() == 200) {
+                    ArrayList<Unbonding> data = response.body();
+                    update(null, data);
+                } else if (response.code() == 400) {
+                    update(null, null);
+                } else {
+                    update(null, null);
+                    try {
+                        if (response.errorBody() != null && !response.errorBody().string().contains("no delegation for this"))
+                            Toast.makeText(ValidatorListActivity.this, LocaleController.getString("internalServerError", R.string.internalServerError) + "\n" + response.errorBody().string(), Toast.LENGTH_LONG).show();
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                        Toast.makeText(ValidatorListActivity.this, LocaleController.getString("unknownError", R.string.unknownError), Toast.LENGTH_LONG).show();
+                    }
+                }
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<Unbonding>> call, Throwable t) {
+                if (NetworkUtil.isNetworkAvailable(ValidatorListActivity.this)) {
+                    showNodeConnectionErrorAlert();
+                } else {
+                    Toast.makeText(ValidatorListActivity.this, LocaleController.getString("networkError", R.string.networkError), Toast.LENGTH_LONG).show();
+                }
+            }
+        });
+    }
+
+    private void update(ArrayList<StakingInfo> stakingInfos, ArrayList<Unbonding> unbondingInfos) {
+
+        setValidatorRank();
+        double totalPower = getTotalPower();
+
+        if (type != ValidatorListActivity.TYPE_VIEW_UNSTAKING_VALIDATORS) {
+            updateValidatorListWithStakingInfos(stakingInfos);
+        } else {
+            updateValidatorListWithUnbondingInfos(unbondingInfos);
+        }
+
+        if (type == ValidatorListActivity.TYPE_UNSTAKE || type == ValidatorListActivity.TYPE_REDELEGATE || type == ValidatorListActivity.TYPE_VIEW_MY_VALIDATORS || type == ValidatorListActivity.TYPE_SELECT_VALIDATOR_FROM_MY || type == ValidatorListActivity.TYPE_VIEW_UNSTAKING_VALIDATORS)
+            updateMyValidators();
+
+        int validatorCnt = 0;
+        if (validatorList != null) validatorCnt = validatorList.size();
+
+        if (totalValidatorTextview != null)
+            totalValidatorTextview.setText(String.valueOf(validatorCnt));
+
+        if (validatorListAdapter != null) {
+            validatorListAdapter.update(validatorList, totalPower);
+            validatorListAdapter.notifyDataSetChanged();
+        }
+
+        loadingLayout.setVisibility(View.GONE);
+        contentsLayout.setVisibility(View.VISIBLE);
+
+    }
+
+    private void updateValidatorListWithStakingInfos(ArrayList<StakingInfo> stakingInfos) {
+        if (stakingInfos != null) {
+            for (int i = 0; stakingInfos.size() > i; i++) {
+                StakingInfo stakingInfo = stakingInfos.get(i);
+
+                for (int j = 0; validatorList.size() > j; j++) {
+                    Validator validator = validatorList.get(j);
+                    if (validator.getOperatorAddress().equals(stakingInfo.getValidatorAddr())) {
+                        validatorList.get(j).setDelegatedAmount(validatorList.get(j).getDelegatedAmount() + stakingInfo.getShares());
+                    }
+                }
+            }
+        }
+    }
+
+    private void updateValidatorListWithUnbondingInfos(ArrayList<Unbonding> unbondingInfos) {
+        if (unbondingInfos != null) {
+            for (Unbonding unbonding : unbondingInfos) {
+                for (int j = 0; validatorList.size() > j; j++) {
+                    Validator validator = validatorList.get(j);
+                    if (validator.getOperatorAddress().equals(unbonding.getValidatorAddr())) {
+                        BigDecimal delegatedAmount = new BigDecimal(validatorList.get(j).getDelegatedAmount());
+                        String unstakingCompletionTime = null;
+                        for (UnbondingEntries entries : unbonding.getEntries()) {
+                            delegatedAmount = delegatedAmount.add(entries.getBalance());
+                            unstakingCompletionTime = entries.getCompletionTime();
+                        }
+                        validatorList.get(j).setDelegatedAmount(delegatedAmount.doubleValue());
+                        validatorList.get(j).setUnstakingCompletionTime(unstakingCompletionTime);
+                    }
+                }
+            }
+        }
+    }
+
+    private void updateMyValidators() {
+        if (validatorList == null || validatorList.size() == 0) return;
+        for (int i = validatorList.size() - 1; 0 <= i; i--) {
+            if (validatorList.get(i).getDelegatedAmount() <= 0) {
+                validatorList.remove(i);
+            }
+        }
+    }
+
+    private void setValidatorRank() {
+        if (validatorList == null) return;
+
+        for (int i = 0; validatorList.size() > i; i++) {
+            validatorList.get(i).setRank((i + 1));
+        }
+    }
+
+    private double getTotalPower(){
+        try {
+            double totalPower = 0;
+            for (Validator validator : validatorList) {
+                totalPower = totalPower + validator.getDelegatorShares();
+            }
+            return totalPower;
+        } catch (Exception e) {
+            return 0;
+        }
+    }
+
+    private String getActionbarTitle() {
+        String title;
+        switch (type) {
+            case ValidatorListActivity.TYPE_VIEW_VALIDATORS:
+                title = LocaleController.getString("validators", R.string.validators);
+                break;
+            case ValidatorListActivity.TYPE_VIEW_MY_VALIDATORS:
+                title = LocaleController.getString("myValidators", R.string.myValidators);
+                break;
+            case ValidatorListActivity.TYPE_VIEW_UNSTAKING_VALIDATORS:
+                title = LocaleController.getString("unstaking", R.string.unstaking) + " " + LocaleController.getString("validators", R.string.validators);
+                break;
+            default:
+                title = LocaleController.getString("selectValidator", R.string.selectValidator);
+        }
+        return title;
+    }
+
+    private void finishWithResult(Validator validator) {
+        if (type == ValidatorListActivity.TYPE_SELECT_VALIDATOR_FROM_ALL && validator.getJailed()) {
+            Toast.makeText(ValidatorListActivity.this, LocaleController.getString("jailedValidatorError", R.string.jailedValidatorError), Toast.LENGTH_LONG).show();
+            return;
+        }
+        Intent resultIntent = new Intent();
+        resultIntent.putExtra("validatorName", validator.getDescription().getMoniker());
+        resultIntent.putExtra("validatorAddress", validator.getOperatorAddress());
+        setResult(RESULT_OK, resultIntent);
+        finish();
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/VoteActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/VoteActivity.java
new file mode 100644
index 000000000..334887e3e
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/VoteActivity.java
@@ -0,0 +1,612 @@
+package com.lunamint.lunagram.ui;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ScrollView;
+import android.widget.Toast;
+
+import com.google.gson.JsonObject;
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.secure.SecureKeyStore;
+import com.lunamint.lunagram.ui.component.DefaultButton;
+import com.lunamint.lunagram.ui.component.LunagramBaseActivity;
+import com.lunamint.lunagram.ui.view.DefaultFormView;
+import com.lunamint.lunagram.ui.view.FeeFormView;
+import com.lunamint.lunagram.ui.view.TxConfirmView;
+import com.lunamint.lunagram.ui.view.TxProgressView;
+import com.lunamint.lunagram.ui.view.VoteFormView;
+import com.lunamint.wallet.ApiUtils;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.LcdService;
+import com.lunamint.wallet.WalletManager;
+import com.lunamint.wallet.model.AccountStatus;
+import com.lunamint.wallet.model.BlockInfo;
+import com.lunamint.wallet.model.CmdResult;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.model.SendResult;
+import com.lunamint.wallet.model.tx.DefaultHistory;
+import com.lunamint.wallet.utils.AnimUtil;
+import com.lunamint.wallet.utils.CmdResultChecker;
+import com.lunamint.wallet.utils.FileUtil;
+import com.lunamint.wallet.utils.NetworkUtil;
+import com.lunamint.wallet.utils.NumberFormatter;
+import com.lunamint.wallet.utils.Parser;
+import com.lunamint.wallet.utils.TimeUtil;
+import com.lunamint.wallet.utils.TokenUtil;
+import com.lunamint.wallet.utils.VarifyUtil;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.math.BigDecimal;
+import java.util.ArrayList;
+
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
+public class VoteActivity extends LunagramBaseActivity {
+
+    private final int GET_TRANSACTION_RESULT_MAX_TRY_COUNT = 7;
+    private final int GET_TRANSACTION_RESULT_DELAY = 3000;
+
+    private int step = 0;
+    private boolean isSending = false;
+    private long currentTimeMillis = 0;
+    private boolean needToGoNext = false;
+
+    private ArrayList<Coin> coins;
+
+    private JsonObject tx;
+
+    private String accountName = "";
+    private String address = "";
+    private String proposalId = "";
+    private AccountStatus accountStatus;
+
+    private String hash = "";
+    private int requestBlockHeight = -1;
+
+    private ScrollView scrollView;
+    private FrameLayout contentsLayout;
+    private VoteFormView voteFormView;
+    private FeeFormView feeFormView;
+    private DefaultFormView passwordFormView;
+    private TxConfirmView txConfirmView;
+    private TxProgressView txProgressView;
+
+    private DefaultButton nextButton;
+
+    private View currentView;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null)
+            getSupportActionBar().setTitle(LocaleController.getString("vote", R.string.vote));
+
+        accountName = getIntent().getStringExtra("accountName");
+        address = getIntent().getStringExtra("address");
+        proposalId = getIntent().getStringExtra("proposalId");
+
+        LinearLayout mainLayout = new LinearLayout(this);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+
+        scrollView = new ScrollView(this);
+        mainLayout.addView(scrollView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 0, 1.0f));
+
+        contentsLayout = new FrameLayout(this);
+        scrollView.addView(contentsLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        nextButton = new DefaultButton(this, 4, true, LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue, onClickNextListener);
+        mainLayout.addView(nextButton, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 20, 6, 20, 20));
+
+        setContentView(mainLayout);
+
+        showVoteFormView(false);
+
+        getBalance();
+    }
+
+    @Override
+    protected void onPause() {
+        clearPasswordForm();
+        super.onPause();
+        if (step == 3) {
+            step = 2;
+            showPasswordFormView(true);
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        if (currentTimeMillis > 0) FileUtil.deleteTx(VoteActivity.this, currentTimeMillis);
+        super.onDestroy();
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if (item.getItemId() == android.R.id.home) {
+            moveToBack();
+        }
+        return false;
+    }
+
+    @Override
+    public void onBackPressed() {
+        moveToBack();
+    }
+
+    @Override
+    protected void onCheckFingerprintDone() {
+        super.onCheckFingerprintDone();
+        if (passwordFormView == null) return;
+
+        SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        String pwd = SecureKeyStore.getInstance().decrypt(getApplicationContext(), pref.getString("W-" + accountName.replaceAll(" ", ""), ""));
+        passwordFormView.setValue(pwd);
+        passwordFormView.clearFocus();
+
+        if (pwd.length() > 0) varifyPassword(pwd);
+    }
+
+    @Override
+    protected void handleMessage(Message msg) {
+        super.handleMessage(msg);
+        CmdResult cmdResult = ((CmdResult) msg.getData().getSerializable("result"));
+        switch (msg.what) {
+            case WalletManager.MAKE_TX_VOTE:
+                onTransactionCreatedResult(cmdResult);
+                break;
+            case WalletManager.TX_SIGN:
+                onTransactionSignedResult(cmdResult);
+                break;
+        }
+    }
+
+    private void getBalance() {
+        if (!VarifyUtil.isValidCosmosAddress(address)) return;
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getBalances(address).enqueue(new Callback<ArrayList<Coin>>() {
+            @Override
+            public void onResponse(Call<ArrayList<Coin>> call, Response<ArrayList<Coin>> response) {
+                if (response.code() == 200) {
+                    coins = response.body();
+                    if (needToGoNext) {
+                        needToGoNext = false;
+                        hideProgress();
+                        if (feeFormView != null) varifyFee(feeFormView.getValueOrigin());
+                    }
+                    if (response.body() != null)
+                        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.balanceChanged, response);
+                } else {
+                    showNodeConnectionErrorAlert();
+                }
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<Coin>> call, Throwable t) {
+                if (NetworkUtil.isNetworkAvailable(VoteActivity.this)) {
+                    showNodeConnectionErrorAlert();
+                } else {
+                    Toast.makeText(VoteActivity.this, LocaleController.getString("networkError", R.string.networkError), Toast.LENGTH_LONG).show();
+                    finish();
+                }
+            }
+        });
+    }
+
+    private void getAccountStatus() {
+        isSending = true;
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getAccountStatus(address).enqueue(new Callback<AccountStatus>() {
+            @Override
+            public void onResponse(Call<AccountStatus> call, Response<AccountStatus> response) {
+                if (response.code() == 200) {
+                    accountStatus = response.body();
+                    makeTransactionVote();
+                } else {
+                    step = 2;
+                    showPasswordFormView(true);
+                    if (passwordFormView != null)
+                        passwordFormView.showError(LocaleController.getString("failedLoadAccountError", R.string.failedLoadAccountError));
+                    isSending = false;
+                }
+            }
+
+            @Override
+            public void onFailure(Call<AccountStatus> call, Throwable t) {
+                isSending = false;
+                if (NetworkUtil.isNetworkAvailable(VoteActivity.this)) {
+                    showNodeConnectionErrorAlert();
+                } else {
+                    step = 2;
+                    showPasswordFormView(true);
+                    if (passwordFormView != null)
+                        passwordFormView.showError(LocaleController.getString("failedLoadAccountError", R.string.failedLoadAccountError));
+                }
+                isSending = false;
+            }
+        });
+    }
+
+    private void signTransaction() {
+        if (passwordFormView == null || accountStatus == null) return;
+
+        String txPath = getFilesDir() + "/" + FileUtil.getTxFileName(currentTimeMillis);
+
+        WalletManager.getInstance().sign(new ResultHandler(this), accountName, passwordFormView.getValue(), txPath, accountStatus);
+    }
+
+    private void send() {
+        if (tx != null) {
+            LcdService lcdService = ApiUtils.getLcdService();
+            lcdService.sendTransaction(tx).enqueue(new Callback<SendResult>() {
+                @Override
+                public void onResponse(Call<SendResult> call, Response<SendResult> response) {
+                    if (response.code() == 200 && response.body() != null) {
+                        hash = response.body().getHash();
+                        getLatestBlock();
+
+                    } else {
+                        String err;
+                        try {
+                            String errorBody = "";
+                            if (response.errorBody() != null)
+                                errorBody = response.errorBody().string();
+                            err = LocaleController.getString("failedVote", R.string.failedVote) + "\nCode = " + String.valueOf(response.code()) + "\n" + errorBody;
+                        } catch (Exception e) {
+                            err = LocaleController.getString("unsupportTx", R.string.unsupportTx);
+                        }
+                        if (txProgressView != null) txProgressView.showError(err);
+                        onSendFinished();
+                    }
+
+                }
+
+                @Override
+                public void onFailure(Call<SendResult> call, Throwable t) {
+                    if (txProgressView == null) return;
+                    if (NetworkUtil.isNetworkAvailable(VoteActivity.this)) {
+                        showNodeConnectionErrorAlert();
+                    } else {
+                        txProgressView.showError(LocaleController.getString("networkError", R.string.networkError));
+                    }
+                    onSendFinished();
+                }
+            });
+        } else {
+            if (txProgressView != null)
+                txProgressView.showError(LocaleController.getString("nullPointerTx", R.string.nullPointerTx));
+            onSendFinished();
+        }
+    }
+
+    private void getLatestBlock() {
+        new Handler().postDelayed(new Runnable() {
+            public void run() {
+                LcdService lcdService = ApiUtils.getLcdService();
+                lcdService.getLatestBlock().enqueue(new Callback<BlockInfo>() {
+                    @Override
+                    public void onResponse(Call<BlockInfo> call, Response<BlockInfo> response) {
+                        if (response.code() == 200 && response.body() != null && response.body().getBlock() != null && response.body().getBlock().getHeader() != null) {
+                            if (requestBlockHeight < 0)
+                                requestBlockHeight = response.body().getBlock().getHeader().getHeight();
+
+                            if (requestBlockHeight + GET_TRANSACTION_RESULT_MAX_TRY_COUNT <= response.body().getBlock().getHeader().getHeight()) {
+                                txProgressView.showError(LocaleController.getString("failedVote", R.string.failedVote) + "\n\nRequest block height : " + requestBlockHeight + "\nLast checked block height : " + response.body().getBlock().getHeader().getHeight());
+                                onSendFinished();
+                            } else {
+                                getTransactionResult();
+                            }
+
+                        } else {
+                            txProgressView.showError(LocaleController.getString("failedVote", R.string.failedVote));
+                            onSendFinished();
+                        }
+                    }
+
+                    @Override
+                    public void onFailure(Call<BlockInfo> call, Throwable t) {
+                        if (txProgressView == null) return;
+                        if (NetworkUtil.isNetworkAvailable(VoteActivity.this)) {
+                            txProgressView.showError(LocaleController.getString("failedVote", R.string.failedVote));
+                        } else {
+                            txProgressView.showError(LocaleController.getString("networkError", R.string.networkError));
+                        }
+                        onSendFinished();
+                    }
+                });
+            }
+        }, GET_TRANSACTION_RESULT_DELAY);
+    }
+
+    private void getTransactionResult() {
+        if (hash == null || hash.equals("")) {
+            txProgressView.showError(LocaleController.getString("failedStake", R.string.failedStake));
+            return;
+        }
+
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getTransactionDetail(hash).enqueue(new Callback<DefaultHistory>() {
+            @Override
+            public void onResponse(Call<DefaultHistory> call, Response<DefaultHistory> response) {
+                if (response.errorBody() != null) {
+                    try {
+                        if (response.errorBody().string().contains("not found")) {
+                            getLatestBlock();
+                        } else {
+                            txProgressView.showError(LocaleController.getString("failedVote", R.string.failedVote));
+                            onSendFinished();
+                        }
+                    } catch (Exception e) {
+                        txProgressView.showError(LocaleController.getString("failedVote", R.string.failedVote));
+                        onSendFinished();
+                    }
+                } else {
+                    if (response.code() == 200 && response.body() != null) {
+                        updateTxProgress(response.body().getResult(), response.body().getHash());
+                        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.transactionCreated, response.body().getHash());
+                        FileUtil.deleteTx(VoteActivity.this, currentTimeMillis);
+                    } else {
+                        txProgressView.showError(LocaleController.getString("failedVote", R.string.failedVote));
+                    }
+                    onSendFinished();
+                }
+            }
+
+            @Override
+            public void onFailure(Call<DefaultHistory> call, Throwable t) {
+                if (txProgressView == null) return;
+                if (NetworkUtil.isNetworkAvailable(VoteActivity.this)) {
+                    txProgressView.showError(LocaleController.getString("failedVote", R.string.failedVote));
+                } else {
+                    txProgressView.showError(LocaleController.getString("networkError", R.string.networkError));
+                }
+                onSendFinished();
+            }
+        });
+    }
+
+    private void makeTransactionVote() {
+        if (tx != null && currentTimeMillis > 0)
+            FileUtil.deleteTx(VoteActivity.this, currentTimeMillis);
+        if (passwordFormView == null) return;
+
+        WalletManager.getInstance().makeTxVote(new ResultHandler(this), address, passwordFormView.getValue(), proposalId, voteFormView.getValue(), feeFormView.getValue());
+    }
+
+    private void onTransactionCreatedResult(CmdResult cmdResult) {
+        String errMsg = CmdResultChecker.checkCmdResult(cmdResult);
+        if (errMsg == null) {
+            setCurrentTimeMillis();
+            if (FileUtil.writeTx(VoteActivity.this, currentTimeMillis, cmdResult.getData())) {
+                signTransaction();
+            } else {
+                step = 2;
+                showPasswordFormView(true);
+                if (passwordFormView != null)
+                    passwordFormView.showError(LocaleController.getString("failedCreateTx", R.string.failedCreateTx));
+                isSending = false;
+            }
+        } else {
+            step = 2;
+            showPasswordFormView(true);
+            if (passwordFormView != null) passwordFormView.showError(errMsg);
+            isSending = false;
+        }
+    }
+
+    private void onTransactionSignedResult(CmdResult cmdResult) {
+        String err = CmdResultChecker.checkCmdResult(cmdResult);
+
+        if (err == null) {
+            tx = Parser.getRawTransaction(cmdResult.getData());
+            if (tx != null) {
+                send();
+                clearPasswordForm();
+                return;
+            } else {
+                err = LocaleController.getString("unsupportTx", R.string.unsupportTx);
+            }
+        }
+        step = 2;
+        showPasswordFormView(false);
+        if (passwordFormView != null) passwordFormView.showError(err);
+        isSending = false;
+    }
+
+    private void clearPasswordForm() {
+        if (passwordFormView == null) return;
+        passwordFormView.clear();
+    }
+
+    private void varifyFee(String fee) {
+        if (feeFormView == null) return;
+        if (coins == null) {
+            needToGoNext = true;
+            showProgress();
+            return;
+        }
+        if (fee.length() != 0) {
+            try {
+                BigDecimal bamount = new BigDecimal(fee);
+                if (bamount.compareTo(new BigDecimal("0.0005")) < 0) {
+                    feeFormView.showError(LocaleController.getString("feeNotEnoughError", R.string.feeNotEnoughError));
+                } else if (bamount.compareTo(BigDecimal.ONE) == 1) {
+                    feeFormView.showError(LocaleController.getString("feeInvalidError", R.string.feeInvalidError));
+                } else {
+                    if (bamount.compareTo(new BigDecimal(TokenUtil.getCoin(coins, Blockchain.getInstance().getReserveDenom()).getAmount())) < 1) {
+                        scrollView.smoothScrollTo(0, 0);
+                        hideKeyboard();
+                        step = 2;
+                        showPasswordFormView(false);
+                        if (hasPassword() && isEnabledFingerprint(accountName)) checkFingerprint();
+                    } else {
+                        feeFormView.showError(LocaleController.getString("notEnoughBalance", R.string.notEnoughBalance));
+                    }
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+                feeFormView.showError(LocaleController.getString("amountInvalidError", R.string.amountInvalidError));
+            }
+        } else {
+            feeFormView.showError(LocaleController.getString("amountEmptyError", R.string.amountEmptyError));
+        }
+    }
+
+    private void varifyPassword(String pwd) {
+        if (passwordFormView == null) return;
+        if (pwd == null || pwd.length() < 8) {
+            passwordFormView.showError(LocaleController.getString("pwdInvalidError", R.string.pwdInvalidError));
+        } else {
+            step = 3;
+            showTxConfirmView();
+            if (txConfirmView != null)
+                txConfirmView.update(TxProgressView.TYPE_VOTE, null, null, proposalId, null, voteFormView.getValue(), NumberFormatter.getNumber(feeFormView.getValueOrigin()), "", address);
+        }
+    }
+
+    private void showVoteFormView(boolean isMoveToBack) {
+        hideKeyboard();
+        if (feeFormView == null) {
+            voteFormView = new VoteFormView(this);
+            contentsLayout.addView(voteFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(voteFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, voteFormView, false);
+        }
+
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        currentView = voteFormView;
+    }
+
+    private void showFeeFormView(boolean isMoveToBack) {
+        hideKeyboard();
+        if (feeFormView == null) {
+            feeFormView = new FeeFormView(this);
+            contentsLayout.addView(feeFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(feeFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, feeFormView, false);
+        }
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        currentView = feeFormView;
+    }
+
+    private void showPasswordFormView(boolean isMoveToBack) {
+        if (passwordFormView == null) {
+            passwordFormView = new DefaultFormView(this, true, true, false, LocaleController.getString("password", R.string.password), LocaleController.getString("differentWalletsDifferentPasswords", R.string.differentWalletsDifferentPasswords), null, null);
+            contentsLayout.addView(passwordFormView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        }
+        if (isMoveToBack) {
+            AnimUtil.changePrevView(passwordFormView, currentView, false);
+        } else {
+            AnimUtil.changeView(currentView, passwordFormView, false);
+        }
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        if (!isEnabledFingerprint(accountName)) passwordFormView.setFocus();
+        currentView = passwordFormView;
+    }
+
+    private void showTxConfirmView() {
+        hideKeyboard();
+        if (txConfirmView != null) contentsLayout.removeView(txConfirmView);
+
+        txConfirmView = new TxConfirmView(this, LocaleController.getString("confirmVote", R.string.confirmVote));
+        contentsLayout.addView(txConfirmView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        AnimUtil.changeView(currentView, txConfirmView, false);
+        nextButton.update(LocaleController.getString("next", R.string.next), R.drawable.btn_radius4_blue);
+        currentView = txConfirmView;
+    }
+
+    private void showTxProgressView() {
+        hideKeyboard();
+        txProgressView = new TxProgressView(this);
+        contentsLayout.addView(txProgressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        AnimUtil.changeView(currentView, txProgressView, false);
+        nextButton.update(LocaleController.getString("done", R.string.done), R.drawable.btn_grey);
+        currentView = txProgressView;
+    }
+
+    private void updateTxProgress(boolean result, String txHash) {
+        if (txProgressView == null) return;
+        txProgressView.update(TxProgressView.TYPE_VOTE, result, txHash, null, proposalId, null, voteFormView.getValue(), NumberFormatter.getNumber(feeFormView.getValueOrigin()), "", address);
+    }
+
+    private void onSendFinished() {
+        isSending = false;
+        nextButton.update(LocaleController.getString("done", R.string.done), R.drawable.btn_radius4_blue);
+    }
+
+    private boolean hasPassword() {
+        SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        String pwd = pref.getString("W-" + accountName.replaceAll(" ", ""), "");
+        return !pwd.equals("");
+    }
+
+    private void setCurrentTimeMillis() {
+        currentTimeMillis = TimeUtil.getCurrentTimeMillis();
+    }
+
+    private void moveToBack() {
+        switch (step) {
+            case 0:
+                finish();
+                break;
+            case 1:
+                step = 0;
+                showVoteFormView(true);
+                break;
+            case 2:
+                step = 1;
+                showFeeFormView(true);
+                break;
+            case 3:
+                step = 2;
+                showPasswordFormView(true);
+                break;
+        }
+    }
+
+    private View.OnClickListener onClickNextListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            switch (step) {
+                case 0:
+                    step = 1;
+                    showFeeFormView(false);
+                    break;
+                case 1:
+                    if (feeFormView != null) varifyFee(feeFormView.getValueOrigin());
+                    break;
+                case 2:
+                    if (passwordFormView != null) varifyPassword(passwordFormView.getValue());
+                    break;
+                case 3:
+                    step = 4;
+                    showTxProgressView();
+                    getAccountStatus();
+                    break;
+                case 4:
+                    if (!isSending) finish();
+                    break;
+            }
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/AccountListAdapter.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/AccountListAdapter.java
new file mode 100644
index 000000000..7f145eb15
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/AccountListAdapter.java
@@ -0,0 +1,59 @@
+package com.lunamint.lunagram.ui.adapter;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ArrayAdapter;
+
+import com.lunamint.lunagram.ui.cell.AccountListCell;
+import com.lunamint.wallet.model.AccountInfo;
+
+import java.util.ArrayList;
+
+public class AccountListAdapter extends ArrayAdapter {
+
+    private Context mContext;
+    private ArrayList<AccountInfo> dataList;
+
+    public AccountListAdapter(@NonNull Context context, int resource, ArrayList<AccountInfo> accountList) {
+        super(context, resource);
+
+        this.mContext = context;
+        this.dataList = accountList;
+    }
+
+    static class ViewHolder {
+        AccountListCell listCell;
+        int position;
+    }
+
+    @Override
+    public int getCount(){
+        return dataList == null ? 0 : dataList.size();
+    }
+
+    @Override
+    public View getView(final int position, View convertView, ViewGroup parent) {
+
+        final ViewHolder viewHolder;
+
+        if (convertView == null) {
+            convertView = new AccountListCell(mContext);
+            viewHolder = new ViewHolder();
+            viewHolder.listCell = (AccountListCell) convertView;
+            viewHolder.position = position;
+            convertView.setTag(viewHolder);
+        } else {
+            viewHolder = (ViewHolder) convertView.getTag();
+        }
+
+        viewHolder.listCell.update(dataList.get(position));
+        viewHolder.position = position;
+        return convertView;
+    }
+
+    public void update(ArrayList<AccountInfo> accountList){
+        this.dataList = accountList;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/adapter/MainTabWalletAdapter.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/DefaultSelectListAdapter.java
similarity index 60%
rename from TMessagesProj/src/main/java/com/telemint/ui/adapter/MainTabWalletAdapter.java
rename to TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/DefaultSelectListAdapter.java
index 8badf0afe..0571d9a5a 100644
--- a/TMessagesProj/src/main/java/com/telemint/ui/adapter/MainTabWalletAdapter.java
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/DefaultSelectListAdapter.java
@@ -1,4 +1,4 @@
-package com.telemint.ui.adapter;
+package com.lunamint.lunagram.ui.adapter;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
@@ -6,17 +6,16 @@
 import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
 
-import com.telemint.ui.cell.DefaultInfoCell;
-import com.telemint.ui.model.WalletTabMenu;
+import com.lunamint.lunagram.ui.cell.DefaultSelectListCell;
 
 import java.util.ArrayList;
 
-public class MainTabWalletAdapter extends ArrayAdapter {
+public class DefaultSelectListAdapter extends ArrayAdapter {
 
     private Context mContext;
-    private ArrayList<WalletTabMenu> dataList;
+    private ArrayList<String> dataList;
 
-    public MainTabWalletAdapter(@NonNull Context context, int resource, ArrayList<WalletTabMenu> dataList) {
+    public DefaultSelectListAdapter(@NonNull Context context, int resource, ArrayList<String> dataList) {
         super(context, resource);
 
         this.mContext = context;
@@ -24,12 +23,12 @@ public MainTabWalletAdapter(@NonNull Context context, int resource, ArrayList<Wa
     }
 
     static class ViewHolder {
-        DefaultInfoCell listCell;
+        DefaultSelectListCell listCell;
         int position;
     }
 
     @Override
-    public int getCount(){
+    public int getCount() {
         return dataList == null ? 0 : dataList.size();
     }
 
@@ -39,18 +38,16 @@ public View getView(final int position, View convertView, ViewGroup parent) {
         final ViewHolder viewHolder;
 
         if (convertView == null) {
-            convertView = new DefaultInfoCell(mContext);
+            convertView = new DefaultSelectListCell(mContext);
             viewHolder = new ViewHolder();
-            viewHolder.listCell = (DefaultInfoCell) convertView;
+            viewHolder.listCell = (DefaultSelectListCell) convertView;
             viewHolder.position = position;
             convertView.setTag(viewHolder);
         } else {
             viewHolder = (ViewHolder) convertView.getTag();
         }
 
-        viewHolder.listCell.update(dataList.get(position).getTitle(), dataList.get(position).getVar());
-
-
+        viewHolder.listCell.update(dataList.get(position));
         viewHolder.position = position;
         return convertView;
     }
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/GovernanceListAdapter.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/GovernanceListAdapter.java
new file mode 100644
index 000000000..fc3fd9655
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/GovernanceListAdapter.java
@@ -0,0 +1,59 @@
+package com.lunamint.lunagram.ui.adapter;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ArrayAdapter;
+
+import com.lunamint.lunagram.ui.cell.GovernanceListCell;
+import com.lunamint.wallet.model.Proposal;
+
+import java.util.ArrayList;
+
+public class GovernanceListAdapter extends ArrayAdapter {
+
+    private Context mContext;
+    private ArrayList<Proposal> dataList;
+
+    public GovernanceListAdapter(@NonNull Context context, int resource, ArrayList<Proposal> dataList) {
+        super(context, resource);
+
+        this.mContext = context;
+        this.dataList = dataList;
+    }
+
+    static class ViewHolder {
+        GovernanceListCell listCell;
+        int position;
+    }
+
+    @Override
+    public int getCount() {
+        return dataList == null ? 0 : dataList.size();
+    }
+
+    @Override
+    public View getView(final int position, View convertView, ViewGroup parent) {
+
+        final ViewHolder viewHolder;
+
+        if (convertView == null) {
+            convertView = new GovernanceListCell(mContext);
+            viewHolder = new ViewHolder();
+            viewHolder.listCell = (GovernanceListCell) convertView;
+            viewHolder.position = position;
+            convertView.setTag(viewHolder);
+        } else {
+            viewHolder = (ViewHolder) convertView.getTag();
+        }
+
+        viewHolder.listCell.update(dataList.get(position));
+        viewHolder.position = position;
+        return convertView;
+    }
+
+    public void update(ArrayList<Proposal> dataList){
+        this.dataList = dataList;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/GovernancePagerAdapter.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/GovernancePagerAdapter.java
new file mode 100644
index 000000000..36deddef6
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/GovernancePagerAdapter.java
@@ -0,0 +1,30 @@
+package com.lunamint.lunagram.ui.adapter;
+
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentPagerAdapter;
+
+import com.lunamint.lunagram.ui.fragment.GovernanceListFragment;
+
+public class GovernancePagerAdapter extends FragmentPagerAdapter {
+
+    private String accountName;
+    private String address;
+
+    public GovernancePagerAdapter(FragmentManager fragmentManager, String accountName, String address) {
+        super(fragmentManager);
+        this.accountName = accountName;
+        this.address = address;
+    }
+
+    @Override
+    public int getCount() {
+        return 3;
+    }
+
+    @Override
+    public Fragment getItem(int position) {
+        return GovernanceListFragment.newInstance(position, accountName, address);
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/MainTabAdapter.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/MainTabAdapter.java
new file mode 100644
index 000000000..e5dde671c
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/MainTabAdapter.java
@@ -0,0 +1,86 @@
+package com.lunamint.lunagram.ui.adapter;
+
+import android.content.Context;
+import android.support.v4.view.PagerAdapter;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.lunamint.lunagram.ui.view.WalletView;
+import com.lunamint.wallet.model.Coin;
+
+import org.telegram.ui.Components.RecyclerListView;
+
+import java.util.ArrayList;
+
+import retrofit2.Response;
+
+public class MainTabAdapter extends PagerAdapter {
+
+    private Context mContext;
+    private RecyclerListView dialogsListview;
+    private WalletView walletView;
+
+    public MainTabAdapter(Context context, RecyclerListView listview, WalletView walletView){
+        mContext = context;
+        dialogsListview = listview;
+        this.walletView = walletView;
+    }
+
+    @Override
+    public int getCount() {
+        return 2;
+    }
+
+    @Override
+    public boolean isViewFromObject(View view, Object object) {
+        return view == object;
+    }
+
+    @Override
+    public void destroyItem(ViewGroup collection, int position, Object view) {
+        collection.removeView((View) view);
+    }
+
+    @Override
+    public Object instantiateItem(ViewGroup collection, int position) {
+        if(position == 0){
+            collection.addView(dialogsListview);
+            return dialogsListview;
+        }else{
+            collection.addView(walletView);
+            return walletView;
+        }
+    }
+
+    public void onResume(){
+        if(walletView != null) walletView.onResume();
+    }
+
+    public void onTransactionCreated(String tx){
+        if(walletView != null) walletView.onTransactionCreated(tx);
+    }
+
+    public void onAccountChanged(){
+        if(walletView != null) walletView.onAccountChanged();
+    }
+
+    public void onBalanceChanged(Response<ArrayList<Coin>> response){
+        if(walletView != null) walletView.updateBalance(response);
+    }
+
+    public void onStakingChanged(){
+        if(walletView != null) walletView.getStaking();
+    }
+
+    public void onNodeChanged(){
+        if(walletView != null) walletView.onAccountChanged();
+    }
+
+    public void showError(String msg){
+        if(walletView != null) walletView.showError(msg);
+    }
+
+    public void setMaintenance(boolean maintenance){
+        if(walletView != null) walletView.setMaintenance(maintenance);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/SelectNodeAdapter.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/SelectNodeAdapter.java
new file mode 100644
index 000000000..633b2a945
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/SelectNodeAdapter.java
@@ -0,0 +1,57 @@
+package com.lunamint.lunagram.ui.adapter;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ArrayAdapter;
+
+import com.lunamint.lunagram.ui.cell.NodeCell;
+import com.lunamint.wallet.model.BlockchainInfo;
+
+public class SelectNodeAdapter extends ArrayAdapter {
+
+    private Context mContext;
+    private BlockchainInfo blockchainInfo;
+
+    public SelectNodeAdapter(@NonNull Context context, int resource, BlockchainInfo blockchainInfo) {
+        super(context, resource);
+
+        this.mContext = context;
+        this.blockchainInfo = blockchainInfo;
+    }
+
+    static class ViewHolder {
+        NodeCell listCell;
+        int position;
+    }
+
+    @Override
+    public int getCount(){
+        return blockchainInfo == null || blockchainInfo.getList() == null ? 0 : blockchainInfo.getList().size();
+    }
+
+    @Override
+    public View getView(final int position, View convertView, ViewGroup parent) {
+
+        final ViewHolder viewHolder;
+
+        if (convertView == null) {
+            convertView = new NodeCell(mContext);
+            viewHolder = new ViewHolder();
+            viewHolder.listCell = (NodeCell) convertView;
+            viewHolder.position = position;
+            convertView.setTag(viewHolder);
+        } else {
+            viewHolder = (ViewHolder) convertView.getTag();
+        }
+
+        viewHolder.listCell.update(blockchainInfo.getList().get(position));
+        viewHolder.position = position;
+        return convertView;
+    }
+
+    public void update(BlockchainInfo blockchainInfo){
+        this.blockchainInfo = blockchainInfo;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/SettingsAdapter.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/SettingsAdapter.java
new file mode 100644
index 000000000..0b19be536
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/SettingsAdapter.java
@@ -0,0 +1,58 @@
+package com.lunamint.lunagram.ui.adapter;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ArrayAdapter;
+
+import com.lunamint.lunagram.ui.cell.SettingsCell;
+import com.lunamint.wallet.model.Setting;
+
+public class SettingsAdapter extends ArrayAdapter {
+
+    private Context mContext;
+    private boolean canUseFingerprint;
+    private Setting setting;
+
+    public SettingsAdapter(@NonNull Context context, int resource, boolean canUseFingerprint) {
+        super(context, resource);
+
+        this.mContext = context;
+        this.canUseFingerprint = canUseFingerprint;
+    }
+
+    static class ViewHolder {
+        SettingsCell listCell;
+        int position;
+    }
+
+    @Override
+    public int getCount(){
+        return canUseFingerprint ? 5 : 4;
+    }
+
+    @Override
+    public View getView(final int position, View convertView, ViewGroup parent) {
+
+        final ViewHolder viewHolder;
+
+        if (convertView == null) {
+            convertView = new SettingsCell(mContext, canUseFingerprint);
+            viewHolder = new ViewHolder();
+            viewHolder.listCell = (SettingsCell) convertView;
+            viewHolder.position = position;
+            convertView.setTag(viewHolder);
+        } else {
+            viewHolder = (ViewHolder) convertView.getTag();
+        }
+
+        viewHolder.listCell.update(position, setting);
+        viewHolder.position = position;
+        return convertView;
+    }
+
+    public void update(Setting setting){
+        this.setting = setting;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/adapter/MainTabStakeAdapter.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/TokenListAdapter.java
similarity index 62%
rename from TMessagesProj/src/main/java/com/telemint/ui/adapter/MainTabStakeAdapter.java
rename to TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/TokenListAdapter.java
index 7abf02604..21d70b4ca 100644
--- a/TMessagesProj/src/main/java/com/telemint/ui/adapter/MainTabStakeAdapter.java
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/TokenListAdapter.java
@@ -1,4 +1,4 @@
-package com.telemint.ui.adapter;
+package com.lunamint.lunagram.ui.adapter;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
@@ -6,17 +6,17 @@
 import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
 
-import com.telemint.ui.cell.DefaultInfoCell;
-import com.telemint.ui.model.StakeTabMenu;
+import com.lunamint.lunagram.ui.cell.TokenListCell;
+import com.lunamint.wallet.model.Coin;
 
 import java.util.ArrayList;
 
-public class MainTabStakeAdapter extends ArrayAdapter {
+public class TokenListAdapter extends ArrayAdapter {
 
     private Context mContext;
-    private ArrayList<StakeTabMenu> dataList;
+    private ArrayList<Coin> dataList;
 
-    public MainTabStakeAdapter(@NonNull Context context, int resource, ArrayList<StakeTabMenu> dataList) {
+    public TokenListAdapter(@NonNull Context context, int resource, ArrayList<Coin> dataList) {
         super(context, resource);
 
         this.mContext = context;
@@ -24,7 +24,7 @@ public MainTabStakeAdapter(@NonNull Context context, int resource, ArrayList<Sta
     }
 
     static class ViewHolder {
-        DefaultInfoCell listCell;
+        TokenListCell listCell;
         int position;
     }
 
@@ -39,18 +39,16 @@ public View getView(final int position, View convertView, ViewGroup parent) {
         final ViewHolder viewHolder;
 
         if (convertView == null) {
-            convertView = new DefaultInfoCell(mContext);
+            convertView = new TokenListCell(mContext);
             viewHolder = new ViewHolder();
-            viewHolder.listCell = (DefaultInfoCell) convertView;
+            viewHolder.listCell = (TokenListCell) convertView;
             viewHolder.position = position;
             convertView.setTag(viewHolder);
         } else {
             viewHolder = (ViewHolder) convertView.getTag();
         }
 
-        viewHolder.listCell.update(dataList.get(position).getTitle(), dataList.get(position).getVar());
-
-
+        viewHolder.listCell.update(dataList.get(position));
         viewHolder.position = position;
         return convertView;
     }
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/TransactionHistoryAdapter.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/TransactionHistoryAdapter.java
new file mode 100644
index 000000000..8ed3c2d0e
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/TransactionHistoryAdapter.java
@@ -0,0 +1,57 @@
+package com.lunamint.lunagram.ui.adapter;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ArrayAdapter;
+
+import com.lunamint.lunagram.ui.cell.TransactionHistoryCell;
+import com.lunamint.wallet.model.TransactionHistory;
+
+import java.util.ArrayList;
+
+public class TransactionHistoryAdapter extends ArrayAdapter {
+
+    private Context mContext;
+    private ArrayList<TransactionHistory> dataList;
+    private String address;
+
+    public TransactionHistoryAdapter(@NonNull Context context, int resource, String address, ArrayList<TransactionHistory> dataList) {
+        super(context, resource);
+
+        this.mContext = context;
+        this.address = address;
+        this.dataList = dataList;
+    }
+
+    static class ViewHolder {
+        TransactionHistoryCell listCell;
+        int position;
+    }
+
+    @Override
+    public int getCount(){
+        return dataList == null ? 0 : dataList.size();
+    }
+
+    @Override
+    public View getView(final int position, View convertView, ViewGroup parent) {
+
+        final ViewHolder viewHolder;
+
+        if (convertView == null) {
+            convertView = new TransactionHistoryCell(mContext);
+            viewHolder = new ViewHolder();
+            viewHolder.listCell = (TransactionHistoryCell) convertView;
+            viewHolder.position = position;
+            convertView.setTag(viewHolder);
+        } else {
+            viewHolder = (ViewHolder) convertView.getTag();
+        }
+
+        viewHolder.listCell.update(address, dataList.get(position));
+        viewHolder.position = position;
+        return convertView;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/TransactionHistoryPagerAdapter.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/TransactionHistoryPagerAdapter.java
new file mode 100644
index 000000000..49d01ecc0
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/TransactionHistoryPagerAdapter.java
@@ -0,0 +1,28 @@
+package com.lunamint.lunagram.ui.adapter;
+
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentPagerAdapter;
+
+import com.lunamint.lunagram.ui.fragment.TransactionHistoryFragment;
+
+public class TransactionHistoryPagerAdapter extends FragmentPagerAdapter {
+
+    private String address;
+
+    public TransactionHistoryPagerAdapter(FragmentManager fragmentManager, String address) {
+        super(fragmentManager);
+        this.address = address;
+    }
+
+    @Override
+    public int getCount(){
+        return 3;
+    }
+
+    @Override
+    public Fragment getItem(int position) {
+        return TransactionHistoryFragment.newInstance(position, address);
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/adapter/ValidatorListAdapter.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/ValidatorListAdapter.java
similarity index 57%
rename from TMessagesProj/src/main/java/com/telemint/ui/adapter/ValidatorListAdapter.java
rename to TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/ValidatorListAdapter.java
index 3986aa14d..b606ab8fe 100644
--- a/TMessagesProj/src/main/java/com/telemint/ui/adapter/ValidatorListAdapter.java
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/adapter/ValidatorListAdapter.java
@@ -1,4 +1,4 @@
-package com.telemint.ui.adapter;
+package com.lunamint.lunagram.ui.adapter;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
@@ -6,20 +6,19 @@
 import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
 
-import com.telemint.ui.cell.ValidatorListCell;
-import com.telemint.ui.model.ValidatorList;
+import com.lunamint.lunagram.ui.cell.ValidatorListCell;
+import com.lunamint.wallet.model.Validator;
 
 import java.util.ArrayList;
 
 public class ValidatorListAdapter extends ArrayAdapter {
 
-    private Context mContext;
-    private ArrayList<ValidatorList> dataList;
+    private ArrayList<Validator> dataList;
 
-    public ValidatorListAdapter(@NonNull Context context, int resource, ArrayList<ValidatorList> dataList) {
-        super(context, resource);
+    private double totalPower = 0.d;
 
-        this.mContext = context;
+    public ValidatorListAdapter(@NonNull Context context, int resource, ArrayList<Validator> dataList) {
+        super(context, resource);
         this.dataList = dataList;
     }
 
@@ -29,7 +28,7 @@ public ValidatorListAdapter(@NonNull Context context, int resource, ArrayList<Va
     }
 
     @Override
-    public int getCount(){
+    public int getCount() {
         return dataList == null ? 0 : dataList.size();
     }
 
@@ -39,7 +38,7 @@ public View getView(final int position, View convertView, ViewGroup parent) {
         final ViewHolder viewHolder;
 
         if (convertView == null) {
-            convertView = new ValidatorListCell(mContext);
+            convertView = new ValidatorListCell(getContext());
             viewHolder = new ViewHolder();
             viewHolder.listCell = (ValidatorListCell) convertView;
             viewHolder.position = position;
@@ -48,10 +47,23 @@ public View getView(final int position, View convertView, ViewGroup parent) {
             viewHolder = (ViewHolder) convertView.getTag();
         }
 
-        viewHolder.listCell.update(position, dataList.get(position).getName(), dataList.get(position).getFee(), dataList.get(position).getVotingPower());
-
+        viewHolder.listCell.update(dataList.get(position), totalPower);
 
         viewHolder.position = position;
         return convertView;
     }
+
+    public void update(ArrayList<Validator> dataList, double totalPower) {
+        this.dataList = dataList;
+        setTotalPower(totalPower);
+    }
+
+    private void setTotalPower(double totalPower) {
+        if (dataList == null || dataList.size() == 0) return;
+        this.totalPower = totalPower;
+    }
+
+    public double getTotalPower() {
+        return totalPower;
+    }
 }
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/AccountListCell.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/AccountListCell.java
new file mode 100644
index 000000000..805c0a313
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/AccountListCell.java
@@ -0,0 +1,54 @@
+package com.lunamint.lunagram.ui.cell;
+
+import android.content.Context;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.model.AccountInfo;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class AccountListCell extends LinearLayout {
+
+    private TextView nameTextview;
+    private TextView addressTextview;
+
+    public AccountListCell(Context context) {
+        super(context);
+
+        setOrientation(LinearLayout.HORIZONTAL);
+        setGravity(Gravity.CENTER_VERTICAL);
+
+        setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(20), AndroidUtilities.dp(20), AndroidUtilities.dp(20));
+
+        LinearLayout textLayout = new LinearLayout(context);
+        textLayout.setOrientation(LinearLayout.VERTICAL);
+        textLayout.setGravity(Gravity.CENTER_VERTICAL);
+        addView(textLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f, 0, 0, 10, 0));
+
+        nameTextview = new TextView(context);
+        nameTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        nameTextview.setTextSize(0, AndroidUtilities.dp(16));
+        textLayout.addView(nameTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        addressTextview = new TextView(context);
+        addressTextview.setTextSize(0, AndroidUtilities.dp(10));
+        addressTextview.setTextColor(ActivityCompat.getColor(context, R.color.manatee));
+        textLayout.addView(addressTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        ImageView arrowImgview = new ImageView(getContext());
+        arrowImgview.setImageResource(R.drawable.ic_arrow_default);
+        arrowImgview.setAlpha(0.6f);
+        addView(arrowImgview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+    }
+
+    public void update(AccountInfo data) {
+        nameTextview.setText(data.getName());
+        addressTextview.setText(data.getAddress());
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/DefaultSelectListCell.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/DefaultSelectListCell.java
new file mode 100644
index 000000000..cdb16d630
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/DefaultSelectListCell.java
@@ -0,0 +1,37 @@
+package com.lunamint.lunagram.ui.cell;
+
+import android.content.Context;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class DefaultSelectListCell extends LinearLayout {
+
+    private TextView nameTextview;
+
+    public DefaultSelectListCell(Context context) {
+        super(context);
+
+        setOrientation(LinearLayout.HORIZONTAL);
+        setGravity(Gravity.CENTER_VERTICAL);
+        setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(16), AndroidUtilities.dp(16), AndroidUtilities.dp(10));
+
+        nameTextview = new TextView(context);
+        nameTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        nameTextview.setTextSize(0, AndroidUtilities.dp(16));
+        addView(nameTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+    }
+
+
+    public void update(String name) {
+        nameTextview.setText(name);
+    }
+
+
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/GovernanceListCell.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/GovernanceListCell.java
new file mode 100644
index 000000000..269ecb5f4
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/GovernanceListCell.java
@@ -0,0 +1,86 @@
+package com.lunamint.lunagram.ui.cell;
+
+import android.content.Context;
+import android.support.v4.app.ActivityCompat;
+import android.text.TextUtils;
+import android.view.Gravity;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.model.Proposal;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class GovernanceListCell extends LinearLayout {
+
+    private TextView proposalIdTextview;
+    private TextView titleTextview;
+    private TextView proposalTypeTextview;
+    private TextView statusTextview;
+
+    public GovernanceListCell(Context context) {
+        super(context);
+
+        setBackgroundColor(ActivityCompat.getColor(context, R.color.white));
+        setOrientation(HORIZONTAL);
+        setGravity(Gravity.CENTER_VERTICAL);
+        setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(12), AndroidUtilities.dp(16), AndroidUtilities.dp(12));
+
+        LinearLayout infoLayout = new LinearLayout(context);
+        infoLayout.setOrientation(VERTICAL);
+        addView(infoLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.f, 0, 0, 10, 0));
+
+        proposalIdTextview = new TextView(context);
+        proposalIdTextview.setTextSize(0, AndroidUtilities.dp(10));
+        proposalIdTextview.setTextColor(ActivityCompat.getColor(context, R.color.languid_lavender));
+        infoLayout.addView(proposalIdTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        titleTextview = new TextView(context);
+        titleTextview.setTextSize(0, AndroidUtilities.dp(16));
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        titleTextview.setSingleLine(true);
+        titleTextview.setEllipsize(TextUtils.TruncateAt.END);
+        infoLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        proposalTypeTextview = new TextView(context);
+        proposalTypeTextview.setTextSize(0, AndroidUtilities.dp(12));
+        proposalTypeTextview.setTextColor(ActivityCompat.getColor(context, R.color.manatee));
+        infoLayout.addView(proposalTypeTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        statusTextview = new TextView(context);
+        statusTextview.setTextSize(0, AndroidUtilities.dp(16));
+        statusTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        addView(statusTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+    }
+
+    public void update(Proposal data) {
+
+        if (proposalIdTextview == null) return;
+
+        proposalIdTextview.setText(LocaleController.getString("proposal", R.string.proposal) + " #" + String.valueOf(data.getProposalId()));
+        titleTextview.setText(data.getProposalContent().getProposalDetail().getTitle());
+        proposalTypeTextview.setText(data.getProposalContent().getType());
+
+        switch (data.getProposalStatus()) {
+            case "DepositPeriod":
+                statusTextview.setText(LocaleController.getString("pending", R.string.pending));
+                break;
+            case "VotingPeriod":
+                statusTextview.setText(LocaleController.getString("active", R.string.active));
+                break;
+            case "Passed":
+                statusTextview.setText(LocaleController.getString("passed", R.string.passed));
+                break;
+            case "Rejected":
+                statusTextview.setText(LocaleController.getString("rejected", R.string.rejected));
+                break;
+        }
+    }
+
+    private String getVote(String v) {
+        return v.substring(0, v.indexOf("."));
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/NodeCell.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/NodeCell.java
new file mode 100644
index 000000000..ebd63d3e8
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/NodeCell.java
@@ -0,0 +1,79 @@
+package com.lunamint.lunagram.ui.cell;
+
+import android.content.Context;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.model.Node;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class NodeCell extends LinearLayout {
+
+    private TextView nameTextview;
+    private ImageView statusImgview;
+    private TextView statusTextview;
+    private ImageView selectedImgview;
+
+    public NodeCell(Context context) {
+        super(context);
+
+        setOrientation(LinearLayout.HORIZONTAL);
+        setGravity(Gravity.CENTER_VERTICAL);
+        setBackgroundColor(ActivityCompat.getColor(context, R.color.white));
+        setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(18), AndroidUtilities.dp(20), AndroidUtilities.dp(18));
+
+        LinearLayout linearLayout = new LinearLayout(context);
+        linearLayout.setOrientation(VERTICAL);
+        addView(linearLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f, 0, 0, 12, 0));
+
+        nameTextview = new TextView(context);
+        nameTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        nameTextview.setTextSize(0, AndroidUtilities.dp(16));
+        linearLayout.addView(nameTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 4));
+
+        LinearLayout statusLayout = new LinearLayout(context);
+        statusLayout.setOrientation(HORIZONTAL);
+        statusLayout.setGravity(Gravity.CENTER_VERTICAL);
+        linearLayout.addView(statusLayout, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        statusImgview = new ImageView(getContext());
+        statusLayout.addView(statusImgview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 5, 0));
+
+        statusTextview = new TextView(context);
+        statusTextview.setTextColor(ActivityCompat.getColor(context, R.color.manatee));
+        statusTextview.setTextSize(0, AndroidUtilities.dp(14));
+        statusLayout.addView(statusTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        selectedImgview = new ImageView(getContext());
+        selectedImgview.setImageResource(R.drawable.ic_check);
+        addView(selectedImgview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+        selectedImgview.setVisibility(INVISIBLE);
+    }
+
+    public void update(Node node) {
+        if (nameTextview == null) return;
+
+        nameTextview.setText(node.getName());
+
+        if (node.getIsActive()) {
+            statusImgview.setImageResource(R.drawable.node_status_active);
+            statusTextview.setText(LocaleController.getString("activeNode", R.string.activeNode));
+        } else {
+            statusImgview.setImageResource(R.drawable.node_status_inactive);
+            statusTextview.setText(LocaleController.getString("inactiveNode", R.string.inactiveNode));
+        }
+
+        if (node.getIsSelected()) {
+            selectedImgview.setVisibility(VISIBLE);
+        } else {
+            selectedImgview.setVisibility(GONE);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/SettingsCell.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/SettingsCell.java
new file mode 100644
index 000000000..1f0b2b278
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/SettingsCell.java
@@ -0,0 +1,81 @@
+package com.lunamint.lunagram.ui.cell;
+
+import android.content.Context;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.model.Setting;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class SettingsCell extends LinearLayout {
+
+    private boolean canUseFingerprint;
+
+    private TextView nameTextview;
+    private TextView valueTextview;
+    private ImageView arrowImgview;
+
+    private String titles[] = {
+            LocaleController.getString("signWithFingerprint", R.string.signWithFingerprint),
+            LocaleController.getString("selectedNode", R.string.selectedNode),
+            LocaleController.getString("followTwitter", R.string.followTwitter),
+            LocaleController.getString("termsOfService", R.string.termsOfService),
+            LocaleController.getString("feedback", R.string.feedback),
+    };
+
+    public SettingsCell(Context context, boolean canUseFingerprint) {
+        super(context);
+        this.canUseFingerprint = canUseFingerprint;
+
+        setOrientation(LinearLayout.HORIZONTAL);
+        setGravity(Gravity.CENTER_VERTICAL);
+        setBackgroundColor(ActivityCompat.getColor(context, R.color.white));
+        setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(26), AndroidUtilities.dp(16), AndroidUtilities.dp(26));
+
+        nameTextview = new TextView(context);
+        nameTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        nameTextview.setTextSize(0, AndroidUtilities.dp(14));
+        addView(nameTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 12, 0));
+
+        valueTextview = new TextView(context);
+        valueTextview.setTextColor(ActivityCompat.getColor(context, R.color.manatee));
+        valueTextview.setTextSize(0, AndroidUtilities.dp(14));
+        valueTextview.setGravity(Gravity.RIGHT);
+        addView(valueTextview, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f, 0, 0, 14, 0));
+
+        arrowImgview = new ImageView(getContext());
+        arrowImgview.setImageResource(R.drawable.ic_arrow_default);
+        arrowImgview.setAlpha(0.6f);
+        addView(arrowImgview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+    }
+
+    public void update(int position, Setting setting) {
+        if (nameTextview == null) return;
+        int i = position;
+        if (!canUseFingerprint) i++;
+
+        nameTextview.setText(titles[i]);
+
+        if (i >= 2) {
+            arrowImgview.setVisibility(GONE);
+        } else {
+            arrowImgview.setVisibility(VISIBLE);
+        }
+
+        if (setting != null) {
+            if (i == 0) {
+                String text = setting.isEnabledFingerprint() ? "ON" : "OFF";
+                valueTextview.setText(text);
+            } else if (i == 1) {
+                valueTextview.setText(setting.getNode());
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/TokenListCell.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/TokenListCell.java
new file mode 100644
index 000000000..945498c71
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/TokenListCell.java
@@ -0,0 +1,52 @@
+package com.lunamint.lunagram.ui.cell;
+
+import android.content.Context;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.utils.NumberFormatter;
+import com.lunamint.wallet.utils.TokenUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class TokenListCell extends LinearLayout {
+
+    private ImageView tokenImageview;
+    private TextView nameTextview;
+    private TextView amountTextview;
+
+    public TokenListCell(Context context) {
+        super(context);
+
+        setOrientation(LinearLayout.HORIZONTAL);
+        setGravity(Gravity.CENTER_VERTICAL);
+        setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(10), AndroidUtilities.dp(16), AndroidUtilities.dp(10));
+
+        tokenImageview = new ImageView(context);
+        addView(tokenImageview, LayoutHelper.createLinear(40, 40, 0, 0, 10, 0));
+
+        nameTextview = new TextView(context);
+        nameTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        nameTextview.setTextSize(0, AndroidUtilities.dp(16));
+        addView(nameTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 12, 0));
+
+        amountTextview = new TextView(context);
+        amountTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        amountTextview.setTextSize(0, AndroidUtilities.dp(14));
+        amountTextview.setGravity(Gravity.RIGHT);
+        addView(amountTextview, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
+    }
+
+    public void update(Coin data) {
+        if (nameTextview == null) return;
+        tokenImageview.setImageResource(TokenUtil.getTokenIcon(data.getDenom()));
+        nameTextview.setText(data.getDenomDisplayName());
+        amountTextview.setText(NumberFormatter.getNumber(data.getAmount()));
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/TransactionHistoryCell.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/TransactionHistoryCell.java
new file mode 100644
index 000000000..16ed060f4
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/TransactionHistoryCell.java
@@ -0,0 +1,155 @@
+package com.lunamint.lunagram.ui.cell;
+
+import android.content.Context;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.model.TransactionHistory;
+import com.lunamint.wallet.utils.NumberFormatter;
+import com.lunamint.wallet.utils.Parser;
+import com.lunamint.wallet.utils.TokenUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class TransactionHistoryCell extends LinearLayout {
+
+    private ImageView statusImgview;
+    private ImageView profileImgview;
+    private TextView blockHeightTextview;
+    private TextView typeTextview;
+    private TextView amountTextview;
+    private TextView addressTextview;
+
+    public TransactionHistoryCell(Context context) {
+        super(context);
+
+        setOrientation(LinearLayout.HORIZONTAL);
+        setGravity(Gravity.CENTER_VERTICAL);
+        setBackgroundColor(ActivityCompat.getColor(context, R.color.white));
+        setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(12), AndroidUtilities.dp(16), AndroidUtilities.dp(12));
+
+        FrameLayout imgFramelayout = new FrameLayout(context);
+        addView(imgFramelayout, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 10, 0));
+
+        profileImgview = new ImageView(context);
+        imgFramelayout.addView(profileImgview, LayoutHelper.createLinear(42, 42));
+
+        statusImgview = new ImageView(context);
+        imgFramelayout.addView(statusImgview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        LinearLayout defaultInfoLayout = new LinearLayout(context);
+        defaultInfoLayout.setOrientation(LinearLayout.VERTICAL);
+        defaultInfoLayout.setGravity(Gravity.CENTER_VERTICAL);
+        addView(defaultInfoLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f, 0, 0, 10, 0));
+
+        blockHeightTextview = new TextView(context);
+        blockHeightTextview.setTextColor(ActivityCompat.getColor(context, R.color.languid_lavender));
+        blockHeightTextview.setTextSize(0, AndroidUtilities.dp(10));
+        defaultInfoLayout.addView(blockHeightTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        typeTextview = new TextView(context);
+        typeTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        typeTextview.setTextSize(0, AndroidUtilities.dp(16));
+        defaultInfoLayout.addView(typeTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        addressTextview = new TextView(context);
+        addressTextview.setTextColor(ActivityCompat.getColor(context, R.color.manatee));
+        addressTextview.setTextSize(0, AndroidUtilities.dp(12));
+        defaultInfoLayout.addView(addressTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        amountTextview = new TextView(context);
+        amountTextview.setTextSize(0, AndroidUtilities.dp(16));
+        amountTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        amountTextview.setGravity(Gravity.RIGHT);
+        addView(amountTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+    }
+
+    public void update(String address, TransactionHistory data) {
+        blockHeightTextview.setText("#" + String.valueOf(data.getBlock()));
+
+        switch (data.getType()) {
+            case "cosmos-sdk/MsgSend":
+                profileImgview.setImageResource(TokenUtil.getTokenIcon(data.getDenom()));
+                amountTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.charcoal));
+                if (address.equals(data.getFrom())) {
+                    statusImgview.setImageResource(R.drawable.ic_history_send);
+                    amountTextview.setText("-" + NumberFormatter.getNumber(data.getAmount()) + " " + TokenUtil.getTokenDisplayName(data.getDenom()));
+                    addressTextview.setText(Parser.getShotAddressForDisplay(data.getTo()));
+                    typeTextview.setText(LocaleController.getString("send", R.string.send));
+                } else {
+                    statusImgview.setImageResource(R.drawable.ic_history_receive);
+                    amountTextview.setText("+" + NumberFormatter.getNumber(data.getAmount()) + " " + TokenUtil.getTokenDisplayName(data.getDenom()));
+                    addressTextview.setText(Parser.getShotAddressForDisplay(data.getFrom()));
+                    typeTextview.setText(LocaleController.getString("receive", R.string.receive));
+                }
+                break;
+            case "cosmos-sdk/MsgDelegate":
+                profileImgview.setImageResource(R.drawable.validator_profile_small);
+                statusImgview.setImageResource(R.drawable.ic_history_stake);
+                typeTextview.setText(LocaleController.getString("stake", R.string.stake));
+                addressTextview.setText(Parser.getShotAddressForDisplay(data.getTo()));
+
+                amountTextview.setText(NumberFormatter.getNumber(data.getAmount()) + " " + Blockchain.getInstance().getReserveDisplayName());
+                amountTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.charcoal));
+                break;
+            case "cosmos-sdk/MsgUndelegate":
+                profileImgview.setImageResource(R.drawable.validator_profile_small);
+                statusImgview.setImageResource(R.drawable.ic_history_unstake);
+                typeTextview.setText(LocaleController.getString("unstake", R.string.unstake));
+                addressTextview.setText(Parser.getShotAddressForDisplay(data.getTo()));
+
+                amountTextview.setText(NumberFormatter.getNumber(data.getAmount()) + " " + Blockchain.getInstance().getReserveDisplayName());
+                amountTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.charcoal));
+                break;
+            case "cosmos-sdk/MsgBeginRedelegate":
+                profileImgview.setImageResource(R.drawable.validator_profile_small);
+                statusImgview.setImageResource(R.drawable.ic_history_restake);
+                typeTextview.setText(LocaleController.getString("redelegate", R.string.redelegate));
+                addressTextview.setText(Parser.getShotAddressForDisplay(data.getTo()));
+
+                amountTextview.setText(NumberFormatter.getNumber(data.getAmount()) + " " + Blockchain.getInstance().getReserveDisplayName());
+                amountTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.charcoal));
+                break;
+            case "cosmos-sdk/MsgWithdrawDelegationReward":
+                profileImgview.setImageResource(TokenUtil.getTokenIcon(Blockchain.getInstance().getReserveDenom()));
+                statusImgview.setImageResource(R.drawable.ic_history_reward);
+                typeTextview.setText(LocaleController.getString("claimReward", R.string.claimReward));
+                amountTextview.setText("");
+
+                break;
+            case "cosmos-sdk/MsgVote":
+                profileImgview.setImageResource(R.drawable.validator_profile_small);
+
+                switch (data.getAmount()){
+                    case "Yes":
+                        statusImgview.setImageResource(R.drawable.ic_history_vote_yes);
+                        amountTextview.setText(LocaleController.getString("yes", R.string.yes));
+                        break;
+                    case "No":
+                        statusImgview.setImageResource(R.drawable.ic_history_vote_no);
+                        amountTextview.setText(LocaleController.getString("no", R.string.no));
+                        break;
+                    case "NoWithVeto":
+                        statusImgview.setImageResource(R.drawable.ic_history_vote_no_with_veto);
+                        amountTextview.setText(LocaleController.getString("noWithVeto", R.string.noWithVeto));
+                        break;
+                    case "Abstain":
+                        statusImgview.setImageResource(R.drawable.ic_history_vote_abstain);
+                        amountTextview.setText(LocaleController.getString("abstain", R.string.abstain));
+                        break;
+                }
+
+                typeTextview.setText(LocaleController.getString("proposal", R.string.proposal) + " #" + data.getTo());
+                addressTextview.setVisibility(GONE);
+                break;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/ValidatorListCell.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/ValidatorListCell.java
new file mode 100644
index 000000000..c74bcd54a
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/cell/ValidatorListCell.java
@@ -0,0 +1,98 @@
+package com.lunamint.lunagram.ui.cell;
+
+import android.content.Context;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.model.Validator;
+import com.lunamint.wallet.utils.NumberFormatter;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class ValidatorListCell extends LinearLayout {
+
+    private TextView powerTextview;
+    private TextView nameTextview;
+    private TextView commissionTextview;
+    private TextView stakeAmountTextview;
+
+    public ValidatorListCell(Context context) {
+        super(context);
+
+        setOrientation(LinearLayout.HORIZONTAL);
+        setGravity(Gravity.CENTER_VERTICAL);
+        setBackgroundColor(ActivityCompat.getColor(context, R.color.white));
+        setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(10), AndroidUtilities.dp(16), AndroidUtilities.dp(10));
+
+        ImageView profileImageview = new ImageView(context);
+        profileImageview.setImageResource(R.drawable.validator_profile_small);
+        addView(profileImageview, LayoutHelper.createLinear(40, 40, 0, 0, 10, 0));
+
+        LinearLayout textLayout = new LinearLayout(context);
+        textLayout.setOrientation(VERTICAL);
+        addView(textLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f, 0, 0, 10, 0));
+
+        powerTextview = new TextView(context);
+        powerTextview.setTextColor(ActivityCompat.getColor(context, R.color.languid_lavender));
+        powerTextview.setTextSize(0, AndroidUtilities.dp(10));
+        textLayout.addView(powerTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        nameTextview = new TextView(context);
+
+        nameTextview.setTextSize(0, AndroidUtilities.dp(16));
+        textLayout.addView(nameTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        commissionTextview = new TextView(context);
+        commissionTextview.setTextColor(ActivityCompat.getColor(context, R.color.manatee));
+        commissionTextview.setTextSize(0, AndroidUtilities.dp(12));
+        textLayout.addView(commissionTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        stakeAmountTextview = new TextView(context);
+        stakeAmountTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        stakeAmountTextview.setTextSize(0, AndroidUtilities.dp(16));
+        addView(stakeAmountTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 12, 0));
+    }
+
+
+    public void update(Validator data, double totalPower) {
+        try {
+            if (data.getUnstakingCompletionTime() == null) {
+                double power = data.getDelegatorShares();
+                if (totalPower > 0) {
+                    power = power / totalPower * 100;
+                    powerTextview.setText("#" + data.getRank() + " (" + String.format("%.2f", power) + "%)");
+                } else {
+                    powerTextview.setText("#" + data.getRank() + " (" + String.format("%.2f", data.getDelegatorShares()) + ")");
+                }
+            } else {
+                powerTextview.setText(LocaleController.getString("completionTime", R.string.completionTime) + " (UTC)\n" + data.getUnstakingCompletionTime());
+            }
+
+            float commissionRate = Float.parseFloat(data.getCommission().getRate()) * 100;
+            commissionTextview.setText(LocaleController.getString("commission", R.string.commission) + " - " + String.format("%.1f", commissionRate) + "%");
+        } catch (Exception e) {
+            powerTextview.setText("#" + data.getRank() + " (" + String.format("%.2f", data.getDelegatorShares()) + ")");
+            commissionTextview.setText(LocaleController.getString("commission", R.string.commission) + " - " + String.format("%.1f", data.getCommission().getRate()) + "");
+        }
+
+        if (data.getJailed()) {
+            nameTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.coral_red));
+        } else {
+            nameTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.charcoal));
+        }
+        nameTextview.setText(data.getDescription().getMoniker());
+
+        if (data.getDelegatedAmount() > 0) {
+            stakeAmountTextview.setText(NumberFormatter.getNumber(data.getDelegatedAmountForDisplay()) + " " + Blockchain.getInstance().getReserveDisplayName());
+        } else {
+            stakeAmountTextview.setText("");
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/AmountEditText.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/AmountEditText.java
new file mode 100644
index 000000000..9e39eea0d
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/AmountEditText.java
@@ -0,0 +1,118 @@
+package com.lunamint.lunagram.ui.component;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.v4.app.ActivityCompat;
+import android.text.InputType;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.utils.BigDecimalUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.math.BigDecimal;
+
+public class AmountEditText extends LinearLayout {
+
+    private boolean isError = false;
+
+    private EditText editText;
+    private TextView errorTextview;
+
+    public AmountEditText(Context context, boolean isEditable, String defaultText, String hint) {
+        super(context);
+
+        setOrientation(VERTICAL);
+
+        editText = new EditText(context);
+        editText.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        editText.setTextSize(0, AndroidUtilities.dp(16));
+        editText.setBackgroundResource(R.drawable.bg_edittext);
+        editText.setFocusable(isEditable);
+        editText.setOnKeyListener(onKeyListener);
+        editText.setMaxLines(1);
+        editText.setSingleLine(true);
+        editText.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
+
+        if (defaultText != null) editText.setText(defaultText);
+        if (hint != null) editText.setHint(hint);
+        addView(editText, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 4));
+
+        errorTextview = new TextView(context);
+        errorTextview.setTextColor(ActivityCompat.getColor(context, R.color.coral_red));
+        errorTextview.setTextSize(0, AndroidUtilities.dp(12));
+        addView(errorTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+    }
+
+    public void showError(String msg) {
+        if (editText == null) return;
+        isError = true;
+        editText.setBackgroundResource(R.drawable.bg_edittext_error);
+        errorTextview.setText(msg);
+    }
+
+    public String getText() {
+        if (editText == null) {
+            return "0";
+        } else {
+            if (editText.getText().toString().length() == 0) {
+                return "0";
+            } else {
+                return BigDecimalUtil.getNumberOrigin(editText.getText().toString(), "0");
+            }
+        }
+    }
+
+    public String getTextOrigin() {
+        if (editText == null) {
+            return "0";
+        } else {
+            if (editText.getText().toString().length() == 0) {
+                return "";
+            }else{
+                BigDecimal amount = new BigDecimal(editText.getText().toString());
+                return String.format("%.4f", amount);
+            }
+        }
+    }
+
+    public void setText(String text) {
+        if (editText == null) return;
+        editText.setText(text);
+    }
+
+    public void clear() {
+        if (editText == null) return;
+        editText.setText("");
+    }
+
+    public void setFocus() {
+        if (editText != null) {
+            editText.requestFocus();
+            showKeyboard();
+        }
+    }
+
+    private void showKeyboard() {
+        InputMethodManager imm = (InputMethodManager) getContext().getSystemService(Activity.INPUT_METHOD_SERVICE);
+        imm.showSoftInput(editText, 0);
+    }
+
+    public OnKeyListener onKeyListener = new OnKeyListener() {
+        @Override
+        public boolean onKey(View v, int keyCode, KeyEvent event) {
+            if (isError) {
+                isError = false;
+                if (editText != null) editText.setBackgroundResource(R.drawable.bg_edittext);
+            }
+            return false;
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/component/CardAdapter.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/CardAdapter.java
similarity index 83%
rename from TMessagesProj/src/main/java/com/telemint/ui/component/CardAdapter.java
rename to TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/CardAdapter.java
index 3a2c5a6f7..affe4bede 100644
--- a/TMessagesProj/src/main/java/com/telemint/ui/component/CardAdapter.java
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/CardAdapter.java
@@ -1,4 +1,4 @@
-package com.telemint.ui.component;
+package com.lunamint.lunagram.ui.component;
 
 import android.support.v7.widget.CardView;
 
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/DefaultButton.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/DefaultButton.java
new file mode 100644
index 000000000..cf17e0843
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/DefaultButton.java
@@ -0,0 +1,45 @@
+package com.lunamint.lunagram.ui.component;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.support.v7.widget.CardView;
+import android.widget.Button;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class DefaultButton extends CardView {
+
+    private Button button;
+
+    public DefaultButton(Context context, int radius, boolean isElevation, String name, int backgroundResource, OnClickListener onClickListener) {
+        super(context);
+
+        if(isElevation){
+            setUseCompatPadding(true);
+            setRadius(AndroidUtilities.dp(radius));
+            setCardElevation(UiUtil.getDefaultElevation());
+        }
+
+        button = new Button(context);
+        button.setBackgroundResource(backgroundResource);
+        button.setTextSize(0, AndroidUtilities.dp(16));
+        button.setTypeface(Typeface.DEFAULT_BOLD);
+        button.setTextColor(ActivityCompat.getColor(context, R.color.white));
+        int padding = AndroidUtilities.dp(18);
+        button.setPadding(padding, padding, padding, padding);
+        button.setText(name);
+        button.setOnClickListener(onClickListener);
+        addView(button, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+    }
+
+    public void update(String name, int backgroundResource) {
+        if (button == null) return;
+        button.setText(name);
+        button.setBackgroundResource(backgroundResource);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/DefaultEditText.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/DefaultEditText.java
new file mode 100644
index 000000000..1248d6012
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/DefaultEditText.java
@@ -0,0 +1,102 @@
+package com.lunamint.lunagram.ui.component;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.v4.app.ActivityCompat;
+import android.text.InputType;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class DefaultEditText extends LinearLayout {
+
+    private boolean isError = false;
+
+    private EditText editText;
+    private TextView errorTextview;
+
+    public DefaultEditText(Context context, boolean isEditable, boolean isPassword, boolean isVisible, String defaultText, String hint) {
+        super(context);
+
+        setOrientation(VERTICAL);
+
+        editText = new EditText(context);
+        editText.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        editText.setTextSize(0, AndroidUtilities.dp(16));
+        editText.setBackgroundResource(R.drawable.bg_edittext);
+        editText.setFocusable(isEditable);
+        editText.setOnKeyListener(onKeyListener);
+        editText.setMaxLines(1);
+        editText.setSingleLine(true);
+        if (isPassword) {
+            if (isVisible) {
+                editText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD | InputType.TYPE_TEXT_FLAG_MULTI_LINE);
+                editText.setHorizontallyScrolling(false);
+            } else {
+                editText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
+            }
+        }
+
+        if (defaultText != null) editText.setText(defaultText);
+        if (hint != null) editText.setHint(hint);
+        addView(editText, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 4));
+
+        errorTextview = new TextView(context);
+        errorTextview.setTextColor(ActivityCompat.getColor(context, R.color.coral_red));
+        errorTextview.setTextSize(0, AndroidUtilities.dp(12));
+        addView(errorTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+    }
+
+    public void showError(String msg) {
+        if (editText == null) return;
+        isError = true;
+        editText.setBackgroundResource(R.drawable.bg_edittext_error);
+        errorTextview.setText(msg);
+    }
+
+    public String getText() {
+        if (editText == null) return "";
+        return editText.getText().toString();
+    }
+
+    public void setText(String text) {
+        if (editText == null) return;
+        editText.setText(text);
+    }
+
+    public void clear() {
+        if (editText == null) return;
+        editText.setText("");
+    }
+
+    public void setFocus() {
+        if (editText != null) {
+            editText.requestFocus();
+            showKeyboard();
+        }
+    }
+
+    private void showKeyboard() {
+        InputMethodManager imm = (InputMethodManager) getContext().getSystemService(Activity.INPUT_METHOD_SERVICE);
+        imm.showSoftInput(editText, 0);
+    }
+
+    public OnKeyListener onKeyListener = new OnKeyListener() {
+        @Override
+        public boolean onKey(View v, int keyCode, KeyEvent event) {
+            if (isError) {
+                isError = false;
+                if (editText != null) editText.setBackgroundResource(R.drawable.bg_edittext);
+            }
+            return false;
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/DefaultSelectDialog.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/DefaultSelectDialog.java
new file mode 100644
index 000000000..9059ecd12
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/DefaultSelectDialog.java
@@ -0,0 +1,61 @@
+package com.lunamint.lunagram.ui.component;
+
+import android.app.Dialog;
+import android.content.Context;
+import android.os.Bundle;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.AdapterView;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.adapter.DefaultSelectListAdapter;
+
+import java.util.ArrayList;
+
+public class DefaultSelectDialog extends Dialog {
+
+    private String title;
+
+    private AdapterView.OnItemClickListener onItemClickListener;
+    private ArrayList<String> dataList;
+
+    public DefaultSelectDialog(Context context, String title, ArrayList<String> dataList, AdapterView.OnItemClickListener onItemClickListener) {
+        super(context, android.R.style.Theme_Translucent_NoTitleBar);
+        this.title = title;
+        this.dataList = dataList;
+        this.onItemClickListener = onItemClickListener;
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        WindowManager.LayoutParams lpWindow = new WindowManager.LayoutParams();
+        lpWindow.flags = WindowManager.LayoutParams.FLAG_DIM_BEHIND;
+        lpWindow.dimAmount = 0.8f;
+        getWindow().setAttributes(lpWindow);
+
+        setContentView(R.layout.select_list_dialog);
+
+        LinearLayout mainLayout = findViewById(R.id.main_layout);
+        TextView titleTextview = findViewById(R.id.title_textview);
+        ListView listView = findViewById(R.id.listview);
+
+        mainLayout.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                cancel();
+            }
+        });
+        titleTextview.setText(title);
+
+        listView.setDividerHeight(0);
+        listView.setOnItemClickListener(onItemClickListener);
+
+        DefaultSelectListAdapter tokenListAdapter = new DefaultSelectListAdapter(getContext(), 0, dataList);
+        listView.setAdapter(tokenListAdapter);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/LunagramBaseActivity.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/LunagramBaseActivity.java
new file mode 100644
index 000000000..59e1ccf9f
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/LunagramBaseActivity.java
@@ -0,0 +1,410 @@
+package com.lunamint.lunagram.ui.component;
+
+import android.app.Activity;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.graphics.drawable.ColorDrawable;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.os.Vibrator;
+import android.support.v4.os.CancellationSignal;
+import android.support.v7.app.AlertDialog;
+import android.support.v7.app.AppCompatActivity;
+import android.view.Gravity;
+import android.view.MenuItem;
+import android.view.View;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.secure.Secure;
+import com.lunamint.lunagram.ui.SelectNodeActivity;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.SharedConfig;
+import org.telegram.messenger.support.fingerprint.FingerprintManagerCompat;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.lang.ref.WeakReference;
+
+public class LunagramBaseActivity extends AppCompatActivity implements NotificationCenter.NotificationCenterDelegate {
+
+    private final static int id_fingerprint_textview = 1000;
+    private final static int id_fingerprint_imageview = 1001;
+
+    private boolean pause = false;
+    private boolean supportFingerprintUI = false;
+    private org.telegram.ui.ActionBar.AlertDialog fingerprintDialog;
+    private CancellationSignal cancellationSignal;
+    private ImageView fingerprintImageView;
+    private TextView fingerprintStatusTextView;
+    private boolean selfCancelled;
+
+    private ProgressDialog mProgressDialog;
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if (item.getItemId() == android.R.id.home) {
+            finish();
+            return true;
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getSupportActionBar() != null) getSupportActionBar().setDisplayHomeAsUpEnabled(true);
+
+        ColorDrawable drawable = new ColorDrawable(Theme.getColor(Theme.key_actionBarDefault));
+        getSupportActionBar().setBackgroundDrawable(drawable);
+
+        setIsSupportFingerprintUI();
+
+        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.nodeChanged);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        setPaused(false);
+
+        if (Secure.isRooted()) {
+            showRootedAlert();
+            return;
+        }
+
+        if (Secure.isAdbEnabled(this)) {
+            showAdbAlert();
+            return;
+        }
+
+        if (!Secure.isValidSignature(this)) {
+            showSignatureAlert();
+        }
+    }
+
+    @Override
+    protected void onPause() {
+        setPaused(true);
+        super.onPause();
+    }
+
+    @Override
+    protected void onDestroy() {
+        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.nodeChanged);
+        super.onDestroy();
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public void didReceivedNotification(int id, int account, Object... args) {
+        if (id == NotificationCenter.nodeChanged) {
+            finish();
+        }
+    }
+
+    protected void checkFingerprint() {
+        if (isFinishing()) return;
+        if (Build.VERSION.SDK_INT >= 23 && SharedConfig.useFingerprint) {
+            try {
+                if (fingerprintDialog != null && fingerprintDialog.isShowing()) return;
+            } catch (Exception e) {
+                FileLog.e(e);
+            }
+            try {
+                FingerprintManagerCompat fingerprintManager = FingerprintManagerCompat.from(ApplicationLoader.applicationContext);
+                if (fingerprintManager.isHardwareDetected() && fingerprintManager.hasEnrolledFingerprints()) {
+                    if (!supportFingerprintUI) {
+                        RelativeLayout relativeLayout = new RelativeLayout(this);
+                        relativeLayout.setPadding(AndroidUtilities.dp(24), 0, AndroidUtilities.dp(24), 0);
+
+                        TextView fingerprintTextView = new TextView(this);
+                        fingerprintTextView.setId(id_fingerprint_textview);
+                        fingerprintTextView.setTextAppearance(android.R.style.TextAppearance_Material_Subhead);
+                        fingerprintTextView.setTextColor(Theme.getColor(Theme.key_dialogTextBlack));
+                        fingerprintTextView.setText(LocaleController.getString("FingerprintInfo", R.string.FingerprintInfo));
+                        relativeLayout.addView(fingerprintTextView);
+                        RelativeLayout.LayoutParams layoutParams = LayoutHelper.createRelative(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT);
+                        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
+                        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_START);
+                        fingerprintTextView.setLayoutParams(layoutParams);
+
+                        fingerprintImageView = new ImageView(this);
+                        fingerprintImageView.setImageResource(R.drawable.ic_fp_40px);
+                        fingerprintImageView.setId(id_fingerprint_imageview);
+                        relativeLayout.addView(fingerprintImageView, LayoutHelper.createRelative(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 20, 0, 0, RelativeLayout.ALIGN_PARENT_START, RelativeLayout.BELOW, id_fingerprint_textview));
+
+                        fingerprintStatusTextView = new TextView(this);
+                        fingerprintStatusTextView.setGravity(Gravity.CENTER_VERTICAL);
+                        fingerprintStatusTextView.setText(LocaleController.getString("FingerprintHelp", R.string.FingerprintHelp));
+                        fingerprintStatusTextView.setTextAppearance(android.R.style.TextAppearance_Material_Body1);
+                        fingerprintStatusTextView.setTextColor(Theme.getColor(Theme.key_dialogTextBlack) & 0x42ffffff);
+                        relativeLayout.addView(fingerprintStatusTextView);
+                        layoutParams = LayoutHelper.createRelative(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT);
+                        layoutParams.setMarginStart(AndroidUtilities.dp(16));
+                        layoutParams.addRule(RelativeLayout.ALIGN_BOTTOM, id_fingerprint_imageview);
+                        layoutParams.addRule(RelativeLayout.ALIGN_TOP, id_fingerprint_imageview);
+                        layoutParams.addRule(RelativeLayout.END_OF, id_fingerprint_imageview);
+                        fingerprintStatusTextView.setLayoutParams(layoutParams);
+
+                        org.telegram.ui.ActionBar.AlertDialog.Builder builder = new org.telegram.ui.ActionBar.AlertDialog.Builder(this);
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setView(relativeLayout);
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
+                            @Override
+                            public void onDismiss(DialogInterface dialog) {
+                                if (cancellationSignal != null) {
+                                    selfCancelled = true;
+                                    cancellationSignal.cancel();
+                                    cancellationSignal = null;
+                                }
+                            }
+                        });
+                        if (fingerprintDialog != null) {
+                            try {
+                                if (fingerprintDialog.isShowing()) {
+                                    fingerprintDialog.dismiss();
+                                }
+                            } catch (Exception e) {
+                                FileLog.e(e);
+                            }
+                        }
+                        fingerprintDialog = builder.show();
+                    }
+
+                    cancellationSignal = new CancellationSignal();
+                    selfCancelled = false;
+                    fingerprintManager.authenticate(null, 0, cancellationSignal, new FingerprintManagerCompat.AuthenticationCallback() {
+                        @Override
+                        public void onAuthenticationError(int errMsgId, CharSequence errString) {
+                            if (!selfCancelled) {
+                                showFingerprintError(errString);
+                            }
+                        }
+
+                        @Override
+                        public void onAuthenticationHelp(int helpMsgId, CharSequence helpString) {
+                            showFingerprintError(helpString);
+                        }
+
+                        @Override
+                        public void onAuthenticationFailed() {
+                            showFingerprintError(LocaleController.getString("FingerprintNotRecognized", R.string.FingerprintNotRecognized));
+                        }
+
+                        @Override
+                        public void onAuthenticationSucceeded(FingerprintManagerCompat.AuthenticationResult result) {
+                            try {
+                                if (fingerprintDialog.isShowing()) {
+                                    fingerprintDialog.dismiss();
+                                }
+                            } catch (Exception e) {
+                                FileLog.e(e);
+                            }
+                            fingerprintDialog = null;
+                            onCheckFingerprintDone();
+                        }
+                    }, null);
+                }
+            } catch (Throwable e) {
+                //ignore
+            }
+        }
+    }
+
+    protected void onCheckFingerprintDone() {
+    }
+
+    protected boolean isEnabledFingerprint(String accountName) {
+        SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        return pref.getBoolean("W-" + accountName.replaceAll(" ", "") + "_f", true);
+    }
+
+    protected void setEnabledFingerprint(String accountName, boolean isEnabled) {
+        SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        pref.edit().putBoolean("W-" + accountName.replaceAll(" ", "") + "_f", isEnabled).commit();
+    }
+
+    private void setIsSupportFingerprintUI() {
+        String manufacturer = Build.MANUFACTURER;
+        String model = Build.MODEL;
+        if ("samsung".equals(manufacturer)) {
+            if (model.contains("SM-G973") || model.contains("SM-G975")) {
+                supportFingerprintUI = true;
+            }
+        }
+    }
+
+    private void showFingerprintError(CharSequence error) {
+        if (fingerprintImageView == null || supportFingerprintUI) return;
+        fingerprintImageView.setImageResource(R.drawable.ic_fingerprint_error);
+        fingerprintStatusTextView.setText(error);
+        fingerprintStatusTextView.setTextColor(0xfff4511e);
+        Vibrator v = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
+        if (v != null) {
+            v.vibrate(200);
+        }
+        AndroidUtilities.shakeView(fingerprintStatusTextView, 2, 0);
+    }
+
+    private void showRootedAlert() {
+        if (isFinishing()) return;
+        AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        builder.setTitle(LocaleController.getString("warning", R.string.warning));
+        builder.setMessage(LocaleController.getString("deviceRootedError", R.string.deviceRootedError));
+        builder.setCancelable(false);
+        builder.setPositiveButton(R.string.OK,
+                new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int which) {
+                        finish();
+                    }
+                });
+        builder.show();
+    }
+
+    private void showAdbAlert() {
+        if (isFinishing()) return;
+        AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        builder.setTitle(LocaleController.getString("securityWarning", R.string.securityWarning));
+        builder.setMessage(LocaleController.getString("developerOptionEnabled", R.string.developerOptionEnabled));
+        builder.setCancelable(false);
+        builder.setPositiveButton(R.string.OK,
+                new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int which) {
+                        finish();
+                    }
+                });
+        builder.show();
+    }
+
+    private void showSignatureAlert() {
+        if (isFinishing()) return;
+        AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        builder.setTitle(LocaleController.getString("securityWarning", R.string.securityWarning));
+        builder.setMessage(LocaleController.getString("fileForgeryDetected", R.string.fileForgeryDetected));
+        builder.setCancelable(false);
+        builder.setPositiveButton(R.string.OK,
+                new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int which) {
+                        finish();
+                    }
+                });
+        builder.show();
+    }
+
+    private void showScreenCaptureAlert() {
+        if (isFinishing()) return;
+        AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        builder.setTitle(LocaleController.getString("warning", R.string.warning));
+        builder.setMessage(LocaleController.getString("detectedScreenCapture", R.string.detectedScreenCapture));
+        builder.setCancelable(false);
+        builder.setPositiveButton(R.string.OK, null);
+        builder.show();
+    }
+
+    protected void showNodeConnectionErrorAlert() {
+        if (isFinishing()) return;
+        AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        builder.setTitle(LocaleController.getString("error", R.string.error));
+        builder.setMessage(LocaleController.getString("changeNodeDesc", R.string.changeNodeDesc));
+        builder.setCancelable(false);
+        builder.setNegativeButton(R.string.Cancel, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.dismiss();
+                finish();
+            }
+        });
+        builder.setPositiveButton(R.string.OK, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.dismiss();
+                showSelectNodeActivity();
+            }
+        });
+        builder.show();
+    }
+
+    protected void showNetworkErrorAlert() {
+        if (isFinishing()) return;
+        AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        builder.setTitle(LocaleController.getString("error", R.string.error));
+        builder.setMessage(LocaleController.getString("networkError", R.string.networkError));
+        builder.setCancelable(false);
+        builder.setPositiveButton(R.string.OK, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                finish();
+            }
+        });
+        builder.show();
+    }
+
+    protected void showSelectNodeActivity() {
+        Intent intent = new Intent(this, SelectNodeActivity.class);
+        startActivity(intent);
+    }
+
+    private synchronized boolean isPaused() {
+        return pause;
+    }
+
+    private synchronized void setPaused(boolean isPaused) {
+        pause = isPaused;
+    }
+
+    protected void showProgress() {
+        if (mProgressDialog != null) mProgressDialog.dismiss();
+        mProgressDialog = ProgressDialog.show(this, "", LocaleController.getString("sending", R.string.sending), true);
+        mProgressDialog.setCancelable(false);
+    }
+
+    protected void hideProgress() {
+        if (mProgressDialog == null) return;
+        mProgressDialog.dismiss();
+        mProgressDialog = null;
+    }
+
+    protected void hideKeyboard() {
+        View view = getCurrentFocus();
+        if (view != null) {
+            InputMethodManager imm = (InputMethodManager) getSystemService(Activity.INPUT_METHOD_SERVICE);
+            if (imm != null) imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
+        }
+    }
+
+    protected void handleMessage(Message msg) {
+    }
+
+    protected static class ResultHandler extends Handler {
+        private final WeakReference<LunagramBaseActivity> mActivity;
+
+        public ResultHandler(LunagramBaseActivity activity) {
+            mActivity = new WeakReference<>(activity);
+        }
+
+        @Override
+        public void handleMessage(Message msg) {
+            LunagramBaseActivity activity = mActivity.get();
+            if (activity != null) {
+                activity.handleMessage(msg);
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/component/ShadowTransformer.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/ShadowTransformer.java
similarity index 98%
rename from TMessagesProj/src/main/java/com/telemint/ui/component/ShadowTransformer.java
rename to TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/ShadowTransformer.java
index cd8534ba3..50a8f42df 100644
--- a/TMessagesProj/src/main/java/com/telemint/ui/component/ShadowTransformer.java
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/ShadowTransformer.java
@@ -1,4 +1,4 @@
-package com.telemint.ui.component;
+package com.lunamint.lunagram.ui.component;
 
 import android.support.v4.view.ViewPager;
 import android.support.v7.widget.CardView;
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/SwipeControlViewPager.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/SwipeControlViewPager.java
new file mode 100644
index 000000000..c2f894e62
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/component/SwipeControlViewPager.java
@@ -0,0 +1,51 @@
+package com.lunamint.lunagram.ui.component;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.view.MotionEventCompat;
+import android.support.v4.view.ViewPager;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+
+public class SwipeControlViewPager extends ViewPager {
+
+    private boolean enabledSwipe = true;
+
+    public SwipeControlViewPager(@NonNull Context context) {
+        super(context);
+    }
+
+    public SwipeControlViewPager(@NonNull Context context, @Nullable AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    @Override
+    public boolean onInterceptTouchEvent(MotionEvent ev) {
+        if (enabledSwipe) {
+            return super.onInterceptTouchEvent(ev);
+        } else {
+            if (MotionEventCompat.getActionMasked(ev) == MotionEvent.ACTION_MOVE) {
+            } else {
+                if (super.onInterceptTouchEvent(ev)) {
+                    super.onTouchEvent(ev);
+                }
+            }
+            return false;
+        }
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent ev) {
+        if (enabledSwipe) {
+            return super.onTouchEvent(ev);
+        } else {
+            return MotionEventCompat.getActionMasked(ev) != MotionEvent.ACTION_MOVE && super.onTouchEvent(ev);
+        }
+    }
+
+    public void setSwipeEnabled(boolean enabled) {
+        this.enabledSwipe = enabled;
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/fragment/GovernanceListFragment.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/fragment/GovernanceListFragment.java
new file mode 100644
index 000000000..9a02c5242
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/fragment/GovernanceListFragment.java
@@ -0,0 +1,206 @@
+package com.lunamint.lunagram.ui.fragment;
+
+import android.content.Intent;
+import android.graphics.drawable.ColorDrawable;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.app.Fragment;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.ProposalDetailActivity;
+import com.lunamint.lunagram.ui.adapter.GovernanceListAdapter;
+import com.lunamint.wallet.ApiUtils;
+import com.lunamint.wallet.LcdService;
+import com.lunamint.wallet.model.Proposal;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
+public class GovernanceListFragment extends Fragment {
+
+    private int type;
+    private String address;
+    private String accountName;
+
+    private ArrayList<Proposal> proposals = new ArrayList<>();
+
+    private GovernanceListAdapter adapter;
+
+    private LinearLayout contentsLayout;
+    private LinearLayout loadingLayout;
+    private TextView emptyTextview;
+
+    private Comparator<Proposal> comparator = new Comparator<Proposal>() {
+        @Override
+        public int compare(Proposal o1, Proposal o2) {
+            return Long.compare(o2.getVotingEndTimeWithLong(), o1.getVotingEndTimeWithLong());
+        }
+    };
+
+    public static GovernanceListFragment newInstance(int type, String accountName, String address) {
+        GovernanceListFragment fragment = new GovernanceListFragment();
+        Bundle args = new Bundle();
+        args.putInt("type", type);
+        args.putString("accountName", accountName);
+        args.putString("address", address);
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        if (getArguments() == null) return;
+        type = getArguments().getInt("type", 0);
+        address = getArguments().getString("address");
+        accountName = getArguments().getString("accountName");
+    }
+
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        if (getContext() == null) return null;
+
+        FrameLayout mainLayout = new FrameLayout(getContext());
+
+        contentsLayout = new LinearLayout(getContext());
+        contentsLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.addView(contentsLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        adapter = new GovernanceListAdapter(getContext(), 0, proposals);
+        ListView listview = new ListView(getContext());
+        listview.setDivider(new ColorDrawable(0x88E4E9FE));
+        listview.setDividerHeight(AndroidUtilities.dp(1));
+        listview.setAdapter(adapter);
+        listview.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                showProposalDetailActivity(position);
+            }
+        });
+        contentsLayout.addView(listview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        contentsLayout.setVisibility(View.INVISIBLE);
+
+        loadingLayout = new LinearLayout(getContext());
+        loadingLayout.setGravity(Gravity.CENTER);
+        mainLayout.addView(loadingLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        emptyTextview = new TextView(getContext());
+        emptyTextview.setTextSize(0, AndroidUtilities.dp(16));
+        emptyTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.payneGrey));
+        emptyTextview.setGravity(Gravity.CENTER);
+        emptyTextview.setText(LocaleController.getString("noTransactions", R.string.noTransactions));
+
+        mainLayout.addView(emptyTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 20, 0, 20, 0));
+        emptyTextview.setVisibility(View.INVISIBLE);
+
+        ProgressBar progressBar = new ProgressBar(getContext());
+        loadingLayout.addView(progressBar, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        return mainLayout;
+    }
+
+    @Override
+    public void onViewCreated(@NonNull View view, Bundle bundle) {
+        super.onViewCreated(view, bundle);
+
+        String proposalType = "";
+        switch (type) {
+            case 0:
+                proposalType = "voting_period";
+                break;
+            case 1:
+                proposalType = "passed";
+                break;
+            case 2:
+                proposalType = "deposit_period";
+                break;
+        }
+
+        getProposals(proposalType);
+    }
+
+    private void getProposals(final String proposalType) {
+
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getProposals(proposalType).enqueue(new Callback<ArrayList<Proposal>>() {
+            @Override
+            public void onResponse(Call<ArrayList<Proposal>> call, Response<ArrayList<Proposal>> response) {
+
+                if (response.code() == 200) {
+                    switch (proposalType) {
+                        case "passed":
+                            proposals = new ArrayList<>();
+                            addProposals(response.body());
+                            getProposals("rejected");
+                            return;
+                        case "rejected":
+                            addProposals(response.body());
+                            break;
+                        default:
+                            proposals = response.body();
+                            break;
+                    }
+                }
+
+                update();
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<Proposal>> call, Throwable t) {
+                update();
+            }
+        });
+    }
+
+    private void addProposals(ArrayList<Proposal> proposals) {
+        this.proposals.addAll(proposals);
+    }
+
+    private void update() {
+        if (type == 1 && proposals != null) Collections.sort(proposals, comparator);
+
+        loadingLayout.setVisibility(View.GONE);
+        if (proposals != null && proposals.size() > 0) {
+            if (adapter != null) {
+                adapter.update(proposals);
+                adapter.notifyDataSetChanged();
+            }
+            contentsLayout.setVisibility(View.VISIBLE);
+            emptyTextview.setVisibility(View.GONE);
+        } else {
+            contentsLayout.setVisibility(View.GONE);
+            emptyTextview.setVisibility(View.VISIBLE);
+        }
+    }
+
+    private void showProposalDetailActivity(int pos) {
+        if (getContext() == null) return;
+        Intent intent = new Intent(getContext(), ProposalDetailActivity.class);
+        intent.putExtra("accountName", accountName);
+        intent.putExtra("address", address);
+        intent.putExtra("proposal", proposals.get(pos));
+
+        getContext().startActivity(intent);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/fragment/TransactionHistoryFragment.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/fragment/TransactionHistoryFragment.java
new file mode 100644
index 000000000..54b38b1bd
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/fragment/TransactionHistoryFragment.java
@@ -0,0 +1,254 @@
+package com.lunamint.lunagram.ui.fragment;
+
+import android.content.Intent;
+import android.graphics.drawable.ColorDrawable;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.app.Fragment;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.TransactionDetailActivity;
+import com.lunamint.lunagram.ui.adapter.TransactionHistoryAdapter;
+import com.lunamint.wallet.model.TransactionHistory;
+import com.lunamint.wallet.ApiUtils;
+import com.lunamint.wallet.LcdService;
+import com.lunamint.wallet.model.tx.DefaultHistory;
+import com.lunamint.wallet.model.tx.proposal.ProposalHistory;
+import com.lunamint.wallet.model.tx.send.SendHistory;
+import com.lunamint.wallet.utils.Parser;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
+public class TransactionHistoryFragment extends Fragment {
+
+    private int type;
+    private String address;
+
+    private ArrayList<TransactionHistory> transactionHistory = new ArrayList<>();
+
+    private TransactionHistoryAdapter adapter;
+
+    private LinearLayout contentsLayout;
+    private LinearLayout loadingLayout;
+    private TextView emptyTextview;
+
+    private Comparator<TransactionHistory> comparator = new Comparator<TransactionHistory>() {
+        @Override
+        public int compare(TransactionHistory o1, TransactionHistory o2) {
+            return Integer.compare(o2.getBlock(), o1.getBlock());
+        }
+    };
+
+    public static TransactionHistoryFragment newInstance(int type, String address) {
+        TransactionHistoryFragment fragment = new TransactionHistoryFragment();
+        Bundle args = new Bundle();
+        args.putInt("type", type);
+        args.putString("address", address);
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        if (getArguments() == null) return;
+        type = getArguments().getInt("type", 0);
+        address = getArguments().getString("address");
+    }
+
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        if (getContext() == null) return null;
+
+        FrameLayout mainLayout = new FrameLayout(getContext());
+
+        contentsLayout = new LinearLayout(getContext());
+        contentsLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.addView(contentsLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        adapter = new TransactionHistoryAdapter(getContext(), 0, address, transactionHistory);
+        ListView listview = new ListView(getContext());
+        listview.setDivider(new ColorDrawable(0x88E4E9FE));
+        listview.setDividerHeight(AndroidUtilities.dp(1));
+        listview.setAdapter(adapter);
+        listview.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                if (transactionHistory != null && transactionHistory.size() - 1 >= position)
+                    showTransactionDetailActivity(transactionHistory.get(position).getHash());
+            }
+        });
+        contentsLayout.addView(listview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        contentsLayout.setVisibility(View.INVISIBLE);
+
+        loadingLayout = new LinearLayout(getContext());
+        loadingLayout.setGravity(Gravity.CENTER);
+        mainLayout.addView(loadingLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        emptyTextview = new TextView(getContext());
+        emptyTextview.setTextSize(0, AndroidUtilities.dp(16));
+        emptyTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.payneGrey));
+        emptyTextview.setGravity(Gravity.CENTER);
+        emptyTextview.setText(LocaleController.getString("noTransactions", R.string.noTransactions));
+
+        mainLayout.addView(emptyTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 20, 0, 20, 0));
+        emptyTextview.setVisibility(View.INVISIBLE);
+
+        ProgressBar progressBar = new ProgressBar(getContext());
+        loadingLayout.addView(progressBar, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        return mainLayout;
+    }
+
+    @Override
+    public void onViewCreated(@NonNull View view, Bundle bundle) {
+        super.onViewCreated(view, bundle);
+        switch (type) {
+            case 0:
+                getTransactionHistorySent();
+                break;
+            case 1:
+                getTransactionHistoryDelegate();
+                break;
+            case 2:
+                getTransactionHistoryProposal();
+                break;
+        }
+    }
+
+    private void getTransactionHistorySent() {
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getSendHistory(address).enqueue(new Callback<ArrayList<SendHistory>>() {
+            @Override
+            public void onResponse(Call<ArrayList<SendHistory>> call, Response<ArrayList<SendHistory>> response) {
+                if (response.code() == 200 && response.body() != null) {
+                    for (int i = 0; response.body().size() > i; i++) {
+                        TransactionHistory history = Parser.getTransactionHistory(response.body().get(i));
+                        if (history != null) transactionHistory.add(history);
+                    }
+                }
+                getTransactionHistoryRecipient();
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<SendHistory>> call, Throwable t) {
+                getTransactionHistoryRecipient();
+            }
+        });
+    }
+
+    private void getTransactionHistoryRecipient() {
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getRecipientHistory(address).enqueue(new Callback<ArrayList<SendHistory>>() {
+            @Override
+            public void onResponse(Call<ArrayList<SendHistory>> call, Response<ArrayList<SendHistory>> response) {
+                if (response.code() == 200 && response.body() != null) {
+                    for (int i = 0; response.body().size() > i; i++) {
+                        TransactionHistory history = Parser.getTransactionHistory(response.body().get(i));
+                        if (history != null) transactionHistory.add(history);
+                    }
+                }
+                update();
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<SendHistory>> call, Throwable t) {
+                update();
+            }
+        });
+    }
+
+    private void getTransactionHistoryProposal() {
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getProposalHistory(address).enqueue(new Callback<ArrayList<ProposalHistory>>() {
+            @Override
+            public void onResponse(Call<ArrayList<ProposalHistory>> call, Response<ArrayList<ProposalHistory>> response) {
+                if (response.code() == 200 && response.body() != null) {
+                    for (int i = 0; response.body().size() > i; i++) {
+                        TransactionHistory history = Parser.getTransactionHistory(response.body().get(i));
+                        if (history != null) transactionHistory.add(history);
+                    }
+                }
+                update();
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<ProposalHistory>> call, Throwable t) {
+                update();
+            }
+        });
+    }
+
+    private void getTransactionHistoryDelegate() {
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getDelegationHistory(address).enqueue(new Callback<ArrayList<DefaultHistory>>() {
+            @Override
+            public void onResponse(Call<ArrayList<DefaultHistory>> call, Response<ArrayList<DefaultHistory>> response) {
+                if (response.code() == 200 && response.body() != null) {
+                    for (int i = 0; response.body().size() > i; i++) {
+                        TransactionHistory history = Parser.getTransactionHistory(response.body().get(i));
+                        if (history != null) transactionHistory.add(history);
+                    }
+                } else {
+                    String err = "";
+                    try {
+                        if (response.errorBody() != null) err = response.errorBody().string();
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                    }
+
+                    emptyTextview.setText(LocaleController.getString("internalServerError", R.string.internalServerError) + "\n" + err);
+                }
+                update();
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<DefaultHistory>> call, Throwable t) {
+                update();
+            }
+        });
+    }
+
+    private void update() {
+        if (transactionHistory != null) Collections.sort(transactionHistory, comparator);
+        if (adapter != null) adapter.notifyDataSetChanged();
+        loadingLayout.setVisibility(View.GONE);
+        if (transactionHistory.size() > 0) {
+            contentsLayout.setVisibility(View.VISIBLE);
+            emptyTextview.setVisibility(View.GONE);
+        } else {
+            contentsLayout.setVisibility(View.GONE);
+            emptyTextview.setVisibility(View.VISIBLE);
+        }
+    }
+
+    private void showTransactionDetailActivity(String hash) {
+        if (getContext() == null) return;
+        Intent intent = new Intent(getContext(), TransactionDetailActivity.class);
+        intent.putExtra("address", address);
+        intent.putExtra("hash", hash);
+        getContext().startActivity(intent);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/AccountView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/AccountView.java
new file mode 100644
index 000000000..a1f2e5057
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/AccountView.java
@@ -0,0 +1,88 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.model.AccountInfo;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class AccountView extends LinearLayout {
+
+    public static final int BUTTON_SETTING_WALLET = 1;
+    public static final int BUTTON_CHANGE_CHAIN = 2;
+
+    private TextView accountNameTextview;
+    private ImageView accountArrowImgview;
+
+    public AccountView(Context context, OnClickListener onClickListener) {
+        super(context);
+
+        setGravity(Gravity.CENTER);
+        setOrientation(LinearLayout.HORIZONTAL);
+
+        setPadding(0, AndroidUtilities.dp(16), 0, AndroidUtilities.dp(20));
+
+        LinearLayout accountLayout = new LinearLayout(context);
+        accountLayout.setId(AccountView.BUTTON_SETTING_WALLET);
+        accountLayout.setOnClickListener(onClickListener);
+        accountLayout.setOrientation(HORIZONTAL);
+        accountLayout.setGravity(Gravity.CENTER_VERTICAL);
+        addView(accountLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f, 0, 0, 6, 0));
+
+        accountNameTextview = new TextView(context);
+        accountNameTextview.setTextColor(ActivityCompat.getColor(context, R.color.violet_blue));
+        accountNameTextview.setTextSize(0, AndroidUtilities.dp(20));
+        accountNameTextview.setGravity(Gravity.CENTER);
+        accountNameTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        accountLayout.addView(accountNameTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 5, 0));
+
+        accountArrowImgview = new ImageView(context);
+        accountArrowImgview.setScaleType(ImageView.ScaleType.FIT_XY);
+        accountArrowImgview.setImageResource(R.drawable.ic_down_arrow);
+        accountLayout.addView(accountArrowImgview, LayoutHelper.createLinear(18, 18));
+        accountArrowImgview.setVisibility(INVISIBLE);
+
+        LinearLayout chainIdLayout = new LinearLayout(context);
+        chainIdLayout.setId(AccountView.BUTTON_CHANGE_CHAIN);
+        chainIdLayout.setOnClickListener(onClickListener);
+        chainIdLayout.setOrientation(HORIZONTAL);
+        chainIdLayout.setGravity(Gravity.CENTER);
+        chainIdLayout.setBackgroundResource(R.drawable.bg_card_white_radius12);
+        chainIdLayout.setPadding(AndroidUtilities.dp(10), AndroidUtilities.dp(6), AndroidUtilities.dp(10), AndroidUtilities.dp(6));
+        addView(chainIdLayout, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        TextView chainTextview = new TextView(context);
+        chainTextview.setTextColor(ActivityCompat.getColor(context, R.color.medium_slate_blue));
+        chainTextview.setTextSize(0, AndroidUtilities.dp(10));
+        chainTextview.setText(Blockchain.getInstance().getChainId());
+        chainIdLayout.addView(chainTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 9, 0));
+
+        ImageView chainIdArrowImgview = new ImageView(context);
+        chainIdArrowImgview.setScaleType(ImageView.ScaleType.FIT_XY);
+        chainIdArrowImgview.setImageResource(R.drawable.ic_arrow_right_blue);
+        chainIdLayout.addView(chainIdArrowImgview, LayoutHelper.createLinear(3, 6));
+    }
+
+    public void update(AccountInfo data) {
+        if (accountNameTextview == null) return;
+        if (data == null) {
+            accountArrowImgview.setVisibility(INVISIBLE);
+            accountNameTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.manatee));
+            accountNameTextview.setText("(NO WALLET)");
+        } else {
+            accountArrowImgview.setVisibility(VISIBLE);
+            accountNameTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.violet_blue));
+            accountNameTextview.setText(data.getName());
+        }
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/AmountFormView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/AmountFormView.java
new file mode 100644
index 000000000..ba573e302
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/AmountFormView.java
@@ -0,0 +1,166 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.support.v7.widget.CardView;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.Button;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.component.AmountEditText;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.utils.NumberFormatter;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.math.BigDecimal;
+
+public class AmountFormView extends LinearLayout {
+
+    private boolean isEditable;
+    private String plusAmounts[] = {"0.01", "0.1", "1", "10", "100"};
+
+    private CardView availableCardView;
+    private TextView availableBalanceTextview;
+    private AmountEditText editText;
+
+    private Button plusButtons[];
+
+    public AmountFormView(Context context, boolean isEditable, String title, String desc, Coin availableCoin, String defaultAmount) {
+        super(context);
+
+        this.isEditable = isEditable;
+
+        setOrientation(VERTICAL);
+        setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(10));
+        setClipToPadding(false);
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(32));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleTextview.setText(title);
+        addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        TextView descTextview = new TextView(context);
+        descTextview.setTextColor(ActivityCompat.getColor(context, R.color.payneGrey));
+        descTextview.setTextSize(0, AndroidUtilities.dp(14));
+        descTextview.setText(desc);
+        addView(descTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 32));
+
+        availableCardView = new CardView(context);
+        availableCardView.setBackgroundResource(R.drawable.bg_card_white);
+        availableCardView.setUseCompatPadding(true);
+        availableCardView.setRadius(AndroidUtilities.dp(8));
+        availableCardView.setCardElevation(UiUtil.getDefaultElevation());
+
+        addView(availableCardView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 20));
+
+        LinearLayout availableLayout = new LinearLayout(context);
+        availableLayout.setOrientation(HORIZONTAL);
+        availableLayout.setGravity(Gravity.CENTER_VERTICAL);
+        availableLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(14), AndroidUtilities.dp(20), AndroidUtilities.dp(14));
+        availableCardView.addView(availableLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        TextView availableTitleTextview = new TextView(context);
+        availableTitleTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        availableTitleTextview.setTextSize(0, AndroidUtilities.dp(16));
+        availableTitleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        availableTitleTextview.setText(LocaleController.getString("available", R.string.available));
+        availableLayout.addView(availableTitleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        availableBalanceTextview = new TextView(context);
+        availableBalanceTextview.setTextColor(ActivityCompat.getColor(context, R.color.medium_slate_blue));
+        availableBalanceTextview.setTextSize(0, AndroidUtilities.dp(16));
+        availableBalanceTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        availableBalanceTextview.setGravity(Gravity.RIGHT);
+        availableLayout.addView(availableBalanceTextview, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.f));
+
+        editText = new AmountEditText(context, isEditable, defaultAmount, null);
+        addView(editText, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        LinearLayout plusButtonLayout = new LinearLayout(context);
+        plusButtonLayout.setOrientation(HORIZONTAL);
+        addView(plusButtonLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        int rightMargin = 10;
+        plusButtons = new Button[plusAmounts.length];
+        for (int i = 0; plusButtons.length > i; i++) {
+            plusButtons[i] = new Button(context);
+            plusButtons[i].setId(i);
+            plusButtons[i].setBackgroundResource(R.drawable.btn_amount_plus);
+            plusButtons[i].setTextColor(ActivityCompat.getColor(context, R.color.medium_slate_blue));
+            plusButtons[i].setTextSize(0, AndroidUtilities.dp(12));
+            plusButtons[i].setText("+" + plusAmounts[i]);
+            plusButtons[i].setPadding(0, 0, 0, 0);
+            plusButtons[i].setOnClickListener(onClickPlusAmountListener);
+
+            if (i == plusButtons.length - 1) rightMargin = 0;
+            plusButtonLayout.addView(plusButtons[i], LayoutHelper.createLinear(0, 24, 1.0f, 0, 0, rightMargin, 0));
+        }
+
+        update(availableCoin);
+    }
+
+    public void update(Coin coin) {
+        if (availableBalanceTextview == null || coin == null) return;
+        availableBalanceTextview.setText(NumberFormatter.getNumber(coin.getAmount()) + " " + coin.getDenomDisplayName());
+    }
+
+    public void showError(String msg) {
+        if (editText != null) editText.showError(msg);
+    }
+
+    public String getValue() {
+        if (editText == null) {
+            return "";
+        } else {
+            return editText.getText();
+        }
+    }
+
+    public String getValueOrigin() {
+        if (editText == null) {
+            return "";
+        } else {
+            return editText.getTextOrigin();
+        }
+    }
+
+    public void setFocus() {
+        if (editText != null) editText.setFocus();
+    }
+
+    public void clear() {
+        if (editText != null) editText.clear();
+    }
+
+    private OnClickListener onClickPlusAmountListener = new OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            if (!isEditable || editText == null || plusButtons == null || plusButtons[0] == null)
+                return;
+
+            BigDecimal amount;
+            try {
+                if (editText.getTextOrigin().length() == 0) {
+                    amount = new BigDecimal("0");
+                } else {
+                    amount = new BigDecimal(editText.getTextOrigin());
+                }
+
+                amount = amount.add(new BigDecimal(plusAmounts[v.getId()]));
+                editText.setText(String.format("%.4f", amount));
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/AmountWithTokenFormView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/AmountWithTokenFormView.java
new file mode 100644
index 000000000..4028f45fa
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/AmountWithTokenFormView.java
@@ -0,0 +1,163 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Rect;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.view.View;
+import android.widget.Button;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.component.AmountEditText;
+import com.lunamint.wallet.model.Coin;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.math.BigDecimal;
+
+public class AmountWithTokenFormView extends LinearLayout {
+
+    private boolean isEditable;
+    private String plusAmounts[] = {"0.01", "0.1", "1", "10", "100"};
+
+    private AmountEditText editText;
+    private SendCoinTokenCardView sendCoinTokenCardView;
+
+    private Button plusButtons[];
+
+    public AmountWithTokenFormView(Context context, boolean isEditable, Coin coin, String defaultAmount, OnClickListener onClickListener) {
+        super(context);
+
+        this.isEditable = isEditable;
+
+        setOrientation(VERTICAL);
+        setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(10));
+        setClipToPadding(false);
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(32));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleTextview.setText(LocaleController.getString("amount", R.string.amount));
+        addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        TextView descTextview = new TextView(context);
+        descTextview.setTextColor(ActivityCompat.getColor(context, R.color.payneGrey));
+        descTextview.setTextSize(0, AndroidUtilities.dp(14));
+        descTextview.setText(LocaleController.getString("enterAmount", R.string.enterAmount));
+        addView(descTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 32));
+
+        TextView selectTokenTextview = new TextView(context);
+        selectTokenTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        selectTokenTextview.setTextSize(0, AndroidUtilities.dp(16));
+        selectTokenTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        selectTokenTextview.setText(LocaleController.getString("selectToken", R.string.selectToken));
+        addView(selectTokenTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+
+        sendCoinTokenCardView = new SendCoinTokenCardView(context, coin, onClickListener);
+        addView(sendCoinTokenCardView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 20));
+
+        TextView amountTextview = new TextView(context);
+        amountTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        amountTextview.setTextSize(0, AndroidUtilities.dp(16));
+        amountTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        amountTextview.setText(LocaleController.getString("amount", R.string.amount));
+        addView(amountTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+
+        editText = new AmountEditText(context, isEditable, defaultAmount, null);
+        addView(editText, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        LinearLayout plusButtonLayout = new LinearLayout(context);
+        plusButtonLayout.setOrientation(HORIZONTAL);
+        addView(plusButtonLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        int rightMargin = 10;
+        plusButtons = new Button[plusAmounts.length];
+        for (int i = 0; plusButtons.length > i; i++) {
+            plusButtons[i] = new Button(context);
+            plusButtons[i].setId(i);
+            plusButtons[i].setBackgroundResource(R.drawable.btn_amount_plus);
+            plusButtons[i].setTextColor(ActivityCompat.getColor(context, R.color.medium_slate_blue));
+            plusButtons[i].setTextSize(0, AndroidUtilities.dp(12));
+            plusButtons[i].setText("+" + plusAmounts[i]);
+            plusButtons[i].setPadding(0, 0, 0, 0);
+            plusButtons[i].setOnClickListener(onClickPlusAmountListener);
+
+            if (i == plusButtons.length - 1) rightMargin = 0;
+            plusButtonLayout.addView(plusButtons[i], LayoutHelper.createLinear(0, 24, 1.0f, 0, 0, rightMargin, 0));
+        }
+    }
+
+    public void showError(String msg) {
+        if (editText != null) editText.showError(msg);
+    }
+
+    public String getValue() {
+        if (editText == null) {
+            return "";
+        } else {
+            return editText.getText();
+        }
+    }
+
+    public String getValueOrigin() {
+        if (editText == null) {
+            return "";
+        } else {
+            return editText.getTextOrigin();
+        }
+    }
+
+    public void setFocus() {
+        if (editText != null) editText.setFocus();
+    }
+
+    public void clear() {
+        if (editText != null) editText.clear();
+    }
+
+    public void update(Coin coin) {
+        if (sendCoinTokenCardView != null) sendCoinTokenCardView.update(coin);
+    }
+
+    public int getCardPositionY() {
+        if (sendCoinTokenCardView == null) return 0;
+        int y = 0;
+        try {
+            Rect offsetViewBounds = new Rect();
+            sendCoinTokenCardView.getDrawingRect(offsetViewBounds);
+            offsetDescendantRectToMyCoords(sendCoinTokenCardView, offsetViewBounds);
+            y = offsetViewBounds.top - AndroidUtilities.dp(10);
+        } catch (Exception e) {
+            // ignore
+        }
+
+        return y;
+    }
+
+    private OnClickListener onClickPlusAmountListener = new OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            if (!isEditable || editText == null || plusButtons == null || plusButtons[0] == null)
+                return;
+
+            BigDecimal amount;
+            try {
+                if (editText.getTextOrigin().length() == 0) {
+                    amount = new BigDecimal("0");
+                } else {
+                    amount = new BigDecimal(editText.getTextOrigin());
+                }
+
+                amount = amount.add(new BigDecimal(plusAmounts[v.getId()]));
+                editText.setText(String.format("%.4f", amount));
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/BalanceCardView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/BalanceCardView.java
new file mode 100644
index 000000000..fb8fb842c
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/BalanceCardView.java
@@ -0,0 +1,131 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.widget.Button;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.model.AccountInfo;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.utils.NumberFormatter;
+import com.lunamint.wallet.utils.Parser;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class BalanceCardView extends LinearLayout {
+
+    private TextView addressTextview;
+    private TextView amountTextviews[] = new TextView[2];
+    private TextView denomTextviews[] = new TextView[2];
+
+    public BalanceCardView(Context context, OnClickListener onClickListener) {
+        super(context);
+
+        LinearLayout mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.setGravity(Gravity.CENTER_HORIZONTAL);
+        mainLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(8), AndroidUtilities.dp(20), AndroidUtilities.dp(8));
+        addView(mainLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        LinearLayout addressLayout = new LinearLayout(context);
+        addressLayout.setOrientation(LinearLayout.HORIZONTAL);
+        addressLayout.setGravity(Gravity.CENTER_VERTICAL);
+        addressLayout.setId(MainCardView.BUTTON_ACTION_ADDRESS);
+        addressLayout.setBackgroundResource(R.drawable.bg_grey_radius12_alpha11);
+        addressLayout.setOnClickListener(onClickListener);
+        mainLayout.addView(addressLayout, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 16, 0, 16, 4));
+
+        addressTextview = new TextView(context);
+        addressTextview.setTextColor(ActivityCompat.getColor(context, R.color.white));
+        addressTextview.setPadding(0, AndroidUtilities.dp(6), 0, AndroidUtilities.dp(6));
+        addressTextview.setTextSize(0, AndroidUtilities.dp(12));
+        addressLayout.addView(addressTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 16, 0, 10, 0));
+
+        ImageView copyImgview = new ImageView(context);
+        copyImgview.setScaleType(ImageView.ScaleType.FIT_XY);
+        copyImgview.setImageResource(R.drawable.ic_copy);
+        addressLayout.addView(copyImgview, LayoutHelper.createLinear(8, 9, 0, 0, 16, 0));
+
+
+        int balanceTitles[] = {R.string.amount, R.string.staking};
+        for (int i = 0; balanceTitles.length > i; i++) {
+            LinearLayout balanceLayout = new LinearLayout(context);
+            balanceLayout.setOrientation(LinearLayout.HORIZONTAL);
+            balanceLayout.setGravity(Gravity.CENTER_VERTICAL);
+            balanceLayout.setPadding(0, AndroidUtilities.dp(10), 0, AndroidUtilities.dp(10));
+            mainLayout.addView(balanceLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+            TextView titleTextview = new TextView(context);
+            titleTextview.setText(context.getString(balanceTitles[i]));
+            titleTextview.setTextSize(0, AndroidUtilities.dp(12));
+            titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.columbia_blue));
+            balanceLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 10, 0));
+
+            LinearLayout amountLayout = new LinearLayout(context);
+            amountLayout.setOrientation(LinearLayout.VERTICAL);
+            amountLayout.setGravity(Gravity.RIGHT);
+            balanceLayout.addView(amountLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
+
+            amountTextviews[i] = new TextView(context);
+            amountTextviews[i].setTextSize(0, AndroidUtilities.dp(24));
+            amountTextviews[i].setTextColor(ActivityCompat.getColor(context, R.color.white));
+            amountTextviews[i].setTypeface(Typeface.DEFAULT_BOLD);
+            amountTextviews[i].setPadding(0, 0, 0, 0);
+            amountLayout.addView(amountTextviews[i], LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+            denomTextviews[i] = new TextView(context);
+            denomTextviews[i].setTextSize(0, AndroidUtilities.dp(12));
+            denomTextviews[i].setTextColor(ActivityCompat.getColor(context, R.color.languid_lavender));
+            denomTextviews[i].setPadding(0, 0, 0, 0);
+            amountLayout.addView(denomTextviews[i], LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, -6, 0, 0));
+
+            if (i == 0) {
+                ImageView line = new ImageView(context);
+                line.setBackgroundColor(0x1AE4E9FE);
+                mainLayout.addView(line, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 1));
+            }
+        }
+
+        Button sendButton = new Button(context);
+        sendButton.setId(MainCardView.BUTTON_SEND);
+        sendButton.setGravity(Gravity.CENTER);
+        sendButton.setOnClickListener(onClickListener);
+        sendButton.setBackgroundResource(R.drawable.btn_radius24_alpha20_black);
+        sendButton.setTextSize(0, AndroidUtilities.dp(16));
+        sendButton.setTypeface(Typeface.DEFAULT_BOLD);
+        sendButton.setTextColor(ActivityCompat.getColor(context, R.color.white));
+        sendButton.setText(LocaleController.getString("send", R.string.send));
+        mainLayout.addView(sendButton, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 48, 0, 4, 0, 0));
+    }
+
+    public void updateBalance(AccountInfo data, Coin availableCoin) {
+        if (addressTextview == null || data == null) return;
+        addressTextview.setText(Parser.getShotAddressForDisplay(data.getAddress()));
+
+        if (availableCoin != null) {
+            amountTextviews[0].setText(NumberFormatter.getNumber(availableCoin.getAmount()));
+            denomTextviews[0].setText(availableCoin.getDenomDisplayName());
+        } else {
+            amountTextviews[0].setText("0");
+            denomTextviews[0].setText(Blockchain.getInstance().getReserveDisplayName());
+        }
+    }
+
+    public void updateStaking(Coin stakingCoin) {
+        if (stakingCoin != null) {
+            amountTextviews[1].setText(NumberFormatter.getNumber(stakingCoin.getAmount()));
+            denomTextviews[1].setText(stakingCoin.getDenomDisplayName());
+        } else {
+            amountTextviews[1].setText("0");
+            denomTextviews[1].setText(Blockchain.getInstance().getReserveDisplayName());
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/ClaimRewardCardView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/ClaimRewardCardView.java
new file mode 100644
index 000000000..920b3a2ec
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/ClaimRewardCardView.java
@@ -0,0 +1,127 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.animation.ValueAnimator;
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.support.v7.widget.CardView;
+import android.view.Gravity;
+import android.widget.Button;
+import android.widget.LinearLayout;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.utils.NumberFormatter;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class ClaimRewardCardView extends CardView {
+
+    private LinearLayout loadingLayout;
+    private LinearLayout mainLayout;
+    private TextView amountTextview;
+    private TextView denomTextview;
+
+    public ClaimRewardCardView(Context context, OnClickListener onClickListener) {
+        super(context);
+
+        setBackgroundResource(R.drawable.bg_card_blue);
+        setUseCompatPadding(true);
+        setRadius(AndroidUtilities.dp(12));
+        setCardElevation(UiUtil.getDefaultElevation());
+
+        loadingLayout = new LinearLayout(context);
+        loadingLayout.setGravity(Gravity.CENTER);
+        addView(loadingLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        ProgressBar progressBar = new ProgressBar(context);
+        loadingLayout.addView(progressBar);
+
+        mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(10));
+        addView(mainLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        mainLayout.setVisibility(INVISIBLE);
+
+        LinearLayout infoLayout = new LinearLayout(context);
+        infoLayout.setOrientation(LinearLayout.HORIZONTAL);
+        infoLayout.setGravity(Gravity.CENTER_VERTICAL);
+        infoLayout.setPadding(0, AndroidUtilities.dp(8), 0, AndroidUtilities.dp(8));
+        mainLayout.addView(infoLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextSize(0, AndroidUtilities.dp(12));
+
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.columbia_blue));
+        titleTextview.setText(LocaleController.getString("reward", R.string.reward));
+        infoLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 20, 0));
+
+        LinearLayout amountLayout = new LinearLayout(context);
+        amountLayout.setOrientation(LinearLayout.VERTICAL);
+        amountLayout.setGravity(Gravity.RIGHT);
+        infoLayout.addView(amountLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.f));
+
+        amountTextview = new TextView(context);
+        amountTextview.setTextSize(0, AndroidUtilities.dp(24));
+        amountTextview.setTextColor(ActivityCompat.getColor(context, R.color.white));
+        amountTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        amountLayout.addView(amountTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        denomTextview = new TextView(context);
+        denomTextview.setTextSize(0, AndroidUtilities.dp(12));
+        denomTextview.setTextColor(ActivityCompat.getColor(context, R.color.languid_lavender));
+        amountLayout.addView(denomTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        Button button = new Button(context);
+        button.setGravity(Gravity.CENTER);
+        button.setOnClickListener(onClickListener);
+        button.setBackgroundResource(R.drawable.btn_radius24_alpha20_black);
+        button.setTextSize(0, AndroidUtilities.dp(16));
+        button.setTypeface(Typeface.DEFAULT_BOLD);
+        button.setTextColor(ActivityCompat.getColor(context, R.color.white));
+        button.setText(LocaleController.getString("claimReward", R.string.claimReward));
+        mainLayout.addView(button, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 48, 0, 10, 0, 0));
+    }
+
+    public void update(Coin coin) {
+        if (coin == null || amountTextview == null) return;
+        mainLayout.setVisibility(VISIBLE);
+        loadingLayout.setVisibility(GONE);
+
+        denomTextview.setText(coin.getDenomDisplayName());
+
+        try {
+            float oldAmount = 0;
+            if (!amountTextview.getText().toString().equals("")) {
+                oldAmount = Float.parseFloat(amountTextview.getText().toString().replaceAll(",", ""));
+            }
+
+            if (oldAmount == 0) {
+                amountTextview.setText(NumberFormatter.getNumber(coin.getAmount()));
+                return;
+            }
+
+            float newAmount = Float.parseFloat(coin.getAmount());
+
+            if (oldAmount == newAmount) return;
+
+            ValueAnimator valueAnimator = ValueAnimator.ofFloat(oldAmount, newAmount);
+            valueAnimator.setDuration(800);
+            valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
+                @Override
+                public void onAnimationUpdate(ValueAnimator animation) {
+                    amountTextview.setText(NumberFormatter.getNumberWithFixedDecimal(animation.getAnimatedValue().toString()));
+                }
+            });
+            valueAnimator.start();
+        } catch (Exception e) {
+            e.printStackTrace();
+            amountTextview.setText(NumberFormatter.getNumber(coin.getAmount()));
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/CosmosToolsView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/CosmosToolsView.java
new file mode 100644
index 000000000..645b15fe6
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/CosmosToolsView.java
@@ -0,0 +1,172 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.content.Intent;
+import android.support.v4.app.ActivityCompat;
+import android.support.v7.widget.CardView;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.GovernanceActivity;
+import com.lunamint.lunagram.ui.SettingsActivity;
+import com.lunamint.lunagram.ui.StakingActivity;
+import com.lunamint.lunagram.ui.TransactionHistoryActivity;
+import com.lunamint.wallet.model.AccountInfo;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class CosmosToolsView extends CardView {
+
+    private static final int BUTTON_STAKE = 0;
+    private static final int BUTTON_VOTE = 1;
+    private static final int BUTTON_HISTORY = 2;
+    private static final int BUTTON_SETTINGS = 3;
+
+    private boolean isEnabled = false;
+
+    private int toolIcons[] = {R.drawable.ic_cosmos_tools_stake, R.drawable.ic_cosmos_tools_vote, R.drawable.ic_cosmos_tools_history, R.drawable.ic_cosmos_tools_setting};
+    private int toolDisabledIcons[] = {R.drawable.ic_cosmos_tools_stake_disabled, R.drawable.ic_cosmos_tools_vote_disabled, R.drawable.ic_cosmos_tools_history_disabled, R.drawable.ic_cosmos_tools_setting_disabled};
+
+    private AccountInfo accountInfo;
+
+    private ImageView[] toolIconImageviews;
+    private TextView[] toolTextviews;
+
+    public CosmosToolsView(Context context) {
+        super(context);
+
+        setBackgroundResource(R.drawable.bg_card_white_radius12);
+        setUseCompatPadding(true);
+        setRadius(AndroidUtilities.dp(12));
+        setCardElevation(UiUtil.getDefaultElevation());
+
+        LinearLayout mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.HORIZONTAL);
+        mainLayout.setGravity(Gravity.CENTER_HORIZONTAL);
+        mainLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(10));
+        addView(mainLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        String toolNames[] = {LocaleController.getString("stake", R.string.stake), LocaleController.getString("vote", R.string.vote), LocaleController.getString("history", R.string.history), LocaleController.getString("settings", R.string.settings)};
+        toolIconImageviews = new ImageView[toolNames.length];
+        toolTextviews = new TextView[toolNames.length];
+        for (int i = 0; toolNames.length > i; i++) {
+            LinearLayout toolButton = new LinearLayout(context);
+            toolButton.setOrientation(LinearLayout.VERTICAL);
+            toolButton.setGravity(Gravity.CENTER_HORIZONTAL);
+            toolButton.setId(i);
+            toolButton.setOnClickListener(onClickToolListener);
+            mainLayout.addView(toolButton, LayoutHelper.createLinear(60, LayoutHelper.WRAP_CONTENT));
+
+            toolIconImageviews[i] = new ImageView(context);
+            toolIconImageviews[i].setScaleType(ImageView.ScaleType.FIT_XY);
+            toolIconImageviews[i].setImageResource(toolDisabledIcons[i]);
+            toolButton.addView(toolIconImageviews[i], LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+            toolTextviews[i] = new TextView(context);
+            toolTextviews[i].setText(toolNames[i]);
+            toolTextviews[i].setTextColor(ActivityCompat.getColor(context, R.color.manatee));
+            toolTextviews[i].setTextSize(0, AndroidUtilities.dp(14));
+            toolTextviews[i].setGravity(Gravity.CENTER);
+            toolButton.addView(toolTextviews[i], LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+            if (i < toolNames.length - 1) {
+                LinearLayout space = new LinearLayout(context);
+                mainLayout.addView(space, LayoutHelper.createLinear(0, 48, 1.0f));
+            }
+        }
+    }
+
+    private View.OnClickListener onClickToolListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            switch (v.getId()) {
+                case CosmosToolsView.BUTTON_STAKE:
+                    if (!isEnabled) return;
+                    showStakingActivity();
+                    break;
+                case CosmosToolsView.BUTTON_VOTE:
+                    if (!isEnabled) return;
+                    showGovernanceActivity();
+                    break;
+                case CosmosToolsView.BUTTON_HISTORY:
+                    if (!isEnabled) return;
+                    showTransactionHistoryActivity();
+                    break;
+                case CosmosToolsView.BUTTON_SETTINGS:
+                    if (accountInfo != null) showSettingsActivity();
+                    break;
+                default:
+            }
+        }
+    };
+
+    private void showStakingActivity() {
+        if (accountInfo == null || accountInfo.getAddress() == null) {
+            Toast.makeText(getContext(), LocaleController.getString("noSearchAddressAlert", R.string.noSearchAddressAlert), Toast.LENGTH_LONG).show();
+        } else {
+            Intent intent = new Intent(getContext(), StakingActivity.class);
+            intent.putExtra("accountName", accountInfo.getName());
+            intent.putExtra("address", accountInfo.getAddress());
+            getContext().startActivity(intent);
+        }
+    }
+
+    private void showGovernanceActivity() {
+        Intent intent = new Intent(getContext(), GovernanceActivity.class);
+        intent.putExtra("accountName", accountInfo.getName());
+        intent.putExtra("address", accountInfo.getAddress());
+        getContext().startActivity(intent);
+    }
+
+    private void showSettingsActivity() {
+        Intent intent = new Intent(getContext(), SettingsActivity.class);
+        intent.putExtra("accountName", accountInfo.getName());
+        getContext().startActivity(intent);
+    }
+
+    private void showTransactionHistoryActivity() {
+        if (accountInfo == null || accountInfo.getAddress() == null) {
+            Toast.makeText(getContext(), LocaleController.getString("noSearchAddressAlert", R.string.noSearchAddressAlert), Toast.LENGTH_LONG).show();
+        } else {
+            Intent intent = new Intent(getContext(), TransactionHistoryActivity.class);
+            intent.putExtra("address", accountInfo.getAddress());
+            intent.putExtra("startType", TransactionHistoryActivity.TYPE_TRANSFER);
+            getContext().startActivity(intent);
+        }
+    }
+
+    public void setEnable(boolean isEnabled, AccountInfo accountInfo) {
+        this.isEnabled = isEnabled;
+        this.accountInfo = accountInfo;
+        update();
+    }
+
+    private void update() {
+        if (toolIconImageviews == null || toolIconImageviews.length == 0 || toolIconImageviews[0] == null)
+            return;
+        for (int i = 0; toolIconImageviews.length > i; i++) {
+            if (isEnabled) {
+                toolIconImageviews[i].setImageResource(toolIcons[i]);
+                toolTextviews[i].setTextColor(ActivityCompat.getColor(getContext(), R.color.charcoal));
+            } else {
+                if (accountInfo != null && i == 3) {
+                    toolIconImageviews[i].setImageResource(toolIcons[i]);
+                    toolTextviews[i].setTextColor(ActivityCompat.getColor(getContext(), R.color.charcoal));
+
+                } else {
+                    toolIconImageviews[i].setImageResource(toolDisabledIcons[i]);
+                    toolTextviews[i].setTextColor(ActivityCompat.getColor(getContext(), R.color.manatee));
+                }
+
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/CreateWalletCardView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/CreateWalletCardView.java
new file mode 100644
index 000000000..fae78f10a
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/CreateWalletCardView.java
@@ -0,0 +1,66 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.support.v4.app.ActivityCompat;
+import android.support.v7.widget.CardView;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.CreateAccountActivity;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class CreateWalletCardView extends CardView {
+
+    public CreateWalletCardView(Context context, int type, OnClickListener onClickListener) {
+        super(context);
+
+        setId(type);
+        setOnClickListener(onClickListener);
+
+        setBackgroundResource(R.drawable.bg_card_white_radius12);
+        setUseCompatPadding(true);
+        setRadius(AndroidUtilities.dp(12));
+        setCardElevation(UiUtil.getDefaultElevation());
+
+        LinearLayout mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.HORIZONTAL);
+        mainLayout.setGravity(Gravity.CENTER_VERTICAL);
+        mainLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(8), AndroidUtilities.dp(20), AndroidUtilities.dp(8));
+        addView(mainLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        ImageView icImageview = new ImageView(context);
+        icImageview.setScaleType(ImageView.ScaleType.FIT_XY);
+        mainLayout.addView(icImageview, LayoutHelper.createLinear(40, 40, 0, 0, 18, 0));
+
+        LinearLayout textLayout = new LinearLayout(context);
+        textLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.addView(textLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.onyx));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(16));
+        textLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        TextView descTextview = new TextView(context);
+        descTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.languid_lavender));
+        descTextview.setTextSize(0, AndroidUtilities.dp(10));
+        textLayout.addView(descTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        if (type == CreateAccountActivity.TYPE_CREATE_NEW_ACCOUNT) {
+            icImageview.setImageResource(R.drawable.ic_create_wallet);
+            titleTextview.setText(LocaleController.getString("createWallet", R.string.createWallet));
+            descTextview.setText(LocaleController.getString("generateNewSeed", R.string.generateNewSeed));
+        } else {
+            icImageview.setImageResource(R.drawable.ic_import_wallet);
+            titleTextview.setText(LocaleController.getString("importExistingWallet", R.string.importExistingWallet));
+            descTextview.setText(LocaleController.getString("importWordSeed", R.string.importWordSeed));
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/CreateWalletWarningView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/CreateWalletWarningView.java
new file mode 100644
index 000000000..2328955ee
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/CreateWalletWarningView.java
@@ -0,0 +1,82 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.CreateAccountActivity;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class CreateWalletWarningView extends LinearLayout {
+
+    public CreateWalletWarningView(Context context, int type) {
+        super(context);
+
+        setOrientation(VERTICAL);
+        setGravity(Gravity.CENTER_HORIZONTAL);
+        setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(10));
+        setClipToPadding(false);
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.coral_red));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(32));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleTextview.setText(LocaleController.getString("warning", R.string.warning) + "!");
+        addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 4));
+
+        TextView descTextview = new TextView(context);
+        descTextview.setTextColor(ActivityCompat.getColor(context, R.color.payneGrey));
+        descTextview.setTextSize(0, AndroidUtilities.dp(14));
+        addView(descTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 30));
+
+        ImageView warningImgview0 = new ImageView(context);
+        addView(warningImgview0, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+
+        TextView warningTextview0 = new TextView(context);
+        warningTextview0.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        warningTextview0.setTextSize(0, AndroidUtilities.dp(14));
+        addView(warningTextview0, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 20));
+
+        ImageView arrow = new ImageView(context);
+        arrow.setImageResource(R.drawable.create_account_guide_arrow_down);
+        addView(arrow, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 20));
+
+        ImageView warningImgview1 = new ImageView(context);
+        addView(warningImgview1, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+
+        TextView warningTextview1 = new TextView(context);
+        warningTextview1.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        warningTextview1.setTextSize(0, AndroidUtilities.dp(14));
+        addView(warningTextview1, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 40));
+
+        TextView warningTextview2 = new TextView(context);
+        warningTextview2.setTextColor(ActivityCompat.getColor(context, R.color.red));
+        warningTextview2.setTextSize(0, AndroidUtilities.dp(14));
+        warningTextview2.setGravity(Gravity.CENTER);
+        addView(warningTextview2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 50));
+
+        if (type == CreateAccountActivity.TYPE_CREATE_NEW_ACCOUNT) {
+            descTextview.setText(LocaleController.getString("warningSeed1", R.string.warningSeed1));
+            warningImgview0.setImageResource(R.drawable.create_account_warning1);
+            warningTextview0.setText(LocaleController.getString("createWalletWarning1", R.string.createWalletWarning1));
+            warningImgview1.setImageResource(R.drawable.create_account_warning2);
+            warningTextview1.setText(LocaleController.getString("createWalletWarning2", R.string.createWalletWarning2));
+            warningTextview2.setText(LocaleController.getString("createWalletWarning3", R.string.createWalletWarning3));
+        } else {
+            descTextview.setText(LocaleController.getString("warningSeed2", R.string.warningSeed2));
+            warningImgview0.setImageResource(R.drawable.import_account_warning1);
+            warningTextview0.setText(LocaleController.getString("createWalletWarning1", R.string.importWalletWarning1));
+            warningImgview1.setImageResource(R.drawable.import_account_warning2);
+            warningTextview1.setText(LocaleController.getString("createWalletWarning2", R.string.importWalletWarning2));
+            warningTextview2.setText(LocaleController.getString("createWalletWarning3", R.string.importWalletWarning3));
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/DefaultFormView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/DefaultFormView.java
new file mode 100644
index 000000000..5e9f2ea2c
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/DefaultFormView.java
@@ -0,0 +1,72 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.component.DefaultEditText;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class DefaultFormView extends LinearLayout {
+
+    private DefaultEditText editText;
+
+    public DefaultFormView(Context context, boolean isEditable, boolean isPassword, boolean isVisible, String title, String desc, String text, String hint) {
+        super(context);
+
+        setOrientation(VERTICAL);
+        setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(10));
+        setClipToPadding(false);
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(32));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleTextview.setText(title);
+        addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        TextView descTextview = new TextView(context);
+        descTextview.setTextColor(ActivityCompat.getColor(context, R.color.payneGrey));
+        descTextview.setTextSize(0, AndroidUtilities.dp(14));
+        descTextview.setText(desc);
+        addView(descTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 40));
+
+        editText = new DefaultEditText(context, isEditable, isPassword, isVisible, text, hint);
+        addView(editText, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+    }
+
+    public void showError(String msg) {
+        if (editText != null) editText.showError(msg);
+    }
+
+    public String getValue() {
+        if (editText == null) {
+            return "";
+        } else {
+            return editText.getText();
+        }
+    }
+
+    public void setValue(String value){
+        if (editText != null) editText.setText(value);
+    }
+
+    public void setFocus() {
+        if (editText != null) editText.setFocus();
+    }
+
+    public void clearFocus() {
+        if (editText != null) editText.clearFocus();
+    }
+
+    public void clear() {
+        if (editText != null) editText.clear();
+    }
+
+
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/EmptyAccountCardView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/EmptyAccountCardView.java
new file mode 100644
index 000000000..80a784106
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/EmptyAccountCardView.java
@@ -0,0 +1,43 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class EmptyAccountCardView extends LinearLayout {
+
+    public EmptyAccountCardView(Context context, OnClickListener onClickListener) {
+        super(context);
+
+        setId(MainCardView.BUTTON_CREATE_WALLET);
+        setOnClickListener(onClickListener);
+
+        LinearLayout mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.setGravity(Gravity.CENTER);
+        mainLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(20), AndroidUtilities.dp(20), AndroidUtilities.dp(20));
+        addView(mainLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 200));
+
+        ImageView plusIconImageview = new ImageView(context);
+        plusIconImageview.setScaleType(ImageView.ScaleType.FIT_XY);
+        plusIconImageview.setImageResource(R.drawable.ic_plus);
+        mainLayout.addView(plusIconImageview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 28));
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setText(context.getText(R.string.createNewAccount));
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.white));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(16));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleTextview.setGravity(Gravity.CENTER);
+        mainLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/FeeCardView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/FeeCardView.java
new file mode 100644
index 000000000..a39a45175
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/FeeCardView.java
@@ -0,0 +1,63 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.support.v7.widget.CardView;
+import android.view.Gravity;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class FeeCardView extends CardView {
+
+    private LinearLayout mainLayout;
+    private TextView titleTextview;
+    private TextView feeTextview;
+
+    public FeeCardView(Context context, boolean isSelected, String title, String fee, String denom) {
+        super(context);
+
+        setUseCompatPadding(true);
+        setRadius(AndroidUtilities.dp(12));
+        setCardElevation(UiUtil.getDefaultElevation());
+
+        mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.setGravity(Gravity.CENTER);
+        addView(mainLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 72));
+
+        titleTextview = new TextView(context);
+        titleTextview.setTextSize(0, AndroidUtilities.dp(16));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleTextview.setText(title);
+        mainLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 4));
+
+        feeTextview = new TextView(context);
+        feeTextview.setTextSize(0, AndroidUtilities.dp(12));
+        feeTextview.setText(fee + " " + denom);
+        mainLayout.addView(feeTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        update(isSelected);
+    }
+
+    public void update(boolean isSelected) {
+        if (mainLayout == null) return;
+        if (isSelected) {
+            setBackgroundResource(R.drawable.bg_card_blue);
+            titleTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.white));
+            feeTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.white));
+        } else {
+            setBackgroundResource(R.drawable.bg_card_white);
+            titleTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.manatee));
+            feeTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.manatee));
+        }
+
+        mainLayout.setPadding(AndroidUtilities.dp(15), 0, AndroidUtilities.dp(15), 0);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/FeeFormView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/FeeFormView.java
new file mode 100644
index 000000000..9a47194c6
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/FeeFormView.java
@@ -0,0 +1,153 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.component.AmountEditText;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.utils.BigDecimalUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.math.BigDecimal;
+
+public class FeeFormView extends LinearLayout implements View.OnClickListener {
+
+    private boolean isAdvanced = false;
+
+    private int selected = 1;
+
+    private String feeTitles[] = {"Low", "Average", "High"};
+    private String fees[] = {"0.0005", "0.0050", "0.0075"};
+
+    private LinearLayout feeLayout;
+    private FeeCardView feeCardViews[];
+    private AmountEditText editText;
+    private TextView modeTextview;
+
+    public FeeFormView(Context context) {
+        super(context);
+
+        setOrientation(VERTICAL);
+
+        setClipToPadding(false);
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.charcoal));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(32));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleTextview.setText(LocaleController.getString("transactionFee", R.string.transactionFee));
+        addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 20, 10, 20, 0));
+
+        TextView descTextview = new TextView(context);
+        descTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.payneGrey));
+        descTextview.setTextSize(0, AndroidUtilities.dp(14));
+        descTextview.setText(LocaleController.getString("transactionFeeDesc", R.string.transactionFeeDesc));
+        addView(descTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 20, 0, 20, 24));
+
+        FrameLayout frameLayout = new FrameLayout(context);
+        addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 20));
+
+        feeLayout = new LinearLayout(context);
+        feeLayout.setOrientation(HORIZONTAL);
+        feeLayout.setClipToPadding(false);
+        feeLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(20));
+        frameLayout.addView(feeLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        int rightMargin = 10;
+        feeCardViews = new FeeCardView[fees.length];
+        for (int i = 0; feeCardViews.length > i; i++) {
+            boolean isSelected = (selected == i);
+            feeCardViews[i] = new FeeCardView(context, isSelected, feeTitles[i], fees[i], Blockchain.getInstance().getReserveDisplayName());
+            feeCardViews[i].setId(i);
+            feeCardViews[i].setOnClickListener(this);
+            if (i == feeCardViews.length - 1) rightMargin = 0;
+            feeLayout.addView(feeCardViews[i], LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f, 0, 0, rightMargin, 0));
+        }
+
+        editText = new AmountEditText(context, true, "", null);
+        frameLayout.addView(editText, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 20, 0, 20, 0));
+        editText.setVisibility(GONE);
+
+        LinearLayout modeLayout = new LinearLayout(context);
+        modeLayout.setOrientation(HORIZONTAL);
+        modeLayout.setGravity(Gravity.CENTER_VERTICAL | Gravity.RIGHT);
+        modeLayout.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                changeInputMode();
+            }
+        });
+        addView(modeLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 20, 0, 20, 20));
+
+        modeTextview = new TextView(context);
+        modeTextview.setTextSize(0, AndroidUtilities.dp(16));
+        modeTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.manatee));
+        modeTextview.setText(LocaleController.getString("advanced", R.string.advanced));
+        modeLayout.addView(modeTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 4, 9, 4));
+
+        ImageView arrowImageView = new ImageView(context);
+        arrowImageView.setImageResource(R.drawable.arrow_grey);
+        modeLayout.addView(arrowImageView, LayoutHelper.createLinear(7, 11));
+
+    }
+
+    public void showError(String msg) {
+        if (isAdvanced && editText != null) {
+            editText.showError(msg);
+        } else {
+            Toast.makeText(getContext(), msg, Toast.LENGTH_LONG).show();
+        }
+    }
+
+    public String getValue() {
+        if (isAdvanced) {
+            return editText.getText();
+        } else {
+            return BigDecimalUtil.getNumberOrigin(fees[selected], "0");
+        }
+    }
+
+    public String getValueOrigin() {
+        if (isAdvanced) {
+            return editText.getTextOrigin();
+        } else {
+            BigDecimal fee = new BigDecimal(fees[selected]);
+            return String.format("%.4f", fee);
+        }
+    }
+
+    private void changeInputMode() {
+        if (isAdvanced) {
+            isAdvanced = false;
+            editText.setVisibility(GONE);
+            feeLayout.setVisibility(VISIBLE);
+            modeTextview.setText(LocaleController.getString("advanced", R.string.advanced));
+        } else {
+            isAdvanced = true;
+            editText.setVisibility(VISIBLE);
+            feeLayout.setVisibility(GONE);
+            modeTextview.setText(LocaleController.getString("Default", R.string.Default));
+        }
+    }
+
+    @Override
+    public void onClick(View v) {
+        selected = v.getId();
+        for (int i = 0; feeCardViews.length > i; i++) {
+            boolean isSelected = (selected == i);
+            feeCardViews[i].update(isSelected);
+        }
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/MainCardView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/MainCardView.java
new file mode 100644
index 000000000..533627470
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/MainCardView.java
@@ -0,0 +1,82 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.support.v7.widget.CardView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.model.AccountInfo;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class MainCardView extends CardView {
+
+    public static final int BUTTON_UPDATE = 1;
+    public static final int BUTTON_CREATE_WALLET = 2;
+    public static final int BUTTON_SEND = 3;
+    public static final int BUTTON_ACTION_ADDRESS = 4;
+
+    private BalanceCardView balanceCardView;
+    private EmptyAccountCardView emptyAccountCardView;
+    private MainStatusCardView mainStatusCardView;
+
+    public MainCardView(Context context, OnClickListener onClickListener) {
+        super(context);
+
+        setBackgroundResource(R.drawable.bg_card_blue);
+        setUseCompatPadding(true);
+        setRadius(AndroidUtilities.dp(12));
+        setCardElevation(UiUtil.getDefaultElevation());
+
+        balanceCardView = new BalanceCardView(context, onClickListener);
+        emptyAccountCardView = new EmptyAccountCardView(context, onClickListener);
+        mainStatusCardView = new MainStatusCardView(context, onClickListener);
+
+        balanceCardView.setVisibility(GONE);
+        emptyAccountCardView.setVisibility(GONE);
+        mainStatusCardView.setVisibility(VISIBLE);
+
+        addView(balanceCardView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        addView(emptyAccountCardView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        addView(mainStatusCardView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+    }
+
+    public void updateBalance(AccountInfo accountInfo, Coin availableCoin) {
+        if (balanceCardView == null) return;
+        balanceCardView.setVisibility(VISIBLE);
+        emptyAccountCardView.setVisibility(GONE);
+        mainStatusCardView.setVisibility(GONE);
+        balanceCardView.updateBalance(accountInfo, availableCoin);
+    }
+
+    public void updateStaking(Coin stakingCoin){
+        balanceCardView.updateStaking(stakingCoin);
+    }
+
+    public void showEmptyAccountView() {
+        if (balanceCardView == null) return;
+        balanceCardView.setVisibility(GONE);
+        emptyAccountCardView.setVisibility(VISIBLE);
+        mainStatusCardView.setVisibility(GONE);
+    }
+
+    public void showLoading() {
+        if (balanceCardView == null) return;
+        balanceCardView.setVisibility(GONE);
+        emptyAccountCardView.setVisibility(GONE);
+        mainStatusCardView.setVisibility(VISIBLE);
+        mainStatusCardView.showLoading();
+        setBackgroundResource(R.drawable.bg_card_blue);
+    }
+
+    public void showError(String msg) {
+        if (balanceCardView == null) return;
+        balanceCardView.setVisibility(GONE);
+        emptyAccountCardView.setVisibility(GONE);
+        mainStatusCardView.setVisibility(VISIBLE);
+        mainStatusCardView.showError(msg);
+        setBackgroundResource(R.drawable.bg_card_grey);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/MainStatusCardView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/MainStatusCardView.java
new file mode 100644
index 000000000..06ccb5bc2
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/MainStatusCardView.java
@@ -0,0 +1,71 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class MainStatusCardView extends LinearLayout {
+
+    private ProgressBar progressBar;
+    private ImageView iconImageview;
+    private TextView statusTextview;
+
+    public MainStatusCardView(Context context, OnClickListener onClickListener) {
+        super(context);
+
+        setId(MainCardView.BUTTON_UPDATE);
+        setOnClickListener(onClickListener);
+
+        LinearLayout mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.setGravity(Gravity.CENTER);
+        mainLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(20), AndroidUtilities.dp(20), AndroidUtilities.dp(20));
+        addView(mainLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 200));
+
+        progressBar = new ProgressBar(getContext());
+        mainLayout.addView(progressBar, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        iconImageview = new ImageView(context);
+        iconImageview.setScaleType(ImageView.ScaleType.FIT_XY);
+        iconImageview.setImageResource(R.drawable.ic_warnning_white);
+        mainLayout.addView(iconImageview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 28));
+
+        statusTextview = new TextView(context);
+        statusTextview.setTextColor(ActivityCompat.getColor(context, R.color.white));
+        statusTextview.setTextSize(0, AndroidUtilities.dp(16));
+        statusTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        statusTextview.setGravity(Gravity.CENTER);
+        mainLayout.addView(statusTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        iconImageview.setVisibility(GONE);
+        statusTextview.setVisibility(GONE);
+    }
+
+    public void showLoading(){
+        if(progressBar == null) return;
+
+        progressBar.setVisibility(VISIBLE);
+        iconImageview.setVisibility(GONE);
+        statusTextview.setVisibility(GONE);
+
+    }
+
+    public void showError(String msg){
+        if(progressBar == null) return;
+
+        progressBar.setVisibility(GONE);
+        iconImageview.setVisibility(VISIBLE);
+        statusTextview.setVisibility(VISIBLE);
+        statusTextview.setText(msg);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/ProposalDetailView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/ProposalDetailView.java
new file mode 100644
index 000000000..3d3e858be
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/ProposalDetailView.java
@@ -0,0 +1,217 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.os.Build;
+import android.support.v4.app.ActivityCompat;
+import android.support.v7.widget.CardView;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.model.Proposal;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class ProposalDetailView extends RelativeLayout {
+
+    private TextView statusTextview;
+    private TextView proposalIdTextview;
+    private TextView titleTextview;
+    private TextView proposalTypeTextview;
+    private TextView endTimeTextview;
+    private TextView tallyTextviews[] = new TextView[4];
+    private TextView descTextview;
+
+
+    public ProposalDetailView(Context context, Proposal proposal) {
+        super(context);
+
+        setClipToPadding(false);
+        setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(20), AndroidUtilities.dp(20), AndroidUtilities.dp(10));
+
+        CardView cardView = new CardView(context);
+        cardView.setUseCompatPadding(true);
+        cardView.setRadius(AndroidUtilities.dp(8));
+        cardView.setCardElevation(UiUtil.getDefaultElevation());
+        cardView.setBackgroundResource(R.drawable.validator_profile_bg);
+        addView(cardView, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 45, 0, 0));
+
+        LinearLayout mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.setGravity(Gravity.CENTER);
+        mainLayout.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(16), AndroidUtilities.dp(16), AndroidUtilities.dp(16));
+        cardView.addView(mainLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        statusTextview = new TextView(context);
+        statusTextview.setTextSize(0, AndroidUtilities.dp(12));
+        statusTextview.setGravity(Gravity.RIGHT);
+        mainLayout.addView(statusTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+
+        proposalIdTextview = new TextView(context);
+        proposalIdTextview.setTextSize(0, AndroidUtilities.dp(12));
+        proposalIdTextview.setTextColor(ActivityCompat.getColor(context, R.color.columbia_blue));
+        mainLayout.addView(proposalIdTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        titleTextview = new TextView(context);
+        titleTextview.setTextSize(0, AndroidUtilities.dp(24));
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.white));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        mainLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+
+        LinearLayout typeLayout = new LinearLayout(context);
+        typeLayout.setOrientation(LinearLayout.HORIZONTAL);
+        typeLayout.setPadding(0, AndroidUtilities.dp(15), 0, AndroidUtilities.dp(15));
+        mainLayout.addView(typeLayout);
+
+        TextView typeTextview = new TextView(context);
+        typeTextview.setTextSize(0, AndroidUtilities.dp(14));
+        typeTextview.setTextColor(ActivityCompat.getColor(context, R.color.languid_lavender));
+        typeTextview.setText(LocaleController.getString("proposalType", R.string.proposalType));
+        typeLayout.addView(typeTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 10, 0));
+
+        proposalTypeTextview = new TextView(context);
+        proposalTypeTextview.setTextSize(0, AndroidUtilities.dp(14));
+        proposalTypeTextview.setTextColor(ActivityCompat.getColor(context, R.color.languid_lavender));
+        proposalTypeTextview.setGravity(Gravity.RIGHT);
+        typeLayout.addView(proposalTypeTextview, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
+
+        if(!proposal.getProposalStatus().equals("DepositPeriod")){
+            LinearLayout dateLayout = new LinearLayout(context);
+            dateLayout.setOrientation(LinearLayout.HORIZONTAL);
+            dateLayout.setPadding(0, AndroidUtilities.dp(15), 0, AndroidUtilities.dp(15));
+            mainLayout.addView(dateLayout);
+
+            TextView dateTextview = new TextView(context);
+            dateTextview.setTextSize(0, AndroidUtilities.dp(14));
+            dateTextview.setTextColor(ActivityCompat.getColor(context, R.color.languid_lavender));
+            dateTextview.setText(LocaleController.getString("votingEnd", R.string.votingEnd) + " (UTC)");
+            dateLayout.addView(dateTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 10, 0));
+
+            endTimeTextview = new TextView(context);
+            endTimeTextview.setTextSize(0, AndroidUtilities.dp(14));
+            endTimeTextview.setTextColor(ActivityCompat.getColor(context, R.color.languid_lavender));
+            endTimeTextview.setGravity(Gravity.RIGHT);
+            dateLayout.addView(endTimeTextview, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
+        }
+
+        int descMarginTop = 16;
+        if (!proposal.getProposalStatus().equals("VotingPeriod") && !proposal.getProposalStatus().equals("DepositPeriod")) {
+            LinearLayout tallyLinearlayout = new LinearLayout(context);
+            tallyLinearlayout.setOrientation(LinearLayout.HORIZONTAL);
+            tallyLinearlayout.setBackgroundResource(R.drawable.bg_card_blue_opacity20);
+            tallyLinearlayout.setPadding(AndroidUtilities.dp(10), AndroidUtilities.dp(8), AndroidUtilities.dp(10), AndroidUtilities.dp(8));
+            mainLayout.addView(tallyLinearlayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, descMarginTop));
+            descMarginTop = 0;
+
+            int rightMargin = AndroidUtilities.dp(10);
+
+            int titles[] = {R.string.yes, R.string.no, R.string.noWithVeto, R.string.abstain};
+            for (int i = 0; tallyTextviews.length > i; i++) {
+                if (i == tallyTextviews.length - 1) rightMargin = 0;
+                LinearLayout tallyLayout = new LinearLayout(context);
+                tallyLayout.setOrientation(LinearLayout.VERTICAL);
+                tallyLayout.setGravity(Gravity.CENTER);
+                tallyLinearlayout.addView(tallyLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f, 0, 0, rightMargin, 0));
+
+                TextView tallyTitleTextview = new TextView(context);
+                tallyTitleTextview.setTextSize(0, AndroidUtilities.dp(10));
+                tallyTitleTextview.setGravity(Gravity.CENTER);
+                tallyTitleTextview.setTextColor(ActivityCompat.getColor(context, R.color.columbia_blue));
+                tallyTitleTextview.setText(titles[i]);
+                tallyLayout.addView(tallyTitleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+                tallyTextviews[i] = new TextView(context);
+                tallyTextviews[i].setTextSize(0, AndroidUtilities.dp(12));
+                tallyTextviews[i].setTextColor(ActivityCompat.getColor(context, R.color.white));
+                tallyLayout.addView(tallyTextviews[i], LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+            }
+        }
+
+        descTextview = new TextView(context);
+        descTextview.setTextSize(0, AndroidUtilities.dp(14));
+        descTextview.setTextColor(ActivityCompat.getColor(context, R.color.white));
+        mainLayout.addView(descTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, descMarginTop, 0, 0));
+
+        LinearLayout profileImageLayout = new LinearLayout(context);
+        profileImageLayout.setOrientation(LinearLayout.HORIZONTAL);
+        profileImageLayout.setGravity(Gravity.CENTER_HORIZONTAL);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            profileImageLayout.setElevation(AndroidUtilities.dp(20));
+        }
+        addView(profileImageLayout, 0, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        ImageView profileImageview = new ImageView(context);
+        profileImageview.setImageResource(R.drawable.ic_cosmos_tools_vote);
+        profileImageLayout.addView(profileImageview, LayoutHelper.createLinear(64, 64));
+
+        update(proposal);
+    }
+
+    public void update(Proposal data) {
+        if (statusTextview == null) return;
+
+        switch (data.getProposalStatus()) {
+            case "DepositPeriod":
+                statusTextview.setText(LocaleController.getString("pending", R.string.pending));
+                statusTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.mango_tango));
+                break;
+            case "VotingPeriod":
+                statusTextview.setText(LocaleController.getString("active", R.string.active));
+                statusTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.dark_turqouise));
+                break;
+            case "Passed":
+                statusTextview.setText(LocaleController.getString("passed", R.string.passed));
+                statusTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.white));
+                break;
+            case "Rejected":
+                statusTextview.setText(LocaleController.getString("rejected", R.string.rejected));
+                statusTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.coral_red));
+                break;
+        }
+
+        proposalIdTextview.setText(LocaleController.getString("proposal", R.string.proposal) + " #" + data.getProposalId());
+        titleTextview.setText(data.getProposalContent().getProposalDetail().getTitle());
+        proposalTypeTextview.setText(data.getProposalContent().getType());
+        if (endTimeTextview != null) endTimeTextview.setText(data.getVotingEndTime());
+
+        if (!data.getProposalStatus().equals("VotingPeriod") && !data.getProposalStatus().equals("DepositPeriod")) {
+            try {
+                Double yes = Double.parseDouble(data.getFinalTallyResult().getYes());
+                Double no = Double.parseDouble(data.getFinalTallyResult().getNo());
+                Double noWithVeto = Double.parseDouble(data.getFinalTallyResult().getNoWithVeto());
+                Double abstain = Double.parseDouble(data.getFinalTallyResult().getAbstain());
+                Double totalVoted = yes + no + noWithVeto + abstain;
+
+                yes = yes == 0 ? 0 : ((yes / totalVoted) * 100);
+                no = no == 0 ? 0 : ((no / totalVoted) * 100);
+                noWithVeto = noWithVeto == 0 ? 0 : ((noWithVeto / totalVoted) * 100);
+                abstain = abstain == 0 ? 0 : ((abstain / totalVoted) * 100);
+
+                tallyTextviews[0].setText(String.format("%.1f", yes) + "%");
+                tallyTextviews[1].setText(String.format("%.1f", no) + "%");
+                tallyTextviews[2].setText(String.format("%.1f", noWithVeto) + "%");
+                tallyTextviews[3].setText(String.format("%.1f", abstain) + "%");
+
+            } catch (Exception e) {
+                if (data.getFinalTallyResult() != null) {
+                    tallyTextviews[0].setText(getVote(data.getFinalTallyResult().getYes()));
+                    tallyTextviews[1].setText(getVote(data.getFinalTallyResult().getNo()));
+                    tallyTextviews[2].setText(getVote(data.getFinalTallyResult().getNoWithVeto()));
+                    tallyTextviews[3].setText(getVote(data.getFinalTallyResult().getAbstain()));
+                }
+            }
+        }
+        descTextview.setText(data.getProposalContent().getProposalDetail().getDescription());
+    }
+
+    private String getVote(String v) {
+        return v.substring(0, v.indexOf(".") + 2);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/SeedConfirmView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/SeedConfirmView.java
new file mode 100644
index 000000000..542aff151
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/SeedConfirmView.java
@@ -0,0 +1,112 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.content.DialogInterface;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.text.InputType;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.lunamint.lunagram.R;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.ActionBar.AlertDialog;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class SeedConfirmView extends LinearLayout {
+
+    private EditText seedTextview;
+
+    public SeedConfirmView(Context context, String seed) {
+        super(context);
+
+        setOrientation(VERTICAL);
+        setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(10));
+        setClipToPadding(false);
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.coral_red));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(32));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleTextview.setText(LocaleController.getString("writeThisDown", R.string.writeThisDown));
+        addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        TextView descTextview = new TextView(context);
+        descTextview.setTextColor(ActivityCompat.getColor(context, R.color.payneGrey));
+        descTextview.setTextSize(0, AndroidUtilities.dp(14));
+        descTextview.setText(LocaleController.getString("seedDesc", R.string.seedDesc));
+        addView(descTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 26));
+
+        seedTextview = new EditText(context);
+        seedTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        seedTextview.setTextSize(0, AndroidUtilities.dp(16));
+        seedTextview.setGravity(Gravity.CENTER);
+        seedTextview.setBackgroundResource(R.drawable.bg_seed);
+        seedTextview.setLineSpacing(AndroidUtilities.dp(16), 1.3f);
+        seedTextview.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD | InputType.TYPE_TEXT_FLAG_MULTI_LINE);
+        seedTextview.setText(seed);
+        seedTextview.setOnClickListener(onClickListener);
+        seedTextview.setFocusableInTouchMode(false);
+        addView(seedTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 20));
+
+        TextView warningTextview = new TextView(context);
+        warningTextview.setTextColor(ActivityCompat.getColor(context, R.color.payneGrey));
+        warningTextview.setTextSize(0, AndroidUtilities.dp(14));
+        warningTextview.setGravity(Gravity.CENTER);
+        warningTextview.setText(LocaleController.getString("cantRecoverSeed", R.string.cantRecoverSeed));
+        addView(warningTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 26));
+    }
+
+    public void setDesc(String seed) {
+        if (seedTextview == null) return;
+        if (seed != null) seedTextview.setText(seed);
+    }
+
+    public void clear() {
+        if (seedTextview != null) seedTextview.setText("");
+    }
+
+    private void showCopyAlert() {
+        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
+        builder.setTitle(LocaleController.getString("warning", R.string.securityWarning));
+        builder.setMessage(LocaleController.getString("warningCopySeed", R.string.warningCopySeed));
+        builder.setNegativeButton(LocaleController.getString("cancel", R.string.cancel), new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.dismiss();
+            }
+        });
+        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                copy();
+            }
+        });
+        builder.create().show();
+    }
+
+    private void copy() {
+        if (seedTextview == null) return;
+        String seed = seedTextview.getText().toString();
+        if (seed.length() == 0) return;
+        android.content.ClipboardManager clipboard = (android.content.ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);
+        android.content.ClipData clip = android.content.ClipData.newPlainText(LocaleController.getString("copyMySeedTitle", R.string.copyMySeedTitle), seed);
+        if(clipboard != null){
+            clipboard.setPrimaryClip(clip);
+            Toast.makeText(getContext(), LocaleController.getString("seedCopied", R.string.seedCopied), Toast.LENGTH_LONG).show();
+        }
+    }
+
+    private OnClickListener onClickListener = new OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            showCopyAlert();
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/SelectValidatorCardView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/SelectValidatorCardView.java
new file mode 100644
index 000000000..b1d30ce1b
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/SelectValidatorCardView.java
@@ -0,0 +1,104 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.support.v7.widget.CardView;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class SelectValidatorCardView extends CardView {
+
+    private LinearLayout emptyLayout;
+    private LinearLayout mainLayout;
+    private TextView nameTextview;
+
+    public SelectValidatorCardView(Context context, String validatorName, OnClickListener onClickListener) {
+        super(context);
+
+        setOnClickListener(onClickListener);
+
+        emptyLayout = new LinearLayout(context);
+        emptyLayout.setGravity(Gravity.CENTER);
+        addView(emptyLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        TextView emptyTextview = new TextView(context);
+        emptyTextview.setTextColor(ActivityCompat.getColor(context, R.color.white));
+        emptyTextview.setTextSize(0, AndroidUtilities.dp(16));
+        emptyTextview.setText(R.string.selectValidator);
+        emptyLayout.addView(emptyTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.HORIZONTAL);
+        mainLayout.setGravity(Gravity.CENTER_VERTICAL);
+        addView(mainLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        mainLayout.setVisibility(INVISIBLE);
+
+        ImageView profileImageview = new ImageView(context);
+        profileImageview.setImageResource(R.drawable.validator_profile_small);
+        mainLayout.addView(profileImageview, LayoutHelper.createLinear(40, 40, 0, 0, 10, 0));
+
+        LinearLayout textLayout = new LinearLayout(context);
+        textLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.addView(textLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f, 0, 0, 6, 0));
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.manatee));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(12));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleTextview.setText(LocaleController.getString("validator", R.string.validator));
+        textLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        nameTextview = new TextView(context);
+
+        nameTextview.setTextSize(0, AndroidUtilities.dp(20));
+        nameTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        textLayout.addView(nameTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        if (onClickListener != null) {
+            setUseCompatPadding(true);
+            setRadius(AndroidUtilities.dp(8));
+            setCardElevation(UiUtil.getDefaultElevation());
+
+            mainLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(20), AndroidUtilities.dp(20), AndroidUtilities.dp(20));
+
+            setBackgroundResource(R.drawable.btn_radius8_dark_blue);
+
+            nameTextview.setTextColor(ActivityCompat.getColor(context, R.color.white));
+
+            ImageView arrowImageView = new ImageView(context);
+            arrowImageView.setImageResource(R.drawable.arrow_grey);
+            mainLayout.addView(arrowImageView, LayoutHelper.createLinear(7, 11));
+
+        } else {
+            setRadius(0);
+            setCardElevation(0);
+
+            setBackgroundColor(ActivityCompat.getColor(context, R.color.white));
+
+            nameTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        }
+        update(validatorName);
+    }
+
+    public void update(String validatorName) {
+        if (nameTextview == null) return;
+        if (validatorName == null) {
+            emptyLayout.setVisibility(VISIBLE);
+            mainLayout.setVisibility(INVISIBLE);
+        } else {
+            emptyLayout.setVisibility(GONE);
+            mainLayout.setVisibility(VISIBLE);
+            nameTextview.setText(validatorName);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/SelectValidatorFormView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/SelectValidatorFormView.java
new file mode 100644
index 000000000..4ce91b88b
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/SelectValidatorFormView.java
@@ -0,0 +1,84 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.StakeCoinActivity;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class SelectValidatorFormView extends LinearLayout {
+
+    private SelectValidatorCardView selectValidatorCardView;
+    private SelectValidatorCardView selectRedelegateValidatorCardView;
+
+    public SelectValidatorFormView(Context context, int type, String validator, OnClickListener onClickListener) {
+        super(context);
+
+        String title = "";
+        String desc = "";
+
+        switch (type) {
+            case StakeCoinActivity.TYPE_STAKE:
+                title = LocaleController.getString("confirmValidator", R.string.confirmValidator);
+                desc = LocaleController.getString("chooseValidatorStake", R.string.chooseValidatorStake);
+                break;
+            case StakeCoinActivity.TYPE_UNSTAKE:
+                title = LocaleController.getString("confirmValidator", R.string.confirmValidator);
+                desc = LocaleController.getString("chooseValidatorUnstake", R.string.chooseValidatorUnstake);
+                break;
+            case StakeCoinActivity.TYPE_REDELEGATE:
+                title = LocaleController.getString("selectValidator", R.string.selectValidator);
+                desc = LocaleController.getString("chooseValidatorRestake", R.string.chooseValidatorRestake);
+                break;
+        }
+
+        setOrientation(VERTICAL);
+        setGravity(Gravity.CENTER_HORIZONTAL);
+        setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(20));
+        setClipToPadding(false);
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(32));
+        titleTextview.setText(title);
+        addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        TextView descTextview = new TextView(context);
+        descTextview.setTextColor(ActivityCompat.getColor(context, R.color.payneGrey));
+        descTextview.setTextSize(0, AndroidUtilities.dp(14));
+        descTextview.setText(desc);
+        addView(descTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 40));
+
+        if (type == StakeCoinActivity.TYPE_REDELEGATE) {
+            selectValidatorCardView = new SelectValidatorCardView(context, validator, null);
+            addView(selectValidatorCardView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 28));
+
+            ImageView arrowImageView = new ImageView(context);
+            arrowImageView.setImageResource(R.drawable.arrow_down_black);
+            addView(arrowImageView, LayoutHelper.createLinear(22, 13, 0, 0, 0, 28));
+
+            selectRedelegateValidatorCardView = new SelectValidatorCardView(context, null, onClickListener);
+            addView(selectRedelegateValidatorCardView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 40));
+        } else {
+            selectValidatorCardView = new SelectValidatorCardView(context, validator, null);
+            addView(selectValidatorCardView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+        }
+    }
+
+    public void updateValidator(String name) {
+        if (selectValidatorCardView != null) selectValidatorCardView.update(name);
+    }
+
+    public void updateRedelegateValidator(String name) {
+        if (selectRedelegateValidatorCardView != null)
+            selectRedelegateValidatorCardView.update(name);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/SelectWalletTypeFormView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/SelectWalletTypeFormView.java
new file mode 100644
index 000000000..cc477d726
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/SelectWalletTypeFormView.java
@@ -0,0 +1,43 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.support.v4.app.ActivityCompat;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.CreateAccountActivity;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class SelectWalletTypeFormView extends LinearLayout {
+
+    public SelectWalletTypeFormView(Context context, OnClickListener onClickListener) {
+        super(context);
+
+        setOrientation(VERTICAL);
+        setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(10));
+        setClipToPadding(false);
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(32));
+        titleTextview.setText(LocaleController.getString("createWallet", R.string.createWallet));
+        addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        TextView descTextview = new TextView(context);
+        descTextview.setTextColor(ActivityCompat.getColor(context, R.color.payneGrey));
+        descTextview.setTextSize(0, AndroidUtilities.dp(14));
+        descTextview.setText(LocaleController.getString("welcomeLunagramWallet", R.string.welcomeLunagramWallet));
+        addView(descTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 40));
+
+        CreateWalletCardView createWalletCardView = new CreateWalletCardView(context, CreateAccountActivity.TYPE_CREATE_NEW_ACCOUNT, onClickListener);
+        addView(createWalletCardView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+
+        CreateWalletCardView importWalletCardView = new CreateWalletCardView(context, CreateAccountActivity.TYPE_IMPORT_EXISTING_WALLET, onClickListener);
+        addView(importWalletCardView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 40));
+
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/SendCoinTokenCardView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/SendCoinTokenCardView.java
new file mode 100644
index 000000000..e7bd0d5c2
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/SendCoinTokenCardView.java
@@ -0,0 +1,66 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.support.v7.widget.CardView;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.utils.NumberFormatter;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class SendCoinTokenCardView extends CardView {
+
+    private TextView nameTextview;
+    private TextView amountTextview;
+
+    public SendCoinTokenCardView(Context context, Coin coin, OnClickListener onClickListener) {
+        super(context);
+
+        setOnClickListener(onClickListener);
+
+        setBackgroundResource(R.drawable.btn_radius8_dark_blue);
+        setUseCompatPadding(true);
+        setRadius(AndroidUtilities.dp(8));
+        setCardElevation(UiUtil.getDefaultElevation());
+
+        LinearLayout mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.HORIZONTAL);
+        mainLayout.setGravity(Gravity.CENTER_VERTICAL);
+        mainLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(14), AndroidUtilities.dp(20), AndroidUtilities.dp(14));
+        addView(mainLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        nameTextview = new TextView(context);
+        nameTextview.setTextColor(ActivityCompat.getColor(context, R.color.white));
+        nameTextview.setTextSize(0, AndroidUtilities.dp(20));
+        nameTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        mainLayout.addView(nameTextview, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f, 0, 0, 6, 0));
+
+        amountTextview = new TextView(context);
+        amountTextview.setTextColor(ActivityCompat.getColor(context, R.color.white));
+        amountTextview.setTextSize(0, AndroidUtilities.dp(16));
+        amountTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        mainLayout.addView(amountTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 6, 0));
+
+        ImageView arrowImageView = new ImageView(context);
+        arrowImageView.setImageResource(R.drawable.arrow_grey);
+        mainLayout.addView(arrowImageView, LayoutHelper.createLinear(7, 11));
+
+        update(coin);
+    }
+
+    public void update(Coin coin) {
+        if (nameTextview == null || coin == null) return;
+        nameTextview.setText(coin.getDenomDisplayName());
+        amountTextview.setText(NumberFormatter.getNumber(coin.getAmount()));
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/StakeToolsView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/StakeToolsView.java
new file mode 100644
index 000000000..fd59e03d0
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/StakeToolsView.java
@@ -0,0 +1,119 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.content.Intent;
+import android.support.v4.app.ActivityCompat;
+import android.support.v7.content.res.AppCompatResources;
+import android.support.v7.widget.CardView;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.GovernanceActivity;
+import com.lunamint.lunagram.ui.SettingsActivity;
+import com.lunamint.lunagram.ui.StakingActivity;
+import com.lunamint.lunagram.ui.TransactionHistoryActivity;
+import com.lunamint.lunagram.ui.ValidatorListActivity;
+import com.lunamint.wallet.model.AccountInfo;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class StakeToolsView extends CardView {
+
+    private static final int BUTTON_STAKE = 0;
+    private static final int BUTTON_UNSTAKE = 1;
+    private static final int BUTTON_REDELEGATE = 2;
+
+    private int toolIcons[] = {R.drawable.ic_stake_tools_stake, R.drawable.ic_stake_tools_unstake, R.drawable.ic_stake_tools_redelegate};
+
+    private String accountName;
+    private String address;
+
+    private ImageView[] toolIconImageviews;
+    private TextView[] toolTextviews;
+
+    public StakeToolsView(Context context, String accountName, String address) {
+        super(context);
+
+        this.accountName = accountName;
+        this.address = address;
+
+        setBackgroundResource(R.drawable.bg_card_white_radius12);
+        setUseCompatPadding(true);
+        setRadius(AndroidUtilities.dp(12));
+        setCardElevation(UiUtil.getDefaultElevation());
+
+        LinearLayout mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.HORIZONTAL);
+        mainLayout.setGravity(Gravity.CENTER_HORIZONTAL);
+        mainLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(10));
+        addView(mainLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        String toolNames[] = {LocaleController.getString("stake", R.string.stake), LocaleController.getString("unstake", R.string.unstake), LocaleController.getString("redelegate", R.string.redelegate)};
+        toolIconImageviews = new ImageView[toolNames.length];
+        toolTextviews = new TextView[toolNames.length];
+        for (int i = 0; toolNames.length > i; i++) {
+            LinearLayout toolButton = new LinearLayout(context);
+            toolButton.setOrientation(LinearLayout.VERTICAL);
+            toolButton.setGravity(Gravity.CENTER_HORIZONTAL);
+            toolButton.setId(i);
+            toolButton.setOnClickListener(onClickToolListener);
+            mainLayout.addView(toolButton, LayoutHelper.createLinear(60, LayoutHelper.WRAP_CONTENT));
+
+            toolIconImageviews[i] = new ImageView(context);
+            toolIconImageviews[i].setScaleType(ImageView.ScaleType.FIT_XY);
+            toolIconImageviews[i].setImageResource(toolIcons[i]);
+            toolButton.addView(toolIconImageviews[i], LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 6));
+
+            toolTextviews[i] = new TextView(context);
+            toolTextviews[i].setText(toolNames[i]);
+            toolTextviews[i].setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+            toolTextviews[i].setTextSize(0, AndroidUtilities.dp(12));
+            toolTextviews[i].setGravity(Gravity.CENTER);
+            toolButton.addView(toolTextviews[i], LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+            if (i < toolNames.length - 1) {
+                LinearLayout space = new LinearLayout(context);
+                space.setGravity(Gravity.CENTER);
+                mainLayout.addView(space, LayoutHelper.createLinear(0, 48, 1.0f));
+
+                ImageView line = new ImageView(context);
+                line.setBackgroundColor(ActivityCompat.getColor(context, R.color.languid_lavender));
+                space.addView(line, LayoutHelper.createLinear(1, LayoutHelper.MATCH_PARENT));
+            }
+        }
+    }
+
+    private OnClickListener onClickToolListener = new OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            switch (v.getId()) {
+                case StakeToolsView.BUTTON_STAKE:
+                    showValidatorListActivity(ValidatorListActivity.TYPE_STAKE);
+                    break;
+                case StakeToolsView.BUTTON_UNSTAKE:
+                    showValidatorListActivity(ValidatorListActivity.TYPE_UNSTAKE);
+                    break;
+                case StakeToolsView.BUTTON_REDELEGATE:
+                    showValidatorListActivity(ValidatorListActivity.TYPE_REDELEGATE);
+                    break;
+                default:
+            }
+        }
+    };
+
+    private void showValidatorListActivity(int type) {
+        Intent intent = new Intent(getContext(), ValidatorListActivity.class);
+        intent.putExtra("type", type);
+        intent.putExtra("accountName", accountName);
+        intent.putExtra("address", address);
+        getContext().startActivity(intent);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/StakingStatusCardView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/StakingStatusCardView.java
new file mode 100644
index 000000000..e0c5a4df4
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/StakingStatusCardView.java
@@ -0,0 +1,125 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.support.v7.widget.CardView;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.utils.NumberFormatter;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class StakingStatusCardView extends CardView {
+
+    private TextView amountTextviews[] = new TextView[2];
+    private TextView denomTextviews[] = new TextView[2];
+
+    private LinearLayout progressLayout;
+    private LinearLayout mainLayout;
+
+    public StakingStatusCardView(Context context, OnClickListener onClickListener) {
+        super(context);
+
+        setBackgroundResource(R.drawable.bg_card_white_radius12);
+        setUseCompatPadding(true);
+        setRadius(AndroidUtilities.dp(12));
+        setCardElevation(UiUtil.getDefaultElevation());
+
+        FrameLayout frameLayout = new FrameLayout(context);
+        addView(frameLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        progressLayout = new LinearLayout(context);
+        progressLayout.setGravity(Gravity.CENTER);
+        frameLayout.addView(progressLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        ProgressBar progressBar = new ProgressBar(context);
+        progressLayout.addView(progressBar, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.setGravity(Gravity.CENTER_HORIZONTAL);
+        mainLayout.setPadding(AndroidUtilities.dp(20), 0, AndroidUtilities.dp(20), 0);
+        frameLayout.addView(mainLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        mainLayout.setVisibility(INVISIBLE);
+
+        int balanceTitles[] = {R.string.staking, R.string.unstaking};
+        for (int i = 0; balanceTitles.length > i; i++) {
+            LinearLayout balanceLayout = new LinearLayout(context);
+            balanceLayout.setId(i);
+            balanceLayout.setOnClickListener(onClickListener);
+            balanceLayout.setOrientation(LinearLayout.HORIZONTAL);
+            balanceLayout.setGravity(Gravity.CENTER_VERTICAL);
+            balanceLayout.setPadding(0, AndroidUtilities.dp(14), 0, AndroidUtilities.dp(14));
+            mainLayout.addView(balanceLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+            TextView titleTextview = new TextView(context);
+            titleTextview.setText(context.getString(balanceTitles[i]));
+            titleTextview.setTextSize(0, AndroidUtilities.dp(12));
+            titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.manatee));
+            balanceLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 10, 0));
+
+            LinearLayout amountLayout = new LinearLayout(context);
+            amountLayout.setOrientation(LinearLayout.VERTICAL);
+            amountLayout.setGravity(Gravity.RIGHT);
+            balanceLayout.addView(amountLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
+
+            amountTextviews[i] = new TextView(context);
+            amountTextviews[i].setTextSize(0, AndroidUtilities.dp(24));
+            amountTextviews[i].setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+            amountTextviews[i].setTypeface(Typeface.DEFAULT_BOLD);
+            amountLayout.addView(amountTextviews[i], LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+            denomTextviews[i] = new TextView(context);
+            denomTextviews[i].setTextSize(0, AndroidUtilities.dp(12));
+            denomTextviews[i].setTextColor(ActivityCompat.getColor(context, R.color.languid_lavender));
+            amountLayout.addView(denomTextviews[i], LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+            if (i == 0) {
+                ImageView line = new ImageView(context);
+                line.setBackgroundColor(0x88E4E9FE);
+                mainLayout.addView(line, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 1));
+            }
+        }
+    }
+
+    public void updateStaking(Coin coin) {
+        if(amountTextviews == null || amountTextviews[0] == null) return;
+        if (coin != null) {
+            amountTextviews[0].setText(NumberFormatter.getNumber(coin.getAmount()));
+            denomTextviews[0].setText(coin.getDenomDisplayName());
+        } else {
+            amountTextviews[0].setText("0");
+            denomTextviews[0].setText(Blockchain.getInstance().getReserveDisplayName());
+        }
+        update();
+    }
+
+    public void updateUnstaking(Coin coin) {
+        if(amountTextviews == null || amountTextviews[0] == null) return;
+        if (coin != null) {
+            amountTextviews[1].setText(NumberFormatter.getNumber(coin.getAmount()));
+            denomTextviews[1].setText(coin.getDenomDisplayName());
+        } else {
+            amountTextviews[1].setText("0");
+            denomTextviews[1].setText(Blockchain.getInstance().getReserveDisplayName());
+        }
+        update();
+    }
+
+    private void update(){
+        if(progressLayout == null) return;
+        progressLayout.setVisibility(GONE);
+        mainLayout.setVisibility(VISIBLE);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/StakingToolsCardView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/StakingToolsCardView.java
new file mode 100644
index 000000000..94e86f4a2
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/StakingToolsCardView.java
@@ -0,0 +1,65 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.support.v4.app.ActivityCompat;
+import android.support.v7.widget.CardView;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class StakingToolsCardView extends CardView {
+
+    public StakingToolsCardView(Context context, OnClickListener onClickListener) {
+        super(context);
+
+        setBackgroundResource(R.drawable.bg_card_white_radius12);
+        setUseCompatPadding(true);
+        setRadius(AndroidUtilities.dp(12));
+        setCardElevation(UiUtil.getDefaultElevation());
+
+        LinearLayout mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.setGravity(Gravity.CENTER_HORIZONTAL);
+        addView(mainLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        int icons[] = {R.drawable.ic_my_validators, R.drawable.ic_all_validators, R.drawable.ic_history};
+        String titles[] = {LocaleController.getString("myValidators", R.string.myValidators), LocaleController.getString("allValidators", R.string.allValidators), LocaleController.getString("history", R.string.history)};
+        for (int i = 0; titles.length > i; i++) {
+            LinearLayout linearLayout = new LinearLayout(context);
+            linearLayout.setId(i);
+            linearLayout.setOnClickListener(onClickListener);
+            linearLayout.setOrientation(LinearLayout.HORIZONTAL);
+            linearLayout.setGravity(Gravity.CENTER_VERTICAL);
+            linearLayout.setPadding(AndroidUtilities.dp(12), AndroidUtilities.dp(13), AndroidUtilities.dp(20), AndroidUtilities.dp(13));
+            mainLayout.addView(linearLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+            ImageView iconImageView = new ImageView(context);
+            iconImageView.setImageResource(icons[i]);
+            linearLayout.addView(iconImageView, LayoutHelper.createLinear(30, 30, 0, 0, 10, 0));
+
+            TextView titleTextview = new TextView(context);
+            titleTextview.setText(titles[i]);
+            titleTextview.setTextSize(0, AndroidUtilities.dp(16));
+            titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.onyx));
+            linearLayout.addView(titleTextview, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f, 0, 0, 10, 0));
+
+            ImageView arrowImageView = new ImageView(context);
+            arrowImageView.setImageResource(R.drawable.arrow_grey);
+            linearLayout.addView(arrowImageView, LayoutHelper.createLinear(7, 11));
+
+            if (i < titles.length - 1) {
+                ImageView line = new ImageView(context);
+                line.setBackgroundColor(0x88E4E9FE);
+                mainLayout.addView(line, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 1, 20, 0, 20, 0));
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TelegramTransferOnboardingView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TelegramTransferOnboardingView.java
new file mode 100644
index 000000000..47ee735dd
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TelegramTransferOnboardingView.java
@@ -0,0 +1,79 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class TelegramTransferOnboardingView extends LinearLayout {
+
+    public TelegramTransferOnboardingView(Context context) {
+        super(context);
+
+        setOrientation(VERTICAL);
+        setGravity(Gravity.CENTER_HORIZONTAL);
+        setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(10));
+        setClipToPadding(false);
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(32));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleTextview.setText(LocaleController.getString("telegramTransfer", R.string.telegramTransfer));
+        addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 4));
+
+        TextView descTextview = new TextView(context);
+        descTextview.setTextColor(ActivityCompat.getColor(context, R.color.payneGrey));
+        descTextview.setTextSize(0, AndroidUtilities.dp(14));
+        addView(descTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 30));
+
+        ImageView warningImgview0 = new ImageView(context);
+        addView(warningImgview0, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+
+        TextView warningTextview0 = new TextView(context);
+        warningTextview0.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        warningTextview0.setTextSize(0, AndroidUtilities.dp(14));
+        addView(warningTextview0, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 20));
+
+        ImageView arrow0 = new ImageView(context);
+        arrow0.setImageResource(R.drawable.create_account_guide_arrow_down);
+        addView(arrow0, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 20));
+
+        ImageView warningImgview1 = new ImageView(context);
+        addView(warningImgview1, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+
+        TextView warningTextview1 = new TextView(context);
+        warningTextview1.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        warningTextview1.setTextSize(0, AndroidUtilities.dp(14));
+        addView(warningTextview1, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 20));
+
+        ImageView arrow1 = new ImageView(context);
+        arrow1.setImageResource(R.drawable.create_account_guide_arrow_down);
+        addView(arrow1, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 20));
+
+        ImageView warningImgview2 = new ImageView(context);
+        addView(warningImgview2, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+
+        TextView warningTextview2 = new TextView(context);
+        warningTextview2.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        warningTextview2.setTextSize(0, AndroidUtilities.dp(14));
+        addView(warningTextview2, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 50));
+
+        descTextview.setText(LocaleController.getString("telegramTransferDesc", R.string.telegramTransferDesc));
+        warningImgview0.setImageResource(R.drawable.create_account_guide1);
+        warningTextview0.setText(LocaleController.getString("telegramTransferGuide1", R.string.telegramTransferGuide1));
+        warningImgview1.setImageResource(R.drawable.create_account_guide2);
+        warningTextview1.setText(LocaleController.getString("telegramTransferGuide2", R.string.telegramTransferGuide2));
+        warningImgview2.setImageResource(R.drawable.create_account_guide3);
+        warningTextview2.setText(LocaleController.getString("telegramTransferGuide3", R.string.telegramTransferGuide3));
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TokensCardView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TokensCardView.java
new file mode 100644
index 000000000..b14d66ab9
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TokensCardView.java
@@ -0,0 +1,157 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.support.v7.widget.CardView;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.utils.NumberFormatter;
+import com.lunamint.wallet.utils.TokenUtil;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.util.ArrayList;
+
+public class TokensCardView extends CardView {
+
+    private OnClickListener onClickListener;
+
+    private TextView tokenCntTextview;
+    private LinearLayout tokensLayout;
+
+    public TokensCardView(Context context, OnClickListener onClickListener) {
+        super(context);
+
+        this.onClickListener = onClickListener;
+
+        setBackgroundResource(R.drawable.bg_card_white_radius12);
+        setUseCompatPadding(true);
+        setRadius(AndroidUtilities.dp(12));
+        setCardElevation(UiUtil.getDefaultElevation());
+
+        LinearLayout mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        addView(mainLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        LinearLayout titleLayout = new LinearLayout(context);
+        titleLayout.setGravity(Gravity.CENTER_VERTICAL);
+        titleLayout.setOrientation(LinearLayout.HORIZONTAL);
+        titleLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(12), AndroidUtilities.dp(20), AndroidUtilities.dp(12));
+        mainLayout.addView(titleLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextSize(0, AndroidUtilities.dp(16));
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        titleTextview.setText(LocaleController.getString("tokens", R.string.tokens));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 4, 0));
+
+        tokenCntTextview = new TextView(context);
+        tokenCntTextview.setTextSize(0, AndroidUtilities.dp(16));
+        tokenCntTextview.setTextColor(ActivityCompat.getColor(context, R.color.medium_slate_blue));
+        tokenCntTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleLayout.addView(tokenCntTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        tokensLayout = new LinearLayout(context);
+        tokensLayout.setOrientation(LinearLayout.VERTICAL);
+        tokensLayout.setGravity(Gravity.CENTER_HORIZONTAL);
+        mainLayout.addView(tokensLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        setVisibility(GONE);
+    }
+
+    public void showLoading() {
+        setVisibility(GONE);
+    }
+
+
+    public void update(ArrayList<Coin> coins) {
+        if (tokensLayout == null || coins == null) {
+            setVisibility(GONE);
+            return;
+        } else {
+            tokensLayout.removeAllViews();
+        }
+
+        /*
+        for (String token : TokenUtil.DEFAULT_TOKENS) {
+            boolean hasToken = false;
+            for (int i = 0; coins.size() > i; i++) {
+                if (coins.get(i).getDenom().equals(token)) {
+                    hasToken = true;
+                }
+            }
+
+            if (!hasToken) {
+                Coin coin = new Coin();
+                coin.setDenom(token);
+                coin.setAmount("0");
+                coins.add(coin);
+            }
+        }*/
+
+        for (int i = 0; coins.size() > i; i++) {
+            if (!coins.get(i).getDenom().equals(Blockchain.getInstance().getReserveDenom())) {
+                LinearLayout tokenLayout = new LinearLayout(getContext());
+                tokenLayout.setId(i);
+                tokenLayout.setOnClickListener(onClickListener);
+                tokenLayout.setGravity(Gravity.CENTER_VERTICAL);
+                tokenLayout.setOrientation(LinearLayout.HORIZONTAL);
+                tokenLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(8), AndroidUtilities.dp(20), AndroidUtilities.dp(8));
+                tokensLayout.addView(tokenLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+                ImageView tokenImgview = new ImageView(getContext());
+                tokenImgview.setImageResource(TokenUtil.getTokenIcon(coins.get(i).getDenom()));
+                tokenLayout.addView(tokenImgview, LayoutHelper.createLinear(30, 30, 0, 0, 10, 0));
+
+                LinearLayout tokenInfoLayout = new LinearLayout(getContext());
+                tokenInfoLayout.setGravity(Gravity.CENTER_VERTICAL);
+                tokenInfoLayout.setOrientation(LinearLayout.VERTICAL);
+                tokenLayout.addView(tokenInfoLayout, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+                TextView tokenNameTextView = new TextView(getContext());
+                tokenNameTextView.setTextSize(0, AndroidUtilities.dp(16));
+                tokenNameTextView.setTextColor(ActivityCompat.getColor(getContext(), R.color.charcoal));
+                tokenNameTextView.setText(coins.get(i).getDenomDisplayName());
+                tokenInfoLayout.addView(tokenNameTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+                String tokenFullname = TokenUtil.getTokenFullname(coins.get(i).getDenom());
+                if (tokenFullname != null) {
+                    TextView tokenFullnameTextView = new TextView(getContext());
+                    tokenFullnameTextView.setTextSize(0, AndroidUtilities.dp(10));
+                    tokenFullnameTextView.setTextColor(ActivityCompat.getColor(getContext(), R.color.languid_lavender));
+                    tokenFullnameTextView.setText(tokenFullname);
+                    tokenInfoLayout.addView(tokenFullnameTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+                }
+
+                TextView tokenBalanceTextView = new TextView(getContext());
+                tokenBalanceTextView.setTextSize(0, AndroidUtilities.dp(14));
+                tokenBalanceTextView.setTextColor(ActivityCompat.getColor(getContext(), R.color.charcoal));
+                tokenBalanceTextView.setGravity(Gravity.RIGHT);
+                tokenBalanceTextView.setText(NumberFormatter.getNumber(coins.get(i).getAmount()));
+                tokenLayout.addView(tokenBalanceTextView, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
+
+                if (i < coins.size() - 1) {
+                    ImageView line = new ImageView(getContext());
+                    line.setBackgroundColor(0x1AE4E9FE);
+                    tokensLayout.addView(line, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 1, 20, 0, 20, 0));
+                }
+            }
+        }
+
+        String cnt = (coins.size() - 1) + "";
+        tokenCntTextview.setText(cnt);
+
+        setVisibility(VISIBLE);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TransactionClaimRewardDetailView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TransactionClaimRewardDetailView.java
new file mode 100644
index 000000000..0ab225d2b
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TransactionClaimRewardDetailView.java
@@ -0,0 +1,100 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.utils.NumberFormatter;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+
+public class TransactionClaimRewardDetailView extends LinearLayout {
+
+    public static int TYPE_CONFIRM = 0;
+    public static int TYPE_RESULT = 1;
+
+    private String txHash;
+
+    public TransactionClaimRewardDetailView(Context context, int type, boolean result, String txHash, String reward, String fee) {
+        super(context);
+
+        this.txHash = txHash;
+
+        if (reward != null) reward = NumberFormatter.getNumber(reward);
+        fee = NumberFormatter.getNumber(fee);
+
+        String resultText;
+
+        if (type == TYPE_CONFIRM) {
+            resultText = null;
+        } else if (result) {
+            resultText = LocaleController.getString("successed", R.string.successed);
+        } else {
+            resultText = LocaleController.getString("failed", R.string.failed);
+        }
+
+        setOrientation(LinearLayout.VERTICAL);
+        setPadding(AndroidUtilities.dp(20), 0, AndroidUtilities.dp(20), 0);
+
+        String titles[] = {LocaleController.getString("result", R.string.result), LocaleController.getString("cosmosTxHash", R.string.cosmosTxHash), LocaleController.getString("reward", R.string.reward), LocaleController.getString("transactionFee", R.string.transactionFee), LocaleController.getString("chain", R.string.chain)};
+        String desc[] = {resultText, txHash, reward + "\n" + Blockchain.getInstance().getReserveDisplayName(), fee + "\n" + Blockchain.getInstance().getReserveDisplayName(), Blockchain.getInstance().getChainId()};
+        for (int i = 0; titles.length > i; i++) {
+            if (i == 2 && reward == null) continue;
+            if (desc[i] == null) continue;
+            LinearLayout linearLayout = new LinearLayout(context);
+            linearLayout.setGravity(Gravity.CENTER_VERTICAL);
+            linearLayout.setOrientation(LinearLayout.HORIZONTAL);
+            linearLayout.setPadding(0, AndroidUtilities.dp(14), 0, AndroidUtilities.dp(14));
+            if (i == 1) linearLayout.setOnClickListener(onClickListener);
+            addView(linearLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+            TextView titleTextview = new TextView(context);
+            titleTextview.setTextSize(0, AndroidUtilities.dp(14));
+            titleTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.manatee));
+            titleTextview.setText(titles[i]);
+            titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+            linearLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 60, 0));
+
+            TextView valueTextview = new TextView(context);
+            valueTextview.setTextSize(0, AndroidUtilities.dp(14));
+            if (i == 0 && !result) {
+                valueTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.coral_red));
+            } else {
+                valueTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.charcoal));
+            }
+            valueTextview.setGravity(Gravity.RIGHT);
+            valueTextview.setText(desc[i]);
+            linearLayout.addView(valueTextview, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
+
+            if (i < titles.length - 1) {
+                ImageView line = new ImageView(context);
+                line.setBackgroundColor(0x88E4E9FE);
+                addView(line, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 1));
+            }
+        }
+    }
+
+    private OnClickListener onClickListener = new OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            if (txHash == null || txHash.length() == 0) return;
+            android.content.ClipboardManager clipboard = (android.content.ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);
+            android.content.ClipData clip = android.content.ClipData.newPlainText(LocaleController.getString("copyTxHashTitle", R.string.copyTxHashTitle), txHash);
+            if(clipboard != null){
+                clipboard.setPrimaryClip(clip);
+                Toast.makeText(getContext(), LocaleController.getString("txHashCopied", R.string.txHashCopied), Toast.LENGTH_LONG).show();
+            }
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TransactionSendDetailView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TransactionSendDetailView.java
new file mode 100644
index 000000000..1b1e937eb
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TransactionSendDetailView.java
@@ -0,0 +1,261 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.app.Activity;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.graphics.Typeface;
+import android.os.Handler;
+import android.os.Message;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.SendCoinActivity;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.WalletManager;
+import com.lunamint.wallet.model.AccountInfo;
+import com.lunamint.wallet.model.CmdResult;
+import com.lunamint.wallet.utils.NumberFormatter;
+import com.lunamint.wallet.utils.Parser;
+import com.lunamint.wallet.utils.TokenUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.ActionBar.AlertDialog;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+
+
+public class TransactionSendDetailView extends LinearLayout {
+
+    public static int TYPE_CONFIRM = 0;
+    public static int TYPE_RESULT = 1;
+
+    private boolean enableSend;
+
+    private String txHash;
+    private String from;
+    private String to;
+
+    private String myAddress;
+    private String targetAddress;
+
+    private ProgressDialog mProgressDialog;
+
+    public TransactionSendDetailView(Context context, int type, boolean enableSend, boolean result, String txHash, String from, String to, String denom, String amount, String fee, String memo, String myAddress) {
+        super(context);
+
+        this.enableSend = enableSend;
+        this.txHash = txHash;
+        this.from = from;
+        this.to = to;
+        this.myAddress = myAddress;
+
+
+        amount = NumberFormatter.getNumber(amount);
+        fee = NumberFormatter.getNumber(fee);
+
+        String resultText;
+
+        if (type == TYPE_CONFIRM) {
+            resultText = null;
+        } else if (result) {
+            resultText = LocaleController.getString("successed", R.string.successed);
+        } else {
+            resultText = LocaleController.getString("failed", R.string.failed);
+        }
+
+        setOrientation(LinearLayout.VERTICAL);
+        setPadding(AndroidUtilities.dp(20), 0, AndroidUtilities.dp(20), 0);
+
+        String titles[] = {LocaleController.getString("result", R.string.result), LocaleController.getString("cosmosTxHash", R.string.cosmosTxHash), LocaleController.getString("from", R.string.from), LocaleController.getString("to", R.string.to), LocaleController.getString("amount", R.string.amount), LocaleController.getString("transactionFee", R.string.transactionFee), LocaleController.getString("memo", R.string.memo), LocaleController.getString("chain", R.string.chain)};
+        String desc[] = {resultText, txHash, from, to, amount + "\n" + TokenUtil.getTokenDisplayName(denom), fee + "\n" + Blockchain.getInstance().getReserveDisplayName(), memo, Blockchain.getInstance().getChainId()};
+
+        for (int i = 0; titles.length > i; i++) {
+            if (desc[i] == null) continue;
+            LinearLayout linearLayout = new LinearLayout(context);
+            linearLayout.setGravity(Gravity.CENTER_VERTICAL);
+            linearLayout.setOrientation(LinearLayout.HORIZONTAL);
+            linearLayout.setPadding(0, AndroidUtilities.dp(14), 0, AndroidUtilities.dp(14));
+            if (i > 0 && i < 4) {
+                linearLayout.setId(i);
+                linearLayout.setOnClickListener(onClickListener);
+            }
+            addView(linearLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+            TextView titleTextview = new TextView(context);
+            titleTextview.setTextSize(0, AndroidUtilities.dp(14));
+            titleTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.manatee));
+            titleTextview.setText(titles[i]);
+            titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+            linearLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 60, 0));
+
+            TextView valueTextview = new TextView(context);
+            valueTextview.setTextSize(0, AndroidUtilities.dp(14));
+            if (i == 0 && !result) {
+                valueTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.coral_red));
+            } else {
+                valueTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.charcoal));
+            }
+
+            valueTextview.setGravity(Gravity.RIGHT);
+            valueTextview.setText(desc[i]);
+            linearLayout.addView(valueTextview, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
+
+            if (i < titles.length - 1) {
+                ImageView line = new ImageView(context);
+                line.setBackgroundColor(0x88E4E9FE);
+                addView(line, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 1));
+            }
+        }
+    }
+
+    private OnClickListener onClickListener = new OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            switch (v.getId()) {
+                case 1:
+                    copy(LocaleController.getString("copyAddressTitle", R.string.copyTxHashTitle), txHash, LocaleController.getString("txHashCopied", R.string.txHashCopied));
+                    break;
+                case 2:
+                    if (!enableSend) {
+                        copy(LocaleController.getString("copyAddressTitle", R.string.copyAddressTitle), from, LocaleController.getString("addressCopied", R.string.addressCopied));
+                        return;
+                    }
+                    if (myAddress != null && from != null && from.equals(myAddress)) {
+                        copy(LocaleController.getString("copyMyAddressTitle", R.string.copyMyAddressTitle), from, LocaleController.getString("addressCopied", R.string.addressCopied));
+                    } else {
+                        showDialog(from);
+                    }
+                    break;
+                case 3:
+                    if (!enableSend) {
+                        copy(LocaleController.getString("copyAddressTitle", R.string.copyAddressTitle), to, LocaleController.getString("addressCopied", R.string.addressCopied));
+                        return;
+                    }
+                    if (myAddress != null && to != null && to.equals(myAddress)) {
+                        copy(LocaleController.getString("copyMyAddressTitle", R.string.copyMyAddressTitle), to, LocaleController.getString("addressCopied", R.string.addressCopied));
+                    } else {
+                        showDialog(to);
+                    }
+                    break;
+            }
+        }
+    };
+
+    private void showDialog(final String targetAddress) {
+        this.targetAddress = targetAddress;
+        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
+        builder.setItems(new CharSequence[]{LocaleController.getString("sendToken", R.string.sendToken), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialogInterface, int i) {
+                if (i == 0) {
+                    getCurrentWalletAccount();
+                } else {
+                    copy(LocaleController.getString("copyAddressTitle", R.string.copyAddressTitle), targetAddress, LocaleController.getString("addressCopied", R.string.addressCopied));
+                }
+            }
+        });
+        builder.create().show();
+    }
+
+    private void getCurrentWalletAccount() {
+        showProgress();
+        WalletManager.getInstance().getAccountList(new ResultHandler(this));
+    }
+
+    private void showSendCoinActivity(AccountInfo accountInfo, String toAddress) {
+        if (WalletManager.getInstance().isLowerMinAppVersion) {
+            Toast.makeText(getContext(), LocaleController.getString("lowerAppVersionError", R.string.lowerAppVersionError), Toast.LENGTH_LONG).show();
+            return;
+        }
+
+        if (accountInfo == null || accountInfo.getAddress() == null) {
+            Toast.makeText(getContext(), LocaleController.getString("noSearchAddressAlert", R.string.noSearchAddressAlert), Toast.LENGTH_LONG).show();
+        } else {
+            Intent intent = new Intent(getContext(), SendCoinActivity.class);
+            intent.putExtra("account_name", accountInfo.getName());
+            intent.putExtra("address", accountInfo.getAddress());
+            intent.putExtra("to_address", toAddress);
+            getContext().startActivity(intent);
+        }
+    }
+
+    private void copy(String title, String text, String successMsg) {
+        if (text == null || text.length() == 0) return;
+        android.content.ClipboardManager clipboard = (android.content.ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);
+        android.content.ClipData clip = android.content.ClipData.newPlainText(title, text);
+        if (clipboard != null) {
+            clipboard.setPrimaryClip(clip);
+            Toast.makeText(getContext(), successMsg, Toast.LENGTH_LONG).show();
+        }
+    }
+
+    protected void showProgress() {
+        if (mProgressDialog != null) mProgressDialog.dismiss();
+        mProgressDialog = ProgressDialog.show(getContext(), "", LocaleController.getString("sending", R.string.sending), true);
+        mProgressDialog.setCancelable(false);
+    }
+
+    protected void hideProgress() {
+        if (mProgressDialog == null) return;
+        mProgressDialog.dismiss();
+        mProgressDialog = null;
+    }
+
+    private void handleMessage(Message msg) {
+        switch (msg.what) {
+            case WalletManager.GET_ACCOUNT_LIST:
+                onGetAccountListResult(((CmdResult) msg.getData().getSerializable("result")));
+                break;
+        }
+    }
+
+    private void onGetAccountListResult(CmdResult cmdResult) {
+        if (cmdResult == null) {
+            Toast.makeText(getContext(), LocaleController.getString("unknownError", R.string.unknownError), Toast.LENGTH_LONG).show();
+        } else if (cmdResult.getErrMsg() != null) {
+            Toast.makeText(getContext(), cmdResult.getErrMsg(), Toast.LENGTH_LONG).show();
+        } else {
+            ArrayList<AccountInfo> accountList = Parser.getAccountList(cmdResult.getData());
+            if (accountList != null && accountList.size() != 0) {
+                int accountIdx = 0;
+                String currentAccountName = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getString("currentAccountName", "");
+                for (int i = 0; accountList.size() > i; i++) {
+                    if (accountList.get(i).getName().equals(currentAccountName)) {
+                        accountIdx = i;
+                        break;
+                    }
+                }
+                showSendCoinActivity(accountList.get(accountIdx), targetAddress);
+            } else {
+                Toast.makeText(getContext(), LocaleController.getString("noSearchAddressAlert", R.string.noSearchAddressAlert), Toast.LENGTH_LONG).show();
+            }
+        }
+        hideProgress();
+    }
+
+    protected static class ResultHandler extends Handler {
+        private final WeakReference<TransactionSendDetailView> mTransactionSendDetailView;
+
+        private ResultHandler(TransactionSendDetailView transactionSendDetailView) {
+            mTransactionSendDetailView = new WeakReference<>(transactionSendDetailView);
+        }
+
+        @Override
+        public void handleMessage(Message msg) {
+            TransactionSendDetailView transactionSendDetailView = mTransactionSendDetailView.get();
+            if (transactionSendDetailView != null) transactionSendDetailView.handleMessage(msg);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TransactionStakeDetailView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TransactionStakeDetailView.java
new file mode 100644
index 000000000..dcd3245c2
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TransactionStakeDetailView.java
@@ -0,0 +1,101 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.utils.NumberFormatter;
+import com.lunamint.wallet.utils.TokenUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+
+public class TransactionStakeDetailView extends LinearLayout {
+
+    public static int TYPE_CONFIRM = 0;
+    public static int TYPE_RESULT = 1;
+
+    private String txHash;
+
+    public TransactionStakeDetailView(Context context, int type, boolean result, String txHash, String to, String denom, String amount, String fee) {
+        super(context);
+
+        this.txHash = txHash;
+
+        amount = NumberFormatter.getNumber(amount);
+        fee = NumberFormatter.getNumber(fee);
+
+        String resultText;
+
+        if (type == TYPE_CONFIRM) {
+            resultText = null;
+        } else if (result) {
+            resultText = LocaleController.getString("successed", R.string.successed);
+        } else {
+            resultText = LocaleController.getString("failed", R.string.failed);
+        }
+
+        setOrientation(LinearLayout.VERTICAL);
+        setPadding(AndroidUtilities.dp(20), 0, AndroidUtilities.dp(20), 0);
+
+        String titles[] = {LocaleController.getString("result", R.string.result), LocaleController.getString("cosmosTxHash", R.string.cosmosTxHash), LocaleController.getString("to", R.string.to), LocaleController.getString("amount", R.string.amount), LocaleController.getString("transactionFee", R.string.transactionFee), LocaleController.getString("chain", R.string.chain)};
+        String desc[] = {resultText, txHash, to, amount + "\n" + TokenUtil.getTokenDisplayName(denom), fee + "\n" + Blockchain.getInstance().getReserveDisplayName(), Blockchain.getInstance().getChainId()};
+
+        for (int i = 0; titles.length > i; i++) {
+            if (desc[i] == null) continue;
+            LinearLayout linearLayout = new LinearLayout(context);
+            linearLayout.setGravity(Gravity.CENTER_VERTICAL);
+            linearLayout.setOrientation(LinearLayout.HORIZONTAL);
+            linearLayout.setPadding(0, AndroidUtilities.dp(14), 0, AndroidUtilities.dp(14));
+            if (i == 1) linearLayout.setOnClickListener(onClickListener);
+            addView(linearLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+            TextView titleTextview = new TextView(context);
+            titleTextview.setTextSize(0, AndroidUtilities.dp(14));
+            titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.manatee));
+            titleTextview.setText(titles[i]);
+            titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+            linearLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 60, 0));
+
+            TextView valueTextview = new TextView(context);
+            valueTextview.setTextSize(0, AndroidUtilities.dp(14));
+            if (i == 0 && !result) {
+                valueTextview.setTextColor(ActivityCompat.getColor(context, R.color.coral_red));
+            } else {
+                valueTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+            }
+            valueTextview.setGravity(Gravity.RIGHT);
+            valueTextview.setText(desc[i]);
+            linearLayout.addView(valueTextview, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
+
+            if (i < titles.length - 1) {
+                ImageView line = new ImageView(context);
+                line.setBackgroundColor(0x88E4E9FE);
+                addView(line, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 1));
+            }
+        }
+    }
+
+    private OnClickListener onClickListener = new OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            if (txHash == null || txHash.length() == 0) return;
+            android.content.ClipboardManager clipboard = (android.content.ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);
+            android.content.ClipData clip = android.content.ClipData.newPlainText(LocaleController.getString("copyTxHashTitle", R.string.copyTxHashTitle), txHash);
+            if (clipboard != null) {
+                clipboard.setPrimaryClip(clip);
+                Toast.makeText(getContext(), LocaleController.getString("txHashCopied", R.string.txHashCopied), Toast.LENGTH_LONG).show();
+            }
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TransactionVoteDetailView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TransactionVoteDetailView.java
new file mode 100644
index 000000000..e0880106d
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TransactionVoteDetailView.java
@@ -0,0 +1,99 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.utils.NumberFormatter;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+
+public class TransactionVoteDetailView extends LinearLayout {
+
+    public static int TYPE_CONFIRM = 0;
+    public static int TYPE_RESULT = 1;
+
+    private String txHash;
+
+    public TransactionVoteDetailView(Context context, int type, boolean result, String txHash, String proposalId, String vote, String fee) {
+        super(context);
+
+        this.txHash = txHash;
+
+        fee = NumberFormatter.getNumber(fee);
+
+        String resultText;
+
+        if (type == TYPE_CONFIRM) {
+            resultText = null;
+        } else if (result) {
+            resultText = LocaleController.getString("successed", R.string.successed);
+        } else {
+            resultText = LocaleController.getString("failed", R.string.failed);
+        }
+
+        setOrientation(LinearLayout.VERTICAL);
+        setPadding(AndroidUtilities.dp(20), 0, AndroidUtilities.dp(20), 0);
+
+        String titles[] = {LocaleController.getString("result", R.string.result), LocaleController.getString("cosmosTxHash", R.string.cosmosTxHash), LocaleController.getString("proposalId", R.string.proposalId), LocaleController.getString("vote", R.string.vote), LocaleController.getString("transactionFee", R.string.transactionFee), LocaleController.getString("chain", R.string.chain)};
+        String desc[] = {resultText, txHash, proposalId, vote, fee + "\n" + Blockchain.getInstance().getReserveDisplayName(), Blockchain.getInstance().getChainId()};
+
+        for (int i = 0; titles.length > i; i++) {
+            if (desc[i] == null) continue;
+            LinearLayout linearLayout = new LinearLayout(context);
+            linearLayout.setGravity(Gravity.CENTER_VERTICAL);
+            linearLayout.setOrientation(LinearLayout.HORIZONTAL);
+            linearLayout.setPadding(0, AndroidUtilities.dp(14), 0, AndroidUtilities.dp(14));
+            if (i == 1) linearLayout.setOnClickListener(onClickListener);
+            addView(linearLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+            TextView titleTextview = new TextView(context);
+            titleTextview.setTextSize(0, AndroidUtilities.dp(14));
+            titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.manatee));
+            titleTextview.setText(titles[i]);
+            titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+            linearLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 60, 0));
+
+            TextView valueTextview = new TextView(context);
+            valueTextview.setTextSize(0, AndroidUtilities.dp(14));
+            if (i == 0 && !result) {
+                valueTextview.setTextColor(ActivityCompat.getColor(context, R.color.coral_red));
+            } else {
+                valueTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+            }
+            valueTextview.setGravity(Gravity.RIGHT);
+            valueTextview.setText(desc[i]);
+            linearLayout.addView(valueTextview, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
+
+            if (i < titles.length - 1) {
+                ImageView line = new ImageView(context);
+                line.setBackgroundColor(0x88E4E9FE);
+                addView(line, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 1));
+            }
+        }
+    }
+
+    private OnClickListener onClickListener = new OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            if (txHash == null || txHash.length() == 0) return;
+            android.content.ClipboardManager clipboard = (android.content.ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);
+            android.content.ClipData clip = android.content.ClipData.newPlainText(LocaleController.getString("copyTxHashTitle", R.string.copyTxHashTitle), txHash);
+            if (clipboard != null) {
+                clipboard.setPrimaryClip(clip);
+                Toast.makeText(getContext(), LocaleController.getString("txHashCopied", R.string.txHashCopied), Toast.LENGTH_LONG).show();
+            }
+        }
+    };
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TxConfirmView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TxConfirmView.java
new file mode 100644
index 000000000..723ee5b00
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TxConfirmView.java
@@ -0,0 +1,95 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.LinearLayout;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class TxConfirmView extends LinearLayout {
+
+    public final static int TYPE_SEND = 0;
+    public final static int TYPE_STAKE = 1;
+    public final static int TYPE_UNSTAKE = 2;
+    public final static int TYPE_REDELEGATE = 3;
+    public final static int TYPE_VOTE = 4;
+    public final static int TYPE_CLAIM_REWARDS = 5;
+
+    private TextView errorTextview;
+    private ProgressBar progressBar;
+
+    public TxConfirmView(Context context, String title) {
+        super(context);
+
+        setOrientation(VERTICAL);
+        setClipToPadding(false);
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(32));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleTextview.setText(title);
+        addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 20, 10, 20, 0));
+
+        TextView descTextview = new TextView(context);
+        descTextview.setTextColor(ActivityCompat.getColor(context, R.color.payneGrey));
+        descTextview.setTextSize(0, AndroidUtilities.dp(14));
+        descTextview.setText(LocaleController.getString("doubleCheckAction", R.string.doubleCheckAction));
+        addView(descTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 20, 0, 20, 36));
+
+        errorTextview = new TextView(getContext());
+        errorTextview.setTextColor(ActivityCompat.getColor(context, R.color.coral_red));
+        errorTextview.setTextSize(0, AndroidUtilities.dp(14));
+        errorTextview.setGravity(Gravity.CENTER);
+        addView(errorTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 20, 10, 20, 10));
+        errorTextview.setVisibility(GONE);
+
+        progressBar = new ProgressBar(context);
+        addView(progressBar);
+    }
+
+    public void showError(String msg) {
+        if (progressBar != null) progressBar.setVisibility(GONE);
+        if (errorTextview == null) return;
+        errorTextview.setText(msg);
+        errorTextview.setVisibility(VISIBLE);
+    }
+
+    public void update(int type, String txHash, String from, String to, String denom, String amount, String fee, String memo, String myAddress) {
+        if (progressBar != null) progressBar.setVisibility(GONE);
+
+        View transactionDetailView = null;
+        switch (type) {
+            case TxConfirmView.TYPE_SEND:
+                transactionDetailView = new TransactionSendDetailView(getContext(), TransactionSendDetailView.TYPE_CONFIRM, false, true, txHash, from, to, denom, amount, fee, memo, myAddress);
+                break;
+            case TxConfirmView.TYPE_STAKE:
+                transactionDetailView = new TransactionStakeDetailView(getContext(), TransactionStakeDetailView.TYPE_CONFIRM, true, txHash, to, denom, amount, fee);
+                break;
+            case TxConfirmView.TYPE_UNSTAKE:
+                transactionDetailView = new TransactionStakeDetailView(getContext(), TransactionStakeDetailView.TYPE_CONFIRM, true, txHash, to, denom, amount, fee);
+                break;
+            case TxConfirmView.TYPE_REDELEGATE:
+                transactionDetailView = new TransactionSendDetailView(getContext(), TransactionSendDetailView.TYPE_CONFIRM, false, true, txHash, from, to, denom, amount, fee, memo, myAddress);
+                break;
+            case TxConfirmView.TYPE_VOTE:
+                transactionDetailView = new TransactionVoteDetailView(getContext(), TransactionVoteDetailView.TYPE_CONFIRM, true, txHash, to, amount, fee);
+                break;
+            case TxConfirmView.TYPE_CLAIM_REWARDS:
+                transactionDetailView = new TransactionClaimRewardDetailView(getContext(), TransactionClaimRewardDetailView.TYPE_CONFIRM, true, txHash, amount, fee);
+                break;
+        }
+
+        if (transactionDetailView != null)
+            addView(transactionDetailView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TxProgressView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TxProgressView.java
new file mode 100644
index 000000000..1a7077456
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/TxProgressView.java
@@ -0,0 +1,95 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.LinearLayout;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class TxProgressView extends LinearLayout {
+
+    public final static int TYPE_SEND = 0;
+    public final static int TYPE_STAKE = 1;
+    public final static int TYPE_UNSTAKE = 2;
+    public final static int TYPE_REDELEGATE = 3;
+    public final static int TYPE_VOTE = 4;
+    public final static int TYPE_CLAIM_REWARDS = 5;
+
+    private TextView errorTextview;
+    private ProgressBar progressBar;
+
+    public TxProgressView(Context context) {
+        super(context);
+
+        setOrientation(VERTICAL);
+        setClipToPadding(false);
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(32));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleTextview.setText(LocaleController.getString("txProgress", R.string.txProgress));
+        addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 20, 10, 20, 0));
+
+        TextView descTextview = new TextView(context);
+        descTextview.setTextColor(ActivityCompat.getColor(context, R.color.payneGrey));
+        descTextview.setTextSize(0, AndroidUtilities.dp(14));
+        descTextview.setText(LocaleController.getString("monitorProgress", R.string.monitorProgress));
+        addView(descTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 20, 0, 20, 36));
+
+        errorTextview = new TextView(getContext());
+        errorTextview.setTextColor(ActivityCompat.getColor(context, R.color.coral_red));
+        errorTextview.setTextSize(0, AndroidUtilities.dp(14));
+        errorTextview.setGravity(Gravity.CENTER);
+        addView(errorTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 20, 10, 20, 10));
+        errorTextview.setVisibility(GONE);
+
+        progressBar = new ProgressBar(context);
+        addView(progressBar);
+    }
+
+    public void showError(String msg) {
+        if (progressBar != null) progressBar.setVisibility(GONE);
+        if (errorTextview == null) return;
+        errorTextview.setText(msg);
+        errorTextview.setVisibility(VISIBLE);
+    }
+
+    public void update(int type, boolean result, String txHash, String from, String to, String denom, String amount, String fee, String memo, String myAddress) {
+        if (progressBar != null) progressBar.setVisibility(GONE);
+
+        View transactionDetailView = null;
+        switch (type) {
+            case TxProgressView.TYPE_SEND:
+                transactionDetailView = new TransactionSendDetailView(getContext(), TransactionSendDetailView.TYPE_RESULT, false, result, txHash, from, to, denom, amount, fee, memo, myAddress);
+                break;
+            case TxProgressView.TYPE_STAKE:
+                transactionDetailView = new TransactionStakeDetailView(getContext(), TransactionStakeDetailView.TYPE_RESULT, result, txHash, to, denom, amount, fee);
+                break;
+            case TxProgressView.TYPE_UNSTAKE:
+                transactionDetailView = new TransactionStakeDetailView(getContext(), TransactionStakeDetailView.TYPE_RESULT, result, txHash, to, denom, amount, fee);
+                break;
+            case TxProgressView.TYPE_REDELEGATE:
+                transactionDetailView = new TransactionSendDetailView(getContext(), TransactionSendDetailView.TYPE_RESULT, false, result, txHash, from, to, denom, amount, fee, memo, myAddress);
+                break;
+            case TxProgressView.TYPE_VOTE:
+                transactionDetailView = new TransactionVoteDetailView(getContext(), TransactionVoteDetailView.TYPE_RESULT, result, txHash, to, amount, fee);
+                break;
+            case TxProgressView.TYPE_CLAIM_REWARDS:
+                transactionDetailView = new TransactionClaimRewardDetailView(getContext(), TransactionClaimRewardDetailView.TYPE_RESULT, result, txHash, amount, fee);
+                break;
+        }
+
+        if (transactionDetailView != null)
+            addView(transactionDetailView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/ValidatorProfileView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/ValidatorProfileView.java
new file mode 100644
index 000000000..b633e8a19
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/ValidatorProfileView.java
@@ -0,0 +1,183 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.os.Build;
+import android.support.v4.app.ActivityCompat;
+import android.support.v7.widget.CardView;
+import android.view.Gravity;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.model.Validator;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class ValidatorProfileView extends RelativeLayout {
+
+    public final static int ACTION_SHOW_HISTORY = 0;
+    public final static int ACTION_SHOW_WEBSITE = 1;
+
+    private TextView nameTextview;
+    private TextView votingPowerTextview;
+    private TextView commissionTextview;
+
+    private LinearLayout websiteLayout;
+    private TextView websiteTextview;
+
+    public ValidatorProfileView(Context context, OnClickListener onClickListener) {
+        super(context);
+
+        setClipToPadding(false);
+        setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(20), AndroidUtilities.dp(20), AndroidUtilities.dp(30));
+
+        CardView cardView = new CardView(context);
+        cardView.setUseCompatPadding(true);
+        cardView.setRadius(AndroidUtilities.dp(8));
+        cardView.setCardElevation(UiUtil.getDefaultElevation());
+        cardView.setBackgroundResource(R.drawable.validator_profile_bg);
+        addView(cardView, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 45, 0, 0));
+
+        LinearLayout mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.setGravity(Gravity.CENTER);
+        mainLayout.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(16), AndroidUtilities.dp(16), AndroidUtilities.dp(16));
+        cardView.addView(mainLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextSize(0, AndroidUtilities.dp(12));
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.columbia_blue));
+        titleTextview.setText(LocaleController.getString("validator", R.string.validator));
+        mainLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 14, 0, 0));
+
+        nameTextview = new TextView(context);
+        nameTextview.setTextSize(0, AndroidUtilities.dp(24));
+        nameTextview.setTextColor(ActivityCompat.getColor(context, R.color.white));
+        nameTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        mainLayout.addView(nameTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        websiteLayout = new LinearLayout(context);
+        websiteLayout.setOrientation(LinearLayout.HORIZONTAL);
+        websiteLayout.setId(ValidatorProfileView.ACTION_SHOW_WEBSITE);
+        websiteLayout.setGravity(Gravity.CENTER);
+        websiteLayout.setOnClickListener(onClickListener);
+        websiteLayout.setPadding(0, 0, 0, AndroidUtilities.dp(22));
+        mainLayout.addView(websiteLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        websiteLayout.setVisibility(INVISIBLE);
+
+        websiteTextview = new TextView(context);
+        websiteTextview.setTextSize(0, AndroidUtilities.dp(12));
+        websiteTextview.setTextColor(ActivityCompat.getColor(context, R.color.manatee));
+        websiteLayout.addView(websiteTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 6, 0));
+
+        ImageView linkImgview = new ImageView(context);
+        linkImgview.setImageResource(R.drawable.ic_validator_link);
+        websiteLayout.addView(linkImgview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        LinearLayout bottomLayout = new LinearLayout(context);
+        bottomLayout.setOrientation(LinearLayout.HORIZONTAL);
+        bottomLayout.setBackgroundResource(R.drawable.bg_card_blue_opacity20);
+        bottomLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(8), AndroidUtilities.dp(20), AndroidUtilities.dp(8));
+        mainLayout.addView(bottomLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        LinearLayout powerLayout = new LinearLayout(context);
+        powerLayout.setOrientation(LinearLayout.VERTICAL);
+        powerLayout.setGravity(Gravity.CENTER_VERTICAL);
+        bottomLayout.addView(powerLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
+
+        TextView votingPowerTitleTextview = new TextView(context);
+        votingPowerTitleTextview.setTextSize(0, AndroidUtilities.dp(10));
+        votingPowerTitleTextview.setTextColor(ActivityCompat.getColor(context, R.color.columbia_blue));
+        votingPowerTitleTextview.setText(LocaleController.getString("votingPower", R.string.votingPower));
+        powerLayout.addView(votingPowerTitleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        votingPowerTextview = new TextView(context);
+        votingPowerTextview.setTextSize(0, AndroidUtilities.dp(16));
+        votingPowerTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        votingPowerTextview.setTextColor(ActivityCompat.getColor(context, R.color.white));
+        powerLayout.addView(votingPowerTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        LinearLayout commissionLayout = new LinearLayout(context);
+        commissionLayout.setOrientation(LinearLayout.VERTICAL);
+        commissionLayout.setGravity(Gravity.CENTER_VERTICAL);
+        commissionLayout.setPadding(AndroidUtilities.dp(20), 0, 0, 0);
+        bottomLayout.addView(commissionLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
+
+        TextView commissionTitleTextview = new TextView(context);
+        commissionTitleTextview.setTextSize(0, AndroidUtilities.dp(10));
+        commissionTitleTextview.setTextColor(ActivityCompat.getColor(context, R.color.columbia_blue));
+        commissionTitleTextview.setText(LocaleController.getString("commission", R.string.commission));
+        commissionLayout.addView(commissionTitleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        commissionTextview = new TextView(context);
+        commissionTextview.setTextSize(0, AndroidUtilities.dp(16));
+        commissionTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        commissionTextview.setTextColor(ActivityCompat.getColor(context, R.color.white));
+        commissionLayout.addView(commissionTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        LinearLayout profileImageLayout = new LinearLayout(context);
+        profileImageLayout.setOrientation(LinearLayout.HORIZONTAL);
+        profileImageLayout.setGravity(Gravity.CENTER_HORIZONTAL);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            profileImageLayout.setElevation(AndroidUtilities.dp(20));
+        }
+        addView(profileImageLayout, 0, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        ImageView profileImageview = new ImageView(context);
+        profileImageview.setImageResource(R.drawable.validator_profile_small);
+        profileImageLayout.addView(profileImageview, LayoutHelper.createLinear(64, 64));
+
+        LinearLayout historyLayout = new LinearLayout(context);
+        historyLayout.setId(ValidatorProfileView.ACTION_SHOW_HISTORY);
+        historyLayout.setOrientation(LinearLayout.HORIZONTAL);
+        historyLayout.setGravity(Gravity.CENTER);
+        historyLayout.setBackgroundResource(R.drawable.bg_card_white_radius12);
+        historyLayout.setPadding(AndroidUtilities.dp(8), AndroidUtilities.dp(5), AndroidUtilities.dp(5), AndroidUtilities.dp(8));
+        historyLayout.setOnClickListener(onClickListener);
+        addView(historyLayout, LayoutHelper.createRelative(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, ALIGN_PARENT_RIGHT));
+
+        ImageView historyImageview = new ImageView(context);
+        historyImageview.setImageResource(R.drawable.ic_validator_history);
+        historyLayout.addView(historyImageview, LayoutHelper.createLinear(10, 9, 0, 0, 4, 0));
+
+        TextView historyTextview = new TextView(context);
+        historyTextview.setTextSize(0, AndroidUtilities.dp(12));
+        historyTextview.setTextColor(ActivityCompat.getColor(context, R.color.medium_slate_blue));
+        historyTextview.setText(R.string.history);
+        historyLayout.addView(historyTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+    }
+
+    public void update(Validator data, double totalPower) {
+        nameTextview.setText(data.getDescription().getMoniker());
+
+        try {
+            double power = data.getDelegatorShares();
+            if (totalPower > 0) {
+                power = power / totalPower * 100;
+                votingPowerTextview.setText("#" + String.valueOf(data.getRank()) + " (" + String.format("%.2f", power) + "%)");
+            } else {
+                votingPowerTextview.setText("#" + String.valueOf(data.getRank()) + " (" + String.format("%.2f", data.getDelegatorShares()) + ")");
+            }
+
+            float commissionRate = Float.parseFloat(data.getCommission().getRate()) * 100;
+            commissionTextview.setText(String.format("%.1f", commissionRate) + "%");
+        } catch (Exception e) {
+            votingPowerTextview.setText("#" + data.getRank() + " (" + String.format("%.2f", data.getDelegatorShares()) + ")");
+            commissionTextview.setText(String.format("%.1f", data.getCommission().getRate()));
+        }
+
+        if (data.getDescription().getWebsite().equals("")) {
+            websiteLayout.setVisibility(INVISIBLE);
+        } else {
+            websiteLayout.setVisibility(VISIBLE);
+            websiteTextview.setText(data.getDescription().getWebsite());
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/VoteCardView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/VoteCardView.java
new file mode 100644
index 000000000..05c505bb2
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/VoteCardView.java
@@ -0,0 +1,60 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.support.v7.widget.CardView;
+import android.view.Gravity;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class VoteCardView extends CardView {
+
+    private LinearLayout mainLayout;
+    private TextView titleTextview;
+
+    public VoteCardView(Context context, int position, boolean isSelected, String title) {
+        super(context);
+
+        setUseCompatPadding(true);
+        setRadius(AndroidUtilities.dp(12));
+        setCardElevation(UiUtil.getDefaultElevation());
+
+        mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.setGravity(Gravity.CENTER);
+        addView(mainLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 72));
+
+        titleTextview = new TextView(context);
+        if (position >= 2) {
+            titleTextview.setTextSize(0, AndroidUtilities.dp(12));
+        } else {
+            titleTextview.setTextSize(0, AndroidUtilities.dp(16));
+        }
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleTextview.setGravity(Gravity.CENTER);
+        titleTextview.setText(title);
+        mainLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        update(isSelected);
+    }
+
+    public void update(boolean isSelected) {
+        if (mainLayout == null) return;
+        if (isSelected) {
+            setBackgroundResource(R.drawable.bg_card_blue);
+            titleTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.white));
+        } else {
+            setBackgroundResource(R.drawable.bg_card_white);
+            titleTextview.setTextColor(ActivityCompat.getColor(getContext(), R.color.manatee));
+        }
+
+        mainLayout.setPadding(AndroidUtilities.dp(15), 0, AndroidUtilities.dp(15), 0);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/VoteFormView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/VoteFormView.java
new file mode 100644
index 000000000..8cee13d1c
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/VoteFormView.java
@@ -0,0 +1,75 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.view.View;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class VoteFormView extends LinearLayout implements View.OnClickListener {
+
+    private int selected = 1;
+
+    private int voteTitles[] = {R.string.yes, R.string.no, R.string.noWithVeto, R.string.abstain};
+    private String values[] = {"Yes", "No", "NoWithVeto", "Abstain"};
+
+    private VoteCardView feeCardViews[];
+
+    public VoteFormView(Context context) {
+        super(context);
+
+        setOrientation(VERTICAL);
+
+        setClipToPadding(false);
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(32));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleTextview.setText(LocaleController.getString("castVote", R.string.castVote));
+        addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 20, 10, 20, 0));
+
+        TextView descTextview = new TextView(context);
+        descTextview.setTextColor(ActivityCompat.getColor(context, R.color.payneGrey));
+        descTextview.setTextSize(0, AndroidUtilities.dp(14));
+        descTextview.setText(LocaleController.getString("chooseVote", R.string.chooseVote));
+        addView(descTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 20, 0, 20, 24));
+
+        LinearLayout voteLayout = new LinearLayout(context);
+        voteLayout.setOrientation(HORIZONTAL);
+        voteLayout.setClipToPadding(false);
+        voteLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(20));
+        addView(voteLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 20));
+
+        int rightMargin = 10;
+        feeCardViews = new VoteCardView[values.length];
+        for (int i = 0; feeCardViews.length > i; i++) {
+            boolean isSelected = (selected == i);
+            feeCardViews[i] = new VoteCardView(context, i, isSelected, context.getString(voteTitles[i]));
+            feeCardViews[i].setId(i);
+            feeCardViews[i].setOnClickListener(this);
+            if (i == feeCardViews.length - 1) rightMargin = 0;
+            voteLayout.addView(feeCardViews[i], LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f, 0, 0, rightMargin, 0));
+        }
+    }
+
+    public String getValue() {
+        return values[selected];
+    }
+
+    @Override
+    public void onClick(View v) {
+        selected = v.getId();
+        for (int i = 0; feeCardViews.length > i; i++) {
+            boolean isSelected = (selected == i);
+            feeCardViews[i].update(isSelected);
+        }
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/WalletView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/WalletView.java
new file mode 100644
index 000000000..1618d694e
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/WalletView.java
@@ -0,0 +1,487 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.app.NotificationCompat;
+import android.support.v4.app.NotificationManagerCompat;
+import android.view.View;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.ScrollView;
+import android.widget.Toast;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.secure.SecureKeyStore;
+import com.lunamint.lunagram.ui.CreateAccountActivity;
+import com.lunamint.lunagram.ui.QrCodeActivity;
+import com.lunamint.lunagram.ui.SendCoinActivity;
+import com.lunamint.lunagram.ui.ManageWalletActivity;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.model.AccountInfo;
+import com.lunamint.wallet.ApiUtils;
+import com.lunamint.wallet.LcdService;
+import com.lunamint.wallet.WalletManager;
+import com.lunamint.wallet.model.CmdResult;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.model.StakingInfo;
+import com.lunamint.wallet.utils.NetworkUtil;
+import com.lunamint.wallet.utils.Parser;
+import com.lunamint.wallet.utils.TokenUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+import uk.co.senab.actionbarpulltorefresh.library.ActionBarPullToRefresh;
+import uk.co.senab.actionbarpulltorefresh.library.PullToRefreshLayout;
+import uk.co.senab.actionbarpulltorefresh.library.listeners.OnRefreshListener;
+
+public class WalletView extends RelativeLayout {
+
+    private boolean maintenance = false;
+    private boolean isReadyWalletManager = false;
+    private boolean isLoadingWalletManager = false;
+
+    private PullToRefreshLayout pullToRefreshLayout;
+    private AccountView accountView;
+    private MainCardView mainCardView;
+    private CosmosToolsView cosmosToolsView;
+    private TokensCardView tokensCardView;
+
+    private AccountInfo accountInfo;
+    private ArrayList<Coin> coins;
+
+    boolean isLoadingBalance = false;
+
+    public WalletView(Context context) {
+        super(context);
+
+        initWalletManager();
+        initSecureKeyStore();
+
+        setBackgroundColor(ActivityCompat.getColor(context, R.color.bg_default));
+        setClipToPadding(false);
+
+        pullToRefreshLayout = new PullToRefreshLayout(context);
+        addView(pullToRefreshLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        ScrollView scrollView = new ScrollView(context);
+        pullToRefreshLayout.addView(scrollView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        LinearLayout walletLayout = new LinearLayout(context);
+        walletLayout.setOrientation(LinearLayout.VERTICAL);
+        walletLayout.setClipToPadding(false);
+        walletLayout.setPadding(AndroidUtilities.dp(20), 0, AndroidUtilities.dp(20), AndroidUtilities.dp(40));
+        scrollView.addView(walletLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        ActionBarPullToRefresh.from((Activity) context)
+                .allChildrenArePullable()
+                .listener(new OnRefreshListener() {
+                    @Override
+                    public void onRefreshStarted(View view) {
+                        getBalance();
+                    }
+                })
+                .setup(pullToRefreshLayout);
+
+        accountView = new AccountView(context, new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                switch (v.getId()) {
+                    case AccountView.BUTTON_SETTING_WALLET:
+                        if (!maintenance && !WalletManager.getInstance().isLowerMinAppVersion)
+                            showSettingWalletActivity();
+                        break;
+                    case AccountView.BUTTON_CHANGE_CHAIN:
+                        break;
+                }
+            }
+        });
+
+        walletLayout.addView(accountView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        mainCardView = new MainCardView(context, new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                switch (v.getId()) {
+                    case MainCardView.BUTTON_UPDATE:
+                        getBalance();
+                        break;
+                    case MainCardView.BUTTON_CREATE_WALLET:
+                        showCreateAccountActivity();
+                        break;
+                    case MainCardView.BUTTON_SEND:
+                        showSendCoinActivity(Blockchain.getInstance().getReserveDenom());
+                        break;
+                    case MainCardView.BUTTON_ACTION_ADDRESS:
+                        copyAddress();
+                        //showQrCodeActivity();
+                        break;
+                }
+            }
+        });
+
+        walletLayout.addView(mainCardView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+
+        cosmosToolsView = new CosmosToolsView(context);
+        walletLayout.addView(cosmosToolsView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 10));
+
+        tokensCardView = new TokensCardView(context, new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (coins == null) return;
+                showSendCoinActivity(coins.get(v.getId()).getDenom());
+            }
+        });
+        walletLayout.addView(tokensCardView);
+    }
+
+    public void onResume() {
+        if (pullToRefreshLayout != null)
+            ActionBarPullToRefresh.from((Activity) getContext())
+                    .allChildrenArePullable()
+                    .listener(new OnRefreshListener() {
+                        @Override
+                        public void onRefreshStarted(View view) {
+                            getBalance();
+                        }
+                    })
+                    .setup(pullToRefreshLayout);
+    }
+
+    public void initWalletManager() {
+        if (isLoadingWalletManager) return;
+        isLoadingWalletManager = true;
+        WalletManager.getInstance().init(getContext(), new ResultHandler(this));
+    }
+
+    public void initSecureKeyStore() {
+        if (SecureKeyStore.getInstance().isSupported()) return;
+        SecureKeyStore.getInstance().init(ApplicationLoader.applicationContext);
+    }
+
+    public void update(AccountInfo data) {
+        if (data == null) {
+            showEmptyAccountLayout();
+        } else {
+            accountInfo = data;
+            showAccountLayout();
+
+            getBalance();
+        }
+    }
+
+    private void getBalance() {
+        if (accountInfo == null) {
+            if (pullToRefreshLayout != null) pullToRefreshLayout.setRefreshComplete();
+            return;
+        }
+        if (maintenance || WalletManager.getInstance().isLowerMinAppVersion) {
+            if (pullToRefreshLayout != null) pullToRefreshLayout.setRefreshComplete();
+            return;
+        }
+
+        if (!isReadyWalletManager) {
+            if (!isLoadingWalletManager) {
+                initWalletManager();
+                return;
+            }
+        }
+
+        if (isLoadingBalance) return;
+        if (!NetworkUtil.isNetworkAvailable(getContext())) {
+            showError(LocaleController.getString("unableNetworkError", R.string.unableNetworkError));
+            if (pullToRefreshLayout != null) pullToRefreshLayout.setRefreshComplete();
+            return;
+        }
+        isLoadingBalance = true;
+
+        mainCardView.showLoading();
+        cosmosToolsView.setEnable(false, accountInfo);
+        tokensCardView.showLoading();
+
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getBalances(accountInfo.getAddress()).enqueue(new Callback<ArrayList<Coin>>() {
+            @Override
+            public void onResponse(Call<ArrayList<Coin>> call, Response<ArrayList<Coin>> response) {
+                updateBalance(response);
+                isLoadingBalance = false;
+                if (pullToRefreshLayout != null) pullToRefreshLayout.setRefreshComplete();
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<Coin>> call, Throwable t) {
+                if (t.getMessage().contains("End of input at")) {
+                    updateBalanceEmpty();
+                } else {
+                    updateBalance(null);
+                }
+
+                isLoadingBalance = false;
+                if (pullToRefreshLayout != null) pullToRefreshLayout.setRefreshComplete();
+            }
+        });
+
+        getStaking();
+    }
+
+    public void getStaking() {
+        LcdService lcdService = ApiUtils.getLcdService();
+        lcdService.getDelegations(accountInfo.getAddress()).enqueue(new Callback<ArrayList<StakingInfo>>() {
+            @Override
+            public void onResponse(Call<ArrayList<StakingInfo>> call, Response<ArrayList<StakingInfo>> response) {
+                if (response.code() == 200) {
+                    ArrayList<StakingInfo> stakingInfos = response.body();
+                    updateStaking(stakingInfos);
+                } else {
+                    updateStaking(null);
+                }
+            }
+
+            @Override
+            public void onFailure(Call<ArrayList<StakingInfo>> call, Throwable t) {
+                updateStaking(null);
+            }
+        });
+    }
+
+    public void updateBalance(Response<ArrayList<Coin>> response) {
+        if (response != null) {
+            switch (response.code()) {
+                case 200:
+                    coins = response.body();
+                    mainCardView.updateBalance(accountInfo, TokenUtil.getCoin(coins, Blockchain.getInstance().getReserveDenom()));
+                    cosmosToolsView.setEnable(true, accountInfo);
+                    break;
+                case 204:
+                    coins = response.body();
+                    mainCardView.updateBalance(accountInfo, TokenUtil.getCoin(coins, Blockchain.getInstance().getReserveDenom()));
+                    cosmosToolsView.setEnable(true, accountInfo);
+                    break;
+                case 500:
+                    try {
+                        if (response.errorBody() != null) {
+                            if (response.errorBody().string().contains("failed to prove merkle proof")) {
+                                mainCardView.updateBalance(accountInfo, TokenUtil.getCoin(coins, Blockchain.getInstance().getReserveDenom()));
+                                cosmosToolsView.setEnable(true, accountInfo);
+                            } else {
+                                showError("Server internal error" + response.errorBody().string());
+                            }
+                        } else {
+                            showError("Server internal error");
+                        }
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                        showError("Server internal error");
+                    }
+                    break;
+                default:
+                    showError(LocaleController.getString("cantConnectNodeError", R.string.cantConnectNodeError));
+                    break;
+            }
+        } else {
+            if (!NetworkUtil.isNetworkAvailable(getContext())) {
+                showError(LocaleController.getString("unableNetworkError", R.string.unableNetworkError));
+            } else {
+                showError(LocaleController.getString("cantConnectNodeError", R.string.cantConnectNodeError));
+            }
+        }
+
+        tokensCardView.update(coins);
+    }
+
+    public void updateBalanceEmpty() {
+        mainCardView.updateBalance(accountInfo, TokenUtil.getCoin(null, Blockchain.getInstance().getReserveDenom()));
+        cosmosToolsView.setEnable(true, accountInfo);
+    }
+
+    private void updateStaking(ArrayList<StakingInfo> stakingInfos) {
+        double stakingAmount = 0;
+
+        if (stakingInfos != null) {
+            for (int i = 0; stakingInfos.size() > i; i++) {
+                stakingAmount = stakingAmount + stakingInfos.get(i).getShares();
+            }
+        }
+
+        Coin stakingCoin = new Coin();
+        stakingCoin.setAmount(stakingAmount + "");
+        stakingCoin.setDenom(Blockchain.getInstance().getReserveDenom());
+
+        mainCardView.updateStaking(stakingCoin);
+    }
+
+    public void updateWallet() {
+        if (maintenance || WalletManager.getInstance().isLowerMinAppVersion) {
+            if (pullToRefreshLayout != null) pullToRefreshLayout.setRefreshComplete();
+            return;
+        }
+
+        if (!isReadyWalletManager) {
+            if (!isLoadingWalletManager) {
+                initWalletManager();
+                return;
+            }
+        }
+
+        accountInfo = null;
+        coins = null;
+        WalletManager.getInstance().getAccountList(new ResultHandler(this));
+    }
+
+    // Todo: Implement checking transaction to background Service
+    public void onTransactionCreated(String tx) {
+        Handler handler = new Handler(Looper.getMainLooper());
+        handler.postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                updateWallet();
+                NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(getContext())
+                        .setSmallIcon(R.drawable.notification)
+                        .setContentTitle(LocaleController.getString("AppName", R.string.AppName))
+                        .setContentText(LocaleController.getString("transactionCreate", R.string.transactionCreate))
+                        .setPriority(NotificationCompat.PRIORITY_DEFAULT);
+                mBuilder.setAutoCancel(true);
+                NotificationManagerCompat notificationManager = NotificationManagerCompat.from(getContext());
+                notificationManager.notify(777, mBuilder.build());
+            }
+        }, 1000 * 5);
+    }
+
+    private void onGetAccountListResult(CmdResult cmdResult) {
+        if (cmdResult == null) {
+            showError(LocaleController.getString("unknownError", R.string.unknownError));
+        } else if (cmdResult.getErrMsg() != null) {
+            showError(cmdResult.getErrMsg());
+        } else {
+            ArrayList<AccountInfo> accountList = Parser.getAccountList(cmdResult.getData());
+            if (accountList != null && accountList.size() != 0) {
+                int accountIdx = 0;
+                String currentAccountName = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getString("currentAccountName", "");
+                for (int i = 0; accountList.size() > i; i++) {
+                    if (accountList.get(i).getName().equals(currentAccountName)) {
+                        accountIdx = i;
+                        break;
+                    }
+                }
+                update(accountList.get(accountIdx));
+            } else {
+                update(null);
+            }
+        }
+    }
+
+    public void onAccountChanged() {
+        updateWallet();
+    }
+
+    private void copyAddress() {
+        String address = "";
+        if (accountInfo != null) address = accountInfo.getAddress();
+        android.content.ClipboardManager clipboard = (android.content.ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);
+        android.content.ClipData clip = android.content.ClipData.newPlainText(LocaleController.getString("copyMyAddressTitle", R.string.copyMyAddressTitle), address);
+        if (clipboard != null) {
+            clipboard.setPrimaryClip(clip);
+            Toast.makeText(getContext(), LocaleController.getString("addressCopied", R.string.addressCopied), Toast.LENGTH_LONG).show();
+        }
+    }
+
+    public void setMaintenance(boolean maintenance) {
+        this.maintenance = maintenance;
+    }
+
+    private void showEmptyAccountLayout() {
+        accountView.update(null);
+        mainCardView.showEmptyAccountView();
+        cosmosToolsView.setEnable(false, null);
+        tokensCardView.showLoading();
+    }
+
+    public void showError(String msg) {
+        mainCardView.showError(msg);
+        cosmosToolsView.setEnable(false, accountInfo);
+        tokensCardView.showLoading();
+    }
+
+    private void showAccountLayout() {
+        accountView.update(accountInfo);
+    }
+
+    private void showCreateAccountActivity() {
+        Intent intent = new Intent(getContext(), CreateAccountActivity.class);
+        intent.putExtra("isFirstAccount", true);
+        getContext().startActivity(intent);
+    }
+
+    private void showSendCoinActivity(String tokenName) {
+        if (coins == null || coins.size() == 0) {
+            Toast.makeText(getContext(), LocaleController.getString("noHaveTokens", R.string.noHaveTokens), Toast.LENGTH_LONG).show();
+        } else if (WalletManager.getInstance().isLowerMinAppVersion) {
+            Toast.makeText(getContext(), LocaleController.getString("lowerAppVersionError", R.string.lowerAppVersionError), Toast.LENGTH_LONG).show();
+        } else {
+            if (accountInfo == null || accountInfo.getAddress() == null) {
+                Toast.makeText(getContext(), LocaleController.getString("noSearchAddressAlert", R.string.noSearchAddressAlert), Toast.LENGTH_LONG).show();
+            } else {
+                Intent intent = new Intent(getContext(), SendCoinActivity.class);
+                intent.putExtra("account_name", accountInfo.getName());
+                intent.putExtra("address", accountInfo.getAddress());
+                intent.putExtra("token_name", tokenName);
+                getContext().startActivity(intent);
+            }
+        }
+    }
+
+    private void showSettingWalletActivity() {
+        Intent intent = new Intent(getContext(), ManageWalletActivity.class);
+        getContext().startActivity(intent);
+    }
+
+    private void showQrCodeActivity() {
+        Intent intent = new Intent(getContext(), QrCodeActivity.class);
+        intent.putExtra("address", accountInfo.getAddress());
+        getContext().startActivity(intent);
+    }
+
+    protected void handleMessage(Message msg) {
+        switch (msg.what) {
+            case WalletManager.GAIA_INIT_SUCCESS:
+                isLoadingWalletManager = false;
+                isReadyWalletManager = true;
+                updateWallet();
+                break;
+            case WalletManager.GAIA_INIT_FAIL:
+                isLoadingWalletManager = false;
+                showError(LocaleController.getString("failedInitWalletManager", R.string.failedInitWalletManager));
+                break;
+            case WalletManager.GET_ACCOUNT_LIST:
+                onGetAccountListResult(((CmdResult) msg.getData().getSerializable("result")));
+                break;
+        }
+    }
+
+    protected static class ResultHandler extends Handler {
+        private final WeakReference<WalletView> mWalletView;
+
+        private ResultHandler(WalletView walletView) {
+            mWalletView = new WeakReference<>(walletView);
+        }
+
+        @Override
+        public void handleMessage(Message msg) {
+            WalletView walletView = mWalletView.get();
+            if (walletView != null) walletView.handleMessage(msg);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/WarningCardView.java b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/WarningCardView.java
new file mode 100644
index 000000000..7f5b38c2e
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/lunagram/ui/view/WarningCardView.java
@@ -0,0 +1,47 @@
+package com.lunamint.lunagram.ui.view;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.support.v4.app.ActivityCompat;
+import android.support.v7.widget.CardView;
+import android.view.Gravity;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.utils.UiUtil;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class WarningCardView extends CardView {
+
+    public WarningCardView(Context context, String desc) {
+        super(context);
+
+        setBackgroundResource(R.drawable.bg_card_white_radius12);
+        setUseCompatPadding(true);
+        setRadius(AndroidUtilities.dp(12));
+        setCardElevation(UiUtil.getDefaultElevation());
+
+        LinearLayout mainLayout = new LinearLayout(context);
+        mainLayout.setOrientation(LinearLayout.VERTICAL);
+        mainLayout.setGravity(Gravity.CENTER);
+        mainLayout.setPadding(AndroidUtilities.dp(20), AndroidUtilities.dp(10), AndroidUtilities.dp(20), AndroidUtilities.dp(10));
+        addView(mainLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        TextView titleTextview = new TextView(context);
+        titleTextview.setTextColor(ActivityCompat.getColor(context, R.color.coral_red));
+        titleTextview.setTextSize(0, AndroidUtilities.dp(14));
+        titleTextview.setTypeface(Typeface.DEFAULT_BOLD);
+        titleTextview.setText(LocaleController.getString("warning", R.string.warning));
+        mainLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+
+        TextView descTextview = new TextView(context);
+        descTextview.setTextColor(ActivityCompat.getColor(context, R.color.charcoal));
+        descTextview.setTextSize(0, AndroidUtilities.dp(14));
+        descTextview.setText(desc);
+        mainLayout.addView(descTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/ApiUtils.java b/TMessagesProj/src/main/java/com/lunamint/wallet/ApiUtils.java
new file mode 100644
index 000000000..095b3322d
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/ApiUtils.java
@@ -0,0 +1,21 @@
+package com.lunamint.wallet;
+
+public class ApiUtils {
+    private static final String LUNA_BASE_URL = "YOUR_CONTROL_SERVER_URL";
+
+    public static final LcdService getLcdService() {
+        return HttpClient.getInstanceLcd(Blockchain.getInstance().getLcd()).create(LcdService.class);
+    }
+
+    public static final LcdService getLcdService(String baseUrl) {
+        return HttpClient.getInstanceLcd(baseUrl).create(LcdService.class);
+    }
+
+    public static final LunaService getLunaService() {
+        return HttpClient.getInstanceLuna(LUNA_BASE_URL).create(LunaService.class);
+    }
+
+    public static final LcdService getCallbackService(String url) {
+        return HttpClient.getInstanceCallback(url).create(LcdService.class);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/Blockchain.java b/TMessagesProj/src/main/java/com/lunamint/wallet/Blockchain.java
new file mode 100644
index 000000000..77a25ffac
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/Blockchain.java
@@ -0,0 +1,83 @@
+package com.lunamint.wallet;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+
+import org.telegram.messenger.ApplicationLoader;
+
+public class Blockchain {
+
+    private String chainId;
+    private String nodeName;
+    private String node;
+    private String lcd;
+    private String reserveDenom;
+    private String reserveDenomDisplayName;
+
+    private static volatile Blockchain Instance = null;
+
+    public static Blockchain getInstance() {
+        Blockchain walletManagerInstance = Instance;
+        if (walletManagerInstance == null) {
+            synchronized (Blockchain.class) {
+                walletManagerInstance = Instance;
+                if (walletManagerInstance == null) {
+                    Instance = walletManagerInstance = new Blockchain();
+                }
+            }
+        }
+        return walletManagerInstance;
+    }
+
+    public void init() {
+        SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        chainId = "cosmoshub-2";
+        nodeName = pref.getString("currentNodeName", "Owdin");
+        node = pref.getString("currentNode", "lcd.owdin.network:26657");
+        lcd = pref.getString("currentLcd", "https://lcd.owdin.network");
+        reserveDenom = pref.getString("currentReserveDenom", "uatom");
+        reserveDenomDisplayName = pref.getString("reserveDenomDisplayName", "atom");
+    }
+
+    public String getChainId() {
+        if (chainId == null) init();
+        return chainId;
+    }
+
+    public String getNodeName() {
+        if (nodeName == null) init();
+        return nodeName;
+    }
+
+    public String getNode() {
+        if (node == null) init();
+        return node;
+    }
+
+    public String getLcd() {
+        if (lcd == null) init();
+        return lcd;
+    }
+
+    public String getReserveDenom() {
+        if (reserveDenom == null) init();
+        return reserveDenom;
+    }
+
+    public String getReserveDisplayName() {
+        if (reserveDenomDisplayName == null) init();
+        return reserveDenomDisplayName;
+    }
+
+    public void changeNode(String nodeName, String node, String lcd, String reserveDenom, String reserveDenomDisplayName) {
+        SharedPreferences pref = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = pref.edit();
+        editor.putString("currentNodeName", nodeName);
+        editor.putString("currentNode", node);
+        editor.putString("currentLcd", lcd);
+        editor.putString("currentReserveDenom", reserveDenom);
+        editor.putString("reserveDenomDisplayName", reserveDenomDisplayName);
+        editor.commit();
+        init();
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/GaiaCommand.java b/TMessagesProj/src/main/java/com/lunamint/wallet/GaiaCommand.java
new file mode 100644
index 000000000..a58898175
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/GaiaCommand.java
@@ -0,0 +1,21 @@
+package com.lunamint.wallet;
+
+public class GaiaCommand {
+    public static final String VERSION = "version";
+    public static final String STATUS = "status";
+    public static final String KEYS = "keys";
+    public static final String LIST = "list";
+    public static final String ADD = "add";
+    public static final String DELETE = "delete";
+    public static final String TX = "tx";
+    public static final String SEND = "send";
+    public static final String STAKE = "staking";
+    public static final String DELEGATE = "delegate";
+    public static final String UNBOND = "unbond";
+    public static final String REDELEGATE = "redelegate";
+    public static final String GOV = "gov";
+    public static final String VOTE = "vote";
+    public static final String DISTR = "distr";
+    public static final String WITHDRAW_ALL_REWARDS = "withdraw-all-rewards";
+    public static final String SIGN = "sign";
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/HttpClient.java b/TMessagesProj/src/main/java/com/lunamint/wallet/HttpClient.java
new file mode 100644
index 000000000..4a989ac64
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/HttpClient.java
@@ -0,0 +1,55 @@
+package com.lunamint.wallet;
+
+import java.util.concurrent.TimeUnit;
+
+import okhttp3.OkHttpClient;
+import retrofit2.Retrofit;
+import retrofit2.converter.gson.GsonConverterFactory;
+
+public class HttpClient {
+
+    private static Retrofit retrofitLcd = null;
+    private static Retrofit retrofitLuna = null;
+
+    public static Retrofit getInstanceLcd(String baseUrl) {
+        if (retrofitLcd != null && retrofitLcd.baseUrl().toString().contains(baseUrl))
+            return retrofitLcd;
+        OkHttpClient okHttpClient = new OkHttpClient.Builder()
+                .readTimeout(30, TimeUnit.SECONDS)
+                .connectTimeout(30, TimeUnit.SECONDS)
+                .build();
+        retrofitLcd = new Retrofit.Builder()
+                .baseUrl(baseUrl)
+                .client(okHttpClient)
+                .addConverterFactory(GsonConverterFactory.create())
+                .build();
+        return retrofitLcd;
+    }
+
+    public static Retrofit getInstanceLuna(String baseUrl) {
+        if (retrofitLuna == null) {
+            OkHttpClient okHttpClient = new OkHttpClient.Builder()
+                    .readTimeout(10, TimeUnit.SECONDS)
+                    .connectTimeout(10, TimeUnit.SECONDS)
+                    .build();
+            retrofitLuna = new Retrofit.Builder()
+                    .baseUrl(baseUrl)
+                    .client(okHttpClient)
+                    .addConverterFactory(GsonConverterFactory.create())
+                    .build();
+        }
+        return retrofitLuna;
+    }
+
+    public static Retrofit getInstanceCallback(String baseUrl) {
+        OkHttpClient okHttpClient = new OkHttpClient.Builder()
+                .readTimeout(10, TimeUnit.SECONDS)
+                .connectTimeout(10, TimeUnit.SECONDS)
+                .build();
+        return new Retrofit.Builder()
+                .baseUrl(baseUrl)
+                .client(okHttpClient)
+                .addConverterFactory(GsonConverterFactory.create())
+                .build();
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/LcdService.java b/TMessagesProj/src/main/java/com/lunamint/wallet/LcdService.java
new file mode 100644
index 000000000..bf54e6171
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/LcdService.java
@@ -0,0 +1,88 @@
+package com.lunamint.wallet;
+
+import com.google.gson.JsonObject;
+import com.lunamint.wallet.model.AccountStatus;
+import com.lunamint.wallet.model.BlockInfo;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.model.Proposal;
+import com.lunamint.wallet.model.SendResult;
+import com.lunamint.wallet.model.StakingInfo;
+import com.lunamint.wallet.model.Unbonding;
+import com.lunamint.wallet.model.Validator;
+import com.lunamint.wallet.model.Voter;
+import com.lunamint.wallet.model.tx.DefaultHistory;
+import com.lunamint.wallet.model.tx.proposal.ProposalHistory;
+import com.lunamint.wallet.model.tx.send.SendHistory;
+
+import java.util.ArrayList;
+
+import okhttp3.ResponseBody;
+import retrofit2.Call;
+import retrofit2.http.Body;
+import retrofit2.http.GET;
+import retrofit2.http.Headers;
+import retrofit2.http.POST;
+import retrofit2.http.Path;
+import retrofit2.http.Query;
+
+public interface LcdService {
+
+    @GET("blocks/latest")
+    Call<BlockInfo> getLatestBlock();
+
+    @GET("bank/balances/{address}")
+    Call<ArrayList<Coin>> getBalances(@Path("address") String address);
+
+    @GET("auth/accounts/{address}")
+    Call<AccountStatus> getAccountStatus(@Path("address") String address);
+
+    @GET("staking/validators")
+    Call<ArrayList<Validator>> getValidators();
+
+    @GET("staking/delegators/{delegatorAddr}/delegations/{validatorAddr}")
+    Call<StakingInfo> getStakingInfo(@Path("delegatorAddr") String delegatorAddr, @Path("validatorAddr") String validatorAddr);
+
+    @GET("staking/delegators/{delegatorAddr}/delegations")
+    Call<ArrayList<StakingInfo>> getDelegations(@Path("delegatorAddr") String delegatorAddr);
+
+    @GET("staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}")
+    Call<Unbonding> getUnbondingDelegation(@Path("delegatorAddr") String delegatorAddr, @Path("validatorAddr") String validatorAddr);
+
+    @GET("staking/delegators/{delegatorAddr}/unbonding_delegations")
+    Call<ArrayList<Unbonding>> getUnbondingDelegations(@Path("delegatorAddr") String delegatorAddr);
+
+    @Headers({"Content-Type: application/json"})
+    @POST("txs")
+    Call<SendResult> sendTransaction(@Body JsonObject tx);
+
+    @GET("txs")
+    Call<ArrayList<SendHistory>> getSendHistory(@Query("sender") String sender);
+
+    @GET("txs")
+    Call<ArrayList<SendHistory>> getRecipientHistory(@Query("recipient") String recipient);
+
+    @GET("txs")
+    Call<ArrayList<ProposalHistory>> getProposalHistory(@Query("voter") String voter);
+
+    @GET("txs")
+    Call<ArrayList<DefaultHistory>> getDelegationHistory(@Query("delegator") String delegator);
+
+    @GET("txs/{hash}")
+    Call<DefaultHistory> getTransactionDetail(@Path("hash") String hash);
+
+    @GET("gov/proposals")
+    Call<ArrayList<Proposal>> getProposals(@Query("status") String status);
+
+    @GET("gov/proposals/{proposalId}/votes")
+    Call<ArrayList<Voter>> getVoters(@Path("proposalId") String proposalId);
+
+    @GET("distribution/delegators/{delegatorAddr}/rewards")
+    Call<ArrayList<Coin>> getRewards(@Path("delegatorAddr") String delegatorAddr);
+
+    @Headers({"Content-Type: application/json"})
+    @POST("{endpoint}")
+    Call<ResponseBody> sendResultToCallback(@Path("endpoint") String endpoint, @Body JsonObject result);
+
+    @GET("syncing")
+    Call<Boolean> getNodeStatus();
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/LunaService.java b/TMessagesProj/src/main/java/com/lunamint/wallet/LunaService.java
new file mode 100644
index 000000000..b87adb395
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/LunaService.java
@@ -0,0 +1,17 @@
+package com.lunamint.wallet;
+
+import com.lunamint.wallet.model.BlockchainInfo;
+import com.lunamint.wallet.model.LunaStatus;
+
+import java.util.ArrayList;
+
+import retrofit2.Call;
+import retrofit2.http.GET;
+import retrofit2.http.Query;
+
+public interface LunaService {
+    @GET("app/status")
+    Call<LunaStatus> getStatus(@Query("os") String os);
+    @GET("blockchain/info")
+    Call<ArrayList<BlockchainInfo>> getBlockchainInfo();
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/WalletManager.java b/TMessagesProj/src/main/java/com/lunamint/wallet/WalletManager.java
new file mode 100644
index 000000000..ee0a3ac08
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/WalletManager.java
@@ -0,0 +1,432 @@
+package com.lunamint.wallet;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.support.annotation.NonNull;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.model.AccountStatus;
+import com.lunamint.wallet.model.CmdResult;
+import com.lunamint.wallet.utils.FileUtil;
+
+import org.telegram.messenger.LocaleController;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
+
+
+public class WalletManager {
+
+    private final static String TAG = "WalletManager";
+
+    public static final int GAIA_INIT_SUCCESS = 1;
+    public static final int GAIA_INIT_FAIL = 2;
+    public final static int GET_ACCOUNT_LIST = 3;
+    public final static int CREATE_ACCOUNT = 4;
+    public final static int DELETE_ACCOUNT = 5;
+    public final static int MAKE_TX_SEND = 6;
+    public final static int MAKE_TX_STAKE = 7;
+    public final static int MAKE_TX_UNSTAKE = 8;
+    public final static int MAKE_TX_REDELEGATE = 9;
+    public final static int MAKE_TX_VOTE = 10;
+    public final static int MAKE_TX_CLAIM_REWARD = 11;
+    public final static int TX_SIGN = 12;
+
+    private final static String GAIA_VERSION = "0.34.3";
+    private final static String GAIACLI = "gaiacli_arm";
+
+    private final static String GAIACLI_CHECKSUM = "B3348E857C6C5F978BE0A263A1F167DF";
+    private final static String GAIACLI_OLD_HASHES[] = {"A256C17BC2B0B5BB98C42826CEE274E9","64841DDB00386FE3896B7C9D16DE8BAB"};
+
+    private String internalStoragePath = null;
+
+    public boolean activatedSend = false;
+    public boolean isLowerMinAppVersion = false;
+
+    private static volatile WalletManager Instance = null;
+
+    public static WalletManager getInstance() {
+        WalletManager walletManagerInstance = Instance;
+        if (walletManagerInstance == null) {
+            synchronized (WalletManager.class) {
+                walletManagerInstance = Instance;
+                if (walletManagerInstance == null) {
+                    Instance = walletManagerInstance = new WalletManager();
+                }
+            }
+        }
+        return walletManagerInstance;
+    }
+
+    public void init(@NonNull final Context context, @NonNull final Handler handler) {
+        internalStoragePath = context.getFilesDir().getAbsolutePath();
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                setupGaia(context, handler);
+            }
+        }).start();
+    }
+
+    /*
+    public void getCliVersion(Handler handler) {
+        excute(handler, WalletManager.GAIACLI, new String[]{getGaiacli(), GaiaCommand.VERSION, "--output=json"});
+    }
+
+    public void getStatus(Handler handler) {
+        excute(handler, WalletManager.GAIACLI, new String[]{getGaiacli(), GaiaCommand.STATUS, "--output=json"});
+    }*/
+
+    public void getAccountList(Handler handler) {
+        excute(GET_ACCOUNT_LIST, handler, WalletManager.GAIACLI, new String[]{getGaiacli(), GaiaCommand.KEYS, GaiaCommand.LIST, "--output=json"});
+    }
+
+    public void createAccount(Handler handler, String accountName, String password) {
+        excute(CREATE_ACCOUNT, handler, WalletManager.GAIACLI, new String[]{
+                getGaiacli(),
+                GaiaCommand.KEYS,
+                GaiaCommand.ADD,
+                accountName,
+                "--output=json"
+        }, password);
+    }
+
+    public void createAccount(Handler handler, String seed, String accountName, String password) {
+        excute(CREATE_ACCOUNT, handler, WalletManager.GAIACLI, new String[]{
+                getGaiacli(),
+                GaiaCommand.KEYS,
+                GaiaCommand.ADD,
+                accountName,
+                "--recover",
+                "--output=json"
+        }, password, seed);
+    }
+
+    public void deleteAccount(Handler handler, String accountName, String password) {
+        excute(DELETE_ACCOUNT, handler, WalletManager.GAIACLI, new String[]{
+                getGaiacli(),
+                GaiaCommand.KEYS,
+                GaiaCommand.DELETE,
+                accountName,
+                "--output=json"
+        }, password);
+    }
+
+    public void makeTxSend(Handler handler, String fromAddress, String toAddress, String amount, String fee, String denom, String memo) {
+        excute(MAKE_TX_SEND, handler, WalletManager.GAIACLI, new String[]{
+                getGaiacli(),
+                GaiaCommand.TX,
+                GaiaCommand.SEND,
+                toAddress,
+                amount + denom,
+                "--from=" + fromAddress,
+                "--memo=" + memo,
+                "--fees=" + fee + Blockchain.getInstance().getReserveDenom(),
+                "--gas=300000",
+                "--chain-id=" + Blockchain.getInstance().getChainId(),
+                "--node=" + Blockchain.getInstance().getNode(),
+                "--generate-only=true",
+                "--output=json"
+        });
+    }
+
+    public void makeTransactionStake(Handler handler, String fromAddress, String password, String validatorAddress, String amount, String fee, String denom) {
+        excute(MAKE_TX_STAKE, handler, WalletManager.GAIACLI, new String[]{
+                getGaiacli(),
+                GaiaCommand.TX,
+                GaiaCommand.STAKE,
+                GaiaCommand.DELEGATE,
+                validatorAddress,
+                amount + denom,
+                "--from=" + fromAddress,
+                "--fees=" + fee + Blockchain.getInstance().getReserveDenom(),
+                "--gas=300000",
+                "--chain-id=" + Blockchain.getInstance().getChainId(),
+                "--node=" + Blockchain.getInstance().getNode(),
+                "--generate-only=true",
+                "--output=json"
+        }, password);
+    }
+
+    public void makeTransactionUnstake(Handler handler, String fromAddress, String password, String validatorAddress, String amount, String fee, String denom) {
+        excute(MAKE_TX_UNSTAKE, handler, WalletManager.GAIACLI, new String[]{
+                getGaiacli(),
+                GaiaCommand.TX,
+                GaiaCommand.STAKE,
+                GaiaCommand.UNBOND,
+                validatorAddress,
+                amount + denom,
+                "--from=" + fromAddress,
+                "--fees=" + fee + Blockchain.getInstance().getReserveDenom(),
+                "--gas=300000",
+                "--chain-id=" + Blockchain.getInstance().getChainId(),
+                "--node=" + Blockchain.getInstance().getNode(),
+                "--generate-only=true",
+                "--output=json"
+        }, password);
+    }
+
+    public void makeTransactionRedelegate(Handler handler, String fromAddress, String password, String sourceValidatorAddress, String destValidatorAddress, String amount, String fee, String denom) {
+        excute(MAKE_TX_REDELEGATE, handler, WalletManager.GAIACLI, new String[]{
+                getGaiacli(),
+                GaiaCommand.TX,
+                GaiaCommand.STAKE,
+                GaiaCommand.REDELEGATE,
+                sourceValidatorAddress,
+                destValidatorAddress,
+                amount + denom,
+                "--from=" + fromAddress,
+                "--fees=" + fee + Blockchain.getInstance().getReserveDenom(),
+                "--gas=300000",
+                "--chain-id=" + Blockchain.getInstance().getChainId(),
+                "--node=" + Blockchain.getInstance().getNode(),
+                "--generate-only=true",
+                "--output=json"
+        }, password);
+    }
+
+    public void makeTxVote(Handler handler, String accountName, String password, String proposalId, String vote, String fee) {
+        excute(MAKE_TX_VOTE, handler, WalletManager.GAIACLI, new String[]{
+                getGaiacli(),
+                GaiaCommand.TX,
+                GaiaCommand.GOV,
+                GaiaCommand.VOTE,
+                proposalId,
+                vote,
+                "--from=" + accountName,
+                "--fees=" + fee + Blockchain.getInstance().getReserveDenom(),
+                "--gas=300000",
+                "--chain-id=" + Blockchain.getInstance().getChainId(),
+                "--node=" + Blockchain.getInstance().getNode(),
+                "--generate-only=true",
+                "--output=json"
+        }, password);
+    }
+
+    public void makeTxClaimReward(Handler handler, String fromAddress, String password, String fee) {
+        excute(MAKE_TX_CLAIM_REWARD, handler, WalletManager.GAIACLI, new String[]{
+                getGaiacli(),
+                GaiaCommand.TX,
+                GaiaCommand.DISTR,
+                GaiaCommand.WITHDRAW_ALL_REWARDS,
+                "--from=" + fromAddress,
+                "--fees=" + fee + Blockchain.getInstance().getReserveDenom(),
+                "--gas=300000",
+                "--chain-id=" + Blockchain.getInstance().getChainId(),
+                "--node=" + Blockchain.getInstance().getNode(),
+                "--generate-only=true",
+                "--output=json"
+        }, password);
+    }
+
+    public void sign(Handler handler, String accountName, String password, String txPath, AccountStatus accountStatus) {
+        excute(TX_SIGN, handler, WalletManager.GAIACLI, new String[]{
+                getGaiacli(),
+                GaiaCommand.TX,
+                GaiaCommand.SIGN,
+                txPath,
+                "--from=" + accountName,
+                "--account-number=" + accountStatus.getValue().getAccountNumber(),
+                "--sequence=" + accountStatus.getValue().getSequence(),
+                "--chain-id=" + Blockchain.getInstance().getChainId(),
+                "--offline=true",
+                "--output=json"
+        }, password);
+    }
+
+
+    public boolean isExistGaia() {
+        return (FileUtil.isFileExist(internalStoragePath, WalletManager.GAIACLI));
+    }
+
+    public boolean checksumGaiacli() {
+        return FileUtil.getChecksumMD5(internalStoragePath + "/" + WalletManager.GAIACLI).equals(GAIACLI_CHECKSUM);
+    }
+
+    public boolean isOldHash() {
+        boolean isOld = false;
+        String hash = FileUtil.getChecksumMD5(internalStoragePath + "/" + WalletManager.GAIACLI);
+        for (String oldHash : GAIACLI_OLD_HASHES) {
+            if (hash.equals(oldHash)) {
+                isOld = true;
+                break;
+            }
+        }
+        return isOld;
+    }
+
+    private void setupGaia(@NonNull Context context, Handler handler) {
+        if (isExistGaia()) {
+            if (isOldHash()) {
+                FileUtil.deleteFile(internalStoragePath, WalletManager.GAIACLI);
+                copyGaiaCli(context, handler);
+            } else {
+                if (handler != null) handler.sendEmptyMessage(GAIA_INIT_SUCCESS);
+            }
+        } else {
+            copyGaiaCli(context, handler);
+        }
+    }
+
+    private void copyGaiaCli(@NonNull Context context, Handler handler) {
+        boolean result = FileUtil.copy(context, internalStoragePath, WalletManager.GAIACLI);
+        if (result) {
+            if (handler != null) handler.sendEmptyMessage(GAIA_INIT_SUCCESS);
+        } else {
+            if (handler != null) handler.sendEmptyMessage(GAIA_INIT_FAIL);
+        }
+    }
+
+    private void excute(final int action, final Handler handler, @NonNull final String exec, final String mainCmd[], final String... cmds) {
+        for (String t : mainCmd) {
+        }
+        if (mainCmd.length == 0) {
+            sendResult(action, handler, LocaleController.getString("noHaveCommandError", R.string.noHaveCommandError), null);
+            return;
+        }
+
+        if (hasBadRequest(mainCmd)) {
+            sendResult(action, handler, LocaleController.getString("badRequestError", R.string.badRequestError), null);
+            return;
+        }
+
+        if (mainCmd.length > 5 && mainCmd[4].contains("--recover")) {
+            if (cmds.length > 2) {
+                sendResult(action, handler, LocaleController.getString("badRequestError", R.string.badRequestError), null);
+                return;
+            }
+        } else {
+            if (cmds.length > 1) {
+                sendResult(action, handler, LocaleController.getString("badRequestError", R.string.badRequestError), null);
+                return;
+            }
+        }
+
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+
+                if (!isExistGaia()) {
+                    sendResult(action, handler, LocaleController.getString("notBeenInitWalletManagerError", R.string.notBeenInitWalletManagerError), null);
+                    return;
+                }
+                if (!checksumGaiacli()) {
+                    sendResult(action, handler, LocaleController.getString("noMatchChecksumError", R.string.noMatchChecksumError), null);
+                    return;
+                }
+
+                try {
+                    File execFile = new File(internalStoragePath, exec);
+                    boolean isExecutable = FileUtil.setExecutable(execFile);
+                    if (!isExecutable) {
+                        sendResult(action, handler, LocaleController.getString("noExecutableError", R.string.noExecutableError), null);
+                        return;
+                    }
+
+                    Process p = Runtime.getRuntime().exec(mainCmd);
+
+                    if (cmds.length >= 1) {
+                        for (String cmd : cmds) {
+                            boolean putCmdResult = putCmd(p, cmd);
+                            if (!putCmdResult) {
+                                sendResult(action, handler, LocaleController.getString("failedExcuteSubCmdError", R.string.failedExcuteSubCmdError), null);
+                                return;
+                            }
+                        }
+                    }
+
+                    BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
+                    int read;
+                    char[] buffer = new char[4096];
+                    StringBuffer out = new StringBuffer();
+                    while ((read = in.read(buffer)) > 0) {
+                        out.append(buffer, 0, read);
+                    }
+                    in.close();
+
+                    boolean isError = false;
+                    BufferedReader br = new BufferedReader(new InputStreamReader(p.getErrorStream(), "UTF-8"));
+                    StringBuffer error = new StringBuffer();
+                    while ((read = br.read(buffer)) > 0) {
+                        isError = true;
+                        error.append(buffer, 0, read);
+                    }
+                    br.close();
+
+                    if (isError) {
+                        if (mainCmd.length >= 3 && mainCmd[1].contains(GaiaCommand.KEYS) && mainCmd[2].contains(GaiaCommand.ADD) && error.substring(0).contains("pubkey")) {
+                            sendResult(action, handler, null, error.substring(0));
+                        } else {
+                            sendResult(action, handler, error.substring(0), null);
+                        }
+                        return;
+                    }
+
+                    p.waitFor();
+
+                    sendResult(action, handler, null, out.substring(0));
+                } catch (IOException e) {
+                    e.printStackTrace();
+                    sendResult(action, handler, e.getMessage(), null);
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                    sendResult(action, handler, e.getMessage(), null);
+                }
+            }
+        }).start();
+    }
+
+    private void sendResult(int action, Handler handler, String err, String result) {
+        if (handler == null) return;
+
+        CmdResult cmdResult;
+
+        if (err != null) {
+            cmdResult = new CmdResult(err, null);
+        } else {
+            cmdResult = new CmdResult(null, result);
+        }
+
+        Bundle bundle = new Bundle();
+        bundle.putSerializable("result", cmdResult);
+
+        Message msg = new Message();
+        msg.setData(bundle);
+
+        msg.what = action;
+
+        handler.sendMessage(msg);
+    }
+
+    private boolean putCmd(Process p, String cmd) {
+        boolean result = true;
+        try {
+            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(p.getOutputStream()));
+            bw.write(cmd + "\n");
+            bw.flush();
+        } catch (IOException e) {
+            e.printStackTrace();
+            result = false;
+        }
+        return result;
+    }
+
+    private String getGaiacli() {
+        return internalStoragePath + File.separator + WalletManager.GAIACLI;
+    }
+
+    private boolean hasBadRequest(String[] cmds) {
+        for (String cmd : cmds) {
+            if (cmd.contains("&") || cmd.contains("<") || cmd.contains(">") || cmd.contains("\"") || cmd.contains("->")) {
+                return true;
+            }
+        }
+        return false;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/AccountInfo.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/AccountInfo.java
new file mode 100644
index 000000000..998b9b140
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/AccountInfo.java
@@ -0,0 +1,33 @@
+package com.lunamint.wallet.model;
+
+import android.support.annotation.NonNull;
+
+public class AccountInfo {
+    private String name;
+    private String type;
+    private String address;
+    private String pub_key;
+
+    public AccountInfo(@NonNull String name, @NonNull String type, @NonNull String address, @NonNull String pub_key){
+        this.name = name;
+        this.type = type;
+        this.address = address;
+        this.pub_key = pub_key;
+    }
+
+    public String getName(){
+        return name;
+    }
+
+    public String getType(){
+        return type;
+    }
+
+    public String getAddress(){
+        return address;
+    }
+
+    public String getPublicKey(){
+        return pub_key;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/AccountInfoWithSeed.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/AccountInfoWithSeed.java
new file mode 100644
index 000000000..b8f028e26
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/AccountInfoWithSeed.java
@@ -0,0 +1,43 @@
+package com.lunamint.wallet.model;
+
+import android.support.annotation.NonNull;
+
+public class AccountInfoWithSeed {
+    private String name;
+    private String type;
+    private String address;
+    private String pub_key;
+    private String seed;
+
+    public AccountInfoWithSeed(@NonNull String name, @NonNull String type, @NonNull String address, @NonNull String pub_key, @NonNull String seed){
+        this.name = name;
+        this.type = type;
+        this.address = address;
+        this.pub_key = pub_key;
+        this.seed = seed;
+    }
+
+    public String getName(){
+        return name;
+    }
+
+    public String getType(){
+        return type;
+    }
+
+    public String getAddress(){
+        return address;
+    }
+
+    public String getPublicKey(){
+        return pub_key;
+    }
+
+    public String getSeed(){
+        return seed;
+    }
+
+    public void clear(){
+        seed = "";
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/AccountStatus.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/AccountStatus.java
new file mode 100644
index 000000000..06d8b458b
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/AccountStatus.java
@@ -0,0 +1,29 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class AccountStatus {
+    @SerializedName("type")
+    @Expose
+    private String type;
+    @SerializedName("value")
+    @Expose
+    private AccountStatusValue value;
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public AccountStatusValue getValue() {
+        return value;
+    }
+
+    public void setValue(AccountStatusValue value) {
+        this.value = value;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/AccountStatusValue.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/AccountStatusValue.java
new file mode 100644
index 000000000..d5414eca9
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/AccountStatusValue.java
@@ -0,0 +1,40 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class AccountStatusValue {
+    @SerializedName("address")
+    @Expose
+    private String address;
+    @SerializedName("account_number")
+    @Expose
+    private String accountNumber;
+    @SerializedName("sequence")
+    @Expose
+    private String sequence;
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address;
+    }
+
+    public String getAccountNumber() {
+        return accountNumber;
+    }
+
+    public void setAccountNumber(String accountNumber) {
+        this.accountNumber = accountNumber;
+    }
+
+    public String getSequence() {
+        return sequence;
+    }
+
+    public void setSequence(String sequence) {
+        this.sequence = sequence;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/Amount.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Amount.java
new file mode 100644
index 000000000..811d3a9fc
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Amount.java
@@ -0,0 +1,29 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class Amount {
+    @SerializedName("denom")
+    @Expose
+    private String denom;
+    @SerializedName("amount")
+    @Expose
+    private String amount;
+
+    public String getDenom() {
+        return denom;
+    }
+
+    public void setDenom(String denom) {
+        this.denom = denom;
+    }
+
+    public String getAmount() {
+        return amount;
+    }
+
+    public void setAmount(String amount) {
+        this.amount = amount;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/AppVersion.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/AppVersion.java
new file mode 100644
index 000000000..0e047cf1c
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/AppVersion.java
@@ -0,0 +1,29 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class AppVersion {
+    @SerializedName("min_version")
+    @Expose
+    private Integer minVersion;
+    @SerializedName("latest_version")
+    @Expose
+    private Integer latestVersion;
+
+    public Integer getMinVersion() {
+        return minVersion;
+    }
+
+    public void setMinVersion(Integer minVersion) {
+        this.minVersion = minVersion;
+    }
+
+    public Integer getLatestVersion() {
+        return latestVersion;
+    }
+
+    public void setLatestVersion(Integer latestVersion) {
+        this.latestVersion = latestVersion;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/Block.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Block.java
new file mode 100644
index 000000000..79a113f6f
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Block.java
@@ -0,0 +1,18 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class Block {
+    @SerializedName("header")
+    @Expose
+    private BlockHeader header;
+
+    public BlockHeader getHeader() {
+        return header;
+    }
+
+    public void setHeader(BlockHeader header) {
+        this.header = header;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/BlockHeader.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/BlockHeader.java
new file mode 100644
index 000000000..a937eed0e
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/BlockHeader.java
@@ -0,0 +1,29 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class BlockHeader {
+    @SerializedName("chain_id")
+    @Expose
+    private String chain_id;
+    @SerializedName("height")
+    @Expose
+    private int height;
+
+    public String getChainId() {
+        return chain_id;
+    }
+
+    public void setChainId(String chain_id) {
+        this.chain_id = chain_id;
+    }
+
+    public int getHeight() {
+        return height;
+    }
+
+    public void setHeight(int height) {
+        this.height = height;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/BlockInfo.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/BlockInfo.java
new file mode 100644
index 000000000..d9f24bb9d
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/BlockInfo.java
@@ -0,0 +1,20 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.util.ArrayList;
+
+public class BlockInfo {
+    @SerializedName("block")
+    @Expose
+    private Block block;
+
+    public Block getBlock() {
+        return block;
+    }
+
+    public void setBlock(Block block) {
+        this.block = block;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/BlockchainInfo.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/BlockchainInfo.java
new file mode 100644
index 000000000..63b64bab4
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/BlockchainInfo.java
@@ -0,0 +1,42 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.util.ArrayList;
+
+public class BlockchainInfo {
+    @SerializedName("chain_id")
+    @Expose
+    private String chain_id;
+    @SerializedName("reserve_denom")
+    @Expose
+    private ReserveDenom reserve_denom;
+    @SerializedName("list")
+    @Expose
+    private ArrayList<Node> list;
+
+    public String getChainId() {
+        return chain_id;
+    }
+
+    public void setChainId(String chain_id) {
+        this.chain_id = chain_id;
+    }
+
+    public ReserveDenom getReserveDenom() {
+        return reserve_denom;
+    }
+
+    public void setReserveDenom(ReserveDenom reserve_denom) {
+        this.reserve_denom = reserve_denom;
+    }
+
+    public ArrayList<Node> getList() {
+        return list;
+    }
+
+    public void setList(ArrayList<Node> list) {
+        this.list = list;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/CheckTx.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/CheckTx.java
new file mode 100644
index 000000000..5fa08f3e5
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/CheckTx.java
@@ -0,0 +1,53 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.util.List;
+
+public class CheckTx {
+    @SerializedName("log")
+    @Expose
+    private String log;
+    @SerializedName("gasWanted")
+    @Expose
+    private String gasWanted;
+    @SerializedName("gasUsed")
+    @Expose
+    private String gasUsed;
+    @SerializedName("tags")
+    @Expose
+    private List<Tag> tags = null;
+
+    public String getLog() {
+        return log;
+    }
+
+    public void setLog(String log) {
+        this.log = log;
+    }
+
+    public String getGasWanted() {
+        return gasWanted;
+    }
+
+    public void setGasWanted(String gasWanted) {
+        this.gasWanted = gasWanted;
+    }
+
+    public String getGasUsed() {
+        return gasUsed;
+    }
+
+    public void setGasUsed(String gasUsed) {
+        this.gasUsed = gasUsed;
+    }
+
+    public List<Tag> getTags() {
+        return tags;
+    }
+
+    public void setTags(List<Tag> tags) {
+        this.tags = tags;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/CmdResult.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/CmdResult.java
new file mode 100644
index 000000000..25b498140
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/CmdResult.java
@@ -0,0 +1,26 @@
+package com.lunamint.wallet.model;
+
+import java.io.Serializable;
+
+public class CmdResult implements Serializable {
+
+    private String err_msg;
+    private String data;
+
+    public CmdResult( String err_msg, String data){
+        this.err_msg = err_msg;
+        this.data = data;
+    }
+
+    public String getErrMsg(){
+        return err_msg;
+    }
+
+    public String getData(){
+        return data;
+    }
+
+    public void clear(){
+        data = null;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/Coin.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Coin.java
new file mode 100644
index 000000000..48b5eff4f
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Coin.java
@@ -0,0 +1,48 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.utils.BigDecimalUtil;
+
+import java.io.Serializable;
+
+public class Coin implements Serializable {
+
+    @SerializedName("denom")
+    @Expose
+    private String denom;
+    @SerializedName("amount")
+    @Expose
+    private String amount;
+
+    public String getDenom() {
+        return denom;
+    }
+
+    public String getDenomDisplayName() {
+        return denom.equals(Blockchain.getInstance().getReserveDenom()) ? Blockchain.getInstance().getReserveDisplayName() : denom;
+    }
+
+    public void setDenom(String denom) {
+        this.denom = denom;
+    }
+
+    public String getAmount() {
+        if (amount == null) {
+            return "0";
+        } else if (amount.length() == 0) {
+            return "";
+        } else {
+            return BigDecimalUtil.getNumberNano(amount, "4");
+        }
+    }
+
+    public String getAmountOrigin() {
+        return amount;
+    }
+
+    public void setAmount(String amount) {
+        this.amount = amount;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/Commission.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Commission.java
new file mode 100644
index 000000000..852110b34
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Commission.java
@@ -0,0 +1,53 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.io.Serializable;
+
+public class Commission implements Serializable {
+    @SerializedName("rate")
+    @Expose
+    private String rate;
+    @SerializedName("max_rate")
+    @Expose
+    private String maxRate;
+    @SerializedName("max_change_rate")
+    @Expose
+    private String maxChangeRate;
+    @SerializedName("update_time")
+    @Expose
+    private String updateTime;
+
+    public String getRate() {
+        return rate;
+    }
+
+    public void setRate(String rate) {
+        this.rate = rate;
+    }
+
+    public String getMaxRate() {
+        return maxRate;
+    }
+
+    public void setMaxRate(String maxRate) {
+        this.maxRate = maxRate;
+    }
+
+    public String getMaxChangeRate() {
+        return maxChangeRate;
+    }
+
+    public void setMaxChangeRate(String maxChangeRate) {
+        this.maxChangeRate = maxChangeRate;
+    }
+
+    public String getUpdateTime() {
+        return updateTime;
+    }
+
+    public void setUpdateTime(String updateTime) {
+        this.updateTime = updateTime;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/DeliverTx.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/DeliverTx.java
new file mode 100644
index 000000000..15acfb714
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/DeliverTx.java
@@ -0,0 +1,53 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.util.List;
+
+public class DeliverTx {
+    @SerializedName("log")
+    @Expose
+    private String log;
+    @SerializedName("gasWanted")
+    @Expose
+    private String gasWanted;
+    @SerializedName("gasUsed")
+    @Expose
+    private String gasUsed;
+    @SerializedName("tags")
+    @Expose
+    private List<Tag> tags = null;
+
+    public String getLog() {
+        return log;
+    }
+
+    public void setLog(String log) {
+        this.log = log;
+    }
+
+    public String getGasWanted() {
+        return gasWanted;
+    }
+
+    public void setGasWanted(String gasWanted) {
+        this.gasWanted = gasWanted;
+    }
+
+    public String getGasUsed() {
+        return gasUsed;
+    }
+
+    public void setGasUsed(String gasUsed) {
+        this.gasUsed = gasUsed;
+    }
+
+    public List<Tag> getTags() {
+        return tags;
+    }
+
+    public void setTags(List<Tag> tags) {
+        this.tags = tags;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/Description.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Description.java
new file mode 100644
index 000000000..1d720ad49
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Description.java
@@ -0,0 +1,53 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.io.Serializable;
+
+public class Description implements Serializable {
+    @SerializedName("moniker")
+    @Expose
+    private String moniker;
+    @SerializedName("identity")
+    @Expose
+    private String identity;
+    @SerializedName("website")
+    @Expose
+    private String website;
+    @SerializedName("details")
+    @Expose
+    private String details;
+
+    public String getMoniker() {
+        return moniker;
+    }
+
+    public void setMoniker(String moniker) {
+        this.moniker = moniker;
+    }
+
+    public String getIdentity() {
+        return identity;
+    }
+
+    public void setIdentity(String identity) {
+        this.identity = identity;
+    }
+
+    public String getWebsite() {
+        return website;
+    }
+
+    public void setWebsite(String website) {
+        this.website = website;
+    }
+
+    public String getDetails() {
+        return details;
+    }
+
+    public void setDetails(String details) {
+        this.details = details;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/Fee.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Fee.java
new file mode 100644
index 000000000..743153b5b
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Fee.java
@@ -0,0 +1,31 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.util.List;
+
+public class Fee {
+    @SerializedName("amount")
+    @Expose
+    private List<Amount> amount = null;
+    @SerializedName("gas")
+    @Expose
+    private String gas;
+
+    public List<Amount> getAmount() {
+        return amount;
+    }
+
+    public void setAmount(List<Amount> amount) {
+        this.amount = amount;
+    }
+
+    public String getGas() {
+        return gas;
+    }
+
+    public void setGas(String gas) {
+        this.gas = gas;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/LMessage.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/LMessage.java
new file mode 100644
index 000000000..efc307a28
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/LMessage.java
@@ -0,0 +1,125 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+
+import org.json.JSONObject;
+
+import java.io.Serializable;
+
+public class LMessage implements Serializable {
+    private int version;
+    private String message;
+
+    public void setMessage(String message) {
+        this.message = message;
+    }
+
+    public void setVersion(int version) {
+        this.version = version;
+    }
+
+    public int getVersion() {
+        return version;
+    }
+
+    public String getAction() {
+        try {
+            JSONObject jo = new JSONObject(message);
+            return jo.getString("action");
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    public String getRequesterId() {
+        try {
+            JSONObject jo = new JSONObject(message);
+            return jo.getString("requester_t_id");
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    public String getFrom() {
+        try {
+            JSONObject jo = new JSONObject(message);
+            return jo.getJSONObject("tx").getString("from");
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    public String getTo() {
+        try {
+            JSONObject jo = new JSONObject(message);
+            return jo.getJSONObject("tx").getString("to");
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    public String getAmount() {
+        try {
+            JSONObject jo = new JSONObject(message);
+            return jo.getJSONObject("tx").getString("amount");
+        } catch (Exception e) {
+            return "";
+        }
+    }
+
+    public String getDenom() {
+        try {
+            JSONObject jo = new JSONObject(message);
+            return jo.getJSONObject("tx").getString("denom");
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    public String getMemo() {
+        try {
+            JSONObject jo = new JSONObject(message);
+            return jo.getJSONObject("tx").getString("memo");
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    public String getCallbackUrl() {
+        try {
+            JSONObject jo = new JSONObject(message);
+            return jo.getJSONObject("callback").getString("url");
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    public String getCallbackEndpoint() {
+        try {
+            JSONObject jo = new JSONObject(message);
+            return jo.getJSONObject("callback").getString("endpoint");
+        } catch (Exception e) {
+            return "";
+        }
+    }
+
+    public JsonObject getCallbackBody() {
+        JsonObject gsonResult = null;
+        try {
+            JSONObject jo = new JSONObject(message).getJSONObject("callback").getJSONObject("custom_fields");
+            if (jo == null) jo = new JSONObject();
+            jo.put("lmi_version", version);
+            jo.put("requester_t_id", version);
+
+            Gson gson = new GsonBuilder().create();
+            JsonElement element = gson.fromJson(jo.toString(), JsonElement.class);
+            gsonResult = element.getAsJsonObject();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return gsonResult;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/Log.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Log.java
new file mode 100644
index 000000000..b926f6156
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Log.java
@@ -0,0 +1,32 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class Log {
+    @SerializedName("msg_index")
+    @Expose
+    private String msgIndex;
+    @SerializedName("success")
+    @Expose
+    private Boolean success;
+    @SerializedName("log")
+    @Expose
+    private String log;
+
+    public String getMsgIndex() {
+        return msgIndex;
+    }
+
+    public void setMsgIndex(String msgIndex) {
+        this.msgIndex = msgIndex;
+    }
+
+    public Boolean getSuccess() {
+        return success;
+    }
+
+    public void setSuccess(String key) {
+        this.success = success;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/LunaStatus.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/LunaStatus.java
new file mode 100644
index 000000000..394c1a614
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/LunaStatus.java
@@ -0,0 +1,29 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class LunaStatus {
+    @SerializedName("status")
+    @Expose
+    private Status status;
+    @SerializedName("version")
+    @Expose
+    private AppVersion version;
+
+    public Status getStatus() {
+        return status;
+    }
+
+    public void setStatus(Status status) {
+        this.status = status;
+    }
+
+    public AppVersion getVersion() {
+        return version;
+    }
+
+    public void setVersion(AppVersion version) {
+        this.version = version;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/Node.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Node.java
new file mode 100644
index 000000000..db3cdf913
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Node.java
@@ -0,0 +1,58 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+import com.lunamint.wallet.Blockchain;
+
+public class Node {
+    @SerializedName("name")
+    @Expose
+    private String name;
+    @SerializedName("lcd")
+    @Expose
+    private String lcd;
+    @SerializedName("node")
+    @Expose
+    private String node;
+    @SerializedName("isActive")
+    @Expose
+    private boolean isActive;
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getLcd() {
+        return lcd;
+    }
+
+    public void setLcd(String lcd) {
+        this.lcd = lcd;
+    }
+
+    public String getNode() {
+        return node;
+    }
+
+    public void setNode(String node) {
+        this.node = node;
+    }
+
+    public boolean getIsActive() {
+        return isActive;
+    }
+
+    public void setActive(boolean active) {
+        this.isActive = active;
+    }
+
+    public boolean getIsSelected() {
+        if (lcd == null) return false;
+        if (lcd.equals(Blockchain.getInstance().getLcd())) return true;
+        return false;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/Proposal.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Proposal.java
new file mode 100644
index 000000000..42c2f7cf4
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Proposal.java
@@ -0,0 +1,131 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.io.Serializable;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.List;
+
+public class Proposal implements Serializable {
+    @SerializedName("proposal_content")
+    @Expose
+    private ProposalContent proposalContent;
+    @SerializedName("proposal_id")
+    @Expose
+    private String proposalId;
+    @SerializedName("proposal_status")
+    @Expose
+    private String proposalStatus;
+    @SerializedName("final_tally_result")
+    @Expose
+    private TallyResult finalTallyResult;
+    @SerializedName("submit_time")
+    @Expose
+    private String submitTime;
+    @SerializedName("deposit_end_time")
+    @Expose
+    private String depositEndTime;
+    @SerializedName("total_deposit")
+    @Expose
+    private List<Coin> totalDeposit = null;
+    @SerializedName("voting_start_time")
+    @Expose
+    private String votingStartTime;
+    @SerializedName("voting_end_time")
+    @Expose
+    private String votingEndTime;
+
+    public ProposalContent getProposalContent() {
+        return proposalContent;
+    }
+
+    public void setProposalContent(ProposalContent proposalContent) {
+        this.proposalContent = proposalContent;
+    }
+
+    public String getProposalId() {
+        return proposalId;
+    }
+
+    public void setProposalId(String proposalId) {
+        this.proposalId = proposalId;
+    }
+
+    public String getProposalStatus() {
+        return proposalStatus;
+    }
+
+    public void setProposalStatus(String proposalStatus) {
+        this.proposalStatus = proposalStatus;
+    }
+
+    public TallyResult getFinalTallyResult() {
+        return finalTallyResult;
+    }
+
+    public void setFinalTallyResult(TallyResult finalTallyResult) {
+        this.finalTallyResult = finalTallyResult;
+    }
+
+    public String getSubmitTime() {
+        return submitTime;
+    }
+
+    public void setSubmitTime(String submitTime) {
+        this.submitTime = submitTime;
+    }
+
+    public String getDepositEndTime() {
+        return depositEndTime;
+    }
+
+    public void setDepositEndTime(String depositEndTime) {
+        this.depositEndTime = depositEndTime;
+    }
+
+    public List<Coin> getTotalDeposit() {
+        return totalDeposit;
+    }
+
+    public void setTotalDeposit(List<Coin> totalDeposit) {
+        this.totalDeposit = totalDeposit;
+    }
+
+    public void setVotingStartTime(String votingStartTime) {
+        this.votingStartTime = votingStartTime;
+    }
+
+    public String getVotingEndTime() {
+        Date date = null;
+        SimpleDateFormat fmt = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
+        try {
+            date = fmt.parse(votingEndTime);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        if(date != null){
+            return DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM).format(date);
+        }else{
+            return votingEndTime;
+        }
+    }
+
+    public long getVotingEndTimeWithLong() {
+
+        Date date = null;
+        SimpleDateFormat fmt = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
+        try {
+            date = fmt.parse(votingEndTime);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return date == null ? 0 : date.getTime();
+    }
+
+    public void setVotingEndTime(String votingEndTime) {
+        this.votingEndTime = votingEndTime;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/ProposalContent.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/ProposalContent.java
new file mode 100644
index 000000000..364d86a19
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/ProposalContent.java
@@ -0,0 +1,33 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.io.Serializable;
+
+public class ProposalContent implements Serializable {
+    @SerializedName("type")
+    @Expose
+    private String type;
+    @SerializedName("value")
+    @Expose
+    private ProposalDetail proposalDetail;
+
+    public String getType() {
+        if (type == null) return "";
+        String[] result = type.split("/");
+        return result.length >= 2 ? result[1] : type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public ProposalDetail getProposalDetail() {
+        return proposalDetail;
+    }
+
+    public void setValue(ProposalDetail proposalDetail) {
+        this.proposalDetail = proposalDetail;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/ProposalDetail.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/ProposalDetail.java
new file mode 100644
index 000000000..a030c6565
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/ProposalDetail.java
@@ -0,0 +1,31 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.io.Serializable;
+
+public class ProposalDetail implements Serializable {
+    @SerializedName("title")
+    @Expose
+    private String title;
+    @SerializedName("description")
+    @Expose
+    private String description;
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/PubKey.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/PubKey.java
new file mode 100644
index 000000000..896e02be3
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/PubKey.java
@@ -0,0 +1,29 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class PubKey {
+    @SerializedName("type")
+    @Expose
+    private String type;
+    @SerializedName("value")
+    @Expose
+    private String value;
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public String getValue() {
+        return value;
+    }
+
+    public void setValue(String value) {
+        this.value = value;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/ReserveDenom.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/ReserveDenom.java
new file mode 100644
index 000000000..28814cd38
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/ReserveDenom.java
@@ -0,0 +1,29 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class ReserveDenom {
+    @SerializedName("origin")
+    @Expose
+    private String origin;
+    @SerializedName("display_name")
+    @Expose
+    private String display_name;
+
+    public String getOrigin() {
+        return origin;
+    }
+
+    public void setOrigin(String origin) {
+        this.origin = origin;
+    }
+
+    public String getDisplayName() {
+        return display_name;
+    }
+
+    public void setDisplayName(String display_name) {
+        this.display_name = display_name;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/SendResult.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/SendResult.java
new file mode 100644
index 000000000..ec3b0fba9
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/SendResult.java
@@ -0,0 +1,49 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import org.json.JSONArray;
+
+import java.util.ArrayList;
+
+public class SendResult {
+    @SerializedName("txhash")
+    @Expose
+    private String hash;
+    @SerializedName("height")
+    @Expose
+    private String height;
+    @SerializedName("logs")
+    @Expose
+    private ArrayList<Log> logs;
+
+    public String getHash() {
+        return hash;
+    }
+
+    public void setHash(String hash) {
+        this.hash = hash;
+    }
+
+    public String getHeight() {
+        return height;
+    }
+
+    public void setHeight(String height) {
+        this.height = height;
+    }
+
+    public boolean getResult() {
+        boolean result = false;
+        try {
+            if (logs.size() > 0) {
+                result = logs.get(0).getSuccess();
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        return result;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/Setting.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Setting.java
new file mode 100644
index 000000000..4bf28dc24
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Setting.java
@@ -0,0 +1,23 @@
+package com.lunamint.wallet.model;
+
+public class Setting {
+
+    private boolean enabledFingerprint;
+    private String node;
+
+    public boolean isEnabledFingerprint() {
+        return enabledFingerprint;
+    }
+
+    public void setEnabledFingerprint(boolean enabledFingerprint) {
+        this.enabledFingerprint = enabledFingerprint;
+    }
+
+    public String getNode() {
+        return node;
+    }
+
+    public void setNode(String node) {
+        this.node = node;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/Signature.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Signature.java
new file mode 100644
index 000000000..9e3c9c9b3
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Signature.java
@@ -0,0 +1,51 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class Signature {
+    @SerializedName("pub_key")
+    @Expose
+    private PubKey pubKey;
+    @SerializedName("signature")
+    @Expose
+    private String signature;
+    @SerializedName("account_number")
+    @Expose
+    private String accountNumber;
+    @SerializedName("sequence")
+    @Expose
+    private String sequence;
+
+    public PubKey getPubKey() {
+        return pubKey;
+    }
+
+    public void setPubKey(PubKey pubKey) {
+        this.pubKey = pubKey;
+    }
+
+    public String getSignature() {
+        return signature;
+    }
+
+    public void setSignature(String signature) {
+        this.signature = signature;
+    }
+
+    public String getAccountNumber() {
+        return accountNumber;
+    }
+
+    public void setAccountNumber(String accountNumber) {
+        this.accountNumber = accountNumber;
+    }
+
+    public String getSequence() {
+        return sequence;
+    }
+
+    public void setSequence(String sequence) {
+        this.sequence = sequence;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/StakingInfo.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/StakingInfo.java
new file mode 100644
index 000000000..25e42e2bf
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/StakingInfo.java
@@ -0,0 +1,40 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class StakingInfo {
+    @SerializedName("delegator_address")
+    @Expose
+    private String delegatorAddr;
+    @SerializedName("validator_address")
+    @Expose
+    private String validatorAddr;
+    @SerializedName("shares")
+    @Expose
+    private String shares;
+
+    public String getDelegatorAddr() {
+        return delegatorAddr;
+    }
+
+    public void setDelegatorAddr(String delegatorAddr) {
+        this.delegatorAddr = delegatorAddr;
+    }
+
+    public String getValidatorAddr() {
+        return validatorAddr;
+    }
+
+    public void setValidatorAddr(String validatorAddr) {
+        this.validatorAddr = validatorAddr;
+    }
+
+    public double getShares() {
+        return shares != null ? Double.parseDouble(shares) : 0;
+    }
+
+    public void setShares(String shares) {
+        this.shares = shares;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/Status.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Status.java
new file mode 100644
index 000000000..4eadf09ed
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Status.java
@@ -0,0 +1,59 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+public class Status {
+    @SerializedName("is_maintenance")
+    @Expose
+    private Boolean isMaintenance;
+    @SerializedName("completion_time")
+    @Expose
+    private String completionTime;
+    @SerializedName("activated_send")
+    @Expose
+    private Boolean activatedSend;
+
+    public Boolean getIsMaintenance() {
+        return isMaintenance;
+    }
+
+    public void setIsMaintenance(Boolean isMaintenance) {
+        this.isMaintenance = isMaintenance;
+    }
+
+    public String getCompletionTime() {
+        if (completionTime != null) {
+            Date date = null;
+            SimpleDateFormat fmt = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
+            try {
+                date = fmt.parse(completionTime);
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+            if (date != null) {
+                return DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM).format(date);
+            } else {
+                return null;
+            }
+        } else {
+            return null;
+        }
+    }
+
+    public void setCompletionTime(String completionTime) {
+        this.completionTime = completionTime;
+    }
+
+    public Boolean getActivatedSend() {
+        return activatedSend;
+    }
+
+    public void setActivatedSend(Boolean activatedSend) {
+        this.activatedSend = activatedSend;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/Tag.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Tag.java
new file mode 100644
index 000000000..76eb2f79f
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Tag.java
@@ -0,0 +1,29 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class Tag {
+    @SerializedName("key")
+    @Expose
+    private String key;
+    @SerializedName("value")
+    @Expose
+    private String value;
+
+    public String getKey() {
+        return key;
+    }
+
+    public void setKey(String key) {
+        this.key = key;
+    }
+
+    public String getValue() {
+        return value;
+    }
+
+    public void setValue(String value) {
+        this.value = value;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/TallyResult.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/TallyResult.java
new file mode 100644
index 000000000..a72c00519
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/TallyResult.java
@@ -0,0 +1,54 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.io.Serializable;
+
+public class TallyResult implements Serializable {
+
+    @SerializedName("yes")
+    @Expose
+    private String yes;
+    @SerializedName("abstain")
+    @Expose
+    private String abstain;
+    @SerializedName("no")
+    @Expose
+    private String no;
+    @SerializedName("no_with_veto")
+    @Expose
+    private String noWithVeto;
+
+    public String getYes() {
+        return yes;
+    }
+
+    public void setYes(String yes) {
+        this.yes = yes;
+    }
+
+    public String getAbstain() {
+        return abstain;
+    }
+
+    public void setAbstain(String abstain) {
+        this.abstain = abstain;
+    }
+
+    public String getNo() {
+        return no;
+    }
+
+    public void setNo(String no) {
+        this.no = no;
+    }
+
+    public String getNoWithVeto() {
+        return noWithVeto;
+    }
+
+    public void setNoWithVeto(String noWithVeto) {
+        this.noWithVeto = noWithVeto;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/TransactionHistory.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/TransactionHistory.java
new file mode 100644
index 000000000..b236a22b2
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/TransactionHistory.java
@@ -0,0 +1,49 @@
+package com.lunamint.wallet.model;
+
+public class TransactionHistory {
+    private String hash;
+    private String type;
+    private int block;
+    private String from;
+    private String to;
+    private String amount;
+    private String denom;
+
+    public TransactionHistory(String hash, String type, int block, String from, String to, String amount, String denom){
+        this.hash = hash;
+        this.type = type;
+        this.block = block;
+        this.from = from;
+        this.to = to;
+        this.amount = amount;
+        this.denom = denom;
+    }
+
+    public String getHash(){
+        return hash;
+    }
+
+    public String getType(){
+        return type;
+    }
+
+    public int getBlock(){
+        return block;
+    }
+
+    public String getFrom(){
+        return from;
+    }
+
+    public String getTo(){
+        return to;
+    }
+
+    public String getAmount(){
+        return amount;
+    }
+
+    public String getDenom(){
+        return denom;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/Unbonding.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Unbonding.java
new file mode 100644
index 000000000..8b4739aeb
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Unbonding.java
@@ -0,0 +1,42 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.util.ArrayList;
+
+public class Unbonding {
+    @SerializedName("delegator_address")
+    @Expose
+    private String delegatorAddr;
+    @SerializedName("validator_address")
+    @Expose
+    private String validatorAddr;
+    @SerializedName("entries")
+    @Expose
+    private ArrayList<UnbondingEntries> entries;
+
+    public String getDelegatorAddr() {
+        return delegatorAddr;
+    }
+
+    public void setDelegatorAddr(String delegatorAddr) {
+        this.delegatorAddr = delegatorAddr;
+    }
+
+    public String getValidatorAddr() {
+        return validatorAddr;
+    }
+
+    public void setValidatorAddr(String validatorAddr) {
+        this.validatorAddr = validatorAddr;
+    }
+
+    public ArrayList<UnbondingEntries> getEntries(){
+        return entries;
+    }
+
+    public void setEntries(ArrayList<UnbondingEntries> entries) {
+        this.entries = entries;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/UnbondingEntries.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/UnbondingEntries.java
new file mode 100644
index 000000000..e46414d64
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/UnbondingEntries.java
@@ -0,0 +1,53 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.math.BigDecimal;
+
+public class UnbondingEntries {
+    @SerializedName("creation_height")
+    @Expose
+    private String creationHeight;
+    @SerializedName("completion_time")
+    @Expose
+    private String completionTime;
+    @SerializedName("initial_balance")
+    @Expose
+    private String initialBalance;
+    @SerializedName("balance")
+    @Expose
+    private String balance;
+
+    public String getCreationHeight() {
+        return creationHeight;
+    }
+
+    public void setCreationHeight(String creationHeight) {
+        this.creationHeight = creationHeight;
+    }
+
+    public String getCompletionTime() {
+        return completionTime;
+    }
+
+    public void setCompletionTime(String completionTime) {
+        this.completionTime = completionTime;
+    }
+
+    public String getInitialBalance() {
+        return initialBalance;
+    }
+
+    public void setInitialBalance(String initialBalance) {
+        this.initialBalance = initialBalance;
+    }
+
+    public BigDecimal getBalance() {
+        return new BigDecimal(balance);
+    }
+
+    public void setBalance(String balance) {
+        this.balance = balance;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/Validator.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Validator.java
new file mode 100644
index 000000000..6157c5498
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Validator.java
@@ -0,0 +1,193 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+import com.lunamint.wallet.utils.BigDecimalUtil;
+
+import java.io.Serializable;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+public class Validator implements Serializable {
+    @SerializedName("operator_address")
+    @Expose
+    private String operatorAddress;
+    @SerializedName("consensus_pubkey")
+    @Expose
+    private String consensusPubkey;
+    @SerializedName("jailed")
+    @Expose
+    private Boolean jailed;
+    @SerializedName("status")
+    @Expose
+    private Integer status;
+    @SerializedName("tokens")
+    @Expose
+    private String tokens;
+    @SerializedName("delegator_shares")
+    @Expose
+    private String delegatorShares;
+    @SerializedName("description")
+    @Expose
+    private Description description;
+    @SerializedName("bond_height")
+    @Expose
+    private String bondHeight;
+    @SerializedName("bond_intra_tx_counter")
+    @Expose
+    private Integer bondIntraTxCounter;
+    @SerializedName("unbonding_height")
+    @Expose
+    private String unbondingHeight;
+    @SerializedName("unbonding_time")
+    @Expose
+    private String unbondingTime;
+    @SerializedName("commission")
+    @Expose
+    private Commission commission;
+
+    private double delegatedAmount = 0;
+    private int rank = 0;
+    private String unstakingCompletionTime;
+
+    public String getOperatorAddress() {
+        return operatorAddress;
+    }
+
+    public void setOperatorAddress(String operatorAddress) {
+        this.operatorAddress = operatorAddress;
+    }
+
+    public String getConsensusPubkey() {
+        return consensusPubkey;
+    }
+
+    public void setConsensusPubkey(String consensusPubkey) {
+        this.consensusPubkey = consensusPubkey;
+    }
+
+    public Boolean getJailed() {
+        return jailed;
+    }
+
+    public void setJailed(Boolean jailed) {
+        this.jailed = jailed;
+    }
+
+    public Integer getStatus() {
+        return status;
+    }
+
+    public void setStatus(Integer status) {
+        this.status = status;
+    }
+
+    public String getTokens() {
+        return tokens;
+    }
+
+    public void setTokens(String tokens) {
+        this.tokens = tokens;
+    }
+
+    //Todo parse type
+    public float getDelegatorShares() {
+        return Float.parseFloat(delegatorShares);
+    }
+
+    public void setDelegatorShares(String delegatorShares) {
+        this.delegatorShares = delegatorShares;
+    }
+
+    public Description getDescription() {
+        return description;
+    }
+
+    public void setDescription(Description description) {
+        this.description = description;
+    }
+
+    public String getBondHeight() {
+        return bondHeight;
+    }
+
+    public void setBondHeight(String bondHeight) {
+        this.bondHeight = bondHeight;
+    }
+
+    public Integer getBondIntraTxCounter() {
+        return bondIntraTxCounter;
+    }
+
+    public void setBondIntraTxCounter(Integer bondIntraTxCounter) {
+        this.bondIntraTxCounter = bondIntraTxCounter;
+    }
+
+    public String getUnbondingHeight() {
+        return unbondingHeight;
+    }
+
+    public void setUnbondingHeight(String unbondingHeight) {
+        this.unbondingHeight = unbondingHeight;
+    }
+
+    public String getUnbondingTime() {
+        return unbondingTime;
+    }
+
+    public void setUnbondingTime(String unbondingTime) {
+        this.unbondingTime = unbondingTime;
+    }
+
+    public Commission getCommission() {
+        return commission;
+    }
+
+    public void setCommission(Commission commission) {
+        this.commission = commission;
+    }
+
+    public double getDelegatedAmount() {
+        return delegatedAmount;
+    }
+
+    public String getDelegatedAmountForDisplay() {
+        return BigDecimalUtil.getNumberNano(delegatedAmount + "", "4");
+    }
+
+    public void setDelegatedAmount(double delegatedAmount) {
+        this.delegatedAmount = delegatedAmount;
+    }
+
+    public int getRank() {
+        return rank;
+    }
+
+    public void setRank(int rank) {
+        this.rank = rank;
+    }
+
+    public String getUnstakingCompletionTime() {
+        if (unstakingCompletionTime != null) {
+            Date date = null;
+            SimpleDateFormat fmt = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
+            try {
+                date = fmt.parse(unstakingCompletionTime);
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+            if (date != null) {
+                return DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM).format(date);
+            } else {
+                return null;
+            }
+        } else {
+            return null;
+        }
+    }
+
+    public void setUnstakingCompletionTime(String unstakingCompletionTime) {
+        this.unstakingCompletionTime = unstakingCompletionTime;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/Voter.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Voter.java
new file mode 100644
index 000000000..3bc1a841c
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/Voter.java
@@ -0,0 +1,42 @@
+package com.lunamint.wallet.model;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.io.Serializable;
+
+public class Voter implements Serializable {
+    @SerializedName("voter")
+    @Expose
+    private String voter;
+    @SerializedName("proposal_id")
+    @Expose
+    private String proposalId;
+    @SerializedName("option")
+    @Expose
+    private String option;
+
+    public String getVoter() {
+        return voter;
+    }
+
+    public void setVoter(String voter) {
+        this.voter = voter;
+    }
+
+    public String getProposalId() {
+        return proposalId;
+    }
+
+    public void setProposalId(String proposalId) {
+        this.proposalId = proposalId;
+    }
+
+    public String getOption() {
+        return option;
+    }
+
+    public void setOption(String option) {
+        this.option = option;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/DefaultHistory.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/DefaultHistory.java
new file mode 100644
index 000000000..4577726d9
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/DefaultHistory.java
@@ -0,0 +1,94 @@
+package com.lunamint.wallet.model.tx;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+import com.lunamint.wallet.model.Log;
+
+import org.json.JSONArray;
+
+import java.util.ArrayList;
+
+public class DefaultHistory {
+    @SerializedName("txhash")
+    @Expose
+    private String hash;
+    @SerializedName("height")
+    @Expose
+    private String height;
+    @SerializedName("tx")
+    @Expose
+    private DefaultTx tx;
+    @SerializedName("gas_wanted")
+    @Expose
+    private String gas_wanted;
+    @SerializedName("gas_used")
+    @Expose
+    private String gas_used;
+    @SerializedName("logs")
+    @Expose
+    private ArrayList<Log> logs;
+    @SerializedName("error")
+    @Expose
+    private String error;
+
+    public String getHash() {
+        return hash;
+    }
+
+    public void setHash(String hash) {
+        this.hash = hash;
+    }
+
+    public String getHeight() {
+        return height;
+    }
+
+    public void setHeight(String height) {
+        this.height = height;
+    }
+
+    public DefaultTx getTx() {
+        return tx;
+    }
+
+    public void setTx(DefaultTx tx) {
+        this.tx = tx;
+    }
+
+    public String getGasWanted(){
+        return gas_wanted;
+    }
+
+    public void setGasWanted(String gas_wanted){
+        this.gas_wanted = gas_wanted;
+    }
+
+    public String getGasUsed(){
+        return gas_used;
+    }
+
+    public void setGasUsed(String gas_used){
+        this.gas_used = gas_used;
+    }
+
+    public boolean getResult() {
+        boolean result = false;
+        try {
+            if (logs.size() > 0) {
+                result = logs.get(0).getSuccess();
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        return result;
+    }
+
+    public String getError(){
+        return error;
+    }
+
+    public void setError(String error){
+        this.error = error;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/DefaultMsg.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/DefaultMsg.java
new file mode 100644
index 000000000..d9328cf8e
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/DefaultMsg.java
@@ -0,0 +1,30 @@
+package com.lunamint.wallet.model.tx;
+
+import com.google.gson.JsonObject;
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class DefaultMsg {
+    @SerializedName("type")
+    @Expose
+    private String type;
+    @SerializedName("value")
+    @Expose
+    private JsonObject value;
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public JsonObject getValue() {
+        return value;
+    }
+
+    public void setValue(JsonObject value) {
+        this.value = value;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/DefaultMsgValue.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/DefaultMsgValue.java
new file mode 100644
index 000000000..c01fa06e7
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/DefaultMsgValue.java
@@ -0,0 +1,41 @@
+package com.lunamint.wallet.model.tx;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+import com.lunamint.wallet.model.Coin;
+
+public class DefaultMsgValue {
+    @SerializedName("delegator_addr")
+    @Expose
+    private String delegatorAddr;
+    @SerializedName("validator_addr")
+    @Expose
+    private String validatorAddr;
+    @SerializedName("value")
+    @Expose
+    private Coin value;
+
+    public String getDelegatorAddr() {
+        return delegatorAddr;
+    }
+
+    public void setDelegatorAddr(String delegatorAddr) {
+        this.delegatorAddr = delegatorAddr;
+    }
+
+    public String getValidatorAddr() {
+        return validatorAddr;
+    }
+
+    public void setValidatorAddr(String validatorAddr) {
+        this.validatorAddr = validatorAddr;
+    }
+
+    public Coin getValue() {
+        return value;
+    }
+
+    public void setValue(Coin delegation) {
+        this.value = delegation;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/DefaultTx.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/DefaultTx.java
new file mode 100644
index 000000000..06a7f05a8
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/DefaultTx.java
@@ -0,0 +1,29 @@
+package com.lunamint.wallet.model.tx;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class DefaultTx {
+    @SerializedName("type")
+    @Expose
+    private String type;
+    @SerializedName("value")
+    @Expose
+    private DefaultTxMsg value;
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public DefaultTxMsg getValue() {
+        return value;
+    }
+
+    public void setValue(DefaultTxMsg value) {
+        this.value = value;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/DefaultTxMsg.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/DefaultTxMsg.java
new file mode 100644
index 000000000..e5ee5009b
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/DefaultTxMsg.java
@@ -0,0 +1,55 @@
+package com.lunamint.wallet.model.tx;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+import com.lunamint.wallet.model.Fee;
+import com.lunamint.wallet.model.Signature;
+
+import java.util.List;
+
+public class DefaultTxMsg {
+    @SerializedName("msg")
+    @Expose
+    private List<DefaultMsg> msg = null;
+    @SerializedName("fee")
+    @Expose
+    private Fee fee;
+    @SerializedName("signatures")
+    @Expose
+    private List<Signature> signatures = null;
+    @SerializedName("memo")
+    @Expose
+    private String memo;
+
+    public List<DefaultMsg> getMsg() {
+        return msg;
+    }
+
+    public void setMsg(List<DefaultMsg> msg) {
+        this.msg = msg;
+    }
+
+    public Fee getFee() {
+        return fee;
+    }
+
+    public void setFee(Fee fee) {
+        this.fee = fee;
+    }
+
+    public List<Signature> getSignatures() {
+        return signatures;
+    }
+
+    public void setSignatures(List<Signature> signatures) {
+        this.signatures = signatures;
+    }
+
+    public String getMemo() {
+        return memo;
+    }
+
+    public void setMemo(String memo) {
+        this.memo = memo;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/proposal/ProposalHistory.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/proposal/ProposalHistory.java
new file mode 100644
index 000000000..4b8d77574
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/proposal/ProposalHistory.java
@@ -0,0 +1,83 @@
+package com.lunamint.wallet.model.tx.proposal;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+import com.lunamint.wallet.model.Log;
+
+import org.json.JSONArray;
+
+import java.util.ArrayList;
+
+public class ProposalHistory {
+    @SerializedName("txhash")
+    @Expose
+    private String hash;
+    @SerializedName("height")
+    @Expose
+    private String height;
+    @SerializedName("tx")
+    @Expose
+    private TxProposal tx;
+    @SerializedName("gas_wanted")
+    @Expose
+    private String gas_wanted;
+    @SerializedName("gas_used")
+    @Expose
+    private String gas_used;
+    @SerializedName("logs")
+    @Expose
+    private ArrayList<Log> logs;
+
+    public String getHash() {
+        return hash;
+    }
+
+    public void setHash(String hash) {
+        this.hash = hash;
+    }
+
+    public String getHeight() {
+        return height;
+    }
+
+    public void setHeight(String height) {
+        this.height = height;
+    }
+
+    public TxProposal getTx() {
+        return tx;
+    }
+
+    public void setTx(TxProposal tx) {
+        this.tx = tx;
+    }
+
+    public String getGasWanted(){
+        return gas_wanted;
+    }
+
+    public void setGasWanted(String gas_wanted){
+        this.gas_wanted = gas_wanted;
+    }
+
+    public String getGasUsed(){
+        return gas_used;
+    }
+
+    public void setGasUsed(String gas_used){
+        this.gas_used = gas_used;
+    }
+
+    public boolean getResult() {
+        boolean result = false;
+        try {
+            if (logs.size() > 0) {
+                result = logs.get(0).getSuccess();
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        return result;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/proposal/ProposalMsg.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/proposal/ProposalMsg.java
new file mode 100644
index 000000000..1238a64c3
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/proposal/ProposalMsg.java
@@ -0,0 +1,30 @@
+package com.lunamint.wallet.model.tx.proposal;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+import com.lunamint.wallet.model.Voter;
+
+public class ProposalMsg {
+    @SerializedName("type")
+    @Expose
+    private String type;
+    @SerializedName("value")
+    @Expose
+    private Voter value;
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public Voter getValue() {
+        return value;
+    }
+
+    public void setValue(Voter value) {
+        this.value = value;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/proposal/TxProposal.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/proposal/TxProposal.java
new file mode 100644
index 000000000..cc987b26b
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/proposal/TxProposal.java
@@ -0,0 +1,29 @@
+package com.lunamint.wallet.model.tx.proposal;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class TxProposal {
+    @SerializedName("type")
+    @Expose
+    private String type;
+    @SerializedName("value")
+    @Expose
+    private TxProposalMsg value;
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public TxProposalMsg getValue() {
+        return value;
+    }
+
+    public void setValue(TxProposalMsg value) {
+        this.value = value;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/proposal/TxProposalMsg.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/proposal/TxProposalMsg.java
new file mode 100644
index 000000000..07643bd7a
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/proposal/TxProposalMsg.java
@@ -0,0 +1,55 @@
+package com.lunamint.wallet.model.tx.proposal;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+import com.lunamint.wallet.model.Fee;
+import com.lunamint.wallet.model.Signature;
+
+import java.util.List;
+
+public class TxProposalMsg {
+    @SerializedName("msg")
+    @Expose
+    private List<ProposalMsg> msg = null;
+    @SerializedName("fee")
+    @Expose
+    private Fee fee;
+    @SerializedName("signatures")
+    @Expose
+    private List<Signature> signatures = null;
+    @SerializedName("memo")
+    @Expose
+    private String memo;
+
+    public List<ProposalMsg> getMsg() {
+        return msg;
+    }
+
+    public void setMsg(List<ProposalMsg> msg) {
+        this.msg = msg;
+    }
+
+    public Fee getFee() {
+        return fee;
+    }
+
+    public void setFee(Fee fee) {
+        this.fee = fee;
+    }
+
+    public List<Signature> getSignatures() {
+        return signatures;
+    }
+
+    public void setSignatures(List<Signature> signatures) {
+        this.signatures = signatures;
+    }
+
+    public String getMemo() {
+        return memo;
+    }
+
+    public void setMemo(String memo) {
+        this.memo = memo;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/send/SendHistory.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/send/SendHistory.java
new file mode 100644
index 000000000..def1db9a7
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/send/SendHistory.java
@@ -0,0 +1,96 @@
+package com.lunamint.wallet.model.tx.send;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+import com.lunamint.wallet.model.Log;
+import com.lunamint.wallet.model.Tag;
+
+import org.json.JSONArray;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class SendHistory {
+    @SerializedName("txhash")
+    @Expose
+    private String hash;
+    @SerializedName("height")
+    @Expose
+    private String height;
+    @SerializedName("tx")
+    @Expose
+    private TxSend tx;
+    @SerializedName("gas_wanted")
+    @Expose
+    private String gas_wanted;
+    @SerializedName("gas_used")
+    @Expose
+    private String gas_used;
+    @SerializedName("tags")
+    @Expose
+    private List<Tag> tags = null;
+    @SerializedName("logs")
+    @Expose
+    private ArrayList<Log> logs;
+
+    public String getHash() {
+        return hash;
+    }
+
+    public void setHash(String hash) {
+        this.hash = hash;
+    }
+
+    public String getHeight() {
+        return height;
+    }
+
+    public void setHeight(String height) {
+        this.height = height;
+    }
+
+    public TxSend getTx() {
+        return tx;
+    }
+
+    public void setTx(TxSend tx) {
+        this.tx = tx;
+    }
+
+    public String getGasWanted() {
+        return gas_wanted;
+    }
+
+    public void setGasWanted(String gas_wanted) {
+        this.gas_wanted = gas_wanted;
+    }
+
+    public String getGasUsed() {
+        return gas_used;
+    }
+
+    public void setGasUsed(String gas_used) {
+        this.gas_used = gas_used;
+    }
+
+    public List<Tag> getTags() {
+        return tags;
+    }
+
+    public void setTags(List<Tag> tags) {
+        this.tags = tags;
+    }
+
+    public boolean getResult() {
+        boolean result = false;
+        try {
+            if (logs.size() > 0) {
+                result = logs.get(0).getSuccess();
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        return result;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/send/SendMsg.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/send/SendMsg.java
new file mode 100644
index 000000000..125bb5cbb
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/send/SendMsg.java
@@ -0,0 +1,29 @@
+package com.lunamint.wallet.model.tx.send;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class SendMsg {
+    @SerializedName("type")
+    @Expose
+    private String type;
+    @SerializedName("value")
+    @Expose
+    private SendMsgValue value;
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public SendMsgValue getValue() {
+        return value;
+    }
+
+    public void setValue(SendMsgValue value) {
+        this.value = value;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/send/SendMsgValue.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/send/SendMsgValue.java
new file mode 100644
index 000000000..a1f711264
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/send/SendMsgValue.java
@@ -0,0 +1,48 @@
+package com.lunamint.wallet.model.tx.send;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+import com.lunamint.wallet.model.Coin;
+
+import java.util.ArrayList;
+
+public class SendMsgValue {
+    @SerializedName("from_address")
+    @Expose
+    private String from_address;
+    @SerializedName("to_address")
+    @Expose
+    private String to_address;
+    @SerializedName("amount")
+    @Expose
+    private ArrayList<Coin> coins = null;
+
+    public String getFromAddress() {
+        return from_address;
+    }
+
+    public void setFromAddress(String from_address) {
+        this.from_address = from_address;
+    }
+
+    public String getToAddress() {
+        return to_address;
+    }
+
+    public void setToAddress(String to_address) {
+        this.to_address = to_address;
+    }
+
+    public Coin getCoin() {
+        return coins.get(0);
+    }
+
+    public void setCoin(Coin coin) {
+        if (this.coins != null)
+            this.coins.add(coin);
+    }
+
+    public void setCoins(ArrayList<Coin> coins) {
+        this.coins = coins;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/send/TxSend.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/send/TxSend.java
new file mode 100644
index 000000000..0a54af214
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/send/TxSend.java
@@ -0,0 +1,29 @@
+package com.lunamint.wallet.model.tx.send;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class TxSend {
+    @SerializedName("type")
+    @Expose
+    private String type;
+    @SerializedName("value")
+    @Expose
+    private TxSendMsg value;
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public TxSendMsg getValue() {
+        return value;
+    }
+
+    public void setValue(TxSendMsg value) {
+        this.value = value;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/send/TxSendMsg.java b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/send/TxSendMsg.java
new file mode 100644
index 000000000..91747a978
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/model/tx/send/TxSendMsg.java
@@ -0,0 +1,55 @@
+package com.lunamint.wallet.model.tx.send;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+import com.lunamint.wallet.model.Fee;
+import com.lunamint.wallet.model.Signature;
+
+import java.util.List;
+
+public class TxSendMsg {
+    @SerializedName("msg")
+    @Expose
+    private List<SendMsg> msg = null;
+    @SerializedName("fee")
+    @Expose
+    private Fee fee;
+    @SerializedName("signatures")
+    @Expose
+    private List<Signature> signatures = null;
+    @SerializedName("memo")
+    @Expose
+    private String memo;
+
+    public List<SendMsg> getMsg() {
+        return msg;
+    }
+
+    public void setMsg(List<SendMsg> msg) {
+        this.msg = msg;
+    }
+
+    public Fee getFee() {
+        return fee;
+    }
+
+    public void setFee(Fee fee) {
+        this.fee = fee;
+    }
+
+    public List<Signature> getSignatures() {
+        return signatures;
+    }
+
+    public void setSignatures(List<Signature> signatures) {
+        this.signatures = signatures;
+    }
+
+    public String getMemo() {
+        return memo;
+    }
+
+    public void setMemo(String memo) {
+        this.memo = memo;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/utils/AESUtil.java b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/AESUtil.java
new file mode 100644
index 000000000..7f82ab5cc
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/AESUtil.java
@@ -0,0 +1,59 @@
+package com.lunamint.wallet.utils;
+
+import android.util.Base64;
+
+import java.io.UnsupportedEncodingException;
+import java.security.Key;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.security.spec.AlgorithmParameterSpec;
+
+import javax.crypto.Cipher;
+import javax.crypto.spec.IvParameterSpec;
+import javax.crypto.spec.SecretKeySpec;
+
+public class AESUtil{
+    private static final String ENCRYPTION_KEY = "lunagram";
+    private static final String ENCRYPTION_IV = "evqndl&wgvhvaoz!";
+
+    public static final String decrypt(int version, String src) {
+        String decrypted = null;
+        switch (version){
+            case 1:
+                try {
+                    Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
+                    cipher.init(Cipher.DECRYPT_MODE, makeKey(), makeIv());
+                    decrypted = new String(cipher.doFinal(Base64.decode(src, Base64.DEFAULT)));
+                } catch (Exception e) {
+                    return null;
+                }
+                break;
+        }
+
+        return decrypted;
+    }
+
+    private static AlgorithmParameterSpec makeIv() {
+        try {
+            return new IvParameterSpec(ENCRYPTION_IV.getBytes("UTF-8"));
+        } catch (UnsupportedEncodingException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    private static Key makeKey() {
+        try {
+            MessageDigest md = MessageDigest.getInstance("SHA-256");
+            byte[] key = md.digest(ENCRYPTION_KEY.getBytes("UTF-8"));
+            return new SecretKeySpec(key, "AES");
+        } catch (NoSuchAlgorithmException e) {
+            e.printStackTrace();
+        } catch (UnsupportedEncodingException e) {
+            e.printStackTrace();
+        }
+
+        return null;
+    }
+}
+
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/utils/AnimUtil.java b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/AnimUtil.java
new file mode 100644
index 000000000..ee58f4976
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/AnimUtil.java
@@ -0,0 +1,137 @@
+package com.lunamint.wallet.utils;
+
+import android.view.View;
+import android.view.animation.AccelerateInterpolator;
+import android.view.animation.AlphaAnimation;
+import android.view.animation.Animation;
+import android.view.animation.AnimationSet;
+import android.view.animation.DecelerateInterpolator;
+import android.view.animation.TranslateAnimation;
+
+public class AnimUtil {
+
+    public static final void changeView(View preView, View currentView, boolean isGone) {
+        if (preView == null || currentView == null) return;
+        Animation fadeOut = new AlphaAnimation(1, 0);
+        fadeOut.setInterpolator(new AccelerateInterpolator());
+        fadeOut.setDuration(300);
+
+        Animation leftOut = new TranslateAnimation(
+                Animation.RELATIVE_TO_SELF, 0,
+                Animation.RELATIVE_TO_SELF, -1f,
+                Animation.RELATIVE_TO_SELF, 0,
+                Animation.RELATIVE_TO_SELF, 0);
+        leftOut.setInterpolator(new AccelerateInterpolator());
+        leftOut.setDuration(300);
+
+        AnimationSet prevAnim = new AnimationSet(false);
+        prevAnim.addAnimation(leftOut);
+        prevAnim.addAnimation(fadeOut);
+        preView.setAnimation(prevAnim);
+        if (isGone) {
+            preView.setVisibility(View.GONE);
+        } else {
+            preView.setVisibility(View.INVISIBLE);
+        }
+
+        Animation fadeIn = new AlphaAnimation(0, 1);
+        fadeIn.setInterpolator(new DecelerateInterpolator());
+        fadeIn.setDuration(300);
+
+        Animation rightIn = new TranslateAnimation(
+                Animation.RELATIVE_TO_SELF, 1f,
+                Animation.RELATIVE_TO_SELF, 0,
+                Animation.RELATIVE_TO_SELF, 0,
+                Animation.RELATIVE_TO_SELF, 0);
+        rightIn.setInterpolator(new AccelerateInterpolator());
+        rightIn.setDuration(300);
+
+        AnimationSet currentAnim = new AnimationSet(false);
+        currentAnim.addAnimation(fadeIn);
+        currentAnim.addAnimation(rightIn);
+        currentView.setAnimation(currentAnim);
+        currentView.setVisibility(View.VISIBLE);
+    }
+
+    public static final void changePrevView(View preView, View currentView, boolean isGone) {
+        if (preView == null || currentView == null) return;
+        Animation fadeIn = new AlphaAnimation(0, 1);
+        fadeIn.setInterpolator(new AccelerateInterpolator());
+        fadeIn.setDuration(300);
+
+        Animation leftIn = new TranslateAnimation(
+                Animation.RELATIVE_TO_SELF, -1f,
+                Animation.RELATIVE_TO_SELF, 0,
+                Animation.RELATIVE_TO_SELF, 0,
+                Animation.RELATIVE_TO_SELF, 0);
+        leftIn.setInterpolator(new AccelerateInterpolator());
+        leftIn.setDuration(300);
+
+        AnimationSet prevAnim = new AnimationSet(false);
+        prevAnim.addAnimation(leftIn);
+        prevAnim.addAnimation(fadeIn);
+        preView.setAnimation(prevAnim);
+        preView.setVisibility(View.VISIBLE);
+
+        Animation fadeOut = new AlphaAnimation(1, 0);
+        fadeOut.setInterpolator(new DecelerateInterpolator());
+        fadeOut.setDuration(300);
+
+        Animation rightOut = new TranslateAnimation(
+                Animation.RELATIVE_TO_SELF, 0,
+                Animation.RELATIVE_TO_SELF, 1f,
+                Animation.RELATIVE_TO_SELF, 0,
+                Animation.RELATIVE_TO_SELF, 0);
+        rightOut.setInterpolator(new AccelerateInterpolator());
+        rightOut.setDuration(300);
+
+        AnimationSet currentAnim = new AnimationSet(false);
+        currentAnim.addAnimation(fadeOut);
+        currentAnim.addAnimation(rightOut);
+        currentView.setAnimation(currentAnim);
+
+        if (isGone) {
+            currentView.setVisibility(View.GONE);
+        } else {
+            currentView.setVisibility(View.INVISIBLE);
+        }
+    }
+
+    public static final void showView(View view) {
+        if (view == null) return;
+        Animation fadeIn = new AlphaAnimation(0, 1);
+        fadeIn.setInterpolator(new DecelerateInterpolator());
+        fadeIn.setDuration(300);
+
+        AnimationSet currentAnim = new AnimationSet(false);
+        currentAnim.addAnimation(fadeIn);
+        view.setAnimation(currentAnim);
+        view.setVisibility(View.VISIBLE);
+    }
+
+    public static final void hideView(View view, boolean isGone) {
+        if (view == null) return;
+        Animation fadeOut = new AlphaAnimation(1, 0);
+        fadeOut.setInterpolator(new AccelerateInterpolator());
+        fadeOut.setDuration(300);
+
+        Animation leftOut = new TranslateAnimation(
+                Animation.RELATIVE_TO_SELF, 0,
+                Animation.RELATIVE_TO_SELF, -1f,
+                Animation.RELATIVE_TO_SELF, 0,
+                Animation.RELATIVE_TO_SELF, 0);
+        leftOut.setInterpolator(new AccelerateInterpolator());
+        leftOut.setDuration(300);
+
+        AnimationSet prevAnim = new AnimationSet(false);
+        prevAnim.addAnimation(leftOut);
+        prevAnim.addAnimation(fadeOut);
+        view.setAnimation(prevAnim);
+        if (isGone) {
+            view.setVisibility(View.GONE);
+        } else {
+            view.setVisibility(View.INVISIBLE);
+        }
+
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/utils/BigDecimalUtil.java b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/BigDecimalUtil.java
new file mode 100644
index 000000000..892eb32a1
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/BigDecimalUtil.java
@@ -0,0 +1,43 @@
+package com.lunamint.wallet.utils;
+
+import java.math.BigDecimal;
+
+public class BigDecimalUtil {
+    private static final BigDecimal DECIMAL_NANO = new BigDecimal(0.000001);
+    private static final BigDecimal DEFAULT_DECIMAL = new BigDecimal(1000000);
+
+    public static final String getNumberNano(String amount, String digit) {
+        try {
+            //double mAmount = Math.floor(Double.parseDouble(amount)* 10000) / 10000.0d;
+            BigDecimal result = new BigDecimal(amount);
+            result = result.multiply(DECIMAL_NANO);
+
+            if (result.compareTo(BigDecimal.ZERO) == 0) {
+                return "0";
+            } else {
+                return String.format("%." + digit + "f", result);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "0";
+        }
+    }
+
+    public static final String getNumberOrigin(String amount, String digit) {
+        try {
+            //double mAmount = Math.floor(Double.parseDouble(amount)* 10000) / 10000.0d;
+            BigDecimal result = new BigDecimal(amount);
+            result = result.multiply(DEFAULT_DECIMAL);
+
+            if (result.compareTo(BigDecimal.ZERO) == 0) {
+                return "0";
+            } else {
+                return String.format("%." + digit + "f", result);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "0";
+        }
+    }
+}
+
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/utils/CmdResultChecker.java b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/CmdResultChecker.java
new file mode 100644
index 000000000..361afbd02
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/CmdResultChecker.java
@@ -0,0 +1,29 @@
+package com.lunamint.wallet.utils;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.model.CmdResult;
+
+import org.telegram.messenger.LocaleController;
+
+public class CmdResultChecker {
+
+    public static final String checkCmdResult(CmdResult cmdResult){
+
+        String msg = null;
+
+        if(cmdResult == null){
+            msg = LocaleController.getString("notBeenInitWalletManagerError", R.string.notBeenInitWalletManagerError);
+        } else if (cmdResult.getErrMsg() != null){
+            if(cmdResult.getErrMsg().contains("invalid account password")) {
+                msg = LocaleController.getString("incorrectPassword", R.string.incorrectPassword);
+            } else {
+                msg = cmdResult.getErrMsg();
+            }
+        } else if (cmdResult.getData() == null || cmdResult.getData().equals("")){
+            msg = LocaleController.getString("walletmanagerNotResponding", R.string.walletmanagerNotResponding);
+        }
+
+        return msg;
+
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/utils/FileUtil.java b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/FileUtil.java
new file mode 100644
index 000000000..223bc9833
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/FileUtil.java
@@ -0,0 +1,156 @@
+package com.lunamint.wallet.utils;
+
+import android.content.Context;
+import android.content.res.AssetManager;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.security.MessageDigest;
+
+public class FileUtil {
+
+    private final static String txFileName = "tx_";
+
+    public static final boolean isFileExist(String path, String fileName) {
+        File file = new File(path, fileName);
+        return file.exists();
+    }
+
+    public static final boolean setExecutable(File file) {
+        file.setReadable(true, false);
+        file.setWritable(true, false);
+        if (!file.setExecutable(true, false)) {
+            return false;
+        }
+        return true;
+    }
+
+    public static final boolean copy(Context context, String path, String fileName) {
+
+        boolean isExist = false;
+
+        AssetManager assetManager = context.getAssets();
+        String[] files;
+        try {
+            files = assetManager.list("gaia");
+
+            for (String file : files) {
+                if (file.equals(fileName)) {
+                    isExist = true;
+
+                    InputStream in = null;
+                    OutputStream out = null;
+                    File outFile = null;
+                    try {
+                        in = assetManager.open("gaia/" + file);
+                        outFile = new File(path, file);
+                        out = new FileOutputStream(outFile);
+                        writeFile(in, out);
+
+                    } catch (IOException e) {
+                        return false;
+                    } finally {
+                        if (in != null) {
+                            try {
+                                in.close();
+                            } catch (IOException e) {
+                                e.printStackTrace();
+                                return false;
+                            }
+                        }
+                        if (out != null) {
+                            try {
+                                out.close();
+                                if (!FileUtil.setExecutable(outFile)) return false;
+                            } catch (IOException e) {
+                                e.printStackTrace();
+                                return false;
+                            }
+                        }
+                    }
+                }
+            }
+        } catch (IOException e) {
+            return false;
+        } catch (NullPointerException e) {
+            return false;
+        }
+
+        return isExist;
+    }
+
+    public static final void deleteFile(String path, String fileName) {
+        File outFile = new File(path, fileName);
+
+        if (outFile.exists()) {
+            outFile.delete();
+        }
+    }
+
+    public static final void deleteTx(Context context, long timeMillis) {
+
+        String fileName = txFileName + timeMillis;
+
+        File outFile = new File(context.getFilesDir(), fileName);
+
+        if (outFile.exists()) {
+            outFile.delete();
+        }
+    }
+
+    public static final boolean writeTx(Context context, long timeMillis, String msg) {
+        try {
+            File gpxfile = new File(context.getFilesDir(), FileUtil.txFileName + timeMillis);
+            FileWriter writer = new FileWriter(gpxfile);
+            writer.append(msg);
+            writer.flush();
+            writer.close();
+            return true;
+        } catch (Exception e) {
+            e.printStackTrace();
+            return false;
+        }
+    }
+
+    private static final void writeFile(InputStream in, OutputStream out) throws IOException {
+        byte[] buffer = new byte[1024];
+        int read;
+        while ((read = in.read(buffer)) != -1) {
+            out.write(buffer, 0, read);
+        }
+    }
+
+    public static final String getTxFileName(long timeMillis) {
+        return FileUtil.txFileName + timeMillis;
+    }
+
+    public static final String getChecksumMD5(String path) {
+        String returnVal = "";
+        try {
+            InputStream input = new FileInputStream(path);
+            byte[] buffer = new byte[1024];
+            MessageDigest md5Hash = MessageDigest.getInstance("MD5");
+            int numRead = 0;
+            while (numRead != -1) {
+                numRead = input.read(buffer);
+                if (numRead > 0) {
+                    md5Hash.update(buffer, 0, numRead);
+                }
+            }
+            input.close();
+
+            byte[] md5Bytes = md5Hash.digest();
+            for (int i = 0; i < md5Bytes.length; i++) {
+                returnVal += Integer.toString((md5Bytes[i] & 0xff) + 0x100, 16).substring(1);
+            }
+        } catch (Throwable t) {
+            t.printStackTrace();
+        }
+        return returnVal.toUpperCase();
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/utils/MessageUtil.java b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/MessageUtil.java
new file mode 100644
index 000000000..7b79b79be
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/MessageUtil.java
@@ -0,0 +1,108 @@
+package com.lunamint.wallet.utils;
+
+import com.lunamint.lunagram.BuildVars;
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.model.LMessage;
+
+import org.telegram.messenger.LocaleController;
+
+public class MessageUtil {
+
+    public final static int supportVersion = 1;
+
+    public final static boolean isLmiMessage(String msg) {
+        int msgVersion = getVersion(msg);
+        return isSupport(msgVersion);
+    }
+
+    public final static String getLmiMessage(String msg) {
+        try {
+            String[] splitedMsg = msg.split("::");
+            int msgVersion = Integer.parseInt(splitedMsg[1]);
+            if (isSupport(msgVersion)) {
+                String decryptedMsg = AESUtil.decrypt(msgVersion, splitedMsg[2]);
+
+                if (decryptedMsg == null) decryptedMsg = BuildVars.getLunagramUnsupportedMessage();
+                return decryptedMsg;
+            } else {
+                return BuildVars.getLunagramUnsupportedMessage();
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            return BuildVars.getLunagramUnsupportedMessage();
+        }
+    }
+
+    private final static boolean isSupport(int version) {
+        if (version <= -1) {
+            return false;
+        } else if (version <= supportVersion) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    public final static int getVersion(String msg) {
+        int msgVersion = -1;
+        try {
+            if (msg != null && msg.contains("lmi::")) {
+                String[] splitedMsg = msg.split("::");
+                if (splitedMsg.length >= 3)
+                    msgVersion = Integer.parseInt(splitedMsg[1]);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return msgVersion;
+    }
+
+    public final static boolean isUnsupportMessage(String msg) {
+        boolean isUnsupportMessage = false;
+        for (String umsg : BuildVars.lunagramUnsupportedMessages) {
+            if (msg.contains(umsg)) {
+                isUnsupportMessage = true;
+                break;
+            }
+        }
+        return isUnsupportMessage;
+    }
+
+    public final static String getUnsupportedMessage() {
+        return BuildVars.getLunagramUnsupportedMessage();
+    }
+
+    public final static String getRequestMessage(LMessage lMessage) {
+        if (lMessage == null) return "";
+
+        String result = "";
+
+        try{
+            switch (lMessage.getVersion()) {
+                case 1:
+                    if (lMessage.getAction().equals("send")) {
+                        result = "[" + LocaleController.getString("sendRequest", R.string.sendRequest) + "]\n\n";
+                    } else {
+                        result = "[" + LocaleController.getString("unknownRequest", R.string.unknownRequest) + "]\n\n";
+                    }
+
+                    result = result + LocaleController.getString("requester", R.string.requester) + " : " + lMessage.getRequesterId() + "\n\n";
+
+                    String from = lMessage.getFrom();
+                    String memo = lMessage.getMemo();
+
+                    if (from != null)
+                        result = result + LocaleController.getString("from", R.string.from) + " : " + from + "\n\n";
+                    result = result + LocaleController.getString("requester", R.string.to) + " : " + lMessage.getTo() + "\n\n";
+                    result = result + LocaleController.getString("amount", R.string.amount) + " : " + lMessage.getAmount() + lMessage.getDenom() + "\n\n";
+                    if (memo != null)
+                        result = result + LocaleController.getString("requester", R.string.memo) + " : " + lMessage.getMemo() + "\n";
+                    break;
+            }
+        }catch (Exception e){
+            result = BuildVars.getLunagramUnsupportedMessage();
+        }
+
+        return result;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/utils/NetworkUtil.java b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/NetworkUtil.java
new file mode 100644
index 000000000..17a1a7839
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/NetworkUtil.java
@@ -0,0 +1,13 @@
+package com.lunamint.wallet.utils;
+
+import android.content.Context;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+
+public class NetworkUtil {
+    public static final boolean isNetworkAvailable(Context context) {
+        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
+        NetworkInfo activeNetworkInfo = (connectivityManager != null) ? connectivityManager.getActiveNetworkInfo() : null;
+        return activeNetworkInfo != null && activeNetworkInfo.isConnected();
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/utils/NumberFormatter.java b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/NumberFormatter.java
new file mode 100644
index 000000000..3b4be2016
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/NumberFormatter.java
@@ -0,0 +1,28 @@
+package com.lunamint.wallet.utils;
+
+import java.text.DecimalFormat;
+
+public class NumberFormatter {
+    public static final String getNumber(String origin) {
+        try {
+            double num = Double.parseDouble(origin);
+            DecimalFormat format = new DecimalFormat("#,###.####");
+            return format.format(num);
+        } catch (Exception e) {
+            e.printStackTrace();
+            return origin;
+        }
+    }
+
+    public static final String getNumberWithFixedDecimal(String origin) {
+        try {
+            double num = Double.parseDouble(origin);
+            DecimalFormat format = new DecimalFormat("#,##0.0000");
+            return format.format(num);
+        } catch (Exception e) {
+            e.printStackTrace();
+            return origin;
+        }
+    }
+}
+
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/utils/Parser.java b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/Parser.java
new file mode 100644
index 000000000..e50d0be2d
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/Parser.java
@@ -0,0 +1,270 @@
+package com.lunamint.wallet.utils;
+
+import android.support.annotation.NonNull;
+import android.util.Log;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.model.AccountInfo;
+import com.lunamint.wallet.model.AccountInfoWithSeed;
+import com.lunamint.wallet.model.TransactionHistory;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.model.tx.DefaultHistory;
+import com.lunamint.wallet.model.tx.proposal.ProposalHistory;
+import com.lunamint.wallet.model.tx.send.SendHistory;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+
+import retrofit2.Response;
+
+public class Parser {
+
+    public static final String TAG = "Parser";
+
+    public static final AccountInfoWithSeed getAccountInfoWithSeed(String data, boolean hasSeed) {
+        AccountInfoWithSeed result = null;
+
+        try {
+            JSONObject jsonObject = new JSONObject(data);
+            String name = jsonObject.getString("name");
+            String type = jsonObject.getString("type");
+            String address = jsonObject.getString("address");
+            String pubkey = jsonObject.getString("pubkey");
+            String seed = "";
+            if (hasSeed) seed = jsonObject.getString("mnemonic");
+
+            result = new AccountInfoWithSeed(name, type, address, pubkey, seed);
+        } catch (JSONException e) {
+            e.printStackTrace();
+            Log.e(Parser.TAG, "Result can not be parsed : " + data);
+        }
+
+        return result;
+    }
+
+    public static final ArrayList<AccountInfo> getAccountList(String data) {
+        ArrayList<AccountInfo> result = new ArrayList<>();
+
+        if (data != null) {
+            try {
+                JSONArray jsonArray = new JSONArray(data);
+                for (int i = 0; jsonArray.length() > i; i++) {
+                    JSONObject jsonObject = new JSONObject(jsonArray.get(i).toString());
+                    String name = jsonObject.getString("name");
+                    String type = jsonObject.getString("type");
+                    String address = jsonObject.getString("address");
+                    String pub_key = jsonObject.getString("pubkey");
+
+                    result.add(new AccountInfo(name, type, address, pub_key));
+                }
+            } catch (JSONException e) {
+                e.printStackTrace();
+                Log.e(Parser.TAG, "Result can not be parsed : " + data);
+            }
+        }
+        return result;
+    }
+
+    public static final JsonObject getRawTransaction(String source) {
+        try {
+            JSONObject rs = new JSONObject(source);
+            JSONObject tx = new JSONObject();
+            tx.put("tx", rs.getJSONObject("value"));
+            tx.put("mode", "sync");
+
+            Gson gson = new GsonBuilder().create();
+            JsonElement element = gson.fromJson(tx.toString(), JsonElement.class);
+
+            return element.getAsJsonObject();
+        } catch (JSONException e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+
+
+    // TODO: need to handling multiple msg
+    public static final TransactionHistory getTransactionHistory(SendHistory data) {
+
+        if (data == null) return null;
+
+        try {
+            return new TransactionHistory(
+                    data.getHash(),
+                    data.getTx().getValue().getMsg().get(0).getType(),
+                    Integer.parseInt(data.getHeight()),
+                    data.getTx().getValue().getMsg().get(0).getValue().getFromAddress(),
+                    data.getTx().getValue().getMsg().get(0).getValue().getToAddress(),
+                    data.getTx().getValue().getMsg().get(0).getValue().getCoin().getAmount(),
+                    data.getTx().getValue().getMsg().get(0).getValue().getCoin().getDenom());
+        } catch (NullPointerException e) {
+            e.printStackTrace();
+            return null;
+        } catch (Exception e) {
+            e.printStackTrace();
+            return null;
+        }
+
+    }
+
+    // TODO: need to handling multiple msg
+    public static final TransactionHistory getTransactionHistory(DefaultHistory data) {
+
+        if (data == null) return null;
+
+        try {
+            switch (data.getTx().getValue().getMsg().get(0).getType()) {
+                case "cosmos-sdk/MsgDelegate":
+                    return new TransactionHistory(
+                            data.getHash(),
+                            data.getTx().getValue().getMsg().get(0).getType(),
+                            Integer.parseInt(data.getHeight()),
+                            data.getTx().getValue().getMsg().get(0).getValue().get("delegator_address").getAsString(),
+                            data.getTx().getValue().getMsg().get(0).getValue().get("validator_address").getAsString(),
+                            BigDecimalUtil.getNumberNano(data.getTx().getValue().getMsg().get(0).getValue().getAsJsonObject("amount").get("amount").getAsString(), "4"),
+                            data.getTx().getValue().getMsg().get(0).getValue().getAsJsonObject("amount").get("denom").getAsString());
+                case "cosmos-sdk/MsgUndelegate":
+                    return new TransactionHistory(
+                            data.getHash(),
+                            data.getTx().getValue().getMsg().get(0).getType(),
+                            Integer.parseInt(data.getHeight()),
+                            data.getTx().getValue().getMsg().get(0).getValue().get("delegator_address").getAsString(),
+                            data.getTx().getValue().getMsg().get(0).getValue().get("validator_address").getAsString(),
+                            BigDecimalUtil.getNumberNano(data.getTx().getValue().getMsg().get(0).getValue().getAsJsonObject("amount").get("amount").getAsString(), "4"),
+                            data.getTx().getValue().getMsg().get(0).getValue().getAsJsonObject("amount").get("denom").getAsString());
+                case "cosmos-sdk/MsgBeginRedelegate":
+                    return new TransactionHistory(
+                            data.getHash(),
+                            data.getTx().getValue().getMsg().get(0).getType(),
+                            Integer.parseInt(data.getHeight()),
+                            data.getTx().getValue().getMsg().get(0).getValue().get("delegator_address").getAsString(),
+                            data.getTx().getValue().getMsg().get(0).getValue().get("validator_dst_address").getAsString(),
+                            BigDecimalUtil.getNumberNano(data.getTx().getValue().getMsg().get(0).getValue().getAsJsonObject("amount").get("amount").getAsString(), "4"),
+                            data.getTx().getValue().getMsg().get(0).getValue().getAsJsonObject("amount").get("denom").getAsString());
+                case "cosmos-sdk/MsgWithdrawDelegationReward":
+                    return new TransactionHistory(
+                            data.getHash(),
+                            data.getTx().getValue().getMsg().get(0).getType(),
+                            Integer.parseInt(data.getHeight()),
+                            data.getTx().getValue().getMsg().get(0).getValue().get("delegator_address").getAsString(),
+                            data.getTx().getValue().getMsg().get(0).getValue().get("validator_address").getAsString(),
+                            null,
+                            null);
+            }
+
+            return null;
+
+        } catch (NullPointerException e) {
+            e.printStackTrace();
+            return null;
+        } catch (Exception e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+
+    // TODO: need to handling multiple msg
+    public static final TransactionHistory getTransactionHistory(ProposalHistory data) {
+
+        if (data == null) return null;
+
+        try {
+            return new TransactionHistory(
+                    data.getHash(),
+                    data.getTx().getValue().getMsg().get(0).getType(),
+                    Integer.parseInt(data.getHeight()),
+                    data.getTx().getValue().getMsg().get(0).getValue().getVoter(),
+                    data.getTx().getValue().getMsg().get(0).getValue().getProposalId(),
+                    data.getTx().getValue().getMsg().get(0).getValue().getOption(),
+                    "");
+        } catch (NullPointerException e) {
+            e.printStackTrace();
+            return null;
+        } catch (Exception e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+
+    public static final String getTxHashFromSend(String data) {
+        String result = "";
+
+        try {
+            result = data.substring(data.lastIndexOf("tx hash: ") + 9, data.length() - 1);
+        } catch (IndexOutOfBoundsException e) {
+            e.printStackTrace();
+        }
+
+        return result;
+    }
+
+    //Todo: Need to verify it properly about Hash.
+    @NonNull
+    public static final String getTxHashFromTelegramMsg(String data) {
+        String result = "";
+
+        if (data == null) return result;
+
+        try {
+            if(data.contains("Tx Hash")){
+                result = data.substring(data.lastIndexOf("Tx Hash : ") + 10, data.lastIndexOf("Tx Hash : ") + 10 + 64);
+            }else{
+                result = data.substring(data.lastIndexOf("트랜잭션 해시 : ") + 10, data.lastIndexOf("트랜잭션 해시 : ") + 10 + 64);
+            }
+
+
+        } catch (IndexOutOfBoundsException e) {
+            e.printStackTrace();
+        }
+
+        return result;
+    }
+
+    public static final String getShotAddressForDisplay(String data) {
+        String result = "";
+
+        try {
+            int length = data.length();
+            if (data.contains("cosmosvaloper")) {
+                result = data.substring(0, 17) + "..." + data.substring(length - 5, length);
+            } else {
+                result = data.substring(0, 9) + "..." + data.substring(length - 5, length);
+            }
+
+        } catch (IndexOutOfBoundsException e) {
+            e.printStackTrace();
+        }
+
+        return result;
+    }
+
+    public static final Coin getCoinFromName(Response<ArrayList<Coin>> response, String tokenName) {
+        if (response != null && response.code() == 200) {
+            ArrayList<Coin> coins = response.body();
+            if (coins != null && coins.size() > 0) {
+                for (int i = 0; coins.size() > i; i++) {
+                    if (coins.get(i).getDenom().equals(tokenName)) return (coins.get(i));
+                }
+            } else {
+                return getCoinForEmpty(tokenName);
+            }
+        }
+
+        return getCoinForEmpty(tokenName);
+    }
+
+    private static final Coin getCoinForEmpty(String tokenName) {
+        Coin coin = new Coin();
+        coin.setDenom(tokenName);
+        coin.setAmount("0");
+        return coin;
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/utils/TimeUtil.java b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/TimeUtil.java
new file mode 100644
index 000000000..f658eb502
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/TimeUtil.java
@@ -0,0 +1,7 @@
+package com.lunamint.wallet.utils;
+
+public class TimeUtil {
+    public final static long getCurrentTimeMillis(){
+        return System.currentTimeMillis();
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/utils/TokenUtil.java b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/TokenUtil.java
new file mode 100644
index 000000000..ef5e9cc4b
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/TokenUtil.java
@@ -0,0 +1,92 @@
+package com.lunamint.wallet.utils;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.Blockchain;
+import com.lunamint.wallet.model.Coin;
+
+import java.util.ArrayList;
+
+public class TokenUtil {
+
+    public final static String DEFAULT_TOKENS[] = {"dgms", "ogx", "tepx", "synco", "qual"};
+    public final static String DEFAULT_TOKEN_FULLNAMES[] = {"Dogemos", "OGX", "TEPX", "Synco", "Decipher Token"};
+    public final static int DEFAULT_TOKEN_IMGS[] = {R.drawable.ic_token_dgms, R.drawable.ic_token_ogx, R.drawable.ic_token_tepx, R.drawable.ic_token_synco, R.drawable.ic_token_qual};
+
+    public static Coin getCoin(ArrayList<Coin> coins, String denom) {
+        if (coins != null) {
+            for (Coin coin : coins) {
+                if (coin.getDenom().equals(denom)) {
+                    return coin;
+                }
+            }
+        }
+
+        Coin coin = new Coin();
+        coin.setDenom(Blockchain.getInstance().getReserveDenom());
+        coin.setAmount("0");
+
+        return coin;
+    }
+
+    public static int getTokenIcon(String tokenName) {
+        int ic;
+
+        if (tokenName.equals(Blockchain.getInstance().getReserveDenom())) {
+            ic = R.drawable.ic_token_cosmos;
+        } else if (tokenName.equals("iris")) {
+            ic = R.drawable.ic_token_iris;
+        } else if (tokenName.equals("dgms")) {
+            ic = DEFAULT_TOKEN_IMGS[0];
+        } else if (tokenName.equals("ogx")) {
+            ic = DEFAULT_TOKEN_IMGS[1];
+        } else if (tokenName.equals("tepx")) {
+            ic = DEFAULT_TOKEN_IMGS[2];
+        } else if (tokenName.equals("synco")) {
+            ic = DEFAULT_TOKEN_IMGS[3];
+        } else if (tokenName.equals("qual")) {
+            ic = DEFAULT_TOKEN_IMGS[4];
+        } else {
+            ic = R.drawable.profile_frame;
+        }
+        return ic;
+    }
+
+    public static String getTokenFullname(String tokenName) {
+        String fullname;
+        switch (tokenName) {
+            case "dgms":
+                fullname = DEFAULT_TOKEN_FULLNAMES[0];
+                break;
+            case "ogx":
+                fullname = DEFAULT_TOKEN_FULLNAMES[1];
+                break;
+            case "tepx":
+                fullname = DEFAULT_TOKEN_FULLNAMES[2];
+                break;
+            case "synco":
+                fullname = DEFAULT_TOKEN_FULLNAMES[3];
+                break;
+            case "qual":
+                fullname = DEFAULT_TOKEN_FULLNAMES[4];
+                break;
+            default:
+                fullname = null;
+        }
+        return fullname;
+    }
+
+    public static String getTokenDisplayName(String tokenName) {
+        String name;
+        switch (tokenName) {
+            case "stake":
+                name = "atom";
+                break;
+            case "uatom":
+                name = "atom";
+                break;
+            default:
+                name = tokenName;
+        }
+        return name;
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/utils/UiUtil.java b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/UiUtil.java
new file mode 100644
index 000000000..5af99984b
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/UiUtil.java
@@ -0,0 +1,10 @@
+package com.lunamint.wallet.utils;
+
+import org.telegram.messenger.AndroidUtilities;
+
+public class UiUtil {
+
+    public final static long getDefaultElevation(){
+        return AndroidUtilities.dp(2);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/lunamint/wallet/utils/VarifyUtil.java b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/VarifyUtil.java
new file mode 100644
index 000000000..f7f033563
--- /dev/null
+++ b/TMessagesProj/src/main/java/com/lunamint/wallet/utils/VarifyUtil.java
@@ -0,0 +1,62 @@
+package com.lunamint.wallet.utils;
+
+import android.content.Context;
+import android.widget.Toast;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.StakeCoinActivity;
+
+import org.telegram.messenger.LocaleController;
+
+public class VarifyUtil {
+
+    public static final boolean isValidValidator(Context context, int type, String validatorAddress, String redelegateValidatorAddress){
+        String err_msg;
+
+        err_msg = varifyValidatorAddress(context, validatorAddress);
+        if(err_msg != null) {
+            Toast.makeText(context, err_msg, Toast.LENGTH_LONG).show();
+            return false;
+        }
+
+        if(type == StakeCoinActivity.TYPE_REDELEGATE){
+            err_msg = varifyValidatorAddress(context, redelegateValidatorAddress);
+            if(err_msg != null) {
+                Toast.makeText(context, err_msg, Toast.LENGTH_LONG).show();
+                return false;
+            }
+
+            if(redelegateValidatorAddress != null){
+                if(validatorAddress.equals(redelegateValidatorAddress)){
+                    err_msg = LocaleController.getString("sameAsValidatorError", R.string.sameAsValidatorError);
+                }
+            }
+
+            if(err_msg != null) {
+                Toast.makeText(context, err_msg, Toast.LENGTH_LONG).show();
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+
+    //Todo: Need to verify it properly about validator addr.
+    private static final String varifyValidatorAddress(Context context, String address){
+        if(address == null){
+            return LocaleController.getString("noSelectedValidatorError", R.string.noSelectedValidatorError);
+        } else if (address.length() == 0){
+            return LocaleController.getString("noSelectedValidatorError", R.string.noSelectedValidatorError);
+        } else if (!address.contains("cosmosvaloper") || address.length() != 52){
+            return  LocaleController.getString("validatorAddressInvalidError", R.string.validatorAddressInvalidError);
+        } else {
+            return null;
+        }
+    }
+
+    //Todo: Need to verify it properly about cosmosaddr.
+    public static final boolean isValidCosmosAddress(String address){
+        return (address != null && address.contains("cosmos") && address.length() == 45);
+    }
+}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/adapter/CardFragment.java b/TMessagesProj/src/main/java/com/telemint/ui/adapter/CardFragment.java
deleted file mode 100644
index 933461702..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/adapter/CardFragment.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package com.telemint.ui.adapter;
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.v4.app.Fragment;
-import android.support.v7.widget.CardView;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.telemint.messenger.R;
-import com.telemint.ui.component.CardAdapter;
-
-import org.telegram.ui.Components.LayoutHelper;
-
-
-public class CardFragment extends LinearLayout {
-
-    private CardView cardView;
-
-    public CardFragment(@NonNull Context context, int position) {
-        super(context);
-
-        if(position != 3){
-            LayoutInflater inflater = (LayoutInflater)   context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-            cardView = (CardView) inflater.inflate(R.layout.sample_cardview, null);
-            cardView.setMaxCardElevation(cardView.getCardElevation() * CardAdapter.MAX_ELEVATION_FACTOR);
-            addView(cardView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-
-            TextView title = (TextView) findViewById(R.id.title);
-            Button button = (Button) findViewById(R.id.button);
-
-
-            title.setText("Acc name "+position);
-        }else{
-            LayoutInflater inflater = (LayoutInflater)   context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-            cardView = (CardView) inflater.inflate(R.layout.sample_cardview2, null);
-            cardView.setMaxCardElevation(cardView.getCardElevation() * CardAdapter.MAX_ELEVATION_FACTOR);
-            addView(cardView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-        }
-
-
-    }
-
-    public CardView getCardView() {
-        return cardView;
-    }
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/adapter/CardFragmentPagerAdapter.java b/TMessagesProj/src/main/java/com/telemint/ui/adapter/CardFragmentPagerAdapter.java
deleted file mode 100644
index a071cb2fd..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/adapter/CardFragmentPagerAdapter.java
+++ /dev/null
@@ -1,69 +0,0 @@
-package com.telemint.ui.adapter;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.v4.view.PagerAdapter;
-import android.support.v7.widget.CardView;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.telemint.ui.component.CardAdapter;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class CardFragmentPagerAdapter extends PagerAdapter implements CardAdapter {
-
-    private List<CardFragment> fragments;
-    private float baseElevation;
-    private Context mContext;
-
-
-
-    public CardFragmentPagerAdapter(Context context, float baseElevation) {
-        fragments = new ArrayList<>();
-        this.baseElevation = baseElevation;
-        this.mContext = context;
-
-        for(int i = 0; i< 4; i++){
-            fragments.add(new CardFragment(context, i));
-        }
-    }
-
-    @Override
-    public float getBaseElevation() {
-        return baseElevation;
-    }
-
-    @Override
-    public CardView getCardViewAt(int position) {
-        return fragments.get(position).getCardView();
-    }
-
-
-    @Override
-    public int getCount() {
-        return fragments.size();
-    }
-
-    @Override
-    public void destroyItem(ViewGroup collection, int position, Object view) {
-        collection.removeView((View) view);
-    }
-
-
-    @Override
-    public Object instantiateItem(ViewGroup collection, int position) {
-
-        CardFragment cardView = fragments.get(position);
-        collection.addView(cardView);
-        return cardView;
-    }
-
-    @Override
-    public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {
-        return view == object;
-    }
-
-
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/adapter/MainTabAdapter.java b/TMessagesProj/src/main/java/com/telemint/ui/adapter/MainTabAdapter.java
deleted file mode 100644
index 8b415d343..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/adapter/MainTabAdapter.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package com.telemint.ui.adapter;
-
-import android.content.Context;
-import android.support.v4.view.PagerAdapter;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.RelativeLayout;
-
-import com.telemint.ui.view.WalletView;
-
-import org.telegram.ui.Components.RecyclerListView;
-import org.telegram.ui.DialogsActivity;
-
-public class MainTabAdapter extends PagerAdapter {
-
-    private Context mContext;
-    private DialogsActivity mActivity;
-    private RecyclerListView dialogsListview;
-
-    public MainTabAdapter(Context context, DialogsActivity activity, RecyclerListView listview){
-        mContext = context;
-        mActivity = activity;
-        dialogsListview = listview;
-    }
-
-    @Override
-    public int getCount() {
-        return 2;
-    }
-
-    @Override
-    public boolean isViewFromObject(View view, Object object) {
-        return view == object;
-    }
-
-    @Override
-    public void destroyItem(ViewGroup collection, int position, Object view) {
-        collection.removeView((View) view);
-    }
-
-    @Override
-    public Object instantiateItem(ViewGroup collection, int position) {
-        if(position == 0){
-            collection.addView(dialogsListview);
-            return dialogsListview;
-        }else{
-            RelativeLayout walletView = new WalletView(mContext);
-            collection.addView(walletView);
-            return walletView;
-        }
-
-    }
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/cell/DefaultInfoCell.java b/TMessagesProj/src/main/java/com/telemint/ui/cell/DefaultInfoCell.java
deleted file mode 100644
index 726495a11..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/cell/DefaultInfoCell.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package com.telemint.ui.cell;
-
-import android.content.Context;
-import android.view.Gravity;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import com.telemint.messenger.R;
-
-import org.telegram.messenger.AndroidUtilities;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class DefaultInfoCell extends LinearLayout {
-
-    private TextView fieldTitleTextview;
-    private TextView fieldValueTextview;
-
-    public DefaultInfoCell(Context context) {
-        super(context);
-
-        setOrientation(LinearLayout.HORIZONTAL);
-        setGravity(Gravity.CENTER_VERTICAL);
-
-        LinearLayout textLayout = new LinearLayout(context);
-        textLayout.setOrientation(LinearLayout.VERTICAL);
-        addView(textLayout, LayoutHelper.createLinear(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1, Gravity.NO_GRAVITY));
-
-        ImageView arrow = new ImageView(context);
-        arrow.setImageResource(R.drawable.list_arrow);
-        arrow.setScaleType(ImageView.ScaleType.FIT_XY);
-        addView(arrow);
-
-        fieldTitleTextview = new TextView(context);
-        fieldTitleTextview.setTextColor(getResources().getColor(R.color.text_title_default));
-        fieldTitleTextview.setTextSize(0, AndroidUtilities.dp(14));
-        textLayout.addView(fieldTitleTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, Gravity.NO_GRAVITY,0,8,0,0));
-
-        fieldValueTextview = new TextView(context);
-        fieldValueTextview.setTextColor(getResources().getColor(R.color.text_title_default));
-        fieldValueTextview.setTextSize(0, AndroidUtilities.dp(10));
-        textLayout.addView(fieldValueTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, Gravity.NO_GRAVITY,0,0,0,8));
-
-
-    }
-
-    public void update(String title, String value){
-        fieldTitleTextview.setText(title);
-        fieldValueTextview.setText(value);
-    }
-
-
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/cell/ValidatorListCell.java b/TMessagesProj/src/main/java/com/telemint/ui/cell/ValidatorListCell.java
deleted file mode 100644
index fa51e6d26..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/cell/ValidatorListCell.java
+++ /dev/null
@@ -1,56 +0,0 @@
-package com.telemint.ui.cell;
-
-import android.content.Context;
-import android.view.Gravity;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import com.telemint.messenger.R;
-
-import org.telegram.messenger.AndroidUtilities;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class ValidatorListCell extends LinearLayout {
-
-    private TextView fieldTitleTextview;
-    private TextView fieldValueTextview;
-
-    public ValidatorListCell(Context context) {
-        super(context);
-
-        setOrientation(LinearLayout.HORIZONTAL);
-        setGravity(Gravity.CENTER_VERTICAL);
-
-        ImageView profileImageview = new ImageView(context);
-        profileImageview.setBackgroundColor(context.getResources().getColor(R.color.tab_text_selected));
-        addView(profileImageview, LayoutHelper.createLinear(26, 26, 0,0,10,0));
-
-        LinearLayout textLayout = new LinearLayout(context);
-        textLayout.setOrientation(LinearLayout.VERTICAL);
-        addView(textLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
-
-        ImageView arrow = new ImageView(context);
-        arrow.setImageResource(R.drawable.list_arrow);
-        arrow.setScaleType(ImageView.ScaleType.FIT_XY);
-        addView(arrow);
-
-        fieldTitleTextview = new TextView(context);
-        fieldTitleTextview.setTextColor(context.getResources().getColor(R.color.text_title_default));
-        fieldTitleTextview.setTextSize(0, AndroidUtilities.dp(14));
-        textLayout.addView(fieldTitleTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT,0,15,0,0));
-
-        fieldValueTextview = new TextView(context);
-        fieldValueTextview.setTextColor(context.getResources().getColor(R.color.text_title_default));
-        fieldValueTextview.setTextSize(0, AndroidUtilities.dp(10));
-        textLayout.addView(fieldValueTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT,0,0,0,15));
-
-    }
-
-    public void update(int position, String name, String fee, String voting_power){
-        fieldTitleTextview.setText("#" + (position+1) + " - " + name);
-        fieldValueTextview.setText("Fee - " + fee + " / VotingPower - " + voting_power);
-    }
-
-
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/fragment/SendAssetFragment.java b/TMessagesProj/src/main/java/com/telemint/ui/fragment/SendAssetFragment.java
deleted file mode 100644
index f59fab5d4..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/fragment/SendAssetFragment.java
+++ /dev/null
@@ -1,171 +0,0 @@
-package com.telemint.ui.fragment;
-
-import android.content.Context;
-import android.content.res.ColorStateList;
-import android.graphics.PorterDuff;
-import android.graphics.PorterDuffColorFilter;
-import android.graphics.drawable.Drawable;
-import android.os.Build;
-import android.os.Bundle;
-import android.support.design.widget.TextInputLayout;
-import android.text.InputType;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.EditText;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import com.telemint.messenger.R;
-
-import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.FileLog;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.CombinedDrawable;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class SendAssetFragment extends BaseFragment {
-
-    public SendAssetFragment(Bundle args) {
-        super(args);
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-
-    }
-    @Override
-    public View createView(Context context) {
-        actionBar.setTitle("Send");
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setBackgroundColor(context.getResources().getColor(R.color.actionbar_bg));
-
-        LinearLayout mainLayout = new LinearLayout(context);
-        mainLayout.setOrientation(LinearLayout.VERTICAL);
-        fragmentView = mainLayout;
-        makePrototypeLayout(context, mainLayout);
-        return fragmentView;
-    }
-
-    protected void clearViews() {
-        if (fragmentView != null) {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
-            if (parent != null) {
-                try {
-                    onRemoveFromParent();
-                    parent.removeView(fragmentView);
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-            }
-            fragmentView = null;
-        }
-        if (actionBar != null) {
-            ViewGroup parent = (ViewGroup) actionBar.getParent();
-            if (parent != null) {
-                try {
-                    parent.removeView(actionBar);
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-            }
-            actionBar = null;
-        }
-        parentLayout = null;
-    }
-
-    private void makePrototypeLayout(Context context, LinearLayout mainLayout){
-
-        TextView balanceTextview = new TextView(context);
-        balanceTextview.setGravity(Gravity.CENTER);
-        balanceTextview.setText("Wallet Balance: 250,000 ATOM");
-        balanceTextview.setTextColor(context.getResources().getColor(R.color.text_value_default));
-        balanceTextview.setTextSize(0, AndroidUtilities.dp(16));
-        mainLayout.addView(balanceTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT,0,16,0,16));
-
-        String titles[] = {"Cosmos Address", "Amount to Send", "Memo id"};
-
-        for (int i = 0; titles.length > i; i++){
-            LayoutInflater inflater = (LayoutInflater)   context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-            TextInputLayout textInputLayout = (TextInputLayout) inflater.inflate(R.layout.text_input_layout, null);
-            textInputLayout.setHintTextAppearance(R.style.TextInputAppearance);
-            mainLayout.addView(textInputLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT,10,0,10,0));
-
-            EditText editText = new EditText(context);
-            editText.setHint(titles[i]);
-            editText.setSingleLine();
-            editText.setTextColor(context.getResources().getColor(R.color.text_title_default));
-            if(i == 1) editText.setInputType(InputType.TYPE_CLASS_NUMBER);
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-                editText.setBackgroundTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.tab_text_selected)));
-            }
-            textInputLayout.addView(editText, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-        }
-
-
-        LinearLayout buttonLayout = new LinearLayout(context);
-        buttonLayout.setGravity(Gravity.CENTER_HORIZONTAL);
-        buttonLayout.setPadding(AndroidUtilities.dp(10), AndroidUtilities.dp(16), AndroidUtilities.dp(10), AndroidUtilities.dp(16));
-        mainLayout.addView(buttonLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-
-        LinearLayout stakeButton = new LinearLayout(context);
-        stakeButton.setGravity(Gravity.CENTER);
-        buttonLayout.addView(stakeButton, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT,0,0,17,0));
-
-        Drawable drawable = context.getResources().getDrawable(R.drawable.btn_green);
-        if (Build.VERSION.SDK_INT < 21) {
-            Drawable shadowDrawable = context.getResources().getDrawable(R.drawable.floating_shadow).mutate();
-            shadowDrawable.setColorFilter(new PorterDuffColorFilter(0xff000000, PorterDuff.Mode.MULTIPLY));
-            CombinedDrawable combinedDrawable = new CombinedDrawable(shadowDrawable, drawable, 0, 0);
-            combinedDrawable.setIconSize(AndroidUtilities.dp(56), AndroidUtilities.dp(56));
-            drawable = combinedDrawable;
-        }
-        stakeButton.setBackground(drawable);
-
-        ImageView sendIconImageview = new ImageView(context);
-        sendIconImageview.setImageResource(R.drawable.icon_plus);
-        sendIconImageview.setScaleType(ImageView.ScaleType.FIT_XY);
-        stakeButton.setOnClickListener(onClickListener);
-        stakeButton.addView(sendIconImageview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0,0,5,0));
-
-        TextView sendTextview = new TextView(context);
-        sendTextview.setText("SEND");
-        sendTextview.setTextColor(context.getResources().getColor(R.color.btn_text_default));
-        sendTextview.setTextSize(0, AndroidUtilities.dp(12));
-        stakeButton.addView(sendTextview);
-
-        LinearLayout cancelButton = new LinearLayout(context);
-        cancelButton.setBackgroundResource(R.drawable.btn_black);
-        cancelButton.setGravity(Gravity.CENTER);
-        buttonLayout.addView(cancelButton);
-
-        ImageView cancelIconImageview = new ImageView(context);
-        cancelIconImageview.setImageResource(R.drawable.icon_x);
-        cancelIconImageview.setScaleType(ImageView.ScaleType.FIT_XY);
-        cancelButton.addView(cancelIconImageview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0,0,5,0));
-
-        TextView unbondTextview = new TextView(context);
-        unbondTextview.setText("CANCEL");
-        unbondTextview.setTextColor(context.getResources().getColor(R.color.btn_text_default));
-        unbondTextview.setTextSize(0, AndroidUtilities.dp(12));
-        cancelButton.addView(unbondTextview);
-
-    }
-
-    private View.OnClickListener onClickListener = new View.OnClickListener() {
-        @Override
-        public void onClick(View v) {
-            presentCompleteFragment();
-        }
-    };
-
-    private void presentCompleteFragment(){
-        Bundle args = new Bundle();
-        args.putString("title", "Send");
-        args.putString("message", "Sending Complete!");
-        presentFragment(new SendTransactionCompleteFragment(args));
-    }
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/fragment/SendTransactionCompleteFragment.java b/TMessagesProj/src/main/java/com/telemint/ui/fragment/SendTransactionCompleteFragment.java
deleted file mode 100644
index c39964fb9..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/fragment/SendTransactionCompleteFragment.java
+++ /dev/null
@@ -1,136 +0,0 @@
-package com.telemint.ui.fragment;
-
-import android.content.Context;
-import android.graphics.Color;
-import android.graphics.PorterDuff;
-import android.graphics.PorterDuffColorFilter;
-import android.graphics.drawable.Drawable;
-import android.os.Build;
-import android.os.Bundle;
-import android.view.Gravity;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import com.telemint.messenger.R;
-
-import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.FileLog;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.CombinedDrawable;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.DialogsActivity;
-import org.telegram.ui.LaunchActivity;
-
-public class SendTransactionCompleteFragment extends BaseFragment {
-
-    public SendTransactionCompleteFragment(Bundle args) {
-        super(args);
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-
-    }
-    @Override
-    public View createView(Context context) {
-        actionBar.setTitle(getArguments().getString("title"));
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setBackgroundColor(context.getResources().getColor(R.color.actionbar_bg));
-
-
-
-        LinearLayout mainLayout = new LinearLayout(context);
-        mainLayout.setOrientation(LinearLayout.VERTICAL);
-        mainLayout.setGravity(Gravity.CENTER);
-        mainLayout.setBackgroundColor(0xff004d40);
-        fragmentView = mainLayout;
-        makePrototypeLayout(context, mainLayout);
-        return fragmentView;
-    }
-
-    protected void clearViews() {
-        if (fragmentView != null) {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
-            if (parent != null) {
-                try {
-                    onRemoveFromParent();
-                    parent.removeView(fragmentView);
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-            }
-            fragmentView = null;
-        }
-        if (actionBar != null) {
-            ViewGroup parent = (ViewGroup) actionBar.getParent();
-            if (parent != null) {
-                try {
-                    parent.removeView(actionBar);
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-            }
-            actionBar = null;
-        }
-        parentLayout = null;
-    }
-
-    private void makePrototypeLayout(Context context, LinearLayout mainLayout){
-
-        ImageView completeImageview = new ImageView(context);
-        completeImageview.setScaleType(ImageView.ScaleType.FIT_XY);
-        completeImageview.setImageResource(R.drawable.tx_complete_check);
-        mainLayout.addView(completeImageview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
-
-        TextView resultTextview = new TextView(context);
-        resultTextview.setTextColor(Color.WHITE);
-        resultTextview.setTextSize(0, AndroidUtilities.dp(20));
-        resultTextview.setText(getArguments().getString("message"));
-        mainLayout.addView(resultTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0,36,0,54));
-
-        LinearLayout okayButton = new LinearLayout(context);
-        okayButton.setGravity(Gravity.CENTER);
-        mainLayout.addView(okayButton, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
-
-        Drawable drawable = context.getResources().getDrawable(R.drawable.btn_white);
-        if (Build.VERSION.SDK_INT < 21) {
-            Drawable shadowDrawable = context.getResources().getDrawable(R.drawable.floating_shadow).mutate();
-            shadowDrawable.setColorFilter(new PorterDuffColorFilter(0xff000000, PorterDuff.Mode.MULTIPLY));
-            CombinedDrawable combinedDrawable = new CombinedDrawable(shadowDrawable, drawable, 0, 0);
-            combinedDrawable.setIconSize(AndroidUtilities.dp(56), AndroidUtilities.dp(56));
-            drawable = combinedDrawable;
-        }
-        okayButton.setBackground(drawable);
-
-        ImageView okayIconImageview = new ImageView(context);
-        okayIconImageview.setImageResource(R.drawable.icon_plus);
-        okayIconImageview.setScaleType(ImageView.ScaleType.FIT_XY);
-        okayButton.setOnClickListener(onClickListener);
-        okayButton.addView(okayIconImageview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT,0,0,5,0));
-
-
-        TextView okayTextview = new TextView(context);
-        okayTextview.setText("OKAY");
-        okayTextview.setTextColor(context.getResources().getColor(R.color.btn_text_green));
-        okayTextview.setTextSize(0, AndroidUtilities.dp(12));
-        okayButton.addView(okayTextview);
-    }
-
-    private View.OnClickListener onClickListener = new View.OnClickListener() {
-        @Override
-        public void onClick(View v) {
-            presentDialogsFragment();
-        }
-    };
-
-    private void presentDialogsFragment(){
-        LaunchActivity launchActivity = (LaunchActivity) getParentActivity();
-
-        DialogsActivity dialogsActivity = new DialogsActivity(arguments);
-        launchActivity.presentFragment(dialogsActivity, false, true);
-    }
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/fragment/StartStakingFragment.java b/TMessagesProj/src/main/java/com/telemint/ui/fragment/StartStakingFragment.java
deleted file mode 100644
index c4464760b..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/fragment/StartStakingFragment.java
+++ /dev/null
@@ -1,187 +0,0 @@
-package com.telemint.ui.fragment;
-
-import android.content.Context;
-import android.content.res.ColorStateList;
-import android.graphics.PorterDuff;
-import android.graphics.PorterDuffColorFilter;
-import android.graphics.drawable.Drawable;
-import android.os.Build;
-import android.os.Bundle;
-import android.support.design.widget.TextInputLayout;
-import android.text.InputType;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.EditText;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import com.telemint.messenger.R;
-
-import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.FileLog;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.CombinedDrawable;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class StartStakingFragment extends BaseFragment {
-
-    public StartStakingFragment(Bundle args) {
-        super(args);
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-
-    }
-    @Override
-    public View createView(Context context) {
-        actionBar.setTitle("Stake");
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setBackgroundColor(context.getResources().getColor(R.color.actionbar_bg));
-
-        LinearLayout mainLayout = new LinearLayout(context);
-        mainLayout.setOrientation(LinearLayout.VERTICAL);
-        fragmentView = mainLayout;
-        makePrototypeLayout(context, mainLayout);
-        return fragmentView;
-    }
-
-    protected void clearViews() {
-        if (fragmentView != null) {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
-            if (parent != null) {
-                try {
-                    onRemoveFromParent();
-                    parent.removeView(fragmentView);
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-            }
-            fragmentView = null;
-        }
-        if (actionBar != null) {
-            ViewGroup parent = (ViewGroup) actionBar.getParent();
-            if (parent != null) {
-                try {
-                    parent.removeView(actionBar);
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-            }
-            actionBar = null;
-        }
-        parentLayout = null;
-    }
-
-    private void makePrototypeLayout(Context context, LinearLayout mainLayout){
-
-        LinearLayout profileLayout = new LinearLayout(context);
-        profileLayout.setOrientation(LinearLayout.VERTICAL);
-        profileLayout.setPadding(AndroidUtilities.dp(10),AndroidUtilities.dp(10),AndroidUtilities.dp(10),AndroidUtilities.dp(10));
-        mainLayout.addView(profileLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-
-        TextView titleTextview = new TextView(context);
-        titleTextview.setText("Validator");
-        titleTextview.setTextColor(context.getResources().getColor(R.color.text_title_default));
-        titleTextview.setTextSize(0, AndroidUtilities.dp(16));
-        profileLayout.addView(titleTextview);
-
-        TextView nameTextview = new TextView(context);
-        nameTextview.setText("LUNAMINT");
-        nameTextview.setTextColor(context.getResources().getColor(R.color.text_value_default));
-        nameTextview.setTextSize(0, AndroidUtilities.dp(14));
-        profileLayout.addView(nameTextview);
-
-        ImageView line = new ImageView(context);
-        line.setBackgroundColor(0xff000000);
-        line.setAlpha(0.6f);
-        mainLayout.addView(line, new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, 1));
-
-        TextView balanceTextview = new TextView(context);
-        balanceTextview.setGravity(Gravity.CENTER);
-        balanceTextview.setText("Wallet Balance: 250,000 ATOM");
-        balanceTextview.setTextColor(context.getResources().getColor(R.color.text_value_default));
-        balanceTextview.setTextSize(0, AndroidUtilities.dp(16));
-        mainLayout.addView(balanceTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT,0,16,0,16));
-
-        LayoutInflater inflater = (LayoutInflater)   context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-        TextInputLayout amountLayout = (TextInputLayout) inflater.inflate(R.layout.text_input_layout, null);
-        amountLayout.setHintTextAppearance(R.style.TextInputAppearance);
-        mainLayout.addView(amountLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT,10,0,10,0));
-
-        EditText amountEdittext = new EditText(context);
-        amountEdittext.setHint("Amount to Stake");
-        amountEdittext.setTextColor(context.getResources().getColor(R.color.text_title_default));
-        amountEdittext.setInputType(InputType.TYPE_CLASS_NUMBER);
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-            amountEdittext.setBackgroundTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.tab_text_selected)));
-        }
-        amountLayout.addView(amountEdittext, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-
-        LinearLayout buttonLayout = new LinearLayout(context);
-        buttonLayout.setGravity(Gravity.CENTER_HORIZONTAL);
-        buttonLayout.setPadding(AndroidUtilities.dp(10), AndroidUtilities.dp(16), AndroidUtilities.dp(10), AndroidUtilities.dp(16));
-        mainLayout.addView(buttonLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-
-        LinearLayout stakeButton = new LinearLayout(context);
-        stakeButton.setGravity(Gravity.CENTER);
-        buttonLayout.addView(stakeButton, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT,0,0,17,0));
-
-        Drawable drawable = context.getResources().getDrawable(R.drawable.btn_green);
-        if (Build.VERSION.SDK_INT < 21) {
-            Drawable shadowDrawable = context.getResources().getDrawable(R.drawable.floating_shadow).mutate();
-            shadowDrawable.setColorFilter(new PorterDuffColorFilter(0xff000000, PorterDuff.Mode.MULTIPLY));
-            CombinedDrawable combinedDrawable = new CombinedDrawable(shadowDrawable, drawable, 0, 0);
-            combinedDrawable.setIconSize(AndroidUtilities.dp(56), AndroidUtilities.dp(56));
-            drawable = combinedDrawable;
-        }
-        stakeButton.setBackground(drawable);
-
-        ImageView stakeIconImageview = new ImageView(context);
-        stakeIconImageview.setImageResource(R.drawable.icon_plus);
-        stakeIconImageview.setScaleType(ImageView.ScaleType.FIT_XY);
-        stakeButton.setOnClickListener(onClickListener);
-        stakeButton.addView(stakeIconImageview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT,0,0,5,0));
-
-        TextView stakeTextview = new TextView(context);
-        stakeTextview.setText("STAKE");
-        stakeTextview.setTextColor(context.getResources().getColor(R.color.btn_text_default));
-        stakeTextview.setTextSize(0, AndroidUtilities.dp(12));
-        stakeButton.addView(stakeTextview);
-
-        LinearLayout cancelButton = new LinearLayout(context);
-        cancelButton.setBackgroundResource(R.drawable.btn_black);
-        cancelButton.setGravity(Gravity.CENTER);
-        buttonLayout.addView(cancelButton, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
-
-        ImageView cancelIconImageview = new ImageView(context);
-        cancelIconImageview.setImageResource(R.drawable.icon_x);
-        cancelIconImageview.setScaleType(ImageView.ScaleType.FIT_XY);
-        cancelButton.addView(cancelIconImageview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT,0,0,5,0));
-
-        TextView unbondTextview = new TextView(context);
-        unbondTextview.setText("CANCEL");
-        unbondTextview.setTextColor(context.getResources().getColor(R.color.btn_text_default));
-        unbondTextview.setTextSize(0, AndroidUtilities.dp(12));
-        cancelButton.addView(unbondTextview);
-
-    }
-
-    View.OnClickListener onClickListener = new View.OnClickListener() {
-        @Override
-        public void onClick(View v) {
-            presentCompleteFragment();
-        }
-    };
-
-    private void presentCompleteFragment(){
-        Bundle args = new Bundle();
-        args.putString("title", "Stake");
-        args.putString("message", "Staking Complete!");
-        presentFragment(new SendTransactionCompleteFragment(args));
-    }
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/fragment/ValidatorInfoFragment.java b/TMessagesProj/src/main/java/com/telemint/ui/fragment/ValidatorInfoFragment.java
deleted file mode 100644
index 5abfcbda4..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/fragment/ValidatorInfoFragment.java
+++ /dev/null
@@ -1,220 +0,0 @@
-package com.telemint.ui.fragment;
-
-import android.content.Context;
-import android.graphics.PorterDuff;
-import android.graphics.PorterDuffColorFilter;
-import android.graphics.drawable.Drawable;
-import android.os.Build;
-import android.os.Bundle;
-import android.view.Gravity;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
-import android.widget.ScrollView;
-import android.widget.TextView;
-
-import com.telemint.messenger.R;
-import com.telemint.ui.test.DummyVars;
-
-import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.FileLog;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.CombinedDrawable;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class ValidatorInfoFragment extends BaseFragment {
-
-    public ValidatorInfoFragment(Bundle args) {
-        super(args);
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-
-    }
-    @Override
-    public View createView(Context context) {
-        actionBar.setTitle("Lunamint - Profile");
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setBackgroundColor(context.getResources().getColor(R.color.actionbar_bg));
-
-        RelativeLayout validatorLayout = new RelativeLayout(context);
-        fragmentView = validatorLayout;
-        makePrototypeLayout(context, validatorLayout);
-        return fragmentView;
-    }
-
-    protected void clearViews() {
-        if (fragmentView != null) {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
-            if (parent != null) {
-                try {
-                    onRemoveFromParent();
-                    parent.removeView(fragmentView);
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-            }
-            fragmentView = null;
-        }
-        if (actionBar != null) {
-            ViewGroup parent = (ViewGroup) actionBar.getParent();
-            if (parent != null) {
-                try {
-                    parent.removeView(actionBar);
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-            }
-            actionBar = null;
-        }
-        parentLayout = null;
-    }
-
-    private void makePrototypeLayout(Context context, RelativeLayout validatorLayout){
-
-        ScrollView scrollView = new ScrollView(context);
-        validatorLayout.addView(scrollView, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
-
-        LinearLayout mainLayout = new LinearLayout(context);
-        mainLayout.setOrientation(LinearLayout.VERTICAL);
-        mainLayout.setPadding(AndroidUtilities.dp(10), AndroidUtilities.dp(0), AndroidUtilities.dp(10), AndroidUtilities.dp(58));
-        scrollView.addView(mainLayout, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-
-        LinearLayout titleLayout = new LinearLayout(context);
-        titleLayout.setGravity(Gravity.CENTER_VERTICAL);
-        mainLayout.addView(titleLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-
-        LinearLayout nameLayout = new LinearLayout(context);
-        nameLayout.setOrientation(LinearLayout.VERTICAL);
-        titleLayout.addView(nameLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1, Gravity.NO_GRAVITY));
-
-        TextView rankTextview = new TextView(context);
-        rankTextview.setTextColor(context.getResources().getColor(R.color.text_title_default));
-        rankTextview.setTextSize(0, AndroidUtilities.dp(34));
-        rankTextview.setText("#1");
-        titleLayout.addView(rankTextview);
-
-        TextView titleTextview = new TextView(context);
-        titleTextview.setText("Validator Profile");
-        titleTextview.setTextColor(context.getResources().getColor(R.color.tab_staking_title));
-        titleTextview.setTextSize(0, AndroidUtilities.dp(16));
-        nameLayout.addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT,0,20,0,0));
-
-        TextView nameTextview = new TextView(context);
-        nameTextview.setText("LUNAMINT");
-        nameTextview.setTextColor(context.getResources().getColor(R.color.text_value_default));
-        nameTextview.setTextSize(0, AndroidUtilities.dp(24));
-        nameLayout.addView(nameTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT,0,0,0,30));
-
-        TextView stakingAmountTextview = new TextView(context);
-        stakingAmountTextview.setText("Your Stake: 280,000 ATOM");
-        stakingAmountTextview.setTextColor(context.getResources().getColor(R.color.text_green));
-        stakingAmountTextview.setTextSize(0, AndroidUtilities.dp(12));
-        stakingAmountTextview.setGravity(Gravity.CENTER);
-        mainLayout.addView(stakingAmountTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT,0,0,0,4));
-
-        TextView unbondPendingAmountTextview = new TextView(context);
-        unbondPendingAmountTextview.setText("Unbond Pending: 50 ATOM");
-        unbondPendingAmountTextview.setTextColor(context.getResources().getColor(R.color.text_green));
-        unbondPendingAmountTextview.setTextSize(0, AndroidUtilities.dp(12));
-        unbondPendingAmountTextview.setGravity(Gravity.CENTER);
-        mainLayout.addView(unbondPendingAmountTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT,0,0,0,12));
-
-        String titles[] = DummyVars.validatorInfoTitles;
-        String values[] = DummyVars.validatorInfoVars;
-        for(int i = 0; titles.length > i; i++){
-            LinearLayout rowLayout = new LinearLayout(context);
-            rowLayout.setOrientation(LinearLayout.HORIZONTAL);
-            rowLayout.setGravity(Gravity.CENTER_VERTICAL);
-            rowLayout.setId(i);
-            rowLayout.setBackgroundColor(0xff00);
-            mainLayout.addView(rowLayout, LayoutHelper.createLinear(RelativeLayout.LayoutParams.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-
-            LinearLayout textLayout = new LinearLayout(context);
-            textLayout.setOrientation(LinearLayout.VERTICAL);
-            rowLayout.addView(textLayout, LayoutHelper.createLinear(0, RelativeLayout.LayoutParams.WRAP_CONTENT, 1, Gravity.NO_GRAVITY));
-
-            TextView fieldTitleTextview = new TextView(context);
-            fieldTitleTextview.setText(titles[i]);
-            fieldTitleTextview.setTextColor(context.getResources().getColor(R.color.text_title_default));
-            fieldTitleTextview.setTextSize(0, AndroidUtilities.dp(14));
-            textLayout.addView(fieldTitleTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT,0,8,0,0));
-
-            TextView fieldValueTextview = new TextView(context);
-            fieldValueTextview.setText(values[i]);
-            fieldValueTextview.setTextColor(context.getResources().getColor(R.color.text_title_default));
-            fieldValueTextview.setTextSize(0, AndroidUtilities.dp(14));
-            textLayout.addView(fieldValueTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT,0,0,0,8));
-
-            ImageView line = new ImageView(context);
-            line.setBackgroundColor(0xff000000);
-            line.setAlpha(0.6f);
-            mainLayout.addView(line, new LinearLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, 1));
-        }
-
-
-        LinearLayout buttonLayout = new LinearLayout(context);
-        buttonLayout.setGravity(Gravity.CENTER_HORIZONTAL);
-        buttonLayout.setPadding(AndroidUtilities.dp(10), AndroidUtilities.dp(16), AndroidUtilities.dp(10), AndroidUtilities.dp(16));
-        validatorLayout.addView(buttonLayout, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, RelativeLayout.ALIGN_PARENT_BOTTOM));
-
-        LinearLayout stakeButton = new LinearLayout(context);
-        stakeButton.setGravity(Gravity.CENTER);
-        buttonLayout.addView(stakeButton, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT,0,0,17,0));
-
-        Drawable drawable = context.getResources().getDrawable(R.drawable.btn_green);
-        if (Build.VERSION.SDK_INT < 21) {
-            Drawable shadowDrawable = context.getResources().getDrawable(R.drawable.floating_shadow).mutate();
-            shadowDrawable.setColorFilter(new PorterDuffColorFilter(0xff000000, PorterDuff.Mode.MULTIPLY));
-            CombinedDrawable combinedDrawable = new CombinedDrawable(shadowDrawable, drawable, 0, 0);
-            combinedDrawable.setIconSize(AndroidUtilities.dp(56), AndroidUtilities.dp(56));
-            drawable = combinedDrawable;
-        }
-        stakeButton.setBackground(drawable);
-
-        ImageView stakeIconImageview = new ImageView(context);
-        stakeIconImageview.setImageResource(R.drawable.icon_plus);
-        stakeIconImageview.setScaleType(ImageView.ScaleType.FIT_XY);
-        stakeButton.addView(stakeIconImageview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT,0,0,5,0));
-        stakeButton.setOnClickListener(onClickListener);
-
-        TextView stakeTextview = new TextView(context);
-        stakeTextview.setText("STAKE");
-        stakeTextview.setTextColor(context.getResources().getColor(R.color.btn_text_default));
-        stakeTextview.setTextSize(0, AndroidUtilities.dp(12));
-        stakeButton.addView(stakeTextview);
-
-        LinearLayout unbondButton = new LinearLayout(context);
-        unbondButton.setBackgroundResource(R.drawable.btn_white);
-        unbondButton.setGravity(Gravity.CENTER);
-        buttonLayout.addView(unbondButton);
-
-        ImageView unbondIconImageview = new ImageView(context);
-        unbondIconImageview.setImageResource(R.drawable.icon_x_gray);
-        unbondIconImageview.setScaleType(ImageView.ScaleType.FIT_XY);
-        unbondButton.addView(unbondIconImageview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT,0,0,5,0));
-
-        TextView unbondTextview = new TextView(context);
-        unbondTextview.setText("UNBOND");
-        unbondTextview.setTextColor(context.getResources().getColor(R.color.text_value_default));
-        unbondTextview.setTextSize(0, AndroidUtilities.dp(12));
-        unbondButton.addView(unbondTextview);
-    }
-
-    private View.OnClickListener onClickListener = new View.OnClickListener() {
-        @Override
-        public void onClick(View v) {
-            presentStartStakingFragment();
-        }
-    };
-
-    private void presentStartStakingFragment(){
-        Bundle args = new Bundle();
-        args.putBoolean("test", true);
-        presentFragment(new StartStakingFragment(args));
-    }
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/fragment/ValidatorListFragment.java b/TMessagesProj/src/main/java/com/telemint/ui/fragment/ValidatorListFragment.java
deleted file mode 100644
index 513115148..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/fragment/ValidatorListFragment.java
+++ /dev/null
@@ -1,118 +0,0 @@
-package com.telemint.ui.fragment;
-
-import android.content.Context;
-import android.os.Bundle;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.Button;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.TextView;
-
-import com.telemint.messenger.R;
-import com.telemint.ui.adapter.ValidatorListAdapter;
-import com.telemint.ui.test.TestData;
-
-import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.FileLog;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class ValidatorListFragment extends BaseFragment {
-
-    private ValidatorListAdapter adapter;
-
-    public ValidatorListFragment(Bundle args) {
-        super(args);
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-
-    }
-    @Override
-    public View createView(Context context) {
-        actionBar.setTitle("Stake");
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setBackgroundColor(context.getResources().getColor(R.color.actionbar_bg));
-
-        LinearLayout mainLayout = new LinearLayout(context);
-        mainLayout.setOrientation(LinearLayout.VERTICAL);
-        fragmentView = mainLayout;
-        makePrototypeLayout(context, mainLayout);
-        return fragmentView;
-    }
-
-    protected void clearViews() {
-        if (fragmentView != null) {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
-            if (parent != null) {
-                try {
-                    onRemoveFromParent();
-                    parent.removeView(fragmentView);
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-            }
-            fragmentView = null;
-        }
-        if (actionBar != null) {
-            ViewGroup parent = (ViewGroup) actionBar.getParent();
-            if (parent != null) {
-                try {
-                    parent.removeView(actionBar);
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-            }
-            actionBar = null;
-        }
-        parentLayout = null;
-    }
-
-    private void makePrototypeLayout(Context context, LinearLayout mainLayout){
-
-        TextView searchTextview = new TextView(context);
-        searchTextview.setTextColor(context.getResources().getColor(R.color.text_title_default));
-        searchTextview.setTextSize(0, AndroidUtilities.dp(12));
-        searchTextview.setPadding(AndroidUtilities.dp(35),AndroidUtilities.dp(14),0,AndroidUtilities.dp(14));
-        searchTextview.setText("Search Validator");
-        mainLayout.addView(searchTextview);
-
-        ImageView searchbarLine = new ImageView(context);
-        searchbarLine.setBackgroundColor(0xff000000);
-        searchbarLine.setAlpha(0.6f);
-        mainLayout.addView(searchbarLine, new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, 2));
-
-        Button sortArea = new Button(context);
-        sortArea.setText("Sorting function Area");
-        mainLayout.addView(sortArea, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 100));
-
-        ListView listView = new ListView(context);
-        listView.setDividerHeight(1);
-        listView.setPadding(AndroidUtilities.dp(10),0, AndroidUtilities.dp(10),0);
-        listView.setOnItemClickListener(onItemClickListener);
-        mainLayout.addView(listView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 0, 1.0f));
-
-        adapter = new ValidatorListAdapter(context, 0, TestData.getInstance().getValidatorList());
-        listView.setAdapter(adapter);
-        adapter.notifyDataSetChanged();
-
-    }
-
-    private AdapterView.OnItemClickListener onItemClickListener = new AdapterView.OnItemClickListener() {
-        @Override
-        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-            presentValidatorInfoFragment();
-        }
-    };
-
-    private void presentValidatorInfoFragment(){
-        Bundle args = new Bundle();
-        args.putBoolean("test", true);
-        presentFragment(new ValidatorInfoFragment(args));
-    }
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/fragment/WalletFragment.java b/TMessagesProj/src/main/java/com/telemint/ui/fragment/WalletFragment.java
deleted file mode 100644
index 67b2ac32d..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/fragment/WalletFragment.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package com.telemint.ui.fragment;
-
-import android.content.Context;
-import android.graphics.Color;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.LinearLayout;
-
-import org.telegram.messenger.FileLog;
-import org.telegram.ui.ActionBar.BaseFragment;
-
-public class WalletFragment extends BaseFragment {
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-
-    }
-    @Override
-    public View createView(final Context context) {
-        LinearLayout walletLayout = new LinearLayout(context);
-        walletLayout.setBackgroundColor(Color.BLACK);
-        fragmentView = walletLayout;
-        return fragmentView;
-    }
-
-    protected void clearViews() {
-        if (fragmentView != null) {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
-            if (parent != null) {
-                try {
-                    onRemoveFromParent();
-                    parent.removeView(fragmentView);
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-            }
-            fragmentView = null;
-        }
-        if (actionBar != null) {
-            ViewGroup parent = (ViewGroup) actionBar.getParent();
-            if (parent != null) {
-                try {
-                    parent.removeView(actionBar);
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-            }
-            actionBar = null;
-        }
-        parentLayout = null;
-    }
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/model/AccountInfo.java b/TMessagesProj/src/main/java/com/telemint/ui/model/AccountInfo.java
deleted file mode 100644
index bfca5214c..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/model/AccountInfo.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.telemint.ui.model;
-
-import android.support.annotation.NonNull;
-
-public class AccountInfo {
-    private String accountName;
-    private String address;
-    private String balance;
-    private String denom;
-    private String stakedBalance;
-    private String dailyReward;
-
-
-    public AccountInfo(@NonNull String accountName, @NonNull String address, @NonNull String balance, @NonNull String denom, @NonNull String stakedBalance, @NonNull String dailyReward){
-        this.accountName = accountName;
-        this.address = address;
-        this.balance = balance;
-        this.denom = denom;
-        this.stakedBalance = stakedBalance;
-        this.dailyReward = dailyReward;
-    }
-
-    public String getAccountName(){
-        return accountName;
-    }
-
-    public String getAddress(){
-        return address;
-    }
-
-    public String getBalance(){
-        return balance;
-    }
-
-    public String getDenom(){
-        return denom;
-    }
-
-    public String getStakedBalance(){
-        return stakedBalance;
-    }
-
-    public String getDailyReward(){
-        return dailyReward;
-    }
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/model/StakeTabMenu.java b/TMessagesProj/src/main/java/com/telemint/ui/model/StakeTabMenu.java
deleted file mode 100644
index dcc543443..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/model/StakeTabMenu.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.telemint.ui.model;
-
-public class StakeTabMenu {
-    private String title;
-    private String var;
-
-    public StakeTabMenu(String title, String var){
-        this.title = title;
-        this.var = var;
-    }
-
-    public String getTitle(){
-        return title;
-    }
-
-    public String getVar(){
-        return var;
-    }
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/model/ValidatorList.java b/TMessagesProj/src/main/java/com/telemint/ui/model/ValidatorList.java
deleted file mode 100644
index 740a238cb..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/model/ValidatorList.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.telemint.ui.model;
-
-public class ValidatorList {
-    private String name;
-    private String fee;
-    private String voting_power;
-
-    public ValidatorList(String name, String fee, String voting_power){
-        this.name = name;
-        this.fee = fee;
-        this.voting_power = voting_power;
-    }
-
-    public String getName(){
-        return name;
-    }
-
-    public String getFee(){
-        return fee;
-    }
-
-    public String getVotingPower(){
-        return voting_power;
-    }
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/model/WalletTabMenu.java b/TMessagesProj/src/main/java/com/telemint/ui/model/WalletTabMenu.java
deleted file mode 100644
index 61be913db..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/model/WalletTabMenu.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.telemint.ui.model;
-
-public class WalletTabMenu {
-    private String title;
-    private String var;
-
-    public WalletTabMenu(String title, String var){
-        this.title = title;
-        this.var = var;
-    }
-
-    public String getTitle(){
-        return title;
-    }
-
-    public String getVar(){
-        return var;
-    }
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/test/DummyVars.java b/TMessagesProj/src/main/java/com/telemint/ui/test/DummyVars.java
deleted file mode 100644
index 547f92bfa..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/test/DummyVars.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package com.telemint.ui.test;
-
-public class DummyVars {
-
-    public static final String stakeTabTitles[] = {"Total Assets","Profit Rate (% / yr)","Currently Staking","Currently Unbonding","Number of Validators"};
-    public static final String stakeTabVars[] = {"500,000.583354 ATOM","7.6%","286,860.583354 ATOM","2,000 ATOM","24"};
-
-    public static final String walletTabTitles[] = {"Wallet Balance","Currently Staking","Transaction History","Import / Export Account"};
-    public static final String walletTabVars[] = {"300,000 ATOM","286,860 ATOM","","2,000 ATOM"};
-
-    public static final String validatorNames[] = {"LUNAMINT","Nylira Validator","cosmos-trust.com","grass-fed","jlandrews","nuevax","sikka.tech","Forbole","Dokia-Interstellar-Cruiser","bdongerNext","skoed-validator-7000","block3.community"};
-    public static final String validatorFees[] = {"10%","10%","10%","10%","10%","10%","10%","10%","10%","10%","10%","10%"};
-    public static final String validatorVotingPowers[] = {"99.87%","99.87%","99.87%","99.87%","99.87%","99.87%","99.87%","99.87%","99.87%","99.87%","99.87%","99.87%"};
-
-    public static final String validatorInfoTitles[] = {"Voting Power", "Validation Fee", "Uptime (30d)", "Validating Since", "Game of Stakes Rank"};
-    public static final String validatorInfoVars[] = {"3,960,465 ATOM (5.3%)", "10%", "99.98%", "2018-07-18", "1"};
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/test/TestData.java b/TMessagesProj/src/main/java/com/telemint/ui/test/TestData.java
deleted file mode 100644
index 0a0b13471..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/test/TestData.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package com.telemint.ui.test;
-
-import com.telemint.ui.model.StakeTabMenu;
-import com.telemint.ui.model.ValidatorList;
-import com.telemint.ui.model.WalletTabMenu;
-
-import java.util.ArrayList;
-
-public class TestData {
-
-    private static volatile TestData Instance = null;
-    public static TestData getInstance() {
-        TestData testDataInstance = Instance;
-        if (testDataInstance == null) {
-            synchronized (TestData.class) {
-                testDataInstance = Instance;
-                if (testDataInstance == null) {
-                    Instance = testDataInstance = new TestData();
-                }
-            }
-        }
-        return testDataInstance;
-    }
-
-
-    public ArrayList<StakeTabMenu> getStakeTabMenu(){
-        ArrayList<StakeTabMenu> list = new ArrayList<StakeTabMenu>();
-
-        for(int i = 0; DummyVars.stakeTabTitles.length > i; i++){
-            list.add(new StakeTabMenu(DummyVars.stakeTabTitles[i], DummyVars.stakeTabVars[i]));
-        }
-
-        return list;
-    }
-
-    public ArrayList<WalletTabMenu> getWalletTabMenu(){
-        ArrayList<WalletTabMenu> list = new ArrayList<WalletTabMenu>();
-
-        for(int i = 0; DummyVars.walletTabTitles.length > i; i++){
-            list.add(new WalletTabMenu(DummyVars.walletTabTitles[i], DummyVars.walletTabVars[i]));
-        }
-
-        return list;
-    }
-
-    public ArrayList<ValidatorList> getValidatorList(){
-        ArrayList<ValidatorList> list = new ArrayList<ValidatorList>();
-
-        for(int i = 0; DummyVars.validatorNames.length > i; i++){
-            list.add(new ValidatorList(DummyVars.validatorNames[i], DummyVars.validatorFees[i], DummyVars.validatorVotingPowers[i]));
-        }
-
-        return list;
-    }
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/view/StakingView.java b/TMessagesProj/src/main/java/com/telemint/ui/view/StakingView.java
deleted file mode 100644
index 09bb529bc..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/view/StakingView.java
+++ /dev/null
@@ -1,112 +0,0 @@
-package com.telemint.ui.view;
-
-import android.content.Context;
-import android.graphics.PorterDuff;
-import android.graphics.PorterDuffColorFilter;
-import android.graphics.drawable.Drawable;
-import android.os.Build;
-import android.os.Bundle;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.TextView;
-
-import com.telemint.messenger.R;
-import com.telemint.ui.adapter.MainTabStakeAdapter;
-import com.telemint.ui.fragment.ValidatorListFragment;
-import com.telemint.ui.test.TestData;
-
-import org.telegram.messenger.AndroidUtilities;
-import org.telegram.ui.Components.CombinedDrawable;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.DialogsActivity;
-
-public class StakingView extends LinearLayout {
-
-    private DialogsActivity mActivity;
-
-    private TextView addressTextview;
-
-    private MainTabStakeAdapter adapter;
-
-    public StakingView(Context context, final DialogsActivity activity) {
-        super(context);
-
-        mActivity = activity;
-
-        setOrientation(LinearLayout.VERTICAL);
-
-        TextView titleTextview = new TextView(context);
-        titleTextview.setText("Hello, Cosmonaut");
-        titleTextview.setTextColor(getResources().getColor(R.color.tab_staking_title));
-        titleTextview.setPadding(AndroidUtilities.dp(10), AndroidUtilities.dp(0), AndroidUtilities.dp(10), AndroidUtilities.dp(0));
-        titleTextview.setTextSize(0, AndroidUtilities.dp(16));
-        addView(titleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 20, 0, 0));
-
-        addressTextview = new TextView(context);
-        addressTextview.setText("cosmosaccaddr1rvm0em6w3qkzcwnzf9hkqvksujl895dfww4ecn");
-        addressTextview.setTextColor(getResources().getColor(R.color.text_value_default));
-        addressTextview.setTextSize(0, AndroidUtilities.dp(10));
-        addressTextview.setPadding(AndroidUtilities.dp(10), AndroidUtilities.dp(0), AndroidUtilities.dp(10), AndroidUtilities.dp(0));
-        addView(addressTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 20));
-
-        LinearLayout buttonLayout = new LinearLayout(context);
-        buttonLayout.setGravity(Gravity.CENTER_HORIZONTAL);
-        buttonLayout.setPadding(AndroidUtilities.dp(10), AndroidUtilities.dp(16), AndroidUtilities.dp(10), AndroidUtilities.dp(16));
-        addView(buttonLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-
-        LinearLayout stakeButton = new LinearLayout(context);
-        stakeButton.setGravity(Gravity.CENTER);
-        stakeButton.setPadding(AndroidUtilities.dp(10),0,AndroidUtilities.dp(10),0);
-        buttonLayout.addView(stakeButton);
-
-        Drawable drawable = context.getResources().getDrawable(R.drawable.btn_green);
-        if (Build.VERSION.SDK_INT < 21) {
-            Drawable shadowDrawable = context.getResources().getDrawable(R.drawable.floating_shadow).mutate();
-            shadowDrawable.setColorFilter(new PorterDuffColorFilter(0xff000000, PorterDuff.Mode.MULTIPLY));
-            CombinedDrawable combinedDrawable = new CombinedDrawable(shadowDrawable, drawable, 0, 0);
-            combinedDrawable.setIconSize(AndroidUtilities.dp(56), AndroidUtilities.dp(56));
-            drawable = combinedDrawable;
-        }
-        stakeButton.setBackground(drawable);
-
-        ImageView stakeIconImageview = new ImageView(context);
-        stakeIconImageview.setImageResource(R.drawable.icon_plus);
-        stakeIconImageview.setScaleType(ImageView.ScaleType.FIT_XY);
-        stakeButton.addView(stakeIconImageview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0,0,5,0));
-        stakeButton.setOnClickListener(onClickListener);
-
-        TextView stakeTextview = new TextView(context);
-        stakeTextview.setText("STAKE / UNBOND");
-        stakeTextview.setTextColor(getResources().getColor(R.color.btn_text_default));
-        stakeTextview.setTextSize(0, AndroidUtilities.dp(12));
-        stakeButton.addView(stakeTextview);
-
-        ListView listView = new ListView(context);
-        listView.setDividerHeight(1);
-        listView.setPadding(AndroidUtilities.dp(10),0, AndroidUtilities.dp(10),0);
-        addView(listView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 0, 1.0f));
-
-        adapter = new MainTabStakeAdapter(context, 0, TestData.getInstance().getStakeTabMenu());
-        listView.setAdapter(adapter);
-        adapter.notifyDataSetChanged();
-
-    }
-
-    private View.OnClickListener onClickListener = new View.OnClickListener() {
-        @Override
-        public void onClick(View v) {
-            presentValidatorListFragment();
-        }
-    };
-
-    private void presentValidatorListFragment(){
-        Bundle args = new Bundle();
-        args.putBoolean("test", true);
-        mActivity.presentFragment(new ValidatorListFragment(args));
-    }
-
-
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/view/WalletView.java b/TMessagesProj/src/main/java/com/telemint/ui/view/WalletView.java
deleted file mode 100644
index 00b811fb8..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/view/WalletView.java
+++ /dev/null
@@ -1,319 +0,0 @@
-package com.telemint.ui.view;
-
-import android.content.Context;
-import android.graphics.Typeface;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.Button;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.telemint.messenger.R;
-import com.telemint.ui.model.AccountInfo;
-
-import org.telegram.messenger.AndroidUtilities;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class WalletView extends RelativeLayout {
-
-    private static final int STAKE_BUTTON = 0;
-    private static final int SEND_BUTTON = 1;
-
-    private static final int STAKING_BUTTON = 0;
-    private static final int GOVERNANCE_BUTTON = 1;
-    private static final int COSMOS_EXPLORER_BUTTON = 2;
-    private static final int TRANSACTION_HISTORY_BUTTON = 3;
-    private static final int NOTIFICATION_BUTTON = 4;
-
-    private LinearLayout emptyAccountLayout;
-
-    private LinearLayout accountLayout;
-    private TextView accountNameTextview;
-    private TextView addressTextview;
-    private TextView dailyRewardTextview;
-    private TextView balanceTextview;
-    private TextView stakedTextview;
-
-
-    public void update(AccountInfo data){
-        if(data == null){
-            showEmptyAccountLayout();
-            return;
-        } else {
-            showAccountLayout();
-        }
-
-        accountNameTextview.setText(data.getAccountName());
-        addressTextview.setText(data.getAddress());
-        dailyRewardTextview.setText(data.getDailyReward() + " " + data.getDenom());
-        balanceTextview.setText(data.getBalance() + " " + data.getDenom());
-        stakedTextview.setText(getContext().getString(R.string.staked)+": "+data.getStakedBalance() + " " + data.getDenom());
-
-    }
-
-    public WalletView(Context context) {
-        super(context);
-
-        setBackground(context.getResources().getDrawable(R.drawable.wallet_tab_bg));
-        FrameLayout cardLayout = new FrameLayout(context);
-
-        addView(cardLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT,18,47,18,0));
-
-
-        emptyAccountLayout = new LinearLayout(context);
-        emptyAccountLayout.setOrientation(LinearLayout.VERTICAL);
-        emptyAccountLayout.setGravity(Gravity.CENTER);
-        emptyAccountLayout.setBackgroundResource(R.drawable.wallet_tab_empty_card_bg);
-        cardLayout.addView(emptyAccountLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-        emptyAccountLayout.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                emptyAccountLayout.setVisibility(INVISIBLE);
-                accountLayout.setVisibility(VISIBLE);
-                showCreateAccountActivity();
-            }
-        });
-        //emptyAccountLayout.setVisibility(INVISIBLE);
-
-
-        ImageView plusIconImageview = new ImageView(context);
-        plusIconImageview.setScaleType(ImageView.ScaleType.FIT_XY);
-        plusIconImageview.setImageResource(R.drawable.icon_plus);
-        emptyAccountLayout.addView(plusIconImageview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT,0,0,0,6));
-
-        accountNameTextview = new TextView(context);
-        accountNameTextview.setText(getContext().getText(R.string.createNewAccount));
-        accountNameTextview.setTextColor(getResources().getColor(R.color.text_value_white));
-        accountNameTextview.setTextSize(0, AndroidUtilities.dp(12));
-        emptyAccountLayout.addView(accountNameTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT));
-
-        accountLayout = new LinearLayout(context);
-        accountLayout.setOrientation(LinearLayout.VERTICAL);
-        accountLayout.setGravity(Gravity.CENTER);
-        accountLayout.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(16), AndroidUtilities.dp(16), AndroidUtilities.dp(16));
-        accountLayout.setBackgroundResource(R.drawable.wallet_tab_card_bg);
-        cardLayout.addView(accountLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-        accountLayout.setVisibility(INVISIBLE);
-
-
-        LinearLayout cardHeaderLayout = new LinearLayout(context);
-        cardHeaderLayout.setOrientation(LinearLayout.HORIZONTAL);
-        cardHeaderLayout.setGravity(Gravity.CENTER_VERTICAL);
-        accountLayout.addView(cardHeaderLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-
-        accountNameTextview = new TextView(context);
-        accountNameTextview.setText("Cosmos Wallet 1");
-        accountNameTextview.setTextColor(getResources().getColor(R.color.text_title_default));
-        accountNameTextview.setTextSize(0, AndroidUtilities.dp(18));
-        cardHeaderLayout.addView(accountNameTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT,0,0,10,0));
-
-
-        Button copyButton = new Button(context);
-        copyButton.setBackgroundResource(R.drawable.btn_copy);
-        cardHeaderLayout.addView(copyButton, LayoutHelper.createLinear(22,22,0,0,6,0));
-
-        Button qrCodeButton = new Button(context);
-        qrCodeButton.setBackgroundResource(R.drawable.btn_qr_code);
-        cardHeaderLayout.addView(qrCodeButton, LayoutHelper.createLinear(22,22));
-
-
-        addressTextview = new TextView(context);
-        addressTextview.setText("cosmosaccaddr1rvm0em6w3qkzcwnzf9hkqvksujl895dfww4ecn");
-        addressTextview.setTextColor(getResources().getColor(R.color.text_value_grey));
-        addressTextview.setTextSize(0, AndroidUtilities.dp(9));
-        accountLayout.addView(addressTextview, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT,LayoutHelper.WRAP_CONTENT,0,0,0,15));
-
-        LinearLayout dailyRewardLayout = new LinearLayout(context);
-        dailyRewardLayout.setOrientation(LinearLayout.HORIZONTAL);
-        dailyRewardLayout.setGravity(Gravity.CENTER);
-        dailyRewardLayout.setBackgroundResource(R.drawable.stake_info_bg);
-        dailyRewardLayout.setPadding(AndroidUtilities.dp(10), AndroidUtilities.dp(4), AndroidUtilities.dp(10), AndroidUtilities.dp(4));
-        accountLayout.addView(dailyRewardLayout, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT,0,0,0,10));
-
-        TextView rewardTitleTextview = new TextView(context);
-        rewardTitleTextview.setText("24hr");
-        rewardTitleTextview.setTextColor(getResources().getColor(R.color.text_title_default));
-        rewardTitleTextview.setTextSize(0, AndroidUtilities.dp(10));
-        dailyRewardLayout.addView(rewardTitleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT));
-
-        ImageView rewardArrowImageview = new ImageView(context);
-        rewardArrowImageview.setScaleType(ImageView.ScaleType.FIT_XY);
-        rewardArrowImageview.setImageResource(R.drawable.reward_arrow_up);
-        dailyRewardLayout.addView(rewardArrowImageview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT,0,0,6,0));
-
-        dailyRewardTextview = new TextView(context);
-        dailyRewardTextview.setText("285.25 Atom");
-        dailyRewardTextview.setTextColor(getResources().getColor(R.color.text_title_default));
-        dailyRewardTextview.setTextSize(0, AndroidUtilities.dp(10));
-        dailyRewardLayout.addView(dailyRewardTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT));
-
-        balanceTextview = new TextView(context);
-        balanceTextview.setText("8,043,914.55 Atom");
-        balanceTextview.setTextColor(getResources().getColor(R.color.text_value_default));
-        balanceTextview.setTextSize(0, AndroidUtilities.dp(22));
-        accountLayout.addView(balanceTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT,0,0,0,5));
-
-        stakedTextview = new TextView(context);
-        stakedTextview.setText("Staked: 4,000,841.53 Atom");
-        stakedTextview.setTextColor(getResources().getColor(R.color.text_value_default));
-        stakedTextview.setTextSize(0, AndroidUtilities.dp(12));
-        accountLayout.addView(stakedTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT,0,0,0,17));
-
-        LinearLayout buttonLayout = new LinearLayout(context);
-        buttonLayout.setGravity(Gravity.CENTER);
-        buttonLayout.setOrientation(LinearLayout.HORIZONTAL);
-        accountLayout.addView(buttonLayout, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT));
-
-        Button stakeButton = new Button(context);
-        stakeButton.setId(WalletView.STAKE_BUTTON);
-        stakeButton.setGravity(Gravity.CENTER);
-        stakeButton.setPadding(AndroidUtilities.dp(10), 0, AndroidUtilities.dp(10), 0);
-        stakeButton.setOnClickListener(onClickAccountListener);
-        stakeButton.setBackgroundResource(R.drawable.btn_black);
-        stakeButton.setTextSize(0, AndroidUtilities.dp(14));
-        stakeButton.setText(context.getString(R.string.stake));
-        buttonLayout.addView(stakeButton, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT,30,0,0,10,0));
-
-        Button sendButton = new Button(context);
-        sendButton.setId(WalletView.SEND_BUTTON);
-        sendButton.setGravity(Gravity.CENTER);
-        sendButton.setPadding(AndroidUtilities.dp(10), 0, AndroidUtilities.dp(10), 0);
-        sendButton.setOnClickListener(onClickAccountListener);
-        sendButton.setBackgroundResource(R.drawable.btn_black);
-        sendButton.setTextSize(0, AndroidUtilities.dp(14));
-        sendButton.setText(context.getString(R.string.send));
-        buttonLayout.addView(sendButton, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT,30));
-
-        LinearLayout toolsLayout = new LinearLayout(context);
-        toolsLayout.setOrientation(LinearLayout.VERTICAL);
-        toolsLayout.setGravity(Gravity.CENTER);
-        toolsLayout.setBackgroundResource(R.drawable.cosmos_tools_bg);
-        addView(toolsLayout, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, ALIGN_PARENT_BOTTOM));
-
-
-        TextView toolsTitleTextview = new TextView(context);
-        toolsTitleTextview.setText(context.getString(R.string.cosmosTools));
-        toolsTitleTextview.setTextColor(getResources().getColor(R.color.text_title_default));
-        toolsTitleTextview.setTextSize(0, AndroidUtilities.dp(24));
-        toolsTitleTextview.setTypeface(null, Typeface.BOLD);
-        toolsLayout.addView(toolsTitleTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT,0,0,0,20));
-
-        LinearLayout toolsButtonLayout = new LinearLayout(context);
-        toolsButtonLayout.setOrientation(LinearLayout.HORIZONTAL);
-        toolsButtonLayout.setGravity(Gravity.CENTER_HORIZONTAL);
-        toolsLayout.addView(toolsButtonLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT,10,0,0,0));
-
-        int toolIcons[] = {R.drawable.btn_cosmos_tools_staking, R.drawable.btn_cosmos_tools_governance, R.drawable.btn_cosmos_tools_explorer, R.drawable.btn_cosmos_tools_tx_history, R.drawable.btn_cosmos_tools_noti};
-        String toolNames[] = {context.getString(R.string.staking), context.getString(R.string.governance), context.getString(R.string.cosmosExplorer), context.getString(R.string.transactionHistory), context.getString(R.string.notifications)};
-        for(int i = 0; toolNames.length > i; i++){
-            LinearLayout toolButton = new LinearLayout(context);
-            toolButton.setOrientation(LinearLayout.VERTICAL);
-            toolButton.setGravity(Gravity.CENTER_HORIZONTAL);
-            toolButton.setId(i);
-            toolButton.setOnClickListener(onClickToolListener);
-            toolsButtonLayout.addView(toolButton, LayoutHelper.createLinear(54, LayoutHelper.WRAP_CONTENT,0,0,10,0));
-
-            ImageView toolIconImageview = new ImageView(context);
-            toolIconImageview.setScaleType(ImageView.ScaleType.FIT_XY);
-            toolIconImageview.setImageResource(toolIcons[i]);
-            toolButton.addView(toolIconImageview, LayoutHelper.createLinear(44,44,0,0,0,4));
-
-            TextView toolTextview = new TextView(context);
-            toolTextview.setText(toolNames[i]);
-            toolTextview.setTextColor(getResources().getColor(R.color.text_value_default));
-            toolTextview.setTextSize(0, AndroidUtilities.dp(10));
-            toolTextview.setGravity(Gravity.CENTER);
-            toolButton.addView(toolTextview, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT));
-        }
-
-
-
-    }
-
-    private void showEmptyAccountLayout(){
-        emptyAccountLayout.setVisibility(VISIBLE);
-        accountLayout.setVisibility(INVISIBLE);
-    }
-
-    private void showAccountLayout(){
-        emptyAccountLayout.setVisibility(INVISIBLE);
-        accountLayout.setVisibility(VISIBLE);
-    }
-
-    private View.OnClickListener onClickAccountListener = new View.OnClickListener() {
-        @Override
-        public void onClick(View v) {
-            switch (v.getId()){
-                case WalletView.STAKE_BUTTON:
-                    showValidatorActivity();
-                    break;
-                case WalletView.SEND_BUTTON:
-                    showSendActivity();
-                    break;
-            }
-        }
-    };
-
-    private View.OnClickListener onClickToolListener = new View.OnClickListener() {
-        @Override
-        public void onClick(View v) {
-            switch (v.getId()){
-                case WalletView.STAKING_BUTTON:
-                    showStakingActivity();
-                    break;
-                case WalletView.GOVERNANCE_BUTTON:
-                    showGovernanceActivity();
-                    break;
-                case WalletView.COSMOS_EXPLORER_BUTTON:
-                    showCosmosExplorerActivity();
-                    break;
-                case WalletView.TRANSACTION_HISTORY_BUTTON:
-                    showTransactionHistoryActivity();
-                    break;
-                case WalletView.NOTIFICATION_BUTTON:
-                    showNotificationActivity();
-                    break;
-                default:
-            }
-        }
-    };
-
-    private void showCreateAccountActivity(){
-        // TODO. start CreateAccountActivity
-    }
-
-    private void showValidatorActivity(){
-        // TODO. start ValidatorActivity
-    }
-
-    private void showSendActivity(){
-        // TODO. start ValidatorActivity
-    }
-
-    private void showStakingActivity(){
-        // TODO. start StakingActivity
-    }
-
-    private void showGovernanceActivity(){
-        // TODO. start GovernanceActivity
-    }
-
-    private void showCosmosExplorerActivity(){
-        // TODO. start CosmosExplorerActivity
-    }
-
-    private void showTransactionHistoryActivity(){
-        // TODO. start TransactionHistoryActivity
-    }
-
-    private void showNotificationActivity(){
-        // TODO. start WalletNotificationActivity
-    }
-
-
-
-
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/ui/view/WalletView2.java b/TMessagesProj/src/main/java/com/telemint/ui/view/WalletView2.java
deleted file mode 100644
index 800dd9320..000000000
--- a/TMessagesProj/src/main/java/com/telemint/ui/view/WalletView2.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package com.telemint.ui.view;
-
-import android.content.Context;
-import android.graphics.PorterDuff;
-import android.graphics.PorterDuffColorFilter;
-import android.graphics.drawable.Drawable;
-import android.os.Build;
-import android.os.Bundle;
-import android.support.v4.view.ViewPager;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.Button;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.telemint.messenger.R;
-import com.telemint.ui.adapter.CardFragmentPagerAdapter;
-import com.telemint.ui.adapter.MainTabWalletAdapter;
-import com.telemint.ui.component.ShadowTransformer;
-import com.telemint.ui.fragment.SendAssetFragment;
-import com.telemint.ui.test.TestData;
-
-import org.telegram.messenger.AndroidUtilities;
-import org.telegram.ui.Components.CombinedDrawable;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.DialogsActivity;
-
-public class WalletView2 extends RelativeLayout {
-
-    private DialogsActivity mActivity;
-
-
-    public WalletView2(Context context, DialogsActivity activity) {
-        super(context);
-
-        mActivity = activity;
-        setClipToPadding(false);
-
-
-        Button totalInfoArea = new Button(context);
-        totalInfoArea.setText("Total Info Area\n\n\nTotal assets & Staking Infomation");
-        addView(totalInfoArea, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, 300));
-
-        ViewPager viewPager = new ViewPager(context);
-        viewPager.setClipToPadding(false);
-        viewPager.setPadding(AndroidUtilities.dp(50),AndroidUtilities.dp(0),AndroidUtilities.dp(50),AndroidUtilities.dp(0));
-
-        addView(viewPager, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, 400, 0,300,0,0));
-
-        CardFragmentPagerAdapter pagerAdapter = new CardFragmentPagerAdapter(context, AndroidUtilities.dp(2));
-        ShadowTransformer fragmentCardShadowTransformer = new ShadowTransformer(viewPager, pagerAdapter);
-        fragmentCardShadowTransformer.enableScaling(true);
-
-        viewPager.setAdapter(pagerAdapter);
-        viewPager.setPageTransformer(false, fragmentCardShadowTransformer);
-        viewPager.setOffscreenPageLimit(3);
-    }
-
-    private OnClickListener onClickListener = new OnClickListener() {
-        @Override
-        public void onClick(View v) {
-            presentSendAssetFragment();
-        }
-    };
-
-    private void presentSendAssetFragment(){
-        Bundle args = new Bundle();
-        args.putBoolean("test", true);
-        mActivity.presentFragment(new SendAssetFragment(args));
-    }
-
-
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/wallet/GaiaCommand.java b/TMessagesProj/src/main/java/com/telemint/wallet/GaiaCommand.java
deleted file mode 100644
index dfcfa3b5f..000000000
--- a/TMessagesProj/src/main/java/com/telemint/wallet/GaiaCommand.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package com.telemint.wallet;
-
-public class GaiaCommand {
-
-    public static final String INIT_GAIAD = "init";
-    public static final String GET_ACCOUNT_LIST = "keys list";
-    public static final String CREATE_ACCOUNT = "keys add";
-    public static final String GET_ACCOUNT_BALANCE = "account";
-    public static final String SEND = "send";
-    public static final String STAKE = "stake delegate";
-
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/wallet/GaiaResult.java b/TMessagesProj/src/main/java/com/telemint/wallet/GaiaResult.java
deleted file mode 100644
index b3373f8ef..000000000
--- a/TMessagesProj/src/main/java/com/telemint/wallet/GaiaResult.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.telemint.wallet;
-
-
-public class GaiaResult {
-
-    public static final int FAILED_EXECUTE = -1;
-
-    public static final int GAIAD_INIT_SUCCESS = 1;
-    public static final int GAIAD_INIT_FAIL = 2;
-
-    public static final int GET_ACCOUNT_LIST = 3;
-
-    public static final int CREATE_ACCOUNT = 4;
-    public static final int GET_ACCOUNT_BALANCE = 5;
-
-    public static final int SEND_TX_FINISHED = 6;
-    public static final int DELEGATE_TX_FINISHED = 7;
-
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/wallet/WalletListener.java b/TMessagesProj/src/main/java/com/telemint/wallet/WalletListener.java
deleted file mode 100644
index a74133d82..000000000
--- a/TMessagesProj/src/main/java/com/telemint/wallet/WalletListener.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package com.telemint.wallet;
-
-public interface WalletListener {
-    void onInitFinished(boolean result);
-    void onGetAccountList(String result);
-    void onCreateAccount(String result);
-    void onAccountBalance(String result);
-    void onSendTxFinished(String tx);
-    void onDelegateTxFinished(String tx);
-    void onFailedCommand(String msg);
-
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/wallet/WalletManager.java b/TMessagesProj/src/main/java/com/telemint/wallet/WalletManager.java
deleted file mode 100644
index fde04273a..000000000
--- a/TMessagesProj/src/main/java/com/telemint/wallet/WalletManager.java
+++ /dev/null
@@ -1,279 +0,0 @@
-package com.telemint.wallet;
-
-import android.content.Context;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Message;
-import android.support.annotation.NonNull;
-import android.util.Log;
-
-import com.telemint.wallet.utils.FileUtil;
-
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-
-
-public class WalletManager {
-
-    private final static String TAG = "WalletManager";
-
-    private final static String GAIA_VERSION = "0.24.1";
-    private final static String CHAIN_ID = "gaia-8001";
-    private final static String MONIKER = "telemint_test";
-    private final static String GAIACLI = "gaiacli_arm";
-    private final static String GAIAD = "gaiad_arm";
-    private final static String CONFIG_FILE_NAME = "config.toml";
-    private final static String GENESIS_FILE_NAME = "genesis.json";
-
-    private Context mContext = null;
-    private String internalStoragePath = null;
-
-    private WalletListener mWalletListener = null;
-
-
-    private static volatile WalletManager Instance = null;
-    public static WalletManager getInstance() {
-        WalletManager walletManagerInstance = Instance;
-        if (walletManagerInstance == null) {
-            synchronized (WalletManager.class) {
-                walletManagerInstance = Instance;
-                if (walletManagerInstance == null) {
-                    Instance = walletManagerInstance = new WalletManager();
-                }
-            }
-        }
-        return walletManagerInstance;
-    }
-
-    public void init(@NonNull Context context, @NonNull WalletListener walletListener){
-
-        mContext = context;
-        mWalletListener = walletListener;
-
-        internalStoragePath = context.getFilesDir().getAbsolutePath();
-
-        setupGaia();
-
-    }
-
-    private Handler excuteResultHandler = new Handler(){
-        @Override
-        public void handleMessage(Message msg) {
-            super.handleMessage(msg);
-
-            if(msg.what == GaiaResult.GAIAD_INIT_SUCCESS){
-                setupConfig();
-            } else if(msg.what == GaiaResult.GAIAD_INIT_FAIL){
-                mWalletListener.onInitFinished(false);
-            } else if (msg.what == GaiaResult.FAILED_EXECUTE){
-                mWalletListener.onFailedCommand("Failed execute command");
-            } else if (msg.what == GaiaResult.GET_ACCOUNT_LIST){
-                mWalletListener.onGetAccountList(msg.getData().getString("result"));
-            } else if (msg.what == GaiaResult.CREATE_ACCOUNT){
-                mWalletListener.onCreateAccount(msg.getData().getString("result"));
-            } else if (msg.what == GaiaResult.GET_ACCOUNT_BALANCE){
-                mWalletListener.onAccountBalance(msg.getData().getString("result"));
-            } else if (msg.what == GaiaResult.SEND_TX_FINISHED){
-                mWalletListener.onSendTxFinished(msg.getData().getString("result"));
-            } else if (msg.what == GaiaResult.DELEGATE_TX_FINISHED){
-                mWalletListener.onDelegateTxFinished(msg.getData().getString("result"));
-            }
-
-        }
-    };
-
-    public void getAccountList(String address){
-
-        excute(WalletManager.GAIACLI, GaiaCommand.GET_ACCOUNT_LIST);
-
-    }
-
-    public void createAccount(String accountName, String password){
-
-        excute(WalletManager.GAIACLI, GaiaCommand.CREATE_ACCOUNT + " " + accountName, password);
-
-    }
-
-    public void getBalance(String address){
-
-        excute(WalletManager.GAIACLI, GaiaCommand.GET_ACCOUNT_BALANCE + " " +address);
-
-    }
-
-    public void send(String accountName, String password, String toAddress, float amount, String denom){
-
-        excute(WalletManager.GAIACLI, GaiaCommand.SEND + " --from=" +accountName + " --to="+toAddress + " --amount="+amount+denom + " --chain-id="+WalletManager.CHAIN_ID, password);
-
-    }
-
-
-    public boolean isExistGaia(){
-        // TODO. Coming checksum function
-        if(!FileUtil.isFileExist(internalStoragePath, WalletManager.GAIAD)|
-                !FileUtil.isFileExist(internalStoragePath, WalletManager.GAIACLI))
-            return false;
-        return true;
-    }
-
-    private void setupGaia(){
-        if(isExistGaia()) {
-            setupConfig();
-            return;
-        }
-        boolean result = FileUtil.copy(mContext, internalStoragePath, WalletManager.GAIAD) && FileUtil.copy(mContext, internalStoragePath, WalletManager.GAIACLI);
-
-        if(result){
-            excute(WalletManager.GAIAD, GaiaCommand.INIT_GAIAD + " " + WalletManager.MONIKER);
-        } else {
-            excuteResultHandler.sendEmptyMessage(GaiaResult.GAIAD_INIT_FAIL);
-        }
-    }
-
-    private void setupConfig(){
-        boolean result = FileUtil.copy(mContext, internalStoragePath, WalletManager.CONFIG_FILE_NAME) && FileUtil.copy(mContext, internalStoragePath, WalletManager.GENESIS_FILE_NAME);
-        if (result){
-            mWalletListener.onInitFinished(true);
-        }else{
-            mWalletListener.onInitFinished(false);
-        }
-    }
-
-    private void excute(@NonNull final String exec, final String... cmds){
-
-        if(cmds.length == 0) return;
-
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                try {
-
-                    File execFile = new File(internalStoragePath, exec);
-                    boolean isExecutable = FileUtil.setExecutable(execFile);
-                    if(!isExecutable) {
-                        excuteResultHandler.sendEmptyMessage(GaiaResult.FAILED_EXECUTE);
-                        return;
-                    }
-
-                    Process p = Runtime.getRuntime().exec(internalStoragePath + File.separator + exec+" "+cmds[0]);
-
-                    if (cmds.length >= 2) {
-                        boolean putCmdResult = putCmd(p, cmds[1]);
-                        if (!putCmdResult){
-                            excuteResultHandler.sendEmptyMessage(GaiaResult.FAILED_EXECUTE);
-                            return;
-                        }
-                    }
-
-                    BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
-
-                    int read;
-                    char[] buffer = new char[4096];
-                    StringBuffer out = new StringBuffer();
-                    while ((read = in.read(buffer)) > 0) {
-                        if (cmds.length >= 2) {
-                            boolean putCmdResult = putCmd(p, cmds[1]);
-                            if (!putCmdResult){
-                                excuteResultHandler.sendEmptyMessage(GaiaResult.FAILED_EXECUTE);
-                                return;
-                            }
-                        }
-                        out.append(buffer, 0, read);
-                    }
-                    in.close();
-
-                    boolean isError = false;
-                    String line;
-                    BufferedReader br = new BufferedReader(new InputStreamReader(p.getErrorStream(), "UTF-8") );
-                    while ((line = br.readLine()) != null) {
-                        Log.e("[Error]", line);
-                        isError = true;
-                    }
-                    br.close();
-
-                    if(isError) {
-                        excuteResultHandler.sendEmptyMessage(GaiaResult.FAILED_EXECUTE);
-                        return;
-                    }
-
-                    p.waitFor();
-
-                    Log.w(WalletManager.TAG,"runCmd result out :"+out.substring(0));
-
-                    sendResult(cmds[0], out.substring(0));
-
-                } catch (IOException e) {
-                    e.printStackTrace();
-                    excuteResultHandler.sendEmptyMessage(GaiaResult.FAILED_EXECUTE);
-                } catch (InterruptedException e) {
-                    e.printStackTrace();
-                    excuteResultHandler.sendEmptyMessage(GaiaResult.FAILED_EXECUTE);
-                }
-            }
-        }).start();
-
-    }
-
-    private boolean putCmd(Process p, String cmd){
-        boolean result = true;
-        try{
-            OutputStream outs;
-            outs = p.getOutputStream();
-            outs.write((cmd+"\n").getBytes());
-            outs.flush();
-        }catch (IOException e){
-            e.printStackTrace();
-            result = false;
-        }
-        return result;
-
-    }
-
-    private void sendResult(String cmd, String result){
-
-        // TODO. It will be changed bundle data with case by case.
-        if(cmd.contains(GaiaCommand.INIT_GAIAD)){
-            excuteResultHandler.sendEmptyMessage(GaiaResult.GAIAD_INIT_SUCCESS);
-        } else if(cmd.contains(GaiaCommand.GET_ACCOUNT_LIST)) {
-            Bundle bundle = new Bundle();
-            bundle.putString("result",result);
-            Message msg = new Message();
-            msg.what = GaiaResult.GET_ACCOUNT_LIST;
-            msg.setData(bundle);
-            excuteResultHandler.sendMessage(msg);
-        } else if(cmd.contains(GaiaCommand.CREATE_ACCOUNT)) {
-            Bundle bundle = new Bundle();
-            bundle.putString("result",result);
-            Message msg = new Message();
-            msg.what = GaiaResult.CREATE_ACCOUNT;
-            msg.setData(bundle);
-            excuteResultHandler.sendMessage(msg);
-        } else if(cmd.contains(GaiaCommand.GET_ACCOUNT_BALANCE)) {
-            Bundle bundle = new Bundle();
-            bundle.putString("result",result);
-            Message msg = new Message();
-            msg.what = GaiaResult.GET_ACCOUNT_BALANCE;
-            msg.setData(bundle);
-            excuteResultHandler.sendMessage(msg);
-        } else if(cmd.contains(GaiaCommand.SEND)) {
-            Bundle bundle = new Bundle();
-            bundle.putString("result", result);
-            Message msg = new Message();
-            msg.what = GaiaResult.SEND_TX_FINISHED;
-            msg.setData(bundle);
-            excuteResultHandler.sendMessage(msg);
-        } else if(cmd.contains(GaiaCommand.STAKE)) {
-            Bundle bundle = new Bundle();
-            bundle.putString("result", result);
-            Message msg = new Message();
-            msg.what = GaiaResult.DELEGATE_TX_FINISHED;
-            msg.setData(bundle);
-            excuteResultHandler.sendMessage(msg);
-        }
-
-    }
-
-
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/wallet/model/CmdResult.java b/TMessagesProj/src/main/java/com/telemint/wallet/model/CmdResult.java
deleted file mode 100644
index 13551d839..000000000
--- a/TMessagesProj/src/main/java/com/telemint/wallet/model/CmdResult.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.telemint.wallet.model;
-
-import org.json.JSONObject;
-
-import java.io.Serializable;
-
-public class CmdResult implements Serializable {
-
-    private int result;
-    private String err_msg;
-    private JSONObject data;
-
-    public CmdResult(int result, String err_msg, JSONObject data){
-        this.result = result;
-        this.err_msg = err_msg;
-        this.data = data;
-    }
-
-    public int getResult(){
-        return result;
-    }
-
-    public String getErrMsg(){
-        return err_msg;
-    }
-
-    public JSONObject getData(){
-        return data;
-    }
-}
diff --git a/TMessagesProj/src/main/java/com/telemint/wallet/utils/FileUtil.java b/TMessagesProj/src/main/java/com/telemint/wallet/utils/FileUtil.java
deleted file mode 100644
index f5b674b18..000000000
--- a/TMessagesProj/src/main/java/com/telemint/wallet/utils/FileUtil.java
+++ /dev/null
@@ -1,125 +0,0 @@
-package com.telemint.wallet.utils;
-
-import android.content.Context;
-import android.content.res.AssetManager;
-import android.util.Log;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.security.MessageDigest;
-
-public class FileUtil {
-
-    private final static String TAG = "FileUtil";
-
-    public static boolean isFileExist(String path, String fileName){
-        File file = new File(path, fileName);
-        return file.exists();
-    }
-
-    public static boolean setExecutable(File file){
-        file.setReadable(true, false);
-        file.setWritable(true, false);
-        if(!file.setExecutable(true, false)){
-            return false;
-        }
-        return true;
-    }
-
-    public static boolean copy(Context context, String path, String fileName){
-
-        boolean isExist = false;
-
-        AssetManager assetManager = context.getAssets();
-        String[] files = null;
-        try {
-            files = assetManager.list("gaia");
-        } catch (IOException e) {
-            Log.e("tag", "Failed to get asset file list.", e);
-            return false;
-        }
-
-        for(String file : files) {
-            if(file.equals(fileName)){
-
-                Log.w(FileUtil.TAG, "setupGaia : "+file);
-
-                isExist = true;
-
-                InputStream in = null;
-                OutputStream out = null;
-                File outFile = null;
-                try {
-                    in = assetManager.open(file);
-                    outFile = new File(path, file);
-                    out = new FileOutputStream(outFile);
-                    writeFile(in, out);
-
-                } catch(IOException e) {
-                    Log.e(FileUtil.TAG, "Failed to copy asset file: " + file, e);
-                    return false;
-                }
-                finally {
-                    if (in != null) {
-                        try {
-                            in.close();
-                        } catch (IOException e) {
-                            e.printStackTrace();
-                            return false;
-                        }
-                    }
-                    if (out != null) {
-                        try {
-                            out.close();
-                            if(!FileUtil.setExecutable(outFile)) return false;
-                        } catch (IOException e) {
-                            e.printStackTrace();
-                            return false;
-                        }
-                    }
-                }
-            }
-        }
-        return isExist;
-    }
-
-    private static void writeFile(InputStream in, OutputStream out) throws IOException {
-        byte[] buffer = new byte[1024];
-        int read;
-        while ((read = in.read(buffer)) != -1) {
-            out.write(buffer, 0, read);
-        }
-    }
-
-    public static String getChecksumMD5(String path){
-        String returnVal = "";
-        try
-        {
-            InputStream   input   = new FileInputStream(path);
-            byte[]        buffer  = new byte[1024];
-            MessageDigest md5Hash = MessageDigest.getInstance("MD5");
-            int           numRead = 0;
-            while (numRead != -1)
-            {
-                numRead = input.read(buffer);
-                if (numRead > 0)
-                {
-                    md5Hash.update(buffer, 0, numRead);
-                }
-            }
-            input.close();
-
-            byte [] md5Bytes = md5Hash.digest();
-            for (int i=0; i < md5Bytes.length; i++)
-            {
-                returnVal += Integer.toString( ( md5Bytes[i] & 0xff ) + 0x100, 16).substring( 1 );
-            }
-        }
-        catch(Throwable t) {t.printStackTrace();}
-        return returnVal.toUpperCase();
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
index e5af38ac9..6d96d5830 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
@@ -80,12 +80,8 @@
 import android.widget.TextView;
 
 import com.android.internal.telephony.ITelephony;
-import com.telemint.messenger.BuildConfig;
-import com.telemint.messenger.R;
-
-import net.hockeyapp.android.CrashManager;
-import net.hockeyapp.android.CrashManagerListener;
-import net.hockeyapp.android.UpdateManager;
+import com.lunamint.lunagram.BuildConfig;
+import com.lunamint.lunagram.R;
 
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.tgnet.ConnectionsManager;
@@ -1594,27 +1590,6 @@ public void onAnimationEnd(Animator animation) {
         }
     }*/
 
-    public static void checkForCrashes(Activity context) {
-        CrashManager.register(context, BuildVars.DEBUG_VERSION ? BuildVars.HOCKEY_APP_HASH_DEBUG : BuildVars.HOCKEY_APP_HASH, new CrashManagerListener() {
-            @Override
-            public boolean includeDeviceData() {
-                return true;
-            }
-        });
-    }
-
-    public static void checkForUpdates(Activity context) {
-        if (BuildVars.DEBUG_VERSION) {
-            UpdateManager.register(context, BuildVars.DEBUG_VERSION ? BuildVars.HOCKEY_APP_HASH_DEBUG : BuildVars.HOCKEY_APP_HASH);
-        }
-    }
-
-    public static void unregisterUpdates() {
-        if (BuildVars.DEBUG_VERSION) {
-            UpdateManager.unregister();
-        }
-    }
-
     public static void addToClipboard(CharSequence str) {
         try {
             android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index c8fde09a6..606fe8a50 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -61,7 +61,7 @@ public static File getFilesDirFixed() {
         } catch (Exception e) {
             FileLog.e(e);
         }
-        return new File("/data/data/com.telemint.messenger/files");
+        return new File("/data/data/com.lunamint.lunagram/files");
     }
 
     public static void postInitApplication() {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
deleted file mode 100644
index 417d29e57..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 4.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2017.
- */
-
-package org.telegram.messenger;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-
-public class BuildVars {
-
-    public static boolean DEBUG_VERSION = false;
-    public static boolean DEBUG_PRIVATE_VERSION = false;
-    public static boolean LOGS_ENABLED = false;
-    public static boolean CHECK_UPDATES = false;
-    public static int BUILD_VERSION = 1340;
-    public static String BUILD_VERSION_STRING = "4.9.0";
-    public static int APP_ID = 0; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
-    public static String APP_HASH = ""; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
-    public static String HOCKEY_APP_HASH = "your-hockeyapp-api-key-here";
-    public static String HOCKEY_APP_HASH_DEBUG = "your-hockeyapp-api-key-here";
-    public static String PLAYSTORE_APP_URL = "";
-
-    static {
-        if (ApplicationLoader.applicationContext != null) {
-            SharedPreferences sharedPreferences = ApplicationLoader.applicationContext.getSharedPreferences("systemConfig", Context.MODE_PRIVATE);
-            LOGS_ENABLED = sharedPreferences.getBoolean("logsEnabled", DEBUG_VERSION);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
index e7ec45e6e..a64cbc326 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
@@ -26,7 +26,7 @@
 import android.text.TextUtils;
 import android.util.SparseArray;
 
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.support.SparseLongArray;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/CustomTabsCopyReceiver.java b/TMessagesProj/src/main/java/org/telegram/messenger/CustomTabsCopyReceiver.java
index 162c8fafa..7c0174491 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/CustomTabsCopyReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/CustomTabsCopyReceiver.java
@@ -13,7 +13,7 @@
 import android.content.Intent;
 import android.widget.Toast;
 
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 public class CustomTabsCopyReceiver extends BroadcastReceiver {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/DataQuery.java b/TMessagesProj/src/main/java/org/telegram/messenger/DataQuery.java
index ca6d76cf3..0558143b2 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/DataQuery.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/DataQuery.java
@@ -37,7 +37,7 @@
 import android.util.SparseArray;
 import android.widget.Toast;
 
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.SQLite.SQLiteDatabase;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/GcmPushListenerService.java b/TMessagesProj/src/main/java/org/telegram/messenger/GcmPushListenerService.java
index 87049ad20..58ae08bcc 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/GcmPushListenerService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/GcmPushListenerService.java
@@ -13,7 +13,7 @@
 
 import com.google.firebase.messaging.FirebaseMessagingService;
 import com.google.firebase.messaging.RemoteMessage;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 import org.json.JSONArray;
 import org.json.JSONObject;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java b/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java
index 713b3d150..6c3b68f41 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java
@@ -19,7 +19,7 @@
 import android.text.format.DateFormat;
 import android.util.Xml;
 
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 import org.telegram.messenger.time.FastDateFormat;
 import org.telegram.tgnet.ConnectionsManager;
@@ -208,6 +208,7 @@ public LocaleController() {
         languages.add(localeInfo);
         languagesDict.put(localeInfo.shortName, localeInfo);
 
+        /*
         localeInfo = new LocaleInfo();
         localeInfo.name = "Italiano";
         localeInfo.nameEnglish = "Italian";
@@ -260,6 +261,7 @@ public LocaleController() {
         localeInfo.builtIn = true;
         languages.add(localeInfo);
         languagesDict.put(localeInfo.shortName, localeInfo);
+        */
 
         localeInfo = new LocaleInfo();
         localeInfo.name = "한국어";
@@ -270,6 +272,7 @@ public LocaleController() {
         languages.add(localeInfo);
         languagesDict.put(localeInfo.shortName, localeInfo);
 
+        /*
         loadOtherLanguages();
         if (remoteLanguages.isEmpty()) {
             AndroidUtilities.runOnUIThread(new Runnable() {
@@ -297,7 +300,7 @@ public void run() {
                 languages.add(locale);
                 languagesDict.put(locale.getKey(), locale);
             }
-        }
+        }*/
 
         systemDefaultLocale = Locale.getDefault();
         is24HourFormat = DateFormat.is24HourFormat(ApplicationLoader.applicationContext);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/LocationSharingService.java b/TMessagesProj/src/main/java/org/telegram/messenger/LocationSharingService.java
index 2ff17aa8b..c19bc81a9 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/LocationSharingService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/LocationSharingService.java
@@ -16,7 +16,7 @@
 import android.support.v4.app.NotificationCompat;
 import android.support.v4.app.NotificationManagerCompat;
 
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.LaunchActivity;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
index 0bdf2ccb6..86c29065f 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
@@ -52,7 +52,7 @@
 import android.view.WindowManager;
 import android.widget.FrameLayout;
 
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 import org.telegram.messenger.audioinfo.AudioInfo;
 import org.telegram.messenger.exoplayer2.C;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
index ecfce7e7b..f85616a14 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
@@ -23,7 +23,10 @@
 import android.util.Base64;
 import android.util.SparseArray;
 
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.BuildVars;
+import com.lunamint.lunagram.R;
+import com.lunamint.wallet.model.LMessage;
+import com.lunamint.wallet.utils.MessageUtil;
 
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.tgnet.ConnectionsManager;
@@ -124,6 +127,8 @@
 
     public CharSequence vCardData;
 
+    public LMessage lm;
+
     public static class VCardData {
 
         private String company;
@@ -313,18 +318,18 @@ public void set(int minX, int maxX, int minY, int maxY, int w, float h, int flag
             public float[] heights;
 
             public MessageGroupedLayoutAttempt(int i1, int i2, float f1, float f2) {
-                lineCounts = new int[] {i1, i2};
-                heights = new float[] {f1, f2};
+                lineCounts = new int[]{i1, i2};
+                heights = new float[]{f1, f2};
             }
 
             public MessageGroupedLayoutAttempt(int i1, int i2, int i3, float f1, float f2, float f3) {
-                lineCounts = new int[] {i1, i2, i3};
-                heights = new float[] {f1, f2, f3};
+                lineCounts = new int[]{i1, i2, i3};
+                heights = new float[]{f1, f2, f3};
             }
 
             public MessageGroupedLayoutAttempt(int i1, int i2, int i3, int i4, float f1, float f2, float f3, float f4) {
-                lineCounts = new int[] {i1, i2, i3, i4};
-                heights = new float[] {f1, f2, f3, f4};
+                lineCounts = new int[]{i1, i2, i3, i4};
+                heights = new float[]{f1, f2, f3, f4};
             }
         }
 
@@ -444,7 +449,7 @@ public void calculate() {
                         position3.set(0, 1, 1, 1, rightWidth, thirdHeight / maxSizeHeight, POSITION_FLAG_RIGHT | POSITION_FLAG_BOTTOM);
                         position3.spanSize = maxSizeWidth;
 
-                        position1.siblingHeights = new float[] {thirdHeight / maxSizeHeight, secondHeight / maxSizeHeight};
+                        position1.siblingHeights = new float[]{thirdHeight / maxSizeHeight, secondHeight / maxSizeHeight};
 
                         if (isOut) {
                             position1.spanSize = maxSizeWidth - rightWidth;
@@ -507,7 +512,7 @@ public void calculate() {
                             position3.leftSpanOffset = w0;
                             position4.leftSpanOffset = w0;
                         }
-                        position1.siblingHeights = new float[] {h0, h1, h2};
+                        position1.siblingHeights = new float[]{h0, h1, h2};
                         hasSibling = true;
                         maxX = 1;
                     }
@@ -565,7 +570,7 @@ public void calculate() {
                     MessageGroupedLayoutAttempt attempt = attempts.get(a);
                     float height = 0;
                     float minLineHeight = Float.MAX_VALUE;
-                    for (int b = 0; b < attempt.heights.length; b++){
+                    for (int b = 0; b < attempt.heights.length; b++) {
                         height += attempt.heights[b];
                         if (attempt.heights[b] < minLineHeight) {
                             minLineHeight = attempt.heights[b];
@@ -716,7 +721,7 @@ public MessageObject(int accountNum, TLRPC.Message message, AbstractMap<Integer,
         eventId = eid;
 
         if (message.replyMessage != null) {
-            replyMessageObject = new MessageObject(accountNum, message.replyMessage, users, chats,  sUsers, sChats, false, eid);
+            replyMessageObject = new MessageObject(accountNum, message.replyMessage, users, chats, sUsers, sChats, false, eid);
         }
 
         TLRPC.User fromUser = null;
@@ -964,13 +969,13 @@ public MessageObject(int accountNum, TLRPC.Message message, AbstractMap<Integer,
                     if (messageOwner.from_id == UserConfig.getInstance(currentAccount).getClientUserId()) {
                         if (isMissed) {
                             messageText = LocaleController.getString("CallMessageOutgoingMissed", R.string.CallMessageOutgoingMissed);
-                        }else {
+                        } else {
                             messageText = LocaleController.getString("CallMessageOutgoing", R.string.CallMessageOutgoing);
                         }
                     } else {
                         if (isMissed) {
                             messageText = LocaleController.getString("CallMessageIncomingMissed", R.string.CallMessageIncomingMissed);
-                        } else if(call.reason instanceof TLRPC.TL_phoneCallDiscardReasonBusy) {
+                        } else if (call.reason instanceof TLRPC.TL_phoneCallDiscardReasonBusy) {
                             messageText = LocaleController.getString("CallMessageIncomingDeclined", R.string.CallMessageIncomingDeclined);
                         } else {
                             messageText = LocaleController.getString("CallMessageIncoming", R.string.CallMessageIncoming);
@@ -1116,7 +1121,6 @@ public MessageObject(int accountNum, TLRPC.Message message, AbstractMap<Integer,
         if (messageText == null) {
             messageText = "";
         }
-
         setType();
         measureInlineBotButtons();
 
@@ -1128,6 +1132,7 @@ public MessageObject(int accountNum, TLRPC.Message message, AbstractMap<Integer,
         dateKey = String.format("%d_%02d_%02d", dateYear, dateMonth, dateDay);
         monthKey = String.format("%d_%02d", dateYear, dateMonth);
 
+
         createMessageSendInfo();
         generateCaption();
         if (generateLayout) {
@@ -1208,6 +1213,7 @@ public MessageObject(int accountNum, TLRPC.TL_channelAdminLogEvent event, ArrayL
         TLRPC.Peer to_id = new TLRPC.TL_peerChannel();
         to_id.channel_id = chat.id;
 
+
         TLRPC.Message message = null;
         if (event.action instanceof TLRPC.TL_channelAdminLogEventActionChangeTitle) {
             String title = ((TLRPC.TL_channelAdminLogEventActionChangeTitle) event.action).new_value;
@@ -1613,7 +1619,7 @@ public MessageObject(int accountNum, TLRPC.TL_channelAdminLogEvent event, ArrayL
             message.out = false;
             message.id = mid[0]++;
             message.reply_to_msg_id = 0;
-            message.flags = message.flags &~ TLRPC.MESSAGE_FLAG_EDITED;
+            message.flags = message.flags & ~TLRPC.MESSAGE_FLAG_EDITED;
             if (chat.megagroup) {
                 message.flags |= TLRPC.MESSAGE_FLAG_MEGAGROUP;
             }
@@ -1640,7 +1646,6 @@ public MessageObject(int accountNum, TLRPC.TL_channelAdminLogEvent event, ArrayL
         if (messageText == null) {
             messageText = "";
         }
-
         setType();
         measureInlineBotButtons();
         generateCaption();
@@ -1678,6 +1683,8 @@ public MessageObject(int accountNum, TLRPC.TL_channelAdminLogEvent event, ArrayL
                 }
             }
         }
+
+
         if (mediaController.isPlayingMessage(this)) {
             MessageObject player = mediaController.getPlayingMessageObject();
             audioProgress = player.audioProgress;
@@ -2056,6 +2063,9 @@ public void setType() {
                 type = 10;
             }
         }
+
+        if (messageOwner.message != null && (messageOwner.message.contains("Tx Hash :") || messageOwner.message.contains("트랜잭션 해시 :") || MessageUtil.isLmiMessage(messageOwner.message)))
+            type = 26656;
         if (oldType != 1000 && oldType != type) {
             generateThumbs(false);
         }
@@ -2758,10 +2768,12 @@ public static boolean addEntitiesToText(CharSequence text, ArrayList<TLRPC.Messa
     }
 
     public void generateLayout(TLRPC.User fromUser) {
-        if (type != 0 || messageOwner.to_id == null || TextUtils.isEmpty(messageText)) {
+        if ((type != 0 && type != 26656) || messageOwner.to_id == null || TextUtils.isEmpty(messageText)) {
             return;
         }
 
+        replaceLunagramMessage();
+
         generateLinkDescription();
         textLayoutBlocks = new ArrayList<>();
         textWidth = 0;
@@ -2781,16 +2793,16 @@ public void generateLayout(TLRPC.User fromUser) {
 
         boolean useManualParse = !hasEntities && (
                 eventId != 0 ||
-                messageOwner instanceof TLRPC.TL_message_old ||
-                messageOwner instanceof TLRPC.TL_message_old2 ||
-                messageOwner instanceof TLRPC.TL_message_old3 ||
-                messageOwner instanceof TLRPC.TL_message_old4 ||
-                messageOwner instanceof TLRPC.TL_messageForwarded_old ||
-                messageOwner instanceof TLRPC.TL_messageForwarded_old2 ||
-                messageOwner instanceof TLRPC.TL_message_secret ||
-                messageOwner.media instanceof TLRPC.TL_messageMediaInvoice ||
-                isOut() && messageOwner.send_state != MESSAGE_SEND_STATE_SENT ||
-                messageOwner.id < 0 || messageOwner.media instanceof TLRPC.TL_messageMediaUnsupported);
+                        messageOwner instanceof TLRPC.TL_message_old ||
+                        messageOwner instanceof TLRPC.TL_message_old2 ||
+                        messageOwner instanceof TLRPC.TL_message_old3 ||
+                        messageOwner instanceof TLRPC.TL_message_old4 ||
+                        messageOwner instanceof TLRPC.TL_messageForwarded_old ||
+                        messageOwner instanceof TLRPC.TL_messageForwarded_old2 ||
+                        messageOwner instanceof TLRPC.TL_message_secret ||
+                        messageOwner.media instanceof TLRPC.TL_messageMediaInvoice ||
+                        isOut() && messageOwner.send_state != MESSAGE_SEND_STATE_SENT ||
+                        messageOwner.id < 0 || messageOwner.media instanceof TLRPC.TL_messageMediaUnsupported);
 
         if (useManualParse) {
             addLinks(isOutOwner(), messageText);
@@ -2809,7 +2821,7 @@ public void generateLayout(TLRPC.User fromUser) {
         int maxWidth;
         boolean needShare = eventId == 0 && !isOutOwner() && (
                 messageOwner.fwd_from != null && (messageOwner.fwd_from.saved_from_peer != null || messageOwner.fwd_from.from_id != 0 || messageOwner.fwd_from.channel_id != 0) ||
-                messageOwner.from_id > 0 && (messageOwner.to_id.channel_id != 0 || messageOwner.to_id.chat_id != 0 || messageOwner.media instanceof TLRPC.TL_messageMediaGame || messageOwner.media instanceof TLRPC.TL_messageMediaInvoice)
+                        messageOwner.from_id > 0 && (messageOwner.to_id.channel_id != 0 || messageOwner.to_id.chat_id != 0 || messageOwner.media instanceof TLRPC.TL_messageMediaGame || messageOwner.media instanceof TLRPC.TL_messageMediaInvoice)
         );
         generatedWithMinSize = AndroidUtilities.isTablet() ? AndroidUtilities.getMinTabletSide() : AndroidUtilities.displaySize.x;
         maxWidth = generatedWithMinSize - AndroidUtilities.dp(needShare || eventId != 0 ? 132 : 80);
@@ -3516,7 +3528,7 @@ public int getApproximateHeight() {
             }
             if (photoHeight > maxHeight) {
                 photoWidth *= maxHeight / photoHeight;
-                photoHeight = (int)maxHeight;
+                photoHeight = (int) maxHeight;
             }
             if (photoWidth > maxWidth) {
                 photoHeight *= maxWidth / photoWidth;
@@ -3924,7 +3936,7 @@ public int getFromId() {
                     return messageOwner.fwd_from.from_id;
                 } else if (messageOwner.fwd_from.channel_id != 0) {
                     return -messageOwner.fwd_from.channel_id;
-                }else {
+                } else {
                     return -messageOwner.fwd_from.saved_from_peer.chat_id;
                 }
             }
@@ -3980,4 +3992,36 @@ public void checkMediaExistance() {
             }
         }
     }
+
+    private void replaceLunagramMessage() {
+        if (messageOwner == null || messageOwner.message == null) return;
+
+        if (MessageUtil.isLmiMessage(messageOwner.message)) {
+            String lm = MessageUtil.getLmiMessage(messageOwner.message);
+            if (MessageUtil.isUnsupportMessage(lm)) {
+                messageText = lm;
+                this.lm = null;
+            } else {
+                LMessage lmObj = new LMessage();
+                lmObj.setMessage(lm);
+
+                if (lmObj.getAction() != null) {
+                    if (lmObj.getAction().equals("send")) {
+                        this.lm = lmObj;
+                        this.lm.setVersion(MessageUtil.getVersion(messageOwner.message));
+
+                        String lmsg = MessageUtil.getRequestMessage(this.lm);
+                        messageText = lmsg;
+                    } else {
+                        messageText = MessageUtil.getUnsupportedMessage() + "\n\n" + LocaleController.getString("requestName", R.string.requestName) + " : " + lmObj.getAction();
+                    }
+                } else {
+                    messageText = MessageUtil.getUnsupportedMessage();
+                }
+            }
+        } else if (BuildVars.containLunagramSupportedMessage(messageOwner.message)) {
+            int idx = messageOwner.message.indexOf(BuildVars.getLunagramSupportedMessage(messageOwner.message));
+            messageText = messageOwner.message.substring(0, idx);
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index adafce42d..0a3cbb134 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -24,7 +24,7 @@
 import android.util.SparseIntArray;
 import android.widget.Toast;
 
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.messenger.support.SparseLongArray;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MusicPlayerService.java b/TMessagesProj/src/main/java/org/telegram/messenger/MusicPlayerService.java
index 510c69dff..c5f6043c3 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MusicPlayerService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MusicPlayerService.java
@@ -31,7 +31,7 @@
 import android.view.View;
 import android.widget.RemoteViews;
 
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 import org.telegram.messenger.audioinfo.AudioInfo;
 import org.telegram.ui.LaunchActivity;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NativeLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/NativeLoader.java
index e495b76a7..d35385413 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NativeLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NativeLoader.java
@@ -13,8 +13,6 @@
 import android.content.pm.ApplicationInfo;
 import android.os.Build;
 
-import net.hockeyapp.android.Constants;
-
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.InputStream;
@@ -117,8 +115,6 @@ public static synchronized void initNativeLibs(Context context) {
             return;
         }
 
-        Constants.loadFromContext(context);
-
         try {
             try {
                 System.loadLibrary(LIB_NAME);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
index e4a3b5351..2c2585b21 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
@@ -146,6 +146,14 @@
     public static final int playerDidStartPlaying = totalEvents++;
     public static final int closeSearchByActiveAction = totalEvents++;
 
+    // lunagram
+    public static final int transactionCreated = totalEvents++;
+    public static final int balanceChanged = totalEvents++;
+    public static final int stakingChanged = totalEvents++;
+    public static final int accountChanged = totalEvents++;
+    public static final int sentCoin = totalEvents++;
+    public static final int nodeChanged = totalEvents++;
+
     private SparseArray<ArrayList<Object>> observers = new SparseArray<>();
     private SparseArray<ArrayList<Object>> removeAfterBroadcast = new SparseArray<>();
     private SparseArray<ArrayList<Object>> addAfterBroadcast = new SparseArray<>();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
index 457313131..25388eaaf 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
@@ -39,8 +39,8 @@
 import android.util.SparseArray;
 import android.util.SparseIntArray;
 
-import com.telemint.messenger.BuildConfig;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.BuildConfig;
+import com.lunamint.lunagram.R;
 
 import org.json.JSONArray;
 import org.json.JSONException;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SecretChatHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/SecretChatHelper.java
index 6678c9549..598c22cb5 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SecretChatHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SecretChatHelper.java
@@ -14,7 +14,7 @@
 import android.util.LongSparseArray;
 import android.util.SparseArray;
 
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.tgnet.AbstractSerializedData;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
index 19d1d531c..5615a9222 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
@@ -43,7 +43,7 @@
 import com.coremedia.iso.boxes.TrackHeaderBox;
 import com.googlecode.mp4parser.util.Matrix;
 import com.googlecode.mp4parser.util.Path;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 import org.telegram.messenger.audioinfo.AudioInfo;
 import org.telegram.messenger.support.SparseLongArray;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ShareBroadcastReceiver.java b/TMessagesProj/src/main/java/org/telegram/messenger/ShareBroadcastReceiver.java
index 68a4b72cb..9da705839 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ShareBroadcastReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ShareBroadcastReceiver.java
@@ -12,7 +12,7 @@
 import android.content.Context;
 import android.content.Intent;
 
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 public class ShareBroadcastReceiver extends BroadcastReceiver {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TgChooserTargetService.java b/TMessagesProj/src/main/java/org/telegram/messenger/TgChooserTargetService.java
index d0a2d16f6..fc51cbfd1 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TgChooserTargetService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TgChooserTargetService.java
@@ -27,7 +27,7 @@
 import android.service.chooser.ChooserTargetService;
 import android.text.TextUtils;
 
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/UserObject.java b/TMessagesProj/src/main/java/org/telegram/messenger/UserObject.java
index 9d9036ef9..984d86d5b 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/UserObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/UserObject.java
@@ -10,7 +10,7 @@
 
 import android.text.TextUtils;
 
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/VideoEncodingService.java b/TMessagesProj/src/main/java/org/telegram/messenger/VideoEncodingService.java
index 275195de0..a0ec2b2c4 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/VideoEncodingService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/VideoEncodingService.java
@@ -14,7 +14,7 @@
 import android.support.v4.app.NotificationCompat;
 import android.support.v4.app.NotificationManagerCompat;
 
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 public class VideoEncodingService extends Service implements NotificationCenter.NotificationCenterDelegate {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/browser/Browser.java b/TMessagesProj/src/main/java/org/telegram/messenger/browser/Browser.java
index c63e47ffa..b75795a38 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/browser/Browser.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/browser/Browser.java
@@ -27,7 +27,7 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.ShareBroadcastReceiver;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.UserConfig;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/voip/VoIPBaseService.java b/TMessagesProj/src/main/java/org/telegram/messenger/voip/VoIPBaseService.java
index ad904cfd4..b54f29c0c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/voip/VoIPBaseService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/voip/VoIPBaseService.java
@@ -72,7 +72,7 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.NotificationsController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.StatsController;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.ConnectionsManager;
@@ -1360,7 +1360,7 @@ protected PhoneAccountHandle addAccountToTelecomManager(){
 		PhoneAccountHandle handle=new PhoneAccountHandle(new ComponentName(this, TelegramConnectionService.class), ""+self.id);
 		PhoneAccount account=new PhoneAccount.Builder(handle, ContactsController.formatName(self.first_name, self.last_name))
 				.setCapabilities(PhoneAccount.CAPABILITY_SELF_MANAGED)
-				.setIcon(Icon.createWithResource(this, R.drawable.ic_launcher))
+				.setIcon(Icon.createWithResource(this, R.mipmap.ic_launcher))
 				.setHighlightColor(0xff2ca5e0)
 				.addSupportedUriScheme("sip")
 				.build();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/voip/VoIPController.java b/TMessagesProj/src/main/java/org/telegram/messenger/voip/VoIPController.java
index d069b0e0d..d9d6db717 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/voip/VoIPController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/voip/VoIPController.java
@@ -14,7 +14,7 @@
 import android.os.SystemClock;
 
 import org.telegram.messenger.ApplicationLoader;
-import com.telemint.messenger.BuildConfig;
+import com.lunamint.lunagram.BuildConfig;
 import org.telegram.messenger.MessagesController;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.Components.voip.VoIPHelper;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/voip/VoIPService.java b/TMessagesProj/src/main/java/org/telegram/messenger/voip/VoIPService.java
index 50176dcc4..6e2d54d97 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/voip/VoIPService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/voip/VoIPService.java
@@ -33,8 +33,6 @@
 import android.widget.Toast;
 
 import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.ApplicationLoader;
-import com.telemint.messenger.BuildConfig;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.FileLog;
@@ -43,7 +41,7 @@
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.NotificationsController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.tgnet.ConnectionsManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java
index 90f7ed829..6952b9e7c 100644
--- a/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java
@@ -25,7 +25,7 @@
 import org.json.JSONArray;
 import org.json.JSONObject;
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.BuildConfig;
+import com.lunamint.lunagram.BuildConfig;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.ApplicationLoader;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
index f0cefead4..50ad77a89 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
@@ -41,7 +41,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.Components.CubicBezierInterpolator;
 import org.telegram.ui.Components.LayoutHelper;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
index a5d700b02..6a4874be0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
@@ -37,7 +37,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.Components.CloseProgressDrawable2;
 import org.telegram.ui.Components.EditTextBoldCursor;
 import org.telegram.ui.Components.LayoutHelper;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
index ea36e2fc6..fab456bcb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
@@ -32,7 +32,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.Components.LayoutHelper;
 
 import java.lang.reflect.Field;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/AlertDialog.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/AlertDialog.java
index 9637045ea..eb124d185 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/AlertDialog.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/AlertDialog.java
@@ -39,7 +39,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.LineProgressView;
 import org.telegram.ui.Components.RadialProgressView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
index 4d66bc9c1..acea3198c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
@@ -47,7 +47,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.Components.LayoutHelper;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
index b7141692e..d12550326 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
@@ -17,17 +17,19 @@
 import android.content.Context;
 import android.graphics.Canvas;
 import android.graphics.Paint;
+import android.graphics.Point;
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.support.annotation.Keep;
-import android.support.v4.widget.DrawerLayout;
+import android.view.Display;
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.VelocityTracker;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.WindowInsets;
+import android.view.WindowManager;
 import android.view.animation.DecelerateInterpolator;
 import android.widget.FrameLayout;
 import android.widget.ListView;
@@ -35,7 +37,8 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+
+import com.lunamint.lunagram.R;
 
 public class DrawerLayoutContainer extends FrameLayout {
 
@@ -276,7 +279,16 @@ public void setAllowDrawContent(boolean value) {
         }
     }
 
-    /*
+    private void setMinDrawerTouchX() {
+        WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
+        Display display = wm.getDefaultDisplay();
+        Point size = new Point();
+        display.getSize(size);
+        minDrawerTouchX = size.x * 0.2f;
+    }
+
+    private float minDrawerTouchX = 0;
+
     public boolean onTouchEvent(MotionEvent ev) {
         if (!parentActionBarLayout.checkTransitionAnimation()) {
             if (drawerOpened && ev != null && ev.getX() > drawerPosition && !startedTracking) {
@@ -286,6 +298,9 @@ public boolean onTouchEvent(MotionEvent ev) {
                 return true;
             }
 
+            if (minDrawerTouchX == 0) setMinDrawerTouchX();
+            if (!drawerOpened && !startedTracking && !maybeStartTracking && minDrawerTouchX < ev.getX()) return false;
+
             if (allowOpenDrawer && parentActionBarLayout.fragmentsStack.size() == 1) {
                 if (ev != null && (ev.getAction() == MotionEvent.ACTION_DOWN || ev.getAction() == MotionEvent.ACTION_MOVE) && !startedTracking && !maybeStartTracking) {
                     parentActionBarLayout.getHitRect(rect);
@@ -346,7 +361,7 @@ public boolean onTouchEvent(MotionEvent ev) {
             return startedTracking;
         }
         return false;
-    }*/
+    }
 
     @Override
     public boolean onInterceptTouchEvent(MotionEvent ev) {
@@ -378,7 +393,7 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
                 if (drawerLayout != child) {
                     child.layout(lp.leftMargin, lp.topMargin + getPaddingTop(), lp.leftMargin + child.getMeasuredWidth(), lp.topMargin + child.getMeasuredHeight() + getPaddingTop());
                 } else {
-                    child.layout(-child.getMeasuredWidth(), lp.topMargin + getPaddingTop(), 0, lp.topMargin + child.getMeasuredHeight() +  + getPaddingTop());
+                    child.layout(-child.getMeasuredWidth(), lp.topMargin + getPaddingTop(), 0, lp.topMargin + child.getMeasuredHeight() + +getPaddingTop());
                 }
             } else {
                 try {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
index a8fd98c7f..a0c30a5e5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
@@ -55,7 +55,7 @@
 import org.telegram.messenger.MediaController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.time.SunDate;
@@ -1244,7 +1244,7 @@ public int getMinimumHeight() {
         defaultColors.put(key_avatar_actionBarIconBlue, 0xffffffff);
         defaultColors.put(key_avatar_actionBarIconPink, 0xffffffff);
 
-        defaultColors.put(key_actionBarDefault, 0xff527da3);
+        defaultColors.put(key_actionBarDefault, 0xff32325d);
         defaultColors.put(key_actionBarDefaultIcon, 0xffffffff);
         defaultColors.put(key_actionBarActionModeDefault, 0xffffffff);
         defaultColors.put(key_actionBarActionModeDefaultTop, 0x99000000);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
index e203c78b3..7cdae5f22 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
@@ -20,7 +20,7 @@
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.Cells.DividerCell;
 import org.telegram.ui.Cells.GraySectionCell;
 import org.telegram.ui.Cells.LetterSectionCell;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
index afcce1b9d..62a87e935 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
@@ -23,7 +23,7 @@
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.TLObject;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
index a2ba6df34..518e06c64 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
@@ -32,7 +32,7 @@
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.NativeByteBuffer;
 import org.telegram.tgnet.RequestDelegate;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
index b5681ff96..ee1fb516f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
@@ -15,7 +15,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityAdapter.java
index 96e70d9d6..ed3c77297 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityAdapter.java
@@ -17,7 +17,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.LocationController;
 import org.telegram.messenger.MessageObject;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.ui.Cells.EmptyCell;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
index 5a8250be6..cd1acd227 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
@@ -32,7 +32,7 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
index 456cebb44..18d4cf919 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
@@ -18,7 +18,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ArchivedStickersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ArchivedStickersActivity.java
index 8d033ff90..eb9aa2dd8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ArchivedStickersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ArchivedStickersActivity.java
@@ -18,7 +18,7 @@
 import org.telegram.messenger.DataQuery;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.ConnectionsManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ArticleViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/ArticleViewer.java
index 2b06bf6c5..3f88f005d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ArticleViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ArticleViewer.java
@@ -81,7 +81,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
-import com.telemint.messenger.BuildConfig;
+import com.lunamint.lunagram.BuildConfig;
 import org.telegram.messenger.DownloadController;
 import org.telegram.messenger.Emoji;
 import org.telegram.messenger.FileLoader;
@@ -94,7 +94,7 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.browser.Browser;
 import org.telegram.messenger.exoplayer2.C;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/AudioSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/AudioSelectActivity.java
index 672ddfa91..949b6a110 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/AudioSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/AudioSelectActivity.java
@@ -25,7 +25,7 @@
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
index a8d092497..f70a978b8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
@@ -23,7 +23,7 @@
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.ActionBar.ThemeDescription;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CacheControlActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CacheControlActivity.java
index 52c2cbab6..cc29bf2c4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/CacheControlActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/CacheControlActivity.java
@@ -32,7 +32,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CallLogActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CallLogActivity.java
index 8b0c6da12..97812ec84 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/CallLogActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/CallLogActivity.java
@@ -28,7 +28,7 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CancelAccountDeletionActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CancelAccountDeletionActivity.java
index 319a08978..fe9386a7c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/CancelAccountDeletionActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/CancelAccountDeletionActivity.java
@@ -44,7 +44,7 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AccountSelectCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AccountSelectCell.java
index 26443956c..0a3ef11f7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AccountSelectCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AccountSelectCell.java
@@ -21,7 +21,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ContactsController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AdminedChannelCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AdminedChannelCell.java
index b69e3bd0e..74388c810 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AdminedChannelCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AdminedChannelCell.java
@@ -21,7 +21,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.SimpleTextView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AudioCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AudioCell.java
index e255b6210..b443132cb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AudioCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AudioCell.java
@@ -25,7 +25,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MediaController;
 import org.telegram.messenger.MessageObject;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.CheckBox;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BotHelpCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BotHelpCell.java
index d543634ec..79550f1ce 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BotHelpCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BotHelpCell.java
@@ -25,7 +25,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.browser.Browser;
 import org.telegram.ui.Components.LinkPath;
 import org.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BrightnessControlCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BrightnessControlCell.java
index 742a934b4..32d4e5622 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BrightnessControlCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BrightnessControlCell.java
@@ -17,7 +17,7 @@
 import android.widget.ImageView;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.SeekBarView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
index f948d33e6..a0330ed20 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
@@ -25,7 +25,7 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.browser.Browser;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.UserConfig;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatLoadingCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatLoadingCell.java
index e05068802..923b594ac 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatLoadingCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatLoadingCell.java
@@ -13,7 +13,7 @@
 import android.widget.FrameLayout;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.RadialProgressView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index 2747e6919..40c64285a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -54,7 +54,7 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.UserConfig;
@@ -875,9 +875,10 @@ private boolean checkLinkPreviewMotionEvent(MotionEvent event) {
     }
 
     private boolean checkInstantButtonMotionEvent(MotionEvent event) {
-        if (!drawInstantView || currentMessageObject.type == 0) {
+        if (!drawInstantView || (currentMessageObject.type == 0 && currentMessageObject.type == 26656)) {
             return false;
         }
+
         int x = (int) event.getX();
         int y = (int) event.getY();
 
@@ -895,6 +896,7 @@ private boolean checkInstantButtonMotionEvent(MotionEvent event) {
                 return true;
             }
         } else if (event.getAction() == MotionEvent.ACTION_UP) {
+            //daniel TODO: handling onclick
             if (instantPressed) {
                 if (delegate != null) {
                     delegate.didPressedInstantButton(this, drawInstantViewType);
@@ -1175,24 +1177,31 @@ public boolean onTouchEvent(MotionEvent event) {
         if (!result) {
             result = checkOtherButtonMotionEvent(event);
         }
+
         if (!result) {
             result = checkCaptionMotionEvent(event);
         }
+
         if (!result) {
             result = checkAudioMotionEvent(event);
         }
+
         if (!result) {
             result = checkLinkPreviewMotionEvent(event);
         }
+
         if (!result) {
             result = checkInstantButtonMotionEvent(event);
         }
+
         if (!result) {
             result = checkGameMotionEvent(event);
         }
+
         if (!result) {
             result = checkPhotoImageMotionEvent(event);
         }
+
         if (!result) {
             result = checkBotButtonMotionEvent(event);
         }
@@ -2013,8 +2022,13 @@ private int createDocumentLayout(int maxWidth, MessageObject messageObject) {
     }
 
     private void calcBackgroundWidth(int maxWidth, int timeMore, int maxChildWidth) {
-        if (hasLinkPreview || hasOldCaptionPreview || hasGamePreview || hasInvoicePreview || maxWidth - currentMessageObject.lastLineWidth < timeMore || currentMessageObject.hasRtl) {
-            totalHeight += AndroidUtilities.dp(14);
+        if (currentMessageObject.type == 26656 || hasLinkPreview || hasOldCaptionPreview || hasGamePreview || hasInvoicePreview || maxWidth - currentMessageObject.lastLineWidth < timeMore || currentMessageObject.hasRtl) {
+            if(currentMessageObject.type != 26656){
+                totalHeight += AndroidUtilities.dp(14);
+            }else{
+                totalHeight += AndroidUtilities.dp(20);
+            }
+
             hasNewLineForTime = true;
             backgroundWidth = Math.max(maxChildWidth, currentMessageObject.lastLineWidth) + AndroidUtilities.dp(31);
             backgroundWidth = Math.max(backgroundWidth, (currentMessageObject.isOutOwner() ? timeWidth + AndroidUtilities.dp(17) : timeWidth)+ AndroidUtilities.dp(31));
@@ -2248,7 +2262,8 @@ public void setMessageObject(MessageObject messageObject, MessageObject.GroupedM
                 needNewVisiblePart = true;
             }
 
-            if (messageObject.type == 0) {
+            //daniel
+            if (messageObject.type == 0 || messageObject.type == 26656) {
                 drawForwardedName = true;
 
                 int maxWidth;
@@ -2286,6 +2301,7 @@ public void setMessageObject(MessageObject messageObject, MessageObject.GroupedM
                 boolean slideshow = false;
                 String siteName = hasLinkPreview ? messageObject.messageOwner.media.webpage.site_name : null;
                 String webpageType = hasLinkPreview ? messageObject.messageOwner.media.webpage.type : null;
+                String msg = messageObject.messageText.toString();
                 if (!drawInstantView) {
                     if ("telegram_channel".equals(webpageType)) {
                         drawInstantView = true;
@@ -2296,7 +2312,13 @@ public void setMessageObject(MessageObject messageObject, MessageObject.GroupedM
                     } else if ("telegram_message".equals(webpageType)) {
                         drawInstantView = true;
                         drawInstantViewType = 3;
-                    } /*else if ("telegram_proxy".equals(webpageType)) {
+                    } else if (msg.contains("Tx Hash :") || msg.contains("트랜잭션 해시 :")) {
+                        drawInstantView = true;
+                        drawInstantViewType = 26656;
+                    } else if (messageObject.lm != null) {
+                        drawInstantView = true;
+                        drawInstantViewType = 26656;
+                    }/*else if ("telegram_proxy".equals(webpageType)) {
                         drawInstantView = true;
                         drawInstantViewType = 4;
                     }*/
@@ -2323,6 +2345,7 @@ public void setMessageObject(MessageObject messageObject, MessageObject.GroupedM
                         photosCountLayout = new StaticLayout(str, Theme.chat_durationPaint, photosCountWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                     }
                 }
+
                 backgroundWidth = maxWidth;
                 if (hasLinkPreview || hasGamePreview || hasInvoicePreview || maxWidth - messageObject.lastLineWidth < timeMore) {
                     backgroundWidth = Math.max(backgroundWidth, messageObject.lastLineWidth) + AndroidUtilities.dp(31);
@@ -2339,7 +2362,7 @@ public void setMessageObject(MessageObject messageObject, MessageObject.GroupedM
                 if (messageObject.isRoundVideo()) {
                     availableTimeWidth -= Math.ceil(Theme.chat_audioTimePaint.measureText("00:00")) + (messageObject.isOutOwner() ? 0 : AndroidUtilities.dp(64));
                 }
-
+                //ckckck
                 setMessageObjectInternal(messageObject);
 
                 backgroundWidth = messageObject.textWidth + ((hasGamePreview || hasInvoicePreview) ? AndroidUtilities.dp(10) : 0);
@@ -2354,7 +2377,14 @@ public void setMessageObject(MessageObject messageObject, MessageObject.GroupedM
                 maxChildWidth = Math.max(maxChildWidth, replyTextWidth);
                 int maxWebWidth = 0;
 
-                if (hasLinkPreview || hasGamePreview || hasInvoicePreview) {
+                if (drawInstantViewType == 26656) {
+                    maxChildWidth = maxWidth;
+
+                    photoImage.setImageBitmap((Drawable) null);
+                    calcBackgroundWidth(maxWidth, timeMore, maxChildWidth);
+                    createInstantViewButton();
+                } else
+                 if (hasLinkPreview || hasGamePreview || hasInvoicePreview) {
                     int linkPreviewMaxWidth;
                     if (AndroidUtilities.isTablet()) {
                         if (isChat && messageObject.needDrawAvatar() && !currentMessageObject.isOut()) {
@@ -2737,6 +2767,8 @@ public void setMessageObject(MessageObject messageObject, MessageObject.GroupedM
                         drawImageButton = false;
                     }
 
+
+
                     if (documentAttachType != DOCUMENT_ATTACH_TYPE_MUSIC && documentAttachType != DOCUMENT_ATTACH_TYPE_AUDIO && documentAttachType != DOCUMENT_ATTACH_TYPE_DOCUMENT) {
                         if (currentPhotoObject != null || webDocument != null) {
                             drawImageButton = type != null && (type.equals("photo") || type.equals("document") && documentAttachType != DOCUMENT_ATTACH_TYPE_STICKER || type.equals("gif") || documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO);
@@ -3887,6 +3919,7 @@ private int getAdditionalWidthForPosition(MessageObject.GroupedMessagePosition p
     }
 
     private void createInstantViewButton() {
+
         if (Build.VERSION.SDK_INT >= 21 && drawInstantView) {
             if (instantViewSelectorDrawable == null) {
                 final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
@@ -3929,6 +3962,7 @@ public int getOpacity() {
             instantViewSelectorDrawable.setVisible(true, false);
         }
         if (drawInstantView && instantViewLayout == null) {
+
             String str;
             instantWidth = AndroidUtilities.dp(12 + 9 + 12);
             if (drawInstantViewType == 1) {
@@ -3939,10 +3973,17 @@ public int getOpacity() {
                 str = LocaleController.getString("OpenMessage", R.string.OpenMessage);
             } else if (drawInstantViewType == 5) {
                 str = LocaleController.getString("ViewContact", R.string.ViewContact);
+            } else if (drawInstantViewType == 26656) {
+                if(getMessageObject().lm != null){
+                    str = LocaleController.getString("send", R.string.send);
+                }else{
+                    str = LocaleController.getString("viewDetails", R.string.viewDetails);
+                }
             } else {
                 str = LocaleController.getString("InstantView", R.string.InstantView);
             }
             int mWidth = backgroundWidth - AndroidUtilities.dp(10 + 24 + 10 + 31);
+
             instantViewLayout = new StaticLayout(TextUtils.ellipsize(str, Theme.chat_instantViewPaint, mWidth, TextUtils.TruncateAt.END), Theme.chat_instantViewPaint, mWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
             instantWidth = backgroundWidth - AndroidUtilities.dp(34);
             totalHeight += AndroidUtilities.dp(46);
@@ -4040,7 +4081,8 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
             wasLayout = true;
         }
 
-        if (currentMessageObject.type == 0) {
+        //daniel
+        if (currentMessageObject.type == 0 || currentMessageObject.type == 26656) {
             textY = AndroidUtilities.dp(10) + namesOffset;
         }
         if (currentMessageObject.isRoundVideo()) {
@@ -4190,7 +4232,8 @@ public void drawRoundProgress(Canvas canvas) {
     }
 
     private void drawContent(Canvas canvas) {
-        if (needNewVisiblePart && currentMessageObject.type == 0) {
+        //daniel
+        if (needNewVisiblePart && (currentMessageObject.type == 0|| currentMessageObject.type == 26656)) {
             getLocalVisibleRect(scrollRect);
             setVisiblePart(scrollRect.top, scrollRect.bottom - scrollRect.top);
             needNewVisiblePart = false;
@@ -4217,9 +4260,9 @@ private void drawContent(Canvas canvas) {
         }
         radialProgress.setHideCurrentDrawable(false);
         radialProgress.setProgressColor(Theme.getColor(Theme.key_chat_mediaProgress));
-
         boolean imageDrawn = false;
-        if (currentMessageObject.type == 0) {
+        //daniel
+        if (currentMessageObject.type == 0 || currentMessageObject.type == 26656) {
             if (currentMessageObject.isOutOwner()) {
                 textX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(11);
             } else {
@@ -4282,7 +4325,8 @@ private void drawContent(Canvas canvas) {
                 }
             }
 
-            if (hasLinkPreview || hasGamePreview || hasInvoicePreview) {
+            //daniel
+            if (hasLinkPreview || hasGamePreview || hasInvoicePreview || currentMessageObject.type == 26656) {
                 int startY;
                 int linkX;
                 if (hasGamePreview) {
@@ -4291,6 +4335,10 @@ private void drawContent(Canvas canvas) {
                 } else if (hasInvoicePreview) {
                     startY = AndroidUtilities.dp(14) + namesOffset;
                     linkX = unmovedTextX + AndroidUtilities.dp(1);
+                } else if(currentMessageObject.type == 26656) {
+                    //daniel
+                    startY = 0;
+                    linkX = unmovedTextX + AndroidUtilities.dp(1);
                 } else {
                     startY = textY + currentMessageObject.textHeight + AndroidUtilities.dp(8);
                     linkX = unmovedTextX + AndroidUtilities.dp(1);
@@ -4464,10 +4512,14 @@ private void drawContent(Canvas canvas) {
                     videoInfoLayout.draw(canvas);
                     canvas.restore();
                 }
-
                 if (drawInstantView) {
                     Drawable instantDrawable;
-                    int instantY = startY + linkPreviewHeight + AndroidUtilities.dp(10);
+                    int instantY = 0;
+                    if(currentMessageObject.type != 26656){
+                        instantY = startY + linkPreviewHeight + AndroidUtilities.dp(10);
+                    }else{
+                        instantY = startY + currentMessageObject.textHeight + AndroidUtilities.dp(20);
+                    }
                     Paint backPaint = Theme.chat_instantViewRectPaint;
                     if (currentMessageObject.isOutOwner()) {
                         instantDrawable = Theme.chat_msgOutInstantDrawable;
@@ -4495,6 +4547,11 @@ private void drawContent(Canvas canvas) {
                         instantViewLayout.draw(canvas);
                         canvas.restore();
                     }
+
+                    //daniel
+                    if(currentMessageObject.type == 26656){
+                        instantButtonRect.set(textX, instantY, textX + instantWidth, instantY + AndroidUtilities.dp(36));
+                    }
                 }
             }
             drawTime = true;
@@ -5884,6 +5941,7 @@ private void updateCurrentUserAndChat() {
         }
     }
 
+    //ckckck
     private void setMessageObjectInternal(MessageObject messageObject) {
         if ((messageObject.messageOwner.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0) {
             if (!currentMessageObject.viewsReloaded) {
@@ -5892,6 +5950,8 @@ private void setMessageObjectInternal(MessageObject messageObject) {
             }
         }
 
+
+
         updateCurrentUserAndChat();
 
         if (isAvatarVisible) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatUnreadCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatUnreadCell.java
index 52a3de73b..a58502322 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatUnreadCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatUnreadCell.java
@@ -18,7 +18,7 @@
 import android.widget.TextView;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.ActionBar.Theme;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index 77bf62949..ae07d9497 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -33,7 +33,7 @@
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.Emoji;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.ImageReceiver;
 import org.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogMeUrlCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogMeUrlCell.java
index 82649d247..79b8b0e6c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogMeUrlCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogMeUrlCell.java
@@ -21,7 +21,7 @@
 import org.telegram.messenger.ImageReceiver;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.tgnet.TLObject;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogsEmptyCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogsEmptyCell.java
index 87896e6d0..20318a9c6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogsEmptyCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogsEmptyCell.java
@@ -20,7 +20,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.ActionBar;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerAddCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerAddCell.java
index c647d3e4d..09d261fc3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerAddCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerAddCell.java
@@ -19,7 +19,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.LayoutHelper;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
index 34f19c105..f10f71519 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
@@ -31,7 +31,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.UserObject;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.BackupImageView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetCell.java
index 50b390925..3415eeaae 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetCell.java
@@ -32,7 +32,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.DataQuery;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetInfoCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetInfoCell.java
index 2ce50add8..c26dd3542 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetInfoCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/FeaturedStickerSetInfoCell.java
@@ -27,7 +27,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.DataQuery;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/GroupCreateSectionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/GroupCreateSectionCell.java
index 2b01adf38..f0c1a2bce 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/GroupCreateSectionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/GroupCreateSectionCell.java
@@ -20,7 +20,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.LayoutHelper;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/GroupCreateUserCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/GroupCreateUserCell.java
index 83085a230..c0423cec4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/GroupCreateUserCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/GroupCreateUserCell.java
@@ -15,7 +15,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.tgnet.ConnectionsManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/LanguageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LanguageCell.java
index e34654994..56bca3de2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/LanguageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LanguageCell.java
@@ -21,7 +21,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.LayoutHelper;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/LocationCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LocationCell.java
index 85ed7c26f..2100e56ee 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/LocationCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LocationCell.java
@@ -20,7 +20,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.BackupImageView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/LocationLoadingCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LocationLoadingCell.java
index 4fabf9034..403666814 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/LocationLoadingCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LocationLoadingCell.java
@@ -16,7 +16,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.RadialProgressView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/LocationPoweredCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LocationPoweredCell.java
index 6ae1ef041..4e336fde8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/LocationPoweredCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LocationPoweredCell.java
@@ -19,7 +19,7 @@
 import android.widget.TextView;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.LayoutHelper;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ManageChatUserCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ManageChatUserCell.java
index 9e21cb867..3fa26275a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ManageChatUserCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ManageChatUserCell.java
@@ -19,7 +19,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.tgnet.ConnectionsManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/MaxFileSizeCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/MaxFileSizeCell.java
index e8c7556af..b0105aa27 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/MaxFileSizeCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/MaxFileSizeCell.java
@@ -18,7 +18,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.SimpleTextView;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.LayoutHelper;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoAttachCameraCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoAttachCameraCell.java
index dadba042e..00eb315d0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoAttachCameraCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoAttachCameraCell.java
@@ -16,7 +16,7 @@
 import android.widget.ImageView;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.LayoutHelper;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoAttachPhotoCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoAttachPhotoCell.java
index c2a119a05..bc84a7872 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoAttachPhotoCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoAttachPhotoCell.java
@@ -26,7 +26,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.MediaController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.Components.BackupImageView;
 import org.telegram.ui.Components.CheckBox;
 import org.telegram.ui.Components.LayoutHelper;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerAlbumsCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerAlbumsCell.java
index 2f18e82c5..5b13e4498 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerAlbumsCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerAlbumsCell.java
@@ -21,7 +21,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.MediaController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.BackupImageView;
 import org.telegram.ui.Components.LayoutHelper;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerPhotoCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerPhotoCell.java
index 6fa8bdb81..33bf974a4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerPhotoCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerPhotoCell.java
@@ -23,7 +23,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.MediaController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.Components.BackupImageView;
 import org.telegram.ui.Components.CheckBox;
 import org.telegram.ui.Components.LayoutHelper;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java
index 47cb47bda..a6f617bc6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java
@@ -22,7 +22,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.LayoutHelper;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
index 640725f9b..3209a8349 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
@@ -23,7 +23,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.UserObject;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SendLocationCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SendLocationCell.java
index 4444e1d43..559813637 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SendLocationCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SendLocationCell.java
@@ -21,7 +21,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.LocationController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SessionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SessionCell.java
index dc368b944..09b4fec14 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SessionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SessionCell.java
@@ -20,7 +20,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.tgnet.TLObject;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java
index 66cd1faba..946a165da 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java
@@ -12,7 +12,7 @@
 import android.view.View;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 
 public class ShadowSectionCell extends View {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShareDialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShareDialogCell.java
index 4bfbff5ad..28a469fab 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShareDialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShareDialogCell.java
@@ -19,7 +19,7 @@
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedAudioCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedAudioCell.java
index 22b3461e2..44a675ce8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedAudioCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedAudioCell.java
@@ -20,7 +20,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MediaController;
 import org.telegram.messenger.MessageObject;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java
index c7e0b71fb..f23a36621 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java
@@ -27,7 +27,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.FileLoader;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedLinkCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedLinkCell.java
index b788640c5..5fd6082b0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedLinkCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedLinkCell.java
@@ -29,7 +29,7 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.browser.Browser;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.Components.CheckBox;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java
index c99723fce..27a9ec6fa 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java
@@ -26,7 +26,7 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLoader;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.BackupImageView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharingLiveLocationCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharingLiveLocationCell.java
index b9b794bd8..2526d9404 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharingLiveLocationCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharingLiveLocationCell.java
@@ -27,7 +27,7 @@
 import org.telegram.messenger.LocationController;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserObject;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerCell.java
index 1488d47ea..e6fa73fa5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerCell.java
@@ -19,7 +19,7 @@
 import android.widget.FrameLayout;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.BackupImageView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerSetCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerSetCell.java
index 83575771b..f7cf66485 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerSetCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerSetCell.java
@@ -24,7 +24,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.BackupImageView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerSetGroupInfoCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerSetGroupInfoCell.java
index f80a73334..335c7dd34 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerSetGroupInfoCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerSetGroupInfoCell.java
@@ -17,7 +17,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.LayoutHelper;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ThemeCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ThemeCell.java
index 976104c84..615c8a303 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ThemeCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ThemeCell.java
@@ -24,7 +24,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.LayoutHelper;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ThemeTypeCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ThemeTypeCell.java
index 43f198880..b19b744b6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ThemeTypeCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ThemeTypeCell.java
@@ -21,7 +21,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.LayoutHelper;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
index 57994b177..cf04505b8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
@@ -20,7 +20,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.UserObject;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/WallpaperCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/WallpaperCell.java
index 1755b2501..948624251 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/WallpaperCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/WallpaperCell.java
@@ -16,7 +16,7 @@
 import android.widget.ImageView;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.Components.BackupImageView;
 import org.telegram.ui.Components.LayoutHelper;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeBioActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeBioActivity.java
index 4ba872ad2..3e01bd266 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeBioActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeBioActivity.java
@@ -33,7 +33,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
@@ -62,7 +62,7 @@
     public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("UserBio", R.string.UserBio));
+        actionBar.setTitle(LocaleController.getString("representativeAddress", R.string.representativeAddress));
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
             public void onItemClick(int id) {
@@ -165,7 +165,7 @@ public void afterTextChanged(Editable s) {
         helpTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
         helpTextView.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteGrayText8));
         helpTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        helpTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("UserBioInfo", R.string.UserBioInfo)));
+        helpTextView.setText(LocaleController.getString("representativeAddressInfo", R.string.representativeAddressInfo));
         linearLayout.addView(helpTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 24, 10, 24, 0));
 
         TLRPC.TL_userFull userFull = MessagesController.getInstance(currentAccount).getUserFull(UserConfig.getInstance(currentAccount).getClientUserId());
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
index 2ca03a219..d7956239d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
@@ -34,7 +34,7 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.AlertDialog;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
index ad8f05316..a1b42ec50 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
@@ -29,7 +29,7 @@
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
index 7cfa8b42b..dab79a61e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
@@ -52,7 +52,7 @@
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
@@ -718,12 +718,13 @@ public void onNextPressed() {
                     if (!allowCall) {
                         permissionsItems.add(Manifest.permission.READ_PHONE_STATE);
                     }
+                    /*
                     if (!allowSms) {
                         permissionsItems.add(Manifest.permission.RECEIVE_SMS);
                         if (Build.VERSION.SDK_INT >= 23) {
                             permissionsItems.add(Manifest.permission.READ_SMS);
                         }
-                    }
+                    }*/
                     if (!permissionsItems.isEmpty()) {
                         SharedPreferences preferences = MessagesController.getGlobalMainSettings();
                         if (preferences.getBoolean("firstlogin", true) || getParentActivity().shouldShowRequestPermissionRationale(Manifest.permission.READ_PHONE_STATE) || getParentActivity().shouldShowRequestPermissionRationale(Manifest.permission.RECEIVE_SMS)) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java
index 278d3a314..2c6023df7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java
@@ -26,7 +26,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.ActionBar;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
index 518b031cb..73254eabe 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
@@ -39,7 +39,7 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelAdminLogActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelAdminLogActivity.java
index ffb2432b5..bab19ca2a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelAdminLogActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelAdminLogActivity.java
@@ -53,7 +53,7 @@
 import android.widget.Toast;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.BuildConfig;
+import com.lunamint.lunagram.BuildConfig;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.ContactsController;
@@ -67,7 +67,7 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.browser.Browser;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelCreateActivity.java
index e0e04b8e6..a777e5bd7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelCreateActivity.java
@@ -38,7 +38,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditActivity.java
index f97d147d9..b63ba67ea 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditActivity.java
@@ -29,7 +29,7 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditInfoActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditInfoActivity.java
index f0d8cd2fb..7f0928bca 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditInfoActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditInfoActivity.java
@@ -39,7 +39,7 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelIntroActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelIntroActivity.java
index 91066a301..c230c011e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelIntroActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelIntroActivity.java
@@ -20,7 +20,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelPermissionsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelPermissionsActivity.java
index 2c7cd0fd9..4247e5c97 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelPermissionsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelPermissionsActivity.java
@@ -19,7 +19,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelRightsEditActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelRightsEditActivity.java
index 792336ba0..2abd505b0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelRightsEditActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelRightsEditActivity.java
@@ -25,7 +25,7 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelUsersActivity.java
index 79dbf77d9..3bb4c1e3c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelUsersActivity.java
@@ -35,7 +35,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.messenger.Utilities;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index e72a2321f..748e23949 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -23,9 +23,7 @@
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
-import android.content.res.AssetFileDescriptor;
 import android.content.res.Configuration;
-import android.database.Cursor;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Outline;
@@ -41,9 +39,7 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
-import android.provider.ContactsContract;
 import android.provider.MediaStore;
-import android.support.annotation.NonNull;
 import android.support.v4.content.FileProvider;
 import android.text.Spannable;
 import android.text.SpannableString;
@@ -54,7 +50,6 @@
 import android.text.style.ClickableSpan;
 import android.text.style.ForegroundColorSpan;
 import android.text.style.URLSpan;
-import android.util.Base64;
 import android.util.LongSparseArray;
 import android.util.SparseArray;
 import android.util.SparseBooleanArray;
@@ -80,7 +75,9 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.PhoneFormat.PhoneFormat;
-import com.telemint.messenger.BuildConfig;
+
+import com.lunamint.lunagram.BuildConfig;
+
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.DataQuery;
@@ -100,7 +97,6 @@
 import org.telegram.messenger.browser.Browser;
 import org.telegram.messenger.exoplayer2.ui.AspectRatioFrameLayout;
 import org.telegram.messenger.support.SparseLongArray;
-import org.telegram.messenger.support.widget.DefaultItemAnimator;
 import org.telegram.messenger.support.widget.GridLayoutManager;
 import org.telegram.messenger.support.widget.GridLayoutManagerFixed;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
@@ -117,7 +113,14 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.SendCoinActivity;
+import com.lunamint.lunagram.ui.TransactionDetailActivity;
+import com.lunamint.wallet.WalletManager;
+import com.lunamint.wallet.model.LMessage;
+import com.lunamint.wallet.utils.Parser;
+
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.ActionBarLayout;
 import org.telegram.ui.ActionBar.AlertDialog;
@@ -148,7 +151,6 @@
 import org.telegram.ui.Components.ChatAttachAlert;
 import org.telegram.ui.Components.ChatAvatarContainer;
 import org.telegram.ui.Components.ChatBigEmptyView;
-import org.telegram.ui.Components.ChatItemAnimator;
 import org.telegram.ui.Components.CombinedDrawable;
 import org.telegram.ui.Components.CorrectlyMeasuringTextView;
 import org.telegram.ui.Components.EmbedBottomSheet;
@@ -176,7 +178,6 @@
 
 import java.io.BufferedWriter;
 import java.io.File;
-import java.io.FileInputStream;
 import java.io.FileWriter;
 import java.net.URLDecoder;
 import java.util.ArrayList;
@@ -379,13 +380,13 @@
     private HashMap<String, ArrayList<MessageObject>> messagesByDays = new HashMap<>();
     protected ArrayList<MessageObject> messages = new ArrayList<>();
     private LongSparseArray<MessageObject.GroupedMessages> groupedMessagesMap = new LongSparseArray<>();
-    private int maxMessageId[] = new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE};
-    private int minMessageId[] = new int[] {Integer.MIN_VALUE, Integer.MIN_VALUE};
-    private int maxDate[] = new int[] {Integer.MIN_VALUE, Integer.MIN_VALUE};
+    private int maxMessageId[] = new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE};
+    private int minMessageId[] = new int[]{Integer.MIN_VALUE, Integer.MIN_VALUE};
+    private int maxDate[] = new int[]{Integer.MIN_VALUE, Integer.MIN_VALUE};
     private int minDate[] = new int[2];
     private boolean endReached[] = new boolean[2];
     private boolean cacheEndReached[] = new boolean[2];
-    private boolean forwardEndReached[] = new boolean[] {true, true};
+    private boolean forwardEndReached[] = new boolean[]{true, true};
     private boolean loading;
     private boolean firstLoading = true;
     private boolean firstUnreadSent = false;
@@ -1206,7 +1207,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     SendMessagesHelper.getInstance(currentAccount).sendMessage("/settings", dialog_id, null, null, false, null, null, null);
                 } else if (id == search) {
                     openSearchWithText(null);
-                } else if(id == call) {
+                } else if (id == call) {
                     if (currentUser != null && getParentActivity() != null) {
                         VoIPHelper.startCall(currentUser, getParentActivity(), MessagesController.getInstance(currentAccount).getUserFull(currentUser.id));
                     }
@@ -4924,7 +4925,7 @@ private void checkScrollForLoad(boolean scroll) {
             int checkLoadCount;
             if (scroll) {
                 checkLoadCount = 25;
-            } else  {
+            } else {
                 checkLoadCount = 5;
             }
             if (totalItemCount - firstVisibleItem - visibleItemCount <= checkLoadCount && !loading) {
@@ -5336,7 +5337,7 @@ private void checkBotKeyboard() {
             chatActivityEnterView.setButtons(botButtons);
         }
     }
-    
+
     public void hideFieldPanel() {
         showFieldPanel(false, null, null, null, null, false);
     }
@@ -5871,7 +5872,7 @@ private void updateMessagesVisisblePart(boolean inLayout) {
                 roundVideoContainer.setTranslationY(-AndroidUtilities.roundMessageSize - 100);
                 fragmentView.invalidate();
                 MessageObject messageObject = MediaController.getInstance().getPlayingMessageObject();
-                if (messageObject != null && messageObject.isRoundVideo() && messageObject.eventId == 0 &&checkTextureViewPosition) {
+                if (messageObject != null && messageObject.isRoundVideo() && messageObject.eventId == 0 && checkTextureViewPosition) {
                     MediaController.getInstance().setCurrentRoundVisible(false);
                 }
             } else {
@@ -9956,8 +9957,6 @@ protected void setInPreviewMode(boolean value) {
         }
 
 
-
-
         updateBottomOverlay();
     }
 
@@ -10085,13 +10084,13 @@ public void onPause() {
             chatActivityEnterView.setFieldFocused(false);
         }
         if (chatAttachAlert != null) {
-            if (!ignoreAttachOnPause){
+            if (!ignoreAttachOnPause) {
                 chatAttachAlert.onPause();
             } else {
                 ignoreAttachOnPause = false;
             }
         }
-        CharSequence[] message = new CharSequence[] {draftMessage};
+        CharSequence[] message = new CharSequence[]{draftMessage};
         ArrayList<TLRPC.MessageEntity> entities = DataQuery.getInstance(currentAccount).getEntities(message);
         DataQuery.getInstance(currentAccount).saveDraft(dialog_id, message[0], entities, replyMessage != null ? replyMessage.messageOwner : null, !searchWebpage);
 
@@ -10428,7 +10427,7 @@ private void createDeleteMessagesAlert(final MessageObject finalSelectedObject,
             }
             if (user != null && user.id != UserConfig.getInstance(currentAccount).getClientUserId() && loadParticipant != 2) {
                 if (loadParticipant == 1 && !currentChat.creator) {
-                    final AlertDialog progressDialog[] = new AlertDialog[] {new AlertDialog(getParentActivity(), 1)};
+                    final AlertDialog progressDialog[] = new AlertDialog[]{new AlertDialog(getParentActivity(), 1)};
 
                     TLRPC.TL_channels_getParticipant req = new TLRPC.TL_channels_getParticipant();
                     req.channel = MessagesController.getInputChannel(currentChat);
@@ -10785,7 +10784,7 @@ private void createMenu(View v, boolean single, boolean listView, boolean search
                             TLRPC.TL_messageActionPhoneCall call = (TLRPC.TL_messageActionPhoneCall) message.messageOwner.action;
                             items.add((call.reason instanceof TLRPC.TL_phoneCallDiscardReasonMissed || call.reason instanceof TLRPC.TL_phoneCallDiscardReasonBusy) && !message.isOutOwner() ? LocaleController.getString("CallBack", R.string.CallBack) : LocaleController.getString("CallAgain", R.string.CallAgain));
                             options.add(18);
-                            if(VoIPHelper.canRateCall(call)){
+                            if (VoIPHelper.canRateCall(call)) {
                                 items.add(LocaleController.getString("CallMessageReportProblem", R.string.CallMessageReportProblem));
                                 options.add(19);
                             }
@@ -11062,7 +11061,7 @@ private void startEditingMessageObject(MessageObject messageObject) {
         checkEditTimer();
 
         chatActivityEnterView.setAllowStickersAndGifs(false, false);
-        
+
         updatePinnedMessageView(true);
         updateVisibleRows();
 
@@ -11421,12 +11420,12 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 /*if (!TextUtils.isEmpty(selectedObject.messageOwner.media.vcard)) {
                     openVCard(selectedObject.messageOwner.media.vcard, selectedObject.messageOwner.media.first_name, selectedObject.messageOwner.media.last_name);
                 } else {*/
-                    Bundle args = new Bundle();
-                    args.putInt("user_id", selectedObject.messageOwner.media.user_id);
-                    args.putString("phone", selectedObject.messageOwner.media.phone_number);
-                    args.putBoolean("addContact", true);
-                    presentFragment(new ContactAddActivity(args));
-                    break;
+                Bundle args = new Bundle();
+                args.putInt("user_id", selectedObject.messageOwner.media.user_id);
+                args.putString("phone", selectedObject.messageOwner.media.phone_number);
+                args.putBoolean("addContact", true);
+                presentFragment(new ContactAddActivity(args));
+                break;
                 //}
             }
             case 16: {
@@ -12367,6 +12366,16 @@ public void didPressedInstantButton(ChatMessageCell cell, int type) {
                             }
                         } else if (type == 5) {
                             openVCard(messageObject.messageOwner.media.vcard, messageObject.messageOwner.media.first_name, messageObject.messageOwner.media.last_name);
+                        } else if (type == 26656) {
+                            if (cell.getMessageObject().lm != null) {
+                                if (!WalletManager.getInstance().isLowerMinAppVersion) {
+                                    showSendCoinActivity(cell.getMessageObject().lm);
+                                } else {
+                                    Toast.makeText(getParentActivity(), LocaleController.getString("lowerAppVersionError", R.string.lowerAppVersionError), Toast.LENGTH_LONG).show();
+                                }
+                            } else {
+                                showTransactionDetailActivity(cell.getMessageObject().messageText.toString());
+                            }
                         } else {
                             if (messageObject.messageOwner.media != null && messageObject.messageOwner.media.webpage != null) {
                                 Browser.openUrl(getParentActivity(), messageObject.messageOwner.media.webpage.url);
@@ -12825,6 +12834,24 @@ public void notifyItemRangeRemoved(int positionStart, int itemCount) {
         }
     }
 
+    //Todo: translation
+    private void showTransactionDetailActivity(String msg) {
+        String hash = Parser.getTxHashFromTelegramMsg(msg);
+        if (hash.equals("")) {
+            Toast.makeText(getParentActivity(), "Failed to get the hash.", Toast.LENGTH_LONG).show();
+            return;
+        }
+        Intent intent = new Intent(getParentActivity(), TransactionDetailActivity.class);
+        intent.putExtra("hash", hash);
+        getParentActivity().startActivity(intent);
+    }
+
+    private void showSendCoinActivity(LMessage lmsg) {
+        Intent intent = new Intent(getParentActivity(), SendCoinActivity.class);
+        intent.putExtra("lm", lmsg);
+        getParentActivity().startActivity(intent);
+    }
+
     @Override
     public ThemeDescription[] getThemeDescriptions() {
         ThemeDescription.ThemeDescriptionDelegate selectedBackgroundDelegate = new ThemeDescription.ThemeDescriptionDelegate() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatUsersActivity.java
index 331b9b7c4..ed77d4ba6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatUsersActivity.java
@@ -23,7 +23,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CommonGroupsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CommonGroupsActivity.java
index 3c1c4fba7..df31aa73d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/CommonGroupsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/CommonGroupsActivity.java
@@ -19,7 +19,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.ConnectionsManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AdminLogFilterAlert.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AdminLogFilterAlert.java
index 70eb9ba6c..a8d4cc65b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AdminLogFilterAlert.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AdminLogFilterAlert.java
@@ -25,7 +25,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
index c8f76d12f..c23955229 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
@@ -29,7 +29,7 @@
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.NotificationsController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SecretChatHelper;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.UserConfig;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AudioPlayerAlert.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AudioPlayerAlert.java
index 66c4c1c3a..c46e8ae54 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AudioPlayerAlert.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AudioPlayerAlert.java
@@ -40,7 +40,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
-import com.telemint.messenger.BuildConfig;
+import com.lunamint.lunagram.BuildConfig;
 import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.DownloadController;
@@ -52,7 +52,7 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.UserConfig;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/BetterRatingView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/BetterRatingView.java
index 67db8bdd5..77a631e88 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/BetterRatingView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/BetterRatingView.java
@@ -9,7 +9,7 @@
 import android.view.View;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 
 /**
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/BlockingUpdateView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/BlockingUpdateView.java
index c028afa4b..a11571793 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/BlockingUpdateView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/BlockingUpdateView.java
@@ -27,13 +27,13 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
-import com.telemint.messenger.BuildConfig;
+import com.lunamint.lunagram.BuildConfig;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.browser.Browser;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
index b69ee9d45..9712df7fb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
@@ -72,7 +72,7 @@
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.VideoEditedInfo;
 import org.telegram.messenger.camera.CameraController;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java
index 9fd08dba4..73c6ddc3b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java
@@ -69,7 +69,7 @@
 import org.telegram.messenger.VideoEditedInfo;
 import org.telegram.messenger.camera.*;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.AlertDialog;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAvatarContainer.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAvatarContainer.java
index dcfeb460a..ed0cae692 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAvatarContainer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAvatarContainer.java
@@ -24,7 +24,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.tgnet.ConnectionsManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatBigEmptyView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatBigEmptyView.java
index db86767c1..a579e8e2f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatBigEmptyView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatBigEmptyView.java
@@ -19,7 +19,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 
 import java.util.ArrayList;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatItemAnimator.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatItemAnimator.java
index 671b6d8b1..67b30aa27 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatItemAnimator.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatItemAnimator.java
@@ -360,7 +360,6 @@ public void onAnimationEnd(Animator animator) {
     public boolean animateChange(final ViewHolder oldHolder, final ViewHolder newHolder,
                                  int fromX, int fromY, int toX, int toY) {
 		/*if(mAddAnimations.remove(oldHolder)){
-			Log.w("11", "old holder is already animating addition!");
 			final ObjectAnimator anim=(ObjectAnimator) oldHolder.itemView.getTag(R.id.tag_current_item_animation);
 			if(anim!=null){
 				anim.setTarget(newHolder.itemView);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropRotationWheel.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropRotationWheel.java
index ffdabd745..8ab411e8b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropRotationWheel.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropRotationWheel.java
@@ -15,7 +15,7 @@
 import android.widget.TextView;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.LayoutHelper;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropView.java
index f28ba5c35..ff3862226 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropView.java
@@ -20,7 +20,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.AlertDialog;
 
 import static android.graphics.Paint.FILTER_BITMAP_FLAG;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextBoldCursor.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextBoldCursor.java
index 2c67c3599..64a3a8a9b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextBoldCursor.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextBoldCursor.java
@@ -31,7 +31,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextCaption.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextCaption.java
index 269628fa6..124037aa2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextCaption.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EditTextCaption.java
@@ -34,7 +34,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.Theme;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmbedBottomSheet.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmbedBottomSheet.java
index 3aef8c866..355ef1a42 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmbedBottomSheet.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmbedBottomSheet.java
@@ -55,7 +55,7 @@
 import org.telegram.messenger.BringAppForegroundService;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.browser.Browser;
 import org.telegram.ui.ActionBar.AlertDialog;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
index 1faf26f0b..2cdf7a811 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
@@ -65,7 +65,7 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.support.widget.GridLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmptyTextProgressView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmptyTextProgressView.java
index 1d14845ab..695ca0638 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmptyTextProgressView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmptyTextProgressView.java
@@ -18,7 +18,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 
 public class EmptyTextProgressView extends FrameLayout {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/FragmentContextView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/FragmentContextView.java
index 03b9327dd..db45ec797 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/FragmentContextView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/FragmentContextView.java
@@ -38,7 +38,7 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/GroupCreateSpan.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/GroupCreateSpan.java
index 0ceddad02..a2c401975 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/GroupCreateSpan.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/GroupCreateSpan.java
@@ -25,7 +25,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.ImageReceiver;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserObject;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ImageUpdater.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ImageUpdater.java
index 1f47c796a..af9182bad 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ImageUpdater.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ImageUpdater.java
@@ -21,7 +21,7 @@
 import android.support.v4.content.FileProvider;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.BuildConfig;
+import com.lunamint.lunagram.BuildConfig;
 import org.telegram.messenger.ImageLoader;
 import org.telegram.messenger.MediaController;
 import org.telegram.messenger.SendMessagesHelper;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/InstantCameraView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/InstantCameraView.java
index 8e0701db7..4c79db7a7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/InstantCameraView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/InstantCameraView.java
@@ -61,7 +61,7 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MediaController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.VideoEditedInfo;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/JoinGroupAlert.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/JoinGroupAlert.java
index e6f76917e..069ed6250 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/JoinGroupAlert.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/JoinGroupAlert.java
@@ -21,7 +21,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.ConnectionsManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java
index 9eac795a4..69c8cad42 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java
@@ -13,6 +13,7 @@
 import android.graphics.Paint;
 import android.graphics.Paint.Style;
 import android.graphics.drawable.Drawable;
+import android.support.v4.app.ActivityCompat;
 import android.support.v4.view.ViewPager;
 import android.support.v4.view.ViewPager.OnPageChangeListener;
 import android.view.View;
@@ -118,7 +119,7 @@ public View getTab(int position) {
     }
 
     private void addIconTab(final int position, Drawable drawable) {
-        ImageView tab = new ImageView(getContext()) {
+        ImageView tab = new android.support.v7.widget.AppCompatImageView(getContext()) {
             @Override
             protected void onDraw(Canvas canvas) {
                 super.onDraw(canvas);
@@ -267,7 +268,7 @@ public void setIndicatorColor(int indicatorColor) {
     }
 
     public void setIndicatorColorResource(int resId) {
-        this.indicatorColor = getResources().getColor(resId);
+        this.indicatorColor = ActivityCompat.getColor(getContext(), resId);
         invalidate();
     }
 
@@ -290,7 +291,7 @@ public void setUnderlineColor(int underlineColor) {
     }
 
     public void setUnderlineColorResource(int resId) {
-        this.underlineColor = getResources().getColor(resId);
+        this.underlineColor = ActivityCompat.getColor(getContext(), resId);
         invalidate();
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Brush.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Brush.java
index 6fadceaea..33f51a764 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Brush.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Brush.java
@@ -4,7 +4,7 @@
 import android.graphics.BitmapFactory;
 
 import org.telegram.messenger.ApplicationLoader;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 public interface Brush {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/ColorPicker.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/ColorPicker.java
index b265f1115..71c2e028d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/ColorPicker.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/Views/ColorPicker.java
@@ -19,7 +19,7 @@
 import android.widget.ImageView;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.Paint.Swatch;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
index e1061c03e..a8a02eb72 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
@@ -52,7 +52,7 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.support.fingerprint.FingerprintManagerCompat;
 import org.telegram.ui.ActionBar.AlertDialog;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
index c890b7516..6cc5ecac3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
@@ -39,7 +39,7 @@
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.messenger.DispatchQueue;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Cells.PhotoEditRadioCell;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPaintView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPaintView.java
index 583878ea9..dcae3e2ed 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPaintView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPaintView.java
@@ -37,7 +37,7 @@
 import org.telegram.messenger.DispatchQueue;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.ActionBar;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java
index 26cf340b8..a1cf59b27 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java
@@ -37,7 +37,7 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PickerBottomLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PickerBottomLayout.java
index 6e34e2137..a6b77f062 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PickerBottomLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PickerBottomLayout.java
@@ -19,7 +19,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 
 public class PickerBottomLayout extends FrameLayout {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PickerBottomLayoutViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PickerBottomLayoutViewer.java
index 661acf54c..b14097631 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PickerBottomLayoutViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PickerBottomLayoutViewer.java
@@ -17,7 +17,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 
 public class PickerBottomLayoutViewer extends FrameLayout {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PipVideoView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PipVideoView.java
index 7368c37ea..992bbe234 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PipVideoView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PipVideoView.java
@@ -35,7 +35,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.exoplayer2.ui.AspectRatioFrameLayout;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.PhotoViewer;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ProxyDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ProxyDrawable.java
index de58b6953..285c95896 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ProxyDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ProxyDrawable.java
@@ -10,7 +10,7 @@
 import android.os.SystemClock;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 
 public class ProxyDrawable extends Drawable {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ScrollSlidingTabStrip.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ScrollSlidingTabStrip.java
index 4aa1b52a3..e8281fb8c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ScrollSlidingTabStrip.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ScrollSlidingTabStrip.java
@@ -13,6 +13,7 @@
 import android.graphics.Paint;
 import android.graphics.Paint.Style;
 import android.graphics.drawable.Drawable;
+import android.support.v4.app.ActivityCompat;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.View;
@@ -335,7 +336,7 @@ public void setUnderlineColor(int value) {
     }
 
     public void setUnderlineColorResource(int resId) {
-        underlineColor = getResources().getColor(resId);
+        underlineColor = ActivityCompat.getColor(getContext(), resId);
         invalidate();
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ShareAlert.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ShareAlert.java
index bbfdc0bfa..fb3a3b3ee 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ShareAlert.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ShareAlert.java
@@ -48,7 +48,7 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.support.widget.GridLayoutManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ShareLocationDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ShareLocationDrawable.java
index 7def54a99..53c7e5984 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ShareLocationDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ShareLocationDrawable.java
@@ -15,7 +15,7 @@
 import android.graphics.drawable.Drawable;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 public class ShareLocationDrawable extends Drawable {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SharingLocationsAlert.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SharingLocationsAlert.java
index 3f0869159..c51bc7a42 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SharingLocationsAlert.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/SharingLocationsAlert.java
@@ -27,7 +27,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.LocationController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ShutterButton.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ShutterButton.java
index eb308a7f1..083d68bfb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ShutterButton.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ShutterButton.java
@@ -19,7 +19,7 @@
 import android.view.animation.DecelerateInterpolator;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 public class ShutterButton extends View {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/StickerMasksView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/StickerMasksView.java
index e416e91cf..98714cb2b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/StickerMasksView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/StickerMasksView.java
@@ -24,7 +24,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.support.widget.GridLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersAlert.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersAlert.java
index 280c6c350..f13ac8c11 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersAlert.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersAlert.java
@@ -42,7 +42,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.GridLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.ConnectionsManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersArchiveAlert.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersArchiveAlert.java
index eecbc5550..dbf5528c1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersArchiveAlert.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersArchiveAlert.java
@@ -19,7 +19,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.DataQuery;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Switch.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Switch.java
index 37bef658a..d8be67d12 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Switch.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Switch.java
@@ -35,7 +35,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 
 public class Switch extends CompoundButton {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/TermsOfServiceView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/TermsOfServiceView.java
index 9946ce902..429da713c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/TermsOfServiceView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/TermsOfServiceView.java
@@ -20,7 +20,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ThemeEditorView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ThemeEditorView.java
index f5d5b7767..1d61fbb5b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ThemeEditorView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ThemeEditorView.java
@@ -53,7 +53,7 @@
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/UpdateAppAlertDialog.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/UpdateAppAlertDialog.java
index cc220c90b..a021e6bf9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/UpdateAppAlertDialog.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/UpdateAppAlertDialog.java
@@ -15,7 +15,7 @@
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.browser.Browser;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.AlertDialog;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelinePlayView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelinePlayView.java
index 976337f56..8a6a955ee 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelinePlayView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelinePlayView.java
@@ -25,7 +25,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 import java.util.ArrayList;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/WallpaperUpdater.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/WallpaperUpdater.java
index de07be2da..9eaa90776 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/WallpaperUpdater.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/WallpaperUpdater.java
@@ -19,12 +19,12 @@
 import android.support.v4.content.FileProvider;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.BuildConfig;
+import com.lunamint.lunagram.BuildConfig;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.ImageLoader;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.ActionBar.AlertDialog;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/WebPlayerView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/WebPlayerView.java
index bfa5f1924..f46aa9b2f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/WebPlayerView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/WebPlayerView.java
@@ -52,7 +52,7 @@
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.ImageReceiver;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.exoplayer2.C;
 import org.telegram.messenger.exoplayer2.ExoPlayer;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/voip/VoIPHelper.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/voip/VoIPHelper.java
index 4011f0fdc..56cf53653 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/voip/VoIPHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/voip/VoIPHelper.java
@@ -27,7 +27,7 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.voip.VoIPService;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
index 99e55cea0..1cfdf92c0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
@@ -32,7 +32,7 @@
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index c8c8cd380..4ce417e32 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -48,7 +48,7 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ConvertGroupActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ConvertGroupActivity.java
index 2a4defd6e..84fcc4b22 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ConvertGroupActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ConvertGroupActivity.java
@@ -19,7 +19,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.ui.ActionBar.ActionBar;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
index e76e33af0..500ec26bc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
@@ -18,7 +18,7 @@
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DataAutoDownloadActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DataAutoDownloadActivity.java
index 18f1a1ea9..59f902002 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DataAutoDownloadActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DataAutoDownloadActivity.java
@@ -19,7 +19,7 @@
 import org.telegram.messenger.DownloadController;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.ui.ActionBar.ActionBar;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DataSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DataSettingsActivity.java
index 5d840e045..3687f096b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DataSettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DataSettingsActivity.java
@@ -25,7 +25,7 @@
 import org.telegram.messenger.DownloadController;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DataUsageActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DataUsageActivity.java
index 2f5242fe4..d73488671 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DataUsageActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DataUsageActivity.java
@@ -17,7 +17,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.StatsController;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 34b2643fc..7fa4a982f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -20,6 +20,7 @@
 import android.app.Dialog;
 import android.content.Context;
 import android.content.DialogInterface;
+import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
 import android.content.res.Configuration;
@@ -30,6 +31,7 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.support.design.widget.TabLayout;
+import android.support.v4.app.ActivityCompat;
 import android.support.v4.view.ViewPager;
 import android.text.TextUtils;
 import android.util.TypedValue;
@@ -67,8 +69,19 @@
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
-import com.telemint.ui.adapter.MainTabAdapter;
+
+import com.lunamint.lunagram.BuildConfig;
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.ManageWalletActivity;
+import com.lunamint.lunagram.ui.adapter.MainTabAdapter;
+import com.lunamint.lunagram.ui.component.SwipeControlViewPager;
+import com.lunamint.lunagram.ui.view.WalletView;
+import com.lunamint.wallet.ApiUtils;
+import com.lunamint.wallet.LunaService;
+import com.lunamint.wallet.WalletManager;
+import com.lunamint.wallet.model.Coin;
+import com.lunamint.wallet.model.LunaStatus;
+import com.lunamint.wallet.utils.NetworkUtil;
 
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.AlertDialog;
@@ -114,8 +127,13 @@
 
 import java.util.ArrayList;
 
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
 public class DialogsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-    
+
+    private MainTabAdapter mainTabAdapter;
     private RecyclerListView listView;
     private LinearLayoutManager layoutManager;
     private DialogsAdapter dialogsAdapter;
@@ -137,6 +155,9 @@
     private ChatActivityEnterView commentView;
     private ActionBarMenuItem switchItem;
 
+    private ActionBarMenuItem searchItem;
+    private ActionBarMenuItem settingWalletItem;
+
     private AlertDialog permissionDialog;
     private boolean askAboutContacts = true;
 
@@ -221,6 +242,13 @@ public boolean onFragmentCreate() {
             NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.dialogsUnreadCounterChanged);
 
             NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didSetPasscode);
+
+            NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.transactionCreated);
+            NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.accountChanged);
+            NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.balanceChanged);
+            NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.stakingChanged);
+            NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.sentCoin);
+            NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.nodeChanged);
         }
 
         if (!dialogsLoaded[currentAccount]) {
@@ -262,6 +290,13 @@ public void onFragmentDestroy() {
             NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.dialogsUnreadCounterChanged);
 
             NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetPasscode);
+
+            NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.transactionCreated);
+            NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.accountChanged);
+            NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.balanceChanged);
+            NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.stakingChanged);
+            NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.sentCoin);
+            NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.nodeChanged);
         }
         if (commentView != null) {
             commentView.onDestroy();
@@ -289,7 +324,7 @@ public void run() {
             updatePasscodeButton();
             updateProxyButton(false);
         }
-        final ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
+        searchItem = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
             @Override
             public void onSearchExpand() {
                 searching = true;
@@ -375,7 +410,7 @@ public void onTextChanged(EditText editText) {
                 }
             }
         });
-        item.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
+        searchItem.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
         if (onlySelect) {
             actionBar.setBackButtonImage(R.drawable.ic_ab_back);
             if (dialogsType == 3 && selectAlertString == null) {
@@ -396,6 +431,17 @@ public void onTextChanged(EditText editText) {
             }
             actionBar.setSupportsHolidayImage(true);
         }
+
+        /*
+        settingWalletItem = menu.addItem(3, R.drawable.icon_setting_wallet);
+        settingWalletItem.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                showSettingWalletActivity();
+            }
+        });
+        settingWalletItem.setVisibility(View.GONE);*/
+
         actionBar.setTitleActionRunnable(new Runnable() {
             @Override
             public void run() {
@@ -434,7 +480,7 @@ public void run() {
             }
         }
         actionBar.setAllowOverlayTitle(true);
-        actionBar.setBackgroundColor(context.getResources().getColor(R.color.actionbar_bg));
+        actionBar.setBackgroundColor(ActivityCompat.getColor(context, R.color.actionbar_bg));
 
 
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
@@ -603,32 +649,36 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
         };
         fragmentView = contentView;
 
-
-
         LinearLayout mainLayout = new LinearLayout(context);
         mainLayout.setOrientation(LinearLayout.VERTICAL);
         contentView.addView(mainLayout);
 
         final TabLayout tabLayout = new TabLayout(context);
-        tabLayout.setSelectedTabIndicatorColor(context.getResources().getColor(R.color.tab_indicator));
-        tabLayout.setTabTextColors(context.getResources().getColor(R.color.tab_text),context.getResources().getColor(R.color.tab_text_selected));
+        tabLayout.setSelectedTabIndicatorColor(ActivityCompat.getColor(context, R.color.tab_indicator));
+        tabLayout.setTabTextColors(ActivityCompat.getColor(context, R.color.tab_text), ActivityCompat.getColor(context, R.color.tab_text_selected));
         mainLayout.addView(tabLayout);
 
 
-        ViewPager viewPager = new ViewPager(context);
+        SwipeControlViewPager viewPager = new SwipeControlViewPager(context);
         mainLayout.addView(viewPager);
-        viewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {
+        viewPager.setOffscreenPageLimit(2);
+        viewPager.setSwipeEnabled(true);
+        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
             @Override
             public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
-
             }
 
             @Override
             public void onPageSelected(int position) {
-                if(position == 2){
+                if (position == 0) {
                     floatingButton.setVisibility(View.VISIBLE);
-                }else{
+                    searchItem.setVisibility(View.VISIBLE);
+//                    settingWalletItem.setVisibility(View.GONE);
+                } else {
+                    actionBar.closeSearchField(true);
                     floatingButton.setVisibility(View.GONE);
+                    searchItem.setVisibility(View.GONE);
+//                    settingWalletItem.setVisibility(View.VISIBLE);
                 }
             }
 
@@ -646,10 +696,13 @@ public void onPageScrollStateChanged(int state) {
         listView.setLayoutAnimation(null);
         listView.setTag(4);
 
-        viewPager.setAdapter(new MainTabAdapter(context, this, listView));
-        tabLayout.getTabAt(0).setText(context.getString(R.string.chat));
-        tabLayout.getTabAt(1).setText(context.getString(R.string.wallet));
 
+        WalletView walletView = new WalletView(context);
+
+        mainTabAdapter = new MainTabAdapter(context, listView, walletView);
+        viewPager.setAdapter(mainTabAdapter);
+        tabLayout.getTabAt(0).setText(LocaleController.getString("chat", R.string.chat));
+        tabLayout.getTabAt(1).setText(LocaleController.getString("wallet", R.string.wallet));
 
         layoutManager = new LinearLayoutManager(context) {
             @Override
@@ -1193,7 +1246,6 @@ public void onClick(View view) {
                 }
             }
         });
-
         unreadFloatingButton = new ImageView(context);
         unreadFloatingButton.setScaleType(ImageView.ScaleType.CENTER);
 
@@ -1534,6 +1586,7 @@ public void needShowMediaBanHint() {
     @Override
     public void onResume() {
         super.onResume();
+
         if (dialogsAdapter != null) {
             dialogsAdapter.notifyDataSetChanged();
         }
@@ -1555,6 +1608,7 @@ public void run(int param) {
                                 askAboutContacts = param != 0;
                                 MessagesController.getGlobalNotificationsSettings().edit().putBoolean("askAboutContacts", askAboutContacts).commit();
                                 askForPermissons(false);
+                                getLunaStatus();
                             }
                         });
                         showDialog(permissionDialog = builder.create());
@@ -1562,14 +1616,25 @@ public void run(int param) {
                         AlertDialog.Builder builder = new AlertDialog.Builder(activity);
                         builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                         builder.setMessage(LocaleController.getString("PermissionStorage", R.string.PermissionStorage));
-                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                getLunaStatus();
+                            }
+                        });
                         showDialog(permissionDialog = builder.create());
                     } else {
                         askForPermissons(true);
                     }
+                } else {
+                    getLunaStatus();
                 }
             }
+        } else {
+            getLunaStatus();
         }
+
+        if (mainTabAdapter != null) mainTabAdapter.onResume();
     }
 
     @Override
@@ -1580,6 +1645,26 @@ public void onPause() {
         }
     }
 
+    private void onTransactionCreated(String tx) {
+        if (mainTabAdapter != null) mainTabAdapter.onTransactionCreated(tx);
+    }
+
+    private void onAccountChanged() {
+        if (mainTabAdapter != null) mainTabAdapter.onAccountChanged();
+    }
+
+    private void onBalanceChanged(Response<ArrayList<Coin>> response) {
+        if (mainTabAdapter != null) mainTabAdapter.onBalanceChanged(response);
+    }
+
+    private void onStakingChanged() {
+        if (mainTabAdapter != null) mainTabAdapter.onStakingChanged();
+    }
+
+    private void onNodeChanged() {
+        if (mainTabAdapter != null) mainTabAdapter.onNodeChanged();
+    }
+
     private void checkUnreadCount(boolean animated) {
         if (!BuildVars.DEBUG_PRIVATE_VERSION) {
             return;
@@ -1938,9 +2023,26 @@ public void onAnimationEnd(Animator animation) {
                     }).start();
                 }
             }*/
+        } else if (id == NotificationCenter.transactionCreated) {
+            onTransactionCreated(((String) args[0]));
+        } else if (id == NotificationCenter.accountChanged) {
+            onAccountChanged();
+        } else if (id == NotificationCenter.balanceChanged) {
+            onBalanceChanged(((Response<ArrayList<Coin>>) args[0]));
+        } else if (id == NotificationCenter.stakingChanged) {
+            onStakingChanged();
+        } else if (id == NotificationCenter.sentCoin) {
+
+        } else if (id == NotificationCenter.nodeChanged) {
+            onNodeChanged();
         }
     }
 
+    private void showSettingWalletActivity() {
+        Intent intent = new Intent(getParentActivity(), ManageWalletActivity.class);
+        getParentActivity().startActivity(intent);
+    }
+
     private ArrayList<TLRPC.TL_dialog> getDialogsArray() {
         if (dialogsType == 0) {
             return MessagesController.getInstance(currentAccount).dialogs;
@@ -1954,6 +2056,59 @@ public void onAnimationEnd(Animator animation) {
         return null;
     }
 
+    private void getLunaStatus() {
+        Activity activity = getParentActivity();
+        if (activity != null) {
+            if (!NetworkUtil.isNetworkAvailable(getParentActivity()))
+                mainTabAdapter.showError(LocaleController.getString("unableNetworkError", R.string.unableNetworkError));
+
+            LunaService lunaService = ApiUtils.getLunaService();
+            lunaService.getStatus("android").enqueue(new Callback<LunaStatus>() {
+                @Override
+                public void onResponse(Call<LunaStatus> call, Response<LunaStatus> response) {
+                    if (response.code() == 200 && response.body() != null) {
+                        try {
+                            WalletManager.getInstance().activatedSend = response.body().getStatus().getActivatedSend();
+
+                            if (mainTabAdapter == null) return;
+                            if (response.body().getStatus().getIsMaintenance()) {
+                                mainTabAdapter.setMaintenance(true);
+                                mainTabAdapter.showError(LocaleController.getString("maintenance", R.string.maintenance) + "\n" + response.body().getStatus().getCompletionTime());
+                                WalletManager.getInstance().isLowerMinAppVersion = false;
+                            } else if (response.body().getVersion().getMinVersion() > BuildConfig.VERSION_CODE) {
+                                WalletManager.getInstance().isLowerMinAppVersion = true;
+                                mainTabAdapter.showError(LocaleController.getString("needUpdate", R.string.needUpdate));
+                                mainTabAdapter.setMaintenance(false);
+                            } else {
+                                WalletManager.getInstance().isLowerMinAppVersion = false;
+                                mainTabAdapter.setMaintenance(false);
+                            }
+                        } catch (NullPointerException e) {
+                            e.printStackTrace();
+                            WalletManager.getInstance().isLowerMinAppVersion = false;
+                            mainTabAdapter.setMaintenance(false);
+                            mainTabAdapter.showError(LocaleController.getString("unknownError", R.string.unknownError) + "\nHttp status " + response.code());
+                        }
+                    } else {
+                        WalletManager.getInstance().isLowerMinAppVersion = false;
+                        mainTabAdapter.setMaintenance(false);
+                        mainTabAdapter.showError(LocaleController.getString("internalServerError", R.string.internalServerError));
+                    }
+                }
+
+                @Override
+                public void onFailure(Call<LunaStatus> call, Throwable t) {
+                    if (mainTabAdapter == null) return;
+                    WalletManager.getInstance().isLowerMinAppVersion = false;
+                    mainTabAdapter.setMaintenance(false);
+                    if (!NetworkUtil.isNetworkAvailable(getParentActivity()))
+                        mainTabAdapter.showError(LocaleController.getString("unableNetworkError", R.string.unableNetworkError));
+
+                }
+            });
+        }
+    }
+
     public void setSideMenu(RecyclerView recyclerView) {
         sideMenu = recyclerView;
         sideMenu.setBackgroundColor(Theme.getColor(Theme.key_chats_menuBackground));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
index 38a693ac2..2ba4cbc41 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
@@ -30,7 +30,7 @@
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.ui.ActionBar.AlertDialog;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ExternalActionActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ExternalActionActivity.java
index 3febed8b0..3fcc8a9b3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ExternalActionActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ExternalActionActivity.java
@@ -33,7 +33,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.ConnectionsManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/FeaturedStickersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/FeaturedStickersActivity.java
index be4d5b966..669660865 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/FeaturedStickersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/FeaturedStickersActivity.java
@@ -17,7 +17,7 @@
 import org.telegram.messenger.DataQuery;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
index fbb311770..451fb8d72 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
@@ -50,7 +50,7 @@
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
index 5e1253973..e88625440 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
@@ -42,7 +42,7 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.Theme;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupInviteActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupInviteActivity.java
index bcac0f1cb..120284258 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupInviteActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupInviteActivity.java
@@ -24,7 +24,7 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.ConnectionsManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupStickersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupStickersActivity.java
index 234518631..c3a825114 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupStickersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupStickersActivity.java
@@ -42,7 +42,7 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.ConnectionsManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
index ebe2cffbd..66b72ea58 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
@@ -42,7 +42,7 @@
 import org.telegram.messenger.Utilities;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.ThemeDescription;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
index 36a253907..82abef63c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
@@ -52,7 +52,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
@@ -361,15 +361,12 @@ protected void onResume() {
             }
             justCreated = false;
         }
-        AndroidUtilities.checkForCrashes(this);
-        AndroidUtilities.checkForUpdates(this);
         ConnectionsManager.getInstance(currentAccount).setAppPaused(false, false);
     }
 
     @Override
     protected void onPause() {
         super.onPause();
-        AndroidUtilities.unregisterUpdates();
         ConnectionsManager.getInstance(currentAccount).setAppPaused(true, false);
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/InviteContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/InviteContactsActivity.java
index e5c7bcb73..76e8c720a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/InviteContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/InviteContactsActivity.java
@@ -43,7 +43,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MediaController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
index a0bdca3a6..3db982a5d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
@@ -19,7 +19,7 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index d89ae640b..8818980d4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -42,6 +42,8 @@
 import android.widget.RelativeLayout;
 import android.widget.Toast;
 
+import com.crashlytics.android.Crashlytics;
+import io.fabric.sdk.android.Fabric;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ChatObject;
@@ -63,7 +65,9 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+
+import com.google.firebase.analytics.FirebaseAnalytics;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.browser.Browser;
 import org.telegram.messenger.camera.CameraController;
 import org.telegram.messenger.support.widget.DefaultItemAnimator;
@@ -151,6 +155,8 @@
 
     private Runnable lockRunnable;
 
+    private FirebaseAnalytics mFirebaseAnalytics;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         ApplicationLoader.postInitApplication();
@@ -212,6 +218,10 @@ protected void onCreate(Bundle savedInstanceState) {
         }
 
         super.onCreate(savedInstanceState);
+
+        Fabric.with(this, new Crashlytics());
+        mFirebaseAnalytics = FirebaseAnalytics.getInstance(this);
+
         if (Build.VERSION.SDK_INT >= 24) {
             AndroidUtilities.isInMultiwindow = isInMultiWindowMode();
         }
@@ -2278,7 +2288,6 @@ public void run() {
             passcodeView.onPause();
         }
         ConnectionsManager.getInstance(currentAccount).setAppPaused(true, false);
-        AndroidUtilities.unregisterUpdates();
         if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) {
             PhotoViewer.getInstance().onPause();
         }
@@ -2379,8 +2388,6 @@ public void run() {
             }
             passcodeView.onResume();
         }
-        AndroidUtilities.checkForCrashes(this);
-        AndroidUtilities.checkForUpdates(this);
         ConnectionsManager.getInstance(currentAccount).setAppPaused(false, false);
         updateCurrentConnectionState(currentAccount);
         if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
index 8c1db6185..ab0b5dc6a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
@@ -78,7 +78,7 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index 36d0ebb1c..748c7699c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -61,7 +61,7 @@
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.SerializedData;
@@ -1078,6 +1078,7 @@ public void onNextPressed() {
                     if (!allowCall) {
                         permissionsItems.add(Manifest.permission.READ_PHONE_STATE);
                     }
+                    /*
                     if (!allowSms) {
                         permissionsItems.add(Manifest.permission.RECEIVE_SMS);
                         if (Build.VERSION.SDK_INT >= 23) {
@@ -1088,7 +1089,7 @@ public void onNextPressed() {
                         permissionsItems.add(Manifest.permission.CALL_PHONE);
                         permissionsItems.add(Manifest.permission.WRITE_CALL_LOG);
                         permissionsItems.add(Manifest.permission.READ_CALL_LOG);
-                    }
+                    }*/
                     boolean ok = true;
                     if (!permissionsItems.isEmpty()) {
                         SharedPreferences preferences = MessagesController.getGlobalMainSettings();
@@ -1250,12 +1251,13 @@ public void fillNumber() {
                             if (!allowCall) {
                                 permissionsShowItems.add(Manifest.permission.READ_PHONE_STATE);
                             }
+                            /*
                             if (!allowSms) {
                                 permissionsShowItems.add(Manifest.permission.RECEIVE_SMS);
                                 if (Build.VERSION.SDK_INT >= 23) {
                                     permissionsShowItems.add(Manifest.permission.READ_SMS);
                                 }
-                            }
+                            }*/
                             if (!permissionsShowItems.isEmpty()) {
                                 SharedPreferences preferences = MessagesController.getGlobalMainSettings();
                                 if (preferences.getBoolean("firstloginshow", true) || getParentActivity().shouldShowRequestPermissionRationale(Manifest.permission.READ_PHONE_STATE) || getParentActivity().shouldShowRequestPermissionRationale(Manifest.permission.RECEIVE_SMS)) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
index deb8468c6..314368c9d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
@@ -40,7 +40,7 @@
 import android.widget.TextView;
 
 import org.telegram.messenger.AndroidUtilities;
-import com.telemint.messenger.BuildConfig;
+import com.lunamint.lunagram.BuildConfig;
 import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.DataQuery;
 import org.telegram.messenger.LocaleController;
@@ -61,7 +61,7 @@
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MrzCameraActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MrzCameraActivity.java
index f038f923b..f50f7563f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MrzCameraActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MrzCameraActivity.java
@@ -19,7 +19,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MrzRecognizer;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.camera.CameraView;
 import org.telegram.messenger.camera.Size;
 import org.telegram.ui.ActionBar.ActionBar;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/NewContactActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/NewContactActivity.java
index 07a15be54..b6fad60a9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/NewContactActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/NewContactActivity.java
@@ -44,7 +44,7 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
index 1033b1f3f..a70ff07dc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
@@ -23,8 +23,6 @@
 import android.widget.FrameLayout;
 import android.widget.Toast;
 
-import com.telemint.messenger.R;
-
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.NotificationsController;
@@ -38,7 +36,7 @@
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.ActionBar.ThemeDescription;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java
index 45d292796..8beb3c6c6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java
@@ -43,7 +43,7 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PassportActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PassportActivity.java
index 1fd33c7fd..a54b6b6ee 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PassportActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PassportActivity.java
@@ -67,7 +67,7 @@
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
-import com.telemint.messenger.BuildConfig;
+import com.lunamint.lunagram.BuildConfig;
 import org.telegram.messenger.DownloadController;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
@@ -77,7 +77,7 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MrzRecognizer;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SecureDocument;
 import org.telegram.messenger.SecureDocumentKey;
 import org.telegram.messenger.SendMessagesHelper;
@@ -5304,12 +5304,13 @@ private void startPhoneVerification(boolean checkPermissions, final String phone
                 if (!allowCall) {
                     permissionsItems.add(Manifest.permission.READ_PHONE_STATE);
                 }
+                /*
                 if (!allowSms) {
                     permissionsItems.add(Manifest.permission.RECEIVE_SMS);
                     if (Build.VERSION.SDK_INT >= 23) {
                         permissionsItems.add(Manifest.permission.READ_SMS);
                     }
-                }
+                }*/
                 if (!permissionsItems.isEmpty()) {
                     if (getParentActivity().shouldShowRequestPermissionRationale(Manifest.permission.READ_PHONE_STATE) || getParentActivity().shouldShowRequestPermissionRationale(Manifest.permission.RECEIVE_SMS)) {
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PaymentFormActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PaymentFormActivity.java
index fda851e23..a2055ccd9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PaymentFormActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PaymentFormActivity.java
@@ -100,7 +100,7 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhonebookSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhonebookSelectActivity.java
index 1c8b7bef8..a94f4558d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhonebookSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhonebookSelectActivity.java
@@ -22,7 +22,7 @@
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.ActionBar.ThemeDescription;
 import org.telegram.ui.Adapters.PhonebookAdapter;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhonebookShareActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhonebookShareActivity.java
index 5a650c3c7..2513a0b96 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhonebookShareActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhonebookShareActivity.java
@@ -26,7 +26,7 @@
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.browser.Browser;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
index e89d188cb..89c21d90a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
@@ -26,7 +26,7 @@
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
index f46920463..b90ec130e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
@@ -24,7 +24,7 @@
 import org.telegram.messenger.ImageLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.BaseFragment;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index 20b0982d0..67cc34ad5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -42,7 +42,7 @@
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.VideoEditedInfo;
 import org.telegram.messenger.ApplicationLoader;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.GridLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.ConnectionsManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index df3624c8a..a96336026 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -95,7 +95,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.Bitmaps;
 import org.telegram.messenger.BringAppForegroundService;
-import com.telemint.messenger.BuildConfig;
+import com.lunamint.lunagram.BuildConfig;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.ContactsController;
@@ -120,7 +120,7 @@
 import org.telegram.messenger.MediaController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.DefaultItemAnimator;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.LinearSmoothScrollerEnd;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
index 8ceb4bf83..8c758d168 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
@@ -57,7 +57,7 @@
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.WebFile;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PrivacyControlActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PrivacyControlActivity.java
index 01b9ffa15..553989084 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PrivacyControlActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PrivacyControlActivity.java
@@ -26,7 +26,7 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.ConnectionsManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
index dd9192da4..d4aed0891 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
@@ -24,7 +24,7 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PrivacyUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PrivacyUsersActivity.java
index a4b401471..712735827 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PrivacyUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PrivacyUsersActivity.java
@@ -20,7 +20,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
index 7e3b0a35c..b51a15b2e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
@@ -14,7 +14,9 @@
 import android.animation.ObjectAnimator;
 import android.animation.StateListAnimator;
 import android.annotation.SuppressLint;
+import android.app.Activity;
 import android.app.Dialog;
+import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
@@ -32,6 +34,8 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
 import android.support.annotation.Keep;
 import android.text.TextUtils;
 import android.util.SparseArray;
@@ -71,7 +75,15 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+
+import com.lunamint.lunagram.R;
+import com.lunamint.lunagram.ui.SendCoinActivity;
+import com.lunamint.wallet.model.AccountInfo;
+import com.lunamint.wallet.WalletManager;
+import com.lunamint.wallet.model.CmdResult;
+import com.lunamint.wallet.utils.Parser;
+import com.lunamint.wallet.utils.VarifyUtil;
+
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
@@ -110,6 +122,8 @@
 
 public class ProfileActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.DialogsActivityDelegate {
 
+    private ProgressDialog mProgressDialog;
+
     private RecyclerListView listView;
     private LinearLayoutManager layoutManager;
     private ListAdapter listAdapter;
@@ -1311,8 +1325,8 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 items.add(LocaleController.getString("CallViaTelegram", R.string.CallViaTelegram));
                 actions.add(2);
             }
-			items.add(LocaleController.getString("Call", R.string.Call));
-			actions.add(0);
+            items.add(LocaleController.getString("Call", R.string.Call));
+            actions.add(0);
             items.add(LocaleController.getString("Copy", R.string.Copy));
             actions.add(1);
             builder.setItems(items.toArray(new CharSequence[items.size()]), new DialogInterface.OnClickListener() {
@@ -1344,34 +1358,136 @@ public void onClick(DialogInterface dialogInterface, int i) {
             showDialog(builder.create());
             return true;
         } else if (position == channelInfoRow || position == userInfoRow || position == userInfoDetailedRow) {
-            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-            builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialogInterface, int i) {
-                    try {
-                        String about;
-                        if (position == channelInfoRow) {
-                            about = info.about;
+
+            if ((position == userInfoRow || position == userInfoDetailedRow) && VarifyUtil.isValidCosmosAddress(getUserAbout())) {
+
+                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                builder.setItems(new CharSequence[]{LocaleController.getString("sendToken", R.string.sendToken), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        if (i == 0) {
+                            getCurrentWalletAccount();
                         } else {
-                            TLRPC.TL_userFull userFull = MessagesController.getInstance(currentAccount).getUserFull(user_id);
-                            about = userFull != null ? userFull.about : null;
+                            try {
+                                String about;
+                                if (position == channelInfoRow) {
+                                    about = info.about;
+                                } else {
+                                    about = getUserAbout();
+                                }
+                                if (TextUtils.isEmpty(about)) {
+                                    return;
+                                }
+                                AndroidUtilities.addToClipboard(about);
+                                Toast.makeText(getParentActivity(), LocaleController.getString("TextCopied", R.string.TextCopied), Toast.LENGTH_SHORT).show();
+                            } catch (Exception e) {
+                                FileLog.e(e);
+                            }
                         }
-                        if (TextUtils.isEmpty(about)) {
-                            return;
+
+                    }
+                });
+                showDialog(builder.create());
+            } else {
+                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        try {
+                            String about;
+                            if (position == channelInfoRow) {
+                                about = info.about;
+                            } else {
+                                about = getUserAbout();
+                            }
+                            if (TextUtils.isEmpty(about)) {
+                                return;
+                            }
+                            AndroidUtilities.addToClipboard(about);
+                            Toast.makeText(getParentActivity(), LocaleController.getString("TextCopied", R.string.TextCopied), Toast.LENGTH_SHORT).show();
+                        } catch (Exception e) {
+                            FileLog.e(e);
                         }
-                        AndroidUtilities.addToClipboard(about);
-                        Toast.makeText(getParentActivity(), LocaleController.getString("TextCopied", R.string.TextCopied), Toast.LENGTH_SHORT).show();
-                    } catch (Exception e) {
-                        FileLog.e(e);
                     }
-                }
-            });
-            showDialog(builder.create());
+                });
+                showDialog(builder.create());
+            }
+
             return true;
         }
         return false;
     }
 
+    private void showProgress() {
+        if (mProgressDialog != null) mProgressDialog.dismiss();
+        mProgressDialog = ProgressDialog.show(getParentActivity(), "", LocaleController.getString("loadingBalance", R.string.loadingBalance), true);
+        mProgressDialog.setCancelable(false);
+    }
+
+    private void hideProgress() {
+        if (mProgressDialog == null) return;
+        mProgressDialog.dismiss();
+        mProgressDialog = null;
+    }
+
+    private void getCurrentWalletAccount() {
+        showProgress();
+        WalletManager.getInstance().getAccountList( new Handler() {
+            @Override
+            public void handleMessage(Message msg) {
+                super.handleMessage(msg);
+
+                CmdResult cmdResult = (CmdResult) msg.getData().getSerializable("result");
+
+                if (cmdResult == null) {
+                    Toast.makeText(getParentActivity(), LocaleController.getString("unknownError", R.string.unknownError), Toast.LENGTH_LONG).show();
+                } else if (cmdResult.getErrMsg() != null) {
+                    Toast.makeText(getParentActivity(), cmdResult.getErrMsg(), Toast.LENGTH_LONG).show();
+                } else {
+                    ArrayList<AccountInfo> accountList = Parser.getAccountList(cmdResult.getData());
+                    if (accountList != null && accountList.size() != 0) {
+                        int accountIdx = 0;
+                        String currentAccountName = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getString("currentAccountName", "");
+                        for (int i = 0; accountList.size() > i; i++) {
+                            if (accountList.get(i).getName().equals(currentAccountName)) {
+                                accountIdx = i;
+                                break;
+                            }
+                        }
+                        showSendCoinActivity(accountList.get(accountIdx));
+                    } else {
+                        Toast.makeText(getParentActivity(), LocaleController.getString("noSearchAddressAlert", R.string.noSearchAddressAlert), Toast.LENGTH_LONG).show();
+                    }
+                }
+                hideProgress();
+            }
+        });
+    }
+
+    private void showSendCoinActivity(AccountInfo accountInfo) {
+        if (WalletManager.getInstance().isLowerMinAppVersion) {
+            Toast.makeText(getParentActivity(), LocaleController.getString("lowerAppVersionError", R.string.lowerAppVersionError), Toast.LENGTH_LONG).show();
+            return;
+        }
+
+        if (accountInfo == null || accountInfo.getAddress() == null) {
+            Toast.makeText(getParentActivity(), LocaleController.getString("noSearchAddressAlert", R.string.noSearchAddressAlert), Toast.LENGTH_LONG).show();
+        } else {
+            Intent intent = new Intent(getParentActivity(), SendCoinActivity.class);
+            intent.putExtra("account_name", accountInfo.getName());
+            intent.putExtra("address", accountInfo.getAddress());
+            intent.putExtra("to_address", getUserAbout());
+            intent.putExtra("t_account", currentAccount);
+            intent.putExtra("t_user_id", user_id);
+            getParentActivity().startActivity(intent);
+        }
+    }
+
+    private String getUserAbout() {
+        TLRPC.TL_userFull userFull = MessagesController.getInstance(currentAccount).getUserFull(user_id);
+        return userFull != null ? userFull.about : null;
+    }
+
     private void leaveChatPressed() {
         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
         if (ChatObject.isChannel(chat_id, currentAccount) && !currentChat.megagroup) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
index cef6861e1..e0b161fc0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
@@ -37,7 +37,7 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.TLRPC;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProxyListActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProxyListActivity.java
index ee598cfe9..b6da073ee 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProxyListActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProxyListActivity.java
@@ -31,7 +31,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.support.widget.DefaultItemAnimator;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProxySettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProxySettingsActivity.java
index 4f6200da8..59719992f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProxySettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProxySettingsActivity.java
@@ -37,7 +37,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.tgnet.ConnectionsManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/QuickRepliesSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/QuickRepliesSettingsActivity.java
index 70b3628f9..c8bd914c2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/QuickRepliesSettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/QuickRepliesSettingsActivity.java
@@ -18,7 +18,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.ui.ActionBar.ActionBar;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ReportOtherActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ReportOtherActivity.java
index 880dec805..3d94ff0d0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ReportOtherActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ReportOtherActivity.java
@@ -26,7 +26,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SecretMediaViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/SecretMediaViewer.java
index ff17ef91e..afbaaa820 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SecretMediaViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SecretMediaViewer.java
@@ -47,7 +47,7 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.exoplayer2.C;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java
index 49df2f692..fc9ae2d39 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java
@@ -29,7 +29,7 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SetAdminsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SetAdminsActivity.java
index b2318fc73..53df2de0b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SetAdminsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SetAdminsActivity.java
@@ -22,7 +22,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index de5e3094d..dc0b140a8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -37,6 +37,7 @@
 import android.text.method.LinkMovementMethod;
 import android.text.style.URLSpan;
 import android.util.Base64;
+import android.util.Log;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.MotionEvent;
@@ -54,7 +55,7 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.PhoneFormat.PhoneFormat;
-import com.telemint.messenger.BuildConfig;
+import com.lunamint.lunagram.BuildConfig;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.DataQuery;
 import org.telegram.messenger.SharedConfig;
@@ -75,7 +76,7 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.MessageObject;
 import org.telegram.ui.ActionBar.AlertDialog;
@@ -1420,7 +1421,7 @@ public boolean isEnabled(RecyclerView.ViewHolder holder) {
                                 abi = "universal " + Build.CPU_ABI + " " + Build.CPU_ABI2;
                                 break;
                         }
-                        ((TextInfoCell) view).setText(LocaleController.formatString("TelegramVersion", R.string.TelegramVersion, String.format(Locale.US, "v%s (%d) %s", pInfo.versionName, code, abi)));
+                        ((TextInfoCell) view).setText(LocaleController.formatString("LunagramVersion", R.string.LunagramVersion, String.format(Locale.US, "v%s (%d) %s", pInfo.versionName, code, abi)));
                     } catch (Exception e) {
                         FileLog.e(e);
                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ShareActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ShareActivity.java
index c65e8d37d..42cb756fc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ShareActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ShareActivity.java
@@ -24,7 +24,7 @@
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MessageObject;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.tgnet.SerializedData;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/StickerPreviewViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/StickerPreviewViewer.java
index 08a75f45d..9c8640377 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/StickerPreviewViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/StickerPreviewViewer.java
@@ -39,7 +39,7 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessageObject;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.BottomSheet;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
index 6e6cd8c41..4606da82b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
@@ -25,7 +25,7 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
index 591e2f0db..ab1d7023b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
@@ -42,13 +42,13 @@
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
-import com.telemint.messenger.BuildConfig;
+import com.lunamint.lunagram.BuildConfig;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.support.widget.DefaultItemAnimator;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemePreviewActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemePreviewActivity.java
index eae8f8290..0f1393650 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemePreviewActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemePreviewActivity.java
@@ -37,7 +37,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/TwoStepVerificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/TwoStepVerificationActivity.java
index 5adfd7932..2488322a2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/TwoStepVerificationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/TwoStepVerificationActivity.java
@@ -35,7 +35,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.FileLog;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.browser.Browser;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/VoIPActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/VoIPActivity.java
index b72bd0d31..803a2a3d7 100755
--- a/TMessagesProj/src/main/java/org/telegram/ui/VoIPActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/VoIPActivity.java
@@ -78,7 +78,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
index 989ea68da..b030066e2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
@@ -39,7 +39,7 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.NotificationCenter;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/WebviewActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/WebviewActivity.java
index bda1d2db0..99d99a035 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/WebviewActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/WebviewActivity.java
@@ -37,7 +37,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
-import com.telemint.messenger.R;
+import com.lunamint.lunagram.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.browser.Browser;
 import org.telegram.tgnet.SerializedData;
