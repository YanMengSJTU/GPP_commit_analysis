diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 45b05bce3..6f350b9f1 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.telegram.messenger"
-    android:versionCode="179"
+    android:versionCode="185"
     android:versionName="1.3.26">
 
     <supports-screens android:anyDensity="true"
@@ -50,6 +50,7 @@
     <uses-permission android:name="android.permission.VIBRATE" />
     <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
     <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+    <uses-permission android:name="com.google.android.gallery3d.permission.GALLERY_PROVIDER" />
 
     <permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
     <permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" android:protectionLevel="signature" />
@@ -63,13 +64,18 @@
         android:hardwareAccelerated="true"
         android:largeHeap="true">
 
-        <meta-data android:name="com.google.android.maps.v2.API_KEY" android:value="your-google-maps-api-key-here" />
+        <!--release-->
+        <!--<meta-data android:name="com.google.android.maps.v2.API_KEY" android:value="AIzaSyA-t0jLPjUt2FxrA8VPK2EiYHcYcboIR6k" />-->
+        <!--debug-->
+        <meta-data android:name="com.google.android.maps.v2.API_KEY" android:value="AIzaSyCTNmNqbWovP9ETcAob98YlrfOQEAC0CJ4" />
         <meta-data android:name="com.google.android.gms.version" android:value="@integer/google_play_services_version" />
 
         <activity
-                android:name="org.telegram.ui.LaunchActivity"
-                android:windowSoftInputMode="adjustResize"
-                android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+            android:name="org.telegram.ui.LaunchActivity"
+            android:windowSoftInputMode="adjustResize"
+            android:hardwareAccelerated="true"
+            android:launchMode="singleTask"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
                 <category android:name="android.intent.category.LAUNCHER" />
@@ -128,14 +134,6 @@
             android:configChanges="keyboard|keyboardHidden|orientation|screenSize"
             android:screenOrientation="portrait">
         </activity>
-        <activity
-            android:name="org.telegram.ui.ApplicationActivity"
-            android:windowSoftInputMode="adjustResize"
-            android:theme="@style/Theme.TMessages"
-            android:hardwareAccelerated="true"
-            android:launchMode="singleTask"
-            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
-        </activity>
         <activity
             android:name="org.telegram.ui.GalleryImageViewer"
             android:theme="@style/Theme.TMessages.Gallery"
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java
index 7331962a1..4b356360d 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java
@@ -8,23 +8,23 @@
 
 package org.telegram.messenger;
 
-import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.ArrayList;
 
 public class BuffersStorage {
     public static BuffersStorage Instance = new BuffersStorage();
 
-    private final ConcurrentLinkedQueue<ByteBufferDesc> freeBuffers128;
-    private final ConcurrentLinkedQueue<ByteBufferDesc> freeBuffers1024;
-    private final ConcurrentLinkedQueue<ByteBufferDesc> freeBuffers4096;
-    private final ConcurrentLinkedQueue<ByteBufferDesc> freeBuffers16384;
-    private final ConcurrentLinkedQueue<ByteBufferDesc> freeBuffers32768;
+    private final ArrayList<ByteBufferDesc> freeBuffers128;
+    private final ArrayList<ByteBufferDesc> freeBuffers1024;
+    private final ArrayList<ByteBufferDesc> freeBuffers4096;
+    private final ArrayList<ByteBufferDesc> freeBuffers16384;
+    private final ArrayList<ByteBufferDesc> freeBuffers32768;
 
     public BuffersStorage() {
-        freeBuffers128 = new ConcurrentLinkedQueue<ByteBufferDesc>();
-        freeBuffers1024 = new ConcurrentLinkedQueue<ByteBufferDesc>();
-        freeBuffers4096 = new ConcurrentLinkedQueue<ByteBufferDesc>();
-        freeBuffers16384 = new ConcurrentLinkedQueue<ByteBufferDesc>();
-        freeBuffers32768 = new ConcurrentLinkedQueue<ByteBufferDesc>();
+        freeBuffers128 = new ArrayList<ByteBufferDesc>();
+        freeBuffers1024 = new ArrayList<ByteBufferDesc>();
+        freeBuffers4096 = new ArrayList<ByteBufferDesc>();
+        freeBuffers16384 = new ArrayList<ByteBufferDesc>();
+        freeBuffers32768 = new ArrayList<ByteBufferDesc>();
 
         for (int a = 0; a < 5; a++) {
             freeBuffers128.add(new ByteBufferDesc(128));
@@ -47,7 +47,10 @@ public ByteBufferDesc getFreeBuffer(int size) {
         ByteBufferDesc buffer = null;
         if (size <= 128) {
             synchronized (freeBuffers128) {
-                buffer = freeBuffers128.poll();
+                if (freeBuffers128.size() > 0) {
+                    buffer = freeBuffers128.get(0);
+                    freeBuffers128.remove(0);
+                }
             }
             if (buffer == null) {
                 buffer = new ByteBufferDesc(128);
@@ -55,7 +58,10 @@ public ByteBufferDesc getFreeBuffer(int size) {
             }
         } else if (size <= 1024 + 200) {
             synchronized (freeBuffers1024) {
-                buffer = freeBuffers1024.poll();
+                if (freeBuffers1024.size() > 0) {
+                    buffer = freeBuffers1024.get(0);
+                    freeBuffers1024.remove(0);
+                }
             }
             if (buffer == null) {
                 buffer = new ByteBufferDesc(1024 + 200);
@@ -63,7 +69,10 @@ public ByteBufferDesc getFreeBuffer(int size) {
             }
         } else if (size <= 4096 + 200) {
             synchronized (freeBuffers4096) {
-                buffer = freeBuffers4096.poll();
+                if (freeBuffers4096.size() > 0) {
+                    buffer = freeBuffers4096.get(0);
+                    freeBuffers4096.remove(0);
+                }
             }
             if (buffer == null) {
                 buffer = new ByteBufferDesc(4096 + 200);
@@ -71,7 +80,10 @@ public ByteBufferDesc getFreeBuffer(int size) {
             }
         } else if (size <= 16384 + 200) {
             synchronized (freeBuffers16384) {
-                buffer = freeBuffers16384.poll();
+                if (freeBuffers16384.size() > 0) {
+                    buffer = freeBuffers16384.get(0);
+                    freeBuffers16384.remove(0);
+                }
             }
             if (buffer == null) {
                 buffer = new ByteBufferDesc(16384 + 200);
@@ -79,7 +91,10 @@ public ByteBufferDesc getFreeBuffer(int size) {
             }
         } else if (size <= 40000) {
             synchronized (freeBuffers32768) {
-                buffer = freeBuffers32768.poll();
+                if (freeBuffers32768.size() > 0) {
+                    buffer = freeBuffers32768.get(0);
+                    freeBuffers32768.remove(0);
+                }
             }
             if (buffer == null) {
                 buffer = new ByteBufferDesc(40000);
@@ -98,37 +113,22 @@ public void reuseFreeBuffer(ByteBufferDesc buffer) {
         }
         if (buffer.buffer.capacity() == 128) {
             synchronized (freeBuffers128) {
-                if (freeBuffers128.contains(buffer)) {
-                    throw new RuntimeException("already containing buffer! 0");
-                }
                 freeBuffers128.add(buffer);
             }
         } else if (buffer.buffer.capacity() == 1024 + 200) {
             synchronized (freeBuffers1024) {
-                if (freeBuffers1024.contains(buffer)) {
-                    throw new RuntimeException("already containing buffer! 1");
-                }
                 freeBuffers1024.add(buffer);
             }
         } else if (buffer.buffer.capacity() == 4096 + 200) {
             synchronized (freeBuffers4096) {
-                if (freeBuffers4096.contains(buffer)) {
-                    throw new RuntimeException("already containing buffer! 2");
-                }
                 freeBuffers4096.add(buffer);
             }
         } else if (buffer.buffer.capacity() == 16384 + 200) {
             synchronized (freeBuffers16384) {
-                if (freeBuffers16384.contains(buffer)) {
-                    throw new RuntimeException("already containing buffer! 3");
-                }
                 freeBuffers16384.add(buffer);
             }
         } else if (buffer.buffer.capacity() == 40000) {
             synchronized (freeBuffers32768) {
-                if (freeBuffers32768.contains(buffer)) {
-                    throw new RuntimeException("already containing buffer! 4");
-                }
                 freeBuffers32768.add(buffer);
             }
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index e79e8fddc..51cbac368 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -484,7 +484,7 @@ void recreateSession(long sessionId, Datacenter datacenter) {
     }
 
     long getNewSessionId() {
-        long newSessionId = (long)(MessagesController.random.nextDouble() * Long.MAX_VALUE);
+        long newSessionId = MessagesController.random.nextLong();
         return isDebugSession ? (0xabcd000000000000L | (newSessionId & 0x0000ffffffffffffL)) : newSessionId;
     }
 
@@ -612,7 +612,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         if (existing == null) {
                             existing = new Datacenter();
                             existing.datacenterId = datacenterDesc.id;
-                            existing.authSessionId = (long)(MessagesController.random.nextDouble() * Long.MAX_VALUE);
+                            existing.authSessionId = MessagesController.random.nextLong();
                             datacentersArr.add(existing);
                             datacenterMap.put(existing.datacenterId, existing);
                         }
@@ -919,20 +919,16 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
         final ArrayList<Integer> unauthorizedDatacenterIds = new ArrayList<Integer>();
 
         int currentTime = (int)(System.currentTimeMillis() / 1000);
-        for (RPCRequest request : runningRequests) {
+        for (int i = 0; i < runningRequests.size(); i++) {
+            RPCRequest request = runningRequests.get(i);
+
             if (updatingDcSettings && datacenters.size() > 1 && request.rawRequest instanceof TLRPC.TL_help_getConfig) {
                 if (updatingDcStartTime < currentTime - 60) {
-                    updatingDcStartTime = currentTime;
-                    ArrayList<Datacenter> allDc = new ArrayList<Datacenter>(datacenters.values());
-                    for (int a = 0; a < allDc.size(); a++) {
-                        Datacenter dc = allDc.get(a);
-                        if (dc.datacenterId == request.runningDatacenterId) {
-                            allDc.remove(a);
-                            break;
-                        }
-                    }
-                    Datacenter newDc = allDc.get(Math.abs(MessagesController.random.nextInt()) % allDc.size());
-                    request.runningDatacenterId = newDc.datacenterId;
+                    FileLog.e("tmessages", "move TL_help_getConfig to requestQueue");
+                    requestQueue.add(request);
+                    runningRequests.remove(i);
+                    i--;
+                    continue;
                 }
             }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
index 9e30a523a..5122ae2af 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
@@ -501,16 +501,16 @@ public void run() {
                             Utilities.RunOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
-                                    if (ConnectionsManager.DEBUG_VERSION) {
-                                        FileLog.e("tmessages", "need delete contacts");
-                                        for (HashMap.Entry<Integer, Contact> c : contactHashMap.entrySet()) {
-                                            Contact contact = c.getValue();
-                                            FileLog.e("tmessages", "delete contact " + contact.first_name + " " + contact.last_name);
-                                            for (String phone : contact.phones) {
-                                                FileLog.e("tmessages", phone);
-                                            }
-                                        }
-                                    }
+//                                    if (ConnectionsManager.DEBUG_VERSION) {
+//                                        FileLog.e("tmessages", "need delete contacts");
+//                                        for (HashMap.Entry<Integer, Contact> c : contactHashMap.entrySet()) {
+//                                            Contact contact = c.getValue();
+//                                            FileLog.e("tmessages", "delete contact " + contact.first_name + " " + contact.last_name);
+//                                            for (String phone : contact.phones) {
+//                                                FileLog.e("tmessages", phone);
+//                                            }
+//                                        }
+//                                    }
 
                                     final ArrayList<TLRPC.User> toDelete = new ArrayList<TLRPC.User>();
                                     if (contactHashMap != null && !contactHashMap.isEmpty()) {
@@ -573,52 +573,82 @@ public void run() {
                     }
                 }
 
-                Utilities.stageQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        contactsBookSPhones = contactsBookShort;
-                        contactsBook = contactsMap;
-                        contactsSyncInProgress = false;
-                        contactsBookLoaded = true;
-                    }
-                });
-
                 FileLog.e("tmessages", "done processing contacts");
 
                 if (request) {
                     if (!toImport.isEmpty()) {
-                        if (ConnectionsManager.DEBUG_VERSION) {
-                            FileLog.e("tmessages", "start import contacts");
-                            for (TLRPC.TL_inputPhoneContact contact : toImport) {
-                                FileLog.e("tmessages", "add contact " + contact.first_name + " " + contact.last_name + " " + contact.phone);
-                            }
-                        }
-                        TLRPC.TL_contacts_importContacts req = new TLRPC.TL_contacts_importContacts();
-                        req.contacts = toImport;
-                        req.replace = false;
-                        ConnectionsManager.Instance.performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                            @Override
-                            public void run(TLObject response, TLRPC.TL_error error) {
-                                if (error == null) {
-                                    FileLog.e("tmessages", "contacts imported");
-                                    if (!contactsMap.isEmpty()) {
-                                        MessagesStorage.Instance.putCachedPhoneBook(contactsMap);
+//                        if (ConnectionsManager.DEBUG_VERSION) {
+//                            FileLog.e("tmessages", "start import contacts");
+//                            for (TLRPC.TL_inputPhoneContact contact : toImport) {
+//                                FileLog.e("tmessages", "add contact " + contact.first_name + " " + contact.last_name + " " + contact.phone);
+//                            }
+//                        }
+                        final int count = (int)Math.ceil(toImport.size() / 500.0f);
+                        for (int a = 0; a < count; a++) {
+                            ArrayList<TLRPC.TL_inputPhoneContact> finalToImport = new ArrayList<TLRPC.TL_inputPhoneContact>();
+                            finalToImport.addAll(toImport.subList(a * 500, Math.min((a + 1) * 500, toImport.size())));
+                            TLRPC.TL_contacts_importContacts req = new TLRPC.TL_contacts_importContacts();
+                            req.contacts = finalToImport;
+                            req.replace = false;
+                            final boolean isLastQuery = a == count - 1;
+                            ConnectionsManager.Instance.performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                                @Override
+                                public void run(TLObject response, TLRPC.TL_error error) {
+                                    if (error == null) {
+                                        FileLog.e("tmessages", "contacts imported");
+                                        if (isLastQuery && !contactsMap.isEmpty()) {
+                                            MessagesStorage.Instance.putCachedPhoneBook(contactsMap);
+                                        }
+                                        TLRPC.TL_contacts_importedContacts res = (TLRPC.TL_contacts_importedContacts)response;
+                                        MessagesStorage.Instance.putUsersAndChats(res.users, null, true, true);
+                                        ArrayList<TLRPC.TL_contact> cArr = new ArrayList<TLRPC.TL_contact>();
+                                        for (TLRPC.TL_importedContact c : res.imported) {
+                                            TLRPC.TL_contact contact = new TLRPC.TL_contact();
+                                            contact.user_id = c.user_id;
+                                            cArr.add(contact);
+                                        }
+                                        processLoadedContacts(cArr, res.users, 2);
+                                    } else {
+                                        FileLog.e("tmessages", "import contacts error " + error.text);
                                     }
-                                    TLRPC.TL_contacts_importedContacts res = (TLRPC.TL_contacts_importedContacts)response;
-                                    MessagesStorage.Instance.putUsersAndChats(res.users, null, true, true);
-                                    ArrayList<TLRPC.TL_contact> cArr = new ArrayList<TLRPC.TL_contact>();
-                                    for (TLRPC.TL_importedContact c : res.imported) {
-                                        TLRPC.TL_contact contact = new TLRPC.TL_contact();
-                                        contact.user_id = c.user_id;
-                                        cArr.add(contact);
+                                    if (isLastQuery) {
+                                        Utilities.stageQueue.postRunnable(new Runnable() {
+                                            @Override
+                                            public void run() {
+                                                contactsBookSPhones = contactsBookShort;
+                                                contactsBook = contactsMap;
+                                                contactsSyncInProgress = false;
+                                                contactsBookLoaded = true;
+                                                if (first) {
+                                                    contactsLoaded = true;
+                                                }
+                                                if (!delayedContactsUpdate.isEmpty() && contactsLoaded && contactsBookLoaded) {
+                                                    applyContactsUpdates(delayedContactsUpdate, null, null, null);
+                                                    delayedContactsUpdate.clear();
+                                                }
+                                            }
+                                        });
                                     }
-                                    processLoadedContacts(cArr, res.users, 2);
-                                } else {
-                                    FileLog.e("tmessages", "import contacts error " + error.text);
                                 }
-                            }
-                        }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassCanCompress);
+                            }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassCanCompress);
+                        }
                     } else {
+                        Utilities.stageQueue.postRunnable(new Runnable() {
+                            @Override
+                            public void run() {
+                                contactsBookSPhones = contactsBookShort;
+                                contactsBook = contactsMap;
+                                contactsSyncInProgress = false;
+                                contactsBookLoaded = true;
+                                if (first) {
+                                    contactsLoaded = true;
+                                }
+                                if (!delayedContactsUpdate.isEmpty() && contactsLoaded && contactsBookLoaded) {
+                                    applyContactsUpdates(delayedContactsUpdate, null, null, null);
+                                    delayedContactsUpdate.clear();
+                                }
+                            }
+                        });
                         Utilities.RunOnUIThread(new Runnable() {
                             @Override
                             public void run() {
@@ -628,6 +658,22 @@ public void run() {
                         });
                     }
                 } else {
+                    Utilities.stageQueue.postRunnable(new Runnable() {
+                        @Override
+                        public void run() {
+                            contactsBookSPhones = contactsBookShort;
+                            contactsBook = contactsMap;
+                            contactsSyncInProgress = false;
+                            contactsBookLoaded = true;
+                            if (first) {
+                                contactsLoaded = true;
+                            }
+                            if (!delayedContactsUpdate.isEmpty() && contactsLoaded && contactsBookLoaded) {
+                                applyContactsUpdates(delayedContactsUpdate, null, null, null);
+                                delayedContactsUpdate.clear();
+                            }
+                        }
+                    });
                     if (!contactsMap.isEmpty()) {
                         MessagesStorage.Instance.putCachedPhoneBook(contactsMap);
                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
index b9cfaa617..19ad8e91e 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
@@ -14,7 +14,9 @@
 import android.graphics.BitmapFactory;
 import android.graphics.Matrix;
 import android.media.ExifInterface;
+import android.net.Uri;
 import android.os.Build;
+import android.os.ParcelFileDescriptor;
 
 import org.telegram.objects.MessageObject;
 import org.telegram.ui.ApplicationLoader;
@@ -23,6 +25,7 @@
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
+import java.io.FileDescriptor;
 import java.io.FileOutputStream;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -961,10 +964,31 @@ public void run() {
         });
     }
 
-    public static Bitmap loadBitmap(String path, float maxWidth, float maxHeight) {
+    public static Bitmap loadBitmap(String path, Uri uri, float maxWidth, float maxHeight) {
         BitmapFactory.Options bmOptions = new BitmapFactory.Options();
         bmOptions.inJustDecodeBounds = true;
-        BitmapFactory.decodeFile(path, bmOptions);
+        FileDescriptor fileDescriptor = null;
+        ParcelFileDescriptor parcelFD = null;
+        if (path != null) {
+            BitmapFactory.decodeFile(path, bmOptions);
+        } else if (uri != null) {
+            boolean error = false;
+            try {
+                parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
+                fileDescriptor = parcelFD.getFileDescriptor();
+                BitmapFactory.decodeFileDescriptor(fileDescriptor, null, bmOptions);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+                try {
+                    if (parcelFD != null) {
+                        parcelFD.close();
+                    }
+                } catch (Exception e2) {
+                    FileLog.e("tmessages", e2);
+                }
+                return null;
+            }
+        }
         float photoW = bmOptions.outWidth;
         float photoH = bmOptions.outHeight;
         float scaleFactor = Math.max(photoW / maxWidth, photoH / maxHeight);
@@ -974,39 +998,70 @@ public static Bitmap loadBitmap(String path, float maxWidth, float maxHeight) {
         bmOptions.inJustDecodeBounds = false;
         bmOptions.inSampleSize = (int)scaleFactor;
 
-        ExifInterface exif;
+        String exifPath = null;
+        if (path != null) {
+            exifPath = path;
+        } else if (uri != null) {
+            exifPath = Utilities.getPath(uri);
+        }
+
         Matrix matrix = null;
-        try {
-            exif = new ExifInterface(path);
-            int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, 1);
-            matrix = new Matrix();
-            switch (orientation) {
-                case ExifInterface.ORIENTATION_ROTATE_90:
-                    matrix.postRotate(90);
-                    break;
-                case ExifInterface.ORIENTATION_ROTATE_180:
-                    matrix.postRotate(180);
-                    break;
-                case ExifInterface.ORIENTATION_ROTATE_270:
-                    matrix.postRotate(270);
-                    break;
+
+        if (exifPath != null) {
+            ExifInterface exif;
+            try {
+                exif = new ExifInterface(exifPath);
+                int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, 1);
+                matrix = new Matrix();
+                switch (orientation) {
+                    case ExifInterface.ORIENTATION_ROTATE_90:
+                        matrix.postRotate(90);
+                        break;
+                    case ExifInterface.ORIENTATION_ROTATE_180:
+                        matrix.postRotate(180);
+                        break;
+                    case ExifInterface.ORIENTATION_ROTATE_270:
+                        matrix.postRotate(270);
+                        break;
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
             }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
         }
 
-        Bitmap b;
-        try {
-            b = BitmapFactory.decodeFile(path, bmOptions);
-            if (b != null && matrix != null) {
-                b = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), matrix, true);
+        Bitmap b = null;
+        if (path != null) {
+            try {
+                b = BitmapFactory.decodeFile(path, bmOptions);
+                if (b != null) {
+                    b = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), matrix, true);
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+                FileLoader.Instance.memCache.evictAll();
+                if (b == null) {
+                    b = BitmapFactory.decodeFile(path, bmOptions);
+                }
+                if (b != null) {
+                    b = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), matrix, true);
+                }
             }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            FileLoader.Instance.memCache.evictAll();
-            b = BitmapFactory.decodeFile(path, bmOptions);
-            if (b != null && matrix != null) {
-                b = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), matrix, true);
+        } else if (uri != null) {
+            try {
+                b = BitmapFactory.decodeFileDescriptor(fileDescriptor, null, bmOptions);
+                if (b != null) {
+                    b = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), matrix, true);
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            } finally {
+                try {
+                    if (parcelFD != null) {
+                        parcelFD.close();
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
             }
         }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
index 46d08963b..a1b66129d 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
@@ -62,7 +62,7 @@ public FileUploadOperation(String location, byte[] keyarr, byte[] ivarr) {
                 FileLog.e("tmessages", e);
             }
         }
-        currentFileId = (long)(MessagesController.random.nextDouble() * Long.MAX_VALUE);
+        currentFileId = MessagesController.random.nextLong();
         try {
             mdEnc = MessageDigest.getInstance("MD5");
         } catch (NoSuchAlgorithmException e) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
index c712ba34d..fbadb02e9 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
@@ -379,9 +379,9 @@ public boolean startRecording(long dialog_id) {
         } else {
             audioRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
         }
-        audioRecorder.setAudioSamplingRate(24000);
+        audioRecorder.setAudioSamplingRate(16000);
         audioRecorder.setAudioChannels(1);
-        audioRecorder.setAudioEncodingBitRate(16000);
+        audioRecorder.setAudioEncodingBitRate(16000*4*1);
 
         try {
             audioRecorder.prepare();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 615774962..649e70706 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -34,8 +34,8 @@
 
 import org.telegram.objects.MessageObject;
 import org.telegram.objects.PhotoObject;
-import org.telegram.ui.ApplicationLoader;
 import org.telegram.ui.LaunchActivity;
+import org.telegram.ui.ApplicationLoader;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -1331,9 +1331,9 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
         });
     }
 
-    public TLRPC.TL_photo generatePhotoSizes(String path) {
+    public TLRPC.TL_photo generatePhotoSizes(String path, Uri imageUri) {
         long time = System.currentTimeMillis();
-        Bitmap bitmap = FileLoader.loadBitmap(path, 800, 800);
+        Bitmap bitmap = FileLoader.loadBitmap(path, imageUri, 800, 800);
         ArrayList<TLRPC.PhotoSize> sizes = new ArrayList<TLRPC.PhotoSize>();
         TLRPC.PhotoSize size = FileLoader.scaleAndSaveImage(bitmap, 90, 90, 55, true);
         if (size != null) {
@@ -4444,18 +4444,20 @@ public void run() {
 
     private void updateInterfaceWithMessages(long uid, ArrayList<MessageObject> messages) {
         MessageObject lastMessage = null;
-        int lastDate = 0;
         TLRPC.TL_dialog dialog = dialogs_dict.get(uid);
 
+        boolean isEncryptedChat = ((int)uid) == 0;
+
         NotificationCenter.Instance.postNotificationName(didReceivedNewMessages, uid, messages);
 
         for (MessageObject message : messages) {
-            if (lastMessage == null || message.messageOwner.date > lastDate) {
+            if (lastMessage == null || (!isEncryptedChat && message.messageOwner.id > lastMessage.messageOwner.id || isEncryptedChat && message.messageOwner.id < lastMessage.messageOwner.id) || message.messageOwner.date > lastMessage.messageOwner.date) {
                 lastMessage = message;
-                lastDate = message.messageOwner.date;
             }
         }
 
+        boolean changed = false;
+
         if (dialog == null) {
             dialog = new TLRPC.TL_dialog();
             dialog.id = uid;
@@ -4465,29 +4467,37 @@ private void updateInterfaceWithMessages(long uid, ArrayList<MessageObject> mess
             dialogs_dict.put(uid, dialog);
             dialogs.add(dialog);
             dialogMessage.put(lastMessage.messageOwner.id, lastMessage);
+            changed = true;
         } else {
-            dialogMessage.remove(dialog.top_message);
-            dialog.top_message = lastMessage.messageOwner.id;
-            dialog.last_message_date = lastMessage.messageOwner.date;
-            dialogMessage.put(lastMessage.messageOwner.id, lastMessage);
+            if (dialog.top_message > 0 && lastMessage.messageOwner.id > 0 && lastMessage.messageOwner.id > dialog.top_message ||
+                    dialog.top_message < 0 && lastMessage.messageOwner.id < 0 && lastMessage.messageOwner.id < dialog.top_message ||
+                    dialog.last_message_date < lastMessage.messageOwner.date) {
+                dialogMessage.remove(dialog.top_message);
+                dialog.top_message = lastMessage.messageOwner.id;
+                dialog.last_message_date = lastMessage.messageOwner.date;
+                dialogMessage.put(lastMessage.messageOwner.id, lastMessage);
+                changed = true;
+            }
         }
 
-        dialogsServerOnly.clear();
-        Collections.sort(dialogs, new Comparator<TLRPC.TL_dialog>() {
-            @Override
-            public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
-                if (tl_dialog.last_message_date == tl_dialog2.last_message_date) {
-                    return 0;
-                } else if (tl_dialog.last_message_date < tl_dialog2.last_message_date) {
-                    return 1;
-                } else {
-                    return -1;
+        if (changed) {
+            dialogsServerOnly.clear();
+            Collections.sort(dialogs, new Comparator<TLRPC.TL_dialog>() {
+                @Override
+                public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
+                    if (tl_dialog.last_message_date == tl_dialog2.last_message_date) {
+                        return 0;
+                    } else if (tl_dialog.last_message_date < tl_dialog2.last_message_date) {
+                        return 1;
+                    } else {
+                        return -1;
+                    }
+                }
+            });
+            for (TLRPC.TL_dialog d : dialogs) {
+                if ((int)d.id != 0) {
+                    dialogsServerOnly.add(d);
                 }
-            }
-        });
-        for (TLRPC.TL_dialog d : dialogs) {
-            if ((int)d.id != 0) {
-                dialogsServerOnly.add(d);
             }
         }
     }
@@ -4648,6 +4658,21 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                             newMessage.media.document.thumb.type = "s";
                         }
                         newMessage.media.document.dc_id = message.file.dc_id;
+                    } else if (decryptedMessage.media instanceof TLRPC.TL_decryptedMessageMediaAudio) {
+                        if (decryptedMessage.media.key.length != 32 || decryptedMessage.media.iv.length != 32) {
+                            return null;
+                        }
+                        newMessage.media = new TLRPC.TL_messageMediaAudio();
+                        newMessage.media.audio = new TLRPC.TL_audioEncrypted();
+                        newMessage.media.audio.id = message.file.id;
+                        newMessage.media.audio.access_hash = message.file.access_hash;
+                        newMessage.media.audio.user_id = decryptedMessage.media.user_id;
+                        newMessage.media.audio.date = message.date;
+                        newMessage.media.audio.size = message.file.size;
+                        newMessage.media.audio.key = decryptedMessage.media.key;
+                        newMessage.media.audio.iv = decryptedMessage.media.iv;
+                        newMessage.media.audio.dc_id = message.file.dc_id;
+                        newMessage.media.audio.duration = decryptedMessage.media.duration;
                     } else {
                         return null;
                     }
@@ -4903,7 +4928,7 @@ public void run() {
                     TLRPC.TL_messages_requestEncryption req2 = new TLRPC.TL_messages_requestEncryption();
                     req2.g_a = g_a;
                     req2.user_id = getInputUser(user);
-                    req2.random_id = (int)(random.nextDouble() * Integer.MAX_VALUE);
+                    req2.random_id = random.nextInt();
                     ConnectionsManager.Instance.performRpc(req2, new RPCRequest.RPCRequestDelegate() {
                         @Override
                         public void run(final TLObject response, TLRPC.TL_error error) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java b/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
index 8f1aa83e7..301360979 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
@@ -439,7 +439,7 @@ public void run() {
             }
 
             if (currentPacketLength % 4 != 0 || currentPacketLength > 2 * 1024 * 1024) {
-                //FileLog.e("tmessages", "Invalid packet length");
+                FileLog.e("tmessages", "Invalid packet length");
                 reconnect();
                 return;
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/objects/PhotoObject.java b/TMessagesProj/src/main/java/org/telegram/objects/PhotoObject.java
index 93e5aee2c..41fff4bd1 100644
--- a/TMessagesProj/src/main/java/org/telegram/objects/PhotoObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/objects/PhotoObject.java
@@ -62,7 +62,7 @@ public static PhotoObject getClosestImageWithSize(ArrayList<PhotoObject> arr, in
         for (TLRPC.PhotoSize obj : sizes) {
             int diffW = Math.abs(obj.w - width);
             int diffH = Math.abs(obj.h - height);
-            if (closestObject == null || closestWidth > diffW || closestHeight > diffH) {
+            if (closestObject == null || closestObject instanceof TLRPC.TL_photoCachedSize || closestWidth > diffW || closestHeight > diffH) {
                 closestObject = obj;
                 closestWidth = diffW;
                 closestHeight = diffH;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ApplicationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ApplicationActivity.java
deleted file mode 100644
index 873466412..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/ApplicationActivity.java
+++ /dev/null
@@ -1,730 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.app.Activity;
-import android.app.NotificationManager;
-import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.graphics.PixelFormat;
-import android.os.Build;
-import android.os.Bundle;
-import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentTransaction;
-import android.support.v7.app.ActionBar;
-import android.support.v7.app.ActionBarActivity;
-import android.view.Surface;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewTreeObserver;
-import android.view.WindowManager;
-import android.widget.EditText;
-import android.widget.TextView;
-
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.MessagesController;
-import org.telegram.messenger.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.objects.MessageObject;
-import org.telegram.ui.Views.BaseFragment;
-import org.telegram.ui.Views.NotificationView;
-
-import net.hockeyapp.android.CrashManager;
-import net.hockeyapp.android.UpdateManager;
-
-import java.lang.reflect.Field;
-import java.lang.reflect.Method;
-
-public class ApplicationActivity extends ActionBarActivity implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate {
-    private boolean finished = false;
-    private NotificationView notificationView;
-    private String photoPath = null;
-    private String videoPath = null;
-    private String sendingText = null;
-    private String documentPath = null;
-    private String[] imagesPathArray = null;
-    private String[] documentsPathArray = null;
-    private int currentConnectionState;
-    private View statusView;
-    private View backStatusButton;
-    private View statusBackground;
-    private TextView statusText;
-    private View containerView;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
-        if (resourceId > 0) {
-            Utilities.statusBarHeight = getResources().getDimensionPixelSize(resourceId);
-        }
-
-        NotificationCenter.Instance.postNotificationName(702, this);
-        currentConnectionState = ConnectionsManager.Instance.connectionState;
-        for (BaseFragment fragment : ApplicationLoader.fragmentsStack) {
-            if (fragment.fragmentView != null) {
-                ViewGroup parent = (ViewGroup)fragment.fragmentView.getParent();
-                if (parent != null) {
-                    parent.removeView(fragment.fragmentView);
-                }
-                fragment.fragmentView = null;
-            }
-            fragment.parentActivity = this;
-        }
-        setContentView(R.layout.application_layout);
-        NotificationCenter.Instance.addObserver(this, 1234);
-        NotificationCenter.Instance.addObserver(this, 658);
-        NotificationCenter.Instance.addObserver(this, 701);
-        NotificationCenter.Instance.addObserver(this, 702);
-        NotificationCenter.Instance.addObserver(this, 703);
-        NotificationCenter.Instance.addObserver(this, GalleryImageViewer.needShowAllMedia);
-        getSupportActionBar().setLogo(R.drawable.ab_icon_fixed2);
-
-        statusView = getLayoutInflater().inflate(R.layout.updating_state_layout, null);
-        statusBackground = statusView.findViewById(R.id.back_button_background);
-        backStatusButton = statusView.findViewById(R.id.back_button);
-        containerView = findViewById(R.id.container);
-        statusText = (TextView)statusView.findViewById(R.id.status_text);
-        statusBackground.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                if (ApplicationLoader.fragmentsStack.size() > 1) {
-                    onBackPressed();
-                }
-            }
-        });
-
-        if (ApplicationLoader.fragmentsStack.isEmpty()) {
-            MessagesActivity fragment = new MessagesActivity();
-            fragment.onFragmentCreate();
-            ApplicationLoader.fragmentsStack.add(fragment);
-        }
-
-        boolean pushOpened = false;
-
-        Integer push_user_id = (Integer)NotificationCenter.Instance.getFromMemCache("push_user_id", 0);
-        Integer push_chat_id = (Integer)NotificationCenter.Instance.getFromMemCache("push_chat_id", 0);
-        Integer push_enc_id = (Integer)NotificationCenter.Instance.getFromMemCache("push_enc_id", 0);
-        Integer open_settings = (Integer)NotificationCenter.Instance.getFromMemCache("open_settings", 0);
-        photoPath = (String)NotificationCenter.Instance.getFromMemCache(533);
-        videoPath = (String)NotificationCenter.Instance.getFromMemCache(534);
-        sendingText = (String)NotificationCenter.Instance.getFromMemCache(535);
-        documentPath = (String)NotificationCenter.Instance.getFromMemCache(536);
-        imagesPathArray = (String[])NotificationCenter.Instance.getFromMemCache(537);
-        documentsPathArray = (String[])NotificationCenter.Instance.getFromMemCache(538);
-
-        if (push_user_id != 0) {
-            if (push_user_id == UserConfig.clientUserId) {
-                open_settings = 1;
-            } else {
-                ChatActivity fragment = new ChatActivity();
-                Bundle bundle = new Bundle();
-                bundle.putInt("user_id", push_user_id);
-                fragment.setArguments(bundle);
-                if (fragment.onFragmentCreate()) {
-                    pushOpened = true;
-                    ApplicationLoader.fragmentsStack.add(fragment);
-                    getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chat" + Math.random()).commitAllowingStateLoss();
-                }
-            }
-        } else if (push_chat_id != 0) {
-            ChatActivity fragment = new ChatActivity();
-            Bundle bundle = new Bundle();
-            bundle.putInt("chat_id", push_chat_id);
-            fragment.setArguments(bundle);
-            if (fragment.onFragmentCreate()) {
-                pushOpened = true;
-                ApplicationLoader.fragmentsStack.add(fragment);
-                getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chat" + Math.random()).commitAllowingStateLoss();
-            }
-        }  else if (push_enc_id != 0) {
-            ChatActivity fragment = new ChatActivity();
-            Bundle bundle = new Bundle();
-            bundle.putInt("enc_id", push_enc_id);
-            fragment.setArguments(bundle);
-            if (fragment.onFragmentCreate()) {
-                pushOpened = true;
-                ApplicationLoader.fragmentsStack.add(fragment);
-                getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chat" + Math.random()).commitAllowingStateLoss();
-            }
-        }
-        if (videoPath != null || photoPath != null || sendingText != null || documentPath != null || documentsPathArray != null || imagesPathArray != null) {
-            MessagesActivity fragment = new MessagesActivity();
-            fragment.selectAlertString = R.string.ForwardMessagesTo;
-            fragment.animationType = 1;
-            Bundle args = new Bundle();
-            args.putBoolean("onlySelect", true);
-            fragment.setArguments(args);
-            fragment.delegate = this;
-            ApplicationLoader.fragmentsStack.add(fragment);
-            fragment.onFragmentCreate();
-            getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, fragment.getTag()).commitAllowingStateLoss();
-            pushOpened = true;
-        }
-        if (open_settings != 0) {
-            SettingsActivity fragment = new SettingsActivity();
-            ApplicationLoader.fragmentsStack.add(fragment);
-            fragment.onFragmentCreate();
-            getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "settings").commitAllowingStateLoss();
-            pushOpened = true;
-        }
-        if (!pushOpened) {
-            BaseFragment fragment = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 1);
-            getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, fragment.getTag()).commitAllowingStateLoss();
-        }
-
-        getWindow().setBackgroundDrawableResource(R.drawable.transparent);
-        getWindow().setFormat(PixelFormat.RGB_565);
-    }
-
-    @SuppressWarnings("unchecked")
-    private void prepareForHideShowActionBar() {
-        try {
-            Class firstClass = getSupportActionBar().getClass();
-            Class aClass = firstClass.getSuperclass();
-            if (aClass == android.support.v7.app.ActionBar.class) {
-                Method method = firstClass.getDeclaredMethod("setShowHideAnimationEnabled", boolean.class);
-                method.invoke(getSupportActionBar(), false);
-            } else {
-                Field field = aClass.getDeclaredField("mActionBar");
-                field.setAccessible(true);
-                Method method = field.get(getSupportActionBar()).getClass().getDeclaredMethod("setShowHideAnimationEnabled", boolean.class);
-                method.invoke(field.get(getSupportActionBar()), false);
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-    public void showActionBar() {
-        prepareForHideShowActionBar();
-        getSupportActionBar().show();
-    }
-
-    public void hideActionBar() {
-        prepareForHideShowActionBar();
-        getSupportActionBar().hide();
-    }
-
-    @Override
-    protected void onNewIntent(Intent intent) {
-        super.onNewIntent(intent);
-        photoPath = (String)NotificationCenter.Instance.getFromMemCache(533);
-        videoPath = (String)NotificationCenter.Instance.getFromMemCache(534);
-        sendingText = (String)NotificationCenter.Instance.getFromMemCache(535);
-        documentPath = (String)NotificationCenter.Instance.getFromMemCache(536);
-        imagesPathArray = (String[])NotificationCenter.Instance.getFromMemCache(537);
-        documentsPathArray = (String[])NotificationCenter.Instance.getFromMemCache(538);
-        if (videoPath != null || photoPath != null || sendingText != null || documentPath != null || imagesPathArray != null || documentsPathArray != null) {
-            MessagesActivity fragment = new MessagesActivity();
-            fragment.selectAlertString = R.string.ForwardMessagesTo;
-            fragment.animationType = 1;
-            Bundle args = new Bundle();
-            args.putBoolean("onlySelect", true);
-            fragment.setArguments(args);
-            fragment.delegate = this;
-            ApplicationLoader.fragmentsStack.add(fragment);
-            fragment.onFragmentCreate();
-            getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, fragment.getTag()).commitAllowingStateLoss();
-        }
-
-        Integer push_user_id = (Integer)NotificationCenter.Instance.getFromMemCache("push_user_id", 0);
-        Integer push_chat_id = (Integer)NotificationCenter.Instance.getFromMemCache("push_chat_id", 0);
-        Integer push_enc_id = (Integer)NotificationCenter.Instance.getFromMemCache("push_enc_id", 0);
-        Integer open_settings = (Integer)NotificationCenter.Instance.getFromMemCache("open_settings", 0);
-
-        if (push_user_id != 0) {
-            if (push_user_id == UserConfig.clientUserId) {
-                open_settings = 1;
-            } else {
-                ChatActivity fragment = new ChatActivity();
-                Bundle bundle = new Bundle();
-                bundle.putInt("user_id", push_user_id);
-                fragment.setArguments(bundle);
-                if (fragment.onFragmentCreate()) {
-                    ApplicationLoader.fragmentsStack.add(fragment);
-                    getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chat" + Math.random()).commitAllowingStateLoss();
-                }
-            }
-        } else if (push_chat_id != 0) {
-            ChatActivity fragment = new ChatActivity();
-            Bundle bundle = new Bundle();
-            bundle.putInt("chat_id", push_chat_id);
-            fragment.setArguments(bundle);
-            if (fragment.onFragmentCreate()) {
-                ApplicationLoader.fragmentsStack.add(fragment);
-                getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chat" + Math.random()).commitAllowingStateLoss();
-            }
-        } else if (push_enc_id != 0) {
-            ChatActivity fragment = new ChatActivity();
-            Bundle bundle = new Bundle();
-            bundle.putInt("enc_id", push_enc_id);
-            fragment.setArguments(bundle);
-            if (fragment.onFragmentCreate()) {
-                ApplicationLoader.fragmentsStack.add(fragment);
-                getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chat" + Math.random()).commitAllowingStateLoss();
-            }
-        }
-        if (open_settings != 0) {
-            SettingsActivity fragment = new SettingsActivity();
-            ApplicationLoader.fragmentsStack.add(fragment);
-            fragment.onFragmentCreate();
-            getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "settings").commitAllowingStateLoss();
-        }
-    }
-
-    @Override
-    public void didSelectDialog(MessagesActivity messageFragment, long dialog_id) {
-        if (dialog_id != 0) {
-            int lower_part = (int)dialog_id;
-
-            ChatActivity fragment = new ChatActivity();
-            Bundle bundle = new Bundle();
-            if (lower_part != 0) {
-                if (lower_part > 0) {
-                    NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
-                    bundle.putInt("user_id", lower_part);
-                    fragment.setArguments(bundle);
-                    fragment.scrollToTopOnResume = true;
-                    presentFragment(fragment, "chat" + Math.random(), true, false);
-                } else if (lower_part < 0) {
-                    NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
-                    bundle.putInt("chat_id", -lower_part);
-                    fragment.setArguments(bundle);
-                    fragment.scrollToTopOnResume = true;
-                    presentFragment(fragment, "chat" + Math.random(), true, false);
-                }
-            } else {
-                NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
-                int chat_id = (int)(dialog_id >> 32);
-                bundle.putInt("enc_id", chat_id);
-                fragment.setArguments(bundle);
-                fragment.scrollToTopOnResume = true;
-                presentFragment(fragment, "chat" + Math.random(), true, false);
-            }
-            if (photoPath != null) {
-                fragment.processSendingPhoto(photoPath);
-            } else if (videoPath != null) {
-                fragment.processSendingVideo(videoPath);
-            } else if (sendingText != null) {
-                fragment.processSendingText(sendingText);
-            } else if (documentPath != null) {
-                fragment.processSendingDocument(documentPath);
-            } else if (imagesPathArray != null) {
-                for (String path : imagesPathArray) {
-                    fragment.processSendingPhoto(path);
-                }
-            } else if (documentsPathArray != null) {
-                for (String path : documentsPathArray) {
-                    fragment.processSendingDocument(path);
-                }
-            }
-            photoPath = null;
-            videoPath = null;
-            sendingText = null;
-            documentPath = null;
-            imagesPathArray = null;
-            documentsPathArray = null;
-        }
-    }
-
-    private void checkForCrashes() {
-        CrashManager.register(this, ConnectionsManager.HOCKEY_APP_HASH);
-    }
-
-    private void checkForUpdates() {
-        if (ConnectionsManager.DEBUG_VERSION) {
-            UpdateManager.register(this, ConnectionsManager.HOCKEY_APP_HASH);
-        }
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        ApplicationLoader.lastPauseTime = System.currentTimeMillis();
-        if (notificationView != null) {
-            notificationView.hide(false);
-        }
-        View focusView = getCurrentFocus();
-        if (focusView instanceof EditText) {
-            focusView.clearFocus();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-        processOnFinish();
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        if (notificationView == null && getLayoutInflater() != null) {
-            notificationView = (NotificationView) getLayoutInflater().inflate(R.layout.notification_layout, null);
-        }
-        fixLayout();
-        checkForCrashes();
-        checkForUpdates();
-        ApplicationLoader.resetLastPauseTime();
-        supportInvalidateOptionsMenu();
-        updateActionBar();
-        try {
-            NotificationManager mNotificationManager = (NotificationManager)this.getSystemService(Context.NOTIFICATION_SERVICE);
-            mNotificationManager.cancel(1);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    private void processOnFinish() {
-        if (finished) {
-            return;
-        }
-        finished = true;
-        NotificationCenter.Instance.removeObserver(this, 1234);
-        NotificationCenter.Instance.removeObserver(this, 658);
-        NotificationCenter.Instance.removeObserver(this, 701);
-        NotificationCenter.Instance.removeObserver(this, 702);
-        NotificationCenter.Instance.removeObserver(this, 703);
-        NotificationCenter.Instance.removeObserver(this, GalleryImageViewer.needShowAllMedia);
-        if (notificationView != null) {
-            notificationView.hide(false);
-            notificationView.destroy();
-            notificationView = null;
-        }
-    }
-
-    @Override
-    public void onConfigurationChanged(android.content.res.Configuration newConfig) {
-        super.onConfigurationChanged(newConfig);
-        Utilities.checkDisplaySize();
-        fixLayout();
-    }
-
-    private void fixLayout() {
-        if (containerView != null) {
-            ViewTreeObserver obs = containerView.getViewTreeObserver();
-            obs.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
-                @Override
-                public void onGlobalLayout() {
-                    WindowManager manager = (WindowManager) getSystemService(WINDOW_SERVICE);
-                    int rotation = manager.getDefaultDisplay().getRotation();
-
-                    int height;
-                    int currentActionBarHeight = getSupportActionBar().getHeight();
-                    if (currentActionBarHeight != Utilities.dp(48) && currentActionBarHeight != Utilities.dp(40)) {
-                        height = currentActionBarHeight;
-                    } else {
-                        height = Utilities.dp(48);
-                        if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
-                            height = Utilities.dp(40);
-                        }
-                    }
-
-                    if (notificationView != null) {
-                        notificationView.applyOrientationPaddings(rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90, height);
-                    }
-
-                    if (Build.VERSION.SDK_INT < 16) {
-                        containerView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
-                    } else {
-                        containerView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
-                    }
-                }
-            });
-        }
-    }
-
-    @Override
-    @SuppressWarnings("unchecked")
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == 1234) {
-            for (BaseFragment fragment : ApplicationLoader.fragmentsStack) {
-                fragment.onFragmentDestroy();
-            }
-            ApplicationLoader.fragmentsStack.clear();
-            Intent intent2 = new Intent(this, LaunchActivity.class);
-            startActivity(intent2);
-            processOnFinish();
-            finish();
-        } else if (id == GalleryImageViewer.needShowAllMedia) {
-            long dialog_id = (Long)args[0];
-            MediaActivity fragment = new MediaActivity();
-            Bundle bundle = new Bundle();
-            if (dialog_id != 0) {
-                bundle.putLong("dialog_id", dialog_id);
-                fragment.setArguments(bundle);
-                presentFragment(fragment, "media_" + dialog_id, false);
-            }
-        } else if (id == 658) {
-            Integer push_user_id = (Integer)NotificationCenter.Instance.getFromMemCache("push_user_id", 0);
-            Integer push_chat_id = (Integer)NotificationCenter.Instance.getFromMemCache("push_chat_id", 0);
-            Integer push_enc_id = (Integer)NotificationCenter.Instance.getFromMemCache("push_enc_id", 0);
-
-            if (push_user_id != 0) {
-                NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
-                ChatActivity fragment = new ChatActivity();
-                Bundle bundle = new Bundle();
-                bundle.putInt("user_id", push_user_id);
-                fragment.setArguments(bundle);
-                if (fragment.onFragmentCreate()) {
-                    if (ApplicationLoader.fragmentsStack.size() > 0) {
-                        BaseFragment lastFragment = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 1);
-                        lastFragment.willBeHidden();
-                    }
-                    ApplicationLoader.fragmentsStack.add(fragment);
-                    getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chat" + Math.random()).commitAllowingStateLoss();
-                }
-            } else if (push_chat_id != 0) {
-                NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
-                ChatActivity fragment = new ChatActivity();
-                Bundle bundle = new Bundle();
-                bundle.putInt("chat_id", push_chat_id);
-                fragment.setArguments(bundle);
-                if (fragment.onFragmentCreate()) {
-                    if (ApplicationLoader.fragmentsStack.size() > 0) {
-                        BaseFragment lastFragment = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 1);
-                        lastFragment.willBeHidden();
-                    }
-                    ApplicationLoader.fragmentsStack.add(fragment);
-                    getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chat" + Math.random()).commitAllowingStateLoss();
-                }
-            }  else if (push_enc_id != 0) {
-                NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
-                ChatActivity fragment = new ChatActivity();
-                Bundle bundle = new Bundle();
-                bundle.putInt("enc_id", push_enc_id);
-                fragment.setArguments(bundle);
-                if (fragment.onFragmentCreate()) {
-                    if (ApplicationLoader.fragmentsStack.size() > 0) {
-                        BaseFragment lastFragment = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 1);
-                        lastFragment.willBeHidden();
-                    }
-                    ApplicationLoader.fragmentsStack.add(fragment);
-                    getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chat" + Math.random()).commitAllowingStateLoss();
-                }
-            }
-        } else if (id == 701) {
-            if (notificationView != null) {
-                MessageObject message = (MessageObject)args[0];
-                notificationView.show(message);
-            }
-        } else if (id == 702) {
-            if (args[0] != this) {
-                processOnFinish();
-            }
-        } else if (id == 703) {
-            int state = (Integer)args[0];
-            if (currentConnectionState != state) {
-                FileLog.e("tmessages", "switch to state " + state);
-                currentConnectionState = state;
-                updateActionBar();
-            }
-        }
-    }
-
-    public void fixBackButton() {
-        if(android.os.Build.VERSION.SDK_INT == 19) {
-            //workaround for back button dissapear
-            try {
-                Class firstClass = getSupportActionBar().getClass();
-                Class aClass = firstClass.getSuperclass();
-                if (aClass == android.support.v7.app.ActionBar.class) {
-
-                } else {
-                    Field field = aClass.getDeclaredField("mActionBar");
-                    field.setAccessible(true);
-                    android.app.ActionBar bar = (android.app.ActionBar)field.get(getSupportActionBar());
-
-                    field = bar.getClass().getDeclaredField("mActionView");
-                    field.setAccessible(true);
-                    View v = (View)field.get(bar);
-                    aClass = v.getClass();
-
-                    field = aClass.getDeclaredField("mHomeLayout");
-                    field.setAccessible(true);
-                    v = (View)field.get(v);
-                    v.setVisibility(View.VISIBLE);
-                }
-            } catch (Exception e) {
-                e.printStackTrace();
-            }
-        }
-    }
-
-    public void updateActionBar() {
-        ActionBar actionBar = getSupportActionBar();
-        if (actionBar == null) {
-            return;
-        }
-        BaseFragment currentFragment = null;
-        if (!ApplicationLoader.fragmentsStack.isEmpty()) {
-            currentFragment = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 1);
-        }
-        boolean canApplyLoading = true;
-        if (currentFragment != null && (currentConnectionState == 0 || !currentFragment.canApplyUpdateStatus() || statusView == null)) {
-            currentFragment.applySelfActionBar();
-            canApplyLoading = false;
-        }
-        if (canApplyLoading) {
-            if (statusView != null) {
-                actionBar.setDisplayShowTitleEnabled(false);
-                actionBar.setDisplayShowHomeEnabled(false);
-                actionBar.setDisplayHomeAsUpEnabled(false);
-                actionBar.setDisplayUseLogoEnabled(false);
-                actionBar.setDisplayShowCustomEnabled(true);
-                actionBar.setSubtitle(null);
-
-                if (ApplicationLoader.fragmentsStack.size() > 1) {
-                    backStatusButton.setVisibility(View.VISIBLE);
-                    statusBackground.setEnabled(true);
-                } else {
-                    backStatusButton.setVisibility(View.GONE);
-                    statusBackground.setEnabled(false);
-                }
-
-                if (currentConnectionState == 1) {
-                    statusText.setText(getString(R.string.WaitingForNetwork));
-                } else if (currentConnectionState == 2) {
-                    statusText.setText(getString(R.string.Connecting));
-                } else if (currentConnectionState == 3) {
-                    statusText.setText(getString(R.string.Updating));
-                }
-                if (actionBar.getCustomView() != statusView) {
-                    actionBar.setCustomView(statusView);
-                }
-
-                try {
-                    if (statusView.getLayoutParams() instanceof android.support.v7.app.ActionBar.LayoutParams) {
-                        android.support.v7.app.ActionBar.LayoutParams statusParams = (android.support.v7.app.ActionBar.LayoutParams)statusView.getLayoutParams();
-                        statusText.measure(View.MeasureSpec.makeMeasureSpec(800, View.MeasureSpec.AT_MOST), View.MeasureSpec.makeMeasureSpec(100, View.MeasureSpec.AT_MOST));
-                        statusParams.width = (statusText.getMeasuredWidth() + Utilities.dp(54));
-                        statusView.setLayoutParams(statusParams);
-                    } else if (statusView.getLayoutParams() instanceof android.app.ActionBar.LayoutParams) {
-                        android.app.ActionBar.LayoutParams statusParams = (android.app.ActionBar.LayoutParams)statusView.getLayoutParams();
-                        statusText.measure(View.MeasureSpec.makeMeasureSpec(800, View.MeasureSpec.AT_MOST), View.MeasureSpec.makeMeasureSpec(100, View.MeasureSpec.AT_MOST));
-                        statusParams.width = (statusText.getMeasuredWidth() + Utilities.dp(54));
-                        statusView.setLayoutParams(statusParams);
-                    }
-                } catch (Exception e) {
-                    e.printStackTrace();
-                }
-            }
-        }
-    }
-
-    public void presentFragment(BaseFragment fragment, String tag, boolean bySwipe) {
-        presentFragment(fragment, tag, false, bySwipe);
-    }
-
-    public void presentFragment(BaseFragment fragment, String tag, boolean removeLast, boolean bySwipe) {
-        if (getCurrentFocus() != null) {
-            Utilities.hideKeyboard(getCurrentFocus());
-        }
-        if (!fragment.onFragmentCreate()) {
-            return;
-        }
-        BaseFragment current = null;
-        if (!ApplicationLoader.fragmentsStack.isEmpty()) {
-            current = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 1);
-        }
-        if (current != null) {
-            current.willBeHidden();
-        }
-        FragmentManager fm = getSupportFragmentManager();
-        FragmentTransaction fTrans = fm.beginTransaction();
-        if (removeLast && current != null) {
-            ApplicationLoader.fragmentsStack.remove(ApplicationLoader.fragmentsStack.size() - 1);
-            current.onFragmentDestroy();
-        }
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        boolean animations = preferences.getBoolean("view_animations", true);
-        if (animations) {
-            if (bySwipe) {
-                fTrans.setCustomAnimations(R.anim.slide_left, R.anim.no_anim);
-            } else {
-                fTrans.setCustomAnimations(R.anim.scale_in, R.anim.no_anim);
-            }
-        }
-        fTrans.replace(R.id.container, fragment, tag);
-        fTrans.commitAllowingStateLoss();
-        ApplicationLoader.fragmentsStack.add(fragment);
-    }
-
-    public void removeFromStack(BaseFragment fragment) {
-        ApplicationLoader.fragmentsStack.remove(fragment);
-        fragment.onFragmentDestroy();
-    }
-
-    public void finishFragment(boolean bySwipe) {
-        if (getCurrentFocus() != null) {
-            Utilities.hideKeyboard(getCurrentFocus());
-        }
-        if (ApplicationLoader.fragmentsStack.size() < 2) {
-            for (BaseFragment fragment : ApplicationLoader.fragmentsStack) {
-                fragment.onFragmentDestroy();
-            }
-            ApplicationLoader.fragmentsStack.clear();
-            MessagesActivity fragment = new MessagesActivity();
-            fragment.onFragmentCreate();
-            ApplicationLoader.fragmentsStack.add(fragment);
-            getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chats").commitAllowingStateLoss();
-            return;
-        }
-        BaseFragment fragment = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 1);
-        fragment.onFragmentDestroy();
-        BaseFragment prev = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 2);
-        FragmentManager fm = getSupportFragmentManager();
-        FragmentTransaction fTrans = fm.beginTransaction();
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        boolean animations = preferences.getBoolean("view_animations", true);
-        if (animations) {
-            if (bySwipe) {
-                fTrans.setCustomAnimations(R.anim.no_anim_show, R.anim.slide_right_away);
-            } else {
-                fTrans.setCustomAnimations(R.anim.no_anim_show, R.anim.scale_out);
-            }
-        }
-        fTrans.replace(R.id.container, prev, prev.getTag());
-        fTrans.commitAllowingStateLoss();
-        ApplicationLoader.fragmentsStack.remove(ApplicationLoader.fragmentsStack.size() - 1);
-    }
-
-    @Override
-    public void onBackPressed() {
-        if (ApplicationLoader.fragmentsStack.size() == 1) {
-            ApplicationLoader.fragmentsStack.get(0).onFragmentDestroy();
-            ApplicationLoader.fragmentsStack.clear();
-            processOnFinish();
-            finish();
-            return;
-        }
-        if (!ApplicationLoader.fragmentsStack.isEmpty()) {
-            BaseFragment lastFragment = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 1);
-            if (lastFragment.onBackPressed()) {
-                finishFragment(false);
-            }
-        }
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        try {
-            super.onSaveInstanceState(outState);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index 1c69adf8d..79a7183dd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -22,15 +22,11 @@
     private int textX, textY;
     private int totalHeight = 0;
     private ClickableSpan pressedLink;
-    private int visibleY = 0;
-    private int visibleHeight = 0;
 
     private int lastVisibleBlockNum = 0;
     private int firstVisibleBlockNum = 0;
     private int totalVisibleBlocksCount = 0;
 
-    private boolean wasLayout = false;
-
     public ChatMessageCell(Context context, boolean isChat) {
         super(context, isChat);
         drawForwardedName = true;
@@ -87,21 +83,18 @@ public boolean onTouchEvent(MotionEvent event) {
     }
 
     public void setVisiblePart(int position, int height) {
-        visibleY = position;
-        visibleHeight = height;
-
         int newFirst = -1, newLast = -1, newCount = 0;
 
-        for (int a = Math.max(0, (visibleY - textY) / currentMessageObject.blockHeight); a < currentMessageObject.textLayoutBlocks.size(); a++) {
+        for (int a = Math.max(0, (position - textY) / currentMessageObject.blockHeight); a < currentMessageObject.textLayoutBlocks.size(); a++) {
             MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(a);
             float y = textY + block.textYOffset;
-            if (intersect(y, y + currentMessageObject.blockHeight, visibleY, visibleY + visibleHeight)) {
+            if (intersect(y, y + currentMessageObject.blockHeight, position, position + height)) {
                 if (newFirst == -1) {
                     newFirst = a;
                 }
                 newLast = a;
                 newCount++;
-            } else if (y > visibleY) {
+            } else if (y > position) {
                 break;
             }
         }
@@ -124,7 +117,6 @@ private boolean intersect(float left1, float right1, float left2, float right2)
     @Override
     public void setMessageObject(MessageObject messageObject) {
         if (currentMessageObject != messageObject || isUserDataChanged()) {
-            wasLayout = false;
             pressedLink = null;
             int maxWidth;
             if (chat) {
@@ -168,22 +160,6 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), totalHeight);
     }
 
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        super.onLayout(changed, left, top, right, bottom);
-
-        if (changed || !wasLayout) {
-            if (currentMessageObject.messageOwner.out) {
-                textX = layoutWidth - backgroundWidth + Utilities.dp(10);
-                textY = Utilities.dp(10) + namesOffset;
-            } else {
-                textX = Utilities.dp(19) + (chat ? Utilities.dp(52) : 0);
-                textY = Utilities.dp(10) + namesOffset;
-            }
-            wasLayout = true;
-        }
-    }
-
     @Override
     protected void onDraw(Canvas canvas) {
         super.onDraw(canvas);
@@ -191,17 +167,20 @@ protected void onDraw(Canvas canvas) {
             return;
         }
 
+        if (currentMessageObject.messageOwner.out) {
+            textX = layoutWidth - backgroundWidth + Utilities.dp(10);
+            textY = Utilities.dp(10) + namesOffset;
+        } else {
+            textX = Utilities.dp(19) + (chat ? Utilities.dp(52) : 0);
+            textY = Utilities.dp(10) + namesOffset;
+        }
+
         for (int a = firstVisibleBlockNum; a <= lastVisibleBlockNum; a++) {
             MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(a);
-            float y = textY + block.textYOffset;
-            if (intersect(y, y + currentMessageObject.blockHeight, visibleY, visibleY + visibleHeight)) {
-                canvas.save();
-                canvas.translate(textX - (int)Math.ceil(block.textXOffset), textY + block.textYOffset);
-                block.textLayout.draw(canvas);
-                canvas.restore();
-            } else {
-                break;
-            }
+            canvas.save();
+            canvas.translate(textX - (int)Math.ceil(block.textXOffset), textY + block.textYOffset);
+            block.textLayout.draw(canvas);
+            canvas.restore();
         }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 585cb17c5..cf4f78551 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -193,7 +193,7 @@ public boolean onCreateActionMode(ActionMode actionMode, Menu menu) {
             } else {
                 inflater.inflate(R.menu.messages_encrypted_menu, menu);
             }
-            menu.findItem(R.id.copy).setVisible(selectedMessagesCanCopyIds.size() == 1);
+            menu.findItem(R.id.copy).setVisible(selectedMessagesCanCopyIds.size() != 0);
             return true;
         }
 
@@ -206,14 +206,25 @@ public boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {
         public boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem) {
             switch (menuItem.getItemId()) {
                 case R.id.copy: {
-                    MessageObject messageObject = (MessageObject)selectedMessagesCanCopyIds.values().toArray()[0];
-                    if(android.os.Build.VERSION.SDK_INT < 11) {
-                        android.text.ClipboardManager clipboard = (android.text.ClipboardManager)parentActivity.getSystemService(Context.CLIPBOARD_SERVICE);
-                        clipboard.setText(messageObject.messageOwner.message);
-                    } else {
-                        android.content.ClipboardManager clipboard = (android.content.ClipboardManager)parentActivity.getSystemService(Context.CLIPBOARD_SERVICE);
-                        android.content.ClipData clip = android.content.ClipData.newPlainText("label", messageObject.messageOwner.message);
-                        clipboard.setPrimaryClip(clip);
+                    String str = "";
+                    ArrayList<Integer> ids = new ArrayList<Integer>(selectedMessagesCanCopyIds.keySet());
+                    Collections.sort(ids);
+                    for (Integer id : ids) {
+                        MessageObject messageObject = selectedMessagesCanCopyIds.get(id);
+                        if (str.length() != 0) {
+                            str += "\n";
+                        }
+                        str += messageObject.messageOwner.message;
+                    }
+                    if (str.length() != 0) {
+                        if(android.os.Build.VERSION.SDK_INT < 11) {
+                            android.text.ClipboardManager clipboard = (android.text.ClipboardManager)parentActivity.getSystemService(Context.CLIPBOARD_SERVICE);
+                            clipboard.setText(str);
+                        } else {
+                            android.content.ClipboardManager clipboard = (android.content.ClipboardManager)parentActivity.getSystemService(Context.CLIPBOARD_SERVICE);
+                            android.content.ClipData clip = android.content.ClipData.newPlainText("label", str);
+                            clipboard.setPrimaryClip(clip);
+                        }
                     }
                     break;
                 }
@@ -231,7 +242,7 @@ public boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem) {
                     args.putBoolean("serverOnly", true);
                     fragment.setArguments(args);
                     fragment.delegate = ChatActivity.this;
-                    ((ApplicationActivity)parentActivity).presentFragment(fragment, "select_chat", false);
+                    ((LaunchActivity)parentActivity).presentFragment(fragment, "select_chat", false);
                     break;
                 }
             }
@@ -1007,25 +1018,14 @@ private void addToSelectedMessages(MessageObject messageObject) {
             if (messageObject.type == 0 || messageObject.type == 1 || messageObject.type == 8 || messageObject.type == 9) {
                 selectedMessagesCanCopyIds.remove(messageObject.messageOwner.id);
             }
-            if (selectedMessagesIds.size() == 1) {
-                if (mActionMode != null && mActionMode.getMenu() != null) {
-                    mActionMode.getMenu().findItem(R.id.copy).setVisible(selectedMessagesCanCopyIds.size() == 1);
-                }
-            }
         } else {
-            boolean update = false;
-            if (selectedMessagesIds.size() == 1) {
-                update = true;
-            }
             selectedMessagesIds.put(messageObject.messageOwner.id, messageObject);
             if (messageObject.type == 0 || messageObject.type == 1 || messageObject.type == 8 || messageObject.type == 9) {
                 selectedMessagesCanCopyIds.put(messageObject.messageOwner.id, messageObject);
             }
-            if (update) {
-                if (mActionMode != null && mActionMode.getMenu() != null) {
-                    mActionMode.getMenu().findItem(R.id.copy).setVisible(false);
-                }
-            }
+        }
+        if (mActionMode != null && mActionMode.getMenu() != null) {
+            mActionMode.getMenu().findItem(R.id.copy).setVisible(selectedMessagesCanCopyIds.size() != 0);
         }
     }
 
@@ -1220,27 +1220,13 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
         if (resultCode == Activity.RESULT_OK) {
             if (requestCode == 0) {
                 Utilities.addMediaToGallery(currentPicturePath);
-                processSendingPhoto(currentPicturePath);
+                processSendingPhoto(currentPicturePath, null);
                 currentPicturePath = null;
             } else if (requestCode == 1) {
                 if (data == null) {
                     return;
                 }
-                Uri imageUri = data.getData();
-                if (imageUri == null || imageUri.getScheme() == null) {
-                    return;
-                }
-                String imageFilePath = null;
-                if (imageUri.getScheme().contains("file")) {
-                    imageFilePath = imageUri.getPath();
-                } else {
-                    try {
-                        imageFilePath = Utilities.getPath(imageUri);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-                processSendingPhoto(imageFilePath);
+                processSendingPhoto(null, data.getData());
             } else if (requestCode == 2) {
                 String videoPath = null;
                 if (data != null) {
@@ -1293,11 +1279,11 @@ public boolean processSendingText(String text) {
         return false;
     }
 
-    public void processSendingPhoto(String imageFilePath) {
-        if (imageFilePath == null || imageFilePath.length() == 0) {
+    public void processSendingPhoto(String imageFilePath, Uri imageUri) {
+        if ((imageFilePath == null || imageFilePath.length() == 0) && imageUri == null) {
             return;
         }
-        TLRPC.TL_photo photo = MessagesController.Instance.generatePhotoSizes(imageFilePath);
+        TLRPC.TL_photo photo = MessagesController.Instance.generatePhotoSizes(imageFilePath, imageUri);
         if (photo != null) {
             MessagesController.Instance.sendMessage(photo, dialog_id);
             if (chatListView != null) {
@@ -2070,7 +2056,7 @@ public void onClick(View v) {
                                 Bundle args = new Bundle();
                                 args.putInt("user_id", currentUser.id);
                                 fragment.setArguments(args);
-                                ((ApplicationActivity)parentActivity).presentFragment(fragment, "add_contact_" + currentUser.id, false);
+                                ((LaunchActivity)parentActivity).presentFragment(fragment, "add_contact_" + currentUser.id, false);
                             }
                         });
                     }
@@ -2189,7 +2175,7 @@ public void applySelfActionBar() {
         actionBar.setDisplayShowCustomEnabled(false);
         actionBar.setCustomView(null);
         updateSubtitle();
-        ((ApplicationActivity)parentActivity).fixBackButton();
+        ((LaunchActivity)parentActivity).fixBackButton();
     }
 
     @Override
@@ -2228,8 +2214,8 @@ public void onResume() {
         if (getActivity() == null) {
             return;
         }
-        ((ApplicationActivity)parentActivity).showActionBar();
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).showActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
         fixLayout();
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         String lastMessageText = preferences.getString("dialog_" + dialog_id, null);
@@ -2394,7 +2380,7 @@ public void onClick(View view) {
                         args.putLong("dialog_id", dialog_id);
                     }
                     fragment.setArguments(args);
-                    ((ApplicationActivity) parentActivity).presentFragment(fragment, "user_" + currentUser.id, swipeOpening);
+                    ((LaunchActivity) parentActivity).presentFragment(fragment, "user_" + currentUser.id, swipeOpening);
                 } else if (currentChat != null) {
                     if (info != null) {
                         if (info instanceof TLRPC.TL_chatParticipantsForbidden) {
@@ -2409,7 +2395,7 @@ public void onClick(View view) {
                     Bundle args = new Bundle();
                     args.putInt("chat_id", currentChat.id);
                     fragment.setArguments(args);
-                    ((ApplicationActivity) parentActivity).presentFragment(fragment, "chat_" + currentChat.id, swipeOpening);
+                    ((LaunchActivity) parentActivity).presentFragment(fragment, "chat_" + currentChat.id, swipeOpening);
                 }
             }
         });
@@ -2628,7 +2614,7 @@ private void processSelectedOption(int option) {
                 args.putBoolean("serverOnly", true);
                 fragment.setArguments(args);
                 fragment.delegate = this;
-                ((ApplicationActivity)parentActivity).presentFragment(fragment, "select_chat", false);
+                ((LaunchActivity)parentActivity).presentFragment(fragment, "select_chat", false);
             }
         } else if (option == 3) {
             if (selectedObject != null) {
@@ -2691,14 +2677,14 @@ public void didSelectDialog(MessagesActivity activity, long did) {
                         fragment.scrollToTopOnResume = true;
                         ActionBarActivity act = (ActionBarActivity)getActivity();
                         if (inflaterActivity != null) {
-                            ((ApplicationActivity)inflaterActivity).presentFragment(fragment, "chat" + Math.random(), false);
+                            ((LaunchActivity)inflaterActivity).presentFragment(fragment, "chat" + Math.random(), false);
                         }
                     } else if (lower_part < 0) {
                         bundle.putInt("chat_id", -lower_part);
                         fragment.setArguments(bundle);
                         fragment.scrollToTopOnResume = true;
                         if (inflaterActivity != null) {
-                            ((ApplicationActivity)inflaterActivity).presentFragment(fragment, "chat" + Math.random(), false);
+                            ((LaunchActivity)inflaterActivity).presentFragment(fragment, "chat" + Math.random(), false);
                         }
                     }
                     removeSelfFromStack();
@@ -2814,13 +2800,13 @@ public boolean onOptionsItemSelected(MenuItem item) {
                     return true;
                 }
                 LocationActivity fragment = new LocationActivity();
-                ((ApplicationActivity)parentActivity).presentFragment(fragment, "location", false);
+                ((LaunchActivity)parentActivity).presentFragment(fragment, "location", false);
                 break;
             }
             case R.id.attach_document: {
                 DocumentSelectActivity fragment = new DocumentSelectActivity();
                 fragment.delegate = this;
-                ((ApplicationActivity)parentActivity).presentFragment(fragment, "document", false);
+                ((LaunchActivity)parentActivity).presentFragment(fragment, "document", false);
                 break;
             }
         }
@@ -3111,7 +3097,7 @@ public void didPressedUserAvatar(ChatBaseCell cell, TLRPC.User user) {
                             Bundle args = new Bundle();
                             args.putInt("user_id", user.id);
                             fragment.setArguments(args);
-                            ((ApplicationActivity)parentActivity).presentFragment(fragment, "user_" + user.id, false);
+                            ((LaunchActivity)parentActivity).presentFragment(fragment, "user_" + user.id, false);
                         }
                     }
                 };
@@ -3713,7 +3699,7 @@ public void onClick(View view) {
                         args.putInt("user_id", message.messageOwner.media.user_id);
                         args.putString("phone", message.messageOwner.media.phone_number);
                         fragment.setArguments(args);
-                        ((ApplicationActivity)parentActivity).presentFragment(fragment, "add_contact_" + message.messageOwner.media.user_id, false);
+                        ((LaunchActivity)parentActivity).presentFragment(fragment, "add_contact_" + message.messageOwner.media.user_id, false);
                     }
                 });
 
@@ -3742,7 +3728,7 @@ public void onClick(View view) {
                                 Bundle args = new Bundle();
                                 args.putInt("user_id", message.messageOwner.media.user_id);
                                 fragment.setArguments(args);
-                                ((ApplicationActivity)parentActivity).presentFragment(fragment, "user_" + message.messageOwner.media.user_id, false);
+                                ((LaunchActivity)parentActivity).presentFragment(fragment, "user_" + message.messageOwner.media.user_id, false);
                             }
                         }
                     }
@@ -3767,7 +3753,7 @@ public void onClick(View view) {
                                 Bundle args = new Bundle();
                                 args.putInt("user_id", message.messageOwner.media.audio.user_id);
                                 fragment.setArguments(args);
-                                ((ApplicationActivity)parentActivity).presentFragment(fragment, "user_" + message.messageOwner.media.audio.user_id, false);
+                                ((LaunchActivity)parentActivity).presentFragment(fragment, "user_" + message.messageOwner.media.audio.user_id, false);
                             }
                         }
                     }
@@ -3796,7 +3782,7 @@ public void onClick(View view) {
                             Bundle args = new Bundle();
                             args.putInt("user_id", message.messageOwner.from_id);
                             fragment.setArguments(args);
-                            ((ApplicationActivity)parentActivity).presentFragment(fragment, "user_" + message.messageOwner.from_id, false);
+                            ((LaunchActivity)parentActivity).presentFragment(fragment, "user_" + message.messageOwner.from_id, false);
                         }
                     }
                 });
@@ -3897,7 +3883,7 @@ private void processOnClick(View view) {
                     }
                     NotificationCenter.Instance.addToMemCache(0, message);
                     LocationActivity fragment = new LocationActivity();
-                    ((ApplicationActivity)parentActivity).presentFragment(fragment, "location_view", false);
+                    ((LaunchActivity)parentActivity).presentFragment(fragment, "location_view", false);
                 } else if (message.type == 2 || message.type == 3) {
                     if (photoFile == null || photoObjectToSet == null || photoFile != null && photoFile.exists()) {
                         NotificationCenter.Instance.addToMemCache(51, message);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
index bfd34b48f..8b839f3f7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileActivity.java
@@ -194,7 +194,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         Bundle bundle = new Bundle();
                         bundle.putLong("dialog_id", -chat_id);
                         fragment.setArguments(bundle);
-                        ((ApplicationActivity)parentActivity).presentFragment(fragment, "media_chat_" + chat_id, false);
+                        ((LaunchActivity)parentActivity).presentFragment(fragment, "media_chat_" + chat_id, false);
                     } else {
                         int size = 0;
                         if (info != null) {
@@ -209,7 +209,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                             Bundle args = new Bundle();
                             args.putInt("user_id", user_id);
                             fragment.setArguments(args);
-                            ((ApplicationActivity)parentActivity).presentFragment(fragment, "user_" + user_id, false);
+                            ((LaunchActivity)parentActivity).presentFragment(fragment, "user_" + user_id, false);
                         } else {
                             if (size + 7 == i) {
                                 if (info.participants.size() < 200) {
@@ -332,7 +332,7 @@ public void applySelfActionBar() {
             title.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
             title.setCompoundDrawablePadding(0);
         }
-        ((ApplicationActivity)parentActivity).fixBackButton();
+        ((LaunchActivity)parentActivity).fixBackButton();
     }
 
     @Override
@@ -344,8 +344,8 @@ public void onResume() {
         if (listViewAdapter != null) {
             listViewAdapter.notifyDataSetChanged();
         }
-        ((ApplicationActivity)parentActivity).showActionBar();
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).showActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
     }
 
     @Override
@@ -457,7 +457,7 @@ private void openAddMenu() {
             NotificationCenter.Instance.addToMemCache(7, users);
         }
         fragment.setArguments(bundle);
-        ((ApplicationActivity)parentActivity).presentFragment(fragment, "contacts_block", false);
+        ((LaunchActivity)parentActivity).presentFragment(fragment, "contacts_block", false);
     }
 
     private void kickUser(TLRPC.TL_chatParticipant user) {
@@ -549,7 +549,7 @@ public void onClick(View view) {
                             Bundle bundle = new Bundle();
                             bundle.putInt("chat_id", chat_id);
                             fragment.setArguments(bundle);
-                            ((ApplicationActivity)parentActivity).presentFragment(fragment, "chat_name_" + chat_id, false);
+                            ((LaunchActivity)parentActivity).presentFragment(fragment, "chat_name_" + chat_id, false);
                         }
                     });
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java
index a2ca8c541..50562c30c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatProfileChangeNameActivity.java
@@ -129,7 +129,7 @@ public void onResume() {
         if (getActivity() == null) {
             return;
         }
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
 
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         boolean animations = preferences.getBoolean("view_animations", true);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
index 83641ba75..0fec27eb7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
@@ -214,7 +214,7 @@ public void onResume() {
         if (getActivity() == null) {
             return;
         }
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
 
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         boolean animations = preferences.getBoolean("view_animations", true);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index d5a69c3f2..64dc2cfb4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -174,7 +174,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                                 Bundle bundle = new Bundle();
                                 bundle.putInt("user_id", user.id);
                                 fragment.setArguments(bundle);
-                                ((ApplicationActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), destroyAfterSelect, false);
+                                ((LaunchActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), destroyAfterSelect, false);
                             }
                         }
                     } else {
@@ -235,7 +235,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                                     Bundle bundle = new Bundle();
                                     bundle.putInt("user_id", user.id);
                                     fragment.setArguments(bundle);
-                                    ((ApplicationActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), destroyAfterSelect, false);
+                                    ((LaunchActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), destroyAfterSelect, false);
                                 }
                             }
                         } else {
@@ -357,7 +357,7 @@ public void applySelfActionBar() {
             actionBar.setTitle(getStringEntry(R.string.Contacts));
         }
 
-        ((ApplicationActivity)parentActivity).fixBackButton();
+        ((LaunchActivity)parentActivity).fixBackButton();
     }
 
     @Override
@@ -373,8 +373,8 @@ public void onResume() {
             listViewAdapter.notifyDataSetChanged();
         }
         firstStart = false;
-        ((ApplicationActivity)parentActivity).showActionBar();
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).showActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
     }
 
     @Override
@@ -478,7 +478,7 @@ public boolean onMenuItemActionCollapse(MenuItem menuItem) {
                 }
                 listView.setFastScrollEnabled(true);
                 listView.setVerticalScrollBarEnabled(false);
-                ((ApplicationActivity)parentActivity).updateActionBar();
+                ((LaunchActivity)parentActivity).updateActionBar();
 
                 epmtyTextView.setText(getStringEntry(R.string.NoContacts));
                 return true;
@@ -504,7 +504,7 @@ public void didReceivedNotification(int id, Object... args) {
                 Bundle bundle = new Bundle();
                 bundle.putInt("enc_id", encryptedChat.id);
                 fragment.setArguments(bundle);
-                ((ApplicationActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), true, false);
+                ((LaunchActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), true, false);
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
index e1598d60a..61d3edcc6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
@@ -240,8 +240,8 @@ public void onResume() {
             listAdapter.notifyDataSetChanged();
         }
         firstStart = false;
-        ((ApplicationActivity)parentActivity).showActionBar();
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).showActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
index 27ce632f9..da629ca7d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
@@ -294,8 +294,8 @@ public void onResume() {
         if (getActivity() == null) {
             return;
         }
-        ((ApplicationActivity)parentActivity).showActionBar();
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).showActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
     }
 
     public Emoji.XImageSpan createAndPutChipForUser(TLRPC.User user) {
@@ -426,7 +426,7 @@ public void onClick(View view) {
                 } else {
                     return;
                 }
-                ((ApplicationActivity)parentActivity).presentFragment(new GroupCreateFinalActivity(), "group_craate_final", false);
+                ((LaunchActivity)parentActivity).presentFragment(new GroupCreateFinalActivity(), "group_craate_final", false);
             }
         });
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
index 3b088bfaa..ddc9d4a54 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
@@ -162,8 +162,8 @@ public void onResume() {
         if (getActivity() == null) {
             return;
         }
-        ((ApplicationActivity)parentActivity).showActionBar();
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).showActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
     }
 
     @Override
@@ -244,7 +244,7 @@ public void run() {
                     Bundle bundle = new Bundle();
                     bundle.putInt("chat_id", (Integer)args[0]);
                     fragment.setArguments(bundle);
-                    ((ApplicationActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), true, false);
+                    ((LaunchActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), true, false);
                 }
             });
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
index 0d9c703ca..d76d69f6d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
@@ -111,8 +111,8 @@ public void onResume() {
         if (getActivity() == null) {
             return;
         }
-        ((ApplicationActivity)parentActivity).showActionBar();
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).showActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
         fixLayout();
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index b972cc5b2..259926654 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -8,90 +8,235 @@
 
 package org.telegram.ui;
 
+import android.app.Activity;
 import android.app.NotificationManager;
 import android.content.Context;
 import android.content.Intent;
+import android.content.SharedPreferences;
 import android.database.Cursor;
+import android.graphics.PixelFormat;
 import android.net.Uri;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.Parcelable;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentTransaction;
+import android.support.v7.app.ActionBar;
+import android.support.v7.app.ActionBarActivity;
+import android.view.Surface;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.WindowManager;
+import android.widget.EditText;
+import android.widget.TextView;
 import android.widget.Toast;
 
-import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
-import org.telegram.ui.Views.PausableActivity;
+import org.telegram.objects.MessageObject;
+import org.telegram.ui.Views.BaseFragment;
+import org.telegram.ui.Views.NotificationView;
 
+import net.hockeyapp.android.CrashManager;
+import net.hockeyapp.android.UpdateManager;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
 import java.util.ArrayList;
 
-public class LaunchActivity extends PausableActivity {
+public class LaunchActivity extends ActionBarActivity implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate {
+    private boolean finished = false;
+    private NotificationView notificationView;
+    private Uri photoPath = null;
+    private String videoPath = null;
+    private String sendingText = null;
+    private String documentPath = null;
+    private Uri[] imagesPathArray = null;
+    private String[] documentsPathArray = null;
+    private int currentConnectionState;
+    private View statusView;
+    private View backStatusButton;
+    private View statusBackground;
+    private TextView statusText;
+    private View containerView;
+
+    @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        if (savedInstanceState != null) {
-            return;
-        }
+        this.setTheme(R.style.Theme_TMessages);
         getWindow().setBackgroundDrawableResource(R.drawable.transparent);
-        getSupportActionBar().hide();
+        getWindow().setFormat(PixelFormat.RGB_565);
+
         if (!UserConfig.clientActivated) {
             Intent intent = getIntent();
-            if (Intent.ACTION_SEND.equals(intent.getAction())) {
+            if (intent != null && intent.getAction() != null && Intent.ACTION_SEND.equals(intent.getAction()) || intent.getAction().equals(Intent.ACTION_SEND_MULTIPLE)) {
                 finish();
                 return;
             }
             Intent intent2 = new Intent(this, IntroActivity.class);
             startActivity(intent2);
             finish();
-        } else {
-            Intent intent = getIntent();
-            if (intent != null && intent.getAction() != null) {
-                if (Intent.ACTION_SEND.equals(intent.getAction())) {
-                    boolean error = false;
-                    String type = intent.getType();
-                    if (type != null && type.equals("text/plain")) {
-                        String text = intent.getStringExtra(Intent.EXTRA_TEXT);
-                        if (text != null && text.length() != 0) {
-                            NotificationCenter.Instance.addToMemCache(535, text);
-                        } else {
-                            error = true;
-                        }
+            return;
+        }
+
+        int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
+        if (resourceId > 0) {
+            Utilities.statusBarHeight = getResources().getDimensionPixelSize(resourceId);
+        }
+
+        NotificationCenter.Instance.postNotificationName(702, this);
+        currentConnectionState = ConnectionsManager.Instance.connectionState;
+        for (BaseFragment fragment : ApplicationLoader.fragmentsStack) {
+            if (fragment.fragmentView != null) {
+                ViewGroup parent = (ViewGroup)fragment.fragmentView.getParent();
+                if (parent != null) {
+                    parent.removeView(fragment.fragmentView);
+                }
+                fragment.fragmentView = null;
+            }
+            fragment.parentActivity = this;
+        }
+        setContentView(R.layout.application_layout);
+        NotificationCenter.Instance.addObserver(this, 1234);
+        NotificationCenter.Instance.addObserver(this, 658);
+        NotificationCenter.Instance.addObserver(this, 701);
+        NotificationCenter.Instance.addObserver(this, 702);
+        NotificationCenter.Instance.addObserver(this, 703);
+        NotificationCenter.Instance.addObserver(this, GalleryImageViewer.needShowAllMedia);
+        getSupportActionBar().setLogo(R.drawable.ab_icon_fixed2);
+
+        statusView = getLayoutInflater().inflate(R.layout.updating_state_layout, null);
+        statusBackground = statusView.findViewById(R.id.back_button_background);
+        backStatusButton = statusView.findViewById(R.id.back_button);
+        containerView = findViewById(R.id.container);
+        statusText = (TextView)statusView.findViewById(R.id.status_text);
+        statusBackground.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (ApplicationLoader.fragmentsStack.size() > 1) {
+                    onBackPressed();
+                }
+            }
+        });
+
+        if (ApplicationLoader.fragmentsStack.isEmpty()) {
+            MessagesActivity fragment = new MessagesActivity();
+            fragment.onFragmentCreate();
+            ApplicationLoader.fragmentsStack.add(fragment);
+        }
+
+        handleIntent(getIntent(), false);
+    }
+
+    @SuppressWarnings("unchecked")
+    private void prepareForHideShowActionBar() {
+        try {
+            Class firstClass = getSupportActionBar().getClass();
+            Class aClass = firstClass.getSuperclass();
+            if (aClass == android.support.v7.app.ActionBar.class) {
+                Method method = firstClass.getDeclaredMethod("setShowHideAnimationEnabled", boolean.class);
+                method.invoke(getSupportActionBar(), false);
+            } else {
+                Field field = aClass.getDeclaredField("mActionBar");
+                field.setAccessible(true);
+                Method method = field.get(getSupportActionBar()).getClass().getDeclaredMethod("setShowHideAnimationEnabled", boolean.class);
+                method.invoke(field.get(getSupportActionBar()), false);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    public void showActionBar() {
+        prepareForHideShowActionBar();
+        getSupportActionBar().show();
+    }
+
+    public void hideActionBar() {
+        prepareForHideShowActionBar();
+        getSupportActionBar().hide();
+    }
+
+    private void handleIntent(Intent intent, boolean isNew) {
+        boolean pushOpened = false;
+
+        Integer push_user_id = 0;
+        Integer push_chat_id = 0;
+        Integer push_enc_id = 0;
+        Integer open_settings = 0;
+
+        photoPath = null;
+        videoPath = null;
+        sendingText = null;
+        documentPath = null;
+        imagesPathArray = null;
+        documentsPathArray = null;
+
+        if (intent != null && intent.getAction() != null) {
+            if (Intent.ACTION_SEND.equals(intent.getAction())) {
+                boolean error = false;
+                String type = intent.getType();
+                if (type != null && type.equals("text/plain")) {
+                    String text = intent.getStringExtra(Intent.EXTRA_TEXT);
+                    if (text != null && text.length() != 0) {
+                        sendingText = text;
+                    } else {
+                        error = true;
+                    }
+                } else {
+                    Parcelable parcelable = intent.getParcelableExtra(Intent.EXTRA_STREAM);
+                    if (parcelable == null) {
+                        return;
+                    }
+                    String path = null;
+                    if (!(parcelable instanceof Uri)) {
+                        parcelable = Uri.parse(parcelable.toString());
+                    }
+                    if (parcelable != null && type != null && type.startsWith("image/")) {
+                        photoPath = (Uri)parcelable;
                     } else {
-                        Parcelable parcelable = intent.getParcelableExtra(Intent.EXTRA_STREAM);
-                        if (parcelable == null) {
-                            return;
-                        }
-                        String path = null;
-                        if (!(parcelable instanceof Uri)) {
-                            parcelable = Uri.parse(parcelable.toString());
-                        }
                         path = Utilities.getPath((Uri)parcelable);
                         if (path != null) {
                             if (path.startsWith("file:")) {
                                 path = path.replace("file://", "");
                             }
-                            if (type != null && type.startsWith("image/")) {
-                                NotificationCenter.Instance.addToMemCache(533, path);
-                            } else if (type != null && type.startsWith("video/")) {
-                                NotificationCenter.Instance.addToMemCache(534, path);
+                            if (type != null && type.startsWith("video/")) {
+                                videoPath = path;
                             } else {
-                                NotificationCenter.Instance.addToMemCache(536, path);
+                                documentPath = path;
                             }
                         } else {
                             error = true;
                         }
-                        if (error) {
-                            Toast.makeText(this, "Unsupported content", Toast.LENGTH_SHORT).show();
-                        }
                     }
-                } else if (intent.getAction().equals(Intent.ACTION_SEND_MULTIPLE)) {
-                    boolean error = false;
-                    try {
-                        ArrayList<Parcelable> uris = intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
-                        String type = intent.getType();
-                        if (uris != null) {
+                    if (error) {
+                        Toast.makeText(this, "Unsupported content", Toast.LENGTH_SHORT).show();
+                    }
+                }
+            } else if (intent.getAction().equals(Intent.ACTION_SEND_MULTIPLE)) {
+                boolean error = false;
+                try {
+                    ArrayList<Parcelable> uris = intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
+                    String type = intent.getType();
+                    if (uris != null) {
+                        if (type != null && type.startsWith("image/")) {
+                            Uri[] uris2 = new Uri[uris.size()];
+                            for (int i = 0; i < uris2.length; i++) {
+                                Parcelable parcelable = uris.get(i);
+                                if (!(parcelable instanceof Uri)) {
+                                    parcelable = Uri.parse(parcelable.toString());
+                                }
+                                uris2[i] = (Uri)parcelable;
+                            }
+                            imagesPathArray = uris2;
+                        } else {
                             String[] uris2 = new String[uris.size()];
                             for (int i = 0; i < uris2.length; i++) {
                                 Parcelable parcelable = uris.get(i);
@@ -106,45 +251,227 @@ protected void onCreate(Bundle savedInstanceState) {
                                     uris2[i] = path;
                                 }
                             }
-                            if (type != null && type.startsWith("image/")) {
-                                NotificationCenter.Instance.addToMemCache(537, uris2);
-                            } else {
-                                NotificationCenter.Instance.addToMemCache(538, uris2);
-                            }
-                        } else {
-                            error = true;
+                            documentsPathArray = uris2;
                         }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
+                    } else {
                         error = true;
                     }
-                    if (error) {
-                        Toast.makeText(this, "Unsupported content", Toast.LENGTH_SHORT).show();
-                    }
-                } else if (Intent.ACTION_VIEW.equals(intent.getAction())) {
-                    try {
-                        Cursor cursor = getContentResolver().query(intent.getData(), null, null, null, null);
-                        if (cursor != null) {
-                            if (cursor.moveToFirst()) {
-                                int userId = cursor.getInt(cursor.getColumnIndex("DATA4"));
-                                NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
-                                NotificationCenter.Instance.addToMemCache("push_user_id", userId);
-                            }
-                            cursor.close();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                    error = true;
+                }
+                if (error) {
+                    Toast.makeText(this, "Unsupported content", Toast.LENGTH_SHORT).show();
+                }
+            } else if (Intent.ACTION_VIEW.equals(intent.getAction())) {
+                try {
+                    Cursor cursor = getContentResolver().query(intent.getData(), null, null, null, null);
+                    if (cursor != null) {
+                        if (cursor.moveToFirst()) {
+                            int userId = cursor.getInt(cursor.getColumnIndex("DATA4"));
+                            NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
+                            push_user_id = userId;
                         }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
+                        cursor.close();
                     }
-                } else if (intent.getAction().equals("org.telegram.messenger.OPEN_ACCOUNT")) {
-                    NotificationCenter.Instance.addToMemCache("open_settings", 1);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
                 }
+            } else if (intent.getAction().equals("org.telegram.messenger.OPEN_ACCOUNT")) {
+                open_settings = 1;
             }
-            openNotificationChat();
-            Intent intent2 = new Intent(this, ApplicationActivity.class);
-            startActivity(intent2);
-            finish();
         }
+
+        if ((getIntent().getFlags() & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) == 0) {
+            int chatId = getIntent().getIntExtra("chatId", 0);
+            int userId = getIntent().getIntExtra("userId", 0);
+            int encId = getIntent().getIntExtra("encId", 0);
+            if (chatId != 0) {
+                TLRPC.Chat chat = MessagesController.Instance.chats.get(chatId);
+                if (chat != null) {
+                    NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
+                    push_chat_id = chatId;
+                }
+            } else if (userId != 0) {
+                TLRPC.User user = MessagesController.Instance.users.get(userId);
+                if (user != null) {
+                    NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
+                    push_user_id = userId;
+                }
+            } else if (encId != 0) {
+                TLRPC.EncryptedChat chat = MessagesController.Instance.encryptedChats.get(encId);
+                if (chat != null) {
+                    NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
+                    push_enc_id = encId;
+                }
+            }
+        }
+
+        if (push_user_id != 0) {
+            if (push_user_id == UserConfig.clientUserId) {
+                open_settings = 1;
+            } else {
+                ChatActivity fragment = new ChatActivity();
+                Bundle bundle = new Bundle();
+                bundle.putInt("user_id", push_user_id);
+                fragment.setArguments(bundle);
+                if (fragment.onFragmentCreate()) {
+                    pushOpened = true;
+                    ApplicationLoader.fragmentsStack.add(fragment);
+                    getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chat" + Math.random()).commitAllowingStateLoss();
+                }
+            }
+        } else if (push_chat_id != 0) {
+            ChatActivity fragment = new ChatActivity();
+            Bundle bundle = new Bundle();
+            bundle.putInt("chat_id", push_chat_id);
+            fragment.setArguments(bundle);
+            if (fragment.onFragmentCreate()) {
+                pushOpened = true;
+                ApplicationLoader.fragmentsStack.add(fragment);
+                getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chat" + Math.random()).commitAllowingStateLoss();
+            }
+        }  else if (push_enc_id != 0) {
+            ChatActivity fragment = new ChatActivity();
+            Bundle bundle = new Bundle();
+            bundle.putInt("enc_id", push_enc_id);
+            fragment.setArguments(bundle);
+            if (fragment.onFragmentCreate()) {
+                pushOpened = true;
+                ApplicationLoader.fragmentsStack.add(fragment);
+                getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chat" + Math.random()).commitAllowingStateLoss();
+            }
+        }
+        if (videoPath != null || photoPath != null || sendingText != null || documentPath != null || documentsPathArray != null || imagesPathArray != null) {
+            MessagesActivity fragment = new MessagesActivity();
+            fragment.selectAlertString = R.string.ForwardMessagesTo;
+            fragment.animationType = 1;
+            Bundle args = new Bundle();
+            args.putBoolean("onlySelect", true);
+            fragment.setArguments(args);
+            fragment.delegate = this;
+            ApplicationLoader.fragmentsStack.add(fragment);
+            fragment.onFragmentCreate();
+            getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, fragment.getTag()).commitAllowingStateLoss();
+            pushOpened = true;
+        }
+        if (open_settings != 0) {
+            SettingsActivity fragment = new SettingsActivity();
+            ApplicationLoader.fragmentsStack.add(fragment);
+            fragment.onFragmentCreate();
+            getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "settings").commitAllowingStateLoss();
+            pushOpened = true;
+        }
+        if (!pushOpened && !isNew) {
+            BaseFragment fragment = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 1);
+            getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, fragment.getTag()).commitAllowingStateLoss();
+        }
+
         getIntent().setAction(null);
+    }
+
+    @Override
+    protected void onNewIntent(Intent intent) {
+        super.onNewIntent(intent);
+        handleIntent(intent, true);
+    }
+
+    @Override
+    public void didSelectDialog(MessagesActivity messageFragment, long dialog_id) {
+        if (dialog_id != 0) {
+            int lower_part = (int)dialog_id;
+
+            ChatActivity fragment = new ChatActivity();
+            Bundle bundle = new Bundle();
+            if (lower_part != 0) {
+                if (lower_part > 0) {
+                    NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
+                    bundle.putInt("user_id", lower_part);
+                    fragment.setArguments(bundle);
+                    fragment.scrollToTopOnResume = true;
+                    presentFragment(fragment, "chat" + Math.random(), true, false);
+                } else if (lower_part < 0) {
+                    NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
+                    bundle.putInt("chat_id", -lower_part);
+                    fragment.setArguments(bundle);
+                    fragment.scrollToTopOnResume = true;
+                    presentFragment(fragment, "chat" + Math.random(), true, false);
+                }
+            } else {
+                NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
+                int chat_id = (int)(dialog_id >> 32);
+                bundle.putInt("enc_id", chat_id);
+                fragment.setArguments(bundle);
+                fragment.scrollToTopOnResume = true;
+                presentFragment(fragment, "chat" + Math.random(), true, false);
+            }
+            if (photoPath != null) {
+                fragment.processSendingPhoto(null, photoPath);
+            } else if (videoPath != null) {
+                fragment.processSendingVideo(videoPath);
+            } else if (sendingText != null) {
+                fragment.processSendingText(sendingText);
+            } else if (documentPath != null) {
+                fragment.processSendingDocument(documentPath);
+            } else if (imagesPathArray != null) {
+                for (Uri path : imagesPathArray) {
+                    fragment.processSendingPhoto(null, path);
+                }
+            } else if (documentsPathArray != null) {
+                for (String path : documentsPathArray) {
+                    fragment.processSendingDocument(path);
+                }
+            }
+            photoPath = null;
+            videoPath = null;
+            sendingText = null;
+            documentPath = null;
+            imagesPathArray = null;
+            documentsPathArray = null;
+        }
+    }
+
+    private void checkForCrashes() {
+        CrashManager.register(this, ConnectionsManager.HOCKEY_APP_HASH);
+    }
+
+    private void checkForUpdates() {
+        if (ConnectionsManager.DEBUG_VERSION) {
+            UpdateManager.register(this, ConnectionsManager.HOCKEY_APP_HASH);
+        }
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+        ApplicationLoader.lastPauseTime = System.currentTimeMillis();
+        if (notificationView != null) {
+            notificationView.hide(false);
+        }
+        View focusView = getCurrentFocus();
+        if (focusView instanceof EditText) {
+            focusView.clearFocus();
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        processOnFinish();
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        if (notificationView == null && getLayoutInflater() != null) {
+            notificationView = (NotificationView) getLayoutInflater().inflate(R.layout.notification_layout, null);
+        }
+        fixLayout();
+        checkForCrashes();
+        checkForUpdates();
+        ApplicationLoader.resetLastPauseTime();
+        supportInvalidateOptionsMenu();
+        updateActionBar();
         try {
             NotificationManager mNotificationManager = (NotificationManager)this.getSystemService(Context.NOTIFICATION_SERVICE);
             mNotificationManager.cancel(1);
@@ -153,31 +480,343 @@ protected void onCreate(Bundle savedInstanceState) {
         }
     }
 
-    private void openNotificationChat() {
-        if ((getIntent().getFlags() & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
+    private void processOnFinish() {
+        if (finished) {
             return;
         }
-        int chatId = getIntent().getIntExtra("chatId", 0);
-        int userId = getIntent().getIntExtra("userId", 0);
-        int encId = getIntent().getIntExtra("encId", 0);
-        if (chatId != 0) {
-            TLRPC.Chat chat = MessagesController.Instance.chats.get(chatId);
-            if (chat != null) {
-                NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
-                NotificationCenter.Instance.addToMemCache("push_chat_id", chatId);
+        finished = true;
+        NotificationCenter.Instance.removeObserver(this, 1234);
+        NotificationCenter.Instance.removeObserver(this, 658);
+        NotificationCenter.Instance.removeObserver(this, 701);
+        NotificationCenter.Instance.removeObserver(this, 702);
+        NotificationCenter.Instance.removeObserver(this, 703);
+        NotificationCenter.Instance.removeObserver(this, GalleryImageViewer.needShowAllMedia);
+        if (notificationView != null) {
+            notificationView.hide(false);
+            notificationView.destroy();
+            notificationView = null;
+        }
+    }
+
+    @Override
+    public void onConfigurationChanged(android.content.res.Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        Utilities.checkDisplaySize();
+        fixLayout();
+    }
+
+    private void fixLayout() {
+        if (containerView != null) {
+            ViewTreeObserver obs = containerView.getViewTreeObserver();
+            obs.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
+                @Override
+                public void onGlobalLayout() {
+                    WindowManager manager = (WindowManager) getSystemService(WINDOW_SERVICE);
+                    int rotation = manager.getDefaultDisplay().getRotation();
+
+                    int height;
+                    int currentActionBarHeight = getSupportActionBar().getHeight();
+                    if (currentActionBarHeight != Utilities.dp(48) && currentActionBarHeight != Utilities.dp(40)) {
+                        height = currentActionBarHeight;
+                    } else {
+                        height = Utilities.dp(48);
+                        if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                            height = Utilities.dp(40);
+                        }
+                    }
+
+                    if (notificationView != null) {
+                        notificationView.applyOrientationPaddings(rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90, height);
+                    }
+
+                    if (Build.VERSION.SDK_INT < 16) {
+                        containerView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
+                    } else {
+                        containerView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
+                    }
+                }
+            });
+        }
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == 1234) {
+            for (BaseFragment fragment : ApplicationLoader.fragmentsStack) {
+                fragment.onFragmentDestroy();
             }
-        } else if (userId != 0) {
-            TLRPC.User user = MessagesController.Instance.users.get(userId);
-            if (user != null) {
-                NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
-                NotificationCenter.Instance.addToMemCache("push_user_id", userId);
+            ApplicationLoader.fragmentsStack.clear();
+            Intent intent2 = new Intent(this, IntroActivity.class);
+            startActivity(intent2);
+            processOnFinish();
+            finish();
+        } else if (id == GalleryImageViewer.needShowAllMedia) {
+            long dialog_id = (Long)args[0];
+            MediaActivity fragment = new MediaActivity();
+            Bundle bundle = new Bundle();
+            if (dialog_id != 0) {
+                bundle.putLong("dialog_id", dialog_id);
+                fragment.setArguments(bundle);
+                presentFragment(fragment, "media_" + dialog_id, false);
             }
-        } else if (encId != 0) {
-            TLRPC.EncryptedChat chat = MessagesController.Instance.encryptedChats.get(encId);
-            if (chat != null) {
+        } else if (id == 658) {
+            Integer push_user_id = (Integer)NotificationCenter.Instance.getFromMemCache("push_user_id", 0);
+            Integer push_chat_id = (Integer)NotificationCenter.Instance.getFromMemCache("push_chat_id", 0);
+            Integer push_enc_id = (Integer)NotificationCenter.Instance.getFromMemCache("push_enc_id", 0);
+
+            if (push_user_id != 0) {
                 NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
-                NotificationCenter.Instance.addToMemCache("push_enc_id", encId);
+                ChatActivity fragment = new ChatActivity();
+                Bundle bundle = new Bundle();
+                bundle.putInt("user_id", push_user_id);
+                fragment.setArguments(bundle);
+                if (fragment.onFragmentCreate()) {
+                    if (ApplicationLoader.fragmentsStack.size() > 0) {
+                        BaseFragment lastFragment = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 1);
+                        lastFragment.willBeHidden();
+                    }
+                    ApplicationLoader.fragmentsStack.add(fragment);
+                    getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chat" + Math.random()).commitAllowingStateLoss();
+                }
+            } else if (push_chat_id != 0) {
+                NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
+                ChatActivity fragment = new ChatActivity();
+                Bundle bundle = new Bundle();
+                bundle.putInt("chat_id", push_chat_id);
+                fragment.setArguments(bundle);
+                if (fragment.onFragmentCreate()) {
+                    if (ApplicationLoader.fragmentsStack.size() > 0) {
+                        BaseFragment lastFragment = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 1);
+                        lastFragment.willBeHidden();
+                    }
+                    ApplicationLoader.fragmentsStack.add(fragment);
+                    getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chat" + Math.random()).commitAllowingStateLoss();
+                }
+            }  else if (push_enc_id != 0) {
+                NotificationCenter.Instance.postNotificationName(MessagesController.closeChats);
+                ChatActivity fragment = new ChatActivity();
+                Bundle bundle = new Bundle();
+                bundle.putInt("enc_id", push_enc_id);
+                fragment.setArguments(bundle);
+                if (fragment.onFragmentCreate()) {
+                    if (ApplicationLoader.fragmentsStack.size() > 0) {
+                        BaseFragment lastFragment = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 1);
+                        lastFragment.willBeHidden();
+                    }
+                    ApplicationLoader.fragmentsStack.add(fragment);
+                    getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chat" + Math.random()).commitAllowingStateLoss();
+                }
+            }
+        } else if (id == 701) {
+            if (notificationView != null) {
+                MessageObject message = (MessageObject)args[0];
+                notificationView.show(message);
+            }
+        } else if (id == 702) {
+            if (args[0] != this) {
+                processOnFinish();
+            }
+        } else if (id == 703) {
+            int state = (Integer)args[0];
+            if (currentConnectionState != state) {
+                FileLog.e("tmessages", "switch to state " + state);
+                currentConnectionState = state;
+                updateActionBar();
             }
         }
     }
+
+    public void fixBackButton() {
+        if(android.os.Build.VERSION.SDK_INT == 19) {
+            //workaround for back button dissapear
+            try {
+                Class firstClass = getSupportActionBar().getClass();
+                Class aClass = firstClass.getSuperclass();
+                if (aClass == android.support.v7.app.ActionBar.class) {
+
+                } else {
+                    Field field = aClass.getDeclaredField("mActionBar");
+                    field.setAccessible(true);
+                    android.app.ActionBar bar = (android.app.ActionBar)field.get(getSupportActionBar());
+
+                    field = bar.getClass().getDeclaredField("mActionView");
+                    field.setAccessible(true);
+                    View v = (View)field.get(bar);
+                    aClass = v.getClass();
+
+                    field = aClass.getDeclaredField("mHomeLayout");
+                    field.setAccessible(true);
+                    v = (View)field.get(v);
+                    v.setVisibility(View.VISIBLE);
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    public void updateActionBar() {
+        ActionBar actionBar = getSupportActionBar();
+        if (actionBar == null) {
+            return;
+        }
+        BaseFragment currentFragment = null;
+        if (!ApplicationLoader.fragmentsStack.isEmpty()) {
+            currentFragment = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 1);
+        }
+        boolean canApplyLoading = true;
+        if (currentFragment != null && (currentConnectionState == 0 || !currentFragment.canApplyUpdateStatus() || statusView == null)) {
+            currentFragment.applySelfActionBar();
+            canApplyLoading = false;
+        }
+        if (canApplyLoading) {
+            if (statusView != null) {
+                actionBar.setDisplayShowTitleEnabled(false);
+                actionBar.setDisplayShowHomeEnabled(false);
+                actionBar.setDisplayHomeAsUpEnabled(false);
+                actionBar.setDisplayUseLogoEnabled(false);
+                actionBar.setDisplayShowCustomEnabled(true);
+                actionBar.setSubtitle(null);
+
+                if (ApplicationLoader.fragmentsStack.size() > 1) {
+                    backStatusButton.setVisibility(View.VISIBLE);
+                    statusBackground.setEnabled(true);
+                } else {
+                    backStatusButton.setVisibility(View.GONE);
+                    statusBackground.setEnabled(false);
+                }
+
+                if (currentConnectionState == 1) {
+                    statusText.setText(getString(R.string.WaitingForNetwork));
+                } else if (currentConnectionState == 2) {
+                    statusText.setText(getString(R.string.Connecting));
+                } else if (currentConnectionState == 3) {
+                    statusText.setText(getString(R.string.Updating));
+                }
+                if (actionBar.getCustomView() != statusView) {
+                    actionBar.setCustomView(statusView);
+                }
+
+                try {
+                    if (statusView.getLayoutParams() instanceof android.support.v7.app.ActionBar.LayoutParams) {
+                        android.support.v7.app.ActionBar.LayoutParams statusParams = (android.support.v7.app.ActionBar.LayoutParams)statusView.getLayoutParams();
+                        statusText.measure(View.MeasureSpec.makeMeasureSpec(800, View.MeasureSpec.AT_MOST), View.MeasureSpec.makeMeasureSpec(100, View.MeasureSpec.AT_MOST));
+                        statusParams.width = (statusText.getMeasuredWidth() + Utilities.dp(54));
+                        statusView.setLayoutParams(statusParams);
+                    } else if (statusView.getLayoutParams() instanceof android.app.ActionBar.LayoutParams) {
+                        android.app.ActionBar.LayoutParams statusParams = (android.app.ActionBar.LayoutParams)statusView.getLayoutParams();
+                        statusText.measure(View.MeasureSpec.makeMeasureSpec(800, View.MeasureSpec.AT_MOST), View.MeasureSpec.makeMeasureSpec(100, View.MeasureSpec.AT_MOST));
+                        statusParams.width = (statusText.getMeasuredWidth() + Utilities.dp(54));
+                        statusView.setLayoutParams(statusParams);
+                    }
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
+    public void presentFragment(BaseFragment fragment, String tag, boolean bySwipe) {
+        presentFragment(fragment, tag, false, bySwipe);
+    }
+
+    public void presentFragment(BaseFragment fragment, String tag, boolean removeLast, boolean bySwipe) {
+        if (getCurrentFocus() != null) {
+            Utilities.hideKeyboard(getCurrentFocus());
+        }
+        if (!fragment.onFragmentCreate()) {
+            return;
+        }
+        BaseFragment current = null;
+        if (!ApplicationLoader.fragmentsStack.isEmpty()) {
+            current = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 1);
+        }
+        if (current != null) {
+            current.willBeHidden();
+        }
+        FragmentManager fm = getSupportFragmentManager();
+        FragmentTransaction fTrans = fm.beginTransaction();
+        if (removeLast && current != null) {
+            ApplicationLoader.fragmentsStack.remove(ApplicationLoader.fragmentsStack.size() - 1);
+            current.onFragmentDestroy();
+        }
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        boolean animations = preferences.getBoolean("view_animations", true);
+        if (animations) {
+            if (bySwipe) {
+                fTrans.setCustomAnimations(R.anim.slide_left, R.anim.no_anim);
+            } else {
+                fTrans.setCustomAnimations(R.anim.scale_in, R.anim.no_anim);
+            }
+        }
+        fTrans.replace(R.id.container, fragment, tag);
+        fTrans.commitAllowingStateLoss();
+        ApplicationLoader.fragmentsStack.add(fragment);
+    }
+
+    public void removeFromStack(BaseFragment fragment) {
+        ApplicationLoader.fragmentsStack.remove(fragment);
+        fragment.onFragmentDestroy();
+    }
+
+    public void finishFragment(boolean bySwipe) {
+        if (getCurrentFocus() != null) {
+            Utilities.hideKeyboard(getCurrentFocus());
+        }
+        if (ApplicationLoader.fragmentsStack.size() < 2) {
+            for (BaseFragment fragment : ApplicationLoader.fragmentsStack) {
+                fragment.onFragmentDestroy();
+            }
+            ApplicationLoader.fragmentsStack.clear();
+            MessagesActivity fragment = new MessagesActivity();
+            fragment.onFragmentCreate();
+            ApplicationLoader.fragmentsStack.add(fragment);
+            getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment, "chats").commitAllowingStateLoss();
+            return;
+        }
+        BaseFragment fragment = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 1);
+        fragment.onFragmentDestroy();
+        BaseFragment prev = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 2);
+        FragmentManager fm = getSupportFragmentManager();
+        FragmentTransaction fTrans = fm.beginTransaction();
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        boolean animations = preferences.getBoolean("view_animations", true);
+        if (animations) {
+            if (bySwipe) {
+                fTrans.setCustomAnimations(R.anim.no_anim_show, R.anim.slide_right_away);
+            } else {
+                fTrans.setCustomAnimations(R.anim.no_anim_show, R.anim.scale_out);
+            }
+        }
+        fTrans.replace(R.id.container, prev, prev.getTag());
+        fTrans.commitAllowingStateLoss();
+        ApplicationLoader.fragmentsStack.remove(ApplicationLoader.fragmentsStack.size() - 1);
+    }
+
+    @Override
+    public void onBackPressed() {
+        if (ApplicationLoader.fragmentsStack.size() == 1) {
+            ApplicationLoader.fragmentsStack.get(0).onFragmentDestroy();
+            ApplicationLoader.fragmentsStack.clear();
+            processOnFinish();
+            finish();
+            return;
+        }
+        if (!ApplicationLoader.fragmentsStack.isEmpty()) {
+            BaseFragment lastFragment = ApplicationLoader.fragmentsStack.get(ApplicationLoader.fragmentsStack.size() - 1);
+            if (lastFragment.onBackPressed()) {
+                finishFragment(false);
+            }
+        }
+    }
+
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        try {
+            super.onSaveInstanceState(outState);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
index 62a26942e..b113d06d5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
@@ -207,8 +207,8 @@ public void onResume() {
         if (getActivity() == null) {
             return;
         }
-        ((ApplicationActivity)parentActivity).showActionBar();
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).showActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java
index 457368b2d..4bdd64574 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java
@@ -48,6 +48,8 @@
     private EditText phoneField;
     private TextView countryButton;
 
+    private int countryState = 0;
+
     private ArrayList<String> countriesArray = new ArrayList<String>();
     private HashMap<String, String> countriesMap = new HashMap<String, String>();
     private HashMap<String, String> codesMap = new HashMap<String, String>();
@@ -104,17 +106,29 @@ public void afterTextChanged(Editable editable) {
                 ignoreOnTextChange = true;
                 String text = PhoneFormat.stripExceptNumbers(codeField.getText().toString());
                 codeField.setText(text);
-                String country = codesMap.get(text);
-                if (country != null) {
-                    int index = countriesArray.indexOf(country);
-                    if (index != -1) {
-                        ignoreSelection = true;
-                        countryButton.setText(countriesArray.get(index));
+                if (text.length() == 0) {
+                    countryButton.setText(R.string.ChooseCountry);
+                    countryState = 1;
+                } else {
+                    String country = codesMap.get(text);
+                    if (country != null) {
+                        int index = countriesArray.indexOf(country);
+                        if (index != -1) {
+                            ignoreSelection = true;
+                            countryButton.setText(countriesArray.get(index));
 
-                        updatePhoneField();
+                            updatePhoneField();
+                            countryState = 0;
+                        } else {
+                            countryButton.setText(R.string.WrongCountry);
+                            countryState = 2;
+                        }
+                    } else {
+                        countryButton.setText(R.string.WrongCountry);
+                        countryState = 2;
                     }
+                    codeField.setSelection(codeField.getText().length());
                 }
-                codeField.setSelection(codeField.getText().length());
             }
         });
         codeField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
@@ -198,56 +212,50 @@ public int compare(String lhs, String rhs) {
                 }
             });
 
-            boolean codeProceed = false;
-
-            if (!codeProceed) {
-                String country = "RU";
-
-                try {
-                    TelephonyManager telephonyManager = (TelephonyManager)ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
-                    if (telephonyManager != null) {
-                        country = telephonyManager.getSimCountryIso().toUpperCase();
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
+            String country = null;
 
-                if (country == null || country.length() == 0) {
-                    try {
-                        Locale current = ApplicationLoader.applicationContext.getResources().getConfiguration().locale;
-                        country = current.getCountry().toUpperCase();
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-                if (country == null || country.length() == 0) {
-                    country = "RU";
+            try {
+                TelephonyManager telephonyManager = (TelephonyManager)ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
+                if (telephonyManager != null) {
+                    country = telephonyManager.getSimCountryIso().toUpperCase();
                 }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
 
+            if (country != null) {
                 String countryName = languageMap.get(country);
-                if (countryName == null) {
-                    countryName = "Russia";
-                }
-
-                int index = countriesArray.indexOf(countryName);
-                if (index != -1) {
-                    codeField.setText(countriesMap.get(countryName));
+                if (countryName != null) {
+                    int index = countriesArray.indexOf(countryName);
+                    if (index != -1) {
+                        codeField.setText(countriesMap.get(countryName));
+                        countryState = 0;
+                    }
                 }
             }
+            if (codeField.length() == 0) {
+                countryButton.setText(R.string.ChooseCountry);
+                countryState = 1;
+            }
+        }
 
+        if (codeField.length() != 0) {
             Utilities.showKeyboard(phoneField);
             phoneField.requestFocus();
-            phoneField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-                @Override
-                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                    if (i == EditorInfo.IME_ACTION_NEXT) {
-                        delegate.onNextAction();
-                        return true;
-                    }
-                    return false;
-                }
-            });
+        } else {
+            Utilities.showKeyboard(codeField);
+            codeField.requestFocus();
         }
+        phoneField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+            @Override
+            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                if (i == EditorInfo.IME_ACTION_NEXT) {
+                    delegate.onNextAction();
+                    return true;
+                }
+                return false;
+            }
+        });
     }
 
     public void selectCountry(String name) {
@@ -301,6 +309,13 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 
     @Override
     public void onNextPressed() {
+        if (countryState == 1) {
+            delegate.needShowAlert(ApplicationLoader.applicationContext.getString(R.string.ChooseCountry));
+            return;
+        } else if (countryState == 2) {
+            delegate.needShowAlert(ApplicationLoader.applicationContext.getString(R.string.WrongCountry));
+            return;
+        }
         if (codeField.length() == 0 || phoneField.length() == 0) {
             delegate.needShowAlert(ApplicationLoader.applicationContext.getString(R.string.InvalidPhoneNumber));
             return;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
index c967361ac..e8db9848d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
@@ -271,8 +271,8 @@ public void onResume() {
             listAdapter.notifyDataSetChanged();
         }
         firstStart = false;
-        ((ApplicationActivity)parentActivity).showActionBar();
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).showActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
         fixLayout();
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
index 98fa3b7a5..3e1da8738 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
@@ -193,17 +193,17 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                             if (lower_part > 0) {
                                 bundle.putInt("user_id", lower_part);
                                 fragment.setArguments(bundle);
-                                ((ApplicationActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), false);
+                                ((LaunchActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), false);
                             } else if (lower_part < 0) {
                                 bundle.putInt("chat_id", -lower_part);
                                 fragment.setArguments(bundle);
-                                ((ApplicationActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), false);
+                                ((LaunchActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), false);
                             }
                         } else {
                             int id = (int)(dialog_id >> 32);
                             bundle.putInt("enc_id", id);
                             fragment.setArguments(bundle);
-                            ((ApplicationActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), false);
+                            ((LaunchActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), false);
                         }
                     }
                 }
@@ -306,7 +306,7 @@ public void applySelfActionBar() {
             actionBar.setSubtitle(null);
             actionBar.setCustomView(null);
             actionBar.setTitle(getStringEntry(R.string.SelectChat));
-            ((ApplicationActivity)parentActivity).fixBackButton();
+            ((LaunchActivity)parentActivity).fixBackButton();
         } else {
             ImageView view = (ImageView)parentActivity.findViewById(16908332);
             if (view == null) {
@@ -349,8 +349,8 @@ public void onResume() {
         if (messagesListViewAdapter != null) {
             messagesListViewAdapter.notifyDataSetChanged();
         }
-        ((ApplicationActivity)parentActivity).showActionBar();
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).showActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
     }
 
     @Override
@@ -607,7 +607,7 @@ public boolean onMenuItemActionCollapse(MenuItem menuItem) {
                     messagesListViewAdapter.notifyDataSetChanged();
                 }
                 if (onlySelect) {
-                    ((ApplicationActivity)parentActivity).fixBackButton();
+                    ((LaunchActivity)parentActivity).fixBackButton();
                 }
                 return true;
             }
@@ -629,11 +629,11 @@ public boolean onOptionsItemSelected(MenuItem item) {
         switch (itemId) {
 
             case R.id.messages_list_menu_settings: {
-                ((ApplicationActivity)inflaterActivity).presentFragment(new SettingsActivity(), "settings", false);
+                ((LaunchActivity)inflaterActivity).presentFragment(new SettingsActivity(), "settings", false);
                 break;
             }
             case R.id.messages_list_menu_contacts: {
-                ((ApplicationActivity)inflaterActivity).presentFragment(new ContactsActivity(), "contacts", false);
+                ((LaunchActivity)inflaterActivity).presentFragment(new ContactsActivity(), "contacts", false);
                 break;
             }
             case R.id.messages_list_menu_new_messages: {
@@ -644,7 +644,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
                 bundle.putBoolean("usersAsSections", true);
                 fragment.animationType = 1;
                 fragment.setArguments(bundle);
-                ((ApplicationActivity)inflaterActivity).presentFragment(fragment, "contacts_chat", false);
+                ((LaunchActivity)inflaterActivity).presentFragment(fragment, "contacts_chat", false);
                 break;
             }
             case R.id.messages_list_menu_new_secret_chat: {
@@ -656,11 +656,11 @@ public boolean onOptionsItemSelected(MenuItem item) {
                 bundle.putBoolean("createSecretChat", true);
                 fragment.animationType = 1;
                 fragment.setArguments(bundle);
-                ((ApplicationActivity)inflaterActivity).presentFragment(fragment, "contacts_chat", false);
+                ((LaunchActivity)inflaterActivity).presentFragment(fragment, "contacts_chat", false);
                 break;
             }
             case R.id.messages_list_menu_new_chat: {
-                ((ApplicationActivity)inflaterActivity).presentFragment(new GroupCreateActivity(), "group_create", false);
+                ((LaunchActivity)inflaterActivity).presentFragment(new GroupCreateActivity(), "group_create", false);
                 break;
             }
             case android.R.id.home:
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
index 073e425e2..a0831589b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
@@ -14,6 +14,7 @@
 import android.graphics.Paint;
 import android.graphics.Point;
 import android.graphics.drawable.BitmapDrawable;
+import android.net.Uri;
 import android.os.Bundle;
 import android.support.v7.app.ActionBar;
 import android.util.AttributeSet;
@@ -231,6 +232,12 @@ public Bitmap getBitmap() {
             int x = (int)(percX * imageToCrop.getWidth());
             int y = (int)(percY * imageToCrop.getHeight());
             int size = (int)(percSize * imageToCrop.getWidth());
+            if (x + size > imageToCrop.getWidth()) {
+                size = imageToCrop.getWidth() - x;
+            }
+            if (y + size > imageToCrop.getHeight()) {
+                size = imageToCrop.getHeight() - y;
+            }
             try {
                 return Bitmap.createBitmap(imageToCrop, x, y, size, size);
             } catch (Exception e) {
@@ -277,12 +284,15 @@ protected void onDraw(Canvas canvas) {
     public boolean onFragmentCreate() {
         super.onFragmentCreate();
         String photoPath = getArguments().getString("photoPath");
-        if (photoPath == null) {
+        Uri photoUri = getArguments().getParcelable("photoUri");
+        if (photoPath == null && photoUri == null) {
             return false;
         }
-        File f = new File(photoPath);
-        if (!f.exists()) {
-            return false;
+        if (photoPath != null) {
+            File f = new File(photoPath);
+            if (!f.exists()) {
+                return false;
+            }
         }
         Point displaySize = new Point();
         Display display = ((WindowManager)ApplicationLoader.applicationContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
@@ -292,7 +302,7 @@ public boolean onFragmentCreate() {
             display.getSize(displaySize);
         }
         int size = Math.max(displaySize.x, displaySize.y);
-        imageToCrop = FileLoader.loadBitmap(photoPath, size, size);
+        imageToCrop = FileLoader.loadBitmap(photoPath, photoUri, size, size);
         if (imageToCrop == null) {
             return false;
         }
@@ -376,6 +386,6 @@ public void onResume() {
         if (getActivity() == null) {
             return;
         }
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 1609f3c6d..c101b7b13 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -227,11 +227,11 @@ public void onClick(DialogInterface dialog, int which) {
                             listView.invalidateViews();
                         }
                     } else if (i == notificationRow) {
-                        ((ApplicationActivity)parentActivity).presentFragment(new SettingsNotificationsActivity(), "settings_notifications", false);
+                        ((LaunchActivity)parentActivity).presentFragment(new SettingsNotificationsActivity(), "settings_notifications", false);
                     } else if (i == blockedRow) {
-                        ((ApplicationActivity)parentActivity).presentFragment(new SettingsBlockedUsers(), "settings_blocked", false);
+                        ((LaunchActivity)parentActivity).presentFragment(new SettingsBlockedUsers(), "settings_blocked", false);
                     } else if (i == backgroundRow) {
-                        ((ApplicationActivity)parentActivity).presentFragment(new SettingsWallpapersActivity(), "settings_wallpapers", false);
+                        ((LaunchActivity)parentActivity).presentFragment(new SettingsWallpapersActivity(), "settings_wallpapers", false);
                     } else if (i == askQuestionRow) {
                         final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
                         int uid = preferences.getInt("support_id", 0);
@@ -290,7 +290,7 @@ public void run() {
                                                 Bundle bundle = new Bundle();
                                                 bundle.putInt("user_id", res.user.id);
                                                 fragment.setArguments(bundle);
-                                                ((ApplicationActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), false);
+                                                ((LaunchActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), false);
                                             }
                                         });
                                     } else {
@@ -313,7 +313,7 @@ public void run() {
                             Bundle bundle = new Bundle();
                             bundle.putInt("user_id", supportUser.id);
                             fragment.setArguments(bundle);
-                            ((ApplicationActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), false);
+                            ((LaunchActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), false);
                         }
                     } else if (i == sendLogsRow) {
                         sendLogs();
@@ -500,8 +500,8 @@ public void onResume() {
             listAdapter.notifyDataSetChanged();
         }
         firstStart = false;
-        ((ApplicationActivity)parentActivity).showActionBar();
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).showActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
     }
 
     @Override
@@ -566,7 +566,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     button.setOnClickListener(new View.OnClickListener() {
                         @Override
                         public void onClick(View view) {
-                            ((ApplicationActivity)parentActivity).presentFragment(new SettingsChangeNameActivity(), "change_name", false);
+                            ((LaunchActivity)parentActivity).presentFragment(new SettingsChangeNameActivity(), "change_name", false);
                         }
                     });
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsers.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsers.java
index 9fb79034e..ecf55be26 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsers.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsBlockedUsers.java
@@ -95,7 +95,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         Bundle args = new Bundle();
                         args.putInt("user_id", blockedContacts.get(i).user_id);
                         fragment.setArguments(args);
-                        ((ApplicationActivity)parentActivity).presentFragment(fragment, "user_" + blockedContacts.get(i).user_id, false);
+                        ((LaunchActivity)parentActivity).presentFragment(fragment, "user_" + blockedContacts.get(i).user_id, false);
                     }
                 }
             });
@@ -269,7 +269,7 @@ public void applySelfActionBar() {
             title.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
             title.setCompoundDrawablePadding(0);
         }
-        ((ApplicationActivity)parentActivity).fixBackButton();
+        ((LaunchActivity)parentActivity).fixBackButton();
     }
 
     @Override
@@ -285,8 +285,8 @@ public void onResume() {
             listViewAdapter.notifyDataSetChanged();
         }
         firstStart = false;
-        ((ApplicationActivity)parentActivity).showActionBar();
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).showActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
     }
 
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
@@ -310,7 +310,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
                 bundle.putBoolean("returnAsResult", true);
                 fragment.delegate = this;
                 fragment.setArguments(bundle);
-                ((ApplicationActivity)parentActivity).presentFragment(fragment, "contacts_block", false);
+                ((LaunchActivity)parentActivity).presentFragment(fragment, "contacts_block", false);
                 break;
         }
         return true;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
index f4de45f30..42a1e5cf3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
@@ -292,8 +292,8 @@ public void onResume() {
         if (getActivity() == null) {
             return;
         }
-        ((ApplicationActivity)parentActivity).showActionBar();
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).showActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
index 61b119517..5bcb4cef6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsWallpapersActivity.java
@@ -193,7 +193,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
             if (requestCode == 0) {
                 Utilities.addMediaToGallery(currentPicturePath);
                 try {
-                    Bitmap bitmap = FileLoader.loadBitmap(currentPicturePath, Utilities.dp(320), Utilities.dp(480));
+                    Bitmap bitmap = FileLoader.loadBitmap(currentPicturePath, null, Utilities.dp(320), Utilities.dp(480));
                     File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
                     FileOutputStream stream = new FileOutputStream(toFile);
                     bitmap.compress(Bitmap.CompressFormat.JPEG, 87, stream);
@@ -218,7 +218,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
                     }
                     cursor.close();
 
-                    Bitmap bitmap = FileLoader.loadBitmap(imageFilePath, Utilities.dp(320), Utilities.dp(480));
+                    Bitmap bitmap = FileLoader.loadBitmap(imageFilePath, null, Utilities.dp(320), Utilities.dp(480));
                     File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
                     FileOutputStream stream = new FileOutputStream(toFile);
                     bitmap.compress(Bitmap.CompressFormat.JPEG, 87, stream);
@@ -424,7 +424,7 @@ public void onResume() {
             listAdapter.notifyDataSetChanged();
         }
 
-        ((ApplicationActivity) parentActivity).hideActionBar();
+        ((LaunchActivity) parentActivity).hideActionBar();
 
         processSelectedBackground();
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
index faf8e424d..14b9535fd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
@@ -178,13 +178,13 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                             bundle.putLong("dialog_id", user_id);
                         }
                         fragment.setArguments(bundle);
-                        ((ApplicationActivity)parentActivity).presentFragment(fragment, "media_user_" + user_id, false);
+                        ((LaunchActivity)parentActivity).presentFragment(fragment, "media_user_" + user_id, false);
                     } else if (i == 5 && dialog_id != 0 && currentEncryptedChat instanceof TLRPC.TL_encryptedChat) {
                         IdenticonActivity fragment = new IdenticonActivity();
                         Bundle bundle = new Bundle();
                         bundle.putInt("chat_id", (int)(dialog_id >> 32));
                         fragment.setArguments(bundle);
-                        ((ApplicationActivity)parentActivity).presentFragment(fragment, "key_" + dialog_id, false);
+                        ((LaunchActivity)parentActivity).presentFragment(fragment, "key_" + dialog_id, false);
                     } else if (i == 4 && dialog_id != 0 && currentEncryptedChat instanceof TLRPC.TL_encryptedChat) {
                         AlertDialog.Builder builder = new AlertDialog.Builder(parentActivity);
                         builder.setTitle(getStringEntry(R.string.MessageLifetime));
@@ -312,7 +312,7 @@ public void didReceivedNotification(int id, Object... args) {
                 Bundle bundle = new Bundle();
                 bundle.putInt("enc_id", encryptedChat.id);
                 fragment.setArguments(bundle);
-                ((ApplicationActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), true, false);
+                ((LaunchActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), true, false);
             }
         } else if (id == MessagesController.encryptedChatUpdated) {
             TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat)args[0];
@@ -373,8 +373,8 @@ public void onResume() {
             listAdapter.notifyDataSetChanged();
         }
         firstStart = false;
-        ((ApplicationActivity)parentActivity).showActionBar();
-        ((ApplicationActivity)parentActivity).updateActionBar();
+        ((LaunchActivity)parentActivity).showActionBar();
+        ((LaunchActivity)parentActivity).updateActionBar();
         fixLayout();
     }
 
@@ -439,7 +439,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                 Bundle args = new Bundle();
                 args.putInt("user_id", user.id);
                 fragment.setArguments(args);
-                ((ApplicationActivity)parentActivity).presentFragment(fragment, "add_contact_" + user.id, false);
+                ((LaunchActivity)parentActivity).presentFragment(fragment, "add_contact_" + user.id, false);
                 break;
             }
             case R.id.share_contact: {
@@ -449,7 +449,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                 args.putBoolean("serverOnly", true);
                 fragment.setArguments(args);
                 fragment.delegate = this;
-                ((ApplicationActivity)parentActivity).presentFragment(fragment, "chat_select", false);
+                ((LaunchActivity)parentActivity).presentFragment(fragment, "chat_select", false);
                 break;
             }
             case R.id.edit_contact: {
@@ -457,7 +457,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                 Bundle args = new Bundle();
                 args.putInt("user_id", user_id);
                 fragment.setArguments(args);
-                ((ApplicationActivity)parentActivity).presentFragment(fragment, "add_contact_" + user_id, false);
+                ((LaunchActivity)parentActivity).presentFragment(fragment, "add_contact_" + user_id, false);
                 break;
             }
             case R.id.delete_contact: {
@@ -513,7 +513,7 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id) {
                     bundle.putInt("user_id", lower_part);
                     fragment.setArguments(bundle);
                     fragment.scrollToTopOnResume = true;
-                    ((ApplicationActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), true, false);
+                    ((LaunchActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), true, false);
                     removeSelfFromStack();
                     messageFragment.removeSelfFromStack();
                 } else if (lower_part < 0) {
@@ -521,7 +521,7 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id) {
                     bundle.putInt("chat_id", -lower_part);
                     fragment.setArguments(bundle);
                     fragment.scrollToTopOnResume = true;
-                    ((ApplicationActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), true, false);
+                    ((LaunchActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), true, false);
                     messageFragment.removeSelfFromStack();
                     removeSelfFromStack();
                 }
@@ -531,7 +531,7 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id) {
                 bundle.putInt("enc_id", id);
                 fragment.setArguments(bundle);
                 fragment.scrollToTopOnResume = true;
-                ((ApplicationActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), false);
+                ((LaunchActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), false);
                 messageFragment.removeSelfFromStack();
                 removeSelfFromStack();
             }
@@ -730,7 +730,7 @@ public void onClick(View view) {
                         Bundle bundle = new Bundle();
                         bundle.putInt("user_id", user_id);
                         fragment.setArguments(bundle);
-                        ((ApplicationActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), true, false);
+                        ((LaunchActivity)parentActivity).presentFragment(fragment, "chat" + Math.random(), true, false);
                     }
                 });
                 TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarUpdater.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarUpdater.java
index c11f8c81e..320a36569 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarUpdater.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/AvatarUpdater.java
@@ -21,7 +21,7 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
-import org.telegram.ui.ApplicationActivity;
+import org.telegram.ui.LaunchActivity;
 import org.telegram.ui.PhotoCropActivity;
 
 import java.io.File;
@@ -32,7 +32,6 @@
     private TLRPC.PhotoSize bigPhoto;
     public String uploadingAvatar = null;
     File picturePath = null;
-    public Activity parentActivity = null;
     public BaseFragment parentFragment = null;
     public AvatarUpdaterDelegate delegate;
     private boolean clearAfterUpdate = false;
@@ -47,7 +46,6 @@ public void clear() {
             clearAfterUpdate = true;
         } else {
             parentFragment = null;
-            parentActivity = null;
             delegate = null;
         }
     }
@@ -60,11 +58,7 @@ public void openCamera() {
                 takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(image));
                 currentPicturePath = image.getAbsolutePath();
             }
-            if (parentFragment != null) {
-                parentFragment.startActivityForResult(takePictureIntent, 0);
-            } else if (parentActivity != null) {
-                parentActivity.startActivityForResult(takePictureIntent, 0);
-            }
+            parentFragment.startActivityForResult(takePictureIntent, 0);
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
@@ -74,54 +68,34 @@ public void openGallery() {
         try {
             Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
             photoPickerIntent.setType("image/*");
-            if (parentFragment != null) {
-                parentFragment.startActivityForResult(photoPickerIntent, 1);
-            } else if (parentActivity != null) {
-                parentActivity.startActivityForResult(photoPickerIntent, 1);
-            }
+            parentFragment.startActivityForResult(photoPickerIntent, 1);
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
     }
 
-    private void startCrop(String path) {
+    private void startCrop(String path, Uri uri) {
         try {
-            if (parentFragment != null) {
-                ApplicationActivity activity = (ApplicationActivity)parentFragment.parentActivity;
-                if (activity == null) {
-                    activity = (ApplicationActivity)parentFragment.getActivity();
-                }
-                if (activity == null) {
-                    return;
-                }
-                Bundle params = new Bundle();
+            LaunchActivity activity = (LaunchActivity)parentFragment.parentActivity;
+            if (activity == null) {
+                activity = (LaunchActivity)parentFragment.getActivity();
+            }
+            if (activity == null) {
+                return;
+            }
+            Bundle params = new Bundle();
+            if (path != null) {
                 params.putString("photoPath", path);
-                PhotoCropActivity photoCropActivity = new PhotoCropActivity();
-                photoCropActivity.delegate = this;
-                photoCropActivity.setArguments(params);
-                activity.presentFragment(photoCropActivity, "crop", false);
-            } else {
-                Intent cropIntent = new Intent("com.android.camera.action.CROP");
-                cropIntent.setDataAndType(Uri.fromFile(new File(path)), "image/*");
-                cropIntent.putExtra("crop", "true");
-                cropIntent.putExtra("aspectX", 1);
-                cropIntent.putExtra("aspectY", 1);
-                cropIntent.putExtra("outputX", 800);
-                cropIntent.putExtra("outputY", 800);
-                cropIntent.putExtra("scale", true);
-                cropIntent.putExtra("return-data", false);
-                picturePath = Utilities.generatePicturePath();
-                cropIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(picturePath));
-                cropIntent.putExtra("output", Uri.fromFile(picturePath));
-                if (parentFragment != null) {
-                    parentFragment.startActivityForResult(cropIntent, 2);
-                } else if (parentActivity != null) {
-                    parentActivity.startActivityForResult(cropIntent, 2);
-                }
+            } else if (uri != null) {
+                params.putParcelable("photoUri", uri);
             }
+            PhotoCropActivity photoCropActivity = new PhotoCropActivity();
+            photoCropActivity.delegate = this;
+            photoCropActivity.setArguments(params);
+            activity.presentFragment(photoCropActivity, "crop", false);
         } catch (Exception e) {
             FileLog.e("tmessages", e);
-            Bitmap bitmap = FileLoader.loadBitmap(path, 800, 800);
+            Bitmap bitmap = FileLoader.loadBitmap(path, uri, 800, 800);
             processBitmap(bitmap);
         }
     }
@@ -130,25 +104,14 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
         if (resultCode == Activity.RESULT_OK) {
             if (requestCode == 0) {
                 Utilities.addMediaToGallery(currentPicturePath);
-                startCrop(currentPicturePath);
+                startCrop(currentPicturePath, null);
 
                 currentPicturePath = null;
             } else if (requestCode == 1) {
-                if (data == null) {
+                if (data == null || data.getData() == null) {
                     return;
                 }
-                try {
-                    Uri imageUri = data.getData();
-                    if (imageUri != null) {
-                        String imageFilePath = Utilities.getPath(imageUri);
-                        startCrop(imageFilePath);
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            } else if (requestCode == 2) {
-                Bitmap bitmap = FileLoader.loadBitmap(picturePath.getAbsolutePath(), 800, 800);
-                processBitmap(bitmap);
+                startCrop(null, data.getData());
             }
         }
     }
@@ -195,7 +158,6 @@ public void run() {
                         uploadingAvatar = null;
                         if (clearAfterUpdate) {
                             parentFragment = null;
-                            parentActivity = null;
                             delegate = null;
                         }
                     }
@@ -210,10 +172,8 @@ public void run() {
                         NotificationCenter.Instance.removeObserver(AvatarUpdater.this, FileLoader.FileDidUpload);
                         NotificationCenter.Instance.removeObserver(AvatarUpdater.this, FileLoader.FileDidFailUpload);
                         uploadingAvatar = null;
-                        //delegate.didUploadedPhoto(null, null, null);
                         if (clearAfterUpdate) {
                             parentFragment = null;
-                            parentActivity = null;
                             delegate = null;
                         }
                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/BaseFragment.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/BaseFragment.java
index 84b642043..d29e0f046 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/BaseFragment.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/BaseFragment.java
@@ -17,7 +17,7 @@
 import android.view.animation.AnimationUtils;
 
 import org.telegram.messenger.ConnectionsManager;
-import org.telegram.ui.ApplicationActivity;
+import org.telegram.ui.LaunchActivity;
 import org.telegram.ui.ApplicationLoader;
 
 public class BaseFragment extends Fragment {
@@ -55,7 +55,7 @@ public void finishFragment(boolean bySwipe) {
             onFragmentDestroy();
             return;
         }
-        ((ApplicationActivity)parentActivity).finishFragment(bySwipe);
+        ((LaunchActivity)parentActivity).finishFragment(bySwipe);
         if (getActivity() == null) {
             if (fragmentView != null) {
                 ViewGroup parent = (ViewGroup)fragmentView.getParent();
@@ -80,7 +80,7 @@ public void removeSelfFromStack() {
             onFragmentDestroy();
             return;
         }
-        ((ApplicationActivity)parentActivity).removeFromStack(this);
+        ((LaunchActivity)parentActivity).removeFromStack(this);
         if (getActivity() == null) {
             if (fragmentView != null) {
                 ViewGroup parent = (ViewGroup)fragmentView.getParent();
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 9329d1fb9..7aca7e554 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 
-<!-- -->
+<!--Translated by Telegram Team, corrected by Florian Keller-->
 
 <resources>
     <string name="AppName">Telegram</string>
@@ -48,7 +48,7 @@
     <string name="EncryptedChatStartedOutgoing">%s joined your secret chat.</string>
     <string name="EncryptedChatStartedIncoming">You joined the secret chat.</string>
     <string name="ClearHistory">Clear History</string>
-    <string name="DeleteChat">Delete and Exit</string>
+    <string name="DeleteChat">Delete and exit</string>
     <string name="HiddenName">Hidden Name</string>
     <string name="SelectChat">Select Chat</string>
 
@@ -60,7 +60,7 @@
     <string name="NoFiles">No files yet...</string>
     <string name="FileUploadLimit">File size shouldn\'t be greater than %1$s</string>
     <string name="NotMounted">Storage not mounted</string>
-    <string name="UsbActive">Usb transfer active</string>
+    <string name="UsbActive">USB transfer active</string>
     <string name="InternalStorage">Internal Storage</string>
     <string name="ExternalStorage">External Storage</string>
     <string name="SystemRoot">System Root</string>
@@ -102,9 +102,9 @@
     <string name="EncryptedDescription4">Do not allow forwarding</string>
     <string name="OneNewMessage">%1$d new message</string>
     <string name="FewNewMessages">%1$d new messages</string>
-    <string name="YouWereKicked">You were kicked from this group</string>
+    <string name="YouWereKicked">You were removed from this group</string>
     <string name="YouLeft">You left this group</string>
-    <string name="DeleteThisGroup">Delete this Group</string>
+    <string name="DeleteThisGroup">Delete this group</string>
     <string name="SlideToCancel">SLIDE TO CANCEL</string>
 
     <!--notification-->
@@ -126,7 +126,7 @@
     <string name="NotificationMessagePhoto">%1$s sent you a photo</string>
     <string name="NotificationMessageVideo">%1$s sent you a video</string>
     <string name="NotificationMessageContact">%1$s shared a contact with you</string>
-    <string name="NotificationMessageMap">%1$s sent you a map</string>
+    <string name="NotificationMessageMap">%1$s sent you a location</string>
     <string name="NotificationMessageDocument">%1$s sent you a document</string>
     <string name="NotificationMessageAudio">%1$s sent you an audio</string>
     <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
@@ -134,15 +134,15 @@
     <string name="NotificationMessageGroupPhoto">%1$s sent a photo to the group %2$s</string>
     <string name="NotificationMessageGroupVideo">%1$s sent a video to the group %2$s</string>
     <string name="NotificationMessageGroupContact">%1$s shared a contact in the group %2$s</string>
-    <string name="NotificationMessageGroupMap">%1$s sent a map to the group %2$s</string>
+    <string name="NotificationMessageGroupMap">%1$s sent a location to the group %2$s</string>
     <string name="NotificationMessageGroupDocument">%1$s sent a document to the group %2$s</string>
     <string name="NotificationMessageGroupAudio">%1$s sent an audio to the group %2$s</string>
     <string name="NotificationInvitedToGroup">%1$s invited you to the group %2$s</string>
     <string name="NotificationEditedGroupName">%1$s edited the group\'s %2$s name</string>
     <string name="NotificationEditedGroupPhoto">%1$s edited the group\'s %2$s photo</string>
     <string name="NotificationGroupAddMember">%1$s invited %3$s to the group %2$s</string>
-    <string name="NotificationGroupKickMember">%1$s kicked %3$s from the group %2$s</string>
-    <string name="NotificationGroupKickYou">%1$s kicked you from the group %2$s</string>
+    <string name="NotificationGroupKickMember">%1$s removed %3$s from the group %2$s</string>
+    <string name="NotificationGroupKickYou">%1$s removed you from the group %2$s</string>
     <string name="NotificationGroupLeftMember">%1$s has left the group %2$s</string>
     <string name="NotificationContactJoined">%1$s joined Telegram!</string>
     <string name="NotificationUnrecognizedDevice">%1$s,\nWe detected a login into your account from a new device on %2$s\n\nDevice: %3$s\nLocation: %4$s\n\nIf this wasn’t you, you can go to Settings – Terminate all sessions.\n\nThanks,\nThe Telegram Team</string>
@@ -178,7 +178,7 @@
     <string name="AddMember">Add member</string>
     <string name="DeleteAndExit">Delete and leave group</string>
     <string name="Notifications">Notifications</string>
-    <string name="KickFromGroup">Kick from group</string>
+    <string name="KickFromGroup">Remove from group</string>
 
     <!--contact info view-->
     <string name="ShareContact">Share</string>
@@ -292,21 +292,21 @@
     <string name="OK">OK</string>
 
     <!--messages-->
-    <string name="ActionKickUser">un1 kicked un2</string>
+    <string name="ActionKickUser">un1 removed un2</string>
     <string name="ActionLeftUser">un1 left group</string>
     <string name="ActionAddUser">un1 added un2</string>
-    <string name="ActionRemovedPhoto">un1 removed group photo</string>
-    <string name="ActionChangedPhoto">un1 changed group photo</string>
-    <string name="ActionChangedTitle">un1 changed group name to un2</string>
+    <string name="ActionRemovedPhoto">un1 removed the group photo</string>
+    <string name="ActionChangedPhoto">un1 changed the group photo</string>
+    <string name="ActionChangedTitle">un1 changed the group name to un2</string>
     <string name="ActionCreateGroup">un1 created the group</string>
-    <string name="ActionYouKickUser">You kicked un2</string>
+    <string name="ActionYouKickUser">You removed un2</string>
     <string name="ActionYouLeftUser">You left group</string>
     <string name="ActionYouAddUser">You added un2</string>
-    <string name="ActionYouRemovedPhoto">You removed group photo</string>
-    <string name="ActionYouChangedPhoto">You changed group photo</string>
-    <string name="ActionYouChangedTitle">You changed group name to un2</string>
+    <string name="ActionYouRemovedPhoto">You removed the group photo</string>
+    <string name="ActionYouChangedPhoto">You changed the group photo</string>
+    <string name="ActionYouChangedTitle">You changed the group name to un2</string>
     <string name="ActionYouCreateGroup">You created the group</string>
-    <string name="ActionKickUserYou">un1 kicked you</string>
+    <string name="ActionKickUserYou">un1 removed you</string>
     <string name="ActionAddUserYou">un1 added you</string>
     <string name="UnsuppotedMedia">This message is not supported on your version of Telegram.</string>
     <string name="AttachPhoto">Photo</string>
