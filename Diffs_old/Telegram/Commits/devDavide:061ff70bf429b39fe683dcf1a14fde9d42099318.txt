diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
index 8acc60100..2e76de97d 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
@@ -32,8 +32,8 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.SortedMap;
-import java.util.TreeMap;
+import java.util.SortedSet;
+import java.util.TreeSet;
 
 /**
  * Created by davide on 10/11/15.
@@ -402,21 +402,53 @@ public Bundle getBundleForVotesManagerFragment(TLRPC.ChatFull info, MessageObjec
     }
 
 
+    /**
+     * Internal class used for sorting messages
+     */
+    private class TimeMessageKey implements  Comparable<TimeMessageKey> {
+        final MessageObject messageObject;
+        final Date messageDate;
+        public TimeMessageKey(MessageObject messageObject) {
+            this.messageObject = messageObject;
+            this.messageDate =getMessageDate(messageObject);
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            return messageObject.equals(o);
+        }
+
+        @Override
+        public int hashCode() {
+            return messageObject.hashCode();
+        }
+
+        @Override
+        public int compareTo(TimeMessageKey another) {
+            int cmp = messageDate.compareTo(another.messageDate);
+            if (cmp != 0)
+                return cmp;
+            else{
+                int id1 = messageObject.getId();
+                int id2 = another.messageObject.getId();
+                return id1 < id2 ? -1 : (id1 == id2 ? 0 : 1);
+            }
+        }
+    }
+
     @Override
     public void processMessages(final long dialog_id, List<MessageObject> objects) {
         long groupChatId = messageManager.getMessageGroupId(dialog_id);
         Log.i(LOG_TAG, "Messages not imported yet for group [" + groupChatId + "] importing " + objects.size() + " messages");
-        SortedMap<Date, MessageObject> timeOrderedPollgramMessages = new TreeMap<Date, MessageObject>();
+        SortedSet<TimeMessageKey> timeOrderedPollgramMessages = new TreeSet<TimeMessageKey>();
         for (MessageObject messageObject : objects) {
             if (isPollgramMessage(messageObject)) {
-                Date d = getMessageDate(messageObject);
-                timeOrderedPollgramMessages.put(d, messageObject);
+                timeOrderedPollgramMessages.add(new TimeMessageKey(messageObject));
             }
         }
-        for (Date d : timeOrderedPollgramMessages.keySet()) {
-            MessageObject messageObject = timeOrderedPollgramMessages.get(d);
-            Log.d("Pollgram", "Parsing message date[" + d + "] message["+messageObject.messageText+"]");
-            processMessage(messageObject, false);
+        for (TimeMessageKey tmk : timeOrderedPollgramMessages) {
+            Log.d("Pollgram", "Parsing message date[" + tmk.messageDate + "] message["+tmk.messageObject.messageText+"]");
+            processMessage(tmk.messageObject, false);
         }
     }
 
