diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
index 6ccb4f31f..4cd3a48bb 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
@@ -40,16 +40,15 @@ public void putStubData(int chatId, int creatorId) {
         Log.i(LOG_TAG, "Put Stub test data");
 
         Date creationDate = new Date();
-        Decision d =  new Decision(chatId, creatorId, "what present do we buy ?", "huge bla bla bla", creationDate, true);
+        Decision decision1 =  new Decision(chatId, creatorId, "what present do we buy ?", "huge bla bla bla", creationDate, true);
 
-        Decision decision1 = getDecisions(chatId, null).get(0);
         List<Option> options = new ArrayList<>();
         options.add(new TextOption("Ski", "They cost 385EUR i saw them at the corner shop", decision1.getId()));
         options.add(new TextOption("Phone", "The new StonexOne is AWESOME !!!", decision1.getId()));
         options.add(new TextOption("Trip", "Yeah a trip trought Europe can be a nice idea", decision1.getId()));
         options.add(new TextOption("A stupid idea", "it is late and i have no more ideas ;-/", decision1.getId()));
 
-        PollgramFactory.getPollgramService().notifyNewDecision(d, options);
+        PollgramFactory.getPollgramService().notifyNewDecision(decision1, options);
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
index c90051396..a5d128f7b 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
@@ -69,6 +69,16 @@ public String getDescription() {
      */
     void addDecisionURLSpan(MessageType type, Spannable charSequence);
 
+    /**
+     * remove unnecessary part of the message, like the link for downloading Pollgram from the market
+     * that is needed just for Telegram client different than Pollgram
+     * @param message
+     * @return
+     */
+    String reformatMessage(String message);
+
+    String parseMessageField(String decisionTitle);
+
 
     /**
      * @param messageObject
@@ -83,13 +93,6 @@ public String getDescription() {
      */
     MessageType getMessageType(String msg);
 
-    /**
-     * remove unnecessary part of the message, like the link for downloading Pollgram from the market
-     * that is needed just for Telegram client different than Pollgram
-     * @param message
-     * @return
-     */
-    String reformatMessage(String message);
 
     /**
      * Build message for notify a vote transaction
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
index 994b85700..4a077abbc 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
@@ -34,6 +34,7 @@
 
     private static final String POLLGRAM_MESSAGE_PREFIX = "#Pollgram ";
     protected static final char QUOTE_CHAR = '\'';
+    protected static final char ESCAPE_QUOTE_CHAR = 'Â´';
     private static final char NEW_LINE = '\n';
 
     private static final String WINKING_FACE_EMOJI = EmojiUtils.getEmojiAsString((byte) 0xF0, (byte) 0x9F, (byte) 0x98, (byte)0x89);// winking face
@@ -63,6 +64,33 @@ String getTailingString(){
         context = ApplicationLoader.applicationContext;
     }
 
+    /**
+     * Local version of StringTokenizer that manage default sep char and escape
+     */
+    private class EscapeStringTokenizer extends  StringTokenizer{
+
+        public EscapeStringTokenizer(String string) {
+            super(string, Character.toString(QUOTE_CHAR));
+        }
+
+        public EscapeStringTokenizer(String string, boolean considerNewLine) {
+            super(string, considerNewLine ? Character.toString(QUOTE_CHAR)+ Character.toString(NEW_LINE) : Character.toString(QUOTE_CHAR) );
+        }
+
+        @Override
+        public String nextToken() {
+            String tok = super.nextToken();
+            return parseMessageField(tok);
+        }
+    }
+
+    @Override
+    public String parseMessageField(String str) {
+        str = str.replace(
+                Character.toString(PollgramMessagesManagerImpl.QUOTE_CHAR), "");
+        return str.replace(Character.toString(ESCAPE_QUOTE_CHAR), Character.toString(QUOTE_CHAR));
+    }
+
     private String format(Object obj){
         if (obj instanceof Boolean)
             return getBooleanValue((Boolean) obj);
@@ -75,6 +103,8 @@ private String format(Object obj){
         } else
             strValue = "" + obj;
 
+        strValue = strValue.replace(Character.toString(QUOTE_CHAR), Character.toString(ESCAPE_QUOTE_CHAR));
+
         if (strValue.length() == 0)
             strValue = " ";
 
@@ -231,10 +261,12 @@ public String reformatMessage(String message) {
         // remove talning string
         MessageType type = getMessageType(message);
         if (type == null) {
-            return  message;
+            return message;
         }
         message = message.replace(getTailingString(), "");
-        return  message;
+        // Test will fail if uncomment the follwing row
+        // message = parseMessageField(message);
+        return message;
     }
 
     /**
@@ -284,7 +316,7 @@ public int getMessageGroupId(MessageObject messageObject) {
     public Collection<Vote> getVotes(String msg, int currentChat, Date messageDate ,int userId) throws PollgramParseException {
 
         try {
-            StringTokenizer strTok = new StringTokenizer(msg, Character.toString(QUOTE_CHAR) + Character.toString(NEW_LINE));
+            StringTokenizer strTok = new EscapeStringTokenizer(msg, true);
             strTok.nextToken(); // skip token
             strTok.nextToken(); // skip token
             String decisionTitle = strTok.nextToken();
@@ -322,7 +354,7 @@ public NewDecisionData getNewDecision(String msg, int currentChat, int userId, D
         Decision decision;
         List<Option> optionList = new ArrayList<>();
         try {
-            StringTokenizer strTok = new StringTokenizer(msg, Character.toString(QUOTE_CHAR));
+            StringTokenizer strTok = new EscapeStringTokenizer(msg);
             { //Create decsion
                 strTok.nextToken();//skip this token
                 String title = strTok.nextToken();
@@ -353,7 +385,7 @@ public ClosedDecisionDate getCloseDecision(String msg, int currentChat) throws P
         Decision decision;
         Option winningOption;
         try {
-            StringTokenizer strTok = new StringTokenizer(msg, Character.toString(QUOTE_CHAR));
+            StringTokenizer strTok = new EscapeStringTokenizer(msg);
             strTok.nextToken();//skip this token
             String title = strTok.nextToken();
             strTok.nextToken();//skip this token
@@ -398,7 +430,7 @@ public Decision getReopenDecision(String text, int groupChatId) throws PollgramP
     private Decision getDecisionInDeleteOrReopenMessage(String msg, int groupChatId) throws PollgramParseException {
         Decision decision;
         try {
-            StringTokenizer strTok = new StringTokenizer(msg, Character.toString(QUOTE_CHAR));
+            StringTokenizer strTok = new EscapeStringTokenizer(msg);
             strTok.nextToken(); // skipt this token
             String decisionTitle = strTok.nextToken();
             Decision d = pollgramDAO.getDecision(decisionTitle, groupChatId);
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
index 13783c17c..cbba8f2ca 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
@@ -274,8 +274,8 @@ public Bundle getBundleForVotesManagerFragment(TLRPC.ChatFull info, MessageObjec
             throw new PollgramDAOException("Not a group chat message");
         }
         String urlString = ((URLSpanNoUnderline) url).getURL();
-        String decisionTitle = urlString.replace(
-                Character.toString(PollgramMessagesManagerImpl.QUOTE_CHAR), "");
+        String decisionTitle = messageManager.parseMessageField(urlString);
+
         Decision d = pollgramDAO.getDecision(decisionTitle, groupChatId);
         if (d == null) {
             throw  new PollgramDAOException(ApplicationLoader.applicationContext.
diff --git a/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java b/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
index 30d8b06eb..93092b8d5 100644
--- a/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
+++ b/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
@@ -15,6 +15,7 @@
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.tgnet.TLRPC;
 
+import java.security.InvalidParameterException;
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -116,19 +117,45 @@ public void testSendRemind() throws ParseException {
     }
 
     @Test
-    public void testNewDecision() throws ParseException, PollgramParseException {
-        for (Decision decision : dao.getDecisions(chat.id, null)) {
-            if (!decision.isOpen())
-                continue;
-            List<Option> options = dao.getOptions(decision);
-            String message = messageManager.buildNotifyNewDecision(decision, options);
-
-            PollgramMessagesManager.MessageType type = messageManager.getMessageType(message);
-            Assert.assertEquals(type, PollgramMessagesManager.MessageType.NEW_DECISION);
-
-            assertNewDecision(decision, options, message);
-            assertNewDecision(decision, options, messageManager.reformatMessage(message));
-        }
+    public void testDecision1() throws PollgramParseException {
+        testNewDecision(dao.getDecision(PollgramDAOTestImpl.DECISION_ID_1));
+    }
+
+    @Test
+    public void testDecisionEmptyLongDescription() throws PollgramParseException {
+        testNewDecision(dao.getDecision(PollgramDAOTestImpl.DECISION_ID_EMPTY_LONG_DESC));
+    }
+
+    @Test
+    public void testDecisionNullLongDescription() throws PollgramParseException {
+        testNewDecision(dao.getDecision(PollgramDAOTestImpl.DECISION_ID_NULL_LONG_DESC));
+    }
+
+    @Test
+    public void testDecisionMultilineLongDescription() throws PollgramParseException {
+        testNewDecision(dao.getDecision(PollgramDAOTestImpl.DECISION_ID_MULTILINE_LONG_DESC));
+    }
+
+    @Test
+    public void testDecisionQuotedLongDescription() throws PollgramParseException {
+        testNewDecision(dao.getDecision(PollgramDAOTestImpl.DECISION_ID_QUOTED_LONG_DESC));
+    }
+
+    private void testNewDecision(Decision decision) throws PollgramParseException {
+        if (decision == null)
+            throw new InvalidParameterException("decision can not be null");
+
+        if (!decision.isOpen())
+            throw new InvalidParameterException("decision can not be closed");
+
+        List<Option> options = dao.getOptions(decision);
+        String message = messageManager.buildNotifyNewDecision(decision, options);
+
+        PollgramMessagesManager.MessageType type = messageManager.getMessageType(message);
+        Assert.assertEquals(type, PollgramMessagesManager.MessageType.NEW_DECISION);
+
+        assertNewDecision(decision, options, message);
+        assertNewDecision(decision, options, messageManager.reformatMessage(message));
     }
 
     private void assertNewDecision(Decision decision, List<Option> options, String message) throws PollgramParseException {
diff --git a/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java b/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
index b4107f67c..8add9c046 100644
--- a/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
+++ b/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
@@ -20,38 +20,61 @@
 public class PollgramDAOTestImpl implements PollgramDAO {
 
     private static final String LOG_TAG = "DecisionDAOImpl";
+    private static int myId = 0;
+
+    static final long DECISION_ID_1 = myId++;
+    static final int DECISION_ID_EMPTY_LONG_DESC = myId++;
+    static final int DECISION_ID_NULL_LONG_DESC = myId++;
+    static final int DECISION_ID_MULTILINE_LONG_DESC = myId++;
+    static final int DECISION_ID_QUOTED_LONG_DESC = myId++;
+
 
     // TODO remove stub field
     private final List<Decision> decisions = new ArrayList<>();
     private final List<Option> textOptions = new ArrayList<>();
     private final List<Vote> votes = new ArrayList<>();
 
-    PollgramDAOTestImpl(int chatId, int creatorId){
-        int id = 1;
+    PollgramDAOTestImpl(int chatId, int creatorId) {
         /// just for test
 
         Date date = new Date();
+        int id = 1;
+
+        decisions.add(new Decision(DECISION_ID_1, chatId, creatorId, "what present do we buy ?", " i am huge bla bla bla", date, true));
+        textOptions.add(new TextOption(id++, "Ski", "They cost 385EUR i saw them at the corner shop", DECISION_ID_1));
+        textOptions.add(new TextOption(id++, "Phone", "The new StonexOne is AWESOME !!!", DECISION_ID_1));
+        textOptions.add(new TextOption(id++, "Trip", "Yeah a trip trought Europe can be a nice idea", DECISION_ID_1));
+        textOptions.add(new TextOption(id++, "A stupid idea", "it is late and i have no more ideas ;-/", DECISION_ID_1));
 
-        decisions.add(new Decision(id++,chatId, creatorId,"what present do we buy ?", id+" i'm huge bla bla bla",date ,true));
-        decisions.add(new Decision(id++, chatId, creatorId, "Where do we go ?", "",date, true));
-        decisions.add(new Decision(id++, chatId, creatorId, "When will the party be ?", null,date, true));
-        decisions.add(new Decision(id++, chatId, creatorId, "When will the party be ?", "this is\na multine\nfucking dscription",date, true));
-        decisions.add(new Decision(id++, chatId, creatorId, "Do we add Slomp to the group ?", id + "huge bla bla bla",date, false));
+        decisions.add(new Decision(DECISION_ID_EMPTY_LONG_DESC, chatId, creatorId, "Where do we go ?", "", date, true));
+        textOptions.add(new TextOption(id++, "it's a pair of Ski", "They cost 385EUR i saw them at the corner shop", DECISION_ID_EMPTY_LONG_DESC));
+        textOptions.add(new TextOption(id++, "Phone", "The new StonexOne's AWESOME !!!", DECISION_ID_EMPTY_LONG_DESC));
+        textOptions.add(new TextOption(id++, "that's a trip. It's", "Yeah a trip trought Europe can be a nice idea", DECISION_ID_EMPTY_LONG_DESC));
+        textOptions.add(new TextOption(id++, "A stupid idea", "it is late and i have no more ideas ;-/", DECISION_ID_EMPTY_LONG_DESC));
 
-        textOptions.add(new TextOption(id++, "Ski", "They cost 385EUR i saw them at the corner shop", decisions.get(0).getId()));
-        textOptions.add(new TextOption(id++, "Phone", "The new StonexOne is AWESOME !!!", decisions.get(0).getId()));
-        textOptions.add(new TextOption(id++, "Trip", "Yeah a trip trought Europe can be a nice idea", decisions.get(0).getId()));
-        textOptions.add(new TextOption(id++, "A stupid idea", "it is late and i have no more ideas ;-/", decisions.get(0).getId()));
+        decisions.add(new Decision(DECISION_ID_NULL_LONG_DESC, chatId, creatorId, "When will the party be ?", null, date, true));
+
+        decisions.add(new Decision(DECISION_ID_MULTILINE_LONG_DESC, chatId, creatorId, "When will the party be ?", "this is\na multine\nfucking dscription", date, true));
+        textOptions.add(new TextOption(id++, "Ski", "They cost 385EUR i saw them at the corner shop", DECISION_ID_MULTILINE_LONG_DESC));
+        textOptions.add(new TextOption(id++, "Phone", "The new StonexOne is AWESOME !!!", DECISION_ID_MULTILINE_LONG_DESC));
+        textOptions.add(new TextOption(id++, "Trip", "Yeah a trip trought Europe can be a nice idea", DECISION_ID_MULTILINE_LONG_DESC));
+        textOptions.add(new TextOption(id++, "A stupid idea", "it is late and i have no more ideas ;-/", DECISION_ID_MULTILINE_LONG_DESC));
+
+        decisions.add(new Decision(DECISION_ID_QUOTED_LONG_DESC, chatId, creatorId, "Do we add Slomp to the group ?", "i'm a huge bla bla", date, true));
+        textOptions.add(new TextOption(id++, "Ski", "They cost 385EUR i saw them at the corner shop", DECISION_ID_QUOTED_LONG_DESC));
+        textOptions.add(new TextOption(id++, "Phone", "The new StonexOne is AWESOME !!!", DECISION_ID_QUOTED_LONG_DESC));
+        textOptions.add(new TextOption(id++, "Trip", "Yeah a trip trought Europe can be a nice idea", DECISION_ID_QUOTED_LONG_DESC));
+        textOptions.add(new TextOption(id++, "A stupid idea", "it is late and i have no more ideas ;-/", DECISION_ID_QUOTED_LONG_DESC));
 
     }
 
     @Override
     public Decision save(Decision d) {
-        Decision foundDecision = getDecision(d.getTitle(),d.getChatId());
+        Decision foundDecision = getDecision(d.getTitle(), d.getChatId());
         return save(d, foundDecision, decisions);
     }
 
-    private<T extends DBBean> T save(T d, T found, List<T> list) {
+    private <T extends DBBean> T save(T d, T found, List<T> list) {
         if (found == null)
             list.add(d);
         else {
@@ -64,7 +87,7 @@ public Decision save(Decision d) {
 
     @Override
     public Decision getDecision(long decisionId) {
-        for (Decision d : decisions){
+        for (Decision d : decisions) {
             if (d.getId() == decisionId)
                 return d;
         }
@@ -74,7 +97,7 @@ public Decision getDecision(long decisionId) {
     @Override
     public List<Decision> getDecisions(int chatId, @Nullable Boolean open) {
         List<Decision> outList = new ArrayList<>();
-        for(Decision d : decisions)
+        for (Decision d : decisions)
             if (open == null || d.isOpen() == open.booleanValue())
                 outList.add(d);
         return outList;
@@ -90,29 +113,31 @@ public Option getOption(long optionId) {
 
     @Override
     public List<Option> getOptions(Decision decision) {
-        return  getOptions(decision.getId());
+        return getOptions(decision.getId());
 
     }
 
     @Override
     public List<Option> getOptions(long decisionId) {
-        if (decisionId == decisions.get(0).getId() || decisionId == decisions.get(2).getId())
-            return textOptions;
-        else
-            return new ArrayList<>();
+        List<Option> outList = new ArrayList<>();
+        for (Option o : textOptions) {
+            if (o.getDecisionId() == decisionId)
+                outList.add(o);
+        }
+        return outList;
     }
 
     private Vote getVote(int userId, Option option) {
         // TODO so stub
-        long stubId = option.getId()*17;
-        Boolean voteValue = option.getId()%2 ==0 ? true : (option.getId()%3 ==0 ? null : false);
+        long stubId = option.getId() * 17;
+        Boolean voteValue = option.getId() % 2 == 0 ? true : (option.getId() % 3 == 0 ? null : false);
         return new Vote(stubId, voteValue, new Date(), userId, option.getId());
     }
 
 
     public List<TLRPC.User> getUsers(int[] usersIds) {
         List<TLRPC.User> users = new ArrayList<>();
-        for (int i = 0 ; i< usersIds.length ; i++){
+        for (int i = 0; i < usersIds.length; i++) {
             users.add(MessagesController.getInstance().getUser(usersIds[i]));
         }
         return users;
@@ -122,7 +147,7 @@ private Vote getVote(int userId, Option option) {
     public List<Vote> getUserVoteForDecision(long decisionId, int userId) {
         List<Vote> votes = new ArrayList<>();
         for (Option c : getOptions(decisionId)) {
-            votes.add(getVote(userId,c));
+            votes.add(getVote(userId, c));
         }
         return votes;
     }
@@ -160,7 +185,7 @@ public Vote save(Vote vote) {
 
     @Override
     public Decision getDecision(String decisionTitle, int chatId) {
-        for (Decision d : decisions){
+        for (Decision d : decisions) {
             if (d.getTitle().equals(decisionTitle) && d.getChatId() == chatId)
                 return d;
         }
@@ -169,18 +194,18 @@ public Decision getDecision(String decisionTitle, int chatId) {
 
     @Override
     public Option getOption(String optionTitle, Decision decision) {
-        for (Option o : textOptions){
-            if (o.getTitle().equals(optionTitle) &&  o.getDecisionId() == decision.getId())
-                return  o;
+        for (Option o : textOptions) {
+            if (o.getTitle().equals(optionTitle) && o.getDecisionId() == decision.getId())
+                return o;
         }
         return null;
     }
 
     @Override
     public Vote getVote(long optionId, int userId) {
-        for (Vote v : votes){
+        for (Vote v : votes) {
             if (v.getOptionId() == optionId && v.getUserId() == userId)
-                return  v;
+                return v;
         }
         return null;
     }
